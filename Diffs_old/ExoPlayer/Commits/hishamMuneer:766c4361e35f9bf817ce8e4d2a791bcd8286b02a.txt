diff --git a/demo/build.gradle b/demo/build.gradle
index 7eea25478f..f5561dfb4f 100644
--- a/demo/build.gradle
+++ b/demo/build.gradle
@@ -51,6 +51,11 @@ dependencies {
     compile project(modulePrefix + 'library-hls')
     compile project(modulePrefix + 'library-smoothstreaming')
     compile project(modulePrefix + 'library-ui')
+    compile 'commons-io:commons-io:2.5'
+    compile 'com.google.code.gson:gson:2.8.1'
+    compile 'com.github.bumptech.glide:glide:4.0.0'
+    compile 'com.android.support:support-v4:25.4.0'
+    annotationProcessor 'com.github.bumptech.glide:compiler:4.0.0'
     withExtensionsCompile project(path: modulePrefix + 'extension-ffmpeg')
     withExtensionsCompile project(path: modulePrefix + 'extension-flac')
     withExtensionsCompile project(path: modulePrefix + 'extension-ima')
diff --git a/demo/src/main/AndroidManifest.xml b/demo/src/main/AndroidManifest.xml
index 27abc24d21..79ef49563e 100644
--- a/demo/src/main/AndroidManifest.xml
+++ b/demo/src/main/AndroidManifest.xml
@@ -24,6 +24,7 @@
 
   <uses-permission android:name="android.permission.INTERNET" />
   <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+  <uses-permission android:name="android.permission.WAKE_LOCK" />
 
   <uses-feature
       android:name="android.software.leanback"
@@ -34,6 +35,7 @@
 
   <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
   <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+  <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
 
   <application
       android:name=".DemoApplication"
@@ -42,7 +44,8 @@
       android:icon="@mipmap/ic_launcher"
       android:label="@string/application_name"
       android:largeHeap="true">
-    <activity android:name=".MainActivity">
+    <activity android:name=".MainActivity"
+        android:theme="@android:style/Theme.Holo.Light">
       <intent-filter>
         <action android:name="android.intent.action.MAIN" />
 
@@ -98,7 +101,8 @@
         <category android:name="android.intent.category.DEFAULT" />
       </intent-filter>
     </activity>
-    <activity android:name=".LoginActivity"></activity>
+    <activity android:name=".LoginActivity"
+        android:theme="@android:style/Theme.Holo.Light"></activity>
   </application>
 
 </manifest>
\ No newline at end of file
diff --git a/demo/src/main/ic_download-web.png b/demo/src/main/ic_download-web.png
new file mode 100644
index 0000000000..5a51f68fcb
Binary files /dev/null and b/demo/src/main/ic_download-web.png differ
diff --git a/demo/src/main/ic_download_complete-web.png b/demo/src/main/ic_download_complete-web.png
new file mode 100644
index 0000000000..479f340858
Binary files /dev/null and b/demo/src/main/ic_download_complete-web.png differ
diff --git a/demo/src/main/java/adapters/VideoAdapter.java b/demo/src/main/java/adapters/VideoAdapter.java
new file mode 100644
index 0000000000..db9e54b64f
--- /dev/null
+++ b/demo/src/main/java/adapters/VideoAdapter.java
@@ -0,0 +1,102 @@
+package adapters;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.LayoutRes;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ArrayAdapter;
+import android.widget.ImageView;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.bumptech.glide.Glide;
+import com.google.android.exoplayer2.demo.R;
+import com.google.android.exoplayer2.demo.Utils;
+import com.google.android.exoplayer2.demo.ZipHelper;
+
+import java.io.File;
+import java.util.List;
+
+import models.VideoModel;
+
+/**
+ * Created by Hisham on 03/Sep/2017 - 17:07
+ */
+
+public class VideoAdapter extends ArrayAdapter<VideoModel> {
+    private final Activity context;
+    private final int resource;
+    private final List<VideoModel> items;
+    private ItemListener listener;
+
+    public interface ItemListener {
+        void onItemClicked(VideoModel model);
+        void onDownloadClicked(VideoModel model, ImageView ivDownload);
+    }
+
+//    public interface DownloadListener {
+//    }
+
+    public void setItemListener(ItemListener listener){
+        this.listener = listener;
+    }
+
+
+    public VideoAdapter(@NonNull Activity context, @LayoutRes int resource, @NonNull List<VideoModel> objects) {
+        super(context, resource, objects);
+        this.context = context;
+        this.resource = resource;
+        this.items = objects;
+    }
+
+    @NonNull
+    @Override
+    public View getView(final int position, @Nullable View convertView, @NonNull ViewGroup parent) {
+
+        View v = convertView;
+//        if (v == null) {
+        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        v = inflater.inflate(resource, parent, false);
+//        }
+
+        ImageView ivThumb = (ImageView) v.findViewById(R.id.ivThumb);
+        final ImageView ivDownload = (ImageView) v.findViewById(R.id.ivDownload);
+        TextView tvTitle = (TextView) v.findViewById(R.id.tvTitle);
+
+        File dir = new File(Utils.getStorageDirectoryExtracts() + items.get(position).getVideoId());
+        File[] file = dir.listFiles();
+        if(Utils.isFolderPresent(dir) && ZipHelper.searchFile(file, null)){
+            ivDownload.setImageResource(R.mipmap.ic_download_complete);
+        } else {
+            ivDownload.setImageResource(R.mipmap.ic_download);
+        }
+
+
+        Glide.with(context).load(items.get(position).getThumbnail()).into(ivThumb);
+
+        tvTitle.setText(items.get(position).getName());
+
+        ivDownload.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if(listener != null)
+                    listener.onDownloadClicked(items.get(position), ivDownload);
+
+            }
+        });
+
+        v.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if(listener != null)
+                    listener.onItemClicked(items.get(position));
+            }
+        });
+
+        return v;
+    }
+}
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/DownloadTask.java b/demo/src/main/java/com/google/android/exoplayer2/demo/DownloadTask.java
new file mode 100644
index 0000000000..1adbcaacf5
--- /dev/null
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/DownloadTask.java
@@ -0,0 +1,147 @@
+package com.google.android.exoplayer2.demo;
+
+import android.app.Activity;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.os.AsyncTask;
+import android.os.PowerManager;
+import android.widget.Toast;
+
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+
+/**
+ * Created by Hisham on 01/Sep/2017 - 12:27
+ * https://stackoverflow.com/questions/3028306/download-a-file-with-android-and-showing-the-progress-in-a-progressdialog
+ */
+
+// usually, subclasses of AsyncTask are declared inside the activity class.
+// that way, you can easily modify the UI thread from here
+public class DownloadTask extends AsyncTask<String, Integer, String> {
+
+    private final String filePath;
+    private final DownloadTaskListener listener;
+    private Activity activity;
+    private PowerManager.WakeLock mWakeLock;
+
+    public interface DownloadTaskListener {
+        void onFileDownload();
+    }
+
+    public DownloadTask(Activity activity, String filePath, DownloadTaskListener listener) {
+        this.activity = activity;
+        this.filePath = filePath;
+        this.listener = listener;
+    }
+
+    // declare the dialog as a member field of your activity
+   private ProgressDialog mProgressDialog;
+
+
+    @Override
+    protected String doInBackground(String... sUrl) {
+        InputStream input = null;
+        OutputStream output = null;
+        HttpURLConnection connection = null;
+        try {
+            URL url = new URL(sUrl[0]);
+            connection = (HttpURLConnection) url.openConnection();
+            connection.connect();
+
+            // expect HTTP 200 OK, so we don't mistakenly save error report
+            // instead of the file
+            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
+                return "Server returned HTTP " + connection.getResponseCode()
+                        + " " + connection.getResponseMessage();
+            }
+
+            // this will be useful to display download percentage
+            // might be -1: server did not report the length
+            int fileLength = connection.getContentLength();
+
+            // download the file
+            input = connection.getInputStream();
+            output = new FileOutputStream(filePath);
+
+            byte data[] = new byte[4096];
+            long total = 0;
+            int count;
+            while ((count = input.read(data)) != -1) {
+                // allow canceling with back button
+                if (isCancelled()) {
+                    input.close();
+                    return null;
+                }
+                total += count;
+                // publishing the progress....
+                if (fileLength > 0) // only if total length is known
+                    publishProgress((int) (total * 100 / fileLength));
+                output.write(data, 0, count);
+            }
+        } catch (Exception e) {
+            return e.toString();
+        } finally {
+            try {
+                if (output != null)
+                    output.close();
+                if (input != null)
+                    input.close();
+            } catch (IOException ignored) {
+            }
+
+            if (connection != null)
+                connection.disconnect();
+        }
+        return null;
+    }
+
+    @Override
+    protected void onPreExecute() {
+        super.onPreExecute();
+        // take CPU lock to prevent CPU from going off if the user
+        // presses the power button during download
+        PowerManager pm = (PowerManager) activity.getSystemService(Context.POWER_SERVICE);
+        mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, getClass().getName());
+        mWakeLock.acquire();
+        // instantiate it within the onCreate method
+        mProgressDialog = new ProgressDialog(activity);
+        mProgressDialog.setMessage("Downloading video for offline use...");
+        mProgressDialog.setIndeterminate(true);
+        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
+        mProgressDialog.setCancelable(true);
+        mProgressDialog.show();
+
+        mProgressDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {
+            @Override
+            public void onCancel(DialogInterface dialog) {
+                cancel(true);
+            }
+        });
+    }
+
+    @Override
+    protected void onProgressUpdate(Integer... progress) {
+        super.onProgressUpdate(progress);
+        // if we get here, length is known, now set indeterminate to false
+        mProgressDialog.setIndeterminate(false);
+        mProgressDialog.setMax(100);
+        mProgressDialog.setProgress(progress[0]);
+    }
+
+    @Override
+    protected void onPostExecute(String result) {
+        mWakeLock.release();
+        mProgressDialog.dismiss();
+        if (result != null)
+            Toast.makeText(activity,"Download error: "+result, Toast.LENGTH_LONG).show();
+        else {
+            Toast.makeText(activity, "File downloaded", Toast.LENGTH_SHORT).show();
+            listener.onFileDownload();
+        }
+    }
+}
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/LoginActivity.java b/demo/src/main/java/com/google/android/exoplayer2/demo/LoginActivity.java
index 858bb76231..dee11a2fcd 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/LoginActivity.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/LoginActivity.java
@@ -27,9 +27,16 @@ protected void onCreate(Bundle savedInstanceState) {
         btnLogin.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                String url = "http://35.154.11.202/VocabimateLoginServer/webapi/myresource/login";
+
+
+                if(!Utils.isNetworkAvailable(LoginActivity.this)){
+                    Toast.makeText(LoginActivity.this, "No internet available", Toast.LENGTH_SHORT).show();
+                    return;
+                }
+
+                String url = Utils.getBaseUrl() + "VocabimateLoginServer/webapi/myresource/login";
                 String body = "username=" + etUserName.getText().toString()+"&password="+etPass.getText().toString();
-                ServerHit.JSONTask task = new ServerHit.JSONTask(body, new ServerHit.ServiceHitResponseListener() {
+                ServerHit.JSONTask task = new ServerHit.JSONTask("POST", "application/x-www-form-urlencoded", body, new ServerHit.ServiceHitResponseListener() {
                     @Override
                     public void onDone(String response) {
                         TokenManager.setToken(response);
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/MainActivity.java b/demo/src/main/java/com/google/android/exoplayer2/demo/MainActivity.java
index 58078f4131..e1a671e07d 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/MainActivity.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/MainActivity.java
@@ -1,32 +1,162 @@
 package com.google.android.exoplayer2.demo;
 
 import android.app.Activity;
+import android.app.ProgressDialog;
 import android.content.Intent;
 import android.net.Uri;
 import android.os.Bundle;
 import android.text.TextUtils;
+import android.util.Log;
 import android.view.View;
 import android.widget.Button;
+import android.widget.GridView;
+import android.widget.ImageView;
 import android.widget.Toast;
 
 import com.google.android.exoplayer2.upstream.novo.TokenManager;
+import com.google.gson.Gson;
+
+import org.apache.commons.io.FilenameUtils;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.File;
+import java.io.UnsupportedEncodingException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import adapters.VideoAdapter;
+import models.VideoModel;
 
 public class MainActivity extends Activity {
 
     private Button btnLogin;
+//    private ImageView iVDownload;
+//    private String videoId = "arc_single";
+    private static final String TAG = MainActivity.class.getSimpleName();
+    private GridView lvAll;
+
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
-
         initStuff();
     }
 
     private void initStuff() {
         btnLogin = (Button) findViewById(R.id.btnLogin);
-        Button btnOpen = (Button) findViewById(R.id.btnOpen);
-        Button btnRestricted = (Button) findViewById(R.id.btnRestricted);
+        Button btnLocal = (Button) findViewById(R.id.btnLocal);
+//        iVDownload = (ImageView) findViewById(R.id.iVDownload);
+        lvAll = (GridView) findViewById(R.id.lvAll);
+
+        // hit server to get all videos urls
+        final ProgressDialog progressDialog = new ProgressDialog(MainActivity.this);
+        progressDialog.setMessage("Please wait...");
+        progressDialog.setIndeterminate(true);
+        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
+        progressDialog.setCancelable(false);
+        progressDialog.show();
+
+        ServerHit.JSONTask task = new ServerHit.JSONTask("GET", null, null, new ServerHit.ServiceHitResponseListener() {
+            @Override
+            public void onDone(final String response) {
+                Log.d(TAG, "onDone: " + response);
+
+                try {
+                    JSONArray array = new JSONArray(response);
+                    List<VideoModel> items = new ArrayList<>();
+                    for (int i = 0; i < array.length(); i++) {
+                        JSONObject jsonObject = array.getJSONObject(i);
+                        VideoModel model = new Gson().fromJson(jsonObject.toString(), VideoModel.class);
+                        items.add(model);
+                    }
+                    // hit server, get items and pass into adapter
+                    VideoAdapter adapter = new VideoAdapter(MainActivity.this, R.layout.row_videos_grid, items);
+                    adapter.setItemListener(new VideoAdapter.ItemListener() {
+                        @Override
+                        public void onItemClicked(final VideoModel model) {
+                            File dir = new File(Utils.getStorageDirectoryExtracts() + model.getVideoId());
+                            File[] file = dir.listFiles();
+                            if(Utils.isFolderPresent(dir)){
+                                // trying to find my file
+                                Log.d(TAG, "onItemClicked: " + ZipHelper.searchFile(file, null));
+                                ZipHelper.searchFile(file, new ZipHelper.FileListener() {
+                                    @Override
+                                    public void onFileSearchComplete(boolean fileFound, String fileToPlay) {
+                                        if(fileFound && !TextUtils.isEmpty(fileToPlay)) {
+                                            Intent intent = new Intent(getApplicationContext(), PlayerActivity.class);
+                                            intent.setData(Uri.parse(fileToPlay));
+                                            intent.setAction(PlayerActivity.ACTION_VIEW);
+                                            startActivity(intent);
+                                        } else {
+                                            Toast.makeText(MainActivity.this, "Unable to play local video, playing stream.", Toast.LENGTH_SHORT).show();
+                                            playMediaFromServer(model);
+                                        }
+                                    }
+                                });
+                            } else { // if folder is not present locally, play via server
+                                playMediaFromServer(model);
+                            }
+                        }
+
+                        @Override
+                        public void onDownloadClicked(VideoModel model, final ImageView ivDownload) {
+                            String serverFileUrl = Utils.getBaseUrl() + "VocabimateContentServer/webapi/video/download?videoId=" + model.getVideoId();
+                            String videoId;
+                            try {
+                                Map<String, String> params = Utils.splitQuery(new URL(serverFileUrl));
+                                if(params != null && params.size() > 0 && params.containsKey("videoId")) {
+                                    videoId = params.get("videoId");
+                                } else {
+                                    Toast.makeText(MainActivity.this, "Video id not found", Toast.LENGTH_SHORT).show();
+                                    return;
+                                }
+                            } catch (UnsupportedEncodingException | MalformedURLException e) {
+                                e.printStackTrace();
+                                return;
+                            }
+                            // execute this when the downloader must be fired
+                            final File sourceZipFile = new File(Utils.getStorageDirectoryZips() + videoId);
+                            String fileNameWithOutExt = FilenameUtils.removeExtension(sourceZipFile.getName());
+                            final File targetDirectory = new File(Utils.getStorageDirectoryExtracts() + fileNameWithOutExt);
+                            targetDirectory.mkdir();
+
+                            final DownloadTask downloadTask = new DownloadTask(MainActivity.this, sourceZipFile.getAbsolutePath(), new DownloadTask.DownloadTaskListener() {
+                                @Override
+                                public void onFileDownload() {
+                                    new ZipHelper.ZipTask(MainActivity.this, new ZipHelper.ZipTaskListener() {
+                                        @Override
+                                        public void onUnzipped(String fileToPlay) {
+                                            Log.d(TAG, "onUnzipped: " + fileToPlay);
+                                            ivDownload.setImageResource(R.mipmap.ic_download_complete);
+                                        }
+                                    }).execute(sourceZipFile, targetDirectory);
+                                }
+                            });
+                            downloadTask.execute(serverFileUrl);
+
+                        }
+                    });
+                    lvAll.setAdapter(adapter);
+                } catch (JSONException e) {
+                    e.printStackTrace();
+                }
+                progressDialog.dismiss();
+            }
+
+            @Override
+            public void onError(String error) {
+                progressDialog.dismiss();
+            }
+        });
+
+        String url = Utils.getBaseUrl() +"VocabimateContentServer/webapi/video/fetchAll";
+        task.execute(url);
 
         btnLogin.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -42,31 +172,65 @@ public void onClick(View v) {
             }
         });
 
-        btnOpen.setOnClickListener(new View.OnClickListener() {
+
+
+
+        btnLocal.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                Intent intent = new Intent(getApplicationContext(), PlayerActivity.class);
-                intent.setData(Uri.parse("http://35.154.11.202/VocabimateContentServer/m3u8-encrypted-open/master.m3u8"));
-                intent.setAction(PlayerActivity.ACTION_VIEW);
-                startActivity(intent);
+
             }
         });
 
-        btnRestricted.setOnClickListener(new View.OnClickListener() {
+    }
+
+    private void playMediaFromServer(VideoModel model) {
+        ServerHit.JSONTask streamTask = new ServerHit.JSONTask("GET", null, null, new ServerHit.ServiceHitResponseListener() {
             @Override
-            public void onClick(View v) {
-                Intent intent = new Intent(getApplicationContext(), PlayerActivity.class);
-                intent.setData(Uri.parse("http://35.154.11.202/VocabimateContentServer/m3u8-encrypted-auth/master.m3u8"));
-                intent.setAction(PlayerActivity.ACTION_VIEW);
-                startActivity(intent);
+            public void onDone(String response) {
+                try {
+                    JSONObject object = new JSONObject(response);
+                    String videoUrl = object.getString("videoUrl");
+                    // send to player
+                    Intent intent = new Intent(getApplicationContext(), PlayerActivity.class);
+                    intent.setData(Uri.parse(videoUrl));
+                    intent.setAction(PlayerActivity.ACTION_VIEW);
+                    startActivity(intent);
+                } catch (JSONException e) {
+                    e.printStackTrace();
+                }
+            }
+
+            @Override
+            public void onError(String error) {
+
             }
         });
+        streamTask.execute(Utils.getBaseUrl() +"VocabimateContentServer/webapi/video/stream?videoId=" + model.getVideoId());
     }
 
     @Override
     protected void onResume() {
         super.onResume();
         loginButtonTextUpdate();
+        makeVocaDirectory();
+//        File dir = new File(storageDirectoryZips + videoId);
+//        if(isFolderPresent(dir)){
+//            iVDownload.setImageResource(R.mipmap.ic_download_complete);
+//        } else {
+//            iVDownload.setImageResource(R.mipmap.ic_download);
+//        }
+    }
+
+    private void makeVocaDirectory() {
+        File file = new File(Utils.getStorageDirectoryZips());
+        File fileExtracts = new File(Utils.getStorageDirectoryExtracts());
+        if(!file.exists()) {
+            file.mkdirs();
+        }
+        if(!fileExtracts.exists()) {
+            fileExtracts.mkdirs();
+        }
     }
 
     private void loginButtonTextUpdate() {
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/ServerHit.java b/demo/src/main/java/com/google/android/exoplayer2/demo/ServerHit.java
index 9ebefbc28c..60be14feba 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/ServerHit.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/ServerHit.java
@@ -1,6 +1,7 @@
 package com.google.android.exoplayer2.demo;
 
 import android.os.AsyncTask;
+import android.text.TextUtils;
 import android.util.Log;
 
 import java.io.BufferedReader;
@@ -26,11 +27,15 @@
     public static class JSONTask extends AsyncTask<String,String, String > {
 
         private final ServiceHitResponseListener listener;
+        private final String type;
         private String body;
+        private String contentType;
 
-        public JSONTask(String body, ServiceHitResponseListener listener){
+        public JSONTask(String type, String contentType, String body, ServiceHitResponseListener listener){
             this.body = body;
             this.listener = listener;
+            this.type = type;
+            this.contentType = contentType;
         }
 
         @Override
@@ -46,9 +51,12 @@ protected String doInBackground(String... params) {
             try {
                 URL url = new URL(params[0]);
                 connection = (HttpURLConnection) url.openConnection();
-                connection.setRequestMethod("POST");
-                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
-
+                if(!TextUtils.isEmpty(type)) {
+                    connection.setRequestMethod(type);
+                }
+                if(!TextUtils.isEmpty(contentType)) {
+                    connection.setRequestProperty("Content-Type", contentType);
+                }
                 if(body != null) {
                     byte[] outputInBytes = body.getBytes("UTF-8");
                     OutputStream os = connection.getOutputStream();
@@ -60,7 +68,7 @@ protected String doInBackground(String... params) {
                 InputStream stream = connection.getInputStream();
                 reader = new BufferedReader(new InputStreamReader(stream));
                 StringBuffer buffer = new StringBuffer();
-                String line ="";
+                String line;
                 while ((line = reader.readLine()) != null){
                     buffer.append(line);
                 }
@@ -99,4 +107,7 @@ protected void onPostExecute(final String result) {
     }
 
     private static final String TAG = ServerHit.class.getSimpleName();
+
+
+    
 }
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/Utils.java b/demo/src/main/java/com/google/android/exoplayer2/demo/Utils.java
new file mode 100644
index 0000000000..3bd36b3b53
--- /dev/null
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/Utils.java
@@ -0,0 +1,81 @@
+package com.google.android.exoplayer2.demo;
+
+import android.content.Context;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+import android.os.Environment;
+
+import java.io.File;
+import java.io.UnsupportedEncodingException;
+import java.net.URL;
+import java.net.URLDecoder;
+import java.util.LinkedHashMap;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Created by Hisham on 01/Sep/2017 - 16:49
+ */
+
+public class Utils {
+
+    private static final String storageDirectoryZips = Environment.getExternalStorageDirectory() + "/voca/zips/";
+    private static final String storageDirectoryExtracts = Environment.getExternalStorageDirectory() + "/voca/extracts/";
+    private static final String baseUrl = "http://35.154.11.202/";
+//    private static final String baseUrl = "http://192.168.0.94:8080/"; // local
+
+    public static String getStorageDirectoryZips() {
+        return storageDirectoryZips;
+    }
+
+    public static String getStorageDirectoryExtracts() {
+        return storageDirectoryExtracts;
+    }
+
+    public static String getBaseUrl() {
+        return baseUrl;
+    }
+
+    public static boolean isFolderPresent(File dir) {
+        if(dir.exists() && dir.isDirectory()) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+
+    public static boolean isNetworkAvailable(Context context) {
+        ConnectivityManager cm =
+                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
+        NetworkInfo netInfo = cm.getActiveNetworkInfo();
+        return netInfo != null && netInfo.isConnectedOrConnecting();
+    }
+
+    public static Map<String, List<String>> splitQueryAdvanced(URL url) throws UnsupportedEncodingException {
+        final Map<String, List<String>> query_pairs = new LinkedHashMap<>();
+        final String[] pairs = url.getQuery().split("&");
+        for (String pair : pairs) {
+            final int idx = pair.indexOf("=");
+            final String key = idx > 0 ? URLDecoder.decode(pair.substring(0, idx), "UTF-8") : pair;
+            if (!query_pairs.containsKey(key)) {
+                query_pairs.put(key, new LinkedList<String>());
+            }
+            final String value = idx > 0 && pair.length() > idx + 1 ? URLDecoder.decode(pair.substring(idx + 1), "UTF-8") : null;
+            query_pairs.get(key).add(value);
+        }
+        return query_pairs;
+    }
+
+    public static Map<String, String> splitQuery(URL url) throws UnsupportedEncodingException {
+        Map<String, String> query_pairs = new LinkedHashMap<String, String>();
+        String query = url.getQuery();
+        String[] pairs = query.split("&");
+        for (String pair : pairs) {
+            int idx = pair.indexOf("=");
+            query_pairs.put(URLDecoder.decode(pair.substring(0, idx), "UTF-8"), URLDecoder.decode(pair.substring(idx + 1), "UTF-8"));
+        }
+        return query_pairs;
+    }
+}
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/ZipHelper.java b/demo/src/main/java/com/google/android/exoplayer2/demo/ZipHelper.java
new file mode 100644
index 0000000000..dc45911bb1
--- /dev/null
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/ZipHelper.java
@@ -0,0 +1,134 @@
+package com.google.android.exoplayer2.demo;
+
+import android.app.Activity;
+import android.app.ProgressDialog;
+import android.os.AsyncTask;
+import android.util.Log;
+
+import java.io.BufferedInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipInputStream;
+
+/**
+ * Created by Hisham on 31/Aug/2017 - 16:06 - https://stackoverflow.com/a/27050680
+ */
+
+public class ZipHelper {
+
+    public static class ZipTask extends AsyncTask<File, Object, File> {
+
+        private final Activity activity;
+        private final ZipTaskListener listener;
+
+        public ZipTask(Activity activity, ZipTaskListener listener) {
+            this.activity = activity;
+            this.listener = listener;
+        }
+
+        ProgressDialog progressDialog;
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = new ProgressDialog(activity);
+            progressDialog.setMessage("Unzipping, please wait...");
+            progressDialog.setIndeterminate(true);
+            progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
+            progressDialog.setCancelable(false);
+            progressDialog.show();
+
+        }
+
+        @Override
+        protected File doInBackground(File... params) {
+            try {
+                ZipHelper.unzip(params[0], params[1]);
+                return params[1];
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+            return null;
+        }
+        @Override
+        protected void onPostExecute(File targetDirectory) {
+            super.onPostExecute(targetDirectory);
+            progressDialog.dismiss();
+            listener.onUnzipped(targetDirectory.getAbsolutePath());
+        }
+    }
+
+
+    public interface ZipTaskListener {
+        void onUnzipped(String fileToPlay);
+    }
+
+    public static void unzip(File zipFile, File targetDirectory) throws IOException {
+        ZipInputStream zis = new ZipInputStream(new BufferedInputStream(new FileInputStream(zipFile)));
+        try {
+            ZipEntry ze;
+            int count;
+            byte[] buffer = new byte[8192];
+            while ((ze = zis.getNextEntry()) != null) {
+                File file = new File(targetDirectory, ze.getName());
+                File dir = ze.isDirectory() ? file : file.getParentFile();
+                if (!dir.isDirectory() && !dir.mkdirs())
+                    throw new FileNotFoundException("Failed to ensure directory: " +
+                            dir.getAbsolutePath());
+                if (ze.isDirectory())
+                    continue;
+                FileOutputStream fout = new FileOutputStream(file);
+                try {
+                    while ((count = zis.read(buffer)) != -1)
+                        fout.write(buffer, 0, count);
+                } finally {
+                    fout.close();
+                }
+            /* if time should be restored as well
+            long time = ze.getTime();
+            if (time > 0)
+                file.setLastModified(time);
+            */
+            }
+        } finally {
+            zis.close();
+        }
+    }
+
+    /**
+     * This method searches the first file named
+     * @param file
+     * @param listener
+     * @return
+     */
+    public static boolean searchFile(File[] file, FileListener listener) {
+        if(file.length > 0) {
+            for (File f : file) {
+                String filenameToSearch = "prog_index.m3u8"; // file name to search in the folder you just unarchived
+//                if (f.isFile() && f.getName().equalsIgnoreCase(filenameToSearch)) {// f.getPath().endsWith("master.m3u8")) {
+                if (f.isFile() && f.getPath().endsWith(filenameToSearch)) {
+                    if(listener != null){ listener.onFileSearchComplete(true, f.getAbsolutePath());}
+                    Log.d(TAG, "searchFile: " + f.getAbsolutePath());
+                    return true; // if the file is found on the root level, we stop the execution
+                }
+            }
+
+            for (File f : file) {
+                if (f.isDirectory() && searchFile(f.listFiles(), listener)) {
+                    return true;
+                }
+            }
+        }
+        if(listener != null){ listener.onFileSearchComplete(false, null);}
+        return false;
+    }
+
+    private static final String TAG = ZipHelper.class.getSimpleName();
+
+    public interface FileListener{
+        void onFileSearchComplete(boolean fileFound, String path);
+    }
+}
diff --git a/demo/src/main/java/models/VideoModel.java b/demo/src/main/java/models/VideoModel.java
new file mode 100644
index 0000000000..457596734e
--- /dev/null
+++ b/demo/src/main/java/models/VideoModel.java
@@ -0,0 +1,36 @@
+package models;
+
+/**
+ * Created by Hisham on 03/Sep/2017 - 17:08
+ */
+
+public class VideoModel {
+
+    private String thumbnail;
+    private String name;
+    private String videoId;
+
+    public String getThumbnail() {
+        return thumbnail;
+    }
+
+    public void setThumbnail(String thumbnail) {
+        this.thumbnail = thumbnail;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getVideoId() {
+        return videoId;
+    }
+
+    public void setVideoId(String videoId) {
+        this.videoId = videoId;
+    }
+}
diff --git a/demo/src/main/res/layout/activity_main.xml b/demo/src/main/res/layout/activity_main.xml
index 76284ae1c4..38e20a93c9 100644
--- a/demo/src/main/res/layout/activity_main.xml
+++ b/demo/src/main/res/layout/activity_main.xml
@@ -23,8 +23,8 @@
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:layout_marginLeft="32dp"
+        android:visibility="gone"
         android:layout_marginRight="32dp"
-        android:layout_marginTop="64dp"
         android:text="Encrypted stream - Open"
         android:textAllCaps="false" />
 
@@ -34,7 +34,46 @@
         android:layout_height="wrap_content"
         android:layout_marginLeft="32dp"
         android:layout_marginRight="32dp"
+        android:visibility="gone"
         android:layout_marginTop="16dp"
         android:text="Encrypted stream - Token Auth"
         android:textAllCaps="false" />
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginLeft="32dp"
+        android:layout_marginRight="32dp"
+        android:layout_gravity="center"
+        android:visibility="gone"
+        android:gravity="center"
+        android:layout_marginTop="16dp"
+        android:orientation="horizontal">
+
+
+        <Button
+            android:id="@+id/btnLocal"
+            android:layout_width="match_parent"
+            android:layout_toLeftOf="@+id/iVDownload"
+            android:layout_height="wrap_content"
+            android:text="Play Local"
+            android:textAllCaps="false" />
+
+        <ImageView
+            android:id="@+id/iVDownload"
+            android:layout_alignParentRight="true"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:src="@mipmap/ic_download" />
+
+    </RelativeLayout>
+
+
+    <GridView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:numColumns="2"
+        android:id="@+id/lvAll"></GridView>
+
 </LinearLayout>
diff --git a/demo/src/main/res/layout/row_videos.xml b/demo/src/main/res/layout/row_videos.xml
new file mode 100644
index 0000000000..de9f4d0624
--- /dev/null
+++ b/demo/src/main/res/layout/row_videos.xml
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:padding="8dp"
+    android:gravity="center"
+    android:layout_height="match_parent">
+
+    <ImageView
+        android:id="@+id/ivThumb"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentTop="true"
+        android:src="@mipmap/ic_launcher" />
+
+    <TextView
+        android:id="@+id/tvTitle"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginLeft="15dp"
+        android:gravity="center_vertical"
+        android:layout_marginStart="15dp"
+        android:layout_toRightOf="@+id/ivThumb"
+        android:text="TextView"
+        android:layout_toLeftOf="@+id/ivDownload"
+        android:layout_toStartOf="@+id/ivDownload"
+        android:layout_alignParentTop="true"
+        android:layout_alignBottom="@+id/ivDownload" />
+
+    <ImageView
+        android:id="@+id/ivDownload"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentEnd="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentTop="true"
+        android:src="@mipmap/ic_download" />
+</RelativeLayout>
\ No newline at end of file
diff --git a/demo/src/main/res/layout/row_videos_grid.xml b/demo/src/main/res/layout/row_videos_grid.xml
new file mode 100644
index 0000000000..1d5549ceee
--- /dev/null
+++ b/demo/src/main/res/layout/row_videos_grid.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:padding="8dp"
+    android:gravity="center"
+    android:layout_height="match_parent">
+
+    <ImageView
+        android:id="@+id/ivThumb"
+        android:layout_width="wrap_content"
+        android:layout_height="128dp"
+        android:scaleType="fitCenter"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentTop="true"
+        android:src="@mipmap/ic_launcher"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true" />
+
+    <TextView
+        android:id="@+id/tvTitle"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="8dp"
+        android:text="TextView"
+        android:layout_below="@+id/ivThumb"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_toLeftOf="@+id/ivDownload"
+        android:layout_toStartOf="@+id/ivDownload" />
+
+    <ImageView
+        android:id="@+id/ivDownload"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:src="@mipmap/ic_download"
+        android:layout_below="@+id/ivThumb"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true" />
+</RelativeLayout>
\ No newline at end of file
diff --git a/demo/src/main/res/mipmap-hdpi/ic_download.png b/demo/src/main/res/mipmap-hdpi/ic_download.png
new file mode 100644
index 0000000000..aae7cbc609
Binary files /dev/null and b/demo/src/main/res/mipmap-hdpi/ic_download.png differ
diff --git a/demo/src/main/res/mipmap-hdpi/ic_download_complete.png b/demo/src/main/res/mipmap-hdpi/ic_download_complete.png
new file mode 100644
index 0000000000..f5642acf2e
Binary files /dev/null and b/demo/src/main/res/mipmap-hdpi/ic_download_complete.png differ
diff --git a/demo/src/main/res/mipmap-mdpi/ic_download.png b/demo/src/main/res/mipmap-mdpi/ic_download.png
new file mode 100644
index 0000000000..8d075d94a7
Binary files /dev/null and b/demo/src/main/res/mipmap-mdpi/ic_download.png differ
diff --git a/demo/src/main/res/mipmap-mdpi/ic_download_complete.png b/demo/src/main/res/mipmap-mdpi/ic_download_complete.png
new file mode 100644
index 0000000000..5a859a8de2
Binary files /dev/null and b/demo/src/main/res/mipmap-mdpi/ic_download_complete.png differ
diff --git a/demo/src/main/res/mipmap-xhdpi/ic_download.png b/demo/src/main/res/mipmap-xhdpi/ic_download.png
new file mode 100644
index 0000000000..7c624c3e72
Binary files /dev/null and b/demo/src/main/res/mipmap-xhdpi/ic_download.png differ
diff --git a/demo/src/main/res/mipmap-xhdpi/ic_download_complete.png b/demo/src/main/res/mipmap-xhdpi/ic_download_complete.png
new file mode 100644
index 0000000000..23ebd391d3
Binary files /dev/null and b/demo/src/main/res/mipmap-xhdpi/ic_download_complete.png differ
diff --git a/demo/src/main/res/mipmap-xxhdpi/ic_download.png b/demo/src/main/res/mipmap-xxhdpi/ic_download.png
new file mode 100644
index 0000000000..85b155a0ba
Binary files /dev/null and b/demo/src/main/res/mipmap-xxhdpi/ic_download.png differ
diff --git a/demo/src/main/res/mipmap-xxhdpi/ic_download_complete.png b/demo/src/main/res/mipmap-xxhdpi/ic_download_complete.png
new file mode 100644
index 0000000000..94a75b0cdf
Binary files /dev/null and b/demo/src/main/res/mipmap-xxhdpi/ic_download_complete.png differ
diff --git a/demo/src/main/res/mipmap-xxxhdpi/ic_download.png b/demo/src/main/res/mipmap-xxxhdpi/ic_download.png
new file mode 100644
index 0000000000..7e084b9e91
Binary files /dev/null and b/demo/src/main/res/mipmap-xxxhdpi/ic_download.png differ
diff --git a/demo/src/main/res/mipmap-xxxhdpi/ic_download_complete.png b/demo/src/main/res/mipmap-xxxhdpi/ic_download_complete.png
new file mode 100644
index 0000000000..aea67c4c78
Binary files /dev/null and b/demo/src/main/res/mipmap-xxxhdpi/ic_download_complete.png differ
