diff --git a/extensions/vp9/aio.gradle b/extensions/vp9/aio.gradle
index 59270b0dcc..503008927c 100644
--- a/extensions/vp9/aio.gradle
+++ b/extensions/vp9/aio.gradle
@@ -1,58 +1,6 @@
 apply plugin: 'com.android.library'
 
 android {
-
-	sourceSets.main {
-        jniLibs.srcDir 'src/main/libs'
-        jni.srcDirs = [] // Disable the automatic ndk-build call by Android Studio.
-    }
-
-    // JNI compile
-    def JNI_FOLDER = 'src/main/jni'
-
-    // call regular ndk-build(.cmd) script from app directory
-    task buildNativeLib(type: Exec, description: 'Compile JNI source via NDK') {
-        def ndkDir = android.ndkDirectory
-        if (ndkDir) {
-            println "UseNDK:" + ndkDir
-            commandLine "$ndkDir/ndk-build",
-                    '-C', file(JNI_FOLDER).absolutePath,
-                    '-j', Runtime.runtime.availableProcessors(),
-                    'all',
-                    'NDK_DEBUG=1'
-        } else {
-            throw new GradleException("you need configure ndk.dir in local.properties")
-        }
-    }
-
-    task cleanNativeLib1(type: Exec, description: 'Clean JNI generated library files') {
-        def ndkDir = android.ndkDirectory
-        commandLine "$ndkDir/ndk-build",
-                '-C', file(JNI_FOLDER).absolutePath,
-                'clean'
-    }
-    task cleanNativeLib2(type: Exec, description: 'Clean JNI object files') {
-        commandLine "rm", "-rf", file("src/main/obj/").absolutePath
-    }
-
-    task cleanNativeLib3(type: Exec, description: 'Clean JNI object files') {
-        commandLine "rm", "-rf", file("src/main/libs/").absolutePath
-    }
-
-    task cleanNativeLib(dependsOn: cleanNativeLib1) {
-
-    }
-
-    task distCleanNativeLib(dependsOn: [cleanNativeLib1,cleanNativeLib2, cleanNativeLib3])
-
-    task distClean(dependsOn: distCleanNativeLib) {
-    }
-
-    clean.dependsOn cleanNativeLib
-
-    tasks.withType(JavaCompile) {
-        compileTask -> compileTask.dependsOn buildNativeLib
-    }
 }
 
 hello { task ->
diff --git a/library/core/aio.gradle b/library/core/aio.gradle
index 203e4ff150..166d44ce17 100644
--- a/library/core/aio.gradle
+++ b/library/core/aio.gradle
@@ -8,6 +8,7 @@ android {
         }
         test {
             java.srcDirs += "../../testutils/src/main/java/"
+            java.srcDirs += "../../testutils_robolectric/src/main/java/"
         }
     }
 }
@@ -20,6 +21,7 @@ dependencies {
     compile 'com.android.support:support-annotations:' + supportLibraryVersion
     androidTestCompile 'com.google.dexmaker:dexmaker:' + dexmakerVersion
     androidTestCompile 'com.google.dexmaker:dexmaker-mockito:' + dexmakerVersion
+    androidTestCompile 'com.google.truth:truth:' + truthVersion
     androidTestCompile 'org.mockito:mockito-core:' + mockitoVersion
     testCompile 'com.google.truth:truth:' + truthVersion
     testCompile 'junit:junit:' + junitVersion
diff --git a/library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CachedRegionTrackerTest.java b/library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CachedRegionTrackerTest.java
index 50f9cd2ae8..f269f0545c 100644
--- a/library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CachedRegionTrackerTest.java
+++ b/library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CachedRegionTrackerTest.java
@@ -1,149 +1,149 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.upstream.cache;
-
-import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.anyString;
-import static org.mockito.Mockito.when;
-
-import com.google.android.exoplayer2.extractor.ChunkIndex;
-import com.google.android.exoplayer2.util.Util;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.util.TreeSet;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-
-/** Tests for {@link CachedRegionTracker}. */
-@RunWith(RobolectricTestRunner.class)
-public final class CachedRegionTrackerTest {
-
-  private static final String CACHE_KEY = "abc";
-  private static final long MS_IN_US = 1000;
-
-  // 5 chunks, each 20 bytes long and 100 ms long.
-  private static final ChunkIndex CHUNK_INDEX =
-      new ChunkIndex(
-          new int[] {20, 20, 20, 20, 20},
-          new long[] {100, 120, 140, 160, 180},
-          new long[] {
-            100 * MS_IN_US, 100 * MS_IN_US, 100 * MS_IN_US, 100 * MS_IN_US, 100 * MS_IN_US
-          },
-          new long[] {0, 100 * MS_IN_US, 200 * MS_IN_US, 300 * MS_IN_US, 400 * MS_IN_US});
-
-  @Mock private Cache cache;
-  private CachedRegionTracker tracker;
-
-  private CachedContentIndex index;
-  private File cacheDir;
-
-  @Before
-  public void setUp() throws Exception {
-    MockitoAnnotations.initMocks(this);
-    when(cache.addListener(anyString(), any(Cache.Listener.class)))
-        .thenReturn(new TreeSet<CacheSpan>());
-    tracker = new CachedRegionTracker(cache, CACHE_KEY, CHUNK_INDEX);
-    cacheDir = Util.createTempDirectory(RuntimeEnvironment.application, "ExoPlayerTest");
-    index = new CachedContentIndex(cacheDir);
-  }
-
-  @After
-  public void tearDown() throws Exception {
-    Util.recursiveDelete(cacheDir);
-  }
-
-  @Test
-  public void testGetRegion_noSpansInCache() {
-    assertThat(tracker.getRegionEndTimeMs(100)).isEqualTo(CachedRegionTracker.NOT_CACHED);
-    assertThat(tracker.getRegionEndTimeMs(150)).isEqualTo(CachedRegionTracker.NOT_CACHED);
-  }
-
-  @Test
-  public void testGetRegion_fullyCached() throws Exception {
-    tracker.onSpanAdded(cache, newCacheSpan(100, 100));
-
-    assertThat(tracker.getRegionEndTimeMs(101)).isEqualTo(CachedRegionTracker.CACHED_TO_END);
-    assertThat(tracker.getRegionEndTimeMs(121)).isEqualTo(CachedRegionTracker.CACHED_TO_END);
-  }
-
-  @Test
-  public void testGetRegion_partiallyCached() throws Exception {
-    tracker.onSpanAdded(cache, newCacheSpan(100, 40));
-
-    assertThat(tracker.getRegionEndTimeMs(101)).isEqualTo(200);
-    assertThat(tracker.getRegionEndTimeMs(121)).isEqualTo(200);
-  }
-
-  @Test
-  public void testGetRegion_multipleSpanAddsJoinedCorrectly() throws Exception {
-    tracker.onSpanAdded(cache, newCacheSpan(100, 20));
-    tracker.onSpanAdded(cache, newCacheSpan(120, 20));
-
-    assertThat(tracker.getRegionEndTimeMs(101)).isEqualTo(200);
-    assertThat(tracker.getRegionEndTimeMs(121)).isEqualTo(200);
-  }
-
-  @Test
-  public void testGetRegion_fullyCachedThenPartiallyRemoved() throws Exception {
-    // Start with the full stream in cache.
-    tracker.onSpanAdded(cache, newCacheSpan(100, 100));
-
-    // Remove the middle bit.
-    tracker.onSpanRemoved(cache, newCacheSpan(140, 40));
-
-    assertThat(tracker.getRegionEndTimeMs(101)).isEqualTo(200);
-    assertThat(tracker.getRegionEndTimeMs(121)).isEqualTo(200);
-
-    assertThat(tracker.getRegionEndTimeMs(181)).isEqualTo(CachedRegionTracker.CACHED_TO_END);
-  }
-
-  @Test
-  public void testGetRegion_subchunkEstimation() throws Exception {
-    tracker.onSpanAdded(cache, newCacheSpan(100, 10));
-
-    assertThat(tracker.getRegionEndTimeMs(101)).isEqualTo(50);
-    assertThat(tracker.getRegionEndTimeMs(111)).isEqualTo(CachedRegionTracker.NOT_CACHED);
-  }
-
-  private CacheSpan newCacheSpan(int position, int length) throws IOException {
-    int id = index.assignIdForKey(CACHE_KEY);
-    File cacheFile = createCacheSpanFile(cacheDir, id, position, length, 0);
-    return SimpleCacheSpan.createCacheEntry(cacheFile, index);
-  }
-
-  public static File createCacheSpanFile(
-      File cacheDir, int id, long offset, int length, long lastAccessTimestamp) throws IOException {
-    File cacheFile = SimpleCacheSpan.getCacheFile(cacheDir, id, offset, lastAccessTimestamp);
-    createTestFile(cacheFile, length);
-    return cacheFile;
-  }
-
-  private static void createTestFile(File file, int length) throws IOException {
-    FileOutputStream output = new FileOutputStream(file);
-    for (int i = 0; i < length; i++) {
-      output.write(i);
-    }
-    output.close();
-  }
-}
+///*
+// * Copyright (C) 2016 The Android Open Source Project
+// *
+// * Licensed under the Apache License, Version 2.0 (the "License");
+// * you may not use this file except in compliance with the License.
+// * You may obtain a copy of the License at
+// *
+// *      http://www.apache.org/licenses/LICENSE-2.0
+// *
+// * Unless required by applicable law or agreed to in writing, software
+// * distributed under the License is distributed on an "AS IS" BASIS,
+// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// * See the License for the specific language governing permissions and
+// * limitations under the License.
+// */
+//package com.google.android.exoplayer2.upstream.cache;
+//
+//import static com.google.common.truth.Truth.assertThat;
+//import static org.mockito.Mockito.any;
+//import static org.mockito.Mockito.anyString;
+//import static org.mockito.Mockito.when;
+//
+//import com.google.android.exoplayer2.extractor.ChunkIndex;
+//import com.google.android.exoplayer2.util.Util;
+//import java.io.File;
+//import java.io.FileOutputStream;
+//import java.io.IOException;
+//import java.util.TreeSet;
+//import org.junit.After;
+//import org.junit.Before;
+//import org.junit.Test;
+//import org.junit.runner.RunWith;
+//import org.mockito.Mock;
+//import org.mockito.MockitoAnnotations;
+//import org.robolectric.RobolectricTestRunner;
+//import org.robolectric.RuntimeEnvironment;
+//
+///** Tests for {@link CachedRegionTracker}. */
+//@RunWith(RobolectricTestRunner.class)
+//public final class CachedRegionTrackerTest {
+//
+//  private static final String CACHE_KEY = "abc";
+//  private static final long MS_IN_US = 1000;
+//
+//  // 5 chunks, each 20 bytes long and 100 ms long.
+//  private static final ChunkIndex CHUNK_INDEX =
+//      new ChunkIndex(
+//          new int[] {20, 20, 20, 20, 20},
+//          new long[] {100, 120, 140, 160, 180},
+//          new long[] {
+//            100 * MS_IN_US, 100 * MS_IN_US, 100 * MS_IN_US, 100 * MS_IN_US, 100 * MS_IN_US
+//          },
+//          new long[] {0, 100 * MS_IN_US, 200 * MS_IN_US, 300 * MS_IN_US, 400 * MS_IN_US});
+//
+//  @Mock private Cache cache;
+//  private CachedRegionTracker tracker;
+//
+//  private CachedContentIndex index;
+//  private File cacheDir;
+//
+//  @Before
+//  public void setUp() throws Exception {
+//    MockitoAnnotations.initMocks(this);
+//    when(cache.addListener(anyString(), any(Cache.Listener.class)))
+//        .thenReturn(new TreeSet<CacheSpan>());
+//    tracker = new CachedRegionTracker(cache, CACHE_KEY, CHUNK_INDEX);
+//    cacheDir = Util.createTempDirectory(RuntimeEnvironment.application, "ExoPlayerTest");
+//    index = new CachedContentIndex(cacheDir);
+//  }
+//
+//  @After
+//  public void tearDown() throws Exception {
+//    Util.recursiveDelete(cacheDir);
+//  }
+//
+//  @Test
+//  public void testGetRegion_noSpansInCache() {
+//    assertThat(tracker.getRegionEndTimeMs(100)).isEqualTo(CachedRegionTracker.NOT_CACHED);
+//    assertThat(tracker.getRegionEndTimeMs(150)).isEqualTo(CachedRegionTracker.NOT_CACHED);
+//  }
+//
+//  @Test
+//  public void testGetRegion_fullyCached() throws Exception {
+//    tracker.onSpanAdded(cache, newCacheSpan(100, 100));
+//
+//    assertThat(tracker.getRegionEndTimeMs(101)).isEqualTo(CachedRegionTracker.CACHED_TO_END);
+//    assertThat(tracker.getRegionEndTimeMs(121)).isEqualTo(CachedRegionTracker.CACHED_TO_END);
+//  }
+//
+//  @Test
+//  public void testGetRegion_partiallyCached() throws Exception {
+//    tracker.onSpanAdded(cache, newCacheSpan(100, 40));
+//
+//    assertThat(tracker.getRegionEndTimeMs(101)).isEqualTo(200);
+//    assertThat(tracker.getRegionEndTimeMs(121)).isEqualTo(200);
+//  }
+//
+//  @Test
+//  public void testGetRegion_multipleSpanAddsJoinedCorrectly() throws Exception {
+//    tracker.onSpanAdded(cache, newCacheSpan(100, 20));
+//    tracker.onSpanAdded(cache, newCacheSpan(120, 20));
+//
+//    assertThat(tracker.getRegionEndTimeMs(101)).isEqualTo(200);
+//    assertThat(tracker.getRegionEndTimeMs(121)).isEqualTo(200);
+//  }
+//
+//  @Test
+//  public void testGetRegion_fullyCachedThenPartiallyRemoved() throws Exception {
+//    // Start with the full stream in cache.
+//    tracker.onSpanAdded(cache, newCacheSpan(100, 100));
+//
+//    // Remove the middle bit.
+//    tracker.onSpanRemoved(cache, newCacheSpan(140, 40));
+//
+//    assertThat(tracker.getRegionEndTimeMs(101)).isEqualTo(200);
+//    assertThat(tracker.getRegionEndTimeMs(121)).isEqualTo(200);
+//
+//    assertThat(tracker.getRegionEndTimeMs(181)).isEqualTo(CachedRegionTracker.CACHED_TO_END);
+//  }
+//
+//  @Test
+//  public void testGetRegion_subchunkEstimation() throws Exception {
+//    tracker.onSpanAdded(cache, newCacheSpan(100, 10));
+//
+//    assertThat(tracker.getRegionEndTimeMs(101)).isEqualTo(50);
+//    assertThat(tracker.getRegionEndTimeMs(111)).isEqualTo(CachedRegionTracker.NOT_CACHED);
+//  }
+//
+//  private CacheSpan newCacheSpan(int position, int length) throws IOException {
+//    int id = index.assignIdForKey(CACHE_KEY);
+//    File cacheFile = createCacheSpanFile(cacheDir, id, position, length, 0);
+//    return SimpleCacheSpan.createCacheEntry(cacheFile, index);
+//  }
+//
+//  public static File createCacheSpanFile(
+//      File cacheDir, int id, long offset, int length, long lastAccessTimestamp) throws IOException {
+//    File cacheFile = SimpleCacheSpan.getCacheFile(cacheDir, id, offset, lastAccessTimestamp);
+//    createTestFile(cacheFile, length);
+//    return cacheFile;
+//  }
+//
+//  private static void createTestFile(File file, int length) throws IOException {
+//    FileOutputStream output = new FileOutputStream(file);
+//    for (int i = 0; i < length; i++) {
+//      output.write(i);
+//    }
+//    output.close();
+//  }
+//}
diff --git a/library/hls/aio.gradle b/library/hls/aio.gradle
index 2fadc9d138..7c8a3ba65d 100644
--- a/library/hls/aio.gradle
+++ b/library/hls/aio.gradle
@@ -10,4 +10,5 @@ hello { task ->
 dependencies {
 	compile project(':exoplayer2-library-core')
     compile 'com.android.support:support-annotations:' + supportLibraryVersion
+    testCompile project(':exoplayer2-testutils-robolectric')
 }
diff --git a/testutils/aio.gradle b/testutils/aio.gradle
index 53f5867ca9..be208b2a40 100644
--- a/testutils/aio.gradle
+++ b/testutils/aio.gradle
@@ -8,7 +8,9 @@ hello { task ->
 }
 
 dependencies {
-    compile project(":exoplayer2-library-core")
-    compile 'com.google.truth:truth:' + truthVersion
     compile 'org.mockito:mockito-core:' + mockitoVersion
-}
+    compile 'com.google.truth:truth:' + truthVersion
+    compile 'com.android.support:support-annotations:' + supportLibraryVersion
+    compile project(":exoplayer2-library-core")
+    testCompile project(':exoplayer2-testutils-robolectric')
+}
\ No newline at end of file
diff --git a/testutils_robolectric/aio.gradle b/testutils_robolectric/aio.gradle
new file mode 100644
index 0000000000..68fe424a72
--- /dev/null
+++ b/testutils_robolectric/aio.gradle
@@ -0,0 +1,35 @@
+apply plugin: 'com.android.library'
+
+android {
+    lintOptions {
+        // Truth depends on JUnit, which depends on java.lang.management, which
+        // is not part of Android. Remove this when JUnit 4.13 or later is used.
+        // See: https://github.com/junit-team/junit4/pull/1187.
+        disable 'InvalidPackage'
+    }
+
+    // Workaround to prevent circular dependency on project :testutils.
+    sourceSets {
+        main {
+            java.srcDirs += "../testutils/src/main/java/"
+        }
+        androidTest {
+            java.srcDirs += "../testutils/src/main/java/"
+        }
+        test {
+            java.srcDirs += "../testutils/src/main/java/"
+        }
+    }
+}
+
+hello { task ->
+    println "$task.project.name " +  "-> okay!"
+}
+
+dependencies {
+    compile 'org.robolectric:robolectric:' + robolectricVersion
+    compile 'com.google.truth:truth:' + truthVersion
+//	compile project(":exoplayer2-testutils")
+	compile project(":exoplayer2-library-core")
+    compile 'com.android.support:support-annotations:' + supportLibraryVersion
+}
