diff --git a/constants.gradle b/constants.gradle
index d7349c3c66..7fb90d9370 100644
--- a/constants.gradle
+++ b/constants.gradle
@@ -22,7 +22,7 @@ project.ext {
     minSdkVersion = 14
     targetSdkVersion = 28
     compileSdkVersion = 28
-    buildToolsVersion = '28.0.2'
+    buildToolsVersion = '28.0.3'
     testSupportLibraryVersion = '0.5'
     supportLibraryVersion = '27.1.1'
     dexmakerVersion = '1.2'
diff --git a/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlaybackControlView.java b/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlaybackControlView.java
deleted file mode 100644
index 0b4b94ee1a..0000000000
--- a/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlaybackControlView.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.ui;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import com.google.android.exoplayer2.util.RepeatModeUtil;
-
-/** @deprecated Use {@link PlayerControlView}. */
-@Deprecated
-public class PlaybackControlView extends PlayerControlView {
-
-  /** @deprecated Use {@link com.google.android.exoplayer2.ControlDispatcher}. */
-  @Deprecated
-  public interface ControlDispatcher extends com.google.android.exoplayer2.ControlDispatcher {}
-
-  /**
-   * @deprecated Use {@link com.google.android.exoplayer2.ui.PlayerControlView.VisibilityListener}.
-   */
-  @Deprecated
-  public interface VisibilityListener
-      extends com.google.android.exoplayer2.ui.PlayerControlView.VisibilityListener {}
-
-  @Deprecated
-  @SuppressWarnings("deprecation")
-  private static final class DefaultControlDispatcher
-      extends com.google.android.exoplayer2.DefaultControlDispatcher implements ControlDispatcher {}
-  /** @deprecated Use {@link com.google.android.exoplayer2.DefaultControlDispatcher}. */
-  @Deprecated
-  @SuppressWarnings("deprecation")
-  public static final ControlDispatcher DEFAULT_CONTROL_DISPATCHER = new DefaultControlDispatcher();
-
-  /** The default fast forward increment, in milliseconds. */
-  public static final int DEFAULT_FAST_FORWARD_MS = PlayerControlView.Companion
-      .getDEFAULT_FAST_FORWARD_MS();
-  /** The default rewind increment, in milliseconds. */
-  public static final int DEFAULT_REWIND_MS = PlayerControlView.Companion.getDEFAULT_REWIND_MS();
-  /** The default show timeout, in milliseconds. */
-  public static final int DEFAULT_SHOW_TIMEOUT_MS = PlayerControlView.Companion
-      .getDEFAULT_SHOW_TIMEOUT_MS();
-  /** The default repeat toggle modes. */
-  public static final @RepeatModeUtil.RepeatToggleModes int DEFAULT_REPEAT_TOGGLE_MODES =
-      PlayerControlView.Companion.getDEFAULT_REPEAT_TOGGLE_MODES();
-
-  /** The maximum number of windows that can be shown in a multi-window time bar. */
-  public static final int MAX_WINDOWS_FOR_MULTI_WINDOW_TIME_BAR =
-      PlayerControlView.Companion.getMAX_WINDOWS_FOR_MULTI_WINDOW_TIME_BAR();
-
-  public PlaybackControlView(Context context) {
-    super(context);
-  }
-
-  public PlaybackControlView(Context context, AttributeSet attrs) {
-    super(context, attrs);
-  }
-
-  public PlaybackControlView(Context context, AttributeSet attrs, int defStyleAttr) {
-    super(context, attrs, defStyleAttr);
-  }
-
-  public PlaybackControlView(
-      Context context, AttributeSet attrs, int defStyleAttr, AttributeSet playbackAttrs) {
-    super(context, attrs, defStyleAttr, playbackAttrs);
-  }
-
-}
diff --git a/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlaybackControlView.kt b/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlaybackControlView.kt
new file mode 100644
index 0000000000..2c9f0f11f3
--- /dev/null
+++ b/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlaybackControlView.kt
@@ -0,0 +1,64 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer2.ui
+
+import android.content.Context
+import android.util.AttributeSet
+import com.google.android.exoplayer2.util.RepeatModeUtil
+
+
+@Deprecated("Use {@link PlayerControlView}. ")
+class PlaybackControlView : PlayerControlView {
+
+    constructor(context: Context) : super(context)
+
+    constructor(context: Context, attrs: AttributeSet) : super(context, attrs)
+
+    constructor(context: Context, attrs: AttributeSet, defStyleAttr: Int) : super(context, attrs, defStyleAttr)
+
+    constructor(context: Context, attrs: AttributeSet, defStyleAttr: Int, playbackAttrs: AttributeSet)
+            : super(context, attrs, defStyleAttr, playbackAttrs)
+
+    @Deprecated("Use {@link com.google.android.exoplayer2.ControlDispatcher}. ")
+    interface ControlDispatcher : com.google.android.exoplayer2.ControlDispatcher
+
+
+    @Deprecated("Use {@link com.google.android.exoplayer2.ui.PlayerControlView.VisibilityListener}.")
+    interface VisibilityListener : com.google.android.exoplayer2.ui.PlayerControlView.VisibilityListener
+
+    @Deprecated("")
+    private class DefaultControlDispatcher : com.google.android.exoplayer2.DefaultControlDispatcher(), ControlDispatcher
+
+    companion object {
+
+        @Deprecated("Use {@link com.google.android.exoplayer2.DefaultControlDispatcher}. ", ReplaceWith("DefaultControlDispatcher","com.google.android.exoplayer2"))
+        val DEFAULT_CONTROL_DISPATCHER: ControlDispatcher = DefaultControlDispatcher()
+
+        /** The default fast forward increment, in milliseconds.  */
+        const val DEFAULT_FAST_FORWARD_MS = PlayerControlView.DEFAULT_FAST_FORWARD_MS
+        /** The default rewind increment, in milliseconds.  */
+        const val DEFAULT_REWIND_MS = PlayerControlView.DEFAULT_REWIND_MS
+        /** The default show timeout, in milliseconds.  */
+        const val DEFAULT_SHOW_TIMEOUT_MS = PlayerControlView.DEFAULT_SHOW_TIMEOUT_MS
+        /** The default repeat toggle modes.  */
+        @RepeatModeUtil.RepeatToggleModes
+        val DEFAULT_REPEAT_TOGGLE_MODES = PlayerControlView.DEFAULT_REPEAT_TOGGLE_MODES
+
+        /** The maximum number of windows that can be shown in a multi-window time bar.  */
+        val MAX_WINDOWS_FOR_MULTI_WINDOW_TIME_BAR = PlayerControlView.MAX_WINDOWS_FOR_MULTI_WINDOW_TIME_BAR
+    }
+
+}
diff --git a/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.kt b/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.kt
index 139f9bcf87..a0f68c5b86 100644
--- a/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.kt
+++ b/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.kt
@@ -21,6 +21,7 @@ import android.content.res.TypedArray
 import android.graphics.drawable.Drawable
 import android.os.Looper
 import android.os.SystemClock
+import android.support.v4.content.res.ResourcesCompat
 import android.util.AttributeSet
 import android.view.*
 import android.widget.FrameLayout
@@ -139,6 +140,14 @@ import java.util.*
  *
  *  * Type: [TimeBar]
  *
+ *  * **`exo_quality_change`** - Quality change.
+ *
+ *  * Type: [ImageView]
+ *
+ *  * **`exo_fullscreen_btn`** - The fullscreen button.
+ *
+ *  * Type: [ImageView]
+ *
  *
  *
  *
@@ -171,6 +180,7 @@ open class PlayerControlView(
     private val rewindButton: View?
     private val repeatToggleButton: ImageView?
     private val qualityChangeView: ImageView?
+    private val fullscreenView: ImageView?
     private val shuffleButton: View?
     private val durationView: TextView?
     private val positionView: TextView?
@@ -315,12 +325,14 @@ open class PlayerControlView(
         repeatToggleButton?.setOnClickListener(componentListener)
         qualityChangeView = findViewById(R.id.exo_quality_change)
         qualityChangeView?.setOnClickListener(componentListener)
+        fullscreenView = findViewById(R.id.exo_fullscreen_btn)
+        fullscreenView?.setOnClickListener(componentListener)
         shuffleButton = findViewById(R.id.exo_shuffle)
         shuffleButton?.setOnClickListener(componentListener)
         val resources = context.resources
-        repeatOffButtonDrawable = resources.getDrawable(R.drawable.exo_controls_repeat_off)
-        repeatOneButtonDrawable = resources.getDrawable(R.drawable.exo_controls_repeat_one)
-        repeatAllButtonDrawable = resources.getDrawable(R.drawable.exo_controls_repeat_all)
+        repeatOffButtonDrawable = ResourcesCompat.getDrawable(resources, R.drawable.exo_controls_repeat_off, null)!!
+        repeatOneButtonDrawable = ResourcesCompat.getDrawable(resources, R.drawable.exo_controls_repeat_one, null)!!
+        repeatAllButtonDrawable = ResourcesCompat.getDrawable(resources, R.drawable.exo_controls_repeat_all, null)!!
         repeatOffButtonContentDescription = resources.getString(R.string.exo_controls_repeat_off_description)
         repeatOneButtonContentDescription = resources.getString(R.string.exo_controls_repeat_one_description)
         repeatAllButtonContentDescription = resources.getString(R.string.exo_controls_repeat_all_description)
@@ -689,8 +701,8 @@ open class PlayerControlView(
                 val extraAdGroupCount = extraAdGroupTimesMs!!.size
                 val totalAdGroupCount = adGroupCount + extraAdGroupCount
                 if (totalAdGroupCount > adGroupTimesMs!!.size) {
-                    adGroupTimesMs = Arrays.copyOf(adGroupTimesMs!!, totalAdGroupCount)
-                    playedAdGroups = Arrays.copyOf(playedAdGroups!!, totalAdGroupCount)
+                    adGroupTimesMs = adGroupTimesMs!!.copyOf(totalAdGroupCount)
+                    playedAdGroups = playedAdGroups!!.copyOf(totalAdGroupCount)
                 }
                 System.arraycopy(extraAdGroupTimesMs!!, 0, adGroupTimesMs!!, adGroupCount, extraAdGroupCount)
                 System.arraycopy(extraPlayedAdGroups!!, 0, playedAdGroups!!, adGroupCount, extraAdGroupCount)
@@ -907,7 +919,7 @@ open class PlayerControlView(
         return true
     }
 
-    private inner class ComponentListener() : Player.EventListener, TimeBar.OnScrubListener, View.OnClickListener {
+    private inner class ComponentListener : Player.EventListener, TimeBar.OnScrubListener, View.OnClickListener {
 
         override fun onScrubStart(timeBar: TimeBar, position: Long) {
             scrubbing = true
@@ -961,19 +973,35 @@ open class PlayerControlView(
                     fastForwardButton === view -> fastForward()
                     rewindButton === view -> rewind()
                     playButton === view -> {
-                        if (this@PlayerControlView.player!!.getPlaybackState() == Player.STATE_IDLE) {
+                        if (this@PlayerControlView.player!!.playbackState == Player.STATE_IDLE) {
                             if (playbackPreparer != null) {
                                 playbackPreparer!!.preparePlayback()
                             }
-                        } else if (this@PlayerControlView.player!!.getPlaybackState() == Player.STATE_ENDED) {
-                            controlDispatcher!!.dispatchSeekTo(this@PlayerControlView.player, this@PlayerControlView.player!!.getCurrentWindowIndex(), C.TIME_UNSET)
+                        } else if (this@PlayerControlView.player!!.playbackState == Player.STATE_ENDED) {
+                            controlDispatcher!!.dispatchSeekTo(
+                                    this@PlayerControlView.player,
+                                    this@PlayerControlView.player!!.currentWindowIndex,
+                                    C.TIME_UNSET
+                            )
                         }
-                        controlDispatcher!!.dispatchSetPlayWhenReady(this@PlayerControlView.player, true)
+                        controlDispatcher!!.dispatchSetPlayWhenReady(
+                                this@PlayerControlView.player,
+                                true
+                        )
                     }
-                    pauseButton === view -> controlDispatcher!!.dispatchSetPlayWhenReady(this@PlayerControlView.player, false)
+                    pauseButton === view -> controlDispatcher!!.dispatchSetPlayWhenReady(
+                            this@PlayerControlView.player,
+                            false
+                    )
                     repeatToggleButton === view -> controlDispatcher!!.dispatchSetRepeatMode(
-                            this@PlayerControlView.player, RepeatModeUtil.getNextRepeatMode(this@PlayerControlView.player!!.getRepeatMode(), repeatToggleModes))
-                    shuffleButton === view -> controlDispatcher!!.dispatchSetShuffleModeEnabled(this@PlayerControlView.player, !this@PlayerControlView.player!!.getShuffleModeEnabled())
+                            this@PlayerControlView.player, RepeatModeUtil.getNextRepeatMode(
+                            this@PlayerControlView.player!!.repeatMode,
+                            repeatToggleModes
+                    ))
+                    shuffleButton === view -> controlDispatcher!!.dispatchSetShuffleModeEnabled(
+                            this@PlayerControlView.player,
+                            !this@PlayerControlView.player!!.shuffleModeEnabled
+                    )
                     qualityChangeView === view -> TODO("")
                 }
             }
@@ -987,19 +1015,19 @@ open class PlayerControlView(
         }
 
         /** The default fast forward increment, in milliseconds.  */
-        val DEFAULT_FAST_FORWARD_MS = 15000
+        const val DEFAULT_FAST_FORWARD_MS = 15000
         /** The default rewind increment, in milliseconds.  */
-        val DEFAULT_REWIND_MS = 5000
+        const val DEFAULT_REWIND_MS = 5000
         /** The default show timeout, in milliseconds.  */
-        val DEFAULT_SHOW_TIMEOUT_MS = 5000
+        const val DEFAULT_SHOW_TIMEOUT_MS = 5000
         /** The default repeat toggle modes.  */
         @RepeatModeUtil.RepeatToggleModes
         val DEFAULT_REPEAT_TOGGLE_MODES = RepeatModeUtil.REPEAT_TOGGLE_MODE_NONE
 
         /** The maximum number of windows that can be shown in a multi-window time bar.  */
-        val MAX_WINDOWS_FOR_MULTI_WINDOW_TIME_BAR = 100
+        const val MAX_WINDOWS_FOR_MULTI_WINDOW_TIME_BAR = 100
 
-        private val MAX_POSITION_FOR_SEEK_TO_PREVIOUS: Long = 3000
+        private const val MAX_POSITION_FOR_SEEK_TO_PREVIOUS: Long = 3000
 
         @RepeatModeUtil.RepeatToggleModes
         private fun getRepeatToggleModes(
diff --git a/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java b/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java
index 1c906bd015..9d66289e94 100644
--- a/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java
+++ b/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java
@@ -345,7 +345,7 @@ public PlayerView(Context context, AttributeSet attrs, int defStyleAttr) {
     boolean useController = true;
     int surfaceType = SURFACE_TYPE_SURFACE_VIEW;
     int resizeMode = AspectRatioFrameLayout.RESIZE_MODE_FIT;
-    int controllerShowTimeoutMs = PlayerControlView.Companion.getDEFAULT_SHOW_TIMEOUT_MS();
+    int controllerShowTimeoutMs = PlayerControlView.DEFAULT_SHOW_TIMEOUT_MS;
     boolean controllerHideOnTouch = true;
     boolean controllerAutoShow = true;
     boolean controllerHideDuringAds = true;
