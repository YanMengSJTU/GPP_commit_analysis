diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavExtractor.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavExtractor.java
index 68d252e318..d3114f9b69 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavExtractor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavExtractor.java
@@ -87,6 +87,8 @@ public int read(ExtractorInput input, PositionHolder seekPosition)
     if (!wavHeader.hasDataBounds()) {
       WavHeaderReader.skipToData(input, wavHeader);
       extractorOutput.seekMap(wavHeader);
+    } else if (input.getPosition() == 0) {
+      input.skipFully(wavHeader.getDataStartPosition());
     }
 
     long dataLimit = wavHeader.getDataLimit();
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeader.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeader.java
index c60117be60..c7858dcd96 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeader.java
@@ -37,9 +37,9 @@
   @C.PcmEncoding
   private final int encoding;
 
-  /** Offset to the start of sample data. */
-  private long dataStartPosition;
-  /** Total size in bytes of the sample data. */
+  /** Position of the start of the sample data, in bytes. */
+  private int dataStartPosition;
+  /** Total size of the sample data, in bytes. */
   private long dataSize;
 
   public WavHeader(int numChannels, int sampleRateHz, int averageBytesPerSecond, int blockAlignment,
@@ -50,6 +50,7 @@ public WavHeader(int numChannels, int sampleRateHz, int averageBytesPerSecond, i
     this.blockAlignment = blockAlignment;
     this.bitsPerSample = bitsPerSample;
     this.encoding = encoding;
+    dataStartPosition = C.POSITION_UNSET;
   }
 
   // Data bounds.
@@ -57,22 +58,33 @@ public WavHeader(int numChannels, int sampleRateHz, int averageBytesPerSecond, i
   /**
    * Sets the data start position and size in bytes of sample data in this WAV.
    *
-   * @param dataStartPosition The data start position in bytes.
-   * @param dataSize The data size in bytes.
+   * @param dataStartPosition The position of the start of the sample data, in bytes.
+   * @param dataSize The total size of the sample data, in bytes.
    */
-  public void setDataBounds(long dataStartPosition, long dataSize) {
+  public void setDataBounds(int dataStartPosition, long dataSize) {
     this.dataStartPosition = dataStartPosition;
     this.dataSize = dataSize;
   }
 
-  /** Returns the data limit, or {@link C#POSITION_UNSET} if the data bounds have not been set. */
+  /**
+   * Returns the position of the start of the sample data, in bytes, or {@link C#POSITION_UNSET} if
+   * the data bounds have not been set.
+   */
+  public int getDataStartPosition() {
+    return dataStartPosition;
+  }
+
+  /**
+   * Returns the limit of the sample data, in bytes, or {@link C#POSITION_UNSET} if the data bounds
+   * have not been set.
+   */
   public long getDataLimit() {
     return hasDataBounds() ? (dataStartPosition + dataSize) : C.POSITION_UNSET;
   }
 
   /** Returns whether the data start position and size have been set. */
   public boolean hasDataBounds() {
-    return dataStartPosition != 0 && dataSize != 0;
+    return dataStartPosition != C.POSITION_UNSET;
   }
 
   // SeekMap implementation.
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeaderReader.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeaderReader.java
index d76d3f37ea..839a9e3d5c 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeaderReader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeaderReader.java
@@ -139,7 +139,7 @@ public static void skipToData(ExtractorInput input, WavHeader wavHeader)
     // Skip past the "data" header.
     input.skipFully(ChunkHeader.SIZE_IN_BYTES);
 
-    wavHeader.setDataBounds(input.getPosition(), chunkHeader.size);
+    wavHeader.setDataBounds((int) input.getPosition(), chunkHeader.size);
   }
 
   private WavHeaderReader() {
