diff --git a/library/src/main/java/com/google/android/exoplayer2/extractor/ts/DvbSubtitlesReader.java b/library/src/main/java/com/google/android/exoplayer2/extractor/ts/DvbSubtitlesReader.java
new file mode 100644
index 0000000000..7e207c687a
--- /dev/null
+++ b/library/src/main/java/com/google/android/exoplayer2/extractor/ts/DvbSubtitlesReader.java
@@ -0,0 +1,55 @@
+package com.google.android.exoplayer2.extractor.ts;
+
+import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.Format;
+import com.google.android.exoplayer2.extractor.TrackOutput;
+import com.google.android.exoplayer2.util.MimeTypes;
+import com.google.android.exoplayer2.util.ParsableByteArray;
+import android.util.Log;
+
+
+public class DvbSubtitlesReader extends ElementaryStreamReader {
+
+    private static final String TAG= "DVBSubsReader";
+
+    private long sampleTimeUs;
+    private int totalBytesWritten;
+    private boolean writingSample;
+
+
+    public DvbSubtitlesReader(TrackOutput output) {
+        super(output);
+        output.format(Format.createSampleFormat(null, MimeTypes.APPLICATION_DVBSUBS, null, Format.NO_VALUE,
+                null));
+    }
+
+    @Override
+    public void seek() {
+        writingSample = false;
+    }
+
+    @Override
+    public void packetStarted(long pesTimeUs, boolean dataAlignmentIndicator) {
+        if (!dataAlignmentIndicator) {
+            return;
+        }
+        writingSample = true;
+        sampleTimeUs = pesTimeUs;
+        totalBytesWritten = 0;
+    }
+
+    @Override
+    public void packetFinished() {
+        output.sampleMetadata(sampleTimeUs, C.BUFFER_FLAG_KEY_FRAME, totalBytesWritten, 0, null);
+        writingSample = false;
+    }
+
+    @Override
+    public void consume(ParsableByteArray data) {
+        if (writingSample) {
+            totalBytesWritten += data.bytesLeft();
+            output.sampleData(data, data.bytesLeft());
+            //Log.d(TAG, "bytesWritten=" + totalBytesWritten);
+        }
+    }
+}
diff --git a/library/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java b/library/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
index 5c9e8cf673..d62cbc6242 100644
--- a/library/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
@@ -73,6 +73,7 @@
   private static final int TS_STREAM_TYPE_H264 = 0x1B;
   private static final int TS_STREAM_TYPE_H265 = 0x24;
   private static final int TS_STREAM_TYPE_ID3 = 0x15;
+  private static final int TS_STREAM_TYPE_DVBSUBS   = 0x59;
   private static final int BASE_EMBEDDED_TRACK_ID = 0x2000; // 0xFF + 1
 
   private static final long AC3_FORMAT_IDENTIFIER = Util.getIntegerCodeForString("AC-3");
@@ -481,6 +482,9 @@ public void consume(ParsableByteArray data, boolean payloadUnitStartIndicator,
               pesPayloadReader = new Id3Reader(output.track(nextEmbeddedTrackId++));
             }
             break;
+          case TS_STREAM_TYPE_DVBSUBS:
+            pesPayloadReader = new DvbSubtitlesReader(output.track(trackId));
+            break;
           default:
             pesPayloadReader = null;
             break;
@@ -532,6 +536,8 @@ private EsInfo readEsInfo(ParsableByteArray data, int length) {
         } else if (descriptorTag == TS_PMT_DESC_ISO639_LANG) {
           language = new String(data.data, data.getPosition(), 3).trim();
           audioType = data.data[data.getPosition() + 3];
+        } else if (descriptorTag == 0x59) {
+          streamType = TS_STREAM_TYPE_DVBSUBS;
         }
         // Skip unused bytes of current descriptor.
         data.skipBytes(positionOfNextDescriptor - data.getPosition());
