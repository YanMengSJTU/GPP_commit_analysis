diff --git a/build.gradle b/build.gradle
index b02d3db19b..5f011beb55 100644
--- a/build.gradle
+++ b/build.gradle
@@ -30,8 +30,8 @@ allprojects {
         mavenCentral()
     }
     project.ext {
-        compileSdkVersion=24
-        targetSdkVersion=24
+        compileSdkVersion=23
+        targetSdkVersion=23
         buildToolsVersion='23.0.3'
     }
 }
diff --git a/demo/build.gradle b/demo/build.gradle
index 6aaedf05c5..3ead8eb0f0 100644
--- a/demo/build.gradle
+++ b/demo/build.gradle
@@ -18,7 +18,7 @@ android {
     buildToolsVersion project.ext.buildToolsVersion
 
     defaultConfig {
-        minSdkVersion 16
+        minSdkVersion 21
         targetSdkVersion project.ext.targetSdkVersion
     }
 
@@ -44,6 +44,8 @@ android {
 }
 
 dependencies {
+    compile 'com.android.support:appcompat-v7:24.2.1'
+    compile 'com.android.support:design:24.2.1'
     compile project(':library')
     demo_extCompile project(path: ':extension-ffmpeg')
     demo_extCompile project(path: ':extension-flac')
diff --git a/demo/src/main/AndroidManifest.xml b/demo/src/main/AndroidManifest.xml
index 6cf98d2aca..0d799d8902 100644
--- a/demo/src/main/AndroidManifest.xml
+++ b/demo/src/main/AndroidManifest.xml
@@ -21,42 +21,34 @@
 
   <uses-permission android:name="android.permission.INTERNET"/>
   <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
+  <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
 
-  <uses-sdk android:minSdkVersion="16" android:targetSdkVersion="24"/>
+  <!--<uses-sdk android:minSdkVersion="16" android:targetSdkVersion="24"/>-->
 
   <application
       android:label="@string/application_name"
-      android:icon="@drawable/ic_launcher"
+      android:icon="@drawable/ic_temp_icon_white"
       android:largeHeap="true"
-      android:allowBackup="false"
-      android:name="com.google.android.exoplayer2.demo.DemoApplication">
+      android:allowBackup="false">
 
-    <activity android:name="com.google.android.exoplayer2.demo.SampleChooserActivity"
-        android:configChanges="keyboardHidden"
-        android:label="@string/application_name">
+    <!--android:label="@string/application_name"-->
+    <activity android:name="br.rnp.futebol.vocoliseu.visual.activity.DashboardActivity"
+        android:theme="@style/VOCoLisEU">
       <intent-filter>
         <action android:name="android.intent.action.MAIN"/>
         <category android:name="android.intent.category.LAUNCHER"/>
       </intent-filter>
-      <intent-filter>
-        <action android:name="android.intent.action.VIEW"/>
-        <category android:name="android.intent.category.DEFAULT"/>
-        <category android:name="android.intent.category.BROWSABLE"/>
-        <data android:scheme="http"/>
-        <data android:scheme="https"/>
-        <data android:scheme="content"/>
-        <data android:scheme="asset"/>
-        <data android:scheme="file"/>
-        <data android:host="*"/>
-        <data android:pathPattern=".*\\.exolist\\.json"/>
-      </intent-filter>
+    </activity>
+
+    <activity android:name="br.rnp.futebol.vocoliseu.visual.activity.ExperimentConfigurationControllerActivity"
+        android:theme="@style/VOCoLisEU">
     </activity>
 
     <activity android:name="com.google.android.exoplayer2.demo.PlayerActivity"
         android:configChanges="keyboard|keyboardHidden|orientation|screenSize|screenLayout|smallestScreenSize|uiMode"
         android:launchMode="singleTop"
         android:label="@string/application_name"
-        android:theme="@style/PlayerTheme">
+        android:theme="@style/VOCoLisEU">
       <intent-filter>
         <action android:name="com.google.android.exoplayer.demo.action.VIEW"/>
         <category android:name="android.intent.category.DEFAULT"/>
diff --git a/demo/src/main/assets/media.exolist.json b/demo/src/main/assets/media.exolist.json
index b067098baa..9fc18ca2c3 100644
--- a/demo/src/main/assets/media.exolist.json
+++ b/demo/src/main/assets/media.exolist.json
@@ -1,437 +1,11 @@
 [
   {
-    "name": "YouTube DASH",
+    "name": "Teste",
     "samples": [
       {
-        "name": "Google Glass (MP4,H264)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=51AF5F39AB0CEC3E5497CD9C900EBFEAECCCB5C7.8506521BFC350652163895D4C26DEE124209AA9E&key=ik0",
-        "extension": "mpd"
-      },
-      {
-        "name": "Google Play (MP4,H264)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/3aa39fa2cc27967f/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=A2716F75795F5D2AF0E88962FFCD10DB79384F29.84308FF04844498CE6FBCE4731507882B8307798&key=ik0",
-        "extension": "mpd"
-      },
-      {
-        "name": "Google Glass (WebM,VP9)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,webm2_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=249B04F79E984D7F86B4D8DB48AE6FAF41C17AB3.7B9F0EC0505E1566E59B8E488E9419F253DDF413&key=ik0",
-        "extension": "mpd"
-      },
-      {
-        "name": "Google Play (WebM,VP9)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/3aa39fa2cc27967f/source/youtube?as=fmp4_audio_clear,webm2_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=B1C2A74783AC1CC4865EB312D7DD2D48230CC9FD.BD153B9882175F1F94BFE5141A5482313EA38E8D&key=ik0",
-        "extension": "mpd"
-      }
-    ]
-  },
-  {
-    "name": "Widevine DASH Policy Tests (GTS)",
-    "samples": [
-      {
-        "name": "WV: HDCP not specified",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=d286538032258a1c&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP not required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=48fcc369939ac96c&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=e06c39f1151da3df&provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure video path required (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=0894c7c8719b28a0&provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure video path required (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=0894c7c8719b28a0&provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure video path required (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=0894c7c8719b28a0&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP + secure video path required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=efd045b1eb61888a&provider=widevine_test"
-      },
-      {
-        "name": "WV: 30s license duration (fails at ~30s)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=f9a34cab7b05881a&provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "Widevine HDCP Capabilities Tests",
-    "samples": [
-      {
-        "name": "WV: HDCP: None (not required)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_None&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: 1.0 required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V1&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: 2.0 required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V2&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: 2.1 required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V2_1&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: 2.2 required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V2_2&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: No digital output",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_NO_DIGTAL_OUTPUT&provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "Widevine DASH: MP4,H264",
-    "samples": [
-      {
-        "name": "WV: Clear SD & HD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears.mpd"
-      },
-      {
-        "name": "WV: Clear SD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears_sd.mpd"
-      },
-      {
-        "name": "WV: Clear HD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears_hd.mpd"
-      },
-      {
-        "name": "WV: Clear UHD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears_uhd.mpd"
-      },
-      {
-        "name": "WV: Secure SD & HD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure HD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure UHD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "Widevine DASH: WebM,VP9",
-    "samples": [
-      {
-        "name": "WV: Clear SD & HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears.mpd"
-      },
-      {
-        "name": "WV: Clear SD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears_sd.mpd"
-      },
-      {
-        "name": "WV: Clear HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears_hd.mpd"
-      },
-      {
-        "name": "WV: Clear UHD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears_uhd.mpd"
-      },
-      {
-        "name": "WV: Secure SD & HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure UHD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure Subsample (WebM, VP9 with altref)",
-        "uri": "https://storage.googleapis.com/widevine_test/vp9/sintel_1080p_vp9_altref_subsample/sintel_1080p_vp9_altref_subsample.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://widevine-proxy.appspot.com/proxy"
-      },
-      {
-        "name": "WV: Secure Fullsample (WebM, VP9 with altref)",
-        "uri": "https://storage.googleapis.com/widevine_test/vp9/sintel_1080p_vp9_altref_fullsample/sintel_1080p_vp9_altref_fullsample.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://widevine-proxy.appspot.com/proxy"
-      },
-      {
-        "name": "WV: Secure Subsample (WebM, VP9 without altref)",
-        "uri": "https://storage.googleapis.com/widevine_test/vp9/sintel_1080p_vp9_noaltref_subsample/sintel_1080p_vp9_noaltref_subsample.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://widevine-proxy.appspot.com/proxy"
-      },
-      {
-        "name": "WV: Secure Fullsample (WebM, VP9 without altref)",
-        "uri": "https://storage.googleapis.com/widevine_test/vp9/sintel_1080p_vp9_noaltref_fullsample/sintel_1080p_vp9_noaltref_fullsample.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://widevine-proxy.appspot.com/proxy"
-      }
-    ]
-  },
-  {
-    "name": "Widevine DASH: MP4,H265",
-    "samples": [
-      {
-        "name": "WV: Clear SD & HD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears.mpd"
-      },
-      {
-        "name": "WV: Clear SD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears_sd.mpd"
-      },
-      {
-        "name": "WV: Clear HD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears_hd.mpd"
-      },
-      {
-        "name": "WV: Clear UHD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears_uhd.mpd"
-      },
-      {
-        "name": "WV: Secure SD & HD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure HD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure UHD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "SmoothStreaming",
-    "samples": [
-      {
-        "name": "Super speed",
-        "uri": "http://playready.directtaps.net/smoothstreaming/SSWSS720H264/SuperSpeedway_720.ism"
-      },
-      {
-        "name": "Super speed (PlayReady)",
-        "uri": "http://playready.directtaps.net/smoothstreaming/SSWSS720H264PR/SuperSpeedway_720.ism",
-        "drm_scheme": "playready"
-      }
-    ]
-  },
-  {
-    "name": "HLS",
-    "samples": [
-      {
-        "name": "Apple 4x3 basic stream",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/bipbop_4x3_variant.m3u8"
-      },
-      {
-        "name": "Apple 16x9 basic stream",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_16x9/bipbop_16x9_variant.m3u8"
-      },
-      {
-        "name": "Apple master playlist advanced",
-        "uri": "https://tungsten.aaplimg.com/VOD/bipbop_adv_example_v2/master.m3u8"
-      },
-      {
-        "name": "Apple TS media playlist",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/gear1/prog_index.m3u8"
-      },
-      {
-        "name": "Apple AAC media playlist",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/gear0/prog_index.m3u8"
-      },
-      {
-        "name": "Apple ID3 metadata",
-        "uri": "http://devimages.apple.com/samplecode/adDemo/ad.m3u8"
-      }
-    ]
-  },
-  {
-    "name": "Misc",
-    "samples": [
-      {
-        "name": "Dizzy",
-        "uri": "http://html5demos.com/assets/dizzy.mp4"
-      },
-      {
-        "name": "Apple AAC 10s",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/gear0/fileSequence0.aac"
-      },
-      {
-        "name": "Apple TS 10s",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/gear1/fileSequence0.ts"
-      },
-      {
-        "name": "Android screens (Matroska)",
-        "uri": "http://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv"
-      },
-      {
-        "name": "Big Buck Bunny (MP4 Video)",
-        "uri": "http://redirector.c.youtube.com/videoplayback?id=604ed5ce52eda7ee&itag=22&source=youtube&sparams=ip,ipbits,expire,source,id&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=513F28C7FDCBEC60A66C86C9A393556C99DC47FB.04C88036EEE12565A1ED864A875A58F15D8B5300&key=ik0"
-      },
-      {
-        "name": "Screens 360P (WebM,VP9,No Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/video-vp9-360.webm"
-      },
-      {
-        "name": "Screens 480p (FMP4,H264,No Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/video-avc-baseline-480.mp4"
-      },
-      {
-        "name": "Screens 1080p (FMP4,H264, No Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/video-137.mp4"
-      },
-      {
-        "name": "Screens (FMP4,AAC Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/audio-141.mp4"
-      },
-      {
-        "name": "Google Play (MP3 Audio)",
-        "uri": "http://storage.googleapis.com/exoplayer-test-media-0/play.mp3"
-      },
-      {
-        "name": "Google Play (Ogg/Vorbis Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/ogg/play.ogg"
-      },
-      {
-        "name": "Google Glass (WebM Video with Vorbis Audio)",
-        "uri": "http://demos.webmproject.org/exoplayer/glass_vp9_vorbis.webm"
-      },
-      {
-        "name": "Google Glass (VP9 in MP4/ISO-BMFF)",
-        "uri": "http://demos.webmproject.org/exoplayer/glass.mp4"
-      },
-      {
-        "name": "Google Glass DASH - VP9 and Opus",
-        "uri": "http://demos.webmproject.org/dash/201410/vp9_glass/manifest_vp9_opus.mpd"
-      },
-      {
-        "name": "Big Buck Bunny (FLV Video)",
-        "uri": "http://vod.leasewebcdn.com/bbb.flv?ri=1024&rs=150&start=0"
-      }
-    ]
-  },
-  {
-    "name": "Playlists",
-    "samples": [
-      {
-        "name": "Cats -> Dogs",
-        "playlist": [
-          {
-            "uri": "http://html5demos.com/assets/dizzy.mp4"
-          },
-          {
-            "uri": "http://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv"
-          }
-        ]
-      },
-      {
-        "name": "Audio -> Video",
-        "playlist": [
-          {
-            "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/audio-141.mp4"
-          },
-          {
-            "uri": "http://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv"
-          }
-        ]
-      },
-      {
-        "name": "Clear -> Enc -> Clear -> Enc -> Enc",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test",
-        "playlist": [
-          {
-            "uri": "http://html5demos.com/assets/dizzy.mp4"
-          },
-          {
-            "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd"
-          },
-          {
-            "uri": "http://html5demos.com/assets/dizzy.mp4"
-          },
-          {
-            "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd"
-          },
-          {
-            "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd"
-          }
-        ]
+        "name": "Teste Joao",
+        "uri": "http://143.54.12.21:8081/manifest.mpd"
       }
     ]
   }
-]
+]
\ No newline at end of file
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/dao/ExperimentDAO.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/dao/ExperimentDAO.java
new file mode 100644
index 0000000000..44e98d818a
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/dao/ExperimentDAO.java
@@ -0,0 +1,39 @@
+package br.rnp.futebol.vocoliseu.dao;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+
+/**
+ * Created by camargo on 10/11/16.
+ */
+public class ExperimentDAO extends SQLiteOpenHelper {
+
+    private static final String TABLE_NAME = "ExperimentDAO";
+    private static final int VERSION = 1;
+    private static final String[] COLUMNS = {"filename", "name"};
+
+
+    public ExperimentDAO(Context ctx) {
+        super(ctx, TABLE_NAME, null, VERSION);
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase db) {
+        int cont = 0;
+        StringBuilder sb = new StringBuilder();
+        sb.append("CREATE TABLE ".concat(TABLE_NAME).concat(" ("));
+        sb.append(COLUMNS[cont++].concat(" TEXT PRIMARY KEY, "));
+        sb.append(COLUMNS[cont].concat(" TEXT);"));
+        db.execSQL(sb.toString());
+    }
+
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        String sb = "DROP TABLE IF EXISTS ".concat(TABLE_NAME.concat(";"));
+        db.execSQL(sb);
+        onCreate(db);
+    }
+
+
+}
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/dao/ScriptDAO.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/dao/ScriptDAO.java
new file mode 100644
index 0000000000..b2e5392745
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/dao/ScriptDAO.java
@@ -0,0 +1,115 @@
+package br.rnp.futebol.vocoliseu.dao;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+
+import br.rnp.futebol.vocoliseu.pojo.Script;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * [UFRGS] VO-CoLisEU
+ * Created by camargo on 25/10/2016
+ * Data Access Object (DAO) class to manage the experiments saved in
+ *  the device internal memory
+ */
+
+public class ScriptDAO extends SQLiteOpenHelper {
+
+    private static final String TABLE_NAME = "ScriptDAO";
+    private static final int VERSION = 1;
+    private static final String[] COLUMNS = {"name", "filename", "address"};
+
+
+    public ScriptDAO(Context ctx) {
+        super(ctx, TABLE_NAME, null, VERSION);
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase db) {
+        int cont = 0;
+        StringBuilder sb = new StringBuilder();
+        sb.append("CREATE TABLE ".concat(TABLE_NAME).concat(" ("));
+        sb.append(COLUMNS[cont++].concat(" TEXT PRIMARY KEY, "));
+        sb.append(COLUMNS[cont++].concat(" TEXT, "));
+        sb.append(COLUMNS[cont].concat(" TEXT);"));
+        db.execSQL(sb.toString());
+    }
+
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        String sb = "DROP TABLE IF EXISTS ".concat(TABLE_NAME.concat(";"));
+        db.execSQL(sb);
+        onCreate(db);
+    }
+
+    /**
+     * Check if an experiment with a passed filename is already saved in the device internal DB
+     * @return true if exists
+     */
+    private boolean checkFile(String filename) {
+        Cursor rawQuery = null;
+        try {
+            rawQuery = getReadableDatabase().rawQuery(
+                    "SELECT 1 from ".concat(TABLE_NAME.concat(" WHERE ".concat(COLUMNS[1]).concat(" = ?"))),
+                    new String[]{filename});
+            int rc = rawQuery.getCount();
+            return rc > 0;
+        } catch (IllegalArgumentException ie) {
+            return false;
+        } finally {
+            if (rawQuery != null)
+                rawQuery.close();
+        }
+    }
+
+    /**
+     * Insert a new experiment in the DB
+     * @param exp experiment to be inserted
+     */
+    public void insert(Script exp) {
+        int cont = 0;
+        if (!checkFile(exp.getFileName())) {
+            ContentValues values = new ContentValues();
+            values.put(COLUMNS[cont++], exp.getName());
+            values.put(COLUMNS[cont++], exp.getFileName());
+            values.put(COLUMNS[cont], exp.getAddress());
+            getWritableDatabase().insert(TABLE_NAME, null, values);
+        }
+    }
+
+    /**
+     * Delete an experiment in the DB
+     * @param exp experiment to be deleted
+     */
+    public void delete(Script exp) {
+        if(checkFile(exp.getFileName())) {
+            getWritableDatabase().delete(TABLE_NAME, COLUMNS[1].concat(" = ?"), new String[]{exp.getFileName()});
+        }
+    }
+
+    /**
+     * Get all the saved experiments
+     * @return the saved experiments
+     */
+    public List<Script> getExperiments() {
+        List<Script> exps = new ArrayList<>();
+        Cursor c = getWritableDatabase().query(TABLE_NAME, COLUMNS, null, null, null, null, null);
+        while (c.moveToNext()) {
+            int cont = 0;
+            Script exp = new Script();
+            exp.setName(c.getString(cont++));
+            exp.setFileName(c.getString(cont++));
+            exp.setAddress(c.getString(cont));
+            exps.add(exp);
+        }
+        c.close();
+        return exps;
+    }
+
+
+}
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/Experiment.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/Experiment.java
new file mode 100644
index 0000000000..53b483387b
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/Experiment.java
@@ -0,0 +1,41 @@
+package br.rnp.futebol.vocoliseu.pojo;
+
+import java.util.ArrayList;
+
+/**
+ * Created by camargo on 10/11/16.
+ */
+public class Experiment {
+
+    private String name;
+    private String filename;
+    private ArrayList<Script> scripts;
+    private final String ATTRIBUTES[] = {"name", "filename", "scripts"};
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getFilename() {
+        return filename;
+    }
+
+    public void setFilename(String filename) {
+        this.filename = filename;
+    }
+
+    public ArrayList<Script> getScripts() {
+        return scripts;
+    }
+
+    public void setScripts(ArrayList<Script> scripts) {
+        this.scripts = scripts;
+    }
+
+
+
+}
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/Metric.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/Metric.java
new file mode 100644
index 0000000000..7d9b4a0e6b
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/Metric.java
@@ -0,0 +1,100 @@
+package br.rnp.futebol.vocoliseu.pojo;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * Created by camargo on 18/10/16.
+ */
+public class Metric {
+
+    public static final int QOS = 1, S_QOE = 2, O_QOE = 3;
+    private String name;
+    private int id, type;
+    private boolean used;
+    private final String ATTRIBUTES[] = {"id", "name", "type", "used"};
+
+    public Metric() {
+    }
+
+    public Metric(int id, String name, int type) {
+        this.name = name;
+        this.id = id;
+        this.type = type;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public int getType() {
+        return type;
+    }
+
+    public void setType(int type) {
+        this.type = type;
+    }
+
+    public boolean isUsed() {
+        return used;
+    }
+
+    public void setUsed(boolean used) {
+        this.used = used;
+    }
+
+    public JSONObject toJson() {
+        int cont = 0;
+        JSONObject json = new JSONObject();
+        try {
+            json.put(ATTRIBUTES[cont++], this.id);
+            json.put(ATTRIBUTES[cont++], this.name);
+            json.put(ATTRIBUTES[cont++], this.type);
+            json.put(ATTRIBUTES[cont], this.used);
+        } catch (JSONException e) {
+            json = null;
+        }
+        return json;
+    }
+
+    public Metric fromJson(JSONObject json) {
+        int cont = 0;
+        try {
+            this.id = json.getInt(ATTRIBUTES[cont++]);
+            this.name = json.getString(ATTRIBUTES[cont++]);
+            this.type = json.getInt(ATTRIBUTES[cont++]);
+            this.used = json.getBoolean(ATTRIBUTES[cont]);
+        } catch (JSONException e) {
+            return null;
+        }
+        return this;
+    }
+
+    public String getTypeName() {
+        switch (this.type) {
+            case 1:
+                return "QoS";
+            case 2:
+                return "QoE";
+            case 3:
+                return "QoE";
+            default:
+                break;
+        }
+        return null;
+    }
+
+
+}
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/Script.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/Script.java
new file mode 100644
index 0000000000..47cf93ac6c
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/Script.java
@@ -0,0 +1,122 @@
+package br.rnp.futebol.vocoliseu.pojo;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * [UFRGS] VO-CoLisEU
+ * Created by camargo on 19/10/2016
+ * Script bean
+ */
+public class Script {
+
+    private String name;
+    private String fileName;
+    private String address;
+    private boolean askInfo;
+    private boolean useDash;
+    private String description;
+    private List<Metric> metrics;
+    private final String ATTRIBUTES[] = {"name", "filename", "address", "askInfo", "useDash", "description", "metrics"};
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getFileName() {
+        return fileName;
+    }
+
+    public void setFileName(String fileName) {
+        this.fileName = fileName;
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address;
+    }
+
+    public boolean isAskInfo() {
+        return askInfo;
+    }
+
+    public void setAskInfo(boolean askInfo) {
+        this.askInfo = askInfo;
+    }
+
+    public boolean isUseDash() {
+        return useDash;
+    }
+
+    public void setUseDash(boolean useDash) {
+        this.useDash = useDash;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public List<Metric> getMetrics() {
+        return metrics;
+    }
+
+    public void setMetrics(List<Metric> metrics) {
+        this.metrics = metrics;
+    }
+
+    public JSONObject toJson() {
+        JSONObject json = new JSONObject();
+        JSONArray array = new JSONArray();
+        int cont = 0;
+        try {
+            json.put(ATTRIBUTES[cont++], this.getName());
+            json.put(ATTRIBUTES[cont++], this.getFileName());
+            json.put(ATTRIBUTES[cont++], this.getAddress());
+            json.put(ATTRIBUTES[cont++], this.isAskInfo());
+            json.put(ATTRIBUTES[cont++], this.isUseDash());
+            json.put(ATTRIBUTES[cont++], this.getDescription());
+            for (Metric m : this.getMetrics())
+                array.put(m.toJson());
+            json.put(ATTRIBUTES[cont], array);
+        } catch (JSONException e) {
+            return null;
+        }
+        return json;
+    }
+
+    public Script fromJson(JSONObject json) {
+        int cont = 0;
+        try {
+            this.name = json.getString(ATTRIBUTES[cont++]);
+            this.fileName = json.getString(ATTRIBUTES[cont++]);
+            this.address = json.getString(ATTRIBUTES[cont++]);
+            this.askInfo = json.getBoolean(ATTRIBUTES[cont++]);
+            this.useDash = json.getBoolean(ATTRIBUTES[cont++]);
+            this.description = json.getString(ATTRIBUTES[cont++]);
+            JSONArray array = json.getJSONArray(ATTRIBUTES[cont]);
+            this.metrics = new ArrayList<>();
+            for (int i = 0; i < array.length(); i++) {
+                this.metrics.add(new Metric().fromJson((JSONObject) array.get(i)));
+            }
+        } catch (JSONException e) {
+            return null;
+        }
+        return this;
+    }
+
+}
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/util/ReadyMetrics.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/util/ReadyMetrics.java
new file mode 100644
index 0000000000..1f523813a6
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/util/ReadyMetrics.java
@@ -0,0 +1,32 @@
+package br.rnp.futebol.vocoliseu.util;
+
+import java.util.ArrayList;
+
+import br.rnp.futebol.vocoliseu.pojo.Metric;
+
+/**
+ * Created by camargo on 18/10/16.
+ */
+public class ReadyMetrics {
+
+    public static ArrayList<Metric> QOS_METRICS, S_QOE_METRICS, O_QOE_METRICS;
+
+    public static void init() {
+        int id = 0;
+
+        QOS_METRICS = new ArrayList<>();
+        S_QOE_METRICS = new ArrayList<>();
+        O_QOE_METRICS = new ArrayList<>();
+
+        QOS_METRICS.add(new Metric(++id, "RTT", Metric.QOS));
+        QOS_METRICS.add(new Metric(++id, "Packet Loss", Metric.QOS));
+
+        S_QOE_METRICS.add(new Metric(++id, "ACR scale", Metric.S_QOE));
+        S_QOE_METRICS.add(new Metric(++id, "DCR scale", Metric.S_QOE));
+
+        O_QOE_METRICS.add(new Metric(++id, "Number of Freezes", Metric.O_QOE));
+        O_QOE_METRICS.add(new Metric(++id, "Bitrate switchs", Metric.O_QOE));
+    }
+
+
+}
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/util/adapter/ExperimentAdapter.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/util/adapter/ExperimentAdapter.java
new file mode 100644
index 0000000000..b4e1c20445
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/util/adapter/ExperimentAdapter.java
@@ -0,0 +1,66 @@
+package br.rnp.futebol.vocoliseu.util.adapter;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.TextView;
+
+import br.rnp.futebol.vocoliseu.pojo.Script;
+
+import com.google.android.exoplayer2.demo.R;
+
+import java.util.List;
+
+/**
+ * Created by camargo on 18/10/16.
+ */
+public class ExperimentAdapter extends BaseAdapter {
+
+    private Context ctx;
+    private TextView tvName, tvFilename, tvAdress;
+    private Script exp;
+    private List<Script> exps;
+
+
+    public ExperimentAdapter() {
+    }
+
+    public ExperimentAdapter(Context context, List<Script> exps) {
+        super();
+        this.ctx = context;
+        this.exps = exps;
+    }
+
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        View view = LayoutInflater.from(ctx).inflate(R.layout.exp_item, parent, false);
+        exp = exps.get(position);
+
+        tvName = (TextView) view.findViewById(R.id.tv_exp_item_name);
+        tvFilename = (TextView) view.findViewById(R.id.tv_exp_item_filename);
+        tvAdress = (TextView) view.findViewById(R.id.tv_exp_item_address);
+
+        tvName.setText(exp.getName());
+        tvFilename.setText(exp.getFileName().concat(".txt"));
+        tvAdress.setText(exp.getAddress());
+
+        return view;
+    }
+
+    @Override
+    public long getItemId(int position) {
+        return position;
+    }
+
+    @Override
+    public Object getItem(int position) {
+        return exps.get(position);
+    }
+
+    @Override
+    public int getCount() {
+        return exps.size();
+    }
+}
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/util/adapter/FragmentAdapter.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/util/adapter/FragmentAdapter.java
new file mode 100644
index 0000000000..e8ae525a46
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/util/adapter/FragmentAdapter.java
@@ -0,0 +1,36 @@
+package br.rnp.futebol.vocoliseu.util.adapter;
+
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentStatePagerAdapter;
+
+import br.rnp.futebol.vocoliseu.visual.fragment.ExperimentConfigurationGeneralFragment;
+import br.rnp.futebol.vocoliseu.visual.fragment.ExperimentConfigurationMetricsFragment;
+
+public class FragmentAdapter extends FragmentStatePagerAdapter {
+
+
+    public FragmentAdapter(FragmentManager fm) {
+        super(fm);
+    }
+
+    @Override
+    public Fragment getItem(int pos) {
+        switch (pos) {
+            case 0:
+                return new ExperimentConfigurationGeneralFragment();
+            case 1:
+                return new ExperimentConfigurationMetricsFragment();
+//            case 2:
+//                return new ExperimentConfiguration3();
+            default:
+                break;
+        }
+        return null;
+    }
+
+    @Override
+    public int getCount() {
+        return 2;
+    }
+}
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/util/adapter/MetricAdapter.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/util/adapter/MetricAdapter.java
new file mode 100644
index 0000000000..0931f1bf8c
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/util/adapter/MetricAdapter.java
@@ -0,0 +1,64 @@
+package br.rnp.futebol.vocoliseu.util.adapter;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.CheckBox;
+import android.widget.TextView;
+
+import br.rnp.futebol.vocoliseu.pojo.Metric;
+import com.google.android.exoplayer2.demo.R;
+
+import java.util.List;
+
+/**
+ * Created by camargo on 18/10/16.
+ */
+public class MetricAdapter extends BaseAdapter {
+
+    private Context ctx;
+    private TextView tvName, tvType;
+    private CheckBox cbUsed;
+    private Metric metric;
+    private List<Metric> metrics;
+
+
+    public MetricAdapter() {}
+
+    public MetricAdapter(Context context, List<Metric> metrics) {
+        super();
+        this.ctx = context;
+        this.metrics = metrics;
+    }
+
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        View view = LayoutInflater.from(ctx).inflate(R.layout.metric_item, parent, false);
+        metric = metrics.get(position);
+        tvName = (TextView) view.findViewById(R.id.tv_metric_item_name);
+        tvType = (TextView) view.findViewById(R.id.tv_metric_item_type);
+        cbUsed = (CheckBox) view.findViewById(R.id.cb_metric_item_used);
+        tvName.setText(metric.getName());
+        tvType.setText(metric.getTypeName());
+        cbUsed.setChecked(metric.isUsed());
+        return view;
+    }
+
+    @Override
+    public long getItemId(int position) {
+//        return metrics.get(position).getId();
+        return position;
+    }
+
+    @Override
+    public Object getItem(int position) {
+        return metrics.get(position);
+    }
+
+    @Override
+    public int getCount() {
+        return metrics.size();
+    }
+}
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/activity/DashboardActivity.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/activity/DashboardActivity.java
new file mode 100644
index 0000000000..923c26f660
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/activity/DashboardActivity.java
@@ -0,0 +1,182 @@
+package br.rnp.futebol.vocoliseu.visual.activity;
+
+import android.Manifest;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.Toolbar;
+import android.view.Menu;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ImageButton;
+import android.widget.ListView;
+import android.widget.Toast;
+
+import br.rnp.futebol.vocoliseu.dao.ScriptDAO;
+import br.rnp.futebol.vocoliseu.pojo.Script;
+import br.rnp.futebol.vocoliseu.util.adapter.ExperimentAdapter;
+import com.google.android.exoplayer2.demo.PlayerActivity;
+import com.google.android.exoplayer2.demo.R;
+
+import java.util.List;
+
+/**
+ * Created by camargo on 20/10/16.
+ */
+public class DashboardActivity extends AppCompatActivity {
+
+    //    private EditText etAddress, etFile;
+//    private Button btStart, btExamples;
+//    private final String PREF = "VO_PREFS";
+    private ImageButton ibNewExp;
+    private List<Script> myExps;
+    //    private TextView tvTitle;
+    private ListView lvExps;
+    private ExperimentAdapter adapter;
+    private ScriptDAO dao;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        setContentView(R.layout.dashboard_activity);
+//        tvTitle = (TextView) findViewById(R.id.tv_title);
+        ibNewExp = (ImageButton) findViewById(R.id.ib_new_experiment);
+        lvExps = (ListView) findViewById(R.id.lv_my_experiments);
+        Toolbar toolbar = (Toolbar) findViewById(R.id.dashboard_toolbar);
+        dao = new ScriptDAO(getBaseContext());
+
+//        toolbar.setLogo(R.drawable.ic_temp_icon_white_2);
+        setSupportActionBar(toolbar);
+        checkPerm();
+        refreshList();
+        ibNewExp.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Intent intent = new Intent(getBaseContext(), ExperimentConfigurationControllerActivity.class);
+                startActivity(intent);
+            }
+        });
+        lvExps.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                Script exp = myExps.get(position);
+                Intent intent = new Intent(getBaseContext(), PlayerActivity.class);
+                String provider = "http://".concat(exp.getAddress());
+                Bundle extras = new Bundle();
+                extras.putString("file", myExps.get(position).getFileName());
+                intent.putExtras(extras);
+                intent.setData(Uri.parse(provider));
+                intent.setAction(PlayerActivity.ACTION_VIEW);
+                startActivity(intent);
+            }
+        });
+        lvExps.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+            @Override
+            public boolean onItemLongClick(AdapterView<?> parent, View view, final int position, long id) {
+               makeDialog(myExps.get(position).getName(),
+                        "Do you want to remove the selected experiments?\n(The file won't be removed from your device)",
+                        DashboardActivity.this, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                new ScriptDAO(getBaseContext()).delete(myExps.get(position));
+                                refreshList();
+                                Toast.makeText(getBaseContext(), "Script removed", Toast.LENGTH_SHORT).show();
+                            }
+                        });
+
+                return true;
+            }
+        });
+//        etAddress.setText(settings.getString("ip", null));
+//        etFile.setText(settings.getString("file", null));
+//        btExamples.setOnClickListener(new View.OnClickListener() {
+//            @Override
+//            public void onClick(View view) {
+//                Intent intent = new Intent(getBaseContext(), ExperimentConfigurationControllerActivity.class);
+//                startActivity(intent);
+//            }
+//        });
+//        btStart.setOnClickListener(new View.OnClickListener() {
+//            @Override
+//            public void onClick(View view) {
+//                if (etAddress != null)
+//                    if (etAddress.getText() != null)
+//                        if (!etAddress.getText().toString().trim().equals("")) {
+//                            SharedPreferences settings = getSharedPreferences(PREF, 0);
+//                            SharedPreferences.Editor editor = settings.edit();
+//                            editor.putString("ip", etAddress.getText().toString());
+//                            editor.putString("file", etFile.getText().toString());
+//                            editor.apply();
+//                            String json = "http://".concat(etAddress.getText().toString()).concat(".mpd");
+//                            Intent intent = new Intent(getBaseContext(), PlayerActivity.class);
+//                            Log.i("jsonjson", json);
+//                            intent.setData(Uri.parse(json));
+//                            intent.setAction(PlayerActivity.ACTION_VIEW);
+//                            startActivity(intent);
+//                        }
+//
+//            }
+//        });
+
+    }
+
+    public AlertDialog makeDialog(String title, String message, Context myContext, DialogInterface.OnClickListener listener) {
+        AlertDialog.Builder builder = new AlertDialog.Builder(myContext);
+        builder.setMessage(message);
+        builder.setTitle(title);
+        builder.setPositiveButton("OK", listener);
+        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.dismiss();
+            }
+        });
+        AlertDialog dialog = builder.create();
+        dialog.show();
+        return dialog;
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        getMenuInflater().inflate(R.menu.dashboard_menu, menu);
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    protected void onResume() {
+        refreshList();
+        super.onResume();
+    }
+
+    private void checkPerm() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
+                requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
+            }
+        }
+    }
+
+    private void refreshList() {
+        myExps = dao.getExperiments();
+        if (myExps != null) {
+            adapter = new ExperimentAdapter(getBaseContext(), myExps);
+            lvExps.setAdapter(adapter);
+        }
+    }
+
+//    private void init() {
+//        etAddress = (EditText) findViewById(R.id.et_address);
+//        etFile = (EditText) findViewById(R.id.et_file_name);
+//        btStart = (Button) findViewById(R.id.bt_start);
+//        btExamples = (Button) findViewById(R.id.bt_examples);
+//    }
+
+
+}
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/activity/ExperimentConfiguration.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/activity/ExperimentConfiguration.java
new file mode 100644
index 0000000000..55abbbb564
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/activity/ExperimentConfiguration.java
@@ -0,0 +1,126 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package br.rnp.futebol.vocoliseu.visual.activity;
+
+import android.Manifest;
+import android.app.Activity;
+import android.content.pm.PackageManager;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.Environment;
+import android.support.v4.app.Fragment;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import com.google.android.exoplayer2.demo.R;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+
+/**
+ * An activity for selecting from a list of samples.
+ */
+public class ExperimentConfiguration extends Fragment {
+
+    private static final String TAG = "ExperimentConfiguration";
+    private View view;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        view = inflater.inflate(R.layout.experiment_configuration, container, false);
+        final TextView show = (TextView) view.findViewById(R.id.tv_show);
+        final EditText file = (EditText) view.findViewById(R.id.et_file_name), name = (EditText) view.findViewById(R.id.et_name), info = (EditText) view.findViewById(R.id.et_info);
+        Button write = (Button) view.findViewById(R.id.bt_write), read = (Button) view.findViewById(R.id.bt_read);
+//        checkPerm();
+        write.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                write(file.getText().toString(), prepareMsg(name.getText().toString(), info.getText().toString()));
+            }
+        });
+        read.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                show.setText(read(file.getText().toString()));
+            }
+        });
+        return view;
+    }
+
+//    private void checkPerm() {
+//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+//            if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
+//                requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
+//            }
+//        }
+//    }
+
+    private String prepareMsg(String name, String info) {
+        JSONObject json = new JSONObject();
+        try {
+            json.put("name", name);
+            json.put("info", info);
+            return json.toString();
+        } catch (JSONException e) {
+            Log.i(TAG, e.getMessage());
+            return "";
+        }
+
+
+    }
+
+    private void write(String file, String msg) {
+        try {
+            String csv = Environment.getExternalStorageDirectory().getAbsolutePath() + "/".concat(file.concat(".txt"));
+            BufferedWriter output;
+            output = new BufferedWriter(new FileWriter(csv, true));
+            output.append(msg);
+            output.newLine();
+            output.close();
+        } catch (IOException e) {
+            Log.i(TAG, e.getMessage());
+        }
+    }
+
+    private String read(String file) {
+        try {
+            String csv = Environment.getExternalStorageDirectory().getAbsolutePath() + "/".concat(file.concat(".txt"));
+            BufferedReader reader = new BufferedReader(new FileReader(csv));
+            String text = "", line;
+            while ((line = reader.readLine()) != null) {
+                text += line.concat(" ");
+            }
+            return text;
+        } catch (IOException e) {
+            Log.i(TAG, e.getMessage());
+            return "";
+        }
+    }
+
+
+}
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/activity/ExperimentConfigurationControllerActivity.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/activity/ExperimentConfigurationControllerActivity.java
new file mode 100644
index 0000000000..bcf7225091
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/activity/ExperimentConfigurationControllerActivity.java
@@ -0,0 +1,166 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package br.rnp.futebol.vocoliseu.visual.activity;
+
+import android.os.Bundle;
+import android.os.Environment;
+import android.support.design.widget.TabLayout;
+import android.support.v4.view.ViewPager;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.Toolbar;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.widget.Toast;
+
+import br.rnp.futebol.vocoliseu.dao.ScriptDAO;
+import br.rnp.futebol.vocoliseu.pojo.Script;
+import br.rnp.futebol.vocoliseu.util.adapter.FragmentAdapter;
+import br.rnp.futebol.vocoliseu.pojo.Metric;
+import com.google.android.exoplayer2.demo.R;
+import br.rnp.futebol.vocoliseu.util.ReadyMetrics;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.util.ArrayList;
+
+public class ExperimentConfigurationControllerActivity extends AppCompatActivity {
+
+    private static final String TAG = "ExpConfigController";
+    private Script script;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.experiment_configuration_controller);
+        Toolbar toolbar = (Toolbar) findViewById(R.id.exp_config_toolbar);
+        TabLayout tabLayout = (TabLayout) findViewById(R.id.exp_config_tab_layout);
+        final ViewPager viewPager = (ViewPager) findViewById(R.id.exp_config_pager);
+
+        script = new Script();
+        ArrayList<Metric> metrics = new ArrayList<>();
+
+        ReadyMetrics.init();
+        metrics.addAll(ReadyMetrics.QOS_METRICS);
+        metrics.addAll(ReadyMetrics.S_QOE_METRICS);
+        metrics.addAll(ReadyMetrics.O_QOE_METRICS);
+        script.setMetrics(metrics);
+
+        setSupportActionBar(toolbar);
+//        toolbar.setLogo(R.drawable.ic_temp_icon_white_2);
+
+        tabLayout.addTab(tabLayout.newTab().setText("SETTINGS"));
+        tabLayout.addTab(tabLayout.newTab().setText("METRICS"));
+//        tabLayout.addTab(tabLayout.newTab().setText("Metrics"));
+        tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);
+
+        FragmentAdapter adapter = new FragmentAdapter(getSupportFragmentManager());
+        viewPager.setAdapter(adapter);
+        viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(tabLayout));
+        tabLayout.setOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
+            @Override
+            public void onTabSelected(TabLayout.Tab tab) {
+                viewPager.setCurrentItem(tab.getPosition());
+            }
+
+            @Override
+            public void onTabUnselected(TabLayout.Tab tab) {
+            }
+
+            @Override
+            public void onTabReselected(TabLayout.Tab tab) {
+            }
+
+        });
+    }
+
+    private void write(String file, String msg) {
+        try {
+            String csv = Environment.getExternalStorageDirectory().getAbsolutePath() + "/".concat(file.concat(".txt"));
+            BufferedWriter output;
+            output = new BufferedWriter(new FileWriter(csv, true));
+            output.append(msg);
+            output.newLine();
+            output.close();
+        } catch (IOException e) {
+            Log.i(TAG, e.getMessage());
+        }
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        getMenuInflater().inflate(R.menu.experiment_menu, menu);
+        return true;
+    }
+
+    private boolean isFieldOk(String field) {
+        return (field != null && !field.trim().equals(""));
+    }
+
+    private boolean areFieldsOk() {
+        return ((isFieldOk(script.getName())) && (isFieldOk(script.getFileName()))
+                && (isFieldOk(script.getAddress())));
+    }
+
+    private String read(String file) {
+        try {
+            String csv = Environment.getExternalStorageDirectory().getAbsolutePath() + "/".concat(file.concat(".txt"));
+            BufferedReader reader = new BufferedReader(new FileReader(csv));
+            String text = "", line;
+            while ((line = reader.readLine()) != null) {
+                text += line.concat(" ");
+            }
+            return text;
+        } catch (IOException e) {
+            Log.i(TAG, e.getMessage());
+            return "";
+        }
+    }
+
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        int id = item.getItemId();
+        if (id == R.id.action_save) {
+            if (areFieldsOk()) {
+                write(script.getFileName(), script.toJson().toString());
+                Toast.makeText(getBaseContext(), "Script saved as " + script.getFileName() + ".txt", Toast.LENGTH_SHORT).show();
+                Log.i(TAG, read(script.getFileName()));
+                new ScriptDAO(getBaseContext()).insert(script);
+                finish();
+//                try {
+//                    Script exp = new Script().fromJson(new JSONObject(read(script.getFileName())));
+//                } catch (JSONException e) {
+//                }
+            } else {
+                Toast.makeText(getBaseContext(), "Name, filename and address cannot be empty", Toast.LENGTH_SHORT).show();
+            }
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
+    public Script getScript() {
+        return script;
+    }
+
+    public void setScript(Script script) {
+        this.script = script;
+    }
+}
+
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/activity/InitialActivity.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/activity/InitialActivity.java
new file mode 100644
index 0000000000..ba1adce8fe
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/activity/InitialActivity.java
@@ -0,0 +1,94 @@
+package br.rnp.futebol.vocoliseu.visual.activity;
+
+import android.Manifest;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.pm.PackageManager;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.Toolbar;
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+
+import com.google.android.exoplayer2.demo.PlayerActivity;
+import com.google.android.exoplayer2.demo.R;
+
+import br.rnp.futebol.vocoliseu.visual.activity.ExperimentConfigurationControllerActivity;
+
+/**
+ * Created by camargo on 20/10/16.
+ */
+public class InitialActivity extends AppCompatActivity {
+
+    private EditText etAddress, etFile;
+    private Button btStart, btExamples;
+    private final String PREF = "VO_PREFS";
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.initial_activity);
+        init();
+        checkPerm();
+        SharedPreferences settings = getSharedPreferences(PREF, 0);
+        Toolbar toolbar = (Toolbar) findViewById(R.id.initial_toolbar);
+        toolbar.setLogo(R.drawable.ic_launcher);
+        setSupportActionBar(toolbar);
+        etAddress.setText(settings.getString("ip", null));
+        etFile.setText(settings.getString("file", null));
+        btExamples.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                Intent intent = new Intent(getBaseContext(), ExperimentConfigurationControllerActivity.class);
+                startActivity(intent);
+            }
+        });
+        btStart.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (etAddress != null)
+                    if (etAddress.getText() != null)
+                        if (!etAddress.getText().toString().trim().equals("")) {
+                            SharedPreferences settings = getSharedPreferences(PREF, 0);
+                            SharedPreferences.Editor editor = settings.edit();
+                            editor.putString("ip", etAddress.getText().toString());
+                            editor.putString("file", etFile.getText().toString());
+                            editor.apply();
+//                            String json = "[{\"name\": \"Teste UFRGS\", \"samples\":[{\"name\":\"Teste de video\",\"uri\":\"http://".concat(etAddress.getText().toString()).concat("/manifest.mpd\"}]}]");
+                            String json = "http://".concat(etAddress.getText().toString()).concat(".mpd");
+                            Intent intent = new Intent(getBaseContext(), PlayerActivity.class);
+                            Log.i("jsonjson", json);
+//                            Bundle bld = new Bundle();
+//                            bld.putString("test", json);
+//                            intent.putExtras(bld);
+                            intent.setData(Uri.parse(json));
+                            intent.setAction(PlayerActivity.ACTION_VIEW);
+                            startActivity(intent);
+                        }
+
+            }
+        });
+
+    }
+
+        private void checkPerm() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
+                requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
+            }
+        }
+    }
+
+    private void init() {
+        etAddress = (EditText) findViewById(R.id.et_address);
+        etFile = (EditText) findViewById(R.id.et_file_name);
+        btStart = (Button) findViewById(R.id.bt_start);
+        btExamples = (Button) findViewById(R.id.bt_examples);
+    }
+
+
+}
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/fragment/ExperimentConfigurationGeneralFragment.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/fragment/ExperimentConfigurationGeneralFragment.java
new file mode 100644
index 0000000000..89b6d25556
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/fragment/ExperimentConfigurationGeneralFragment.java
@@ -0,0 +1,153 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package br.rnp.futebol.vocoliseu.visual.fragment;
+
+import android.os.Bundle;
+import android.os.Environment;
+import android.support.v4.app.Fragment;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.EditText;
+
+import br.rnp.futebol.vocoliseu.pojo.Script;
+import com.google.android.exoplayer2.demo.R;
+
+import br.rnp.futebol.vocoliseu.visual.activity.ExperimentConfigurationControllerActivity;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.BufferedReader;
+import java.io.FileReader;
+import java.io.IOException;
+
+/**
+ * An activity for selecting from a list of samples.
+ */
+public class ExperimentConfigurationGeneralFragment extends Fragment {
+
+    private static final String TAG = "ExpConfiguration1";
+    private View view;
+    private ExperimentConfigurationControllerActivity activity;
+    private Script script;
+    private EditText etName, etFilename, etAddress, etIntruction;
+    private CheckBox cbAskInfo, cbUseDash;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        view = inflater.inflate(R.layout.f_experiment_configuration_general, container, false);
+        activity = (ExperimentConfigurationControllerActivity) getActivity();
+        script = activity.getScript();
+        init();
+
+        etName.setOnFocusChangeListener(new View.OnFocusChangeListener() {
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                script.setName(etName.getText().toString());
+            }
+        });
+
+        etFilename.setOnFocusChangeListener(new View.OnFocusChangeListener() {
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                script.setFileName(etFilename.getText().toString());
+            }
+        });
+
+        etAddress.setOnFocusChangeListener(new View.OnFocusChangeListener() {
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                script.setAddress(etAddress.getText().toString());
+            }
+        });
+
+        etIntruction.setOnFocusChangeListener(new View.OnFocusChangeListener() {
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                script.setDescription(etIntruction.getText().toString());
+            }
+        });
+
+        cbAskInfo.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                script.setAskInfo(isChecked);
+            }
+        });
+
+        cbUseDash.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                script.setUseDash(isChecked);
+            }
+        });
+
+        return view;
+    }
+
+    public void init() {
+        etName = (EditText) view.findViewById(R.id.et_exp_name);
+        etFilename = (EditText) view.findViewById(R.id.et_file_name);
+        etAddress = (EditText) view.findViewById(R.id.et_provider_ip);
+        etIntruction = (EditText) view.findViewById(R.id.et_instructions);
+        cbAskInfo = (CheckBox) view.findViewById(R.id.cb_ask_info);
+        cbUseDash = (CheckBox) view.findViewById(R.id.cb_use_dash);
+    }
+
+//    private void checkPerm() {
+//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+//            if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
+//                requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
+//            }
+//        }
+//    }
+
+    private String prepareMsg(String name, String info) {
+        JSONObject json = new JSONObject();
+        try {
+            json.put("name", name);
+            json.put("info", info);
+            return json.toString();
+        } catch (JSONException e) {
+            Log.i(TAG, e.getMessage());
+            return "";
+        }
+
+
+    }
+
+    private String read(String file) {
+        try {
+            String csv = Environment.getExternalStorageDirectory().getAbsolutePath() + "/".concat(file.concat(".txt"));
+            BufferedReader reader = new BufferedReader(new FileReader(csv));
+            String text = "", line;
+            while ((line = reader.readLine()) != null) {
+                text += line.concat(" ");
+            }
+            return text;
+        } catch (IOException e) {
+            Log.i(TAG, e.getMessage());
+            return "";
+        }
+    }
+
+
+}
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/fragment/ExperimentConfigurationMetricsFragment.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/fragment/ExperimentConfigurationMetricsFragment.java
new file mode 100644
index 0000000000..46feb9eeb6
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/fragment/ExperimentConfigurationMetricsFragment.java
@@ -0,0 +1,152 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package br.rnp.futebol.vocoliseu.visual.fragment;
+
+import android.os.Bundle;
+import android.os.Environment;
+import android.support.v4.app.Fragment;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ListView;
+
+import br.rnp.futebol.vocoliseu.pojo.Script;
+import br.rnp.futebol.vocoliseu.pojo.Metric;
+import br.rnp.futebol.vocoliseu.util.adapter.MetricAdapter;
+import com.google.android.exoplayer2.demo.R;
+
+import br.rnp.futebol.vocoliseu.visual.activity.ExperimentConfigurationControllerActivity;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.util.List;
+
+/**
+ * An activity for selecting from a list of samples.
+ */
+public class ExperimentConfigurationMetricsFragment extends Fragment {
+
+    private static final String TAG = "ExperimentConfiguration";
+    private View view;
+    private Script script;
+    private ExperimentConfigurationControllerActivity activity;
+    private ListView lvMetrics;
+    private List<Metric> metrics;
+    private MetricAdapter adapter;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        view = inflater.inflate(R.layout.f_experiment_configuration_metrics, container, false);
+        lvMetrics = (ListView) view.findViewById(R.id.lv_metrics);
+        activity = (ExperimentConfigurationControllerActivity) getActivity();
+        script = activity.getScript();
+        refreshList();
+//        lvMetrics.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
+        lvMetrics.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+//                Toast.makeText(getActivity(), metrics.get(position).getName(), Toast.LENGTH_SHORT).show();
+                script.getMetrics().get(position).setUsed(!script.getMetrics().get(position).isUsed());
+                refreshList();
+            }
+        });
+//        lvMetrics.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+//            @Override
+//            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+//                Toast.makeText(getActivity(), metrics.get(position).getName(), Toast.LENGTH_SHORT).show();
+//                metrics.get(position).setUsed(!metrics.get(position).isUsed());
+//                adapter.notifyDataSetChanged();
+//            }
+//
+//            @Override
+//            public void onNothingSelected(AdapterView<?> parent) {
+//            }
+//        });
+        return view;
+    }
+
+    private void refreshList() {
+        metrics = script.getMetrics();
+        if (metrics != null) {
+            adapter = new MetricAdapter(getContext(), metrics);
+            lvMetrics.setAdapter(adapter);
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+    }
+
+    //    private void checkPerm() {
+//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+//            if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
+//                requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
+//            }
+//        }
+//    }
+
+    private String prepareMsg(String name, String info) {
+        JSONObject json = new JSONObject();
+        try {
+            json.put("name", name);
+            json.put("info", info);
+            return json.toString();
+        } catch (JSONException e) {
+            Log.i(TAG, e.getMessage());
+            return "";
+        }
+    }
+
+    private void write(String file, String msg) {
+        try {
+            String csv = Environment.getExternalStorageDirectory().getAbsolutePath() + "/".concat(file.concat(".txt"));
+            BufferedWriter output;
+            output = new BufferedWriter(new FileWriter(csv, true));
+            output.append(msg);
+            output.newLine();
+            output.close();
+        } catch (IOException e) {
+            Log.i(TAG, e.getMessage());
+        }
+    }
+
+    private String read(String file) {
+        try {
+            String csv = Environment.getExternalStorageDirectory().getAbsolutePath() + "/".concat(file.concat(".txt"));
+            BufferedReader reader = new BufferedReader(new FileReader(csv));
+            String text = "", line;
+            while ((line = reader.readLine()) != null) {
+                text += line.concat(" ");
+            }
+            return text;
+        } catch (IOException e) {
+            Log.i(TAG, e.getMessage());
+            return "";
+        }
+    }
+
+
+}
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java b/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
index eaa4d9971f..16fd463620 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
@@ -28,6 +28,7 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 import android.widget.Toast;
+
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.DefaultLoadControl;
 import com.google.android.exoplayer2.ExoPlaybackException;
@@ -66,6 +67,7 @@
 import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
 import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.google.android.exoplayer2.util.Util;
+
 import java.net.CookieHandler;
 import java.net.CookieManager;
 import java.net.CookiePolicy;
@@ -77,445 +79,449 @@
  * An activity that plays media using {@link SimpleExoPlayer}.
  */
 public class PlayerActivity extends Activity implements OnClickListener, ExoPlayer.EventListener,
-    MappingTrackSelector.EventListener, PlaybackControlView.VisibilityListener {
-
-  public static final String DRM_SCHEME_UUID_EXTRA = "drm_scheme_uuid";
-  public static final String DRM_LICENSE_URL = "drm_license_url";
-  public static final String DRM_KEY_REQUEST_PROPERTIES = "drm_key_request_properties";
-  public static final String PREFER_EXTENSION_DECODERS = "prefer_extension_decoders";
-
-  public static final String ACTION_VIEW = "com.google.android.exoplayer.demo.action.VIEW";
-  public static final String EXTENSION_EXTRA = "extension";
-
-  public static final String ACTION_VIEW_LIST =
-      "com.google.android.exoplayer.demo.action.VIEW_LIST";
-  public static final String URI_LIST_EXTRA = "uri_list";
-  public static final String EXTENSION_LIST_EXTRA = "extension_list";
-
-  private static final DefaultBandwidthMeter BANDWIDTH_METER = new DefaultBandwidthMeter();
-  private static final CookieManager DEFAULT_COOKIE_MANAGER;
-  static {
-    DEFAULT_COOKIE_MANAGER = new CookieManager();
-    DEFAULT_COOKIE_MANAGER.setCookiePolicy(CookiePolicy.ACCEPT_ORIGINAL_SERVER);
-  }
-
-  private Handler mainHandler;
-  private EventLogger eventLogger;
-  private SimpleExoPlayerView simpleExoPlayerView;
-  private LinearLayout debugRootView;
-  private TextView debugTextView;
-  private Button retryButton;
-
-  private String userAgent;
-  private DataSource.Factory mediaDataSourceFactory;
-  private SimpleExoPlayer player;
-  private MappingTrackSelector trackSelector;
-  private TrackSelectionHelper trackSelectionHelper;
-  private DebugTextViewHelper debugViewHelper;
-  private boolean playerNeedsSource;
-
-  private boolean shouldAutoPlay;
-  private boolean shouldRestorePosition;
-  private int playerWindow;
-  private long playerPosition;
-
-  // Activity lifecycle
-
-  @Override
-  public void onCreate(Bundle savedInstanceState) {
-    super.onCreate(savedInstanceState);
-    shouldAutoPlay = true;
-    userAgent = Util.getUserAgent(this, "ExoPlayerDemo");
-    mediaDataSourceFactory = buildDataSourceFactory(true);
-    mainHandler = new Handler();
-    if (CookieHandler.getDefault() != DEFAULT_COOKIE_MANAGER) {
-      CookieHandler.setDefault(DEFAULT_COOKIE_MANAGER);
-    }
+        MappingTrackSelector.EventListener, PlaybackControlView.VisibilityListener {
+
+    public static final String DRM_SCHEME_UUID_EXTRA = "drm_scheme_uuid";
+    public static final String DRM_LICENSE_URL = "drm_license_url";
+    public static final String DRM_KEY_REQUEST_PROPERTIES = "drm_key_request_properties";
+    public static final String PREFER_EXTENSION_DECODERS = "prefer_extension_decoders";
+
+    public static final String ACTION_VIEW = "com.google.android.exoplayer.demo.action.VIEW";
+    public static final String EXTENSION_EXTRA = "extension";
+
+    public static final String ACTION_VIEW_LIST =
+            "com.google.android.exoplayer.demo.action.VIEW_LIST";
+    public static final String URI_LIST_EXTRA = "uri_list";
+    public static final String EXTENSION_LIST_EXTRA = "extension_list";
+
+    private static final DefaultBandwidthMeter BANDWIDTH_METER = new DefaultBandwidthMeter();
+    private static final CookieManager DEFAULT_COOKIE_MANAGER;
 
-    setContentView(R.layout.player_activity);
-    View rootView = findViewById(R.id.root);
-    rootView.setOnClickListener(this);
-    debugRootView = (LinearLayout) findViewById(R.id.controls_root);
-    debugTextView = (TextView) findViewById(R.id.debug_text_view);
-    retryButton = (Button) findViewById(R.id.retry_button);
-    retryButton.setOnClickListener(this);
-
-    simpleExoPlayerView = (SimpleExoPlayerView) findViewById(R.id.player_view);
-    simpleExoPlayerView.setControllerVisibilityListener(this);
-    simpleExoPlayerView.requestFocus();
-  }
-
-  @Override
-  public void onNewIntent(Intent intent) {
-    releasePlayer();
-    shouldRestorePosition = false;
-    setIntent(intent);
-  }
-
-  @Override
-  public void onStart() {
-    super.onStart();
-    if (Util.SDK_INT > 23) {
-      initializePlayer();
+    static {
+        DEFAULT_COOKIE_MANAGER = new CookieManager();
+        DEFAULT_COOKIE_MANAGER.setCookiePolicy(CookiePolicy.ACCEPT_ORIGINAL_SERVER);
     }
-  }
 
-  @Override
-  public void onResume() {
-    super.onResume();
-    if ((Util.SDK_INT <= 23 || player == null)) {
-      initializePlayer();
+    private Handler mainHandler;
+    private EventLogger eventLogger;
+    private SimpleExoPlayerView simpleExoPlayerView;
+//    private LinearLayout debugRootView;
+    private TextView debugTextView;
+//    private Button retryButton;
+
+    private String userAgent;
+    private DataSource.Factory mediaDataSourceFactory;
+    private SimpleExoPlayer player;
+    private MappingTrackSelector trackSelector;
+    private TrackSelectionHelper trackSelectionHelper;
+    private DebugTextViewHelper debugViewHelper;
+    private boolean playerNeedsSource;
+
+    private boolean shouldAutoPlay;
+    private boolean shouldRestorePosition;
+    private int playerWindow;
+    private long playerPosition;
+
+    // Activity lifecycle
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        shouldAutoPlay = true;
+        userAgent = Util.getUserAgent(this, "ExoPlayerDemo");
+        mediaDataSourceFactory = buildDataSourceFactory(true);
+        mainHandler = new Handler();
+        if (CookieHandler.getDefault() != DEFAULT_COOKIE_MANAGER) {
+            CookieHandler.setDefault(DEFAULT_COOKIE_MANAGER);
+        }
+
+        setContentView(R.layout.player_activity);
+        View rootView = findViewById(R.id.root);
+        rootView.setOnClickListener(this);
+//        debugRootView = (LinearLayout) findViewById(R.id.controls_root);
+        debugTextView = (TextView) findViewById(R.id.debug_text_view);
+//        retryButton = (Button) findViewById(R.id.retry_button);
+//        retryButton.setOnClickListener(this);
+
+        simpleExoPlayerView = (SimpleExoPlayerView) findViewById(R.id.player_view);
+        simpleExoPlayerView.setControllerVisibilityListener(this);
+        simpleExoPlayerView.requestFocus();
     }
-  }
 
-  @Override
-  public void onPause() {
-    super.onPause();
-    if (Util.SDK_INT <= 23) {
-      releasePlayer();
+    @Override
+    public void onNewIntent(Intent intent) {
+        releasePlayer();
+        shouldRestorePosition = false;
+        setIntent(intent);
     }
-  }
 
-  @Override
-  public void onStop() {
-    super.onStop();
-    if (Util.SDK_INT > 23) {
-      releasePlayer();
+    @Override
+    public void onStart() {
+        super.onStart();
+        if (Util.SDK_INT > 23) {
+            initializePlayer();
+        }
     }
-  }
-
-  @Override
-  public void onRequestPermissionsResult(int requestCode, String[] permissions,
-      int[] grantResults) {
-    if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
-      initializePlayer();
-    } else {
-      showToast(R.string.storage_permission_denied);
-      finish();
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if ((Util.SDK_INT <= 23 || player == null)) {
+            initializePlayer();
+        }
     }
-  }
 
-  // OnClickListener methods
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (Util.SDK_INT <= 23) {
+            releasePlayer();
+        }
+    }
 
-  @Override
-  public void onClick(View view) {
-    if (view == retryButton) {
-      initializePlayer();
-    } else if (view.getParent() == debugRootView) {
-      trackSelectionHelper.showSelectionDialog(this, ((Button) view).getText(),
-          trackSelector.getTrackInfo(), (int) view.getTag());
+    @Override
+    public void onStop() {
+        super.onStop();
+        if (Util.SDK_INT > 23) {
+            releasePlayer();
+        }
     }
-  }
-
-  // PlaybackControlView.VisibilityListener implementation
-
-  @Override
-  public void onVisibilityChange(int visibility) {
-    debugRootView.setVisibility(visibility);
-  }
-
-  // Internal methods
-
-  private void initializePlayer() {
-    Intent intent = getIntent();
-    if (player == null) {
-      boolean preferExtensionDecoders = intent.getBooleanExtra(PREFER_EXTENSION_DECODERS, false);
-      UUID drmSchemeUuid = intent.hasExtra(DRM_SCHEME_UUID_EXTRA)
-          ? UUID.fromString(intent.getStringExtra(DRM_SCHEME_UUID_EXTRA)) : null;
-      DrmSessionManager drmSessionManager = null;
-      if (drmSchemeUuid != null) {
-        String drmLicenseUrl = intent.getStringExtra(DRM_LICENSE_URL);
-        String[] keyRequestPropertiesArray = intent.getStringArrayExtra(DRM_KEY_REQUEST_PROPERTIES);
-        Map<String, String> keyRequestProperties;
-        if (keyRequestPropertiesArray == null || keyRequestPropertiesArray.length < 2) {
-          keyRequestProperties = null;
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, String[] permissions,
+                                           int[] grantResults) {
+        if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+            initializePlayer();
         } else {
-          keyRequestProperties = new HashMap<>();
-          for (int i = 0; i < keyRequestPropertiesArray.length - 1; i += 2) {
-            keyRequestProperties.put(keyRequestPropertiesArray[i],
-                keyRequestPropertiesArray[i + 1]);
-          }
+            showToast(R.string.storage_permission_denied);
+            finish();
         }
-        try {
-          drmSessionManager = buildDrmSessionManager(drmSchemeUuid, drmLicenseUrl,
-              keyRequestProperties);
-        } catch (UnsupportedDrmException e) {
-          int errorStringId = Util.SDK_INT < 18 ? R.string.error_drm_not_supported
-              : (e.reason == UnsupportedDrmException.REASON_UNSUPPORTED_SCHEME
-                  ? R.string.error_drm_unsupported_scheme : R.string.error_drm_unknown);
-          showToast(errorStringId);
-          return;
+    }
+
+    // OnClickListener methods
+
+    @Override
+    public void onClick(View view) {
+//        if (view == retryButton) {
+//            initializePlayer();
+//        } else if (view.getParent() == debugRootView) {
+//            trackSelectionHelper.showSelectionDialog(this, ((Button) view).getText(),
+//                    trackSelector.getTrackInfo(), (int) view.getTag());
+//        }
+    }
+
+    // PlaybackControlView.VisibilityListener implementation
+
+    @Override
+    public void onVisibilityChange(int visibility) {
+//        debugRootView.setVisibility(visibility);
+    }
+
+    // Internal methods
+
+    private void initializePlayer() {
+        Intent intent = getIntent();
+        String filename = "default";
+        if (intent.getExtras() != null)
+            filename = intent.getExtras().getString("file");
+        if (player == null) {
+            boolean preferExtensionDecoders = intent.getBooleanExtra(PREFER_EXTENSION_DECODERS, false);
+            UUID drmSchemeUuid = intent.hasExtra(DRM_SCHEME_UUID_EXTRA)
+                    ? UUID.fromString(intent.getStringExtra(DRM_SCHEME_UUID_EXTRA)) : null;
+            DrmSessionManager drmSessionManager = null;
+            if (drmSchemeUuid != null) {
+                String drmLicenseUrl = intent.getStringExtra(DRM_LICENSE_URL);
+                String[] keyRequestPropertiesArray = intent.getStringArrayExtra(DRM_KEY_REQUEST_PROPERTIES);
+                Map<String, String> keyRequestProperties;
+                if (keyRequestPropertiesArray == null || keyRequestPropertiesArray.length < 2) {
+                    keyRequestProperties = null;
+                } else {
+                    keyRequestProperties = new HashMap<>();
+                    for (int i = 0; i < keyRequestPropertiesArray.length - 1; i += 2) {
+                        keyRequestProperties.put(keyRequestPropertiesArray[i],
+                                keyRequestPropertiesArray[i + 1]);
+                    }
+                }
+                try {
+                    drmSessionManager = buildDrmSessionManager(drmSchemeUuid, drmLicenseUrl,
+                            keyRequestProperties);
+                } catch (UnsupportedDrmException e) {
+                    int errorStringId = Util.SDK_INT < 18 ? R.string.error_drm_not_supported
+                            : (e.reason == UnsupportedDrmException.REASON_UNSUPPORTED_SCHEME
+                            ? R.string.error_drm_unsupported_scheme : R.string.error_drm_unknown);
+                    showToast(errorStringId);
+                    return;
+                }
+            }
+
+            eventLogger = new EventLogger();
+            TrackSelection.Factory videoTrackSelectionFactory =
+                    new AdaptiveVideoTrackSelection.Factory(BANDWIDTH_METER);
+            trackSelector = new DefaultTrackSelector(mainHandler, videoTrackSelectionFactory);
+            trackSelector.addListener(this);
+            trackSelector.addListener(eventLogger);
+            trackSelectionHelper = new TrackSelectionHelper(trackSelector, videoTrackSelectionFactory);
+            player = ExoPlayerFactory.newSimpleInstance(this, trackSelector, new DefaultLoadControl(),
+                    drmSessionManager, preferExtensionDecoders);
+            player.addListener(this);
+            player.addListener(eventLogger);
+            player.setAudioDebugListener(eventLogger);
+            player.setVideoDebugListener(eventLogger);
+            player.setId3Output(eventLogger);
+            simpleExoPlayerView.setPlayer(player);
+            if (shouldRestorePosition) {
+                if (playerPosition == C.TIME_UNSET) {
+                    player.seekToDefaultPosition(playerWindow);
+                } else {
+                    player.seekTo(playerWindow, playerPosition);
+                }
+            }
+            player.setPlayWhenReady(shouldAutoPlay);
+            debugViewHelper = new DebugTextViewHelper(player, debugTextView, filename);
+            debugViewHelper.start();
+            playerNeedsSource = true;
         }
-      }
-
-      eventLogger = new EventLogger();
-      TrackSelection.Factory videoTrackSelectionFactory =
-          new AdaptiveVideoTrackSelection.Factory(BANDWIDTH_METER);
-      trackSelector = new DefaultTrackSelector(mainHandler, videoTrackSelectionFactory);
-      trackSelector.addListener(this);
-      trackSelector.addListener(eventLogger);
-      trackSelectionHelper = new TrackSelectionHelper(trackSelector, videoTrackSelectionFactory);
-      player = ExoPlayerFactory.newSimpleInstance(this, trackSelector, new DefaultLoadControl(),
-          drmSessionManager, preferExtensionDecoders);
-      player.addListener(this);
-      player.addListener(eventLogger);
-      player.setAudioDebugListener(eventLogger);
-      player.setVideoDebugListener(eventLogger);
-      player.setId3Output(eventLogger);
-      simpleExoPlayerView.setPlayer(player);
-      if (shouldRestorePosition) {
-        if (playerPosition == C.TIME_UNSET) {
-          player.seekToDefaultPosition(playerWindow);
-        } else {
-          player.seekTo(playerWindow, playerPosition);
+        if (playerNeedsSource) {
+            String action = intent.getAction();
+            Uri[] uris;
+            String[] extensions;
+            if (ACTION_VIEW.equals(action)) {
+                uris = new Uri[]{intent.getData()};
+                extensions = new String[]{intent.getStringExtra(EXTENSION_EXTRA)};
+            } else if (ACTION_VIEW_LIST.equals(action)) {
+                String[] uriStrings = intent.getStringArrayExtra(URI_LIST_EXTRA);
+                uris = new Uri[uriStrings.length];
+                for (int i = 0; i < uriStrings.length; i++) {
+                    uris[i] = Uri.parse(uriStrings[i]);
+                }
+                extensions = intent.getStringArrayExtra(EXTENSION_LIST_EXTRA);
+                if (extensions == null) {
+                    extensions = new String[uriStrings.length];
+                }
+            } else {
+                showToast(getString(R.string.unexpected_intent_action, action));
+                return;
+            }
+            if (Util.maybeRequestReadExternalStoragePermission(this, uris)) {
+                // The player will be reinitialized if the permission is granted.
+                return;
+            }
+            MediaSource[] mediaSources = new MediaSource[uris.length];
+            for (int i = 0; i < uris.length; i++) {
+                mediaSources[i] = buildMediaSource(uris[i], extensions[i]);
+            }
+            MediaSource mediaSource = mediaSources.length == 1 ? mediaSources[0]
+                    : new ConcatenatingMediaSource(mediaSources);
+            player.prepare(mediaSource, !shouldRestorePosition);
+            playerNeedsSource = false;
+            updateButtonVisibilities();
         }
-      }
-      player.setPlayWhenReady(shouldAutoPlay);
-      debugViewHelper = new DebugTextViewHelper(player, debugTextView);
-      debugViewHelper.start();
-      playerNeedsSource = true;
     }
-    if (playerNeedsSource) {
-      String action = intent.getAction();
-      Uri[] uris;
-      String[] extensions;
-      if (ACTION_VIEW.equals(action)) {
-        uris = new Uri[] {intent.getData()};
-        extensions = new String[] {intent.getStringExtra(EXTENSION_EXTRA)};
-      } else if (ACTION_VIEW_LIST.equals(action)) {
-        String[] uriStrings = intent.getStringArrayExtra(URI_LIST_EXTRA);
-        uris = new Uri[uriStrings.length];
-        for (int i = 0; i < uriStrings.length; i++) {
-          uris[i] = Uri.parse(uriStrings[i]);
+
+    private MediaSource buildMediaSource(Uri uri, String overrideExtension) {
+        int type = Util.inferContentType(!TextUtils.isEmpty(overrideExtension) ? "." + overrideExtension
+                : uri.getLastPathSegment());
+        switch (type) {
+            case Util.TYPE_SS:
+                return new SsMediaSource(uri, buildDataSourceFactory(false),
+                        new DefaultSsChunkSource.Factory(mediaDataSourceFactory), mainHandler, eventLogger);
+            case Util.TYPE_DASH:
+                return new DashMediaSource(uri, buildDataSourceFactory(false),
+                        new DefaultDashChunkSource.Factory(mediaDataSourceFactory), mainHandler, eventLogger);
+            case Util.TYPE_HLS:
+                return new HlsMediaSource(uri, mediaDataSourceFactory, mainHandler, eventLogger);
+            case Util.TYPE_OTHER:
+                return new ExtractorMediaSource(uri, mediaDataSourceFactory, new DefaultExtractorsFactory(),
+                        mainHandler, eventLogger);
+            default: {
+                throw new IllegalStateException("Unsupported type: " + type);
+            }
         }
-        extensions = intent.getStringArrayExtra(EXTENSION_LIST_EXTRA);
-        if (extensions == null) {
-          extensions = new String[uriStrings.length];
+    }
+
+    private DrmSessionManager buildDrmSessionManager(UUID uuid, String licenseUrl,
+                                                     Map<String, String> keyRequestProperties)
+            throws UnsupportedDrmException {
+        if (Util.SDK_INT < 18) {
+            return null;
         }
-      } else {
-        showToast(getString(R.string.unexpected_intent_action, action));
-        return;
-      }
-      if (Util.maybeRequestReadExternalStoragePermission(this, uris)) {
-        // The player will be reinitialized if the permission is granted.
-        return;
-      }
-      MediaSource[] mediaSources = new MediaSource[uris.length];
-      for (int i = 0; i < uris.length; i++) {
-        mediaSources[i] = buildMediaSource(uris[i], extensions[i]);
-      }
-      MediaSource mediaSource = mediaSources.length == 1 ? mediaSources[0]
-          : new ConcatenatingMediaSource(mediaSources);
-      player.prepare(mediaSource, !shouldRestorePosition);
-      playerNeedsSource = false;
-      updateButtonVisibilities();
+        HttpMediaDrmCallback drmCallback = new HttpMediaDrmCallback(licenseUrl,
+                buildHttpDataSourceFactory(false), keyRequestProperties);
+        return new StreamingDrmSessionManager<>(uuid,
+                FrameworkMediaDrm.newInstance(uuid), drmCallback, null, mainHandler, eventLogger);
     }
-  }
-
-  private MediaSource buildMediaSource(Uri uri, String overrideExtension) {
-    int type = Util.inferContentType(!TextUtils.isEmpty(overrideExtension) ? "." + overrideExtension
-        : uri.getLastPathSegment());
-    switch (type) {
-      case Util.TYPE_SS:
-        return new SsMediaSource(uri, buildDataSourceFactory(false),
-            new DefaultSsChunkSource.Factory(mediaDataSourceFactory), mainHandler, eventLogger);
-      case Util.TYPE_DASH:
-        return new DashMediaSource(uri, buildDataSourceFactory(false),
-            new DefaultDashChunkSource.Factory(mediaDataSourceFactory), mainHandler, eventLogger);
-      case Util.TYPE_HLS:
-        return new HlsMediaSource(uri, mediaDataSourceFactory, mainHandler, eventLogger);
-      case Util.TYPE_OTHER:
-        return new ExtractorMediaSource(uri, mediaDataSourceFactory, new DefaultExtractorsFactory(),
-            mainHandler, eventLogger);
-      default: {
-        throw new IllegalStateException("Unsupported type: " + type);
-      }
+
+    private void releasePlayer() {
+        if (player != null) {
+            debugViewHelper.stop();
+            debugViewHelper = null;
+            shouldAutoPlay = player.getPlayWhenReady();
+            shouldRestorePosition = false;
+            Timeline timeline = player.getCurrentTimeline();
+            if (timeline != null) {
+                playerWindow = player.getCurrentWindowIndex();
+                Timeline.Window window = timeline.getWindow(playerWindow, new Timeline.Window());
+                if (!window.isDynamic) {
+                    shouldRestorePosition = true;
+                    playerPosition = window.isSeekable ? player.getCurrentPosition() : C.TIME_UNSET;
+                }
+            }
+            player.release();
+            player = null;
+            trackSelector = null;
+            trackSelectionHelper = null;
+            eventLogger = null;
+        }
     }
-  }
 
-  private DrmSessionManager buildDrmSessionManager(UUID uuid, String licenseUrl,
-      Map<String, String> keyRequestProperties)
-      throws UnsupportedDrmException {
-    if (Util.SDK_INT < 18) {
-      return null;
+    /**
+     * Returns a new DataSource factory.
+     *
+     * @param useBandwidthMeter Whether to set {@link #BANDWIDTH_METER} as a listener to the new
+     *                          DataSource factory.
+     * @return A new DataSource factory.
+     */
+    private DataSource.Factory buildDataSourceFactory(boolean useBandwidthMeter) {
+        return new DefaultDataSourceFactory(this, useBandwidthMeter ? BANDWIDTH_METER : null,
+                buildHttpDataSourceFactory(useBandwidthMeter));
     }
-    HttpMediaDrmCallback drmCallback = new HttpMediaDrmCallback(licenseUrl,
-        buildHttpDataSourceFactory(false), keyRequestProperties);
-    return new StreamingDrmSessionManager<>(uuid,
-        FrameworkMediaDrm.newInstance(uuid), drmCallback, null, mainHandler, eventLogger);
-  }
-
-  private void releasePlayer() {
-    if (player != null) {
-      debugViewHelper.stop();
-      debugViewHelper = null;
-      shouldAutoPlay = player.getPlayWhenReady();
-      shouldRestorePosition = false;
-      Timeline timeline = player.getCurrentTimeline();
-      if (timeline != null) {
-        playerWindow = player.getCurrentWindowIndex();
-        Timeline.Window window = timeline.getWindow(playerWindow, new Timeline.Window());
-        if (!window.isDynamic) {
-          shouldRestorePosition = true;
-          playerPosition = window.isSeekable ? player.getCurrentPosition() : C.TIME_UNSET;
-        }
-      }
-      player.release();
-      player = null;
-      trackSelector = null;
-      trackSelectionHelper = null;
-      eventLogger = null;
+
+    /**
+     * Returns a new HttpDataSource factory.
+     *
+     * @param useBandwidthMeter Whether to set {@link #BANDWIDTH_METER} as a listener to the new
+     *                          DataSource factory.
+     * @return A new HttpDataSource factory.
+     */
+    private HttpDataSource.Factory buildHttpDataSourceFactory(boolean useBandwidthMeter) {
+        return new DefaultHttpDataSourceFactory(userAgent, useBandwidthMeter ? BANDWIDTH_METER : null);
     }
-  }
-
-  /**
-   * Returns a new DataSource factory.
-   *
-   * @param useBandwidthMeter Whether to set {@link #BANDWIDTH_METER} as a listener to the new
-   *     DataSource factory.
-   * @return A new DataSource factory.
-   */
-  private DataSource.Factory buildDataSourceFactory(boolean useBandwidthMeter) {
-    return new DefaultDataSourceFactory(this, useBandwidthMeter ? BANDWIDTH_METER : null,
-        buildHttpDataSourceFactory(useBandwidthMeter));
-  }
-
-  /**
-   * Returns a new HttpDataSource factory.
-   *
-   * @param useBandwidthMeter Whether to set {@link #BANDWIDTH_METER} as a listener to the new
-   *     DataSource factory.
-   * @return A new HttpDataSource factory.
-   */
-  private HttpDataSource.Factory buildHttpDataSourceFactory(boolean useBandwidthMeter) {
-    return new DefaultHttpDataSourceFactory(userAgent, useBandwidthMeter ? BANDWIDTH_METER : null);
-  }
-
-  // ExoPlayer.EventListener implementation
-
-  @Override
-  public void onLoadingChanged(boolean isLoading) {
-    // Do nothing.
-  }
-
-  @Override
-  public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
-    if (playbackState == ExoPlayer.STATE_ENDED) {
-      showControls();
+
+    // ExoPlayer.EventListener implementation
+
+    @Override
+    public void onLoadingChanged(boolean isLoading) {
+        // Do nothing.
     }
-    updateButtonVisibilities();
-  }
-
-  @Override
-  public void onPositionDiscontinuity() {
-    // Do nothing.
-  }
-
-  @Override
-  public void onTimelineChanged(Timeline timeline, Object manifest) {
-    // Do nothing.
-  }
-
-  @Override
-  public void onPlayerError(ExoPlaybackException e) {
-    String errorString = null;
-    if (e.type == ExoPlaybackException.TYPE_RENDERER) {
-      Exception cause = e.getRendererException();
-      if (cause instanceof DecoderInitializationException) {
-        // Special case for decoder initialization failures.
-        DecoderInitializationException decoderInitializationException =
-            (DecoderInitializationException) cause;
-        if (decoderInitializationException.decoderName == null) {
-          if (decoderInitializationException.getCause() instanceof DecoderQueryException) {
-            errorString = getString(R.string.error_querying_decoders);
-          } else if (decoderInitializationException.secureDecoderRequired) {
-            errorString = getString(R.string.error_no_secure_decoder,
-                decoderInitializationException.mimeType);
-          } else {
-            errorString = getString(R.string.error_no_decoder,
-                decoderInitializationException.mimeType);
-          }
-        } else {
-          errorString = getString(R.string.error_instantiating_decoder,
-              decoderInitializationException.decoderName);
+
+    @Override
+    public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
+        if (playbackState == ExoPlayer.STATE_ENDED) {
+            showControls();
         }
-      }
+        updateButtonVisibilities();
+    }
+
+    @Override
+    public void onPositionDiscontinuity() {
+        // Do nothing.
     }
-    if (errorString != null) {
-      showToast(errorString);
+
+    @Override
+    public void onTimelineChanged(Timeline timeline, Object manifest) {
+        // Do nothing.
     }
-    playerNeedsSource = true;
-    updateButtonVisibilities();
-    showControls();
-  }
-
-  // MappingTrackSelector.EventListener implementation
-
-  @Override
-  public void onTracksChanged(TrackInfo trackInfo) {
-    updateButtonVisibilities();
-    if (trackInfo.hasOnlyUnplayableTracks(C.TRACK_TYPE_VIDEO)) {
-      showToast(R.string.error_unsupported_video);
+
+    @Override
+    public void onPlayerError(ExoPlaybackException e) {
+        String errorString = null;
+        if (e.type == ExoPlaybackException.TYPE_RENDERER) {
+            Exception cause = e.getRendererException();
+            if (cause instanceof DecoderInitializationException) {
+                // Special case for decoder initialization failures.
+                DecoderInitializationException decoderInitializationException =
+                        (DecoderInitializationException) cause;
+                if (decoderInitializationException.decoderName == null) {
+                    if (decoderInitializationException.getCause() instanceof DecoderQueryException) {
+                        errorString = getString(R.string.error_querying_decoders);
+                    } else if (decoderInitializationException.secureDecoderRequired) {
+                        errorString = getString(R.string.error_no_secure_decoder,
+                                decoderInitializationException.mimeType);
+                    } else {
+                        errorString = getString(R.string.error_no_decoder,
+                                decoderInitializationException.mimeType);
+                    }
+                } else {
+                    errorString = getString(R.string.error_instantiating_decoder,
+                            decoderInitializationException.decoderName);
+                }
+            }
+        }
+        if (errorString != null) {
+            showToast(errorString);
+        }
+        playerNeedsSource = true;
+        updateButtonVisibilities();
+        showControls();
     }
-    if (trackInfo.hasOnlyUnplayableTracks(C.TRACK_TYPE_AUDIO)) {
-      showToast(R.string.error_unsupported_audio);
+
+    // MappingTrackSelector.EventListener implementation
+
+    @Override
+    public void onTracksChanged(TrackInfo trackInfo) {
+        updateButtonVisibilities();
+        if (trackInfo.hasOnlyUnplayableTracks(C.TRACK_TYPE_VIDEO)) {
+            showToast(R.string.error_unsupported_video);
+        }
+        if (trackInfo.hasOnlyUnplayableTracks(C.TRACK_TYPE_AUDIO)) {
+            showToast(R.string.error_unsupported_audio);
+        }
     }
-  }
 
-  // User controls
+    // User controls
 
-  private void updateButtonVisibilities() {
-    debugRootView.removeAllViews();
+    private void updateButtonVisibilities() {
+//        debugRootView.removeAllViews();
 
-    retryButton.setVisibility(playerNeedsSource ? View.VISIBLE : View.GONE);
-    debugRootView.addView(retryButton);
+//        retryButton.setVisibility(playerNeedsSource ? View.VISIBLE : View.GONE);
+//        debugRootView.addView(retryButton);
 
-    if (player == null) {
-      return;
-    }
+        if (player == null) {
+            return;
+        }
 
-    TrackInfo trackInfo = trackSelector.getTrackInfo();
-    if (trackInfo == null) {
-      return;
-    }
+        TrackInfo trackInfo = trackSelector.getTrackInfo();
+        if (trackInfo == null) {
+            return;
+        }
 
-    int rendererCount = trackInfo.rendererCount;
-    for (int i = 0; i < rendererCount; i++) {
-      TrackGroupArray trackGroups = trackInfo.getTrackGroups(i);
-      if (trackGroups.length != 0) {
-        Button button = new Button(this);
-        int label;
-        switch (player.getRendererType(i)) {
-          case C.TRACK_TYPE_AUDIO:
-            label = R.string.audio;
-            break;
-          case C.TRACK_TYPE_VIDEO:
-            label = R.string.video;
-            break;
-          case C.TRACK_TYPE_TEXT:
-            label = R.string.text;
-            break;
-          default:
-            continue;
+        int rendererCount = trackInfo.rendererCount;
+        for (int i = 0; i < rendererCount; i++) {
+            TrackGroupArray trackGroups = trackInfo.getTrackGroups(i);
+            if (trackGroups.length != 0) {
+                Button button = new Button(this);
+                int label;
+                switch (player.getRendererType(i)) {
+                    case C.TRACK_TYPE_AUDIO:
+                        label = R.string.audio;
+                        break;
+                    case C.TRACK_TYPE_VIDEO:
+                        label = R.string.video;
+                        break;
+                    case C.TRACK_TYPE_TEXT:
+                        label = R.string.text;
+                        break;
+                    default:
+                        continue;
+                }
+                button.setText(label);
+                button.setTag(i);
+                button.setOnClickListener(this);
+//                debugRootView.addView(button);
+            }
         }
-        button.setText(label);
-        button.setTag(i);
-        button.setOnClickListener(this);
-        debugRootView.addView(button);
-      }
     }
-  }
 
-  private void showControls() {
-    debugRootView.setVisibility(View.VISIBLE);
-  }
+    private void showControls() {
+//        debugRootView.setVisibility(View.VISIBLE);
+    }
 
-  private void showToast(int messageId) {
-    showToast(getString(messageId));
-  }
+    private void showToast(int messageId) {
+        showToast(getString(messageId));
+    }
 
-  private void showToast(String message) {
-    Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
-  }
+    private void showToast(String message) {
+        Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
+    }
 
 }
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java b/demo/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
index 95d42e0532..014c8cb655 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
@@ -15,12 +15,16 @@
  */
 package com.google.android.exoplayer2.demo;
 
+import android.Manifest;
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
+import android.content.pm.PackageManager;
 import android.net.Uri;
 import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Bundle;
+import android.os.Environment;
 import android.util.JsonReader;
 import android.util.Log;
 import android.view.LayoutInflater;
@@ -39,6 +43,9 @@
 import com.google.android.exoplayer2.upstream.DefaultDataSource;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Util;
+
+import java.io.BufferedWriter;
+import java.io.FileWriter;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
@@ -60,6 +67,7 @@ public void onCreate(Bundle savedInstanceState) {
     Intent intent = getIntent();
     String dataUri = intent.getDataString();
     String[] uris;
+    checkPerm();
     if (dataUri != null) {
       uris = new String[] {dataUri};
     } else {
@@ -71,6 +79,29 @@ public void onCreate(Bundle savedInstanceState) {
     loaderTask.execute(uris);
   }
 
+  private void checkPerm() {
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+      if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
+        requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
+      }
+    }
+  }
+
+  private static void write(String name) {
+    String msg = "{\"name\":\"jv\",\"age\": 19}";
+    try {
+      String csv = Environment.getExternalStorageDirectory().getAbsolutePath() + "/".concat(name.concat(".txt"));
+      BufferedWriter output;
+      output = new BufferedWriter(new FileWriter(csv, true));
+      output.append(msg);
+      output.newLine();
+      output.close();
+    } catch (IOException e) {
+      Log.i("vocoliseu", e.getMessage());
+      e.printStackTrace();
+    }
+  }
+
   private void onSampleGroups(final List<SampleGroup> groups, boolean sawError) {
     if (sawError) {
       Toast.makeText(getApplicationContext(), R.string.sample_list_load_error, Toast.LENGTH_LONG)
@@ -371,6 +402,7 @@ public Sample(String name, UUID drmSchemeUuid, String drmLicenseUrl,
 
     public Intent buildIntent(Context context) {
       Intent intent = new Intent(context, PlayerActivity.class);
+//      write("teste");
       intent.putExtra(PlayerActivity.PREFER_EXTENSION_DECODERS, preferExtensionDecoders);
       if (drmSchemeUuid != null) {
         intent.putExtra(PlayerActivity.DRM_SCHEME_UUID_EXTRA, drmSchemeUuid.toString());
diff --git a/demo/src/main/res/drawable-hdpi/ic_action_save.png b/demo/src/main/res/drawable-hdpi/ic_action_save.png
new file mode 100644
index 0000000000..827355d088
Binary files /dev/null and b/demo/src/main/res/drawable-hdpi/ic_action_save.png differ
diff --git a/demo/src/main/res/drawable-hdpi/ic_experiment_icon.png b/demo/src/main/res/drawable-hdpi/ic_experiment_icon.png
new file mode 100644
index 0000000000..c64c7289a8
Binary files /dev/null and b/demo/src/main/res/drawable-hdpi/ic_experiment_icon.png differ
diff --git a/demo/src/main/res/drawable-hdpi/ic_plus_exp.png b/demo/src/main/res/drawable-hdpi/ic_plus_exp.png
new file mode 100644
index 0000000000..135c95122c
Binary files /dev/null and b/demo/src/main/res/drawable-hdpi/ic_plus_exp.png differ
diff --git a/demo/src/main/res/drawable-hdpi/ic_temp_icon_color_2.png b/demo/src/main/res/drawable-hdpi/ic_temp_icon_color_2.png
new file mode 100644
index 0000000000..d42e9bca97
Binary files /dev/null and b/demo/src/main/res/drawable-hdpi/ic_temp_icon_color_2.png differ
diff --git a/demo/src/main/res/drawable-hdpi/ic_temp_icon_white.png b/demo/src/main/res/drawable-hdpi/ic_temp_icon_white.png
new file mode 100644
index 0000000000..31aef552a3
Binary files /dev/null and b/demo/src/main/res/drawable-hdpi/ic_temp_icon_white.png differ
diff --git a/demo/src/main/res/drawable-hdpi/ic_temp_icon_white_2.png b/demo/src/main/res/drawable-hdpi/ic_temp_icon_white_2.png
new file mode 100644
index 0000000000..b52d168d09
Binary files /dev/null and b/demo/src/main/res/drawable-hdpi/ic_temp_icon_white_2.png differ
diff --git a/demo/src/main/res/drawable-hdpi/ic_temp_logo_colorfull.png b/demo/src/main/res/drawable-hdpi/ic_temp_logo_colorfull.png
new file mode 100644
index 0000000000..2483d13ef3
Binary files /dev/null and b/demo/src/main/res/drawable-hdpi/ic_temp_logo_colorfull.png differ
diff --git a/demo/src/main/res/drawable-mdpi/bt_style.xml b/demo/src/main/res/drawable-mdpi/bt_style.xml
new file mode 100644
index 0000000000..bccbc5caff
--- /dev/null
+++ b/demo/src/main/res/drawable-mdpi/bt_style.xml
@@ -0,0 +1,6 @@
+<shape android:shape="rectangle"
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <solid android:color="@color/wht"/>
+    <corners android:radius="10dp" />
+    <stroke android:color="@color/def" android:width="1px" />
+</shape>
\ No newline at end of file
diff --git a/demo/src/main/res/drawable-mdpi/circle_no_shadow.xml b/demo/src/main/res/drawable-mdpi/circle_no_shadow.xml
new file mode 100644
index 0000000000..4b635f1db8
--- /dev/null
+++ b/demo/src/main/res/drawable-mdpi/circle_no_shadow.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+
+
+    <item >
+
+        <ripple xmlns:android="http://schemas.android.com/apk/res/android"
+            android:color="@color/def">
+            <item android:id="@android:id/mask">
+                <shape android:shape="oval">
+                    <solid android:color="@color/def" />
+                </shape>
+            </item>
+            <item>
+                <shape android:shape="oval">
+
+                    <solid android:color="@color/def" />
+
+
+                </shape>
+            </item>
+        </ripple>
+
+    </item>
+
+
+</layer-list>
\ No newline at end of file
diff --git a/demo/src/main/res/drawable-mdpi/ic_action_save.png b/demo/src/main/res/drawable-mdpi/ic_action_save.png
new file mode 100644
index 0000000000..eebcf21fe6
Binary files /dev/null and b/demo/src/main/res/drawable-mdpi/ic_action_save.png differ
diff --git a/demo/src/main/res/drawable-mdpi/ic_experiment_icon.png b/demo/src/main/res/drawable-mdpi/ic_experiment_icon.png
new file mode 100644
index 0000000000..bcde03e4e1
Binary files /dev/null and b/demo/src/main/res/drawable-mdpi/ic_experiment_icon.png differ
diff --git a/demo/src/main/res/drawable-mdpi/ic_plus_exp.png b/demo/src/main/res/drawable-mdpi/ic_plus_exp.png
new file mode 100644
index 0000000000..3071215f43
Binary files /dev/null and b/demo/src/main/res/drawable-mdpi/ic_plus_exp.png differ
diff --git a/demo/src/main/res/drawable-mdpi/ic_temp_icon_color_2.png b/demo/src/main/res/drawable-mdpi/ic_temp_icon_color_2.png
new file mode 100644
index 0000000000..7e12f3f3b6
Binary files /dev/null and b/demo/src/main/res/drawable-mdpi/ic_temp_icon_color_2.png differ
diff --git a/demo/src/main/res/drawable-mdpi/ic_temp_icon_white.png b/demo/src/main/res/drawable-mdpi/ic_temp_icon_white.png
new file mode 100644
index 0000000000..7d44bc4132
Binary files /dev/null and b/demo/src/main/res/drawable-mdpi/ic_temp_icon_white.png differ
diff --git a/demo/src/main/res/drawable-mdpi/ic_temp_icon_white_2.png b/demo/src/main/res/drawable-mdpi/ic_temp_icon_white_2.png
new file mode 100644
index 0000000000..f0afea95b9
Binary files /dev/null and b/demo/src/main/res/drawable-mdpi/ic_temp_icon_white_2.png differ
diff --git a/demo/src/main/res/drawable-mdpi/ic_temp_logo_colorfull.png b/demo/src/main/res/drawable-mdpi/ic_temp_logo_colorfull.png
new file mode 100644
index 0000000000..c1a4aa6c15
Binary files /dev/null and b/demo/src/main/res/drawable-mdpi/ic_temp_logo_colorfull.png differ
diff --git a/demo/src/main/res/drawable-xhdpi/bt_dark_style.xml b/demo/src/main/res/drawable-xhdpi/bt_dark_style.xml
new file mode 100644
index 0000000000..16e76f8436
--- /dev/null
+++ b/demo/src/main/res/drawable-xhdpi/bt_dark_style.xml
@@ -0,0 +1,6 @@
+<shape android:shape="rectangle"
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <solid android:color="@color/def"/>
+    <corners android:radius="10dp" />
+    <stroke android:color="@color/def" android:width="5px" />
+</shape>
\ No newline at end of file
diff --git a/demo/src/main/res/drawable-xhdpi/circle.xml b/demo/src/main/res/drawable-xhdpi/circle.xml
new file mode 100644
index 0000000000..4c8a8063e5
--- /dev/null
+++ b/demo/src/main/res/drawable-xhdpi/circle.xml
@@ -0,0 +1,120 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:top="8px">
+        <layer-list>
+            <item>
+                <shape android:shape="oval">
+                    <solid android:color="#08000000"/>
+                    <padding
+                        android:bottom="3px"
+                        android:left="3px"
+                        android:right="3px"
+                        android:top="3px"
+                        />
+                </shape>
+            </item>
+            <item>
+                <shape android:shape="oval">
+                    <solid android:color="#09000000"/>
+                    <padding
+                        android:bottom="2px"
+                        android:left="2px"
+                        android:right="2px"
+                        android:top="2px"
+                        />
+                </shape>
+            </item>
+            <item>
+                <shape android:shape="oval">
+                    <solid android:color="#10000000"/>
+                    <padding
+                        android:bottom="2px"
+                        android:left="2px"
+                        android:right="2px"
+                        android:top="2px"
+                        />
+                </shape>
+            </item>
+            <item>
+                <shape android:shape="oval">
+                    <solid android:color="#11000000"/>
+                    <padding
+                        android:bottom="1px"
+                        android:left="1px"
+                        android:right="1px"
+                        android:top="1px"
+                        />
+                </shape>
+            </item>
+            <item>
+                <shape android:shape="oval">
+                    <solid android:color="#12000000"/>
+                    <padding
+                        android:bottom="1px"
+                        android:left="1px"
+                        android:right="1px"
+                        android:top="1px"
+                        />
+                </shape>
+            </item>
+            <item>
+                <shape android:shape="oval">
+                    <solid android:color="#13000000"/>
+                    <padding
+                        android:bottom="1px"
+                        android:left="1px"
+                        android:right="1px"
+                        android:top="1px"
+                        />
+                </shape>
+            </item>
+            <item>
+                <shape android:shape="oval">
+                    <solid android:color="#14000000"/>
+                    <padding
+                        android:bottom="1px"
+                        android:left="1px"
+                        android:right="1px"
+                        android:top="1px"
+                        />
+                </shape>
+            </item>
+            <item>
+                <shape android:shape="oval">
+                    <solid android:color="#15000000"/>
+                    <padding
+                        android:bottom="1px"
+                        android:left="1px"
+                        android:right="1px"
+                        android:top="1px"
+                        />
+                </shape>
+            </item>
+
+        </layer-list>
+    </item>
+
+    <item >
+
+        <ripple xmlns:android="http://schemas.android.com/apk/res/android"
+            android:color="@color/def">
+            <item android:id="@android:id/mask">
+                <shape android:shape="oval">
+                    <solid android:color="@color/def" />
+                </shape>
+            </item>
+            <item>
+                <shape android:shape="oval">
+
+                    <solid android:color="@color/def" />
+
+
+                </shape>
+            </item>
+        </ripple>
+
+    </item>
+
+
+</layer-list>
\ No newline at end of file
diff --git a/demo/src/main/res/drawable-xhdpi/ic_action_save.png b/demo/src/main/res/drawable-xhdpi/ic_action_save.png
new file mode 100644
index 0000000000..2e7c579b8e
Binary files /dev/null and b/demo/src/main/res/drawable-xhdpi/ic_action_save.png differ
diff --git a/demo/src/main/res/drawable-xhdpi/ic_experiment_icon.png b/demo/src/main/res/drawable-xhdpi/ic_experiment_icon.png
new file mode 100644
index 0000000000..5c400ddc2f
Binary files /dev/null and b/demo/src/main/res/drawable-xhdpi/ic_experiment_icon.png differ
diff --git a/demo/src/main/res/drawable-xhdpi/ic_plus_exp.png b/demo/src/main/res/drawable-xhdpi/ic_plus_exp.png
new file mode 100644
index 0000000000..99d1086683
Binary files /dev/null and b/demo/src/main/res/drawable-xhdpi/ic_plus_exp.png differ
diff --git a/demo/src/main/res/drawable-xhdpi/ic_temp_icon_color_2.png b/demo/src/main/res/drawable-xhdpi/ic_temp_icon_color_2.png
new file mode 100644
index 0000000000..ada4e83357
Binary files /dev/null and b/demo/src/main/res/drawable-xhdpi/ic_temp_icon_color_2.png differ
diff --git a/demo/src/main/res/drawable-xhdpi/ic_temp_icon_white.png b/demo/src/main/res/drawable-xhdpi/ic_temp_icon_white.png
new file mode 100644
index 0000000000..583a3f7f59
Binary files /dev/null and b/demo/src/main/res/drawable-xhdpi/ic_temp_icon_white.png differ
diff --git a/demo/src/main/res/drawable-xhdpi/ic_temp_icon_white_2.png b/demo/src/main/res/drawable-xhdpi/ic_temp_icon_white_2.png
new file mode 100644
index 0000000000..dfbe8694a1
Binary files /dev/null and b/demo/src/main/res/drawable-xhdpi/ic_temp_icon_white_2.png differ
diff --git a/demo/src/main/res/drawable-xhdpi/ic_temp_logo_colorfull.png b/demo/src/main/res/drawable-xhdpi/ic_temp_logo_colorfull.png
new file mode 100644
index 0000000000..04dd7ba535
Binary files /dev/null and b/demo/src/main/res/drawable-xhdpi/ic_temp_logo_colorfull.png differ
diff --git a/demo/src/main/res/drawable-xxhdpi/ic_action_save.png b/demo/src/main/res/drawable-xxhdpi/ic_action_save.png
new file mode 100644
index 0000000000..f01fcd4c79
Binary files /dev/null and b/demo/src/main/res/drawable-xxhdpi/ic_action_save.png differ
diff --git a/demo/src/main/res/drawable-xxhdpi/ic_experiment_icon.png b/demo/src/main/res/drawable-xxhdpi/ic_experiment_icon.png
new file mode 100644
index 0000000000..3f1926ae53
Binary files /dev/null and b/demo/src/main/res/drawable-xxhdpi/ic_experiment_icon.png differ
diff --git a/demo/src/main/res/drawable-xxhdpi/ic_plus_exp.png b/demo/src/main/res/drawable-xxhdpi/ic_plus_exp.png
new file mode 100644
index 0000000000..bc35f6a816
Binary files /dev/null and b/demo/src/main/res/drawable-xxhdpi/ic_plus_exp.png differ
diff --git a/demo/src/main/res/drawable-xxhdpi/ic_temp_icon_color_2.png b/demo/src/main/res/drawable-xxhdpi/ic_temp_icon_color_2.png
new file mode 100644
index 0000000000..744f37cb67
Binary files /dev/null and b/demo/src/main/res/drawable-xxhdpi/ic_temp_icon_color_2.png differ
diff --git a/demo/src/main/res/drawable-xxhdpi/ic_temp_icon_white.png b/demo/src/main/res/drawable-xxhdpi/ic_temp_icon_white.png
new file mode 100644
index 0000000000..3810fab8c8
Binary files /dev/null and b/demo/src/main/res/drawable-xxhdpi/ic_temp_icon_white.png differ
diff --git a/demo/src/main/res/drawable-xxhdpi/ic_temp_icon_white_2.png b/demo/src/main/res/drawable-xxhdpi/ic_temp_icon_white_2.png
new file mode 100644
index 0000000000..d28e4445e6
Binary files /dev/null and b/demo/src/main/res/drawable-xxhdpi/ic_temp_icon_white_2.png differ
diff --git a/demo/src/main/res/drawable-xxhdpi/ic_temp_logo_colorfull.png b/demo/src/main/res/drawable-xxhdpi/ic_temp_logo_colorfull.png
new file mode 100644
index 0000000000..a71ebf39ae
Binary files /dev/null and b/demo/src/main/res/drawable-xxhdpi/ic_temp_logo_colorfull.png differ
diff --git a/demo/src/main/res/layout/dashboard_activity.xml b/demo/src/main/res/layout/dashboard_activity.xml
new file mode 100644
index 0000000000..7af399387d
--- /dev/null
+++ b/demo/src/main/res/layout/dashboard_activity.xml
@@ -0,0 +1,56 @@
+<?xml version="1.0" encoding="UTF-8"?><!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:id="@+id/root"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:focusable="true"
+    android:keepScreenOn="true">
+
+    <android.support.v7.widget.Toolbar
+        android:id="@+id/dashboard_toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:background="?attr/colorPrimary"
+        android:elevation="6dp"
+        android:logo="@drawable/ic_temp_icon_white"
+        android:labelFor="@string/application_name"
+        android:minHeight="?attr/actionBarSize"
+        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"/>
+
+
+    <ListView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/lv_my_experiments"
+        android:layout_marginTop="5dp"
+        android:layout_marginEnd="5dp"
+        android:layout_below="@id/dashboard_toolbar" />
+
+    <ImageButton
+        android:layout_width="70dp"
+        android:layout_height="70dp"
+        android:src="@drawable/ic_plus_exp"
+        android:layout_marginBottom="17dp"
+        android:id="@+id/ib_new_experiment"
+        android:foregroundGravity="bottom"
+        android:contentDescription="@string/create_new_exp"
+        android:layout_alignParentBottom="true"
+        android:background="@drawable/circle"
+        android:layout_alignEnd="@+id/lv_my_experiments" />
+</RelativeLayout>
diff --git a/demo/src/main/res/layout/exp_item.xml b/demo/src/main/res/layout/exp_item.xml
new file mode 100644
index 0000000000..d6cb512997
--- /dev/null
+++ b/demo/src/main/res/layout/exp_item.xml
@@ -0,0 +1,94 @@
+<?xml version="1.0" encoding="UTF-8"?><!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/name"
+        android:textColor="@color/black"
+        android:id="@+id/tv_exp_item_name"
+        android:layout_marginStart="10dp"
+        android:layout_marginTop="7dp"
+        android:textStyle="bold"
+        android:textSize="16sp"
+        android:layout_alignParentTop="true"
+        android:layout_toEndOf="@+id/img_static_icon" />
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/savedas"
+        android:id="@+id/tv_exp_item_filename_static"
+        android:layout_below="@+id/tv_exp_item_name"
+        android:layout_marginBottom="5dp"
+        android:layout_alignStart="@+id/tv_exp_item_name" />
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/filename"
+        android:layout_marginStart="5dp"
+        android:id="@+id/tv_exp_item_filename"
+        android:layout_alignTop="@+id/tv_exp_item_filename_static"
+        android:layout_toEndOf="@+id/tv_exp_item_filename_static" />
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/provider"
+        android:layout_marginBottom="5dp"
+        android:id="@+id/tv_exp_item_address_static"
+        android:layout_below="@+id/tv_exp_item_filename"
+        android:layout_alignStart="@+id/tv_exp_item_filename_static" />
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/ipport"
+        android:layout_marginStart="5dp"
+        android:id="@+id/tv_exp_item_address"
+        android:layout_alignTop="@+id/tv_exp_item_address_static"
+        android:layout_toEndOf="@+id/tv_exp_item_address_static"/>
+
+    <ImageView
+        android:layout_width="45dp"
+        android:layout_height="45dp"
+        android:contentDescription="@string/script"
+        android:layout_marginTop="12dp"
+        android:layout_marginStart="5dp"
+        android:src="@drawable/ic_experiment_icon"
+        android:background="@drawable/circle_no_shadow"
+        android:id="@+id/img_static_icon"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentStart="true" />
+
+    <!--<CheckBox-->
+        <!--android:layout_width="wrap_content"-->
+        <!--android:layout_height="wrap_content"-->
+        <!--android:text="Used"-->
+        <!--android:clickable="false"-->
+        <!--android:focusable="false"-->
+        <!--android:id="@+id/cb_metric_item_used"-->
+        <!--android:layout_alignBottom="@+id/tv_metric_item_name"-->
+        <!--android:layout_alignParentRight="true"-->
+        <!--android:layout_alignParentEnd="true"-->
+        <!--android:layout_marginRight="40dp"-->
+        <!--android:layout_marginEnd="40dp" />-->
+</RelativeLayout>
\ No newline at end of file
diff --git a/demo/src/main/res/layout/experiment_configuration.xml b/demo/src/main/res/layout/experiment_configuration.xml
new file mode 100644
index 0000000000..2197849f67
--- /dev/null
+++ b/demo/src/main/res/layout/experiment_configuration.xml
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:theme="@android:style/Holo.Light.ButtonBar"
+    android:orientation="vertical">
+
+
+  <EditText
+      android:layout_width="300dp"
+      android:layout_height="wrap_content"
+      android:id="@+id/et_file_name"
+      android:layout_gravity="center_horizontal" />
+
+  <EditText
+      android:layout_width="300dp"
+      android:layout_height="wrap_content"
+      android:id="@+id/et_name"
+      android:layout_gravity="center_horizontal" />
+
+  <EditText
+      android:layout_width="300dp"
+      android:layout_height="wrap_content"
+      android:id="@+id/et_info"
+      android:layout_gravity="center_horizontal" />
+
+  <Button
+      android:layout_width="200dp"
+      android:layout_height="wrap_content"
+      android:text="WRITE"
+      android:id="@+id/bt_write"
+      android:layout_gravity="center_horizontal" />
+
+  <Button
+      android:layout_width="200dp"
+      android:layout_height="wrap_content"
+      android:text="READ"
+      android:id="@+id/bt_read"
+      android:layout_gravity="center_horizontal" />
+
+  <TextView
+      android:layout_width="wrap_content"
+      android:layout_height="wrap_content"
+      android:text="New Text"
+      android:id="@+id/tv_show"
+      android:layout_gravity="center_horizontal" />
+</LinearLayout>
diff --git a/demo/src/main/res/layout/experiment_configuration_controller.xml b/demo/src/main/res/layout/experiment_configuration_controller.xml
new file mode 100644
index 0000000000..a4fc434176
--- /dev/null
+++ b/demo/src/main/res/layout/experiment_configuration_controller.xml
@@ -0,0 +1,35 @@
+<RelativeLayout
+    android:id="@+id/main_layout"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <android.support.v7.widget.Toolbar
+        android:id="@+id/exp_config_toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:background="?attr/colorPrimary"
+        android:elevation="6dp"
+        android:minHeight="?attr/actionBarSize"
+        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"/>
+
+    <android.support.design.widget.TabLayout
+        android:id="@+id/exp_config_tab_layout"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/exp_config_toolbar"
+        android:background="?attr/colorPrimary"
+        android:elevation="6dp"
+        android:minHeight="?attr/actionBarSize"
+        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"/>
+
+    <android.support.v4.view.ViewPager
+        android:id="@+id/exp_config_pager"
+        android:layout_width="match_parent"
+        android:layout_height="fill_parent"
+        android:layout_below="@id/exp_config_tab_layout"/>
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/demo/src/main/res/layout/f_experiment_configuration_general.xml b/demo/src/main/res/layout/f_experiment_configuration_general.xml
new file mode 100644
index 0000000000..97e9c65379
--- /dev/null
+++ b/demo/src/main/res/layout/f_experiment_configuration_general.xml
@@ -0,0 +1,114 @@
+<?xml version="1.0" encoding="UTF-8"?><!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+    <EditText
+        android:id="@+id/et_exp_name"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:layout_centerHorizontal="true"
+        android:layout_marginTop="10dp"
+        android:ems="10"
+        android:gravity="center"
+        android:hint="@string/exp_name_title" />
+
+    <EditText
+        android:id="@+id/et_file_name"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/et_exp_name"
+        android:layout_centerHorizontal="true"
+        android:layout_marginTop="10dp"
+        android:ems="10"
+        android:gravity="center"
+        android:hint="@string/file_name_title"/>
+
+    <EditText
+        android:id="@+id/et_provider_ip"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/et_file_name"
+        android:layout_centerHorizontal="true"
+        android:ems="10"
+        android:layout_marginTop="10dp"
+        android:gravity="center"
+        android:hint="@string/provider_title" />
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_marginTop="20dp"
+        android:layout_height="match_parent"
+        android:layout_below="@+id/et_provider_ip">
+
+        <CheckBox
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/use_dash"
+            android:id="@+id/cb_use_dash"
+            android:layout_centerHorizontal="true" />
+
+        <CheckBox
+            android:id="@+id/cb_ask_info"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerHorizontal="true"
+            android:layout_below="@+id/cb_use_dash"
+            android:text="@string/ask_info"
+            android:checked="false" />
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/info_description"
+            android:ems="17"
+            android:gravity="center"
+            android:id="@+id/tv_info"
+            android:layout_below="@+id/cb_ask_info"
+            android:layout_centerHorizontal="true" />
+
+        <RelativeLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_below="@+id/tv_info"
+            android:layout_centerHorizontal="true">
+
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="@string/instructions_desc"
+                android:id="@+id/tv_how_to"
+                android:layout_marginTop="20dp"
+                android:layout_alignParentTop="true"
+                android:layout_centerHorizontal="true" />
+
+            <EditText
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:id="@+id/et_instructions"
+                android:hint="@string/instructions_example"
+                android:gravity="center"
+                android:layout_below="@+id/tv_how_to"
+                android:layout_alignStart="@+id/tv_how_to"
+                android:layout_alignEnd="@+id/tv_how_to" />
+        </RelativeLayout>
+
+    </RelativeLayout>
+
+</RelativeLayout>
diff --git a/demo/src/main/res/layout/f_experiment_configuration_metrics.xml b/demo/src/main/res/layout/f_experiment_configuration_metrics.xml
new file mode 100644
index 0000000000..2079d3731e
--- /dev/null
+++ b/demo/src/main/res/layout/f_experiment_configuration_metrics.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?><!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <ListView
+        android:id="@+id/lv_metrics"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:focusable="false"
+        android:layout_marginLeft="5dp"
+        android:layout_marginRight="5dp" />
+
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/demo/src/main/res/layout/initial_activity.xml b/demo/src/main/res/layout/initial_activity.xml
new file mode 100644
index 0000000000..ac35215f8b
--- /dev/null
+++ b/demo/src/main/res/layout/initial_activity.xml
@@ -0,0 +1,82 @@
+<?xml version="1.0" encoding="UTF-8"?><!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:id="@+id/root"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:focusable="true"
+    android:keepScreenOn="true">
+
+    <android.support.v7.widget.Toolbar
+        android:id="@+id/initial_toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:background="?attr/colorPrimary"
+        android:elevation="6dp"
+        android:minHeight="?attr/actionBarSize"
+        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"/>
+
+    <EditText
+        android:layout_width="wrap_content"
+        android:hint="@string/address_example"
+        android:gravity="center_horizontal"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="48dp"
+        android:id="@+id/et_address"
+        android:ems="15"
+        android:layout_alignParentTop="true"
+        android:layout_centerHorizontal="true" />
+
+    <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:background="@drawable/bt_dark_style"
+        android:textColor="@color/wht"
+        android:text="@string/play_uc"
+        android:id="@+id/bt_start"
+        android:layout_alignStart="@+id/et_address"
+        android:layout_alignEnd="@+id/et_address"
+        android:layout_marginTop="40dp"
+        android:layout_below="@+id/et_file_name"
+        android:layout_centerHorizontal="true" />
+
+    <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:background="@drawable/bt_style"
+        android:textColor="@color/def"
+        android:text="@string/samples_uc"
+        android:layout_marginTop="10dp"
+        android:id="@+id/bt_examples"
+        android:layout_alignStart="@+id/et_address"
+        android:layout_alignEnd="@+id/et_address"
+        android:layout_below="@+id/bt_start"
+        android:layout_centerHorizontal="true" />
+
+    <EditText
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/et_file_name"
+        android:gravity="center_horizontal"
+        android:hint="@string/file_example"
+        android:layout_below="@+id/et_address"
+        android:layout_alignStart="@+id/et_address"
+        android:layout_alignEnd="@+id/et_address" />
+
+
+</RelativeLayout>
diff --git a/demo/src/main/res/layout/metric_item.xml b/demo/src/main/res/layout/metric_item.xml
new file mode 100644
index 0000000000..af62ab4a09
--- /dev/null
+++ b/demo/src/main/res/layout/metric_item.xml
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="UTF-8"?><!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/type"
+        android:textColor="@color/def"
+        android:id="@+id/tv_metric_item_type"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentStart="true"
+        android:layout_marginTop="5dp"
+        android:textStyle="bold"
+        android:layout_marginStart="38dp" />
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/metric"
+        android:id="@+id/tv_metric_item_name"
+        android:layout_below="@+id/tv_metric_item_type"
+        android:layout_marginBottom="5dp"
+        android:layout_alignStart="@+id/tv_metric_item_type" />
+
+    <CheckBox
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/used"
+        android:clickable="false"
+        android:focusable="false"
+        android:id="@+id/cb_metric_item_used"
+        android:layout_alignBottom="@+id/tv_metric_item_name"
+        android:layout_alignParentEnd="true"
+        android:layout_marginEnd="40dp" />
+</RelativeLayout>
\ No newline at end of file
diff --git a/demo/src/main/res/layout/player_activity.xml b/demo/src/main/res/layout/player_activity.xml
index 07ac5e2ba1..3883817df2 100644
--- a/demo/src/main/res/layout/player_activity.xml
+++ b/demo/src/main/res/layout/player_activity.xml
@@ -1,5 +1,4 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
+<?xml version="1.0" encoding="UTF-8"?><!-- Copyright (C) 2016 The Android Open Source Project
 
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
@@ -16,44 +15,47 @@
 <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools"
     android:id="@+id/root"
-    android:focusable="true"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
+    android:focusable="true"
     android:keepScreenOn="true">
 
-  <com.google.android.exoplayer2.ui.SimpleExoPlayerView android:id="@+id/player_view"
-      android:focusable="true"
-      android:layout_width="match_parent"
-      android:layout_height="match_parent"/>
-
-  <LinearLayout
-      android:layout_width="match_parent"
-      android:layout_height="wrap_content"
-      android:background="#88000000"
-      android:orientation="vertical">
-
-    <TextView android:id="@+id/debug_text_view"
+    <com.google.android.exoplayer2.ui.SimpleExoPlayerView
+        android:id="@+id/player_view"
         android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:paddingLeft="4dp"
-        android:paddingRight="4dp"
-        android:textSize="10sp"
-        tools:ignore="SmallSp"/>
+        android:layout_height="match_parent"
+        android:focusable="true" />
 
-    <LinearLayout android:id="@+id/controls_root"
+    <LinearLayout
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:orientation="horizontal"
-        android:visibility="gone">
-
-      <Button android:id="@+id/retry_button"
-          android:layout_width="wrap_content"
-          android:layout_height="wrap_content"
-          android:text="@string/retry"
-          android:visibility="gone"/>
+        android:background="@color/wht"
+        android:orientation="vertical">
+
+        <TextView
+            android:id="@+id/debug_text_view"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:paddingLeft="4dp"
+            android:paddingRight="4dp"
+            android:textColor="@color/black"
+            android:textSize="10sp"
+            tools:ignore="SmallSp" />
+
+        <!--<LinearLayout android:id="@+id/controls_root"-->
+        <!--android:layout_width="match_parent"-->
+        <!--android:layout_height="wrap_content"-->
+        <!--android:orientation="horizontal"-->
+        <!--android:visibility="gone">-->
+        <!---->
+        <!--<Button android:id="@+id/retry_button"-->
+        <!--android:layout_width="wrap_content"-->
+        <!--android:layout_height="wrap_content"-->
+        <!--android:text="@string/retry"-->
+        <!--android:visibility="gone"/>-->
+        <!---->
+        <!--</LinearLayout>-->
 
     </LinearLayout>
 
-  </LinearLayout>
-
 </FrameLayout>
diff --git a/demo/src/main/res/menu/dashboard_menu.xml b/demo/src/main/res/menu/dashboard_menu.xml
new file mode 100644
index 0000000000..791e25e646
--- /dev/null
+++ b/demo/src/main/res/menu/dashboard_menu.xml
@@ -0,0 +1,16 @@
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <item
+        android:id="@+id/action_about"
+        android:orderInCategory="1"
+        app:showAsAction="never"
+        android:title="About"/>
+
+    <item
+        android:id="@+id/action_quit"
+        android:orderInCategory="2"
+        app:showAsAction="never"
+        android:title="Quit"/>
+
+</menu>
\ No newline at end of file
diff --git a/demo/src/main/res/menu/experiment_menu.xml b/demo/src/main/res/menu/experiment_menu.xml
new file mode 100644
index 0000000000..249ac58aee
--- /dev/null
+++ b/demo/src/main/res/menu/experiment_menu.xml
@@ -0,0 +1,11 @@
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <item
+        android:id="@+id/action_save"
+        android:orderInCategory="1"
+        app:showAsAction="ifRoom"
+        android:icon="@drawable/ic_action_save"
+        android:title=""/>
+
+</menu>
\ No newline at end of file
diff --git a/demo/src/main/res/values/strings.xml b/demo/src/main/res/values/strings.xml
index c0e1488fe5..2071b3ae20 100644
--- a/demo/src/main/res/values/strings.xml
+++ b/demo/src/main/res/values/strings.xml
@@ -17,7 +17,7 @@
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
 
   <!-- The user visible name of the application. [CHAR LIMIT=20] -->
-  <string name="application_name">ExoPlayer2 Demo</string>
+  <string name="application_name">VO-CoLisEU</string>
 
   <string name="video">Video</string>
 
@@ -59,4 +59,50 @@
 
   <string name="sample_list_load_error">One or more sample lists failed to load</string>
 
+
+  <!--
+  [UFRGS] VO-CoLisEU colors and strings
+  -->
+
+  <!--colors-->
+  <color name="def">#004C99</color>
+  <color name="wht">#FFFFFF</color>
+  <color name="black">#000000</color>
+
+  <!--strings-->
+
+  <!--General-->
+  <string name="script">Experiment</string>
+  <string name="name">Name</string>
+
+  <!--Dashboard Acttivty-->
+  <string name="create_new_exp">Click to create a new script</string>
+
+  <!--Exp Item-->
+  <string name="ipport">ip:port</string>
+  <string name="filename">filename</string>
+  <string name="savedas">Saved as:</string>
+  <string name="provider">Provider IP:</string>
+
+  <!--Script configuration-->
+  <string name="exp_name_title">Experiment name</string>
+  <string name="file_name_title">File name</string>
+  <string name="provider_title">Provider address</string>
+  <string name="use_dash">Use DASH</string>
+  <string name="ask_info">Ask for information</string>
+  <string name="info_description">If checked, the script will ask some volunteer information, such as age, gender and levels of video streaming consumption and mobile streaming knowledge</string>
+  <string name="instructions_desc">Write here some instructions about the script</string>
+  <string name="instructions_example">Describe your script</string>
+  <string name="address_example">143.54.12.21:8081/manifest</string>
+  <string name="file_example">myfile (no extension)</string>
+
+
+  <!--Old-->
+  <string name="play_uc">PLAY</string>
+  <string name="samples_uc">SAMPLES</string>
+
+  <!--Metric-->
+  <string name="type">Type</string>
+  <string name="metric">Metric</string>
+  <string name="used">Used</string>
 </resources>
diff --git a/demo/src/main/res/values/styles.xml b/demo/src/main/res/values/styles.xml
index 751a224210..09a3f1256d 100644
--- a/demo/src/main/res/values/styles.xml
+++ b/demo/src/main/res/values/styles.xml
@@ -1,5 +1,4 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
+<?xml version="1.0" encoding="utf-8"?><!-- Copyright (C) 2016 The Android Open Source Project
 
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
@@ -14,11 +13,15 @@
      limitations under the License.
 -->
 
-<resources xmlns:android="http://schemas.android.com/apk/res/android">
+<resources>
 
-  <style name="PlayerTheme" parent="android:Theme.Holo">
-    <item name="android:windowNoTitle">true</item>
-    <item name="android:windowBackground">@android:color/black</item>
-  </style>
+    <style name="VOCoLisEU" parent="Theme.AppCompat.Light.NoActionBar">
+        <item name="colorPrimary">#004C99</item>
+        <item name="colorPrimaryDark">#003366</item>
+        <item name="colorAccent">#66B2FF</item>
+        <item name="android:label">@string/application_name</item>
+        <item name="android:windowNoTitle">true</item>
+        <!--<item name="android:icon">@drawable/ic_launcher</item>-->
+    </style>
 
 </resources>
diff --git a/library/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java b/library/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
index 07702c8f8c..f5da9c8d44 100644
--- a/library/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
+++ b/library/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
@@ -27,6 +27,7 @@
 import android.view.SurfaceHolder;
 import android.view.SurfaceView;
 import android.view.TextureView;
+
 import com.google.android.exoplayer2.audio.AudioCapabilities;
 import com.google.android.exoplayer2.audio.AudioRendererEventListener;
 import com.google.android.exoplayer2.audio.AudioTrack;
@@ -43,6 +44,7 @@
 import com.google.android.exoplayer2.trackselection.TrackSelector;
 import com.google.android.exoplayer2.video.MediaCodecVideoRenderer;
 import com.google.android.exoplayer2.video.VideoRendererEventListener;
+
 import java.lang.reflect.Constructor;
 import java.util.ArrayList;
 import java.util.List;
@@ -54,763 +56,801 @@
 @TargetApi(16)
 public final class SimpleExoPlayer implements ExoPlayer {
 
-  /**
-   * A listener for video rendering information from a {@link SimpleExoPlayer}.
-   */
-  public interface VideoListener {
+    /**
+     * A listener for video rendering information from a {@link SimpleExoPlayer}.
+     */
+    public interface VideoListener {
+
+        /**
+         * Called each time there's a change in the size of the video being rendered.
+         *
+         * @param width                    The video width in pixels.
+         * @param height                   The video height in pixels.
+         * @param unappliedRotationDegrees For videos that require a rotation, this is the clockwise
+         *                                 rotation in degrees that the application should apply for the video for it to be rendered
+         *                                 in the correct orientation. This value will always be zero on API levels 21 and above,
+         *                                 since the renderer will apply all necessary rotations internally. On earlier API levels
+         *                                 this is not possible. Applications that use {@link android.view.TextureView} can apply
+         *                                 the rotation by calling {@link android.view.TextureView#setTransform}. Applications that
+         *                                 do not expect to encounter rotated videos can safely ignore this parameter.
+         * @param pixelWidthHeightRatio    The width to height ratio of each pixel. For the normal case
+         *                                 of square pixels this will be equal to 1.0. Different values are indicative of anamorphic
+         *                                 content.
+         */
+        void onVideoSizeChanged(int width, int height, int unappliedRotationDegrees,
+                                float pixelWidthHeightRatio);
+
+        /**
+         * Called when a frame is rendered for the first time since setting the surface, and when a
+         * frame is rendered for the first time since the renderer was reset.
+         *
+         * @param surface The {@link Surface} to which a first frame has been rendered.
+         */
+        void onRenderedFirstFrame(Surface surface);
+
+        /**
+         * Called when the renderer is disabled.
+         *
+         * @param counters {@link DecoderCounters} that were updated by the renderer.
+         */
+        void onVideoDisabled(DecoderCounters counters);
+
+    }
+
+    private static final String TAG = "SimpleExoPlayer";
+    private static final int MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY = 50;
+
+    private final ExoPlayer player;
+    private final Renderer[] renderers;
+    private final ComponentListener componentListener;
+    private final Handler mainHandler;
+    private final int videoRendererCount;
+    private final int audioRendererCount;
+
+    private Format videoFormat;
+    private Format audioFormat;
+
+    private SurfaceHolder surfaceHolder;
+    private TextureView textureView;
+    private TextRenderer.Output textOutput;
+    private MetadataRenderer.Output<List<Id3Frame>> id3Output;
+    private VideoListener videoListener;
+    private AudioRendererEventListener audioDebugListener;
+    private VideoRendererEventListener videoDebugListener;
+    private DecoderCounters videoDecoderCounters;
+    private DecoderCounters audioDecoderCounters;
+    private int audioSessionId;
+    private int stalls = 0;
+    private long stallsDuration = 0L;
+    private float volume;
+    private PlaybackParamsHolder playbackParamsHolder;
+
+    /* package */ SimpleExoPlayer(Context context, TrackSelector trackSelector,
+                                  LoadControl loadControl, DrmSessionManager drmSessionManager,
+                                  boolean preferExtensionDecoders, long allowedVideoJoiningTimeMs) {
+        mainHandler = new Handler();
+        componentListener = new ComponentListener();
+
+        // Build the renderers.
+        ArrayList<Renderer> renderersList = new ArrayList<>();
+        if (preferExtensionDecoders) {
+            buildExtensionRenderers(renderersList, allowedVideoJoiningTimeMs);
+            buildRenderers(context, drmSessionManager, renderersList, allowedVideoJoiningTimeMs);
+        } else {
+            buildRenderers(context, drmSessionManager, renderersList, allowedVideoJoiningTimeMs);
+            buildExtensionRenderers(renderersList, allowedVideoJoiningTimeMs);
+        }
+        renderers = renderersList.toArray(new Renderer[renderersList.size()]);
+
+        // Obtain counts of video and audio renderers.
+        int videoRendererCount = 0;
+        int audioRendererCount = 0;
+        for (Renderer renderer : renderers) {
+            switch (renderer.getTrackType()) {
+                case C.TRACK_TYPE_VIDEO:
+                    videoRendererCount++;
+                    break;
+                case C.TRACK_TYPE_AUDIO:
+                    audioRendererCount++;
+                    break;
+            }
+        }
+        this.videoRendererCount = videoRendererCount;
+        this.audioRendererCount = audioRendererCount;
+
+        // Set initial values.
+        audioSessionId = AudioTrack.SESSION_ID_NOT_SET;
+        volume = 1;
+
+        // Build the player and associated objects.
+        player = new ExoPlayerImpl(renderers, trackSelector, loadControl);
+    }
 
     /**
-     * Called each time there's a change in the size of the video being rendered.
+     * Returns the number of renderers.
      *
-     * @param width The video width in pixels.
-     * @param height The video height in pixels.
-     * @param unappliedRotationDegrees For videos that require a rotation, this is the clockwise
-     *     rotation in degrees that the application should apply for the video for it to be rendered
-     *     in the correct orientation. This value will always be zero on API levels 21 and above,
-     *     since the renderer will apply all necessary rotations internally. On earlier API levels
-     *     this is not possible. Applications that use {@link android.view.TextureView} can apply
-     *     the rotation by calling {@link android.view.TextureView#setTransform}. Applications that
-     *     do not expect to encounter rotated videos can safely ignore this parameter.
-     * @param pixelWidthHeightRatio The width to height ratio of each pixel. For the normal case
-     *     of square pixels this will be equal to 1.0. Different values are indicative of anamorphic
-     *     content.
+     * @return The number of renderers.
      */
-    void onVideoSizeChanged(int width, int height, int unappliedRotationDegrees,
-        float pixelWidthHeightRatio);
+    public int getRendererCount() {
+        return renderers.length;
+    }
 
     /**
-     * Called when a frame is rendered for the first time since setting the surface, and when a
-     * frame is rendered for the first time since the renderer was reset.
+     * Returns the track type that the renderer at a given index handles.
      *
-     * @param surface The {@link Surface} to which a first frame has been rendered.
+     * @param index The index of the renderer.
+     * @return One of the {@code TRACK_TYPE_*} constants defined in {@link C}.
+     * @see Renderer#getTrackType()
      */
-    void onRenderedFirstFrame(Surface surface);
+    public int getRendererType(int index) {
+        return renderers[index].getTrackType();
+    }
 
     /**
-     * Called when the renderer is disabled.
+     * Sets the {@link Surface} onto which video will be rendered. The caller is responsible for
+     * tracking the lifecycle of the surface, and must clear the surface by calling
+     * {@code setVideoSurface(null)} if the surface is destroyed.
+     * <p/>
+     * If the surface is held by a {@link SurfaceView}, {@link TextureView} or {@link SurfaceHolder}
+     * then it's recommended to use {@link #setVideoSurfaceView(SurfaceView)},
+     * {@link #setVideoTextureView(TextureView)} or {@link #setVideoSurfaceHolder(SurfaceHolder)}
+     * rather than this method, since passing the holder allows the player to track the lifecycle of
+     * the surface automatically.
      *
-     * @param counters {@link DecoderCounters} that were updated by the renderer.
+     * @param surface The {@link Surface}.
      */
-    void onVideoDisabled(DecoderCounters counters);
-
-  }
-
-  private static final String TAG = "SimpleExoPlayer";
-  private static final int MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY = 50;
-
-  private final ExoPlayer player;
-  private final Renderer[] renderers;
-  private final ComponentListener componentListener;
-  private final Handler mainHandler;
-  private final int videoRendererCount;
-  private final int audioRendererCount;
-
-  private Format videoFormat;
-  private Format audioFormat;
-
-  private SurfaceHolder surfaceHolder;
-  private TextureView textureView;
-  private TextRenderer.Output textOutput;
-  private MetadataRenderer.Output<List<Id3Frame>> id3Output;
-  private VideoListener videoListener;
-  private AudioRendererEventListener audioDebugListener;
-  private VideoRendererEventListener videoDebugListener;
-  private DecoderCounters videoDecoderCounters;
-  private DecoderCounters audioDecoderCounters;
-  private int audioSessionId;
-  private float volume;
-  private PlaybackParamsHolder playbackParamsHolder;
-
-  /* package */ SimpleExoPlayer(Context context, TrackSelector trackSelector,
-      LoadControl loadControl, DrmSessionManager drmSessionManager,
-      boolean preferExtensionDecoders, long allowedVideoJoiningTimeMs) {
-    mainHandler = new Handler();
-    componentListener = new ComponentListener();
-
-    // Build the renderers.
-    ArrayList<Renderer> renderersList = new ArrayList<>();
-    if (preferExtensionDecoders) {
-      buildExtensionRenderers(renderersList, allowedVideoJoiningTimeMs);
-      buildRenderers(context, drmSessionManager, renderersList, allowedVideoJoiningTimeMs);
-    } else {
-      buildRenderers(context, drmSessionManager, renderersList, allowedVideoJoiningTimeMs);
-      buildExtensionRenderers(renderersList, allowedVideoJoiningTimeMs);
-    }
-    renderers = renderersList.toArray(new Renderer[renderersList.size()]);
-
-    // Obtain counts of video and audio renderers.
-    int videoRendererCount = 0;
-    int audioRendererCount = 0;
-    for (Renderer renderer : renderers) {
-      switch (renderer.getTrackType()) {
-        case C.TRACK_TYPE_VIDEO:
-          videoRendererCount++;
-          break;
-        case C.TRACK_TYPE_AUDIO:
-          audioRendererCount++;
-          break;
-      }
-    }
-    this.videoRendererCount = videoRendererCount;
-    this.audioRendererCount = audioRendererCount;
-
-    // Set initial values.
-    audioSessionId = AudioTrack.SESSION_ID_NOT_SET;
-    volume = 1;
-
-    // Build the player and associated objects.
-    player = new ExoPlayerImpl(renderers, trackSelector, loadControl);
-  }
-
-  /**
-   * Returns the number of renderers.
-   *
-   * @return The number of renderers.
-   */
-  public int getRendererCount() {
-    return renderers.length;
-  }
-
-  /**
-   * Returns the track type that the renderer at a given index handles.
-   *
-   * @see Renderer#getTrackType()
-   * @param index The index of the renderer.
-   * @return One of the {@code TRACK_TYPE_*} constants defined in {@link C}.
-   */
-  public int getRendererType(int index) {
-    return renderers[index].getTrackType();
-  }
-
-  /**
-   * Sets the {@link Surface} onto which video will be rendered. The caller is responsible for
-   * tracking the lifecycle of the surface, and must clear the surface by calling
-   * {@code setVideoSurface(null)} if the surface is destroyed.
-   * <p>
-   * If the surface is held by a {@link SurfaceView}, {@link TextureView} or {@link SurfaceHolder}
-   * then it's recommended to use {@link #setVideoSurfaceView(SurfaceView)},
-   * {@link #setVideoTextureView(TextureView)} or {@link #setVideoSurfaceHolder(SurfaceHolder)}
-   * rather than this method, since passing the holder allows the player to track the lifecycle of
-   * the surface automatically.
-   *
-   * @param surface The {@link Surface}.
-   */
-  public void setVideoSurface(Surface surface) {
-    removeSurfaceCallbacks();
-    setVideoSurfaceInternal(surface);
-  }
-
-  /**
-   * Sets the {@link SurfaceHolder} that holds the {@link Surface} onto which video will be
-   * rendered. The player will track the lifecycle of the surface automatically.
-   *
-   * @param surfaceHolder The surface holder.
-   */
-  public void setVideoSurfaceHolder(SurfaceHolder surfaceHolder) {
-    removeSurfaceCallbacks();
-    this.surfaceHolder = surfaceHolder;
-    if (surfaceHolder == null) {
-      setVideoSurfaceInternal(null);
-    } else {
-      setVideoSurfaceInternal(surfaceHolder.getSurface());
-      surfaceHolder.addCallback(componentListener);
-    }
-  }
-
-  /**
-   * Sets the {@link SurfaceView} onto which video will be rendered. The player will track the
-   * lifecycle of the surface automatically.
-   *
-   * @param surfaceView The surface view.
-   */
-  public void setVideoSurfaceView(SurfaceView surfaceView) {
-    setVideoSurfaceHolder(surfaceView.getHolder());
-  }
-
-  /**
-   * Sets the {@link TextureView} onto which video will be rendered. The player will track the
-   * lifecycle of the surface automatically.
-   *
-   * @param textureView The texture view.
-   */
-  public void setVideoTextureView(TextureView textureView) {
-    removeSurfaceCallbacks();
-    this.textureView = textureView;
-    if (textureView == null) {
-      setVideoSurfaceInternal(null);
-    } else {
-      SurfaceTexture surfaceTexture = textureView.getSurfaceTexture();
-      setVideoSurfaceInternal(surfaceTexture == null ? null : new Surface(surfaceTexture));
-      textureView.setSurfaceTextureListener(componentListener);
-    }
-  }
-
-  /**
-   * Sets the audio volume, with 0 being silence and 1 being unity gain.
-   *
-   * @param volume The volume.
-   */
-  public void setVolume(float volume) {
-    this.volume = volume;
-    ExoPlayerMessage[] messages = new ExoPlayerMessage[audioRendererCount];
-    int count = 0;
-    for (Renderer renderer : renderers) {
-      if (renderer.getTrackType() == C.TRACK_TYPE_AUDIO) {
-        messages[count++] = new ExoPlayerMessage(renderer, C.MSG_SET_VOLUME, volume);
-      }
-    }
-    player.sendMessages(messages);
-  }
-
-  /**
-   * Returns the audio volume, with 0 being silence and 1 being unity gain.
-   */
-  public float getVolume() {
-    return volume;
-  }
-
-  /**
-   * Sets the {@link PlaybackParams} governing audio playback.
-   *
-   * @param params The {@link PlaybackParams}, or null to clear any previously set parameters.
-   */
-  @TargetApi(23)
-  public void setPlaybackParams(PlaybackParams params) {
-    if (params != null) {
-      // The audio renderers will call this on the playback thread to ensure they can query
-      // parameters without failure. We do the same up front, which is redundant except that it
-      // ensures an immediate call to getPlaybackParams will retrieve the instance with defaults
-      // allowed, rather than this change becoming visible sometime later once the audio renderers
-      // receive the parameters.
-      params.allowDefaults();
-      playbackParamsHolder = new PlaybackParamsHolder(params);
-    } else {
-      playbackParamsHolder = null;
-    }
-    ExoPlayerMessage[] messages = new ExoPlayerMessage[audioRendererCount];
-    int count = 0;
-    for (Renderer renderer : renderers) {
-      if (renderer.getTrackType() == C.TRACK_TYPE_AUDIO) {
-        messages[count++] = new ExoPlayerMessage(renderer, C.MSG_SET_PLAYBACK_PARAMS, params);
-      }
-    }
-    player.sendMessages(messages);
-  }
-
-  /**
-   * Returns the {@link PlaybackParams} governing audio playback, or null if not set.
-   */
-  @TargetApi(23)
-  public PlaybackParams getPlaybackParams() {
-    return playbackParamsHolder == null ? null : playbackParamsHolder.params;
-  }
-
-  /**
-   * Returns the video format currently being played, or null if no video is being played.
-   */
-  public Format getVideoFormat() {
-    return videoFormat;
-  }
-
-  /**
-   * Returns the audio format currently being played, or null if no audio is being played.
-   */
-  public Format getAudioFormat() {
-    return audioFormat;
-  }
-
-  /**
-   * Returns the audio session identifier, or {@code AudioTrack.SESSION_ID_NOT_SET} if not set.
-   */
-  public int getAudioSessionId() {
-    return audioSessionId;
-  }
-
-  /**
-   * Returns {@link DecoderCounters} for video, or null if no video is being played.
-   */
-  public DecoderCounters getVideoDecoderCounters() {
-    return videoDecoderCounters;
-  }
-
-  /**
-   * Returns {@link DecoderCounters} for audio, or null if no audio is being played.
-   */
-  public DecoderCounters getAudioDecoderCounters() {
-    return audioDecoderCounters;
-  }
-
-  /**
-   * Sets a listener to receive video events.
-   *
-   * @param listener The listener.
-   */
-  public void setVideoListener(VideoListener listener) {
-    videoListener = listener;
-  }
-
-  /**
-   * Sets a listener to receive debug events from the video renderer.
-   *
-   * @param listener The listener.
-   */
-  public void setVideoDebugListener(VideoRendererEventListener listener) {
-    videoDebugListener = listener;
-  }
-
-  /**
-   * Sets a listener to receive debug events from the audio renderer.
-   *
-   * @param listener The listener.
-   */
-  public void setAudioDebugListener(AudioRendererEventListener listener) {
-    audioDebugListener = listener;
-  }
-
-  /**
-   * Sets an output to receive text events.
-   *
-   * @param output The output.
-   */
-  public void setTextOutput(TextRenderer.Output output) {
-    textOutput = output;
-  }
-
-  /**
-   * Sets a listener to receive ID3 metadata events.
-   *
-   * @param output The output.
-   */
-  public void setId3Output(MetadataRenderer.Output<List<Id3Frame>> output) {
-    id3Output = output;
-  }
-
-  // ExoPlayer implementation
-
-  @Override
-  public void addListener(EventListener listener) {
-    player.addListener(listener);
-  }
-
-  @Override
-  public void removeListener(EventListener listener) {
-    player.removeListener(listener);
-  }
-
-  @Override
-  public int getPlaybackState() {
-    return player.getPlaybackState();
-  }
-
-  @Override
-  public void prepare(MediaSource mediaSource) {
-    player.prepare(mediaSource);
-  }
-
-  @Override
-  public void prepare(MediaSource mediaSource, boolean resetPosition) {
-    player.prepare(mediaSource, resetPosition);
-  }
-
-  @Override
-  public void setPlayWhenReady(boolean playWhenReady) {
-    player.setPlayWhenReady(playWhenReady);
-  }
-
-  @Override
-  public boolean getPlayWhenReady() {
-    return player.getPlayWhenReady();
-  }
-
-  @Override
-  public boolean isLoading() {
-    return player.isLoading();
-  }
-
-  @Override
-  public void seekToDefaultPosition() {
-    player.seekToDefaultPosition();
-  }
-
-  @Override
-  public void seekToDefaultPosition(int windowIndex) {
-    player.seekToDefaultPosition(windowIndex);
-  }
-
-  @Override
-  public void seekTo(long positionMs) {
-    player.seekTo(positionMs);
-  }
-
-  @Override
-  public void seekTo(int windowIndex, long positionMs) {
-    player.seekTo(windowIndex, positionMs);
-  }
-
-  @Override
-  public void stop() {
-    player.stop();
-  }
-
-  @Override
-  public void release() {
-    player.release();
-  }
-
-  @Override
-  public void sendMessages(ExoPlayerMessage... messages) {
-    player.sendMessages(messages);
-  }
-
-  @Override
-  public void blockingSendMessages(ExoPlayerMessage... messages) {
-    player.blockingSendMessages(messages);
-  }
-
-  @Override
-  public int getCurrentPeriodIndex() {
-    return player.getCurrentPeriodIndex();
-  }
-
-  @Override
-  public int getCurrentWindowIndex() {
-    return player.getCurrentWindowIndex();
-  }
-
-  @Override
-  public long getDuration() {
-    return player.getDuration();
-  }
-
-  @Override
-  public long getCurrentPosition() {
-    return player.getCurrentPosition();
-  }
-
-  @Override
-  public long getBufferedPosition() {
-    return player.getBufferedPosition();
-  }
-
-  @Override
-  public int getBufferedPercentage() {
-    return player.getBufferedPercentage();
-  }
-
-  @Override
-  public Timeline getCurrentTimeline() {
-    return player.getCurrentTimeline();
-  }
-
-  @Override
-  public Object getCurrentManifest() {
-    return player.getCurrentManifest();
-  }
-
-  // Internal methods.
-
-  private void buildRenderers(Context context, DrmSessionManager drmSessionManager,
-      ArrayList<Renderer> renderersList, long allowedVideoJoiningTimeMs) {
-    MediaCodecVideoRenderer videoRenderer = new MediaCodecVideoRenderer(context,
-        MediaCodecSelector.DEFAULT, MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT,
-        allowedVideoJoiningTimeMs, drmSessionManager, false, mainHandler, componentListener,
-        MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY);
-    renderersList.add(videoRenderer);
-
-    Renderer audioRenderer = new MediaCodecAudioRenderer(MediaCodecSelector.DEFAULT,
-        drmSessionManager, true, mainHandler, componentListener,
-        AudioCapabilities.getCapabilities(context), AudioManager.STREAM_MUSIC);
-    renderersList.add(audioRenderer);
-
-    Renderer textRenderer = new TextRenderer(componentListener, mainHandler.getLooper());
-    renderersList.add(textRenderer);
-
-    MetadataRenderer<List<Id3Frame>> id3Renderer = new MetadataRenderer<>(componentListener,
-        mainHandler.getLooper(), new Id3Decoder());
-    renderersList.add(id3Renderer);
-  }
-
-  private void buildExtensionRenderers(ArrayList<Renderer> renderersList,
-      long allowedVideoJoiningTimeMs) {
-    // Load extension renderers using reflection so that demo app doesn't depend on them.
-    // Class.forName(<class name>) appears for each renderer so that automated tools like proguard
-    // can detect the use of reflection (see http://proguard.sourceforge.net/FAQ.html#forname).
-    try {
-      Class<?> clazz =
-          Class.forName("com.google.android.exoplayer2.ext.vp9.LibvpxVideoRenderer");
-      Constructor<?> constructor = clazz.getConstructor(boolean.class, long.class, Handler.class,
-          VideoRendererEventListener.class, int.class);
-      renderersList.add((Renderer) constructor.newInstance(true, allowedVideoJoiningTimeMs,
-          mainHandler, componentListener, MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY));
-      Log.i(TAG, "Loaded LibvpxVideoRenderer.");
-    } catch (ClassNotFoundException e) {
-      // Expected if the app was built without the extension.
-    } catch (Exception e) {
-      throw new RuntimeException(e);
-    }
-
-    try {
-      Class<?> clazz =
-          Class.forName("com.google.android.exoplayer2.ext.opus.LibopusAudioRenderer");
-      Constructor<?> constructor = clazz.getConstructor(Handler.class,
-          AudioRendererEventListener.class);
-      renderersList.add((Renderer) constructor.newInstance(mainHandler, componentListener));
-      Log.i(TAG, "Loaded LibopusAudioRenderer.");
-    } catch (ClassNotFoundException e) {
-      // Expected if the app was built without the extension.
-    } catch (Exception e) {
-      throw new RuntimeException(e);
-    }
-
-    try {
-      Class<?> clazz =
-          Class.forName("com.google.android.exoplayer2.ext.flac.LibflacAudioRenderer");
-      Constructor<?> constructor = clazz.getConstructor(Handler.class,
-          AudioRendererEventListener.class);
-      renderersList.add((Renderer) constructor.newInstance(mainHandler, componentListener));
-      Log.i(TAG, "Loaded LibflacAudioRenderer.");
-    } catch (ClassNotFoundException e) {
-      // Expected if the app was built without the extension.
-    } catch (Exception e) {
-      throw new RuntimeException(e);
-    }
-
-    try {
-      Class<?> clazz =
-          Class.forName("com.google.android.exoplayer2.ext.ffmpeg.FfmpegAudioRenderer");
-      Constructor<?> constructor = clazz.getConstructor(Handler.class,
-          AudioRendererEventListener.class);
-      renderersList.add((Renderer) constructor.newInstance(mainHandler, componentListener));
-      Log.i(TAG, "Loaded FfmpegAudioRenderer.");
-    } catch (ClassNotFoundException e) {
-      // Expected if the app was built without the extension.
-    } catch (Exception e) {
-      throw new RuntimeException(e);
-    }
-  }
-
-  private void removeSurfaceCallbacks() {
-    if (this.textureView != null) {
-      this.textureView.setSurfaceTextureListener(null);
-      this.textureView = null;
-    }
-    if (this.surfaceHolder != null) {
-      this.surfaceHolder.removeCallback(componentListener);
-      this.surfaceHolder = null;
-    }
-  }
-
-  private void setVideoSurfaceInternal(Surface surface) {
-    ExoPlayerMessage[] messages = new ExoPlayerMessage[videoRendererCount];
-    int count = 0;
-    for (Renderer renderer : renderers) {
-      if (renderer.getTrackType() == C.TRACK_TYPE_VIDEO) {
-        messages[count++] = new ExoPlayerMessage(renderer, C.MSG_SET_SURFACE, surface);
-      }
-    }
-    if (surface == null) {
-      // Block to ensure that the surface is not accessed after the method returns.
-      player.blockingSendMessages(messages);
-    } else {
-      player.sendMessages(messages);
-    }
-  }
-
-  private final class ComponentListener implements VideoRendererEventListener,
-      AudioRendererEventListener, TextRenderer.Output, MetadataRenderer.Output<List<Id3Frame>>,
-      SurfaceHolder.Callback, TextureView.SurfaceTextureListener {
-
-    // VideoRendererEventListener implementation
+    public void setVideoSurface(Surface surface) {
+        removeSurfaceCallbacks();
+        setVideoSurfaceInternal(surface);
+    }
 
-    @Override
-    public void onVideoEnabled(DecoderCounters counters) {
-      videoDecoderCounters = counters;
-      if (videoDebugListener != null) {
-        videoDebugListener.onVideoEnabled(counters);
-      }
+    /**
+     * Sets the {@link SurfaceHolder} that holds the {@link Surface} onto which video will be
+     * rendered. The player will track the lifecycle of the surface automatically.
+     *
+     * @param surfaceHolder The surface holder.
+     */
+    public void setVideoSurfaceHolder(SurfaceHolder surfaceHolder) {
+        removeSurfaceCallbacks();
+        this.surfaceHolder = surfaceHolder;
+        if (surfaceHolder == null) {
+            setVideoSurfaceInternal(null);
+        } else {
+            setVideoSurfaceInternal(surfaceHolder.getSurface());
+            surfaceHolder.addCallback(componentListener);
+        }
     }
 
-    @Override
-    public void onVideoDecoderInitialized(String decoderName, long initializedTimestampMs,
-        long initializationDurationMs) {
-      if (videoDebugListener != null) {
-        videoDebugListener.onVideoDecoderInitialized(decoderName, initializedTimestampMs,
-            initializationDurationMs);
-      }
+    /**
+     * Sets the {@link SurfaceView} onto which video will be rendered. The player will track the
+     * lifecycle of the surface automatically.
+     *
+     * @param surfaceView The surface view.
+     */
+    public void setVideoSurfaceView(SurfaceView surfaceView) {
+        setVideoSurfaceHolder(surfaceView.getHolder());
     }
 
-    @Override
-    public void onVideoInputFormatChanged(Format format) {
-      videoFormat = format;
-      if (videoDebugListener != null) {
-        videoDebugListener.onVideoInputFormatChanged(format);
-      }
+    /**
+     * Sets the {@link TextureView} onto which video will be rendered. The player will track the
+     * lifecycle of the surface automatically.
+     *
+     * @param textureView The texture view.
+     */
+    public void setVideoTextureView(TextureView textureView) {
+        removeSurfaceCallbacks();
+        this.textureView = textureView;
+        if (textureView == null) {
+            setVideoSurfaceInternal(null);
+        } else {
+            SurfaceTexture surfaceTexture = textureView.getSurfaceTexture();
+            setVideoSurfaceInternal(surfaceTexture == null ? null : new Surface(surfaceTexture));
+            textureView.setSurfaceTextureListener(componentListener);
+        }
     }
 
-    @Override
-    public void onDroppedFrames(int count, long elapsed) {
-      if (videoDebugListener != null) {
-        videoDebugListener.onDroppedFrames(count, elapsed);
-      }
+    /**
+     * Sets the audio volume, with 0 being silence and 1 being unity gain.
+     *
+     * @param volume The volume.
+     */
+    public void setVolume(float volume) {
+        this.volume = volume;
+        ExoPlayerMessage[] messages = new ExoPlayerMessage[audioRendererCount];
+        int count = 0;
+        for (Renderer renderer : renderers) {
+            if (renderer.getTrackType() == C.TRACK_TYPE_AUDIO) {
+                messages[count++] = new ExoPlayerMessage(renderer, C.MSG_SET_VOLUME, volume);
+            }
+        }
+        player.sendMessages(messages);
     }
 
-    @Override
-    public void onVideoSizeChanged(int width, int height, int unappliedRotationDegrees,
-        float pixelWidthHeightRatio) {
-      if (videoListener != null) {
-        videoListener.onVideoSizeChanged(width, height, unappliedRotationDegrees,
-            pixelWidthHeightRatio);
-      }
-      if (videoDebugListener != null) {
-        videoDebugListener.onVideoSizeChanged(width, height, unappliedRotationDegrees,
-            pixelWidthHeightRatio);
-      }
+    /**
+     * Returns the audio volume, with 0 being silence and 1 being unity gain.
+     */
+    public float getVolume() {
+        return volume;
     }
 
-    @Override
-    public void onRenderedFirstFrame(Surface surface) {
-      if (videoListener != null) {
-        videoListener.onRenderedFirstFrame(surface);
-      }
-      if (videoDebugListener != null) {
-        videoDebugListener.onRenderedFirstFrame(surface);
-      }
+    /**
+     * Sets the {@link PlaybackParams} governing audio playback.
+     *
+     * @param params The {@link PlaybackParams}, or null to clear any previously set parameters.
+     */
+    @TargetApi(23)
+    public void setPlaybackParams(PlaybackParams params) {
+        if (params != null) {
+            // The audio renderers will call this on the playback thread to ensure they can query
+            // parameters without failure. We do the same up front, which is redundant except that it
+            // ensures an immediate call to getPlaybackParams will retrieve the instance with defaults
+            // allowed, rather than this change becoming visible sometime later once the audio renderers
+            // receive the parameters.
+            params.allowDefaults();
+            playbackParamsHolder = new PlaybackParamsHolder(params);
+        } else {
+            playbackParamsHolder = null;
+        }
+        ExoPlayerMessage[] messages = new ExoPlayerMessage[audioRendererCount];
+        int count = 0;
+        for (Renderer renderer : renderers) {
+            if (renderer.getTrackType() == C.TRACK_TYPE_AUDIO) {
+                messages[count++] = new ExoPlayerMessage(renderer, C.MSG_SET_PLAYBACK_PARAMS, params);
+            }
+        }
+        player.sendMessages(messages);
     }
 
-    @Override
-    public void onVideoDisabled(DecoderCounters counters) {
-      if (videoListener != null) {
-        videoListener.onVideoDisabled(counters);
-      }
-      if (videoDebugListener != null) {
-        videoDebugListener.onVideoDisabled(counters);
-      }
-      videoFormat = null;
-      videoDecoderCounters = null;
+    /**
+     * Returns the {@link PlaybackParams} governing audio playback, or null if not set.
+     */
+    @TargetApi(23)
+    public PlaybackParams getPlaybackParams() {
+        return playbackParamsHolder == null ? null : playbackParamsHolder.params;
+    }
+
+    /**
+     * Returns the video format currently being played, or null if no video is being played.
+     */
+    public Format getVideoFormat() {
+        return videoFormat;
+    }
+
+    /**
+     * Returns the audio format currently being played, or null if no audio is being played.
+     */
+    public Format getAudioFormat() {
+        return audioFormat;
+    }
+
+    /**
+     * Returns the audio session identifier, or {@code AudioTrack.SESSION_ID_NOT_SET} if not set.
+     */
+    public int getAudioSessionId() {
+        return audioSessionId;
+    }
+
+    /**
+     * Returns {@link DecoderCounters} for video, or null if no video is being played.
+     */
+    public DecoderCounters getVideoDecoderCounters() {
+        return videoDecoderCounters;
+    }
+
+    /**
+     * Returns {@link DecoderCounters} for audio, or null if no audio is being played.
+     */
+    public DecoderCounters getAudioDecoderCounters() {
+        return audioDecoderCounters;
+    }
+
+    /*
+  * [UFRGS] VO-CoLisEU
+  * Return the number of freezes/stalls during the exhibition
+  */
+    public int getStalls() {
+        return stalls;
+    }
+
+    /*
+     * [UFRGS] VO-CoLisEU
+     * Return the combined duration of freezes/stalls during the exhibition
+     */
+    public Long getStallsDuration() {
+        return stallsDuration;
+    }
+
+    /*
+     * [UFRGS] VO-CoLisEU
+     * Return the number of freezes/stalls during the exhibition
+     */
+    public void setStalls(int cont) {
+        stalls += cont;
+    }
+
+    /*
+     * [UFRGS] VO-CoLisEU
+     * Return the combined duration of freezes/stalls during the exhibition
+     */
+    public void setStallsDuration(long durationms) {
+        stallsDuration += durationms;
+    }
+
+    public void increaseStalls() {
+        setStalls(1);
+    }
+
+    /**
+     * Sets a listener to receive video events.
+     *
+     * @param listener The listener.
+     */
+    public void setVideoListener(VideoListener listener) {
+        videoListener = listener;
+    }
+
+    /**
+     * Sets a listener to receive debug events from the video renderer.
+     *
+     * @param listener The listener.
+     */
+    public void setVideoDebugListener(VideoRendererEventListener listener) {
+        videoDebugListener = listener;
     }
 
-    // AudioRendererEventListener implementation
+    /**
+     * Sets a listener to receive debug events from the audio renderer.
+     *
+     * @param listener The listener.
+     */
+    public void setAudioDebugListener(AudioRendererEventListener listener) {
+        audioDebugListener = listener;
+    }
+
+    /**
+     * Sets an output to receive text events.
+     *
+     * @param output The output.
+     */
+    public void setTextOutput(TextRenderer.Output output) {
+        textOutput = output;
+    }
+
+    /**
+     * Sets a listener to receive ID3 metadata events.
+     *
+     * @param output The output.
+     */
+    public void setId3Output(MetadataRenderer.Output<List<Id3Frame>> output) {
+        id3Output = output;
+    }
+
+    // ExoPlayer implementation
 
     @Override
-    public void onAudioEnabled(DecoderCounters counters) {
-      audioDecoderCounters = counters;
-      if (audioDebugListener != null) {
-        audioDebugListener.onAudioEnabled(counters);
-      }
+    public void addListener(EventListener listener) {
+        player.addListener(listener);
     }
 
     @Override
-    public void onAudioSessionId(int sessionId) {
-      audioSessionId = sessionId;
-      if (audioDebugListener != null) {
-        audioDebugListener.onAudioSessionId(sessionId);
-      }
+    public void removeListener(EventListener listener) {
+        player.removeListener(listener);
     }
 
     @Override
-    public void onAudioDecoderInitialized(String decoderName, long initializedTimestampMs,
-        long initializationDurationMs) {
-      if (audioDebugListener != null) {
-        audioDebugListener.onAudioDecoderInitialized(decoderName, initializedTimestampMs,
-            initializationDurationMs);
-      }
+    public int getPlaybackState() {
+        return player.getPlaybackState();
     }
 
     @Override
-    public void onAudioInputFormatChanged(Format format) {
-      audioFormat = format;
-      if (audioDebugListener != null) {
-        audioDebugListener.onAudioInputFormatChanged(format);
-      }
+    public void prepare(MediaSource mediaSource) {
+        player.prepare(mediaSource);
     }
 
     @Override
-    public void onAudioTrackUnderrun(int bufferSize, long bufferSizeMs,
-        long elapsedSinceLastFeedMs) {
-      if (audioDebugListener != null) {
-        audioDebugListener.onAudioTrackUnderrun(bufferSize, bufferSizeMs, elapsedSinceLastFeedMs);
-      }
+    public void prepare(MediaSource mediaSource, boolean resetPosition) {
+        player.prepare(mediaSource, resetPosition);
     }
 
     @Override
-    public void onAudioDisabled(DecoderCounters counters) {
-      if (audioDebugListener != null) {
-        audioDebugListener.onAudioDisabled(counters);
-      }
-      audioFormat = null;
-      audioDecoderCounters = null;
-      audioSessionId = AudioTrack.SESSION_ID_NOT_SET;
+    public void setPlayWhenReady(boolean playWhenReady) {
+        player.setPlayWhenReady(playWhenReady);
     }
 
-    // TextRenderer.Output implementation
+    @Override
+    public boolean getPlayWhenReady() {
+        return player.getPlayWhenReady();
+    }
 
     @Override
-    public void onCues(List<Cue> cues) {
-      if (textOutput != null) {
-        textOutput.onCues(cues);
-      }
+    public boolean isLoading() {
+        return player.isLoading();
     }
 
-    // MetadataRenderer.Output<List<Id3Frame>> implementation
+    @Override
+    public void seekToDefaultPosition() {
+        player.seekToDefaultPosition();
+    }
 
     @Override
-    public void onMetadata(List<Id3Frame> id3Frames) {
-      if (id3Output != null) {
-        id3Output.onMetadata(id3Frames);
-      }
+    public void seekToDefaultPosition(int windowIndex) {
+        player.seekToDefaultPosition(windowIndex);
     }
 
-    // SurfaceHolder.Callback implementation
+    @Override
+    public void seekTo(long positionMs) {
+        player.seekTo(positionMs);
+    }
 
     @Override
-    public void surfaceCreated(SurfaceHolder holder) {
-      setVideoSurfaceInternal(holder.getSurface());
+    public void seekTo(int windowIndex, long positionMs) {
+        player.seekTo(windowIndex, positionMs);
     }
 
     @Override
-    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
-      // Do nothing.
+    public void stop() {
+        player.stop();
     }
 
     @Override
-    public void surfaceDestroyed(SurfaceHolder holder) {
-      setVideoSurfaceInternal(null);
+    public void release() {
+        player.release();
     }
 
-    // TextureView.SurfaceTextureListener implementation
+    @Override
+    public void sendMessages(ExoPlayerMessage... messages) {
+        player.sendMessages(messages);
+    }
 
     @Override
-    public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture, int width, int height) {
-      setVideoSurfaceInternal(new Surface(surfaceTexture));
+    public void blockingSendMessages(ExoPlayerMessage... messages) {
+        player.blockingSendMessages(messages);
     }
 
     @Override
-    public void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture, int width, int height) {
-      // Do nothing.
+    public int getCurrentPeriodIndex() {
+        return player.getCurrentPeriodIndex();
     }
 
     @Override
-    public boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {
-      setVideoSurface(null);
-      return true;
+    public int getCurrentWindowIndex() {
+        return player.getCurrentWindowIndex();
     }
 
     @Override
-    public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
-      // Do nothing.
+    public long getDuration() {
+        return player.getDuration();
     }
 
-  }
+    @Override
+    public long getCurrentPosition() {
+        return player.getCurrentPosition();
+    }
 
-  @TargetApi(23)
-  private static final class PlaybackParamsHolder {
+    @Override
+    public long getBufferedPosition() {
+        return player.getBufferedPosition();
+    }
 
-    public final PlaybackParams params;
+    @Override
+    public int getBufferedPercentage() {
+        return player.getBufferedPercentage();
+    }
 
-    public PlaybackParamsHolder(PlaybackParams params) {
-      this.params = params;
+    @Override
+    public Timeline getCurrentTimeline() {
+        return player.getCurrentTimeline();
     }
 
-  }
+    @Override
+    public Object getCurrentManifest() {
+        return player.getCurrentManifest();
+    }
+
+    // Internal methods.
+
+    private void buildRenderers(Context context, DrmSessionManager drmSessionManager,
+                                ArrayList<Renderer> renderersList, long allowedVideoJoiningTimeMs) {
+        MediaCodecVideoRenderer videoRenderer = new MediaCodecVideoRenderer(context,
+                MediaCodecSelector.DEFAULT, MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT,
+                allowedVideoJoiningTimeMs, drmSessionManager, false, mainHandler, componentListener,
+                MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY);
+        renderersList.add(videoRenderer);
+
+        Renderer audioRenderer = new MediaCodecAudioRenderer(MediaCodecSelector.DEFAULT,
+                drmSessionManager, true, mainHandler, componentListener,
+                AudioCapabilities.getCapabilities(context), AudioManager.STREAM_MUSIC);
+        renderersList.add(audioRenderer);
+
+        Renderer textRenderer = new TextRenderer(componentListener, mainHandler.getLooper());
+        renderersList.add(textRenderer);
+
+        MetadataRenderer<List<Id3Frame>> id3Renderer = new MetadataRenderer<>(componentListener,
+                mainHandler.getLooper(), new Id3Decoder());
+        renderersList.add(id3Renderer);
+    }
+
+    private void buildExtensionRenderers(ArrayList<Renderer> renderersList,
+                                         long allowedVideoJoiningTimeMs) {
+        // Load extension renderers using reflection so that demo app doesn't depend on them.
+        // Class.forName(<class name>) appears for each renderer so that automated tools like proguard
+        // can detect the use of reflection (see http://proguard.sourceforge.net/FAQ.html#forname).
+        try {
+            Class<?> clazz =
+                    Class.forName("com.google.android.exoplayer2.ext.vp9.LibvpxVideoRenderer");
+            Constructor<?> constructor = clazz.getConstructor(boolean.class, long.class, Handler.class,
+                    VideoRendererEventListener.class, int.class);
+            renderersList.add((Renderer) constructor.newInstance(true, allowedVideoJoiningTimeMs,
+                    mainHandler, componentListener, MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY));
+            Log.i(TAG, "Loaded LibvpxVideoRenderer.");
+        } catch (ClassNotFoundException e) {
+            // Expected if the app was built without the extension.
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+
+        try {
+            Class<?> clazz =
+                    Class.forName("com.google.android.exoplayer2.ext.opus.LibopusAudioRenderer");
+            Constructor<?> constructor = clazz.getConstructor(Handler.class,
+                    AudioRendererEventListener.class);
+            renderersList.add((Renderer) constructor.newInstance(mainHandler, componentListener));
+            Log.i(TAG, "Loaded LibopusAudioRenderer.");
+        } catch (ClassNotFoundException e) {
+            // Expected if the app was built without the extension.
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+
+        try {
+            Class<?> clazz =
+                    Class.forName("com.google.android.exoplayer2.ext.flac.LibflacAudioRenderer");
+            Constructor<?> constructor = clazz.getConstructor(Handler.class,
+                    AudioRendererEventListener.class);
+            renderersList.add((Renderer) constructor.newInstance(mainHandler, componentListener));
+            Log.i(TAG, "Loaded LibflacAudioRenderer.");
+        } catch (ClassNotFoundException e) {
+            // Expected if the app was built without the extension.
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+
+        try {
+            Class<?> clazz =
+                    Class.forName("com.google.android.exoplayer2.ext.ffmpeg.FfmpegAudioRenderer");
+            Constructor<?> constructor = clazz.getConstructor(Handler.class,
+                    AudioRendererEventListener.class);
+            renderersList.add((Renderer) constructor.newInstance(mainHandler, componentListener));
+            Log.i(TAG, "Loaded FfmpegAudioRenderer.");
+        } catch (ClassNotFoundException e) {
+            // Expected if the app was built without the extension.
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    private void removeSurfaceCallbacks() {
+        if (this.textureView != null) {
+            this.textureView.setSurfaceTextureListener(null);
+            this.textureView = null;
+        }
+        if (this.surfaceHolder != null) {
+            this.surfaceHolder.removeCallback(componentListener);
+            this.surfaceHolder = null;
+        }
+    }
+
+    private void setVideoSurfaceInternal(Surface surface) {
+        ExoPlayerMessage[] messages = new ExoPlayerMessage[videoRendererCount];
+        int count = 0;
+        for (Renderer renderer : renderers) {
+            if (renderer.getTrackType() == C.TRACK_TYPE_VIDEO) {
+                messages[count++] = new ExoPlayerMessage(renderer, C.MSG_SET_SURFACE, surface);
+            }
+        }
+        if (surface == null) {
+            // Block to ensure that the surface is not accessed after the method returns.
+            player.blockingSendMessages(messages);
+        } else {
+            player.sendMessages(messages);
+        }
+    }
+
+    private final class ComponentListener implements VideoRendererEventListener,
+            AudioRendererEventListener, TextRenderer.Output, MetadataRenderer.Output<List<Id3Frame>>,
+            SurfaceHolder.Callback, TextureView.SurfaceTextureListener {
+
+        // VideoRendererEventListener implementation
+
+        @Override
+        public void onVideoEnabled(DecoderCounters counters) {
+            videoDecoderCounters = counters;
+            if (videoDebugListener != null) {
+                videoDebugListener.onVideoEnabled(counters);
+            }
+        }
+
+        @Override
+        public void onVideoDecoderInitialized(String decoderName, long initializedTimestampMs,
+                                              long initializationDurationMs) {
+            if (videoDebugListener != null) {
+                videoDebugListener.onVideoDecoderInitialized(decoderName, initializedTimestampMs,
+                        initializationDurationMs);
+            }
+        }
+
+        @Override
+        public void onVideoInputFormatChanged(Format format) {
+            videoFormat = format;
+            if (videoDebugListener != null) {
+                videoDebugListener.onVideoInputFormatChanged(format);
+            }
+        }
+
+        @Override
+        public void onDroppedFrames(int count, long elapsed) {
+            if (videoDebugListener != null) {
+                videoDebugListener.onDroppedFrames(count, elapsed);
+            }
+        }
+
+        @Override
+        public void onVideoSizeChanged(int width, int height, int unappliedRotationDegrees,
+                                       float pixelWidthHeightRatio) {
+            if (videoListener != null) {
+                videoListener.onVideoSizeChanged(width, height, unappliedRotationDegrees,
+                        pixelWidthHeightRatio);
+            }
+            if (videoDebugListener != null) {
+                videoDebugListener.onVideoSizeChanged(width, height, unappliedRotationDegrees,
+                        pixelWidthHeightRatio);
+            }
+        }
+
+        @Override
+        public void onRenderedFirstFrame(Surface surface) {
+            if (videoListener != null) {
+                videoListener.onRenderedFirstFrame(surface);
+            }
+            if (videoDebugListener != null) {
+                videoDebugListener.onRenderedFirstFrame(surface);
+            }
+        }
+
+        @Override
+        public void onVideoDisabled(DecoderCounters counters) {
+            if (videoListener != null) {
+                videoListener.onVideoDisabled(counters);
+            }
+            if (videoDebugListener != null) {
+                videoDebugListener.onVideoDisabled(counters);
+            }
+            videoFormat = null;
+            videoDecoderCounters = null;
+        }
+
+        // AudioRendererEventListener implementation
+
+        @Override
+        public void onAudioEnabled(DecoderCounters counters) {
+            audioDecoderCounters = counters;
+            if (audioDebugListener != null) {
+                audioDebugListener.onAudioEnabled(counters);
+            }
+        }
+
+        @Override
+        public void onAudioSessionId(int sessionId) {
+            audioSessionId = sessionId;
+            if (audioDebugListener != null) {
+                audioDebugListener.onAudioSessionId(sessionId);
+            }
+        }
+
+        @Override
+        public void onAudioDecoderInitialized(String decoderName, long initializedTimestampMs,
+                                              long initializationDurationMs) {
+            if (audioDebugListener != null) {
+                audioDebugListener.onAudioDecoderInitialized(decoderName, initializedTimestampMs,
+                        initializationDurationMs);
+            }
+        }
+
+        @Override
+        public void onAudioInputFormatChanged(Format format) {
+            audioFormat = format;
+            if (audioDebugListener != null) {
+                audioDebugListener.onAudioInputFormatChanged(format);
+            }
+        }
+
+        @Override
+        public void onAudioTrackUnderrun(int bufferSize, long bufferSizeMs,
+                                         long elapsedSinceLastFeedMs) {
+            if (audioDebugListener != null) {
+                audioDebugListener.onAudioTrackUnderrun(bufferSize, bufferSizeMs, elapsedSinceLastFeedMs);
+            }
+        }
+
+        @Override
+        public void onAudioDisabled(DecoderCounters counters) {
+            if (audioDebugListener != null) {
+                audioDebugListener.onAudioDisabled(counters);
+            }
+            audioFormat = null;
+            audioDecoderCounters = null;
+            audioSessionId = AudioTrack.SESSION_ID_NOT_SET;
+        }
+
+        // TextRenderer.Output implementation
+
+        @Override
+        public void onCues(List<Cue> cues) {
+            if (textOutput != null) {
+                textOutput.onCues(cues);
+            }
+        }
+
+        // MetadataRenderer.Output<List<Id3Frame>> implementation
+
+        @Override
+        public void onMetadata(List<Id3Frame> id3Frames) {
+            if (id3Output != null) {
+                id3Output.onMetadata(id3Frames);
+            }
+        }
+
+        // SurfaceHolder.Callback implementation
+
+        @Override
+        public void surfaceCreated(SurfaceHolder holder) {
+            setVideoSurfaceInternal(holder.getSurface());
+        }
+
+        @Override
+        public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
+            // Do nothing.
+        }
+
+        @Override
+        public void surfaceDestroyed(SurfaceHolder holder) {
+            setVideoSurfaceInternal(null);
+        }
+
+        // TextureView.SurfaceTextureListener implementation
+
+        @Override
+        public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture, int width, int height) {
+            setVideoSurfaceInternal(new Surface(surfaceTexture));
+        }
+
+        @Override
+        public void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture, int width, int height) {
+            // Do nothing.
+        }
+
+        @Override
+        public boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {
+            setVideoSurface(null);
+            return true;
+        }
+
+        @Override
+        public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
+            // Do nothing.
+        }
+
+    }
+
+    @TargetApi(23)
+    private static final class PlaybackParamsHolder {
+
+        public final PlaybackParams params;
+
+        public PlaybackParamsHolder(PlaybackParams params) {
+            this.params = params;
+        }
+
+    }
 
 }
diff --git a/library/src/main/java/com/google/android/exoplayer2/ui/DebugTextViewHelper.java b/library/src/main/java/com/google/android/exoplayer2/ui/DebugTextViewHelper.java
index af38836fc9..03c26e0511 100644
--- a/library/src/main/java/com/google/android/exoplayer2/ui/DebugTextViewHelper.java
+++ b/library/src/main/java/com/google/android/exoplayer2/ui/DebugTextViewHelper.java
@@ -1,3 +1,178 @@
+///*
+// * Copyright (C) 2016 The Android Open Source Project
+// *
+// * Licensed under the Apache License, Version 2.0 (the "License");
+// * you may not use this file except in compliance with the License.
+// * You may obtain a copy of the License at
+// *
+// *      http://www.apache.org/licenses/LICENSE-2.0
+// *
+// * Unless required by applicable law or agreed to in writing, software
+// * distributed under the License is distributed on an "AS IS" BASIS,
+// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// * See the License for the specific language governing permissions and
+// * limitations under the License.
+// */
+//package com.google.android.exoplayer2.ui;
+//
+//import android.widget.TextView;
+//import com.google.android.exoplayer2.ExoPlaybackException;
+//import com.google.android.exoplayer2.ExoPlayer;
+//import com.google.android.exoplayer2.Format;
+//import com.google.android.exoplayer2.SimpleExoPlayer;
+//import com.google.android.exoplayer2.Timeline;
+//import com.google.android.exoplayer2.decoder.DecoderCounters;
+//
+///**
+// * A helper class for periodically updating a {@link TextView} with debug information obtained from
+// * a {@link SimpleExoPlayer}.
+// */
+//public final class DebugTextViewHelper implements Runnable, ExoPlayer.EventListener {
+//
+//  private static final int REFRESH_INTERVAL_MS = 1000;
+//
+//  private final SimpleExoPlayer player;
+//  private final TextView textView;
+//
+//  private boolean started;
+//
+//  /**
+//   * @param player The {@link SimpleExoPlayer} from which debug information should be obtained.
+//   * @param textView The {@link TextView} that should be updated to display the information.
+//   */
+//  public DebugTextViewHelper(SimpleExoPlayer player, TextView textView) {
+//    this.player = player;
+//    this.textView = textView;
+//  }
+//
+//  /**
+//   * Starts periodic updates of the {@link TextView}. Must be called from the application's main
+//   * thread.
+//   */
+//  public void start() {
+//    if (started) {
+//      return;
+//    }
+//    started = true;
+//    player.addListener(this);
+//    updateAndPost();
+//  }
+//
+//  /**
+//   * Stops periodic updates of the {@link TextView}. Must be called from the application's main
+//   * thread.
+//   */
+//  public void stop() {
+//    if (!started) {
+//      return;
+//    }
+//    started = false;
+//    player.removeListener(this);
+//    textView.removeCallbacks(this);
+//  }
+//
+//  // ExoPlayer.EventListener implementation.
+//
+//  @Override
+//  public void onLoadingChanged(boolean isLoading) {
+//    // Do nothing.
+//  }
+//
+//  @Override
+//  public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
+//    updateAndPost();
+//  }
+//
+//  @Override
+//  public void onPositionDiscontinuity() {
+//    updateAndPost();
+//  }
+//
+//  @Override
+//  public void onTimelineChanged(Timeline timeline, Object manifest) {
+//    // Do nothing.
+//  }
+//
+//  @Override
+//  public void onPlayerError(ExoPlaybackException error) {
+//    // Do nothing.
+//  }
+//
+//  // Runnable implementation.
+//
+//  @Override
+//  public void run() {
+//    updateAndPost();
+//  }
+//
+//  // Private methods.
+//
+//  private void updateAndPost() {
+//    textView.setText(getPlayerStateString() + getPlayerWindowIndexString() + getVideoString()
+//        + getAudioString());
+//    textView.removeCallbacks(this);
+//    textView.postDelayed(this, REFRESH_INTERVAL_MS);
+//  }
+//
+//  private String getPlayerStateString() {
+//    String text = "playWhenReady:" + player.getPlayWhenReady() + " playbackState:";
+//    switch (player.getPlaybackState()) {
+//      case ExoPlayer.STATE_BUFFERING:
+//        text += "buffering";
+//        break;
+//      case ExoPlayer.STATE_ENDED:
+//        text += "ended";
+//        break;
+//      case ExoPlayer.STATE_IDLE:
+//        text += "idle";
+//        break;
+//      case ExoPlayer.STATE_READY:
+//        text += "ready";
+//        break;
+//      default:
+//        text += "unknown";
+//        break;
+//    }
+//    return text;
+//  }
+//
+//  private String getPlayerWindowIndexString() {
+//    return " window:" + player.getCurrentWindowIndex();
+//  }
+//
+//  private String getVideoString() {
+//    Format format = player.getVideoFormat();
+//    if (format == null) {
+//      return "";
+//    }
+//    return "\n" + format.sampleMimeType + "(id:" + format.id + " r:" + format.width + "x"
+//        + format.height + getDecoderCountersBufferCountString(player.getVideoDecoderCounters())
+//        + ")";
+//  }
+//
+//  private String getAudioString() {
+//    Format format = player.getAudioFormat();
+//    if (format == null) {
+//      return "";
+//    }
+//    return "\n" + format.sampleMimeType + "(id:" + format.id + " hz:" + format.sampleRate + " ch:"
+//        + format.channelCount
+//        + getDecoderCountersBufferCountString(player.getAudioDecoderCounters()) + ")";
+//  }
+//
+//  private static String getDecoderCountersBufferCountString(DecoderCounters counters) {
+//    if (counters == null) {
+//      return "";
+//    }
+//    counters.ensureUpdated();
+//    return " rb:" + counters.renderedOutputBufferCount
+//        + " sb:" + counters.skippedOutputBufferCount
+//        + " db:" + counters.droppedOutputBufferCount
+//        + " mcdb:" + counters.maxConsecutiveDroppedOutputBufferCount;
+//  }
+//
+//}
+
 /*
  * Copyright (C) 2016 The Android Open Source Project
  *
@@ -15,7 +190,11 @@
  */
 package com.google.android.exoplayer2.ui;
 
+import android.content.SharedPreferences;
+import android.os.Environment;
+import android.util.Log;
 import android.widget.TextView;
+
 import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.ExoPlayer;
 import com.google.android.exoplayer2.Format;
@@ -23,152 +202,286 @@
 import com.google.android.exoplayer2.Timeline;
 import com.google.android.exoplayer2.decoder.DecoderCounters;
 
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.text.Normalizer;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Date;
+
 /**
  * A helper class for periodically updating a {@link TextView} with debug information obtained from
  * a {@link SimpleExoPlayer}.
  */
 public final class DebugTextViewHelper implements Runnable, ExoPlayer.EventListener {
 
-  private static final int REFRESH_INTERVAL_MS = 1000;
-
-  private final SimpleExoPlayer player;
-  private final TextView textView;
-
-  private boolean started;
-
-  /**
-   * @param player The {@link SimpleExoPlayer} from which debug information should be obtained.
-   * @param textView The {@link TextView} that should be updated to display the information.
-   */
-  public DebugTextViewHelper(SimpleExoPlayer player, TextView textView) {
-    this.player = player;
-    this.textView = textView;
-  }
-
-  /**
-   * Starts periodic updates of the {@link TextView}. Must be called from the application's main
-   * thread.
-   */
-  public void start() {
-    if (started) {
-      return;
-    }
-    started = true;
-    player.addListener(this);
-    updateAndPost();
-  }
-
-  /**
-   * Stops periodic updates of the {@link TextView}. Must be called from the application's main
-   * thread.
-   */
-  public void stop() {
-    if (!started) {
-      return;
-    }
-    started = false;
-    player.removeListener(this);
-    textView.removeCallbacks(this);
-  }
-
-  // ExoPlayer.EventListener implementation.
-
-  @Override
-  public void onLoadingChanged(boolean isLoading) {
-    // Do nothing.
-  }
-
-  @Override
-  public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
-    updateAndPost();
-  }
-
-  @Override
-  public void onPositionDiscontinuity() {
-    updateAndPost();
-  }
-
-  @Override
-  public void onTimelineChanged(Timeline timeline, Object manifest) {
-    // Do nothing.
-  }
-
-  @Override
-  public void onPlayerError(ExoPlaybackException error) {
-    // Do nothing.
-  }
-
-  // Runnable implementation.
-
-  @Override
-  public void run() {
-    updateAndPost();
-  }
-
-  // Private methods.
-
-  private void updateAndPost() {
-    textView.setText(getPlayerStateString() + getPlayerWindowIndexString() + getVideoString()
-        + getAudioString());
-    textView.removeCallbacks(this);
-    textView.postDelayed(this, REFRESH_INTERVAL_MS);
-  }
-
-  private String getPlayerStateString() {
-    String text = "playWhenReady:" + player.getPlayWhenReady() + " playbackState:";
-    switch (player.getPlaybackState()) {
-      case ExoPlayer.STATE_BUFFERING:
-        text += "buffering";
-        break;
-      case ExoPlayer.STATE_ENDED:
-        text += "ended";
-        break;
-      case ExoPlayer.STATE_IDLE:
-        text += "idle";
-        break;
-      case ExoPlayer.STATE_READY:
-        text += "ready";
-        break;
-      default:
-        text += "unknown";
-        break;
-    }
-    return text;
-  }
-
-  private String getPlayerWindowIndexString() {
-    return " window:" + player.getCurrentWindowIndex();
-  }
-
-  private String getVideoString() {
-    Format format = player.getVideoFormat();
-    if (format == null) {
-      return "";
-    }
-    return "\n" + format.sampleMimeType + "(id:" + format.id + " r:" + format.width + "x"
-        + format.height + getDecoderCountersBufferCountString(player.getVideoDecoderCounters())
-        + ")";
-  }
-
-  private String getAudioString() {
-    Format format = player.getAudioFormat();
-    if (format == null) {
-      return "";
-    }
-    return "\n" + format.sampleMimeType + "(id:" + format.id + " hz:" + format.sampleRate + " ch:"
-        + format.channelCount
-        + getDecoderCountersBufferCountString(player.getAudioDecoderCounters()) + ")";
-  }
-
-  private static String getDecoderCountersBufferCountString(DecoderCounters counters) {
-    if (counters == null) {
-      return "";
-    }
-    counters.ensureUpdated();
-    return " rb:" + counters.renderedOutputBufferCount
-        + " sb:" + counters.skippedOutputBufferCount
-        + " db:" + counters.droppedOutputBufferCount
-        + " mcdb:" + counters.maxConsecutiveDroppedOutputBufferCount;
-  }
+    private static final int REFRESH_INTERVAL_MS = 1000;
+
+    private final SimpleExoPlayer player;
+    private String file;
+    private final TextView textView;
+    private boolean started, isPstFilled;
+    private long playbackStartTime, bufferingStartAux, bufferingEndAux;
+    private int bitrateAux = 0, bseCont = 0;
+    private boolean first = true, written = false;
+    private String initialRes, initialBR;
+
+    /**
+     * @param player   The {@link SimpleExoPlayer} from which debug information should be obtained.
+     * @param textView The {@link TextView} that should be updated to display the information.
+     */
+    public DebugTextViewHelper(SimpleExoPlayer player, TextView textView, String file) {
+        this.player = player;
+        this.textView = textView;
+        this.file = file;
+    }
+
+    /**
+     * Starts periodic updates of the {@link TextView}. Must be called from the application's main
+     * thread.
+     */
+    public void start() {
+        if (started) {
+            return;
+        }
+        written = false;
+        started = true;
+        player.addListener(this);
+        updateAndPost();
+    }
+
+    /**
+     * Stops periodic updates of the {@link TextView}. Must be called from the application's main
+     * thread.
+     */
+    public void stop() {
+        if (!started) {
+            return;
+        }
+        started = false;
+        player.removeListener(this);
+        textView.removeCallbacks(this);
+    }
+
+    // ExoPlayer.EventListener implementation.
+
+    @Override
+    public void onLoadingChanged(boolean isLoading) {
+        // Do nothing.
+    }
+
+    @Override
+    public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
+        if (playbackState == ExoPlayer.STATE_BUFFERING && playWhenReady) {
+            bufferingStartAux = Calendar.getInstance().getTimeInMillis();
+            if (isPstFilled)
+                player.increaseStalls();
+        } else if (playbackState == ExoPlayer.STATE_READY) {
+            bufferingEndAux = Calendar.getInstance().getTimeInMillis();
+            if (isPstFilled)
+                player.setStallsDuration(bufferingEndAux - bufferingStartAux);
+            else {
+                playbackStartTime = bufferingEndAux - bufferingStartAux;
+                isPstFilled = true;
+            }
+        }
+        updateAndPost();
+    }
+
+    @Override
+    public void onPositionDiscontinuity() {
+        updateAndPost();
+    }
+
+    @Override
+    public void onTimelineChanged(Timeline timeline, Object manifest) {
+        // Do nothing.
+    }
+
+    @Override
+    public void onPlayerError(ExoPlaybackException error) {
+        // Do nothing.
+    }
+
+    // Runnable implementation.
+
+    @Override
+    public void run() {
+        updateAndPost();
+    }
+
+    // Private methods.
+
+    private void updateAndPost() {
+//    textView.setText(getPlayerStateString() + getPlayerWindowIndexString() + getVideoString() + getAudioString());
+//    textView.setText(getPlayerStateString() + "Buffer Percentage: " + player.getBufferedPercentage() + "%\n" +
+//                     "Buffer Position: " + player.getBufferedPosition() + "\n");
+        if (!(player.getPlaybackState() == ExoPlayer.STATE_ENDED)) {
+            textView.setText(getLogString());
+            textView.removeCallbacks(this);
+            textView.postDelayed(this, REFRESH_INTERVAL_MS);
+        } else {
+            String csv = Environment.getExternalStorageDirectory().getAbsolutePath() + "/".concat(file.concat(".csv"));
+            File header = new File(csv);
+            if (!header.exists())
+                write(getHeader(), false);
+            if (!written)
+                write(buildCsvText(), true);
+        }
+    }
+
+    private String buildCsvText() {
+        Format format = player.getVideoFormat();
+        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy-HH:mm:ss");
+        String txt = sdf.format(new Date()) + ",";
+        txt += initialBR + "," + format.bitrate + "" + ",";
+        txt += initialRes + "," + format.width + "x" + format.height + ",";
+        txt += player.getStalls() + "," + player.getStallsDuration() + ",";
+        txt += playbackStartTime;
+        return txt;
+    }
+
+    private String getLogString() {
+        StringBuilder builder = new StringBuilder();
+        builder.append(getStatusString());
+//    builder.append(getPlayerWindowIndexString());
+        builder.append(getPlayerStateString());
+        builder.append(getBufferProgress());
+        builder.append(getVideoString());
+        builder.append(getAudioString());
+//    builder.append(getDecoderCountersBufferCountString("Video", player.getVideoDecoderCounters()));
+//    builder.append(getDecoderCountersBufferCountString("Audio", player.getAudioDecoderCounters()));
+        builder.append(getStallsString());
+        return builder.toString();
+    }
+
+    private String getPlayerStateString() {
+        String text = "\nPlayback State: ";
+        switch (player.getPlaybackState()) {
+            case ExoPlayer.STATE_BUFFERING:
+                text += "buffering";
+                break;
+            case ExoPlayer.STATE_ENDED:
+                text += "ended";
+                break;
+            case ExoPlayer.STATE_IDLE:
+                text += "idle";
+                break;
+            case ExoPlayer.STATE_READY:
+                text += "ready";
+                break;
+            default:
+                text += "unknown";
+                break;
+        }
+        return text;
+    }
+
+    private String getHeader() {
+        return "Timestamp, Initial Bitrate, Final Bitrate, Initial Res, Final Res, Freezes, Freezes Duration, Playback Start Time";
+    }
+
+    private String getStallsString() {
+        String text = "\nFreezes: " + player.getStalls();
+        text += "\nFreezes Duration: " + player.getStallsDuration() + "ms";
+        text += "\nPlayback Start Time: " + playbackStartTime + "ms";
+        return text;
+    }
+
+    private String getStatusString() {
+        String status = ("Ready to Play: ");
+        status += (player.getPlayWhenReady());
+        status += ("\nIs Loading Content: ");
+        status += (player.isLoading());
+        return status;
+    }
+
+    private void write(String msg, boolean written) {
+        try {
+            this.written = written;
+            String csv = Environment.getExternalStorageDirectory().getAbsolutePath() + "/".concat(file.concat(".csv"));
+            BufferedWriter output = new BufferedWriter(new FileWriter(csv, true));
+            output.append(msg);
+            output.newLine();
+            output.close();
+        } catch (IOException e) {
+            Log.i("teste", e.getMessage());
+        }
+    }
+
+    private String getBufferProgress() {
+        String text = ("\nBuffer Progress: ");
+        text += ((player.getBufferedPosition()) / 1000) + ("s/");
+        text += (player.getDuration() / 1000) + ("s (");
+        text += (player.getBufferedPercentage()) + ("%)");
+        return text;
+    }
+
+    private String getPlayerWindowIndexString() {
+        String index = ("\nPeriod Index: ");
+        index += (player.getCurrentPeriodIndex());
+        return (index.concat("\nWindow Index: ").concat(player.getCurrentWindowIndex() + ""));
+    }
+
+    private String getVideoString() {
+        Format video = player.getVideoFormat();
+        if (video == null) {
+            return "";
+        }
+        if (first) {
+            initialBR = video.bitrate + "";
+            initialRes = video.width + "x" + video.height;
+            first = false;
+        }
+        if (bitrateAux == 0)
+            bitrateAux = video.bitrate;
+        if (bitrateAux != video.bitrate) {
+            bseCont++;
+            bitrateAux = video.bitrate;
+        }
+        String builder = "\nVideo Resolution: ";
+        builder += (video.width);
+        builder += ("x");
+        builder += (video.height);
+        builder += ("\nVideo bitrate: ");
+        builder += (video.bitrate);
+        builder += (" bits/s");
+        builder += ("\nVideo codecs: ");
+        builder += (video.codecs);
+        builder += ("\nBitrate switchs: ");
+        builder += (bseCont);
+//        builder += ("\nVideo framerate: ");
+//        builder += (video.frameRate);
+        return builder;
+
+//        return "\n" + format.sampleMimeType + "(id:" + format.id + " r:" + format.width + "x"
+//                + format.height + getDecoderCountersBufferCountString(player.getVideoDecoderCounters())
+//                + ")";
+    }
+
+    private String getAudioString() {
+        Format format = player.getAudioFormat();
+        if (format == null) {
+            return "";
+        }
+        return "\nAudio samplerate: ".concat(format.sampleRate + "");
+//        return "\n" + format.sampleMimeType + "(id:" + format.id + " hz:" + format.sampleRate + " ch:"
+//                + format.channelCount
+//                + getDecoderCountersBufferCountString(player.getAudioDecoderCounters()) + ")";
+    }
+
+    private String getDecoderCountersBufferCountString(String type, DecoderCounters counters) {
+        if (counters == null) {
+            return "";
+        }
+        counters.ensureUpdated();
+        return "\n" + type + " counters:\n"
+                + "rob:" + counters.renderedOutputBufferCount
+                + " sob:" + counters.skippedOutputBufferCount
+                + " dob:" + counters.droppedOutputBufferCount
+                + " mcdb:" + counters.maxConsecutiveDroppedOutputBufferCount;
+    }
 
 }
