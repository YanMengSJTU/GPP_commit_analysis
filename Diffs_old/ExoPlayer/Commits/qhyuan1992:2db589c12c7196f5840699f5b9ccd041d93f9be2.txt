diff --git a/library/src/androidTest/assets/dash/sample_mpd_2 b/library/src/androidTest/assets/dash/sample_mpd_2
new file mode 100644
index 0000000000..d45ab14f52
--- /dev/null
+++ b/library/src/androidTest/assets/dash/sample_mpd_2
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<MPD xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:mpeg:DASH:schema:MPD:2011" xmlns:yt="http://youtube.com/yt/2012/10/10" xsi:schemaLocation="urn:mpeg:DASH:schema:MPD:2011 DASH-MPD.xsd" minBufferTime="PT1.500S" profiles="urn:mpeg:dash:profile:isoff-main:2011" type="dynamic" availabilityStartTime="2016-10-14T17:00:17" timeShiftBufferDepth="PT7200.000S" minimumUpdatePeriod="PT2.000S" yt:earliestMediaSequence="0" yt:mpdRequestTime="2016-10-14T18:29:17.082" yt:mpdResponseTime="2016-10-14T18:29:17.194">
+ <Period start="PT0.000S" yt:segmentIngestTime="2016-10-14T17:00:14.257">
+  <SegmentTemplate startNumber="0" timescale="1000" media="sq/$Number$">
+   <SegmentTimeline>
+    <S d="2002" t="6009" r="2"/>
+    <S d="1985"/>
+    <S d="2000"/>
+   </SegmentTimeline>
+  </SegmentTemplate>
+  <AdaptationSet id="0" mimeType="audio/mp4" subsegmentAlignment="true">
+   <Role schemeIdUri="urn:mpeg:DASH:role:2011" value="main"/>
+   <Representation id="140" codecs="mp4a.40.2" audioSamplingRate="48000" startWithSAP="1" bandwidth="144000">
+    <AudioChannelConfiguration schemeIdUri="urn:mpeg:dash:23003:3:audio_channel_configuration:2011" value="2"/>
+    <BaseURL>http://redirector.googlevideo.com/videoplayback/id/BktsoMO3OMs.0/itag/140/source/yt_live_broadcast/ratebypass/yes/cmbypass/yes/mime/audio%2Fmp4/live/1/gir/yes/noclen/1/signature/B5137EA0CC278C07DD056D204E863CC81EDEB39E.1AD5D242EBC94922EDA7165353A89A5E08A4103A/key/dg_test0/mpd_version/5/ip/0.0.0.0/ipbits/0/expire/1476490914/sparams/ip,ipbits,expire,id,itag,source,ratebypass,cmbypass,mime,live,gir,noclen/</BaseURL>
+   </Representation>
+  </AdaptationSet>
+  <AdaptationSet id="1" mimeType="video/mp4" subsegmentAlignment="true">
+   <Role schemeIdUri="urn:mpeg:DASH:role:2011" value="main"/>
+   <Representation id="133" codecs="avc1.4d4015" width="426" height="240" startWithSAP="1" maxPlayoutRate="1" bandwidth="258000" frameRate="30">
+    <BaseURL>http://redirector.googlevideo.com/videoplayback/id/BktsoMO3OMs.0/itag/133/source/yt_live_broadcast/ratebypass/yes/cmbypass/yes/mime/video%2Fmp4/live/1/gir/yes/noclen/1/signature/90154AE9C5C9D9D519CBF2E43AB0A1778375992D.40E2E855ADFB38FA7E95E168FEEEA6796B080BD7/key/dg_test0/mpd_version/5/ip/0.0.0.0/ipbits/0/expire/1476490914/sparams/ip,ipbits,expire,id,itag,source,ratebypass,cmbypass,mime,live,gir,noclen/</BaseURL>
+   </Representation>
+   <Representation id="134" codecs="avc1.4d401e" width="640" height="360" startWithSAP="1" maxPlayoutRate="1" bandwidth="646000" frameRate="30">
+    <BaseURL>http://redirector.googlevideo.com/videoplayback/id/BktsoMO3OMs.0/itag/134/source/yt_live_broadcast/ratebypass/yes/cmbypass/yes/mime/video%2Fmp4/live/1/gir/yes/noclen/1/signature/5C094AEFDCEB1A4D2F3C05F8BD095C336EF0E1C3.7AE6B9951B0237AAE6F031927AACAC4974BAFFAA/key/dg_test0/mpd_version/5/ip/0.0.0.0/ipbits/0/expire/1476490914/sparams/ip,ipbits,expire,id,itag,source,ratebypass,cmbypass,mime,live,gir,noclen/</BaseURL>
+   </Representation>
+   <Representation id="135" codecs="avc1.4d401f" width="854" height="480" startWithSAP="1" maxPlayoutRate="1" bandwidth="1171000" frameRate="30">
+    <BaseURL>http://redirector.googlevideo.com/videoplayback/id/BktsoMO3OMs.0/itag/135/source/yt_live_broadcast/ratebypass/yes/cmbypass/yes/mime/video%2Fmp4/live/1/gir/yes/noclen/1/signature/1F7660CA4E5B4AE4D60E18795680E34CDD2EF3C9.800B0A1D5F490DE142CCF4C88C64FD21D42129/key/dg_test0/mpd_version/5/ip/0.0.0.0/ipbits/0/expire/1476490914/sparams/ip,ipbits,expire,id,itag,source,ratebypass,cmbypass,mime,live,gir,noclen/</BaseURL>
+   </Representation>
+   <Representation id="160" codecs="avc1.42c00b" width="256" height="144" startWithSAP="1" maxPlayoutRate="1" bandwidth="124000" frameRate="30">
+    <BaseURL>http://redirector.googlevideo.com/videoplayback/id/BktsoMO3OMs.0/itag/160/source/yt_live_broadcast/ratebypass/yes/cmbypass/yes/mime/video%2Fmp4/live/1/gir/yes/noclen/1/signature/94EB61673784DF0C4237A1A866F2E171C8A64ADB.AEC00AA06C2278FEA8702FB62693B70D8977F46C/key/dg_test0/mpd_version/5/ip/0.0.0.0/ipbits/0/expire/1476490914/sparams/ip,ipbits,expire,id,itag,source,ratebypass,cmbypass,mime,live,gir,noclen/</BaseURL>
+   </Representation>
+   <Representation id="136" codecs="avc1.4d401f" width="1280" height="720" startWithSAP="1" maxPlayoutRate="1" bandwidth="2326000" frameRate="30">
+    <BaseURL>http://redirector.googlevideo.com/videoplayback/id/BktsoMO3OMs.0/itag/136/source/yt_live_broadcast/ratebypass/yes/cmbypass/yes/mime/video%2Fmp4/live/1/gir/yes/noclen/1/signature/6D8C34FC30A1F1A4F700B61180D1C4CCF6274844.29EBCB4A837DE626C52C66CF650519E61C2FF0BF/key/dg_test0/mpd_version/5/ip/0.0.0.0/ipbits/0/expire/1476490914/sparams/ip,ipbits,expire,id,itag,source,ratebypass,cmbypass,mime,live,gir,noclen/</BaseURL>
+   </Representation>
+  </AdaptationSet>
+ </Period>
+</MPD>
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/dash/DashChunkSourceTest.java b/library/src/androidTest/java/com/google/android/exoplayer/dash/DashChunkSourceTest.java
index 7ab71404bb..1110f2c625 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/dash/DashChunkSourceTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/dash/DashChunkSourceTest.java
@@ -187,10 +187,10 @@ public void testLiveEdgeLatency() {
   // Private methods.
 
   private static Representation buildVodRepresentation(Format format) {
-    RangedUri rangedUri = new RangedUri("https://example.com/1.mp4", null, 0, 100);
-    SingleSegmentBase segmentBase = new SingleSegmentBase(rangedUri, 1, 0,
-        "https://example.com/1.mp4", 0, -1);
-    return Representation.newInstance(null, 0, format, segmentBase);
+    String baseUrl = "https://example.com/1.mp4";
+    RangedUri rangedUri = new RangedUri("", 0, 100);
+    SingleSegmentBase segmentBase = new SingleSegmentBase(rangedUri, 1, 0, 0, -1);
+    return Representation.newInstance(null, 0, format, baseUrl, segmentBase);
   }
 
   private static Representation buildSegmentTimelineRepresentation(long timelineDurationMs,
@@ -203,28 +203,29 @@ private static Representation buildSegmentTimelineRepresentation(long timelineDu
     int segmentCount = (int) Util.ceilDivide(timelineDurationMs, LIVE_SEGMENT_DURATION_MS);
     for (int i = 0; i < segmentCount - 1; i++) {
       segmentTimeline.add(new SegmentTimelineElement(segmentStartTimeMs, LIVE_SEGMENT_DURATION_MS));
-      mediaSegments.add(new RangedUri("", "", byteStart, 500L));
+      mediaSegments.add(new RangedUri("", byteStart, 500L));
       segmentStartTimeMs += LIVE_SEGMENT_DURATION_MS;
       byteStart += 500;
     }
     // The final segment duration is calculated so that the total duration is timelineDurationMs.
     long finalSegmentDurationMs = (timelineStartTimeMs + timelineDurationMs) - segmentStartTimeMs;
     segmentTimeline.add(new SegmentTimelineElement(segmentStartTimeMs, finalSegmentDurationMs));
-    mediaSegments.add(new RangedUri("", "", byteStart, 500L));
+    mediaSegments.add(new RangedUri("", byteStart, 500L));
     segmentStartTimeMs += finalSegmentDurationMs;
     byteStart += 500;
     // Construct the list.
     MultiSegmentBase segmentBase = new SegmentList(null, 1000, 0, 0, 0, segmentTimeline,
         mediaSegments);
-    return Representation.newInstance(null, 0, REGULAR_VIDEO, segmentBase);
+    return Representation.newInstance(null, 0, REGULAR_VIDEO, null, segmentBase);
   }
 
   private static Representation buildSegmentTemplateRepresentation() {
     UrlTemplate initializationTemplate = null;
     UrlTemplate mediaTemplate = UrlTemplate.compile("$RepresentationID$/$Number$");
     MultiSegmentBase segmentBase = new SegmentTemplate(null, 1000, 0, 0, LIVE_SEGMENT_DURATION_MS,
-        null, initializationTemplate, mediaTemplate, "http://www.youtube.com");
-    return Representation.newInstance(null, 0, REGULAR_VIDEO, segmentBase);
+        null, initializationTemplate, mediaTemplate);
+    return Representation.newInstance(null, 0, REGULAR_VIDEO, "http://www.youtube.com",
+        segmentBase, null);
   }
 
   private static MediaPresentationDescription buildMpd(long durationMs,
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescriptionParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescriptionParserTest.java
index d733576a15..4790e4dba7 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescriptionParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescriptionParserTest.java
@@ -25,6 +25,7 @@
 public class MediaPresentationDescriptionParserTest extends InstrumentationTestCase {
 
   private static final String SAMPLE_MPD_1 = "dash/sample_mpd_1";
+  private static final String SAMPLE_MPD_2 = "dash/sample_mpd_2";
 
   public void testParseMediaPresentationDescription() throws IOException {
     MediaPresentationDescriptionParser parser = new MediaPresentationDescriptionParser();
@@ -34,4 +35,31 @@ public void testParseMediaPresentationDescription() throws IOException {
     parser.parse("https://example.com/test.mpd", inputStream);
   }
 
+  public void testParseMediaPresentationDescriptionWithSegmentTemplate() throws IOException {
+    MediaPresentationDescriptionParser parser = new MediaPresentationDescriptionParser();
+    InputStream inputStream =
+            getInstrumentation().getContext().getResources().getAssets().open(SAMPLE_MPD_2);
+    // Simple test to ensure that the sample manifest parses without throwing any exceptions.
+    MediaPresentationDescription mpd = parser.parse("https://example.com/test.mpd", inputStream);
+    assertEquals(1, mpd.getPeriodCount());
+
+    Period period = mpd.getPeriod(0);
+    assertNotNull(period);
+    assertEquals(2, period.adaptationSets.size());
+
+    for (AdaptationSet adaptationSet : period.adaptationSets) {
+      assertNotNull(adaptationSet);
+      for (Representation representation : adaptationSet.representations) {
+        if (representation instanceof Representation.MultiSegmentRepresentation) {
+          Representation.MultiSegmentRepresentation multiSegmentRepresentation =
+              (Representation.MultiSegmentRepresentation) representation;
+          int firstSegmentIndex = multiSegmentRepresentation.getFirstSegmentNum();
+          RangedUri uri = multiSegmentRepresentation.getSegmentUrl(firstSegmentIndex);
+          assertTrue(uri.resolveUriString(representation.baseUrl).contains(
+              "redirector.googlevideo.com"));
+        }
+      }
+    }
+  }
+
 }
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/RangedUriTest.java b/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/RangedUriTest.java
index 52d5c1dd07..8bdb49d420 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/RangedUriTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/RangedUriTest.java
@@ -21,57 +21,64 @@
  * Unit test for {@link RangedUri}.
  */
 public class RangedUriTest extends TestCase {
-
-  private static final String FULL_URI = "http://www.test.com/path/file.ext";
+  private static final String BASE_URI = "http://www.test.com/";
+  private static final String PARTIAL_URI = "path/file.ext";
+  private static final String FULL_URI = BASE_URI + PARTIAL_URI;
 
   public void testMerge() {
-    RangedUri rangeA = new RangedUri(null, FULL_URI, 0, 10);
-    RangedUri rangeB = new RangedUri(null, FULL_URI, 10, 10);
-    RangedUri expected = new RangedUri(null, FULL_URI, 0, 20);
-    assertMerge(rangeA, rangeB, expected);
+    RangedUri rangeA = new RangedUri(FULL_URI, 0, 10);
+    RangedUri rangeB = new RangedUri(FULL_URI, 10, 10);
+    RangedUri expected = new RangedUri(FULL_URI, 0, 20);
+    assertMerge(rangeA, rangeB, expected, null);
   }
 
   public void testMergeUnbounded() {
-    RangedUri rangeA = new RangedUri(null, FULL_URI, 0, 10);
-    RangedUri rangeB = new RangedUri(null, FULL_URI, 10, -1);
-    RangedUri expected = new RangedUri(null, FULL_URI, 0, -1);
-    assertMerge(rangeA, rangeB, expected);
+    RangedUri rangeA = new RangedUri(FULL_URI, 0, 10);
+    RangedUri rangeB = new RangedUri(FULL_URI, 10, -1);
+    RangedUri expected = new RangedUri(FULL_URI, 0, -1);
+    assertMerge(rangeA, rangeB, expected, null);
   }
 
   public void testNonMerge() {
     // A and B do not overlap, so should not merge
-    RangedUri rangeA = new RangedUri(null, FULL_URI, 0, 10);
-    RangedUri rangeB = new RangedUri(null, FULL_URI, 11, 10);
-    assertNonMerge(rangeA, rangeB);
+    RangedUri rangeA = new RangedUri(FULL_URI, 0, 10);
+    RangedUri rangeB = new RangedUri(FULL_URI, 11, 10);
+    assertNonMerge(rangeA, rangeB, null);
 
     // A and B do not overlap, so should not merge
-    rangeA = new RangedUri(null, FULL_URI, 0, 10);
-    rangeB = new RangedUri(null, FULL_URI, 11, -1);
-    assertNonMerge(rangeA, rangeB);
+    rangeA = new RangedUri(FULL_URI, 0, 10);
+    rangeB = new RangedUri(FULL_URI, 11, -1);
+    assertNonMerge(rangeA, rangeB, null);
 
     // A and B are bounded but overlap, so should not merge
-    rangeA = new RangedUri(null, FULL_URI, 0, 11);
-    rangeB = new RangedUri(null, FULL_URI, 10, 10);
-    assertNonMerge(rangeA, rangeB);
+    rangeA = new RangedUri(FULL_URI, 0, 11);
+    rangeB = new RangedUri(FULL_URI, 10, 10);
+    assertNonMerge(rangeA, rangeB, null);
 
     // A and B overlap due to unboundedness, so should not merge
-    rangeA = new RangedUri(null, FULL_URI, 0, -1);
-    rangeB = new RangedUri(null, FULL_URI, 10, -1);
-    assertNonMerge(rangeA, rangeB);
+    rangeA = new RangedUri(FULL_URI, 0, -1);
+    rangeB = new RangedUri(FULL_URI, 10, -1);
+    assertNonMerge(rangeA, rangeB, null);
+  }
 
+  public void testMergeWithBaseUri() {
+    RangedUri rangeA = new RangedUri(PARTIAL_URI, 0, 10);
+    RangedUri rangeB = new RangedUri(FULL_URI, 10, 10);
+    RangedUri expected = new RangedUri(FULL_URI, 0, 20);
+    assertMerge(rangeA, rangeB, expected, BASE_URI);
   }
 
-  private void assertMerge(RangedUri rangeA, RangedUri rangeB, RangedUri expected) {
-    RangedUri merged = rangeA.attemptMerge(rangeB);
+  private void assertMerge(RangedUri rangeA, RangedUri rangeB, RangedUri expected, String baseUrl) {
+    RangedUri merged = rangeA.attemptMerge(rangeB, baseUrl);
     assertEquals(expected, merged);
-    merged = rangeB.attemptMerge(rangeA);
+    merged = rangeB.attemptMerge(rangeA, baseUrl);
     assertEquals(expected, merged);
   }
 
-  private void assertNonMerge(RangedUri rangeA, RangedUri rangeB) {
-    RangedUri merged = rangeA.attemptMerge(rangeB);
+  private void assertNonMerge(RangedUri rangeA, RangedUri rangeB, String baseUrl) {
+    RangedUri merged = rangeA.attemptMerge(rangeB, baseUrl);
     assertNull(merged);
-    merged = rangeB.attemptMerge(rangeA);
+    merged = rangeB.attemptMerge(rangeA, baseUrl);
     assertNull(merged);
   }
 
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/RepresentationTest.java b/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/RepresentationTest.java
index 9ddd6131c9..50fd0a95b0 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/RepresentationTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/RepresentationTest.java
@@ -27,13 +27,14 @@
 
   public void testGetCacheKey() {
     String uri = "http://www.google.com";
-    SegmentBase base = new SingleSegmentBase(new RangedUri(uri, null, 0, 1), 1, 0, uri, 1, 1);
+    SegmentBase base = new SingleSegmentBase(new RangedUri(null, 0, 1), 1, 0, 1, 1);
     Format format = new Format("0", MimeTypes.VIDEO_MP4, 1920, 1080, -1, 0, 0, 2500000);
-    Representation representation = Representation.newInstance("test_stream_1", 3, format, base);
+    Representation representation = Representation.newInstance("test_stream_1", 3, format, uri,
+        base);
     assertEquals("test_stream_1.0.3", representation.getCacheKey());
 
     format = new Format("150", MimeTypes.VIDEO_MP4, 1920, 1080, -1, 0, 0, 2500000);
-    representation = Representation.newInstance("test_stream_1", -1, format, base);
+    representation = Representation.newInstance("test_stream_1", -1, format, uri, base);
     assertEquals("test_stream_1.150.-1", representation.getCacheKey());
   }
 
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/DashChunkSource.java b/library/src/main/java/com/google/android/exoplayer/dash/DashChunkSource.java
index 53f5d99b1b..1bcb44d387 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/DashChunkSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/DashChunkSource.java
@@ -681,15 +681,15 @@ private Chunk newInitializationChunk(RangedUri initializationUri, RangedUri inde
     if (initializationUri != null) {
       // It's common for initialization and index data to be stored adjacently. Attempt to merge
       // the two requests together to request both at once.
-      requestUri = initializationUri.attemptMerge(indexUri);
+      requestUri = initializationUri.attemptMerge(indexUri, representation.baseUrl);
       if (requestUri == null) {
         requestUri = initializationUri;
       }
     } else {
       requestUri = indexUri;
     }
-    DataSpec dataSpec = new DataSpec(requestUri.getUri(), requestUri.start, requestUri.length,
-        representation.getCacheKey());
+    DataSpec dataSpec = new DataSpec(requestUri.resolveUri(representation.baseUrl),
+        requestUri.start, requestUri.length, representation.getCacheKey());
     return new InitializationChunk(dataSource, dataSpec, trigger, representation.format,
         extractor, manifestIndex);
   }
@@ -703,8 +703,8 @@ protected Chunk newMediaChunk(
     long startTimeUs = representationHolder.getSegmentStartTimeUs(segmentNum);
     long endTimeUs = representationHolder.getSegmentEndTimeUs(segmentNum);
     RangedUri segmentUri = representationHolder.getSegmentUrl(segmentNum);
-    DataSpec dataSpec = new DataSpec(segmentUri.getUri(), segmentUri.start, segmentUri.length,
-        representation.getCacheKey());
+    DataSpec dataSpec = new DataSpec(segmentUri.resolveUri(representation.baseUrl),
+        segmentUri.start, segmentUri.length, representation.getCacheKey());
 
     long sampleOffsetUs = periodHolder.startTimeUs - representation.presentationTimeOffsetUs;
     if (mimeTypeIsRawText(format.mimeType)) {
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/DashWrappingSegmentIndex.java b/library/src/main/java/com/google/android/exoplayer/dash/DashWrappingSegmentIndex.java
index 5542232e08..71a34c8381 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/DashWrappingSegmentIndex.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/DashWrappingSegmentIndex.java
@@ -58,7 +58,7 @@ public long getDurationUs(int segmentNum, long periodDurationUs) {
 
   @Override
   public RangedUri getSegmentUrl(int segmentNum) {
-    return new RangedUri(uri, null, chunkIndex.offsets[segmentNum], chunkIndex.sizes[segmentNum]);
+    return new RangedUri(null, chunkIndex.offsets[segmentNum], chunkIndex.sizes[segmentNum]);
   }
 
   @Override
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescriptionParser.java b/library/src/main/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescriptionParser.java
index eefa71bc8c..602ee27260 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescriptionParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescriptionParser.java
@@ -54,7 +54,7 @@
 public class MediaPresentationDescriptionParser extends DefaultHandler
     implements UriLoadable.Parser<MediaPresentationDescription> {
 
-  private static final String TAG = "MediaPresentationDescriptionParser";
+  private static final String TAG = "MPDParser";
 
   private static final Pattern FRAME_RATE_PATTERN = Pattern.compile("(\\d+)(?:/(\\d+))?");
 
@@ -202,11 +202,11 @@ protected UtcTimingElement buildUtcTimingElement(String schemeIdUri, String valu
       } else if (ParserUtil.isStartTag(xpp, "AdaptationSet")) {
         adaptationSets.add(parseAdaptationSet(xpp, baseUrl, segmentBase));
       } else if (ParserUtil.isStartTag(xpp, "SegmentBase")) {
-        segmentBase = parseSegmentBase(xpp, baseUrl, null);
+        segmentBase = parseSegmentBase(xpp, null);
       } else if (ParserUtil.isStartTag(xpp, "SegmentList")) {
-        segmentBase = parseSegmentList(xpp, baseUrl, null);
+        segmentBase = parseSegmentList(xpp, null);
       } else if (ParserUtil.isStartTag(xpp, "SegmentTemplate")) {
-        segmentBase = parseSegmentTemplate(xpp, baseUrl, null);
+        segmentBase = parseSegmentTemplate(xpp, null);
       }
     } while (!ParserUtil.isEndTag(xpp, "Period"));
 
@@ -261,11 +261,11 @@ protected AdaptationSet parseAdaptationSet(XmlPullParser xpp, String baseUrl,
       } else if (ParserUtil.isStartTag(xpp, "AudioChannelConfiguration")) {
         audioChannels = parseAudioChannelConfiguration(xpp);
       } else if (ParserUtil.isStartTag(xpp, "SegmentBase")) {
-        segmentBase = parseSegmentBase(xpp, baseUrl, (SingleSegmentBase) segmentBase);
+        segmentBase = parseSegmentBase(xpp, (SingleSegmentBase) segmentBase);
       } else if (ParserUtil.isStartTag(xpp, "SegmentList")) {
-        segmentBase = parseSegmentList(xpp, baseUrl, (SegmentList) segmentBase);
+        segmentBase = parseSegmentList(xpp, (SegmentList) segmentBase);
       } else if (ParserUtil.isStartTag(xpp, "SegmentTemplate")) {
-        segmentBase = parseSegmentTemplate(xpp, baseUrl, (SegmentTemplate) segmentBase);
+        segmentBase = parseSegmentTemplate(xpp, (SegmentTemplate) segmentBase);
       } else if (ParserUtil.isStartTag(xpp)) {
         parseAdaptationSetChild(xpp);
       }
@@ -387,11 +387,11 @@ protected Representation parseRepresentation(XmlPullParser xpp, String baseUrl,
       } else if (ParserUtil.isStartTag(xpp, "AudioChannelConfiguration")) {
         audioChannels = parseAudioChannelConfiguration(xpp);
       } else if (ParserUtil.isStartTag(xpp, "SegmentBase")) {
-        segmentBase = parseSegmentBase(xpp, baseUrl, (SingleSegmentBase) segmentBase);
+        segmentBase = parseSegmentBase(xpp, (SingleSegmentBase) segmentBase);
       } else if (ParserUtil.isStartTag(xpp, "SegmentList")) {
-        segmentBase = parseSegmentList(xpp, baseUrl, (SegmentList) segmentBase);
+        segmentBase = parseSegmentList(xpp, (SegmentList) segmentBase);
       } else if (ParserUtil.isStartTag(xpp, "SegmentTemplate")) {
-        segmentBase = parseSegmentTemplate(xpp, baseUrl, (SegmentTemplate) segmentBase);
+        segmentBase = parseSegmentTemplate(xpp, (SegmentTemplate) segmentBase);
       } else if (ParserUtil.isStartTag(xpp, "ContentProtection")) {
         ContentProtection contentProtection = parseContentProtection(xpp);
         if (contentProtection != null) {
@@ -403,7 +403,7 @@ protected Representation parseRepresentation(XmlPullParser xpp, String baseUrl,
     Format format = buildFormat(id, mimeType, width, height, frameRate, audioChannels,
         audioSamplingRate, bandwidth, language, codecs);
     return buildRepresentation(contentId, -1, format,
-        segmentBase != null ? segmentBase : new SingleSegmentBase(baseUrl));
+        segmentBase != null ? segmentBase : new SingleSegmentBase(), baseUrl);
   }
 
   protected Format buildFormat(String id, String mimeType, int width, int height, float frameRate,
@@ -413,14 +413,14 @@ protected Format buildFormat(String id, String mimeType, int width, int height,
   }
 
   protected Representation buildRepresentation(String contentId, int revisionId, Format format,
-      SegmentBase segmentBase) {
-    return Representation.newInstance(contentId, revisionId, format, segmentBase);
+      SegmentBase segmentBase, String baseUrl) {
+    return Representation.newInstance(contentId, revisionId, format, baseUrl, segmentBase, null);
   }
 
   // SegmentBase, SegmentList and SegmentTemplate parsing.
 
-  protected SingleSegmentBase parseSegmentBase(XmlPullParser xpp, String baseUrl,
-      SingleSegmentBase parent) throws XmlPullParserException, IOException {
+  protected SingleSegmentBase parseSegmentBase(XmlPullParser xpp, SingleSegmentBase parent)
+      throws XmlPullParserException, IOException {
 
     long timescale = parseLong(xpp, "timescale", parent != null ? parent.timescale : 1);
     long presentationTimeOffset = parseLong(xpp, "presentationTimeOffset",
@@ -439,21 +439,21 @@ protected SingleSegmentBase parseSegmentBase(XmlPullParser xpp, String baseUrl,
     do {
       xpp.next();
       if (ParserUtil.isStartTag(xpp, "Initialization")) {
-        initialization = parseInitialization(xpp, baseUrl);
+        initialization = parseInitialization(xpp);
       }
     } while (!ParserUtil.isEndTag(xpp, "SegmentBase"));
 
-    return buildSingleSegmentBase(initialization, timescale, presentationTimeOffset, baseUrl,
+    return buildSingleSegmentBase(initialization, timescale, presentationTimeOffset,
         indexStart, indexLength);
   }
 
   protected SingleSegmentBase buildSingleSegmentBase(RangedUri initialization, long timescale,
-      long presentationTimeOffset, String baseUrl, long indexStart, long indexLength) {
-    return new SingleSegmentBase(initialization, timescale, presentationTimeOffset, baseUrl,
-        indexStart, indexLength);
+      long presentationTimeOffset, long indexStart, long indexLength) {
+    return new SingleSegmentBase(initialization, timescale, presentationTimeOffset, indexStart,
+        indexLength);
   }
 
-  protected SegmentList parseSegmentList(XmlPullParser xpp, String baseUrl, SegmentList parent)
+  protected SegmentList parseSegmentList(XmlPullParser xpp, SegmentList parent)
       throws XmlPullParserException, IOException {
 
     long timescale = parseLong(xpp, "timescale", parent != null ? parent.timescale : 1);
@@ -469,14 +469,14 @@ protected SegmentList parseSegmentList(XmlPullParser xpp, String baseUrl, Segmen
     do {
       xpp.next();
       if (ParserUtil.isStartTag(xpp, "Initialization")) {
-        initialization = parseInitialization(xpp, baseUrl);
+        initialization = parseInitialization(xpp);
       } else if (ParserUtil.isStartTag(xpp, "SegmentTimeline")) {
         timeline = parseSegmentTimeline(xpp);
       } else if (ParserUtil.isStartTag(xpp, "SegmentURL")) {
         if (segments == null) {
           segments = new ArrayList<>();
         }
-        segments.add(parseSegmentUrl(xpp, baseUrl));
+        segments.add(parseSegmentUrl(xpp));
       }
     } while (!ParserUtil.isEndTag(xpp, "SegmentList"));
 
@@ -497,8 +497,8 @@ protected SegmentList buildSegmentList(RangedUri initialization, long timescale,
         startNumber, duration, timeline, segments);
   }
 
-  protected SegmentTemplate parseSegmentTemplate(XmlPullParser xpp, String baseUrl,
-      SegmentTemplate parent) throws XmlPullParserException, IOException {
+  protected SegmentTemplate parseSegmentTemplate(XmlPullParser xpp, SegmentTemplate parent)
+      throws XmlPullParserException, IOException {
 
     long timescale = parseLong(xpp, "timescale", parent != null ? parent.timescale : 1);
     long presentationTimeOffset = parseLong(xpp, "presentationTimeOffset",
@@ -516,7 +516,7 @@ protected SegmentTemplate parseSegmentTemplate(XmlPullParser xpp, String baseUrl
     do {
       xpp.next();
       if (ParserUtil.isStartTag(xpp, "Initialization")) {
-        initialization = parseInitialization(xpp, baseUrl);
+        initialization = parseInitialization(xpp);
       } else if (ParserUtil.isStartTag(xpp, "SegmentTimeline")) {
         timeline = parseSegmentTimeline(xpp);
       }
@@ -528,15 +528,15 @@ protected SegmentTemplate parseSegmentTemplate(XmlPullParser xpp, String baseUrl
     }
 
     return buildSegmentTemplate(initialization, timescale, presentationTimeOffset,
-        startNumber, duration, timeline, initializationTemplate, mediaTemplate, baseUrl);
+        startNumber, duration, timeline, initializationTemplate, mediaTemplate);
   }
 
   protected SegmentTemplate buildSegmentTemplate(RangedUri initialization, long timescale,
       long presentationTimeOffset, int startNumber, long duration,
       List<SegmentTimelineElement> timeline, UrlTemplate initializationTemplate,
-      UrlTemplate mediaTemplate, String baseUrl) {
+      UrlTemplate mediaTemplate) {
     return new SegmentTemplate(initialization, timescale, presentationTimeOffset,
-        startNumber, duration, timeline, initializationTemplate, mediaTemplate, baseUrl);
+        startNumber, duration, timeline, initializationTemplate, mediaTemplate);
   }
 
   protected List<SegmentTimelineElement> parseSegmentTimeline(XmlPullParser xpp)
@@ -571,15 +571,15 @@ protected UrlTemplate parseUrlTemplate(XmlPullParser xpp, String name,
     return defaultValue;
   }
 
-  protected RangedUri parseInitialization(XmlPullParser xpp, String baseUrl) {
-    return parseRangedUrl(xpp, baseUrl, "sourceURL", "range");
+  protected RangedUri parseInitialization(XmlPullParser xpp) {
+    return parseRangedUrl(xpp, "sourceURL", "range");
   }
 
-  protected RangedUri parseSegmentUrl(XmlPullParser xpp, String baseUrl) {
-    return parseRangedUrl(xpp, baseUrl, "media", "mediaRange");
+  protected RangedUri parseSegmentUrl(XmlPullParser xpp) {
+    return parseRangedUrl(xpp, "media", "mediaRange");
   }
 
-  protected RangedUri parseRangedUrl(XmlPullParser xpp, String baseUrl, String urlAttribute,
+  protected RangedUri parseRangedUrl(XmlPullParser xpp, String urlAttribute,
       String rangeAttribute) {
     String urlText = xpp.getAttributeValue(null, urlAttribute);
     long rangeStart = 0;
@@ -592,12 +592,11 @@ protected RangedUri parseRangedUrl(XmlPullParser xpp, String baseUrl, String url
         rangeLength = Long.parseLong(rangeTextArray[1]) - rangeStart + 1;
       }
     }
-    return buildRangedUri(baseUrl, urlText, rangeStart, rangeLength);
+    return buildRangedUri(urlText, rangeStart, rangeLength);
   }
 
-  protected RangedUri buildRangedUri(String baseUrl, String urlText, long rangeStart,
-      long rangeLength) {
-    return new RangedUri(baseUrl, urlText, rangeStart, rangeLength);
+  protected RangedUri buildRangedUri(String urlText, long rangeStart, long rangeLength) {
+    return new RangedUri(urlText, rangeStart, rangeLength);
   }
 
   // AudioChannelConfiguration parsing.
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/mpd/RangedUri.java b/library/src/main/java/com/google/android/exoplayer/dash/mpd/RangedUri.java
index 121cc9fe62..1ac6b76ca7 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/mpd/RangedUri.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/mpd/RangedUri.java
@@ -16,11 +16,10 @@
 package com.google.android.exoplayer.dash.mpd;
 
 import android.net.Uri;
-import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.UriUtil;
 
 /**
- * Defines a range of data located at a {@link Uri}.
+ * Defines a range of data located at a reference uri.
  */
 public final class RangedUri {
 
@@ -34,12 +33,6 @@
    */
   public final long length;
 
-  // The URI is stored internally in two parts: reference URI and a base URI to use when
-  // resolving it. This helps optimize memory usage in the same way that DASH manifests allow many
-  // URLs to be expressed concisely in the form of a single BaseURL and many relative paths. Note
-  // that this optimization relies on the same object being passed as the base URI to many
-  // instances of this class.
-  private final String baseUri;
   private final String referenceUri;
 
   private int hashCode;
@@ -47,57 +40,57 @@
   /**
    * Constructs an ranged uri.
    *
-   * @param baseUri A uri that can form the base of the uri defined by the instance.
-   * @param referenceUri A reference uri that should be resolved with respect to {@code baseUri}.
+   * @param referenceUri The reference uri.
    * @param start The (zero based) index of the first byte of the range.
    * @param length The length of the range, or -1 to indicate that the range is unbounded.
    */
-  public RangedUri(String baseUri, String referenceUri, long start, long length) {
-    Assertions.checkArgument(baseUri != null || referenceUri != null);
-    this.baseUri = baseUri;
-    this.referenceUri = referenceUri;
+  public RangedUri(String referenceUri, long start, long length) {
+    this.referenceUri = referenceUri == null ? "" : referenceUri;
     this.start = start;
     this.length = length;
   }
 
   /**
-   * Returns the {@link Uri} represented by the instance.
+   * Returns the resolved {@link Uri} represented by the instance.
    *
-   * @return The {@link Uri} represented by the instance.
+   * @param baseUri The base Uri.
+   * @return The resolved {@link Uri} represented by the instance.
    */
-  public Uri getUri() {
+  public Uri resolveUri(String baseUri) {
     return UriUtil.resolveToUri(baseUri, referenceUri);
   }
 
   /**
-   * Returns the uri represented by the instance as a string.
+   * Returns the resolve uri represented by the instance as a string.
    *
-   * @return The uri represented by the instance.
+   * @param baseUri The base uri.
+   * @return The resolved uri represented by the instance.
    */
-  public String getUriString() {
+  public String resolveUriString(String baseUri) {
     return UriUtil.resolve(baseUri, referenceUri);
   }
 
   /**
-   * Attempts to merge this {@link RangedUri} with another.
+   * Attempts to merge this {@link RangedUri} with another and an optional common base uri.
    * <p>
-   * A merge is successful if both instances define the same {@link Uri}, and if one starte the
-   * byte after the other ends, forming a contiguous region with no overlap.
+   * A merge is successful if both instances define the same {@link Uri} after resolution with the
+   * base Uri, and if one starts the byte after the other ends, forming a contiguous region with
+   * no overlap.
    * <p>
    * If {@code other} is null then the merge is considered unsuccessful, and null is returned.
    *
    * @param other The {@link RangedUri} to merge.
+   * @param baseUri The optional base uri.
    * @return The merged {@link RangedUri} if the merge was successful. Null otherwise.
    */
-  public RangedUri attemptMerge(RangedUri other) {
-    if (other == null || !getUriString().equals(other.getUriString())) {
+  public RangedUri attemptMerge(RangedUri other, String baseUri) {
+    final String resolvedUri = resolveUriString(baseUri);
+    if (other == null || !resolvedUri.equals(other.resolveUriString(baseUri))) {
       return null;
     } else if (length != -1 && start + length == other.start) {
-      return new RangedUri(baseUri, referenceUri, start,
-          other.length == -1 ? -1 : length + other.length);
+      return new RangedUri(resolvedUri, start, other.length == -1 ? -1 : length + other.length);
     } else if (other.length != -1 && other.start + other.length == start) {
-      return new RangedUri(baseUri, referenceUri, other.start,
-          length == -1 ? -1 : other.length + length);
+      return new RangedUri(resolvedUri, other.start, length == -1 ? -1 : other.length + length);
     } else {
       return null;
     }
@@ -109,7 +102,7 @@ public int hashCode() {
       int result = 17;
       result = 31 * result + (int) start;
       result = 31 * result + (int) length;
-      result = 31 * result + getUriString().hashCode();
+      result = 31 * result + referenceUri.hashCode();
       hashCode = result;
     }
     return hashCode;
@@ -126,7 +119,6 @@ public boolean equals(Object obj) {
     RangedUri other = (RangedUri) obj;
     return this.start == other.start
         && this.length == other.length
-        && getUriString().equals(other.getUriString());
+        && this.referenceUri.equals(other.referenceUri);
   }
-
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/mpd/Representation.java b/library/src/main/java/com/google/android/exoplayer/dash/mpd/Representation.java
index 0da4bcf40e..2fbe709219 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/mpd/Representation.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/mpd/Representation.java
@@ -51,6 +51,10 @@
    * The offset of the presentation timestamps in the media stream relative to media time.
    */
   public final long presentationTimeOffsetUs;
+  /**
+   * The base URL of the representation.
+   */
+  public final String baseUrl;
 
   private final String cacheKey;
   private final RangedUri initializationUri;
@@ -61,12 +65,13 @@
    * @param contentId Identifies the piece of content to which this representation belongs.
    * @param revisionId Identifies the revision of the content.
    * @param format The format of the representation.
+   * @param baseUrl A base URL.
    * @param segmentBase A segment base element for the representation.
    * @return The constructed instance.
    */
   public static Representation newInstance(String contentId, long revisionId, Format format,
-      SegmentBase segmentBase) {
-    return newInstance(contentId, revisionId, format, segmentBase, null);
+      String baseUrl, SegmentBase segmentBase) {
+    return newInstance(contentId, revisionId, format, baseUrl, segmentBase, null);
   }
 
   /**
@@ -75,18 +80,19 @@ public static Representation newInstance(String contentId, long revisionId, Form
    * @param contentId Identifies the piece of content to which this representation belongs.
    * @param revisionId Identifies the revision of the content.
    * @param format The format of the representation.
+   * @param baseUrl The base URL of the representation.
    * @param segmentBase A segment base element for the representation.
    * @param customCacheKey A custom value to be returned from {@link #getCacheKey()}, or null.
    * @return The constructed instance.
    */
   public static Representation newInstance(String contentId, long revisionId, Format format,
-      SegmentBase segmentBase, String customCacheKey) {
+      String baseUrl, SegmentBase segmentBase, String customCacheKey) {
     if (segmentBase instanceof SingleSegmentBase) {
       return new SingleSegmentRepresentation(contentId, revisionId, format,
-          (SingleSegmentBase) segmentBase, customCacheKey, -1);
+          (SingleSegmentBase) segmentBase, customCacheKey, -1, baseUrl);
     } else if (segmentBase instanceof MultiSegmentBase) {
       return new MultiSegmentRepresentation(contentId, revisionId, format,
-          (MultiSegmentBase) segmentBase, customCacheKey);
+          (MultiSegmentBase) segmentBase, customCacheKey, baseUrl);
     } else {
       throw new IllegalArgumentException("segmentBase must be of type SingleSegmentBase or "
           + "MultiSegmentBase");
@@ -94,7 +100,7 @@ public static Representation newInstance(String contentId, long revisionId, Form
   }
 
   private Representation(String contentId, long revisionId, Format format,
-      SegmentBase segmentBase, String customCacheKey) {
+      String baseUrl, SegmentBase segmentBase, String customCacheKey) {
     this.contentId = contentId;
     this.revisionId = revisionId;
     this.format = format;
@@ -102,6 +108,7 @@ private Representation(String contentId, long revisionId, Format format,
         : contentId + "." + format.id + "." + revisionId;
     initializationUri = segmentBase.getInitialization(this);
     presentationTimeOffsetUs = segmentBase.getPresentationTimeOffsetUs();
+    this.baseUrl = baseUrl;
   }
 
   @Override
@@ -178,12 +185,12 @@ public String getCacheKey() {
     public static SingleSegmentRepresentation newInstance(String contentId, long revisionId,
         Format format, String uri, long initializationStart, long initializationEnd,
         long indexStart, long indexEnd, String customCacheKey, long contentLength) {
-      RangedUri rangedUri = new RangedUri(uri, null, initializationStart,
+      RangedUri rangedUri = new RangedUri("", initializationStart,
           initializationEnd - initializationStart + 1);
-      SingleSegmentBase segmentBase = new SingleSegmentBase(rangedUri, 1, 0, uri, indexStart,
+      SingleSegmentBase segmentBase = new SingleSegmentBase(rangedUri, 1, 0, indexStart,
           indexEnd - indexStart + 1);
       return new SingleSegmentRepresentation(contentId, revisionId,
-          format, segmentBase, customCacheKey, contentLength);
+          format, segmentBase, customCacheKey, contentLength, uri);
     }
 
     /**
@@ -195,15 +202,15 @@ public static SingleSegmentRepresentation newInstance(String contentId, long rev
      * @param contentLength The content length, or -1 if unknown.
      */
     public SingleSegmentRepresentation(String contentId, long revisionId, Format format,
-        SingleSegmentBase segmentBase, String customCacheKey, long contentLength) {
-      super(contentId, revisionId, format, segmentBase, customCacheKey);
-      this.uri = Uri.parse(segmentBase.uri);
+        SingleSegmentBase segmentBase, String customCacheKey, long contentLength, String baseUrl) {
+      super(contentId, revisionId, format, baseUrl, segmentBase, customCacheKey);
+      this.uri = Uri.parse(baseUrl);
       this.indexUri = segmentBase.getIndex();
       this.contentLength = contentLength;
       // If we have an index uri then the index is defined externally, and we shouldn't return one
       // directly. If we don't, then we can't do better than an index defining a single segment.
       segmentIndex = indexUri != null ? null
-          : new DashSingleSegmentIndex(new RangedUri(segmentBase.uri, null, 0, contentLength));
+          : new DashSingleSegmentIndex(new RangedUri("", 0, contentLength));
     }
 
     @Override
@@ -234,8 +241,8 @@ public DashSegmentIndex getIndex() {
      * @param customCacheKey A custom value to be returned from {@link #getCacheKey()}, or null.
      */
     public MultiSegmentRepresentation(String contentId, long revisionId, Format format,
-        MultiSegmentBase segmentBase, String customCacheKey) {
-      super(contentId, revisionId, format, segmentBase, customCacheKey);
+        MultiSegmentBase segmentBase, String customCacheKey, String baseUrl) {
+      super(contentId, revisionId, format, baseUrl, segmentBase, customCacheKey);
       this.segmentBase = segmentBase;
     }
 
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/mpd/SegmentBase.java b/library/src/main/java/com/google/android/exoplayer/dash/mpd/SegmentBase.java
index bc68f39b65..c4f9d9796f 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/mpd/SegmentBase.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/mpd/SegmentBase.java
@@ -66,12 +66,6 @@ public long getPresentationTimeOffsetUs() {
    * A {@link SegmentBase} that defines a single segment.
    */
   public static class SingleSegmentBase extends SegmentBase {
-
-    /**
-     * The uri of the segment.
-     */
-    public final String uri;
-
     /* package */ final long indexStart;
     /* package */ final long indexLength;
 
@@ -81,27 +75,22 @@ public long getPresentationTimeOffsetUs() {
      * @param timescale The timescale in units per second.
      * @param presentationTimeOffset The presentation time offset. The value in seconds is the
      *     division of this value and {@code timescale}.
-     * @param uri The uri of the segment.
      * @param indexStart The byte offset of the index data in the segment.
      * @param indexLength The length of the index data in bytes.
      */
     public SingleSegmentBase(RangedUri initialization, long timescale, long presentationTimeOffset,
-        String uri, long indexStart, long indexLength) {
+        long indexStart, long indexLength) {
       super(initialization, timescale, presentationTimeOffset);
-      this.uri = uri;
       this.indexStart = indexStart;
       this.indexLength = indexLength;
     }
 
-    /**
-     * @param uri The uri of the segment.
-     */
-    public SingleSegmentBase(String uri) {
-      this(null, 1, 0, uri, 0, -1);
+    public SingleSegmentBase() {
+      this(null, 1, 0, 0, -1);
     }
 
     public RangedUri getIndex() {
-      return indexLength <= 0 ? null : new RangedUri(uri, null, indexStart, indexLength);
+      return indexLength <= 0 ? null : new RangedUri(null, indexStart, indexLength);
     }
 
   }
@@ -281,8 +270,6 @@ public boolean isExplicit() {
     /* package */ final UrlTemplate initializationTemplate;
     /* package */ final UrlTemplate mediaTemplate;
 
-    private final String baseUrl;
-
     /**
      * @param initialization A {@link RangedUri} corresponding to initialization data, if such data
      *     exists. The value of this parameter is ignored if {@code initializationTemplate} is
@@ -301,16 +288,14 @@ public boolean isExplicit() {
      *     such data exists. If non-null then the {@code initialization} parameter is ignored. If
      *     null then {@code initialization} will be used.
      * @param mediaTemplate A template defining the location of each media segment.
-     * @param baseUrl A url to use as the base for relative urls generated by the templates.
      */
     public SegmentTemplate(RangedUri initialization, long timescale, long presentationTimeOffset,
         int startNumber, long duration, List<SegmentTimelineElement> segmentTimeline,
-        UrlTemplate initializationTemplate, UrlTemplate mediaTemplate, String baseUrl) {
+        UrlTemplate initializationTemplate, UrlTemplate mediaTemplate) {
       super(initialization, timescale, presentationTimeOffset, startNumber,
           duration, segmentTimeline);
       this.initializationTemplate = initializationTemplate;
       this.mediaTemplate = mediaTemplate;
-      this.baseUrl = baseUrl;
     }
 
     @Override
@@ -318,7 +303,7 @@ public RangedUri getInitialization(Representation representation) {
       if (initializationTemplate != null) {
         String urlString = initializationTemplate.buildUri(representation.format.id, 0,
             representation.format.bitrate, 0);
-        return new RangedUri(baseUrl, urlString, 0, -1);
+        return new RangedUri(urlString, 0, -1);
       } else {
         return super.getInitialization(representation);
       }
@@ -334,7 +319,7 @@ public RangedUri getSegmentUrl(Representation representation, int sequenceNumber
       }
       String uriString = mediaTemplate.buildUri(representation.format.id, sequenceNumber,
           representation.format.bitrate, time);
-      return new RangedUri(baseUrl, uriString, 0, -1);
+      return new RangedUri(uriString, 0, -1);
     }
 
     @Override
