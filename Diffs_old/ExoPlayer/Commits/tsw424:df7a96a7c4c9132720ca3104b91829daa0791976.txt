diff --git a/library/src/main/java/com/google/android/exoplayer/MediaCodecUtil.java b/library/src/main/java/com/google/android/exoplayer/MediaCodecUtil.java
index 7a46050f69..0973649f6e 100644
--- a/library/src/main/java/com/google/android/exoplayer/MediaCodecUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/MediaCodecUtil.java
@@ -110,9 +110,11 @@ public static synchronized void warmCodec(String mimeType, boolean secure) {
     MediaCodecListCompat mediaCodecList = Util.SDK_INT >= 21
         ? new MediaCodecListCompatV21(secure) : new MediaCodecListCompatV16();
     Pair<String, CodecCapabilities> codecInfo = getMediaCodecInfo(key, mediaCodecList);
-    // TODO: Verify this cannot occur on v22, and change >= to == [Internal: b/18678462].
-    if (secure && codecInfo == null && Util.SDK_INT >= 21) {
-      // Some devices don't list secure decoders on API level 21. Try the legacy path.
+    if (secure && codecInfo == null && 21 <= Util.SDK_INT && Util.SDK_INT <= 23) {
+      // Some devices don't list secure decoders on API level 21 [Internal: b/18678462]. Try the
+      // legacy path. We also try this path on API levels 22 and 23 as a defensive measure.
+      // TODO: Verify that the issue cannot occur on API levels 22 and 23, and tighten this block
+      // to execute on API level 21 only if confirmed.
       mediaCodecList = new MediaCodecListCompatV16();
       codecInfo = getMediaCodecInfo(key, mediaCodecList);
       if (codecInfo != null) {
diff --git a/library/src/main/java/com/google/android/exoplayer/util/Util.java b/library/src/main/java/com/google/android/exoplayer/util/Util.java
index 48fe7e39bb..85dbf756ca 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/Util.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/Util.java
@@ -62,25 +62,27 @@
    * Like {@link android.os.Build.VERSION#SDK_INT}, but in a place where it can be conveniently
    * overridden for local testing.
    */
-  public static final int SDK_INT = android.os.Build.VERSION.SDK_INT;
+  public static final int SDK_INT =
+      (Build.VERSION.SDK_INT == 23 && Build.VERSION.CODENAME.charAt(0) == 'N') ? 24
+      : Build.VERSION.SDK_INT;
 
   /**
-   * Like {@link android.os.Build#DEVICE}, but in a place where it can be conveniently overridden
+   * Like {@link Build#DEVICE}, but in a place where it can be conveniently overridden
    * for local testing.
    */
-  public static final String DEVICE = android.os.Build.DEVICE;
+  public static final String DEVICE = Build.DEVICE;
 
   /**
-   * Like {@link android.os.Build#MANUFACTURER}, but in a place where it can be conveniently
+   * Like {@link Build#MANUFACTURER}, but in a place where it can be conveniently
    * overridden for local testing.
    */
-  public static final String MANUFACTURER = android.os.Build.MANUFACTURER;
+  public static final String MANUFACTURER = Build.MANUFACTURER;
 
   /**
-   * Like {@link android.os.Build#MODEL}, but in a place where it can be conveniently overridden for
+   * Like {@link Build#MODEL}, but in a place where it can be conveniently overridden for
    * local testing.
    */
-  public static final String MODEL = android.os.Build.MODEL;
+  public static final String MODEL = Build.MODEL;
 
   /**
    * Value returned by {@link #inferContentType(String)} for DASH manifests.
