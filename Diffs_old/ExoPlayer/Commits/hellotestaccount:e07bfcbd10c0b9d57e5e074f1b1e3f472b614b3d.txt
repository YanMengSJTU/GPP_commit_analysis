diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/QueuedDownload.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/QueuedDownload.java
index 2d97556eb9..fdcab9dbd7 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/QueuedDownload.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/QueuedDownload.java
@@ -18,6 +18,7 @@
     private final Object threadLock = new Object();
 
     private ArrayList<ArrayList<T>> parallelQueueList = new ArrayList<>();
+    private ArrayList<Thread> parallelThreadList = new ArrayList<>();
     private int maxQueueSize;
 
     private volatile InterruptedException interruptedExceptionHolder = null;
@@ -51,8 +52,12 @@ void download() throws IOException, InterruptedException {
             targetQueue.add(itemsToDownload.get(i));
         }
 
+        parallelThreadList.clear();
+
         for (int i = 0; i < parallelQueueList.size(); i++) {
-            executeAsync(parallelQueueList.get(i), i);
+            Thread t = createThread(parallelQueueList.get(i), i);
+            parallelThreadList.add(t);
+            t.start();
         }
 
         synchronized (threadLock) {
@@ -62,15 +67,29 @@ void download() throws IOException, InterruptedException {
         }
 
         if (interruptedExceptionHolder != null) {
+            killThreads();
             throw interruptedExceptionHolder;
         }
 
         if (ioExceptionHolder != null) {
+            killThreads();
             throw ioExceptionHolder;
         }
 
     }
 
+    private void killThreads() {
+
+        for (int i = 0; i < parallelThreadList.size(); i++) {
+            Thread thread = parallelThreadList.get(i);
+            if(thread.isAlive()) {
+                thread.interrupt();
+            }
+        }
+
+        parallelThreadList.clear();
+    }
+
     private boolean isAllQueueEmpty() {
 
         for (int i = 0; i < parallelQueueList.size(); i++) {
@@ -83,27 +102,36 @@ private boolean isAllQueueEmpty() {
         return true;
     }
 
-    private void executeAsync(ArrayList<T> queue, int type) {
+    private Thread createThread(ArrayList<T> queue, int type) {
 
-        new Thread(() -> {
+        return new Thread(() -> {
             try {
                 execute(queue, type);
+                notifyMainIfEmpty();
+
             } catch (IOException e) {
                 ioExceptionHolder = e;
-                queue.clear();
+                notifyMain();
             } catch (InterruptedException e) {
                 interruptedExceptionHolder = e;
-                queue.clear();
+                notifyMain();
             }
-            finally {
-                synchronized (threadLock) {
-                    if (isAllQueueEmpty()) {
-                        threadLock.notify();
-                    }
-                }
+        });
+    }
+
+    private void notifyMainIfEmpty() {
+        synchronized (threadLock) {
+            if(isAllQueueEmpty()) {
+                threadLock.notify();
             }
-        }).start();
+        }
+    }
+
+    private void notifyMain() {
 
+        synchronized (threadLock) {
+                threadLock.notify();
+        }
     }
 
     private void execute(ArrayList<T> queue, int type) throws IOException, InterruptedException {
