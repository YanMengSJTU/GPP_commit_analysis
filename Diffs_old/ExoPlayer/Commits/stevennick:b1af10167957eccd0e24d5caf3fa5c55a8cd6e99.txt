diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultExtractorInput.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultExtractorInput.java
index 87355a6c78..995f4547b3 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultExtractorInput.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultExtractorInput.java
@@ -15,6 +15,8 @@
  */
 package com.google.android.exoplayer2.extractor;
 
+import android.util.Log;
+
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.util.Assertions;
@@ -261,6 +263,7 @@ private int readFromDataSource(byte[] target, int offset, int length, int bytesA
       }
       throw new EOFException();
     }
+//    Log.d("DefaultExtractorInput", "readFromDataSource[offset=" +(offset + bytesAlreadyRead)+ ", length=" + ( length - bytesAlreadyRead) + "]");
     return bytesAlreadyRead + bytesRead;
   }
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultTrackOutput.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultTrackOutput.java
index 9ffa6885fc..fe92401a3b 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultTrackOutput.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultTrackOutput.java
@@ -490,7 +490,7 @@ private void dropDownstreamTo(long absolutePosition) {
     int allocationIndex = relativePosition / allocationLength;
     for (int i = 0; i < allocationIndex; i++) {
       Allocation remove = dataQueue.remove();
-      Log.d(TAG, "Remove allocation #"+ remove.id + " from dataQueue[relativePosition=" + relativePosition + ", allocationIndex=" + allocationIndex +"]");
+//      Log.d(TAG, "Remove allocation #"+ remove.id + " from dataQueue[relativePosition=" + relativePosition + ", allocationIndex=" + allocationIndex +"]");
       allocator.release(remove);
       totalBytesDropped += allocationLength;
     }
@@ -649,8 +649,8 @@ private int prepareForAppend(int length) {
     if (lastAllocationOffset == allocationLength) {
       lastAllocationOffset = 0;
       lastAllocation = allocator.allocate();
-      String logMessage = "prepareForAppend(dataQueue enque for #" + lastAllocation.id + "): " + String.valueOf(Arrays.hashCode(lastAllocation.data));
-      Log.d(TAG, logMessage);
+//      String logMessage = "prepareForAppend(dataQueue enque for #" + lastAllocation.id + "): " + String.valueOf(Arrays.hashCode(lastAllocation.data));
+//      Log.d(TAG, logMessage);
       dataQueue.add(lastAllocation);
     }
     return Math.min(length, allocationLength - lastAllocationOffset);
@@ -899,8 +899,8 @@ public synchronized int readData(FormatHolder formatHolder, DecoderInputBuffer b
       extrasHolder.size = sizes[relativeReadIndex];
       extrasHolder.offset = offsets[relativeReadIndex];
       extrasHolder.encryptionKeyId = encryptionKeys[relativeReadIndex];
-      String logMessage = "BufferExtractsHolder[format=" + formats[relativeReadIndex].sampleMimeType + ", size=" +extrasHolder.size+ ", offset="+extrasHolder.offset+"], relaIndex= " +relativeReadIndex+ ", timeUs=" + buffer.timeUs +", largeDeqTimestampUs=" + largestDequeuedTimestampUs;
-      Log.d(TAG, logMessage);
+//      String logMessage = "BufferExtractsHolder[format=" + formats[relativeReadIndex].sampleMimeType + ", size=" +extrasHolder.size+ ", offset="+extrasHolder.offset+"], relaIndex= " +relativeReadIndex+ ", timeUs=" + buffer.timeUs +", largeDeqTimestampUs=" + largestDequeuedTimestampUs;
+//      Log.d(TAG, logMessage);
       largestDequeuedTimestampUs = Math.max(largestDequeuedTimestampUs, buffer.timeUs);
       queueSize--;
       relativeReadIndex++;
@@ -1019,7 +1019,7 @@ public synchronized void commitSample(long timeUs, @C.BufferFlags int sampleFlag
       // Increment the write index.
       queueSize++;
       frameCount  = frameCount + 1;
-      Log.d(TAG, "commitSample[format=" + upstreamFormat.sampleMimeType + ", timeUs="+timeUs+", relWrIndex="+relativeWriteIndex+ ", offset="+offset+", size="+size+", queueSize="+ queueSize + ", frameCount=" + frameCount + ", sampleFlags="+sampleFlags+"]");
+//      Log.d(TAG, "commitSample[format=" + upstreamFormat.sampleMimeType + ", timeUs="+timeUs+", relWrIndex="+relativeWriteIndex+ ", offset="+offset+", size="+size+", queueSize="+ queueSize + ", frameCount=" + frameCount + ", sampleFlags="+sampleFlags+"]");
       if (queueSize == capacity) {
         // Increase the capacity.
         int newCapacity = capacity + SAMPLE_CAPACITY_INCREMENT;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java b/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
index 1eec860db7..af09f05b9c 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
@@ -39,6 +39,7 @@
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.NalUnitUtil;
 //import com.google.android.exoplayer2.util.TraceUtil;
+import com.google.android.exoplayer2.util.TraceUtil;
 import com.google.android.exoplayer2.util.Util;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
@@ -511,9 +512,13 @@ public void render(long positionUs, long elapsedRealtimeUs) throws ExoPlaybackEx
     // We have a format.
     maybeInitCodec();
     if (codec != null) {
-      // TraceUtil.beginSection("drainAndFeed - loop " + loopCount + ", rendered:" + decoderCounters.renderedOutputBufferCount + ", skip:"+ decoderCounters.skippedOutputBufferCount + ", drop:" + decoderCounters.droppedOutputBufferCount);
+       TraceUtil.beginSection("drainAndFeed - loop " + loopCount + ", rendered:" + decoderCounters.renderedOutputBufferCount + ", skip:"+ decoderCounters.skippedOutputBufferCount + ", drop:" + decoderCounters.droppedOutputBufferCount);
+//      TraceUtil.beginSection("drain");
       while (drainOutputBuffer(positionUs, elapsedRealtimeUs)) {}
+//      TraceUtil.endSection();
+//      TraceUtil.beginSection("Feed");
       while (feedInputBuffer()) {}
+//      TraceUtil.endSection();
       // TraceUtil.endSection();
       loopCount++;
     } else {
@@ -687,7 +692,7 @@ private boolean feedInputBuffer() throws ExoPlaybackException {
       // TraceUtil.endSection();
       return true;
     }
-    Log.d(TAG, type + " ByteBuffer bufferIndex @" + inputIndex + " trying queue.");
+//    Log.d(TAG, type + " ByteBuffer bufferIndex @" + inputIndex + " trying queue.");
     int previousIndex = inputIndex;
     // We've read a buffer.
     if (buffer.isEndOfStream()) {
@@ -721,7 +726,7 @@ private boolean feedInputBuffer() throws ExoPlaybackException {
         throw ExoPlaybackException.createForRenderer(e, getIndex());
       }
       // TraceUtil.endSection();
-      Log.d(TAG, type + " ByteBuffer bufferIndex @" + previousIndex + " queued.[EOF, timeUs=" + (buffer.timeUs - RENDERER_TIMESTAMP_OFFSET_US) +"]");
+//      Log.d(TAG, type + " ByteBuffer bufferIndex @" + previousIndex + " queued.[EOF, timeUs=" + (buffer.timeUs - RENDERER_TIMESTAMP_OFFSET_US) +"]");
       return false;
     }
     if (waitingForFirstSyncFrame && !buffer.isKeyFrame()) {
@@ -781,7 +786,7 @@ private boolean feedInputBuffer() throws ExoPlaybackException {
       // TraceUtil.endSection();
       throw ExoPlaybackException.createForRenderer(e, getIndex());
     }
-    Log.d(TAG, type + " ByteBuffer bufferIndex @" + previousIndex + " queued.[timeUs=" + (buffer.timeUs - RENDERER_TIMESTAMP_OFFSET_US) +"]");
+//    Log.d(TAG, type + " ByteBuffer bufferIndex @" + previousIndex + " queued.[timeUs=" + (buffer.timeUs - RENDERER_TIMESTAMP_OFFSET_US) +"]");
     // TraceUtil.endSection();
     return true;
   }
@@ -959,8 +964,9 @@ protected long getDequeueOutputBufferTimeoutUs() {
   @SuppressWarnings("deprecation")
   private boolean drainOutputBuffer(long positionUs, long elapsedRealtimeUs)
       throws ExoPlaybackException {
-    String logMessage = "Deque outputBuffer for " + codec.getInputFormat().getString("mime") + ".";
-    Log.d(TAG, logMessage);
+//    String logMessage = "Deque outputBuffer for " + codec.getInputFormat().getString("mime") + ".";
+//    String logMessage = "Deque outputBuffer";
+//    Log.d(TAG, logMessage);
     if (outputIndex < 0) {
       if (codecNeedsEosOutputExceptionWorkaround && codecReceivedEos) {
         try {
@@ -979,8 +985,9 @@ private boolean drainOutputBuffer(long positionUs, long elapsedRealtimeUs)
             getDequeueOutputBufferTimeoutUs());
       }
       if (outputIndex >= 0) {
-        logMessage = "Release outputBuffer for " + codec.getInputFormat().getString("mime") + ".";
-        Log.d(TAG, logMessage);
+//        logMessage = "Release outputBuffer for " + codec.getInputFormat().getString("mime") + ".";
+//        logMessage = "Release outputBuffer";
+//        Log.d(TAG, logMessage);
         // We've dequeued a buffer.
         if (shouldSkipAdaptationWorkaroundOutputBuffer) {
           shouldSkipAdaptationWorkaroundOutputBuffer = false;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/source/ExtractorMediaPeriod.java b/library/core/src/main/java/com/google/android/exoplayer2/source/ExtractorMediaPeriod.java
index 9f750324e9..ff16ccb423 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/source/ExtractorMediaPeriod.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/source/ExtractorMediaPeriod.java
@@ -98,8 +98,8 @@
   private boolean released;
   private final String TAG = "ExtractorMediaPeriod";
   private final boolean makeSureConstantLatency = false;
-  private final int framesize = 10;
-  private final int fps = 25;
+  private final int frameSize = 10;
+  private final long defaultFrameRate = 25;
 
   /**
    * @param uri The {@link Uri} of the media stream.
@@ -290,6 +290,22 @@ public int getBufferedVideoFrameSize() {
     return frameSize;
   }
 
+  /**
+   * Get current buffered video frame rate.
+   */
+  public float getBufferedVideoFrameRate() {
+    float frameRate = 0;
+    if(!prepared) { return Format.NO_VALUE; }
+    int trackCount = sampleQueues.size();
+    for (int i = 0; i < trackCount; i++) {
+      if (trackIsVideoFlags[i] && trackEnabledStates[i]) {
+        frameRate = sampleQueues.valueAt(i).getUpstreamFormat().frameRate;
+        break;
+      }
+    }
+    return frameRate;
+  }
+
   @Override
   public long getBufferedPositionUs() {
     if (loadingFinished) {
@@ -367,9 +383,11 @@ public long seekToUs(long positionUs) {
   /* package */ void skipData(int track, long positionUs) {
     DefaultTrackOutput sampleQueue = sampleQueues.valueAt(track);
     if (loadingFinished && positionUs > sampleQueue.getLargestQueuedTimestampUs()) {
-      sampleQueue.skipAll();
+        sampleQueue.skipAll();
+        Log.d(TAG, "skipData[positionUs=" + positionUs + ", result=(SkipAll)]");
     } else {
-      sampleQueue.skipToKeyframeBefore(positionUs, true);
+      boolean result = sampleQueue.skipToKeyframeBefore(positionUs, false);
+      Log.d(TAG, "skipData[positionUs=" + positionUs + ", result=" + result + "]");
     }
   }
 
@@ -649,19 +667,22 @@ public void setLoadPosition(long position, long timeUs) {
     /**
      *
      * @param frameSize
-     * @param fps
      */
-    private void limitLatency(int frameSize, int fps) {
-      long largestQueuedTimestampUs = getBufferedPositionUs();
+    private void limitLatency(int frameSize) {
+
       int currentQueuedFrameSize = getBufferedVideoFrameSize();
       if (currentQueuedFrameSize > frameSize) {
         // Skip frames to under frame size defined in frameSize.
+        long largestQueuedTimestampUs = getBufferedPositionUs();
+        long videoFrameRate = (long)getBufferedVideoFrameRate();
+        videoFrameRate = Long.compare(videoFrameRate, -1) == 0 ? defaultFrameRate : videoFrameRate;
+        long nextPositionUs = largestQueuedTimestampUs - (1000000 / (videoFrameRate) * (frameSize + 1));
+//        String logMessage= "extractor.load[SKIP, queuedFrameSize=" + currentQueuedFrameSize +", largestQueuedTimestampUs=" + largestQueuedTimestampUs + ", nextPositionUs=" +nextPositionUs+ "]";
+//        Log.d(TAG, logMessage);
         int track = sampleQueues.size();
         for(int index = 0; index < track; index++) {
-          long nextPositionUs = largestQueuedTimestampUs - (10000 / fps * frameSize);
-          String logMessage= "extractor.load[SKIP, queuedFrameSize=" + currentQueuedFrameSize +", largestQueuedTimestampUs=" + largestQueuedTimestampUs + ", nextPositionUs=" +nextPositionUs+ "]";
-          Log.d(TAG, logMessage);
-          if(trackIsAudioVideoFlags[index] && trackEnabledStates[index]) {
+          // Note: Maybe keep trackIsAudioVideoFlags[index] consideration.
+          if(trackEnabledStates[index]) {
             skipData(index, nextPositionUs);
           }
         }
@@ -690,21 +711,21 @@ public void load() throws IOException, InterruptedException {
           if (length != C.LENGTH_UNSET) {
             length += position;
           }
-          logMessage= "new DefaultExtractorInput & SelectExtractor[initPos=" + position +", length=" + length + "](-1 mean UNKNOWN_LENGTH)";
-          Log.d(TAG, logMessage);
-          TraceUtil.beginSection(logMessage);
+//          logMessage= "new DefaultExtractorInput & SelectExtractor[initPos=" + position +", length=" + length + "](-1 mean UNKNOWN_LENGTH)";
+//          Log.d(TAG, logMessage);
+//          TraceUtil.beginSection(logMessage);
           input = new DefaultExtractorInput(dataSource, position, length);
           Extractor extractor = extractorHolder.selectExtractor(input, dataSource.getUri());
-          TraceUtil.endSection();
+//          TraceUtil.endSection();
           if (pendingExtractorSeek) {
-            logMessage= "ExtractorSeek[initPos=" + position +", seekTimeUs=" + seekTimeUs + "]";
-            Log.d(TAG, logMessage);
+//            logMessage= "ExtractorSeek[initPos=" + position +", seekTimeUs=" + seekTimeUs + "]";
+//            Log.d(TAG, logMessage);
             extractor.seek(position, seekTimeUs);
             pendingExtractorSeek = false;
           }
-          logMessage= "extractor.read[START, inputPos=" + input.getPosition() +", initPos=" + position + "]";
-          Log.d(TAG, logMessage);
-          TraceUtil.beginSection(logMessage);
+//          logMessage= "extractor.read[START, inputPos=" + input.getPosition() +", initPos=" + position + "]";
+//          Log.d(TAG, logMessage);
+//          TraceUtil.beginSection(logMessage);
           while (result == Extractor.RESULT_CONTINUE && !loadCanceled) {
             loadCondition.block();
             result = extractor.read(input, positionHolder);
@@ -714,12 +735,12 @@ public void load() throws IOException, InterruptedException {
               handler.post(onContinueLoadingRequestedRunnable);
             }
             if (makeSureConstantLatency) {
-              this.limitLatency(framesize, fps);
+              this.limitLatency(frameSize);
             }
           }
-          TraceUtil.endSection();
-          logMessage= "extractor.read[PAUSE, inputPos=" + input.getPosition() +", initPos=" + position + "]";
-          Log.d(TAG, logMessage);
+//          TraceUtil.endSection();
+//          logMessage= "extractor.read[PAUSE, inputPos=" + input.getPosition() +", initPos=" + position + "]";
+//          Log.d(TAG, logMessage);
         } finally {
           if (result == Extractor.RESULT_SEEK) {
             result = Extractor.RESULT_CONTINUE;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultAllocator.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultAllocator.java
index 634fc1b4b4..ff45f7d5f9 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultAllocator.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultAllocator.java
@@ -104,10 +104,10 @@ public synchronized Allocation allocate() {
     if (availableCount > 0) {
       allocation = availableAllocations[--availableCount];
       availableAllocations[availableCount] = null;
-      Log.d(TAG, "Reuse previous allocation #"+ allocation.id);
+//      Log.d(TAG, "Reuse previous allocation #"+ allocation.id);
     } else {
       allocation = new Allocation(new byte[individualAllocationSize], 0, allocationId++);
-      Log.d(TAG, "Create new allocation #"+ allocation.id);
+//      Log.d(TAG, "Create new allocation #"+ allocation.id);
     }
     return allocation;
   }
@@ -129,7 +129,7 @@ public synchronized void release(Allocation[] allocations) {
       Assertions.checkArgument(allocation.data == initialAllocationBlock
           || allocation.data.length == individualAllocationSize);
       availableAllocations[availableCount++] = allocation;
-      Log.d(TAG, "Save used allocation as free space #"+ allocation.id);
+//      Log.d(TAG, "Save used allocation as free space #"+ allocation.id);
     }
     allocatedCount -= allocations.length;
     // Wake up threads waiting for the allocated size to drop.
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java b/library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
index 872e4124e7..5c393ca3a8 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
@@ -517,14 +517,14 @@ protected void dropOutputBuffer(MediaCodec codec, int bufferIndex) {
     if (droppedFrames == maxDroppedFramesToNotify) {
       maybeNotifyDroppedFrames();
     }
-    Log.d(TAG, "Video output buffer @" + bufferIndex + " dropped.");
+//    Log.d(TAG, "Video output buffer @" + bufferIndex + " dropped.");
   }
 
   protected void renderOutputBuffer(MediaCodec codec, int bufferIndex) {
     maybeNotifyVideoSizeChanged();
 //    TraceUtil.beginSection("MediaCodecVideoRenderer.releaseOutputBuffer");
     codec.releaseOutputBuffer(bufferIndex, true);
-    Log.d(TAG, "Video output buffer @" + bufferIndex + " rendered.");
+//    Log.d(TAG, "Video output buffer @" + bufferIndex + " rendered.");
 //    TraceUtil.endSection();
     decoderCounters.renderedOutputBufferCount++;
     consecutiveDroppedFrameCount = 0;
@@ -534,13 +534,13 @@ protected void renderOutputBuffer(MediaCodec codec, int bufferIndex) {
   @TargetApi(21)
   protected void renderOutputBufferV21(MediaCodec codec, int bufferIndex, long releaseTimeNs, long bufferPresentationTimeUs) {
     maybeNotifyVideoSizeChanged();
-    String logMessage = "Video output buffer @" + bufferIndex + " start renderer[bufPresentationTimeus=" + (bufferPresentationTimeUs - 60000000) + "]";
-    Log.d(TAG, logMessage);
+//    String logMessage = "Video output buffer @" + bufferIndex + " start renderer[bufPresentationTimeus=" + (bufferPresentationTimeUs - 60000000) + "]";
+//    Log.d(TAG, logMessage);
 //    TraceUtil.beginSection(logMessage);
     codec.releaseOutputBuffer(bufferIndex, releaseTimeNs);
 //    TraceUtil.endSection();
-    logMessage = "Released video output buffer with rendered bufferIndex @" + bufferIndex + "[bufPresentationTimeus=" + (bufferPresentationTimeUs - 60000000) + ", rendered=" + (decoderCounters.renderedOutputBufferCount + 1) + "]";
-    Log.d(TAG, logMessage);
+//    logMessage = "Released video output buffer with rendered bufferIndex @" + bufferIndex + "[bufPresentationTimeus=" + (bufferPresentationTimeUs - 60000000) + ", rendered=" + (decoderCounters.renderedOutputBufferCount + 1) + "]";
+//    Log.d(TAG, logMessage);
     decoderCounters.renderedOutputBufferCount++;
     consecutiveDroppedFrameCount = 0;
     maybeNotifyRenderedFirstFrame();
