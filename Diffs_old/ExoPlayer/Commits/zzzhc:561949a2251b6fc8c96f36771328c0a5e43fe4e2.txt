diff --git a/RELEASENOTES.md b/RELEASENOTES.md
index 5279a24698..5bb858a2eb 100644
--- a/RELEASENOTES.md
+++ b/RELEASENOTES.md
@@ -25,6 +25,8 @@
   management in playlists.
 * Improve text selection logic to always prefer the better language matches
   over other selection parameters.
+* Remove `AnalyticsCollector.Factory`. Instances can be created directly and
+  the `Player` set later using `AnalyticsCollector.setPlayer`.
 
 ### 2.10.4 ###
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerFactory.java b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerFactory.java
index 956f22f719..9168f1bd76 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerFactory.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerFactory.java
@@ -244,7 +244,7 @@ public static SimpleExoPlayer newSimpleInstance(
         loadControl,
         drmSessionManager,
         bandwidthMeter,
-        new AnalyticsCollector.Factory(),
+        new AnalyticsCollector(Clock.DEFAULT),
         Util.getLooper());
   }
 
@@ -257,8 +257,8 @@ public static SimpleExoPlayer newSimpleInstance(
    * @param loadControl The {@link LoadControl} that will be used by the instance.
    * @param drmSessionManager An optional {@link DrmSessionManager}. May be null if the instance
    *     will not be used for DRM protected playbacks.
-   * @param analyticsCollectorFactory A factory for creating the {@link AnalyticsCollector} that
-   *     will collect and forward all player events.
+   * @param analyticsCollector The {@link AnalyticsCollector} that will collect and forward all
+   *     player events.
    */
   public static SimpleExoPlayer newSimpleInstance(
       Context context,
@@ -266,14 +266,14 @@ public static SimpleExoPlayer newSimpleInstance(
       TrackSelector trackSelector,
       LoadControl loadControl,
       @Nullable DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
-      AnalyticsCollector.Factory analyticsCollectorFactory) {
+      AnalyticsCollector analyticsCollector) {
     return newSimpleInstance(
         context,
         renderersFactory,
         trackSelector,
         loadControl,
         drmSessionManager,
-        analyticsCollectorFactory,
+        analyticsCollector,
         Util.getLooper());
   }
 
@@ -302,7 +302,7 @@ public static SimpleExoPlayer newSimpleInstance(
         trackSelector,
         loadControl,
         drmSessionManager,
-        new AnalyticsCollector.Factory(),
+        new AnalyticsCollector(Clock.DEFAULT),
         looper);
   }
 
@@ -315,8 +315,8 @@ public static SimpleExoPlayer newSimpleInstance(
    * @param loadControl The {@link LoadControl} that will be used by the instance.
    * @param drmSessionManager An optional {@link DrmSessionManager}. May be null if the instance
    *     will not be used for DRM protected playbacks.
-   * @param analyticsCollectorFactory A factory for creating the {@link AnalyticsCollector} that
-   *     will collect and forward all player events.
+   * @param analyticsCollector The {@link AnalyticsCollector} that will collect and forward all
+   *     player events.
    * @param looper The {@link Looper} which must be used for all calls to the player and which is
    *     used to call listeners on.
    */
@@ -326,7 +326,7 @@ public static SimpleExoPlayer newSimpleInstance(
       TrackSelector trackSelector,
       LoadControl loadControl,
       @Nullable DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
-      AnalyticsCollector.Factory analyticsCollectorFactory,
+      AnalyticsCollector analyticsCollector,
       Looper looper) {
     return newSimpleInstance(
         context,
@@ -335,7 +335,7 @@ public static SimpleExoPlayer newSimpleInstance(
         loadControl,
         drmSessionManager,
         getDefaultBandwidthMeter(context),
-        analyticsCollectorFactory,
+        analyticsCollector,
         looper);
   }
 
@@ -348,8 +348,8 @@ public static SimpleExoPlayer newSimpleInstance(
    * @param loadControl The {@link LoadControl} that will be used by the instance.
    * @param drmSessionManager An optional {@link DrmSessionManager}. May be null if the instance
    *     will not be used for DRM protected playbacks.
-   * @param analyticsCollectorFactory A factory for creating the {@link AnalyticsCollector} that
-   *     will collect and forward all player events.
+   * @param analyticsCollector The {@link AnalyticsCollector} that will collect and forward all
+   *     player events.
    * @param looper The {@link Looper} which must be used for all calls to the player and which is
    *     used to call listeners on.
    */
@@ -360,7 +360,7 @@ public static SimpleExoPlayer newSimpleInstance(
       LoadControl loadControl,
       @Nullable DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
       BandwidthMeter bandwidthMeter,
-      AnalyticsCollector.Factory analyticsCollectorFactory,
+      AnalyticsCollector analyticsCollector,
       Looper looper) {
     return new SimpleExoPlayer(
         context,
@@ -369,7 +369,7 @@ public static SimpleExoPlayer newSimpleInstance(
         loadControl,
         drmSessionManager,
         bandwidthMeter,
-        analyticsCollectorFactory,
+        analyticsCollector,
         looper);
   }
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java b/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
index a782255cb8..8913fbdaba 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
@@ -144,7 +144,7 @@ protected SimpleExoPlayer(
         loadControl,
         drmSessionManager,
         bandwidthMeter,
-        new AnalyticsCollector.Factory(),
+        new AnalyticsCollector(Clock.DEFAULT),
         looper);
   }
 
@@ -156,8 +156,8 @@ protected SimpleExoPlayer(
    * @param drmSessionManager An optional {@link DrmSessionManager}. May be null if the instance
    *     will not be used for DRM protected playbacks.
    * @param bandwidthMeter The {@link BandwidthMeter} that will be used by the instance.
-   * @param analyticsCollectorFactory A factory for creating the {@link AnalyticsCollector} that
-   *     will collect and forward all player events.
+   * @param analyticsCollector The {@link AnalyticsCollector} that will collect and forward all
+   *     player events.
    * @param looper The {@link Looper} which must be used for all calls to the player and which is
    *     used to call listeners on.
    */
@@ -168,7 +168,7 @@ protected SimpleExoPlayer(
       LoadControl loadControl,
       @Nullable DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
       BandwidthMeter bandwidthMeter,
-      AnalyticsCollector.Factory analyticsCollectorFactory,
+      AnalyticsCollector analyticsCollector,
       Looper looper) {
     this(
         context,
@@ -177,7 +177,7 @@ protected SimpleExoPlayer(
         loadControl,
         drmSessionManager,
         bandwidthMeter,
-        analyticsCollectorFactory,
+        analyticsCollector,
         Clock.DEFAULT,
         looper);
   }
@@ -190,8 +190,8 @@ protected SimpleExoPlayer(
    * @param drmSessionManager An optional {@link DrmSessionManager}. May be null if the instance
    *     will not be used for DRM protected playbacks.
    * @param bandwidthMeter The {@link BandwidthMeter} that will be used by the instance.
-   * @param analyticsCollectorFactory A factory for creating the {@link AnalyticsCollector} that
-   *     will collect and forward all player events.
+   * @param analyticsCollector The {@link AnalyticsCollector} that will collect and forward all
+   *     player events.
    * @param clock The {@link Clock} that will be used by the instance. Should always be {@link
    *     Clock#DEFAULT}, unless the player is being used from a test.
    * @param looper The {@link Looper} which must be used for all calls to the player and which is
@@ -204,10 +204,11 @@ protected SimpleExoPlayer(
       LoadControl loadControl,
       @Nullable DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
       BandwidthMeter bandwidthMeter,
-      AnalyticsCollector.Factory analyticsCollectorFactory,
+      AnalyticsCollector analyticsCollector,
       Clock clock,
       Looper looper) {
     this.bandwidthMeter = bandwidthMeter;
+    this.analyticsCollector = analyticsCollector;
     componentListener = new ComponentListener();
     videoListeners = new CopyOnWriteArraySet<>();
     audioListeners = new CopyOnWriteArraySet<>();
@@ -235,7 +236,7 @@ protected SimpleExoPlayer(
     // Build the player and associated objects.
     player =
         new ExoPlayerImpl(renderers, trackSelector, loadControl, bandwidthMeter, clock, looper);
-    analyticsCollector = analyticsCollectorFactory.createAnalyticsCollector(player, clock);
+    analyticsCollector.setPlayer(player);
     addListener(analyticsCollector);
     addListener(componentListener);
     videoDebugListeners.add(analyticsCollector);
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsCollector.java b/library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsCollector.java
index 091696f8bf..825424ae04 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsCollector.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsCollector.java
@@ -67,23 +67,6 @@
         VideoListener,
         AudioListener {
 
-  /** Factory for an analytics collector. */
-  public static class Factory {
-
-    /**
-     * Creates an analytics collector for the specified player.
-     *
-     * @param player The {@link Player} for which data will be collected. Can be null, if the player
-     *     is set by calling {@link AnalyticsCollector#setPlayer(Player)} before using the analytics
-     *     collector.
-     * @param clock A {@link Clock} used to generate timestamps.
-     * @return An analytics collector.
-     */
-    public AnalyticsCollector createAnalyticsCollector(@Nullable Player player, Clock clock) {
-      return new AnalyticsCollector(player, clock);
-    }
-  }
-
   private final CopyOnWriteArraySet<AnalyticsListener> listeners;
   private final Clock clock;
   private final Window window;
@@ -92,17 +75,11 @@ public AnalyticsCollector createAnalyticsCollector(@Nullable Player player, Cloc
   private @MonotonicNonNull Player player;
 
   /**
-   * Creates an analytics collector for the specified player.
+   * Creates an analytics collector.
    *
-   * @param player The {@link Player} for which data will be collected. Can be null, if the player
-   *     is set by calling {@link AnalyticsCollector#setPlayer(Player)} before using the analytics
-   *     collector.
    * @param clock A {@link Clock} used to generate timestamps.
    */
-  protected AnalyticsCollector(@Nullable Player player, Clock clock) {
-    if (player != null) {
-      this.player = player;
-    }
+  public AnalyticsCollector(Clock clock) {
     this.clock = Assertions.checkNotNull(clock);
     listeners = new CopyOnWriteArraySet<>();
     mediaPeriodQueueTracker = new MediaPeriodQueueTracker();
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExoPlayerTestRunner.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExoPlayerTestRunner.java
index 9de7996d3c..7db1987d5b 100644
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExoPlayerTestRunner.java
+++ b/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExoPlayerTestRunner.java
@@ -622,7 +622,7 @@ public TestSimpleExoPlayer(
           loadControl,
           /* drmSessionManager= */ null,
           bandwidthMeter,
-          new AnalyticsCollector.Factory(),
+          new AnalyticsCollector(clock),
           clock,
           Looper.myLooper());
     }
