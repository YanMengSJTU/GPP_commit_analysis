diff --git a/library/build.gradle b/library/build.gradle
index a0d11bddcf..c43f9be2b3 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -81,3 +81,14 @@ publish {
     description = 'The ExoPlayer library.'
     website = 'https://github.com/google/ExoPlayer'
 }
+
+task clearJar(type: Delete) {
+    delete 'build/outputs/exoplayer-1.5.9.jar'
+}
+
+task makeJar(type: Copy) {
+    from('build/intermediates/bundles/release/')
+    into('build/outputs/')
+    include('classes.jar')
+    rename ('classes.jar', 'exoplayer-1.5.9.jar')
+}
\ No newline at end of file
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/HlsChunkSource.java b/library/src/main/java/com/google/android/exoplayer/hls/HlsChunkSource.java
index 52f30bec53..7d69d4e8e1 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/HlsChunkSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/HlsChunkSource.java
@@ -161,6 +161,7 @@
   private byte[] scratchSpace;
   private boolean live;
   private long durationUs;
+  private long broadcastDurationUs;
   private IOException fatalError;
 
   private Uri encryptionKeyUri;
@@ -326,6 +327,17 @@ public long getDurationUs() {
     return durationUs;
   }
 
+  /**
+   * Returns the duration of the broadcast from the start
+   * <p>
+   * This method should only be called after the source has been prepared.
+   *
+   * @return The duration from the start in microseconds.
+   */
+  public long getBroadcastDurationUs() {
+    return broadcastDurationUs;
+  }
+
   /**
    * Returns the number of tracks exposed by the source.
    * <p>
@@ -832,6 +844,7 @@ private void setMediaPlaylist(int variantIndex, HlsMediaPlaylist mediaPlaylist)
     variantPlaylists[variantIndex] = mediaPlaylist;
     live |= mediaPlaylist.live;
     durationUs = live ? C.UNKNOWN_TIME_US : mediaPlaylist.durationUs;
+    broadcastDurationUs = mediaPlaylist.durationUs;
   }
 
   private boolean allVariantsBlacklisted() {
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/HlsSampleSource.java b/library/src/main/java/com/google/android/exoplayer/hls/HlsSampleSource.java
index d7731bb48d..aa2e0b6c15 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/HlsSampleSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/HlsSampleSource.java
@@ -47,7 +47,15 @@
   /**
    * Interface definition for a callback to be notified of {@link HlsSampleSource} events.
    */
-  public interface EventListener extends BaseChunkSampleSourceEventListener {}
+  public interface EventListener extends BaseChunkSampleSourceEventListener {
+    /**
+     * Invoked when the current load operation completes.
+     *
+     * @param broadcastDurationUs Duration of the current broadcast from the beginning.
+     *
+     */
+    void onHlsLoadCompleted(long broadcastDurationUs);
+  }
 
   /**
    * The default minimum number of times to retry loading data prior to failing.
@@ -429,10 +437,10 @@ public void onLoadCompleted(Loadable loadable) {
       previousTsLoadable = currentTsLoadable;
       notifyLoadCompleted(currentLoadable.bytesLoaded(), currentTsLoadable.type,
           currentTsLoadable.trigger, currentTsLoadable.format, currentTsLoadable.startTimeUs,
-          currentTsLoadable.endTimeUs, now, loadDurationMs);
+          currentTsLoadable.endTimeUs, now, loadDurationMs, chunkSource.getBroadcastDurationUs());
     } else {
       notifyLoadCompleted(currentLoadable.bytesLoaded(), currentLoadable.type,
-          currentLoadable.trigger, currentLoadable.format, -1, -1, now, loadDurationMs);
+          currentLoadable.trigger, currentLoadable.format, -1, -1, now, loadDurationMs, chunkSource.getBroadcastDurationUs());
     }
     clearCurrentLoadable();
     maybeStartLoading();
@@ -791,13 +799,14 @@ public void run() {
 
   private void notifyLoadCompleted(final long bytesLoaded, final int type, final int trigger,
       final Format format, final long mediaStartTimeUs, final long mediaEndTimeUs,
-      final long elapsedRealtimeMs, final long loadDurationMs) {
+      final long elapsedRealtimeMs, final long loadDurationMs, final long broadcastDurationUs) {
     if (eventHandler != null && eventListener != null) {
       eventHandler.post(new Runnable()  {
         @Override
         public void run() {
           eventListener.onLoadCompleted(eventSourceId, bytesLoaded, type, trigger, format,
               usToMs(mediaStartTimeUs), usToMs(mediaEndTimeUs), elapsedRealtimeMs, loadDurationMs);
+          eventListener.onHlsLoadCompleted(broadcastDurationUs);
         }
       });
     }
