diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
index 55ba429b20..ce895b6b2b 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
@@ -35,18 +35,6 @@
 import java.net.SocketException;
 import java.nio.ByteBuffer;
 import java.util.Enumeration;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.LinkedBlockingQueue;
-
-import static android.R.attr.offset;
-import static com.google.android.exoplayer2.upstream.TcpDataSource.CMD_LENGTH;
-import static com.google.android.exoplayer2.upstream.TcpDataSource.MAX_QUEUE_SIZE;
-import static com.google.android.exoplayer2.upstream.listen_server.LOGTAG;
-import static com.google.android.exoplayer2.upstream.listen_server.SERVERPORT;
-import static com.google.android.exoplayer2.upstream.listen_server.getInetAddress;
-import static com.google.android.exoplayer2.upstream.listen_server.getLocalIpAddress;
-import static com.google.android.exoplayer2.upstream.listen_server.serverSocket;
-import static com.google.android.exoplayer2.upstream.listen_server.socketRec;
 
 /**
  * A {@link DataSource} for reading local files.
@@ -72,8 +60,7 @@ public FileDataSourceException(IOException cause) {
     private long localRemaining = C.LENGTH_UNSET;
     private long sendLocalAll = C.LENGTH_UNSET;
     private byte[] packetBuffer;
-    private byte[] localPacketBuffer;
-    private BlockingQueue<byte[]> packetBufferQue = new LinkedBlockingQueue<byte[]>();
+    //private BlockingQueue<byte[]> packetBufferQue = new LinkedBlockingQueue<byte[]>();
 
     public long fileTotalLength = C.LENGTH_UNSET;
     public int fileOffset = 0;
@@ -97,12 +84,11 @@ public FileDataSourceException(IOException cause) {
     public final int getfile = 1003;
     public final int byebyebye = 1004;
     public final int seekfile = 1005;
-    public static final int DEFAULT_MAX_PACKET_SIZE = 2000;
-    public static final int DEFAULT_READ_PACKET_SIZE = 1460*5;//1460
+
+    public static final int DEFAULT_READ_PACKET_SIZE = 1460*10;//1460
     public static final int DEFAULT_RECV_PACKET_SIZE = 1460;//1460
     public static final int CMD_LENGTH = 12;
-    public static final int MAX_QUEUE_SIZE = 1;
-    public int testTHread = 0;
+
 
     public String LOGTAG = "vivitest";
     public final listen_server listenServer = listen_server.getInstance();
@@ -117,7 +103,6 @@ public FileDataSource() {
     public FileDataSource(TransferListener<? super FileDataSource> listener) {
         this.listener = listener;
         packetBuffer = new byte[DEFAULT_READ_PACKET_SIZE];
-       // localPacketBuffer = new byte[DEFAULT_MAX_PACKET_SIZE];
         cmdPacketBuffer = new byte[CMD_LENGTH];
     }
 
@@ -144,7 +129,6 @@ public long open(DataSpec dataSpec) throws FileDataSourceException {
                 packetRemaining = 0;
                 PacketBufferLength = 0;
                 sendLocalAll = 0;
-                packetBufferQue.clear();
                 fileOffset = (int) dataSpec.position;
                 localRemaining = 0;
                 bytesRemaining = localRemaining = (dataSpec.length == C.LENGTH_UNSET ? fileTotalLength - dataSpec.position
@@ -157,7 +141,6 @@ public long open(DataSpec dataSpec) throws FileDataSourceException {
                         e.printStackTrace();
                     }
                 }
-                //remotefile.seek(dataSpec.position);
                 seek(dataSpec.position);
             }
         } else {
@@ -250,7 +233,6 @@ public void close() throws FileDataSourceException {
   }
 
   public void makeConnection() {
-      //listenServer = listen_server.getInstance();
       serverSocket = listenServer.getServerSocket();
         if (socketRec == null) {
             try {
@@ -282,7 +264,7 @@ public void makeConnection() {
 
 
   public void disConnection() {
-       // listenServer = listen_server.getInstance();
+
         if (listenServer.getClientSocket() != null) {
                 //sendbyebye to remote
                 Log.d(LOGTAG, " disConnection for a new player");
@@ -381,7 +363,7 @@ public  message_buffer_info fromByteArray(byte [] bytes) {
     }
   }
 
-  private InetAddress getInetAddress()
+  private InetAddress getInetAddress_bak()
   {
     try
     {
