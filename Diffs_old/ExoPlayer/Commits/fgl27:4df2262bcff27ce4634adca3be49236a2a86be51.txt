diff --git a/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.java b/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.java
index fd949db6a2..0e004b0df8 100644
--- a/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.java
+++ b/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.java
@@ -750,14 +750,14 @@ private void updatePlayPauseButton() {
       return;
     }
     boolean requestPlayPauseFocus = false;
-    boolean playing = isPlaying();
+    boolean shouldShowPauseButton = shouldShowPauseButton();
     if (playButton != null) {
-      requestPlayPauseFocus |= playing && playButton.isFocused();
-      playButton.setVisibility(playing ? GONE : VISIBLE);
+      requestPlayPauseFocus |= shouldShowPauseButton && playButton.isFocused();
+      playButton.setVisibility(shouldShowPauseButton ? GONE : VISIBLE);
     }
     if (pauseButton != null) {
-      requestPlayPauseFocus |= !playing && pauseButton.isFocused();
-      pauseButton.setVisibility(!playing ? GONE : VISIBLE);
+      requestPlayPauseFocus |= !shouldShowPauseButton && pauseButton.isFocused();
+      pauseButton.setVisibility(shouldShowPauseButton ? VISIBLE : GONE);
     }
     if (requestPlayPauseFocus) {
       requestPlayPauseFocus();
@@ -945,7 +945,7 @@ private void updateProgress() {
     // Cancel any pending updates and schedule a new one if necessary.
     removeCallbacks(updateProgressAction);
     int playbackState = player == null ? Player.STATE_IDLE : player.getPlaybackState();
-    if (playbackState == Player.STATE_READY && player.getPlayWhenReady()) {
+    if (player.isPlaying()) {
       long mediaTimeDelayMs =
           timeBar != null ? timeBar.getPreferredUpdateDelay() : MAX_UPDATE_INTERVAL_MS;
 
@@ -967,10 +967,10 @@ private void updateProgress() {
   }
 
   private void requestPlayPauseFocus() {
-    boolean playing = isPlaying();
-    if (!playing && playButton != null) {
+    boolean shouldShowPauseButton = shouldShowPauseButton();
+    if (!shouldShowPauseButton && playButton != null) {
       playButton.requestFocus();
-    } else if (playing && pauseButton != null) {
+    } else if (shouldShowPauseButton && pauseButton != null) {
       pauseButton.requestFocus();
     }
   }
@@ -1151,7 +1151,7 @@ public boolean dispatchMediaKeyEvent(KeyEvent event) {
     return true;
   }
 
-  private boolean isPlaying() {
+  private boolean shouldShowPauseButton() {
     return player != null
         && player.getPlaybackState() != Player.STATE_ENDED
         && player.getPlaybackState() != Player.STATE_IDLE
@@ -1221,6 +1221,11 @@ public void onPlayerStateChanged(boolean playWhenReady, @Player.State int playba
       updateProgress();
     }
 
+    @Override
+    public void onIsPlayingChanged(boolean isPlaying) {
+      updateProgress();
+    }
+
     @Override
     public void onRepeatModeChanged(int repeatMode) {
       updateRepeatModeButton();
diff --git a/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerNotificationManager.java b/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerNotificationManager.java
index e4fcb37af3..a5823712f9 100644
--- a/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerNotificationManager.java
+++ b/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerNotificationManager.java
@@ -382,8 +382,6 @@ public void onBitmap(final Bitmap bitmap) {
   private int visibility;
   @Priority private int priority;
   private boolean useChronometer;
-  private boolean wasPlayWhenReady;
-  private int lastPlaybackState;
 
   /**
    * @deprecated Use {@link #createWithNotificationChannel(Context, String, int, int, int,
@@ -663,8 +661,6 @@ public final void setPlayer(@Nullable Player player) {
     }
     this.player = player;
     if (player != null) {
-      wasPlayWhenReady = player.getPlayWhenReady();
-      lastPlaybackState = player.getPlaybackState();
       player.addListener(playerListener);
       startOrUpdateNotification();
     }
@@ -1070,10 +1066,9 @@ private void stopNotification(boolean dismissedByUser) {
     // Changing "showWhen" causes notification flicker if SDK_INT < 21.
     if (Util.SDK_INT >= 21
         && useChronometer
+        && player.isPlaying()
         && !player.isPlayingAd()
-        && !player.isCurrentWindowDynamic()
-        && player.getPlayWhenReady()
-        && player.getPlaybackState() == Player.STATE_READY) {
+        && !player.isCurrentWindowDynamic()) {
       builder
           .setWhen(System.currentTimeMillis() - player.getContentPosition())
           .setShowWhen(true)
@@ -1138,7 +1133,7 @@ private void stopNotification(boolean dismissedByUser) {
       stringActions.add(ACTION_REWIND);
     }
     if (usePlayPauseActions) {
-      if (isPlaying(player)) {
+      if (shouldShowPauseButton(player)) {
         stringActions.add(ACTION_PAUSE);
       } else {
         stringActions.add(ACTION_PLAY);
@@ -1182,10 +1177,10 @@ private void stopNotification(boolean dismissedByUser) {
     if (skipPreviousActionIndex != -1) {
       actionIndices[actionCounter++] = skipPreviousActionIndex;
     }
-    boolean isPlaying = isPlaying(player);
-    if (pauseActionIndex != -1 && isPlaying) {
+    boolean shouldShowPauseButton = shouldShowPauseButton(player);
+    if (pauseActionIndex != -1 && shouldShowPauseButton) {
       actionIndices[actionCounter++] = pauseActionIndex;
-    } else if (playActionIndex != -1 && !isPlaying) {
+    } else if (playActionIndex != -1 && !shouldShowPauseButton) {
       actionIndices[actionCounter++] = playActionIndex;
     }
     if (skipNextActionIndex != -1) {
@@ -1257,7 +1252,7 @@ private void seekTo(Player player, int windowIndex, long positionMs) {
     controlDispatcher.dispatchSeekTo(player, windowIndex, positionMs);
   }
 
-  private boolean isPlaying(Player player) {
+  private boolean shouldShowPauseButton(Player player) {
     return player.getPlaybackState() != Player.STATE_ENDED
         && player.getPlaybackState() != Player.STATE_IDLE
         && player.getPlayWhenReady();
@@ -1328,11 +1323,12 @@ private static void setLargeIcon(NotificationCompat.Builder builder, @Nullable B
 
     @Override
     public void onPlayerStateChanged(boolean playWhenReady, @Player.State int playbackState) {
-      if (wasPlayWhenReady != playWhenReady || lastPlaybackState != playbackState) {
-        startOrUpdateNotification();
-        wasPlayWhenReady = playWhenReady;
-        lastPlaybackState = playbackState;
-      }
+      startOrUpdateNotification();
+    }
+
+    @Override
+    public void onIsPlayingChanged(boolean isPlaying) {
+      startOrUpdateNotification();
     }
 
     @Override
