diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/ExoPlayerManager.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/ExoPlayerManager.java
index 17dd18daf7..0fdad60e34 100644
--- a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/ExoPlayerManager.java
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/ExoPlayerManager.java
@@ -19,7 +19,7 @@
 /**
  * This class attempts to abstract basic state and non ui functionality.
  */
-public abstract class ExoPlayerManager extends PlayerManager
+public abstract class ExoPlayerManager<D> extends PlayerManager<D>
     implements PlaybackPreparer, PlayerControlView.VisibilityListener {
 
   // Saved instance state keys.
@@ -147,10 +147,9 @@ public void onPlayerError(ExoPlaybackException e) {
     onError("onPlayerError", e);
   }
 
-    @Override
-    @SuppressWarnings("ReferenceEquality")
-    public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
-        updateButtonVisibilities();
-    }
-
+  @Override
+  @SuppressWarnings("ReferenceEquality")
+  public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
+    updateButtonVisibilities();
+  }
 }
diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
index aaf39692e8..6611f842c5 100644
--- a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
@@ -23,7 +23,7 @@
  * A class to enforce common and hopefully useful ExoPlayer methods.
  * This class attempts to avoid ui or state methods.
  */
-public abstract class PlayerManager extends Player.DefaultEventListener {
+public abstract class PlayerManager<D> implements Player.EventListener {
 
   // Injected interfaces
   private EventListener eventListener;
@@ -33,10 +33,15 @@
   private final Context mContext;
   private final View itemView;
 
-  // Optional place to store playback information here
+  // 1) Optional place to store playback information. In many cases this is probably the simplest
+  // way to store playback information.
   private Intent mIntent = new Intent();
 
-  /** Default constructor*/
+  // 2) Optional place to store playback information. In some cases that may be easier than using
+  // an intent.
+  private D mData = null;
+
+  /** Default constructor */
   protected PlayerManager(Context context, View itemView) {
     if (context == null) {
       throw new IllegalArgumentException("context may not be null");
@@ -45,7 +50,7 @@ protected PlayerManager(Context context, View itemView) {
     this.itemView = itemView;
   }
 
-  /** Common player methods*/
+  /** Common player methods */
   protected abstract <T extends Player> T getPlayer();
 
   protected abstract void initializePlayer();
@@ -54,7 +59,7 @@ protected PlayerManager(Context context, View itemView) {
 
   protected abstract void releaseAdsLoader();
 
-  /** Getters/Setters*/
+  /** Getters/Setters */
   public Context getContext() {
     return mContext;
   }
@@ -72,6 +77,15 @@ public void setIntent(Intent intent) {
     mIntent = intent;
   }
 
+  // Data methods
+  public D getData() {
+    return mData;
+  }
+
+  public void setData(D data) {
+    mData = data;
+  }
+
   // Listener for internal need to finish
   public void setEventListener(EventListener listener) {
     eventListener = listener;
@@ -97,7 +111,7 @@ protected void finish() {
   }
 
   public <T extends PlayerDependencies> T playerDependencies() {
-    return (T)dependencies;
+    return (T) dependencies;
   }
 
   public void setPlayerDependencies(PlayerDependencies dependencies) {
@@ -105,13 +119,15 @@ public void setPlayerDependencies(PlayerDependencies dependencies) {
   }
 
   /**
-   *  PlayerManager Dependencies
+   * PlayerManager Dependencies
    */
   public interface EventListener {
 
-    /** Initialization errors for output
+    /**
+     * Initialization errors for output
+     *
      * @param message non player related error
-     * @param e       ExoPlayerException, if valid will be a player related error
+     * @param e ExoPlayerException, if valid will be a player related error
      */
     void onError(String message, Exception e);
 
@@ -121,14 +137,14 @@ public void setPlayerDependencies(PlayerDependencies dependencies) {
     void onFinish();
   }
 
-  /** MediaSource builder methods*/
+  /** MediaSource builder methods */
   public interface MediaSourceBuilder {
     MediaSource buildMediaSource(Uri uri);
 
     MediaSource buildMediaSource(Uri uri, @Nullable String overrideExtension);
   }
 
-  /** DataSource.Factory builder methods*/
+  /** DataSource.Factory builder methods */
   public interface DataSourceBuilder {
     /*** Returns a {@link DataSource.Factory}.*/
     DataSource.Factory buildDataSourceFactory();
@@ -137,19 +153,20 @@ public void setPlayerDependencies(PlayerDependencies dependencies) {
     HttpDataSource.Factory buildHttpDataSourceFactory();
   }
 
-  /** Drm builder methods*/
+  /** Drm builder methods */
   public interface DrmSessionManagerBuilder {
-    DefaultDrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManager() throws UnsupportedDrmException;
+    DefaultDrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManager()
+        throws UnsupportedDrmException;
   }
 
-  /** Ads builder methods*/
+  /** Ads builder methods */
   public interface AdsMediaSourceBuilder {
     MediaSource createAdsMediaSource(MediaSource mediaSource, Uri adTagUri);
 
     void releaseAdsLoader();
   }
 
-  /** Main initializer builder class*/
+  /** Main initializer builder class */
   public static class PlayerDependencies<T extends PlayerDependencies.Builder<T>> {
 
     private DataSourceBuilder dataSourceBuilder;
@@ -198,22 +215,22 @@ public Builder(DataSourceBuilder dataSourceBuilder, MediaSourceBuilder mediaSour
 
       public T setDataSourceBuilder(DataSourceBuilder dataSourceBuilder) {
         this.dataSourceBuilder = dataSourceBuilder;
-        return (T)this;
+        return (T) this;
       }
 
       public T setMediaSourceBuilder(MediaSourceBuilder mediaSourceBuilder) {
         this.mediaSourceBuilder = mediaSourceBuilder;
-        return (T)this;
+        return (T) this;
       }
 
       public T setDrmSessionManagerBuilder(DrmSessionManagerBuilder drmSessionManagerBuilder) {
         this.drmSessionManagerBuilder = drmSessionManagerBuilder;
-        return (T)this;
+        return (T) this;
       }
 
       public T setAdsMediaSourceBuilder(AdsMediaSourceBuilder adsMediaSourceBuilder) {
         this.adsMediaSourceBuilder = adsMediaSourceBuilder;
-        return (T)this;
+        return (T) this;
       }
 
       public PlayerDependencies<T> build() {
@@ -221,5 +238,4 @@ public T setAdsMediaSourceBuilder(AdsMediaSourceBuilder adsMediaSourceBuilder) {
       }
     }
   }
-
 }
diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
index 77baa1ccc6..6c7f4f4241 100644
--- a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
@@ -72,16 +72,19 @@
 /**
  * An class that plays media using {@link SimpleExoPlayer}.
  */
-public class SimpleExoPlayerManager extends ExoPlayerManager
+public class SimpleExoPlayerManager<D> extends ExoPlayerManager<D>
     implements OnClickListener {
 
   public static final String ACTION_VIEW = "com.dfbarone.android.exoplayer2.manager.action.VIEW";
-  public static final String ACTION_VIEW_CUSTOM = "com.dfbarone.android.exoplayer2.manager.action.VIEW_CUSTOM";
+  public static final String ACTION_VIEW_CUSTOM =
+      "com.dfbarone.android.exoplayer2.manager.action.VIEW_CUSTOM";
   public static final String URI_EXTRA = "uri";
   public static final String EXTENSION_EXTRA = "extension";
 
-  public static final String ACTION_VIEW_LIST = "com.dfbarone.android.exoplayer2.manager.action.VIEW_LIST";
-  public static final String ACTION_VIEW_LIST_CUSTOM = "com.dfbarone.android.exoplayer2.manager.action.VIEW_LIST_CUSTOM";
+  public static final String ACTION_VIEW_LIST =
+      "com.dfbarone.android.exoplayer2.manager.action.VIEW_LIST";
+  public static final String ACTION_VIEW_LIST_CUSTOM =
+      "com.dfbarone.android.exoplayer2.manager.action.VIEW_LIST_CUSTOM";
   public static final String URI_LIST_EXTRA = "uri_list";
   public static final String EXTENSION_LIST_EXTRA = "extension_list";
 
@@ -127,13 +130,14 @@ public SimpleExoPlayerManager(Context context, View view) {
     }
 
     setPlayerDependencies(new CustomPlayerDependencies.Builder(new DefaultDataSourceBuilder(),
-            new DefaultMediaSourceBuilder()).build());
+        new DefaultMediaSourceBuilder()).build());
 
     if (getView() != null) {
       // Find views
       playerView = getView().findViewById(R.id.player_view);
       if (playerView == null) {
-        throw new IllegalStateException("Your view must contain a PlayerView with an id of R.id.player_view");
+        throw new IllegalStateException(
+            "Your view must contain a PlayerView with an id of R.id.player_view");
       }
       debugRootView = getView().findViewById(R.id.controls_root);
       debugTextView = getView().findViewById(R.id.debug_text_view);
@@ -187,7 +191,8 @@ public void onClick(View view) {
                 && mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_VIDEO)
                 == MappedTrackInfo.RENDERER_SUPPORT_NO_TRACKS);
         Pair<AlertDialog, TrackSelectionView> dialogPair =
-            TrackSelectionView.getDialog(ContextHelper.getActivity(getContext()), title, trackSelector, rendererIndex);
+            TrackSelectionView.getDialog(ContextHelper.getActivity(getContext()), title,
+                trackSelector, rendererIndex);
         dialogPair.second.setShowDisableOption(true);
         dialogPair.second.setAllowAdaptiveSelections(allowAdaptiveSelections);
         dialogPair.first.show();
@@ -213,8 +218,8 @@ public void initializePlayer() {
       Uri[] uris;
       String[] extensions;
       if (ACTION_VIEW.equals(action)) {
-        uris = new Uri[]{intent.getData()};
-        extensions = new String[]{intent.getStringExtra(EXTENSION_EXTRA)};
+        uris = new Uri[] { intent.getData() };
+        extensions = new String[] { intent.getStringExtra(EXTENSION_EXTRA) };
       } else if (ACTION_VIEW_LIST.equals(action)) {
         String[] uriStrings = intent.getStringArrayExtra(URI_LIST_EXTRA);
         uris = new Uri[uriStrings.length];
@@ -226,7 +231,9 @@ public void initializePlayer() {
           extensions = new String[uriStrings.length];
         }
       } else {
-        onError(getContext().getString(R.string.unexpected_intent_action, action), new IllegalStateException(getContext().getString(R.string.unexpected_intent_action, action)));
+        onError(getContext().getString(R.string.unexpected_intent_action, action),
+            new IllegalStateException(
+                getContext().getString(R.string.unexpected_intent_action, action)));
         //finish(getContext().getString(R.string.unexpected_intent_action, action));
         return;
       }
@@ -240,7 +247,8 @@ public void initializePlayer() {
           errorStringId = R.string.error_drm_not_supported;
         } else {
           try {
-            drmSessionManager = playerDependencies().drmSessionManagerBuilder().buildDrmSessionManager();
+            drmSessionManager =
+                playerDependencies().drmSessionManagerBuilder().buildDrmSessionManager();
           } catch (UnsupportedDrmException e) {
             errorStringId = e.reason == UnsupportedDrmException.REASON_UNSUPPORTED_SCHEME
                 ? R.string.error_drm_unsupported_scheme : R.string.error_drm_unknown;
@@ -249,7 +257,8 @@ public void initializePlayer() {
           }
         }
         if (drmSessionManager == null) {
-          onError(getContext().getString(errorStringId), new IllegalStateException(getContext().getString(errorStringId)));
+          onError(getContext().getString(errorStringId),
+              new IllegalStateException(getContext().getString(errorStringId)));
           //finish(getContext().getString(errorStringId));
           return;
         }
@@ -263,30 +272,40 @@ public void initializePlayer() {
       } else if (ABR_ALGORITHM_RANDOM.equals(abrAlgorithm)) {
         trackSelectionFactory = new RandomTrackSelection.Factory();
       } else {
-        onError(getContext().getString(R.string.error_unrecognized_abr_algorithm), new IllegalStateException(getContext().getString(R.string.error_unrecognized_abr_algorithm)));
+        onError(getContext().getString(R.string.error_unrecognized_abr_algorithm),
+            new IllegalStateException(
+                getContext().getString(R.string.error_unrecognized_abr_algorithm)));
         //finish(getContext().getString(R.string.error_unrecognized_abr_algorithm));
         return;
       }
 
-      @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode = DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF;
+      @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode =
+          DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF;
       if (intent.hasExtra(PREFER_EXTENSION_DECODERS_EXTRA)) {
-        boolean preferExtensionDecoders = intent.getBooleanExtra(PREFER_EXTENSION_DECODERS_EXTRA, false);
-        extensionRendererMode = preferExtensionDecoders ? DefaultRenderersFactory.EXTENSION_RENDERER_MODE_PREFER : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_ON;
+        boolean preferExtensionDecoders =
+            intent.getBooleanExtra(PREFER_EXTENSION_DECODERS_EXTRA, false);
+        extensionRendererMode =
+            preferExtensionDecoders ? DefaultRenderersFactory.EXTENSION_RENDERER_MODE_PREFER
+                : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_ON;
       }
 
-      DefaultRenderersFactory renderersFactory = new DefaultRenderersFactory(getContext(), extensionRendererMode);
+      DefaultRenderersFactory renderersFactory =
+          new DefaultRenderersFactory(getContext(), extensionRendererMode);
 
       trackSelector = new DefaultTrackSelector(trackSelectionFactory);
       trackSelector.setParameters(trackSelectorParameters);
       lastSeenTrackGroupArray = null;
 
-      player = ExoPlayerFactory.newSimpleInstance(getContext(), renderersFactory, trackSelector, getLoadControl(), drmSessionManager, BANDWIDTH_METER);
+      player = ExoPlayerFactory.newSimpleInstance(getContext(), renderersFactory, trackSelector,
+          getLoadControl(), drmSessionManager, BANDWIDTH_METER);
       player.addListener(this);
       player.setPlayWhenReady(startAutoPlay);
       player.addAnalyticsListener(new EventLogger(trackSelector));
       if (playerView != null) {
-        if (playerDependencies() instanceof CustomPlayerDependencies && ((CustomPlayerDependencies)playerDependencies()).errorMessageProvider() != null) {
-          playerView.setErrorMessageProvider(((CustomPlayerDependencies)playerDependencies()).errorMessageProvider());
+        if (playerDependencies() instanceof CustomPlayerDependencies
+            && ((CustomPlayerDependencies) playerDependencies()).errorMessageProvider() != null) {
+          playerView.setErrorMessageProvider(
+              ((CustomPlayerDependencies) playerDependencies()).errorMessageProvider());
         }
         playerView.setPlayer(player);
         playerView.setPlaybackPreparer(this);
@@ -298,7 +317,8 @@ public void initializePlayer() {
 
       MediaSource[] mediaSources = new MediaSource[uris.length];
       for (int i = 0; i < uris.length; i++) {
-        mediaSources[i] = playerDependencies().mediaSourceBuilder().buildMediaSource(uris[i], extensions[i]);
+        mediaSources[i] =
+            playerDependencies().mediaSourceBuilder().buildMediaSource(uris[i], extensions[i]);
       }
       mediaSource =
           mediaSources.length == 1 ? mediaSources[0] : new ConcatenatingMediaSource(mediaSources);
@@ -311,11 +331,13 @@ public void initializePlayer() {
           releaseAdsLoader();
           loadedAdTagUri = adTagUri;
         }
-        MediaSource adsMediaSource = playerDependencies().adsMediaSourceBuilder().createAdsMediaSource(mediaSource, Uri.parse(adTagUriString));
+        MediaSource adsMediaSource = playerDependencies().adsMediaSourceBuilder()
+            .createAdsMediaSource(mediaSource, Uri.parse(adTagUriString));
         if (adsMediaSource != null) {
           mediaSource = adsMediaSource;
         } else {
-          onError(getContext().getString(R.string.ima_not_loaded), new IllegalStateException(getContext().getString(R.string.ima_not_loaded)));
+          onError(getContext().getString(R.string.ima_not_loaded),
+              new IllegalStateException(getContext().getString(R.string.ima_not_loaded)));
         }
       } else {
         releaseAdsLoader();
@@ -416,7 +438,8 @@ private void setDebugTextVisibility(int visibility) {
   public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
     super.onTracksChanged(trackGroups, trackSelections);
     if (trackGroups != lastSeenTrackGroupArray) {
-      MappingTrackSelector.MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
+      MappingTrackSelector.MappedTrackInfo mappedTrackInfo =
+          trackSelector.getCurrentMappedTrackInfo();
       if (mappedTrackInfo != null) {
         if (mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_VIDEO)
             == MappingTrackSelector.MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
@@ -433,8 +456,8 @@ public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray tra
 
   public LoadControl getLoadControl() {
     if (playerDependencies() instanceof CustomPlayerDependencies &&
-            ((CustomPlayerDependencies)playerDependencies()).loadControl() != null) {
-      return ((CustomPlayerDependencies)playerDependencies()).loadControl();
+        ((CustomPlayerDependencies) playerDependencies()).loadControl() != null) {
+      return ((CustomPlayerDependencies) playerDependencies()).loadControl();
     } else {
       return new DefaultLoadControl();
     }
@@ -472,7 +495,8 @@ public MediaSource buildMediaSource(Uri uri, @Nullable String overrideExtension)
   }
 
   // Extend base initializePlayer() method dependency builder
-  public static class CustomPlayerDependencies<B extends CustomPlayerDependencies.Builder<B>> extends PlayerDependencies<B> {
+  public static class CustomPlayerDependencies<B extends CustomPlayerDependencies.Builder<B>>
+      extends PlayerDependencies<B> {
 
     private LoadControl loadControl;
     private ErrorMessageProvider errorMessageProvider;
@@ -502,19 +526,18 @@ public Builder(DataSourceBuilder dataSourceBuilder, MediaSourceBuilder mediaSour
 
       public T setLoadControl(LoadControl loadControl) {
         this.loadControl = loadControl;
-        return (T)this;
+        return (T) this;
       }
 
-      public T setErrorMessageProvider(ErrorMessageProvider<ExoPlaybackException> errorMessageProvider) {
+      public T setErrorMessageProvider(
+          ErrorMessageProvider<ExoPlaybackException> errorMessageProvider) {
         this.errorMessageProvider = errorMessageProvider;
-        return (T)this;
+        return (T) this;
       }
 
       public CustomPlayerDependencies build() {
         return new CustomPlayerDependencies(this);
       }
     }
-
   }
-
 }
diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/util/PlayerUtils.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/util/PlayerUtils.java
index 742c8ff911..9325866f38 100644
--- a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/util/PlayerUtils.java
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/util/PlayerUtils.java
@@ -83,5 +83,4 @@ public static void setVisibility(View view, int visibility) {
     }
   }
 
-
 }
