diff --git a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java
index 7adcbe9d30..dee81dd892 100644
--- a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java
+++ b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java
@@ -125,22 +125,16 @@ public void onRequestPermissionsResult(int requestCode, @NonNull String[] permis
               keyRequestPropertiesArray[i + 1]);
         }
       }
+      releaseMediaDrm();
+      mediaDrm = FrameworkMediaDrm.newInstance(uuid);
       return new DefaultDrmSessionManager<>(
-          uuid, FrameworkMediaDrm.newInstance(uuid), drmCallback, null, multiSession);
+          uuid, mediaDrm, drmCallback, null, multiSession);
     }
   }
 
   private class DemoAdsMediaSourceBuilder implements AdsMediaSourceBuilder {
-    // Fields used only for ad playback. The ads loader is loaded via reflection.
-    protected AdsLoader adsLoader;
-    protected ViewGroup adUiViewGroup;
-
-    /**
-     * Returns an ads media source, reusing the ads loader if one exists.
-     */
-    @Override
-    public @Nullable
-    MediaSource createAdsMediaSource(MediaSource mediaSource, Uri adTagUri) {
+    /** Returns an ads media source, reusing the ads loader if one exists. */
+    public @Nullable MediaSource createAdsMediaSource(MediaSource mediaSource, Uri adTagUri) {
       // Load the extension source using reflection so the demo app doesn't have to depend on it.
       // The ads loader is reused for multiple playbacks, so that ad playback can resume.
       try {
@@ -149,30 +143,26 @@ MediaSource createAdsMediaSource(MediaSource mediaSource, Uri adTagUri) {
           // Full class names used so the LINT.IfChange rule triggers should any of the classes move.
           // LINT.IfChange
           Constructor<? extends AdsLoader> loaderConstructor =
-              loaderClass
-                  .asSubclass(AdsLoader.class)
-                  .getConstructor(Context.class, Uri.class);
+                  loaderClass
+                          .asSubclass(AdsLoader.class)
+                          .getConstructor(android.content.Context.class, android.net.Uri.class);
           // LINT.ThenChange(../../../../../../../../proguard-rules.txt)
-          adsLoader = loaderConstructor.newInstance(this, adTagUri);
-          adUiViewGroup = new FrameLayout(/*this*/getContext());
-          // The demo app has a non-null overlay frame layout.
-          if (playerView != null) {
-            playerView.getOverlayFrameLayout().addView(adUiViewGroup);
-          }
+          adsLoader = loaderConstructor.newInstance(getContext(), adTagUri);
         }
+        adsLoader.setPlayer(player);
         AdsMediaSource.MediaSourceFactory adMediaSourceFactory =
-            new AdsMediaSource.MediaSourceFactory() {
-              @Override
-              public MediaSource createMediaSource(Uri uri) {
-                return playerDependencies().mediaSourceBuilder().buildMediaSource(uri);
-              }
-
-              @Override
-              public int[] getSupportedTypes() {
-                return new int[]{C.TYPE_DASH, C.TYPE_SS, C.TYPE_HLS, C.TYPE_OTHER};
-              }
-            };
-        return new AdsMediaSource(mediaSource, adMediaSourceFactory, adsLoader, adUiViewGroup);
+                new AdsMediaSource.MediaSourceFactory() {
+                  @Override
+                  public MediaSource createMediaSource(Uri uri) {
+                    return playerDependencies().mediaSourceBuilder().buildMediaSource(uri);
+                  }
+
+                  @Override
+                  public int[] getSupportedTypes() {
+                    return new int[] {C.TYPE_DASH, C.TYPE_SS, C.TYPE_HLS, C.TYPE_OTHER};
+                  }
+                };
+        return new AdsMediaSource(mediaSource, adMediaSourceFactory, adsLoader, playerView);
       } catch (ClassNotFoundException e) {
         // IMA extension not loaded.
         return null;
diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
index 6611f842c5..3e82871eda 100644
--- a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
@@ -57,6 +57,8 @@ protected PlayerManager(Context context, View itemView) {
 
   protected abstract void releasePlayer();
 
+  protected abstract void releaseMediaDrm();
+
   protected abstract void releaseAdsLoader();
 
   /** Getters/Setters */
diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
index 749c8ec429..6c7ca3973b 100644
--- a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
@@ -38,12 +38,14 @@
 import com.google.android.exoplayer2.SimpleExoPlayer;
 import com.google.android.exoplayer2.drm.DefaultDrmSessionManager;
 import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
+import com.google.android.exoplayer2.drm.FrameworkMediaDrm;
 import com.google.android.exoplayer2.drm.UnsupportedDrmException;
 import com.dfbarone.android.exoplayer2.manager.util.ContextHelper;
 import com.dfbarone.android.exoplayer2.manager.util.PlayerUtils;
 import com.google.android.exoplayer2.source.ConcatenatingMediaSource;
 import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.source.TrackGroupArray;
+import com.google.android.exoplayer2.source.ads.AdsLoader;
 import com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection;
 import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
 import com.google.android.exoplayer2.trackselection.MappingTrackSelector;
@@ -105,10 +107,12 @@
 
   // core
   protected SimpleExoPlayer player;
+  protected FrameworkMediaDrm mediaDrm;
   protected MediaSource mediaSource;
   protected DebugTextViewHelper debugViewHelper;
 
   // Fields used only for ad playback. The ads loader is loaded via reflection.
+  protected AdsLoader adsLoader;
   protected Uri loadedAdTagUri;
 
   // HTTP and DataSource variables
@@ -369,6 +373,18 @@ public void releasePlayer() {
       mediaSource = null;
       trackSelector = null;
     }
+    if (adsLoader != null) {
+      adsLoader.setPlayer(null);
+    }
+    releaseMediaDrm();
+  }
+
+  @Override
+  public void releaseMediaDrm() {
+    if (mediaDrm != null) {
+      mediaDrm.release();
+      mediaDrm = null;
+    }
   }
 
   @Override
