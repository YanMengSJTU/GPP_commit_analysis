diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ts/H265Reader.java b/library/src/main/java/com/google/android/exoplayer/extractor/ts/H265Reader.java
index 0927ffa3b4..a4429ab90c 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ts/H265Reader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ts/H265Reader.java
@@ -120,7 +120,7 @@ public void consume(ParsableByteArray data, long pesTimeUs, boolean startOfPacke
 
           // Indicate the start of the next NAL unit.
           int nalUnitType = NalUnitUtil.getH265NalUnitType(dataArray, nalUnitOffset);
-          startNalUnit(absolutePosition, bytesWrittenPastPosition, nalUnitType);
+          startNalUnit(absolutePosition, bytesWrittenPastPosition, nalUnitType, pesTimeUs);
           // Continue scanning the data.
           offset = nalUnitOffset + 3;
         } else {
@@ -136,7 +136,7 @@ public void packetFinished() {
     // Do nothing.
   }
 
-  private void startNalUnit(long position, int offset, int nalUnitType) {
+  private void startNalUnit(long position, int offset, int nalUnitType, long pesTimeUs) {
     if (!hasOutputFormat) {
       vps.startNalUnit(nalUnitType);
       sps.startNalUnit(nalUnitType);
@@ -144,7 +144,7 @@ private void startNalUnit(long position, int offset, int nalUnitType) {
     }
     prefixSei.startNalUnit(nalUnitType);
     suffixSei.startNalUnit(nalUnitType);
-    sampleReader.startNalUnit(position, offset, nalUnitType);
+    sampleReader.startNalUnit(position, offset, nalUnitType, pesTimeUs);
   }
 
   private void nalUnitData(byte[] dataArray, int offset, int limit) {
@@ -161,7 +161,7 @@ private void nalUnitData(byte[] dataArray, int offset, int limit) {
 
   private void nalUnitEnd(long position, int offset, int discardPadding, long pesTimeUs) {
     if (hasOutputFormat) {
-      sampleReader.endNalUnit(position, offset, pesTimeUs);
+      sampleReader.endNalUnit(position, offset);
     } else {
       vps.endNalUnit(discardPadding);
       sps.endNalUnit(discardPadding);
@@ -377,6 +377,7 @@ private static void skipShortTermRefPicSets(ParsableBitArray bitArray) {
     private long nalUnitStartPosition;
     private boolean nalUnitHasKeyframeData;
     private int nalUnitBytesRead;
+    private long nalUnitTimeUs;
     private boolean lookingForFirstSliceFlag;
     private boolean firstSliceFlag;
 
@@ -396,8 +397,9 @@ public void reset() {
       readingSample = false;
     }
 
-    public void startNalUnit(long position, int offset, int nalUnitType) {
+    public void startNalUnit(long position, int offset, int nalUnitType, long pesTimeUs) {
       firstSliceFlag = false;
+      nalUnitTimeUs = pesTimeUs;
       nalUnitBytesRead = 0;
       nalUnitStartPosition = position;
       // Flush the previous sample when reading a non-VCL NAL unit.
@@ -422,7 +424,7 @@ public void readNalUnitData(byte[] data, int offset, int limit) {
       }
     }
 
-    public void endNalUnit(long position, int offset, long timeUs) {
+    public void endNalUnit(long position, int offset) {
       if (firstSliceFlag) {
         // If the NAL unit ending is the start of a new sample, output the previous one.
         if (readingSample) {
@@ -430,7 +432,7 @@ public void endNalUnit(long position, int offset, long timeUs) {
           outputSample(offset + nalUnitLength);
         }
         samplePosition = nalUnitStartPosition;
-        sampleTimeUs = timeUs;
+        sampleTimeUs = nalUnitTimeUs;
         readingSample = true;
         sampleIsKeyframe = nalUnitHasKeyframeData;
       }
