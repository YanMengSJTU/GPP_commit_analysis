diff --git a/library/src/main/java/com/google/android/exoplayer/CodecCounters.java b/library/src/main/java/com/google/android/exoplayer/CodecCounters.java
index 97b41b33a6..f23b8f421c 100644
--- a/library/src/main/java/com/google/android/exoplayer/CodecCounters.java
+++ b/library/src/main/java/com/google/android/exoplayer/CodecCounters.java
@@ -26,6 +26,7 @@
 
   public int codecInitCount;
   public int codecReleaseCount;
+  public int inputBufferCount;
   public int outputFormatChangedCount;
   public int outputBuffersChangedCount;
   public int renderedOutputBufferCount;
@@ -48,6 +49,7 @@ public String getDebugString() {
     StringBuilder builder = new StringBuilder();
     builder.append("cic:").append(codecInitCount);
     builder.append(" crc:").append(codecReleaseCount);
+    builder.append(" ibc:").append(inputBufferCount);
     builder.append(" ofc:").append(outputFormatChangedCount);
     builder.append(" obc:").append(outputBuffersChangedCount);
     builder.append(" ren:").append(renderedOutputBufferCount);
diff --git a/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java b/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java
index 6e92e90535..7c50609b4b 100644
--- a/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java
@@ -674,6 +674,7 @@ private boolean feedInputBuffer(long positionUs, boolean firstFeed) throws ExoPl
       inputIndex = -1;
       codecReceivedBuffers = true;
       codecReconfigurationState = RECONFIGURATION_STATE_NONE;
+      codecCounters.inputBufferCount++;
       onQueuedInputBuffer(presentationTimeUs);
     } catch (CryptoException e) {
       notifyCryptoError(e);
@@ -789,7 +790,7 @@ protected void onQueuedInputBuffer(long presentationTimeUs) {
    * @param presentationTimeUs The timestamp associated with the output buffer.
    */
   protected void onProcessedOutputBuffer(long presentationTimeUs) {
-    // Do Nothing.
+    // Do nothing.
   }
 
   /**
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/gts/DashTest.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/gts/DashTest.java
index eaaef4aaa2..19d65becec 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/gts/DashTest.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/gts/DashTest.java
@@ -80,9 +80,6 @@
   private static final String H264_MANIFEST = "manifest-h264.mpd";
   private static final String H265_MANIFEST = "manifest-h265.mpd";
   private static final String VP9_MANIFEST = "manifest-vp9.mpd";
-  private static final int AAC_AUDIO_FRAME_COUNT = 5524;
-  private static final int VIDEO_FRAME_COUNT = 3841;
-  private static final int VORBIS_AUDIO_FRAME_COUNT = 7773;
 
   private static final String AAC_AUDIO_REPRESENTATION_ID = "141";
   private static final String H264_BASELINE_240P_VIDEO_REPRESENTATION_ID = "avc-baseline-240";
@@ -177,8 +174,8 @@ public void testH264Fixed() throws IOException {
       return;
     }
     String testName = "testH264Fixed";
-    testDashPlayback(getActivity(), testName, AAC_AUDIO_FRAME_COUNT, VIDEO_FRAME_COUNT,
-        H264_MANIFEST, AAC_AUDIO_REPRESENTATION_ID, false, H264_CDD_FIXED);
+    testDashPlayback(getActivity(), testName, H264_MANIFEST, AAC_AUDIO_REPRESENTATION_ID, false,
+        H264_CDD_FIXED);
   }
 
   public void testH264Adaptive() throws IOException {
@@ -187,9 +184,8 @@ public void testH264Adaptive() throws IOException {
       return;
     }
     String testName = "testH264Adaptive";
-    testDashPlayback(getActivity(), testName, AAC_AUDIO_FRAME_COUNT, VIDEO_FRAME_COUNT,
-        H264_MANIFEST, AAC_AUDIO_REPRESENTATION_ID, ALLOW_ADDITIONAL_VIDEO_FORMATS,
-        H264_CDD_ADAPTIVE);
+    testDashPlayback(getActivity(), testName, H264_MANIFEST, AAC_AUDIO_REPRESENTATION_ID,
+        ALLOW_ADDITIONAL_VIDEO_FORMATS, H264_CDD_ADAPTIVE);
   }
 
   public void testH264AdaptiveWithSeeking() throws IOException {
@@ -198,9 +194,8 @@ public void testH264AdaptiveWithSeeking() throws IOException {
       return;
     }
     String testName = "testH264AdaptiveWithSeeking";
-    testDashPlayback(getActivity(), testName, SEEKING_SCHEDULE, false, AAC_AUDIO_FRAME_COUNT,
-        VIDEO_FRAME_COUNT, H264_MANIFEST, AAC_AUDIO_REPRESENTATION_ID,
-        ALLOW_ADDITIONAL_VIDEO_FORMATS, H264_CDD_ADAPTIVE);
+    testDashPlayback(getActivity(), testName, SEEKING_SCHEDULE, false, H264_MANIFEST,
+        AAC_AUDIO_REPRESENTATION_ID, ALLOW_ADDITIONAL_VIDEO_FORMATS, H264_CDD_ADAPTIVE);
   }
 
   public void testH264AdaptiveWithRendererDisabling() throws IOException {
@@ -209,9 +204,8 @@ public void testH264AdaptiveWithRendererDisabling() throws IOException {
       return;
     }
     String testName = "testH264AdaptiveWithRendererDisabling";
-    testDashPlayback(getActivity(), testName, RENDERER_DISABLING_SCHEDULE, false,
-        AAC_AUDIO_FRAME_COUNT, VIDEO_FRAME_COUNT, H264_MANIFEST, AAC_AUDIO_REPRESENTATION_ID,
-        ALLOW_ADDITIONAL_VIDEO_FORMATS, H264_CDD_ADAPTIVE);
+    testDashPlayback(getActivity(), testName, RENDERER_DISABLING_SCHEDULE, false, H264_MANIFEST,
+        AAC_AUDIO_REPRESENTATION_ID, ALLOW_ADDITIONAL_VIDEO_FORMATS, H264_CDD_ADAPTIVE);
   }
 
   // H265 CDD.
@@ -222,8 +216,8 @@ public void testH265Fixed() throws IOException {
       return;
     }
     String testName = "testH265Fixed";
-    testDashPlayback(getActivity(), testName, AAC_AUDIO_FRAME_COUNT, VIDEO_FRAME_COUNT,
-        H265_MANIFEST, AAC_AUDIO_REPRESENTATION_ID, false, H265_CDD_FIXED);
+    testDashPlayback(getActivity(), testName, H265_MANIFEST, AAC_AUDIO_REPRESENTATION_ID, false,
+        H265_CDD_FIXED);
   }
 
   public void testH265Adaptive() throws IOException {
@@ -232,9 +226,8 @@ public void testH265Adaptive() throws IOException {
       return;
     }
     String testName = "testH265Adaptive";
-    testDashPlayback(getActivity(), testName, AAC_AUDIO_FRAME_COUNT, VIDEO_FRAME_COUNT,
-        H265_MANIFEST, AAC_AUDIO_REPRESENTATION_ID, ALLOW_ADDITIONAL_VIDEO_FORMATS,
-        H265_CDD_ADAPTIVE);
+    testDashPlayback(getActivity(), testName, H265_MANIFEST, AAC_AUDIO_REPRESENTATION_ID,
+        ALLOW_ADDITIONAL_VIDEO_FORMATS, H265_CDD_ADAPTIVE);
   }
 
   public void testH265AdaptiveWithSeeking() throws IOException {
@@ -243,9 +236,8 @@ public void testH265AdaptiveWithSeeking() throws IOException {
       return;
     }
     String testName = "testH265AdaptiveWithSeeking";
-    testDashPlayback(getActivity(), testName, SEEKING_SCHEDULE, false, AAC_AUDIO_FRAME_COUNT,
-        VIDEO_FRAME_COUNT, H265_MANIFEST, AAC_AUDIO_REPRESENTATION_ID,
-        ALLOW_ADDITIONAL_VIDEO_FORMATS, H265_CDD_ADAPTIVE);
+    testDashPlayback(getActivity(), testName, SEEKING_SCHEDULE, false, H265_MANIFEST,
+        AAC_AUDIO_REPRESENTATION_ID, ALLOW_ADDITIONAL_VIDEO_FORMATS, H265_CDD_ADAPTIVE);
   }
 
   public void testH265AdaptiveWithRendererDisabling() throws IOException {
@@ -255,8 +247,8 @@ public void testH265AdaptiveWithRendererDisabling() throws IOException {
     }
     String testName = "testH265AdaptiveWithRendererDisabling";
     testDashPlayback(getActivity(), testName, RENDERER_DISABLING_SCHEDULE, false,
-        AAC_AUDIO_FRAME_COUNT, VIDEO_FRAME_COUNT, H265_MANIFEST, AAC_AUDIO_REPRESENTATION_ID,
-        ALLOW_ADDITIONAL_VIDEO_FORMATS, H265_CDD_ADAPTIVE);
+        H265_MANIFEST, AAC_AUDIO_REPRESENTATION_ID, ALLOW_ADDITIONAL_VIDEO_FORMATS,
+        H265_CDD_ADAPTIVE);
     }
 
   // VP9 (CDD).
@@ -267,8 +259,8 @@ public void testVp9Fixed360p() throws IOException {
       return;
     }
     String testName = "testVp9Fixed360p";
-    testDashPlayback(getActivity(), testName, VORBIS_AUDIO_FRAME_COUNT, VIDEO_FRAME_COUNT,
-        VP9_MANIFEST, VORBIS_AUDIO_REPRESENTATION_ID, false, VP9_CDD_FIXED);
+    testDashPlayback(getActivity(), testName, VP9_MANIFEST, VORBIS_AUDIO_REPRESENTATION_ID, false,
+        VP9_CDD_FIXED);
   }
 
   public void testVp9Adaptive() throws IOException {
@@ -277,9 +269,8 @@ public void testVp9Adaptive() throws IOException {
       return;
     }
     String testName = "testVp9Adaptive";
-    testDashPlayback(getActivity(), testName, VORBIS_AUDIO_FRAME_COUNT, VIDEO_FRAME_COUNT,
-        VP9_MANIFEST, VORBIS_AUDIO_REPRESENTATION_ID, ALLOW_ADDITIONAL_VIDEO_FORMATS,
-        VP9_CDD_ADAPTIVE);
+    testDashPlayback(getActivity(), testName, VP9_MANIFEST, VORBIS_AUDIO_REPRESENTATION_ID,
+        ALLOW_ADDITIONAL_VIDEO_FORMATS, VP9_CDD_ADAPTIVE);
   }
 
   public void testVp9AdaptiveWithSeeking() throws IOException {
@@ -288,9 +279,8 @@ public void testVp9AdaptiveWithSeeking() throws IOException {
       return;
     }
     String testName = "testVp9AdaptiveWithSeeking";
-    testDashPlayback(getActivity(), testName, SEEKING_SCHEDULE, false, VORBIS_AUDIO_FRAME_COUNT,
-        VIDEO_FRAME_COUNT, VP9_MANIFEST, VORBIS_AUDIO_REPRESENTATION_ID,
-        ALLOW_ADDITIONAL_VIDEO_FORMATS, VP9_CDD_ADAPTIVE);
+    testDashPlayback(getActivity(), testName, SEEKING_SCHEDULE, false, VP9_MANIFEST,
+        VORBIS_AUDIO_REPRESENTATION_ID, ALLOW_ADDITIONAL_VIDEO_FORMATS, VP9_CDD_ADAPTIVE);
   }
 
   public void testVp9AdaptiveWithRendererDisabling() throws IOException {
@@ -300,31 +290,28 @@ public void testVp9AdaptiveWithRendererDisabling() throws IOException {
     }
     String testName = "testVp9AdaptiveWithRendererDisabling";
     testDashPlayback(getActivity(), testName, RENDERER_DISABLING_SCHEDULE, false,
-        VORBIS_AUDIO_FRAME_COUNT, VIDEO_FRAME_COUNT, VP9_MANIFEST, VORBIS_AUDIO_REPRESENTATION_ID,
-        ALLOW_ADDITIONAL_VIDEO_FORMATS, VP9_CDD_ADAPTIVE);
+        VP9_MANIFEST, VORBIS_AUDIO_REPRESENTATION_ID, ALLOW_ADDITIONAL_VIDEO_FORMATS,
+        VP9_CDD_ADAPTIVE);
   }
 
   // Internal.
 
-  private void testDashPlayback(HostActivity activity, String testName,
-      int sourceAudioFrameCount, int sourceVideoFrameCount, String manifestFileName,
+  private void testDashPlayback(HostActivity activity, String testName, String manifestFileName,
       String audioFormat, boolean includeAdditionalVideoFormats, String... videoFormats)
       throws IOException {
-    testDashPlayback(activity, testName, null, true, sourceAudioFrameCount,
-        sourceVideoFrameCount, manifestFileName, audioFormat, includeAdditionalVideoFormats,
-        videoFormats);
+    testDashPlayback(activity, testName, null, true, manifestFileName, audioFormat,
+        includeAdditionalVideoFormats, videoFormats);
   }
 
   private void testDashPlayback(HostActivity activity, String testName,
-      ActionSchedule actionSchedule, boolean fullPlaybackNoSeeking, int sourceAudioFrameCount,
-      int sourceVideoFrameCount, String manifestFileName, String audioFormat,
-      boolean includeAdditionalVideoFormats, String... videoFormats) throws IOException {
+      ActionSchedule actionSchedule, boolean fullPlaybackNoSeeking, String manifestFileName,
+      String audioFormat, boolean includeAdditionalVideoFormats, String... videoFormats)
+      throws IOException {
     MediaPresentationDescription mpd = TestUtil.loadManifest(activity,
         MANIFEST_URL_PREFIX + manifestFileName, new MediaPresentationDescriptionParser());
     MetricsLogger metricsLogger = MetricsLogger.Factory.createDefault(getInstrumentation(), TAG);
     DashHostedTest test = new DashHostedTest(testName, mpd, metricsLogger, fullPlaybackNoSeeking,
-        sourceAudioFrameCount, sourceVideoFrameCount, audioFormat, includeAdditionalVideoFormats,
-        videoFormats);
+        audioFormat, includeAdditionalVideoFormats, videoFormats);
     if (actionSchedule != null) {
       test.setSchedule(actionSchedule);
     }
@@ -359,8 +346,6 @@ private boolean shouldSkipAdaptiveTest(String mimeType) throws IOException {
     private final MediaPresentationDescription mpd;
     private final MetricsLogger metricsLogger;
     private final boolean fullPlaybackNoSeeking;
-    private final int sourceAudioFrameCount;
-    private final int sourceVideoFrameCount;
     private final boolean includeAdditionalVideoFormats;
     private final String[] audioFormats;
     private final String[] videoFormats;
@@ -374,24 +359,19 @@ private boolean shouldSkipAdaptiveTest(String mimeType) throws IOException {
      * @param metricsLogger Logger to log metrics from the test.
      * @param fullPlaybackNoSeeking True if the test will play the entire source with no seeking.
      *     False otherwise.
-     * @param sourceAudioFrameCount The number of audio frames in the source.
-     * @param sourceVideoFrameCount The number of video frames in the source.
      * @param audioFormat The audio format.
      * @param includeAdditionalVideoFormats Whether to use video formats in addition to
      *     those listed in the videoFormats argument, if the device is capable of playing them.
      * @param videoFormats The video formats.
      */
     public DashHostedTest(String testName, MediaPresentationDescription mpd,
-        MetricsLogger metricsLogger, boolean fullPlaybackNoSeeking, int sourceAudioFrameCount,
-        int sourceVideoFrameCount, String audioFormat, boolean includeAdditionalVideoFormats,
-        String... videoFormats) {
+        MetricsLogger metricsLogger, boolean fullPlaybackNoSeeking, String audioFormat,
+        boolean includeAdditionalVideoFormats, String... videoFormats) {
       super(RENDERER_COUNT);
       this.testName = testName;
       this.mpd = Assertions.checkNotNull(mpd);
       this.metricsLogger = metricsLogger;
       this.fullPlaybackNoSeeking = fullPlaybackNoSeeking;
-      this.sourceAudioFrameCount = sourceAudioFrameCount;
-      this.sourceVideoFrameCount = sourceVideoFrameCount;
       this.audioFormats = new String[] {audioFormat};
       this.includeAdditionalVideoFormats = includeAdditionalVideoFormats;
       this.videoFormats = videoFormats;
@@ -461,9 +441,9 @@ protected void assertPassed() {
         // We allow one fewer output buffer due to the way that MediaCodecTrackRenderer and the
         // underlying decoders handle the end of stream. This should be tightened up in the future.
         CodecCountersUtil.assertTotalOutputBufferCount(AUDIO_TAG, audioCounters,
-            sourceAudioFrameCount - 1, sourceAudioFrameCount);
+            audioCounters.inputBufferCount - 1, audioCounters.inputBufferCount);
         CodecCountersUtil.assertTotalOutputBufferCount(VIDEO_TAG, videoCounters,
-            sourceVideoFrameCount - 1, sourceVideoFrameCount);
+            videoCounters.inputBufferCount - 1, videoCounters.inputBufferCount);
 
         // The total playing time should match the source duration.
         long sourceDuration = mpd.duration;
