diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
index 80a6e66232..65b83ecb84 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
@@ -35,15 +35,9 @@
 import com.google.android.exoplayer2.PlaybackPreparer;
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.SimpleExoPlayer;
-import com.google.android.exoplayer2.drm.DefaultDrmSessionManager;
-import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
 import com.google.android.exoplayer2.drm.FrameworkMediaDrm;
-import com.google.android.exoplayer2.drm.HttpMediaDrmCallback;
-import com.google.android.exoplayer2.drm.UnsupportedDrmException;
 import com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.DecoderInitializationException;
 import com.google.android.exoplayer2.mediacodec.MediaCodecUtil.DecoderQueryException;
-import com.google.android.exoplayer2.offline.DownloadHelper;
-import com.google.android.exoplayer2.offline.DownloadRequest;
 import com.google.android.exoplayer2.source.BehindLiveWindowException;
 import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.source.ProgressiveMediaSource;
@@ -51,21 +45,18 @@
 import com.google.android.exoplayer2.source.ads.AdsLoader;
 import com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection;
 import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
-import com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo;
 import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
 import com.google.android.exoplayer2.ui.DebugTextViewHelper;
 import com.google.android.exoplayer2.ui.PlayerControlView;
 import com.google.android.exoplayer2.ui.PlayerView;
 import com.google.android.exoplayer2.ui.spherical.SphericalSurfaceView;
 import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.google.android.exoplayer2.util.ErrorMessageProvider;
 import com.google.android.exoplayer2.util.EventLogger;
 import com.google.android.exoplayer2.util.Util;
 import java.net.CookieHandler;
 import java.net.CookieManager;
 import java.net.CookiePolicy;
-import java.util.UUID;
 
 /**
  * An activity that plays media using {@link SimpleExoPlayer}.
@@ -121,7 +112,6 @@
   private DefaultTrackSelector trackSelector;
   private DefaultTrackSelector.Parameters trackSelectorParameters;
   private DebugTextViewHelper debugViewHelper;
-  private TrackGroupArray lastSeenTrackGroupArray;
 
   private boolean startAutoPlay;
   private int startWindow;
@@ -298,7 +288,6 @@ private void initializePlayer() {
     if (player == null) {
       trackSelector = new DefaultTrackSelector(new AdaptiveTrackSelection.Factory());
       trackSelector.setParameters(trackSelectorParameters);
-      lastSeenTrackGroupArray = null;
       player = ExoPlayerFactory.newSimpleInstance(
           this,
           ((DemoApplication) getApplication()).buildRenderersFactory(
@@ -311,24 +300,19 @@ private void initializePlayer() {
       playerView.setPlaybackPreparer(this);
       debugViewHelper = new DebugTextViewHelper(player, debugTextView);
       debugViewHelper.start();
-      mediaSource = buildMediaSource(Uri.parse(
-          "https://firebasestorage.googleapis.com/v0/b/coinverse-media-staging.appspot.com/o/content%2Ffeeds%2Fen%2Faudio%2Fer-1142868678.mp3?alt=media"));
+      mediaSource = new ProgressiveMediaSource.Factory(dataSourceFactory)
+          .createMediaSource((Uri.parse(
+              "https://firebasestorage.googleapis.com/v0/b/coinverse-media-staging.appspot.com/o/content%2Ffeeds%2Fen%2Faudio%2Fer-1142868678.mp3?alt=media")));
       releaseAdsLoader();
     }
     boolean haveStartPosition = startWindow != C.INDEX_UNSET;
-    if (haveStartPosition) player.seekTo(startWindow, startPosition);
+    if (haveStartPosition) {
+      player.seekTo(startWindow, startPosition);
+    }
     player.prepare(mediaSource, !haveStartPosition, false);
     updateButtonVisibility();
   }
 
-  private MediaSource buildMediaSource(Uri uri) {
-    DownloadRequest downloadRequest =
-        ((DemoApplication) getApplication()).getDownloadTracker().getDownloadRequest(uri);
-    if (downloadRequest != null)
-      return DownloadHelper.createMediaSource(downloadRequest, dataSourceFactory);
-    return new ProgressiveMediaSource.Factory(dataSourceFactory).createMediaSource(uri);
-  }
-
   private void releasePlayer() {
     if (player != null) {
       updateTrackSelectorParameters();
@@ -408,10 +392,14 @@ private void showToast(String message) {
   }
 
   private static boolean isBehindLiveWindow(ExoPlaybackException e) {
-    if (e.type != ExoPlaybackException.TYPE_SOURCE) return false;
+    if (e.type != ExoPlaybackException.TYPE_SOURCE) {
+      return false;
+    }
     Throwable cause = e.getSourceException();
     while (cause != null) {
-      if (cause instanceof BehindLiveWindowException) return true;
+      if (cause instanceof BehindLiveWindowException) {
+        return true;
+      }
       cause = cause.getCause();
     }
     return false;
@@ -440,7 +428,8 @@ public void onPlayerError(ExoPlaybackException e) {
 
     @Override
     @SuppressWarnings("ReferenceEquality")
-    public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) { }
+    public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
+    }
   }
 
   private class PlayerErrorMessageProvider implements ErrorMessageProvider<ExoPlaybackException> {
@@ -459,11 +448,16 @@ public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray tra
               errorString = getString(R.string.error_querying_decoders);
             } else if (decoderInitializationException.secureDecoderRequired) {
               errorString = getString(
-                      R.string.error_no_secure_decoder, decoderInitializationException.mimeType);
-            } else errorString = getString(R.string.error_no_decoder, decoderInitializationException.mimeType);
-          } else errorString = getString(
-                    R.string.error_instantiating_decoder,
-                    decoderInitializationException.decoderName);
+                  R.string.error_no_secure_decoder, decoderInitializationException.mimeType);
+            } else {
+              errorString = getString(R.string.error_no_decoder,
+                  decoderInitializationException.mimeType);
+            }
+          } else {
+            errorString = getString(
+                R.string.error_instantiating_decoder,
+                decoderInitializationException.decoderName);
+          }
         }
       }
       return Pair.create(0, errorString);
