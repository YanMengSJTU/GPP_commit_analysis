diff --git a/RELEASENOTES.md b/RELEASENOTES.md
index c37556c98c..3c1748ea9d 100644
--- a/RELEASENOTES.md
+++ b/RELEASENOTES.md
@@ -27,6 +27,8 @@
   over other selection parameters.
 * Remove `AnalyticsCollector.Factory`. Instances can be created directly and
   the `Player` set later using `AnalyticsCollector.setPlayer`.
+* Calculate correct duration for clipped WAV streams
+  ([#6241](https://github.com/google/ExoPlayer/issues/6241)).
 
 ### 2.10.4 ###
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavExtractor.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavExtractor.java
index d3114f9b69..91097c9e5b 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavExtractor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavExtractor.java
@@ -91,10 +91,10 @@ public int read(ExtractorInput input, PositionHolder seekPosition)
       input.skipFully(wavHeader.getDataStartPosition());
     }
 
-    long dataLimit = wavHeader.getDataLimit();
-    Assertions.checkState(dataLimit != C.POSITION_UNSET);
+    long dataEndPosition = wavHeader.getDataEndPosition();
+    Assertions.checkState(dataEndPosition != C.POSITION_UNSET);
 
-    long bytesLeft = dataLimit - input.getPosition();
+    long bytesLeft = dataEndPosition - input.getPosition();
     if (bytesLeft <= 0) {
       return Extractor.RESULT_END_OF_INPUT;
     }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeader.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeader.java
index c7858dcd96..6e3c5988a9 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeader.java
@@ -33,17 +33,21 @@
   private final int blockAlignment;
   /** Bits per sample for the audio data. */
   private final int bitsPerSample;
-  /** The PCM encoding */
-  @C.PcmEncoding
-  private final int encoding;
+  /** The PCM encoding. */
+  @C.PcmEncoding private final int encoding;
 
   /** Position of the start of the sample data, in bytes. */
   private int dataStartPosition;
-  /** Total size of the sample data, in bytes. */
-  private long dataSize;
-
-  public WavHeader(int numChannels, int sampleRateHz, int averageBytesPerSecond, int blockAlignment,
-      int bitsPerSample, @C.PcmEncoding int encoding) {
+  /** Position of the end of the sample data (exclusive), in bytes. */
+  private long dataEndPosition;
+
+  public WavHeader(
+      int numChannels,
+      int sampleRateHz,
+      int averageBytesPerSecond,
+      int blockAlignment,
+      int bitsPerSample,
+      @C.PcmEncoding int encoding) {
     this.numChannels = numChannels;
     this.sampleRateHz = sampleRateHz;
     this.averageBytesPerSecond = averageBytesPerSecond;
@@ -51,6 +55,7 @@ public WavHeader(int numChannels, int sampleRateHz, int averageBytesPerSecond, i
     this.bitsPerSample = bitsPerSample;
     this.encoding = encoding;
     dataStartPosition = C.POSITION_UNSET;
+    dataEndPosition = C.POSITION_UNSET;
   }
 
   // Data bounds.
@@ -59,11 +64,11 @@ public WavHeader(int numChannels, int sampleRateHz, int averageBytesPerSecond, i
    * Sets the data start position and size in bytes of sample data in this WAV.
    *
    * @param dataStartPosition The position of the start of the sample data, in bytes.
-   * @param dataSize The total size of the sample data, in bytes.
+   * @param dataEndPosition The position of the end of the sample data (exclusive), in bytes.
    */
-  public void setDataBounds(int dataStartPosition, long dataSize) {
+  public void setDataBounds(int dataStartPosition, long dataEndPosition) {
     this.dataStartPosition = dataStartPosition;
-    this.dataSize = dataSize;
+    this.dataEndPosition = dataEndPosition;
   }
 
   /**
@@ -75,11 +80,11 @@ public int getDataStartPosition() {
   }
 
   /**
-   * Returns the limit of the sample data, in bytes, or {@link C#POSITION_UNSET} if the data bounds
-   * have not been set.
+   * Returns the position of the end of the sample data (exclusive), in bytes, or {@link
+   * C#POSITION_UNSET} if the data bounds have not been set.
    */
-  public long getDataLimit() {
-    return hasDataBounds() ? (dataStartPosition + dataSize) : C.POSITION_UNSET;
+  public long getDataEndPosition() {
+    return dataEndPosition;
   }
 
   /** Returns whether the data start position and size have been set. */
@@ -96,12 +101,13 @@ public boolean isSeekable() {
 
   @Override
   public long getDurationUs() {
-    long numFrames = dataSize / blockAlignment;
+    long numFrames = (dataEndPosition - dataStartPosition) / blockAlignment;
     return (numFrames * C.MICROS_PER_SECOND) / sampleRateHz;
   }
 
   @Override
   public SeekPoints getSeekPoints(long timeUs) {
+    long dataSize = dataEndPosition - dataStartPosition;
     long positionOffset = (timeUs * averageBytesPerSecond) / C.MICROS_PER_SECOND;
     // Constrain to nearest preceding frame offset.
     positionOffset = (positionOffset / blockAlignment) * blockAlignment;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeaderReader.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeaderReader.java
index 839a9e3d5c..bbcb75aa2d 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeaderReader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeaderReader.java
@@ -91,8 +91,8 @@ public static WavHeader peek(ExtractorInput input) throws IOException, Interrupt
     // If present, skip extensionSize, validBitsPerSample, channelMask, subFormatGuid, ...
     input.advancePeekPosition((int) chunkHeader.size - 16);
 
-    return new WavHeader(numChannels, sampleRateHz, averageBytesPerSecond, blockAlignment,
-        bitsPerSample, encoding);
+    return new WavHeader(
+        numChannels, sampleRateHz, averageBytesPerSecond, blockAlignment, bitsPerSample, encoding);
   }
 
   /**
@@ -139,7 +139,14 @@ public static void skipToData(ExtractorInput input, WavHeader wavHeader)
     // Skip past the "data" header.
     input.skipFully(ChunkHeader.SIZE_IN_BYTES);
 
-    wavHeader.setDataBounds((int) input.getPosition(), chunkHeader.size);
+    int dataStartPosition = (int) input.getPosition();
+    long dataEndPosition = dataStartPosition + chunkHeader.size;
+    long inputLength = input.getLength();
+    if (inputLength != C.LENGTH_UNSET && dataEndPosition > inputLength) {
+      Log.w(TAG, "Data exceeds input length: " + dataEndPosition + ", " + inputLength);
+      dataEndPosition = inputLength;
+    }
+    wavHeader.setDataBounds(dataStartPosition, dataEndPosition);
   }
 
   private WavHeaderReader() {
