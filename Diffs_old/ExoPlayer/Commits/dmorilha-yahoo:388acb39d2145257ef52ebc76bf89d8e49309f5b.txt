diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/PlayerActivity.java b/demo/src/main/java/com/google/android/exoplayer/demo/PlayerActivity.java
index 478898618e..471f6dc99f 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/PlayerActivity.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/PlayerActivity.java
@@ -31,11 +31,10 @@
 import com.google.android.exoplayer.demo.player.SmoothStreamingRendererBuilder;
 import com.google.android.exoplayer.drm.UnsupportedDrmException;
 import com.google.android.exoplayer.metadata.id3.ApicFrame;
-import com.google.android.exoplayer.metadata.id3.BinaryFrame;
 import com.google.android.exoplayer.metadata.id3.GeobFrame;
 import com.google.android.exoplayer.metadata.id3.Id3Frame;
 import com.google.android.exoplayer.metadata.id3.PrivFrame;
-import com.google.android.exoplayer.metadata.id3.Tit2Frame;
+import com.google.android.exoplayer.metadata.id3.TextInformationFrame;
 import com.google.android.exoplayer.metadata.id3.TxxxFrame;
 import com.google.android.exoplayer.text.CaptionStyleCompat;
 import com.google.android.exoplayer.text.Cue;
@@ -653,9 +652,10 @@ public void onId3Metadata(List<Id3Frame> id3Frames) {
         ApicFrame apicFrame = (ApicFrame) id3Frame;
         Log.i(TAG, String.format("ID3 TimedMetadata %s: mimeType=%s, description=%s",
                 apicFrame.id, apicFrame.mimeType, apicFrame.description));
-      } else if (id3Frame instanceof Tit2Frame){
-        Tit2Frame tit2Frame = (Tit2Frame) id3Frame;
-        Log.i(TAG, String.format("ID3 TimedMetadata %s: description=%s", tit2Frame.id, tit2Frame.description));
+      } else if (id3Frame instanceof TextInformationFrame){
+        TextInformationFrame textInformationFrame = (TextInformationFrame) id3Frame;
+        Log.i(TAG, String.format("ID3 TimedMetadata %s: description=%s", textInformationFrame.id,
+            textInformationFrame.description));
       } else {
         Log.i(TAG, String.format("ID3 TimedMetadata %s", id3Frame.id));
       }
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/metadata/id3/Id3ParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/metadata/id3/Id3ParserTest.java
index b256eaffc7..6adefd5092 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/metadata/id3/Id3ParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/metadata/id3/Id3ParserTest.java
@@ -73,8 +73,9 @@ public void testParseTit2Frames() {
       List<Id3Frame> id3Frames = parser.parse(rawId3, rawId3.length);
       assertNotNull(id3Frames);
       assertEquals(1, id3Frames.size());
-      Tit2Frame tit2Frame = (Tit2Frame) id3Frames.get(0);
-      assertEquals("Hello World", tit2Frame.description);
+      TextInformationFrame textInformationFrame = (TextInformationFrame) id3Frames.get(0);
+      assertEquals("TIT2", textInformationFrame.id);
+      assertEquals("Hello World", textInformationFrame.description);
     } catch (Exception exception) {
       fail(exception.getMessage());
     }
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ts/Id3Reader.java b/library/src/main/java/com/google/android/exoplayer/extractor/ts/Id3Reader.java
index e3a1c15954..2ee6a54061 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ts/Id3Reader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ts/Id3Reader.java
@@ -77,8 +77,9 @@ public void consume(ParsableByteArray data) {
       }
     }
     // Write data to the output.
-    output.sampleData(data, bytesAvailable);
-    sampleBytesRead += bytesAvailable;
+    int bytesToWrite = Math.min(bytesAvailable, sampleSize - sampleBytesRead);
+    output.sampleData(data, bytesToWrite);
+    sampleBytesRead += bytesToWrite;
   }
 
   @Override
diff --git a/library/src/main/java/com/google/android/exoplayer/metadata/id3/ApicFrame.java b/library/src/main/java/com/google/android/exoplayer/metadata/id3/ApicFrame.java
index f5e2ed8041..d279a2e189 100644
--- a/library/src/main/java/com/google/android/exoplayer/metadata/id3/ApicFrame.java
+++ b/library/src/main/java/com/google/android/exoplayer/metadata/id3/ApicFrame.java
@@ -19,20 +19,20 @@
  * APIC (Attached Picture) ID3 frame.
  */
 public final class ApicFrame extends Id3Frame {
+
   public static final String ID = "APIC";
 
   public final String mimeType;
-  public final byte pictureType;
   public final String description;
+  public final int pictureType;
   public final byte[] pictureData;
 
-  public ApicFrame(String mimeType, byte pictureType, String description, byte[] pictureData) {
+  public ApicFrame(String mimeType, String description, int pictureType, byte[] pictureData) {
     super(ID);
     this.mimeType = mimeType;
-    this.pictureType = pictureType;
     this.description = description;
+    this.pictureType = pictureType;
     this.pictureData = pictureData;
   }
 
-
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/metadata/id3/Id3Parser.java b/library/src/main/java/com/google/android/exoplayer/metadata/id3/Id3Parser.java
index 80064eafcf..3bf6534eb9 100644
--- a/library/src/main/java/com/google/android/exoplayer/metadata/id3/Id3Parser.java
+++ b/library/src/main/java/com/google/android/exoplayer/metadata/id3/Id3Parser.java
@@ -22,6 +22,7 @@
 
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
@@ -54,135 +55,65 @@ public boolean canParse(String mimeType) {
       int frameId2 = id3Data.readUnsignedByte();
       int frameId3 = id3Data.readUnsignedByte();
       int frameSize = id3Data.readSynchSafeInt();
+
       if (frameSize <= 1) {
         break;
       }
 
       // Skip frame flags.
       id3Data.skipBytes(2);
-      // Check Frame ID == TXXX.
+
+      Id3Frame frame;
       if (frameId0 == 'T' && frameId1 == 'X' && frameId2 == 'X' && frameId3 == 'X') {
-        int encoding = id3Data.readUnsignedByte();
-        String charset = getCharsetName(encoding);
-        byte[] frame = new byte[frameSize - 1];
-        id3Data.readBytes(frame, 0, frameSize - 1);
-
-        int firstZeroIndex = indexOfEOS(frame, 0, encoding);
-        String description = new String(frame, 0, firstZeroIndex, charset);
-        int valueStartIndex = firstZeroIndex + delimiterLength(encoding);
-        int valueEndIndex = indexOfEOS(frame, valueStartIndex, encoding);
-        String value = new String(frame, valueStartIndex, valueEndIndex - valueStartIndex, charset);
-        id3Frames.add(new TxxxFrame(description, value));
+        frame = parseTxxxFrame(id3Data, frameSize);
       } else if (frameId0 == 'P' && frameId1 == 'R' && frameId2 == 'I' && frameId3 == 'V') {
-        // Check frame ID == PRIV
-        byte[] frame = new byte[frameSize];
-        id3Data.readBytes(frame, 0, frameSize);
-
-        int firstZeroIndex = indexOf(frame, 0, (byte) 0);
-        String owner = new String(frame, 0, firstZeroIndex, "ISO-8859-1");
-        byte[] privateData = new byte[frameSize - firstZeroIndex - 1];
-        System.arraycopy(frame, firstZeroIndex + 1, privateData, 0, frameSize - firstZeroIndex - 1);
-        id3Frames.add(new PrivFrame(owner, privateData));
+        frame = parsePrivFrame(id3Data, frameSize);
       } else if (frameId0 == 'G' && frameId1 == 'E' && frameId2 == 'O' && frameId3 == 'B') {
-        // Check frame ID == GEOB
-        int encoding = id3Data.readUnsignedByte();
-        String charset = getCharsetName(encoding);
-        byte[] frame = new byte[frameSize - 1];
-        id3Data.readBytes(frame, 0, frameSize - 1);
-
-        int firstZeroIndex = indexOf(frame, 0, (byte) 0);
-        String mimeType = new String(frame, 0, firstZeroIndex, "ISO-8859-1");
-        int filenameStartIndex = firstZeroIndex + 1;
-        int filenameEndIndex = indexOfEOS(frame, filenameStartIndex, encoding);
-        String filename = new String(frame, filenameStartIndex,
-            filenameEndIndex - filenameStartIndex, charset);
-        int descriptionStartIndex = filenameEndIndex + delimiterLength(encoding);
-        int descriptionEndIndex = indexOfEOS(frame, descriptionStartIndex, encoding);
-        String description = new String(frame, descriptionStartIndex,
-            descriptionEndIndex - descriptionStartIndex, charset);
-
-        int objectDataSize = frameSize - 1 /* encoding byte */ - descriptionEndIndex
-            - delimiterLength(encoding);
-        byte[] objectData = new byte[objectDataSize];
-        System.arraycopy(frame, descriptionEndIndex + delimiterLength(encoding), objectData, 0,
-            objectDataSize);
-        id3Frames.add(new GeobFrame(mimeType, filename, description, objectData));
-
+        frame = parseGeobFrame(id3Data, frameSize);
       } else if (frameId0 == 'A' && frameId1 == 'P' && frameId2 == 'I' && frameId3 == 'C') {
-        // Check frame ID == APIC
-        int encoding = id3Data.readUnsignedByte();
-        String charset = getCharsetName(encoding);
-
-        byte[] frame = new byte[frameSize - 1];
-        id3Data.readBytes(frame, 0, frameSize - 1);
-
-        int firstZeroIndex = indexOf(frame, 0, (byte) 0);
-        String mimeType = new String(frame, 0, firstZeroIndex, "ISO-8859-1");
-        byte pictureType = frame[firstZeroIndex+1];
-
-        int descriptionStartIndex = firstZeroIndex + 2;
-        int descriptionEndIndex = indexOfEOS(frame, descriptionStartIndex, encoding);
-        String description = new String(frame, descriptionStartIndex,
-                descriptionEndIndex - descriptionStartIndex, charset);
-
-        int objectDataSize = frameSize - 1 /* encoding byte */ - descriptionEndIndex
-                - delimiterLength(encoding);
-        byte[] objectData = new byte[objectDataSize];
-        System.arraycopy(frame, descriptionEndIndex + delimiterLength(encoding), objectData, 0,
-                objectDataSize);
-        id3Frames.add(new ApicFrame(mimeType, pictureType, description, objectData));
-      } else if (frameId0 == 'T' && frameId1 == 'I' && frameId2 == 'T' && frameId3 == '2') {
-        // Check frame ID == TIT2
-        int encoding = id3Data.readUnsignedByte();
-        String charset = getCharsetName(encoding);
-
-        byte[] frame = new byte[frameSize - 1];
-        id3Data.readBytes(frame, 0, frameSize - 1);
-
-        String description = new String(frame, 0, indexOfEOS(frame, 0, encoding), charset);
-
-        id3Frames.add(new Tit2Frame(description));
+        frame = parseApicFrame(id3Data, frameSize);
+      } else if (frameId0 == 'T') {
+        String id = String.format(Locale.US, "%c%c%c%c", frameId0, frameId1, frameId2, frameId3);
+        frame = parseTextInformationFrame(id3Data, frameSize, id);
       } else {
-        String type = String.format(Locale.US, "%c%c%c%c", frameId0, frameId1, frameId2, frameId3);
-        byte[] frame = new byte[frameSize];
-        id3Data.readBytes(frame, 0, frameSize);
-        id3Frames.add(new BinaryFrame(type, frame));
+        String id = String.format(Locale.US, "%c%c%c%c", frameId0, frameId1, frameId2, frameId3);
+        frame = parseBinaryFrame(id3Data, frameSize, id);
       }
-
+      id3Frames.add(frame);
       id3Size -= frameSize + 10 /* header size */;
     }
 
     return Collections.unmodifiableList(id3Frames);
   }
 
-  private static int indexOf(byte[] data, int fromIndex, byte key) {
-    for (int i = fromIndex; i < data.length; i++) {
-      if (data[i] == key) {
-        return i;
-      }
-    }
-    return data.length;
-  }
-
-  private static int indexOfEOS(byte[] data, int fromIndex, int encodingByte) {
-    int terminationPos = indexOf(data, fromIndex, (byte) 0);
+  private static int indexOfEos(byte[] data, int fromIndex, int encoding) {
+    int terminationPos = indexOfZeroByte(data, fromIndex);
 
-    // For single byte encoding charsets, we are done
-    if (encodingByte == ID3_TEXT_ENCODING_ISO_8859_1 || encodingByte == ID3_TEXT_ENCODING_UTF_8) {
+    // For single byte encoding charsets, we're done.
+    if (encoding == ID3_TEXT_ENCODING_ISO_8859_1 || encoding == ID3_TEXT_ENCODING_UTF_8) {
       return terminationPos;
     }
 
-    // Otherwise, look for a two zero bytes
+    // Otherwise look for a second zero byte.
     while (terminationPos < data.length - 1) {
       if (data[terminationPos + 1] == (byte) 0) {
         return terminationPos;
       }
-      terminationPos = indexOf(data, terminationPos + 1, (byte) 0);
+      terminationPos = indexOfZeroByte(data, terminationPos + 1);
     }
 
     return data.length;
   }
 
+  private static int indexOfZeroByte(byte[] data, int fromIndex) {
+    for (int i = fromIndex; i < data.length; i++) {
+      if (data[i] == (byte) 0) {
+        return i;
+      }
+    }
+    return data.length;
+  }
+
   private static int delimiterLength(int encodingByte) {
     return (encodingByte == ID3_TEXT_ENCODING_ISO_8859_1 || encodingByte == ID3_TEXT_ENCODING_UTF_8)
         ? 1 : 2;
@@ -225,6 +156,110 @@ private static int parseId3Header(ParsableByteArray id3Buffer) throws ParserExce
     return id3Size;
   }
 
+  private static TxxxFrame parseTxxxFrame(ParsableByteArray id3Data, int frameSize)
+      throws UnsupportedEncodingException {
+    int encoding = id3Data.readUnsignedByte();
+    String charset = getCharsetName(encoding);
+
+    byte[] data = new byte[frameSize - 1];
+    id3Data.readBytes(data, 0, frameSize - 1);
+
+    int descriptionEndIndex = indexOfEos(data, 0, encoding);
+    String description = new String(data, 0, descriptionEndIndex, charset);
+
+    int valueStartIndex = descriptionEndIndex + delimiterLength(encoding);
+    int valueEndIndex = indexOfEos(data, valueStartIndex, encoding);
+    String value = new String(data, valueStartIndex, valueEndIndex - valueStartIndex, charset);
+
+    return new TxxxFrame(description, value);
+  }
+
+  private static PrivFrame parsePrivFrame(ParsableByteArray id3Data, int frameSize)
+      throws UnsupportedEncodingException {
+    byte[] data = new byte[frameSize];
+    id3Data.readBytes(data, 0, frameSize);
+
+    int ownerEndIndex = indexOfZeroByte(data, 0);
+    String owner = new String(data, 0, ownerEndIndex, "ISO-8859-1");
+
+    int privateDataStartIndex = ownerEndIndex + 1;
+    byte[] privateData = Arrays.copyOfRange(data, privateDataStartIndex, data.length);
+
+    return new PrivFrame(owner, privateData);
+  }
+
+  private static GeobFrame parseGeobFrame(ParsableByteArray id3Data, int frameSize)
+      throws UnsupportedEncodingException {
+    int encoding = id3Data.readUnsignedByte();
+    String charset = getCharsetName(encoding);
+
+    byte[] data = new byte[frameSize - 1];
+    id3Data.readBytes(data, 0, frameSize - 1);
+
+    int mimeTypeEndIndex = indexOfZeroByte(data, 0);
+    String mimeType = new String(data, 0, mimeTypeEndIndex, "ISO-8859-1");
+
+    int filenameStartIndex = mimeTypeEndIndex + 1;
+    int filenameEndIndex = indexOfEos(data, filenameStartIndex, encoding);
+    String filename = new String(data, filenameStartIndex, filenameEndIndex - filenameStartIndex,
+        charset);
+
+    int descriptionStartIndex = filenameEndIndex + delimiterLength(encoding);
+    int descriptionEndIndex = indexOfEos(data, descriptionStartIndex, encoding);
+    String description = new String(data, descriptionStartIndex,
+        descriptionEndIndex - descriptionStartIndex, charset);
+
+    int objectDataStartIndex = descriptionEndIndex + delimiterLength(encoding);
+    byte[] objectData = Arrays.copyOfRange(data, objectDataStartIndex, data.length);
+
+    return new GeobFrame(mimeType, filename, description, objectData);
+  }
+
+  private static ApicFrame parseApicFrame(ParsableByteArray id3Data, int frameSize)
+      throws UnsupportedEncodingException {
+    int encoding = id3Data.readUnsignedByte();
+    String charset = getCharsetName(encoding);
+
+    byte[] data = new byte[frameSize - 1];
+    id3Data.readBytes(data, 0, frameSize - 1);
+
+    int mimeTypeEndIndex = indexOfZeroByte(data, 0);
+    String mimeType = new String(data, 0, mimeTypeEndIndex, "ISO-8859-1");
+
+    int pictureType = data[mimeTypeEndIndex + 1] & 0xFF;
+
+    int descriptionStartIndex = mimeTypeEndIndex + 2;
+    int descriptionEndIndex = indexOfEos(data, descriptionStartIndex, encoding);
+    String description = new String(data, descriptionStartIndex,
+        descriptionEndIndex - descriptionStartIndex, charset);
+
+    int pictureDataStartIndex = descriptionEndIndex + delimiterLength(encoding);
+    byte[] pictureData = Arrays.copyOfRange(data, pictureDataStartIndex, data.length);
+
+    return new ApicFrame(mimeType, description, pictureType, pictureData);
+  }
+
+  private static TextInformationFrame parseTextInformationFrame(ParsableByteArray id3Data,
+      int frameSize, String id) throws UnsupportedEncodingException {
+    int encoding = id3Data.readUnsignedByte();
+    String charset = getCharsetName(encoding);
+
+    byte[] data = new byte[frameSize - 1];
+    id3Data.readBytes(data, 0, frameSize - 1);
+
+    int descriptionEndIndex = indexOfEos(data, 0, encoding);
+    String description = new String(data, 0, descriptionEndIndex, charset);
+
+    return new TextInformationFrame(id, description);
+  }
+
+  private static BinaryFrame parseBinaryFrame(ParsableByteArray id3Data, int frameSize, String id) {
+    byte[] frame = new byte[frameSize];
+    id3Data.readBytes(frame, 0, frameSize);
+
+    return new BinaryFrame(id, frame);
+  }
+
   /**
    * Maps encoding byte from ID3v2 frame to a Charset.
    * @param encodingByte The value of encoding byte from ID3v2 frame.
diff --git a/library/src/main/java/com/google/android/exoplayer/metadata/id3/Tit2Frame.java b/library/src/main/java/com/google/android/exoplayer/metadata/id3/TextInformationFrame.java
similarity index 75%
rename from library/src/main/java/com/google/android/exoplayer/metadata/id3/Tit2Frame.java
rename to library/src/main/java/com/google/android/exoplayer/metadata/id3/TextInformationFrame.java
index ea1c6d5337..3d47c5aa68 100644
--- a/library/src/main/java/com/google/android/exoplayer/metadata/id3/Tit2Frame.java
+++ b/library/src/main/java/com/google/android/exoplayer/metadata/id3/TextInformationFrame.java
@@ -16,17 +16,15 @@
 package com.google.android.exoplayer.metadata.id3;
 
 /**
- * TIT2 (Title/songname/content description) ID3 frame.
+ * Text information ("T000" - "TZZZ", excluding "TXXX") ID3 frame.
  */
-public final class Tit2Frame extends Id3Frame {
-
-  public static final String ID = "TIT2";
+public final class TextInformationFrame extends Id3Frame {
 
   public final String description;
 
-  public Tit2Frame(String data) {
-    super(ID);
-    this.description = data;
+  public TextInformationFrame(String id, String description) {
+    super(id);
+    this.description = description;
   }
 
 }
