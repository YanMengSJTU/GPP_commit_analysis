diff --git a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacDecoder.java b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacDecoder.java
index a26d1910a1..b857a2c325 100644
--- a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacDecoder.java
+++ b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacDecoder.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.SampleHolder;
 import com.google.android.exoplayer.util.FlacStreamInfo;
-import com.google.android.exoplayer.util.extensions.Buffer;
 import com.google.android.exoplayer.util.extensions.InputBuffer;
 import com.google.android.exoplayer.util.extensions.SimpleDecoder;
 
@@ -76,8 +75,9 @@ protected void releaseOutputBuffer(FlacOutputBuffer buffer) {
   }
 
   @Override
-  public FlacDecoderException decode(InputBuffer inputBuffer, FlacOutputBuffer outputBuffer) {
-    if (inputBuffer.getFlag(Buffer.FLAG_RESET)) {
+  public FlacDecoderException decode(InputBuffer inputBuffer, FlacOutputBuffer outputBuffer,
+      boolean reset) {
+    if (reset) {
       decoder.flush();
     }
     SampleHolder sampleHolder = inputBuffer.sampleHolder;
diff --git a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/LibflacAudioTrackRenderer.java b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/LibflacAudioTrackRenderer.java
index c5710c52af..e1b07e2162 100644
--- a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/LibflacAudioTrackRenderer.java
+++ b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/LibflacAudioTrackRenderer.java
@@ -92,7 +92,6 @@
   private boolean inputStreamEnded;
   private boolean outputStreamEnded;
   private boolean sourceIsReady;
-  private boolean notifyDiscontinuityToDecoder;
 
   private final AudioTrack audioTrack;
   private int audioSessionId;
@@ -262,10 +261,6 @@ private boolean feedInputBuffer(long positionUs) throws FlacDecoderException {
       inputStreamEnded = true;
       return false;
     }
-    if (notifyDiscontinuityToDecoder) {
-      notifyDiscontinuityToDecoder = false;
-      inputBuffer.setFlag(Buffer.FLAG_RESET);
-    }
 
     decoder.queueInputBuffer(inputBuffer);
     inputBuffer = null;
@@ -279,7 +274,6 @@ private void flushDecoder() {
       outputBuffer = null;
     }
     decoder.flush();
-    notifyDiscontinuityToDecoder = true;
   }
 
   @Override
diff --git a/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/LibopusAudioTrackRenderer.java b/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/LibopusAudioTrackRenderer.java
index ae337d1960..5de3d46edb 100644
--- a/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/LibopusAudioTrackRenderer.java
+++ b/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/LibopusAudioTrackRenderer.java
@@ -94,7 +94,6 @@
   private boolean inputStreamEnded;
   private boolean outputStreamEnded;
   private boolean sourceIsReady;
-  private boolean notifyDiscontinuityToDecoder;
 
   private int audioSessionId;
 
@@ -274,10 +273,6 @@ private boolean feedInputBuffer(long positionUs) throws OpusDecoderException {
       inputStreamEnded = true;
       return false;
     }
-    if (notifyDiscontinuityToDecoder) {
-      notifyDiscontinuityToDecoder = false;
-      inputBuffer.setFlag(Buffer.FLAG_RESET);
-    }
 
     decoder.queueInputBuffer(inputBuffer);
     inputBuffer = null;
@@ -291,7 +286,6 @@ private void flushDecoder() {
       outputBuffer = null;
     }
     decoder.flush();
-    notifyDiscontinuityToDecoder = true;
   }
 
   @Override
diff --git a/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java b/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java
index 9ad75f9e62..ba558e22d4 100644
--- a/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java
+++ b/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java
@@ -150,8 +150,9 @@ protected void releaseOutputBuffer(OpusOutputBuffer buffer) {
   }
 
   @Override
-  public OpusDecoderException decode(InputBuffer inputBuffer, OpusOutputBuffer outputBuffer) {
-    if (inputBuffer.getFlag(Buffer.FLAG_RESET)) {
+  public OpusDecoderException decode(InputBuffer inputBuffer, OpusOutputBuffer outputBuffer,
+      boolean reset) {
+    if (reset) {
       opusReset(nativeDecoderContext);
       // When seeking to 0, skip number of samples as specified in opus header. When seeking to
       // any other time, skip number of samples as specified by seek preroll.
diff --git a/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxDecoder.java b/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxDecoder.java
index 4f8c845db8..d645fde877 100644
--- a/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxDecoder.java
+++ b/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxDecoder.java
@@ -100,7 +100,8 @@ protected void releaseOutputBuffer(VpxOutputBuffer buffer) {
   }
 
   @Override
-  protected VpxDecoderException decode(VpxInputBuffer inputBuffer, VpxOutputBuffer outputBuffer) {
+  protected VpxDecoderException decode(VpxInputBuffer inputBuffer, VpxOutputBuffer outputBuffer,
+      boolean reset) {
     SampleHolder sampleHolder = inputBuffer.sampleHolder;
     outputBuffer.timestampUs = sampleHolder.timeUs;
     sampleHolder.data.position(sampleHolder.data.position() - sampleHolder.size);
diff --git a/library/src/main/java/com/google/android/exoplayer/util/extensions/Buffer.java b/library/src/main/java/com/google/android/exoplayer/util/extensions/Buffer.java
index 241a02327b..fb9ab856c0 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/extensions/Buffer.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/extensions/Buffer.java
@@ -24,14 +24,10 @@
    * Flag for empty input/output buffers that signal that the end of the stream was reached.
    */
   public static final int FLAG_END_OF_STREAM = 1;
-  /**
-   * Flag for non-empty input buffers which signals that the decoder must be reset before decoding.
-   */
-  public static final int FLAG_RESET = 2;
   /**
    * Flag for non-empty input/output buffers that should only be decoded (not rendered).
    */
-  public static final int FLAG_DECODE_ONLY = 4;
+  public static final int FLAG_DECODE_ONLY = 2;
 
   private int flags;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/util/extensions/SimpleDecoder.java b/library/src/main/java/com/google/android/exoplayer/util/extensions/SimpleDecoder.java
index b8455611aa..03b3e0690b 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/extensions/SimpleDecoder.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/extensions/SimpleDecoder.java
@@ -51,7 +51,7 @@
   private I dequeuedInputBuffer;
 
   private E exception;
-  private boolean flushDecodedOutputBuffer;
+  private boolean flushed;
   private boolean released;
 
   /**
@@ -141,7 +141,7 @@ protected void releaseOutputBuffer(O outputBuffer) {
   @Override
   public final void flush() {
     synchronized (lock) {
-      flushDecodedOutputBuffer = true;
+      flushed = true;
       if (dequeuedInputBuffer != null) {
         availableInputBuffers[availableInputBufferCount++] = dequeuedInputBuffer;
         dequeuedInputBuffer = null;
@@ -206,6 +206,7 @@ public final void run() {
   private boolean decode() throws InterruptedException {
     I inputBuffer;
     O outputBuffer;
+    boolean resetDecoder;
 
     // Wait until we have an input buffer to decode, and an output buffer to decode into.
     synchronized (lock) {
@@ -217,7 +218,8 @@ private boolean decode() throws InterruptedException {
       }
       inputBuffer = queuedInputBuffers.removeFirst();
       outputBuffer = availableOutputBuffers[--availableOutputBufferCount];
-      flushDecodedOutputBuffer = false;
+      resetDecoder = flushed;
+      flushed = false;
     }
 
     outputBuffer.reset();
@@ -227,7 +229,7 @@ private boolean decode() throws InterruptedException {
       if (inputBuffer.getFlag(C.SAMPLE_FLAG_DECODE_ONLY)) {
         outputBuffer.setFlag(C.SAMPLE_FLAG_DECODE_ONLY);
       }
-      exception = decode(inputBuffer, outputBuffer);
+      exception = decode(inputBuffer, outputBuffer, resetDecoder);
       if (exception != null) {
         // Memory barrier to ensure that the decoder exception is visible from the playback thread.
         synchronized (lock) {}
@@ -236,7 +238,7 @@ private boolean decode() throws InterruptedException {
     }
 
     synchronized (lock) {
-      if (flushDecodedOutputBuffer || outputBuffer.getFlag(Buffer.FLAG_DECODE_ONLY)) {
+      if (flushed || outputBuffer.getFlag(Buffer.FLAG_DECODE_ONLY)) {
         // If a flush occurred while decoding or the buffer was only for decoding (not presentation)
         // then make the output buffer available again rather than queueing it to be consumed.
         availableOutputBuffers[availableOutputBufferCount++] = outputBuffer;
@@ -273,8 +275,9 @@ private boolean canDecodeBuffer() {
    *     {@link Buffer#FLAG_DECODE_ONLY} will be set if the same flag is set on {@code inputBuffer},
    *     but the decoder may set/unset the flag if required. If the flag is set after this method
    *     returns, any output should not be presented.
+   * @param reset True if the decoder must be reset before decoding.
    * @return A decoder exception if an error occurred, or null if decoding was successful.
    */
-  protected abstract E decode(I inputBuffer, O outputBuffer);
+  protected abstract E decode(I inputBuffer, O outputBuffer, boolean reset);
 
 }
