diff --git a/demos/manager/build.gradle b/demos/manager/build.gradle
index 2e37a598a4..688f58b9a8 100644
--- a/demos/manager/build.gradle
+++ b/demos/manager/build.gradle
@@ -18,6 +18,11 @@ android {
     compileSdkVersion project.ext.compileSdkVersion
     buildToolsVersion project.ext.buildToolsVersion
 
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
+
     defaultConfig {
         versionName project.ext.releaseVersion
         versionCode project.ext.releaseVersionCode
@@ -71,3 +76,5 @@ dependencies {
     withExtensionsImplementation project(path: modulePrefix + 'extension-vp9')
     withExtensionsImplementation project(path: modulePrefix + 'extension-rtmp')
 }
+
+apply plugin: 'com.google.android.gms.strict-version-matcher-plugin'
\ No newline at end of file
diff --git a/demos/manager/src/main/assets/media.exolist.json b/demos/manager/src/main/assets/media.exolist.json
index 0d26f196c1..c2acf3990b 100644
--- a/demos/manager/src/main/assets/media.exolist.json
+++ b/demos/manager/src/main/assets/media.exolist.json
@@ -4,22 +4,22 @@
     "samples": [
       {
         "name": "Google Glass (MP4,H264)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=51AF5F39AB0CEC3E5497CD9C900EBFEAECCCB5C7.8506521BFC350652163895D4C26DEE124209AA9E&key=ik0",
+        "uri": "https://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=51AF5F39AB0CEC3E5497CD9C900EBFEAECCCB5C7.8506521BFC350652163895D4C26DEE124209AA9E&key=ik0",
         "extension": "mpd"
       },
       {
         "name": "Google Play (MP4,H264)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/3aa39fa2cc27967f/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=A2716F75795F5D2AF0E88962FFCD10DB79384F29.84308FF04844498CE6FBCE4731507882B8307798&key=ik0",
+        "uri": "https://www.youtube.com/api/manifest/dash/id/3aa39fa2cc27967f/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=A2716F75795F5D2AF0E88962FFCD10DB79384F29.84308FF04844498CE6FBCE4731507882B8307798&key=ik0",
         "extension": "mpd"
       },
       {
         "name": "Google Glass (WebM,VP9)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,webm2_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=249B04F79E984D7F86B4D8DB48AE6FAF41C17AB3.7B9F0EC0505E1566E59B8E488E9419F253DDF413&key=ik0",
+        "uri": "https://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,webm2_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=249B04F79E984D7F86B4D8DB48AE6FAF41C17AB3.7B9F0EC0505E1566E59B8E488E9419F253DDF413&key=ik0",
         "extension": "mpd"
       },
       {
         "name": "Google Play (WebM,VP9)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/3aa39fa2cc27967f/source/youtube?as=fmp4_audio_clear,webm2_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=B1C2A74783AC1CC4865EB312D7DD2D48230CC9FD.BD153B9882175F1F94BFE5141A5482313EA38E8D&key=ik0",
+        "uri": "https://www.youtube.com/api/manifest/dash/id/3aa39fa2cc27967f/source/youtube?as=fmp4_audio_clear,webm2_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=B1C2A74783AC1CC4865EB312D7DD2D48230CC9FD.BD153B9882175F1F94BFE5141A5482313EA38E8D&key=ik0",
         "extension": "mpd"
       }
     ]
@@ -330,11 +330,11 @@
     "samples": [
       {
         "name": "Super speed",
-        "uri": "http://playready.directtaps.net/smoothstreaming/SSWSS720H264/SuperSpeedway_720.ism"
+        "uri": "https://playready.directtaps.net/smoothstreaming/SSWSS720H264/SuperSpeedway_720.ism"
       },
       {
         "name": "Super speed (PlayReady)",
-        "uri": "http://playready.directtaps.net/smoothstreaming/SSWSS720H264PR/SuperSpeedway_720.ism",
+        "uri": "https://playready.directtaps.net/smoothstreaming/SSWSS720H264PR/SuperSpeedway_720.ism",
         "drm_scheme": "playready"
       }
     ]
@@ -352,11 +352,11 @@
       },
       {
         "name": "Apple master playlist advanced (TS)",
-        "uri": "https://tungsten.aaplimg.com/VOD/bipbop_adv_example_v2/master.m3u8"
+        "uri": "https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_ts/master.m3u8"
       },
       {
         "name": "Apple master playlist advanced (fMP4)",
-        "uri": "https://tungsten.aaplimg.com/VOD/bipbop_adv_fmp4_example/master.m3u8"
+        "uri": "https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8"
       },
       {
         "name": "Apple TS media playlist",
@@ -365,10 +365,6 @@
       {
         "name": "Apple AAC media playlist",
         "uri": "https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_4x3/gear0/prog_index.m3u8"
-      },
-      {
-        "name": "Apple ID3 metadata",
-        "uri": "http://devimages.apple.com/samplecode/adDemo/ad.m3u8"
       }
     ]
   },
@@ -376,7 +372,7 @@
     "name": "Misc",
     "samples": [
       {
-        "name": "Dizzy",
+        "name": "Dizzy (MP4)",
         "uri": "https://html5demos.com/assets/dizzy.mp4"
       },
       {
@@ -391,10 +387,6 @@
         "name": "Android screens (Matroska)",
         "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv"
       },
-      {
-        "name": "Big Buck Bunny (MP4 Video)",
-        "uri": "http://redirector.c.youtube.com/videoplayback?id=604ed5ce52eda7ee&itag=22&source=youtube&sparams=ip,ipbits,expire,source,id&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=513F28C7FDCBEC60A66C86C9A393556C99DC47FB.04C88036EEE12565A1ED864A875A58F15D8B5300&key=ik0"
-      },
       {
         "name": "Screens 360P (WebM,VP9,No Audio)",
         "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/video-vp9-360.webm"
@@ -419,21 +411,9 @@
         "name": "Google Play (Ogg/Vorbis Audio)",
         "uri": "https://storage.googleapis.com/exoplayer-test-media-1/ogg/play.ogg"
       },
-      {
-        "name": "Google Glass (WebM Video with Vorbis Audio)",
-        "uri": "http://demos.webmproject.org/exoplayer/glass_vp9_vorbis.webm"
-      },
-      {
-        "name": "Google Glass (VP9 in MP4/ISO-BMFF)",
-        "uri": "http://demos.webmproject.org/exoplayer/glass.mp4"
-      },
-      {
-        "name": "Google Glass DASH - VP9 and Opus",
-        "uri": "http://demos.webmproject.org/dash/201410/vp9_glass/manifest_vp9_opus.mpd"
-      },
       {
         "name": "Big Buck Bunny (FLV Video)",
-        "uri": "http://vod.leasewebcdn.com/bbb.flv?ri=1024&rs=150&start=0"
+        "uri": "https://vod.leasewebcdn.com/bbb.flv?ri=1024&rs=150&start=0"
       }
     ]
   },
@@ -570,23 +550,32 @@
       {
         "name": "VMAP empty midroll",
         "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "http://vastsynthesizer.appspot.com/empty-midroll"
+        "ad_tag_uri": "https://vastsynthesizer.appspot.com/empty-midroll"
       },
       {
         "name": "VMAP full, empty, full midrolls",
         "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "http://vastsynthesizer.appspot.com/empty-midroll-2"
+        "ad_tag_uri": "https://vastsynthesizer.appspot.com/empty-midroll-2"
       }
     ]
   },
   {
-    "name": "ABR",
+    "name": "360",
     "samples": [
       {
-        "name": "Random ABR - Google Glass (MP4,H264)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=51AF5F39AB0CEC3E5497CD9C900EBFEAECCCB5C7.8506521BFC350652163895D4C26DEE124209AA9E&key=ik0",
-        "extension": "mpd",
-        "abr_algorithm": "random"
+        "name": "Congo (360 top-bottom stereo)",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/360/congo.mp4",
+        "spherical_stereo_mode": "top_bottom"
+      },
+      {
+        "name": "Sphericalv2 (180 top-bottom stereo)",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/360/sphericalv2.mp4",
+        "spherical_stereo_mode": "top_bottom"
+      },
+      {
+        "name": "Iceland (360 top-bottom stereo ts)",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/360/iceland0.ts",
+        "spherical_stereo_mode": "top_bottom"
       }
     ]
   }
diff --git a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoApplication.java b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoApplication.java
index a9919d6e06..811dea0a80 100644
--- a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoApplication.java
+++ b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoApplication.java
@@ -16,15 +16,8 @@
 package com.google.android.exoplayer2.managerdemo;
 
 import android.app.Application;
-import com.google.android.exoplayer2.managerdemo.BuildConfig;
-import com.google.android.exoplayer2.managerdemo.DownloadTracker;
-import com.google.android.exoplayer2.offline.DownloadAction.Deserializer;
 import com.google.android.exoplayer2.offline.DownloadManager;
 import com.google.android.exoplayer2.offline.DownloaderConstructorHelper;
-import com.google.android.exoplayer2.offline.ProgressiveDownloadAction;
-import com.google.android.exoplayer2.source.dash.offline.DashDownloadAction;
-import com.google.android.exoplayer2.source.hls.offline.HlsDownloadAction;
-import com.google.android.exoplayer2.source.smoothstreaming.offline.SsDownloadAction;
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
 import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
@@ -48,13 +41,6 @@
   private static final String DOWNLOAD_TRACKER_ACTION_FILE = "tracked_actions";
   private static final String DOWNLOAD_CONTENT_DIRECTORY = "downloads";
   private static final int MAX_SIMULTANEOUS_DOWNLOADS = 2;
-  private static final Deserializer[] DOWNLOAD_DESERIALIZERS =
-      new Deserializer[] {
-          DashDownloadAction.DESERIALIZER,
-          HlsDownloadAction.DESERIALIZER,
-          SsDownloadAction.DESERIALIZER,
-          ProgressiveDownloadAction.DESERIALIZER
-      };
 
   protected String userAgent;
 
@@ -70,16 +56,15 @@ public void onCreate() {
   }
 
   /** Returns a {@link DataSource.Factory}. */
-  public DataSource.Factory buildDataSourceFactory(TransferListener<? super DataSource> listener) {
+  public DataSource.Factory buildDataSourceFactory() {
     DefaultDataSourceFactory upstreamFactory =
-        new DefaultDataSourceFactory(this, listener, buildHttpDataSourceFactory(listener));
+        new DefaultDataSourceFactory(this, buildHttpDataSourceFactory());
     return buildReadOnlyCacheDataSource(upstreamFactory, getDownloadCache());
   }
 
   /** Returns a {@link HttpDataSource.Factory}. */
-  public HttpDataSource.Factory buildHttpDataSourceFactory(
-      TransferListener<? super DataSource> listener) {
-    return new DefaultHttpDataSourceFactory(userAgent, listener);
+  public HttpDataSource.Factory buildHttpDataSourceFactory() {
+    return new DefaultHttpDataSourceFactory(userAgent);
   }
 
   /** Returns whether extension renderers should be used. */
@@ -100,21 +85,18 @@ public DownloadTracker getDownloadTracker() {
   private synchronized void initDownloadManager() {
     if (downloadManager == null) {
       DownloaderConstructorHelper downloaderConstructorHelper =
-          new DownloaderConstructorHelper(
-              getDownloadCache(), buildHttpDataSourceFactory(/* listener= */ null));
+          new DownloaderConstructorHelper(getDownloadCache(), buildHttpDataSourceFactory());
       downloadManager =
           new DownloadManager(
               downloaderConstructorHelper,
               MAX_SIMULTANEOUS_DOWNLOADS,
               DownloadManager.DEFAULT_MIN_RETRY_COUNT,
-              new File(getDownloadDirectory(), DOWNLOAD_ACTION_FILE),
-              DOWNLOAD_DESERIALIZERS);
+              new File(getDownloadDirectory(), DOWNLOAD_ACTION_FILE));
       downloadTracker =
           new DownloadTracker(
               /* context= */ this,
-              buildDataSourceFactory(/* listener= */ null),
-              new File(getDownloadDirectory(), DOWNLOAD_TRACKER_ACTION_FILE),
-              DOWNLOAD_DESERIALIZERS);
+              buildDataSourceFactory(),
+              new File(getDownloadDirectory(), DOWNLOAD_TRACKER_ACTION_FILE));
       downloadManager.addListener(downloadTracker);
     }
   }
diff --git a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java
index 3641ed16cd..7adcbe9d30 100644
--- a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java
+++ b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java
@@ -40,6 +40,12 @@
   public static final String DRM_LICENSE_URL_EXTRA = "drm_license_url";
   public static final String DRM_KEY_REQUEST_PROPERTIES_EXTRA = "drm_key_request_properties";
   public static final String DRM_MULTI_SESSION_EXTRA = "drm_multi_session";
+
+  public static final String SPHERICAL_STEREO_MODE_EXTRA = "spherical_stereo_mode";
+  public static final String SPHERICAL_STEREO_MODE_MONO = "mono";
+  public static final String SPHERICAL_STEREO_MODE_TOP_BOTTOM = "top_bottom";
+  public static final String SPHERICAL_STEREO_MODE_LEFT_RIGHT = "left_right";
+
   // For backwards compatibility only.
   private static final String DRM_SCHEME_UUID_EXTRA = "drm_scheme_uuid";
 
@@ -77,19 +83,16 @@ public void onRequestPermissionsResult(int requestCode, @NonNull String[] permis
 
   private class DemoDataSourceBuilder implements DataSourceBuilder {
     @Override
-    public DataSource.Factory buildDataSourceFactory(boolean useBandwidthMeter) {
-      // Optional
-      TransferListener<? super DataSource> listener = useBandwidthMeter ? BANDWIDTH_METER : null;
-      return ((DemoApplication) ContextHelper.getApplication(getContext())).buildDataSourceFactory(listener);
+    public DataSource.Factory buildDataSourceFactory() {
+      return ((DemoApplication) ContextHelper.getApplication(getContext())).buildDataSourceFactory();
     }
 
     /**
      * Returns a {@link HttpDataSource.Factory}.
      */
     @Override
-    public HttpDataSource.Factory buildHttpDataSourceFactory(
-        TransferListener<? super DataSource> listener) {
-      return ((DemoApplication) ContextHelper.getApplication(getContext())).buildHttpDataSourceFactory(listener);
+    public HttpDataSource.Factory buildHttpDataSourceFactory() {
+      return ((DemoApplication) ContextHelper.getApplication(getContext())).buildHttpDataSourceFactory();
     }
   }
 
@@ -113,7 +116,7 @@ public void onRequestPermissionsResult(int requestCode, @NonNull String[] permis
         UUID uuid, String licenseUrl, String[] keyRequestPropertiesArray, boolean multiSession)
         throws UnsupportedDrmException {
       HttpDataSource.Factory licenseDataSourceFactory =
-          ((DemoApplication) ContextHelper.getApplication(getContext())).buildHttpDataSourceFactory(/* listener= */ null);
+          ((DemoApplication) ContextHelper.getApplication(getContext())).buildHttpDataSourceFactory();
       HttpMediaDrmCallback drmCallback =
           new HttpMediaDrmCallback(licenseUrl, licenseDataSourceFactory);
       if (keyRequestPropertiesArray != null) {
diff --git a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DownloadTracker.java b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DownloadTracker.java
index 7890cd479c..49d9a3c0e3 100644
--- a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DownloadTracker.java
+++ b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DownloadTracker.java
@@ -22,7 +22,6 @@
 import android.net.Uri;
 import android.os.Handler;
 import android.os.HandlerThread;
-import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.widget.ArrayAdapter;
@@ -36,7 +35,7 @@
 import com.google.android.exoplayer2.offline.DownloadManager.TaskState;
 import com.google.android.exoplayer2.offline.DownloadService;
 import com.google.android.exoplayer2.offline.ProgressiveDownloadHelper;
-import com.google.android.exoplayer2.offline.SegmentDownloadAction;
+import com.google.android.exoplayer2.offline.StreamKey;
 import com.google.android.exoplayer2.offline.TrackKey;
 import com.google.android.exoplayer2.source.TrackGroup;
 import com.google.android.exoplayer2.source.TrackGroupArray;
@@ -46,6 +45,7 @@
 import com.google.android.exoplayer2.ui.DefaultTrackNameProvider;
 import com.google.android.exoplayer2.ui.TrackNameProvider;
 import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.util.Log;
 import com.google.android.exoplayer2.util.Util;
 import java.io.File;
 import java.io.IOException;
@@ -85,7 +85,7 @@ public DownloadTracker(
       Context context,
       DataSource.Factory dataSourceFactory,
       File actionFile,
-      DownloadAction.Deserializer[] deserializers) {
+      DownloadAction.Deserializer... deserializers) {
     this.context = context.getApplicationContext();
     this.dataSourceFactory = dataSourceFactory;
     this.actionFile = new ActionFile(actionFile);
@@ -95,7 +95,8 @@ public DownloadTracker(
     HandlerThread actionFileWriteThread = new HandlerThread("DownloadTracker");
     actionFileWriteThread.start();
     actionFileWriteHandler = new Handler(actionFileWriteThread.getLooper());
-    loadTrackedActions(deserializers);
+    loadTrackedActions(
+        deserializers.length > 0 ? deserializers : DownloadAction.getDefaultDeserializers());
   }
 
   public void addListener(Listener listener) {
@@ -111,15 +112,11 @@ public boolean isDownloaded(Uri uri) {
   }
 
   @SuppressWarnings("unchecked")
-  public <K> List<K> getOfflineStreamKeys(Uri uri) {
+  public List<StreamKey> getOfflineStreamKeys(Uri uri) {
     if (!trackedDownloadStates.containsKey(uri)) {
       return Collections.emptyList();
     }
-    DownloadAction action = trackedDownloadStates.get(uri);
-    if (action instanceof SegmentDownloadAction) {
-      return ((SegmentDownloadAction) action).keys;
-    }
-    return Collections.emptyList();
+    return trackedDownloadStates.get(uri).getKeys();
   }
 
   public void toggleDownload(Activity activity, String name, Uri uri, String extension) {
@@ -178,14 +175,11 @@ private void handleTrackedDownloadStatesChanged() {
     }
     final DownloadAction[] actions = trackedDownloadStates.values().toArray(new DownloadAction[0]);
     actionFileWriteHandler.post(
-        new Runnable() {
-          @Override
-          public void run() {
-            try {
-              actionFile.store(actions);
-            } catch (IOException e) {
-              Log.e(TAG, "Failed to store tracked actions", e);
-            }
+        () -> {
+          try {
+            actionFile.store(actions);
+          } catch (IOException e) {
+            Log.e(TAG, "Failed to store tracked actions", e);
           }
         });
   }
@@ -270,11 +264,11 @@ public void onPrepared(DownloadHelper helper) {
             trackTitles.add(trackNameProvider.getTrackName(trackGroup.getFormat(k)));
           }
         }
-        if (!trackKeys.isEmpty()) {
-          builder.setView(dialogView);
-        }
-        builder.create().show();
       }
+      if (!trackKeys.isEmpty()) {
+        builder.setView(dialogView);
+      }
+      builder.create().show();
     }
 
     @Override
@@ -282,6 +276,7 @@ public void onPrepareError(DownloadHelper helper, IOException e) {
       Toast.makeText(
           context.getApplicationContext(), R.string.download_start_error, Toast.LENGTH_LONG)
           .show();
+      Log.e(TAG, "Failed to start download", e);
     }
 
     @Override
@@ -300,4 +295,4 @@ public void onClick(DialogInterface dialog, int which) {
       }
     }
   }
-}
\ No newline at end of file
+}
diff --git a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/SampleChooserActivity.java b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/SampleChooserActivity.java
index 04d265e2e8..8de6a4a485 100644
--- a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/SampleChooserActivity.java
+++ b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/SampleChooserActivity.java
@@ -22,8 +22,11 @@
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Bundle;
+import android.support.annotation.Nullable;
 import android.util.JsonReader;
-import android.util.Log;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
 import android.view.View;
 import android.view.View.OnClickListener;
 import android.view.ViewGroup;
@@ -40,6 +43,7 @@
 import com.google.android.exoplayer2.upstream.DataSpec;
 import com.google.android.exoplayer2.upstream.DefaultDataSource;
 import com.google.android.exoplayer2.util.Assertions;
+import com.google.android.exoplayer2.util.Log;
 import com.google.android.exoplayer2.util.Util;
 import java.io.IOException;
 import java.io.InputStream;
@@ -55,8 +59,11 @@
 
   private static final String TAG = "SampleChooserActivity";
 
+  private boolean useExtensionRenderers;
   private DownloadTracker downloadTracker;
   private SampleAdapter sampleAdapter;
+  private MenuItem preferExtensionDecodersMenuItem;
+  private MenuItem randomAbrMenuItem;
 
   @Override
   public void onCreate(Bundle savedInstanceState) {
@@ -90,7 +97,9 @@ public void onCreate(Bundle savedInstanceState) {
       Arrays.sort(uris);
     }
 
-    downloadTracker = ((DemoApplication) getApplication()).getDownloadTracker();
+    DemoApplication application = (DemoApplication) getApplication();
+    useExtensionRenderers = application.useExtensionRenderers();
+    downloadTracker = application.getDownloadTracker();
     SampleListLoader loaderTask = new SampleListLoader();
     loaderTask.execute(uris);
 
@@ -105,6 +114,22 @@ public void onCreate(Bundle savedInstanceState) {
     }
   }
 
+  @Override
+  public boolean onCreateOptionsMenu(Menu menu) {
+    MenuInflater inflater = getMenuInflater();
+    inflater.inflate(R.menu.sample_chooser_menu, menu);
+    preferExtensionDecodersMenuItem = menu.findItem(R.id.prefer_extension_decoders);
+    preferExtensionDecodersMenuItem.setVisible(useExtensionRenderers);
+    randomAbrMenuItem = menu.findItem(R.id.random_abr);
+    return true;
+  }
+
+  @Override
+  public boolean onOptionsItemSelected(MenuItem item) {
+    item.setChecked(!item.isChecked());
+    return true;
+  }
+
   @Override
   public void onStart() {
     super.onStart();
@@ -135,7 +160,13 @@ private void onSampleGroups(final List<SampleGroup> groups, boolean sawError) {
   public boolean onChildClick(
       ExpandableListView parent, View view, int groupPosition, int childPosition, long id) {
     Sample sample = (Sample) view.getTag();
-    startActivity(sample.buildIntent(this));
+    startActivity(
+        sample.buildIntent(
+            /* context= */ this,
+            isNonNullAndChecked(preferExtensionDecodersMenuItem),
+            isNonNullAndChecked(randomAbrMenuItem)
+                ? DemoPlayerManager.ABR_ALGORITHM_RANDOM
+                : DemoPlayerManager.ABR_ALGORITHM_DEFAULT));
     return true;
   }
 
@@ -168,6 +199,11 @@ private int getDownloadUnsupportedStringId(Sample sample) {
     return 0;
   }
 
+  private static boolean isNonNullAndChecked(@Nullable MenuItem menuItem) {
+    // Temporary workaround for layouts that do not inflate the options menu.
+    return menuItem != null && menuItem.isChecked();
+  }
+
   private final class SampleListLoader extends AsyncTask<String, Void, List<SampleGroup>> {
 
     private boolean sawError;
@@ -177,7 +213,8 @@ private int getDownloadUnsupportedStringId(Sample sample) {
       List<SampleGroup> result = new ArrayList<>();
       Context context = getApplicationContext();
       String userAgent = Util.getUserAgent(context, "ExoPlayerDemo");
-      DataSource dataSource = new DefaultDataSource(context, null, userAgent, false);
+      DataSource dataSource =
+          new DefaultDataSource(context, userAgent, /* allowCrossProtocolRedirects= */ false);
       for (String uri : uris) {
         DataSpec dataSpec = new DataSpec(Uri.parse(uri));
         InputStream inputStream = new DataSourceInputStream(dataSource, dataSpec);
@@ -245,10 +282,9 @@ private Sample readEntry(JsonReader reader, boolean insidePlaylist) throws IOExc
       String drmLicenseUrl = null;
       String[] drmKeyRequestProperties = null;
       boolean drmMultiSession = false;
-      boolean preferExtensionDecoders = false;
       ArrayList<UriSample> playlistSamples = null;
       String adTagUri = null;
-      String abrAlgorithm = null;
+      String sphericalStereoMode = null;
 
       reader.beginObject();
       while (reader.hasNext()) {
@@ -287,11 +323,6 @@ private Sample readEntry(JsonReader reader, boolean insidePlaylist) throws IOExc
           case "drm_multi_session":
             drmMultiSession = reader.nextBoolean();
             break;
-          case "prefer_extension_decoders":
-            Assertions.checkState(!insidePlaylist,
-                "Invalid attribute on nested item: prefer_extension_decoders");
-            preferExtensionDecoders = reader.nextBoolean();
-            break;
           case "playlist":
             Assertions.checkState(!insidePlaylist, "Invalid nesting of playlists");
             playlistSamples = new ArrayList<>();
@@ -304,10 +335,10 @@ private Sample readEntry(JsonReader reader, boolean insidePlaylist) throws IOExc
           case "ad_tag_uri":
             adTagUri = reader.nextString();
             break;
-          case "abr_algorithm":
+          case "spherical_stereo_mode":
             Assertions.checkState(
-                !insidePlaylist, "Invalid attribute on nested item: abr_algorithm");
-            abrAlgorithm = reader.nextString();
+                !insidePlaylist, "Invalid attribute on nested item: spherical_stereo_mode");
+            sphericalStereoMode = reader.nextString();
             break;
           default:
             throw new ParserException("Unsupported attribute name: " + name);
@@ -321,11 +352,15 @@ private Sample readEntry(JsonReader reader, boolean insidePlaylist) throws IOExc
       if (playlistSamples != null) {
         UriSample[] playlistSamplesArray = playlistSamples.toArray(
             new UriSample[playlistSamples.size()]);
-        return new PlaylistSample(
-            sampleName, preferExtensionDecoders, abrAlgorithm, drmInfo, playlistSamplesArray);
+        return new PlaylistSample(sampleName, drmInfo, playlistSamplesArray);
       } else {
         return new UriSample(
-            sampleName, preferExtensionDecoders, abrAlgorithm, drmInfo, uri, extension, adTagUri);
+            sampleName,
+            drmInfo,
+            uri,
+            extension,
+            adTagUri,
+            sphericalStereoMode);
       }
     }
 
@@ -483,19 +518,15 @@ public void updateIntent(Intent intent) {
 
   private abstract static class Sample {
     public final String name;
-    public final boolean preferExtensionDecoders;
-    public final String abrAlgorithm;
     public final DrmInfo drmInfo;
 
-    public Sample(
-        String name, boolean preferExtensionDecoders, String abrAlgorithm, DrmInfo drmInfo) {
+    public Sample(String name, DrmInfo drmInfo) {
       this.name = name;
-      this.preferExtensionDecoders = preferExtensionDecoders;
-      this.abrAlgorithm = abrAlgorithm;
       this.drmInfo = drmInfo;
     }
 
-    public Intent buildIntent(Context context) {
+    public Intent buildIntent(
+        Context context, boolean preferExtensionDecoders, String abrAlgorithm) {
       Intent intent = new Intent(context, PlayerActivity.class);
       intent.putExtra(DemoPlayerManager.PREFER_EXTENSION_DECODERS_EXTRA, preferExtensionDecoders);
       intent.putExtra(DemoPlayerManager.ABR_ALGORITHM_EXTRA, abrAlgorithm);
@@ -512,27 +543,30 @@ public Intent buildIntent(Context context) {
     public final Uri uri;
     public final String extension;
     public final String adTagUri;
+    public final String sphericalStereoMode;
 
     public UriSample(
         String name,
-        boolean preferExtensionDecoders,
-        String abrAlgorithm,
         DrmInfo drmInfo,
         Uri uri,
         String extension,
-        String adTagUri) {
-      super(name, preferExtensionDecoders, abrAlgorithm, drmInfo);
+        String adTagUri,
+        String sphericalStereoMode) {
+      super(name, drmInfo);
       this.uri = uri;
       this.extension = extension;
       this.adTagUri = adTagUri;
+      this.sphericalStereoMode = sphericalStereoMode;
     }
 
     @Override
-    public Intent buildIntent(Context context) {
-      return super.buildIntent(context)
+    public Intent buildIntent(
+        Context context, boolean preferExtensionDecoders, String abrAlgorithm) {
+      return super.buildIntent(context, preferExtensionDecoders, abrAlgorithm)
           .setData(uri)
           .putExtra(DemoPlayerManager.EXTENSION_EXTRA, extension)
           .putExtra(DemoPlayerManager.AD_TAG_URI_EXTRA, adTagUri)
+          .putExtra(DemoPlayerManager.SPHERICAL_STEREO_MODE_EXTRA, sphericalStereoMode)
           .setAction(DemoPlayerManager.ACTION_VIEW);
     }
 
@@ -544,23 +578,22 @@ public Intent buildIntent(Context context) {
 
     public PlaylistSample(
         String name,
-        boolean preferExtensionDecoders,
-        String abrAlgorithm,
         DrmInfo drmInfo,
         UriSample... children) {
-      super(name, preferExtensionDecoders, abrAlgorithm, drmInfo);
+      super(name, drmInfo);
       this.children = children;
     }
 
     @Override
-    public Intent buildIntent(Context context) {
+    public Intent buildIntent(
+        Context context, boolean preferExtensionDecoders, String abrAlgorithm) {
       String[] uris = new String[children.length];
       String[] extensions = new String[children.length];
       for (int i = 0; i < children.length; i++) {
         uris[i] = children[i].uri.toString();
         extensions[i] = children[i].extension;
       }
-      return super.buildIntent(context)
+      return super.buildIntent(context, preferExtensionDecoders, abrAlgorithm)
           .putExtra(DemoPlayerManager.URI_LIST_EXTRA, uris)
           .putExtra(DemoPlayerManager.EXTENSION_LIST_EXTRA, extensions)
           .setAction(DemoPlayerManager.ACTION_VIEW_LIST);
diff --git a/demos/manager/src/main/res/menu/sample_chooser_menu.xml b/demos/manager/src/main/res/menu/sample_chooser_menu.xml
new file mode 100644
index 0000000000..566b23a0d5
--- /dev/null
+++ b/demos/manager/src/main/res/menu/sample_chooser_menu.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2018 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<menu xmlns:android="http://schemas.android.com/apk/res/android">
+  <item android:id="@+id/prefer_extension_decoders"
+    android:title="@string/prefer_extension_decoders"
+    android:showAsAction="never"
+    android:checkable="true"/>
+  <item android:id="@+id/random_abr"
+    android:title="@string/random_abr"
+    android:showAsAction="never"
+    android:checkable="true"/>
+</menu>
diff --git a/demos/manager/src/main/res/values/strings.xml b/demos/manager/src/main/res/values/strings.xml
index 06d058384b..067b7c76bf 100644
--- a/demos/manager/src/main/res/values/strings.xml
+++ b/demos/manager/src/main/res/values/strings.xml
@@ -19,10 +19,14 @@
 
   <string name="unexpected_intent_action">Unexpected intent action: <xliff:g id="action">%1$s</xliff:g></string>
 
+  <string name="error_cleartext_not_permitted">Cleartext traffic not permitted</string>
+
   <string name="error_generic">Playback failed</string>
 
   <string name="error_unrecognized_abr_algorithm">Unrecognized ABR algorithm</string>
 
+  <string name="error_unrecognized_stereo_mode">Unrecognized stereo mode</string>
+
   <string name="error_drm_not_supported">Protected content not supported on API levels below 18</string>
 
   <string name="error_drm_unsupported_scheme">This device does not support the required DRM scheme</string>
@@ -57,4 +61,8 @@
 
   <string name="download_ads_unsupported">IMA does not support offline ads</string>
 
-</resources>
+  <string name="prefer_extension_decoders">Prefer extension decoders</string>
+
+  <string name="random_abr">Enable random ABR</string>
+
+</resources>
\ No newline at end of file
diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
index b515c80c54..aaf39692e8 100644
--- a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
@@ -131,11 +131,10 @@ public void setPlayerDependencies(PlayerDependencies dependencies) {
   /** DataSource.Factory builder methods*/
   public interface DataSourceBuilder {
     /*** Returns a {@link DataSource.Factory}.*/
-    DataSource.Factory buildDataSourceFactory(boolean useBandwidthMeter);
+    DataSource.Factory buildDataSourceFactory();
 
     /*** Returns a {@link HttpDataSource.Factory}.*/
-    HttpDataSource.Factory buildHttpDataSourceFactory(
-        TransferListener<? super DataSource> listener);
+    HttpDataSource.Factory buildHttpDataSourceFactory();
   }
 
   /** Drm builder methods*/
diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
index 7853ff9d13..77baa1ccc6 100644
--- a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
@@ -161,7 +161,7 @@ public SimpleExoPlayer getPlayer() {
   @Override
   public void setPlayerDependencies(PlayerDependencies dependencies) {
     super.setPlayerDependencies(dependencies);
-    mediaDataSourceFactory = dependencies.dataSourceBuilder().buildDataSourceFactory(true);
+    mediaDataSourceFactory = dependencies.dataSourceBuilder().buildDataSourceFactory();
   }
 
   // Activity lifecycle
@@ -280,7 +280,7 @@ public void initializePlayer() {
       trackSelector.setParameters(trackSelectorParameters);
       lastSeenTrackGroupArray = null;
 
-      player = ExoPlayerFactory.newSimpleInstance(renderersFactory, trackSelector, getLoadControl(), drmSessionManager);
+      player = ExoPlayerFactory.newSimpleInstance(getContext(), renderersFactory, trackSelector, getLoadControl(), drmSessionManager, BANDWIDTH_METER);
       player.addListener(this);
       player.setPlayWhenReady(startAutoPlay);
       player.addAnalyticsListener(new EventLogger(trackSelector));
@@ -443,19 +443,16 @@ public LoadControl getLoadControl() {
   public class DefaultDataSourceBuilder implements DataSourceBuilder {
     /*** Returns a new DataSource factory.*/
     @Override
-    public DataSource.Factory buildDataSourceFactory(boolean useBandwidthMeter) {
-      // Optional
-      TransferListener<? super DataSource> listener = useBandwidthMeter ? BANDWIDTH_METER : null;
+    public DataSource.Factory buildDataSourceFactory() {
       DefaultDataSourceFactory upstreamFactory =
-          new DefaultDataSourceFactory(getContext(), listener, buildHttpDataSourceFactory(listener));
+          new DefaultDataSourceFactory(getContext(), buildHttpDataSourceFactory());
       return upstreamFactory;
     }
 
     /*** Returns a {@link HttpDataSource.Factory}.*/
     @Override
-    public HttpDataSource.Factory buildHttpDataSourceFactory(
-        TransferListener<? super DataSource> listener) {
-      return new DefaultHttpDataSourceFactory(Util.getUserAgent(getContext(), USER_AGENT), listener);
+    public HttpDataSource.Factory buildHttpDataSourceFactory() {
+      return new DefaultHttpDataSourceFactory(Util.getUserAgent(getContext(), USER_AGENT));
     }
   }
 
@@ -469,7 +466,7 @@ public MediaSource buildMediaSource(Uri uri) {
     @SuppressWarnings("unchecked")
     public MediaSource buildMediaSource(Uri uri, @Nullable String overrideExtension) {
       return PlayerUtils.buildSimpleMediaSource(
-          playerDependencies().dataSourceBuilder().buildDataSourceFactory(false),
+          playerDependencies().dataSourceBuilder().buildDataSourceFactory(),
           mediaDataSourceFactory, uri, overrideExtension);
     }
   }
