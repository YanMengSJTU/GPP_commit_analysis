diff --git a/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlParserTest.java
index 63b5852a2b..b7de1c949a 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlParserTest.java
@@ -57,6 +57,7 @@
   private static final String FONT_SIZE_MISSING_UNIT_TTML_FILE = "ttml/font_size_no_unit.xml";
   private static final String FONT_SIZE_INVALID_TTML_FILE = "ttml/font_size_invalid.xml";
   private static final String FONT_SIZE_EMPTY_TTML_FILE = "ttml/font_size_empty.xml";
+  private static final String FRAME_RATE_TTML_FILE = "ttml/frame_rate.xml";
 
   public void testInlineAttributes() throws IOException {
     TtmlSubtitle subtitle = getSubtitle(INLINE_ATTRIBUTES_TTML_FILE);
@@ -365,6 +366,15 @@ public void testFontSizeWithEmptyValueIsIgnored() throws IOException {
     assertEquals(0, spannable.getSpans(0, spannable.length(), AbsoluteSizeSpan.class).length);
   }
 
+  public void testFrameRate() throws IOException {
+    TtmlSubtitle subtitle = getSubtitle(FRAME_RATE_TTML_FILE);
+    assertEquals(4, subtitle.getEventTimeCount());
+    assertEquals(1_000_000, subtitle.getEventTime(0));
+    assertEquals(1_010_000, subtitle.getEventTime(1));
+    assertEquals(1_001_000_000, subtitle.getEventTime(2), 1000);
+    assertEquals(2_002_000_000, subtitle.getEventTime(3), 2000);
+  }
+
   private void assertSpans(TtmlSubtitle subtitle, int second,
       String text, String font, int fontStyle,
       int backgroundColor, int color, boolean isUnderline,
diff --git a/library/src/main/java/com/google/android/exoplayer/text/CuePainter.java b/library/src/main/java/com/google/android/exoplayer/text/CuePainter.java
index a86edd376a..bff9a8a15c 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/CuePainter.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/CuePainter.java
@@ -216,6 +216,9 @@ public void draw(Cue cue, boolean applyEmbeddedStyles, CaptionStyleCompat style,
     for (int i = 0; i < lineCount; i++) {
       textWidth = Math.max((int) Math.ceil(textLayout.getLineWidth(i)), textWidth);
     }
+    if (cueSize != Cue.DIMEN_UNSET && textWidth < availableWidth) {
+      textWidth = availableWidth;
+    }
     textWidth += textPaddingX * 2;
 
     int textLeft;
diff --git a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlNode.java b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlNode.java
index abf9a4643c..691f69c1ae 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlNode.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlNode.java
@@ -180,7 +180,7 @@ private void getEventTimes(TreeSet<Long> out, boolean descendsPNode) {
     List<Cue> cues = new ArrayList<>();
     for (Entry<String, SpannableStringBuilder> entry : regionOutputs.entrySet()) {
       TtmlRegion region = regionMap.get(entry.getKey());
-      cues.add(new Cue(cleanUpText(entry.getValue()), null, region.line, Cue.TYPE_UNSET,
+      cues.add(new Cue(cleanUpText(entry.getValue()), null, region.line, region.lineType,
           Cue.TYPE_UNSET, region.position, Cue.TYPE_UNSET, region.width));
     }
     return cues;
diff --git a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlParser.java b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlParser.java
index 9c72753706..a4fa3caeb7 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlParser.java
@@ -1,4 +1,4 @@
-/*arse
+/*
  * Copyright (C) 2014 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -64,6 +64,8 @@
 
   private static final String TAG = "TtmlParser";
 
+  private static final String TTP = "http://www.w3.org/ns/ttml#parameter";
+
   private static final String ATTR_BEGIN = "begin";
   private static final String ATTR_DURATION = "dur";
   private static final String ATTR_END = "end";
@@ -79,10 +81,10 @@
   private static final Pattern PERCENTAGE_COORDINATES =
       Pattern.compile("^(\\d+\\.?\\d*?)% (\\d+\\.?\\d*?)%$");
 
-  // TODO: read and apply the following attributes if specified.
-  private static final int DEFAULT_FRAMERATE = 30;
-  private static final int DEFAULT_SUBFRAMERATE = 1;
-  private static final int DEFAULT_TICKRATE = 1;
+  private static final int DEFAULT_FRAME_RATE = 30;
+
+  private static final FrameAndTickRate DEFAULT_FRAME_AND_TICK_RATE =
+      new FrameAndTickRate(DEFAULT_FRAME_RATE, 1, 1);
 
   private final XmlPullParserFactory xmlParserFactory;
 
@@ -113,11 +115,15 @@ public TtmlSubtitle parse(byte[] bytes, int offset, int length) throws ParserExc
       LinkedList<TtmlNode> nodeStack = new LinkedList<>();
       int unsupportedNodeDepth = 0;
       int eventType = xmlParser.getEventType();
+      FrameAndTickRate frameAndTickRate = DEFAULT_FRAME_AND_TICK_RATE;
       while (eventType != XmlPullParser.END_DOCUMENT) {
         TtmlNode parent = nodeStack.peekLast();
         if (unsupportedNodeDepth == 0) {
           String name = xmlParser.getName();
           if (eventType == XmlPullParser.START_TAG) {
+            if (TtmlNode.TAG_TT.equals(name)) {
+              frameAndTickRate = parseFrameAndTickRates(xmlParser);
+            }
             if (!isSupportedTag(name)) {
               Log.i(TAG, "Ignoring unsupported tag: " + xmlParser.getName());
               unsupportedNodeDepth++;
@@ -125,7 +131,7 @@ public TtmlSubtitle parse(byte[] bytes, int offset, int length) throws ParserExc
               parseHeader(xmlParser, globalStyles, regionMap);
             } else {
               try {
-                TtmlNode node = parseNode(xmlParser, parent, regionMap);
+                TtmlNode node = parseNode(xmlParser, parent, regionMap, frameAndTickRate);
                 nodeStack.addLast(node);
                 if (parent != null) {
                   parent.addChild(node);
@@ -162,6 +168,39 @@ public TtmlSubtitle parse(byte[] bytes, int offset, int length) throws ParserExc
     }
   }
 
+  private FrameAndTickRate parseFrameAndTickRates(XmlPullParser xmlParser) throws ParserException {
+    int frameRate = DEFAULT_FRAME_RATE;
+    String frameRateStr = xmlParser.getAttributeValue(TTP, "frameRate");
+    if (frameRateStr != null) {
+      frameRate = Integer.parseInt(frameRateStr);
+    }
+
+    float frameRateMultiplier = 1;
+    String frameRateMultiplierStr = xmlParser.getAttributeValue(TTP, "frameRateMultiplier");
+    if (frameRateMultiplierStr != null) {
+      String[] parts = frameRateMultiplierStr.split(" ");
+      if (parts.length != 2) {
+        throw new ParserException("frameRateMultiplier doesn't have 2 parts");
+      }
+      float numerator = Integer.parseInt(parts[0]);
+      float denominator = Integer.parseInt(parts[1]);
+      frameRateMultiplier = numerator / denominator;
+    }
+
+    int subFrameRate = DEFAULT_FRAME_AND_TICK_RATE.subFrameRate;
+    String subFrameRateStr = xmlParser.getAttributeValue(TTP, "subFrameRate");
+    if (subFrameRateStr != null) {
+      subFrameRate = Integer.parseInt(subFrameRateStr);
+    }
+
+    int tickRate = DEFAULT_FRAME_AND_TICK_RATE.tickRate;
+    String tickRateStr = xmlParser.getAttributeValue(TTP, "tickRate");
+    if (tickRateStr != null) {
+      tickRate = Integer.parseInt(tickRateStr);
+    }
+    return new FrameAndTickRate(frameRate * frameRateMultiplier, subFrameRate, tickRate);
+  }
+
   private Map<String, TtmlStyle> parseHeader(XmlPullParser xmlParser,
       Map<String, TtmlStyle> globalStyles, Map<String, TtmlRegion> globalRegions)
       throws IOException, XmlPullParserException {
@@ -223,8 +262,8 @@ public TtmlSubtitle parse(byte[] bytes, int offset, int length) throws ParserExc
         }
       }
     }
-    return position != Cue.DIMEN_UNSET ? new Pair<>(regionId, new TtmlRegion(position, line, width))
-        : null;
+    return position != Cue.DIMEN_UNSET ? new Pair<>(regionId, new TtmlRegion(position, line,
+        Cue.LINE_TYPE_FRACTION, width)) : null;
   }
 
   private String[] parseStyleIds(String parentStyleIds) {
@@ -324,7 +363,7 @@ private TtmlStyle createIfNull(TtmlStyle style) {
   }
 
   private TtmlNode parseNode(XmlPullParser parser, TtmlNode parent,
-      Map<String, TtmlRegion> regionMap) throws ParserException {
+      Map<String, TtmlRegion> regionMap, FrameAndTickRate frameAndTickRate) throws ParserException {
     long duration = 0;
     long startTime = TtmlNode.UNDEFINED_TIME;
     long endTime = TtmlNode.UNDEFINED_TIME;
@@ -336,14 +375,11 @@ private TtmlNode parseNode(XmlPullParser parser, TtmlNode parent,
       String attr = parser.getAttributeName(i);
       String value = parser.getAttributeValue(i);
       if (ATTR_BEGIN.equals(attr)) {
-        startTime = parseTimeExpression(value,
-            DEFAULT_FRAMERATE, DEFAULT_SUBFRAMERATE, DEFAULT_TICKRATE);
+        startTime = parseTimeExpression(value, frameAndTickRate);
       } else if (ATTR_END.equals(attr)) {
-        endTime = parseTimeExpression(value,
-            DEFAULT_FRAMERATE, DEFAULT_SUBFRAMERATE, DEFAULT_TICKRATE);
+        endTime = parseTimeExpression(value, frameAndTickRate);
       } else if (ATTR_DURATION.equals(attr)) {
-        duration = parseTimeExpression(value,
-            DEFAULT_FRAMERATE, DEFAULT_SUBFRAMERATE, DEFAULT_TICKRATE);
+        duration = parseTimeExpression(value, frameAndTickRate);
       } else if (ATTR_STYLE.equals(attr)) {
         // IDREFS: potentially multiple space delimited ids
         String[] ids = parseStyleIds(value);
@@ -441,14 +477,12 @@ private static void parseFontSize(String expression, TtmlStyle out) throws Parse
    * <a href="http://www.w3.org/TR/ttaf1-dfxp/#timing-value-timeExpression">timeExpression</a>
    *
    * @param time A string that includes the time expression.
-   * @param frameRate The frame rate of the stream.
-   * @param subframeRate The sub-frame rate of the stream
-   * @param tickRate The tick rate of the stream.
+   * @param frameAndTickRate The effective frame and tick rates of the stream.
    * @return The parsed timestamp in microseconds.
    * @throws ParserException If the given string does not contain a valid time expression.
    */
-  private static long parseTimeExpression(String time, int frameRate, int subframeRate,
-      int tickRate) throws ParserException {
+  private static long parseTimeExpression(String time, FrameAndTickRate frameAndTickRate)
+      throws ParserException {
     Matcher matcher = CLOCK_TIME.matcher(time);
     if (matcher.matches()) {
       String hours = matcher.group(1);
@@ -460,10 +494,13 @@ private static long parseTimeExpression(String time, int frameRate, int subframe
       String fraction = matcher.group(4);
       durationSeconds += (fraction != null) ? Double.parseDouble(fraction) : 0;
       String frames = matcher.group(5);
-      durationSeconds += (frames != null) ? ((double) Long.parseLong(frames)) / frameRate : 0;
+      durationSeconds += (frames != null)
+          ? Long.parseLong(frames) / frameAndTickRate.effectiveFrameRate : 0;
       String subframes = matcher.group(6);
-      durationSeconds += (subframes != null) ?
-          ((double) Long.parseLong(subframes)) / subframeRate / frameRate : 0;
+      durationSeconds += (subframes != null)
+          ? ((double) Long.parseLong(subframes)) / frameAndTickRate.subFrameRate
+              / frameAndTickRate.effectiveFrameRate
+          : 0;
       return (long) (durationSeconds * C.MICROS_PER_SECOND);
     }
     matcher = OFFSET_TIME.matcher(time);
@@ -480,13 +517,24 @@ private static long parseTimeExpression(String time, int frameRate, int subframe
       } else if (unit.equals("ms")) {
         offsetSeconds /= 1000;
       } else if (unit.equals("f")) {
-        offsetSeconds /= frameRate;
+        offsetSeconds /= frameAndTickRate.effectiveFrameRate;
       } else if (unit.equals("t")) {
-        offsetSeconds /= tickRate;
+        offsetSeconds /= frameAndTickRate.tickRate;
       }
       return (long) (offsetSeconds * C.MICROS_PER_SECOND);
     }
     throw new ParserException("Malformed time expression: " + time);
   }
 
+  private static final class FrameAndTickRate {
+    final float effectiveFrameRate;
+    final int subFrameRate;
+    final int tickRate;
+
+    FrameAndTickRate(float effectiveFrameRate, int subFrameRate, int tickRate) {
+      this.effectiveFrameRate = effectiveFrameRate;
+      this.subFrameRate = subFrameRate;
+      this.tickRate = tickRate;
+    }
+  }
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRegion.java b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRegion.java
index 135018a861..a3ea9790a1 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRegion.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRegion.java
@@ -24,15 +24,17 @@
 
   public final float position;
   public final float line;
+  public final int lineType;
   public final float width;
 
   public TtmlRegion() {
-    this(Cue.DIMEN_UNSET, Cue.DIMEN_UNSET, Cue.DIMEN_UNSET);
+    this(Cue.DIMEN_UNSET, Cue.DIMEN_UNSET, Cue.TYPE_UNSET, Cue.DIMEN_UNSET);
   }
 
-  public TtmlRegion(float position, float line, float width) {
+  public TtmlRegion(float position, float line, int lineType, float width) {
     this.position = position;
     this.line = line;
+    this.lineType = lineType;
     this.width = width;
   }
 
