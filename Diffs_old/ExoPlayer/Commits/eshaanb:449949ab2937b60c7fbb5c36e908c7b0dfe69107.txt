diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/FlvExtractor.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/FlvExtractor.java
index 13941430b0..0dbbdd94bc 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/FlvExtractor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/FlvExtractor.java
@@ -15,7 +15,7 @@
  */
 package com.google.android.exoplayer2.extractor.flv;
 
-import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.extractor.Extractor;
 import com.google.android.exoplayer2.extractor.ExtractorInput;
 import com.google.android.exoplayer2.extractor.ExtractorOutput;
@@ -43,6 +43,10 @@
 
   };
 
+  public interface VideoFormatChangedListener {
+    void onVideoFormatChanged(Format format);
+  }
+
   // Header sizes.
   private static final int FLV_HEADER_SIZE = 9;
   private static final int FLV_TAG_HEADER_SIZE = 11;
@@ -88,6 +92,8 @@
   long firstSkippedAudioTime = -1;
   long tsDelta = 0;
 
+  private VideoFormatChangedListener listener;
+
   public FlvExtractor() {
     scratch = new ParsableByteArray(4);
     headerBuffer = new ParsableByteArray(FLV_HEADER_SIZE);
@@ -199,12 +205,11 @@ private boolean readFlvHeader(ExtractorInput input) throws IOException, Interrup
     boolean hasAudio = (flags & 0x04) != 0;
     boolean hasVideo = (flags & 0x01) != 0;
     if (hasAudio && audioReader == null) {
-      audioReader = new AudioTagPayloadReader(
-          extractorOutput.track(TAG_TYPE_AUDIO, C.TRACK_TYPE_AUDIO));
+      audioReader = new AudioTagPayloadReader(extractorOutput.track(TAG_TYPE_AUDIO));
     }
     if (hasVideo && videoReader == null) {
-      videoReader = new VideoTagPayloadReader(
-          extractorOutput.track(TAG_TYPE_VIDEO, C.TRACK_TYPE_VIDEO));
+      videoReader = new VideoTagPayloadReader(extractorOutput.track(TAG_TYPE_VIDEO));
+      videoReader.setListener(listener);
     }
     if (metadataReader == null) {
       metadataReader = new ScriptTagPayloadReader(null);
@@ -319,4 +324,11 @@ public long getPosition(long timeUs) {
     return 0;
   }
 
+  public void setListener(VideoFormatChangedListener listener) {
+    this.listener = listener;
+    if (videoReader != null) {
+      videoReader.setListener(listener);
+    }
+  }
+
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/VideoTagPayloadReader.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/VideoTagPayloadReader.java
index 8a4d314ee0..9042f3cc61 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/VideoTagPayloadReader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/VideoTagPayloadReader.java
@@ -46,9 +46,10 @@
   private int nalUnitLengthFieldLength;
 
   // State variables.
-  private boolean hasOutputFormat;
   private int frameType;
 
+  private FlvExtractor.VideoFormatChangedListener listener;
+
   /**
    * @param output A {@link TrackOutput} to which samples should be written.
    */
@@ -82,7 +83,7 @@ protected void parsePayload(ParsableByteArray data, long timeUs) throws ParserEx
     int compositionTimeMs = data.readUnsignedInt24();
     timeUs += compositionTimeMs * 1000L;
     // Parse avc sequence header in case this was not done before.
-    if (packetType == AVC_PACKET_TYPE_SEQUENCE_HEADER && !hasOutputFormat) {
+    if (packetType == AVC_PACKET_TYPE_SEQUENCE_HEADER) {
       ParsableByteArray videoSequence = new ParsableByteArray(new byte[data.bytesLeft()]);
       data.readBytes(videoSequence.data, 0, data.bytesLeft());
       AvcConfig avcConfig = AvcConfig.parse(videoSequence);
@@ -92,8 +93,11 @@ protected void parsePayload(ParsableByteArray data, long timeUs) throws ParserEx
           Format.NO_VALUE, Format.NO_VALUE, avcConfig.width, avcConfig.height, Format.NO_VALUE,
           avcConfig.initializationData, Format.NO_VALUE, avcConfig.pixelWidthAspectRatio, null);
       output.format(format);
+      if (listener != null) {
+        listener.onVideoFormatChanged(format);
+      }
       hasOutputFormat = true;
-    } else if (packetType == AVC_PACKET_TYPE_AVC_NALU && hasOutputFormat) {
+    } else if (packetType == AVC_PACKET_TYPE_AVC_NALU) {
       // TODO: Deduplicate with Mp4Extractor.
       // Zero the top three bytes of the array that we'll use to decode nal unit lengths, in case
       // they're only 1 or 2 bytes long.
@@ -127,4 +131,7 @@ protected void parsePayload(ParsableByteArray data, long timeUs) throws ParserEx
     }
   }
 
+  void setListener(FlvExtractor.VideoFormatChangedListener listener) {
+    this.listener = listener;
+  }
 }
