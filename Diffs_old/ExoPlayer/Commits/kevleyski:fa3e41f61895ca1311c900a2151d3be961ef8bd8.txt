diff --git a/kjsl.patch b/kjsl.patch
new file mode 100644
index 0000000000..a41ace1d31
--- /dev/null
+++ b/kjsl.patch
@@ -0,0 +1,106 @@
+diff --git a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
+index a7d5690..7f33c23 100644
+--- a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
++++ b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
+@@ -1423,11 +1423,15 @@ import java.util.Collections;
+       return;
+     }
+ 
++    // AD-1413: If end of Period is reached then this triggers next Period also
++    boolean isAtEndOfPeriod =
++        (rendererPositionUs >= playingPeriodHolder.next.rendererPositionOffsetUs);
++
+     for (int i = 0; i < renderers.length; i++) {
+       Renderer renderer = renderers[i];
+       SampleStream sampleStream = readingPeriodHolder.sampleStreams[i];
+       if (renderer.getStream() != sampleStream
+-          || (sampleStream != null && !renderer.hasReadStreamToEnd())) {
++          || (sampleStream != null && !renderer.hasReadStreamToEnd() && !isAtEndOfPeriod)) {
+         // The current reading period is still being read by at least one renderer.
+         return;
+       }
+diff --git a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerLibraryInfo.java b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerLibraryInfo.java
+index 172eb19..d821925 100644
+--- a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerLibraryInfo.java
++++ b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerLibraryInfo.java
+@@ -33,7 +33,7 @@ public final class ExoPlayerLibraryInfo {
+ 
+   /** The version of the library expressed as {@code "ExoPlayerLib/" + VERSION}. */
+   // Intentionally hardcoded. Do not derive from other constants (e.g. VERSION) or vice versa.
+-  public static final String VERSION_SLASHY = "ExoPlayerLib/2.8.2";
++  public static final String VERSION_SLASHY = "ExoPlayerLib/2.8.2.1";
+ 
+   /**
+    * The version of the library expressed as an integer, for example 1002003.
+diff --git a/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlDecoder.java b/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlDecoder.java
+index 61e0085..5fcd8bd 100644
+--- a/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlDecoder.java
++++ b/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlDecoder.java
+@@ -246,7 +246,12 @@ public final class TtmlDecoder extends SimpleSubtitleDecoder {
+           globalStyles.put(style.getId(), style);
+         }
+       } else if (XmlPullParserUtil.isStartTag(xmlParser, TtmlNode.TAG_REGION)) {
+-        TtmlRegion ttmlRegion = parseRegionAttributes(xmlParser, cellResolution);
++        String styleId = XmlPullParserUtil.getAttributeValue(xmlParser, ATTR_STYLE);
++        TtmlStyle style = null;
++        if (styleId != null) {
++          style = globalStyles.get(styleId);
++        }
++        TtmlRegion ttmlRegion = parseRegionAttributes(xmlParser, cellResolution, style);
+         if (ttmlRegion != null) {
+           globalRegions.put(ttmlRegion.id, ttmlRegion);
+         }
+@@ -262,7 +267,7 @@ public final class TtmlDecoder extends SimpleSubtitleDecoder {
+    * percentages of the viewport. Region declarations that define origin and extent in other formats
+    * are unsupported, and null is returned.
+    */
+-  private TtmlRegion parseRegionAttributes(XmlPullParser xmlParser, CellResolution cellResolution) {
++  private TtmlRegion parseRegionAttributes(XmlPullParser xmlParser, CellResolution cellResolution, TtmlStyle style) {
+     String regionId = XmlPullParserUtil.getAttributeValue(xmlParser, TtmlNode.ATTR_ID);
+     if (regionId == null) {
+       return null;
+@@ -325,6 +330,9 @@ public final class TtmlDecoder extends SimpleSubtitleDecoder {
+     @Cue.AnchorType int lineAnchor = Cue.ANCHOR_TYPE_START;
+     String displayAlign = XmlPullParserUtil.getAttributeValue(xmlParser,
+         TtmlNode.ATTR_TTS_DISPLAY_ALIGN);
++    if (displayAlign == null && style != null) {
++      displayAlign = style.getDisplayAlign();
++    }
+     if (displayAlign != null) {
+       switch (Util.toLowerInvariant(displayAlign)) {
+         case "center":
+@@ -437,6 +445,8 @@ public final class TtmlDecoder extends SimpleSubtitleDecoder {
+               style = createIfNull(style).setUnderline(false);
+               break;
+           }
++        case TtmlNode.ATTR_TTS_DISPLAY_ALIGN:
++          style = createIfNull(style).setDisplayAlign(attributeValue);
+           break;
+         default:
+           // ignore
+diff --git a/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlStyle.java b/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlStyle.java
+index 90f93d5..dfbef46 100644
+--- a/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlStyle.java
++++ b/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlStyle.java
+@@ -65,6 +65,7 @@ import java.lang.annotation.RetentionPolicy;
+   private String id;
+   private TtmlStyle inheritableStyle;
+   private Layout.Alignment textAlign;
++  private String displayAlign;
+ 
+   public TtmlStyle() {
+     linethrough = UNSPECIFIED;
+@@ -257,4 +258,13 @@ import java.lang.annotation.RetentionPolicy;
+     return fontSize;
+   }
+ 
++  public TtmlStyle setDisplayAlign(String displayAlign) {
++    this.displayAlign = displayAlign;
++    return this;
++  }
++
++  public String getDisplayAlign() {
++    return displayAlign;
++  }
++
+ }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerLibraryInfo.java b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerLibraryInfo.java
index 172eb19da3..d821925816 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerLibraryInfo.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerLibraryInfo.java
@@ -33,7 +33,7 @@
 
   /** The version of the library expressed as {@code "ExoPlayerLib/" + VERSION}. */
   // Intentionally hardcoded. Do not derive from other constants (e.g. VERSION) or vice versa.
-  public static final String VERSION_SLASHY = "ExoPlayerLib/2.8.2";
+  public static final String VERSION_SLASHY = "ExoPlayerLib/2.8.2.1";
 
   /**
    * The version of the library expressed as an integer, for example 1002003.
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlDecoder.java b/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlDecoder.java
index 61e0085065..30adecc996 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlDecoder.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlDecoder.java
@@ -246,7 +246,12 @@ private CellResolution parseCellResolution(XmlPullParser xmlParser, CellResoluti
           globalStyles.put(style.getId(), style);
         }
       } else if (XmlPullParserUtil.isStartTag(xmlParser, TtmlNode.TAG_REGION)) {
-        TtmlRegion ttmlRegion = parseRegionAttributes(xmlParser, cellResolution);
+        String styleId = XmlPullParserUtil.getAttributeValue(xmlParser, ATTR_STYLE);
+        TtmlStyle style = null;
+        if (styleId != null) {
+          style = globalStyles.get(styleId);
+        }
+        TtmlRegion ttmlRegion = parseRegionAttributes(xmlParser, cellResolution, style);
         if (ttmlRegion != null) {
           globalRegions.put(ttmlRegion.id, ttmlRegion);
         }
@@ -262,7 +267,7 @@ private CellResolution parseCellResolution(XmlPullParser xmlParser, CellResoluti
    * percentages of the viewport. Region declarations that define origin and extent in other formats
    * are unsupported, and null is returned.
    */
-  private TtmlRegion parseRegionAttributes(XmlPullParser xmlParser, CellResolution cellResolution) {
+  private TtmlRegion parseRegionAttributes(XmlPullParser xmlParser, CellResolution cellResolution, TtmlStyle style) {
     String regionId = XmlPullParserUtil.getAttributeValue(xmlParser, TtmlNode.ATTR_ID);
     if (regionId == null) {
       return null;
@@ -325,6 +330,9 @@ private TtmlRegion parseRegionAttributes(XmlPullParser xmlParser, CellResolution
     @Cue.AnchorType int lineAnchor = Cue.ANCHOR_TYPE_START;
     String displayAlign = XmlPullParserUtil.getAttributeValue(xmlParser,
         TtmlNode.ATTR_TTS_DISPLAY_ALIGN);
+    if (displayAlign == null && style != null) {
+      displayAlign = style.getDisplayAlign();
+    }
     if (displayAlign != null) {
       switch (Util.toLowerInvariant(displayAlign)) {
         case "center":
@@ -438,6 +446,9 @@ private TtmlStyle parseStyleAttributes(XmlPullParser parser, TtmlStyle style) {
               break;
           }
           break;
+        case TtmlNode.ATTR_TTS_DISPLAY_ALIGN:
+          style = createIfNull(style).setDisplayAlign(attributeValue);
+          break;
         default:
           // ignore
           break;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlStyle.java b/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlStyle.java
index 90f93d5b21..6dabd9d729 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlStyle.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlStyle.java
@@ -65,6 +65,7 @@
   private String id;
   private TtmlStyle inheritableStyle;
   private Layout.Alignment textAlign;
+  private String displayAlign;
 
   public TtmlStyle() {
     linethrough = UNSPECIFIED;
@@ -257,4 +258,12 @@ public float getFontSize() {
     return fontSize;
   }
 
+  public TtmlStyle setDisplayAlign(String displayAlign) {
+    this.displayAlign = displayAlign;
+    return this;
+  }
+
+  public String getDisplayAlign() {
+    return displayAlign;
+  }
 }
