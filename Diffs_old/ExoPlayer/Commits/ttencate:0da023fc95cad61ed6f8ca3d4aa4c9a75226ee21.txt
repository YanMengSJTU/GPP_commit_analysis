diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/AtomParsersTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/AtomParsersTest.java
new file mode 100644
index 0000000000..3a9fc3735f
--- /dev/null
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/AtomParsersTest.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer.extractor.mp4;
+
+import com.google.android.exoplayer.util.ParsableByteArray;
+import com.google.android.exoplayer.util.Util;
+
+import junit.framework.TestCase;
+
+public class AtomParsersTest extends TestCase {
+
+  private final String ATOM_HEADER = "000000000000000000000000";
+  private final String SAMPLE_COUNT = "00000004";
+  private final byte[] FOUR_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000004"
+      + SAMPLE_COUNT + "1234");
+  private final byte[] EIGHT_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000008"
+      + SAMPLE_COUNT + "01020304");
+  private final byte[] SIXTEEN_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000010"
+      + SAMPLE_COUNT + "0001000200030004");
+
+  public void testStz2Parsing4BitFieldSize() {
+    verifyParsing(new Atom.LeafAtom(Atom.TYPE_stsz, new ParsableByteArray(FOUR_BIT_STZ2)));
+  }
+
+  public void testStz2Parsing8BitFieldSize() {
+    verifyParsing(new Atom.LeafAtom(Atom.TYPE_stsz, new ParsableByteArray(EIGHT_BIT_STZ2)));
+  }
+
+  public void testStz2Parsing16BitFieldSize() {
+    verifyParsing(new Atom.LeafAtom(Atom.TYPE_stsz, new ParsableByteArray(SIXTEEN_BIT_STZ2)));
+  }
+
+  private void verifyParsing(Atom.LeafAtom stz2Atom) {
+    AtomParsers.Stz2SampleSizeBox box = new AtomParsers.Stz2SampleSizeBox(stz2Atom);
+    assertEquals(4, box.getSampleCount());
+    assertFalse(box.isFixedSampleSize());
+    for (int i = 0; i < box.getSampleCount(); i++) {
+      assertEquals(i + 1, box.readNextSampleSize());
+    }
+  }
+
+}
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/SampleSizeBoxTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/SampleSizeBoxTest.java
deleted file mode 100644
index 388f3fcacb..0000000000
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/SampleSizeBoxTest.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package com.google.android.exoplayer.extractor.mp4;
-
-import com.google.android.exoplayer.util.ParsableByteArray;
-import com.google.android.exoplayer.util.Util;
-
-import junit.framework.TestCase;
-
-public class SampleSizeBoxTest extends TestCase {
-    final String ATOM_HEADER = "000000000000000000000000";
-    final String SAMPLE_COUNT = "00000004";
-    final byte[] FOUR_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000004"
-            + SAMPLE_COUNT + "1234");
-    final byte[] EIGHT_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000008"
-            + SAMPLE_COUNT + "01020304");
-    final byte[] SIXTEEN_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000010"
-            + SAMPLE_COUNT + "0001000200030004");
-
-    public void testStz2Parsing4BitFieldSize() {
-        final Atom.LeafAtom stz2Atom = new Atom.LeafAtom(Atom.TYPE_stsz,
-                new ParsableByteArray(FOUR_BIT_STZ2));
-        verifyParsing(stz2Atom);
-    }
-
-    public void testStz2Parsing8BitFieldSize() {
-        final Atom.LeafAtom stz2Atom = new Atom.LeafAtom(Atom.TYPE_stsz,
-                new ParsableByteArray(EIGHT_BIT_STZ2));
-        verifyParsing(stz2Atom);
-    }
-
-    public void testStz2Parsing16BitFieldSize() {
-        final Atom.LeafAtom stz2Atom = new Atom.LeafAtom(Atom.TYPE_stsz,
-                new ParsableByteArray(SIXTEEN_BIT_STZ2));
-        verifyParsing(stz2Atom);
-    }
-
-    private void verifyParsing(Atom.LeafAtom stz2Atom) {
-        final AtomParsers.Stz2SampleSizeBox box = new AtomParsers.Stz2SampleSizeBox(stz2Atom);
-        assertEquals(4, box.getSampleCount());
-        assertFalse(box.isFixedSampleSize());
-
-        for (int i = 0; i < box.getSampleCount(); i++) {
-            assertEquals(i + 1, box.readNextSampleSize());
-        }
-    }
-}
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java
index ace14c43d7..0fb0d0dd42 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java
@@ -91,9 +91,8 @@ public static Track parseTrak(Atom.ContainerAtom trak, Atom.LeafAtom mvhd, long
   public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAtom)
       throws ParserException {
     // Array of sample sizes.
-    final SampleSizeBox sampleSizeBox;
-
-    final Atom.LeafAtom stszAtom = stblAtom.getLeafAtomOfType(Atom.TYPE_stsz);
+    SampleSizeBox sampleSizeBox;
+    Atom.LeafAtom stszAtom = stblAtom.getLeafAtomOfType(Atom.TYPE_stsz);
     if (stszAtom != null) {
       sampleSizeBox = new StszSampleSizeBox(stszAtom);
     } else {
@@ -101,9 +100,9 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
       if (stz2Atom == null) {
         throw new ParserException("Track has no sample table size information");
       }
-
       sampleSizeBox = new Stz2SampleSizeBox(stz2Atom);
     }
+    int sampleCount = sampleSizeBox.getSampleCount();
 
     // Entries are byte offsets of chunks.
     boolean chunkOffsetsAreLongs = false;
@@ -124,8 +123,6 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
     Atom.LeafAtom cttsAtom = stblAtom.getLeafAtomOfType(Atom.TYPE_ctts);
     ParsableByteArray ctts = cttsAtom != null ? cttsAtom.data : null;
 
-    int sampleCount = sampleSizeBox.getSampleCount();
-
     // Skip full atom.
     if (sampleCount == 0) {
       return new TrackSampleTable(new long[0], new int[0], 0, new long[0], new int[0]);
@@ -209,7 +206,6 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
 
         offsets[i] = offset;
         sizes[i] = sampleSizeBox.readNextSampleSize();
-
         if (sizes[i] > maximumSize) {
           maximumSize = sizes[i];
         }
@@ -258,9 +254,9 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
         chunkOffsetsBytes[chunkIterator.index] = chunkIterator.offset;
         chunkSampleCounts[chunkIterator.index] = chunkIterator.numSamples;
       }
+      int fixedSampleSize = sampleSizeBox.readNextSampleSize();
       FixedSampleSizeRechunker.Results rechunkedResults = FixedSampleSizeRechunker.rechunk(
-          sampleSizeBox.readNextSampleSize(), chunkOffsetsBytes, chunkSampleCounts,
-          timestampDeltaInTimeUnits);
+          fixedSampleSize, chunkOffsetsBytes, chunkSampleCounts, timestampDeltaInTimeUnits);
       offsets = rechunkedResults.offsets;
       sizes = rechunkedResults.sizes;
       maximumSize = rechunkedResults.maximumSize;
@@ -1180,35 +1176,35 @@ public AvcCData(List<byte[]> initializationData, int nalUnitLengthFieldLength,
   }
 
   /**
-   * Interface that allows us to abstract away the various implementations of sample size boxes.
-   * (IE: stsz and stz2)
+   * A box containing sample sizes (e.g. stsz, stz2).
    */
-  interface SampleSizeBox {
+  private interface SampleSizeBox {
 
     /**
-     * @return the number of samples in this atom.
+     * Returns the number of samples in this atom.
      */
     int getSampleCount();
 
     /**
-     * @return the size for the next sample in the box.
+     * Returns the size for the next sample in the box.
      */
     int readNextSampleSize();
 
     /**
-     * @return if this box holds samples of a fixed size.
+     * Whether this box holds samples of a fixed size.
      */
     boolean isFixedSampleSize();
+
   }
 
   /**
-   * Reads sample sizes out of a 'stsz' atom.
+   * An stsz sample size box.
    */
-  static final class StszSampleSizeBox implements SampleSizeBox {
+  /* package */ static final class StszSampleSizeBox implements SampleSizeBox {
 
-    public final int fixedSampleSize;
-    public final int sampleCount;
-    public final ParsableByteArray data;
+    private final int fixedSampleSize;
+    private final int sampleCount;
+    private final ParsableByteArray data;
 
     public StszSampleSizeBox(Atom.LeafAtom stszAtom) {
       data = stszAtom.data;
@@ -1231,23 +1227,24 @@ public int readNextSampleSize() {
     public boolean isFixedSampleSize() {
       return fixedSampleSize != 0;
     }
+
   }
 
   /**
-   * Reads samples out of a 'stz2' atom.
+   * An stz2 sample size box.
    */
-  static final class Stz2SampleSizeBox implements SampleSizeBox {
+  /* package */ static final class Stz2SampleSizeBox implements SampleSizeBox {
 
-    public final ParsableByteArray data;
-    public final int sampleCount;
-    public final int fieldSize;  // 4, 8, or 16.
-    private int mIndex = 0;     // Our current index in the samples.
-    private int mCurrentByte;  // used only for the 4 bit scenario.
+    private final ParsableByteArray data;
+    private final int sampleCount;
+    private final int fieldSize; // Can be 4, 8, or 16.
+
+    private int sampleIndex; // Used only if fieldSize == 4.
+    private int currentByte; // Used only if fieldSize == 4.
 
     public Stz2SampleSizeBox(Atom.LeafAtom stz2Atom) {
       data = stz2Atom.data;
       data.setPosition(Atom.FULL_HEADER_SIZE);
-      // mask out the reserved bits (24) and read just the field_size bits (8).
       fieldSize = data.readUnsignedIntToInt() & 0x000000FF;
       sampleCount = data.readUnsignedIntToInt();
     }
@@ -1259,22 +1256,20 @@ public int getSampleCount() {
 
     @Override
     public int readNextSampleSize() {
-      final int i = mIndex++;
       if (fieldSize == 8) {
         return data.readUnsignedByte();
       } else if (fieldSize == 16) {
         return data.readUnsignedShort();
       } else {
-        // The field size is 4.
-        final boolean isUpperBits = i % 2 == 0;
-        if (isUpperBits) {
+        // fieldSize == 4.
+        if ((sampleIndex++ % 2) == 0) {
           // Read the next byte into our cached byte when we are reading the upper bits.
-          mCurrentByte = data.readUnsignedByte();
+          currentByte = data.readUnsignedByte();
           // Read the upper bits from the byte and shift them to the lower 4 bits.
-          return (mCurrentByte & 0xF0) >> 4;
+          return (currentByte & 0xF0) >> 4;
         } else {
           // Mask out the upper 4 bits of the last byte we read.
-          return mCurrentByte & 0x0F;
+          return currentByte & 0x0F;
         }
       }
     }
@@ -1283,6 +1278,7 @@ public int readNextSampleSize() {
     public boolean isFixedSampleSize() {
       return false;
     }
+
   }
 
 }
