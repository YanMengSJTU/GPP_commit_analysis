diff --git a/RELEASENOTES.md b/RELEASENOTES.md
index b694143542..c63a20ba94 100644
--- a/RELEASENOTES.md
+++ b/RELEASENOTES.md
@@ -1,5 +1,20 @@
 # Release notes #
 
+### r2.5.3 ###
+
+* IMA extension: Support skipping of skippable ads on AndroidTV and other
+  non-touch devices ([#3258](https://github.com/google/ExoPlayer/issues/3258)).
+* HLS: Fix broken WebVTT captions when PTS wraps around
+  ([#2928](https://github.com/google/ExoPlayer/issues/2928)).
+* Captions: Fix issues rendering CEA-608 captions
+  ([#3250](https://github.com/google/ExoPlayer/issues/3250)).
+* Workaround broken AAC decoders on Galaxy S6
+  ([#3249](https://github.com/google/ExoPlayer/issues/3249)).
+* Caching: Fix infinite loop when cache eviction fails
+  ([#3260](https://github.com/google/ExoPlayer/issues/3260)).
+* Caching: Force use of BouncyCastle on JellyBean to fix decryption issue
+  ([#2755](https://github.com/google/ExoPlayer/issues/2755)).
+
 ### r2.5.2 ###
 
 * IMA extension: Fix issue where ad playback could end prematurely for some
diff --git a/constants.gradle b/constants.gradle
index 7391228853..db7b12acf0 100644
--- a/constants.gradle
+++ b/constants.gradle
@@ -24,7 +24,7 @@ project.ext {
     supportLibraryVersion = '25.4.0'
     dexmakerVersion = '1.2'
     mockitoVersion = '1.9.5'
-    releaseVersion = 'r2.5.2'
+    releaseVersion = 'r2.5.3'
     modulePrefix = ':'
     if (gradle.ext.has('exoplayerModulePrefix')) {
         modulePrefix += gradle.ext.exoplayerModulePrefix
diff --git a/demo/src/main/AndroidManifest.xml b/demo/src/main/AndroidManifest.xml
index 081ca00077..612044762f 100644
--- a/demo/src/main/AndroidManifest.xml
+++ b/demo/src/main/AndroidManifest.xml
@@ -16,8 +16,8 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.google.android.exoplayer2.demo"
-    android:versionCode="2502"
-    android:versionName="2.5.2">
+    android:versionCode="2503"
+    android:versionName="2.5.3">
 
   <uses-permission android:name="android.permission.INTERNET"/>
   <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
diff --git a/extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java b/extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
index 11aab906e0..b6d9280579 100644
--- a/extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
+++ b/extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
@@ -20,6 +20,7 @@
 import android.os.SystemClock;
 import android.util.Log;
 import android.view.ViewGroup;
+import android.webkit.WebView;
 import com.google.ads.interactivemedia.v3.api.Ad;
 import com.google.ads.interactivemedia.v3.api.AdDisplayContainer;
 import com.google.ads.interactivemedia.v3.api.AdErrorEvent;
@@ -112,6 +113,14 @@
    */
   private static final long END_OF_CONTENT_POSITION_THRESHOLD_MS = 5000;
 
+  /**
+   * The "Skip ad" button rendered in the IMA WebView does not gain focus by default and cannot be
+   * clicked via a keypress event. Workaround this issue by calling focus() on the HTML element in
+   * the WebView directly when an ad starts. See [Internal: b/62371030].
+   */
+  private static final String FOCUS_SKIP_BUTTON_WORKAROUND_JS = "javascript:"
+      + "try{ document.getElementsByClassName(\"videoAdUiSkipButton\")[0].focus(); } catch (e) {}";
+
   private final Uri adTagUri;
   private final Timeline.Period period;
   private final List<VideoAdPlayerCallback> adCallbacks;
@@ -121,6 +130,7 @@
 
   private EventListener eventListener;
   private Player player;
+  private ViewGroup adUiViewGroup;
   private VideoProgressUpdate lastContentProgress;
   private VideoProgressUpdate lastAdProgress;
 
@@ -249,6 +259,7 @@ public ImaAdsLoader(Context context, Uri adTagUri, ImaSdkSettings imaSdkSettings
       ViewGroup adUiViewGroup) {
     this.player = player;
     this.eventListener = eventListener;
+    this.adUiViewGroup = adUiViewGroup;
     lastAdProgress = null;
     lastContentProgress = null;
     adDisplayContainer.setAdContainer(adUiViewGroup);
@@ -278,6 +289,7 @@ public ImaAdsLoader(Context context, Uri adTagUri, ImaSdkSettings imaSdkSettings
     player.removeListener(this);
     player = null;
     eventListener = null;
+    adUiViewGroup = null;
   }
 
   /**
@@ -363,6 +375,11 @@ public void onAdEvent(AdEvent adEvent) {
         imaPausedContent = true;
         pauseContentInternal();
         break;
+      case STARTED:
+        if (ad.isSkippable()) {
+          focusSkipButton();
+        }
+        break;
       case TAPPED:
         if (eventListener != null) {
           eventListener.onAdTapped();
@@ -727,4 +744,13 @@ private void updateAdPlaybackState() {
     return adGroupTimesUs;
   }
 
+  private void focusSkipButton() {
+    if (playingAd && adUiViewGroup != null && adUiViewGroup.getChildCount() > 0
+        && adUiViewGroup.getChildAt(0) instanceof WebView) {
+      WebView webView = (WebView) (adUiViewGroup.getChildAt(0));
+      webView.requestFocus();
+      webView.loadUrl(FOCUS_SKIP_BUTTON_WORKAROUND_JS);
+    }
+  }
+
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerLibraryInfo.java b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerLibraryInfo.java
index 98eeb99ad8..90385ed6c0 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerLibraryInfo.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerLibraryInfo.java
@@ -31,13 +31,13 @@
    * The version of the library expressed as a string, for example "1.2.3".
    */
   // Intentionally hardcoded. Do not derive from other constants (e.g. VERSION_INT) or vice versa.
-  public static final String VERSION = "2.5.2";
+  public static final String VERSION = "2.5.3";
 
   /**
    * The version of the library expressed as {@code "ExoPlayerLib/" + VERSION}.
    */
   // Intentionally hardcoded. Do not derive from other constants (e.g. VERSION) or vice versa.
-  public static final String VERSION_SLASHY = "ExoPlayerLib/2.5.2";
+  public static final String VERSION_SLASHY = "ExoPlayerLib/2.5.3";
 
   /**
    * The version of the library expressed as an integer, for example 1002003.
@@ -47,7 +47,7 @@
    * integer version 123045006 (123-045-006).
    */
   // Intentionally hardcoded. Do not derive from other constants (e.g. VERSION) or vice versa.
-  public static final int VERSION_INT = 2005002;
+  public static final int VERSION_INT = 2005003;
 
   /**
    * Whether the library was compiled with {@link com.google.android.exoplayer2.util.Assertions}
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecUtil.java b/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecUtil.java
index 1073e8d9c1..904ce2f0bd 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecUtil.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecUtil.java
@@ -325,7 +325,22 @@ private static boolean isCodecUsableDecoder(android.media.MediaCodecInfo info, S
       return false;
     }
 
-    // Work around https://github.com/google/ExoPlayer/issues/548
+    // Work around https://github.com/google/ExoPlayer/issues/3249.
+    if (Util.SDK_INT < 24
+        && ("OMX.SEC.aac.dec".equals(name) || "OMX.Exynos.AAC.Decoder".equals(name))
+        && Util.MANUFACTURER.equals("samsung")
+        && (Util.DEVICE.startsWith("zeroflte") // Galaxy S6
+            || Util.DEVICE.startsWith("zerolte") // Galaxy S6 Edge
+            || Util.DEVICE.startsWith("zenlte") // Galaxy S6 Edge+
+            || Util.DEVICE.equals("SC-05G") // Galaxy S6
+            || Util.DEVICE.equals("marinelteatt") // Galaxy S6 Active
+            || Util.DEVICE.equals("404SC") // Galaxy S6 Edge
+            || Util.DEVICE.equals("SC-04G")
+            || Util.DEVICE.equals("SCV31"))) {
+      return false;
+    }
+
+    // Work around https://github.com/google/ExoPlayer/issues/548.
     // VP8 decoder on Samsung Galaxy S3/S4/S4 Mini/Tab 3/Note 2 does not render video.
     if (Util.SDK_INT <= 19
         && "OMX.SEC.vp8.dec".equals(name) && "samsung".equals(Util.MANUFACTURER)
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/text/SubtitleInputBuffer.java b/library/core/src/main/java/com/google/android/exoplayer2/text/SubtitleInputBuffer.java
index 28e67e8623..4b3b61bddf 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/text/SubtitleInputBuffer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/text/SubtitleInputBuffer.java
@@ -37,6 +37,9 @@ public SubtitleInputBuffer() {
 
   @Override
   public int compareTo(@NonNull SubtitleInputBuffer other) {
+    if (isEndOfStream() != other.isEndOfStream()) {
+      return isEndOfStream() ? 1 : -1;
+    }
     long delta = timeUs - other.timeUs;
     if (delta == 0) {
       return 0;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/text/TextRenderer.java b/library/core/src/main/java/com/google/android/exoplayer2/text/TextRenderer.java
index 1820d43e75..700fc0cb4b 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/text/TextRenderer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/text/TextRenderer.java
@@ -294,9 +294,9 @@ private void replaceDecoder() {
   }
 
   private long getNextEventTime() {
-    return ((nextSubtitleEventIndex == C.INDEX_UNSET)
-        || (nextSubtitleEventIndex >= subtitle.getEventTimeCount())) ? Long.MAX_VALUE
-        : (subtitle.getEventTime(nextSubtitleEventIndex));
+    return nextSubtitleEventIndex == C.INDEX_UNSET
+        || nextSubtitleEventIndex >= subtitle.getEventTimeCount()
+        ? Long.MAX_VALUE : subtitle.getEventTime(nextSubtitleEventIndex);
   }
 
   private void updateOutput(List<Cue> cues) {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/text/cea/CeaDecoder.java b/library/core/src/main/java/com/google/android/exoplayer2/text/cea/CeaDecoder.java
index fac0982e65..bb13a7d143 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/text/cea/CeaDecoder.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/text/cea/CeaDecoder.java
@@ -24,7 +24,7 @@
 import com.google.android.exoplayer2.text.SubtitleOutputBuffer;
 import com.google.android.exoplayer2.util.Assertions;
 import java.util.LinkedList;
-import java.util.TreeSet;
+import java.util.PriorityQueue;
 
 /**
  * Base class for subtitle parsers for CEA captions.
@@ -36,7 +36,7 @@
 
   private final LinkedList<SubtitleInputBuffer> availableInputBuffers;
   private final LinkedList<SubtitleOutputBuffer> availableOutputBuffers;
-  private final TreeSet<SubtitleInputBuffer> queuedInputBuffers;
+  private final PriorityQueue<SubtitleInputBuffer> queuedInputBuffers;
 
   private SubtitleInputBuffer dequeuedInputBuffer;
   private long playbackPositionUs;
@@ -50,7 +50,7 @@ public CeaDecoder() {
     for (int i = 0; i < NUM_OUTPUT_BUFFERS; i++) {
       availableOutputBuffers.add(new CeaOutputBuffer(this));
     }
-    queuedInputBuffers = new TreeSet<>();
+    queuedInputBuffers = new PriorityQueue<>();
   }
 
   @Override
@@ -73,7 +73,6 @@ public SubtitleInputBuffer dequeueInputBuffer() throws SubtitleDecoderException
 
   @Override
   public void queueInputBuffer(SubtitleInputBuffer inputBuffer) throws SubtitleDecoderException {
-    Assertions.checkArgument(inputBuffer != null);
     Assertions.checkArgument(inputBuffer == dequeuedInputBuffer);
     if (inputBuffer.isDecodeOnly()) {
       // We can drop this buffer early (i.e. before it would be decoded) as the CEA formats allow
@@ -90,13 +89,12 @@ public SubtitleOutputBuffer dequeueOutputBuffer() throws SubtitleDecoderExceptio
     if (availableOutputBuffers.isEmpty()) {
       return null;
     }
-
     // iterate through all available input buffers whose timestamps are less than or equal
     // to the current playback position; processing input buffers for future content should
     // be deferred until they would be applicable
     while (!queuedInputBuffers.isEmpty()
-        && queuedInputBuffers.first().timeUs <= playbackPositionUs) {
-      SubtitleInputBuffer inputBuffer = queuedInputBuffers.pollFirst();
+        && queuedInputBuffers.peek().timeUs <= playbackPositionUs) {
+      SubtitleInputBuffer inputBuffer = queuedInputBuffers.poll();
 
       // If the input buffer indicates we've reached the end of the stream, we can
       // return immediately with an output buffer propagating that
@@ -142,7 +140,7 @@ protected void releaseOutputBuffer(SubtitleOutputBuffer outputBuffer) {
   public void flush() {
     playbackPositionUs = 0;
     while (!queuedInputBuffers.isEmpty()) {
-      releaseInputBuffer(queuedInputBuffers.pollFirst());
+      releaseInputBuffer(queuedInputBuffers.poll());
     }
     if (dequeuedInputBuffer != null) {
       releaseInputBuffer(dequeuedInputBuffer);
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/WebvttExtractor.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/WebvttExtractor.java
index 12ea2c16c7..0b8f7f36a6 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/WebvttExtractor.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/WebvttExtractor.java
@@ -141,8 +141,7 @@ private void processSample() throws ParserException {
           throw new ParserException("X-TIMESTAMP-MAP doesn't contain media timestamp: " + line);
         }
         vttTimestampUs = WebvttParserUtil.parseTimestampUs(localTimestampMatcher.group(1));
-        tsTimestampUs = TimestampAdjuster.ptsToUs(
-            Long.parseLong(mediaTimestampMatcher.group(1)));
+        tsTimestampUs = TimestampAdjuster.ptsToUs(Long.parseLong(mediaTimestampMatcher.group(1)));
       }
     }
 
@@ -155,8 +154,8 @@ private void processSample() throws ParserException {
     }
 
     long firstCueTimeUs = WebvttParserUtil.parseTimestampUs(cueHeaderMatcher.group(1));
-    long sampleTimeUs = timestampAdjuster.adjustSampleTimestamp(
-        firstCueTimeUs + tsTimestampUs - vttTimestampUs);
+    long sampleTimeUs = timestampAdjuster.adjustTsTimestamp(
+        TimestampAdjuster.usToPts(firstCueTimeUs + tsTimestampUs - vttTimestampUs));
     long subsampleOffsetUs = sampleTimeUs - firstCueTimeUs;
     // Output the track.
     TrackOutput trackOutput = buildTrackOutput(subsampleOffsetUs);
diff --git a/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlaybackControlView.java b/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlaybackControlView.java
index 123b3051e5..fb97343c38 100644
--- a/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlaybackControlView.java
+++ b/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlaybackControlView.java
@@ -996,30 +996,30 @@ public boolean dispatchMediaKeyEvent(KeyEvent event) {
       return false;
     }
     if (event.getAction() == KeyEvent.ACTION_DOWN) {
-      switch (keyCode) {
-        case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
-          fastForward();
-          break;
-        case KeyEvent.KEYCODE_MEDIA_REWIND:
-          rewind();
-          break;
-        case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
-          controlDispatcher.dispatchSetPlayWhenReady(player, !player.getPlayWhenReady());
-          break;
-        case KeyEvent.KEYCODE_MEDIA_PLAY:
-          controlDispatcher.dispatchSetPlayWhenReady(player, true);
-          break;
-        case KeyEvent.KEYCODE_MEDIA_PAUSE:
-          controlDispatcher.dispatchSetPlayWhenReady(player, false);
-          break;
-        case KeyEvent.KEYCODE_MEDIA_NEXT:
-          next();
-          break;
-        case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
-          previous();
-          break;
-        default:
-          break;
+      if (keyCode == KeyEvent.KEYCODE_MEDIA_FAST_FORWARD) {
+        fastForward();
+      } else if (keyCode == KeyEvent.KEYCODE_MEDIA_REWIND) {
+        rewind();
+      } else if (event.getRepeatCount() == 0) {
+        switch (keyCode) {
+          case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
+            controlDispatcher.dispatchSetPlayWhenReady(player, !player.getPlayWhenReady());
+            break;
+          case KeyEvent.KEYCODE_MEDIA_PLAY:
+            controlDispatcher.dispatchSetPlayWhenReady(player, true);
+            break;
+          case KeyEvent.KEYCODE_MEDIA_PAUSE:
+            controlDispatcher.dispatchSetPlayWhenReady(player, false);
+            break;
+          case KeyEvent.KEYCODE_MEDIA_NEXT:
+            next();
+            break;
+          case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
+            previous();
+            break;
+          default:
+            break;
+        }
       }
     }
     return true;
diff --git a/library/ui/src/main/java/com/google/android/exoplayer2/ui/SimpleExoPlayerView.java b/library/ui/src/main/java/com/google/android/exoplayer2/ui/SimpleExoPlayerView.java
index a4fb539175..de28eb2f93 100644
--- a/library/ui/src/main/java/com/google/android/exoplayer2/ui/SimpleExoPlayerView.java
+++ b/library/ui/src/main/java/com/google/android/exoplayer2/ui/SimpleExoPlayerView.java
@@ -515,6 +515,13 @@ public void setUseController(boolean useController) {
 
   @Override
   public boolean dispatchKeyEvent(KeyEvent event) {
+    if (player != null && player.isPlayingAd()) {
+      // Focus any overlay UI now, in case it's provided by a WebView whose contents may update
+      // dynamically. This is needed to make the "Skip ad" button focused on Android TV when using
+      // IMA [Internal: b/62371030].
+      overlayFrameLayout.requestFocus();
+      return super.dispatchKeyEvent(event);
+    }
     maybeShowController(true);
     return dispatchMediaKeyEvent(event) || super.dispatchKeyEvent(event);
   }
