diff --git a/RELEASENOTES.md b/RELEASENOTES.md
index 8ad866395e..3d37f34501 100644
--- a/RELEASENOTES.md
+++ b/RELEASENOTES.md
@@ -362,7 +362,7 @@
   ([#1925](https://github.com/google/ExoPlayer/issues/1925)).
 * Fixed hiding of controls with use_controller="false"
   ([#1919](https://github.com/google/ExoPlayer/issues/1919)).
-* Improvements to Cronet network stack extension.
+* Improvements to Cronet com.novo.network stack extension.
 * Misc bug fixes.
 
 ### r2.0.2 ###
@@ -495,14 +495,14 @@ V2 release.
 
 ### r1.5.12 ###
 
-* Improvements to Cronet network stack extension.
+* Improvements to Cronet com.novo.network stack extension.
 * Fix bug in demo app introduced in r1.5.11 that caused L3 Widevine
   provisioning requests to fail.
 * Misc bugfixes.
 
 ### r1.5.11 ###
 
-* Cronet network stack extension.
+* Cronet com.novo.network stack extension.
 * HLS: Fix propagation of language for alternative audio renditions
   ([#1784](https://github.com/google/ExoPlayer/issues/1784)).
 * WebM: Support for subsample encryption.
diff --git a/demo/build.gradle b/demo/build.gradle
index f5561dfb4f..e797e7e3b5 100644
--- a/demo/build.gradle
+++ b/demo/build.gradle
@@ -21,6 +21,7 @@ android {
     defaultConfig {
         minSdkVersion 16
         targetSdkVersion project.ext.targetSdkVersion
+        applicationId = "com.novo.player"
     }
 
     buildTypes {
diff --git a/demo/src/main/AndroidManifest.xml b/demo/src/main/AndroidManifest.xml
index 79ef49563e..5e549f895a 100644
--- a/demo/src/main/AndroidManifest.xml
+++ b/demo/src/main/AndroidManifest.xml
@@ -14,7 +14,7 @@
      limitations under the License.
 -->
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.google.android.exoplayer2.demo"
+    package="com.novo"
     android:versionCode="2501"
     android:versionName="2.5.1">
 
@@ -38,13 +38,13 @@
   <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
 
   <application
-      android:name=".DemoApplication"
+      android:name="com.novo.main.DemoApplication"
       android:allowBackup="false"
       android:banner="@drawable/ic_banner"
       android:icon="@mipmap/ic_launcher"
       android:label="@string/application_name"
       android:largeHeap="true">
-    <activity android:name=".MainActivity"
+    <activity android:name="com.novo.main.MainActivity"
         android:theme="@android:style/Theme.Holo.Light">
       <intent-filter>
         <action android:name="android.intent.action.MAIN" />
@@ -54,7 +54,7 @@
       </intent-filter>
     </activity>
     <activity
-        android:name=".SampleChooserActivity"
+        android:name="com.novo.main.SampleChooserActivity"
         android:configChanges="keyboardHidden"
         android:label="@string/application_name">
       <!--<intent-filter>-->
@@ -79,7 +79,7 @@
       </intent-filter>
     </activity>
     <activity
-        android:name=".PlayerActivity"
+        android:name="com.novo.main.PlayerActivity"
         android:configChanges="keyboard|keyboardHidden|orientation|screenSize|screenLayout|smallestScreenSize|uiMode"
         android:label="@string/application_name"
         android:launchMode="singleTop"
@@ -101,7 +101,7 @@
         <category android:name="android.intent.category.DEFAULT" />
       </intent-filter>
     </activity>
-    <activity android:name=".LoginActivity"
+    <activity android:name="com.novo.main.LoginActivity"
         android:theme="@android:style/Theme.Holo.Light"></activity>
   </application>
 
diff --git a/demo/src/main/ic_download_complete-web.png b/demo/src/main/ic_download_complete-web.png
index 479f340858..94a947f321 100644
Binary files a/demo/src/main/ic_download_complete-web.png and b/demo/src/main/ic_download_complete-web.png differ
diff --git a/demo/src/main/java/adapters/VideoAdapter.java b/demo/src/main/java/adapters/VideoAdapter.java
deleted file mode 100644
index db9e54b64f..0000000000
--- a/demo/src/main/java/adapters/VideoAdapter.java
+++ /dev/null
@@ -1,102 +0,0 @@
-package adapters;
-
-import android.app.Activity;
-import android.content.Context;
-import android.support.annotation.LayoutRes;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ArrayAdapter;
-import android.widget.ImageView;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.bumptech.glide.Glide;
-import com.google.android.exoplayer2.demo.R;
-import com.google.android.exoplayer2.demo.Utils;
-import com.google.android.exoplayer2.demo.ZipHelper;
-
-import java.io.File;
-import java.util.List;
-
-import models.VideoModel;
-
-/**
- * Created by Hisham on 03/Sep/2017 - 17:07
- */
-
-public class VideoAdapter extends ArrayAdapter<VideoModel> {
-    private final Activity context;
-    private final int resource;
-    private final List<VideoModel> items;
-    private ItemListener listener;
-
-    public interface ItemListener {
-        void onItemClicked(VideoModel model);
-        void onDownloadClicked(VideoModel model, ImageView ivDownload);
-    }
-
-//    public interface DownloadListener {
-//    }
-
-    public void setItemListener(ItemListener listener){
-        this.listener = listener;
-    }
-
-
-    public VideoAdapter(@NonNull Activity context, @LayoutRes int resource, @NonNull List<VideoModel> objects) {
-        super(context, resource, objects);
-        this.context = context;
-        this.resource = resource;
-        this.items = objects;
-    }
-
-    @NonNull
-    @Override
-    public View getView(final int position, @Nullable View convertView, @NonNull ViewGroup parent) {
-
-        View v = convertView;
-//        if (v == null) {
-        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-        v = inflater.inflate(resource, parent, false);
-//        }
-
-        ImageView ivThumb = (ImageView) v.findViewById(R.id.ivThumb);
-        final ImageView ivDownload = (ImageView) v.findViewById(R.id.ivDownload);
-        TextView tvTitle = (TextView) v.findViewById(R.id.tvTitle);
-
-        File dir = new File(Utils.getStorageDirectoryExtracts() + items.get(position).getVideoId());
-        File[] file = dir.listFiles();
-        if(Utils.isFolderPresent(dir) && ZipHelper.searchFile(file, null)){
-            ivDownload.setImageResource(R.mipmap.ic_download_complete);
-        } else {
-            ivDownload.setImageResource(R.mipmap.ic_download);
-        }
-
-
-        Glide.with(context).load(items.get(position).getThumbnail()).into(ivThumb);
-
-        tvTitle.setText(items.get(position).getName());
-
-        ivDownload.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if(listener != null)
-                    listener.onDownloadClicked(items.get(position), ivDownload);
-
-            }
-        });
-
-        v.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if(listener != null)
-                    listener.onItemClicked(items.get(position));
-            }
-        });
-
-        return v;
-    }
-}
diff --git a/demo/src/main/java/com/novo/adapters/VideoAdapter.java b/demo/src/main/java/com/novo/adapters/VideoAdapter.java
new file mode 100644
index 0000000000..2b9496a6f7
--- /dev/null
+++ b/demo/src/main/java/com/novo/adapters/VideoAdapter.java
@@ -0,0 +1,141 @@
+package com.novo.adapters;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.support.annotation.LayoutRes;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ArrayAdapter;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.bumptech.glide.Glide;
+import com.novo.R;
+import com.novo.util.Utils;
+import com.novo.network.ZipHelper;
+
+import java.io.File;
+import java.util.List;
+
+import com.novo.models.VideoModel;
+
+/**
+ * Created by Hisham on 03/Sep/2017 - 17:07
+ */
+
+public class VideoAdapter extends ArrayAdapter<VideoModel> {
+    private final Activity activity;
+    private final int resource;
+    private final List<VideoModel> items;
+    private ItemListener listener;
+
+    public interface ItemListener {
+        void onItemClicked(VideoModel model);
+        void onDownloadClicked(VideoModel model, ImageView ivDownload);
+        void onDeleteClicked(File directory, ImageView ivDownload);
+
+    }
+
+//    public interface DownloadListener {
+//    }
+
+    public void setItemListener(ItemListener listener){
+        this.listener = listener;
+    }
+
+
+    public VideoAdapter(@NonNull Activity activity, @LayoutRes int resource, @NonNull List<VideoModel> objects) {
+        super(activity, resource, objects);
+        this.activity = activity;
+        this.resource = resource;
+        this.items = objects;
+    }
+
+    @NonNull
+    @Override
+    public View getView(final int position, @Nullable View convertView, @NonNull ViewGroup parent) {
+
+        View v = convertView;
+//        if (v == null) {
+        LayoutInflater inflater = (LayoutInflater) activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        v = inflater.inflate(resource, parent, false);
+//        }
+
+        ImageView ivThumb = (ImageView) v.findViewById(R.id.ivThumb);
+        final ImageView ivDownload = (ImageView) v.findViewById(R.id.ivDownload);
+        TextView tvTitle = (TextView) v.findViewById(R.id.tvTitle);
+
+         File dir = new File(Utils.getStorageDirectoryExtracts() + items.get(position).getVideoId());
+         File[] file = dir.listFiles();
+        if(Utils.isFolderPresent(dir) && ZipHelper.searchFile(file, null)){
+            ivDownload.setImageResource(R.mipmap.ic_download_complete);
+        } else {
+            ivDownload.setImageResource(R.mipmap.ic_download);
+        }
+
+
+        Glide.with(activity).load(items.get(position).getThumbnail()).into(ivThumb);
+        tvTitle.setText(items.get(position).getName());
+
+        ivDownload.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if(listener != null) {
+                    final File dir = new File(Utils.getStorageDirectoryExtracts() + items.get(position).getVideoId());
+                    final File[] file = dir.listFiles();
+                    if (Utils.isFolderPresent(dir) && ZipHelper.searchFile(file, null)) { // if file is present
+                        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(activity);
+                        alertDialogBuilder.setTitle("Delete"); // set title
+                        alertDialogBuilder.setMessage("Do you want to delete this offline video?") // set dialog message
+                                .setCancelable(false)
+                                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
+                                    public void onClick(DialogInterface dialog, int id) {
+                                        listener.onDeleteClicked(dir, ivDownload);
+                                    }
+                                })
+                                .setNegativeButton("No", new DialogInterface.OnClickListener() {
+                                    public void onClick(DialogInterface dialog, int id) {
+                                        dialog.cancel();
+                                    }
+                                });
+                        AlertDialog alertDialog = alertDialogBuilder.create(); // create alert dialog
+                        alertDialog.show(); // show it
+                    } else {
+                        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(activity);
+                        alertDialogBuilder.setTitle("Download"); // set title
+                        alertDialogBuilder.setMessage("Do you want to download this video?") // set dialog message
+                                .setCancelable(false)
+                                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
+                                    public void onClick(DialogInterface dialog, int id) {
+                                        listener.onDownloadClicked(items.get(position), ivDownload);
+                                    }
+                                })
+                                .setNegativeButton("No", new DialogInterface.OnClickListener() {
+                                    public void onClick(DialogInterface dialog, int id) {
+                                        dialog.cancel();
+                                    }
+                                });
+                        AlertDialog alertDialog = alertDialogBuilder.create(); // create alert dialog
+                        alertDialog.show(); // show it
+
+                    }
+                }
+            }
+        });
+
+        v.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if(listener != null)
+                    listener.onItemClicked(items.get(position));
+            }
+        });
+
+        return v;
+    }
+}
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java b/demo/src/main/java/com/novo/main/DemoApplication.java
similarity index 97%
rename from demo/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
rename to demo/src/main/java/com/novo/main/DemoApplication.java
index b5db4c018d..620f3da054 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
+++ b/demo/src/main/java/com/novo/main/DemoApplication.java
@@ -13,15 +13,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.android.exoplayer2.demo;
+package com.novo.main;
 
 import android.app.Application;
+
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DefaultBandwidthMeter;
 import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
 import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
 import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.google.android.exoplayer2.util.Util;
+import com.novo.BuildConfig;
 
 /**
  * Placeholder application to facilitate overriding Application methods for debugging and testing.
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/DemoUtil.java b/demo/src/main/java/com/novo/main/DemoUtil.java
similarity index 98%
rename from demo/src/main/java/com/google/android/exoplayer2/demo/DemoUtil.java
rename to demo/src/main/java/com/novo/main/DemoUtil.java
index f9e9c34158..a4fbac5a65 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/DemoUtil.java
+++ b/demo/src/main/java/com/novo/main/DemoUtil.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.android.exoplayer2.demo;
+package com.novo.main;
 
 import android.text.TextUtils;
 import com.google.android.exoplayer2.Format;
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/EventLogger.java b/demo/src/main/java/com/novo/main/EventLogger.java
similarity index 99%
rename from demo/src/main/java/com/google/android/exoplayer2/demo/EventLogger.java
rename to demo/src/main/java/com/novo/main/EventLogger.java
index 30dfb5140a..14c2d6d933 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/EventLogger.java
+++ b/demo/src/main/java/com/novo/main/EventLogger.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.android.exoplayer2.demo;
+package com.novo.main;
 
 import android.os.SystemClock;
 import android.util.Log;
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/LoginActivity.java b/demo/src/main/java/com/novo/main/LoginActivity.java
similarity index 83%
rename from demo/src/main/java/com/google/android/exoplayer2/demo/LoginActivity.java
rename to demo/src/main/java/com/novo/main/LoginActivity.java
index dee11a2fcd..4453716b71 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/LoginActivity.java
+++ b/demo/src/main/java/com/novo/main/LoginActivity.java
@@ -1,4 +1,4 @@
-package com.google.android.exoplayer2.demo;
+package com.novo.main;
 
 import android.app.Activity;
 import android.os.Bundle;
@@ -9,6 +9,11 @@
 
 import com.google.android.exoplayer2.upstream.novo.TokenManager;
 
+import com.novo.R;
+import com.novo.network.EndPoints;
+import com.novo.network.ServerHit;
+import com.novo.util.Utils;
+
 public class LoginActivity extends Activity {
 
     private EditText etUserName;
@@ -34,9 +39,9 @@ public void onClick(View v) {
                     return;
                 }
 
-                String url = Utils.getBaseUrl() + "VocabimateLoginServer/webapi/myresource/login";
+                String url = EndPoints.getBaseUrl() + "VocabimateLoginServer/webapi/myresource/login";
                 String body = "username=" + etUserName.getText().toString()+"&password="+etPass.getText().toString();
-                ServerHit.JSONTask task = new ServerHit.JSONTask("POST", "application/x-www-form-urlencoded", body, new ServerHit.ServiceHitResponseListener() {
+                ServerHit.JSONTask task = new ServerHit.JSONTask(LoginActivity.this, TokenManager.getToken(), "POST", "application/x-www-form-urlencoded", body, new ServerHit.ServiceHitResponseListener() {
                     @Override
                     public void onDone(String response) {
                         TokenManager.setToken(response);
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/MainActivity.java b/demo/src/main/java/com/novo/main/MainActivity.java
similarity index 67%
rename from demo/src/main/java/com/google/android/exoplayer2/demo/MainActivity.java
rename to demo/src/main/java/com/novo/main/MainActivity.java
index e1a671e07d..cec3ece5f9 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/MainActivity.java
+++ b/demo/src/main/java/com/novo/main/MainActivity.java
@@ -1,7 +1,6 @@
-package com.google.android.exoplayer2.demo;
+package com.novo.main;
 
 import android.app.Activity;
-import android.app.ProgressDialog;
 import android.content.Intent;
 import android.net.Uri;
 import android.os.Bundle;
@@ -13,15 +12,18 @@
 import android.widget.ImageView;
 import android.widget.Toast;
 
+import com.google.android.exoplayer2.source.hls.KeyWriter;
 import com.google.android.exoplayer2.upstream.novo.TokenManager;
 import com.google.gson.Gson;
 
+import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.FilenameUtils;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.io.File;
+import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.net.MalformedURLException;
 import java.net.URL;
@@ -29,15 +31,22 @@
 import java.util.List;
 import java.util.Map;
 
-import adapters.VideoAdapter;
-import models.VideoModel;
+import com.novo.R;
+import com.novo.adapters.VideoAdapter;
+import com.novo.models.VideoModel;
+import com.novo.network.DownloadTask;
+import com.novo.network.EndPoints;
+import com.novo.network.ServerHit;
+import com.novo.network.ZipHelper;
+import com.novo.util.Utils;
+
+import static com.novo.util.Utils.TAG;
 
 public class MainActivity extends Activity {
 
     private Button btnLogin;
 //    private ImageView iVDownload;
 //    private String videoId = "arc_single";
-    private static final String TAG = MainActivity.class.getSimpleName();
     private GridView lvAll;
 
 
@@ -53,16 +62,7 @@ private void initStuff() {
         Button btnLocal = (Button) findViewById(R.id.btnLocal);
 //        iVDownload = (ImageView) findViewById(R.id.iVDownload);
         lvAll = (GridView) findViewById(R.id.lvAll);
-
-        // hit server to get all videos urls
-        final ProgressDialog progressDialog = new ProgressDialog(MainActivity.this);
-        progressDialog.setMessage("Please wait...");
-        progressDialog.setIndeterminate(true);
-        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
-        progressDialog.setCancelable(false);
-        progressDialog.show();
-
-        ServerHit.JSONTask task = new ServerHit.JSONTask("GET", null, null, new ServerHit.ServiceHitResponseListener() {
+        ServerHit.JSONTask task = new ServerHit.JSONTask(this, TokenManager.getToken(), "GET", null, null, new ServerHit.ServiceHitResponseListener() {
             @Override
             public void onDone(final String response) {
                 Log.d(TAG, "onDone: " + response);
@@ -106,7 +106,9 @@ public void onFileSearchComplete(boolean fileFound, String fileToPlay) {
 
                         @Override
                         public void onDownloadClicked(VideoModel model, final ImageView ivDownload) {
-                            String serverFileUrl = Utils.getBaseUrl() + "VocabimateContentServer/webapi/video/download?videoId=" + model.getVideoId();
+                            String serverFileUrl = EndPoints.getBaseUrl() + "VocabimateContentServer/webapi/video/download?videoId=" + model.getVideoId();
+                            // todo problem with zip file, hardcoded
+                            final String keyFileUrl = EndPoints.getBaseUrl() + "VocabimateKeyServer/webapi/keys/getKey?videoId=" + model.getVideoId();
                             String videoId;
                             try {
                                 Map<String, String> params = Utils.splitQuery(new URL(serverFileUrl));
@@ -126,7 +128,7 @@ public void onDownloadClicked(VideoModel model, final ImageView ivDownload) {
                             final File targetDirectory = new File(Utils.getStorageDirectoryExtracts() + fileNameWithOutExt);
                             targetDirectory.mkdir();
 
-                            final DownloadTask downloadTask = new DownloadTask(MainActivity.this, sourceZipFile.getAbsolutePath(), new DownloadTask.DownloadTaskListener() {
+                            final DownloadTask downloadTask = new DownloadTask(MainActivity.this, TokenManager.getToken(), sourceZipFile.getAbsolutePath(), new DownloadTask.DownloadTaskListener() {
                                 @Override
                                 public void onFileDownload() {
                                     new ZipHelper.ZipTask(MainActivity.this, new ZipHelper.ZipTaskListener() {
@@ -140,22 +142,63 @@ public void onUnzipped(String fileToPlay) {
                             });
                             downloadTask.execute(serverFileUrl);
 
+                            final File tempKeyPath = new File(Utils.getTempDirectoryExtracts() + videoId);
+                            final DownloadTask keyTask = new DownloadTask(MainActivity.this, TokenManager.getToken(), tempKeyPath.toString(), new DownloadTask.DownloadTaskListener() {
+                                @Override
+                                public void onFileDownload() {
+                                    KeyWriter.writeByteToFile(KeyWriter.readByteToFileUnencryptedData(keyFileUrl, tempKeyPath), keyFileUrl);
+                                }
+                            });
+                            keyTask.execute(keyFileUrl);
+//                            ServerHit.JSONTask keyTask = new ServerHit.JSONTask(MainActivity.this, "GET", null, null, new ServerHit.ServiceHitResponseListener() {
+//                                @Override
+//                                public void onDone(String response) {
+//                                    KeyWriter.writeByteToFile(response.getBytes(), keyFileUrl);
+//                                }
+//
+//                                @Override
+//                                public void onError(String error) {
+//                                    Log.e(TAG, "keyTask: " + error);
+//                                }
+//                            });
+//                            keyTask.setToken(TokenManager.getToken());
+//                            keyTask.execute(keyFileUrl);
+                        }
+
+                        @Override
+                        public void onDeleteClicked(File directory, ImageView ivDownload) {
+                            try {
+                                FileUtils.deleteDirectory(directory);
+                                ivDownload.setImageResource(R.mipmap.ic_download);
+                            } catch (IOException e) {
+                                e.printStackTrace();
+                                Log.d(TAG, "onDeleteClicked: unable to delete directory" + e.getLocalizedMessage());
+                            }
                         }
                     });
                     lvAll.setAdapter(adapter);
                 } catch (JSONException e) {
                     e.printStackTrace();
                 }
-                progressDialog.dismiss();
+
             }
 
             @Override
             public void onError(String error) {
-                progressDialog.dismiss();
+
+                runOnUiThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        String response = "[ {  \"thumbnail\" : \"http://35.154.11.202/VocabimateContentServer/thumbnails/thumbnail.jpg\",  \"name\" : \"Encrypted Stream - Open Policy\",  \"videoId\" : \"Gear_640x360_750k_open\"}, {  \"thumbnail\" : \"http://35.154.11.202/VocabimateContentServer/thumbnails/thumbnail.jpg\",  \"name\" : \"Encrypted Stream - Token Auth policy\",  \"videoId\" : \"Gear_640x360_750k_auth\"} ]";
+                        onDone(response);
+                    }
+                });
+
+
             }
         });
 
-        String url = Utils.getBaseUrl() +"VocabimateContentServer/webapi/video/fetchAll";
+        String url = EndPoints.getBaseUrl() +"VocabimateContentServer/webapi/video/fetchAll";
         task.execute(url);
 
         btnLogin.setOnClickListener(new View.OnClickListener() {
@@ -185,7 +228,7 @@ public void onClick(View v) {
     }
 
     private void playMediaFromServer(VideoModel model) {
-        ServerHit.JSONTask streamTask = new ServerHit.JSONTask("GET", null, null, new ServerHit.ServiceHitResponseListener() {
+        ServerHit.JSONTask streamTask = new ServerHit.JSONTask(this, TokenManager.getToken(), "GET", null, null, new ServerHit.ServiceHitResponseListener() {
             @Override
             public void onDone(String response) {
                 try {
@@ -206,14 +249,13 @@ public void onError(String error) {
 
             }
         });
-        streamTask.execute(Utils.getBaseUrl() +"VocabimateContentServer/webapi/video/stream?videoId=" + model.getVideoId());
+        streamTask.execute(EndPoints.getBaseUrl() +"VocabimateContentServer/webapi/video/stream?videoId=" + model.getVideoId());
     }
 
     @Override
     protected void onResume() {
         super.onResume();
         loginButtonTextUpdate();
-        makeVocaDirectory();
 //        File dir = new File(storageDirectoryZips + videoId);
 //        if(isFolderPresent(dir)){
 //            iVDownload.setImageResource(R.mipmap.ic_download_complete);
@@ -222,17 +264,6 @@ protected void onResume() {
 //        }
     }
 
-    private void makeVocaDirectory() {
-        File file = new File(Utils.getStorageDirectoryZips());
-        File fileExtracts = new File(Utils.getStorageDirectoryExtracts());
-        if(!file.exists()) {
-            file.mkdirs();
-        }
-        if(!fileExtracts.exists()) {
-            fileExtracts.mkdirs();
-        }
-    }
-
     private void loginButtonTextUpdate() {
         if(!TextUtils.isEmpty(TokenManager.getToken())){
             btnLogin.setText("Logout");
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java b/demo/src/main/java/com/novo/main/PlayerActivity.java
similarity index 99%
rename from demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
rename to demo/src/main/java/com/novo/main/PlayerActivity.java
index 9e53dff857..c6f3f6c289 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
+++ b/demo/src/main/java/com/novo/main/PlayerActivity.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.android.exoplayer2.demo;
+package com.novo.main;
 
 import android.app.Activity;
 import android.content.Context;
@@ -73,6 +73,8 @@
 import com.google.android.exoplayer2.upstream.DefaultBandwidthMeter;
 import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.google.android.exoplayer2.util.Util;
+import com.novo.R;
+
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 import java.net.CookieHandler;
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java b/demo/src/main/java/com/novo/main/SampleChooserActivity.java
similarity index 99%
rename from demo/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
rename to demo/src/main/java/com/novo/main/SampleChooserActivity.java
index 87b8e92e83..92bfca0956 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
+++ b/demo/src/main/java/com/novo/main/SampleChooserActivity.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.android.exoplayer2.demo;
+package com.novo.main;
 
 import android.app.Activity;
 import android.content.Context;
@@ -40,6 +40,8 @@
 import com.google.android.exoplayer2.upstream.DefaultDataSource;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Util;
+import com.novo.R;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/TrackSelectionHelper.java b/demo/src/main/java/com/novo/main/TrackSelectionHelper.java
similarity index 99%
rename from demo/src/main/java/com/google/android/exoplayer2/demo/TrackSelectionHelper.java
rename to demo/src/main/java/com/novo/main/TrackSelectionHelper.java
index fb7217f8fd..79de208bd7 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/TrackSelectionHelper.java
+++ b/demo/src/main/java/com/novo/main/TrackSelectionHelper.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.android.exoplayer2.demo;
+package com.novo.main;
 
 import android.annotation.SuppressLint;
 import android.app.Activity;
@@ -35,6 +35,8 @@
 import com.google.android.exoplayer2.trackselection.MappingTrackSelector.SelectionOverride;
 import com.google.android.exoplayer2.trackselection.RandomTrackSelection;
 import com.google.android.exoplayer2.trackselection.TrackSelection;
+import com.novo.R;
+
 import java.util.Arrays;
 
 /**
diff --git a/demo/src/main/java/models/VideoModel.java b/demo/src/main/java/com/novo/models/VideoModel.java
similarity index 96%
rename from demo/src/main/java/models/VideoModel.java
rename to demo/src/main/java/com/novo/models/VideoModel.java
index 457596734e..d0b5212765 100644
--- a/demo/src/main/java/models/VideoModel.java
+++ b/demo/src/main/java/com/novo/models/VideoModel.java
@@ -1,4 +1,4 @@
-package models;
+package com.novo.models;
 
 /**
  * Created by Hisham on 03/Sep/2017 - 17:08
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/DownloadTask.java b/demo/src/main/java/com/novo/network/DownloadTask.java
similarity index 92%
rename from demo/src/main/java/com/google/android/exoplayer2/demo/DownloadTask.java
rename to demo/src/main/java/com/novo/network/DownloadTask.java
index 1adbcaacf5..3bcfdbda54 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/DownloadTask.java
+++ b/demo/src/main/java/com/novo/network/DownloadTask.java
@@ -1,4 +1,4 @@
-package com.google.android.exoplayer2.demo;
+package com.novo.network;
 
 import android.app.Activity;
 import android.app.ProgressDialog;
@@ -6,8 +6,11 @@
 import android.content.DialogInterface;
 import android.os.AsyncTask;
 import android.os.PowerManager;
+import android.text.TextUtils;
 import android.widget.Toast;
 
+import com.google.android.exoplayer2.upstream.novo.TokenManager;
+
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -28,15 +31,17 @@
     private final DownloadTaskListener listener;
     private Activity activity;
     private PowerManager.WakeLock mWakeLock;
+    private String token;
 
     public interface DownloadTaskListener {
         void onFileDownload();
     }
 
-    public DownloadTask(Activity activity, String filePath, DownloadTaskListener listener) {
+    public DownloadTask(Activity activity, String token, String filePath, DownloadTaskListener listener) {
         this.activity = activity;
         this.filePath = filePath;
         this.listener = listener;
+        this.token = token;
     }
 
     // declare the dialog as a member field of your activity
@@ -51,8 +56,11 @@ protected String doInBackground(String... sUrl) {
         try {
             URL url = new URL(sUrl[0]);
             connection = (HttpURLConnection) url.openConnection();
-            connection.connect();
+            if(!TextUtils.isEmpty(token)) {
+                connection.setRequestProperty("token", TokenManager.getToken());
+            }
 
+            connection.connect();
             // expect HTTP 200 OK, so we don't mistakenly save error report
             // instead of the file
             if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
diff --git a/demo/src/main/java/com/novo/network/EndPoints.java b/demo/src/main/java/com/novo/network/EndPoints.java
new file mode 100644
index 0000000000..1dfd930625
--- /dev/null
+++ b/demo/src/main/java/com/novo/network/EndPoints.java
@@ -0,0 +1,13 @@
+package com.novo.network;
+
+/**
+ * Created by Hisham on 08/Sep/2017 - 14:17
+ */
+
+public class EndPoints {
+//    private static final String baseUrl = "http://35.154.11.202/";
+    private static final String baseUrl = "http://192.168.0.94:8080/";
+    public static String getBaseUrl() {
+        return baseUrl;
+    }
+}
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/ServerHit.java b/demo/src/main/java/com/novo/network/ServerHit.java
similarity index 75%
rename from demo/src/main/java/com/google/android/exoplayer2/demo/ServerHit.java
rename to demo/src/main/java/com/novo/network/ServerHit.java
index 60be14feba..968e9f2e1a 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/ServerHit.java
+++ b/demo/src/main/java/com/novo/network/ServerHit.java
@@ -1,9 +1,13 @@
-package com.google.android.exoplayer2.demo;
+package com.novo.network;
 
+import android.app.Activity;
+import android.app.ProgressDialog;
 import android.os.AsyncTask;
 import android.text.TextUtils;
 import android.util.Log;
 
+import com.google.android.exoplayer2.upstream.novo.TokenManager;
+
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
@@ -12,6 +16,8 @@
 import java.net.HttpURLConnection;
 import java.net.URL;
 
+import static com.novo.util.Utils.TAG;
+
 /**
  * Created by Hisham on 25/Aug/2017 - 20:01
  */
@@ -30,17 +36,29 @@
         private final String type;
         private String body;
         private String contentType;
+        private final Activity activity;
+        private ProgressDialog progressDialog;
+        private String token;
 
-        public JSONTask(String type, String contentType, String body, ServiceHitResponseListener listener){
+        public JSONTask(Activity activity, String token, String type, String contentType, String body, ServiceHitResponseListener listener){
             this.body = body;
             this.listener = listener;
             this.type = type;
             this.contentType = contentType;
+            this.activity = activity;
+            this.token = token;
         }
 
         @Override
         protected void onPreExecute() {
             super.onPreExecute();
+            // hit server to get all videos urls
+            progressDialog = new ProgressDialog(activity);
+            progressDialog.setMessage("Please wait...");
+            progressDialog.setIndeterminate(true);
+            progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
+            progressDialog.setCancelable(false);
+            progressDialog.show();
         }
 
         @Override
@@ -57,6 +75,9 @@ protected String doInBackground(String... params) {
                 if(!TextUtils.isEmpty(contentType)) {
                     connection.setRequestProperty("Content-Type", contentType);
                 }
+                if(!TextUtils.isEmpty(token)) {
+                    connection.setRequestProperty("token", TokenManager.getToken());
+                }
                 if(body != null) {
                     byte[] outputInBytes = body.getBytes("UTF-8");
                     OutputStream os = connection.getOutputStream();
@@ -103,11 +124,7 @@ protected void onPostExecute(final String result) {
                 listener.onError(null);
 //                Toast.makeText(getApplicationContext(), "Not able to fetch data from server, please check url.", Toast.LENGTH_SHORT).show();
             }
+            progressDialog.dismiss();
         }
     }
-
-    private static final String TAG = ServerHit.class.getSimpleName();
-
-
-    
 }
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/ZipHelper.java b/demo/src/main/java/com/novo/network/ZipHelper.java
similarity index 83%
rename from demo/src/main/java/com/google/android/exoplayer2/demo/ZipHelper.java
rename to demo/src/main/java/com/novo/network/ZipHelper.java
index dc45911bb1..8b727bfd0b 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/ZipHelper.java
+++ b/demo/src/main/java/com/novo/network/ZipHelper.java
@@ -1,10 +1,12 @@
-package com.google.android.exoplayer2.demo;
+package com.novo.network;
 
 import android.app.Activity;
 import android.app.ProgressDialog;
 import android.os.AsyncTask;
 import android.util.Log;
 
+import com.novo.BuildConfig;
+
 import java.io.BufferedInputStream;
 import java.io.File;
 import java.io.FileInputStream;
@@ -13,6 +15,7 @@
 import java.io.IOException;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
+import static com.novo.util.Utils.TAG;
 
 /**
  * Created by Hisham on 31/Aug/2017 - 16:06 - https://stackoverflow.com/a/27050680
@@ -46,7 +49,7 @@ protected void onPreExecute() {
         @Override
         protected File doInBackground(File... params) {
             try {
-                ZipHelper.unzip(params[0], params[1]);
+                ZipHelper.unzip(params[0], params[1]); // params are source file and target file
                 return params[1];
             } catch (IOException e) {
                 e.printStackTrace();
@@ -63,10 +66,10 @@ protected void onPostExecute(File targetDirectory) {
 
 
     public interface ZipTaskListener {
-        void onUnzipped(String fileToPlay);
+        void onUnzipped(String targetDirectoryPath);
     }
 
-    public static void unzip(File zipFile, File targetDirectory) throws IOException {
+    private static void unzip(File zipFile, File targetDirectory) throws IOException {
         ZipInputStream zis = new ZipInputStream(new BufferedInputStream(new FileInputStream(zipFile)));
         try {
             ZipEntry ze;
@@ -95,17 +98,25 @@ public static void unzip(File zipFile, File targetDirectory) throws IOException
             }
         } finally {
             zis.close();
+            if(!BuildConfig.DEBUG) { // if not debugging - delete zip file
+                String absolutePath = zipFile.getAbsolutePath();
+                if (zipFile.delete()) {
+                    Log.d(TAG, "zip file deleted: " + absolutePath);
+                } else {
+                    Log.d(TAG, "Error deleting zip file : " + absolutePath);
+                }
+            }
         }
     }
 
     /**
-     * This method searches the first file named
+     * This method searches the first file named prog_index.m3u8
      * @param file
      * @param listener
      * @return
      */
     public static boolean searchFile(File[] file, FileListener listener) {
-        if(file.length > 0) {
+        if(file != null && file.length > 0) {
             for (File f : file) {
                 String filenameToSearch = "prog_index.m3u8"; // file name to search in the folder you just unarchived
 //                if (f.isFile() && f.getName().equalsIgnoreCase(filenameToSearch)) {// f.getPath().endsWith("master.m3u8")) {
@@ -126,7 +137,6 @@ public static boolean searchFile(File[] file, FileListener listener) {
         return false;
     }
 
-    private static final String TAG = ZipHelper.class.getSimpleName();
 
     public interface FileListener{
         void onFileSearchComplete(boolean fileFound, String path);
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/Utils.java b/demo/src/main/java/com/novo/util/Utils.java
similarity index 77%
rename from demo/src/main/java/com/google/android/exoplayer2/demo/Utils.java
rename to demo/src/main/java/com/novo/util/Utils.java
index 3bd36b3b53..c85e196099 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/Utils.java
+++ b/demo/src/main/java/com/novo/util/Utils.java
@@ -1,4 +1,4 @@
-package com.google.android.exoplayer2.demo;
+package com.novo.util;
 
 import android.content.Context;
 import android.net.ConnectivityManager;
@@ -22,23 +22,36 @@
 
     private static final String storageDirectoryZips = Environment.getExternalStorageDirectory() + "/voca/zips/";
     private static final String storageDirectoryExtracts = Environment.getExternalStorageDirectory() + "/voca/extracts/";
-    private static final String baseUrl = "http://35.154.11.202/";
-//    private static final String baseUrl = "http://192.168.0.94:8080/"; // local
+    private static final String tempDirectoryExtracts = Environment.getExternalStorageDirectory() + "/voca/temp/";
+    public static final String TAG = "Novo";
+
+    public static String getTempDirectoryExtracts() {
+        File tempDirectory = new File(tempDirectoryExtracts);
+        if (!tempDirectory.exists()) {
+            tempDirectory.mkdirs();
+        }
+        return tempDirectoryExtracts;
+    }
 
     public static String getStorageDirectoryZips() {
+        File fileZips = new File(storageDirectoryZips);
+        if (!fileZips.exists()) {
+            fileZips.mkdirs();
+        }
         return storageDirectoryZips;
     }
 
     public static String getStorageDirectoryExtracts() {
+        File fileExtracts = new File(storageDirectoryExtracts);
+        if (!fileExtracts.exists()) {
+            fileExtracts.mkdirs();
+        }
         return storageDirectoryExtracts;
     }
 
-    public static String getBaseUrl() {
-        return baseUrl;
-    }
 
     public static boolean isFolderPresent(File dir) {
-        if(dir.exists() && dir.isDirectory()) {
+        if (dir.exists() && dir.isDirectory()) {
             return true;
         } else {
             return false;
diff --git a/demo/src/main/res/layout/activity_login.xml b/demo/src/main/res/layout/activity_login.xml
index 68c5980881..885d9e2831 100644
--- a/demo/src/main/res/layout/activity_login.xml
+++ b/demo/src/main/res/layout/activity_login.xml
@@ -4,7 +4,7 @@
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    tools:context="com.google.android.exoplayer2.demo.LoginActivity">
+    tools:context=".main.LoginActivity">
 
     <EditText
         android:id="@+id/etUserName"
diff --git a/demo/src/main/res/layout/activity_main.xml b/demo/src/main/res/layout/activity_main.xml
index 38e20a93c9..804de725cc 100644
--- a/demo/src/main/res/layout/activity_main.xml
+++ b/demo/src/main/res/layout/activity_main.xml
@@ -6,7 +6,7 @@
     android:layout_height="match_parent"
     android:gravity="center_horizontal"
     android:orientation="vertical"
-    tools:context="com.google.android.exoplayer2.demo.MainActivity">
+    tools:context=".main.MainActivity">
 
     <Button
         android:id="@+id/btnLogin"
diff --git a/demo/src/main/res/mipmap-hdpi/ic_download_complete.png b/demo/src/main/res/mipmap-hdpi/ic_download_complete.png
index f5642acf2e..6fce008265 100644
Binary files a/demo/src/main/res/mipmap-hdpi/ic_download_complete.png and b/demo/src/main/res/mipmap-hdpi/ic_download_complete.png differ
diff --git a/demo/src/main/res/mipmap-mdpi/ic_download_complete.png b/demo/src/main/res/mipmap-mdpi/ic_download_complete.png
index 5a859a8de2..654a6b44d7 100644
Binary files a/demo/src/main/res/mipmap-mdpi/ic_download_complete.png and b/demo/src/main/res/mipmap-mdpi/ic_download_complete.png differ
diff --git a/demo/src/main/res/mipmap-xhdpi/ic_download_complete.png b/demo/src/main/res/mipmap-xhdpi/ic_download_complete.png
index 23ebd391d3..cce3c05467 100644
Binary files a/demo/src/main/res/mipmap-xhdpi/ic_download_complete.png and b/demo/src/main/res/mipmap-xhdpi/ic_download_complete.png differ
diff --git a/demo/src/main/res/mipmap-xxhdpi/ic_download_complete.png b/demo/src/main/res/mipmap-xxhdpi/ic_download_complete.png
index 94a75b0cdf..b712f39492 100644
Binary files a/demo/src/main/res/mipmap-xxhdpi/ic_download_complete.png and b/demo/src/main/res/mipmap-xxhdpi/ic_download_complete.png differ
diff --git a/demo/src/main/res/mipmap-xxxhdpi/ic_download_complete.png b/demo/src/main/res/mipmap-xxxhdpi/ic_download_complete.png
index aea67c4c78..fe3f3ac0e2 100644
Binary files a/demo/src/main/res/mipmap-xxxhdpi/ic_download_complete.png and b/demo/src/main/res/mipmap-xxxhdpi/ic_download_complete.png differ
diff --git a/extensions/cronet/src/main/java/com/google/android/exoplayer2/ext/cronet/CronetDataSource.java b/extensions/cronet/src/main/java/com/google/android/exoplayer2/ext/cronet/CronetDataSource.java
index 204a2756bb..3d22669ea5 100644
--- a/extensions/cronet/src/main/java/com/google/android/exoplayer2/ext/cronet/CronetDataSource.java
+++ b/extensions/cronet/src/main/java/com/google/android/exoplayer2/ext/cronet/CronetDataSource.java
@@ -133,8 +133,8 @@ public OpenException(String errorMessage, DataSpec dataSpec, int cronetConnectio
    * @param cronetEngine A CronetEngine.
    * @param executor The {@link java.util.concurrent.Executor} that will handle responses.
    *     This may be a direct executor (i.e. executes tasks on the calling thread) in order
-   *     to avoid a thread hop from Cronet's internal network thread to the response handling
-   *     thread. However, to avoid slowing down overall network performance, care must be taken
+   *     to avoid a thread hop from Cronet's internal com.novo.network thread to the response handling
+   *     thread. However, to avoid slowing down overall com.novo.network performance, care must be taken
    *     to make sure response handling is a fast operation when using a direct executor.
    * @param contentTypePredicate An optional {@link Predicate}. If a content type is rejected by the
    *     predicate then an {@link InvalidContentTypeException} is thrown from
@@ -151,8 +151,8 @@ public CronetDataSource(CronetEngine cronetEngine, Executor executor,
    * @param cronetEngine A CronetEngine.
    * @param executor The {@link java.util.concurrent.Executor} that will handle responses.
    *     This may be a direct executor (i.e. executes tasks on the calling thread) in order
-   *     to avoid a thread hop from Cronet's internal network thread to the response handling
-   *     thread. However, to avoid slowing down overall network performance, care must be taken
+   *     to avoid a thread hop from Cronet's internal com.novo.network thread to the response handling
+   *     thread. However, to avoid slowing down overall com.novo.network performance, care must be taken
    *     to make sure response handling is a fast operation when using a direct executor.
    * @param contentTypePredicate An optional {@link Predicate}. If a content type is rejected by the
    *     predicate then an {@link InvalidContentTypeException} is thrown from
diff --git a/extensions/flac/proguard-rules.txt b/extensions/flac/proguard-rules.txt
index ee0a9fa5b5..b9e5c16a12 100644
--- a/extensions/flac/proguard-rules.txt
+++ b/extensions/flac/proguard-rules.txt
@@ -9,6 +9,6 @@
 -keep class com.google.android.exoplayer2.ext.flac.FlacDecoderJni {
     *;
 }
--keep class com.google.android.exoplayer2.util.FlacStreamInfo {
+-keep class com.google.android.exoplayer2.com.novo.util.FlacStreamInfo {
     *;
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
index b096b5ae12..b0808d28a0 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
@@ -77,7 +77,7 @@
  * further injected components. This allows many sub-components to be individually replaced with
  * custom implementations. For example the default MediaSource implementations require one or more
  * {@link DataSource} factories to be injected via their constructors. By providing a custom factory
- * it's possible to load data from a non-standard source, or through a different network stack.
+ * it's possible to load data from a non-standard source, or through a different com.novo.network stack.
  *
  * <h3>Threading model</h3>
  * <p>The figure below shows ExoPlayer's threading model.</p>
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecInfo.java b/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecInfo.java
index 2e5b04f4a9..1b94266693 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecInfo.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecInfo.java
@@ -35,7 +35,7 @@
 @TargetApi(16)
 public final class MediaCodecInfo {
 
-  public static final String TAG = "MediaCodecInfo";
+  private static final String TAG = "MediaCodecInfo";
 
   /**
    * The name of the decoder.
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/trackselection/AdaptiveTrackSelection.java b/library/core/src/main/java/com/google/android/exoplayer2/trackselection/AdaptiveTrackSelection.java
index 12f5952dd0..34a53e011b 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/trackselection/AdaptiveTrackSelection.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/trackselection/AdaptiveTrackSelection.java
@@ -25,7 +25,7 @@
 
 /**
  * A bandwidth based adaptive {@link TrackSelection}, whose selected track is updated to be the one
- * of highest quality given the current network conditions and the state of the buffer.
+ * of highest quality given the current com.novo.network conditions and the state of the buffer.
  */
 public class AdaptiveTrackSelection extends BaseTrackSelection {
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java b/library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java
index fe2b920933..cf8ac15459 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java
@@ -1021,7 +1021,7 @@ protected static boolean formatHasLanguage(Format format, String language) {
         && TextUtils.equals(language, Util.normalizeLanguageCode(format.language));
   }
 
-  // Viewport size util methods.
+  // Viewport size com.novo.util methods.
 
   private static List<Integer> getViewportFilteredTrackIndices(TrackGroup group, int viewportWidth,
       int viewportHeight, boolean orientationMayChange) {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelection.java b/library/core/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelection.java
index fe66946a65..1370107481 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelection.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelection.java
@@ -135,7 +135,7 @@
    * Returns the number of chunks that should be retained in the queue.
    * <p>
    * To avoid excessive re-buffering, implementations should normally return the size of the queue.
-   * An example of a case where a smaller value may be returned is if network conditions have
+   * An example of a case where a smaller value may be returned is if com.novo.network conditions have
    * improved dramatically, allowing chunks to be discarded and re-buffered in a track of
    * significantly higher quality. Discarding chunks may allow faster switching to a higher quality
    * track in this case.
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSpec.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSpec.java
index ab1542c7a6..8d6fc5d53b 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSpec.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSpec.java
@@ -35,13 +35,13 @@
   @IntDef(flag = true, value = {FLAG_ALLOW_GZIP, FLAG_ALLOW_CACHING_UNKNOWN_LENGTH})
   public @interface Flags {}
   /**
-   * Permits an underlying network stack to request that the server use gzip compression.
+   * Permits an underlying com.novo.network stack to request that the server use gzip compression.
    * <p>
    * Should not typically be set if the data being requested is already compressed (e.g. most audio
    * and video requests). May be set when requesting other data.
    * <p>
    * When a {@link DataSource} is used to request data with this flag set, and if the
-   * {@link DataSource} does make a network request, then the value returned from
+   * {@link DataSource} does make a com.novo.network request, then the value returned from
    * {@link DataSource#open(DataSpec)} will typically be {@link C#LENGTH_UNSET}. The data read from
    * {@link DataSource#read(byte[], int, int)} will be the decompressed data.
    */
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/ParsingLoadable.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/ParsingLoadable.java
index adf245d9aa..d2dc673491 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/ParsingLoadable.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/ParsingLoadable.java
@@ -86,7 +86,7 @@ public final T getResult() {
   }
 
   /**
-   * Returns the number of bytes loaded. In the case that the network response was compressed, the
+   * Returns the number of bytes loaded. In the case that the com.novo.network response was compressed, the
    * value returned is the size of the data <em>after</em> decompression.
    *
    * @return The number of bytes loaded.
diff --git a/library/hls/build.gradle b/library/hls/build.gradle
index ac77725ca5..de04d59fdd 100644
--- a/library/hls/build.gradle
+++ b/library/hls/build.gradle
@@ -38,6 +38,7 @@ dependencies {
     androidTestCompile 'com.google.dexmaker:dexmaker:' + dexmakerVersion
     androidTestCompile 'com.google.dexmaker:dexmaker-mockito:' + dexmakerVersion
     androidTestCompile 'org.mockito:mockito-core:' + mockitoVersion
+    compile 'commons-io:commons-io:2.5'
 }
 
 ext {
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
index bca62ed230..32be3e3d30 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
@@ -315,12 +315,16 @@ public void getNextChunk(HlsMediaChunk previous, long playbackPositionUs, HlsChu
    *
    * @param chunk The chunk whose load has been completed.
    */
-  public void onChunkLoadCompleted(Chunk chunk) {
+  public void onChunkLoadCompleted(Chunk chunk, boolean keyServedLocally) {
     if (chunk instanceof EncryptionKeyChunk) {
       EncryptionKeyChunk encryptionKeyChunk = (EncryptionKeyChunk) chunk;
       scratchSpace = encryptionKeyChunk.getDataHolder();
+      // todo key will never be written here anymore only when user download
+//      if (!keyServedLocally) { // if key is not served locally, that means its sent from server so we need to save it
+//        KeyWriter.writeByteToFile(encryptionKeyChunk.getResult(), chunk.dataSpec.uri.toString()); // writing the key on the file below
+//      }
       setEncryptionData(encryptionKeyChunk.dataSpec.uri, encryptionKeyChunk.iv,
-          encryptionKeyChunk.getResult());
+              encryptionKeyChunk.getResult());
     }
   }
 
@@ -335,7 +339,28 @@ public void onChunkLoadCompleted(Chunk chunk) {
    */
   public boolean onChunkLoadError(Chunk chunk, boolean cancelable, IOException error) {
     return cancelable && ChunkedTrackBlacklistUtil.maybeBlacklistTrack(trackSelection,
-        trackSelection.indexOf(trackGroup.indexOf(chunk.trackFormat)), error);
+            trackSelection.indexOf(trackGroup.indexOf(chunk.trackFormat)), error);
+  }
+
+
+  /** hisham - custom method
+   * Called when the {@link HlsSampleStreamWrapper} encounters an error loading a chunk obtained
+   * from this source.
+   *
+   * @param chunk The chunk whose load encountered the error.
+   * @param cancelable Whether the load can be canceled.
+   * @param error The error.
+   * @return Whether the load should be canceled.
+   */
+  public boolean onChunkLoadServedLocally(Chunk chunk, boolean cancelable, IOException error) {
+    // if error in loading key, try the local persisted key if exists
+    byte[] keyBytes = KeyWriter.readByteToFileEncryptedData(chunk.dataSpec.uri.toString());
+    if (keyBytes != null && chunk instanceof EncryptionKeyChunk) {
+      ((EncryptionKeyChunk) chunk).result = keyBytes;
+      onChunkLoadCompleted(chunk, true);
+      return true;
+    }
+    return false;
   }
 
   /**
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
index 0b6d1863bd..a04a898f0f 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
@@ -483,7 +483,7 @@ public long getNextLoadPositionUs() {
 
   @Override
   public void onLoadCompleted(Chunk loadable, long elapsedRealtimeMs, long loadDurationMs) {
-    chunkSource.onChunkLoadCompleted(loadable);
+    chunkSource.onChunkLoadCompleted(loadable, false);
     eventDispatcher.loadCompleted(loadable.dataSpec, loadable.type, trackType, loadable.trackFormat,
         loadable.trackSelectionReason, loadable.trackSelectionData, loadable.startTimeUs,
         loadable.endTimeUs, elapsedRealtimeMs, loadDurationMs, loadable.bytesLoaded());
@@ -515,6 +515,12 @@ public int onLoadError(Chunk loadable, long elapsedRealtimeMs, long loadDuration
     boolean isMediaChunk = isMediaChunk(loadable);
     boolean cancelable = !isMediaChunk || bytesLoaded == 0;
     boolean canceled = false;
+
+    if(chunkSource.onChunkLoadServedLocally(loadable, cancelable, error)){  // check if we can load the key of this video from saved keys, if yes, it dint fail.
+      onLoadCompleted(loadable, elapsedRealtimeMs, loadDurationMs);
+      return Loader.DONT_RETRY;
+    }
+
     if (chunkSource.onChunkLoadError(loadable, cancelable, error)) {
       if (isMediaChunk) {
         HlsMediaChunk removed = mediaChunks.removeLast();
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/KeyWriter.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/KeyWriter.java
new file mode 100644
index 0000000000..f4006e9d39
--- /dev/null
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/KeyWriter.java
@@ -0,0 +1,142 @@
+package com.google.android.exoplayer2.source.hls;
+
+
+import android.os.Environment;
+import android.util.Log;
+import android.widget.Toast;
+
+import org.apache.commons.io.FileUtils;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLDecoder;
+import java.security.Key;
+import java.util.Arrays;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+import javax.crypto.Cipher;
+import javax.crypto.spec.SecretKeySpec;
+
+
+/**
+ * Created by Hisham on 05/Sep/2017 - 18:02
+ * USE: compile 'commons-io:commons-io:2.5'
+ */
+
+public class KeyWriter {
+
+    private static final String keyStoragePath = Environment.getExternalStorageDirectory() + "/voca/keys/";
+    private static final String TAG = KeyWriter.class.getSimpleName();
+    private static final String ALGO = "AES";
+    private static final byte[] keyValue = new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't',
+            'S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };
+
+
+    public static byte[] readByteToFileUnencryptedData(String serverFileUrl, File tempKeyPath) {
+        try {
+            tempKeyPath.mkdirs();
+            String videoId = getVideoIdFromUrl(serverFileUrl);
+            if (videoId != null) {
+                return FileUtils.readFileToByteArray(new File(tempKeyPath.getAbsolutePath())); // decrypting
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+
+    public static byte[] readByteToFileEncryptedData(String serverFileUrl) {
+        try {
+            File keyFile = new File(keyStoragePath);
+            keyFile.mkdirs();
+            String videoId = getVideoIdFromUrl(serverFileUrl);
+            if (videoId != null) {
+                byte[] decrypt = decrypt(FileUtils.readFileToByteArray(new File(keyFile.getAbsolutePath() + "/" + videoId)));
+                Log.d(TAG, "readByteToFileEncryptedData: read key from file: " + Arrays.toString(decrypt));
+                return decrypt; // decrypting
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public static void writeByteToFile(byte[] keyBytes, String serverFileUrl) {
+        try {
+            File keyFile = new File(keyStoragePath);
+            keyFile.mkdirs();
+            String videoId = getVideoIdFromUrl(serverFileUrl);
+            if (videoId != null){
+                byte[] encrypt = encrypt(keyBytes);
+                if (encrypt != null) {
+                    FileUtils.writeByteArrayToFile(new File(keyFile.getAbsolutePath() + "/" + videoId), encrypt);
+                    Log.d(TAG, "writeByteToFile: key written: " + Arrays.toString(keyBytes));
+                } else {
+                    Log.e(TAG, "writeByteToFile: after encryption data was null");
+                }
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static String getVideoIdFromUrl(String serverFileUrl) {
+        String videoId = null;
+        try {
+            Map<String, String> params = splitQuery(new URL(serverFileUrl));
+            if (params != null && params.size() > 0 && params.containsKey("videoId")) {
+                videoId = params.get("videoId");
+            }
+        } catch (UnsupportedEncodingException | MalformedURLException e) {
+            e.printStackTrace();
+        }
+        return videoId;
+    }
+
+
+    private static Map<String, String> splitQuery(URL url) throws UnsupportedEncodingException {
+        Map<String, String> query_pairs = new LinkedHashMap<String, String>();
+        String query = url.getQuery();
+        String[] pairs = query.split("&");
+        for (String pair : pairs) {
+            int idx = pair.indexOf("=");
+            query_pairs.put(URLDecoder.decode(pair.substring(0, idx), "UTF-8"), URLDecoder.decode(pair.substring(idx + 1), "UTF-8"));
+        }
+        return query_pairs;
+    }
+
+    private static byte[] encrypt(byte[] data) {
+        try {
+            Key key = generateKey();
+            Cipher c = Cipher.getInstance(ALGO);
+            c.init(Cipher.ENCRYPT_MODE, key);
+            //String encryptedValue = new BASE64Encoder().encode(encVal);
+            return c.doFinal(data);
+        } catch (Exception e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+
+    private static byte[] decrypt(byte[] encryptedData) {
+        try {
+            Key key = generateKey();
+            Cipher c = Cipher.getInstance(ALGO);
+            c.init(Cipher.DECRYPT_MODE, key);
+            return c.doFinal(encryptedData);
+        } catch (Exception e){
+            e.printStackTrace();
+            return null;
+        }
+    }
+
+    private static Key generateKey() throws Exception {
+        return new SecretKeySpec(keyValue, ALGO);
+    }
+
+}
