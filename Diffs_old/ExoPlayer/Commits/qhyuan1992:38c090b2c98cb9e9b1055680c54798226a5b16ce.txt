diff --git a/library/src/main/java/com/google/android/exoplayer/chunk/ChunkExtractorWrapper.java b/library/src/main/java/com/google/android/exoplayer/chunk/ChunkExtractorWrapper.java
index 8b48461fca..79436342ca 100644
--- a/library/src/main/java/com/google/android/exoplayer/chunk/ChunkExtractorWrapper.java
+++ b/library/src/main/java/com/google/android/exoplayer/chunk/ChunkExtractorWrapper.java
@@ -56,6 +56,7 @@
 
   // Accessed only on the loader thread.
   private boolean seenTrack;
+  private int seenTrackId;
 
   /**
    * @param extractor The extractor to wrap.
@@ -98,8 +99,9 @@ public int read(ExtractorInput input) throws IOException, InterruptedException {
 
   @Override
   public TrackOutput track(int id) {
-    Assertions.checkState(!seenTrack);
+    Assertions.checkState(!seenTrack || id == seenTrackId);
     seenTrack = true;
+    seenTrackId = id;
     return this;
   }
 
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/Extractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/Extractor.java
index cc3e04f35a..aa485b8096 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/Extractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/Extractor.java
@@ -42,7 +42,7 @@
   public static final int RESULT_END_OF_INPUT = C.RESULT_END_OF_INPUT;
 
   /**
-   * Initializes the extractor with an {@link ExtractorOutput}.
+   * Initializes the extractor with an {@link ExtractorOutput}. Called at most once.
    *
    * @param output An {@link ExtractorOutput} to receive extracted data.
    */
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ExtractorOutput.java b/library/src/main/java/com/google/android/exoplayer/extractor/ExtractorOutput.java
index 683d8d6ea9..51002bc8e4 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ExtractorOutput.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ExtractorOutput.java
@@ -23,12 +23,13 @@
 public interface ExtractorOutput {
 
   /**
-   * Invoked when the {@link Extractor} identifies the existence of a track in the stream.
+   * Called by the {@link Extractor} to get the {@link TrackOutput} for a specific track.
    * <p>
-   * Returns a {@link TrackOutput} that will receive track level data belonging to the track.
+   * The same {@link TrackOutput} is returned if multiple calls are made with the same
+   * {@code trackId}.
    *
    * @param trackId A track identifier.
-   * @return The {@link TrackOutput} that should receive track level data belonging to the track.
+   * @return The {@link TrackOutput} for the given track identifier.
    */
   TrackOutput track(int trackId);
 
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ts/TsExtractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/ts/TsExtractor.java
index 6487829d3b..8a6fbc5fb5 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ts/TsExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ts/TsExtractor.java
@@ -79,6 +79,7 @@
 
   // Accessed only by the loading thread.
   private ExtractorOutput output;
+  private boolean tracksEnded;
   private int nextEmbeddedTrackId;
   /* package */ Id3Reader id3Reader;
 
@@ -96,10 +97,9 @@ public TsExtractor(PtsTimestampAdjuster ptsTimestampAdjuster, int workaroundFlag
     tsPacketBuffer = new ParsableByteArray(BUFFER_SIZE);
     tsScratch = new ParsableBitArray(new byte[3]);
     tsPayloadReaders = new SparseArray<>();
-    tsPayloadReaders.put(TS_PAT_PID, new PatReader());
     trackIds = new SparseBooleanArray();
-    nextEmbeddedTrackId = BASE_EMBEDDED_TRACK_ID;
     continuityCounters = new SparseIntArray();
+    resetPayloadReaders();
   }
 
   // Extractor implementation.
@@ -131,11 +131,10 @@ public void init(ExtractorOutput output) {
   @Override
   public void seek() {
     ptsTimestampAdjuster.reset();
-    for (int i = 0; i < tsPayloadReaders.size(); i++) {
-      tsPayloadReaders.valueAt(i).seek();
-    }
     tsPacketBuffer.reset();
     continuityCounters.clear();
+    // Elementary stream readers' state should be cleared to get consistent behaviours when seeking.
+    resetPayloadReaders();
   }
 
   @Override
@@ -230,6 +229,14 @@ public int read(ExtractorInput input, PositionHolder seekPosition)
 
   // Internals.
 
+  private void resetPayloadReaders() {
+    trackIds.clear();
+    tsPayloadReaders.clear();
+    tsPayloadReaders.put(TS_PAT_PID, new PatReader());
+    id3Reader = null;
+    nextEmbeddedTrackId = BASE_EMBEDDED_TRACK_ID;
+  }
+
   /**
    * Parses TS packet payload data.
    */
@@ -323,7 +330,7 @@ public void consume(ParsableByteArray data, boolean payloadUnitStartIndicator,
           patScratch.skipBits(13); // network_PID (13)
         } else {
           int pid = patScratch.readBits(13);
-          tsPayloadReaders.put(pid, new PmtReader());
+          tsPayloadReaders.put(pid, new PmtReader(pid));
         }
       }
 
@@ -339,14 +346,16 @@ public void consume(ParsableByteArray data, boolean payloadUnitStartIndicator,
 
     private final ParsableBitArray pmtScratch;
     private final ParsableByteArray sectionData;
+    private final int pid;
 
     private int sectionLength;
     private int sectionBytesRead;
     private int crc;
 
-    public PmtReader() {
+    public PmtReader(int pid) {
       pmtScratch = new ParsableBitArray(new byte[5]);
       sectionData = new ParsableByteArray();
+      this.pid = pid;
     }
 
     @Override
@@ -479,8 +488,16 @@ public void consume(ParsableByteArray data, boolean payloadUnitStartIndicator,
               new PesReader(pesPayloadReader, ptsTimestampAdjuster));
         }
       }
-
-      output.endTracks();
+      if ((workaroundFlags & WORKAROUND_MAP_BY_TYPE) != 0) {
+       if (!tracksEnded) {
+         output.endTracks();
+       }
+      } else {
+        tsPayloadReaders.remove(TS_PAT_PID);
+        tsPayloadReaders.remove(pid);
+        output.endTracks();
+      }
+      tracksEnded = true;
     }
 
     /**
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/HlsExtractorWrapper.java b/library/src/main/java/com/google/android/exoplayer/hls/HlsExtractorWrapper.java
index dda93bc649..459362c58a 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/HlsExtractorWrapper.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/HlsExtractorWrapper.java
@@ -253,9 +253,13 @@ public long getAdjustedEndTimeUs() {
 
   @Override
   public TrackOutput track(int id) {
-    DefaultTrackOutput sampleQueue = new DefaultTrackOutput(allocator);
-    sampleQueues.put(id, sampleQueue);
-    return sampleQueue;
+    DefaultTrackOutput trackOutput = sampleQueues.get(id);
+    if (trackOutput != null) {
+      return trackOutput;
+    }
+    trackOutput = new DefaultTrackOutput(allocator);
+    sampleQueues.put(id, trackOutput);
+    return trackOutput;
   }
 
   @Override
