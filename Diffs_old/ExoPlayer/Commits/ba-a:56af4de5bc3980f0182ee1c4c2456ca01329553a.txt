diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
index fa3c7d401a..94a24cb313 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
@@ -188,17 +188,19 @@ public void onResume() {
   @Override
   public void onPause() {
     super.onPause();
-    if (Util.SDK_INT <= 23) {
-      releasePlayer();
-    }
+    // Don' release player for testing purposes
+    //if (Util.SDK_INT <= 23) {
+    //  releasePlayer();
+    // }
   }
 
   @Override
   public void onStop() {
     super.onStop();
-    if (Util.SDK_INT > 23) {
-      releasePlayer();
-    }
+    // Don' release player for testing purposes
+    //if (Util.SDK_INT > 23) {
+    //  releasePlayer();
+    //}
   }
 
   @Override
diff --git a/library/ui/src/main/java/com/google/android/exoplayer2/ui/SimpleExoPlayerView.java b/library/ui/src/main/java/com/google/android/exoplayer2/ui/SimpleExoPlayerView.java
index 1f67b83ba0..f069931b2e 100644
--- a/library/ui/src/main/java/com/google/android/exoplayer2/ui/SimpleExoPlayerView.java
+++ b/library/ui/src/main/java/com/google/android/exoplayer2/ui/SimpleExoPlayerView.java
@@ -53,6 +53,8 @@
 import com.google.android.exoplayer2.util.Util;
 import java.util.List;
 
+import static com.google.android.exoplayer2.Player.STATE_READY;
+
 /**
  * A high level view for {@link SimpleExoPlayer} media playbacks. It displays video, subtitles and
  * album art during playback, and displays playback controls using a {@link PlaybackControlView}.
@@ -314,11 +316,14 @@ public SimpleExoPlayerView(Context context, AttributeSet attrs, int defStyleAttr
     // Create a surface view and insert it into the content frame, if there is one.
     if (contentFrame != null && surfaceType != SURFACE_TYPE_NONE) {
       ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(
-          ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
-      surfaceView = surfaceType == SURFACE_TYPE_TEXTURE_VIEW ? new TextureView(context)
-          : new SurfaceView(context);
+              ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+      // For testing we just use a SurfaceView here, ANR doesn't appear for a TextureView
+      surfaceView = new SurfaceView(context);
       surfaceView.setLayoutParams(params);
       contentFrame.addView(surfaceView, 0);
+
+      // Hide the surface view until the player is ready (Bug exists as well if set to INVISIBLE)
+      surfaceView.setVisibility(View.GONE);
     } else {
       surfaceView = null;
     }
@@ -968,6 +973,11 @@ public void onTracksChanged(TrackGroupArray tracks, TrackSelectionArray selectio
 
     @Override
     public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
+      // Set the surface view to visible when the player is ready.
+      if(playbackState == STATE_READY)
+        surfaceView.setVisibility(View.VISIBLE);
+
+
       if (isPlayingAd() && controllerHideDuringAds) {
         hideController();
       } else {
