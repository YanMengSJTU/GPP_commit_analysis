diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadActivity.java
index 1a8a11472f..b042c3e4ac 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadActivity.java
@@ -16,6 +16,8 @@
 import com.google.android.exoplayer2.source.dash.manifest.RepresentationKey;
 
 import static com.google.android.exoplayer2.demo.LocalBroadcastHelper.DOWNLOADING;
+import static com.google.android.exoplayer2.demo.offline.DownloadService.ACTION_PAUSE;
+import static com.google.android.exoplayer2.demo.offline.DownloadService.ACTION_START;
 import static com.google.android.exoplayer2.demo.offline.DownloadService.ACTION_STOP;
 
 /**
@@ -63,6 +65,14 @@ public void onClick(View v) {
             }
         });
 
+        Button btnResumeDownload = findViewById(R.id.btn_resume_download);
+        btnResumeDownload.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                resumeDownload();
+            }
+        });
+
         txtStatus = findViewById(R.id.txt_status);
 
     }
@@ -94,7 +104,14 @@ private void cancelDownload() {
     private void pauseDownload() {
 
         Intent intent = new Intent(this, ExoDownloadService.class)
-                .setAction(ACTION_STOP);
+                .setAction(ACTION_PAUSE);
+        startService(intent);
+    }
+
+    private void resumeDownload() {
+
+        Intent intent = new Intent(this, ExoDownloadService.class)
+                .setAction(ACTION_START);
         startService(intent);
     }
 
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/offline/ProgressiveDownloadAction.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/offline/ProgressiveDownloadAction.java
deleted file mode 100644
index dd1bae54ca..0000000000
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/offline/ProgressiveDownloadAction.java
+++ /dev/null
@@ -1,132 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.demo.offline;
-
-import android.net.Uri;
-import android.support.annotation.Nullable;
-
-import com.google.android.exoplayer2.offline.DownloaderConstructorHelper;
-import com.google.android.exoplayer2.offline.ProgressiveDownloader;
-import com.google.android.exoplayer2.upstream.cache.CacheUtil;
-import com.google.android.exoplayer2.util.Assertions;
-import com.google.android.exoplayer2.util.Util;
-
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.IOException;
-
-/**
- * An action to download or remove downloaded progressive streams.
- */
-public final class ProgressiveDownloadAction extends DownloadAction {
-
-    public static final Deserializer DESERIALIZER = new Deserializer() {
-
-        @Override
-        public String getType() {
-            return TYPE;
-        }
-
-        @Override
-        public ProgressiveDownloadAction readFromStream(int version, DataInputStream input)
-                throws IOException {
-            return new ProgressiveDownloadAction(input.readUTF(),
-                    input.readBoolean() ? input.readUTF() : null, input.readBoolean(), input.readUTF());
-        }
-
-    };
-
-    private static final String TYPE = "ProgressiveDownloadAction";
-
-    private final String uri;
-    private final @Nullable
-    String customCacheKey;
-    private final boolean removeAction;
-
-    /**
-     * @param uri            Uri of the data to be downloaded.
-     * @param customCacheKey A custom key that uniquely identifies the original stream. If not null it
-     *                       is used for cache indexing.
-     * @param removeAction   Whether the data should be downloaded or removed.
-     * @param data           Optional custom data for this action. If null, an empty string is used.
-     */
-    public ProgressiveDownloadAction(
-            String uri, @Nullable String customCacheKey, boolean removeAction, @Nullable String data) {
-        super(data);
-        this.uri = Assertions.checkNotNull(uri);
-        this.customCacheKey = customCacheKey;
-        this.removeAction = removeAction;
-    }
-
-    @Override
-    public boolean isRemoveAction() {
-        return removeAction;
-    }
-
-    @Override
-    protected ProgressiveDownloader createDownloader(DownloaderConstructorHelper constructorHelper) {
-        return new ProgressiveDownloader(uri, customCacheKey, constructorHelper);
-    }
-
-    @Override
-    protected String getType() {
-        return TYPE;
-    }
-
-    @Override
-    protected void writeToStream(DataOutputStream output) throws IOException {
-        output.writeUTF(uri);
-        boolean customCacheKeyAvailable = customCacheKey != null;
-        output.writeBoolean(customCacheKeyAvailable);
-        if (customCacheKeyAvailable) {
-            output.writeUTF(customCacheKey);
-        }
-        output.writeBoolean(isRemoveAction());
-        output.writeUTF(getData());
-    }
-
-    @Override
-    protected boolean isSameMedia(DownloadAction other) {
-        if (!(other instanceof ProgressiveDownloadAction)) {
-            return false;
-        }
-        return getCacheKey().equals(((ProgressiveDownloadAction) other).getCacheKey());
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) {
-            return true;
-        }
-        if (!super.equals(o)) {
-            return false;
-        }
-        ProgressiveDownloadAction that = (ProgressiveDownloadAction) o;
-        return uri.equals(that.uri) && Util.areEqual(customCacheKey, that.customCacheKey);
-    }
-
-    @Override
-    public int hashCode() {
-        int result = super.hashCode();
-        result = 31 * result + uri.hashCode();
-        result = 31 * result + (customCacheKey != null ? customCacheKey.hashCode() : 0);
-        return result;
-    }
-
-    private String getCacheKey() {
-        return customCacheKey != null ? customCacheKey : CacheUtil.generateKey(Uri.parse(uri));
-    }
-}
diff --git a/demos/main/src/main/res/layout/download_activity.xml b/demos/main/src/main/res/layout/download_activity.xml
index 1915d33729..8da851c9e7 100644
--- a/demos/main/src/main/res/layout/download_activity.xml
+++ b/demos/main/src/main/res/layout/download_activity.xml
@@ -22,6 +22,12 @@
         android:layout_height="50dp"
         android:text="Pause Download" />
 
+    <Button
+        android:id="@+id/btn_resume_download"
+        android:layout_width="wrap_content"
+        android:layout_height="50dp"
+        android:text="Resume Download" />
+
     <TextView
         android:id="@+id/txt_status"
         android:layout_width="wrap_content"
