diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Atom.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Atom.java
index 2e84eb86e3..afb1bfd161 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Atom.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Atom.java
@@ -123,6 +123,7 @@
   public static final int TYPE_mean = Util.getIntegerCodeForString("mean");
   public static final int TYPE_name = Util.getIntegerCodeForString("name");
   public static final int TYPE_data = Util.getIntegerCodeForString("data");
+  public static final int TYPE_emsg = Util.getIntegerCodeForString("emsg");
   public static final int TYPE_DASHES = Util.getIntegerCodeForString("----");
 
   public final int type;
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java
index 3104a19dea..1b7a04a1ea 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java
@@ -47,7 +47,7 @@
 /**
  * Facilitates the extraction of data from the fragmented mp4 container format.
  */
-public final class FragmentedMp4Extractor implements Extractor {
+public class FragmentedMp4Extractor implements Extractor {
 
   private static final String TAG = "FragmentedMp4Extractor";
 
@@ -146,12 +146,12 @@ public FragmentedMp4Extractor(int flags, Track sideloadedTrack) {
   }
 
   @Override
-  public boolean sniff(ExtractorInput input) throws IOException, InterruptedException {
+  public final boolean sniff(ExtractorInput input) throws IOException, InterruptedException {
     return Sniffer.sniffFragmented(input);
   }
 
   @Override
-  public void init(ExtractorOutput output) {
+  public final void init(ExtractorOutput output) {
     extractorOutput = output;
     if (sideloadedTrack != null) {
       TrackBundle bundle = new TrackBundle(output.track(0));
@@ -162,7 +162,7 @@ public void init(ExtractorOutput output) {
   }
 
   @Override
-  public void seek() {
+  public final void seek() {
     int trackCount = trackBundles.size();
     for (int i = 0; i < trackCount; i++) {
       trackBundles.valueAt(i).reset();
@@ -172,12 +172,12 @@ public void seek() {
   }
 
   @Override
-  public void release() {
+  public final void release() {
     // Do nothing
   }
 
   @Override
-  public int read(ExtractorInput input, PositionHolder seekPosition)
+  public final int read(ExtractorInput input, PositionHolder seekPosition)
       throws IOException, InterruptedException {
     while (true) {
       switch (parserState) {
@@ -302,6 +302,8 @@ private void onLeafAtomRead(LeafAtom leaf, long inputPosition) throws ParserExce
       ChunkIndex segmentIndex = parseSidx(leaf.data, inputPosition);
       extractorOutput.seekMap(segmentIndex);
       haveOutputSeekMap = true;
+    } else if (leaf.type == Atom.TYPE_emsg) {
+      parseEmsg(leaf.data, inputPosition);
     }
   }
 
@@ -719,6 +721,10 @@ private static void parseSenc(ParsableByteArray senc, int offset, TrackFragment
     out.fillEncryptionData(senc);
   }
 
+  protected void parseEmsg(ParsableByteArray atom, long inputPosition) throws ParserException {
+    // Do nothing.
+  }
+
   /**
    * Parses a sidx atom (defined in 14496-12).
    */
@@ -975,7 +981,7 @@ private static boolean shouldParseLeafAtom(int atom) {
         || atom == Atom.TYPE_tfhd || atom == Atom.TYPE_tkhd || atom == Atom.TYPE_trex
         || atom == Atom.TYPE_trun || atom == Atom.TYPE_pssh || atom == Atom.TYPE_saiz
         || atom == Atom.TYPE_saio || atom == Atom.TYPE_senc || atom == Atom.TYPE_uuid
-        || atom == Atom.TYPE_elst || atom == Atom.TYPE_mehd;
+        || atom == Atom.TYPE_elst || atom == Atom.TYPE_mehd || atom == Atom.TYPE_emsg;
   }
 
   /** Returns whether the extractor should parse a container atom with type {@code atom}. */
diff --git a/library/src/main/java/com/google/android/exoplayer/util/ParsableByteArray.java b/library/src/main/java/com/google/android/exoplayer/util/ParsableByteArray.java
index ce6636471e..63f9af1ea4 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/ParsableByteArray.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/ParsableByteArray.java
@@ -396,6 +396,29 @@ public String readLine() {
     return line;
   }
 
+  /**
+   * Reads a null-terminated string using the default character set.
+   * @return A String, not including any null characters, or null if the end of the stream has
+   *     been reached.
+   */
+  public String readNullTerminatedString() {
+    if (bytesLeft() == 0) {
+      return null;
+    }
+    int stringLimit = position;
+    while (stringLimit < limit && data[stringLimit] != 0) {
+      stringLimit++;
+    }
+    final int length = stringLimit - position;
+    String result = new String(data, position, length, Charset.defaultCharset());
+    position = stringLimit;
+    if (position == limit) {
+      return result;
+    }
+    position++;
+    return result;
+  }
+
   /**
    * Reads a long value encoded by UTF-8 encoding
    * @throws NumberFormatException if there is a problem with decoding
