diff --git a/README.md b/README.md
index f1499b23dd..15a87a915c 100644
--- a/README.md
+++ b/README.md
@@ -55,7 +55,7 @@ accompanying demo application. To get started:
 
 ## Using Gradle ##
 
-ExoPlayer can also be built using Gradle. You can include it as a dependent project and build from source. e.g.
+ExoPlayer can also be built using Gradle. You can include it as a dependent project and build from source:
 
 ```
 // settings.gradle
@@ -74,3 +74,11 @@ If you want to use ExoPlayer as a jar, run:
 ```
 
 and copy library.jar to the libs-folder of your new project.
+
+The project is also available on [jCenter](https://bintray.com/google/exoplayer/exoplayer/view):
+
+```
+compile 'com.google.android.exoplayer:exoplayer:rX.X.X'
+```
+
+Where `rX.X.X` should be replaced with the desired version.
diff --git a/RELEASENOTES.md b/RELEASENOTES.md
index 1dfc9ac394..0c1009f791 100644
--- a/RELEASENOTES.md
+++ b/RELEASENOTES.md
@@ -1,5 +1,10 @@
 # Release notes #
 
+### r1.3.3 ###
+
+* HLS: Fix failure when playing HLS AAC streams.
+* Misc bug fixes.
+
 ### r1.3.2 ###
 
 * DataSource improvements: `DefaultUriDataSource` now handles http://, https://, file://, asset://
diff --git a/demo/src/main/AndroidManifest.xml b/demo/src/main/AndroidManifest.xml
index 2c0158c23f..6ee2474b80 100644
--- a/demo/src/main/AndroidManifest.xml
+++ b/demo/src/main/AndroidManifest.xml
@@ -16,8 +16,8 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.google.android.exoplayer.demo"
-    android:versionCode="1302"
-    android:versionName="1.3.2"
+    android:versionCode="1303"
+    android:versionName="1.3.3"
     android:theme="@style/RootTheme">
 
   <uses-permission android:name="android.permission.INTERNET"/>
diff --git a/library/build.gradle b/library/build.gradle
index 674bf50de1..6673253faa 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -74,7 +74,7 @@ publish {
     userOrg = 'google'
     groupId = 'com.google.android.exoplayer'
     artifactId = 'exoplayer'
-    version = 'r1.3.2'
+    version = 'r1.3.3'
     description = 'The ExoPlayer library.'
     website = 'https://github.com/google/ExoPlayer'
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/ExoPlayerLibraryInfo.java b/library/src/main/java/com/google/android/exoplayer/ExoPlayerLibraryInfo.java
index af7decdbd8..6830b3f33b 100644
--- a/library/src/main/java/com/google/android/exoplayer/ExoPlayerLibraryInfo.java
+++ b/library/src/main/java/com/google/android/exoplayer/ExoPlayerLibraryInfo.java
@@ -26,7 +26,7 @@ private ExoPlayerLibraryInfo() {}
   /**
    * The version of the library, expressed as a string.
    */
-  public static final String VERSION = "1.3.2";
+  public static final String VERSION = "1.3.3";
 
   /**
    * The version of the library, expressed as an integer.
@@ -34,7 +34,7 @@ private ExoPlayerLibraryInfo() {}
    * Three digits are used for each component of {@link #VERSION}. For example "1.2.3" has the
    * corresponding integer version 001002003.
    */
-  public static final int VERSION_INT = 001003002;
+  public static final int VERSION_INT = 001003003;
 
   /**
    * Whether the library was compiled with {@link com.google.android.exoplayer.util.Assertions}
diff --git a/library/src/main/java/com/google/android/exoplayer/audio/AudioTrack.java b/library/src/main/java/com/google/android/exoplayer/audio/AudioTrack.java
index a5bc408751..c973a2cd2f 100644
--- a/library/src/main/java/com/google/android/exoplayer/audio/AudioTrack.java
+++ b/library/src/main/java/com/google/android/exoplayer/audio/AudioTrack.java
@@ -449,7 +449,7 @@ public int handleBuffer(ByteBuffer buffer, int offset, int size, long presentati
       // This is the first time we've seen this {@code buffer}.
       // Note: presentationTimeUs corresponds to the end of the sample, not the start.
       long bufferStartTime = presentationTimeUs - framesToDurationUs(bytesToFrames(size));
-      if (startMediaTimeUs == START_NOT_SET) {
+      if (startMediaTimeState == START_NOT_SET) {
         startMediaTimeUs = Math.max(0, bufferStartTime);
         startMediaTimeState = START_IN_SYNC;
       } else {
@@ -573,7 +573,7 @@ public void reset() {
     if (isInitialized()) {
       submittedBytes = 0;
       temporaryBufferSize = 0;
-      startMediaTimeUs = START_NOT_SET;
+      startMediaTimeState = START_NOT_SET;
       latencyUs = 0;
       resetSyncParams();
       int playState = audioTrack.getPlayState();
@@ -623,7 +623,7 @@ public void run() {
 
   /** Returns whether {@link #getCurrentPositionUs} can return the current playback position. */
   private boolean hasCurrentPositionUs() {
-    return isInitialized() && startMediaTimeUs != START_NOT_SET;
+    return isInitialized() && startMediaTimeState != START_NOT_SET;
   }
 
   /** Updates the audio track latency and playback position parameters. */
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/HlsExtractorWrapper.java b/library/src/main/java/com/google/android/exoplayer/hls/HlsExtractorWrapper.java
index b189a12bd2..f6c784a5e3 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/HlsExtractorWrapper.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/HlsExtractorWrapper.java
@@ -61,7 +61,6 @@ public HlsExtractorWrapper(int trigger, Format format, long startTimeUs, Extract
     this.extractor = extractor;
     this.shouldSpliceIn = shouldSpliceIn;
     sampleQueues = new SparseArray<DefaultTrackOutput>();
-    extractor.init(this);
   }
 
   /**
@@ -71,6 +70,7 @@ public HlsExtractorWrapper(int trigger, Format format, long startTimeUs, Extract
    */
   public void init(Allocator allocator) {
     this.allocator = allocator;
+    this.extractor.init(this);
   }
 
   /**
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/HlsPlaylistParser.java b/library/src/main/java/com/google/android/exoplayer/hls/HlsPlaylistParser.java
index 4d0b163cb0..3ac98a07af 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/HlsPlaylistParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/HlsPlaylistParser.java
@@ -72,7 +72,7 @@
   private static final Pattern CODECS_ATTR_REGEX =
       Pattern.compile(CODECS_ATTR + "=\"(.+?)\"");
   private static final Pattern RESOLUTION_ATTR_REGEX =
-      Pattern.compile(RESOLUTION_ATTR + "=(\\d+(\\.\\d+)?x\\d+(\\.\\d+)?)");
+      Pattern.compile(RESOLUTION_ATTR + "=(\\d+x\\d+)");
   private static final Pattern MEDIA_DURATION_REGEX =
       Pattern.compile(MEDIA_DURATION_TAG + ":([\\d.]+),");
   private static final Pattern MEDIA_SEQUENCE_REGEX =
@@ -168,12 +168,12 @@ private static HlsMasterPlaylist parseMasterPlaylist(LineIterator iterator, Stri
             RESOLUTION_ATTR_REGEX);
         if (resolutionString != null) {
           String[] widthAndHeight = resolutionString.split("x");
-          width = Math.round(Float.parseFloat(widthAndHeight[0]));
+          width = Integer.parseInt(widthAndHeight[0]);
           if (width <= 0) {
             // Width was invalid.
             width = -1;
           }
-          height = Math.round(Float.parseFloat(widthAndHeight[1]));
+          height = Integer.parseInt(widthAndHeight[1]);
           if (height <= 0) {
             // Height was invalid.
             height = -1;
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/DefaultUriDataSource.java b/library/src/main/java/com/google/android/exoplayer/upstream/DefaultUriDataSource.java
index e3cbb7b84d..63f9023cc9 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/DefaultUriDataSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/DefaultUriDataSource.java
@@ -36,28 +36,6 @@
  */
 public final class DefaultUriDataSource implements UriDataSource {
 
-  /**
-   * Thrown when a {@link DefaultUriDataSource} is opened for a URI with an unsupported scheme.
-   */
-  public static final class UnsupportedSchemeException extends IOException {
-
-    /**
-     * The unsupported scheme.
-     */
-    public final String scheme;
-
-    /**
-     * @param scheme The unsupported scheme.
-     */
-    public UnsupportedSchemeException(String scheme) {
-      super("Unsupported URI scheme: " + scheme);
-      this.scheme = scheme;
-    }
-
-  }
-
-  private static final String SCHEME_HTTP = "http";
-  private static final String SCHEME_HTTPS = "https";
   private static final String SCHEME_FILE = "file";
   private static final String SCHEME_ASSET = "asset";
   private static final String SCHEME_CONTENT = "content";
@@ -141,9 +119,7 @@ public long open(DataSpec dataSpec) throws IOException {
     Assertions.checkState(dataSource == null);
     // Choose the correct source for the scheme.
     String scheme = dataSpec.uri.getScheme();
-    if (SCHEME_HTTP.equals(scheme) || SCHEME_HTTPS.equals(scheme)) {
-      dataSource = httpDataSource;
-    } else if (SCHEME_FILE.equals(scheme) || TextUtils.isEmpty(scheme)) {
+    if (SCHEME_FILE.equals(scheme) || TextUtils.isEmpty(scheme)) {
       if (dataSpec.uri.getPath().startsWith("/android_asset/")) {
         dataSource = assetDataSource;
       } else {
@@ -154,7 +130,7 @@ public long open(DataSpec dataSpec) throws IOException {
     } else if (SCHEME_CONTENT.equals(scheme)) {
       dataSource = contentDataSource;
     } else {
-      throw new UnsupportedSchemeException(scheme);
+      dataSource = httpDataSource;
     }
     // Open the source and return.
     return dataSource.open(dataSpec);
