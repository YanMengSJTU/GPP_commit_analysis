diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/SampleSizeBoxTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/SampleSizeBoxTest.java
new file mode 100644
index 0000000000..388f3fcacb
--- /dev/null
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/SampleSizeBoxTest.java
@@ -0,0 +1,45 @@
+package com.google.android.exoplayer.extractor.mp4;
+
+import com.google.android.exoplayer.util.ParsableByteArray;
+import com.google.android.exoplayer.util.Util;
+
+import junit.framework.TestCase;
+
+public class SampleSizeBoxTest extends TestCase {
+    final String ATOM_HEADER = "000000000000000000000000";
+    final String SAMPLE_COUNT = "00000004";
+    final byte[] FOUR_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000004"
+            + SAMPLE_COUNT + "1234");
+    final byte[] EIGHT_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000008"
+            + SAMPLE_COUNT + "01020304");
+    final byte[] SIXTEEN_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000010"
+            + SAMPLE_COUNT + "0001000200030004");
+
+    public void testStz2Parsing4BitFieldSize() {
+        final Atom.LeafAtom stz2Atom = new Atom.LeafAtom(Atom.TYPE_stsz,
+                new ParsableByteArray(FOUR_BIT_STZ2));
+        verifyParsing(stz2Atom);
+    }
+
+    public void testStz2Parsing8BitFieldSize() {
+        final Atom.LeafAtom stz2Atom = new Atom.LeafAtom(Atom.TYPE_stsz,
+                new ParsableByteArray(EIGHT_BIT_STZ2));
+        verifyParsing(stz2Atom);
+    }
+
+    public void testStz2Parsing16BitFieldSize() {
+        final Atom.LeafAtom stz2Atom = new Atom.LeafAtom(Atom.TYPE_stsz,
+                new ParsableByteArray(SIXTEEN_BIT_STZ2));
+        verifyParsing(stz2Atom);
+    }
+
+    private void verifyParsing(Atom.LeafAtom stz2Atom) {
+        final AtomParsers.Stz2SampleSizeBox box = new AtomParsers.Stz2SampleSizeBox(stz2Atom);
+        assertEquals(4, box.getSampleCount());
+        assertFalse(box.isFixedSampleSize());
+
+        for (int i = 0; i < box.getSampleCount(); i++) {
+            assertEquals(i + 1, box.readNextSampleSize());
+        }
+    }
+}
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Atom.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Atom.java
index 1303086d00..938b1e3b86 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Atom.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Atom.java
@@ -111,6 +111,7 @@
   public static final int TYPE_ctts = Util.getIntegerCodeForString("ctts");
   public static final int TYPE_stsc = Util.getIntegerCodeForString("stsc");
   public static final int TYPE_stsz = Util.getIntegerCodeForString("stsz");
+  public static final int TYPE_stz2 = Util.getIntegerCodeForString("stz2");
   public static final int TYPE_stco = Util.getIntegerCodeForString("stco");
   public static final int TYPE_co64 = Util.getIntegerCodeForString("co64");
   public static final int TYPE_tx3g = Util.getIntegerCodeForString("tx3g");
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java
index 2687d5a96d..ace14c43d7 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java
@@ -91,7 +91,19 @@ public static Track parseTrak(Atom.ContainerAtom trak, Atom.LeafAtom mvhd, long
   public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAtom)
       throws ParserException {
     // Array of sample sizes.
-    ParsableByteArray stsz = stblAtom.getLeafAtomOfType(Atom.TYPE_stsz).data;
+    final SampleSizeBox sampleSizeBox;
+
+    final Atom.LeafAtom stszAtom = stblAtom.getLeafAtomOfType(Atom.TYPE_stsz);
+    if (stszAtom != null) {
+      sampleSizeBox = new StszSampleSizeBox(stszAtom);
+    } else {
+      final Atom.LeafAtom stz2Atom = stblAtom.getLeafAtomOfType(Atom.TYPE_stz2);
+      if (stz2Atom == null) {
+        throw new ParserException("Track has no sample table size information");
+      }
+
+      sampleSizeBox = new Stz2SampleSizeBox(stz2Atom);
+    }
 
     // Entries are byte offsets of chunks.
     boolean chunkOffsetsAreLongs = false;
@@ -112,10 +124,9 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
     Atom.LeafAtom cttsAtom = stblAtom.getLeafAtomOfType(Atom.TYPE_ctts);
     ParsableByteArray ctts = cttsAtom != null ? cttsAtom.data : null;
 
+    int sampleCount = sampleSizeBox.getSampleCount();
+
     // Skip full atom.
-    stsz.setPosition(Atom.FULL_HEADER_SIZE);
-    int fixedSampleSize = stsz.readUnsignedIntToInt();
-    int sampleCount = stsz.readUnsignedIntToInt();
     if (sampleCount == 0) {
       return new TrackSampleTable(new long[0], new int[0], 0, new long[0], new int[0]);
     }
@@ -152,8 +163,7 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
     }
 
     // True if we can rechunk fixed-sample-size data. Note that we only rechunk raw audio.
-    boolean isRechunkable =
-        fixedSampleSize != 0
+    boolean isRechunkable = sampleSizeBox.isFixedSampleSize()
         && MimeTypes.AUDIO_RAW.equals(track.mediaFormat.mimeType)
         && remainingTimestampDeltaChanges == 0
         && remainingTimestampOffsetChanges == 0
@@ -198,7 +208,8 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
         }
 
         offsets[i] = offset;
-        sizes[i] = fixedSampleSize == 0 ? stsz.readUnsignedIntToInt() : fixedSampleSize;
+        sizes[i] = sampleSizeBox.readNextSampleSize();
+
         if (sizes[i] > maximumSize) {
           maximumSize = sizes[i];
         }
@@ -248,7 +259,8 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
         chunkSampleCounts[chunkIterator.index] = chunkIterator.numSamples;
       }
       FixedSampleSizeRechunker.Results rechunkedResults = FixedSampleSizeRechunker.rechunk(
-          fixedSampleSize, chunkOffsetsBytes, chunkSampleCounts, timestampDeltaInTimeUnits);
+          sampleSizeBox.readNextSampleSize(), chunkOffsetsBytes, chunkSampleCounts,
+          timestampDeltaInTimeUnits);
       offsets = rechunkedResults.offsets;
       sizes = rechunkedResults.sizes;
       maximumSize = rechunkedResults.maximumSize;
@@ -888,7 +900,9 @@ private static void parseAudioSampleEntry(ParsableByteArray parent, int atomType
     }
   }
 
-  /** Returns the position of the esds box within a parent, or -1 if no esds box is found */
+  /**
+   * Returns the position of the esds box within a parent, or -1 if no esds box is found
+   */
   private static int findEsdsPosition(ParsableByteArray parent, int position, int size) {
     int childAtomPosition = parent.getPosition();
     while (childAtomPosition - position < size) {
@@ -904,7 +918,9 @@ private static int findEsdsPosition(ParsableByteArray parent, int position, int
     return -1;
   }
 
-  /** Returns codec-specific initialization data contained in an esds box. */
+  /**
+   * Returns codec-specific initialization data contained in an esds box.
+   */
   private static Pair<String, byte[]> parseEsdsFromParent(ParsableByteArray parent, int position) {
     parent.setPosition(position + Atom.HEADER_SIZE + 4);
     // Start of the ES_Descriptor (defined in 14496-1)
@@ -1049,7 +1065,9 @@ private static TrackEncryptionBox parseSchiFromParent(ParsableByteArray parent,
     return null;
   }
 
-  /** Parses the size of an expandable class, as specified by ISO 14496-1 subsection 8.3.3. */
+  /**
+   * Parses the size of an expandable class, as specified by ISO 14496-1 subsection 8.3.3.
+   */
   private static int parseExpandableClassSize(ParsableByteArray data) {
     int currentByte = data.readUnsignedByte();
     int size = currentByte & 0x7F;
@@ -1161,4 +1179,110 @@ public AvcCData(List<byte[]> initializationData, int nalUnitLengthFieldLength,
 
   }
 
+  /**
+   * Interface that allows us to abstract away the various implementations of sample size boxes.
+   * (IE: stsz and stz2)
+   */
+  interface SampleSizeBox {
+
+    /**
+     * @return the number of samples in this atom.
+     */
+    int getSampleCount();
+
+    /**
+     * @return the size for the next sample in the box.
+     */
+    int readNextSampleSize();
+
+    /**
+     * @return if this box holds samples of a fixed size.
+     */
+    boolean isFixedSampleSize();
+  }
+
+  /**
+   * Reads sample sizes out of a 'stsz' atom.
+   */
+  static final class StszSampleSizeBox implements SampleSizeBox {
+
+    public final int fixedSampleSize;
+    public final int sampleCount;
+    public final ParsableByteArray data;
+
+    public StszSampleSizeBox(Atom.LeafAtom stszAtom) {
+      data = stszAtom.data;
+      data.setPosition(Atom.FULL_HEADER_SIZE);
+      fixedSampleSize = data.readUnsignedIntToInt();
+      sampleCount = data.readUnsignedIntToInt();
+    }
+
+    @Override
+    public int getSampleCount() {
+      return sampleCount;
+    }
+
+    @Override
+    public int readNextSampleSize() {
+      return fixedSampleSize == 0 ? data.readUnsignedIntToInt() : fixedSampleSize;
+    }
+
+    @Override
+    public boolean isFixedSampleSize() {
+      return fixedSampleSize != 0;
+    }
+  }
+
+  /**
+   * Reads samples out of a 'stz2' atom.
+   */
+  static final class Stz2SampleSizeBox implements SampleSizeBox {
+
+    public final ParsableByteArray data;
+    public final int sampleCount;
+    public final int fieldSize;  // 4, 8, or 16.
+    private int mIndex = 0;     // Our current index in the samples.
+    private int mCurrentByte;  // used only for the 4 bit scenario.
+
+    public Stz2SampleSizeBox(Atom.LeafAtom stz2Atom) {
+      data = stz2Atom.data;
+      data.setPosition(Atom.FULL_HEADER_SIZE);
+      // mask out the reserved bits (24) and read just the field_size bits (8).
+      fieldSize = data.readUnsignedIntToInt() & 0x000000FF;
+      sampleCount = data.readUnsignedIntToInt();
+    }
+
+    @Override
+    public int getSampleCount() {
+      return sampleCount;
+    }
+
+    @Override
+    public int readNextSampleSize() {
+      final int i = mIndex++;
+      if (fieldSize == 8) {
+        return data.readUnsignedByte();
+      } else if (fieldSize == 16) {
+        return data.readUnsignedShort();
+      } else {
+        // The field size is 4.
+        final boolean isUpperBits = i % 2 == 0;
+        if (isUpperBits) {
+          // Read the next byte into our cached byte when we are reading the upper bits.
+          mCurrentByte = data.readUnsignedByte();
+          // Read the upper bits from the byte and shift them to the lower 4 bits.
+          return (mCurrentByte & 0xF0) >> 4;
+        } else {
+          // Mask out the upper 4 bits of the last byte we read.
+          return mCurrentByte & 0x0F;
+        }
+      }
+    }
+
+    @Override
+    public boolean isFixedSampleSize() {
+      return false;
+    }
+  }
+
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Mp4Extractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Mp4Extractor.java
index be3c6ef4f9..5df22494bf 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Mp4Extractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Mp4Extractor.java
@@ -444,8 +444,9 @@ private static boolean shouldParseLeafAtom(int atom) {
     return atom == Atom.TYPE_mdhd || atom == Atom.TYPE_mvhd || atom == Atom.TYPE_hdlr
         || atom == Atom.TYPE_stsd || atom == Atom.TYPE_stts || atom == Atom.TYPE_stss
         || atom == Atom.TYPE_ctts || atom == Atom.TYPE_elst || atom == Atom.TYPE_stsc
-        || atom == Atom.TYPE_stsz || atom == Atom.TYPE_stco || atom == Atom.TYPE_co64
-        || atom == Atom.TYPE_tkhd || atom == Atom.TYPE_ftyp || atom == Atom.TYPE_udta;
+        || atom == Atom.TYPE_stsz || atom == Atom.TYPE_stz2 || atom == Atom.TYPE_stco
+        || atom == Atom.TYPE_co64 || atom == Atom.TYPE_tkhd || atom == Atom.TYPE_ftyp
+        || atom == Atom.TYPE_udta;
   }
 
   /**
