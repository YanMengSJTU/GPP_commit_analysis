diff --git a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacDecoder.java b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacDecoder.java
index 0bfe3ccc14..b34f468615 100644
--- a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacDecoder.java
+++ b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacDecoder.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.ext.flac;
 
 import com.google.android.exoplayer.SampleHolder;
-import com.google.android.exoplayer.util.extensions.Buffer;
 import com.google.android.exoplayer.util.extensions.InputBuffer;
 import com.google.android.exoplayer.util.extensions.SimpleDecoder;
 
@@ -94,14 +93,6 @@ protected void releaseOutputBuffer(FlacOutputBuffer buffer) {
 
   @Override
   public FlacDecoderException decode(InputBuffer inputBuffer, FlacOutputBuffer outputBuffer) {
-    outputBuffer.reset();
-    if (inputBuffer.getFlag(Buffer.FLAG_END_OF_STREAM)) {
-      outputBuffer.setFlag(Buffer.FLAG_END_OF_STREAM);
-      return null;
-    }
-    if (inputBuffer.getFlag(Buffer.FLAG_DECODE_ONLY)) {
-      outputBuffer.setFlag(Buffer.FLAG_DECODE_ONLY);
-    }
     SampleHolder sampleHolder = inputBuffer.sampleHolder;
     outputBuffer.timestampUs = sampleHolder.timeUs;
     sampleHolder.data.position(sampleHolder.data.position() - sampleHolder.size);
diff --git a/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java b/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java
index 936444e573..9ad75f9e62 100644
--- a/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java
+++ b/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java
@@ -151,14 +151,6 @@ protected void releaseOutputBuffer(OpusOutputBuffer buffer) {
 
   @Override
   public OpusDecoderException decode(InputBuffer inputBuffer, OpusOutputBuffer outputBuffer) {
-    outputBuffer.reset();
-    if (inputBuffer.getFlag(Buffer.FLAG_END_OF_STREAM)) {
-      outputBuffer.setFlag(Buffer.FLAG_END_OF_STREAM);
-      return null;
-    }
-    if (inputBuffer.getFlag(Buffer.FLAG_DECODE_ONLY)) {
-      outputBuffer.setFlag(Buffer.FLAG_DECODE_ONLY);
-    }
     if (inputBuffer.getFlag(Buffer.FLAG_RESET)) {
       opusReset(nativeDecoderContext);
       // When seeking to 0, skip number of samples as specified in opus header. When seeking to
diff --git a/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxDecoder.java b/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxDecoder.java
index 1e0e8d5be7..4f8c845db8 100644
--- a/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxDecoder.java
+++ b/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxDecoder.java
@@ -101,11 +101,6 @@ protected void releaseOutputBuffer(VpxOutputBuffer buffer) {
 
   @Override
   protected VpxDecoderException decode(VpxInputBuffer inputBuffer, VpxOutputBuffer outputBuffer) {
-    outputBuffer.reset();
-    if (inputBuffer.getFlag(Buffer.FLAG_END_OF_STREAM)) {
-      outputBuffer.setFlag(Buffer.FLAG_END_OF_STREAM);
-      return null;
-    }
     SampleHolder sampleHolder = inputBuffer.sampleHolder;
     outputBuffer.timestampUs = sampleHolder.timeUs;
     sampleHolder.data.position(sampleHolder.data.position() - sampleHolder.size);
diff --git a/library/src/main/java/com/google/android/exoplayer/util/extensions/SimpleDecoder.java b/library/src/main/java/com/google/android/exoplayer/util/extensions/SimpleDecoder.java
index c6fe12eb24..b8455611aa 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/extensions/SimpleDecoder.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/extensions/SimpleDecoder.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer.util.extensions;
 
+import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.util.Assertions;
 
 import java.util.LinkedList;
@@ -219,16 +220,23 @@ private boolean decode() throws InterruptedException {
       flushDecodedOutputBuffer = false;
     }
 
-    exception = decode(inputBuffer, outputBuffer);
-    if (exception != null) {
-      // Memory barrier to ensure that the decoder exception is visible from the playback thread.
-      synchronized (lock) {}
-      return false;
+    outputBuffer.reset();
+    if (inputBuffer.getFlag(Buffer.FLAG_END_OF_STREAM)) {
+      outputBuffer.setFlag(Buffer.FLAG_END_OF_STREAM);
+    } else {
+      if (inputBuffer.getFlag(C.SAMPLE_FLAG_DECODE_ONLY)) {
+        outputBuffer.setFlag(C.SAMPLE_FLAG_DECODE_ONLY);
+      }
+      exception = decode(inputBuffer, outputBuffer);
+      if (exception != null) {
+        // Memory barrier to ensure that the decoder exception is visible from the playback thread.
+        synchronized (lock) {}
+        return false;
+      }
     }
 
-    boolean decodeOnly = outputBuffer.getFlag(Buffer.FLAG_DECODE_ONLY);
     synchronized (lock) {
-      if (flushDecodedOutputBuffer || decodeOnly) {
+      if (flushDecodedOutputBuffer || outputBuffer.getFlag(Buffer.FLAG_DECODE_ONLY)) {
         // If a flush occurred while decoding or the buffer was only for decoding (not presentation)
         // then make the output buffer available again rather than queueing it to be consumed.
         availableOutputBuffers[availableOutputBufferCount++] = outputBuffer;
@@ -261,10 +269,11 @@ private boolean canDecodeBuffer() {
    * Decodes the {@code inputBuffer} and stores any decoded output in {@code outputBuffer}.
    *
    * @param inputBuffer The buffer to decode.
-   * @param outputBuffer The output buffer to store decoded data. If the flag
-   *     {@link Buffer#FLAG_DECODE_ONLY} is set after this method returns, any output should not be
-   *     presented.
-   * @return A decode exception if an error occurred, or null if the decode was successful.
+   * @param outputBuffer The output buffer to store decoded data. The flag
+   *     {@link Buffer#FLAG_DECODE_ONLY} will be set if the same flag is set on {@code inputBuffer},
+   *     but the decoder may set/unset the flag if required. If the flag is set after this method
+   *     returns, any output should not be presented.
+   * @return A decoder exception if an error occurred, or null if decoding was successful.
    */
   protected abstract E decode(I inputBuffer, O outputBuffer);
 
