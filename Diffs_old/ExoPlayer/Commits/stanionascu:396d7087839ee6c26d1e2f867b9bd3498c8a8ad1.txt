diff --git a/demos/main/src/main/assets/media.exolist.json b/demos/main/src/main/assets/media.exolist.json
index bcb3ef4ad1..9725678c20 100644
--- a/demos/main/src/main/assets/media.exolist.json
+++ b/demos/main/src/main/assets/media.exolist.json
@@ -1,4 +1,38 @@
 [
+  {
+    "name": "Dolby Vision",
+    "samples": [
+      {
+        "name": "Glass Blowing @59.94fps: Dolby Vision Profile 5 FHD for iOS – Dolby Atmos",
+        "uri": "https://d3rlna7iyyu8wu.cloudfront.net/DolbyVision_Atmos/mp4/iOS_P5_GlassBlowing2_1920x1080%4059.94fps_15200kbps.mp4",
+        "extension": "mp4"
+      },
+      {
+        "name": "Glass Blowing @59.94fps: Dolby Vision Profile 5 UHD for iOS – Dolby Atmos",
+        "uri": "https://d3rlna7iyyu8wu.cloudfront.net/DolbyVision_Atmos/mp4/iOS_P5_GlassBlowing2_3840x2160%4059.94fps_15200kbps.mp4",
+        "extension": "mp4"
+      },
+      {
+        "name": "Glass Blowing @59.94fps: Dolby Vision Profile 8.1 FHD – Dolby Atmos",
+        "uri": "https://d3rlna7iyyu8wu.cloudfront.net/DolbyVision_Atmos/mp4/P81_GlassBlowing2_1920x1080%4059.94fps_15200kbps_fmp4.mp4",
+        "extension": "mp4"
+      },
+      {
+        "name": "Glass Blowing @59.94fps: Dolby Vision Profile 8.1 UHD – Dolby Atmos",
+        "uri": "https://d3rlna7iyyu8wu.cloudfront.net/DolbyVision_Atmos/mp4/P81_GlassBlowing2_3840x2160%4059.94fps_15200kbps_fmp4.mp4",
+        "extension": "mp4"
+      },
+      {
+        "name": "Glass Blowing @59.94fps: Dolby Vision Profile 5 – Dolby Atmos (HLS)",
+        "uri": "https://d3rlna7iyyu8wu.cloudfront.net/DolbyVision_Atmos/profile5_HLS/master.m3u8"
+      },
+      {
+        "name": "Glass Blowing @59.94fps: Dolby Vision Profile 8.1 – Dolby Atmos (MPEG DASH)",
+        "uri": "https://d3rlna7iyyu8wu.cloudfront.net/DolbyVision_Atmos/profile8.1_DASH/p8.1.mpd",
+        "extension": "mpd"
+      }
+    ]
+  },
   {
     "name": "YouTube DASH",
     "samples": [
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
index 6fb0ac6856..c468f5e0cd 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
@@ -897,11 +897,8 @@ private static void parseVideoSampleEntry(ParsableByteArray parent, int atomType
         out.nalUnitLengthFieldLength = hevcConfig.nalUnitLengthFieldLength;
       } else if (childAtomType == Atom.TYPE_dvcC || childAtomType == Atom.TYPE_dvvC) {
         DolbyVisionConfig dolbyVisionConfig = DolbyVisionConfig.parse(parent);
-        // TODO: Support profiles 4, 8 and 9 once we have a way to fall back to AVC/HEVC decoding.
-        if (dolbyVisionConfig != null && dolbyVisionConfig.profile == 5) {
-          codecs = dolbyVisionConfig.codecs;
-          mimeType = MimeTypes.VIDEO_DOLBY_VISION;
-        }
+        codecs = dolbyVisionConfig.codecs;
+        mimeType = MimeTypes.VIDEO_DOLBY_VISION;
       } else if (childAtomType == Atom.TYPE_vpcC) {
         Assertions.checkState(mimeType == null);
         mimeType = (atomType == Atom.TYPE_vp08) ? MimeTypes.VIDEO_VP8 : MimeTypes.VIDEO_VP9;
