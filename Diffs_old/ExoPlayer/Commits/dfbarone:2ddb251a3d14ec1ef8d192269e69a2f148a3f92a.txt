diff --git a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java
index 2b91dfff52..0b91cb6c1e 100644
--- a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java
+++ b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java
@@ -49,7 +49,7 @@ public DemoPlayerManager(Context context, View root) {
 
     /* Customizations in intializePlayer */
     setPlayerDependencies(
-        new CustomPlayerDependencies.Builder(
+        new SimplePlayerDependencies.Builder(
             new DemoDataSourceBuilder(),
             new DefaultMediaSourceBuilder()
         )
diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
index e42cf60f4a..72a91eb8d3 100644
--- a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
@@ -162,7 +162,7 @@ public void setPlayerDependencies(PlayerDependencies dependencies) {
         UUID uuid, String licenseUrl, String[] keyRequestPropertiesArray, boolean multiSession)
         throws UnsupportedDrmException;
 
-     void releaseMediaDrm();
+    void releaseMediaDrm();
   }
 
   /** Ads builder methods */
diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
index 913c27304b..cfbbc3f673 100644
--- a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
@@ -139,7 +139,7 @@ public SimpleExoPlayerManager(Context context, View view) {
       CookieHandler.setDefault(DEFAULT_COOKIE_MANAGER);
     }
 
-    setPlayerDependencies(new CustomPlayerDependencies.Builder(new DefaultDataSourceBuilder(),
+    setPlayerDependencies(new SimplePlayerDependencies.Builder(new DefaultDataSourceBuilder(),
         new DefaultMediaSourceBuilder()).build());
 
     if (getView() != null) {
@@ -178,6 +178,11 @@ public void setPlayerDependencies(PlayerDependencies dependencies) {
     mediaDataSourceFactory = dependencies.dataSourceBuilder().buildDataSourceFactory();
   }
 
+  @Override
+  public SimplePlayerDependencies playerDependencies() {
+    return (SimplePlayerDependencies) super.playerDependencies();
+  }
+
   // Activity lifecycle
   public boolean dispatchKeyEvent(KeyEvent event) {
     // See whether the player view wants to handle media or DPAD keys events.
@@ -333,10 +338,9 @@ protected void buildPlayer() {
     player.setPlayWhenReady(startAutoPlay);
     player.addAnalyticsListener(new EventLogger(trackSelector));
     if (playerView != null) {
-      if (playerDependencies() instanceof CustomPlayerDependencies
-          && ((CustomPlayerDependencies) playerDependencies()).errorMessageProvider() != null) {
+      if (playerDependencies().errorMessageProvider() != null) {
         playerView.setErrorMessageProvider(
-            ((CustomPlayerDependencies) playerDependencies()).errorMessageProvider());
+            playerDependencies().errorMessageProvider());
       }
       playerView.setPlayer(player);
       playerView.setPlaybackPreparer(this);
@@ -490,9 +494,8 @@ public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray tra
   }
 
   public LoadControl getLoadControl() {
-    if (playerDependencies() instanceof CustomPlayerDependencies &&
-        ((CustomPlayerDependencies) playerDependencies()).loadControl() != null) {
-      return ((CustomPlayerDependencies) playerDependencies()).loadControl();
+    if (playerDependencies().loadControl() != null) {
+      return playerDependencies().loadControl();
     } else {
       return new DefaultLoadControl();
     }
@@ -530,13 +533,13 @@ public MediaSource buildMediaSource(Uri uri, @Nullable String overrideExtension)
   }
 
   // Extend base initializePlayer() method dependency builder
-  public static class CustomPlayerDependencies<B extends CustomPlayerDependencies.Builder<B>>
+  public static class SimplePlayerDependencies<B extends SimplePlayerDependencies.Builder<B>>
       extends PlayerDependencies<B> {
 
     private LoadControl loadControl;
     private ErrorMessageProvider errorMessageProvider;
 
-    public CustomPlayerDependencies(Builder<B> builder) {
+    public SimplePlayerDependencies(Builder<B> builder) {
       super(builder);
       this.loadControl = builder.loadControl;
       this.errorMessageProvider = builder.errorMessageProvider;
@@ -570,8 +573,8 @@ public T setErrorMessageProvider(
         return (T) this;
       }
 
-      public CustomPlayerDependencies build() {
-        return new CustomPlayerDependencies(this);
+      public SimplePlayerDependencies build() {
+        return new SimplePlayerDependencies(this);
       }
     }
   }
