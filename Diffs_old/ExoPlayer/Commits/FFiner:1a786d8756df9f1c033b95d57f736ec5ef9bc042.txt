diff --git a/demos/main/src/main/AndroidManifest.xml b/demos/main/src/main/AndroidManifest.xml
index c3184225d1..170e4fe9ca 100644
--- a/demos/main/src/main/AndroidManifest.xml
+++ b/demos/main/src/main/AndroidManifest.xml
@@ -1,98 +1,98 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools"
     package="com.google.android.exoplayer2.demo">
 
-  <uses-permission android:name="android.permission.INTERNET"/>
-  <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
-  <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
-  <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
-  <uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>
+    <uses-sdk />
 
-  <uses-feature android:name="android.software.leanback" android:required="false"/>
-  <uses-feature android:name="android.hardware.touchscreen" android:required="false"/>
-  <uses-sdk/>
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
+    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
 
-  <application
-      android:label="@string/application_name"
-      android:icon="@mipmap/ic_launcher"
-      android:banner="@drawable/ic_banner"
-      android:largeHeap="true"
-      android:allowBackup="false"
-      android:usesCleartextTraffic="true"
-      android:name="com.google.android.exoplayer2.demo.DemoApplication"
-      tools:ignore="UnusedAttribute">
+    <uses-feature
+        android:name="android.software.leanback"
+        android:required="false" />
+    <uses-feature
+        android:name="android.hardware.touchscreen"
+        android:required="false" />
 
-    <activity android:name="com.google.android.exoplayer2.demo.SampleChooserActivity"
-        android:configChanges="keyboardHidden"
+    <application
+        android:name=".DemoApplication"
+        android:allowBackup="false"
+        android:banner="@drawable/ic_banner"
+        android:icon="@mipmap/ic_launcher"
         android:label="@string/application_name"
-        android:theme="@style/Theme.AppCompat">
-      <intent-filter>
-        <action android:name="android.intent.action.MAIN"/>
-        <category android:name="android.intent.category.LAUNCHER"/>
-        <category android:name="android.intent.category.LEANBACK_LAUNCHER"/>
-      </intent-filter>
-      <intent-filter>
-        <action android:name="android.intent.action.VIEW"/>
-        <category android:name="android.intent.category.DEFAULT"/>
-        <category android:name="android.intent.category.BROWSABLE"/>
-        <data android:scheme="http"/>
-        <data android:scheme="https"/>
-        <data android:scheme="content"/>
-        <data android:scheme="asset"/>
-        <data android:scheme="file"/>
-        <data android:host="*"/>
-        <data android:pathPattern=".*\\.exolist\\.json"/>
-      </intent-filter>
-    </activity>
+        android:largeHeap="true"
+        android:usesCleartextTraffic="true"
+        tools:ignore="UnusedAttribute">
+        <activity android:name=".FourPlayerActivity"
+            android:theme="@style/Theme.AppCompat">
+        </activity>
+        <activity
+            android:name=".SampleChooserActivity"
+            android:configChanges="keyboardHidden"
+            android:label="@string/application_name"
+            android:theme="@style/Theme.AppCompat">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
 
-    <activity android:name="com.google.android.exoplayer2.demo.PlayerActivity"
-        android:configChanges="keyboard|keyboardHidden|orientation|screenSize|screenLayout|smallestScreenSize|uiMode"
-        android:launchMode="singleTop"
-        android:label="@string/application_name"
-        android:theme="@style/PlayerTheme">
-      <intent-filter>
-        <action android:name="com.google.android.exoplayer.demo.action.VIEW"/>
-        <category android:name="android.intent.category.DEFAULT"/>
-        <data android:scheme="http"/>
-        <data android:scheme="https"/>
-        <data android:scheme="content"/>
-        <data android:scheme="asset"/>
-        <data android:scheme="file"/>
-      </intent-filter>
-      <intent-filter>
-        <action android:name="com.google.android.exoplayer.demo.action.VIEW_LIST"/>
-        <category android:name="android.intent.category.DEFAULT"/>
-      </intent-filter>
-    </activity>
+                <category android:name="android.intent.category.LAUNCHER" />
+                <category android:name="android.intent.category.LEANBACK_LAUNCHER" />
+            </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <data android:scheme="http" />
+                <data android:scheme="https" />
+                <data android:scheme="content" />
+                <data android:scheme="asset" />
+                <data android:scheme="file" />
+                <data android:host="*" />
+                <data android:pathPattern=".*\\.exolist\\.json" />
+            </intent-filter>
+        </activity>
+        <activity
+            android:name=".PlayerActivity"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize|screenLayout|smallestScreenSize|uiMode"
+            android:label="@string/application_name"
+            android:launchMode="singleTop"
+            android:theme="@style/PlayerTheme">
+            <intent-filter>
+                <action android:name="com.google.android.exoplayer.demo.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+
+                <data android:scheme="http" />
+                <data android:scheme="https" />
+                <data android:scheme="content" />
+                <data android:scheme="asset" />
+                <data android:scheme="file" />
+            </intent-filter>
+            <intent-filter>
+                <action android:name="com.google.android.exoplayer.demo.action.VIEW_LIST" />
 
-    <service android:name="com.google.android.exoplayer2.demo.DemoDownloadService"
-        android:exported="false">
-      <intent-filter>
-        <action android:name="com.google.android.exoplayer.downloadService.action.RESTART"/>
-        <category android:name="android.intent.category.DEFAULT"/>
-      </intent-filter>
-    </service>
+                <category android:name="android.intent.category.DEFAULT" />
+            </intent-filter>
+        </activity>
 
-    <service android:name="com.google.android.exoplayer2.scheduler.PlatformScheduler$PlatformSchedulerService"
-        android:permission="android.permission.BIND_JOB_SERVICE"
-        android:exported="true"/>
+        <service
+            android:name=".DemoDownloadService"
+            android:exported="false">
+            <intent-filter>
+                <action android:name="com.google.android.exoplayer.downloadService.action.RESTART" />
 
-  </application>
+                <category android:name="android.intent.category.DEFAULT" />
+            </intent-filter>
+        </service>
+        <service
+            android:name="com.google.android.exoplayer2.scheduler.PlatformScheduler$PlatformSchedulerService"
+            android:exported="true"
+            android:permission="android.permission.BIND_JOB_SERVICE" />
+    </application>
 
-</manifest>
+</manifest>
\ No newline at end of file
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/FourPlayerActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/FourPlayerActivity.java
new file mode 100644
index 0000000000..d37c7fb453
--- /dev/null
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/FourPlayerActivity.java
@@ -0,0 +1,555 @@
+package com.google.android.exoplayer2.demo;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.appcompat.app.AppCompatActivity;
+
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Handler;
+import android.util.Pair;
+import android.view.KeyEvent;
+import android.view.View;
+import android.widget.Button;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.ExoPlaybackException;
+import com.google.android.exoplayer2.ExoPlayerFactory;
+import com.google.android.exoplayer2.PlaybackPreparer;
+import com.google.android.exoplayer2.SimpleExoPlayer;
+import com.google.android.exoplayer2.drm.FrameworkMediaDrm;
+import com.google.android.exoplayer2.ext.rtmp.RtmpDataSourceFactory;
+import com.google.android.exoplayer2.mediacodec.MediaCodecRenderer;
+import com.google.android.exoplayer2.mediacodec.MediaCodecUtil;
+import com.google.android.exoplayer2.offline.DownloadHelper;
+import com.google.android.exoplayer2.offline.DownloadRequest;
+import com.google.android.exoplayer2.source.MediaSource;
+import com.google.android.exoplayer2.source.ProgressiveMediaSource;
+import com.google.android.exoplayer2.source.TrackGroupArray;
+import com.google.android.exoplayer2.source.ads.AdsLoader;
+import com.google.android.exoplayer2.source.dash.DashMediaSource;
+import com.google.android.exoplayer2.source.hls.HlsMediaSource;
+import com.google.android.exoplayer2.source.smoothstreaming.SsMediaSource;
+import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
+import com.google.android.exoplayer2.ui.DebugTextViewHelper;
+import com.google.android.exoplayer2.ui.PlayerControlView;
+import com.google.android.exoplayer2.ui.PlayerView;
+import com.google.android.exoplayer2.ui.spherical.SphericalSurfaceView;
+import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.util.ErrorMessageProvider;
+import com.google.android.exoplayer2.util.Log;
+import com.google.android.exoplayer2.util.Util;
+
+import java.net.CookieHandler;
+import java.net.CookieManager;
+import java.net.CookiePolicy;
+
+public class FourPlayerActivity extends AppCompatActivity
+        implements View.OnClickListener, PlaybackPreparer, PlayerControlView.VisibilityListener{
+
+    public static final String DRM_SCHEME_EXTRA = "drm_scheme";
+    public static final String DRM_LICENSE_URL_EXTRA = "drm_license_url";
+    public static final String DRM_KEY_REQUEST_PROPERTIES_EXTRA = "drm_key_request_properties";
+    public static final String DRM_MULTI_SESSION_EXTRA = "drm_multi_session";
+    public static final String PREFER_EXTENSION_DECODERS_EXTRA = "prefer_extension_decoders";
+
+    public static final String ACTION_VIEW = "com.google.android.exoplayer.demo.action.VIEW";
+    public static final String EXTENSION_EXTRA = "extension";
+
+    public static final String ACTION_VIEW_LIST =
+            "com.google.android.exoplayer.demo.action.VIEW_LIST";
+    public static final String URI_LIST_EXTRA = "uri_list";
+    public static final String EXTENSION_LIST_EXTRA = "extension_list";
+
+    public static final String AD_TAG_URI_EXTRA = "ad_tag_uri";
+
+    public static final String ABR_ALGORITHM_EXTRA = "abr_algorithm";
+    public static final String ABR_ALGORITHM_DEFAULT = "default";
+    public static final String ABR_ALGORITHM_RANDOM = "random";
+
+    public static final String SPHERICAL_STEREO_MODE_EXTRA = "spherical_stereo_mode";
+    public static final String SPHERICAL_STEREO_MODE_MONO = "mono";
+    public static final String SPHERICAL_STEREO_MODE_TOP_BOTTOM = "top_bottom";
+    public static final String SPHERICAL_STEREO_MODE_LEFT_RIGHT = "left_right";
+
+    // For backwards compatibility only.
+    private static final String DRM_SCHEME_UUID_EXTRA = "drm_scheme_uuid";
+
+    // Saved instance state keys.
+    private static final String KEY_TRACK_SELECTOR_PARAMETERS = "track_selector_parameters";
+    private static final String KEY_WINDOW = "window";
+    private static final String KEY_POSITION = "position";
+    private static final String KEY_AUTO_PLAY = "auto_play";
+
+    Uri[] uris = new Uri[4];
+
+    private static final CookieManager DEFAULT_COOKIE_MANAGER;
+    static {
+        DEFAULT_COOKIE_MANAGER = new CookieManager();
+        DEFAULT_COOKIE_MANAGER.setCookiePolicy(CookiePolicy.ACCEPT_ORIGINAL_SERVER);
+    }
+
+    private PlayerView playerView_1;
+    private PlayerView playerView_2;
+    private PlayerView playerView_3;
+    private PlayerView playerView_4;
+
+    private LinearLayout debugRootView;
+    private Button selectTracksButton;
+    private TextView debugTextView;
+    private boolean isShowingTrackSelectionDialog;
+
+    //private DataSource.Factory dataSourceFactory;
+    private SimpleExoPlayer player;
+    private FrameworkMediaDrm mediaDrm;
+    private MediaSource mediaSource;
+    private DefaultTrackSelector trackSelector;
+    private DefaultTrackSelector.Parameters trackSelectorParameters;
+    private DebugTextViewHelper debugViewHelper;
+    private TrackGroupArray lastSeenTrackGroupArray;
+
+    private boolean startAutoPlay;
+    private int startWindow;
+    private long startPosition;
+
+    // Fields used only for ad playback. The ads loader is loaded via reflection.
+
+    private AdsLoader adsLoader;
+    private Uri loadedAdTagUri;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        /*String sphericalStereoMode = getIntent().getStringExtra(SPHERICAL_STEREO_MODE_EXTRA);
+        if (sphericalStereoMode != null) {
+            setTheme(R.style.PlayerTheme_Spherical);
+        }*/
+
+        super.onCreate(savedInstanceState);
+
+        if (CookieHandler.getDefault() != DEFAULT_COOKIE_MANAGER) {
+            CookieHandler.setDefault(DEFAULT_COOKIE_MANAGER);
+        }
+
+        setContentView(R.layout.activity_four_player);
+
+        playerView_1 = findViewById(R.id.player_view_1);
+        playerView_2 = findViewById(R.id.player_view_2);
+        playerView_3 = findViewById(R.id.player_view_3);
+        playerView_4 = findViewById(R.id.player_view_4);
+
+        playerView_1.setControllerVisibilityListener(this);
+        playerView_1.setErrorMessageProvider(new FourPlayerActivity.PlayerErrorMessageProvider());
+        playerView_1.requestFocus();
+
+        /*if (sphericalStereoMode != null) {
+            int stereoMode;
+            if (SPHERICAL_STEREO_MODE_MONO.equals(sphericalStereoMode)) {
+                stereoMode = C.STEREO_MODE_MONO;
+            } else if (SPHERICAL_STEREO_MODE_TOP_BOTTOM.equals(sphericalStereoMode)) {
+                stereoMode = C.STEREO_MODE_TOP_BOTTOM;
+            } else if (SPHERICAL_STEREO_MODE_LEFT_RIGHT.equals(sphericalStereoMode)) {
+                stereoMode = C.STEREO_MODE_LEFT_RIGHT;
+            } else {
+                showToast(R.string.error_unrecognized_stereo_mode);
+                finish();
+                return;
+            }
+            ((SphericalSurfaceView) playerView_1.getVideoSurfaceView()).setDefaultStereoMode(stereoMode);
+        }*/
+
+        /*if (savedInstanceState != null) {
+            trackSelectorParameters = savedInstanceState.getParcelable(KEY_TRACK_SELECTOR_PARAMETERS);
+            startAutoPlay = savedInstanceState.getBoolean(KEY_AUTO_PLAY);
+            startWindow = savedInstanceState.getInt(KEY_WINDOW);
+            startPosition = savedInstanceState.getLong(KEY_POSITION);
+        } else {
+            trackSelectorParameters = new DefaultTrackSelector.ParametersBuilder().build();
+            clearStartPosition();
+        }*/
+
+        /*new Handler().postDelayed(new Runnable() {
+            public void run() {
+                initializePlayer(1);
+            }
+        }, 2 * 1000);
+
+        new Handler().postDelayed(new Runnable() {
+            public void run() {
+                initializePlayer(2);
+            }
+        }, 6 * 1000);
+
+        new Handler().postDelayed(new Runnable() {
+            public void run() {
+                initializePlayer(3);
+            }
+        }, 10 * 1000);
+
+        new Handler().postDelayed(new Runnable() {
+            public void run() {
+                initializePlayer(4);
+            }
+        }, 14 * 1000);*/
+        Intent intent = getIntent();
+        uris[0] = Uri.parse(intent.getData().getPath() + "/source1.mp4");
+        uris[1] = Uri.parse(intent.getData().getPath() + "/source2.mp4");
+        uris[2] = Uri.parse(intent.getData().getPath() + "/source3.mp4");
+        uris[3] = Uri.parse(intent.getData().getPath() + "/source4.mp4");
+        if (Util.maybeRequestReadExternalStoragePermission(/* activity= */ this, uris)) {
+            // The player will be reinitialized if the permission is granted.
+            return;
+        }
+    }
+
+    @Override
+    public void onNewIntent(Intent intent) {
+        super.onNewIntent(intent);
+        //releasePlayer();
+        //releaseAdsLoader();
+        clearStartPosition();
+        setIntent(intent);
+    }
+
+    @Override
+    public void onStart() {
+        super.onStart();
+        if (Util.SDK_INT > 100) {
+            /*//initializePlayer(1);
+            if (playerView_1 != null) {
+                playerView_1.onResume();
+            }
+            //initializePlayer(2);
+            if (playerView_2 != null) {
+                playerView_2.onResume();
+            }
+            //initializePlayer(3);
+            if (playerView_3 != null) {
+                playerView_3.onResume();
+            }
+            //initializePlayer(4);
+            if (playerView_4 != null) {
+                playerView_4.onResume();
+            }*/
+            /*new Handler().postDelayed(new Runnable() {
+                public void run() {
+                    initializePlayer(1);
+                    if (playerView_1 != null) {
+                        playerView_1.onResume();
+                    }
+                }
+            }, 5 * 1000);
+
+            new Handler().postDelayed(new Runnable() {
+                public void run() {
+                    initializePlayer(2);
+                    if (playerView_2 != null) {
+                        playerView_2.onResume();
+                    }
+                }
+            }, 10 * 1000);
+
+            new Handler().postDelayed(new Runnable() {
+                public void run() {
+                    initializePlayer(3);
+                    if (playerView_3 != null) {
+                        playerView_3.onResume();
+                    }
+                }
+            }, 15 * 1000);
+
+            new Handler().postDelayed(new Runnable() {
+                public void run() {
+                    initializePlayer(4);
+                    if (playerView_4 != null) {
+                        playerView_4.onResume();
+                    }
+                }
+            }, 20 * 1000);*/
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (Util.SDK_INT <= 23 || player == null) {
+            /*//initializePlayer(1);
+            if (playerView_1 != null) {
+                playerView_1.onResume();
+            }
+            //initializePlayer(2);
+            if (playerView_2 != null) {
+                playerView_2.onResume();
+            }
+            //initializePlayer(3);
+            if (playerView_3 != null) {
+                playerView_3.onResume();
+            }
+            //initializePlayer(4);
+            if (playerView_4 != null) {
+                playerView_4.onResume();
+            }*/
+            new Handler().postDelayed(new Runnable() {
+                public void run() {
+                    initializePlayer(1);
+                    if (playerView_1 != null) {
+                        playerView_1.onResume();
+                    }
+                }
+            }, 5 * 1000);
+
+            new Handler().postDelayed(new Runnable() {
+                public void run() {
+                    initializePlayer(2);
+                    if (playerView_2 != null) {
+                        playerView_2.onResume();
+                    }
+                }
+            }, 10 * 1000);
+
+            new Handler().postDelayed(new Runnable() {
+                public void run() {
+                    initializePlayer(3);
+                    if (playerView_3 != null) {
+                        playerView_3.onResume();
+                    }
+                }
+            }, 15 * 1000);
+
+            new Handler().postDelayed(new Runnable() {
+                public void run() {
+                    initializePlayer(4);
+                    if (playerView_4 != null) {
+                        playerView_4.onResume();
+                    }
+                }
+            }, 20 * 1000);
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (Util.SDK_INT <= 23) {
+            if (playerView_1 != null) {
+                playerView_1.onPause();
+            }
+            if (playerView_2 != null) {
+                playerView_2.onPause();
+            }
+            if (playerView_3 != null) {
+                playerView_3.onPause();
+            }
+            if (playerView_4 != null) {
+                playerView_4.onPause();
+            }
+            //releasePlayer();
+        }
+    }
+
+    @Override
+    public void onStop() {
+        super.onStop();
+        if (Util.SDK_INT > 23) {
+            if (playerView_1 != null) {
+                playerView_1.onPause();
+            }
+            if (playerView_2 != null) {
+                playerView_2.onPause();
+            }
+            if (playerView_3 != null) {
+                playerView_3.onPause();
+            }
+            if (playerView_4 != null) {
+                playerView_4.onPause();
+            }
+            //releasePlayer();
+        }
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        //releaseAdsLoader();
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
+                                           @NonNull int[] grantResults) {
+        if (grantResults.length == 0) {
+            // Empty results are triggered if a permission is requested while another request was already
+            // pending and can be safely ignored in this case.
+            return;
+        }
+        if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+            //initializePlayer();
+        } else {
+            showToast(R.string.storage_permission_denied);
+            finish();
+        }
+    }
+
+    @Override
+    public boolean dispatchKeyEvent(KeyEvent event) {
+        //return super.dispatchKeyEvent(event);
+        //return playerView_1.dispatchKeyEvent(event) || super.dispatchKeyEvent(event);
+        playerView_1.dispatchKeyEvent(event);
+        playerView_2.dispatchKeyEvent(event);
+        playerView_3.dispatchKeyEvent(event);
+        return playerView_4.dispatchKeyEvent(event) || super.dispatchKeyEvent(event);
+    }
+
+    @Override
+    public void onClick(View v) {
+
+    }
+
+    @Override
+    public void preparePlayback() {
+
+    }
+
+    @Override
+    public void onVisibilityChange(int visibility) {
+
+    }
+
+    private void initializePlayer(int index){
+        SimpleExoPlayer player = ExoPlayerFactory.newSimpleInstance(FourPlayerActivity.this);
+        player.setPlayWhenReady(true);
+        Intent intent = getIntent();
+        Uri uri = null;// = intent.getData();
+        switch (index){
+            case 1:
+                playerView_1.setPlayer(player);
+                playerView_1.setPlaybackPreparer(this);
+                uri = uris[0];
+                break;
+            case 2:
+                playerView_2.setPlayer(player);
+                playerView_2.setPlaybackPreparer(this);
+                uri = uris[1];
+                break;
+            case 3:
+                playerView_3.setPlayer(player);
+                playerView_3.setPlaybackPreparer(this);
+                uri = uris[2];
+                break;
+            case 4:
+                playerView_4.setPlayer(player);
+                playerView_4.setPlaybackPreparer(this);
+                uri = uris[3];
+                break;
+        }
+
+        /*Intent intent = getIntent();
+        Uri uri = intent.getData();*/
+        Log.d("xxxxxxxx", uri.getPath());
+
+        if(uri != null){
+            player.prepare(buildMediaSource(uri));
+        }
+        /*player.prepare(buildMediaSource(
+                Uri.parse("https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_4x3/bipbop_4x3_variant.m3u8")));*/
+    }
+
+    /** Returns a new DataSource factory. */
+    private DataSource.Factory buildDataSourceFactory() {
+        //return ((DemoApplication) getApplication()).buildDataSourceFactory();
+        return buildDataSourceFactory(null);
+    }
+
+    private DataSource.Factory buildDataSourceFactory(Uri uri) {
+/*      @ContentType int type = Util.inferContentType(uri, null);
+      if(type == C.TYPE_RTMP){
+          return  new RtmpDataSourceFactory();
+      }*/
+        if(uri != null){
+            String path = uri.getPath();
+            if(path != null && path.startsWith("rtmp:")){
+                return  new RtmpDataSourceFactory();
+            }
+        }
+
+        return ((DemoApplication) getApplication()).buildDataSourceFactory();
+    }
+
+    private MediaSource buildMediaSource(Uri uri) {
+        return buildMediaSource(uri, null);
+    }
+
+    private MediaSource buildMediaSource(Uri uri, @Nullable String overrideExtension) {
+        DataSource.Factory dataSourceFactory = buildDataSourceFactory(uri);
+
+        DownloadRequest downloadRequest =
+                ((DemoApplication) getApplication()).getDownloadTracker().getDownloadRequest(uri);
+        if (downloadRequest != null) {
+            return DownloadHelper.createMediaSource(downloadRequest, dataSourceFactory);
+        }
+        @C.ContentType int type = Util.inferContentType(uri, overrideExtension);
+        switch (type) {
+            case C.TYPE_DASH:
+                return new DashMediaSource.Factory(dataSourceFactory).createMediaSource(uri);
+            case C.TYPE_SS:
+                return new SsMediaSource.Factory(dataSourceFactory).createMediaSource(uri);
+            case C.TYPE_HLS:
+                return new HlsMediaSource.Factory(dataSourceFactory).createMediaSource(uri);
+            case C.TYPE_OTHER:
+                return new ProgressiveMediaSource.Factory(dataSourceFactory).createMediaSource(uri);
+            default:
+                throw new IllegalStateException("Unsupported type: " + type);
+        }
+    }
+
+    private class PlayerErrorMessageProvider implements ErrorMessageProvider<ExoPlaybackException> {
+
+        @Override
+        public Pair<Integer, String> getErrorMessage(ExoPlaybackException e) {
+            String errorString = getString(R.string.error_generic);
+            if (e.type == ExoPlaybackException.TYPE_RENDERER) {
+                Exception cause = e.getRendererException();
+                if (cause instanceof MediaCodecRenderer.DecoderInitializationException) {
+                    // Special case for decoder initialization failures.
+                    MediaCodecRenderer.DecoderInitializationException decoderInitializationException =
+                            (MediaCodecRenderer.DecoderInitializationException) cause;
+                    if (decoderInitializationException.decoderName == null) {
+                        if (decoderInitializationException.getCause() instanceof MediaCodecUtil.DecoderQueryException) {
+                            errorString = getString(R.string.error_querying_decoders);
+                        } else if (decoderInitializationException.secureDecoderRequired) {
+                            errorString =
+                                    getString(
+                                            R.string.error_no_secure_decoder, decoderInitializationException.mimeType);
+                        } else {
+                            errorString =
+                                    getString(R.string.error_no_decoder, decoderInitializationException.mimeType);
+                        }
+                    } else {
+                        errorString =
+                                getString(
+                                        R.string.error_instantiating_decoder,
+                                        decoderInitializationException.decoderName);
+                    }
+                }
+            }
+            return Pair.create(0, errorString);
+        }
+    }
+
+    private void showToast(int messageId) {
+        showToast(getString(messageId));
+    }
+
+    private void showToast(String message) {
+        Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
+    }
+
+    private void clearStartPosition() {
+        startAutoPlay = true;
+        startWindow = C.INDEX_UNSET;
+        startPosition = C.TIME_UNSET;
+    }
+}
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
index 5281059440..613c6bf4fb 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
@@ -18,10 +18,13 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.res.AssetManager;
+import android.media.MediaCodec;
 import android.net.Uri;
 import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Bundle;
 import androidx.annotation.Nullable;
+import androidx.annotation.RequiresApi;
 import androidx.appcompat.app.AppCompatActivity;
 import android.util.JsonReader;
 import android.view.Menu;
@@ -47,6 +50,7 @@
 import com.google.android.exoplayer2.upstream.DefaultDataSource;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Log;
+import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.Util;
 import java.io.IOException;
 import java.io.InputStream;
@@ -69,6 +73,7 @@
   private MenuItem randomAbrMenuItem;
   private EditText urlEditText;
   private Button confirmBtn;
+  private Button confirmBtn4;
 
   @Override
   public void onCreate(Bundle savedInstanceState) {
@@ -80,6 +85,10 @@ public void onCreate(Bundle savedInstanceState) {
     if(confirmBtn != null){
       confirmBtn.setOnClickListener(confirmListener);
     }
+    confirmBtn4 = findViewById(R.id.btn_commit4);
+    if(confirmBtn4 != null){
+      confirmBtn4.setOnClickListener(confirmListener);
+    }
 
     sampleAdapter = new SampleAdapter();
     ExpandableListView sampleListView = findViewById(R.id.sample_list);
@@ -621,15 +630,45 @@ public Intent buildIntent(
   }
 
   private Button.OnClickListener confirmListener = new OnClickListener() {
+    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)
     @Override
     public void onClick(View v) {
-      if(urlEditText != null){
-        String url = urlEditText.getText().toString();
-
-        Intent intent = new Intent(SampleChooserActivity.this, PlayerActivity.class);
-        intent.setData(Uri.parse(url));
-        intent.setAction(PlayerActivity.ACTION_VIEW);
-        SampleChooserActivity.this.startActivity(intent);
+      if(v == null) return;
+      switch (v.getId()){
+        case R.id.btn_commit:{
+          if(urlEditText != null){
+            String url = urlEditText.getText().toString();;//"/sdcard/DCIM/Camera/VID_20180111_084546.mp4";//
+
+            Intent intent = new Intent(SampleChooserActivity.this, PlayerActivity.class);
+            intent.setData(Uri.parse(url));
+            intent.setAction(PlayerActivity.ACTION_VIEW);
+            SampleChooserActivity.this.startActivity(intent);
+          }
+          break;
+        }
+        case R.id.btn_commit4: {
+          String url = urlEditText.getText().toString();
+
+          Intent intent = new Intent(SampleChooserActivity.this, FourPlayerActivity.class);
+          intent.setData(Uri.parse(url));
+          SampleChooserActivity.this.startActivity(intent);
+          /*try {
+            String tag = "xxxxxxxx";
+            MediaCodec decoder1 = MediaCodec.createDecoderByType(MimeTypes.VIDEO_H264);
+            Log.d(tag, "create decoder1 :" + decoder1.getName());
+            MediaCodec decoder2 = MediaCodec.createDecoderByType(MimeTypes.VIDEO_H264);
+            Log.d(tag, "create decoder1 :" + decoder1.getName());
+            MediaCodec decoder3 = MediaCodec.createDecoderByType(MimeTypes.VIDEO_H264);
+            Log.d(tag, "create decoder1 :" + decoder1.getName());
+            MediaCodec decoder4 = MediaCodec.createDecoderByType(MimeTypes.VIDEO_H264);
+            Log.d(tag, "create decoder1 :" + decoder1.getName());
+          } catch (IOException e) {
+            e.printStackTrace();
+          }*/
+          break;
+        }
+        default:
+          return;
       }
     }
   };
diff --git a/demos/main/src/main/res/layout/activity_four_player.xml b/demos/main/src/main/res/layout/activity_four_player.xml
new file mode 100644
index 0000000000..87f213a51d
--- /dev/null
+++ b/demos/main/src/main/res/layout/activity_four_player.xml
@@ -0,0 +1,73 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<GridLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:columnCount="2"
+    android:rowCount="2"
+    android:keepScreenOn="true">
+
+    <FrameLayout android:id="@+id/play_1"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_row="0"
+        android:layout_column="0"
+        android:layout_columnWeight="1"
+        android:layout_rowWeight="1"
+        android:background="#FFFF00">
+
+        <com.google.android.exoplayer2.ui.PlayerView android:id="@+id/player_view_1"
+            android:layout_width="500dp"
+            android:layout_height="300dp"
+            android:layout_gravity="center"/>
+
+    </FrameLayout>
+
+    <FrameLayout android:id="@+id/play_2"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_row="0"
+        android:layout_column="1"
+        android:layout_columnWeight="1"
+        android:layout_rowWeight="1"
+        android:background="#FF0000">
+
+        <com.google.android.exoplayer2.ui.PlayerView android:id="@+id/player_view_2"
+            android:layout_width="500dp"
+            android:layout_height="300dp"
+            android:layout_gravity="center"/>
+
+    </FrameLayout>
+
+    <FrameLayout android:id="@+id/play_3"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_row="1"
+        android:layout_column="0"
+        android:layout_columnWeight="1"
+        android:layout_rowWeight="1"
+        android:background="#00FF00">
+
+        <com.google.android.exoplayer2.ui.PlayerView android:id="@+id/player_view_3"
+            android:layout_width="500dp"
+            android:layout_height="300dp"
+            android:layout_gravity="center"/>
+
+    </FrameLayout>
+
+    <FrameLayout android:id="@+id/play_4"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_row="1"
+        android:layout_column="1"
+        android:layout_columnWeight="1"
+        android:layout_rowWeight="1"
+        android:background="#0000FF">
+
+        <com.google.android.exoplayer2.ui.PlayerView android:id="@+id/player_view_4"
+            android:layout_width="500dp"
+            android:layout_height="300dp"
+            android:layout_gravity="center"/>
+
+    </FrameLayout>
+</GridLayout>
\ No newline at end of file
diff --git a/demos/main/src/main/res/layout/sample_chooser_activity.xml b/demos/main/src/main/res/layout/sample_chooser_activity.xml
index d16dbd3c38..4cd91fd764 100644
--- a/demos/main/src/main/res/layout/sample_chooser_activity.xml
+++ b/demos/main/src/main/res/layout/sample_chooser_activity.xml
@@ -37,6 +37,13 @@
       android:layout_marginRight="39dp"
       android:text="CONFIRM"/>
 
+  <Button android:id="@+id/btn_commit4"
+      android:layout_width="match_parent"
+      android:layout_height="wrap_content"
+      android:layout_marginLeft="39dp"
+      android:layout_marginRight="39dp"
+      android:text="CONFIRM (four)"/>
+
   <ExpandableListView android:id="@+id/sample_list"
       android:layout_width="match_parent"
       android:layout_height="wrap_content"/>
diff --git a/demos/main/src/main/res/values/strings.xml b/demos/main/src/main/res/values/strings.xml
index 0729da2fc6..058862a409 100644
--- a/demos/main/src/main/res/values/strings.xml
+++ b/demos/main/src/main/res/values/strings.xml
@@ -1,5 +1,4 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
+<?xml version="1.0" encoding="utf-8"?><!-- Copyright (C) 2016 The Android Open Source Project
 
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
@@ -15,56 +14,56 @@
 -->
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
 
-  <string name="application_name">ExoPlayer</string>
+    <string name="application_name">ExoPlayer</string>
 
-  <string name="track_selection_title">Select tracks</string>
+    <string name="track_selection_title">Select tracks</string>
 
-  <string name="unexpected_intent_action">Unexpected intent action: <xliff:g id="action">%1$s</xliff:g></string>
+    <string name="unexpected_intent_action">Unexpected intent action: <xliff:g id="action">%1$s</xliff:g></string>
 
-  <string name="error_cleartext_not_permitted">Cleartext traffic not permitted</string>
+    <string name="error_cleartext_not_permitted">Cleartext traffic not permitted</string>
 
-  <string name="error_generic">Playback failed</string>
+    <string name="error_generic">Playback failed</string>
 
-  <string name="error_unrecognized_abr_algorithm">Unrecognized ABR algorithm</string>
+    <string name="error_unrecognized_abr_algorithm">Unrecognized ABR algorithm</string>
 
-  <string name="error_unrecognized_stereo_mode">Unrecognized stereo mode</string>
+    <string name="error_unrecognized_stereo_mode">Unrecognized stereo mode</string>
 
-  <string name="error_drm_not_supported">Protected content not supported on API levels below 18</string>
+    <string name="error_drm_not_supported">Protected content not supported on API levels below 18</string>
 
-  <string name="error_drm_unsupported_scheme">This device does not support the required DRM scheme</string>
+    <string name="error_drm_unsupported_scheme">This device does not support the required DRM scheme</string>
 
-  <string name="error_drm_unknown">An unknown DRM error occurred</string>
+    <string name="error_drm_unknown">An unknown DRM error occurred</string>
 
-  <string name="error_no_decoder">This device does not provide a decoder for <xliff:g id="mime_type">%1$s</xliff:g></string>
+    <string name="error_no_decoder">This device does not provide a decoder for <xliff:g id="mime_type">%1$s</xliff:g></string>
 
-  <string name="error_no_secure_decoder">This device does not provide a secure decoder for <xliff:g id="mime_type">%1$s</xliff:g></string>
+    <string name="error_no_secure_decoder">This device does not provide a secure decoder for <xliff:g id="mime_type">%1$s</xliff:g></string>
 
-  <string name="error_querying_decoders">Unable to query device decoders</string>
+    <string name="error_querying_decoders">Unable to query device decoders</string>
 
-  <string name="error_instantiating_decoder">Unable to instantiate decoder <xliff:g id="decoder_name">%1$s</xliff:g></string>
+    <string name="error_instantiating_decoder">Unable to instantiate decoder <xliff:g id="decoder_name">%1$s</xliff:g></string>
 
-  <string name="error_unsupported_video">Media includes video tracks, but none are playable by this device</string>
+    <string name="error_unsupported_video">Media includes video tracks, but none are playable by this device</string>
 
-  <string name="error_unsupported_audio">Media includes audio tracks, but none are playable by this device</string>
+    <string name="error_unsupported_audio">Media includes audio tracks, but none are playable by this device</string>
 
-  <string name="storage_permission_denied">Permission to access storage was denied</string>
+    <string name="storage_permission_denied">Permission to access storage was denied</string>
 
-  <string name="sample_list_load_error">One or more sample lists failed to load</string>
+    <string name="sample_list_load_error">One or more sample lists failed to load</string>
 
-  <string name="ima_not_loaded">Playing sample without ads, as the IMA extension was not loaded</string>
+    <string name="ima_not_loaded">Playing sample without ads, as the IMA extension was not loaded</string>
 
-  <string name="download_start_error">Failed to start download</string>
+    <string name="download_start_error">Failed to start download</string>
 
-  <string name="download_playlist_unsupported">This demo app does not support downloading playlists</string>
+    <string name="download_playlist_unsupported">This demo app does not support downloading playlists</string>
 
-  <string name="download_drm_unsupported">This demo app does not support downloading protected content</string>
+    <string name="download_drm_unsupported">This demo app does not support downloading protected content</string>
 
-  <string name="download_scheme_unsupported">This demo app only supports downloading http streams</string>
+    <string name="download_scheme_unsupported">This demo app only supports downloading http streams</string>
 
-  <string name="download_ads_unsupported">IMA does not support offline ads</string>
+    <string name="download_ads_unsupported">IMA does not support offline ads</string>
 
-  <string name="prefer_extension_decoders">Prefer extension decoders</string>
+    <string name="prefer_extension_decoders">Prefer extension decoders</string>
 
-  <string name="random_abr">Enable random ABR</string>
+    <string name="random_abr">Enable random ABR</string>
 
 </resources>
