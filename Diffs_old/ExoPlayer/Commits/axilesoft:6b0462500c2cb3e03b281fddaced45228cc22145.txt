diff --git a/extensions/gvr/src/main/java/com/google/android/exoplayer2/ext/gvr/GvrAudioProcessor.java b/extensions/gvr/src/main/java/com/google/android/exoplayer2/ext/gvr/GvrAudioProcessor.java
index eca31c98e4..4e775c5ff0 100644
--- a/extensions/gvr/src/main/java/com/google/android/exoplayer2/ext/gvr/GvrAudioProcessor.java
+++ b/extensions/gvr/src/main/java/com/google/android/exoplayer2/ext/gvr/GvrAudioProcessor.java
@@ -147,7 +147,7 @@ public int getOutputSampleRateHz() {
   }
 
   @Override
-  public void queueInput(ByteBuffer input) {
+  public void queueInput(ByteBuffer input, long presentationTimeUs) {
     int position = input.position();
     Assertions.checkNotNull(gvrAudioSurround);
     int readBytes = gvrAudioSurround.addInput(input, position, input.limit() - position);
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/audio/AudioProcessor.java b/library/core/src/main/java/com/google/android/exoplayer2/audio/AudioProcessor.java
index f82be31f72..dba5675dc9 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/audio/AudioProcessor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/audio/AudioProcessor.java
@@ -25,7 +25,7 @@
  *
  * <p>Call {@link #configure(int, int, int)} to configure the processor to receive input audio, then
  * call {@link #isActive()} to determine whether the processor is active. {@link
- * #queueInput(ByteBuffer)}, {@link #queueEndOfStream()}, {@link #getOutput()}, {@link #isEnded()},
+ * #queueInput(ByteBuffer, long)}, {@link #queueEndOfStream()}, {@link #getOutput()}, {@link #isEnded()},
  * {@link #getOutputChannelCount()}, {@link #getOutputEncoding()} and {@link
  * #getOutputSampleRateHz()} may only be called if the processor is active. Call {@link #reset()} to
  * reset the processor to its unconfigured state and release any resources.
@@ -96,12 +96,13 @@ boolean configure(int sampleRateHz, int channelCount, @C.Encoding int encoding)
    * previous buffer returned by {@link #getOutput()}.
    *
    * @param buffer The input buffer to process.
+   * @param presentationTimeUs
    */
-  void queueInput(ByteBuffer buffer);
+  void queueInput(ByteBuffer buffer, long presentationTimeUs);
 
   /**
    * Queues an end of stream signal. After this method has been called,
-   * {@link #queueInput(ByteBuffer)} may not be called until after the next call to
+   * {@link #queueInput(ByteBuffer, long)} may not be called until after the next call to
    * {@link #flush()}. Calling {@link #getOutput()} will return any remaining output data. Multiple
    * calls may be required to read all of the remaining output data. {@link #isEnded()} will return
    * {@code true} once all remaining output data has been read.
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/audio/ChannelMappingAudioProcessor.java b/library/core/src/main/java/com/google/android/exoplayer2/audio/ChannelMappingAudioProcessor.java
index e53eb08c83..f33f2ef37b 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/audio/ChannelMappingAudioProcessor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/audio/ChannelMappingAudioProcessor.java
@@ -111,7 +111,7 @@ public int getOutputSampleRateHz() {
   }
 
   @Override
-  public void queueInput(ByteBuffer inputBuffer) {
+  public void queueInput(ByteBuffer inputBuffer, long presentationTimeUs) {
     Assertions.checkState(outputChannels != null);
     int position = inputBuffer.position();
     int limit = inputBuffer.limit();
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java b/library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
index 7ee25d07d1..b561f3d03b 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
@@ -703,7 +703,7 @@ private void processBuffers(long avSyncPresentationTimeUs) throws WriteException
         writeBuffer(input, avSyncPresentationTimeUs);
       } else {
         AudioProcessor audioProcessor = activeAudioProcessors[index];
-        audioProcessor.queueInput(input);
+        audioProcessor.queueInput(input, avSyncPresentationTimeUs);
         ByteBuffer output = audioProcessor.getOutput();
         outputBuffers[index] = output;
         if (output.hasRemaining()) {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/audio/FloatResamplingAudioProcessor.java b/library/core/src/main/java/com/google/android/exoplayer2/audio/FloatResamplingAudioProcessor.java
index e3c91cd344..bc33be1ea5 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/audio/FloatResamplingAudioProcessor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/audio/FloatResamplingAudioProcessor.java
@@ -84,7 +84,7 @@ public int getOutputSampleRateHz() {
   }
 
   @Override
-  public void queueInput(ByteBuffer inputBuffer) {
+  public void queueInput(ByteBuffer inputBuffer, long presentationTimeUs) {
     boolean isInput32Bit = sourceEncoding == C.ENCODING_PCM_32BIT;
     int position = inputBuffer.position();
     int limit = inputBuffer.limit();
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/audio/ResamplingAudioProcessor.java b/library/core/src/main/java/com/google/android/exoplayer2/audio/ResamplingAudioProcessor.java
index 3ae1a393f9..77e28fe6cb 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/audio/ResamplingAudioProcessor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/audio/ResamplingAudioProcessor.java
@@ -80,7 +80,7 @@ public int getOutputSampleRateHz() {
   }
 
   @Override
-  public void queueInput(ByteBuffer inputBuffer) {
+  public void queueInput(ByteBuffer inputBuffer, long presentationTimeUs) {
     // Prepare the output buffer.
     int position = inputBuffer.position();
     int limit = inputBuffer.limit();
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/audio/SilenceSkippingAudioProcessor.java b/library/core/src/main/java/com/google/android/exoplayer2/audio/SilenceSkippingAudioProcessor.java
index a1ff7028c1..285899b261 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/audio/SilenceSkippingAudioProcessor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/audio/SilenceSkippingAudioProcessor.java
@@ -166,7 +166,7 @@ public int getOutputSampleRateHz() {
   }
 
   @Override
-  public void queueInput(ByteBuffer inputBuffer) {
+  public void queueInput(ByteBuffer inputBuffer, long presentationTimeUs) {
     while (inputBuffer.hasRemaining() && !outputBuffer.hasRemaining()) {
       switch (state) {
         case STATE_NOISY:
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/audio/SonicAudioProcessor.java b/library/core/src/main/java/com/google/android/exoplayer2/audio/SonicAudioProcessor.java
index 2ca2d47828..c701c7dfd2 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/audio/SonicAudioProcessor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/audio/SonicAudioProcessor.java
@@ -200,7 +200,7 @@ public int getOutputSampleRateHz() {
   }
 
   @Override
-  public void queueInput(ByteBuffer inputBuffer) {
+  public void queueInput(ByteBuffer inputBuffer, long presentationTimeUs) {
     Assertions.checkState(sonic != null);
     if (inputBuffer.hasRemaining()) {
       ShortBuffer shortBuffer = inputBuffer.asShortBuffer();
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/audio/TeeAudioProcessor.java b/library/core/src/main/java/com/google/android/exoplayer2/audio/TeeAudioProcessor.java
index 0072b7c2a3..c32e91ed59 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/audio/TeeAudioProcessor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/audio/TeeAudioProcessor.java
@@ -48,8 +48,9 @@
      * Called when data is written to the audio processor.
      *
      * @param buffer A read-only buffer containing input which the audio processor will handle.
+     * @param avSyncPresentationTimeUs
      */
-    void handleBuffer(ByteBuffer buffer);
+    void handleBuffer(ByteBuffer buffer, long avSyncPresentationTimeUs);
   }
 
   private final AudioBufferSink audioBufferSink;
@@ -110,13 +111,13 @@ public int getOutputSampleRateHz() {
   }
 
   @Override
-  public void queueInput(ByteBuffer buffer) {
+  public void queueInput(ByteBuffer buffer, long presentationTimeUs) {
     int remaining = buffer.remaining();
     if (remaining == 0) {
       return;
     }
 
-    audioBufferSink.handleBuffer(buffer.asReadOnlyBuffer());
+    audioBufferSink.handleBuffer(buffer.asReadOnlyBuffer(), presentationTimeUs);
 
     if (this.buffer.capacity() < remaining) {
       this.buffer = ByteBuffer.allocateDirect(remaining).order(ByteOrder.nativeOrder());
@@ -216,7 +217,7 @@ public void flush(int sampleRateHz, int channelCount, int encoding) {
     }
 
     @Override
-    public void handleBuffer(ByteBuffer buffer) {
+    public void handleBuffer(ByteBuffer buffer, long avSyncPresentationTimeUs) {
       try {
         maybePrepareFile();
         writeBuffer(buffer);
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/audio/TrimmingAudioProcessor.java b/library/core/src/main/java/com/google/android/exoplayer2/audio/TrimmingAudioProcessor.java
index 7b66bd63d2..3485830ced 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/audio/TrimmingAudioProcessor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/audio/TrimmingAudioProcessor.java
@@ -121,7 +121,7 @@ public int getOutputSampleRateHz() {
   }
 
   @Override
-  public void queueInput(ByteBuffer inputBuffer) {
+  public void queueInput(ByteBuffer inputBuffer, long presentationTimeUs) {
     int position = inputBuffer.position();
     int limit = inputBuffer.limit();
     int remaining = limit - position;
diff --git a/library/core/src/test/java/com/google/android/exoplayer2/audio/SilenceSkippingAudioProcessorTest.java b/library/core/src/test/java/com/google/android/exoplayer2/audio/SilenceSkippingAudioProcessorTest.java
index bd559218c6..6045168f83 100644
--- a/library/core/src/test/java/com/google/android/exoplayer2/audio/SilenceSkippingAudioProcessorTest.java
+++ b/library/core/src/test/java/com/google/android/exoplayer2/audio/SilenceSkippingAudioProcessorTest.java
@@ -316,7 +316,7 @@ private static long process(
     while (inputBufferProvider.hasRemaining()) {
       ByteBuffer inputBuffer = inputBufferProvider.getNextInputBuffer(inputBufferSize);
       while (inputBuffer.hasRemaining()) {
-        processor.queueInput(inputBuffer);
+        processor.queueInput(inputBuffer, );
         ByteBuffer outputBuffer = processor.getOutput();
         totalOutputFrames += outputBuffer.remaining() / (2 * processor.getOutputChannelCount());
         outputBuffer.clear();
