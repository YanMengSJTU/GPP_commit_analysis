diff --git a/library/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java b/library/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
index f5da9c8d44..504dc134f5 100644
--- a/library/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
+++ b/library/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
@@ -345,7 +345,7 @@ public DecoderCounters getAudioDecoderCounters() {
     }
 
     /*
-  * [UFRGS] VO-CoLisEU
+  * [UFRGS] VERONA
   * Return the number of freezes/stalls during the exhibition
   */
     public int getStalls() {
@@ -353,7 +353,7 @@ public int getStalls() {
     }
 
     /*
-     * [UFRGS] VO-CoLisEU
+     * [UFRGS] VERONA
      * Return the combined duration of freezes/stalls during the exhibition
      */
     public Long getStallsDuration() {
@@ -361,7 +361,7 @@ public Long getStallsDuration() {
     }
 
     /*
-     * [UFRGS] VO-CoLisEU
+     * [UFRGS] VERONA
      * Return the number of freezes/stalls during the exhibition
      */
     public void setStalls(int cont) {
@@ -369,7 +369,7 @@ public void setStalls(int cont) {
     }
 
     /*
-     * [UFRGS] VO-CoLisEU
+     * [UFRGS] VERONA
      * Return the combined duration of freezes/stalls during the exhibition
      */
     public void setStallsDuration(long durationms) {
diff --git a/library/src/main/java/com/google/android/exoplayer2/ui/DebugTextViewHelper.java b/library/src/main/java/com/google/android/exoplayer2/ui/DebugTextViewHelper.java
index 42f1f56f5e..8993db90fe 100644
--- a/library/src/main/java/com/google/android/exoplayer2/ui/DebugTextViewHelper.java
+++ b/library/src/main/java/com/google/android/exoplayer2/ui/DebugTextViewHelper.java
@@ -193,7 +193,6 @@
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
-import android.content.SharedPreferences;
 import android.os.Environment;
 import android.util.Log;
 import android.widget.TextView;
diff --git a/library/src/main/java/com/google/android/exoplayer2/ui/PlaybackControlView.java b/library/src/main/java/com/google/android/exoplayer2/ui/PlaybackControlView.java
index 25a8e1e716..1494b6bf8c 100644
--- a/library/src/main/java/com/google/android/exoplayer2/ui/PlaybackControlView.java
+++ b/library/src/main/java/com/google/android/exoplayer2/ui/PlaybackControlView.java
@@ -17,6 +17,7 @@
 
 import android.content.Context;
 import android.util.AttributeSet;
+import android.util.Log;
 import android.view.KeyEvent;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -24,12 +25,14 @@
 import android.widget.ImageButton;
 import android.widget.SeekBar;
 import android.widget.TextView;
+
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.ExoPlayer;
 import com.google.android.exoplayer2.R;
 import com.google.android.exoplayer2.Timeline;
 import com.google.android.exoplayer2.util.Util;
+
 import java.util.Formatter;
 import java.util.Locale;
 
@@ -38,444 +41,568 @@
  */
 public class PlaybackControlView extends FrameLayout {
 
-  /**
-   * Listener to be notified about changes of the visibility of the UI control.
-   */
-  public interface VisibilityListener {
     /**
-     * Called when the visibility changes.
+     * Listener to be notified about changes of the visibility of the UI control.
+     */
+    public interface VisibilityListener {
+        /**
+         * Called when the visibility changes.
+         *
+         * @param visibility The new visibility. Either {@link View#VISIBLE} or {@link View#GONE}.
+         */
+        void onVisibilityChange(int visibility);
+    }
+
+    public static final int DEFAULT_FAST_FORWARD_MS = 15000;
+    public static final int DEFAULT_REWIND_MS = 5000;
+    public static final int DEFAULT_SHOW_DURATION_MS = 5000;
+
+    private static final int PROGRESS_BAR_MAX = 1000;
+    private static final long MAX_POSITION_FOR_SEEK_TO_PREVIOUS = 3000;
+
+    private final ComponentListener componentListener;
+    private final View previousButton;
+    private final View nextButton;
+    private final ImageButton playButton;
+    private final TextView time;
+    private final TextView timeCurrent;
+    private final SeekBar progressBar;
+    private final View fastForwardButton;
+    private final View rewindButton;
+    private final StringBuilder formatBuilder;
+    private final Formatter formatter;
+    private final Timeline.Window currentWindow;
+    private int totalDuration, videoIndex = 0;
+
+    private ExoPlayer player;
+    private VisibilityListener visibilityListener;
+
+    private boolean dragging;
+    private int rewindMs = DEFAULT_REWIND_MS;
+    private int fastForwardMs = DEFAULT_FAST_FORWARD_MS;
+    private int showDurationMs = DEFAULT_SHOW_DURATION_MS;
+    private boolean usingCC = false, indexAux = false;
+
+    private final Runnable updateProgressAction = new Runnable() {
+        @Override
+        public void run() {
+            updateProgress();
+        }
+    };
+
+    private final Runnable updateProgressCCAction = new Runnable() {
+        @Override
+        public void run() {
+            updateProgressCC();
+        }
+    };
+
+    public void useCC(boolean use) {
+        this.usingCC = use;
+    }
+
+    private final Runnable hideAction = new Runnable() {
+        @Override
+        public void run() {
+            hide();
+        }
+    };
+
+    public PlaybackControlView(Context context) {
+        this(context, null);
+        Log.i("playback", "1");
+    }
+
+    public PlaybackControlView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+        Log.i("playback", "2");
+    }
+
+    public void setTotalDuration(int dur) {
+        this.totalDuration = dur;
+    }
+
+    public PlaybackControlView(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        Log.i("playback", "3");
+        currentWindow = new Timeline.Window();
+        formatBuilder = new StringBuilder();
+        formatter = new Formatter(formatBuilder, Locale.getDefault());
+        componentListener = new ComponentListener();
+
+        LayoutInflater.from(context).inflate(R.layout.playback_control_view, this);
+        time = (TextView) findViewById(R.id.time);
+        timeCurrent = (TextView) findViewById(R.id.time_current);
+        progressBar = (SeekBar) findViewById(R.id.mediacontroller_progress);
+        progressBar.setOnSeekBarChangeListener(componentListener);
+        progressBar.setMax(PROGRESS_BAR_MAX);
+        playButton = (ImageButton) findViewById(R.id.play);
+        playButton.setOnClickListener(componentListener);
+        previousButton = findViewById(R.id.prev);
+        previousButton.setOnClickListener(componentListener);
+        previousButton.setVisibility(View.INVISIBLE);
+        nextButton = findViewById(R.id.next);
+        nextButton.setOnClickListener(componentListener);
+        nextButton.setVisibility(View.INVISIBLE);
+        rewindButton = findViewById(R.id.rew);
+        rewindButton.setOnClickListener(componentListener);
+        rewindButton.setVisibility(View.INVISIBLE);
+        fastForwardButton = findViewById(R.id.ffwd);
+        fastForwardButton.setOnClickListener(componentListener);
+        fastForwardButton.setVisibility(View.INVISIBLE);
+        updateAll();
+    }
+
+    /**
+     * Sets the {@link ExoPlayer} to control.
      *
-     * @param visibility The new visibility. Either {@link View#VISIBLE} or {@link View#GONE}.
+     * @param player the {@code ExoPlayer} to control.
      */
-    void onVisibilityChange(int visibility);
-  }
-
-  public static final int DEFAULT_FAST_FORWARD_MS = 15000;
-  public static final int DEFAULT_REWIND_MS = 5000;
-  public static final int DEFAULT_SHOW_DURATION_MS = 5000;
-
-  private static final int PROGRESS_BAR_MAX = 1000;
-  private static final long MAX_POSITION_FOR_SEEK_TO_PREVIOUS = 3000;
-
-  private final ComponentListener componentListener;
-  private final View previousButton;
-  private final View nextButton;
-  private final ImageButton playButton;
-  private final TextView time;
-  private final TextView timeCurrent;
-  private final SeekBar progressBar;
-  private final View fastForwardButton;
-  private final View rewindButton;
-  private final StringBuilder formatBuilder;
-  private final Formatter formatter;
-  private final Timeline.Window currentWindow;
-
-  private ExoPlayer player;
-  private VisibilityListener visibilityListener;
-
-  private boolean dragging;
-  private int rewindMs = DEFAULT_REWIND_MS;
-  private int fastForwardMs = DEFAULT_FAST_FORWARD_MS;
-  private int showDurationMs = DEFAULT_SHOW_DURATION_MS;
-
-  private final Runnable updateProgressAction = new Runnable() {
-    @Override
-    public void run() {
-      updateProgress();
+    public void setPlayer(ExoPlayer player) {
+        if (this.player != null) {
+            this.player.removeListener(componentListener);
+        }
+        this.player = player;
+        if (player != null) {
+            player.addListener(componentListener);
+        }
+        updateAll();
     }
-  };
 
-  private final Runnable hideAction = new Runnable() {
-    @Override
-    public void run() {
-      hide();
-    }
-  };
-
-  public PlaybackControlView(Context context) {
-    this(context, null);
-  }
-
-  public PlaybackControlView(Context context, AttributeSet attrs) {
-    this(context, attrs, 0);
-  }
-
-  public PlaybackControlView(Context context, AttributeSet attrs, int defStyleAttr) {
-    super(context, attrs, defStyleAttr);
-
-    currentWindow = new Timeline.Window();
-    formatBuilder = new StringBuilder();
-    formatter = new Formatter(formatBuilder, Locale.getDefault());
-    componentListener = new ComponentListener();
-
-    LayoutInflater.from(context).inflate(R.layout.playback_control_view, this);
-    time = (TextView) findViewById(R.id.time);
-    timeCurrent = (TextView) findViewById(R.id.time_current);
-    progressBar = (SeekBar) findViewById(R.id.mediacontroller_progress);
-    progressBar.setOnSeekBarChangeListener(componentListener);
-    progressBar.setMax(PROGRESS_BAR_MAX);
-    playButton = (ImageButton) findViewById(R.id.play);
-    playButton.setOnClickListener(componentListener);
-    previousButton = findViewById(R.id.prev);
-    previousButton.setOnClickListener(componentListener);
-    nextButton = findViewById(R.id.next);
-    nextButton.setOnClickListener(componentListener);
-    rewindButton = findViewById(R.id.rew);
-    rewindButton.setOnClickListener(componentListener);
-    fastForwardButton = findViewById(R.id.ffwd);
-    fastForwardButton.setOnClickListener(componentListener);
-    updateAll();
-  }
-
-  /**
-   * Sets the {@link ExoPlayer} to control.
-   *
-   * @param player the {@code ExoPlayer} to control.
-   */
-  public void setPlayer(ExoPlayer player) {
-    if (this.player != null) {
-      this.player.removeListener(componentListener);
-    }
-    this.player = player;
-    if (player != null) {
-      player.addListener(componentListener);
-    }
-    updateAll();
-  }
-
-  /**
-   * Sets the {@link VisibilityListener}.
-   *
-   * @param listener The listener to be notified about visibility changes.
-   */
-  public void setVisibilityListener(VisibilityListener listener) {
-    this.visibilityListener = listener;
-  }
-
-  /**
-   * Sets the rewind increment in milliseconds.
-   *
-   * @param rewindMs The rewind increment in milliseconds.
-   */
-  public void setRewindIncrementMs(int rewindMs) {
-    this.rewindMs = rewindMs;
-  }
-
-  /**
-   * Sets the fast forward increment in milliseconds.
-   *
-   * @param fastForwardMs The fast forward increment in milliseconds.
-   */
-  public void setFastForwardIncrementMs(int fastForwardMs) {
-    this.fastForwardMs = fastForwardMs;
-  }
-
-  /**
-   * Sets the duration to show the playback control in milliseconds.
-   *
-   * @param showDurationMs The duration in milliseconds.
-   */
-  public void setShowDurationMs(int showDurationMs) {
-    this.showDurationMs = showDurationMs;
-  }
-
-  /**
-   * Shows the controller for the duration last passed to {@link #setShowDurationMs(int)}, or for
-   * {@link #DEFAULT_SHOW_DURATION_MS} if {@link #setShowDurationMs(int)} has not been called.
-   */
-  public void show() {
-    show(showDurationMs);
-  }
-
-  /**
-   * Shows the controller for the {@code durationMs}. If {@code durationMs} is 0 the controller is
-   * shown until {@link #hide()} is called.
-   *
-   * @param durationMs The duration in milliseconds.
-   */
-  public void show(int durationMs) {
-    setVisibility(VISIBLE);
-    if (visibilityListener != null) {
-      visibilityListener.onVisibilityChange(getVisibility());
-    }
-    updateAll();
-    showDurationMs = durationMs;
-    hideDeferred();
-  }
-
-  /**
-   * Hides the controller.
-   */
-  public void hide() {
-    setVisibility(GONE);
-    if (visibilityListener != null) {
-      visibilityListener.onVisibilityChange(getVisibility());
-    }
-    removeCallbacks(updateProgressAction);
-    removeCallbacks(hideAction);
-  }
-
-  /**
-   * Returns whether the controller is currently visible.
-   */
-  public boolean isVisible() {
-    return getVisibility() == VISIBLE;
-  }
-
-  private void hideDeferred() {
-    removeCallbacks(hideAction);
-    if (showDurationMs > 0) {
-      postDelayed(hideAction, showDurationMs);
-    }
-  }
-
-  private void updateAll() {
-    updatePlayPauseButton();
-    updateNavigation();
-    updateProgress();
-  }
-
-  private void updatePlayPauseButton() {
-    if (!isVisible()) {
-      return;
-    }
-    boolean playing = player != null && player.getPlayWhenReady();
-    playButton.setImageResource(playing ? R.drawable.ic_media_pause : R.drawable.ic_media_play);
-    playButton.setContentDescription(
-        getResources().getString(playing ? R.string.pause_description : R.string.play_description));
-  }
-
-  private void updateNavigation() {
-    if (!isVisible()) {
-      return;
-    }
-    Timeline currentTimeline = player != null ? player.getCurrentTimeline() : null;
-    boolean haveTimeline = currentTimeline != null;
-    boolean isSeekable = false;
-    boolean enablePrevious = false;
-    boolean enableNext = false;
-    if (haveTimeline) {
-      int currentWindowIndex = player.getCurrentWindowIndex();
-      currentTimeline.getWindow(currentWindowIndex, currentWindow);
-      isSeekable = currentWindow.isSeekable;
-      enablePrevious = currentWindowIndex > 0 || isSeekable || !currentWindow.isDynamic;
-      enableNext = (currentWindowIndex < currentTimeline.getWindowCount() - 1)
-          || currentWindow.isDynamic;
-    }
-    setButtonEnabled(enablePrevious , previousButton);
-    setButtonEnabled(enableNext, nextButton);
-    setButtonEnabled(isSeekable, fastForwardButton);
-    setButtonEnabled(isSeekable, rewindButton);
-    progressBar.setEnabled(isSeekable);
-  }
-
-  private void updateProgress() {
-    if (!isVisible()) {
-      return;
-    }
-    long duration = player == null ? 0 : player.getDuration();
-    long position = player == null ? 0 : player.getCurrentPosition();
-    time.setText(stringForTime(duration));
-    if (!dragging) {
-      timeCurrent.setText(stringForTime(position));
-    }
-    if (!dragging) {
-      progressBar.setProgress(progressBarValue(position));
-    }
-    long bufferedPosition = player == null ? 0 : player.getBufferedPosition();
-    progressBar.setSecondaryProgress(progressBarValue(bufferedPosition));
-    // Remove scheduled updates.
-    removeCallbacks(updateProgressAction);
-    // Schedule an update if necessary.
-    int playbackState = player == null ? ExoPlayer.STATE_IDLE : player.getPlaybackState();
-    if (playbackState != ExoPlayer.STATE_IDLE && playbackState != ExoPlayer.STATE_ENDED) {
-      long delayMs;
-      if (player.getPlayWhenReady() && playbackState == ExoPlayer.STATE_READY) {
-        delayMs = 1000 - (position % 1000);
-        if (delayMs < 200) {
-          delayMs += 1000;
-        }
-      } else {
-        delayMs = 1000;
-      }
-      postDelayed(updateProgressAction, delayMs);
-    }
-  }
-
-  private void setButtonEnabled(boolean enabled, View view) {
-    view.setEnabled(enabled);
-    if (Util.SDK_INT >= 11) {
-      view.setAlpha(enabled ? 1f : 0.3f);
-      view.setVisibility(VISIBLE);
-    } else {
-      view.setVisibility(enabled ? VISIBLE : INVISIBLE);
-    }
-  }
-
-  private String stringForTime(long timeMs) {
-    if (timeMs == C.TIME_UNSET) {
-      timeMs = 0;
-    }
-    long totalSeconds = (timeMs + 500) / 1000;
-    long seconds = totalSeconds % 60;
-    long minutes = (totalSeconds / 60) % 60;
-    long hours = totalSeconds / 3600;
-    formatBuilder.setLength(0);
-    return hours > 0 ? formatter.format("%d:%02d:%02d", hours, minutes, seconds).toString()
-        : formatter.format("%02d:%02d", minutes, seconds).toString();
-  }
-
-  private int progressBarValue(long position) {
-    long duration = player == null ? C.TIME_UNSET : player.getDuration();
-    return duration == C.TIME_UNSET || duration == 0 ? 0
-        : (int) ((position * PROGRESS_BAR_MAX) / duration);
-  }
-
-  private long positionValue(int progress) {
-    long duration = player == null ? C.TIME_UNSET : player.getDuration();
-    return duration == C.TIME_UNSET ? 0 : ((duration * progress) / PROGRESS_BAR_MAX);
-  }
-
-  private void previous() {
-    Timeline currentTimeline = player.getCurrentTimeline();
-    if (currentTimeline == null) {
-      return;
-    }
-    int currentWindowIndex = player.getCurrentWindowIndex();
-    currentTimeline.getWindow(currentWindowIndex, currentWindow);
-    if (currentWindowIndex > 0 && (player.getCurrentPosition() <= MAX_POSITION_FOR_SEEK_TO_PREVIOUS
-        || (currentWindow.isDynamic && !currentWindow.isSeekable))) {
-      player.seekToDefaultPosition(currentWindowIndex - 1);
-    } else {
-      player.seekTo(0);
-    }
-  }
-
-  private void next() {
-    Timeline currentTimeline = player.getCurrentTimeline();
-    if (currentTimeline == null) {
-      return;
-    }
-    int currentWindowIndex = player.getCurrentWindowIndex();
-    if (currentWindowIndex < currentTimeline.getWindowCount() - 1) {
-      player.seekToDefaultPosition(currentWindowIndex + 1);
-    } else if (currentTimeline.getWindow(currentWindowIndex, currentWindow, false).isDynamic) {
-      player.seekToDefaultPosition();
-    }
-  }
-
-  private void rewind() {
-    player.seekTo(Math.max(player.getCurrentPosition() - rewindMs, 0));
-  }
-
-  private void fastForward() {
-    player.seekTo(Math.min(player.getCurrentPosition() + fastForwardMs, player.getDuration()));
-  }
-
-  @Override
-  public boolean dispatchKeyEvent(KeyEvent event) {
-    if (player == null || event.getAction() != KeyEvent.ACTION_DOWN) {
-      return super.dispatchKeyEvent(event);
-    }
-    switch (event.getKeyCode()) {
-      case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
-      case KeyEvent.KEYCODE_DPAD_RIGHT:
-        fastForward();
-        break;
-      case KeyEvent.KEYCODE_MEDIA_REWIND:
-      case KeyEvent.KEYCODE_DPAD_LEFT:
-        rewind();
-        break;
-      case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
-        player.setPlayWhenReady(!player.getPlayWhenReady());
-        break;
-      case KeyEvent.KEYCODE_MEDIA_PLAY:
-        player.setPlayWhenReady(true);
-        break;
-      case KeyEvent.KEYCODE_MEDIA_PAUSE:
-        player.setPlayWhenReady(false);
-        break;
-      case KeyEvent.KEYCODE_MEDIA_NEXT:
-        next();
-        break;
-      case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
-        previous();
-        break;
-      default:
-        return false;
-    }
-    show();
-    return true;
-  }
-
-  private final class ComponentListener implements ExoPlayer.EventListener,
-      SeekBar.OnSeekBarChangeListener, OnClickListener {
+    /**
+     * Sets the {@link VisibilityListener}.
+     *
+     * @param listener The listener to be notified about visibility changes.
+     */
+    public void setVisibilityListener(VisibilityListener listener) {
+        this.visibilityListener = listener;
+    }
 
-    @Override
-    public void onStartTrackingTouch(SeekBar seekBar) {
-      removeCallbacks(hideAction);
-      dragging = true;
+    /**
+     * Sets the rewind increment in milliseconds.
+     *
+     * @param rewindMs The rewind increment in milliseconds.
+     */
+    public void setRewindIncrementMs(int rewindMs) {
+        this.rewindMs = rewindMs;
     }
 
-    @Override
-    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
-      if (fromUser) {
-        timeCurrent.setText(stringForTime(positionValue(progress)));
-      }
+    /**
+     * Sets the fast forward increment in milliseconds.
+     *
+     * @param fastForwardMs The fast forward increment in milliseconds.
+     */
+    public void setFastForwardIncrementMs(int fastForwardMs) {
+        this.fastForwardMs = fastForwardMs;
     }
 
-    @Override
-    public void onStopTrackingTouch(SeekBar seekBar) {
-      dragging = false;
-      player.seekTo(positionValue(seekBar.getProgress()));
-      hideDeferred();
+    /**
+     * Sets the duration to show the playback control in milliseconds.
+     *
+     * @param showDurationMs The duration in milliseconds.
+     */
+    public void setShowDurationMs(int showDurationMs) {
+        this.showDurationMs = showDurationMs;
     }
 
-    @Override
-    public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
-      updatePlayPauseButton();
-      updateProgress();
+    /**
+     * Shows the controller for the duration last passed to {@link #setShowDurationMs(int)}, or for
+     * {@link #DEFAULT_SHOW_DURATION_MS} if {@link #setShowDurationMs(int)} has not been called.
+     */
+    public void show() {
+        show(showDurationMs);
     }
 
-    @Override
-    public void onPositionDiscontinuity() {
-      updateNavigation();
-      updateProgress();
+    /**
+     * Shows the controller for the {@code durationMs}. If {@code durationMs} is 0 the controller is
+     * shown until {@link #hide()} is called.
+     *
+     * @param durationMs The duration in milliseconds.
+     */
+    public void show(int durationMs) {
+        setVisibility(VISIBLE);
+        if (visibilityListener != null) {
+            visibilityListener.onVisibilityChange(getVisibility());
+        }
+        updateAll();
+        showDurationMs = durationMs;
+        hideDeferred();
     }
 
-    @Override
-    public void onTimelineChanged(Timeline timeline, Object manifest) {
-      updateNavigation();
-      updateProgress();
+    /**
+     * Hides the controller.
+     */
+    public void hide() {
+        setVisibility(GONE);
+        if (visibilityListener != null) {
+            visibilityListener.onVisibilityChange(getVisibility());
+        }
+        if (usingCC)
+            removeCallbacks(updateProgressCCAction);
+        else
+            removeCallbacks(updateProgressAction);
+        removeCallbacks(hideAction);
     }
 
-    @Override
-    public void onLoadingChanged(boolean isLoading) {
-      // Do nothing.
+    /**
+     * Returns whether the controller is currently visible.
+     */
+    public boolean isVisible() {
+        return getVisibility() == VISIBLE;
     }
 
-    @Override
-    public void onPlayerError(ExoPlaybackException error) {
-      // Do nothing.
+    private void hideDeferred() {
+        removeCallbacks(hideAction);
+        if (showDurationMs > 0) {
+            postDelayed(hideAction, showDurationMs);
+        }
+    }
+
+    private void updateAll() {
+        updatePlayPauseButton();
+        updateNavigation();
+        if (usingCC)
+            updateProgressCC();
+        else
+            updateProgress();
+    }
+
+    private void updatePlayPauseButton() {
+        if (!isVisible()) {
+            return;
+        }
+        boolean playing = player != null && player.getPlayWhenReady();
+        playButton.setImageResource(playing ? R.drawable.ic_media_pause : R.drawable.ic_media_play);
+        playButton.setContentDescription(
+                getResources().getString(playing ? R.string.pause_description : R.string.play_description));
+    }
+
+    private void updateNavigation() {
+        if (!isVisible()) {
+            return;
+        }
+        Timeline currentTimeline = player != null ? player.getCurrentTimeline() : null;
+        boolean haveTimeline = currentTimeline != null;
+        boolean isSeekable = false;
+        boolean enablePrevious = false;
+        boolean enableNext = false;
+        if (haveTimeline) {
+            int currentWindowIndex = player.getCurrentWindowIndex();
+            currentTimeline.getWindow(currentWindowIndex, currentWindow);
+            isSeekable = currentWindow.isSeekable;
+            enablePrevious = currentWindowIndex > 0 || isSeekable || !currentWindow.isDynamic;
+            enableNext = (currentWindowIndex < currentTimeline.getWindowCount() - 1)
+                    || currentWindow.isDynamic;
+        }
+//    setButtonEnabled(enablePrevious , previousButton);
+//    setButtonEnabled(enableNext, nextButton);
+//    setButtonEnabled(isSeekable, fastForwardButton);
+//    setButtonEnabled(isSeekable, rewindButton);
+        progressBar.setEnabled(isSeekable);
+    }
+
+    public void setVideoIndex(int index) {
+        this.videoIndex = index;
+    }
+
+    private void updateProgressCC() {
+        if (!isVisible()) {
+            return;
+        }
+        Log.i("updateprogress", "CC");
+        progressBar.setMax(totalDuration);
+        videoIndex = player == null ? 0 : player.getCurrentWindowIndex();
+        long duration = player == null ? 0 : totalDuration;
+        long position = player == null ? 0 : ((videoIndex * 10000) + player.getCurrentPosition());
+        if ((position - (videoIndex * 10000)) < 800)
+            indexAux = true;
+        if (position > ((videoIndex + 1) * 10000) - 800 && indexAux) {
+            position = videoIndex * 10000;
+            indexAux = false;
+        }
+        time.setText(stringForTime(duration));
+        if (indexAux) {
+            timeCurrent.setText(stringForTime(position));
+            Log.i("updateprogressCC", "pos: " + position + " / index: " + videoIndex + " / aux: " + indexAux);
+//        progressBar.setProgress(progressBarValue(position));
+            progressBar.setProgress((int) position);
+            long bufferedPosition = player == null ? 0 : ((videoIndex * 10000) + player.getBufferedPosition());
+//        progressBar.setSecondaryProgress(progressBarValue(bufferedPosition));
+            progressBar.setSecondaryProgress((int) bufferedPosition);
+        }
+        // Remove scheduled updates.
+        removeCallbacks(updateProgressCCAction);
+        // Schedule an update if necessary.
+        int playbackState = player == null ? ExoPlayer.STATE_IDLE : player.getPlaybackState();
+        if (playbackState != ExoPlayer.STATE_IDLE && playbackState != ExoPlayer.STATE_ENDED) {
+//            long delayMs;
+//            if (player.getPlayWhenReady() && playbackState == ExoPlayer.STATE_READY) {
+//                delayMs = 1000 - (position % 1000);
+//                if (delayMs < 200) {
+//                    delayMs += 1000;
+//                }
+//            } else {
+//                delayMs = 1000;
+//            }
+            postDelayed(updateProgressCCAction, 500);
+        }
+    }
+
+//    private void updateProgress() {
+//        if (!isVisible()) {
+//            return;
+//        }
+//        Log.i("updateprogress", "normal");
+//        long duration = player == null ? 0 : player.getDuration();
+//        long position = player == null ? 0 : (player.getCurrentPosition());
+//        time.setText(stringForTime(duration));
+//        if (!dragging) {
+//            timeCurrent.setText(stringForTime(position));
+//        }
+//        if (!dragging) {
+//            progressBar.setProgress(progressBarValue(position));
+//        }
+//        long bufferedPosition = player == null ? 0 : (player.getBufferedPosition());
+//        progressBar.setSecondaryProgress(progressBarValue(bufferedPosition));
+//        // Remove scheduled updates.
+//        removeCallbacks(updateProgressAction);
+//        // Schedule an update if necessary.
+//        int playbackState = player == null ? ExoPlayer.STATE_IDLE : player.getPlaybackState();
+//        if (playbackState != ExoPlayer.STATE_IDLE && playbackState != ExoPlayer.STATE_ENDED) {
+//            long delayMs;
+//            if (player.getPlayWhenReady() && playbackState == ExoPlayer.STATE_READY) {
+//                delayMs = 1000 - (position % 1000);
+//                if (delayMs < 200) {
+//                    delayMs += 1000;
+//                }
+//            } else {
+//                delayMs = 1000;
+//            }
+//            postDelayed(updateProgressAction, delayMs);
+//        }
+//    }
+
+    private void updateProgress() {
+        if (!isVisible()) {
+            return;
+        }
+        long duration = player == null ? 0 : player.getDuration();
+        long position = player == null ? 0 : player.getCurrentPosition();
+        if (time != null) {
+            time.setText(stringForTime(duration));
+        }
+        if (timeCurrent != null && !dragging) {
+            timeCurrent.setText(stringForTime(position));
+        }
+
+        if (progressBar != null) {
+            if (!dragging) {
+                progressBar.setProgress(progressBarValue(position));
+            }
+            long bufferedPosition = player == null ? 0 : player.getBufferedPosition();
+            progressBar.setSecondaryProgress(progressBarValue(bufferedPosition));
+            // Remove scheduled updates.
+        }
+        removeCallbacks(updateProgressAction);
+        // Schedule an update if necessary.
+        int playbackState = player == null ? ExoPlayer.STATE_IDLE : player.getPlaybackState();
+        if (playbackState != ExoPlayer.STATE_IDLE && playbackState != ExoPlayer.STATE_ENDED) {
+            long delayMs;
+            if (player.getPlayWhenReady() && playbackState == ExoPlayer.STATE_READY) {
+                delayMs = 1000 - (position % 1000);
+                if (delayMs < 200) {
+                    delayMs += 1000;
+                }
+            } else {
+                delayMs = 1000;
+            }
+            postDelayed(updateProgressAction, delayMs);
+        }
+    }
+
+    private void setButtonEnabled(boolean enabled, View view) {
+        view.setEnabled(enabled);
+        if (Util.SDK_INT >= 11) {
+            view.setAlpha(enabled ? 1f : 0.3f);
+            view.setVisibility(VISIBLE);
+        } else {
+            view.setVisibility(enabled ? VISIBLE : INVISIBLE);
+        }
+    }
+
+    private String stringForTime(long timeMs) {
+        if (timeMs == C.TIME_UNSET) {
+            timeMs = 0;
+        }
+        long totalSeconds = (timeMs + 500) / 1000;
+        long seconds = totalSeconds % 60;
+        long minutes = (totalSeconds / 60) % 60;
+        long hours = totalSeconds / 3600;
+        formatBuilder.setLength(0);
+        return hours > 0 ? formatter.format("%d:%02d:%02d", hours, minutes, seconds).toString()
+                : formatter.format("%02d:%02d", minutes, seconds).toString();
+    }
+
+    private int progressBarValue(long position) {
+        long duration = player == null ? C.TIME_UNSET : (usingCC ? totalDuration : player.getDuration());
+        return duration == C.TIME_UNSET || duration == 0 ? 0
+                : (int) ((position * PROGRESS_BAR_MAX) / duration);
+    }
+
+    private long positionValue(int progress) {
+        long duration = player == null ? C.TIME_UNSET : player.getDuration();
+        return duration == C.TIME_UNSET ? 0 : ((duration * progress) / PROGRESS_BAR_MAX);
+    }
+
+    private void previous() {
+        Timeline currentTimeline = player.getCurrentTimeline();
+        if (currentTimeline == null) {
+            return;
+        }
+        int currentWindowIndex = player.getCurrentWindowIndex();
+        currentTimeline.getWindow(currentWindowIndex, currentWindow);
+        if (currentWindowIndex > 0 && (player.getCurrentPosition() <= MAX_POSITION_FOR_SEEK_TO_PREVIOUS
+                || (currentWindow.isDynamic && !currentWindow.isSeekable))) {
+            player.seekToDefaultPosition(currentWindowIndex - 1);
+        } else {
+            player.seekTo(0);
+        }
+    }
+
+    private void next() {
+        Timeline currentTimeline = player.getCurrentTimeline();
+        if (currentTimeline == null) {
+            return;
+        }
+        int currentWindowIndex = player.getCurrentWindowIndex();
+        if (currentWindowIndex < currentTimeline.getWindowCount() - 1) {
+            player.seekToDefaultPosition(currentWindowIndex + 1);
+        } else if (currentTimeline.getWindow(currentWindowIndex, currentWindow, false).isDynamic) {
+            player.seekToDefaultPosition();
+        }
+    }
+
+    private void rewind() {
+        player.seekTo(Math.max(player.getCurrentPosition() - rewindMs, 0));
+    }
+
+    private void fastForward() {
+        player.seekTo(Math.min(player.getCurrentPosition() + fastForwardMs, player.getDuration()));
     }
 
     @Override
-    public void onClick(View view) {
-      Timeline currentTimeline = player.getCurrentTimeline();
-      if (nextButton == view) {
-        next();
-      } else if (previousButton == view) {
-        previous();
-      } else if (fastForwardButton == view) {
-        fastForward();
-      } else if (rewindButton == view && currentTimeline != null) {
-        rewind();
-      } else if (playButton == view) {
-        player.setPlayWhenReady(!player.getPlayWhenReady());
-      }
-      hideDeferred();
-    }
-
-  }
+    public boolean dispatchKeyEvent(KeyEvent event) {
+        if (player == null || event.getAction() != KeyEvent.ACTION_DOWN) {
+            return super.dispatchKeyEvent(event);
+        }
+        switch (event.getKeyCode()) {
+            case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
+            case KeyEvent.KEYCODE_DPAD_RIGHT:
+                fastForward();
+                break;
+            case KeyEvent.KEYCODE_MEDIA_REWIND:
+            case KeyEvent.KEYCODE_DPAD_LEFT:
+                rewind();
+                break;
+            case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
+                player.setPlayWhenReady(!player.getPlayWhenReady());
+                break;
+            case KeyEvent.KEYCODE_MEDIA_PLAY:
+                player.setPlayWhenReady(true);
+                break;
+            case KeyEvent.KEYCODE_MEDIA_PAUSE:
+                player.setPlayWhenReady(false);
+                break;
+            case KeyEvent.KEYCODE_MEDIA_NEXT:
+                next();
+                break;
+            case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
+                previous();
+                break;
+            default:
+                return false;
+        }
+        show();
+        return true;
+    }
+
+    private final class ComponentListener implements ExoPlayer.EventListener,
+            SeekBar.OnSeekBarChangeListener, OnClickListener {
+
+        @Override
+        public void onStartTrackingTouch(SeekBar seekBar) {
+            removeCallbacks(hideAction);
+            dragging = true;
+        }
+
+        @Override
+        public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
+            if (fromUser) {
+                timeCurrent.setText(stringForTime(positionValue(progress)));
+            }
+        }
+
+        @Override
+        public void onStopTrackingTouch(SeekBar seekBar) {
+            dragging = false;
+            player.seekTo(positionValue(seekBar.getProgress()));
+            hideDeferred();
+        }
+
+        @Override
+        public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
+            updatePlayPauseButton();
+            if (usingCC)
+                updateProgressCC();
+            else
+                updateProgress();
+        }
+
+        @Override
+        public void onPositionDiscontinuity() {
+            updateNavigation();
+            if (usingCC)
+                updateProgressCC();
+            else
+                updateProgress();
+        }
+
+        @Override
+        public void onTimelineChanged(Timeline timeline, Object manifest) {
+            updateNavigation();
+            if (usingCC)
+                updateProgressCC();
+            else
+                updateProgress();
+        }
+
+        @Override
+        public void onLoadingChanged(boolean isLoading) {
+            // Do nothing.
+        }
+
+        @Override
+        public void onPlayerError(ExoPlaybackException error) {
+            // Do nothing.
+        }
+
+        @Override
+        public void onClick(View view) {
+            Timeline currentTimeline = player.getCurrentTimeline();
+            if (nextButton == view) {
+                next();
+            } else if (previousButton == view) {
+                previous();
+            } else if (fastForwardButton == view) {
+                fastForward();
+            } else if (rewindButton == view && currentTimeline != null) {
+                rewind();
+            } else if (playButton == view) {
+                player.setPlayWhenReady(!player.getPlayWhenReady());
+            }
+            hideDeferred();
+        }
+
+    }
 
 }
diff --git a/library/src/main/java/com/google/android/exoplayer2/ui/SimpleExoPlayerView.java b/library/src/main/java/com/google/android/exoplayer2/ui/SimpleExoPlayerView.java
index 390ab2ee7a..9009fc4c91 100644
--- a/library/src/main/java/com/google/android/exoplayer2/ui/SimpleExoPlayerView.java
+++ b/library/src/main/java/com/google/android/exoplayer2/ui/SimpleExoPlayerView.java
@@ -98,6 +98,10 @@ public SimpleExoPlayerView(Context context, AttributeSet attrs, int defStyleAttr
     layout.addView(surfaceView, 0);
   }
 
+  public PlaybackControlView getPlaybackController() {
+    return controller;
+  }
+
   /**
    * Set the {@link SimpleExoPlayer} to use. The {@link SimpleExoPlayer#setTextOutput} and
    * {@link SimpleExoPlayer#setVideoListener} method of the player will be called and previous
diff --git a/library/src/main/java/com/google/android/exoplayer2/upstream/DefaultBandwidthMeter.java b/library/src/main/java/com/google/android/exoplayer2/upstream/DefaultBandwidthMeter.java
index 20f28e7a7d..934525a644 100644
--- a/library/src/main/java/com/google/android/exoplayer2/upstream/DefaultBandwidthMeter.java
+++ b/library/src/main/java/com/google/android/exoplayer2/upstream/DefaultBandwidthMeter.java
@@ -17,6 +17,8 @@
 
 import android.os.Handler;
 import android.os.SystemClock;
+import android.util.Log;
+
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.SlidingPercentile;
 
@@ -61,11 +63,19 @@ public DefaultBandwidthMeter(Handler eventHandler, EventListener eventListener,
     bitrateEstimate = NO_ESTIMATE;
   }
 
+  public String toLog() {
+    return this.bitrateEstimate + "";
+  }
+
   @Override
   public synchronized long getBitrateEstimate() {
     return bitrateEstimate;
   }
 
+  public void setBitrateEstimate(long bitrateEstimate) {
+    this.bitrateEstimate = bitrateEstimate;
+  }
+
   @Override
   public synchronized void onTransferStart(Object source, DataSpec dataSpec) {
     if (streamCount == 0) {
@@ -92,8 +102,8 @@ public synchronized void onTransferEnd(Object source) {
       if (totalElapsedTimeMs >= ELAPSED_MILLIS_FOR_ESTIMATE
           || totalBytesTransferred >= BYTES_TRANSFERRED_FOR_ESTIMATE) {
         float bitrateEstimateFloat = slidingPercentile.getPercentile(0.5f);
-        bitrateEstimate = Float.isNaN(bitrateEstimateFloat) ? NO_ESTIMATE
-            : (long) bitrateEstimateFloat;
+        bitrateEstimate = Float.isNaN(bitrateEstimateFloat) ? NO_ESTIMATE : (long) bitrateEstimateFloat;
+//        Log.i("BNDWTH4", bitrateEstimate+"");
       }
     }
     notifyBandwidthSample(sampleElapsedTimeMs, sampleBytesTransferred, bitrateEstimate);
diff --git a/library/src/main/res/layout/playback_control_view.xml b/library/src/main/res/layout/playback_control_view.xml
index 21194ef54f..40fc35c677 100644
--- a/library/src/main/res/layout/playback_control_view.xml
+++ b/library/src/main/res/layout/playback_control_view.xml
@@ -1,5 +1,4 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
+<?xml version="1.0" encoding="utf-8"?><!-- Copyright (C) 2016 The Android Open Source Project
 
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
@@ -14,74 +13,86 @@
      limitations under the License.
 -->
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-  android:layout_width="match_parent"
-  android:layout_height="wrap_content"
-  android:layout_gravity="bottom"
-  android:background="#CC000000"
-  android:orientation="vertical"
-  android:layoutDirection="ltr">
-
-  <LinearLayout
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
-    android:gravity="center"
-    android:paddingTop="4dp"
-    android:orientation="horizontal">
-
-    <ImageButton android:id="@+id/prev"
-      android:contentDescription="@string/prev_description"
-      style="@style/MediaButton.Previous"/>
-
-    <ImageButton android:id="@+id/rew"
-      android:contentDescription="@string/rew_description"
-      style="@style/MediaButton.Rew"/>
-
-    <ImageButton android:id="@+id/play"
-      style="@style/MediaButton"/>
-
-    <ImageButton android:id="@+id/ffwd"
-      android:contentDescription="@string/ffw_description"
-      style="@style/MediaButton.Ffwd"/>
-
-    <ImageButton android:id="@+id/next"
-      android:contentDescription="@string/prev_description"
-      style="@style/MediaButton.Next"/>
-
-  </LinearLayout>
-
-  <LinearLayout
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:orientation="horizontal">
-
-    <TextView android:id="@+id/time_current"
-      android:layout_width="wrap_content"
-      android:layout_height="wrap_content"
-      android:layout_gravity="center_horizontal"
-      android:textSize="14sp"
-      android:textStyle="bold"
-      android:paddingTop="4dp"
-      android:paddingStart="4dp"
-      android:paddingEnd="4dp"
-      android:textColor="#FFBEBEBE"/>
-
-    <SeekBar android:id="@+id/mediacontroller_progress"
-      android:layout_width="0dp"
-      android:layout_weight="1"
-      android:layout_height="32dp"
-      style="?android:attr/progressBarStyleHorizontal"/>
-
-    <TextView android:id="@+id/time"
-      android:layout_width="wrap_content"
-      android:layout_height="wrap_content"
-      android:layout_gravity="center_horizontal"
-      android:textSize="14sp"
-      android:textStyle="bold"
-      android:paddingTop="4dp"
-      android:paddingEnd="4dp"
-      android:paddingStart="4dp"
-      android:textColor="#FFBEBEBE"/>
-
-  </LinearLayout>
+    android:layout_gravity="bottom"
+    android:background="#CC000000"
+    android:layoutDirection="ltr"
+    android:orientation="vertical">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:gravity="center"
+        android:orientation="horizontal"
+        android:paddingTop="4dp">
+
+        <ImageButton
+            android:id="@+id/prev"
+            style="@style/MediaButton.Previous"
+            android:contentDescription="@string/prev_description"
+            android:visibility="invisible" />
+
+        <ImageButton
+            android:id="@+id/rew"
+            style="@style/MediaButton.Rew"
+            android:contentDescription="@string/rew_description"
+            android:visibility="invisible" />
+
+        <ImageButton
+            android:id="@+id/play"
+            style="@style/MediaButton" />
+
+        <ImageButton
+            android:id="@+id/ffwd"
+            style="@style/MediaButton.Ffwd"
+            android:contentDescription="@string/ffw_description"
+            android:visibility="invisible" />
+
+        <ImageButton
+            android:id="@+id/next"
+            style="@style/MediaButton.Next"
+            android:contentDescription="@string/prev_description"
+            android:visibility="invisible" />
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:id="@+id/time_current"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:paddingEnd="4dp"
+            android:paddingStart="4dp"
+            android:paddingTop="4dp"
+            android:textColor="#FFBEBEBE"
+            android:textSize="14sp"
+            android:textStyle="bold" />
+
+        <SeekBar
+            android:id="@+id/mediacontroller_progress"
+            style="?android:attr/progressBarStyleHorizontal"
+            android:layout_width="0dp"
+            android:layout_height="32dp"
+            android:layout_weight="1" />
+
+        <TextView
+            android:id="@+id/time"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:paddingEnd="4dp"
+            android:paddingStart="4dp"
+            android:paddingTop="4dp"
+            android:textColor="#FFBEBEBE"
+            android:textSize="14sp"
+            android:textStyle="bold" />
+
+    </LinearLayout>
 
 </LinearLayout>
