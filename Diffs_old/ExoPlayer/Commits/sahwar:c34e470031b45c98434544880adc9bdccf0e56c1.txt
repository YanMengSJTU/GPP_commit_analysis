diff --git a/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java b/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java
index d11255bfd1..e32675083c 100644
--- a/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java
@@ -525,7 +525,7 @@ private void readFormat(long positionUs) throws ExoPlaybackException {
     }
   }
 
-  private void flushCodec() throws ExoPlaybackException {
+  protected void flushCodec() throws ExoPlaybackException {
     codecHotswapTimeMs = -1;
     inputIndex = -1;
     outputIndex = -1;
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/gts/DashTest.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/gts/DashTest.java
index 090151e1b8..f855a0ee2b 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/gts/DashTest.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/gts/DashTest.java
@@ -357,7 +357,7 @@ private void testDashPlayback(HostActivity activity, String streamName,
       ActionSchedule actionSchedule, boolean fullPlaybackNoSeeking, String manifestFileName,
       String audioFormat, boolean canIncludeAdditionalVideoFormats, String... videoFormats)
       throws IOException {
-    MediaPresentationDescription mpd = TestUtil.loadManifest(activity,
+    MediaPresentationDescription mpd = TestUtil.loadManifest(activity, TAG,
         MANIFEST_URL_PREFIX + manifestFileName, new MediaPresentationDescriptionParser());
     MetricsLogger metricsLogger = MetricsLogger.Factory.createDefault(getInstrumentation(), TAG,
         REPORT_NAME, streamName);
@@ -460,7 +460,7 @@ public DashHostedTest(String streamName, MediaPresentationDescription mpd,
           MIN_LOADABLE_RETRY_COUNT);
       DebugMediaCodecVideoTrackRenderer videoRenderer = new DebugMediaCodecVideoTrackRenderer(host,
           videoSampleSource, MediaCodecSelector.DEFAULT, MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT,
-          0, handler, logger, 50, fullPlaybackNoSeeking);
+          0, handler, logger, 50);
       videoCounters = videoRenderer.codecCounters;
       player.sendMessage(videoRenderer, DebugMediaCodecVideoTrackRenderer.MSG_SET_SURFACE, surface);
 
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/DebugMediaCodecVideoTrackRenderer.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/DebugMediaCodecVideoTrackRenderer.java
index 9f7bb3dab8..c930c74fd3 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/DebugMediaCodecVideoTrackRenderer.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/DebugMediaCodecVideoTrackRenderer.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer.playbacktests.util;
 
+import com.google.android.exoplayer.ExoPlaybackException;
 import com.google.android.exoplayer.MediaCodecSelector;
 import com.google.android.exoplayer.MediaCodecVideoTrackRenderer;
 import com.google.android.exoplayer.SampleSource;
@@ -34,46 +35,57 @@
 
   private static final int ARRAY_SIZE = 1000;
 
-  public final long[] timestampsList = new long[ARRAY_SIZE];
+  private final long[] timestampsList = new long[ARRAY_SIZE];
 
   private int startIndex;
   private int queueSize;
   private int bufferCount;
-  private boolean enableBufferTimestampAssertions;
 
   public DebugMediaCodecVideoTrackRenderer(Context context, SampleSource source,
       MediaCodecSelector mediaCodecSelector, int videoScalingMode, long allowedJoiningTimeMs,
-      Handler eventHandler, EventListener eventListener, int maxDroppedFrameCountToNotify,
-      boolean enableBufferTimestampAssertions) {
+      Handler eventHandler, EventListener eventListener, int maxDroppedFrameCountToNotify) {
     super(context, source, mediaCodecSelector, videoScalingMode, allowedJoiningTimeMs, null, false,
         eventHandler, eventListener, maxDroppedFrameCountToNotify);
-    this.enableBufferTimestampAssertions = enableBufferTimestampAssertions;
     startIndex = 0;
     queueSize = 0;
   }
 
+  @Override
+  protected void releaseCodec() {
+    super.releaseCodec();
+    clearTimestamps();
+  }
+
+  @Override
+  protected void flushCodec() throws ExoPlaybackException {
+    super.flushCodec();
+    clearTimestamps();
+  }
+
   @Override
   protected void onQueuedInputBuffer(
       long presentationTimeUs, ByteBuffer buffer, int bufferSize, boolean sampleEncrypted) {
-    if (enableBufferTimestampAssertions) {
-      insertTimestamp(presentationTimeUs);
-      maybeShiftTimestampsList();
-    }
+    insertTimestamp(presentationTimeUs);
+    maybeShiftTimestampsList();
   }
 
   @Override
   protected void onProcessedOutputBuffer(long presentationTimeUs) {
     bufferCount++;
-    if (enableBufferTimestampAssertions) {
-      long expectedTimestampUs = dequeueTimestamp();
-      if (expectedTimestampUs != presentationTimeUs) {
-        throw new IllegalStateException("Expected buffer with presentation timestamp: "
-            + expectedTimestampUs + ". Instead got: " + presentationTimeUs + " (Processed buffers: "
-            + bufferCount + ")");
-      }
+    long expectedTimestampUs = dequeueTimestamp();
+    if (expectedTimestampUs != presentationTimeUs) {
+      throw new IllegalStateException("Expected to dequeue video buffer with presentation "
+          + "timestamp: " + expectedTimestampUs + ". Instead got: " + presentationTimeUs
+          + " (Processed buffers since last flush: " + bufferCount + ").");
     }
   }
 
+  private void clearTimestamps() {
+    startIndex = 0;
+    queueSize = 0;
+    bufferCount = 0;
+  }
+
   private void insertTimestamp(long presentationTimeUs) {
     for (int i = startIndex + queueSize - 1; i >= startIndex; i--) {
       if (presentationTimeUs >= timestampsList[i]) {
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/HostActivity.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/HostActivity.java
index a9d41c4056..4bf9de1db1 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/HostActivity.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/HostActivity.java
@@ -125,13 +125,15 @@ public void run() {
         hostedTest.onFinished();
         Log.d(TAG, "Pass conditions checked.");
       } else {
-        Log.e(TAG, "Test released before it finished. Activity may have been paused whilst test "
-            + "was in progress.");
-        fail();
+        String message = "Test released before it finished. Activity may have been paused whilst "
+            + "test was in progress.";
+        Log.e(TAG, message);
+        fail(message);
       }
     } else {
-      Log.e(TAG, "Test timed out after " + timeoutMs + " ms.");
-      fail();
+      String message = "Test timed out after " + timeoutMs + " ms.";
+      Log.e(TAG, message);
+      fail(message);
     }
   }
 
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/TestUtil.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/TestUtil.java
index b5027b9309..77432e369a 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/TestUtil.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/TestUtil.java
@@ -23,14 +23,18 @@
 
 import android.content.Context;
 import android.os.ConditionVariable;
+import android.util.Log;
 
 import java.io.IOException;
+import java.io.InterruptedIOException;
 
 /**
  * Utility methods for ExoPlayer playback tests.
  */
 public final class TestUtil {
 
+  private static final int MANIFEST_LOAD_MAX_RETRY_COUNT = 5;
+
   private TestUtil() {}
 
   /**
@@ -47,19 +51,39 @@ public static String getUserAgent(Context context) {
    * Loads a manifest.
    *
    * @param context A context.
+   * @param tag A tag to use for logging.
    * @param url The manifest url.
    * @param parser A suitable parser for the manifest.
    * @return The parser manifest.
    * @throws IOException If an error occurs loading the manifest.
    */
-  public static <T> T loadManifest(Context context, String url, UriLoadable.Parser<T> parser)
-      throws IOException {
+  public static <T> T loadManifest(Context context, String tag, String url,
+      UriLoadable.Parser<T> parser) throws IOException {
     String userAgent = getUserAgent(context);
-    DefaultUriDataSource manifestDataSource = new DefaultUriDataSource(context, userAgent);
-    ManifestFetcher<T> manifestFetcher = new ManifestFetcher<>(url, manifestDataSource, parser);
-    SyncManifestCallback<T> callback = new SyncManifestCallback<>();
-    manifestFetcher.singleLoad(context.getMainLooper(), callback);
-    return callback.getResult();
+    int retryCount = 0;
+    while (true) {
+      try {
+        DefaultUriDataSource manifestDataSource = new DefaultUriDataSource(context, userAgent);
+        ManifestFetcher<T> manifestFetcher = new ManifestFetcher<>(url, manifestDataSource, parser);
+        SyncManifestCallback<T> callback = new SyncManifestCallback<>();
+        manifestFetcher.singleLoad(context.getMainLooper(), callback);
+        return callback.getResult();
+      } catch (IOException e) {
+        if (retryCount++ < MANIFEST_LOAD_MAX_RETRY_COUNT) {
+          // Sleep, then try again.
+          Log.e(tag, "Failed to load manifest", e);
+          try {
+            Thread.sleep(5000);
+          } catch (InterruptedException e2) {
+            // Never happens.
+            throw new InterruptedIOException();
+          }
+        } else {
+          // Give up.
+          throw e;
+        }
+      }
+    }
   }
 
   /**
