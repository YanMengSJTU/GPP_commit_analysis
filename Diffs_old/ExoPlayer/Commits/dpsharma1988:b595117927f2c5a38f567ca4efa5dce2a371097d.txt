diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
index f759615990..fe4de0cf2d 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
@@ -44,7 +44,7 @@
 import com.google.android.exoplayer2.util.Util;
 import com.vocabimate.protocol.AesEncryptionUtil;
 import com.vocabimate.protocol.ILicenceTo;
-import com.vocabimate.protocol.LicenceBody;
+import com.vocabimate.helpers.LicenceBody;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -160,7 +160,7 @@ public boolean onChildClick(ExpandableListView parent, View view, int groupPosit
     return true;
   }
 
-  private String TOKEN = "CaoETZZ9-4J-oX8Fy9i8vM8GjZ4PwxvJtwrWzPATx1I=";
+  private String TOKEN = "U-4wnaHOaltwOcS_Lc9QdL_ODXCC_qEZrvIglm7JFSA=";
 
   public ILicenceTo getKeyHelper(long videoId, UriSample sample, String localEncKey, String localEncIV) {
 
diff --git a/extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java b/extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
index 7c095ff2ef..d352497f0c 100644
--- a/extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
+++ b/extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
@@ -78,6 +78,11 @@
     ExoPlayerLibraryInfo.registerModule("goog.exo.ima");
   }
 
+  @Override
+  public int getVolume() {
+    return 0;
+  }
+
   /** Builder for {@link ImaAdsLoader}. */
   public static final class Builder {
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/LicenceObtainer.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/LicenceObtainer.java
index 4bc6e321c2..9f3ec9d654 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/LicenceObtainer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/LicenceObtainer.java
@@ -1,103 +1,92 @@
 package com.google.android.exoplayer2.offline;
 
-import com.google.android.exoplayer2.upstream.HttpDataSource;
-import com.vocabimate.protocol.LicenceModel;
-import com.google.gson.Gson;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.net.HttpURLConnection;
-import java.net.URL;
-
 public class LicenceObtainer {
 
-    private int connectTimeoutMillis;
-    private ILicenceData listener;
-    private int readTimeoutMillis;
-    private HttpDataSource.RequestProperties defaultRequestProperties;
-    private HttpDataSource.RequestProperties requestProperties;
-    private String userAgent;
-
-    public LicenceObtainer(int connectTimeoutMillis, ILicenceData listener) {
-        this.connectTimeoutMillis = connectTimeoutMillis;
-        this.listener = listener;
-    }
-
-    public void getLicence() throws IOException
-    {
-        String licenceUrl = "https://voca2hosting.firebaseapp.com/small_files/license_key_path_absolute.json";
-        URL url = new URL(licenceUrl);
-
-        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
-        urlConnection.setConnectTimeout(connectTimeoutMillis);
-        urlConnection.setReadTimeout(readTimeoutMillis);
-        /*if (defaultRequestProperties != null) {
-            for (Map.Entry<String, String> property : defaultRequestProperties.getSnapshot().entrySet()) {
-                connection.setRequestProperty(property.getKey(), property.getValue());
-            }
-        }
-        for (Map.Entry<String, String> property : requestProperties.getSnapshot().entrySet()) {
-            connection.setRequestProperty(property.getKey(), property.getValue());
-        }
-        connection.setRequestProperty("User-Agent", userAgent);
-        connection.setRequestMethod("GET");
-//    if(!TextUtils.isEmpty(TokenManager.getToken())) {
-//      connection.setRequestProperty("token", TokenManager.getToken());
+//    private int connectTimeoutMillis;
+//    private ILicenceData listener;
+//    private int readTimeoutMillis;
+//    private HttpDataSource.RequestProperties defaultRequestProperties;
+//    private HttpDataSource.RequestProperties requestProperties;
+//    private String userAgent;
+//
+//    public LicenceObtainer(int connectTimeoutMillis, ILicenceData listener) {
+//        this.connectTimeoutMillis = connectTimeoutMillis;
+//        this.listener = listener;
+//    }
+//
+//    public void getLicence() throws IOException
+//    {
+//        String licenceUrl = "https://voca2hosting.firebaseapp.com/small_files/license_key_path_absolute.json";
+//        URL url = new URL(licenceUrl);
+//
+//        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
+//        urlConnection.setConnectTimeout(connectTimeoutMillis);
+//        urlConnection.setReadTimeout(readTimeoutMillis);
+//        /*if (defaultRequestProperties != null) {
+//            for (Map.Entry<String, String> property : defaultRequestProperties.getSnapshot().entrySet()) {
+//                connection.setRequestProperty(property.getKey(), property.getValue());
+//            }
+//        }
+//        for (Map.Entry<String, String> property : requestProperties.getSnapshot().entrySet()) {
+//            connection.setRequestProperty(property.getKey(), property.getValue());
+//        }
+//        connection.setRequestProperty("User-Agent", userAgent);
+//        connection.setRequestMethod("GET");
+////    if(!TextUtils.isEmpty(TokenManager.getToken())) {
+////      connection.setRequestProperty("token", TokenManager.getToken());
+////    }
+//        Log.d(TAG, "hisham: " + connection.getResponseCode());
+//        return connection;*/
+//        try {
+//            urlConnection = (HttpURLConnection) url
+//                    .openConnection();
+//
+//            InputStream in = urlConnection.getInputStream();
+//
+//            String result = readStream(in);
+//            listener.onLicenceReceived(new Gson().fromJson(result, LicenceModel.class));
+//
+//            /*InputStreamReader isw = new InputStreamReader(in);
+//            int data = isw.read();
+//            while (data != -1) {
+//                char current = (char) data;
+//                data = isw.read();
+//                System.out.print(current);
+//            }*/
+//        } catch (Exception e) {
+//            e.printStackTrace();
+//        } finally {
+//            if (urlConnection != null) {
+//                urlConnection.disconnect();
+//            }
+//        }
+//    }
+//
+//    private String readStream(InputStream in) {
+//        BufferedReader reader = null;
+//        StringBuffer response = new StringBuffer();
+//        try {
+//            reader = new BufferedReader(new InputStreamReader(in));
+//            String line = "";
+//            while ((line = reader.readLine()) != null) {
+//                response.append(line);
+//            }
+//        } catch (IOException e) {
+//            e.printStackTrace();
+//        } finally {
+//            if (reader != null) {
+//                try {
+//                    reader.close();
+//                } catch (IOException e) {
+//                    e.printStackTrace();
+//                }
+//            }
+//        }
+//        return response.toString();
+//    }
+//
+//
+//    interface ILicenceData {
+//        public void onLicenceReceived(LicenceModel licenceModel);
 //    }
-        Log.d(TAG, "hisham: " + connection.getResponseCode());
-        return connection;*/
-        try {
-            urlConnection = (HttpURLConnection) url
-                    .openConnection();
-
-            InputStream in = urlConnection.getInputStream();
-
-            String result = readStream(in);
-            listener.onLicenceReceived(new Gson().fromJson(result, LicenceModel.class));
-
-            /*InputStreamReader isw = new InputStreamReader(in);
-            int data = isw.read();
-            while (data != -1) {
-                char current = (char) data;
-                data = isw.read();
-                System.out.print(current);
-            }*/
-        } catch (Exception e) {
-            e.printStackTrace();
-        } finally {
-            if (urlConnection != null) {
-                urlConnection.disconnect();
-            }
-        }
-    }
-
-    private String readStream(InputStream in) {
-        BufferedReader reader = null;
-        StringBuffer response = new StringBuffer();
-        try {
-            reader = new BufferedReader(new InputStreamReader(in));
-            String line = "";
-            while ((line = reader.readLine()) != null) {
-                response.append(line);
-            }
-        } catch (IOException e) {
-            e.printStackTrace();
-        } finally {
-            if (reader != null) {
-                try {
-                    reader.close();
-                } catch (IOException e) {
-                    e.printStackTrace();
-                }
-            }
-        }
-        return response.toString();
-    }
-
-
-    interface ILicenceData {
-        public void onLicenceReceived(LicenceModel licenceModel);
-    }
 }
diff --git a/protocol/src/main/java/com/vocabimate/helpers/Licence.java b/protocol/src/main/java/com/vocabimate/helpers/Licence.java
new file mode 100644
index 0000000000..357d9b986e
--- /dev/null
+++ b/protocol/src/main/java/com/vocabimate/helpers/Licence.java
@@ -0,0 +1,116 @@
+package com.vocabimate.helpers;
+
+import com.vocabimate.protocol.ILicenceContract;
+
+import java.util.Date;
+
+/**
+ * Created by Hisham on 29/Oct/2018 - 21:08
+ */
+public class Licence implements ILicenceContract {
+
+    private int userId;
+    private int videoId;
+    private String decryptionKey;
+    private Date validateDt;
+    private Date createDt;
+    private String createUserId;
+    private Date updateDt;
+    private String updateUserId;
+    private String delInd;
+
+    public Licence() { //no operation
+    }
+
+    public Licence(int userId, int videoId) {
+        super();
+        this.userId = userId;
+        this.videoId = videoId;
+    }
+
+    public Licence(int userId, int videoId, Date validateDt, Date createDt, String createUserId, Date updateDt, String updateUserId, String delInd) {
+        super();
+        this.userId = userId;
+        this.videoId = videoId;
+        this.validateDt = validateDt;
+        this.createDt = createDt;
+        this.createUserId = createUserId;
+        this.updateDt = updateDt;
+        this.updateUserId = updateUserId;
+        this.delInd = delInd;
+    }
+
+    public int getUserId() {
+        return userId;
+    }
+
+    public void setUserId(int userId) {
+        this.userId = userId;
+    }
+
+    public int getVideoId() {
+        return videoId;
+    }
+
+    public void setVideoId(int videoId) {
+        this.videoId = videoId;
+    }
+
+    public Date getValidateDt() {
+        return validateDt;
+    }
+
+    public void setValidateDt(Date validateDt) {
+        this.validateDt = validateDt;
+    }
+
+    public Date getCreateDt() {
+        return createDt;
+    }
+
+    public void setCreateDt(Date createDt) {
+        this.createDt = createDt;
+    }
+
+    public String getCreateUserId() {
+        return createUserId;
+    }
+
+    public void setCreateUserId(String createUserId) {
+        this.createUserId = createUserId;
+    }
+
+    public Date getUpdateDt() {
+        return updateDt;
+    }
+
+    public void setUpdateDt(Date updateDt) {
+        this.updateDt = updateDt;
+    }
+
+    public String getUpdateUserId() {
+        return updateUserId;
+    }
+
+    public void setUpdateUserId(String updateUserId) {
+        this.updateUserId = updateUserId;
+    }
+
+    public String getDelInd() {
+        return delInd;
+    }
+
+    public void setDelInd(String delInd) {
+        this.delInd = delInd;
+    }
+
+    public String getDecryptionKey() {
+        return decryptionKey;
+    }
+
+    public void setDecryptionKey(String decryptionKey) {
+        this.decryptionKey = decryptionKey;
+    }
+
+
+}
diff --git a/protocol/src/main/java/com/vocabimate/protocol/LicenceBody.java b/protocol/src/main/java/com/vocabimate/helpers/LicenceBody.java
similarity index 86%
rename from protocol/src/main/java/com/vocabimate/protocol/LicenceBody.java
rename to protocol/src/main/java/com/vocabimate/helpers/LicenceBody.java
index 21cf805532..4c56c016a0 100644
--- a/protocol/src/main/java/com/vocabimate/protocol/LicenceBody.java
+++ b/protocol/src/main/java/com/vocabimate/helpers/LicenceBody.java
@@ -1,7 +1,9 @@
-package com.vocabimate.protocol;
+package com.vocabimate.helpers;
 
 import com.google.gson.Gson;
 import com.google.gson.annotations.SerializedName;
+import com.vocabimate.protocol.ILicenceWrapperContract;
+import com.vocabimate.protocol.KeyHelper;
 
 import java.io.Serializable;
 
@@ -44,6 +46,11 @@ public String getUniqueKeyPathForVCB() {
         return String.valueOf(licenceBodyInternal.videoId);
     }
 
+    @Override
+    public Class<? extends ILicenceWrapperContract> getLicenceResponseModelClass() {
+        return LicenceModel.class;
+    }
+
     private class LicenceBodyInternal implements Serializable {
         @SerializedName("userId")
         int userId;
diff --git a/protocol/src/main/java/com/vocabimate/helpers/LicenceModel.java b/protocol/src/main/java/com/vocabimate/helpers/LicenceModel.java
new file mode 100644
index 0000000000..51cc3a6c3f
--- /dev/null
+++ b/protocol/src/main/java/com/vocabimate/helpers/LicenceModel.java
@@ -0,0 +1,23 @@
+package com.vocabimate.helpers;
+
+import com.google.gson.annotations.SerializedName;
+import com.vocabimate.protocol.ILicenceWrapperContract;
+
+/**
+ * Created by Hisham on 16/Oct/2018 - 14:27
+ */
+public class LicenceModel implements ILicenceWrapperContract {
+
+    @SerializedName("licenseFile")
+    private Licence licenseFile;
+
+    public Licence getLicenseFile() {
+        return licenseFile;
+    }
+
+    public LicenceModel setLicenseFile(Licence licenseFile) {
+        this.licenseFile = licenseFile;
+        return this;
+    }
+
+}
diff --git a/protocol/src/main/java/com/vocabimate/protocol/ILicenceContract.java b/protocol/src/main/java/com/vocabimate/protocol/ILicenceContract.java
new file mode 100644
index 0000000000..33e8e07038
--- /dev/null
+++ b/protocol/src/main/java/com/vocabimate/protocol/ILicenceContract.java
@@ -0,0 +1,8 @@
+package com.vocabimate.protocol;
+
+/**
+ * Created by Hisham on 29/Oct/2018 - 21:04
+ */
+public interface ILicenceContract {
+    String getDecryptionKey();
+}
diff --git a/protocol/src/main/java/com/vocabimate/protocol/ILicenceTo.java b/protocol/src/main/java/com/vocabimate/protocol/ILicenceTo.java
index 28953055a2..87c3a9143f 100644
--- a/protocol/src/main/java/com/vocabimate/protocol/ILicenceTo.java
+++ b/protocol/src/main/java/com/vocabimate/protocol/ILicenceTo.java
@@ -8,7 +8,7 @@
 public interface ILicenceTo extends Serializable {
     String jsonBody();
     /**
-     * @return Retrun request type, GET, POST etc.
+     * @return request type, GET, POST etc.
      */
     String getRequestType();
     String getToken();
@@ -16,4 +16,8 @@
     String getUniqueKeyPathForVCB(); // Every Key must have a unique path, otherwise keys may get replaced or 2nd key with same path may not download
     String getLocalEncryptionKey();
     String getLocalEncryptionIV();
+    // this could be null
+    ILicenceContract getLicence();
+
+    Class<? extends ILicenceWrapperContract> getLicenceResponseModelClass();
 }
diff --git a/protocol/src/main/java/com/vocabimate/protocol/ILicenceWrapperContract.java b/protocol/src/main/java/com/vocabimate/protocol/ILicenceWrapperContract.java
new file mode 100644
index 0000000000..4c229b3541
--- /dev/null
+++ b/protocol/src/main/java/com/vocabimate/protocol/ILicenceWrapperContract.java
@@ -0,0 +1,8 @@
+package com.vocabimate.protocol;
+
+/**
+ * Created by Hisham on 29/Oct/2018 - 21:04
+ */
+public interface ILicenceWrapperContract {
+    ILicenceContract getLicenseFile();
+}
diff --git a/protocol/src/main/java/com/vocabimate/protocol/KeyHelper.java b/protocol/src/main/java/com/vocabimate/protocol/KeyHelper.java
index 17653ddd51..633e45ddb4 100644
--- a/protocol/src/main/java/com/vocabimate/protocol/KeyHelper.java
+++ b/protocol/src/main/java/com/vocabimate/protocol/KeyHelper.java
@@ -12,8 +12,9 @@
     private String licenceUrl;
     private String localEncryptionKey;
     private String localEncryptionIV;
+    private ILicenceContract licenceContract;
 
-    public KeyHelper(String m3u8Path, String token, String licenceUrl, String localEncryptionKey, String localEncryptionIV) {
+    protected KeyHelper(String m3u8Path, String token, String licenceUrl, String localEncryptionKey, String localEncryptionIV) {
         this.m3u8Path = m3u8Path;
         this.token = token;
         this.licenceUrl = licenceUrl;
@@ -21,6 +22,15 @@ public KeyHelper(String m3u8Path, String token, String licenceUrl, String localE
         this.localEncryptionIV = localEncryptionIV;
     }
 
+    /*package*/ void setLicence(ILicenceContract licence) {
+        this.licenceContract = licence;
+    }
+
+    @Override
+    public ILicenceContract getLicence() {
+        return this.licenceContract;
+    }
+
     @Override
     public String getToken() {
         return token;
diff --git a/protocol/src/main/java/com/vocabimate/protocol/LicenceModel.java b/protocol/src/main/java/com/vocabimate/protocol/LicenceModel.java
deleted file mode 100644
index e90b925d8e..0000000000
--- a/protocol/src/main/java/com/vocabimate/protocol/LicenceModel.java
+++ /dev/null
@@ -1,131 +0,0 @@
-package com.vocabimate.protocol;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.util.Date;
-
-/**
- * Created by Hisham on 16/Oct/2018 - 14:27
- */
-public class LicenceModel {
-
-    @SerializedName("licenseFile")
-    private Licence licenseFile;
-
-    public Licence getLicenseFile() {
-        return licenseFile;
-    }
-
-    public LicenceModel setLicenseFile(Licence licenseFile) {
-        this.licenseFile = licenseFile;
-        return this;
-    }
-
-    public class Licence{
-
-        private int userId;
-        private int videoId;
-        private String decryptionKey;
-        private Date validateDt;
-        private Date createDt;
-        private String createUserId;
-        private Date updateDt;
-        private String updateUserId;
-        private String delInd;
-
-        public Licence() { //no operation
-        }
-
-        public Licence(int userId, int videoId) {
-            super();
-            this.userId = userId;
-            this.videoId = videoId;
-        }
-
-        public Licence(int userId, int videoId, Date validateDt, Date createDt, String createUserId, Date updateDt, String updateUserId, String delInd) {
-            super();
-            this.userId = userId;
-            this.videoId = videoId;
-            this.validateDt = validateDt;
-            this.createDt = createDt;
-            this.createUserId = createUserId;
-            this.updateDt = updateDt;
-            this.updateUserId = updateUserId;
-            this.delInd = delInd;
-        }
-
-        public int getUserId() {
-            return userId;
-        }
-
-        public void setUserId(int userId) {
-            this.userId = userId;
-        }
-
-        public int getVideoId() {
-            return videoId;
-        }
-
-        public void setVideoId(int videoId) {
-            this.videoId = videoId;
-        }
-
-        public Date getValidateDt() {
-            return validateDt;
-        }
-
-        public void setValidateDt(Date validateDt) {
-            this.validateDt = validateDt;
-        }
-
-        public Date getCreateDt() {
-            return createDt;
-        }
-
-        public void setCreateDt(Date createDt) {
-            this.createDt = createDt;
-        }
-
-        public String getCreateUserId() {
-            return createUserId;
-        }
-
-        public void setCreateUserId(String createUserId) {
-            this.createUserId = createUserId;
-        }
-
-        public Date getUpdateDt() {
-            return updateDt;
-        }
-
-        public void setUpdateDt(Date updateDt) {
-            this.updateDt = updateDt;
-        }
-
-        public String getUpdateUserId() {
-            return updateUserId;
-        }
-
-        public void setUpdateUserId(String updateUserId) {
-            this.updateUserId = updateUserId;
-        }
-
-        public String getDelInd() {
-            return delInd;
-        }
-
-        public void setDelInd(String delInd) {
-            this.delInd = delInd;
-        }
-
-        public String getDecryptionKey() {
-            return decryptionKey;
-        }
-
-        public void setDecryptionKey(String decryptionKey) {
-            this.decryptionKey = decryptionKey;
-        }
-
-    }
-
-}
diff --git a/protocol/src/main/java/com/vocabimate/protocol/VocabimateHttpUrlConnection.java b/protocol/src/main/java/com/vocabimate/protocol/VocabimateHttpUrlConnection.java
index 850ebc7cc3..872048aaeb 100644
--- a/protocol/src/main/java/com/vocabimate/protocol/VocabimateHttpUrlConnection.java
+++ b/protocol/src/main/java/com/vocabimate/protocol/VocabimateHttpUrlConnection.java
@@ -17,7 +17,7 @@
 public class VocabimateHttpUrlConnection extends HttpURLConnection {
 
     protected VocAbsInputStream vocAbsInputStream;
-    private ILicenceTo licence;
+    private ILicenceTo licenceTo;
 
     /**
      * @see com.vocabimate.protocol.VocabimateInputStream VocabimateInputStream
@@ -35,9 +35,9 @@ public VocabimateHttpUrlConnection(URL url) throws IOException {
     @Override
     public void connect() throws IOException {
 
-        // todo Need to fix things here, not getting token and licence url on older phones.
-        String licence_url = licence.getLicenceUrl();//getRequestProperty("licence_url");
-        String token = licence.getToken();//getRequestProperty("access_token");
+        // todo Need to fix things here, not getting token and licenceTo url on older phones.
+        String licence_url = licenceTo.getLicenceUrl();//getRequestProperty("licence_url");
+        String token = licenceTo.getToken();//getRequestProperty("access_token");
 //        if (licence_url == null) {
 //            throw new Error("Licence url is not provided in header, please set 'licence_url' just like access_token");
 //        }
@@ -46,7 +46,7 @@ public void connect() throws IOException {
 //        }
         URL url = new URL(licence_url);
         HttpURLConnection connection = (HttpURLConnection) url.openConnection();
-        String requestType = licence.getRequestType();
+        String requestType = licenceTo.getRequestType();
         if(requestType == null) {
             connection.setRequestMethod("POST"); // default
         } else {
@@ -57,7 +57,7 @@ public void connect() throws IOException {
         connection.setRequestProperty("access_token", token);
         connection.setRequestProperty("Content-Type", "application/json");
 
-        String requestBody = licence.jsonBody();
+        String requestBody = licenceTo.jsonBody();
         if(requestBody != null) {
             OutputStreamWriter wr = new OutputStreamWriter(connection.getOutputStream());
             wr.write(requestBody);
@@ -66,16 +66,22 @@ public void connect() throws IOException {
 
         if (token != null) {
             String result = readStream(connection.getInputStream());
-            LicenceModel licenceModel = new Gson().fromJson(result, LicenceModel.class);
-            InputStream stream = null;
-            if (licenceModel != null && licenceModel.getLicenseFile() != null && licenceModel.getLicenseFile().getDecryptionKey() != null) {
-                TokenDecryptionHelper tokenDecryptionHelper = new TokenDecryptionHelper(token, licenceModel.getLicenseFile().getDecryptionKey());
-                byte[] decrypt = tokenDecryptionHelper.decrypt();
-                stream = new ByteArrayInputStream(decrypt);
+            ILicenceWrapperContract licenceWrapper = new Gson().fromJson(result, licenceTo.getLicenceResponseModelClass());
+            InputStream stream;
+            if (licenceWrapper != null) {
+                ILicenceContract licenseFile = licenceWrapper.getLicenseFile();
+                if(licenceTo instanceof KeyHelper) {
+                    ((KeyHelper)licenceTo).setLicence(licenseFile);
+                }
+                if(licenseFile != null && licenseFile.getDecryptionKey() != null) {
+                    TokenDecryptionHelper tokenDecryptionHelper = new TokenDecryptionHelper(token, licenseFile.getDecryptionKey());
+                    byte[] decrypt = tokenDecryptionHelper.decrypt();
+                    stream = new ByteArrayInputStream(decrypt);
 //            for (int i = 0; i < decrypt.length; i++) {
 //                buffer[i] = decrypt[i];
 //            }
-                vocAbsInputStream.setInputStream(stream);
+                    vocAbsInputStream.setInputStream(stream);
+                }
             }
         }
         connected = true;
@@ -134,6 +140,6 @@ public InputStream getInputStream() throws IOException {
     }
 
     public void setKeyHelper(ILicenceTo licence) {
-        this.licence = licence;
+        this.licenceTo = licence;
     }
 }
