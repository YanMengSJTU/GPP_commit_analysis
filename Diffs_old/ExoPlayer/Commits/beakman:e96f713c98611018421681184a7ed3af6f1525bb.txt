diff --git a/demo/demo-demo-release.apk b/demo/demo-demo-release.apk
new file mode 100644
index 0000000000..22aa87b379
Binary files /dev/null and b/demo/demo-demo-release.apk differ
diff --git a/demo/src/main/AndroidManifest.xml b/demo/src/main/AndroidManifest.xml
index 6cf98d2aca..bbf2a65f34 100644
--- a/demo/src/main/AndroidManifest.xml
+++ b/demo/src/main/AndroidManifest.xml
@@ -1,5 +1,5 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
+<?xml version="1.0" encoding="utf-8"?><!--
+ Copyright (C) 2016 The Android Open Source Project
 
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
@@ -13,65 +13,89 @@
      See the License for the specific language governing permissions and
      limitations under the License.
 -->
-
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.google.android.exoplayer2.demo"
     android:versionCode="2000"
     android:versionName="2.0.0">
 
-  <uses-permission android:name="android.permission.INTERNET"/>
-  <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
 
-  <uses-sdk android:minSdkVersion="16" android:targetSdkVersion="24"/>
+    <application
+        android:name=".DemoApplication"
+        android:allowBackup="false"
+        android:icon="@drawable/ic_launcher"
+        android:label="@string/application_name"
+        android:largeHeap="true">
+        <activity
+            android:name=".SampleChooserActivity"
+            android:configChanges="keyboardHidden"
+            android:label="@string/application_name">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
 
-  <application
-      android:label="@string/application_name"
-      android:icon="@drawable/ic_launcher"
-      android:largeHeap="true"
-      android:allowBackup="false"
-      android:name="com.google.android.exoplayer2.demo.DemoApplication">
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
 
-    <activity android:name="com.google.android.exoplayer2.demo.SampleChooserActivity"
-        android:configChanges="keyboardHidden"
-        android:label="@string/application_name">
-      <intent-filter>
-        <action android:name="android.intent.action.MAIN"/>
-        <category android:name="android.intent.category.LAUNCHER"/>
-      </intent-filter>
-      <intent-filter>
-        <action android:name="android.intent.action.VIEW"/>
-        <category android:name="android.intent.category.DEFAULT"/>
-        <category android:name="android.intent.category.BROWSABLE"/>
-        <data android:scheme="http"/>
-        <data android:scheme="https"/>
-        <data android:scheme="content"/>
-        <data android:scheme="asset"/>
-        <data android:scheme="file"/>
-        <data android:host="*"/>
-        <data android:pathPattern=".*\\.exolist\\.json"/>
-      </intent-filter>
-    </activity>
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
 
-    <activity android:name="com.google.android.exoplayer2.demo.PlayerActivity"
-        android:configChanges="keyboard|keyboardHidden|orientation|screenSize|screenLayout|smallestScreenSize|uiMode"
-        android:launchMode="singleTop"
-        android:label="@string/application_name"
-        android:theme="@style/PlayerTheme">
-      <intent-filter>
-        <action android:name="com.google.android.exoplayer.demo.action.VIEW"/>
-        <category android:name="android.intent.category.DEFAULT"/>
-        <data android:scheme="http"/>
-        <data android:scheme="https"/>
-        <data android:scheme="content"/>
-        <data android:scheme="asset"/>
-        <data android:scheme="file"/>
-      </intent-filter>
-      <intent-filter>
-        <action android:name="com.google.android.exoplayer.demo.action.VIEW_LIST"/>
-        <category android:name="android.intent.category.DEFAULT"/>
-      </intent-filter>
-    </activity>
+                <data android:scheme="http" />
+                <data android:scheme="https" />
+                <data android:scheme="content" />
+                <data android:scheme="asset" />
+                <data android:scheme="file" />
+                <data android:host="*" />
+                <data android:pathPattern=".*\\.exolist\\.json" />
+            </intent-filter>
+        </activity>
+        <activity
+            android:name=".PlayerActivity"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize|screenLayout|smallestScreenSize|uiMode"
+            android:label="@string/application_name"
+            android:launchMode="singleTop"
+            android:theme="@style/PlayerTheme">
+            <intent-filter>
+                <action android:name="com.google.android.exoplayer.demo.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+
+                <data android:scheme="http" />
+                <data android:scheme="https" />
+                <data android:scheme="content" />
+                <data android:scheme="asset" />
+                <data android:scheme="file" />
+            </intent-filter>
+            <intent-filter>
+                <action android:name="com.google.android.exoplayer.demo.action.VIEW_LIST" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+            </intent-filter>
+        </activity>
+
+        <service
+            android:name=".LogService"
+            android:enabled="true"
+            android:exported="true" />
 
-  </application>
+        <receiver android:name="com.google.android.exoplayer2.demo.AutomationReceiver">
+            <intent-filter>
+                <action android:name="COMMAND" />
+                <action android:name="EXTRA_COMMAND" />
+                <action android:name="VIDEO_SOURCE" />
+                <action android:name="EXTRA_PARAMS" />
+                <action android:name="DRM_SCHEME_UUID_EXTRA" />
+                <action android:name="DRM_LICENSE_URL" />
+                <action android:name="DRM_KEY_REQUEST_PROPERTIES" />
+                <action android:name="PREFER_EXTENSION_DECODERS" />
+                <action android:name="EXTENSION_EXTRA" />
+            </intent-filter>
+        </receiver>
+    </application>
 
-</manifest>
+</manifest>
\ No newline at end of file
diff --git a/demo/src/main/assets/media.exolist.json b/demo/src/main/assets/media.exolist.json
index b067098baa..cf6ddfc465 100644
--- a/demo/src/main/assets/media.exolist.json
+++ b/demo/src/main/assets/media.exolist.json
@@ -399,6 +399,38 @@
           }
         ]
       },
+      {
+        "name": "Demos DASH",
+        "playlist": [
+          {
+            "uri": "http://yt-dash-mse-test.commondatastorage.googleapis.com/media/car-20120827-85.mp4"
+          },
+          {
+            "uri": "http://yt-dash-mse-test.commondatastorage.googleapis.com/media/car-20120827-86.mp4"
+          },
+          {
+            "uri": "http://yt-dash-mse-test.commondatastorage.googleapis.com/media/car-20120827-87.mp4"
+          },
+          {
+            "uri": "http://yt-dash-mse-test.commondatastorage.googleapis.com/media/car-20120827-88.mp4"
+          },
+          {
+            "uri": "http://yt-dash-mse-test.commondatastorage.googleapis.com/media/car-20120827-89.mp4"
+          },
+          {
+            "uri": "http://yt-dash-mse-test.commondatastorage.googleapis.com/media/car_cenc-20120827-85.mp4"
+          },
+          {
+            "uri": "http://yt-dash-mse-test.commondatastorage.googleapis.com/media/feelings_vp9-20130806-171.webm"
+          },
+          {
+            "uri": "http://yt-dash-mse-test.commondatastorage.googleapis.com/media/car_cenc-20120827-manifest.mpd"
+          },
+          {
+            "uri": "http://yt-dash-mse-test.commondatastorage.googleapis.com/media/motion-20120802-85.mp4"
+          }
+        ]
+      },
       {
         "name": "Audio -> Video",
         "playlist": [
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/AutomationReceiver.java b/demo/src/main/java/com/google/android/exoplayer2/demo/AutomationReceiver.java
new file mode 100644
index 0000000000..948eb25a79
--- /dev/null
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/AutomationReceiver.java
@@ -0,0 +1,130 @@
+package com.google.android.exoplayer2.demo;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.util.Log;
+import android.net.Uri;
+import android.preference.PreferenceManager;
+
+import com.google.android.exoplayer2.util.Util;
+import com.google.android.exoplayer2.demo.SampleChooserActivity;
+import com.google.android.exoplayer2.demo.PlayerActivity;
+
+
+// Tenemos que llamar a esta funcion:
+/*
+private void onSampleSelected(Sample sample) {
+    PlayerActivity.VIDEO_SOURCE = sample.uri;
+    Intent mpdIntent = new Intent(this, PlayerActivity.class)
+    .setData(Uri.parse(sample.uri))
+    .putExtra(PlayerActivity.CONTENT_ID_EXTRA, sample.contentId)
+    .putExtra(PlayerActivity.CONTENT_TYPE_EXTRA, sample.type)
+    .putExtra(PlayerActivity.PROVIDER_EXTRA, sample.provider);
+    startActivity(mpdIntent);
+    }
+*/
+public class AutomationReceiver extends BroadcastReceiver {
+
+    /*
+    * Parametros del BroadcastReceiver
+    *
+    * - COMMAND_INTENT: esto creo que lo puedo quitar
+    * - EXTRA_COMMAND: esto es la accion a realizar (reproducir, reproducir x2, parar, etc)
+    * - VIDEO_SOURCE: la url donde esta alojado el video
+    * - EXTRA_PARAMS: esto creo que lo puedo quitar
+    * - DRM_SCHEME_UUID_EXTRA: parametros necesarios para videos con drm
+    * - DRM_LICENSE_URL: parametros necesarios para videos con drm
+    * - DRM_KEY_REQUEST_PROPERTIES: parametros necesarios para videos con drm
+    * - PREFER_EXTENSION_DECODERS: parametros necesarios para videos con drm
+    * - DBNAME: nombre de la base de datos que va a crear
+    *
+    * */
+    public static final String COMMAND_INTENT = "COMMAND";
+    public static final String EXTRA_COMMAND = "EXTRA_COMMAND";
+    public static final String VIDEO_SOURCE = "VIDEO_SOURCE";
+    public static final String EXTRA_PARAMS = "EXTRA_PARAMS";
+    public static final String DRM_SCHEME_UUID_EXTRA = "DRM_SCHEME_UUID_EXTRA";
+    public static final String DRM_LICENSE_URL = "DRM_LICENSE_URL";
+    public static final String DRM_KEY_REQUEST_PROPERTIES = "DRM_KEY_REQUEST_PROPERTIES";
+    public static final String PREFER_EXTENSION_DECODERS = "PREFER_EXTENSION_DECODERS";
+    public static final String EXTENSION_EXTRA = "EXTENSION_EXTRA";
+    private static final String TAG = "AutomationReceiver";
+    private Context mContext;
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        mContext = context;
+        String action = intent.getAction();
+        Log.d(TAG, "onReceive executed!");
+        if (action.equals(COMMAND_INTENT)) {
+            String command = intent.getStringExtra(EXTRA_COMMAND); // el comando ej: PLAY:VID:INI
+            if (command != null) {
+                Log.d(TAG, "Processing command...");
+                String drm_scheme_uuid = intent.getStringExtra(DRM_SCHEME_UUID_EXTRA);
+                String drm_license_url = intent.getStringExtra(DRM_LICENSE_URL);
+                String drm_key_request_properties = intent.getStringExtra(DRM_KEY_REQUEST_PROPERTIES);
+                String prefer_extension_decoders = intent.getStringExtra(PREFER_EXTENSION_DECODERS);
+                String video_source = intent.getStringExtra(VIDEO_SOURCE);
+                processCommand(command, video_source, drm_scheme_uuid, drm_license_url, drm_key_request_properties, prefer_extension_decoders);
+            }
+        }
+    }
+
+    // Estos son las funciones que se ejecutan con cada comando.
+    // La sitaxis de los comandos es SCAPY.
+    private void processCommand(String command,
+                                String video_source,
+                                String drm_sheme_uuid,
+                                String drm_license_url,
+                                String drm_key_request_properties,
+                                String prefer_extension_decoders) {
+        if (command.equalsIgnoreCase("PLAY:VID:INI")) {
+            playVideo(video_source, drm_sheme_uuid, drm_license_url, drm_key_request_properties, prefer_extension_decoders);
+            Log.d(TAG, "Command match: PLAY:VID:INI");
+        } else if (command.equalsIgnoreCase("PLAY:VID:5:MIN")) {
+            playVideoTo(video_source, 5);
+            Log.d(TAG, "Command match: PLAY:VID:5:MIN");
+        } else if (command.equalsIgnoreCase("STOP:VID")) {
+            stopVideo();
+            Log.d(TAG, "Command match: STOP:VID");
+        }
+    }
+
+    // Estas son las funciones que se ejecutan cuando se recibe cierto comando
+    public void playVideo(String video_source,
+                          String drm_sheme_uuid,
+                          String drm_license_url,
+                          String drm_key_request_properties,
+                          String prefer_extension_decoders) {
+        Log.d(TAG, "Play video!");
+        Intent mpdIntent = new Intent(mContext, PlayerActivity.class)
+                .setData(Uri.parse(video_source))
+                .putExtra(PlayerActivity.DRM_SCHEME_UUID_EXTRA, drm_sheme_uuid)
+                .putExtra(PlayerActivity.DRM_LICENSE_URL, drm_license_url)
+                .putExtra(PlayerActivity.DRM_KEY_REQUEST_PROPERTIES, drm_key_request_properties)
+                .putExtra(PlayerActivity.PREFER_EXTENSION_DECODERS, prefer_extension_decoders)
+                .setAction("com.google.android.exoplayer.demo.action.VIEW");
+        mContext.startActivity(mpdIntent);
+    }
+
+    public void playVideoTo(String video_source, int time) {
+        Log.d(TAG, "Play video for 5 minutes!");
+        /*Intent mpdIntent = new Intent(mContext, PlayerActivity.class)
+                .setData(Uri.parse(video_source))
+                .putExtra(PlayerActivity.CONTENT_ID_EXTRA, "0894c7c8719b28a0")
+                .putExtra(PlayerActivity.CONTENT_TYPE_EXTRA, Util.TYPE_DASH)
+                .putExtra(PlayerActivity.PROVIDER_EXTRA, "widevine_test")
+                .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(mpdIntent);*/
+    }
+
+    public void stopVideo() {
+        Log.d(TAG, "Stop video!");
+        Intent intent = new Intent(mContext, SampleChooserActivity.class)
+                .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        //llamamos a la actividad
+        mContext.startActivity(intent);
+    }
+
+}
\ No newline at end of file
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/EventLogger.java b/demo/src/main/java/com/google/android/exoplayer2/demo/EventLogger.java
index b4c7c0fa2b..a7327d30cf 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/EventLogger.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/EventLogger.java
@@ -48,7 +48,7 @@
 import java.util.List;
 import java.util.Locale;
 
-import omlBasePackage.OMLBase;
+import com.google.android.exoplayer2.demo.LogService;
 
 /**
  * Logs player events using {@link Log}.
@@ -80,6 +80,99 @@ public EventLogger() {
 
   // ExoPlayer.EventListener
 
+  private static String getTimeString(long timeMs) {
+    return timeMs == C.TIME_UNSET ? "?" : TIME_FORMAT.format((timeMs) / 1000f);
+  }
+
+  private static String getStateString(int state) {
+    switch (state) {
+      case ExoPlayer.STATE_BUFFERING:
+        return "B";
+      case ExoPlayer.STATE_ENDED:
+        return "E";
+      case ExoPlayer.STATE_IDLE:
+        return "I";
+      case ExoPlayer.STATE_READY:
+        return "R";
+      default:
+        return "?";
+    }
+  }
+
+  private static String getFormatSupportString(int formatSupport) {
+    switch (formatSupport) {
+      case RendererCapabilities.FORMAT_HANDLED:
+        return "YES";
+      case RendererCapabilities.FORMAT_EXCEEDS_CAPABILITIES:
+        return "NO_EXCEEDS_CAPABILITIES";
+      case RendererCapabilities.FORMAT_UNSUPPORTED_SUBTYPE:
+        return "NO_UNSUPPORTED_TYPE";
+      case RendererCapabilities.FORMAT_UNSUPPORTED_TYPE:
+        return "NO";
+      default:
+        return "?";
+    }
+  }
+
+  private static String getAdaptiveSupportString(int trackCount, int adaptiveSupport) {
+    if (trackCount < 2) {
+      return "N/A";
+    }
+    switch (adaptiveSupport) {
+      case RendererCapabilities.ADAPTIVE_SEAMLESS:
+        return "YES";
+      case RendererCapabilities.ADAPTIVE_NOT_SEAMLESS:
+        return "YES_NOT_SEAMLESS";
+      case RendererCapabilities.ADAPTIVE_NOT_SUPPORTED:
+        return "NO";
+      default:
+        return "?";
+    }
+  }
+
+  private static String getFormatString(Format format) {
+    if (format == null) {
+      return "null";
+    }
+    StringBuilder builder = new StringBuilder();
+    builder.append("id=").append(format.id).append(", mimeType=").append(format.sampleMimeType);
+    if (format.bitrate != Format.NO_VALUE) {
+      builder.append(", bitrate=").append(format.bitrate);
+    }
+    if (format.width != Format.NO_VALUE && format.height != Format.NO_VALUE) {
+      builder.append(", res=").append(format.width).append("x").append(format.height);
+    }
+    if (format.frameRate != Format.NO_VALUE) {
+      builder.append(", fps=").append(format.frameRate);
+    }
+    if (format.channelCount != Format.NO_VALUE) {
+      builder.append(", channels=").append(format.channelCount);
+    }
+    if (format.sampleRate != Format.NO_VALUE) {
+      builder.append(", sample_rate=").append(format.sampleRate);
+    }
+    if (format.language != null) {
+      builder.append(", language=").append(format.language);
+    }
+    return builder.toString();
+  }
+
+  // MappingTrackSelector.EventListener
+
+  private static String getTrackStatusString(TrackSelection selection, TrackGroup group,
+                                             int trackIndex) {
+    return getTrackStatusString(selection != null && selection.getTrackGroup() == group
+            && selection.indexOf(trackIndex) != C.INDEX_UNSET);
+  }
+
+  // MetadataRenderer.Output<List<Id3Frame>>
+
+  private static String getTrackStatusString(boolean enabled) {
+    return enabled ? "[X]" : "[ ]";
+  }
+
+  // AudioRendererEventListener
+
   @Override
   public void onLoadingChanged(boolean isLoading) {
     Log.d(TAG, "loading [" + isLoading + "]");
@@ -88,7 +181,7 @@ public void onLoadingChanged(boolean isLoading) {
   @Override
   public void onPlayerStateChanged(boolean playWhenReady, int state) {
     Log.d(TAG, "state [" + getSessionTimeString() + ", " + playWhenReady + ", "
-        + getStateString(state) + "]");
+            + getStateString(state) + "]");
   }
 
   @Override
@@ -103,15 +196,15 @@ public void onTimelineChanged(Timeline timeline, Object manifest) {
     Log.d(TAG, "sourceInfo [periodCount=" + periodCount + ", windowCount=" + windowCount);
     for (int i = 0; i < Math.min(periodCount, MAX_TIMELINE_ITEM_LINES); i++) {
       timeline.getPeriod(i, period);
-      Log.d(TAG, "  " +  "period [" + getTimeString(period.getDurationMs()) + "]");
+      Log.d(TAG, "  " + "period [" + getTimeString(period.getDurationMs()) + "]");
     }
     if (periodCount > MAX_TIMELINE_ITEM_LINES) {
       Log.d(TAG, "  ...");
     }
     for (int i = 0; i < Math.min(windowCount, MAX_TIMELINE_ITEM_LINES); i++) {
       timeline.getWindow(i, window);
-      Log.d(TAG, "  " +  "window [" + getTimeString(window.getDurationMs()) + ", "
-          + window.isSeekable + ", " + window.isDynamic + "]");
+      Log.d(TAG, "  " + "window [" + getTimeString(window.getDurationMs()) + ", "
+              + window.isSeekable + ", " + window.isDynamic + "]");
     }
     if (windowCount > MAX_TIMELINE_ITEM_LINES) {
       Log.d(TAG, "  ...");
@@ -124,8 +217,6 @@ public void onPlayerError(ExoPlaybackException e) {
     Log.e(TAG, "playerFailed [" + getSessionTimeString() + "]", e);
   }
 
-  // MappingTrackSelector.EventListener
-
   @Override
   public void onTracksChanged(TrackInfo trackInfo) {
     Log.d(TAG, "Tracks [");
@@ -138,15 +229,15 @@ public void onTracksChanged(TrackInfo trackInfo) {
         for (int groupIndex = 0; groupIndex < trackGroups.length; groupIndex++) {
           TrackGroup trackGroup = trackGroups.get(groupIndex);
           String adaptiveSupport = getAdaptiveSupportString(
-              trackGroup.length, trackInfo.getAdaptiveSupport(rendererIndex, groupIndex, false));
+                  trackGroup.length, trackInfo.getAdaptiveSupport(rendererIndex, groupIndex, false));
           Log.d(TAG, "    Group:" + groupIndex + ", adaptive_supported=" + adaptiveSupport + " [");
           for (int trackIndex = 0; trackIndex < trackGroup.length; trackIndex++) {
             String status = getTrackStatusString(trackSelection, trackGroup, trackIndex);
             String formatSupport = getFormatSupportString(
-                trackInfo.getTrackFormatSupport(rendererIndex, groupIndex, trackIndex));
+                    trackInfo.getTrackFormatSupport(rendererIndex, groupIndex, trackIndex));
             Log.d(TAG, "      " + status + " Track:" + trackIndex + ", "
-                + getFormatString(trackGroup.getFormat(trackIndex))
-                + ", supported=" + formatSupport);
+                    + getFormatString(trackGroup.getFormat(trackIndex))
+                    + ", supported=" + formatSupport);
           }
           Log.d(TAG, "    ]");
         }
@@ -163,10 +254,10 @@ public void onTracksChanged(TrackInfo trackInfo) {
         for (int trackIndex = 0; trackIndex < trackGroup.length; trackIndex++) {
           String status = getTrackStatusString(false);
           String formatSupport = getFormatSupportString(
-              RendererCapabilities.FORMAT_UNSUPPORTED_TYPE);
+                  RendererCapabilities.FORMAT_UNSUPPORTED_TYPE);
           Log.d(TAG, "      " + status + " Track:" + trackIndex + ", "
-              + getFormatString(trackGroup.getFormat(trackIndex))
-              + ", supported=" + formatSupport);
+                  + getFormatString(trackGroup.getFormat(trackIndex))
+                  + ", supported=" + formatSupport);
         }
         Log.d(TAG, "    ]");
       }
@@ -175,7 +266,7 @@ public void onTracksChanged(TrackInfo trackInfo) {
     Log.d(TAG, "]");
   }
 
-  // MetadataRenderer.Output<List<Id3Frame>>
+  // VideoRendererEventListener
 
   @Override
   public void onMetadata(List<Id3Frame> id3Frames) {
@@ -183,30 +274,28 @@ public void onMetadata(List<Id3Frame> id3Frames) {
       if (id3Frame instanceof TxxxFrame) {
         TxxxFrame txxxFrame = (TxxxFrame) id3Frame;
         Log.i(TAG, String.format("ID3 TimedMetadata %s: description=%s, value=%s", txxxFrame.id,
-            txxxFrame.description, txxxFrame.value));
+                txxxFrame.description, txxxFrame.value));
       } else if (id3Frame instanceof PrivFrame) {
         PrivFrame privFrame = (PrivFrame) id3Frame;
         Log.i(TAG, String.format("ID3 TimedMetadata %s: owner=%s", privFrame.id, privFrame.owner));
       } else if (id3Frame instanceof GeobFrame) {
         GeobFrame geobFrame = (GeobFrame) id3Frame;
         Log.i(TAG, String.format("ID3 TimedMetadata %s: mimeType=%s, filename=%s, description=%s",
-            geobFrame.id, geobFrame.mimeType, geobFrame.filename, geobFrame.description));
+                geobFrame.id, geobFrame.mimeType, geobFrame.filename, geobFrame.description));
       } else if (id3Frame instanceof ApicFrame) {
         ApicFrame apicFrame = (ApicFrame) id3Frame;
         Log.i(TAG, String.format("ID3 TimedMetadata %s: mimeType=%s, description=%s",
-            apicFrame.id, apicFrame.mimeType, apicFrame.description));
+                apicFrame.id, apicFrame.mimeType, apicFrame.description));
       } else if (id3Frame instanceof TextInformationFrame) {
         TextInformationFrame textInformationFrame = (TextInformationFrame) id3Frame;
         Log.i(TAG, String.format("ID3 TimedMetadata %s: description=%s", textInformationFrame.id,
-            textInformationFrame.description));
+                textInformationFrame.description));
       } else {
         Log.i(TAG, String.format("ID3 TimedMetadata %s", id3Frame.id));
       }
     }
   }
 
-  // AudioRendererEventListener
-
   @Override
   public void onAudioEnabled(DecoderCounters counters) {
     Log.d(TAG, "audioEnabled [" + getSessionTimeString() + "]");
@@ -219,14 +308,14 @@ public void onAudioSessionId(int audioSessionId) {
 
   @Override
   public void onAudioDecoderInitialized(String decoderName, long elapsedRealtimeMs,
-      long initializationDurationMs) {
+                                        long initializationDurationMs) {
     Log.d(TAG, "audioDecoderInitialized [" + getSessionTimeString() + ", " + decoderName + "]");
   }
 
   @Override
   public void onAudioInputFormatChanged(Format format) {
     Log.d(TAG, "audioFormatChanged [" + getSessionTimeString() + ", " + getFormatString(format)
-        + "]");
+            + "]");
   }
 
   @Override
@@ -237,10 +326,10 @@ public void onAudioDisabled(DecoderCounters counters) {
   @Override
   public void onAudioTrackUnderrun(int bufferSize, long bufferSizeMs, long elapsedSinceLastFeedMs) {
     printInternalError("audioTrackUnderrun [" + bufferSize + ", " + bufferSizeMs + ", "
-        + elapsedSinceLastFeedMs + "]", null);
+            + elapsedSinceLastFeedMs + "]", null);
   }
 
-  // VideoRendererEventListener
+  // StreamingDrmSessionManager.EventListener
 
   @Override
   public void onVideoEnabled(DecoderCounters counters) {
@@ -249,16 +338,20 @@ public void onVideoEnabled(DecoderCounters counters) {
 
   @Override
   public void onVideoDecoderInitialized(String decoderName, long elapsedRealtimeMs,
-      long initializationDurationMs) {
+                                        long initializationDurationMs) {
     Log.d(TAG, "videoDecoderInitialized [" + getSessionTimeString() + ", " + decoderName + "]");
   }
 
+  // ExtractorMediaSource.EventListener
+
   @Override
   public void onVideoInputFormatChanged(Format format) {
     Log.d(TAG, "videoFormatChanged [" + getSessionTimeString() + ", " + getFormatString(format)
-        + "]");
+            + "]");
   }
 
+  // AdaptiveMediaSourceEventListener
+
   @Override
   public void onVideoDisabled(DecoderCounters counters) {
     Log.d(TAG, "videoDisabled [" + getSessionTimeString() + "]");
@@ -271,8 +364,10 @@ public void onDroppedFrames(int count, long elapsed) {
 
   @Override
   public void onVideoSizeChanged(int width, int height, int unappliedRotationDegrees,
-      float pixelWidthHeightRatio) {
+                                 float pixelWidthHeightRatio) {
     // Do nothing.
+    // LogService
+    LogService.logVideoSizeChange(width, height);
   }
 
   @Override
@@ -280,8 +375,6 @@ public void onRenderedFirstFrame(Surface surface) {
     // Do nothing.
   }
 
-  // StreamingDrmSessionManager.EventListener
-
   @Override
   public void onDrmSessionManagerError(Exception e) {
     printInternalError("drmSessionManagerError", e);
@@ -292,41 +385,39 @@ public void onDrmKeysLoaded() {
     Log.d(TAG, "drmKeysLoaded [" + getSessionTimeString() + "]");
   }
 
-  // ExtractorMediaSource.EventListener
+  // Internal methods
 
   @Override
   public void onLoadError(IOException error) {
     printInternalError("loadError", error);
   }
 
-  // AdaptiveMediaSourceEventListener
-
   @Override
   public void onLoadStarted(DataSpec dataSpec, int dataType, int trackType, Format trackFormat,
-      int trackSelectionReason, Object trackSelectionData, long mediaStartTimeMs,
-      long mediaEndTimeMs, long elapsedRealtimeMs) {
+                            int trackSelectionReason, Object trackSelectionData, long mediaStartTimeMs,
+                            long mediaEndTimeMs, long elapsedRealtimeMs) {
     // Do nothing.
   }
 
   @Override
   public void onLoadError(DataSpec dataSpec, int dataType, int trackType, Format trackFormat,
-      int trackSelectionReason, Object trackSelectionData, long mediaStartTimeMs,
-      long mediaEndTimeMs, long elapsedRealtimeMs, long loadDurationMs, long bytesLoaded,
-      IOException error, boolean wasCanceled) {
+                          int trackSelectionReason, Object trackSelectionData, long mediaStartTimeMs,
+                          long mediaEndTimeMs, long elapsedRealtimeMs, long loadDurationMs, long bytesLoaded,
+                          IOException error, boolean wasCanceled) {
     printInternalError("loadError", error);
   }
 
   @Override
   public void onLoadCanceled(DataSpec dataSpec, int dataType, int trackType, Format trackFormat,
-      int trackSelectionReason, Object trackSelectionData, long mediaStartTimeMs,
-      long mediaEndTimeMs, long elapsedRealtimeMs, long loadDurationMs, long bytesLoaded) {
+                             int trackSelectionReason, Object trackSelectionData, long mediaStartTimeMs,
+                             long mediaEndTimeMs, long elapsedRealtimeMs, long loadDurationMs, long bytesLoaded) {
     // Do nothing.
   }
 
   @Override
   public void onLoadCompleted(DataSpec dataSpec, int dataType, int trackType, Format trackFormat,
-      int trackSelectionReason, Object trackSelectionData, long mediaStartTimeMs,
-      long mediaEndTimeMs, long elapsedRealtimeMs, long loadDurationMs, long bytesLoaded) {
+                              int trackSelectionReason, Object trackSelectionData, long mediaStartTimeMs,
+                              long mediaEndTimeMs, long elapsedRealtimeMs, long loadDurationMs, long bytesLoaded) {
     // Do nothing.
   }
 
@@ -337,12 +428,10 @@ public void onUpstreamDiscarded(int trackType, long mediaStartTimeMs, long media
 
   @Override
   public void onDownstreamFormatChanged(int trackType, Format trackFormat, int trackSelectionReason,
-      Object trackSelectionData, long mediaTimeMs) {
+                                        Object trackSelectionData, long mediaTimeMs) {
     // Do nothing.
   }
 
-  // Internal methods
-
   private void printInternalError(String type, Exception e) {
     Log.e(TAG, "internalError [" + getSessionTimeString() + ", " + type + "]", e);
   }
@@ -351,91 +440,4 @@ private String getSessionTimeString() {
     return getTimeString(SystemClock.elapsedRealtime() - startTimeMs);
   }
 
-  private static String getTimeString(long timeMs) {
-    return timeMs == C.TIME_UNSET ? "?" : TIME_FORMAT.format((timeMs) / 1000f);
-  }
-
-  private static String getStateString(int state) {
-    switch (state) {
-      case ExoPlayer.STATE_BUFFERING:
-        return "B";
-      case ExoPlayer.STATE_ENDED:
-        return "E";
-      case ExoPlayer.STATE_IDLE:
-        return "I";
-      case ExoPlayer.STATE_READY:
-        return "R";
-      default:
-        return "?";
-    }
-  }
-
-  private static String getFormatSupportString(int formatSupport) {
-    switch (formatSupport) {
-      case RendererCapabilities.FORMAT_HANDLED:
-        return "YES";
-      case RendererCapabilities.FORMAT_EXCEEDS_CAPABILITIES:
-        return "NO_EXCEEDS_CAPABILITIES";
-      case RendererCapabilities.FORMAT_UNSUPPORTED_SUBTYPE:
-        return "NO_UNSUPPORTED_TYPE";
-      case RendererCapabilities.FORMAT_UNSUPPORTED_TYPE:
-        return "NO";
-      default:
-        return "?";
-    }
-  }
-
-  private static String getAdaptiveSupportString(int trackCount, int adaptiveSupport) {
-    if (trackCount < 2) {
-      return "N/A";
-    }
-    switch (adaptiveSupport) {
-      case RendererCapabilities.ADAPTIVE_SEAMLESS:
-        return "YES";
-      case RendererCapabilities.ADAPTIVE_NOT_SEAMLESS:
-        return "YES_NOT_SEAMLESS";
-      case RendererCapabilities.ADAPTIVE_NOT_SUPPORTED:
-        return "NO";
-      default:
-        return "?";
-    }
-  }
-
-  private static String getFormatString(Format format) {
-    if (format == null) {
-      return "null";
-    }
-    StringBuilder builder = new StringBuilder();
-    builder.append("id=").append(format.id).append(", mimeType=").append(format.sampleMimeType);
-    if (format.bitrate != Format.NO_VALUE) {
-      builder.append(", bitrate=").append(format.bitrate);
-    }
-    if (format.width != Format.NO_VALUE && format.height != Format.NO_VALUE) {
-      builder.append(", res=").append(format.width).append("x").append(format.height);
-    }
-    if (format.frameRate != Format.NO_VALUE) {
-      builder.append(", fps=").append(format.frameRate);
-    }
-    if (format.channelCount != Format.NO_VALUE) {
-      builder.append(", channels=").append(format.channelCount);
-    }
-    if (format.sampleRate != Format.NO_VALUE) {
-      builder.append(", sample_rate=").append(format.sampleRate);
-    }
-    if (format.language != null) {
-      builder.append(", language=").append(format.language);
-    }
-    return builder.toString();
-  }
-
-  private static String getTrackStatusString(TrackSelection selection, TrackGroup group,
-      int trackIndex) {
-    return getTrackStatusString(selection != null && selection.getTrackGroup() == group
-        && selection.indexOf(trackIndex) != C.INDEX_UNSET);
-  }
-
-  private static String getTrackStatusString(boolean enabled) {
-    return enabled ? "[X]" : "[ ]";
-  }
-
 }
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/LogService.java b/demo/src/main/java/com/google/android/exoplayer2/demo/LogService.java
index f4ff5de384..1555872773 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/LogService.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/LogService.java
@@ -1,13 +1,24 @@
 package com.google.android.exoplayer2.demo;
 
+import java.sql.Array;
+import java.sql.DatabaseMetaData;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.lang.Thread;
 
+/* OML libraries */
 import omlBasePackage.OMLBase;
 import omlBasePackage.OMLMPFieldDef;
 import omlBasePackage.OMLTypes;
 import omlBasePackage.OmlMP;
 
+/* PostgreSQL libraries */
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
 import android.app.Activity;
 import android.app.Service;
 import android.content.Intent;
@@ -34,17 +45,21 @@
     IBinder mBinder = new LocalBinder();
     private String audio_format;
 
-    public static void TestMsg(String test) {
-        Log.d("[LogService]", test);
-    }
-
+    //
     public static void logVideoSizeChange(int w, int h) {
         Log.d("[LogService]", "logVideoSizeChange");
         timestamp = formatter.format(System.currentTimeMillis());
-        String[] data = {String.valueOf(timestamp), String.valueOf(w), String.valueOf(h)};
+        final String[] data = {String.valueOf(timestamp), String.valueOf(w), String.valueOf(h)};
         if (isOmlRunning) {
-            Log.d("[LogService]", "video_mp: " + data);
-            measure_points.get(0).inject(data);
+            // hay que inyectar los datos en un nuevo thread, sino
+            // se bloquea por un error NetworkOnMainThreadException
+            Thread t = new Thread(new Runnable() {
+                public void run() {
+                    measure_points.get(0).inject(data);
+                    Log.d("[LogService]", "video_mp: " + data[0] + ", " + data[1] + ", " + data[2]);
+                }
+            });
+            t.start();
         } else {
             Log.d("[LogService]", "OML Server not running yet.");
         }
@@ -94,6 +109,7 @@ public void logAudioFormatChange(String audioFormat) {
     }
 
     public class LocalBinder extends Binder {
+
         public LogService getServerInstance() {
             return LogService.this;
         }
@@ -115,7 +131,65 @@ protected void onPostExecute(ArrayList<OmlMP> result) {
         @Override
         protected ArrayList<OmlMP> doInBackground(String... experimentName) {
             // Returns a value, that is catched by the onPostExecute method.
-            String experiment_name = "ex_" + formatter.format(System.currentTimeMillis());
+            // String experiment_name = "ex_" + formatter.format(System.currentTimeMillis());
+            // PostgreSQL connection to get db name
+//            try {
+//                Class.forName("org.postgresql.Driver");
+//                // "jdbc:postgresql://IP:PUERTO/DB", "USER", "PASSWORD")
+//                Log.d("[dbService]", "Database connection...");
+//                String url = "jdbc:postgresql://94.177.232.57:5432/experiments_registry";
+//                Connection conn = DriverManager.getConnection(url, "oml", "tester");
+//                //En el stsql se puede agregar cualquier consulta SQL deseada.
+//                String stsql = "Select version()";
+//                Log.d("[dbService]", "Select version()");
+//                Statement st = conn.createStatement();
+//                ResultSet rs = st.executeQuery(stsql);
+//                rs.next();
+//                DatabaseMetaData meta = conn.getMetaData();
+//                ResultSet res = meta.getCatalogs();
+//                while (rs.next()) {
+//                    System.out.println("TABLE_CAT = " + rs.getString("TABLE_CAT") );
+//                    Log.d("[dbService]", "TABLE_CAT = " + rs.getString("TABLE_CAT"));
+//                }
+//                res.close();
+//                conn.close();
+//            } catch (SQLException se) {
+//                System.out.println("oops! No se puede conectar. Error: " + se.toString());
+//                Log.d("[dbService]", "oops! No se puede conectar. Error: " + se.toString());
+//                se.printStackTrace();
+//            } catch (ClassNotFoundException e) {
+//                System.out.println("oops! No se encuentra la clase. Error: " + e.getMessage());
+//                Log.d("[dbService]", "oops! No se encuentra la clase. Error: " + e.getMessage());
+//                e.printStackTrace();
+//            }
+            // otra forma
+            try {
+                Class.forName("org.postgresql.Driver");
+            } catch (ClassNotFoundException e) {
+                e.printStackTrace();
+            }
+            String url = "jdbc:postgresql://94.177.232.57:5432/experiments_registry?user=oml&password=tester";
+            Connection conn;
+            String exp_name = null;
+            try {
+                DriverManager.setLoginTimeout(5);
+                Log.d("[dbService]", "Connecting to database...");
+                conn = DriverManager.getConnection(url);
+                Log.d("[dbService]", "Connected! :-)");
+                Statement st = conn.createStatement();
+                String query = "SELECT * FROM experiments ORDER BY id DESC LIMIT 1";
+                ResultSet rs = st.executeQuery(query);
+                while (rs.next()) {
+                    exp_name = rs.getString("experiment_name");
+                    Log.d("[dbService]", "Experiment name = " + exp_name);
+                }
+                rs.close();
+                st.close();
+                conn.close();
+            } catch (SQLException e) {
+                e.printStackTrace();
+            }
+            String experiment_name = exp_name;
             OMLBase oml = new OMLBase("ExoPlayer", experiment_name, "exoplayer", "tcp:94.177.232.57:3003");
             ArrayList<OmlMP> measurePoints = new ArrayList<>();
             ArrayList<OMLMPFieldDef> videoMp = new ArrayList<>();
@@ -131,8 +205,8 @@ protected void onPostExecute(ArrayList<OmlMP> result) {
             OmlMP audio_mp = new OmlMP(audioMp);
 
             // Add schema
-            oml.addmp("video", video_mp);
-            oml.addmp("audio", audio_mp);
+            oml.addmp("ExoPlayer_video", video_mp);
+            oml.addmp("ExoPlayer_audio", audio_mp);
 
             oml.start();
 
@@ -143,5 +217,6 @@ protected void onPostExecute(ArrayList<OmlMP> result) {
 
             return measurePoints;
         }
+
     }
 }
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java b/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
index eaa4d9971f..485de5fd21 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
@@ -99,6 +99,9 @@
     DEFAULT_COOKIE_MANAGER.setCookiePolicy(CookiePolicy.ACCEPT_ORIGINAL_SERVER);
   }
 
+  // LogService
+  private LogService logservice;
+
   private Handler mainHandler;
   private EventLogger eventLogger;
   private SimpleExoPlayerView simpleExoPlayerView;
@@ -248,6 +251,13 @@ private void initializePlayer() {
         }
       }
 
+      // LogService
+      if (LogService.logServiceIsRunning) {
+        stopService(new Intent(this, LogService.class));
+      }
+      startService(new Intent(this, LogService.class));
+      logservice = new LogService();
+
       eventLogger = new EventLogger();
       TrackSelection.Factory videoTrackSelectionFactory =
           new AdaptiveVideoTrackSelection.Factory(BANDWIDTH_METER);
@@ -262,6 +272,7 @@ private void initializePlayer() {
       player.setAudioDebugListener(eventLogger);
       player.setVideoDebugListener(eventLogger);
       player.setId3Output(eventLogger);
+
       simpleExoPlayerView.setPlayer(player);
       if (shouldRestorePosition) {
         if (playerPosition == C.TIME_UNSET) {
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java b/demo/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
index 95d42e0532..33d8821ce8 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
@@ -92,6 +92,180 @@ private void onSampleSelected(Sample sample) {
     startActivity(sample.buildIntent(this));
   }
 
+  private static final class SampleAdapter extends BaseExpandableListAdapter {
+
+    private final Context context;
+    private final List<SampleGroup> sampleGroups;
+
+    public SampleAdapter(Context context, List<SampleGroup> sampleGroups) {
+      this.context = context;
+      this.sampleGroups = sampleGroups;
+    }
+
+    @Override
+    public Sample getChild(int groupPosition, int childPosition) {
+      return getGroup(groupPosition).samples.get(childPosition);
+    }
+
+    @Override
+    public long getChildId(int groupPosition, int childPosition) {
+      return childPosition;
+    }
+
+    @Override
+    public View getChildView(int groupPosition, int childPosition, boolean isLastChild,
+                             View convertView, ViewGroup parent) {
+      View view = convertView;
+      if (view == null) {
+        view = LayoutInflater.from(context).inflate(android.R.layout.simple_list_item_1, parent,
+                false);
+      }
+      ((TextView) view).setText(getChild(groupPosition, childPosition).name);
+      return view;
+    }
+
+    @Override
+    public int getChildrenCount(int groupPosition) {
+      return getGroup(groupPosition).samples.size();
+    }
+
+    @Override
+    public SampleGroup getGroup(int groupPosition) {
+      return sampleGroups.get(groupPosition);
+    }
+
+    @Override
+    public long getGroupId(int groupPosition) {
+      return groupPosition;
+    }
+
+    @Override
+    public View getGroupView(int groupPosition, boolean isExpanded, View convertView,
+                             ViewGroup parent) {
+      View view = convertView;
+      if (view == null) {
+        view = LayoutInflater.from(context).inflate(android.R.layout.simple_expandable_list_item_1,
+                parent, false);
+      }
+      ((TextView) view).setText(getGroup(groupPosition).title);
+      return view;
+    }
+
+    @Override
+    public int getGroupCount() {
+      return sampleGroups.size();
+    }
+
+    @Override
+    public boolean hasStableIds() {
+      return false;
+    }
+
+    @Override
+    public boolean isChildSelectable(int groupPosition, int childPosition) {
+      return true;
+    }
+
+  }
+
+  private static final class SampleGroup {
+
+    public final String title;
+    public final List<Sample> samples;
+
+    public SampleGroup(String title) {
+      this.title = title;
+      this.samples = new ArrayList<>();
+    }
+
+  }
+
+  private abstract static class Sample {
+
+    public final String name;
+    public final boolean preferExtensionDecoders;
+    public final UUID drmSchemeUuid;
+    public final String drmLicenseUrl;
+    public final String[] drmKeyRequestProperties;
+
+    public Sample(String name, UUID drmSchemeUuid, String drmLicenseUrl,
+        String[] drmKeyRequestProperties, boolean preferExtensionDecoders) {
+      this.name = name;
+      this.drmSchemeUuid = drmSchemeUuid;
+      this.drmLicenseUrl = drmLicenseUrl;
+      this.drmKeyRequestProperties = drmKeyRequestProperties;
+      this.preferExtensionDecoders = preferExtensionDecoders;
+    }
+
+    public Intent buildIntent(Context context) {
+      Intent intent = new Intent(context, PlayerActivity.class);
+      intent.putExtra(PlayerActivity.PREFER_EXTENSION_DECODERS, preferExtensionDecoders);
+      if (drmSchemeUuid != null) {
+        try {
+          Log.d("[paco] drmSchemeUuid", drmSchemeUuid.toString());
+          Log.d("[paco] drmLicenseUrl", drmLicenseUrl);
+        } catch (Exception e) {
+          e.printStackTrace();
+        }
+        intent.putExtra(PlayerActivity.DRM_SCHEME_UUID_EXTRA, drmSchemeUuid.toString());
+        intent.putExtra(PlayerActivity.DRM_LICENSE_URL, drmLicenseUrl);
+        intent.putExtra(PlayerActivity.DRM_KEY_REQUEST_PROPERTIES, drmKeyRequestProperties);
+      }
+      return intent;
+    }
+
+  }
+
+  private static final class UriSample extends Sample {
+
+    public final String uri;
+    public final String extension;
+
+    public UriSample(String name, UUID drmSchemeUuid, String drmLicenseUrl,
+                     String[] drmKeyRequestProperties, boolean preferExtensionDecoders, String uri,
+                     String extension) {
+      super(name, drmSchemeUuid, drmLicenseUrl, drmKeyRequestProperties, preferExtensionDecoders);
+      this.uri = uri;
+      this.extension = extension;
+    }
+
+    @Override
+    public Intent buildIntent(Context context) {
+      return super.buildIntent(context)
+              .setData(Uri.parse(uri))
+              .putExtra(PlayerActivity.EXTENSION_EXTRA, extension)
+              .setAction(PlayerActivity.ACTION_VIEW);
+    }
+
+  }
+
+  private static final class PlaylistSample extends Sample {
+
+    public final UriSample[] children;
+
+    public PlaylistSample(String name, UUID drmSchemeUuid, String drmLicenseUrl,
+                          String[] drmKeyRequestProperties, boolean preferExtensionDecoders,
+                          UriSample... children) {
+      super(name, drmSchemeUuid, drmLicenseUrl, drmKeyRequestProperties, preferExtensionDecoders);
+      this.children = children;
+    }
+
+    @Override
+    public Intent buildIntent(Context context) {
+      String[] uris = new String[children.length];
+      String[] extensions = new String[children.length];
+      for (int i = 0; i < children.length; i++) {
+        uris[i] = children[i].uri;
+        extensions[i] = children[i].extension;
+      }
+      return super.buildIntent(context)
+              .putExtra(PlayerActivity.URI_LIST_EXTRA, uris)
+              .putExtra(PlayerActivity.EXTENSION_LIST_EXTRA, extensions)
+              .setAction(PlayerActivity.ACTION_VIEW_LIST);
+    }
+
+  }
+
   private final class SampleListLoader extends AsyncTask<String, Void, List<SampleGroup>> {
 
     private boolean sawError;
@@ -190,12 +364,12 @@ private Sample readEntry(JsonReader reader, boolean insidePlaylist) throws IOExc
             break;
           case "drm_license_url":
             Assertions.checkState(!insidePlaylist,
-                "Invalid attribute on nested item: drm_license_url");
+                    "Invalid attribute on nested item: drm_license_url");
             drmLicenseUrl = reader.nextString();
             break;
           case "drm_key_request_properties":
             Assertions.checkState(!insidePlaylist,
-                "Invalid attribute on nested item: drm_key_request_properties");
+                    "Invalid attribute on nested item: drm_key_request_properties");
             ArrayList<String> drmKeyRequestPropertiesList = new ArrayList<>();
             reader.beginObject();
             while (reader.hasNext()) {
@@ -207,7 +381,7 @@ private Sample readEntry(JsonReader reader, boolean insidePlaylist) throws IOExc
             break;
           case "prefer_extension_decoders":
             Assertions.checkState(!insidePlaylist,
-                "Invalid attribute on nested item: prefer_extension_decoders");
+                    "Invalid attribute on nested item: prefer_extension_decoders");
             preferExtensionDecoders = reader.nextBoolean();
             break;
           case "playlist":
@@ -227,12 +401,12 @@ private Sample readEntry(JsonReader reader, boolean insidePlaylist) throws IOExc
 
       if (playlistSamples != null) {
         UriSample[] playlistSamplesArray = playlistSamples.toArray(
-            new UriSample[playlistSamples.size()]);
+                new UriSample[playlistSamples.size()]);
         return new PlaylistSample(sampleName, drmUuid, drmLicenseUrl, drmKeyRequestProperties,
-            preferExtensionDecoders, playlistSamplesArray);
+                preferExtensionDecoders, playlistSamplesArray);
       } else {
         return new UriSample(sampleName, drmUuid, drmLicenseUrl, drmKeyRequestProperties,
-            preferExtensionDecoders, uri, extension);
+                preferExtensionDecoders, uri, extension);
       }
     }
 
@@ -264,172 +438,4 @@ private UUID getDrmUuid(String typeString) throws ParserException {
 
   }
 
-  private static final class SampleAdapter extends BaseExpandableListAdapter {
-
-    private final Context context;
-    private final List<SampleGroup> sampleGroups;
-
-    public SampleAdapter(Context context, List<SampleGroup> sampleGroups) {
-      this.context = context;
-      this.sampleGroups = sampleGroups;
-    }
-
-    @Override
-    public Sample getChild(int groupPosition, int childPosition) {
-      return getGroup(groupPosition).samples.get(childPosition);
-    }
-
-    @Override
-    public long getChildId(int groupPosition, int childPosition) {
-      return childPosition;
-    }
-
-    @Override
-    public View getChildView(int groupPosition, int childPosition, boolean isLastChild,
-        View convertView, ViewGroup parent) {
-      View view = convertView;
-      if (view == null) {
-        view = LayoutInflater.from(context).inflate(android.R.layout.simple_list_item_1, parent,
-            false);
-      }
-      ((TextView) view).setText(getChild(groupPosition, childPosition).name);
-      return view;
-    }
-
-    @Override
-    public int getChildrenCount(int groupPosition) {
-      return getGroup(groupPosition).samples.size();
-    }
-
-    @Override
-    public SampleGroup getGroup(int groupPosition) {
-      return sampleGroups.get(groupPosition);
-    }
-
-    @Override
-    public long getGroupId(int groupPosition) {
-      return groupPosition;
-    }
-
-    @Override
-    public View getGroupView(int groupPosition, boolean isExpanded, View convertView,
-        ViewGroup parent) {
-      View view = convertView;
-      if (view == null) {
-        view = LayoutInflater.from(context).inflate(android.R.layout.simple_expandable_list_item_1,
-            parent, false);
-      }
-      ((TextView) view).setText(getGroup(groupPosition).title);
-      return view;
-    }
-
-    @Override
-    public int getGroupCount() {
-      return sampleGroups.size();
-    }
-
-    @Override
-    public boolean hasStableIds() {
-      return false;
-    }
-
-    @Override
-    public boolean isChildSelectable(int groupPosition, int childPosition) {
-      return true;
-    }
-
-  }
-
-  private static final class SampleGroup {
-
-    public final String title;
-    public final List<Sample> samples;
-
-    public SampleGroup(String title) {
-      this.title = title;
-      this.samples = new ArrayList<>();
-    }
-
-  }
-
-  private abstract static class Sample {
-
-    public final String name;
-    public final boolean preferExtensionDecoders;
-    public final UUID drmSchemeUuid;
-    public final String drmLicenseUrl;
-    public final String[] drmKeyRequestProperties;
-
-    public Sample(String name, UUID drmSchemeUuid, String drmLicenseUrl,
-        String[] drmKeyRequestProperties, boolean preferExtensionDecoders) {
-      this.name = name;
-      this.drmSchemeUuid = drmSchemeUuid;
-      this.drmLicenseUrl = drmLicenseUrl;
-      this.drmKeyRequestProperties = drmKeyRequestProperties;
-      this.preferExtensionDecoders = preferExtensionDecoders;
-    }
-
-    public Intent buildIntent(Context context) {
-      Intent intent = new Intent(context, PlayerActivity.class);
-      intent.putExtra(PlayerActivity.PREFER_EXTENSION_DECODERS, preferExtensionDecoders);
-      if (drmSchemeUuid != null) {
-        intent.putExtra(PlayerActivity.DRM_SCHEME_UUID_EXTRA, drmSchemeUuid.toString());
-        intent.putExtra(PlayerActivity.DRM_LICENSE_URL, drmLicenseUrl);
-        intent.putExtra(PlayerActivity.DRM_KEY_REQUEST_PROPERTIES, drmKeyRequestProperties);
-      }
-      return intent;
-    }
-
-  }
-
-  private static final class UriSample extends Sample {
-
-    public final String uri;
-    public final String extension;
-
-    public UriSample(String name, UUID drmSchemeUuid, String drmLicenseUrl,
-        String[] drmKeyRequestProperties, boolean preferExtensionDecoders, String uri,
-        String extension) {
-      super(name, drmSchemeUuid, drmLicenseUrl, drmKeyRequestProperties, preferExtensionDecoders);
-      this.uri = uri;
-      this.extension = extension;
-    }
-
-    @Override
-    public Intent buildIntent(Context context) {
-      return super.buildIntent(context)
-          .setData(Uri.parse(uri))
-          .putExtra(PlayerActivity.EXTENSION_EXTRA, extension)
-          .setAction(PlayerActivity.ACTION_VIEW);
-    }
-
-  }
-
-  private static final class PlaylistSample extends Sample {
-
-    public final UriSample[] children;
-
-    public PlaylistSample(String name, UUID drmSchemeUuid, String drmLicenseUrl,
-        String[] drmKeyRequestProperties, boolean preferExtensionDecoders,
-        UriSample... children) {
-      super(name, drmSchemeUuid, drmLicenseUrl, drmKeyRequestProperties, preferExtensionDecoders);
-      this.children = children;
-    }
-
-    @Override
-    public Intent buildIntent(Context context) {
-      String[] uris = new String[children.length];
-      String[] extensions = new String[children.length];
-      for (int i = 0; i < children.length; i++) {
-        uris[i] = children[i].uri;
-        extensions[i] = children[i].extension;
-      }
-      return super.buildIntent(context)
-          .putExtra(PlayerActivity.URI_LIST_EXTRA, uris)
-          .putExtra(PlayerActivity.EXTENSION_LIST_EXTRA, extensions)
-          .setAction(PlayerActivity.ACTION_VIEW_LIST);
-    }
-
-  }
-
 }
diff --git a/library/build.gradle b/library/build.gradle
index d301e0903e..0016896428 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -55,6 +55,8 @@ dependencies {
     androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
     androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
     androidTestCompile 'org.mockito:mockito-core:1.9.5'
+    compile 'org.postgresql:postgresql:9.4.1212.jre7'
+    compile project(':oml4j')
 }
 
 android.libraryVariants.all { variant ->
