diff --git a/extensions/ffmpeg/src/main/java/com/google/android/exoplayer2/ext/ffmpeg/FfmpegDecoder.java b/extensions/ffmpeg/src/main/java/com/google/android/exoplayer2/ext/ffmpeg/FfmpegDecoder.java
index c78b02aa5b..5314835d1e 100644
--- a/extensions/ffmpeg/src/main/java/com/google/android/exoplayer2/ext/ffmpeg/FfmpegDecoder.java
+++ b/extensions/ffmpeg/src/main/java/com/google/android/exoplayer2/ext/ffmpeg/FfmpegDecoder.java
@@ -24,6 +24,7 @@
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.ParsableByteArray;
+import com.google.android.exoplayer2.util.Util;
 import java.nio.ByteBuffer;
 import java.util.List;
 
@@ -106,7 +107,7 @@ protected FfmpegDecoderException createUnexpectedDecodeException(Throwable error
         return new FfmpegDecoderException("Error resetting (see logcat).");
       }
     }
-    ByteBuffer inputData = inputBuffer.data;
+    ByteBuffer inputData = Util.castNonNull(inputBuffer.data);
     int inputSize = inputData.limit();
     ByteBuffer outputData = outputBuffer.init(inputBuffer.timeUs, outputBufferSize);
     int result = ffmpegDecode(nativeContext, inputData, inputSize, outputData, outputBufferSize);
@@ -132,8 +133,8 @@ protected FfmpegDecoderException createUnexpectedDecodeException(Throwable error
       }
       hasOutputFormat = true;
     }
-    outputBuffer.data.position(0);
-    outputBuffer.data.limit(result);
+    outputData.position(0);
+    outputData.limit(result);
     return null;
   }
 
diff --git a/extensions/flac/src/main/java/com/google/android/exoplayer2/ext/flac/FlacDecoder.java b/extensions/flac/src/main/java/com/google/android/exoplayer2/ext/flac/FlacDecoder.java
index 50eb048d98..890d82a006 100644
--- a/extensions/flac/src/main/java/com/google/android/exoplayer2/ext/flac/FlacDecoder.java
+++ b/extensions/flac/src/main/java/com/google/android/exoplayer2/ext/flac/FlacDecoder.java
@@ -22,6 +22,7 @@
 import com.google.android.exoplayer2.decoder.SimpleDecoder;
 import com.google.android.exoplayer2.decoder.SimpleOutputBuffer;
 import com.google.android.exoplayer2.util.FlacStreamMetadata;
+import com.google.android.exoplayer2.util.Util;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.util.List;
@@ -101,7 +102,7 @@ protected FlacDecoderException decode(
     if (reset) {
       decoderJni.flush();
     }
-    decoderJni.setData(inputBuffer.data);
+    decoderJni.setData(Util.castNonNull(inputBuffer.data));
     ByteBuffer outputData = outputBuffer.init(inputBuffer.timeUs, maxOutputBufferSize);
     try {
       decoderJni.decodeSample(outputData);
diff --git a/extensions/opus/src/main/java/com/google/android/exoplayer2/ext/opus/OpusDecoder.java b/extensions/opus/src/main/java/com/google/android/exoplayer2/ext/opus/OpusDecoder.java
index d93036113c..f0e993e3b9 100644
--- a/extensions/opus/src/main/java/com/google/android/exoplayer2/ext/opus/OpusDecoder.java
+++ b/extensions/opus/src/main/java/com/google/android/exoplayer2/ext/opus/OpusDecoder.java
@@ -23,6 +23,7 @@
 import com.google.android.exoplayer2.decoder.SimpleOutputBuffer;
 import com.google.android.exoplayer2.drm.DecryptionException;
 import com.google.android.exoplayer2.drm.ExoMediaCrypto;
+import com.google.android.exoplayer2.util.Util;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.util.List;
@@ -165,7 +166,7 @@ protected OpusDecoderException decode(
       // any other time, skip number of samples as specified by seek preroll.
       skipSamples = (inputBuffer.timeUs == 0) ? headerSkipSamples : headerSeekPreRollSamples;
     }
-    ByteBuffer inputData = inputBuffer.data;
+    ByteBuffer inputData = Util.castNonNull(inputBuffer.data);
     CryptoInfo cryptoInfo = inputBuffer.cryptoInfo;
     int result = inputBuffer.isEncrypted()
         ? opusSecureDecode(nativeDecoderContext, inputBuffer.timeUs, inputData, inputData.limit(),
@@ -185,7 +186,7 @@ protected OpusDecoderException decode(
       }
     }
 
-    ByteBuffer outputData = outputBuffer.data;
+    ByteBuffer outputData = Util.castNonNull(outputBuffer.data);
     outputData.position(0);
     outputData.limit(result);
     if (skipSamples > 0) {
diff --git a/extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/VpxDecoder.java b/extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/VpxDecoder.java
index 0efd4bd0ea..1392e782f8 100644
--- a/extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/VpxDecoder.java
+++ b/extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/VpxDecoder.java
@@ -22,6 +22,7 @@
 import com.google.android.exoplayer2.decoder.SimpleDecoder;
 import com.google.android.exoplayer2.drm.DecryptionException;
 import com.google.android.exoplayer2.drm.ExoMediaCrypto;
+import com.google.android.exoplayer2.util.Util;
 import com.google.android.exoplayer2.video.VideoDecoderInputBuffer;
 import java.nio.ByteBuffer;
 
@@ -118,7 +119,7 @@ protected VpxDecoderException createUnexpectedDecodeException(Throwable error) {
   @Nullable
   protected VpxDecoderException decode(
       VideoDecoderInputBuffer inputBuffer, VpxOutputBuffer outputBuffer, boolean reset) {
-    ByteBuffer inputData = inputBuffer.data;
+    ByteBuffer inputData = Util.castNonNull(inputBuffer.data);
     int inputSize = inputData.limit();
     CryptoInfo cryptoInfo = inputBuffer.cryptoInfo;
     final long result = inputBuffer.isEncrypted()
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/BaseRenderer.java b/library/core/src/main/java/com/google/android/exoplayer2/BaseRenderer.java
index 1099b14bfc..f5db0145fe 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/BaseRenderer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/BaseRenderer.java
@@ -65,6 +65,7 @@ public final void setIndex(int index) {
   }
 
   @Override
+  @Nullable
   public MediaClock getMediaClock() {
     return null;
   }
@@ -105,6 +106,7 @@ public final void replaceStream(Format[] formats, SampleStream stream, long offs
   }
 
   @Override
+  @Nullable
   public final SampleStream getStream() {
     return stream;
   }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/NoSampleRenderer.java b/library/core/src/main/java/com/google/android/exoplayer2/NoSampleRenderer.java
index e901025a07..894736571c 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/NoSampleRenderer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/NoSampleRenderer.java
@@ -49,6 +49,7 @@ public final void setIndex(int index) {
   }
 
   @Override
+  @Nullable
   public MediaClock getMediaClock() {
     return null;
   }
@@ -113,6 +114,7 @@ public final void replaceStream(Format[] formats, SampleStream stream, long offs
   }
 
   @Override
+  @Nullable
   public final SampleStream getStream() {
     return stream;
   }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/Renderer.java b/library/core/src/main/java/com/google/android/exoplayer2/Renderer.java
index 9f52e8d9de..9e44e3741c 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/Renderer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/Renderer.java
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2;
 
 import androidx.annotation.IntDef;
+import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.source.SampleStream;
 import com.google.android.exoplayer2.util.MediaClock;
 import java.io.IOException;
@@ -87,11 +88,12 @@
   /**
    * If the renderer advances its own playback position then this method returns a corresponding
    * {@link MediaClock}. If provided, the player will use the returned {@link MediaClock} as its
-   * source of time during playback. A player may have at most one renderer that returns a
-   * {@link MediaClock} from this method.
+   * source of time during playback. A player may have at most one renderer that returns a {@link
+   * MediaClock} from this method.
    *
    * @return The {@link MediaClock} tracking the playback position of the renderer, or null.
    */
+  @Nullable
   MediaClock getMediaClock();
 
   /**
@@ -147,9 +149,8 @@ void enable(RendererConfiguration configuration, Format[] formats, SampleStream
   void replaceStream(Format[] formats, SampleStream stream, long offsetUs)
       throws ExoPlaybackException;
 
-  /**
-   * Returns the {@link SampleStream} being consumed, or null if the renderer is disabled.
-   */
+  /** Returns the {@link SampleStream} being consumed, or null if the renderer is disabled. */
+  @Nullable
   SampleStream getStream();
 
   /**
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/analytics/package-info.java b/library/core/src/main/java/com/google/android/exoplayer2/analytics/package-info.java
new file mode 100644
index 0000000000..2764120d2a
--- /dev/null
+++ b/library/core/src/main/java/com/google/android/exoplayer2/analytics/package-info.java
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+@NonNullApi
+package com.google.android.exoplayer2.analytics;
+
+import com.google.android.exoplayer2.util.NonNullApi;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/audio/Ac3Util.java b/library/core/src/main/java/com/google/android/exoplayer2/audio/Ac3Util.java
index 4e4964e817..05c20939ff 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/audio/Ac3Util.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/audio/Ac3Util.java
@@ -156,7 +156,7 @@ private SyncFrameInfo(
    * @return The AC-3 format parsed from data in the header.
    */
   public static Format parseAc3AnnexFFormat(
-      ParsableByteArray data, String trackId, String language, DrmInitData drmInitData) {
+      ParsableByteArray data, String trackId, String language, @Nullable DrmInitData drmInitData) {
     int fscod = (data.readUnsignedByte() & 0xC0) >> 6;
     int sampleRate = SAMPLE_RATE_BY_FSCOD[fscod];
     int nextByte = data.readUnsignedByte();
@@ -189,7 +189,7 @@ public static Format parseAc3AnnexFFormat(
    * @return The E-AC-3 format parsed from data in the header.
    */
   public static Format parseEAc3AnnexFFormat(
-      ParsableByteArray data, String trackId, String language, DrmInitData drmInitData) {
+      ParsableByteArray data, String trackId, String language, @Nullable DrmInitData drmInitData) {
     data.skipBytes(2); // data_rate, num_ind_sub
 
     // Read the first independent substream.
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/audio/Ac4Util.java b/library/core/src/main/java/com/google/android/exoplayer2/audio/Ac4Util.java
index 74bd5bfe98..c54e3844a3 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/audio/Ac4Util.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/audio/Ac4Util.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.audio;
 
+import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.drm.DrmInitData;
@@ -95,7 +96,7 @@ private SyncFrameInfo(
    * @return The AC-4 format parsed from data in the header.
    */
   public static Format parseAc4AnnexEFormat(
-      ParsableByteArray data, String trackId, String language, DrmInitData drmInitData) {
+      ParsableByteArray data, String trackId, String language, @Nullable DrmInitData drmInitData) {
     data.skipBytes(1); // ac4_dsi_version, bitstream_version[0:5]
     int sampleRate = ((data.readUnsignedByte() & 0x20) >> 5 == 1) ? 48000 : 44100;
     return Format.createAudioSampleFormat(
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/audio/AudioAttributes.java b/library/core/src/main/java/com/google/android/exoplayer2/audio/AudioAttributes.java
index 9c63eb42c6..1b0d629da7 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/audio/AudioAttributes.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/audio/AudioAttributes.java
@@ -92,7 +92,7 @@ public AudioAttributes build() {
   public final @C.AudioFlags int flags;
   public final @C.AudioUsage int usage;
 
-  private @Nullable android.media.AudioAttributes audioAttributesV21;
+  @Nullable private android.media.AudioAttributes audioAttributesV21;
 
   private AudioAttributes(@C.AudioContentType int contentType, @C.AudioFlags int flags,
       @C.AudioUsage int usage) {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/audio/DtsUtil.java b/library/core/src/main/java/com/google/android/exoplayer2/audio/DtsUtil.java
index f65dc3fc4e..7af9d9f074 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/audio/DtsUtil.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/audio/DtsUtil.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.audio;
 
+import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.drm.DrmInitData;
 import com.google.android.exoplayer2.util.MimeTypes;
@@ -80,7 +81,7 @@ public static boolean isSyncWord(int word) {
    * @return The DTS format parsed from data in the header.
    */
   public static Format parseDtsFormat(
-      byte[] frame, String trackId, String language, DrmInitData drmInitData) {
+      byte[] frame, String trackId, @Nullable String language, @Nullable DrmInitData drmInitData) {
     ParsableBitArray frameBits = getNormalizedFrameHeader(frame);
     frameBits.skipBits(32 + 1 + 5 + 1 + 7 + 14); // SYNC, FTYPE, SHORT, CPF, NBLKS, FSIZE
     int amode = frameBits.readBits(6);
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java b/library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
index 6a29f316e1..251901f4f2 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
@@ -300,8 +300,10 @@ public MediaCodecAudioRenderer(
   }
 
   @Override
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector,
-      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager, Format format)
+  protected int supportsFormat(
+      MediaCodecSelector mediaCodecSelector,
+      @Nullable DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
+      Format format)
       throws DecoderQueryException {
     String mimeType = format.sampleMimeType;
     if (!MimeTypes.isAudio(mimeType)) {
@@ -386,7 +388,7 @@ protected void configureCodec(
       MediaCodecInfo codecInfo,
       MediaCodec codec,
       Format format,
-      MediaCrypto crypto,
+      @Nullable MediaCrypto crypto,
       float codecOperatingRate) {
     codecMaxInputSize = getCodecMaxInputSize(codecInfo, format, getStreamFormats());
     codecNeedsDiscardChannelsWorkaround = codecNeedsDiscardChannelsWorkaround(codecInfo.name);
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/audio/package-info.java b/library/core/src/main/java/com/google/android/exoplayer2/audio/package-info.java
new file mode 100644
index 0000000000..5ae2413d92
--- /dev/null
+++ b/library/core/src/main/java/com/google/android/exoplayer2/audio/package-info.java
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+@NonNullApi
+package com.google.android.exoplayer2.audio;
+
+import com.google.android.exoplayer2.util.NonNullApi;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/database/package-info.java b/library/core/src/main/java/com/google/android/exoplayer2/database/package-info.java
new file mode 100644
index 0000000000..4921e1aeea
--- /dev/null
+++ b/library/core/src/main/java/com/google/android/exoplayer2/database/package-info.java
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+@NonNullApi
+package com.google.android.exoplayer2.database;
+
+import com.google.android.exoplayer2.util.NonNullApi;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/decoder/Decoder.java b/library/core/src/main/java/com/google/android/exoplayer2/decoder/Decoder.java
index 7eb1fa1aa1..4552d190c3 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/decoder/Decoder.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/decoder/Decoder.java
@@ -15,6 +15,8 @@
  */
 package com.google.android.exoplayer2.decoder;
 
+import androidx.annotation.Nullable;
+
 /**
  * A media decoder.
  *
@@ -37,6 +39,7 @@
    * @return The input buffer, which will have been cleared, or null if a buffer isn't available.
    * @throws E If a decoder error has occurred.
    */
+  @Nullable
   I dequeueInputBuffer() throws E;
 
   /**
@@ -53,6 +56,7 @@
    * @return The output buffer, or null if an output buffer isn't available.
    * @throws E If a decoder error has occurred.
    */
+  @Nullable
   O dequeueOutputBuffer() throws E;
 
   /**
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/decoder/DecoderInputBuffer.java b/library/core/src/main/java/com/google/android/exoplayer2/decoder/DecoderInputBuffer.java
index 7fc6fb625a..c31ae92cfc 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/decoder/DecoderInputBuffer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/decoder/DecoderInputBuffer.java
@@ -16,11 +16,13 @@
 package com.google.android.exoplayer2.decoder;
 
 import androidx.annotation.IntDef;
+import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.nio.ByteBuffer;
+import org.checkerframework.checker.nullness.qual.EnsuresNonNull;
 
 /**
  * Holds input for a decoder.
@@ -58,10 +60,8 @@
    */
   public final CryptoInfo cryptoInfo;
 
-  /**
-   * The buffer's data, or {@code null} if no data has been set.
-   */
-  public ByteBuffer data;
+  /** The buffer's data, or {@code null} if no data has been set. */
+  @Nullable public ByteBuffer data;
 
   /**
    * The time at which the sample should be presented.
@@ -101,6 +101,7 @@ public DecoderInputBuffer(@BufferReplacementMode int bufferReplacementMode) {
    * @throws IllegalStateException If there is insufficient capacity to accommodate the write and
    *     the buffer replacement mode of the holder is {@link #BUFFER_REPLACEMENT_MODE_DISABLED}.
    */
+  @EnsuresNonNull("data")
   public void ensureSpaceForWrite(int length) {
     if (data == null) {
       data = createReplacementByteBuffer(length);
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/decoder/SimpleDecoder.java b/library/core/src/main/java/com/google/android/exoplayer2/decoder/SimpleDecoder.java
index b5650860e9..b7465f82eb 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/decoder/SimpleDecoder.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/decoder/SimpleDecoder.java
@@ -86,6 +86,7 @@ protected final void setInitialInputBufferSize(int size) {
   }
 
   @Override
+  @Nullable
   public final I dequeueInputBuffer() throws E {
     synchronized (lock) {
       maybeThrowException();
@@ -108,6 +109,7 @@ public final void queueInputBuffer(I inputBuffer) throws E {
   }
 
   @Override
+  @Nullable
   public final O dequeueOutputBuffer() throws E {
     synchronized (lock) {
       maybeThrowException();
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/decoder/SimpleOutputBuffer.java b/library/core/src/main/java/com/google/android/exoplayer2/decoder/SimpleOutputBuffer.java
index 49c7dafbd6..84cffc1145 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/decoder/SimpleOutputBuffer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/decoder/SimpleOutputBuffer.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.decoder;
 
+import androidx.annotation.Nullable;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 
@@ -25,7 +26,7 @@
 
   private final SimpleDecoder<?, SimpleOutputBuffer, ?> owner;
 
-  public ByteBuffer data;
+  @Nullable public ByteBuffer data;
 
   public SimpleOutputBuffer(SimpleDecoder<?, SimpleOutputBuffer, ?> owner) {
     this.owner = owner;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/decoder/package-info.java b/library/core/src/main/java/com/google/android/exoplayer2/decoder/package-info.java
new file mode 100644
index 0000000000..0c4dbde9d3
--- /dev/null
+++ b/library/core/src/main/java/com/google/android/exoplayer2/decoder/package-info.java
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+@NonNullApi
+package com.google.android.exoplayer2.decoder;
+
+import com.google.android.exoplayer2.util.NonNullApi;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/drm/package-info.java b/library/core/src/main/java/com/google/android/exoplayer2/drm/package-info.java
new file mode 100644
index 0000000000..d4820dd204
--- /dev/null
+++ b/library/core/src/main/java/com/google/android/exoplayer2/drm/package-info.java
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+@NonNullApi
+package com.google.android.exoplayer2.drm;
+
+import com.google.android.exoplayer2.util.NonNullApi;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java b/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
index 974e033b67..ee2c9ad1a3 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
@@ -452,12 +452,14 @@ public final int supportsFormat(Format format) throws ExoPlaybackException {
    * @param mediaCodecSelector The decoder selector.
    * @param drmSessionManager The renderer's {@link DrmSessionManager}.
    * @param format The format.
-   * @return The extent to which the renderer is capable of supporting the given format. See
-   *     {@link #supportsFormat(Format)} for more detail.
+   * @return The extent to which the renderer is capable of supporting the given format. See {@link
+   *     #supportsFormat(Format)} for more detail.
    * @throws DecoderQueryException If there was an error querying decoders.
    */
-  protected abstract int supportsFormat(MediaCodecSelector mediaCodecSelector,
-      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager, Format format)
+  protected abstract int supportsFormat(
+      MediaCodecSelector mediaCodecSelector,
+      @Nullable DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
+      Format format)
       throws DecoderQueryException;
 
   /**
@@ -487,7 +489,7 @@ protected abstract void configureCodec(
       MediaCodecInfo codecInfo,
       MediaCodec codec,
       Format format,
-      MediaCrypto crypto,
+      @Nullable MediaCrypto crypto,
       float codecOperatingRate);
 
   protected final void maybeInitCodec() throws ExoPlaybackException {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecUtil.java b/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecUtil.java
index cd4c4863ff..9c42916cad 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecUtil.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecUtil.java
@@ -239,6 +239,7 @@ public static int maxH264DecodableFrameSize() throws DecoderQueryException {
    * @return A pair (profile constant, level constant) if the codec of the {@code format} is
    *     well-formed and recognized, or null otherwise.
    */
+  @Nullable
   public static Pair<Integer, Integer> getCodecProfileAndLevel(Format format) {
     if (format.codecs == null) {
       return null;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/package-info.java b/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/package-info.java
new file mode 100644
index 0000000000..b09404a6f8
--- /dev/null
+++ b/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/package-info.java
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+@NonNullApi
+package com.google.android.exoplayer2.mediacodec;
+
+import com.google.android.exoplayer2.util.NonNullApi;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/metadata/emsg/EventMessageDecoder.java b/library/core/src/main/java/com/google/android/exoplayer2/metadata/emsg/EventMessageDecoder.java
index f592a6eee7..a1196c41c8 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/metadata/emsg/EventMessageDecoder.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/metadata/emsg/EventMessageDecoder.java
@@ -29,7 +29,7 @@
   @SuppressWarnings("ByteBufferBackingArray")
   @Override
   public Metadata decode(MetadataInputBuffer inputBuffer) {
-    ByteBuffer buffer = inputBuffer.data;
+    ByteBuffer buffer = Assertions.checkNotNull(inputBuffer.data);
     byte[] data = buffer.array();
     int size = buffer.limit();
     return new Metadata(decode(new ParsableByteArray(data, size)));
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/metadata/icy/IcyDecoder.java b/library/core/src/main/java/com/google/android/exoplayer2/metadata/icy/IcyDecoder.java
index 3d873926bb..12f65f1cda 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/metadata/icy/IcyDecoder.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/metadata/icy/IcyDecoder.java
@@ -20,6 +20,7 @@
 import com.google.android.exoplayer2.metadata.Metadata;
 import com.google.android.exoplayer2.metadata.MetadataDecoder;
 import com.google.android.exoplayer2.metadata.MetadataInputBuffer;
+import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Log;
 import com.google.android.exoplayer2.util.Util;
 import java.nio.ByteBuffer;
@@ -39,7 +40,7 @@
   @Nullable
   @SuppressWarnings("ByteBufferBackingArray")
   public Metadata decode(MetadataInputBuffer inputBuffer) {
-    ByteBuffer buffer = inputBuffer.data;
+    ByteBuffer buffer = Assertions.checkNotNull(inputBuffer.data);
     byte[] data = buffer.array();
     int length = buffer.limit();
     return decode(Util.fromUtf8Bytes(data, 0, length));
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/metadata/id3/Id3Decoder.java b/library/core/src/main/java/com/google/android/exoplayer2/metadata/id3/Id3Decoder.java
index 85a59c3aeb..c8755f9aee 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/metadata/id3/Id3Decoder.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/metadata/id3/Id3Decoder.java
@@ -20,6 +20,7 @@
 import com.google.android.exoplayer2.metadata.Metadata;
 import com.google.android.exoplayer2.metadata.MetadataDecoder;
 import com.google.android.exoplayer2.metadata.MetadataInputBuffer;
+import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Log;
 import com.google.android.exoplayer2.util.ParsableBitArray;
 import com.google.android.exoplayer2.util.ParsableByteArray;
@@ -99,7 +100,7 @@ public Id3Decoder(@Nullable FramePredicate framePredicate) {
   @Override
   @Nullable
   public Metadata decode(MetadataInputBuffer inputBuffer) {
-    ByteBuffer buffer = inputBuffer.data;
+    ByteBuffer buffer = Assertions.checkNotNull(inputBuffer.data);
     return decode(buffer.array(), buffer.limit());
   }
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/package-info.java b/library/core/src/main/java/com/google/android/exoplayer2/package-info.java
new file mode 100644
index 0000000000..690f2c40c3
--- /dev/null
+++ b/library/core/src/main/java/com/google/android/exoplayer2/package-info.java
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+@NonNullApi
+package com.google.android.exoplayer2;
+
+import com.google.android.exoplayer2.util.NonNullApi;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/scheduler/package-info.java b/library/core/src/main/java/com/google/android/exoplayer2/scheduler/package-info.java
new file mode 100644
index 0000000000..6273f325c4
--- /dev/null
+++ b/library/core/src/main/java/com/google/android/exoplayer2/scheduler/package-info.java
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+@NonNullApi
+package com.google.android.exoplayer2.scheduler;
+
+import com.google.android.exoplayer2.util.NonNullApi;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/source/SilenceMediaSource.java b/library/core/src/main/java/com/google/android/exoplayer2/source/SilenceMediaSource.java
index c3eab68983..3bb7ada7e0 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/source/SilenceMediaSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/source/SilenceMediaSource.java
@@ -220,9 +220,9 @@ public int readData(
 
       int bytesToWrite = (int) Math.min(SILENCE_SAMPLE.length, bytesRemaining);
       buffer.ensureSpaceForWrite(bytesToWrite);
-      buffer.addFlag(C.BUFFER_FLAG_KEY_FRAME);
       buffer.data.put(SILENCE_SAMPLE, /* offset= */ 0, bytesToWrite);
       buffer.timeUs = getAudioPositionUs(positionBytes);
+      buffer.addFlag(C.BUFFER_FLAG_KEY_FRAME);
       positionBytes += bytesToWrite;
       return C.RESULT_BUFFER_READ;
     }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/trackselection/package-info.java b/library/core/src/main/java/com/google/android/exoplayer2/trackselection/package-info.java
new file mode 100644
index 0000000000..45131e644b
--- /dev/null
+++ b/library/core/src/main/java/com/google/android/exoplayer2/trackselection/package-info.java
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+@NonNullApi
+package com.google.android.exoplayer2.trackselection;
+
+import com.google.android.exoplayer2.util.NonNullApi;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/util/AtomicFile.java b/library/core/src/main/java/com/google/android/exoplayer2/util/AtomicFile.java
index 74e50dfd92..f2259e8f1a 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/util/AtomicFile.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/util/AtomicFile.java
@@ -15,7 +15,6 @@
  */
 package com.google.android.exoplayer2.util;
 
-import androidx.annotation.NonNull;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
@@ -189,12 +188,12 @@ public void write(int b) throws IOException {
     }
 
     @Override
-    public void write(@NonNull byte[] b) throws IOException {
+    public void write(byte[] b) throws IOException {
       fileOutputStream.write(b);
     }
 
     @Override
-    public void write(@NonNull byte[] b, int off, int len) throws IOException {
+    public void write(byte[] b, int off, int len) throws IOException {
       fileOutputStream.write(b, off, len);
     }
   }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/util/HandlerWrapper.java b/library/core/src/main/java/com/google/android/exoplayer2/util/HandlerWrapper.java
index 8f1a6544ca..5b85b26c3f 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/util/HandlerWrapper.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/util/HandlerWrapper.java
@@ -18,6 +18,7 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
+import androidx.annotation.Nullable;
 
 /**
  * An interface to call through to a {@link Handler}. Instances must be created by calling {@link
@@ -32,13 +33,13 @@
   Message obtainMessage(int what);
 
   /** @see Handler#obtainMessage(int, Object) */
-  Message obtainMessage(int what, Object obj);
+  Message obtainMessage(int what, @Nullable Object obj);
 
   /** @see Handler#obtainMessage(int, int, int) */
   Message obtainMessage(int what, int arg1, int arg2);
 
   /** @see Handler#obtainMessage(int, int, int, Object) */
-  Message obtainMessage(int what, int arg1, int arg2, Object obj);
+  Message obtainMessage(int what, int arg1, int arg2, @Nullable Object obj);
 
   /** @see Handler#sendEmptyMessage(int) */
   boolean sendEmptyMessage(int what);
@@ -50,7 +51,7 @@
   void removeMessages(int what);
 
   /** @see Handler#removeCallbacksAndMessages(Object) */
-  void removeCallbacksAndMessages(Object token);
+  void removeCallbacksAndMessages(@Nullable Object token);
 
   /** @see Handler#post(Runnable) */
   boolean post(Runnable runnable);
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/util/SystemHandlerWrapper.java b/library/core/src/main/java/com/google/android/exoplayer2/util/SystemHandlerWrapper.java
index ee469a5b2a..1fbea2ed7e 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/util/SystemHandlerWrapper.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/util/SystemHandlerWrapper.java
@@ -17,6 +17,7 @@
 
 import android.os.Looper;
 import android.os.Message;
+import androidx.annotation.Nullable;
 
 /** The standard implementation of {@link HandlerWrapper}. */
 /* package */ final class SystemHandlerWrapper implements HandlerWrapper {
@@ -38,7 +39,7 @@ public Message obtainMessage(int what) {
   }
 
   @Override
-  public Message obtainMessage(int what, Object obj) {
+  public Message obtainMessage(int what, @Nullable Object obj) {
     return handler.obtainMessage(what, obj);
   }
 
@@ -48,7 +49,7 @@ public Message obtainMessage(int what, int arg1, int arg2) {
   }
 
   @Override
-  public Message obtainMessage(int what, int arg1, int arg2, Object obj) {
+  public Message obtainMessage(int what, int arg1, int arg2, @Nullable Object obj) {
     return handler.obtainMessage(what, arg1, arg2, obj);
   }
 
@@ -68,7 +69,7 @@ public void removeMessages(int what) {
   }
 
   @Override
-  public void removeCallbacksAndMessages(Object token) {
+  public void removeCallbacksAndMessages(@Nullable Object token) {
     handler.removeCallbacksAndMessages(token);
   }
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/util/UriUtil.java b/library/core/src/main/java/com/google/android/exoplayer2/util/UriUtil.java
index 071ebf2084..60f4fa17dd 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/util/UriUtil.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/util/UriUtil.java
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.util;
 
 import android.net.Uri;
+import androidx.annotation.Nullable;
 import android.text.TextUtils;
 
 /**
@@ -69,19 +70,19 @@ private UriUtil() {}
    * @param baseUri The base URI.
    * @param referenceUri The reference URI to resolve.
    */
-  public static Uri resolveToUri(String baseUri, String referenceUri) {
+  public static Uri resolveToUri(@Nullable String baseUri, @Nullable String referenceUri) {
     return Uri.parse(resolve(baseUri, referenceUri));
   }
 
   /**
    * Performs relative resolution of a {@code referenceUri} with respect to a {@code baseUri}.
-   * <p>
-   * The resolution is performed as specified by RFC-3986.
+   *
+   * <p>The resolution is performed as specified by RFC-3986.
    *
    * @param baseUri The base URI.
    * @param referenceUri The reference URI to resolve.
    */
-  public static String resolve(String baseUri, String referenceUri) {
+  public static String resolve(@Nullable String baseUri, @Nullable String referenceUri) {
     StringBuilder uri = new StringBuilder();
 
     // Map null onto empty string, to make the following logic simpler.
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/util/Util.java b/library/core/src/main/java/com/google/android/exoplayer2/util/Util.java
index e700fc6751..6db5ddef39 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/util/Util.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/util/Util.java
@@ -252,14 +252,14 @@ public static boolean areEqual(@Nullable Object o1, @Nullable Object o2) {
   /**
    * Tests whether an {@code items} array contains an object equal to {@code item}, according to
    * {@link Object#equals(Object)}.
-   * <p>
-   * If {@code item} is null then true is returned if and only if {@code items} contains null.
+   *
+   * <p>If {@code item} is null then true is returned if and only if {@code items} contains null.
    *
    * @param items The array of items to search.
    * @param item The item to search for.
    * @return True if the array contains an object equal to the item being searched for.
    */
-  public static boolean contains(Object[] items, Object item) {
+  public static boolean contains(@NullableType Object[] items, @Nullable Object item) {
     for (Object arrayItem : items) {
       if (areEqual(arrayItem, item)) {
         return true;
@@ -1486,7 +1486,7 @@ public static int getStreamTypeForAudioUsage(@C.AudioUsage int usage) {
    * @return The content type.
    */
   @C.ContentType
-  public static int inferContentType(Uri uri, String overrideExtension) {
+  public static int inferContentType(Uri uri, @Nullable String overrideExtension) {
     return TextUtils.isEmpty(overrideExtension)
         ? inferContentType(uri)
         : inferContentType("." + overrideExtension);
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/util/package-info.java b/library/core/src/main/java/com/google/android/exoplayer2/util/package-info.java
new file mode 100644
index 0000000000..76899fc452
--- /dev/null
+++ b/library/core/src/main/java/com/google/android/exoplayer2/util/package-info.java
@@ -0,0 +1,17 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+@NonNullApi
+package com.google.android.exoplayer2.util;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java b/library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
index 7061521b53..de77e8318d 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
@@ -308,8 +308,10 @@ public MediaCodecVideoRenderer(
   }
 
   @Override
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector,
-      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager, Format format)
+  protected int supportsFormat(
+      MediaCodecSelector mediaCodecSelector,
+      @Nullable DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
+      Format format)
       throws DecoderQueryException {
     String mimeType = format.sampleMimeType;
     if (!MimeTypes.isVideo(mimeType)) {
@@ -601,7 +603,7 @@ protected void configureCodec(
       MediaCodecInfo codecInfo,
       MediaCodec codec,
       Format format,
-      MediaCrypto crypto,
+      @Nullable MediaCrypto crypto,
       float codecOperatingRate) {
     String codecMimeType = codecInfo.codecMimeType;
     codecMaxValues = getCodecMaxValues(codecInfo, format, getStreamFormats());
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/video/SimpleDecoderVideoRenderer.java b/library/core/src/main/java/com/google/android/exoplayer2/video/SimpleDecoderVideoRenderer.java
index d66155548d..2dd43fb6d6 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/video/SimpleDecoderVideoRenderer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/video/SimpleDecoderVideoRenderer.java
@@ -544,9 +544,10 @@ protected void updateDroppedBufferCounters(int droppedBufferCount) {
   /**
    * Dequeues output buffer.
    *
-   * @return Dequeued video decoder output buffer.
+   * @return Dequeued video decoder output buffer, or null if an output buffer isn't available.
    * @throws VideoDecoderException If an error occurs while dequeuing the output buffer.
    */
+  @Nullable
   protected abstract VideoDecoderOutputBuffer dequeueOutputBuffer() throws VideoDecoderException;
 
   /** Clears output buffer. */
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/video/package-info.java b/library/core/src/main/java/com/google/android/exoplayer2/video/package-info.java
new file mode 100644
index 0000000000..3c2cd217e0
--- /dev/null
+++ b/library/core/src/main/java/com/google/android/exoplayer2/video/package-info.java
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+@NonNullApi
+package com.google.android.exoplayer2.video;
+
+import com.google.android.exoplayer2.util.NonNullApi;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/video/spherical/CameraMotionRenderer.java b/library/core/src/main/java/com/google/android/exoplayer2/video/spherical/CameraMotionRenderer.java
index 03822be17c..7d76f43d04 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/video/spherical/CameraMotionRenderer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/video/spherical/CameraMotionRenderer.java
@@ -93,7 +93,7 @@ public void render(long positionUs, long elapsedRealtimeUs) throws ExoPlaybackEx
       buffer.flip();
       lastTimestampUs = buffer.timeUs;
       if (listener != null) {
-        float[] rotation = parseMetadata(buffer.data);
+        float[] rotation = parseMetadata(Util.castNonNull(buffer.data));
         if (rotation != null) {
           Util.castNonNull(listener).onCameraMotion(lastTimestampUs - offsetUs, rotation);
         }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/video/spherical/package-info.java b/library/core/src/main/java/com/google/android/exoplayer2/video/spherical/package-info.java
new file mode 100644
index 0000000000..2dce6889d8
--- /dev/null
+++ b/library/core/src/main/java/com/google/android/exoplayer2/video/spherical/package-info.java
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+@NonNullApi
+package com.google.android.exoplayer2.video.spherical;
+
+import com.google.android.exoplayer2.util.NonNullApi;
diff --git a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/EventSampleStream.java b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/EventSampleStream.java
index f06a709960..6e67be6ec5 100644
--- a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/EventSampleStream.java
+++ b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/EventSampleStream.java
@@ -115,9 +115,9 @@ public int readData(FormatHolder formatHolder, DecoderInputBuffer buffer,
     byte[] serializedEvent = eventMessageEncoder.encode(eventStream.events[sampleIndex]);
     if (serializedEvent != null) {
       buffer.ensureSpaceForWrite(serializedEvent.length);
-      buffer.setFlags(C.BUFFER_FLAG_KEY_FRAME);
       buffer.data.put(serializedEvent);
       buffer.timeUs = eventTimesUs[sampleIndex];
+      buffer.setFlags(C.BUFFER_FLAG_KEY_FRAME);
       return C.RESULT_BUFFER_READ;
     } else {
       return C.RESULT_NOTHING_READ;
