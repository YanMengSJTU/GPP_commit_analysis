diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/ExoHostedTest.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/ExoHostedTest.java
index 075a71d587..2273db7746 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/ExoHostedTest.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/ExoHostedTest.java
@@ -85,7 +85,7 @@ public final void setSchedule(ActionSchedule schedule) {
   // HostedTest implementation
 
   @Override
-  public final void initialize(HostActivity host, Surface surface) {
+  public final void onStart(HostActivity host, Surface surface) {
     // Build the player.
     player = ExoPlayer.Factory.newInstance(rendererCount);
     player.addListener(this);
@@ -100,7 +100,7 @@ public final void initialize(HostActivity host, Surface surface) {
   }
 
   @Override
-  public final void release() {
+  public final void onStop() {
     actionHandler.removeCallbacksAndMessages(null);
     player.release();
     player = null;
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/HostActivity.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/HostActivity.java
index 58d3222647..a9d41c4056 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/HostActivity.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/HostActivity.java
@@ -48,36 +48,35 @@
   public interface HostedTest {
 
     /**
-     * Called once the activity has been resumed and its surface has been created.
+     * Called on the main thread when the test is started.
      * <p>
-     * Called on the main thread.
+     * The test will not be started until the {@link HostActivity} has been resumed and its
+     * {@link Surface} has been created.
      *
-     * @param host The host in which the test is being run.
-     * @param surface The created surface.
+     * @param host The {@link HostActivity} in which the test is being run.
+     * @param surface The {@link Surface}.
      */
-    void initialize(HostActivity host, Surface surface);
+    void onStart(HostActivity host, Surface surface);
 
     /**
-     * Called when the test has finished, or if the activity is paused or its surface is destroyed.
+     * Called on the main thread when the test is stopped.
      * <p>
-     * Called on the main thread.
+     * The test will be stopped if it has finished, if the {@link HostActivity} has been paused, or
+     * if the {@link HostActivity}'s {@link Surface} has been destroyed.
      */
-    void release();
+    void onStop();
 
     /**
-     * Called periodically to check whether the test has finished.
-     * <p>
-     * Called on the main thread.
+     * Called on the main thread to check whether the test has finished.
      *
      * @return True if the test has finished. False otherwise.
      */
     boolean isFinished();
 
     /**
-     * Called after the test is finished and has been released. Implementations may use this method
-     * to assert that test criteria were met.
+     * Called on the main thread after the test has finished and been stopped.
      * <p>
-     * Called on the test thread.
+     * Implementations may use this method to assert that test criteria were met.
      */
     void onFinished();
 
@@ -92,14 +91,12 @@
   private CheckFinishedRunnable checkFinishedRunnable;
 
   private HostedTest hostedTest;
-  private ConditionVariable hostedTestReleasedCondition;
-  private boolean hostedTestInitialized;
+  private ConditionVariable hostedTestStoppedCondition;
+  private boolean hostedTestStarted;
   private boolean hostedTestFinished;
 
   /**
    * Executes a {@link HostedTest} inside the host.
-   * <p>
-   * Must only be called once on each instance. Must be called from the test thread.
    *
    * @param hostedTest The test to execute.
    * @param timeoutMs The number of milliseconds to wait for the test to finish. If the timeout
@@ -111,18 +108,18 @@ public void runTest(final HostedTest hostedTest, long timeoutMs) {
 
     Assertions.checkState(this.hostedTest == null);
     this.hostedTest = Assertions.checkNotNull(hostedTest);
-    hostedTestReleasedCondition = new ConditionVariable();
-    hostedTestInitialized = false;
+    hostedTestStoppedCondition = new ConditionVariable();
+    hostedTestStarted = false;
     hostedTestFinished = false;
 
     runOnUiThread(new Runnable() {
       @Override
       public void run() {
-        maybeInitializeHostedTest();
+        maybeStartHostedTest();
       }
     });
 
-    if (hostedTestReleasedCondition.block(timeoutMs)) {
+    if (hostedTestStoppedCondition.block(timeoutMs)) {
       if (hostedTestFinished) {
         Log.d(TAG, "Test finished. Checking pass conditions.");
         hostedTest.onFinished();
@@ -166,13 +163,13 @@ public void onStart() {
   @Override
   public void onResume() {
     super.onResume();
-    maybeInitializeHostedTest();
+    maybeStartHostedTest();
   }
 
   @Override
   public void onPause() {
     super.onPause();
-    maybeReleaseHostedTest();
+    maybeStopHostedTest();
   }
 
   @Override
@@ -188,12 +185,12 @@ public void onStop() {
 
   @Override
   public void surfaceCreated(SurfaceHolder holder) {
-    maybeInitializeHostedTest();
+    maybeStartHostedTest();
   }
 
   @Override
   public void surfaceDestroyed(SurfaceHolder holder) {
-    maybeReleaseHostedTest();
+    maybeStopHostedTest();
   }
 
   @Override
@@ -203,25 +200,25 @@ public void surfaceChanged(SurfaceHolder holder, int format, int width, int heig
 
   // Internal logic
 
-  private void maybeInitializeHostedTest() {
-    if (hostedTest == null || hostedTestInitialized) {
+  private void maybeStartHostedTest() {
+    if (hostedTest == null || hostedTestStarted) {
       return;
     }
     Surface surface = surfaceView.getHolder().getSurface();
     if (surface != null && surface.isValid()) {
-      hostedTestInitialized = true;
-      Log.d(TAG, "Initializing test.");
-      hostedTest.initialize(this, surface);
+      hostedTestStarted = true;
+      Log.d(TAG, "Starting test.");
+      hostedTest.onStart(this, surface);
       checkFinishedRunnable.startChecking();
     }
   }
 
-  private void maybeReleaseHostedTest() {
-    if (hostedTest != null && hostedTestInitialized) {
-      hostedTest.release();
+  private void maybeStopHostedTest() {
+    if (hostedTest != null && hostedTestStarted) {
+      hostedTest.onStop();
       hostedTest = null;
       mainHandler.removeCallbacks(checkFinishedRunnable);
-      hostedTestReleasedCondition.open();
+      hostedTestStoppedCondition.open();
     }
   }
 
@@ -242,7 +239,7 @@ private void startChecking() {
     public void run() {
       if (hostedTest.isFinished()) {
         hostedTestFinished = true;
-        maybeReleaseHostedTest();
+        maybeStopHostedTest();
       } else {
         mainHandler.postDelayed(this, CHECK_INTERVAL_MS);
       }
