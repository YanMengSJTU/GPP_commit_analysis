diff --git a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
index 18bf9eeb8c..edb06f4204 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
@@ -107,7 +107,7 @@
  * </ul>
  */
 public interface ExoPlayer {
-
+  
   /**
    * Listener of changes in player state.
    */
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
index bf5b3f6482..007178da57 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
@@ -168,7 +168,7 @@ public SourceInfo(Timeline timeline, Object manifest, PlaybackInfo playbackInfo,
   private MediaPeriodHolder playingPeriodHolder;
 
   private Timeline timeline;
-
+  
   public ExoPlayerImplInternal(Renderer[] renderers, TrackSelector trackSelector,
       LoadControl loadControl, boolean playWhenReady, Handler eventHandler,
       PlaybackInfo playbackInfo, ExoPlayer player) {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java b/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
index 6094513913..bc30004f97 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
@@ -142,7 +142,7 @@ protected SimpleExoPlayer(RenderersFactory renderersFactory, TrackSelector track
     // Build the player and associated objects.
     player = new ExoPlayerImpl(renderers, trackSelector, loadControl);
   }
-
+  
   /**
    * Sets the video scaling mode.
    * <p>
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/FlvExtractor.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/FlvExtractor.java
index 218e6ffd82..13941430b0 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/FlvExtractor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/FlvExtractor.java
@@ -81,6 +81,12 @@
   private AudioTagPayloadReader audioReader;
   private VideoTagPayloadReader videoReader;
   private ScriptTagPayloadReader metadataReader;
+  
+  private volatile boolean skippingForward;
+  private volatile boolean skipForward;
+
+  long firstSkippedAudioTime = -1;
+  long tsDelta = 0;
 
   public FlvExtractor() {
     scratch = new ParsableByteArray(4);
@@ -90,6 +96,13 @@ public FlvExtractor() {
     parserState = STATE_READING_FLV_HEADER;
   }
 
+  public void skipForward() {
+    skipForward = true;
+  }
+  public void clearSkip() {
+    skipForward = false;
+  }
+
   @Override
   public boolean sniff(ExtractorInput input) throws IOException, InterruptedException {
     // Check if file starts with "FLV" tag
@@ -122,8 +135,9 @@ public boolean sniff(ExtractorInput input) throws IOException, InterruptedExcept
   }
 
   @Override
-  public void init(ExtractorOutput output) {
+  public void init(final ExtractorOutput output) {
     this.extractorOutput = output;
+
   }
 
   @Override
@@ -137,6 +151,7 @@ public void release() {
     // Do nothing
   }
 
+  byte[] peekSpace = new byte[1];
   @Override
   public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException,
       InterruptedException {
@@ -235,6 +250,7 @@ private boolean readTagHeader(ExtractorInput input) throws IOException, Interrup
     tagDataSize = tagHeaderBuffer.readUnsignedInt24();
     tagTimestampUs = tagHeaderBuffer.readUnsignedInt24();
     tagTimestampUs = ((tagHeaderBuffer.readUnsignedByte() << 24) | tagTimestampUs) * 1000L;
+    tagTimestampUs -= tsDelta;
     tagHeaderBuffer.skipBytes(3); // streamId
     parserState = STATE_READING_TAG_DATA;
     return true;
@@ -250,9 +266,18 @@ private boolean readTagHeader(ExtractorInput input) throws IOException, Interrup
    */
   private boolean readTagData(ExtractorInput input) throws IOException, InterruptedException {
     boolean wasConsumed = true;
-    if (tagType == TAG_TYPE_AUDIO && audioReader != null) {
+    if (tagType == TAG_TYPE_AUDIO && audioReader != null && skipForward && !skippingForward) {
+      firstSkippedAudioTime = tagTimestampUs;
+      skippingForward = true;
+    }
+    if (tagType == TAG_TYPE_AUDIO && audioReader != null && !skipForward && skippingForward) {
+      tsDelta += tagTimestampUs - firstSkippedAudioTime;
+      tagTimestampUs = firstSkippedAudioTime;
+      skippingForward = false;
+    }
+    if (tagType == TAG_TYPE_AUDIO && audioReader != null && !skippingForward) {
       audioReader.consume(prepareTagData(input), tagTimestampUs);
-    } else if (tagType == TAG_TYPE_VIDEO && videoReader != null) {
+    } else if (tagType == TAG_TYPE_VIDEO && videoReader != null && !skippingForward) {
       videoReader.consume(prepareTagData(input), tagTimestampUs);
     } else if (tagType == TAG_TYPE_SCRIPT_DATA && metadataReader != null) {
       metadataReader.consume(prepareTagData(input), tagTimestampUs);
