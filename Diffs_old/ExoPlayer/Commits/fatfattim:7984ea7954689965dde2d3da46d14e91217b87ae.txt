diff --git a/demo/build.gradle b/demo/build.gradle
index 007dc70590..8c92e447ea 100644
--- a/demo/build.gradle
+++ b/demo/build.gradle
@@ -41,6 +41,8 @@ android {
 
 dependencies {
     compile project(':library')
+    compile 'com.android.support:support-v4:25.1.0'
+    compile 'com.android.support:recyclerview-v7:25.1.0'
     withExtensionsCompile project(path: ':extension-ffmpeg')
     withExtensionsCompile project(path: ':extension-flac')
     withExtensionsCompile project(path: ':extension-opus')
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java b/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
index bbfadf34af..d6e4087984 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
@@ -19,16 +19,21 @@
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.net.Uri;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.Handler;
+import android.support.v4.view.ViewPager;
 import android.text.TextUtils;
+import android.util.Log;
 import android.view.KeyEvent;
 import android.view.View;
 import android.view.View.OnClickListener;
+import android.view.ViewTreeObserver;
 import android.widget.Button;
 import android.widget.LinearLayout;
 import android.widget.TextView;
 import android.widget.Toast;
+
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.DefaultLoadControl;
 import com.google.android.exoplayer2.ExoPlaybackException;
@@ -36,6 +41,10 @@
 import com.google.android.exoplayer2.ExoPlayerFactory;
 import com.google.android.exoplayer2.SimpleExoPlayer;
 import com.google.android.exoplayer2.Timeline;
+import com.google.android.exoplayer2.demo.banner.BannerAdapter;
+import com.google.android.exoplayer2.demo.banner.Decorator;
+import com.google.android.exoplayer2.demo.banner.InfiniteViewPager;
+import com.google.android.exoplayer2.demo.banner.Utility;
 import com.google.android.exoplayer2.drm.DefaultDrmSessionManager;
 import com.google.android.exoplayer2.drm.DrmSessionManager;
 import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
@@ -67,9 +76,11 @@
 import com.google.android.exoplayer2.upstream.DefaultBandwidthMeter;
 import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.google.android.exoplayer2.util.Util;
+
 import java.net.CookieHandler;
 import java.net.CookieManager;
 import java.net.CookiePolicy;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.UUID;
@@ -123,6 +134,7 @@
   @Override
   public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
+    Log.d("dogtim", "onCreate: ");
     shouldAutoPlay = true;
     clearResumePosition();
     mediaDataSourceFactory = buildDataSourceFactory(true);
@@ -139,9 +151,64 @@ public void onCreate(Bundle savedInstanceState) {
     retryButton = (Button) findViewById(R.id.retry_button);
     retryButton.setOnClickListener(this);
 
-    simpleExoPlayerView = (SimpleExoPlayerView) findViewById(R.id.player_view);
-    simpleExoPlayerView.setControllerVisibilityListener(this);
-    simpleExoPlayerView.requestFocus();
+    toSetupBanner();
+  }
+
+  private InfiniteViewPager bannerPager;
+
+  private void toSetupBanner() {
+    bannerPager = (InfiniteViewPager) findViewById(R.id.viewPager);
+    Decorator.setRatioByWidth(bannerPager, Utility.getScreenWidth(), 2.4f);
+    ArrayList<String> banner = new ArrayList<>();
+    for(int i = 0 ; i < 10 ; i ++) {
+      banner.add("Video: " + i);
+    }
+
+    bannerPager.setAdapter(new BannerAdapter(banner, false));
+    bannerPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
+      @Override
+      public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
+      }
+
+      @Override
+      public void onPageSelected(int position) {
+        Log.d("dogtim", "onPageSelected: " + position);
+        releasePlayer();
+        simpleExoPlayerView = (SimpleExoPlayerView) bannerPager.findViewWithTag(position);
+        simpleExoPlayerView.setControllerVisibilityListener(PlayerActivity.this);
+        simpleExoPlayerView.requestFocus();
+        initializePlayer();
+      }
+
+      @Override
+      public void onPageScrollStateChanged(int state) {
+
+      }
+    });
+
+    bannerPager.setCurrentItem(0, true);
+    setBannerPadding();
+  }
+
+  private void setBannerPadding() {
+    bannerPager.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
+      @Override
+      public void onGlobalLayout() {
+        if (bannerPager.getAdapter() != null) {
+
+          int margin = Utility.getScreenWidth() / 20;
+          int padding = margin * 2;
+          bannerPager.setPadding(padding, 0, padding, 0);
+          bannerPager.setClipToPadding(false);
+          bannerPager.setPageMargin(margin);
+          if (Build.VERSION.SDK_INT >= 16) {
+            bannerPager.getViewTreeObserver().removeOnGlobalLayoutListener(this);
+          } else {
+            bannerPager.getViewTreeObserver().removeGlobalOnLayoutListener(this);
+          }
+        }
+      }
+    });
   }
 
   @Override
@@ -156,7 +223,7 @@ public void onNewIntent(Intent intent) {
   public void onStart() {
     super.onStart();
     if (Util.SDK_INT > 23) {
-      initializePlayer();
+      //initializePlayer();
     }
   }
 
@@ -164,7 +231,7 @@ public void onStart() {
   public void onResume() {
     super.onResume();
     if ((Util.SDK_INT <= 23 || player == null)) {
-      initializePlayer();
+      //initializePlayer();
     }
   }
 
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/banner/BannerAdapter.java b/demo/src/main/java/com/google/android/exoplayer2/demo/banner/BannerAdapter.java
new file mode 100644
index 0000000000..c27e2a7d59
--- /dev/null
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/banner/BannerAdapter.java
@@ -0,0 +1,34 @@
+package com.google.android.exoplayer2.demo.banner;
+
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.google.android.exoplayer2.demo.R;
+import com.google.android.exoplayer2.ui.SimpleExoPlayerView;
+
+import java.util.ArrayList;
+
+
+public class BannerAdapter extends InfiniteViewPagerAdapter {
+
+    public BannerAdapter(ArrayList<String> banners, boolean loopEnabled) {
+        super((ArrayList) banners, loopEnabled);
+    }
+
+    @Override
+    public Object instantiateItem(ViewGroup container, final int position) {
+        View view = LayoutInflater.from(container.getContext()).inflate(R.layout.banner_player, container, false);
+        TextView textView = (TextView) view.findViewById(R.id.banner_text);
+        SimpleExoPlayerView playerView = (SimpleExoPlayerView) view.findViewById(R.id.player_view);
+        playerView.setTag(position);
+        textView.setText((String) getItem(position));
+        container.addView(view);
+
+        Log.d("dogtim", "instantiateItem: " + position);
+        return view;
+    }
+
+}
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/banner/Decorator.java b/demo/src/main/java/com/google/android/exoplayer2/demo/banner/Decorator.java
new file mode 100644
index 0000000000..021246e2f7
--- /dev/null
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/banner/Decorator.java
@@ -0,0 +1,30 @@
+package com.google.android.exoplayer2.demo.banner;
+
+import android.view.View;
+import android.view.ViewGroup;
+
+public class Decorator {
+
+    public static void setRelativeWidth(View viewRef, View viewDeco, double ratio) {
+        viewRef.measure(0,0);
+        ViewGroup.LayoutParams params = viewDeco.getLayoutParams();
+        params.width = (int) (viewRef.getMeasuredWidth() * ratio);
+        viewDeco.setLayoutParams(params);
+    }
+
+    // ratio is width / height
+    public static void setRatioByWidth(View view, int width, double ratio) {
+        ViewGroup.LayoutParams params = view.getLayoutParams();
+        params.width = width;
+        params.height = (int)(width / ratio);
+        view.setLayoutParams( params );
+    }
+
+    public static void setRatioByHeight(View view, int height, double ratio) {
+        ViewGroup.LayoutParams params = view.getLayoutParams();
+        params.height = height;
+        params.width = (int)(height * ratio);
+        view.setLayoutParams( params );
+    }
+
+}
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/banner/InfiniteViewPager.java b/demo/src/main/java/com/google/android/exoplayer2/demo/banner/InfiniteViewPager.java
new file mode 100644
index 0000000000..bce1336b3a
--- /dev/null
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/banner/InfiniteViewPager.java
@@ -0,0 +1,203 @@
+package com.google.android.exoplayer2.demo.banner;
+
+
+import android.content.Context;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.v4.view.PagerAdapter;
+import android.support.v4.view.ViewPager;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.animation.AccelerateDecelerateInterpolator;
+import android.view.animation.Interpolator;
+import android.widget.Scroller;
+
+import java.lang.reflect.Field;
+
+
+public class InfiniteViewPager extends ViewPager {
+
+    private static final String TAG = InfiniteViewPager.class.getSimpleName();
+    private final static int SCROLL_DELAY_TIME = 5000;
+
+    private int currentPosition = 0;
+    private boolean isLoopEnable = false;
+
+    private Handler handler = new Handler();
+
+
+    private OnTouchListener touchListener = new OnTouchListener() {
+        @Override
+        public boolean onTouch(View view, MotionEvent motionEvent) {
+            if( motionEvent.getAction() == MotionEvent.ACTION_DOWN || motionEvent.getAction() == MotionEvent.ACTION_MOVE ) {
+            } else if ( motionEvent.getAction() == MotionEvent.ACTION_UP ) {
+            }
+            return false;
+        }
+    };
+
+    public InfiniteViewPager(Context context) {
+        super(context);
+        addOnPageChangeListener(onPageChangeListener);
+        setScroller();
+        setOnTouchListener( touchListener );
+    }
+
+    public InfiniteViewPager(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        addOnPageChangeListener(onPageChangeListener);
+        setScroller();
+        setOnTouchListener( touchListener );
+    }
+
+    @Override
+    protected void onVisibilityChanged(@NonNull View changedView, int visibility) {
+        super.onVisibilityChanged(changedView, visibility);
+        if ( visibility != VISIBLE ) {
+            //handler.removeCallbacks(autoScroll);
+        }
+    }
+
+    @Override
+    protected void onWindowVisibilityChanged(int visibility) {
+        super.onWindowVisibilityChanged(visibility);
+        if ( visibility == VISIBLE ) {
+            //handler.post(updateScroll);
+            //handler.postDelayed(autoScroll, SCROLL_DELAY_TIME);
+        } else {
+            //handler.removeCallbacks(autoScroll);
+        }
+    }
+
+    @Override
+    public void setCurrentItem(int item, boolean smoothScroll) {
+        if (isLoopEnable) {
+            super.setCurrentItem(item + 1, smoothScroll);
+        } else {
+            super.setCurrentItem(item, smoothScroll);
+        }
+    }
+
+    @Override
+    public void setCurrentItem(int item) {
+        super.setCurrentItem(item, true);
+    }
+
+    @Override
+    public int getCurrentItem() {
+        if (isLoopEnable) {
+            final int index = super.getCurrentItem();
+            final int count = getAdapter().getCount();
+            if (index == 0) {
+                return count - 3;
+            } else if (index == count - 1) {
+                return 0;
+            } else {
+                return index - 1;
+            }
+        } else {
+            return super.getCurrentItem();
+        }
+    }
+
+    @Override
+    public void setAdapter(PagerAdapter adapter) {
+        super.setAdapter(adapter);
+        if (adapter instanceof InfiniteViewPagerAdapter) {
+            isLoopEnable = ((InfiniteViewPagerAdapter) adapter).isLoopEnabled();
+            if (isLoopEnable) {
+                setCurrentItem(0);
+                setOverScrollMode( OVER_SCROLL_NEVER );
+            }
+        }
+    }
+
+    private OnPageChangeListener onPageChangeListener = new OnPageChangeListener() {
+        @Override
+        public void onPageScrolled(int i, float v, int i2) {
+
+        }
+
+        @Override
+        public void onPageSelected(int position) {
+            currentPosition = position;
+        }
+
+        @Override
+        public void onPageScrollStateChanged(int state) {
+            if (state == ViewPager.SCROLL_STATE_IDLE) {
+                if (isLoopEnable) {
+                    final int count = getAdapter().getCount();
+                    if (currentPosition == count - 1) {
+                        //last to first
+                        setCurrentItem(0, false);
+                        currentPosition = 1;
+                    } else if (currentPosition == 0) {
+                        //first to last
+                        setCurrentItem(count - 3, false);
+                        currentPosition = count - 2;
+                    }
+                }
+            }
+        }
+    };
+
+    private void setScroller(){
+        try {
+            Field mScroller;
+            mScroller = ViewPager.class.getDeclaredField("mScroller");
+            mScroller.setAccessible(true);
+            Interpolator sInterpolator = new AccelerateDecelerateInterpolator();
+            FixedSpeedScroller scroller = new FixedSpeedScroller(getContext(), sInterpolator);
+            mScroller.set(this, scroller);
+        } catch (NoSuchFieldException e) {
+            Log.d(TAG, "NoSuchFieldException: " + e.getMessage());
+        } catch (IllegalArgumentException e) {
+            Log.d(TAG, "IllegalArgumentException: " + e.getMessage());
+        } catch (IllegalAccessException e) {
+            Log.d(TAG, "IllegalAccessException: " + e.getMessage());
+        }
+    }
+
+    private class FixedSpeedScroller extends Scroller {
+
+        private static final int mDuration = 250;
+
+        FixedSpeedScroller(Context context, Interpolator interpolator) {
+            super(context, interpolator);
+        }
+
+        @Override
+        public void startScroll(int startX, int startY, int dx, int dy, int duration) {
+            super.startScroll(startX, startY, dx, dy, mDuration);
+        }
+
+        @Override
+        public void startScroll(int startX, int startY, int dx, int dy) {
+            super.startScroll(startX, startY, dx, dy, mDuration);
+        }
+    }
+
+    /**
+     * UI SDK bug
+     * if ViewPager has 3 items
+     * when user scroll to bottom and make ViewPager do onDetachedFromWindow.
+     * User scroll to ViewPager again will loss Animation effect at first time
+     */
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        //But this is not good method for resolving it.
+        /*try {
+            Field mFirstLayout = ViewPager.class.getDeclaredField("mFirstLayout");
+            mFirstLayout.setAccessible(true);
+            mFirstLayout.set(this, false);
+            getAdapter().notifyDataSetChanged();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }*/
+    }
+
+}
\ No newline at end of file
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/banner/InfiniteViewPagerAdapter.java b/demo/src/main/java/com/google/android/exoplayer2/demo/banner/InfiniteViewPagerAdapter.java
new file mode 100644
index 0000000000..31070db2e9
--- /dev/null
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/banner/InfiniteViewPagerAdapter.java
@@ -0,0 +1,49 @@
+package com.google.android.exoplayer2.demo.banner;
+
+
+import android.support.v4.view.PagerAdapter;
+import android.view.View;
+import android.view.ViewGroup;
+
+import java.util.ArrayList;
+
+public abstract class InfiniteViewPagerAdapter extends PagerAdapter {
+
+    private ArrayList<Object> objects = new ArrayList<Object>();
+    private boolean loopEnabled = false;
+
+    InfiniteViewPagerAdapter(ArrayList<Object> content, boolean loopEnabled ) {
+        super();
+        this.loopEnabled = loopEnabled;
+        if (loopEnabled) {
+            objects.add(0, content.get(content.size() - 1));
+        }
+        objects.addAll(content);
+        if (loopEnabled) {
+            objects.add(content.size() + 1, content.get(0));
+        }
+    }
+
+    Object getItem(int position) {
+        return objects.get(position);
+    }
+
+    public boolean isLoopEnabled() {
+        return loopEnabled;
+    }
+
+    @Override
+    public void destroyItem(ViewGroup container, int position, Object object) {
+        container.removeView((View) object);
+    }
+
+    @Override
+    public int getCount() {
+        return objects.size();
+    }
+
+    @Override
+    public boolean isViewFromObject(View view, Object object) {
+        return view == object;
+    }
+}
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/banner/Utility.java b/demo/src/main/java/com/google/android/exoplayer2/demo/banner/Utility.java
new file mode 100644
index 0000000000..6e475b352c
--- /dev/null
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/banner/Utility.java
@@ -0,0 +1,150 @@
+package com.google.android.exoplayer2.demo.banner;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Point;
+import android.graphics.drawable.Drawable;
+import android.telephony.TelephonyManager;
+import android.util.Log;
+import android.util.TypedValue;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Locale;
+
+public class Utility {
+
+    public static final String TAG = Utility.class.getSimpleName();
+
+    public static Point getScreenSize(Activity activity) {
+        Point displaySize = new Point();
+        activity.getWindowManager().getDefaultDisplay().getSize(displaySize);
+        return displaySize;
+    }
+
+    public static boolean isEmpty(EditText editText) {
+        return editText.getText().toString().isEmpty();
+    }
+
+    public static boolean isEmpty(TextView textView) {
+        return textView.getText().toString().isEmpty();
+    }
+
+    public static float getSp(Context context, int res ) {
+        return (context.getResources().getDimension(res) / context.getResources().getDisplayMetrics().scaledDensity);
+    }
+
+    public static int getPixel(Context context, int res ) {
+        return context.getResources().getDimensionPixelSize(res);
+    }
+
+    public static int getScreenWidth() {
+        return Resources.getSystem().getDisplayMetrics().widthPixels;
+    }
+
+    public static int getScreenHeight() {
+        return Resources.getSystem().getDisplayMetrics().heightPixels;
+    }
+
+    public static String appendSeeMoreMark(String text) {
+        return text + " >";
+    }
+
+    public static String getDensityName(Context context) {
+        float density = context.getResources().getDisplayMetrics().density;
+        if (density >= 4.0) {
+            return "xxxhdpi";
+        }
+        if (density >= 3.0) {
+            return "xxhdpi";
+        }
+        if (density >= 2.0) {
+            return "xhdpi";
+        }
+        if (density >= 1.5) {
+            return "hdpi";
+        }
+        if (density >= 1.0) {
+            return "mdpi";
+        }
+        return "ldpi";
+    }
+
+    public static String getServiceProviderName(Context context) {
+        TelephonyManager telephonyManager = ((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE));
+        return telephonyManager.getSimOperatorName();
+    }
+
+    public static void setButtonMargin(View view, int size, int rightMargin, int padding) {
+        LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(size, size);
+        lp.setMargins(0, 0, rightMargin, 0);
+        view.setPadding(padding, padding, padding, padding);
+        view.setLayoutParams(lp);
+    }
+
+    public static String getMiddleUnicode() {
+        return " \u00B7 ";
+    }
+
+    public static void makeMarquee(TextView textView) {
+        textView.setSelected(true);
+    }
+
+    public static String convertToDate(long seconds) {
+        // Create a DateFormatter object for displaying date in specified format.
+        SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd", Locale.getDefault());
+
+        // Create a calendar object that will convert the date and time value in milliseconds to date.
+        Calendar calendar = Calendar.getInstance();
+        calendar.setTimeInMillis(seconds * 1000);
+        return formatter.format(calendar.getTime());
+    }
+
+    public static void setBackgroundDrawable(View view, Drawable drawable) {
+
+        int sdk = android.os.Build.VERSION.SDK_INT;
+
+        if (sdk < android.os.Build.VERSION_CODES.JELLY_BEAN) {
+            view.setBackgroundDrawable(drawable);
+        } else {
+            view.setBackground(drawable);
+        }
+    }
+
+    public static void listTelephonyManagerInfo(Context context) {
+        TelephonyManager telephonyManager = ((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE));
+        Log.d(TAG, "deviceId: " + telephonyManager.getDeviceId());
+        Log.d(TAG, "deviceSoftwareVersion: " + telephonyManager.getDeviceSoftwareVersion());
+        Log.d(TAG, "line1Number: " + telephonyManager.getLine1Number());
+        Log.d(TAG, "networkCountryIso: " + telephonyManager.getNetworkCountryIso());
+        Log.d(TAG, "simOperator: " + telephonyManager.getSimOperator());
+        Log.d(TAG, "simOperatorName: " + telephonyManager.getSimOperatorName());
+        Log.d(TAG, "simSerialNumber: " + telephonyManager.getSimSerialNumber());
+        Log.d(TAG, "subscriberId: " + telephonyManager.getSubscriberId());
+        Log.d(TAG, "getCellLocation: " + telephonyManager.getCellLocation().toString());
+    }
+
+    public static float getFloat(Context context, int res) {
+        TypedValue typedValue = new TypedValue();
+        context.getResources().getValue(res, typedValue, true);
+        return typedValue.getFloat();
+    }
+
+    public static int dpToPx(int dp) {
+        return (int) (dp * Resources.getSystem().getDisplayMetrics().density);
+    }
+
+    public static int pxToDp(int px) {
+        return (int) ((float) px / Resources.getSystem().getDisplayMetrics().density);
+    }
+
+    public static int pxToSp(int px) {
+        return (int) ((float) px / Resources.getSystem().getDisplayMetrics().scaledDensity);
+    }
+
+}
\ No newline at end of file
diff --git a/demo/src/main/res/layout/banner_player.xml b/demo/src/main/res/layout/banner_player.xml
new file mode 100644
index 0000000000..aaaa39c3b3
--- /dev/null
+++ b/demo/src/main/res/layout/banner_player.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:keepScreenOn="true">
+
+    <com.google.android.exoplayer2.ui.SimpleExoPlayerView
+        android:id="@+id/player_view"
+        android:layout_width="360dp"
+        android:layout_height="240dp"
+        android:layout_gravity="center"
+        android:gravity="center"/>
+
+    <TextView
+        android:id="@+id/banner_text"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:background="@android:color/holo_red_dark"
+        android:gravity="center"/>
+
+</FrameLayout>
diff --git a/demo/src/main/res/layout/player_activity.xml b/demo/src/main/res/layout/player_activity.xml
index 3f8cdaa7d6..f0534e282c 100644
--- a/demo/src/main/res/layout/player_activity.xml
+++ b/demo/src/main/res/layout/player_activity.xml
@@ -20,9 +20,17 @@
     android:layout_height="match_parent"
     android:keepScreenOn="true">
 
-  <com.google.android.exoplayer2.ui.SimpleExoPlayerView android:id="@+id/player_view"
+  <!--<com.google.android.exoplayer2.ui.SimpleExoPlayerView android:id="@+id/player_view"
       android:layout_width="match_parent"
-      android:layout_height="match_parent"/>
+      android:layout_height="match_parent"/>-->
+
+  <com.google.android.exoplayer2.demo.banner.InfiniteViewPager
+      android:layout_width="match_parent"
+      android:layout_height="match_parent"
+      android:layout_gravity="center"
+      android:background="@android:color/holo_blue_bright"
+      android:overScrollMode="never"
+      android:id="@+id/viewPager" />
 
   <LinearLayout
       android:layout_width="match_parent"
