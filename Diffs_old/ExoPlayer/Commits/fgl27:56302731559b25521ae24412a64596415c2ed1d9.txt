diff --git a/library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java b/library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
index ab6627936e..76f90d1c64 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
@@ -410,7 +410,7 @@ public boolean canAcquireSession(DrmInitData drmInitData) {
   @Override
   @Nullable
   public DrmSession<T> acquirePlaceholderSession(Looper playbackLooper) {
-    if (!allowPlaceholderSessions) {
+    if (!allowPlaceholderSessions || mediaDrm.getExoMediaCryptoType() == null) {
       return null;
     }
     maybeCreateMediaDrmHandler(playbackLooper);
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/drm/DummyExoMediaDrm.java b/library/core/src/main/java/com/google/android/exoplayer2/drm/DummyExoMediaDrm.java
new file mode 100644
index 0000000000..9b66fdab7b
--- /dev/null
+++ b/library/core/src/main/java/com/google/android/exoplayer2/drm/DummyExoMediaDrm.java
@@ -0,0 +1,138 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer2.drm;
+
+import android.media.MediaDrmException;
+import androidx.annotation.Nullable;
+import androidx.annotation.RequiresApi;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/** An {@link ExoMediaDrm} that does not support any protection schemes. */
+@RequiresApi(18)
+public final class DummyExoMediaDrm<T extends ExoMediaCrypto> implements ExoMediaDrm<T> {
+
+  /** Returns a new instance. */
+  @SuppressWarnings("unchecked")
+  public static <T extends ExoMediaCrypto> DummyExoMediaDrm<T> getInstance() {
+    return (DummyExoMediaDrm<T>) new DummyExoMediaDrm<>();
+  }
+
+  @Override
+  public void setOnEventListener(OnEventListener<? super T> listener) {
+    // Do nothing.
+  }
+
+  @Override
+  public void setOnKeyStatusChangeListener(OnKeyStatusChangeListener<? super T> listener) {
+    // Do nothing.
+  }
+
+  @Override
+  public byte[] openSession() throws MediaDrmException {
+    throw new MediaDrmException("Attempting to open a session using a dummy ExoMediaDrm.");
+  }
+
+  @Override
+  public void closeSession(byte[] sessionId) {
+    // Do nothing.
+  }
+
+  @Override
+  public KeyRequest getKeyRequest(
+      byte[] scope,
+      @Nullable List<DrmInitData.SchemeData> schemeDatas,
+      int keyType,
+      @Nullable HashMap<String, String> optionalParameters) {
+    // Should not be invoked. No session should exist.
+    throw new IllegalStateException();
+  }
+
+  @Nullable
+  @Override
+  public byte[] provideKeyResponse(byte[] scope, byte[] response) {
+    // Should not be invoked. No session should exist.
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public ProvisionRequest getProvisionRequest() {
+    // Should not be invoked. No provision should be required.
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void provideProvisionResponse(byte[] response) {
+    // Should not be invoked. No provision should be required.
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public Map<String, String> queryKeyStatus(byte[] sessionId) {
+    // Should not be invoked. No session should exist.
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void acquire() {
+    // Do nothing.
+  }
+
+  @Override
+  public void release() {
+    // Do nothing.
+  }
+
+  @Override
+  public void restoreKeys(byte[] sessionId, byte[] keySetId) {
+    // Should not be invoked. No session should exist.
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public String getPropertyString(String propertyName) {
+    return "";
+  }
+
+  @Override
+  public byte[] getPropertyByteArray(String propertyName) {
+    return new byte[0];
+  }
+
+  @Override
+  public void setPropertyString(String propertyName, String value) {
+    // Do nothing.
+  }
+
+  @Override
+  public void setPropertyByteArray(String propertyName, byte[] value) {
+    // Do nothing.
+  }
+
+  @Override
+  public T createMediaCrypto(byte[] sessionId) {
+    // Should not be invoked. No session should exist.
+    throw new IllegalStateException();
+  }
+
+  @Override
+  @Nullable
+  public Class<T> getExoMediaCryptoType() {
+    // No ExoMediaCrypto type is supported.
+    return null;
+  }
+}
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/drm/ExoMediaDrm.java b/library/core/src/main/java/com/google/android/exoplayer2/drm/ExoMediaDrm.java
index e11656509d..f4d5eb1417 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/drm/ExoMediaDrm.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/drm/ExoMediaDrm.java
@@ -293,6 +293,10 @@ KeyRequest getKeyRequest(
    */
   T createMediaCrypto(byte[] sessionId) throws MediaCryptoException;
 
-  /** Returns the {@link ExoMediaCrypto} type created by {@link #createMediaCrypto(byte[])}. */
+  /**
+   * Returns the {@link ExoMediaCrypto} type created by {@link #createMediaCrypto(byte[])}, or null
+   * if this instance cannot create any {@link ExoMediaCrypto} instances.
+   */
+  @Nullable
   Class<T> getExoMediaCryptoType();
 }
