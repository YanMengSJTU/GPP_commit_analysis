diff --git a/RELEASENOTES.md b/RELEASENOTES.md
index a84f4ff0b7..50418ded28 100644
--- a/RELEASENOTES.md
+++ b/RELEASENOTES.md
@@ -87,6 +87,8 @@
 * Add `Timeline.Window.isLive` to indicate that a window is a live stream
   ([#2668](https://github.com/google/ExoPlayer/issues/2668) and
   [#5973](https://github.com/google/ExoPlayer/issues/5973)).
+* Expose the raw ICY metadata through `IcyInfo`
+  ([#6476](https://github.com/google/ExoPlayer/issues/6476)).
 
 ### 2.10.5 (2019-09-20) ###
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/metadata/icy/IcyDecoder.java b/library/core/src/main/java/com/google/android/exoplayer2/metadata/icy/IcyDecoder.java
index 12f65f1cda..13d6b485b3 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/metadata/icy/IcyDecoder.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/metadata/icy/IcyDecoder.java
@@ -15,13 +15,11 @@
  */
 package com.google.android.exoplayer2.metadata.icy;
 
-import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 import com.google.android.exoplayer2.metadata.Metadata;
 import com.google.android.exoplayer2.metadata.MetadataDecoder;
 import com.google.android.exoplayer2.metadata.MetadataInputBuffer;
 import com.google.android.exoplayer2.util.Assertions;
-import com.google.android.exoplayer2.util.Log;
 import com.google.android.exoplayer2.util.Util;
 import java.nio.ByteBuffer;
 import java.util.regex.Matcher;
@@ -37,7 +35,6 @@
   private static final String STREAM_KEY_URL = "streamurl";
 
   @Override
-  @Nullable
   @SuppressWarnings("ByteBufferBackingArray")
   public Metadata decode(MetadataInputBuffer inputBuffer) {
     ByteBuffer buffer = Assertions.checkNotNull(inputBuffer.data);
@@ -46,7 +43,6 @@ public Metadata decode(MetadataInputBuffer inputBuffer) {
     return decode(Util.fromUtf8Bytes(data, 0, length));
   }
 
-  @Nullable
   @VisibleForTesting
   /* package */ Metadata decode(String metadata) {
     String name = null;
@@ -63,12 +59,9 @@ public Metadata decode(MetadataInputBuffer inputBuffer) {
         case STREAM_KEY_URL:
           url = value;
           break;
-        default:
-          Log.w(TAG, "Unrecognized ICY tag: " + name);
-          break;
       }
       index = matcher.end();
     }
-    return (name != null || url != null) ? new Metadata(new IcyInfo(name, url)) : null;
+    return new Metadata(new IcyInfo(metadata, name, url));
   }
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/metadata/icy/IcyInfo.java b/library/core/src/main/java/com/google/android/exoplayer2/metadata/icy/IcyInfo.java
index e6b915a6c8..717bb2b2e2 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/metadata/icy/IcyInfo.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/metadata/icy/IcyInfo.java
@@ -19,26 +19,35 @@
 import android.os.Parcelable;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.metadata.Metadata;
+import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Util;
 
 /** ICY in-stream information. */
 public final class IcyInfo implements Metadata.Entry {
 
+  /** The complete metadata string used to construct this IcyInfo. */
+  public final String rawMetadata;
   /** The stream title if present, or {@code null}. */
   @Nullable public final String title;
-  /** The stream title if present, or {@code null}. */
+  /** The stream URL if present, or {@code null}. */
   @Nullable public final String url;
 
   /**
+   * Construct a new IcyInfo from the source metadata string, and optionally a StreamTitle &
+   * StreamUrl that have been extracted.
+   *
+   * @param rawMetadata See {@link #rawMetadata}.
    * @param title See {@link #title}.
    * @param url See {@link #url}.
    */
-  public IcyInfo(@Nullable String title, @Nullable String url) {
+  public IcyInfo(String rawMetadata, @Nullable String title, @Nullable String url) {
+    this.rawMetadata = rawMetadata;
     this.title = title;
     this.url = url;
   }
 
   /* package */ IcyInfo(Parcel in) {
+    rawMetadata = Assertions.checkNotNull(in.readString());
     title = in.readString();
     url = in.readString();
   }
@@ -52,26 +61,27 @@ public boolean equals(@Nullable Object obj) {
       return false;
     }
     IcyInfo other = (IcyInfo) obj;
-    return Util.areEqual(title, other.title) && Util.areEqual(url, other.url);
+    // title & url are derived from rawMetadata, so no need to include them in the comparison.
+    return Util.areEqual(rawMetadata, other.rawMetadata);
   }
 
   @Override
   public int hashCode() {
-    int result = 17;
-    result = 31 * result + (title != null ? title.hashCode() : 0);
-    result = 31 * result + (url != null ? url.hashCode() : 0);
-    return result;
+    // title & url are derived from rawMetadata, so no need to include them in the hash.
+    return rawMetadata.hashCode();
   }
 
   @Override
   public String toString() {
-    return "ICY: title=\"" + title + "\", url=\"" + url + "\"";
+    return String.format(
+        "ICY: title=\"%s\", url=\"%s\", rawMetadata=\"%s\"", title, url, rawMetadata);
   }
 
   // Parcelable implementation.
 
   @Override
   public void writeToParcel(Parcel dest, int flags) {
+    dest.writeString(rawMetadata);
     dest.writeString(title);
     dest.writeString(url);
   }
diff --git a/library/core/src/test/java/com/google/android/exoplayer2/metadata/icy/IcyDecoderTest.java b/library/core/src/test/java/com/google/android/exoplayer2/metadata/icy/IcyDecoderTest.java
index 4602d172a6..72237d665c 100644
--- a/library/core/src/test/java/com/google/android/exoplayer2/metadata/icy/IcyDecoderTest.java
+++ b/library/core/src/test/java/com/google/android/exoplayer2/metadata/icy/IcyDecoderTest.java
@@ -29,10 +29,12 @@
   @Test
   public void decode() {
     IcyDecoder decoder = new IcyDecoder();
-    Metadata metadata = decoder.decode("StreamTitle='test title';StreamURL='test_url';");
+    String icyContent = "StreamTitle='test title';StreamURL='test_url';";
+    Metadata metadata = decoder.decode(icyContent);
 
     assertThat(metadata.length()).isEqualTo(1);
     IcyInfo streamInfo = (IcyInfo) metadata.get(0);
+    assertThat(streamInfo.rawMetadata).isEqualTo(icyContent);
     assertThat(streamInfo.title).isEqualTo("test title");
     assertThat(streamInfo.url).isEqualTo("test_url");
   }
@@ -40,21 +42,39 @@ public void decode() {
   @Test
   public void decode_titleOnly() {
     IcyDecoder decoder = new IcyDecoder();
-    Metadata metadata = decoder.decode("StreamTitle='test title';");
+    String icyContent = "StreamTitle='test title';";
+    Metadata metadata = decoder.decode(icyContent);
 
     assertThat(metadata.length()).isEqualTo(1);
     IcyInfo streamInfo = (IcyInfo) metadata.get(0);
+    assertThat(streamInfo.rawMetadata).isEqualTo(icyContent);
     assertThat(streamInfo.title).isEqualTo("test title");
     assertThat(streamInfo.url).isNull();
   }
 
+  @Test
+  public void decode_extraTags() {
+    String icyContent =
+        "StreamTitle='test title';StreamURL='test_url';CustomTag|withWeirdSeparator";
+    IcyDecoder decoder = new IcyDecoder();
+    Metadata metadata = decoder.decode(icyContent);
+
+    assertThat(metadata.length()).isEqualTo(1);
+    IcyInfo streamInfo = (IcyInfo) metadata.get(0);
+    assertThat(streamInfo.rawMetadata).isEqualTo(icyContent);
+    assertThat(streamInfo.title).isEqualTo("test title");
+    assertThat(streamInfo.url).isEqualTo("test_url");
+  }
+
   @Test
   public void decode_emptyTitle() {
     IcyDecoder decoder = new IcyDecoder();
-    Metadata metadata = decoder.decode("StreamTitle='';StreamURL='test_url';");
+    String icyContent = "StreamTitle='';StreamURL='test_url';";
+    Metadata metadata = decoder.decode(icyContent);
 
     assertThat(metadata.length()).isEqualTo(1);
     IcyInfo streamInfo = (IcyInfo) metadata.get(0);
+    assertThat(streamInfo.rawMetadata).isEqualTo(icyContent);
     assertThat(streamInfo.title).isEmpty();
     assertThat(streamInfo.url).isEqualTo("test_url");
   }
@@ -62,10 +82,12 @@ public void decode_emptyTitle() {
   @Test
   public void decode_semiColonInTitle() {
     IcyDecoder decoder = new IcyDecoder();
-    Metadata metadata = decoder.decode("StreamTitle='test; title';StreamURL='test_url';");
+    String icyContent = "StreamTitle='test; title';StreamURL='test_url';";
+    Metadata metadata = decoder.decode(icyContent);
 
     assertThat(metadata.length()).isEqualTo(1);
     IcyInfo streamInfo = (IcyInfo) metadata.get(0);
+    assertThat(streamInfo.rawMetadata).isEqualTo(icyContent);
     assertThat(streamInfo.title).isEqualTo("test; title");
     assertThat(streamInfo.url).isEqualTo("test_url");
   }
@@ -73,10 +95,12 @@ public void decode_semiColonInTitle() {
   @Test
   public void decode_quoteInTitle() {
     IcyDecoder decoder = new IcyDecoder();
-    Metadata metadata = decoder.decode("StreamTitle='test' title';StreamURL='test_url';");
+    String icyContent = "StreamTitle='test' title';StreamURL='test_url';";
+    Metadata metadata = decoder.decode(icyContent);
 
     assertThat(metadata.length()).isEqualTo(1);
     IcyInfo streamInfo = (IcyInfo) metadata.get(0);
+    assertThat(streamInfo.rawMetadata).isEqualTo(icyContent);
     assertThat(streamInfo.title).isEqualTo("test' title");
     assertThat(streamInfo.url).isEqualTo("test_url");
   }
@@ -84,19 +108,25 @@ public void decode_quoteInTitle() {
   @Test
   public void decode_lineTerminatorInTitle() {
     IcyDecoder decoder = new IcyDecoder();
-    Metadata metadata = decoder.decode("StreamTitle='test\r\ntitle';StreamURL='test_url';");
+    String icyContent = "StreamTitle='test\r\ntitle';StreamURL='test_url';";
+    Metadata metadata = decoder.decode(icyContent);
 
     assertThat(metadata.length()).isEqualTo(1);
     IcyInfo streamInfo = (IcyInfo) metadata.get(0);
+    assertThat(streamInfo.rawMetadata).isEqualTo(icyContent);
     assertThat(streamInfo.title).isEqualTo("test\r\ntitle");
     assertThat(streamInfo.url).isEqualTo("test_url");
   }
 
   @Test
-  public void decode_notIcy() {
+  public void decode_noReconisedHeaders() {
     IcyDecoder decoder = new IcyDecoder();
     Metadata metadata = decoder.decode("NotIcyData");
 
-    assertThat(metadata).isNull();
+    assertThat(metadata.length()).isEqualTo(1);
+    IcyInfo streamInfo = (IcyInfo) metadata.get(0);
+    assertThat(streamInfo.rawMetadata).isEqualTo("NotIcyData");
+    assertThat(streamInfo.title).isNull();
+    assertThat(streamInfo.url).isNull();
   }
 }
diff --git a/library/core/src/test/java/com/google/android/exoplayer2/metadata/icy/IcyStreamInfoTest.java b/library/core/src/test/java/com/google/android/exoplayer2/metadata/icy/IcyInfoTest.java
similarity index 91%
rename from library/core/src/test/java/com/google/android/exoplayer2/metadata/icy/IcyStreamInfoTest.java
rename to library/core/src/test/java/com/google/android/exoplayer2/metadata/icy/IcyInfoTest.java
index 2bffe171d3..2c8e6616c9 100644
--- a/library/core/src/test/java/com/google/android/exoplayer2/metadata/icy/IcyStreamInfoTest.java
+++ b/library/core/src/test/java/com/google/android/exoplayer2/metadata/icy/IcyInfoTest.java
@@ -24,11 +24,11 @@
 
 /** Test for {@link IcyInfo}. */
 @RunWith(AndroidJUnit4.class)
-public final class IcyStreamInfoTest {
+public final class IcyInfoTest {
 
   @Test
   public void parcelEquals() {
-    IcyInfo streamInfo = new IcyInfo("name", "url");
+    IcyInfo streamInfo = new IcyInfo("StreamName='name';StreamUrl='url'", "name", "url");
     // Write to parcel.
     Parcel parcel = Parcel.obtain();
     streamInfo.writeToParcel(parcel, 0);
