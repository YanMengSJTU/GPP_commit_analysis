diff --git a/.gitignore b/.gitignore
index ea082245c5..72484daeab 100644
--- a/.gitignore
+++ b/.gitignore
@@ -23,6 +23,7 @@ gen-external-apklibs
 # Gradle
 .gradle
 build
+buildout
 out
 
 # Maven
@@ -51,3 +52,9 @@ extensions/opus/src/main/jni/libopus
 
 # FLAC extension
 extensions/flac/src/main/jni/flac
+
+# Cronet extension
+extensions/cronet/jniLibs/*
+!extensions/cronet/jniLibs/README.md
+extensions/cronet/libs/*
+!extensions/cronet/libs/README.md
diff --git a/RELEASENOTES.md b/RELEASENOTES.md
index 7aa0cf345a..9b0c1d07e3 100644
--- a/RELEASENOTES.md
+++ b/RELEASENOTES.md
@@ -1,5 +1,12 @@
 # Release notes #
 
+### r1.5.10 ###
+
+* HLS: Stability fixes.
+* MP4: Support for stz2 Atoms.
+* Enable 4K format selection on Sony AndroidTV + nVidia SHIELD.
+* TX3G caption fixes.
+
 ### r1.5.9 ###
 
 * MP4: Fixed incorrect sniffing in some cases (#1523).
diff --git a/build.gradle b/build.gradle
index 04247da05f..7e24099ded 100644
--- a/build.gradle
+++ b/build.gradle
@@ -20,7 +20,7 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.0'
+        classpath 'com.android.tools.build:gradle:2.1.2'
         classpath 'com.novoda:bintray-release:0.3.4'
     }
 }
diff --git a/demo/src/main/AndroidManifest.xml b/demo/src/main/AndroidManifest.xml
index eb82362593..1b0a025a57 100644
--- a/demo/src/main/AndroidManifest.xml
+++ b/demo/src/main/AndroidManifest.xml
@@ -16,8 +16,8 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.google.android.exoplayer.demo"
-    android:versionCode="1509"
-    android:versionName="1.5.9"
+    android:versionCode="1510"
+    android:versionName="1.5.10"
     android:theme="@style/RootTheme">
 
   <uses-permission android:name="android.permission.INTERNET"/>
diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/EventLogger.java b/demo/src/main/java/com/google/android/exoplayer/demo/EventLogger.java
index 3619cd2e9e..06fc2713ee 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/EventLogger.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/EventLogger.java
@@ -15,6 +15,9 @@
  */
 package com.google.android.exoplayer.demo;
 
+import android.media.MediaCodec.CryptoException;
+import android.os.SystemClock;
+import android.util.Log;
 import com.google.android.exoplayer.ExoPlayer;
 import com.google.android.exoplayer.MediaCodecTrackRenderer.DecoderInitializationException;
 import com.google.android.exoplayer.TimeRange;
@@ -22,11 +25,6 @@
 import com.google.android.exoplayer.chunk.Format;
 import com.google.android.exoplayer.demo.player.DemoPlayer;
 import com.google.android.exoplayer.util.VerboseLogUtil;
-
-import android.media.MediaCodec.CryptoException;
-import android.os.SystemClock;
-import android.util.Log;
-
 import java.io.IOException;
 import java.text.NumberFormat;
 import java.util.Locale;
diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/PlayerActivity.java b/demo/src/main/java/com/google/android/exoplayer/demo/PlayerActivity.java
index 15529e2bad..02689622e4 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/PlayerActivity.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/PlayerActivity.java
@@ -15,6 +15,33 @@
  */
 package com.google.android.exoplayer.demo;
 
+import android.Manifest.permission;
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.MotionEvent;
+import android.view.SurfaceHolder;
+import android.view.SurfaceView;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnKeyListener;
+import android.view.View.OnTouchListener;
+import android.view.accessibility.CaptioningManager;
+import android.widget.Button;
+import android.widget.MediaController;
+import android.widget.PopupMenu;
+import android.widget.PopupMenu.OnMenuItemClickListener;
+import android.widget.TextView;
+import android.widget.Toast;
 import com.google.android.exoplayer.AspectRatioFrameLayout;
 import com.google.android.exoplayer.ExoPlaybackException;
 import com.google.android.exoplayer.ExoPlayer;
@@ -43,35 +70,6 @@
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.Util;
 import com.google.android.exoplayer.util.VerboseLogUtil;
-
-import android.Manifest.permission;
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.net.Uri;
-import android.os.Bundle;
-import android.text.TextUtils;
-import android.util.Log;
-import android.view.KeyEvent;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.view.MotionEvent;
-import android.view.SurfaceHolder;
-import android.view.SurfaceView;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.view.View.OnKeyListener;
-import android.view.View.OnTouchListener;
-import android.view.accessibility.CaptioningManager;
-import android.widget.Button;
-import android.widget.MediaController;
-import android.widget.PopupMenu;
-import android.widget.PopupMenu.OnMenuItemClickListener;
-import android.widget.TextView;
-import android.widget.Toast;
-
 import java.net.CookieHandler;
 import java.net.CookieManager;
 import java.net.CookiePolicy;
diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/SampleChooserActivity.java b/demo/src/main/java/com/google/android/exoplayer/demo/SampleChooserActivity.java
index fa8315190b..f11f467b98 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/SampleChooserActivity.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/SampleChooserActivity.java
@@ -15,8 +15,6 @@
  */
 package com.google.android.exoplayer.demo;
 
-import com.google.android.exoplayer.demo.Samples.Sample;
-
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
@@ -29,7 +27,7 @@
 import android.widget.ExpandableListView;
 import android.widget.ExpandableListView.OnChildClickListener;
 import android.widget.TextView;
-
+import com.google.android.exoplayer.demo.Samples.Sample;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/Samples.java b/demo/src/main/java/com/google/android/exoplayer/demo/Samples.java
index acedb96c87..125e78983b 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/Samples.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/Samples.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.demo;
 
 import com.google.android.exoplayer.util.Util;
-
 import java.util.Locale;
 
 /**
@@ -258,6 +257,8 @@ public Sample(String name, String contentId, String provider, String uri, int ty
         "https://storage.googleapis.com/exoplayer-test-media-1/ogg/play.ogg", Util.TYPE_OTHER),
     new Sample("Google Glass (WebM Video with Vorbis Audio)",
         "http://demos.webmproject.org/exoplayer/glass_vp9_vorbis.webm", Util.TYPE_OTHER),
+    new Sample("Google Glass (VP9 in MP4/ISO-BMFF)",
+          "http://demos.webmproject.org/exoplayer/glass.mp4", Util.TYPE_OTHER),
     new Sample("Big Buck Bunny (FLV Video)",
         "http://vod.leasewebcdn.com/bbb.flv?ri=1024&rs=150&start=0", Util.TYPE_OTHER),
   };
diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/SmoothStreamingTestMediaDrmCallback.java b/demo/src/main/java/com/google/android/exoplayer/demo/SmoothStreamingTestMediaDrmCallback.java
index 257b0cac2e..e74dd8275e 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/SmoothStreamingTestMediaDrmCallback.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/SmoothStreamingTestMediaDrmCallback.java
@@ -15,15 +15,13 @@
  */
 package com.google.android.exoplayer.demo;
 
+import android.annotation.TargetApi;
+import android.text.TextUtils;
+import com.google.android.exoplayer.drm.ExoMediaDrm.KeyRequest;
+import com.google.android.exoplayer.drm.ExoMediaDrm.ProvisionRequest;
 import com.google.android.exoplayer.drm.MediaDrmCallback;
 import com.google.android.exoplayer.drm.StreamingDrmSessionManager;
 import com.google.android.exoplayer.util.Util;
-
-import android.annotation.TargetApi;
-import android.media.MediaDrm.KeyRequest;
-import android.media.MediaDrm.ProvisionRequest;
-import android.text.TextUtils;
-
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/WidevineTestMediaDrmCallback.java b/demo/src/main/java/com/google/android/exoplayer/demo/WidevineTestMediaDrmCallback.java
index 4d9fcf22b8..91a2c85cdd 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/WidevineTestMediaDrmCallback.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/WidevineTestMediaDrmCallback.java
@@ -15,14 +15,12 @@
  */
 package com.google.android.exoplayer.demo;
 
-import com.google.android.exoplayer.drm.MediaDrmCallback;
-import com.google.android.exoplayer.util.Util;
-
 import android.annotation.TargetApi;
-import android.media.MediaDrm.KeyRequest;
-import android.media.MediaDrm.ProvisionRequest;
 import android.text.TextUtils;
-
+import com.google.android.exoplayer.drm.ExoMediaDrm.KeyRequest;
+import com.google.android.exoplayer.drm.ExoMediaDrm.ProvisionRequest;
+import com.google.android.exoplayer.drm.MediaDrmCallback;
+import com.google.android.exoplayer.util.Util;
 import java.io.IOException;
 import java.util.UUID;
 
diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/player/DashRendererBuilder.java b/demo/src/main/java/com/google/android/exoplayer/demo/player/DashRendererBuilder.java
index 458f1d4d70..1cc85e1e31 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/player/DashRendererBuilder.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/player/DashRendererBuilder.java
@@ -15,6 +15,11 @@
  */
 package com.google.android.exoplayer.demo.player;
 
+import android.content.Context;
+import android.media.AudioManager;
+import android.media.MediaCodec;
+import android.os.Handler;
+import android.util.Log;
 import com.google.android.exoplayer.DefaultLoadControl;
 import com.google.android.exoplayer.LoadControl;
 import com.google.android.exoplayer.MediaCodecAudioTrackRenderer;
@@ -35,6 +40,7 @@
 import com.google.android.exoplayer.dash.mpd.UtcTimingElementResolver;
 import com.google.android.exoplayer.dash.mpd.UtcTimingElementResolver.UtcTimingCallback;
 import com.google.android.exoplayer.demo.player.DemoPlayer.RendererBuilder;
+import com.google.android.exoplayer.drm.FrameworkMediaCrypto;
 import com.google.android.exoplayer.drm.MediaDrmCallback;
 import com.google.android.exoplayer.drm.StreamingDrmSessionManager;
 import com.google.android.exoplayer.drm.UnsupportedDrmException;
@@ -46,13 +52,6 @@
 import com.google.android.exoplayer.upstream.UriDataSource;
 import com.google.android.exoplayer.util.ManifestFetcher;
 import com.google.android.exoplayer.util.Util;
-
-import android.content.Context;
-import android.media.AudioManager;
-import android.media.MediaCodec;
-import android.os.Handler;
-import android.util.Log;
-
 import java.io.IOException;
 
 /**
@@ -195,7 +194,7 @@ private void buildRenderers() {
 
       // Check drm support if necessary.
       boolean filterHdContent = false;
-      StreamingDrmSessionManager drmSessionManager = null;
+      StreamingDrmSessionManager<FrameworkMediaCrypto> drmSessionManager = null;
       if (hasContentProtection) {
         if (Util.SDK_INT < 18) {
           player.onRenderersError(
diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/player/DemoPlayer.java b/demo/src/main/java/com/google/android/exoplayer/demo/player/DemoPlayer.java
index 6d3925f751..e26410950f 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/player/DemoPlayer.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/player/DemoPlayer.java
@@ -15,6 +15,10 @@
  */
 package com.google.android.exoplayer.demo.player;
 
+import android.media.MediaCodec.CryptoException;
+import android.os.Handler;
+import android.os.Looper;
+import android.view.Surface;
 import com.google.android.exoplayer.CodecCounters;
 import com.google.android.exoplayer.DummyTrackRenderer;
 import com.google.android.exoplayer.ExoPlaybackException;
@@ -42,12 +46,6 @@
 import com.google.android.exoplayer.upstream.DefaultBandwidthMeter;
 import com.google.android.exoplayer.util.DebugTextViewHelper;
 import com.google.android.exoplayer.util.PlayerControl;
-
-import android.media.MediaCodec.CryptoException;
-import android.os.Handler;
-import android.os.Looper;
-import android.view.Surface;
-
 import java.io.IOException;
 import java.util.Collections;
 import java.util.List;
diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/player/ExtractorRendererBuilder.java b/demo/src/main/java/com/google/android/exoplayer/demo/player/ExtractorRendererBuilder.java
index 8da7961707..f1ea398824 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/player/ExtractorRendererBuilder.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/player/ExtractorRendererBuilder.java
@@ -15,6 +15,11 @@
  */
 package com.google.android.exoplayer.demo.player;
 
+import android.content.Context;
+import android.media.AudioManager;
+import android.media.MediaCodec;
+import android.net.Uri;
+import android.os.Handler;
 import com.google.android.exoplayer.MediaCodecAudioTrackRenderer;
 import com.google.android.exoplayer.MediaCodecSelector;
 import com.google.android.exoplayer.MediaCodecVideoTrackRenderer;
@@ -30,12 +35,6 @@
 import com.google.android.exoplayer.upstream.DefaultBandwidthMeter;
 import com.google.android.exoplayer.upstream.DefaultUriDataSource;
 
-import android.content.Context;
-import android.media.AudioManager;
-import android.media.MediaCodec;
-import android.net.Uri;
-import android.os.Handler;
-
 /**
  * A {@link RendererBuilder} for streams that can be read using an {@link Extractor}.
  */
diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/player/HlsRendererBuilder.java b/demo/src/main/java/com/google/android/exoplayer/demo/player/HlsRendererBuilder.java
index 198b37b9a3..869a4adddf 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/player/HlsRendererBuilder.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/player/HlsRendererBuilder.java
@@ -15,6 +15,10 @@
  */
 package com.google.android.exoplayer.demo.player;
 
+import android.content.Context;
+import android.media.AudioManager;
+import android.media.MediaCodec;
+import android.os.Handler;
 import com.google.android.exoplayer.DefaultLoadControl;
 import com.google.android.exoplayer.LoadControl;
 import com.google.android.exoplayer.MediaCodecAudioTrackRenderer;
@@ -42,12 +46,6 @@
 import com.google.android.exoplayer.upstream.DefaultUriDataSource;
 import com.google.android.exoplayer.util.ManifestFetcher;
 import com.google.android.exoplayer.util.ManifestFetcher.ManifestCallback;
-
-import android.content.Context;
-import android.media.AudioManager;
-import android.media.MediaCodec;
-import android.os.Handler;
-
 import java.io.IOException;
 import java.util.List;
 
@@ -145,7 +143,7 @@ public void onSingleManifest(HlsPlaylist manifest) {
       DataSource dataSource = new DefaultUriDataSource(context, bandwidthMeter, userAgent);
       HlsChunkSource chunkSource = new HlsChunkSource(true /* isMaster */, dataSource, manifest,
           DefaultHlsTrackSelector.newDefaultInstance(context), bandwidthMeter,
-          timestampAdjusterProvider, HlsChunkSource.ADAPTIVE_MODE_SPLICE);
+          timestampAdjusterProvider);
       HlsSampleSource sampleSource = new HlsSampleSource(chunkSource, loadControl,
           MAIN_BUFFER_SEGMENTS * BUFFER_SEGMENT_SIZE, mainHandler, player, DemoPlayer.TYPE_VIDEO);
       MediaCodecVideoTrackRenderer videoRenderer = new MediaCodecVideoTrackRenderer(context,
@@ -160,7 +158,7 @@ public void onSingleManifest(HlsPlaylist manifest) {
         DataSource audioDataSource = new DefaultUriDataSource(context, bandwidthMeter, userAgent);
         HlsChunkSource audioChunkSource = new HlsChunkSource(false /* isMaster */, audioDataSource,
             manifest, DefaultHlsTrackSelector.newAudioInstance(), bandwidthMeter,
-            timestampAdjusterProvider, HlsChunkSource.ADAPTIVE_MODE_SPLICE);
+            timestampAdjusterProvider);
         HlsSampleSource audioSampleSource = new HlsSampleSource(audioChunkSource, loadControl,
             AUDIO_BUFFER_SEGMENTS * BUFFER_SEGMENT_SIZE, mainHandler, player,
             DemoPlayer.TYPE_AUDIO);
@@ -180,7 +178,7 @@ public void onSingleManifest(HlsPlaylist manifest) {
         DataSource textDataSource = new DefaultUriDataSource(context, bandwidthMeter, userAgent);
         HlsChunkSource textChunkSource = new HlsChunkSource(false /* isMaster */, textDataSource,
             manifest, DefaultHlsTrackSelector.newSubtitleInstance(), bandwidthMeter,
-            timestampAdjusterProvider, HlsChunkSource.ADAPTIVE_MODE_SPLICE);
+            timestampAdjusterProvider);
         HlsSampleSource textSampleSource = new HlsSampleSource(textChunkSource, loadControl,
             TEXT_BUFFER_SEGMENTS * BUFFER_SEGMENT_SIZE, mainHandler, player, DemoPlayer.TYPE_TEXT);
         textRenderer = new TextTrackRenderer(textSampleSource, player, mainHandler.getLooper());
diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/player/SmoothStreamingRendererBuilder.java b/demo/src/main/java/com/google/android/exoplayer/demo/player/SmoothStreamingRendererBuilder.java
index bb769a833d..2dcf5c5c72 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/player/SmoothStreamingRendererBuilder.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/player/SmoothStreamingRendererBuilder.java
@@ -15,6 +15,10 @@
  */
 package com.google.android.exoplayer.demo.player;
 
+import android.content.Context;
+import android.media.AudioManager;
+import android.media.MediaCodec;
+import android.os.Handler;
 import com.google.android.exoplayer.DefaultLoadControl;
 import com.google.android.exoplayer.LoadControl;
 import com.google.android.exoplayer.MediaCodecAudioTrackRenderer;
@@ -27,6 +31,7 @@
 import com.google.android.exoplayer.chunk.FormatEvaluator.AdaptiveEvaluator;
 import com.google.android.exoplayer.demo.player.DemoPlayer.RendererBuilder;
 import com.google.android.exoplayer.drm.DrmSessionManager;
+import com.google.android.exoplayer.drm.FrameworkMediaCrypto;
 import com.google.android.exoplayer.drm.MediaDrmCallback;
 import com.google.android.exoplayer.drm.StreamingDrmSessionManager;
 import com.google.android.exoplayer.drm.UnsupportedDrmException;
@@ -42,12 +47,6 @@
 import com.google.android.exoplayer.upstream.DefaultUriDataSource;
 import com.google.android.exoplayer.util.ManifestFetcher;
 import com.google.android.exoplayer.util.Util;
-
-import android.content.Context;
-import android.media.AudioManager;
-import android.media.MediaCodec;
-import android.os.Handler;
-
 import java.io.IOException;
 
 /**
@@ -140,7 +139,7 @@ public void onSingleManifest(SmoothStreamingManifest manifest) {
       DefaultBandwidthMeter bandwidthMeter = new DefaultBandwidthMeter(mainHandler, player);
 
       // Check drm support if necessary.
-      DrmSessionManager drmSessionManager = null;
+      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager = null;
       if (manifest.protectionElement != null) {
         if (Util.SDK_INT < 18) {
           player.onRenderersError(
@@ -148,8 +147,9 @@ public void onSingleManifest(SmoothStreamingManifest manifest) {
           return;
         }
         try {
-          drmSessionManager = new StreamingDrmSessionManager(manifest.protectionElement.uuid,
-              player.getPlaybackLooper(), drmCallback, null, player.getMainHandler(), player);
+          drmSessionManager = StreamingDrmSessionManager.newFrameworkInstance(
+              manifest.protectionElement.uuid, player.getPlaybackLooper(), drmCallback, null,
+              player.getMainHandler(), player);
         } catch (UnsupportedDrmException e) {
           player.onRenderersError(e);
           return;
diff --git a/demo_ext/src/main/AndroidManifest.xml b/demo_ext/src/main/AndroidManifest.xml
index 62bddea0b8..b5413ee399 100644
--- a/demo_ext/src/main/AndroidManifest.xml
+++ b/demo_ext/src/main/AndroidManifest.xml
@@ -17,8 +17,8 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools"
     package="com.google.android.exoplayer.demo.ext"
-    android:versionCode="1509"
-    android:versionName="1.5.9"
+    android:versionCode="1510"
+    android:versionName="1.5.10"
     android:theme="@style/RootTheme">
 
   <uses-permission android:name="android.permission.INTERNET"/>
diff --git a/demo_ext/src/main/java/com/google/android/exoplayer/demo/ext/DashRendererBuilder.java b/demo_ext/src/main/java/com/google/android/exoplayer/demo/ext/DashRendererBuilder.java
index 03c8cbc347..bcfd499cbf 100644
--- a/demo_ext/src/main/java/com/google/android/exoplayer/demo/ext/DashRendererBuilder.java
+++ b/demo_ext/src/main/java/com/google/android/exoplayer/demo/ext/DashRendererBuilder.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer.demo.ext;
 
+import android.text.TextUtils;
 import com.google.android.exoplayer.DefaultLoadControl;
 import com.google.android.exoplayer.LoadControl;
 import com.google.android.exoplayer.MediaCodecAudioTrackRenderer;
@@ -40,9 +41,6 @@
 import com.google.android.exoplayer.upstream.DefaultUriDataSource;
 import com.google.android.exoplayer.util.ManifestFetcher;
 import com.google.android.exoplayer.util.ManifestFetcher.ManifestCallback;
-
-import android.text.TextUtils;
-
 import java.io.IOException;
 import java.util.ArrayList;
 
diff --git a/demo_ext/src/main/java/com/google/android/exoplayer/demo/ext/PlayerActivity.java b/demo_ext/src/main/java/com/google/android/exoplayer/demo/ext/PlayerActivity.java
index 4982eb4fa6..fd4e97ce9d 100644
--- a/demo_ext/src/main/java/com/google/android/exoplayer/demo/ext/PlayerActivity.java
+++ b/demo_ext/src/main/java/com/google/android/exoplayer/demo/ext/PlayerActivity.java
@@ -15,6 +15,22 @@
  */
 package com.google.android.exoplayer.demo.ext;
 
+import android.Manifest.permission;
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Handler;
+import android.view.MotionEvent;
+import android.view.Surface;
+import android.view.SurfaceView;
+import android.view.View;
+import android.view.View.OnTouchListener;
+import android.widget.MediaController;
+import android.widget.TextView;
+import android.widget.Toast;
 import com.google.android.exoplayer.AspectRatioFrameLayout;
 import com.google.android.exoplayer.ExoPlaybackException;
 import com.google.android.exoplayer.ExoPlayer;
@@ -35,23 +51,6 @@
 import com.google.android.exoplayer.util.PlayerControl;
 import com.google.android.exoplayer.util.Util;
 
-import android.Manifest.permission;
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Handler;
-import android.view.MotionEvent;
-import android.view.Surface;
-import android.view.SurfaceView;
-import android.view.View;
-import android.view.View.OnTouchListener;
-import android.widget.MediaController;
-import android.widget.TextView;
-import android.widget.Toast;
-
 /**
  * Sample player that shows how to use ExoPlayer Extensions to playback VP9 Video and Opus Audio.
  */
diff --git a/demo_ext/src/main/java/com/google/android/exoplayer/demo/ext/SampleChooserActivity.java b/demo_ext/src/main/java/com/google/android/exoplayer/demo/ext/SampleChooserActivity.java
index d119897539..9602a41a4b 100644
--- a/demo_ext/src/main/java/com/google/android/exoplayer/demo/ext/SampleChooserActivity.java
+++ b/demo_ext/src/main/java/com/google/android/exoplayer/demo/ext/SampleChooserActivity.java
@@ -15,8 +15,6 @@
  */
 package com.google.android.exoplayer.demo.ext;
 
-import com.google.android.exoplayer.util.Util;
-
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
@@ -30,6 +28,7 @@
 import android.widget.ArrayAdapter;
 import android.widget.ListView;
 import android.widget.TextView;
+import com.google.android.exoplayer.util.Util;
 
 /**
  * An activity for selecting from a number of samples.
diff --git a/extensions/flac/src/androidTest/java/com/google/android/exoplayer/ext/flac/FlacPlaybackTest.java b/extensions/flac/src/androidTest/java/com/google/android/exoplayer/ext/flac/FlacPlaybackTest.java
index 079fdca00b..644b7c8b2b 100644
--- a/extensions/flac/src/androidTest/java/com/google/android/exoplayer/ext/flac/FlacPlaybackTest.java
+++ b/extensions/flac/src/androidTest/java/com/google/android/exoplayer/ext/flac/FlacPlaybackTest.java
@@ -15,6 +15,10 @@
  */
 package com.google.android.exoplayer.ext.flac;
 
+import android.content.Context;
+import android.net.Uri;
+import android.os.Looper;
+import android.test.InstrumentationTestCase;
 import com.google.android.exoplayer.ExoPlaybackException;
 import com.google.android.exoplayer.ExoPlayer;
 import com.google.android.exoplayer.extractor.ExtractorSampleSource;
@@ -23,11 +27,6 @@
 import com.google.android.exoplayer.upstream.DefaultUriDataSource;
 import com.google.android.exoplayer.util.Util;
 
-import android.content.Context;
-import android.net.Uri;
-import android.os.Looper;
-import android.test.InstrumentationTestCase;
-
 /**
  * Playback tests using {@link LibflacAudioTrackRenderer}.
  */
diff --git a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacDecoder.java b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacDecoder.java
index b857a2c325..249eea1dda 100644
--- a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacDecoder.java
+++ b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacDecoder.java
@@ -19,7 +19,6 @@
 import com.google.android.exoplayer.util.FlacStreamInfo;
 import com.google.android.exoplayer.util.extensions.InputBuffer;
 import com.google.android.exoplayer.util.extensions.SimpleDecoder;
-
 import java.nio.ByteBuffer;
 import java.util.List;
 
diff --git a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacExtractor.java b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacExtractor.java
index f4d763c29a..ca86c3d1a5 100644
--- a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacExtractor.java
+++ b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacExtractor.java
@@ -26,7 +26,6 @@
 import com.google.android.exoplayer.util.FlacStreamInfo;
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
diff --git a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacJni.java b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacJni.java
index c7b066869c..838ba8bc9d 100644
--- a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacJni.java
+++ b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacJni.java
@@ -18,7 +18,6 @@
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.extractor.ExtractorInput;
 import com.google.android.exoplayer.util.FlacStreamInfo;
-
 import java.io.IOException;
 import java.nio.ByteBuffer;
 
diff --git a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacOutputBuffer.java b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacOutputBuffer.java
index 26356d7020..03ebd7aa22 100644
--- a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacOutputBuffer.java
+++ b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacOutputBuffer.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.ext.flac;
 
 import com.google.android.exoplayer.util.extensions.OutputBuffer;
-
 import java.nio.ByteBuffer;
 
 /**
diff --git a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/LibflacAudioTrackRenderer.java b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/LibflacAudioTrackRenderer.java
index 06e6406796..61734081b0 100644
--- a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/LibflacAudioTrackRenderer.java
+++ b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/LibflacAudioTrackRenderer.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer.ext.flac;
 
+import android.os.Handler;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.CodecCounters;
 import com.google.android.exoplayer.ExoPlaybackException;
@@ -29,9 +30,6 @@
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.extensions.Buffer;
 import com.google.android.exoplayer.util.extensions.InputBuffer;
-
-import android.os.Handler;
-
 import java.util.List;
 
 /**
diff --git a/extensions/okhttp/src/main/java/com/google/android/exoplayer/ext/okhttp/OkHttpDataSource.java b/extensions/okhttp/src/main/java/com/google/android/exoplayer/ext/okhttp/OkHttpDataSource.java
index 743e428b7e..90a2a75e5e 100644
--- a/extensions/okhttp/src/main/java/com/google/android/exoplayer/ext/okhttp/OkHttpDataSource.java
+++ b/extensions/okhttp/src/main/java/com/google/android/exoplayer/ext/okhttp/OkHttpDataSource.java
@@ -21,15 +21,6 @@
 import com.google.android.exoplayer.upstream.TransferListener;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.Predicate;
-
-import okhttp3.CacheControl;
-import okhttp3.HttpUrl;
-import okhttp3.MediaType;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
@@ -38,6 +29,13 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicReference;
+import okhttp3.CacheControl;
+import okhttp3.HttpUrl;
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
 
 /**
  * An {@link HttpDataSource} that delegates to Square's {@link OkHttpClient}.
diff --git a/extensions/opus/src/androidTest/java/com/google/android/exoplayer/ext/opus/OpusPlaybackTest.java b/extensions/opus/src/androidTest/java/com/google/android/exoplayer/ext/opus/OpusPlaybackTest.java
index 4ac85615ed..c1e47225db 100644
--- a/extensions/opus/src/androidTest/java/com/google/android/exoplayer/ext/opus/OpusPlaybackTest.java
+++ b/extensions/opus/src/androidTest/java/com/google/android/exoplayer/ext/opus/OpusPlaybackTest.java
@@ -15,6 +15,10 @@
  */
 package com.google.android.exoplayer.ext.opus;
 
+import android.content.Context;
+import android.net.Uri;
+import android.os.Looper;
+import android.test.InstrumentationTestCase;
 import com.google.android.exoplayer.ExoPlaybackException;
 import com.google.android.exoplayer.ExoPlayer;
 import com.google.android.exoplayer.extractor.ExtractorSampleSource;
@@ -23,11 +27,6 @@
 import com.google.android.exoplayer.upstream.DefaultUriDataSource;
 import com.google.android.exoplayer.util.Util;
 
-import android.content.Context;
-import android.net.Uri;
-import android.os.Looper;
-import android.test.InstrumentationTestCase;
-
 /**
  * Playback tests using {@link LibopusAudioTrackRenderer}.
  */
diff --git a/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/LibopusAudioTrackRenderer.java b/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/LibopusAudioTrackRenderer.java
index 8903232d2b..ab1632ffb9 100644
--- a/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/LibopusAudioTrackRenderer.java
+++ b/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/LibopusAudioTrackRenderer.java
@@ -15,6 +15,8 @@
  */
 package com.google.android.exoplayer.ext.opus;
 
+import android.media.AudioManager;
+import android.os.Handler;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.CodecCounters;
 import com.google.android.exoplayer.ExoPlaybackException;
@@ -29,9 +31,6 @@
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.extensions.Buffer;
 import com.google.android.exoplayer.util.extensions.InputBuffer;
-
-import android.os.Handler;
-
 import java.util.List;
 
 /**
@@ -113,11 +112,23 @@ public LibopusAudioTrackRenderer(SampleSource source) {
    */
   public LibopusAudioTrackRenderer(SampleSource source, Handler eventHandler,
       EventListener eventListener) {
+      this(source, eventHandler, eventListener, AudioManager.STREAM_MUSIC);
+  }
+
+  /**
+   * @param source The upstream source from which the renderer obtains samples.
+   * @param eventHandler A handler to use when delivering events to {@code eventListener}. May be
+   *     null if delivery of events is not required.
+   * @param eventListener A listener of events. May be null if delivery of events is not required.
+   * @param streamType The type of audio stream for the {@link AudioTrack}.
+   */
+  public LibopusAudioTrackRenderer(SampleSource source, Handler eventHandler,
+      EventListener eventListener, int streamType) {
     super(source);
     this.eventHandler = eventHandler;
     this.eventListener = eventListener;
     this.audioSessionId = AudioTrack.SESSION_ID_NOT_SET;
-    audioTrack = new AudioTrack();
+    audioTrack = new AudioTrack(null, streamType);
     formatHolder = new MediaFormatHolder();
   }
 
@@ -183,7 +194,7 @@ protected void doSomeWork(long positionUs, long elapsedRealtimeUs, boolean sourc
 
     // Rendering loop.
     try {
-      renderBuffer();
+      while (renderBuffer()) {};
       while (feedInputBuffer(positionUs)) {}
     } catch (AudioTrack.InitializationException e) {
       notifyAudioTrackInitializationError(e);
@@ -198,16 +209,24 @@ protected void doSomeWork(long positionUs, long elapsedRealtimeUs, boolean sourc
     codecCounters.ensureUpdated();
   }
 
-  private void renderBuffer() throws OpusDecoderException, AudioTrack.InitializationException,
+  /**
+   * Render decoded output buffer, and release the output buffer to available pool.
+   *
+   * @return True if it may be possible to render more output data. False otherwise.
+   * @throws OpusDecoderException
+   * @throws AudioTrack.InitializationException
+   * @throws AudioTrack.WriteException
+   */
+  private boolean renderBuffer() throws OpusDecoderException, AudioTrack.InitializationException,
       AudioTrack.WriteException {
     if (outputStreamEnded) {
-      return;
+      return false;
     }
 
     if (outputBuffer == null) {
       outputBuffer = decoder.dequeueOutputBuffer();
       if (outputBuffer == null) {
-        return;
+        return false;
       }
     }
 
@@ -216,7 +235,7 @@ private void renderBuffer() throws OpusDecoderException, AudioTrack.Initializati
       audioTrack.handleEndOfStream();
       outputBuffer.release();
       outputBuffer = null;
-      return;
+      return false;
     }
 
     if (!audioTrack.isInitialized()) {
@@ -244,7 +263,9 @@ private void renderBuffer() throws OpusDecoderException, AudioTrack.Initializati
       codecCounters.renderedOutputBufferCount++;
       outputBuffer.release();
       outputBuffer = null;
+      return true;
     }
+    return false;
   }
 
   private boolean feedInputBuffer(long positionUs) throws OpusDecoderException {
diff --git a/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java b/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java
index d494d32b35..09827b9055 100644
--- a/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java
+++ b/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java
@@ -19,7 +19,6 @@
 import com.google.android.exoplayer.util.extensions.Buffer;
 import com.google.android.exoplayer.util.extensions.InputBuffer;
 import com.google.android.exoplayer.util.extensions.SimpleDecoder;
-
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.util.List;
@@ -162,14 +161,8 @@ public OpusDecoderException decode(InputBuffer inputBuffer, OpusOutputBuffer out
     SampleHolder sampleHolder = inputBuffer.sampleHolder;
     outputBuffer.timestampUs = sampleHolder.timeUs;
     sampleHolder.data.position(sampleHolder.data.position() - sampleHolder.size);
-    int requiredOutputBufferSize =
-        opusGetRequiredOutputBufferSize(sampleHolder.data, sampleHolder.size, SAMPLE_RATE);
-    if (requiredOutputBufferSize < 0) {
-      return new OpusDecoderException("Error when computing required output buffer size.");
-    }
-    outputBuffer.init(requiredOutputBufferSize);
     int result = opusDecode(nativeDecoderContext, sampleHolder.data, sampleHolder.size,
-        outputBuffer.data, outputBuffer.data.capacity());
+        outputBuffer, SAMPLE_RATE);
     if (result < 0) {
       return new OpusDecoderException("Decode error: " + opusGetErrorMessage(result));
     }
@@ -199,9 +192,7 @@ public void release() {
   private native long opusInit(int sampleRate, int channelCount, int numStreams, int numCoupled,
       int gain, byte[] streamMap);
   private native int opusDecode(long decoder, ByteBuffer inputBuffer, int inputSize,
-      ByteBuffer outputBuffer, int outputSize);
-  private native int opusGetRequiredOutputBufferSize(
-      ByteBuffer inputBuffer, int inputSize, int sampleRate);
+      OpusOutputBuffer outputBuffer, int sampleRate);
   private native void opusClose(long decoder);
   private native void opusReset(long decoder);
   private native String opusGetErrorMessage(int errorCode);
diff --git a/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusOutputBuffer.java b/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusOutputBuffer.java
index 3160d07710..1089a25dac 100644
--- a/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusOutputBuffer.java
+++ b/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusOutputBuffer.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.ext.opus;
 
 import com.google.android.exoplayer.util.extensions.OutputBuffer;
-
 import java.nio.ByteBuffer;
 
 /**
diff --git a/extensions/opus/src/main/jni/opus_jni.cc b/extensions/opus/src/main/jni/opus_jni.cc
index b15da26565..602a090ccb 100644
--- a/extensions/opus/src/main/jni/opus_jni.cc
+++ b/extensions/opus/src/main/jni/opus_jni.cc
@@ -37,6 +37,10 @@
     Java_com_google_android_exoplayer_ext_opus_OpusDecoder_ ## NAME \
       (JNIEnv* env, jobject thiz, ##__VA_ARGS__)\
 
+// JNI references for OpusOutputBuffer class.
+static jmethodID initOpusOutputBuffer;
+static jfieldID opusDataField;
+
 jint JNI_OnLoad(JavaVM* vm, void* reserved) {
   JNIEnv* env;
   if (vm->GetEnv(reinterpret_cast<void**>(&env), JNI_VERSION_1_6) != JNI_OK) {
@@ -66,15 +70,33 @@ FUNC(jlong, opusInit, jint sampleRate, jint channelCount, jint numStreams,
     LOGE("Failed to set Opus header gain; status=%s", opus_strerror(status));
     return 0;
   }
+
+  // Populate JNI References.
+  const jclass outputBufferClass = env->FindClass(
+      "com/google/android/exoplayer/ext/opus/OpusOutputBuffer");
+  initOpusOutputBuffer = env->GetMethodID(outputBufferClass, "init", "(I)V");
+  opusDataField =
+      env->GetFieldID(outputBufferClass, "data", "Ljava/nio/ByteBuffer;");
+
   return reinterpret_cast<intptr_t>(decoder);
 }
 
 FUNC(jint, opusDecode, jlong jDecoder, jobject jInputBuffer, jint inputSize,
-     jobject jOutputBuffer, jint outputSize) {
+     jobject jOpusOutputBuffer, jint sampleRate) {
   OpusMSDecoder* decoder = reinterpret_cast<OpusMSDecoder*>(jDecoder);
   const uint8_t* inputBuffer =
       reinterpret_cast<const uint8_t*>(
           env->GetDirectBufferAddress(jInputBuffer));
+
+  const int32_t inputSampleCount =
+      opus_packet_get_nb_samples(inputBuffer, inputSize, sampleRate);
+  const jint outputSize = inputSampleCount * kBytesPerSample * channelCount;
+
+  // resize buffer:
+  env->CallVoidMethod(jOpusOutputBuffer, initOpusOutputBuffer, outputSize);
+  const jobject jOutputBuffer =
+      env->GetObjectField(jOpusOutputBuffer, opusDataField);
+
   int16_t* outputBuffer = reinterpret_cast<int16_t*>(
       env->GetDirectBufferAddress(jOutputBuffer));
   int sampleCount = opus_multistream_decode(decoder, inputBuffer, inputSize,
@@ -83,15 +105,6 @@ FUNC(jint, opusDecode, jlong jDecoder, jobject jInputBuffer, jint inputSize,
                            : sampleCount * kBytesPerSample * channelCount;
 }
 
-FUNC(jint, opusGetRequiredOutputBufferSize, jobject jInputBuffer,
-     jint inputSize, jint sampleRate) {
-  const uint8_t* inputBuffer = reinterpret_cast<const uint8_t*>(
-      env->GetDirectBufferAddress(jInputBuffer));
-  const int32_t sampleCount =
-      opus_packet_get_nb_samples(inputBuffer, inputSize, sampleRate);
-  return sampleCount * kBytesPerSample * channelCount;
-}
-
 FUNC(void, opusClose, jlong jDecoder) {
   OpusMSDecoder* decoder = reinterpret_cast<OpusMSDecoder*>(jDecoder);
   opus_multistream_decoder_destroy(decoder);
diff --git a/extensions/opus/src/main/proguard.cfg b/extensions/opus/src/main/proguard.cfg
index 15e910b1e9..f8bd286f4a 100644
--- a/extensions/opus/src/main/proguard.cfg
+++ b/extensions/opus/src/main/proguard.cfg
@@ -4,3 +4,8 @@
 -keepclasseswithmembernames class * {
     native <methods>;
 }
+
+# Some members of this class are being accessed from native methods. Keep them unobfuscated.
+-keep class com.google.android.exoplayer.ext.opus.OpusOutputBuffer {
+    *;
+}
diff --git a/extensions/vp9/src/androidTest/java/com/google/android/exoplayer/ext/vp9/VpxPlaybackTest.java b/extensions/vp9/src/androidTest/java/com/google/android/exoplayer/ext/vp9/VpxPlaybackTest.java
index a13580a3f7..e87f12211d 100644
--- a/extensions/vp9/src/androidTest/java/com/google/android/exoplayer/ext/vp9/VpxPlaybackTest.java
+++ b/extensions/vp9/src/androidTest/java/com/google/android/exoplayer/ext/vp9/VpxPlaybackTest.java
@@ -15,6 +15,10 @@
  */
 package com.google.android.exoplayer.ext.vp9;
 
+import android.content.Context;
+import android.net.Uri;
+import android.os.Looper;
+import android.test.InstrumentationTestCase;
 import com.google.android.exoplayer.ExoPlaybackException;
 import com.google.android.exoplayer.ExoPlayer;
 import com.google.android.exoplayer.extractor.ExtractorSampleSource;
@@ -23,11 +27,6 @@
 import com.google.android.exoplayer.upstream.DefaultUriDataSource;
 import com.google.android.exoplayer.util.Util;
 
-import android.content.Context;
-import android.net.Uri;
-import android.os.Looper;
-import android.test.InstrumentationTestCase;
-
 /**
  * Playback tests using {@link LibvpxVideoTrackRenderer}.
  */
diff --git a/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/LibvpxVideoTrackRenderer.java b/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/LibvpxVideoTrackRenderer.java
index cb7963f8fa..3a107c1555 100644
--- a/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/LibvpxVideoTrackRenderer.java
+++ b/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/LibvpxVideoTrackRenderer.java
@@ -15,6 +15,11 @@
  */
 package com.google.android.exoplayer.ext.vp9;
 
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.os.Handler;
+import android.os.SystemClock;
+import android.view.Surface;
 import com.google.android.exoplayer.CodecCounters;
 import com.google.android.exoplayer.ExoPlaybackException;
 import com.google.android.exoplayer.ExoPlayer;
@@ -26,12 +31,6 @@
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.extensions.Buffer;
 
-import android.graphics.Bitmap;
-import android.graphics.Canvas;
-import android.os.Handler;
-import android.os.SystemClock;
-import android.view.Surface;
-
 /**
  * Decodes and renders video using the native VP9 decoder.
  */
@@ -189,6 +188,13 @@ public static String getLibvpxVersion() {
     return isLibvpxAvailable() ? VpxDecoder.getLibvpxVersion() : null;
   }
 
+  /**
+   * Returns the configuration string with which the underlying libvpx library was built.
+   */
+  public static String getLibvpxConfig() {
+    return isLibvpxAvailable() ? VpxDecoder.getLibvpxConfig() : null;
+  }
+
   @Override
   protected boolean handlesTrack(MediaFormat mediaFormat) {
     return MimeTypes.VIDEO_VP9.equalsIgnoreCase(mediaFormat.mimeType);
diff --git a/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxDecoder.java b/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxDecoder.java
index d645fde877..322063035e 100644
--- a/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxDecoder.java
+++ b/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxDecoder.java
@@ -18,7 +18,6 @@
 import com.google.android.exoplayer.SampleHolder;
 import com.google.android.exoplayer.util.extensions.Buffer;
 import com.google.android.exoplayer.util.extensions.SimpleDecoder;
-
 import java.nio.ByteBuffer;
 
 /**
@@ -52,6 +51,11 @@
    */
   public static native String getLibvpxVersion();
 
+  /**
+   * Returns the configuration string with which the underlying libvpx library was built.
+   */
+  public static native String getLibvpxConfig();
+
   private final long vpxDecContext;
 
   private volatile int outputMode;
diff --git a/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxOutputBuffer.java b/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxOutputBuffer.java
index 709e504139..0875f877fd 100644
--- a/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxOutputBuffer.java
+++ b/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxOutputBuffer.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.ext.vp9;
 
 import com.google.android.exoplayer.util.extensions.OutputBuffer;
-
 import java.nio.ByteBuffer;
 
 /**
diff --git a/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxRenderer.java b/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxRenderer.java
index 508e77deac..7e78886256 100644
--- a/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxRenderer.java
+++ b/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/VpxRenderer.java
@@ -17,12 +17,10 @@
 
 import android.opengl.GLES20;
 import android.opengl.GLSurfaceView;
-
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
 import java.util.concurrent.atomic.AtomicReference;
-
 import javax.microedition.khronos.egl.EGLConfig;
 import javax.microedition.khronos.opengles.GL10;
 
diff --git a/extensions/vp9/src/main/jni/generate_libvpx_android_configs.sh b/extensions/vp9/src/main/jni/generate_libvpx_android_configs.sh
index 951dcc0dfe..80f7940794 100755
--- a/extensions/vp9/src/main/jni/generate_libvpx_android_configs.sh
+++ b/extensions/vp9/src/main/jni/generate_libvpx_android_configs.sh
@@ -31,7 +31,7 @@ shift 1
 # configuration parameters common to all architectures
 common_params="--disable-examples --disable-docs --enable-realtime-only"
 common_params+=" --disable-vp8 --disable-vp9-encoder --disable-webm-io"
-common_params+=" --disable-vp10 --disable-libyuv --disable-runtime-cpu-detect"
+common_params+=" --disable-libyuv --disable-runtime-cpu-detect"
 
 # configuration parameters for various architectures
 arch[0]="armeabi-v7a"
diff --git a/extensions/vp9/src/main/jni/vpx_jni.cc b/extensions/vp9/src/main/jni/vpx_jni.cc
index a3abe24399..247a7d6743 100644
--- a/extensions/vp9/src/main/jni/vpx_jni.cc
+++ b/extensions/vp9/src/main/jni/vpx_jni.cc
@@ -170,6 +170,10 @@ FUNC(jstring, getLibvpxVersion) {
   return env->NewStringUTF(vpx_codec_version_str());
 }
 
+FUNC(jstring, getLibvpxConfig) {
+  return env->NewStringUTF(vpx_codec_build_config());
+}
+
 FUNC(jstring, vpxGetErrorMessage, jlong jContext) {
   vpx_codec_ctx_t* const context = reinterpret_cast<vpx_codec_ctx_t*>(jContext);
   return env->NewStringUTF(vpx_codec_error(context));
diff --git a/gradle.properties b/gradle.properties
index e4a0986904..b55575bc3b 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,16 +1,3 @@
 ## Project-wide Gradle settings.
-#
-# For more details on how to configure your build environment visit
-# http://www.gradle.org/docs/current/userguide/build_environment.html
-#
-# Specifies the JVM arguments used for the daemon process.
-# The setting is particularly useful for tweaking memory settings.
-# Default value: -Xmx10248m -XX:MaxPermSize=256m
-# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
-#
-# When configured, Gradle will run in incubating parallel mode.
-# This option should only be used with decoupled projects. More details, visit
-# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
-# org.gradle.parallel=true
-#Thu Feb 04 15:49:07 GMT 2016
 android.useDeprecatedNdk=true
+buildDir=buildout
diff --git a/library/build.gradle b/library/build.gradle
index a0d11bddcf..e1b3203c91 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -69,6 +69,12 @@ android.libraryVariants.all { variant ->
         }
         exclude '**/BuildConfig.java'
         exclude '**/R.java'
+        doLast {
+            copy {
+                from "src/main/javadoc"
+                into "$buildDir/docs/javadoc"
+            }
+        }
     }
 }
 
@@ -77,7 +83,7 @@ publish {
     userOrg = 'google'
     groupId = 'com.google.android.exoplayer'
     artifactId = 'exoplayer'
-    version = 'r1.5.9'
+    version = 'r1.5.10'
     description = 'The ExoPlayer library.'
     website = 'https://github.com/google/ExoPlayer'
 }
diff --git a/library/src/androidTest/assets/ttml/frame_rate.xml b/library/src/androidTest/assets/ttml/frame_rate.xml
new file mode 100644
index 0000000000..0b06af21d9
--- /dev/null
+++ b/library/src/androidTest/assets/ttml/frame_rate.xml
@@ -0,0 +1,18 @@
+<tt xmlns="http://www.w3.org/ns/ttml"
+    xmlns:ttp="http://www.w3.org/ns/ttml#parameter"
+    ttp:frameRate="50"
+    ttp:frameRateMultiplier="1000 1001"
+    ttp:tickRate="100">
+    <head>
+        <styling>
+        </styling>
+    </head>
+    <body>
+        <div>
+            <p begin="100t" end="101t">text 1</p>
+        </div>
+        <div>
+            <p begin="50000f" end="100000f">text 2</p>
+        </div>
+    </body>
+</tt>
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/CTest.java b/library/src/androidTest/java/com/google/android/exoplayer/CTest.java
index 3aa97464a3..ec47de60c6 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/CTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/CTest.java
@@ -18,7 +18,6 @@
 import android.annotation.SuppressLint;
 import android.media.MediaCodec;
 import android.media.MediaExtractor;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/MediaFormatTest.java b/library/src/androidTest/java/com/google/android/exoplayer/MediaFormatTest.java
index 04025d2ae4..9339f7c6f2 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/MediaFormatTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/MediaFormatTest.java
@@ -15,20 +15,17 @@
  */
 package com.google.android.exoplayer;
 
-import com.google.android.exoplayer.util.MimeTypes;
-import com.google.android.exoplayer.util.Util;
-
 import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.os.Parcel;
-
-import junit.framework.TestCase;
-
+import com.google.android.exoplayer.util.MimeTypes;
+import com.google.android.exoplayer.util.Util;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import junit.framework.TestCase;
 
 /**
  * Unit test for {@link MediaFormat}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/TimeRangeTest.java b/library/src/androidTest/java/com/google/android/exoplayer/TimeRangeTest.java
index dee65dd768..dd56ff310b 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/TimeRangeTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/TimeRangeTest.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer;
 
 import com.google.android.exoplayer.TimeRange.StaticTimeRange;
-
 import junit.framework.TestCase;
 
 /**
@@ -24,6 +23,7 @@
  */
 public class TimeRangeTest extends TestCase {
 
+  @SuppressWarnings("SelfEquals")
   public void testStaticEquals() {
     TimeRange timeRange1 = new StaticTimeRange(0, 30000000);
     assertTrue(timeRange1.equals(timeRange1));
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/dash/DashChunkSourceTest.java b/library/src/androidTest/java/com/google/android/exoplayer/dash/DashChunkSourceTest.java
index b9b778226e..7ab71404bb 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/dash/DashChunkSourceTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/dash/DashChunkSourceTest.java
@@ -18,6 +18,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import android.test.InstrumentationTestCase;
 import com.google.android.exoplayer.TimeRange;
 import com.google.android.exoplayer.chunk.ChunkOperationHolder;
 import com.google.android.exoplayer.chunk.Format;
@@ -39,9 +40,6 @@
 import com.google.android.exoplayer.util.FakeClock;
 import com.google.android.exoplayer.util.ManifestFetcher;
 import com.google.android.exoplayer.util.Util;
-
-import android.test.InstrumentationTestCase;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -149,42 +147,41 @@ public void testSegmentRequestSequenceOnMultiPeriodLiveWithTemplate() {
   public void testLiveEdgeLatency() {
     long availableRangeStartMs = 0;
     long availableRangeEndMs = LIVE_DURATION_MS;
-    long seekPositionMs = LIVE_DURATION_MS;
 
     long chunkStartTimeMs = 4000;
     long chunkEndTimeMs = 5000;
     // Test with 1-1000ms latency.
     long liveEdgeLatency = 1;
-    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, availableRangeStartMs,
+        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
     liveEdgeLatency = 1000;
-    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, availableRangeStartMs,
+        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
 
     chunkStartTimeMs = 3000;
     chunkEndTimeMs = 4000;
     // Test with 1001-2000ms latency.
     liveEdgeLatency = 1001;
-    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, availableRangeStartMs,
+        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
     liveEdgeLatency = 2000;
-    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, availableRangeStartMs,
+        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
 
     chunkStartTimeMs = 0;
     chunkEndTimeMs = 1000;
     // Test with 9001-10000 latency.
     liveEdgeLatency = 9001;
-    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, availableRangeStartMs,
+        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
     liveEdgeLatency = 10000;
-    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, availableRangeStartMs,
+        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
 
     // Test with 10001 latency. Seek position will be bounded to the first chunk.
     liveEdgeLatency = 10001;
-    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, availableRangeStartMs,
+        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
   }
 
   // Private methods.
@@ -338,56 +335,54 @@ private static void checkAvailableRange(TimeRange seekRange, long startTimeUs, l
   }
 
   private static void checkLiveEdgeConsistency(long durationMs, long timelineStartMs,
-      long liveEdgeLatencyMs, long seekPositionMs, long availableRangeStartMs,
-      long availableRangeEndMs, long chunkStartTimeMs, long chunkEndTimeMs) {
+      long liveEdgeLatencyMs, long availableRangeStartMs, long availableRangeEndMs,
+      long chunkStartTimeMs, long chunkEndTimeMs) {
     checkLiveEdgeConsistencyWithTimeline(durationMs, timelineStartMs, liveEdgeLatencyMs,
-        seekPositionMs, availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs,
-        chunkEndTimeMs);
+        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
     checkLiveEdgeConsistencyWithTemplateAndUnlimitedTimeshift(durationMs, liveEdgeLatencyMs,
-        seekPositionMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
     checkLiveEdgeConsistencyWithTemplateAndLimitedTimeshift(durationMs, liveEdgeLatencyMs,
-        seekPositionMs, availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs,
-        chunkEndTimeMs);
+        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
   }
 
   private static void checkLiveEdgeConsistencyWithTimeline(long durationMs, long timelineStartMs,
-      long liveEdgeLatencyMs, long seekPositionMs, long availableRangeStartMs,
-      long availableRangeEndMs, long chunkStartTimeMs, long chunkEndTimeMs) {
+      long liveEdgeLatencyMs, long availableRangeStartMs, long availableRangeEndMs,
+      long chunkStartTimeMs, long chunkEndTimeMs) {
     MediaPresentationDescription mpd = buildLiveMpdWithTimeline(durationMs, timelineStartMs);
-    checkLiveEdgeConsistency(mpd, liveEdgeLatencyMs, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(mpd, liveEdgeLatencyMs, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
   }
 
   private static void checkLiveEdgeConsistencyWithTemplateAndUnlimitedTimeshift(long durationMs,
       long liveEdgeLatencyMs, long availablePositionMs, long availableRangeEndMs,
       long chunkStartTimeMs, long chunkEndTimeMs) {
     MediaPresentationDescription mpd = buildLiveMpdWithTemplate(durationMs, false);
-    checkLiveEdgeConsistency(mpd, liveEdgeLatencyMs, availablePositionMs, 0,
-        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(mpd, liveEdgeLatencyMs, availablePositionMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
   }
 
   private static void checkLiveEdgeConsistencyWithTemplateAndLimitedTimeshift(long durationMs,
-      long liveEdgeLatencyMs, long seekPositionMs, long availableRangeStartMs,
-      long availableRangeEndMs, long chunkStartTimeMs, long chunkEndTimeMs) {
+      long liveEdgeLatencyMs, long availableRangeStartMs, long availableRangeEndMs,
+      long chunkStartTimeMs, long chunkEndTimeMs) {
     MediaPresentationDescription mpd = buildLiveMpdWithTemplate(durationMs, true);
-    checkLiveEdgeConsistency(mpd, liveEdgeLatencyMs, seekPositionMs, availableRangeStartMs,
-        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(mpd, liveEdgeLatencyMs, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
   }
 
   private static void checkLiveEdgeConsistency(MediaPresentationDescription mpd,
-      long liveEdgeLatencyMs, long seekPositionMs, long availableRangeStartMs,
-      long availableRangeEndMs, long chunkStartTimeMs, long chunkEndTimeMs) {
+      long liveEdgeLatencyMs, long availableRangeStartMs, long availableRangeEndMs,
+      long chunkStartTimeMs, long chunkEndTimeMs) {
     DashChunkSource chunkSource = buildDashChunkSource(mpd, true, liveEdgeLatencyMs);
     List<MediaChunk> queue = new ArrayList<>();
     ChunkOperationHolder out = new ChunkOperationHolder();
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs, availableRangeStartMs,
-        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
   }
 
   private static void checkLiveEdgeConsistency(DashChunkSource chunkSource, List<MediaChunk> queue,
-      ChunkOperationHolder out, long seekPositionMs, long availableRangeStartMs,
-      long availableRangeEndMs, long chunkStartTimeMs, long chunkEndTimeMs) {
-    chunkSource.getChunkOperation(queue, seekPositionMs * 1000, out);
+      ChunkOperationHolder out, long availableRangeStartMs, long availableRangeEndMs,
+      long chunkStartTimeMs, long chunkEndTimeMs) {
+    chunkSource.getChunkOperation(queue, 0, out);
     TimeRange availableRange = chunkSource.getAvailableRange();
     checkAvailableRange(availableRange, availableRangeStartMs * 1000, availableRangeEndMs * 1000);
     if (chunkStartTimeMs < availableRangeEndMs) {
@@ -410,80 +405,80 @@ private static void checkSegmentRequestSequenceOnMultiPeriodLive(DashChunkSource
     long chunkEndTimeMs = 1000;
 
     // request first chunk
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request second chunk
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request third chunk
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request fourth chunk
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request fifth chunk
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request sixth chunk; this is the first chunk in the 2nd period
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request seventh chunk;
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request eigth chunk
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request ninth chunk
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request tenth chunk
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request "eleventh" chunk; this chunk isn't available yet, so we should get null
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescriptionParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescriptionParserTest.java
index 7aa65564a0..d733576a15 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescriptionParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescriptionParserTest.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.dash.mpd;
 
 import android.test.InstrumentationTestCase;
-
 import java.io.IOException;
 import java.io.InputStream;
 
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/RepresentationTest.java b/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/RepresentationTest.java
index 03f987cff6..9ddd6131c9 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/RepresentationTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/dash/mpd/RepresentationTest.java
@@ -18,7 +18,6 @@
 import com.google.android.exoplayer.chunk.Format;
 import com.google.android.exoplayer.dash.mpd.SegmentBase.SingleSegmentBase;
 import com.google.android.exoplayer.util.MimeTypes;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/DefaultExtractorInputTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/DefaultExtractorInputTest.java
index 581bacde10..938251ed5c 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/DefaultExtractorInputTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/DefaultExtractorInputTest.java
@@ -15,17 +15,14 @@
  */
 package com.google.android.exoplayer.extractor;
 
+import android.net.Uri;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.testutil.FakeDataSource;
 import com.google.android.exoplayer.upstream.DataSpec;
-
-import android.net.Uri;
-
-import junit.framework.TestCase;
-
 import java.io.EOFException;
 import java.io.IOException;
 import java.util.Arrays;
+import junit.framework.TestCase;
 
 /**
  * Test for {@link DefaultExtractorInput}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ExtractorTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ExtractorTest.java
index e7ffdae63d..c10599d060 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ExtractorTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ExtractorTest.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.extractor;
 
 import com.google.android.exoplayer.C;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp3/XingSeekerTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp3/XingSeekerTest.java
index 88a14401f0..d69f21305e 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp3/XingSeekerTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp3/XingSeekerTest.java
@@ -15,13 +15,12 @@
  */
 package com.google.android.exoplayer.extractor.mp3;
 
+import android.test.InstrumentationTestCase;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.util.MpegAudioHeader;
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
 
-import android.test.InstrumentationTestCase;
-
 /**
  * Tests for {@link XingSeeker}.
  */
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/AtomParsersTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/AtomParsersTest.java
new file mode 100644
index 0000000000..005f3c486b
--- /dev/null
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/AtomParsersTest.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer.extractor.mp4;
+
+import com.google.android.exoplayer.util.ParsableByteArray;
+import com.google.android.exoplayer.util.Util;
+
+import junit.framework.TestCase;
+
+/**
+ * Tests for {@link AtomParsers}.
+ */
+public final class AtomParsersTest extends TestCase {
+
+  private static final String ATOM_HEADER = "000000000000000000000000";
+  private static final String SAMPLE_COUNT = "00000004";
+  private static final byte[] FOUR_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000004"
+      + SAMPLE_COUNT + "1234");
+  private static final byte[] EIGHT_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000008"
+      + SAMPLE_COUNT + "01020304");
+  private static final byte[] SIXTEEN_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000010"
+      + SAMPLE_COUNT + "0001000200030004");
+
+  public void testStz2Parsing4BitFieldSize() {
+    verifyParsing(new Atom.LeafAtom(Atom.TYPE_stsz, new ParsableByteArray(FOUR_BIT_STZ2)));
+  }
+
+  public void testStz2Parsing8BitFieldSize() {
+    verifyParsing(new Atom.LeafAtom(Atom.TYPE_stsz, new ParsableByteArray(EIGHT_BIT_STZ2)));
+  }
+
+  public void testStz2Parsing16BitFieldSize() {
+    verifyParsing(new Atom.LeafAtom(Atom.TYPE_stsz, new ParsableByteArray(SIXTEEN_BIT_STZ2)));
+  }
+
+  private void verifyParsing(Atom.LeafAtom stz2Atom) {
+    AtomParsers.Stz2SampleSizeBox box = new AtomParsers.Stz2SampleSizeBox(stz2Atom);
+    assertEquals(4, box.getSampleCount());
+    assertFalse(box.isFixedSampleSize());
+    for (int i = 0; i < box.getSampleCount(); i++) {
+      assertEquals(i + 1, box.readNextSampleSize());
+    }
+  }
+
+}
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/Mp4ExtractorTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/Mp4ExtractorTest.java
index 01df6f1acc..6e6885b52c 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/Mp4ExtractorTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/Mp4ExtractorTest.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer.extractor.mp4;
 
+import android.annotation.TargetApi;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.extractor.SeekMap;
@@ -23,14 +24,10 @@
 import com.google.android.exoplayer.testutil.TestUtil;
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.Util;
-
-import android.annotation.TargetApi;
-
-import junit.framework.TestCase;
-
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.List;
+import junit.framework.TestCase;
 
 /**
  * Tests for {@link Mp4Extractor}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggExtractorTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggExtractorTest.java
index f75ffc08cf..89e6b9bc3d 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggExtractorTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggExtractorTest.java
@@ -18,10 +18,8 @@
 import com.google.android.exoplayer.testutil.FakeExtractorInput;
 import com.google.android.exoplayer.testutil.FakeExtractorInput.SimulatedIOException;
 import com.google.android.exoplayer.testutil.TestUtil;
-
-import junit.framework.TestCase;
-
 import java.io.IOException;
+import junit.framework.TestCase;
 
 /**
  * Unit test for {@link OggExtractor}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggParserTest.java
index ebacfee144..d9bba7bb93 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggParserTest.java
@@ -15,20 +15,17 @@
  */
 package com.google.android.exoplayer.extractor.ogg;
 
+import android.test.MoreAsserts;
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.extractor.ExtractorInput;
 import com.google.android.exoplayer.testutil.FakeExtractorInput;
 import com.google.android.exoplayer.testutil.TestUtil;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
-import android.test.MoreAsserts;
-
-import junit.framework.TestCase;
-
 import java.io.EOFException;
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.Random;
+import junit.framework.TestCase;
 
 /**
  * Unit test for {@link OggParser}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggSeekerTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggSeekerTest.java
index de0034fce4..43f4df0c82 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggSeekerTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggSeekerTest.java
@@ -18,10 +18,8 @@
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.testutil.FakeExtractorInput;
 import com.google.android.exoplayer.testutil.TestUtil;
-
-import junit.framework.TestCase;
-
 import java.io.IOException;
+import junit.framework.TestCase;
 
 /**
  * Unit test for {@link OggSeeker}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggUtilTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggUtilTest.java
index b5c4ae08e8..bc9f26574c 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggUtilTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggUtilTest.java
@@ -20,12 +20,10 @@
 import com.google.android.exoplayer.testutil.FakeExtractorInput.SimulatedIOException;
 import com.google.android.exoplayer.testutil.TestUtil;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
-import junit.framework.TestCase;
-
 import java.io.EOFException;
 import java.io.IOException;
 import java.util.Random;
+import junit.framework.TestCase;
 
 /**
  * Unit test for {@link OggUtil}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/VorbisBitArrayTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/VorbisBitArrayTest.java
index 17a0fd241e..c098dcd41b 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/VorbisBitArrayTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/VorbisBitArrayTest.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.extractor.ogg;
 
 import com.google.android.exoplayer.util.ParsableBitArray;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/VorbisReaderTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/VorbisReaderTest.java
index a085372d2b..a97c6d2e39 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/VorbisReaderTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/VorbisReaderTest.java
@@ -19,10 +19,8 @@
 import com.google.android.exoplayer.testutil.FakeExtractorInput;
 import com.google.android.exoplayer.testutil.FakeExtractorInput.SimulatedIOException;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
-import junit.framework.TestCase;
-
 import java.io.IOException;
+import junit.framework.TestCase;
 
 /**
  * Unit test for {@link VorbisReader}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/VorbisUtilTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/VorbisUtilTest.java
index 434cda6650..dc6eadf23f 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/VorbisUtilTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/VorbisUtilTest.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ts/AdtsReaderTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ts/AdtsReaderTest.java
index e75b63011b..df7886b6f8 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ts/AdtsReaderTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ts/AdtsReaderTest.java
@@ -19,10 +19,8 @@
 import com.google.android.exoplayer.testutil.FakeTrackOutput;
 import com.google.android.exoplayer.testutil.TestUtil;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
-import junit.framework.TestCase;
-
 import java.util.Arrays;
+import junit.framework.TestCase;
 
 /**
  * Test for {@link AdtsReader}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/webm/DefaultEbmlReaderTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/webm/DefaultEbmlReaderTest.java
index 90741612a3..dadfab9773 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/webm/DefaultEbmlReaderTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/webm/DefaultEbmlReaderTest.java
@@ -18,13 +18,11 @@
 import com.google.android.exoplayer.extractor.ExtractorInput;
 import com.google.android.exoplayer.testutil.FakeExtractorInput;
 import com.google.android.exoplayer.testutil.TestUtil;
-
-import junit.framework.TestCase;
-
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import junit.framework.TestCase;
 
 /**
  * Tests {@link DefaultEbmlReader}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/webm/StreamBuilder.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/webm/StreamBuilder.java
index d69a44d5d7..185c2c12d2 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/webm/StreamBuilder.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/webm/StreamBuilder.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.testutil.TestUtil;
 import com.google.android.exoplayer.util.Assertions;
-
 import java.nio.ByteBuffer;
 import java.util.Arrays;
 import java.util.LinkedList;
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/webm/VarintReaderTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/webm/VarintReaderTest.java
index 2fd8bc6f8d..fae3ae7a7b 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/webm/VarintReaderTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/webm/VarintReaderTest.java
@@ -19,11 +19,9 @@
 import com.google.android.exoplayer.extractor.ExtractorInput;
 import com.google.android.exoplayer.testutil.FakeExtractorInput;
 import com.google.android.exoplayer.testutil.FakeExtractorInput.SimulatedIOException;
-
-import junit.framework.TestCase;
-
 import java.io.EOFException;
 import java.io.IOException;
+import junit.framework.TestCase;
 
 /**
  * Tests for {@link VarintReader}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/webm/WebmExtractorTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/webm/WebmExtractorTest.java
index bcb326e3c7..fca7102398 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/webm/WebmExtractorTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/webm/WebmExtractorTest.java
@@ -17,6 +17,7 @@
 
 import static com.google.android.exoplayer.extractor.webm.StreamBuilder.TEST_ENCRYPTION_KEY_ID;
 
+import android.test.InstrumentationTestCase;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.ParserException;
@@ -30,9 +31,6 @@
 import com.google.android.exoplayer.testutil.TestUtil;
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.Util;
-
-import android.test.InstrumentationTestCase;
-
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/hls/HlsMasterPlaylistParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/hls/HlsMasterPlaylistParserTest.java
index 45716b06ab..cd377e662a 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/hls/HlsMasterPlaylistParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/hls/HlsMasterPlaylistParserTest.java
@@ -16,13 +16,11 @@
 package com.google.android.exoplayer.hls;
 
 import com.google.android.exoplayer.C;
-
-import junit.framework.TestCase;
-
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.nio.charset.Charset;
 import java.util.List;
+import junit.framework.TestCase;
 
 /**
  * Test for {@link HlsMasterPlaylistParserTest}
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/hls/HlsMediaPlaylistParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/hls/HlsMediaPlaylistParserTest.java
index bc8fcdae51..7dbf009d44 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/hls/HlsMediaPlaylistParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/hls/HlsMediaPlaylistParserTest.java
@@ -16,15 +16,13 @@
 package com.google.android.exoplayer.hls;
 
 import com.google.android.exoplayer.C;
-
-import junit.framework.TestCase;
-
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.Charset;
 import java.util.List;
 import java.util.Locale;
+import junit.framework.TestCase;
 
 /**
  * Test for {@link HlsMediaPlaylistParserTest}
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/metadata/id3/Id3ParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/metadata/id3/Id3ParserTest.java
index 083ec2d939..351dee1468 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/metadata/id3/Id3ParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/metadata/id3/Id3ParserTest.java
@@ -15,12 +15,10 @@
  */
 package com.google.android.exoplayer.metadata.id3;
 
-import com.google.android.exoplayer.ParserException;
-
 import android.test.MoreAsserts;
-import junit.framework.TestCase;
-
+import com.google.android.exoplayer.ParserException;
 import java.util.List;
+import junit.framework.TestCase;
 
 /**
  * Test for {@link Id3Parser}
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifestParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifestParserTest.java
index c8bc4241fa..9a1d7908e0 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifestParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifestParserTest.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.smoothstreaming;
 
 import android.test.InstrumentationTestCase;
-
 import java.io.IOException;
 import java.io.InputStream;
 
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeDataSource.java b/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeDataSource.java
index 8d71dc8ed7..5e6dbeff73 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeDataSource.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeDataSource.java
@@ -19,7 +19,6 @@
 import com.google.android.exoplayer.upstream.DataSource;
 import com.google.android.exoplayer.upstream.DataSpec;
 import com.google.android.exoplayer.util.Assertions;
-
 import java.io.IOException;
 import java.util.ArrayList;
 
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeExtractorInput.java b/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeExtractorInput.java
index 8b2c43746d..be4cca66dd 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeExtractorInput.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeExtractorInput.java
@@ -15,15 +15,12 @@
  */
 package com.google.android.exoplayer.testutil;
 
+import android.util.SparseBooleanArray;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.extractor.ExtractorInput;
-
-import android.util.SparseBooleanArray;
-
-import junit.framework.Assert;
-
 import java.io.EOFException;
 import java.io.IOException;
+import junit.framework.Assert;
 
 /**
  * A fake {@link ExtractorInput} capable of simulating various scenarios.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeExtractorOutput.java b/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeExtractorOutput.java
index d8aa2ed019..2db7e6e0bf 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeExtractorOutput.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeExtractorOutput.java
@@ -15,12 +15,10 @@
  */
 package com.google.android.exoplayer.testutil;
 
+import android.util.SparseArray;
 import com.google.android.exoplayer.drm.DrmInitData;
 import com.google.android.exoplayer.extractor.ExtractorOutput;
 import com.google.android.exoplayer.extractor.SeekMap;
-
-import android.util.SparseArray;
-
 import junit.framework.Assert;
 import junit.framework.TestCase;
 
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeTrackOutput.java b/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeTrackOutput.java
index 198f9ab17f..882f73432b 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeTrackOutput.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeTrackOutput.java
@@ -15,18 +15,15 @@
  */
 package com.google.android.exoplayer.testutil;
 
+import android.test.MoreAsserts;
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.extractor.ExtractorInput;
 import com.google.android.exoplayer.extractor.TrackOutput;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
-import android.test.MoreAsserts;
-
-import junit.framework.Assert;
-
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
+import junit.framework.Assert;
 
 /**
  * A fake {@link TrackOutput}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/testutil/TestUtil.java b/library/src/androidTest/java/com/google/android/exoplayer/testutil/TestUtil.java
index fc479bbc28..019b76835f 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/testutil/TestUtil.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/testutil/TestUtil.java
@@ -15,19 +15,16 @@
  */
 package com.google.android.exoplayer.testutil;
 
+import android.app.Instrumentation;
+import android.test.InstrumentationTestCase;
 import com.google.android.exoplayer.extractor.Extractor;
 import com.google.android.exoplayer.extractor.PositionHolder;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.Util;
-
-import android.app.Instrumentation;
-import android.test.InstrumentationTestCase;
-
-import org.mockito.MockitoAnnotations;
-
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Random;
+import org.mockito.MockitoAnnotations;
 
 /**
  * Utility methods for tests.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/text/subrip/SubripParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/text/subrip/SubripParserTest.java
index eabdb5be17..7423faf0ff 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/text/subrip/SubripParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/text/subrip/SubripParserTest.java
@@ -15,10 +15,8 @@
  */
 package com.google.android.exoplayer.text.subrip;
 
-import com.google.android.exoplayer.testutil.TestUtil;
-
 import android.test.InstrumentationTestCase;
-
+import com.google.android.exoplayer.testutil.TestUtil;
 import java.io.IOException;
 
 /**
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlParserTest.java
index 63b5852a2b..f44aa55839 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlParserTest.java
@@ -15,9 +15,6 @@
  */
 package com.google.android.exoplayer.text.ttml;
 
-import com.google.android.exoplayer.testutil.TestUtil;
-import com.google.android.exoplayer.text.Cue;
-
 import android.test.InstrumentationTestCase;
 import android.text.Layout;
 import android.text.Spannable;
@@ -31,7 +28,8 @@
 import android.text.style.StyleSpan;
 import android.text.style.TypefaceSpan;
 import android.text.style.UnderlineSpan;
-
+import com.google.android.exoplayer.testutil.TestUtil;
+import com.google.android.exoplayer.text.Cue;
 import java.io.IOException;
 import java.util.List;
 import java.util.Map;
@@ -57,6 +55,7 @@
   private static final String FONT_SIZE_MISSING_UNIT_TTML_FILE = "ttml/font_size_no_unit.xml";
   private static final String FONT_SIZE_INVALID_TTML_FILE = "ttml/font_size_invalid.xml";
   private static final String FONT_SIZE_EMPTY_TTML_FILE = "ttml/font_size_empty.xml";
+  private static final String FRAME_RATE_TTML_FILE = "ttml/frame_rate.xml";
 
   public void testInlineAttributes() throws IOException {
     TtmlSubtitle subtitle = getSubtitle(INLINE_ATTRIBUTES_TTML_FILE);
@@ -365,6 +364,15 @@ public void testFontSizeWithEmptyValueIsIgnored() throws IOException {
     assertEquals(0, spannable.getSpans(0, spannable.length(), AbsoluteSizeSpan.class).length);
   }
 
+  public void testFrameRate() throws IOException {
+    TtmlSubtitle subtitle = getSubtitle(FRAME_RATE_TTML_FILE);
+    assertEquals(4, subtitle.getEventTimeCount());
+    assertEquals(1_000_000, subtitle.getEventTime(0));
+    assertEquals(1_010_000, subtitle.getEventTime(1));
+    assertEquals(1_001_000_000, subtitle.getEventTime(2), 1000);
+    assertEquals(2_002_000_000, subtitle.getEventTime(3), 2000);
+  }
+
   private void assertSpans(TtmlSubtitle subtitle, int second,
       String text, String font, int fontStyle,
       int backgroundColor, int color, boolean isUnderline,
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlRenderUtilTest.java b/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlRenderUtilTest.java
index b55b658c8a..a3c535dabe 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlRenderUtilTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlRenderUtilTest.java
@@ -17,7 +17,6 @@
 
 import android.graphics.Color;
 import android.test.InstrumentationTestCase;
-
 import java.util.HashMap;
 import java.util.Map;
 
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/text/webvtt/Mp4WebvttParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/text/webvtt/Mp4WebvttParserTest.java
index b6cbada748..406514e6be 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/text/webvtt/Mp4WebvttParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/text/webvtt/Mp4WebvttParserTest.java
@@ -19,13 +19,11 @@
 import com.google.android.exoplayer.text.Cue;
 import com.google.android.exoplayer.text.Subtitle;
 import com.google.android.exoplayer.util.Util;
-
-import junit.framework.TestCase;
-
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import junit.framework.TestCase;
 
 /**
  * Unit test for {@link Mp4WebvttParser}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/text/webvtt/WebvttParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/text/webvtt/WebvttParserTest.java
index ad2e664e13..07eebde85d 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/text/webvtt/WebvttParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/text/webvtt/WebvttParserTest.java
@@ -15,13 +15,11 @@
  */
 package com.google.android.exoplayer.text.webvtt;
 
+import android.test.InstrumentationTestCase;
+import android.text.Layout.Alignment;
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.testutil.TestUtil;
 import com.google.android.exoplayer.text.Cue;
-
-import android.test.InstrumentationTestCase;
-import android.text.Layout.Alignment;
-
 import java.io.IOException;
 import java.util.List;
 
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/text/webvtt/WebvttSubtitleTest.java b/library/src/androidTest/java/com/google/android/exoplayer/text/webvtt/WebvttSubtitleTest.java
index 675c84dd8a..9d1982a0fe 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/text/webvtt/WebvttSubtitleTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/text/webvtt/WebvttSubtitleTest.java
@@ -16,11 +16,9 @@
 package com.google.android.exoplayer.text.webvtt;
 
 import com.google.android.exoplayer.text.Cue;
-
-import junit.framework.TestCase;
-
 import java.util.ArrayList;
 import java.util.List;
+import junit.framework.TestCase;
 
 /**
  * Unit test for {@link WebvttSubtitle}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/upstream/ByteArrayDataSourceTest.java b/library/src/androidTest/java/com/google/android/exoplayer/upstream/ByteArrayDataSourceTest.java
index 550cb149a8..0574193925 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/upstream/ByteArrayDataSourceTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/upstream/ByteArrayDataSourceTest.java
@@ -16,10 +16,8 @@
 package com.google.android.exoplayer.upstream;
 
 import com.google.android.exoplayer.C;
-
-import junit.framework.TestCase;
-
 import java.io.IOException;
+import junit.framework.TestCase;
 
 /**
  * Unit tests for {@link ByteArrayDataSource}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/util/NalUnitUtilTest.java b/library/src/androidTest/java/com/google/android/exoplayer/util/NalUnitUtilTest.java
index 9bd1d07d3d..0f24909b56 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/util/NalUnitUtilTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/util/NalUnitUtilTest.java
@@ -15,10 +15,9 @@
  */
 package com.google.android.exoplayer.util;
 
-import junit.framework.TestCase;
-
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import junit.framework.TestCase;
 
 /**
  * Tests for {@link NalUnitUtil}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/util/ParsableByteArrayTest.java b/library/src/androidTest/java/com/google/android/exoplayer/util/ParsableByteArrayTest.java
index a7b5b89f46..d30a455e97 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/util/ParsableByteArrayTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/util/ParsableByteArrayTest.java
@@ -15,11 +15,10 @@
  */
 package com.google.android.exoplayer.util;
 
-import junit.framework.TestCase;
-
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
 import java.util.Arrays;
+import junit.framework.TestCase;
 
 /**
  * Tests for {@link ParsableByteArray}.
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/util/UtilTest.java b/library/src/androidTest/java/com/google/android/exoplayer/util/UtilTest.java
index 7efa0aafc8..1c2ccb43dc 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/util/UtilTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/util/UtilTest.java
@@ -15,11 +15,10 @@
  */
 package com.google.android.exoplayer.util;
 
-import junit.framework.TestCase;
-
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.List;
+import junit.framework.TestCase;
 
 /**
  * Unit tests for {@link Util}.
diff --git a/library/src/main/java/com/google/android/exoplayer/C.java b/library/src/main/java/com/google/android/exoplayer/C.java
index 8a8a9c3dd1..4f22c3f06f 100644
--- a/library/src/main/java/com/google/android/exoplayer/C.java
+++ b/library/src/main/java/com/google/android/exoplayer/C.java
@@ -15,11 +15,10 @@
  */
 package com.google.android.exoplayer;
 
-import com.google.android.exoplayer.util.Util;
-
 import android.media.AudioFormat;
 import android.media.MediaCodec;
 import android.media.MediaExtractor;
+import com.google.android.exoplayer.util.Util;
 
 /**
  * Defines constants that are generally useful throughout the library.
diff --git a/library/src/main/java/com/google/android/exoplayer/CryptoInfo.java b/library/src/main/java/com/google/android/exoplayer/CryptoInfo.java
index 4be481259c..e723eb9059 100644
--- a/library/src/main/java/com/google/android/exoplayer/CryptoInfo.java
+++ b/library/src/main/java/com/google/android/exoplayer/CryptoInfo.java
@@ -15,10 +15,9 @@
  */
 package com.google.android.exoplayer;
 
-import com.google.android.exoplayer.util.Util;
-
 import android.annotation.TargetApi;
 import android.media.MediaExtractor;
+import com.google.android.exoplayer.util.Util;
 
 /**
  * Compatibility wrapper around {@link android.media.MediaCodec.CryptoInfo}.
diff --git a/library/src/main/java/com/google/android/exoplayer/DecoderInfo.java b/library/src/main/java/com/google/android/exoplayer/DecoderInfo.java
index 7d061575ef..71a414b696 100644
--- a/library/src/main/java/com/google/android/exoplayer/DecoderInfo.java
+++ b/library/src/main/java/com/google/android/exoplayer/DecoderInfo.java
@@ -15,10 +15,9 @@
  */
 package com.google.android.exoplayer;
 
-import com.google.android.exoplayer.util.Util;
-
 import android.annotation.TargetApi;
 import android.media.MediaCodecInfo.CodecCapabilities;
+import com.google.android.exoplayer.util.Util;
 
 /**
  * Contains information about a media decoder.
diff --git a/library/src/main/java/com/google/android/exoplayer/DefaultLoadControl.java b/library/src/main/java/com/google/android/exoplayer/DefaultLoadControl.java
index 17d8512bf9..c8a6d47e6c 100644
--- a/library/src/main/java/com/google/android/exoplayer/DefaultLoadControl.java
+++ b/library/src/main/java/com/google/android/exoplayer/DefaultLoadControl.java
@@ -15,11 +15,9 @@
  */
 package com.google.android.exoplayer;
 
+import android.os.Handler;
 import com.google.android.exoplayer.upstream.Allocator;
 import com.google.android.exoplayer.upstream.NetworkLock;
-
-import android.os.Handler;
-
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
diff --git a/library/src/main/java/com/google/android/exoplayer/ExoPlayer.java b/library/src/main/java/com/google/android/exoplayer/ExoPlayer.java
index 6dd79fb509..59bbe0487d 100644
--- a/library/src/main/java/com/google/android/exoplayer/ExoPlayer.java
+++ b/library/src/main/java/com/google/android/exoplayer/ExoPlayer.java
@@ -52,7 +52,7 @@
  * <h3>Threading model</h3>
  *
  * <p>The figure below shows the {@link ExoPlayer} threading model.</p>
- * <p align="center"><img src="../../../../../images/exoplayer_threading_model.png"
+ * <p align="center"><img src="doc-files/exoplayer-threading-model.png"
  *     alt="MediaPlayer state diagram"
  *     border="0"/></p>
  *
@@ -79,14 +79,14 @@
  * have been performed asynchronously by the playback thread. In contrast, the playback state
  * accessed by {@link #getPlaybackState()} is only ever changed as a result of operations
  * completing on the playback thread, as illustrated below.</p>
- * <p align="center"><img src="../../../../../images/exoplayer_state.png"
+ * <p align="center"><img src="doc-files/exoplayer-state.png"
  *     alt="ExoPlayer state"
  *     border="0"/></p>
  *
  * <p>The possible playback state transitions are shown below. Transitions can be triggered either
  * by changes in the state of the {@link TrackRenderer}s being used, or as a result of
  * {@link #prepare(TrackRenderer[])}, {@link #stop()} or {@link #release()} being invoked.</p>
- * <p align="center"><img src="../../../../../images/exoplayer_playbackstate.png"
+ * <p align="center"><img src="doc-files/exoplayer-playbackstate.png"
  *     alt="ExoPlayer playback state transitions"
  *     border="0"/></p>
  */
diff --git a/library/src/main/java/com/google/android/exoplayer/ExoPlayerImpl.java b/library/src/main/java/com/google/android/exoplayer/ExoPlayerImpl.java
index 5450a2b94c..239d32f3ba 100644
--- a/library/src/main/java/com/google/android/exoplayer/ExoPlayerImpl.java
+++ b/library/src/main/java/com/google/android/exoplayer/ExoPlayerImpl.java
@@ -20,7 +20,6 @@
 import android.os.Looper;
 import android.os.Message;
 import android.util.Log;
-
 import java.util.Arrays;
 import java.util.concurrent.CopyOnWriteArraySet;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/ExoPlayerImplInternal.java b/library/src/main/java/com/google/android/exoplayer/ExoPlayerImplInternal.java
index b7d52790e3..5eabb775a7 100644
--- a/library/src/main/java/com/google/android/exoplayer/ExoPlayerImplInternal.java
+++ b/library/src/main/java/com/google/android/exoplayer/ExoPlayerImplInternal.java
@@ -15,12 +15,6 @@
  */
 package com.google.android.exoplayer;
 
-import com.google.android.exoplayer.ExoPlayer.ExoPlayerComponent;
-import com.google.android.exoplayer.util.Assertions;
-import com.google.android.exoplayer.util.PriorityHandlerThread;
-import com.google.android.exoplayer.util.TraceUtil;
-import com.google.android.exoplayer.util.Util;
-
 import android.os.Handler;
 import android.os.HandlerThread;
 import android.os.Looper;
@@ -29,7 +23,11 @@
 import android.os.SystemClock;
 import android.util.Log;
 import android.util.Pair;
-
+import com.google.android.exoplayer.ExoPlayer.ExoPlayerComponent;
+import com.google.android.exoplayer.util.Assertions;
+import com.google.android.exoplayer.util.PriorityHandlerThread;
+import com.google.android.exoplayer.util.TraceUtil;
+import com.google.android.exoplayer.util.Util;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
diff --git a/library/src/main/java/com/google/android/exoplayer/ExoPlayerLibraryInfo.java b/library/src/main/java/com/google/android/exoplayer/ExoPlayerLibraryInfo.java
index 2c146cbcb6..3f002eccff 100644
--- a/library/src/main/java/com/google/android/exoplayer/ExoPlayerLibraryInfo.java
+++ b/library/src/main/java/com/google/android/exoplayer/ExoPlayerLibraryInfo.java
@@ -23,7 +23,7 @@
   /**
    * The version of the library, expressed as a string.
    */
-  public static final String VERSION = "1.5.9";
+  public static final String VERSION = "1.5.10";
 
   /**
    * The version of the library, expressed as an integer.
@@ -32,7 +32,7 @@
    * corresponding integer version 1002003 (001-002-003), and "123.45.6" has the corresponding
    * integer version 123045006 (123-045-006).
    */
-  public static final int VERSION_INT = 1005009;
+  public static final int VERSION_INT = 1005010;
 
   /**
    * Whether the library was compiled with {@link com.google.android.exoplayer.util.Assertions}
diff --git a/library/src/main/java/com/google/android/exoplayer/FrameworkSampleSource.java b/library/src/main/java/com/google/android/exoplayer/FrameworkSampleSource.java
index fce7aa611c..f6e1d0cd21 100644
--- a/library/src/main/java/com/google/android/exoplayer/FrameworkSampleSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/FrameworkSampleSource.java
@@ -15,6 +15,11 @@
  */
 package com.google.android.exoplayer;
 
+import android.annotation.SuppressLint;
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.media.MediaExtractor;
+import android.net.Uri;
 import com.google.android.exoplayer.SampleSource.SampleSourceReader;
 import com.google.android.exoplayer.drm.DrmInitData;
 import com.google.android.exoplayer.drm.DrmInitData.SchemeInitData;
@@ -23,13 +28,6 @@
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.Util;
-
-import android.annotation.SuppressLint;
-import android.annotation.TargetApi;
-import android.content.Context;
-import android.media.MediaExtractor;
-import android.net.Uri;
-
 import java.io.FileDescriptor;
 import java.io.IOException;
 import java.nio.ByteBuffer;
diff --git a/library/src/main/java/com/google/android/exoplayer/MediaCodecAudioTrackRenderer.java b/library/src/main/java/com/google/android/exoplayer/MediaCodecAudioTrackRenderer.java
index 0468d1ed03..03718b9c8e 100644
--- a/library/src/main/java/com/google/android/exoplayer/MediaCodecAudioTrackRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer/MediaCodecAudioTrackRenderer.java
@@ -15,12 +15,6 @@
  */
 package com.google.android.exoplayer;
 
-import com.google.android.exoplayer.MediaCodecUtil.DecoderQueryException;
-import com.google.android.exoplayer.audio.AudioCapabilities;
-import com.google.android.exoplayer.audio.AudioTrack;
-import com.google.android.exoplayer.drm.DrmSessionManager;
-import com.google.android.exoplayer.util.MimeTypes;
-
 import android.annotation.TargetApi;
 import android.media.AudioManager;
 import android.media.MediaCodec;
@@ -28,7 +22,11 @@
 import android.media.audiofx.Virtualizer;
 import android.os.Handler;
 import android.os.SystemClock;
-
+import com.google.android.exoplayer.MediaCodecUtil.DecoderQueryException;
+import com.google.android.exoplayer.audio.AudioCapabilities;
+import com.google.android.exoplayer.audio.AudioTrack;
+import com.google.android.exoplayer.drm.DrmSessionManager;
+import com.google.android.exoplayer.util.MimeTypes;
 import java.nio.ByteBuffer;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/MediaCodecSelector.java b/library/src/main/java/com/google/android/exoplayer/MediaCodecSelector.java
index 292a405179..a1d235523a 100644
--- a/library/src/main/java/com/google/android/exoplayer/MediaCodecSelector.java
+++ b/library/src/main/java/com/google/android/exoplayer/MediaCodecSelector.java
@@ -15,9 +15,8 @@
  */
 package com.google.android.exoplayer;
 
-import com.google.android.exoplayer.MediaCodecUtil.DecoderQueryException;
-
 import android.media.MediaCodec;
+import com.google.android.exoplayer.MediaCodecUtil.DecoderQueryException;
 
 /**
  * Selector of {@link MediaCodec} instances.
diff --git a/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java b/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java
index e32675083c..878aaaaf61 100644
--- a/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java
@@ -15,14 +15,6 @@
  */
 package com.google.android.exoplayer;
 
-import com.google.android.exoplayer.MediaCodecUtil.DecoderQueryException;
-import com.google.android.exoplayer.drm.DrmInitData;
-import com.google.android.exoplayer.drm.DrmSessionManager;
-import com.google.android.exoplayer.util.Assertions;
-import com.google.android.exoplayer.util.NalUnitUtil;
-import com.google.android.exoplayer.util.TraceUtil;
-import com.google.android.exoplayer.util.Util;
-
 import android.annotation.TargetApi;
 import android.media.MediaCodec;
 import android.media.MediaCodec.CodecException;
@@ -30,7 +22,14 @@
 import android.media.MediaCrypto;
 import android.os.Handler;
 import android.os.SystemClock;
-
+import com.google.android.exoplayer.MediaCodecUtil.DecoderQueryException;
+import com.google.android.exoplayer.drm.DrmInitData;
+import com.google.android.exoplayer.drm.DrmSessionManager;
+import com.google.android.exoplayer.drm.FrameworkMediaCrypto;
+import com.google.android.exoplayer.util.Assertions;
+import com.google.android.exoplayer.util.NalUnitUtil;
+import com.google.android.exoplayer.util.TraceUtil;
+import com.google.android.exoplayer.util.Util;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.List;
@@ -193,10 +192,20 @@ private static String buildCustomDiagnosticInfo(int errorCode) {
    */
   private static final int REINITIALIZATION_STATE_WAIT_END_OF_STREAM = 2;
 
+  /**
+   * H.264/AVC buffer to queue when using the adaptation workaround (see
+   * {@link #codecNeedsAdaptationWorkaround(String)}. Consists of three NAL units with start codes:
+   * Baseline sequence/picture parameter sets and a 32 * 32 pixel IDR slice. This stream can be
+   * queued to force a resolution change when adapting to a new format.
+   */
+  private static final byte[] ADAPTATION_WORKAROUND_BUFFER = Util.getBytesFromHexString(
+      "0000016742C00BDA259000000168CE0F13200000016588840DCE7118A0002FBF1C31C3275D78");
+  private static final int ADAPTATION_WORKAROUND_SLICE_WIDTH_HEIGHT = 32;
+
   public final CodecCounters codecCounters;
 
   private final MediaCodecSelector mediaCodecSelector;
-  private final DrmSessionManager drmSessionManager;
+  private final DrmSessionManager<FrameworkMediaCrypto> drmSessionManager;
   private final boolean playClearSamplesWithoutKeys;
   private final SampleHolder sampleHolder;
   private final MediaFormatHolder formatHolder;
@@ -212,9 +221,12 @@ private static String buildCustomDiagnosticInfo(int errorCode) {
   private boolean codecIsAdaptive;
   private boolean codecNeedsDiscardToSpsWorkaround;
   private boolean codecNeedsFlushWorkaround;
+  private boolean codecNeedsAdaptationWorkaround;
   private boolean codecNeedsEosPropagationWorkaround;
   private boolean codecNeedsEosFlushWorkaround;
   private boolean codecNeedsMonoChannelCountWorkaround;
+  private boolean codecNeedsAdaptationWorkaroundBuffer;
+  private boolean shouldSkipAdaptationWorkaroundOutputBuffer;
   private ByteBuffer[] inputBuffers;
   private ByteBuffer[] outputBuffers;
   private long codecHotswapTimeMs;
@@ -248,8 +260,8 @@ private static String buildCustomDiagnosticInfo(int errorCode) {
    * @param eventListener A listener of events. May be null if delivery of events is not required.
    */
   public MediaCodecTrackRenderer(SampleSource source, MediaCodecSelector mediaCodecSelector,
-      DrmSessionManager drmSessionManager, boolean playClearSamplesWithoutKeys,
-      Handler eventHandler, EventListener eventListener) {
+      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
+      boolean playClearSamplesWithoutKeys, Handler eventHandler, EventListener eventListener) {
     this (new SampleSource[] {source}, mediaCodecSelector, drmSessionManager,
         playClearSamplesWithoutKeys, eventHandler, eventListener);
   }
@@ -269,8 +281,8 @@ public MediaCodecTrackRenderer(SampleSource source, MediaCodecSelector mediaCode
    * @param eventListener A listener of events. May be null if delivery of events is not required.
    */
   public MediaCodecTrackRenderer(SampleSource[] sources, MediaCodecSelector mediaCodecSelector,
-      DrmSessionManager drmSessionManager, boolean playClearSamplesWithoutKeys,
-      Handler eventHandler, EventListener eventListener) {
+      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
+      boolean playClearSamplesWithoutKeys, Handler eventHandler, EventListener eventListener) {
     super(sources);
     Assertions.checkState(Util.SDK_INT >= 16);
     this.mediaCodecSelector = Assertions.checkNotNull(mediaCodecSelector);
@@ -352,7 +364,7 @@ protected final void maybeInitCodec() throws ExoPlaybackException {
         throw new ExoPlaybackException(drmSessionManager.getError());
       } else if (drmSessionState == DrmSessionManager.STATE_OPENED
           || drmSessionState == DrmSessionManager.STATE_OPENED_WITH_KEYS) {
-        mediaCrypto = drmSessionManager.getMediaCrypto();
+        mediaCrypto = drmSessionManager.getMediaCrypto().getWrappedMediaCrypto();
         requiresSecureDecoder = drmSessionManager.requiresSecureDecoderComponent(mimeType);
       } else {
         // The drm session isn't open yet.
@@ -377,6 +389,7 @@ protected final void maybeInitCodec() throws ExoPlaybackException {
     codecIsAdaptive = decoderInfo.adaptive;
     codecNeedsDiscardToSpsWorkaround = codecNeedsDiscardToSpsWorkaround(codecName, format);
     codecNeedsFlushWorkaround = codecNeedsFlushWorkaround(codecName);
+    codecNeedsAdaptationWorkaround = codecNeedsAdaptationWorkaround(codecName);
     codecNeedsEosPropagationWorkaround = codecNeedsEosPropagationWorkaround(codecName);
     codecNeedsEosFlushWorkaround = codecNeedsEosFlushWorkaround(codecName);
     codecNeedsMonoChannelCountWorkaround = codecNeedsMonoChannelCountWorkaround(codecName, format);
@@ -458,9 +471,12 @@ protected void releaseCodec() {
       codecIsAdaptive = false;
       codecNeedsDiscardToSpsWorkaround = false;
       codecNeedsFlushWorkaround = false;
+      codecNeedsAdaptationWorkaround = false;
       codecNeedsEosPropagationWorkaround = false;
       codecNeedsEosFlushWorkaround = false;
       codecNeedsMonoChannelCountWorkaround = false;
+      codecNeedsAdaptationWorkaroundBuffer = false;
+      shouldSkipAdaptationWorkaroundOutputBuffer = false;
       codecReceivedEos = false;
       codecReconfigurationState = RECONFIGURATION_STATE_NONE;
       codecReinitializationState = REINITIALIZATION_STATE_NONE;
@@ -532,6 +548,8 @@ protected void flushCodec() throws ExoPlaybackException {
     waitingForFirstSyncFrame = true;
     waitingForKeys = false;
     decodeOnlyPresentationTimestamps.clear();
+    codecNeedsAdaptationWorkaroundBuffer = false;
+    shouldSkipAdaptationWorkaroundOutputBuffer = false;
     if (codecNeedsFlushWorkaround || (codecNeedsEosFlushWorkaround && codecReceivedEos)) {
       // Workaround framework bugs. See [Internal: b/8347958, b/8578467, b/8543366, b/23361053].
       releaseCodec();
@@ -592,6 +610,15 @@ private boolean feedInputBuffer(long positionUs, boolean firstFeed) throws ExoPl
       return false;
     }
 
+    if (codecNeedsAdaptationWorkaroundBuffer) {
+      codecNeedsAdaptationWorkaroundBuffer = false;
+      sampleHolder.data.put(ADAPTATION_WORKAROUND_BUFFER);
+      codec.queueInputBuffer(inputIndex, 0, ADAPTATION_WORKAROUND_BUFFER.length, 0, 0);
+      inputIndex = -1;
+      codecReceivedBuffers = true;
+      return true;
+    }
+
     int result;
     if (waitingForKeys) {
       // We've already read an encrypted sample into sampleHolder, and are waiting for keys.
@@ -758,6 +785,8 @@ protected void onInputFormatChanged(MediaFormatHolder formatHolder) throws ExoPl
     if (codec != null && canReconfigureCodec(codec, codecIsAdaptive, oldFormat, format)) {
       codecReconfigured = true;
       codecReconfigurationState = RECONFIGURATION_STATE_WRITE_PENDING;
+      codecNeedsAdaptationWorkaroundBuffer = codecNeedsAdaptationWorkaround
+          && format.width == oldFormat.width && format.height == oldFormat.height;
     } else {
       if (codecReceivedBuffers) {
         // Signal end of stream and wait for any final output buffers before re-initialization.
@@ -906,6 +935,13 @@ private boolean drainOutputBuffer(long positionUs, long elapsedRealtimeUs)
       return false;
     }
 
+    if (shouldSkipAdaptationWorkaroundOutputBuffer) {
+      shouldSkipAdaptationWorkaroundOutputBuffer = false;
+      codec.releaseOutputBuffer(outputIndex, false);
+      outputIndex = -1;
+      return true;
+    }
+
     if ((outputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {
       processEndOfStream();
       return false;
@@ -932,6 +968,15 @@ private boolean drainOutputBuffer(long positionUs, long elapsedRealtimeUs)
    */
   private void processOutputFormat() throws ExoPlaybackException {
     android.media.MediaFormat format = codec.getOutputFormat();
+    if (codecNeedsAdaptationWorkaround
+        && format.getInteger(android.media.MediaFormat.KEY_WIDTH)
+            == ADAPTATION_WORKAROUND_SLICE_WIDTH_HEIGHT
+        && format.getInteger(android.media.MediaFormat.KEY_HEIGHT)
+            == ADAPTATION_WORKAROUND_SLICE_WIDTH_HEIGHT) {
+      // We assume this format changed event was caused by the adaptation workaround.
+      shouldSkipAdaptationWorkaroundOutputBuffer = true;
+      return;
+    }
     if (codecNeedsMonoChannelCountWorkaround) {
       format.setInteger(android.media.MediaFormat.KEY_CHANNEL_COUNT, 1);
     }
@@ -1028,6 +1073,25 @@ private static boolean codecNeedsFlushWorkaround(String name) {
             && ("OMX.Exynos.avc.dec".equals(name) || "OMX.Exynos.avc.dec.secure".equals(name)));
   }
 
+  /**
+   * Returns whether the decoder is known to get stuck during some adaptations where the resolution
+   * does not change.
+   * <p>
+   * If true is returned, the renderer will work around the issue by queueing and discarding a blank
+   * frame at a different resolution, which resets the codec's internal state.
+   * <p>
+   * See [Internal: b/27807182].
+   *
+   * @param name The name of the decoder.
+   * @return True if the decoder is known to get stuck during some adaptations.
+   */
+  private static boolean codecNeedsAdaptationWorkaround(String name) {
+    return Util.SDK_INT < 24
+        && ("OMX.Nvidia.h264.decode".equals(name) || "OMX.Nvidia.h264.decode.secure".equals(name))
+        && (Util.DEVICE.equals("flounder") || Util.DEVICE.equals("flounder_lte")
+            || Util.DEVICE.equals("grouper") || Util.DEVICE.equals("tilapia"));
+  }
+
   /**
    * Returns whether the decoder is an H.264/AVC decoder known to fail if NAL units are queued
    * before the codec specific data.
diff --git a/library/src/main/java/com/google/android/exoplayer/MediaCodecUtil.java b/library/src/main/java/com/google/android/exoplayer/MediaCodecUtil.java
index 71610d8e44..593f513066 100644
--- a/library/src/main/java/com/google/android/exoplayer/MediaCodecUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/MediaCodecUtil.java
@@ -15,10 +15,6 @@
  */
 package com.google.android.exoplayer;
 
-import com.google.android.exoplayer.util.Assertions;
-import com.google.android.exoplayer.util.MimeTypes;
-import com.google.android.exoplayer.util.Util;
-
 import android.annotation.TargetApi;
 import android.media.MediaCodecInfo;
 import android.media.MediaCodecInfo.CodecCapabilities;
@@ -26,7 +22,9 @@
 import android.media.MediaCodecList;
 import android.text.TextUtils;
 import android.util.Log;
-
+import com.google.android.exoplayer.util.Assertions;
+import com.google.android.exoplayer.util.MimeTypes;
+import com.google.android.exoplayer.util.Util;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -201,11 +199,11 @@ private static boolean isCodecUsableDecoder(MediaCodecInfo info, String name,
 
     // Work around broken audio decoders.
     if (Util.SDK_INT < 21
-        && ("CIPAACDecoder".equals(name))
+        && ("CIPAACDecoder".equals(name)
             || "CIPMP3Decoder".equals(name)
             || "CIPVorbisDecoder".equals(name)
             || "AACDecoder".equals(name)
-            || "MP3Decoder".equals(name)) {
+            || "MP3Decoder".equals(name))) {
       return false;
     }
     // Work around https://github.com/google/ExoPlayer/issues/398
@@ -218,12 +216,16 @@ private static boolean isCodecUsableDecoder(MediaCodecInfo info, String name,
       return false;
     }
 
-    // Work around an issue where creating a particular MP3 decoder on some devices on platform API
-    // version 16 crashes mediaserver.
-    if (Util.SDK_INT == 16
+    // Work around an issue where querying/creating a particular MP3 decoder on some devices on
+    // platform API version 16 fails.
+    if (Util.SDK_INT == 16 && Util.DEVICE != null
         && "OMX.qcom.audio.decoder.mp3".equals(name)
         && ("dlxu".equals(Util.DEVICE) // HTC Butterfly
             || "protou".equals(Util.DEVICE) // HTC Desire X
+            || "ville".equals(Util.DEVICE) // HTC One S
+            || "villeplus".equals(Util.DEVICE)
+            || "villec2".equals(Util.DEVICE)
+            || Util.DEVICE.startsWith("gee") // LGE Optimus G
             || "C6602".equals(Util.DEVICE) // Sony Xperia Z
             || "C6603".equals(Util.DEVICE)
             || "C6606".equals(Util.DEVICE)
@@ -243,13 +245,19 @@ private static boolean isCodecUsableDecoder(MediaCodecInfo info, String name,
       return false;
     }
 
-    // Work around an issue where the VP8 decoder on Samsung Galaxy S3/S4 Mini does not render
-    // video.
+    // Work around https://github.com/google/ExoPlayer/issues/548
+    // VP8 decoder on Samsung Galaxy S3/S4/S4 Mini/Tab 3 does not render video.
     if (Util.SDK_INT <= 19 && Util.DEVICE != null
-        && (Util.DEVICE.startsWith("d2") || Util.DEVICE.startsWith("serrano"))
+        && (Util.DEVICE.startsWith("d2") || Util.DEVICE.startsWith("serrano")
+            || Util.DEVICE.startsWith("jflte") || Util.DEVICE.startsWith("santos"))
         && "samsung".equals(Util.MANUFACTURER) && name.equals("OMX.SEC.vp8.dec")) {
       return false;
     }
+    // VP8 decoder on Samsung Galaxy S4 cannot be queried.
+    if (Util.SDK_INT <= 19 && Util.DEVICE != null && Util.DEVICE.startsWith("jflte")
+        && "OMX.qcom.video.decoder.vp8".equals(name)) {
+      return false;
+    }
 
     return true;
   }
diff --git a/library/src/main/java/com/google/android/exoplayer/MediaCodecVideoTrackRenderer.java b/library/src/main/java/com/google/android/exoplayer/MediaCodecVideoTrackRenderer.java
index fa2e684e88..add4d365cf 100644
--- a/library/src/main/java/com/google/android/exoplayer/MediaCodecVideoTrackRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer/MediaCodecVideoTrackRenderer.java
@@ -15,12 +15,6 @@
  */
 package com.google.android.exoplayer;
 
-import com.google.android.exoplayer.MediaCodecUtil.DecoderQueryException;
-import com.google.android.exoplayer.drm.DrmSessionManager;
-import com.google.android.exoplayer.util.MimeTypes;
-import com.google.android.exoplayer.util.TraceUtil;
-import com.google.android.exoplayer.util.Util;
-
 import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.content.Context;
@@ -30,7 +24,12 @@
 import android.os.SystemClock;
 import android.view.Surface;
 import android.view.TextureView;
-
+import com.google.android.exoplayer.MediaCodecUtil.DecoderQueryException;
+import com.google.android.exoplayer.drm.DrmSessionManager;
+import com.google.android.exoplayer.drm.FrameworkMediaCrypto;
+import com.google.android.exoplayer.util.MimeTypes;
+import com.google.android.exoplayer.util.TraceUtil;
+import com.google.android.exoplayer.util.Util;
 import java.nio.ByteBuffer;
 
 /**
@@ -197,8 +196,9 @@ public MediaCodecVideoTrackRenderer(Context context, SampleSource source,
    */
   public MediaCodecVideoTrackRenderer(Context context, SampleSource source,
       MediaCodecSelector mediaCodecSelector, int videoScalingMode, long allowedJoiningTimeMs,
-      DrmSessionManager drmSessionManager, boolean playClearSamplesWithoutKeys,
-      Handler eventHandler, EventListener eventListener, int maxDroppedFrameCountToNotify) {
+      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
+      boolean playClearSamplesWithoutKeys, Handler eventHandler, EventListener eventListener,
+      int maxDroppedFrameCountToNotify) {
     super(source, mediaCodecSelector, drmSessionManager, playClearSamplesWithoutKeys, eventHandler,
         eventListener);
     this.frameReleaseTimeHelper = new VideoFrameReleaseTimeHelper(context);
diff --git a/library/src/main/java/com/google/android/exoplayer/MediaFormat.java b/library/src/main/java/com/google/android/exoplayer/MediaFormat.java
index 846a778718..2051acf48f 100644
--- a/library/src/main/java/com/google/android/exoplayer/MediaFormat.java
+++ b/library/src/main/java/com/google/android/exoplayer/MediaFormat.java
@@ -15,15 +15,13 @@
  */
 package com.google.android.exoplayer;
 
-import com.google.android.exoplayer.util.Assertions;
-import com.google.android.exoplayer.util.MimeTypes;
-import com.google.android.exoplayer.util.Util;
-
 import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.os.Parcel;
 import android.os.Parcelable;
-
+import com.google.android.exoplayer.util.Assertions;
+import com.google.android.exoplayer.util.MimeTypes;
+import com.google.android.exoplayer.util.Util;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Arrays;
diff --git a/library/src/main/java/com/google/android/exoplayer/SampleSourceTrackRenderer.java b/library/src/main/java/com/google/android/exoplayer/SampleSourceTrackRenderer.java
index 08edae3bc3..2759edac39 100644
--- a/library/src/main/java/com/google/android/exoplayer/SampleSourceTrackRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer/SampleSourceTrackRenderer.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.MediaCodecUtil.DecoderQueryException;
 import com.google.android.exoplayer.SampleSource.SampleSourceReader;
-
 import java.io.IOException;
 import java.util.Arrays;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/SingleSampleSource.java b/library/src/main/java/com/google/android/exoplayer/SingleSampleSource.java
index 6d0aac646d..f31948e122 100644
--- a/library/src/main/java/com/google/android/exoplayer/SingleSampleSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/SingleSampleSource.java
@@ -15,17 +15,15 @@
  */
 package com.google.android.exoplayer;
 
+import android.net.Uri;
+import android.os.Handler;
+import android.os.SystemClock;
 import com.google.android.exoplayer.SampleSource.SampleSourceReader;
 import com.google.android.exoplayer.upstream.DataSource;
 import com.google.android.exoplayer.upstream.DataSpec;
 import com.google.android.exoplayer.upstream.Loader;
 import com.google.android.exoplayer.upstream.Loader.Loadable;
 import com.google.android.exoplayer.util.Assertions;
-
-import android.net.Uri;
-import android.os.Handler;
-import android.os.SystemClock;
-
 import java.io.IOException;
 import java.util.Arrays;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/TimeRange.java b/library/src/main/java/com/google/android/exoplayer/TimeRange.java
index 46db5aa059..9b307b881b 100644
--- a/library/src/main/java/com/google/android/exoplayer/TimeRange.java
+++ b/library/src/main/java/com/google/android/exoplayer/TimeRange.java
@@ -15,9 +15,8 @@
  */
 package com.google.android.exoplayer;
 
-import com.google.android.exoplayer.util.Clock;
-
 import android.os.SystemClock;
+import com.google.android.exoplayer.util.Clock;
 
 /**
  * A container to store a start and end time in microseconds.
diff --git a/library/src/main/java/com/google/android/exoplayer/TrackRenderer.java b/library/src/main/java/com/google/android/exoplayer/TrackRenderer.java
index e2fd0301b4..fd6fc0e2d7 100644
--- a/library/src/main/java/com/google/android/exoplayer/TrackRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer/TrackRenderer.java
@@ -25,7 +25,7 @@
  * will transition its renderers through various states as the overall playback state changes. The
  * valid state transitions are shown below, annotated with the methods that are invoked during each
  * transition.
- * <p align="center"><img src="../../../../../images/trackrenderer_state.png"
+ * <p align="center"><img src="doc-files/trackrenderer-states.png"
  *     alt="TrackRenderer state transitions"
  *     border="0"/></p>
  */
diff --git a/library/src/main/java/com/google/android/exoplayer/audio/AudioCapabilities.java b/library/src/main/java/com/google/android/exoplayer/audio/AudioCapabilities.java
index 33ff498aa7..00ca9aaf91 100644
--- a/library/src/main/java/com/google/android/exoplayer/audio/AudioCapabilities.java
+++ b/library/src/main/java/com/google/android/exoplayer/audio/AudioCapabilities.java
@@ -22,7 +22,6 @@
 import android.content.IntentFilter;
 import android.media.AudioFormat;
 import android.media.AudioManager;
-
 import java.util.Arrays;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/audio/AudioCapabilitiesReceiver.java b/library/src/main/java/com/google/android/exoplayer/audio/AudioCapabilitiesReceiver.java
index 68bae41cf3..6075dfce0c 100644
--- a/library/src/main/java/com/google/android/exoplayer/audio/AudioCapabilitiesReceiver.java
+++ b/library/src/main/java/com/google/android/exoplayer/audio/AudioCapabilitiesReceiver.java
@@ -15,14 +15,13 @@
  */
 package com.google.android.exoplayer.audio;
 
-import com.google.android.exoplayer.util.Assertions;
-import com.google.android.exoplayer.util.Util;
-
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.media.AudioManager;
+import com.google.android.exoplayer.util.Assertions;
+import com.google.android.exoplayer.util.Util;
 
 /**
  * Notifies a listener when the audio playback capabilities change. Call {@link #register} to start
diff --git a/library/src/main/java/com/google/android/exoplayer/audio/AudioTrack.java b/library/src/main/java/com/google/android/exoplayer/audio/AudioTrack.java
index a38846fdaa..2c4b2d6488 100644
--- a/library/src/main/java/com/google/android/exoplayer/audio/AudioTrack.java
+++ b/library/src/main/java/com/google/android/exoplayer/audio/AudioTrack.java
@@ -15,13 +15,6 @@
  */
 package com.google.android.exoplayer.audio;
 
-import com.google.android.exoplayer.C;
-import com.google.android.exoplayer.util.Ac3Util;
-import com.google.android.exoplayer.util.Assertions;
-import com.google.android.exoplayer.util.DtsUtil;
-import com.google.android.exoplayer.util.MimeTypes;
-import com.google.android.exoplayer.util.Util;
-
 import android.annotation.TargetApi;
 import android.media.AudioFormat;
 import android.media.AudioManager;
@@ -30,7 +23,12 @@
 import android.os.ConditionVariable;
 import android.os.SystemClock;
 import android.util.Log;
-
+import com.google.android.exoplayer.C;
+import com.google.android.exoplayer.util.Ac3Util;
+import com.google.android.exoplayer.util.Assertions;
+import com.google.android.exoplayer.util.DtsUtil;
+import com.google.android.exoplayer.util.MimeTypes;
+import com.google.android.exoplayer.util.Util;
 import java.lang.reflect.Method;
 import java.nio.ByteBuffer;
 
@@ -170,7 +168,7 @@ public InvalidAudioTrackTimestampException(String message) {
 
   /**
    * Whether to enable a workaround for an issue where an audio effect does not keep its session
-   * active across releasing/initializing a new audio track, on platform API version < 21.
+   * active across releasing/initializing a new audio track, on platform API version before 21.
    * <p>
    * The flag must be set before creating a player.
    */
@@ -569,10 +567,6 @@ public void handleDiscontinuity() {
    */
   public int handleBuffer(ByteBuffer buffer, int offset, int size, long presentationTimeUs)
       throws WriteException {
-    if (size == 0) {
-      return RESULT_BUFFER_CONSUMED;
-    }
-
     if (needsPassthroughWorkarounds()) {
       // An AC-3 audio track continues to play data written while it is paused. Stop writing so its
       // buffer empties. See [Internal: b/18899620].
@@ -593,6 +587,9 @@ public int handleBuffer(ByteBuffer buffer, int offset, int size, long presentati
     if (bufferBytesRemaining == 0) {
       // The previous buffer (if there was one) was fully written to the audio track. We're now
       // seeing a new buffer for the first time.
+      if (size == 0) {
+        return RESULT_BUFFER_CONSUMED;
+      }
 
       useResampledBuffer = targetEncoding != sourceEncoding;
       if (useResampledBuffer) {
diff --git a/library/src/main/java/com/google/android/exoplayer/chunk/BaseChunkSampleSourceEventListener.java b/library/src/main/java/com/google/android/exoplayer/chunk/BaseChunkSampleSourceEventListener.java
index 9bf75da420..0beb067340 100644
--- a/library/src/main/java/com/google/android/exoplayer/chunk/BaseChunkSampleSourceEventListener.java
+++ b/library/src/main/java/com/google/android/exoplayer/chunk/BaseChunkSampleSourceEventListener.java
@@ -18,7 +18,6 @@
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.SampleSource;
 import com.google.android.exoplayer.SampleSource.SampleSourceReader;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/chunk/ChunkExtractorWrapper.java b/library/src/main/java/com/google/android/exoplayer/chunk/ChunkExtractorWrapper.java
index 7589731a13..8b48461fca 100644
--- a/library/src/main/java/com/google/android/exoplayer/chunk/ChunkExtractorWrapper.java
+++ b/library/src/main/java/com/google/android/exoplayer/chunk/ChunkExtractorWrapper.java
@@ -24,7 +24,6 @@
 import com.google.android.exoplayer.extractor.TrackOutput;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/chunk/ChunkSampleSource.java b/library/src/main/java/com/google/android/exoplayer/chunk/ChunkSampleSource.java
index cc3dad6a05..69b06c611c 100644
--- a/library/src/main/java/com/google/android/exoplayer/chunk/ChunkSampleSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/chunk/ChunkSampleSource.java
@@ -15,6 +15,8 @@
  */
 package com.google.android.exoplayer.chunk;
 
+import android.os.Handler;
+import android.os.SystemClock;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.LoadControl;
 import com.google.android.exoplayer.MediaFormat;
@@ -27,10 +29,6 @@
 import com.google.android.exoplayer.upstream.Loader;
 import com.google.android.exoplayer.upstream.Loader.Loadable;
 import com.google.android.exoplayer.util.Assertions;
-
-import android.os.Handler;
-import android.os.SystemClock;
-
 import java.io.IOException;
 import java.util.Collections;
 import java.util.LinkedList;
diff --git a/library/src/main/java/com/google/android/exoplayer/chunk/ChunkSource.java b/library/src/main/java/com/google/android/exoplayer/chunk/ChunkSource.java
index 922025aae2..727ef67499 100644
--- a/library/src/main/java/com/google/android/exoplayer/chunk/ChunkSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/chunk/ChunkSource.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.chunk;
 
 import com.google.android.exoplayer.MediaFormat;
-
 import java.io.IOException;
 import java.util.List;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/chunk/ContainerMediaChunk.java b/library/src/main/java/com/google/android/exoplayer/chunk/ContainerMediaChunk.java
index b26af291cb..d3d8329ae7 100644
--- a/library/src/main/java/com/google/android/exoplayer/chunk/ContainerMediaChunk.java
+++ b/library/src/main/java/com/google/android/exoplayer/chunk/ContainerMediaChunk.java
@@ -26,7 +26,6 @@
 import com.google.android.exoplayer.upstream.DataSpec;
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/chunk/DataChunk.java b/library/src/main/java/com/google/android/exoplayer/chunk/DataChunk.java
index 985fc233df..05bc4c92a4 100644
--- a/library/src/main/java/com/google/android/exoplayer/chunk/DataChunk.java
+++ b/library/src/main/java/com/google/android/exoplayer/chunk/DataChunk.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.upstream.DataSource;
 import com.google.android.exoplayer.upstream.DataSpec;
-
 import java.io.IOException;
 import java.util.Arrays;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/chunk/Format.java b/library/src/main/java/com/google/android/exoplayer/chunk/Format.java
index b7feded311..506bcf64db 100644
--- a/library/src/main/java/com/google/android/exoplayer/chunk/Format.java
+++ b/library/src/main/java/com/google/android/exoplayer/chunk/Format.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.chunk;
 
 import com.google.android.exoplayer.util.Assertions;
-
 import java.util.Comparator;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/chunk/FormatEvaluator.java b/library/src/main/java/com/google/android/exoplayer/chunk/FormatEvaluator.java
index d9fa1985fc..6cff0d54dd 100644
--- a/library/src/main/java/com/google/android/exoplayer/chunk/FormatEvaluator.java
+++ b/library/src/main/java/com/google/android/exoplayer/chunk/FormatEvaluator.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.chunk;
 
 import com.google.android.exoplayer.upstream.BandwidthMeter;
-
 import java.util.List;
 import java.util.Random;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/chunk/InitializationChunk.java b/library/src/main/java/com/google/android/exoplayer/chunk/InitializationChunk.java
index 2a953a185f..7529344af5 100644
--- a/library/src/main/java/com/google/android/exoplayer/chunk/InitializationChunk.java
+++ b/library/src/main/java/com/google/android/exoplayer/chunk/InitializationChunk.java
@@ -26,7 +26,6 @@
 import com.google.android.exoplayer.upstream.DataSpec;
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/chunk/MediaChunk.java b/library/src/main/java/com/google/android/exoplayer/chunk/MediaChunk.java
index 7eaaa107a6..160bfffa56 100644
--- a/library/src/main/java/com/google/android/exoplayer/chunk/MediaChunk.java
+++ b/library/src/main/java/com/google/android/exoplayer/chunk/MediaChunk.java
@@ -43,10 +43,6 @@ public MediaChunk(DataSource dataSource, DataSpec dataSpec, int trigger, Format
         Chunk.NO_PARENT_ID);
   }
 
-  public int getNextChunkIndex() {
-    return chunkIndex + 1;
-  }
-
   /**
    * @param dataSource A {@link DataSource} for loading the data.
    * @param dataSpec Defines the data to be loaded.
@@ -66,4 +62,12 @@ public MediaChunk(DataSource dataSource, DataSpec dataSpec, int trigger, Format
     this.chunkIndex = chunkIndex;
   }
 
+  public int getNextChunkIndex() {
+    return chunkIndex + 1;
+  }
+
+  public long getDurationUs() {
+    return endTimeUs - startTimeUs;
+  }
+
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/chunk/SingleSampleMediaChunk.java b/library/src/main/java/com/google/android/exoplayer/chunk/SingleSampleMediaChunk.java
index d8d35acdc7..f299f95b28 100644
--- a/library/src/main/java/com/google/android/exoplayer/chunk/SingleSampleMediaChunk.java
+++ b/library/src/main/java/com/google/android/exoplayer/chunk/SingleSampleMediaChunk.java
@@ -21,7 +21,6 @@
 import com.google.android.exoplayer.upstream.DataSource;
 import com.google.android.exoplayer.upstream.DataSpec;
 import com.google.android.exoplayer.util.Util;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/chunk/VideoFormatSelectorUtil.java b/library/src/main/java/com/google/android/exoplayer/chunk/VideoFormatSelectorUtil.java
index c313a289f9..49820b1a7e 100644
--- a/library/src/main/java/com/google/android/exoplayer/chunk/VideoFormatSelectorUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/chunk/VideoFormatSelectorUtil.java
@@ -15,17 +15,18 @@
  */
 package com.google.android.exoplayer.chunk;
 
-import com.google.android.exoplayer.MediaCodecUtil;
-import com.google.android.exoplayer.MediaCodecUtil.DecoderQueryException;
-import com.google.android.exoplayer.util.MimeTypes;
-import com.google.android.exoplayer.util.Util;
-
 import android.annotation.TargetApi;
 import android.content.Context;
 import android.graphics.Point;
+import android.text.TextUtils;
+import android.util.Log;
 import android.view.Display;
 import android.view.WindowManager;
-
+import com.google.android.exoplayer.MediaCodecUtil;
+import com.google.android.exoplayer.MediaCodecUtil.DecoderQueryException;
+import com.google.android.exoplayer.util.MimeTypes;
+import com.google.android.exoplayer.util.Util;
+import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -34,6 +35,8 @@
  */
 public final class VideoFormatSelectorUtil {
 
+  private static final String TAG = "VideoFormatSelectorUtil";
+
   /**
    * If a dimension (i.e. width or height) of a video is greater or equal to this fraction of the
    * corresponding viewport dimension, then the video is considered as filling the viewport (in that
@@ -56,9 +59,9 @@
   public static int[] selectVideoFormatsForDefaultDisplay(Context context,
       List<? extends FormatWrapper> formatWrappers, String[] allowedContainerMimeTypes,
       boolean filterHdFormats) throws DecoderQueryException {
-    Point viewportSize = getViewportSize(context);
+    Point viewportSize = getDisplaySize(context); // Assume the viewport is fullscreen.
     return selectVideoFormats(formatWrappers, allowedContainerMimeTypes, filterHdFormats, true,
-        viewportSize.x, viewportSize.y);
+        false, viewportSize.x, viewportSize.y);
   }
 
   /**
@@ -80,6 +83,7 @@
    * @param filterHdFormats True to filter HD formats. False otherwise.
    * @param orientationMayChange True if the video's orientation may change with respect to the
    *     viewport during playback.
+   * @param secureDecoder True if secure decoder is required.
    * @param viewportWidth The width in pixels of the viewport within which the video will be
    *     displayed. If the viewport size may change, this should be set to the maximum possible
    *     width. -1 if selection should not be constrained by a viewport.
@@ -91,7 +95,7 @@
    */
   public static int[] selectVideoFormats(List<? extends FormatWrapper> formatWrappers,
       String[] allowedContainerMimeTypes, boolean filterHdFormats, boolean orientationMayChange,
-      int viewportWidth, int viewportHeight) throws DecoderQueryException {
+      boolean secureDecoder, int viewportWidth, int viewportHeight) throws DecoderQueryException {
     int maxVideoPixelsToRetain = Integer.MAX_VALUE;
     ArrayList<Integer> selectedIndexList = new ArrayList<>();
 
@@ -99,7 +103,7 @@
     int formatWrapperCount = formatWrappers.size();
     for (int i = 0; i < formatWrapperCount; i++) {
       Format format = formatWrappers.get(i).getFormat();
-      if (isFormatPlayable(format, allowedContainerMimeTypes, filterHdFormats)) {
+      if (isFormatPlayable(format, allowedContainerMimeTypes, filterHdFormats, secureDecoder)) {
         // Select the format for now. It may still be filtered in the second pass below.
         selectedIndexList.add(i);
         // Keep track of the number of pixels of the selected format whose resolution is the
@@ -139,7 +143,7 @@
    * whether HD formats should be filtered and a maximum decodable frame size in pixels.
    */
   private static boolean isFormatPlayable(Format format, String[] allowedContainerMimeTypes,
-      boolean filterHdFormats) throws DecoderQueryException {
+      boolean filterHdFormats, boolean secureDecoder) throws DecoderQueryException {
     if (allowedContainerMimeTypes != null
         && !Util.contains(allowedContainerMimeTypes, format.mimeType)) {
       // Filtering format based on its container mime type.
@@ -157,10 +161,10 @@ private static boolean isFormatPlayable(Format format, String[] allowedContainer
           videoMediaMimeType = MimeTypes.VIDEO_H264;
         }
         if (format.frameRate > 0) {
-          return MediaCodecUtil.isSizeAndRateSupportedV21(videoMediaMimeType, false, format.width,
-              format.height, format.frameRate);
+          return MediaCodecUtil.isSizeAndRateSupportedV21(videoMediaMimeType, secureDecoder,
+              format.width, format.height, format.frameRate);
         } else {
-          return MediaCodecUtil.isSizeSupportedV21(videoMediaMimeType, false, format.width,
+          return MediaCodecUtil.isSizeSupportedV21(videoMediaMimeType, secureDecoder, format.width,
               format.height);
         }
       }
@@ -195,20 +199,45 @@ private static Point getMaxVideoSizeInViewport(boolean orientationMayChange, int
     }
   }
 
-  private static Point getViewportSize(Context context) {
-    // Before API 23 the platform Display object does not provide a way to identify Android TVs that
-    // can show 4k resolution in a SurfaceView, so check for supported devices here.
-    // See also https://developer.sony.com/develop/tvs/android-tv/design-guide/.
-    if (Util.SDK_INT < 23 && Util.MODEL != null && Util.MODEL.startsWith("BRAVIA")
-        && context.getPackageManager().hasSystemFeature("com.sony.dtv.hardware.panel.qfhd")) {
-      return new Point(3840, 2160);
+  private static Point getDisplaySize(Context context) {
+    // Before API 25 the platform Display object does not provide a working way to identify Android
+    // TVs that can show 4k resolution in a SurfaceView, so check for supported devices here.
+    if (Util.SDK_INT < 25) {
+      if ("Sony".equals(Util.MANUFACTURER) && Util.MODEL != null && Util.MODEL.startsWith("BRAVIA")
+          && context.getPackageManager().hasSystemFeature("com.sony.dtv.hardware.panel.qfhd")) {
+        return new Point(3840, 2160);
+      } else if ("NVIDIA".equals(Util.MANUFACTURER) && Util.MODEL != null
+          && Util.MODEL.contains("SHIELD")) {
+        // Attempt to read sys.display-size.
+        String sysDisplaySize = null;
+        try {
+          Class<?> systemProperties = Class.forName("android.os.SystemProperties");
+          Method getMethod = systemProperties.getMethod("get", String.class);
+          sysDisplaySize = (String) getMethod.invoke(systemProperties, "sys.display-size");
+        } catch (Exception e) {
+          Log.e(TAG, "Failed to read sys.display-size", e);
+        }
+        // If we managed to read sys.display-size, attempt to parse it.
+        if (!TextUtils.isEmpty(sysDisplaySize)) {
+          try {
+            String[] sysDisplaySizeParts = sysDisplaySize.trim().split("x");
+            if (sysDisplaySizeParts.length == 2) {
+              int width = Integer.parseInt(sysDisplaySizeParts[0]);
+              int height = Integer.parseInt(sysDisplaySizeParts[1]);
+              if (width > 0 && height > 0) {
+                return new Point(width, height);
+              }
+            }
+          } catch (NumberFormatException e) {
+            // Do nothing.
+          }
+          Log.e(TAG, "Invalid sys.display-size: " + sysDisplaySize);
+        }
+      }
     }
 
     WindowManager windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
-    return getDisplaySize(windowManager.getDefaultDisplay());
-  }
-
-  private static Point getDisplaySize(Display display) {
+    Display display = windowManager.getDefaultDisplay();
     Point displaySize = new Point();
     if (Util.SDK_INT >= 23) {
       getDisplaySizeV23(display, displaySize);
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/DashChunkSource.java b/library/src/main/java/com/google/android/exoplayer/dash/DashChunkSource.java
index da45eb3b8b..63bf568596 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/DashChunkSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/DashChunkSource.java
@@ -15,6 +15,9 @@
  */
 package com.google.android.exoplayer.dash;
 
+import android.os.Handler;
+import android.util.Log;
+import android.util.SparseArray;
 import com.google.android.exoplayer.BehindLiveWindowException;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.MediaFormat;
@@ -50,11 +53,6 @@
 import com.google.android.exoplayer.util.ManifestFetcher;
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.SystemClock;
-
-import android.os.Handler;
-import android.util.Log;
-import android.util.SparseArray;
-
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -394,6 +392,10 @@ public final void getChunkOperation(List<? extends MediaChunk> queue, long playb
     availableRange.getCurrentBoundsUs(availableRangeValues);
     if (queue.isEmpty()) {
       if (live) {
+        if (playbackPositionUs != 0) {
+          // If the position is non-zero then assume the client knows where it's seeking.
+          startAtLiveEdge = false;
+        }
         if (startAtLiveEdge) {
           // We want live streams to start at the live edge instead of the beginning of the
           // manifest
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/DashTrackSelector.java b/library/src/main/java/com/google/android/exoplayer/dash/DashTrackSelector.java
index 3b7fb6fec1..471ec14423 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/DashTrackSelector.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/DashTrackSelector.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.dash.mpd.MediaPresentationDescription;
 import com.google.android.exoplayer.dash.mpd.Period;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/DefaultDashTrackSelector.java b/library/src/main/java/com/google/android/exoplayer/dash/DefaultDashTrackSelector.java
index eb6ba09206..c9004c73bd 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/DefaultDashTrackSelector.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/DefaultDashTrackSelector.java
@@ -15,14 +15,12 @@
  */
 package com.google.android.exoplayer.dash;
 
+import android.content.Context;
 import com.google.android.exoplayer.chunk.VideoFormatSelectorUtil;
 import com.google.android.exoplayer.dash.mpd.AdaptationSet;
 import com.google.android.exoplayer.dash.mpd.MediaPresentationDescription;
 import com.google.android.exoplayer.dash.mpd.Period;
 import com.google.android.exoplayer.util.Util;
-
-import android.content.Context;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/mpd/ContentProtection.java b/library/src/main/java/com/google/android/exoplayer/dash/mpd/ContentProtection.java
index 1ebba25f4e..0eedc244b3 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/mpd/ContentProtection.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/mpd/ContentProtection.java
@@ -18,7 +18,6 @@
 import com.google.android.exoplayer.drm.DrmInitData.SchemeInitData;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.Util;
-
 import java.util.UUID;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescription.java b/library/src/main/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescription.java
index 4b0b94754d..5b92e4ef3f 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescription.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescription.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.dash.mpd;
 
 import com.google.android.exoplayer.util.ManifestFetcher.RedirectingManifest;
-
 import java.util.Collections;
 import java.util.List;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescriptionParser.java b/library/src/main/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescriptionParser.java
index 7ba7e5d8b3..eefa71bc8c 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescriptionParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/mpd/MediaPresentationDescriptionParser.java
@@ -15,6 +15,10 @@
  */
 package com.google.android.exoplayer.dash.mpd;
 
+import android.text.TextUtils;
+import android.util.Base64;
+import android.util.Log;
+import android.util.Pair;
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.chunk.Format;
 import com.google.android.exoplayer.dash.mpd.SegmentBase.SegmentList;
@@ -29,17 +33,6 @@
 import com.google.android.exoplayer.util.ParserUtil;
 import com.google.android.exoplayer.util.UriUtil;
 import com.google.android.exoplayer.util.Util;
-
-import android.text.TextUtils;
-import android.util.Base64;
-import android.util.Log;
-import android.util.Pair;
-
-import org.xml.sax.helpers.DefaultHandler;
-import org.xmlpull.v1.XmlPullParser;
-import org.xmlpull.v1.XmlPullParserException;
-import org.xmlpull.v1.XmlPullParserFactory;
-
 import java.io.IOException;
 import java.io.InputStream;
 import java.text.ParseException;
@@ -50,6 +43,10 @@
 import java.util.UUID;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.xml.sax.helpers.DefaultHandler;
+import org.xmlpull.v1.XmlPullParser;
+import org.xmlpull.v1.XmlPullParserException;
+import org.xmlpull.v1.XmlPullParserFactory;
 
 /**
  * A parser of media presentation description files.
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/mpd/RangedUri.java b/library/src/main/java/com/google/android/exoplayer/dash/mpd/RangedUri.java
index 22a8bfdee5..121cc9fe62 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/mpd/RangedUri.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/mpd/RangedUri.java
@@ -15,11 +15,10 @@
  */
 package com.google.android.exoplayer.dash.mpd;
 
+import android.net.Uri;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.UriUtil;
 
-import android.net.Uri;
-
 /**
  * Defines a range of data located at a {@link Uri}.
  */
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/mpd/Representation.java b/library/src/main/java/com/google/android/exoplayer/dash/mpd/Representation.java
index 2b3ae678e6..0da4bcf40e 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/mpd/Representation.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/mpd/Representation.java
@@ -15,14 +15,13 @@
  */
 package com.google.android.exoplayer.dash.mpd;
 
+import android.net.Uri;
 import com.google.android.exoplayer.chunk.Format;
 import com.google.android.exoplayer.chunk.FormatWrapper;
 import com.google.android.exoplayer.dash.DashSegmentIndex;
 import com.google.android.exoplayer.dash.mpd.SegmentBase.MultiSegmentBase;
 import com.google.android.exoplayer.dash.mpd.SegmentBase.SingleSegmentBase;
 
-import android.net.Uri;
-
 /**
  * A DASH representation.
  */
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/mpd/SegmentBase.java b/library/src/main/java/com/google/android/exoplayer/dash/mpd/SegmentBase.java
index f770f304ba..bc68f39b65 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/mpd/SegmentBase.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/mpd/SegmentBase.java
@@ -18,7 +18,6 @@
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.dash.DashSegmentIndex;
 import com.google.android.exoplayer.util.Util;
-
 import java.util.List;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/mpd/UtcTimingElementResolver.java b/library/src/main/java/com/google/android/exoplayer/dash/mpd/UtcTimingElementResolver.java
index 19098fa8f5..207b4a17ae 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/mpd/UtcTimingElementResolver.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/mpd/UtcTimingElementResolver.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer.dash.mpd;
 
+import android.os.SystemClock;
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.upstream.Loader;
 import com.google.android.exoplayer.upstream.Loader.Loadable;
@@ -22,9 +23,6 @@
 import com.google.android.exoplayer.upstream.UriLoadable;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.Util;
-
-import android.os.SystemClock;
-
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/DrmInitData.java b/library/src/main/java/com/google/android/exoplayer/drm/DrmInitData.java
index c01fc59ca7..961906ba86 100644
--- a/library/src/main/java/com/google/android/exoplayer/drm/DrmInitData.java
+++ b/library/src/main/java/com/google/android/exoplayer/drm/DrmInitData.java
@@ -15,10 +15,8 @@
  */
 package com.google.android.exoplayer.drm;
 
-import com.google.android.exoplayer.util.Assertions;
-
 import android.media.MediaDrm;
-
+import com.google.android.exoplayer.util.Assertions;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/DrmSessionManager.java b/library/src/main/java/com/google/android/exoplayer/drm/DrmSessionManager.java
index a5e78ab008..ce8c24a630 100644
--- a/library/src/main/java/com/google/android/exoplayer/drm/DrmSessionManager.java
+++ b/library/src/main/java/com/google/android/exoplayer/drm/DrmSessionManager.java
@@ -22,7 +22,7 @@
  * Manages a DRM session.
  */
 @TargetApi(16)
-public interface DrmSessionManager {
+public interface DrmSessionManager<T extends ExoMediaCrypto> {
 
   /**
    * The error state. {@link #getError()} can be used to retrieve the cause.
@@ -67,15 +67,15 @@
   int getState();
 
   /**
-   * Gets a {@link MediaCrypto} for the open session.
+   * Gets an {@link ExoMediaCrypto} for the open session.
    * <p>
    * This method may be called when the manager is in the following states:
    * {@link #STATE_OPENED}, {@link #STATE_OPENED_WITH_KEYS}
    *
-   * @return A {@link MediaCrypto} for the open session.
+   * @return An {@link ExoMediaCrypto} for the open session.
    * @throws IllegalStateException If called when a session isn't opened.
    */
-  MediaCrypto getMediaCrypto();
+  T getMediaCrypto();
 
   /**
    * Whether the session requires a secure decoder for the specified mime type.
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/ExoMediaCrypto.java b/library/src/main/java/com/google/android/exoplayer/drm/ExoMediaCrypto.java
new file mode 100644
index 0000000000..710b839509
--- /dev/null
+++ b/library/src/main/java/com/google/android/exoplayer/drm/ExoMediaCrypto.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer.drm;
+
+/**
+ * An opaque {@link android.media.MediaCrypto} equivalent.
+ */
+public interface ExoMediaCrypto {
+
+  /**
+   * @see android.media.MediaCrypto#requiresSecureDecoderComponent(String)
+   */
+  boolean requiresSecureDecoderComponent(String mimeType);
+
+}
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/ExoMediaDrm.java b/library/src/main/java/com/google/android/exoplayer/drm/ExoMediaDrm.java
new file mode 100644
index 0000000000..e5596907b9
--- /dev/null
+++ b/library/src/main/java/com/google/android/exoplayer/drm/ExoMediaDrm.java
@@ -0,0 +1,146 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer.drm;
+
+import android.media.DeniedByServerException;
+import android.media.MediaCryptoException;
+import android.media.NotProvisionedException;
+import android.media.ResourceBusyException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+
+/**
+ * Used to obtain keys for decrypting protected media streams. See {@link android.media.MediaDrm}.
+ */
+public interface ExoMediaDrm<T extends ExoMediaCrypto> {
+
+  /**
+   * @see android.media.MediaDrm.OnEventListener
+   */
+  interface OnEventListener<T extends ExoMediaCrypto> {
+    /**
+     * Called when an event occurs that requires the app to be notified
+     *
+     * @param mediaDrm the {@link ExoMediaDrm} object on which the event occurred.
+     * @param sessionId the DRM session ID on which the event occurred
+     * @param event indicates the event type
+     * @param extra an secondary error code
+     * @param data optional byte array of data that may be associated with the event
+     */
+    void onEvent(ExoMediaDrm<? extends T> mediaDrm, byte[] sessionId, int event, int extra,
+        byte[] data);
+  }
+
+  /**
+   * @see android.media.MediaDrm.KeyRequest
+   */
+  interface KeyRequest {
+    byte[] getData();
+    String getDefaultUrl();
+  }
+
+  /**
+   * @see android.media.MediaDrm.ProvisionRequest
+   */
+  interface ProvisionRequest {
+    byte[] getData();
+    String getDefaultUrl();
+  }
+
+  /**
+   * @see android.media.MediaDrm#setOnEventListener(android.media.MediaDrm.OnEventListener)
+   */
+  void setOnEventListener(OnEventListener<? super T> listener);
+
+  /**
+   * @see android.media.MediaDrm#openSession()
+   */
+  byte[] openSession() throws NotProvisionedException, ResourceBusyException;
+
+  /**
+   * @see android.media.MediaDrm#closeSession(byte[])
+   */
+  void closeSession(byte[] sessionId);
+
+  /**
+   * @see android.media.MediaDrm#getKeyRequest(byte[], byte[], String, int, HashMap)
+   */
+  KeyRequest getKeyRequest(byte[] scope, byte[] init, String mimeType, int keyType,
+      HashMap<String, String> optionalParameters) throws NotProvisionedException;
+
+  /**
+   * @see android.media.MediaDrm#provideKeyResponse(byte[], byte[])
+   */
+  byte[] provideKeyResponse(byte[] scope, byte[] response)
+      throws NotProvisionedException, DeniedByServerException;
+
+  /**
+   * @see android.media.MediaDrm#getProvisionRequest()
+   */
+  ProvisionRequest getProvisionRequest();
+
+  /**
+   * @see android.media.MediaDrm#provideProvisionResponse(byte[])
+   */
+  void provideProvisionResponse(byte[] response) throws DeniedByServerException;
+
+  /**
+   * @see android.media.MediaDrm#queryKeyStatus(byte[]).
+   */
+  Map<String, String> queryKeyStatus(byte[] sessionId);
+
+  /**
+   * @see android.media.MediaDrm#release().
+   */
+  void release();
+
+  /**
+   * @see android.media.MediaDrm#restoreKeys(byte[], byte[]).
+   */
+  void restoreKeys(byte[] sessionId, byte[] keySetId);
+
+  /**
+   * @see android.media.MediaDrm#getPropertyString(String)
+   */
+  String getPropertyString(String propertyName);
+
+  /**
+   * @see android.media.MediaDrm#getPropertyByteArray(String)
+   */
+  byte[] getPropertyByteArray(String propertyName);
+
+  /**
+   * @see android.media.MediaDrm#setPropertyString(String, String)
+   */
+  void setPropertyString(String propertyName, String value);
+
+  /**
+   * @see android.media.MediaDrm#setPropertyByteArray(String, byte[])
+   */
+  void setPropertyByteArray(String propertyName, byte[] value);
+
+  /**
+   * @see android.media.MediaCrypto#MediaCrypto(UUID, byte[])
+   *
+   * @param uuid The UUID of the crypto scheme.
+   * @param initData Opaque initialization data specific to the crypto scheme.
+   * @return An object extends {@link ExoMediaCrypto}, using opaque crypto scheme specific data.
+   * @throws MediaCryptoException
+   */
+  T createMediaCrypto(UUID uuid, byte[] initData) throws MediaCryptoException;
+
+}
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/FrameworkMediaCrypto.java b/library/src/main/java/com/google/android/exoplayer/drm/FrameworkMediaCrypto.java
new file mode 100644
index 0000000000..7847732cde
--- /dev/null
+++ b/library/src/main/java/com/google/android/exoplayer/drm/FrameworkMediaCrypto.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer.drm;
+
+import android.annotation.TargetApi;
+import android.media.MediaCrypto;
+import com.google.android.exoplayer.util.Assertions;
+
+/**
+ * An {@link ExoMediaCrypto} implementation that wraps the framework {@link MediaCrypto}.
+ */
+@TargetApi(16)
+public final class FrameworkMediaCrypto implements ExoMediaCrypto {
+
+  private final MediaCrypto mediaCrypto;
+
+  /* package */ FrameworkMediaCrypto(MediaCrypto mediaCrypto) {
+    this.mediaCrypto = Assertions.checkNotNull(mediaCrypto);
+  }
+
+  public MediaCrypto getWrappedMediaCrypto() {
+    return mediaCrypto;
+  }
+
+  @Override
+  public boolean requiresSecureDecoderComponent(String mimeType) {
+    return mediaCrypto.requiresSecureDecoderComponent(mimeType);
+  }
+
+}
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/FrameworkMediaDrm.java b/library/src/main/java/com/google/android/exoplayer/drm/FrameworkMediaDrm.java
new file mode 100644
index 0000000000..15316f2450
--- /dev/null
+++ b/library/src/main/java/com/google/android/exoplayer/drm/FrameworkMediaDrm.java
@@ -0,0 +1,150 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer.drm;
+
+import android.annotation.TargetApi;
+import android.media.DeniedByServerException;
+import android.media.MediaCrypto;
+import android.media.MediaCryptoException;
+import android.media.MediaDrm;
+import android.media.NotProvisionedException;
+import android.media.ResourceBusyException;
+import android.media.UnsupportedSchemeException;
+import com.google.android.exoplayer.util.Assertions;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+
+/**
+ * An {@link ExoMediaDrm} implementation that wraps the framework {@link MediaDrm}.
+ */
+@TargetApi(18)
+public final class FrameworkMediaDrm implements ExoMediaDrm<FrameworkMediaCrypto> {
+
+  private final MediaDrm mediaDrm;
+
+  public FrameworkMediaDrm(UUID uuid) throws UnsupportedSchemeException {
+    this.mediaDrm = new MediaDrm(Assertions.checkNotNull(uuid));
+  }
+
+  @Override
+  public void setOnEventListener(
+      final ExoMediaDrm.OnEventListener<? super FrameworkMediaCrypto> listener) {
+    mediaDrm.setOnEventListener(listener == null ? null : new MediaDrm.OnEventListener() {
+      @Override
+      public void onEvent(MediaDrm md, byte[] sessionId, int event, int extra, byte[] data) {
+        listener.onEvent(FrameworkMediaDrm.this, sessionId, event, extra, data);
+      }
+    });
+  }
+
+  @Override
+  public byte[] openSession() throws NotProvisionedException, ResourceBusyException {
+    return mediaDrm.openSession();
+  }
+
+  @Override
+  public void closeSession(byte[] sessionId) {
+    mediaDrm.closeSession(sessionId);
+  }
+
+  @Override
+  public KeyRequest getKeyRequest(byte[] scope, byte[] init, String mimeType, int keyType,
+      HashMap<String, String> optionalParameters) throws NotProvisionedException {
+    final MediaDrm.KeyRequest request = mediaDrm.getKeyRequest(scope, init, mimeType, keyType,
+        optionalParameters);
+    return new KeyRequest() {
+      @Override
+      public byte[] getData() {
+        return request.getData();
+      }
+
+      @Override
+      public String getDefaultUrl() {
+        return request.getDefaultUrl();
+      }
+    };
+  }
+
+  @Override
+  public byte[] provideKeyResponse(byte[] scope, byte[] response)
+      throws NotProvisionedException, DeniedByServerException {
+    return mediaDrm.provideKeyResponse(scope, response);
+  }
+
+  @Override
+  public ProvisionRequest getProvisionRequest() {
+    final MediaDrm.ProvisionRequest provisionRequest = mediaDrm.getProvisionRequest();
+    return new ProvisionRequest() {
+      @Override
+      public byte[] getData() {
+        return provisionRequest.getData();
+      }
+
+      @Override
+      public String getDefaultUrl() {
+        return provisionRequest.getDefaultUrl();
+      }
+    };
+  }
+
+  @Override
+  public void provideProvisionResponse(byte[] response) throws DeniedByServerException {
+    mediaDrm.provideProvisionResponse(response);
+  }
+
+  @Override
+  public Map<String, String> queryKeyStatus(byte[] sessionId) {
+    return mediaDrm.queryKeyStatus(sessionId);
+  }
+
+  @Override
+  public void release() {
+    mediaDrm.release();
+  }
+
+  @Override
+  public void restoreKeys(byte[] sessionId, byte[] keySetId) {
+    mediaDrm.restoreKeys(sessionId, keySetId);
+  }
+
+  @Override
+  public String getPropertyString(String propertyName) {
+    return mediaDrm.getPropertyString(propertyName);
+  }
+
+  @Override
+  public byte[] getPropertyByteArray(String propertyName) {
+    return mediaDrm.getPropertyByteArray(propertyName);
+  }
+
+  @Override
+  public void setPropertyString(String propertyName, String value) {
+    mediaDrm.setPropertyString(propertyName, value);
+  }
+
+  @Override
+  public void setPropertyByteArray(String propertyName, byte[] value) {
+    mediaDrm.setPropertyByteArray(propertyName, value);
+  }
+
+  @Override
+  public FrameworkMediaCrypto createMediaCrypto(UUID uuid, byte[] initData)
+      throws MediaCryptoException {
+    return new FrameworkMediaCrypto(new MediaCrypto(uuid, initData));
+  }
+
+}
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/MediaDrmCallback.java b/library/src/main/java/com/google/android/exoplayer/drm/MediaDrmCallback.java
index 30757e75b4..88d273fa54 100644
--- a/library/src/main/java/com/google/android/exoplayer/drm/MediaDrmCallback.java
+++ b/library/src/main/java/com/google/android/exoplayer/drm/MediaDrmCallback.java
@@ -16,12 +16,12 @@
 package com.google.android.exoplayer.drm;
 
 import android.annotation.TargetApi;
-import android.media.MediaDrm;
-
+import com.google.android.exoplayer.drm.ExoMediaDrm.KeyRequest;
+import com.google.android.exoplayer.drm.ExoMediaDrm.ProvisionRequest;
 import java.util.UUID;
 
 /**
- * Performs {@link MediaDrm} key and provisioning requests.
+ * Performs {@link ExoMediaDrm} key and provisioning requests.
  */
 @TargetApi(18)
 public interface MediaDrmCallback {
@@ -34,7 +34,7 @@
    * @return The response data.
    * @throws Exception If an error occurred executing the request.
    */
-  byte[] executeProvisionRequest(UUID uuid, MediaDrm.ProvisionRequest request) throws Exception;
+  byte[] executeProvisionRequest(UUID uuid, ProvisionRequest request) throws Exception;
 
   /**
    * Executes a key request.
@@ -44,6 +44,6 @@
    * @return The response data.
    * @throws Exception If an error occurred executing the request.
    */
-  byte[] executeKeyRequest(UUID uuid, MediaDrm.KeyRequest request) throws Exception;
+  byte[] executeKeyRequest(UUID uuid, KeyRequest request) throws Exception;
 
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/StreamingDrmSessionManager.java b/library/src/main/java/com/google/android/exoplayer/drm/StreamingDrmSessionManager.java
index be22d4c6c8..029db70ae0 100644
--- a/library/src/main/java/com/google/android/exoplayer/drm/StreamingDrmSessionManager.java
+++ b/library/src/main/java/com/google/android/exoplayer/drm/StreamingDrmSessionManager.java
@@ -15,18 +15,10 @@
  */
 package com.google.android.exoplayer.drm;
 
-import com.google.android.exoplayer.drm.DrmInitData.SchemeInitData;
-import com.google.android.exoplayer.extractor.mp4.PsshAtomUtil;
-import com.google.android.exoplayer.util.Util;
-
 import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.media.DeniedByServerException;
-import android.media.MediaCrypto;
 import android.media.MediaDrm;
-import android.media.MediaDrm.KeyRequest;
-import android.media.MediaDrm.OnEventListener;
-import android.media.MediaDrm.ProvisionRequest;
 import android.media.NotProvisionedException;
 import android.media.UnsupportedSchemeException;
 import android.os.Handler;
@@ -34,16 +26,21 @@
 import android.os.Looper;
 import android.os.Message;
 import android.text.TextUtils;
-
+import com.google.android.exoplayer.drm.DrmInitData.SchemeInitData;
+import com.google.android.exoplayer.drm.ExoMediaDrm.KeyRequest;
+import com.google.android.exoplayer.drm.ExoMediaDrm.OnEventListener;
+import com.google.android.exoplayer.drm.ExoMediaDrm.ProvisionRequest;
+import com.google.android.exoplayer.extractor.mp4.PsshAtomUtil;
+import com.google.android.exoplayer.util.Util;
 import java.util.HashMap;
 import java.util.UUID;
 
 /**
  * A base class for {@link DrmSessionManager} implementations that support streaming playbacks
- * using {@link MediaDrm}.
+ * using {@link ExoMediaDrm}.
  */
 @TargetApi(18)
-public class StreamingDrmSessionManager implements DrmSessionManager {
+public class StreamingDrmSessionManager<T extends ExoMediaCrypto> implements DrmSessionManager<T> {
 
   /**
    * Interface definition for a callback to be notified of {@link StreamingDrmSessionManager}
@@ -88,7 +85,7 @@
 
   private final Handler eventHandler;
   private final EventListener eventListener;
-  private final MediaDrm mediaDrm;
+  private final ExoMediaDrm<T> mediaDrm;
   private final HashMap<String, String> optionalKeyRequestParameters;
 
   /* package */ final MediaDrmHandler mediaDrmHandler;
@@ -102,11 +99,21 @@
   private int openCount;
   private boolean provisioningInProgress;
   private int state;
-  private MediaCrypto mediaCrypto;
+  private T mediaCrypto;
   private Exception lastException;
   private SchemeInitData schemeInitData;
   private byte[] sessionId;
 
+  private static FrameworkMediaDrm createFrameworkDrm(UUID uuid) throws UnsupportedDrmException {
+    try {
+      return new FrameworkMediaDrm(uuid);
+    } catch (UnsupportedSchemeException e) {
+      throw new UnsupportedDrmException(UnsupportedDrmException.REASON_UNSUPPORTED_SCHEME, e);
+    } catch (Exception e) {
+      throw new UnsupportedDrmException(UnsupportedDrmException.REASON_INSTANTIATION_ERROR, e);
+    }
+  }
+
   /**
    * Instantiates a new instance using the Widevine scheme.
    *
@@ -120,10 +127,11 @@
    * @param eventListener A listener of events. May be null if delivery of events is not required.
    * @throws UnsupportedDrmException If the specified DRM scheme is not supported.
    */
-  public static StreamingDrmSessionManager newWidevineInstance(Looper playbackLooper,
-      MediaDrmCallback callback, HashMap<String, String> optionalKeyRequestParameters,
+  public static StreamingDrmSessionManager<FrameworkMediaCrypto> newWidevineInstance(
+      Looper playbackLooper, MediaDrmCallback callback,
+      HashMap<String, String> optionalKeyRequestParameters,
       Handler eventHandler, EventListener eventListener) throws UnsupportedDrmException {
-    return new StreamingDrmSessionManager(WIDEVINE_UUID, playbackLooper, callback,
+    return StreamingDrmSessionManager.newFrameworkInstance(WIDEVINE_UUID, playbackLooper, callback,
         optionalKeyRequestParameters, eventHandler, eventListener);
   }
 
@@ -142,8 +150,8 @@ public static StreamingDrmSessionManager newWidevineInstance(Looper playbackLoop
    * @param eventListener A listener of events. May be null if delivery of events is not required.
    * @throws UnsupportedDrmException If the specified DRM scheme is not supported.
    */
-  public static StreamingDrmSessionManager newPlayReadyInstance(Looper playbackLooper,
-      MediaDrmCallback callback, String customData, Handler eventHandler,
+  public static StreamingDrmSessionManager<FrameworkMediaCrypto> newPlayReadyInstance(
+      Looper playbackLooper, MediaDrmCallback callback, String customData, Handler eventHandler,
       EventListener eventListener) throws UnsupportedDrmException {
     HashMap<String, String> optionalKeyRequestParameters;
     if (!TextUtils.isEmpty(customData)) {
@@ -152,7 +160,7 @@ public static StreamingDrmSessionManager newPlayReadyInstance(Looper playbackLoo
     } else {
       optionalKeyRequestParameters = null;
     }
-    return new StreamingDrmSessionManager(PLAYREADY_UUID, playbackLooper, callback,
+    return StreamingDrmSessionManager.newFrameworkInstance(PLAYREADY_UUID, playbackLooper, callback,
         optionalKeyRequestParameters, eventHandler, eventListener);
   }
 
@@ -168,21 +176,57 @@ public static StreamingDrmSessionManager newPlayReadyInstance(Looper playbackLoo
    * @param eventListener A listener of events. May be null if delivery of events is not required.
    * @throws UnsupportedDrmException If the specified DRM scheme is not supported.
    */
-  public StreamingDrmSessionManager(UUID uuid, Looper playbackLooper, MediaDrmCallback callback,
+  public static StreamingDrmSessionManager<FrameworkMediaCrypto> newFrameworkInstance(
+      UUID uuid, Looper playbackLooper, MediaDrmCallback callback,
       HashMap<String, String> optionalKeyRequestParameters, Handler eventHandler,
       EventListener eventListener) throws UnsupportedDrmException {
+    return StreamingDrmSessionManager.newInstance(uuid, playbackLooper, callback,
+        optionalKeyRequestParameters, eventHandler, eventListener, createFrameworkDrm(uuid));
+  }
+
+  /**
+   * @param uuid The UUID of the drm scheme.
+   * @param playbackLooper The looper associated with the media playback thread. Should usually be
+   *     obtained using {@link com.google.android.exoplayer.ExoPlayer#getPlaybackLooper()}.
+   * @param callback Performs key and provisioning requests.
+   * @param optionalKeyRequestParameters An optional map of parameters to pass as the last argument
+   *     to {@link MediaDrm#getKeyRequest(byte[], byte[], String, int, HashMap)}. May be null.
+   * @param eventHandler A handler to use when delivering events to {@code eventListener}. May be
+   *     null if delivery of events is not required.
+   * @param eventListener A listener of events. May be null if delivery of events is not required.
+   * @param mediaDrm An underlying {@link ExoMediaDrm} for use by the manager.
+   * @throws UnsupportedDrmException If the specified DRM scheme is not supported.
+   */
+  public static<T extends ExoMediaCrypto> StreamingDrmSessionManager<T> newInstance(
+      UUID uuid, Looper playbackLooper, MediaDrmCallback callback,
+      HashMap<String, String> optionalKeyRequestParameters, Handler eventHandler,
+      EventListener eventListener, ExoMediaDrm<T> mediaDrm) throws UnsupportedDrmException {
+    return new StreamingDrmSessionManager<>(uuid, playbackLooper, callback,
+        optionalKeyRequestParameters, eventHandler, eventListener, mediaDrm);
+  }
+
+  /**
+   * @param uuid The UUID of the drm scheme.
+   * @param playbackLooper The looper associated with the media playback thread. Should usually be
+   *     obtained using {@link com.google.android.exoplayer.ExoPlayer#getPlaybackLooper()}.
+   * @param callback Performs key and provisioning requests.
+   * @param optionalKeyRequestParameters An optional map of parameters to pass as the last argument
+   *     to {@link MediaDrm#getKeyRequest(byte[], byte[], String, int, HashMap)}. May be null.
+   * @param eventHandler A handler to use when delivering events to {@code eventListener}. May be
+   *     null if delivery of events is not required.
+   * @param eventListener A listener of events. May be null if delivery of events is not required.
+   * @param mediaDrm An underlying {@link ExoMediaDrm} for use by the manager.
+   * @throws UnsupportedDrmException If the specified DRM scheme is not supported.
+   */
+  private StreamingDrmSessionManager(UUID uuid, Looper playbackLooper, MediaDrmCallback callback,
+      HashMap<String, String> optionalKeyRequestParameters, Handler eventHandler,
+      EventListener eventListener, ExoMediaDrm<T> mediaDrm) throws UnsupportedDrmException {
     this.uuid = uuid;
     this.callback = callback;
     this.optionalKeyRequestParameters = optionalKeyRequestParameters;
     this.eventHandler = eventHandler;
     this.eventListener = eventListener;
-    try {
-      mediaDrm = new MediaDrm(uuid);
-    } catch (UnsupportedSchemeException e) {
-      throw new UnsupportedDrmException(UnsupportedDrmException.REASON_UNSUPPORTED_SCHEME, e);
-    } catch (Exception e) {
-      throw new UnsupportedDrmException(UnsupportedDrmException.REASON_INSTANTIATION_ERROR, e);
-    }
+    this.mediaDrm = mediaDrm;
     mediaDrm.setOnEventListener(new MediaDrmEventListener());
     mediaDrmHandler = new MediaDrmHandler(playbackLooper);
     postResponseHandler = new PostResponseHandler(playbackLooper);
@@ -195,7 +239,7 @@ public final int getState() {
   }
 
   @Override
-  public final MediaCrypto getMediaCrypto() {
+  public final T getMediaCrypto() {
     if (state != STATE_OPENED && state != STATE_OPENED_WITH_KEYS) {
       throw new IllegalStateException();
     }
@@ -318,7 +362,7 @@ public void close() {
   private void openInternal(boolean allowProvisioning) {
     try {
       sessionId = mediaDrm.openSession();
-      mediaCrypto = new MediaCrypto(uuid, sessionId);
+      mediaCrypto = mediaDrm.createMediaCrypto(uuid, sessionId);
       state = STATE_OPENED;
       postKeyRequest();
     } catch (NotProvisionedException e) {
@@ -456,13 +500,13 @@ public void handleMessage(Message msg) {
 
   }
 
-  private class MediaDrmEventListener implements OnEventListener {
+  private class MediaDrmEventListener implements OnEventListener<T> {
 
     @Override
-    public void onEvent(MediaDrm md, byte[] sessionId, int event, int extra, byte[] data) {
+    public void onEvent(ExoMediaDrm<? extends T> mediaDrm, byte[] sessionId, int event,
+        int extra, byte[] data) {
       mediaDrmHandler.sendEmptyMessage(event);
     }
-
   }
 
   @SuppressLint("HandlerLeak")
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/DefaultExtractorInput.java b/library/src/main/java/com/google/android/exoplayer/extractor/DefaultExtractorInput.java
index 07264cb866..d8206671ca 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/DefaultExtractorInput.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/DefaultExtractorInput.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.upstream.DataSource;
-
 import java.io.EOFException;
 import java.io.IOException;
 import java.util.Arrays;
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/DefaultTrackOutput.java b/library/src/main/java/com/google/android/exoplayer/extractor/DefaultTrackOutput.java
index 993178dad1..826b2b89de 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/DefaultTrackOutput.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/DefaultTrackOutput.java
@@ -21,7 +21,6 @@
 import com.google.android.exoplayer.upstream.Allocator;
 import com.google.android.exoplayer.upstream.DataSource;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.io.EOFException;
 import java.io.IOException;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/DummyTrackOutput.java b/library/src/main/java/com/google/android/exoplayer/extractor/DummyTrackOutput.java
index 330630c89e..7f293a1803 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/DummyTrackOutput.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/DummyTrackOutput.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/Extractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/Extractor.java
index 98429e6a43..cc3e04f35a 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/Extractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/Extractor.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.extractor;
 
 import com.google.android.exoplayer.C;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ExtractorInput.java b/library/src/main/java/com/google/android/exoplayer/extractor/ExtractorInput.java
index 31391dfd84..3c5f0f4c07 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ExtractorInput.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ExtractorInput.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.extractor;
 
 import com.google.android.exoplayer.C;
-
 import java.io.EOFException;
 import java.io.IOException;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ExtractorSampleSource.java b/library/src/main/java/com/google/android/exoplayer/extractor/ExtractorSampleSource.java
index 78ca511436..53e1288f8e 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ExtractorSampleSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ExtractorSampleSource.java
@@ -15,6 +15,10 @@
  */
 package com.google.android.exoplayer.extractor;
 
+import android.net.Uri;
+import android.os.Handler;
+import android.os.SystemClock;
+import android.util.SparseArray;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.MediaFormatHolder;
@@ -31,12 +35,6 @@
 import com.google.android.exoplayer.upstream.Loader.Loadable;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.Util;
-
-import android.net.Uri;
-import android.os.Handler;
-import android.os.SystemClock;
-import android.util.SparseArray;
-
 import java.io.EOFException;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -556,13 +554,14 @@ public void release() {
     Assertions.checkState(remainingReleaseCount > 0);
     if (--remainingReleaseCount == 0) {
       if (loader != null) {
-        loader.release();
+        loader.release(new Runnable() {
+          @Override
+          public void run() {
+            extractorHolder.release();
+          }
+        });
         loader = null;
       }
-      if (extractorHolder.extractor != null) {
-        extractorHolder.extractor.release();
-        extractorHolder.extractor = null;
-      }
     }
   }
 
@@ -902,6 +901,13 @@ public Extractor selectExtractor(ExtractorInput input)
       return extractor;
     }
 
+    public void release() {
+      if (extractor != null) {
+        extractor.release();
+        extractor = null;
+      }
+    }
+
   }
 
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/RollingSampleBuffer.java b/library/src/main/java/com/google/android/exoplayer/extractor/RollingSampleBuffer.java
index 48df138304..8065d6a6f0 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/RollingSampleBuffer.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/RollingSampleBuffer.java
@@ -22,7 +22,6 @@
 import com.google.android.exoplayer.upstream.DataSource;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.io.EOFException;
 import java.io.IOException;
 import java.nio.ByteBuffer;
@@ -71,9 +70,10 @@ public RollingSampleBuffer(Allocator allocator) {
    */
   public void clear() {
     infoQueue.clear();
-    while (!dataQueue.isEmpty()) {
-      allocator.release(dataQueue.remove());
-    }
+
+    allocator.release(dataQueue.toArray(new Allocation[dataQueue.size()]));
+    dataQueue.clear();
+
     totalBytesDropped = 0;
     totalBytesWritten = 0;
     lastAllocation = null;
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/TrackOutput.java b/library/src/main/java/com/google/android/exoplayer/extractor/TrackOutput.java
index 699fddb256..d2724e3637 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/TrackOutput.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/TrackOutput.java
@@ -19,7 +19,6 @@
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.SampleHolder;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.io.EOFException;
 import java.io.IOException;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/flv/AudioTagPayloadReader.java b/library/src/main/java/com/google/android/exoplayer/extractor/flv/AudioTagPayloadReader.java
index 957755cb58..90f9607393 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/flv/AudioTagPayloadReader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/flv/AudioTagPayloadReader.java
@@ -15,15 +15,13 @@
  */
 package com.google.android.exoplayer.extractor.flv;
 
+import android.util.Pair;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.extractor.TrackOutput;
 import com.google.android.exoplayer.util.CodecSpecificDataUtil;
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
-import android.util.Pair;
-
 import java.util.Collections;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/flv/FlvExtractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/flv/FlvExtractor.java
index d179f65aee..eafaaf87a6 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/flv/FlvExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/flv/FlvExtractor.java
@@ -23,7 +23,6 @@
 import com.google.android.exoplayer.extractor.SeekMap;
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/flv/ScriptTagPayloadReader.java b/library/src/main/java/com/google/android/exoplayer/extractor/flv/ScriptTagPayloadReader.java
index 0f71be791c..66201a15ef 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/flv/ScriptTagPayloadReader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/flv/ScriptTagPayloadReader.java
@@ -19,7 +19,6 @@
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.extractor.TrackOutput;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.HashMap;
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/flv/VideoTagPayloadReader.java b/library/src/main/java/com/google/android/exoplayer/extractor/flv/VideoTagPayloadReader.java
index 63cdcf0999..1a40283c2d 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/flv/VideoTagPayloadReader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/flv/VideoTagPayloadReader.java
@@ -24,7 +24,6 @@
 import com.google.android.exoplayer.util.NalUnitUtil;
 import com.google.android.exoplayer.util.ParsableBitArray;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.util.ArrayList;
 import java.util.List;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp3/Id3Util.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp3/Id3Util.java
index 7b158f71cd..e59aa92983 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp3/Id3Util.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp3/Id3Util.java
@@ -15,13 +15,11 @@
  */
 package com.google.android.exoplayer.extractor.mp3;
 
+import android.util.Pair;
 import com.google.android.exoplayer.extractor.ExtractorInput;
 import com.google.android.exoplayer.extractor.GaplessInfo;
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
-
-import android.util.Pair;
-
 import java.io.IOException;
 import java.nio.charset.Charset;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp3/Mp3Extractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp3/Mp3Extractor.java
index 7165840cd2..7e934a6d6e 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp3/Mp3Extractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp3/Mp3Extractor.java
@@ -28,7 +28,6 @@
 import com.google.android.exoplayer.util.MpegAudioHeader;
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
-
 import java.io.EOFException;
 import java.io.IOException;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Atom.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Atom.java
index 44ccbee400..938b1e3b86 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Atom.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Atom.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
-
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -112,6 +111,7 @@
   public static final int TYPE_ctts = Util.getIntegerCodeForString("ctts");
   public static final int TYPE_stsc = Util.getIntegerCodeForString("stsc");
   public static final int TYPE_stsz = Util.getIntegerCodeForString("stsz");
+  public static final int TYPE_stz2 = Util.getIntegerCodeForString("stz2");
   public static final int TYPE_stco = Util.getIntegerCodeForString("stco");
   public static final int TYPE_co64 = Util.getIntegerCodeForString("co64");
   public static final int TYPE_tx3g = Util.getIntegerCodeForString("tx3g");
@@ -126,6 +126,9 @@
   public static final int TYPE_name = Util.getIntegerCodeForString("name");
   public static final int TYPE_data = Util.getIntegerCodeForString("data");
   public static final int TYPE_emsg = Util.getIntegerCodeForString("emsg");
+  public static final int TYPE_vp08 = Util.getIntegerCodeForString("vp08");
+  public static final int TYPE_vp09 = Util.getIntegerCodeForString("vp09");
+  public static final int TYPE_vpcC = Util.getIntegerCodeForString("vpcC");
   public static final int TYPE_DASHES = Util.getIntegerCodeForString("----");
 
   public final int type;
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java
index d8f34b415d..4fa1132937 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer.extractor.mp4;
 
+import android.util.Pair;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.ParserException;
@@ -27,9 +28,6 @@
 import com.google.android.exoplayer.util.ParsableBitArray;
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
-
-import android.util.Pair;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -92,8 +90,22 @@ public static Track parseTrak(Atom.ContainerAtom trak, Atom.LeafAtom mvhd, long
    */
   public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAtom)
       throws ParserException {
-    // Array of sample sizes.
-    ParsableByteArray stsz = stblAtom.getLeafAtomOfType(Atom.TYPE_stsz).data;
+    SampleSizeBox sampleSizeBox;
+    Atom.LeafAtom stszAtom = stblAtom.getLeafAtomOfType(Atom.TYPE_stsz);
+    if (stszAtom != null) {
+      sampleSizeBox = new StszSampleSizeBox(stszAtom);
+    } else {
+      Atom.LeafAtom stz2Atom = stblAtom.getLeafAtomOfType(Atom.TYPE_stz2);
+      if (stz2Atom == null) {
+        throw new ParserException("Track has no sample table size information");
+      }
+      sampleSizeBox = new Stz2SampleSizeBox(stz2Atom);
+    }
+
+    int sampleCount = sampleSizeBox.getSampleCount();
+    if (sampleCount == 0) {
+      return new TrackSampleTable(new long[0], new int[0], 0, new long[0], new int[0]);
+    }
 
     // Entries are byte offsets of chunks.
     boolean chunkOffsetsAreLongs = false;
@@ -114,14 +126,6 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
     Atom.LeafAtom cttsAtom = stblAtom.getLeafAtomOfType(Atom.TYPE_ctts);
     ParsableByteArray ctts = cttsAtom != null ? cttsAtom.data : null;
 
-    // Skip full atom.
-    stsz.setPosition(Atom.FULL_HEADER_SIZE);
-    int fixedSampleSize = stsz.readUnsignedIntToInt();
-    int sampleCount = stsz.readUnsignedIntToInt();
-    if (sampleCount == 0) {
-      return new TrackSampleTable(new long[0], new int[0], 0, new long[0], new int[0]);
-    }
-
     // Prepare to read chunk information.
     ChunkIterator chunkIterator = new ChunkIterator(stsc, chunkOffsets, chunkOffsetsAreLongs);
 
@@ -145,12 +149,16 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
     if (stss != null) {
       stss.setPosition(Atom.FULL_HEADER_SIZE);
       remainingSynchronizationSamples = stss.readUnsignedIntToInt();
-      nextSynchronizationSampleIndex = stss.readUnsignedIntToInt() - 1;
+      if (remainingSynchronizationSamples > 0) {
+        nextSynchronizationSampleIndex = stss.readUnsignedIntToInt() - 1;
+      } else {
+        // Ignore empty stss boxes, which causes all samples to be treated as sync samples.
+        stss = null;
+      }
     }
 
     // True if we can rechunk fixed-sample-size data. Note that we only rechunk raw audio.
-    boolean isRechunkable =
-        fixedSampleSize != 0
+    boolean isRechunkable = sampleSizeBox.isFixedSampleSize()
         && MimeTypes.AUDIO_RAW.equals(track.mediaFormat.mimeType)
         && remainingTimestampDeltaChanges == 0
         && remainingTimestampOffsetChanges == 0
@@ -195,7 +203,7 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
         }
 
         offsets[i] = offset;
-        sizes[i] = fixedSampleSize == 0 ? stsz.readUnsignedIntToInt() : fixedSampleSize;
+        sizes[i] = sampleSizeBox.readNextSampleSize();
         if (sizes[i] > maximumSize) {
           maximumSize = sizes[i];
         }
@@ -244,6 +252,7 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
         chunkOffsetsBytes[chunkIterator.index] = chunkIterator.offset;
         chunkSampleCounts[chunkIterator.index] = chunkIterator.numSamples;
       }
+      int fixedSampleSize = sampleSizeBox.readNextSampleSize();
       FixedSampleSizeRechunker.Results rechunkedResults = FixedSampleSizeRechunker.rechunk(
           fixedSampleSize, chunkOffsetsBytes, chunkSampleCounts, timestampDeltaInTimeUnits);
       offsets = rechunkedResults.offsets;
@@ -555,7 +564,8 @@ private static StsdData parseStsd(ParsableByteArray stsd, int trackId, long dura
       if (childAtomType == Atom.TYPE_avc1 || childAtomType == Atom.TYPE_avc3
           || childAtomType == Atom.TYPE_encv || childAtomType == Atom.TYPE_mp4v
           || childAtomType == Atom.TYPE_hvc1 || childAtomType == Atom.TYPE_hev1
-          || childAtomType == Atom.TYPE_s263) {
+          || childAtomType == Atom.TYPE_s263 || childAtomType == Atom.TYPE_vp08
+          || childAtomType == Atom.TYPE_vp09) {
         parseVideoSampleEntry(stsd, childAtomType, childStartPosition, childAtomSize, trackId,
             durationUs, rotationDegrees, out, i);
       } else if (childAtomType == Atom.TYPE_mp4a || childAtomType == Atom.TYPE_enca
@@ -641,6 +651,9 @@ private static void parseVideoSampleEntry(ParsableByteArray parent, int atomType
       } else if (childAtomType == Atom.TYPE_pasp) {
         pixelWidthHeightRatio = parsePaspFromParent(parent, childStartPosition);
         pixelWidthHeightRatioFromPasp = true;
+      } else if (childAtomType == Atom.TYPE_vpcC) {
+        Assertions.checkState(mimeType == null);
+        mimeType = (atomType == Atom.TYPE_vp08) ? MimeTypes.VIDEO_VP8 : MimeTypes.VIDEO_VP9;
       }
       childPosition += childAtomSize;
     }
@@ -881,7 +894,9 @@ private static void parseAudioSampleEntry(ParsableByteArray parent, int atomType
     }
   }
 
-  /** Returns the position of the esds box within a parent, or -1 if no esds box is found */
+  /**
+   * Returns the position of the esds box within a parent, or -1 if no esds box is found
+   */
   private static int findEsdsPosition(ParsableByteArray parent, int position, int size) {
     int childAtomPosition = parent.getPosition();
     while (childAtomPosition - position < size) {
@@ -897,7 +912,9 @@ private static int findEsdsPosition(ParsableByteArray parent, int position, int
     return -1;
   }
 
-  /** Returns codec-specific initialization data contained in an esds box. */
+  /**
+   * Returns codec-specific initialization data contained in an esds box.
+   */
   private static Pair<String, byte[]> parseEsdsFromParent(ParsableByteArray parent, int position) {
     parent.setPosition(position + Atom.HEADER_SIZE + 4);
     // Start of the ES_Descriptor (defined in 14496-1)
@@ -1042,7 +1059,9 @@ private static TrackEncryptionBox parseSchiFromParent(ParsableByteArray parent,
     return null;
   }
 
-  /** Parses the size of an expandable class, as specified by ISO 14496-1 subsection 8.3.3. */
+  /**
+   * Parses the size of an expandable class, as specified by ISO 14496-1 subsection 8.3.3.
+   */
   private static int parseExpandableClassSize(ParsableByteArray data) {
     int currentByte = data.readUnsignedByte();
     int size = currentByte & 0x7F;
@@ -1154,4 +1173,111 @@ public AvcCData(List<byte[]> initializationData, int nalUnitLengthFieldLength,
 
   }
 
+  /**
+   * A box containing sample sizes (e.g. stsz, stz2).
+   */
+  private interface SampleSizeBox {
+
+    /**
+     * Returns the number of samples.
+     */
+    int getSampleCount();
+
+    /**
+     * Returns the size for the next sample.
+     */
+    int readNextSampleSize();
+
+    /**
+     * Returns whether samples have a fixed size.
+     */
+    boolean isFixedSampleSize();
+
+  }
+
+  /**
+   * An stsz sample size box.
+   */
+  /* package */ static final class StszSampleSizeBox implements SampleSizeBox {
+
+    private final int fixedSampleSize;
+    private final int sampleCount;
+    private final ParsableByteArray data;
+
+    public StszSampleSizeBox(Atom.LeafAtom stszAtom) {
+      data = stszAtom.data;
+      data.setPosition(Atom.FULL_HEADER_SIZE);
+      fixedSampleSize = data.readUnsignedIntToInt();
+      sampleCount = data.readUnsignedIntToInt();
+    }
+
+    @Override
+    public int getSampleCount() {
+      return sampleCount;
+    }
+
+    @Override
+    public int readNextSampleSize() {
+      return fixedSampleSize == 0 ? data.readUnsignedIntToInt() : fixedSampleSize;
+    }
+
+    @Override
+    public boolean isFixedSampleSize() {
+      return fixedSampleSize != 0;
+    }
+
+  }
+
+  /**
+   * An stz2 sample size box.
+   */
+  /* package */ static final class Stz2SampleSizeBox implements SampleSizeBox {
+
+    private final ParsableByteArray data;
+    private final int sampleCount;
+    private final int fieldSize; // Can be 4, 8, or 16.
+
+    // Used only if fieldSize == 4.
+    private int sampleIndex;
+    private int currentByte;
+
+    public Stz2SampleSizeBox(Atom.LeafAtom stz2Atom) {
+      data = stz2Atom.data;
+      data.setPosition(Atom.FULL_HEADER_SIZE);
+      fieldSize = data.readUnsignedIntToInt() & 0x000000FF;
+      sampleCount = data.readUnsignedIntToInt();
+    }
+
+    @Override
+    public int getSampleCount() {
+      return sampleCount;
+    }
+
+    @Override
+    public int readNextSampleSize() {
+      if (fieldSize == 8) {
+        return data.readUnsignedByte();
+      } else if (fieldSize == 16) {
+        return data.readUnsignedShort();
+      } else {
+        // fieldSize == 4.
+        if ((sampleIndex++ % 2) == 0) {
+          // Read the next byte into our cached byte when we are reading the upper bits.
+          currentByte = data.readUnsignedByte();
+          // Read the upper bits from the byte and shift them to the lower 4 bits.
+          return (currentByte & 0xF0) >> 4;
+        } else {
+          // Mask out the upper 4 bits of the last byte we read.
+          return currentByte & 0x0F;
+        }
+      }
+    }
+
+    @Override
+    public boolean isFixedSampleSize() {
+      return false;
+    }
+
+  }
+
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java
index 0fa337e7e0..4b9277ee85 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java
@@ -15,6 +15,9 @@
  */
 package com.google.android.exoplayer.extractor.mp4;
 
+import android.util.Log;
+import android.util.Pair;
+import android.util.SparseArray;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.drm.DrmInitData;
@@ -33,11 +36,6 @@
 import com.google.android.exoplayer.util.NalUnitUtil;
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
-
-import android.util.Log;
-import android.util.Pair;
-import android.util.SparseArray;
-
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Mp4Extractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Mp4Extractor.java
index bde4d5f129..5df22494bf 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Mp4Extractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Mp4Extractor.java
@@ -29,7 +29,6 @@
 import com.google.android.exoplayer.util.NalUnitUtil;
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
-
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
@@ -445,8 +444,9 @@ private static boolean shouldParseLeafAtom(int atom) {
     return atom == Atom.TYPE_mdhd || atom == Atom.TYPE_mvhd || atom == Atom.TYPE_hdlr
         || atom == Atom.TYPE_stsd || atom == Atom.TYPE_stts || atom == Atom.TYPE_stss
         || atom == Atom.TYPE_ctts || atom == Atom.TYPE_elst || atom == Atom.TYPE_stsc
-        || atom == Atom.TYPE_stsz || atom == Atom.TYPE_stco || atom == Atom.TYPE_co64
-        || atom == Atom.TYPE_tkhd || atom == Atom.TYPE_ftyp || atom == Atom.TYPE_udta;
+        || atom == Atom.TYPE_stsz || atom == Atom.TYPE_stz2 || atom == Atom.TYPE_stco
+        || atom == Atom.TYPE_co64 || atom == Atom.TYPE_tkhd || atom == Atom.TYPE_ftyp
+        || atom == Atom.TYPE_udta;
   }
 
   /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/PsshAtomUtil.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/PsshAtomUtil.java
index d250cb4a3a..a78bc2df14 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/PsshAtomUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/PsshAtomUtil.java
@@ -15,11 +15,9 @@
  */
 package com.google.android.exoplayer.extractor.mp4;
 
-import com.google.android.exoplayer.util.ParsableByteArray;
-
 import android.util.Log;
 import android.util.Pair;
-
+import com.google.android.exoplayer.util.ParsableByteArray;
 import java.nio.ByteBuffer;
 import java.util.UUID;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Sniffer.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Sniffer.java
index 9c29413d7c..919779a393 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Sniffer.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/Sniffer.java
@@ -19,7 +19,6 @@
 import com.google.android.exoplayer.extractor.ExtractorInput;
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/TrackFragment.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/TrackFragment.java
index 32671e3e0f..bf4ddfe93d 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/TrackFragment.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/TrackFragment.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.extractor.ExtractorInput;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/FlacReader.java b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/FlacReader.java
index c3bdb33a56..bcae7dddfa 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/FlacReader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/FlacReader.java
@@ -26,7 +26,6 @@
 import com.google.android.exoplayer.util.FlacUtil;
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.Collections;
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggExtractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggExtractor.java
index f41aa0bbc8..853f4ffd60 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggExtractor.java
@@ -22,7 +22,6 @@
 import com.google.android.exoplayer.extractor.PositionHolder;
 import com.google.android.exoplayer.extractor.TrackOutput;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggParser.java b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggParser.java
index c66adcabe6..f4050475cc 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggParser.java
@@ -21,7 +21,6 @@
 import com.google.android.exoplayer.extractor.ogg.OggUtil.PacketInfoHolder;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggSeeker.java b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggSeeker.java
index 40f88b2d27..cf06719ca7 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggSeeker.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggSeeker.java
@@ -19,7 +19,6 @@
 import com.google.android.exoplayer.extractor.ExtractorInput;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggUtil.java b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggUtil.java
index c17d4b61f3..30b44fd9e5 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggUtil.java
@@ -20,7 +20,6 @@
 import com.google.android.exoplayer.extractor.ExtractorInput;
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
-
 import java.io.EOFException;
 import java.io.IOException;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/StreamReader.java b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/StreamReader.java
index af251cfd52..1a8b874722 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/StreamReader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/StreamReader.java
@@ -1,12 +1,10 @@
 package com.google.android.exoplayer.extractor.ogg;
 
-import com.google.android.exoplayer.extractor.Extractor;
 import com.google.android.exoplayer.extractor.ExtractorInput;
 import com.google.android.exoplayer.extractor.ExtractorOutput;
 import com.google.android.exoplayer.extractor.PositionHolder;
 import com.google.android.exoplayer.extractor.TrackOutput;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/VorbisReader.java b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/VorbisReader.java
index c71ec0b540..1b3dda6707 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/VorbisReader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/VorbisReader.java
@@ -25,7 +25,6 @@
 import com.google.android.exoplayer.extractor.ogg.VorbisUtil.Mode;
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.io.IOException;
 import java.util.ArrayList;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/VorbisUtil.java b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/VorbisUtil.java
index a325e4e03e..476d08a5e3 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/VorbisUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/VorbisUtil.java
@@ -15,11 +15,9 @@
  */
 package com.google.android.exoplayer.extractor.ogg;
 
+import android.util.Log;
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
-import android.util.Log;
-
 import java.util.Arrays;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ts/AdtsExtractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/ts/AdtsExtractor.java
index 0e8ffb10db..084af553d9 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ts/AdtsExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ts/AdtsExtractor.java
@@ -23,7 +23,6 @@
 import com.google.android.exoplayer.util.ParsableBitArray;
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ts/AdtsReader.java b/library/src/main/java/com/google/android/exoplayer/extractor/ts/AdtsReader.java
index 1a38078bea..00a8218c18 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ts/AdtsReader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ts/AdtsReader.java
@@ -15,6 +15,8 @@
  */
 package com.google.android.exoplayer.extractor.ts;
 
+import android.util.Log;
+import android.util.Pair;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.extractor.TrackOutput;
@@ -22,10 +24,6 @@
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.ParsableBitArray;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
-import android.util.Log;
-import android.util.Pair;
-
 import java.util.Arrays;
 import java.util.Collections;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ts/H262Reader.java b/library/src/main/java/com/google/android/exoplayer/extractor/ts/H262Reader.java
index 47a5aa05d4..94f4159c63 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ts/H262Reader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ts/H262Reader.java
@@ -15,15 +15,13 @@
  */
 package com.google.android.exoplayer.extractor.ts;
 
+import android.util.Pair;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.extractor.TrackOutput;
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.NalUnitUtil;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
-import android.util.Pair;
-
 import java.util.Arrays;
 import java.util.Collections;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ts/H264Reader.java b/library/src/main/java/com/google/android/exoplayer/extractor/ts/H264Reader.java
index e29a25605e..bfec35941b 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ts/H264Reader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ts/H264Reader.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer.extractor.ts;
 
+import android.util.SparseArray;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.extractor.TrackOutput;
@@ -23,9 +24,6 @@
 import com.google.android.exoplayer.util.NalUnitUtil.SpsData;
 import com.google.android.exoplayer.util.ParsableBitArray;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
-import android.util.SparseArray;
-
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ts/H265Reader.java b/library/src/main/java/com/google/android/exoplayer/extractor/ts/H265Reader.java
index cc6000f8af..188ba0d572 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ts/H265Reader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ts/H265Reader.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer.extractor.ts;
 
+import android.util.Log;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.extractor.TrackOutput;
@@ -22,9 +23,6 @@
 import com.google.android.exoplayer.util.NalUnitUtil;
 import com.google.android.exoplayer.util.ParsableBitArray;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
-import android.util.Log;
-
 import java.util.Collections;
 
 /**
@@ -269,7 +267,8 @@ private static MediaFormat parseMediaFormat(NalUnitTargetBuffer vps, NalUnitTarg
     bitArray.readUnsignedExpGolombCodedInt(); // max_transform_hierarchy_depth_inter
     bitArray.readUnsignedExpGolombCodedInt(); // max_transform_hierarchy_depth_intra
     // if (scaling_list_enabled_flag) { if (sps_scaling_list_data_present_flag) {...}}
-    if (bitArray.readBit() && bitArray.readBit()) {
+    boolean scalingListEnabled = bitArray.readBit();
+    if (scalingListEnabled && bitArray.readBit()) {
       skipScalingList(bitArray);
     }
     bitArray.skipBits(2); // amp_enabled_flag (1), sample_adaptive_offset_enabled_flag (1)
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ts/NalUnitTargetBuffer.java b/library/src/main/java/com/google/android/exoplayer/extractor/ts/NalUnitTargetBuffer.java
index 9b8895082c..bad1162e53 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ts/NalUnitTargetBuffer.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ts/NalUnitTargetBuffer.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.extractor.ts;
 
 import com.google.android.exoplayer.util.Assertions;
-
 import java.util.Arrays;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ts/PsExtractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/ts/PsExtractor.java
index 7a2f5997fc..e97366ee46 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ts/PsExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ts/PsExtractor.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer.extractor.ts;
 
+import android.util.SparseArray;
 import com.google.android.exoplayer.extractor.Extractor;
 import com.google.android.exoplayer.extractor.ExtractorInput;
 import com.google.android.exoplayer.extractor.ExtractorOutput;
@@ -22,9 +23,6 @@
 import com.google.android.exoplayer.extractor.SeekMap;
 import com.google.android.exoplayer.util.ParsableBitArray;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
-import android.util.SparseArray;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ts/TsExtractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/ts/TsExtractor.java
index 4156fe61ca..8fab023188 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ts/TsExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ts/TsExtractor.java
@@ -15,6 +15,9 @@
  */
 package com.google.android.exoplayer.extractor.ts;
 
+import android.util.Log;
+import android.util.SparseArray;
+import android.util.SparseBooleanArray;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.extractor.DummyTrackOutput;
 import com.google.android.exoplayer.extractor.Extractor;
@@ -25,11 +28,6 @@
 import com.google.android.exoplayer.util.ParsableBitArray;
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
-
-import android.util.Log;
-import android.util.SparseArray;
-import android.util.SparseBooleanArray;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavExtractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavExtractor.java
index 345c1aaf8d..e2cddf313a 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavExtractor.java
@@ -25,7 +25,6 @@
 import com.google.android.exoplayer.extractor.SeekMap;
 import com.google.android.exoplayer.extractor.TrackOutput;
 import com.google.android.exoplayer.util.MimeTypes;
-
 import java.io.IOException;
 
 /** {@link Extractor} to extract samples from a WAV byte stream. */
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavHeaderReader.java b/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavHeaderReader.java
index 2407a68129..af0a8f8206 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavHeaderReader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavHeaderReader.java
@@ -15,15 +15,13 @@
  */
 package com.google.android.exoplayer.extractor.wav;
 
+import android.util.Log;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.extractor.ExtractorInput;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
-
-import android.util.Log;
-
 import java.io.IOException;
 
 /** Reads a {@code WavHeader} from an input stream; supports resuming from input failures. */
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/webm/DefaultEbmlReader.java b/library/src/main/java/com/google/android/exoplayer/extractor/webm/DefaultEbmlReader.java
index fd1de76aaa..42911c7c2d 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/webm/DefaultEbmlReader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/webm/DefaultEbmlReader.java
@@ -19,7 +19,6 @@
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.extractor.ExtractorInput;
 import com.google.android.exoplayer.util.Assertions;
-
 import java.io.EOFException;
 import java.io.IOException;
 import java.util.Stack;
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/webm/EbmlReader.java b/library/src/main/java/com/google/android/exoplayer/extractor/webm/EbmlReader.java
index 0ddbf4476f..26fe698740 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/webm/EbmlReader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/webm/EbmlReader.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.extractor.ExtractorInput;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/webm/EbmlReaderOutput.java b/library/src/main/java/com/google/android/exoplayer/extractor/webm/EbmlReaderOutput.java
index 91c58cedbc..732f023e57 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/webm/EbmlReaderOutput.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/webm/EbmlReaderOutput.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.extractor.ExtractorInput;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/webm/Sniffer.java b/library/src/main/java/com/google/android/exoplayer/extractor/webm/Sniffer.java
index b0fddff7fb..07f6f97351 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/webm/Sniffer.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/webm/Sniffer.java
@@ -16,10 +16,8 @@
 package com.google.android.exoplayer.extractor.webm;
 
 import com.google.android.exoplayer.C;
-import com.google.android.exoplayer.extractor.Extractor;
 import com.google.android.exoplayer.extractor.ExtractorInput;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/webm/VarintReader.java b/library/src/main/java/com/google/android/exoplayer/extractor/webm/VarintReader.java
index 6cc845ba76..1f0e06e72f 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/webm/VarintReader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/webm/VarintReader.java
@@ -2,7 +2,6 @@
 
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.extractor.ExtractorInput;
-
 import java.io.EOFException;
 import java.io.IOException;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/webm/WebmExtractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/webm/WebmExtractor.java
index 6155620f09..08dccdf215 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/webm/WebmExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/webm/WebmExtractor.java
@@ -15,6 +15,8 @@
  */
 package com.google.android.exoplayer.extractor.webm;
 
+import android.util.Pair;
+import android.util.SparseArray;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.ParserException;
@@ -32,10 +34,6 @@
 import com.google.android.exoplayer.util.NalUnitUtil;
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
-
-import android.util.Pair;
-import android.util.SparseArray;
-
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/Aes128DataSource.java b/library/src/main/java/com/google/android/exoplayer/hls/Aes128DataSource.java
index 3406eba658..2c2c28ca84 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/Aes128DataSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/Aes128DataSource.java
@@ -20,14 +20,12 @@
 import com.google.android.exoplayer.upstream.DataSourceInputStream;
 import com.google.android.exoplayer.upstream.DataSpec;
 import com.google.android.exoplayer.util.Assertions;
-
 import java.io.IOException;
 import java.security.InvalidAlgorithmParameterException;
 import java.security.InvalidKeyException;
 import java.security.Key;
 import java.security.NoSuchAlgorithmException;
 import java.security.spec.AlgorithmParameterSpec;
-
 import javax.crypto.Cipher;
 import javax.crypto.CipherInputStream;
 import javax.crypto.NoSuchPaddingException;
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/DefaultHlsTrackSelector.java b/library/src/main/java/com/google/android/exoplayer/hls/DefaultHlsTrackSelector.java
index 9ab999a94d..446ddac49a 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/DefaultHlsTrackSelector.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/DefaultHlsTrackSelector.java
@@ -15,11 +15,9 @@
  */
 package com.google.android.exoplayer.hls;
 
-import com.google.android.exoplayer.chunk.VideoFormatSelectorUtil;
-
 import android.content.Context;
 import android.text.TextUtils;
-
+import com.google.android.exoplayer.chunk.VideoFormatSelectorUtil;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/HlsChunkSource.java b/library/src/main/java/com/google/android/exoplayer/hls/HlsChunkSource.java
index 52f30bec53..d3ebf79e91 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/HlsChunkSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/HlsChunkSource.java
@@ -15,6 +15,11 @@
  */
 package com.google.android.exoplayer.hls;
 
+import android.net.Uri;
+import android.os.Handler;
+import android.os.SystemClock;
+import android.text.TextUtils;
+import android.util.Log;
 import com.google.android.exoplayer.BehindLiveWindowException;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.MediaFormat;
@@ -35,13 +40,6 @@
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.UriUtil;
 import com.google.android.exoplayer.util.Util;
-
-import android.net.Uri;
-import android.os.Handler;
-import android.os.SystemClock;
-import android.text.TextUtils;
-import android.util.Log;
-
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.math.BigInteger;
@@ -71,40 +69,6 @@
 
   }
 
-  /**
-   * Adaptive switching is disabled.
-   * <p>
-   * The initially selected variant will be used throughout playback.
-   */
-  public static final int ADAPTIVE_MODE_NONE = 0;
-
-  /**
-   * Adaptive switches splice overlapping segments of the old and new variants.
-   * <p>
-   * When performing a switch from one variant to another, overlapping segments will be requested
-   * from both the old and new variants. These segments will then be spliced together, allowing
-   * a seamless switch from one variant to another even if keyframes are misaligned or if keyframes
-   * are not positioned at the start of each segment.
-   * <p>
-   * Note that where it can be guaranteed that the source content has keyframes positioned at the
-   * start of each segment, {@link #ADAPTIVE_MODE_ABRUPT} should always be used in preference to
-   * this mode.
-   */
-  public static final int ADAPTIVE_MODE_SPLICE = 1;
-
-  /**
-   * Adaptive switches are performed at segment boundaries.
-   * <p>
-   * For this mode to perform seamless switches, the source content is required to have keyframes
-   * positioned at the start of each segment. If this is not the case a visual discontinuity may
-   * be experienced when switching from one variant to another.
-   * <p>
-   * Note that where it can be guaranteed that the source content does have keyframes positioned at
-   * the start of each segment, this mode should always be used in preference to
-   * {@link #ADAPTIVE_MODE_SPLICE} because it requires fetching less data.
-   */
-  public static final int ADAPTIVE_MODE_ABRUPT = 3;
-
   /**
    * The default minimum duration of media that needs to be buffered for a switch to a higher
    * quality variant to be considered.
@@ -122,6 +86,12 @@
    */
   public static final long DEFAULT_PLAYLIST_BLACKLIST_MS = 60000;
 
+  /**
+   * Subtracted value to lookup position when switching between variants in live streams to avoid
+   * gaps in playback in case playlist drift apart.
+   */
+  private static final double LIVE_VARIANT_SWITCH_SAFETY_EXTRA_SECS = 2.0;
+
   private static final String TAG = "HlsChunkSource";
   private static final String AAC_FILE_EXTENSION = ".aac";
   private static final String MP3_FILE_EXTENSION = ".mp3";
@@ -136,7 +106,6 @@
   private final HlsTrackSelector trackSelector;
   private final BandwidthMeter bandwidthMeter;
   private final PtsTimestampAdjusterProvider timestampAdjusterProvider;
-  private final int adaptiveMode;
   private final String baseUri;
   private final long minBufferDurationToSwitchUpUs;
   private final long maxBufferDurationToSwitchDownUs;
@@ -181,15 +150,12 @@
    * @param timestampAdjusterProvider A provider of {@link PtsTimestampAdjuster} instances. If
    *     multiple {@link HlsChunkSource}s are used for a single playback, they should all share the
    *     same provider.
-   * @param adaptiveMode The mode for switching from one variant to another. One of
-   *     {@link #ADAPTIVE_MODE_NONE}, {@link #ADAPTIVE_MODE_ABRUPT} and
-   *     {@link #ADAPTIVE_MODE_SPLICE}.
    */
   public HlsChunkSource(boolean isMaster, DataSource dataSource, HlsPlaylist playlist,
       HlsTrackSelector trackSelector, BandwidthMeter bandwidthMeter,
-      PtsTimestampAdjusterProvider timestampAdjusterProvider, int adaptiveMode) {
+      PtsTimestampAdjusterProvider timestampAdjusterProvider) {
     this(isMaster, dataSource, playlist, trackSelector, bandwidthMeter,
-        timestampAdjusterProvider, adaptiveMode, DEFAULT_MIN_BUFFER_TO_SWITCH_UP_MS,
+        timestampAdjusterProvider, DEFAULT_MIN_BUFFER_TO_SWITCH_UP_MS,
         DEFAULT_MAX_BUFFER_TO_SWITCH_DOWN_MS, null, null);
   }
 
@@ -204,9 +170,6 @@ public HlsChunkSource(boolean isMaster, DataSource dataSource, HlsPlaylist playl
    * @param timestampAdjusterProvider A provider of {@link PtsTimestampAdjuster} instances. If
    *     multiple {@link HlsChunkSource}s are used for a single playback, they should all share the
    *     same provider.
-   * @param adaptiveMode The mode for switching from one variant to another. One of
-   *     {@link #ADAPTIVE_MODE_NONE}, {@link #ADAPTIVE_MODE_ABRUPT} and
-   *     {@link #ADAPTIVE_MODE_SPLICE}.
    * @param minBufferDurationToSwitchUpMs The minimum duration of media that needs to be buffered
    *     for a switch to a higher quality variant to be considered.
    * @param maxBufferDurationToSwitchDownMs The maximum duration of media that needs to be buffered
@@ -214,10 +177,10 @@ public HlsChunkSource(boolean isMaster, DataSource dataSource, HlsPlaylist playl
    */
   public HlsChunkSource(boolean isMaster, DataSource dataSource, HlsPlaylist playlist,
       HlsTrackSelector trackSelector, BandwidthMeter bandwidthMeter,
-      PtsTimestampAdjusterProvider timestampAdjusterProvider, int adaptiveMode,
-      long minBufferDurationToSwitchUpMs, long maxBufferDurationToSwitchDownMs) {
+      PtsTimestampAdjusterProvider timestampAdjusterProvider, long minBufferDurationToSwitchUpMs,
+      long maxBufferDurationToSwitchDownMs) {
     this(isMaster, dataSource, playlist, trackSelector, bandwidthMeter,
-         timestampAdjusterProvider, adaptiveMode, minBufferDurationToSwitchUpMs,
+         timestampAdjusterProvider, minBufferDurationToSwitchUpMs,
          maxBufferDurationToSwitchDownMs, null, null);
   }
 
@@ -232,9 +195,6 @@ public HlsChunkSource(boolean isMaster, DataSource dataSource, HlsPlaylist playl
    * @param timestampAdjusterProvider A provider of {@link PtsTimestampAdjuster} instances. If
    *     multiple {@link HlsChunkSource}s are used for a single playback, they should all share the
    *     same provider.
-   * @param adaptiveMode The mode for switching from one variant to another. One of
-   *     {@link #ADAPTIVE_MODE_NONE}, {@link #ADAPTIVE_MODE_ABRUPT} and
-   *     {@link #ADAPTIVE_MODE_SPLICE}.
    * @param minBufferDurationToSwitchUpMs The minimum duration of media that needs to be buffered
    *     for a switch to a higher quality variant to be considered.
    * @param maxBufferDurationToSwitchDownMs The maximum duration of media that needs to be buffered
@@ -245,7 +205,7 @@ public HlsChunkSource(boolean isMaster, DataSource dataSource, HlsPlaylist playl
    */
   public HlsChunkSource(boolean isMaster, DataSource dataSource, HlsPlaylist playlist,
       HlsTrackSelector trackSelector, BandwidthMeter bandwidthMeter,
-      PtsTimestampAdjusterProvider timestampAdjusterProvider, int adaptiveMode,
+      PtsTimestampAdjusterProvider timestampAdjusterProvider,
       long minBufferDurationToSwitchUpMs, long maxBufferDurationToSwitchDownMs,
       Handler eventHandler, EventListener eventListener) {
     this.isMaster = isMaster;
@@ -253,7 +213,6 @@ public HlsChunkSource(boolean isMaster, DataSource dataSource, HlsPlaylist playl
     this.trackSelector = trackSelector;
     this.bandwidthMeter = bandwidthMeter;
     this.timestampAdjusterProvider = timestampAdjusterProvider;
-    this.adaptiveMode = adaptiveMode;
     this.eventListener = eventListener;
     this.eventHandler = eventHandler;
     minBufferDurationToSwitchUpUs = minBufferDurationToSwitchUpMs * 1000;
@@ -430,17 +389,11 @@ public void reset() {
    */
   public void getChunkOperation(TsChunk previousTsChunk, long playbackPositionUs,
       ChunkOperationHolder out) {
-    int nextVariantIndex;
-    boolean switchingVariantSpliced;
-    if (adaptiveMode == ADAPTIVE_MODE_NONE) {
-      nextVariantIndex = selectedVariantIndex;
-      switchingVariantSpliced = false;
-    } else {
-      nextVariantIndex = getNextVariantIndex(previousTsChunk, playbackPositionUs);
-      switchingVariantSpliced = previousTsChunk != null
-          && !variants[nextVariantIndex].format.equals(previousTsChunk.format)
-          && adaptiveMode == ADAPTIVE_MODE_SPLICE;
-    }
+    int previousChunkVariantIndex =
+        previousTsChunk == null ? -1 : getVariantIndex(previousTsChunk.format);
+    int nextVariantIndex = getNextVariantIndex(previousTsChunk, playbackPositionUs);
+    boolean switchingVariant = previousTsChunk != null
+        && previousChunkVariantIndex != nextVariantIndex;
 
     HlsMediaPlaylist mediaPlaylist = variantPlaylists[nextVariantIndex];
     if (mediaPlaylist == null) {
@@ -450,13 +403,13 @@ public void getChunkOperation(TsChunk previousTsChunk, long playbackPositionUs,
     }
 
     selectedVariantIndex = nextVariantIndex;
-    int chunkMediaSequence = 0;
+    int chunkMediaSequence;
     if (live) {
       if (previousTsChunk == null) {
-        chunkMediaSequence = getLiveStartChunkMediaSequence(nextVariantIndex);
+        chunkMediaSequence = getLiveStartChunkSequenceNumber(selectedVariantIndex);
       } else {
-        chunkMediaSequence = switchingVariantSpliced
-            ? previousTsChunk.chunkIndex : previousTsChunk.chunkIndex + 1;
+        chunkMediaSequence = getLiveNextChunkSequenceNumber(previousTsChunk.chunkIndex,
+            previousChunkVariantIndex, selectedVariantIndex);
         if (chunkMediaSequence < mediaPlaylist.mediaSequence) {
           fatalError = new BehindLiveWindowException();
           return;
@@ -467,9 +420,11 @@ public void getChunkOperation(TsChunk previousTsChunk, long playbackPositionUs,
       if (previousTsChunk == null) {
         chunkMediaSequence = Util.binarySearchFloor(mediaPlaylist.segments, playbackPositionUs,
             true, true) + mediaPlaylist.mediaSequence;
+      } else if (switchingVariant) {
+        chunkMediaSequence = Util.binarySearchFloor(mediaPlaylist.segments,
+            previousTsChunk.startTimeUs, true, true) + mediaPlaylist.mediaSequence;
       } else {
-        chunkMediaSequence = switchingVariantSpliced
-            ? previousTsChunk.chunkIndex : previousTsChunk.chunkIndex + 1;
+        chunkMediaSequence = previousTsChunk.getNextChunkIndex();
       }
     }
 
@@ -477,8 +432,8 @@ public void getChunkOperation(TsChunk previousTsChunk, long playbackPositionUs,
     if (chunkIndex >= mediaPlaylist.segments.size()) {
       if (!mediaPlaylist.live) {
         out.endOfStream = true;
-      } else if (shouldRerequestLiveMediaPlaylist(nextVariantIndex)) {
-        out.chunk = newMediaPlaylistChunk(nextVariantIndex);
+      } else if (shouldRerequestLiveMediaPlaylist(selectedVariantIndex)) {
+        out.chunk = newMediaPlaylistChunk(selectedVariantIndex);
       }
       return;
     }
@@ -510,10 +465,9 @@ public void getChunkOperation(TsChunk previousTsChunk, long playbackPositionUs,
     if (live) {
       if (previousTsChunk == null) {
         startTimeUs = 0;
-      } else if (switchingVariantSpliced) {
-        startTimeUs = previousTsChunk.startTimeUs;
       } else {
-        startTimeUs = previousTsChunk.endTimeUs;
+        startTimeUs = previousTsChunk.getAdjustedEndTimeUs()
+            - (switchingVariant ? previousTsChunk.getDurationUs() : 0);
       }
     } else /* Not live */ {
       startTimeUs = segment.startTimeUs;
@@ -531,11 +485,11 @@ public void getChunkOperation(TsChunk previousTsChunk, long playbackPositionUs,
       // case below.
       Extractor extractor = new AdtsExtractor(startTimeUs);
       extractorWrapper = new HlsExtractorWrapper(trigger, format, startTimeUs, extractor,
-          switchingVariantSpliced, MediaFormat.NO_VALUE, MediaFormat.NO_VALUE);
+          switchingVariant, MediaFormat.NO_VALUE, MediaFormat.NO_VALUE);
     } else if (lastPathSegment.endsWith(MP3_FILE_EXTENSION)) {
       Extractor extractor = new Mp3Extractor(startTimeUs);
       extractorWrapper = new HlsExtractorWrapper(trigger, format, startTimeUs, extractor,
-          switchingVariantSpliced, MediaFormat.NO_VALUE, MediaFormat.NO_VALUE);
+          switchingVariant, MediaFormat.NO_VALUE, MediaFormat.NO_VALUE);
     } else if (lastPathSegment.endsWith(WEBVTT_FILE_EXTENSION)
         || lastPathSegment.endsWith(VTT_FILE_EXTENSION)) {
       PtsTimestampAdjuster timestampAdjuster = timestampAdjusterProvider.getAdjuster(isMaster,
@@ -548,7 +502,7 @@ public void getChunkOperation(TsChunk previousTsChunk, long playbackPositionUs,
       }
       Extractor extractor = new WebvttExtractor(timestampAdjuster);
       extractorWrapper = new HlsExtractorWrapper(trigger, format, startTimeUs, extractor,
-          switchingVariantSpliced, MediaFormat.NO_VALUE, MediaFormat.NO_VALUE);
+          switchingVariant, MediaFormat.NO_VALUE, MediaFormat.NO_VALUE);
     } else if (previousTsChunk == null
         || previousTsChunk.discontinuitySequenceNumber != segment.discontinuitySequenceNumber
         || !format.equals(previousTsChunk.format)) {
@@ -575,12 +529,11 @@ public void getChunkOperation(TsChunk previousTsChunk, long playbackPositionUs,
       Extractor extractor = new TsExtractor(timestampAdjuster, workaroundFlags);
       ExposedTrack selectedTrack = tracks.get(selectedTrackIndex);
       extractorWrapper = new HlsExtractorWrapper(trigger, format, startTimeUs, extractor,
-          switchingVariantSpliced, selectedTrack.adaptiveMaxWidth, selectedTrack.adaptiveMaxHeight);
+          switchingVariant, selectedTrack.adaptiveMaxWidth, selectedTrack.adaptiveMaxHeight);
     } else {
       // MPEG-2 TS segments, and we need to continue using the same extractor.
       extractorWrapper = previousTsChunk.extractorWrapper;
     }
-
     out.chunk = new TsChunk(dataSource, dataSpec, trigger, format, startTimeUs, endTimeUs,
         chunkMediaSequence, segment.discontinuitySequenceNumber, extractorWrapper, encryptionKey,
         encryptionIv);
@@ -714,9 +667,58 @@ protected int computeDefaultVariantIndex(HlsMasterPlaylist playlist, Variant[] v
 
     return  defaultVariantIndex;
   }
-
+  
   // Private methods.
 
+  private int getLiveStartChunkSequenceNumber(int variantIndex) {
+    // For live start playback from the third chunk from the end.
+    HlsMediaPlaylist mediaPlaylist = variantPlaylists[variantIndex];
+    int chunkIndex = mediaPlaylist.segments.size() > 3 ? mediaPlaylist.segments.size() - 3 : 0;
+    return chunkIndex + mediaPlaylist.mediaSequence;
+  }
+
+  /**
+   * Returns the media sequence number of a chunk in a new variant for a live stream variant switch.
+   *
+   * @param previousChunkIndex The index of the last chunk in the old variant.
+   * @param oldVariantIndex The index of the old variant.
+   * @param newVariantIndex The index of the new variant.
+   * @return Media sequence number of the chunk to switch to in a live stream in the variant that
+   *     corresponds to the given {@code newVariantIndex}.
+   */
+  private int getLiveNextChunkSequenceNumber(int previousChunkIndex, int oldVariantIndex,
+      int newVariantIndex) {
+    if (oldVariantIndex == newVariantIndex) {
+      return previousChunkIndex + 1;
+    }
+    HlsMediaPlaylist oldMediaPlaylist = variantPlaylists[oldVariantIndex];
+    HlsMediaPlaylist newMediaPlaylist = variantPlaylists[newVariantIndex];
+    double offsetToLiveInstantSecs = 0;
+    for (int i = previousChunkIndex - oldMediaPlaylist.mediaSequence;
+         i < oldMediaPlaylist.segments.size(); i++) {
+      offsetToLiveInstantSecs += oldMediaPlaylist.segments.get(i).durationSecs;
+    }
+    long currentTimeMs = SystemClock.elapsedRealtime();
+    offsetToLiveInstantSecs +=
+        (double) (currentTimeMs - variantLastPlaylistLoadTimesMs[oldVariantIndex]) / 1000;
+    offsetToLiveInstantSecs += LIVE_VARIANT_SWITCH_SAFETY_EXTRA_SECS;
+    offsetToLiveInstantSecs -=
+        (double) (currentTimeMs - variantLastPlaylistLoadTimesMs[newVariantIndex]) / 1000;
+    if (offsetToLiveInstantSecs < 0) {
+      // The instant we are looking for is not contained in the playlist, we need it to be
+      // refreshed.
+      return newMediaPlaylist.mediaSequence + newMediaPlaylist.segments.size() + 1;
+    }
+    for (int i = newMediaPlaylist.segments.size() - 1; i >= 0; i--) {
+      offsetToLiveInstantSecs -= newMediaPlaylist.segments.get(i).durationSecs;
+      if (offsetToLiveInstantSecs < 0) {
+        return newMediaPlaylist.mediaSequence + i;
+      }
+    }
+    // We have fallen behind the live window.
+    return newMediaPlaylist.mediaSequence - 1;
+  }
+
   private int getNextVariantIndex(TsChunk previousTsChunk, long playbackPositionUs) {
     clearStaleBlacklistedVariants();
     long bitrateEstimate = bandwidthMeter.getBitrateEstimate();
@@ -739,9 +741,8 @@ private int getNextVariantIndex(TsChunk previousTsChunk, long playbackPositionUs
     }
     // We're not using the ideal variant for the available bandwidth, but only switch if the
     // conditions are appropriate.
-    long bufferedPositionUs = adaptiveMode == ADAPTIVE_MODE_SPLICE ? previousTsChunk.startTimeUs
-        : previousTsChunk.endTimeUs;
-    long bufferedUs = bufferedPositionUs - playbackPositionUs;
+    long bufferedUs = previousTsChunk.getAdjustedEndTimeUs() - previousTsChunk.getDurationUs()
+        - playbackPositionUs;
     if (variantBlacklistTimes[selectedVariantIndex] != 0
         || (idealIndex > selectedVariantIndex && bufferedUs < maxBufferDurationToSwitchDownUs)
         || (idealIndex < selectedVariantIndex && bufferedUs > minBufferDurationToSwitchUpUs)) {
@@ -780,13 +781,6 @@ private boolean shouldRerequestLiveMediaPlaylist(int nextVariantIndex) {
     return timeSinceLastMediaPlaylistLoadMs >= (mediaPlaylist.targetDurationSecs * 1000) / 2;
   }
 
-  private int getLiveStartChunkMediaSequence(int variantIndex) {
-    // For live start playback from the third chunk from the end.
-    HlsMediaPlaylist mediaPlaylist = variantPlaylists[variantIndex];
-    int chunkIndex = mediaPlaylist.segments.size() > 3 ? mediaPlaylist.segments.size() - 3 : 0;
-    return chunkIndex + mediaPlaylist.mediaSequence;
-  }
-
   private MediaPlaylistChunk newMediaPlaylistChunk(int variantIndex) {
     Uri mediaPlaylistUri = UriUtil.resolveToUri(baseUri, variants[variantIndex].url);
     DataSpec dataSpec = new DataSpec(mediaPlaylistUri, 0, C.LENGTH_UNBOUNDED, null,
@@ -835,8 +829,8 @@ private void setMediaPlaylist(int variantIndex, HlsMediaPlaylist mediaPlaylist)
   }
 
   private boolean allVariantsBlacklisted() {
-    for (int i = 0; i < variantBlacklistTimes.length; i++) {
-      if (variantBlacklistTimes[i] == 0) {
+    for (long variantBlacklistTime : variantBlacklistTimes) {
+      if (variantBlacklistTime == 0) {
         return false;
       }
     }
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/HlsExtractorWrapper.java b/library/src/main/java/com/google/android/exoplayer/hls/HlsExtractorWrapper.java
index cb0b95f0c5..dda93bc649 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/HlsExtractorWrapper.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/HlsExtractorWrapper.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer.hls;
 
+import android.util.SparseArray;
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.SampleHolder;
 import com.google.android.exoplayer.chunk.Format;
@@ -28,9 +29,6 @@
 import com.google.android.exoplayer.upstream.Allocator;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.MimeTypes;
-
-import android.util.SparseArray;
-
 import java.io.IOException;
 
 /**
@@ -242,6 +240,15 @@ public int read(ExtractorInput input) throws IOException, InterruptedException {
     return result;
   }
 
+  public long getAdjustedEndTimeUs() {
+    long largestAdjustedPtsParsed = Long.MIN_VALUE;
+    for (int i = 0; i < sampleQueues.size(); i++) {
+      largestAdjustedPtsParsed = Math.max(largestAdjustedPtsParsed,
+          sampleQueues.valueAt(i).getLargestParsedTimestampUs());
+    }
+    return largestAdjustedPtsParsed;
+  }
+
   // ExtractorOutput implementation.
 
   @Override
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/HlsMediaPlaylist.java b/library/src/main/java/com/google/android/exoplayer/hls/HlsMediaPlaylist.java
index acf21d21f4..d65b16be99 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/HlsMediaPlaylist.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/HlsMediaPlaylist.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.hls;
 
 import com.google.android.exoplayer.C;
-
 import java.util.List;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/HlsParserUtil.java b/library/src/main/java/com/google/android/exoplayer/hls/HlsParserUtil.java
index 23a64163ad..58c7f34a3a 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/HlsParserUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/HlsParserUtil.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.hls;
 
 import com.google.android.exoplayer.ParserException;
-
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/HlsPlaylistParser.java b/library/src/main/java/com/google/android/exoplayer/hls/HlsPlaylistParser.java
index 603dc0168b..c132df9533 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/HlsPlaylistParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/HlsPlaylistParser.java
@@ -21,7 +21,6 @@
 import com.google.android.exoplayer.hls.HlsMediaPlaylist.Segment;
 import com.google.android.exoplayer.upstream.UriLoadable;
 import com.google.android.exoplayer.util.MimeTypes;
-
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/HlsSampleSource.java b/library/src/main/java/com/google/android/exoplayer/hls/HlsSampleSource.java
index d7731bb48d..0225d4f0e7 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/HlsSampleSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/HlsSampleSource.java
@@ -15,6 +15,8 @@
  */
 package com.google.android.exoplayer.hls;
 
+import android.os.Handler;
+import android.os.SystemClock;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.LoadControl;
 import com.google.android.exoplayer.MediaFormat;
@@ -31,10 +33,6 @@
 import com.google.android.exoplayer.upstream.Loader.Loadable;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.MimeTypes;
-
-import android.os.Handler;
-import android.os.SystemClock;
-
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.LinkedList;
@@ -592,13 +590,14 @@ private void setTrackEnabledState(int track, boolean enabledState) {
    *
    * @param format The {@link MediaFormat} to copy.
    * @param fixedTrackFormat The {@link Format} to incorporate into the copy.
-   * @param language The language to incorporate into the copy.
+   * @param languageOverride The language to incorporate into the copy.
    * @return The copied {@link MediaFormat}.
    */
   private static MediaFormat copyWithFixedTrackInfo(MediaFormat format, Format fixedTrackFormat,
-      String language) {
+      String languageOverride) {
     int width = fixedTrackFormat.width == -1 ? MediaFormat.NO_VALUE : fixedTrackFormat.width;
     int height = fixedTrackFormat.height == -1 ? MediaFormat.NO_VALUE : fixedTrackFormat.height;
+    String language = languageOverride == null ? fixedTrackFormat.language : languageOverride;
     return format.copyWithFixedTrackInfo(fixedTrackFormat.id, fixedTrackFormat.bitrate, width,
         height, language);
   }
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/PtsTimestampAdjusterProvider.java b/library/src/main/java/com/google/android/exoplayer/hls/PtsTimestampAdjusterProvider.java
index d626a728c5..6df0ea9c26 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/PtsTimestampAdjusterProvider.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/PtsTimestampAdjusterProvider.java
@@ -15,9 +15,8 @@
  */
 package com.google.android.exoplayer.hls;
 
-import com.google.android.exoplayer.extractor.ts.PtsTimestampAdjuster;
-
 import android.util.SparseArray;
+import com.google.android.exoplayer.extractor.ts.PtsTimestampAdjuster;
 
 /**
  * Provides {@link PtsTimestampAdjuster} instances for use during HLS playbacks.
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/TsChunk.java b/library/src/main/java/com/google/android/exoplayer/hls/TsChunk.java
index 8354e312d0..314ff9f6ec 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/TsChunk.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/TsChunk.java
@@ -23,7 +23,6 @@
 import com.google.android.exoplayer.upstream.DataSource;
 import com.google.android.exoplayer.upstream.DataSpec;
 import com.google.android.exoplayer.util.Util;
-
 import java.io.IOException;
 
 /**
@@ -44,6 +43,7 @@
   private final boolean isEncrypted;
 
   private int bytesLoaded;
+  private long adjustedEndTimeUs;
   private volatile boolean loadCanceled;
 
   /**
@@ -68,6 +68,7 @@ public TsChunk(DataSource dataSource, DataSpec dataSpec, int trigger, Format for
     this.extractorWrapper = extractorWrapper;
     // Note: this.dataSource and dataSource may be different.
     this.isEncrypted = this.dataSource instanceof Aes128DataSource;
+    adjustedEndTimeUs = startTimeUs;
   }
 
   @Override
@@ -114,6 +115,10 @@ public void load() throws IOException, InterruptedException {
         while (result == Extractor.RESULT_CONTINUE && !loadCanceled) {
           result = extractorWrapper.read(input);
         }
+        long tsChunkEndTimeUs = extractorWrapper.getAdjustedEndTimeUs();
+        if (tsChunkEndTimeUs != Long.MIN_VALUE) {
+          adjustedEndTimeUs = tsChunkEndTimeUs;
+        }
       } finally {
         bytesLoaded = (int) (input.getPosition() - dataSpec.absoluteStreamPosition);
       }
@@ -122,6 +127,10 @@ public void load() throws IOException, InterruptedException {
     }
   }
 
+  public long getAdjustedEndTimeUs() {
+    return adjustedEndTimeUs;
+  }
+
   // Private methods
 
   /**
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/WebvttExtractor.java b/library/src/main/java/com/google/android/exoplayer/hls/WebvttExtractor.java
index 25b97b17c1..4a9fbfa14f 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/WebvttExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/WebvttExtractor.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer.hls;
 
+import android.text.TextUtils;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.ParserException;
@@ -29,9 +30,6 @@
 import com.google.android.exoplayer.text.webvtt.WebvttParserUtil;
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
-import android.text.TextUtils;
-
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.regex.Matcher;
diff --git a/library/src/main/java/com/google/android/exoplayer/metadata/MetadataParser.java b/library/src/main/java/com/google/android/exoplayer/metadata/MetadataParser.java
index f934493dc4..1596abe777 100644
--- a/library/src/main/java/com/google/android/exoplayer/metadata/MetadataParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/metadata/MetadataParser.java
@@ -18,7 +18,7 @@
 import com.google.android.exoplayer.ParserException;
 
 /**
- * Parses objects of type <T> from binary data.
+ * Parses metadata from binary data.
  *
  * @param <T> The type of the metadata.
  */
diff --git a/library/src/main/java/com/google/android/exoplayer/metadata/MetadataTrackRenderer.java b/library/src/main/java/com/google/android/exoplayer/metadata/MetadataTrackRenderer.java
index 5bd3ffbf5f..b5a8eb4b28 100644
--- a/library/src/main/java/com/google/android/exoplayer/metadata/MetadataTrackRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer/metadata/MetadataTrackRenderer.java
@@ -15,6 +15,10 @@
  */
 package com.google.android.exoplayer.metadata;
 
+import android.os.Handler;
+import android.os.Handler.Callback;
+import android.os.Looper;
+import android.os.Message;
 import com.google.android.exoplayer.ExoPlaybackException;
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.MediaFormatHolder;
@@ -23,12 +27,6 @@
 import com.google.android.exoplayer.SampleSourceTrackRenderer;
 import com.google.android.exoplayer.TrackRenderer;
 import com.google.android.exoplayer.util.Assertions;
-
-import android.os.Handler;
-import android.os.Handler.Callback;
-import android.os.Looper;
-import android.os.Message;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/metadata/id3/Id3Parser.java b/library/src/main/java/com/google/android/exoplayer/metadata/id3/Id3Parser.java
index 7998c8eb60..d9b335fbe3 100644
--- a/library/src/main/java/com/google/android/exoplayer/metadata/id3/Id3Parser.java
+++ b/library/src/main/java/com/google/android/exoplayer/metadata/id3/Id3Parser.java
@@ -19,7 +19,6 @@
 import com.google.android.exoplayer.metadata.MetadataParser;
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 import java.util.Arrays;
diff --git a/library/src/main/java/com/google/android/exoplayer/smoothstreaming/DefaultSmoothStreamingTrackSelector.java b/library/src/main/java/com/google/android/exoplayer/smoothstreaming/DefaultSmoothStreamingTrackSelector.java
index 142ef6a646..f8ea412db0 100644
--- a/library/src/main/java/com/google/android/exoplayer/smoothstreaming/DefaultSmoothStreamingTrackSelector.java
+++ b/library/src/main/java/com/google/android/exoplayer/smoothstreaming/DefaultSmoothStreamingTrackSelector.java
@@ -15,13 +15,11 @@
  */
 package com.google.android.exoplayer.smoothstreaming;
 
+import android.content.Context;
 import com.google.android.exoplayer.chunk.VideoFormatSelectorUtil;
 import com.google.android.exoplayer.smoothstreaming.SmoothStreamingManifest.StreamElement;
 import com.google.android.exoplayer.smoothstreaming.SmoothStreamingManifest.TrackElement;
 import com.google.android.exoplayer.util.Util;
-
-import android.content.Context;
-
 import java.io.IOException;
 import java.util.Arrays;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingChunkSource.java b/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingChunkSource.java
index be1051b30a..b2c2ab37f6 100644
--- a/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingChunkSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingChunkSource.java
@@ -15,6 +15,10 @@
  */
 package com.google.android.exoplayer.smoothstreaming;
 
+import android.net.Uri;
+import android.os.SystemClock;
+import android.util.Base64;
+import android.util.SparseArray;
 import com.google.android.exoplayer.BehindLiveWindowException;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.MediaFormat;
@@ -42,12 +46,6 @@
 import com.google.android.exoplayer.util.CodecSpecificDataUtil;
 import com.google.android.exoplayer.util.ManifestFetcher;
 import com.google.android.exoplayer.util.MimeTypes;
-
-import android.net.Uri;
-import android.os.SystemClock;
-import android.util.Base64;
-import android.util.SparseArray;
-
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
diff --git a/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifest.java b/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifest.java
index 568ad2147d..06b030b216 100644
--- a/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifest.java
+++ b/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifest.java
@@ -15,15 +15,13 @@
  */
 package com.google.android.exoplayer.smoothstreaming;
 
+import android.net.Uri;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.chunk.Format;
 import com.google.android.exoplayer.chunk.FormatWrapper;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.UriUtil;
 import com.google.android.exoplayer.util.Util;
-
-import android.net.Uri;
-
 import java.util.List;
 import java.util.UUID;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifestParser.java b/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifestParser.java
index 26f1476ca9..0a281a6ae8 100644
--- a/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifestParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifestParser.java
@@ -15,6 +15,8 @@
  */
 package com.google.android.exoplayer.smoothstreaming;
 
+import android.util.Base64;
+import android.util.Pair;
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.extractor.mp4.PsshAtomUtil;
 import com.google.android.exoplayer.smoothstreaming.SmoothStreamingManifest.ProtectionElement;
@@ -25,20 +27,15 @@
 import com.google.android.exoplayer.util.CodecSpecificDataUtil;
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.Util;
-
-import android.util.Base64;
-import android.util.Pair;
-
-import org.xmlpull.v1.XmlPullParser;
-import org.xmlpull.v1.XmlPullParserException;
-import org.xmlpull.v1.XmlPullParserFactory;
-
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.UUID;
+import org.xmlpull.v1.XmlPullParser;
+import org.xmlpull.v1.XmlPullParserException;
+import org.xmlpull.v1.XmlPullParserFactory;
 
 /**
  * Parses SmoothStreaming client manifests.
diff --git a/library/src/main/java/com/google/android/exoplayer/text/CaptionStyleCompat.java b/library/src/main/java/com/google/android/exoplayer/text/CaptionStyleCompat.java
index 61aca14bba..831a50312d 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/CaptionStyleCompat.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/CaptionStyleCompat.java
@@ -15,13 +15,12 @@
  */
 package com.google.android.exoplayer.text;
 
-import com.google.android.exoplayer.util.Util;
-
 import android.annotation.TargetApi;
 import android.graphics.Color;
 import android.graphics.Typeface;
 import android.view.accessibility.CaptioningManager;
 import android.view.accessibility.CaptioningManager.CaptionStyle;
+import com.google.android.exoplayer.util.Util;
 
 /**
  * A compatibility wrapper for {@link CaptionStyle}.
diff --git a/library/src/main/java/com/google/android/exoplayer/text/CuePainter.java b/library/src/main/java/com/google/android/exoplayer/text/CuePainter.java
index a86edd376a..4a9de1f655 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/CuePainter.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/CuePainter.java
@@ -15,8 +15,6 @@
  */
 package com.google.android.exoplayer.text;
 
-import com.google.android.exoplayer.util.Util;
-
 import android.content.Context;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
@@ -32,6 +30,7 @@
 import android.text.TextUtils;
 import android.util.DisplayMetrics;
 import android.util.Log;
+import com.google.android.exoplayer.util.Util;
 
 /**
  * Draws {@link Cue}s.
@@ -216,6 +215,9 @@ public void draw(Cue cue, boolean applyEmbeddedStyles, CaptionStyleCompat style,
     for (int i = 0; i < lineCount; i++) {
       textWidth = Math.max((int) Math.ceil(textLayout.getLineWidth(i)), textWidth);
     }
+    if (cueSize != Cue.DIMEN_UNSET && textWidth < availableWidth) {
+      textWidth = availableWidth;
+    }
     textWidth += textPaddingX * 2;
 
     int textLeft;
diff --git a/library/src/main/java/com/google/android/exoplayer/text/SubtitleLayout.java b/library/src/main/java/com/google/android/exoplayer/text/SubtitleLayout.java
index 700a72138c..25fe43b6cd 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/SubtitleLayout.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/SubtitleLayout.java
@@ -21,7 +21,6 @@
 import android.util.AttributeSet;
 import android.util.TypedValue;
 import android.view.View;
-
 import java.util.ArrayList;
 import java.util.List;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/text/SubtitleParserHelper.java b/library/src/main/java/com/google/android/exoplayer/text/SubtitleParserHelper.java
index eab6933e9a..d6190850b5 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/SubtitleParserHelper.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/SubtitleParserHelper.java
@@ -15,17 +15,15 @@
  */
 package com.google.android.exoplayer.text;
 
+import android.media.MediaCodec;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.SampleHolder;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.Util;
-
-import android.media.MediaCodec;
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Message;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/text/TextTrackRenderer.java b/library/src/main/java/com/google/android/exoplayer/text/TextTrackRenderer.java
index ee489cb451..2b3648af9b 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/TextTrackRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/TextTrackRenderer.java
@@ -15,6 +15,12 @@
  */
 package com.google.android.exoplayer.text;
 
+import android.annotation.TargetApi;
+import android.os.Handler;
+import android.os.Handler.Callback;
+import android.os.HandlerThread;
+import android.os.Looper;
+import android.os.Message;
 import com.google.android.exoplayer.ExoPlaybackException;
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.MediaFormatHolder;
@@ -23,14 +29,6 @@
 import com.google.android.exoplayer.SampleSourceTrackRenderer;
 import com.google.android.exoplayer.TrackRenderer;
 import com.google.android.exoplayer.util.Assertions;
-
-import android.annotation.TargetApi;
-import android.os.Handler;
-import android.os.Handler.Callback;
-import android.os.HandlerThread;
-import android.os.Looper;
-import android.os.Message;
-
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
diff --git a/library/src/main/java/com/google/android/exoplayer/text/eia608/Eia608Parser.java b/library/src/main/java/com/google/android/exoplayer/text/eia608/Eia608Parser.java
index e47d1dc29f..48f718eb6b 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/eia608/Eia608Parser.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/eia608/Eia608Parser.java
@@ -19,7 +19,6 @@
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.ParsableBitArray;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.util.ArrayList;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/text/eia608/Eia608TrackRenderer.java b/library/src/main/java/com/google/android/exoplayer/text/eia608/Eia608TrackRenderer.java
index 2e42f90be5..090edb0251 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/eia608/Eia608TrackRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/eia608/Eia608TrackRenderer.java
@@ -15,6 +15,10 @@
  */
 package com.google.android.exoplayer.text.eia608;
 
+import android.os.Handler;
+import android.os.Handler.Callback;
+import android.os.Looper;
+import android.os.Message;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.ExoPlaybackException;
 import com.google.android.exoplayer.MediaFormat;
@@ -27,12 +31,6 @@
 import com.google.android.exoplayer.text.TextRenderer;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.Util;
-
-import android.os.Handler;
-import android.os.Handler.Callback;
-import android.os.Looper;
-import android.os.Message;
-
 import java.util.Collections;
 import java.util.TreeSet;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/text/subrip/SubripParser.java b/library/src/main/java/com/google/android/exoplayer/text/subrip/SubripParser.java
index 81de172d13..d4b0ea511e 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/subrip/SubripParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/subrip/SubripParser.java
@@ -15,17 +15,15 @@
  */
 package com.google.android.exoplayer.text.subrip;
 
+import android.text.Html;
+import android.text.Spanned;
+import android.text.TextUtils;
+import android.util.Log;
 import com.google.android.exoplayer.text.Cue;
 import com.google.android.exoplayer.text.SubtitleParser;
 import com.google.android.exoplayer.util.LongArray;
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
-import android.text.Html;
-import android.text.Spanned;
-import android.text.TextUtils;
-import android.util.Log;
-
 import java.util.ArrayList;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
diff --git a/library/src/main/java/com/google/android/exoplayer/text/subrip/SubripSubtitle.java b/library/src/main/java/com/google/android/exoplayer/text/subrip/SubripSubtitle.java
index b10804311b..e8e583f822 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/subrip/SubripSubtitle.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/subrip/SubripSubtitle.java
@@ -19,7 +19,6 @@
 import com.google.android.exoplayer.text.Subtitle;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.Util;
-
 import java.util.Collections;
 import java.util.List;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlColorParser.java b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlColorParser.java
index f402142c2f..56ef99511f 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlColorParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlColorParser.java
@@ -15,11 +15,9 @@
  */
 package com.google.android.exoplayer.text.ttml;
 
+import android.text.TextUtils;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.Util;
-
-import android.text.TextUtils;
-
 import java.util.HashMap;
 import java.util.Map;
 import java.util.regex.Matcher;
diff --git a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlNode.java b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlNode.java
index abf9a4643c..f2236df03d 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlNode.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlNode.java
@@ -15,11 +15,9 @@
  */
 package com.google.android.exoplayer.text.ttml;
 
+import android.text.SpannableStringBuilder;
 import com.google.android.exoplayer.text.Cue;
 import com.google.android.exoplayer.util.Assertions;
-
-import android.text.SpannableStringBuilder;
-
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -180,7 +178,7 @@ private void getEventTimes(TreeSet<Long> out, boolean descendsPNode) {
     List<Cue> cues = new ArrayList<>();
     for (Entry<String, SpannableStringBuilder> entry : regionOutputs.entrySet()) {
       TtmlRegion region = regionMap.get(entry.getKey());
-      cues.add(new Cue(cleanUpText(entry.getValue()), null, region.line, Cue.TYPE_UNSET,
+      cues.add(new Cue(cleanUpText(entry.getValue()), null, region.line, region.lineType,
           Cue.TYPE_UNSET, region.position, Cue.TYPE_UNSET, region.width));
     }
     return cues;
diff --git a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlParser.java b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlParser.java
index 9c72753706..d5b1b316e7 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlParser.java
@@ -1,4 +1,4 @@
-/*arse
+/*
  * Copyright (C) 2014 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -15,6 +15,9 @@
  */
 package com.google.android.exoplayer.text.ttml;
 
+import android.text.Layout;
+import android.util.Log;
+import android.util.Pair;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.text.Cue;
@@ -22,15 +25,6 @@
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.ParserUtil;
 import com.google.android.exoplayer.util.Util;
-
-import android.text.Layout;
-import android.util.Log;
-import android.util.Pair;
-
-import org.xmlpull.v1.XmlPullParser;
-import org.xmlpull.v1.XmlPullParserException;
-import org.xmlpull.v1.XmlPullParserFactory;
-
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.util.HashMap;
@@ -38,6 +32,9 @@
 import java.util.Map;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.xmlpull.v1.XmlPullParser;
+import org.xmlpull.v1.XmlPullParserException;
+import org.xmlpull.v1.XmlPullParserFactory;
 
 /**
  * A simple TTML parser that supports DFXP presentation profile.
@@ -57,13 +54,14 @@
  *   <li>time-offset-with-frames
  *   <li>time-offset-with-ticks
  * </ul>
- * </p>
  * @see <a href="http://www.w3.org/TR/ttaf1-dfxp/">TTML specification</a>
  */
 public final class TtmlParser implements SubtitleParser {
 
   private static final String TAG = "TtmlParser";
 
+  private static final String TTP = "http://www.w3.org/ns/ttml#parameter";
+
   private static final String ATTR_BEGIN = "begin";
   private static final String ATTR_DURATION = "dur";
   private static final String ATTR_END = "end";
@@ -79,10 +77,10 @@
   private static final Pattern PERCENTAGE_COORDINATES =
       Pattern.compile("^(\\d+\\.?\\d*?)% (\\d+\\.?\\d*?)%$");
 
-  // TODO: read and apply the following attributes if specified.
-  private static final int DEFAULT_FRAMERATE = 30;
-  private static final int DEFAULT_SUBFRAMERATE = 1;
-  private static final int DEFAULT_TICKRATE = 1;
+  private static final int DEFAULT_FRAME_RATE = 30;
+
+  private static final FrameAndTickRate DEFAULT_FRAME_AND_TICK_RATE =
+      new FrameAndTickRate(DEFAULT_FRAME_RATE, 1, 1);
 
   private final XmlPullParserFactory xmlParserFactory;
 
@@ -113,11 +111,15 @@ public TtmlSubtitle parse(byte[] bytes, int offset, int length) throws ParserExc
       LinkedList<TtmlNode> nodeStack = new LinkedList<>();
       int unsupportedNodeDepth = 0;
       int eventType = xmlParser.getEventType();
+      FrameAndTickRate frameAndTickRate = DEFAULT_FRAME_AND_TICK_RATE;
       while (eventType != XmlPullParser.END_DOCUMENT) {
         TtmlNode parent = nodeStack.peekLast();
         if (unsupportedNodeDepth == 0) {
           String name = xmlParser.getName();
           if (eventType == XmlPullParser.START_TAG) {
+            if (TtmlNode.TAG_TT.equals(name)) {
+              frameAndTickRate = parseFrameAndTickRates(xmlParser);
+            }
             if (!isSupportedTag(name)) {
               Log.i(TAG, "Ignoring unsupported tag: " + xmlParser.getName());
               unsupportedNodeDepth++;
@@ -125,7 +127,7 @@ public TtmlSubtitle parse(byte[] bytes, int offset, int length) throws ParserExc
               parseHeader(xmlParser, globalStyles, regionMap);
             } else {
               try {
-                TtmlNode node = parseNode(xmlParser, parent, regionMap);
+                TtmlNode node = parseNode(xmlParser, parent, regionMap, frameAndTickRate);
                 nodeStack.addLast(node);
                 if (parent != null) {
                   parent.addChild(node);
@@ -162,6 +164,39 @@ public TtmlSubtitle parse(byte[] bytes, int offset, int length) throws ParserExc
     }
   }
 
+  private FrameAndTickRate parseFrameAndTickRates(XmlPullParser xmlParser) throws ParserException {
+    int frameRate = DEFAULT_FRAME_RATE;
+    String frameRateStr = xmlParser.getAttributeValue(TTP, "frameRate");
+    if (frameRateStr != null) {
+      frameRate = Integer.parseInt(frameRateStr);
+    }
+
+    float frameRateMultiplier = 1;
+    String frameRateMultiplierStr = xmlParser.getAttributeValue(TTP, "frameRateMultiplier");
+    if (frameRateMultiplierStr != null) {
+      String[] parts = frameRateMultiplierStr.split(" ");
+      if (parts.length != 2) {
+        throw new ParserException("frameRateMultiplier doesn't have 2 parts");
+      }
+      float numerator = Integer.parseInt(parts[0]);
+      float denominator = Integer.parseInt(parts[1]);
+      frameRateMultiplier = numerator / denominator;
+    }
+
+    int subFrameRate = DEFAULT_FRAME_AND_TICK_RATE.subFrameRate;
+    String subFrameRateStr = xmlParser.getAttributeValue(TTP, "subFrameRate");
+    if (subFrameRateStr != null) {
+      subFrameRate = Integer.parseInt(subFrameRateStr);
+    }
+
+    int tickRate = DEFAULT_FRAME_AND_TICK_RATE.tickRate;
+    String tickRateStr = xmlParser.getAttributeValue(TTP, "tickRate");
+    if (tickRateStr != null) {
+      tickRate = Integer.parseInt(tickRateStr);
+    }
+    return new FrameAndTickRate(frameRate * frameRateMultiplier, subFrameRate, tickRate);
+  }
+
   private Map<String, TtmlStyle> parseHeader(XmlPullParser xmlParser,
       Map<String, TtmlStyle> globalStyles, Map<String, TtmlRegion> globalRegions)
       throws IOException, XmlPullParserException {
@@ -223,8 +258,8 @@ public TtmlSubtitle parse(byte[] bytes, int offset, int length) throws ParserExc
         }
       }
     }
-    return position != Cue.DIMEN_UNSET ? new Pair<>(regionId, new TtmlRegion(position, line, width))
-        : null;
+    return position != Cue.DIMEN_UNSET ? new Pair<>(regionId, new TtmlRegion(position, line,
+        Cue.LINE_TYPE_FRACTION, width)) : null;
   }
 
   private String[] parseStyleIds(String parentStyleIds) {
@@ -324,7 +359,7 @@ private TtmlStyle createIfNull(TtmlStyle style) {
   }
 
   private TtmlNode parseNode(XmlPullParser parser, TtmlNode parent,
-      Map<String, TtmlRegion> regionMap) throws ParserException {
+      Map<String, TtmlRegion> regionMap, FrameAndTickRate frameAndTickRate) throws ParserException {
     long duration = 0;
     long startTime = TtmlNode.UNDEFINED_TIME;
     long endTime = TtmlNode.UNDEFINED_TIME;
@@ -336,14 +371,11 @@ private TtmlNode parseNode(XmlPullParser parser, TtmlNode parent,
       String attr = parser.getAttributeName(i);
       String value = parser.getAttributeValue(i);
       if (ATTR_BEGIN.equals(attr)) {
-        startTime = parseTimeExpression(value,
-            DEFAULT_FRAMERATE, DEFAULT_SUBFRAMERATE, DEFAULT_TICKRATE);
+        startTime = parseTimeExpression(value, frameAndTickRate);
       } else if (ATTR_END.equals(attr)) {
-        endTime = parseTimeExpression(value,
-            DEFAULT_FRAMERATE, DEFAULT_SUBFRAMERATE, DEFAULT_TICKRATE);
+        endTime = parseTimeExpression(value, frameAndTickRate);
       } else if (ATTR_DURATION.equals(attr)) {
-        duration = parseTimeExpression(value,
-            DEFAULT_FRAMERATE, DEFAULT_SUBFRAMERATE, DEFAULT_TICKRATE);
+        duration = parseTimeExpression(value, frameAndTickRate);
       } else if (ATTR_STYLE.equals(attr)) {
         // IDREFS: potentially multiple space delimited ids
         String[] ids = parseStyleIds(value);
@@ -441,14 +473,12 @@ private static void parseFontSize(String expression, TtmlStyle out) throws Parse
    * <a href="http://www.w3.org/TR/ttaf1-dfxp/#timing-value-timeExpression">timeExpression</a>
    *
    * @param time A string that includes the time expression.
-   * @param frameRate The frame rate of the stream.
-   * @param subframeRate The sub-frame rate of the stream
-   * @param tickRate The tick rate of the stream.
+   * @param frameAndTickRate The effective frame and tick rates of the stream.
    * @return The parsed timestamp in microseconds.
    * @throws ParserException If the given string does not contain a valid time expression.
    */
-  private static long parseTimeExpression(String time, int frameRate, int subframeRate,
-      int tickRate) throws ParserException {
+  private static long parseTimeExpression(String time, FrameAndTickRate frameAndTickRate)
+      throws ParserException {
     Matcher matcher = CLOCK_TIME.matcher(time);
     if (matcher.matches()) {
       String hours = matcher.group(1);
@@ -460,10 +490,13 @@ private static long parseTimeExpression(String time, int frameRate, int subframe
       String fraction = matcher.group(4);
       durationSeconds += (fraction != null) ? Double.parseDouble(fraction) : 0;
       String frames = matcher.group(5);
-      durationSeconds += (frames != null) ? ((double) Long.parseLong(frames)) / frameRate : 0;
+      durationSeconds += (frames != null)
+          ? Long.parseLong(frames) / frameAndTickRate.effectiveFrameRate : 0;
       String subframes = matcher.group(6);
-      durationSeconds += (subframes != null) ?
-          ((double) Long.parseLong(subframes)) / subframeRate / frameRate : 0;
+      durationSeconds += (subframes != null)
+          ? ((double) Long.parseLong(subframes)) / frameAndTickRate.subFrameRate
+              / frameAndTickRate.effectiveFrameRate
+          : 0;
       return (long) (durationSeconds * C.MICROS_PER_SECOND);
     }
     matcher = OFFSET_TIME.matcher(time);
@@ -480,13 +513,24 @@ private static long parseTimeExpression(String time, int frameRate, int subframe
       } else if (unit.equals("ms")) {
         offsetSeconds /= 1000;
       } else if (unit.equals("f")) {
-        offsetSeconds /= frameRate;
+        offsetSeconds /= frameAndTickRate.effectiveFrameRate;
       } else if (unit.equals("t")) {
-        offsetSeconds /= tickRate;
+        offsetSeconds /= frameAndTickRate.tickRate;
       }
       return (long) (offsetSeconds * C.MICROS_PER_SECOND);
     }
     throw new ParserException("Malformed time expression: " + time);
   }
 
+  private static final class FrameAndTickRate {
+    final float effectiveFrameRate;
+    final int subFrameRate;
+    final int tickRate;
+
+    FrameAndTickRate(float effectiveFrameRate, int subFrameRate, int tickRate) {
+      this.effectiveFrameRate = effectiveFrameRate;
+      this.subFrameRate = subFrameRate;
+      this.tickRate = tickRate;
+    }
+  }
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRegion.java b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRegion.java
index 135018a861..a3ea9790a1 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRegion.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRegion.java
@@ -24,15 +24,17 @@
 
   public final float position;
   public final float line;
+  public final int lineType;
   public final float width;
 
   public TtmlRegion() {
-    this(Cue.DIMEN_UNSET, Cue.DIMEN_UNSET, Cue.DIMEN_UNSET);
+    this(Cue.DIMEN_UNSET, Cue.DIMEN_UNSET, Cue.TYPE_UNSET, Cue.DIMEN_UNSET);
   }
 
-  public TtmlRegion(float position, float line, float width) {
+  public TtmlRegion(float position, float line, int lineType, float width) {
     this.position = position;
     this.line = line;
+    this.lineType = lineType;
     this.width = width;
   }
 
diff --git a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRenderUtil.java b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRenderUtil.java
index a8c69d8ac2..32f85796fc 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRenderUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRenderUtil.java
@@ -27,7 +27,6 @@
 import android.text.style.StyleSpan;
 import android.text.style.TypefaceSpan;
 import android.text.style.UnderlineSpan;
-
 import java.util.Map;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlStyle.java b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlStyle.java
index c8a40f4405..497761168c 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlStyle.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlStyle.java
@@ -15,10 +15,9 @@
  */
 package com.google.android.exoplayer.text.ttml;
 
-import com.google.android.exoplayer.util.Assertions;
-
 import android.graphics.Typeface;
 import android.text.Layout;
+import com.google.android.exoplayer.util.Assertions;
 
 /**
  * Style object of a <code>TtmlNode</code>
diff --git a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlSubtitle.java b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlSubtitle.java
index e54bd8b52e..de4aaa9197 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlSubtitle.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlSubtitle.java
@@ -18,7 +18,6 @@
 import com.google.android.exoplayer.text.Cue;
 import com.google.android.exoplayer.text.Subtitle;
 import com.google.android.exoplayer.util.Util;
-
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
diff --git a/library/src/main/java/com/google/android/exoplayer/text/tx3g/Tx3gParser.java b/library/src/main/java/com/google/android/exoplayer/text/tx3g/Tx3gParser.java
index 8851d5e057..eab5b61064 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/tx3g/Tx3gParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/tx3g/Tx3gParser.java
@@ -19,6 +19,7 @@
 import com.google.android.exoplayer.text.Subtitle;
 import com.google.android.exoplayer.text.SubtitleParser;
 import com.google.android.exoplayer.util.MimeTypes;
+import com.google.android.exoplayer.util.ParsableByteArray;
 
 /**
  * A {@link SubtitleParser} for tx3g.
@@ -27,6 +28,12 @@
  */
 public final class Tx3gParser implements SubtitleParser {
 
+  private final ParsableByteArray parsableByteArray;
+
+  public Tx3gParser() {
+    parsableByteArray = new ParsableByteArray();
+  }
+
   @Override
   public boolean canParse(String mimeType) {
     return MimeTypes.APPLICATION_TX3G.equals(mimeType);
@@ -34,7 +41,12 @@ public boolean canParse(String mimeType) {
 
   @Override
   public Subtitle parse(byte[] bytes, int offset, int length) {
-    String cueText = new String(bytes, offset, length);
+    parsableByteArray.reset(bytes, length);
+    int textLength = parsableByteArray.readUnsignedShort();
+    if (textLength == 0) {
+      return Tx3gSubtitle.EMPTY;
+    }
+    String cueText = parsableByteArray.readString(textLength);
     return new Tx3gSubtitle(new Cue(cueText));
   }
 
diff --git a/library/src/main/java/com/google/android/exoplayer/text/tx3g/Tx3gSubtitle.java b/library/src/main/java/com/google/android/exoplayer/text/tx3g/Tx3gSubtitle.java
index d3ff90fcda..6f86a304d1 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/tx3g/Tx3gSubtitle.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/tx3g/Tx3gSubtitle.java
@@ -18,7 +18,6 @@
 import com.google.android.exoplayer.text.Cue;
 import com.google.android.exoplayer.text.Subtitle;
 import com.google.android.exoplayer.util.Assertions;
-
 import java.util.Collections;
 import java.util.List;
 
@@ -27,12 +26,18 @@
  */
 /* package */ final class Tx3gSubtitle implements Subtitle {
 
+  public static final Tx3gSubtitle EMPTY = new Tx3gSubtitle();
+
   private final List<Cue> cues;
 
   public Tx3gSubtitle(Cue cue) {
     this.cues = Collections.singletonList(cue);
   }
 
+  private Tx3gSubtitle() {
+    this.cues = Collections.emptyList();
+  }
+
   @Override
   public int getNextEventTimeIndex(long timeUs) {
     return timeUs < 0 ? 0 : -1;
diff --git a/library/src/main/java/com/google/android/exoplayer/text/webvtt/Mp4WebvttParser.java b/library/src/main/java/com/google/android/exoplayer/text/webvtt/Mp4WebvttParser.java
index 41533d9df6..b6ef2b71df 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/webvtt/Mp4WebvttParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/webvtt/Mp4WebvttParser.java
@@ -21,7 +21,6 @@
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.ParsableByteArray;
 import com.google.android.exoplayer.util.Util;
-
 import java.util.ArrayList;
 import java.util.List;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/text/webvtt/Mp4WebvttSubtitle.java b/library/src/main/java/com/google/android/exoplayer/text/webvtt/Mp4WebvttSubtitle.java
index 474abafbc1..5c80bf140a 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/webvtt/Mp4WebvttSubtitle.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/webvtt/Mp4WebvttSubtitle.java
@@ -18,7 +18,6 @@
 import com.google.android.exoplayer.text.Cue;
 import com.google.android.exoplayer.text.Subtitle;
 import com.google.android.exoplayer.util.Assertions;
-
 import java.util.Collections;
 import java.util.List;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttCue.java b/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttCue.java
index 95113cfb34..70217b294f 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttCue.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttCue.java
@@ -15,10 +15,9 @@
  */
 package com.google.android.exoplayer.text.webvtt;
 
-import com.google.android.exoplayer.text.Cue;
-
 import android.text.Layout.Alignment;
 import android.util.Log;
+import com.google.android.exoplayer.text.Cue;
 
 /**
  * A representation of a WebVTT cue.
diff --git a/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttCueParser.java b/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttCueParser.java
index e681dd32e4..fbbfa6fc74 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttCueParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttCueParser.java
@@ -15,9 +15,6 @@
  */
 package com.google.android.exoplayer.text.webvtt;
 
-import com.google.android.exoplayer.text.Cue;
-import com.google.android.exoplayer.util.ParsableByteArray;
-
 import android.graphics.Typeface;
 import android.text.Layout.Alignment;
 import android.text.SpannableStringBuilder;
@@ -25,7 +22,8 @@
 import android.text.style.StyleSpan;
 import android.text.style.UnderlineSpan;
 import android.util.Log;
-
+import com.google.android.exoplayer.text.Cue;
+import com.google.android.exoplayer.util.ParsableByteArray;
 import java.util.Stack;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
diff --git a/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttParser.java b/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttParser.java
index 3484259724..e498f4e41c 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttParser.java
@@ -15,13 +15,11 @@
  */
 package com.google.android.exoplayer.text.webvtt;
 
+import android.text.TextUtils;
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.text.SubtitleParser;
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
-import android.text.TextUtils;
-
 import java.util.ArrayList;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttParserUtil.java b/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttParserUtil.java
index 4c1a90531a..84ae2cdbe8 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttParserUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttParserUtil.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.util.ParsableByteArray;
-
 import java.util.regex.Pattern;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttSubtitle.java b/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttSubtitle.java
index 309ca1d535..514450321e 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttSubtitle.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/webvtt/WebvttSubtitle.java
@@ -15,13 +15,11 @@
  */
 package com.google.android.exoplayer.text.webvtt;
 
+import android.text.SpannableStringBuilder;
 import com.google.android.exoplayer.text.Cue;
 import com.google.android.exoplayer.text.Subtitle;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.Util;
-
-import android.text.SpannableStringBuilder;
-
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/Allocator.java b/library/src/main/java/com/google/android/exoplayer/upstream/Allocator.java
index db575441b6..dbfae85e44 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/Allocator.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/Allocator.java
@@ -37,6 +37,13 @@
    */
   void release(Allocation allocation);
 
+  /**
+   * Return an array of {@link Allocation}s.
+   *
+   * @param allocations The array of {@link Allocation}s being returned.
+   */
+  void release(Allocation[] allocations);
+
   /**
    * Hints to the {@link Allocator} that it should make a best effort to release any memory that it
    * has allocated, beyond the specified target number of bytes.
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/AssetDataSource.java b/library/src/main/java/com/google/android/exoplayer/upstream/AssetDataSource.java
index 254a7574eb..62bb08537f 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/AssetDataSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/AssetDataSource.java
@@ -15,11 +15,9 @@
  */
 package com.google.android.exoplayer.upstream;
 
-import com.google.android.exoplayer.C;
-
 import android.content.Context;
 import android.content.res.AssetManager;
-
+import com.google.android.exoplayer.C;
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/ByteArrayDataSink.java b/library/src/main/java/com/google/android/exoplayer/upstream/ByteArrayDataSink.java
index aaa8a1c186..f6d8248098 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/ByteArrayDataSink.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/ByteArrayDataSink.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.util.Assertions;
-
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/ByteArrayDataSource.java b/library/src/main/java/com/google/android/exoplayer/upstream/ByteArrayDataSource.java
index e16b3a7ccc..9feae72a4e 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/ByteArrayDataSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/ByteArrayDataSource.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.util.Assertions;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/ContentDataSource.java b/library/src/main/java/com/google/android/exoplayer/upstream/ContentDataSource.java
index 8158312f24..64de7b4aef 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/ContentDataSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/ContentDataSource.java
@@ -15,12 +15,10 @@
  */
 package com.google.android.exoplayer.upstream;
 
-import com.google.android.exoplayer.C;
-
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.res.AssetFileDescriptor;
-
+import com.google.android.exoplayer.C;
 import java.io.EOFException;
 import java.io.FileInputStream;
 import java.io.IOException;
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/DataSource.java b/library/src/main/java/com/google/android/exoplayer/upstream/DataSource.java
index 002fda19ea..6e5697ee58 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/DataSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/DataSource.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.upstream;
 
 import com.google.android.exoplayer.C;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/DataSourceInputStream.java b/library/src/main/java/com/google/android/exoplayer/upstream/DataSourceInputStream.java
index ff3d0b7b8e..7af60f0fd8 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/DataSourceInputStream.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/DataSourceInputStream.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.upstream;
 
 import com.google.android.exoplayer.util.Assertions;
-
 import java.io.IOException;
 import java.io.InputStream;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/DataSpec.java b/library/src/main/java/com/google/android/exoplayer/upstream/DataSpec.java
index 618605c2c8..acfdaab9d2 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/DataSpec.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/DataSpec.java
@@ -15,11 +15,9 @@
  */
 package com.google.android.exoplayer.upstream;
 
+import android.net.Uri;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.util.Assertions;
-
-import android.net.Uri;
-
 import java.util.Arrays;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/DefaultAllocator.java b/library/src/main/java/com/google/android/exoplayer/upstream/DefaultAllocator.java
index 2327e909f1..c8af75a1e8 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/DefaultAllocator.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/DefaultAllocator.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.Util;
-
 import java.util.Arrays;
 
 /**
@@ -95,6 +94,25 @@ public synchronized void release(Allocation allocation) {
     notifyAll();
   }
 
+  @Override
+  public synchronized void release(Allocation[] allocations) {
+    if (availableCount + allocations.length >= availableAllocations.length) {
+      availableAllocations = Arrays.copyOf(
+          availableAllocations, Math.max(
+              availableAllocations.length * 2,
+              availableCount + allocations.length));
+    }
+    for (Allocation allocation : allocations) {
+      // Weak sanity check that the allocation probably originated from this pool.
+      Assertions.checkArgument(allocation.data == initialAllocationBlock
+          || allocation.data.length == individualAllocationSize);
+      availableAllocations[availableCount++] = allocation;
+    }
+    allocatedCount -= allocations.length;
+    // Wake up threads waiting for the allocated size to drop.
+    notifyAll();
+  }
+
   @Override
   public synchronized void trim(int targetSize) {
     int targetAllocationCount = Util.ceilDivide(targetSize, individualAllocationSize);
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/DefaultBandwidthMeter.java b/library/src/main/java/com/google/android/exoplayer/upstream/DefaultBandwidthMeter.java
index ba2297341b..bab1408704 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/DefaultBandwidthMeter.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/DefaultBandwidthMeter.java
@@ -15,13 +15,12 @@
  */
 package com.google.android.exoplayer.upstream;
 
+import android.os.Handler;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.Clock;
 import com.google.android.exoplayer.util.SlidingPercentile;
 import com.google.android.exoplayer.util.SystemClock;
 
-import android.os.Handler;
-
 /**
  * Counts transferred bytes while transfers are open and creates a bandwidth sample and updated
  * bandwidth estimate each time a transfer ends.
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/DefaultHttpDataSource.java b/library/src/main/java/com/google/android/exoplayer/upstream/DefaultHttpDataSource.java
index 6c3fe9a6e2..5c63b0a402 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/DefaultHttpDataSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/DefaultHttpDataSource.java
@@ -15,14 +15,12 @@
  */
 package com.google.android.exoplayer.upstream;
 
+import android.text.TextUtils;
+import android.util.Log;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.Predicate;
 import com.google.android.exoplayer.util.Util;
-
-import android.text.TextUtils;
-import android.util.Log;
-
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/DefaultUriDataSource.java b/library/src/main/java/com/google/android/exoplayer/upstream/DefaultUriDataSource.java
index 018e1a5823..82f5ee12b9 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/DefaultUriDataSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/DefaultUriDataSource.java
@@ -15,11 +15,9 @@
  */
 package com.google.android.exoplayer.upstream;
 
+import android.content.Context;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.Util;
-
-import android.content.Context;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/FileDataSource.java b/library/src/main/java/com/google/android/exoplayer/upstream/FileDataSource.java
index 784914a7ef..4a2cc89850 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/FileDataSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/FileDataSource.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.upstream;
 
 import com.google.android.exoplayer.C;
-
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.RandomAccessFile;
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/HttpDataSource.java b/library/src/main/java/com/google/android/exoplayer/upstream/HttpDataSource.java
index c1e2337ce6..e042ea9af3 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/HttpDataSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/HttpDataSource.java
@@ -15,11 +15,9 @@
  */
 package com.google.android.exoplayer.upstream;
 
+import android.text.TextUtils;
 import com.google.android.exoplayer.util.Predicate;
 import com.google.android.exoplayer.util.Util;
-
-import android.text.TextUtils;
-
 import java.io.IOException;
 import java.util.List;
 import java.util.Map;
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/Loader.java b/library/src/main/java/com/google/android/exoplayer/upstream/Loader.java
index 24d8b78c62..d7f105d720 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/Loader.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/Loader.java
@@ -15,16 +15,14 @@
  */
 package com.google.android.exoplayer.upstream;
 
-import com.google.android.exoplayer.util.Assertions;
-import com.google.android.exoplayer.util.TraceUtil;
-import com.google.android.exoplayer.util.Util;
-
 import android.annotation.SuppressLint;
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
 import android.util.Log;
-
+import com.google.android.exoplayer.util.Assertions;
+import com.google.android.exoplayer.util.TraceUtil;
+import com.google.android.exoplayer.util.Util;
 import java.io.IOException;
 import java.util.concurrent.ExecutorService;
 
@@ -171,9 +169,24 @@ public void cancelLoading() {
    * This method should be called when the {@link Loader} is no longer required.
    */
   public void release() {
+    release(null);
+  }
+
+  /**
+   * Releases the {@link Loader}, running {@code postLoadAction} on its thread.
+   * <p>
+   * This method should be called when the {@link Loader} is no longer required.
+   *
+   * @param postLoadAction A {@link Runnable} to run on the loader's thread when
+   *     {@link Loadable#load()} is no longer running.
+   */
+  public void release(Runnable postLoadAction) {
     if (loading) {
       cancelLoading();
     }
+    if (postLoadAction != null) {
+      downloadExecutorService.submit(postLoadAction);
+    }
     downloadExecutorService.shutdown();
   }
 
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/PriorityDataSource.java b/library/src/main/java/com/google/android/exoplayer/upstream/PriorityDataSource.java
index 19a2b224de..cd62279f24 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/PriorityDataSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/PriorityDataSource.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.upstream;
 
 import com.google.android.exoplayer.util.Assertions;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/TeeDataSource.java b/library/src/main/java/com/google/android/exoplayer/upstream/TeeDataSource.java
index 2623e8ce7f..60c4e21726 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/TeeDataSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/TeeDataSource.java
@@ -17,7 +17,6 @@
 
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.util.Assertions;
-
 import java.io.IOException;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/UdpDataSource.java b/library/src/main/java/com/google/android/exoplayer/upstream/UdpDataSource.java
index 4dc4a68398..9f91d7cf3c 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/UdpDataSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/UdpDataSource.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.upstream;
 
 import com.google.android.exoplayer.C;
-
 import java.io.IOException;
 import java.net.DatagramPacket;
 import java.net.DatagramSocket;
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/UriLoadable.java b/library/src/main/java/com/google/android/exoplayer/upstream/UriLoadable.java
index cce6f9347e..78e92f88ce 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/UriLoadable.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/UriLoadable.java
@@ -15,11 +15,9 @@
  */
 package com.google.android.exoplayer.upstream;
 
+import android.net.Uri;
 import com.google.android.exoplayer.ParserException;
 import com.google.android.exoplayer.upstream.Loader.Loadable;
-
-import android.net.Uri;
-
 import java.io.IOException;
 import java.io.InputStream;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/cache/CacheDataSink.java b/library/src/main/java/com/google/android/exoplayer/upstream/cache/CacheDataSink.java
index 5ed4efcf2e..1cf517ca24 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/cache/CacheDataSink.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/cache/CacheDataSink.java
@@ -20,7 +20,6 @@
 import com.google.android.exoplayer.upstream.DataSpec;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.Util;
-
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/cache/CacheDataSource.java b/library/src/main/java/com/google/android/exoplayer/upstream/cache/CacheDataSource.java
index fb638ea462..0887c90740 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/cache/CacheDataSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/cache/CacheDataSource.java
@@ -15,6 +15,8 @@
  */
 package com.google.android.exoplayer.upstream.cache;
 
+import android.net.Uri;
+import android.util.Log;
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.upstream.DataSink;
 import com.google.android.exoplayer.upstream.DataSource;
@@ -22,10 +24,6 @@
 import com.google.android.exoplayer.upstream.FileDataSource;
 import com.google.android.exoplayer.upstream.TeeDataSource;
 import com.google.android.exoplayer.upstream.cache.CacheDataSink.CacheDataSinkException;
-
-import android.net.Uri;
-import android.util.Log;
-
 import java.io.IOException;
 import java.io.InterruptedIOException;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/cache/CacheSpan.java b/library/src/main/java/com/google/android/exoplayer/upstream/cache/CacheSpan.java
index 37d620c38b..d2973f0db7 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/cache/CacheSpan.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/cache/CacheSpan.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.upstream.cache;
 
 import com.google.android.exoplayer.util.Util;
-
 import java.io.File;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
diff --git a/library/src/main/java/com/google/android/exoplayer/upstream/cache/SimpleCache.java b/library/src/main/java/com/google/android/exoplayer/upstream/cache/SimpleCache.java
index eff50a7bf0..0c0f4b0cc5 100644
--- a/library/src/main/java/com/google/android/exoplayer/upstream/cache/SimpleCache.java
+++ b/library/src/main/java/com/google/android/exoplayer/upstream/cache/SimpleCache.java
@@ -15,10 +15,8 @@
  */
 package com.google.android.exoplayer.upstream.cache;
 
-import com.google.android.exoplayer.util.Assertions;
-
 import android.os.ConditionVariable;
-
+import com.google.android.exoplayer.util.Assertions;
 import java.io.File;
 import java.util.ArrayList;
 import java.util.HashMap;
diff --git a/library/src/main/java/com/google/android/exoplayer/util/Ac3Util.java b/library/src/main/java/com/google/android/exoplayer/util/Ac3Util.java
index c65e8b3ffc..3c27bc031b 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/Ac3Util.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/Ac3Util.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.util;
 
 import com.google.android.exoplayer.MediaFormat;
-
 import java.nio.ByteBuffer;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/util/Assertions.java b/library/src/main/java/com/google/android/exoplayer/util/Assertions.java
index 90a7162c12..5382411cea 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/Assertions.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/Assertions.java
@@ -15,10 +15,9 @@
  */
 package com.google.android.exoplayer.util;
 
-import com.google.android.exoplayer.ExoPlayerLibraryInfo;
-
 import android.os.Looper;
 import android.text.TextUtils;
+import com.google.android.exoplayer.ExoPlayerLibraryInfo;
 
 /**
  * Provides methods for asserting the truth of expressions and properties.
diff --git a/library/src/main/java/com/google/android/exoplayer/util/CodecSpecificDataUtil.java b/library/src/main/java/com/google/android/exoplayer/util/CodecSpecificDataUtil.java
index 6ba16f0ee1..84a27e8f18 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/CodecSpecificDataUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/CodecSpecificDataUtil.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.util;
 
 import android.util.Pair;
-
 import java.util.ArrayList;
 import java.util.List;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/util/DebugTextViewHelper.java b/library/src/main/java/com/google/android/exoplayer/util/DebugTextViewHelper.java
index 134b40e744..f3260a95a8 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/DebugTextViewHelper.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/DebugTextViewHelper.java
@@ -15,12 +15,11 @@
  */
 package com.google.android.exoplayer.util;
 
+import android.widget.TextView;
 import com.google.android.exoplayer.CodecCounters;
 import com.google.android.exoplayer.chunk.Format;
 import com.google.android.exoplayer.upstream.BandwidthMeter;
 
-import android.widget.TextView;
-
 /**
  * A helper class for periodically updating debug information displayed by a {@link TextView}.
  */
diff --git a/library/src/main/java/com/google/android/exoplayer/util/DtsUtil.java b/library/src/main/java/com/google/android/exoplayer/util/DtsUtil.java
index 5fa6e3e6e4..fcc8e5fea0 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/DtsUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/DtsUtil.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.util;
 
 import com.google.android.exoplayer.MediaFormat;
-
 import java.nio.ByteBuffer;
 
 /**
diff --git a/library/src/main/java/com/google/android/exoplayer/util/ManifestFetcher.java b/library/src/main/java/com/google/android/exoplayer/util/ManifestFetcher.java
index c34e0c4f8e..dd6b54b016 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/ManifestFetcher.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/ManifestFetcher.java
@@ -15,17 +15,15 @@
  */
 package com.google.android.exoplayer.util;
 
-import com.google.android.exoplayer.upstream.Loader;
-import com.google.android.exoplayer.upstream.Loader.Loadable;
-import com.google.android.exoplayer.upstream.UriDataSource;
-import com.google.android.exoplayer.upstream.UriLoadable;
-
 import android.os.Handler;
 import android.os.Looper;
 import android.os.SystemClock;
 import android.text.TextUtils;
 import android.util.Pair;
-
+import com.google.android.exoplayer.upstream.Loader;
+import com.google.android.exoplayer.upstream.Loader.Loadable;
+import com.google.android.exoplayer.upstream.UriDataSource;
+import com.google.android.exoplayer.upstream.UriLoadable;
 import java.io.IOException;
 import java.util.concurrent.CancellationException;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/util/NalUnitUtil.java b/library/src/main/java/com/google/android/exoplayer/util/NalUnitUtil.java
index 00a9f27ade..b1157725a6 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/NalUnitUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/NalUnitUtil.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.util;
 
 import android.util.Log;
-
 import java.nio.ByteBuffer;
 import java.util.Arrays;
 
diff --git a/library/src/main/java/com/google/android/exoplayer/util/PlayerControl.java b/library/src/main/java/com/google/android/exoplayer/util/PlayerControl.java
index b9c4899de2..5ca57845fa 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/PlayerControl.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/PlayerControl.java
@@ -15,9 +15,8 @@
  */
 package com.google.android.exoplayer.util;
 
-import com.google.android.exoplayer.ExoPlayer;
-
 import android.widget.MediaController.MediaPlayerControl;
+import com.google.android.exoplayer.ExoPlayer;
 
 /**
  * An implementation of {@link MediaPlayerControl} for controlling an {@link ExoPlayer} instance.
diff --git a/library/src/main/java/com/google/android/exoplayer/util/TraceUtil.java b/library/src/main/java/com/google/android/exoplayer/util/TraceUtil.java
index 3cd305bfe7..2762fbeec5 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/TraceUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/TraceUtil.java
@@ -15,9 +15,8 @@
  */
 package com.google.android.exoplayer.util;
 
-import com.google.android.exoplayer.ExoPlayerLibraryInfo;
-
 import android.annotation.TargetApi;
+import com.google.android.exoplayer.ExoPlayerLibraryInfo;
 
 /**
  * Calls through to {@link android.os.Trace} methods on supported API levels.
diff --git a/library/src/main/java/com/google/android/exoplayer/util/Util.java b/library/src/main/java/com/google/android/exoplayer/util/Util.java
index 08c1118aa3..f2ec738701 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/Util.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/Util.java
@@ -15,11 +15,6 @@
  */
 package com.google.android.exoplayer.util;
 
-import com.google.android.exoplayer.C;
-import com.google.android.exoplayer.ExoPlayerLibraryInfo;
-import com.google.android.exoplayer.upstream.DataSource;
-import com.google.android.exoplayer.upstream.DataSpec;
-
 import android.annotation.SuppressLint;
 import android.content.Context;
 import android.content.pm.PackageInfo;
@@ -28,7 +23,10 @@
 import android.net.Uri;
 import android.os.Build;
 import android.text.TextUtils;
-
+import com.google.android.exoplayer.C;
+import com.google.android.exoplayer.ExoPlayerLibraryInfo;
+import com.google.android.exoplayer.upstream.DataSource;
+import com.google.android.exoplayer.upstream.DataSpec;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -818,8 +816,8 @@ public static int inferContentType(String fileName) {
    * filesystems. FAT32 is the most restrictive of all filesystems still commonly used today.
    *
    * <p>For simplicity, this only handles common characters known to be illegal on FAT32:
-   * <, >, :, ", /, \, |, ?, and *. % is also escaped since it is used as the escape character.
-   * Escaping is performed in a consistent way so that no collisions occur and
+   * &lt;, &gt;, :, ", /, \, |, ?, and *. % is also escaped since it is used as the escape
+   * character. Escaping is performed in a consistent way so that no collisions occur and
    * {@link #unescapeFileName(String)} can be used to retrieve the original file name.
    *
    * @param fileName File name to be escaped.
diff --git a/library/src/main/java/com/google/android/exoplayer/util/extensions/SimpleDecoder.java b/library/src/main/java/com/google/android/exoplayer/util/extensions/SimpleDecoder.java
index 883398c707..a0ea54ca81 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/extensions/SimpleDecoder.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/extensions/SimpleDecoder.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.util.extensions;
 
 import com.google.android.exoplayer.util.Assertions;
-
 import java.util.LinkedList;
 
 /**
diff --git a/library/src/main/javadoc/com/google/android/exoplayer/doc-files/exoplayer-playbackstate.png b/library/src/main/javadoc/com/google/android/exoplayer/doc-files/exoplayer-playbackstate.png
new file mode 100644
index 0000000000..fb0ba72a60
Binary files /dev/null and b/library/src/main/javadoc/com/google/android/exoplayer/doc-files/exoplayer-playbackstate.png differ
diff --git a/library/src/main/javadoc/com/google/android/exoplayer/doc-files/exoplayer-state.png b/library/src/main/javadoc/com/google/android/exoplayer/doc-files/exoplayer-state.png
new file mode 100644
index 0000000000..d37a51e23a
Binary files /dev/null and b/library/src/main/javadoc/com/google/android/exoplayer/doc-files/exoplayer-state.png differ
diff --git a/library/src/main/javadoc/com/google/android/exoplayer/doc-files/exoplayer-threading-model.png b/library/src/main/javadoc/com/google/android/exoplayer/doc-files/exoplayer-threading-model.png
new file mode 100644
index 0000000000..9f0306c111
Binary files /dev/null and b/library/src/main/javadoc/com/google/android/exoplayer/doc-files/exoplayer-threading-model.png differ
diff --git a/library/src/main/javadoc/com/google/android/exoplayer/doc-files/trackrenderer-states.png b/library/src/main/javadoc/com/google/android/exoplayer/doc-files/trackrenderer-states.png
new file mode 100644
index 0000000000..604a447a6a
Binary files /dev/null and b/library/src/main/javadoc/com/google/android/exoplayer/doc-files/trackrenderer-states.png differ
diff --git a/playbacktests/src/main/AndroidManifest.xml b/playbacktests/src/main/AndroidManifest.xml
index 43102af605..abd26bacf4 100644
--- a/playbacktests/src/main/AndroidManifest.xml
+++ b/playbacktests/src/main/AndroidManifest.xml
@@ -17,8 +17,8 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools"
     package="com.google.android.exoplayer.playbacktests"
-    android:versionCode="1509"
-    android:versionName="1.5.9">
+    android:versionCode="1510"
+    android:versionName="1.5.10">
 
   <uses-permission android:name="android.permission.INTERNET"/>
   <uses-permission android:name="android.permission.WAKE_LOCK"/>
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/gts/DashTest.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/gts/DashTest.java
index f855a0ee2b..bb6b3b7503 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/gts/DashTest.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/gts/DashTest.java
@@ -15,6 +15,14 @@
  */
 package com.google.android.exoplayer.playbacktests.gts;
 
+import android.annotation.TargetApi;
+import android.media.MediaCodec;
+import android.media.MediaDrm;
+import android.media.UnsupportedSchemeException;
+import android.os.Handler;
+import android.test.ActivityInstrumentationTestCase2;
+import android.util.Log;
+import android.view.Surface;
 import com.google.android.exoplayer.CodecCounters;
 import com.google.android.exoplayer.DefaultLoadControl;
 import com.google.android.exoplayer.ExoPlayer;
@@ -34,6 +42,9 @@
 import com.google.android.exoplayer.dash.mpd.MediaPresentationDescriptionParser;
 import com.google.android.exoplayer.dash.mpd.Period;
 import com.google.android.exoplayer.dash.mpd.Representation;
+import com.google.android.exoplayer.drm.FrameworkMediaCrypto;
+import com.google.android.exoplayer.drm.StreamingDrmSessionManager;
+import com.google.android.exoplayer.drm.UnsupportedDrmException;
 import com.google.android.exoplayer.playbacktests.util.ActionSchedule;
 import com.google.android.exoplayer.playbacktests.util.CodecCountersUtil;
 import com.google.android.exoplayer.playbacktests.util.DebugMediaCodecVideoTrackRenderer;
@@ -42,25 +53,18 @@
 import com.google.android.exoplayer.playbacktests.util.LogcatLogger;
 import com.google.android.exoplayer.playbacktests.util.MetricsLogger;
 import com.google.android.exoplayer.playbacktests.util.TestUtil;
+import com.google.android.exoplayer.playbacktests.util.WidevineMediaDrmCallback;
 import com.google.android.exoplayer.upstream.DataSource;
 import com.google.android.exoplayer.upstream.DefaultAllocator;
 import com.google.android.exoplayer.upstream.DefaultUriDataSource;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.Util;
-
-import android.annotation.TargetApi;
-import android.media.MediaCodec;
-import android.os.Handler;
-import android.test.ActivityInstrumentationTestCase2;
-import android.util.Log;
-import android.view.Surface;
-
-import junit.framework.AssertionFailedError;
-
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.UUID;
+import junit.framework.AssertionFailedError;
 
 /**
  * Tests DASH playbacks using {@link ExoPlayer}.
@@ -69,6 +73,7 @@
 
   private static final String TAG = "DashTest";
   private static final String REPORT_NAME = "GtsExoPlayerTestCases";
+  private static final String REPORT_OBJECT_NAME = "playbacktest";
 
   private static final long MAX_PLAYING_TIME_DISCREPANCY_MS = 2000;
   private static final float MAX_DROPPED_VIDEO_FRAME_FRACTION = 0.01f;
@@ -79,12 +84,20 @@
 
   private static final String MANIFEST_URL_PREFIX = "https://storage.googleapis.com/exoplayer-test-"
       + "media-1/gen-3/screens/dash-vod-single-segment/";
+  // Clear content manifests.
   private static final String H264_MANIFEST = "manifest-h264.mpd";
   private static final String H265_MANIFEST = "manifest-h265.mpd";
   private static final String VP9_MANIFEST = "manifest-vp9.mpd";
   private static final String H264_23_MANIFEST = "manifest-h264-23.mpd";
   private static final String H264_24_MANIFEST = "manifest-h264-24.mpd";
   private static final String H264_29_MANIFEST = "manifest-h264-29.mpd";
+  // Widevine encrypted content manifests.
+  private static final String WIDEVINE_H264_MANIFEST = "manifest-h264-enc.mpd";
+  private static final String WIDEVINE_H265_MANIFEST = "manifest-h265-enc.mpd";
+  private static final String WIDEVINE_VP9_MANIFEST = "manifest-vp9-enc.mpd";
+  private static final String WIDEVINE_H264_23_MANIFEST = "manifest-h264-23-enc.mpd";
+  private static final String WIDEVINE_H264_24_MANIFEST = "manifest-h264-24-enc.mpd";
+  private static final String WIDEVINE_H264_29_MANIFEST = "manifest-h264-29-enc.mpd";
 
   private static final String AAC_AUDIO_REPRESENTATION_ID = "141";
   private static final String H264_BASELINE_240P_VIDEO_REPRESENTATION_ID = "avc-baseline-240";
@@ -135,6 +148,63 @@
           VP9_180P_VIDEO_REPRESENTATION_ID,
           VP9_360P_VIDEO_REPRESENTATION_ID};
 
+  // Widevine encrypted content representation ids.
+  private static final String WIDEVINE_AAC_AUDIO_REPRESENTATION_ID = "0";
+  private static final String WIDEVINE_H264_BASELINE_240P_VIDEO_REPRESENTATION_ID = "1";
+  private static final String WIDEVINE_H264_BASELINE_480P_VIDEO_REPRESENTATION_ID = "2";
+  private static final String WIDEVINE_H264_MAIN_240P_VIDEO_REPRESENTATION_ID = "3";
+  private static final String WIDEVINE_H264_MAIN_480P_VIDEO_REPRESENTATION_ID = "4";
+  // The highest quality H264 format mandated by the Android CDD.
+  private static final String WIDEVINE_H264_CDD_FIXED = Util.SDK_INT < 23
+      ? WIDEVINE_H264_BASELINE_480P_VIDEO_REPRESENTATION_ID
+      : WIDEVINE_H264_MAIN_480P_VIDEO_REPRESENTATION_ID;
+  // Multiple H264 formats mandated by the Android CDD. Note: The CDD actually mandated main profile
+  // support from API level 23, but we opt to test only from 24 due to known issues on API level 23
+  // when switching between baseline and main profiles on certain devices.
+  private static final String[] WIDEVINE_H264_CDD_ADAPTIVE = Util.SDK_INT < 24
+      ? new String[] {
+      WIDEVINE_H264_BASELINE_240P_VIDEO_REPRESENTATION_ID,
+      WIDEVINE_H264_BASELINE_480P_VIDEO_REPRESENTATION_ID}
+      : new String[] {
+      WIDEVINE_H264_BASELINE_240P_VIDEO_REPRESENTATION_ID,
+      WIDEVINE_H264_BASELINE_480P_VIDEO_REPRESENTATION_ID,
+      WIDEVINE_H264_MAIN_240P_VIDEO_REPRESENTATION_ID,
+      WIDEVINE_H264_MAIN_480P_VIDEO_REPRESENTATION_ID};
+
+  private static final String WIDEVINE_H264_BASELINE_480P_23FPS_VIDEO_REPRESENTATION_ID = "2";
+  private static final String WIDEVINE_H264_BASELINE_480P_24FPS_VIDEO_REPRESENTATION_ID = "2";
+  private static final String WIDEVINE_H264_BASELINE_480P_29FPS_VIDEO_REPRESENTATION_ID = "2";
+
+  private static final String WIDEVINE_H265_BASELINE_288P_VIDEO_REPRESENTATION_ID = "1";
+  private static final String WIDEVINE_H265_BASELINE_360P_VIDEO_REPRESENTATION_ID = "2";
+  // The highest quality H265 format mandated by the Android CDD.
+  private static final String WIDEVINE_H265_CDD_FIXED =
+      WIDEVINE_H265_BASELINE_360P_VIDEO_REPRESENTATION_ID;
+  // Multiple H265 formats mandated by the Android CDD.
+  private static final String[] WIDEVINE_H265_CDD_ADAPTIVE =
+      new String[] {
+          WIDEVINE_H265_BASELINE_288P_VIDEO_REPRESENTATION_ID,
+          WIDEVINE_H265_BASELINE_360P_VIDEO_REPRESENTATION_ID};
+
+  private static final String WIDEVINE_VORBIS_AUDIO_REPRESENTATION_ID = "0";
+  private static final String WIDEVINE_VP9_180P_VIDEO_REPRESENTATION_ID = "1";
+  private static final String WIDEVINE_VP9_360P_VIDEO_REPRESENTATION_ID = "2";
+  // The highest quality VP9 format mandated by the Android CDD.
+  private static final String WIDEVINE_VP9_CDD_FIXED = VP9_360P_VIDEO_REPRESENTATION_ID;
+  // Multiple VP9 formats mandated by the Android CDD.
+  private static final String[] WIDEVINE_VP9_CDD_ADAPTIVE =
+      new String[] {
+          WIDEVINE_VP9_180P_VIDEO_REPRESENTATION_ID,
+          WIDEVINE_VP9_360P_VIDEO_REPRESENTATION_ID};
+
+  private static final String WIDEVINE_PROVIDER = "widevine_test";
+  private static final String WIDEVINE_SW_CRYPTO_CONTENT_ID = "exoplayer_test_1";
+  private static final String WIDEVINE_HW_ALL_CONTENT_ID = "exoplayer_test_2";
+  private static final UUID WIDEVINE_UUID = new UUID(0xEDEF8BA979D64ACEL, 0xA3C827DCD51D21EDL);
+  private static final String WIDEVINE_SECURITY_LEVEL_1 = "L1";
+  private static final String WIDEVINE_SECURITY_LEVEL_3 = "L3";
+  private static final String SECURITY_LEVEL_PROPERTY = "securityLevel";
+
   // Whether adaptive tests should enable video formats beyond those mandated by the Android CDD
   // if the device advertises support for them.
   private static final boolean ALLOW_ADDITIONAL_VIDEO_FORMATS = Util.SDK_INT >= 24;
@@ -190,7 +260,7 @@ public void testH264Fixed() throws IOException {
     }
     String streamName = "test_h264_fixed";
     testDashPlayback(getActivity(), streamName, H264_MANIFEST, AAC_AUDIO_REPRESENTATION_ID, false,
-        H264_CDD_FIXED);
+        MimeTypes.VIDEO_H264, false, H264_CDD_FIXED);
   }
 
   public void testH264Adaptive() throws IOException {
@@ -199,8 +269,8 @@ public void testH264Adaptive() throws IOException {
       return;
     }
     String streamName = "test_h264_adaptive";
-    testDashPlayback(getActivity(), streamName, H264_MANIFEST, AAC_AUDIO_REPRESENTATION_ID,
-        ALLOW_ADDITIONAL_VIDEO_FORMATS, H264_CDD_ADAPTIVE);
+    testDashPlayback(getActivity(), streamName, H264_MANIFEST, AAC_AUDIO_REPRESENTATION_ID, false,
+        MimeTypes.VIDEO_H264, ALLOW_ADDITIONAL_VIDEO_FORMATS, H264_CDD_ADAPTIVE);
   }
 
   public void testH264AdaptiveWithSeeking() throws IOException {
@@ -210,7 +280,8 @@ public void testH264AdaptiveWithSeeking() throws IOException {
     }
     String streamName = "test_h264_adaptive_with_seeking";
     testDashPlayback(getActivity(), streamName, SEEKING_SCHEDULE, false, H264_MANIFEST,
-        AAC_AUDIO_REPRESENTATION_ID, ALLOW_ADDITIONAL_VIDEO_FORMATS, H264_CDD_ADAPTIVE);
+        AAC_AUDIO_REPRESENTATION_ID, false, MimeTypes.VIDEO_H264, ALLOW_ADDITIONAL_VIDEO_FORMATS,
+        H264_CDD_ADAPTIVE);
   }
 
   public void testH264AdaptiveWithRendererDisabling() throws IOException {
@@ -220,7 +291,8 @@ public void testH264AdaptiveWithRendererDisabling() throws IOException {
     }
     String streamName = "test_h264_adaptive_with_renderer_disabling";
     testDashPlayback(getActivity(), streamName, RENDERER_DISABLING_SCHEDULE, false, H264_MANIFEST,
-        AAC_AUDIO_REPRESENTATION_ID, ALLOW_ADDITIONAL_VIDEO_FORMATS, H264_CDD_ADAPTIVE);
+        AAC_AUDIO_REPRESENTATION_ID, false, MimeTypes.VIDEO_H264, ALLOW_ADDITIONAL_VIDEO_FORMATS,
+        H264_CDD_ADAPTIVE);
   }
 
   // H265 CDD.
@@ -232,7 +304,7 @@ public void testH265Fixed() throws IOException {
     }
     String streamName = "test_h265_fixed";
     testDashPlayback(getActivity(), streamName, H265_MANIFEST, AAC_AUDIO_REPRESENTATION_ID, false,
-        H265_CDD_FIXED);
+        MimeTypes.VIDEO_H265, false, H265_CDD_FIXED);
   }
 
   public void testH265Adaptive() throws IOException {
@@ -241,8 +313,8 @@ public void testH265Adaptive() throws IOException {
       return;
     }
     String streamName = "test_h265_adaptive";
-    testDashPlayback(getActivity(), streamName, H265_MANIFEST, AAC_AUDIO_REPRESENTATION_ID,
-        ALLOW_ADDITIONAL_VIDEO_FORMATS, H265_CDD_ADAPTIVE);
+    testDashPlayback(getActivity(), streamName, H265_MANIFEST, AAC_AUDIO_REPRESENTATION_ID, false,
+        MimeTypes.VIDEO_H265, ALLOW_ADDITIONAL_VIDEO_FORMATS, H265_CDD_ADAPTIVE);
   }
 
   public void testH265AdaptiveWithSeeking() throws IOException {
@@ -252,7 +324,8 @@ public void testH265AdaptiveWithSeeking() throws IOException {
     }
     String streamName = "test_h265_adaptive_with_seeking";
     testDashPlayback(getActivity(), streamName, SEEKING_SCHEDULE, false, H265_MANIFEST,
-        AAC_AUDIO_REPRESENTATION_ID, ALLOW_ADDITIONAL_VIDEO_FORMATS, H265_CDD_ADAPTIVE);
+        AAC_AUDIO_REPRESENTATION_ID, false, MimeTypes.VIDEO_H265, ALLOW_ADDITIONAL_VIDEO_FORMATS,
+        H265_CDD_ADAPTIVE);
   }
 
   public void testH265AdaptiveWithRendererDisabling() throws IOException {
@@ -262,8 +335,8 @@ public void testH265AdaptiveWithRendererDisabling() throws IOException {
     }
     String streamName = "test_h265_adaptive_with_renderer_disabling";
     testDashPlayback(getActivity(), streamName, RENDERER_DISABLING_SCHEDULE, false,
-        H265_MANIFEST, AAC_AUDIO_REPRESENTATION_ID, ALLOW_ADDITIONAL_VIDEO_FORMATS,
-        H265_CDD_ADAPTIVE);
+        H265_MANIFEST, AAC_AUDIO_REPRESENTATION_ID, false, MimeTypes.VIDEO_H265,
+        ALLOW_ADDITIONAL_VIDEO_FORMATS, H265_CDD_ADAPTIVE);
     }
 
   // VP9 (CDD).
@@ -275,7 +348,7 @@ public void testVp9Fixed360p() throws IOException {
     }
     String streamName = "test_vp9_fixed_360p";
     testDashPlayback(getActivity(), streamName, VP9_MANIFEST, VORBIS_AUDIO_REPRESENTATION_ID, false,
-        VP9_CDD_FIXED);
+        MimeTypes.VIDEO_VP9, false, VP9_CDD_FIXED);
   }
 
   public void testVp9Adaptive() throws IOException {
@@ -284,8 +357,8 @@ public void testVp9Adaptive() throws IOException {
       return;
     }
     String streamName = "test_vp9_adaptive";
-    testDashPlayback(getActivity(), streamName, VP9_MANIFEST, VORBIS_AUDIO_REPRESENTATION_ID,
-        ALLOW_ADDITIONAL_VIDEO_FORMATS, VP9_CDD_ADAPTIVE);
+    testDashPlayback(getActivity(), streamName, VP9_MANIFEST, VORBIS_AUDIO_REPRESENTATION_ID, false,
+        MimeTypes.VIDEO_VP9, ALLOW_ADDITIONAL_VIDEO_FORMATS, VP9_CDD_ADAPTIVE);
   }
 
   public void testVp9AdaptiveWithSeeking() throws IOException {
@@ -295,7 +368,8 @@ public void testVp9AdaptiveWithSeeking() throws IOException {
     }
     String streamName = "test_vp9_adaptive_with_seeking";
     testDashPlayback(getActivity(), streamName, SEEKING_SCHEDULE, false, VP9_MANIFEST,
-        VORBIS_AUDIO_REPRESENTATION_ID, ALLOW_ADDITIONAL_VIDEO_FORMATS, VP9_CDD_ADAPTIVE);
+        VORBIS_AUDIO_REPRESENTATION_ID, false, MimeTypes.VIDEO_VP9, ALLOW_ADDITIONAL_VIDEO_FORMATS,
+        VP9_CDD_ADAPTIVE);
   }
 
   public void testVp9AdaptiveWithRendererDisabling() throws IOException {
@@ -305,8 +379,8 @@ public void testVp9AdaptiveWithRendererDisabling() throws IOException {
     }
     String streamName = "test_vp9_adaptive_with_renderer_disabling";
     testDashPlayback(getActivity(), streamName, RENDERER_DISABLING_SCHEDULE, false,
-        VP9_MANIFEST, VORBIS_AUDIO_REPRESENTATION_ID, ALLOW_ADDITIONAL_VIDEO_FORMATS,
-        VP9_CDD_ADAPTIVE);
+        VP9_MANIFEST, VORBIS_AUDIO_REPRESENTATION_ID, false, MimeTypes.VIDEO_VP9,
+        ALLOW_ADDITIONAL_VIDEO_FORMATS, VP9_CDD_ADAPTIVE);
   }
 
   // H264: Other frame-rates for output buffer count assertions.
@@ -319,7 +393,7 @@ public void test23FpsH264Fixed() throws IOException {
     }
     String streamName = "test_23fps_h264_fixed";
     testDashPlayback(getActivity(), streamName, H264_23_MANIFEST, AAC_AUDIO_REPRESENTATION_ID,
-        false, H264_BASELINE_480P_23FPS_VIDEO_REPRESENTATION_ID);
+        false, MimeTypes.VIDEO_H264, false, H264_BASELINE_480P_23FPS_VIDEO_REPRESENTATION_ID);
   }
 
   // 24 fps.
@@ -330,7 +404,7 @@ public void test24FpsH264Fixed() throws IOException {
     }
     String streamName = "test_24fps_h264_fixed";
     testDashPlayback(getActivity(), streamName, H264_24_MANIFEST, AAC_AUDIO_REPRESENTATION_ID,
-        false, H264_BASELINE_480P_24FPS_VIDEO_REPRESENTATION_ID);
+        false, MimeTypes.VIDEO_H264, false, H264_BASELINE_480P_24FPS_VIDEO_REPRESENTATION_ID);
   }
 
   // 29.97 fps.
@@ -341,41 +415,219 @@ public void test29FpsH264Fixed() throws IOException {
     }
     String streamName = "test_29fps_h264_fixed";
     testDashPlayback(getActivity(), streamName, H264_29_MANIFEST, AAC_AUDIO_REPRESENTATION_ID,
-        false, H264_BASELINE_480P_29FPS_VIDEO_REPRESENTATION_ID);
+        false, MimeTypes.VIDEO_H264, false, H264_BASELINE_480P_29FPS_VIDEO_REPRESENTATION_ID);
+  }
+
+  // Widevine encrypted media tests.
+  // H264 CDD.
+
+  public void testWidevineH264Fixed() throws IOException {
+    if (Util.SDK_INT < 18) {
+      // Pass.
+      return;
+    }
+    String streamName = "test_widevine_h264_fixed";
+    testDashPlayback(getActivity(), streamName, WIDEVINE_H264_MANIFEST,
+        WIDEVINE_AAC_AUDIO_REPRESENTATION_ID, true, MimeTypes.VIDEO_H264, false,
+        WIDEVINE_H264_CDD_FIXED);
+  }
+
+  public void testWidevineH264Adaptive() throws IOException {
+    if (Util.SDK_INT < 18 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H264)) {
+      // Pass.
+      return;
+    }
+    String streamName = "test_widevine_h264_adaptive";
+    testDashPlayback(getActivity(), streamName, WIDEVINE_H264_MANIFEST,
+        WIDEVINE_AAC_AUDIO_REPRESENTATION_ID, true, MimeTypes.VIDEO_H264,
+        ALLOW_ADDITIONAL_VIDEO_FORMATS, WIDEVINE_H264_CDD_ADAPTIVE);
+  }
+
+  public void testWidevineH264AdaptiveWithSeeking() throws IOException {
+    if (Util.SDK_INT < 18 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H264)) {
+      // Pass.
+      return;
+    }
+    String streamName = "test_widevine_h264_adaptive_with_seeking";
+    testDashPlayback(getActivity(), streamName, SEEKING_SCHEDULE, false, WIDEVINE_H264_MANIFEST,
+        WIDEVINE_AAC_AUDIO_REPRESENTATION_ID, true, MimeTypes.VIDEO_H264,
+        ALLOW_ADDITIONAL_VIDEO_FORMATS, WIDEVINE_H264_CDD_ADAPTIVE);
+  }
+
+  public void testWidevineH264AdaptiveWithRendererDisabling() throws IOException {
+    if (Util.SDK_INT < 18 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H264)) {
+      // Pass.
+      return;
+    }
+    String streamName = "test_widevine_h264_adaptive_with_renderer_disabling";
+    testDashPlayback(getActivity(), streamName, RENDERER_DISABLING_SCHEDULE, false,
+        WIDEVINE_H264_MANIFEST, WIDEVINE_AAC_AUDIO_REPRESENTATION_ID, true, MimeTypes.VIDEO_H264,
+        ALLOW_ADDITIONAL_VIDEO_FORMATS, WIDEVINE_H264_CDD_ADAPTIVE);
+  }
+
+  // H265 CDD.
+
+  public void testWidevineH265Fixed() throws IOException {
+    if (Util.SDK_INT < 23) {
+      // Pass.
+      return;
+    }
+    String streamName = "test_widevine_h265_fixed";
+    testDashPlayback(getActivity(), streamName, WIDEVINE_H265_MANIFEST,
+        WIDEVINE_AAC_AUDIO_REPRESENTATION_ID, true, MimeTypes.VIDEO_H265, false,
+        WIDEVINE_H265_CDD_FIXED);
+  }
+
+  public void testWidevineH265Adaptive() throws IOException {
+    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H265)) {
+      // Pass.
+      return;
+    }
+    String streamName = "test_widevine_h265_adaptive";
+    testDashPlayback(getActivity(), streamName, WIDEVINE_H265_MANIFEST,
+        WIDEVINE_AAC_AUDIO_REPRESENTATION_ID, true, MimeTypes.VIDEO_H265,
+        ALLOW_ADDITIONAL_VIDEO_FORMATS, WIDEVINE_H265_CDD_ADAPTIVE);
+  }
+
+  public void testWidevineH265AdaptiveWithSeeking() throws IOException {
+    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H265)) {
+      // Pass.
+      return;
+    }
+    String streamName = "test_widevine_h265_adaptive_with_seeking";
+    testDashPlayback(getActivity(), streamName, SEEKING_SCHEDULE, false, WIDEVINE_H265_MANIFEST,
+        WIDEVINE_AAC_AUDIO_REPRESENTATION_ID, true, MimeTypes.VIDEO_H265,
+        ALLOW_ADDITIONAL_VIDEO_FORMATS, WIDEVINE_H265_CDD_ADAPTIVE);
+  }
+
+  public void testWidevineH265AdaptiveWithRendererDisabling() throws IOException {
+    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H265)) {
+      // Pass.
+      return;
+    }
+    String streamName = "test_widevine_h265_adaptive_with_renderer_disabling";
+    testDashPlayback(getActivity(), streamName, RENDERER_DISABLING_SCHEDULE, false,
+        WIDEVINE_H265_MANIFEST, WIDEVINE_AAC_AUDIO_REPRESENTATION_ID, true, MimeTypes.VIDEO_H265,
+        ALLOW_ADDITIONAL_VIDEO_FORMATS, WIDEVINE_H265_CDD_ADAPTIVE);
+  }
+
+  // VP9 (CDD).
+
+  public void testWidevineVp9Fixed360p() throws IOException {
+    if (Util.SDK_INT < 23) {
+      // Pass.
+      return;
+    }
+    String streamName = "test_widevine_vp9_fixed_360p";
+    testDashPlayback(getActivity(), streamName, WIDEVINE_VP9_MANIFEST,
+        WIDEVINE_VORBIS_AUDIO_REPRESENTATION_ID, true, MimeTypes.VIDEO_VP9, false,
+        WIDEVINE_VP9_CDD_FIXED);
+  }
+
+  public void testWidevineVp9Adaptive() throws IOException {
+    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_VP9)) {
+      // Pass.
+      return;
+    }
+    String streamName = "test_widevine_vp9_adaptive";
+    testDashPlayback(getActivity(), streamName, WIDEVINE_VP9_MANIFEST,
+        WIDEVINE_VORBIS_AUDIO_REPRESENTATION_ID, true, MimeTypes.VIDEO_VP9,
+        ALLOW_ADDITIONAL_VIDEO_FORMATS, WIDEVINE_VP9_CDD_ADAPTIVE);
+  }
+
+  public void testWidevineVp9AdaptiveWithSeeking() throws IOException {
+    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_VP9)) {
+      // Pass.
+      return;
+    }
+    String streamName = "test_widevine_vp9_adaptive_with_seeking";
+    testDashPlayback(getActivity(), streamName, SEEKING_SCHEDULE, false, WIDEVINE_VP9_MANIFEST,
+        WIDEVINE_VORBIS_AUDIO_REPRESENTATION_ID, true, MimeTypes.VIDEO_VP9,
+        ALLOW_ADDITIONAL_VIDEO_FORMATS, WIDEVINE_VP9_CDD_ADAPTIVE);
+  }
+
+  public void testWidevineVp9AdaptiveWithRendererDisabling() throws IOException {
+    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_VP9)) {
+      // Pass.
+      return;
+    }
+    String streamName = "test_widevine_vp9_adaptive_with_renderer_disabling";
+    testDashPlayback(getActivity(), streamName, RENDERER_DISABLING_SCHEDULE, false,
+        WIDEVINE_VP9_MANIFEST, WIDEVINE_VORBIS_AUDIO_REPRESENTATION_ID, true, MimeTypes.VIDEO_VP9,
+        ALLOW_ADDITIONAL_VIDEO_FORMATS, WIDEVINE_VP9_CDD_ADAPTIVE);
+  }
+
+  // H264: Other frame-rates for output buffer count assertions.
+
+  // 23.976 fps.
+  public void testWidevine23FpsH264Fixed() throws IOException {
+    if (Util.SDK_INT < 23) {
+      // Pass.
+      return;
+    }
+    String streamName = "test_widevine_23fps_h264_fixed";
+    testDashPlayback(getActivity(), streamName, WIDEVINE_H264_23_MANIFEST,
+        WIDEVINE_AAC_AUDIO_REPRESENTATION_ID, true, MimeTypes.VIDEO_H264, false,
+        WIDEVINE_H264_BASELINE_480P_23FPS_VIDEO_REPRESENTATION_ID);
+  }
+
+  // 24 fps.
+  public void testWidevine24FpsH264Fixed() throws IOException {
+    if (Util.SDK_INT < 23) {
+      // Pass.
+      return;
+    }
+    String streamName = "test_widevine_24fps_h264_fixed";
+    testDashPlayback(getActivity(), streamName, WIDEVINE_H264_24_MANIFEST,
+        WIDEVINE_AAC_AUDIO_REPRESENTATION_ID, true, MimeTypes.VIDEO_H264, false,
+        WIDEVINE_H264_BASELINE_480P_24FPS_VIDEO_REPRESENTATION_ID);
+  }
+
+  // 29.97 fps.
+  public void testWidevine29FpsH264Fixed() throws IOException {
+    if (Util.SDK_INT < 23) {
+      // Pass.
+      return;
+    }
+    String streamName = "test_widevine_29fps_h264_fixed";
+    testDashPlayback(getActivity(), streamName, WIDEVINE_H264_29_MANIFEST,
+        WIDEVINE_AAC_AUDIO_REPRESENTATION_ID, true, MimeTypes.VIDEO_H264, false,
+        WIDEVINE_H264_BASELINE_480P_29FPS_VIDEO_REPRESENTATION_ID);
   }
 
   // Internal.
 
   private void testDashPlayback(HostActivity activity, String streamName, String manifestFileName,
-      String audioFormat, boolean canIncludeAdditionalVideoFormats, String... videoFormats)
-      throws IOException {
+      String audioFormat, boolean isWidevineEncrypted, String videoMimeType,
+      boolean canIncludeAdditionalVideoFormats, String... videoFormats) throws IOException {
     testDashPlayback(activity, streamName, null, true, manifestFileName, audioFormat,
-        canIncludeAdditionalVideoFormats, videoFormats);
+        isWidevineEncrypted, videoMimeType, canIncludeAdditionalVideoFormats, videoFormats);
   }
 
   private void testDashPlayback(HostActivity activity, String streamName,
       ActionSchedule actionSchedule, boolean fullPlaybackNoSeeking, String manifestFileName,
-      String audioFormat, boolean canIncludeAdditionalVideoFormats, String... videoFormats)
-      throws IOException {
+      String audioFormat, boolean isWidevineEncrypted, String videoMimeType,
+      boolean canIncludeAdditionalVideoFormats, String... videoFormats) throws IOException {
     MediaPresentationDescription mpd = TestUtil.loadManifest(activity, TAG,
         MANIFEST_URL_PREFIX + manifestFileName, new MediaPresentationDescriptionParser());
     MetricsLogger metricsLogger = MetricsLogger.Factory.createDefault(getInstrumentation(), TAG,
-        REPORT_NAME, streamName);
+        REPORT_NAME, REPORT_OBJECT_NAME);
     DashHostedTest test = new DashHostedTest(streamName, mpd, metricsLogger, fullPlaybackNoSeeking,
-        audioFormat, canIncludeAdditionalVideoFormats, false, actionSchedule, videoFormats);
+        audioFormat, canIncludeAdditionalVideoFormats, isWidevineEncrypted, false, actionSchedule,
+        videoMimeType, videoFormats);
     activity.runTest(test, mpd.duration + MAX_ADDITIONAL_TIME_MS);
     // Retry test exactly once if adaptive test fails due to excessive dropped buffers when playing
     // non-CDD required formats (b/28220076).
     if (test.needsCddLimitedRetry) {
       metricsLogger = MetricsLogger.Factory.createDefault(getInstrumentation(), TAG, REPORT_NAME,
-          streamName + "_cdd_limited_retry");
+          REPORT_OBJECT_NAME);
       test = new DashHostedTest(streamName, mpd, metricsLogger, fullPlaybackNoSeeking, audioFormat,
-          false, true, actionSchedule, videoFormats);
+          false, isWidevineEncrypted, true, actionSchedule, videoMimeType, videoFormats);
       activity.runTest(test, mpd.duration + MAX_ADDITIONAL_TIME_MS);
     }
   }
 
-  private boolean shouldSkipAdaptiveTest(String mimeType) throws IOException {
+  private static boolean shouldSkipAdaptiveTest(String mimeType) throws IOException {
     if (!MediaCodecUtil.getDecoderInfo(mimeType, false).adaptive) {
       assertTrue(Util.SDK_INT < 21);
       return true;
@@ -400,16 +652,20 @@ private boolean shouldSkipAdaptiveTest(String mimeType) throws IOException {
     private static final int AUDIO_EVENT_ID = 1;
 
     private final String streamName;
+    private final String videoMimeType;
     private final MediaPresentationDescription mpd;
     private final MetricsLogger metricsLogger;
     private final boolean fullPlaybackNoSeeking;
     private final boolean canIncludeAdditionalVideoFormats;
+    private final boolean isWidevineEncrypted;
+    private final boolean isCddLimitedRetry;
     private final String[] audioFormats;
     private final String[] videoFormats;
 
     private CodecCounters videoCounters;
     private CodecCounters audioCounters;
     private boolean needsCddLimitedRetry;
+    private boolean needsSecureVideoDecoder;
     private TrackSelector videoTrackSelector;
 
     /**
@@ -421,13 +677,17 @@ private boolean shouldSkipAdaptiveTest(String mimeType) throws IOException {
      * @param audioFormat The audio format.
      * @param canIncludeAdditionalVideoFormats Whether to use video formats in addition to
      *     those listed in the videoFormats argument, if the device is capable of playing them.
+     * @param isWidevineEncrypted Whether the video is Widevine encrypted.
      * @param isCddLimitedRetry Whether this is a CDD limited retry following a previous failure.
+     * @param actionSchedule The action schedule for the test.
+     * @param videoMimeType The video mime type.
      * @param videoFormats The video formats.
      */
     public DashHostedTest(String streamName, MediaPresentationDescription mpd,
         MetricsLogger metricsLogger, boolean fullPlaybackNoSeeking, String audioFormat,
-        boolean canIncludeAdditionalVideoFormats, boolean isCddLimitedRetry,
-        ActionSchedule actionSchedule, String... videoFormats) {
+        boolean canIncludeAdditionalVideoFormats, boolean isWidevineEncrypted,
+        boolean isCddLimitedRetry, ActionSchedule actionSchedule, String videoMimeType,
+        String... videoFormats) {
       super(RENDERER_COUNT);
       Assertions.checkArgument(!(isCddLimitedRetry && canIncludeAdditionalVideoFormats));
       this.streamName = streamName;
@@ -436,6 +696,9 @@ public DashHostedTest(String streamName, MediaPresentationDescription mpd,
       this.fullPlaybackNoSeeking = fullPlaybackNoSeeking;
       this.audioFormats = new String[] {audioFormat};
       this.canIncludeAdditionalVideoFormats = canIncludeAdditionalVideoFormats;
+      this.isWidevineEncrypted = isWidevineEncrypted;
+      this.isCddLimitedRetry = isCddLimitedRetry;
+      this.videoMimeType = videoMimeType;
       this.videoFormats = videoFormats;
       if (actionSchedule != null) {
         setSchedule(actionSchedule);
@@ -449,10 +712,31 @@ public DashHostedTest(String streamName, MediaPresentationDescription mpd,
       LoadControl loadControl = new DefaultLoadControl(new DefaultAllocator(BUFFER_SEGMENT_SIZE));
       String userAgent = TestUtil.getUserAgent(host);
 
+      StreamingDrmSessionManager<FrameworkMediaCrypto> drmSessionManager = null;
+      if (isWidevineEncrypted) {
+        try {
+          // Force L3 if secure decoder is not available.
+          boolean forceL3Widevine = MediaCodecUtil.getDecoderInfo(videoMimeType, true) == null;
+          String widevineContentId = getWidevineContentId(forceL3Widevine);
+          WidevineMediaDrmCallback drmCallback =
+              new WidevineMediaDrmCallback(widevineContentId, WIDEVINE_PROVIDER);
+          drmSessionManager = StreamingDrmSessionManager.newWidevineInstance(
+              player.getPlaybackLooper(), drmCallback, null, handler, null);
+          String securityProperty = drmSessionManager.getPropertyString(SECURITY_LEVEL_PROPERTY);
+          if (forceL3Widevine && !WIDEVINE_SECURITY_LEVEL_3.equals(securityProperty)) {
+            drmSessionManager.setPropertyString(SECURITY_LEVEL_PROPERTY, WIDEVINE_SECURITY_LEVEL_3);
+          }
+          securityProperty = drmSessionManager.getPropertyString(SECURITY_LEVEL_PROPERTY);
+          needsSecureVideoDecoder = WIDEVINE_SECURITY_LEVEL_1.equals(securityProperty);
+        } catch (IOException | UnsupportedDrmException e) {
+          throw new IllegalStateException(e);
+        }
+      }
+
       // Build the video renderer.
       DataSource videoDataSource = new DefaultUriDataSource(host, null, userAgent);
       videoTrackSelector = new TrackSelector(AdaptationSet.TYPE_VIDEO,
-          canIncludeAdditionalVideoFormats, videoFormats);
+          canIncludeAdditionalVideoFormats, needsSecureVideoDecoder, videoFormats);
       ChunkSource videoChunkSource = new DashChunkSource(mpd, videoTrackSelector, videoDataSource,
           new FormatEvaluator.RandomEvaluator(0));
       ChunkSampleSource videoSampleSource = new ChunkSampleSource(videoChunkSource, loadControl,
@@ -460,13 +744,13 @@ public DashHostedTest(String streamName, MediaPresentationDescription mpd,
           MIN_LOADABLE_RETRY_COUNT);
       DebugMediaCodecVideoTrackRenderer videoRenderer = new DebugMediaCodecVideoTrackRenderer(host,
           videoSampleSource, MediaCodecSelector.DEFAULT, MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT,
-          0, handler, logger, 50);
+          0, drmSessionManager, true, handler, logger, 50);
       videoCounters = videoRenderer.codecCounters;
       player.sendMessage(videoRenderer, DebugMediaCodecVideoTrackRenderer.MSG_SET_SURFACE, surface);
 
       // Build the audio renderer.
       DataSource audioDataSource = new DefaultUriDataSource(host, null, userAgent);
-      TrackSelector audioTrackSelector = new TrackSelector(AdaptationSet.TYPE_AUDIO, false,
+      TrackSelector audioTrackSelector = new TrackSelector(AdaptationSet.TYPE_AUDIO, false, false,
           audioFormats);
       ChunkSource audioChunkSource = new DashChunkSource(mpd, audioTrackSelector, audioDataSource,
           null);
@@ -474,7 +758,7 @@ public DashHostedTest(String streamName, MediaPresentationDescription mpd,
           AUDIO_BUFFER_SEGMENTS * BUFFER_SEGMENT_SIZE, handler, logger, AUDIO_EVENT_ID,
           MIN_LOADABLE_RETRY_COUNT);
       MediaCodecAudioTrackRenderer audioRenderer = new MediaCodecAudioTrackRenderer(
-          audioSampleSource, MediaCodecSelector.DEFAULT, handler, logger);
+          audioSampleSource, MediaCodecSelector.DEFAULT, drmSessionManager, true, handler, logger);
       audioCounters = audioRenderer.codecCounters;
 
       TrackRenderer[] renderers = new TrackRenderer[RENDERER_COUNT];
@@ -544,6 +828,7 @@ protected void assertPassed() {
     protected void logMetrics() {
       // Log metrics from the test.
       metricsLogger.logMetric(MetricsLogger.KEY_TEST_NAME, streamName);
+      metricsLogger.logMetric(MetricsLogger.KEY_IS_CDD_LIMITED_RETRY, isCddLimitedRetry);
       metricsLogger.logMetric(MetricsLogger.KEY_FRAMES_DROPPED_COUNT,
           videoCounters.droppedOutputBufferCount);
       metricsLogger.logMetric(MetricsLogger.KEY_MAX_CONSECUTIVE_FRAMES_DROPPED_COUNT,
@@ -555,20 +840,37 @@ protected void logMetrics() {
       metricsLogger.close();
     }
 
+    @TargetApi(18)
+    private static String getWidevineContentId(boolean widevineForceL3) {
+      if (widevineForceL3) {
+        return WIDEVINE_SW_CRYPTO_CONTENT_ID;
+      }
+      try {
+        MediaDrm mediaDrm = new MediaDrm(WIDEVINE_UUID);
+        String securityLevel = mediaDrm.getPropertyString(SECURITY_LEVEL_PROPERTY);
+        return WIDEVINE_SECURITY_LEVEL_1.equals(securityLevel) ? WIDEVINE_HW_ALL_CONTENT_ID
+            : WIDEVINE_SW_CRYPTO_CONTENT_ID;
+      } catch (UnsupportedSchemeException e) {
+        throw new IllegalStateException(e);
+      }
+    }
+
     private static final class TrackSelector implements DashTrackSelector {
 
       private final int adaptationSetType;
       private final String[] representationIds;
       private final boolean canIncludeAdditionalVideoRepresentations;
+      private final boolean needsSecureDecoder;
 
       public boolean includedAdditionalVideoRepresentations;
 
       private TrackSelector(int adaptationSetType, boolean canIncludeAdditionalVideoRepresentations,
-          String[] representationIds) {
+          boolean needsSecureDecoder, String[] representationIds) {
         Assertions.checkState(!canIncludeAdditionalVideoRepresentations
             || adaptationSetType == AdaptationSet.TYPE_VIDEO);
         this.adaptationSetType = adaptationSetType;
         this.canIncludeAdditionalVideoRepresentations = canIncludeAdditionalVideoRepresentations;
+        this.needsSecureDecoder = needsSecureDecoder;
         this.representationIds = representationIds;
       }
 
@@ -579,7 +881,7 @@ public void selectTracks(MediaPresentationDescription manifest, int periodIndex,
         int adaptationSetIndex = period.getAdaptationSetIndex(adaptationSetType);
         AdaptationSet adaptationSet = period.adaptationSets.get(adaptationSetIndex);
         int[] representationIndices = getRepresentationIndices(adaptationSet, representationIds,
-            canIncludeAdditionalVideoRepresentations);
+            canIncludeAdditionalVideoRepresentations, needsSecureDecoder);
         if (representationIndices.length > representationIds.length) {
           includedAdditionalVideoRepresentations = true;
         }
@@ -592,8 +894,8 @@ public void selectTracks(MediaPresentationDescription manifest, int periodIndex,
       }
 
       private static int[] getRepresentationIndices(AdaptationSet adaptationSet,
-          String[] representationIds, boolean canIncludeAdditionalVideoRepresentations)
-          throws IOException {
+          String[] representationIds, boolean canIncludeAdditionalVideoRepresentations,
+          boolean needsSecureDecoder) throws IOException {
         List<Representation> availableRepresentations = adaptationSet.representations;
         List<Integer> selectedRepresentationIndices = new ArrayList<>();
 
@@ -615,7 +917,7 @@ public void selectTracks(MediaPresentationDescription manifest, int periodIndex,
         // Select additional video representations, if supported by the device.
         if (canIncludeAdditionalVideoRepresentations) {
            int[] supportedVideoRepresentationIndices = VideoFormatSelectorUtil.selectVideoFormats(
-               availableRepresentations, null, false, true, -1, -1);
+               availableRepresentations, null, false, true, needsSecureDecoder, -1, -1);
            for (int i = 0; i < supportedVideoRepresentationIndices.length; i++) {
              int representationIndex = supportedVideoRepresentationIndices[i];
              if (!selectedRepresentationIndices.contains(representationIndex)) {
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/Action.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/Action.java
index 307380332f..5d871c9a8a 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/Action.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/Action.java
@@ -15,9 +15,8 @@
  */
 package com.google.android.exoplayer.playbacktests.util;
 
-import com.google.android.exoplayer.ExoPlayer;
-
 import android.util.Log;
+import com.google.android.exoplayer.ExoPlayer;
 
 /**
  * Base class for actions to perform during playback tests.
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/ActionSchedule.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/ActionSchedule.java
index b78057aa39..f2f188f87c 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/ActionSchedule.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/ActionSchedule.java
@@ -15,14 +15,13 @@
  */
 package com.google.android.exoplayer.playbacktests.util;
 
+import android.os.Handler;
 import com.google.android.exoplayer.ExoPlayer;
 import com.google.android.exoplayer.playbacktests.util.Action.Seek;
 import com.google.android.exoplayer.playbacktests.util.Action.SetPlayWhenReady;
 import com.google.android.exoplayer.playbacktests.util.Action.SetSelectedTrack;
 import com.google.android.exoplayer.playbacktests.util.Action.Stop;
 
-import android.os.Handler;
-
 /**
  * Schedules a sequence of {@link Action}s for execution during a test.
  */
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/CodecCountersUtil.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/CodecCountersUtil.java
index 6034068fcc..f90afc389a 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/CodecCountersUtil.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/CodecCountersUtil.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer.playbacktests.util;
 
 import com.google.android.exoplayer.CodecCounters;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/DebugMediaCodecVideoTrackRenderer.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/DebugMediaCodecVideoTrackRenderer.java
index c930c74fd3..cc97470151 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/DebugMediaCodecVideoTrackRenderer.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/DebugMediaCodecVideoTrackRenderer.java
@@ -15,15 +15,15 @@
  */
 package com.google.android.exoplayer.playbacktests.util;
 
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.os.Handler;
 import com.google.android.exoplayer.ExoPlaybackException;
 import com.google.android.exoplayer.MediaCodecSelector;
 import com.google.android.exoplayer.MediaCodecVideoTrackRenderer;
 import com.google.android.exoplayer.SampleSource;
-
-import android.annotation.TargetApi;
-import android.content.Context;
-import android.os.Handler;
-
+import com.google.android.exoplayer.drm.DrmSessionManager;
+import com.google.android.exoplayer.drm.FrameworkMediaCrypto;
 import java.nio.ByteBuffer;
 
 /**
@@ -43,9 +43,12 @@
 
   public DebugMediaCodecVideoTrackRenderer(Context context, SampleSource source,
       MediaCodecSelector mediaCodecSelector, int videoScalingMode, long allowedJoiningTimeMs,
-      Handler eventHandler, EventListener eventListener, int maxDroppedFrameCountToNotify) {
-    super(context, source, mediaCodecSelector, videoScalingMode, allowedJoiningTimeMs, null, false,
-        eventHandler, eventListener, maxDroppedFrameCountToNotify);
+      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
+      boolean playClearSamplesWithoutKeys, Handler eventHandler, EventListener eventListener,
+      int maxDroppedFrameCountToNotify) {
+    super(context, source, mediaCodecSelector, videoScalingMode, allowedJoiningTimeMs,
+        drmSessionManager, playClearSamplesWithoutKeys, eventHandler, eventListener,
+        maxDroppedFrameCountToNotify);
     startIndex = 0;
     queueSize = 0;
   }
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/ExoHostedTest.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/ExoHostedTest.java
index 2273db7746..c55377e421 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/ExoHostedTest.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/ExoHostedTest.java
@@ -15,16 +15,15 @@
  */
 package com.google.android.exoplayer.playbacktests.util;
 
+import android.os.Handler;
+import android.os.SystemClock;
+import android.view.Surface;
 import com.google.android.exoplayer.ExoPlaybackException;
 import com.google.android.exoplayer.ExoPlayer;
 import com.google.android.exoplayer.TrackRenderer;
 import com.google.android.exoplayer.audio.AudioTrack;
 import com.google.android.exoplayer.playbacktests.util.HostActivity.HostedTest;
 
-import android.os.Handler;
-import android.os.SystemClock;
-import android.view.Surface;
-
 /**
  * A {@link HostedTest} for {@link ExoPlayer} playback tests.
  */
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/HostActivity.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/HostActivity.java
index 4bf9de1db1..0d4a02085a 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/HostActivity.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/HostActivity.java
@@ -17,10 +17,6 @@
 
 import static junit.framework.Assert.fail;
 
-import com.google.android.exoplayer.playbacktests.R;
-import com.google.android.exoplayer.util.Assertions;
-import com.google.android.exoplayer.util.Util;
-
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.Context;
@@ -36,6 +32,9 @@
 import android.view.SurfaceHolder;
 import android.view.SurfaceView;
 import android.view.Window;
+import com.google.android.exoplayer.playbacktests.R;
+import com.google.android.exoplayer.util.Assertions;
+import com.google.android.exoplayer.util.Util;
 
 /**
  * A host activity for performing playback tests.
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/LogcatLogger.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/LogcatLogger.java
index db33d400aa..35a5e4d1f9 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/LogcatLogger.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/LogcatLogger.java
@@ -15,6 +15,9 @@
  */
 package com.google.android.exoplayer.playbacktests.util;
 
+import android.media.MediaCodec.CryptoException;
+import android.util.Log;
+import android.view.Surface;
 import com.google.android.exoplayer.ExoPlaybackException;
 import com.google.android.exoplayer.ExoPlayer;
 import com.google.android.exoplayer.MediaCodecAudioTrackRenderer;
@@ -25,11 +28,6 @@
 import com.google.android.exoplayer.chunk.ChunkSampleSource;
 import com.google.android.exoplayer.chunk.Format;
 import com.google.android.exoplayer.hls.HlsSampleSource;
-
-import android.media.MediaCodec.CryptoException;
-import android.util.Log;
-import android.view.Surface;
-
 import java.io.IOException;
 import java.text.NumberFormat;
 import java.util.Locale;
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/LogcatMetricsLogger.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/LogcatMetricsLogger.java
index 8de3a197f2..336679a0d4 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/LogcatMetricsLogger.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/LogcatMetricsLogger.java
@@ -43,6 +43,11 @@ public void logMetric(String key, String value) {
     Log.d(tag, key + ": " + value);
   }
 
+  @Override
+  public void logMetric(String key, boolean value) {
+    Log.d(tag, key + ": " + value);
+  }
+
   @Override
   public void close() {
     // Do nothing.
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/MetricsLogger.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/MetricsLogger.java
index 09f557442b..735e3633f7 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/MetricsLogger.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/MetricsLogger.java
@@ -27,6 +27,7 @@
   String KEY_FRAMES_SKIPPED_COUNT = "frames_skipped_count";
   String KEY_MAX_CONSECUTIVE_FRAMES_DROPPED_COUNT = "maximum_consecutive_frames_dropped_count";
   String KEY_TEST_NAME = "test_name";
+  String KEY_IS_CDD_LIMITED_RETRY = "is_cdd_limited_retry";
 
   /**
    * Logs an int metric provided from a test.
@@ -52,6 +53,14 @@
    */
   void logMetric(String key, String value);
 
+  /**
+   * Logs a boolean metric provided from a test.
+   *
+   * @param key The key of the metric to be logged.
+   * @param value The value of the metric to be logged.
+   */
+  void logMetric(String key, boolean value);
+
   /**
    * Closes the logger.
    */
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/TestUtil.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/TestUtil.java
index 77432e369a..3f992205c4 100644
--- a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/TestUtil.java
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/TestUtil.java
@@ -15,16 +15,14 @@
  */
 package com.google.android.exoplayer.playbacktests.util;
 
+import android.content.Context;
+import android.os.ConditionVariable;
+import android.util.Log;
 import com.google.android.exoplayer.upstream.DefaultUriDataSource;
 import com.google.android.exoplayer.upstream.UriLoadable;
 import com.google.android.exoplayer.util.ManifestFetcher;
 import com.google.android.exoplayer.util.ManifestFetcher.ManifestCallback;
 import com.google.android.exoplayer.util.Util;
-
-import android.content.Context;
-import android.os.ConditionVariable;
-import android.util.Log;
-
 import java.io.IOException;
 import java.io.InterruptedIOException;
 
diff --git a/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/WidevineMediaDrmCallback.java b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/WidevineMediaDrmCallback.java
new file mode 100644
index 0000000000..4a020006c7
--- /dev/null
+++ b/playbacktests/src/main/java/com/google/android/exoplayer/playbacktests/util/WidevineMediaDrmCallback.java
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer.playbacktests.util;
+
+import android.annotation.TargetApi;
+import android.text.TextUtils;
+import com.google.android.exoplayer.drm.ExoMediaDrm.KeyRequest;
+import com.google.android.exoplayer.drm.ExoMediaDrm.ProvisionRequest;
+import com.google.android.exoplayer.drm.MediaDrmCallback;
+import com.google.android.exoplayer.util.Util;
+import java.io.IOException;
+import java.nio.charset.Charset;
+import java.util.UUID;
+
+/**
+ * A {@link MediaDrmCallback} for Widevine test content.
+ */
+@TargetApi(18)
+public final class WidevineMediaDrmCallback implements MediaDrmCallback {
+
+  private static final String WIDEVINE_GTS_DEFAULT_BASE_URI =
+      "https://proxy.uat.widevine.com/proxy";
+
+  private final String defaultUri;
+
+  public WidevineMediaDrmCallback(String contentId, String provider) {
+    String params = "?video_id=" + contentId + "&provider=" + provider;
+    defaultUri = WIDEVINE_GTS_DEFAULT_BASE_URI + params;
+  }
+
+  @Override
+  public byte[] executeProvisionRequest(UUID uuid, ProvisionRequest request) throws IOException {
+    String url = request.getDefaultUrl() + "&signedRequest=" + new String(request.getData(),
+        Charset.defaultCharset());
+    return Util.executePost(url, null, null);
+  }
+
+  @Override
+  public byte[] executeKeyRequest(UUID uuid, KeyRequest request) throws IOException {
+    String url = request.getDefaultUrl();
+    if (TextUtils.isEmpty(url)) {
+      url = defaultUri;
+    }
+    return Util.executePost(url, request.getData(), null);
+  }
+
+}
