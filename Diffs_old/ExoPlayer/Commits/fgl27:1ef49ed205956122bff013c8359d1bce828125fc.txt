diff --git a/library/core/src/main/java/com/google/android/exoplayer2/util/GlUtil.java b/library/core/src/main/java/com/google/android/exoplayer2/util/GlUtil.java
index 915e855d23..7fc46dc363 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/util/GlUtil.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/util/GlUtil.java
@@ -51,7 +51,7 @@ public static void checkGlError() {
   }
 
   /**
-   * Builds a GL shader program from vertex & fragment shader code.
+   * Builds a GL shader program from vertex and fragment shader code.
    *
    * @param vertexCode GLES20 vertex shader program as arrays of strings. Strings are joined by
    *     adding a new line character in between each of them.
@@ -64,7 +64,7 @@ public static int compileProgram(String[] vertexCode, String[] fragmentCode) {
   }
 
   /**
-   * Builds a GL shader program from vertex & fragment shader code.
+   * Builds a GL shader program from vertex and fragment shader code.
    *
    * @param vertexCode GLES20 vertex shader program.
    * @param fragmentCode GLES20 fragment shader program.
diff --git a/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/CanvasRenderer.java b/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/CanvasRenderer.java
index fdd59101e7..3d7e57bbd2 100644
--- a/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/CanvasRenderer.java
+++ b/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/CanvasRenderer.java
@@ -72,7 +72,7 @@
     "}"
   };
 
-  // The quad has 2 triangles built from 4 total vertices. Each vertex has 3 position & 2 texture
+  // The quad has 2 triangles built from 4 total vertices. Each vertex has 3 position and 2 texture
   // coordinates.
   private static final int POSITION_COORDS_PER_VERTEX = 3;
   private static final int TEXTURE_COORDS_PER_VERTEX = 2;
@@ -253,8 +253,8 @@ public void shutdown() {
    * Translates an orientation into pixel coordinates on the canvas.
    *
    * <p>This is a minimal hit detection system that works for this quad because it has no model
-   * matrix. All the math is based on the fact that its size & distance are hard-coded into this
-   * class. For a more complex 3D mesh, a general bounding box & ray collision system would be
+   * matrix. All the math is based on the fact that its size and distance are hard-coded into this
+   * class. For a more complex 3D mesh, a general bounding box and ray collision system would be
    * required.
    *
    * @param yaw Yaw of the orientation in radians.
@@ -287,7 +287,7 @@ public PointF translateClick(float yaw, float pitch) {
       return null;
     }
     // Convert from the polar coordinates of the controller to the rectangular coordinates of the
-    // View. Note the negative yaw & pitch used to generate Android-compliant x & y coordinates.
+    // View. Note the negative yaw and pitch used to generate Android-compliant x and y coordinates.
     float clickXPixel = (float) (widthPixel - clickXUnit * widthPixel / widthUnit);
     float clickYPixel = (float) (heightPixel - clickYUnit * heightPixel / heightUnit);
     return new PointF(clickXPixel, clickYPixel);
