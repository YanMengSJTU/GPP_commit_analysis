diff --git a/library/src/main/java/com/google/android/exoplayer/chunk/VideoFormatSelectorUtil.java b/library/src/main/java/com/google/android/exoplayer/chunk/VideoFormatSelectorUtil.java
index 84717b9c79..b2f1c39f37 100644
--- a/library/src/main/java/com/google/android/exoplayer/chunk/VideoFormatSelectorUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/chunk/VideoFormatSelectorUtil.java
@@ -152,8 +152,12 @@ private static boolean isFormatPlayable(Format format, String[] allowedContainer
       return false;
     }
     if (format.width > 0 && format.height > 0) {
-      String videoMediaMimeType = MimeTypes.getVideoMediaMimeType(format.codecs);
-      if (Util.SDK_INT >= 21 && !MimeTypes.VIDEO_UNKNOWN.equals(videoMediaMimeType)) {
+      if (Util.SDK_INT >= 21) {
+        String videoMediaMimeType = MimeTypes.getVideoMediaMimeType(format.codecs);
+        if (MimeTypes.VIDEO_UNKNOWN.equals(videoMediaMimeType)) {
+          // Assume the video is H.264.
+          videoMediaMimeType = MimeTypes.VIDEO_H264;
+        }
         if (format.frameRate > 0) {
           return MediaCodecUtil.isSizeAndRateSupportedV21(videoMediaMimeType, false, format.width,
               format.height, format.frameRate);
@@ -162,9 +166,9 @@ private static boolean isFormatPlayable(Format format, String[] allowedContainer
               format.height);
         }
       }
-      //Assuming that the media is H.264
+      // Assume the video is H.264.
       if (format.width * format.height > maxDecodableFrameSize) {
-        // Filtering stream that device cannot play
+        // Filtering format because it exceeds the maximum decodable frame size.
         return false;
       }
     }
