diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavHeaderReader.java b/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavHeaderReader.java
index 3a0ab83265..2d24bb1be9 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavHeaderReader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavHeaderReader.java
@@ -53,8 +53,8 @@ public static WavHeader peek(ExtractorInput input)
     ParsableByteArray scratch = new ParsableByteArray(16);
 
     // Attempt to read the RIFF chunk.
-    ChunkHeader riffChunkHeader = ChunkHeader.peek(input, scratch);
-    if (riffChunkHeader.id != Util.getIntegerCodeForString("RIFF")) {
+    ChunkHeader chunkHeader = ChunkHeader.peek(input, scratch);
+    if (chunkHeader.id != Util.getIntegerCodeForString("RIFF")) {
       return null;
     }
 
@@ -66,13 +66,18 @@ public static WavHeader peek(ExtractorInput input)
       return null;
     }
 
-    // Attempt to read the format chunk.
-    ChunkHeader formatChunkHeader = ChunkHeader.peek(input, scratch);
-    if (formatChunkHeader.id != Util.getIntegerCodeForString("fmt ")) {
+    // If a bext chunk is present, skip it. Otherwise we expect a format chunk.
+    chunkHeader = ChunkHeader.peek(input, scratch);
+    if (chunkHeader.id == Util.getIntegerCodeForString("bext")) {
+      input.advancePeekPosition((int) chunkHeader.size);
+      chunkHeader = ChunkHeader.peek(input, scratch);
+    }
+
+    if (chunkHeader.id != Util.getIntegerCodeForString("fmt ")) {
       throw new ParserException(
-          "Second chunk in RIFF WAV should be format; got: " + formatChunkHeader.id);
+          "Expected format chunk; found: " + chunkHeader.id);
     }
-    Assertions.checkState(formatChunkHeader.size >= 16);
+    Assertions.checkState(chunkHeader.size >= 16);
 
     input.peekFully(scratch.data, 0, 16);
     scratch.setPosition(0);
@@ -102,7 +107,7 @@ public static WavHeader peek(ExtractorInput input)
     }
 
     // If present, skip extensionSize, validBitsPerSample, channelMask, subFormatGuid, ...
-    input.advancePeekPosition((int) formatChunkHeader.size - 16);
+    input.advancePeekPosition((int) chunkHeader.size - 16);
 
     return new WavHeader(
         numChannels, sampleRateHz, averageBytesPerSecond, blockAlignment, bitsPerSample);
