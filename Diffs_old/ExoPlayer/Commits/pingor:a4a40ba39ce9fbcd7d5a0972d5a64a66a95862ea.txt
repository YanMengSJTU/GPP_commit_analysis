diff --git a/library/src/androidTest/assets/ttml/chain_multiple_styles.xml b/library/src/androidTest/assets/ttml/chain_multiple_styles.xml
index 7bcce6527d..307a44a507 100644
--- a/library/src/androidTest/assets/ttml/chain_multiple_styles.xml
+++ b/library/src/androidTest/assets/ttml/chain_multiple_styles.xml
@@ -1,7 +1,8 @@
-<tt xmlns:ttm="http://www.w3.org/2006/10/ttaf1#metadata" xmlns:ttp="http://www.w3.org/2006/10/ttaf1#parameter"
-  xmlns:tts="http://www.w3.org/2006/10/ttaf1#style"
-  xmlns="http://www.w3.org/ns/ttml"
-  xmlns="http://www.w3.org/2006/10/ttaf1">
+<tt xmlns:ttm="http://www.w3.org/2006/10/ttaf1#metadata"
+    xmlns:ttp="http://www.w3.org/2006/10/ttaf1#parameter"
+    xmlns:tts="http://www.w3.org/2006/10/ttaf1#style"
+    xmlns="http://www.w3.org/ns/ttml"
+    xmlns="http://www.w3.org/2006/10/ttaf1">
   <head>
     <styling>
       <style id="s0"
diff --git a/library/src/androidTest/assets/ttml/font_size.xml b/library/src/androidTest/assets/ttml/font_size.xml
index adbb8d6926..a25fff1cf9 100644
--- a/library/src/androidTest/assets/ttml/font_size.xml
+++ b/library/src/androidTest/assets/ttml/font_size.xml
@@ -1,7 +1,8 @@
-<tt xmlns:ttm="http://www.w3.org/2006/10/ttaf1#metadata" xmlns:ttp="http://www.w3.org/2006/10/ttaf1#parameter"
-  xmlns:tts="http://www.w3.org/2006/10/ttaf1#style"
-  xmlns="http://www.w3.org/ns/ttml"
-  xmlns="http://www.w3.org/2006/10/ttaf1">
+<tt xmlns:ttm="http://www.w3.org/2006/10/ttaf1#metadata"
+    xmlns:ttp="http://www.w3.org/2006/10/ttaf1#parameter"
+    xmlns:tts="http://www.w3.org/2006/10/ttaf1#style"
+    xmlns="http://www.w3.org/ns/ttml"
+    xmlns="http://www.w3.org/2006/10/ttaf1">
   <head>
     <styling>
       <style id="s0"
diff --git a/library/src/androidTest/assets/ttml/inherit_multiple_styles.xml b/library/src/androidTest/assets/ttml/inherit_multiple_styles.xml
index 3ee089c3ff..19ce4defc2 100644
--- a/library/src/androidTest/assets/ttml/inherit_multiple_styles.xml
+++ b/library/src/androidTest/assets/ttml/inherit_multiple_styles.xml
@@ -1,7 +1,8 @@
-<tt xmlns:ttm="http://www.w3.org/2006/10/ttaf1#metadata" xmlns:ttp="http://www.w3.org/2006/10/ttaf1#parameter"
-  xmlns:tts="http://www.w3.org/2006/10/ttaf1#style"
-  xmlns="http://www.w3.org/ns/ttml"
-  xmlns="http://www.w3.org/2006/10/ttaf1">
+<tt xmlns:ttm="http://www.w3.org/2006/10/ttaf1#metadata"
+    xmlns:ttp="http://www.w3.org/2006/10/ttaf1#parameter"
+    xmlns:tts="http://www.w3.org/2006/10/ttaf1#style"
+    xmlns="http://www.w3.org/ns/ttml"
+    xmlns="http://www.w3.org/2006/10/ttaf1">
   <head>
     <styling>
       <style id="s0"
diff --git a/library/src/androidTest/assets/ttml/multiple_regions.xml b/library/src/androidTest/assets/ttml/multiple_regions.xml
new file mode 100644
index 0000000000..edc704d8b1
--- /dev/null
+++ b/library/src/androidTest/assets/ttml/multiple_regions.xml
@@ -0,0 +1,29 @@
+<tt xmlns="http://www.w3.org/ns/ttml"
+    xmlns="http://www.w3.org/2006/10/ttaf1"
+    xmlns:id="http://www.w3.org/XML/1998/namespace"
+    xmlns:ttp="http://www.w3.org/ns/ttml#parameter"
+    xmlns:tts="http://www.w3.org/ns/ttml#styling"
+    xmlns:ttm="http://www.w3.org/ns/ttml#metadata">
+    <head>
+        <layout>
+            <region xml:id="region1" ttm:origin="10% 10%" extent="20% 20%"/>
+            <region xml:id="region2" ttm:origin="40% 40%" extent="20% 20%"/>
+            <region xml:id="region3" ttm:origin="10% 80%" extent="10% 10%"/>
+            <region xml:id="region4" ttm:origin="60% 10%" extent="20% 20%"/>
+            <region xml:id="ultimate" ttm:origin="45% 45%" extent="35% 35%"/>
+        </layout>
+    </head>
+    <body>
+        <div>
+            <p begin="1s" end="4s" region="region1">lorem</p>
+            <p begin="5s" end="8s" region="region2">ipsum</p>
+            <p begin="9s" end="18s" region="region3">dolor</p>
+            <p begin="1s" end="4s" region="region4">amet</p>
+        </div>
+        <div region="ultimate">
+            <p begin="21s" end="34s">She first said this</p>
+            <p begin="25s" end="34s">Then this</p>
+            <p begin="29s" end="34s">Finally this</p>
+        </div>
+    </body>
+</tt>
diff --git a/library/src/androidTest/assets/ttml/namespace_confusion.xml b/library/src/androidTest/assets/ttml/namespace_confusion.xml
deleted file mode 100644
index 5b9025cd94..0000000000
--- a/library/src/androidTest/assets/ttml/namespace_confusion.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<tt xmlns:ttm="http://www.w3.org/2006/10/ttaf1#metadata" 
-    xmlns:ttp="http://www.w3.org/2006/10/ttaf1#parameter"
-    xmlns:tts="http://www.w3.org/2006/10/ttaf1#style"
-    xmlns="http://www.w3.org/ns/ttml"
-    xmlns="http://www.w3.org/2006/10/ttaf1">
-  <body>
-    <div>
-      <p begin="10s" end="18s"
-          tts:backgroundColor="black"
-          abc:fontFamily="sansSerif"
-          def:fontStyle="italic"
-          ghi:textDecoration="lineThrough"
-          jkl:color="yellow">text 1</p>
-    </div>
-  </body>
-</tt>
-
diff --git a/library/src/androidTest/assets/ttml/namespace_not_declared.xml b/library/src/androidTest/assets/ttml/namespace_not_declared.xml
deleted file mode 100644
index 25e8369a34..0000000000
--- a/library/src/androidTest/assets/ttml/namespace_not_declared.xml
+++ /dev/null
@@ -1,13 +0,0 @@
-<tt>
-  <body>
-    <div>
-      <p begin="10s" end="18s"
-          tts:backgroundColor="black"
-          abc:fontFamily="sansSerif"
-          def:fontStyle="italic"
-          ghi:textDecoration="lineThrough"
-          jkl:color="yellow">text 1</p>
-    </div>
-  </body>
-</tt>
-
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlParserTest.java
index 64423c33f8..e516138eaf 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlParserTest.java
@@ -41,32 +41,22 @@
  */
 public final class TtmlParserTest extends InstrumentationTestCase {
 
-  private static final String INLINE_ATTRIBUTES_TTML_FILE =
-      "ttml/inline_style_attributes.xml";
-  private static final String INHERIT_STYLE_TTML_FILE =
-      "ttml/inherit_style.xml";
+  private static final String INLINE_ATTRIBUTES_TTML_FILE = "ttml/inline_style_attributes.xml";
+  private static final String INHERIT_STYLE_TTML_FILE = "ttml/inherit_style.xml";
   private static final String INHERIT_STYLE_OVERRIDE_TTML_FILE =
       "ttml/inherit_and_override_style.xml";
   private static final String INHERIT_GLOBAL_AND_PARENT_TTML_FILE =
       "ttml/inherit_global_and_parent.xml";
   private static final String INHERIT_MULTIPLE_STYLES_TTML_FILE =
       "ttml/inherit_multiple_styles.xml";
-  private static final String CHAIN_MULTIPLE_STYLES_TTML_FILE =
-      "ttml/chain_multiple_styles.xml";
+  private static final String CHAIN_MULTIPLE_STYLES_TTML_FILE = "ttml/chain_multiple_styles.xml";
+  private static final String MULTIPLE_REGIONS_TTML_FILE = "ttml/multiple_regions.xml";
   private static final String NO_UNDERLINE_LINETHROUGH_TTML_FILE =
       "ttml/no_underline_linethrough.xml";
-  private static final String NAMESPACE_CONFUSION_TTML_FILE =
-      "ttml/namespace_confusion.xml";
-  private static final String NAMESPACE_NOT_DECLARED_TTML_FILE =
-      "ttml/namespace_not_declared.xml";
-  private static final String FONT_SIZE_TTML_FILE =
-      "ttml/font_size.xml";
-  private static final String FONT_SIZE_MISSING_UNIT_TTML_FILE =
-      "ttml/font_size_no_unit.xml";
-  private static final String FONT_SIZE_INVALID_TTML_FILE =
-      "ttml/font_size_invalid.xml";
-  private static final String FONT_SIZE_EMPTY_TTML_FILE =
-      "ttml/font_size_empty.xml";
+  private static final String FONT_SIZE_TTML_FILE = "ttml/font_size.xml";
+  private static final String FONT_SIZE_MISSING_UNIT_TTML_FILE = "ttml/font_size_no_unit.xml";
+  private static final String FONT_SIZE_INVALID_TTML_FILE = "ttml/font_size_invalid.xml";
+  private static final String FONT_SIZE_EMPTY_TTML_FILE = "ttml/font_size_empty.xml";
 
   public void testInlineAttributes() throws IOException {
     TtmlSubtitle subtitle = getSubtitle(INLINE_ATTRIBUTES_TTML_FILE);
@@ -77,7 +67,7 @@ public void testInlineAttributes() throws IOException {
     TtmlNode body = queryChildrenForTag(root, TtmlNode.TAG_BODY, 0);
     TtmlNode firstDiv = queryChildrenForTag(body, TtmlNode.TAG_DIV, 0);
     TtmlStyle firstPStyle = queryChildrenForTag(firstDiv, TtmlNode.TAG_P, 0).style;
-    assertEquals(TtmlColorParser.parseColor("yellow"), firstPStyle.getColor());
+    assertEquals(TtmlColorParser.parseColor("yellow"), firstPStyle.getFontColor());
     assertEquals(TtmlColorParser.parseColor("blue"), firstPStyle.getBackgroundColor());
     assertEquals("serif", firstPStyle.getFontFamily());
     assertEquals(TtmlStyle.STYLE_BOLD_ITALIC, firstPStyle.getStyle());
@@ -92,29 +82,28 @@ public void testInheritInlineAttributes() throws IOException {
   }
 
   /**
-   * regression test for devices on JellyBean where some named colors are not correctly defined
+   * Regression test for devices on JellyBean where some named colors are not correctly defined
    * on framework level. Tests that <i>lime</i> resolves to <code>#FF00FF00</code> not
    * <code>#00FF00</code>.
    *
-   * See: https://github.com/android/platform_frameworks_base/blob/jb-mr2-release/
-   *          graphics/java/android/graphics/Color.java#L414
-   *      https://github.com/android/platform_frameworks_base/blob/kitkat-mr2.2-release/
-   *          graphics/java/android/graphics/Color.java#L414
-   *
+   * @see <a href="https://github.com/android/platform_frameworks_base/blob/jb-mr2-release/graphics/java/android/graphics/Color.java#L414">
+   *     JellyBean Color</a>
+   *     <a href="https://github.com/android/platform_frameworks_base/blob/kitkat-mr2.2-release/graphics/java/android/graphics/Color.java#L414">
+   *     Kitkat Color</a>
    * @throws IOException thrown if reading subtitle file fails.
    */
   public void testLime() throws IOException {
     TtmlSubtitle subtitle = getSubtitle(INLINE_ATTRIBUTES_TTML_FILE);
     assertEquals(4, subtitle.getEventTimeCount());
-    assertSpans(subtitle, 20, "text 2", "sansSerif", TtmlStyle.STYLE_ITALIC,
-        TtmlColorParser.CYAN, TtmlColorParser.LIME, false, true, null);
+    assertSpans(subtitle, 20, "text 2", "sansSerif", TtmlStyle.STYLE_ITALIC, TtmlColorParser.CYAN,
+        TtmlColorParser.LIME, false, true, null);
   }
 
   public void testInheritGlobalStyle() throws IOException {
     TtmlSubtitle subtitle = getSubtitle(INHERIT_STYLE_TTML_FILE);
     assertEquals(2, subtitle.getEventTimeCount());
-    assertSpans(subtitle, 10, "text 1", "serif", TtmlStyle.STYLE_BOLD_ITALIC,
-        TtmlColorParser.BLUE, TtmlColorParser.YELLOW, true, false, null);
+    assertSpans(subtitle, 10, "text 1", "serif", TtmlStyle.STYLE_BOLD_ITALIC, TtmlColorParser.BLUE,
+        TtmlColorParser.YELLOW, true, false, null);
   }
 
   public void testInheritGlobalStyleOverriddenByInlineAttributes() throws IOException {
@@ -131,11 +120,10 @@ public void testInheritGlobalAndParent() throws IOException {
     TtmlSubtitle subtitle = getSubtitle(INHERIT_GLOBAL_AND_PARENT_TTML_FILE);
     assertEquals(4, subtitle.getEventTimeCount());
 
-    assertSpans(subtitle, 10, "text 1", "sansSerif", TtmlStyle.STYLE_NORMAL,
-        TtmlColorParser.RED, TtmlColorParser.parseColor("lime"), false, true,
-        Layout.Alignment.ALIGN_CENTER);
-    assertSpans(subtitle, 20, "text 2", "serif", TtmlStyle.STYLE_BOLD_ITALIC,
-        TtmlColorParser.BLUE, TtmlColorParser.YELLOW, true, true, Layout.Alignment.ALIGN_CENTER);
+    assertSpans(subtitle, 10, "text 1", "sansSerif", TtmlStyle.STYLE_NORMAL, TtmlColorParser.RED,
+        TtmlColorParser.parseColor("lime"), false, true, Layout.Alignment.ALIGN_CENTER);
+    assertSpans(subtitle, 20, "text 2", "serif", TtmlStyle.STYLE_BOLD_ITALIC, TtmlColorParser.BLUE,
+        TtmlColorParser.YELLOW, true, true, Layout.Alignment.ALIGN_CENTER);
   }
 
   public void testInheritMultipleStyles() throws IOException {
@@ -149,7 +137,6 @@ public void testInheritMultipleStyles() throws IOException {
   public void testInheritMultipleStylesWithoutLocalAttributes() throws IOException {
     TtmlSubtitle subtitle = getSubtitle(INHERIT_MULTIPLE_STYLES_TTML_FILE);
     assertEquals(12, subtitle.getEventTimeCount());
-
     assertSpans(subtitle, 20, "text 2", "sansSerif", TtmlStyle.STYLE_BOLD_ITALIC,
         TtmlColorParser.BLUE, TtmlColorParser.BLACK, false, true, null);
 
@@ -158,11 +145,54 @@ public void testInheritMultipleStylesWithoutLocalAttributes() throws IOException
   public void testMergeMultipleStylesWithParentStyle() throws IOException {
     TtmlSubtitle subtitle = getSubtitle(INHERIT_MULTIPLE_STYLES_TTML_FILE);
     assertEquals(12, subtitle.getEventTimeCount());
-
     assertSpans(subtitle, 30, "text 2.5", "sansSerifInline", TtmlStyle.STYLE_ITALIC,
         TtmlColorParser.RED, TtmlColorParser.YELLOW, true, true, null);
   }
 
+  public void testMultipleRegions() throws IOException {
+    TtmlSubtitle subtitle = getSubtitle(MULTIPLE_REGIONS_TTML_FILE);
+    List<Cue> output = subtitle.getCues(1000000);
+    assertEquals(2, output.size());
+    Cue ttmlCue = output.get(0);
+    assertEquals("lorem", ttmlCue.text.toString());
+    assertEquals(10.f / 100.f, ttmlCue.position);
+    assertEquals(10.f / 100.f, ttmlCue.line);
+    ttmlCue = output.get(1);
+    assertEquals("amet", ttmlCue.text.toString());
+    assertEquals(60.f / 100.f, ttmlCue.position);
+    assertEquals(10.f / 100.f, ttmlCue.line);
+
+    output = subtitle.getCues(5000000);
+    assertEquals(1, output.size());
+    ttmlCue = output.get(0);
+    assertEquals("ipsum", ttmlCue.text.toString());
+    assertEquals(40.f / 100.f, ttmlCue.position);
+    assertEquals(40.f / 100.f, ttmlCue.line);
+
+    output = subtitle.getCues(9000000);
+    assertEquals(1, output.size());
+    ttmlCue = output.get(0);
+    assertEquals("dolor", ttmlCue.text.toString());
+    assertEquals(10.f / 100.f, ttmlCue.position);
+    assertEquals(80.f / 100.f, ttmlCue.line);
+
+    output = subtitle.getCues(21000000);
+    assertEquals(1, output.size());
+    ttmlCue = output.get(0);
+    assertEquals("She first said this", ttmlCue.text.toString());
+    assertEquals(45.f / 100.f, ttmlCue.position);
+    assertEquals(45.f / 100.f, ttmlCue.line);
+    output = subtitle.getCues(25000000);
+    ttmlCue = output.get(0);
+    assertEquals("She first said this\nThen this", ttmlCue.text.toString());
+    output = subtitle.getCues(29000000);
+    assertEquals(1, output.size());
+    ttmlCue = output.get(0);
+    assertEquals("She first said this\nThen this\nFinally this", ttmlCue.text.toString());
+    assertEquals(45.f / 100.f, ttmlCue.position);
+    assertEquals(45.f / 100.f, ttmlCue.line);
+  }
+
   public void testEmptyStyleAttribute() throws IOException {
     TtmlSubtitle subtitle = getSubtitle(INHERIT_MULTIPLE_STYLES_TTML_FILE);
     assertEquals(12, subtitle.getEventTimeCount());
@@ -206,13 +236,13 @@ public void testMultipleChaining() throws IOException {
     TtmlStyle style = globalStyles.get("s2");
     assertEquals("serif", style.getFontFamily());
     assertEquals(TtmlColorParser.RED, style.getBackgroundColor());
-    assertEquals(TtmlColorParser.BLACK, style.getColor());
+    assertEquals(TtmlColorParser.BLACK, style.getFontColor());
     assertEquals(TtmlStyle.STYLE_BOLD_ITALIC, style.getStyle());
     assertTrue(style.isLinethrough());
 
     style = globalStyles.get("s3");
     // only difference: color must be RED
-    assertEquals(TtmlColorParser.RED, style.getColor());
+    assertEquals(TtmlColorParser.RED, style.getFontColor());
     assertEquals("serif", style.getFontFamily());
     assertEquals(TtmlColorParser.RED, style.getBackgroundColor());
     assertEquals(TtmlStyle.STYLE_BOLD_ITALIC, style.getStyle());
@@ -244,43 +274,6 @@ public void testNoLinethrough() throws IOException {
         style.isLinethrough());
   }
 
-  public void testNamspaceConfusionDoesNotHurt() throws IOException {
-    TtmlSubtitle subtitle = getSubtitle(NAMESPACE_CONFUSION_TTML_FILE);
-    assertEquals(2, subtitle.getEventTimeCount());
-
-    TtmlNode root = subtitle.getRoot();
-    TtmlNode body = queryChildrenForTag(root, TtmlNode.TAG_BODY, 0);
-    TtmlNode div = queryChildrenForTag(body, TtmlNode.TAG_DIV, 0);
-    TtmlStyle style = queryChildrenForTag(div, TtmlNode.TAG_P, 0).style;
-
-    assertNotNull(style);
-    assertEquals(TtmlColorParser.BLACK, style.getBackgroundColor());
-    assertEquals(TtmlColorParser.YELLOW, style.getColor());
-    assertEquals(TtmlStyle.STYLE_ITALIC, style.getStyle());
-    assertEquals("sansSerif", style.getFontFamily());
-    assertFalse(style.isUnderline());
-    assertTrue(style.isLinethrough());
-
-  }
-
-  public void testNamespaceNotDeclared() throws IOException {
-    TtmlSubtitle subtitle = getSubtitle(NAMESPACE_NOT_DECLARED_TTML_FILE);
-    assertEquals(2, subtitle.getEventTimeCount());
-
-    TtmlNode root = subtitle.getRoot();
-    TtmlNode body = queryChildrenForTag(root, TtmlNode.TAG_BODY, 0);
-    TtmlNode div = queryChildrenForTag(body, TtmlNode.TAG_DIV, 0);
-    TtmlStyle style = queryChildrenForTag(div, TtmlNode.TAG_P, 0).style;
-
-    assertNotNull(style);
-    assertEquals(TtmlColorParser.BLACK, style.getBackgroundColor());
-    assertEquals(TtmlColorParser.YELLOW, style.getColor());
-    assertEquals(TtmlStyle.STYLE_ITALIC, style.getStyle());
-    assertEquals("sansSerif", style.getFontFamily());
-    assertFalse(style.isUnderline());
-    assertTrue(style.isLinethrough());
-  }
-
   public void testFontSizeSpans() throws IOException {
     TtmlSubtitle subtitle = getSubtitle(FONT_SIZE_TTML_FILE);
     assertEquals(10, subtitle.getEventTimeCount());
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlRenderUtilTest.java b/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlRenderUtilTest.java
index bdfeda663b..b55b658c8a 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlRenderUtilTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlRenderUtilTest.java
@@ -48,7 +48,7 @@ public void testResolveStyleMultipleReferentialStyles() {
     // inherited from s0
     assertEquals(Color.BLACK, resolved.getBackgroundColor());
     // inherited from s1
-    assertEquals(Color.RED, resolved.getColor());
+    assertEquals(Color.RED, resolved.getFontColor());
     // merged from s0 and s1
     assertEquals(TtmlStyle.STYLE_BOLD_ITALIC, resolved.getStyle());
   }
@@ -101,7 +101,7 @@ public void testResolveStyleOnlyInlineStyle() {
     TtmlStyle s1 = new TtmlStyle();
     s1.setId("s1");
     s1.setBackgroundColor(Color.RED);
-    s1.setColor(Color.RED);
+    s1.setFontColor(Color.RED);
     s1.setItalic(true);
     globalStyles.put(s1.getId(), s1);
 
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlStyleTest.java b/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlStyleTest.java
index 12f6a9fe9a..60aa0b2307 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlStyleTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/text/ttml/TtmlStyleTest.java
@@ -42,8 +42,8 @@ public void testInheritStyle() {
         assertTrue(style.isLinethrough());
         assertEquals(TtmlStyle.STYLE_BOLD_ITALIC, style.getStyle());
         assertEquals(FONT_FAMILY, style.getFontFamily());
-        assertEquals(Color.WHITE, style.getColor());
-        assertFalse("do not inherit backgroundColor", style.hasBackgroundColorSpecified());
+        assertEquals(Color.WHITE, style.getFontColor());
+        assertFalse("do not inherit backgroundColor", style.hasBackgroundColor());
     }
 
     public void testChainStyle() {
@@ -53,7 +53,7 @@ public void testChainStyle() {
         assertTrue(style.isLinethrough());
         assertEquals(TtmlStyle.STYLE_BOLD_ITALIC, style.getStyle());
         assertEquals(FONT_FAMILY, style.getFontFamily());
-        assertEquals(FOREGROUND_COLOR, style.getColor());
+        assertEquals(FOREGROUND_COLOR, style.getFontColor());
         // do inherit backgroundColor when chaining
         assertEquals("do not inherit backgroundColor when chaining",
             BACKGROUND_COLOR, style.getBackgroundColor());
@@ -65,7 +65,7 @@ private TtmlStyle createAncestorStyle() {
         ancestor.setItalic(true);
         ancestor.setBold(true);
         ancestor.setBackgroundColor(BACKGROUND_COLOR);
-        ancestor.setColor(FOREGROUND_COLOR);
+        ancestor.setFontColor(FOREGROUND_COLOR);
         ancestor.setLinethrough(true);
         ancestor.setUnderline(true);
         ancestor.setFontFamily(FONT_FAMILY);
@@ -109,17 +109,17 @@ public void testFontFamily() {
     }
 
     public void testColor() {
-        assertFalse(style.hasColorSpecified());
-        style.setColor(Color.BLACK);
-        assertEquals(Color.BLACK, style.getColor());
-        assertTrue(style.hasColorSpecified());
+        assertFalse(style.hasFontColor());
+        style.setFontColor(Color.BLACK);
+        assertEquals(Color.BLACK, style.getFontColor());
+        assertTrue(style.hasFontColor());
     }
 
     public void testBackgroundColor() {
-        assertFalse(style.hasBackgroundColorSpecified());
+        assertFalse(style.hasBackgroundColor());
         style.setBackgroundColor(Color.BLACK);
         assertEquals(Color.BLACK, style.getBackgroundColor());
-        assertTrue(style.hasBackgroundColorSpecified());
+        assertTrue(style.hasBackgroundColor());
     }
 
     public void testId() {
diff --git a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlNode.java b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlNode.java
index d393875c57..0a2e1087d8 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlNode.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlNode.java
@@ -15,12 +15,17 @@
  */
 package com.google.android.exoplayer.text.ttml;
 
+import com.google.android.exoplayer.text.Cue;
+import com.google.android.exoplayer.util.Assertions;
+
 import android.text.SpannableStringBuilder;
 
 import java.util.ArrayList;
-import java.util.Iterator;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
+import java.util.TreeMap;
 import java.util.TreeSet;
 
 /**
@@ -45,6 +50,7 @@
   public static final String TAG_SMPTE_DATA = "smpte:data";
   public static final String TAG_SMPTE_INFORMATION = "smpte:information";
 
+  public static final String ANONYMOUS_REGION_ID = "";
   public static final String ATTR_ID = "id";
   public static final String ATTR_TTS_BACKGROUND_COLOR = "backgroundColor";
   public static final String ATTR_TTS_FONT_STYLE = "fontStyle";
@@ -52,6 +58,7 @@
   public static final String ATTR_TTS_FONT_FAMILY = "fontFamily";
   public static final String ATTR_TTS_FONT_WEIGHT = "fontWeight";
   public static final String ATTR_TTS_COLOR = "color";
+  public static final String ATTR_TTS_ORIGIN = "origin";
   public static final String ATTR_TTS_TEXT_DECORATION = "textDecoration";
   public static final String ATTR_TTS_TEXT_ALIGN = "textAlign";
 
@@ -74,24 +81,26 @@
   public final long startTimeUs;
   public final long endTimeUs;
   public final TtmlStyle style;
+  public final String regionId;
   private String[] styleIds;
 
   private List<TtmlNode> children;
-  private int start;
-  private int end;
+
+  private HashMap<String, Integer> nodeStartsByRegion;
+  private HashMap<String, Integer> nodeEndsByRegion;
 
   public static TtmlNode buildTextNode(String text) {
     return new TtmlNode(null, TtmlRenderUtil.applyTextElementSpacePolicy(text), UNDEFINED_TIME,
-        UNDEFINED_TIME, null, null);
+        UNDEFINED_TIME, null, null, ANONYMOUS_REGION_ID);
   }
 
   public static TtmlNode buildNode(String tag, long startTimeUs, long endTimeUs,
-      TtmlStyle style, String[] styleIds) {
-    return new TtmlNode(tag, null, startTimeUs, endTimeUs, style, styleIds);
+      TtmlStyle style, String[] styleIds, String regionId) {
+    return new TtmlNode(tag, null, startTimeUs, endTimeUs, style, styleIds, regionId);
   }
 
   private TtmlNode(String tag, String text, long startTimeUs, long endTimeUs,
-      TtmlStyle style, String[] styleIds) {
+      TtmlStyle style, String[] styleIds, String regionId) {
     this.tag = tag;
     this.text = text;
     this.style = style;
@@ -99,6 +108,9 @@ private TtmlNode(String tag, String text, long startTimeUs, long endTimeUs,
     this.isTextNode = text != null;
     this.startTimeUs = startTimeUs;
     this.endTimeUs = endTimeUs;
+    this.regionId = Assertions.checkNotNull(regionId);
+    nodeStartsByRegion = new HashMap<>();
+    nodeEndsByRegion = new HashMap<>();
   }
 
   public boolean isActive(long timeUs) {
@@ -130,10 +142,8 @@ public int getChildCount() {
     TreeSet<Long> eventTimeSet = new TreeSet<>();
     getEventTimes(eventTimeSet, false);
     long[] eventTimes = new long[eventTimeSet.size()];
-    Iterator<Long> eventTimeIterator = eventTimeSet.iterator();
     int i = 0;
-    while (eventTimeIterator.hasNext()) {
-      long eventTimeUs = eventTimeIterator.next();
+    for (long eventTimeUs : eventTimeSet) {
       eventTimes[i++] = eventTimeUs;
     }
     return eventTimes;
@@ -161,10 +171,83 @@ private void getEventTimes(TreeSet<Long> out, boolean descendsPNode) {
     return styleIds;
   }
 
-  public CharSequence getText(long timeUs, Map<String, TtmlStyle> globalStyles) {
-    SpannableStringBuilder builder = new SpannableStringBuilder();
-    traverseForText(timeUs, builder, false);
-    traverseForStyle(builder, globalStyles);
+  public List<Cue> getCues(long timeUs, Map<String, TtmlStyle> globalStyles,
+      Map<String, TtmlRegion> regionMap) {
+    TreeMap<String, SpannableStringBuilder> regionOutputs = new TreeMap<>();
+    traverseForText(timeUs, false, regionId, regionOutputs);
+    traverseForStyle(globalStyles, regionOutputs);
+    List<Cue> cues = new ArrayList<>();
+    for (Entry<String, SpannableStringBuilder> entry : regionOutputs.entrySet()) {
+      TtmlRegion region = regionMap.get(entry.getKey());
+      cues.add(new Cue(cleanUpText(entry.getValue()), null, region.line, Cue.TYPE_UNSET,
+          Cue.TYPE_UNSET, region.position, Cue.TYPE_UNSET, Cue.DIMEN_UNSET));
+    }
+    return cues;
+  }
+
+  private void traverseForText(long timeUs,  boolean descendsPNode,
+      String inheritedRegion, Map<String, SpannableStringBuilder> regionOutputs) {
+    nodeStartsByRegion.clear();
+    nodeEndsByRegion.clear();
+    String resolvedRegionId = regionId;
+    if (ANONYMOUS_REGION_ID.equals(resolvedRegionId)) {
+      resolvedRegionId = inheritedRegion;
+    }
+    if (isTextNode && descendsPNode) {
+      getRegionOutput(resolvedRegionId, regionOutputs).append(text);
+    } else if (TAG_BR.equals(tag) && descendsPNode) {
+      getRegionOutput(resolvedRegionId, regionOutputs).append('\n');
+    } else if (TAG_METADATA.equals(tag)) {
+      // Do nothing.
+    } else if (isActive(timeUs)) {
+      boolean isPNode = TAG_P.equals(tag);
+      for (Entry<String, SpannableStringBuilder> entry : regionOutputs.entrySet()) {
+        nodeStartsByRegion.put(entry.getKey(), entry.getValue().length());
+      }
+      for (int i = 0; i < getChildCount(); ++i) {
+        getChild(i).traverseForText(timeUs, descendsPNode || isPNode, resolvedRegionId,
+            regionOutputs);
+      }
+      if (isPNode) {
+        TtmlRenderUtil.endParagraph(getRegionOutput(resolvedRegionId, regionOutputs));
+      }
+      for (Entry<String, SpannableStringBuilder> entry : regionOutputs.entrySet()) {
+        nodeEndsByRegion.put(entry.getKey(), entry.getValue().length());
+      }
+    }
+  }
+
+  private static SpannableStringBuilder getRegionOutput(String resolvedRegionId,
+      Map<String, SpannableStringBuilder> regionOutputs) {
+    if (!regionOutputs.containsKey(resolvedRegionId)) {
+      regionOutputs.put(resolvedRegionId, new SpannableStringBuilder());
+    }
+    return regionOutputs.get(resolvedRegionId);
+  }
+
+  private void traverseForStyle(Map<String, TtmlStyle> globalStyles,
+      Map<String, SpannableStringBuilder> regionOutputs) {
+    for (Entry<String, Integer> entry : nodeEndsByRegion.entrySet()) {
+      String regionId = entry.getKey();
+      int start = nodeStartsByRegion.containsKey(regionId) ? nodeStartsByRegion.get(regionId) : 0;
+      applyStyleToOutput(globalStyles, regionOutputs.get(regionId), start, entry.getValue());
+      for (int i = 0; i < getChildCount(); ++i) {
+        getChild(i).traverseForStyle(globalStyles, regionOutputs);
+      }
+    }
+  }
+
+  private void applyStyleToOutput(Map<String, TtmlStyle> globalStyles,
+      SpannableStringBuilder regionOutput, int start, int end) {
+    if (start != end) {
+      TtmlStyle resolvedStyle = TtmlRenderUtil.resolveStyle(style, styleIds, globalStyles);
+      if (resolvedStyle != null) {
+        TtmlRenderUtil.applyStylesToSpan(regionOutput, start, end, resolvedStyle);
+      }
+    }
+  }
+
+  private SpannableStringBuilder cleanUpText(SpannableStringBuilder builder) {
     // Having joined the text elements, we need to do some final cleanup on the result.
     // 1. Collapse multiple consecutive spaces into a single space.
     int builderLength = builder.length();
@@ -208,44 +291,7 @@ public CharSequence getText(long timeUs, Map<String, TtmlStyle> globalStyles) {
       builder.delete(builderLength - 1, builderLength);
       /*builderLength--;*/
     }
-
-    return builder;
-  }
-
-  private SpannableStringBuilder traverseForText(long timeUs, SpannableStringBuilder builder,
-      boolean descendsPNode) {
-    start = builder.length();
-    end = start;
-    if (isTextNode && descendsPNode) {
-      builder.append(text);
-    } else if (TAG_BR.equals(tag) && descendsPNode) {
-      builder.append('\n');
-    } else if (TAG_METADATA.equals(tag)) {
-      // Do nothing.
-    } else if (isActive(timeUs)) {
-      boolean isPNode = TAG_P.equals(tag);
-      for (int i = 0; i < getChildCount(); ++i) {
-        getChild(i).traverseForText(timeUs, builder, descendsPNode || isPNode);
-      }
-      if (isPNode) {
-        TtmlRenderUtil.endParagraph(builder);
-      }
-      end = builder.length();
-    }
     return builder;
   }
 
-  private void traverseForStyle(SpannableStringBuilder builder,
-      Map<String, TtmlStyle> globalStyles) {
-    if (start != end) {
-      TtmlStyle resolvedStyle = TtmlRenderUtil.resolveStyle(style, styleIds, globalStyles);
-      if (resolvedStyle != null) {
-        TtmlRenderUtil.applyStylesToSpan(builder, start, end, resolvedStyle);
-      }
-      for (int i = 0; i < getChildCount(); ++i) {
-        getChild(i).traverseForStyle(builder, globalStyles);
-      }
-    }
-  }
-
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlParser.java b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlParser.java
index 2b089f258a..20ad7f9995 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlParser.java
@@ -1,4 +1,4 @@
-/*
+/*arse
  * Copyright (C) 2014 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -24,6 +24,7 @@
 
 import android.text.Layout;
 import android.util.Log;
+import android.util.Pair;
 
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
@@ -66,6 +67,7 @@
   private static final String ATTR_DURATION = "dur";
   private static final String ATTR_END = "end";
   private static final String ATTR_STYLE = "style";
+  private static final String ATTR_REGION = "region";
 
   private static final Pattern CLOCK_TIME =
       Pattern.compile("^([0-9][0-9]+):([0-9][0-9]):([0-9][0-9])"
@@ -74,6 +76,8 @@
       Pattern.compile("^([0-9]+(?:\\.[0-9]+)?)(h|m|s|ms|f|t)$");
   private static final Pattern FONT_SIZE =
       Pattern.compile("^(([0-9]*.)?[0-9]+)(px|em|%)$");
+  private static final Pattern ORIGIN_COORDINATES =
+      Pattern.compile("^(\\d+\\.?\\d*?)% (\\d+\\.?\\d*?)%$");
 
   // TODO: read and apply the following attributes if specified.
   private static final int DEFAULT_FRAMERATE = 30;
@@ -85,6 +89,7 @@
   public TtmlParser() {
     try {
       xmlParserFactory = XmlPullParserFactory.newInstance();
+      xmlParserFactory.setNamespaceAware(true);
     } catch (XmlPullParserException e) {
       throw new RuntimeException("Couldn't create XmlPullParserFactory instance", e);
     }
@@ -100,6 +105,8 @@ public TtmlSubtitle parse(byte[] bytes, int offset, int length) throws ParserExc
     try {
       XmlPullParser xmlParser = xmlParserFactory.newPullParser();
       Map<String, TtmlStyle> globalStyles = new HashMap<>();
+      Map<String, TtmlRegion> regionMap = new HashMap<>();
+      regionMap.put(TtmlNode.ANONYMOUS_REGION_ID, new TtmlRegion());
       ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes, offset, length);
       xmlParser.setInput(inputStream, null);
       TtmlSubtitle ttmlSubtitle = null;
@@ -115,7 +122,7 @@ public TtmlSubtitle parse(byte[] bytes, int offset, int length) throws ParserExc
               Log.i(TAG, "Ignoring unsupported tag: " + xmlParser.getName());
               unsupportedNodeDepth++;
             } else if (TtmlNode.TAG_HEAD.equals(name)) {
-              parseHeader(xmlParser, globalStyles);
+              parseHeader(xmlParser, globalStyles, regionMap);
             } else {
               try {
                 TtmlNode node = parseNode(xmlParser, parent);
@@ -133,7 +140,7 @@ public TtmlSubtitle parse(byte[] bytes, int offset, int length) throws ParserExc
             parent.addChild(TtmlNode.buildTextNode(xmlParser.getText()));
           } else if (eventType == XmlPullParser.END_TAG) {
             if (xmlParser.getName().equals(TtmlNode.TAG_TT)) {
-              ttmlSubtitle = new TtmlSubtitle(nodeStack.getLast(), globalStyles);
+              ttmlSubtitle = new TtmlSubtitle(nodeStack.getLast(), globalStyles, regionMap);
             }
             nodeStack.removeLast();
           }
@@ -156,13 +163,12 @@ public TtmlSubtitle parse(byte[] bytes, int offset, int length) throws ParserExc
   }
 
   private Map<String, TtmlStyle> parseHeader(XmlPullParser xmlParser,
-      Map<String, TtmlStyle> globalStyles)
+      Map<String, TtmlStyle> globalStyles, Map<String, TtmlRegion> globalRegions)
       throws IOException, XmlPullParserException {
-
     do {
       xmlParser.next();
       if (ParserUtil.isStartTag(xmlParser, TtmlNode.TAG_STYLE)) {
-        String parentStyleId = xmlParser.getAttributeValue(null, ATTR_STYLE);
+        String parentStyleId = ParserUtil.getAttributeValue(xmlParser, ATTR_STYLE);
         TtmlStyle style = parseStyleAttributes(xmlParser, new TtmlStyle());
         if (parentStyleId != null) {
           String[] ids = parseStyleIds(parentStyleId);
@@ -173,11 +179,35 @@ public TtmlSubtitle parse(byte[] bytes, int offset, int length) throws ParserExc
         if (style.getId() != null) {
           globalStyles.put(style.getId(), style);
         }
+      } else if (ParserUtil.isStartTag(xmlParser, TtmlNode.TAG_REGION)) {
+        Pair<String, TtmlRegion> ttmlRegionInfo = parseRegionAttributes(xmlParser);
+        if (ttmlRegionInfo != null) {
+          globalRegions.put(ttmlRegionInfo.first, ttmlRegionInfo.second);
+        }
       }
     } while (!ParserUtil.isEndTag(xmlParser, TtmlNode.TAG_HEAD));
     return globalStyles;
   }
 
+  private Pair<String, TtmlRegion> parseRegionAttributes(XmlPullParser xmlParser) {
+    String regionId = ParserUtil.getAttributeValue(xmlParser, TtmlNode.ATTR_ID);
+    String regionOrigin = ParserUtil.getAttributeValue(xmlParser, TtmlNode.ATTR_TTS_ORIGIN);
+    if (regionOrigin == null || regionId == null) {
+      return null;
+    }
+    Matcher originMatcher = ORIGIN_COORDINATES.matcher(regionOrigin);
+    if (originMatcher.matches()) {
+      try {
+        float position = Float.parseFloat(originMatcher.group(1)) / 100.f;
+        float line = Float.parseFloat(originMatcher.group(2)) / 100.f;
+        return new Pair<>(regionId, new TtmlRegion(position, line));
+      } catch (NumberFormatException e) {
+        Log.w(TAG, "Ignoring malformed region declaration: '" + regionOrigin + "'", e);
+      }
+    }
+    return null;
+  }
+
   private String[] parseStyleIds(String parentStyleIds) {
     return parentStyleIds.split("\\s+");
   }
@@ -185,9 +215,8 @@ public TtmlSubtitle parse(byte[] bytes, int offset, int length) throws ParserExc
   private TtmlStyle parseStyleAttributes(XmlPullParser parser, TtmlStyle style) {
     int attributeCount = parser.getAttributeCount();
     for (int i = 0; i < attributeCount; i++) {
-      String attributeName = parser.getAttributeName(i);
       String attributeValue = parser.getAttributeValue(i);
-      switch (ParserUtil.removeNamespacePrefix(attributeName)) {
+      switch (parser.getAttributeName(i)) {
         case TtmlNode.ATTR_ID:
           if (TtmlNode.TAG_STYLE.equals(parser.getName())) {
             style = createIfNull(style).setId(attributeValue);
@@ -204,7 +233,7 @@ private TtmlStyle parseStyleAttributes(XmlPullParser parser, TtmlStyle style) {
         case TtmlNode.ATTR_TTS_COLOR:
           style = createIfNull(style);
           try {
-            style.setColor(TtmlColorParser.parseColor(attributeValue));
+            style.setFontColor(TtmlColorParser.parseColor(attributeValue));
           } catch (IllegalArgumentException e) {
             Log.w(TAG, "failed parsing color value: '" + attributeValue + "'");
           }
@@ -279,27 +308,30 @@ private TtmlNode parseNode(XmlPullParser parser, TtmlNode parent) throws ParserE
     long duration = 0;
     long startTime = TtmlNode.UNDEFINED_TIME;
     long endTime = TtmlNode.UNDEFINED_TIME;
+    String regionId = TtmlNode.ANONYMOUS_REGION_ID;
     String[] styleIds = null;
     int attributeCount = parser.getAttributeCount();
     TtmlStyle style = parseStyleAttributes(parser, null);
     for (int i = 0; i < attributeCount; i++) {
-      String attr = ParserUtil.removeNamespacePrefix(parser.getAttributeName(i));
+      String attr = parser.getAttributeName(i);
       String value = parser.getAttributeValue(i);
-      if (attr.equals(ATTR_BEGIN)) {
+      if (ATTR_BEGIN.equals(attr)) {
         startTime = parseTimeExpression(value,
             DEFAULT_FRAMERATE, DEFAULT_SUBFRAMERATE, DEFAULT_TICKRATE);
-      } else if (attr.equals(ATTR_END)) {
+      } else if (ATTR_END.equals(attr)) {
         endTime = parseTimeExpression(value,
             DEFAULT_FRAMERATE, DEFAULT_SUBFRAMERATE, DEFAULT_TICKRATE);
-      } else if (attr.equals(ATTR_DURATION)) {
+      } else if (ATTR_DURATION.equals(attr)) {
         duration = parseTimeExpression(value,
             DEFAULT_FRAMERATE, DEFAULT_SUBFRAMERATE, DEFAULT_TICKRATE);
-      } else if (attr.equals(ATTR_STYLE)) {
+      } else if (ATTR_STYLE.equals(attr)) {
         // IDREFS: potentially multiple space delimited ids
         String[] ids = parseStyleIds(value);
         if (ids.length > 0) {
           styleIds = ids;
         }
+      } else if (ATTR_REGION.equals(attr)) {
+        regionId = value;
       } else {
         // Do nothing.
       }
@@ -321,7 +353,7 @@ private TtmlNode parseNode(XmlPullParser parser, TtmlNode parent) throws ParserE
         endTime = parent.endTimeUs;
       }
     }
-    return TtmlNode.buildNode(parser.getName(), startTime, endTime, style, styleIds);
+    return TtmlNode.buildNode(parser.getName(), startTime, endTime, style, styleIds, regionId);
   }
 
   private static boolean isSupportedTag(String tag) {
diff --git a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRegion.java b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRegion.java
new file mode 100644
index 0000000000..757d134ad7
--- /dev/null
+++ b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRegion.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer.text.ttml;
+
+import com.google.android.exoplayer.text.Cue;
+
+/**
+ * Represents a TTML Region.
+ */
+/* package */ final class TtmlRegion {
+
+  public final float position;
+  public final float line;
+
+  public TtmlRegion() {
+    this(Cue.DIMEN_UNSET, Cue.DIMEN_UNSET);
+  }
+
+  public TtmlRegion(float position, float line) {
+    this.position = position;
+    this.line = line;
+  }
+
+}
diff --git a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRenderUtil.java b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRenderUtil.java
index a2bff2ec1d..e985e7c82a 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRenderUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlRenderUtil.java
@@ -38,29 +38,29 @@
   public static TtmlStyle resolveStyle(TtmlStyle style, String[] styleIds,
       Map<String, TtmlStyle> globalStyles) {
     if (style == null && styleIds == null) {
-      // no styles at all
+      // No styles at all.
       return null;
     } else if (style == null && styleIds.length == 1) {
-      // only one single referential style present
+      // Only one single referential style present.
       return globalStyles.get(styleIds[0]);
     } else if (style == null && styleIds.length > 1) {
-      // only multiple referential styles present
+      // Only multiple referential styles present.
       TtmlStyle chainedStyle = new TtmlStyle();
       for (int i = 0; i < styleIds.length; i++) {
         chainedStyle.chain(globalStyles.get(styleIds[i]));
       }
       return chainedStyle;
     } else if (style != null && styleIds != null && styleIds.length == 1) {
-      // merge a single referential style into inline style
+      // Merge a single referential style into inline style.
       return style.chain(globalStyles.get(styleIds[0]));
     } else if (style != null && styleIds != null && styleIds.length > 1) {
-      // merge multiple referential styles into inline style
+      // Merge multiple referential styles into inline style.
       for (int i = 0; i < styleIds.length; i++) {
         style.chain(globalStyles.get(styleIds[i]));
       }
       return style;
     }
-    // only inline styles available
+    // Only inline styles available.
     return style;
   }
 
@@ -77,11 +77,11 @@ public static void applyStylesToSpan(SpannableStringBuilder builder,
     if (style.isUnderline()) {
       builder.setSpan(new UnderlineSpan(), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
     }
-    if (style.hasColorSpecified()) {
-      builder.setSpan(new ForegroundColorSpan(style.getColor()), start, end,
+    if (style.hasFontColor()) {
+      builder.setSpan(new ForegroundColorSpan(style.getFontColor()), start, end,
           Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
     }
-    if (style.hasBackgroundColorSpecified()) {
+    if (style.hasBackgroundColor()) {
       builder.setSpan(new BackgroundColorSpan(style.getBackgroundColor()), start, end,
           Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
     }
diff --git a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlStyle.java b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlStyle.java
index 4cb5f95a86..f153f5e94c 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlStyle.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlStyle.java
@@ -25,53 +25,55 @@
  */
 /* package */ final class TtmlStyle {
 
-  public static final short UNSPECIFIED = -1;
+  public static final int UNSPECIFIED = -1;
 
-  public static final short STYLE_NORMAL = Typeface.NORMAL;
-  public static final short STYLE_BOLD = Typeface.BOLD;
-  public static final short STYLE_ITALIC = Typeface.ITALIC;
-  public static final short STYLE_BOLD_ITALIC = Typeface.BOLD_ITALIC;
+  public static final int STYLE_NORMAL = Typeface.NORMAL;
+  public static final int STYLE_BOLD = Typeface.BOLD;
+  public static final int STYLE_ITALIC = Typeface.ITALIC;
+  public static final int STYLE_BOLD_ITALIC = Typeface.BOLD_ITALIC;
 
-  public static final short FONT_SIZE_UNIT_PIXEL = 1;
-  public static final short FONT_SIZE_UNIT_EM = 2;
-  public static final short FONT_SIZE_UNIT_PERCENT = 3;
+  public static final int FONT_SIZE_UNIT_PIXEL = 1;
+  public static final int FONT_SIZE_UNIT_EM = 2;
+  public static final int FONT_SIZE_UNIT_PERCENT = 3;
 
-  private static final short OFF = 0;
-  private static final short ON = 1;
+  private static final int OFF = 0;
+  private static final int  ON = 1;
 
   private String fontFamily;
-  private int color;
-  private boolean colorSpecified;
+  private int fontColor;
+  private boolean hasFontColor;
   private int backgroundColor;
-  private boolean backgroundColorSpecified;
-  private short linethrough = UNSPECIFIED;
-  private short underline = UNSPECIFIED;
-  private short bold = UNSPECIFIED;
-  private short italic = UNSPECIFIED;
-  private short fontSizeUnit = UNSPECIFIED;
+  private boolean hasBackgroundColor;
+  private int linethrough;
+  private int underline;
+  private int bold;
+  private int italic;
+  private int fontSizeUnit;
   private float fontSize;
   private String id;
   private TtmlStyle inheritableStyle;
   private Layout.Alignment textAlign;
 
+  public TtmlStyle() {
+    linethrough = UNSPECIFIED;
+    underline = UNSPECIFIED;
+    bold = UNSPECIFIED;
+    italic = UNSPECIFIED;
+    fontSizeUnit = UNSPECIFIED;
+  }
+
   /**
-   * Returns the style or <code>UNSPECIFIED</code> when no style information is given.
+   * Returns the style or {@link #UNSPECIFIED} when no style information is given.
    *
-   * @return UNSPECIFIED, STYLE_NORMAL, STYLE_BOLD, STYLE_BOLD or STYLE_BOLD_ITALIC
+   * @return {@link #UNSPECIFIED}, {@link #STYLE_NORMAL}, {@link #STYLE_BOLD}, {@link #STYLE_BOLD}
+   *     or {@link #STYLE_BOLD_ITALIC}.
    */
-  public short getStyle() {
+  public int getStyle() {
     if (bold == UNSPECIFIED && italic == UNSPECIFIED) {
       return UNSPECIFIED;
     }
-
-    short style = STYLE_NORMAL;
-    if (bold != UNSPECIFIED) {
-      style += bold;
-    }
-    if (italic != UNSPECIFIED){
-      style += italic;
-    }
-    return style;
+    return (bold != UNSPECIFIED ? bold : STYLE_NORMAL)
+        | (italic != UNSPECIFIED ? italic : STYLE_NORMAL);
   }
 
   public boolean isLinethrough() {
@@ -104,33 +106,39 @@ public TtmlStyle setFontFamily(String fontFamily) {
     return this;
   }
 
-  public int getColor() {
-    return color;
+  public int getFontColor() {
+    if (!hasFontColor) {
+      throw new IllegalStateException("Font color has not been defined.");
+    }
+    return fontColor;
   }
 
-  public TtmlStyle setColor(int color) {
+  public TtmlStyle setFontColor(int color) {
     Assertions.checkState(inheritableStyle == null);
-    this.color = color;
-    colorSpecified = true;
+    this.fontColor = color;
+    hasFontColor = true;
     return this;
   }
 
-  public boolean hasColorSpecified() {
-    return colorSpecified;
+  public boolean hasFontColor() {
+    return hasFontColor;
   }
 
   public int getBackgroundColor() {
+    if (!hasBackgroundColor) {
+      throw new IllegalStateException("Background color has not been defined.");
+    }
     return backgroundColor;
   }
 
   public TtmlStyle setBackgroundColor(int backgroundColor) {
     this.backgroundColor = backgroundColor;
-    backgroundColorSpecified = true;
+    hasBackgroundColor = true;
     return this;
   }
 
-  public boolean hasBackgroundColorSpecified() {
-    return backgroundColorSpecified;
+  public boolean hasBackgroundColor() {
+    return hasBackgroundColor;
   }
 
   public TtmlStyle setBold(boolean isBold) {
@@ -168,8 +176,8 @@ public TtmlStyle chain(TtmlStyle ancestor) {
 
   private TtmlStyle inherit(TtmlStyle ancestor, boolean chaining) {
     if (ancestor != null) {
-      if (!colorSpecified && ancestor.colorSpecified) {
-        setColor(ancestor.color);
+      if (!hasFontColor && ancestor.hasFontColor) {
+        setFontColor(ancestor.fontColor);
       }
       if (bold == UNSPECIFIED) {
         bold = ancestor.bold;
@@ -194,7 +202,7 @@ private TtmlStyle inherit(TtmlStyle ancestor, boolean chaining) {
         fontSize = ancestor.fontSize;
       }
       // attributes not inherited as of http://www.w3.org/TR/ttml1/
-      if (chaining && !backgroundColorSpecified && ancestor.backgroundColorSpecified) {
+      if (chaining && !hasBackgroundColor && ancestor.hasBackgroundColor) {
         setBackgroundColor(ancestor.backgroundColor);
       }
     }
@@ -224,12 +232,12 @@ public TtmlStyle setFontSize(float fontSize) {
     return this;
   }
 
-  public TtmlStyle setFontSizeUnit(short unit) {
+  public TtmlStyle setFontSizeUnit(int unit) {
     this.fontSizeUnit = unit;
     return this;
   }
 
-  public short getFontSizeUnit() {
+  public int getFontSizeUnit() {
     return fontSizeUnit;
   }
 
diff --git a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlSubtitle.java b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlSubtitle.java
index a989bf86f8..e54bd8b52e 100644
--- a/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlSubtitle.java
+++ b/library/src/main/java/com/google/android/exoplayer/text/ttml/TtmlSubtitle.java
@@ -31,9 +31,12 @@
   private final TtmlNode root;
   private final long[] eventTimesUs;
   private final Map<String, TtmlStyle> globalStyles;
+  private final Map<String, TtmlRegion> regionMap;
 
-  public TtmlSubtitle(TtmlNode root, Map<String, TtmlStyle> globalStyles) {
+  public TtmlSubtitle(TtmlNode root, Map<String, TtmlStyle> globalStyles,
+      Map<String, TtmlRegion> regionMap) {
     this.root = root;
+    this.regionMap = regionMap;
     this.globalStyles = globalStyles != null
         ? Collections.unmodifiableMap(globalStyles) : Collections.<String, TtmlStyle>emptyMap();
     this.eventTimesUs = root.getEventTimesUs();
@@ -67,13 +70,7 @@ public long getLastEventTime() {
 
   @Override
   public List<Cue> getCues(long timeUs) {
-    CharSequence cueText = root.getText(timeUs, globalStyles);
-    if (cueText == null) {
-      return Collections.<Cue>emptyList();
-    } else {
-      Cue cue = new Cue(cueText);
-      return Collections.singletonList(cue);
-    }
+    return root.getCues(timeUs, globalStyles, regionMap);
   }
 
   /* @VisibleForTesting */
diff --git a/library/src/main/java/com/google/android/exoplayer/util/ParserUtil.java b/library/src/main/java/com/google/android/exoplayer/util/ParserUtil.java
index 105c5a5838..5c054cc623 100644
--- a/library/src/main/java/com/google/android/exoplayer/util/ParserUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/util/ParserUtil.java
@@ -26,26 +26,30 @@
   private ParserUtil() {}
 
   public static boolean isEndTag(XmlPullParser xpp, String name) throws XmlPullParserException {
-    return xpp.getEventType() == XmlPullParser.END_TAG && name.equals(xpp.getName());
+    return isEndTag(xpp) && xpp.getName().equals(name);
+  }
+
+  public static boolean isEndTag(XmlPullParser xpp) throws XmlPullParserException {
+    return xpp.getEventType() == XmlPullParser.END_TAG;
   }
 
   public static boolean isStartTag(XmlPullParser xpp, String name)
       throws XmlPullParserException {
-    return xpp.getEventType() == XmlPullParser.START_TAG && name.equals(xpp.getName());
+    return isStartTag(xpp) && xpp.getName().equals(name);
   }
 
   public static boolean isStartTag(XmlPullParser xpp) throws XmlPullParserException {
     return xpp.getEventType() == XmlPullParser.START_TAG;
   }
 
-  /**
-   * Removes the namespace part ('^.*:') of the attributeName.
-   *
-   * @param attributeName the string to remove the namespace prefix from
-   * @return the name of the attribute without the prefix
-   */
-  public static String removeNamespacePrefix(String attributeName) {
-    return attributeName.replaceFirst("^.*:", "");
+  public static String getAttributeValue(XmlPullParser xpp, String attributeName) {
+    int attributeCount = xpp.getAttributeCount();
+    for (int i = 0; i < attributeCount; i++) {
+      if (attributeName.equals(xpp.getAttributeName(i))) {
+        return xpp.getAttributeValue(i);
+      }
+    }
+    return null;
   }
 
 }
