diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java
index 6166eb398b..16a8f6ccc2 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java
@@ -241,7 +241,12 @@ private boolean readAtomHeader(ExtractorInput input) throws IOException, Interru
     if (shouldParseContainerAtom(atomType)) {
       long endPosition = input.getPosition() + atomSize - Atom.HEADER_SIZE;
       containerAtoms.add(new ContainerAtom(atomType, endPosition));
-      enterReadingAtomHeaderState();
+      if (atomSize == atomHeaderBytesRead) {
+        processAtomEnded(endPosition);
+      } else {
+        // Start reading the first child atom.
+        enterReadingAtomHeaderState();
+      }
     } else if (shouldParseLeafAtom(atomType)) {
       if (atomHeaderBytesRead != Atom.HEADER_SIZE) {
         throw new ParserException("Leaf atom defines extended atom size (unsupported).");
@@ -271,8 +276,11 @@ private void readAtomPayload(ExtractorInput input) throws IOException, Interrupt
     } else {
       input.skipFully(atomPayloadSize);
     }
-    long currentPosition = input.getPosition();
-    while (!containerAtoms.isEmpty() && containerAtoms.peek().endPosition == currentPosition) {
+    processAtomEnded(input.getPosition());
+  }
+
+  private void processAtomEnded(long atomEndPosition) throws ParserException {
+    while (!containerAtoms.isEmpty() && containerAtoms.peek().endPosition == atomEndPosition) {
       onContainerAtomRead(containerAtoms.pop());
     }
     enterReadingAtomHeaderState();
