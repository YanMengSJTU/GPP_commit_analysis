diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java
index 5b1c705bb4..4ab2bacc07 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java
@@ -113,13 +113,8 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
     int fixedSampleSize = stsz.readUnsignedIntToInt();
     int sampleCount = stsz.readUnsignedIntToInt();
 
-    long[] offsets = new long[sampleCount];
-    int[] sizes = new int[sampleCount];
-    int maximumSize = 0;
-    long[] timestamps = new long[sampleCount];
-    int[] flags = new int[sampleCount];
     if (sampleCount == 0) {
-      return new TrackSampleTable(offsets, sizes, maximumSize, timestamps, flags);
+      return new TrackSampleTable(new long[0], new int[0], 0, new long[0], new int[0]);
     }
 
     // Prepare to read chunk offsets.
@@ -163,7 +158,7 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
       nextSynchronizationSampleIndex = stss.readUnsignedIntToInt() - 1;
     }
 
-    // Calculate the chunk offsets
+    // Calculate the chunk offsets.
     long offsetBytes;
     if (chunkOffsetsAtom.type == Atom.TYPE_stco) {
       offsetBytes = chunkOffsets.readUnsignedInt();
@@ -171,51 +166,90 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
       offsetBytes = chunkOffsets.readUnsignedLongToLong();
     }
 
+    // True if we can rechunk fixed-sample-size data. Note that we only rechunk raw audio.
+    boolean isRechunkable =
+        fixedSampleSize != 0
+            && MimeTypes.AUDIO_RAW.equals(track.mediaFormat.mimeType)
+            && remainingTimestampDeltaChanges == 0
+            && remainingTimestampOffsetChanges == 0
+            && remainingSynchronizationSamples == 0;
+
+    long[] offsets = null;
+    int[] sizes = null;
+    int maximumSize = 0;
+    long[] timestamps = null;
+    int[] flags = null;
+    // If we're rechunking fixed sample size data, we must store chunk offset and sample counts.
+    long[] chunkOffsetsBytes = null;
+    int[] chunkSampleCounts = null;
+    if (isRechunkable) {
+      chunkOffsetsBytes = new long[chunkCount];
+      chunkSampleCounts = new int[chunkCount];
+    } else {
+      offsets = new long[sampleCount];
+      sizes = new int[sampleCount];
+      timestamps = new long[sampleCount];
+      flags = new int[sampleCount];
+    }
+
     long timestampTimeUnits = 0;
-    for (int i = 0; i < sampleCount; i++) {
-      // Add on the timestamp offset if ctts is present.
-      if (ctts != null) {
-        while (remainingSamplesAtTimestampOffset == 0 && remainingTimestampOffsetChanges > 0) {
-          remainingSamplesAtTimestampOffset = ctts.readUnsignedIntToInt();
-          // The BMFF spec (ISO 14496-12) states that sample offsets should be unsigned integers in
-          // version 0 ctts boxes, however some streams violate the spec and use signed integers
-          // instead. It's safe to always parse sample offsets as signed integers here, because
-          // unsigned integers will still be parsed correctly (unless their top bit is set, which is
-          // never true in practice because sample offsets are always small).
-          timestampOffset = ctts.readInt();
-          remainingTimestampOffsetChanges--;
+    int remainingSamples = sampleCount;
+    while (remainingSamples > 0) {
+      int i = sampleCount - remainingSamples;
+      if (!isRechunkable) {
+        // Add on the timestamp offset if ctts is present.
+        if (ctts != null) {
+          while (remainingSamplesAtTimestampOffset == 0 && remainingTimestampOffsetChanges > 0) {
+            remainingSamplesAtTimestampOffset = ctts.readUnsignedIntToInt();
+            // The BMFF spec (ISO 14496-12) states that sample offsets should be unsigned integers
+            // in version 0 ctts boxes, however some streams violate the spec and use signed
+            // integers instead. It's safe to always parse sample offsets as signed integers here,
+            // because unsigned integers will still be parsed correctly (unless their top bit is
+            // set, which is never true in practice because sample offsets are always small).
+            timestampOffset = ctts.readInt();
+            remainingTimestampOffsetChanges--;
+          }
+          remainingSamplesAtTimestampOffset--;
         }
-        remainingSamplesAtTimestampOffset--;
-      }
 
-      offsets[i] = offsetBytes;
-      sizes[i] = fixedSampleSize == 0 ? stsz.readUnsignedIntToInt() : fixedSampleSize;
-      if (sizes[i] > maximumSize) {
-        maximumSize = sizes[i];
-      }
-      timestamps[i] = timestampTimeUnits + timestampOffset;
-
-      // All samples are synchronization samples if the stss is not present.
-      flags[i] = stss == null ? C.SAMPLE_FLAG_SYNC : 0;
-      if (i == nextSynchronizationSampleIndex) {
-        flags[i] = C.SAMPLE_FLAG_SYNC;
-        remainingSynchronizationSamples--;
-        if (remainingSynchronizationSamples > 0) {
-          nextSynchronizationSampleIndex = stss.readUnsignedIntToInt() - 1;
+        offsets[i] = offsetBytes;
+        sizes[i] = fixedSampleSize == 0 ? stsz.readUnsignedIntToInt() : fixedSampleSize;
+        if (sizes[i] > maximumSize) {
+          maximumSize = sizes[i];
         }
-      }
+        timestamps[i] = timestampTimeUnits + timestampOffset;
+
+        // All samples are synchronization samples if the stss is not present.
+        flags[i] = stss == null ? C.SAMPLE_FLAG_SYNC : 0;
+        if (i == nextSynchronizationSampleIndex) {
+          flags[i] = C.SAMPLE_FLAG_SYNC;
+          remainingSynchronizationSamples--;
+          if (remainingSynchronizationSamples > 0) {
+            nextSynchronizationSampleIndex = stss.readUnsignedIntToInt() - 1;
+          }
+        }
+
+        // Add on the duration of this sample.
+        timestampTimeUnits += timestampDeltaInTimeUnits;
+        remainingSamplesAtTimestampDelta--;
+        if (remainingSamplesAtTimestampDelta == 0 && remainingTimestampDeltaChanges > 0) {
+          remainingSamplesAtTimestampDelta = stts.readUnsignedIntToInt();
+          timestampDeltaInTimeUnits = stts.readUnsignedIntToInt();
+          remainingTimestampDeltaChanges--;
+        }
+        remainingSamplesInChunk--;
+        remainingSamples--;
+      } else {
+        // Store the latest chunk offset and sample count.
+        chunkOffsetsBytes[chunkIndex] = offsetBytes;
+        chunkSampleCounts[chunkIndex] = samplesPerChunk;
 
-      // Add on the duration of this sample.
-      timestampTimeUnits += timestampDeltaInTimeUnits;
-      remainingSamplesAtTimestampDelta--;
-      if (remainingSamplesAtTimestampDelta == 0 && remainingTimestampDeltaChanges > 0) {
-        remainingSamplesAtTimestampDelta = stts.readUnsignedIntToInt();
-        timestampDeltaInTimeUnits = stts.readUnsignedIntToInt();
-        remainingTimestampDeltaChanges--;
+        remainingSamplesAtTimestampDelta -= samplesPerChunk;
+        remainingSamplesInChunk -= samplesPerChunk;
+        remainingSamples -= samplesPerChunk;
       }
 
       // If we're at the last sample in this chunk, move to the next chunk.
-      remainingSamplesInChunk--;
       if (remainingSamplesInChunk == 0) {
         chunkIndex++;
         if (chunkIndex < chunkCount) {
@@ -224,20 +258,18 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
           } else {
             offsetBytes = chunkOffsets.readUnsignedLongToLong();
           }
-        }
 
-        // Change the samples-per-chunk if required.
-        if (chunkIndex == nextSamplesPerChunkChangeChunkIndex) {
-          samplesPerChunk = stsc.readUnsignedIntToInt();
-          stsc.skipBytes(4); // Skip the sample description index.
-          remainingSamplesPerChunkChanges--;
-          if (remainingSamplesPerChunkChanges > 0) {
-            nextSamplesPerChunkChangeChunkIndex = stsc.readUnsignedIntToInt() - 1;
+          // Change the samples-per-chunk if required.
+          if (chunkIndex == nextSamplesPerChunkChangeChunkIndex) {
+            samplesPerChunk = stsc.readUnsignedIntToInt();
+            stsc.skipBytes(4); // Skip the sample description index.
+            remainingSamplesPerChunkChanges--;
+            if (remainingSamplesPerChunkChanges > 0) {
+              nextSamplesPerChunkChangeChunkIndex = stsc.readUnsignedIntToInt() - 1;
+            }
           }
-        }
 
-        // Expect samplesPerChunk samples in the following chunk, if it's before the end.
-        if (chunkIndex < chunkCount) {
+          // Expect samplesPerChunk samples in the following chunk.
           remainingSamplesInChunk = samplesPerChunk;
         }
       } else {
@@ -253,6 +285,17 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
     Assertions.checkArgument(remainingTimestampDeltaChanges == 0);
     Assertions.checkArgument(remainingTimestampOffsetChanges == 0);
 
+    if (isRechunkable) {
+      FixedSampleSizeRechunker.Results rechunkedResults =
+          FixedSampleSizeRechunker.rechunk(
+              fixedSampleSize, chunkOffsetsBytes, chunkSampleCounts, timestampDeltaInTimeUnits);
+      offsets = rechunkedResults.offsets;
+      sizes = rechunkedResults.sizes;
+      maximumSize = rechunkedResults.maximumSize;
+      timestamps = rechunkedResults.timestamps;
+      flags = rechunkedResults.flags;
+    }
+
     if (track.editListDurations == null) {
       Util.scaleLargeTimestampsInPlace(timestamps, C.MICROS_PER_SECOND, track.timescale);
       return new TrackSampleTable(offsets, sizes, maximumSize, timestamps, flags);
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FixedSampleSizeRechunker.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FixedSampleSizeRechunker.java
new file mode 100644
index 0000000000..a4a01aea3a
--- /dev/null
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FixedSampleSizeRechunker.java
@@ -0,0 +1,96 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer.extractor.mp4;
+
+import com.google.android.exoplayer.C;
+import com.google.android.exoplayer.util.Util;
+
+/** Utilities for rechunking fixed sample size data (e.g., uncompressed audio). */
+/* package */ final class FixedSampleSizeRechunker {
+
+  /** Maximum number of bytes for each buffer in rechunked output. */
+  private static final int MAX_SAMPLE_SIZE = 8 * 1024;
+
+  /** Stores the results (new chunk information) of a rechunking operation. */
+  public static final class Results {
+    public final long[] offsets;
+    public final int[] sizes;
+    public final int maximumSize;
+    public final long[] timestamps;
+    public final int[] flags;
+
+    public Results(long[] offsets, int[] sizes, int maximumSize, long[] timestamps, int[] flags) {
+      this.offsets = offsets;
+      this.sizes = sizes;
+      this.maximumSize = maximumSize;
+      this.timestamps = timestamps;
+      this.flags = flags;
+    }
+  }
+
+  /**
+   * Rechunk the given fixed sample size input to produce a new sequence of samples.
+   *
+   * @param fixedSampleSize Size in bytes of each sample.
+   * @param chunkOffsets Chunk offsets in the MP4 stream to rechunk.
+   * @param chunkSampleCounts Sample counts for each of the MP4 stream's chunks.
+   * @param timestampDeltaInTimeUnits Timestamp delta between each sample in time units.
+   */
+  public static Results rechunk(
+      int fixedSampleSize,
+      long[] chunkOffsets,
+      int[] chunkSampleCounts,
+      long timestampDeltaInTimeUnits) {
+    int maxSampleCount = MAX_SAMPLE_SIZE / fixedSampleSize;
+
+    // Count the number of new, rechunked buffers.
+    int rechunkedSampleCount = 0;
+    for (int chunkSampleCount : chunkSampleCounts) {
+      rechunkedSampleCount += Util.ceilDivide(chunkSampleCount, maxSampleCount);
+    }
+
+    long[] offsets = new long[rechunkedSampleCount];
+    int[] sizes = new int[rechunkedSampleCount];
+    int maximumSize = 0;
+    long[] timestamps = new long[rechunkedSampleCount];
+    int[] flags = new int[rechunkedSampleCount];
+
+    int originalSampleIndex = 0;
+    int newSampleIndex = 0;
+    for (int chunkIndex = 0; chunkIndex < chunkSampleCounts.length; chunkIndex++) {
+      int chunkSamplesRemaining = chunkSampleCounts[chunkIndex];
+      long sampleOffset = chunkOffsets[chunkIndex];
+
+      while (chunkSamplesRemaining > 0) {
+        int bufferSampleCount = Math.min(maxSampleCount, chunkSamplesRemaining);
+
+        offsets[newSampleIndex] = sampleOffset;
+        sizes[newSampleIndex] = fixedSampleSize * bufferSampleCount;
+        maximumSize = Math.max(maximumSize, sizes[newSampleIndex]);
+        timestamps[newSampleIndex] = (timestampDeltaInTimeUnits * originalSampleIndex);
+        flags[newSampleIndex] = C.SAMPLE_FLAG_SYNC;
+
+        sampleOffset += sizes[newSampleIndex];
+        originalSampleIndex += bufferSampleCount;
+
+        chunkSamplesRemaining -= bufferSampleCount;
+        newSampleIndex++;
+      }
+    }
+
+    return new Results(offsets, sizes, maximumSize, timestamps, flags);
+  }
+}
