diff --git a/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java b/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java
index 878aaaaf61..85fa35ccb7 100644
--- a/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java
@@ -782,6 +782,9 @@ protected void onInputFormatChanged(MediaFormatHolder formatHolder) throws ExoPl
     MediaFormat oldFormat = format;
     format = formatHolder.format;
     drmInitData = formatHolder.drmInitData;
+    if (Util.areEqual(format, oldFormat)) {
+      return;
+    }
     if (codec != null && canReconfigureCodec(codec, codecIsAdaptive, oldFormat, format)) {
       codecReconfigured = true;
       codecReconfigurationState = RECONFIGURATION_STATE_WRITE_PENDING;
diff --git a/library/src/main/java/com/google/android/exoplayer/chunk/ChunkSampleSource.java b/library/src/main/java/com/google/android/exoplayer/chunk/ChunkSampleSource.java
index 69b06c611c..c6f316e84d 100644
--- a/library/src/main/java/com/google/android/exoplayer/chunk/ChunkSampleSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/chunk/ChunkSampleSource.java
@@ -25,10 +25,12 @@
 import com.google.android.exoplayer.SampleSource;
 import com.google.android.exoplayer.SampleSource.SampleSourceReader;
 import com.google.android.exoplayer.TrackRenderer;
+import com.google.android.exoplayer.drm.DrmInitData;
 import com.google.android.exoplayer.extractor.DefaultTrackOutput;
 import com.google.android.exoplayer.upstream.Loader;
 import com.google.android.exoplayer.upstream.Loader.Loadable;
 import com.google.android.exoplayer.util.Assertions;
+import com.google.android.exoplayer.util.Util;
 import java.io.IOException;
 import java.util.Collections;
 import java.util.LinkedList;
@@ -85,6 +87,7 @@
   private long currentLoadableExceptionTimestamp;
   private long currentLoadStartTimeMs;
 
+  private DrmInitData downstreamDrmInitData;
   private MediaFormat downstreamMediaFormat;
   private Format downstreamFormat;
 
@@ -186,6 +189,7 @@ public void enable(int track, long positionUs) {
     loadControl.register(this, bufferSizeContribution);
     downstreamFormat = null;
     downstreamMediaFormat = null;
+    downstreamDrmInitData = null;
     downstreamPositionUs = positionUs;
     lastSeekPositionUs = positionUs;
     pendingDiscontinuity = false;
@@ -256,17 +260,21 @@ public int readData(int track, long positionUs, MediaFormatHolder formatHolder,
 
     if (haveSamples || currentChunk.isMediaFormatFinal) {
       MediaFormat mediaFormat = currentChunk.getMediaFormat();
-      if (!mediaFormat.equals(downstreamMediaFormat)) {
+      DrmInitData drmInitData = currentChunk.getDrmInitData();
+      if (!mediaFormat.equals(downstreamMediaFormat)
+          || (!Util.areEqual(downstreamDrmInitData, drmInitData))) {
         formatHolder.format = mediaFormat;
-        formatHolder.drmInitData = currentChunk.getDrmInitData();
+        formatHolder.drmInitData = drmInitData;
         downstreamMediaFormat = mediaFormat;
+        downstreamDrmInitData = drmInitData;
         return FORMAT_READ;
       }
       // If mediaFormat and downstreamMediaFormat are equal but different objects then the equality
       // check above will have been expensive, comparing the fields in each format. We update
       // downstreamMediaFormat here so that referential equality can be cheaply established during
-      // subsequent calls.
+      // subsequent calls. Same goes for downstreamDrmInitData.
       downstreamMediaFormat = mediaFormat;
+      downstreamDrmInitData = drmInitData;
     }
 
     if (!haveSamples) {
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/DashChunkSource.java b/library/src/main/java/com/google/android/exoplayer/dash/DashChunkSource.java
index 63bf568596..53f5d99b1b 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/DashChunkSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/DashChunkSource.java
@@ -496,7 +496,7 @@ public final void getChunkOperation(List<? extends MediaChunk> queue, long playb
           : startingNewPeriod ? representationHolder.getFirstAvailableSegmentNum()
           : queue.get(out.queueSize - 1).getNextChunkIndex();
     Chunk nextMediaChunk = newMediaChunk(periodHolder, representationHolder, dataSource,
-        mediaFormat, enabledTrack, segmentNum, evaluation.trigger);
+        mediaFormat, enabledTrack, segmentNum, evaluation.trigger, mediaFormat != null);
     lastChunkWasInitialization = false;
     out.chunk = nextMediaChunk;
   }
@@ -696,7 +696,8 @@ private Chunk newInitializationChunk(RangedUri initializationUri, RangedUri inde
 
   protected Chunk newMediaChunk(
       PeriodHolder periodHolder, RepresentationHolder representationHolder, DataSource dataSource,
-      MediaFormat mediaFormat, ExposedTrack enabledTrack, int segmentNum, int trigger) {
+      MediaFormat mediaFormat, ExposedTrack enabledTrack, int segmentNum, int trigger,
+      boolean isMediaFormatFinal) {
     Representation representation = representationHolder.representation;
     Format format = representation.format;
     long startTimeUs = representationHolder.getSegmentStartTimeUs(segmentNum);
@@ -711,7 +712,6 @@ protected Chunk newMediaChunk(
           startTimeUs, endTimeUs, segmentNum, enabledTrack.trackFormat, null,
           periodHolder.localIndex);
     } else {
-      boolean isMediaFormatFinal = (mediaFormat != null);
       return new ContainerMediaChunk(dataSource, dataSpec, trigger, format, startTimeUs, endTimeUs,
           segmentNum, sampleOffsetUs, representationHolder.extractorWrapper, mediaFormat,
           enabledTrack.adaptiveMaxWidth, enabledTrack.adaptiveMaxHeight, periodHolder.drmInitData,
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/DrmInitData.java b/library/src/main/java/com/google/android/exoplayer/drm/DrmInitData.java
index 961906ba86..94e4b2a57a 100644
--- a/library/src/main/java/com/google/android/exoplayer/drm/DrmInitData.java
+++ b/library/src/main/java/com/google/android/exoplayer/drm/DrmInitData.java
@@ -17,6 +17,7 @@
 
 import android.media.MediaDrm;
 import com.google.android.exoplayer.util.Assertions;
+import com.google.android.exoplayer.util.Util;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
@@ -33,7 +34,7 @@
    * @param schemeUuid The DRM scheme's UUID.
    * @return The initialization data for the scheme, or null if the scheme is not supported.
    */
-  public abstract SchemeInitData get(UUID schemeUuid);
+  public SchemeInitData get(UUID schemeUuid);
 
   /**
    * A {@link DrmInitData} implementation that maps UUID onto scheme specific data.
@@ -61,6 +62,28 @@ public void put(UUID schemeUuid, SchemeInitData schemeInitData) {
       schemeData.put(schemeUuid, schemeInitData);
     }
 
+    @Override
+    public boolean equals(Object obj) {
+      if (obj == null || getClass() != obj.getClass()) {
+        return false;
+      }
+      Mapped rhs = (Mapped) obj;
+      if (schemeData.size() != rhs.schemeData.size()) {
+        return false;
+      }
+      for (UUID uuid : schemeData.keySet()) {
+        if (!Util.areEqual(schemeData.get(uuid), rhs.schemeData.get(uuid))) {
+          return false;
+        }
+      }
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      return schemeData.hashCode();
+    }
+
   }
 
   /**
@@ -79,6 +102,19 @@ public SchemeInitData get(UUID schemeUuid) {
       return data;
     }
 
+    @Override
+    public boolean equals(Object obj) {
+      if (obj == null || getClass() != obj.getClass()) {
+        return false;
+      } else {
+        return Util.areEqual(data, ((Universal) obj).data);
+      }
+    }
+
+    @Override
+    public int hashCode() {
+      return data.hashCode();
+    }
   }
 
   /**
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java
index 4b9277ee85..569fc1d1cf 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java
@@ -318,26 +318,8 @@ private void onContainerAtomRead(ContainerAtom container) throws ParserException
 
   private void onMoovContainerAtomRead(ContainerAtom moov) {
     Assertions.checkState(sideloadedTrack == null, "Unexpected moov box.");
-    List<Atom.LeafAtom> moovLeafChildren = moov.leafChildren;
-    int moovLeafChildrenSize = moovLeafChildren.size();
 
-    DrmInitData.Mapped drmInitData = null;
-    for (int i = 0; i < moovLeafChildrenSize; i++) {
-      LeafAtom child = moovLeafChildren.get(i);
-      if (child.type == Atom.TYPE_pssh) {
-        if (drmInitData == null) {
-          drmInitData = new DrmInitData.Mapped();
-        }
-        byte[] psshData = child.data.data;
-        UUID uuid = PsshAtomUtil.parseUuid(psshData);
-        if (uuid == null) {
-          Log.w(TAG, "Skipped pssh atom (failed to extract uuid)");
-        } else {
-          drmInitData.put(PsshAtomUtil.parseUuid(psshData),
-              new SchemeInitData(MimeTypes.VIDEO_MP4, psshData));
-        }
-      }
-    }
+    DrmInitData.Mapped drmInitData = getDrmInitDataFromAtoms(moov.leafChildren);
     if (drmInitData != null) {
       extractorOutput.drmInitData(drmInitData);
     }
@@ -391,6 +373,10 @@ private void onMoovContainerAtomRead(ContainerAtom moov) {
 
   private void onMoofContainerAtomRead(ContainerAtom moof) throws ParserException {
     parseMoof(moof, trackBundles, flags, extendedTypeScratch);
+    DrmInitData.Mapped drmInitData = getDrmInitDataFromAtoms(moof.leafChildren);
+    if (drmInitData != null) {
+      extractorOutput.drmInitData(drmInitData);
+    }
   }
 
   /**
@@ -1029,6 +1015,29 @@ private int appendSampleEncryptionData(TrackBundle trackBundle) {
     return 1 + vectorSize + subsampleDataLength;
   }
 
+  /** Returns DrmInitData from leaf atoms. */
+  private static DrmInitData.Mapped getDrmInitDataFromAtoms(List<Atom.LeafAtom> leafChildren) {
+    DrmInitData.Mapped drmInitData = null;
+    int leafChildrenSize = leafChildren.size();
+    for (int i = 0; i < leafChildrenSize; i++) {
+      LeafAtom child = leafChildren.get(i);
+      if (child.type == Atom.TYPE_pssh) {
+        if (drmInitData == null) {
+          drmInitData = new DrmInitData.Mapped();
+        }
+        byte[] psshData = child.data.data;
+        UUID uuid = PsshAtomUtil.parseUuid(psshData);
+        if (uuid == null) {
+          Log.w(TAG, "Skipped pssh atom (failed to extract uuid)");
+        } else {
+          drmInitData.put(PsshAtomUtil.parseUuid(psshData),
+              new SchemeInitData(MimeTypes.VIDEO_MP4, psshData));
+        }
+      }
+    }
+    return drmInitData;
+  }
+
   /** Returns whether the extractor should parse a leaf atom with type {@code atom}. */
   private static boolean shouldParseLeafAtom(int atom) {
     return atom == Atom.TYPE_hdlr || atom == Atom.TYPE_mdhd || atom == Atom.TYPE_mvhd
