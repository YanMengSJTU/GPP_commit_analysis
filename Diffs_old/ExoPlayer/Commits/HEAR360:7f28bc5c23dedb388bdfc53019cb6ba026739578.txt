diff --git a/demo/src/main/assets/media.exolist.json b/demo/src/main/assets/media.exolist.json
index b067098baa..965ada5eb8 100644
--- a/demo/src/main/assets/media.exolist.json
+++ b/demo/src/main/assets/media.exolist.json
@@ -1,436 +1,14 @@
 [
   {
-    "name": "YouTube DASH",
+    "name": "Demos: MP4,H264 AAC",
     "samples": [
       {
-        "name": "Google Glass (MP4,H264)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=51AF5F39AB0CEC3E5497CD9C900EBFEAECCCB5C7.8506521BFC350652163895D4C26DEE124209AA9E&key=ik0",
-        "extension": "mpd"
+        "name": "Boxing (MP4,H264,4*AAC,8Ball)",
+        "uri": "http://hear360.co/Boxing4AudioChannels.mp4"
       },
       {
-        "name": "Google Play (MP4,H264)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/3aa39fa2cc27967f/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=A2716F75795F5D2AF0E88962FFCD10DB79384F29.84308FF04844498CE6FBCE4731507882B8307798&key=ik0",
-        "extension": "mpd"
-      },
-      {
-        "name": "Google Glass (WebM,VP9)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,webm2_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=249B04F79E984D7F86B4D8DB48AE6FAF41C17AB3.7B9F0EC0505E1566E59B8E488E9419F253DDF413&key=ik0",
-        "extension": "mpd"
-      },
-      {
-        "name": "Google Play (WebM,VP9)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/3aa39fa2cc27967f/source/youtube?as=fmp4_audio_clear,webm2_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=B1C2A74783AC1CC4865EB312D7DD2D48230CC9FD.BD153B9882175F1F94BFE5141A5482313EA38E8D&key=ik0",
-        "extension": "mpd"
-      }
-    ]
-  },
-  {
-    "name": "Widevine DASH Policy Tests (GTS)",
-    "samples": [
-      {
-        "name": "WV: HDCP not specified",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=d286538032258a1c&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP not required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=48fcc369939ac96c&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=e06c39f1151da3df&provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure video path required (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=0894c7c8719b28a0&provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure video path required (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=0894c7c8719b28a0&provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure video path required (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=0894c7c8719b28a0&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP + secure video path required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=efd045b1eb61888a&provider=widevine_test"
-      },
-      {
-        "name": "WV: 30s license duration (fails at ~30s)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=f9a34cab7b05881a&provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "Widevine HDCP Capabilities Tests",
-    "samples": [
-      {
-        "name": "WV: HDCP: None (not required)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_None&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: 1.0 required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V1&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: 2.0 required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V2&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: 2.1 required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V2_1&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: 2.2 required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V2_2&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: No digital output",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_NO_DIGTAL_OUTPUT&provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "Widevine DASH: MP4,H264",
-    "samples": [
-      {
-        "name": "WV: Clear SD & HD (MP4,H264)",
+        "name": "WV: Clear SD & HD (MP4,H264,1*AAC)",
         "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears.mpd"
-      },
-      {
-        "name": "WV: Clear SD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears_sd.mpd"
-      },
-      {
-        "name": "WV: Clear HD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears_hd.mpd"
-      },
-      {
-        "name": "WV: Clear UHD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears_uhd.mpd"
-      },
-      {
-        "name": "WV: Secure SD & HD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure HD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure UHD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "Widevine DASH: WebM,VP9",
-    "samples": [
-      {
-        "name": "WV: Clear SD & HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears.mpd"
-      },
-      {
-        "name": "WV: Clear SD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears_sd.mpd"
-      },
-      {
-        "name": "WV: Clear HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears_hd.mpd"
-      },
-      {
-        "name": "WV: Clear UHD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears_uhd.mpd"
-      },
-      {
-        "name": "WV: Secure SD & HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure UHD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure Subsample (WebM, VP9 with altref)",
-        "uri": "https://storage.googleapis.com/widevine_test/vp9/sintel_1080p_vp9_altref_subsample/sintel_1080p_vp9_altref_subsample.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://widevine-proxy.appspot.com/proxy"
-      },
-      {
-        "name": "WV: Secure Fullsample (WebM, VP9 with altref)",
-        "uri": "https://storage.googleapis.com/widevine_test/vp9/sintel_1080p_vp9_altref_fullsample/sintel_1080p_vp9_altref_fullsample.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://widevine-proxy.appspot.com/proxy"
-      },
-      {
-        "name": "WV: Secure Subsample (WebM, VP9 without altref)",
-        "uri": "https://storage.googleapis.com/widevine_test/vp9/sintel_1080p_vp9_noaltref_subsample/sintel_1080p_vp9_noaltref_subsample.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://widevine-proxy.appspot.com/proxy"
-      },
-      {
-        "name": "WV: Secure Fullsample (WebM, VP9 without altref)",
-        "uri": "https://storage.googleapis.com/widevine_test/vp9/sintel_1080p_vp9_noaltref_fullsample/sintel_1080p_vp9_noaltref_fullsample.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://widevine-proxy.appspot.com/proxy"
-      }
-    ]
-  },
-  {
-    "name": "Widevine DASH: MP4,H265",
-    "samples": [
-      {
-        "name": "WV: Clear SD & HD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears.mpd"
-      },
-      {
-        "name": "WV: Clear SD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears_sd.mpd"
-      },
-      {
-        "name": "WV: Clear HD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears_hd.mpd"
-      },
-      {
-        "name": "WV: Clear UHD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears_uhd.mpd"
-      },
-      {
-        "name": "WV: Secure SD & HD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure HD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure UHD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "SmoothStreaming",
-    "samples": [
-      {
-        "name": "Super speed",
-        "uri": "http://playready.directtaps.net/smoothstreaming/SSWSS720H264/SuperSpeedway_720.ism"
-      },
-      {
-        "name": "Super speed (PlayReady)",
-        "uri": "http://playready.directtaps.net/smoothstreaming/SSWSS720H264PR/SuperSpeedway_720.ism",
-        "drm_scheme": "playready"
-      }
-    ]
-  },
-  {
-    "name": "HLS",
-    "samples": [
-      {
-        "name": "Apple 4x3 basic stream",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/bipbop_4x3_variant.m3u8"
-      },
-      {
-        "name": "Apple 16x9 basic stream",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_16x9/bipbop_16x9_variant.m3u8"
-      },
-      {
-        "name": "Apple master playlist advanced",
-        "uri": "https://tungsten.aaplimg.com/VOD/bipbop_adv_example_v2/master.m3u8"
-      },
-      {
-        "name": "Apple TS media playlist",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/gear1/prog_index.m3u8"
-      },
-      {
-        "name": "Apple AAC media playlist",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/gear0/prog_index.m3u8"
-      },
-      {
-        "name": "Apple ID3 metadata",
-        "uri": "http://devimages.apple.com/samplecode/adDemo/ad.m3u8"
-      }
-    ]
-  },
-  {
-    "name": "Misc",
-    "samples": [
-      {
-        "name": "Dizzy",
-        "uri": "http://html5demos.com/assets/dizzy.mp4"
-      },
-      {
-        "name": "Apple AAC 10s",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/gear0/fileSequence0.aac"
-      },
-      {
-        "name": "Apple TS 10s",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/gear1/fileSequence0.ts"
-      },
-      {
-        "name": "Android screens (Matroska)",
-        "uri": "http://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv"
-      },
-      {
-        "name": "Big Buck Bunny (MP4 Video)",
-        "uri": "http://redirector.c.youtube.com/videoplayback?id=604ed5ce52eda7ee&itag=22&source=youtube&sparams=ip,ipbits,expire,source,id&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=513F28C7FDCBEC60A66C86C9A393556C99DC47FB.04C88036EEE12565A1ED864A875A58F15D8B5300&key=ik0"
-      },
-      {
-        "name": "Screens 360P (WebM,VP9,No Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/video-vp9-360.webm"
-      },
-      {
-        "name": "Screens 480p (FMP4,H264,No Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/video-avc-baseline-480.mp4"
-      },
-      {
-        "name": "Screens 1080p (FMP4,H264, No Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/video-137.mp4"
-      },
-      {
-        "name": "Screens (FMP4,AAC Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/audio-141.mp4"
-      },
-      {
-        "name": "Google Play (MP3 Audio)",
-        "uri": "http://storage.googleapis.com/exoplayer-test-media-0/play.mp3"
-      },
-      {
-        "name": "Google Play (Ogg/Vorbis Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/ogg/play.ogg"
-      },
-      {
-        "name": "Google Glass (WebM Video with Vorbis Audio)",
-        "uri": "http://demos.webmproject.org/exoplayer/glass_vp9_vorbis.webm"
-      },
-      {
-        "name": "Google Glass (VP9 in MP4/ISO-BMFF)",
-        "uri": "http://demos.webmproject.org/exoplayer/glass.mp4"
-      },
-      {
-        "name": "Google Glass DASH - VP9 and Opus",
-        "uri": "http://demos.webmproject.org/dash/201410/vp9_glass/manifest_vp9_opus.mpd"
-      },
-      {
-        "name": "Big Buck Bunny (FLV Video)",
-        "uri": "http://vod.leasewebcdn.com/bbb.flv?ri=1024&rs=150&start=0"
-      }
-    ]
-  },
-  {
-    "name": "Playlists",
-    "samples": [
-      {
-        "name": "Cats -> Dogs",
-        "playlist": [
-          {
-            "uri": "http://html5demos.com/assets/dizzy.mp4"
-          },
-          {
-            "uri": "http://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv"
-          }
-        ]
-      },
-      {
-        "name": "Audio -> Video",
-        "playlist": [
-          {
-            "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/audio-141.mp4"
-          },
-          {
-            "uri": "http://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv"
-          }
-        ]
-      },
-      {
-        "name": "Clear -> Enc -> Clear -> Enc -> Enc",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test",
-        "playlist": [
-          {
-            "uri": "http://html5demos.com/assets/dizzy.mp4"
-          },
-          {
-            "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd"
-          },
-          {
-            "uri": "http://html5demos.com/assets/dizzy.mp4"
-          },
-          {
-            "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd"
-          },
-          {
-            "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd"
-          }
-        ]
       }
     ]
   }
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java b/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
index eaa4d9971f..332c4779ec 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
@@ -16,12 +16,19 @@
 package com.google.android.exoplayer2.demo;
 
 import android.app.Activity;
+import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageManager;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
 import android.net.Uri;
 import android.os.Bundle;
+import android.os.Debug;
 import android.os.Handler;
 import android.text.TextUtils;
+import android.util.Log;
 import android.view.View;
 import android.view.View.OnClickListener;
 import android.widget.Button;
@@ -73,6 +80,8 @@
 import java.util.Map;
 import java.util.UUID;
 
+import static com.google.android.exoplayer2.ExoPlayer.STATE_READY;
+
 /**
  * An activity that plays media using {@link SimpleExoPlayer}.
  */
@@ -143,6 +152,10 @@ public void onCreate(Bundle savedInstanceState) {
     simpleExoPlayerView = (SimpleExoPlayerView) findViewById(R.id.player_view);
     simpleExoPlayerView.setControllerVisibilityListener(this);
     simpleExoPlayerView.requestFocus();
+
+    //VR Sensors Related (Hear360)
+    mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
+    mSensorManager.registerListener(mSensorListener, mSensorManager.getDefaultSensor(Sensor.TYPE_GAME_ROTATION_VECTOR), SensorManager.SENSOR_DELAY_NORMAL);
   }
 
   @Override
@@ -163,6 +176,10 @@ public void onStart() {
   @Override
   public void onResume() {
     super.onResume();
+
+    //VR Sensors Related (Hear360)
+    mSensorManager.registerListener(mSensorListener, mSensorManager.getDefaultSensor(Sensor.TYPE_GAME_ROTATION_VECTOR), SensorManager.SENSOR_DELAY_NORMAL);
+
     if ((Util.SDK_INT <= 23 || player == null)) {
       initializePlayer();
     }
@@ -170,6 +187,7 @@ public void onResume() {
 
   @Override
   public void onPause() {
+    mSensorManager.unregisterListener(mSensorListener);
     super.onPause();
     if (Util.SDK_INT <= 23) {
       releasePlayer();
@@ -518,4 +536,118 @@ private void showToast(String message) {
     Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
   }
 
+  //VR Sensors Related (Hear360)
+
+  private SensorManager mSensorManager;
+  private double initialAzimuth = 0;
+  private double currentAzimuth = 0;
+
+  SensorEventListener mSensorListener = new SensorEventListener() {
+    @Override
+    public void onSensorChanged(SensorEvent event) {
+      float rotationMatrix[];
+      switch(event.sensor.getType())
+      {
+        case Sensor.TYPE_GAME_ROTATION_VECTOR:
+          rotationMatrix=new float[16];
+          mSensorManager.getRotationMatrixFromVector(rotationMatrix,event.values);
+          double azimuth = getAzimuth(rotationMatrix);
+
+          if(initialAzimuth == 0)
+          {
+            initialAzimuth = azimuth;
+          }
+          else
+          {
+            double relativeAzimuth = azimuth - initialAzimuth;
+            //Log.i("PlayerActivity", "relativeAzimuth:" + Math.toDegrees(relativeAzimuth));
+            if(relativeAzimuth > Math.PI)
+            {
+              currentAzimuth = relativeAzimuth - Math.PI * 2;
+            }
+            else if(relativeAzimuth < -Math.PI)
+            {
+              currentAzimuth = relativeAzimuth + Math.PI * 2;
+            }
+            else
+            {
+              currentAzimuth = relativeAzimuth;
+            }
+            //Log.i("PlayerActivity", "currentAzimuth:" + Math.toDegrees(currentAzimuth));
+
+            if(player != null && player.getPlaybackState() == STATE_READY && trackSelector != null)
+            {
+              TrackInfo trackInfo = trackSelector.getTrackInfo();
+              if (trackInfo != null) {
+                int rendererCount = trackInfo.rendererCount;
+                if(rendererCount != 5)
+                {
+                  update8BallVolumes(currentAzimuth);
+                }
+              }
+            }
+          }
+          break;
+      }
+    }
+
+    private double getAzimuth(float[] rotationMatrix)
+    {
+      float[] orientationValues = new float[3];
+      SensorManager.getOrientation(rotationMatrix, orientationValues);
+      double azimuth = orientationValues[0];
+
+      //Log.i("PlayerActivity", "azimuth:" + Math.toDegrees(azimuth));
+
+      return azimuth;
+    }
+
+    private void update8BallVolumes(double azimuth)
+    {
+      double frontVol = 0;
+      double leftVol = 0;
+      double backVol = 0;
+      double rightVol = 0;
+
+      if (azimuth <= Math.PI / 2 && azimuth >= 0)
+      {
+        frontVol = Math.cos (azimuth);
+        rightVol = Math.sin (azimuth);
+        backVol = 0;
+        leftVol = 0;
+      }
+      else if (azimuth > Math.PI / 2 && azimuth <= Math.PI)
+      {
+        frontVol = 0;
+        rightVol = Math.cos (azimuth - Math.PI / 2);
+        backVol = Math.sin (azimuth - Math.PI / 2);
+        leftVol = 0;
+      }
+      else if (azimuth < -Math.PI /2 && azimuth >= -Math.PI)
+      {
+        frontVol = 0;
+        rightVol = 0;
+        backVol = Math.sin (-azimuth - Math.PI / 2);
+        leftVol = Math.cos (-azimuth - Math.PI / 2);
+      }
+      else if (azimuth < 0 && azimuth >= -Math.PI / 2)
+      {
+        frontVol = Math.cos (-azimuth);
+        rightVol = 0;
+        backVol = 0;
+        leftVol = Math.sin (-azimuth);
+      }
+
+      float[] volumes = new float[] {(float)frontVol, (float)rightVol, (float)backVol, (float)leftVol};
+      player.set8BallVolume(1.0f, volumes);
+
+      Log.i("PlayerActivity", "azimuth:" + Math.toDegrees(azimuth) + ", front:" + frontVol + ", right:" + rightVol + ", backVol:" + backVol + ", leftVol:" + leftVol);
+    }
+
+    @Override
+    public void onAccuracyChanged(Sensor sensor, int accuracy) {
+      // TODO Auto-generated method stub
+
+    }
+  };
 }
diff --git a/library/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java b/library/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
index 8cb15a0271..04207ca6d2 100644
--- a/library/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
+++ b/library/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
@@ -1154,10 +1154,13 @@ private void enableRenderers(boolean[] rendererWasEnabledFlags, int enabledRende
               joining, playingPeriodHolder.rendererPositionOffsetUs);
           MediaClock mediaClock = renderer.getMediaClock();
           if (mediaClock != null) {
+            //Comment out this exception to be able to have multiple audio renderers (Hear360)
+            /*
             if (rendererMediaClock != null) {
               throw ExoPlaybackException.createForUnexpected(
                   new IllegalStateException("Multiple renderer media clocks enabled."));
             }
+            */
             rendererMediaClock = mediaClock;
             rendererMediaClockSource = renderer;
           }
diff --git a/library/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java b/library/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
index 07702c8f8c..b3de217ca8 100644
--- a/library/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
+++ b/library/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
@@ -262,6 +262,28 @@ public void setVolume(float volume) {
     player.sendMessages(messages);
   }
 
+  /**
+   * Sets the audio volume for each audio track of 4 audio tracks (8 Ball), with 0 being silence and 1 being unity gain.
+   *
+   * @param volume The master volume.
+   * @param volumes The sub volume array
+   */
+  public void set8BallVolume(float volume, float[] volumes) {
+    if(volumes.length != 4)
+      return;
+
+    this.volume = volume;
+    ExoPlayerMessage[] messages = new ExoPlayerMessage[audioRendererCount];
+    int count = 0;
+    for (Renderer renderer : renderers) {
+      if (renderer.getTrackType() == C.TRACK_TYPE_AUDIO) {
+        messages[count] = new ExoPlayerMessage(renderer, C.MSG_SET_VOLUME, volume * volumes[count]);
+        count++;
+      }
+    }
+    player.sendMessages(messages);
+  }
+
   /**
    * Returns the audio volume, with 0 being silence and 1 being unity gain.
    */
@@ -517,10 +539,26 @@ private void buildRenderers(Context context, DrmSessionManager drmSessionManager
         MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY);
     renderersList.add(videoRenderer);
 
-    Renderer audioRenderer = new MediaCodecAudioRenderer(MediaCodecSelector.DEFAULT,
-        drmSessionManager, true, mainHandler, componentListener,
-        AudioCapabilities.getCapabilities(context), AudioManager.STREAM_MUSIC);
-    renderersList.add(audioRenderer);
+    //Instanciate
+    Renderer audioRendererFront = new MediaCodecAudioRenderer(MediaCodecSelector.DEFAULT,
+            drmSessionManager, true, mainHandler, componentListener,
+            AudioCapabilities.getCapabilities(context), AudioManager.STREAM_MUSIC);
+    renderersList.add(audioRendererFront);
+
+    Renderer audioRendererRight = new MediaCodecAudioRenderer(MediaCodecSelector.DEFAULT,
+            drmSessionManager, true, mainHandler, componentListener,
+            AudioCapabilities.getCapabilities(context), AudioManager.STREAM_MUSIC);
+    renderersList.add(audioRendererRight);
+
+    Renderer audioRendererBack = new MediaCodecAudioRenderer(MediaCodecSelector.DEFAULT,
+            drmSessionManager, true, mainHandler, componentListener,
+            AudioCapabilities.getCapabilities(context), AudioManager.STREAM_MUSIC);
+    renderersList.add(audioRendererBack);
+
+    Renderer audioRendererLeft = new MediaCodecAudioRenderer(MediaCodecSelector.DEFAULT,
+            drmSessionManager, true, mainHandler, componentListener,
+            AudioCapabilities.getCapabilities(context), AudioManager.STREAM_MUSIC);
+    renderersList.add(audioRendererLeft);
 
     Renderer textRenderer = new TextRenderer(componentListener, mainHandler.getLooper());
     renderersList.add(textRenderer);
diff --git a/library/src/main/java/com/google/android/exoplayer2/trackselection/MappingTrackSelector.java b/library/src/main/java/com/google/android/exoplayer2/trackselection/MappingTrackSelector.java
index 5097079874..12c1254202 100644
--- a/library/src/main/java/com/google/android/exoplayer2/trackselection/MappingTrackSelector.java
+++ b/library/src/main/java/com/google/android/exoplayer2/trackselection/MappingTrackSelector.java
@@ -297,18 +297,36 @@ public final void onSelectionActivated(Object selectionInfo) {
 
     // Associate each track group to a preferred renderer, and evaluate the support that the
     // renderer provides for each track in the group.
-    for (int groupIndex = 0; groupIndex < trackGroups.length; groupIndex++) {
-      TrackGroup group = trackGroups.get(groupIndex);
-      // Associate the group to a preferred renderer.
-      int rendererIndex = findRenderer(rendererCapabilities, group);
-      // Evaluate the support that the renderer provides for each track in the group.
-      int[] rendererFormatSupport = rendererIndex == rendererCapabilities.length
-          ? new int[group.length] : getFormatSupport(rendererCapabilities[rendererIndex], group);
-      // Stash the results.
-      int rendererTrackGroupCount = rendererTrackGroupCounts[rendererIndex];
-      rendererTrackGroups[rendererIndex][rendererTrackGroupCount] = group;
-      rendererFormatSupports[rendererIndex][rendererTrackGroupCount] = rendererFormatSupport;
-      rendererTrackGroupCounts[rendererIndex]++;
+    if(trackGroups.length == 5) //Hard coded 8 Ball scenario (Hear360)
+    {
+      for (int groupIndex = 0; groupIndex < trackGroups.length; groupIndex++) {
+        TrackGroup group = trackGroups.get(groupIndex);
+        // Associate the group to a preferred renderer.
+        int rendererIndex = groupIndex; //1st is the video track, and the rest 4 are audio tracks
+        // Evaluate the support that the renderer provides for each track in the group.
+        int[] rendererFormatSupport = rendererIndex == rendererCapabilities.length
+                ? new int[group.length] : getFormatSupport(rendererCapabilities[rendererIndex], group);
+        // Stash the results.
+        int rendererTrackGroupCount = rendererTrackGroupCounts[rendererIndex];
+        rendererTrackGroups[rendererIndex][rendererTrackGroupCount] = group;
+        rendererFormatSupports[rendererIndex][rendererTrackGroupCount] = rendererFormatSupport;
+        rendererTrackGroupCounts[rendererIndex]++;
+      }
+    }
+    else {
+      for (int groupIndex = 0; groupIndex < trackGroups.length; groupIndex++) {
+        TrackGroup group = trackGroups.get(groupIndex);
+        // Associate the group to a preferred renderer.
+        int rendererIndex = findRenderer(rendererCapabilities, group);
+        // Evaluate the support that the renderer provides for each track in the group.
+        int[] rendererFormatSupport = rendererIndex == rendererCapabilities.length
+                ? new int[group.length] : getFormatSupport(rendererCapabilities[rendererIndex], group);
+        // Stash the results.
+        int rendererTrackGroupCount = rendererTrackGroupCounts[rendererIndex];
+        rendererTrackGroups[rendererIndex][rendererTrackGroupCount] = group;
+        rendererFormatSupports[rendererIndex][rendererTrackGroupCount] = rendererFormatSupport;
+        rendererTrackGroupCounts[rendererIndex]++;
+      }
     }
 
     // Create a track group array for each renderer, and trim each rendererFormatSupports entry.
