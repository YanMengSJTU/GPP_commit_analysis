diff --git a/CHANGELOG.md b/CHANGELOG.md
index f88c3a1..581d99c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,14 @@
 #Changelog
 
-#2.0.0 (WIP)
+#2.0.2 (05/01/2015)
+- Fixed `CalligraphyConfig.Builder` missing return statements.
+- Fixed `createView()` getting the wrong parent context, Fixed: #135, #120
+
+#2.0.1 (28/01/2014)
+- Throw exception on passing null into `CalligraphySpan`
+- Fixed memory bug with `Toolbar`. [@dlew](https://github.com/dlew)
+
+#2.0.0 (16/01/2014)
 **Breaking changes**
 This is a massive rewrite of the interception model. Look at `CalligraphyLayoutInflater` and
 `CalligraphyConfig` for more information on options and changes.
diff --git a/CalligraphySample/build.gradle b/CalligraphySample/build.gradle
index 5f4cb68..fb2186d 100644
--- a/CalligraphySample/build.gradle
+++ b/CalligraphySample/build.gradle
@@ -10,7 +10,7 @@ apply plugin: 'com.android.application'
 
 android {
     compileSdkVersion 21
-    buildToolsVersion "21.1.1"
+    buildToolsVersion "21.1.2"
 
     defaultConfig {
         minSdkVersion 7
@@ -29,8 +29,8 @@ android {
 
 dependencies {
     compile project(':calligraphy')
-    compile 'com.android.support:support-v4:21.0.2'
-    compile 'com.android.support:appcompat-v7:21.0.2'
+    compile 'com.android.support:support-v4:21.0.3'
+    compile 'com.android.support:appcompat-v7:21.0.3'
 
     compile 'com.jakewharton:butterknife:5.1.2'
 }
diff --git a/CalligraphySample/src/main/assets/fonts/Roboto-Bold.ttf b/CalligraphySample/src/main/assets/fonts/Roboto-Bold.ttf
old mode 100755
new mode 100644
index aaf374d..072b842
Binary files a/CalligraphySample/src/main/assets/fonts/Roboto-Bold.ttf and b/CalligraphySample/src/main/assets/fonts/Roboto-Bold.ttf differ
diff --git a/CalligraphySample/src/main/assets/fonts/Roboto-ThinItalic.ttf b/CalligraphySample/src/main/assets/fonts/Roboto-ThinItalic.ttf
old mode 100755
new mode 100644
index 63e9f97..0b53ba4
Binary files a/CalligraphySample/src/main/assets/fonts/Roboto-ThinItalic.ttf and b/CalligraphySample/src/main/assets/fonts/Roboto-ThinItalic.ttf differ
diff --git a/CalligraphySample/src/main/assets/fonts/RobotoCondensed-Regular.ttf b/CalligraphySample/src/main/assets/fonts/RobotoCondensed-Regular.ttf
old mode 100755
new mode 100644
index 65bf32a..713fd30
Binary files a/CalligraphySample/src/main/assets/fonts/RobotoCondensed-Regular.ttf and b/CalligraphySample/src/main/assets/fonts/RobotoCondensed-Regular.ttf differ
diff --git a/CalligraphySample/src/main/assets/fonts/gtw.ttf b/CalligraphySample/src/main/assets/fonts/gtw.ttf
new file mode 100755
index 0000000..eb97fed
Binary files /dev/null and b/CalligraphySample/src/main/assets/fonts/gtw.ttf differ
diff --git a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/PlaceholderFragment.java b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/PlaceholderFragment.java
index bca705f..6db0bdd 100644
--- a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/PlaceholderFragment.java
+++ b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/PlaceholderFragment.java
@@ -7,8 +7,8 @@
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.ViewStub;
 import android.widget.Toast;
-
 import butterknife.ButterKnife;
 import butterknife.OnClick;
 
@@ -30,6 +30,12 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle st
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
         ButterKnife.inject(this, view);
+
+        ViewStub stub = ButterKnife.findById(view, R.id.stub);
+        stub.inflate();
+
+        ViewStub stubWithFontPath = ButterKnife.findById(view, R.id.stub_with_font_path);
+        stubWithFontPath.inflate();
     }
 
     @OnClick({R.id.button_bold})
diff --git a/CalligraphySample/src/main/res/layout/fragment_main.xml b/CalligraphySample/src/main/res/layout/fragment_main.xml
index b5b9132..9d7adcc 100644
--- a/CalligraphySample/src/main/res/layout/fragment_main.xml
+++ b/CalligraphySample/src/main/res/layout/fragment_main.xml
@@ -72,6 +72,18 @@
             android:layout_height="wrap_content"
             android:text="@string/defined_custom_view"/>
 
+        <ViewStub
+            android:id="@+id/stub"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout="@layout/stub" />
+
+        <ViewStub
+            android:id="@+id/stub_with_font_path"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout="@layout/stub_with_font_path" />
+
         <CheckBox
             fontPath="fonts/Oswald-Stencbab.ttf"
             android:layout_width="match_parent"
diff --git a/CalligraphySample/src/main/res/layout/stub.xml b/CalligraphySample/src/main/res/layout/stub.xml
new file mode 100644
index 0000000..b7dc9b5
--- /dev/null
+++ b/CalligraphySample/src/main/res/layout/stub.xml
@@ -0,0 +1,6 @@
+<TextView
+
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:text="@string/defined_view_stub"/>
diff --git a/CalligraphySample/src/main/res/layout/stub_with_font_path.xml b/CalligraphySample/src/main/res/layout/stub_with_font_path.xml
new file mode 100644
index 0000000..f1db77e
--- /dev/null
+++ b/CalligraphySample/src/main/res/layout/stub_with_font_path.xml
@@ -0,0 +1,8 @@
+<TextView
+    fontPath="fonts/Oswald-Stencbab.ttf"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:text="@string/defined_view_stub_font_path"
+    tools:ignore="MissingPrefix"/>
diff --git a/CalligraphySample/src/main/res/values/strings.xml b/CalligraphySample/src/main/res/values/strings.xml
index 7deb544..618febf 100644
--- a/CalligraphySample/src/main/res/values/strings.xml
+++ b/CalligraphySample/src/main/res/values/strings.xml
@@ -2,6 +2,7 @@
 <resources>
 
     <string name="app_name">Calligraphy</string>
+    <string name="defined_gtw">\nThis is text set by the gtw style.\n</string>
     <string name="default_theme">\nThis is text set by the default theme fontPath.\n</string>
     <string name="defined_fontpath_view">\nThis has a font path set to Roboto Bold, on the View.\n</string>
     <string name="defined_incorrect">\nThis has a fontPath set to a font file that does not exist, it goes back to the default.\n</string>
@@ -10,6 +11,8 @@
     <string name="defined_in_appears">\nThis has the font path defined in the Views TextAppearance as Oswald.\n</string>
     <string name="defined_in_appears_caps">\nThis has the font path defined in the Views TextAppearance as Oswald. textAllCaps is applied.\n</string>
     <string name="defined_custom_view">\nThis is a custom TextView with Oswald font.\n</string>
+    <string name="defined_view_stub">\nThis is a TextView inflated from a ViewStub.\n</string>
+    <string name="defined_view_stub_font_path">\nThis is a TextView inflated from a ViewStub w/ fontPath declared.\n</string>
 
     <string name="checkbox_custom">Custom Oswald checkbox</string>
 
diff --git a/CalligraphySample/src/main/res/values/styles.xml b/CalligraphySample/src/main/res/values/styles.xml
index e32bcbb..640f473 100644
--- a/CalligraphySample/src/main/res/values/styles.xml
+++ b/CalligraphySample/src/main/res/values/styles.xml
@@ -23,6 +23,11 @@
 
     <style name="AppTheme.Widget"/>
 
+    <style name="TextViewNoStyleParent">
+        <item name="android:textColor">@android:color/holo_blue_dark</item>
+        <item name="fontPath">fonts/gtw.ttf</item>
+    </style>
+
     <style name="AppTheme.Widget.TextView" parent="android:Widget.Holo.Light.TextView">
         <!-- Custom Attr-->
         <item name="fontPath">fonts/RobotoCondensed-Regular.ttf</item>
diff --git a/README.md b/README.md
index d8d9e15..3e2fb92 100644
--- a/README.md
+++ b/README.md
@@ -1,58 +1,43 @@
 Calligraphy
 ===========
 
-Custom fonts in Android the easy way.
+[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Calligraphy-blue.svg?style=flat)](http://android-arsenal.com/details/1/163)
 
-Are you fed up of Custom views to set fonts? Or traversing the ViewTree to find TextViews? Yeah me too.
+Custom fonts in Android an OK way.
 
-![alt text](https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png "ScreenShot Of Font Samples")
-
-## Known Issue
+Are you fed up of Custom Views to set fonts? Or traversing the ViewTree to find TextViews? Yeah me too.
 
-Lollipop `support-v4:21.0.0` has broken inflation inside `Fragment`s, inside `onCreateView` you need
-to inflate using the activity `LayoutInflater`.
-
-```java
-@Override
-public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle state) {
-    return getActivity().getLayoutInflater().inflate(R.layout.fragment_main, container, false);
-}
-```
+![alt text](https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png "ScreenShot Of Font Samples")
 
 ##Getting started
 
 ### Dependency
 
-[Download from Maven Central (.aar)](http://search.maven.org/remotecontent?filepath=uk/co/chrisjenx/calligraphy/2.0.0/calligraphy-2.0.0.aar)
-
-__OR__
-
-Include the dependency:
+Include the dependency [Download (.aar)](http://search.maven.org/remotecontent?filepath=uk/co/chrisjenx/calligraphy/2.0.2/calligraphy-2.0.2.aar) :
 
 ```groovy
 dependencies {
-    compile 'uk.co.chrisjenx:calligraphy:2.0.0'
+    compile 'uk.co.chrisjenx:calligraphy:2.0.2'
 }
 ```
-### Fonts
-
-Add your custom fonts to `assets/fonts/` all font definitions are relative to this path. 
+### Add Fonts
 
-### Custom Attribute
+Add your custom fonts to `assets/` all font definitions are relative to this path. 
 
-We ship with `R.attr.fontPath`.
+### Usage
 
-This can be used in such a way: `<TextView fontPath="fonts/MyFont.ttf"/>` Please note the missing
-namespace, this IS intention.
+```xml
+<TextView fontPath="fonts/MyFont.ttf"/>
+``` 
+**Note: The missing namespace, this __IS__ intentional.**
 
-### Configuration
+### Installation
 
-Define your default font using `CalligraphyConfig`, in your `Application` class.
-Unfortunately `Activity#onCreate(Bundle)` is called _after_ `Activity#attachBaseContext(Context)` so
-the config needs to be defined before that.
+Define your default font using `CalligraphyConfig`, in your `Application` class in the `#onCreate()` method.
 
 ```java
-protected void onCreate() {
+@Override
+public void onCreate() {
     super.onCreate();
     CalligraphyConfig.initDefault(new CalligraphyConfig.Builder()
                             .setDefaultFontPath("fonts/Roboto-RobotoRegular.ttf")
@@ -62,17 +47,18 @@ protected void onCreate() {
     //....
 }
 ```
+
 _Note: You don't need to define `CalligraphyConfig` but the library will apply
-no default font and use `R.id.fontPath`._
+no default font and use the default attribute of `R.id.fontPath`._
 
 ### Inject into Context
 
-Wrap the Activity Context:
+Wrap the `Activity` Context:
 
 ```java
 @Override
 protected void attachBaseContext(Context newBase) {
-    super.attachBaseContext(new CalligraphyContextWrapper(newBase));
+    super.attachBaseContext(CalligraphyContextWrapper.wrap(newBase));
 }
 ```
 
@@ -169,7 +155,7 @@ It is possible to use multiple Typefaces inside a `TextView`, this isn't new con
 This _could_ be achieved using something like the following code.
 
 ```java
-SpannableStringBuilder builder = new SpannableStringBuilder();
+SpannableStringBuilder sBuilder = new SpannableStringBuilder();
 sBuilder.append("Hello!") // Bold this
         .append("I use Calligraphy"); // Default TextView font.
 // Create the Typeface you want to apply to certain text
@@ -193,7 +179,7 @@ Of course this is just an example. Your mileage may vary.
 
 This library was created because it is currently not possible to declare a custom font in XML files in Android.
 
-If you feel this should be possible to do, please star [this issue](https://code.google.com/p/android/issues/detail?id=1087) on the official Android bug tracker.
+If you feel this should be possible to do, please star [this issue](https://code.google.com/p/android/issues/detail?id=88945) on the official Android bug tracker.
 
 #Licence
 
diff --git a/calligraphy/build.gradle b/calligraphy/build.gradle
index fc1ab48..3d7b158 100644
--- a/calligraphy/build.gradle
+++ b/calligraphy/build.gradle
@@ -14,7 +14,7 @@ repositories {
 
 android {
     compileSdkVersion 21
-    buildToolsVersion "21.1.1"
+    buildToolsVersion "21.1.2"
 
     defaultConfig {
         minSdkVersion 7
@@ -31,7 +31,7 @@ android {
 }
 
 dependencies {
-    provided 'com.android.support:appcompat-v7:21.0.2'
+    provided 'com.android.support:appcompat-v7:21.0.3'
 }
 
 apply from: '../gradle/deploy.gradle'
diff --git a/calligraphy/gradle.properties b/calligraphy/gradle.properties
index 142caa8..9e72cf6 100644
--- a/calligraphy/gradle.properties
+++ b/calligraphy/gradle.properties
@@ -3,4 +3,4 @@
 
 POM_NAME=Calligraphy
 POM_ARTIFACT_ID=calligraphy
-POM_PACKAGING=jar
\ No newline at end of file
+POM_PACKAGING=aar
\ No newline at end of file
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java
index 9dd34aa..1b06d80 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java
@@ -156,8 +156,9 @@ public Builder setDefaultFontPath(String defaultFontAssetPath) {
          * }
          * </code></pre>
          */
-        public void disablePrivateFactoryInjection() {
+        public Builder disablePrivateFactoryInjection() {
             this.reflection = false;
+            return this;
         }
 
         /**
@@ -183,8 +184,9 @@ public void disablePrivateFactoryInjection() {
          * But if you want Calligraphy to inject the correct typeface then you will need to make sure your CustomView's
          * are created before reaching the LayoutInflater onViewCreated.
          */
-        public void disableCustomViewInflation() {
+        public Builder disableCustomViewInflation() {
             this.customViewCreation = false;
+            return this;
         }
 
         public CalligraphyConfig build() {
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
index 42b2a0d..e4616cb 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
@@ -1,7 +1,9 @@
 package uk.co.chrisjenx.calligraphy;
 
 import android.annotation.SuppressLint;
+import android.annotation.TargetApi;
 import android.content.Context;
+import android.os.Build;
 import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.view.View;
@@ -178,13 +180,23 @@ void onViewCreatedInternal(View view, final Context context, AttributeSet attrs)
         if (CalligraphyUtils.canCheckForV7Toolbar() && view instanceof android.support.v7.widget.Toolbar) {
             final ViewGroup parent = (ViewGroup) view;
             parent.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
+                @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
                 @Override
                 public void onGlobalLayout() {
-                    // No children, do nuffink!
-                    if (parent.getChildCount() <= 0) return;
-                    // Process children, defer draw as it has set the typeface.
-                    for (int i = 0; i < parent.getChildCount(); i++) {
-                        onViewCreated(parent.getChildAt(i), context, null);
+                    int childCount = parent.getChildCount();
+                    if (childCount != 0) {
+                        // Process children, defer draw as it has set the typeface.
+                        for (int i = 0; i < childCount; i++) {
+                            onViewCreated(parent.getChildAt(i), context, null);
+                        }
+                    }
+
+                    // Our dark deed is done
+                    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN ) {
+                        //noinspection deprecation
+                        parent.getViewTreeObserver().removeGlobalOnLayoutListener(this);
+                    } else {
+                        parent.getViewTreeObserver().removeOnGlobalLayoutListener(this);
                     }
                 }
             });
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
index e277071..850deec 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
@@ -160,7 +160,7 @@ protected View onCreateView(String name, AttributeSet attrs) throws ClassNotFoun
         for (String prefix : sClassPrefixList) {
             try {
                 view = createView(name, prefix, attrs);
-            } catch (ClassNotFoundException e) {
+            } catch (ClassNotFoundException ignored) {
             }
         }
         // In this case we want to let the base class take a crack
@@ -175,15 +175,15 @@ protected View onCreateView(String name, AttributeSet attrs) throws ClassNotFoun
      * will fall back through to the PhoneLayoutInflater method of inflating custom views where
      * Calligraphy will NOT have a hook into.
      *
-     * @param parent  parent view
-     * @param view    view if it has been inflated by this point, if this is not null this method
-     *                just returns this value.
-     * @param name    name of the thing to inflate.
-     * @param context Context to inflate by if parent is null
-     * @param attrs   Attr for this view which we can steal fontPath from too.
+     * @param parent      parent view
+     * @param view        view if it has been inflated by this point, if this is not null this method
+     *                    just returns this value.
+     * @param name        name of the thing to inflate.
+     * @param viewContext Context to inflate by if parent is null
+     * @param attrs       Attr for this view which we can steal fontPath from too.
      * @return view or the View we inflate in here.
      */
-    private View createCustomViewInternal(View parent, View view, String name, Context context, AttributeSet attrs) {
+    private View createCustomViewInternal(View parent, View view, String name, Context viewContext, AttributeSet attrs) {
         // I by no means advise anyone to do this normally, but Google have locked down access to
         // the createView() method, so we never get a callback with attributes at the end of the
         // createViewFromTag chain (which would solve all this unnecessary rubbish).
@@ -200,7 +200,10 @@ private View createCustomViewInternal(View parent, View view, String name, Conte
 
             final Object[] mConstructorArgsArr = (Object[]) ReflectionUtils.getValue(mConstructorArgs, this);
             final Object lastContext = mConstructorArgsArr[0];
-            mConstructorArgsArr[0] = parent != null ? parent.getContext() : context;
+            // The LayoutInflater actually finds out the correct context to use. We just need to set
+            // it on the mConstructor for the internal method.
+            // Set the constructor ars up for the createView, not sure why we can't pass these in.
+            mConstructorArgsArr[0] = viewContext;
             ReflectionUtils.setValue(mConstructorArgs, this, mConstructorArgsArr);
             try {
                 view = createView(name, null, attrs);
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyTypefaceSpan.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyTypefaceSpan.java
index 45f800b..debdd3e 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyTypefaceSpan.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyTypefaceSpan.java
@@ -9,6 +9,10 @@
     private final Typeface typeface;
 
     public CalligraphyTypefaceSpan(final Typeface typeface) {
+        if (typeface == null) {
+            throw new IllegalArgumentException("typeface is null");
+        }
+        
         this.typeface = typeface;
     }
 
@@ -37,4 +41,4 @@ private void apply(final Paint paint) {
 
         paint.setTypeface(typeface);
     }
-}
\ No newline at end of file
+}
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/ReflectionUtils.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/ReflectionUtils.java
index e19e37d..923a20d 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/ReflectionUtils.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/ReflectionUtils.java
@@ -31,7 +31,7 @@ static Object getValue(Field field, Object obj) {
     static void setValue(Field field, Object obj, Object value) {
         try {
             field.set(obj, value);
-        } catch (IllegalAccessException e) {
+        } catch (IllegalAccessException ignored) {
         }
     }
 
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
index 1dbf9a2..8ad3a8c 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
@@ -5,6 +5,7 @@
 import android.util.Log;
 
 import java.util.HashMap;
+import java.util.Map;
 
 /**
  * A helper loading {@link android.graphics.Typeface} avoiding the leak of the font when loaded
@@ -17,8 +18,8 @@
  */
 public final class TypefaceUtils {
 
-    private static final HashMap<String, Typeface> sCachedFonts = new HashMap<String, Typeface>();
-    private static final HashMap<Typeface, CalligraphyTypefaceSpan> sCachedSpans = new HashMap<Typeface, CalligraphyTypefaceSpan>();
+    private static final Map<String, Typeface> sCachedFonts = new HashMap<String, Typeface>();
+    private static final Map<Typeface, CalligraphyTypefaceSpan> sCachedSpans = new HashMap<Typeface, CalligraphyTypefaceSpan>();
 
     /**
      * A helper loading a custom font.
diff --git a/gradle.properties b/gradle.properties
index 0e5c8a9..68deef6 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -18,12 +18,12 @@
 # org.gradle.parallel=true
 
 GROUP=uk.co.chrisjenx
-VERSION_NAME=2.0.0
-VERSION_CODE=15
+VERSION_NAME=2.0.2
+VERSION_CODE=18
 
-POM_PACKAGING=jar
+POM_PACKAGING=aar
 POM_URL=https://github.com/chrisjenx/Calligraphy
-POM_DESCRIPTION=A modern implementation of the pull-to-refresh for Android
+POM_DESCRIPTION=Custom Font injection through styles and attributes.
 POM_SCM_URL=https://github.com/chrisjenx/Calligraphy
 POM_SCM_CONNECTION=scm:git@github.com:chrisjenx/Calligraphy.git
 POM_SCM_DEV_CONNECTION=scm:git@github.com:chrisjenx/Calligraphy.git
