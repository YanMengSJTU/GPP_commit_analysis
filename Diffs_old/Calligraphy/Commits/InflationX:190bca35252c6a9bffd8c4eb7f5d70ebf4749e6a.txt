diff --git a/README.md b/README.md
index fc68928..5c93e50 100644
--- a/README.md
+++ b/README.md
@@ -13,11 +13,12 @@ Are you fed up of Custom Views to set fonts? Or traversing the ViewTree to find
 
 ### Dependency
 
-Include the dependency [Download (.aar)](http://search.maven.org/remotecontent?filepath=uk/co/chrisjenx/calligraphy/2.2.0/calligraphy-2.2.0.aar) :
+Include the dependency [Download (.aar)](http://search.maven.org/remotecontent?filepath=uk/co/chrisjenx/calligraphy3/3.0.0-SNAPSHOT/calligraphy3-3.0.0-SNAPSHOT.aar) as well as the [ViewPump](https://github.com/InflationX/ViewPump) library:
 
 ```groovy
 dependencies {
-    compile 'uk.co.chrisjenx:calligraphy:2.2.0'
+    compile 'uk.co.chrisjenx:calligraphy3:3.0.0-SNAPSHOT'
+    compile 'io.github.inflationx:viewpump:0.1.1-SNAPSHOT'
 }
 ```
 ### Add Fonts
@@ -33,22 +34,24 @@ You might consider creating a `fonts/` subdirectory in the assets directory (as
 
 ```xml
 <TextView fontPath="fonts/MyFont.ttf"/>
-``` 
+```
 **Note: The missing namespace, this __IS__ intentional.**
 
 ### Installation
 
-Define your default font using `CalligraphyConfig`, in your `Application` class in the `#onCreate()` method.
+Define your default font using `CalligraphyConfig`, in your `Application` class in the `#onCreate()` method and pass it to the `CalligraphyInterceptor` that you add to your `ViewPump` builder.
 
 ```java
 @Override
 public void onCreate() {
     super.onCreate();
-    CalligraphyConfig.initDefault(new CalligraphyConfig.Builder()
-                            .setDefaultFontPath("fonts/Roboto-RobotoRegular.ttf")
-                            .setFontAttrId(R.attr.fontPath)
-                            .build()
-            );
+    ViewPump.init(ViewPump.builder()
+        .addInterceptor(new CalligraphyInterceptor(
+                new CalligraphyConfig.Builder()
+                    .setDefaultFontPath("fonts/Roboto-RobotoRegular.ttf")
+                    .setFontAttrId(R.attr.fontPath)
+                    .build()))
+        .build());
     //....
 }
 ```
@@ -63,7 +66,7 @@ Wrap the `Activity` Context:
 ```java
 @Override
 protected void attachBaseContext(Context newBase) {
-    super.attachBaseContext(CalligraphyContextWrapper.wrap(newBase));
+    super.attachBaseContext(ViewPumpContextWrapper.wrap(newBase));
 }
 ```
 
@@ -130,22 +133,22 @@ http://schemas.android.com/tools"`. See https://code.google.com/p/android/issues
 
 #FAQ
 
-### Font Resolution 
+### Font Resolution
 
 The `CalligraphyFactory` looks for the font in a pretty specific order, for the _most part_ it's
  very similar to how the Android framework resolves attributes.
- 
+
 1. `View` xml - attr defined here will always take priority.
 2. `Style` xml - attr defined here is checked next.
-3. `TextAppearance` xml - attr is checked next, the only caveat to this is **IF** you have a font 
+3. `TextAppearance` xml - attr is checked next, the only caveat to this is **IF** you have a font
  defined in the `Style` and a `TextAttribute` defined in the `View` the `Style` attribute is picked first!
 4. `Theme` - if defined this is used.
-5. `Default` - if defined in the `CalligraphyConfig` this is used of none of the above are found 
-**OR** if one of the above returns an invalid font. 
+5. `Default` - if defined in the `CalligraphyConfig` this is used of none of the above are found
+**OR** if one of the above returns an invalid font.
 
 ### Why *not* piggyback off of fontFamily attribute?
 
-We originally did, but it conflicted with users wanting to actually use that attribute, you now 
+We originally did, but it conflicted with users wanting to actually use that attribute, you now
 have to define a custom attribute.
 
 ### Why no jar?
@@ -192,6 +195,7 @@ Both have a method called `setSwitchTypeface` that sets the typeface within the
 - [@Codebutler](https://github.com/codebutler)
 - [@loganj](https://github.com/loganj)
 - [@dlew](https://github.com/dlew)
+- [@jbarr21](https://github.com/jbarr21)
 
 #Note
 
@@ -202,13 +206,13 @@ If you feel this should be possible to do, please star [this issue](https://code
 #Licence
 
     Copyright 2013 Christopher Jenkins
-    
+
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at
-    
+
         http://www.apache.org/licenses/LICENSE-2.0
-    
+
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
