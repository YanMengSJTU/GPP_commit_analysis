diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyTypefaceSpan.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyTypefaceSpan.java
new file mode 100644
index 0000000..45f800b
--- /dev/null
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyTypefaceSpan.java
@@ -0,0 +1,40 @@
+package uk.co.chrisjenx.calligraphy;
+
+import android.graphics.Paint;
+import android.graphics.Typeface;
+import android.text.TextPaint;
+import android.text.style.MetricAffectingSpan;
+
+public class CalligraphyTypefaceSpan extends MetricAffectingSpan {
+    private final Typeface typeface;
+
+    public CalligraphyTypefaceSpan(final Typeface typeface) {
+        this.typeface = typeface;
+    }
+
+    @Override
+    public void updateDrawState(final TextPaint drawState) {
+        apply(drawState);
+    }
+
+    @Override
+    public void updateMeasureState(final TextPaint paint) {
+        apply(paint);
+    }
+
+    private void apply(final Paint paint) {
+        final Typeface oldTypeface = paint.getTypeface();
+        final int oldStyle = oldTypeface != null ? oldTypeface.getStyle() : 0;
+        final int fakeStyle = oldStyle & ~typeface.getStyle();
+
+        if ((fakeStyle & Typeface.BOLD) != 0) {
+            paint.setFakeBoldText(true);
+        }
+
+        if ((fakeStyle & Typeface.ITALIC) != 0) {
+            paint.setTextSkewX(-0.25f);
+        }
+
+        paint.setTypeface(typeface);
+    }
+}
\ No newline at end of file
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
index 5785a2c..729faec 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
@@ -6,7 +6,12 @@
 import android.content.res.TypedArray;
 import android.graphics.Paint;
 import android.graphics.Typeface;
+import android.text.Editable;
+import android.text.Spannable;
+import android.text.SpannableString;
+import android.text.Spanned;
 import android.text.TextUtils;
+import android.text.TextWatcher;
 import android.util.AttributeSet;
 import android.util.TypedValue;
 import android.widget.TextView;
@@ -17,11 +22,26 @@
  */
 public final class CalligraphyUtils {
 
-    private static Integer sActionBarTitleId = null;
-    private static Integer sActionBarSubTitleId = null;
+    /**
+     * Applies a custom typeface span to the text.
+     *
+     * @param s        text to apply it too.
+     * @param typeface typeface to apply.
+     * @return Either the passed in Object or new Spannable with the typeface span applied.
+     */
+    public static CharSequence applyTypefaceSpan(CharSequence s, Typeface typeface) {
+        if (s != null && s.length() > 0) {
+            if (!(s instanceof Spannable)) {
+                s = new SpannableString(s);
+            }
+            ((Spannable) s).setSpan(new CalligraphyTypefaceSpan(typeface), 0, s.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+        }
+        return s;
+    }
 
     /**
-     * Applies a Typeface to a TextView
+     * Applies a Typeface to a TextView, its recommend you don't call this multiple times, as this
+     * adds a TextWatcher.
      *
      * @param textView Not null, TextView or child of.
      * @param typeface Not null, Typeface to apply to the TextView.
@@ -29,17 +49,22 @@
      */
     public static boolean applyFontToTextView(final TextView textView, final Typeface typeface) {
         if (textView == null || typeface == null) return false;
-        textView.setTypeface(typeface);
         textView.setPaintFlags(textView.getPaintFlags() | Paint.SUBPIXEL_TEXT_FLAG);
-
-        if (isTextViewInActionBar(textView))
-            textView.post(new Runnable() {
-                @Override
-                public void run() {
-                    textView.setTypeface(typeface);
-                }
-            });
-
+        textView.setText(applyTypefaceSpan(textView.getText(), typeface), TextView.BufferType.SPANNABLE);
+        textView.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+            }
+
+            @Override
+            public void onTextChanged(CharSequence s, int start, int before, int count) {
+            }
+
+            @Override
+            public void afterTextChanged(Editable s) {
+                applyTypefaceSpan(s, typeface);
+            }
+        });
         return true;
     }
 
@@ -100,24 +125,6 @@ static final String pullFontPathFromTheme(Context context, int styleId, int attr
         }
     }
 
-    /**
-     * Does a dirty search to see if the TextView is part of the ActionBar.
-     * This could fail on some devices...
-     *
-     * @param textView checks this textview.
-     */
-    @SuppressWarnings("ConstantConditions")
-    static final boolean isTextViewInActionBar(TextView textView) {
-        if (textView == null) return false;
-        if (sActionBarTitleId == null)
-            sActionBarTitleId = textView.getResources().getIdentifier("action_bar_title", "id", "android");
-        if (sActionBarSubTitleId == null)
-            sActionBarSubTitleId = textView.getResources().getIdentifier("action_bar_subtitle", "id", "android");
-
-        return sActionBarTitleId != null && textView.getId() == sActionBarTitleId ||
-                sActionBarSubTitleId != null && textView.getId() == sActionBarSubTitleId;
-    }
-
     private CalligraphyUtils() {
     }
 
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
index 7749d1f..21319bc 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
@@ -18,6 +18,7 @@
 public final class TypefaceUtils {
 
     private static final HashMap<String, Typeface> sCachedFonts = new HashMap<String, Typeface>();
+    private static final HashMap<Typeface, CalligraphyTypefaceSpan> sCachedSpans = new HashMap<Typeface, CalligraphyTypefaceSpan>();
 
     /**
      * A helper loading a custom font.
@@ -43,6 +44,24 @@ public static Typeface load(final AssetManager assetManager, final String filePa
         }
     }
 
+    /**
+     * A helper loading custom spans so we don't have to keep creating hundreds of spans.
+     *
+     * @param typeface not null typeface
+     * @return will return null of typeface passed in is null.
+     */
+    public static CalligraphyTypefaceSpan getSpan(final Typeface typeface) {
+        if (typeface == null) return null;
+        synchronized (sCachedSpans) {
+            if (!sCachedSpans.containsKey(typeface)) {
+                final CalligraphyTypefaceSpan span = new CalligraphyTypefaceSpan(typeface);
+                sCachedSpans.put(typeface, span);
+                return span;
+            }
+            return sCachedSpans.get(typeface);
+        }
+    }
+
     private TypefaceUtils() {
     }
 }
