diff --git a/CalligraphySample/build.gradle b/CalligraphySample/build.gradle
index 781e369..a954883 100644
--- a/CalligraphySample/build.gradle
+++ b/CalligraphySample/build.gradle
@@ -1,12 +1,12 @@
 apply plugin: 'com.android.application'
 
 android {
-  compileSdkVersion 22
-  buildToolsVersion "22.0.1"
+  compileSdkVersion 23
+  buildToolsVersion "23.0.2"
 
   defaultConfig {
     minSdkVersion 8
-    targetSdkVersion 22
+    targetSdkVersion 23
     versionCode project.ext.versionCodeInt
     versionName version
   }
@@ -20,8 +20,8 @@ android {
 
 dependencies {
   compile project(':calligraphy')
-  compile 'com.android.support:support-v4:22.2.1'
-  compile 'com.android.support:appcompat-v7:22.2.1'
+  compile 'com.android.support:support-v4:23.1.1'
+  compile 'com.android.support:appcompat-v7:23.1.1'
 
   compile 'com.jakewharton:butterknife:5.1.2'
 
diff --git a/build.gradle b/build.gradle
index aee615c..569f316 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,7 +4,7 @@ buildscript {
     jcenter()
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:1.3.0'
+    classpath 'com.android.tools.build:gradle:2.0.0-alpha2'
   }
 }
 
@@ -21,5 +21,5 @@ allprojects {
 }
 
 task wrapper(type: Wrapper) {
-  gradleVersion = '2.5'
+  gradleVersion = '2.9'
 }
diff --git a/calligraphy/build.gradle b/calligraphy/build.gradle
index d2351a8..acc19e0 100644
--- a/calligraphy/build.gradle
+++ b/calligraphy/build.gradle
@@ -1,12 +1,12 @@
 apply plugin: 'com.android.library'
 
 android {
-  compileSdkVersion 22
-  buildToolsVersion "22.0.1"
+  compileSdkVersion 23
+  buildToolsVersion "23.0.2"
 
   defaultConfig {
     minSdkVersion 7
-    targetSdkVersion 22
+    targetSdkVersion 23
     versionCode project.ext.versionCodeInt
     versionName version
   }
@@ -19,7 +19,7 @@ android {
 }
 
 dependencies {
-  provided 'com.android.support:appcompat-v7:22.2.1'
+  compile 'com.android.support:appcompat-v7:23.1.1'
 }
 
 apply from: rootProject.file('gradle/deploy.gradle')
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
index 8da404d..3a9caa1 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
@@ -12,8 +12,8 @@
 import android.view.ViewTreeObserver;
 import android.widget.TextView;
 
-import java.lang.reflect.Method;
 import java.lang.ref.WeakReference;
+import java.lang.reflect.Method;
 
 class CalligraphyFactory {
 
@@ -153,6 +153,51 @@ void onViewCreatedInternal(View view, final Context context, AttributeSet attrs)
             toolbar.getViewTreeObserver().addOnGlobalLayoutListener(new ToolbarLayoutListener(this, context, toolbar));
         }
 
+        // Try to set typeface for custom views using interface method or via reflection if available
+        if (view instanceof HasTypeface) {
+            Typeface typeface = getDefaultTypeface(context, resolveFontPath(context, attrs));
+            if (typeface != null) {
+                ((HasTypeface) view).setTypeface(typeface);
+            }
+        } else if (CalligraphyConfig.get().isCustomViewTypefaceSupport() && CalligraphyConfig.get().isCustomViewHasTypeface(view)) {
+            final Method setTypeface = ReflectionUtils.getMethod(view.getClass(), "setTypeface");
+            String fontPath = resolveFontPath(context, attrs);
+            Typeface typeface = getDefaultTypeface(context, fontPath);
+            if (setTypeface != null && typeface != null) {
+                ReflectionUtils.invokeMethod(view, setTypeface, typeface);
+            }
+        }
+
+    }
+    
+    private Typeface getDefaultTypeface(Context context, String fontPath) {
+        if (TextUtils.isEmpty(fontPath)) {
+            fontPath = CalligraphyConfig.get().getFontPath();
+        }
+        if (!TextUtils.isEmpty(fontPath)) {
+            return TypefaceUtils.load(context.getAssets(), fontPath);
+        }
+        return null;
+    }
+
+    /**
+     * Resolving font path from xml attrs, style attrs or text appearance
+     */
+    private String resolveFontPath(Context context, AttributeSet attrs) {
+        // Try view xml attributes
+        String textViewFont = CalligraphyUtils.pullFontPathFromView(context, attrs, mAttributeId);
+
+        // Try view style attributes
+        if (TextUtils.isEmpty(textViewFont)) {
+            textViewFont = CalligraphyUtils.pullFontPathFromStyle(context, attrs, mAttributeId);
+        }
+
+        // Try View TextAppearance
+        if (TextUtils.isEmpty(textViewFont)) {
+            textViewFont = CalligraphyUtils.pullFontPathFromTextAppearance(context, attrs, mAttributeId);
+        }
+
+        return textViewFont;
     }
 
     private static class ToolbarLayoutListener implements ViewTreeObserver.OnGlobalLayoutListener {
@@ -160,16 +205,16 @@ void onViewCreatedInternal(View view, final Context context, AttributeSet attrs)
         private final WeakReference<CalligraphyFactory> mCalligraphyFactory;
         private final WeakReference<Context> mContextRef;
         private final WeakReference<Toolbar> mToolbarReference;
-        private final CharSequence orignalTitle;
-        private final CharSequence orignalSubTitle;
+        private final CharSequence originalTitle;
+        private final CharSequence originalSubTitle;
 
         private ToolbarLayoutListener(final CalligraphyFactory calligraphyFactory,
                                       final Context context, Toolbar toolbar) {
             mCalligraphyFactory = new WeakReference<>(calligraphyFactory);
             mContextRef = new WeakReference<>(context);
             mToolbarReference = new WeakReference<>(toolbar);
-            orignalTitle = toolbar.getTitle();
-            orignalSubTitle = toolbar.getSubtitle();
+            originalTitle = toolbar.getTitle();
+            originalSubTitle = toolbar.getSubtitle();
             toolbar.setTitle(" ");
             toolbar.setSubtitle("  ");
         }
@@ -193,8 +238,8 @@ private ToolbarLayoutListener(final CalligraphyFactory calligraphyFactory,
                 }
             }
             removeSelf(toolbar);
-            toolbar.setTitle(orignalTitle);
-            toolbar.setSubtitle(orignalSubTitle);
+            toolbar.setTitle(originalTitle);
+            toolbar.setSubtitle(originalSubTitle);
         }
 
         private void removeSelf(final Toolbar toolbar) {// Our dark deed is done
@@ -206,49 +251,6 @@ private void removeSelf(final Toolbar toolbar) {// Our dark deed is done
             }
         }
 
-        // Try to set typeface for custom views using interface method or via reflection if available
-        if (view instanceof HasTypeface) {
-            Typeface typeface = getDefaultTypeface(context, resolveFontPath(context, attrs));
-            if (typeface != null) {
-                ((HasTypeface) view).setTypeface(typeface);
-            }
-        } else if (CalligraphyConfig.get().isCustomViewTypefaceSupport() && CalligraphyConfig.get().isCustomViewHasTypeface(view)) {
-            final Method setTypeface = ReflectionUtils.getMethod(view.getClass(), "setTypeface");
-            String fontPath = resolveFontPath(context, attrs);
-            Typeface typeface = getDefaultTypeface(context, fontPath);
-            if (setTypeface != null && typeface != null) {
-                ReflectionUtils.invokeMethod(view, setTypeface, typeface);
-            }
-        }
-    }
-
-    private Typeface getDefaultTypeface(Context context, String fontPath) {
-        if (TextUtils.isEmpty(fontPath)) {
-            fontPath = CalligraphyConfig.get().getFontPath();
-        }
-        if (!TextUtils.isEmpty(fontPath)) {
-            return TypefaceUtils.load(context.getAssets(), fontPath);
-        }
-        return null;
     }
 
-    /**
-     * Resolving font path from xml attrs, style attrs or text appearance
-     */
-    private String resolveFontPath(Context context, AttributeSet attrs) {
-        // Try view xml attributes
-        String textViewFont = CalligraphyUtils.pullFontPathFromView(context, attrs, mAttributeId);
-
-        // Try view style attributes
-        if (TextUtils.isEmpty(textViewFont)) {
-            textViewFont = CalligraphyUtils.pullFontPathFromStyle(context, attrs, mAttributeId);
-        }
-
-        // Try View TextAppearance
-        if (TextUtils.isEmpty(textViewFont)) {
-            textViewFont = CalligraphyUtils.pullFontPathFromTextAppearance(context, attrs, mAttributeId);
-        }
-
-        return textViewFont;
-    }
 }
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 0087cd3..9411448 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index b7011db..7ed3212 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Thu Nov 27 12:20:57 GMT 2014
+#Mon Dec 07 22:03:02 GMT 2015
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.9-all.zip
diff --git a/gradlew b/gradlew
index 91a7e26..9d82f78 100755
--- a/gradlew
+++ b/gradlew
@@ -42,11 +42,6 @@ case "`uname`" in
     ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
 # Attempt to set APP_HOME
 # Resolve links: $0 may be a link
 PRG="$0"
@@ -61,9 +56,9 @@ while [ -h "$PRG" ] ; do
     fi
 done
 SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
+cd "`dirname \"$PRG\"`/" >/dev/null
 APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
+cd "$SAVED" >/dev/null
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
@@ -114,6 +109,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
