diff --git a/CHANGELOG.md b/CHANGELOG.md
index 581d99c..837e872 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,13 @@
 #Changelog
 
+#2.2.0 (05/04/2016)
+- Added AppCompat Styles (AppCompatTextView will now pickup textViewStyle etc). Thanks @paul-turner
+- Fix for Toolbar not inflating `TextView`s upfront.
+
+#2.1.0 (27/04/2015)
+- Fixed #155, We now clone correctly.
+- Added Styles for Custom Views. (`builder.addCustomStyle(ToggleButton.class, android.R.attr.buttonStyleToggle)`)
+
 #2.0.2 (05/01/2015)
 - Fixed `CalligraphyConfig.Builder` missing return statements.
 - Fixed `createView()` getting the wrong parent context, Fixed: #135, #120
diff --git a/CalligraphySample/build.gradle b/CalligraphySample/build.gradle
index fb2186d..60958f6 100644
--- a/CalligraphySample/build.gradle
+++ b/CalligraphySample/build.gradle
@@ -1,27 +1,22 @@
-buildscript {
-    repositories {
-        mavenCentral()
-    }
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.0.0'
-    }
-}
 apply plugin: 'com.android.application'
 
 android {
-    compileSdkVersion 21
-    buildToolsVersion "21.1.2"
+    compileSdkVersion 23
+    buildToolsVersion "23.0.2"
 
     defaultConfig {
-        minSdkVersion 7
-        targetSdkVersion 21
+        minSdkVersion 8
+        targetSdkVersion 23
         versionCode project.ext.versionCodeInt
         versionName version
     }
     buildTypes {
+        debug {
+            minifyEnabled true
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
+        }
         release {
-
-            minifyEnabled false
+            minifyEnabled true
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
         }
     }
@@ -29,8 +24,12 @@ android {
 
 dependencies {
     compile project(':calligraphy')
-    compile 'com.android.support:support-v4:21.0.3'
-    compile 'com.android.support:appcompat-v7:21.0.3'
+    compile 'com.android.support:support-v4:23.2.0'
+    compile 'com.android.support:appcompat-v7:23.2.0'
+
+    compile 'com.jakewharton:butterknife:7.0.1'
 
-    compile 'com.jakewharton:butterknife:5.1.2'
+//    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
+    debugCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
+    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
 }
diff --git a/CalligraphySample/proguard-rules.txt b/CalligraphySample/proguard-rules.txt
index bb1e230..80668be 100644
--- a/CalligraphySample/proguard-rules.txt
+++ b/CalligraphySample/proguard-rules.txt
@@ -14,4 +14,16 @@
 # class:
 #-keepclassmembers class fqcn.of.javascript.interface.for.webview {
 #   public *;
-#}
\ No newline at end of file
+#}
+
+-keep class butterknife.** { *; }
+-dontwarn butterknife.internal.**
+-keep class **$$ViewBinder { *; }
+
+-keepclasseswithmembernames class * {
+    @butterknife.* <fields>;
+}
+
+-keepclasseswithmembernames class * {
+    @butterknife.* <methods>;
+}
diff --git a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CalligraphyApplication.java b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CalligraphyApplication.java
index fe221e7..826a408 100644
--- a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CalligraphyApplication.java
+++ b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CalligraphyApplication.java
@@ -14,9 +14,11 @@
     public void onCreate() {
         super.onCreate();
         CalligraphyConfig.initDefault(new CalligraphyConfig.Builder()
-                        .setDefaultFontPath("fonts/Roboto-ThinItalic.ttf")
-                        .setFontAttrId(R.attr.fontPath)
-                        .build()
+                .setDefaultFontPath("fonts/Roboto-ThinItalic.ttf")
+                .setFontAttrId(R.attr.fontPath)
+                .addCustomViewWithSetTypeface(CustomViewWithTypefaceSupport.class)
+                .addCustomStyle(TextField.class, R.attr.textFieldStyle)
+                .build()
         );
     }
 }
diff --git a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CustomViewWithTypefaceSupport.java b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CustomViewWithTypefaceSupport.java
new file mode 100644
index 0000000..7b54681
--- /dev/null
+++ b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CustomViewWithTypefaceSupport.java
@@ -0,0 +1,75 @@
+package uk.co.chrisjenx.calligraphy.sample;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.Typeface;
+import android.os.Build;
+import android.util.AttributeSet;
+import android.view.View;
+
+/**
+ * @author Dmitriy Tarasov
+ */
+public class CustomViewWithTypefaceSupport extends View {
+
+    private Paint paint;
+    private Rect textBounds;
+    private int width;
+    private int height;
+
+    public CustomViewWithTypefaceSupport(Context context) {
+        super(context);
+        init();
+    }
+
+    public CustomViewWithTypefaceSupport(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    public CustomViewWithTypefaceSupport(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init();
+    }
+
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    public CustomViewWithTypefaceSupport(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        init();
+    }
+
+    private void init() {
+        paint = new Paint();
+        paint.setTextSize(50);
+        textBounds = new Rect();
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        String text = "This is a custom view with setTypeface support";
+        Paint.FontMetrics fm = paint.getFontMetrics();
+        paint.getTextBounds(text, 0, text.length(), textBounds);
+
+        width = textBounds.left + textBounds.right + getPaddingLeft() + getPaddingRight();
+        height = (int) (Math.abs(fm.top) + fm.bottom);
+
+        canvas.drawText(text, 0, -fm.top + getPaddingTop(), paint);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(width, height);
+    }
+
+    /**
+     * Used by Calligraphy to change view's typeface
+     */
+    @SuppressWarnings("unused")
+    public void setTypeface(Typeface tf) {
+        paint.setTypeface(tf);
+        invalidate();
+    }
+}
diff --git a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
index 667302b..7131d30 100644
--- a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
+++ b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
@@ -4,16 +4,21 @@
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.Looper;
-import android.support.v7.app.ActionBarActivity;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.Toolbar;
 
 import uk.co.chrisjenx.calligraphy.CalligraphyContextWrapper;
 
-public class MainActivity extends ActionBarActivity {
+import static butterknife.ButterKnife.findById;
+
+public class MainActivity extends AppCompatActivity {
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
+        final Toolbar toolbar = findById(this, R.id.toolbar);
+        setSupportActionBar(toolbar);
 
         // Inject pragmatically
         getSupportFragmentManager()
@@ -21,13 +26,29 @@ protected void onCreate(Bundle savedInstanceState) {
                 .replace(R.id.container, PlaceholderFragment.getInstance())
                 .commit();
 
-        new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
+
+        final Handler handler = new Handler(Looper.getMainLooper());
+        handler.postDelayed(new Runnable() {
             @Override
             public void run() {
-                setTitle("Calligraphy changed");
-                getSupportActionBar().setSubtitle("Added subtitle");
+//                toolbar.setTitle("Calligraphy Added");
+                toolbar.setSubtitle("Added subtitle");
             }
         }, 1000);
+
+        handler.postDelayed(new Runnable() {
+            @Override public void run() {
+                toolbar.setTitle(null);
+                toolbar.setSubtitle("Added subtitle");
+            }
+        }, 2000);
+
+        handler.postDelayed(new Runnable() {
+            @Override public void run() {
+                toolbar.setTitle("Calligraphy added back");
+                toolbar.setSubtitle("Added subtitle");
+            }
+        }, 3000);
     }
 
     /*
diff --git a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/PlaceholderFragment.java b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/PlaceholderFragment.java
index 6db0bdd..a85fbe6 100644
--- a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/PlaceholderFragment.java
+++ b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/PlaceholderFragment.java
@@ -9,6 +9,7 @@
 import android.view.ViewGroup;
 import android.view.ViewStub;
 import android.widget.Toast;
+
 import butterknife.ButterKnife;
 import butterknife.OnClick;
 
@@ -29,7 +30,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle st
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        ButterKnife.inject(this, view);
+        ButterKnife.bind(this, view);
 
         ViewStub stub = ButterKnife.findById(view, R.id.stub);
         stub.inflate();
diff --git a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/TextField.java b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/TextField.java
new file mode 100644
index 0000000..df80d81
--- /dev/null
+++ b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/TextField.java
@@ -0,0 +1,17 @@
+package uk.co.chrisjenx.calligraphy.sample;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.widget.TextView;
+
+/**
+ * Created by chris on 17/03/15.
+ * For Calligraphy.
+ */
+public class TextField extends TextView {
+
+    public TextField(final Context context, final AttributeSet attrs) {
+        super(context, attrs, R.attr.textFieldStyle);
+    }
+
+}
diff --git a/CalligraphySample/src/main/res/layout/activity_main.xml b/CalligraphySample/src/main/res/layout/activity_main.xml
index f2f0768..0f77d3d 100644
--- a/CalligraphySample/src/main/res/layout/activity_main.xml
+++ b/CalligraphySample/src/main/res/layout/activity_main.xml
@@ -1,9 +1,26 @@
-<FrameLayout
-        xmlns:android="http://schemas.android.com/apk/res/android"
-        xmlns:tools="http://schemas.android.com/tools"
+<merge
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context="uk.co.chrisjenx.calligraphy.sample.MainActivity"
+    tools:ignore="MergeRootFrame">
+
+    <android.support.v7.widget.Toolbar
+        android:id="@+id/toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:background="@color/primary_material_light"
+        android:minHeight="?attr/actionBarSize"
+        android:translationZ="4dp"
+        android:theme="@style/ThemeOverlay.AppCompat.Light"/>
+
+    <FrameLayout
         android:id="@+id/container"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        tools:context="uk.co.chrisjenx.calligraphy.sample.MainActivity"
-        tools:ignore="MergeRootFrame">
-</FrameLayout>
+        android:layout_marginTop="?attr/actionBarSize"
+        />
+
+
+</merge>
diff --git a/CalligraphySample/src/main/res/layout/fragment_main.xml b/CalligraphySample/src/main/res/layout/fragment_main.xml
index 9d7adcc..7dff524 100644
--- a/CalligraphySample/src/main/res/layout/fragment_main.xml
+++ b/CalligraphySample/src/main/res/layout/fragment_main.xml
@@ -72,17 +72,22 @@
             android:layout_height="wrap_content"
             android:text="@string/defined_custom_view"/>
 
+        <uk.co.chrisjenx.calligraphy.sample.CustomViewWithTypefaceSupport
+            fontPath="fonts/Oswald-Stencbab.ttf"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content" />
+
         <ViewStub
             android:id="@+id/stub"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout="@layout/stub" />
+            android:layout="@layout/stub"/>
 
         <ViewStub
             android:id="@+id/stub_with_font_path"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout="@layout/stub_with_font_path" />
+            android:layout="@layout/stub_with_font_path"/>
 
         <CheckBox
             fontPath="fonts/Oswald-Stencbab.ttf"
@@ -93,6 +98,7 @@
             android:text="@string/checkbox_custom"/>
 
         <EditText
+            android:id="@+id/edit_text"
             fontPath="fonts/Roboto-Bold.ttf"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
@@ -100,6 +106,11 @@
             android:layout_marginTop="16dp"
             android:hint="@string/edit_text_hint"/>
 
+        <uk.co.chrisjenx.calligraphy.sample.TextField
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="@string/custom_view_style_text"/>
+
         <Button
             android:id="@+id/button_default"
             android:layout_width="wrap_content"
diff --git a/CalligraphySample/src/main/res/values/attrs.xml b/CalligraphySample/src/main/res/values/attrs.xml
new file mode 100644
index 0000000..ca4da99
--- /dev/null
+++ b/CalligraphySample/src/main/res/values/attrs.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <attr name="textFieldStyle" format="reference"/>
+
+</resources>
\ No newline at end of file
diff --git a/CalligraphySample/src/main/res/values/strings.xml b/CalligraphySample/src/main/res/values/strings.xml
index 618febf..56c3803 100644
--- a/CalligraphySample/src/main/res/values/strings.xml
+++ b/CalligraphySample/src/main/res/values/strings.xml
@@ -18,6 +18,8 @@
 
     <string name="edit_text_hint">Custom Roboto Bold Hint</string>
 
+    <string name="custom_view_style_text">\nCustom View Style, taken from a Custom style attribute.\n</string>
+
     <string name="button_default">Default Font (show dialog)</string>
     <string name="button_defined">Bold Button (show toast)</string>
 
diff --git a/CalligraphySample/src/main/res/values/styles.xml b/CalligraphySample/src/main/res/values/styles.xml
index 640f473..84227a2 100644
--- a/CalligraphySample/src/main/res/values/styles.xml
+++ b/CalligraphySample/src/main/res/values/styles.xml
@@ -4,22 +4,29 @@
 
     <!-- Base application theme. -->
     <!--<style name="AppTheme" parent="android:Theme.Holo.Light.DarkActionBar">-->
-    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+    <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
         <!-- Customize your theme here. -->
         <item name="android:textViewStyle">@style/AppTheme.Widget.TextView</item>
         <!-- Action Bar Theme -->
         <item name="android:actionBarStyle">@style/AppTheme.ActionBar</item>
+        <!-- Custom Style Attribute-->
+        <item name="textFieldStyle">@style/TextField</item>
     </style>
 
     <!-- AppTheme ActionBar Style -->
     <style name="AppTheme.ActionBar" parent="android:Widget.Holo.Light.ActionBar.Solid.Inverse">
         <item name="android:titleTextStyle">@style/AppTheme.ActionBar.TextAppearance</item>
+        <item name="android:subtitleTextStyle">@style/AppTheme.ActionBar.TextAppearance.SubTitle</item>
     </style>
 
-    <style name="AppTheme.ActionBar.TextAppearance" parent="android:TextAppearance.Holo.Widget.ActionBar.Title.Inverse">
+    <style name="AppTheme.ActionBar.TextAppearance" parent="TextAppearance.AppCompat.Widget.ActionBar.Title.Inverse">
         <item name="fontPath">fonts/Oswald-Stencbab.ttf</item>
     </style>
 
+    <style name="AppTheme.ActionBar.TextAppearance.SubTitle" parent="TextAppearance.AppCompat.Widget.ActionBar.Subtitle.Inverse">
+        <item name="fontPath">fonts/gtw.ttf</item>
+    </style>
+
 
     <style name="AppTheme.Widget"/>
 
@@ -52,4 +59,11 @@
         <item name="fontPath">fonts/Oswald-Stencbab.ttf</item>
         <item name="android:textColor">#444</item>
     </style>
+
+    <!-- Custom Class Styles -->
+    <style name="TextField" parent="android:Widget.Holo.Light.TextView">
+        <item name="fontPath">fonts/gtw.ttf</item>
+        <item name="android:textSize">@dimen/abc_text_size_small_material</item>
+    </style>
+
 </resources>
diff --git a/README.md b/README.md
index 3e2fb92..12c73cd 100644
--- a/README.md
+++ b/README.md
@@ -13,11 +13,11 @@ Are you fed up of Custom Views to set fonts? Or traversing the ViewTree to find
 
 ### Dependency
 
-Include the dependency [Download (.aar)](http://search.maven.org/remotecontent?filepath=uk/co/chrisjenx/calligraphy/2.0.2/calligraphy-2.0.2.aar) :
+Include the dependency [Download (.aar)](http://search.maven.org/remotecontent?filepath=uk/co/chrisjenx/calligraphy/2.2.0/calligraphy-2.2.0.aar) :
 
 ```groovy
 dependencies {
-    compile 'uk.co.chrisjenx:calligraphy:2.0.2'
+    compile 'uk.co.chrisjenx:calligraphy:2.2.0'
 }
 ```
 ### Add Fonts
@@ -49,7 +49,7 @@ public void onCreate() {
 ```
 
 _Note: You don't need to define `CalligraphyConfig` but the library will apply
-no default font and use the default attribute of `R.id.fontPath`._
+no default font and use the default attribute of `R.attr.fontPath`._
 
 ### Inject into Context
 
@@ -159,14 +159,27 @@ SpannableStringBuilder sBuilder = new SpannableStringBuilder();
 sBuilder.append("Hello!") // Bold this
         .append("I use Calligraphy"); // Default TextView font.
 // Create the Typeface you want to apply to certain text
-CalligraphyTypefaceSpan typefaceSpan = new CalligraphyTypefaceSpan(TypefaceUtils.load(getAssets(), "fonts/Roboto-Bold.ttf");
+CalligraphyTypefaceSpan typefaceSpan = new CalligraphyTypefaceSpan(TypefaceUtils.load(getAssets(), "fonts/Roboto-Bold.ttf"));
 // Apply typeface to the Spannable 0 - 6 "Hello!" This can of course by dynamic.
 sBuilder.setSpan(typefaceSpan, 0, 6, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-setText(sBuilder);
+setText(sBuilder, TextView.BufferType.SPANNABLE);
 ```
 Of course this is just an example. Your mileage may vary.
 
-#Colaborators
+### Exceptions / Pitfalls
+
+To our knowledge (try: `grep -r -e "void set[^(]*(Typeface " <android source dir>`) there are two standard Android widgets that have multiple methods to set typefaces. They are:
+
+ - android.support.v7.widget.SwitchCompat
+ - android.widget.Switch
+
+Both have a method called `setSwitchTypeface` that sets the typeface within the switch (e.g. on/off, yes/no). `SetTypeface` sets the typeface of the label. You will need to create your own subclass that overrides `setTypeface` and calls both `super.setTypeface` and `super.setSwitchTypeface`.
+
+
+
+
+
+#Collaborators
 
 - [@mironov-nsk](https://github.com/mironov-nsk)
 - [@Roman Zhilich](https://github.com/RomanZhilich)
@@ -196,3 +209,5 @@ If you feel this should be possible to do, please star [this issue](https://code
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
+
+[![Badge](http://www.libtastic.com/static/osbadges/79.png)](http://www.libtastic.com/technology/79/)
diff --git a/build.gradle b/build.gradle
index 92de3c3..c3126e9 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,14 +1,26 @@
 // Top-level build file where you can add configuration options common to all sub-projects/modules.
+buildscript {
+  repositories {
+    jcenter()
+  }
+  dependencies {
+    classpath 'com.android.tools.build:gradle:2.1.0-beta1'
+  }
+}
+
 allprojects {
-    repositories {
-        mavenCentral()
-    }
-    // Is Release Build?
-    ext.isReleaseVersion = has("release")
-    ext.versionCodeInt = getProperty('VERSION_CODE').toInteger()
-    version = VERSION_NAME
+  repositories {
+    jcenter()
+  }
+  // Is Release Build?
+  version = getProperty('VERSION_NAME');
+  ext {
+    isReleaseVersion = has("release")
+    versionCodeInt = getProperty('VERSION_CODE').toInteger()
+  }
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.2'
+  gradleVersion = '2.12'
+  distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
 }
diff --git a/calligraphy/build.gradle b/calligraphy/build.gradle
index 3d7b158..2332dd6 100644
--- a/calligraphy/build.gradle
+++ b/calligraphy/build.gradle
@@ -1,37 +1,27 @@
-buildscript {
-    repositories {
-        mavenCentral()
-    }
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.0.0'
-    }
-}
 apply plugin: 'com.android.library'
 
-repositories {
-    mavenCentral()
-}
-
 android {
-    compileSdkVersion 21
-    buildToolsVersion "21.1.2"
+    compileSdkVersion 23
+    buildToolsVersion "23.0.2"
 
     defaultConfig {
         minSdkVersion 7
-        targetSdkVersion 21
+        targetSdkVersion 23
         versionCode project.ext.versionCodeInt
         versionName version
+        consumerProguardFiles 'consumer-proguard-rules.txt'
     }
 
     buildTypes {
         release {
             minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'consumer-proguard-rules.txt'
         }
     }
 }
 
 dependencies {
-    provided 'com.android.support:appcompat-v7:21.0.3'
+    compile 'com.android.support:appcompat-v7:23.1.1'
 }
 
-apply from: '../gradle/deploy.gradle'
+apply from: rootProject.file('gradle/deploy.gradle')
diff --git a/calligraphy/proguard-rules.txt b/calligraphy/consumer-proguard-rules.txt
similarity index 86%
rename from calligraphy/proguard-rules.txt
rename to calligraphy/consumer-proguard-rules.txt
index bb1e230..10691cb 100644
--- a/calligraphy/proguard-rules.txt
+++ b/calligraphy/consumer-proguard-rules.txt
@@ -14,4 +14,8 @@
 # class:
 #-keepclassmembers class fqcn.of.javascript.interface.for.webview {
 #   public *;
-#}
\ No newline at end of file
+#}
+
+-keep class uk.co.chrisjenx.calligraphy.* { *; }
+-keep class uk.co.chrisjenx.calligraphy.*$* { *; }
+
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java
index 1b06d80..45e2ac7 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java
@@ -2,6 +2,21 @@
 
 import android.os.Build;
 import android.text.TextUtils;
+import android.view.View;
+import android.widget.AutoCompleteTextView;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.EditText;
+import android.widget.MultiAutoCompleteTextView;
+import android.widget.RadioButton;
+import android.widget.TextView;
+import android.widget.ToggleButton;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
 
 /**
  * Created by chris on 20/12/2013
@@ -9,6 +24,43 @@
  */
 public class CalligraphyConfig {
 
+    /**
+     * The default styles for the factory to lookup. The builder builds an extended immutable
+     * map of this with any additional custom styles.
+     */
+    private static final Map<Class<? extends TextView>, Integer> DEFAULT_STYLES = new HashMap<>();
+
+    static {
+        {
+            DEFAULT_STYLES.put(TextView.class, android.R.attr.textViewStyle);
+            DEFAULT_STYLES.put(Button.class, android.R.attr.buttonStyle);
+            DEFAULT_STYLES.put(EditText.class, android.R.attr.editTextStyle);
+            DEFAULT_STYLES.put(AutoCompleteTextView.class, android.R.attr.autoCompleteTextViewStyle);
+            DEFAULT_STYLES.put(MultiAutoCompleteTextView.class, android.R.attr.autoCompleteTextViewStyle);
+            DEFAULT_STYLES.put(CheckBox.class, android.R.attr.checkboxStyle);
+            DEFAULT_STYLES.put(RadioButton.class, android.R.attr.radioButtonStyle);
+            DEFAULT_STYLES.put(ToggleButton.class, android.R.attr.buttonStyleToggle);
+            if (CalligraphyUtils.canAddV7AppCompatViews()) {
+                addAppCompatViews();
+            }
+        }
+    }
+
+    /**
+     * AppCompat will inflate special versions of views for Material tinting etc,
+     * this adds those classes to the style lookup map
+     */
+    private static void addAppCompatViews() {
+        DEFAULT_STYLES.put(android.support.v7.widget.AppCompatTextView.class, android.R.attr.textViewStyle);
+        DEFAULT_STYLES.put(android.support.v7.widget.AppCompatButton.class, android.R.attr.buttonStyle);
+        DEFAULT_STYLES.put(android.support.v7.widget.AppCompatEditText.class, android.R.attr.editTextStyle);
+        DEFAULT_STYLES.put(android.support.v7.widget.AppCompatAutoCompleteTextView.class, android.R.attr.autoCompleteTextViewStyle);
+        DEFAULT_STYLES.put(android.support.v7.widget.AppCompatMultiAutoCompleteTextView.class, android.R.attr.autoCompleteTextViewStyle);
+        DEFAULT_STYLES.put(android.support.v7.widget.AppCompatCheckBox.class, android.R.attr.checkboxStyle);
+        DEFAULT_STYLES.put(android.support.v7.widget.AppCompatRadioButton.class, android.R.attr.radioButtonStyle);
+        DEFAULT_STYLES.put(android.support.v7.widget.AppCompatCheckedTextView.class, android.R.attr.checkedTextViewStyle);
+    }
+
     private static CalligraphyConfig sInstance;
 
     /**
@@ -51,6 +103,19 @@ public static CalligraphyConfig get() {
      * Use Reflection to intercept CustomView inflation with the correct Context.
      */
     private final boolean mCustomViewCreation;
+    /**
+     * Use Reflection to try to set typeface for custom views if they has setTypeface method
+     */
+    private final boolean mCustomViewTypefaceSupport;
+    /**
+     * Class Styles. Build from DEFAULT_STYLES and the builder.
+     */
+    private final Map<Class<? extends TextView>, Integer> mClassStyleAttributeMap;
+    /**
+     * Collection of custom non-{@code TextView}'s registered for applying typeface during inflation
+     * @see uk.co.chrisjenx.calligraphy.CalligraphyConfig.Builder#addCustomViewWithSetTypeface(Class)
+     */
+    private final Set<Class<?>> hasTypefaceViews;
 
     protected CalligraphyConfig(Builder builder) {
         mIsFontSet = builder.isFontSet;
@@ -58,6 +123,11 @@ protected CalligraphyConfig(Builder builder) {
         mAttrId = builder.attrId;
         mReflection = builder.reflection;
         mCustomViewCreation = builder.customViewCreation;
+        mCustomViewTypefaceSupport = builder.customViewTypefaceSupport;
+        final Map<Class<? extends TextView>, Integer> tempMap = new HashMap<>(DEFAULT_STYLES);
+        tempMap.putAll(builder.mStyleClassMap);
+        mClassStyleAttributeMap = Collections.unmodifiableMap(tempMap);
+        hasTypefaceViews = Collections.unmodifiableSet(builder.mHasTypefaceClasses);
     }
 
     /**
@@ -82,6 +152,18 @@ public boolean isCustomViewCreation() {
         return mCustomViewCreation;
     }
 
+    public boolean isCustomViewTypefaceSupport() {
+        return mCustomViewTypefaceSupport;
+    }
+
+    public boolean isCustomViewHasTypeface(View view) {
+        return hasTypefaceViews.contains(view.getClass());
+    }
+
+    /* default */ Map<Class<? extends TextView>, Integer> getClassStyles() {
+        return mClassStyleAttributeMap;
+    }
+
     /**
      * @return the custom attrId to look for, -1 if not set.
      */
@@ -102,6 +184,10 @@ public int getAttrId() {
          * Use Reflection to intercept CustomView inflation with the correct Context.
          */
         private boolean customViewCreation = true;
+        /**
+         * Use Reflection during view creation to try change typeface via setTypeface method if it exists
+         */
+        private boolean customViewTypefaceSupport = false;
         /**
          * The fontAttrId to look up the font path from.
          */
@@ -114,6 +200,12 @@ public int getAttrId() {
          * The default fontPath
          */
         private String fontAssetPath = null;
+        /**
+         * Additional Class Styles. Can be empty.
+         */
+        private Map<Class<? extends TextView>, Integer> mStyleClassMap = new HashMap<>();
+
+        private Set<Class<?>> mHasTypefaceClasses = new HashSet<>();
 
         /**
          * This defaults to R.attr.fontPath. So only override if you want to use your own attrId.
@@ -189,6 +281,37 @@ public Builder disableCustomViewInflation() {
             return this;
         }
 
+        /**
+         * Add a custom style to get looked up. If you use a custom class that has a parent style
+         * which is not part of the default android styles you will need to add it here.
+         *
+         * The Calligraphy inflater is unaware of custom styles in your custom classes. We use
+         * the class type to look up the style attribute in the theme resources.
+         *
+         * So if you had a {@code MyTextField.class} which looked up it's default style as
+         * {@code R.attr.textFieldStyle} you would add those here.
+         *
+         * {@code builder.addCustomStyle(MyTextField.class,R.attr.textFieldStyle}
+         *
+         * @param styleClass             the class that related to the parent styleResource. null is ignored.
+         * @param styleResourceAttribute e.g. {@code R.attr.textFieldStyle}, 0 is ignored.
+         * @return this builder.
+         */
+        public Builder addCustomStyle(final Class<? extends TextView> styleClass, final int styleResourceAttribute) {
+            if (styleClass == null || styleResourceAttribute == 0) return this;
+            mStyleClassMap.put(styleClass, styleResourceAttribute);
+            return this;
+        }
+
+        /**
+         * Register custom non-{@code TextView}'s which implement {@code setTypeface} so they can have the Typeface applied during inflation.
+         */
+        public Builder addCustomViewWithSetTypeface(Class<?> clazz) {
+            customViewTypefaceSupport = true;
+            mHasTypefaceClasses.add(clazz);
+            return this;
+        }
+
         public CalligraphyConfig build() {
             this.isFontSet = !TextUtils.isEmpty(fontAssetPath);
             return new CalligraphyConfig(this);
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java
index 4ad58dd..8650208 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java
@@ -108,7 +108,7 @@ public CalligraphyContextWrapper(Context base, int attributeId) {
     public Object getSystemService(String name) {
         if (LAYOUT_INFLATER_SERVICE.equals(name)) {
             if (mInflater == null) {
-                mInflater = new CalligraphyLayoutInflater(LayoutInflater.from(getBaseContext()), this, mAttributeId);
+                mInflater = new CalligraphyLayoutInflater(LayoutInflater.from(getBaseContext()), this, mAttributeId, false);
             }
             return mInflater;
         }
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
index e4616cb..abc43dc 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
@@ -3,41 +3,22 @@
 import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.content.Context;
+import android.graphics.Typeface;
 import android.os.Build;
+import android.support.v7.widget.Toolbar;
 import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.view.View;
-import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
-import android.widget.AutoCompleteTextView;
-import android.widget.Button;
-import android.widget.CheckBox;
-import android.widget.EditText;
-import android.widget.MultiAutoCompleteTextView;
-import android.widget.RadioButton;
 import android.widget.TextView;
-import android.widget.ToggleButton;
 
-import java.util.HashMap;
-import java.util.Map;
+import java.lang.ref.WeakReference;
+import java.lang.reflect.Method;
 
 class CalligraphyFactory {
 
     private static final String ACTION_BAR_TITLE = "action_bar_title";
     private static final String ACTION_BAR_SUBTITLE = "action_bar_subtitle";
-    private static final Map<Class<? extends TextView>, Integer> sStyles
-            = new HashMap<Class<? extends TextView>, Integer>() {
-        {
-            put(TextView.class, android.R.attr.textViewStyle);
-            put(Button.class, android.R.attr.buttonStyle);
-            put(EditText.class, android.R.attr.editTextStyle);
-            put(AutoCompleteTextView.class, android.R.attr.autoCompleteTextViewStyle);
-            put(MultiAutoCompleteTextView.class, android.R.attr.autoCompleteTextViewStyle);
-            put(CheckBox.class, android.R.attr.checkboxStyle);
-            put(RadioButton.class, android.R.attr.radioButtonStyle);
-            put(ToggleButton.class, android.R.attr.buttonStyleToggle);
-        }
-    };
 
     /**
      * Some styles are in sub styles, such as actionBarTextStyle etc..
@@ -57,8 +38,8 @@
         }
         if (styleIds[0] == -1) {
             // Use TextAppearance as default style
-            styleIds[0] = sStyles.containsKey(view.getClass())
-                    ? sStyles.get(view.getClass())
+            styleIds[0] = CalligraphyConfig.get().getClassStyles().containsKey(view.getClass())
+                    ? CalligraphyConfig.get().getClassStyles().get(view.getClass())
                     : android.R.attr.textAppearance;
         }
         return styleIds;
@@ -113,10 +94,10 @@ protected static boolean matchesResourceIdName(View view, String matches) {
         return resourceEntryName.equalsIgnoreCase(matches);
     }
 
-    private final int mAttributeId;
+    private final int[] mAttributeId;
 
     public CalligraphyFactory(int attributeId) {
-        this.mAttributeId = attributeId;
+        this.mAttributeId = new int[]{attributeId};
     }
 
     /**
@@ -147,18 +128,8 @@ void onViewCreatedInternal(View view, final Context context, AttributeSet attrs)
             // Try to get typeface attribute value
             // Since we're not using namespace it's a little bit tricky
 
-            // Try view xml attributes
-            String textViewFont = CalligraphyUtils.pullFontPathFromView(context, attrs, mAttributeId);
-
-            // Try view style attributes
-            if (TextUtils.isEmpty(textViewFont)) {
-                textViewFont = CalligraphyUtils.pullFontPathFromStyle(context, attrs, mAttributeId);
-            }
-
-            // Try View TextAppearance
-            if (TextUtils.isEmpty(textViewFont)) {
-                textViewFont = CalligraphyUtils.pullFontPathFromTextAppearance(context, attrs, mAttributeId);
-            }
+            // Check xml attrs, style attrs and text appearance for font path
+            String textViewFont = resolveFontPath(context, attrs);
 
             // Try theme attributes
             if (TextUtils.isEmpty(textViewFont)) {
@@ -178,30 +149,106 @@ void onViewCreatedInternal(View view, final Context context, AttributeSet attrs)
         // AppCompat API21+ The ActionBar doesn't inflate default Title/SubTitle, we need to scan the
         // Toolbar(Which underlies the ActionBar) for its children.
         if (CalligraphyUtils.canCheckForV7Toolbar() && view instanceof android.support.v7.widget.Toolbar) {
-            final ViewGroup parent = (ViewGroup) view;
-            parent.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
-                @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-                @Override
-                public void onGlobalLayout() {
-                    int childCount = parent.getChildCount();
-                    if (childCount != 0) {
-                        // Process children, defer draw as it has set the typeface.
-                        for (int i = 0; i < childCount; i++) {
-                            onViewCreated(parent.getChildAt(i), context, null);
-                        }
-                    }
-
-                    // Our dark deed is done
-                    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN ) {
-                        //noinspection deprecation
-                        parent.getViewTreeObserver().removeGlobalOnLayoutListener(this);
-                    } else {
-                        parent.getViewTreeObserver().removeOnGlobalLayoutListener(this);
-                    }
-                }
-            });
+            final Toolbar toolbar = (Toolbar) view;
+            toolbar.getViewTreeObserver().addOnGlobalLayoutListener(new ToolbarLayoutListener(this, context, toolbar));
+        }
+
+        // Try to set typeface for custom views using interface method or via reflection if available
+        if (view instanceof HasTypeface) {
+            Typeface typeface = getDefaultTypeface(context, resolveFontPath(context, attrs));
+            if (typeface != null) {
+                ((HasTypeface) view).setTypeface(typeface);
+            }
+        } else if (CalligraphyConfig.get().isCustomViewTypefaceSupport() && CalligraphyConfig.get().isCustomViewHasTypeface(view)) {
+            final Method setTypeface = ReflectionUtils.getMethod(view.getClass(), "setTypeface");
+            String fontPath = resolveFontPath(context, attrs);
+            Typeface typeface = getDefaultTypeface(context, fontPath);
+            if (setTypeface != null && typeface != null) {
+                ReflectionUtils.invokeMethod(view, setTypeface, typeface);
+            }
+        }
+
+    }
+
+    private Typeface getDefaultTypeface(Context context, String fontPath) {
+        if (TextUtils.isEmpty(fontPath)) {
+            fontPath = CalligraphyConfig.get().getFontPath();
+        }
+        if (!TextUtils.isEmpty(fontPath)) {
+            return TypefaceUtils.load(context.getAssets(), fontPath);
+        }
+        return null;
+    }
+
+    /**
+     * Resolving font path from xml attrs, style attrs or text appearance
+     */
+    private String resolveFontPath(Context context, AttributeSet attrs) {
+        // Try view xml attributes
+        String textViewFont = CalligraphyUtils.pullFontPathFromView(context, attrs, mAttributeId);
+
+        // Try view style attributes
+        if (TextUtils.isEmpty(textViewFont)) {
+            textViewFont = CalligraphyUtils.pullFontPathFromStyle(context, attrs, mAttributeId);
+        }
+
+        // Try View TextAppearance
+        if (TextUtils.isEmpty(textViewFont)) {
+            textViewFont = CalligraphyUtils.pullFontPathFromTextAppearance(context, attrs, mAttributeId);
         }
+
+        return textViewFont;
     }
 
+    private static class ToolbarLayoutListener implements ViewTreeObserver.OnGlobalLayoutListener {
+
+        static String BLANK = " ";
+
+        private final WeakReference<CalligraphyFactory> mCalligraphyFactory;
+        private final WeakReference<Context> mContextRef;
+        private final WeakReference<Toolbar> mToolbarReference;
+        private final CharSequence originalSubTitle;
+
+        private ToolbarLayoutListener(final CalligraphyFactory calligraphyFactory,
+                                      final Context context, Toolbar toolbar) {
+            mCalligraphyFactory = new WeakReference<>(calligraphyFactory);
+            mContextRef = new WeakReference<>(context);
+            mToolbarReference = new WeakReference<>(toolbar);
+            originalSubTitle = toolbar.getSubtitle();
+            toolbar.setSubtitle(BLANK);
+        }
+
+        @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+        @Override public void onGlobalLayout() {
+            final Toolbar toolbar = mToolbarReference.get();
+            final Context context = mContextRef.get();
+            final CalligraphyFactory factory = mCalligraphyFactory.get();
+            if (toolbar == null) return;
+            if (factory == null || context == null) {
+                removeSelf(toolbar);
+                return;
+            }
+
+            int childCount = toolbar.getChildCount();
+            if (childCount != 0) {
+                // Process children, defer draw as it has set the typeface.
+                for (int i = 0; i < childCount; i++) {
+                    factory.onViewCreated(toolbar.getChildAt(i), context, null);
+                }
+            }
+            removeSelf(toolbar);
+            toolbar.setSubtitle(originalSubTitle);
+        }
+
+        private void removeSelf(final Toolbar toolbar) {// Our dark deed is done
+            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
+                //noinspection deprecation
+                toolbar.getViewTreeObserver().removeGlobalOnLayoutListener(this);
+            } else {
+                toolbar.getViewTreeObserver().removeOnGlobalLayoutListener(this);
+            }
+        }
+
+    }
 
 }
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
index 850deec..6f9cfc1 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
@@ -34,19 +34,19 @@ protected CalligraphyLayoutInflater(Context context, int attributeId) {
         super(context);
         mAttributeId = attributeId;
         mCalligraphyFactory = new CalligraphyFactory(attributeId);
-        setUpLayoutFactories();
+        setUpLayoutFactories(false);
     }
 
-    protected CalligraphyLayoutInflater(LayoutInflater original, Context newContext, int attributeId) {
+    protected CalligraphyLayoutInflater(LayoutInflater original, Context newContext, int attributeId, final boolean cloned) {
         super(original, newContext);
         mAttributeId = attributeId;
         mCalligraphyFactory = new CalligraphyFactory(attributeId);
-        setUpLayoutFactories();
+        setUpLayoutFactories(cloned);
     }
 
     @Override
     public LayoutInflater cloneInContext(Context newContext) {
-        return new CalligraphyLayoutInflater(this, newContext, mAttributeId);
+        return new CalligraphyLayoutInflater(this, newContext, mAttributeId, true);
     }
 
     // ===
@@ -64,7 +64,8 @@ public View inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot)
      * We don't want to unnecessary create/set our factories if there are none there. We try to be
      * as lazy as possible.
      */
-    private void setUpLayoutFactories() {
+    private void setUpLayoutFactories(boolean cloned) {
+        if (cloned) return;
         // If we are HC+ we get and set Factory2 otherwise we just wrap Factory1
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
             if (getFactory2() != null && !(getFactory2() instanceof WrapperFactory2)) {
@@ -93,6 +94,7 @@ public void setFactory(Factory factory) {
     public void setFactory2(Factory2 factory2) {
         // Only set our factory and wrap calls to the Factory2 trying to be set!
         if (!(factory2 instanceof WrapperFactory2)) {
+//            LayoutInflaterCompat.setFactory(this, new WrapperFactory2(factory2, mCalligraphyFactory));
             super.setFactory2(new WrapperFactory2(factory2, mCalligraphyFactory));
         } else {
             super.setFactory2(factory2);
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
index 11737bf..ab71cd9 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
@@ -22,6 +22,8 @@
  */
 public final class CalligraphyUtils {
 
+    public static final int[] ANDROID_ATTR_TEXT_APPEARANCE = new int[]{android.R.attr.textAppearance};
+
     /**
      * Applies a custom typeface span to the text.
      *
@@ -152,13 +154,13 @@ static void applyFontToTextView(final Context context, final TextView textView,
      * @param attributeId if -1 returns null.
      * @return null if attribute is not defined or added to View
      */
-    static String pullFontPathFromView(Context context, AttributeSet attrs, int attributeId) {
-        if (attributeId == -1 || attrs == null)
+    static String pullFontPathFromView(Context context, AttributeSet attrs, int[] attributeId) {
+        if (attributeId == null || attrs == null)
             return null;
 
         final String attributeName;
         try {
-            attributeName = context.getResources().getResourceEntryName(attributeId);
+            attributeName = context.getResources().getResourceEntryName(attributeId[0]);
         } catch (Resources.NotFoundException e) {
             // invalid attribute ID
             return null;
@@ -179,10 +181,10 @@ static String pullFontPathFromView(Context context, AttributeSet attrs, int attr
      * @param attributeId if -1 returns null.
      * @return null if attribute is not defined or found in the Style
      */
-    static String pullFontPathFromStyle(Context context, AttributeSet attrs, int attributeId) {
-        if (attributeId == -1 || attrs == null)
+    static String pullFontPathFromStyle(Context context, AttributeSet attrs, int[] attributeId) {
+        if (attributeId == null || attrs == null)
             return null;
-        final TypedArray typedArray = context.obtainStyledAttributes(attrs, new int[]{attributeId});
+        final TypedArray typedArray = context.obtainStyledAttributes(attrs, attributeId);
         if (typedArray != null) {
             try {
                 // First defined attribute
@@ -207,13 +209,13 @@ static String pullFontPathFromStyle(Context context, AttributeSet attrs, int att
      * @param attributeId if -1 returns null.
      * @return returns null if attribute is not defined or if no TextAppearance is found.
      */
-    static String pullFontPathFromTextAppearance(final Context context, AttributeSet attrs, int attributeId) {
-        if (attributeId == -1 || attrs == null) {
+    static String pullFontPathFromTextAppearance(final Context context, AttributeSet attrs, int[] attributeId) {
+        if (attributeId == null || attrs == null) {
             return null;
         }
 
         int textAppearanceId = -1;
-        final TypedArray typedArrayAttr = context.obtainStyledAttributes(attrs, new int[]{android.R.attr.textAppearance});
+        final TypedArray typedArrayAttr = context.obtainStyledAttributes(attrs, ANDROID_ATTR_TEXT_APPEARANCE);
         if (typedArrayAttr != null) {
             try {
                 textAppearanceId = typedArrayAttr.getResourceId(0, -1);
@@ -225,7 +227,7 @@ static String pullFontPathFromTextAppearance(final Context context, AttributeSet
             }
         }
 
-        final TypedArray textAppearanceAttrs = context.obtainStyledAttributes(textAppearanceId, new int[]{attributeId});
+        final TypedArray textAppearanceAttrs = context.obtainStyledAttributes(textAppearanceId, attributeId);
         if (textAppearanceAttrs != null) {
             try {
                 return textAppearanceAttrs.getString(0);
@@ -247,15 +249,15 @@ static String pullFontPathFromTextAppearance(final Context context, AttributeSet
      * @param attributeId if -1 returns null.
      * @return null if no theme or attribute defined.
      */
-    static String pullFontPathFromTheme(Context context, int styleAttrId, int attributeId) {
-        if (styleAttrId == -1 || attributeId == -1)
+    static String pullFontPathFromTheme(Context context, int styleAttrId, int[] attributeId) {
+        if (styleAttrId == -1 || attributeId == null)
             return null;
 
         final Resources.Theme theme = context.getTheme();
         final TypedValue value = new TypedValue();
 
         theme.resolveAttribute(styleAttrId, value, true);
-        final TypedArray typedArray = theme.obtainStyledAttributes(value.resourceId, new int[]{attributeId});
+        final TypedArray typedArray = theme.obtainStyledAttributes(value.resourceId, attributeId);
         try {
             String font = typedArray.getString(0);
             return font;
@@ -276,8 +278,8 @@ static String pullFontPathFromTheme(Context context, int styleAttrId, int attrib
      * @param attributeId    if -1 returns null.
      * @return null if no theme or attribute defined.
      */
-    static String pullFontPathFromTheme(Context context, int styleAttrId, int subStyleAttrId, int attributeId) {
-        if (styleAttrId == -1 || attributeId == -1)
+    static String pullFontPathFromTheme(Context context, int styleAttrId, int subStyleAttrId, int[] attributeId) {
+        if (styleAttrId == -1 || attributeId == null)
             return null;
 
         final Resources.Theme theme = context.getTheme();
@@ -296,7 +298,7 @@ static String pullFontPathFromTheme(Context context, int styleAttrId, int subSty
         }
 
         if (subStyleResId == -1) return null;
-        final TypedArray subTypedArray = context.obtainStyledAttributes(subStyleResId, new int[]{attributeId});
+        final TypedArray subTypedArray = context.obtainStyledAttributes(subStyleResId, attributeId);
         if (subTypedArray != null) {
             try {
                 return subTypedArray.getString(0);
@@ -311,6 +313,7 @@ static String pullFontPathFromTheme(Context context, int styleAttrId, int subSty
     }
 
     private static Boolean sToolbarCheck = null;
+    private static Boolean sAppCompatViewCheck = null;
 
     /**
      * See if the user has added appcompat-v7, this is done at runtime, so we only check once.
@@ -329,6 +332,23 @@ static boolean canCheckForV7Toolbar() {
         return sToolbarCheck;
     }
 
+    /**
+     * See if the user has added appcompat-v7 with AppCompatViews
+     *
+     * @return true if AppcompatTextView is on the classpath
+     */
+    static boolean canAddV7AppCompatViews() {
+        if (sAppCompatViewCheck == null) {
+            try {
+                Class.forName("android.support.v7.widget.AppCompatTextView");
+                sAppCompatViewCheck = Boolean.TRUE;
+            } catch (ClassNotFoundException e) {
+                sAppCompatViewCheck = Boolean.FALSE;
+            }
+        }
+        return sAppCompatViewCheck;
+    }
+
     private CalligraphyUtils() {
     }
 
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/HasTypeface.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/HasTypeface.java
new file mode 100644
index 0000000..48950f9
--- /dev/null
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/HasTypeface.java
@@ -0,0 +1,22 @@
+package uk.co.chrisjenx.calligraphy;
+
+import android.graphics.Typeface;
+
+/**
+ * There are two ways to set typeface for custom views:
+ * <ul>
+ *     <li>Implementing this interface. You should only implements {@link #setTypeface(Typeface)} method.</li>
+ *     <li>Or via reflection. If custom view already has setTypeface method you can
+ *     register it during Calligraphy configuration
+ *     {@link uk.co.chrisjenx.calligraphy.CalligraphyConfig.Builder#addCustomViewWithSetTypeface(Class)}</li>
+ * </ul>
+ * First way is faster but encourage more effort from the developer to implements interface. Second one
+ * requires less effort but works slowly cause reflection calls.
+ *
+ * @author Dmitriy Tarasov
+ */
+public interface HasTypeface {
+
+    void setTypeface(Typeface typeface);
+
+}
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/ReflectionUtils.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/ReflectionUtils.java
index 923a20d..99c0d86 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/ReflectionUtils.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/ReflectionUtils.java
@@ -1,5 +1,7 @@
 package uk.co.chrisjenx.calligraphy;
 
+import android.util.Log;
+
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -10,6 +12,8 @@
  */
 class ReflectionUtils {
 
+    private static final String TAG = ReflectionUtils.class.getSimpleName();
+
     static Field getField(Class clazz, String fieldName) {
         try {
             final Field f = clazz.getDeclaredField(fieldName);
@@ -50,8 +54,8 @@ static void invokeMethod(Object object, Method method, Object... args) {
         try {
             if (method == null) return;
             method.invoke(object, args);
-        } catch (IllegalAccessException | InvocationTargetException ignored) {
-            ignored.printStackTrace();
+        } catch (IllegalAccessException | InvocationTargetException e) {
+            Log.d(TAG, "Can't invoke method using reflection", e);
         }
     }
 }
diff --git a/calligraphy/src/main/res/values/public.xml b/calligraphy/src/main/res/values/public.xml
new file mode 100644
index 0000000..e6e37e3
--- /dev/null
+++ b/calligraphy/src/main/res/values/public.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <public name="fontPath" type="attr"/>
+</resources>
diff --git a/gradle.properties b/gradle.properties
index 68deef6..f47e5cf 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -18,8 +18,8 @@
 # org.gradle.parallel=true
 
 GROUP=uk.co.chrisjenx
-VERSION_NAME=2.0.2
-VERSION_CODE=18
+VERSION_NAME=2.2.0
+VERSION_CODE=23
 
 POM_PACKAGING=aar
 POM_URL=https://github.com/chrisjenx/Calligraphy
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 0087cd3..13372ae 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 589f0c3..c302267 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Thu Nov 27 12:20:57 GMT 2014
+#Thu Jan 21 23:48:10 PST 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
diff --git a/gradlew b/gradlew
index 91a7e26..9d82f78 100755
--- a/gradlew
+++ b/gradlew
@@ -42,11 +42,6 @@ case "`uname`" in
     ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
 # Attempt to set APP_HOME
 # Resolve links: $0 may be a link
 PRG="$0"
@@ -61,9 +56,9 @@ while [ -h "$PRG" ] ; do
     fi
 done
 SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
+cd "`dirname \"$PRG\"`/" >/dev/null
 APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
+cd "$SAVED" >/dev/null
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
@@ -114,6 +109,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
