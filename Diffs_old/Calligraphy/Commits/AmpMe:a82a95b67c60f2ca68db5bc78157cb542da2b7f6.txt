diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java
index 4488638..6c04c3c 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java
@@ -86,6 +86,15 @@ static CalligraphyActivityFactory get(Activity activity) {
         super(base);
         mAttributeId = CalligraphyConfig.get().getAttrId();
         mAttrEnumMappings = CalligraphyConfig.get().getAttrEnumMappings();
+        validateFonts();
+    }
+
+    private void validateFonts() {
+        for (String fontPath : mAttrEnumMappings.getFontPaths()) {
+            if (!TypefaceUtils.fontExists(getBaseContext(), fontPath)) {
+                throw new IllegalArgumentException("The font " + fontPath + " does not exist.");
+            }
+        }
     }
 
     /**
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyEnumAttribute.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyEnumAttribute.java
index bbd4e01..440fe45 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyEnumAttribute.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyEnumAttribute.java
@@ -1,5 +1,6 @@
 package uk.co.chrisjenx.calligraphy;
 
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -17,14 +18,16 @@ public boolean isEmpty() {
         return mEnumIntMap.isEmpty();
     }
 
-    public String get(int enumId) {
+    public String getFontPath(int enumId) {
         return mEnumIntMap.get(enumId);
     }
 
-    public String get(String enumName) {
+    public String getFontPath(String enumName) {
         return mEnumNameMap.get(enumName);
     }
 
-
+    public Collection<String> getFontPaths() {
+        return mEnumNameMap.values();
+    }
 }
 
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
index 1004615..180e049 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
@@ -173,7 +173,7 @@ static String pullFontPathFromView(Context context, AttributeSet attrs, int attr
         final String stringResourceValue = attrs.getAttributeValue(null, attributeName);
 
         if (!attrEnumMappings.isEmpty()) {
-            return attrEnumMappings.get(stringResourceValue);
+            return attrEnumMappings.getFontPath(stringResourceValue);
         }
 
         return stringResourceValue;
@@ -320,7 +320,7 @@ static String pullFontPathFromTheme(Context context, int styleAttrId, int subSty
     }
 
     static String pullFontPathFromTypedArray(TypedArray typedArray, CalligraphyEnumAttribute enumMapping) {
-        return enumMapping.isEmpty() ? typedArray.getString(0) : enumMapping.get(typedArray.getInt(0, -1));
+        return enumMapping.isEmpty() ? typedArray.getString(0) : enumMapping.getFontPath(typedArray.getInt(0, -1));
     }
 
     private static Boolean sToolbarCheck = null;
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
index 8ad3a8c..eacbfe2 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
@@ -1,9 +1,12 @@
 package uk.co.chrisjenx.calligraphy;
 
+import android.content.Context;
 import android.content.res.AssetManager;
 import android.graphics.Typeface;
 import android.util.Log;
 
+import java.io.IOException;
+import java.io.InputStream;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -73,6 +76,21 @@ public static boolean isLoaded(Typeface typeface) {
         return typeface != null && sCachedFonts.containsValue(typeface);
     }
 
+    /**
+     * Is this font path valid ?
+     * @param filePath     The path of the file.
+     * @return True if the font is valid
+     */
+    public static boolean fontExists(Context context, String filePath) {
+        try {
+            InputStream is = context.getResources().getAssets().open(filePath);
+            is.close();
+            return true;
+        } catch (IOException ex) {
+            return false;
+        }
+    }
+
     private TypefaceUtils() {
     }
 }
