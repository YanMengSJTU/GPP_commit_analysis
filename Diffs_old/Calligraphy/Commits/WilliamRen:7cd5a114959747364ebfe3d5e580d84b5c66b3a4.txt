diff --git a/CHANGELOG.md b/CHANGELOG.md
index e8bd952..ecce121 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,9 +1,11 @@
 #Changelog
 
 #0.8.0 (WIP)
+- Added ActionBar Title/SubTitle support.
+- Toast support via default style/or TextView theme style.
 
 #0.7.1 (22/04/2014)
-- Fixed Resources not found Exception - PR#31 [@Smuldr](https://github.com/Smuldr)
+- Fixed Resources not found Exception - [@Smuldr](https://github.com/Smuldr)
 
 #0.7.0 (28/01/2014)
 - Added Anti-aliasing support
diff --git a/CalligraphySample/build.gradle b/CalligraphySample/build.gradle
index e7abe04..b57f1ea 100644
--- a/CalligraphySample/build.gradle
+++ b/CalligraphySample/build.gradle
@@ -32,6 +32,8 @@ android {
 
 dependencies {
     compile project(':calligraphy')
-    compile 'com.android.support:support-v4:19.0.+'
+    compile 'com.android.support:support-v4:19.1.+'
 //    compile "uk.co.chrisjenx.calligraphy:calligraphy:0.5.+"
+
+    compile 'com.jakewharton:butterknife:5.+'
 }
diff --git a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
index 6ce4c43..5575875 100644
--- a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
+++ b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
@@ -2,12 +2,17 @@
 
 import android.content.Context;
 import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.Toast;
 
+import butterknife.ButterKnife;
+import butterknife.OnClick;
 import uk.co.chrisjenx.calligraphy.CalligraphyConfig;
 import uk.co.chrisjenx.calligraphy.CalligraphyContextWrapper;
 
@@ -19,6 +24,14 @@ protected void onCreate(Bundle savedInstanceState) {
         CalligraphyConfig.initDefault("fonts/Roboto-ThinItalic.ttf");
 
         setContentView(R.layout.activity_main);
+
+        new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                setTitle("Calligraphy changed");
+                getActionBar().setSubtitle("Added subtitle");
+            }
+        }, 1000);
     }
 
     @Override
@@ -30,9 +43,21 @@ protected void attachBaseContext(Context newBase) {
      * A placeholder fragment containing a simple view.
      */
     public static class PlaceholderFragment extends Fragment {
+
         @Override
         public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle state) {
             return inflater.inflate(R.layout.fragment_main, container, false);
         }
+
+        @Override
+        public void onViewCreated(View view, Bundle savedInstanceState) {
+            super.onViewCreated(view, savedInstanceState);
+            ButterKnife.inject(this, view);
+        }
+
+        @OnClick({R.id.button_default, R.id.button_bold})
+        public void onClickButton() {
+            Toast.makeText(getActivity(), "Custom Typeface toast text", Toast.LENGTH_SHORT).show();
+        }
     }
 }
diff --git a/CalligraphySample/src/main/res/layout/fragment_main.xml b/CalligraphySample/src/main/res/layout/fragment_main.xml
index fad912b..db4c444 100644
--- a/CalligraphySample/src/main/res/layout/fragment_main.xml
+++ b/CalligraphySample/src/main/res/layout/fragment_main.xml
@@ -1,56 +1,58 @@
 <LinearLayout
-        xmlns:android="http://schemas.android.com/apk/res/android"
-        xmlns:tools="http://schemas.android.com/tools"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:paddingLeft="@dimen/activity_horizontal_margin"
-        android:paddingRight="@dimen/activity_horizontal_margin"
-        android:paddingTop="@dimen/activity_vertical_margin"
-        android:paddingBottom="@dimen/activity_vertical_margin"
-        android:orientation="vertical"
-        tools:ignore="MissingPrefix"
-        tools:context="uk.co.chrisjenx.calligraphy.sample.MainActivity$PlaceholderFragment">
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    tools:context="uk.co.chrisjenx.calligraphy.sample.MainActivity$PlaceholderFragment"
+    tools:ignore="MissingPrefix">
 
     <TextView
-            android:text="@string/default_theme"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"/>
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/default_theme"/>
 
     <TextView
-            android:text="@string/defined_fontfamily"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            fontPath="fonts/Roboto-Bold.ttf"/>
+        fontPath="fonts/Roboto-Bold.ttf"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/defined_fontfamily"/>
 
     <TextView
-            android:text="@string/defined_incorrect"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            fontPath="fonts/Roboto-None.ttf"/>
+        fontPath="fonts/Roboto-None.ttf"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/defined_incorrect"/>
 
     <TextView
-            android:text="@string/defined_in_style"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            style="@style/TextFontFamily"/>
+        style="@style/TextFontFamily"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/defined_in_style"/>
 
     <uk.co.chrisjenx.calligraphy.sample.CustomTextView
-            android:text="@string/defined_custom_view"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"/>
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/defined_custom_view"/>
 
     <Button
-            android:text="@string/button_default"
-            android:layout_gravity="center_horizontal"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"/>
+        android:id="@+id/button_default"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal"
+        android:text="@string/button_default"/>
 
     <Button
-            android:text="@string/button_defined"
-            android:layout_marginTop="12dp"
-            android:layout_gravity="center_horizontal"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            fontPath="fonts/Roboto-Bold.ttf"/>
+        android:id="@+id/button_bold"
+        fontPath="fonts/Roboto-Bold.ttf"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal"
+        android:layout_marginTop="12dp"
+        android:text="@string/button_defined"/>
 
 </LinearLayout>
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyTypefaceSpan.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyTypefaceSpan.java
new file mode 100644
index 0000000..45f800b
--- /dev/null
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyTypefaceSpan.java
@@ -0,0 +1,40 @@
+package uk.co.chrisjenx.calligraphy;
+
+import android.graphics.Paint;
+import android.graphics.Typeface;
+import android.text.TextPaint;
+import android.text.style.MetricAffectingSpan;
+
+public class CalligraphyTypefaceSpan extends MetricAffectingSpan {
+    private final Typeface typeface;
+
+    public CalligraphyTypefaceSpan(final Typeface typeface) {
+        this.typeface = typeface;
+    }
+
+    @Override
+    public void updateDrawState(final TextPaint drawState) {
+        apply(drawState);
+    }
+
+    @Override
+    public void updateMeasureState(final TextPaint paint) {
+        apply(paint);
+    }
+
+    private void apply(final Paint paint) {
+        final Typeface oldTypeface = paint.getTypeface();
+        final int oldStyle = oldTypeface != null ? oldTypeface.getStyle() : 0;
+        final int fakeStyle = oldStyle & ~typeface.getStyle();
+
+        if ((fakeStyle & Typeface.BOLD) != 0) {
+            paint.setFakeBoldText(true);
+        }
+
+        if ((fakeStyle & Typeface.ITALIC) != 0) {
+            paint.setTextSkewX(-0.25f);
+        }
+
+        paint.setTypeface(typeface);
+    }
+}
\ No newline at end of file
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
index b61a652..729faec 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
@@ -6,7 +6,12 @@
 import android.content.res.TypedArray;
 import android.graphics.Paint;
 import android.graphics.Typeface;
+import android.text.Editable;
+import android.text.Spannable;
+import android.text.SpannableString;
+import android.text.Spanned;
 import android.text.TextUtils;
+import android.text.TextWatcher;
 import android.util.AttributeSet;
 import android.util.TypedValue;
 import android.widget.TextView;
@@ -17,10 +22,49 @@
  */
 public final class CalligraphyUtils {
 
-    public static final boolean applyFontToTextView(final TextView textView, final Typeface typeface) {
+    /**
+     * Applies a custom typeface span to the text.
+     *
+     * @param s        text to apply it too.
+     * @param typeface typeface to apply.
+     * @return Either the passed in Object or new Spannable with the typeface span applied.
+     */
+    public static CharSequence applyTypefaceSpan(CharSequence s, Typeface typeface) {
+        if (s != null && s.length() > 0) {
+            if (!(s instanceof Spannable)) {
+                s = new SpannableString(s);
+            }
+            ((Spannable) s).setSpan(new CalligraphyTypefaceSpan(typeface), 0, s.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+        }
+        return s;
+    }
+
+    /**
+     * Applies a Typeface to a TextView, its recommend you don't call this multiple times, as this
+     * adds a TextWatcher.
+     *
+     * @param textView Not null, TextView or child of.
+     * @param typeface Not null, Typeface to apply to the TextView.
+     * @return true if applied otherwise false.
+     */
+    public static boolean applyFontToTextView(final TextView textView, final Typeface typeface) {
         if (textView == null || typeface == null) return false;
-        textView.setTypeface(typeface);
         textView.setPaintFlags(textView.getPaintFlags() | Paint.SUBPIXEL_TEXT_FLAG);
+        textView.setText(applyTypefaceSpan(textView.getText(), typeface), TextView.BufferType.SPANNABLE);
+        textView.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+            }
+
+            @Override
+            public void onTextChanged(CharSequence s, int start, int before, int count) {
+            }
+
+            @Override
+            public void afterTextChanged(Editable s) {
+                applyTypefaceSpan(s, typeface);
+            }
+        });
         return true;
     }
 
@@ -83,4 +127,5 @@ static final String pullFontPathFromTheme(Context context, int styleId, int attr
 
     private CalligraphyUtils() {
     }
+
 }
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
index 7749d1f..21319bc 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
@@ -18,6 +18,7 @@
 public final class TypefaceUtils {
 
     private static final HashMap<String, Typeface> sCachedFonts = new HashMap<String, Typeface>();
+    private static final HashMap<Typeface, CalligraphyTypefaceSpan> sCachedSpans = new HashMap<Typeface, CalligraphyTypefaceSpan>();
 
     /**
      * A helper loading a custom font.
@@ -43,6 +44,24 @@ public static Typeface load(final AssetManager assetManager, final String filePa
         }
     }
 
+    /**
+     * A helper loading custom spans so we don't have to keep creating hundreds of spans.
+     *
+     * @param typeface not null typeface
+     * @return will return null of typeface passed in is null.
+     */
+    public static CalligraphyTypefaceSpan getSpan(final Typeface typeface) {
+        if (typeface == null) return null;
+        synchronized (sCachedSpans) {
+            if (!sCachedSpans.containsKey(typeface)) {
+                final CalligraphyTypefaceSpan span = new CalligraphyTypefaceSpan(typeface);
+                sCachedSpans.put(typeface, span);
+                return span;
+            }
+            return sCachedSpans.get(typeface);
+        }
+    }
+
     private TypefaceUtils() {
     }
 }
