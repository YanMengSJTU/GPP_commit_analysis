diff --git a/CalligraphySample/src/main/AndroidManifest.xml b/CalligraphySample/src/main/AndroidManifest.xml
index c6fce1a..f760d62 100644
--- a/CalligraphySample/src/main/AndroidManifest.xml
+++ b/CalligraphySample/src/main/AndroidManifest.xml
@@ -1,19 +1,21 @@
 <?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="uk.co.chrisjenx.calligraphy.sample" >
+<manifest
+    package="uk.co.chrisjenx.calligraphy.sample"
+    xmlns:android="http://schemas.android.com/apk/res/android">
 
     <application
+        android:name=".CalligraphyApplication"
         android:allowBackup="true"
         android:icon="@drawable/ic_launcher"
         android:label="@string/app_name"
-        android:theme="@style/AppTheme" >
+        android:theme="@style/AppTheme">
         <activity
             android:name="uk.co.chrisjenx.calligraphy.sample.MainActivity"
-            android:label="@string/app_name" >
+            android:label="@string/app_name">
             <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
+                <action android:name="android.intent.action.MAIN"/>
 
-                <category android:name="android.intent.category.LAUNCHER" />
+                <category android:name="android.intent.category.LAUNCHER"/>
             </intent-filter>
         </activity>
     </application>
diff --git a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CalligraphyApplication.java b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CalligraphyApplication.java
new file mode 100644
index 0000000..c471dfb
--- /dev/null
+++ b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CalligraphyApplication.java
@@ -0,0 +1,18 @@
+package uk.co.chrisjenx.calligraphy.sample;
+
+import android.app.Application;
+
+import uk.co.chrisjenx.calligraphy.CalligraphyConfig;
+
+/**
+ * Created by chris on 06/05/2014.
+ * For Calligraphy.
+ */
+public class CalligraphyApplication extends Application {
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        CalligraphyConfig.initDefault("fonts/Roboto-ThinItalic.ttf", R.attr.fontPath);
+    }
+}
diff --git a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
index 5575875..a234e88 100644
--- a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
+++ b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
@@ -21,7 +21,6 @@
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        CalligraphyConfig.initDefault("fonts/Roboto-ThinItalic.ttf");
 
         setContentView(R.layout.activity_main);
 
@@ -36,7 +35,7 @@ public void run() {
 
     @Override
     protected void attachBaseContext(Context newBase) {
-        super.attachBaseContext(new CalligraphyContextWrapper(newBase, R.attr.fontPath));
+        super.attachBaseContext(new CalligraphyContextWrapper(newBase));
     }
 
     /**
diff --git a/CalligraphySample/src/main/res/values/attrs.xml b/CalligraphySample/src/main/res/values/attrs.xml
index 1df8034..02c6672 100644
--- a/CalligraphySample/src/main/res/values/attrs.xml
+++ b/CalligraphySample/src/main/res/values/attrs.xml
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
-    <attr name="fontPath"/>
+    <attr name="fontPath" format="string"/>
 </resources>
\ No newline at end of file
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java
index 2d4c643..2c1b6ac 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java
@@ -21,22 +21,69 @@ public static void initDefault(String defaultFontAssetPath) {
         mInstance = new CalligraphyConfig(defaultFontAssetPath);
     }
 
+    /**
+     * Init only the custom attribute to lookup.
+     *
+     * @param defaultAttributeId the custom attribute to look for instead of fontFamily attribute.
+     * @see #initDefault(String, int)
+     */
+    public static void initDefault(int defaultAttributeId) {
+        mInstance = new CalligraphyConfig(defaultAttributeId);
+    }
+
+    /**
+     * Define the default font and the custom attribute to lookup globally.
+     *
+     * @param defaultFontAssetPath path to a font file in the assets folder, e.g. "fonts/roboto-light.ttf",
+     * @param defaultAttributeId   the custom attribute to look for instead of fontFamily attribute.
+     * @see #initDefault(String)
+     * @see #initDefault(int)
+     */
+    public static void initDefault(String defaultFontAssetPath, int defaultAttributeId) {
+        mInstance = new CalligraphyConfig(defaultFontAssetPath, defaultAttributeId);
+    }
+
+    /**
+     * If you are not going to set defaults, you don't really need to call this.
+     *
+     * I generally recommend calling {@link #initDefault(int)} though as that means you can use
+     * font-family to define stock fonts.
+     *
+     * @see #initDefault(String)
+     */
+    public static void initDefault() {
+        mInstance = new CalligraphyConfig();
+    }
+
     static CalligraphyConfig get() {
         if (mInstance == null)
-            throw new IllegalStateException("You must initDefault for CalligraphyConfig, if you are going to use the CalligraphyContextWrapper");
+            mInstance = new CalligraphyConfig();
         return mInstance;
     }
 
 
     private final String mFontPath;
     private final boolean mIsFontSet;
+    private final int mAttrId;
+
+    private CalligraphyConfig() {
+        this(null, 0);
+    }
+
+    private CalligraphyConfig(int attrId) {
+        this(null, attrId);
+    }
 
     private CalligraphyConfig(String defaultFontAssetPath) {
+        this(defaultFontAssetPath, 0);
+    }
+
+    private CalligraphyConfig(String defaultFontAssetPath, int attrId) {
         this.mFontPath = defaultFontAssetPath;
         mIsFontSet = !TextUtils.isEmpty(defaultFontAssetPath);
+        mAttrId = attrId;
     }
 
-
     /**
      * @return mFontPath for text views might be null
      */
@@ -50,4 +97,13 @@ String getFontPath() {
     boolean isFontSet() {
         return mIsFontSet;
     }
+
+    /**
+     * @return the custom attrId to look for, default to fontFamily if not set.
+     */
+    public int getAttrId() {
+        if (mAttrId == 0)
+            return android.R.attr.fontFamily;
+        return mAttrId;
+    }
 }
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java
index 2c76cfa..f9f5bec 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java
@@ -14,11 +14,31 @@
 
     private final int mAttributeId;
 
+    /**
+     * Uses the default configuration from {@link uk.co.chrisjenx.calligraphy.CalligraphyConfig}
+     *
+     * Remember if you are defining default in the
+     * {@link uk.co.chrisjenx.calligraphy.CalligraphyConfig} make sure this is initialised before
+     * the activity is created.
+     *
+     * @param base ContextBase to Wrap
+     */
     public CalligraphyContextWrapper(Context base) {
         super(base);
-        mAttributeId = android.R.attr.fontFamily;
+        mAttributeId = CalligraphyConfig.get().getAttrId();
     }
 
+    /**
+     * Override the default AttributeId, this will always take the custom attribute defined here
+     * and ignore the one set in {@link uk.co.chrisjenx.calligraphy.CalligraphyConfig}.
+     *
+     * Remember if you are defining default in the
+     * {@link uk.co.chrisjenx.calligraphy.CalligraphyConfig} make sure this is initialised before
+     * the activity is created.
+     *
+     * @param base        ContextBase to Wrap
+     * @param attributeId Attribute to lookup.
+     */
     public CalligraphyContextWrapper(Context base, int attributeId) {
         super(base);
         mAttributeId = attributeId;
