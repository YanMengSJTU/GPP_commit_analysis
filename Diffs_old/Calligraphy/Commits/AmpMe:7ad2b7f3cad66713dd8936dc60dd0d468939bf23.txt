diff --git a/CalligraphySample/build.gradle b/CalligraphySample/build.gradle
index 27e8c65..e504607 100644
--- a/CalligraphySample/build.gradle
+++ b/CalligraphySample/build.gradle
@@ -3,14 +3,14 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.1.3'
+        classpath 'com.android.tools.build:gradle:2.3.1'
     }
 }
 apply plugin: 'com.android.application'
 
 android {
     compileSdkVersion 22
-    buildToolsVersion "22.0.1"
+    buildToolsVersion "25.0.0"
 
     defaultConfig {
         minSdkVersion 7
diff --git a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CalligraphyApplication.java b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CalligraphyApplication.java
index 7af7454..d3ef862 100644
--- a/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CalligraphyApplication.java
+++ b/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CalligraphyApplication.java
@@ -10,14 +10,31 @@
  */
 public class CalligraphyApplication extends Application {
 
+    private static boolean USE_ENUM = true;
+
     @Override
     public void onCreate() {
         super.onCreate();
-        CalligraphyConfig.initDefault(new CalligraphyConfig.Builder()
-                        .setDefaultFontPath("fonts/Roboto-ThinItalic.ttf")
-                        .setFontAttrId(R.attr.fontPath)
-                        .addCustomStyle(TextField.class, R.attr.textFieldStyle)
-                        .build()
-        );
+
+        if (USE_ENUM) {
+            CalligraphyConfig.initDefault(new CalligraphyConfig.Builder()
+                            .setDefaultFontPath("fonts/Roboto-ThinItalic.ttf")
+                            .fontMapping("RobotoThinItalic", 0, "fonts/Roboto-ThinItalic.ttf")
+                            .fontMapping("RobotoBold", 1, "fonts/Roboto-Bold.ttf")
+                            .fontMapping("RobotoCondensedRegular", 2, "fonts/RobotoCondensed-Regular.ttf")
+                            .fontMapping("OswaldStencbab", 3, "fonts/Oswald-Stencbab.ttf")
+                            .fontMapping("gwt", 4, "fonts/gtw.ttf")
+                            .setFontAttrId(R.attr.font)
+                            .addCustomStyle(TextField.class, R.attr.textFieldStyle)
+                            .build()
+            );
+        } else {
+            CalligraphyConfig.initDefault(new CalligraphyConfig.Builder()
+                    .setDefaultFontPath("fonts/Roboto-ThinItalic.ttf")
+                    .setFontAttrId(R.attr.fontPath)
+                    .addCustomStyle(TextField.class, R.attr.textFieldStyle)
+                    .build());
+        }
+
     }
 }
diff --git a/CalligraphySample/src/main/res/layout/fragment_main.xml b/CalligraphySample/src/main/res/layout/fragment_main.xml
index 4c7bc46..9408dcd 100644
--- a/CalligraphySample/src/main/res/layout/fragment_main.xml
+++ b/CalligraphySample/src/main/res/layout/fragment_main.xml
@@ -22,6 +22,7 @@
             android:text="@string/default_theme"/>
 
         <TextView
+            font="RobotoBold"
             fontPath="fonts/Roboto-Bold.ttf"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
@@ -67,6 +68,7 @@
             android:textAppearance="@style/TextAppearance.FontPathView"/>
 
         <uk.co.chrisjenx.calligraphy.sample.CustomTextView
+            font="OswaldStencbab"
             fontPath="fonts/Oswald-Stencbab.ttf"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
@@ -85,6 +87,7 @@
             android:layout="@layout/stub_with_font_path"/>
 
         <CheckBox
+            font="OswaldStencbab"
             fontPath="fonts/Oswald-Stencbab.ttf"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
@@ -94,6 +97,7 @@
 
         <EditText
             android:id="@+id/edit_text"
+            font="RobotoBold"
             fontPath="fonts/Roboto-Bold.ttf"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
@@ -116,6 +120,7 @@
 
         <Button
             android:id="@+id/button_bold"
+            font="RobotoBold"
             fontPath="fonts/Roboto-Bold.ttf"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
diff --git a/CalligraphySample/src/main/res/layout/stub_with_font_path.xml b/CalligraphySample/src/main/res/layout/stub_with_font_path.xml
index f1db77e..d0aa1d2 100644
--- a/CalligraphySample/src/main/res/layout/stub_with_font_path.xml
+++ b/CalligraphySample/src/main/res/layout/stub_with_font_path.xml
@@ -1,4 +1,5 @@
 <TextView
+    font="OswaldStencbab"
     fontPath="fonts/Oswald-Stencbab.ttf"
     xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools"
diff --git a/CalligraphySample/src/main/res/values/fonts.xml b/CalligraphySample/src/main/res/values/fonts.xml
new file mode 100644
index 0000000..8513480
--- /dev/null
+++ b/CalligraphySample/src/main/res/values/fonts.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <attr name="font" format="enum">
+        <enum name="RobotoThinItalic" value="0" />
+        <enum name="RobotoBold" value="1" />
+        <enum name="RobotoCondensedRegular" value="2" />
+        <enum name="OswaldStencbab" value="3" />
+        <enum name="gtw" value="4" />
+    </attr>
+</resources>
\ No newline at end of file
diff --git a/CalligraphySample/src/main/res/values/styles.xml b/CalligraphySample/src/main/res/values/styles.xml
index 2d65608..2c68c6e 100644
--- a/CalligraphySample/src/main/res/values/styles.xml
+++ b/CalligraphySample/src/main/res/values/styles.xml
@@ -20,6 +20,7 @@
 
     <style name="AppTheme.ActionBar.TextAppearance" parent="android:TextAppearance.Holo.Widget.ActionBar.Title.Inverse">
         <item name="fontPath">fonts/Oswald-Stencbab.ttf</item>
+        <item name="font">OswaldStencbab</item>
     </style>
 
 
@@ -28,6 +29,7 @@
     <style name="TextViewNoStyleParent">
         <item name="android:textColor">@android:color/holo_blue_dark</item>
         <item name="fontPath">fonts/gtw.ttf</item>
+        <item name="font">gtw</item>
     </style>
 
     <style name="AppTheme.Widget.TextView" parent="android:Widget.Holo.Light.TextView">
@@ -37,6 +39,8 @@
 
     <style name="AppTheme.Widget.TextView.Style">
         <item name="fontPath">fonts/RobotoCondensed-Regular.ttf</item>
+        <item name="font">RobotoCondensedRegular</item>
+
     </style>
 
     <style name="AppTheme.Widget.TextViewAppearanceStyle" parent="android:Widget.Holo.Light.TextView">
@@ -46,18 +50,21 @@
     <style name="TextAppearance.FontPath" parent="android:TextAppearance">
         <!-- Custom Attr-->
         <item name="fontPath">fonts/RobotoCondensed-Regular.ttf</item>
+        <item name="font">RobotoCondensedRegular</item>
         <item name="android:textColor">#444</item>
     </style>
 
     <style name="TextAppearance.FontPathView" parent="android:TextAppearance">
         <!-- Custom Attr-->
         <item name="fontPath">fonts/Oswald-Stencbab.ttf</item>
+        <item name="font">OswaldStencbab</item>
         <item name="android:textColor">#444</item>
     </style>
 
     <!-- Custom Class Styles -->
     <style name="TextField" parent="android:Widget.Holo.Light.TextView">
         <item name="fontPath">fonts/gtw.ttf</item>
+        <item name="font">gtw</item>
         <item name="android:textSize">@dimen/abc_text_size_small_material</item>
     </style>
 
diff --git a/build.gradle b/build.gradle
index 92de3c3..90e5cb6 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,11 +4,10 @@ allprojects {
         mavenCentral()
     }
     // Is Release Build?
-    ext.isReleaseVersion = has("release")
     ext.versionCodeInt = getProperty('VERSION_CODE').toInteger()
     version = VERSION_NAME
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.2'
+    gradleVersion = '2.2.3'
 }
diff --git a/calligraphy/build.gradle b/calligraphy/build.gradle
index 70db6bb..59126ee 100644
--- a/calligraphy/build.gradle
+++ b/calligraphy/build.gradle
@@ -1,11 +1,18 @@
 buildscript {
     repositories {
-        mavenCentral()
+        jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.1.3'
+        classpath 'com.android.tools.build:gradle:2.3.2'
+        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
+        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
     }
 }
+
+apply plugin: 'com.github.dcendents.android-maven'
+apply plugin: 'com.jfrog.bintray'
+apply plugin: 'maven-publish'
+apply plugin: 'maven'
 apply plugin: 'com.android.library'
 
 repositories {
@@ -13,12 +20,12 @@ repositories {
 }
 
 android {
-    compileSdkVersion 22
-    buildToolsVersion "22.0.1"
+    compileSdkVersion 25
+    buildToolsVersion '25.0.0'
 
     defaultConfig {
-        minSdkVersion 7
-        targetSdkVersion 22
+        minSdkVersion 9
+        targetSdkVersion 25
         versionCode project.ext.versionCodeInt
         versionName version
     }
@@ -28,10 +35,60 @@ android {
             minifyEnabled false
         }
     }
+
+    task sourcesJar(type: Jar) {
+        from android.sourceSets.main.java.srcDirs
+        classifier = 'sources'
+    }
+
+    task javadoc(type: Javadoc) {
+        failOnError false
+        source = android.sourceSets.main.java.srcDirs
+        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+    }
+
+    task javadocJar(type: Jar, dependsOn: javadoc) {
+        classifier = 'javadoc'
+        from javadoc.destinationDir
+    }
+
+    artifacts {
+        archives javadocJar
+        archives sourcesJar
+    }
 }
 
 dependencies {
-    compile 'com.android.support:appcompat-v7:22.1.1'
+    compile 'com.android.support:appcompat-v7:25.3.1'
 }
 
-apply from: '../gradle/deploy.gradle'
+bintray {
+    user = System.properties['bintray.user']
+    key = System.properties['bintray.key']
+    pkg {
+        name = project.name
+        repo = 'maven'
+        userOrg = 'ampme'
+    }
+    publish = true
+    configurations = ['archives']
+}
+
+afterEvaluate {
+    project.bintray {
+        publish = true
+        pkg {
+            userOrg = 'ampme'
+        }
+    }
+}
+
+install {
+    repositories.mavenInstaller {
+        pom {
+            project {
+                packaging 'aar'
+            }
+        }
+    }
+}
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java
index c22148a..505ca61 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java
@@ -74,6 +74,10 @@ public static CalligraphyConfig get() {
      * Default Font Path Attr Id to lookup
      */
     private final int mAttrId;
+    /**
+     * Enum mappings
+     */
+    private final CalligraphyEnumAttribute mAttrEnumMappings;
     /**
      * Use Reflection to inject the private factory.
      */
@@ -91,6 +95,7 @@ protected CalligraphyConfig(Builder builder) {
         mIsFontSet = builder.isFontSet;
         mFontPath = builder.fontAssetPath;
         mAttrId = builder.attrId;
+        mAttrEnumMappings = builder.attrEnumMappings;
         mReflection = builder.reflection;
         mCustomViewCreation = builder.customViewCreation;
         final Map<Class<? extends TextView>, Integer> tempMap = new HashMap<>(DEFAULT_STYLES);
@@ -131,6 +136,13 @@ public int getAttrId() {
         return mAttrId;
     }
 
+    /**
+     * @return the enum mappings for the custom enum attribute
+     */
+    public CalligraphyEnumAttribute getAttrEnumMappings() {
+        return mAttrEnumMappings;
+    }
+
     public static class Builder {
         /**
          * Default AttrID if not set.
@@ -148,6 +160,10 @@ public int getAttrId() {
          * The fontAttrId to look up the font path from.
          */
         private int attrId = R.attr.fontPath;
+        /**
+         * Custom attr enum mapping
+         */
+        private final CalligraphyEnumAttribute attrEnumMappings = new CalligraphyEnumAttribute();
         /**
          * Has the user set the default font path.
          */
@@ -163,6 +179,7 @@ public int getAttrId() {
 
         /**
          * This defaults to R.attr.fontPath. So only override if you want to use your own attrId.
+         * If attribute type is enum, you must also provide your fontMappings with {@link #fontMapping(String, int, String)}
          *
          * @param fontAssetAttrId the custom attribute to look for fonts in assets.
          * @return this builder.
@@ -172,6 +189,19 @@ public Builder setFontAttrId(int fontAssetAttrId) {
             return this;
         }
 
+        /**
+         * This must be set if the font attribute is an enum. It maps between font path and enum value.
+         *
+         * @param enumName the custom enum name
+         * @param enumId the custom enum value i
+         * @param fontPath the custom enum font path
+         * @return this builder.
+         */
+        public Builder fontMapping(String enumName, int enumId, String fontPath) {
+            this.attrEnumMappings.add(enumName, enumId, fontPath);
+            return this;
+        }
+
         /**
          * Set the default font if you don't define one else where in your styles.
          *
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java
index 8650208..6c04c3c 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java
@@ -16,6 +16,7 @@
     private CalligraphyLayoutInflater mInflater;
 
     private final int mAttributeId;
+    private final CalligraphyEnumAttribute mAttrEnumMappings;
 
     /**
      * Uses the default configuration from {@link uk.co.chrisjenx.calligraphy.CalligraphyConfig}
@@ -84,6 +85,16 @@ static CalligraphyActivityFactory get(Activity activity) {
     CalligraphyContextWrapper(Context base) {
         super(base);
         mAttributeId = CalligraphyConfig.get().getAttrId();
+        mAttrEnumMappings = CalligraphyConfig.get().getAttrEnumMappings();
+        validateFonts();
+    }
+
+    private void validateFonts() {
+        for (String fontPath : mAttrEnumMappings.getFontPaths()) {
+            if (!TypefaceUtils.fontExists(getBaseContext(), fontPath)) {
+                throw new IllegalArgumentException("The font " + fontPath + " does not exist.");
+            }
+        }
     }
 
     /**
@@ -102,13 +113,14 @@ static CalligraphyActivityFactory get(Activity activity) {
     public CalligraphyContextWrapper(Context base, int attributeId) {
         super(base);
         mAttributeId = attributeId;
+        mAttrEnumMappings = new CalligraphyEnumAttribute();
     }
 
     @Override
     public Object getSystemService(String name) {
         if (LAYOUT_INFLATER_SERVICE.equals(name)) {
             if (mInflater == null) {
-                mInflater = new CalligraphyLayoutInflater(LayoutInflater.from(getBaseContext()), this, mAttributeId, false);
+                mInflater = new CalligraphyLayoutInflater(LayoutInflater.from(getBaseContext()), this, mAttributeId, mAttrEnumMappings, false);
             }
             return mInflater;
         }
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyEnumAttribute.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyEnumAttribute.java
new file mode 100644
index 0000000..440fe45
--- /dev/null
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyEnumAttribute.java
@@ -0,0 +1,33 @@
+package uk.co.chrisjenx.calligraphy;
+
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+final class CalligraphyEnumAttribute {
+
+    private final Map<Integer, String> mEnumIntMap = new HashMap<>();
+    private final Map<String, String> mEnumNameMap = new HashMap<>();
+
+    public void add(String enumName, int enumId, String fontPath) {
+        mEnumIntMap.put(enumId, fontPath);
+        mEnumNameMap.put(enumName, fontPath);
+    }
+
+    public boolean isEmpty() {
+        return mEnumIntMap.isEmpty();
+    }
+
+    public String getFontPath(int enumId) {
+        return mEnumIntMap.get(enumId);
+    }
+
+    public String getFontPath(String enumName) {
+        return mEnumNameMap.get(enumName);
+    }
+
+    public Collection<String> getFontPaths() {
+        return mEnumNameMap.values();
+    }
+}
+
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
index ca45b62..11ea595 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
@@ -11,10 +11,13 @@
 import android.view.ViewTreeObserver;
 import android.widget.TextView;
 
+import java.util.Map;
+
 class CalligraphyFactory {
 
     private static final String ACTION_BAR_TITLE = "action_bar_title";
     private static final String ACTION_BAR_SUBTITLE = "action_bar_subtitle";
+    private final CalligraphyEnumAttribute mAttrEnumMappings;
 
     /**
      * Some styles are in sub styles, such as actionBarTextStyle etc..
@@ -92,8 +95,9 @@ protected static boolean matchesResourceIdName(View view, String matches) {
 
     private final int mAttributeId;
 
-    public CalligraphyFactory(int attributeId) {
+    public CalligraphyFactory(int attributeId, CalligraphyEnumAttribute attrEnumMappings) {
         this.mAttributeId = attributeId;
+        this.mAttrEnumMappings = attrEnumMappings;
     }
 
     /**
@@ -125,25 +129,25 @@ void onViewCreatedInternal(View view, final Context context, AttributeSet attrs)
             // Since we're not using namespace it's a little bit tricky
 
             // Try view xml attributes
-            String textViewFont = CalligraphyUtils.pullFontPathFromView(context, attrs, mAttributeId);
+            String textViewFont = CalligraphyUtils.pullFontPathFromView(context, attrs, mAttributeId, mAttrEnumMappings);
 
             // Try view style attributes
             if (TextUtils.isEmpty(textViewFont)) {
-                textViewFont = CalligraphyUtils.pullFontPathFromStyle(context, attrs, mAttributeId);
+                textViewFont = CalligraphyUtils.pullFontPathFromStyle(context, attrs, mAttributeId, mAttrEnumMappings);
             }
 
             // Try View TextAppearance
             if (TextUtils.isEmpty(textViewFont)) {
-                textViewFont = CalligraphyUtils.pullFontPathFromTextAppearance(context, attrs, mAttributeId);
+                textViewFont = CalligraphyUtils.pullFontPathFromTextAppearance(context, attrs, mAttributeId, mAttrEnumMappings);
             }
 
             // Try theme attributes
             if (TextUtils.isEmpty(textViewFont)) {
                 final int[] styleForTextView = getStyleForTextView((TextView) view);
                 if (styleForTextView[1] != -1)
-                    textViewFont = CalligraphyUtils.pullFontPathFromTheme(context, styleForTextView[0], styleForTextView[1], mAttributeId);
+                    textViewFont = CalligraphyUtils.pullFontPathFromTheme(context, styleForTextView[0], styleForTextView[1], mAttributeId, mAttrEnumMappings);
                 else
-                    textViewFont = CalligraphyUtils.pullFontPathFromTheme(context, styleForTextView[0], mAttributeId);
+                    textViewFont = CalligraphyUtils.pullFontPathFromTheme(context, styleForTextView[0], mAttributeId, mAttrEnumMappings);
             }
 
             // Still need to defer the Native action bar, appcompat-v7:21+ uses the Toolbar underneath. But won't match these anyway.
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
index 6f9cfc1..75cf41f 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
@@ -25,28 +25,31 @@
     };
 
     private final int mAttributeId;
+    private final CalligraphyEnumAttribute mAttrEnumMappings;
     private final CalligraphyFactory mCalligraphyFactory;
     // Reflection Hax
     private boolean mSetPrivateFactory = false;
     private Field mConstructorArgs = null;
 
-    protected CalligraphyLayoutInflater(Context context, int attributeId) {
+    protected CalligraphyLayoutInflater(Context context, int attributeId, CalligraphyEnumAttribute attrEnumMappings) {
         super(context);
         mAttributeId = attributeId;
-        mCalligraphyFactory = new CalligraphyFactory(attributeId);
+        mAttrEnumMappings = attrEnumMappings;
+        mCalligraphyFactory = new CalligraphyFactory(attributeId, attrEnumMappings);
         setUpLayoutFactories(false);
     }
 
-    protected CalligraphyLayoutInflater(LayoutInflater original, Context newContext, int attributeId, final boolean cloned) {
+    protected CalligraphyLayoutInflater(LayoutInflater original, Context newContext, int attributeId, CalligraphyEnumAttribute attrEnumMappings, final boolean cloned) {
         super(original, newContext);
         mAttributeId = attributeId;
-        mCalligraphyFactory = new CalligraphyFactory(attributeId);
+        mAttrEnumMappings = attrEnumMappings;
+        mCalligraphyFactory = new CalligraphyFactory(attributeId, attrEnumMappings);
         setUpLayoutFactories(cloned);
     }
 
     @Override
     public LayoutInflater cloneInContext(Context newContext) {
-        return new CalligraphyLayoutInflater(this, newContext, mAttributeId, true);
+        return new CalligraphyLayoutInflater(this, newContext, mAttributeId, mAttrEnumMappings, true);
     }
 
     // ===
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
index 11737bf..6973366 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
@@ -57,7 +57,6 @@ public static boolean applyFontToTextView(final TextView textView, final Typefac
     /**
      * Applies a Typeface to a TextView, if deferred,its recommend you don't call this multiple
      * times, as this adds a TextWatcher.
-     *
      * Deferring should really only be used on tricky views which get Typeface set by the system at
      * weird times.
      *
@@ -152,7 +151,7 @@ static void applyFontToTextView(final Context context, final TextView textView,
      * @param attributeId if -1 returns null.
      * @return null if attribute is not defined or added to View
      */
-    static String pullFontPathFromView(Context context, AttributeSet attrs, int attributeId) {
+    static String pullFontPathFromView(Context context, AttributeSet attrs, int attributeId, CalligraphyEnumAttribute attrEnumMappings) {
         if (attributeId == -1 || attrs == null)
             return null;
 
@@ -165,9 +164,18 @@ static String pullFontPathFromView(Context context, AttributeSet attrs, int attr
         }
 
         final int stringResourceId = attrs.getAttributeResourceValue(null, attributeName, -1);
-        return stringResourceId > 0
-                ? context.getString(stringResourceId)
-                : attrs.getAttributeValue(null, attributeName);
+
+        if (stringResourceId > 0) {
+            return context.getString(stringResourceId);
+        }
+
+        final String stringResourceValue = attrs.getAttributeValue(null, attributeName);
+
+        if (!attrEnumMappings.isEmpty()) {
+            return attrEnumMappings.getFontPath(stringResourceValue);
+        }
+
+        return stringResourceValue;
     }
 
     /**
@@ -179,14 +187,14 @@ static String pullFontPathFromView(Context context, AttributeSet attrs, int attr
      * @param attributeId if -1 returns null.
      * @return null if attribute is not defined or found in the Style
      */
-    static String pullFontPathFromStyle(Context context, AttributeSet attrs, int attributeId) {
+    static String pullFontPathFromStyle(Context context, AttributeSet attrs, int attributeId, CalligraphyEnumAttribute attrEnumMappings) {
         if (attributeId == -1 || attrs == null)
             return null;
         final TypedArray typedArray = context.obtainStyledAttributes(attrs, new int[]{attributeId});
         if (typedArray != null) {
             try {
                 // First defined attribute
-                String fontFromAttribute = typedArray.getString(0);
+                String fontFromAttribute = pullFontPathFromTypedArray(typedArray, attrEnumMappings);
                 if (!TextUtils.isEmpty(fontFromAttribute)) {
                     return fontFromAttribute;
                 }
@@ -207,7 +215,7 @@ static String pullFontPathFromStyle(Context context, AttributeSet attrs, int att
      * @param attributeId if -1 returns null.
      * @return returns null if attribute is not defined or if no TextAppearance is found.
      */
-    static String pullFontPathFromTextAppearance(final Context context, AttributeSet attrs, int attributeId) {
+    static String pullFontPathFromTextAppearance(final Context context, AttributeSet attrs, int attributeId, CalligraphyEnumAttribute attrEnumMappings) {
         if (attributeId == -1 || attrs == null) {
             return null;
         }
@@ -228,7 +236,7 @@ static String pullFontPathFromTextAppearance(final Context context, AttributeSet
         final TypedArray textAppearanceAttrs = context.obtainStyledAttributes(textAppearanceId, new int[]{attributeId});
         if (textAppearanceAttrs != null) {
             try {
-                return textAppearanceAttrs.getString(0);
+                return pullFontPathFromTypedArray(typedArrayAttr, attrEnumMappings);
             } catch (Exception ignore) {
                 // Failed for some reason.
                 return null;
@@ -247,7 +255,7 @@ static String pullFontPathFromTextAppearance(final Context context, AttributeSet
      * @param attributeId if -1 returns null.
      * @return null if no theme or attribute defined.
      */
-    static String pullFontPathFromTheme(Context context, int styleAttrId, int attributeId) {
+    static String pullFontPathFromTheme(Context context, int styleAttrId, int attributeId, CalligraphyEnumAttribute attrEnumMappings) {
         if (styleAttrId == -1 || attributeId == -1)
             return null;
 
@@ -257,7 +265,7 @@ static String pullFontPathFromTheme(Context context, int styleAttrId, int attrib
         theme.resolveAttribute(styleAttrId, value, true);
         final TypedArray typedArray = theme.obtainStyledAttributes(value.resourceId, new int[]{attributeId});
         try {
-            String font = typedArray.getString(0);
+            String font = pullFontPathFromTypedArray(typedArray, attrEnumMappings);
             return font;
         } catch (Exception ignore) {
             // Failed for some reason.
@@ -276,7 +284,7 @@ static String pullFontPathFromTheme(Context context, int styleAttrId, int attrib
      * @param attributeId    if -1 returns null.
      * @return null if no theme or attribute defined.
      */
-    static String pullFontPathFromTheme(Context context, int styleAttrId, int subStyleAttrId, int attributeId) {
+    static String pullFontPathFromTheme(Context context, int styleAttrId, int subStyleAttrId, int attributeId, CalligraphyEnumAttribute attrEnumMappings) {
         if (styleAttrId == -1 || attributeId == -1)
             return null;
 
@@ -299,7 +307,7 @@ static String pullFontPathFromTheme(Context context, int styleAttrId, int subSty
         final TypedArray subTypedArray = context.obtainStyledAttributes(subStyleResId, new int[]{attributeId});
         if (subTypedArray != null) {
             try {
-                return subTypedArray.getString(0);
+                return pullFontPathFromTypedArray(subTypedArray, attrEnumMappings);
             } catch (Exception ignore) {
                 // Failed for some reason.
                 return null;
@@ -310,6 +318,10 @@ static String pullFontPathFromTheme(Context context, int styleAttrId, int subSty
         return null;
     }
 
+    static String pullFontPathFromTypedArray(TypedArray typedArray, CalligraphyEnumAttribute enumMapping) {
+        return enumMapping.isEmpty() ? typedArray.getString(0) : enumMapping.getFontPath(typedArray.getInt(0, -1));
+    }
+
     private static Boolean sToolbarCheck = null;
 
     /**
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
index 8ad3a8c..eacbfe2 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
@@ -1,9 +1,12 @@
 package uk.co.chrisjenx.calligraphy;
 
+import android.content.Context;
 import android.content.res.AssetManager;
 import android.graphics.Typeface;
 import android.util.Log;
 
+import java.io.IOException;
+import java.io.InputStream;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -73,6 +76,21 @@ public static boolean isLoaded(Typeface typeface) {
         return typeface != null && sCachedFonts.containsValue(typeface);
     }
 
+    /**
+     * Is this font path valid ?
+     * @param filePath     The path of the file.
+     * @return True if the font is valid
+     */
+    public static boolean fontExists(Context context, String filePath) {
+        try {
+            InputStream is = context.getResources().getAssets().open(filePath);
+            is.close();
+            return true;
+        } catch (IOException ex) {
+            return false;
+        }
+    }
+
     private TypefaceUtils() {
     }
 }
diff --git a/gradle.properties b/gradle.properties
index 0fb72bb..434d216 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -18,7 +18,7 @@
 # org.gradle.parallel=true
 
 GROUP=uk.co.chrisjenx
-VERSION_NAME=2.1.0
+VERSION_NAME=2.99.0
 VERSION_CODE=19
 
 POM_PACKAGING=aar
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 589f0c3..b09efa6 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,5 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
+distributionUrl=https\://s3.amazonaws.com/shared.ws.mirego.com/gradle-dists/gradle-3.3-mirego-1-all.zip
+#distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
diff --git a/settings.gradle b/settings.gradle
index 182c95d..543fe59 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +1 @@
-include ':calligraphy', ':CalligraphySample'
+include ':calligraphy'
