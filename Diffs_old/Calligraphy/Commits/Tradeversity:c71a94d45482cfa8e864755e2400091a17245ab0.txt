diff --git a/colorography/src/main/java/com/ftinc/colorography/ColorStateUtils.java b/colorography/src/main/java/com/ftinc/colorography/ColorStateUtils.java
new file mode 100644
index 0000000..b37d347
--- /dev/null
+++ b/colorography/src/main/java/com/ftinc/colorography/ColorStateUtils.java
@@ -0,0 +1,273 @@
+package com.ftinc.colorography;
+
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.graphics.Color;
+import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.ColorInt;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.content.ContextCompat;
+import android.support.v4.graphics.ColorUtils;
+import android.support.v4.graphics.drawable.DrawableCompat;
+import android.util.TypedValue;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import java.lang.reflect.Field;
+
+public final class ColorStateUtils {
+
+    private static final ThreadLocal<TypedValue> TL_TYPED_VALUE = new ThreadLocal<>();
+    private static final int[] DISABLED_STATE_SET = new int[]{-android.R.attr.state_enabled};
+    private static final int[] FOCUSED_STATE_SET = new int[]{android.R.attr.state_focused};
+    private static final int[] PRESSED_STATE_SET = new int[]{android.R.attr.state_pressed};
+    private static final int[] CHECKED_STATE_SET = new int[]{android.R.attr.state_checked};
+    private static final int[] UNPRESSED_UNFOCUSED_STATE_SET = new int[]{
+            -android.R.attr.state_focused,-android.R.attr.state_pressed };
+    private static final int[] EMPTY_STATE_SET = new int[0];
+    private static final int[] TEMP_ARRAY = new int[1];
+
+
+    private ColorStateUtils() {
+    }
+
+
+    public static ColorStateList createCheckboxColorStateList(@NonNull final Context context,
+                                                        @ColorInt final int baseColor) {
+        final int[][] states = new int[3][];
+        final int[] colors = new int[3];
+        int i = 0;
+
+        final int colorSwitchThumbNormal = getThemeAttrColor(context, R.attr.colorControlNormal);
+        final int disabledColor = getDisabledThemeAttrColor(context, R.attr.colorButtonNormal);
+
+        states[i] = DISABLED_STATE_SET;
+        colors[i] = disabledColor;
+        i++;
+
+        states[i] = CHECKED_STATE_SET;
+        colors[i] = baseColor;
+        i++;
+
+        states[i] = EMPTY_STATE_SET;
+        colors[i] = colorSwitchThumbNormal;
+        i++;
+
+        return new ColorStateList(states, colors);
+    }
+
+
+    public static ColorStateList createSwitchThumbColorStateList(@NonNull final Context context,
+                                                           @ColorInt final int baseColor) {
+        final int[][] states = new int[3][];
+        final int[] colors = new int[3];
+        int i = 0;
+
+        final int colorSwitchThumbNormal = getThemeAttrColor(context, R.attr.colorSwitchThumbNormal);
+        final int disabledColor = getDisabledThemeAttrColor(context, R.attr.colorButtonNormal);
+
+        states[i] = DISABLED_STATE_SET;
+        colors[i] = disabledColor;
+        i++;
+
+        states[i] = CHECKED_STATE_SET;
+        colors[i] = baseColor;
+        i++;
+
+        states[i] = EMPTY_STATE_SET;
+        colors[i] = colorSwitchThumbNormal;
+        i++;
+
+        return new ColorStateList(states, colors);
+    }
+
+
+    public static ColorStateList createSwitchTrackColorStateList(@NonNull final Context context,
+                                                           @ColorInt final int baseColor) {
+        final int[][] states = new int[3][];
+        final int[] colors = new int[3];
+        int i = 0;
+
+        final int foregroundColor = getThemeAttrColor(context, android.R.attr.colorForeground);
+        final int disabledColor = ColorUtils.setAlphaComponent(foregroundColor , (int)(.1f * 255));
+        final int checkedColor = ColorUtils.setAlphaComponent(baseColor, (int)(.3f * 255));
+        final int emptyColor = ColorUtils.setAlphaComponent(foregroundColor, (int)(.3f * 255));
+
+        states[i] = DISABLED_STATE_SET;
+        colors[i] = disabledColor;
+        i++;
+
+        states[i] = CHECKED_STATE_SET;
+        colors[i] = checkedColor;
+        i++;
+
+        states[i] = EMPTY_STATE_SET;
+        colors[i] = emptyColor;
+        i++;
+
+        return new ColorStateList(states, colors);
+    }
+
+
+    public static ColorStateList createEditTextColorStateList(@NonNull final Context context,
+                                                        @ColorInt final int baseColor) {
+        final int[][] states = new int[3][];
+        final int[] colors = new int[3];
+        int i = 0;
+
+        final int colorControlNormal = getThemeAttrColor(context, R.attr.colorControlNormal);
+        final int disabledColor = getDisabledThemeAttrColor(context, R.attr.colorButtonNormal);
+
+        states[i] = DISABLED_STATE_SET;
+        colors[i] = disabledColor;
+        i++;
+
+        states[i] = UNPRESSED_UNFOCUSED_STATE_SET;
+        colors[i] = colorControlNormal;
+        i++;
+
+        states[i] = EMPTY_STATE_SET;
+        colors[i] = baseColor;
+        i++;
+
+        return new ColorStateList(states, colors);
+    }
+
+
+    public static ColorStateList createButtonColorStateList(@NonNull final Context context,
+                                                      @ColorInt final int baseColor,
+                                                      @Nullable final ColorStateList tint) {
+        final int[][] states = new int[4][];
+        final int[] colors = new int[4];
+        int i = 0;
+
+        final int colorControlHighlight = getThemeAttrColor(context, R.attr.colorControlHighlight);
+        final int disabledColor = getDisabledThemeAttrColor(context, R.attr.colorButtonNormal);
+
+        // Disabled state
+        states[i] = DISABLED_STATE_SET;
+        colors[i] = tint == null ? disabledColor : tint.getColorForState(states[i], 0);
+        i++;
+
+        states[i] = PRESSED_STATE_SET;
+        colors[i] = ColorUtils.compositeColors(colorControlHighlight,
+                tint == null ? baseColor : tint.getColorForState(states[i], 0));
+        i++;
+
+        states[i] = FOCUSED_STATE_SET;
+        colors[i] = ColorUtils.compositeColors(colorControlHighlight,
+                tint == null ? baseColor : tint.getColorForState(states[i], 0));
+        i++;
+
+        // Default enabled state
+        states[i] = EMPTY_STATE_SET;
+        colors[i] = tint == null ? baseColor : tint.getColorForState(states[i], 0);
+        i++;
+
+        return new ColorStateList(states, colors);
+    }
+
+
+    private static int getThemeAttrColor(Context context, int attr) {
+        TEMP_ARRAY[0] = attr;
+        TintTypedArray a = TintTypedArray.obtainStyledAttributes(context, null, TEMP_ARRAY);
+        try {
+            return a.getColor(0, 0);
+        } finally {
+            a.recycle();
+        }
+    }
+
+
+    private static float getThemeAttrAlpha(Context context, int attr) {
+        TEMP_ARRAY[0] = attr;
+        TintTypedArray a = TintTypedArray.obtainStyledAttributes(context, null, TEMP_ARRAY);
+        try {
+            return a.getFloat(0, 1f);
+        } finally {
+            a.recycle();
+        }
+    }
+
+
+    private static ColorStateList getThemeAttrColorStateList(Context context, int attr) {
+        TEMP_ARRAY[0] = attr;
+        TintTypedArray a = TintTypedArray.obtainStyledAttributes(context, null, TEMP_ARRAY);
+        try {
+            return a.getColorStateList(0);
+        } finally {
+            a.recycle();
+        }
+    }
+
+
+    private static int getDisabledThemeAttrColor(Context context, int attr) {
+        final ColorStateList csl = getThemeAttrColorStateList(context, attr);
+        if (csl != null && csl.isStateful()) {
+            // If the CSL is stateful, we'll assume it has a disabled state and use it
+            return csl.getColorForState(DISABLED_STATE_SET, csl.getDefaultColor());
+        } else {
+            // Else, we'll generate the color using disabledAlpha from the theme
+
+            final TypedValue tv = getTypedValue();
+            // Now retrieve the disabledAlpha value from the theme
+            context.getTheme().resolveAttribute(android.R.attr.disabledAlpha, tv, true);
+            final float disabledAlpha = tv.getFloat();
+
+            return getThemeAttrColor(context, attr, disabledAlpha);
+        }
+    }
+
+
+    private static TypedValue getTypedValue() {
+        TypedValue typedValue = TL_TYPED_VALUE.get();
+        if (typedValue == null) {
+            typedValue = new TypedValue();
+            TL_TYPED_VALUE.set(typedValue);
+        }
+        return typedValue;
+    }
+
+
+    private static int getThemeAttrColor(Context context, int attr, float alpha) {
+        final int color = getThemeAttrColor(context, attr);
+        final int originalAlpha = Color.alpha(color);
+        return ColorUtils.setAlphaComponent(color, Math.round(originalAlpha * alpha));
+    }
+
+
+    public static void setCursorColor(EditText view, @ColorInt int color) {
+        try {
+            // Get the cursor resource id
+            Field field = TextView.class.getDeclaredField("mCursorDrawableRes");
+            field.setAccessible(true);
+            int drawableResId = field.getInt(view);
+
+            // Get the editor
+            field = TextView.class.getDeclaredField("mEditor");
+            field.setAccessible(true);
+            Object editor = field.get(view);
+
+            // Get the drawable and set a color filter
+            Drawable drawable = ContextCompat.getDrawable(view.getContext(), drawableResId);
+            drawable.setColorFilter(color, PorterDuff.Mode.SRC_IN);
+            Drawable[] drawables = {drawable, drawable};
+
+            // Set the drawables
+            field = editor.getClass().getDeclaredField("mCursorDrawable");
+            field.setAccessible(true);
+            field.set(editor, drawables);
+        } catch (Exception ignored) {
+        }
+    }
+
+
+    public static void tintDrawable(@Nullable Drawable drawable, @ColorInt int color) {
+        if (drawable != null) {
+            drawable = DrawableCompat.wrap(drawable);
+            DrawableCompat.setTint(drawable, color);
+        }
+    }
+}
diff --git a/colorography/src/main/java/com/ftinc/colorography/ColorographyConfig.java b/colorography/src/main/java/com/ftinc/colorography/ColorographyConfig.java
index d4f0bf9..f9f8af9 100644
--- a/colorography/src/main/java/com/ftinc/colorography/ColorographyConfig.java
+++ b/colorography/src/main/java/com/ftinc/colorography/ColorographyConfig.java
@@ -1,11 +1,24 @@
 package com.ftinc.colorography;
 
-import android.widget.TextView;
-
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
+import android.view.View;
+
+import com.ftinc.colorography.widget.AppCompatButtonWidgetFactory;
+import com.ftinc.colorography.widget.AppCompatCheckBoxWidgetFactory;
+import com.ftinc.colorography.widget.AppCompatEditTextWidgetFactory;
+import com.ftinc.colorography.widget.AppCompatRadioButtonWidgetFactory;
+import com.ftinc.colorography.widget.AppCompatRatingBarWidgetFactory;
+import com.ftinc.colorography.widget.CardViewWidgetFactory;
+import com.ftinc.colorography.widget.CollapsingToolbarLayoutWidgetFactory;
+import com.ftinc.colorography.widget.DefaultWidgetFactory;
+import com.ftinc.colorography.widget.FloatingActionButtonWidgetFactory;
+import com.ftinc.colorography.widget.ProgressBarWidgetFactory;
+import com.ftinc.colorography.widget.SwitchCompatWidgetFactory;
+import com.ftinc.colorography.widget.TextViewWidgetFactory;
+import com.ftinc.colorography.widget.WidgetFactory;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
 
 
 /**
@@ -14,6 +27,23 @@
  */
 public class ColorographyConfig {
 
+    private static final List<WidgetFactory<? extends View>> DEFAULT_FACTORIES = new ArrayList<>();
+
+    static {
+        DEFAULT_FACTORIES.add(new FloatingActionButtonWidgetFactory());
+        DEFAULT_FACTORIES.add(new CollapsingToolbarLayoutWidgetFactory());
+        DEFAULT_FACTORIES.add(new AppCompatButtonWidgetFactory());
+        DEFAULT_FACTORIES.add(new AppCompatCheckBoxWidgetFactory());
+        DEFAULT_FACTORIES.add(new AppCompatEditTextWidgetFactory());
+        DEFAULT_FACTORIES.add(new AppCompatRadioButtonWidgetFactory());
+        DEFAULT_FACTORIES.add(new AppCompatRatingBarWidgetFactory());
+        DEFAULT_FACTORIES.add(new CardViewWidgetFactory());
+        DEFAULT_FACTORIES.add(new ProgressBarWidgetFactory());
+        DEFAULT_FACTORIES.add(new SwitchCompatWidgetFactory());
+        DEFAULT_FACTORIES.add(new TextViewWidgetFactory());
+        DEFAULT_FACTORIES.add(new DefaultWidgetFactory());
+    }
+
 
     private static ColorographyConfig sInstance;
 
@@ -48,9 +78,15 @@ public static ColorographyConfig get() {
     private final boolean mCustomViewCreation;
 
 
+    private final List<WidgetFactory<? extends View>> mWidgetFactories;
+
+
     protected ColorographyConfig(Builder builder) {
         mAttrId = builder.attrId;
         mCustomViewCreation = builder.customViewCreation;
+        final List<WidgetFactory<? extends View>> tempList = new ArrayList<>(DEFAULT_FACTORIES);
+        tempList.addAll(builder.mWidgetFactoryList);
+        mWidgetFactories = Collections.unmodifiableList(tempList);
     }
 
 
@@ -67,13 +103,17 @@ public int getAttrId() {
     }
 
 
+    public List<WidgetFactory<? extends View>> getWidgetFactories() {
+        return mWidgetFactories;
+    }
+
+
     public static class Builder {
         public static final int INVALID_ATTR_ID = -1;
         private boolean customViewCreation = true;
-        private int attrId = R.attr.fontPath;
+        private int attrId = R.attr.themeColor;
 
-        private Map<Class<? extends TextView>, Integer> mStyleClassMap = new HashMap<>();
-        private Set<Class<?>> mHasTypefaceClasses = new HashSet<>();
+        private List<WidgetFactory<? extends View>> mWidgetFactoryList = new ArrayList<>();
 
         /**
          * This defaults to R.attr.fontPath. So only override if you want to use your own attrId.
@@ -115,25 +155,9 @@ public Builder disableCustomViewInflation() {
             return this;
         }
 
-        /**
-         * Add a custom style to get looked up. If you use a custom class that has a parent style
-         * which is not part of the default android styles you will need to add it here.
-         *
-         * The Calligraphy inflater is unaware of custom styles in your custom classes. We use
-         * the class type to look up the style attribute in the theme resources.
-         *
-         * So if you had a {@code MyTextField.class} which looked up it's default style as
-         * {@code R.attr.textFieldStyle} you would add those here.
-         *
-         * {@code builder.addCustomStyle(MyTextField.class,R.attr.textFieldStyle}
-         *
-         * @param styleClass             the class that related to the parent styleResource. null is ignored.
-         * @param styleResourceAttribute e.g. {@code R.attr.textFieldStyle}, 0 is ignored.
-         * @return this builder.
-         */
-        public Builder addCustomStyle(final Class<? extends TextView> styleClass, final int styleResourceAttribute) {
-            if (styleClass == null || styleResourceAttribute == 0) return this;
-            mStyleClassMap.put(styleClass, styleResourceAttribute);
+
+        public Builder addCustomWidgetFactory(final WidgetFactory<? extends View> widgetFactory) {
+            mWidgetFactoryList.add(widgetFactory);
             return this;
         }
 
diff --git a/colorography/src/main/java/com/ftinc/colorography/ColorographyFactory.java b/colorography/src/main/java/com/ftinc/colorography/ColorographyFactory.java
index e374d28..ffdf529 100644
--- a/colorography/src/main/java/com/ftinc/colorography/ColorographyFactory.java
+++ b/colorography/src/main/java/com/ftinc/colorography/ColorographyFactory.java
@@ -1,47 +1,18 @@
 package com.ftinc.colorography;
 
+
 import android.annotation.SuppressLint;
 import android.content.Context;
-import android.content.res.ColorStateList;
-import android.graphics.Color;
-import android.graphics.PorterDuff;
-import android.graphics.drawable.Drawable;
-import android.os.Build;
 import android.support.annotation.ColorInt;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.design.widget.CollapsingToolbarLayout;
-import android.support.design.widget.FloatingActionButton;
-import android.support.v4.content.ContextCompat;
-import android.support.v4.graphics.ColorUtils;
-import android.support.v4.graphics.drawable.DrawableCompat;
-import android.support.v4.view.ViewCompat;
-import android.support.v7.widget.AppCompatButton;
-import android.support.v7.widget.AppCompatCheckBox;
-import android.support.v7.widget.AppCompatEditText;
-import android.support.v7.widget.AppCompatRatingBar;
-import android.support.v7.widget.CardView;
-import android.support.v7.widget.SwitchCompat;
 import android.util.AttributeSet;
-import android.util.TypedValue;
 import android.view.View;
-import android.widget.EditText;
-import android.widget.ProgressBar;
-import android.widget.TextView;
 
-import java.lang.reflect.Field;
+import com.ftinc.colorography.widget.WidgetFactory;
 
+import java.util.List;
 
-class ColorographyFactory {
 
-    private static final ThreadLocal<TypedValue> TL_TYPED_VALUE = new ThreadLocal<>();
-    static final int[] DISABLED_STATE_SET = new int[]{-android.R.attr.state_enabled};
-    static final int[] FOCUSED_STATE_SET = new int[]{android.R.attr.state_focused};
-    static final int[] PRESSED_STATE_SET = new int[]{android.R.attr.state_pressed};
-    static final int[] CHECKED_STATE_SET = new int[]{android.R.attr.state_checked};
-    static final int[] UNPRESSED_UNFOCUSED_STATE_SET = new int[]{-android.R.attr.state_focused,-android.R.attr.state_pressed};
-    static final int[] EMPTY_STATE_SET = new int[0];
-    private static final int[] TEMP_ARRAY = new int[1];
+class ColorographyFactory {
 
     /**
      * Use to match a view against a potential view id. Such as ActionBar title etc.
@@ -67,9 +38,9 @@ public ColorographyFactory(int attributeId, int themeColor) {
 
 
     public View onViewCreated(View view, Context context, AttributeSet attrs) {
-        if (view != null && view.getTag(R.id.calligraphy_tag_id) != Boolean.TRUE) {
+        if (view != null && view.getTag(R.id.colorography_tag_id) != Boolean.TRUE) {
             onViewCreatedInternal(view, context, attrs);
-            view.setTag(R.id.calligraphy_tag_id, Boolean.TRUE);
+            view.setTag(R.id.colorography_tag_id, Boolean.TRUE);
         }
         return view;
     }
@@ -80,280 +51,24 @@ void onViewCreatedInternal(View view, final Context context, AttributeSet attrs)
         int defaultColor = resolveDefaultColor(context, attrs);
         if (defaultColor != -1) {
             int themeColor = mThemeColor == -1 ? defaultColor : mThemeColor;
-            if (view instanceof FloatingActionButton) {
-                FloatingActionButton fab = (FloatingActionButton) view;
-                fab.setBackgroundTintList(ColorStateList.valueOf(themeColor));
-            }
-            else if (view instanceof CollapsingToolbarLayout) {
-                CollapsingToolbarLayout ctl = (CollapsingToolbarLayout) view;
-                ctl.setContentScrimColor(themeColor);
-            }
-            else if (view instanceof AppCompatButton) {
-                AppCompatButton button = (AppCompatButton) view;
-                ColorStateList originalTintList = ViewCompat.getBackgroundTintList(button);
-                ColorStateList csl = createButtonColorStateList(context, themeColor, originalTintList);
-                ViewCompat.setBackgroundTintList(button, csl);
-            }
-            else if (view instanceof AppCompatEditText) {
-                AppCompatEditText editText = (AppCompatEditText) view;
-                ColorStateList csl = createEditTextColorStateList(context, themeColor);
-                ViewCompat.setBackgroundTintList(editText, csl);
-                editText.setHighlightColor(themeColor);
-                setCursorColor(editText, themeColor);
-            }
-            else if (view instanceof AppCompatCheckBox) {
-                AppCompatCheckBox checkBox = (AppCompatCheckBox) view;
-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-                    checkBox.setButtonTintList(createCheckboxColorStateList(context, themeColor));
-                }
-                else {
-                    checkBox.setSupportButtonTintList(createCheckboxColorStateList(context, themeColor));
-                }
-            }
-            else if (view instanceof AppCompatRatingBar) {
-                AppCompatRatingBar ratingBar = (AppCompatRatingBar) view;
-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-                    ratingBar.setProgressTintList(ColorStateList.valueOf(themeColor));
-                }
-                else {
-                    ratingBar.getProgressDrawable().setColorFilter(themeColor, PorterDuff.Mode.SRC_IN);
-                }
-            }
-            else if (view instanceof SwitchCompat) {
-                SwitchCompat sw = (SwitchCompat) view;
-                sw.setThumbTintList(createSwitchThumbColorStateList(context, themeColor));
-                sw.setTrackTintList(createSwitchTrackColorStateList(context, themeColor));
-            }
-            else if (view instanceof TextView) {
-                TextView textView = (TextView) view;
-                textView.setTextColor(themeColor);
-                Drawable[] drawables = textView.getCompoundDrawablesRelative();
-                for (int i = 0; i < drawables.length; i++) {
-                    tintDrawable(drawables[i], themeColor);
-                }
-                textView.setCompoundDrawablesRelativeWithIntrinsicBounds(drawables[0], drawables[1], drawables[2], drawables[3]);
-            }
-            else if (view instanceof CardView) {
-                CardView cardView = (CardView) view;
-                cardView.setCardBackgroundColor(themeColor);
-            }
-            else if (view instanceof ProgressBar) {
-                ProgressBar progressBar = (ProgressBar) view;
-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-                    progressBar.setIndeterminateTintList(ColorStateList.valueOf(themeColor));
-                }
-                else {
-                    progressBar.getIndeterminateDrawable().setColorFilter(themeColor, PorterDuff.Mode.SRC_IN);
+
+            List<WidgetFactory<? extends View>> widgetFactories = ColorographyConfig.get().getWidgetFactories();
+            for (int i = 0; i < widgetFactories.size(); i++) {
+                WidgetFactory<? extends View> factory = widgetFactories.get(i);
+                Class<? extends View> clazz = factory.getWidgetClass();
+                if (clazz.isInstance(view)) {
+                    apply(factory, view, context, attrs, themeColor);
+                    break;
                 }
             }
-            else {
-                view.setBackgroundColor(themeColor);
-            }
         }
     }
 
 
-    private ColorStateList createCheckboxColorStateList(@NonNull final Context context,
-                                                        @ColorInt final int baseColor) {
-        final int[][] states = new int[3][];
-        final int[] colors = new int[3];
-        int i = 0;
-
-        final int colorSwitchThumbNormal = getThemeAttrColor(context, R.attr.colorControlNormal);
-        final int disabledColor = getDisabledThemeAttrColor(context, R.attr.colorButtonNormal);
-
-        states[i] = DISABLED_STATE_SET;
-        colors[i] = disabledColor;
-        i++;
-
-        states[i] = CHECKED_STATE_SET;
-        colors[i] = baseColor;
-        i++;
-
-        states[i] = EMPTY_STATE_SET;
-        colors[i] = colorSwitchThumbNormal;
-        i++;
-
-        return new ColorStateList(states, colors);
-    }
-
-
-    private ColorStateList createSwitchThumbColorStateList(@NonNull final Context context,
-                                                           @ColorInt final int baseColor) {
-        final int[][] states = new int[3][];
-        final int[] colors = new int[3];
-        int i = 0;
-
-        final int colorSwitchThumbNormal = getThemeAttrColor(context, R.attr.colorSwitchThumbNormal);
-        final int disabledColor = getDisabledThemeAttrColor(context, R.attr.colorButtonNormal);
-
-        states[i] = DISABLED_STATE_SET;
-        colors[i] = disabledColor;
-        i++;
-
-        states[i] = CHECKED_STATE_SET;
-        colors[i] = baseColor;
-        i++;
-
-        states[i] = EMPTY_STATE_SET;
-        colors[i] = colorSwitchThumbNormal;
-        i++;
-
-        return new ColorStateList(states, colors);
-    }
-
-
-    private ColorStateList createSwitchTrackColorStateList(@NonNull final Context context,
-                                                           @ColorInt final int baseColor) {
-        final int[][] states = new int[3][];
-        final int[] colors = new int[3];
-        int i = 0;
-
-        final int foregroundColor = getThemeAttrColor(context, android.R.attr.colorForeground);
-        final int disabledColor = ColorUtils.setAlphaComponent(foregroundColor , (int)(.1f * 255));
-        final int checkedColor = ColorUtils.setAlphaComponent(baseColor, (int)(.3f * 255));
-        final int emptyColor = ColorUtils.setAlphaComponent(foregroundColor, (int)(.3f * 255));
-
-        states[i] = DISABLED_STATE_SET;
-        colors[i] = disabledColor;
-        i++;
-
-        states[i] = CHECKED_STATE_SET;
-        colors[i] = checkedColor;
-        i++;
-
-        states[i] = EMPTY_STATE_SET;
-        colors[i] = emptyColor;
-        i++;
-
-        return new ColorStateList(states, colors);
-    }
-
-
-    private ColorStateList createEditTextColorStateList(@NonNull final Context context,
-                                                        @ColorInt final int baseColor) {
-        final int[][] states = new int[3][];
-        final int[] colors = new int[3];
-        int i = 0;
-
-        final int colorControlNormal = getThemeAttrColor(context, R.attr.colorControlNormal);
-        final int disabledColor = getDisabledThemeAttrColor(context, R.attr.colorButtonNormal);
-
-        states[i] = DISABLED_STATE_SET;
-        colors[i] = disabledColor;
-        i++;
-
-        states[i] = UNPRESSED_UNFOCUSED_STATE_SET;
-        colors[i] = colorControlNormal;
-        i++;
-
-        states[i] = EMPTY_STATE_SET;
-        colors[i] = baseColor;
-        i++;
-
-        return new ColorStateList(states, colors);
-    }
-
-
-    private ColorStateList createButtonColorStateList(@NonNull final Context context,
-                                                      @ColorInt final int baseColor,
-                                                      @Nullable final ColorStateList tint) {
-        final int[][] states = new int[4][];
-        final int[] colors = new int[4];
-        int i = 0;
-
-        final int colorControlHighlight = getThemeAttrColor(context, R.attr.colorControlHighlight);
-        final int disabledColor = getDisabledThemeAttrColor(context, R.attr.colorButtonNormal);
-
-        // Disabled state
-        states[i] = DISABLED_STATE_SET;
-        colors[i] = tint == null ? disabledColor : tint.getColorForState(states[i], 0);
-        i++;
-
-        states[i] = PRESSED_STATE_SET;
-        colors[i] = ColorUtils.compositeColors(colorControlHighlight,
-                tint == null ? baseColor : tint.getColorForState(states[i], 0));
-        i++;
-
-        states[i] = FOCUSED_STATE_SET;
-        colors[i] = ColorUtils.compositeColors(colorControlHighlight,
-                tint == null ? baseColor : tint.getColorForState(states[i], 0));
-        i++;
-
-        // Default enabled state
-        states[i] = EMPTY_STATE_SET;
-        colors[i] = tint == null ? baseColor : tint.getColorForState(states[i], 0);
-        i++;
-
-        return new ColorStateList(states, colors);
-    }
-
-
-    public static int getThemeAttrColor(Context context, int attr) {
-        TEMP_ARRAY[0] = attr;
-        TintTypedArray a = TintTypedArray.obtainStyledAttributes(context, null, TEMP_ARRAY);
-        try {
-            return a.getColor(0, 0);
-        } finally {
-            a.recycle();
-        }
-    }
-
-
-    public static float getThemeAttrAlpha(Context context, int attr) {
-        TEMP_ARRAY[0] = attr;
-        TintTypedArray a = TintTypedArray.obtainStyledAttributes(context, null, TEMP_ARRAY);
-        try {
-            return a.getFloat(0, 1f);
-        } finally {
-            a.recycle();
-        }
-    }
-
-
-    public static ColorStateList getThemeAttrColorStateList(Context context, int attr) {
-        TEMP_ARRAY[0] = attr;
-        TintTypedArray a = TintTypedArray.obtainStyledAttributes(context, null, TEMP_ARRAY);
-        try {
-            return a.getColorStateList(0);
-        } finally {
-            a.recycle();
-        }
-    }
-
-
-    public static int getDisabledThemeAttrColor(Context context, int attr) {
-        final ColorStateList csl = getThemeAttrColorStateList(context, attr);
-        if (csl != null && csl.isStateful()) {
-            // If the CSL is stateful, we'll assume it has a disabled state and use it
-            return csl.getColorForState(DISABLED_STATE_SET, csl.getDefaultColor());
-        } else {
-            // Else, we'll generate the color using disabledAlpha from the theme
-
-            final TypedValue tv = getTypedValue();
-            // Now retrieve the disabledAlpha value from the theme
-            context.getTheme().resolveAttribute(android.R.attr.disabledAlpha, tv, true);
-            final float disabledAlpha = tv.getFloat();
-
-            return getThemeAttrColor(context, attr, disabledAlpha);
-        }
-    }
-
-
-    private static TypedValue getTypedValue() {
-        TypedValue typedValue = TL_TYPED_VALUE.get();
-        if (typedValue == null) {
-            typedValue = new TypedValue();
-            TL_TYPED_VALUE.set(typedValue);
-        }
-        return typedValue;
-    }
-
-
-    static int getThemeAttrColor(Context context, int attr, float alpha) {
-        final int color = getThemeAttrColor(context, attr);
-        final int originalAlpha = Color.alpha(color);
-        return ColorUtils.setAlphaComponent(color, Math.round(originalAlpha * alpha));
+    private <T extends View> void apply(WidgetFactory<T> factory, View view, Context context, AttributeSet attrs, int tintColor) {
+        Class<T> clazz = factory.getWidgetClass();
+        T castedView = clazz.cast(view);
+        factory.applyTint(castedView, context, attrs, tintColor);
     }
 
 
@@ -361,37 +76,4 @@ static int getThemeAttrColor(Context context, int attr, float alpha) {
     private int resolveDefaultColor(Context context, AttributeSet attrs) {
         return ColorographyUtils.pullDefaultColorFromView(context, attrs, mAttributeId);
     }
-
-    private static void setCursorColor(EditText view, @ColorInt int color) {
-        try {
-            // Get the cursor resource id
-            Field field = TextView.class.getDeclaredField("mCursorDrawableRes");
-            field.setAccessible(true);
-            int drawableResId = field.getInt(view);
-
-            // Get the editor
-            field = TextView.class.getDeclaredField("mEditor");
-            field.setAccessible(true);
-            Object editor = field.get(view);
-
-            // Get the drawable and set a color filter
-            Drawable drawable = ContextCompat.getDrawable(view.getContext(), drawableResId);
-            drawable.setColorFilter(color, PorterDuff.Mode.SRC_IN);
-            Drawable[] drawables = {drawable, drawable};
-
-            // Set the drawables
-            field = editor.getClass().getDeclaredField("mCursorDrawable");
-            field.setAccessible(true);
-            field.set(editor, drawables);
-        } catch (Exception ignored) {
-        }
-    }
-
-
-    private static void tintDrawable(@Nullable Drawable drawable, @ColorInt int color) {
-        if (drawable != null) {
-            drawable = DrawableCompat.wrap(drawable);
-            DrawableCompat.setTint(drawable, color);
-        }
-    }
 }
diff --git a/colorography/src/main/java/com/ftinc/colorography/widget/AppCompatButtonWidgetFactory.java b/colorography/src/main/java/com/ftinc/colorography/widget/AppCompatButtonWidgetFactory.java
new file mode 100644
index 0000000..c73e236
--- /dev/null
+++ b/colorography/src/main/java/com/ftinc/colorography/widget/AppCompatButtonWidgetFactory.java
@@ -0,0 +1,28 @@
+package com.ftinc.colorography.widget;
+
+
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.support.annotation.NonNull;
+import android.support.v4.view.ViewCompat;
+import android.support.v7.widget.AppCompatButton;
+import android.util.AttributeSet;
+
+import com.ftinc.colorography.ColorStateUtils;
+
+
+public class AppCompatButtonWidgetFactory implements WidgetFactory<AppCompatButton> {
+
+    @Override
+    public Class<AppCompatButton> getWidgetClass() {
+        return AppCompatButton.class;
+    }
+
+
+    @Override
+    public void applyTint(AppCompatButton view, @NonNull Context context, AttributeSet attrs, int tintColor) {
+        ColorStateList originalTintList = ViewCompat.getBackgroundTintList(view);
+        ColorStateList csl = ColorStateUtils.createButtonColorStateList(context, tintColor, originalTintList);
+        ViewCompat.setBackgroundTintList(view, csl);
+    }
+}
diff --git a/colorography/src/main/java/com/ftinc/colorography/widget/AppCompatCheckBoxWidgetFactory.java b/colorography/src/main/java/com/ftinc/colorography/widget/AppCompatCheckBoxWidgetFactory.java
new file mode 100644
index 0000000..eb76fe8
--- /dev/null
+++ b/colorography/src/main/java/com/ftinc/colorography/widget/AppCompatCheckBoxWidgetFactory.java
@@ -0,0 +1,30 @@
+package com.ftinc.colorography.widget;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.v7.widget.AppCompatCheckBox;
+import android.util.AttributeSet;
+
+import com.ftinc.colorography.ColorStateUtils;
+
+public class AppCompatCheckBoxWidgetFactory implements WidgetFactory<AppCompatCheckBox> {
+
+    @Override
+    public Class<AppCompatCheckBox> getWidgetClass() {
+        return AppCompatCheckBox.class;
+    }
+
+
+    @SuppressLint("RestrictedApi")
+    @Override
+    public void applyTint(AppCompatCheckBox view, @NonNull Context context, AttributeSet attrs, int tintColor) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            view.setButtonTintList(ColorStateUtils.createCheckboxColorStateList(context, tintColor));
+        }
+        else {
+            view.setSupportButtonTintList(ColorStateUtils.createCheckboxColorStateList(context, tintColor));
+        }
+    }
+}
diff --git a/colorography/src/main/java/com/ftinc/colorography/widget/AppCompatEditTextWidgetFactory.java b/colorography/src/main/java/com/ftinc/colorography/widget/AppCompatEditTextWidgetFactory.java
new file mode 100644
index 0000000..1caec3b
--- /dev/null
+++ b/colorography/src/main/java/com/ftinc/colorography/widget/AppCompatEditTextWidgetFactory.java
@@ -0,0 +1,27 @@
+package com.ftinc.colorography.widget;
+
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.support.annotation.NonNull;
+import android.support.v4.view.ViewCompat;
+import android.support.v7.widget.AppCompatEditText;
+import android.util.AttributeSet;
+
+import com.ftinc.colorography.ColorStateUtils;
+
+public class AppCompatEditTextWidgetFactory implements WidgetFactory<AppCompatEditText> {
+
+    @Override
+    public Class<AppCompatEditText> getWidgetClass() {
+        return AppCompatEditText.class;
+    }
+
+
+    @Override
+    public void applyTint(AppCompatEditText view, @NonNull Context context, AttributeSet attrs, int tintColor) {
+        ColorStateList csl = ColorStateUtils.createEditTextColorStateList(context, tintColor);
+        ViewCompat.setBackgroundTintList(view, csl);
+        view.setHighlightColor(tintColor);
+        ColorStateUtils.setCursorColor(view, tintColor);
+    }
+}
diff --git a/colorography/src/main/java/com/ftinc/colorography/widget/AppCompatRadioButtonWidgetFactory.java b/colorography/src/main/java/com/ftinc/colorography/widget/AppCompatRadioButtonWidgetFactory.java
new file mode 100644
index 0000000..121bede
--- /dev/null
+++ b/colorography/src/main/java/com/ftinc/colorography/widget/AppCompatRadioButtonWidgetFactory.java
@@ -0,0 +1,31 @@
+package com.ftinc.colorography.widget;
+
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.v7.widget.AppCompatRadioButton;
+import android.util.AttributeSet;
+import com.ftinc.colorography.ColorStateUtils;
+
+
+public class AppCompatRadioButtonWidgetFactory implements WidgetFactory<AppCompatRadioButton> {
+
+    @Override
+    public Class<AppCompatRadioButton> getWidgetClass() {
+        return AppCompatRadioButton.class;
+    }
+
+
+    @SuppressLint("RestrictedApi")
+    @Override
+    public void applyTint(AppCompatRadioButton view, @NonNull Context context, AttributeSet attrs, int tintColor) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            view.setButtonTintList(ColorStateUtils.createCheckboxColorStateList(context, tintColor));
+        }
+        else {
+            view.setSupportButtonTintList(ColorStateUtils.createCheckboxColorStateList(context, tintColor));
+        }
+    }
+}
diff --git a/colorography/src/main/java/com/ftinc/colorography/widget/AppCompatRatingBarWidgetFactory.java b/colorography/src/main/java/com/ftinc/colorography/widget/AppCompatRatingBarWidgetFactory.java
new file mode 100644
index 0000000..f312454
--- /dev/null
+++ b/colorography/src/main/java/com/ftinc/colorography/widget/AppCompatRatingBarWidgetFactory.java
@@ -0,0 +1,28 @@
+package com.ftinc.colorography.widget;
+
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.graphics.PorterDuff;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.v7.widget.AppCompatRatingBar;
+import android.util.AttributeSet;
+
+public class AppCompatRatingBarWidgetFactory implements WidgetFactory<AppCompatRatingBar> {
+
+    @Override
+    public Class<AppCompatRatingBar> getWidgetClass() {
+        return AppCompatRatingBar.class;
+    }
+
+
+    @Override
+    public void applyTint(AppCompatRatingBar view, @NonNull Context context, AttributeSet attrs, int tintColor) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            view.setProgressTintList(ColorStateList.valueOf(tintColor));
+        }
+        else {
+            view.getProgressDrawable().setColorFilter(tintColor, PorterDuff.Mode.SRC_IN);
+        }
+    }
+}
diff --git a/colorography/src/main/java/com/ftinc/colorography/widget/CardViewWidgetFactory.java b/colorography/src/main/java/com/ftinc/colorography/widget/CardViewWidgetFactory.java
new file mode 100644
index 0000000..ed705df
--- /dev/null
+++ b/colorography/src/main/java/com/ftinc/colorography/widget/CardViewWidgetFactory.java
@@ -0,0 +1,20 @@
+package com.ftinc.colorography.widget;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.v7.widget.CardView;
+import android.util.AttributeSet;
+
+public class CardViewWidgetFactory implements WidgetFactory<CardView> {
+
+    @Override
+    public Class<CardView> getWidgetClass() {
+        return CardView.class;
+    }
+
+
+    @Override
+    public void applyTint(CardView view, @NonNull Context context, AttributeSet attrs, int tintColor) {
+        view.setCardBackgroundColor(tintColor);
+    }
+}
diff --git a/colorography/src/main/java/com/ftinc/colorography/widget/CollapsingToolbarLayoutWidgetFactory.java b/colorography/src/main/java/com/ftinc/colorography/widget/CollapsingToolbarLayoutWidgetFactory.java
new file mode 100644
index 0000000..a154e6f
--- /dev/null
+++ b/colorography/src/main/java/com/ftinc/colorography/widget/CollapsingToolbarLayoutWidgetFactory.java
@@ -0,0 +1,20 @@
+package com.ftinc.colorography.widget;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.design.widget.CollapsingToolbarLayout;
+import android.util.AttributeSet;
+
+public class CollapsingToolbarLayoutWidgetFactory implements WidgetFactory<CollapsingToolbarLayout> {
+
+    @Override
+    public Class<CollapsingToolbarLayout> getWidgetClass() {
+        return CollapsingToolbarLayout.class;
+    }
+
+
+    @Override
+    public void applyTint(CollapsingToolbarLayout view, @NonNull Context context, AttributeSet attrs, int tintColor) {
+        view.setContentScrimColor(tintColor);
+    }
+}
diff --git a/colorography/src/main/java/com/ftinc/colorography/widget/DefaultWidgetFactory.java b/colorography/src/main/java/com/ftinc/colorography/widget/DefaultWidgetFactory.java
new file mode 100644
index 0000000..3fe6b0e
--- /dev/null
+++ b/colorography/src/main/java/com/ftinc/colorography/widget/DefaultWidgetFactory.java
@@ -0,0 +1,22 @@
+package com.ftinc.colorography.widget;
+
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.util.AttributeSet;
+import android.view.View;
+
+
+public class DefaultWidgetFactory implements WidgetFactory<View> {
+
+    @Override
+    public Class<View> getWidgetClass() {
+        return View.class;
+    }
+
+
+    @Override
+    public void applyTint(View view, @NonNull Context context, AttributeSet attrs, int tintColor) {
+        view.setBackgroundColor(tintColor);
+    }
+}
diff --git a/colorography/src/main/java/com/ftinc/colorography/widget/FloatingActionButtonWidgetFactory.java b/colorography/src/main/java/com/ftinc/colorography/widget/FloatingActionButtonWidgetFactory.java
new file mode 100644
index 0000000..b0e5063
--- /dev/null
+++ b/colorography/src/main/java/com/ftinc/colorography/widget/FloatingActionButtonWidgetFactory.java
@@ -0,0 +1,21 @@
+package com.ftinc.colorography.widget;
+
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.support.annotation.NonNull;
+import android.support.design.widget.FloatingActionButton;
+import android.util.AttributeSet;
+
+public class FloatingActionButtonWidgetFactory implements WidgetFactory<FloatingActionButton> {
+
+    @Override
+    public Class<FloatingActionButton> getWidgetClass() {
+        return FloatingActionButton.class;
+    }
+
+
+    @Override
+    public void applyTint(FloatingActionButton view, @NonNull Context context, AttributeSet attrs, int tintColor) {
+        view.setBackgroundTintList(ColorStateList.valueOf(tintColor));
+    }
+}
diff --git a/colorography/src/main/java/com/ftinc/colorography/widget/ProgressBarWidgetFactory.java b/colorography/src/main/java/com/ftinc/colorography/widget/ProgressBarWidgetFactory.java
new file mode 100644
index 0000000..f3c59e7
--- /dev/null
+++ b/colorography/src/main/java/com/ftinc/colorography/widget/ProgressBarWidgetFactory.java
@@ -0,0 +1,28 @@
+package com.ftinc.colorography.widget;
+
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.graphics.PorterDuff;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.util.AttributeSet;
+import android.widget.ProgressBar;
+
+public class ProgressBarWidgetFactory implements WidgetFactory<ProgressBar> {
+
+    @Override
+    public Class<ProgressBar> getWidgetClass() {
+        return ProgressBar.class;
+    }
+
+
+    @Override
+    public void applyTint(ProgressBar view, @NonNull Context context, AttributeSet attrs, int tintColor) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            view.setIndeterminateTintList(ColorStateList.valueOf(tintColor));
+        }
+        else {
+            view.getIndeterminateDrawable().setColorFilter(tintColor, PorterDuff.Mode.SRC_IN);
+        }
+    }
+}
diff --git a/colorography/src/main/java/com/ftinc/colorography/widget/SwitchCompatWidgetFactory.java b/colorography/src/main/java/com/ftinc/colorography/widget/SwitchCompatWidgetFactory.java
new file mode 100644
index 0000000..a7e8dcc
--- /dev/null
+++ b/colorography/src/main/java/com/ftinc/colorography/widget/SwitchCompatWidgetFactory.java
@@ -0,0 +1,25 @@
+package com.ftinc.colorography.widget;
+
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.v7.widget.SwitchCompat;
+import android.util.AttributeSet;
+
+import com.ftinc.colorography.ColorStateUtils;
+
+
+public class SwitchCompatWidgetFactory implements WidgetFactory<SwitchCompat> {
+
+    @Override
+    public Class<SwitchCompat> getWidgetClass() {
+        return SwitchCompat.class;
+    }
+
+
+    @Override
+    public void applyTint(SwitchCompat view, @NonNull Context context, AttributeSet attrs, int tintColor) {
+        view.setThumbTintList(ColorStateUtils.createSwitchThumbColorStateList(context, tintColor));
+        view.setTrackTintList(ColorStateUtils.createSwitchTrackColorStateList(context, tintColor));
+    }
+}
diff --git a/colorography/src/main/java/com/ftinc/colorography/widget/TextViewWidgetFactory.java b/colorography/src/main/java/com/ftinc/colorography/widget/TextViewWidgetFactory.java
new file mode 100644
index 0000000..c7d848c
--- /dev/null
+++ b/colorography/src/main/java/com/ftinc/colorography/widget/TextViewWidgetFactory.java
@@ -0,0 +1,30 @@
+package com.ftinc.colorography.widget;
+
+
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
+import android.util.AttributeSet;
+import android.widget.TextView;
+
+import com.ftinc.colorography.ColorStateUtils;
+
+
+public class TextViewWidgetFactory implements WidgetFactory<TextView> {
+
+    @Override
+    public Class<TextView> getWidgetClass() {
+        return TextView.class;
+    }
+
+
+    @Override
+    public void applyTint(TextView view, @NonNull Context context, AttributeSet attrs, int tintColor) {
+        view.setTextColor(tintColor);
+        Drawable[] drawables = view.getCompoundDrawablesRelative();
+        for (int i = 0; i < drawables.length; i++) {
+            ColorStateUtils.tintDrawable(drawables[i], tintColor);
+        }
+        view.setCompoundDrawablesRelativeWithIntrinsicBounds(drawables[0], drawables[1], drawables[2], drawables[3]);
+    }
+}
diff --git a/colorography/src/main/java/com/ftinc/colorography/widget/WidgetFactory.java b/colorography/src/main/java/com/ftinc/colorography/widget/WidgetFactory.java
new file mode 100644
index 0000000..2e96bf8
--- /dev/null
+++ b/colorography/src/main/java/com/ftinc/colorography/widget/WidgetFactory.java
@@ -0,0 +1,15 @@
+package com.ftinc.colorography.widget;
+
+
+import android.content.Context;
+import android.support.annotation.ColorInt;
+import android.support.annotation.NonNull;
+import android.util.AttributeSet;
+import android.view.View;
+
+
+public interface WidgetFactory<T extends View> {
+
+    Class<T> getWidgetClass();
+    void applyTint(T view, @NonNull Context context, AttributeSet attrs, @ColorInt int tintColor);
+}
diff --git a/colorography/src/main/res/values/attrs.xml b/colorography/src/main/res/values/attrs.xml
index 7bbb685..15cf8fe 100644
--- a/colorography/src/main/res/values/attrs.xml
+++ b/colorography/src/main/res/values/attrs.xml
@@ -1,5 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
-    <attr name="fontPath" format="string" />
     <attr name="themeColor" format="color|reference" />
 </resources>
\ No newline at end of file
diff --git a/colorography/src/main/res/values/ids.xml b/colorography/src/main/res/values/ids.xml
index 0a3cb38..0a447cd 100644
--- a/colorography/src/main/res/values/ids.xml
+++ b/colorography/src/main/res/values/ids.xml
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
-    <item name="calligraphy_tag_id" type="id"/>
+    <item name="colorography_tag_id" type="id"/>
 </resources>
\ No newline at end of file
diff --git a/colorography/src/main/res/values/public.xml b/colorography/src/main/res/values/public.xml
index 30be1ea..0e70fb4 100644
--- a/colorography/src/main/res/values/public.xml
+++ b/colorography/src/main/res/values/public.xml
@@ -1,5 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
-    <public name="fontPath" type="attr"/>
     <public name="themeColor" type="attr"/>
 </resources>
