diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
index 6f9cfc1..f81b0c4 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
@@ -101,6 +101,10 @@ public void setFactory2(Factory2 factory2) {
         }
     }
 
+    private Factory2 getPrivateFactory() {
+        return ReflectionUtils.getField(this, "mPrivateFactory", LayoutInflater.Factory2.class);
+    }
+
     private void setPrivateFactoryInternal() {
         // Already tried to set the factory.
         if (mSetPrivateFactory) return;
@@ -112,14 +116,16 @@ private void setPrivateFactoryInternal() {
             return;
         }
 
-        final Method setPrivateFactoryMethod = ReflectionUtils
+        Method setPrivateFactoryMethod = ReflectionUtils
                 .getMethod(LayoutInflater.class, "setPrivateFactory");
 
+        Factory2 privateFactory = getPrivateFactory();
         if (setPrivateFactoryMethod != null) {
             ReflectionUtils.invokeMethod(this,
                     setPrivateFactoryMethod,
-                    new PrivateWrapperFactory2((Factory2) getContext(), this, mCalligraphyFactory));
+                    new PrivateWrapperFactory2(privateFactory != null ? privateFactory : (Factory2) getContext(), this, mCalligraphyFactory));
         }
+
         mSetPrivateFactory = true;
     }
 
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/ReflectionUtils.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/ReflectionUtils.java
index 99c0d86..e93e264 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/ReflectionUtils.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/ReflectionUtils.java
@@ -5,6 +5,7 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 
 /**
  * Created by chris on 17/12/14.
@@ -14,6 +15,20 @@
 
     private static final String TAG = ReflectionUtils.class.getSimpleName();
 
+    public static Field findField(Class<?> clazz, String name, Class<?> type) {
+        Class<?> searchType = clazz;
+        while (!Object.class.equals(searchType) && searchType != null) {
+            Field[] fields = searchType.getDeclaredFields();
+            for (Field field : fields) {
+                if ((name == null || name.equals(field.getName())) && (type == null || type.equals(field.getType()))) {
+                    return field;
+                }
+            }
+            searchType = searchType.getSuperclass();
+        }
+        return null;
+    }
+
     static Field getField(Class clazz, String fieldName) {
         try {
             final Field f = clazz.getDeclaredField(fieldName);
@@ -24,6 +39,32 @@ static Field getField(Class clazz, String fieldName) {
         return null;
     }
 
+    private static void makeAccessible(Field field) {
+        if ((!Modifier.isPublic(field.getModifiers())
+                || !Modifier.isPublic(field.getDeclaringClass().getModifiers())
+                || Modifier.isFinal(field.getModifiers()))
+                && !field.isAccessible()) {
+            field.setAccessible(true);
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    public static <T> T getField(Object target, String fieldName, Class<T> fieldType) {
+        Field field = findField(target.getClass(), fieldName, fieldType);
+        if(field == null) {
+            throw new RuntimeException("unknown given field '"+fieldName+"'");
+        }
+
+        makeAccessible(field);
+        try {
+            return (T)field.get(target);
+        }
+        catch (IllegalAccessException ex) {
+            throw new IllegalStateException(
+                    "Unexpected reflection exception - " + ex.getClass().getName() + ": " + ex.getMessage(), ex);
+        }
+    }
+
     static Object getValue(Field field, Object obj) {
         try {
             return field.get(obj);
