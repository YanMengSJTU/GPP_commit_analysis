diff --git a/CHANGELOG.md b/CHANGELOG.md
index 9144fc6..0aff8e9 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,9 @@
 # Changelog
 
+# 3.0.0 (07/07/2017)
+- Complete refactoring to use as a color themeing library instead of typefaces
+
+
 # 2.3.0 (11/05/2017)
 - Fix Toolbar TextView's layout race condition. [@ansman](https://github.com/ansman) #386, #368, #327, #280, #304, #363
 
diff --git a/README.md b/README.md
index ea11362..1b8430c 100644
--- a/README.md
+++ b/README.md
@@ -1,60 +1,46 @@
-Calligraphy
+Colorography
 ===========
-
-[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Calligraphy-blue.svg?style=flat)](http://android-arsenal.com/details/1/163)
-
-Custom fonts in Android an OK way.
-
-Are you fed up of Custom Views to set fonts? Or traversing the ViewTree to find TextViews? Yeah me too.
-
-![alt text](https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png "ScreenShot Of Font Samples")
+A way to custom/dynamically theme your application at inflation so you don't have to manually change the color tinting of controls
 
 ## Getting started
 
 ### Dependency
 
-Include the dependency [Download (.aar)](http://search.maven.org/remotecontent?filepath=uk/co/chrisjenx/calligraphy/2.2.0/calligraphy-2.2.0.aar) :
+Include the dependency
 
 ```groovy
 dependencies {
-    compile 'uk.co.chrisjenx:calligraphy:2.3.0'
+    compile 'com.52inc:colorography:3.0.0'
+    
+    // Snapshot
+    compile 'com.52inc:colorography:3.0.0-SNAPSHOT'
 }
 ```
-### Add Fonts
-
-Add your custom fonts to `assets/`. All font definitions are relative to this path.
-
-Assuming that you are using Gradle you should create the assets directory under `src/main/` in your project directory if it does not already exist.
-As it's popular to use multi-project build with Gradle the path is usually `app/src/main/assets/`, where `app` is the project name.
-
-You might consider creating a `fonts/` subdirectory in the assets directory (as in examples).
 
 ### Usage
 
 ```xml
-<TextView fontPath="fonts/MyFont.ttf"/>
+<*View themeColor="@color/backup_theme_color" />
 ``` 
 **Note: The missing namespace, this __IS__ intentional.**
 
 ### Installation
 
-Define your default font using `CalligraphyConfig`, in your `Application` class in the `#onCreate()` method.
+Define your default font using `ColorographyConfig`, in your `Application` class in the `#onCreate()` method.
 
 ```java
 @Override
 public void onCreate() {
     super.onCreate();
-    CalligraphyConfig.initDefault(new CalligraphyConfig.Builder()
-                            .setDefaultFontPath("fonts/Roboto-RobotoRegular.ttf")
-                            .setFontAttrId(R.attr.fontPath)
-                            .build()
-            );
+    ColorographyConfig.initDefault(new ColorographyConfig.Builder()
+          	.setThemeColorAttrId(R.attr.themeColor)
+          	.build());
     //....
 }
 ```
 
-_Note: You don't need to define `CalligraphyConfig` but the library will apply
-no default font and use the default attribute of `R.attr.fontPath`._
+_Note: You don't need to define `ColorographyConfig` but the library will apply
+no default font and use the default attribute of `R.attr.themeColor`._
 
 ### Inject into Context
 
@@ -63,7 +49,7 @@ Wrap the `Activity` Context:
 ```java
 @Override
 protected void attachBaseContext(Context newBase) {
-    super.attachBaseContext(CalligraphyContextWrapper.wrap(newBase));
+    super.attachBaseContext(ColorographyContextWrapper.wrap(newBase, themeColorProvider));
 }
 ```
 
@@ -79,109 +65,12 @@ _You're good to go!_
     android:text="@string/hello_world"
     android:layout_width="wrap_content"
     android:layout_height="wrap_content"
-    fontPath="fonts/Roboto-Bold.ttf"/>
+    themeColor="@color/colorAccent"/>
 ```
 
 _Note: Popular IDE's (Android Studio, IntelliJ) will likely mark this as an error despite being correct. You may want to add `tools:ignore="MissingPrefix"` to either the View itself or its parent ViewGroup to avoid this. You'll need to add the tools namespace to have access to this "ignore" attribute. `xmlns:tools="
 http://schemas.android.com/tools"`. See https://code.google.com/p/android/issues/detail?id=65176._
 
-### Custom font in TextAppearance
-
-
-```xml
-<style name="TextAppearance.FontPath" parent="android:TextAppearance">
-    <!-- Custom Attr-->
-    <item name="fontPath">fonts/RobotoCondensed-Regular.ttf</item>
-</style>
-```
-
-```xml
-<TextView
-    android:text="@string/hello_world"
-    android:layout_width="wrap_content"
-    android:layout_height="wrap_content"
-    android:textAppearance="@style/TextAppearance.FontPath"/>
-
-```
-
-### Custom font in Styles
-
-
-```xml
-<style name="TextViewCustomFont">
-    <item name="fontPath">fonts/RobotoCondensed-Regular.ttf</item>
-</style>
-```
-
-### Custom font defined in Theme
-
-```xml
-<style name="AppTheme" parent="android:Theme.Holo.Light.DarkActionBar">
-    <item name="android:textViewStyle">@style/AppTheme.Widget.TextView</item>
-</style>
-
-<style name="AppTheme.Widget"/>
-
-<style name="AppTheme.Widget.TextView" parent="android:Widget.Holo.Light.TextView">
-    <item name="fontPath">fonts/Roboto-ThinItalic.ttf</item>
-</style>
-```
-
-
-# FAQ
-
-### Font Resolution 
-
-The `CalligraphyFactory` looks for the font in a pretty specific order, for the _most part_ it's
- very similar to how the Android framework resolves attributes.
- 
-1. `View` xml - attr defined here will always take priority.
-2. `Style` xml - attr defined here is checked next.
-3. `TextAppearance` xml - attr is checked next, the only caveat to this is **IF** you have a font 
- defined in the `Style` and a `TextAttribute` defined in the `View` the `Style` attribute is picked first!
-4. `Theme` - if defined this is used.
-5. `Default` - if defined in the `CalligraphyConfig` this is used of none of the above are found 
-**OR** if one of the above returns an invalid font. 
-
-### Why *not* piggyback off of fontFamily attribute?
-
-We originally did, but it conflicted with users wanting to actually use that attribute, you now 
-have to define a custom attribute.
-
-### Why no jar?
-
-We needed to ship a custom ID with Calligraphy to improve the Font Injection flow. This
-unfortunately means that is has to be an `aar`. But you're using Gradle now anyway right?
-
-### Multiple Typeface's per TextView / Spannables
-
-It is possible to use multiple Typefaces inside a `TextView`, this isn't new concept to Android.
-
-This _could_ be achieved using something like the following code.
-
-```java
-SpannableStringBuilder sBuilder = new SpannableStringBuilder();
-sBuilder.append("Hello!") // Bold this
-        .append("I use Calligraphy"); // Default TextView font.
-// Create the Typeface you want to apply to certain text
-CalligraphyTypefaceSpan typefaceSpan = new CalligraphyTypefaceSpan(TypefaceUtils.load(getAssets(), "fonts/Roboto-Bold.ttf"));
-// Apply typeface to the Spannable 0 - 6 "Hello!" This can of course by dynamic.
-sBuilder.setSpan(typefaceSpan, 0, 6, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-setText(sBuilder, TextView.BufferType.SPANNABLE);
-```
-Of course this is just an example. Your mileage may vary.
-
-### Exceptions / Pitfalls
-
-To our knowledge (try: `grep -r -e "void set[^(]*(Typeface " <android source dir>`) there are two standard Android widgets that have multiple methods to set typefaces. They are:
-
- - android.support.v7.widget.SwitchCompat
- - android.widget.Switch
-
-Both have a method called `setSwitchTypeface` that sets the typeface within the switch (e.g. on/off, yes/no). `SetTypeface` sets the typeface of the label. You will need to create your own subclass that overrides `setTypeface` and calls both `super.setTypeface` and `super.setSwitchTypeface`.
-
-
-
 
 
 # Collaborators
@@ -203,6 +92,7 @@ If you feel this should be possible to do, please star [this issue](https://code
 # Licence
 
     Copyright 2013 Christopher Jenkins
+    Copyright 2017 52inc
     
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
@@ -215,5 +105,3 @@ If you feel this should be possible to do, please star [this issue](https://code
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-
-[![Badge](http://www.libtastic.com/static/osbadges/79.png)](http://www.libtastic.com/technology/79/)
