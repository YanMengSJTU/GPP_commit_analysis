diff --git a/README.md b/README.md
index 8295323..5fb2e5c 100644
--- a/README.md
+++ b/README.md
@@ -39,11 +39,25 @@ Define your default font using `CalligraphyConfig`, in your `Application` class
 @Override
 public void onCreate() {
     super.onCreate();
+
+    // Customize each text style font separately
     CalligraphyConfig.initDefault(new CalligraphyConfig.Builder()
                             .setDefaultFontPath("fonts/Roboto-RobotoRegular.ttf")
+                            .setDefaultBoldFontPath("fonts/Roboto-RobotoBold.ttf")
+                            .setDefaultItalicFontPath("fonts/Roboto-RobotoItalic.ttf")
+                            .setDefaultBoldItalicFontPath("fonts/Roboto-RobotoBoldItalic.ttf")
                             .setFontAttrId(R.attr.fontPath)
                             .build()
             );
+
+    // Set the inherent default font path to look up Regular, Bold, Italic, and Bold-Italic fonts stored in your assets folder
+    // NOTE: This string will be formatted to lookup each font style. If one of the styles is not found, the default (Regular) will be used
+    CalligraphyConfig.initDefault(new CalligraphyConfig.Builder()
+                            .setInherentDefaultFontPaths("fonts/Roboto-%s.ttf")
+                            .setFontAttrId(R.attr.fontPath)
+                            .build()
+            );
+
     //....
 }
 ```
@@ -70,11 +84,22 @@ _You're good to go!_
 ### Custom font per TextView
 
 ```xml
+<!-- Specify the font path type for regular, bold, italic, and bold-italic, one will be used based on the textStyle applied -->
 <TextView
     android:text="@string/hello_world"
     android:layout_width="wrap_content"
     android:layout_height="wrap_content"
-    fontPath="fonts/Roboto-Bold.ttf"/>
+    fontPath="fonts/Roboto-Regular.ttf"
+    boldFontPath="fonts/Roboto-Bold.ttf"
+    italicFontPath="fonts/Roboto-Italic.ttf"
+    boldItalicFontPath="fonts/Roboto-Bold-Italic.ttf"/>
+
+<!-- If you specify an inherent font path, just using the fontPath attr will suffice -->
+<TextView
+    android:text="@string/hello_world"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    fontPath="fonts/Roboto-%s.ttf"/>
 ```
 
 _Note: Popular IDE's (Android Studio, IntelliJ) will likely mark this as an error despite being correct. You may want to add `tools:ignore="MissingPrefix"` to either the View itself or its parent ViewGroup to avoid this. You'll need to add the tools namespace to have access to this "ignore" attribute. `xmlns:tools="
@@ -84,9 +109,19 @@ http://schemas.android.com/tools"`. See https://code.google.com/p/android/issues
 
 
 ```xml
+<!-- Specify the font path type for regular, bold, italic, and bold-italic, these will be applied based on the textStyle -->
 <style name="TextAppearance.FontPath" parent="android:TextAppearance">
     <!-- Custom Attr-->
     <item name="fontPath">fonts/RobotoCondensed-Regular.ttf</item>
+    <item name="boldFontPath">fonts/RobotoCondensed-Bold.ttf</item>
+    <item name="italicFontPath">fonts/RobotoCondensed-Italic.ttf</item>
+    <item name="boldItalicFontPath">fonts/RobotoCondensed-Bold-Italic.ttf</item>
+</style>
+
+<!-- If you specify an inherent font path, just using the fontPath attr will suffice -->
+<style name="TextAppearance.FontPath" parent="android:TextAppearance">
+    <!-- Custom Attr-->
+    <item name="fontPath">fonts/RobotoCondensed-%s.ttf</item>
 </style>
 ```
 
@@ -103,8 +138,17 @@ http://schemas.android.com/tools"`. See https://code.google.com/p/android/issues
 
 
 ```xml
+<!-- Specify the font path type for regular, bold, italic, and bold-italic, these will be applied based on the textStyle -->
 <style name="TextViewCustomFont">
     <item name="fontPath">fonts/RobotoCondensed-Regular.ttf</item>
+    <item name="boldFontPath">fonts/RobotoCondensed-Bold.ttf</item>
+    <item name="italicFontPath">fonts/RobotoCondensed-Italic.ttf</item>
+    <item name="boldItalicFontPath">fonts/RobotoCondensed-Bold-Italic.ttf</item>
+</style>
+
+<!-- If you specify an inherent font path, just using the fontPath attr will suffice -->
+<style name="TextViewCustomFont">
+    <item name="fontPath">fonts/RobotoCondensed-%s.ttf</item>
 </style>
 ```
 
@@ -117,8 +161,17 @@ http://schemas.android.com/tools"`. See https://code.google.com/p/android/issues
 
 <style name="AppTheme.Widget"/>
 
+<!-- Specify the font path type for regular, bold, italic, and bold-italic, these will be applied based on the textStyle -->
 <style name="AppTheme.Widget.TextView" parent="android:Widget.Holo.Light.TextView">
     <item name="fontPath">fonts/Roboto-ThinItalic.ttf</item>
+    <item name="boldFontPath">fonts/Roboto-Bold.ttf</item>
+    <item name="italicFontPath">fonts/Roboto-Italic.ttf</item>
+    <item name="boldItalicFontPath">fonts/Roboto-Bold-Italic.ttf</item>
+</style>
+
+<!-- If you specify an inherent font path, just using the fontPath attr will suffice -->
+<style name="TextViewCustomFont">
+    <item name="fontPath">fonts/Roboto-%s.ttf</item>
 </style>
 ```
 
@@ -136,7 +189,17 @@ The `CalligraphyFactory` looks for the font in a pretty specific order, for the
  defined in the `Style` and a `TextAttribute` defined in the `View` the `Style` attribute is picked first!
 4. `Theme` - if defined this is used.
 5. `Default` - if defined in the `CalligraphyConfig` this is used of none of the above are found 
-**OR** if one of the above returns an invalid font. 
+**OR** if one of the above returns an invalid font.
+
+When specifying an inherent font path, we lookup each font based on these values
+```java
+    // If we fail to find one of the fonts, we will either default to the Regular font supplied (i.e. "fonts/font-Regular.ttf")
+    // or the default system font if there is no Regular
+    String.format("fonts/font-%s.ttf", "Regular");
+    String.format("fonts/font-%s.ttf", "Bold");
+    String.format("fonts/font-%s.ttf", "Italic");
+    String.format("fonts/font-%s.ttf", "Bold-Italic");
+```
 
 ### Why *not* piggyback off of fontFamily attribute?
 
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java
index c22148a..b71f058 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java
@@ -1,5 +1,7 @@
 package uk.co.chrisjenx.calligraphy;
 
+import android.content.Context;
+import android.graphics.Typeface;
 import android.os.Build;
 import android.text.TextUtils;
 import android.widget.AutoCompleteTextView;
@@ -70,10 +72,34 @@ public static CalligraphyConfig get() {
      * The default Font Path if nothing else is setup.
      */
     private final String mFontPath;
+    /**
+     * The default Bold Font Path if nothing else is setup.
+     */
+    private final String mBoldFontPath;
+    /**
+     * The default Italic Font Path if nothing else is setup.
+     */
+    private final String mItalicFontPath;
+    /**
+     * The default Bold Italic Font Path if nothing else is setup.
+     */
+    private final String mBoldItalicFontPath;
     /**
      * Default Font Path Attr Id to lookup
      */
     private final int mAttrId;
+    /**
+     * Default Bold Font Path Attr Id to lookup
+     */
+    private final int mBoldAttrId;
+    /**
+     * Default Italic Font Path Attr Id to lookup
+     */
+    private final int mItalicAttrId;
+    /**
+     * Default Bold Italic Font Path Attr Id to lookup
+     */
+    private final int mBoldItalicAttrId;
     /**
      * Use Reflection to inject the private factory.
      */
@@ -90,7 +116,13 @@ public static CalligraphyConfig get() {
     protected CalligraphyConfig(Builder builder) {
         mIsFontSet = builder.isFontSet;
         mFontPath = builder.fontAssetPath;
+        mBoldFontPath = builder.boldFontAssetPath;
+        mItalicFontPath = builder.italicFontAssetPath;
+        mBoldItalicFontPath = builder.boldItalicFontAssetPath;
         mAttrId = builder.attrId;
+        mBoldAttrId = builder.boldAttrId;
+        mItalicAttrId = builder.italicAttrId;
+        mBoldItalicAttrId = builder.boldItalicAttrId;
         mReflection = builder.reflection;
         mCustomViewCreation = builder.customViewCreation;
         final Map<Class<? extends TextView>, Integer> tempMap = new HashMap<>(DEFAULT_STYLES);
@@ -105,6 +137,27 @@ public String getFontPath() {
         return mFontPath;
     }
 
+    /**
+     * @return mBoldFontPath for text views might be null
+     */
+    public String getBoldFontPath() {
+        return mBoldFontPath;
+    }
+
+    /**
+     * @return mItalicFontPath for text views might be null
+     */
+    public String getItalicFontPath() {
+        return mItalicFontPath;
+    }
+
+    /**
+     * @return mBoldItalicFontPath for text views might be null
+     */
+    public String getBoldItalicFontPath() {
+        return mBoldItalicFontPath;
+    }
+
     /**
      * @return true if set, false if null|empty
      */
@@ -131,6 +184,27 @@ public int getAttrId() {
         return mAttrId;
     }
 
+    /**
+     * @return the custom boldAttrId to look for, -1 if not set.
+     */
+    public int getBoldAttrId() {
+        return mBoldAttrId;
+    }
+
+    /**
+     * @return the custom italicAttrId to look for, -1 if not set.
+     */
+    public int getItalicAttrId() {
+        return mItalicAttrId;
+    }
+
+    /**
+     * @return the custom boldItalicAttrId to look for, -1 if not set.
+     */
+    public int getBoldItalicAttrId() {
+        return mBoldItalicAttrId;
+    }
+
     public static class Builder {
         /**
          * Default AttrID if not set.
@@ -148,6 +222,18 @@ public int getAttrId() {
          * The fontAttrId to look up the font path from.
          */
         private int attrId = R.attr.fontPath;
+        /**
+         * The boldFontPath to look up the font path from.
+         */
+        private int boldAttrId = R.attr.boldFontPath;
+        /**
+         * The italicFontPath to look up the font path from.
+         */
+        private int italicAttrId = R.attr.italicFontPath;
+        /**
+         * The boldItalicFontPath to look up the font path from.
+         */
+        private int boldItalicAttrId = R.attr.boldItalicFontPath;
         /**
          * Has the user set the default font path.
          */
@@ -156,6 +242,18 @@ public int getAttrId() {
          * The default fontPath
          */
         private String fontAssetPath = null;
+        /**
+         * The default bold fontPath
+         */
+        private String boldFontAssetPath = null;
+        /**
+         * The default italic fontPath
+         */
+        private String italicFontAssetPath = null;
+        /**
+         * The default bold italic fontPath
+         */
+        private String boldItalicFontAssetPath = null;
         /**
          * Additional Class Styles. Can be empty.
          */
@@ -172,6 +270,80 @@ public Builder setFontAttrId(int fontAssetAttrId) {
             return this;
         }
 
+        /**
+         * This defaults to R.attr.boldFontPath. So only override if you want to use your own attrId.
+         *
+         * @param fontAssetAttrId the custom attribute to look for fonts in assets.
+         * @return this builder.
+         */
+        public Builder setBoldFontAttrId(int fontAssetAttrId) {
+            this.boldAttrId = fontAssetAttrId != INVALID_ATTR_ID ? fontAssetAttrId : INVALID_ATTR_ID;
+            return this;
+        }
+
+        /**
+         * This defaults to R.attr.italicFontPath. So only override if you want to use your own attrId.
+         *
+         * @param fontAssetAttrId the custom attribute to look for fonts in assets.
+         * @return this builder.
+         */
+        public Builder setItalicFontAttrId(int fontAssetAttrId) {
+            this.italicAttrId = fontAssetAttrId != INVALID_ATTR_ID ? fontAssetAttrId : INVALID_ATTR_ID;
+            return this;
+        }
+
+        /**
+         * This defaults to R.attr.boldItalicFontPath. So only override if you want to use your own attrId.
+         *
+         * @param fontAssetAttrId the custom attribute to look for fonts in assets.
+         * @return this builder.
+         */
+        public Builder setBoldItalicFontAttrId(int fontAssetAttrId) {
+            this.boldItalicAttrId = fontAssetAttrId != INVALID_ATTR_ID ? fontAssetAttrId : INVALID_ATTR_ID;
+            return this;
+        }
+
+        /**
+         * Set the default font if you don't define one else where in your styles.
+         *
+         * @param defaultFontAssetPath an inherent path to a font family in the assets folder, e.g. "fonts/Roboto-%s.ttf",
+         *                             passing null will default to the device font-family. This will dynamically apply
+         *                             regular, bold, and italic (if available in the assets folder).
+         *                             E.g. "fonts/Roboto-%s.ttf" -> "fonts/Roboto-Regular.ttf", "fonts/Roboto-Bold.ttf", "fonts/Roboto-Italic.ttf"
+         * @return this builder.
+         */
+        public Builder setInherentDefaultFontPaths(Context context, String defaultFontAssetPath) {
+            if (!CalligraphyUtils.isInherentFontPath(defaultFontAssetPath)) {
+                throw new IllegalStateException("You must pass a font path that may be formatted. e.g. fonts/font-%s.ttf");
+            }
+
+            try {
+                Typeface.createFromAsset(context.getAssets(), CalligraphyUtils.pullFontPathFromInherentFontPath(defaultFontAssetPath, CalligraphyUtils.FONT_REGULAR));
+                setDefaultFontPath(CalligraphyUtils.pullFontPathFromInherentFontPath(defaultFontAssetPath, CalligraphyUtils.FONT_REGULAR));
+            } catch (Throwable t) {
+                // error setting regular font path
+            }
+            try {
+                Typeface.createFromAsset(context.getAssets(), CalligraphyUtils.pullFontPathFromInherentFontPath(defaultFontAssetPath, CalligraphyUtils.FONT_BOLD));
+                setDefaultBoldFontPath(CalligraphyUtils.pullFontPathFromInherentFontPath(defaultFontAssetPath, CalligraphyUtils.FONT_BOLD));
+            } catch (Throwable t) {
+                // error setting bold font path
+            }
+            try {
+                Typeface.createFromAsset(context.getAssets(), CalligraphyUtils.pullFontPathFromInherentFontPath(defaultFontAssetPath, CalligraphyUtils.FONT_ITALIC));
+                setDefaultItalicFontPath(CalligraphyUtils.pullFontPathFromInherentFontPath(defaultFontAssetPath, CalligraphyUtils.FONT_ITALIC));
+            } catch (Throwable t) {
+                // error setting italic font path
+            }
+            try {
+                Typeface.createFromAsset(context.getAssets(), CalligraphyUtils.pullFontPathFromInherentFontPath(defaultFontAssetPath, CalligraphyUtils.FONT_BOLD_ITALIC));
+                setDefaultBoldItalicFontPath(CalligraphyUtils.pullFontPathFromInherentFontPath(defaultFontAssetPath, CalligraphyUtils.FONT_BOLD_ITALIC));
+            } catch (Throwable t) {
+                // error setting italic font path
+            }
+            return this;
+        }
+
         /**
          * Set the default font if you don't define one else where in your styles.
          *
@@ -185,6 +357,45 @@ public Builder setDefaultFontPath(String defaultFontAssetPath) {
             return this;
         }
 
+        /**
+         * Set the default bold font if you don't define one else where in your styles.
+         *
+         * @param defaultFontAssetPath a path to a font file in the assets folder, e.g. "fonts/Roboto-light.ttf",
+         *                             passing null will default to the device font-family.
+         * @return this builder.
+         */
+        public Builder setDefaultBoldFontPath(String defaultFontAssetPath) {
+            this.isFontSet = !TextUtils.isEmpty(defaultFontAssetPath);
+            this.boldFontAssetPath = defaultFontAssetPath;
+            return this;
+        }
+
+        /**
+         * Set the default italic font if you don't define one else where in your styles.
+         *
+         * @param defaultFontAssetPath a path to a font file in the assets folder, e.g. "fonts/Roboto-light.ttf",
+         *                             passing null will default to the device font-family.
+         * @return this builder.
+         */
+        public Builder setDefaultItalicFontPath(String defaultFontAssetPath) {
+            this.isFontSet = !TextUtils.isEmpty(defaultFontAssetPath);
+            this.italicFontAssetPath = defaultFontAssetPath;
+            return this;
+        }
+
+        /**
+         * Set the default bold italic font if you don't define one else where in your styles.
+         *
+         * @param defaultFontAssetPath a path to a font file in the assets folder, e.g. "fonts/Roboto-light.ttf",
+         *                             passing null will default to the device font-family.
+         * @return this builder.
+         */
+        public Builder setDefaultBoldItalicFontPath(String defaultFontAssetPath) {
+            this.isFontSet = !TextUtils.isEmpty(defaultFontAssetPath);
+            this.boldItalicFontAssetPath = defaultFontAssetPath;
+            return this;
+        }
+
         /**
          * <p>Turn of the use of Reflection to inject the private factory.
          * This has operational consequences! Please read and understand before disabling.
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java
index 8650208..6b2c140 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java
@@ -16,6 +16,8 @@
     private CalligraphyLayoutInflater mInflater;
 
     private final int mAttributeId;
+    private final int mBoldAttributeId;
+    private final int mItalicAttributeId;
 
     /**
      * Uses the default configuration from {@link uk.co.chrisjenx.calligraphy.CalligraphyConfig}
@@ -84,6 +86,8 @@ static CalligraphyActivityFactory get(Activity activity) {
     CalligraphyContextWrapper(Context base) {
         super(base);
         mAttributeId = CalligraphyConfig.get().getAttrId();
+        mBoldAttributeId = CalligraphyConfig.get().getBoldAttrId();
+        mItalicAttributeId = CalligraphyConfig.get().getItalicAttrId();
     }
 
     /**
@@ -99,16 +103,18 @@ static CalligraphyActivityFactory get(Activity activity) {
      * @deprecated use {@link #wrap(android.content.Context)}
      */
     @Deprecated
-    public CalligraphyContextWrapper(Context base, int attributeId) {
+    public CalligraphyContextWrapper(Context base, int attributeId, int boldAttributeId, int italicAttributeId) {
         super(base);
         mAttributeId = attributeId;
+        mBoldAttributeId = boldAttributeId;
+        mItalicAttributeId = italicAttributeId;
     }
 
     @Override
     public Object getSystemService(String name) {
         if (LAYOUT_INFLATER_SERVICE.equals(name)) {
             if (mInflater == null) {
-                mInflater = new CalligraphyLayoutInflater(LayoutInflater.from(getBaseContext()), this, mAttributeId, false);
+                mInflater = new CalligraphyLayoutInflater(LayoutInflater.from(getBaseContext()), this, mAttributeId, mBoldAttributeId, mItalicAttributeId, false);
             }
             return mInflater;
         }
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
index ca45b62..efc301f 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
@@ -3,6 +3,7 @@
 import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.content.Context;
+import android.graphics.Typeface;
 import android.os.Build;
 import android.text.TextUtils;
 import android.util.AttributeSet;
@@ -16,6 +17,11 @@
     private static final String ACTION_BAR_TITLE = "action_bar_title";
     private static final String ACTION_BAR_SUBTITLE = "action_bar_subtitle";
 
+    /**
+     * Default AttrID if not set.
+     */
+    public static final int INVALID_ATTR_ID = -1;
+
     /**
      * Some styles are in sub styles, such as actionBarTextStyle etc..
      *
@@ -91,9 +97,13 @@ protected static boolean matchesResourceIdName(View view, String matches) {
     }
 
     private final int mAttributeId;
+    private final int mBoldAttributeId;
+    private final int mItalicAttributeId;
 
-    public CalligraphyFactory(int attributeId) {
+    public CalligraphyFactory(int attributeId, int boldAttributeId, int italicAttributeId) {
         this.mAttributeId = attributeId;
+        this.mBoldAttributeId = boldAttributeId;
+        this.mItalicAttributeId = italicAttributeId;
     }
 
     /**
@@ -125,25 +135,61 @@ void onViewCreatedInternal(View view, final Context context, AttributeSet attrs)
             // Since we're not using namespace it's a little bit tricky
 
             // Try view xml attributes
-            String textViewFont = CalligraphyUtils.pullFontPathFromView(context, attrs, mAttributeId);
+            String textViewFont;
+            if (((TextView) view).getTypeface().getStyle() == Typeface.BOLD && mBoldAttributeId != INVALID_ATTR_ID) {
+                textViewFont = CalligraphyUtils.pullFontPathFromView(context, attrs, mBoldAttributeId);
+            } else if (((TextView) view).getTypeface().getStyle() == Typeface.ITALIC && mItalicAttributeId != INVALID_ATTR_ID) {
+                textViewFont = CalligraphyUtils.pullFontPathFromView(context, attrs, mItalicAttributeId);
+            } else {
+                textViewFont = CalligraphyUtils.pullFontPathFromView(context, attrs, mAttributeId);
+            }
 
             // Try view style attributes
             if (TextUtils.isEmpty(textViewFont)) {
-                textViewFont = CalligraphyUtils.pullFontPathFromStyle(context, attrs, mAttributeId);
+                if (((TextView) view).getTypeface().getStyle() == Typeface.BOLD && mBoldAttributeId != INVALID_ATTR_ID) {
+                    textViewFont = CalligraphyUtils.pullFontPathFromStyle(context, attrs, mBoldAttributeId);
+                } else if (((TextView) view).getTypeface().getStyle() == Typeface.ITALIC && mItalicAttributeId != INVALID_ATTR_ID) {
+                    textViewFont = CalligraphyUtils.pullFontPathFromStyle(context, attrs, mItalicAttributeId);
+                } else {
+                    textViewFont = CalligraphyUtils.pullFontPathFromStyle(context, attrs, mAttributeId);
+                }
             }
 
             // Try View TextAppearance
             if (TextUtils.isEmpty(textViewFont)) {
-                textViewFont = CalligraphyUtils.pullFontPathFromTextAppearance(context, attrs, mAttributeId);
+                if (((TextView) view).getTypeface().getStyle() == Typeface.BOLD && mBoldAttributeId != INVALID_ATTR_ID) {
+                    textViewFont = CalligraphyUtils.pullFontPathFromTextAppearance(context, attrs, mBoldAttributeId);
+                } else if (((TextView) view).getTypeface().getStyle() == Typeface.ITALIC && mItalicAttributeId != INVALID_ATTR_ID) {
+                    textViewFont = CalligraphyUtils.pullFontPathFromTextAppearance(context, attrs, mItalicAttributeId);
+                } else {
+                    textViewFont = CalligraphyUtils.pullFontPathFromTextAppearance(context, attrs, mAttributeId);
+                }
             }
 
             // Try theme attributes
             if (TextUtils.isEmpty(textViewFont)) {
-                final int[] styleForTextView = getStyleForTextView((TextView) view);
-                if (styleForTextView[1] != -1)
-                    textViewFont = CalligraphyUtils.pullFontPathFromTheme(context, styleForTextView[0], styleForTextView[1], mAttributeId);
-                else
-                    textViewFont = CalligraphyUtils.pullFontPathFromTheme(context, styleForTextView[0], mAttributeId);
+                if (((TextView) view).getTypeface().getStyle() == Typeface.BOLD && mBoldAttributeId != INVALID_ATTR_ID) {
+                    final int[] styleForTextView = getStyleForTextView((TextView) view);
+                    if (styleForTextView[1] != -1) {
+                        textViewFont = CalligraphyUtils.pullFontPathFromTheme(context, styleForTextView[0], styleForTextView[1], mBoldAttributeId);
+                    } else {
+                        textViewFont = CalligraphyUtils.pullFontPathFromTheme(context, styleForTextView[0], mBoldAttributeId);
+                    }
+                } else if (((TextView) view).getTypeface().getStyle() == Typeface.ITALIC && mItalicAttributeId != INVALID_ATTR_ID) {
+                    final int[] styleForTextView = getStyleForTextView((TextView) view);
+                    if (styleForTextView[1] != -1) {
+                        textViewFont = CalligraphyUtils.pullFontPathFromTheme(context, styleForTextView[0], styleForTextView[1], mItalicAttributeId);
+                    } else {
+                        textViewFont = CalligraphyUtils.pullFontPathFromTheme(context, styleForTextView[0], mItalicAttributeId);
+                    }
+                } else {
+                    final int[] styleForTextView = getStyleForTextView((TextView) view);
+                    if (styleForTextView[1] != -1) {
+                        textViewFont = CalligraphyUtils.pullFontPathFromTheme(context, styleForTextView[0], styleForTextView[1], mAttributeId);
+                    } else {
+                        textViewFont = CalligraphyUtils.pullFontPathFromTheme(context, styleForTextView[0], mAttributeId);
+                    }
+                }
             }
 
             // Still need to defer the Native action bar, appcompat-v7:21+ uses the Toolbar underneath. But won't match these anyway.
@@ -179,6 +225,4 @@ public void onGlobalLayout() {
             });
         }
     }
-
-
-}
+}
\ No newline at end of file
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
index 6f9cfc1..8ef3b80 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
@@ -25,28 +25,34 @@
     };
 
     private final int mAttributeId;
+    private final int mBoldAttributeId;
+    private final int mItalicAttributeId;
     private final CalligraphyFactory mCalligraphyFactory;
     // Reflection Hax
     private boolean mSetPrivateFactory = false;
     private Field mConstructorArgs = null;
 
-    protected CalligraphyLayoutInflater(Context context, int attributeId) {
+    protected CalligraphyLayoutInflater(Context context, int attributeId, int boldAttributeId, int italicAttributeId) {
         super(context);
         mAttributeId = attributeId;
-        mCalligraphyFactory = new CalligraphyFactory(attributeId);
+        mBoldAttributeId = boldAttributeId;
+        mItalicAttributeId = italicAttributeId;
+        mCalligraphyFactory = new CalligraphyFactory(attributeId, boldAttributeId, italicAttributeId);
         setUpLayoutFactories(false);
     }
 
-    protected CalligraphyLayoutInflater(LayoutInflater original, Context newContext, int attributeId, final boolean cloned) {
+    protected CalligraphyLayoutInflater(LayoutInflater original, Context newContext, int attributeId, int boldAttributeId, int italicAttributeId, final boolean cloned) {
         super(original, newContext);
         mAttributeId = attributeId;
-        mCalligraphyFactory = new CalligraphyFactory(attributeId);
+        mBoldAttributeId = boldAttributeId;
+        mItalicAttributeId = italicAttributeId;
+        mCalligraphyFactory = new CalligraphyFactory(attributeId, boldAttributeId, italicAttributeId);
         setUpLayoutFactories(cloned);
     }
 
     @Override
     public LayoutInflater cloneInContext(Context newContext) {
-        return new CalligraphyLayoutInflater(this, newContext, mAttributeId, true);
+        return new CalligraphyLayoutInflater(this, newContext, mAttributeId, mBoldAttributeId, mItalicAttributeId, true);
     }
 
     // ===
diff --git a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
index 11737bf..0eaae3b 100644
--- a/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
+++ b/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
@@ -22,6 +22,11 @@
  */
 public final class CalligraphyUtils {
 
+    public static final String FONT_REGULAR = "Regular";
+    public static final String FONT_BOLD = "Bold";
+    public static final String FONT_ITALIC = "Italic";
+    public static final String FONT_BOLD_ITALIC = "Bold-Italic";
+
     /**
      * Applies a custom typeface span to the text.
      *
@@ -120,7 +125,18 @@ static void applyFontToTextView(final Context context, final TextView textView,
     static void applyFontToTextView(final Context context, final TextView textView, final CalligraphyConfig config, boolean deferred) {
         if (context == null || textView == null || config == null) return;
         if (!config.isFontSet()) return;
-        applyFontToTextView(context, textView, config.getFontPath(), deferred);
+        String fontPath;
+        if ((textView.getTypeface().getStyle() == Typeface.BOLD_ITALIC || ((textView.getTypeface().getStyle() & Typeface.BOLD) != 0 && (textView.getTypeface().getStyle() & Typeface.ITALIC) != 0))
+                && config.getBoldItalicFontPath() != null) {
+            fontPath = config.getItalicFontPath();
+        } else if (textView.getTypeface().getStyle() == Typeface.BOLD && config.getBoldFontPath() != null) {
+            fontPath = config.getBoldFontPath();
+        } else if (textView.getTypeface().getStyle() == Typeface.ITALIC && config.getItalicFontPath() != null) {
+            fontPath = config.getItalicFontPath();
+        } else {
+            fontPath = config.getFontPath();
+        }
+        applyFontToTextView(context, textView, fontPath, deferred);
     }
 
     /**
@@ -138,7 +154,55 @@ public static void applyFontToTextView(final Context context, final TextView tex
 
     static void applyFontToTextView(final Context context, final TextView textView, final CalligraphyConfig config, final String textViewFont, boolean deferred) {
         if (context == null || textView == null || config == null) return;
-        if (!TextUtils.isEmpty(textViewFont) && applyFontToTextView(context, textView, textViewFont, deferred)) {
+        if (!TextUtils.isEmpty(textViewFont)) {
+            if (isInherentFontPath(textViewFont)) {
+                if (textView.getTypeface().getStyle() == Typeface.BOLD_ITALIC || ((textView.getTypeface().getStyle() & Typeface.BOLD) != 0 && (textView.getTypeface().getStyle() & Typeface.ITALIC) != 0)) {
+                    try {
+                        Typeface.createFromAsset(context.getAssets(), pullFontPathFromInherentFontPath(textViewFont, FONT_BOLD_ITALIC));
+                        applyFontToTextView(context, textView, pullFontPathFromInherentFontPath(textViewFont, FONT_BOLD_ITALIC), deferred);
+                    } catch (Throwable t) {
+                        try {
+                            Typeface.createFromAsset(context.getAssets(), pullFontPathFromInherentFontPath(textViewFont, FONT_REGULAR));
+                            applyFontToTextView(context, textView, pullFontPathFromInherentFontPath(textViewFont, FONT_REGULAR), deferred);
+                        } catch (Throwable t2) {
+                            applyFontToTextView(context, textView, config, deferred);
+                        }
+                    }
+                } else if (textView.getTypeface().getStyle() == Typeface.BOLD) {
+                    try {
+                        Typeface.createFromAsset(context.getAssets(), pullFontPathFromInherentFontPath(textViewFont, FONT_BOLD));
+                        applyFontToTextView(context, textView, pullFontPathFromInherentFontPath(textViewFont, FONT_BOLD), deferred);
+                    } catch (Throwable t) {
+                        try {
+                            Typeface.createFromAsset(context.getAssets(), pullFontPathFromInherentFontPath(textViewFont, FONT_REGULAR));
+                            applyFontToTextView(context, textView, pullFontPathFromInherentFontPath(textViewFont, FONT_REGULAR), deferred);
+                        } catch (Throwable t2) {
+                            applyFontToTextView(context, textView, config, deferred);
+                        }
+                    }
+                } else if (textView.getTypeface().getStyle() == Typeface.ITALIC) {
+                    try {
+                        Typeface.createFromAsset(context.getAssets(), pullFontPathFromInherentFontPath(textViewFont, FONT_ITALIC));
+                        applyFontToTextView(context, textView, pullFontPathFromInherentFontPath(textViewFont, FONT_ITALIC), deferred);
+                    } catch (Throwable t) {
+                        try {
+                            Typeface.createFromAsset(context.getAssets(), pullFontPathFromInherentFontPath(textViewFont, FONT_REGULAR));
+                            applyFontToTextView(context, textView, pullFontPathFromInherentFontPath(textViewFont, FONT_REGULAR), deferred);
+                        } catch (Throwable t2) {
+                            applyFontToTextView(context, textView, config, deferred);
+                        }
+                    }
+                } else {
+                    try {
+                        Typeface.createFromAsset(context.getAssets(), pullFontPathFromInherentFontPath(textViewFont, FONT_REGULAR));
+                        applyFontToTextView(context, textView, pullFontPathFromInherentFontPath(textViewFont, FONT_REGULAR), deferred);
+                    } catch (Throwable t) {
+                        applyFontToTextView(context, textView, config, deferred);
+                    }
+                }
+            } else {
+                applyFontToTextView(context, textView, textViewFont, deferred);
+            }
             return;
         }
         applyFontToTextView(context, textView, config, deferred);
@@ -310,6 +374,14 @@ static String pullFontPathFromTheme(Context context, int styleAttrId, int subSty
         return null;
     }
 
+    public static String pullFontPathFromInherentFontPath(String fontPath, String fontType) {
+        return String.format(fontPath, fontType);
+    }
+
+    public static boolean isInherentFontPath(String fontPath) {
+        return fontPath.contains("%s");
+    }
+
     private static Boolean sToolbarCheck = null;
 
     /**
diff --git a/calligraphy/src/main/res/values/attrs.xml b/calligraphy/src/main/res/values/attrs.xml
index 02c6672..5ca5fa6 100644
--- a/calligraphy/src/main/res/values/attrs.xml
+++ b/calligraphy/src/main/res/values/attrs.xml
@@ -1,4 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
     <attr name="fontPath" format="string"/>
+    <attr name="boldFontPath" format="string"/>
+    <attr name="italicFontPath" format="string"/>
+    <attr name="boldItalicFontPath" format="string"/>
 </resources>
\ No newline at end of file
diff --git a/releases/calligraphy-release.aar b/releases/calligraphy-release.aar
new file mode 100644
index 0000000..a1140cc
Binary files /dev/null and b/releases/calligraphy-release.aar differ
