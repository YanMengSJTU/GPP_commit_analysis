diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/test2/Contact.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/test2/Contact.java
new file mode 100644
index 00000000..edcf6d8c
--- /dev/null
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/test2/Contact.java
@@ -0,0 +1,24 @@
+package de.greenrobot.daogenerator.gentest.test2;
+
+import de.greenrobot.daogenerator.annotation.Entity;
+import de.greenrobot.daogenerator.annotation.NotNull;
+import de.greenrobot.daogenerator.annotation.Serialized;
+import de.greenrobot.daogenerator.annotation.ToOne;
+import java.security.PublicKey;
+import java.util.Date;
+
+@Entity(table = "Contact")
+public class Contact {
+  
+  @ToOne
+  User user;
+  
+  Date creationDate;
+  
+  @NotNull
+  String name;
+  
+  @Serialized
+  PublicKey publicKey;
+  
+}
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/test2/Main.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/test2/Main.java
new file mode 100644
index 00000000..cffe1a75
--- /dev/null
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/test2/Main.java
@@ -0,0 +1,15 @@
+package de.greenrobot.daogenerator.gentest.test2;
+
+import de.greenrobot.daogenerator.DaoGenerator;
+import de.greenrobot.daogenerator.Schema;
+import de.greenrobot.daogenerator.SchemaGenerator;
+
+public class Main {
+
+  public static void main(String[] args) throws Exception {
+    SchemaGenerator schemaGenerator = new SchemaGenerator("src");
+    Schema schema = schemaGenerator.createSchema(1, "de.greenrobot.daoexample2");
+    new DaoGenerator().generateAll(schema, "src-gen");
+  }
+  
+}
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/test2/User.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/test2/User.java
new file mode 100644
index 00000000..b83db14d
--- /dev/null
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/test2/User.java
@@ -0,0 +1,29 @@
+package de.greenrobot.daogenerator.gentest.test2;
+
+import de.greenrobot.daogenerator.annotation.Entity;
+import de.greenrobot.daogenerator.annotation.NotNull;
+import de.greenrobot.daogenerator.annotation.Serialized;
+import de.greenrobot.daogenerator.annotation.ToMany;
+import java.security.PrivateKey;
+import java.security.PublicKey;
+import java.util.List;
+
+@Entity(table = "User")
+public class User {
+  
+  @NotNull
+  String name;
+  
+  @NotNull
+  int age;
+  
+  @Serialized
+  PublicKey publicKey;
+  
+  @Serialized
+  PrivateKey privateKey;
+  
+  @ToMany(relation = "user", orderedBy = "name")
+  List<Contact> contactsOrderedByName;
+  
+}
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/SchemaGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/SchemaGenerator.java
new file mode 100644
index 00000000..acd864b3
--- /dev/null
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/SchemaGenerator.java
@@ -0,0 +1,212 @@
+package de.greenrobot.daogenerator;
+
+import com.thoughtworks.qdox.JavaDocBuilder;
+import com.thoughtworks.qdox.model.AbstractBaseJavaEntity;
+import com.thoughtworks.qdox.model.Annotation;
+import com.thoughtworks.qdox.model.JavaClass;
+import com.thoughtworks.qdox.model.JavaField;
+import com.thoughtworks.qdox.model.JavaSource;
+import com.thoughtworks.qdox.model.Type;
+import de.greenrobot.daogenerator.annotation.Serialized;
+import de.greenrobot.daogenerator.annotation.ToOne;
+import de.greenrobot.daogenerator.annotation.ToMany;
+import java.io.File;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class SchemaGenerator {
+  
+  private String sourceDirectory;
+  private Map<String, PropertyType> javaTypeToPropertyType;
+  private Map<Type, Entity> typeToEntity = new HashMap<>();
+
+  public SchemaGenerator(String sourceDirectory) {
+    this.sourceDirectory = sourceDirectory;
+    
+    javaTypeToPropertyType = new HashMap<>();
+    javaTypeToPropertyType.put("boolean", PropertyType.Boolean);
+    javaTypeToPropertyType.put("Boolean", PropertyType.Boolean);
+    javaTypeToPropertyType.put("byte", PropertyType.Byte);
+    javaTypeToPropertyType.put("Byte", PropertyType.Byte);
+    javaTypeToPropertyType.put("short", PropertyType.Short);
+    javaTypeToPropertyType.put("Short", PropertyType.Short);
+    javaTypeToPropertyType.put("int", PropertyType.Int);
+    javaTypeToPropertyType.put("Integer", PropertyType.Int);
+    javaTypeToPropertyType.put("long", PropertyType.Long);
+    javaTypeToPropertyType.put("Long", PropertyType.Long);
+    javaTypeToPropertyType.put("float", PropertyType.Float);
+    javaTypeToPropertyType.put("Float", PropertyType.Float);
+    javaTypeToPropertyType.put("double", PropertyType.Double);
+    javaTypeToPropertyType.put("Double", PropertyType.Double);
+    javaTypeToPropertyType.put("byte[]", PropertyType.ByteArray);
+    javaTypeToPropertyType.put("Byte[]", PropertyType.ByteArray);
+    javaTypeToPropertyType.put("java.lang.String", PropertyType.String);
+    javaTypeToPropertyType.put("java.util.Date", PropertyType.Date);
+  }
+
+  public Schema createSchema(int version, String defaultJavaPackage) {
+    Schema schema = new Schema(version, defaultJavaPackage);
+    
+    // Look for the java files.
+    JavaDocBuilder builder = new JavaDocBuilder();
+    builder.addSourceTree(new File(sourceDirectory));
+    
+    // Creates the entities.
+    System.out.println("Creates the entities ...\n");
+    for (JavaSource javaSource : builder.getSources()) {
+      for (JavaClass javaClass : javaSource.getClasses()) {
+        Annotation entityAnnotation = getAnnotation(javaClass, de.greenrobot.daogenerator.annotation.Entity.class);
+        if (entityAnnotation != null) {
+          createEntity(schema, javaClass, entityAnnotation);
+        }
+      }
+    }
+    
+    // Links the entities 1.
+    System.out.println("Links the entities ...\n");
+    for (JavaSource javaSource : builder.getSources()) {
+      for (JavaClass javaClass : javaSource.getClasses()) {
+        Annotation entityAnnotation = getAnnotation(javaClass, de.greenrobot.daogenerator.annotation.Entity.class);
+        if (entityAnnotation != null) {
+          linkEntity1(schema, javaClass);
+        }
+      }
+    }
+    
+    // Links the entities 2.
+    System.out.println("Links the entities ...\n");
+    for (JavaSource javaSource : builder.getSources()) {
+      for (JavaClass javaClass : javaSource.getClasses()) {
+        Annotation entityAnnotation = getAnnotation(javaClass, de.greenrobot.daogenerator.annotation.Entity.class);
+        if (entityAnnotation != null) {
+          linkEntity2(schema, javaClass);
+        }
+      }
+    }
+    
+    return schema;
+  }
+
+  private Annotation getAnnotation(AbstractBaseJavaEntity javaEntity, Class annotationClass) {
+    for (Annotation annotation : javaEntity.getAnnotations()) {
+      if (annotationClass.getName().equals(annotation.getType().getFullyQualifiedName())) {
+        return annotation;
+      }
+    }
+    
+    return null;
+  }
+  
+  private Property findProperty(Entity entity, String propertyName) {
+    for (Property property : entity.getProperties()) {
+      if (property.getPropertyName().equals(propertyName)) {
+        return property;
+      }
+    }
+    
+    return null;
+  }
+  
+  /**
+   * Creates the entity in the schema.
+   * Skips all the relational aspect.
+   */
+  private void createEntity(Schema schema, JavaClass javaClass, Annotation entityAnnotation) {
+    System.out.println("className: " + javaClass.getFullyQualifiedName());
+    Entity entity = schema.addEntity(javaClass.getName());
+    typeToEntity.put(javaClass.asType(), entity);
+
+    String tableName = unString((String) entityAnnotation.getNamedParameter("table"));
+    entity.setTableName(tableName);
+
+    // Create the entity's id.
+    entity.addIdProperty();
+
+    for (JavaField javaField : javaClass.getFields()) {
+      System.out.println("field: " + javaField.getType().getFullyQualifiedName() + " " + javaField.getName());
+      Property.PropertyBuilder propertyBuilder;
+      
+      PropertyType propertyType = javaTypeToPropertyType.get(javaField.getType().getFullyQualifiedName());
+      Annotation toOneAnnotation = getAnnotation(javaField, ToOne.class);
+      Annotation serializedAnnotation = getAnnotation(javaField, Serialized.class);
+      Annotation notNullAnnotation = getAnnotation(javaField, de.greenrobot.daogenerator.annotation.NotNull.class);
+      
+      if (propertyType != null) {
+        propertyBuilder = entity.addProperty(propertyType, null, javaField.getName());
+      } else if (serializedAnnotation != null) {
+        propertyBuilder = entity.addProperty(PropertyType.Serialized, javaField.getType().getFullyQualifiedName(), javaField.getName());
+      } else if (toOneAnnotation != null) {
+        propertyBuilder = entity.addLongProperty(javaField.getName() + "Id");
+      } else {
+        continue;
+      }
+      
+      if (notNullAnnotation != null) {
+        propertyBuilder.notNull();
+      }
+    }
+  }
+  
+  /**
+   * Sets up all the relational aspects of the entity.
+   */
+  private void linkEntity1(Schema schema, JavaClass javaClass) {
+    System.out.println("className: " + javaClass.getFullyQualifiedName());
+    
+    Entity entity = typeToEntity.get(javaClass.asType());
+    
+    for (JavaField javaField : javaClass.getFields()) {
+      System.out.println("field: " + javaField.getType().getFullyQualifiedName() + " " + javaField.getName());
+      
+      Annotation toOneAnnotation = getAnnotation(javaField, ToOne.class);
+      if (toOneAnnotation != null) {
+        Entity targetEntity = typeToEntity.get(javaField.getType());
+        entity.addToOne(targetEntity, findProperty(entity, javaField.getName() + "Id"), javaField.getName());
+      }
+    }
+  }
+  
+  /**
+   * Sets up all the relational aspects of the entity.
+   */
+  private void linkEntity2(Schema schema, JavaClass javaClass) {
+    System.out.println("className: " + javaClass.getFullyQualifiedName());
+    
+    Entity entity = typeToEntity.get(javaClass.asType());
+    
+    for (JavaField javaField : javaClass.getFields()) {
+      System.out.println("field: " + javaField.getType().getFullyQualifiedName() + " " + javaField.getName());
+      
+      Annotation toManyAnnotation = getAnnotation(javaField, ToMany.class);
+      if (toManyAnnotation != null && javaField.getType().getFullyQualifiedName().equals(List.class.getName())) {
+        
+        Entity targetEntity = typeToEntity.get(javaField.getType().getActualTypeArguments()[0]);
+        System.out.println("targetEntity = " + targetEntity);
+        
+        System.out.println("toManyAnnotation.getParameterValue() = " + toManyAnnotation.getParameterValue());
+        
+        String relationName = unString((String) toManyAnnotation. getNamedParameter("relation"));
+        System.out.println("relationName = " + relationName);
+        
+        de.greenrobot.daogenerator.ToMany toMany = entity.addToMany(targetEntity,
+                findProperty(targetEntity, relationName + "Id"),
+                javaField.getName());
+        
+        String orderedByStr = unString((String) toManyAnnotation.getNamedParameter("orderedBy"));
+        
+        toMany.orderAsc(findProperty(targetEntity, orderedByStr));
+      }
+    }
+  }
+
+  private String unString(String str) {
+    if (str.length() >= 2 && str.charAt(0) == '"' && str.charAt(str.length() - 1) == '"') {
+      return str.substring(1, str.length() - 1);
+    }
+    else {
+      return str;
+    }
+  }
+  
+}
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/annotation/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/annotation/Entity.java
new file mode 100644
index 00000000..351456cb
--- /dev/null
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/annotation/Entity.java
@@ -0,0 +1,9 @@
+package de.greenrobot.daogenerator.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Target;
+
+@Target(ElementType.TYPE)
+public @interface Entity {
+  String table() default "";
+}
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/annotation/NotNull.java b/DaoGenerator/src/de/greenrobot/daogenerator/annotation/NotNull.java
new file mode 100644
index 00000000..5b98a717
--- /dev/null
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/annotation/NotNull.java
@@ -0,0 +1,9 @@
+package de.greenrobot.daogenerator.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Target;
+
+@Target(ElementType.FIELD)
+public @interface NotNull {
+  
+}
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/annotation/Serialized.java b/DaoGenerator/src/de/greenrobot/daogenerator/annotation/Serialized.java
new file mode 100644
index 00000000..7c1ebd67
--- /dev/null
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/annotation/Serialized.java
@@ -0,0 +1,9 @@
+package de.greenrobot.daogenerator.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Target;
+
+@Target(ElementType.FIELD)
+public @interface Serialized {
+  Class value() default Object.class;
+}
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/annotation/ToMany.java b/DaoGenerator/src/de/greenrobot/daogenerator/annotation/ToMany.java
new file mode 100644
index 00000000..16960188
--- /dev/null
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/annotation/ToMany.java
@@ -0,0 +1,19 @@
+package de.greenrobot.daogenerator.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Target;
+
+@Target(ElementType.FIELD)
+public @interface ToMany {
+  
+  /**
+   * The name of the property in the class of the 'many' side of the relation.
+   */
+  String relation();
+  
+  /**
+   * The order to use when retrieving the list of the entities of the 'many' side of the relation.
+   */
+  String orderedBy();
+  
+}
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/annotation/ToOne.java b/DaoGenerator/src/de/greenrobot/daogenerator/annotation/ToOne.java
new file mode 100644
index 00000000..05c28b0d
--- /dev/null
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/annotation/ToOne.java
@@ -0,0 +1,8 @@
+package de.greenrobot.daogenerator.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Target;
+
+@Target(ElementType.FIELD)
+public @interface ToOne {
+}
