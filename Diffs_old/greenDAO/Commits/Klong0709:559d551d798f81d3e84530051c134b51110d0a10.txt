diff --git a/.travis.yml b/.travis.yml
index 6579e0a5..cc39697d 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,44 +1,33 @@
 # Use the Travis Container-Based Infrastructure
 sudo: false
 language: android
-jdk: oraclejdk8
 
-cache:
-  directories:
-    - ${TRAVIS_BUILD_DIR}/gradle/caches/
-    - ${TRAVIS_BUILD_DIR}/gradle/wrapper/dists/
-  
-env:
-  global:
-    - ANDROID_API_LEVEL=24 # 25 Error: Invalid --abi armeabi-v7a for the selected target
-    - ANDROID_BUILD_TOOLS_VERSION=25.0.2
-    - ANDROID_ABI=armeabi-v7a
-    - ADB_INSTALL_TIMEOUT=20 # minutes (2 minutes by default)
-    
-android:
-  components:
-    - tools # to get the new `repository-11.xml`
-    - platform-tools
-    - tools # to install Android SDK tools 25.1.x, https://github.com/travis-ci/travis-ci/issues/6040#issuecomment-219367943
-    - build-tools-$ANDROID_BUILD_TOOLS_VERSION
-    - android-$ANDROID_API_LEVEL
-    - android-25
-    # Support library
-    - extra-android-support
-    # Latest artifacts in local repository
-    - extra-android-m2repository
-    # Specify at least one system image
-    - sys-img-armeabi-v7a-android-$ANDROID_API_LEVEL
-    
+jdk:
+  - oraclejdk8
+
 before_install:
-  - mkdir "$ANDROID_HOME/licenses" || true
-  - echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license"
+  # Install the rest of tools (e.g., avdmanager)
+  - yes | sdkmanager tools
+  # Install the system image
+  - yes | sdkmanager "system-images;android-18;default;armeabi-v7a"
+  # Create and start emulator for the script. Meant to race the install task.
+  - echo no | avdmanager create avd --force -n test -k "system-images;android-18;default;armeabi-v7a"
+  - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &
+
+install: ./gradlew clean assemble assembleAndroidTest --stacktrace
 
 before_script:
-  # Create and start emulator
-  - echo no | android create avd --force -n test -t "android-"$ANDROID_API_LEVEL --abi $ANDROID_ABI
-  - emulator -avd test -no-skin -no-window &
   - android-wait-for-emulator
+  - adb shell input keyevent 82
 
-script:
-    - ./gradlew clean connectedCheck --stacktrace
+script: ./gradlew check connectedCheck -x :tests:DaoTestPerformance:connectedCheck --stacktrace
+
+before_cache:
+  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
+  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
+
+cache:
+  directories:
+    - $HOME/.gradle/caches/
+    - $HOME/.gradle/wrapper/
+    - $HOME/.android/build-cache
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/database/Database.java b/DaoCore/src/main/java/org/greenrobot/greendao/database/Database.java
index fbc1e8c3..1634e72f 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/database/Database.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/database/Database.java
@@ -40,6 +40,8 @@
 
     boolean isDbLockedByCurrentThread();
 
+    boolean isOpen();
+
     void close();
 
     Object getRawDatabase();
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/database/EncryptedDatabase.java b/DaoCore/src/main/java/org/greenrobot/greendao/database/EncryptedDatabase.java
index 3906cabe..c586ab4c 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/database/EncryptedDatabase.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/database/EncryptedDatabase.java
@@ -72,6 +72,11 @@ public boolean isDbLockedByCurrentThread() {
         return delegate.isDbLockedByCurrentThread();
     }
 
+    @Override
+    public boolean isOpen() {
+        return delegate.isOpen();
+    }
+
     @Override
     public void close() {
         delegate.close();
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/database/StandardDatabase.java b/DaoCore/src/main/java/org/greenrobot/greendao/database/StandardDatabase.java
index ff749327..6106f814 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/database/StandardDatabase.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/database/StandardDatabase.java
@@ -72,6 +72,11 @@ public boolean isDbLockedByCurrentThread() {
         return delegate.isDbLockedByCurrentThread();
     }
 
+    @Override
+    public boolean isOpen() {
+        return delegate.isOpen();
+    }
+
     @Override
     public void close() {
         delegate.close();
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java
index a0667c02..a2781003 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java
@@ -122,11 +122,8 @@ private void checkOrderBuilder() {
      * @see #preferLocalizedStringOrder
      */
     public QueryBuilder<T> stringOrderCollation(String stringOrderCollation) {
-        // SQLCipher 3.5.0+ does not understand "COLLATE LOCALIZED"
-        if (dao.getDatabase().getRawDatabase() instanceof SQLiteDatabase) {
-            this.stringOrderCollation = stringOrderCollation == null || stringOrderCollation.startsWith(" ") ?
-                    stringOrderCollation : " " + stringOrderCollation;
-        }
+        this.stringOrderCollation = stringOrderCollation == null || stringOrderCollation.startsWith(" ") ?
+                stringOrderCollation : " " + stringOrderCollation;
         return this;
     }
 
@@ -395,7 +392,8 @@ private void checkLog(String sql) {
     private void appendJoinsAndWheres(StringBuilder builder, String tablePrefixOrNull) {
         values.clear();
         for (Join<T, ?> join : joins) {
-            builder.append(" JOIN ").append(join.daoDestination.getTablename()).append(' ');
+            builder.append(" JOIN ");
+            builder.append('"').append(join.daoDestination.getTablename()).append('"').append(' ');
             builder.append(join.tablePrefix).append(" ON ");
             SqlUtils.appendProperty(builder, join.sourceTablePrefix, join.joinPropertySource).append('=');
             SqlUtils.appendProperty(builder, join.tablePrefix, join.joinPropertyDestination);
diff --git a/README.md b/README.md
index 62ab2fac..b1a553de 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,7 @@
-**Looking for object persistence faster than SQLite? Check out our new mobile database [ObjectBox](http://objectbox.io/) ([GitHub](https://github.com/greenrobot/ObjectBox)).**  
+Check out ObjectBox
+===================
+
+Looking for object persistence faster than SQLite? Check out our new mobile database [ObjectBox](https://objectbox.io/) ([GitHub](https://github.com/objectbox/objectbox-java)). 
 
 greenDAO
 ========
@@ -23,49 +26,53 @@ greenDAO's unique set of features:
 
 Add greenDAO to your project
 ----------------------------
-greenDAO is available on Maven Central. Please ensure that you are using the latest versions by [checking here](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.greenrobot%22%20AND%20a%3A%22greendao%22) [and here](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.greenrobot%22%20AND%20a%3A%22greendao-generator%22)
+greenDAO is available on Maven Central. Please ensure that you are using the latest versions of the [greendao](https://search.maven.org/search?q=g:org.greenrobot%20AND%20a:greendao) and [greendao-gradle-plugin](https://search.maven.org/search?q=g:org.greenrobot%20AND%20a:greendao-gradle-plugin) artifact.
 
-Add the following Gradle configuration to your Android project:
+Add the following Gradle configuration to your Android project. In your root `build.gradle` file:
 ```groovy
-// In your root build.gradle file:
 buildscript {
     repositories {
         jcenter()
         mavenCentral() // add repository
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.3.3'
+        classpath 'com.android.tools.build:gradle:3.1.1'
         classpath 'org.greenrobot:greendao-gradle-plugin:3.2.2' // add plugin
     }
 }
- 
-// In your app projects build.gradle file:
+```
+In your app modules `app/build.gradle` file:
+```groovy
 apply plugin: 'com.android.application'
 apply plugin: 'org.greenrobot.greendao' // apply plugin
  
 dependencies {
-    compile 'org.greenrobot:greendao:3.2.2' // add library
+    implementation 'org.greenrobot:greendao:3.2.2' // add library
 }
 ```
 
 Note that this hooks up the greenDAO Gradle plugin to your build process. When you build your project, it generates classes like DaoMaster, DaoSession and DAOs.
 
+Continue at the [Getting Started](http://greenrobot.org/greendao/documentation/how-to-get-started/) page.
+
 Homepage, Documentation, Links
 ------------------------------
 For more details on greenDAO please check [greenDAO's website](http://greenrobot.org/greendao). Here are some direct links you may find useful:
 
 [Features](http://greenrobot.org/greendao/features/)
 
-[greenDAO 3](http://greenrobot.org/greendao/documentation/updating-to-greendao-3-and-annotations/)
+[Getting Started](http://greenrobot.org/greendao/documentation/how-to-get-started/)
 
 [Documentation](http://greenrobot.org/greendao/documentation/)
 
 [Changelog](http://greenrobot.org/greendao/changelog/)
 
-[Technical FAQ](http://greenrobot.org/greendao/documentation/technical-faq/)
+[Technical FAQ](http://greenrobot.org/greendao/documentation/technical-faq/) (incl. ProGuard rules)
 
 [Non-Technical FAQ](http://greenrobot.org/greendao/documentation/faq/)
 
+[Migrating to greenDAO 3](http://greenrobot.org/greendao/documentation/updating-to-greendao-3-and-annotations/)
+
 More Open Source by greenrobot
 ==============================
 [__ObjectBox__](https://github.com/objectbox/objectbox-java) is a new superfast object-oriented database for mobile.
@@ -73,6 +80,3 @@ More Open Source by greenrobot
 [__EventBus__](https://github.com/greenrobot/EventBus) is a central publish/subscribe bus for Android with optional delivery threads, priorities, and sticky events. A great tool to decouple components (e.g. Activities, Fragments, logic components) from each other.
 
 [__Essentials__](https://github.com/greenrobot/essentials) is a set of utility classes and hash functions for Android & Java projects.
-
-[Follow us on Google+](https://plus.google.com/b/114381455741141514652/+GreenrobotDe/posts) to stay up to date.
-
diff --git a/build.gradle b/build.gradle
index 43bbcf71..8a526a49 100644
--- a/build.gradle
+++ b/build.gradle
@@ -2,20 +2,20 @@
 version = '3.2.3-SNAPSHOT'
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '3.5'
+    group 'build setup'
+    gradleVersion = '4.6'
     distributionType = org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL
 }
 
 ext {
-    buildToolsVersion = '25.0.2'
-    compileSdkVersion = 25
+    compileSdkVersion = 27
 
     minSdkVersion = 7
     targetSdkVersion = 25
 
     // common dependencies for Android projects (not to be used in example projects for better copy and paste)
     dep = [
-            androidPlugin: 'com.android.tools.build:gradle:2.3.1',
+            androidPlugin: 'com.android.tools.build:gradle:3.2.1',
             greendaoPlugin: 'org.greenrobot:greendao-gradle-plugin:3.2.2'
     ]
 }
@@ -35,6 +35,7 @@ subprojects {
     repositories {
         mavenCentral()
         jcenter()
+        google()
     }
 
     configurations {
diff --git a/examples/DaoExample/build.gradle b/examples/DaoExample/build.gradle
index c3e06cd1..2f7a5f2f 100644
--- a/examples/DaoExample/build.gradle
+++ b/examples/DaoExample/build.gradle
@@ -1,11 +1,12 @@
 buildscript {
     repositories {
         jcenter()
+        google()
         mavenCentral()
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.3.1'
+        classpath 'com.android.tools.build:gradle:3.2.1'
         classpath 'org.greenrobot:greendao-gradle-plugin:3.2.2'
     }
 }
@@ -14,13 +15,12 @@ apply plugin: 'com.android.application'
 apply plugin: 'org.greenrobot.greendao'
 
 android {
-    buildToolsVersion '25.0.2'
-    compileSdkVersion 25
+    compileSdkVersion 27
 
     defaultConfig {
         applicationId "org.greenrobot.greendao.example"
         minSdkVersion 15
-        targetSdkVersion 25
+        targetSdkVersion 27
         versionCode 1
         versionName "3"
 
@@ -33,13 +33,13 @@ greendao {
 }
 
 dependencies {
-    compile 'org.greenrobot:greendao:3.2.2'
+    implementation 'org.greenrobot:greendao:3.2.2'
 
-    // This is only needed if you want to use encrypted databases
-    compile 'net.zetetic:android-database-sqlcipher:3.5.6'
+    // optional: add if you want to use encrypted databases, see the App class for details
+    // implementation 'net.zetetic:android-database-sqlcipher:3.5.6'
 
-    compile 'com.android.support:appcompat-v7:25.3.1'
-    compile 'com.android.support:recyclerview-v7:25.3.1'
+    implementation 'com.android.support:appcompat-v7:27.1.1'
+    implementation 'com.android.support:recyclerview-v7:27.1.1'
 }
 
 uploadArchives.enabled = false
diff --git a/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/App.java b/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/App.java
index 3c3c0286..0586e928 100644
--- a/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/App.java
+++ b/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/App.java
@@ -3,11 +3,8 @@
 import android.app.Application;
 
 import org.greenrobot.greendao.database.Database;
-import org.greenrobot.greendao.example.DaoMaster.DevOpenHelper;
 
 public class App extends Application {
-    /** A flag to show how easily you can switch from standard SQLite to the encrypted SQLCipher. */
-    public static final boolean ENCRYPTED = true;
 
     private DaoSession daoSession;
 
@@ -15,8 +12,15 @@
     public void onCreate() {
         super.onCreate();
 
-        DevOpenHelper helper = new DevOpenHelper(this, ENCRYPTED ? "notes-db-encrypted" : "notes-db");
-        Database db = ENCRYPTED ? helper.getEncryptedWritableDb("super-secret") : helper.getWritableDb();
+        // regular SQLite database
+        DaoMaster.DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, "notes-db");
+        Database db = helper.getWritableDb();
+
+        // encrypted SQLCipher database
+        // note: you need to add SQLCipher to your dependencies, check the build.gradle file
+        // DaoMaster.DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, "notes-db-encrypted");
+        // Database db = helper.getEncryptedWritableDb("encryption-key");
+
         daoSession = new DaoMaster(db).newSession();
     }
 
diff --git a/examples/RxDaoExample/build.gradle b/examples/RxDaoExample/build.gradle
index 1b4ef1a8..7aaaa026 100644
--- a/examples/RxDaoExample/build.gradle
+++ b/examples/RxDaoExample/build.gradle
@@ -1,11 +1,12 @@
 buildscript {
     repositories {
         jcenter()
+        google()
         mavenCentral()
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.3.1'
+        classpath 'com.android.tools.build:gradle:3.2.1'
         classpath 'org.greenrobot:greendao-gradle-plugin:3.2.2'
     }
 }
@@ -14,13 +15,12 @@ apply plugin: 'com.android.application'
 apply plugin: 'org.greenrobot.greendao'
 
 android {
-    buildToolsVersion '25.0.2'
-    compileSdkVersion 25
+    compileSdkVersion 27
 
     defaultConfig {
         applicationId "org.greenrobot.greendao.rxexample"
         minSdkVersion 15
-        targetSdkVersion 25
+        targetSdkVersion 27
         versionCode 1
         versionName "1.0"
     }
@@ -31,17 +31,17 @@ greendao {
 }
 
 dependencies {
-    compile 'org.greenrobot:greendao:3.2.2'
+    implementation 'org.greenrobot:greendao:3.2.2'
 
-    // This is only needed if you want to use encrypted databases
-    compile 'net.zetetic:android-database-sqlcipher:3.5.6'
+    // optional: add if you want to use encrypted databases, see the App class for details
+    // implementation 'net.zetetic:android-database-sqlcipher:3.5.6'
 
-    compile 'com.jakewharton.rxbinding:rxbinding:1.0.1'
-    compile 'io.reactivex:rxandroid:1.2.1'
-    compile 'io.reactivex:rxjava:1.2.9'
+    implementation 'com.jakewharton.rxbinding:rxbinding:1.0.1'
+    implementation 'io.reactivex:rxandroid:1.2.1'
+    implementation 'io.reactivex:rxjava:1.3.0'
 
-    compile 'com.android.support:appcompat-v7:25.3.1'
-    compile 'com.android.support:recyclerview-v7:25.3.1'
+    implementation 'com.android.support:appcompat-v7:27.1.1'
+    implementation 'com.android.support:recyclerview-v7:27.1.1'
 }
 
 uploadArchives.enabled = false
diff --git a/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/App.java b/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/App.java
index 9c47a27d..5dcaba6d 100644
--- a/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/App.java
+++ b/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/App.java
@@ -5,10 +5,6 @@
 import org.greenrobot.greendao.database.Database;
 
 public class App extends Application {
-    /**
-     * A flag to show how easily you can switch from standard SQLite to the encrypted SQLCipher.
-     */
-    public static final boolean ENCRYPTED = true;
 
     private DaoSession daoSession;
 
@@ -16,8 +12,15 @@
     public void onCreate() {
         super.onCreate();
 
-        DaoMaster.DevOpenHelper helper = new DaoMaster.DevOpenHelper(this,ENCRYPTED ? "notes-db-encrypted" : "notes-db");
-        Database db = ENCRYPTED ? helper.getEncryptedWritableDb("super-secret") : helper.getWritableDb();
+        // regular SQLite database
+        DaoMaster.DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, "notes-db");
+        Database db = helper.getWritableDb();
+
+        // encrypted SQLCipher database
+        // note: you need to add SQLCipher to your dependencies, check the build.gradle file
+        // DaoMaster.DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, "notes-db-encrypted");
+        // Database db = helper.getEncryptedWritableDb("encryption-key");
+
         daoSession = new DaoMaster(db).newSession();
     }
 
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 2a3b32b5..6828f128 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Thu Apr 13 16:47:49 CEST 2017
+#Tue Apr 17 14:24:16 CEST 2018
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-all.zip
diff --git a/tests/DaoTest/build.gradle b/tests/DaoTest/build.gradle
index 620810a2..cb9cdda1 100644
--- a/tests/DaoTest/build.gradle
+++ b/tests/DaoTest/build.gradle
@@ -1,6 +1,7 @@
 buildscript {
     repositories {
         jcenter()
+        google()
         mavenCentral()
     }
 
@@ -12,23 +13,31 @@ buildscript {
 apply plugin: 'com.android.application'
 
 android {
-    buildToolsVersion rootProject.ext.buildToolsVersion
     compileSdkVersion rootProject.ext.compileSdkVersion
 
     defaultConfig {
+        minSdkVersion 7
+
         testApplicationId "org.greenrobot.greendao.daotest"
         testInstrumentationRunner "android.test.InstrumentationTestRunner"
     }
+
+    testOptions {
+        unitTests {
+            includeAndroidResources = true
+        }
+    }
 }
 
 dependencies {
-    compile project(':tests:DaoTestBase')
+    implementation project(':tests:DaoTestBase')
 
-    testCompile 'org.robolectric:robolectric:3.1'
-    testCompile 'org.mockito:mockito-core:1.10.19'
+    testImplementation "junit:junit:4.12"
+    testImplementation 'org.robolectric:robolectric:3.8'
+    testImplementation 'org.mockito:mockito-core:1.10.19'
 
-    androidTestCompile 'net.zetetic:android-database-sqlcipher:3.5.4'
-    androidTestCompile 'io.reactivex:rxjava:1.1.7'
+    androidTestImplementation 'net.zetetic:android-database-sqlcipher:3.5.6'
+    androidTestImplementation 'io.reactivex:rxjava:1.3.0'
 }
 
 uploadArchives.enabled = false
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDbUtils.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDbUtils.java
index f8f59c34..0ffc8fb4 100644
--- a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDbUtils.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDbUtils.java
@@ -23,11 +23,10 @@
 
 import net.sqlcipher.database.SQLiteDatabase;
 
-import java.io.File;
-
 import org.greenrobot.greendao.database.Database;
 import org.greenrobot.greendao.database.EncryptedDatabase;
 
+import java.io.File;
 
 import static junit.framework.Assert.assertEquals;
 import static junit.framework.Assert.assertTrue;
@@ -66,7 +65,7 @@ public static String queryString(Database db, String sql) {
     }
 
     public static void assertEncryptedDbUsed(Database db) {
-        assertEquals("3.11.0", queryString(db, "select sqlite_version()"));
+        assertEquals("3.15.2", queryString(db, "select sqlite_version()"));
         String cipherProvider = queryString(db, "PRAGMA cipher_provider_version");
         assertTrue(cipherProvider, cipherProvider.contains("OpenSSL"));
     }
diff --git a/tests/DaoTest/src/main/AndroidManifest.xml b/tests/DaoTest/src/main/AndroidManifest.xml
index 0fb7ece6..d5890ee1 100644
--- a/tests/DaoTest/src/main/AndroidManifest.xml
+++ b/tests/DaoTest/src/main/AndroidManifest.xml
@@ -4,8 +4,6 @@
     android:versionCode="1"
     android:versionName="1.0" >
 
-    <uses-sdk android:minSdkVersion="7" />
-
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
 
     <application>
diff --git a/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityTest.java b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityTest.java
index 5a911799..00241e32 100644
--- a/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityTest.java
+++ b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityTest.java
@@ -1,24 +1,22 @@
 package org.greenrobot.greendao.unittest;
 
+import org.greenrobot.greendao.daotest.dummyapp.BuildConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.query.Query;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CountDownLatch;
 
-import org.greenrobot.greendao.database.Database;
-import org.greenrobot.greendao.query.Query;
-import org.greenrobot.greendao.daotest.dummyapp.BuildConfig;
-
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 
-@RunWith(RobolectricGradleTestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 16)
 public class MinimalEntityTest {
 
diff --git a/tests/DaoTestEntityAnnotation/build.gradle b/tests/DaoTestEntityAnnotation/build.gradle
index ccdfb7b5..933f8ca0 100644
--- a/tests/DaoTestEntityAnnotation/build.gradle
+++ b/tests/DaoTestEntityAnnotation/build.gradle
@@ -1,6 +1,7 @@
 buildscript {
     repositories {
         jcenter()
+        google()
         mavenCentral()
     }
 
@@ -14,7 +15,6 @@ apply plugin: 'org.greenrobot.greendao'
 apply plugin: 'com.android.application'
 
 android {
-    buildToolsVersion rootProject.ext.buildToolsVersion
     compileSdkVersion rootProject.ext.compileSdkVersion
 
     defaultConfig {
@@ -40,7 +40,7 @@ greendao {
 }
 
 dependencies {
-    compile project(':DaoCore')
+    implementation project(':DaoCore')
 }
 
 uploadArchives.enabled = false
\ No newline at end of file
diff --git a/tests/DaoTestPerformance/build.gradle b/tests/DaoTestPerformance/build.gradle
index a8057f73..c7e5ff8e 100644
--- a/tests/DaoTestPerformance/build.gradle
+++ b/tests/DaoTestPerformance/build.gradle
@@ -1,6 +1,7 @@
 buildscript {
     repositories {
         jcenter()
+        google()
         mavenCentral()
     }
 
@@ -18,12 +19,11 @@ repositories {
 }
 
 dependencies {
-    compile project(':tests:DaoTestBase')
-    androidTestCompile 'org.greenrobot:essentials:3.0.0-SNAPSHOT'
+    implementation project(':tests:DaoTestBase')
+    androidTestImplementation 'org.greenrobot:essentials:3.0.0-SNAPSHOT'
 }
 
 android {
-    buildToolsVersion rootProject.ext.buildToolsVersion
     compileSdkVersion rootProject.ext.compileSdkVersion
 
     defaultConfig {
diff --git a/tests/DaoTestPerformance/src/main/AndroidManifest.xml b/tests/DaoTestPerformance/src/main/AndroidManifest.xml
index ad1fefb0..adf832cb 100644
--- a/tests/DaoTestPerformance/src/main/AndroidManifest.xml
+++ b/tests/DaoTestPerformance/src/main/AndroidManifest.xml
@@ -4,8 +4,6 @@
     android:versionCode="1"
     android:versionName="1.0" >
 
-    <uses-sdk android:minSdkVersion="4" />
-
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
 
