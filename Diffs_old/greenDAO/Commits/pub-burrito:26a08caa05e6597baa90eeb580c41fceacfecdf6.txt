diff --git a/DaoCore/.classpath b/DaoCore/.classpath
index 7bc01d9a..5e6314e1 100644
--- a/DaoCore/.classpath
+++ b/DaoCore/.classpath
@@ -3,7 +3,6 @@
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/DaoCore/src/de/greenrobot/platform/java/util/JDBCUtils.java b/DaoCore/src/de/greenrobot/platform/java/util/JDBCUtils.java
index 3da01fca..edc01f0c 100644
--- a/DaoCore/src/de/greenrobot/platform/java/util/JDBCUtils.java
+++ b/DaoCore/src/de/greenrobot/platform/java/util/JDBCUtils.java
@@ -106,21 +106,8 @@ public static int getCount( ResultSet resultSet )
 		return count;
 	}
 	
-	public static Connection connect( String db ) throws SQLException
+	public static Connection connect( String driverName, String connectionString ) throws SQLException
 	{
-		// setup
-		File f = new File( DB_DIRECTORY+db );
-		if ( f.exists() )
-		{
-			f.delete();
-		}
-		else
-		{
-			if ( null != f.getParent() )
-			{
-				f.getParentFile().mkdirs();
-			}
-		}
 		// Loads and registers the JDBC driver
 		try
 		{
@@ -143,7 +130,26 @@ public static Connection connect( String db ) throws SQLException
 			e.printStackTrace();
 		}
 		
-		Log.i("JDBCUtils", "connecting: "+url+db);
-		return DriverManager.getConnection( url + db );
+		Log.i("JDBCUtils", "connecting: "+connectionString);
+		return DriverManager.getConnection( connectionString );
+	}
+	
+	public static Connection connect( String db ) throws SQLException
+	{
+		// setup
+		File f = new File( DB_DIRECTORY+db );
+		if ( f.exists() )
+		{
+			f.delete();
+		}
+		else
+		{
+			if ( null != f.getParent() )
+			{
+				f.getParentFile().mkdirs();
+			}
+		}
+
+		return connect( driverName, url + db );
 	}
 }
diff --git a/DaoGenerator/src-template/dao-master.ftl b/DaoGenerator/src-template/dao-master.ftl
index 1e3a139d..e6560421 100644
--- a/DaoGenerator/src-template/dao-master.ftl
+++ b/DaoGenerator/src-template/dao-master.ftl
@@ -21,6 +21,9 @@ package ${schema.defaultJavaPackageDao};
 
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.sql.ResultSet;
+
+import de.greenrobot.platform.java.util.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
@@ -54,6 +57,76 @@ public class DaoMaster extends AbstractDaoMaster {
 </#list>
     }
     
+    public static abstract class AbstractConnectionManager {
+    
+    	private String driverName;
+    	private String connectionString;
+    	private Connection connection;
+    	
+    	public AbstractConnectionManager(String driverName, String connectionString) {
+    		this.driverName = driverName;
+    		this.connectionString = connectionString;
+    		try {
+	    		onCreate();
+	    	} catch (SQLException e) {
+	    		throw new RuntimeException("Unable to manage this connection", e);
+	    	}
+    	}
+    	
+    	// TODO connection pooling
+    	public Connection getConnection() throws SQLException {
+    		if (this.connection == null) {
+		    	this.connection = JDBCUtils.connect(driverName, connectionString);
+			}
+			return this.connection;    	
+    	}
+    	
+    	public abstract void onCreate(Connection connection) throws SQLException;
+
+    	public void onUpgrade(Connection connection, int oldVersion, int newVersion) throws SQLException {} // not mandatory
+    	
+    	private void onCreate() throws SQLException {
+    		Connection connection = getConnection();
+    		if (isBigBang(connection)) {
+    			onCreate(connection);
+    		}
+    	}
+    	
+    	private boolean isBigBang(Connection connection) throws SQLException {
+    		ResultSet resultSet = connection.getMetaData().getCatalogs();
+    		boolean result = !resultSet.next();
+    		resultSet.close();
+    		return result;
+    	}
+    }
+    
+    public static abstract class ConnectionManager extends AbstractConnectionManager {
+
+        public ConnectionManager(String driverName, String connectionString) {
+            super(driverName, connectionString);
+        }
+
+        @Override
+        public void onCreate(Connection connection) throws SQLException {
+            //Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
+            createAllTables(connection, false);
+        }
+    }
+    
+    /** WARNING: Drops all table on Upgrade! Use only during development. */
+    public static class DevConnectionManager extends ConnectionManager {
+        public DevConnectionManager(String driverName, String connectionString) {
+            super(driverName, connectionString);
+        }
+
+        @Override
+        public void onUpgrade(Connection connection, int oldVersion, int newVersion) throws SQLException {
+            //Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
+            dropAllTables(connection, true);
+            onCreate(connection);
+        }
+    }
+    
     public DaoMaster(Connection connection) {
         super(connection, SCHEMA_VERSION);
 <#list schema.entities as entity>
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index 1c7ee1ec..c9b0cc63 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -461,7 +461,7 @@ void init2ndPass() {
             pkProperty = propertiesPk.get(0);
             pkType = schema.mapToJavaTypeNullable(pkProperty.getPropertyType());
         } else {
-            pkType = "Long"; // this used to be Void but Void is not a Long as expected by the super type AbstractDao<SqliteMaster, Long>
+            pkType = "Long"; // this used to be Void
         }
 
         propertiesColumns = new ArrayList<Property>(properties);
diff --git a/DaoTest/.classpath b/DaoTest/.classpath
index 80819056..ffdf4c14 100644
--- a/DaoTest/.classpath
+++ b/DaoTest/.classpath
@@ -6,5 +6,7 @@
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="lib" path="libs/sqldroid-1.0.0RC1.jar"/>
+	<classpathentry kind="lib" path="libs/sqldroidsecompat-1.0.0RC1.jar"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/DaoCore/libs/sqldroid-1.0.0RC1.jar b/DaoTest/libs/sqldroid-1.0.0RC1.jar
similarity index 100%
rename from DaoCore/libs/sqldroid-1.0.0RC1.jar
rename to DaoTest/libs/sqldroid-1.0.0RC1.jar
diff --git a/DaoCore/libs/sqldroidsecompat-1.0.0RC1.jar b/DaoTest/libs/sqldroidsecompat-1.0.0RC1.jar
similarity index 100%
rename from DaoCore/libs/sqldroidsecompat-1.0.0RC1.jar
rename to DaoTest/libs/sqldroidsecompat-1.0.0RC1.jar
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
index 8313d9e3..0794a342 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
@@ -2,6 +2,9 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.sql.ResultSet;
+
+import de.greenrobot.platform.java.util.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
@@ -65,6 +68,76 @@ public static void dropAllTables(Connection connection, boolean ifExists) throws
         AutoincrementEntityDao.dropTable(connection, ifExists);
     }
     
+    public static abstract class AbstractConnectionManager {
+    
+    	private String driverName;
+    	private String connectionString;
+    	private Connection connection;
+    	
+    	public AbstractConnectionManager(String driverName, String connectionString) {
+    		this.driverName = driverName;
+    		this.connectionString = connectionString;
+    		try {
+	    		onCreate();
+	    	} catch (SQLException e) {
+	    		throw new RuntimeException("Unable to manage this connection", e);
+	    	}
+    	}
+    	
+    	// TODO connection pooling
+    	public Connection getConnection() throws SQLException {
+    		if (this.connection == null) {
+		    	this.connection = JDBCUtils.connect(driverName, connectionString);
+			}
+			return this.connection;    	
+    	}
+    	
+    	public abstract void onCreate(Connection connection) throws SQLException;
+
+    	public void onUpgrade(Connection connection, int oldVersion, int newVersion) throws SQLException {} // not mandatory
+    	
+    	private void onCreate() throws SQLException {
+    		Connection connection = getConnection();
+    		if (isBigBang(connection)) {
+    			onCreate(connection);
+    		}
+    	}
+    	
+    	private boolean isBigBang(Connection connection) throws SQLException {
+    		ResultSet resultSet = connection.getMetaData().getCatalogs();
+    		boolean result = !resultSet.next();
+    		resultSet.close();
+    		return result;
+    	}
+    }
+    
+    public static abstract class ConnectionManager extends AbstractConnectionManager {
+
+        public ConnectionManager(String driverName, String connectionString) {
+            super(driverName, connectionString);
+        }
+
+        @Override
+        public void onCreate(Connection connection) throws SQLException {
+            //Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
+            createAllTables(connection, false);
+        }
+    }
+    
+    /** WARNING: Drops all table on Upgrade! Use only during development. */
+    public static class DevConnectionManager extends ConnectionManager {
+        public DevConnectionManager(String driverName, String connectionString) {
+            super(driverName, connectionString);
+        }
+
+        @Override
+        public void onUpgrade(Connection connection, int oldVersion, int newVersion) throws SQLException {
+            //Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
+            dropAllTables(connection, true);
+            onCreate(connection);
+        }
+    }
+    
     public DaoMaster(Connection connection) {
         super(connection, SCHEMA_VERSION);
         registerDaoClass(SimpleEntityDao.class);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
index 16b7a043..47d13131 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
@@ -2,6 +2,9 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.sql.ResultSet;
+
+import de.greenrobot.platform.java.util.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
@@ -34,6 +37,76 @@ public static void dropAllTables(Connection connection, boolean ifExists) throws
         RelationSource2Dao.dropTable(connection, ifExists);
     }
     
+    public static abstract class AbstractConnectionManager {
+    
+    	private String driverName;
+    	private String connectionString;
+    	private Connection connection;
+    	
+    	public AbstractConnectionManager(String driverName, String connectionString) {
+    		this.driverName = driverName;
+    		this.connectionString = connectionString;
+    		try {
+	    		onCreate();
+	    	} catch (SQLException e) {
+	    		throw new RuntimeException("Unable to manage this connection", e);
+	    	}
+    	}
+    	
+    	// TODO connection pooling
+    	public Connection getConnection() throws SQLException {
+    		if (this.connection == null) {
+		    	this.connection = JDBCUtils.connect(driverName, connectionString);
+			}
+			return this.connection;    	
+    	}
+    	
+    	public abstract void onCreate(Connection connection) throws SQLException;
+
+    	public void onUpgrade(Connection connection, int oldVersion, int newVersion) throws SQLException {} // not mandatory
+    	
+    	private void onCreate() throws SQLException {
+    		Connection connection = getConnection();
+    		if (isBigBang(connection)) {
+    			onCreate(connection);
+    		}
+    	}
+    	
+    	private boolean isBigBang(Connection connection) throws SQLException {
+    		ResultSet resultSet = connection.getMetaData().getCatalogs();
+    		boolean result = !resultSet.next();
+    		resultSet.close();
+    		return result;
+    	}
+    }
+    
+    public static abstract class ConnectionManager extends AbstractConnectionManager {
+
+        public ConnectionManager(String driverName, String connectionString) {
+            super(driverName, connectionString);
+        }
+
+        @Override
+        public void onCreate(Connection connection) throws SQLException {
+            //Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
+            createAllTables(connection, false);
+        }
+    }
+    
+    /** WARNING: Drops all table on Upgrade! Use only during development. */
+    public static class DevConnectionManager extends ConnectionManager {
+        public DevConnectionManager(String driverName, String connectionString) {
+            super(driverName, connectionString);
+        }
+
+        @Override
+        public void onUpgrade(Connection connection, int oldVersion, int newVersion) throws SQLException {
+            //Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
+            dropAllTables(connection, true);
+            onCreate(connection);
+        }
+    }
+    
     public DaoMaster(Connection connection) {
         super(connection, SCHEMA_VERSION);
         registerDaoClass(KeepEntityDao.class);
