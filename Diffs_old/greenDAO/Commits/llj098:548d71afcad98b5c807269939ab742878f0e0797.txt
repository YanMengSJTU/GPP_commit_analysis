diff --git a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
index 48a3ba53..de4a39d1 100644
--- a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
+++ b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
@@ -62,6 +62,7 @@ public void onCreate(Bundle savedInstanceState) {
         String textColumn = NoteDao.Properties.Text.columnName;
         String orderBy = textColumn + " COLLATE LOCALIZED ASC";
         cursor = db.query(noteDao.getTablename(), noteDao.getAllColumns(), null, null, null, null, orderBy);
+        
         String[] from = { textColumn, NoteDao.Properties.Comment.columnName };
         int[] to = { android.R.id.text1, android.R.id.text2 };
 
diff --git a/DaoGenerator/src-template/content-provider.ftl b/DaoGenerator/src-template/content-provider.ftl
index 93396f73..e7c653ec 100644
--- a/DaoGenerator/src-template/content-provider.ftl
+++ b/DaoGenerator/src-template/content-provider.ftl
@@ -8,6 +8,7 @@ import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteQueryBuilder;
 import android.net.Uri;
+import android.text.TextUtils;
 
 import de.greenrobot.dao.DaoLog;
 
@@ -43,9 +44,9 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
     private static final UriMatcher sURIMatcher;
 
     static {
-    sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);
-    sURIMatcher.addURI(AUTHORITY, BASE_PATH, ${entity.className?upper_case}_DIR);
-    sURIMatcher.addURI(AUTHORITY, BASE_PATH + "/#", ${entity.className?upper_case}_ID);
+	    sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);
+	    sURIMatcher.addURI(AUTHORITY, BASE_PATH, ${entity.className?upper_case}_DIR);
+	    sURIMatcher.addURI(AUTHORITY, BASE_PATH + "/#", ${entity.className?upper_case}_ID);
     }
 
     /**
@@ -56,18 +57,18 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
 
     @Override
     public boolean onCreate() {
-    // if(daoSession == null) {
-    // throw new IllegalStateException("DaoSession must be set before content provider is created");
-    // }
-    DaoLog.d("Content Provider started: " + CONTENT_URI);
-    return true;
+	    // if(daoSession == null) {
+	    // throw new IllegalStateException("DaoSession must be set before content provider is created");
+	    // }
+	    DaoLog.d("Content Provider started: " + CONTENT_URI);
+	    return true;
     }
 
     protected SQLiteDatabase getDatabase() {
-    if(daoSession == null) {
-    throw new IllegalStateException("DaoSession must be set during content provider is active");
-    }
-    return daoSession.getDatabase();
+	    if(daoSession == null) {
+	    throw new IllegalStateException("DaoSession must be set during content provider is active");
+	    }
+	    return daoSession.getDatabase();
     }
 
 <#--
@@ -78,21 +79,21 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
     @Override
     public Uri insert(Uri uri, ContentValues values) {
 <#if contentProvider.isReadOnly()>
-    throw new UnsupportedOperationException("This content provider is readonly");
+    	throw new UnsupportedOperationException("This content provider is readonly");
 <#else>
-    int uriType = sURIMatcher.match(uri);
-    long id = 0;
-    String path = "";
-    switch (uriType) {
-    case ${entity.className?upper_case}_DIR:
-    id = getDatabase().insert(TABLENAME, null, values);
-    path = BASE_PATH + "/" + id;
-    break;
-    default:
-    throw new IllegalArgumentException("Unknown URI: " + uri);
-    }
-    getContext().getContentResolver().notifyChange(uri, null);
-    return Uri.parse(path);
+	    int uriType = sURIMatcher.match(uri);
+	    long id = 0;
+	    String path = "";
+	    switch (uriType) {
+	    	case ${entity.className?upper_case}_DIR:
+			    id = getDatabase().insert(TABLENAME, null, values);
+			    path = BASE_PATH + "/" + id;
+			    break;
+	    	default:
+	    		throw new IllegalArgumentException("Unknown URI: " + uri);
+	    }
+	    getContext().getContentResolver().notifyChange(uri, null);
+	    return Uri.parse(path);
 </#if>
     }
 
@@ -104,30 +105,30 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
     @Override
     public int delete(Uri uri, String selection, String[] selectionArgs) {
 <#if contentProvider.isReadOnly()>
-    throw new UnsupportedOperationException("This content provider is readonly");
+    	throw new UnsupportedOperationException("This content provider is readonly");
 <#else>
-    int uriType = sURIMatcher.match(uri);
-    SQLiteDatabase db = getDatabase();
-    int rowsDeleted = 0;
-    String id;
-    switch (uriType) {
-    case ${entity.className?upper_case}_DIR:
-    rowsDeleted = db.delete(TABLENAME, selection, selectionArgs);
-    break;
-    case ${entity.className?upper_case}_ID:
-    id = uri.getLastPathSegment();
-    if (TextUtils.isEmpty(selection)) {
-    rowsDeleted = db.delete(TABLENAME, PK + "=" + id, null);
-    } else {
-    rowsDeleted = db.delete(TABLENAME, PK + "=" + id + " and "
-    + selection, selectionArgs);
-    }
-    break;
-    default:
-    throw new IllegalArgumentException("Unknown URI: " + uri);
-    }
-    getContext().getContentResolver().notifyChange(uri, null);
-    return rowsDeleted;
+	    int uriType = sURIMatcher.match(uri);
+	    SQLiteDatabase db = getDatabase();
+	    int rowsDeleted = 0;
+	    String id;
+	    switch (uriType) {
+	    	case ${entity.className?upper_case}_DIR:
+	    		rowsDeleted = db.delete(TABLENAME, selection, selectionArgs);
+	    		break;
+	    	case ${entity.className?upper_case}_ID:
+			    id = uri.getLastPathSegment();
+			    if (TextUtils.isEmpty(selection)) {
+			    	rowsDeleted = db.delete(TABLENAME, PK + "=" + id, null);
+			    } else {
+			    	rowsDeleted = db.delete(TABLENAME, PK + "=" + id + " and "
+			    		+ selection, selectionArgs);
+			    }
+			    break;
+	    	default:
+	    		throw new IllegalArgumentException("Unknown URI: " + uri);
+	    }
+	    getContext().getContentResolver().notifyChange(uri, null);
+	    return rowsDeleted;
 </#if>
     }
 
@@ -140,30 +141,30 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
     public int update(Uri uri, ContentValues values, String selection,
     String[] selectionArgs) {
 <#if contentProvider.isReadOnly()>
-    throw new UnsupportedOperationException("This content provider is readonly");
+	    throw new UnsupportedOperationException("This content provider is readonly");
 <#else>
-    int uriType = sURIMatcher.match(uri);
-    SQLiteDatabase db = getDatabase();
-    int rowsUpdated = 0;
-    String id;
-    switch (uriType) {
-    case ${entity.className?upper_case}_DIR:
-    rowsUpdated = db.update(TABLENAME, values, selection, selectionArgs);
-    break;
-    case ${entity.className?upper_case}_ID:
-    id = uri.getLastPathSegment();
-    if (TextUtils.isEmpty(selection)) {
-    rowsUpdated = db.update(TABLENAME, values, PK + "=" + id, null);
-    } else {
-    rowsUpdated = db.update(TABLENAME, values, PK + "=" + id
-    + " and " + selection, selectionArgs);
-    }
-    break;
-    default:
-    throw new IllegalArgumentException("Unknown URI: " + uri);
-    }
-    getContext().getContentResolver().notifyChange(uri, null);
-    return rowsUpdated;
+	    int uriType = sURIMatcher.match(uri);
+	    SQLiteDatabase db = getDatabase();
+	    int rowsUpdated = 0;
+	    String id;
+	    switch (uriType) {
+		    case ${entity.className?upper_case}_DIR:
+		    	rowsUpdated = db.update(TABLENAME, values, selection, selectionArgs);
+		    	break;
+		    case ${entity.className?upper_case}_ID:
+		    	id = uri.getLastPathSegment();
+		    	if (TextUtils.isEmpty(selection)) {
+		    		rowsUpdated = db.update(TABLENAME, values, PK + "=" + id, null);
+		    	} else {
+		    		rowsUpdated = db.update(TABLENAME, values, PK + "=" + id
+		    			+ " and " + selection, selectionArgs);
+		    	}
+		    	break;
+		    default:
+		    	throw new IllegalArgumentException("Unknown URI: " + uri);
+	    }
+	    getContext().getContentResolver().notifyChange(uri, null);
+	    return rowsUpdated;
 </#if>
     }
 <#--
@@ -175,27 +176,27 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
     public Cursor query(Uri uri, String[] projection, String selection,
     String[] selectionArgs, String sortOrder) {
 
-    SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
-    int uriType = sURIMatcher.match(uri);
-    switch (uriType) {
-    case ${entity.className?upper_case}_DIR:
-    queryBuilder.setTables(TABLENAME);
-    break;
-    case ${entity.className?upper_case}_ID:
-    queryBuilder.setTables(TABLENAME);
-    queryBuilder.appendWhere(PK + "="
-    + uri.getLastPathSegment());
-    break;
-    default:
-    throw new IllegalArgumentException("Unknown URI: " + uri);
-    }
-
-    SQLiteDatabase db = getDatabase();
-    Cursor cursor = queryBuilder.query(db, projection, selection,
-    selectionArgs, null, null, sortOrder);
-    cursor.setNotificationUri(getContext().getContentResolver(), uri);
-
-    return cursor;
+	    SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
+	    int uriType = sURIMatcher.match(uri);
+	    switch (uriType) {
+		    case ${entity.className?upper_case}_DIR:
+		    	queryBuilder.setTables(TABLENAME);
+		    	break;
+		    case ${entity.className?upper_case}_ID:
+		    	queryBuilder.setTables(TABLENAME);
+		    	queryBuilder.appendWhere(PK + "="
+		    		+ uri.getLastPathSegment());
+		    	break;
+		    default:
+		    	throw new IllegalArgumentException("Unknown URI: " + uri);
+	    }
+	
+	    SQLiteDatabase db = getDatabase();
+	    Cursor cursor = queryBuilder.query(db, projection, selection,
+	    selectionArgs, null, null, sortOrder);
+	    cursor.setNotificationUri(getContext().getContentResolver(), uri);
+	
+	    return cursor;
     }
 
 <#--
@@ -205,13 +206,13 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
 -->
     @Override
     public final String getType(Uri uri) {
-    switch (sURIMatcher.match(uri)) {
-    case ${entity.className?upper_case}_DIR:
-    return CONTENT_TYPE;
-    case ${entity.className?upper_case}_ID:
-    return CONTENT_ITEM_TYPE;
-    default :
-    throw new IllegalArgumentException("Unsupported URI: " + uri);
-    }
-    }
+	    switch (sURIMatcher.match(uri)) {
+		    case ${entity.className?upper_case}_DIR:
+		    	return CONTENT_TYPE;
+		    case ${entity.className?upper_case}_ID:
+		    	return CONTENT_ITEM_TYPE;
+		    default :
+		    	throw new IllegalArgumentException("Unsupported URI: " + uri);
+		    }
+	    }
     }
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 907d1c80..8939a7fb 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -28,6 +28,7 @@ import java.util.List;
 import java.util.ArrayList;
 </#if>
 import android.database.Cursor;
+import android.content.ContentValues;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
@@ -238,6 +239,20 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 </#list>
 </#if>
      }
+     
+     public ContentValues toContentValues(${entity.className} entity) {
+<#if entity.protobuf>
+        throw new UnsupportedOperationException("Protobuf objects cannot be modified");
+<#else>
+		ContentValues cv = new ContentValues(); 
+<#list entity.properties as property>
+		cv.put("${property.columnName}" , entity.get${property.propertyName?cap_first}()<#if
+            property.propertyType == "Enum">.getValue()<#elseif 
+            property.propertyType == "Date">.getTime()</#if>);
+</#list>
+		return cv;
+</#if>     
+     }
     
     /** @inheritdoc */
     @Override
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 0e634779..5dba244a 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -59,6 +59,7 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
     private ${property.javaType} ${property.propertyName};
     
 <#if property.propertyType == "Enum">
+	<#if entity.className == property.className >
    	public enum ${property.enumTypeName} {   	
    		<#list property.enumMap?keys as k>${k}(${ property.enumMap[k] })<#if 
    		k_index == property.enumMap?size -1>;<#else>,</#if></#list>
@@ -82,6 +83,7 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
    			}
     	}
     }
+    </#if>
 </#if>
 </#list>
 
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index c4984e69..831f276f 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -130,6 +130,15 @@ public PropertyBuilder addEnumProperty(String propertyName) {
     	return addProperty(PropertyType.Enum, propertyName);
     }
     
+    public void addEnumProperty(String name, Property prop) {
+    	if (!propertyNames.add(name)) {
+            throw new RuntimeException("Property already defined: " + name);
+        }
+    	Property np = prop.clone();
+    	prop.setPropertyName(name);
+    	properties.add(prop);
+    }
+    
     public PropertyBuilder addProperty(PropertyType propertyType, String propertyName) {
         if (!propertyNames.add(propertyName)) {
             throw new RuntimeException("Property already defined: " + propertyName);
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index 324889ef..c0f6f63b 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -128,8 +128,8 @@ public PropertyBuilder addValue(String name, int val) {
 	private final Schema schema;
 	private final Entity entity;
 	private PropertyType propertyType;
-	private final String propertyName;
-
+	
+	private String propertyName;
 	private String columnName;
 	private String columnType;
 
@@ -146,6 +146,7 @@ public PropertyBuilder addValue(String name, int val) {
 
 	private int ordinal;
 	private String enumTypeName;
+	private String className;
 	private String javaType;
 
 	public Property(Schema schema, Entity entity, PropertyType propertyType,
@@ -154,6 +155,7 @@ public Property(Schema schema, Entity entity, PropertyType propertyType,
 		this.entity = entity;
 		this.propertyName = uncapFirst(propertyName);
 		this.propertyType = propertyType;
+		this.className = entity.getClassName();
 	}
 
 	public static String capFirst(String str) {
@@ -178,6 +180,10 @@ public void setPropertyType(PropertyType propertyType) {
 		this.propertyType = propertyType;
 	}
 
+	void setPropertyName(String name) {
+		this.propertyName = uncapFirst(name);
+	}
+	
 	public String getColumnName() {
 		return columnName;
 	}
@@ -214,6 +220,10 @@ public String getEnumTypeName() {
 		return enumTypeName;
 	}
 	
+	public String getClassName() {
+		return className;
+	}
+
 	public int getOrdinal() {
 		return ordinal;
 	}
@@ -231,25 +241,34 @@ public Entity getEntity() {
 	}
 
 	void init2ndPass() {
-        initConstraint();
-        if (columnType == null) {
-            columnType = schema.mapToDbType(propertyType);
-        }
-        if (columnName == null) {
-            columnName = DaoUtil.dbName(propertyName);
-        }
-        if(propertyType == PropertyType.Enum) {
-        	enumTypeName = capFirst(propertyName);
-        	javaType = schema.getDefaultJavaPackage() +"." + 
-        			entity.getClassName() + "." + enumTypeName;
-        	return;
-        }
-        if (notNull) {
-            javaType = schema.mapToJavaTypeNotNull(propertyType);
-        } else {
-            javaType = schema.mapToJavaTypeNullable(propertyType);
-        }
-    }
+		initConstraint();
+		if (columnType == null) {
+			columnType = schema.mapToDbType(propertyType);
+		}
+		if (columnName == null) {
+			columnName = DaoUtil.dbName(propertyName);
+		}
+		
+		if (propertyType == PropertyType.Enum) {
+			enumTypeName = capFirst(propertyName);
+			
+			if (schema.getDefaultJavaPackage() != null
+					&& !schema.getDefaultJavaPackage().trim().equals("")) {
+				javaType = schema.getDefaultJavaPackage() + ".";
+			}
+			else { 
+				javaType = ""; 
+			}
+			javaType = javaType + entity.getClassName() + "." + enumTypeName;
+			return;
+		}
+		
+		if (notNull) {
+			javaType = schema.mapToJavaTypeNotNull(propertyType);
+		} else {
+			javaType = schema.mapToJavaTypeNullable(propertyType);
+		}
+	}
 
 	private void initConstraint() {
 		StringBuilder constraintBuilder = new StringBuilder();
@@ -283,6 +302,13 @@ private void initConstraint() {
 	void init3ndPass() {
 		// Nothing to do so far
 	}
+	
+	public Property clone() {
+		Property prop = new Property(schema, entity, propertyType, propertyName);
+		prop.init2ndPass();
+		prop.init3ndPass();
+		return prop;
+	}
 
 	@Override
 	public String toString() {
