diff --git a/DaoCore/.classpath b/DaoCore/.classpath
index 7bc01d9a..4d3a4132 100644
--- a/DaoCore/.classpath
+++ b/DaoCore/.classpath
@@ -5,5 +5,6 @@
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry exported="true" kind="con" path="org.springsource.ide.eclipse.gradle.classpathcontainer"/>
 	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
+</classpath>
\ No newline at end of file
diff --git a/DaoCore/.project b/DaoCore/.project
index 6fdcae5d..393a6e60 100644
--- a/DaoCore/.project
+++ b/DaoCore/.project
@@ -32,8 +32,9 @@
 		</buildCommand>
 	</buildSpec>
 	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.springsource.ide.eclipse.gradle.core.nature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
 		<nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>
 	</natures>
 </projectDescription>
diff --git a/DaoCore/.settings/gradle/org.springsource.ide.eclipse.gradle.core.prefs b/DaoCore/.settings/gradle/org.springsource.ide.eclipse.gradle.core.prefs
new file mode 100644
index 00000000..a28cd259
--- /dev/null
+++ b/DaoCore/.settings/gradle/org.springsource.ide.eclipse.gradle.core.prefs
@@ -0,0 +1,4 @@
+#org.springsource.ide.eclipse.gradle.core.preferences.GradleProjectPreferences
+#Wed Aug 14 07:00:13 CEST 2013
+org.springsource.ide.eclipse.gradle.linkedresources=
+org.springsource.ide.eclipse.gradle.rootprojectloc=
diff --git a/DaoCore/build.gradle b/DaoCore/build.gradle
index 2a53a4a2..0521e2aa 100644
--- a/DaoCore/build.gradle
+++ b/DaoCore/build.gradle
@@ -3,7 +3,7 @@ apply plugin: 'maven'
 apply plugin: 'signing'
 
 group = 'de.greenrobot'
-version = '1.3.7'
+version = '1.3.7.n0ha-SNAPSHOT'
 sourceCompatibility = 1.6
 
 def isSnapshot = version.endsWith('-SNAPSHOT')
diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
index 95c29eb2..017d0214 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
@@ -773,36 +773,101 @@ protected K getKeyVerified(T entity) {
         }
     }
 
-    /** Gets the SQLiteDatabase for custom database access. Not needed for greenDAO entities. */
+  /**
+   * Gets the SQLiteDatabase for custom database access. Not needed for greenDAO
+   * entities.
+   */
     public SQLiteDatabase getDatabase() {
-        return db;
+    return this.db;
+  }
+
+  /**
+   * just stores the given entity, if the primary key field is filled, it will
+   * be updated, a check if the given primary key exists will be performed.
+   * Otherwise it will be inserted.
+   * 
+   * @see AbstractDao#save(Object, boolean)
+   * @param entity
+   *          the entity to save
+   * @return the saved entity
+   */
+  public T save(T entity) {
+    return this.save(entity, true);
+  }
+
+  /**
+   * just stores the given entity. if <code>checkExisting</code> is set to
+   * <code>true</code>, it will be checked if the given entity with the given
+   * primary key exists in the database
+   * 
+   * @param entity
+   *          the entity to save
+   * @param checkExistingPK
+   *          if <code>true</code> the primary key of the entity will be checked
+   *          against the database
+   * @return the saved entity
+   */
+  public T save(T entity, boolean checkExistingPK) {
+    K primaryKeyValue = this.getKey(entity);
+    if (primaryKeyValue == null) { // insert if there is no PK
+      this.insert(entity);
+    } else {
+      if (checkExistingPK) { // if have to chack, load the entity for the PK and
+                             // insert or update
+        T loadedEntity = this.load(primaryKeyValue);
+        if (loadedEntity != null) {
+          this.update(entity);
+        } else {
+          this.insert(entity);
+        }
+      } else { // if pk is set and no check wanted, just update. maybe an error
+               // will be thrown
+        this.update(entity);
+      }
+    }
+    return entity;
     }
 
-    /** Reads the values from the current position of the given cursor and returns a new entity. */
+  /**
+   * Reads the values from the current position of the given cursor and returns
+   * a new entity.
+   */
     abstract protected T readEntity(Cursor cursor, int offset);
 
-    /** Reads the key from the current position of the given cursor, or returns null if there's no single-value key. */
+  /**
+   * Reads the key from the current position of the given cursor, or returns
+   * null if there's no single-value key.
+   */
     abstract protected K readKey(Cursor cursor, int offset);
 
-    /** Reads the values from the current position of the given cursor into an existing entity. */
+  /**
+   * Reads the values from the current position of the given cursor into an
+   * existing entity.
+   */
     abstract protected void readEntity(Cursor cursor, T entity, int offset);
 
-    /** Binds the entity's values to the statement. Make sure to synchronize the statement outside of the method. */
+  /**
+   * Binds the entity's values to the statement. Make sure to synchronize the
+   * statement outside of the method.
+   */
     abstract protected void bindValues(SQLiteStatement stmt, T entity);
 
     /**
-     * Updates the entity's key if possible (only for Long PKs currently). This method must always return the entity's
-     * key regardless of whether the key existed before or not.
+   * Updates the entity's key if possible (only for Long PKs currently). This
+   * method must always return the entity's key regardless of whether the key
+   * existed before or not.
      */
     abstract protected K updateKeyAfterInsert(T entity, long rowId);
 
     /**
-     * Returns the value of the primary key, if the entity has a single primary key, or, if not, null. Returns null if
-     * entity is null.
+   * Returns the value of the primary key, if the entity has a single primary
+   * key, or, if not, null. Returns null if entity is null.
      */
     abstract protected K getKey(T entity);
 
-    /** Returns true if the Entity class can be updated, e.g. for setting the PK after insert. */
+  /**
+   * Returns true if the Entity class can be updated, e.g. for setting the PK
+   * after insert.
+   */
     abstract protected boolean isEntityUpdateable();
-
 }
diff --git a/DaoCore/src/de/greenrobot/dao/query/AbstractEntityQueryBuilder.java b/DaoCore/src/de/greenrobot/dao/query/AbstractEntityQueryBuilder.java
new file mode 100644
index 00000000..c44a6d74
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/query/AbstractEntityQueryBuilder.java
@@ -0,0 +1,36 @@
+/**
+ * 
+ */
+package de.greenrobot.dao.query;
+
+import de.greenrobot.dao.AbstractDao;
+
+/**
+ * @author martin.s.schumacher
+ * @since 14.08.2013 17:25:38
+ * 
+ */
+public abstract class AbstractEntityQueryBuilder<T> extends QueryBuilder<T> {
+
+  protected AbstractEntityQueryBuilder(AbstractDao<T, ?> dao) {
+    super(dao);
+  }
+
+  protected AbstractEntityQueryBuilder(AbstractDao<T, ?> dao, String tablePrefix) {
+    super(dao, tablePrefix);
+  }
+
+  /**
+   * <p>
+   * creates a {@link Query} for <code>T</code> to find one by example.
+   * <p>
+   * Just nullable fields can be used.
+   * 
+   * @param example
+   *          the entity filled with example values
+   * 
+   * @return a {@link Query} to find the example entity
+   */
+  public abstract Query<T> findByExample(T example);
+
+}
diff --git a/DaoGenerator/build.gradle b/DaoGenerator/build.gradle
index 874f89ce..1e14720e 100644
--- a/DaoGenerator/build.gradle
+++ b/DaoGenerator/build.gradle
@@ -3,7 +3,7 @@ apply plugin: 'maven'
 apply plugin: 'signing'
 
 group = 'de.greenrobot'
-version = '1.3.1-SNAPSHOT'
+version = '1.3.7.n0ha-SNAPSHOT'
 sourceCompatibility = 1.6
 
 def isSnapshot = version.endsWith('-SNAPSHOT')
diff --git a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
index 47bba961..c62e4b2a 100644
--- a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
+++ b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
@@ -40,35 +40,38 @@ public static void main(String[] args) throws Exception {
     private Schema schema2;
 
     public TestDaoGenerator() {
-        schema = new Schema(1, "de.greenrobot.daotest");
-        schema.setDefaultJavaPackageTest("de.greenrobot.daotest.entity");
-
-        createSimple();
-        createSimpleNotNull();
-        testEntity = createTest();
-        createRelation();
-        createDate();
-        createSpecialNames();
-        createAbcdef();
-        createToMany();
-        createTreeEntity();
-        createActive();
-        createExtendsImplements();
-        createStringKeyValue();
-        createAutoincrement();
-        createSqliteMaster();
-
-        createSchema2();
+    this.schema = new Schema(1, "de.greenrobot.daotest");
+    this.schema.setDefaultJavaPackageTest("de.greenrobot.daotest.entity");
+
+    this.createSimple();
+    this.createSimpleNotNull();
+    this.testEntity = this.createTest();
+    this.createRelation();
+    this.createDate();
+    this.createSpecialNames();
+    this.createAbcdef();
+    this.createToMany();
+    this.createTreeEntity();
+    this.createActive();
+    this.createExtendsImplements();
+    this.createChildclass();
+    this.createStringKeyValue();
+    this.createAutoincrement();
+    this.createSqliteMaster();
+    this.createEntityQueryBuilder();
+    this.createSave();
+
+    this.createSchema2();
     }
 
     public void generate() throws Exception {
         DaoGenerator daoGenerator = new DaoGenerator();
-        daoGenerator.generateAll(schema, "../DaoTest/src-gen", "../DaoTest/src");
-        daoGenerator.generateAll(schema2, "../DaoTest/src-gen", "../DaoTest/src");
+    daoGenerator.generateAll(this.schema, "../DaoTest/src-gen", "../DaoTest/src");
+    daoGenerator.generateAll(this.schema2, "../DaoTest/src-gen", "../DaoTest/src");
     }
 
     protected void createSimple() {
-        Entity simple = schema.addEntity("SimpleEntity");
+    Entity simple = this.schema.addEntity("SimpleEntity");
         simple.addIdProperty();
         simple.addBooleanProperty("simpleBoolean");
         simple.addByteProperty("simpleByte");
@@ -216,28 +219,35 @@ protected void createExtendsImplements() {
         entity.implementsSerializable();
     }
 
+  protected void createChildclass() {
+    Entity entity = this.schema.addEntity("ChildclassEntity");
+    entity.addIdProperty();
+    entity.addStringProperty("text");
+    entity.setChildclass("TestChildclass");
+  }
+
     private void createSchema2() {
-        schema2 = new Schema(1, "de.greenrobot.daotest2");
-        schema2.setDefaultJavaPackageTest("de.greenrobot.daotest2.entity");
-        schema2.setDefaultJavaPackageDao("de.greenrobot.daotest2.dao");
-        schema2.enableKeepSectionsByDefault();
+    this.schema2 = new Schema(1, "de.greenrobot.daotest2");
+    this.schema2.setDefaultJavaPackageTest("de.greenrobot.daotest2.entity");
+    this.schema2.setDefaultJavaPackageDao("de.greenrobot.daotest2.dao");
+    this.schema2.enableKeepSectionsByDefault();
 
-        Entity keepEntity = schema2.addEntity("KeepEntity");
+    Entity keepEntity = this.schema2.addEntity("KeepEntity");
         keepEntity.addIdProperty();
 
-        Entity toManyTarget2 = schema2.addEntity("ToManyTarget2");
+    Entity toManyTarget2 = this.schema2.addEntity("ToManyTarget2");
         toManyTarget2.addIdProperty();
         Property toManyTarget2FkId = toManyTarget2.addLongProperty("fkId").getProperty();
         toManyTarget2.setSkipGenerationTest(true);
 
-        Entity toOneTarget2 = schema2.addEntity("ToOneTarget2");
+    Entity toOneTarget2 = this.schema2.addEntity("ToOneTarget2");
         toOneTarget2.addIdProperty();
         toOneTarget2.setJavaPackage("de.greenrobot.daotest2.to1_specialentity");
         toOneTarget2.setJavaPackageDao("de.greenrobot.daotest2.to1_specialdao");
         toOneTarget2.setJavaPackageTest("de.greenrobot.daotest2.to1_specialtest");
         toOneTarget2.setSkipGenerationTest(true);
 
-        Entity relationSource2 = schema2.addEntity("RelationSource2");
+    Entity relationSource2 = this.schema2.addEntity("RelationSource2");
         relationSource2.addIdProperty();
         relationSource2.addToMany(toManyTarget2, toManyTarget2FkId);
         Property toOneId = relationSource2.addLongProperty("toOneId").getProperty();
@@ -270,4 +280,23 @@ protected void createSqliteMaster() {
         entity.addStringProperty("sql");
     }
 
+  protected void createEntityQueryBuilder() {
+    Entity entity = this.schema.addEntity("EntityQueryBuilderEntity");
+    entity.addIdProperty();
+    entity.addStringProperty("text");
+    entity.addStringProperty("text2");
+    entity.addIntProperty("intprop").complexJavaType();
+    entity.addIntProperty("intprop2").notNull();
+    entity.addIntProperty("intprop3").notNull().complexJavaType();
+    entity.addIntProperty("intprop4");
+    entity.setEntityQueryBuilder(true);
+  }
+
+  protected void createSave() {
+    Entity entity = this.schema.addEntity("SaveEntity");
+    entity.addIdProperty();
+    entity.addStringProperty("text");
+    entity.setEntityQueryBuilder(true);
+  }
+
 }
diff --git a/DaoGenerator/src-template/dao-deep.ftl b/DaoGenerator/src-template/dao-deep.ftl
index eee5dc97..5a58f961 100644
--- a/DaoGenerator/src-template/dao-deep.ftl
+++ b/DaoGenerator/src-template/dao-deep.ftl
@@ -42,12 +42,12 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
         return selectDeep;
     }
     
-    protected ${entity.className} loadCurrentDeep(Cursor cursor, boolean lock) {
-        ${entity.className} entity = loadCurrent(cursor, 0, lock);
+    protected ${entity.referencedClassName} loadCurrentDeep(Cursor cursor, boolean lock) {
+        ${entity.referencedClassName} entity = loadCurrent(cursor, 0, lock);
         int offset = getAllColumns().length;
 
 <#list entity.toOneRelations as toOne>
-        ${toOne.targetEntity.className} ${toOne.name} = loadCurrentOther(daoSession.get${toOne.targetEntity.classNameDao}(), cursor, offset);
+        ${toOne.targetEntity.referencedClassName} ${toOne.name} = loadCurrentOther(daoSession.get${toOne.targetEntity.classNameDao}(), cursor, offset);
 <#if toOne.fkProperties[0].notNull>         if(${toOne.name} != null) {
     </#if>        entity.set${toOne.name?cap_first}(${toOne.name});
 <#if toOne.fkProperties[0].notNull>
@@ -61,7 +61,7 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
         return entity;    
     }
 
-    public ${entity.className} loadDeep(Long key) {
+    public ${entity.referencedClassName} loadDeep(Long key) {
         assertSinglePk();
         if (key == null) {
             return null;
@@ -89,9 +89,9 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
     }
     
     /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
-    public List<${entity.className}> loadAllDeepFromCursor(Cursor cursor) {
+    public List<${entity.referencedClassName}> loadAllDeepFromCursor(Cursor cursor) {
         int count = cursor.getCount();
-        List<${entity.className}> list = new ArrayList<${entity.className}>(count);
+        List<${entity.referencedClassName}> list = new ArrayList<${entity.referencedClassName}>(count);
         
         if (cursor.moveToFirst()) {
             if (identityScope != null) {
@@ -111,7 +111,7 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
         return list;
     }
     
-    protected List<${entity.className}> loadDeepAllAndCloseCursor(Cursor cursor) {
+    protected List<${entity.referencedClassName}> loadDeepAllAndCloseCursor(Cursor cursor) {
         try {
             return loadAllDeepFromCursor(cursor);
         } finally {
@@ -121,7 +121,7 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
     
 
     /** A raw-style query where you can pass any WHERE clause and arguments. */
-    public List<${entity.className}> queryDeep(String where, String... selectionArg) {
+    public List<${entity.referencedClassName}> queryDeep(String where, String... selectionArg) {
         Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
         return loadDeepAllAndCloseCursor(cursor);
     }
diff --git a/DaoGenerator/src-template/dao-session.ftl b/DaoGenerator/src-template/dao-session.ftl
index e0201a48..6cd4a411 100644
--- a/DaoGenerator/src-template/dao-session.ftl
+++ b/DaoGenerator/src-template/dao-session.ftl
@@ -29,7 +29,13 @@ import de.greenrobot.dao.identityscope.IdentityScopeType;
 import de.greenrobot.dao.internal.DaoConfig;
 
 <#list schema.entities as entity>
+<#if entity.hasChildclassWithPackage>
+import ${entity.childclass};
+<#elseif entity.hasChildclassInEntityPackage>
+import ${entity.javaPackage}.${entity.childclass};
+<#else>
 import ${entity.javaPackage}.${entity.className};
+</#if>
 </#list>
 
 <#list schema.entities as entity>
@@ -68,7 +74,7 @@ public class DaoSession extends AbstractDaoSession {
 </#list>        
 
 <#list schema.entities as entity>
-        registerDao(${entity.className}.class, ${entity.classNameDao?uncap_first});
+        registerDao(${entity.referencedClassName}.class, ${entity.classNameDao?uncap_first});
 </#list>        
     }
     
diff --git a/DaoGenerator/src-template/dao-unit-test.ftl b/DaoGenerator/src-template/dao-unit-test.ftl
index 376cf431..7c92098f 100644
--- a/DaoGenerator/src-template/dao-unit-test.ftl
+++ b/DaoGenerator/src-template/dao-unit-test.ftl
@@ -26,19 +26,25 @@ import de.greenrobot.dao.test.AbstractDaoTestStringPk;
 import de.greenrobot.dao.test.AbstractDaoTestLongPk;
 </#if>
 
+<#if entity.hasChildclassWithPackage>
+import ${entity.childclass};
+<#elseif entity.hasChildclassInEntityPackage>
+import ${entity.javaPackage}.${entity.childclass};
+<#else>
 import ${entity.javaPackage}.${entity.className};
+</#if>
 import ${entity.javaPackageDao}.${entity.classNameDao};
 
 public class ${entity.classNameTest} extends <#if
-isStringPK>AbstractDaoTestStringPk<${entity.classNameDao}, ${entity.className}><#else>AbstractDaoTestLongPk<${entity.classNameDao}, ${entity.className}></#if> {
+isStringPK>AbstractDaoTestStringPk<${entity.classNameDao}, ${entity.referencedClassName}><#else>AbstractDaoTestLongPk<${entity.classNameDao}, ${entity.referencedClassName}></#if> {
 
     public ${entity.classNameTest}() {
         super(${entity.classNameDao}.class);
     }
 
     @Override
-    protected ${entity.className} createEntity(<#if isStringPK>String<#else>Long</#if> key) {
-        ${entity.className} entity = new ${entity.className}();
+    protected ${entity.referencedClassName} createEntity(<#if isStringPK>String<#else>Long</#if> key) {
+        ${entity.referencedClassName} entity = new ${entity.referencedClassName}();
 <#if entity.pkProperty??>
         entity.set${entity.pkProperty.propertyName?cap_first}(key);
 </#if>
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 443f74dc..337ad35e 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -24,8 +24,9 @@ package ${entity.javaPackageDao};
 <#if entity.toOneRelations?has_content || entity.incomingToManyRelations?has_content>
 import java.util.List;
 </#if>
-<#if entity.toOneRelations?has_content>
+<#if entity.toOneRelations?has_content || entity.hasEntityQueryBuilder>
 import java.util.ArrayList;
+import de.greenrobot.dao.query.AbstractEntityQueryBuilder;
 </#if>
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
@@ -37,11 +38,13 @@ import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.SqlUtils;
 </#if>
 import de.greenrobot.dao.internal.DaoConfig;
-<#if entity.incomingToManyRelations?has_content>
+<#if entity.incomingToManyRelations?has_content || entity.hasEntityQueryBuilder>
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
 </#if>
-
+<#if entity.hasEntityQueryBuilder>
+import de.greenrobot.dao.query.WhereCondition;
+</#if>
 <#if entity.javaPackageDao != schema.defaultJavaPackageDao>
 import ${schema.defaultJavaPackageDao}.DaoSession;
 
@@ -50,9 +53,15 @@ import ${schema.defaultJavaPackageDao}.DaoSession;
 <#list entity.additionalImportsDao as additionalImport>
 import ${additionalImport};
 </#list>
-
 </#if>
+
+<#if entity.hasChildclassWithPackage>
+import ${entity.childclass};
+<#elseif entity.hasChildclassInEntityPackage>
+import ${entity.javaPackage}.${entity.childclass};
+<#else>
 import ${entity.javaPackage}.${entity.className};
+</#if>
 <#if entity.protobuf>
 import ${entity.javaPackage}.${entity.className}.Builder;
 </#if>
@@ -61,7 +70,7 @@ import ${entity.javaPackage}.${entity.className}.Builder;
 /** 
  * DAO for table ${entity.tableName}.
 */
-public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${entity.pkType}> {
+public class ${entity.classNameDao} extends AbstractDao<${entity.referencedClassName}, ${entity.pkType}> {
 
     public static final String TABLENAME = "${entity.tableName}";
 
@@ -80,7 +89,7 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
 
 </#if>
 <#list entity.incomingToManyRelations as toMany>
-    private Query<${toMany.targetEntity.className}> ${toMany.sourceEntity.className?uncap_first}_${toMany.name?cap_first}Query;
+    private Query<${toMany.targetEntity.referencedClassName}> ${toMany.sourceEntity.referencedClassName?uncap_first}_${toMany.name?cap_first}Query;
 </#list>
 
     public ${entity.classNameDao}(DaoConfig config) {
@@ -121,7 +130,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 </#if>
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ${entity.className} entity) {
+    protected void bindValues(SQLiteStatement stmt, ${entity.referencedClassName} entity) {
         stmt.clearBindings();
 <#list entity.properties as property>
 <#if property.notNull || entity.protobuf>
@@ -143,7 +152,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#list entity.toOneRelations as toOne>
 <#if !toOne.fkProperties?has_content>
 
-        ${toOne.targetEntity.className} ${toOne.name} = entity.peak${toOne.name?cap_first}();
+        ${toOne.targetEntity.referencedClassName} ${toOne.name} = entity.peak${toOne.name?cap_first}();
         if(${toOne.name} != null) {
             ${toOne.targetEntity.pkProperty.javaType} ${toOne.name}__targetKey = ${toOne.name}.get${toOne.targetEntity.pkProperty.propertyName?cap_first}();
 <#if !toOne.targetEntity.pkProperty.notNull>
@@ -160,7 +169,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 
 <#if entity.active>
     @Override
-    protected void attachEntity(${entity.className} entity) {
+    protected void attachEntity(${entity.referencedClassName} entity) {
         super.attachEntity(entity);
         entity.__setDaoSession(daoSession);
     }
@@ -182,9 +191,9 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 
     /** @inheritdoc */
     @Override
-    public ${entity.className} readEntity(Cursor cursor, int offset) {
+    public ${entity.referencedClassName} readEntity(Cursor cursor, int offset) {
 <#if entity.protobuf>
-        Builder builder = ${entity.className}.newBuilder();
+        Builder builder = ${entity.referencedClassName}.newBuilder();
 <#list entity.properties as property>
 <#if !property.notNull>
         if (!cursor.isNull(offset + ${property_index})) {
@@ -194,11 +203,11 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 </#if>        
 </#list>        
         return builder.build();
-<#elseif entity.constructors>
+<#elseif entity.constructors && !entity.hasChildclass>
 <#--
 ############################## readEntity non-protobuff, constructor ############################## 
 -->
-        ${entity.className} entity = new ${entity.className}( //
+        ${entity.referencedClassName} entity = new ${entity.referencedClassName}( //
 <#list entity.properties as property>
             <#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#if
             property.propertyType == "Byte">(byte) </#if><#if
@@ -212,7 +221,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#--
 ############################## readEntity non-protobuff, setters ############################## 
 -->
-        ${entity.className} entity = new ${entity.className}();
+        ${entity.referencedClassName} entity = new ${entity.referencedClassName}();
         readEntity(cursor, entity, offset);
         return entity;
 </#if>
@@ -220,7 +229,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
      
     /** @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, ${entity.className} entity, int offset) {
+    public void readEntity(Cursor cursor, ${entity.referencedClassName} entity, int offset) {
 <#if entity.protobuf>
         throw new UnsupportedOperationException("Protobuf objects cannot be modified");
 <#else> 
@@ -236,7 +245,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
     
     /** @inheritdoc */
     @Override
-    protected ${entity.pkType} updateKeyAfterInsert(${entity.className} entity, long rowId) {
+    protected ${entity.pkType} updateKeyAfterInsert(${entity.referencedClassName} entity, long rowId) {
 <#if entity.pkProperty??>
 <#if entity.pkProperty.propertyType == "Long">
 <#if !entity.protobuf>
@@ -254,7 +263,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
     
     /** @inheritdoc */
     @Override
-    public ${entity.pkType} getKey(${entity.className} entity) {
+    public ${entity.pkType} getKey(${entity.referencedClassName} entity) {
 <#if entity.pkProperty??>
         if(entity != null) {
             return entity.get${entity.pkProperty.propertyName?cap_first}();
@@ -273,22 +282,22 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
     }
     
 <#list entity.incomingToManyRelations as toMany>
-    /** Internal query to resolve the "${toMany.name}" to-many relationship of ${toMany.sourceEntity.className}. */
-    public List<${toMany.targetEntity.className}> _query${toMany.sourceEntity.className?cap_first}_${toMany.name?cap_first}(<#--
+    /** Internal query to resolve the "${toMany.name}" to-many relationship of ${toMany.sourceEntity.referencedClassName}. */
+    public List<${toMany.targetEntity.referencedClassName}> _query${toMany.sourceEntity.referencedClassName?cap_first}_${toMany.name?cap_first}(<#--
     --><#list toMany.targetProperties as property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
         synchronized (this) {
-            if (${toMany.sourceEntity.className?uncap_first}_${toMany.name?cap_first}Query == null) {
-                QueryBuilder<${toMany.targetEntity.className}> queryBuilder = queryBuilder();
+            if (${toMany.sourceEntity.referencedClassName?uncap_first}_${toMany.name?cap_first}Query == null) {
+                QueryBuilder<${toMany.targetEntity.referencedClassName}> queryBuilder = queryBuilder();
 <#list toMany.targetProperties as property>
                 queryBuilder.where(Properties.${property.propertyName?cap_first}.eq(null));
 </#list>
 <#if toMany.order?has_content>
                 queryBuilder.orderRaw("${toMany.order}");
 </#if>
-                ${toMany.sourceEntity.className?uncap_first}_${toMany.name?cap_first}Query = queryBuilder.build();
+                ${toMany.sourceEntity.referencedClassName?uncap_first}_${toMany.name?cap_first}Query = queryBuilder.build();
             }
         }
-        Query<${toMany.targetEntity.className}> query = ${toMany.sourceEntity.className?uncap_first}_${toMany.name?cap_first}Query.forCurrentThread();
+        Query<${toMany.targetEntity.referencedClassName}> query = ${toMany.sourceEntity.referencedClassName?uncap_first}_${toMany.name?cap_first}Query.forCurrentThread();
 <#list toMany.targetProperties as property>
         query.setParameter(${property_index}, ${property.propertyName});
 </#list>
@@ -296,7 +305,70 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
     }
 
 </#list>   
+ 
 <#if entity.toOneRelations?has_content>
     <#include "dao-deep.ftl">
 </#if>
+<#if entity.hasEntityQueryBuilder>
+    public ${entity.referencedClassName}QueryBuilder queryBuilder() {
+      return new ${entity.referencedClassName}QueryBuilder(this);
+    }
+
+    public static class ${entity.referencedClassName}QueryBuilder extends AbstractEntityQueryBuilder<${entity.referencedClassName}> {
+        ${entity.referencedClassName}QueryBuilder(AbstractDao<${entity.referencedClassName}, ?> dao) {
+            super(dao);
+        }
+        
+        public Query<${entity.referencedClassName}> findByPrimaryKey(${entity.pkProperty.propertyType} pk) {
+            this.where(Properties.${entity.pkProperty.propertyName?cap_first}.eq(pk));
+            return this.build();
+        }
+        
+        public Query<${entity.referencedClassName}> findAll() {
+            return this.build();
+        }
+        
+        /**
+         * <p>creates a {@link Query} for {@link ${entity.referencedClassName}} to find one by example.
+         * <p>Just nullable fields can be used. Just set one of these properties:
+         * <ul>
+<#list entity.properties as property>
+  <#if !property.primaryKey && property.complexJavaType>
+         * <li><code>${property.javaType} ${property.propertyName}</code></li>
+  </#if>
+</#list>
+         * </ul>
+         *
+         * @param example
+         *          the entity filled with example values
+         * 
+         * @return a {@link Query} to find the example entity
+         */
+        public Query<${entity.referencedClassName}> findByExample(${entity.referencedClassName} example) { 
+            if(example.get${entity.pkProperty.propertyName?cap_first}() != null) {
+                return findByPrimaryKey(example.get${entity.pkProperty.propertyName?cap_first}());
+            }
+        	
+            ArrayList<WhereCondition> conditions = new ArrayList<WhereCondition>();
+
+<#list entity.properties as property>
+  <#if !property.primaryKey && property.complexJavaType>
+            if (example.get${property.propertyName?cap_first}() != null) {
+                conditions.add(Properties.${property.propertyName?cap_first}.eq(example.get${property.propertyName?cap_first}()));
+            }
+  </#if>
+</#list>
+           
+            if (conditions.isEmpty()) {
+                throw new IllegalArgumentException("No example values given. Please provide at least one value!");
+            }
+
+            WhereCondition firstCondition = conditions.get(0);
+            conditions.remove(0);
+            this.where(firstCondition, conditions.toArray(new WhereCondition[0]));
+
+        	return this.build();
+        }
+    }
+</#if>
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index dc8b1049..5b3f6aee 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -59,6 +59,7 @@
     private Property pkProperty;
     private String pkType;
     private String superclass;
+  private String childclass;
 
     private boolean protobuf;
     private boolean constructors;
@@ -67,6 +68,7 @@
     private boolean skipTableCreation;
     private Boolean active;
     private Boolean hasKeepSections;
+  private boolean entityQueryBuilder;
 
     Entity(Schema schema, String className) {
         this.schema = schema;
@@ -87,62 +89,68 @@
     }
 
     public PropertyBuilder addBooleanProperty(String propertyName) {
-        return addProperty(PropertyType.Boolean, propertyName);
+    return this.addProperty(PropertyType.Boolean, propertyName);
     }
 
     public PropertyBuilder addByteProperty(String propertyName) {
-        return addProperty(PropertyType.Byte, propertyName);
+    return this.addProperty(PropertyType.Byte, propertyName);
     }
 
     public PropertyBuilder addShortProperty(String propertyName) {
-        return addProperty(PropertyType.Short, propertyName);
+    return this.addProperty(PropertyType.Short, propertyName);
     }
 
     public PropertyBuilder addIntProperty(String propertyName) {
-        return addProperty(PropertyType.Int, propertyName);
+    return this.addProperty(PropertyType.Int, propertyName);
     }
 
     public PropertyBuilder addLongProperty(String propertyName) {
-        return addProperty(PropertyType.Long, propertyName);
+    return this.addProperty(PropertyType.Long, propertyName);
     }
 
     public PropertyBuilder addFloatProperty(String propertyName) {
-        return addProperty(PropertyType.Float, propertyName);
+    return this.addProperty(PropertyType.Float, propertyName);
     }
 
     public PropertyBuilder addDoubleProperty(String propertyName) {
-        return addProperty(PropertyType.Double, propertyName);
+    return this.addProperty(PropertyType.Double, propertyName);
     }
 
     public PropertyBuilder addByteArrayProperty(String propertyName) {
-        return addProperty(PropertyType.ByteArray, propertyName);
+    return this.addProperty(PropertyType.ByteArray, propertyName);
     }
 
     public PropertyBuilder addStringProperty(String propertyName) {
-        return addProperty(PropertyType.String, propertyName);
+    return this.addProperty(PropertyType.String, propertyName);
     }
 
     public PropertyBuilder addDateProperty(String propertyName) {
-        return addProperty(PropertyType.Date, propertyName);
+    return this.addProperty(PropertyType.Date, propertyName);
     }
 
     public PropertyBuilder addProperty(PropertyType propertyType, String propertyName) {
-        if (!propertyNames.add(propertyName)) {
+    if (!this.propertyNames.add(propertyName)) {
             throw new RuntimeException("Property already defined: " + propertyName);
         }
-        PropertyBuilder builder = new Property.PropertyBuilder(schema, this, propertyType, propertyName);
-        properties.add(builder.getProperty());
+    PropertyBuilder builder = new Property.PropertyBuilder(this.schema, this, propertyType, propertyName);
+    this.properties.add(builder.getProperty());
         return builder;
     }
 
-    /** Adds a standard _id column required by standard Android classes, e.g. list adapters. */
+  /**
+   * Adds a standard _id column required by standard Android classes, e.g. list
+   * adapters.
+   */
     public PropertyBuilder addIdProperty() {
-        PropertyBuilder builder = addLongProperty("id");
+    PropertyBuilder builder = this.addLongProperty("id");
         builder.columnName("_id").primaryKey();
         return builder;
     }
 
-    /** Adds a to-many relationship; the target entity is joined to the PK property of this entity (typically the ID). */
+  /**
+   * Adds a to-many relationship; the target entity is joined to the PK property
+   * of this entity (typically the ID).
+   */
     public ToMany addToMany(Entity target, Property targetProperty) {
         Property[] targetProperties = {targetProperty};
         return addToMany(null, target, targetProperties);
@@ -153,14 +161,15 @@ public ToMany addToMany(Entity target, Property targetProperty) {
      * ToMany#setName(String)}.
      */
     public ToMany addToMany(Entity target, Property targetProperty, String name) {
-        ToMany toMany = addToMany(target, targetProperty);
+    ToMany toMany = this.addToMany(target, targetProperty);
         toMany.setName(name);
         return toMany;
     }
 
     /**
-     * Add a to-many relationship; the target entity is joined using the given target property (of the target entity)
-     * and given source property (of this entity).
+   * Add a to-many relationship; the target entity is joined using the given
+   * target property (of the target entity) and given source property (of this
+   * entity).
      */
     public ToMany addToMany(Property sourceProperty, Entity target, Property targetProperty) {
         Property[] sourceProperties = {sourceProperty};
@@ -173,15 +182,15 @@ public ToMany addToMany(Property[] sourceProperties, Entity target, Property[] t
             throw new IllegalStateException("Protobuf entities do not support realtions, currently");
         }
 
-        ToMany toMany = new ToMany(schema, this, sourceProperties, target, targetProperties);
-        toManyRelations.add(toMany);
+    ToMany toMany = new ToMany(this.schema, this, sourceProperties, target, targetProperties);
+    this.toManyRelations.add(toMany);
         target.incomingToManyRelations.add(toMany);
         return toMany;
     }
 
     /**
-     * Adds a to-one relationship to the given target entity using the given given foreign key property (which belongs
-     * to this entity).
+   * Adds a to-one relationship to the given target entity using the given given
+   * foreign key property (which belongs to this entity).
      */
     public ToOne addToOne(Entity target, Property fkProperty) {
         if (protobuf) {
@@ -194,15 +203,18 @@ public ToOne addToOne(Entity target, Property fkProperty) {
         return toOne;
     }
 
-    /** Convenience for {@link #addToOne(Entity, Property)} with a subsequent call to {@link ToOne#setName(String)}. */
+  /**
+   * Convenience for {@link #addToOne(Entity, Property)} with a subsequent call
+   * to {@link ToOne#setName(String)}.
+   */
     public ToOne addToOne(Entity target, Property fkProperty, String name) {
-        ToOne toOne = addToOne(target, fkProperty);
+    ToOne toOne = this.addToOne(target, fkProperty);
         toOne.setName(name);
         return toOne;
     }
 
     public ToOne addToOneWithoutProperty(String name, Entity target, String fkColumnName) {
-        return addToOneWithoutProperty(name, target, fkColumnName, false, false);
+    return this.addToOneWithoutProperty(name, target, fkColumnName, false, false);
     }
 
     public ToOne addToOneWithoutProperty(String name, Entity target, String fkColumnName, boolean notNull,
@@ -263,19 +275,27 @@ public void setTableName(String tableName) {
     }
 
     public String getClassName() {
-        return className;
+    return this.className;
+  }
+
+  public String getReferencedClassName() {
+    if (this.getHasChildclass()) {
+      return this.childclass;
+    } else {
+      return this.className;
+    }
     }
 
     public List<Property> getProperties() {
-        return properties;
+    return this.properties;
     }
 
     public List<Property> getPropertiesColumns() {
-        return propertiesColumns;
+    return this.propertiesColumns;
     }
 
     public String getJavaPackage() {
-        return javaPackage;
+    return this.javaPackage;
     }
 
     public void setJavaPackage(String javaPackage) {
@@ -412,7 +432,7 @@ public void setHasKeepSections(Boolean hasKeepSections) {
     }
 
     public List<String> getInterfacesToImplement() {
-        return interfacesToImplement;
+    return this.interfacesToImplement;
     }
 
     public List<ContentProvider> getContentProviders() {
@@ -421,57 +441,86 @@ public void setHasKeepSections(Boolean hasKeepSections) {
 
     public void implementsInterface(String... interfaces) {
         for (String interfaceToImplement : interfaces) {
-            interfacesToImplement.add(interfaceToImplement);
+      this.interfacesToImplement.add(interfaceToImplement);
         }
     }
 
     public void implementsSerializable() {
-        interfacesToImplement.add("java.io.Serializable");
+    this.interfacesToImplement.add("java.io.Serializable");
     }
 
     public String getSuperclass() {
-        return superclass;
+    return this.superclass;
     }
 
     public void setSuperclass(String classToExtend) {
         this.superclass = classToExtend;
     }
 
+  public String getChildclass() {
+    return this.childclass;
+  }
+
+  public void setChildclass(String childclass) {
+    this.childclass = childclass;
+  }
+
+  public boolean getHasChildclassWithPackage() {
+    return this.getHasChildclass() && this.childclass.contains(".");
+  }
+
+  public boolean getHasChildclass() {
+    return (this.childclass != null) && !"".equals(this.childclass.trim());
+  }
+
+  public boolean getHasChildclassInEntityPackage() {
+    return this.getHasChildclass() && !this.childclass.contains(".");
+  }
+
+  public boolean getHasEntityQueryBuilder() {
+    return this.entityQueryBuilder;
+  }
+
+  public void setEntityQueryBuilder(boolean entityQueryBuilder) {
+    this.entityQueryBuilder = entityQueryBuilder;
+  }
+
     void init2ndPass() {
-        init2nPassNamesWithDefaults();
+    this.init2nPassNamesWithDefaults();
 
-        for (int i = 0; i < properties.size(); i++) {
-            Property property = properties.get(i);
+    for (int i = 0; i < this.properties.size(); i++) {
+      Property property = this.properties.get(i);
             property.setOrdinal(i);
             property.init2ndPass();
             if (property.isPrimaryKey()) {
-                propertiesPk.add(property);
+        this.propertiesPk.add(property);
             } else {
-                propertiesNonPk.add(property);
+        this.propertiesNonPk.add(property);
             }
         }
 
-        if (propertiesPk.size() == 1) {
-            pkProperty = propertiesPk.get(0);
-            pkType = schema.mapToJavaTypeNullable(pkProperty.getPropertyType());
+    if (this.propertiesPk.size() == 1) {
+      this.pkProperty = this.propertiesPk.get(0);
+      this.pkType = this.schema.mapToJavaTypeNullable(this.pkProperty.getPropertyType());
         } else {
-            pkType = "Void";
+      this.pkType = "Void";
         }
 
-        propertiesColumns = new ArrayList<Property>(properties);
-        for (ToOne toOne : toOneRelations) {
+    this.propertiesColumns = new ArrayList<Property>(this.properties);
+    for (ToOne toOne : this.toOneRelations) {
             toOne.init2ndPass();
             Property[] fkProperties = toOne.getFkProperties();
             for (Property fkProperty : fkProperties) {
-                if (!propertiesColumns.contains(fkProperty)) {
-                    propertiesColumns.add(fkProperty);
+        if (!this.propertiesColumns.contains(fkProperty)) {
+          this.propertiesColumns.add(fkProperty);
                 }
             }
         }
 
-        for (ToMany toMany : toManyRelations) {
+    for (ToMany toMany : this.toManyRelations) {
             toMany.init2ndPass();
-            // Source Properties may not be virtual, so we do not need the following code:
+      // Source Properties may not be virtual, so we do not need the following
+      // code:
             // for (Property sourceProperty : toMany.getSourceProperties()) {
             // if (!propertiesColumns.contains(sourceProperty)) {
             // propertiesColumns.add(sourceProperty);
@@ -479,13 +528,13 @@ void init2ndPass() {
             // }
         }
 
-        if (active == null) {
-            active = schema.isUseActiveEntitiesByDefault();
+    if (this.active == null) {
+      this.active = this.schema.isUseActiveEntitiesByDefault();
         }
-        active |= !toOneRelations.isEmpty() || !toManyRelations.isEmpty();
+    this.active |= !this.toOneRelations.isEmpty() || !this.toManyRelations.isEmpty();
 
-        if (hasKeepSections == null) {
-            hasKeepSections = schema.isHasKeepSectionsByDefault();
+    if (this.hasKeepSections == null) {
+      this.hasKeepSections = this.schema.isHasKeepSectionsByDefault();
         }
 
         init2ndPassIndexNamesWithDefaults();
@@ -496,40 +545,40 @@ void init2ndPass() {
     }
 
     protected void init2nPassNamesWithDefaults() {
-        if (tableName == null) {
-            tableName = DaoUtil.dbName(className);
+    if (this.tableName == null) {
+      this.tableName = DaoUtil.dbName(this.className);
         }
 
-        if (classNameDao == null) {
-            classNameDao = className + "Dao";
+    if (this.classNameDao == null) {
+      this.classNameDao = this.className + "Dao";
         }
-        if (classNameTest == null) {
-            classNameTest = className + "Test";
+    if (this.classNameTest == null) {
+      this.classNameTest = this.className + "Test";
         }
 
-        if (javaPackage == null) {
-            javaPackage = schema.getDefaultJavaPackage();
+    if (this.javaPackage == null) {
+      this.javaPackage = this.schema.getDefaultJavaPackage();
         }
 
-        if (javaPackageDao == null) {
-            javaPackageDao = schema.getDefaultJavaPackageDao();
-            if (javaPackageDao == null) {
-                javaPackageDao = javaPackage;
+    if (this.javaPackageDao == null) {
+      this.javaPackageDao = this.schema.getDefaultJavaPackageDao();
+      if (this.javaPackageDao == null) {
+        this.javaPackageDao = this.javaPackage;
             }
         }
-        if (javaPackageTest == null) {
-            javaPackageTest = schema.getDefaultJavaPackageTest();
-            if (javaPackageTest == null) {
-                javaPackageTest = javaPackage;
+    if (this.javaPackageTest == null) {
+      this.javaPackageTest = this.schema.getDefaultJavaPackageTest();
+      if (this.javaPackageTest == null) {
+        this.javaPackageTest = this.javaPackage;
             }
         }
     }
 
     protected void init2ndPassIndexNamesWithDefaults() {
-        for (int i = 0; i < indexes.size(); i++) {
-            Index index = indexes.get(i);
+    for (int i = 0; i < this.indexes.size(); i++) {
+      Index index = this.indexes.get(i);
             if (index.getName() == null) {
-                String indexName = "IDX_" + getTableName();
+        String indexName = "IDX_" + this.getTableName();
                 List<Property> properties = index.getProperties();
                 for (int j = 0; j < properties.size(); j++) {
                     Property property = properties.get(j);
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index f54d05e8..a9a8b4aa 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -17,93 +17,100 @@
  */
 package de.greenrobot.daogenerator;
 
-/** Model class for an entity's property: a Java property mapped to a data base column. */
+/**
+ * Model class for an entity's property: a Java property mapped to a data base
+ * column.
+ */
 public class Property {
 
     public static class PropertyBuilder {
         private final Property property;
 
         public PropertyBuilder(Schema schema, Entity entity, PropertyType propertyType, String propertyName) {
-            property = new Property(schema, entity, propertyType, propertyName);
+      this.property = new Property(schema, entity, propertyType, propertyName);
         }
 
         public PropertyBuilder columnName(String columnName) {
-            property.columnName = columnName;
+      this.property.columnName = columnName;
             return this;
         }
 
         public PropertyBuilder columnType(String columnType) {
-            property.columnType = columnType;
+      this.property.columnType = columnType;
             return this;
         }
 
         public PropertyBuilder primaryKey() {
-            property.primaryKey = true;
+      this.property.primaryKey = true;
             return this;
         }
 
         public PropertyBuilder primaryKeyAsc() {
-            property.primaryKey = true;
-            property.pkAsc = true;
+      this.property.primaryKey = true;
+      this.property.pkAsc = true;
             return this;
         }
 
         public PropertyBuilder primaryKeyDesc() {
-            property.primaryKey = true;
-            property.pkDesc = true;
+      this.property.primaryKey = true;
+      this.property.pkDesc = true;
             return this;
         }
 
         public PropertyBuilder autoincrement() {
-            if (!property.primaryKey || property.propertyType != PropertyType.Long) {
-                throw new RuntimeException(
-                        "AUTOINCREMENT is only available to primary key properties of type long/Long");
+      if (!this.property.primaryKey || (this.property.propertyType != PropertyType.Long)) {
+        throw new RuntimeException("AUTOINCREMENT is only available to primary key properties of type long/Long");
             }
-            property.pkAutoincrement = true;
+      this.property.pkAutoincrement = true;
             return this;
         }
 
         public PropertyBuilder unique() {
-            property.unique = true;
+      this.property.unique = true;
             return this;
         }
 
         public PropertyBuilder notNull() {
-            property.notNull = true;
+      this.property.notNull = true;
+      return this;
+    }
+
+    public PropertyBuilder complexJavaType() {
+      this.property.complexJavaType = true;
             return this;
         }
 
         public PropertyBuilder index() {
             Index index = new Index();
-            index.addProperty(property);
-            property.entity.addIndex(index);
+      index.addProperty(this.property);
+      this.property.entity.addIndex(index);
             return this;
         }
 
         public PropertyBuilder indexAsc(String indexNameOrNull, boolean isUnique) {
             Index index = new Index();
-            index.addPropertyAsc(property);
+      index.addPropertyAsc(this.property);
             if (isUnique) {
                 index.makeUnique();
             }
             index.setName(indexNameOrNull);
-            property.entity.addIndex(index);
+      this.property.entity.addIndex(index);
             return this;
         }
 
         public PropertyBuilder indexDesc(String indexNameOrNull, boolean isUnique) {
             Index index = new Index();
-            index.addPropertyDesc(property);
+      index.addPropertyDesc(this.property);
             if (isUnique) {
                 index.makeUnique();
             }
             index.setName(indexNameOrNull);
-            property.entity.addIndex(index);
+      this.property.entity.addIndex(index);
             return this;
         }
 
         public Property getProperty() {
-            return property;
+      return this.property;
         }
     }
 
@@ -122,6 +129,7 @@ public Property getProperty() {
 
     private boolean unique;
     private boolean notNull;
+  private boolean complexJavaType;
 
     /** Initialized in 2nd pass */
     private String constraints;
@@ -150,39 +158,43 @@ public void setPropertyType(PropertyType propertyType) {
     }
 
     public String getColumnName() {
-        return columnName;
+    return this.columnName;
     }
 
     public String getColumnType() {
-        return columnType;
+    return this.columnType;
     }
 
     public boolean isPrimaryKey() {
-        return primaryKey;
+    return this.primaryKey;
     }
 
     public boolean isAutoincrement() {
-        return pkAutoincrement;
+    return this.pkAutoincrement;
     }
 
     public String getConstraints() {
-        return constraints;
+    return this.constraints;
     }
 
     public boolean isUnique() {
-        return unique;
+    return this.unique;
     }
 
     public boolean isNotNull() {
-        return notNull;
+    return this.notNull;
+  }
+
+  public boolean isComplexJavaType() {
+    return this.complexJavaType;
     }
 
     public String getJavaType() {
-        return javaType;
+    return this.javaType;
     }
 
     public int getOrdinal() {
-        return ordinal;
+    return this.ordinal;
     }
 
     public void setOrdinal(int ordinal) {
@@ -190,49 +202,59 @@ public void setOrdinal(int ordinal) {
     }
 
     public Entity getEntity() {
-        return entity;
+    return this.entity;
     }
 
     void init2ndPass() {
-        initConstraint();
-        if (columnType == null) {
-            columnType = schema.mapToDbType(propertyType);
+    this.initConstraint();
+    if (this.columnType == null) {
+      this.columnType = this.schema.mapToDbType(this.propertyType);
         }
-        if (columnName == null) {
-            columnName = DaoUtil.dbName(propertyName);
+    if (this.columnName == null) {
+      this.columnName = DaoUtil.dbName(this.propertyName);
         }
-        if (notNull) {
-            javaType = schema.mapToJavaTypeNotNull(propertyType);
+    if (this.notNull && !this.complexJavaType) {
+      this.javaType = this.schema.mapToJavaTypeNotNull(this.propertyType);
         } else {
-            javaType = schema.mapToJavaTypeNullable(propertyType);
+      this.javaType = this.schema.mapToJavaTypeNullable(this.propertyType);
+      this.complexJavaType = true; // we deal with a complex data type
+    }
+    switch (this.propertyType) {
+    case ByteArray: // can be null everytime
+    case Date: // can be null everytime
+    case String: // can be null everytime
+      this.complexJavaType = true;
+    default:
+      break;
         }
     }
 
     private void initConstraint() {
         StringBuilder constraintBuilder = new StringBuilder();
-        if (primaryKey) {
+    if (this.primaryKey) {
             constraintBuilder.append("PRIMARY KEY");
-            if (pkAsc) {
+      if (this.pkAsc) {
                 constraintBuilder.append(" ASC");
             }
-            if (pkDesc) {
+      if (this.pkDesc) {
                 constraintBuilder.append(" DESC");
             }
-            if (pkAutoincrement) {
+      if (this.pkAutoincrement) {
                 constraintBuilder.append(" AUTOINCREMENT");
             }
         }
-        // Always have String PKs NOT NULL because SQLite is pretty strange in this respect:
+    // Always have String PKs NOT NULL because SQLite is pretty strange in this
+    // respect:
         // One could insert multiple rows with NULL PKs
-        if (notNull || (primaryKey && propertyType == PropertyType.String)) {
+    if (this.notNull || (this.primaryKey && (this.propertyType == PropertyType.String))) {
             constraintBuilder.append(" NOT NULL");
         }
-        if (unique) {
+    if (this.unique) {
             constraintBuilder.append(" UNIQUE");
         }
         String newContraints = constraintBuilder.toString().trim();
         if (constraintBuilder.length() > 0) {
-            constraints = newContraints;
+      this.constraints = newContraints;
         }
     }
 
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ChildclassEntity.java b/DaoTest/src-gen/de/greenrobot/daotest/ChildclassEntity.java
new file mode 100644
index 00000000..0e9c601b
--- /dev/null
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ChildclassEntity.java
@@ -0,0 +1,40 @@
+package de.greenrobot.daotest;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+/**
+ * Entity mapped to table CHILDCLASS_ENTITY.
+ */
+public class ChildclassEntity {
+
+    private Long id;
+    private String text;
+
+    public ChildclassEntity() {
+    }
+
+    public ChildclassEntity(Long id) {
+        this.id = id;
+    }
+
+    public ChildclassEntity(Long id, String text) {
+        this.id = id;
+        this.text = text;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getText() {
+        return text;
+    }
+
+    public void setText(String text) {
+        this.text = text;
+    }
+
+}
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ChildclassEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/ChildclassEntityDao.java
new file mode 100644
index 00000000..b411ad9b
--- /dev/null
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ChildclassEntityDao.java
@@ -0,0 +1,114 @@
+package de.greenrobot.daotest;
+
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.Property;
+import de.greenrobot.dao.internal.DaoConfig;
+
+import de.greenrobot.daotest.TestChildclass;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/** 
+ * DAO for table CHILDCLASS_ENTITY.
+*/
+public class ChildclassEntityDao extends AbstractDao<TestChildclass, Long> {
+
+    public static final String TABLENAME = "CHILDCLASS_ENTITY";
+
+    /**
+     * Properties of entity ChildclassEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
+    public static class Properties {
+        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
+        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
+    };
+
+
+    public ChildclassEntityDao(DaoConfig config) {
+        super(config);
+    }
+    
+    public ChildclassEntityDao(DaoConfig config, DaoSession daoSession) {
+        super(config, daoSession);
+    }
+
+    /** Creates the underlying database table. */
+    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+        String constraint = ifNotExists? "IF NOT EXISTS ": "";
+        db.execSQL("CREATE TABLE " + constraint + "'CHILDCLASS_ENTITY' (" + //
+                "'_id' INTEGER PRIMARY KEY ," + // 0: id
+                "'TEXT' TEXT);"); // 1: text
+    }
+
+    /** Drops the underlying database table. */
+    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHILDCLASS_ENTITY'";
+        db.execSQL(sql);
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected void bindValues(SQLiteStatement stmt, TestChildclass entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        String text = entity.getText();
+        if (text != null) {
+            stmt.bindString(2, text);
+        }
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long readKey(Cursor cursor, int offset) {
+        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    }    
+
+    /** @inheritdoc */
+    @Override
+    public TestChildclass readEntity(Cursor cursor, int offset) {
+        TestChildclass entity = new TestChildclass();
+        readEntity(cursor, entity, offset);
+        return entity;
+    }
+     
+    /** @inheritdoc */
+    @Override
+    public void readEntity(Cursor cursor, TestChildclass entity, int offset) {
+        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
+        entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
+     }
+    
+    /** @inheritdoc */
+    @Override
+    protected Long updateKeyAfterInsert(TestChildclass entity, long rowId) {
+        entity.setId(rowId);
+        return rowId;
+    }
+    
+    /** @inheritdoc */
+    @Override
+    public Long getKey(TestChildclass entity) {
+        if(entity != null) {
+            return entity.getId();
+        } else {
+            return null;
+        }
+    }
+
+    /** @inheritdoc */
+    @Override    
+    protected boolean isEntityUpdateable() {
+        return true;
+    }
+    
+ 
+}
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
index b68069c5..31f47b4e 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
@@ -20,9 +20,12 @@
 import de.greenrobot.daotest.TreeEntityDao;
 import de.greenrobot.daotest.AnActiveEntityDao;
 import de.greenrobot.daotest.ExtendsImplementsEntityDao;
+import de.greenrobot.daotest.ChildclassEntityDao;
 import de.greenrobot.daotest.StringKeyValueEntityDao;
 import de.greenrobot.daotest.AutoincrementEntityDao;
 import de.greenrobot.daotest.SqliteMasterDao;
+import de.greenrobot.daotest.EntityQueryBuilderEntityDao;
+import de.greenrobot.daotest.SaveEntityDao;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -45,8 +48,11 @@ public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
         TreeEntityDao.createTable(db, ifNotExists);
         AnActiveEntityDao.createTable(db, ifNotExists);
         ExtendsImplementsEntityDao.createTable(db, ifNotExists);
+        ChildclassEntityDao.createTable(db, ifNotExists);
         StringKeyValueEntityDao.createTable(db, ifNotExists);
         AutoincrementEntityDao.createTable(db, ifNotExists);
+        EntityQueryBuilderEntityDao.createTable(db, ifNotExists);
+        SaveEntityDao.createTable(db, ifNotExists);
     }
     
     /** Drops underlying database table using DAOs. */
@@ -63,8 +69,11 @@ public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
         TreeEntityDao.dropTable(db, ifExists);
         AnActiveEntityDao.dropTable(db, ifExists);
         ExtendsImplementsEntityDao.dropTable(db, ifExists);
+        ChildclassEntityDao.dropTable(db, ifExists);
         StringKeyValueEntityDao.dropTable(db, ifExists);
         AutoincrementEntityDao.dropTable(db, ifExists);
+        EntityQueryBuilderEntityDao.dropTable(db, ifExists);
+        SaveEntityDao.dropTable(db, ifExists);
     }
     
     public static abstract class OpenHelper extends SQLiteOpenHelper {
@@ -108,9 +117,12 @@ public DaoMaster(SQLiteDatabase db) {
         registerDaoClass(TreeEntityDao.class);
         registerDaoClass(AnActiveEntityDao.class);
         registerDaoClass(ExtendsImplementsEntityDao.class);
+        registerDaoClass(ChildclassEntityDao.class);
         registerDaoClass(StringKeyValueEntityDao.class);
         registerDaoClass(AutoincrementEntityDao.class);
         registerDaoClass(SqliteMasterDao.class);
+        registerDaoClass(EntityQueryBuilderEntityDao.class);
+        registerDaoClass(SaveEntityDao.class);
     }
     
     public DaoSession newSession() {
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
index 0a9a8e95..a89ee5c6 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
@@ -21,9 +21,12 @@
 import de.greenrobot.daotest.TreeEntity;
 import de.greenrobot.daotest.AnActiveEntity;
 import de.greenrobot.daotest.ExtendsImplementsEntity;
+import de.greenrobot.daotest.TestChildclass;
 import de.greenrobot.daotest.StringKeyValueEntity;
 import de.greenrobot.daotest.AutoincrementEntity;
 import de.greenrobot.daotest.SqliteMaster;
+import de.greenrobot.daotest.EntityQueryBuilderEntity;
+import de.greenrobot.daotest.SaveEntity;
 
 import de.greenrobot.daotest.SimpleEntityDao;
 import de.greenrobot.daotest.SimpleEntityNotNullDao;
@@ -37,9 +40,12 @@
 import de.greenrobot.daotest.TreeEntityDao;
 import de.greenrobot.daotest.AnActiveEntityDao;
 import de.greenrobot.daotest.ExtendsImplementsEntityDao;
+import de.greenrobot.daotest.ChildclassEntityDao;
 import de.greenrobot.daotest.StringKeyValueEntityDao;
 import de.greenrobot.daotest.AutoincrementEntityDao;
 import de.greenrobot.daotest.SqliteMasterDao;
+import de.greenrobot.daotest.EntityQueryBuilderEntityDao;
+import de.greenrobot.daotest.SaveEntityDao;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 
@@ -62,9 +68,12 @@
     private final DaoConfig treeEntityDaoConfig;
     private final DaoConfig anActiveEntityDaoConfig;
     private final DaoConfig extendsImplementsEntityDaoConfig;
+    private final DaoConfig childclassEntityDaoConfig;
     private final DaoConfig stringKeyValueEntityDaoConfig;
     private final DaoConfig autoincrementEntityDaoConfig;
     private final DaoConfig sqliteMasterDaoConfig;
+    private final DaoConfig entityQueryBuilderEntityDaoConfig;
+    private final DaoConfig saveEntityDaoConfig;
 
     private final SimpleEntityDao simpleEntityDao;
     private final SimpleEntityNotNullDao simpleEntityNotNullDao;
@@ -78,9 +87,12 @@
     private final TreeEntityDao treeEntityDao;
     private final AnActiveEntityDao anActiveEntityDao;
     private final ExtendsImplementsEntityDao extendsImplementsEntityDao;
+    private final ChildclassEntityDao childclassEntityDao;
     private final StringKeyValueEntityDao stringKeyValueEntityDao;
     private final AutoincrementEntityDao autoincrementEntityDao;
     private final SqliteMasterDao sqliteMasterDao;
+    private final EntityQueryBuilderEntityDao entityQueryBuilderEntityDao;
+    private final SaveEntityDao saveEntityDao;
 
     public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
@@ -122,6 +134,9 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         extendsImplementsEntityDaoConfig = daoConfigMap.get(ExtendsImplementsEntityDao.class).clone();
         extendsImplementsEntityDaoConfig.initIdentityScope(type);
 
+        childclassEntityDaoConfig = daoConfigMap.get(ChildclassEntityDao.class).clone();
+        childclassEntityDaoConfig.initIdentityScope(type);
+
         stringKeyValueEntityDaoConfig = daoConfigMap.get(StringKeyValueEntityDao.class).clone();
         stringKeyValueEntityDaoConfig.initIdentityScope(type);
 
@@ -131,6 +146,12 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         sqliteMasterDaoConfig = daoConfigMap.get(SqliteMasterDao.class).clone();
         sqliteMasterDaoConfig.initIdentityScope(type);
 
+        entityQueryBuilderEntityDaoConfig = daoConfigMap.get(EntityQueryBuilderEntityDao.class).clone();
+        entityQueryBuilderEntityDaoConfig.initIdentityScope(type);
+
+        saveEntityDaoConfig = daoConfigMap.get(SaveEntityDao.class).clone();
+        saveEntityDaoConfig.initIdentityScope(type);
+
         simpleEntityDao = new SimpleEntityDao(simpleEntityDaoConfig, this);
         simpleEntityNotNullDao = new SimpleEntityNotNullDao(simpleEntityNotNullDaoConfig, this);
         testEntityDao = new TestEntityDao(testEntityDaoConfig, this);
@@ -143,9 +164,12 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         treeEntityDao = new TreeEntityDao(treeEntityDaoConfig, this);
         anActiveEntityDao = new AnActiveEntityDao(anActiveEntityDaoConfig, this);
         extendsImplementsEntityDao = new ExtendsImplementsEntityDao(extendsImplementsEntityDaoConfig, this);
+        childclassEntityDao = new ChildclassEntityDao(childclassEntityDaoConfig, this);
         stringKeyValueEntityDao = new StringKeyValueEntityDao(stringKeyValueEntityDaoConfig, this);
         autoincrementEntityDao = new AutoincrementEntityDao(autoincrementEntityDaoConfig, this);
         sqliteMasterDao = new SqliteMasterDao(sqliteMasterDaoConfig, this);
+        entityQueryBuilderEntityDao = new EntityQueryBuilderEntityDao(entityQueryBuilderEntityDaoConfig, this);
+        saveEntityDao = new SaveEntityDao(saveEntityDaoConfig, this);
 
         registerDao(SimpleEntity.class, simpleEntityDao);
         registerDao(SimpleEntityNotNull.class, simpleEntityNotNullDao);
@@ -159,9 +183,12 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         registerDao(TreeEntity.class, treeEntityDao);
         registerDao(AnActiveEntity.class, anActiveEntityDao);
         registerDao(ExtendsImplementsEntity.class, extendsImplementsEntityDao);
+        registerDao(TestChildclass.class, childclassEntityDao);
         registerDao(StringKeyValueEntity.class, stringKeyValueEntityDao);
         registerDao(AutoincrementEntity.class, autoincrementEntityDao);
         registerDao(SqliteMaster.class, sqliteMasterDao);
+        registerDao(EntityQueryBuilderEntity.class, entityQueryBuilderEntityDao);
+        registerDao(SaveEntity.class, saveEntityDao);
     }
     
     public void clear() {
@@ -177,9 +204,12 @@ public void clear() {
         treeEntityDaoConfig.getIdentityScope().clear();
         anActiveEntityDaoConfig.getIdentityScope().clear();
         extendsImplementsEntityDaoConfig.getIdentityScope().clear();
+        childclassEntityDaoConfig.getIdentityScope().clear();
         stringKeyValueEntityDaoConfig.getIdentityScope().clear();
         autoincrementEntityDaoConfig.getIdentityScope().clear();
         sqliteMasterDaoConfig.getIdentityScope().clear();
+        entityQueryBuilderEntityDaoConfig.getIdentityScope().clear();
+        saveEntityDaoConfig.getIdentityScope().clear();
     }
 
     public SimpleEntityDao getSimpleEntityDao() {
@@ -230,6 +260,10 @@ public ExtendsImplementsEntityDao getExtendsImplementsEntityDao() {
         return extendsImplementsEntityDao;
     }
 
+    public ChildclassEntityDao getChildclassEntityDao() {
+        return childclassEntityDao;
+    }
+
     public StringKeyValueEntityDao getStringKeyValueEntityDao() {
         return stringKeyValueEntityDao;
     }
@@ -242,4 +276,12 @@ public SqliteMasterDao getSqliteMasterDao() {
         return sqliteMasterDao;
     }
 
+    public EntityQueryBuilderEntityDao getEntityQueryBuilderEntityDao() {
+        return entityQueryBuilderEntityDao;
+    }
+
+    public SaveEntityDao getSaveEntityDao() {
+        return saveEntityDao;
+    }
+
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntity.java b/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntity.java
new file mode 100644
index 00000000..f6fc7c7d
--- /dev/null
+++ b/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntity.java
@@ -0,0 +1,90 @@
+package de.greenrobot.daotest;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+/**
+ * Entity mapped to table ENTITY_QUERY_BUILDER_ENTITY.
+ */
+public class EntityQueryBuilderEntity {
+
+    private Long id;
+    private String text;
+    private String text2;
+    private Integer intprop;
+    private int intprop2;
+    private Integer intprop3;
+    private Integer intprop4;
+
+    public EntityQueryBuilderEntity() {
+    }
+
+    public EntityQueryBuilderEntity(Long id) {
+        this.id = id;
+    }
+
+    public EntityQueryBuilderEntity(Long id, String text, String text2, Integer intprop, int intprop2, Integer intprop3, Integer intprop4) {
+        this.id = id;
+        this.text = text;
+        this.text2 = text2;
+        this.intprop = intprop;
+        this.intprop2 = intprop2;
+        this.intprop3 = intprop3;
+        this.intprop4 = intprop4;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getText() {
+        return text;
+    }
+
+    public void setText(String text) {
+        this.text = text;
+    }
+
+    public String getText2() {
+        return text2;
+    }
+
+    public void setText2(String text2) {
+        this.text2 = text2;
+    }
+
+    public Integer getIntprop() {
+        return intprop;
+    }
+
+    public void setIntprop(Integer intprop) {
+        this.intprop = intprop;
+    }
+
+    public int getIntprop2() {
+        return intprop2;
+    }
+
+    public void setIntprop2(int intprop2) {
+        this.intprop2 = intprop2;
+    }
+
+    public Integer getIntprop3() {
+        return intprop3;
+    }
+
+    public void setIntprop3(Integer intprop3) {
+        this.intprop3 = intprop3;
+    }
+
+    public Integer getIntprop4() {
+        return intprop4;
+    }
+
+    public void setIntprop4(Integer intprop4) {
+        this.intprop4 = intprop4;
+    }
+
+}
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntityDao.java
new file mode 100644
index 00000000..ed60c9f9
--- /dev/null
+++ b/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntityDao.java
@@ -0,0 +1,225 @@
+package de.greenrobot.daotest;
+
+import java.util.ArrayList;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.Property;
+import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.query.Query;
+import de.greenrobot.dao.query.QueryBuilder;
+import de.greenrobot.dao.query.WhereCondition;
+
+import de.greenrobot.daotest.EntityQueryBuilderEntity;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/** 
+ * DAO for table ENTITY_QUERY_BUILDER_ENTITY.
+*/
+public class EntityQueryBuilderEntityDao extends AbstractDao<EntityQueryBuilderEntity, Long> {
+
+    public static final String TABLENAME = "ENTITY_QUERY_BUILDER_ENTITY";
+
+    /**
+     * Properties of entity EntityQueryBuilderEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
+    public static class Properties {
+        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
+        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
+        public final static Property Text2 = new Property(2, String.class, "text2", false, "TEXT2");
+        public final static Property Intprop = new Property(3, Integer.class, "intprop", false, "INTPROP");
+        public final static Property Intprop2 = new Property(4, int.class, "intprop2", false, "INTPROP2");
+        public final static Property Intprop3 = new Property(5, Integer.class, "intprop3", false, "INTPROP3");
+        public final static Property Intprop4 = new Property(6, Integer.class, "intprop4", false, "INTPROP4");
+    };
+
+
+    public EntityQueryBuilderEntityDao(DaoConfig config) {
+        super(config);
+    }
+    
+    public EntityQueryBuilderEntityDao(DaoConfig config, DaoSession daoSession) {
+        super(config, daoSession);
+    }
+
+    /** Creates the underlying database table. */
+    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+        String constraint = ifNotExists? "IF NOT EXISTS ": "";
+        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_QUERY_BUILDER_ENTITY' (" + //
+                "'_id' INTEGER PRIMARY KEY ," + // 0: id
+                "'TEXT' TEXT," + // 1: text
+                "'TEXT2' TEXT," + // 2: text2
+                "'INTPROP' INTEGER," + // 3: intprop
+                "'INTPROP2' INTEGER NOT NULL ," + // 4: intprop2
+                "'INTPROP3' INTEGER NOT NULL ," + // 5: intprop3
+                "'INTPROP4' INTEGER);"); // 6: intprop4
+    }
+
+    /** Drops the underlying database table. */
+    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_QUERY_BUILDER_ENTITY'";
+        db.execSQL(sql);
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected void bindValues(SQLiteStatement stmt, EntityQueryBuilderEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        String text = entity.getText();
+        if (text != null) {
+            stmt.bindString(2, text);
+        }
+ 
+        String text2 = entity.getText2();
+        if (text2 != null) {
+            stmt.bindString(3, text2);
+        }
+ 
+        Integer intprop = entity.getIntprop();
+        if (intprop != null) {
+            stmt.bindLong(4, intprop);
+        }
+        stmt.bindLong(5, entity.getIntprop2());
+        stmt.bindLong(6, entity.getIntprop3());
+ 
+        Integer intprop4 = entity.getIntprop4();
+        if (intprop4 != null) {
+            stmt.bindLong(7, intprop4);
+        }
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long readKey(Cursor cursor, int offset) {
+        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    }    
+
+    /** @inheritdoc */
+    @Override
+    public EntityQueryBuilderEntity readEntity(Cursor cursor, int offset) {
+        EntityQueryBuilderEntity entity = new EntityQueryBuilderEntity( //
+            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
+            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // text
+            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // text2
+            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // intprop
+            cursor.getInt(offset + 4), // intprop2
+            cursor.getInt(offset + 5), // intprop3
+            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // intprop4
+        );
+        return entity;
+    }
+     
+    /** @inheritdoc */
+    @Override
+    public void readEntity(Cursor cursor, EntityQueryBuilderEntity entity, int offset) {
+        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
+        entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
+        entity.setText2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
+        entity.setIntprop(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
+        entity.setIntprop2(cursor.getInt(offset + 4));
+        entity.setIntprop3(cursor.getInt(offset + 5));
+        entity.setIntprop4(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
+     }
+    
+    /** @inheritdoc */
+    @Override
+    protected Long updateKeyAfterInsert(EntityQueryBuilderEntity entity, long rowId) {
+        entity.setId(rowId);
+        return rowId;
+    }
+    
+    /** @inheritdoc */
+    @Override
+    public Long getKey(EntityQueryBuilderEntity entity) {
+        if(entity != null) {
+            return entity.getId();
+        } else {
+            return null;
+        }
+    }
+
+    /** @inheritdoc */
+    @Override    
+    protected boolean isEntityUpdateable() {
+        return true;
+    }
+    
+ 
+    public EntityQueryBuilderEntityQueryBuilder queryBuilder() {
+      return new EntityQueryBuilderEntityQueryBuilder(this);
+    }
+
+    public static class EntityQueryBuilderEntityQueryBuilder extends QueryBuilder<EntityQueryBuilderEntity> {
+        EntityQueryBuilderEntityQueryBuilder(AbstractDao<EntityQueryBuilderEntity, ?> dao) {
+            super(dao);
+        }
+        
+        public Query<EntityQueryBuilderEntity> findByPrimaryKey(Long pk) {
+            this.where(Properties.Id.eq(pk));
+            return this.build();
+        }
+        
+        public Query<EntityQueryBuilderEntity> findAll() {
+            return this.build();
+        }
+        
+        /**
+         * <p>creates a {@link Query} for {@link EntityQueryBuilderEntity} to find one by example.
+         * <p>Just nullable fields can be used. Just set one of these properties:
+         * <ul>
+         * <li><code>String text</code></li>
+         * <li><code>String text2</code></li>
+         * <li><code>Integer intprop</code></li>
+         * <li><code>Integer intprop3</code></li>
+         * <li><code>Integer intprop4</code></li>
+         * </ul>
+         *
+         * @param example
+         *          the entity filled with example values
+         * 
+         * @return a {@link Query} to find the example entity
+         */
+        public Query<EntityQueryBuilderEntity> findByExample(EntityQueryBuilderEntity example) { 
+            if(example.getId() != null) {
+                return findByPrimaryKey(example.getId());
+            }
+        	
+            ArrayList<WhereCondition> conditions = new ArrayList<WhereCondition>();
+
+            if (example.getText() != null) {
+                conditions.add(Properties.Text.eq(example.getText()));
+            }
+            if (example.getText2() != null) {
+                conditions.add(Properties.Text2.eq(example.getText2()));
+            }
+            if (example.getIntprop() != null) {
+                conditions.add(Properties.Intprop.eq(example.getIntprop()));
+            }
+            if (example.getIntprop3() != null) {
+                conditions.add(Properties.Intprop3.eq(example.getIntprop3()));
+            }
+            if (example.getIntprop4() != null) {
+                conditions.add(Properties.Intprop4.eq(example.getIntprop4()));
+            }
+           
+            if (conditions.isEmpty()) {
+                throw new IllegalArgumentException("No example values given. Please provide at least one value!");
+            }
+
+            WhereCondition firstCondition = conditions.get(0);
+            conditions.remove(0);
+            this.where(firstCondition, conditions.toArray(new WhereCondition[0]));
+
+        	return this.build();
+        }
+    }
+}
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SaveEntity.java b/DaoTest/src-gen/de/greenrobot/daotest/SaveEntity.java
new file mode 100644
index 00000000..79c5d49f
--- /dev/null
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SaveEntity.java
@@ -0,0 +1,40 @@
+package de.greenrobot.daotest;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+/**
+ * Entity mapped to table SAVE_ENTITY.
+ */
+public class SaveEntity {
+
+    private Long id;
+    private String text;
+
+    public SaveEntity() {
+    }
+
+    public SaveEntity(Long id) {
+        this.id = id;
+    }
+
+    public SaveEntity(Long id, String text) {
+        this.id = id;
+        this.text = text;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getText() {
+        return text;
+    }
+
+    public void setText(String text) {
+        this.text = text;
+    }
+
+}
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SaveEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SaveEntityDao.java
new file mode 100644
index 00000000..38e7ac4f
--- /dev/null
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SaveEntityDao.java
@@ -0,0 +1,172 @@
+package de.greenrobot.daotest;
+
+import java.util.ArrayList;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.Property;
+import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.query.Query;
+import de.greenrobot.dao.query.QueryBuilder;
+import de.greenrobot.dao.query.WhereCondition;
+
+import de.greenrobot.daotest.SaveEntity;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/** 
+ * DAO for table SAVE_ENTITY.
+*/
+public class SaveEntityDao extends AbstractDao<SaveEntity, Long> {
+
+    public static final String TABLENAME = "SAVE_ENTITY";
+
+    /**
+     * Properties of entity SaveEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
+    public static class Properties {
+        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
+        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
+    };
+
+
+    public SaveEntityDao(DaoConfig config) {
+        super(config);
+    }
+    
+    public SaveEntityDao(DaoConfig config, DaoSession daoSession) {
+        super(config, daoSession);
+    }
+
+    /** Creates the underlying database table. */
+    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+        String constraint = ifNotExists? "IF NOT EXISTS ": "";
+        db.execSQL("CREATE TABLE " + constraint + "'SAVE_ENTITY' (" + //
+                "'_id' INTEGER PRIMARY KEY ," + // 0: id
+                "'TEXT' TEXT);"); // 1: text
+    }
+
+    /** Drops the underlying database table. */
+    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SAVE_ENTITY'";
+        db.execSQL(sql);
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected void bindValues(SQLiteStatement stmt, SaveEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        String text = entity.getText();
+        if (text != null) {
+            stmt.bindString(2, text);
+        }
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long readKey(Cursor cursor, int offset) {
+        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    }    
+
+    /** @inheritdoc */
+    @Override
+    public SaveEntity readEntity(Cursor cursor, int offset) {
+        SaveEntity entity = new SaveEntity( //
+            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
+            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // text
+        );
+        return entity;
+    }
+     
+    /** @inheritdoc */
+    @Override
+    public void readEntity(Cursor cursor, SaveEntity entity, int offset) {
+        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
+        entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
+     }
+    
+    /** @inheritdoc */
+    @Override
+    protected Long updateKeyAfterInsert(SaveEntity entity, long rowId) {
+        entity.setId(rowId);
+        return rowId;
+    }
+    
+    /** @inheritdoc */
+    @Override
+    public Long getKey(SaveEntity entity) {
+        if(entity != null) {
+            return entity.getId();
+        } else {
+            return null;
+        }
+    }
+
+    /** @inheritdoc */
+    @Override    
+    protected boolean isEntityUpdateable() {
+        return true;
+    }
+    
+ 
+    public SaveEntityQueryBuilder queryBuilder() {
+      return new SaveEntityQueryBuilder(this);
+    }
+
+    public static class SaveEntityQueryBuilder extends QueryBuilder<SaveEntity> {
+        SaveEntityQueryBuilder(AbstractDao<SaveEntity, ?> dao) {
+            super(dao);
+        }
+        
+        public Query<SaveEntity> findByPrimaryKey(Long pk) {
+            this.where(Properties.Id.eq(pk));
+            return this.build();
+        }
+        
+        public Query<SaveEntity> findAll() {
+            return this.build();
+        }
+        
+        /**
+         * <p>creates a {@link Query} for {@link SaveEntity} to find one by example.
+         * <p>Just nullable fields can be used. Just set one of these properties:
+         * <ul>
+         * <li><code>String text</code></li>
+         * </ul>
+         *
+         * @param example
+         *          the entity filled with example values
+         * 
+         * @return a {@link Query} to find the example entity
+         */
+        public Query<SaveEntity> findByExample(SaveEntity example) { 
+            if(example.getId() != null) {
+                return findByPrimaryKey(example.getId());
+            }
+        	
+            ArrayList<WhereCondition> conditions = new ArrayList<WhereCondition>();
+
+            if (example.getText() != null) {
+                conditions.add(Properties.Text.eq(example.getText()));
+            }
+           
+            if (conditions.isEmpty()) {
+                throw new IllegalArgumentException("No example values given. Please provide at least one value!");
+            }
+
+            WhereCondition firstCondition = conditions.get(0);
+            conditions.remove(0);
+            this.where(firstCondition, conditions.toArray(new WhereCondition[0]));
+
+        	return this.build();
+        }
+    }
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/TestChildclass.java b/DaoTest/src/de/greenrobot/daotest/TestChildclass.java
new file mode 100644
index 00000000..f2708488
--- /dev/null
+++ b/DaoTest/src/de/greenrobot/daotest/TestChildclass.java
@@ -0,0 +1,5 @@
+package de.greenrobot.daotest;
+
+public class TestChildclass extends ChildclassEntity {
+
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/ChildclassEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/ChildclassEntityTest.java
new file mode 100644
index 00000000..633834bf
--- /dev/null
+++ b/DaoTest/src/de/greenrobot/daotest/entity/ChildclassEntityTest.java
@@ -0,0 +1,27 @@
+package de.greenrobot.daotest.entity;
+
+import de.greenrobot.dao.test.AbstractDaoTestLongPk;
+import de.greenrobot.daotest.ChildclassEntity;
+import de.greenrobot.daotest.ChildclassEntityDao;
+import de.greenrobot.daotest.TestChildclass;
+
+public class ChildclassEntityTest extends AbstractDaoTestLongPk<ChildclassEntityDao, TestChildclass> {
+
+  public ChildclassEntityTest() {
+    super(ChildclassEntityDao.class);
+  }
+
+  @Override
+  protected TestChildclass createEntity(Long key) {
+    TestChildclass entity = new TestChildclass();
+    entity.setId(key);
+    return entity;
+  }
+
+  public void testInheritance() {
+    TestChildclass entity = this.createEntityWithRandomPk();
+    assertTrue(entity instanceof TestChildclass);
+    assertTrue(entity instanceof ChildclassEntity);
+  }
+
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/EntityQueryBuilderEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/EntityQueryBuilderEntityTest.java
new file mode 100644
index 00000000..8e13e296
--- /dev/null
+++ b/DaoTest/src/de/greenrobot/daotest/entity/EntityQueryBuilderEntityTest.java
@@ -0,0 +1,94 @@
+package de.greenrobot.daotest.entity;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import de.greenrobot.dao.test.AbstractDaoTestLongPk;
+import de.greenrobot.daotest.EntityQueryBuilderEntity;
+import de.greenrobot.daotest.EntityQueryBuilderEntityDao;
+
+public class EntityQueryBuilderEntityTest extends AbstractDaoTestLongPk<EntityQueryBuilderEntityDao, EntityQueryBuilderEntity> {
+
+  public EntityQueryBuilderEntityTest() {
+    super(EntityQueryBuilderEntityDao.class);
+  }
+
+  @Override
+  protected EntityQueryBuilderEntity createEntity(Long key) {
+    EntityQueryBuilderEntity entity = new EntityQueryBuilderEntity();
+    entity.setId(key);
+    entity.setText("Entity " + key);
+    entity.setIntprop2(2);
+    entity.setIntprop3(3);
+    return entity;
+  }
+
+  public void testFindAll() {
+    this.dao.deleteAll();
+    List<EntityQueryBuilderEntity> list = new ArrayList<EntityQueryBuilderEntity>();
+    for (int i = 0; i < 15; i++) {
+      EntityQueryBuilderEntity entity = this.createEntity(this.nextPk());
+      list.add(entity);
+    }
+    this.dao.insertInTx(list);
+    List<EntityQueryBuilderEntity> loaded = this.dao.queryBuilder().findAll().list();
+    assertEquals(list.size(), loaded.size());
+  }
+
+  public void testFindByPk() {
+    this.dao.deleteAll();
+    Long nextPk = this.nextPk();
+    this.dao.insert(this.createEntity(nextPk));
+    List<EntityQueryBuilderEntity> loaded = this.dao.queryBuilder().findByPrimaryKey(nextPk).list();
+    assertEquals(1, loaded.size());
+    assertEquals(nextPk, loaded.get(0).getId());
+  }
+
+  public void testFindByExamplePk() {
+    this.dao.deleteAll();
+    Long nextPk = this.nextPk();
+    this.dao.insert(this.createEntity(nextPk));
+
+    List<EntityQueryBuilderEntity> loaded = this.dao.queryBuilder().findByExample(new EntityQueryBuilderEntity(nextPk)).list();
+    assertEquals(1, loaded.size());
+    assertEquals(nextPk, loaded.get(0).getId());
+  }
+
+  public void testFindByExampleStringMultiResult() {
+    this.dao.deleteAll();
+    List<EntityQueryBuilderEntity> list = new ArrayList<EntityQueryBuilderEntity>();
+    for (int i = 0; i < 15; i++) {
+      EntityQueryBuilderEntity entity = this.createEntity(this.nextPk());
+      entity.setText2("text");
+      list.add(entity);
+    }
+    this.dao.insertInTx(list);
+
+    EntityQueryBuilderEntity example = new EntityQueryBuilderEntity();
+    example.setText2("text");
+    example.setIntprop2(3);
+    example.setIntprop3(3);
+    List<EntityQueryBuilderEntity> loaded = this.dao.queryBuilder().findByExample(example).list();
+    assertEquals(list.size(), loaded.size());
+  }
+
+  public void testFindByExampleStringSingleResult() {
+    this.dao.deleteAll();
+    List<EntityQueryBuilderEntity> list = new ArrayList<EntityQueryBuilderEntity>();
+    Long lastPk = null;
+    for (int i = 0; i < 15; i++) {
+      EntityQueryBuilderEntity entity = this.createEntity(this.nextPk());
+      entity.setText2("text");
+      lastPk = entity.getId();
+      list.add(entity);
+    }
+    this.dao.insertInTx(list);
+
+    EntityQueryBuilderEntity example = new EntityQueryBuilderEntity(lastPk);
+    example.setText2("text");
+    List<EntityQueryBuilderEntity> loaded = this.dao.queryBuilder().findByExample(example).list();
+    assertEquals(1, loaded.size());
+    assertEquals(lastPk, loaded.get(0).getId());
+  }
+
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SaveEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/SaveEntityTest.java
new file mode 100644
index 00000000..b64babcc
--- /dev/null
+++ b/DaoTest/src/de/greenrobot/daotest/entity/SaveEntityTest.java
@@ -0,0 +1,89 @@
+package de.greenrobot.daotest.entity;
+
+import java.util.List;
+
+import de.greenrobot.dao.test.AbstractDaoTestLongPk;
+import de.greenrobot.daotest.SaveEntity;
+import de.greenrobot.daotest.SaveEntityDao;
+
+public class SaveEntityTest extends AbstractDaoTestLongPk<SaveEntityDao, SaveEntity> {
+
+  public SaveEntityTest() {
+    super(SaveEntityDao.class);
+  }
+
+  @Override
+  protected SaveEntity createEntity(Long key) {
+    SaveEntity entity = new SaveEntity(key, "save");
+    return entity;
+  }
+
+  public void testSaveInsert() {
+    SaveEntity entity = this.createEntity(null);
+    SaveEntity actual = this.dao.save(entity);
+
+    assertNotNull(actual);
+    assertNotNull(actual.getId());
+    assertEquals("save", actual.getText());
+
+    this.assertEntity(actual.getId(), "save");
+
+  }
+
+  protected void assertEntity(Long pk, String assertString) {
+    List<SaveEntity> queryresult = this.dao.queryBuilder().findByPrimaryKey(pk).list();
+
+    assertNotNull(queryresult);
+    assertEquals(1, queryresult.size());
+    assertEquals(assertString, queryresult.get(0).getText());
+  }
+
+  public void testSaveUpdateWithoutCheck() {
+    Long nextPk = this.nextPk();
+    SaveEntity entity = this.createEntity(nextPk);
+    SaveEntity actual = this.dao.save(entity);
+
+    assertNotNull(actual);
+    assertNotNull(actual.getId());
+    assertEquals("save", actual.getText());
+    this.assertEntity(nextPk, "save");
+
+    entity.setText("new text");
+
+    actual = this.dao.save(entity);
+
+    assertNotNull(actual);
+    assertEquals(nextPk, actual.getId());
+    assertEquals("new text", actual.getText());
+    this.assertEntity(nextPk, "new text");
+
+    entity.setText("another new text");
+
+    actual = this.dao.save(entity, false);
+
+    assertNotNull(actual);
+    assertEquals(nextPk, actual.getId());
+    assertEquals("another new text", actual.getText());
+    this.assertEntity(nextPk, "another new text");
+  }
+
+  public void testSaveUpdateWithCheck() {
+    Long nextPk = this.nextPk();
+    SaveEntity entity = this.createEntity(nextPk);
+    SaveEntity actual = this.dao.save(entity, true);
+
+    assertNotNull(actual);
+    assertNotNull(actual.getId());
+    assertEquals("save", actual.getText());
+    this.assertEntity(nextPk, "save");
+
+    entity.setText("new text");
+
+    actual = this.dao.save(entity, true);
+
+    assertNotNull(actual);
+    assertEquals(nextPk, actual.getId());
+    assertEquals("new text", actual.getText());
+    this.assertEntity(nextPk, "new text");
+  }
+}
