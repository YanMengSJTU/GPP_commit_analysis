diff --git a/.gitignore b/.gitignore
index 20374e4a..da51cda0 100644
--- a/.gitignore
+++ b/.gitignore
@@ -4,3 +4,4 @@
 out/
 build/
 local.properties
+gradle.properties
diff --git a/.travis.yml b/.travis.yml
index 6483132d..cc39697d 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,26 +1,33 @@
-language: android
 # Use the Travis Container-Based Infrastructure
 sudo: false
+language: android
+
 jdk:
-  - oraclejdk7
-env:
-  global:
-    # increase adb timeout (2 minutes by default)
-    - ADB_INSTALL_TIMEOUT=8
-  matrix:
-    - ANDROID_SDKS=android-23,sysimg-23  ANDROID_TARGET=android-19  ANDROID_ABI=armeabi-v7a
-android:
-  components:
-    - build-tools-23.0.1
-    - android-23
-    - extra-android-m2repository
+  - oraclejdk8
+
 before_install:
-  - echo no | android create avd --force -n test -t $ANDROID_TARGET --abi $ANDROID_ABI
-  - emulator -avd test -no-skin -no-audio -no-window &
+  # Install the rest of tools (e.g., avdmanager)
+  - yes | sdkmanager tools
+  # Install the system image
+  - yes | sdkmanager "system-images;android-18;default;armeabi-v7a"
+  # Create and start emulator for the script. Meant to race the install task.
+  - echo no | avdmanager create avd --force -n test -k "system-images;android-18;default;armeabi-v7a"
+  - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &
+
+install: ./gradlew clean assemble assembleAndroidTest --stacktrace
+
 before_script:
-  - chmod +x gradlew
-  - chmod +x ./ci/wait_for_emulator
-  - ./ci/wait_for_emulator
-  - adb shell input keyevent 82 &
-script:
-    - TERM=dumb ./gradlew connectedCheck
+  - android-wait-for-emulator
+  - adb shell input keyevent 82
+
+script: ./gradlew check connectedCheck -x :tests:DaoTestPerformance:connectedCheck --stacktrace
+
+before_cache:
+  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
+  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
+
+cache:
+  directories:
+    - $HOME/.gradle/caches/
+    - $HOME/.gradle/wrapper/
+    - $HOME/.android/build-cache
diff --git a/CHANGELOG.md b/CHANGELOG.md
deleted file mode 100644
index f1548666..00000000
--- a/CHANGELOG.md
+++ /dev/null
@@ -1,115 +0,0 @@
-Release History
----------------
-### V2.1.0 Minor feature and bugfix release (2015-11-12, both core and generator)
-* Official Robolectric support: workaround for a broken system call in Robolectric triggered by Query.forCurrentThread
-* QueryBuilder now allows to create DISTINCT queries to avoid duplicate entities returned
-* CursorQuery (beta, API might change)
-* Deadlock prevention when loading a list of entities while doing concurrent updates
-* Fixed async queries
-* Better Android Studio support
-* Generator: Possibility to supply custom JavaDoc for entities and their properties
-* Generator: Fixed codeBeforeGetter, added codeBeforeGetterAndSetter
-
-### V2.0.0 Major feature release (2015-07-30, both core and generator)
-* Join for queries: relate a query to other entities (or joins)
-* To-Many relations using a join entity (useful for M:N relationships)
-* Custom types for properties: by implementing PropertyConverter, entities can have properties of any type, e.g. enums, BigInteger, alternative time/date classes, JSON objects, serialized objects, ...
-* Add custom code to fields, getters, and setters of entity properties to add custom annotations or JavaDoc
-* Add additional imports to entities without keep sections
-* Fixes for table names matching a SQL keyword (e.g. "order", "transaction")
-* Several bug fixes
-* Added Flag for AsyncOperation to track the caller's stacktrace (useful for debugging)
-
-### Generator V1.3.1 (2014-05-24): Bugfix
-* Fix schema version >= 1000
-
-### V1.3.7 (2013-11-27): Bugfix
-* Fixed building defect DeleteQuery for tables ending with character 'T' (bug introduced in 1.3.3)
-* Prepared Fast Cursor for API level 19
-
-### V1.3.6 (2013-11-15): Bugfix
-* Fixed leaked statement in DeleteQuery
-
-### V1.3.5 (2013-11-14): Bugfix
-* Because of an issue with ApplicationTestCase, the base test class DbTest does not extend this class anymore.
-Note: This refactoring may require you to adjust some test classes if your tests depend on DbTest or its subclasses.
-
-### V1.3.4 (2013-10-28): Bugfix
-* Redeployment of 1.3.3 artifacts without some old class leftovers
-
-### V1.3.3 (2013-10-18): Bugfix
-* Fixed a memory leak affecting Query class that was introduced in 1.3.0 (#93)
-* Fixed a rare race condition that can lead to "Entity is detached from DAO context" DaoException (#101)
-
-### V1.3.2 (2013-08-28): Bugfix
-* Fixed building CountQueries with combined AND/OR conditions
-* Some secret inoffical work in progress
-
-### V1.3.1 (2013-03-02): Fixed Gradle dependencies
-* Don't use Gradle's "compile" dependency scope
-
-### V1.3.0 (2013-02-24): Multithreading robustness and refactoring (breaking changes!)
-* Reworked internal locking of insert/update/delete methods
-* Fixed potential deadlocks when transactions are executed concurrently to one of the various insert/update/delete calls
-* Reworked queries to be used without locking, query instances are now bound to their owner thread (breaking change!)
-* Relations use the new lock-free query API
-* Query classes were moved into the new query subpackage (breaking change!)
-* Introduced Gradle build scripts for DaoCore and DaoGenerator projects
-* Maven artifacts are pushed to Maven Central starting with this version
-* Added two packages for classes used internally (identityscope and internal)
-* Added new deleteByKeyInTx DAO method to efficiently delete multiple entities using their keys
-* Added some checks to throw exceptions with nicer messages telling what's wrong
-* Added Travis CI
-
-### V1.2.0 (2012-06-08): Feature release
-* Limited support of String PKs (no relations using String FKs yet)
-* Fixed index creation (please update your schema)
-* Added CountQuery for creating SELECT COUNT (*) queries with QueryBuilder
-* Added getDatabase in DaoMaster, DaoSession, and Dao
-* Added insertOrReplaceInTx in Dao
-* Added deleteInTx in Dao
-* Added autoincrement() creating AUTOINCREMENT PKs
-* Made DAOs and DaoSessions in active entities transient (allows serialization of entities)
-* Minor fixes
-
-### V1.1.2 (2012-03-26): ADT 17 support for demo project
-* Demo projects works with ADT 17 (moved greendao.jar into libs)
-* CREATE/DROP TABLE may be skipped for entity types: This allows having multiple entity types operate on the same table
-* Minor improvements
-
-### V1.1.1 (2012-02-14): Mini bugfix&feature release
-* Added NOT IN condition for QueryBuilder
-* Fix for Roboelectric (Issue #22)
-* Minor fix (Issue #5)
-
-### V1.1.0 (2012-02-13): Feature release
-* DeleteQuery for bulk deletes
-* Entities may implement Java interfaces
-* Entities may extend a Java class
-* Added LIMIT and OFFSET support for QueryBuilder and Query
-* Convenience methods to add named relationships
-* SQL scripts are executed in a transaction by default
-* Fixed queries with special column names (SQL keywords)
-* Changed default names for to-many relations to end with "List"
-* ORDER BY uses LOCALIZED collation for strings by default
-
-### V1.0.1 (2011-10-30): Bugfix release
-* Fixed generation of to-many relations
-* Fixed generated import statements when entities/DAO are not in the same package
-
-### V1.0.0 (2011-10-24): First open source release
-* To-many relations (lazily loaded on the entities)
-* To-many relations with custom join properties
-* Active entities can be updated, refreshed, and deleted directly
-* Significant performance improvements (faster identity scope, faster database result parser)
-* "Keep sections" for custom code in entities were added that won't be overwritten during code generation
-* Other minor improvements
-
-### Third preview (2011-08-19)
-http://greendao-orm.com/2011/08/19/query-builder-and-lazy-loading-lists/
-
-### Second preview (2011-08-12)
-http://greendao-orm.com/2011/08/12/greendao-2nd-preview/
-
-### First public release (2011-08-04)
-http://greendao-orm.com/2011/08/04/greendao-public-release/
\ No newline at end of file
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 00000000..ddc60ed5
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,39 @@
+Before you create an Issue...
+=============================
+
+There are better Places for Support
+-----------------------------------
+We want your question to be answered, so it is important that you ask at the right place. Be aware that an issue tracker is not the best place to ask for support. An issue tracker is used to track issues (bugs or feature requests).
+Instead, please use [stackoverflow.com](http://stackoverflow.com/questions/tagged/greendao?sort=frequent) and use the tag [greendao](http://stackoverflow.com/tags/greendao/info) for your question.
+
+If you want professional support, check http://greenrobot.org/contact-support/.
+
+Examples for support questions that are more likely to be answered on StackOverflow:
+
+* Asking how something works
+* Asking how to use greenDAO in a specific scenario
+* Your app crashes/misbehaves and you are not sure why
+
+The perfect Issue Report
+------------------------
+A couple of simple steps can save time for everyone.
+
+Check before reporting:
+
+* It's not a support inquiry
+* You have read the docs
+* You searched the web and stackoverflow
+* You searched existing issues to avoid duplicates
+
+Reporting bugs:
+
+ * Please investigate if is the bug is really caused by the library. Isolate the issue: what's the minimal code to reproduce the bug?
+ * Bonus steps to gain extra karma points: once you isolated and identified the issue, you can prepare an push request. Submit an unit test causing the bug, and ideally a fix for the bug.
+
+Requesting features:
+
+ * Ask yourself: is the feature useful for a majority users? One of our major goals is to keep the API simple and concise. We do not want to cover all possible use cases, but those that make 80% of users happy.
+
+Thanks for reading!
+===================
+It's your feedback that makes maintaining this library fun.
diff --git a/DaoCore/.gitignore b/DaoCore/.gitignore
index 5200a9fa..6a0dc5ea 100644
--- a/DaoCore/.gitignore
+++ b/DaoCore/.gitignore
@@ -1,5 +1 @@
-/gen
-/bin
-/release
-/build
 /gradle.properties
diff --git a/DaoCore/AndroidManifest.xml b/DaoCore/AndroidManifest.xml
deleted file mode 100644
index 5e02a364..00000000
--- a/DaoCore/AndroidManifest.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-      package="de.greenrobot.dao"
-      android:versionCode="1"
-      android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="4" />
-
-</manifest>
\ No newline at end of file
diff --git a/DaoCore/NOTICE b/DaoCore/NOTICE
index f4109c2c..27fa2131 100644
--- a/DaoCore/NOTICE
+++ b/DaoCore/NOTICE
@@ -1,4 +1,4 @@
-greenrobot greenDAO
-Copyright 2011 greenrobot.de
+greenrobot greenDAO (c) Copyright 2011-2016 by Markus Junginger / greenrobot.org
+All rights reserved
 
-This product includes software developed at greenrobot.de (http://greenrobot.de/).
\ No newline at end of file
+This product includes software developed at greenrobot.org
\ No newline at end of file
diff --git a/DaoCore/build.gradle b/DaoCore/build.gradle
index 4f3e7e2c..0e86d842 100644
--- a/DaoCore/build.gradle
+++ b/DaoCore/build.gradle
@@ -2,51 +2,43 @@ apply plugin: 'java'
 apply plugin: 'maven'
 apply plugin: 'signing'
 
-group = 'de.greenrobot'
+group = 'org.greenrobot'
 archivesBaseName = 'greendao'
-version = '2.1.0'
-sourceCompatibility = 1.6
-
-def isSnapshot = version.endsWith('-SNAPSHOT')
-def sonatypeRepositoryUrl
-if(isSnapshot) {
-	sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
-} else {
-	sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
-}
+version = rootProject.version
+sourceCompatibility = 1.7
+targetCompatibility = 1.7
 
 repositories {
     mavenCentral()
 }
 
-// provided is not supported in Gradle 1.4, see http://issues.gradle.org/browse/GRADLE-784
-// Like this, it won't appear at all in the POM
-configurations {
-    provided
-    deployerJars
-}
-
 dependencies {
-    provided 'com.google.android:android:4.1.1.4'
-    provided 'com.google.android:android-test:4.1.1.4'
-    provided 'com.google.android:annotations:4.1.1.4'
-    provided 'com.google.android:support-v4:r7'
-    // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4'
-    deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
-}
+    compile project(':greendao-api')
+    compileOnly 'com.google.android:android:4.1.1.4'
+    compileOnly 'com.google.android:android-test:4.1.1.4'
+    compileOnly 'com.google.android:annotations:4.1.1.4'
+    compileOnly 'com.google.android:support-v4:r7'
 
-sourceSets {
-    main {
-        compileClasspath += configurations.provided
-    }
+    compileOnly 'io.reactivex:rxjava:1.1.8'
+
+    compileOnly files('libs/sqlcipher.jar')
 }
 
 javadoc {
     failOnError = false
-    classpath += configurations.provided
     title = " greenDAO ${version} API"
-	options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2011-2015 <a href="http://greenrobot.de/">greenrobot.de</a>. All Rights Reserved.</i>'
-	excludes = ['de/greenrobot/dao/internal','de/greenrobot/dao/Internal*']
+    options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2011-2017 <a href="http://greenrobot.org/">greenrobot.org</a>. All Rights Reserved.</i>'
+
+    excludes = ['org/greenrobot/dao/internal', 'org/greenrobot/dao/Internal*']
+    def srcApi = project(':greendao-api').file('src/main/java/')
+    if (!srcApi.directory) throw new GradleScriptException("Not a directory: ${srcApi}", null)
+    source += srcApi
+    doLast {
+        copy {
+            from '../javadoc-style'
+            into "build/docs/javadoc/"
+        }
+    }
 }
 
 task javadocJar(type: Jar, dependsOn: javadoc) {
@@ -65,70 +57,22 @@ artifacts {
     archives sourcesJar
 }
 
-signing {
-    if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&
-    project.hasProperty('signing.secretKeyRingFile')) {
-        sign configurations.archives
-    } else {
-        println "Signing information missing/incomplete for ${project.name}"
-    }
-}
-
 uploadArchives {
     repositories {
         mavenDeployer {
-            if(project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername') 
-                && project.hasProperty('preferedPassword')) {
-                configuration = configurations.deployerJars
-                repository(url: preferedRepo) {
-                    authentication(userName: preferedUsername, password: preferedPassword)
-                }
-            } else if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
-                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
-                repository(url: sonatypeRepositoryUrl) {
-                    authentication(userName: sonatypeUsername, password: sonatypePassword)
+            // Basic definitions are defined in root project
+            pom.project {
+                name 'greenDAO'
+                description 'greenDAO is a light and fast ORM for Android'
+
+                licenses {
+                    license {
+                        name 'The Apache Software License, Version 2.0'
+                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
+                        distribution 'repo'
+                    }
                 }
-            } else {
-                println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}"
             }
-
-            pom.project {
-               name 'greenDAO'
-               packaging 'jar'
-               description 'greenDAO is a light and fast ORM for Android'
-               url 'http://greendao-orm.com'
-
-               scm {
-                   url 'https://github.com/greenrobot/greenDAO'
-                   connection 'scm:git@github.com:greenrobot/greenDAO.git'
-                   developerConnection 'scm:git@github.com:greenrobot/greenDAO.git'
-               }
-
-               licenses {
-                   license {
-                       name 'The Apache Software License, Version 2.0'
-                       url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
-                       distribution 'repo'
-                   }
-               }
-
-               developers {
-                   developer {
-                       id 'greenrobot'
-                       name 'greenrobot'
-                   }
-               }
-               
-               issueManagement {
-                   system 'GitHub Issues'
-                   url 'https://github.com/greenrobot/greenDAO/issues'
-               }
-               
-               organization {
-                   name 'greenrobot'
-                   url 'http://greenrobot.de'
-               }
-           }
         }
     }
 }
\ No newline at end of file
diff --git a/DaoCore/libs/sqlcipher.jar b/DaoCore/libs/sqlcipher.jar
new file mode 100644
index 00000000..b3bbb9ed
Binary files /dev/null and b/DaoCore/libs/sqlcipher.jar differ
diff --git a/DaoCore/mybuild.xml b/DaoCore/mybuild.xml
deleted file mode 100644
index de919041..00000000
--- a/DaoCore/mybuild.xml
+++ /dev/null
@@ -1,37 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="DaoCore" default="build-all">
-
-	<property name="version" value="1.3.0-SNAPSHOT" />
-	
-	<target name="build-all" depends="delete-release, build-jar, build-javadoc">
-	</target>
-
-	<target name="delete-release">
-		<delete dir="release" />
-	</target>
-
-	<target name="build-jar" description="Depends on Eclipse to have everthing compiled into bin/">
-		<mkdir dir="release" />
-		<jar jarfile="release/greenDAO-${version}.jar">
-			<fileset dir="bin/classes">
-				<include name="de/greenrobot/**" />
-			</fileset>
-		</jar>
-	</target>
-
-	<target name="build-javadoc" description="Creates javadoc for classes">
-		<delete dir="release/docs/api" />
-		<mkdir dir="release/docs/api" />
-		<javadoc destdir="release/docs/api" author="false" version="false" use="true" windowtitle="greenDAO API" public="true">
-			<packageset dir="src" defaultexcludes="yes">
-				<include name="de/greenrobot/dao/**" />
-			</packageset>
-			<doctitle>
-				<![CDATA[<h1>greenDAO API</h1>]]></doctitle>
-		<bottom>
-			<![CDATA[<i>Copyright &#169; 2011-2013 greenrobot.de. All Rights Reserved.</i>]]></bottom>
-</javadoc>
-<jar jarfile="release/greenDAO-${version}-javadoc.jar" basedir="release/docs/api" />
-</target>
-
-</project>
diff --git a/DaoCore/project.properties b/DaoCore/project.properties
deleted file mode 100644
index 96db7421..00000000
--- a/DaoCore/project.properties
+++ /dev/null
@@ -1,12 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system use,
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-
-android.library=true
-# Project target.
-target=android-4
diff --git a/DaoCore/res/values/dummy.xml b/DaoCore/res/values/dummy.xml
deleted file mode 100644
index 4c670337..00000000
--- a/DaoCore/res/values/dummy.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    
-</resources>
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQueryData.java b/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQueryData.java
deleted file mode 100644
index 460bc857..00000000
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQueryData.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package de.greenrobot.dao.query;
-
-import java.lang.ref.WeakReference;
-
-import android.os.Process;
-import android.util.SparseArray;
-import de.greenrobot.dao.AbstractDao;
-
-abstract class AbstractQueryData<T, Q extends AbstractQuery<T>> {
-    final String sql;
-    final AbstractDao<T, ?> dao;
-    final String[] initialValues;
-    final SparseArray<WeakReference<Q>> queriesForThreads;
-
-    AbstractQueryData(AbstractDao<T, ?> dao, String sql, String[] initialValues) {
-        this.dao = dao;
-        this.sql = sql;
-        this.initialValues = initialValues;
-        queriesForThreads = new SparseArray<WeakReference<Q>>();
-    }
-
-    /** Just an optimized version, which performs faster if the current thread is already the query's owner thread. */
-    Q forCurrentThread(Q query) {
-        if (Thread.currentThread() == query.ownerThread) {
-            System.arraycopy(initialValues, 0, query.parameters, 0, initialValues.length);
-            return query;
-        } else {
-            return forCurrentThread();
-        }
-    }
-
-    Q forCurrentThread() {
-        int threadId = Process.myTid();
-        if (threadId == 0) {
-            // Workaround for Robolectric, always returns 0
-            long id = Thread.currentThread().getId();
-            if (id < 0 || id > Integer.MAX_VALUE) {
-                throw new RuntimeException("Cannot handle thread ID: " + id);
-            }
-            threadId = (int) id;
-        }
-        synchronized (queriesForThreads) {
-            WeakReference<Q> queryRef = queriesForThreads.get(threadId);
-            Q query = queryRef != null ? queryRef.get() : null;
-            if (query == null) {
-                gc();
-                query = createQuery();
-                queriesForThreads.put(threadId, new WeakReference<Q>(query));
-            } else {
-                System.arraycopy(initialValues, 0, query.parameters, 0, initialValues.length);
-            }
-            return query;
-        }
-    }
-
-    abstract protected Q createQuery();
-
-    void gc() {
-        synchronized (queriesForThreads) {
-            for (int i = queriesForThreads.size() - 1; i >= 0; i--) {
-                if (queriesForThreads.valueAt(i).get() == null) {
-                    queriesForThreads.remove(queriesForThreads.keyAt(i));
-                }
-            }
-        }
-    }
-
-}
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDao.java
similarity index 74%
rename from DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/AbstractDao.java
index d39b306a..de08fe2c 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDao.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2013 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,28 +14,32 @@
  * limitations under the License.
  */
 
-package de.greenrobot.dao;
+package org.greenrobot.greendao;
 
 import android.database.CrossProcessCursor;
 import android.database.Cursor;
 import android.database.CursorWindow;
-import android.database.DatabaseUtils;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
+import org.greenrobot.greendao.annotation.apihint.Experimental;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
+import org.greenrobot.greendao.identityscope.IdentityScope;
+import org.greenrobot.greendao.identityscope.IdentityScopeLong;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.internal.FastCursor;
+import org.greenrobot.greendao.internal.TableStatements;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.query.QueryBuilder;
+import org.greenrobot.greendao.rx.RxDao;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.List;
 
-import de.greenrobot.dao.identityscope.IdentityScope;
-import de.greenrobot.dao.identityscope.IdentityScopeLong;
-import de.greenrobot.dao.internal.DaoConfig;
-import de.greenrobot.dao.internal.FastCursor;
-import de.greenrobot.dao.internal.TableStatements;
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.query.QueryBuilder;
+import rx.schedulers.Schedulers;
 
 /**
  * Base class for all DAOs: Implements entity operations like insert, load, delete, and query.
@@ -51,20 +55,24 @@
  * 
  * 1.) If not inside a TX already, begin a TX to acquire a DB connection (connection is to be handled like a lock)
  * 
- * 2.) The SQLiteStatement
+ * 2.) The DatabaseStatement
  * 
  * 3.) identityScope
  */
 public abstract class AbstractDao<T, K> {
-    protected final SQLiteDatabase db;
     protected final DaoConfig config;
-    protected IdentityScope<K, T> identityScope;
-    protected IdentityScopeLong<T> identityScopeLong;
-    protected TableStatements statements;
+    protected final Database db;
+    protected final boolean isStandardSQLite;
+    protected final IdentityScope<K, T> identityScope;
+    protected final IdentityScopeLong<T> identityScopeLong;
+    protected final TableStatements statements;
 
     protected final AbstractDaoSession session;
     protected final int pkOrdinal;
 
+    private volatile RxDao<T, K> rxDao;
+    private volatile RxDao<T, K> rxDaoPlain;
+
     public AbstractDao(DaoConfig config) {
         this(config, null);
     }
@@ -74,9 +82,12 @@ public AbstractDao(DaoConfig config, AbstractDaoSession daoSession) {
         this.config = config;
         this.session = daoSession;
         db = config.db;
+        isStandardSQLite = db.getRawDatabase() instanceof SQLiteDatabase;
         identityScope = (IdentityScope<K, T>) config.getIdentityScope();
         if (identityScope instanceof IdentityScopeLong) {
             identityScopeLong = (IdentityScopeLong<T>) identityScope;
+        } else {
+            identityScopeLong = null;
         }
         statements = config.statements;
         pkOrdinal = config.pkProperty != null ? config.pkProperty.ordinal : -1;
@@ -115,7 +126,7 @@ public Property getPkProperty() {
     }
 
     /**
-     * Loads and entity for the given PK.
+     * Loads the entity for the given PK.
      *
      * @param key a PK value or null
      * @return The entity or null, if no entity matched the PK value
@@ -177,6 +188,16 @@ public boolean detach(T entity) {
         }
     }
 
+    /**
+     * Detaches all entities (of type T) from the identity scope (session). Subsequent query results won't return any
+     * previously loaded objects.
+     */
+    public void detachAll() {
+        if (identityScope != null) {
+            identityScope.clear();
+        }
+    }
+
     protected List<T> loadAllAndCloseCursor(Cursor cursor) {
         try {
             return loadAllFromCursor(cursor);
@@ -208,10 +229,11 @@ public void insertInTx(T... entities) {
      * is set.
      *
      * @param entities      The entities to insert.
-     * @param setPrimaryKey if true, the PKs of the given will be set after the insert; pass false to improve performance.
+     * @param setPrimaryKey if true, the PKs of the given will be set after the insert; pass false to improve
+     *                      performance.
      */
     public void insertInTx(Iterable<T> entities, boolean setPrimaryKey) {
-        SQLiteStatement stmt = statements.getInsertStatement();
+        DatabaseStatement stmt = statements.getInsertStatement();
         executeInsertInTx(stmt, entities, setPrimaryKey);
     }
 
@@ -220,10 +242,11 @@ public void insertInTx(Iterable<T> entities, boolean setPrimaryKey) {
      * tracked if the PK is set.
      *
      * @param entities      The entities to insert.
-     * @param setPrimaryKey if true, the PKs of the given will be set after the insert; pass false to improve performance.
+     * @param setPrimaryKey if true, the PKs of the given will be set after the insert; pass false to improve
+     *                      performance.
      */
     public void insertOrReplaceInTx(Iterable<T> entities, boolean setPrimaryKey) {
-        SQLiteStatement stmt = statements.getInsertOrReplaceStatement();
+        DatabaseStatement stmt = statements.getInsertOrReplaceStatement();
         executeInsertInTx(stmt, entities, setPrimaryKey);
     }
 
@@ -245,7 +268,7 @@ public void insertOrReplaceInTx(T... entities) {
         insertOrReplaceInTx(Arrays.asList(entities), isEntityUpdateable());
     }
 
-    private void executeInsertInTx(SQLiteStatement stmt, Iterable<T> entities, boolean setPrimaryKey) {
+    private void executeInsertInTx(DatabaseStatement stmt, Iterable<T> entities, boolean setPrimaryKey) {
         db.beginTransaction();
         try {
             synchronized (stmt) {
@@ -253,13 +276,26 @@ private void executeInsertInTx(SQLiteStatement stmt, Iterable<T> entities, boole
                     identityScope.lock();
                 }
                 try {
-                    for (T entity : entities) {
-                        bindValues(stmt, entity);
-                        if (setPrimaryKey) {
-                            long rowId = stmt.executeInsert();
-                            updateKeyAfterInsertAndAttach(entity, rowId, false);
-                        } else {
-                            stmt.execute();
+                    if (isStandardSQLite) {
+                        SQLiteStatement rawStmt = (SQLiteStatement) stmt.getRawStatement();
+                        for (T entity : entities) {
+                            bindValues(rawStmt, entity);
+                            if (setPrimaryKey) {
+                                long rowId = rawStmt.executeInsert();
+                                updateKeyAfterInsertAndAttach(entity, rowId, false);
+                            } else {
+                                rawStmt.execute();
+                            }
+                        }
+                    } else {
+                        for (T entity : entities) {
+                            bindValues(stmt, entity);
+                            if (setPrimaryKey) {
+                                long rowId = stmt.executeInsert();
+                                updateKeyAfterInsertAndAttach(entity, rowId, false);
+                            } else {
+                                stmt.execute();
+                            }
                         }
                     }
                 } finally {
@@ -280,37 +316,19 @@ private void executeInsertInTx(SQLiteStatement stmt, Iterable<T> entities, boole
      * @return row ID of newly inserted entity
      */
     public long insert(T entity) {
-        return executeInsert(entity, statements.getInsertStatement());
+        return executeInsert(entity, statements.getInsertStatement(), true);
     }
 
     /**
-     * Insert an entity into the table associated with a concrete DAO <b>without</b> setting key property. Warning: This
-     * may be faster, but the entity should not be used anymore. The entity also won't be attached to identy scope.
+     * Insert an entity into the table associated with a concrete DAO <b>without</b> setting key property.
+     * <p>
+     * Warning: This may be faster, but the entity should not be used anymore. The entity also won't be attached to
+     * identity scope.
      *
      * @return row ID of newly inserted entity
      */
     public long insertWithoutSettingPk(T entity) {
-        SQLiteStatement stmt = statements.getInsertStatement();
-        long rowId;
-        if (db.isDbLockedByCurrentThread()) {
-            synchronized (stmt) {
-                bindValues(stmt, entity);
-                rowId = stmt.executeInsert();
-            }
-        } else {
-            // Do TX to acquire a connection before locking the stmt to avoid deadlocks
-            db.beginTransaction();
-            try {
-                synchronized (stmt) {
-                    bindValues(stmt, entity);
-                    rowId = stmt.executeInsert();
-                }
-                db.setTransactionSuccessful();
-            } finally {
-                db.endTransaction();
-            }
-        }
-        return rowId;
+        return executeInsert(entity, statements.getInsertOrReplaceStatement(), false);
     }
 
     /**
@@ -319,33 +337,42 @@ public long insertWithoutSettingPk(T entity) {
      * @return row ID of newly inserted entity
      */
     public long insertOrReplace(T entity) {
-        return executeInsert(entity, statements.getInsertOrReplaceStatement());
+        return executeInsert(entity, statements.getInsertOrReplaceStatement(), true);
     }
 
-    private long executeInsert(T entity, SQLiteStatement stmt) {
+    private long executeInsert(T entity, DatabaseStatement stmt, boolean setKeyAndAttach) {
         long rowId;
         if (db.isDbLockedByCurrentThread()) {
-            synchronized (stmt) {
-                bindValues(stmt, entity);
-                rowId = stmt.executeInsert();
-            }
+            rowId = insertInsideTx(entity, stmt);
         } else {
             // Do TX to acquire a connection before locking the stmt to avoid deadlocks
             db.beginTransaction();
             try {
-                synchronized (stmt) {
-                    bindValues(stmt, entity);
-                    rowId = stmt.executeInsert();
-                }
+                rowId = insertInsideTx(entity, stmt);
                 db.setTransactionSuccessful();
             } finally {
                 db.endTransaction();
             }
         }
-        updateKeyAfterInsertAndAttach(entity, rowId, true);
+        if (setKeyAndAttach) {
+            updateKeyAfterInsertAndAttach(entity, rowId, true);
+        }
         return rowId;
     }
 
+    private long insertInsideTx(T entity, DatabaseStatement stmt) {
+        synchronized (stmt) {
+            if (isStandardSQLite) {
+                SQLiteStatement rawStmt = (SQLiteStatement) stmt.getRawStatement();
+                bindValues(rawStmt, entity);
+                return rawStmt.executeInsert();
+            } else {
+                bindValues(stmt, entity);
+                return stmt.executeInsert();
+            }
+        }
+    }
+
     protected void updateKeyAfterInsertAndAttach(T entity, long rowId, boolean lock) {
         if (rowId != -1) {
             K key = updateKeyAfterInsert(entity, rowId);
@@ -356,11 +383,76 @@ protected void updateKeyAfterInsertAndAttach(T entity, long rowId, boolean lock)
         }
     }
 
+    /**
+     * "Saves" an entity to the database: depending on the existence of the key property, it will be inserted
+     * (key is null) or updated (key is not null).
+     * <p>
+     * This is similar to {@link #insertOrReplace(Object)}, but may be more efficient, because if a key is present,
+     * it does not have to query if that key already exists.
+     */
+    public void save(T entity) {
+        if (hasKey(entity)) {
+            update(entity);
+        } else {
+            insert(entity);
+        }
+    }
+
+    /**
+     * Saves (see {@link #save(Object)}) the given entities in the database using a transaction.
+     *
+     * @param entities The entities to save.
+     */
+    public void saveInTx(T... entities) {
+        saveInTx(Arrays.asList(entities));
+    }
+
+    /**
+     * Saves (see {@link #save(Object)}) the given entities in the database using a transaction.
+     *
+     * @param entities The entities to save.
+     */
+    public void saveInTx(Iterable<T> entities) {
+        int updateCount = 0;
+        int insertCount = 0;
+        for (T entity : entities) {
+            if (hasKey(entity)) {
+                updateCount++;
+            } else {
+                insertCount++;
+            }
+        }
+        if (updateCount > 0 && insertCount > 0) {
+            List<T> toUpdate = new ArrayList<>(updateCount);
+            List<T> toInsert = new ArrayList<>(insertCount);
+            for (T entity : entities) {
+                if (hasKey(entity)) {
+                    toUpdate.add(entity);
+                } else {
+                    toInsert.add(entity);
+                }
+            }
+
+            db.beginTransaction();
+            try {
+                updateInTx(toUpdate);
+                insertInTx(toInsert);
+                db.setTransactionSuccessful();
+            } finally {
+                db.endTransaction();
+            }
+        } else if (insertCount > 0) {
+            insertInTx(entities);
+        } else if (updateCount > 0) {
+            updateInTx(entities);
+        }
+    }
+
     /** Reads all available rows from the given cursor and returns a list of entities. */
     protected List<T> loadAllFromCursor(Cursor cursor) {
         int count = cursor.getCount();
         if (count == 0) {
-            return Collections.EMPTY_LIST;
+            return new ArrayList<T>();
         }
         List<T> list = new ArrayList<T>(count);
         CursorWindow window = null;
@@ -407,12 +499,12 @@ private void loadAllUnlockOnWindowBounds(Cursor cursor, CursorWindow window, Lis
             row++;
             if (row >= windowEnd) {
                 window = moveToNextUnlocked(cursor);
-                if(window == null) {
+                if (window == null) {
                     break;
                 }
                 windowEnd = window.getStartPosition() + window.getNumRows();
             } else {
-                if(!cursor.moveToNext()) {
+                if (!cursor.moveToNext()) {
                     break;
                 }
             }
@@ -426,7 +518,7 @@ private void loadAllUnlockOnWindowBounds(Cursor cursor, CursorWindow window, Lis
     private CursorWindow moveToNextUnlocked(Cursor cursor) {
         identityScope.unlock();
         try {
-            if(cursor.moveToNext()) {
+            if (cursor.moveToNext()) {
                 return ((CrossProcessCursor) cursor).getWindow();
             } else {
                 return null;
@@ -537,7 +629,7 @@ public void delete(T entity) {
     /** Deletes an entity with the given PK from the database. Currently, only single value PK entities are supported. */
     public void deleteByKey(K key) {
         assertSinglePk();
-        SQLiteStatement stmt = statements.getDeleteStatement();
+        DatabaseStatement stmt = statements.getDeleteStatement();
         if (db.isDbLockedByCurrentThread()) {
             synchronized (stmt) {
                 deleteByKeyInsideSynchronized(key, stmt);
@@ -559,7 +651,7 @@ public void deleteByKey(K key) {
         }
     }
 
-    private void deleteByKeyInsideSynchronized(K key, SQLiteStatement stmt) {
+    private void deleteByKeyInsideSynchronized(K key, DatabaseStatement stmt) {
         if (key instanceof Long) {
             stmt.bindLong(1, (Long) key);
         } else if (key == null) {
@@ -572,7 +664,7 @@ private void deleteByKeyInsideSynchronized(K key, SQLiteStatement stmt) {
 
     private void deleteInTxInternal(Iterable<T> entities, Iterable<K> keys) {
         assertSinglePk();
-        SQLiteStatement stmt = statements.getDeleteStatement();
+        DatabaseStatement stmt = statements.getDeleteStatement();
         List<K> keysToRemoveFromIdentityScope = null;
         db.beginTransaction();
         try {
@@ -674,10 +766,14 @@ public void refresh(T entity) {
 
     public void update(T entity) {
         assertSinglePk();
-        SQLiteStatement stmt = statements.getUpdateStatement();
+        DatabaseStatement stmt = statements.getUpdateStatement();
         if (db.isDbLockedByCurrentThread()) {
             synchronized (stmt) {
-                updateInsideSynchronized(entity, stmt, true);
+                if (isStandardSQLite) {
+                    updateInsideSynchronized(entity, (SQLiteStatement) stmt.getRawStatement(), true);
+                } else {
+                    updateInsideSynchronized(entity, stmt, true);
+                }
             }
         } else {
             // Do TX to acquire a connection before locking the stmt to avoid deadlocks
@@ -697,6 +793,22 @@ public void update(T entity) {
         return QueryBuilder.internalCreate(this);
     }
 
+    protected void updateInsideSynchronized(T entity, DatabaseStatement stmt, boolean lock) {
+        // To do? Check if it's worth not to bind PKs here (performance).
+        bindValues(stmt, entity);
+        int index = config.allColumns.length + 1;
+        K key = getKey(entity);
+        if (key instanceof Long) {
+            stmt.bindLong(index, (Long) key);
+        } else if (key == null) {
+            throw new DaoException("Cannot update entity without key - was it inserted before?");
+        } else {
+            stmt.bindString(index, key.toString());
+        }
+        stmt.execute();
+        attachEntity(key, entity, lock);
+    }
+
     protected void updateInsideSynchronized(T entity, SQLiteStatement stmt, boolean lock) {
         // To do? Check if it's worth not to bind PKs here (performance).
         bindValues(stmt, entity);
@@ -745,8 +857,9 @@ protected void attachEntity(T entity) {
      * @param entities The entities to insert.
      */
     public void updateInTx(Iterable<T> entities) {
-        SQLiteStatement stmt = statements.getUpdateStatement();
+        DatabaseStatement stmt = statements.getUpdateStatement();
         db.beginTransaction();
+        // txEx: just to preserve original exception in case another exceptions is thrown in endTransaction()
         RuntimeException txEx = null;
         try {
             synchronized (stmt) {
@@ -754,8 +867,15 @@ public void updateInTx(Iterable<T> entities) {
                     identityScope.lock();
                 }
                 try {
-                    for (T entity : entities) {
-                        updateInsideSynchronized(entity, stmt, false);
+                    if (isStandardSQLite) {
+                        SQLiteStatement rawStmt = (SQLiteStatement) stmt.getRawStatement();
+                        for (T entity : entities) {
+                            updateInsideSynchronized(entity, rawStmt, false);
+                        }
+                    } else {
+                        for (T entity : entities) {
+                            updateInsideSynchronized(entity, stmt, false);
+                        }
                     }
                 } finally {
                     if (identityScope != null) {
@@ -778,6 +898,9 @@ public void updateInTx(Iterable<T> entities) {
                 }
             }
         }
+        if (txEx != null) {
+            throw txEx;
+        }
     }
 
     /**
@@ -796,7 +919,7 @@ protected void assertSinglePk() {
     }
 
     public long count() {
-        return DatabaseUtils.queryNumEntries(db, '\'' + config.tablename + '\'');
+        return statements.getCountStatement().simpleQueryForLong();
     }
 
     /** See {@link #getKey(Object)}, but guarantees that the returned key is never null (throws if null). */
@@ -813,14 +936,43 @@ protected K getKeyVerified(T entity) {
         }
     }
 
+    /**
+     * The returned RxDao is a special DAO that let's you interact with Rx Observables without any Scheduler set
+     * for subscribeOn.
+     *
+     * @see #rx()
+     */
+    @Experimental
+    public RxDao<T, K> rxPlain() {
+        if (rxDaoPlain == null) {
+            rxDaoPlain = new RxDao<>(this);
+        }
+        return rxDaoPlain;
+    }
+
+    /**
+     * The returned RxDao is a special DAO that let's you interact with Rx Observables using RX's IO scheduler for
+     * subscribeOn.
+     *
+     * @see #rxPlain()
+     */
+    @Experimental
+    public RxDao<T, K> rx() {
+        if (rxDao == null) {
+            rxDao = new RxDao<>(this, Schedulers.io());
+        }
+        return rxDao;
+    }
+
     /** Gets the SQLiteDatabase for custom database access. Not needed for greenDAO entities. */
-    public SQLiteDatabase getDatabase() {
+    public Database getDatabase() {
         return db;
     }
 
     /** Reads the values from the current position of the given cursor and returns a new entity. */
     abstract protected T readEntity(Cursor cursor, int offset);
 
+
     /** Reads the key from the current position of the given cursor, or returns null if there's no single-value key. */
     abstract protected K readKey(Cursor cursor, int offset);
 
@@ -828,7 +980,13 @@ public SQLiteDatabase getDatabase() {
     abstract protected void readEntity(Cursor cursor, T entity, int offset);
 
     /** Binds the entity's values to the statement. Make sure to synchronize the statement outside of the method. */
-    abstract protected void bindValues(SQLiteStatement stmt, T entity);
+    abstract protected void bindValues(DatabaseStatement stmt, T entity);
+
+    /**
+     * Binds the entity's values to the statement. Make sure to synchronize the enclosing DatabaseStatement outside
+     * of the method.
+     */
+    protected abstract void bindValues(SQLiteStatement stmt, T entity);
 
     /**
      * Updates the entity's key if possible (only for Long PKs currently). This method must always return the entity's
@@ -842,6 +1000,12 @@ public SQLiteDatabase getDatabase() {
      */
     abstract protected K getKey(T entity);
 
+    /**
+     * Returns true if the entity is not null, and has a non-null key, which is also != 0.
+     * entity is null.
+     */
+    abstract protected boolean hasKey(T entity);
+
     /** Returns true if the Entity class can be updated, e.g. for setting the PK after insert. */
     abstract protected boolean isEntityUpdateable();
 
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoMaster.java b/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDaoMaster.java
similarity index 79%
rename from DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoMaster.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/AbstractDaoMaster.java
index 5b635bcd..c9c54e6a 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoMaster.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDaoMaster.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package de.greenrobot.dao;
+package org.greenrobot.greendao;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import android.database.sqlite.SQLiteDatabase;
-import de.greenrobot.dao.identityscope.IdentityScopeType;
-import de.greenrobot.dao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.identityscope.IdentityScopeType;
+import org.greenrobot.greendao.internal.DaoConfig;
 
 /**
  * The master of dao will guide you: start dao sessions with the master.
@@ -29,11 +29,11 @@
  * @author Markus
  */
 public abstract class AbstractDaoMaster {
-    protected final SQLiteDatabase db;
+    protected final Database db;
     protected final int schemaVersion;
     protected final Map<Class<? extends AbstractDao<?, ?>>, DaoConfig> daoConfigMap;
 
-    public AbstractDaoMaster(SQLiteDatabase db, int schemaVersion) {
+    public AbstractDaoMaster(Database db, int schemaVersion) {
         this.db = db;
         this.schemaVersion = schemaVersion;
 
@@ -50,7 +50,7 @@ public int getSchemaVersion() {
     }
 
     /** Gets the SQLiteDatabase for custom database access. Not needed for greenDAO entities. */
-    public SQLiteDatabase getDatabase() {
+    public Database getDatabase() {
         return db;
     }
 
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoSession.java b/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDaoSession.java
similarity index 83%
rename from DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoSession.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/AbstractDaoSession.java
index c3a3d5ce..f8636bb6 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoSession.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDaoSession.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao;
+package org.greenrobot.greendao;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -22,9 +22,13 @@
 import java.util.Map;
 import java.util.concurrent.Callable;
 
-import android.database.sqlite.SQLiteDatabase;
-import de.greenrobot.dao.async.AsyncSession;
-import de.greenrobot.dao.query.QueryBuilder;
+import org.greenrobot.greendao.annotation.apihint.Experimental;
+import org.greenrobot.greendao.async.AsyncSession;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.query.QueryBuilder;
+import org.greenrobot.greendao.rx.RxTransaction;
+
+import rx.schedulers.Schedulers;
 
 /**
  * DaoSession gives you access to your DAOs, offers convenient persistence methods, and also serves as a session cache.<br>
@@ -46,10 +50,13 @@
  * 
  */
 public class AbstractDaoSession {
-    private final SQLiteDatabase db;
+    private final Database db;
     private final Map<Class<?>, AbstractDao<?, ?>> entityToDao;
 
-    public AbstractDaoSession(SQLiteDatabase db) {
+    private volatile RxTransaction rxTxPlain;
+    private volatile RxTransaction rxTxIo;
+
+    public AbstractDaoSession(Database db) {
         this.db = db;
         this.entityToDao = new HashMap<Class<?>, AbstractDao<?, ?>>();
     }
@@ -184,8 +191,8 @@ public void runInTx(Runnable runnable) {
         }
     }
 
-    /** Gets the SQLiteDatabase for custom database access. Not needed for greenDAO entities. */
-    public SQLiteDatabase getDatabase() {
+    /** Gets the Database for custom database access. Not needed for greenDAO entities. */
+    public Database getDatabase() {
         return db;
     }
 
@@ -201,4 +208,32 @@ public AsyncSession startAsyncSession() {
         return new AsyncSession(this);
     }
 
+    /**
+     * The returned {@link RxTransaction} allows DB transactions using Rx Observables without any Scheduler set for
+     * subscribeOn.
+     *
+     * @see #rxTx()
+     */
+    @Experimental
+    public RxTransaction rxTxPlain() {
+        if (rxTxPlain == null) {
+            rxTxPlain = new RxTransaction(this);
+        }
+        return rxTxPlain;
+    }
+
+    /**
+     * The returned {@link RxTransaction} allows DB transactions using Rx Observables using RX's IO scheduler for
+     * subscribeOn.
+     *
+     * @see #rxTxPlain()
+     */
+    @Experimental
+    public RxTransaction rxTx() {
+        if (rxTxIo == null) {
+            rxTxIo = new RxTransaction(this, Schedulers.io());
+        }
+        return rxTxIo;
+    }
+
 }
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/DaoException.java b/DaoCore/src/main/java/org/greenrobot/greendao/DaoException.java
similarity index 92%
rename from DaoCore/src/main/java/de/greenrobot/dao/DaoException.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/DaoException.java
index a428d1b7..d20a0ed2 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/DaoException.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/DaoException.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao;
+package org.greenrobot.greendao;
 
 import android.database.SQLException;
 
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/DaoLog.java b/DaoCore/src/main/java/org/greenrobot/greendao/DaoLog.java
similarity index 95%
rename from DaoCore/src/main/java/de/greenrobot/dao/DaoLog.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/DaoLog.java
index e46f6e93..edb8e94e 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/DaoLog.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/DaoLog.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package de.greenrobot.dao;
+package org.greenrobot.greendao;
 
 import android.util.Log;
 
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/DbUtils.java b/DaoCore/src/main/java/org/greenrobot/greendao/DbUtils.java
similarity index 84%
rename from DaoCore/src/main/java/de/greenrobot/dao/DbUtils.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/DbUtils.java
index 4cf4a389..ca4d49be 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/DbUtils.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/DbUtils.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package de.greenrobot.dao;
+package org.greenrobot.greendao;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -26,20 +26,22 @@
 import android.database.DatabaseUtils;
 import android.database.sqlite.SQLiteDatabase;
 
+import org.greenrobot.greendao.database.Database;
+
 /** Database utils, for example to execute SQL scripts */
 // TODO add unit tests
 public class DbUtils {
 
-    public static void vacuum(SQLiteDatabase db) {
+    public static void vacuum(Database db) {
         db.execSQL("VACUUM");
     }
 
     /**
-     * Calls {@link #executeSqlScript(Context, SQLiteDatabase, String, boolean)} with transactional set to true.
+     * Calls {@link #executeSqlScript(Context, Database, String, boolean)} with transactional set to true.
      * 
      * @return number of statements executed.
      */
-    public static int executeSqlScript(Context context, SQLiteDatabase db, String assetFilename) throws IOException {
+    public static int executeSqlScript(Context context, Database db, String assetFilename) throws IOException {
         return executeSqlScript(context, db, assetFilename, true);
     }
 
@@ -51,7 +53,7 @@ public static int executeSqlScript(Context context, SQLiteDatabase db, String as
      * 
      * @return number of statements executed.
      */
-    public static int executeSqlScript(Context context, SQLiteDatabase db, String assetFilename, boolean transactional)
+    public static int executeSqlScript(Context context, Database db, String assetFilename, boolean transactional)
             throws IOException {
         byte[] bytes = readAsset(context, assetFilename);
         String sql = new String(bytes, "UTF-8");
@@ -66,7 +68,7 @@ public static int executeSqlScript(Context context, SQLiteDatabase db, String as
         return count;
     }
 
-    public static int executeSqlStatementsInTx(SQLiteDatabase db, String[] statements) {
+    public static int executeSqlStatementsInTx(Database db, String[] statements) {
         db.beginTransaction();
         try {
             int count = executeSqlStatements(db, statements);
@@ -77,7 +79,7 @@ public static int executeSqlStatementsInTx(SQLiteDatabase db, String[] statement
         }
     }
 
-    public static int executeSqlStatements(SQLiteDatabase db, String[] statements) {
+    public static int executeSqlStatements(Database db, String[] statements) {
         int count = 0;
         for (String line : statements) {
             line = line.trim();
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/InternalQueryDaoAccess.java b/DaoCore/src/main/java/org/greenrobot/greendao/InternalQueryDaoAccess.java
similarity index 53%
rename from DaoCore/src/main/java/de/greenrobot/dao/InternalQueryDaoAccess.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/InternalQueryDaoAccess.java
index d1896079..e345349a 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/InternalQueryDaoAccess.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/InternalQueryDaoAccess.java
@@ -1,9 +1,25 @@
-package de.greenrobot.dao;
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao;
 
 import java.util.List;
 
 import android.database.Cursor;
-import de.greenrobot.dao.internal.TableStatements;
+import org.greenrobot.greendao.internal.TableStatements;
 
 /** For internal use by greenDAO only. */
 public final class InternalQueryDaoAccess<T> {
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/InternalUnitTestDaoAccess.java b/DaoCore/src/main/java/org/greenrobot/greendao/InternalUnitTestDaoAccess.java
similarity index 80%
rename from DaoCore/src/main/java/de/greenrobot/dao/InternalUnitTestDaoAccess.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/InternalUnitTestDaoAccess.java
index 78df9030..248bba63 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/InternalUnitTestDaoAccess.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/InternalUnitTestDaoAccess.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,20 +14,20 @@
  * limitations under the License.
  */
 
-package de.greenrobot.dao;
-
-import java.lang.reflect.Constructor;
+package org.greenrobot.greendao;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import de.greenrobot.dao.identityscope.IdentityScope;
-import de.greenrobot.dao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.identityscope.IdentityScope;
+import org.greenrobot.greendao.internal.DaoConfig;
+
+import java.lang.reflect.Constructor;
 
 /** Reserved for internal unit tests that want to access some non-public methods. Don't use for anything else. */
 public class InternalUnitTestDaoAccess<T, K> {
     private final AbstractDao<T, K> dao;
 
-    public InternalUnitTestDaoAccess(SQLiteDatabase db, Class<AbstractDao<T, K>> daoClass, IdentityScope<?, ?> identityScope)
+    public InternalUnitTestDaoAccess(Database db, Class<AbstractDao<T, K>> daoClass, IdentityScope<?, ?> identityScope)
             throws Exception {
         DaoConfig daoConfig = new DaoConfig(db, daoClass);
         daoConfig.setIdentityScope(identityScope);
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/Property.java b/DaoCore/src/main/java/org/greenrobot/greendao/Property.java
similarity index 93%
rename from DaoCore/src/main/java/de/greenrobot/dao/Property.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/Property.java
index 77923eb7..b05227d0 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/Property.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/Property.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package de.greenrobot.dao;
+package org.greenrobot.greendao;
 
 import java.util.Collection;
 
-import de.greenrobot.dao.internal.SqlUtils;
-import de.greenrobot.dao.query.WhereCondition;
-import de.greenrobot.dao.query.WhereCondition.PropertyCondition;
+import org.greenrobot.greendao.internal.SqlUtils;
+import org.greenrobot.greendao.query.WhereCondition;
+import org.greenrobot.greendao.query.WhereCondition.PropertyCondition;
 
 /**
  * Meta data describing a property mapped to a database column; used to create WhereCondition object used by the query builder.
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncDaoException.java b/DaoCore/src/main/java/org/greenrobot/greendao/async/AsyncDaoException.java
similarity index 86%
rename from DaoCore/src/main/java/de/greenrobot/dao/async/AsyncDaoException.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/async/AsyncDaoException.java
index 48335b4a..6d47318c 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncDaoException.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/async/AsyncDaoException.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package de.greenrobot.dao.async;
+package org.greenrobot.greendao.async;
 
-import de.greenrobot.dao.DaoException;
+import org.greenrobot.greendao.DaoException;
 
 /**
  * Used here: {@link AsyncOperation#getResult()}.
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperation.java b/DaoCore/src/main/java/org/greenrobot/greendao/async/AsyncOperation.java
similarity index 93%
rename from DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperation.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/async/AsyncOperation.java
index 38136065..8dd91ae3 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperation.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/async/AsyncOperation.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package de.greenrobot.dao.async;
+package org.greenrobot.greendao.async;
 
-import android.database.sqlite.SQLiteDatabase;
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoException;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.database.Database;
 
 /**
  * An operation that will be enqueued for asynchronous execution.
@@ -28,7 +28,7 @@
  */
 // TODO Implement Future<V>
 public class AsyncOperation {
-    public static enum OperationType {
+    public enum OperationType {
         Insert, InsertInTxIterable, InsertInTxArray, //
         InsertOrReplace, InsertOrReplaceInTxIterable, InsertOrReplaceInTxArray, //
         Update, UpdateInTxIterable, UpdateInTxArray, //
@@ -48,7 +48,7 @@
 
     final OperationType type;
     final AbstractDao<Object, Object> dao;
-    private final SQLiteDatabase database;
+    private final Database database;
     /** Entity, Iterable<Entity>, Entity[], or Runnable. */
     final Object parameter;
     final int flags;
@@ -65,7 +65,7 @@
 
     @SuppressWarnings("unchecked")
     /** Either supply dao or database (set other to null). */
-    AsyncOperation(OperationType type, AbstractDao<?, ?> dao, SQLiteDatabase database, Object parameter, int flags) {
+    AsyncOperation(OperationType type, AbstractDao<?, ?> dao, Database database, Object parameter, int flags) {
         this.type = type;
         this.flags = flags;
         this.dao = (AbstractDao<Object, Object>) dao;
@@ -112,7 +112,7 @@ public boolean isMergeTx() {
         return (flags & FLAG_MERGE_TX) != 0;
     }
 
-    SQLiteDatabase getDatabase() {
+    Database getDatabase() {
         return database != null ? database : dao.getDatabase();
     }
 
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperationExecutor.java b/DaoCore/src/main/java/org/greenrobot/greendao/async/AsyncOperationExecutor.java
similarity index 96%
rename from DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperationExecutor.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/async/AsyncOperationExecutor.java
index 6e3b277a..1b8b0967 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperationExecutor.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/async/AsyncOperationExecutor.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.async;
+package org.greenrobot.greendao.async;
 
-import android.database.sqlite.SQLiteDatabase;
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.DaoLog;
-import de.greenrobot.dao.query.Query;
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.query.Query;
 
 import java.util.ArrayList;
 import java.util.concurrent.BlockingQueue;
@@ -181,7 +181,7 @@ private void mergeTxAndExecute(AsyncOperation operation1, AsyncOperation operati
         mergedOps.add(operation1);
         mergedOps.add(operation2);
 
-        SQLiteDatabase db = operation1.getDatabase();
+        Database db = operation1.getDatabase();
         db.beginTransaction();
         boolean success = false;
         try {
@@ -342,7 +342,7 @@ private void executeOperation(AsyncOperation operation) {
     }
 
     private void executeTransactionRunnable(AsyncOperation operation) {
-        SQLiteDatabase db = operation.getDatabase();
+        Database db = operation.getDatabase();
         db.beginTransaction();
         try {
             ((Runnable) operation.parameter).run();
@@ -354,7 +354,7 @@ private void executeTransactionRunnable(AsyncOperation operation) {
 
     @SuppressWarnings("unchecked")
     private void executeTransactionCallable(AsyncOperation operation) throws Exception {
-        SQLiteDatabase db = operation.getDatabase();
+        Database db = operation.getDatabase();
         db.beginTransaction();
         try {
             operation.result = ((Callable<Object>) operation.parameter).call();
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperationListener.java b/DaoCore/src/main/java/org/greenrobot/greendao/async/AsyncOperationListener.java
similarity index 79%
rename from DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperationListener.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/async/AsyncOperationListener.java
index 0321892f..c294148e 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperationListener.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/async/AsyncOperationListener.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.async;
+package org.greenrobot.greendao.async;
 
-/** Listener being called after completion of {@link de.greenrobot.dao.async.AsyncOperation}. */
+/** Listener being called after completion of {@link org.greenrobot.greendao.async.AsyncOperation}. */
 public interface AsyncOperationListener {
     /**
      * Note, that the operation may not have been successful, check
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncSession.java b/DaoCore/src/main/java/org/greenrobot/greendao/async/AsyncSession.java
similarity index 91%
rename from DaoCore/src/main/java/de/greenrobot/dao/async/AsyncSession.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/async/AsyncSession.java
index 45e7dfc2..9be6b40e 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncSession.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/async/AsyncSession.java
@@ -1,11 +1,27 @@
-package de.greenrobot.dao.async;
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.async;
 
-import android.database.sqlite.SQLiteDatabase;
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.AbstractDaoSession;
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.async.AsyncOperation.OperationType;
-import de.greenrobot.dao.query.Query;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.AbstractDaoSession;
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.async.AsyncOperation.OperationType;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.query.Query;
 
 import java.util.concurrent.Callable;
 
@@ -305,7 +321,7 @@ public AsyncOperation refresh(Object entity, int flags) {
     }
 
     private AsyncOperation enqueueDatabaseOperation(OperationType type, Object param, int flags) {
-        SQLiteDatabase database = daoSession.getDatabase();
+        Database database = daoSession.getDatabase();
         AsyncOperation operation = new AsyncOperation(type, null, database, param, flags | sessionFlags);
         executor.enqueue(operation);
         return operation;
@@ -322,12 +338,12 @@ private AsyncOperation enqueueEntityOperation(OperationType type, Object entity,
         return operation;
     }
 
-    /** {@link de.greenrobot.dao.async.AsyncOperation} flags set for all operations (will be ORed with call flags). */
+    /** {@link org.greenrobot.greendao.async.AsyncOperation} flags set for all operations (will be ORed with call flags). */
     public int getSessionFlags() {
         return sessionFlags;
     }
 
-    /** {@link de.greenrobot.dao.async.AsyncOperation} flags set for all operations (will be ORed with call flags). */
+    /** {@link org.greenrobot.greendao.async.AsyncOperation} flags set for all operations (will be ORed with call flags). */
     public void setSessionFlags(int sessionFlags) {
         this.sessionFlags = sessionFlags;
     }
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/database/Database.java b/DaoCore/src/main/java/org/greenrobot/greendao/database/Database.java
new file mode 100644
index 00000000..1634e72f
--- /dev/null
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/database/Database.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.greenrobot.greendao.database;
+
+import android.database.Cursor;
+import android.database.SQLException;
+
+/**
+ * Database abstraction used internally by greenDAO.
+ */
+public interface Database {
+    Cursor rawQuery(String sql, String[] selectionArgs);
+
+    void execSQL(String sql) throws SQLException;
+
+    void beginTransaction();
+
+    void endTransaction();
+
+    boolean inTransaction();
+
+    void setTransactionSuccessful();
+
+    void execSQL(String sql, Object[] bindArgs) throws SQLException;
+
+    DatabaseStatement compileStatement(String sql);
+
+    boolean isDbLockedByCurrentThread();
+
+    boolean isOpen();
+
+    void close();
+
+    Object getRawDatabase();
+}
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/database/DatabaseOpenHelper.java b/DaoCore/src/main/java/org/greenrobot/greendao/database/DatabaseOpenHelper.java
new file mode 100644
index 00000000..f95ad339
--- /dev/null
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/database/DatabaseOpenHelper.java
@@ -0,0 +1,198 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.database;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteDatabase.CursorFactory;
+import android.database.sqlite.SQLiteOpenHelper;
+
+/**
+ * SQLiteOpenHelper to allow working with greenDAO's {@link Database} abstraction to create and update database schemas.
+ */
+public abstract class DatabaseOpenHelper extends SQLiteOpenHelper {
+
+    private final Context context;
+    private final String name;
+    private final int version;
+
+    private EncryptedHelper encryptedHelper;
+    private boolean loadSQLCipherNativeLibs = true;
+
+    public DatabaseOpenHelper(Context context, String name, int version) {
+        this(context, name, null, version);
+    }
+
+    public DatabaseOpenHelper(Context context, String name, CursorFactory factory, int version) {
+        super(context, name, factory, version);
+        this.context = context;
+        this.name = name;
+        this.version = version;
+    }
+
+    /**
+     * Flag to load SQLCipher native libs (default: true).
+     */
+    public void setLoadSQLCipherNativeLibs(boolean loadSQLCipherNativeLibs) {
+        this.loadSQLCipherNativeLibs = loadSQLCipherNativeLibs;
+    }
+
+    /**
+     * Like {@link #getWritableDatabase()}, but returns a greenDAO abstraction of the database.
+     * The backing DB is an standard {@link SQLiteDatabase}.
+     */
+    public Database getWritableDb() {
+        return wrap(getWritableDatabase());
+    }
+
+    /**
+     * Like {@link #getReadableDatabase()}, but returns a greenDAO abstraction of the database.
+     * The backing DB is an standard {@link SQLiteDatabase}.
+     */
+    public Database getReadableDb() {
+        return wrap(getReadableDatabase());
+    }
+
+    protected Database wrap(SQLiteDatabase sqLiteDatabase) {
+        return new StandardDatabase(sqLiteDatabase);
+    }
+
+    /**
+     * Delegates to {@link #onCreate(Database)}, which uses greenDAO's database abstraction.
+     */
+    @Override
+    public void onCreate(SQLiteDatabase db) {
+        onCreate(wrap(db));
+    }
+
+    /**
+     * Override this if you do not want to depend on {@link SQLiteDatabase}.
+     */
+    public void onCreate(Database db) {
+        // Do nothing by default
+    }
+
+    /**
+     * Delegates to {@link #onUpgrade(Database, int, int)}, which uses greenDAO's database abstraction.
+     */
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        onUpgrade(wrap(db), oldVersion, newVersion);
+    }
+
+    /**
+     * Override this if you do not want to depend on {@link SQLiteDatabase}.
+     */
+    public void onUpgrade(Database db, int oldVersion, int newVersion) {
+        // Do nothing by default
+    }
+
+    /**
+     * Delegates to {@link #onOpen(Database)}, which uses greenDAO's database abstraction.
+     */
+    @Override
+    public void onOpen(SQLiteDatabase db) {
+        onOpen(wrap(db));
+    }
+
+    /**
+     * Override this if you do not want to depend on {@link SQLiteDatabase}.
+     */
+    public void onOpen(Database db) {
+        // Do nothing by default
+    }
+
+    private EncryptedHelper checkEncryptedHelper() {
+        if (encryptedHelper == null) {
+            encryptedHelper = new EncryptedHelper(context, name, version, loadSQLCipherNativeLibs);
+        }
+        return encryptedHelper;
+    }
+
+    /**
+     * Use this to initialize an encrypted SQLCipher database.
+     *
+     * @see #onCreate(Database)
+     * @see #onUpgrade(Database, int, int)
+     */
+    public Database getEncryptedWritableDb(String password) {
+        EncryptedHelper encryptedHelper = checkEncryptedHelper();
+        return encryptedHelper.wrap(encryptedHelper.getWritableDatabase(password));
+    }
+
+    /**
+     * Use this to initialize an encrypted SQLCipher database.
+     *
+     * @see #onCreate(Database)
+     * @see #onUpgrade(Database, int, int)
+     */
+    public Database getEncryptedWritableDb(char[] password) {
+        EncryptedHelper encryptedHelper = checkEncryptedHelper();
+        return encryptedHelper.wrap(encryptedHelper.getWritableDatabase(password));
+    }
+
+    /**
+     * Use this to initialize an encrypted SQLCipher database.
+     *
+     * @see #onCreate(Database)
+     * @see #onUpgrade(Database, int, int)
+     */
+    public Database getEncryptedReadableDb(String password) {
+        EncryptedHelper encryptedHelper = checkEncryptedHelper();
+        return encryptedHelper.wrap(encryptedHelper.getReadableDatabase(password));
+    }
+
+    /**
+     * Use this to initialize an encrypted SQLCipher database.
+     *
+     * @see #onCreate(Database)
+     * @see #onUpgrade(Database, int, int)
+     */
+    public Database getEncryptedReadableDb(char[] password) {
+        EncryptedHelper encryptedHelper = checkEncryptedHelper();
+        return encryptedHelper.wrap(encryptedHelper.getReadableDatabase(password));
+    }
+
+    private class EncryptedHelper extends net.sqlcipher.database.SQLiteOpenHelper {
+        public EncryptedHelper(Context context, String name, int version, boolean loadLibs) {
+            super(context, name, null, version);
+            if (loadLibs) {
+                net.sqlcipher.database.SQLiteDatabase.loadLibs(context);
+            }
+        }
+
+        @Override
+        public void onCreate(net.sqlcipher.database.SQLiteDatabase db) {
+            DatabaseOpenHelper.this.onCreate(wrap(db));
+        }
+
+        @Override
+        public void onUpgrade(net.sqlcipher.database.SQLiteDatabase db, int oldVersion, int newVersion) {
+            DatabaseOpenHelper.this.onUpgrade(wrap(db), oldVersion, newVersion);
+        }
+
+        @Override
+        public void onOpen(net.sqlcipher.database.SQLiteDatabase db) {
+            DatabaseOpenHelper.this.onOpen(wrap(db));
+        }
+
+        protected Database wrap(net.sqlcipher.database.SQLiteDatabase sqLiteDatabase) {
+            return new EncryptedDatabase(sqLiteDatabase);
+        }
+
+    }
+}
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/database/DatabaseStatement.java b/DaoCore/src/main/java/org/greenrobot/greendao/database/DatabaseStatement.java
new file mode 100644
index 00000000..b4b4078c
--- /dev/null
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/database/DatabaseStatement.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.database;
+
+public interface DatabaseStatement {
+    void execute();
+
+    long simpleQueryForLong();
+
+    void bindNull(int index);
+
+    long executeInsert();
+
+    void bindString(int index, String value);
+
+    void bindBlob(int index, byte[] value);
+
+    void bindLong(int index, long value);
+
+    void clearBindings();
+
+    void bindDouble(int index, double value);
+
+    void close();
+
+    Object getRawStatement();
+}
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/database/EncryptedDatabase.java b/DaoCore/src/main/java/org/greenrobot/greendao/database/EncryptedDatabase.java
new file mode 100644
index 00000000..c586ab4c
--- /dev/null
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/database/EncryptedDatabase.java
@@ -0,0 +1,93 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.database;
+
+import android.database.Cursor;
+import android.database.SQLException;
+import net.sqlcipher.database.SQLiteDatabase;
+
+public class EncryptedDatabase implements Database {
+    private final SQLiteDatabase delegate;
+
+    public EncryptedDatabase(SQLiteDatabase delegate) {
+        this.delegate = delegate;
+    }
+
+    @Override
+    public Cursor rawQuery(String sql, String[] selectionArgs) {
+        return delegate.rawQuery(sql, selectionArgs);
+    }
+
+    @Override
+    public void execSQL(String sql) throws SQLException {
+        delegate.execSQL(sql);
+    }
+
+    @Override
+    public void beginTransaction() {
+        delegate.beginTransaction();
+    }
+
+    @Override
+    public void endTransaction() {
+        delegate.endTransaction();
+    }
+
+    @Override
+    public boolean inTransaction() {
+        return delegate.inTransaction();
+    }
+
+    @Override
+    public void setTransactionSuccessful() {
+        delegate.setTransactionSuccessful();
+    }
+
+    @Override
+    public void execSQL(String sql, Object[] bindArgs) throws SQLException {
+        delegate.execSQL(sql, bindArgs);
+    }
+
+    @Override
+    public DatabaseStatement compileStatement(String sql) {
+        return new EncryptedDatabaseStatement(delegate.compileStatement(sql));
+    }
+
+    @Override
+    public boolean isDbLockedByCurrentThread() {
+        return delegate.isDbLockedByCurrentThread();
+    }
+
+    @Override
+    public boolean isOpen() {
+        return delegate.isOpen();
+    }
+
+    @Override
+    public void close() {
+        delegate.close();
+    }
+
+    @Override
+    public Object getRawDatabase() {
+        return delegate;
+    }
+
+    public SQLiteDatabase getSQLiteDatabase() {
+        return delegate;
+    }
+}
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/database/EncryptedDatabaseStatement.java b/DaoCore/src/main/java/org/greenrobot/greendao/database/EncryptedDatabaseStatement.java
new file mode 100644
index 00000000..d22806f6
--- /dev/null
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/database/EncryptedDatabaseStatement.java
@@ -0,0 +1,84 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.database;
+
+
+import net.sqlcipher.database.SQLiteStatement;
+
+public class EncryptedDatabaseStatement implements DatabaseStatement {
+    private final SQLiteStatement delegate;
+
+    public EncryptedDatabaseStatement(SQLiteStatement delegate) {
+        this.delegate = delegate;
+    }
+
+    @Override
+    public void execute() {
+        delegate.execute();
+    }
+
+    @Override
+    public long simpleQueryForLong() {
+        return delegate.simpleQueryForLong();
+    }
+
+    @Override
+    public void bindNull(int index) {
+        delegate.bindNull(index);
+    }
+
+    @Override
+    public long executeInsert() {
+        return delegate.executeInsert();
+    }
+
+    @Override
+    public void bindString(int index, String value) {
+        delegate.bindString(index, value);
+    }
+
+    @Override
+    public void bindBlob(int index, byte[] value) {
+        delegate.bindBlob(index, value);
+    }
+
+    @Override
+    public void bindLong(int index, long value) {
+        delegate.bindLong(index, value);
+    }
+
+    @Override
+    public void clearBindings() {
+        delegate.clearBindings();
+    }
+
+    @Override
+    public void bindDouble(int index, double value) {
+        delegate.bindDouble(index, value);
+    }
+
+    @Override
+    public void close() {
+        delegate.close();
+    }
+
+    @Override
+    public Object getRawStatement() {
+        return delegate;
+    }
+
+}
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/database/StandardDatabase.java b/DaoCore/src/main/java/org/greenrobot/greendao/database/StandardDatabase.java
new file mode 100644
index 00000000..6106f814
--- /dev/null
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/database/StandardDatabase.java
@@ -0,0 +1,93 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.database;
+
+import android.database.Cursor;
+import android.database.SQLException;
+import android.database.sqlite.SQLiteDatabase;
+
+public class StandardDatabase implements Database {
+    private final SQLiteDatabase delegate;
+
+    public StandardDatabase(SQLiteDatabase delegate) {
+        this.delegate = delegate;
+    }
+
+    @Override
+    public Cursor rawQuery(String sql, String[] selectionArgs) {
+        return delegate.rawQuery(sql, selectionArgs);
+    }
+
+    @Override
+    public void execSQL(String sql) throws SQLException {
+        delegate.execSQL(sql);
+    }
+
+    @Override
+    public void beginTransaction() {
+        delegate.beginTransaction();
+    }
+
+    @Override
+    public void endTransaction() {
+        delegate.endTransaction();
+    }
+
+    @Override
+    public boolean inTransaction() {
+        return delegate.inTransaction();
+    }
+
+    @Override
+    public void setTransactionSuccessful() {
+        delegate.setTransactionSuccessful();
+    }
+
+    @Override
+    public void execSQL(String sql, Object[] bindArgs) throws SQLException {
+        delegate.execSQL(sql, bindArgs);
+    }
+
+    @Override
+    public DatabaseStatement compileStatement(String sql) {
+        return new StandardDatabaseStatement(delegate.compileStatement(sql));
+    }
+
+    @Override
+    public boolean isDbLockedByCurrentThread() {
+        return delegate.isDbLockedByCurrentThread();
+    }
+
+    @Override
+    public boolean isOpen() {
+        return delegate.isOpen();
+    }
+
+    @Override
+    public void close() {
+        delegate.close();
+    }
+
+    @Override
+    public Object getRawDatabase() {
+        return delegate;
+    }
+
+    public SQLiteDatabase getSQLiteDatabase() {
+        return delegate;
+    }
+}
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/database/StandardDatabaseStatement.java b/DaoCore/src/main/java/org/greenrobot/greendao/database/StandardDatabaseStatement.java
new file mode 100644
index 00000000..d74dcfe9
--- /dev/null
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/database/StandardDatabaseStatement.java
@@ -0,0 +1,83 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.database;
+
+import android.database.sqlite.SQLiteStatement;
+
+public class StandardDatabaseStatement implements DatabaseStatement {
+    private final SQLiteStatement delegate;
+
+    public StandardDatabaseStatement(SQLiteStatement delegate) {
+        this.delegate = delegate;
+    }
+
+    @Override
+    public void execute() {
+        delegate.execute();
+    }
+
+    @Override
+    public long simpleQueryForLong() {
+        return delegate.simpleQueryForLong();
+    }
+
+    @Override
+    public void bindNull(int index) {
+        delegate.bindNull(index);
+    }
+
+    @Override
+    public long executeInsert() {
+        return delegate.executeInsert();
+    }
+
+    @Override
+    public void bindString(int index, String value) {
+        delegate.bindString(index, value);
+    }
+
+    @Override
+    public void bindBlob(int index, byte[] value) {
+        delegate.bindBlob(index, value);
+    }
+
+    @Override
+    public void bindLong(int index, long value) {
+        delegate.bindLong(index, value);
+    }
+
+    @Override
+    public void clearBindings() {
+        delegate.clearBindings();
+    }
+
+    @Override
+    public void bindDouble(int index, double value) {
+        delegate.bindDouble(index, value);
+    }
+
+    @Override
+    public void close() {
+        delegate.close();
+    }
+
+    @Override
+    public Object getRawStatement() {
+        return delegate;
+    }
+
+}
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/identityscope/IdentityScope.java b/DaoCore/src/main/java/org/greenrobot/greendao/identityscope/IdentityScope.java
similarity index 89%
rename from DaoCore/src/main/java/de/greenrobot/dao/identityscope/IdentityScope.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/identityscope/IdentityScope.java
index 173a522f..724a5bea 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/identityscope/IdentityScope.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/identityscope/IdentityScope.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.identityscope;
+package org.greenrobot.greendao.identityscope;
 
 /**
  * Common interface for a identity scopes needed internally by greenDAO. Identity scopes let greenDAO re-use Java
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/identityscope/IdentityScopeLong.java b/DaoCore/src/main/java/org/greenrobot/greendao/identityscope/IdentityScopeLong.java
similarity index 95%
rename from DaoCore/src/main/java/de/greenrobot/dao/identityscope/IdentityScopeLong.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/identityscope/IdentityScopeLong.java
index 346c95b3..77ce470a 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/identityscope/IdentityScopeLong.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/identityscope/IdentityScopeLong.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.identityscope;
+package org.greenrobot.greendao.identityscope;
 
 import java.lang.ref.Reference;
 import java.lang.ref.WeakReference;
 import java.util.concurrent.locks.ReentrantLock;
 
-import de.greenrobot.dao.internal.LongHashMap;
+import org.greenrobot.greendao.internal.LongHashMap;
 
 /**
  * The context for entity identities. Provides the scope in which entities will be tracked and managed.
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/identityscope/IdentityScopeObject.java b/DaoCore/src/main/java/org/greenrobot/greendao/identityscope/IdentityScopeObject.java
similarity index 96%
rename from DaoCore/src/main/java/de/greenrobot/dao/identityscope/IdentityScopeObject.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/identityscope/IdentityScopeObject.java
index 92ff52d2..a4ffe6b7 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/identityscope/IdentityScopeObject.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/identityscope/IdentityScopeObject.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.identityscope;
+package org.greenrobot.greendao.identityscope;
 
 import java.lang.ref.Reference;
 import java.lang.ref.WeakReference;
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/identityscope/IdentityScopeType.java b/DaoCore/src/main/java/org/greenrobot/greendao/identityscope/IdentityScopeType.java
similarity index 82%
rename from DaoCore/src/main/java/de/greenrobot/dao/identityscope/IdentityScopeType.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/identityscope/IdentityScopeType.java
index 985124d4..62694e9e 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/identityscope/IdentityScopeType.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/identityscope/IdentityScopeType.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.identityscope;
+package org.greenrobot.greendao.identityscope;
 
 public enum IdentityScopeType {
     Session, None
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/internal/DaoConfig.java b/DaoCore/src/main/java/org/greenrobot/greendao/internal/DaoConfig.java
similarity index 86%
rename from DaoCore/src/main/java/de/greenrobot/dao/internal/DaoConfig.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/internal/DaoConfig.java
index 96473029..7b7b6867 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/internal/DaoConfig.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/internal/DaoConfig.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,21 +13,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.internal;
+package org.greenrobot.greendao.internal;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.List;
 
-import android.database.sqlite.SQLiteDatabase;
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.identityscope.IdentityScope;
-import de.greenrobot.dao.identityscope.IdentityScopeLong;
-import de.greenrobot.dao.identityscope.IdentityScopeObject;
-import de.greenrobot.dao.identityscope.IdentityScopeType;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.identityscope.IdentityScope;
+import org.greenrobot.greendao.identityscope.IdentityScopeLong;
+import org.greenrobot.greendao.identityscope.IdentityScopeObject;
+import org.greenrobot.greendao.identityscope.IdentityScopeType;
 
 /**
  * Internal class used by greenDAO. DaoConfig stores essential data for DAOs, and is hold by AbstractDaoMaster. This
@@ -35,7 +35,7 @@
  */
 public final class DaoConfig implements Cloneable {
 
-    public final SQLiteDatabase db;
+    public final Database db;
     public final String tablename;
     public final Property[] properties;
 
@@ -50,7 +50,7 @@
 
     private IdentityScope<?, ?> identityScope;
 
-    public DaoConfig(SQLiteDatabase db, Class<? extends AbstractDao<?, ?>> daoClass) {
+    public DaoConfig(Database db, Class<? extends AbstractDao<?, ?>> daoClass) {
         this.db = db;
         try {
             this.tablename = (String) daoClass.getField("TABLENAME").get(null);
@@ -145,6 +145,16 @@ public DaoConfig clone() {
         return identityScope;
     }
 
+    /**
+     * Clears the identify scope if it exists.
+     */
+    public void clearIdentityScope() {
+        IdentityScope<?, ?> identityScope = this.identityScope;
+        if(identityScope != null) {
+            identityScope.clear();
+        }
+    }
+
     public void setIdentityScope(IdentityScope<?, ?> identityScope) {
         this.identityScope = identityScope;
     }
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/internal/FastCursor.java b/DaoCore/src/main/java/org/greenrobot/greendao/internal/FastCursor.java
similarity index 97%
rename from DaoCore/src/main/java/de/greenrobot/dao/internal/FastCursor.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/internal/FastCursor.java
index d43e97f6..bab19120 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/internal/FastCursor.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/internal/FastCursor.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.internal;
+package org.greenrobot.greendao.internal;
 
 import android.content.ContentResolver;
 import android.database.CharArrayBuffer;
@@ -182,6 +182,7 @@ public double getDouble(int columnIndex) {
         return window.getDouble(position, columnIndex);
     }
 
+    @SuppressWarnings("deprecation")
     @Override
     public boolean isNull(int columnIndex) {
         return window.isNull(position, columnIndex);
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/internal/LongHashMap.java b/DaoCore/src/main/java/org/greenrobot/greendao/internal/LongHashMap.java
similarity index 96%
rename from DaoCore/src/main/java/de/greenrobot/dao/internal/LongHashMap.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/internal/LongHashMap.java
index a5394f48..c816d540 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/internal/LongHashMap.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/internal/LongHashMap.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.internal;
+package org.greenrobot.greendao.internal;
 
 import java.util.Arrays;
 
-import de.greenrobot.dao.DaoLog;
+import org.greenrobot.greendao.DaoLog;
 
 /**
  * An minimalistic hash map optimized for long keys.
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/internal/SqlUtils.java b/DaoCore/src/main/java/org/greenrobot/greendao/internal/SqlUtils.java
similarity index 94%
rename from DaoCore/src/main/java/de/greenrobot/dao/internal/SqlUtils.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/internal/SqlUtils.java
index 3e328bc9..1ce0add1 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/internal/SqlUtils.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/internal/SqlUtils.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.internal;
+package org.greenrobot.greendao.internal;
 
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.Property;
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.Property;
 
 /** Helper class to create SQL statements as used by greenDAO internally. */
 public class SqlUtils {
@@ -147,6 +147,10 @@ public static String createSqlUpdate(String tablename, String[] updateColumns, S
         return builder.toString();
     }
 
+    public static String createSqlCount(String tablename) {
+        return "SELECT COUNT(*) FROM \"" + tablename +'"';
+    }
+    
     public static String escapeBlobArgument(byte[] bytes) {
         return "X'" + toHex(bytes) + '\'';
     }
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java b/DaoCore/src/main/java/org/greenrobot/greendao/internal/TableStatements.java
similarity index 51%
rename from DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/internal/TableStatements.java
index 864b6e04..18aef157 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/internal/TableStatements.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,67 +13,111 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.internal;
 
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+package org.greenrobot.greendao.internal;
+
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
 /** Helper class to create SQL statements for specific tables (used by greenDAO internally). */
+// Note: avoid locking while compiling any statement (accessing the db) to avoid deadlocks on lock-savvy DBs like
+// SQLCipher.
 public class TableStatements {
-    private final SQLiteDatabase db;
+    private final Database db;
     private final String tablename;
     private final String[] allColumns;
     private final String[] pkColumns;
 
-    private SQLiteStatement insertStatement;
-    private SQLiteStatement insertOrReplaceStatement;
-    private SQLiteStatement updateStatement;
-    private SQLiteStatement deleteStatement;
+    private DatabaseStatement insertStatement;
+    private DatabaseStatement insertOrReplaceStatement;
+    private DatabaseStatement updateStatement;
+    private DatabaseStatement deleteStatement;
+    private DatabaseStatement countStatement;
 
     private volatile String selectAll;
     private volatile String selectByKey;
     private volatile String selectByRowId;
     private volatile String selectKeys;
 
-    public TableStatements(SQLiteDatabase db, String tablename, String[] allColumns, String[] pkColumns) {
+    public TableStatements(Database db, String tablename, String[] allColumns, String[] pkColumns) {
         this.db = db;
         this.tablename = tablename;
         this.allColumns = allColumns;
         this.pkColumns = pkColumns;
     }
 
-    public SQLiteStatement getInsertStatement() {
+    public DatabaseStatement getInsertStatement() {
         if (insertStatement == null) {
             String sql = SqlUtils.createSqlInsert("INSERT INTO ", tablename, allColumns);
-            insertStatement = db.compileStatement(sql);
+            DatabaseStatement newInsertStatement = db.compileStatement(sql);
+            synchronized (this) {
+                if (insertStatement == null) {
+                    insertStatement = newInsertStatement;
+                }
+            }
+            if (insertStatement != newInsertStatement) {
+                newInsertStatement.close();
+            }
         }
         return insertStatement;
     }
 
-    public SQLiteStatement getInsertOrReplaceStatement() {
+    public DatabaseStatement getInsertOrReplaceStatement() {
         if (insertOrReplaceStatement == null) {
             String sql = SqlUtils.createSqlInsert("INSERT OR REPLACE INTO ", tablename, allColumns);
-            insertOrReplaceStatement = db.compileStatement(sql);
+            DatabaseStatement newInsertOrReplaceStatement = db.compileStatement(sql);
+            synchronized (this) {
+                if (insertOrReplaceStatement == null) {
+                    insertOrReplaceStatement = newInsertOrReplaceStatement;
+                }
+            }
+            if (insertOrReplaceStatement != newInsertOrReplaceStatement) {
+                newInsertOrReplaceStatement.close();
+            }
         }
         return insertOrReplaceStatement;
     }
 
-    public SQLiteStatement getDeleteStatement() {
+    public DatabaseStatement getDeleteStatement() {
         if (deleteStatement == null) {
             String sql = SqlUtils.createSqlDelete(tablename, pkColumns);
-            deleteStatement = db.compileStatement(sql);
+            DatabaseStatement newDeleteStatement = db.compileStatement(sql);
+            synchronized (this) {
+                if (deleteStatement == null) {
+                    deleteStatement = newDeleteStatement;
+                }
+            }
+            if (deleteStatement != newDeleteStatement) {
+                newDeleteStatement.close();
+            }
         }
         return deleteStatement;
     }
 
-    public SQLiteStatement getUpdateStatement() {
+    public DatabaseStatement getUpdateStatement() {
         if (updateStatement == null) {
             String sql = SqlUtils.createSqlUpdate(tablename, allColumns, pkColumns);
-            updateStatement = db.compileStatement(sql);
+            DatabaseStatement newUpdateStatement = db.compileStatement(sql);
+            synchronized (this) {
+                if (updateStatement == null) {
+                    updateStatement = newUpdateStatement;
+                }
+            }
+            if (updateStatement != newUpdateStatement) {
+                newUpdateStatement.close();
+            }
         }
         return updateStatement;
     }
 
+    public DatabaseStatement getCountStatement() {
+        if (countStatement == null) {
+            String sql = SqlUtils.createSqlCount(tablename);
+            countStatement = db.compileStatement(sql);
+        }
+        return countStatement;
+    }
+
     /** ends with an space to simplify appending to this string. */
     public String getSelectAll() {
         if (selectAll == null) {
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQuery.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/AbstractQuery.java
similarity index 73%
rename from DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQuery.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/query/AbstractQuery.java
index 2bd21e8a..e3955111 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQuery.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/AbstractQuery.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2013 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,11 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.query;
+package org.greenrobot.greendao.query;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.InternalQueryDaoAccess;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.InternalQueryDaoAccess;
+
+import java.util.Date;
 
 /**
  * A repeatable query returning entities.
@@ -66,13 +68,30 @@ protected AbstractQuery(AbstractDao<T, ?> dao, String sql, String[] parameters)
     /**
      * Sets the parameter (0 based) using the position in which it was added during building the query.
      */
-    public void setParameter(int index, Object parameter) {
+    public AbstractQuery<T> setParameter(int index, Object parameter) {
         checkThread();
         if (parameter != null) {
             parameters[index] = parameter.toString();
         } else {
             parameters[index] = null;
         }
+        return this;
+    }
+
+    /**
+     * @see #setParameter(int, Object)
+     */
+    public AbstractQuery<T> setParameter(int index, Date parameter) {
+        Long converted = parameter != null ? parameter.getTime() : null;
+        return setParameter(index, converted);
+    }
+
+    /**
+     * @see #setParameter(int, Object)
+     */
+    public AbstractQuery<T> setParameter(int index, Boolean parameter) {
+        Integer converted = parameter != null ? (parameter ? 1 : 0) : null;
+        return setParameter(index, converted);
     }
 
     protected void checkThread() {
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/query/AbstractQueryData.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/AbstractQueryData.java
new file mode 100644
index 00000000..880370c5
--- /dev/null
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/AbstractQueryData.java
@@ -0,0 +1,89 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.query;
+
+import org.greenrobot.greendao.AbstractDao;
+
+import java.lang.ref.WeakReference;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+
+abstract class AbstractQueryData<T, Q extends AbstractQuery<T>> {
+    final String sql;
+    final AbstractDao<T, ?> dao;
+    final String[] initialValues;
+    final Map<Long, WeakReference<Q>> queriesForThreads;
+
+    AbstractQueryData(AbstractDao<T, ?> dao, String sql, String[] initialValues) {
+        this.dao = dao;
+        this.sql = sql;
+        this.initialValues = initialValues;
+        queriesForThreads = new HashMap<>();
+    }
+
+    /**
+     * Just an optimized version, which performs faster if the current thread is already the query's owner thread.
+     * Note: all parameters are reset to their initial values specified in {@link QueryBuilder}.
+     */
+    Q forCurrentThread(Q query) {
+        if (Thread.currentThread() == query.ownerThread) {
+            System.arraycopy(initialValues, 0, query.parameters, 0, initialValues.length);
+            return query;
+        } else {
+            return forCurrentThread();
+        }
+    }
+
+    /**
+     * Note: all parameters are reset to their initial values specified in {@link QueryBuilder}.
+     */
+    Q forCurrentThread() {
+        // Process.myTid() seems to have issues on some devices (see Github #376) and Robolectric (#171):
+        // We use currentThread().getId() instead (unfortunately return a long, can not use SparseArray).
+        // PS.: thread ID may be reused, which should be fine because old thread will be gone anyway.
+        long threadId = Thread.currentThread().getId();
+        synchronized (queriesForThreads) {
+            WeakReference<Q> queryRef = queriesForThreads.get(threadId);
+            Q query = queryRef != null ? queryRef.get() : null;
+            if (query == null) {
+                gc();
+                query = createQuery();
+                queriesForThreads.put(threadId, new WeakReference<Q>(query));
+            } else {
+                System.arraycopy(initialValues, 0, query.parameters, 0, initialValues.length);
+            }
+            return query;
+        }
+    }
+
+    abstract protected Q createQuery();
+
+    void gc() {
+        synchronized (queriesForThreads) {
+            Iterator<Entry<Long, WeakReference<Q>>> iterator = queriesForThreads.entrySet().iterator();
+            while (iterator.hasNext()) {
+                Entry<Long, WeakReference<Q>> entry = iterator.next();
+                if (entry.getValue().get() == null) {
+                    iterator.remove();
+                }
+            }
+        }
+    }
+
+}
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQueryWithLimit.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/AbstractQueryWithLimit.java
similarity index 77%
rename from DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQueryWithLimit.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/query/AbstractQueryWithLimit.java
index 08b29a29..9ef60ad0 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQueryWithLimit.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/AbstractQueryWithLimit.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,11 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.query;
+package org.greenrobot.greendao.query;
 
-import de.greenrobot.dao.AbstractDao;
-
-import java.util.Date;
+import org.greenrobot.greendao.AbstractDao;
 
 /**
  * Base class for queries returning data (entities or cursor).
@@ -41,26 +39,16 @@ protected AbstractQueryWithLimit(AbstractDao<T, ?> dao, String sql, String[] ini
      * Sets the parameter (0 based) using the position in which it was added during building the query. Note: all
      * standard WHERE parameters come first. After that come the WHERE parameters of joins (if any).
      */
-    public void setParameter(int index, Object parameter) {
+    public AbstractQueryWithLimit<T> setParameter(int index, Object parameter) {
         if (index >= 0 && (index == limitPosition || index == offsetPosition)) {
             throw new IllegalArgumentException("Illegal parameter index: " + index);
         }
-        super.setParameter(index, parameter);
-    }
-
-    public void setParameter(int index, Date parameter) {
-        Long converted = parameter != null ? parameter.getTime() : null;
-        setParameter(index, converted);
-    }
-
-    public void setParameter(int index, Boolean parameter) {
-        Integer converted = parameter != null ? (parameter ? 1 : 0) : null;
-        setParameter(index, converted);
+        return (AbstractQueryWithLimit<T>) super.setParameter(index, parameter);
     }
 
     /**
      * Sets the limit of the maximum number of results returned by this Query. {@link
-     * de.greenrobot.dao.query.QueryBuilder#limit(int)} must
+     * org.greenrobot.greendao.query.QueryBuilder#limit(int)} must
      * have been called on the QueryBuilder that created this Query object.
      */
     public void setLimit(int limit) {
@@ -72,7 +60,7 @@ public void setLimit(int limit) {
     }
 
     /**
-     * Sets the offset for results returned by this Query. {@link de.greenrobot.dao.query.QueryBuilder#offset(int)} must
+     * Sets the offset for results returned by this Query. {@link org.greenrobot.greendao.query.QueryBuilder#offset(int)} must
      * have been called on
      * the QueryBuilder that created this Query object.
      */
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/CloseableListIterator.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/CloseableListIterator.java
similarity index 88%
rename from DaoCore/src/main/java/de/greenrobot/dao/query/CloseableListIterator.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/query/CloseableListIterator.java
index d135004a..b74ab494 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/CloseableListIterator.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/CloseableListIterator.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.query;
+package org.greenrobot.greendao.query;
 
 import java.io.Closeable;
 import java.util.ListIterator;
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/CountQuery.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/CountQuery.java
similarity index 57%
rename from DaoCore/src/main/java/de/greenrobot/dao/query/CountQuery.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/query/CountQuery.java
index effc537b..994284dc 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/CountQuery.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/CountQuery.java
@@ -1,8 +1,26 @@
-package de.greenrobot.dao.query;
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.query;
 
 import android.database.Cursor;
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoException;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.DaoException;
+
+import java.util.Date;
 
 public class CountQuery<T> extends AbstractQuery<T> {
 
@@ -52,4 +70,20 @@ public long count() {
         }
     }
 
+    // copy setParameter methods to allow easy chaining
+    @Override
+    public CountQuery<T> setParameter(int index, Object parameter) {
+        return (CountQuery<T>) super.setParameter(index, parameter);
+    }
+
+    @Override
+    public CountQuery<T> setParameter(int index, Date parameter) {
+        return (CountQuery<T>) super.setParameter(index, parameter);
+    }
+
+    @Override
+    public CountQuery<T> setParameter(int index, Boolean parameter) {
+        return (CountQuery<T>) super.setParameter(index, parameter);
+    }
+
 }
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/CursorQuery.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/CursorQuery.java
similarity index 78%
rename from DaoCore/src/main/java/de/greenrobot/dao/query/CursorQuery.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/query/CursorQuery.java
index 9ca90917..1a08c1b8 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/CursorQuery.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/CursorQuery.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,14 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.query;
+package org.greenrobot.greendao.query;
 
 import android.database.Cursor;
-import de.greenrobot.dao.AbstractDao;
+import org.greenrobot.greendao.AbstractDao;
+
+import java.util.Date;
 
 /**
  * A repeatable query returning a raw android.database.Cursor. Note, that using cursors is usually a hassle and
- * greenDAO provides a higher level abstraction using entities (see {@link de.greenrobot.dao.query.Query}). This class
+ * greenDAO provides a higher level abstraction using entities (see {@link org.greenrobot.greendao.query.Query}). This class
  * can nevertheless be useful to work with legacy code that is based on Cursors or CursorLoaders.
  *
  * @param <T> The entity class the query will return results for.
@@ -74,4 +76,20 @@ public Cursor query() {
         return dao.getDatabase().rawQuery(sql, parameters);
     }
 
+    // copy setParameter methods to allow easy chaining
+    @Override
+    public CursorQuery<T> setParameter(int index, Object parameter) {
+        return (CursorQuery<T>) super.setParameter(index, parameter);
+    }
+
+    @Override
+    public CursorQuery<T> setParameter(int index, Date parameter) {
+        return (CursorQuery<T>) super.setParameter(index, parameter);
+    }
+
+    @Override
+    public CursorQuery<T> setParameter(int index, Boolean parameter) {
+        return (CursorQuery<T>) super.setParameter(index, parameter);
+    }
+
 }
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/DeleteQuery.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/DeleteQuery.java
similarity index 73%
rename from DaoCore/src/main/java/de/greenrobot/dao/query/DeleteQuery.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/query/DeleteQuery.java
index ae4960e8..1bcc2e4c 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/DeleteQuery.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/DeleteQuery.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2013 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,19 +13,19 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.query;
+package org.greenrobot.greendao.query;
 
-import android.database.sqlite.SQLiteDatabase;
-import de.greenrobot.dao.AbstractDao;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.database.Database;
+
+import java.util.Date;
 
 /**
  * A repeatable query for deleting entities.<br/>
  * New API note: this is more likely to change.
- * 
+ *
+ * @param <T> The entity class the query will delete from.
  * @author Markus
- * 
- * @param <T>
- *            The entity class the query will delete from.
  */
 public class DeleteQuery<T> extends AbstractQuery<T> {
     private final static class QueryData<T2> extends AbstractQueryData<T2, DeleteQuery<T2>> {
@@ -58,12 +58,13 @@ private DeleteQuery(QueryData<T> queryData, AbstractDao<T, ?> dao, String sql, S
 
     /**
      * Deletes all matching entities without detaching them from the identity scope (aka session/cache). Note that this
-     * method may lead to stale entity objects in the session cache. Stale entities may be returned when loaded by their
+     * method may lead to stale entity objects in the session cache. Stale entities may be returned when loaded by
+     * their
      * primary key, but not using queries.
      */
     public void executeDeleteWithoutDetachingEntities() {
         checkThread();
-        SQLiteDatabase db = dao.getDatabase();
+        Database db = dao.getDatabase();
         if (db.isDbLockedByCurrentThread()) {
             dao.getDatabase().execSQL(sql, parameters);
         } else {
@@ -79,4 +80,20 @@ public void executeDeleteWithoutDetachingEntities() {
         }
     }
 
+    // copy setParameter methods to allow easy chaining
+    @Override
+    public DeleteQuery<T> setParameter(int index, Object parameter) {
+        return (DeleteQuery<T>) super.setParameter(index, parameter);
+    }
+
+    @Override
+    public DeleteQuery<T> setParameter(int index, Date parameter) {
+        return (DeleteQuery<T>) super.setParameter(index, parameter);
+    }
+
+    @Override
+    public DeleteQuery<T> setParameter(int index, Boolean parameter) {
+        return (DeleteQuery<T>) super.setParameter(index, parameter);
+    }
+
 }
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/Join.java
similarity index 91%
rename from DaoCore/src/main/java/de/greenrobot/dao/query/Join.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/query/Join.java
index 04dba3fe..70127981 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/Join.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.query;
+package org.greenrobot.greendao.query;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
 
 /**
  * A Join lets you relate to other entity types for queries, and allows using WHERE statements on the joined entity
@@ -82,7 +82,7 @@ public WhereCondition and(WhereCondition cond1, WhereCondition cond2, WhereCondi
 
     /**
      * Usually you don't need this value; just in case you are mixing custom
-     * {@link de.greenrobot.dao.query.WhereCondition.StringCondition} into the query, this value allows to reference
+     * {@link org.greenrobot.greendao.query.WhereCondition.StringCondition} into the query, this value allows to reference
      * the joined (target) table.
      */
     public String getTablePrefix() {
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/LazyList.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/LazyList.java
similarity index 97%
rename from DaoCore/src/main/java/de/greenrobot/dao/query/LazyList.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/query/LazyList.java
index cb2a513c..032ad7af 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/LazyList.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/LazyList.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.query;
+package org.greenrobot.greendao.query;
 
 import java.io.Closeable;
 import java.util.ArrayList;
@@ -25,8 +25,8 @@
 import java.util.concurrent.locks.ReentrantLock;
 
 import android.database.Cursor;
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.InternalQueryDaoAccess;
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.InternalQueryDaoAccess;
 
 /**
  * A thread-safe, unmodifiable list that reads entities once they are accessed from an underlying database cursor. Make
@@ -164,7 +164,7 @@ protected void checkCached() {
     }
 
     /** Like get but does not load the entity if it was not loaded before. */
-    public E peak(int location) {
+    public E peek(int location) {
         if (entities != null) {
             return entities.get(location);
         } else {
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/Query.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/Query.java
similarity index 72%
rename from DaoCore/src/main/java/de/greenrobot/dao/query/Query.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/query/Query.java
index f2ee4d10..6176f3bc 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/Query.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/Query.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,14 +13,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.query;
+package org.greenrobot.greendao.query;
 
 import android.database.Cursor;
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoException;
 
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.annotation.apihint.Internal;
+import org.greenrobot.greendao.rx.RxQuery;
+import org.greenrobot.greendao.rx.RxTransaction;
+
+import java.util.Date;
 import java.util.List;
 
+import rx.schedulers.Schedulers;
+
 /**
  * A repeatable query returning entities.
  *
@@ -59,12 +66,18 @@
 
     private final QueryData<T> queryData;
 
+    private volatile RxQuery rxTxPlain;
+    private volatile RxQuery rxTxIo;
+
     private Query(QueryData<T> queryData, AbstractDao<T, ?> dao, String sql, String[] initialValues, int limitPosition,
                   int offsetPosition) {
         super(dao, sql, initialValues, limitPosition, offsetPosition);
         this.queryData = queryData;
     }
 
+    /**
+     * Note: all parameters are reset to their initial values specified in {@link QueryBuilder}.
+     */
     public Query<T> forCurrentThread() {
         return queryData.forCurrentThread(this);
     }
@@ -131,4 +144,48 @@ public T uniqueOrThrow() {
         return entity;
     }
 
+    @Override
+    public Query<T> setParameter(int index, Object parameter) {
+        return (Query<T>) super.setParameter(index, parameter);
+    }
+
+    @Override
+    public Query<T> setParameter(int index, Date parameter) {
+        return (Query<T>) super.setParameter(index, parameter);
+    }
+
+    @Override
+    public Query<T> setParameter(int index, Boolean parameter) {
+        return (Query<T>) super.setParameter(index, parameter);
+    }
+
+    /**
+     * DO NOT USE.
+     * The returned {@link RxTransaction} allows getting query results using Rx Observables without any Scheduler set
+     * for subscribeOn.
+     *
+     * @see #__InternalRx()
+     */
+    @Internal
+    public RxQuery __internalRxPlain() {
+        if (rxTxPlain == null) {
+            rxTxPlain = new RxQuery(this);
+        }
+        return rxTxPlain;
+    }
+
+    /**
+     * DO NOT USE.
+     * The returned {@link RxTransaction} allows getting query results using Rx Observables using RX's IO scheduler for
+     * subscribeOn.
+     *
+     * @see #__internalRxPlain()
+     */
+    @Internal
+    public RxQuery __InternalRx() {
+        if (rxTxIo == null) {
+            rxTxIo = new RxQuery(this, Schedulers.io());
+        }
+        return rxTxIo;
+    }
 }
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/QueryBuilder.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java
similarity index 87%
rename from DaoCore/src/main/java/de/greenrobot/dao/query/QueryBuilder.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java
index 2e621838..a2781003 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/QueryBuilder.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,14 +13,19 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.query;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.AbstractDaoSession;
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.DaoLog;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.SqlUtils;
+package org.greenrobot.greendao.query;
+
+import android.database.sqlite.SQLiteDatabase;
+
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.AbstractDaoSession;
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.annotation.apihint.Experimental;
+import org.greenrobot.greendao.internal.SqlUtils;
+import org.greenrobot.greendao.rx.RxQuery;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -60,6 +65,9 @@
     private Integer offset;
     private boolean distinct;
 
+    /** stored with a leading space */
+    private String stringOrderCollation;
+
     /** For internal use by greenDAO only. */
     public static <T2> QueryBuilder<T2> internalCreate(AbstractDao<T2, ?> dao) {
         return new QueryBuilder<T2>(dao);
@@ -75,6 +83,7 @@ protected QueryBuilder(AbstractDao<T, ?> dao, String tablePrefix) {
         values = new ArrayList<Object>();
         joins = new ArrayList<Join<T, ?>>();
         whereCollector = new WhereCollector<T>(dao, tablePrefix);
+        stringOrderCollation = " COLLATE NOCASE";
     }
 
     private void checkOrderBuilder() {
@@ -91,6 +100,33 @@ private void checkOrderBuilder() {
         return this;
     }
 
+    /**
+     * If using Android's embedded SQLite, this enables localized ordering of strings
+     * (see {@link #orderAsc(Property...)} and {@link #orderDesc(Property...)}). This uses "COLLATE LOCALIZED", which
+     * is unavailable in SQLCipher (in that case, the ordering is unchanged).
+     *
+     * @see #stringOrderCollation
+     */
+    public QueryBuilder<T> preferLocalizedStringOrder() {
+        // SQLCipher 3.5.0+ does not understand "COLLATE LOCALIZED"
+        if (dao.getDatabase().getRawDatabase() instanceof SQLiteDatabase) {
+            stringOrderCollation = " COLLATE LOCALIZED";
+        }
+        return this;
+    }
+
+    /**
+     * Customizes the ordering of strings used by {@link #orderAsc(Property...)} and {@link #orderDesc(Property...)}.
+     * Default is "COLLATE NOCASE".
+     *
+     * @see #preferLocalizedStringOrder
+     */
+    public QueryBuilder<T> stringOrderCollation(String stringOrderCollation) {
+        this.stringOrderCollation = stringOrderCollation == null || stringOrderCollation.startsWith(" ") ?
+                stringOrderCollation : " " + stringOrderCollation;
+        return this;
+    }
+
     /**
      * Adds the given conditions to the where clause using an logical AND. To create new conditions, use the properties
      * given in the generated dao classes.
@@ -191,8 +227,8 @@ private void orderAscOrDesc(String ascOrDescWithLeadingSpace, Property... proper
         for (Property property : properties) {
             checkOrderBuilder();
             append(orderBuilder, property);
-            if (String.class.equals(property.type)) {
-                orderBuilder.append(" COLLATE LOCALIZED");
+            if (String.class.equals(property.type) && stringOrderCollation != null) {
+                orderBuilder.append(stringOrderCollation);
             }
             orderBuilder.append(ascOrDescWithLeadingSpace);
         }
@@ -230,7 +266,7 @@ protected StringBuilder append(StringBuilder builder, Property property) {
     }
 
     /**
-     * Sets the offset for query results in combination with {@link #limit(int)}. The first {@code limit} results are
+     * Sets the offset for query results in combination with {@link #limit(int)}. The first {@code offset} results are
      * skipped and the total number of results will be limited by {@code limit}. You cannot use offset without limit.
      */
     public QueryBuilder<T> offset(int offset) {
@@ -356,7 +392,8 @@ private void checkLog(String sql) {
     private void appendJoinsAndWheres(StringBuilder builder, String tablePrefixOrNull) {
         values.clear();
         for (Join<T, ?> join : joins) {
-            builder.append(" JOIN ").append(join.daoDestination.getTablename()).append(' ');
+            builder.append(" JOIN ");
+            builder.append('"').append(join.daoDestination.getTablename()).append('"').append(' ');
             builder.append(join.tablePrefix).append(" ON ");
             SqlUtils.appendProperty(builder, join.sourceTablePrefix, join.joinPropertySource).append('=');
             SqlUtils.appendProperty(builder, join.tablePrefix, join.joinPropertyDestination);
@@ -388,6 +425,22 @@ private void appendJoinsAndWheres(StringBuilder builder, String tablePrefixOrNul
         return build().list();
     }
 
+    /**
+     * Shorthand for {@link QueryBuilder#build() build()}.{@link Query#__InternalRx()}.
+     */
+    @Experimental
+    public RxQuery<T> rx() {
+        return build().__InternalRx();
+    }
+
+    /**
+     * Shorthand for {@link QueryBuilder#build() build()}.{@link Query#__internalRxPlain()}.
+     */
+    @Experimental
+    public RxQuery<T> rxPlain() {
+        return build().__internalRxPlain();
+    }
+
     /**
      * Shorthand for {@link QueryBuilder#build() build()}.{@link Query#listLazy() listLazy()}; see
      * {@link Query#listLazy()} for details. To execute a query more than once, you should build the query and keep the
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/WhereCollector.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/WhereCollector.java
similarity index 93%
rename from DaoCore/src/main/java/de/greenrobot/dao/query/WhereCollector.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/query/WhereCollector.java
index 21022d5e..3c8d5973 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/WhereCollector.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/WhereCollector.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.query;
+package org.greenrobot.greendao.query;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.Property;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.Property;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/WhereCondition.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/WhereCondition.java
similarity index 92%
rename from DaoCore/src/main/java/de/greenrobot/dao/query/WhereCondition.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/query/WhereCondition.java
index 49f17a73..058fa183 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/WhereCondition.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/WhereCondition.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,14 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.query;
+package org.greenrobot.greendao.query;
 
 import java.util.Date;
 import java.util.List;
 
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.SqlUtils;
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.SqlUtils;
 
 /**
  * Internal interface to model WHERE conditions used in queries. Use the {@link Property} objects in the DAO classes to
@@ -32,7 +32,7 @@
 
     void appendValuesTo(List<Object> values);
 
-    public abstract static class AbstractCondition implements WhereCondition {
+    abstract class AbstractCondition implements WhereCondition {
 
         protected final boolean hasSingleValue;
         protected final Object value;
@@ -68,7 +68,7 @@ public void appendValuesTo(List<Object> valuesTarget) {
         }
     }
 
-    public static class PropertyCondition extends AbstractCondition {
+    class PropertyCondition extends AbstractCondition {
 
         private static Object checkValueForType(Property property, Object value) {
             if (value != null && value.getClass().isArray()) {
@@ -140,7 +140,7 @@ public void appendTo(StringBuilder builder, String tableAlias) {
         }
     }
 
-    public static class StringCondition extends AbstractCondition {
+    class StringCondition extends AbstractCondition {
 
         protected final String string;
 
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxBase.java b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxBase.java
new file mode 100644
index 00000000..47aa355c
--- /dev/null
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxBase.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.rx;
+
+import org.greenrobot.greendao.annotation.apihint.Experimental;
+import org.greenrobot.greendao.annotation.apihint.Internal;
+
+import java.util.concurrent.Callable;
+
+import rx.Observable;
+import rx.Scheduler;
+
+/**
+ * Base functionality for Rx, e.g. default scheduler.
+ */
+@Internal
+class RxBase {
+
+    protected final Scheduler scheduler;
+
+    /**
+     * No default scheduler.
+     */
+    RxBase() {
+        scheduler = null;
+    }
+
+    /**
+     * Sets the default scheduler, which is used to configure returned observables with
+     * {@link Observable#subscribeOn(Scheduler)}.
+     */
+    @Experimental
+    RxBase(Scheduler scheduler) {
+        this.scheduler = scheduler;
+    }
+
+    /**
+     * The default scheduler (or null) used for wrapping.
+     */
+    @Experimental
+    public Scheduler getScheduler() {
+        return scheduler;
+    }
+
+    protected <R> Observable<R> wrap(Callable<R> callable) {
+        return wrap(RxUtils.fromCallable(callable));
+    }
+
+    protected <R> Observable<R> wrap(Observable<R> observable) {
+        if (scheduler != null) {
+            return observable.subscribeOn(scheduler);
+        } else {
+            return observable;
+        }
+    }
+
+}
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxDao.java b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxDao.java
new file mode 100644
index 00000000..229b3ce2
--- /dev/null
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxDao.java
@@ -0,0 +1,406 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.rx;
+
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.annotation.apihint.Experimental;
+
+import java.util.List;
+import java.util.concurrent.Callable;
+
+import rx.Observable;
+import rx.Scheduler;
+
+/**
+ * Like {@link AbstractDao} but with Rx support. Most methods from AbstractDao are present here, but will return an
+ * {@link Observable}. Modifying operations return the given entities, so they can be further processed in Rx.
+ * <p>
+ * Instances of RxDao may have an default {@link rx.Scheduler}, which is used to configure returned observables with
+ * {@link Observable#subscribeOn(Scheduler)} (see {@link AbstractDao#rxPlain()}, which uses the IO scheduler).
+ *
+ * Note: DO NOT call more than one data modification operation when you can use a transaction instead (see
+ * {@link RxTransaction}. Individual calls use a transaction each and are much slower.
+ *
+ * @param <T> Entity type
+ * @param <K> Primary key (PK) type; use Void if entity does not have exactly one PK
+ * @see AbstractDao#rxPlain()
+ */
+@Experimental
+public class RxDao<T, K> extends RxBase {
+
+    private final AbstractDao<T, K> dao;
+
+    /**
+     * Creates a new RxDao without a default scheduler.
+     */
+    @Experimental
+    public RxDao(AbstractDao<T, K> dao) {
+        this(dao, null);
+    }
+
+    /**
+     * Creates a new RxDao with a default scheduler, which is used to configure returned observables with
+     * {@link Observable#subscribeOn(Scheduler)}.
+     */
+    @Experimental
+    public RxDao(AbstractDao<T, K> dao, Scheduler scheduler) {
+        super(scheduler);
+        this.dao = dao;
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#loadAll()} returning an Observable.
+     */
+    @Experimental
+    public Observable<List<T>> loadAll() {
+        return wrap(new Callable<List<T>>() {
+            @Override
+            public List<T> call() throws Exception {
+                return dao.loadAll();
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#loadAll()} returning an Observable.
+     */
+    @Experimental
+    public Observable<T> load(final K key) {
+        return wrap(new Callable<T>() {
+            @Override
+            public T call() throws Exception {
+                return dao.load(key);
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#refresh(Object)} returning an Observable.
+     * Note that the Observable will emit the given entity back to its subscribers.
+     */
+    @Experimental
+    public Observable<T> refresh(final T entity) {
+        return wrap(new Callable<T>() {
+            @Override
+            public T call() throws Exception {
+                dao.refresh(entity);
+                return entity;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#insert(Object)} returning an Observable.
+     * Note that the Observable will emit the given entity back to its subscribers.
+     */
+    @Experimental
+    public Observable<T> insert(final T entity) {
+        return wrap(new Callable<T>() {
+            @Override
+            public T call() throws Exception {
+                dao.insert(entity);
+                return entity;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#insertInTx(Iterable)} returning an Observable.
+     * Note that the Observable will emit the given entities back to its subscribers.
+     */
+    @Experimental
+    public Observable<Iterable<T>> insertInTx(final Iterable<T> entities) {
+        return wrap(new Callable<Iterable<T>>() {
+            @Override
+            public Iterable<T> call() throws Exception {
+                dao.insertInTx(entities);
+                return entities;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#insertInTx(Object[])} returning an Observable.
+     * Note that the Observable will emit the given entities back to its subscribers.
+     */
+    @Experimental
+    public Observable<Object[]> insertInTx(final T... entities) {
+        return wrap(new Callable<Object[]>() {
+            @Override
+            public Object[] call() throws Exception {
+                dao.insertInTx(entities);
+                return entities;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#insertOrReplace(Object)} returning an Observable.
+     * Note that the Observable will emit the given entity back to its subscribers.
+     */
+    @Experimental
+    public Observable<T> insertOrReplace(final T entity) {
+        return wrap(new Callable<T>() {
+            @Override
+            public T call() throws Exception {
+                dao.insertOrReplace(entity);
+                return entity;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#insertOrReplaceInTx(Iterable)} returning an Observable.
+     * Note that the Observable will emit the given entities back to its subscribers.
+     */
+    @Experimental
+    public Observable<Iterable<T>> insertOrReplaceInTx(final Iterable<T> entities) {
+        return wrap(new Callable<Iterable<T>>() {
+            @Override
+            public Iterable<T> call() throws Exception {
+                dao.insertOrReplaceInTx(entities);
+                return entities;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#insertOrReplaceInTx(Object[])} returning an Observable.
+     * Note that the Observable will emit the given entities back to its subscribers.
+     */
+    @Experimental
+    public Observable<Object[]> insertOrReplaceInTx(final T... entities) {
+        return wrap(new Callable<Object[]>() {
+            @Override
+            public Object[] call() throws Exception {
+                dao.insertOrReplaceInTx(entities);
+                return entities;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#save(Object)} returning an Observable.
+     * Note that the Observable will emit the given entity back to its subscribers.
+     */
+    @Experimental
+    public Observable<T> save(final T entity) {
+        return wrap(new Callable<T>() {
+            @Override
+            public T call() throws Exception {
+                dao.save(entity);
+                return entity;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#saveInTx(Iterable)} returning an Observable.
+     * Note that the Observable will emit the given entities back to its subscribers.
+     */
+    @Experimental
+    public Observable<Iterable<T>> saveInTx(final Iterable<T> entities) {
+        return wrap(new Callable<Iterable<T>>() {
+            @Override
+            public Iterable<T> call() throws Exception {
+                dao.saveInTx(entities);
+                return entities;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#saveInTx(Object[])} returning an Observable.
+     * Note that the Observable will emit the given entities back to its subscribers.
+     */
+    @Experimental
+    public Observable<Object[]> saveInTx(final T... entities) {
+        return wrap(new Callable<Object[]>() {
+            @Override
+            public Object[] call() throws Exception {
+                dao.saveInTx(entities);
+                return entities;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#update(Object)} returning an Observable.
+     * Note that the Observable will emit the given entity back to its subscribers.
+     */
+    @Experimental
+    public Observable<T> update(final T entity) {
+        return wrap(new Callable<T>() {
+            @Override
+            public T call() throws Exception {
+                dao.update(entity);
+                return entity;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#updateInTx(Iterable)} returning an Observable.
+     * Note that the Observable will emit the given entities back to its subscribers.
+     */
+    @Experimental
+    public Observable<Iterable<T>> updateInTx(final Iterable<T> entities) {
+        return wrap(new Callable<Iterable<T>>() {
+            @Override
+            public Iterable<T> call() throws Exception {
+                dao.updateInTx(entities);
+                return entities;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#updateInTx(Object[])} returning an Observable.
+     * Note that the Observable will emit the given entities back to its subscribers.
+     */
+    @Experimental
+    public Observable<Object[]> updateInTx(final T... entities) {
+        return wrap(new Callable<Object[]>() {
+            @Override
+            public Object[] call() throws Exception {
+                dao.updateInTx(entities);
+                return entities;
+            }
+        });
+    }
+
+
+    /**
+     * Rx version of {@link AbstractDao#delete(Object)} returning an Observable.
+     */
+    @Experimental
+    public Observable<Void> delete(final T entity) {
+        return wrap(new Callable<Void>() {
+            @Override
+            public Void call() throws Exception {
+                dao.delete(entity);
+                return null;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#deleteByKey(Object)} returning an Observable.
+     */
+    @Experimental
+    public Observable<Void> deleteByKey(final K key) {
+        return wrap(new Callable<Void>() {
+            @Override
+            public Void call() throws Exception {
+                dao.deleteByKey(key);
+                return null;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#deleteAll()} returning an Observable.
+     */
+    @Experimental
+    public Observable<Void> deleteAll() {
+        return wrap(new Callable<Void>() {
+            @Override
+            public Void call() throws Exception {
+                dao.deleteAll();
+                return null;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#deleteInTx(Iterable)} returning an Observable.
+     */
+    @Experimental
+    public Observable<Void> deleteInTx(final Iterable<T> entities) {
+        return wrap(new Callable<Void>() {
+            @Override
+            public Void call() throws Exception {
+                dao.deleteInTx(entities);
+                return null;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#deleteInTx(Object[])} returning an Observable.
+     */
+    @Experimental
+    public Observable<Void> deleteInTx(final T... entities) {
+        return wrap(new Callable<Void>() {
+            @Override
+            public Void call() throws Exception {
+                dao.deleteInTx(entities);
+                return null;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#deleteByKeyInTx(Iterable)} returning an Observable.
+     */
+    @Experimental
+    public Observable<Void> deleteByKeyInTx(final Iterable<K> keys) {
+        return wrap(new Callable<Void>() {
+            @Override
+            public Void call() throws Exception {
+                dao.deleteByKeyInTx(keys);
+                return null;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#deleteByKeyInTx(Object[])} returning an Observable.
+     */
+    @Experimental
+    public Observable<Void> deleteByKeyInTx(final K... keys) {
+        return wrap(new Callable<Void>() {
+            @Override
+            public Void call() throws Exception {
+                dao.deleteByKeyInTx(keys);
+                return null;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#count()} returning an Observable.
+     */
+    @Experimental
+    public Observable<Long> count() {
+        return wrap(new Callable<Long>() {
+            @Override
+            public Long call() throws Exception {
+                return dao.count();
+            }
+        });
+    }
+
+    /**
+     * The plain DAO.
+     */
+    @Experimental
+    public AbstractDao<T, K> getDao() {
+        return dao;
+    }
+
+}
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxQuery.java b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxQuery.java
new file mode 100644
index 00000000..cc01be35
--- /dev/null
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxQuery.java
@@ -0,0 +1,114 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.rx;
+
+import org.greenrobot.greendao.annotation.apihint.Experimental;
+import org.greenrobot.greendao.query.LazyList;
+import org.greenrobot.greendao.query.Query;
+
+import java.util.List;
+import java.util.concurrent.Callable;
+
+import rx.Observable;
+import rx.Observable.OnSubscribe;
+import rx.Scheduler;
+import rx.Subscriber;
+import rx.exceptions.Exceptions;
+
+/**
+ * Gets {@link org.greenrobot.greendao.query.Query} results in Rx fashion.
+ */
+@Experimental
+// TODO Pass parameters: currently, parameters are always set to their initial values because of forCurrentThread()
+public class RxQuery<T> extends RxBase {
+    private final Query<T> query;
+
+    public RxQuery(Query<T> query) {
+        this.query = query;
+    }
+
+    public RxQuery(Query<T> query, Scheduler scheduler) {
+        super(scheduler);
+        this.query = query;
+    }
+
+    /**
+     * Rx version of {@link Query#list()} returning an Observable.
+     */
+    @Experimental
+    public Observable<List<T>> list() {
+        return wrap(new Callable<List<T>>() {
+            @Override
+            public List<T> call() throws Exception {
+                return query.forCurrentThread().list();
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link Query#unique()} returning an Observable.
+     */
+    @Experimental
+    public Observable<T> unique() {
+        return wrap(new Callable<T>() {
+            @Override
+            public T call() throws Exception {
+                return query.forCurrentThread().unique();
+            }
+        });
+    }
+
+    /**
+     * Emits the resulting entities one by one, producing them on the fly ("streaming" entities).
+     * Unlike {@link #list()}, it does not wait for the query to gather all results. Thus, the first entities are
+     * immediately available as soon the underlying database cursor has data. This approach may be more memory
+     * efficient for large number of entities (or large entities) at the cost of additional overhead caused by a
+     * per-entity delivery through Rx.
+     */
+    public Observable<T> oneByOne() {
+        Observable<T> observable = Observable.create(new OnSubscribe<T>() {
+            @Override
+            public void call(Subscriber<? super T> subscriber) {
+                try {
+                    LazyList<T> lazyList = query.forCurrentThread().listLazyUncached();
+                    try {
+                        for (T entity : lazyList) {
+                            if (subscriber.isUnsubscribed()) {
+                                break;
+                            }
+                            subscriber.onNext(entity);
+                        }
+                    } finally {
+                        lazyList.close();
+                    }
+                    if (!subscriber.isUnsubscribed()) {
+                        subscriber.onCompleted();
+                    }
+                } catch (Throwable e) {
+                    Exceptions.throwIfFatal(e);
+                    subscriber.onError(e);
+                }
+            }
+        });
+        return wrap(observable);
+    }
+
+//    @Experimental
+//    public Query<T> getQuery() {
+//        return query;
+//    }
+}
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxTransaction.java b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxTransaction.java
new file mode 100644
index 00000000..8ef01d33
--- /dev/null
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxTransaction.java
@@ -0,0 +1,77 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.rx;
+
+import org.greenrobot.greendao.AbstractDaoSession;
+import org.greenrobot.greendao.annotation.apihint.Experimental;
+
+import java.util.concurrent.Callable;
+
+import rx.Observable;
+import rx.Scheduler;
+
+/**
+ * Allows to do transactions using Rx Observable.
+ */
+@Experimental
+public class RxTransaction extends RxBase {
+    private final AbstractDaoSession daoSession;
+
+    public RxTransaction(AbstractDaoSession daoSession) {
+        this.daoSession = daoSession;
+    }
+
+    public RxTransaction(AbstractDaoSession daoSession, Scheduler scheduler) {
+        super(scheduler);
+        this.daoSession = daoSession;
+    }
+
+    /**
+     * Rx version of {@link AbstractDaoSession#runInTx(Runnable)} returning an Observable.
+     */
+    @Experimental
+    public Observable<Void> run(final Runnable runnable) {
+        return wrap(new Callable<Void>() {
+            @Override
+            public Void call() throws Exception {
+                daoSession.runInTx(runnable);
+                return null;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDaoSession#callInTx(Callable)} returning an Observable.
+     */
+    @Experimental
+    public <T> Observable<T> call(final Callable<T> callable) {
+        return wrap(new Callable<T>() {
+            @Override
+            public T call() throws Exception {
+                return daoSession.callInTx(callable);
+            }
+        });
+    }
+
+    // Note: wrapping callInTxNoException does not make sense, because the Exception is handled by Rx anyway.
+
+
+    @Experimental
+    public AbstractDaoSession getDaoSession() {
+        return daoSession;
+    }
+}
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxUtils.java b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxUtils.java
new file mode 100644
index 00000000..0754754f
--- /dev/null
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxUtils.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.rx;
+
+import org.greenrobot.greendao.annotation.apihint.Internal;
+
+import java.util.concurrent.Callable;
+
+import rx.Observable;
+import rx.functions.Func0;
+
+@Internal
+class RxUtils {
+    /** As of RxJava 1.1.7, Observable.fromCallable is still @Beta, so just in case... */
+    @Internal
+    static <T> Observable<T> fromCallable(final Callable<T> callable) {
+        return Observable.defer(new Func0<Observable<T>>() {
+
+            @Override
+            public Observable<T> call() {
+                T result;
+                try {
+                    result = callable.call();
+                } catch (Exception e) {
+                    return Observable.error(e);
+                }
+                return Observable.just(result);
+            }
+        });
+    }
+}
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoSessionTest.java b/DaoCore/src/main/java/org/greenrobot/greendao/test/AbstractDaoSessionTest.java
similarity index 84%
rename from DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoSessionTest.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/test/AbstractDaoSessionTest.java
index 08bc0ff9..cc5aa045 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoSessionTest.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/test/AbstractDaoSessionTest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,14 +14,15 @@
  * limitations under the License.
  */
 
-package de.greenrobot.dao.test;
+package org.greenrobot.greendao.test;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 
 import android.database.sqlite.SQLiteDatabase;
-import de.greenrobot.dao.AbstractDaoMaster;
-import de.greenrobot.dao.AbstractDaoSession;
+import org.greenrobot.greendao.AbstractDaoMaster;
+import org.greenrobot.greendao.AbstractDaoSession;
+import org.greenrobot.greendao.database.Database;
 
 /**
  * Base class for DAO (master) related testing.
@@ -52,10 +53,10 @@ public AbstractDaoSessionTest(Class<T> daoMasterClass, boolean inMemory) {
     protected void setUp() throws Exception {
         super.setUp();
         try {
-            Constructor<T> constructor = daoMasterClass.getConstructor(SQLiteDatabase.class);
+            Constructor<T> constructor = daoMasterClass.getConstructor(Database.class);
             daoMaster = constructor.newInstance(db);
 
-            Method createTableMethod = daoMasterClass.getMethod("createAllTables", SQLiteDatabase.class, boolean.class);
+            Method createTableMethod = daoMasterClass.getMethod("createAllTables", Database.class, boolean.class);
             createTableMethod.invoke(null, db, false);
         } catch (Exception e) {
             throw new RuntimeException("Could not prepare DAO session test", e);
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTest.java b/DaoCore/src/main/java/org/greenrobot/greendao/test/AbstractDaoTest.java
similarity index 82%
rename from DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTest.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/test/AbstractDaoTest.java
index 6c301da7..f96bccf6 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTest.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/test/AbstractDaoTest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,19 +14,20 @@
  * limitations under the License.
  */
 
-package de.greenrobot.dao.test;
+package org.greenrobot.greendao.test;
 
 import java.lang.reflect.Method;
 
 import android.database.sqlite.SQLiteDatabase;
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoLog;
-import de.greenrobot.dao.InternalUnitTestDaoAccess;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.identityscope.IdentityScope;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.InternalUnitTestDaoAccess;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.identityscope.IdentityScope;
 
 /**
- * Base class for DAO related testing. Prepares an in-memory DB and DAO.
+ * Base class for DAO related testing without any tests. Prepares an in-memory DB and DAO.
  * 
  * @author Markus
  * 
@@ -73,7 +74,7 @@ protected void setUp() throws Exception {
 
     protected void setUpTableForDao() throws Exception {
         try {
-            Method createTableMethod = daoClass.getMethod("createTable", SQLiteDatabase.class, boolean.class);
+            Method createTableMethod = daoClass.getMethod("createTable", Database.class, boolean.class);
             createTableMethod.invoke(null, db, false);
         } catch (NoSuchMethodException e) {
             DaoLog.i("No createTable method");
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTestLongPk.java b/DaoCore/src/main/java/org/greenrobot/greendao/test/AbstractDaoTestLongPk.java
similarity index 86%
rename from DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTestLongPk.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/test/AbstractDaoTestLongPk.java
index 6be8b3d5..df6597e0 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTestLongPk.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/test/AbstractDaoTestLongPk.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,20 +14,17 @@
  * limitations under the License.
  */
 
-package de.greenrobot.dao.test;
+package org.greenrobot.greendao.test;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoLog;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.DaoLog;
 
 /**
  * Base class for DAOs having a long/Long as a PK, which is quite common.
- * 
+ *
+ * @param <D> DAO class
+ * @param <T> Entity type of the DAO
  * @author Markus
- * 
- * @param <D>
- *            DAO class
- * @param <T>
- *            Entity type of the DAO
  */
 public abstract class AbstractDaoTestLongPk<D extends AbstractDao<T, Long>, T> extends AbstractDaoTestSinglePk<D, T, Long> {
 
@@ -39,7 +36,7 @@ public AbstractDaoTestLongPk(Class<D> daoClass) {
     protected Long createRandomPk() {
         return random.nextLong();
     }
-    
+
     public void testAssignPk() {
         if (daoAccess.isEntityUpdateable()) {
             T entity1 = createEntity(null);
@@ -66,5 +63,4 @@ public void testAssignPk() {
         }
     }
 
-
 }
\ No newline at end of file
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java b/DaoCore/src/main/java/org/greenrobot/greendao/test/AbstractDaoTestSinglePk.java
similarity index 88%
rename from DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/test/AbstractDaoTestSinglePk.java
index efdcae2b..2e69901a 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/test/AbstractDaoTestSinglePk.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,14 +14,15 @@
  * limitations under the License.
  */
 
-package de.greenrobot.dao.test;
+package org.greenrobot.greendao.test;
 
 import android.database.Cursor;
 import android.database.DatabaseUtils;
 import android.database.SQLException;
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.SqlUtils;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.SqlUtils;
 
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -258,6 +259,38 @@ public void testLoadPk() {
         runLoadPkTest(0);
     }
 
+    public void testSave() {
+        if(!checkKeyIsNullable()) {
+            return;
+        }
+        dao.deleteAll();
+        T entity = createEntity(null);
+        if (entity != null) {
+            dao.save(entity);
+            dao.save(entity);
+            assertEquals(1, dao.count());
+        }
+    }
+
+    public void testSaveInTx() {
+        if(!checkKeyIsNullable()) {
+            return;
+        }
+        dao.deleteAll();
+        List<T> listPartial = new ArrayList<T>();
+        List<T> listAll = new ArrayList<T>();
+        for (int i = 0; i < 20; i++) {
+            T entity = createEntity(null);
+            if (i % 2 == 0) {
+                listPartial.add(entity);
+            }
+            listAll.add(entity);
+        }
+        dao.saveInTx(listPartial);
+        dao.saveInTx(listAll);
+        assertEquals(listAll.size(), dao.count());
+    }
+
     protected void runLoadPkTest(int offset) {
         K pk = nextPk();
         T entity = createEntity(pk);
@@ -304,6 +337,14 @@ protected Cursor queryWithDummyColumnsInFront(int dummyCount, String valueForCol
         return cursor;
     }
 
+    protected boolean checkKeyIsNullable() {
+        if (createEntity(null) == null) {
+            DaoLog.d("Test is not available for entities with non-null keys");
+            return false;
+        }
+        return true;
+    }
+
     /** Provides a collision free PK () not returned before in the current test. */
     protected K nextPk() {
         for (int i = 0; i < 100000; i++) {
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTestStringPk.java b/DaoCore/src/main/java/org/greenrobot/greendao/test/AbstractDaoTestStringPk.java
similarity index 88%
rename from DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTestStringPk.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/test/AbstractDaoTestStringPk.java
index f97b979c..7584c915 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTestStringPk.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/test/AbstractDaoTestStringPk.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.dao.test;
+package org.greenrobot.greendao.test;
 
-import de.greenrobot.dao.AbstractDao;
+import org.greenrobot.greendao.AbstractDao;
 
 /**
  * Base class for DAOs having a String as a PK.
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/test/DbTest.java b/DaoCore/src/main/java/org/greenrobot/greendao/test/DbTest.java
similarity index 78%
rename from DaoCore/src/main/java/de/greenrobot/dao/test/DbTest.java
rename to DaoCore/src/main/java/org/greenrobot/greendao/test/DbTest.java
index 6788eca0..d0af3f40 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/test/DbTest.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/test/DbTest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2013 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,20 +14,23 @@
  * limitations under the License.
  */
 
-package de.greenrobot.dao.test;
+package org.greenrobot.greendao.test;
 
 import android.app.Application;
 import android.app.Instrumentation;
 import android.database.sqlite.SQLiteDatabase;
 import android.test.AndroidTestCase;
-import de.greenrobot.dao.DbUtils;
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.DbUtils;
+import org.greenrobot.greendao.database.StandardDatabase;
+import org.greenrobot.greendao.database.Database;
 
 import java.util.Random;
 
 /**
  * Base class for database related testing, which prepares an in-memory or an file-based DB (using the test {@link
- * android.content.Context}). Also, offers some convenience methods to create new {@link Application} objects similar to
- * {@link android.test.ApplicationTestCase}.
+ * android.content.Context}). Also, offers some convenience methods to create new {@link Application} objects similar
+ * to {@link android.test.ApplicationTestCase}.
  * <p/>
  * Unlike ApplicationTestCase, this class should behave more correctly when you call {@link #createApplication(Class)}
  * during {@link #setUp()}: {@link android.test.ApplicationTestCase#testApplicationTestCaseSetUpProperly()} leaves
@@ -41,7 +44,7 @@
 
     protected final Random random;
     protected final boolean inMemory;
-    protected SQLiteDatabase db;
+    protected Database db;
 
     private Application application;
 
@@ -88,13 +91,16 @@ public void terminateApplication() {
     }
 
     /** May be overriden by sub classes to set up a different db. */
-    protected SQLiteDatabase createDatabase() {
+    protected Database createDatabase() {
+        SQLiteDatabase sqLiteDatabase;
         if (inMemory) {
-            return SQLiteDatabase.create(null);
+            sqLiteDatabase = SQLiteDatabase.create(null);
+
         } else {
             getContext().deleteDatabase(DB_NAME);
-            return getContext().openOrCreateDatabase(DB_NAME, 0, null);
+            sqLiteDatabase = getContext().openOrCreateDatabase(DB_NAME, 0, null);
         }
+        return new StandardDatabase(sqLiteDatabase);
     }
 
     @Override
@@ -111,7 +117,11 @@ protected void tearDown() throws Exception {
     }
 
     protected void logTableDump(String tablename) {
-        DbUtils.logTableDump(db, tablename);
+        if (db instanceof StandardDatabase) {
+            DbUtils.logTableDump(((StandardDatabase) db).getSQLiteDatabase(), tablename);
+        } else {
+            DaoLog.w("Table dump unsupported for " + db);
+        }
     }
 
 }
\ No newline at end of file
diff --git a/DaoExample/.gitignore b/DaoExample/.gitignore
deleted file mode 100644
index c181ae51..00000000
--- a/DaoExample/.gitignore
+++ /dev/null
@@ -1,3 +0,0 @@
-/bin
-/gen
-/build
diff --git a/DaoExample/proguard.cfg b/DaoExample/proguard.cfg
deleted file mode 100644
index 12dd0392..00000000
--- a/DaoExample/proguard.cfg
+++ /dev/null
@@ -1,36 +0,0 @@
--optimizationpasses 5
--dontusemixedcaseclassnames
--dontskipnonpubliclibraryclasses
--dontpreverify
--verbose
--optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
-
--keep public class * extends android.app.Activity
--keep public class * extends android.app.Application
--keep public class * extends android.app.Service
--keep public class * extends android.content.BroadcastReceiver
--keep public class * extends android.content.ContentProvider
--keep public class * extends android.app.backup.BackupAgentHelper
--keep public class * extends android.preference.Preference
--keep public class com.android.vending.licensing.ILicensingService
-
--keepclasseswithmembernames class * {
-    native <methods>;
-}
-
--keepclasseswithmembernames class * {
-    public <init>(android.content.Context, android.util.AttributeSet);
-}
-
--keepclasseswithmembernames class * {
-    public <init>(android.content.Context, android.util.AttributeSet, int);
-}
-
--keepclassmembers enum * {
-    public static **[] values();
-    public static ** valueOf(java.lang.String);
-}
-
--keep class * implements android.os.Parcelable {
-  public static final android.os.Parcelable$Creator *;
-}
diff --git a/DaoExample/project.properties b/DaoExample/project.properties
deleted file mode 100644
index c957743c..00000000
--- a/DaoExample/project.properties
+++ /dev/null
@@ -1,11 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system use,
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-
-# Project target.
-target=android-4
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/CustomerDao.java b/DaoExample/src/main/java/de/greenrobot/daoexample/CustomerDao.java
deleted file mode 100644
index f9df3d31..00000000
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/CustomerDao.java
+++ /dev/null
@@ -1,120 +0,0 @@
-package de.greenrobot.daoexample;
-
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
-
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daoexample.Customer;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
- * DAO for table "CUSTOMER".
-*/
-public class CustomerDao extends AbstractDao<Customer, Long> {
-
-    public static final String TABLENAME = "CUSTOMER";
-
-    /**
-     * Properties of entity Customer.<br/>
-     * Can be used for QueryBuilder and for referencing column names.
-    */
-    public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
-    };
-
-    private DaoSession daoSession;
-
-
-    public CustomerDao(DaoConfig config) {
-        super(config);
-    }
-    
-    public CustomerDao(DaoConfig config, DaoSession daoSession) {
-        super(config, daoSession);
-        this.daoSession = daoSession;
-    }
-
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOMER\" (" + //
-                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
-                "\"NAME\" TEXT NOT NULL );"); // 1: name
-    }
-
-    /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
-        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOMER\"";
-        db.execSQL(sql);
-    }
-
-    /** @inheritdoc */
-    @Override
-    protected void bindValues(SQLiteStatement stmt, Customer entity) {
-        stmt.clearBindings();
- 
-        Long id = entity.getId();
-        if (id != null) {
-            stmt.bindLong(1, id);
-        }
-        stmt.bindString(2, entity.getName());
-    }
-
-    @Override
-    protected void attachEntity(Customer entity) {
-        super.attachEntity(entity);
-        entity.__setDaoSession(daoSession);
-    }
-
-    /** @inheritdoc */
-    @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
-    }    
-
-    /** @inheritdoc */
-    @Override
-    public Customer readEntity(Cursor cursor, int offset) {
-        Customer entity = new Customer( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.getString(offset + 1) // name
-        );
-        return entity;
-    }
-     
-    /** @inheritdoc */
-    @Override
-    public void readEntity(Cursor cursor, Customer entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setName(cursor.getString(offset + 1));
-     }
-    
-    /** @inheritdoc */
-    @Override
-    protected Long updateKeyAfterInsert(Customer entity, long rowId) {
-        entity.setId(rowId);
-        return rowId;
-    }
-    
-    /** @inheritdoc */
-    @Override
-    public Long getKey(Customer entity) {
-        if(entity != null) {
-            return entity.getId();
-        } else {
-            return null;
-        }
-    }
-
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
-        return true;
-    }
-    
-}
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/DaoMaster.java b/DaoExample/src/main/java/de/greenrobot/daoexample/DaoMaster.java
deleted file mode 100644
index 53627f13..00000000
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/DaoMaster.java
+++ /dev/null
@@ -1,78 +0,0 @@
-package de.greenrobot.daoexample;
-
-import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteDatabase.CursorFactory;
-import android.database.sqlite.SQLiteOpenHelper;
-import android.util.Log;
-import de.greenrobot.dao.AbstractDaoMaster;
-import de.greenrobot.dao.identityscope.IdentityScopeType;
-
-import de.greenrobot.daoexample.NoteDao;
-import de.greenrobot.daoexample.CustomerDao;
-import de.greenrobot.daoexample.OrderDao;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
- * Master of DAO (schema version 1000): knows all DAOs.
-*/
-public class DaoMaster extends AbstractDaoMaster {
-    public static final int SCHEMA_VERSION = 1000;
-
-    /** Creates underlying database table using DAOs. */
-    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
-        NoteDao.createTable(db, ifNotExists);
-        CustomerDao.createTable(db, ifNotExists);
-        OrderDao.createTable(db, ifNotExists);
-    }
-    
-    /** Drops underlying database table using DAOs. */
-    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
-        NoteDao.dropTable(db, ifExists);
-        CustomerDao.dropTable(db, ifExists);
-        OrderDao.dropTable(db, ifExists);
-    }
-    
-    public static abstract class OpenHelper extends SQLiteOpenHelper {
-
-        public OpenHelper(Context context, String name, CursorFactory factory) {
-            super(context, name, factory, SCHEMA_VERSION);
-        }
-
-        @Override
-        public void onCreate(SQLiteDatabase db) {
-            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
-            createAllTables(db, false);
-        }
-    }
-    
-    /** WARNING: Drops all table on Upgrade! Use only during development. */
-    public static class DevOpenHelper extends OpenHelper {
-        public DevOpenHelper(Context context, String name, CursorFactory factory) {
-            super(context, name, factory);
-        }
-
-        @Override
-        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
-            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
-            dropAllTables(db, true);
-            onCreate(db);
-        }
-    }
-
-    public DaoMaster(SQLiteDatabase db) {
-        super(db, SCHEMA_VERSION);
-        registerDaoClass(NoteDao.class);
-        registerDaoClass(CustomerDao.class);
-        registerDaoClass(OrderDao.class);
-    }
-    
-    public DaoSession newSession() {
-        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
-    }
-    
-    public DaoSession newSession(IdentityScopeType type) {
-        return new DaoSession(db, type, daoConfigMap);
-    }
-    
-}
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/DaoSession.java b/DaoExample/src/main/java/de/greenrobot/daoexample/DaoSession.java
deleted file mode 100644
index e6d19f42..00000000
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/DaoSession.java
+++ /dev/null
@@ -1,77 +0,0 @@
-package de.greenrobot.daoexample;
-
-import android.database.sqlite.SQLiteDatabase;
-
-import java.util.Map;
-
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.AbstractDaoSession;
-import de.greenrobot.dao.identityscope.IdentityScopeType;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daoexample.Note;
-import de.greenrobot.daoexample.Customer;
-import de.greenrobot.daoexample.Order;
-
-import de.greenrobot.daoexample.NoteDao;
-import de.greenrobot.daoexample.CustomerDao;
-import de.greenrobot.daoexample.OrderDao;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-
-/**
- * {@inheritDoc}
- * 
- * @see de.greenrobot.dao.AbstractDaoSession
- */
-public class DaoSession extends AbstractDaoSession {
-
-    private final DaoConfig noteDaoConfig;
-    private final DaoConfig customerDaoConfig;
-    private final DaoConfig orderDaoConfig;
-
-    private final NoteDao noteDao;
-    private final CustomerDao customerDao;
-    private final OrderDao orderDao;
-
-    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
-            daoConfigMap) {
-        super(db);
-
-        noteDaoConfig = daoConfigMap.get(NoteDao.class).clone();
-        noteDaoConfig.initIdentityScope(type);
-
-        customerDaoConfig = daoConfigMap.get(CustomerDao.class).clone();
-        customerDaoConfig.initIdentityScope(type);
-
-        orderDaoConfig = daoConfigMap.get(OrderDao.class).clone();
-        orderDaoConfig.initIdentityScope(type);
-
-        noteDao = new NoteDao(noteDaoConfig, this);
-        customerDao = new CustomerDao(customerDaoConfig, this);
-        orderDao = new OrderDao(orderDaoConfig, this);
-
-        registerDao(Note.class, noteDao);
-        registerDao(Customer.class, customerDao);
-        registerDao(Order.class, orderDao);
-    }
-    
-    public void clear() {
-        noteDaoConfig.getIdentityScope().clear();
-        customerDaoConfig.getIdentityScope().clear();
-        orderDaoConfig.getIdentityScope().clear();
-    }
-
-    public NoteDao getNoteDao() {
-        return noteDao;
-    }
-
-    public CustomerDao getCustomerDao() {
-        return customerDao;
-    }
-
-    public OrderDao getOrderDao() {
-        return orderDao;
-    }
-
-}
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/NoteDao.java b/DaoExample/src/main/java/de/greenrobot/daoexample/NoteDao.java
deleted file mode 100644
index 6d7d8306..00000000
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/NoteDao.java
+++ /dev/null
@@ -1,129 +0,0 @@
-package de.greenrobot.daoexample;
-
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
-
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daoexample.Note;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
- * DAO for table "NOTE".
-*/
-public class NoteDao extends AbstractDao<Note, Long> {
-
-    public static final String TABLENAME = "NOTE";
-
-    /**
-     * Properties of entity Note.<br/>
-     * Can be used for QueryBuilder and for referencing column names.
-    */
-    public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
-        public final static Property Comment = new Property(2, String.class, "comment", false, "COMMENT");
-        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
-    };
-
-
-    public NoteDao(DaoConfig config) {
-        super(config);
-    }
-    
-    public NoteDao(DaoConfig config, DaoSession daoSession) {
-        super(config, daoSession);
-    }
-
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "\"NOTE\" (" + //
-                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
-                "\"TEXT\" TEXT NOT NULL ," + // 1: text
-                "\"COMMENT\" TEXT," + // 2: comment
-                "\"DATE\" INTEGER);"); // 3: date
-    }
-
-    /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
-        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE\"";
-        db.execSQL(sql);
-    }
-
-    /** @inheritdoc */
-    @Override
-    protected void bindValues(SQLiteStatement stmt, Note entity) {
-        stmt.clearBindings();
- 
-        Long id = entity.getId();
-        if (id != null) {
-            stmt.bindLong(1, id);
-        }
-        stmt.bindString(2, entity.getText());
- 
-        String comment = entity.getComment();
-        if (comment != null) {
-            stmt.bindString(3, comment);
-        }
- 
-        java.util.Date date = entity.getDate();
-        if (date != null) {
-            stmt.bindLong(4, date.getTime());
-        }
-    }
-
-    /** @inheritdoc */
-    @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
-    }    
-
-    /** @inheritdoc */
-    @Override
-    public Note readEntity(Cursor cursor, int offset) {
-        Note entity = new Note( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.getString(offset + 1), // text
-            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comment
-            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // date
-        );
-        return entity;
-    }
-     
-    /** @inheritdoc */
-    @Override
-    public void readEntity(Cursor cursor, Note entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setText(cursor.getString(offset + 1));
-        entity.setComment(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
-        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
-     }
-    
-    /** @inheritdoc */
-    @Override
-    protected Long updateKeyAfterInsert(Note entity, long rowId) {
-        entity.setId(rowId);
-        return rowId;
-    }
-    
-    /** @inheritdoc */
-    @Override
-    public Long getKey(Note entity) {
-        if(entity != null) {
-            return entity.getId();
-        } else {
-            return null;
-        }
-    }
-
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
-        return true;
-    }
-    
-}
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/OrderDao.java b/DaoExample/src/main/java/de/greenrobot/daoexample/OrderDao.java
deleted file mode 100644
index 9cb68bc3..00000000
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/OrderDao.java
+++ /dev/null
@@ -1,243 +0,0 @@
-package de.greenrobot.daoexample;
-
-import java.util.List;
-import java.util.ArrayList;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
-
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.SqlUtils;
-import de.greenrobot.dao.internal.DaoConfig;
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.query.QueryBuilder;
-
-import de.greenrobot.daoexample.Order;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
- * DAO for table "ORDERS".
-*/
-public class OrderDao extends AbstractDao<Order, Long> {
-
-    public static final String TABLENAME = "ORDERS";
-
-    /**
-     * Properties of entity Order.<br/>
-     * Can be used for QueryBuilder and for referencing column names.
-    */
-    public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
-        public final static Property CustomerId = new Property(2, long.class, "customerId", false, "CUSTOMER_ID");
-    };
-
-    private DaoSession daoSession;
-
-    private Query<Order> customer_OrdersQuery;
-
-    public OrderDao(DaoConfig config) {
-        super(config);
-    }
-    
-    public OrderDao(DaoConfig config, DaoSession daoSession) {
-        super(config, daoSession);
-        this.daoSession = daoSession;
-    }
-
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "\"ORDERS\" (" + //
-                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
-                "\"DATE\" INTEGER," + // 1: date
-                "\"CUSTOMER_ID\" INTEGER NOT NULL );"); // 2: customerId
-    }
-
-    /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
-        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDERS\"";
-        db.execSQL(sql);
-    }
-
-    /** @inheritdoc */
-    @Override
-    protected void bindValues(SQLiteStatement stmt, Order entity) {
-        stmt.clearBindings();
- 
-        Long id = entity.getId();
-        if (id != null) {
-            stmt.bindLong(1, id);
-        }
- 
-        java.util.Date date = entity.getDate();
-        if (date != null) {
-            stmt.bindLong(2, date.getTime());
-        }
-        stmt.bindLong(3, entity.getCustomerId());
-    }
-
-    @Override
-    protected void attachEntity(Order entity) {
-        super.attachEntity(entity);
-        entity.__setDaoSession(daoSession);
-    }
-
-    /** @inheritdoc */
-    @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
-    }    
-
-    /** @inheritdoc */
-    @Override
-    public Order readEntity(Cursor cursor, int offset) {
-        Order entity = new Order( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
-            cursor.getLong(offset + 2) // customerId
-        );
-        return entity;
-    }
-     
-    /** @inheritdoc */
-    @Override
-    public void readEntity(Cursor cursor, Order entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
-        entity.setCustomerId(cursor.getLong(offset + 2));
-     }
-    
-    /** @inheritdoc */
-    @Override
-    protected Long updateKeyAfterInsert(Order entity, long rowId) {
-        entity.setId(rowId);
-        return rowId;
-    }
-    
-    /** @inheritdoc */
-    @Override
-    public Long getKey(Order entity) {
-        if(entity != null) {
-            return entity.getId();
-        } else {
-            return null;
-        }
-    }
-
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
-        return true;
-    }
-    
-    /** Internal query to resolve the "orders" to-many relationship of Customer. */
-    public List<Order> _queryCustomer_Orders(long customerId) {
-        synchronized (this) {
-            if (customer_OrdersQuery == null) {
-                QueryBuilder<Order> queryBuilder = queryBuilder();
-                queryBuilder.where(Properties.CustomerId.eq(null));
-                queryBuilder.orderRaw("T.'DATE' ASC");
-                customer_OrdersQuery = queryBuilder.build();
-            }
-        }
-        Query<Order> query = customer_OrdersQuery.forCurrentThread();
-        query.setParameter(0, customerId);
-        return query.list();
-    }
-
-    private String selectDeep;
-
-    protected String getSelectDeep() {
-        if (selectDeep == null) {
-            StringBuilder builder = new StringBuilder("SELECT ");
-            SqlUtils.appendColumns(builder, "T", getAllColumns());
-            builder.append(',');
-            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomerDao().getAllColumns());
-            builder.append(" FROM ORDERS T");
-            builder.append(" LEFT JOIN CUSTOMER T0 ON T.\"CUSTOMER_ID\"=T0.\"_id\"");
-            builder.append(' ');
-            selectDeep = builder.toString();
-        }
-        return selectDeep;
-    }
-    
-    protected Order loadCurrentDeep(Cursor cursor, boolean lock) {
-        Order entity = loadCurrent(cursor, 0, lock);
-        int offset = getAllColumns().length;
-
-        Customer customer = loadCurrentOther(daoSession.getCustomerDao(), cursor, offset);
-         if(customer != null) {
-            entity.setCustomer(customer);
-        }
-
-        return entity;    
-    }
-
-    public Order loadDeep(Long key) {
-        assertSinglePk();
-        if (key == null) {
-            return null;
-        }
-
-        StringBuilder builder = new StringBuilder(getSelectDeep());
-        builder.append("WHERE ");
-        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
-        String sql = builder.toString();
-        
-        String[] keyArray = new String[] { key.toString() };
-        Cursor cursor = db.rawQuery(sql, keyArray);
-        
-        try {
-            boolean available = cursor.moveToFirst();
-            if (!available) {
-                return null;
-            } else if (!cursor.isLast()) {
-                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
-            }
-            return loadCurrentDeep(cursor, true);
-        } finally {
-            cursor.close();
-        }
-    }
-    
-    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
-    public List<Order> loadAllDeepFromCursor(Cursor cursor) {
-        int count = cursor.getCount();
-        List<Order> list = new ArrayList<Order>(count);
-        
-        if (cursor.moveToFirst()) {
-            if (identityScope != null) {
-                identityScope.lock();
-                identityScope.reserveRoom(count);
-            }
-            try {
-                do {
-                    list.add(loadCurrentDeep(cursor, false));
-                } while (cursor.moveToNext());
-            } finally {
-                if (identityScope != null) {
-                    identityScope.unlock();
-                }
-            }
-        }
-        return list;
-    }
-    
-    protected List<Order> loadDeepAllAndCloseCursor(Cursor cursor) {
-        try {
-            return loadAllDeepFromCursor(cursor);
-        } finally {
-            cursor.close();
-        }
-    }
-    
-
-    /** A raw-style query where you can pass any WHERE clause and arguments. */
-    public List<Order> queryDeep(String where, String... selectionArg) {
-        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
-        return loadDeepAllAndCloseCursor(cursor);
-    }
- 
-}
diff --git a/DaoExample/src/main/res/drawable-hdpi/icon.png b/DaoExample/src/main/res/drawable-hdpi/icon.png
deleted file mode 100644
index 8074c4c5..00000000
Binary files a/DaoExample/src/main/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/DaoExample/src/main/res/drawable-ldpi/icon.png b/DaoExample/src/main/res/drawable-ldpi/icon.png
deleted file mode 100644
index 1095584e..00000000
Binary files a/DaoExample/src/main/res/drawable-ldpi/icon.png and /dev/null differ
diff --git a/DaoExample/src/main/res/drawable-mdpi/icon.png b/DaoExample/src/main/res/drawable-mdpi/icon.png
deleted file mode 100644
index a07c69fa..00000000
Binary files a/DaoExample/src/main/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/DaoExample/src/main/res/layout/main.xml b/DaoExample/src/main/res/layout/main.xml
deleted file mode 100644
index 81641d53..00000000
--- a/DaoExample/src/main/res/layout/main.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout
-	xmlns:android="http://schemas.android.com/apk/res/android"
-	android:orientation="vertical"
-	android:layout_width="fill_parent"
-	android:layout_height="fill_parent">
-	<LinearLayout
-		android:layout_width="fill_parent"
-		android:layout_height="wrap_content"
-		android:id="@+id/linearLayout1"
-		android:orientation="horizontal">
-		<EditText
-			android:layout_height="wrap_content"
-			android:layout_weight="1"
-			android:layout_width="wrap_content"
-			android:inputType="text"
-			android:imeOptions="actionDone"
-			android:id="@+id/editTextNote"
-			android:hint="Enter new note"></EditText>
-		<Button
-			android:layout_height="wrap_content"
-			android:layout_width="wrap_content"
-			android:text="Add"
-			android:id="@+id/buttonAdd"
-			android:onClick="onMyButtonClick"></Button>
-	</LinearLayout>
-	<ListView
-		android:layout_height="wrap_content"
-		android:id="@android:id/list"
-		android:layout_width="fill_parent"></ListView>
-</LinearLayout>
diff --git a/DaoExample/src/main/res/values/strings.xml b/DaoExample/src/main/res/values/strings.xml
deleted file mode 100644
index d044d92d..00000000
--- a/DaoExample/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <string name="app_name">greenDAO Note Example</string>
-</resources>
diff --git a/DaoExampleGenerator/.gitignore b/DaoExampleGenerator/.gitignore
deleted file mode 100644
index 81631c69..00000000
--- a/DaoExampleGenerator/.gitignore
+++ /dev/null
@@ -1,2 +0,0 @@
-/bin
-/build
diff --git a/DaoExampleGenerator/build.gradle b/DaoExampleGenerator/build.gradle
deleted file mode 100644
index 48c83710..00000000
--- a/DaoExampleGenerator/build.gradle
+++ /dev/null
@@ -1,26 +0,0 @@
-apply plugin: 'java'
-apply plugin: 'maven'
-apply plugin:'application'
-
-group = 'de.greenrobot'
-archivesBaseName = 'greendao-example-generator'
-version = '1.4.0-SNAPSHOT'
-sourceCompatibility = 1.6
-mainClassName = "de.greenrobot.daogenerator.gentest.ExampleDaoGenerator"
-
-dependencies {
-    compile project(':DaoGenerator')
-}
-
-sourceSets {
-    main {
-        java {
-            srcDir 'src'
-            srcDir 'src-gen'
-        }
-    }
-}
-
-artifacts {
-    archives jar
-}
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
deleted file mode 100644
index 23d957a7..00000000
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.daogenerator.gentest;
-
-import de.greenrobot.daogenerator.DaoGenerator;
-import de.greenrobot.daogenerator.Entity;
-import de.greenrobot.daogenerator.Property;
-import de.greenrobot.daogenerator.Schema;
-import de.greenrobot.daogenerator.ToMany;
-
-/**
- * Generates entities and DAOs for the example project DaoExample.
- * 
- * Run it as a Java application (not Android).
- * 
- * @author Markus
- */
-public class ExampleDaoGenerator {
-
-    public static void main(String[] args) throws Exception {
-        Schema schema = new Schema(1000, "de.greenrobot.daoexample");
-
-        addNote(schema);
-        addCustomerOrder(schema);
-
-        new DaoGenerator().generateAll(schema, "../DaoExample/src/main/java");
-    }
-
-    private static void addNote(Schema schema) {
-        Entity note = schema.addEntity("Note");
-        note.addIdProperty();
-        note.addStringProperty("text").notNull();
-        note.addStringProperty("comment");
-        note.addDateProperty("date");
-    }
-
-    private static void addCustomerOrder(Schema schema) {
-        Entity customer = schema.addEntity("Customer");
-        customer.addIdProperty();
-        customer.addStringProperty("name").notNull();
-
-        Entity order = schema.addEntity("Order");
-        order.setTableName("ORDERS"); // "ORDER" is a reserved keyword
-        order.addIdProperty();
-        Property orderDate = order.addDateProperty("date").getProperty();
-        Property customerId = order.addLongProperty("customerId").notNull().getProperty();
-        order.addToOne(customer, customerId);
-
-        ToMany customerToOrders = customer.addToMany(order, customerId);
-        customerToOrders.setName("orders");
-        customerToOrders.orderAsc(orderDate);
-    }
-
-}
diff --git a/DaoGenerator/.freemarker-ide.xml b/DaoGenerator/.freemarker-ide.xml
index 43d77411..51a6e307 100644
--- a/DaoGenerator/.freemarker-ide.xml
+++ b/DaoGenerator/.freemarker-ide.xml
@@ -1,31 +1,31 @@
 <config>
 	<context-values>
 		<resource path="src-template/dao-master.ftl">
-			<value key="schema" object-class="de.greenrobot.daogenerator.Schema"/>
+			<value key="schema" object-class="org.greenrobot.greendao.generator.Schema"/>
 		</resource>
 		<resource path="src-template/content-provider.ftl">
-			<value key="entity" object-class="de.greenrobot.daogenerator.Entity"/>
-			<value key="contentProvider" object-class="de.greenrobot.daogenerator.ContentProvider"/>
-			<value key="schema" object-class="de.greenrobot.daogenerator.Schema"/>
+			<value key="entity" object-class="org.greenrobot.greendao.generator.Entity"/>
+			<value key="contentProvider" object-class="org.greenrobot.greendao.generator.ContentProvider"/>
+			<value key="schema" object-class="org.greenrobot.greendao.generator.Schema"/>
 		</resource>
 		<resource path="src-template/dao.ftl">
-			<value key="entity" object-class="de.greenrobot.daogenerator.Entity"/>
-			<value key="schema" object-class="de.greenrobot.daogenerator.Schema"/>
+			<value key="entity" object-class="org.greenrobot.greendao.generator.Entity"/>
+			<value key="schema" object-class="org.greenrobot.greendao.generator.Schema"/>
 		</resource>
 		<resource path="src-template/dao-deep.ftl">
-			<value key="entity" object-class="de.greenrobot.daogenerator.Entity"/>
-			<value key="schema" object-class="de.greenrobot.daogenerator.Schema"/>
+			<value key="entity" object-class="org.greenrobot.greendao.generator.Entity"/>
+			<value key="schema" object-class="org.greenrobot.greendao.generator.Schema"/>
 		</resource>
 		<resource path="src-template/entity.ftl">
-			<value key="entity" object-class="de.greenrobot.daogenerator.Entity"/>
-			<value key="schema" object-class="de.greenrobot.daogenerator.Schema"/>
+			<value key="entity" object-class="org.greenrobot.greendao.generator.Entity"/>
+			<value key="schema" object-class="org.greenrobot.greendao.generator.Schema"/>
 		</resource>
 		<resource path="src-template/dao-unit-test.ftl">
-			<value key="schema" object-class="de.greenrobot.daogenerator.Schema"/>
-			<value key="entity" object-class="de.greenrobot.daogenerator.Entity"/>
+			<value key="schema" object-class="org.greenrobot.greendao.generator.Schema"/>
+			<value key="entity" object-class="org.greenrobot.greendao.generator.Entity"/>
 		</resource>
 		<resource path="template/dao.ftl">
-			<value key="table" object-class="de.greenrobot.daogenerator.Entity"/>
+			<value key="table" object-class="org.greenrobot.greendao.generator.Entity"/>
 		</resource>
 	</context-values>
 	<macro-library>
diff --git a/DaoGenerator/.gitignore b/DaoGenerator/.gitignore
index 90ffd1f9..6a0dc5ea 100644
--- a/DaoGenerator/.gitignore
+++ b/DaoGenerator/.gitignore
@@ -1,5 +1 @@
-/test-out
-/release
-/bin
 /gradle.properties
-/build
diff --git a/DaoGenerator/build.gradle b/DaoGenerator/build.gradle
index 75bc5398..128826cc 100644
--- a/DaoGenerator/build.gradle
+++ b/DaoGenerator/build.gradle
@@ -2,35 +2,18 @@ apply plugin: 'java'
 apply plugin: 'maven'
 apply plugin: 'signing'
 
-group = 'de.greenrobot'
+group = 'org.greenrobot'
 archivesBaseName = 'greendao-generator'
-version = '2.1.0'
+version = rootProject.version
 sourceCompatibility = 1.7
 
-def isSnapshot = version.endsWith('-SNAPSHOT')
-def sonatypeRepositoryUrl
-if(isSnapshot) {
-    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
-} else {
-    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
-}
-
 repositories {
     mavenCentral()
 }
 
-// provided is not supported in Gradle 1.4, see http://issues.gradle.org/browse/GRADLE-784
-// Like this, it won't appear at all in the POM
-configurations {
-    provided
-    deployerJars
-}
-
 dependencies {
     compile 'org.freemarker:freemarker:2.3.23'
     testCompile 'junit:junit:4.12'
-    // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4'
-    deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
 }
 
 sourceSets {
@@ -53,7 +36,7 @@ test {
     doFirst {
         mkdir 'test-out'
     }
-    doLast{
+    doLast {
         delete 'test-out'
     }
 }
@@ -62,8 +45,14 @@ javadoc {
     failOnError = false
     title = "greenDAO Generator ${version} API"
     // Unfinished APIs:
-    excludes = ['de/greenrobot/daogenerator/Query*']
-    options.bottom = 'Available under the GPLv3 - <i>Copyright &#169; 2011-2015 <a href="http://greenrobot.de/">greenrobot.de</a>. All Rights Reserved.</i>'
+    excludes = ['org/greenrobot/daogenerator/Query*']
+    options.bottom = 'Available under the GPLv3 - <i>Copyright &#169; 2011-2017 <a href="http://greenrobot.org/">greenrobot.org</a>. All Rights Reserved.</i>'
+    doLast {
+        copy {
+            from '../javadoc-style/'
+            into "build/docs/javadoc/"
+        }
+    }
 }
 
 task javadocJar(type: Jar, dependsOn: javadoc) {
@@ -82,70 +71,22 @@ artifacts {
     archives sourcesJar
 }
 
-signing {
-    if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&
-    project.hasProperty('signing.secretKeyRingFile')) {
-        sign configurations.archives
-    } else {
-        println "Signing information missing/incomplete for ${project.name}"
-    }
-}
-
 uploadArchives {
     repositories {
         mavenDeployer {
-            if(project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername') 
-                && project.hasProperty('preferedPassword')) {
-                configuration = configurations.deployerJars
-                repository(url: preferedRepo) {
-                    authentication(userName: preferedUsername, password: preferedPassword)
-                }
-            } else if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
-                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
-                repository(url: sonatypeRepositoryUrl) {
-                    authentication(userName: sonatypeUsername, password: sonatypePassword)
+            // Basic definitions are defined in root project
+            pom.project {
+                name 'greenDAO Generator'
+                description 'Code generator for greenDAO, the light and fast ORM for Android'
+
+                licenses {
+                    license {
+                        name 'GNU General Public License, Version 3'
+                        url 'http://www.gnu.org/licenses/gpl.txt'
+                        distribution 'repo'
+                    }
                 }
-            } else {
-                println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}"
             }
-
-            pom.project {
-               name 'greenDAO Generator'
-               packaging 'jar'
-               description 'Code generator for greenDAO, the light and fast ORM for Android'
-               url 'http://greendao-orm.com'
-
-               scm {
-                   url 'https://github.com/greenrobot/greenDAO'
-                   connection 'scm:git@github.com:greenrobot/greenDAO.git'
-                   developerConnection 'scm:git@github.com:greenrobot/greenDAO.git'
-               }
-
-               licenses {
-                   license {
-                       name 'GNU General Public License, Version 3'
-                       url 'http://www.gnu.org/licenses/gpl.txt'
-                       distribution 'repo'
-                   }
-               }
-
-               developers {
-                   developer {
-                       id 'greenrobot'
-                       name 'greenrobot'
-                   }
-               }
-               
-               issueManagement {
-                   system 'GitHub Issues'
-                   url 'https://github.com/greenrobot/greenDAO/issues'
-               }
-               
-               organization {
-                   name 'greenrobot'
-                   url 'http://greenrobot.de'
-               }
-           }
         }
     }
 }
\ No newline at end of file
diff --git a/DaoGenerator/mybuild.xml b/DaoGenerator/mybuild.xml
deleted file mode 100644
index 72ae38f0..00000000
--- a/DaoGenerator/mybuild.xml
+++ /dev/null
@@ -1,80 +0,0 @@
-<!--
-
-Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)     
-                                                                           
-This file is part of greenDAO Generator.                                   
-                                                                           
-greenDAO Generator is free software: you can redistribute it and/or modify 
-it under the terms of the GNU General Public License as published by       
-the Free Software Foundation, either version 3 of the License, or          
-(at your option) any later version.                                        
-greenDAO Generator is distributed in the hope that it will be useful,      
-but WITHOUT ANY WARRANTY; without even the implied warranty of             
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              
-GNU General Public License for more details.                               
-                                                                           
-You should have received a copy of the GNU General Public License          
-along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
-
--->
-<project name="DaoGenerator" default="build-generator">
-
-    <property name="version" value="1.3.0-SNAPSHOT" />
-	
-	<target name="build-generator" depends="delete-release, build-jar, build-javadoc"></target>
-	
-	<target name="delete-release">
-		<delete dir="release" />
-	</target>
-	
-	<target name="build-jar" description="Depends on Eclipse to have everthing compiled into bin/">
-		<mkdir dir="release" />
-		<jar jarfile="release/greenDAO-generator-${version}.jar" basedir="bin"/>
-	</target>
-
-	<target name="build-javadoc" description="Creates javadoc for classes">
-	    <delete dir="release/docs/api" />
-		<mkdir dir="release/docs/api" />
-		<javadoc destdir="release/docs/api" author="false" version="false" use="true" windowtitle="greenDAO generator API">
-		    <packageset dir="src" defaultexcludes="yes">
-	              <include name="de/greenrobot/daogenerator/**"/>
-		    </packageset>
-			<doctitle><![CDATA[<h1>greenDAO generator API</h1>]]></doctitle>
-		    <bottom><![CDATA[<i>Copyright &#169; 2011-2013 greenrobot.de. All Rights Reserved.</i>]]></bottom>
-		</javadoc>
-        <jar jarfile="release/greenDAO-generator-${version}-javadoc.jar" basedir="release/docs/api"/>
-	</target>
-
-    <target name="refresh-example-jars" description="(Also builds DaoCore and DaoGenerator)">
-        <ant antfile="../DaoCore/mybuild.xml" dir="../DaoCore/"/>
-        <antcall target="build-generator"></antcall>
-        <copy file="../DaoCore/release/greenDAO-${version}.jar" todir="../DaoExample/libs" ></copy>
-        <copy file="../DaoCore/release/greenDAO-${version}-javadoc.jar" todir="../DaoExample/docs" ></copy>
-        <copy file="release/greenDAO-generator-${version}.jar" todir="../DaoExampleGenerator/lib" ></copy>
-        <copy file="release/greenDAO-generator-${version}-javadoc.jar" todir="../DaoExampleGenerator/lib" ></copy>
-    </target>
-	
-	<target name="build-starter-package" description="Builds everything">
-    	<delete dir="release/example"/>
-        <antcall target="refresh-example-jars" />
-
-        <copy todir="release/example/javadoc/greendao" >
-            <fileset dir="../DaoCore/release/docs/api/"/>
-        </copy>
-        <copy todir="release/example/javadoc/greendao-generator" >
-            <fileset dir="release/docs/api/"/>
-        </copy>
-        <copy todir="release/example/DaoExample" >
-            <fileset dir="../DaoExample"/>
-        </copy>
-        <copy todir="release/example/DaoExampleGenerator" >
-            <fileset dir="../DaoExampleGenerator"/>
-        </copy>
-        <copy file="../DaoCore/release/greenDAO-${version}.jar" todir="release/example/" ></copy>
-        <copy file="../DaoCore/release/greenDAO-${version}-javadoc.jar" todir="release/example/" ></copy>
-        <copy file="release/greenDAO-generator-${version}.jar" todir="release/example/" ></copy>
-        <copy file="release/greenDAO-generator-${version}-javadoc.jar" todir="release/example/" ></copy>
-    	<zip destfile="release/greenDAO-${version}.zip" basedir="release/example/"></zip>
-    </target>
-
-</project>
diff --git a/DaoGenerator/src-template/content-provider.ftl b/DaoGenerator/src-template/content-provider.ftl
index 93396f73..1d6a3088 100644
--- a/DaoGenerator/src-template/content-provider.ftl
+++ b/DaoGenerator/src-template/content-provider.ftl
@@ -1,3 +1,6 @@
+<#-- @ftlvariable name="entity" type="org.greenrobot.greendao.generator.Entity" -->
+<#-- @ftlvariable name="contentProvider" type="org.greenrobot.greendao.generator.ContentProvider" -->
+<#-- @ftlvariable name="schema" type="org.greenrobot.greendao.generator.Schema" -->
 package ${contentProvider.javaPackage};
 
 import android.content.ContentProvider;
@@ -5,36 +8,35 @@ import android.content.ContentResolver;
 import android.content.ContentValues;
 import android.content.UriMatcher;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteQueryBuilder;
 import android.net.Uri;
 
-import de.greenrobot.dao.DaoLog;
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.database.StandardDatabase;
+import org.greenrobot.greendao.database.Database;
 
-import ${schema.defaultJavaPackageDao}.DaoSession;
+import ${schema.defaultJavaPackageDao}.${schema.prefix}DaoSession;
 import ${entity.javaPackageDao}.${entity.classNameDao};
 
-/* Copy this code snippet into your AndroidManifest.xml inside the
-<application> element:
+/* Copy this code snippet into your AndroidManifest.xml inside the <application> element:
 
     <provider
-            android:name="${contentProvider.javaPackage}.${contentProvider.className}"
-            android:authorities="${contentProvider.authority}"/>
-    */
+        android:name="${contentProvider.javaPackage}.${contentProvider.className}"
+        android:authorities="${contentProvider.authority}" />
+*/
 
-    public class ${contentProvider.className} extends ContentProvider {
+public class ${contentProvider.className} extends ContentProvider {
 
     public static final String AUTHORITY = "${contentProvider.authority}";
     public static final String BASE_PATH = "${contentProvider.basePath}";
     public static final Uri CONTENT_URI = Uri.parse("content://" + AUTHORITY + "/" + BASE_PATH);
     public static final String CONTENT_TYPE = ContentResolver.CURSOR_DIR_BASE_TYPE
-    + "/" + BASE_PATH;
+            + "/" + BASE_PATH;
     public static final String CONTENT_ITEM_TYPE = ContentResolver.CURSOR_ITEM_BASE_TYPE
-    + "/" + BASE_PATH;
+            + "/" + BASE_PATH;
 
     private static final String TABLENAME = ${entity.classNameDao}.TABLENAME;
-    private static final String PK = ${entity.classNameDao}.Properties.${entity.pkProperty.propertyName?cap_first}
-    .columnName;
+    private static final String PK = ${entity.classNameDao}.Properties.${entity.pkProperty.propertyName?cap_first}.columnName;
 
 <#assign counter = 0>
     private static final int ${entity.className?upper_case}_DIR = ${counter};
@@ -43,31 +45,31 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
     private static final UriMatcher sURIMatcher;
 
     static {
-    sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);
-    sURIMatcher.addURI(AUTHORITY, BASE_PATH, ${entity.className?upper_case}_DIR);
-    sURIMatcher.addURI(AUTHORITY, BASE_PATH + "/#", ${entity.className?upper_case}_ID);
+        sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);
+        sURIMatcher.addURI(AUTHORITY, BASE_PATH, ${entity.className?upper_case}_DIR);
+        sURIMatcher.addURI(AUTHORITY, BASE_PATH + "/#", ${entity.className?upper_case}_ID);
     }
 
     /**
     * This must be set from outside, it's recommended to do this inside your Application object.
     * Subject to change (static isn't nice).
     */
-    public static DaoSession daoSession;
+    public static ${schema.prefix}DaoSession daoSession;
 
     @Override
     public boolean onCreate() {
-    // if(daoSession == null) {
-    // throw new IllegalStateException("DaoSession must be set before content provider is created");
-    // }
-    DaoLog.d("Content Provider started: " + CONTENT_URI);
-    return true;
+        // if(daoSession == null) {
+        //     throw new IllegalStateException("${schema.prefix}DaoSession must be set before content provider is created");
+        // }
+        DaoLog.d("Content Provider started: " + CONTENT_URI);
+        return true;
     }
 
-    protected SQLiteDatabase getDatabase() {
-    if(daoSession == null) {
-    throw new IllegalStateException("DaoSession must be set during content provider is active");
-    }
-    return daoSession.getDatabase();
+    protected Database getDatabase() {
+        if(daoSession == null) {
+            throw new IllegalStateException("${schema.prefix}DaoSession must be set during content provider is active");
+        }
+        return daoSession.getDatabase();
     }
 
 <#--
@@ -78,21 +80,22 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
     @Override
     public Uri insert(Uri uri, ContentValues values) {
 <#if contentProvider.isReadOnly()>
-    throw new UnsupportedOperationException("This content provider is readonly");
+        throw new UnsupportedOperationException("This content provider is readonly");
 <#else>
-    int uriType = sURIMatcher.match(uri);
-    long id = 0;
-    String path = "";
-    switch (uriType) {
-    case ${entity.className?upper_case}_DIR:
-    id = getDatabase().insert(TABLENAME, null, values);
-    path = BASE_PATH + "/" + id;
-    break;
-    default:
-    throw new IllegalArgumentException("Unknown URI: " + uri);
-    }
-    getContext().getContentResolver().notifyChange(uri, null);
-    return Uri.parse(path);
+        int uriType = sURIMatcher.match(uri);
+        long id = 0;
+        String path = "";
+        switch (uriType) {
+        case ${entity.className?upper_case}_DIR:
+            id = getDatabase().insert(TABLENAME, null, values);
+            path = BASE_PATH + "/" + id;
+            break;
+        default:
+            throw new IllegalArgumentException("Unknown URI: " + uri);
+        }
+        getContext().getContentResolver().notifyChange(uri, null);
+        return Uri.parse(path);
+
 </#if>
     }
 
@@ -104,114 +107,115 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
     @Override
     public int delete(Uri uri, String selection, String[] selectionArgs) {
 <#if contentProvider.isReadOnly()>
-    throw new UnsupportedOperationException("This content provider is readonly");
+        throw new UnsupportedOperationException("This content provider is readonly");
 <#else>
-    int uriType = sURIMatcher.match(uri);
-    SQLiteDatabase db = getDatabase();
-    int rowsDeleted = 0;
-    String id;
-    switch (uriType) {
-    case ${entity.className?upper_case}_DIR:
-    rowsDeleted = db.delete(TABLENAME, selection, selectionArgs);
-    break;
-    case ${entity.className?upper_case}_ID:
-    id = uri.getLastPathSegment();
-    if (TextUtils.isEmpty(selection)) {
-    rowsDeleted = db.delete(TABLENAME, PK + "=" + id, null);
-    } else {
-    rowsDeleted = db.delete(TABLENAME, PK + "=" + id + " and "
-    + selection, selectionArgs);
-    }
-    break;
-    default:
-    throw new IllegalArgumentException("Unknown URI: " + uri);
-    }
-    getContext().getContentResolver().notifyChange(uri, null);
-    return rowsDeleted;
+        int uriType = sURIMatcher.match(uri);
+        Database db = getDatabase();
+        int rowsDeleted = 0;
+        String id;
+        switch (uriType) {
+        case ${entity.className?upper_case}_DIR:
+                rowsDeleted = db.delete(TABLENAME, selection, selectionArgs);
+                break;
+        case ${entity.className?upper_case}_ID:
+            id = uri.getLastPathSegment();
+            if (TextUtils.isEmpty(selection)) {
+                rowsDeleted = db.delete(TABLENAME, PK + "=" + id, null);
+            } else {
+                rowsDeleted = db.delete(TABLENAME, PK + "=" + id + " and "
+                                + selection, selectionArgs);
+            }
+            break;
+        default:
+            throw new IllegalArgumentException("Unknown URI: " + uri);
+        }
+        getContext().getContentResolver().notifyChange(uri, null);
+        return rowsDeleted;
 </#if>
     }
 
-<#--
+    <#--
 ##########################################
 ########## Update ##############
 ##########################################
 -->
     @Override
     public int update(Uri uri, ContentValues values, String selection,
-    String[] selectionArgs) {
+            String[] selectionArgs) {
 <#if contentProvider.isReadOnly()>
-    throw new UnsupportedOperationException("This content provider is readonly");
+        throw new UnsupportedOperationException("This content provider is readonly");
 <#else>
-    int uriType = sURIMatcher.match(uri);
-    SQLiteDatabase db = getDatabase();
-    int rowsUpdated = 0;
-    String id;
-    switch (uriType) {
-    case ${entity.className?upper_case}_DIR:
-    rowsUpdated = db.update(TABLENAME, values, selection, selectionArgs);
-    break;
-    case ${entity.className?upper_case}_ID:
-    id = uri.getLastPathSegment();
-    if (TextUtils.isEmpty(selection)) {
-    rowsUpdated = db.update(TABLENAME, values, PK + "=" + id, null);
-    } else {
-    rowsUpdated = db.update(TABLENAME, values, PK + "=" + id
-    + " and " + selection, selectionArgs);
-    }
-    break;
-    default:
-    throw new IllegalArgumentException("Unknown URI: " + uri);
-    }
-    getContext().getContentResolver().notifyChange(uri, null);
-    return rowsUpdated;
+        int uriType = sURIMatcher.match(uri);
+        Database db = getDatabase();
+        int rowsUpdated = 0;
+        String id;
+        switch (uriType) {
+        case ${entity.className?upper_case}_DIR:
+            rowsUpdated = db.update(TABLENAME, values, selection, selectionArgs);
+            break;
+        case ${entity.className?upper_case}_ID:
+            id = uri.getLastPathSegment();
+            if (TextUtils.isEmpty(selection)) {
+                    rowsUpdated = db.update(TABLENAME, values, PK + "=" + id, null);
+            } else {
+                    rowsUpdated = db.update(TABLENAME, values, PK + "=" + id
+                                    + " and " + selection, selectionArgs);
+            }
+            break;
+        default:
+            throw new IllegalArgumentException("Unknown URI: " + uri);
+        }
+        getContext().getContentResolver().notifyChange(uri, null);
+        return rowsUpdated;
 </#if>
     }
-<#--
+
+     <#--
 ##########################################
 ########## Query ##############
 ##########################################
 -->
     @Override
     public Cursor query(Uri uri, String[] projection, String selection,
-    String[] selectionArgs, String sortOrder) {
-
-    SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
-    int uriType = sURIMatcher.match(uri);
-    switch (uriType) {
-    case ${entity.className?upper_case}_DIR:
-    queryBuilder.setTables(TABLENAME);
-    break;
-    case ${entity.className?upper_case}_ID:
-    queryBuilder.setTables(TABLENAME);
-    queryBuilder.appendWhere(PK + "="
-    + uri.getLastPathSegment());
-    break;
-    default:
-    throw new IllegalArgumentException("Unknown URI: " + uri);
-    }
-
-    SQLiteDatabase db = getDatabase();
-    Cursor cursor = queryBuilder.query(db, projection, selection,
-    selectionArgs, null, null, sortOrder);
-    cursor.setNotificationUri(getContext().getContentResolver(), uri);
-
-    return cursor;
-    }
-
-<#--
+            String[] selectionArgs, String sortOrder) {
+
+        SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
+        int uriType = sURIMatcher.match(uri);
+        switch (uriType) {
+        case ${entity.className?upper_case}_DIR:
+            queryBuilder.setTables(TABLENAME);
+            break;
+        case ${entity.className?upper_case}_ID:
+            queryBuilder.setTables(TABLENAME);
+            queryBuilder.appendWhere(PK + "="
+                    + uri.getLastPathSegment());
+            break;
+        default:
+            throw new IllegalArgumentException("Unknown URI: " + uri);
+        }
+
+        Database db = getDatabase();
+        Cursor cursor = queryBuilder.query(((StandardDatabase) db).getSQLiteDatabase(), projection, selection,
+                selectionArgs, null, null, sortOrder);
+        cursor.setNotificationUri(getContext().getContentResolver(), uri);
+
+        return cursor;
+    }
+
+    <#--
 ##########################################
 ########## GetType ##############
 ##########################################
 -->
     @Override
     public final String getType(Uri uri) {
-    switch (sURIMatcher.match(uri)) {
-    case ${entity.className?upper_case}_DIR:
-    return CONTENT_TYPE;
-    case ${entity.className?upper_case}_ID:
-    return CONTENT_ITEM_TYPE;
-    default :
-    throw new IllegalArgumentException("Unsupported URI: " + uri);
-    }
-    }
-    }
+        switch (sURIMatcher.match(uri)) {
+        case ${entity.className?upper_case}_DIR:
+            return CONTENT_TYPE;
+        case ${entity.className?upper_case}_ID:
+            return CONTENT_ITEM_TYPE;
+        default :
+            throw new IllegalArgumentException("Unsupported URI: " + uri);
+        }
+    }
+}
diff --git a/DaoGenerator/src-template/dao-deep.ftl b/DaoGenerator/src-template/dao-deep.ftl
index 35123713..2a447654 100644
--- a/DaoGenerator/src-template/dao-deep.ftl
+++ b/DaoGenerator/src-template/dao-deep.ftl
@@ -31,10 +31,10 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
             builder.append(',');
 </#if>
 </#list>
-            builder.append(" FROM ${entity.tableName} T");
+            builder.append(" FROM ${entity.dbName} T");
 <#list entity.toOneRelations as toOne>
-            builder.append(" LEFT JOIN ${toOne.targetEntity.tableName} T${toOne_index}<#--
---> ON T.\"${toOne.fkProperties[0].columnName}\"=T${toOne_index}.\"${toOne.targetEntity.pkProperty.columnName}\"");
+            builder.append(" LEFT JOIN ${toOne.targetEntity.dbName} T${toOne_index}<#--
+--> ON T.\"${toOne.fkProperties[0].dbName}\"=T${toOne_index}.\"${toOne.targetEntity.pkProperty.dbName}\"");
 </#list>
             builder.append(' ');
             selectDeep = builder.toString();
diff --git a/DaoGenerator/src-template/dao-master.ftl b/DaoGenerator/src-template/dao-master.ftl
index adaffc48..5cc3111d 100644
--- a/DaoGenerator/src-template/dao-master.ftl
+++ b/DaoGenerator/src-template/dao-master.ftl
@@ -1,6 +1,6 @@
 <#--
 
-Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)     
+Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
                                                                            
 This file is part of greenDAO Generator.                                   
                                                                            
@@ -17,85 +17,115 @@ You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
+<#-- @ftlvariable name="schema" type="org.greenrobot.greendao.generator.Schema" -->
 package ${schema.defaultJavaPackageDao};
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteDatabase.CursorFactory;
-import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
-import de.greenrobot.dao.AbstractDaoMaster;
-import de.greenrobot.dao.identityscope.IdentityScopeType;
+
+import org.greenrobot.greendao.AbstractDaoMaster;
+import org.greenrobot.greendao.database.StandardDatabase;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseOpenHelper;
+import org.greenrobot.greendao.identityscope.IdentityScopeType;
 
 <#list schema.entities as entity>
+<#if schema.defaultJavaPackageDao != entity.javaPackageDao>
 import ${entity.javaPackageDao}.${entity.classNameDao};
+</#if>
 </#list>
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
+/**
  * Master of DAO (schema version ${schema.version?c}): knows all DAOs.
-*/
-public class DaoMaster extends AbstractDaoMaster {
+ */
+public class ${schema.prefix}DaoMaster extends AbstractDaoMaster {
     public static final int SCHEMA_VERSION = ${schema.version?c};
 
     /** Creates underlying database table using DAOs. */
-    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createAllTables(Database db, boolean ifNotExists) {
 <#list schema.entities as entity>
-<#if !entity.skipTableCreation>
+<#if !entity.skipCreationInDb>
         ${entity.classNameDao}.createTable(db, ifNotExists);
 </#if>
 </#list>
     }
-    
+
     /** Drops underlying database table using DAOs. */
-    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
+    public static void dropAllTables(Database db, boolean ifExists) {
 <#list schema.entities as entity>
-<#if !entity.skipTableCreation>
+<#if !entity.skipCreationInDb>
         ${entity.classNameDao}.dropTable(db, ifExists);
 </#if>
 </#list>
     }
-    
-    public static abstract class OpenHelper extends SQLiteOpenHelper {
+
+    /**
+     * WARNING: Drops all table on Upgrade! Use only during development.
+     * Convenience method using a {@link DevOpenHelper}.
+     */
+    public static ${schema.prefix}DaoSession newDevSession(Context context, String name) {
+        Database db = new DevOpenHelper(context, name).getWritableDb();
+        ${schema.prefix}DaoMaster daoMaster = new ${schema.prefix}DaoMaster(db);
+        return daoMaster.newSession();
+    }
+
+    public ${schema.prefix}DaoMaster(SQLiteDatabase db) {
+        this(new StandardDatabase(db));
+    }
+
+    public ${schema.prefix}DaoMaster(Database db) {
+        super(db, SCHEMA_VERSION);
+<#list schema.entities as entity>
+        registerDaoClass(${entity.classNameDao}.class);
+</#list>
+    }
+
+    public ${schema.prefix}DaoSession newSession() {
+        return new ${schema.prefix}DaoSession(db, IdentityScopeType.Session, daoConfigMap);
+    }
+
+    public ${schema.prefix}DaoSession newSession(IdentityScopeType type) {
+        return new ${schema.prefix}DaoSession(db, type, daoConfigMap);
+    }
+
+    /**
+     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
+     */
+    public static abstract class OpenHelper extends DatabaseOpenHelper {
+        public OpenHelper(Context context, String name) {
+            super(context, name, SCHEMA_VERSION);
+        }
 
         public OpenHelper(Context context, String name, CursorFactory factory) {
             super(context, name, factory, SCHEMA_VERSION);
         }
 
         @Override
-        public void onCreate(SQLiteDatabase db) {
+        public void onCreate(Database db) {
             Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
             createAllTables(db, false);
         }
     }
-    
+
     /** WARNING: Drops all table on Upgrade! Use only during development. */
     public static class DevOpenHelper extends OpenHelper {
+        public DevOpenHelper(Context context, String name) {
+            super(context, name);
+        }
+
         public DevOpenHelper(Context context, String name, CursorFactory factory) {
             super(context, name, factory);
         }
 
         @Override
-        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        public void onUpgrade(Database db, int oldVersion, int newVersion) {
             Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
             dropAllTables(db, true);
             onCreate(db);
         }
     }
 
-    public DaoMaster(SQLiteDatabase db) {
-        super(db, SCHEMA_VERSION);
-<#list schema.entities as entity>
-        registerDaoClass(${entity.classNameDao}.class);
-</#list>
-    }
-    
-    public DaoSession newSession() {
-        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
-    }
-    
-    public DaoSession newSession(IdentityScopeType type) {
-        return new DaoSession(db, type, daoConfigMap);
-    }
-    
 }
diff --git a/DaoGenerator/src-template/dao-session.ftl b/DaoGenerator/src-template/dao-session.ftl
index e0201a48..62da9f7f 100644
--- a/DaoGenerator/src-template/dao-session.ftl
+++ b/DaoGenerator/src-template/dao-session.ftl
@@ -19,14 +19,13 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 -->
 package ${schema.defaultJavaPackageDao};
 
-import android.database.sqlite.SQLiteDatabase;
-
 import java.util.Map;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.AbstractDaoSession;
-import de.greenrobot.dao.identityscope.IdentityScopeType;
-import de.greenrobot.dao.internal.DaoConfig;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.AbstractDaoSession;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.identityscope.IdentityScopeType;
+import org.greenrobot.greendao.internal.DaoConfig;
 
 <#list schema.entities as entity>
 import ${entity.javaPackage}.${entity.className};
@@ -41,9 +40,9 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
 /**
  * {@inheritDoc}
  * 
- * @see de.greenrobot.dao.AbstractDaoSession
+ * @see org.greenrobot.greendao.AbstractDaoSession
  */
-public class DaoSession extends AbstractDaoSession {
+public class ${schema.prefix}DaoSession extends AbstractDaoSession {
 
 <#list schema.entities as entity>
     private final DaoConfig ${entity.classNameDao?uncap_first}Config;
@@ -53,7 +52,7 @@ public class DaoSession extends AbstractDaoSession {
     private final ${entity.classNameDao} ${entity.classNameDao?uncap_first};
 </#list>        
 
-    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
+    public ${schema.prefix}DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
         super(db);
 
@@ -74,7 +73,7 @@ public class DaoSession extends AbstractDaoSession {
     
     public void clear() {
 <#list schema.entities as entity>
-        ${entity.classNameDao?uncap_first}Config.getIdentityScope().clear();
+        ${entity.classNameDao?uncap_first}Config.clearIdentityScope();
 </#list>    
     }
 
diff --git a/DaoGenerator/src-template/dao-unit-test.ftl b/DaoGenerator/src-template/dao-unit-test.ftl
index 9e9d9c51..0480ca70 100644
--- a/DaoGenerator/src-template/dao-unit-test.ftl
+++ b/DaoGenerator/src-template/dao-unit-test.ftl
@@ -21,9 +21,9 @@ package ${entity.javaPackageTest};
 
 <#assign isStringPK = entity.pkProperty?? && entity.pkProperty.propertyType == "String" />
 <#if isStringPK>
-import de.greenrobot.dao.test.AbstractDaoTestStringPk;
+import org.greenrobot.greendao.test.AbstractDaoTestStringPk;
 <#else>
-import de.greenrobot.dao.test.AbstractDaoTestLongPk;
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
 </#if>
 
 import ${entity.javaPackage}.${entity.className};
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 60f7045b..08eb4eee 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -1,6 +1,6 @@
 <#--
 
-Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
                                                                            
 This file is part of greenDAO Generator.                                   
                                                                            
@@ -17,6 +17,9 @@ You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
+<#-- @ftlvariable name="entity" type="org.greenrobot.greendao.generator.Entity" -->
+<#-- @ftlvariable name="schema" type="org.greenrobot.greendao.generator.Schema" -->
+
 <#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long" } />
 <#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long"  } />
 package ${entity.javaPackageDao};
@@ -28,22 +31,23 @@ import java.util.List;
 import java.util.ArrayList;
 </#if>
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
 <#if entity.toOneRelations?has_content>
-import de.greenrobot.dao.internal.SqlUtils;
+import org.greenrobot.greendao.internal.SqlUtils;
 </#if>
-import de.greenrobot.dao.internal.DaoConfig;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 <#if entity.incomingToManyRelations?has_content>
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.query.QueryBuilder;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.query.QueryBuilder;
 </#if>
 
 <#if entity.javaPackageDao != schema.defaultJavaPackageDao>
-import ${schema.defaultJavaPackageDao}.DaoSession;
+import ${schema.defaultJavaPackageDao}.${schema.prefix}DaoSession;
 
 </#if>
 <#if entity.additionalImportsDao?has_content>
@@ -52,31 +56,34 @@ import ${additionalImport};
 </#list>
 
 </#if>
+<#if entity.javaPackageDao != entity.javaPackage>
 import ${entity.javaPackage}.${entity.className};
+
+</#if>
 <#if entity.protobuf>
 import ${entity.javaPackage}.${entity.className}.Builder;
-</#if>
 
+</#if>
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
- * DAO for table "${entity.tableName}".
+ * DAO for table "${entity.dbName}".
 */
 public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${entity.pkType}> {
 
-    public static final String TABLENAME = "${entity.tableName}";
+    public static final String TABLENAME = "${entity.dbName}";
 
     /**
      * Properties of entity ${entity.className}.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
 <#list entity.propertiesColumns as property>
-        public final static Property ${property.propertyName?cap_first} = new Property(${property_index}, ${property.javaType}.class, "${property.propertyName}", ${property.primaryKey?string}, "${property.columnName}");
+        public final static Property ${property.propertyName?cap_first} = new Property(${property_index}, ${property.javaType}.class, "${property.propertyName}", ${property.primaryKey?string}, "${property.dbName}");
 </#list>
-    };
+    }
 
 <#if entity.active>
-    private DaoSession daoSession;
+    private ${schema.prefix}DaoSession daoSession;
 
 </#if>
 <#list entity.properties as property><#if property.customType?has_content><#--
@@ -90,41 +97,42 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
         super(config);
     }
     
-    public ${entity.classNameDao}(DaoConfig config, DaoSession daoSession) {
+    public ${entity.classNameDao}(DaoConfig config, ${schema.prefix}DaoSession daoSession) {
         super(config, daoSession);
 <#if entity.active>        
         this.daoSession = daoSession;
 </#if>
     }
 
-<#if !entity.skipTableCreation>
+<#if !entity.skipCreationInDb>
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "\"${entity.tableName}\" (" + //
+        db.execSQL("CREATE TABLE " + constraint + "\"${entity.dbName}\" (" + //
 <#list entity.propertiesColumns as property>
-                "\"${property.columnName}\" ${property.columnType}<#if property.constraints??> ${property.constraints} </#if><#if property_has_next>," +<#else>);");</#if> // ${property_index}: ${property.propertyName}
+                "\"${property.dbName}\" ${property.dbType}<#if property.constraints??> ${property.constraints} </#if><#if property_has_next>," +<#else>);");</#if> // ${property_index}: ${property.propertyName}
 </#list>
 <#if entity.indexes?has_content >
         // Add Indexes
 <#list entity.indexes as index>
-        db.execSQL("CREATE <#if index.unique>UNIQUE </#if>INDEX " + constraint + "${index.name} ON ${entity.tableName}" +
+        db.execSQL("CREATE <#if index.unique>UNIQUE </#if>INDEX " + constraint + "${index.name} ON \"${entity.dbName}\"" +
                 " (<#list index.properties 
-as property>\"${property.columnName}\"<#if property_has_next>,</#if></#list>);");
+as property>\"${property.dbName}\"<#if (index.propertiesOrder[property_index])??> ${index.propertiesOrder[property_index]}</#if><#sep>,</#list>);");
 </#list>
 </#if>         
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
-        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"${entity.tableName}\"";
+    public static void dropTable(Database db, boolean ifExists) {
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"${entity.dbName}\"";
         db.execSQL(sql);
     }
 
 </#if>
-    /** @inheritdoc */
+<#assign stmtTypes = ["DatabaseStatement", "SQLiteStatement"] />
+<#list stmtTypes as stmtType>
     @Override
-    protected void bindValues(SQLiteStatement stmt, ${entity.className} entity) {
+    protected final void bindValues(${stmtType} stmt, ${entity.className} entity) {
         stmt.clearBindings();
 <#list entity.properties as property>
 <#if property.notNull || entity.protobuf>
@@ -159,15 +167,15 @@ as property>\"${property.columnName}\"<#if property_has_next>,</#if></#list>);")
 </#list>
     }
 
-<#if entity.active>
+</#list>
+<#if entity.active && !entity.protobuf>
     @Override
-    protected void attachEntity(${entity.className} entity) {
+    protected final void attachEntity(${entity.className} entity) {
         super.attachEntity(entity);
         entity.__setDaoSession(daoSession);
     }
 
 </#if>
-    /** @inheritdoc */
     @Override
     public ${entity.pkType} readKey(Cursor cursor, int offset) {
 <#if entity.pkProperty??>
@@ -181,7 +189,6 @@ as property>\"${property.columnName}\"<#if property_has_next>,</#if></#list>);")
 </#if>  
     }    
 
-    /** @inheritdoc */
     @Override
     public ${entity.className} readEntity(Cursor cursor, int offset) {
 <#if entity.protobuf>
@@ -217,7 +224,6 @@ as property>\"${property.columnName}\"<#if property_has_next>,</#if></#list>);")
 </#if>
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, ${entity.className} entity, int offset) {
 <#if entity.protobuf>
@@ -230,9 +236,8 @@ as property>\"${property.columnName}\"<#if property_has_next>,</#if></#list>);")
 </#if>
      }
     
-    /** @inheritdoc */
     @Override
-    protected ${entity.pkType} updateKeyAfterInsert(${entity.className} entity, long rowId) {
+    protected final ${entity.pkType} updateKeyAfterInsert(${entity.className} entity, long rowId) {
 <#if entity.pkProperty??>
 <#if entity.pkProperty.propertyType == "Long">
 <#if !entity.protobuf>
@@ -248,7 +253,6 @@ as property>\"${property.columnName}\"<#if property_has_next>,</#if></#list>);")
 </#if>
     }
     
-    /** @inheritdoc */
     @Override
     public ${entity.pkType} getKey(${entity.className} entity) {
 <#if entity.pkProperty??>
@@ -262,9 +266,26 @@ as property>\"${property.columnName}\"<#if property_has_next>,</#if></#list>);")
 </#if>    
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(${entity.className} entity) {
+<#if entity.pkProperty??>
+<#if entity.pkProperty.notNull>
+        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
+<#else>
+<#if entity.protobuf>
+        return entity.has${entity.pkProperty.propertyName?cap_first}();
+<#else>
+        return entity.get${entity.pkProperty.propertyName?cap_first}() != null;
+</#if>
+</#if>
+<#else>
+        // TODO
+        return false;
+</#if>
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return ${(!entity.protobuf)?string};
     }
     
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 0e383d84..f23cfc8f 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -1,6 +1,6 @@
 <#--
 
-Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
                                                                            
 This file is part of greenDAO Generator.                                   
                                                                            
@@ -17,17 +17,29 @@ You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
+<#-- @ftlvariable name="entity" type="org.greenrobot.greendao.generator.Entity" -->
+<#-- @ftlvariable name="schema" type="org.greenrobot.greendao.generator.Schema" -->
+
 <#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
 <#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
-<#assign complexTypes = ["String", "ByteArray", "Date"]/>
+<#assign primitiveTypes = ["boolean", "byte", "int", "long", "float", "double", "short"]/>
+<#macro multiIndexes>
+{
+<#list entity.multiIndexes as index>
+    @Index(value = "${index.orderSpec}"<#if index.nonDefaultName>, name = "${index.name}"</#if><#if index.unique>, unique = true</#if>)<#sep>,
+</#list>
+
+}</#macro>
 package ${entity.javaPackage};
 
+import org.greenrobot.greendao.annotation.*;
+
 <#if entity.toManyRelations?has_content>
 import java.util.List;
 </#if>
 <#if entity.active>
-import ${schema.defaultJavaPackageDao}.DaoSession;
-import de.greenrobot.dao.DaoException;
+import ${schema.defaultJavaPackageDao}.${schema.prefix}DaoSession;
+import org.greenrobot.greendao.DaoException;
 
 </#if>
 <#if entity.additionalImportsEntity?has_content>
@@ -42,54 +54,123 @@ import ${additionalImport};
 // KEEP INCLUDES - put your custom includes here
 <#if keepIncludes?has_content>${keepIncludes!}</#if>// KEEP INCLUDES END
 <#else>
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 </#if>
-<#if entity.javaDoc ??>
 
+<#if entity.javaDoc ??>
 ${entity.javaDoc}
 <#else>
 /**
- * Entity mapped to table "${entity.tableName}".
+ * Entity mapped to table "${entity.dbName}".
  */
 </#if>
 <#if entity.codeBeforeClass ??>
 ${entity.codeBeforeClass}
 </#if>
+<#assign entityAttrs = []>
+<#if schema.name != "default"><#assign entityAttrs = entityAttrs + ["schema = \"${schema.name}\""]></#if>
+<#if entity.active><#assign entityAttrs = entityAttrs + ["active = true"]></#if>
+<#if entity.nonDefaultDbName><#assign entityAttrs = entityAttrs + ["nameInDb = \"${entity.dbName}\""]></#if>
+<#if (entity.multiIndexes?size > 0)>
+    <#assign idxAttr>indexes = <@multiIndexes/></#assign>
+    <#assign entityAttrs = entityAttrs + [idxAttr]>
+</#if>
+<#if entity.skipCreationInDb><#assign entityAttrs = entityAttrs + ["createInDb = false"]></#if>
+@Entity<#if (entityAttrs?size > 0)>(${entityAttrs?join(", ")})</#if>
 public class ${entity.className}<#if
 entity.superclass?has_content> extends ${entity.superclass} </#if><#if
 entity.interfacesToImplement?has_content> implements <#list entity.interfacesToImplement
 as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
-
 <#list entity.properties as property>
-<#if property.notNull && complexTypes?seq_contains(property.propertyType)>
-    /** Not-null value. */
+<#assign notNull = property.notNull && !primitiveTypes?seq_contains(property.javaTypeInEntity)>
+<#if property.primaryKey||notNull||property.unique||property.index??||property.nonDefaultDbName||property.converter??>
+
 </#if>
 <#if property.javaDocField ??>
 ${property.javaDocField}
 </#if>
 <#if property.codeBeforeField ??>
-     ${property.codeBeforeField}
+    ${property.codeBeforeField}
+</#if>
+<#if property.primaryKey>
+    @Id<#if property.autoincrement>(autoincrement = true)</#if>
+</#if>
+<#if property.nonDefaultDbName>
+    @Property(nameInDb = "${property.dbName}")
+</#if>
+<#if property.converter??>
+    @Convert(converter = ${property.converter}.class, columnType = ${property.javaType}.class)
+</#if>
+<#if notNull>
+    @NotNull
+</#if>
+<#if property.unique>
+    @Unique
+</#if>
+<#if ((property.index.nonDefaultName)!false) && (property.index.unique)!false>
+    @Index(name = "${property.index.name}", unique = true)
+<#elseif (property.index.nonDefaultName)!false>
+    @Index(name = "${property.index.name}")
+<#elseif (property.index.unique)!false>
+    @Index(unique = true)
+<#elseif property.index??>
+    @Index
 </#if>
     private ${property.javaTypeInEntity} ${property.propertyName};
 </#list>
 
 <#if entity.active>
     /** Used to resolve relations */
-    private transient DaoSession daoSession;
+    @Generated
+    private transient ${schema.prefix}DaoSession daoSession;
 
     /** Used for active entity operations. */
+    @Generated
     private transient ${entity.classNameDao} myDao;
-
 <#list entity.toOneRelations as toOne>
-    private ${toOne.targetEntity.className} ${toOne.name};
+
 <#if toOne.useFkProperty>
-    private ${toOne.resolvedKeyJavaType[0]} ${toOne.name}__resolvedKey;
+    @ToOne(joinProperty = "${toOne.fkProperties[0].propertyName}")
+    private ${toOne.targetEntity.className} ${toOne.name};
+
+    @Generated
+    private transient ${toOne.resolvedKeyJavaType[0]} ${toOne.name}__resolvedKey;
 <#else>
-    private boolean ${toOne.name}__refreshed;
+    @ToOne
+<#if toOne.fkProperties[0].nonDefaultDbName>
+    @Property(nameInDb = "${toOne.fkProperties[0].dbName}")
+</#if>
+<#if toOne.fkProperties[0].unique>
+    @Unique
+</#if>
+<#if toOne.fkProperties[0].notNull>
+    @NotNull
 </#if>
+    private ${toOne.targetEntity.className} ${toOne.name};
 
+    @Generated
+    private transient boolean ${toOne.name}__refreshed;
+</#if>
 </#list>
 <#list entity.toManyRelations as toMany>
+
+<#if toMany.sourceProperties??>
+    @ToMany(joinProperties = {
+<#list toMany.sourceProperties as sourceProperty>
+        @JoinProperty(name = "${sourceProperty.propertyName}", referencedName = "${toMany.targetProperties[sourceProperty_index].propertyName}")<#sep>,
+</#list>
+
+    })
+<#elseif toMany.targetProperties??>
+    @ToMany(mappedBy = "${toMany.targetProperties[0]}")
+<#else>
+    @ToMany
+    @JoinEntity(entity = ${toMany.joinEntity.className}.class, sourceProperty = "${toMany.sourceProperty.propertyName}", targetProperty = "${toMany.targetProperty.propertyName}")
+</#if>
+<#assign orderSpec = (toMany.orderSpec)!"0">
+<#if orderSpec != "0">
+    @OrderBy("${orderSpec}")
+</#if>
     private List<${toMany.targetEntity.className}> ${toMany.name};
 </#list>
 
@@ -100,6 +181,7 @@ ${keepFields!}    // KEEP FIELDS END
 
 </#if>
 <#if entity.constructors>
+    @Generated
     public ${entity.className}() {
     }
 <#if entity.propertiesPk?has_content && entity.propertiesPk?size != entity.properties?size>
@@ -112,6 +194,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     }
 </#if>
 
+    @Generated
     public ${entity.className}(<#list entity.properties as
 property>${property.javaTypeInEntity} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
 <#list entity.properties as property>
@@ -122,27 +205,28 @@ property>${property.javaTypeInEntity} ${property.propertyName}<#if property_has_
 
 <#if entity.active>
     /** called by internal mechanisms, do not call yourself. */
-    public void __setDaoSession(DaoSession daoSession) {
+    @Generated
+    public void __setDaoSession(${schema.prefix}DaoSession daoSession) {
         this.daoSession = daoSession;
         myDao = daoSession != null ? daoSession.get${entity.classNameDao?cap_first}() : null;
     }
 
 </#if>
 <#list entity.properties as property>
-<#if property.notNull && complexTypes?seq_contains(property.propertyType)>
-    /** Not-null value. */
-</#if>
 <#if property.javaDocGetter ??>
 ${property.javaDocGetter}
 </#if>
 <#if property.codeBeforeGetter ??>
     ${property.codeBeforeGetter}
+</#if>
+<#if property.notNull && !primitiveTypes?seq_contains(property.javaTypeInEntity)>
+    @NotNull
 </#if>
     public ${property.javaTypeInEntity} get${property.propertyName?cap_first}() {
         return ${property.propertyName};
     }
 
-<#if property.notNull && complexTypes?seq_contains(property.propertyType)>
+<#if property.notNull && !primitiveTypes?seq_contains(property.javaTypeInEntity)>
     /** Not-null value; ensure this value is available before it is saved to the database. */
 </#if>
 <#if property.javaDocSetter ??>
@@ -151,7 +235,7 @@ ${property.javaDocSetter}
 <#if property.codeBeforeSetter ??>
     ${property.codeBeforeSetter}
 </#if>
-    public void set${property.propertyName?cap_first}(${property.javaTypeInEntity} ${property.propertyName}) {
+    public void set${property.propertyName?cap_first}(<#if property.notNull && !primitiveTypes?seq_contains(property.javaTypeInEntity)>@NotNull </#if>${property.javaTypeInEntity} ${property.propertyName}) {
         this.${property.propertyName} = ${property.propertyName};
     }
 
@@ -163,15 +247,14 @@ ${property.javaDocSetter}
 -->
 <#list entity.toOneRelations as toOne>
     /** To-one relationship, resolved on first access. */
+    @Generated
     public ${toOne.targetEntity.className} get${toOne.name?cap_first}() {
 <#if toOne.useFkProperty>
         ${toOne.fkProperties[0].javaType} __key = this.${toOne.fkProperties[0].propertyName};
         if (${toOne.name}__resolvedKey == null || <#--
         --><#if toOne.resolvedKeyUseEquals[0]>!${toOne.name}__resolvedKey.equals(__key)<#--
         --><#else>${toOne.name}__resolvedKey != __key</#if>) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
+            __throwIfDetached();
             ${toOne.targetEntity.classNameDao} targetDao = daoSession.get${toOne.targetEntity.classNameDao?cap_first}();
             ${toOne.targetEntity.className} ${toOne.name}New = targetDao.load(__key);
             synchronized (this) {
@@ -181,9 +264,7 @@ ${property.javaDocSetter}
         }
 <#else>
         if (${toOne.name} != null || !${toOne.name}__refreshed) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
+            __throwIfDetached();
             ${toOne.targetEntity.classNameDao} targetDao = daoSession.get${toOne.targetEntity.classNameDao?cap_first}();
             targetDao.refresh(${toOne.name});
             ${toOne.name}__refreshed = true;
@@ -194,12 +275,14 @@ ${property.javaDocSetter}
 <#if !toOne.useFkProperty>
 
     /** To-one relationship, returned entity is not refreshed and may carry only the PK property. */
+    @Generated
     public ${toOne.targetEntity.className} peak${toOne.name?cap_first}() {
         return ${toOne.name};
     }
 </#if>
 
-    public void set${toOne.name?cap_first}(${toOne.targetEntity.className} ${toOne.name}) {
+    @Generated
+    public void set${toOne.name?cap_first}(<#if toOne.fkProperties[0].notNull && !primitiveTypes?seq_contains(toOne.fkProperties[0].javaTypeInEntity)>@NotNull </#if>${toOne.targetEntity.className} ${toOne.name}) {
 <#if toOne.fkProperties[0].notNull>
         if (${toOne.name} == null) {
             throw new DaoException("To-one property '${toOne.fkProperties[0].propertyName}' has not-null constraint; cannot set to-one to null");
@@ -224,11 +307,10 @@ ${property.javaDocSetter}
 -->
 <#list entity.toManyRelations as toMany>
     /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
+    @Generated
     public List<${toMany.targetEntity.className}> get${toMany.name?cap_first}() {
         if (${toMany.name} == null) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
+            __throwIfDetached();
             ${toMany.targetEntity.classNameDao} targetDao = daoSession.get${toMany.targetEntity.classNameDao?cap_first}();
             List<${toMany.targetEntity.className}> ${toMany.name}New = targetDao._query${toMany.sourceEntity.className?cap_first}_${toMany.name?cap_first}(<#--
                 --><#if toMany.sourceProperties??><#list toMany.sourceProperties as property>${property.propertyName}<#if property_has_next>, </#if></#list><#else><#--
@@ -243,6 +325,7 @@ ${property.javaDocSetter}
     }
 
     /** Resets a to-many relationship, making the next get call to query for a fresh result. */
+    @Generated
     public synchronized void reset${toMany.name?cap_first}() {
         ${toMany.name} = null;
     }
@@ -254,28 +337,41 @@ ${property.javaDocSetter}
 ##########################################
 -->
 <#if entity.active>
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void delete() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
+        __throwIfDetached();
         myDao.delete(this);
     }
 
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void update() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
+        __throwIfDetached();
         myDao.update(this);
     }
 
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void refresh() {
+        __throwIfDetached();
+        myDao.refresh(this);
+    }
+
+    @Generated
+    private void __throwIfDetached() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.refresh(this);
+        }
     }
 
 </#if>
diff --git a/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java b/DaoGenerator/src-test/org/greenrobot/greendao/generator/SimpleDaoGeneratorTest.java
similarity index 75%
rename from DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
rename to DaoGenerator/src-test/org/greenrobot/greendao/generator/SimpleDaoGeneratorTest.java
index b1a9f583..7567169d 100644
--- a/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
+++ b/DaoGenerator/src-test/org/greenrobot/greendao/generator/SimpleDaoGeneratorTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,28 +11,26 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daogenerator.test;
 
-import de.greenrobot.daogenerator.DaoGenerator;
-import de.greenrobot.daogenerator.DaoUtil;
-import de.greenrobot.daogenerator.Entity;
-import de.greenrobot.daogenerator.Property;
-import de.greenrobot.daogenerator.Schema;
+package org.greenrobot.greendao.generator;
+
 import org.junit.Test;
 
 import java.io.File;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 public class SimpleDaoGeneratorTest {
 
     @Test
     public void testMinimalSchema() throws Exception {
-        Schema schema = new Schema(1, "de.greenrobot.testdao");
+        Schema schema = new Schema(1, "org.greenrobot.testdao");
         Entity addressEntity = schema.addEntity("Addresse");
         Property idProperty = addressEntity.addIdProperty().getProperty();
         addressEntity.addIntProperty("count").index();
@@ -40,11 +38,14 @@ public void testMinimalSchema() throws Exception {
         assertEquals(1, schema.getEntities().size());
         assertEquals(3, addressEntity.getProperties().size());
 
-        File daoFile = new File("test-out/de/greenrobot/testdao/" + addressEntity.getClassName() + "Dao.java");
+        File outputDir = new File("build/test-out");
+        outputDir.mkdirs();
+
+        File daoFile = new File(outputDir, "org/greenrobot/testdao/" + addressEntity.getClassName() + "Dao.java");
         daoFile.delete();
         assertFalse(daoFile.exists());
 
-        new DaoGenerator().generateAll(schema, "test-out");
+        new DaoGenerator().generateAll(schema, outputDir.getPath());
 
         assertEquals("PRIMARY KEY", idProperty.getConstraints());
         assertTrue(daoFile.toString(), daoFile.exists());
@@ -61,7 +62,7 @@ public void testDbName() {
 
     @Test(expected = RuntimeException.class)
     public void testInterfacesError() throws Exception {
-        Schema schema = new Schema(1, "de.greenrobot.testdao");
+        Schema schema = new Schema(1, "org.greenrobot.testdao");
         Entity addressTable = schema.addEntity("Addresse");
         addressTable.implementsInterface("Dummy");
         addressTable.implementsInterface("Dummy");
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/ContentProvider.java b/DaoGenerator/src/org/greenrobot/greendao/generator/ContentProvider.java
similarity index 66%
rename from DaoGenerator/src/de/greenrobot/daogenerator/ContentProvider.java
rename to DaoGenerator/src/org/greenrobot/greendao/generator/ContentProvider.java
index 8fd0a28a..46ba91f6 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/ContentProvider.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/ContentProvider.java
@@ -1,7 +1,26 @@
-package de.greenrobot.daogenerator;
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.generator;
 
 import java.util.List;
 
+@SuppressWarnings("unused")
 public class ContentProvider {
     private final List<Entity> entities;
     private String authority;
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/org/greenrobot/greendao/generator/DaoGenerator.java
similarity index 82%
rename from DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
rename to DaoGenerator/src/org/greenrobot/greendao/generator/DaoGenerator.java
index bb25fe9a..bc49738e 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/DaoGenerator.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,11 +11,12 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daogenerator;
+
+package org.greenrobot.greendao.generator;
 
 import java.io.File;
 import java.io.FileWriter;
@@ -29,6 +30,7 @@
 
 import freemarker.template.Configuration;
 import freemarker.template.Template;
+import freemarker.template.TemplateNotFoundException;
 
 /**
  * Once you have your model created, use this class to generate entities and DAOs.
@@ -50,16 +52,14 @@
 
     public DaoGenerator() throws IOException {
         System.out.println("greenDAO Generator");
-        System.out.println("Copyright 2011-2015 Markus Junginger, greenrobot.de. Licensed under GPL V3.");
+        System.out.println("Copyright 2011-2016 Markus Junginger, greenrobot.de. Licensed under GPL V3.");
         System.out.println("This program comes with ABSOLUTELY NO WARRANTY");
 
         patternKeepIncludes = compilePattern("INCLUDES");
         patternKeepFields = compilePattern("FIELDS");
         patternKeepMethods = compilePattern("METHODS");
 
-        Configuration config = new Configuration(Configuration.VERSION_2_3_23);
-        config.setClassForTemplateLoading(this.getClass(), "/");
-
+        Configuration config = getConfiguration("dao.ftl");
         templateDao = config.getTemplate("dao.ftl");
         templateDaoMaster = config.getTemplate("dao-master.ftl");
         templateDaoSession = config.getTemplate("dao-session.ftl");
@@ -68,6 +68,31 @@ public DaoGenerator() throws IOException {
         templateContentProvider = config.getTemplate("content-provider.ftl");
     }
 
+    private Configuration getConfiguration(String probingTemplate) throws IOException {
+        Configuration config = new Configuration(Configuration.VERSION_2_3_23);
+        config.setClassForTemplateLoading(getClass(), "/");
+
+        try {
+            config.getTemplate(probingTemplate);
+        } catch (TemplateNotFoundException e) {
+            // When running from an IDE like IntelliJ, class loading resources may fail for some reason (Gradle is OK)
+
+            // Working dir is module dir
+            File dir = new File("src/main/resources/");
+            if (!dir.exists()) {
+                // Working dir is base module dir
+                dir = new File("DaoGenerator/src/main/resources/");
+            }
+            if (dir.exists() && new File(dir, probingTemplate).exists()) {
+                config.setDirectoryForTemplateLoading(dir);
+                config.getTemplate(probingTemplate);
+            } else {
+                throw e;
+            }
+        }
+        return config;
+    }
+
     private Pattern compilePattern(String sectionName) {
         int flags = Pattern.DOTALL | Pattern.MULTILINE;
         return Pattern.compile(".*^\\s*?//\\s*?KEEP " + sectionName + ".*?\n(.*?)^\\s*// KEEP " + sectionName
@@ -84,7 +109,7 @@ public void generateAll(Schema schema, String outDir, String outDirEntity, Strin
         long start = System.currentTimeMillis();
 
         File outDirFile = toFileForceExists(outDir);
-        File outDirEntityFile = outDirEntity != null? toFileForceExists(outDirEntity): outDirFile;
+        File outDirEntityFile = outDirEntity != null ? toFileForceExists(outDirEntity) : outDirFile;
         File outDirTestFile = outDirTest != null ? toFileForceExists(outDirTest) : null;
 
         schema.init2ndPass();
@@ -109,14 +134,16 @@ public void generateAll(Schema schema, String outDir, String outDirEntity, Strin
                 }
             }
             for (ContentProvider contentProvider : entity.getContentProviders()) {
-                Map<String, Object> additionalObjectsForTemplate = new HashMap<String, Object>();
+                Map<String, Object> additionalObjectsForTemplate = new HashMap<>();
                 additionalObjectsForTemplate.put("contentProvider", contentProvider);
                 generate(templateContentProvider, outDirFile, entity.getJavaPackage(), entity.getClassName()
                         + "ContentProvider", schema, entity, additionalObjectsForTemplate);
             }
         }
-        generate(templateDaoMaster, outDirFile, schema.getDefaultJavaPackageDao(), "DaoMaster", schema, null);
-        generate(templateDaoSession, outDirFile, schema.getDefaultJavaPackageDao(), "DaoSession", schema, null);
+        generate(templateDaoMaster, outDirFile, schema.getDefaultJavaPackageDao(),
+                schema.getPrefix() + "DaoMaster", schema, null);
+        generate(templateDaoSession, outDirFile, schema.getDefaultJavaPackageDao(),
+                schema.getPrefix() + "DaoSession", schema, null);
 
         long time = System.currentTimeMillis() - start;
         System.out.println("Processed " + entities.size() + " entities in " + time + "ms");
@@ -138,7 +165,7 @@ private void generate(Template template, File outDirFile, String javaPackage, St
 
     private void generate(Template template, File outDirFile, String javaPackage, String javaClassName, Schema schema,
                           Entity entity, Map<String, Object> additionalObjectsForTemplate) throws Exception {
-        Map<String, Object> root = new HashMap<String, Object>();
+        Map<String, Object> root = new HashMap<>();
         root.put("schema", schema);
         root.put("entity", entity);
         if (additionalObjectsForTemplate != null) {
@@ -146,6 +173,7 @@ private void generate(Template template, File outDirFile, String javaPackage, St
         }
         try {
             File file = toJavaFilename(outDirFile, javaPackage, javaClassName);
+            //noinspection ResultOfMethodCallIgnored
             file.getParentFile().mkdirs();
 
             if (entity != null && entity.getHasKeepSections()) {
@@ -198,8 +226,7 @@ private void checkKeepSections(File file, Map<String, Object> root) {
     protected File toJavaFilename(File outDirFile, String javaPackage, String javaClassName) {
         String packageSubPath = javaPackage.replace('.', '/');
         File packagePath = new File(outDirFile, packageSubPath);
-        File file = new File(packagePath, javaClassName + ".java");
-        return file;
+        return new File(packagePath, javaClassName + ".java");
     }
 
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoUtil.java b/DaoGenerator/src/org/greenrobot/greendao/generator/DaoUtil.java
similarity index 96%
rename from DaoGenerator/src/de/greenrobot/daogenerator/DaoUtil.java
rename to DaoGenerator/src/org/greenrobot/greendao/generator/DaoUtil.java
index a8a2e965..45d9b2d2 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoUtil.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/DaoUtil.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,11 +11,12 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daogenerator;
+
+package org.greenrobot.greendao.generator;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/org/greenrobot/greendao/generator/Entity.java
similarity index 84%
rename from DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
rename to DaoGenerator/src/org/greenrobot/greendao/generator/Entity.java
index da865a42..7b4debbd 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/Entity.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,11 +11,14 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daogenerator;
+
+package org.greenrobot.greendao.generator;
+
+import org.greenrobot.greendao.generator.Property.PropertyBuilder;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -24,8 +27,6 @@
 import java.util.Set;
 import java.util.TreeSet;
 
-import de.greenrobot.daogenerator.Property.PropertyBuilder;
-
 /**
  * Model class for an entity: a Java data object mapped to a data base table. A new entity is added to a {@link Schema}
  * by the method {@link Schema#addEntity(String)} (there is no public constructor for {@link Entity} itself). <br/>
@@ -38,6 +39,7 @@
  * @see <a href="http://greendao-orm.com/documentation/modelling-entities/">Modelling Entities (Documentation page)</a>
  * @see <a href="http://greendao-orm.com/documentation/relations/">Relations (Documentation page)</a>
  */
+@SuppressWarnings("unused")
 public class Entity {
     private final Schema schema;
     private final String className;
@@ -47,6 +49,7 @@
     private final List<Property> propertiesNonPk;
     private final Set<String> propertyNames;
     private final List<Index> indexes;
+    private final List<Index> multiIndexes;
     private final List<ToOne> toOneRelations;
     private final List<ToManyBase> toManyRelations;
     private final List<ToManyBase> incomingToManyRelations;
@@ -55,7 +58,8 @@
     private final List<String> interfacesToImplement;
     private final List<ContentProvider> contentProviders;
 
-    private String tableName;
+    private String dbName;
+    private boolean nonDefaultDbName;
     private String classNameDao;
     private String classNameTest;
     private String javaPackage;
@@ -71,25 +75,26 @@
     private boolean constructors;
     private boolean skipGeneration;
     private boolean skipGenerationTest;
-    private boolean skipTableCreation;
+    private boolean skipCreationInDb;
     private Boolean active;
     private Boolean hasKeepSections;
 
     Entity(Schema schema, String className) {
         this.schema = schema;
         this.className = className;
-        properties = new ArrayList<Property>();
-        propertiesPk = new ArrayList<Property>();
-        propertiesNonPk = new ArrayList<Property>();
-        propertyNames = new HashSet<String>();
-        indexes = new ArrayList<Index>();
-        toOneRelations = new ArrayList<ToOne>();
-        toManyRelations = new ArrayList<ToManyBase>();
-        incomingToManyRelations = new ArrayList<ToManyBase>();
-        additionalImportsEntity = new TreeSet<String>();
-        additionalImportsDao = new TreeSet<String>();
-        interfacesToImplement = new ArrayList<String>();
-        contentProviders = new ArrayList<ContentProvider>();
+        properties = new ArrayList<>();
+        propertiesPk = new ArrayList<>();
+        propertiesNonPk = new ArrayList<>();
+        propertyNames = new HashSet<>();
+        indexes = new ArrayList<>();
+        multiIndexes = new ArrayList<>();
+        toOneRelations = new ArrayList<>();
+        toManyRelations = new ArrayList<>();
+        incomingToManyRelations = new ArrayList<>();
+        additionalImportsEntity = new TreeSet<>();
+        additionalImportsDao = new TreeSet<>();
+        interfacesToImplement = new ArrayList<>();
+        contentProviders = new ArrayList<>();
         constructors = true;
     }
 
@@ -137,7 +142,7 @@ public PropertyBuilder addProperty(PropertyType propertyType, String propertyNam
         if (!propertyNames.add(propertyName)) {
             throw new RuntimeException("Property already defined: " + propertyName);
         }
-        PropertyBuilder builder = new Property.PropertyBuilder(schema, this, propertyType, propertyName);
+        PropertyBuilder builder = new PropertyBuilder(schema, this, propertyType, propertyName);
         properties.add(builder.getProperty());
         return builder;
     }
@@ -145,7 +150,7 @@ public PropertyBuilder addProperty(PropertyType propertyType, String propertyNam
     /** Adds a standard _id column required by standard Android classes, e.g. list adapters. */
     public PropertyBuilder addIdProperty() {
         PropertyBuilder builder = addLongProperty("id");
-        builder.columnName("_id").primaryKey();
+        builder.dbName("_id").primaryKey();
         return builder;
     }
 
@@ -193,7 +198,6 @@ public ToManyWithJoinEntity addToMany(Entity target, Entity joinEntity, Property
         return toMany;
     }
 
-
     /**
      * Adds a to-one relationship to the given target entity using the given given foreign key property (which belongs
      * to this entity).
@@ -229,7 +233,7 @@ public ToOne addToOneWithoutProperty(String name, Entity target, String fkColumn
         if (unique) {
             propertyBuilder.unique();
         }
-        propertyBuilder.columnName(fkColumnName);
+        propertyBuilder.dbName(fkColumnName);
         Property column = propertyBuilder.getProperty();
         Property[] fkColumns = {column};
         ToOne toOne = new ToOne(schema, this, target, fkColumns, false);
@@ -243,7 +247,7 @@ protected void addIncomingToMany(ToMany toMany) {
     }
 
     public ContentProvider addContentProvider() {
-        List<Entity> entities = new ArrayList<Entity>();
+        List<Entity> entities = new ArrayList<>();
         entities.add(this);
         ContentProvider contentProvider = new ContentProvider(schema, entities);
         contentProviders.add(contentProvider);
@@ -275,12 +279,21 @@ public Schema getSchema() {
         return schema;
     }
 
-    public String getTableName() {
-        return tableName;
+    public String getDbName() {
+        return dbName;
     }
 
+    @Deprecated
+    /**
+     * @deprecated Use setDbName
+     */
     public void setTableName(String tableName) {
-        this.tableName = tableName;
+        setDbName(tableName);
+    }
+
+    public void setDbName(String dbName) {
+        this.dbName = dbName;
+        this.nonDefaultDbName = dbName != null;
     }
 
     public String getClassName() {
@@ -363,6 +376,7 @@ public boolean isConstructors() {
         return constructors;
     }
 
+    /** Flag to define if constructors should be generated. */
     public void setConstructors(boolean constructors) {
         this.constructors = constructors;
     }
@@ -379,13 +393,21 @@ public void setSkipGeneration(boolean skipGeneration) {
         this.skipGeneration = skipGeneration;
     }
 
-    /** Flag if CREATE & DROP TABLE scripts should be skipped in Dao. */
+    @Deprecated
+    /**
+     * @deprecated Use setSkipCreationInDb
+     */
     public void setSkipTableCreation(boolean skipTableCreation) {
-        this.skipTableCreation = skipTableCreation;
+        setSkipCreationInDb(skipTableCreation);
+    }
+
+    /** Flag if CREATE & DROP TABLE scripts should be skipped in Dao. */
+    public void setSkipCreationInDb(boolean skipCreationInDb) {
+        this.skipCreationInDb = skipCreationInDb;
     }
 
-    public boolean isSkipTableCreation() {
-        return skipTableCreation;
+    public boolean isSkipCreationInDb() {
+        return skipCreationInDb;
     }
 
     public boolean isSkipGenerationTest() {
@@ -495,6 +517,17 @@ void init2ndPass() {
             }
         }
 
+        for (int i = 0; i < indexes.size(); i++) {
+            final Index index = indexes.get(i);
+            final int propertiesSize = index.getProperties().size();
+            if (propertiesSize == 1) {
+                final Property property = index.getProperties().get(0);
+                property.setIndex(index);
+            } else if (propertiesSize > 1) {
+                multiIndexes.add(index);
+            }
+        }
+
         if (propertiesPk.size() == 1) {
             pkProperty = propertiesPk.get(0);
             pkType = schema.mapToJavaTypeNullable(pkProperty.getPropertyType());
@@ -502,7 +535,7 @@ void init2ndPass() {
             pkType = "Void";
         }
 
-        propertiesColumns = new ArrayList<Property>(properties);
+        propertiesColumns = new ArrayList<>(properties);
         for (ToOne toOne : toOneRelations) {
             toOne.init2ndPass();
             Property[] fkProperties = toOne.getFkProperties();
@@ -540,8 +573,9 @@ void init2ndPass() {
     }
 
     protected void init2ndPassNamesWithDefaults() {
-        if (tableName == null) {
-            tableName = DaoUtil.dbName(className);
+        if (dbName == null) {
+            dbName = DaoUtil.dbName(className);
+            nonDefaultDbName = false;
         }
 
         if (classNameDao == null) {
@@ -573,17 +607,17 @@ protected void init2ndPassIndexNamesWithDefaults() {
         for (int i = 0; i < indexes.size(); i++) {
             Index index = indexes.get(i);
             if (index.getName() == null) {
-                String indexName = "IDX_" + getTableName();
+                String indexName = "IDX_" + getDbName();
                 List<Property> properties = index.getProperties();
                 for (int j = 0; j < properties.size(); j++) {
                     Property property = properties.get(j);
-                    indexName += "_" + property.getColumnName();
+                    indexName += "_" + property.getDbName();
                     if ("DESC".equalsIgnoreCase(index.getPropertiesOrder().get(j))) {
                         indexName += "_DESC";
                     }
                 }
                 // TODO can this get too long? how to shorten reliably without depending on the order (i)
-                index.setName(indexName);
+                index.setDefaultName(indexName);
             }
         }
     }
@@ -598,7 +632,7 @@ void init3rdPass() {
     }
 
     private void init3rdPassRelations() {
-        Set<String> toOneNames = new HashSet<String>();
+        Set<String> toOneNames = new HashSet<>();
         for (ToOne toOne : toOneRelations) {
             toOne.init3ndPass();
             if (!toOneNames.add(toOne.getName().toLowerCase())) {
@@ -606,7 +640,7 @@ private void init3rdPassRelations() {
             }
         }
 
-        Set<String> toManyNames = new HashSet<String>();
+        Set<String> toManyNames = new HashSet<>();
         for (ToManyBase toMany : toManyRelations) {
             toMany.init3rdPass();
             if (toMany instanceof ToMany) {
@@ -632,9 +666,7 @@ private void init3rdPassAdditionalImports() {
             Entity targetEntity = toOne.getTargetEntity();
             checkAdditionalImportsEntityTargetEntity(targetEntity);
             // For deep loading
-            if (!targetEntity.getJavaPackage().equals(javaPackageDao)) {
-                additionalImportsDao.add(targetEntity.getJavaPackage() + "." + targetEntity.getClassName());
-            }
+            checkAdditionalImportsDaoTargetEntity(targetEntity);
         }
 
         for (ToManyBase toMany : toManyRelations) {
@@ -642,14 +674,22 @@ private void init3rdPassAdditionalImports() {
             checkAdditionalImportsEntityTargetEntity(targetEntity);
         }
 
+        for (ToManyBase incomingToMany : incomingToManyRelations) {
+            if (incomingToMany instanceof ToManyWithJoinEntity) {
+                final ToManyWithJoinEntity toManyWithJoinEntity = (ToManyWithJoinEntity) incomingToMany;
+                final Entity joinEntity = toManyWithJoinEntity.getJoinEntity();
+                checkAdditionalImportsDaoTargetEntity(joinEntity);
+            }
+        }
+
         for (Property property : properties) {
             String customType = property.getCustomType();
             if (customType != null) {
                 String pack = DaoUtil.getPackageFromFullyQualified(customType);
-                if (!pack.equals(javaPackage)) {
+                if (pack != null && !pack.equals(javaPackage)) {
                     additionalImportsEntity.add(customType);
                 }
-                if (!pack.equals(javaPackageDao)) {
+                if (pack != null && !pack.equals(javaPackageDao)) {
                     additionalImportsDao.add(customType);
                 }
             }
@@ -657,7 +697,7 @@ private void init3rdPassAdditionalImports() {
             String converter = property.getConverter();
             if (converter != null) {
                 String pack = DaoUtil.getPackageFromFullyQualified(converter);
-                if (!pack.equals(javaPackageDao)) {
+                if (pack != null && !pack.equals(javaPackageDao)) {
                     additionalImportsDao.add(converter);
                 }
             }
@@ -674,12 +714,26 @@ private void checkAdditionalImportsEntityTargetEntity(Entity targetEntity) {
         }
     }
 
+    private void checkAdditionalImportsDaoTargetEntity(Entity targetEntity) {
+        if (!targetEntity.getJavaPackage().equals(javaPackageDao)) {
+            additionalImportsDao.add(targetEntity.getJavaPackage() + "." + targetEntity.getClassName());
+        }
+    }
+
     public void validatePropertyExists(Property property) {
         if (!properties.contains(property)) {
             throw new RuntimeException("Property " + property + " does not exist in " + this);
         }
     }
 
+    public List<Index> getMultiIndexes() {
+        return multiIndexes;
+    }
+
+    public boolean isNonDefaultDbName() {
+        return nonDefaultDbName;
+    }
+
     @Override
     public String toString() {
         return "Entity " + className + " (package: " + javaPackage + ")";
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Index.java b/DaoGenerator/src/org/greenrobot/greendao/generator/Index.java
similarity index 69%
rename from DaoGenerator/src/de/greenrobot/daogenerator/Index.java
rename to DaoGenerator/src/org/greenrobot/greendao/generator/Index.java
index a7d48f5c..d116d5fb 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Index.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/Index.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,16 +11,18 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daogenerator;
 
+package org.greenrobot.greendao.generator;
 
+@SuppressWarnings("unused")
 public class Index extends PropertyOrderList {
     private String name;
     private boolean unique;
+    private boolean nonDefaultName;
 
     public String getName() {
         return name;
@@ -28,6 +30,7 @@ public String getName() {
 
     public Index setName(String name) {
         this.name = name;
+        this.nonDefaultName = name != null;
         return this;
     }
 
@@ -40,4 +43,13 @@ public boolean isUnique() {
         return unique;
     }
 
+    public boolean isNonDefaultName() {
+        return nonDefaultName;
+    }
+
+    /** used internally to know if name is generated by greenDAO */
+    void setDefaultName(String name) {
+        this.name = name;
+        this.nonDefaultName = false;
+    }
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/org/greenrobot/greendao/generator/Property.java
similarity index 83%
rename from DaoGenerator/src/de/greenrobot/daogenerator/Property.java
rename to DaoGenerator/src/org/greenrobot/greendao/generator/Property.java
index 14534df5..84857e70 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/Property.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,13 +11,15 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daogenerator;
+
+package org.greenrobot.greendao.generator;
 
 /** Model class for an entity's property: a Java property mapped to a data base column. */
+@SuppressWarnings("unused")
 public class Property {
 
     public static class PropertyBuilder {
@@ -27,13 +29,30 @@ public PropertyBuilder(Schema schema, Entity entity, PropertyType propertyType,
             property = new Property(schema, entity, propertyType, propertyName);
         }
 
+        @Deprecated
+        /**
+         * @deprecated use dbName
+         */
         public PropertyBuilder columnName(String columnName) {
-            property.columnName = columnName;
+            return dbName(columnName);
+        }
+
+        public PropertyBuilder dbName(String dbName) {
+            property.dbName = dbName;
+            property.nonDefaultDbName = dbName != null;
             return this;
         }
 
+        @Deprecated
+        /**
+         * @deprecated use dbType
+         */
         public PropertyBuilder columnType(String columnType) {
-            property.columnType = columnType;
+            return dbType(columnType);
+        }
+
+        public PropertyBuilder dbType(String dbType) {
+            property.dbType = dbType;
             return this;
         }
 
@@ -73,6 +92,14 @@ public PropertyBuilder notNull() {
             return this;
         }
 
+        public PropertyBuilder nonPrimitiveType() {
+            if (!property.propertyType.isScalar()) {
+                throw new RuntimeException("Type is already non-primitive");
+            }
+            property.nonPrimitiveType = true;
+            return this;
+        }
+
         public PropertyBuilder index() {
             Index index = new Index();
             index.addProperty(property);
@@ -167,8 +194,8 @@ public Property getProperty() {
     private PropertyType propertyType;
     private final String propertyName;
 
-    private String columnName;
-    private String columnType;
+    private String dbName;
+    private String dbType;
 
     private String customType;
     private String customTypeClassName;
@@ -190,6 +217,7 @@ public Property getProperty() {
 
     private boolean unique;
     private boolean notNull;
+    private boolean nonPrimitiveType;
 
     /** Initialized in 2nd pass */
     private String constraints;
@@ -198,6 +226,15 @@ public Property getProperty() {
 
     private String javaType;
 
+    private boolean nonDefaultDbName;
+
+    /**
+     * Index, which has only this property
+     * Can be added by user via {@link PropertyBuilder} or via {@link Entity#addIndex(Index)}
+     * Initialized in 2nd pass
+     */
+    private Index index;
+
     public Property(Schema schema, Entity entity, PropertyType propertyType, String propertyName) {
         this.schema = schema;
         this.entity = entity;
@@ -217,18 +254,30 @@ public void setPropertyType(PropertyType propertyType) {
         this.propertyType = propertyType;
     }
 
-    public String getColumnName() {
-        return columnName;
+    public String getDbName() {
+        return dbName;
     }
 
-    public String getColumnType() {
-        return columnType;
+    public boolean isNonDefaultDbName() {
+        return nonDefaultDbName;
+    }
+
+    public String getDbType() {
+        return dbType;
     }
 
     public boolean isPrimaryKey() {
         return primaryKey;
     }
 
+    public boolean isPkAsc() {
+        return pkAsc;
+    }
+
+    public boolean isPkDesc() {
+        return pkDesc;
+    }
+
     public boolean isAutoincrement() {
         return pkAutoincrement;
     }
@@ -245,6 +294,10 @@ public boolean isNotNull() {
         return notNull;
     }
 
+    public boolean isNonPrimitiveType() {
+        return nonPrimitiveType || !propertyType.isScalar();
+    }
+
     public String getJavaType() {
         return javaType;
     }
@@ -366,15 +419,28 @@ public Entity getEntity() {
         return entity;
     }
 
+    public Index getIndex() {
+        return index;
+    }
+
+    public void setIndex(Index index) {
+        this.index = index;
+    }
+
     void init2ndPass() {
         initConstraint();
-        if (columnType == null) {
-            columnType = schema.mapToDbType(propertyType);
+        if (dbType == null) {
+            dbType = schema.mapToDbType(propertyType);
         }
-        if (columnName == null) {
-            columnName = DaoUtil.dbName(propertyName);
+        if (dbName == null) {
+            dbName = DaoUtil.dbName(propertyName);
+            nonDefaultDbName = false;
+        } else if (primaryKey && propertyType == PropertyType.Long && dbName.equals("_id")) {
+            nonDefaultDbName = false;
         }
-        if (notNull) {
+
+        // For backwards compatibility, consider notNull. It should be only dependent on nonPrimitiveType in the future.
+        if (notNull && !nonPrimitiveType) {
             javaType = schema.mapToJavaTypeNotNull(propertyType);
         } else {
             javaType = schema.mapToJavaTypeNullable(propertyType);
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/PropertyOrderList.java b/DaoGenerator/src/org/greenrobot/greendao/generator/PropertyOrderList.java
similarity index 69%
rename from DaoGenerator/src/de/greenrobot/daogenerator/PropertyOrderList.java
rename to DaoGenerator/src/org/greenrobot/greendao/generator/PropertyOrderList.java
index 312de11e..6f3a49e9 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/PropertyOrderList.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/PropertyOrderList.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,11 +11,12 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daogenerator;
+
+package org.greenrobot.greendao.generator;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -25,8 +26,8 @@
     private List<String> propertiesOrder;
 
     public PropertyOrderList() {
-        properties = new ArrayList<Property>();
-        propertiesOrder = new ArrayList<String>();
+        properties = new ArrayList<>();
+        propertiesOrder = new ArrayList<>();
     }
 
     public void addProperty(Property property) {
@@ -44,6 +45,7 @@ public void addPropertyDesc(Property property) {
         propertiesOrder.add("DESC");
     }
 
+    @SuppressWarnings("unused")
     public void addOrderRaw(String order) {
         properties.add(null);
         propertiesOrder.add(order);
@@ -53,7 +55,7 @@ public void addOrderRaw(String order) {
         return properties;
     }
 
-    List<String> getPropertiesOrder() {
+    public List<String> getPropertiesOrder() {
         return propertiesOrder;
     }
 
@@ -67,7 +69,7 @@ public String getCommaSeparatedString(String tablePrefixOrNull) {
                 if(tablePrefixOrNull != null) {
                     builder.append(tablePrefixOrNull).append('.');
                 }
-                builder.append('\'').append(property.getColumnName()).append('\'').append(' ');
+                builder.append('\'').append(property.getDbName()).append('\'').append(' ');
             }
             if (order != null) {
                 builder.append(order);
@@ -83,4 +85,22 @@ public boolean isEmpty() {
         return properties.isEmpty();
     }
 
+    public String getOrderSpec() {
+        final List<Property> properties = getProperties();
+        final List<String> propertiesOrder = getPropertiesOrder();
+        final StringBuilder builder = new StringBuilder();
+        final int size = properties.size();
+        for (int i = 0; i < size; i++) {
+            final Property property = properties.get(i);
+            final String order = propertiesOrder.get(i);
+            builder.append(property.getPropertyName());
+            if (order != null) {
+                builder.append(' ').append(order);
+            }
+            if (i < size - 1) {
+                builder.append(", ");
+            }
+        }
+        return builder.toString();
+    }
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java b/DaoGenerator/src/org/greenrobot/greendao/generator/PropertyType.java
similarity index 60%
rename from DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java
rename to DaoGenerator/src/org/greenrobot/greendao/generator/PropertyType.java
index db10eaf9..c638db3b 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/PropertyType.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,17 +11,31 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daogenerator;
+
+package org.greenrobot.greendao.generator;
 
 /**
  * Currently available types for properties.
- * 
+ *
  * @author Markus
  */
 public enum PropertyType {
-    Byte, Short, Int, Long, Boolean, Float, Double, String, ByteArray, Date
+
+    Byte(true), Short(true), Int(true), Long(true), Boolean(true), Float(true), Double(true),
+    String(false), ByteArray(false), Date(false);
+
+    private final boolean scalar;
+
+    PropertyType(boolean scalar) {
+        this.scalar = scalar;
+    }
+
+    /** True if the type can be prepresented using a scalar (primitive type). */
+    public boolean isScalar() {
+        return scalar;
+    }
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Query.java b/DaoGenerator/src/org/greenrobot/greendao/generator/Query.java
similarity index 91%
rename from DaoGenerator/src/de/greenrobot/daogenerator/Query.java
rename to DaoGenerator/src/org/greenrobot/greendao/generator/Query.java
index 8929d7fb..e7111b4c 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Query.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/Query.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,11 +11,12 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daogenerator;
+
+package org.greenrobot.greendao.generator;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/QueryParam.java b/DaoGenerator/src/org/greenrobot/greendao/generator/QueryParam.java
similarity index 89%
rename from DaoGenerator/src/de/greenrobot/daogenerator/QueryParam.java
rename to DaoGenerator/src/org/greenrobot/greendao/generator/QueryParam.java
index b775dffc..90339fe5 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/QueryParam.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/QueryParam.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,11 +11,12 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daogenerator;
+
+package org.greenrobot.greendao.generator;
 
 /** NOT IMPLEMENTED YET. Check back later. */
 public class QueryParam {
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java b/DaoGenerator/src/org/greenrobot/greendao/generator/Schema.java
similarity index 88%
rename from DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
rename to DaoGenerator/src/org/greenrobot/greendao/generator/Schema.java
index 8351ecb5..a15f8595 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/Schema.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,11 +11,12 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daogenerator;
+
+package org.greenrobot.greendao.generator;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -27,7 +28,10 @@
  * 
  * @see <a href="http://greendao-orm.com/documentation/modelling-entities/">Modelling Entities (Documentation page)</a>
  */
+@SuppressWarnings("unused")
 public class Schema {
+    public static final String DEFAULT_NAME = "default";
+
     private final int version;
     private final String defaultJavaPackage;
     private String defaultJavaPackageDao;
@@ -38,14 +42,22 @@
     private Map<PropertyType, String> propertyToJavaTypeNullable;
     private boolean hasKeepSectionsByDefault;
     private boolean useActiveEntitiesByDefault;
+    private final String name;
+    private final String prefix;
 
-    public Schema(int version, String defaultJavaPackage) {
+    public Schema(String name, int version, String defaultJavaPackage) {
+        this.name = name;
+        this.prefix = name.equals(DEFAULT_NAME) ? "" : DaoUtil.capFirst(name);
         this.version = version;
         this.defaultJavaPackage = defaultJavaPackage;
-        this.entities = new ArrayList<Entity>();
+        this.entities = new ArrayList<>();
         initTypeMappings();
     }
 
+    public Schema(int version, String defaultJavaPackage) {
+        this(DEFAULT_NAME, version, defaultJavaPackage);
+    }
+
     public void enableKeepSectionsByDefault() {
         hasKeepSectionsByDefault = true;
     }
@@ -55,7 +67,7 @@ public void enableActiveEntitiesByDefault() {
     }
 
     private void initTypeMappings() {
-        propertyToDbType = new HashMap<PropertyType, String>();
+        propertyToDbType = new HashMap<>();
         propertyToDbType.put(PropertyType.Boolean, "INTEGER");
         propertyToDbType.put(PropertyType.Byte, "INTEGER");
         propertyToDbType.put(PropertyType.Short, "INTEGER");
@@ -67,7 +79,7 @@ private void initTypeMappings() {
         propertyToDbType.put(PropertyType.ByteArray, "BLOB");
         propertyToDbType.put(PropertyType.Date, "INTEGER");
 
-        propertyToJavaTypeNotNull = new HashMap<PropertyType, String>();
+        propertyToJavaTypeNotNull = new HashMap<>();
         propertyToJavaTypeNotNull.put(PropertyType.Boolean, "boolean");
         propertyToJavaTypeNotNull.put(PropertyType.Byte, "byte");
         propertyToJavaTypeNotNull.put(PropertyType.Short, "short");
@@ -79,7 +91,7 @@ private void initTypeMappings() {
         propertyToJavaTypeNotNull.put(PropertyType.ByteArray, "byte[]");
         propertyToJavaTypeNotNull.put(PropertyType.Date, "java.util.Date");
 
-        propertyToJavaTypeNullable = new HashMap<PropertyType, String>();
+        propertyToJavaTypeNullable = new HashMap<>();
         propertyToJavaTypeNullable.put(PropertyType.Boolean, "Boolean");
         propertyToJavaTypeNullable.put(PropertyType.Byte, "Byte");
         propertyToJavaTypeNullable.put(PropertyType.Short, "Short");
@@ -168,6 +180,14 @@ public boolean isUseActiveEntitiesByDefault() {
         return useActiveEntitiesByDefault;
     }
 
+    public String getName() {
+        return name;
+    }
+
+    public String getPrefix() {
+        return prefix;
+    }
+
     void init2ndPass() {
         if (defaultJavaPackageDao == null) {
             defaultJavaPackageDao = defaultJavaPackage;
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/ToMany.java b/DaoGenerator/src/org/greenrobot/greendao/generator/ToMany.java
similarity index 94%
rename from DaoGenerator/src/de/greenrobot/daogenerator/ToMany.java
rename to DaoGenerator/src/org/greenrobot/greendao/generator/ToMany.java
index 5b8611b2..465d2a0e 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/ToMany.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/ToMany.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,17 +11,18 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daogenerator;
+
+package org.greenrobot.greendao.generator;
 
 import java.util.List;
 
 /** To-many relationship from a source entity to many target entities. */
+@SuppressWarnings("unused")
 public class ToMany extends ToManyBase {
-    @SuppressWarnings("unused")
     private Property[] sourceProperties;
     private final Property[] targetProperties;
 
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/ToManyBase.java b/DaoGenerator/src/org/greenrobot/greendao/generator/ToManyBase.java
similarity index 88%
rename from DaoGenerator/src/de/greenrobot/daogenerator/ToManyBase.java
rename to DaoGenerator/src/org/greenrobot/greendao/generator/ToManyBase.java
index 699cac11..c0979efd 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/ToManyBase.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/ToManyBase.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,13 +11,15 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daogenerator;
+
+package org.greenrobot.greendao.generator;
 
 /** Base class for to-many relationship from source entities to target entities. */
+@SuppressWarnings("unused")
 public abstract class ToManyBase {
     @SuppressWarnings("unused")
     private final Schema schema;
@@ -78,6 +80,15 @@ public String getOrder() {
         }
     }
 
+    /** order spec to be used in generated @OrderBy annotation */
+    public String getOrderSpec() {
+        if (propertyOrderList.isEmpty()) {
+            return null;
+        } else {
+            return propertyOrderList.getOrderSpec();
+        }
+    }
+
     void init2ndPass() {
         if (name == null) {
             char[] nameCharArray = targetEntity.getClassName().toCharArray();
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/ToManyWithJoinEntity.java b/DaoGenerator/src/org/greenrobot/greendao/generator/ToManyWithJoinEntity.java
similarity index 91%
rename from DaoGenerator/src/de/greenrobot/daogenerator/ToManyWithJoinEntity.java
rename to DaoGenerator/src/org/greenrobot/greendao/generator/ToManyWithJoinEntity.java
index 75221566..f0b77d4f 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/ToManyWithJoinEntity.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/ToManyWithJoinEntity.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,15 +11,17 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daogenerator;
+
+package org.greenrobot.greendao.generator;
 
 import java.util.List;
 
 /** To-many relationship to many target entities using a join entity (aka JOIN table). */
+@SuppressWarnings("unused")
 public class ToManyWithJoinEntity extends ToManyBase {
     private final Entity joinEntity;
     private final Property sourceProperty;
@@ -45,8 +47,8 @@ public Property getTargetProperty() {
         return targetProperty;
     }
 
-    void init2ndPass() {
-        super.init2ndPass();
+    void init3rdPass() {
+        super.init3rdPass();
         List<Property> pks = sourceEntity.getPropertiesPk();
         if (pks.isEmpty()) {
             throw new RuntimeException("Source entity has no primary key, but we need it for " + this);
@@ -57,8 +59,4 @@ void init2ndPass() {
         }
     }
 
-    void init3rdPass() {
-        super.init3rdPass();
-    }
-
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/ToOne.java b/DaoGenerator/src/org/greenrobot/greendao/generator/ToOne.java
similarity index 96%
rename from DaoGenerator/src/de/greenrobot/daogenerator/ToOne.java
rename to DaoGenerator/src/org/greenrobot/greendao/generator/ToOne.java
index 2a71e5f5..df251670 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/ToOne.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/ToOne.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,13 +11,15 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daogenerator;
+
+package org.greenrobot.greendao.generator;
 
 /** To-one relationship from a source entity to one (or zero) target entity. */
+@SuppressWarnings("unused")
 public class ToOne {
     private final Schema schema;
     private final Entity sourceEntity;
diff --git a/DaoTest/.gitignore b/DaoTest/.gitignore
deleted file mode 100644
index 31ec0aee..00000000
--- a/DaoTest/.gitignore
+++ /dev/null
@@ -1,3 +0,0 @@
-/gen
-/DaoCore_src
-/bin
diff --git a/DaoTest/build.gradle b/DaoTest/build.gradle
deleted file mode 100644
index 0947debd..00000000
--- a/DaoTest/build.gradle
+++ /dev/null
@@ -1,45 +0,0 @@
-buildscript {
-    repositories {
-        mavenCentral()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
-    }
-}
-
-apply plugin: 'com.android.application'
-
-dependencies {
-    androidTestCompile project(':DaoCore')
-
-    testCompile project(':DaoCore')
-    testCompile 'org.robolectric:robolectric:3.0'
-}
-
-android {
-    buildToolsVersion rootProject.ext.buildToolsVersion
-    compileSdkVersion rootProject.ext.compileSdkVersion
-
-    sourceSets {
-        main {
-            manifest.srcFile 'AndroidManifest.xml'
-            // Workaround: assets.srcDirs in androidTest doesn't seem to work currently
-            assets.srcDirs = ['assets']
-        }
-
-        androidTest {
-            assets.srcDirs = ['assets']
-            java.srcDirs = ['src', 'src-gen']
-        }
-
-        unitTest {
-            java.srcDirs = ['src-unit-test']
-        }
-    }
-
-    defaultConfig {
-        testApplicationId "de.greenrobot.daotest"
-        testInstrumentationRunner "android.test.InstrumentationTestRunner"
-    }
-}
diff --git a/DaoTest/proguard.cfg b/DaoTest/proguard.cfg
deleted file mode 100644
index b1cdf17b..00000000
--- a/DaoTest/proguard.cfg
+++ /dev/null
@@ -1,40 +0,0 @@
--optimizationpasses 5
--dontusemixedcaseclassnames
--dontskipnonpubliclibraryclasses
--dontpreverify
--verbose
--optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
-
--keep public class * extends android.app.Activity
--keep public class * extends android.app.Application
--keep public class * extends android.app.Service
--keep public class * extends android.content.BroadcastReceiver
--keep public class * extends android.content.ContentProvider
--keep public class * extends android.app.backup.BackupAgentHelper
--keep public class * extends android.preference.Preference
--keep public class com.android.vending.licensing.ILicensingService
-
--keepclasseswithmembernames class * {
-    native <methods>;
-}
-
--keepclasseswithmembers class * {
-    public <init>(android.content.Context, android.util.AttributeSet);
-}
-
--keepclasseswithmembers class * {
-    public <init>(android.content.Context, android.util.AttributeSet, int);
-}
-
--keepclassmembers class * extends android.app.Activity {
-   public void *(android.view.View);
-}
-
--keepclassmembers enum * {
-    public static **[] values();
-    public static ** valueOf(java.lang.String);
-}
-
--keep class * implements android.os.Parcelable {
-  public static final android.os.Parcelable$Creator *;
-}
diff --git a/DaoTest/res/values/dummy.xml b/DaoTest/res/values/dummy.xml
deleted file mode 100644
index 4c670337..00000000
--- a/DaoTest/res/values/dummy.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    
-</resources>
diff --git a/DaoTest/src/de/greenrobot/daotest/TestInterface.java b/DaoTest/src/de/greenrobot/daotest/TestInterface.java
deleted file mode 100644
index 035d4ab2..00000000
--- a/DaoTest/src/de/greenrobot/daotest/TestInterface.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package de.greenrobot.daotest;
-
-public interface TestInterface {
-
-}
diff --git a/DaoTest/src/de/greenrobot/daotest/TestSuperclass.java b/DaoTest/src/de/greenrobot/daotest/TestSuperclass.java
deleted file mode 100644
index f360e3d0..00000000
--- a/DaoTest/src/de/greenrobot/daotest/TestSuperclass.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package de.greenrobot.daotest;
-
-public class TestSuperclass {
-
-}
diff --git a/DaoTest/src/de/greenrobot/daotest/async/MergeTxAsyncTest.java b/DaoTest/src/de/greenrobot/daotest/async/MergeTxAsyncTest.java
deleted file mode 100644
index b22958a9..00000000
--- a/DaoTest/src/de/greenrobot/daotest/async/MergeTxAsyncTest.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package de.greenrobot.daotest.async;
-
-import de.greenrobot.dao.async.AsyncOperation;
-import de.greenrobot.daotest.SimpleEntity;
-
-public class MergeTxAsyncTest extends AbstractAsyncTest {
-
-    public void testMergeInsertAndUpdate() {
-        SimpleEntity entity = new SimpleEntity();
-        entity.setId(42l);
-        entity.setSimpleString("heho");
-        
-        SimpleEntity entity2 = new SimpleEntity();
-        entity2.setId(42l);
-        entity2.setSimpleString("updated");
-        
-        AsyncOperation op1 = asyncSession.insert(entity, AsyncOperation.FLAG_MERGE_TX);
-        AsyncOperation op2 = asyncSession.update(entity2, AsyncOperation.FLAG_MERGE_TX);
-        
-        assertWaitForCompletion1Sec();
-        daoSession.clear();
-        SimpleEntity entity3 = daoSession.load(SimpleEntity.class, 42l);
-        assertNotNull(entity3);
-        assertEquals(entity2.getSimpleString(), entity3.getSimpleString());
-        
-        assertEquals(2, op1.getMergedOperationsCount());
-        assertEquals(2, op2.getMergedOperationsCount());
-    }
-
-}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/AutoincrementEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/AutoincrementEntityTest.java
deleted file mode 100644
index 2be68193..00000000
--- a/DaoTest/src/de/greenrobot/daotest/entity/AutoincrementEntityTest.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package de.greenrobot.daotest.entity;
-
-import de.greenrobot.dao.test.AbstractDaoSessionTest;
-import de.greenrobot.daotest.AutoincrementEntity;
-import de.greenrobot.daotest.DaoMaster;
-import de.greenrobot.daotest.DaoSession;
-import de.greenrobot.daotest.SimpleEntity;
-
-public class AutoincrementEntityTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
-
-    public AutoincrementEntityTest() {
-        super(DaoMaster.class);
-    }
-
-    public void testAutoincrement() {
-        AutoincrementEntity entity = new AutoincrementEntity();
-        daoSession.insert(entity);
-        Long id1 = entity.getId();
-        assertNotNull(id1);
-        daoSession.delete(entity);
-
-        AutoincrementEntity entity2 = new AutoincrementEntity();
-        daoSession.insert(entity2);
-        assertEquals(id1 + 1, (long) entity2.getId());
-    }
-
-    public void testNoAutoincrement() {
-        SimpleEntity entity = new SimpleEntity();
-        daoSession.insert(entity);
-        Long id1 = entity.getId();
-        assertNotNull(id1);
-        daoSession.delete(entity);
-
-        SimpleEntity entity2 = new SimpleEntity();
-        daoSession.insert(entity2);
-        assertEquals(id1, entity2.getId());
-    }
-
-}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/ExtendsImplementsEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/ExtendsImplementsEntityTest.java
deleted file mode 100644
index 3096e7c4..00000000
--- a/DaoTest/src/de/greenrobot/daotest/entity/ExtendsImplementsEntityTest.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package de.greenrobot.daotest.entity;
-
-import java.io.Serializable;
-
-import de.greenrobot.dao.test.AbstractDaoTestLongPk;
-import de.greenrobot.daotest.ExtendsImplementsEntity;
-import de.greenrobot.daotest.ExtendsImplementsEntityDao;
-import de.greenrobot.daotest.TestInterface;
-import de.greenrobot.daotest.TestSuperclass;
-
-public class ExtendsImplementsEntityTest extends
-        AbstractDaoTestLongPk<ExtendsImplementsEntityDao, ExtendsImplementsEntity> {
-
-    public ExtendsImplementsEntityTest() {
-        super(ExtendsImplementsEntityDao.class);
-    }
-
-    @Override
-    protected ExtendsImplementsEntity createEntity(Long key) {
-        ExtendsImplementsEntity entity = new ExtendsImplementsEntity();
-        entity.setId(key);
-        return entity;
-    }
-
-    public void testInheritance() {
-        ExtendsImplementsEntity entity = createEntityWithRandomPk();
-        assertTrue(entity instanceof TestSuperclass);
-        assertTrue(entity instanceof TestInterface);
-        assertTrue(entity instanceof Serializable);
-    }
-
-}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/IndexedStringEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/IndexedStringEntityTest.java
deleted file mode 100644
index 437de999..00000000
--- a/DaoTest/src/de/greenrobot/daotest/entity/IndexedStringEntityTest.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package de.greenrobot.daotest.entity;
-
-import de.greenrobot.dao.test.AbstractDaoTestLongPk;
-
-import de.greenrobot.daotest.IndexedStringEntity;
-import de.greenrobot.daotest.IndexedStringEntityDao;
-
-public class IndexedStringEntityTest extends AbstractDaoTestLongPk<IndexedStringEntityDao, IndexedStringEntity> {
-
-    public IndexedStringEntityTest() {
-        super(IndexedStringEntityDao.class);
-    }
-
-    @Override
-    protected IndexedStringEntity createEntity(Long key) {
-        IndexedStringEntity entity = new IndexedStringEntity();
-        entity.setId(key);
-        return entity;
-    }
-
-}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/JoinManyToDateEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/JoinManyToDateEntityTest.java
deleted file mode 100644
index 7ed4e6de..00000000
--- a/DaoTest/src/de/greenrobot/daotest/entity/JoinManyToDateEntityTest.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package de.greenrobot.daotest.entity;
-
-import de.greenrobot.dao.test.AbstractDaoTestLongPk;
-
-import de.greenrobot.daotest.JoinManyToDateEntity;
-import de.greenrobot.daotest.JoinManyToDateEntityDao;
-
-public class JoinManyToDateEntityTest extends AbstractDaoTestLongPk<JoinManyToDateEntityDao, JoinManyToDateEntity> {
-
-    public JoinManyToDateEntityTest() {
-        super(JoinManyToDateEntityDao.class);
-    }
-
-    @Override
-    protected JoinManyToDateEntity createEntity(Long key) {
-        JoinManyToDateEntity entity = new JoinManyToDateEntity();
-        entity.setId(key);
-        return entity;
-    }
-
-}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SqliteMasterTest.java b/DaoTest/src/de/greenrobot/daotest/entity/SqliteMasterTest.java
deleted file mode 100644
index 913b6a33..00000000
--- a/DaoTest/src/de/greenrobot/daotest/entity/SqliteMasterTest.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package de.greenrobot.daotest.entity;
-
-import java.util.List;
-
-import de.greenrobot.dao.DaoLog;
-import de.greenrobot.dao.test.AbstractDaoTest;
-import de.greenrobot.daotest.SqliteMaster;
-import de.greenrobot.daotest.SqliteMasterDao;
-import de.greenrobot.daotest.SqliteMasterDao.Properties;
-
-public class SqliteMasterTest extends AbstractDaoTest<SqliteMasterDao, SqliteMaster, Void> {
-
-    public SqliteMasterTest() {
-        super(SqliteMasterDao.class);
-    }
-
-    public void testLoadAll() {
-        List<SqliteMaster> all = dao.loadAll();
-        for (SqliteMaster meta : all) {
-            DaoLog.v(meta.toString());
-        }
-    }
-
-    public void testQueryRaw() {
-        List<SqliteMaster> tables = dao.queryRaw("WHERE " + Properties.Type.columnName + "=?", "table");
-        for (SqliteMaster table : tables) {
-            DaoLog.v(table.toString());
-        }
-    }
-
-}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityTest.java
deleted file mode 100644
index 80876125..00000000
--- a/DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityTest.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package de.greenrobot.daotest.entity;
-
-import junit.framework.Assert;
-import de.greenrobot.dao.test.AbstractDaoTestStringPk;
-import de.greenrobot.daotest.StringKeyValueEntity;
-import de.greenrobot.daotest.StringKeyValueEntityDao;
-
-public class StringKeyValueEntityTest extends AbstractDaoTestStringPk<StringKeyValueEntityDao, StringKeyValueEntity> {
-
-    public StringKeyValueEntityTest() {
-        super(StringKeyValueEntityDao.class);
-    }
-
-    @Override
-    protected StringKeyValueEntity createEntity(String key) {
-        StringKeyValueEntity entity = new StringKeyValueEntity();
-        entity.setKey(key);
-        return entity;
-    }
-
-    public void testInsertWithoutPK() {
-        StringKeyValueEntity entity = createEntity(null);
-        try {
-            dao.insert(entity);
-            Assert.fail("Insert without pre-set PK succeeded");
-        } catch (Exception e) {
-            // Expected
-        }
-    }
-
-}
diff --git a/DaoTestGenerator/build.gradle b/DaoTestGenerator/build.gradle
deleted file mode 100644
index fad5dbbd..00000000
--- a/DaoTestGenerator/build.gradle
+++ /dev/null
@@ -1,13 +0,0 @@
-apply plugin: 'java'
-
-sourceSets {
-    main {
-        java {
-            srcDir 'src'
-        }
-    }
-}
-
-dependencies {
-    compile project(':DaoGenerator')
-}
diff --git a/README.md b/README.md
index 5df7e694..b1a553de 100644
--- a/README.md
+++ b/README.md
@@ -1,8 +1,11 @@
-**Please help us with this short survey: http://bit.ly/greendao-survey Thanks for your support!**
+Check out ObjectBox
+===================
+
+Looking for object persistence faster than SQLite? Check out our new mobile database [ObjectBox](https://objectbox.io/) ([GitHub](https://github.com/objectbox/objectbox-java)). 
 
 greenDAO
 ========
-greenDAO is a light & fast ORM solution for Android that maps objects to SQLite databases. Being highly optimized for Android, greenDAO offers great performance and consumes minimal memory.
+greenDAO is a light & fast ORM for Android that maps objects to SQLite databases. Being highly optimized for Android, greenDAO offers great performance and consumes minimal memory.
 
 **<font size="+1">Home page, documentation, and support links: http://greenrobot.org/greendao/</font>**
 
@@ -10,48 +13,70 @@ greenDAO is a light & fast ORM solution for Android that maps objects to SQLite
 
 Features
 --------
-greenDAO has a unique set of features:
+greenDAO's unique set of features:
 
 * Rock solid: greenDAO has been around since 2011 and is used by countless famous apps
-* Super simple: concise and straight-forward API
-* Small: The library is <100K and it's just plain Java jar (no CPU dependent native parts)
+* Super simple: concise and straight-forward API, in V3 with annotations
+* Small: The library is <150K and it's just plain Java jar (no CPU dependent native parts)
 * Fast: Probably the fastest ORM for Android, driven by intelligent code generation
 * Safe and expressive query API: QueryBuilder uses property constants to avoid typos
-* V2.0.0 Powerful joins: query across entities and even chain joins for complex relations
-* V2.0.0 Flexible property types: use custom classes or enums to represent data in your entity
-
+* Powerful joins: query across entities and even chain joins for complex relations
+* Flexible property types: use custom classes or enums to represent data in your entity
+* Encryption: supports SQLCipher encrypted databases
 
 Add greenDAO to your project
 ----------------------------
-greenDAO is available on Maven Central. Please ensure that you are using the latest versions by [checking here](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22greendao%22) [and here](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22greendao-generator%22)
+greenDAO is available on Maven Central. Please ensure that you are using the latest versions of the [greendao](https://search.maven.org/search?q=g:org.greenrobot%20AND%20a:greendao) and [greendao-gradle-plugin](https://search.maven.org/search?q=g:org.greenrobot%20AND%20a:greendao-gradle-plugin) artifact.
 
-Gradle dependency for your Android app:
+Add the following Gradle configuration to your Android project. In your root `build.gradle` file:
+```groovy
+buildscript {
+    repositories {
+        jcenter()
+        mavenCentral() // add repository
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:3.1.1'
+        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.2' // add plugin
+    }
+}
 ```
-    compile 'de.greenrobot:greendao:2.0.0'
+In your app modules `app/build.gradle` file:
+```groovy
+apply plugin: 'com.android.application'
+apply plugin: 'org.greenrobot.greendao' // apply plugin
+ 
+dependencies {
+    implementation 'org.greenrobot:greendao:3.2.2' // add library
+}
 ```
 
-Gradle dependency for your Java generator project:
-```
-    compile 'de.greenrobot:greendao-generator:2.0.0'
-```
+Note that this hooks up the greenDAO Gradle plugin to your build process. When you build your project, it generates classes like DaoMaster, DaoSession and DAOs.
+
+Continue at the [Getting Started](http://greenrobot.org/greendao/documentation/how-to-get-started/) page.
+
+Homepage, Documentation, Links
+------------------------------
+For more details on greenDAO please check [greenDAO's website](http://greenrobot.org/greendao). Here are some direct links you may find useful:
+
+[Features](http://greenrobot.org/greendao/features/)
 
+[Getting Started](http://greenrobot.org/greendao/documentation/how-to-get-started/)
 
-Features in Beta
-----------------
-Those features are already here for you to try out. Note: Documentation and test coverage may be lacking, and the API may change in the future.
-### Asynchronous API
-* New AsyncSession (acquired from DaoSession.startAsyncSession()) provides most operations for DAOs, Queries, and transactions in a asynchronously variant
-* AsyncOperations are processed in order by a background thread
-* waitForCompletion methods for AsyncSession and AsyncOperations
-* AsyncOperationListener for asynchronous callback when operations complete
-* Asynchronous operations can be merged in single transactions (details follow)
-* Added raw SQL queries returning a Query object (LazyList support etc.)
+[Documentation](http://greenrobot.org/greendao/documentation/)
+
+[Changelog](http://greenrobot.org/greendao/changelog/)
+
+[Technical FAQ](http://greenrobot.org/greendao/documentation/technical-faq/) (incl. ProGuard rules)
+
+[Non-Technical FAQ](http://greenrobot.org/greendao/documentation/faq/)
+
+[Migrating to greenDAO 3](http://greenrobot.org/greendao/documentation/updating-to-greendao-3-and-annotations/)
 
 More Open Source by greenrobot
 ==============================
-[__EventBus__](https://github.com/greenrobot/EventBus) is a central publish/subscribe bus for Android with optional delivery threads, priorities, and sticky events. A great tool to decouple components (e.g. Activities, Fragments, logic components) from each other.
-
-[__greenrobot-common__](https://github.com/greenrobot/greenrobot-common) is a set of utility classes and hash functions for Android & Java projects.
+[__ObjectBox__](https://github.com/objectbox/objectbox-java) is a new superfast object-oriented database for mobile.
 
-[Follow us on Google+](https://plus.google.com/b/114381455741141514652/+GreenrobotDe/posts) to stay up to date.
+[__EventBus__](https://github.com/greenrobot/EventBus) is a central publish/subscribe bus for Android with optional delivery threads, priorities, and sticky events. A great tool to decouple components (e.g. Activities, Fragments, logic components) from each other.
 
+[__Essentials__](https://github.com/greenrobot/essentials) is a set of utility classes and hash functions for Android & Java projects.
diff --git a/build.gradle b/build.gradle
index 6a01e479..8a526a49 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,18 +1,115 @@
+// Sub projects may reference rootProject.version
+version = '3.2.3-SNAPSHOT'
+
+task wrapper(type: Wrapper) {
+    group 'build setup'
+    gradleVersion = '4.6'
+    distributionType = org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL
+}
+
+ext {
+    compileSdkVersion = 27
+
+    minSdkVersion = 7
+    targetSdkVersion = 25
+
+    // common dependencies for Android projects (not to be used in example projects for better copy and paste)
+    dep = [
+            androidPlugin: 'com.android.tools.build:gradle:3.2.1',
+            greendaoPlugin: 'org.greenrobot:greendao-gradle-plugin:3.2.2'
+    ]
+}
+
+if (JavaVersion.current().isJava8Compatible()) {
+    allprojects {
+        tasks.withType(Javadoc) {
+            options.addStringOption('Xdoclint:none', '-quiet')
+        }
+    }
+}
+
 subprojects {
+    apply plugin: 'maven'
+    apply plugin: 'signing'
+
     repositories {
         mavenCentral()
         jcenter()
+        google()
     }
-}
 
-task wrapper(type: Wrapper) {
-    gradleVersion = '2.4'
-}
+    configurations {
+        deployerJars
+    }
 
-ext {
-    buildToolsVersion = '23.0.1'
-    compileSdkVersion = 23
+    dependencies {
+        deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
+    }
+
+    signing {
+        if (project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&
+                project.hasProperty('signing.secretKeyRingFile')) {
+            sign configurations.archives
+        } else {
+            println "Signing information missing/incomplete for ${project.name}"
+        }
+    }
 
-    minSdkVersion = 4
-    targetSdkVersion = 19
-}
\ No newline at end of file
+    // Use afterEvaluate or all dependencies will be lost in the generated POM
+    afterEvaluate {
+        uploadArchives {
+            repositories {
+                mavenDeployer {
+                    def isSnapshot = version.endsWith('-SNAPSHOT')
+                    def sonatypeRepositoryUrl = isSnapshot ?
+                            "https://oss.sonatype.org/content/repositories/snapshots/"
+                            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
+                    if (project.hasProperty('preferedRepo') && preferedRepo == 'local') {
+                        repository url: repositories.mavenLocal().url
+                    } else if (project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername')
+                            && project.hasProperty('preferedPassword')) {
+                        configuration = configurations.deployerJars
+                        repository(url: preferedRepo) {
+                            authentication(userName: preferedUsername, password: preferedPassword)
+                        }
+                    } else if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
+                        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+                        repository(url: sonatypeRepositoryUrl) {
+                            authentication(userName: sonatypeUsername, password: sonatypePassword)
+                        }
+                    } else {
+                        println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}"
+                    }
+
+                    pom.project {
+                        packaging 'jar'
+                        url 'http://greenrobot.org/greendao'
+
+                        scm {
+                            url 'https://github.com/greenrobot/greenDAO'
+                            connection 'scm:git@github.com:greenrobot/greenDAO.git'
+                            developerConnection 'scm:git@github.com:greenrobot/greenDAO.git'
+                        }
+
+                        developers {
+                            developer {
+                                id 'greenrobot'
+                                name 'greenrobot'
+                            }
+                        }
+
+                        issueManagement {
+                            system 'GitHub Issues'
+                            url 'https://github.com/greenrobot/greenDAO/issues'
+                        }
+
+                        organization {
+                            name 'greenrobot'
+                            url 'http://greenrobot.org'
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/ci/wait_for_emulator b/ci/wait_for_emulator
deleted file mode 100644
index 207f028c..00000000
--- a/ci/wait_for_emulator
+++ /dev/null
@@ -1,17 +0,0 @@
-#!/bin/bash
-
-bootanim=""
-failcounter=0
-until [[ "$bootanim" =~ "stopped" ]]; do
-   bootanim=`adb -e shell getprop init.svc.bootanim 2>&1`
-   echo "$bootanim"
-   if [[ "$bootanim" =~ "not found" ]]; then
-      let "failcounter += 1"
-      if [[ $failcounter -gt 3 ]]; then
-        echo "Failed to start emulator"
-        exit 1
-      fi
-   fi
-   sleep 1
-done
-echo "Done"
\ No newline at end of file
diff --git a/examples/DaoExample/build.gradle b/examples/DaoExample/build.gradle
new file mode 100644
index 00000000..2f7a5f2f
--- /dev/null
+++ b/examples/DaoExample/build.gradle
@@ -0,0 +1,45 @@
+buildscript {
+    repositories {
+        jcenter()
+        google()
+        mavenCentral()
+    }
+
+    dependencies {
+        classpath 'com.android.tools.build:gradle:3.2.1'
+        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.2'
+    }
+}
+
+apply plugin: 'com.android.application'
+apply plugin: 'org.greenrobot.greendao'
+
+android {
+    compileSdkVersion 27
+
+    defaultConfig {
+        applicationId "org.greenrobot.greendao.example"
+        minSdkVersion 15
+        targetSdkVersion 27
+        versionCode 1
+        versionName "3"
+
+        testInstrumentationRunner "android.test.InstrumentationTestRunner"
+    }
+}
+
+greendao {
+    schemaVersion 1000
+}
+
+dependencies {
+    implementation 'org.greenrobot:greendao:3.2.2'
+
+    // optional: add if you want to use encrypted databases, see the App class for details
+    // implementation 'net.zetetic:android-database-sqlcipher:3.5.6'
+
+    implementation 'com.android.support:appcompat-v7:27.1.1'
+    implementation 'com.android.support:recyclerview-v7:27.1.1'
+}
+
+uploadArchives.enabled = false
diff --git a/DaoExample/src/androidTest/Java/de/greenrobot/daoexample/NoteTest.java b/examples/DaoExample/src/androidTest/java/org/greenrobot/greendao/example/NoteTest.java
similarity index 90%
rename from DaoExample/src/androidTest/Java/de/greenrobot/daoexample/NoteTest.java
rename to examples/DaoExample/src/androidTest/java/org/greenrobot/greendao/example/NoteTest.java
index ab57058f..a77e0cbb 100644
--- a/DaoExample/src/androidTest/Java/de/greenrobot/daoexample/NoteTest.java
+++ b/examples/DaoExample/src/androidTest/java/org/greenrobot/greendao/example/NoteTest.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.daoexample;
+package org.greenrobot.greendao.example;
 
-import de.greenrobot.dao.test.AbstractDaoTestLongPk;
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
 
 public class NoteTest extends AbstractDaoTestLongPk<NoteDao, Note> {
 
diff --git a/DaoExample/src/main/AndroidManifest.xml b/examples/DaoExample/src/main/AndroidManifest.xml
similarity index 65%
rename from DaoExample/src/main/AndroidManifest.xml
rename to examples/DaoExample/src/main/AndroidManifest.xml
index c46d2e15..56128d69 100644
--- a/DaoExample/src/main/AndroidManifest.xml
+++ b/examples/DaoExample/src/main/AndroidManifest.xml
@@ -1,14 +1,18 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.daoexample">
+    package="org.greenrobot.greendao.example">
 
     <application
-        android:icon="@drawable/icon"
+        android:name=".App"
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
         android:label="@string/app_name"
-        android:allowBackup="true">
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme">
         <activity android:name=".NoteActivity">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
+
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
diff --git a/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/App.java b/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/App.java
new file mode 100644
index 00000000..0586e928
--- /dev/null
+++ b/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/App.java
@@ -0,0 +1,30 @@
+package org.greenrobot.greendao.example;
+
+import android.app.Application;
+
+import org.greenrobot.greendao.database.Database;
+
+public class App extends Application {
+
+    private DaoSession daoSession;
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+
+        // regular SQLite database
+        DaoMaster.DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, "notes-db");
+        Database db = helper.getWritableDb();
+
+        // encrypted SQLCipher database
+        // note: you need to add SQLCipher to your dependencies, check the build.gradle file
+        // DaoMaster.DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, "notes-db-encrypted");
+        // Database db = helper.getEncryptedWritableDb("encryption-key");
+
+        daoSession = new DaoMaster(db).newSession();
+    }
+
+    public DaoSession getDaoSession() {
+        return daoSession;
+    }
+}
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/Note.java b/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/Note.java
similarity index 50%
rename from DaoExample/src/main/java/de/greenrobot/daoexample/Note.java
rename to examples/DaoExample/src/main/java/org/greenrobot/greendao/example/Note.java
index e8d9e1e9..f24efbb4 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/Note.java
+++ b/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/Note.java
@@ -1,17 +1,32 @@
-package de.greenrobot.daoexample;
+package org.greenrobot.greendao.example;
+
+import org.greenrobot.greendao.annotation.Convert;
+import org.greenrobot.greendao.annotation.Entity;
+import org.greenrobot.greendao.annotation.Generated;
+import org.greenrobot.greendao.annotation.Id;
+import org.greenrobot.greendao.annotation.Index;
+import org.greenrobot.greendao.annotation.NotNull;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "NOTE".
  */
+@Entity(indexes = {
+    @Index(value = "text, date DESC", unique = true)
+})
 public class Note {
 
+    @Id
     private Long id;
-    /** Not-null value. */
+
+    @NotNull
     private String text;
     private String comment;
     private java.util.Date date;
 
+    @Convert(converter = NoteTypeConverter.class, columnType = String.class)
+    private NoteType type;
+
+    @Generated(hash = 1272611929)
     public Note() {
     }
 
@@ -19,11 +34,13 @@ public Note(Long id) {
         this.id = id;
     }
 
-    public Note(Long id, String text, String comment, java.util.Date date) {
+    @Generated(hash = 1686394253)
+    public Note(Long id, @NotNull String text, String comment, java.util.Date date, NoteType type) {
         this.id = id;
         this.text = text;
         this.comment = comment;
         this.date = date;
+        this.type = type;
     }
 
     public Long getId() {
@@ -34,13 +51,13 @@ public void setId(Long id) {
         this.id = id;
     }
 
-    /** Not-null value. */
+    @NotNull
     public String getText() {
         return text;
     }
 
     /** Not-null value; ensure this value is available before it is saved to the database. */
-    public void setText(String text) {
+    public void setText(@NotNull String text) {
         this.text = text;
     }
 
@@ -60,4 +77,12 @@ public void setDate(java.util.Date date) {
         this.date = date;
     }
 
+    public NoteType getType() {
+        return type;
+    }
+
+    public void setType(NoteType type) {
+        this.type = type;
+    }
+
 }
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/NoteActivity.java b/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/NoteActivity.java
similarity index 56%
rename from DaoExample/src/main/java/de/greenrobot/daoexample/NoteActivity.java
rename to examples/DaoExample/src/main/java/org/greenrobot/greendao/example/NoteActivity.java
index 48a3ba53..648ce8cc 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/NoteActivity.java
+++ b/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/NoteActivity.java
@@ -13,15 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.daoexample;
+package org.greenrobot.greendao.example;
 
-import java.text.DateFormat;
-import java.util.Date;
-
-import android.app.ListActivity;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
 import android.text.Editable;
 import android.text.TextWatcher;
 import android.util.Log;
@@ -29,51 +26,59 @@
 import android.view.View;
 import android.view.inputmethod.EditorInfo;
 import android.widget.EditText;
-import android.widget.ListView;
-import android.widget.SimpleCursorAdapter;
 import android.widget.TextView;
 import android.widget.TextView.OnEditorActionListener;
-import de.greenrobot.daoexample.DaoMaster.DevOpenHelper;
 
-public class NoteActivity extends ListActivity {
+import org.greenrobot.greendao.query.Query;
+
+import java.text.DateFormat;
+import java.util.Date;
+import java.util.List;
 
-    private SQLiteDatabase db;
+public class NoteActivity extends AppCompatActivity {
 
     private EditText editText;
+    private View addNoteButton;
 
-    private DaoMaster daoMaster;
-    private DaoSession daoSession;
     private NoteDao noteDao;
-
-    private Cursor cursor;
+    private Query<Note> notesQuery;
+    private NotesAdapter notesAdapter;
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-
         setContentView(R.layout.main);
 
-        DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, "notes-db", null);
-        db = helper.getWritableDatabase();
-        daoMaster = new DaoMaster(db);
-        daoSession = daoMaster.newSession();
-        noteDao = daoSession.getNoteDao();
+        setUpViews();
 
-        String textColumn = NoteDao.Properties.Text.columnName;
-        String orderBy = textColumn + " COLLATE LOCALIZED ASC";
-        cursor = db.query(noteDao.getTablename(), noteDao.getAllColumns(), null, null, null, null, orderBy);
-        String[] from = { textColumn, NoteDao.Properties.Comment.columnName };
-        int[] to = { android.R.id.text1, android.R.id.text2 };
+        // get the note DAO
+        DaoSession daoSession = ((App) getApplication()).getDaoSession();
+        noteDao = daoSession.getNoteDao();
 
-        SimpleCursorAdapter adapter = new SimpleCursorAdapter(this, android.R.layout.simple_list_item_2, cursor, from,
-                to);
-        setListAdapter(adapter);
+        // query all notes, sorted a-z by their text
+        notesQuery = noteDao.queryBuilder().orderAsc(NoteDao.Properties.Text).build();
+        updateNotes();
+    }
 
-        editText = (EditText) findViewById(R.id.editTextNote);
-        addUiListeners();
+    private void updateNotes() {
+        List<Note> notes = notesQuery.list();
+        notesAdapter.setNotes(notes);
     }
 
-    protected void addUiListeners() {
+    protected void setUpViews() {
+        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recyclerViewNotes);
+        //noinspection ConstantConditions
+        recyclerView.setHasFixedSize(true);
+        recyclerView.setLayoutManager(new LinearLayoutManager(this));
+
+        notesAdapter = new NotesAdapter(noteClickListener);
+        recyclerView.setAdapter(notesAdapter);
+
+        addNoteButton = findViewById(R.id.buttonAdd);
+        //noinspection ConstantConditions
+        addNoteButton.setEnabled(false);
+
+        editText = (EditText) findViewById(R.id.editTextNote);
         editText.setOnEditorActionListener(new OnEditorActionListener() {
 
             @Override
@@ -85,15 +90,12 @@ public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                 return false;
             }
         });
-
-        final View button = findViewById(R.id.buttonAdd);
-        button.setEnabled(false);
         editText.addTextChangedListener(new TextWatcher() {
 
             @Override
             public void onTextChanged(CharSequence s, int start, int before, int count) {
                 boolean enable = s.length() != 0;
-                button.setEnabled(enable);
+                addNoteButton.setEnabled(enable);
             }
 
             @Override
@@ -106,7 +108,7 @@ public void afterTextChanged(Editable s) {
         });
     }
 
-    public void onMyButtonClick(View view) {
+    public void onAddButtonClick(View view) {
         addNote();
     }
 
@@ -116,18 +118,28 @@ private void addNote() {
 
         final DateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);
         String comment = "Added on " + df.format(new Date());
-        Note note = new Note(null, noteText, comment, new Date());
+
+        Note note = new Note();
+        note.setText(noteText);
+        note.setComment(comment);
+        note.setDate(new Date());
+        note.setType(NoteType.TEXT);
         noteDao.insert(note);
         Log.d("DaoExample", "Inserted new note, ID: " + note.getId());
 
-        cursor.requery();
+        updateNotes();
     }
 
-    @Override
-    protected void onListItemClick(ListView l, View v, int position, long id) {
-        noteDao.deleteByKey(id);
-        Log.d("DaoExample", "Deleted note, ID: " + id);
-        cursor.requery();
-    }
+    NotesAdapter.NoteClickListener noteClickListener = new NotesAdapter.NoteClickListener() {
+        @Override
+        public void onNoteClick(int position) {
+            Note note = notesAdapter.getNote(position);
+            Long noteId = note.getId();
+
+            noteDao.deleteByKey(noteId);
+            Log.d("DaoExample", "Deleted note, ID: " + noteId);
 
+            updateNotes();
+        }
+    };
 }
\ No newline at end of file
diff --git a/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/NoteType.java b/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/NoteType.java
new file mode 100644
index 00000000..3bdbe54f
--- /dev/null
+++ b/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/NoteType.java
@@ -0,0 +1,5 @@
+package org.greenrobot.greendao.example;
+
+public enum NoteType {
+    TEXT, LIST, PICTURE
+}
diff --git a/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/NoteTypeConverter.java b/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/NoteTypeConverter.java
new file mode 100644
index 00000000..0edfa300
--- /dev/null
+++ b/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/NoteTypeConverter.java
@@ -0,0 +1,15 @@
+package org.greenrobot.greendao.example;
+
+import org.greenrobot.greendao.converter.PropertyConverter;
+
+public class NoteTypeConverter implements PropertyConverter<NoteType, String> {
+    @Override
+    public NoteType convertToEntityProperty(String databaseValue) {
+        return NoteType.valueOf(databaseValue);
+    }
+
+    @Override
+    public String convertToDatabaseValue(NoteType entityProperty) {
+        return entityProperty.name();
+    }
+}
diff --git a/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/NotesAdapter.java b/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/NotesAdapter.java
new file mode 100644
index 00000000..41e6b12e
--- /dev/null
+++ b/examples/DaoExample/src/main/java/org/greenrobot/greendao/example/NotesAdapter.java
@@ -0,0 +1,73 @@
+package org.greenrobot.greendao.example;
+
+import android.support.annotation.NonNull;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+import java.util.ArrayList;
+import java.util.List;
+
+public class NotesAdapter extends RecyclerView.Adapter<NotesAdapter.NoteViewHolder> {
+
+    private NoteClickListener clickListener;
+    private List<Note> dataset;
+
+    public interface NoteClickListener {
+        void onNoteClick(int position);
+    }
+
+    static class NoteViewHolder extends RecyclerView.ViewHolder {
+
+        public TextView text;
+        public TextView comment;
+
+        public NoteViewHolder(View itemView, final NoteClickListener clickListener) {
+            super(itemView);
+            text = (TextView) itemView.findViewById(R.id.textViewNoteText);
+            comment = (TextView) itemView.findViewById(R.id.textViewNoteComment);
+            itemView.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    if (clickListener != null) {
+                        clickListener.onNoteClick(getAdapterPosition());
+                    }
+                }
+            });
+        }
+    }
+
+    public NotesAdapter(NoteClickListener clickListener) {
+        this.clickListener = clickListener;
+        this.dataset = new ArrayList<Note>();
+    }
+
+    public void setNotes(@NonNull List<Note> notes) {
+        dataset = notes;
+        notifyDataSetChanged();
+    }
+
+    public Note getNote(int position) {
+        return dataset.get(position);
+    }
+
+    @Override
+    public NotesAdapter.NoteViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        View view = LayoutInflater.from(parent.getContext())
+                .inflate(R.layout.item_note, parent, false);
+        return new NoteViewHolder(view, clickListener);
+    }
+
+    @Override
+    public void onBindViewHolder(NotesAdapter.NoteViewHolder holder, int position) {
+        Note note = dataset.get(position);
+        holder.text.setText(note.getText());
+        holder.comment.setText(note.getComment());
+    }
+
+    @Override
+    public int getItemCount() {
+        return dataset.size();
+    }
+}
diff --git a/examples/DaoExample/src/main/res/layout/item_note.xml b/examples/DaoExample/src/main/res/layout/item_note.xml
new file mode 100644
index 00000000..63d93142
--- /dev/null
+++ b/examples/DaoExample/src/main/res/layout/item_note.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:background="?android:attr/selectableItemBackground"
+    android:orientation="vertical"
+    android:padding="16dp">
+
+    <TextView
+        android:id="@+id/textViewNoteText"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:textSize="14sp"
+        tools:text="Note Text" />
+
+    <TextView
+        android:id="@+id/textViewNoteComment"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:textSize="12sp"
+        tools:text="Note Comment" />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/examples/DaoExample/src/main/res/layout/main.xml b/examples/DaoExample/src/main/res/layout/main.xml
new file mode 100644
index 00000000..ece296b7
--- /dev/null
+++ b/examples/DaoExample/src/main/res/layout/main.xml
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                xmlns:tools="http://schemas.android.com/tools"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:paddingBottom="@dimen/activity_vertical_margin"
+                android:paddingLeft="@dimen/activity_horizontal_margin"
+                android:paddingRight="@dimen/activity_horizontal_margin"
+                android:paddingTop="@dimen/activity_vertical_margin"
+                tools:context="org.greenrobot.greendao.example.NoteActivity"
+                tools:ignore="RtlHardcoded">
+
+    <Button
+        android:id="@+id/buttonAdd"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentRight="true"
+        android:onClick="onAddButtonClick"
+        android:text="@string/add"/>
+
+    <EditText
+        android:id="@+id/editTextNote"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_toLeftOf="@id/buttonAdd"
+        android:hint="@string/enter_new_note"
+        android:imeOptions="actionDone"
+        android:inputType="text"/>
+
+    <TextView
+        android:id="@+id/textViewNoteInstructions"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@id/editTextNote"
+        android:gravity="center_horizontal"
+        android:paddingBottom="8dp"
+        android:paddingLeft="8dp"
+        android:paddingRight="8dp"
+        android:text="@string/click_to_remove"
+        android:textSize="12sp"/>
+
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/recyclerViewNotes"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_below="@id/textViewNoteInstructions"
+        android:scrollbars="vertical"/>
+
+</RelativeLayout>
diff --git a/examples/DaoExample/src/main/res/mipmap-xhdpi/ic_launcher.png b/examples/DaoExample/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 00000000..324e72cd
Binary files /dev/null and b/examples/DaoExample/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/examples/DaoExample/src/main/res/mipmap-xxhdpi/ic_launcher.png b/examples/DaoExample/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 00000000..324e72cd
Binary files /dev/null and b/examples/DaoExample/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/examples/DaoExample/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/examples/DaoExample/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 00000000..324e72cd
Binary files /dev/null and b/examples/DaoExample/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/examples/DaoExample/src/main/res/values/colors.xml b/examples/DaoExample/src/main/res/values/colors.xml
new file mode 100644
index 00000000..3c4003c9
--- /dev/null
+++ b/examples/DaoExample/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#7FCD55</color>
+</resources>
diff --git a/examples/DaoExample/src/main/res/values/dimens.xml b/examples/DaoExample/src/main/res/values/dimens.xml
new file mode 100644
index 00000000..47c82246
--- /dev/null
+++ b/examples/DaoExample/src/main/res/values/dimens.xml
@@ -0,0 +1,5 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+</resources>
diff --git a/examples/DaoExample/src/main/res/values/strings.xml b/examples/DaoExample/src/main/res/values/strings.xml
new file mode 100644
index 00000000..39b0695d
--- /dev/null
+++ b/examples/DaoExample/src/main/res/values/strings.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <string name="app_name">greenDAO Note Example</string>
+
+    <string name="enter_new_note">Enter new note</string>
+    <string name="add">Add</string>
+    <string name="click_to_remove">Click a note to remove it</string>
+
+</resources>
diff --git a/examples/DaoExample/src/main/res/values/styles.xml b/examples/DaoExample/src/main/res/values/styles.xml
new file mode 100644
index 00000000..5885930d
--- /dev/null
+++ b/examples/DaoExample/src/main/res/values/styles.xml
@@ -0,0 +1,11 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+</resources>
diff --git a/examples/RxDaoExample/build.gradle b/examples/RxDaoExample/build.gradle
new file mode 100644
index 00000000..7aaaa026
--- /dev/null
+++ b/examples/RxDaoExample/build.gradle
@@ -0,0 +1,47 @@
+buildscript {
+    repositories {
+        jcenter()
+        google()
+        mavenCentral()
+    }
+
+    dependencies {
+        classpath 'com.android.tools.build:gradle:3.2.1'
+        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.2'
+    }
+}
+
+apply plugin: 'com.android.application'
+apply plugin: 'org.greenrobot.greendao'
+
+android {
+    compileSdkVersion 27
+
+    defaultConfig {
+        applicationId "org.greenrobot.greendao.rxexample"
+        minSdkVersion 15
+        targetSdkVersion 27
+        versionCode 1
+        versionName "1.0"
+    }
+}
+
+greendao {
+    schemaVersion 1000
+}
+
+dependencies {
+    implementation 'org.greenrobot:greendao:3.2.2'
+
+    // optional: add if you want to use encrypted databases, see the App class for details
+    // implementation 'net.zetetic:android-database-sqlcipher:3.5.6'
+
+    implementation 'com.jakewharton.rxbinding:rxbinding:1.0.1'
+    implementation 'io.reactivex:rxandroid:1.2.1'
+    implementation 'io.reactivex:rxjava:1.3.0'
+
+    implementation 'com.android.support:appcompat-v7:27.1.1'
+    implementation 'com.android.support:recyclerview-v7:27.1.1'
+}
+
+uploadArchives.enabled = false
diff --git a/examples/RxDaoExample/src/main/AndroidManifest.xml b/examples/RxDaoExample/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..e4f2c411
--- /dev/null
+++ b/examples/RxDaoExample/src/main/AndroidManifest.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="org.greenrobot.greendao.rxexample">
+
+    <application
+        android:name=".App"
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme">
+        <activity android:name=".MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
\ No newline at end of file
diff --git a/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/App.java b/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/App.java
new file mode 100644
index 00000000..5dcaba6d
--- /dev/null
+++ b/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/App.java
@@ -0,0 +1,30 @@
+package org.greenrobot.greendao.rxexample;
+
+import android.app.Application;
+
+import org.greenrobot.greendao.database.Database;
+
+public class App extends Application {
+
+    private DaoSession daoSession;
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+
+        // regular SQLite database
+        DaoMaster.DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, "notes-db");
+        Database db = helper.getWritableDb();
+
+        // encrypted SQLCipher database
+        // note: you need to add SQLCipher to your dependencies, check the build.gradle file
+        // DaoMaster.DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, "notes-db-encrypted");
+        // Database db = helper.getEncryptedWritableDb("encryption-key");
+
+        daoSession = new DaoMaster(db).newSession();
+    }
+
+    public DaoSession getDaoSession() {
+        return daoSession;
+    }
+}
diff --git a/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/MainActivity.java b/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/MainActivity.java
new file mode 100644
index 00000000..a5e7b53c
--- /dev/null
+++ b/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/MainActivity.java
@@ -0,0 +1,133 @@
+package org.greenrobot.greendao.rxexample;
+
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.util.Log;
+import android.view.View;
+import android.view.inputmethod.EditorInfo;
+import android.widget.EditText;
+
+import com.jakewharton.rxbinding.widget.RxTextView;
+import com.jakewharton.rxbinding.widget.TextViewAfterTextChangeEvent;
+
+import org.greenrobot.greendao.rx.RxDao;
+import org.greenrobot.greendao.rx.RxQuery;
+
+import java.text.DateFormat;
+import java.util.Date;
+import java.util.List;
+
+import rx.android.schedulers.AndroidSchedulers;
+import rx.functions.Action1;
+
+public class MainActivity extends AppCompatActivity {
+
+    private EditText editText;
+    private View addNoteButton;
+
+    private RxDao<Note, Long> noteDao;
+    private RxQuery<Note> notesQuery;
+    private NotesAdapter notesAdapter;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+
+        setUpViews();
+
+        // get the Rx variant of the note DAO
+        DaoSession daoSession = ((App) getApplication()).getDaoSession();
+        noteDao = daoSession.getNoteDao().rx();
+
+        // query all notes, sorted a-z by their text
+        notesQuery = daoSession.getNoteDao().queryBuilder().orderAsc(NoteDao.Properties.Text).rx();
+        updateNotes();
+    }
+
+    private void updateNotes() {
+        notesQuery.list()
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Action1<List<Note>>() {
+                    @Override
+                    public void call(List<Note> notes) {
+                        notesAdapter.setNotes(notes);
+                    }
+                });
+    }
+
+    protected void setUpViews() {
+        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recyclerViewNotes);
+        //noinspection ConstantConditions
+        recyclerView.setHasFixedSize(true);
+        recyclerView.setLayoutManager(new LinearLayoutManager(this));
+
+        notesAdapter = new NotesAdapter(noteClickListener);
+        recyclerView.setAdapter(notesAdapter);
+
+        addNoteButton = findViewById(R.id.buttonAdd);
+
+        editText = (EditText) findViewById(R.id.editTextNote);
+        //noinspection ConstantConditions
+        RxTextView.editorActions(editText).observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Action1<Integer>() {
+                    @Override
+                    public void call(Integer actionId) {
+                        if (actionId == EditorInfo.IME_ACTION_DONE) {
+                            addNote();
+                        }
+                    }
+                });
+        RxTextView.afterTextChangeEvents(editText).observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Action1<TextViewAfterTextChangeEvent>() {
+                    @Override
+                    public void call(TextViewAfterTextChangeEvent textViewAfterTextChangeEvent) {
+                        boolean enable = textViewAfterTextChangeEvent.editable().length() > 0;
+                        addNoteButton.setEnabled(enable);
+                    }
+                });
+    }
+
+    public void onAddButtonClick(View view) {
+        addNote();
+    }
+
+    private void addNote() {
+        String noteText = editText.getText().toString();
+        editText.setText("");
+
+        final DateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);
+        String comment = "Added on " + df.format(new Date());
+
+        Note note = new Note(null, noteText, comment, new Date(), NoteType.TEXT);
+        noteDao.insert(note)
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Action1<Note>() {
+                    @Override
+                    public void call(Note note) {
+                        Log.d("DaoExample", "Inserted new note, ID: " + note.getId());
+                        updateNotes();
+                    }
+                });
+    }
+
+    NotesAdapter.NoteClickListener noteClickListener = new NotesAdapter.NoteClickListener() {
+        @Override
+        public void onNoteClick(int position) {
+            Note note = notesAdapter.getNote(position);
+            final Long noteId = note.getId();
+
+            noteDao.deleteByKey(noteId)
+                    .observeOn(AndroidSchedulers.mainThread())
+                    .subscribe(new Action1<Void>() {
+                        @Override
+                        public void call(Void aVoid) {
+                            Log.d("DaoExample", "Deleted note, ID: " + noteId);
+                            updateNotes();
+                        }
+                    });
+        }
+    };
+}
diff --git a/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/Note.java b/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/Note.java
new file mode 100644
index 00000000..2e67125c
--- /dev/null
+++ b/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/Note.java
@@ -0,0 +1,88 @@
+package org.greenrobot.greendao.rxexample;
+
+import org.greenrobot.greendao.annotation.Convert;
+import org.greenrobot.greendao.annotation.Entity;
+import org.greenrobot.greendao.annotation.Generated;
+import org.greenrobot.greendao.annotation.Id;
+import org.greenrobot.greendao.annotation.Index;
+import org.greenrobot.greendao.annotation.NotNull;
+
+/**
+ * Entity mapped to table "NOTE".
+ */
+@Entity(indexes = {
+    @Index(value = "text, date DESC", unique = true)
+})
+public class Note {
+
+    @Id
+    private Long id;
+
+    @NotNull
+    private String text;
+    private String comment;
+    private java.util.Date date;
+
+    @Convert(converter = NoteTypeConverter.class, columnType = String.class)
+    private NoteType type;
+
+    @Generated(hash = 1272611929)
+    public Note() {
+    }
+
+    public Note(Long id) {
+        this.id = id;
+    }
+
+    @Generated(hash = 1686394253)
+    public Note(Long id, @NotNull String text, String comment, java.util.Date date, NoteType type) {
+        this.id = id;
+        this.text = text;
+        this.comment = comment;
+        this.date = date;
+        this.type = type;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    @NotNull
+    public String getText() {
+        return text;
+    }
+
+    /** Not-null value; ensure this value is available before it is saved to the database. */
+    public void setText(@NotNull String text) {
+        this.text = text;
+    }
+
+    public String getComment() {
+        return comment;
+    }
+
+    public void setComment(String comment) {
+        this.comment = comment;
+    }
+
+    public java.util.Date getDate() {
+        return date;
+    }
+
+    public void setDate(java.util.Date date) {
+        this.date = date;
+    }
+
+    public NoteType getType() {
+        return type;
+    }
+
+    public void setType(NoteType type) {
+        this.type = type;
+    }
+
+}
diff --git a/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/NoteType.java b/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/NoteType.java
new file mode 100644
index 00000000..980e136f
--- /dev/null
+++ b/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/NoteType.java
@@ -0,0 +1,5 @@
+package org.greenrobot.greendao.rxexample;
+
+public enum NoteType {
+    TEXT, LIST, PICTURE
+}
diff --git a/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/NoteTypeConverter.java b/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/NoteTypeConverter.java
new file mode 100644
index 00000000..3ce667a5
--- /dev/null
+++ b/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/NoteTypeConverter.java
@@ -0,0 +1,15 @@
+package org.greenrobot.greendao.rxexample;
+
+import org.greenrobot.greendao.converter.PropertyConverter;
+
+public class NoteTypeConverter implements PropertyConverter<NoteType, String> {
+    @Override
+    public NoteType convertToEntityProperty(String databaseValue) {
+        return NoteType.valueOf(databaseValue);
+    }
+
+    @Override
+    public String convertToDatabaseValue(NoteType entityProperty) {
+        return entityProperty.name();
+    }
+}
diff --git a/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/NotesAdapter.java b/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/NotesAdapter.java
new file mode 100644
index 00000000..fc2a1172
--- /dev/null
+++ b/examples/RxDaoExample/src/main/java/org/greenrobot/greendao/rxexample/NotesAdapter.java
@@ -0,0 +1,74 @@
+package org.greenrobot.greendao.rxexample;
+
+import android.support.annotation.NonNull;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class NotesAdapter extends RecyclerView.Adapter<NotesAdapter.NoteViewHolder> {
+
+    private NoteClickListener clickListener;
+    private List<Note> dataset;
+
+    public interface NoteClickListener {
+        void onNoteClick(int position);
+    }
+
+    static class NoteViewHolder extends RecyclerView.ViewHolder {
+
+        public TextView text;
+        public TextView comment;
+
+        public NoteViewHolder(View itemView, final NoteClickListener clickListener) {
+            super(itemView);
+            text = (TextView) itemView.findViewById(R.id.textViewNoteText);
+            comment = (TextView) itemView.findViewById(R.id.textViewNoteComment);
+            itemView.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    if (clickListener != null) {
+                        clickListener.onNoteClick(getAdapterPosition());
+                    }
+                }
+            });
+        }
+    }
+
+    public NotesAdapter(NoteClickListener clickListener) {
+        this.clickListener = clickListener;
+        this.dataset = new ArrayList<Note>();
+    }
+
+    public void setNotes(@NonNull List<Note> notes) {
+        dataset = notes;
+        notifyDataSetChanged();
+    }
+
+    public Note getNote(int position) {
+        return dataset.get(position);
+    }
+
+    @Override
+    public NotesAdapter.NoteViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        View view = LayoutInflater.from(parent.getContext())
+                .inflate(R.layout.item_note, parent, false);
+        return new NoteViewHolder(view, clickListener);
+    }
+
+    @Override
+    public void onBindViewHolder(NotesAdapter.NoteViewHolder holder, int position) {
+        Note note = dataset.get(position);
+        holder.text.setText(note.getText());
+        holder.comment.setText(note.getComment());
+    }
+
+    @Override
+    public int getItemCount() {
+        return dataset.size();
+    }
+}
diff --git a/examples/RxDaoExample/src/main/res/layout/activity_main.xml b/examples/RxDaoExample/src/main/res/layout/activity_main.xml
new file mode 100644
index 00000000..83ac183b
--- /dev/null
+++ b/examples/RxDaoExample/src/main/res/layout/activity_main.xml
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                xmlns:tools="http://schemas.android.com/tools"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:paddingBottom="@dimen/activity_vertical_margin"
+                android:paddingLeft="@dimen/activity_horizontal_margin"
+                android:paddingRight="@dimen/activity_horizontal_margin"
+                android:paddingTop="@dimen/activity_vertical_margin"
+                tools:context="org.greenrobot.greendao.rxexample.MainActivity"
+                tools:ignore="RtlHardcoded">
+
+    <Button
+        android:id="@+id/buttonAdd"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentRight="true"
+        android:onClick="onAddButtonClick"
+        android:text="@string/add"/>
+
+    <EditText
+        android:id="@+id/editTextNote"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_toLeftOf="@id/buttonAdd"
+        android:hint="@string/enter_new_note"
+        android:imeOptions="actionDone"
+        android:inputType="text"/>
+
+    <TextView
+        android:id="@+id/textViewNoteInstructions"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@id/editTextNote"
+        android:gravity="center_horizontal"
+        android:paddingBottom="8dp"
+        android:paddingLeft="8dp"
+        android:paddingRight="8dp"
+        android:text="@string/click_to_remove"
+        android:textSize="12sp"/>
+
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/recyclerViewNotes"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_below="@id/textViewNoteInstructions"
+        android:scrollbars="vertical"/>
+
+</RelativeLayout>
diff --git a/examples/RxDaoExample/src/main/res/layout/item_note.xml b/examples/RxDaoExample/src/main/res/layout/item_note.xml
new file mode 100644
index 00000000..63d93142
--- /dev/null
+++ b/examples/RxDaoExample/src/main/res/layout/item_note.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:background="?android:attr/selectableItemBackground"
+    android:orientation="vertical"
+    android:padding="16dp">
+
+    <TextView
+        android:id="@+id/textViewNoteText"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:textSize="14sp"
+        tools:text="Note Text" />
+
+    <TextView
+        android:id="@+id/textViewNoteComment"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:textSize="12sp"
+        tools:text="Note Comment" />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/examples/RxDaoExample/src/main/res/mipmap-xhdpi/ic_launcher.png b/examples/RxDaoExample/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 00000000..324e72cd
Binary files /dev/null and b/examples/RxDaoExample/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/examples/RxDaoExample/src/main/res/mipmap-xxhdpi/ic_launcher.png b/examples/RxDaoExample/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 00000000..324e72cd
Binary files /dev/null and b/examples/RxDaoExample/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/examples/RxDaoExample/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/examples/RxDaoExample/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 00000000..324e72cd
Binary files /dev/null and b/examples/RxDaoExample/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/examples/RxDaoExample/src/main/res/values/colors.xml b/examples/RxDaoExample/src/main/res/values/colors.xml
new file mode 100644
index 00000000..3c4003c9
--- /dev/null
+++ b/examples/RxDaoExample/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#7FCD55</color>
+</resources>
diff --git a/examples/RxDaoExample/src/main/res/values/dimens.xml b/examples/RxDaoExample/src/main/res/values/dimens.xml
new file mode 100644
index 00000000..47c82246
--- /dev/null
+++ b/examples/RxDaoExample/src/main/res/values/dimens.xml
@@ -0,0 +1,5 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+</resources>
diff --git a/examples/RxDaoExample/src/main/res/values/strings.xml b/examples/RxDaoExample/src/main/res/values/strings.xml
new file mode 100644
index 00000000..c4227e6e
--- /dev/null
+++ b/examples/RxDaoExample/src/main/res/values/strings.xml
@@ -0,0 +1,9 @@
+<resources>
+
+    <string name="app_name">greenDAO Rx Note Example</string>
+
+    <string name="enter_new_note">Enter new note</string>
+    <string name="add">Add</string>
+    <string name="click_to_remove">Click a note to remove it</string>
+
+</resources>
diff --git a/examples/RxDaoExample/src/main/res/values/styles.xml b/examples/RxDaoExample/src/main/res/values/styles.xml
new file mode 100644
index 00000000..5885930d
--- /dev/null
+++ b/examples/RxDaoExample/src/main/res/values/styles.xml
@@ -0,0 +1,11 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+</resources>
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index b5166dad..883d1999 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index a198531e..6828f128 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Jun 22 22:22:22 CEST 2015
+#Tue Apr 17 14:24:16 CEST 2018
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.4-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-all.zip
diff --git a/gradlew b/gradlew
index 91a7e269..4453ccea 100755
--- a/gradlew
+++ b/gradlew
@@ -1,4 +1,4 @@
-#!/usr/bin/env bash
+#!/usr/bin/env sh
 
 ##############################################################################
 ##
@@ -6,12 +6,30 @@
 ##
 ##############################################################################
 
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
 
 APP_NAME="Gradle"
 APP_BASE_NAME=`basename "$0"`
 
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
@@ -30,6 +48,7 @@ die ( ) {
 cygwin=false
 msys=false
 darwin=false
+nonstop=false
 case "`uname`" in
   CYGWIN* )
     cygwin=true
@@ -40,31 +59,11 @@ case "`uname`" in
   MINGW* )
     msys=true
     ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
-APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
-
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
 # Determine the Java command to use to start the JVM.
@@ -90,7 +89,7 @@ location of your Java installation."
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
     MAX_FD_LIMIT=`ulimit -H -n`
     if [ $? -eq 0 ] ; then
         if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
@@ -114,6 +113,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
@@ -154,11 +154,19 @@ if $cygwin ; then
     esac
 fi
 
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
+# Escape application args
+save ( ) {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
 }
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+APP_ARGS=$(save "$@")
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
 
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
+exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
index 8a0b282a..f9553162 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -8,14 +8,14 @@
 @rem Set local scope for the variables with windows NT shell
 if "%OS%"=="Windows_NT" setlocal
 
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
 set DIRNAME=%~dp0
 if "%DIRNAME%" == "" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
 @rem Find java.exe
 if defined JAVA_HOME goto findJavaFromJavaHome
 
@@ -46,10 +46,9 @@ echo location of your Java installation.
 goto fail
 
 :init
-@rem Get command-line arguments, handling Windowz variants
+@rem Get command-line arguments, handling Windows variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
 
 :win9xME_args
 @rem Slurp the command line arguments.
@@ -60,11 +59,6 @@ set _SKIP=2
 if "x%~1" == "x" goto execute
 
 set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
 
 :execute
 @rem Setup the command line
diff --git a/greendao-api/LICENSE b/greendao-api/LICENSE
new file mode 100644
index 00000000..d6456956
--- /dev/null
+++ b/greendao-api/LICENSE
@@ -0,0 +1,202 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
diff --git a/greendao-api/NOTICE b/greendao-api/NOTICE
new file mode 100644
index 00000000..27fa2131
--- /dev/null
+++ b/greendao-api/NOTICE
@@ -0,0 +1,4 @@
+greenrobot greenDAO (c) Copyright 2011-2016 by Markus Junginger / greenrobot.org
+All rights reserved
+
+This product includes software developed at greenrobot.org
\ No newline at end of file
diff --git a/greendao-api/build.gradle b/greendao-api/build.gradle
new file mode 100644
index 00000000..58372fe5
--- /dev/null
+++ b/greendao-api/build.gradle
@@ -0,0 +1,55 @@
+apply plugin: 'java'
+
+group = 'org.greenrobot'
+version = rootProject.version
+
+sourceCompatibility = 1.7
+targetCompatibility = 1.7
+
+javadoc {
+    failOnError = false
+    title = " greenDAO API ${version} API"
+    options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2011-2017 <a href="http://greenrobot.org/">greenrobot.org</a>. All Rights Reserved.</i>'
+    doLast {
+        copy {
+            from '../javadoc-style'
+            into "build/docs/javadoc/"
+        }
+    }
+}
+
+task javadocJar(type: Jar, dependsOn: javadoc) {
+    classifier = 'javadoc'
+    from 'build/docs/javadoc'
+}
+
+task sourcesJar(type: Jar) {
+    from sourceSets.main.allSource
+    classifier = 'sources'
+}
+
+artifacts {
+    archives jar
+    archives javadocJar
+    archives sourcesJar
+}
+
+uploadArchives {
+    repositories {
+        mavenDeployer {
+            // Basic definitions are defined in root project
+            pom.project {
+                name 'greenDAO API'
+                description 'greenDAO is a light and fast ORM for Android'
+
+                licenses {
+                    license {
+                        name 'The Apache Software License, Version 2.0'
+                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
+                        distribution 'repo'
+                    }
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Convert.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Convert.java
new file mode 100644
index 00000000..e312b43b
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Convert.java
@@ -0,0 +1,24 @@
+package org.greenrobot.greendao.annotation;
+
+import org.greenrobot.greendao.converter.PropertyConverter;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Specifies {@link PropertyConverter} for the field to support custom types
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.FIELD)
+public @interface Convert {
+    /** Converter class */
+    Class<? extends PropertyConverter> converter();
+
+    /**
+     * Class of the column which can be persisted in DB.
+     * This is limited to all java classes which are supported natively by greenDAO.
+     */
+    Class columnType();
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Entity.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Entity.java
new file mode 100644
index 00000000..ef5bf619
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Entity.java
@@ -0,0 +1,62 @@
+package org.greenrobot.greendao.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Annotation for entities
+ * greenDAO only persist objects of classes which are marked with this annotation
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.TYPE)
+public @interface Entity {
+
+    /**
+     * Specifies the name on the DB side (e.g. table name) this entity maps to. By default, the name is based on the entities class name.
+     */
+    String nameInDb() default "";
+
+    /**
+     * Indexes for the entity.
+     * <p/>
+     * Note: To create a single-column index consider using {@link Index} on the property itself
+     */
+    Index[] indexes() default {};
+
+    /**
+     * Advanced flag to disable table creation in the database (when set to false). This can be used to create partial
+     * entities, which may use only a sub set of properties. Be aware however that greenDAO does not sync multiple
+     * entities, e.g. in caches.
+     */
+    boolean createInDb() default true;
+
+    /**
+     * Specifies schema name for the entity: greenDAO can generate independent sets of classes for each schema.
+     * Entities which belong to different schemas should <strong>not</strong> have relations.
+     */
+    String schema() default "default";
+
+    /**
+     * Whether update/delete/refresh methods should be generated.
+     * If entity has defined {@link ToMany} or {@link ToOne} relations, then it is active independently from this value
+     */
+    boolean active() default false;
+
+    /**
+     * Whether an all properties constructor should be generated. A no-args constructor is always required.
+     */
+    boolean generateConstructors() default true;
+
+    /**
+     * Whether getters and setters for properties should be generated if missing.
+     */
+    boolean generateGettersSetters() default true;
+
+    /**
+     * Define a protobuf class of this entity to create an additional, special DAO for.
+     */
+    Class protobuf() default void.class;
+
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Generated.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Generated.java
new file mode 100644
index 00000000..183d6ed7
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Generated.java
@@ -0,0 +1,19 @@
+package org.greenrobot.greendao.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Marks that a field, constructor or method was generated by greenDAO
+ * All the code elements that are marked with this annotation can be changed/removed during next run of generation in
+ * respect of model changes.
+ *
+ * @see Keep
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target({ElementType.FIELD, ElementType.CONSTRUCTOR, ElementType.METHOD})
+public @interface Generated {
+    int hash() default -1;
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Id.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Id.java
new file mode 100644
index 00000000..fbbc2fee
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Id.java
@@ -0,0 +1,20 @@
+package org.greenrobot.greendao.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Marks field is the primary key of the entity's table
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.FIELD)
+public @interface Id {
+    /**
+     * Specifies that id should be auto-incremented (works only for Long/long fields)
+     * Autoincrement on SQLite introduces additional resources usage and usually can be avoided
+     * @see <a href="https://www.sqlite.org/autoinc.html">SQLite documentation</a>
+     */
+    boolean autoincrement() default false;
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Index.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Index.java
new file mode 100644
index 00000000..ce4c7688
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Index.java
@@ -0,0 +1,35 @@
+package org.greenrobot.greendao.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Can be used to:
+ * - specifies that the property should be indexed
+ * - define multi-column index through {@link Entity#indexes()}
+ *
+ * @see Entity#indexes()
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.FIELD)
+public @interface Index {
+    /**
+     * Comma-separated list of properties that should be indexed, e.g. "propertyA, propertyB, propertyC"
+     * To specify order, add ASC or DESC after column name, e.g.: "propertyA DESC, propertyB ASC"
+     * This should be only set if this annotation is used in {@link Entity#indexes()}
+     */
+    String value() default "";
+
+    /**
+     * Optional name of the index.
+     * If omitted, then generated automatically by greenDAO with base on property/properties column name(s)
+     */
+    String name() default "";
+
+    /**
+     * Whether the unique constraint should be created with base on this index
+     */
+    boolean unique() default false;
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/JoinEntity.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/JoinEntity.java
new file mode 100644
index 00000000..2f4bf9e2
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/JoinEntity.java
@@ -0,0 +1,22 @@
+package org.greenrobot.greendao.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Defines *-to-* relation with join table
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.FIELD)
+public @interface JoinEntity {
+    /** Reference to join-entity class, which holds the source and the target properties */
+    Class<?> entity();
+
+    /** Name of the property inside the join entity which holds id of the source (current) entity */
+    String sourceProperty();
+
+    /** Name of the property inside the join entity which holds id of the target entity */
+    String targetProperty();
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/JoinProperty.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/JoinProperty.java
new file mode 100644
index 00000000..2f706887
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/JoinProperty.java
@@ -0,0 +1,20 @@
+package org.greenrobot.greendao.annotation;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Defines name and referencedName properties for relations
+ *
+ * @see ToMany
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target({})
+public @interface JoinProperty {
+    /** Name of the property in the name entity, which matches {@link #referencedName()} */
+    String name();
+
+    /** Name of the property in the referencedName entity, which matches {@link #name()} */
+    String referencedName();
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Keep.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Keep.java
new file mode 100644
index 00000000..5afb7884
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Keep.java
@@ -0,0 +1,24 @@
+package org.greenrobot.greendao.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Specifies that the target should be kept during next run of greenDAO generation.
+ * <p>
+ * Using this annotation on an Entity class itself silently disables any class modification.
+ * The user is responsible to write and support any code which is required for greenDAO.
+ * </p>
+ * <p>
+ * Don't use this annotation on a class member if you are not completely sure what you are doing, because in
+ * case of model changes greenDAO will not be able to make corresponding changes into the code of the target.
+ * </p>
+ *
+ * @see Generated
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target({ElementType.FIELD, ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.TYPE})
+public @interface Keep {
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/NotNull.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/NotNull.java
new file mode 100644
index 00000000..aa921167
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/NotNull.java
@@ -0,0 +1,18 @@
+package org.greenrobot.greendao.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Specifies that property is not null
+ * <p>
+ * You can also use any another NotNull or NonNull annotation (from any library or your own),
+ * they are equal to using this
+ * </p>
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER})
+public @interface NotNull {
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/OrderBy.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/OrderBy.java
new file mode 100644
index 00000000..ea981fd1
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/OrderBy.java
@@ -0,0 +1,23 @@
+package org.greenrobot.greendao.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Specifies ordering of related collection of {@link ToMany} relation
+ * E.g.: @OrderBy("name, age DESC") List collection;
+ * If used as marker (@OrderBy List collection), then collection is ordered by primary key
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.FIELD)
+public @interface OrderBy {
+    /**
+     * Comma-separated list of properties, e.g. "propertyA, propertyB, propertyC"
+     * To specify direction, add ASC or DESC after property name, e.g.: "propertyA DESC, propertyB ASC"
+     * Default direction for each property is ASC
+     * If value is omitted, then collection is ordered by primary key
+     */
+    String value() default "";
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Property.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Property.java
new file mode 100644
index 00000000..79cc9888
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Property.java
@@ -0,0 +1,19 @@
+package org.greenrobot.greendao.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Optional: configures the mapped column for a persistent field.
+ * This annotation is also applicable with @ToOne without additional foreign key property
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.FIELD)
+public @interface Property {
+    /**
+     * Name of the database column for this property. Default is field name.
+     */
+    String nameInDb() default "";
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/ToMany.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/ToMany.java
new file mode 100644
index 00000000..08575f1d
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/ToMany.java
@@ -0,0 +1,25 @@
+package org.greenrobot.greendao.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Defines *-to-N relation
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.FIELD)
+public @interface ToMany {
+    /**
+     * Name of the property inside the target entity which holds id of the source (current) entity
+     * Required unless no {@link JoinProperty} or {@link JoinEntity} is specified
+     */
+    String referencedJoinProperty() default "";
+
+    /**
+     * Array of matching source -> target properties
+     * Required unless {@link #referencedJoinProperty()} or {@link JoinEntity} is specified
+     */
+    JoinProperty[] joinProperties() default {};
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/ToOne.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/ToOne.java
new file mode 100644
index 00000000..07f92187
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/ToOne.java
@@ -0,0 +1,25 @@
+package org.greenrobot.greendao.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Defines *-to-1 relation with base on existing property as foreign key or with base on
+ * automatically created backing column
+ *
+ * In case foreignKey is not specified, the following annotations can be applied together with @ToOne:
+ * - {@link Property} to specify backing column name
+ * - {@link Unique} to put the unique constraint on backing column during table creation
+ * - {@link NotNull} to put the NOT NULL constraint on backing column during table creation
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.FIELD)
+public @interface ToOne {
+    /**
+     * Name of the property inside the current entity which holds the key of related entity.
+     * If this parameter is absent, then an additional column is automatically created to hold the key.
+     */
+    String joinProperty() default "";
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Transient.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Transient.java
new file mode 100644
index 00000000..e8059ef2
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Transient.java
@@ -0,0 +1,15 @@
+package org.greenrobot.greendao.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.RetentionPolicy.SOURCE;
+
+/**
+ * Transient fields are not persisted in the database.
+ */
+@Retention(SOURCE)
+@Target(ElementType.FIELD)
+public @interface Transient {
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Unique.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Unique.java
new file mode 100644
index 00000000..7e4eba86
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Unique.java
@@ -0,0 +1,26 @@
+package org.greenrobot.greendao.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Marks property should have a UNIQUE constraint during table creation.
+ * This annotation is also applicable with @ToOne without additional foreign key property
+ *
+ * <p>
+ * To have a unique constraint after table creation you can use {@link Index#unique()}
+ * </p>
+ *
+ * <p>
+ * Note having both @Unique and {@link Index} is redundant and causes performance decrease
+ * on DB level. See <a href="https://www.sqlite.org/lang_createtable.html">here</a> for more information.
+ * </p>
+ *
+ * @see Index#unique()
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.FIELD)
+public @interface Unique {
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/apihint/Beta.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/apihint/Beta.java
new file mode 100644
index 00000000..b25a6648
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/apihint/Beta.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.annotation.apihint;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * APIs annotated with @Beta may change and may be even removed in a future release (but is somewhat less likely
+ * compared to {@link Experimental}). You can still use this API - just be aware that a future version may require
+ * changes of your code. This is intended for getting feedback on planned features.
+ */
+@Retention(RetentionPolicy.CLASS)
+@Target({ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD, ElementType.TYPE})
+@Documented
+public @interface Beta {
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/apihint/Experimental.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/apihint/Experimental.java
new file mode 100644
index 00000000..822b251b
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/apihint/Experimental.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.annotation.apihint;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * APIs annotated with @Experimental are likely to change and may be even removed in a future release.
+ * You can use this API - just be aware that a future version may require changes of your code.
+ * This is intended for getting feedback on planned features.
+ */
+@Retention(RetentionPolicy.CLASS)
+@Target({ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD, ElementType.TYPE})
+@Documented
+public @interface Experimental {
+}
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/apihint/Internal.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/apihint/Internal.java
new file mode 100644
index 00000000..98932783
--- /dev/null
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/apihint/Internal.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.annotation.apihint;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * APIs annotated with @Internal must NOT be used.
+ * Internal APIs must only be used by greenDAO and may change or be removed in a future release.
+ */
+@Retention(RetentionPolicy.CLASS)
+@Target({ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD, ElementType.TYPE})
+@Internal
+@Documented
+public @interface Internal {
+}
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/converter/PropertyConverter.java b/greendao-api/src/main/java/org/greenrobot/greendao/converter/PropertyConverter.java
similarity index 96%
rename from DaoCore/src/main/java/de/greenrobot/dao/converter/PropertyConverter.java
rename to greendao-api/src/main/java/org/greenrobot/greendao/converter/PropertyConverter.java
index 25108ab0..2ce321df 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/converter/PropertyConverter.java
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/converter/PropertyConverter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package de.greenrobot.dao.converter;
+package org.greenrobot.greendao.converter;
 
 /**
  * To use custom types in your entity, implement this to convert db values to entity values and back.
diff --git a/javadoc-style/background.gif b/javadoc-style/background.gif
new file mode 100644
index 00000000..ec068a06
Binary files /dev/null and b/javadoc-style/background.gif differ
diff --git a/javadoc-style/stylesheet.css b/javadoc-style/stylesheet.css
new file mode 100644
index 00000000..c12603af
--- /dev/null
+++ b/javadoc-style/stylesheet.css
@@ -0,0 +1,574 @@
+/* Javadoc style sheet */
+/*
+Overall document style
+*/
+
+@import url('resources/fonts/dejavu.css');
+
+body {
+    background-color:#ffffff;
+    color:#353833;
+    font-family:'DejaVu Sans', Arial, Helvetica, sans-serif;
+    font-size:14px;
+    margin:0;
+}
+a:link, a:visited {
+    text-decoration:none;
+    color:#4A6782;
+}
+a:hover, a:focus {
+    text-decoration:none;
+    color:#bb7a2a;
+}
+a:active {
+    text-decoration:none;
+    color:#4A6782;
+}
+a[name] {
+    color:#353833;
+}
+a[name]:hover {
+    text-decoration:none;
+    color:#353833;
+}
+pre {
+    font-family:'DejaVu Sans Mono', monospace;
+    font-size:14px;
+}
+h1 {
+    font-size:20px;
+}
+h2 {
+    font-size:18px;
+}
+h3 {
+    font-size:16px;
+    font-style:italic;
+}
+h4 {
+    font-size:13px;
+}
+h5 {
+    font-size:12px;
+}
+h6 {
+    font-size:11px;
+}
+ul {
+    list-style-type:disc;
+}
+code, tt {
+    font-family:'DejaVu Sans Mono', monospace;
+    font-size:14px;
+    padding-top:4px;
+    margin-top:8px;
+    line-height:1.4em;
+}
+dt code {
+    font-family:'DejaVu Sans Mono', monospace;
+    font-size:14px;
+    padding-top:4px;
+}
+table tr td dt code {
+    font-family:'DejaVu Sans Mono', monospace;
+    font-size:14px;
+    vertical-align:top;
+    padding-top:4px;
+}
+sup {
+    font-size:8px;
+}
+/*
+Document title and Copyright styles
+*/
+.clear {
+    clear:both;
+    height:0px;
+    overflow:hidden;
+}
+.aboutLanguage {
+    float:right;
+    padding:0px 21px;
+    font-size:11px;
+    z-index:200;
+    margin-top:-9px;
+}
+.legalCopy {
+    margin-left:.5em;
+}
+.bar a, .bar a:link, .bar a:visited, .bar a:active {
+    color:#FFFFFF;
+    text-decoration:none;
+}
+.bar a:hover, .bar a:focus {
+    color:#bb7a2a;
+}
+.tab {
+    background-color:#0066FF;
+    color:#ffffff;
+    padding:8px;
+    width:5em;
+    font-weight:bold;
+}
+/*
+Navigation bar styles
+*/
+.bar {
+    background-color:#4D974D;
+    color:#FFFFFF;
+    padding:.8em .5em .4em .8em;
+    height:auto;/*height:1.8em;*/
+    font-size:11px;
+    margin:0;
+}
+.topNav {
+    background-color:#4D974D;
+    color:#FFFFFF;
+    float:left;
+    padding:0;
+    width:100%;
+    clear:right;
+    height:2.8em;
+    padding-top:10px;
+    overflow:hidden;
+    font-size:12px; 
+}
+.bottomNav {
+    margin-top:10px;
+    background-color:#4D974D;
+    color:#FFFFFF;
+    float:left;
+    padding:0;
+    width:100%;
+    clear:right;
+    height:2.8em;
+    padding-top:10px;
+    overflow:hidden;
+    font-size:12px;
+}
+.subNav {
+    background-color:#dee3e9;
+    float:left;
+    width:100%;
+    overflow:hidden;
+    font-size:12px;
+}
+.subNav div {
+    clear:left;
+    float:left;
+    padding:0 0 5px 6px;
+    text-transform:uppercase;
+}
+ul.navList, ul.subNavList {
+    float:left;
+    margin:0 25px 0 0;
+    padding:0;
+}
+ul.navList li{
+    list-style:none;
+    float:left;
+    padding: 5px 6px;
+    text-transform:uppercase;
+}
+ul.subNavList li{
+    list-style:none;
+    float:left;
+}
+.topNav a:link, .topNav a:active, .topNav a:visited, .bottomNav a:link, .bottomNav a:active, .bottomNav a:visited {
+    color:#FFFFFF;
+    text-decoration:none;
+    text-transform:uppercase;
+}
+.topNav a:hover, .bottomNav a:hover {
+    text-decoration:none;
+    color:#bb7a2a;
+    text-transform:uppercase;
+}
+.navBarCell1Rev {
+    background-color:#F8981D;
+    color:#253441;
+    margin: auto 5px;
+}
+.skipNav {
+    position:absolute;
+    top:auto;
+    left:-9999px;
+    overflow:hidden;
+}
+/*
+Page header and footer styles
+*/
+.header, .footer {
+    clear:both;
+    margin:0 20px;
+    padding:5px 0 0 0;
+}
+.indexHeader {
+    margin:10px;
+    position:relative;
+}
+.indexHeader span{
+    margin-right:15px;
+}
+.indexHeader h1 {
+    font-size:13px;
+}
+.title {
+    color:#2c4557;
+    margin:10px 0;
+}
+.subTitle {
+    margin:5px 0 0 0;
+}
+.header ul {
+    margin:0 0 15px 0;
+    padding:0;
+}
+.footer ul {
+    margin:20px 0 5px 0;
+}
+.header ul li, .footer ul li {
+    list-style:none;
+    font-size:13px;
+}
+/*
+Heading styles
+*/
+div.details ul.blockList ul.blockList ul.blockList li.blockList h4, div.details ul.blockList ul.blockList ul.blockListLast li.blockList h4 {
+    background-color:#dee3e9;
+    border:1px solid #d0d9e0;
+    margin:0 0 6px -8px;
+    padding:7px 5px;
+}
+ul.blockList ul.blockList ul.blockList li.blockList h3 {
+    background-color:#dee3e9;
+    border:1px solid #d0d9e0;
+    margin:0 0 6px -8px;
+    padding:7px 5px;
+}
+ul.blockList ul.blockList li.blockList h3 {
+    padding:0;
+    margin:15px 0;
+}
+ul.blockList li.blockList h2 {
+    padding:0px 0 20px 0;
+}
+/*
+Page layout container styles
+*/
+.contentContainer, .sourceContainer, .classUseContainer, .serializedFormContainer, .constantValuesContainer {
+    clear:both;
+    padding:10px 20px;
+    position:relative;
+}
+.indexContainer {
+    margin:10px;
+    position:relative;
+    font-size:12px;
+}
+.indexContainer h2 {
+    font-size:13px;
+    padding:0 0 3px 0;
+}
+.indexContainer ul {
+    margin:0;
+    padding:0;
+}
+.indexContainer ul li {
+    list-style:none;
+    padding-top:2px;
+}
+.contentContainer .description dl dt, .contentContainer .details dl dt, .serializedFormContainer dl dt {
+    font-size:12px;
+    font-weight:bold;
+    margin:10px 0 0 0;
+    color:#4E4E4E;
+}
+.contentContainer .description dl dd, .contentContainer .details dl dd, .serializedFormContainer dl dd {
+    margin:5px 0 10px 0px;
+    font-size:14px;
+    font-family:'DejaVu Sans Mono',monospace;
+}
+.serializedFormContainer dl.nameValue dt {
+    margin-left:1px;
+    font-size:1.1em;
+    display:inline;
+    font-weight:bold;
+}
+.serializedFormContainer dl.nameValue dd {
+    margin:0 0 0 1px;
+    font-size:1.1em;
+    display:inline;
+}
+/*
+List styles
+*/
+ul.horizontal li {
+    display:inline;
+    font-size:0.9em;
+}
+ul.inheritance {
+    margin:0;
+    padding:0;
+}
+ul.inheritance li {
+    display:inline;
+    list-style:none;
+}
+ul.inheritance li ul.inheritance {
+    margin-left:15px;
+    padding-left:15px;
+    padding-top:1px;
+}
+ul.blockList, ul.blockListLast {
+    margin:10px 0 10px 0;
+    padding:0;
+}
+ul.blockList li.blockList, ul.blockListLast li.blockList {
+    list-style:none;
+    margin-bottom:15px;
+    line-height:1.4;
+}
+ul.blockList ul.blockList li.blockList, ul.blockList ul.blockListLast li.blockList {
+    padding:0px 20px 5px 10px;
+    border:1px solid #ededed; 
+    background-color:#f8f8f8;
+}
+ul.blockList ul.blockList ul.blockList li.blockList, ul.blockList ul.blockList ul.blockListLast li.blockList {
+    padding:0 0 5px 8px;
+    background-color:#ffffff;
+    border:none;
+}
+ul.blockList ul.blockList ul.blockList ul.blockList li.blockList {
+    margin-left:0;
+    padding-left:0;
+    padding-bottom:15px;
+    border:none;
+}
+ul.blockList ul.blockList ul.blockList ul.blockList li.blockListLast {
+    list-style:none;
+    border-bottom:none;
+    padding-bottom:0;
+}
+table tr td dl, table tr td dl dt, table tr td dl dd {
+    margin-top:0;
+    margin-bottom:1px;
+}
+/*
+Table styles
+*/
+.overviewSummary, .memberSummary, .typeSummary, .useSummary, .constantsSummary, .deprecatedSummary {
+    width:100%;
+    border-left:1px solid #EEE; 
+    border-right:1px solid #EEE; 
+    border-bottom:1px solid #EEE; 
+}
+.overviewSummary, .memberSummary  {
+    padding:0px;
+}
+.overviewSummary caption, .memberSummary caption, .typeSummary caption,
+.useSummary caption, .constantsSummary caption, .deprecatedSummary caption {
+    position:relative;
+    text-align:left;
+    background-repeat:no-repeat;
+    color:#253441;
+    font-weight:bold;
+    clear:none;
+    overflow:hidden;
+    padding:0px;
+    padding-top:10px;
+    padding-left:1px;
+    margin:0px;
+    white-space:pre;
+}
+.overviewSummary caption a:link, .memberSummary caption a:link, .typeSummary caption a:link,
+.useSummary caption a:link, .constantsSummary caption a:link, .deprecatedSummary caption a:link,
+.overviewSummary caption a:hover, .memberSummary caption a:hover, .typeSummary caption a:hover,
+.useSummary caption a:hover, .constantsSummary caption a:hover, .deprecatedSummary caption a:hover,
+.overviewSummary caption a:active, .memberSummary caption a:active, .typeSummary caption a:active,
+.useSummary caption a:active, .constantsSummary caption a:active, .deprecatedSummary caption a:active,
+.overviewSummary caption a:visited, .memberSummary caption a:visited, .typeSummary caption a:visited,
+.useSummary caption a:visited, .constantsSummary caption a:visited, .deprecatedSummary caption a:visited {
+    color:#FFFFFF;
+}
+.overviewSummary caption span, .memberSummary caption span, .typeSummary caption span,
+.useSummary caption span, .constantsSummary caption span, .deprecatedSummary caption span {
+    white-space:nowrap;
+    padding-top:5px;
+    padding-left:12px;
+    padding-right:12px;
+    padding-bottom:7px;
+    display:inline-block;
+    float:left;
+    background-color:#F8981D;
+    border: none;
+    height:16px;
+}
+.memberSummary caption span.activeTableTab span {
+    white-space:nowrap;
+    padding-top:5px;
+    padding-left:12px;
+    padding-right:12px;
+    margin-right:3px;
+    display:inline-block;
+    float:left;
+    background-color:#F8981D;
+    height:16px;
+}
+.memberSummary caption span.tableTab span {
+    white-space:nowrap;
+    padding-top:5px;
+    padding-left:12px;
+    padding-right:12px;
+    margin-right:3px;
+    display:inline-block;
+    float:left;
+    background-color:#4D974D;
+    height:16px;
+}
+.memberSummary caption span.tableTab, .memberSummary caption span.activeTableTab {
+    padding-top:0px;
+    padding-left:0px;
+    padding-right:0px;
+    background-image:none;
+    float:none;
+    display:inline;
+}
+.overviewSummary .tabEnd, .memberSummary .tabEnd, .typeSummary .tabEnd,
+.useSummary .tabEnd, .constantsSummary .tabEnd, .deprecatedSummary .tabEnd {
+    display:none;
+    width:5px;
+    position:relative;
+    float:left;
+    background-color:#F8981D;
+}
+.memberSummary .activeTableTab .tabEnd {
+    display:none;
+    width:5px;
+    margin-right:3px;
+    position:relative; 
+    float:left;
+    background-color:#F8981D;
+}
+.memberSummary .tableTab .tabEnd {
+    display:none;
+    width:5px;
+    margin-right:3px;
+    position:relative;
+    background-color:#4D974D;
+    float:left;
+
+}
+.overviewSummary td, .memberSummary td, .typeSummary td,
+.useSummary td, .constantsSummary td, .deprecatedSummary td {
+    text-align:left;
+    padding:0px 0px 12px 10px;
+    width:100%;
+}
+th.colOne, th.colFirst, th.colLast, .useSummary th, .constantsSummary th,
+td.colOne, td.colFirst, td.colLast, .useSummary td, .constantsSummary td{
+    vertical-align:top;
+    padding-right:0px;
+    padding-top:8px;
+    padding-bottom:3px;
+}
+th.colFirst, th.colLast, th.colOne, .constantsSummary th {
+    background:#dee3e9;
+    text-align:left;
+    padding:8px 3px 3px 7px;
+}
+td.colFirst, th.colFirst {
+    white-space:nowrap;
+    font-size:13px;
+}
+td.colLast, th.colLast {
+    font-size:13px;
+}
+td.colOne, th.colOne {
+    font-size:13px;
+}
+.overviewSummary td.colFirst, .overviewSummary th.colFirst,
+.overviewSummary td.colOne, .overviewSummary th.colOne,
+.memberSummary td.colFirst, .memberSummary th.colFirst,
+.memberSummary td.colOne, .memberSummary th.colOne,
+.typeSummary td.colFirst{
+    width:25%;
+    vertical-align:top;
+}
+td.colOne a:link, td.colOne a:active, td.colOne a:visited, td.colOne a:hover, td.colFirst a:link, td.colFirst a:active, td.colFirst a:visited, td.colFirst a:hover, td.colLast a:link, td.colLast a:active, td.colLast a:visited, td.colLast a:hover, .constantValuesContainer td a:link, .constantValuesContainer td a:active, .constantValuesContainer td a:visited, .constantValuesContainer td a:hover {
+    font-weight:bold;
+}
+.tableSubHeadingColor {
+    background-color:#EEEEFF;
+}
+.altColor {
+    background-color:#FFFFFF;
+}
+.rowColor {
+    background-color:#EEEEEF;
+}
+/*
+Content styles
+*/
+.description pre {
+    margin-top:0;
+}
+.deprecatedContent {
+    margin:0;
+    padding:10px 0;
+}
+.docSummary {
+    padding:0;
+}
+
+ul.blockList ul.blockList ul.blockList li.blockList h3 {
+    font-style:normal;
+}
+
+div.block {
+    font-size:14px;
+    font-family:'DejaVu Serif', Georgia, "Times New Roman", Times, serif;
+}
+
+td.colLast div {
+    padding-top:0px;
+}
+
+
+td.colLast a {
+    padding-bottom:3px;
+}
+/*
+Formatting effect styles
+*/
+.sourceLineNo {
+    color:green;
+    padding:0 30px 0 0;
+}
+h1.hidden {
+    visibility:hidden;
+    overflow:hidden;
+    font-size:10px;
+}
+.block {
+    display:block;
+    margin:3px 10px 2px 0px;
+    color:#474747;
+}
+.deprecatedLabel, .descfrmTypeLabel, .memberNameLabel, .memberNameLink,
+.overrideSpecifyLabel, .packageHierarchyLabel, .paramLabel, .returnLabel,
+.seeLabel, .simpleTagLabel, .throwsLabel, .typeNameLabel, .typeNameLink {
+    font-weight:bold;
+}
+.deprecationComment, .emphasizedPhrase, .interfaceName {
+    font-style:italic;
+}
+
+div.block div.block span.deprecationComment, div.block div.block span.emphasizedPhrase,
+div.block div.block span.interfaceName {
+    font-style:normal;
+}
+
+div.contentContainer ul.blockList li.blockList h2{
+    padding-bottom:0px;
+}
diff --git a/settings.gradle b/settings.gradle
index ef5f41d2..f96cd456 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,5 +1,13 @@
-include 'DaoCore', 'DaoGenerator', 'DaoExampleGenerator'
-include 'DaoTest' // Travis needs some Android setup for this
-include 'DaoTestGenerator'
-include ':DaoExample'
+include 'greendao-api'
+include 'DaoCore'
+include 'DaoGenerator'
+include 'tests'
 
+include 'examples:DaoExample'
+include 'examples:RxDaoExample'
+
+include 'tests:DaoTestBase'
+include 'tests:DaoTest'
+include 'tests:DaoTestPerformance'
+include 'tests:DaoTestGenerator'
+include 'tests:DaoTestEntityAnnotation'
diff --git a/tests/DaoTest/build.gradle b/tests/DaoTest/build.gradle
new file mode 100644
index 00000000..cb9cdda1
--- /dev/null
+++ b/tests/DaoTest/build.gradle
@@ -0,0 +1,43 @@
+buildscript {
+    repositories {
+        jcenter()
+        google()
+        mavenCentral()
+    }
+
+    dependencies {
+        classpath dep.androidPlugin
+    }
+}
+
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion rootProject.ext.compileSdkVersion
+
+    defaultConfig {
+        minSdkVersion 7
+
+        testApplicationId "org.greenrobot.greendao.daotest"
+        testInstrumentationRunner "android.test.InstrumentationTestRunner"
+    }
+
+    testOptions {
+        unitTests {
+            includeAndroidResources = true
+        }
+    }
+}
+
+dependencies {
+    implementation project(':tests:DaoTestBase')
+
+    testImplementation "junit:junit:4.12"
+    testImplementation 'org.robolectric:robolectric:3.8'
+    testImplementation 'org.mockito:mockito-core:1.10.19'
+
+    androidTestImplementation 'net.zetetic:android-database-sqlcipher:3.5.6'
+    androidTestImplementation 'io.reactivex:rxjava:1.3.0'
+}
+
+uploadArchives.enabled = false
diff --git a/DaoCore/proguard.cfg b/tests/DaoTest/proguard.cfg
similarity index 100%
rename from DaoCore/proguard.cfg
rename to tests/DaoTest/proguard.cfg
diff --git a/DaoTest/project.properties b/tests/DaoTest/project.properties
similarity index 100%
rename from DaoTest/project.properties
rename to tests/DaoTest/project.properties
diff --git a/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionConcurrentTest.java
similarity index 88%
rename from DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionConcurrentTest.java
index e243c4c5..f0a11e85 100644
--- a/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionConcurrentTest.java
@@ -1,15 +1,33 @@
-package de.greenrobot.daotest;
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest;
 
 import java.util.concurrent.CountDownLatch;
 
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 import android.os.SystemClock;
 
-import de.greenrobot.dao.DaoLog;
-import de.greenrobot.dao.query.DeleteQuery;
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.test.AbstractDaoSessionTest;
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
+import org.greenrobot.greendao.query.DeleteQuery;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.test.AbstractDaoSessionTest;
 
 public class DaoSessionConcurrentTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
     class TestThread extends Thread {
@@ -305,17 +323,17 @@ public void run() {
      * threads and costs more memory.
      */
     public void _testThreadLocalSpeed() {
-        final SQLiteDatabase db = dao.getDatabase();
-        ThreadLocal<SQLiteStatement> threadLocal = new ThreadLocal<SQLiteStatement>() {
+        final Database db = dao.getDatabase();
+        ThreadLocal<DatabaseStatement> threadLocal = new ThreadLocal<DatabaseStatement>() {
             @Override
-            protected SQLiteStatement initialValue() {
+            protected DatabaseStatement initialValue() {
                 return db.compileStatement("SELECT 42");
             }
         };
         threadLocal.get();
         long start = SystemClock.currentThreadTimeMillis();
         for (int i = 0; i < 1000; i++) {
-            SQLiteStatement sqLiteStatement = threadLocal.get();
+            DatabaseStatement sqLiteStatement = threadLocal.get();
             assertNotNull(sqLiteStatement);
         }
         Long time = SystemClock.currentThreadTimeMillis() - start;
diff --git a/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentWALTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionConcurrentWALTest.java
similarity index 51%
rename from DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentWALTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionConcurrentWALTest.java
index 89f66b6c..f2b3b1f8 100644
--- a/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentWALTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionConcurrentWALTest.java
@@ -1,26 +1,48 @@
-package de.greenrobot.daotest;
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest;
 
 import android.database.sqlite.SQLiteDatabase;
 import android.os.Build;
-import de.greenrobot.dao.DaoLog;
-import de.greenrobot.dao.query.Query;
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.database.StandardDatabase;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.query.Query;
 
 import java.lang.reflect.Method;
 
 public class DaoSessionConcurrentWALTest extends DaoSessionConcurrentTest {
 
     @Override
-    protected SQLiteDatabase createDatabase() {
+    protected Database createDatabase() {
         int MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;
         getContext().deleteDatabase(DB_NAME);
-        return getContext().openOrCreateDatabase(DB_NAME, MODE_ENABLE_WRITE_AHEAD_LOGGING, null);
+        SQLiteDatabase sqLiteDatabase = getContext().openOrCreateDatabase(DB_NAME, MODE_ENABLE_WRITE_AHEAD_LOGGING, null);
+        return new StandardDatabase(sqLiteDatabase);
     }
 
     public void testConcurrentLockAndQueryDuringTxWAL() throws InterruptedException {
         if (Build.VERSION.SDK_INT >= 16) {
             try {
-                Method method = db.getClass().getMethod("isWriteAheadLoggingEnabled");
-                boolean walEnabled = (Boolean) method.invoke(db);
+                Object rawDatabase = db.getRawDatabase();
+                Method method = rawDatabase.getClass().getMethod("isWriteAheadLoggingEnabled");
+                boolean walEnabled = (Boolean) method.invoke(rawDatabase);
                 if (!walEnabled) {
                     throw new RuntimeException("WAL is disabled. This test will deadlock without WAL");
                 }
diff --git a/DaoTest/src/de/greenrobot/daotest/DaoSessionTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionTest.java
similarity index 86%
rename from DaoTest/src/de/greenrobot/daotest/DaoSessionTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionTest.java
index dc44c2b7..f2e17e2e 100644
--- a/DaoTest/src/de/greenrobot/daotest/DaoSessionTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,13 +11,17 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest;
 
-import de.greenrobot.dao.test.AbstractDaoSessionTest;
+package org.greenrobot.greendao.daotest;
+
+import org.greenrobot.greendao.daotest.DaoMaster;
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.daotest.SimpleEntity;
+import org.greenrobot.greendao.test.AbstractDaoSessionTest;
 
 public class DaoSessionTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
 
diff --git a/DaoTest/src/de/greenrobot/daotest/DbTestTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DbTestTest.java
similarity index 78%
rename from DaoTest/src/de/greenrobot/daotest/DbTestTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DbTestTest.java
index 1ec6d84f..0ae373d8 100644
--- a/DaoTest/src/de/greenrobot/daotest/DbTestTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DbTestTest.java
@@ -1,7 +1,25 @@
-package de.greenrobot.daotest;
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest;
 
 import android.app.Application;
-import de.greenrobot.dao.test.DbTest;
+import org.greenrobot.greendao.test.DbTest;
 import junit.framework.AssertionFailedError;
 
 public class DbTestTest extends DbTest {
diff --git a/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DbUtilsTest.java
similarity index 79%
rename from DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DbUtilsTest.java
index 4ff7957d..e665efda 100644
--- a/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DbUtilsTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,17 +11,20 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest;
 
-import java.io.IOException;
+package org.greenrobot.greendao.daotest;
 
 import android.database.Cursor;
-import de.greenrobot.dao.DbUtils;
-import de.greenrobot.dao.test.DbTest;
+import android.database.sqlite.SQLiteDatabase;
+import org.greenrobot.greendao.DbUtils;
+import org.greenrobot.greendao.database.StandardDatabase;
+import org.greenrobot.greendao.test.DbTest;
+
+import java.io.IOException;
 
 public class DbUtilsTest extends DbTest {
     public void testExecuteSqlScript() throws IOException {
diff --git a/DaoTest/src/de/greenrobot/daotest/DeadlockPreventionTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DeadlockPreventionTest.java
similarity index 92%
rename from DaoTest/src/de/greenrobot/daotest/DeadlockPreventionTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DeadlockPreventionTest.java
index ab237947..0f4dcffa 100644
--- a/DaoTest/src/de/greenrobot/daotest/DeadlockPreventionTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DeadlockPreventionTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,18 +11,23 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest;
+
+package org.greenrobot.greendao.daotest;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
-import de.greenrobot.dao.test.AbstractDaoSessionTest;
+import org.greenrobot.greendao.daotest.DaoMaster;
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao;
+import org.greenrobot.greendao.test.AbstractDaoSessionTest;
 
 /**
  * Test to reproduce https://github.com/greenrobot/greenDAO/issues/223 (works at least on a Android 2.3 emulator).
@@ -37,7 +42,7 @@ public DeadlockPreventionTest() {
     }
 
     // Runs pretty long, only run manually
-    public void testLoadAll() throws InterruptedException {
+    public void _testLoadAll() throws InterruptedException {
         dao = daoSession.getTestEntityDao();
         List<TestEntity> entities = new ArrayList<>();
         for (int i = 0; i < 10000; i++) {
diff --git a/DaoTest/src/de/greenrobot/daotest/IndexTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/IndexTest.java
similarity index 56%
rename from DaoTest/src/de/greenrobot/daotest/IndexTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/IndexTest.java
index 402b367c..aacd4ad2 100644
--- a/DaoTest/src/de/greenrobot/daotest/IndexTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/IndexTest.java
@@ -1,11 +1,32 @@
-package de.greenrobot.daotest;
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest;
 
 import java.util.List;
 
 import junit.framework.Assert;
-import de.greenrobot.dao.DaoLog;
-import de.greenrobot.dao.test.AbstractDaoTest;
-import de.greenrobot.daotest.SqliteMasterDao.Properties;
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.daotest.SqliteMaster;
+import org.greenrobot.greendao.daotest.SqliteMasterDao;
+import org.greenrobot.greendao.daotest.TestEntityDao;
+import org.greenrobot.greendao.test.AbstractDaoTest;
+import org.greenrobot.greendao.daotest.SqliteMasterDao.Properties;
 
 public class IndexTest extends AbstractDaoTest<SqliteMasterDao, SqliteMaster, Void> {
 
diff --git a/DaoTest/src/de/greenrobot/daotest/LongHashMapTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/LongHashMapTest.java
similarity index 93%
rename from DaoTest/src/de/greenrobot/daotest/LongHashMapTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/LongHashMapTest.java
index 433658bd..d24f64e3 100644
--- a/DaoTest/src/de/greenrobot/daotest/LongHashMapTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/LongHashMapTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,16 +11,17 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest;
+
+package org.greenrobot.greendao.daotest;
 
 import java.util.Random;
 
 import junit.framework.TestCase;
-import de.greenrobot.dao.internal.LongHashMap;
+import org.greenrobot.greendao.internal.LongHashMap;
 
 public class LongHashMapTest extends TestCase {
 
diff --git a/DaoTest/src/de/greenrobot/daotest/async/AbstractAsyncTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/AbstractAsyncTest.java
similarity index 50%
rename from DaoTest/src/de/greenrobot/daotest/async/AbstractAsyncTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/AbstractAsyncTest.java
index c363aa5e..e0ad5552 100644
--- a/DaoTest/src/de/greenrobot/daotest/async/AbstractAsyncTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/AbstractAsyncTest.java
@@ -1,14 +1,32 @@
-package de.greenrobot.daotest.async;
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.async;
 
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 
-import de.greenrobot.dao.async.AsyncOperation;
-import de.greenrobot.dao.async.AsyncOperationListener;
-import de.greenrobot.dao.async.AsyncSession;
-import de.greenrobot.dao.test.AbstractDaoSessionTest;
-import de.greenrobot.daotest.DaoMaster;
-import de.greenrobot.daotest.DaoSession;
+import org.greenrobot.greendao.async.AsyncOperation;
+import org.greenrobot.greendao.async.AsyncOperationListener;
+import org.greenrobot.greendao.async.AsyncSession;
+import org.greenrobot.greendao.test.AbstractDaoSessionTest;
+import org.greenrobot.greendao.daotest.DaoMaster;
+import org.greenrobot.greendao.daotest.DaoSession;
 
 public abstract class AbstractAsyncTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> implements
         AsyncOperationListener {
diff --git a/DaoTest/src/de/greenrobot/daotest/async/BasicAsyncTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/BasicAsyncTest.java
similarity index 85%
rename from DaoTest/src/de/greenrobot/daotest/async/BasicAsyncTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/BasicAsyncTest.java
index c2d2a516..4cffee2d 100644
--- a/DaoTest/src/de/greenrobot/daotest/async/BasicAsyncTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/BasicAsyncTest.java
@@ -1,12 +1,30 @@
-package de.greenrobot.daotest.async;
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.async;
 
 import java.util.concurrent.Callable;
 
 import android.os.Looper;
-import de.greenrobot.dao.async.AsyncDaoException;
-import de.greenrobot.dao.async.AsyncOperation;
-import de.greenrobot.dao.async.AsyncOperationListener;
-import de.greenrobot.daotest.SimpleEntity;
+import org.greenrobot.greendao.async.AsyncDaoException;
+import org.greenrobot.greendao.async.AsyncOperation;
+import org.greenrobot.greendao.async.AsyncOperationListener;
+import org.greenrobot.greendao.daotest.SimpleEntity;
 
 public class BasicAsyncTest extends AbstractAsyncTest {
 
@@ -172,7 +190,7 @@ public synchronized void onAsyncOperationCompleted(AsyncOperation operation) {
         assertWaitForCompletion1Sec();
         while (!testListenerMainThread_done) {
             synchronized (listener) {
-                listener.wait();
+                listener.wait(1000);
             }
         }
     }
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/MergeTxAsyncTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/MergeTxAsyncTest.java
new file mode 100644
index 00000000..5ea3642c
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/MergeTxAsyncTest.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.async;
+
+import org.greenrobot.greendao.async.AsyncOperation;
+import org.greenrobot.greendao.daotest.SimpleEntity;
+
+public class MergeTxAsyncTest extends AbstractAsyncTest {
+
+    public void testMergeInsertAndUpdate() {
+        SimpleEntity entity = new SimpleEntity();
+        entity.setId(42l);
+        entity.setSimpleString("heho");
+        
+        SimpleEntity entity2 = new SimpleEntity();
+        entity2.setId(42l);
+        entity2.setSimpleString("updated");
+        
+        AsyncOperation op1 = asyncSession.insert(entity, AsyncOperation.FLAG_MERGE_TX);
+        AsyncOperation op2 = asyncSession.update(entity2, AsyncOperation.FLAG_MERGE_TX);
+        
+        assertWaitForCompletion1Sec();
+        daoSession.clear();
+        SimpleEntity entity3 = daoSession.load(SimpleEntity.class, 42l);
+        assertNotNull(entity3);
+        assertEquals(entity2.getSimpleString(), entity3.getSimpleString());
+        
+        assertEquals(2, op1.getMergedOperationsCount());
+        assertEquals(2, op2.getMergedOperationsCount());
+    }
+
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/contentprovider/SimpleEntityContentProviderTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/contentprovider/SimpleEntityContentProviderTest.java
similarity index 82%
rename from DaoTest/src/de/greenrobot/daotest/contentprovider/SimpleEntityContentProviderTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/contentprovider/SimpleEntityContentProviderTest.java
index d66bfa5a..07b4cd9a 100644
--- a/DaoTest/src/de/greenrobot/daotest/contentprovider/SimpleEntityContentProviderTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/contentprovider/SimpleEntityContentProviderTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,21 +11,22 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.contentprovider;
+
+package org.greenrobot.greendao.daotest.contentprovider;
 
 import android.database.Cursor;
 import android.test.suitebuilder.annotation.Suppress;
 
-import de.greenrobot.dao.test.AbstractDaoSessionTest;
-import de.greenrobot.daotest.DaoMaster;
-import de.greenrobot.daotest.DaoSession;
-import de.greenrobot.daotest.SimpleEntity;
-import de.greenrobot.daotest.SimpleEntityContentProvider;
-import de.greenrobot.daotest.SimpleEntityDao;
+import org.greenrobot.greendao.test.AbstractDaoSessionTest;
+import org.greenrobot.greendao.daotest.DaoMaster;
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.daotest.SimpleEntity;
+import org.greenrobot.greendao.daotest.SimpleEntityContentProvider;
+import org.greenrobot.greendao.daotest.SimpleEntityDao;
 
 @Suppress
 // TODO Activate once the gradle build is fixed (AndroidManifest.xml is not used for instrumentTest)
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDataFileTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDataFileTest.java
new file mode 100644
index 00000000..1ab3f9ed
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDataFileTest.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.encrypted;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.daotest.SimpleEntity;
+
+public class EncryptedDataFileTest extends EncryptionSimpleEntityTest {
+
+    public static final String ENCRYPTED_DB_FILE = "encrypted-db-file";
+
+    @Override
+    protected Database createDatabase() {
+        getContext().deleteDatabase(ENCRYPTED_DB_FILE);
+        return EncryptedDbUtils.createDatabase(getContext(), ENCRYPTED_DB_FILE, "password");
+        // You can do a sanity check by disabling encryption and see the test fail:
+        // SQLiteDatabase sqLiteDatabase = getContext().openOrCreateDatabase(ENCRYPTED_DB_FILE, 0, null);
+        // return new StandardDatabase(sqLiteDatabase);
+    }
+
+    public void testFileisEncrypted() throws IOException {
+        EncryptedDbUtils.assertEncryptedDbUsed(db);
+
+        SimpleEntity simpleEntity = createEntityWithRandomPk();
+        String text = "Catch me if you can";
+        simpleEntity.setSimpleString(text);
+        dao.insert(simpleEntity);
+        File dbFile = getContext().getDatabasePath(ENCRYPTED_DB_FILE);
+        int length = (int) dbFile.length();
+        assertTrue(length > 0);
+        byte[] buffer = new byte[length];
+        // TODO readAll
+        int read = new FileInputStream(dbFile).read(buffer);
+        String contents = new String(buffer, 0, read, "US-ASCII");
+        assertFalse(contents, contents.startsWith("SQLite"));
+        assertFalse(contents, contents.contains("CREATE TABLE"));
+        assertFalse(contents, contents.contains(text));
+    }
+
+    public void testEncryptedDbUsed() {
+        EncryptedDbUtils.assertEncryptedDbUsed(db);
+    }
+}
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDatabaseOpenHelperTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDatabaseOpenHelperTest.java
new file mode 100644
index 00000000..1d79240f
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDatabaseOpenHelperTest.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.encrypted;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import org.greenrobot.greendao.daotest.DaoMaster;
+import org.greenrobot.greendao.daotest.DaoMaster.DevOpenHelper;
+import org.greenrobot.greendao.daotest.DaoMaster.OpenHelper;
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.daotest.SimpleEntity;
+import org.greenrobot.greendao.database.Database;
+
+public class EncryptedDatabaseOpenHelperTest extends ApplicationTestCase {
+
+    public EncryptedDatabaseOpenHelperTest() {
+        super(Application.class);
+    }
+
+    public void testEncryptedDevOpenHelper() {
+        createApplication();
+        Database db = new DevOpenHelper(getApplication(), null).getEncryptedReadableDb("password");
+        assertDbEncryptedAndFunctional(db);
+    }
+
+    public void testEncryptedOpenHelper() {
+        createApplication();
+        Database db = new OpenHelper(getApplication(), null) {
+            @Override
+            public void onUpgrade(Database db, int oldVersion, int newVersion) {
+
+            }
+        }.getEncryptedReadableDb("password");
+        assertDbEncryptedAndFunctional(db);
+    }
+
+    private void assertDbEncryptedAndFunctional(Database db) {
+        EncryptedDbUtils.assertEncryptedDbUsed(db);
+        DaoSession daoSession = new DaoMaster(db).newSession();
+        daoSession.insert(new SimpleEntity());
+        assertEquals(1, daoSession.loadAll(SimpleEntity.class).size());
+    }
+
+}
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDbUtils.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDbUtils.java
new file mode 100644
index 00000000..0ffc8fb4
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDbUtils.java
@@ -0,0 +1,73 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.encrypted;
+
+import android.content.Context;
+import android.database.Cursor;
+
+import net.sqlcipher.database.SQLiteDatabase;
+
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.EncryptedDatabase;
+
+import java.io.File;
+
+import static junit.framework.Assert.assertEquals;
+import static junit.framework.Assert.assertTrue;
+
+/**
+ * Helper to create encrypted databases.
+ */
+public class EncryptedDbUtils {
+    private static boolean loadedLibs;
+
+    public static Database createDatabase(Context context, String dbName, String password) {
+        if (!loadedLibs) {
+            loadedLibs = true;
+            SQLiteDatabase.loadLibs(context);
+        }
+        SQLiteDatabase sqLiteDatabase;
+        if (dbName == null) {
+            sqLiteDatabase = SQLiteDatabase.create(null, password);
+        } else {
+            File dbFile = context.getDatabasePath(dbName);
+            dbFile.getParentFile().mkdir();
+            context.deleteDatabase(dbName);
+            sqLiteDatabase = SQLiteDatabase.openOrCreateDatabase(dbFile, password, null);
+        }
+        return new EncryptedDatabase(sqLiteDatabase);
+    }
+
+    public static String queryString(Database db, String sql) {
+        Cursor cursor = db.rawQuery(sql, null);
+        try {
+            assertTrue(cursor.moveToNext());
+            return cursor.getString(0);
+        } finally {
+            cursor.close();
+        }
+    }
+
+    public static void assertEncryptedDbUsed(Database db) {
+        assertEquals("3.15.2", queryString(db, "select sqlite_version()"));
+        String cipherProvider = queryString(db, "PRAGMA cipher_provider_version");
+        assertTrue(cipherProvider, cipherProvider.contains("OpenSSL"));
+    }
+
+}
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptionSimpleEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptionSimpleEntityTest.java
new file mode 100644
index 00000000..5145d5d4
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptionSimpleEntityTest.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.encrypted;
+
+import net.sqlcipher.database.SQLiteConstraintException;
+
+import java.util.List;
+
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.daotest.SimpleEntity;
+import org.greenrobot.greendao.daotest.SimpleEntityDao.Properties;
+import org.greenrobot.greendao.daotest.entity.SimpleEntityTest;
+
+public class EncryptionSimpleEntityTest extends SimpleEntityTest {
+    @Override
+    protected Database createDatabase() {
+        return EncryptedDbUtils.createDatabase(getContext(), null, "password");
+    }
+
+    @Override
+    public void testInsertTwice() {
+        try {
+            super.testInsertTwice();
+            fail("Expected SQLCipher exception");
+        } catch (SQLiteConstraintException ex) {
+            // OK, expected
+        }
+    }
+
+    public void testEncryptedDbUsed() {
+        EncryptedDbUtils.assertEncryptedDbUsed(db);
+    }
+
+    public void testOrderAscString() {
+        // SQLCipher 3.5.0 does not understand "COLLATE LOCALIZED ASC" and crashed here initially
+        List<SimpleEntity> result = dao.queryBuilder().orderAsc(Properties.SimpleString).list();
+        assertEquals(0, result.size());
+    }
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/AbcdefEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AbcdefEntityTest.java
similarity index 77%
rename from DaoTest/src/de/greenrobot/daotest/entity/AbcdefEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AbcdefEntityTest.java
index e2797471..242691da 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/AbcdefEntityTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AbcdefEntityTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,15 +11,16 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.entity;
 
-import de.greenrobot.dao.test.AbstractDaoTestLongPk;
-import de.greenrobot.daotest.AbcdefEntity;
-import de.greenrobot.daotest.AbcdefEntityDao;
+package org.greenrobot.greendao.daotest.entity;
+
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+import org.greenrobot.greendao.daotest.AbcdefEntity;
+import org.greenrobot.greendao.daotest.AbcdefEntityDao;
 
 public class AbcdefEntityTest extends AbstractDaoTestLongPk<AbcdefEntityDao, AbcdefEntity> {
 
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityMultithreadingTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AnActiveEntityMultithreadingTest.java
similarity index 89%
rename from DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityMultithreadingTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AnActiveEntityMultithreadingTest.java
index af0fc459..2747bfef 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityMultithreadingTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AnActiveEntityMultithreadingTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2013 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,22 +11,23 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.entity;
+
+package org.greenrobot.greendao.daotest.entity;
 
 import java.lang.reflect.Field;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
-import de.greenrobot.dao.DaoLog;
-import de.greenrobot.dao.test.AbstractDaoSessionTest;
-import de.greenrobot.daotest.AnActiveEntity;
-import de.greenrobot.daotest.AnActiveEntityDao;
-import de.greenrobot.daotest.DaoMaster;
-import de.greenrobot.daotest.DaoSession;
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.test.AbstractDaoSessionTest;
+import org.greenrobot.greendao.daotest.AnActiveEntity;
+import org.greenrobot.greendao.daotest.AnActiveEntityDao;
+import org.greenrobot.greendao.daotest.DaoMaster;
+import org.greenrobot.greendao.daotest.DaoSession;
 
 public class AnActiveEntityMultithreadingTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
 
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AnActiveEntityTest.java
similarity index 84%
rename from DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AnActiveEntityTest.java
index ddb9398f..7f0d32df 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AnActiveEntityTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,18 +11,19 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.entity;
-
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.test.AbstractDaoSessionTest;
-import de.greenrobot.daotest.AnActiveEntity;
-import de.greenrobot.daotest.AnActiveEntityDao;
-import de.greenrobot.daotest.DaoMaster;
-import de.greenrobot.daotest.DaoSession;
+
+package org.greenrobot.greendao.daotest.entity;
+
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.test.AbstractDaoSessionTest;
+import org.greenrobot.greendao.daotest.AnActiveEntity;
+import org.greenrobot.greendao.daotest.AnActiveEntityDao;
+import org.greenrobot.greendao.daotest.DaoMaster;
+import org.greenrobot.greendao.daotest.DaoSession;
 
 public class AnActiveEntityTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
 
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AutoincrementEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AutoincrementEntityTest.java
new file mode 100644
index 00000000..747c5ab4
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AutoincrementEntityTest.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.entity;
+
+import org.greenrobot.greendao.test.AbstractDaoSessionTest;
+import org.greenrobot.greendao.daotest.AutoincrementEntity;
+import org.greenrobot.greendao.daotest.DaoMaster;
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.daotest.SimpleEntity;
+
+public class AutoincrementEntityTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
+
+    public AutoincrementEntityTest() {
+        super(DaoMaster.class);
+    }
+
+    public void testAutoincrement() {
+        AutoincrementEntity entity = new AutoincrementEntity();
+        daoSession.insert(entity);
+        Long id1 = entity.getId();
+        assertNotNull(id1);
+        daoSession.delete(entity);
+
+        AutoincrementEntity entity2 = new AutoincrementEntity();
+        daoSession.insert(entity2);
+        assertEquals(id1 + 1, (long) entity2.getId());
+    }
+
+    public void testNoAutoincrement() {
+        SimpleEntity entity = new SimpleEntity();
+        daoSession.insert(entity);
+        Long id1 = entity.getId();
+        assertNotNull(id1);
+        daoSession.delete(entity);
+
+        SimpleEntity entity2 = new SimpleEntity();
+        daoSession.insert(entity2);
+        assertEquals(id1, entity2.getId());
+    }
+
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/CustomTypeEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/CustomTypeEntityTest.java
similarity index 54%
rename from DaoTest/src/de/greenrobot/daotest/entity/CustomTypeEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/CustomTypeEntityTest.java
index 933035fc..a0507271 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/CustomTypeEntityTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/CustomTypeEntityTest.java
@@ -1,9 +1,27 @@
-package de.greenrobot.daotest.entity;
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
 
-import de.greenrobot.dao.test.AbstractDaoTestLongPk;
-import de.greenrobot.daotest.CustomTypeEntity;
-import de.greenrobot.daotest.CustomTypeEntityDao;
-import de.greenrobot.daotest.customtype.MyTimestamp;
+package org.greenrobot.greendao.daotest.entity;
+
+import org.greenrobot.greendao.daotest.CustomTypeEntity;
+import org.greenrobot.greendao.daotest.CustomTypeEntityDao;
+import org.greenrobot.greendao.daotest.customtype.MyTimestamp;
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
 
 import java.util.List;
 
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/DateEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/DateEntityTest.java
similarity index 86%
rename from DaoTest/src/de/greenrobot/daotest/entity/DateEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/DateEntityTest.java
index d3a8b21b..f7c88656 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/DateEntityTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/DateEntityTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,17 +11,18 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.entity;
+
+package org.greenrobot.greendao.daotest.entity;
 
 import java.util.Date;
 
-import de.greenrobot.dao.test.AbstractDaoTestLongPk;
-import de.greenrobot.daotest.DateEntity;
-import de.greenrobot.daotest.DateEntityDao;
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+import org.greenrobot.greendao.daotest.DateEntity;
+import org.greenrobot.greendao.daotest.DateEntityDao;
 
 public class DateEntityTest extends AbstractDaoTestLongPk<DateEntityDao, DateEntity> {
 
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ExtendsImplementsEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ExtendsImplementsEntityTest.java
new file mode 100644
index 00000000..63b8679f
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ExtendsImplementsEntityTest.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.entity;
+
+import java.io.Serializable;
+
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+import org.greenrobot.greendao.daotest.ExtendsImplementsEntity;
+import org.greenrobot.greendao.daotest.ExtendsImplementsEntityDao;
+import org.greenrobot.greendao.daotest.TestInterface;
+import org.greenrobot.greendao.daotest.TestSuperclass;
+
+public class ExtendsImplementsEntityTest extends
+        AbstractDaoTestLongPk<ExtendsImplementsEntityDao, ExtendsImplementsEntity> {
+
+    public ExtendsImplementsEntityTest() {
+        super(ExtendsImplementsEntityDao.class);
+    }
+
+    @Override
+    protected ExtendsImplementsEntity createEntity(Long key) {
+        ExtendsImplementsEntity entity = new ExtendsImplementsEntity();
+        entity.setId(key);
+        return entity;
+    }
+
+    public void testInheritance() {
+        ExtendsImplementsEntity entity = createEntityWithRandomPk();
+        assertTrue(entity instanceof TestSuperclass);
+        assertTrue(entity instanceof TestInterface);
+        assertTrue(entity instanceof Serializable);
+    }
+
+}
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/IndexedStringEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/IndexedStringEntityTest.java
new file mode 100644
index 00000000..4d69d476
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/IndexedStringEntityTest.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.entity;
+
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+
+import org.greenrobot.greendao.daotest.IndexedStringEntity;
+import org.greenrobot.greendao.daotest.IndexedStringEntityDao;
+
+public class IndexedStringEntityTest extends AbstractDaoTestLongPk<IndexedStringEntityDao, IndexedStringEntity> {
+
+    public IndexedStringEntityTest() {
+        super(IndexedStringEntityDao.class);
+    }
+
+    @Override
+    protected IndexedStringEntity createEntity(Long key) {
+        IndexedStringEntity entity = new IndexedStringEntity();
+        entity.setId(key);
+        return entity;
+    }
+
+}
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/JoinManyToDateEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/JoinManyToDateEntityTest.java
new file mode 100644
index 00000000..7477e830
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/JoinManyToDateEntityTest.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.entity;
+
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+
+import org.greenrobot.greendao.daotest.JoinManyToDateEntity;
+import org.greenrobot.greendao.daotest.JoinManyToDateEntityDao;
+
+public class JoinManyToDateEntityTest extends AbstractDaoTestLongPk<JoinManyToDateEntityDao, JoinManyToDateEntity> {
+
+    public JoinManyToDateEntityTest() {
+        super(JoinManyToDateEntityDao.class);
+    }
+
+    @Override
+    protected JoinManyToDateEntity createEntity(Long key) {
+        JoinManyToDateEntity entity = new JoinManyToDateEntity();
+        entity.setId(key);
+        return entity;
+    }
+
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/RelationEntityTest.java
similarity index 92%
rename from DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/RelationEntityTest.java
index fe9b2f45..16b58213 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/RelationEntityTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,22 +11,23 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.entity;
+
+package org.greenrobot.greendao.daotest.entity;
 
 import java.util.List;
 
-import de.greenrobot.dao.identityscope.IdentityScopeType;
-import de.greenrobot.dao.test.AbstractDaoTestLongPk;
-import de.greenrobot.daotest.DaoMaster;
-import de.greenrobot.daotest.DaoSession;
-import de.greenrobot.daotest.RelationEntity;
-import de.greenrobot.daotest.RelationEntityDao;
-import de.greenrobot.daotest.TestEntity;
-import de.greenrobot.daotest.TestEntityDao;
+import org.greenrobot.greendao.identityscope.IdentityScopeType;
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+import org.greenrobot.greendao.daotest.DaoMaster;
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.daotest.RelationEntity;
+import org.greenrobot.greendao.daotest.RelationEntityDao;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao;
 
 public class RelationEntityTest extends AbstractDaoTestLongPk<RelationEntityDao, RelationEntity> {
 
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTestIdentityScope.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/RelationEntityTestIdentityScope.java
similarity index 90%
rename from DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTestIdentityScope.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/RelationEntityTestIdentityScope.java
index 3cee5b10..757c247e 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTestIdentityScope.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/RelationEntityTestIdentityScope.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,17 +11,18 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.entity;
+
+package org.greenrobot.greendao.daotest.entity;
 
 import java.util.List;
 
-import de.greenrobot.dao.identityscope.IdentityScopeType;
-import de.greenrobot.daotest.RelationEntity;
-import de.greenrobot.daotest.RelationEntityDao;
+import org.greenrobot.greendao.identityscope.IdentityScopeType;
+import org.greenrobot.greendao.daotest.RelationEntity;
+import org.greenrobot.greendao.daotest.RelationEntityDao;
 
 /**
  * @author Markus
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityNotNullTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SimpleEntityNotNullTest.java
similarity index 90%
rename from DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityNotNullTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SimpleEntityNotNullTest.java
index 15111b52..32b2bf5c 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityNotNullTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SimpleEntityNotNullTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,17 +11,18 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.entity;
+
+package org.greenrobot.greendao.daotest.entity;
 
 import java.util.Arrays;
 
-import de.greenrobot.dao.test.AbstractDaoTestLongPk;
-import de.greenrobot.daotest.SimpleEntityNotNull;
-import de.greenrobot.daotest.SimpleEntityNotNullDao;
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+import org.greenrobot.greendao.daotest.SimpleEntityNotNull;
+import org.greenrobot.greendao.daotest.SimpleEntityNotNullDao;
 
 public class SimpleEntityNotNullTest extends AbstractDaoTestLongPk<SimpleEntityNotNullDao, SimpleEntityNotNull> {
 
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SimpleEntityTest.java
similarity index 93%
rename from DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SimpleEntityTest.java
index 0bb5899a..257968eb 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SimpleEntityTest.java
@@ -1,10 +1,8 @@
-package de.greenrobot.daotest.entity;
-
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -13,15 +11,18 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
+
+package org.greenrobot.greendao.daotest.entity;
+
 import java.util.Arrays;
 
-import de.greenrobot.dao.test.AbstractDaoTestLongPk;
-import de.greenrobot.daotest.SimpleEntity;
-import de.greenrobot.daotest.SimpleEntityDao;
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+import org.greenrobot.greendao.daotest.SimpleEntity;
+import org.greenrobot.greendao.daotest.SimpleEntityDao;
 
 public class SimpleEntityTest extends AbstractDaoTestLongPk<SimpleEntityDao, SimpleEntity> {
 
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SpecialNamesEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SpecialNamesEntityTest.java
similarity index 77%
rename from DaoTest/src/de/greenrobot/daotest/entity/SpecialNamesEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SpecialNamesEntityTest.java
index 35806fef..a9c2dcff 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/SpecialNamesEntityTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SpecialNamesEntityTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,15 +11,16 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.entity;
 
-import de.greenrobot.dao.test.AbstractDaoTestLongPk;
-import de.greenrobot.daotest.SpecialNamesEntity;
-import de.greenrobot.daotest.SpecialNamesEntityDao;
+package org.greenrobot.greendao.daotest.entity;
+
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+import org.greenrobot.greendao.daotest.SpecialNamesEntity;
+import org.greenrobot.greendao.daotest.SpecialNamesEntityDao;
 
 public class SpecialNamesEntityTest extends AbstractDaoTestLongPk<SpecialNamesEntityDao, SpecialNamesEntity> {
 
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SqliteMasterTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SqliteMasterTest.java
new file mode 100644
index 00000000..07e0c021
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SqliteMasterTest.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.entity;
+
+import java.util.List;
+
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.test.AbstractDaoTest;
+import org.greenrobot.greendao.daotest.SqliteMaster;
+import org.greenrobot.greendao.daotest.SqliteMasterDao;
+import org.greenrobot.greendao.daotest.SqliteMasterDao.Properties;
+
+public class SqliteMasterTest extends AbstractDaoTest<SqliteMasterDao, SqliteMaster, Void> {
+
+    public SqliteMasterTest() {
+        super(SqliteMasterDao.class);
+    }
+
+    public void testLoadAll() {
+        List<SqliteMaster> all = dao.loadAll();
+        for (SqliteMaster meta : all) {
+            DaoLog.v(meta.toString());
+        }
+    }
+
+    public void testQueryRaw() {
+        List<SqliteMaster> tables = dao.queryRaw("WHERE " + Properties.Type.columnName + "=?", "table");
+        for (SqliteMaster table : tables) {
+            DaoLog.v(table.toString());
+        }
+    }
+
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityIdentityScopeTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/StringKeyValueEntityIdentityScopeTest.java
similarity index 91%
rename from DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityIdentityScopeTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/StringKeyValueEntityIdentityScopeTest.java
index a071cfe4..0b9b5d6d 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityIdentityScopeTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/StringKeyValueEntityIdentityScopeTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,14 +11,15 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.entity;
 
-import de.greenrobot.dao.identityscope.IdentityScopeObject;
-import de.greenrobot.daotest.StringKeyValueEntity;
+package org.greenrobot.greendao.daotest.entity;
+
+import org.greenrobot.greendao.identityscope.IdentityScopeObject;
+import org.greenrobot.greendao.daotest.StringKeyValueEntity;
 
 public class StringKeyValueEntityIdentityScopeTest extends StringKeyValueEntityTest {
     @Override
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/StringKeyValueEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/StringKeyValueEntityTest.java
new file mode 100644
index 00000000..68bdab2e
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/StringKeyValueEntityTest.java
@@ -0,0 +1,52 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.entity;
+
+import junit.framework.Assert;
+import org.greenrobot.greendao.test.AbstractDaoTestStringPk;
+import org.greenrobot.greendao.daotest.StringKeyValueEntity;
+import org.greenrobot.greendao.daotest.StringKeyValueEntityDao;
+
+public class StringKeyValueEntityTest extends AbstractDaoTestStringPk<StringKeyValueEntityDao, StringKeyValueEntity> {
+
+    public StringKeyValueEntityTest() {
+        super(StringKeyValueEntityDao.class);
+    }
+
+    @Override
+    protected StringKeyValueEntity createEntity(String key) {
+        if(key == null) {
+            return null;
+        }
+        StringKeyValueEntity entity = new StringKeyValueEntity();
+        entity.setKey(key);
+        return entity;
+    }
+
+    public void testInsertWithoutPK() {
+        StringKeyValueEntity entity = createEntity(null);
+        try {
+            dao.insert(entity);
+            Assert.fail("Insert without pre-set PK succeeded");
+        } catch (Exception e) {
+            // Expected
+        }
+    }
+
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityIdentityScopeTest.java
similarity index 77%
rename from DaoTest/src/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityIdentityScopeTest.java
index 755156cb..6acce6f1 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityIdentityScopeTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,14 +11,15 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.entity;
 
-import de.greenrobot.dao.identityscope.IdentityScopeLong;
-import de.greenrobot.daotest.TestEntity;
+package org.greenrobot.greendao.daotest.entity;
+
+import org.greenrobot.greendao.identityscope.IdentityScopeLong;
+import org.greenrobot.greendao.daotest.TestEntity;
 
 public class TestEntityIdentityScopeTest extends TestEntityTest {
     @Override
@@ -50,6 +51,17 @@ public void testDetach() {
         assertNotSame(entity, entity3);
     }
 
+    public void testDetachAll() {
+        TestEntity entity1 = createEntity(null);
+        TestEntity entity2 = createEntity(null);
+        dao.insertInTx(entity1, entity2);
+        dao.detachAll();
+        TestEntity entity1a = dao.load(entity1.getId());
+        TestEntity entity2a = dao.load(entity2.getId());
+        assertNotSame(entity1, entity1a);
+        assertNotSame(entity2, entity2a);
+    }
+
     public void testDetachOther() {
         TestEntity entity = createEntity(null);
         dao.insert(entity);
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityTest.java
similarity index 84%
rename from DaoTest/src/de/greenrobot/daotest/entity/TestEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityTest.java
index 2ad04693..d1f75a15 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,16 +11,17 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.entity;
 
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.test.AbstractDaoTestLongPk;
-import de.greenrobot.daotest.TestEntity;
-import de.greenrobot.daotest.TestEntityDao;
+package org.greenrobot.greendao.daotest.entity;
+
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao;
 
 public class TestEntityTest extends AbstractDaoTestLongPk<TestEntityDao, TestEntity> {
 
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityTestBase.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityTestBase.java
similarity index 88%
rename from DaoTest/src/de/greenrobot/daotest/entity/TestEntityTestBase.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityTestBase.java
index a026ecc8..aa60ad03 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityTestBase.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityTestBase.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,18 +11,19 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.entity;
+
+package org.greenrobot.greendao.daotest.entity;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import de.greenrobot.dao.test.AbstractDaoTest;
-import de.greenrobot.daotest.TestEntity;
-import de.greenrobot.daotest.TestEntityDao;
+import org.greenrobot.greendao.test.AbstractDaoTest;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao;
 
 public abstract class TestEntityTestBase extends AbstractDaoTest<TestEntityDao, TestEntity, Long> {
 
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/ToManyEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ToManyEntityTest.java
similarity index 85%
rename from DaoTest/src/de/greenrobot/daotest/entity/ToManyEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ToManyEntityTest.java
index 592bdddf..2612f360 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/ToManyEntityTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ToManyEntityTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,27 +11,28 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.entity;
+
+package org.greenrobot.greendao.daotest.entity;
 
 import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import de.greenrobot.dao.test.AbstractDaoSessionTest;
-import de.greenrobot.daotest.DaoMaster;
-import de.greenrobot.daotest.DaoSession;
-import de.greenrobot.daotest.DateEntity;
-import de.greenrobot.daotest.DateEntityDao;
-import de.greenrobot.daotest.JoinManyToDateEntity;
-import de.greenrobot.daotest.ToManyEntity;
-import de.greenrobot.daotest.ToManyEntityDao;
-import de.greenrobot.daotest.ToManyTargetEntity;
-import de.greenrobot.daotest.ToManyTargetEntityDao;
+import org.greenrobot.greendao.test.AbstractDaoSessionTest;
+import org.greenrobot.greendao.daotest.DaoMaster;
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.daotest.DateEntity;
+import org.greenrobot.greendao.daotest.DateEntityDao;
+import org.greenrobot.greendao.daotest.JoinManyToDateEntity;
+import org.greenrobot.greendao.daotest.ToManyEntity;
+import org.greenrobot.greendao.daotest.ToManyEntityDao;
+import org.greenrobot.greendao.daotest.ToManyTargetEntity;
+import org.greenrobot.greendao.daotest.ToManyTargetEntityDao;
 
 public class ToManyEntityTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
 
@@ -69,7 +70,7 @@ public void runTestToManyBasics(long id, int count) {
     public void testGetToManyTwice() {
         prepareToMany(1, 3);
 
-        ToManyEntity testEntity = toManyEntityDao.load(1l);
+        ToManyEntity testEntity = toManyEntityDao.load(1L);
         List<ToManyTargetEntity> resolvedToMany1 = testEntity.getToManyTargetEntityList();
         List<ToManyTargetEntity> resolvedToMany2 = testEntity.getToManyTargetEntityList();
         assertSame(resolvedToMany1, resolvedToMany2);
@@ -78,7 +79,7 @@ public void testGetToManyTwice() {
     public void testResetToMany() {
         ToManyTargetEntity[] targetEntities = prepareToMany(1, 3);
 
-        ToManyEntity testEntity = toManyEntityDao.load(1l);
+        ToManyEntity testEntity = toManyEntityDao.load(1L);
         List<ToManyTargetEntity> resolvedToMany1 = testEntity.getToManyTargetEntityList();
         testEntity.resetToManyTargetEntityList();
         List<ToManyTargetEntity> resolvedToMany2 = testEntity.getToManyTargetEntityList();
@@ -89,12 +90,12 @@ public void testResetToMany() {
     public void testChangeResetToMany() {
         prepareToMany(1, 3);
 
-        ToManyEntity testEntity = toManyEntityDao.load(1l);
+        ToManyEntity testEntity = toManyEntityDao.load(1L);
         List<ToManyTargetEntity> resolvedToMany1 = testEntity.getToManyTargetEntityList();
         testEntity.resetToManyTargetEntityList();
 
         ToManyTargetEntity newEntity = new ToManyTargetEntity();
-        newEntity.setToManyId(1l);
+        newEntity.setToManyId(1L);
         daoSession.insert(newEntity);
 
         List<ToManyTargetEntity> resolvedToMany2 = testEntity.getToManyTargetEntityList();
@@ -110,7 +111,7 @@ public void testChangeResetToMany() {
     public void testToManyOrder() {
         prepareToMany(1, 3);
 
-        ToManyEntity testEntity = toManyEntityDao.load(1l);
+        ToManyEntity testEntity = toManyEntityDao.load(1L);
         List<ToManyTargetEntity> resolvedToManyAsc = testEntity.getToManyTargetEntityList();
         List<ToManyTargetEntity> resolvedToManyDesc = testEntity.getToManyDescList();
         assertNotSame(resolvedToManyAsc, resolvedToManyDesc);
@@ -121,12 +122,12 @@ public void testToManyOrder() {
     }
 
     public void testJoinProperty() {
-        ToManyEntity entity = new ToManyEntity(1l);
+        ToManyEntity entity = new ToManyEntity(1L);
         entity.setSourceJoinProperty("JOIN ME");
         daoSession.insert(entity);
         insertTargetEntities(null, 3, "JOIN ME");
 
-        ToManyEntity testEntity = toManyEntityDao.load(1l);
+        ToManyEntity testEntity = toManyEntityDao.load(1L);
         List<ToManyTargetEntity> targetEntities = testEntity.getToManyByJoinProperty();
         assertEquals(3, targetEntities.size());
 
@@ -143,12 +144,12 @@ public void testJoinProperty() {
     }
 
     public void testTwoJoinProperty() {
-        ToManyEntity entity = new ToManyEntity(1l);
+        ToManyEntity entity = new ToManyEntity(1L);
         entity.setSourceJoinProperty("JOIN ME");
         daoSession.insert(entity);
-        insertTargetEntities(1l, 3, "JOIN ME");
+        insertTargetEntities(1L, 3, "JOIN ME");
 
-        ToManyEntity testEntity = toManyEntityDao.load(1l);
+        ToManyEntity testEntity = toManyEntityDao.load(1L);
         List<ToManyTargetEntity> targetEntities = testEntity.getToManyJoinTwo();
         assertEquals(3, targetEntities.size());
 
@@ -165,7 +166,7 @@ public void testTwoJoinProperty() {
     }
 
     public void testToManyWithJoin() {
-        ToManyEntity entity = new ToManyEntity(1l);
+        ToManyEntity entity = new ToManyEntity(1L);
         daoSession.insert(entity);
         List<DateEntity> dateEntities = entity.getDateEntityList();
         assertEquals(0, dateEntities.size());
@@ -195,12 +196,12 @@ private void assertSameEntities(ToManyTargetEntity[] targetEntities, List<ToMany
         int count = targetEntities.length;
         assertEquals(count, resolvedToMany.size());
 
-        Map<Long, ToManyTargetEntity> resolvedMap = new HashMap<Long, ToManyTargetEntity>();
+        Map<Long, ToManyTargetEntity> resolvedMap = new HashMap<>();
         for (ToManyTargetEntity resolvedEntity : resolvedToMany) {
             resolvedMap.put(resolvedEntity.getId(), resolvedEntity);
         }
         for (int i = 0; i < count; i++) {
-            long entityId = (long) targetEntities[i].getId();
+            long entityId = targetEntities[i].getId();
             assertTrue("ID=" + entityId, resolvedMap.containsKey(entityId));
             assertSame(targetEntities[i], resolvedMap.get(entityId));
         }
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/ToManyTargetEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ToManyTargetEntityTest.java
similarity index 77%
rename from DaoTest/src/de/greenrobot/daotest/entity/ToManyTargetEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ToManyTargetEntityTest.java
index b6b806d6..6bbd08f2 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/ToManyTargetEntityTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ToManyTargetEntityTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,15 +11,16 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.entity;
 
-import de.greenrobot.dao.test.AbstractDaoTestLongPk;
-import de.greenrobot.daotest.ToManyTargetEntity;
-import de.greenrobot.daotest.ToManyTargetEntityDao;
+package org.greenrobot.greendao.daotest.entity;
+
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+import org.greenrobot.greendao.daotest.ToManyTargetEntity;
+import org.greenrobot.greendao.daotest.ToManyTargetEntityDao;
 
 public class ToManyTargetEntityTest extends AbstractDaoTestLongPk<ToManyTargetEntityDao, ToManyTargetEntity> {
 
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TransactionTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TransactionTest.java
new file mode 100644
index 00000000..73345759
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TransactionTest.java
@@ -0,0 +1,29 @@
+package org.greenrobot.greendao.daotest.entity;
+
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao;
+import org.greenrobot.greendao.daotest.TestEntityDao.Properties;
+
+import java.util.ArrayList;
+
+public class TransactionTest extends TestEntityTestBase {
+    public void testUpdateTxFailed() {
+        String sql = "CREATE UNIQUE INDEX test_simple_string_unique ON " + TestEntityDao.TABLENAME + "(" +
+                Properties.SimpleString.columnName + ")";
+        dao.getDatabase().execSQL(sql);
+        ArrayList<TestEntity> entities = insert(2);
+        TestEntity entity1 = entities.get(0);
+        String valueBeforeUpdate = entity1.getSimpleString();
+
+        entity1.setSimpleString("unique");
+        entities.get(1).setSimpleString("unique");
+        try {
+            dao.updateInTx(entities);
+            fail("Should have thrown");
+        } catch (RuntimeException e) {
+            // OK
+        }
+        dao.refresh(entity1);
+        assertEquals(valueBeforeUpdate, entity1.getSimpleString());
+    }
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/TreeEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TreeEntityTest.java
similarity index 71%
rename from DaoTest/src/de/greenrobot/daotest/entity/TreeEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TreeEntityTest.java
index dc09eb9b..65616dd9 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/TreeEntityTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TreeEntityTest.java
@@ -1,10 +1,28 @@
-package de.greenrobot.daotest.entity;
-
-import de.greenrobot.dao.test.AbstractDaoSessionTest;
-import de.greenrobot.daotest.DaoMaster;
-import de.greenrobot.daotest.DaoSession;
-import de.greenrobot.daotest.TreeEntity;
-import de.greenrobot.daotest.TreeEntityDao;
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.entity;
+
+import org.greenrobot.greendao.test.AbstractDaoSessionTest;
+import org.greenrobot.greendao.daotest.DaoMaster;
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.daotest.TreeEntity;
+import org.greenrobot.greendao.daotest.TreeEntityDao;
 
 public class TreeEntityTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
 
diff --git a/DaoTest/src/de/greenrobot/daotest/query/CountQueryTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CountQueryTest.java
similarity index 90%
rename from DaoTest/src/de/greenrobot/daotest/query/CountQueryTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CountQueryTest.java
index 8c4593ff..17ed7fa7 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/CountQueryTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CountQueryTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,20 +11,21 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.query;
+
+package org.greenrobot.greendao.daotest.query;
 
 import java.util.ArrayList;
 
-import de.greenrobot.dao.query.CountQuery;
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.query.QueryBuilder;
-import de.greenrobot.daotest.TestEntity;
-import de.greenrobot.daotest.TestEntityDao.Properties;
-import de.greenrobot.daotest.entity.TestEntityTestBase;
+import org.greenrobot.greendao.daotest.entity.TestEntityTestBase;
+import org.greenrobot.greendao.query.CountQuery;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.query.QueryBuilder;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao.Properties;
 
 // TODO more tests
 public class CountQueryTest extends TestEntityTestBase {
diff --git a/DaoTest/src/de/greenrobot/daotest/query/CountQueryThreadLocalTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CountQueryThreadLocalTest.java
similarity index 85%
rename from DaoTest/src/de/greenrobot/daotest/query/CountQueryThreadLocalTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CountQueryThreadLocalTest.java
index 8d64894e..fac7df15 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/CountQueryThreadLocalTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CountQueryThreadLocalTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2013 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,18 +11,19 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.query;
 
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.query.CountQuery;
-import de.greenrobot.dao.query.QueryBuilder;
-import de.greenrobot.daotest.TestEntity;
-import de.greenrobot.daotest.TestEntityDao.Properties;
-import de.greenrobot.daotest.entity.TestEntityTestBase;
+package org.greenrobot.greendao.daotest.query;
+
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.query.CountQuery;
+import org.greenrobot.greendao.query.QueryBuilder;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao.Properties;
+import org.greenrobot.greendao.daotest.entity.TestEntityTestBase;
 
 public class CountQueryThreadLocalTest extends TestEntityTestBase {
     private CountQuery<TestEntity> queryFromOtherThread;
diff --git a/DaoTest/src/de/greenrobot/daotest/query/CursorQueryTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CursorQueryTest.java
similarity index 83%
rename from DaoTest/src/de/greenrobot/daotest/query/CursorQueryTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CursorQueryTest.java
index be86693b..ea5d2c24 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/CursorQueryTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CursorQueryTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,17 +11,18 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.query;
+
+package org.greenrobot.greendao.daotest.query;
 
 import android.database.Cursor;
-import de.greenrobot.dao.query.CursorQuery;
-import de.greenrobot.dao.query.QueryBuilder;
-import de.greenrobot.daotest.TestEntityDao.Properties;
-import de.greenrobot.daotest.entity.TestEntityTestBase;
+import org.greenrobot.greendao.query.CursorQuery;
+import org.greenrobot.greendao.query.QueryBuilder;
+import org.greenrobot.greendao.daotest.TestEntityDao.Properties;
+import org.greenrobot.greendao.daotest.entity.TestEntityTestBase;
 
 // TODO more tests
 public class CursorQueryTest extends TestEntityTestBase {
diff --git a/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/DeleteQueryTest.java
similarity index 89%
rename from DaoTest/src/de/greenrobot/daotest/query/DeleteQueryTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/DeleteQueryTest.java
index d189ad77..9cda1320 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/DeleteQueryTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,21 +11,22 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.query;
+
+package org.greenrobot.greendao.daotest.query;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import de.greenrobot.dao.query.DeleteQuery;
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.query.QueryBuilder;
-import de.greenrobot.daotest.TestEntity;
-import de.greenrobot.daotest.TestEntityDao.Properties;
-import de.greenrobot.daotest.entity.TestEntityTestBase;
+import org.greenrobot.greendao.query.DeleteQuery;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.query.QueryBuilder;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao.Properties;
+import org.greenrobot.greendao.daotest.entity.TestEntityTestBase;
 
 // TODO more tests
 public class DeleteQueryTest extends TestEntityTestBase {
diff --git a/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryThreadLocalTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/DeleteQueryThreadLocalTest.java
similarity index 86%
rename from DaoTest/src/de/greenrobot/daotest/query/DeleteQueryThreadLocalTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/DeleteQueryThreadLocalTest.java
index adb0c582..6d543bc4 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryThreadLocalTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/DeleteQueryThreadLocalTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2013 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,18 +11,19 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.query;
 
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.query.DeleteQuery;
-import de.greenrobot.dao.query.QueryBuilder;
-import de.greenrobot.daotest.TestEntity;
-import de.greenrobot.daotest.TestEntityDao.Properties;
-import de.greenrobot.daotest.entity.TestEntityTestBase;
+package org.greenrobot.greendao.daotest.query;
+
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao.Properties;
+import org.greenrobot.greendao.daotest.entity.TestEntityTestBase;
+import org.greenrobot.greendao.query.DeleteQuery;
+import org.greenrobot.greendao.query.QueryBuilder;
 
 public class DeleteQueryThreadLocalTest extends TestEntityTestBase {
     private DeleteQuery<TestEntity> queryFromOtherThread;
diff --git a/DaoTest/src/de/greenrobot/daotest/query/JoinTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/JoinTest.java
similarity index 79%
rename from DaoTest/src/de/greenrobot/daotest/query/JoinTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/JoinTest.java
index ff06aff5..ec2baeda 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/JoinTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/JoinTest.java
@@ -1,32 +1,35 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
+ * This file is part of greenDAO Generator.
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
  *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.query;
-
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.query.Join;
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.query.QueryBuilder;
-import de.greenrobot.dao.test.AbstractDaoSessionTest;
-import de.greenrobot.daotest.DaoMaster;
-import de.greenrobot.daotest.DaoSession;
-import de.greenrobot.daotest.RelationEntity;
-import de.greenrobot.daotest.RelationEntityDao;
-import de.greenrobot.daotest.TestEntity;
-import de.greenrobot.daotest.TestEntityDao;
-import de.greenrobot.daotest.TestEntityDao.Properties;
+
+package org.greenrobot.greendao.daotest.query;
+
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.query.Join;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.query.QueryBuilder;
+import org.greenrobot.greendao.test.AbstractDaoSessionTest;
+import org.greenrobot.greendao.daotest.DaoMaster;
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.daotest.RelationEntity;
+import org.greenrobot.greendao.daotest.RelationEntityDao;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao;
+import org.greenrobot.greendao.daotest.TestEntityDao.Properties;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/DaoTest/src/de/greenrobot/daotest/query/LazyListTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/LazyListTest.java
similarity index 85%
rename from DaoTest/src/de/greenrobot/daotest/query/LazyListTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/LazyListTest.java
index 7cbb071c..4cf2aca1 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/LazyListTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/LazyListTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,22 +11,23 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.query;
+
+package org.greenrobot.greendao.daotest.query;
 
 import java.util.ArrayList;
 import java.util.ListIterator;
 import java.util.NoSuchElementException;
 
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.query.CloseableListIterator;
-import de.greenrobot.dao.query.LazyList;
-import de.greenrobot.daotest.TestEntity;
-import de.greenrobot.daotest.TestEntityDao.Properties;
-import de.greenrobot.daotest.entity.TestEntityTestBase;
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.query.CloseableListIterator;
+import org.greenrobot.greendao.query.LazyList;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao.Properties;
+import org.greenrobot.greendao.daotest.entity.TestEntityTestBase;
 
 public class LazyListTest extends TestEntityTestBase {
 
@@ -35,16 +36,16 @@ public void testSizeAndGetAndPeak() {
 
         LazyList<TestEntity> listLazy = dao.queryBuilder().build().listLazy();
         assertEquals(list.size(), listLazy.size());
-        assertNull(listLazy.peak(0));
-        assertNull(listLazy.peak(1));
+        assertNull(listLazy.peek(0));
+        assertNull(listLazy.peek(1));
 
         assertNotNull(listLazy.get(1));
-        assertNull(listLazy.peak(0));
-        assertNotNull(listLazy.peak(1));
+        assertNull(listLazy.peek(0));
+        assertNotNull(listLazy.peek(1));
 
         assertNotNull(listLazy.get(0));
-        assertNotNull(listLazy.peak(0));
-        assertNotNull(listLazy.peak(1));
+        assertNotNull(listLazy.peek(0));
+        assertNotNull(listLazy.peek(1));
     }
 
     public void testGetAll100() {
@@ -83,7 +84,7 @@ public void testSublistUncached() {
     public void testIterator() {
         ArrayList<TestEntity> list = insert(100);
         LazyList<TestEntity> listLazy = dao.queryBuilder().orderAsc(Properties.SimpleInteger).build().listLazy();
-        testIerator(list, listLazy, false);
+        testIterator(list, listLazy, false);
         assertTrue(listLazy.isClosed());
     }
 
@@ -91,12 +92,12 @@ public void testIteratorUncached() {
         ArrayList<TestEntity> list = insert(100);
         LazyList<TestEntity> listLazy = dao.queryBuilder().orderAsc(Properties.SimpleInteger).build()
                 .listLazyUncached();
-        testIerator(list, listLazy, true);
+        testIterator(list, listLazy, true);
         assertFalse(listLazy.isClosed());
         listLazy.close();
     }
 
-    protected void testIerator(ArrayList<TestEntity> list, LazyList<TestEntity> listLazy, boolean uncached) {
+    protected void testIterator(ArrayList<TestEntity> list, LazyList<TestEntity> listLazy, boolean uncached) {
         ListIterator<TestEntity> iterator = listLazy.listIterator();
         try {
             iterator.previous();
@@ -118,12 +119,12 @@ protected void testIerator(ArrayList<TestEntity> list, LazyList<TestEntity> list
             }
 
             TestEntity entity = list.get(i);
-            assertNull(listLazy.peak(i));
+            assertNull(listLazy.peek(i));
             TestEntity lazyEntity = iterator.next();
             if (uncached) {
-                assertNull(listLazy.peak(i));
+                assertNull(listLazy.peek(i));
             } else {
-                assertNotNull(listLazy.peak(i));
+                assertNotNull(listLazy.peek(i));
             }
             assertEquals(entity.getId(), lazyEntity.getId());
         }
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderAndOrTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderAndOrTest.java
similarity index 93%
rename from DaoTest/src/de/greenrobot/daotest/query/QueryBuilderAndOrTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderAndOrTest.java
index d9e946b2..69add850 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderAndOrTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderAndOrTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,20 +11,21 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.query;
+
+package org.greenrobot.greendao.daotest.query;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import de.greenrobot.dao.query.QueryBuilder;
-import de.greenrobot.dao.test.AbstractDaoTest;
-import de.greenrobot.daotest.AbcdefEntity;
-import de.greenrobot.daotest.AbcdefEntityDao;
-import de.greenrobot.daotest.AbcdefEntityDao.Properties;
+import org.greenrobot.greendao.query.QueryBuilder;
+import org.greenrobot.greendao.test.AbstractDaoTest;
+import org.greenrobot.greendao.daotest.AbcdefEntity;
+import org.greenrobot.greendao.daotest.AbcdefEntityDao;
+import org.greenrobot.greendao.daotest.AbcdefEntityDao.Properties;
 
 public class QueryBuilderAndOrTest extends AbstractDaoTest<AbcdefEntityDao, AbcdefEntity, Long> {
 
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderOrderTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderOrderTest.java
similarity index 76%
rename from DaoTest/src/de/greenrobot/daotest/query/QueryBuilderOrderTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderOrderTest.java
index 24638626..5c873043 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderOrderTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderOrderTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,21 +11,22 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.query;
+
+package org.greenrobot.greendao.daotest.query;
+
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao.Properties;
+import org.greenrobot.greendao.daotest.entity.TestEntityTestBase;
+import org.greenrobot.greendao.query.QueryBuilder;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-import de.greenrobot.dao.query.QueryBuilder;
-import de.greenrobot.daotest.TestEntity;
-import de.greenrobot.daotest.TestEntityDao.Properties;
-import de.greenrobot.daotest.entity.TestEntityTestBase;
-
 public class QueryBuilderOrderTest extends TestEntityTestBase {
     @Override
     protected void setUp() throws Exception {
@@ -85,7 +86,8 @@ public void testOrderUmlauts() {
         TestEntity entityAE = addEntity(list, "Ä");
         dao.insertInTx(list);
 
-        List<TestEntity> result = dao.queryBuilder().orderAsc(Properties.SimpleString).list();
+        List<TestEntity> result = dao.queryBuilder().preferLocalizedStringOrder().orderAsc(Properties.SimpleString)
+                .list();
         assertEquals(list.size(), result.size());
         assertEquals(entityAE.getId(), result.get(0).getId());
         assertEquals(entityB.getId(), result.get(1).getId());
@@ -107,6 +109,26 @@ public void testOrderCustom() {
         assertEquals(entityAB.getId(), result.get(2).getId());
     }
 
+    public void testOrderCustom_stringOrderCollation() {
+        List<TestEntity> list = new ArrayList<TestEntity>();
+        TestEntity entityAA = addEntity(list, "Aa");
+        TestEntity entityAB = addEntity(list, "ab");
+        TestEntity entityAC = addEntity(list, "Ac");
+        dao.insertInTx(list);
+
+        List<TestEntity> result = dao.queryBuilder().stringOrderCollation(null).orderAsc(Properties.SimpleString).list();
+        assertEquals(list.size(), result.size());
+        assertEquals(entityAA.getId(), result.get(0).getId());
+        assertEquals(entityAC.getId(), result.get(1).getId());
+        assertEquals(entityAB.getId(), result.get(2).getId());
+
+        result = dao.queryBuilder().stringOrderCollation("COLLATE BINARY").orderAsc(Properties.SimpleString).list();
+        assertEquals(list.size(), result.size());
+        assertEquals(entityAA.getId(), result.get(0).getId());
+        assertEquals(entityAC.getId(), result.get(1).getId());
+        assertEquals(entityAB.getId(), result.get(2).getId());
+    }
+
     public void testOrderRaw() {
         ArrayList<TestEntity> inserted = insert(2);
         List<TestEntity> result = dao.queryBuilder().orderRaw(Properties.SimpleInteger.columnName + " ASC").list();
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderSimpleTest.java
similarity index 95%
rename from DaoTest/src/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderSimpleTest.java
index 221a80bd..7b89bc44 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderSimpleTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,23 +11,24 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.query;
+
+package org.greenrobot.greendao.daotest.query;
 
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
 
-import de.greenrobot.dao.internal.SqlUtils;
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.query.QueryBuilder;
-import de.greenrobot.dao.query.WhereCondition;
-import de.greenrobot.daotest.TestEntity;
-import de.greenrobot.daotest.TestEntityDao.Properties;
-import de.greenrobot.daotest.entity.TestEntityTestBase;
+import org.greenrobot.greendao.daotest.entity.TestEntityTestBase;
+import org.greenrobot.greendao.internal.SqlUtils;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.query.QueryBuilder;
+import org.greenrobot.greendao.query.WhereCondition;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao.Properties;
 
 public class QueryBuilderSimpleTest extends TestEntityTestBase {
     @Override
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryForThreadTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryForThreadTest.java
similarity index 85%
rename from DaoTest/src/de/greenrobot/daotest/query/QueryForThreadTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryForThreadTest.java
index c99e2747..fa3c04b9 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/QueryForThreadTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryForThreadTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2013 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,23 +11,28 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.query;
 
-import java.lang.reflect.Field;
-import java.lang.reflect.Method;
+package org.greenrobot.greendao.daotest.query;
 
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
 import android.util.SparseArray;
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.DaoLog;
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.query.QueryBuilder;
-import de.greenrobot.daotest.TestEntity;
-import de.greenrobot.daotest.TestEntityDao.Properties;
-import de.greenrobot.daotest.entity.TestEntityTestBase;
+
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao.Properties;
+import org.greenrobot.greendao.daotest.entity.TestEntityTestBase;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.query.QueryBuilder;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.util.Map;
 
 public class QueryForThreadTest extends TestEntityTestBase {
     /** Takes longer when activated */
@@ -49,17 +54,21 @@ public void testGetForCurrentThread_ParametersAreReset() {
         TestEntity entityFor2 = query.unique();
         assertEquals(value + 1, (int) entityFor2.getSimpleInteger());
         query = query.forCurrentThread();
-        TestEntity entityFor1 = query.unique();
+        assertNotNull(query.unique());
     }
 
     public void testGetForCurrentThread_ManyThreadsDontLeak() throws Exception {
+        if (VERSION.SDK_INT > VERSION_CODES.LOLLIPOP_MR1) {
+            DaoLog.i("testGetForCurrentThread_ManyThreadsDontLeak does not work on API level " + VERSION.SDK_INT);
+            return;
+        }
         QueryBuilder<TestEntity> builder = dao.queryBuilder().where(Properties.SimpleInteger.eq("dummy"));
         final Query<TestEntity> query = builder.build();
         for (int i = 1; i <= LEAK_TEST_ITERATIONS; i++) {
             Thread thread = new Thread() {
                 public void run() {
                     query.forCurrentThread();
-                };
+                }
             };
             thread.start();
             if (i % 10 == 0) {
@@ -75,7 +84,7 @@ public void run() {
 
         Method gcMethod = dataSuperclass.getDeclaredMethod("gc");
         gcMethod.setAccessible(true);
-        SparseArray<?> map = (SparseArray<?>) mapField.get(queryData);
+        Map map = (Map) mapField.get(queryData);
         for (int i = 0; map.size() > 1 && i < 1000; i++) {
             DaoLog.d("Queries left after " + i + ". GC: " + map.size());
             System.gc();
@@ -114,41 +123,49 @@ public void testThrowOutsideOwnerThread() throws InterruptedException {
             queryFromOtherThread.list();
             fail("Did not throw");
         } catch (DaoException expected) {
+            // OK
         }
         try {
             queryFromOtherThread.listIterator();
             fail("Did not throw");
         } catch (DaoException expected) {
+            // OK
         }
         try {
             queryFromOtherThread.listLazyUncached();
             fail("Did not throw");
         } catch (DaoException expected) {
+            // OK
         }
         try {
             queryFromOtherThread.setLimit(2);
             fail("Did not throw");
         } catch (DaoException expected) {
+            // OK
         }
         try {
             queryFromOtherThread.setOffset(2);
             fail("Did not throw");
         } catch (DaoException expected) {
+            // OK
         }
         try {
             queryFromOtherThread.setParameter(0, 42);
             fail("Did not throw");
         } catch (DaoException expected) {
+            // OK
         }
         try {
             queryFromOtherThread.unique();
             fail("Did not throw");
         } catch (DaoException expected) {
+            // OK
         }
         try {
             queryFromOtherThread.uniqueOrThrow();
             fail("Did not throw");
         } catch (DaoException expected) {
+            // OK
         }
     }
 
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryLimitOffsetTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryLimitOffsetTest.java
similarity index 91%
rename from DaoTest/src/de/greenrobot/daotest/query/QueryLimitOffsetTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryLimitOffsetTest.java
index 96593fab..aeced87e 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/QueryLimitOffsetTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryLimitOffsetTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,19 +11,20 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.query;
+
+package org.greenrobot.greendao.daotest.query;
 
 import java.util.List;
 
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.query.QueryBuilder;
-import de.greenrobot.daotest.TestEntity;
-import de.greenrobot.daotest.TestEntityDao.Properties;
-import de.greenrobot.daotest.entity.TestEntityTestBase;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.query.QueryBuilder;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao.Properties;
+import org.greenrobot.greendao.daotest.entity.TestEntityTestBase;
 
 public class QueryLimitOffsetTest extends TestEntityTestBase {
     
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QuerySpecialNamesTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QuerySpecialNamesTest.java
similarity index 88%
rename from DaoTest/src/de/greenrobot/daotest/query/QuerySpecialNamesTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QuerySpecialNamesTest.java
index 2709b516..99a23546 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/QuerySpecialNamesTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QuerySpecialNamesTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,17 +11,18 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.query;
 
-import de.greenrobot.dao.query.QueryBuilder;
-import de.greenrobot.dao.test.AbstractDaoTest;
-import de.greenrobot.daotest.SpecialNamesEntity;
-import de.greenrobot.daotest.SpecialNamesEntityDao;
-import de.greenrobot.daotest.SpecialNamesEntityDao.Properties;
+package org.greenrobot.greendao.daotest.query;
+
+import org.greenrobot.greendao.query.QueryBuilder;
+import org.greenrobot.greendao.test.AbstractDaoTest;
+import org.greenrobot.greendao.daotest.SpecialNamesEntity;
+import org.greenrobot.greendao.daotest.SpecialNamesEntityDao;
+import org.greenrobot.greendao.daotest.SpecialNamesEntityDao.Properties;
 
 public class QuerySpecialNamesTest extends AbstractDaoTest<SpecialNamesEntityDao, SpecialNamesEntity, Long> {
 
diff --git a/DaoTest/src/de/greenrobot/daotest/query/RawQueryTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/RawQueryTest.java
similarity index 78%
rename from DaoTest/src/de/greenrobot/daotest/query/RawQueryTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/RawQueryTest.java
index 1a9126cc..1c1a4b8e 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/RawQueryTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/RawQueryTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,21 +11,22 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.query;
+
+package org.greenrobot.greendao.daotest.query;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import de.greenrobot.dao.query.LazyList;
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.query.QueryBuilder;
-import de.greenrobot.daotest.TestEntity;
-import de.greenrobot.daotest.TestEntityDao.Properties;
-import de.greenrobot.daotest.entity.TestEntityTestBase;
+import org.greenrobot.greendao.query.LazyList;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.query.QueryBuilder;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao.Properties;
+import org.greenrobot.greendao.daotest.entity.TestEntityTestBase;
 
 public class RawQueryTest extends TestEntityTestBase {
     @Override
@@ -75,16 +76,16 @@ public void testRawQueryLazyList() {
 
         LazyList<TestEntity> listLazy = dao.queryRawCreate("").listLazy();
         assertEquals(list.size(), listLazy.size());
-        assertNull(listLazy.peak(0));
-        assertNull(listLazy.peak(1));
+        assertNull(listLazy.peek(0));
+        assertNull(listLazy.peek(1));
 
         assertNotNull(listLazy.get(1));
-        assertNull(listLazy.peak(0));
-        assertNotNull(listLazy.peak(1));
+        assertNull(listLazy.peek(0));
+        assertNotNull(listLazy.peek(1));
 
         assertNotNull(listLazy.get(0));
-        assertNotNull(listLazy.peak(0));
-        assertNotNull(listLazy.peak(1));
+        assertNotNull(listLazy.peek(0));
+        assertNotNull(listLazy.peek(1));
     }
 
 }
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxDaoTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxDaoTest.java
new file mode 100644
index 00000000..45c0a980
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxDaoTest.java
@@ -0,0 +1,355 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.rx;
+
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao;
+import org.greenrobot.greendao.rx.RxDao;
+import org.greenrobot.greendao.test.AbstractDaoTest;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import rx.Observable;
+import rx.observers.TestSubscriber;
+
+@SuppressWarnings("unchecked")
+public class RxDaoTest extends AbstractDaoTest<TestEntityDao, TestEntity, Long> {
+
+    private RxDao rxDao;
+
+    public RxDaoTest() {
+        super(TestEntityDao.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        rxDao = dao.rx();
+    }
+
+    public void testScheduler() {
+        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.loadAll());
+        Thread lastSeenThread = testSubscriber.getLastSeenThread();
+        assertNotSame(lastSeenThread, Thread.currentThread());
+    }
+
+    public void testNoScheduler() {
+        RxDao<TestEntity, Long> rxDaoNoScheduler = dao.rxPlain();
+        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDaoNoScheduler.loadAll());
+        Thread lastSeenThread = testSubscriber.getLastSeenThread();
+        assertSame(lastSeenThread, Thread.currentThread());
+    }
+
+    public void testLoadAll() {
+        insertEntity("foo");
+        insertEntity("bar");
+
+        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.loadAll());
+        assertEquals(1, testSubscriber.getValueCount());
+        List<TestEntity> entities = testSubscriber.getOnNextEvents().get(0);
+
+        // Order of entities is unspecified
+        int foo = 0, bar = 0;
+        for (TestEntity entity : entities) {
+            String value = entity.getSimpleStringNotNull();
+            if (value.equals("foo")) {
+                foo++;
+            } else if (value.equals("bar")) {
+                bar++;
+            } else {
+                fail(value);
+            }
+        }
+        assertEquals(1, foo);
+        assertEquals(1, bar);
+    }
+
+    public void testLoad() {
+        TestEntity foo = insertEntity("foo");
+        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.load(foo.getId()));
+        assertEquals(1, testSubscriber.getValueCount());
+        TestEntity foo2 = testSubscriber.getOnNextEvents().get(0);
+        assertEquals(foo.getSimpleStringNotNull(), foo2.getSimpleStringNotNull());
+    }
+
+    public void testLoad_noResult() {
+        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.load(42));
+        assertEquals(1, testSubscriber.getValueCount());
+        // Should we really propagate null through Rx?
+        assertNull(testSubscriber.getOnNextEvents().get(0));
+    }
+
+    public void testRefresh() {
+        TestEntity entity = insertEntity("foo");
+        entity.setSimpleStringNotNull("temp");
+        RxTestHelper.awaitTestSubscriber(rxDao.refresh(entity));
+        assertEquals("foo", entity.getSimpleStringNotNull());
+    }
+
+    public void testInsert() {
+        TestEntity foo = RxTestHelper.createEntity("foo");
+        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.insert(foo));
+        assertEquals(1, testSubscriber.getValueCount());
+        TestEntity foo2 = testSubscriber.getOnNextEvents().get(0);
+        assertSame(foo, foo2);
+
+        List<TestEntity> all = dao.loadAll();
+        assertEquals(1, all.size());
+        assertEquals(foo.getSimpleStringNotNull(), all.get(0).getSimpleStringNotNull());
+    }
+
+    public void testInsertInTx() {
+        TestEntity foo = RxTestHelper.createEntity("foo");
+        TestEntity bar = RxTestHelper.createEntity("bar");
+        TestSubscriber<Object[]> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.insertInTx(foo, bar));
+        assertEquals(1, testSubscriber.getValueCount());
+        Object[] array = testSubscriber.getOnNextEvents().get(0);
+        assertSame(foo, array[0]);
+        assertSame(bar, array[1]);
+
+        List<TestEntity> all = dao.loadAll();
+        assertEquals(2, all.size());
+        assertEquals(foo.getSimpleStringNotNull(), all.get(0).getSimpleStringNotNull());
+        assertEquals(bar.getSimpleStringNotNull(), all.get(1).getSimpleStringNotNull());
+    }
+
+    public void testInsertInTxList() {
+        TestEntity foo = RxTestHelper.createEntity("foo");
+        TestEntity bar = RxTestHelper.createEntity("bar");
+        List<TestEntity> list = new ArrayList<>();
+        list.add(foo);
+        list.add(bar);
+        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.insertInTx(list));
+        assertEquals(1, testSubscriber.getValueCount());
+        List<TestEntity> result = testSubscriber.getOnNextEvents().get(0);
+        assertSame(foo, result.get(0));
+        assertSame(bar, result.get(1));
+
+        List<TestEntity> all = dao.loadAll();
+        assertEquals(2, all.size());
+        assertEquals(foo.getSimpleStringNotNull(), all.get(0).getSimpleStringNotNull());
+        assertEquals(bar.getSimpleStringNotNull(), all.get(1).getSimpleStringNotNull());
+    }
+
+    public void testInsertOrReplace() {
+        TestEntity foo = insertEntity("foo");
+
+        foo.setSimpleStringNotNull("bar");
+
+        assertUpdatedEntity(foo, rxDao.insertOrReplace(foo));
+    }
+
+    public void testInsertOrReplaceInTx() {
+        TestEntity foo = insertEntity("foo");
+        TestEntity bar = insertEntity("bar");
+
+        foo.setSimpleStringNotNull("foo2");
+
+        assertUpdatedEntities(foo, bar, rxDao.insertOrReplaceInTx(foo, bar));
+    }
+
+    public void testInsertOrReplaceInTxList() {
+        TestEntity foo = insertEntity("foo");
+        TestEntity bar = insertEntity("bar");
+
+        foo.setSimpleStringNotNull("foo2");
+
+        List<TestEntity> list = new ArrayList<>();
+        list.add(foo);
+        list.add(bar);
+
+        assertUpdatedEntities(list, rxDao.insertOrReplaceInTx(list));
+    }
+
+    public void testSave() {
+        TestEntity foo = insertEntity("foo");
+
+        foo.setSimpleStringNotNull("bar");
+
+        assertUpdatedEntity(foo, rxDao.save(foo));
+    }
+
+    public void testSaveInTx() {
+        TestEntity foo = insertEntity("foo");
+        TestEntity bar = insertEntity("bar");
+
+        foo.setSimpleStringNotNull("foo2");
+
+        assertUpdatedEntities(foo, bar, rxDao.saveInTx(foo, bar));
+    }
+
+    public void testSaveInTxList() {
+        TestEntity foo = insertEntity("foo");
+        TestEntity bar = insertEntity("bar");
+
+        foo.setSimpleStringNotNull("foo2");
+
+        List<TestEntity> list = new ArrayList<>();
+        list.add(foo);
+        list.add(bar);
+
+        assertUpdatedEntities(list, rxDao.saveInTx(list));
+    }
+
+    public void testUpdate() {
+        TestEntity foo = insertEntity("foo");
+        foo.setSimpleString("foofoo");
+        TestSubscriber testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.update(foo));
+        assertEquals(1, testSubscriber.getValueCount());
+        assertSame(foo, testSubscriber.getOnNextEvents().get(0));
+        List<TestEntity> testEntities = dao.loadAll();
+        assertEquals(1, testEntities.size());
+        assertNotSame(foo, testEntities.get(0));
+        assertEquals("foofoo", testEntities.get(0).getSimpleString());
+    }
+
+    public void testUpdateInTx() {
+        TestEntity foo = insertEntity("foo");
+        TestEntity bar = insertEntity("bar");
+
+        foo.setSimpleStringNotNull("foo2");
+        bar.setSimpleStringNotNull("bar2");
+
+        assertUpdatedEntities(foo, bar, rxDao.updateInTx(foo, bar));
+    }
+
+    public void testUpdateInTxList() {
+        TestEntity foo = insertEntity("foo");
+        TestEntity bar = insertEntity("bar");
+
+        foo.setSimpleStringNotNull("foo2");
+        bar.setSimpleStringNotNull("bar2");
+
+        List<TestEntity> list = new ArrayList<>();
+        list.add(foo);
+        list.add(bar);
+
+        assertUpdatedEntities(list, rxDao.updateInTx(list));
+    }
+
+    private void assertUpdatedEntity(TestEntity foo, Observable<TestEntity> observable) {
+        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(observable);
+        assertEquals(1, testSubscriber.getValueCount());
+        TestEntity bar = testSubscriber.getOnNextEvents().get(0);
+        assertSame(foo, bar);
+
+        List<TestEntity> all = dao.loadAll();
+        assertEquals(1, all.size());
+        assertEquals(foo.getSimpleStringNotNull(), all.get(0).getSimpleStringNotNull());
+    }
+
+    private void assertUpdatedEntities(TestEntity foo, TestEntity bar, Observable<Object[]> observable) {
+        TestSubscriber<Object[]> testSubscriber = RxTestHelper.awaitTestSubscriber(observable);
+        assertEquals(1, testSubscriber.getValueCount());
+        Object[] array = testSubscriber.getOnNextEvents().get(0);
+        assertSame(foo, array[0]);
+        assertSame(bar, array[1]);
+
+        List<TestEntity> all = dao.loadAll();
+        assertEquals(2, all.size());
+        assertEquals(foo.getSimpleStringNotNull(), all.get(0).getSimpleStringNotNull());
+        assertEquals(bar.getSimpleStringNotNull(), all.get(1).getSimpleStringNotNull());
+    }
+
+    private void assertUpdatedEntities(List<TestEntity> entities, Observable<List<TestEntity>> observable) {
+        TestEntity foo = entities.get(0);
+        TestEntity bar = entities.get(1);
+
+        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(observable);
+        assertEquals(1, testSubscriber.getValueCount());
+        List<TestEntity> result = testSubscriber.getOnNextEvents().get(0);
+        assertSame(foo, result.get(0));
+        assertSame(bar, result.get(1));
+
+        List<TestEntity> all = dao.loadAll();
+        assertEquals(2, all.size());
+        assertEquals(foo.getSimpleStringNotNull(), all.get(0).getSimpleStringNotNull());
+        assertEquals(bar.getSimpleStringNotNull(), all.get(1).getSimpleStringNotNull());
+    }
+
+    public void testDelete() {
+        TestEntity foo = insertEntity("foo");
+        assertDeleted(rxDao.delete(foo));
+    }
+
+    public void testDeleteByKey() {
+        TestEntity foo = insertEntity("foo");
+        assertDeleted(rxDao.deleteByKey(foo.getId()));
+    }
+
+    public void testDeleteAll() {
+        insertEntity("foo");
+        insertEntity("bar");
+        assertDeleted(rxDao.deleteAll());
+    }
+
+    public void testDeleteInTx() {
+        TestEntity foo = insertEntity("foo");
+        TestEntity bar = insertEntity("bar");
+        assertDeleted(rxDao.deleteInTx(foo, bar));
+    }
+
+    public void testDeleteInTxList() {
+        TestEntity foo = insertEntity("foo");
+        TestEntity bar = insertEntity("bar");
+
+        List<TestEntity> list = new ArrayList<>();
+        list.add(foo);
+        list.add(bar);
+
+        assertDeleted(rxDao.deleteInTx(list));
+    }
+
+    public void testDeleteByKeyInTx() {
+        TestEntity foo = insertEntity("foo");
+        TestEntity bar = insertEntity("bar");
+        assertDeleted(rxDao.deleteByKeyInTx(foo.getId(), bar.getId()));
+    }
+
+    public void testDeleteByKeyInTxList() {
+        TestEntity foo = insertEntity("foo");
+        TestEntity bar = insertEntity("bar");
+
+        List<Long> list = new ArrayList<>();
+        list.add(foo.getId());
+        list.add(bar.getId());
+
+        assertDeleted(rxDao.deleteByKeyInTx(list));
+    }
+
+    private void assertDeleted(Observable<Void> observable) {
+        TestSubscriber testSubscriber = RxTestHelper.awaitTestSubscriber(observable);
+        assertEquals(1, testSubscriber.getValueCount());
+        assertNull(testSubscriber.getOnNextEvents().get(0));
+        assertEquals(0, dao.count());
+    }
+
+    public void testCount() {
+        insertEntity("foo");
+        TestSubscriber<Long> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.count());
+        assertEquals(1, testSubscriber.getValueCount());
+        Long count = testSubscriber.getOnNextEvents().get(0);
+        assertEquals(1L, (long) count);
+    }
+
+    protected TestEntity insertEntity(String simpleStringNotNull) {
+        return RxTestHelper.insertEntity(dao, simpleStringNotNull);
+    }
+}
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxQueryTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxQueryTest.java
new file mode 100644
index 00000000..63081dd1
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxQueryTest.java
@@ -0,0 +1,121 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.rx;
+
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.daotest.DaoMaster;
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao.Properties;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.rx.RxQuery;
+import org.greenrobot.greendao.test.AbstractDaoSessionTest;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+
+import rx.Observable;
+import rx.Subscription;
+import rx.observers.TestSubscriber;
+
+public class RxQueryTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
+
+    private Query<TestEntity> query;
+    private RxQuery<TestEntity> rxQuery;
+
+    public RxQueryTest() {
+        super(DaoMaster.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        query = daoSession.getTestEntityDao().queryBuilder().where(Properties.SimpleInt.lt(10)).build();
+        rxQuery = query.__InternalRx();
+    }
+
+    public void testList() {
+        insertEntities(15);
+        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxQuery.list());
+        assertEquals(1, testSubscriber.getValueCount());
+        List<TestEntity> entitiesRead = testSubscriber.getOnNextEvents().get(0);
+        assertEquals(10, entitiesRead.size());
+    }
+
+    // TODO figure out how to pass params to rxQuery
+    public void _testListSetParameters() {
+        insertEntities(15);
+
+        // TODO how to pass those to rxQuery?
+        query.setParameter(0, 5);
+
+        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxQuery.list());
+        assertEquals(1, testSubscriber.getValueCount());
+        List<TestEntity> entitiesRead = testSubscriber.getOnNextEvents().get(0);
+        assertEquals(5, entitiesRead.size());
+    }
+
+    public void testUnique() {
+        insertEntities(1);
+        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxQuery.unique());
+        assertEquals(1, testSubscriber.getValueCount());
+        TestEntity entityRead = testSubscriber.getOnNextEvents().get(0);
+        assertNotNull(entityRead);
+    }
+
+    public void testOneByOne() {
+        insertEntities(15);
+        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxQuery.oneByOne());
+        assertEquals(10, testSubscriber.getValueCount());
+        for (int i = 0; i < 10; i++) {
+            TestEntity entity = testSubscriber.getOnNextEvents().get(i);
+            assertEquals(i, entity.getSimpleInt());
+        }
+    }
+
+    public void testOneByOneUnsubscribe() {
+        insertEntities(1000);
+        RxQuery<TestEntity> bigQuery = daoSession.getTestEntityDao().queryBuilder().rx();
+        TestSubscriber<TestEntity> testSubscriber = new TestSubscriber<>();
+        Observable<TestEntity> observable = bigQuery.oneByOne();
+        Subscription subscription = observable.subscribe(testSubscriber);
+        subscription.unsubscribe();
+        testSubscriber.assertUnsubscribed();
+        int count = testSubscriber.getValueCount();
+        testSubscriber.awaitTerminalEvent(100, TimeUnit.MILLISECONDS);
+        int count2 = testSubscriber.getValueCount();
+        DaoLog.d("Count 1: " + count + " vs. count 2: " + count2);
+        // Not strictly multi-threading correct, but anyway:
+        assertTrue(count2 < 1000);
+    }
+
+    protected List<TestEntity> insertEntities(int count) {
+        List<TestEntity> entities = new ArrayList<>(count);
+        for (int i = 0; i < count; i++) {
+            TestEntity entity = RxTestHelper.createEntity("My entity ");
+            entity.setSimpleInt(i);
+            entities.add(entity);
+        }
+
+        daoSession.getTestEntityDao().insertInTx(entities);
+        return entities;
+    }
+
+}
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTestHelper.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTestHelper.java
new file mode 100644
index 00000000..04cbb449
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTestHelper.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.rx;
+
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao;
+
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+
+import rx.Observable;
+import rx.observers.TestSubscriber;
+
+public class RxTestHelper {
+    static <T> TestSubscriber<T> awaitTestSubscriber(Observable<T> observable) {
+        TestSubscriber<T> testSubscriber = new TestSubscriber<>();
+        observable.subscribe(testSubscriber);
+        testSubscriber.awaitTerminalEvent(3, TimeUnit.SECONDS);
+        testSubscriber.assertNoErrors();
+        testSubscriber.assertCompleted();
+        return testSubscriber;
+    }
+
+    static TestEntity insertEntity(TestEntityDao dao, String simpleStringNotNull) {
+        TestEntity entity = createEntity(simpleStringNotNull);
+        dao.insert(entity);
+        return entity;
+    }
+
+    static TestEntity createEntity(String simpleStringNotNull) {
+        TestEntity entity = new TestEntity();
+        entity.setSimpleStringNotNull(simpleStringNotNull);
+        return entity;
+    }
+}
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTransactionTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTransactionTest.java
new file mode 100644
index 00000000..03a4aee1
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTransactionTest.java
@@ -0,0 +1,100 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.rx;
+
+import org.greenrobot.greendao.daotest.DaoMaster;
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.rx.RxTransaction;
+import org.greenrobot.greendao.test.AbstractDaoSessionTest;
+
+import java.util.List;
+import java.util.concurrent.Callable;
+
+import rx.Observable;
+import rx.observers.TestSubscriber;
+
+public class RxTransactionTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
+
+    private RxTransaction rxTx;
+
+    public RxTransactionTest() {
+        super(DaoMaster.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        rxTx = daoSession.rxTx();
+    }
+
+    public void testRun() {
+        Observable<Void> observable = rxTx.run(new Runnable() {
+            @Override
+            public void run() {
+                TestEntity entity = insertEntity("hello");
+                entity.setSimpleString("world");
+                daoSession.update(entity);
+            }
+        });
+        TestSubscriber<Void> testSubscriber = assertTxExecuted(observable);
+        assertNull(testSubscriber.getOnNextEvents().get(0));
+    }
+
+    public void testCall() {
+        testCall(rxTx);
+    }
+
+    public void testCallPlain() {
+        RxTransaction rxTxPlain = daoSession.rxTxPlain();
+        assertNotSame(rxTx, rxTxPlain);
+        testCall(rxTxPlain);
+    }
+
+    public void testCall(RxTransaction rxTx) {
+        Observable<String> observable = rxTx.call(new Callable<String>() {
+            @Override
+            public String call() {
+                TestEntity entity = insertEntity("hello");
+                entity.setSimpleString("world");
+                daoSession.update(entity);
+                return "Just checking";
+            }
+        });
+        TestSubscriber<String> testSubscriber = assertTxExecuted(observable);
+        assertEquals("Just checking", testSubscriber.getOnNextEvents().get(0));
+    }
+
+    private <T> TestSubscriber<T> assertTxExecuted(Observable<T> observable) {
+        TestSubscriber<T> testSubscriber = RxTestHelper.awaitTestSubscriber(observable);
+        assertEquals(1, testSubscriber.getValueCount());
+
+        daoSession.clear();
+        List<TestEntity> all = daoSession.getTestEntityDao().loadAll();
+        assertEquals(1, all.size());
+        assertEquals("hello", all.get(0).getSimpleStringNotNull());
+        assertEquals("world", all.get(0).getSimpleString());
+        return testSubscriber;
+    }
+
+    protected TestEntity insertEntity(String simpleStringNotNull) {
+        return RxTestHelper.insertEntity(daoSession.getTestEntityDao(), simpleStringNotNull);
+    }
+
+}
diff --git a/DaoTest/src/de/greenrobot/daotest2/entity/KeepEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest2/entity/KeepEntityTest.java
similarity index 80%
rename from DaoTest/src/de/greenrobot/daotest2/entity/KeepEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest2/entity/KeepEntityTest.java
index 2e45b7af..e555acdd 100644
--- a/DaoTest/src/de/greenrobot/daotest2/entity/KeepEntityTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest2/entity/KeepEntityTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,16 +11,17 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest2.entity;
+
+package org.greenrobot.greendao.daotest2.entity;
 
 import android.os.Build;
-import de.greenrobot.dao.test.AbstractDaoTestLongPk;
-import de.greenrobot.daotest2.KeepEntity;
-import de.greenrobot.daotest2.dao.KeepEntityDao;
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+import org.greenrobot.greendao.daotest2.KeepEntity;
+import org.greenrobot.greendao.daotest2.dao.KeepEntityDao;
 
 public class KeepEntityTest extends AbstractDaoTestLongPk<KeepEntityDao, KeepEntity> {
 
diff --git a/DaoTest/AndroidManifest.xml b/tests/DaoTest/src/main/AndroidManifest.xml
similarity index 77%
rename from DaoTest/AndroidManifest.xml
rename to tests/DaoTest/src/main/AndroidManifest.xml
index 993e13d4..d5890ee1 100644
--- a/DaoTest/AndroidManifest.xml
+++ b/tests/DaoTest/src/main/AndroidManifest.xml
@@ -1,11 +1,9 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.daotest.dummyapp"
+    package="org.greenrobot.greendao.daotest.dummyapp"
     android:versionCode="1"
     android:versionName="1.0" >
 
-    <uses-sdk android:minSdkVersion="4" />
-
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
 
     <application>
diff --git a/DaoTest/assets/minimal-entity.sql b/tests/DaoTest/src/main/assets/minimal-entity.sql
similarity index 100%
rename from DaoTest/assets/minimal-entity.sql
rename to tests/DaoTest/src/main/assets/minimal-entity.sql
diff --git a/DaoTest/src-unit-test/de/greenrobot/dao/unittest/DaoMaster.java b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/DaoMaster.java
similarity index 54%
rename from DaoTest/src-unit-test/de/greenrobot/dao/unittest/DaoMaster.java
rename to tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/DaoMaster.java
index 45473f60..4dd1ccad 100644
--- a/DaoTest/src-unit-test/de/greenrobot/dao/unittest/DaoMaster.java
+++ b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/DaoMaster.java
@@ -1,70 +1,96 @@
-package de.greenrobot.dao.unittest;
+package org.greenrobot.greendao.unittest;
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteDatabase.CursorFactory;
-import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
-import de.greenrobot.dao.AbstractDaoMaster;
-import de.greenrobot.dao.identityscope.IdentityScopeType;
 
-import de.greenrobot.dao.unittest.MinimalEntityDao;
+import org.greenrobot.greendao.AbstractDaoMaster;
+import org.greenrobot.greendao.database.StandardDatabase;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseOpenHelper;
+import org.greenrobot.greendao.identityscope.IdentityScopeType;
+
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
+/**
  * Master of DAO (schema version 1): knows all DAOs.
-*/
+ */
 public class DaoMaster extends AbstractDaoMaster {
     public static final int SCHEMA_VERSION = 1;
 
     /** Creates underlying database table using DAOs. */
-    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createAllTables(Database db, boolean ifNotExists) {
         MinimalEntityDao.createTable(db, ifNotExists);
     }
-    
+
     /** Drops underlying database table using DAOs. */
-    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
+    public static void dropAllTables(Database db, boolean ifExists) {
         MinimalEntityDao.dropTable(db, ifExists);
     }
-    
-    public static abstract class OpenHelper extends SQLiteOpenHelper {
+
+    /**
+     * WARNING: Drops all table on Upgrade! Use only during development.
+     * Convenience method using a {@link DevOpenHelper}.
+     */
+    public static DaoSession newDevSession(Context context, String name) {
+        Database db = new DevOpenHelper(context, name).getWritableDb();
+        DaoMaster daoMaster = new DaoMaster(db);
+        return daoMaster.newSession();
+    }
+
+    public DaoMaster(SQLiteDatabase db) {
+        this(new StandardDatabase(db));
+    }
+
+    public DaoMaster(Database db) {
+        super(db, SCHEMA_VERSION);
+        registerDaoClass(MinimalEntityDao.class);
+    }
+
+    public DaoSession newSession() {
+        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
+    }
+
+    public DaoSession newSession(IdentityScopeType type) {
+        return new DaoSession(db, type, daoConfigMap);
+    }
+
+    /**
+     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
+     */
+    public static abstract class OpenHelper extends DatabaseOpenHelper {
+        public OpenHelper(Context context, String name) {
+            super(context, name, SCHEMA_VERSION);
+        }
 
         public OpenHelper(Context context, String name, CursorFactory factory) {
             super(context, name, factory, SCHEMA_VERSION);
         }
 
         @Override
-        public void onCreate(SQLiteDatabase db) {
+        public void onCreate(Database db) {
             Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
             createAllTables(db, false);
         }
     }
-    
+
     /** WARNING: Drops all table on Upgrade! Use only during development. */
     public static class DevOpenHelper extends OpenHelper {
+        public DevOpenHelper(Context context, String name) {
+            super(context, name);
+        }
+
         public DevOpenHelper(Context context, String name, CursorFactory factory) {
             super(context, name, factory);
         }
 
         @Override
-        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        public void onUpgrade(Database db, int oldVersion, int newVersion) {
             Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
             dropAllTables(db, true);
             onCreate(db);
         }
     }
 
-    public DaoMaster(SQLiteDatabase db) {
-        super(db, SCHEMA_VERSION);
-        registerDaoClass(MinimalEntityDao.class);
-    }
-    
-    public DaoSession newSession() {
-        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
-    }
-    
-    public DaoSession newSession(IdentityScopeType type) {
-        return new DaoSession(db, type, daoConfigMap);
-    }
-    
 }
diff --git a/DaoTest/src-unit-test/de/greenrobot/dao/unittest/DaoSession.java b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/DaoSession.java
similarity index 53%
rename from DaoTest/src-unit-test/de/greenrobot/dao/unittest/DaoSession.java
rename to tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/DaoSession.java
index 53dabbcb..04669efd 100644
--- a/DaoTest/src-unit-test/de/greenrobot/dao/unittest/DaoSession.java
+++ b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/DaoSession.java
@@ -1,24 +1,23 @@
-package de.greenrobot.dao.unittest;
-
-import android.database.sqlite.SQLiteDatabase;
+package org.greenrobot.greendao.unittest;
 
 import java.util.Map;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.AbstractDaoSession;
-import de.greenrobot.dao.identityscope.IdentityScopeType;
-import de.greenrobot.dao.internal.DaoConfig;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.AbstractDaoSession;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.identityscope.IdentityScopeType;
+import org.greenrobot.greendao.internal.DaoConfig;
 
-import de.greenrobot.dao.unittest.MinimalEntity;
+import org.greenrobot.greendao.unittest.MinimalEntity;
 
-import de.greenrobot.dao.unittest.MinimalEntityDao;
+import org.greenrobot.greendao.unittest.MinimalEntityDao;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 
 /**
  * {@inheritDoc}
  * 
- * @see de.greenrobot.dao.AbstractDaoSession
+ * @see org.greenrobot.greendao.AbstractDaoSession
  */
 public class DaoSession extends AbstractDaoSession {
 
@@ -26,7 +25,7 @@
 
     private final MinimalEntityDao minimalEntityDao;
 
-    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
+    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
         super(db);
 
@@ -39,7 +38,7 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
     }
     
     public void clear() {
-        minimalEntityDaoConfig.getIdentityScope().clear();
+        minimalEntityDaoConfig.clearIdentityScope();
     }
 
     public MinimalEntityDao getMinimalEntityDao() {
diff --git a/DaoTest/src-unit-test/de/greenrobot/dao/unittest/MinimalEntity.java b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntity.java
similarity index 69%
rename from DaoTest/src-unit-test/de/greenrobot/dao/unittest/MinimalEntity.java
rename to tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntity.java
index 7e44d860..6792704b 100644
--- a/DaoTest/src-unit-test/de/greenrobot/dao/unittest/MinimalEntity.java
+++ b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntity.java
@@ -1,16 +1,23 @@
-package de.greenrobot.dao.unittest;
+package org.greenrobot.greendao.unittest;
+
+import org.greenrobot.greendao.annotation.*;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "MINIMAL_ENTITY".
  */
+@Entity
 public class MinimalEntity {
 
+    @Id
     private Long id;
 
+    @Generated
     public MinimalEntity() {
     }
 
+    @Generated
     public MinimalEntity(Long id) {
         this.id = id;
     }
diff --git a/DaoTest/src-unit-test/de/greenrobot/dao/unittest/MinimalEntityDao.java b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityDao.java
similarity index 68%
rename from DaoTest/src-unit-test/de/greenrobot/dao/unittest/MinimalEntityDao.java
rename to tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityDao.java
index 530442c5..b7dc7b5a 100644
--- a/DaoTest/src-unit-test/de/greenrobot/dao/unittest/MinimalEntityDao.java
+++ b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityDao.java
@@ -1,14 +1,13 @@
-package de.greenrobot.dao.unittest;
+package org.greenrobot.greendao.unittest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.dao.unittest.MinimalEntity;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -21,10 +20,10 @@
     /**
      * Properties of entity MinimalEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-    };
+    }
 
 
     public MinimalEntityDao(DaoConfig config) {
@@ -36,21 +35,30 @@ public MinimalEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"MINIMAL_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY );"); // 0: id
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MINIMAL_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, MinimalEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, MinimalEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, MinimalEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -59,13 +67,11 @@ protected void bindValues(SQLiteStatement stmt, MinimalEntity entity) {
         }
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public MinimalEntity readEntity(Cursor cursor, int offset) {
         MinimalEntity entity = new MinimalEntity( //
@@ -74,20 +80,17 @@ public MinimalEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, MinimalEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(MinimalEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(MinimalEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(MinimalEntity entity) {
         if(entity != null) {
@@ -97,9 +100,13 @@ public Long getKey(MinimalEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(MinimalEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-unit-test/de/greenrobot/dao/unittest/MinimalEntityTest.java b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityTest.java
similarity index 83%
rename from DaoTest/src-unit-test/de/greenrobot/dao/unittest/MinimalEntityTest.java
rename to tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityTest.java
index 702ba039..00241e32 100644
--- a/DaoTest/src-unit-test/de/greenrobot/dao/unittest/MinimalEntityTest.java
+++ b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityTest.java
@@ -1,24 +1,22 @@
-package de.greenrobot.dao.unittest;
-
-import android.database.sqlite.SQLiteDatabase;
+package org.greenrobot.greendao.unittest;
 
+import org.greenrobot.greendao.daotest.dummyapp.BuildConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.query.Query;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CountDownLatch;
 
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.daotest.dummyapp.BuildConfig;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 
-@RunWith(RobolectricGradleTestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 16)
 public class MinimalEntityTest {
 
@@ -27,8 +25,8 @@
 
     @Before
     public void setUp() {
-        DaoMaster.DevOpenHelper openHelper = new DaoMaster.DevOpenHelper(RuntimeEnvironment.application, null, null);
-        SQLiteDatabase db = openHelper.getWritableDatabase();
+        DaoMaster.DevOpenHelper openHelper = new DaoMaster.DevOpenHelper(RuntimeEnvironment.application, null);
+        Database db = openHelper.getWritableDb();
         daoSession = new DaoMaster(db).newSession();
         minimalEntityDao = daoSession.getMinimalEntityDao();
     }
diff --git a/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/OptionalDepedenciesTest.java b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/OptionalDepedenciesTest.java
new file mode 100644
index 00000000..c5166702
--- /dev/null
+++ b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/OptionalDepedenciesTest.java
@@ -0,0 +1,72 @@
+package org.greenrobot.greendao.unittest;
+
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
+import org.greenrobot.greendao.database.EncryptedDatabase;
+import org.greenrobot.greendao.identityscope.IdentityScope;
+import org.greenrobot.greendao.query.CountQuery;
+import org.greenrobot.greendao.query.DeleteQuery;
+import org.greenrobot.greendao.query.Join;
+import org.greenrobot.greendao.query.LazyList;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.query.QueryBuilder;
+import org.greenrobot.greendao.query.WhereCondition;
+import org.greenrobot.greendao.rx.RxDao;
+import org.junit.Ignore;
+import org.junit.Test;
+
+
+import static org.mockito.Mockito.mock;
+
+/**
+ * We should not expose any optional library classes in signatures of greenDAO's primary classes and interfaces.
+ * Reflection utils like Mockito should not fail with NoClassDefFoundError or the likes.
+ */
+public class OptionalDepedenciesTest {
+    @Test(expected = ClassNotFoundException.class)
+    public void testOptionalDependenciesAbsentRx() throws Exception {
+        Class.forName("rx.Observable");
+    }
+
+    @Test(expected = ClassNotFoundException.class)
+    @Ignore("Why is it still on classpath??")
+    public void testOptionalDependenciesAbsentSQLCipher() throws Exception {
+        Class.forName("net.sqlcipher.database.SQLiteDatabase");
+    }
+
+    @Test
+    public void testMockitoMocks() {
+        mock(DaoMaster.class).newSession();
+        mock(DaoSession.class).getDatabase();
+        mock(Database.class).getRawDatabase();
+        mock(DatabaseStatement.class).execute();
+        mock(IdentityScope.class).clear();
+        mock(AbstractDao.class).queryBuilder();
+        mock(MinimalEntityDao.class).queryBuilder();
+        mock(MinimalEntity.class).getId();
+        mock(Query.class).forCurrentThread();
+        mock(QueryBuilder.class).build();
+        mock(CountQuery.class).forCurrentThread();
+        mock(DeleteQuery.class).forCurrentThread();
+        mock(Join.class).getTablePrefix();
+        mock(LazyList.class).getLoadedCount();
+        mock(WhereCondition.class).appendValuesTo(null);
+        mock(Property.class).isNull();
+        mock(DaoException.class).getMessage();
+    }
+
+    @Test(expected = NoClassDefFoundError.class)
+    public void testMockitoMocksFailForRx() {
+        mock(RxDao.class);
+    }
+
+    @Test(expected = NoClassDefFoundError.class)
+    @Ignore("Why is it still on classpath??")
+    public void testMockitoMocksFailForSQLCipher() {
+        mock(EncryptedDatabase.class);
+    }
+
+}
diff --git a/tests/DaoTestBase/build.gradle b/tests/DaoTestBase/build.gradle
new file mode 100644
index 00000000..3d596adb
--- /dev/null
+++ b/tests/DaoTestBase/build.gradle
@@ -0,0 +1,11 @@
+apply plugin: 'java'
+
+sourceCompatibility = 1.7
+targetCompatibility = 1.7
+
+dependencies {
+    compile project(':DaoCore')
+    compileOnly 'com.google.android:android:4.1.1.4'
+}
+
+uploadArchives.enabled = false
\ No newline at end of file
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntity.java
similarity index 93%
rename from DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntity.java
index 57bc708a..3c13a436 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntity.java
@@ -1,11 +1,16 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
+
+import org.greenrobot.greendao.annotation.*;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "ABCDEF_ENTITY".
  */
+@Entity
 public class AbcdefEntity {
 
+    @Id
     private Long id;
     private Integer a;
     private Integer b;
@@ -19,6 +24,7 @@
     private Integer i;
     private Integer k;
 
+    @Generated
     public AbcdefEntity() {
     }
 
@@ -26,6 +32,7 @@ public AbcdefEntity(Long id) {
         this.id = id;
     }
 
+    @Generated
     public AbcdefEntity(Long id, Integer a, Integer b, Integer c, Integer d, Integer e, Integer f, Integer g, Integer h, Integer j, Integer i, Integer k) {
         this.id = id;
         this.a = a;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntityDao.java
similarity index 75%
rename from DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntityDao.java
index ef47a89d..6fc228e4 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntityDao.java
@@ -1,14 +1,13 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daotest.AbcdefEntity;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -21,7 +20,7 @@
     /**
      * Properties of entity AbcdefEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property A = new Property(1, Integer.class, "a", false, "A");
@@ -35,7 +34,7 @@
         public final static Property J = new Property(9, Integer.class, "j", false, "J");
         public final static Property I = new Property(10, Integer.class, "i", false, "I");
         public final static Property K = new Property(11, Integer.class, "k", false, "K");
-    };
+    }
 
 
     public AbcdefEntityDao(DaoConfig config) {
@@ -47,7 +46,7 @@ public AbcdefEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"ABCDEF_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -65,14 +64,78 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ABCDEF_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, AbcdefEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, AbcdefEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        Integer a = entity.getA();
+        if (a != null) {
+            stmt.bindLong(2, a);
+        }
+ 
+        Integer b = entity.getB();
+        if (b != null) {
+            stmt.bindLong(3, b);
+        }
+ 
+        Integer c = entity.getC();
+        if (c != null) {
+            stmt.bindLong(4, c);
+        }
+ 
+        Integer d = entity.getD();
+        if (d != null) {
+            stmt.bindLong(5, d);
+        }
+ 
+        Integer e = entity.getE();
+        if (e != null) {
+            stmt.bindLong(6, e);
+        }
+ 
+        Integer f = entity.getF();
+        if (f != null) {
+            stmt.bindLong(7, f);
+        }
+ 
+        Integer g = entity.getG();
+        if (g != null) {
+            stmt.bindLong(8, g);
+        }
+ 
+        Integer h = entity.getH();
+        if (h != null) {
+            stmt.bindLong(9, h);
+        }
+ 
+        Integer j = entity.getJ();
+        if (j != null) {
+            stmt.bindLong(10, j);
+        }
+ 
+        Integer i = entity.getI();
+        if (i != null) {
+            stmt.bindLong(11, i);
+        }
+ 
+        Integer k = entity.getK();
+        if (k != null) {
+            stmt.bindLong(12, k);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, AbcdefEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -136,13 +199,11 @@ protected void bindValues(SQLiteStatement stmt, AbcdefEntity entity) {
         }
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public AbcdefEntity readEntity(Cursor cursor, int offset) {
         AbcdefEntity entity = new AbcdefEntity( //
@@ -162,7 +223,6 @@ public AbcdefEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, AbcdefEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
@@ -179,14 +239,12 @@ public void readEntity(Cursor cursor, AbcdefEntity entity, int offset) {
         entity.setK(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(AbcdefEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(AbcdefEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(AbcdefEntity entity) {
         if(entity != null) {
@@ -196,9 +254,13 @@ public Long getKey(AbcdefEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(AbcdefEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntity.java
similarity index 58%
rename from DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntity.java
index 0ce14697..5d971a37 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntity.java
@@ -1,24 +1,31 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
-import de.greenrobot.daotest.DaoSession;
-import de.greenrobot.dao.DaoException;
+import org.greenrobot.greendao.annotation.*;
+
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.DaoException;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "AN_ACTIVE_ENTITY".
  */
+@Entity(active = true)
 public class AnActiveEntity {
 
+    @Id
     private Long id;
     private String text;
 
     /** Used to resolve relations */
+    @Generated
     private transient DaoSession daoSession;
 
     /** Used for active entity operations. */
+    @Generated
     private transient AnActiveEntityDao myDao;
 
-
+    @Generated
     public AnActiveEntity() {
     }
 
@@ -26,12 +33,14 @@ public AnActiveEntity(Long id) {
         this.id = id;
     }
 
+    @Generated
     public AnActiveEntity(Long id, String text) {
         this.id = id;
         this.text = text;
     }
 
     /** called by internal mechanisms, do not call yourself. */
+    @Generated
     public void __setDaoSession(DaoSession daoSession) {
         this.daoSession = daoSession;
         myDao = daoSession != null ? daoSession.getAnActiveEntityDao() : null;
@@ -53,28 +62,41 @@ public void setText(String text) {
         this.text = text;
     }
 
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void delete() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
+        __throwIfDetached();
         myDao.delete(this);
     }
 
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void update() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
+        __throwIfDetached();
         myDao.update(this);
     }
 
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void refresh() {
+        __throwIfDetached();
+        myDao.refresh(this);
+    }
+
+    @Generated
+    private void __throwIfDetached() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.refresh(this);
+        }
     }
 
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntityDao.java
similarity index 70%
rename from DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntityDao.java
index 91fe814c..528a47a6 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntityDao.java
@@ -1,14 +1,13 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daotest.AnActiveEntity;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -21,11 +20,11 @@
     /**
      * Properties of entity AnActiveEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
-    };
+    }
 
     private DaoSession daoSession;
 
@@ -40,7 +39,7 @@ public AnActiveEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"AN_ACTIVE_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -48,14 +47,28 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AN_ACTIVE_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, AnActiveEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, AnActiveEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        String text = entity.getText();
+        if (text != null) {
+            stmt.bindString(2, text);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, AnActiveEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -70,18 +83,16 @@ protected void bindValues(SQLiteStatement stmt, AnActiveEntity entity) {
     }
 
     @Override
-    protected void attachEntity(AnActiveEntity entity) {
+    protected final void attachEntity(AnActiveEntity entity) {
         super.attachEntity(entity);
         entity.__setDaoSession(daoSession);
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public AnActiveEntity readEntity(Cursor cursor, int offset) {
         AnActiveEntity entity = new AnActiveEntity( //
@@ -91,21 +102,18 @@ public AnActiveEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, AnActiveEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
         entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(AnActiveEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(AnActiveEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(AnActiveEntity entity) {
         if(entity != null) {
@@ -115,9 +123,13 @@ public Long getKey(AnActiveEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(AnActiveEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntity.java
similarity index 68%
rename from DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntity.java
index f2706c00..b4fa4d9f 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntity.java
@@ -1,16 +1,23 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
+
+import org.greenrobot.greendao.annotation.*;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "AUTOINCREMENT_ENTITY".
  */
+@Entity
 public class AutoincrementEntity {
 
+    @Id(autoincrement = true)
     private Long id;
 
+    @Generated
     public AutoincrementEntity() {
     }
 
+    @Generated
     public AutoincrementEntity(Long id) {
         this.id = id;
     }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntityDao.java
similarity index 69%
rename from DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntityDao.java
index 95fe147e..c65cffd2 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntityDao.java
@@ -1,14 +1,13 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daotest.AutoincrementEntity;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -21,10 +20,10 @@
     /**
      * Properties of entity AutoincrementEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-    };
+    }
 
 
     public AutoincrementEntityDao(DaoConfig config) {
@@ -36,21 +35,30 @@ public AutoincrementEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"AUTOINCREMENT_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT );"); // 0: id
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUTOINCREMENT_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, AutoincrementEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, AutoincrementEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, AutoincrementEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -59,13 +67,11 @@ protected void bindValues(SQLiteStatement stmt, AutoincrementEntity entity) {
         }
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public AutoincrementEntity readEntity(Cursor cursor, int offset) {
         AutoincrementEntity entity = new AutoincrementEntity( //
@@ -74,20 +80,17 @@ public AutoincrementEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, AutoincrementEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(AutoincrementEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(AutoincrementEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(AutoincrementEntity entity) {
         if(entity != null) {
@@ -97,9 +100,13 @@ public Long getKey(AutoincrementEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(AutoincrementEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntity.java
similarity index 69%
rename from DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntity.java
index 0b3e21d0..ac9249d3 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntity.java
@@ -1,16 +1,24 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
-import de.greenrobot.daotest.customtype.MyTimestamp;
+import org.greenrobot.greendao.annotation.*;
+
+import org.greenrobot.greendao.daotest.customtype.MyTimestamp;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "CUSTOM_TYPE_ENTITY".
  */
+@Entity
 public class CustomTypeEntity {
 
+    @Id
     private Long id;
+
+    @Convert(converter = org.greenrobot.greendao.daotest.customtype.MyTimestampConverter.class, columnType = Long.class)
     private MyTimestamp myCustomTimestamp;
 
+    @Generated
     public CustomTypeEntity() {
     }
 
@@ -18,6 +26,7 @@ public CustomTypeEntity(Long id) {
         this.id = id;
     }
 
+    @Generated
     public CustomTypeEntity(Long id, MyTimestamp myCustomTimestamp) {
         this.id = id;
         this.myCustomTimestamp = myCustomTimestamp;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntityDao.java
similarity index 69%
rename from DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntityDao.java
index 32cf4e6a..73ab863a 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntityDao.java
@@ -1,17 +1,16 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
-import de.greenrobot.daotest.customtype.MyTimestamp;
-import de.greenrobot.daotest.customtype.MyTimestampConverter;
-
-import de.greenrobot.daotest.CustomTypeEntity;
+import org.greenrobot.greendao.daotest.customtype.MyTimestamp;
+import org.greenrobot.greendao.daotest.customtype.MyTimestampConverter;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -24,11 +23,11 @@
     /**
      * Properties of entity CustomTypeEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property MyCustomTimestamp = new Property(1, Long.class, "myCustomTimestamp", false, "MY_CUSTOM_TIMESTAMP");
-    };
+    }
 
     private final MyTimestampConverter myCustomTimestampConverter = new MyTimestampConverter();
 
@@ -41,7 +40,7 @@ public CustomTypeEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"CUSTOM_TYPE_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -49,14 +48,28 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOM_TYPE_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, CustomTypeEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, CustomTypeEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        MyTimestamp myCustomTimestamp = entity.getMyCustomTimestamp();
+        if (myCustomTimestamp != null) {
+            stmt.bindLong(2, myCustomTimestampConverter.convertToDatabaseValue(myCustomTimestamp));
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, CustomTypeEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -70,13 +83,11 @@ protected void bindValues(SQLiteStatement stmt, CustomTypeEntity entity) {
         }
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public CustomTypeEntity readEntity(Cursor cursor, int offset) {
         CustomTypeEntity entity = new CustomTypeEntity( //
@@ -86,21 +97,18 @@ public CustomTypeEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, CustomTypeEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
         entity.setMyCustomTimestamp(cursor.isNull(offset + 1) ? null : myCustomTimestampConverter.convertToEntityProperty(cursor.getLong(offset + 1)));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(CustomTypeEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(CustomTypeEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(CustomTypeEntity entity) {
         if(entity != null) {
@@ -110,9 +118,13 @@ public Long getKey(CustomTypeEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(CustomTypeEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DaoMaster.java
similarity index 75%
rename from DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DaoMaster.java
index 9a9bfdc6..c50b4d52 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DaoMaster.java
@@ -1,41 +1,26 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteDatabase.CursorFactory;
-import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
-import de.greenrobot.dao.AbstractDaoMaster;
-import de.greenrobot.dao.identityscope.IdentityScopeType;
-
-import de.greenrobot.daotest.SimpleEntityDao;
-import de.greenrobot.daotest.SimpleEntityNotNullDao;
-import de.greenrobot.daotest.TestEntityDao;
-import de.greenrobot.daotest.RelationEntityDao;
-import de.greenrobot.daotest.DateEntityDao;
-import de.greenrobot.daotest.SpecialNamesEntityDao;
-import de.greenrobot.daotest.AbcdefEntityDao;
-import de.greenrobot.daotest.ToManyTargetEntityDao;
-import de.greenrobot.daotest.ToManyEntityDao;
-import de.greenrobot.daotest.JoinManyToDateEntityDao;
-import de.greenrobot.daotest.TreeEntityDao;
-import de.greenrobot.daotest.AnActiveEntityDao;
-import de.greenrobot.daotest.ExtendsImplementsEntityDao;
-import de.greenrobot.daotest.StringKeyValueEntityDao;
-import de.greenrobot.daotest.AutoincrementEntityDao;
-import de.greenrobot.daotest.SqliteMasterDao;
-import de.greenrobot.daotest.CustomTypeEntityDao;
-import de.greenrobot.daotest.IndexedStringEntityDao;
+
+import org.greenrobot.greendao.AbstractDaoMaster;
+import org.greenrobot.greendao.database.StandardDatabase;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseOpenHelper;
+import org.greenrobot.greendao.identityscope.IdentityScopeType;
+
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
+/**
  * Master of DAO (schema version 1): knows all DAOs.
-*/
+ */
 public class DaoMaster extends AbstractDaoMaster {
     public static final int SCHEMA_VERSION = 1;
 
     /** Creates underlying database table using DAOs. */
-    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createAllTables(Database db, boolean ifNotExists) {
         SimpleEntityDao.createTable(db, ifNotExists);
         SimpleEntityNotNullDao.createTable(db, ifNotExists);
         TestEntityDao.createTable(db, ifNotExists);
@@ -54,9 +39,9 @@ public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
         CustomTypeEntityDao.createTable(db, ifNotExists);
         IndexedStringEntityDao.createTable(db, ifNotExists);
     }
-    
+
     /** Drops underlying database table using DAOs. */
-    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
+    public static void dropAllTables(Database db, boolean ifExists) {
         SimpleEntityDao.dropTable(db, ifExists);
         SimpleEntityNotNullDao.dropTable(db, ifExists);
         TestEntityDao.dropTable(db, ifExists);
@@ -75,35 +60,22 @@ public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
         CustomTypeEntityDao.dropTable(db, ifExists);
         IndexedStringEntityDao.dropTable(db, ifExists);
     }
-    
-    public static abstract class OpenHelper extends SQLiteOpenHelper {
-
-        public OpenHelper(Context context, String name, CursorFactory factory) {
-            super(context, name, factory, SCHEMA_VERSION);
-        }
 
-        @Override
-        public void onCreate(SQLiteDatabase db) {
-            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
-            createAllTables(db, false);
-        }
+    /**
+     * WARNING: Drops all table on Upgrade! Use only during development.
+     * Convenience method using a {@link DevOpenHelper}.
+     */
+    public static DaoSession newDevSession(Context context, String name) {
+        Database db = new DevOpenHelper(context, name).getWritableDb();
+        DaoMaster daoMaster = new DaoMaster(db);
+        return daoMaster.newSession();
     }
-    
-    /** WARNING: Drops all table on Upgrade! Use only during development. */
-    public static class DevOpenHelper extends OpenHelper {
-        public DevOpenHelper(Context context, String name, CursorFactory factory) {
-            super(context, name, factory);
-        }
 
-        @Override
-        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
-            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
-            dropAllTables(db, true);
-            onCreate(db);
-        }
+    public DaoMaster(SQLiteDatabase db) {
+        this(new StandardDatabase(db));
     }
 
-    public DaoMaster(SQLiteDatabase db) {
+    public DaoMaster(Database db) {
         super(db, SCHEMA_VERSION);
         registerDaoClass(SimpleEntityDao.class);
         registerDaoClass(SimpleEntityNotNullDao.class);
@@ -124,13 +96,50 @@ public DaoMaster(SQLiteDatabase db) {
         registerDaoClass(CustomTypeEntityDao.class);
         registerDaoClass(IndexedStringEntityDao.class);
     }
-    
+
     public DaoSession newSession() {
         return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
     }
-    
+
     public DaoSession newSession(IdentityScopeType type) {
         return new DaoSession(db, type, daoConfigMap);
     }
-    
+
+    /**
+     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
+     */
+    public static abstract class OpenHelper extends DatabaseOpenHelper {
+        public OpenHelper(Context context, String name) {
+            super(context, name, SCHEMA_VERSION);
+        }
+
+        public OpenHelper(Context context, String name, CursorFactory factory) {
+            super(context, name, factory, SCHEMA_VERSION);
+        }
+
+        @Override
+        public void onCreate(Database db) {
+            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
+            createAllTables(db, false);
+        }
+    }
+
+    /** WARNING: Drops all table on Upgrade! Use only during development. */
+    public static class DevOpenHelper extends OpenHelper {
+        public DevOpenHelper(Context context, String name) {
+            super(context, name);
+        }
+
+        public DevOpenHelper(Context context, String name, CursorFactory factory) {
+            super(context, name, factory);
+        }
+
+        @Override
+        public void onUpgrade(Database db, int oldVersion, int newVersion) {
+            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
+            dropAllTables(db, true);
+            onCreate(db);
+        }
+    }
+
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DaoSession.java
similarity index 72%
rename from DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DaoSession.java
index 0e608cb9..19b0564c 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DaoSession.java
@@ -1,58 +1,57 @@
-package de.greenrobot.daotest;
-
-import android.database.sqlite.SQLiteDatabase;
+package org.greenrobot.greendao.daotest;
 
 import java.util.Map;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.AbstractDaoSession;
-import de.greenrobot.dao.identityscope.IdentityScopeType;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daotest.SimpleEntity;
-import de.greenrobot.daotest.SimpleEntityNotNull;
-import de.greenrobot.daotest.TestEntity;
-import de.greenrobot.daotest.RelationEntity;
-import de.greenrobot.daotest.DateEntity;
-import de.greenrobot.daotest.SpecialNamesEntity;
-import de.greenrobot.daotest.AbcdefEntity;
-import de.greenrobot.daotest.ToManyTargetEntity;
-import de.greenrobot.daotest.ToManyEntity;
-import de.greenrobot.daotest.JoinManyToDateEntity;
-import de.greenrobot.daotest.TreeEntity;
-import de.greenrobot.daotest.AnActiveEntity;
-import de.greenrobot.daotest.ExtendsImplementsEntity;
-import de.greenrobot.daotest.StringKeyValueEntity;
-import de.greenrobot.daotest.AutoincrementEntity;
-import de.greenrobot.daotest.SqliteMaster;
-import de.greenrobot.daotest.CustomTypeEntity;
-import de.greenrobot.daotest.IndexedStringEntity;
-
-import de.greenrobot.daotest.SimpleEntityDao;
-import de.greenrobot.daotest.SimpleEntityNotNullDao;
-import de.greenrobot.daotest.TestEntityDao;
-import de.greenrobot.daotest.RelationEntityDao;
-import de.greenrobot.daotest.DateEntityDao;
-import de.greenrobot.daotest.SpecialNamesEntityDao;
-import de.greenrobot.daotest.AbcdefEntityDao;
-import de.greenrobot.daotest.ToManyTargetEntityDao;
-import de.greenrobot.daotest.ToManyEntityDao;
-import de.greenrobot.daotest.JoinManyToDateEntityDao;
-import de.greenrobot.daotest.TreeEntityDao;
-import de.greenrobot.daotest.AnActiveEntityDao;
-import de.greenrobot.daotest.ExtendsImplementsEntityDao;
-import de.greenrobot.daotest.StringKeyValueEntityDao;
-import de.greenrobot.daotest.AutoincrementEntityDao;
-import de.greenrobot.daotest.SqliteMasterDao;
-import de.greenrobot.daotest.CustomTypeEntityDao;
-import de.greenrobot.daotest.IndexedStringEntityDao;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.AbstractDaoSession;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.identityscope.IdentityScopeType;
+import org.greenrobot.greendao.internal.DaoConfig;
+
+import org.greenrobot.greendao.daotest.SimpleEntity;
+import org.greenrobot.greendao.daotest.SimpleEntityNotNull;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.RelationEntity;
+import org.greenrobot.greendao.daotest.DateEntity;
+import org.greenrobot.greendao.daotest.SpecialNamesEntity;
+import org.greenrobot.greendao.daotest.AbcdefEntity;
+import org.greenrobot.greendao.daotest.ToManyTargetEntity;
+import org.greenrobot.greendao.daotest.ToManyEntity;
+import org.greenrobot.greendao.daotest.JoinManyToDateEntity;
+import org.greenrobot.greendao.daotest.TreeEntity;
+import org.greenrobot.greendao.daotest.AnActiveEntity;
+import org.greenrobot.greendao.daotest.ExtendsImplementsEntity;
+import org.greenrobot.greendao.daotest.StringKeyValueEntity;
+import org.greenrobot.greendao.daotest.AutoincrementEntity;
+import org.greenrobot.greendao.daotest.SqliteMaster;
+import org.greenrobot.greendao.daotest.CustomTypeEntity;
+import org.greenrobot.greendao.daotest.IndexedStringEntity;
+
+import org.greenrobot.greendao.daotest.SimpleEntityDao;
+import org.greenrobot.greendao.daotest.SimpleEntityNotNullDao;
+import org.greenrobot.greendao.daotest.TestEntityDao;
+import org.greenrobot.greendao.daotest.RelationEntityDao;
+import org.greenrobot.greendao.daotest.DateEntityDao;
+import org.greenrobot.greendao.daotest.SpecialNamesEntityDao;
+import org.greenrobot.greendao.daotest.AbcdefEntityDao;
+import org.greenrobot.greendao.daotest.ToManyTargetEntityDao;
+import org.greenrobot.greendao.daotest.ToManyEntityDao;
+import org.greenrobot.greendao.daotest.JoinManyToDateEntityDao;
+import org.greenrobot.greendao.daotest.TreeEntityDao;
+import org.greenrobot.greendao.daotest.AnActiveEntityDao;
+import org.greenrobot.greendao.daotest.ExtendsImplementsEntityDao;
+import org.greenrobot.greendao.daotest.StringKeyValueEntityDao;
+import org.greenrobot.greendao.daotest.AutoincrementEntityDao;
+import org.greenrobot.greendao.daotest.SqliteMasterDao;
+import org.greenrobot.greendao.daotest.CustomTypeEntityDao;
+import org.greenrobot.greendao.daotest.IndexedStringEntityDao;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 
 /**
  * {@inheritDoc}
  * 
- * @see de.greenrobot.dao.AbstractDaoSession
+ * @see org.greenrobot.greendao.AbstractDaoSession
  */
 public class DaoSession extends AbstractDaoSession {
 
@@ -94,7 +93,7 @@
     private final CustomTypeEntityDao customTypeEntityDao;
     private final IndexedStringEntityDao indexedStringEntityDao;
 
-    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
+    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
         super(db);
 
@@ -192,24 +191,24 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
     }
     
     public void clear() {
-        simpleEntityDaoConfig.getIdentityScope().clear();
-        simpleEntityNotNullDaoConfig.getIdentityScope().clear();
-        testEntityDaoConfig.getIdentityScope().clear();
-        relationEntityDaoConfig.getIdentityScope().clear();
-        dateEntityDaoConfig.getIdentityScope().clear();
-        specialNamesEntityDaoConfig.getIdentityScope().clear();
-        abcdefEntityDaoConfig.getIdentityScope().clear();
-        toManyTargetEntityDaoConfig.getIdentityScope().clear();
-        toManyEntityDaoConfig.getIdentityScope().clear();
-        joinManyToDateEntityDaoConfig.getIdentityScope().clear();
-        treeEntityDaoConfig.getIdentityScope().clear();
-        anActiveEntityDaoConfig.getIdentityScope().clear();
-        extendsImplementsEntityDaoConfig.getIdentityScope().clear();
-        stringKeyValueEntityDaoConfig.getIdentityScope().clear();
-        autoincrementEntityDaoConfig.getIdentityScope().clear();
-        sqliteMasterDaoConfig.getIdentityScope().clear();
-        customTypeEntityDaoConfig.getIdentityScope().clear();
-        indexedStringEntityDaoConfig.getIdentityScope().clear();
+        simpleEntityDaoConfig.clearIdentityScope();
+        simpleEntityNotNullDaoConfig.clearIdentityScope();
+        testEntityDaoConfig.clearIdentityScope();
+        relationEntityDaoConfig.clearIdentityScope();
+        dateEntityDaoConfig.clearIdentityScope();
+        specialNamesEntityDaoConfig.clearIdentityScope();
+        abcdefEntityDaoConfig.clearIdentityScope();
+        toManyTargetEntityDaoConfig.clearIdentityScope();
+        toManyEntityDaoConfig.clearIdentityScope();
+        joinManyToDateEntityDaoConfig.clearIdentityScope();
+        treeEntityDaoConfig.clearIdentityScope();
+        anActiveEntityDaoConfig.clearIdentityScope();
+        extendsImplementsEntityDaoConfig.clearIdentityScope();
+        stringKeyValueEntityDaoConfig.clearIdentityScope();
+        autoincrementEntityDaoConfig.clearIdentityScope();
+        sqliteMasterDaoConfig.clearIdentityScope();
+        customTypeEntityDaoConfig.clearIdentityScope();
+        indexedStringEntityDaoConfig.clearIdentityScope();
     }
 
     public SimpleEntityDao getSimpleEntityDao() {
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DateEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntity.java
similarity index 79%
rename from DaoTest/src-gen/de/greenrobot/daotest/DateEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntity.java
index 7b8f305a..dcc5b63b 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DateEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntity.java
@@ -1,20 +1,27 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
+
+import org.greenrobot.greendao.annotation.*;
 
 import java.lang.String;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "DATE_ENTITY".
  */
+@Entity
 public class DateEntity {
 
+    @Id
     private Long id;
-     // Test code for
+    // Test code for
     // field
     private java.util.Date date;
-    /** Not-null value. */
+
+    @NotNull
     private java.util.Date dateNotNull;
 
+    @Generated
     public DateEntity() {
     }
 
@@ -22,6 +29,7 @@ public DateEntity(Long id) {
         this.id = id;
     }
 
+    @Generated
     public DateEntity(Long id, java.util.Date date, java.util.Date dateNotNull) {
         this.id = id;
         this.date = date;
@@ -48,13 +56,13 @@ public void setDate(java.util.Date date) {
         this.date = date;
     }
 
-    /** Not-null value. */
+    @NotNull
     public java.util.Date getDateNotNull() {
         return dateNotNull;
     }
 
     /** Not-null value; ensure this value is available before it is saved to the database. */
-    public void setDateNotNull(java.util.Date dateNotNull) {
+    public void setDateNotNull(@NotNull java.util.Date dateNotNull) {
         this.dateNotNull = dateNotNull;
     }
 
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntityDao.java
similarity index 75%
rename from DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntityDao.java
index 7d5ab029..9bc85692 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntityDao.java
@@ -1,17 +1,16 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import java.util.List;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.query.QueryBuilder;
-
-import de.greenrobot.daotest.DateEntity;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.query.QueryBuilder;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -24,12 +23,12 @@
     /**
      * Properties of entity DateEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
         public final static Property DateNotNull = new Property(2, java.util.Date.class, "dateNotNull", false, "DATE_NOT_NULL");
-    };
+    }
 
     private Query<DateEntity> toManyEntity_DateEntityListQuery;
 
@@ -42,7 +41,7 @@ public DateEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"DATE_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -51,14 +50,29 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATE_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, DateEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, DateEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        java.util.Date date = entity.getDate();
+        if (date != null) {
+            stmt.bindLong(2, date.getTime());
+        }
+        stmt.bindLong(3, entity.getDateNotNull().getTime());
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, DateEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -73,13 +87,11 @@ protected void bindValues(SQLiteStatement stmt, DateEntity entity) {
         stmt.bindLong(3, entity.getDateNotNull().getTime());
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public DateEntity readEntity(Cursor cursor, int offset) {
         DateEntity entity = new DateEntity( //
@@ -90,7 +102,6 @@ public DateEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, DateEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
@@ -98,14 +109,12 @@ public void readEntity(Cursor cursor, DateEntity entity, int offset) {
         entity.setDateNotNull(new java.util.Date(cursor.getLong(offset + 2)));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(DateEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(DateEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(DateEntity entity) {
         if(entity != null) {
@@ -115,9 +124,13 @@ public Long getKey(DateEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(DateEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntity.java
similarity index 82%
rename from DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntity.java
index 92a99f64..b8c10542 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntity.java
@@ -1,14 +1,20 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
+
+import org.greenrobot.greendao.annotation.*;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "EXTENDS_IMPLEMENTS_ENTITY".
  */
+@Entity
 public class ExtendsImplementsEntity extends TestSuperclass  implements TestInterface, java.io.Serializable {
 
+    @Id
     private Long id;
     private String text;
 
+    @Generated
     public ExtendsImplementsEntity() {
     }
 
@@ -16,6 +22,7 @@ public ExtendsImplementsEntity(Long id) {
         this.id = id;
     }
 
+    @Generated
     public ExtendsImplementsEntity(Long id, String text) {
         this.id = id;
         this.text = text;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntityDao.java
similarity index 70%
rename from DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntityDao.java
index 243ea2b9..7b754f55 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntityDao.java
@@ -1,14 +1,13 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daotest.ExtendsImplementsEntity;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -21,11 +20,11 @@
     /**
      * Properties of entity ExtendsImplementsEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
-    };
+    }
 
 
     public ExtendsImplementsEntityDao(DaoConfig config) {
@@ -37,7 +36,7 @@ public ExtendsImplementsEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"EXTENDS_IMPLEMENTS_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -45,14 +44,28 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXTENDS_IMPLEMENTS_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ExtendsImplementsEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, ExtendsImplementsEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        String text = entity.getText();
+        if (text != null) {
+            stmt.bindString(2, text);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, ExtendsImplementsEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -66,13 +79,11 @@ protected void bindValues(SQLiteStatement stmt, ExtendsImplementsEntity entity)
         }
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public ExtendsImplementsEntity readEntity(Cursor cursor, int offset) {
         ExtendsImplementsEntity entity = new ExtendsImplementsEntity( //
@@ -82,21 +93,18 @@ public ExtendsImplementsEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, ExtendsImplementsEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
         entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(ExtendsImplementsEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(ExtendsImplementsEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(ExtendsImplementsEntity entity) {
         if(entity != null) {
@@ -106,9 +114,13 @@ public Long getKey(ExtendsImplementsEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(ExtendsImplementsEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/IndexedStringEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntity.java
similarity index 81%
rename from DaoTest/src-gen/de/greenrobot/daotest/IndexedStringEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntity.java
index 7aeb7cde..06ba201a 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/IndexedStringEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntity.java
@@ -1,14 +1,22 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
+
+import org.greenrobot.greendao.annotation.*;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "INDEXED_STRING_ENTITY".
  */
+@Entity
 public class IndexedStringEntity {
 
+    @Id
     private Long id;
+
+    @Index
     private String indexedString;
 
+    @Generated
     public IndexedStringEntity() {
     }
 
@@ -16,6 +24,7 @@ public IndexedStringEntity(Long id) {
         this.id = id;
     }
 
+    @Generated
     public IndexedStringEntity(Long id, String indexedString) {
         this.id = id;
         this.indexedString = indexedString;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/IndexedStringEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntityDao.java
similarity index 71%
rename from DaoTest/src-gen/de/greenrobot/daotest/IndexedStringEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntityDao.java
index 3724a9af..85acb6b6 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/IndexedStringEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntityDao.java
@@ -1,14 +1,13 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daotest.IndexedStringEntity;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -21,11 +20,11 @@
     /**
      * Properties of entity IndexedStringEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property IndexedString = new Property(1, String.class, "indexedString", false, "INDEXED_STRING");
-    };
+    }
 
 
     public IndexedStringEntityDao(DaoConfig config) {
@@ -37,7 +36,7 @@ public IndexedStringEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"INDEXED_STRING_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -48,14 +47,28 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INDEXED_STRING_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, IndexedStringEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, IndexedStringEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        String indexedString = entity.getIndexedString();
+        if (indexedString != null) {
+            stmt.bindString(2, indexedString);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, IndexedStringEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -69,13 +82,11 @@ protected void bindValues(SQLiteStatement stmt, IndexedStringEntity entity) {
         }
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public IndexedStringEntity readEntity(Cursor cursor, int offset) {
         IndexedStringEntity entity = new IndexedStringEntity( //
@@ -85,21 +96,18 @@ public IndexedStringEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, IndexedStringEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
         entity.setIndexedString(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(IndexedStringEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(IndexedStringEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(IndexedStringEntity entity) {
         if(entity != null) {
@@ -109,9 +117,13 @@ public Long getKey(IndexedStringEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(IndexedStringEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/JoinManyToDateEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntity.java
similarity index 84%
rename from DaoTest/src-gen/de/greenrobot/daotest/JoinManyToDateEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntity.java
index 480cc197..071c3745 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/JoinManyToDateEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntity.java
@@ -1,15 +1,21 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
+
+import org.greenrobot.greendao.annotation.*;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "JOIN_MANY_TO_DATE_ENTITY".
  */
+@Entity
 public class JoinManyToDateEntity {
 
+    @Id
     private Long id;
     private Long idToMany;
     private Long idDate;
 
+    @Generated
     public JoinManyToDateEntity() {
     }
 
@@ -17,6 +23,7 @@ public JoinManyToDateEntity(Long id) {
         this.id = id;
     }
 
+    @Generated
     public JoinManyToDateEntity(Long id, Long idToMany, Long idDate) {
         this.id = id;
         this.idToMany = idToMany;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/JoinManyToDateEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntityDao.java
similarity index 71%
rename from DaoTest/src-gen/de/greenrobot/daotest/JoinManyToDateEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntityDao.java
index 5ba3944c..b103382f 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/JoinManyToDateEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntityDao.java
@@ -1,14 +1,13 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daotest.JoinManyToDateEntity;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -21,12 +20,12 @@
     /**
      * Properties of entity JoinManyToDateEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property IdToMany = new Property(1, Long.class, "idToMany", false, "ID_TO_MANY");
         public final static Property IdDate = new Property(2, Long.class, "idDate", false, "ID_DATE");
-    };
+    }
 
 
     public JoinManyToDateEntityDao(DaoConfig config) {
@@ -38,7 +37,7 @@ public JoinManyToDateEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"JOIN_MANY_TO_DATE_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -47,14 +46,33 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JOIN_MANY_TO_DATE_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, JoinManyToDateEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, JoinManyToDateEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        Long idToMany = entity.getIdToMany();
+        if (idToMany != null) {
+            stmt.bindLong(2, idToMany);
+        }
+ 
+        Long idDate = entity.getIdDate();
+        if (idDate != null) {
+            stmt.bindLong(3, idDate);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, JoinManyToDateEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -73,13 +91,11 @@ protected void bindValues(SQLiteStatement stmt, JoinManyToDateEntity entity) {
         }
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public JoinManyToDateEntity readEntity(Cursor cursor, int offset) {
         JoinManyToDateEntity entity = new JoinManyToDateEntity( //
@@ -90,7 +106,6 @@ public JoinManyToDateEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, JoinManyToDateEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
@@ -98,14 +113,12 @@ public void readEntity(Cursor cursor, JoinManyToDateEntity entity, int offset) {
         entity.setIdDate(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(JoinManyToDateEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(JoinManyToDateEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(JoinManyToDateEntity entity) {
         if(entity != null) {
@@ -115,9 +128,13 @@ public Long getKey(JoinManyToDateEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(JoinManyToDateEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntity.java
similarity index 76%
rename from DaoTest/src-gen/de/greenrobot/daotest/RelationEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntity.java
index ea93789b..51a4debc 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntity.java
@@ -1,14 +1,19 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
-import de.greenrobot.daotest.DaoSession;
-import de.greenrobot.dao.DaoException;
+import org.greenrobot.greendao.annotation.*;
+
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.DaoException;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "RELATION_ENTITY".
  */
+@Entity(active = true)
 public class RelationEntity {
 
+    @Id
     private Long id;
     private Long parentId;
     private Long testId;
@@ -16,24 +21,39 @@
     private String simpleString;
 
     /** Used to resolve relations */
+    @Generated
     private transient DaoSession daoSession;
 
     /** Used for active entity operations. */
+    @Generated
     private transient RelationEntityDao myDao;
 
+    @ToOne(joinProperty = "parentId")
     private RelationEntity parent;
-    private Long parent__resolvedKey;
 
+    @Generated
+    private transient Long parent__resolvedKey;
+
+    @ToOne(joinProperty = "testId")
     private TestEntity testEntity;
-    private Long testEntity__resolvedKey;
 
+    @Generated
+    private transient Long testEntity__resolvedKey;
+
+    @ToOne(joinProperty = "testIdNotNull")
     private TestEntity testNotNull;
-    private Long testNotNull__resolvedKey;
 
+    @Generated
+    private transient Long testNotNull__resolvedKey;
+
+    @ToOne
+    @Property(nameInDb = "WITHOUT_PROPERTY_TEST_ID")
     private TestEntity testWithoutProperty;
-    private boolean testWithoutProperty__refreshed;
 
+    @Generated
+    private transient boolean testWithoutProperty__refreshed;
 
+    @Generated
     public RelationEntity() {
     }
 
@@ -41,6 +61,7 @@ public RelationEntity(Long id) {
         this.id = id;
     }
 
+    @Generated
     public RelationEntity(Long id, Long parentId, Long testId, long testIdNotNull, String simpleString) {
         this.id = id;
         this.parentId = parentId;
@@ -50,6 +71,7 @@ public RelationEntity(Long id, Long parentId, Long testId, long testIdNotNull, S
     }
 
     /** called by internal mechanisms, do not call yourself. */
+    @Generated
     public void __setDaoSession(DaoSession daoSession) {
         this.daoSession = daoSession;
         myDao = daoSession != null ? daoSession.getRelationEntityDao() : null;
@@ -96,12 +118,11 @@ public void setSimpleString(String simpleString) {
     }
 
     /** To-one relationship, resolved on first access. */
+    @Generated
     public RelationEntity getParent() {
         Long __key = this.parentId;
         if (parent__resolvedKey == null || !parent__resolvedKey.equals(__key)) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
+            __throwIfDetached();
             RelationEntityDao targetDao = daoSession.getRelationEntityDao();
             RelationEntity parentNew = targetDao.load(__key);
             synchronized (this) {
@@ -112,6 +133,7 @@ public RelationEntity getParent() {
         return parent;
     }
 
+    @Generated
     public void setParent(RelationEntity parent) {
         synchronized (this) {
             this.parent = parent;
@@ -121,12 +143,11 @@ public void setParent(RelationEntity parent) {
     }
 
     /** To-one relationship, resolved on first access. */
+    @Generated
     public TestEntity getTestEntity() {
         Long __key = this.testId;
         if (testEntity__resolvedKey == null || !testEntity__resolvedKey.equals(__key)) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
+            __throwIfDetached();
             TestEntityDao targetDao = daoSession.getTestEntityDao();
             TestEntity testEntityNew = targetDao.load(__key);
             synchronized (this) {
@@ -137,6 +158,7 @@ public TestEntity getTestEntity() {
         return testEntity;
     }
 
+    @Generated
     public void setTestEntity(TestEntity testEntity) {
         synchronized (this) {
             this.testEntity = testEntity;
@@ -146,12 +168,11 @@ public void setTestEntity(TestEntity testEntity) {
     }
 
     /** To-one relationship, resolved on first access. */
+    @Generated
     public TestEntity getTestNotNull() {
         long __key = this.testIdNotNull;
         if (testNotNull__resolvedKey == null || !testNotNull__resolvedKey.equals(__key)) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
+            __throwIfDetached();
             TestEntityDao targetDao = daoSession.getTestEntityDao();
             TestEntity testNotNullNew = targetDao.load(__key);
             synchronized (this) {
@@ -162,6 +183,7 @@ public TestEntity getTestNotNull() {
         return testNotNull;
     }
 
+    @Generated
     public void setTestNotNull(TestEntity testNotNull) {
         if (testNotNull == null) {
             throw new DaoException("To-one property 'testIdNotNull' has not-null constraint; cannot set to-one to null");
@@ -174,11 +196,10 @@ public void setTestNotNull(TestEntity testNotNull) {
     }
 
     /** To-one relationship, resolved on first access. */
+    @Generated
     public TestEntity getTestWithoutProperty() {
         if (testWithoutProperty != null || !testWithoutProperty__refreshed) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
+            __throwIfDetached();
             TestEntityDao targetDao = daoSession.getTestEntityDao();
             targetDao.refresh(testWithoutProperty);
             testWithoutProperty__refreshed = true;
@@ -187,10 +208,12 @@ public TestEntity getTestWithoutProperty() {
     }
 
     /** To-one relationship, returned entity is not refreshed and may carry only the PK property. */
+    @Generated
     public TestEntity peakTestWithoutProperty() {
         return testWithoutProperty;
     }
 
+    @Generated
     public void setTestWithoutProperty(TestEntity testWithoutProperty) {
         synchronized (this) {
             this.testWithoutProperty = testWithoutProperty;
@@ -198,28 +221,41 @@ public void setTestWithoutProperty(TestEntity testWithoutProperty) {
         }
     }
 
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void delete() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
+        __throwIfDetached();
         myDao.delete(this);
     }
 
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void update() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
+        __throwIfDetached();
         myDao.update(this);
     }
 
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void refresh() {
+        __throwIfDetached();
+        myDao.refresh(this);
+    }
+
+    @Generated
+    private void __throwIfDetached() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.refresh(this);
+        }
     }
 
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntityDao.java
similarity index 85%
rename from DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntityDao.java
index f4c5ab06..7bd25929 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntityDao.java
@@ -1,17 +1,16 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import java.util.List;
 import java.util.ArrayList;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.SqlUtils;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daotest.RelationEntity;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.SqlUtils;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -24,7 +23,7 @@
     /**
      * Properties of entity RelationEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property ParentId = new Property(1, Long.class, "parentId", false, "PARENT_ID");
@@ -32,7 +31,7 @@
         public final static Property TestIdNotNull = new Property(3, long.class, "testIdNotNull", false, "TEST_ID_NOT_NULL");
         public final static Property SimpleString = new Property(4, String.class, "simpleString", false, "SIMPLE_STRING");
         public final static Property TestWithoutProperty = new Property(5, Long.class, "testWithoutProperty", false, "WITHOUT_PROPERTY_TEST_ID");
-    };
+    }
 
     private DaoSession daoSession;
 
@@ -47,7 +46,7 @@ public RelationEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"RELATION_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -59,14 +58,13 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RELATION_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, RelationEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, RelationEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -92,18 +90,42 @@ protected void bindValues(SQLiteStatement stmt, RelationEntity entity) {
     }
 
     @Override
-    protected void attachEntity(RelationEntity entity) {
+    protected final void bindValues(SQLiteStatement stmt, RelationEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        Long parentId = entity.getParentId();
+        if (parentId != null) {
+            stmt.bindLong(2, parentId);
+        }
+ 
+        Long testId = entity.getTestId();
+        if (testId != null) {
+            stmt.bindLong(3, testId);
+        }
+        stmt.bindLong(4, entity.getTestIdNotNull());
+ 
+        String simpleString = entity.getSimpleString();
+        if (simpleString != null) {
+            stmt.bindString(5, simpleString);
+        }
+    }
+
+    @Override
+    protected final void attachEntity(RelationEntity entity) {
         super.attachEntity(entity);
         entity.__setDaoSession(daoSession);
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public RelationEntity readEntity(Cursor cursor, int offset) {
         RelationEntity entity = new RelationEntity( //
@@ -116,7 +138,6 @@ public RelationEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, RelationEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
@@ -126,14 +147,12 @@ public void readEntity(Cursor cursor, RelationEntity entity, int offset) {
         entity.setSimpleString(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(RelationEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(RelationEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(RelationEntity entity) {
         if(entity != null) {
@@ -143,9 +162,13 @@ public Long getKey(RelationEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(RelationEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntity.java
similarity index 94%
rename from DaoTest/src-gen/de/greenrobot/daotest/SimpleEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntity.java
index b50f0598..e3350218 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntity.java
@@ -1,11 +1,16 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
+
+import org.greenrobot.greendao.annotation.*;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "SIMPLE_ENTITY".
  */
+@Entity
 public class SimpleEntity {
 
+    @Id
     private Long id;
     private Boolean simpleBoolean;
     private Byte simpleByte;
@@ -17,6 +22,7 @@
     private String simpleString;
     private byte[] simpleByteArray;
 
+    @Generated
     public SimpleEntity() {
     }
 
@@ -24,6 +30,7 @@ public SimpleEntity(Long id) {
         this.id = id;
     }
 
+    @Generated
     public SimpleEntity(Long id, Boolean simpleBoolean, Byte simpleByte, Short simpleShort, Integer simpleInt, Long simpleLong, Float simpleFloat, Double simpleDouble, String simpleString, byte[] simpleByteArray) {
         this.id = id;
         this.simpleBoolean = simpleBoolean;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityContentProvider.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityContentProvider.java
similarity index 81%
rename from DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityContentProvider.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityContentProvider.java
index 1375e1cf..194a6741 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityContentProvider.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityContentProvider.java
@@ -1,35 +1,37 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import android.content.ContentProvider;
 import android.content.ContentResolver;
 import android.content.ContentValues;
 import android.content.UriMatcher;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteQueryBuilder;
 import android.net.Uri;
 
-import de.greenrobot.dao.DaoLog;
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.database.StandardDatabase;
+import org.greenrobot.greendao.database.Database;
 
-import de.greenrobot.daotest.SimpleEntityDao;
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.daotest.SimpleEntityDao;
 
 /* Copy this code snippet into your AndroidManifest.xml inside the <application> element:
 
     <provider
-        android:name="de.greenrobot.daotest.SimpleEntityContentProvider"
-        android:authorities="de.greenrobot.daotest" />
+        android:name="org.greenrobot.greendao.daotest.SimpleEntityContentProvider"
+        android:authorities="org.greenrobot.greendao.daotest.provider" />
 */
 
 public class SimpleEntityContentProvider extends ContentProvider {
 
-    public static final String AUTHORITY = "de.greenrobot.daotest";
-    public static final String BASE_PATH = "SimpleEntity";
+    public static final String AUTHORITY = "org.greenrobot.greendao.daotest.provider";
+    public static final String BASE_PATH = "";
     public static final Uri CONTENT_URI = Uri.parse("content://" + AUTHORITY + "/" + BASE_PATH);
     public static final String CONTENT_TYPE = ContentResolver.CURSOR_DIR_BASE_TYPE
             + "/" + BASE_PATH;
     public static final String CONTENT_ITEM_TYPE = ContentResolver.CURSOR_ITEM_BASE_TYPE
             + "/" + BASE_PATH;
-            
+
     private static final String TABLENAME = SimpleEntityDao.TABLENAME;
     private static final String PK = SimpleEntityDao.Properties.Id.columnName;
 
@@ -37,19 +39,19 @@
     private static final int SIMPLEENTITY_ID = 1;
 
     private static final UriMatcher sURIMatcher;
-     
+
     static {
-        sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);      
+        sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);
         sURIMatcher.addURI(AUTHORITY, BASE_PATH, SIMPLEENTITY_DIR);
         sURIMatcher.addURI(AUTHORITY, BASE_PATH + "/#", SIMPLEENTITY_ID);
     }
-    
-    /** 
+
+    /**
     * This must be set from outside, it's recommended to do this inside your Application object.
     * Subject to change (static isn't nice).
     */
     public static DaoSession daoSession;
-    
+
     @Override
     public boolean onCreate() {
         // if(daoSession == null) {
@@ -58,14 +60,14 @@ public boolean onCreate() {
         DaoLog.d("Content Provider started: " + CONTENT_URI);
         return true;
     }
-    
-    protected SQLiteDatabase getDatabase() {
+
+    protected Database getDatabase() {
         if(daoSession == null) {
             throw new IllegalStateException("DaoSession must be set during content provider is active");
         }
         return daoSession.getDatabase();
     }
-        
+
     @Override
     public Uri insert(Uri uri, ContentValues values) {
         throw new UnsupportedOperationException("This content provider is readonly");
@@ -75,13 +77,13 @@ public Uri insert(Uri uri, ContentValues values) {
     public int delete(Uri uri, String selection, String[] selectionArgs) {
         throw new UnsupportedOperationException("This content provider is readonly");
     }
-    
+
     @Override
     public int update(Uri uri, ContentValues values, String selection,
             String[] selectionArgs) {
         throw new UnsupportedOperationException("This content provider is readonly");
     }
- 
+
     @Override
     public Cursor query(Uri uri, String[] projection, String selection,
             String[] selectionArgs, String sortOrder) {
@@ -101,14 +103,14 @@ public Cursor query(Uri uri, String[] projection, String selection,
             throw new IllegalArgumentException("Unknown URI: " + uri);
         }
 
-        SQLiteDatabase db = getDatabase();
-        Cursor cursor = queryBuilder.query(db, projection, selection,
+        Database db = getDatabase();
+        Cursor cursor = queryBuilder.query(((StandardDatabase) db).getSQLiteDatabase(), projection, selection,
                 selectionArgs, null, null, sortOrder);
         cursor.setNotificationUri(getContext().getContentResolver(), uri);
 
         return cursor;
     }
-    
+
     @Override
     public final String getType(Uri uri) {
         switch (sURIMatcher.match(uri)) {
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityDao.java
similarity index 74%
rename from DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityDao.java
index 6afdd7c8..70da1b5a 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityDao.java
@@ -1,14 +1,13 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daotest.SimpleEntity;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -21,7 +20,7 @@
     /**
      * Properties of entity SimpleEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property SimpleBoolean = new Property(1, Boolean.class, "simpleBoolean", false, "SIMPLE_BOOLEAN");
@@ -33,7 +32,7 @@
         public final static Property SimpleDouble = new Property(7, Double.class, "simpleDouble", false, "SIMPLE_DOUBLE");
         public final static Property SimpleString = new Property(8, String.class, "simpleString", false, "SIMPLE_STRING");
         public final static Property SimpleByteArray = new Property(9, byte[].class, "simpleByteArray", false, "SIMPLE_BYTE_ARRAY");
-    };
+    }
 
 
     public SimpleEntityDao(DaoConfig config) {
@@ -45,7 +44,7 @@ public SimpleEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"SIMPLE_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -61,14 +60,68 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SIMPLE_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, SimpleEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, SimpleEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        Boolean simpleBoolean = entity.getSimpleBoolean();
+        if (simpleBoolean != null) {
+            stmt.bindLong(2, simpleBoolean ? 1L: 0L);
+        }
+ 
+        Byte simpleByte = entity.getSimpleByte();
+        if (simpleByte != null) {
+            stmt.bindLong(3, simpleByte);
+        }
+ 
+        Short simpleShort = entity.getSimpleShort();
+        if (simpleShort != null) {
+            stmt.bindLong(4, simpleShort);
+        }
+ 
+        Integer simpleInt = entity.getSimpleInt();
+        if (simpleInt != null) {
+            stmt.bindLong(5, simpleInt);
+        }
+ 
+        Long simpleLong = entity.getSimpleLong();
+        if (simpleLong != null) {
+            stmt.bindLong(6, simpleLong);
+        }
+ 
+        Float simpleFloat = entity.getSimpleFloat();
+        if (simpleFloat != null) {
+            stmt.bindDouble(7, simpleFloat);
+        }
+ 
+        Double simpleDouble = entity.getSimpleDouble();
+        if (simpleDouble != null) {
+            stmt.bindDouble(8, simpleDouble);
+        }
+ 
+        String simpleString = entity.getSimpleString();
+        if (simpleString != null) {
+            stmt.bindString(9, simpleString);
+        }
+ 
+        byte[] simpleByteArray = entity.getSimpleByteArray();
+        if (simpleByteArray != null) {
+            stmt.bindBlob(10, simpleByteArray);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, SimpleEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -122,13 +175,11 @@ protected void bindValues(SQLiteStatement stmt, SimpleEntity entity) {
         }
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public SimpleEntity readEntity(Cursor cursor, int offset) {
         SimpleEntity entity = new SimpleEntity( //
@@ -146,7 +197,6 @@ public SimpleEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, SimpleEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
@@ -161,14 +211,12 @@ public void readEntity(Cursor cursor, SimpleEntity entity, int offset) {
         entity.setSimpleByteArray(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(SimpleEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(SimpleEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(SimpleEntity entity) {
         if(entity != null) {
@@ -178,9 +226,13 @@ public Long getKey(SimpleEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(SimpleEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNull.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNull.java
similarity index 89%
rename from DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNull.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNull.java
index dc5dfaef..45b8c769 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNull.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNull.java
@@ -1,11 +1,16 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
+
+import org.greenrobot.greendao.annotation.*;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "SIMPLE_ENTITY_NOT_NULL".
  */
+@Entity
 public class SimpleEntityNotNull {
 
+    @Id
     private long id;
     private boolean simpleBoolean;
     private byte simpleByte;
@@ -14,11 +19,14 @@
     private long simpleLong;
     private float simpleFloat;
     private double simpleDouble;
-    /** Not-null value. */
+
+    @NotNull
     private String simpleString;
-    /** Not-null value. */
+
+    @NotNull
     private byte[] simpleByteArray;
 
+    @Generated
     public SimpleEntityNotNull() {
     }
 
@@ -26,6 +34,7 @@ public SimpleEntityNotNull(long id) {
         this.id = id;
     }
 
+    @Generated
     public SimpleEntityNotNull(long id, boolean simpleBoolean, byte simpleByte, short simpleShort, int simpleInt, long simpleLong, float simpleFloat, double simpleDouble, String simpleString, byte[] simpleByteArray) {
         this.id = id;
         this.simpleBoolean = simpleBoolean;
@@ -103,23 +112,23 @@ public void setSimpleDouble(double simpleDouble) {
         this.simpleDouble = simpleDouble;
     }
 
-    /** Not-null value. */
+    @NotNull
     public String getSimpleString() {
         return simpleString;
     }
 
     /** Not-null value; ensure this value is available before it is saved to the database. */
-    public void setSimpleString(String simpleString) {
+    public void setSimpleString(@NotNull String simpleString) {
         this.simpleString = simpleString;
     }
 
-    /** Not-null value. */
+    @NotNull
     public byte[] getSimpleByteArray() {
         return simpleByteArray;
     }
 
     /** Not-null value; ensure this value is available before it is saved to the database. */
-    public void setSimpleByteArray(byte[] simpleByteArray) {
+    public void setSimpleByteArray(@NotNull byte[] simpleByteArray) {
         this.simpleByteArray = simpleByteArray;
     }
 
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNullDao.java
similarity index 78%
rename from DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNullDao.java
index a90ccf3b..c3aef64b 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNullDao.java
@@ -1,14 +1,13 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daotest.SimpleEntityNotNull;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -21,7 +20,7 @@
     /**
      * Properties of entity SimpleEntityNotNull.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, long.class, "id", true, "_id");
         public final static Property SimpleBoolean = new Property(1, boolean.class, "simpleBoolean", false, "SIMPLE_BOOLEAN");
@@ -33,7 +32,7 @@
         public final static Property SimpleDouble = new Property(7, double.class, "simpleDouble", false, "SIMPLE_DOUBLE");
         public final static Property SimpleString = new Property(8, String.class, "simpleString", false, "SIMPLE_STRING");
         public final static Property SimpleByteArray = new Property(9, byte[].class, "simpleByteArray", false, "SIMPLE_BYTE_ARRAY");
-    };
+    }
 
 
     public SimpleEntityNotNullDao(DaoConfig config) {
@@ -45,7 +44,7 @@ public SimpleEntityNotNullDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"SIMPLE_ENTITY_NOT_NULL\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
@@ -61,14 +60,28 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SIMPLE_ENTITY_NOT_NULL\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, SimpleEntityNotNull entity) {
+    protected final void bindValues(DatabaseStatement stmt, SimpleEntityNotNull entity) {
+        stmt.clearBindings();
+        stmt.bindLong(1, entity.getId());
+        stmt.bindLong(2, entity.getSimpleBoolean() ? 1L: 0L);
+        stmt.bindLong(3, entity.getSimpleByte());
+        stmt.bindLong(4, entity.getSimpleShort());
+        stmt.bindLong(5, entity.getSimpleInt());
+        stmt.bindLong(6, entity.getSimpleLong());
+        stmt.bindDouble(7, entity.getSimpleFloat());
+        stmt.bindDouble(8, entity.getSimpleDouble());
+        stmt.bindString(9, entity.getSimpleString());
+        stmt.bindBlob(10, entity.getSimpleByteArray());
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, SimpleEntityNotNull entity) {
         stmt.clearBindings();
         stmt.bindLong(1, entity.getId());
         stmt.bindLong(2, entity.getSimpleBoolean() ? 1L: 0L);
@@ -82,13 +95,11 @@ protected void bindValues(SQLiteStatement stmt, SimpleEntityNotNull entity) {
         stmt.bindBlob(10, entity.getSimpleByteArray());
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public SimpleEntityNotNull readEntity(Cursor cursor, int offset) {
         SimpleEntityNotNull entity = new SimpleEntityNotNull( //
@@ -106,7 +117,6 @@ public SimpleEntityNotNull readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, SimpleEntityNotNull entity, int offset) {
         entity.setId(cursor.getLong(offset + 0));
@@ -121,14 +131,12 @@ public void readEntity(Cursor cursor, SimpleEntityNotNull entity, int offset) {
         entity.setSimpleByteArray(cursor.getBlob(offset + 9));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(SimpleEntityNotNull entity, long rowId) {
+    protected final Long updateKeyAfterInsert(SimpleEntityNotNull entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(SimpleEntityNotNull entity) {
         if(entity != null) {
@@ -138,9 +146,13 @@ public Long getKey(SimpleEntityNotNull entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(SimpleEntityNotNull entity) {
+        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntity.java
similarity index 91%
rename from DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntity.java
index 5b10d0fc..48ff4187 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntity.java
@@ -1,11 +1,16 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
+
+import org.greenrobot.greendao.annotation.*;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "ORDER TRANSACTION GROUP BY".
  */
+@Entity(nameInDb = "ORDER TRANSACTION GROUP BY")
 public class SpecialNamesEntity {
 
+    @Id
     private Long id;
     private String count;
     private String select;
@@ -17,6 +22,7 @@
     private String index;
     private Integer order;
 
+    @Generated
     public SpecialNamesEntity() {
     }
 
@@ -24,6 +30,7 @@ public SpecialNamesEntity(Long id) {
         this.id = id;
     }
 
+    @Generated
     public SpecialNamesEntity(Long id, String count, String select, String sum, String avg, String join, String distinct, String on, String index, Integer order) {
         this.id = id;
         this.count = count;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntityDao.java
similarity index 74%
rename from DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntityDao.java
index 7e9c2698..718b342b 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntityDao.java
@@ -1,14 +1,13 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daotest.SpecialNamesEntity;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -21,7 +20,7 @@
     /**
      * Properties of entity SpecialNamesEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property Count = new Property(1, String.class, "count", false, "COUNT");
@@ -33,7 +32,7 @@
         public final static Property On = new Property(7, String.class, "on", false, "ON");
         public final static Property Index = new Property(8, String.class, "index", false, "INDEX");
         public final static Property Order = new Property(9, Integer.class, "order", false, "ORDER");
-    };
+    }
 
 
     public SpecialNamesEntityDao(DaoConfig config) {
@@ -45,7 +44,7 @@ public SpecialNamesEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"ORDER TRANSACTION GROUP BY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -61,14 +60,68 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER TRANSACTION GROUP BY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, SpecialNamesEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, SpecialNamesEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        String count = entity.getCount();
+        if (count != null) {
+            stmt.bindString(2, count);
+        }
+ 
+        String select = entity.getSelect();
+        if (select != null) {
+            stmt.bindString(3, select);
+        }
+ 
+        String sum = entity.getSum();
+        if (sum != null) {
+            stmt.bindString(4, sum);
+        }
+ 
+        String avg = entity.getAvg();
+        if (avg != null) {
+            stmt.bindString(5, avg);
+        }
+ 
+        String join = entity.getJoin();
+        if (join != null) {
+            stmt.bindString(6, join);
+        }
+ 
+        String distinct = entity.getDistinct();
+        if (distinct != null) {
+            stmt.bindString(7, distinct);
+        }
+ 
+        String on = entity.getOn();
+        if (on != null) {
+            stmt.bindString(8, on);
+        }
+ 
+        String index = entity.getIndex();
+        if (index != null) {
+            stmt.bindString(9, index);
+        }
+ 
+        Integer order = entity.getOrder();
+        if (order != null) {
+            stmt.bindLong(10, order);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, SpecialNamesEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -122,13 +175,11 @@ protected void bindValues(SQLiteStatement stmt, SpecialNamesEntity entity) {
         }
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public SpecialNamesEntity readEntity(Cursor cursor, int offset) {
         SpecialNamesEntity entity = new SpecialNamesEntity( //
@@ -146,7 +197,6 @@ public SpecialNamesEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, SpecialNamesEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
@@ -161,14 +211,12 @@ public void readEntity(Cursor cursor, SpecialNamesEntity entity, int offset) {
         entity.setOrder(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(SpecialNamesEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(SpecialNamesEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(SpecialNamesEntity entity) {
         if(entity != null) {
@@ -178,9 +226,13 @@ public Long getKey(SpecialNamesEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(SpecialNamesEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SqliteMaster.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMaster.java
similarity index 89%
rename from DaoTest/src-gen/de/greenrobot/daotest/SqliteMaster.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMaster.java
index 7b53491f..825724e5 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SqliteMaster.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMaster.java
@@ -1,16 +1,21 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
+
+import org.greenrobot.greendao.annotation.*;
 
 // THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
 
 // KEEP INCLUDES - put your custom includes here
 // KEEP INCLUDES END
+
 /**
  * Entity mapped to table "SQLITE_MASTER".
  */
+@Entity(createInDb = false)
 public class SqliteMaster {
-
     private String type;
     private String name;
+
+    @Property(nameInDb = "tbl_name")
     private String tableName;
     private Long rootpage;
     private String sql;
@@ -18,9 +23,11 @@
     // KEEP FIELDS - put your custom fields here
     // KEEP FIELDS END
 
+    @Generated
     public SqliteMaster() {
     }
 
+    @Generated
     public SqliteMaster(String type, String name, String tableName, Long rootpage, String sql) {
         this.type = type;
         this.name = name;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMasterDao.java
similarity index 70%
rename from DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMasterDao.java
index 8302d4d0..67801c26 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMasterDao.java
@@ -1,14 +1,13 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daotest.SqliteMaster;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -21,14 +20,14 @@
     /**
      * Properties of entity SqliteMaster.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Type = new Property(0, String.class, "type", false, "TYPE");
         public final static Property Name = new Property(1, String.class, "name", false, "NAME");
         public final static Property TableName = new Property(2, String.class, "tableName", false, "tbl_name");
         public final static Property Rootpage = new Property(3, Long.class, "rootpage", false, "ROOTPAGE");
         public final static Property Sql = new Property(4, String.class, "sql", false, "SQL");
-    };
+    }
 
 
     public SqliteMasterDao(DaoConfig config) {
@@ -39,9 +38,38 @@ public SqliteMasterDao(DaoConfig config, DaoSession daoSession) {
         super(config, daoSession);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, SqliteMaster entity) {
+    protected final void bindValues(DatabaseStatement stmt, SqliteMaster entity) {
+        stmt.clearBindings();
+ 
+        String type = entity.getType();
+        if (type != null) {
+            stmt.bindString(1, type);
+        }
+ 
+        String name = entity.getName();
+        if (name != null) {
+            stmt.bindString(2, name);
+        }
+ 
+        String tableName = entity.getTableName();
+        if (tableName != null) {
+            stmt.bindString(3, tableName);
+        }
+ 
+        Long rootpage = entity.getRootpage();
+        if (rootpage != null) {
+            stmt.bindLong(4, rootpage);
+        }
+ 
+        String sql = entity.getSql();
+        if (sql != null) {
+            stmt.bindString(5, sql);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, SqliteMaster entity) {
         stmt.clearBindings();
  
         String type = entity.getType();
@@ -70,13 +98,11 @@ protected void bindValues(SQLiteStatement stmt, SqliteMaster entity) {
         }
     }
 
-    /** @inheritdoc */
     @Override
     public Void readKey(Cursor cursor, int offset) {
         return null;
     }    
 
-    /** @inheritdoc */
     @Override
     public SqliteMaster readEntity(Cursor cursor, int offset) {
         SqliteMaster entity = new SqliteMaster( //
@@ -89,7 +115,6 @@ public SqliteMaster readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, SqliteMaster entity, int offset) {
         entity.setType(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
@@ -99,22 +124,25 @@ public void readEntity(Cursor cursor, SqliteMaster entity, int offset) {
         entity.setSql(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Void updateKeyAfterInsert(SqliteMaster entity, long rowId) {
+    protected final Void updateKeyAfterInsert(SqliteMaster entity, long rowId) {
         // Unsupported or missing PK type
         return null;
     }
     
-    /** @inheritdoc */
     @Override
     public Void getKey(SqliteMaster entity) {
         return null;
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(SqliteMaster entity) {
+        // TODO
+        return false;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntity.java
similarity index 81%
rename from DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntity.java
index 49a3ebc8..51d88e08 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntity.java
@@ -1,14 +1,20 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
+
+import org.greenrobot.greendao.annotation.*;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "STRING_KEY_VALUE_ENTITY".
  */
+@Entity
 public class StringKeyValueEntity {
 
+    @Id
     private String key;
     private String value;
 
+    @Generated
     public StringKeyValueEntity() {
     }
 
@@ -16,6 +22,7 @@ public StringKeyValueEntity(String key) {
         this.key = key;
     }
 
+    @Generated
     public StringKeyValueEntity(String key, String value) {
         this.key = key;
         this.value = value;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntityDao.java
similarity index 70%
rename from DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntityDao.java
index 8efdfaef..81bc7286 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntityDao.java
@@ -1,14 +1,13 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daotest.StringKeyValueEntity;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -21,11 +20,11 @@
     /**
      * Properties of entity StringKeyValueEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Key = new Property(0, String.class, "key", true, "KEY");
         public final static Property Value = new Property(1, String.class, "value", false, "VALUE");
-    };
+    }
 
 
     public StringKeyValueEntityDao(DaoConfig config) {
@@ -37,7 +36,7 @@ public StringKeyValueEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"STRING_KEY_VALUE_ENTITY\" (" + //
                 "\"KEY\" TEXT PRIMARY KEY NOT NULL ," + // 0: key
@@ -45,14 +44,28 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STRING_KEY_VALUE_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, StringKeyValueEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, StringKeyValueEntity entity) {
+        stmt.clearBindings();
+ 
+        String key = entity.getKey();
+        if (key != null) {
+            stmt.bindString(1, key);
+        }
+ 
+        String value = entity.getValue();
+        if (value != null) {
+            stmt.bindString(2, value);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, StringKeyValueEntity entity) {
         stmt.clearBindings();
  
         String key = entity.getKey();
@@ -66,13 +79,11 @@ protected void bindValues(SQLiteStatement stmt, StringKeyValueEntity entity) {
         }
     }
 
-    /** @inheritdoc */
     @Override
     public String readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public StringKeyValueEntity readEntity(Cursor cursor, int offset) {
         StringKeyValueEntity entity = new StringKeyValueEntity( //
@@ -82,20 +93,17 @@ public StringKeyValueEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, StringKeyValueEntity entity, int offset) {
         entity.setKey(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
         entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
      }
     
-    /** @inheritdoc */
     @Override
-    protected String updateKeyAfterInsert(StringKeyValueEntity entity, long rowId) {
+    protected final String updateKeyAfterInsert(StringKeyValueEntity entity, long rowId) {
         return entity.getKey();
     }
     
-    /** @inheritdoc */
     @Override
     public String getKey(StringKeyValueEntity entity) {
         if(entity != null) {
@@ -105,9 +113,13 @@ public String getKey(StringKeyValueEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(StringKeyValueEntity entity) {
+        return entity.getKey() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TestEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntity.java
similarity index 91%
rename from DaoTest/src-gen/de/greenrobot/daotest/TestEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntity.java
index 15863049..b3fe6c6e 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TestEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntity.java
@@ -1,29 +1,39 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+import org.greenrobot.greendao.annotation.*;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
 /**
  * This entity is used by internal tests of greenDAO.
  * (This JavaDoc is defined in the generator project.)
  */
 // This is another test comment, you could also apply annotations like this
+@Entity
 public class TestEntity {
 
     /**
      * JavaDoc test field
      */
+    @Id
     private Long id;
     private int simpleInt;
     private Integer simpleInteger;
-    /** Not-null value. */
+
+    @NotNull
     private String simpleStringNotNull;
     private String simpleString;
+
+    @Index
     private String indexedString;
+
+    @Index(unique = true)
     private String indexedStringAscUnique;
     private java.util.Date simpleDate;
     private Boolean simpleBoolean;
     private byte[] simpleByteArray;
 
+    @Generated
     public TestEntity() {
     }
 
@@ -31,6 +41,7 @@ public TestEntity(Long id) {
         this.id = id;
     }
 
+    @Generated
     public TestEntity(Long id, int simpleInt, Integer simpleInteger, String simpleStringNotNull, String simpleString, String indexedString, String indexedStringAscUnique, java.util.Date simpleDate, Boolean simpleBoolean, byte[] simpleByteArray) {
         this.id = id;
         this.simpleInt = simpleInt;
@@ -74,10 +85,10 @@ public void setSimpleInteger(Integer simpleInteger) {
         this.simpleInteger = simpleInteger;
     }
 
-    /** Not-null value. */
     /**
      * JavaDoc test getter and setter
      */
+    @NotNull
     public String getSimpleStringNotNull() {
         return simpleStringNotNull;
     }
@@ -86,7 +97,7 @@ public String getSimpleStringNotNull() {
     /**
      * JavaDoc test getter and setter
      */
-    public void setSimpleStringNotNull(String simpleStringNotNull) {
+    public void setSimpleStringNotNull(@NotNull String simpleStringNotNull) {
         this.simpleStringNotNull = simpleStringNotNull;
     }
 
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntityDao.java
similarity index 75%
rename from DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntityDao.java
index 5febaa8b..06e82a11 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntityDao.java
@@ -1,14 +1,13 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daotest.TestEntity;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -21,7 +20,7 @@
     /**
      * Properties of entity TestEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property SimpleInt = new Property(1, int.class, "simpleInt", false, "SIMPLE_INT");
@@ -33,7 +32,7 @@
         public final static Property SimpleDate = new Property(7, java.util.Date.class, "simpleDate", false, "SIMPLE_DATE");
         public final static Property SimpleBoolean = new Property(8, Boolean.class, "simpleBoolean", false, "SIMPLE_BOOLEAN");
         public final static Property SimpleByteArray = new Property(9, byte[].class, "simpleByteArray", false, "SIMPLE_BYTE_ARRAY");
-    };
+    }
 
 
     public TestEntityDao(DaoConfig config) {
@@ -45,7 +44,7 @@ public TestEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"TEST_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -62,18 +61,64 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
         db.execSQL("CREATE INDEX " + constraint + "IDX_TEST_ENTITY_INDEXED_STRING ON TEST_ENTITY" +
                 " (\"INDEXED_STRING\");");
         db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_TEST_ENTITY_INDEXED_STRING_ASC_UNIQUE ON TEST_ENTITY" +
-                " (\"INDEXED_STRING_ASC_UNIQUE\");");
+                " (\"INDEXED_STRING_ASC_UNIQUE\" ASC);");
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, TestEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, TestEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+        stmt.bindLong(2, entity.getSimpleInt());
+ 
+        Integer simpleInteger = entity.getSimpleInteger();
+        if (simpleInteger != null) {
+            stmt.bindLong(3, simpleInteger);
+        }
+        stmt.bindString(4, entity.getSimpleStringNotNull());
+ 
+        String simpleString = entity.getSimpleString();
+        if (simpleString != null) {
+            stmt.bindString(5, simpleString);
+        }
+ 
+        String indexedString = entity.getIndexedString();
+        if (indexedString != null) {
+            stmt.bindString(6, indexedString);
+        }
+ 
+        String indexedStringAscUnique = entity.getIndexedStringAscUnique();
+        if (indexedStringAscUnique != null) {
+            stmt.bindString(7, indexedStringAscUnique);
+        }
+ 
+        java.util.Date simpleDate = entity.getSimpleDate();
+        if (simpleDate != null) {
+            stmt.bindLong(8, simpleDate.getTime());
+        }
+ 
+        Boolean simpleBoolean = entity.getSimpleBoolean();
+        if (simpleBoolean != null) {
+            stmt.bindLong(9, simpleBoolean ? 1L: 0L);
+        }
+ 
+        byte[] simpleByteArray = entity.getSimpleByteArray();
+        if (simpleByteArray != null) {
+            stmt.bindBlob(10, simpleByteArray);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, TestEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -119,13 +164,11 @@ protected void bindValues(SQLiteStatement stmt, TestEntity entity) {
         }
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public TestEntity readEntity(Cursor cursor, int offset) {
         TestEntity entity = new TestEntity( //
@@ -143,7 +186,6 @@ public TestEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, TestEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
@@ -158,14 +200,12 @@ public void readEntity(Cursor cursor, TestEntity entity, int offset) {
         entity.setSimpleByteArray(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(TestEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(TestEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(TestEntity entity) {
         if(entity != null) {
@@ -175,9 +215,13 @@ public Long getKey(TestEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(TestEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestInterface.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestInterface.java
new file mode 100644
index 00000000..4e8baf3c
--- /dev/null
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestInterface.java
@@ -0,0 +1,5 @@
+package org.greenrobot.greendao.daotest;
+
+public interface TestInterface {
+
+}
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestSuperclass.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestSuperclass.java
new file mode 100644
index 00000000..3221add5
--- /dev/null
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestSuperclass.java
@@ -0,0 +1,5 @@
+package org.greenrobot.greendao.daotest;
+
+public class TestSuperclass {
+
+}
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntity.java
similarity index 74%
rename from DaoTest/src-gen/de/greenrobot/daotest/ToManyEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntity.java
index 76279426..5a0ee2ce 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntity.java
@@ -1,30 +1,61 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
+
+import org.greenrobot.greendao.annotation.*;
 
 import java.util.List;
-import de.greenrobot.daotest.DaoSession;
-import de.greenrobot.dao.DaoException;
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.DaoException;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "TO_MANY_ENTITY".
  */
+@Entity(active = true)
 public class ToManyEntity {
 
+    @Id
     private Long id;
     private String sourceJoinProperty;
 
     /** Used to resolve relations */
+    @Generated
     private transient DaoSession daoSession;
 
     /** Used for active entity operations. */
+    @Generated
     private transient ToManyEntityDao myDao;
 
+    @ToMany(joinProperties = {
+        @JoinProperty(name = "id", referencedName = "toManyId")
+    })
+    @OrderBy("id ASC")
     private List<ToManyTargetEntity> toManyTargetEntityList;
+
+    @ToMany(joinProperties = {
+        @JoinProperty(name = "id", referencedName = "toManyIdDesc")
+    })
+    @OrderBy("id DESC")
     private List<ToManyTargetEntity> toManyDescList;
+
+    @ToMany(joinProperties = {
+        @JoinProperty(name = "sourceJoinProperty", referencedName = "targetJoinProperty")
+    })
+    @OrderBy("id ASC")
     private List<ToManyTargetEntity> toManyByJoinProperty;
+
+    @ToMany(joinProperties = {
+        @JoinProperty(name = "id", referencedName = "toManyId"),
+        @JoinProperty(name = "sourceJoinProperty", referencedName = "targetJoinProperty")
+    })
+    @OrderBy("targetJoinProperty DESC, id DESC")
     private List<ToManyTargetEntity> toManyJoinTwo;
+
+    @ToMany
+    @JoinEntity(entity = JoinManyToDateEntity.class, sourceProperty = "idToMany", targetProperty = "idDate")
     private List<DateEntity> dateEntityList;
 
+    @Generated
     public ToManyEntity() {
     }
 
@@ -32,12 +63,14 @@ public ToManyEntity(Long id) {
         this.id = id;
     }
 
+    @Generated
     public ToManyEntity(Long id, String sourceJoinProperty) {
         this.id = id;
         this.sourceJoinProperty = sourceJoinProperty;
     }
 
     /** called by internal mechanisms, do not call yourself. */
+    @Generated
     public void __setDaoSession(DaoSession daoSession) {
         this.daoSession = daoSession;
         myDao = daoSession != null ? daoSession.getToManyEntityDao() : null;
@@ -60,11 +93,10 @@ public void setSourceJoinProperty(String sourceJoinProperty) {
     }
 
     /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
+    @Generated
     public List<ToManyTargetEntity> getToManyTargetEntityList() {
         if (toManyTargetEntityList == null) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
+            __throwIfDetached();
             ToManyTargetEntityDao targetDao = daoSession.getToManyTargetEntityDao();
             List<ToManyTargetEntity> toManyTargetEntityListNew = targetDao._queryToManyEntity_ToManyTargetEntityList(id);
             synchronized (this) {
@@ -77,16 +109,16 @@ public void setSourceJoinProperty(String sourceJoinProperty) {
     }
 
     /** Resets a to-many relationship, making the next get call to query for a fresh result. */
+    @Generated
     public synchronized void resetToManyTargetEntityList() {
         toManyTargetEntityList = null;
     }
 
     /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
+    @Generated
     public List<ToManyTargetEntity> getToManyDescList() {
         if (toManyDescList == null) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
+            __throwIfDetached();
             ToManyTargetEntityDao targetDao = daoSession.getToManyTargetEntityDao();
             List<ToManyTargetEntity> toManyDescListNew = targetDao._queryToManyEntity_ToManyDescList(id);
             synchronized (this) {
@@ -99,16 +131,16 @@ public synchronized void resetToManyTargetEntityList() {
     }
 
     /** Resets a to-many relationship, making the next get call to query for a fresh result. */
+    @Generated
     public synchronized void resetToManyDescList() {
         toManyDescList = null;
     }
 
     /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
+    @Generated
     public List<ToManyTargetEntity> getToManyByJoinProperty() {
         if (toManyByJoinProperty == null) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
+            __throwIfDetached();
             ToManyTargetEntityDao targetDao = daoSession.getToManyTargetEntityDao();
             List<ToManyTargetEntity> toManyByJoinPropertyNew = targetDao._queryToManyEntity_ToManyByJoinProperty(sourceJoinProperty);
             synchronized (this) {
@@ -121,16 +153,16 @@ public synchronized void resetToManyDescList() {
     }
 
     /** Resets a to-many relationship, making the next get call to query for a fresh result. */
+    @Generated
     public synchronized void resetToManyByJoinProperty() {
         toManyByJoinProperty = null;
     }
 
     /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
+    @Generated
     public List<ToManyTargetEntity> getToManyJoinTwo() {
         if (toManyJoinTwo == null) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
+            __throwIfDetached();
             ToManyTargetEntityDao targetDao = daoSession.getToManyTargetEntityDao();
             List<ToManyTargetEntity> toManyJoinTwoNew = targetDao._queryToManyEntity_ToManyJoinTwo(id, sourceJoinProperty);
             synchronized (this) {
@@ -143,16 +175,16 @@ public synchronized void resetToManyByJoinProperty() {
     }
 
     /** Resets a to-many relationship, making the next get call to query for a fresh result. */
+    @Generated
     public synchronized void resetToManyJoinTwo() {
         toManyJoinTwo = null;
     }
 
     /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
+    @Generated
     public List<DateEntity> getDateEntityList() {
         if (dateEntityList == null) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
+            __throwIfDetached();
             DateEntityDao targetDao = daoSession.getDateEntityDao();
             List<DateEntity> dateEntityListNew = targetDao._queryToManyEntity_DateEntityList(id);
             synchronized (this) {
@@ -165,32 +197,46 @@ public synchronized void resetToManyJoinTwo() {
     }
 
     /** Resets a to-many relationship, making the next get call to query for a fresh result. */
+    @Generated
     public synchronized void resetDateEntityList() {
         dateEntityList = null;
     }
 
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void delete() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
+        __throwIfDetached();
         myDao.delete(this);
     }
 
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void update() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
+        __throwIfDetached();
         myDao.update(this);
     }
 
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void refresh() {
+        __throwIfDetached();
+        myDao.refresh(this);
+    }
+
+    @Generated
+    private void __throwIfDetached() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.refresh(this);
+        }
     }
 
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntityDao.java
similarity index 70%
rename from DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntityDao.java
index 410c448a..cb7d58bb 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntityDao.java
@@ -1,14 +1,13 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daotest.ToManyEntity;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -21,11 +20,11 @@
     /**
      * Properties of entity ToManyEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property SourceJoinProperty = new Property(1, String.class, "sourceJoinProperty", false, "SOURCE_JOIN_PROPERTY");
-    };
+    }
 
     private DaoSession daoSession;
 
@@ -40,7 +39,7 @@ public ToManyEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"TO_MANY_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -48,14 +47,28 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TO_MANY_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ToManyEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, ToManyEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        String sourceJoinProperty = entity.getSourceJoinProperty();
+        if (sourceJoinProperty != null) {
+            stmt.bindString(2, sourceJoinProperty);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, ToManyEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -70,18 +83,16 @@ protected void bindValues(SQLiteStatement stmt, ToManyEntity entity) {
     }
 
     @Override
-    protected void attachEntity(ToManyEntity entity) {
+    protected final void attachEntity(ToManyEntity entity) {
         super.attachEntity(entity);
         entity.__setDaoSession(daoSession);
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public ToManyEntity readEntity(Cursor cursor, int offset) {
         ToManyEntity entity = new ToManyEntity( //
@@ -91,21 +102,18 @@ public ToManyEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, ToManyEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
         entity.setSourceJoinProperty(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(ToManyEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(ToManyEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(ToManyEntity entity) {
         if(entity != null) {
@@ -115,9 +123,13 @@ public Long getKey(ToManyEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(ToManyEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntity.java
similarity index 88%
rename from DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntity.java
index 94df37ea..6f69b1d4 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntity.java
@@ -1,16 +1,22 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
+
+import org.greenrobot.greendao.annotation.*;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "TO_MANY_TARGET_ENTITY".
  */
+@Entity
 public class ToManyTargetEntity {
-
     private Long toManyId;
     private Long toManyIdDesc;
+
+    @Id
     private Long id;
     private String targetJoinProperty;
 
+    @Generated
     public ToManyTargetEntity() {
     }
 
@@ -18,6 +24,7 @@ public ToManyTargetEntity(Long id) {
         this.id = id;
     }
 
+    @Generated
     public ToManyTargetEntity(Long toManyId, Long toManyIdDesc, Long id, String targetJoinProperty) {
         this.toManyId = toManyId;
         this.toManyIdDesc = toManyIdDesc;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntityDao.java
similarity index 82%
rename from DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntityDao.java
index 61aafebe..6411d0f5 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntityDao.java
@@ -1,17 +1,16 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import java.util.List;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.query.QueryBuilder;
-
-import de.greenrobot.daotest.ToManyTargetEntity;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.query.QueryBuilder;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -24,13 +23,13 @@
     /**
      * Properties of entity ToManyTargetEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property ToManyId = new Property(0, Long.class, "toManyId", false, "TO_MANY_ID");
         public final static Property ToManyIdDesc = new Property(1, Long.class, "toManyIdDesc", false, "TO_MANY_ID_DESC");
         public final static Property Id = new Property(2, Long.class, "id", true, "_id");
         public final static Property TargetJoinProperty = new Property(3, String.class, "targetJoinProperty", false, "TARGET_JOIN_PROPERTY");
-    };
+    }
 
     private Query<ToManyTargetEntity> toManyEntity_ToManyTargetEntityListQuery;
     private Query<ToManyTargetEntity> toManyEntity_ToManyDescListQuery;
@@ -46,7 +45,7 @@ public ToManyTargetEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"TO_MANY_TARGET_ENTITY\" (" + //
                 "\"TO_MANY_ID\" INTEGER," + // 0: toManyId
@@ -56,14 +55,38 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TO_MANY_TARGET_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ToManyTargetEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, ToManyTargetEntity entity) {
+        stmt.clearBindings();
+ 
+        Long toManyId = entity.getToManyId();
+        if (toManyId != null) {
+            stmt.bindLong(1, toManyId);
+        }
+ 
+        Long toManyIdDesc = entity.getToManyIdDesc();
+        if (toManyIdDesc != null) {
+            stmt.bindLong(2, toManyIdDesc);
+        }
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(3, id);
+        }
+ 
+        String targetJoinProperty = entity.getTargetJoinProperty();
+        if (targetJoinProperty != null) {
+            stmt.bindString(4, targetJoinProperty);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, ToManyTargetEntity entity) {
         stmt.clearBindings();
  
         Long toManyId = entity.getToManyId();
@@ -87,13 +110,11 @@ protected void bindValues(SQLiteStatement stmt, ToManyTargetEntity entity) {
         }
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2);
     }    
 
-    /** @inheritdoc */
     @Override
     public ToManyTargetEntity readEntity(Cursor cursor, int offset) {
         ToManyTargetEntity entity = new ToManyTargetEntity( //
@@ -105,7 +126,6 @@ public ToManyTargetEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, ToManyTargetEntity entity, int offset) {
         entity.setToManyId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
@@ -114,14 +134,12 @@ public void readEntity(Cursor cursor, ToManyTargetEntity entity, int offset) {
         entity.setTargetJoinProperty(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(ToManyTargetEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(ToManyTargetEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(ToManyTargetEntity entity) {
         if(entity != null) {
@@ -131,9 +149,13 @@ public Long getKey(ToManyTargetEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(ToManyTargetEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntity.java
similarity index 69%
rename from DaoTest/src-gen/de/greenrobot/daotest/TreeEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntity.java
index cd8bdda9..dadd3b6f 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntity.java
@@ -1,29 +1,43 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
+
+import org.greenrobot.greendao.annotation.*;
 
 import java.util.List;
-import de.greenrobot.daotest.DaoSession;
-import de.greenrobot.dao.DaoException;
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.DaoException;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "TREE_ENTITY".
  */
+@Entity(active = true)
 public class TreeEntity {
 
+    @Id
     private Long id;
     private Long parentId;
 
     /** Used to resolve relations */
+    @Generated
     private transient DaoSession daoSession;
 
     /** Used for active entity operations. */
+    @Generated
     private transient TreeEntityDao myDao;
 
+    @ToOne(joinProperty = "parentId")
     private TreeEntity parent;
-    private Long parent__resolvedKey;
 
+    @Generated
+    private transient Long parent__resolvedKey;
+
+    @ToMany(joinProperties = {
+        @JoinProperty(name = "id", referencedName = "parentId")
+    })
     private List<TreeEntity> children;
 
+    @Generated
     public TreeEntity() {
     }
 
@@ -31,12 +45,14 @@ public TreeEntity(Long id) {
         this.id = id;
     }
 
+    @Generated
     public TreeEntity(Long id, Long parentId) {
         this.id = id;
         this.parentId = parentId;
     }
 
     /** called by internal mechanisms, do not call yourself. */
+    @Generated
     public void __setDaoSession(DaoSession daoSession) {
         this.daoSession = daoSession;
         myDao = daoSession != null ? daoSession.getTreeEntityDao() : null;
@@ -59,12 +75,11 @@ public void setParentId(Long parentId) {
     }
 
     /** To-one relationship, resolved on first access. */
+    @Generated
     public TreeEntity getParent() {
         Long __key = this.parentId;
         if (parent__resolvedKey == null || !parent__resolvedKey.equals(__key)) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
+            __throwIfDetached();
             TreeEntityDao targetDao = daoSession.getTreeEntityDao();
             TreeEntity parentNew = targetDao.load(__key);
             synchronized (this) {
@@ -75,6 +90,7 @@ public TreeEntity getParent() {
         return parent;
     }
 
+    @Generated
     public void setParent(TreeEntity parent) {
         synchronized (this) {
             this.parent = parent;
@@ -84,11 +100,10 @@ public void setParent(TreeEntity parent) {
     }
 
     /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
+    @Generated
     public List<TreeEntity> getChildren() {
         if (children == null) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
+            __throwIfDetached();
             TreeEntityDao targetDao = daoSession.getTreeEntityDao();
             List<TreeEntity> childrenNew = targetDao._queryTreeEntity_Children(id);
             synchronized (this) {
@@ -101,32 +116,46 @@ public void setParent(TreeEntity parent) {
     }
 
     /** Resets a to-many relationship, making the next get call to query for a fresh result. */
+    @Generated
     public synchronized void resetChildren() {
         children = null;
     }
 
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void delete() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
+        __throwIfDetached();
         myDao.delete(this);
     }
 
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void update() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
+        __throwIfDetached();
         myDao.update(this);
     }
 
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void refresh() {
+        __throwIfDetached();
+        myDao.refresh(this);
+    }
+
+    @Generated
+    private void __throwIfDetached() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.refresh(this);
+        }
     }
 
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntityDao.java
similarity index 83%
rename from DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntityDao.java
index 934b0b3a..465bd139 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntityDao.java
@@ -1,19 +1,18 @@
-package de.greenrobot.daotest;
+package org.greenrobot.greendao.daotest;
 
 import java.util.List;
 import java.util.ArrayList;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.SqlUtils;
-import de.greenrobot.dao.internal.DaoConfig;
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.query.QueryBuilder;
-
-import de.greenrobot.daotest.TreeEntity;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.SqlUtils;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.query.QueryBuilder;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -26,11 +25,11 @@
     /**
      * Properties of entity TreeEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property ParentId = new Property(1, Long.class, "parentId", false, "PARENT_ID");
-    };
+    }
 
     private DaoSession daoSession;
 
@@ -46,7 +45,7 @@ public TreeEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"TREE_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -54,14 +53,28 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TREE_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, TreeEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, TreeEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        Long parentId = entity.getParentId();
+        if (parentId != null) {
+            stmt.bindLong(2, parentId);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, TreeEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -76,18 +89,16 @@ protected void bindValues(SQLiteStatement stmt, TreeEntity entity) {
     }
 
     @Override
-    protected void attachEntity(TreeEntity entity) {
+    protected final void attachEntity(TreeEntity entity) {
         super.attachEntity(entity);
         entity.__setDaoSession(daoSession);
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public TreeEntity readEntity(Cursor cursor, int offset) {
         TreeEntity entity = new TreeEntity( //
@@ -97,21 +108,18 @@ public TreeEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, TreeEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
         entity.setParentId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(TreeEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(TreeEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(TreeEntity entity) {
         if(entity != null) {
@@ -121,9 +129,13 @@ public Long getKey(TreeEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(TreeEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src/de/greenrobot/daotest/customtype/IntegerListConverter.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/IntegerListConverter.java
similarity index 94%
rename from DaoTest/src/de/greenrobot/daotest/customtype/IntegerListConverter.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/IntegerListConverter.java
index 98a72442..9bfaa59c 100644
--- a/DaoTest/src/de/greenrobot/daotest/customtype/IntegerListConverter.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/IntegerListConverter.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.daotest.customtype;
+package org.greenrobot.greendao.daotest.customtype;
 
-import de.greenrobot.dao.converter.PropertyConverter;
+import org.greenrobot.greendao.converter.PropertyConverter;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/DaoTest/src/de/greenrobot/daotest/customtype/MyTimestamp.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/MyTimestamp.java
similarity index 52%
rename from DaoTest/src/de/greenrobot/daotest/customtype/MyTimestamp.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/MyTimestamp.java
index 470185c5..f25cfd5f 100644
--- a/DaoTest/src/de/greenrobot/daotest/customtype/MyTimestamp.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/MyTimestamp.java
@@ -1,4 +1,4 @@
-package de.greenrobot.daotest.customtype;
+package org.greenrobot.greendao.daotest.customtype;
 
 public class MyTimestamp {
     public long timestamp;
diff --git a/DaoTest/src/de/greenrobot/daotest/customtype/MyTimestampConverter.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/MyTimestampConverter.java
similarity index 79%
rename from DaoTest/src/de/greenrobot/daotest/customtype/MyTimestampConverter.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/MyTimestampConverter.java
index c96d1cf4..e57a3879 100644
--- a/DaoTest/src/de/greenrobot/daotest/customtype/MyTimestampConverter.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/MyTimestampConverter.java
@@ -1,6 +1,6 @@
-package de.greenrobot.daotest.customtype;
+package org.greenrobot.greendao.daotest.customtype;
 
-import de.greenrobot.dao.converter.PropertyConverter;
+import org.greenrobot.greendao.converter.PropertyConverter;
 
 public class MyTimestampConverter implements PropertyConverter<MyTimestamp, Long> {
     @Override
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityNotNullHelper.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/entity/SimpleEntityNotNullHelper.java
similarity index 88%
rename from DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityNotNullHelper.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/entity/SimpleEntityNotNullHelper.java
index 54f2b3c6..44925452 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityNotNullHelper.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/entity/SimpleEntityNotNullHelper.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,13 +11,13 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.entity;
 
-import de.greenrobot.daotest.SimpleEntityNotNull;
+package org.greenrobot.greendao.daotest.entity;
+
+import org.greenrobot.greendao.daotest.SimpleEntityNotNull;
 
 
 public class SimpleEntityNotNullHelper {
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/KeepEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/KeepEntity.java
similarity index 85%
rename from DaoTest/src-gen/de/greenrobot/daotest2/KeepEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/KeepEntity.java
index 5d575211..15dfe468 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/KeepEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/KeepEntity.java
@@ -1,24 +1,31 @@
-package de.greenrobot.daotest2;
+package org.greenrobot.greendao.daotest2;
+
+import org.greenrobot.greendao.annotation.*;
 
 // THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
 
 // KEEP INCLUDES - put your custom includes here
 import android.os.Build;
 // KEEP INCLUDES END
+
 /**
  * Entity mapped to table "KEEP_ENTITY".
  */
+@Entity
 public class KeepEntity {
 
+    @Id
     private Long id;
 
     // KEEP FIELDS - put your custom fields here
     String extra = Build.VERSION.SDK;
     // KEEP FIELDS END
 
+    @Generated
     public KeepEntity() {
     }
 
+    @Generated
     public KeepEntity(Long id) {
         this.id = id;
     }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/ToManyTarget2.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/ToManyTarget2.java
similarity index 86%
rename from DaoTest/src-gen/de/greenrobot/daotest2/ToManyTarget2.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/ToManyTarget2.java
index 3fa8bcd0..c7e83cc4 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/ToManyTarget2.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/ToManyTarget2.java
@@ -1,20 +1,26 @@
-package de.greenrobot.daotest2;
+package org.greenrobot.greendao.daotest2;
+
+import org.greenrobot.greendao.annotation.*;
 
 // THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
 
 // KEEP INCLUDES - put your custom includes here
 // KEEP INCLUDES END
+
 /**
  * Entity mapped to table "TO_MANY_TARGET2".
  */
+@Entity
 public class ToManyTarget2 {
 
+    @Id
     private Long id;
     private Long fkId;
 
     // KEEP FIELDS - put your custom fields here
     // KEEP FIELDS END
 
+    @Generated
     public ToManyTarget2() {
     }
 
@@ -22,6 +28,7 @@ public ToManyTarget2(Long id) {
         this.id = id;
     }
 
+    @Generated
     public ToManyTarget2(Long id, Long fkId) {
         this.id = id;
         this.fkId = fkId;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/DaoMaster.java
similarity index 58%
rename from DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/DaoMaster.java
index 699914c8..b1fffd32 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/DaoMaster.java
@@ -1,82 +1,107 @@
-package de.greenrobot.daotest2.dao;
+package org.greenrobot.greendao.daotest2.dao;
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteDatabase.CursorFactory;
-import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
-import de.greenrobot.dao.AbstractDaoMaster;
-import de.greenrobot.dao.identityscope.IdentityScopeType;
 
-import de.greenrobot.daotest2.dao.KeepEntityDao;
-import de.greenrobot.daotest2.dao.ToManyTarget2Dao;
-import de.greenrobot.daotest2.to1_specialdao.ToOneTarget2Dao;
-import de.greenrobot.daotest2.specialdao.RelationSource2Dao;
+import org.greenrobot.greendao.AbstractDaoMaster;
+import org.greenrobot.greendao.database.StandardDatabase;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseOpenHelper;
+import org.greenrobot.greendao.identityscope.IdentityScopeType;
+
+import org.greenrobot.greendao.daotest2.to1_specialdao.ToOneTarget2Dao;
+import org.greenrobot.greendao.daotest2.specialdao.RelationSource2Dao;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
+/**
  * Master of DAO (schema version 1): knows all DAOs.
-*/
+ */
 public class DaoMaster extends AbstractDaoMaster {
     public static final int SCHEMA_VERSION = 1;
 
     /** Creates underlying database table using DAOs. */
-    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createAllTables(Database db, boolean ifNotExists) {
         KeepEntityDao.createTable(db, ifNotExists);
         ToManyTarget2Dao.createTable(db, ifNotExists);
         ToOneTarget2Dao.createTable(db, ifNotExists);
         RelationSource2Dao.createTable(db, ifNotExists);
     }
-    
+
     /** Drops underlying database table using DAOs. */
-    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
+    public static void dropAllTables(Database db, boolean ifExists) {
         KeepEntityDao.dropTable(db, ifExists);
         ToManyTarget2Dao.dropTable(db, ifExists);
         ToOneTarget2Dao.dropTable(db, ifExists);
         RelationSource2Dao.dropTable(db, ifExists);
     }
-    
-    public static abstract class OpenHelper extends SQLiteOpenHelper {
+
+    /**
+     * WARNING: Drops all table on Upgrade! Use only during development.
+     * Convenience method using a {@link DevOpenHelper}.
+     */
+    public static DaoSession newDevSession(Context context, String name) {
+        Database db = new DevOpenHelper(context, name).getWritableDb();
+        DaoMaster daoMaster = new DaoMaster(db);
+        return daoMaster.newSession();
+    }
+
+    public DaoMaster(SQLiteDatabase db) {
+        this(new StandardDatabase(db));
+    }
+
+    public DaoMaster(Database db) {
+        super(db, SCHEMA_VERSION);
+        registerDaoClass(KeepEntityDao.class);
+        registerDaoClass(ToManyTarget2Dao.class);
+        registerDaoClass(ToOneTarget2Dao.class);
+        registerDaoClass(RelationSource2Dao.class);
+    }
+
+    public DaoSession newSession() {
+        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
+    }
+
+    public DaoSession newSession(IdentityScopeType type) {
+        return new DaoSession(db, type, daoConfigMap);
+    }
+
+    /**
+     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
+     */
+    public static abstract class OpenHelper extends DatabaseOpenHelper {
+        public OpenHelper(Context context, String name) {
+            super(context, name, SCHEMA_VERSION);
+        }
 
         public OpenHelper(Context context, String name, CursorFactory factory) {
             super(context, name, factory, SCHEMA_VERSION);
         }
 
         @Override
-        public void onCreate(SQLiteDatabase db) {
+        public void onCreate(Database db) {
             Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
             createAllTables(db, false);
         }
     }
-    
+
     /** WARNING: Drops all table on Upgrade! Use only during development. */
     public static class DevOpenHelper extends OpenHelper {
+        public DevOpenHelper(Context context, String name) {
+            super(context, name);
+        }
+
         public DevOpenHelper(Context context, String name, CursorFactory factory) {
             super(context, name, factory);
         }
 
         @Override
-        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        public void onUpgrade(Database db, int oldVersion, int newVersion) {
             Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
             dropAllTables(db, true);
             onCreate(db);
         }
     }
 
-    public DaoMaster(SQLiteDatabase db) {
-        super(db, SCHEMA_VERSION);
-        registerDaoClass(KeepEntityDao.class);
-        registerDaoClass(ToManyTarget2Dao.class);
-        registerDaoClass(ToOneTarget2Dao.class);
-        registerDaoClass(RelationSource2Dao.class);
-    }
-    
-    public DaoSession newSession() {
-        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
-    }
-    
-    public DaoSession newSession(IdentityScopeType type) {
-        return new DaoSession(db, type, daoConfigMap);
-    }
-    
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoSession.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/DaoSession.java
similarity index 64%
rename from DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoSession.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/DaoSession.java
index ecd6983b..037f352b 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoSession.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/DaoSession.java
@@ -1,30 +1,29 @@
-package de.greenrobot.daotest2.dao;
-
-import android.database.sqlite.SQLiteDatabase;
+package org.greenrobot.greendao.daotest2.dao;
 
 import java.util.Map;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.AbstractDaoSession;
-import de.greenrobot.dao.identityscope.IdentityScopeType;
-import de.greenrobot.dao.internal.DaoConfig;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.AbstractDaoSession;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.identityscope.IdentityScopeType;
+import org.greenrobot.greendao.internal.DaoConfig;
 
-import de.greenrobot.daotest2.KeepEntity;
-import de.greenrobot.daotest2.ToManyTarget2;
-import de.greenrobot.daotest2.to1_specialentity.ToOneTarget2;
-import de.greenrobot.daotest2.specialentity.RelationSource2;
+import org.greenrobot.greendao.daotest2.KeepEntity;
+import org.greenrobot.greendao.daotest2.ToManyTarget2;
+import org.greenrobot.greendao.daotest2.to1_specialentity.ToOneTarget2;
+import org.greenrobot.greendao.daotest2.specialentity.RelationSource2;
 
-import de.greenrobot.daotest2.dao.KeepEntityDao;
-import de.greenrobot.daotest2.dao.ToManyTarget2Dao;
-import de.greenrobot.daotest2.to1_specialdao.ToOneTarget2Dao;
-import de.greenrobot.daotest2.specialdao.RelationSource2Dao;
+import org.greenrobot.greendao.daotest2.dao.KeepEntityDao;
+import org.greenrobot.greendao.daotest2.dao.ToManyTarget2Dao;
+import org.greenrobot.greendao.daotest2.to1_specialdao.ToOneTarget2Dao;
+import org.greenrobot.greendao.daotest2.specialdao.RelationSource2Dao;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 
 /**
  * {@inheritDoc}
  * 
- * @see de.greenrobot.dao.AbstractDaoSession
+ * @see org.greenrobot.greendao.AbstractDaoSession
  */
 public class DaoSession extends AbstractDaoSession {
 
@@ -38,7 +37,7 @@
     private final ToOneTarget2Dao toOneTarget2Dao;
     private final RelationSource2Dao relationSource2Dao;
 
-    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
+    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
         super(db);
 
@@ -66,10 +65,10 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
     }
     
     public void clear() {
-        keepEntityDaoConfig.getIdentityScope().clear();
-        toManyTarget2DaoConfig.getIdentityScope().clear();
-        toOneTarget2DaoConfig.getIdentityScope().clear();
-        relationSource2DaoConfig.getIdentityScope().clear();
+        keepEntityDaoConfig.clearIdentityScope();
+        toManyTarget2DaoConfig.clearIdentityScope();
+        toOneTarget2DaoConfig.clearIdentityScope();
+        relationSource2DaoConfig.clearIdentityScope();
     }
 
     public KeepEntityDao getKeepEntityDao() {
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/KeepEntityDao.java
similarity index 67%
rename from DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/KeepEntityDao.java
index c3d748f0..92cc7fe5 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/KeepEntityDao.java
@@ -1,14 +1,15 @@
-package de.greenrobot.daotest2.dao;
+package org.greenrobot.greendao.daotest2.dao;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
-import de.greenrobot.daotest2.KeepEntity;
+import org.greenrobot.greendao.daotest2.KeepEntity;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -21,10 +22,10 @@
     /**
      * Properties of entity KeepEntity.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-    };
+    }
 
 
     public KeepEntityDao(DaoConfig config) {
@@ -36,21 +37,30 @@ public KeepEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"KEEP_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY );"); // 0: id
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KEEP_ENTITY\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, KeepEntity entity) {
+    protected final void bindValues(DatabaseStatement stmt, KeepEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, KeepEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -59,13 +69,11 @@ protected void bindValues(SQLiteStatement stmt, KeepEntity entity) {
         }
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public KeepEntity readEntity(Cursor cursor, int offset) {
         KeepEntity entity = new KeepEntity( //
@@ -74,20 +82,17 @@ public KeepEntity readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, KeepEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(KeepEntity entity, long rowId) {
+    protected final Long updateKeyAfterInsert(KeepEntity entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(KeepEntity entity) {
         if(entity != null) {
@@ -97,9 +102,13 @@ public Long getKey(KeepEntity entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(KeepEntity entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/ToManyTarget2Dao.java
similarity index 72%
rename from DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/ToManyTarget2Dao.java
index 9370a884..c9f82bba 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/ToManyTarget2Dao.java
@@ -1,17 +1,18 @@
-package de.greenrobot.daotest2.dao;
+package org.greenrobot.greendao.daotest2.dao;
 
 import java.util.List;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.query.QueryBuilder;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.query.QueryBuilder;
 
-import de.greenrobot.daotest2.ToManyTarget2;
+import org.greenrobot.greendao.daotest2.ToManyTarget2;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -24,11 +25,11 @@
     /**
      * Properties of entity ToManyTarget2.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property FkId = new Property(1, Long.class, "fkId", false, "FK_ID");
-    };
+    }
 
     private Query<ToManyTarget2> relationSource2_ToManyTarget2ListQuery;
 
@@ -41,7 +42,7 @@ public ToManyTarget2Dao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"TO_MANY_TARGET2\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -49,14 +50,28 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TO_MANY_TARGET2\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ToManyTarget2 entity) {
+    protected final void bindValues(DatabaseStatement stmt, ToManyTarget2 entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        Long fkId = entity.getFkId();
+        if (fkId != null) {
+            stmt.bindLong(2, fkId);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, ToManyTarget2 entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -70,13 +85,11 @@ protected void bindValues(SQLiteStatement stmt, ToManyTarget2 entity) {
         }
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public ToManyTarget2 readEntity(Cursor cursor, int offset) {
         ToManyTarget2 entity = new ToManyTarget2( //
@@ -86,21 +99,18 @@ public ToManyTarget2 readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, ToManyTarget2 entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
         entity.setFkId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(ToManyTarget2 entity, long rowId) {
+    protected final Long updateKeyAfterInsert(ToManyTarget2 entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(ToManyTarget2 entity) {
         if(entity != null) {
@@ -110,9 +120,13 @@ public Long getKey(ToManyTarget2 entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(ToManyTarget2 entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialdao/RelationSource2Dao.java
similarity index 80%
rename from DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialdao/RelationSource2Dao.java
index ea61e43a..97f0e287 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialdao/RelationSource2Dao.java
@@ -1,21 +1,22 @@
-package de.greenrobot.daotest2.specialdao;
+package org.greenrobot.greendao.daotest2.specialdao;
 
 import java.util.List;
 import java.util.ArrayList;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.SqlUtils;
-import de.greenrobot.dao.internal.DaoConfig;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.SqlUtils;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
-import de.greenrobot.daotest2.dao.DaoSession;
+import org.greenrobot.greendao.daotest2.dao.DaoSession;
 
-import de.greenrobot.daotest2.to1_specialentity.ToOneTarget2;
+import org.greenrobot.greendao.daotest2.to1_specialentity.ToOneTarget2;
 
-import de.greenrobot.daotest2.specialentity.RelationSource2;
+import org.greenrobot.greendao.daotest2.specialentity.RelationSource2;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -28,11 +29,11 @@
     /**
      * Properties of entity RelationSource2.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property ToOneId = new Property(1, Long.class, "toOneId", false, "TO_ONE_ID");
-    };
+    }
 
     private DaoSession daoSession;
 
@@ -47,7 +48,7 @@ public RelationSource2Dao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"RELATION_SOURCE2\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -55,14 +56,13 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RELATION_SOURCE2\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, RelationSource2 entity) {
+    protected final void bindValues(DatabaseStatement stmt, RelationSource2 entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -77,18 +77,31 @@ protected void bindValues(SQLiteStatement stmt, RelationSource2 entity) {
     }
 
     @Override
-    protected void attachEntity(RelationSource2 entity) {
+    protected final void bindValues(SQLiteStatement stmt, RelationSource2 entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        Long toOneId = entity.getToOneId();
+        if (toOneId != null) {
+            stmt.bindLong(2, toOneId);
+        }
+    }
+
+    @Override
+    protected final void attachEntity(RelationSource2 entity) {
         super.attachEntity(entity);
         entity.__setDaoSession(daoSession);
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public RelationSource2 readEntity(Cursor cursor, int offset) {
         RelationSource2 entity = new RelationSource2( //
@@ -98,21 +111,18 @@ public RelationSource2 readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, RelationSource2 entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
         entity.setToOneId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(RelationSource2 entity, long rowId) {
+    protected final Long updateKeyAfterInsert(RelationSource2 entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(RelationSource2 entity) {
         if(entity != null) {
@@ -122,9 +132,13 @@ public Long getKey(RelationSource2 entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(RelationSource2 entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/specialentity/RelationSource2.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialentity/RelationSource2.java
similarity index 67%
rename from DaoTest/src-gen/de/greenrobot/daotest2/specialentity/RelationSource2.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialentity/RelationSource2.java
index 1eb7e599..4eceae9d 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/specialentity/RelationSource2.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialentity/RelationSource2.java
@@ -1,41 +1,55 @@
-package de.greenrobot.daotest2.specialentity;
+package org.greenrobot.greendao.daotest2.specialentity;
+
+import org.greenrobot.greendao.annotation.*;
 
 import java.util.List;
-import de.greenrobot.daotest2.dao.DaoSession;
-import de.greenrobot.dao.DaoException;
+import org.greenrobot.greendao.daotest2.dao.DaoSession;
+import org.greenrobot.greendao.DaoException;
 
-import de.greenrobot.daotest2.ToManyTarget2;
-import de.greenrobot.daotest2.dao.ToManyTarget2Dao;
-import de.greenrobot.daotest2.specialdao.RelationSource2Dao;
-import de.greenrobot.daotest2.to1_specialdao.ToOneTarget2Dao;
-import de.greenrobot.daotest2.to1_specialentity.ToOneTarget2;
+import org.greenrobot.greendao.daotest2.ToManyTarget2;
+import org.greenrobot.greendao.daotest2.dao.ToManyTarget2Dao;
+import org.greenrobot.greendao.daotest2.specialdao.RelationSource2Dao;
+import org.greenrobot.greendao.daotest2.to1_specialdao.ToOneTarget2Dao;
+import org.greenrobot.greendao.daotest2.to1_specialentity.ToOneTarget2;
 
 // THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
 
 // KEEP INCLUDES - put your custom includes here
 // KEEP INCLUDES END
+
 /**
  * Entity mapped to table "RELATION_SOURCE2".
  */
+@Entity(active = true)
 public class RelationSource2 {
 
+    @Id
     private Long id;
     private Long toOneId;
 
     /** Used to resolve relations */
+    @Generated
     private transient DaoSession daoSession;
 
     /** Used for active entity operations. */
+    @Generated
     private transient RelationSource2Dao myDao;
 
+    @ToOne(joinProperty = "toOneId")
     private ToOneTarget2 toOneTarget2;
-    private Long toOneTarget2__resolvedKey;
 
+    @Generated
+    private transient Long toOneTarget2__resolvedKey;
+
+    @ToMany(joinProperties = {
+        @JoinProperty(name = "id", referencedName = "fkId")
+    })
     private List<ToManyTarget2> toManyTarget2List;
 
     // KEEP FIELDS - put your custom fields here
     // KEEP FIELDS END
 
+    @Generated
     public RelationSource2() {
     }
 
@@ -43,12 +57,14 @@ public RelationSource2(Long id) {
         this.id = id;
     }
 
+    @Generated
     public RelationSource2(Long id, Long toOneId) {
         this.id = id;
         this.toOneId = toOneId;
     }
 
     /** called by internal mechanisms, do not call yourself. */
+    @Generated
     public void __setDaoSession(DaoSession daoSession) {
         this.daoSession = daoSession;
         myDao = daoSession != null ? daoSession.getRelationSource2Dao() : null;
@@ -71,12 +87,11 @@ public void setToOneId(Long toOneId) {
     }
 
     /** To-one relationship, resolved on first access. */
+    @Generated
     public ToOneTarget2 getToOneTarget2() {
         Long __key = this.toOneId;
         if (toOneTarget2__resolvedKey == null || !toOneTarget2__resolvedKey.equals(__key)) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
+            __throwIfDetached();
             ToOneTarget2Dao targetDao = daoSession.getToOneTarget2Dao();
             ToOneTarget2 toOneTarget2New = targetDao.load(__key);
             synchronized (this) {
@@ -87,6 +102,7 @@ public ToOneTarget2 getToOneTarget2() {
         return toOneTarget2;
     }
 
+    @Generated
     public void setToOneTarget2(ToOneTarget2 toOneTarget2) {
         synchronized (this) {
             this.toOneTarget2 = toOneTarget2;
@@ -96,11 +112,10 @@ public void setToOneTarget2(ToOneTarget2 toOneTarget2) {
     }
 
     /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
+    @Generated
     public List<ToManyTarget2> getToManyTarget2List() {
         if (toManyTarget2List == null) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
+            __throwIfDetached();
             ToManyTarget2Dao targetDao = daoSession.getToManyTarget2Dao();
             List<ToManyTarget2> toManyTarget2ListNew = targetDao._queryRelationSource2_ToManyTarget2List(id);
             synchronized (this) {
@@ -113,32 +128,46 @@ public void setToOneTarget2(ToOneTarget2 toOneTarget2) {
     }
 
     /** Resets a to-many relationship, making the next get call to query for a fresh result. */
+    @Generated
     public synchronized void resetToManyTarget2List() {
         toManyTarget2List = null;
     }
 
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void delete() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
+        __throwIfDetached();
         myDao.delete(this);
     }
 
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void update() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
+        __throwIfDetached();
         myDao.update(this);
     }
 
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    /**
+    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
+    * Entity must attached to an entity context.
+    */
+    @Generated
     public void refresh() {
+        __throwIfDetached();
+        myDao.refresh(this);
+    }
+
+    @Generated
+    private void __throwIfDetached() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.refresh(this);
+        }
     }
 
     // KEEP METHODS - put your custom methods here
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialdao/ToOneTarget2Dao.java
similarity index 65%
rename from DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialdao/ToOneTarget2Dao.java
index 9048acb9..eaa1cd74 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialdao/ToOneTarget2Dao.java
@@ -1,16 +1,17 @@
-package de.greenrobot.daotest2.to1_specialdao;
+package org.greenrobot.greendao.daotest2.to1_specialdao;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.internal.DaoConfig;
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.database.DatabaseStatement;
 
-import de.greenrobot.daotest2.dao.DaoSession;
+import org.greenrobot.greendao.daotest2.dao.DaoSession;
 
-import de.greenrobot.daotest2.to1_specialentity.ToOneTarget2;
+import org.greenrobot.greendao.daotest2.to1_specialentity.ToOneTarget2;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -23,10 +24,10 @@
     /**
      * Properties of entity ToOneTarget2.<br/>
      * Can be used for QueryBuilder and for referencing column names.
-    */
+     */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-    };
+    }
 
 
     public ToOneTarget2Dao(DaoConfig config) {
@@ -38,21 +39,30 @@ public ToOneTarget2Dao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"TO_ONE_TARGET2\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY );"); // 0: id
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TO_ONE_TARGET2\"";
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ToOneTarget2 entity) {
+    protected final void bindValues(DatabaseStatement stmt, ToOneTarget2 entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+    }
+
+    @Override
+    protected final void bindValues(SQLiteStatement stmt, ToOneTarget2 entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
@@ -61,13 +71,11 @@ protected void bindValues(SQLiteStatement stmt, ToOneTarget2 entity) {
         }
     }
 
-    /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
         return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
     @Override
     public ToOneTarget2 readEntity(Cursor cursor, int offset) {
         ToOneTarget2 entity = new ToOneTarget2( //
@@ -76,20 +84,17 @@ public ToOneTarget2 readEntity(Cursor cursor, int offset) {
         return entity;
     }
      
-    /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, ToOneTarget2 entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
      }
     
-    /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(ToOneTarget2 entity, long rowId) {
+    protected final Long updateKeyAfterInsert(ToOneTarget2 entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
-    /** @inheritdoc */
     @Override
     public Long getKey(ToOneTarget2 entity) {
         if(entity != null) {
@@ -99,9 +104,13 @@ public Long getKey(ToOneTarget2 entity) {
         }
     }
 
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
+    @Override
+    public boolean hasKey(ToOneTarget2 entity) {
+        return entity.getId() != null;
+    }
+
+    @Override
+    protected final boolean isEntityUpdateable() {
         return true;
     }
     
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialentity/ToOneTarget2.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialentity/ToOneTarget2.java
similarity index 80%
rename from DaoTest/src-gen/de/greenrobot/daotest2/to1_specialentity/ToOneTarget2.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialentity/ToOneTarget2.java
index 12fae8d7..25ce358f 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialentity/ToOneTarget2.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialentity/ToOneTarget2.java
@@ -1,22 +1,29 @@
-package de.greenrobot.daotest2.to1_specialentity;
+package org.greenrobot.greendao.daotest2.to1_specialentity;
+
+import org.greenrobot.greendao.annotation.*;
 
 // THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
 
 // KEEP INCLUDES - put your custom includes here
 // KEEP INCLUDES END
+
 /**
  * Entity mapped to table "TO_ONE_TARGET2".
  */
+@Entity
 public class ToOneTarget2 {
 
+    @Id
     private Long id;
 
     // KEEP FIELDS - put your custom fields here
     // KEEP FIELDS END
 
+    @Generated
     public ToOneTarget2() {
     }
 
+    @Generated
     public ToOneTarget2(Long id) {
         this.id = id;
     }
diff --git a/DaoExample/build.gradle b/tests/DaoTestEntityAnnotation/build.gradle
similarity index 62%
rename from DaoExample/build.gradle
rename to tests/DaoTestEntityAnnotation/build.gradle
index aea03174..933f8ca0 100644
--- a/DaoExample/build.gradle
+++ b/tests/DaoTestEntityAnnotation/build.gradle
@@ -1,29 +1,28 @@
 buildscript {
     repositories {
+        jcenter()
+        google()
         mavenCentral()
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
+        classpath dep.androidPlugin
+        classpath dep.greendaoPlugin
     }
 }
 
+apply plugin: 'org.greenrobot.greendao'
 apply plugin: 'com.android.application'
 
-repositories {
-    mavenCentral()
-}
-
 android {
-    buildToolsVersion rootProject.ext.buildToolsVersion
     compileSdkVersion rootProject.ext.compileSdkVersion
 
     defaultConfig {
-        applicationId "de.greenrobot.daoexample"
+        applicationId "org.greenrobot.greendao.test.entityannotation"
         minSdkVersion rootProject.ext.minSdkVersion
         targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
-        versionName "1.3.0"
+        versionName "1.0.0"
 
         testInstrumentationRunner "android.test.InstrumentationTestRunner"
     }
@@ -35,6 +34,13 @@ android {
     }
 }
 
+greendao {
+    schemaVersion 1000
+    generateTests true
+}
+
 dependencies {
-    compile('de.greenrobot:greendao:2.0.0')
-}
\ No newline at end of file
+    implementation project(':DaoCore')
+}
+
+uploadArchives.enabled = false
\ No newline at end of file
diff --git a/DaoExample/src/androidTest/Java/de/greenrobot/daoexample/CustomerOrderTest.java b/tests/DaoTestEntityAnnotation/src/androidTest/java/org/greenrobot/greendao/test/entityannotation/CustomerOrderTest.java
similarity index 93%
rename from DaoExample/src/androidTest/Java/de/greenrobot/daoexample/CustomerOrderTest.java
rename to tests/DaoTestEntityAnnotation/src/androidTest/java/org/greenrobot/greendao/test/entityannotation/CustomerOrderTest.java
index e24eca48..5a182fd5 100644
--- a/DaoExample/src/androidTest/Java/de/greenrobot/daoexample/CustomerOrderTest.java
+++ b/tests/DaoTestEntityAnnotation/src/androidTest/java/org/greenrobot/greendao/test/entityannotation/CustomerOrderTest.java
@@ -1,11 +1,10 @@
-package de.greenrobot.daoexample;
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.test.AbstractDaoSessionTest;
 
 import java.util.Date;
 import java.util.List;
 
-import android.app.Application;
-import de.greenrobot.dao.test.AbstractDaoSessionTest;
-
 public class CustomerOrderTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
 
     public CustomerOrderTest() {
diff --git a/tests/DaoTestEntityAnnotation/src/androidTest/java/org/greenrobot/greendao/test/entityannotation/CustomerTest.java b/tests/DaoTestEntityAnnotation/src/androidTest/java/org/greenrobot/greendao/test/entityannotation/CustomerTest.java
new file mode 100644
index 00000000..b0bcd549
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/androidTest/java/org/greenrobot/greendao/test/entityannotation/CustomerTest.java
@@ -0,0 +1,22 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+
+import java.util.concurrent.atomic.AtomicLong;
+
+public class CustomerTest extends AbstractDaoTestLongPk<CustomerDao, Customer> {
+    private AtomicLong nameNumber = new AtomicLong();
+
+    public CustomerTest() {
+        super(CustomerDao.class);
+    }
+
+    @Override
+    protected Customer createEntity(Long key) {
+        Customer entity = new Customer();
+        entity.setId(key);
+        entity.setName("Ho " + nameNumber.incrementAndGet());
+        return entity;
+    }
+
+}
diff --git a/tests/DaoTestEntityAnnotation/src/androidTest/java/org/greenrobot/greendao/test/entityannotation/NotNullThingTest.java b/tests/DaoTestEntityAnnotation/src/androidTest/java/org/greenrobot/greendao/test/entityannotation/NotNullThingTest.java
new file mode 100644
index 00000000..b2ab60cc
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/androidTest/java/org/greenrobot/greendao/test/entityannotation/NotNullThingTest.java
@@ -0,0 +1,88 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+
+public class NotNullThingTest extends AbstractDaoTestLongPk<NotNullThingDao, NotNullThing> {
+
+    public NotNullThingTest() {
+        super(NotNullThingDao.class);
+    }
+
+    @Override
+    protected NotNullThing createEntity(Long key) {
+        NotNullThing thing = new NotNullThing();
+        thing.setId(key);
+        thing.setNotNullBoolean(true);
+        thing.setNotNullInteger(42);
+        thing.setNotNullWrappedBoolean(true);
+        thing.setNotNullWrappedInteger(42);
+        thing.setNullableBoolean(true);
+        thing.setNullableInteger(42);
+        thing.setNullableWrappedBoolean(true);
+        thing.setNullableWrappedInteger(42);
+        return thing;
+    }
+
+    public void testInsertNotNullProperties() {
+        NotNullThing thing = createEntity(1L);
+        thing.setNotNullWrappedBoolean(null);
+        thing.setNotNullWrappedInteger(null);
+        try {
+            dao.insert(thing);
+            fail();
+        } catch (NullPointerException ignored) {
+        }
+    }
+
+    public void testInsertNullableProperties() {
+        NotNullThing thing = createEntity(1L);
+        thing.setNullableWrappedBoolean(null);
+        thing.setNullableWrappedInteger(null);
+        dao.insert(thing);
+
+        loadAndAssertNullableProperties(thing);
+    }
+
+    public void testUpdateNotNullProperties() {
+        NotNullThing thing = insertEntity();
+
+        thing.setNotNullWrappedBoolean(null);
+        thing.setNotNullWrappedInteger(null);
+        try {
+            dao.update(thing);
+            fail();
+        } catch (NullPointerException ignored) {
+        }
+    }
+
+    public void testUpdateNullableProperties() {
+        NotNullThing thing = insertEntity();
+
+        thing.setNullableWrappedBoolean(null);
+        thing.setNullableWrappedInteger(null);
+        dao.update(thing);
+
+        loadAndAssertNullableProperties(thing);
+    }
+
+    private NotNullThing insertEntity() {
+        NotNullThing thing = createEntity(1L);
+        dao.insert(thing);
+        return thing;
+    }
+
+    private void loadAndAssertNullableProperties(NotNullThing thing) {
+        NotNullThing loaded = dao.load(thing.getId());
+        assertTrue(loaded.getNullableBoolean());
+        assertEquals(42, loaded.getNullableInteger());
+        assertTrue(loaded.getNotNullBoolean());
+        assertEquals(42, loaded.getNotNullInteger());
+
+        assertNull(loaded.getNullableWrappedBoolean());
+        assertNull(loaded.getNullableWrappedInteger());
+
+        assertNotNull(loaded.getNotNullWrappedBoolean());
+        assertNotNull(loaded.getNotNullWrappedInteger());
+    }
+
+}
diff --git a/tests/DaoTestEntityAnnotation/src/androidTest/java/org/greenrobot/greendao/test/entityannotation/OrderTest.java b/tests/DaoTestEntityAnnotation/src/androidTest/java/org/greenrobot/greendao/test/entityannotation/OrderTest.java
new file mode 100644
index 00000000..ea45cb50
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/androidTest/java/org/greenrobot/greendao/test/entityannotation/OrderTest.java
@@ -0,0 +1,19 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+
+public class OrderTest extends AbstractDaoTestLongPk<OrderDao, Order> {
+
+    public OrderTest() {
+        super(OrderDao.class);
+    }
+
+    @Override
+    protected Order createEntity(Long key) {
+        Order entity = new Order();
+        entity.setId(key);
+        entity.setCustomerId(1);
+        return entity;
+    }
+
+}
diff --git a/tests/DaoTestEntityAnnotation/src/androidTest/java/org/greenrobot/greendao/test/entityannotation/TypesInInnerClassTest.java b/tests/DaoTestEntityAnnotation/src/androidTest/java/org/greenrobot/greendao/test/entityannotation/TypesInInnerClassTest.java
new file mode 100644
index 00000000..cfad57ac
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/androidTest/java/org/greenrobot/greendao/test/entityannotation/TypesInInnerClassTest.java
@@ -0,0 +1,27 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+import org.greenrobot.greendao.test.entityannotation.TypesInInnerClass.MyInnerType;
+
+public class TypesInInnerClassTest extends AbstractDaoTestLongPk<TypesInInnerClassDao, TypesInInnerClass> {
+
+    public TypesInInnerClassTest() {
+        super(TypesInInnerClassDao.class);
+    }
+
+    @Override
+    protected TypesInInnerClass createEntity(Long key) {
+        TypesInInnerClass entity = new TypesInInnerClass();
+        entity.setId(key);
+        entity.setType(new MyInnerType("cafe"));
+        return entity;
+    }
+
+    public void testType() {
+        TypesInInnerClass entity = createEntity(1L);
+        dao.insert(entity);
+        TypesInInnerClass entity2 = dao.load(1L);
+        assertNotSame(entity, entity2);
+        assertEquals("cafe", entity2.getType().value);
+    }
+}
diff --git a/tests/DaoTestEntityAnnotation/src/main/AndroidManifest.xml b/tests/DaoTestEntityAnnotation/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..4994aa4f
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/main/AndroidManifest.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="org.greenrobot.greendao.test.entityannotation">
+
+    <application
+        android:label="greenDAO @Entity Test"
+        android:allowBackup="true">
+    </application>
+
+</manifest>
\ No newline at end of file
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/Customer.java b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Customer.java
similarity index 52%
rename from DaoExample/src/main/java/de/greenrobot/daoexample/Customer.java
rename to tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Customer.java
index 0198288d..ccebe62e 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/Customer.java
+++ b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Customer.java
@@ -1,27 +1,45 @@
-package de.greenrobot.daoexample;
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.annotation.Entity;
+import org.greenrobot.greendao.annotation.Generated;
+import org.greenrobot.greendao.annotation.Id;
+import org.greenrobot.greendao.annotation.JoinProperty;
+import org.greenrobot.greendao.annotation.NotNull;
+import org.greenrobot.greendao.annotation.OrderBy;
+import org.greenrobot.greendao.annotation.ToMany;
+import org.greenrobot.greendao.annotation.Unique;
 
 import java.util.List;
-import de.greenrobot.daoexample.DaoSession;
-import de.greenrobot.dao.DaoException;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "CUSTOMER".
  */
+@Entity(active = true)
 public class Customer {
 
+    @Id(autoincrement = true)
     private Long id;
-    /** Not-null value. */
+
+    @NotNull
+    @Unique
     private String name;
 
     /** Used to resolve relations */
+    @Generated(hash = 2040040024)
     private transient DaoSession daoSession;
 
     /** Used for active entity operations. */
+    @Generated(hash = 1697251196)
     private transient CustomerDao myDao;
 
+    @ToMany(joinProperties = {
+            @JoinProperty(name = "id", referencedName = "customerId")
+    })
+    @OrderBy("date ASC")
     private List<Order> orders;
 
+    @Generated(hash = 60841032)
     public Customer() {
     }
 
@@ -29,17 +47,12 @@ public Customer(Long id) {
         this.id = id;
     }
 
-    public Customer(Long id, String name) {
+    @Generated(hash = 969486800)
+    public Customer(Long id, @NotNull String name) {
         this.id = id;
         this.name = name;
     }
 
-    /** called by internal mechanisms, do not call yourself. */
-    public void __setDaoSession(DaoSession daoSession) {
-        this.daoSession = daoSession;
-        myDao = daoSession != null ? daoSession.getCustomerDao() : null;
-    }
-
     public Long getId() {
         return id;
     }
@@ -48,26 +61,31 @@ public void setId(Long id) {
         this.id = id;
     }
 
-    /** Not-null value. */
+    @NotNull
     public String getName() {
         return name;
     }
 
     /** Not-null value; ensure this value is available before it is saved to the database. */
-    public void setName(String name) {
+    public void setName(@NotNull String name) {
         this.name = name;
     }
 
-    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
+    /**
+     * To-many relationship, resolved on first access (and after reset).
+     * Changes to to-many relations are not persisted, make changes to the target entity.
+     */
+    @Generated(hash = 1084217201)
     public List<Order> getOrders() {
         if (orders == null) {
+            final DaoSession daoSession = this.daoSession;
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
             }
             OrderDao targetDao = daoSession.getOrderDao();
             List<Order> ordersNew = targetDao._queryCustomer_Orders(id);
             synchronized (this) {
-                if(orders == null) {
+                if (orders == null) {
                     orders = ordersNew;
                 }
             }
@@ -76,32 +94,52 @@ public void setName(String name) {
     }
 
     /** Resets a to-many relationship, making the next get call to query for a fresh result. */
+    @Generated(hash = 1446109810)
     public synchronized void resetOrders() {
         orders = null;
     }
 
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    /**
+     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
+     * Entity must attached to an entity context.
+     */
+    @Generated(hash = 128553479)
     public void delete() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.delete(this);
     }
 
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    /**
+     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
+     * Entity must attached to an entity context.
+     */
+    @Generated(hash = 713229351)
     public void update() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.update(this);
     }
 
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    /**
+     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
+     * Entity must attached to an entity context.
+     */
+    @Generated(hash = 1942392019)
     public void refresh() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.refresh(this);
     }
 
+    /** called by internal mechanisms, do not call yourself. */
+    @Generated(hash = 462117449)
+    public void __setDaoSession(DaoSession daoSession) {
+        this.daoSession = daoSession;
+        myDao = daoSession != null ? daoSession.getCustomerDao() : null;
+    }
+
 }
diff --git a/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/NotNullThing.java b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/NotNullThing.java
new file mode 100644
index 00000000..fbac30d4
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/NotNullThing.java
@@ -0,0 +1,121 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.annotation.Entity;
+import org.greenrobot.greendao.annotation.Generated;
+import org.greenrobot.greendao.annotation.Id;
+import org.greenrobot.greendao.annotation.NotNull;
+
+@Entity
+public class NotNullThing {
+
+    @Id
+    private Long id;
+
+    boolean nullableBoolean;
+    int nullableInteger;
+    Boolean nullableWrappedBoolean;
+    Integer nullableWrappedInteger;
+
+    @NotNull
+    boolean notNullBoolean;
+    @NotNull
+    int notNullInteger;
+    @NotNull
+    Boolean notNullWrappedBoolean;
+    @NotNull
+    Integer notNullWrappedInteger;
+
+    @Generated(hash = 1109392169)
+    public NotNullThing(Long id, boolean nullableBoolean, int nullableInteger,
+                        Boolean nullableWrappedBoolean, Integer nullableWrappedInteger,
+                        boolean notNullBoolean, int notNullInteger,
+                        @NotNull Boolean notNullWrappedBoolean,
+                        @NotNull Integer notNullWrappedInteger) {
+        this.id = id;
+        this.nullableBoolean = nullableBoolean;
+        this.nullableInteger = nullableInteger;
+        this.nullableWrappedBoolean = nullableWrappedBoolean;
+        this.nullableWrappedInteger = nullableWrappedInteger;
+        this.notNullBoolean = notNullBoolean;
+        this.notNullInteger = notNullInteger;
+        this.notNullWrappedBoolean = notNullWrappedBoolean;
+        this.notNullWrappedInteger = notNullWrappedInteger;
+    }
+
+    @Generated(hash = 521031743)
+    public NotNullThing() {
+    }
+
+    public Long getId() {
+        return this.id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public boolean getNullableBoolean() {
+        return this.nullableBoolean;
+    }
+
+    public void setNullableBoolean(boolean nullableBoolean) {
+        this.nullableBoolean = nullableBoolean;
+    }
+
+    public int getNullableInteger() {
+        return this.nullableInteger;
+    }
+
+    public void setNullableInteger(int nullableInteger) {
+        this.nullableInteger = nullableInteger;
+    }
+
+    public Boolean getNullableWrappedBoolean() {
+        return this.nullableWrappedBoolean;
+    }
+
+    public void setNullableWrappedBoolean(Boolean nullableWrappedBoolean) {
+        this.nullableWrappedBoolean = nullableWrappedBoolean;
+    }
+
+    public Integer getNullableWrappedInteger() {
+        return this.nullableWrappedInteger;
+    }
+
+    public void setNullableWrappedInteger(Integer nullableWrappedInteger) {
+        this.nullableWrappedInteger = nullableWrappedInteger;
+    }
+
+    public boolean getNotNullBoolean() {
+        return this.notNullBoolean;
+    }
+
+    public void setNotNullBoolean(boolean notNullBoolean) {
+        this.notNullBoolean = notNullBoolean;
+    }
+
+    public int getNotNullInteger() {
+        return this.notNullInteger;
+    }
+
+    public void setNotNullInteger(int notNullInteger) {
+        this.notNullInteger = notNullInteger;
+    }
+
+    public Boolean getNotNullWrappedBoolean() {
+        return this.notNullWrappedBoolean;
+    }
+
+    public void setNotNullWrappedBoolean(Boolean notNullWrappedBoolean) {
+        this.notNullWrappedBoolean = notNullWrappedBoolean;
+    }
+
+    public Integer getNotNullWrappedInteger() {
+        return this.notNullWrappedInteger;
+    }
+
+    public void setNotNullWrappedInteger(Integer notNullWrappedInteger) {
+        this.notNullWrappedInteger = notNullWrappedInteger;
+    }
+
+}
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/Order.java b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Order.java
similarity index 60%
rename from DaoExample/src/main/java/de/greenrobot/daoexample/Order.java
rename to tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Order.java
index 49dcd4f3..0f29a9af 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/Order.java
+++ b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Order.java
@@ -1,28 +1,38 @@
-package de.greenrobot.daoexample;
+package org.greenrobot.greendao.test.entityannotation;
 
-import de.greenrobot.daoexample.DaoSession;
-import de.greenrobot.dao.DaoException;
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.annotation.Entity;
+import org.greenrobot.greendao.annotation.Generated;
+import org.greenrobot.greendao.annotation.Id;
+import org.greenrobot.greendao.annotation.NotNull;
+import org.greenrobot.greendao.annotation.ToOne;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "ORDERS".
  */
+@Entity(active = true, nameInDb = "ORDERS")
 public class Order {
 
+    @Id
     private Long id;
     private java.util.Date date;
     private long customerId;
 
     /** Used to resolve relations */
+    @Generated(hash = 2040040024)
     private transient DaoSession daoSession;
 
     /** Used for active entity operations. */
+    @Generated(hash = 949219203)
     private transient OrderDao myDao;
 
+    @ToOne(joinProperty = "customerId")
     private Customer customer;
-    private Long customer__resolvedKey;
 
+    @Generated(hash = 8592637)
+    private transient Long customer__resolvedKey;
 
+    @Generated(hash = 1105174599)
     public Order() {
     }
 
@@ -30,18 +40,13 @@ public Order(Long id) {
         this.id = id;
     }
 
+    @Generated(hash = 767587610)
     public Order(Long id, java.util.Date date, long customerId) {
         this.id = id;
         this.date = date;
         this.customerId = customerId;
     }
 
-    /** called by internal mechanisms, do not call yourself. */
-    public void __setDaoSession(DaoSession daoSession) {
-        this.daoSession = daoSession;
-        myDao = daoSession != null ? daoSession.getOrderDao() : null;
-    }
-
     public Long getId() {
         return id;
     }
@@ -67,9 +72,11 @@ public void setCustomerId(long customerId) {
     }
 
     /** To-one relationship, resolved on first access. */
+    @Generated(hash = 941511332)
     public Customer getCustomer() {
         long __key = this.customerId;
         if (customer__resolvedKey == null || !customer__resolvedKey.equals(__key)) {
+            final DaoSession daoSession = this.daoSession;
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
             }
@@ -77,15 +84,18 @@ public Customer getCustomer() {
             Customer customerNew = targetDao.load(__key);
             synchronized (this) {
                 customer = customerNew;
-            	customer__resolvedKey = __key;
+                customer__resolvedKey = __key;
             }
         }
         return customer;
     }
 
-    public void setCustomer(Customer customer) {
+    /** called by internal mechanisms, do not call yourself. */
+    @Generated(hash = 625323961)
+    public void setCustomer(@NotNull Customer customer) {
         if (customer == null) {
-            throw new DaoException("To-one property 'customerId' has not-null constraint; cannot set to-one to null");
+            throw new DaoException(
+                    "To-one property 'customerId' has not-null constraint; cannot set to-one to null");
         }
         synchronized (this) {
             this.customer = customer;
@@ -94,28 +104,49 @@ public void setCustomer(Customer customer) {
         }
     }
 
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    /**
+     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
+     * Entity must attached to an entity context.
+     */
+    @Generated(hash = 128553479)
     public void delete() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.delete(this);
     }
 
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    /**
+     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
+     * Entity must attached to an entity context.
+     */
+    @Generated(hash = 713229351)
     public void update() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.update(this);
     }
 
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+
+
+    /**
+     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
+     * Entity must attached to an entity context.
+     */
+    @Generated(hash = 1942392019)
     public void refresh() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.refresh(this);
     }
 
+    /** called by internal mechanisms, do not call yourself. */
+    @Generated(hash = 965731666)
+    public void __setDaoSession(DaoSession daoSession) {
+        this.daoSession = daoSession;
+        myDao = daoSession != null ? daoSession.getOrderDao() : null;
+    }
+
 }
diff --git a/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/TypesInInnerClass.java b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/TypesInInnerClass.java
new file mode 100644
index 00000000..7f146ec7
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/TypesInInnerClass.java
@@ -0,0 +1,65 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.annotation.Convert;
+import org.greenrobot.greendao.annotation.Entity;
+import org.greenrobot.greendao.annotation.Generated;
+import org.greenrobot.greendao.annotation.Id;
+import org.greenrobot.greendao.converter.PropertyConverter;
+
+@Entity
+public class TypesInInnerClass {
+    static class MyInnerType {
+
+        public MyInnerType(String value) {
+            this.value = value;
+        }
+
+        String value;
+    }
+
+    static class MyInnerTypeConverter implements PropertyConverter<MyInnerType, Long> {
+
+        @Override
+        public MyInnerType convertToEntityProperty(Long databaseValue) {
+            return databaseValue != null ? new MyInnerType(Long.toHexString(databaseValue)) : null;
+        }
+
+        @Override
+        public Long convertToDatabaseValue(MyInnerType entityProperty) {
+            return entityProperty != null ? Long.parseLong(entityProperty.value, 16) : null;
+        }
+    }
+
+    @Id
+    Long id;
+
+    @Convert(converter = MyInnerTypeConverter.class, columnType = Long.class)
+    TypesInInnerClass.MyInnerType type;
+
+    public MyInnerType getType() {
+        return this.type;
+    }
+
+    public void setType(MyInnerType type) {
+        this.type = type;
+    }
+
+    public Long getId() {
+        return this.id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    @Generated(hash = 582873426)
+    public TypesInInnerClass(Long id, TypesInInnerClass.MyInnerType type) {
+        this.id = id;
+        this.type = type;
+    }
+
+    @Generated(hash = 1754325029)
+    public TypesInInnerClass() {
+    }
+
+}
diff --git a/tests/DaoTestGenerator/build.gradle b/tests/DaoTestGenerator/build.gradle
new file mode 100644
index 00000000..cfdc0657
--- /dev/null
+++ b/tests/DaoTestGenerator/build.gradle
@@ -0,0 +1,19 @@
+apply plugin: 'java'
+apply plugin: 'application'
+
+// If your IDE fails to run generation (NoClassDefFoundError), run it using gradle
+mainClassName = "org.greenrobot.greendao.generator.gentest.TestDaoGenerator"
+
+sourceSets {
+    main {
+        java {
+            srcDir 'src'
+        }
+    }
+}
+
+dependencies {
+    compile project(':DaoGenerator')
+}
+
+uploadArchives.enabled = false
\ No newline at end of file
diff --git a/DaoTestGenerator/src/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java b/tests/DaoTestGenerator/src/org/greenrobot/greendao/generator/gentest/TestDaoGenerator.java
similarity index 86%
rename from DaoTestGenerator/src/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
rename to tests/DaoTestGenerator/src/org/greenrobot/greendao/generator/gentest/TestDaoGenerator.java
index f42d1d36..87f95f75 100644
--- a/DaoTestGenerator/src/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
+++ b/tests/DaoTestGenerator/src/org/greenrobot/greendao/generator/gentest/TestDaoGenerator.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,17 +11,18 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daogenerator.gentest;
 
-import de.greenrobot.daogenerator.DaoGenerator;
-import de.greenrobot.daogenerator.Entity;
-import de.greenrobot.daogenerator.Property;
-import de.greenrobot.daogenerator.Schema;
-import de.greenrobot.daogenerator.ToMany;
+package org.greenrobot.greendao.generator.gentest;
+
+import org.greenrobot.greendao.generator.DaoGenerator;
+import org.greenrobot.greendao.generator.Entity;
+import org.greenrobot.greendao.generator.Property;
+import org.greenrobot.greendao.generator.Schema;
+import org.greenrobot.greendao.generator.ToMany;
 
 /**
  * Generates test entities for test project DaoTest.
@@ -42,8 +43,8 @@ public static void main(String[] args) throws Exception {
     private final Schema schemaUnitTest;
 
     public TestDaoGenerator() {
-        schema = new Schema(1, "de.greenrobot.daotest");
-        schema.setDefaultJavaPackageTest("de.greenrobot.daotest.entity");
+        schema = new Schema(1, "org.greenrobot.greendao.daotest");
+        schema.setDefaultJavaPackageTest("org.greenrobot.greendao.daotest.entity");
 
         createSimple();
         createSimpleNotNull();
@@ -68,9 +69,9 @@ public TestDaoGenerator() {
 
     public void generate() throws Exception {
         DaoGenerator daoGenerator = new DaoGenerator();
-        daoGenerator.generateAll(schema, "../DaoTest/src-gen", null, "../DaoTest/src");
-        daoGenerator.generateAll(schema2, "../DaoTest/src-gen", null, "../DaoTest/src");
-        daoGenerator.generateAll(schemaUnitTest, "../DaoTest/src-unit-test", null, "../DaoTest/src-unit-test");
+        daoGenerator.generateAll(schema, "../DaoTestBase/src/main/java");
+        daoGenerator.generateAll(schema2, "../DaoTestBase/src/main/java");
+        daoGenerator.generateAll(schemaUnitTest, "../DaoTest/src/test/java");
     }
 
     protected void createSimple() {
@@ -192,7 +193,7 @@ protected Entity createDate() {
 
     protected void createSpecialNames() {
         Entity specialNamesEntity = schema.addEntity("SpecialNamesEntity");
-        specialNamesEntity.setTableName("ORDER TRANSACTION GROUP BY");
+        specialNamesEntity.setDbName("ORDER TRANSACTION GROUP BY");
         specialNamesEntity.addIdProperty();
         specialNamesEntity.addStringProperty("count");
         specialNamesEntity.addStringProperty("select");
@@ -250,11 +251,11 @@ protected void createAutoincrement() {
 
     protected void createSqliteMaster() {
         Entity entity = schema.addEntity("SqliteMaster");
-        entity.setSkipTableCreation(true);
+        entity.setSkipCreationInDb(true);
         entity.setHasKeepSections(true);
         entity.addStringProperty("type");
         entity.addStringProperty("name");
-        entity.addStringProperty("tableName").columnName("tbl_name");
+        entity.addStringProperty("tableName").dbName("tbl_name");
         entity.addLongProperty("rootpage");
         entity.addStringProperty("sql");
     }
@@ -262,8 +263,8 @@ protected void createSqliteMaster() {
     protected void createCustomType() {
         Entity entity = schema.addEntity("CustomTypeEntity");
         entity.addIdProperty();
-        entity.addLongProperty("myCustomTimestamp").customType("de.greenrobot.daotest.customtype.MyTimestamp",
-                "de.greenrobot.daotest.customtype.MyTimestampConverter");
+        entity.addLongProperty("myCustomTimestamp").customType("org.greenrobot.greendao.daotest.customtype.MyTimestamp",
+                "org.greenrobot.greendao.daotest.customtype.MyTimestampConverter");
     }
 
     protected void createIndexedString() {
@@ -273,9 +274,9 @@ protected void createIndexedString() {
     }
 
     private Schema createSchema2() {
-        Schema schema2 = new Schema(1, "de.greenrobot.daotest2");
-        schema2.setDefaultJavaPackageTest("de.greenrobot.daotest2.entity");
-        schema2.setDefaultJavaPackageDao("de.greenrobot.daotest2.dao");
+        Schema schema2 = new Schema(1, "org.greenrobot.greendao.daotest2");
+        schema2.setDefaultJavaPackageTest("org.greenrobot.greendao.daotest2.entity");
+        schema2.setDefaultJavaPackageDao("org.greenrobot.greendao.daotest2.dao");
         schema2.enableKeepSectionsByDefault();
 
         Entity keepEntity = schema2.addEntity("KeepEntity");
@@ -288,9 +289,9 @@ private Schema createSchema2() {
 
         Entity toOneTarget2 = schema2.addEntity("ToOneTarget2");
         toOneTarget2.addIdProperty();
-        toOneTarget2.setJavaPackage("de.greenrobot.daotest2.to1_specialentity");
-        toOneTarget2.setJavaPackageDao("de.greenrobot.daotest2.to1_specialdao");
-        toOneTarget2.setJavaPackageTest("de.greenrobot.daotest2.to1_specialtest");
+        toOneTarget2.setJavaPackage("org.greenrobot.greendao.daotest2.to1_specialentity");
+        toOneTarget2.setJavaPackageDao("org.greenrobot.greendao.daotest2.to1_specialdao");
+        toOneTarget2.setJavaPackageTest("org.greenrobot.greendao.daotest2.to1_specialtest");
         toOneTarget2.setSkipGenerationTest(true);
 
         Entity relationSource2 = schema2.addEntity("RelationSource2");
@@ -298,15 +299,15 @@ private Schema createSchema2() {
         relationSource2.addToMany(toManyTarget2, toManyTarget2FkId);
         Property toOneId = relationSource2.addLongProperty("toOneId").getProperty();
         relationSource2.addToOne(toOneTarget2, toOneId);
-        relationSource2.setJavaPackage("de.greenrobot.daotest2.specialentity");
-        relationSource2.setJavaPackageDao("de.greenrobot.daotest2.specialdao");
-        relationSource2.setJavaPackageTest("de.greenrobot.daotest2.specialtest");
+        relationSource2.setJavaPackage("org.greenrobot.greendao.daotest2.specialentity");
+        relationSource2.setJavaPackageDao("org.greenrobot.greendao.daotest2.specialdao");
+        relationSource2.setJavaPackageTest("org.greenrobot.greendao.daotest2.specialtest");
         relationSource2.setSkipGenerationTest(true);
         return schema2;
     }
 
     private Schema createSchemaUnitTest() {
-        Schema schema = new Schema(1, "de.greenrobot.dao.unittest");
+        Schema schema = new Schema(1, "org.greenrobot.greendao.unittest");
 
         Entity entity = schema.addEntity("MinimalEntity");
         entity.addIdProperty();
diff --git a/tests/DaoTestPerformance/build.gradle b/tests/DaoTestPerformance/build.gradle
new file mode 100644
index 00000000..c7e5ff8e
--- /dev/null
+++ b/tests/DaoTestPerformance/build.gradle
@@ -0,0 +1,36 @@
+buildscript {
+    repositories {
+        jcenter()
+        google()
+        mavenCentral()
+    }
+
+    dependencies {
+        classpath dep.androidPlugin
+    }
+}
+
+apply plugin: 'com.android.application'
+
+repositories {
+    maven {
+        url 'https://oss.sonatype.org/content/repositories/snapshots'
+    }
+}
+
+dependencies {
+    implementation project(':tests:DaoTestBase')
+    androidTestImplementation 'org.greenrobot:essentials:3.0.0-SNAPSHOT'
+}
+
+android {
+    compileSdkVersion rootProject.ext.compileSdkVersion
+
+    defaultConfig {
+        minSdkVersion 5
+        testApplicationId "org.greenrobot.greendao.perftest"
+        testInstrumentationRunner "android.test.InstrumentationTestRunner"
+    }
+}
+
+uploadArchives.enabled = false
diff --git a/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/Benchmark.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/Benchmark.java
new file mode 100644
index 00000000..87077698
--- /dev/null
+++ b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/Benchmark.java
@@ -0,0 +1,207 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.performance;
+
+import android.os.Build;
+import android.os.SystemClock;
+import android.util.Log;
+import android.util.Pair;
+
+import org.greenrobot.essentials.StringUtils;
+import org.greenrobot.essentials.io.FileUtils;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.List;
+
+public class Benchmark {
+    public static final String TAG = "Benchmark";
+
+    private final List<Pair<String, String>> fixedColumns = new ArrayList<>();
+    private final List<Pair<String, String>> values = new ArrayList<>();
+    private final File file;
+    private final SimpleDateFormat dateFormat;
+    private final char separator = '\t';
+
+    private String[] headers;
+    private boolean storeThreadTime;
+
+    private boolean started;
+    private long threadTimeMillis;
+    private long timeMillis;
+    private String name;
+    private int runs;
+    private int warmUpRuns;
+
+    public Benchmark(File file) {
+        this.file = file;
+        dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+        checkForLastHeader(file);
+    }
+
+    private void checkForLastHeader(File file) {
+        String contents = null;
+        try {
+            contents = FileUtils.readUtf8(file);
+        } catch (FileNotFoundException e) {
+            // OK
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+        if (contents == null) {
+            return;
+        }
+
+        String[] lines = StringUtils.split(contents, '\n');
+        for (int i = lines.length - 1; i >= 0; i--) {
+            String[] columnValues = StringUtils.split(lines[i], separator);
+            if (columnValues.length > 1) {
+                boolean longValueFound = false;
+                for (String value : columnValues) {
+                    try {
+                        Long.parseLong(value);
+                        longValueFound = true;
+                        break;
+                    } catch (NumberFormatException e) {
+                        // OK, header candidate
+                    }
+                }
+                if (!longValueFound) {
+                    headers = columnValues;
+                    break;
+                }
+            }
+        }
+    }
+
+    public Benchmark warmUpRuns(int warmUpRuns) {
+        this.warmUpRuns = warmUpRuns;
+        return this;
+    }
+
+    public Benchmark enableThreadTime() {
+        this.storeThreadTime = true;
+        return this;
+    }
+
+    public Benchmark disableThreadTime() {
+        this.storeThreadTime = false;
+        return this;
+    }
+
+    public Benchmark addFixedColumn(String key, String value) {
+        fixedColumns.add(new Pair<String, String>(key, value));
+        return this;
+    }
+
+    public Benchmark addFixedColumnDevice() {
+        addFixedColumn("device", Build.MODEL);
+        return this;
+    }
+
+    public void start(String name) {
+        if (started) {
+            throw new RuntimeException("Already started");
+        }
+        started = true;
+        prepareForNextRun();
+        if (values.isEmpty()) {
+            values.addAll(fixedColumns);
+            String startTime = dateFormat.format(new Date());
+            values.add(new Pair<>("time", startTime));
+        }
+        this.name = name;
+        threadTimeMillis = SystemClock.currentThreadTimeMillis();
+        timeMillis = SystemClock.elapsedRealtime();
+    }
+
+    /**
+     * Try to give GC some time to settle down.
+     */
+    public void prepareForNextRun() {
+        for (int i = 0; i < 5; i++) {
+            System.gc();
+            try {
+                Thread.sleep(20);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    public void stop() {
+        long time = SystemClock.elapsedRealtime() - timeMillis;
+        long timeThread = SystemClock.currentThreadTimeMillis() - threadTimeMillis;
+        if (!started) {
+            throw new RuntimeException("Not started");
+        }
+        started = false;
+
+        Log.d(TAG, name + ": " + time + " ms (thread: " + timeThread + " ms)");
+        values.add(new Pair<>(name, Long.toString(time)));
+        if (storeThreadTime) {
+            values.add(new Pair<>(name + "-thread", Long.toString(timeThread)));
+        }
+        name = null;
+    }
+
+    public void commit() {
+        runs++;
+        if (runs > warmUpRuns) {
+            Log.d(TAG, "Writing results for run " + runs);
+            String[] collectedHeaders = getAllFirsts(values);
+            if (!Arrays.equals(collectedHeaders, headers)) {
+                headers = collectedHeaders;
+                String line = StringUtils.join(headers, "" + separator) + '\n';
+                try {
+                    FileUtils.appendUtf8(file, line);
+                } catch (IOException e) {
+                    throw new RuntimeException("Could not write header in benchmark file", e);
+                }
+            }
+
+            StringBuilder line = new StringBuilder();
+            for (Pair<String, String> pair : values) {
+                line.append(pair.second).append(separator);
+            }
+            line.append('\n');
+            try {
+                FileUtils.appendUtf8(file, line);
+            } catch (IOException e) {
+                throw new RuntimeException("Could not write header in benchmark file", e);
+            }
+        } else {
+            Log.d(TAG, "Ignoring results for run " + runs + " (warm up)");
+        }
+        values.clear();
+    }
+
+    private String[] getAllFirsts(List<Pair<String, String>> columns) {
+        String[] firsts = new String[columns.size()];
+        for (int i = 0; i < firsts.length; i++) {
+            firsts[i] = columns.get(i).first;
+        }
+        return firsts;
+    }
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/IndexedStringPerformanceTest.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/IndexedStringPerformanceTest.java
similarity index 70%
rename from DaoTest/src/de/greenrobot/daotest/performance/IndexedStringPerformanceTest.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/IndexedStringPerformanceTest.java
index dfb30b63..00938d56 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/IndexedStringPerformanceTest.java
+++ b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/IndexedStringPerformanceTest.java
@@ -1,9 +1,27 @@
-package de.greenrobot.daotest.performance;
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.performance;
 
-import de.greenrobot.dao.DaoLog;
-import de.greenrobot.dao.test.AbstractDaoTest;
-import de.greenrobot.daotest.IndexedStringEntity;
-import de.greenrobot.daotest.IndexedStringEntityDao;
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.daotest.IndexedStringEntity;
+import org.greenrobot.greendao.daotest.IndexedStringEntityDao;
+import org.greenrobot.greendao.test.AbstractDaoTest;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/LoockupPerformanceTest.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/LoockupPerformanceTest.java
similarity index 93%
rename from DaoTest/src/de/greenrobot/daotest/performance/LoockupPerformanceTest.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/LoockupPerformanceTest.java
index 9b697d53..e44dcfd7 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/LoockupPerformanceTest.java
+++ b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/LoockupPerformanceTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,24 +11,25 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.performance;
+
+package org.greenrobot.greendao.performance;
+
+import junit.framework.TestCase;
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.internal.LongHashMap;
+import org.greenrobot.greendao.performance.target.LongHashMapAmarena2DZechner;
+import org.greenrobot.greendao.performance.target.LongHashMapJDBM;
+import org.greenrobot.greendao.performance.target.LongSparseArray;
 
 import java.util.Date;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Random;
 
-import junit.framework.TestCase;
-import de.greenrobot.dao.DaoLog;
-import de.greenrobot.dao.internal.LongHashMap;
-import de.greenrobot.daotest.performance.target.LongHashMapAmarena2DZechner;
-import de.greenrobot.daotest.performance.target.LongHashMapJDBM;
-import de.greenrobot.daotest.performance.target.LongSparseArray;
-
 public class LoockupPerformanceTest extends TestCase {
 
     Random random;
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTest.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTest.java
similarity index 57%
rename from DaoTest/src/de/greenrobot/daotest/performance/PerformanceTest.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTest.java
index e6dcbcf3..e5833225 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTest.java
+++ b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,65 +11,101 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.performance;
 
+package org.greenrobot.greendao.performance;
+
+import android.app.Application;
+import android.os.Debug;
+import android.os.Environment;
+
+import org.greenrobot.greendao.AbstractDao;
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.test.AbstractDaoTest;
+
+import java.io.File;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
 
-import android.os.Debug;
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoLog;
-import de.greenrobot.dao.test.AbstractDaoTest;
-
 public abstract class PerformanceTest<D extends AbstractDao<T, K>, T, K>
         extends AbstractDaoTest<D, T, K> {
+
     private static final int BATCH_SIZE = 10000;
-    private static final int RUNS = 8;
+    private static final int RUNS = 10;
 
-    long start;
-    private String traceName;
     boolean useTraceView = false;
+    private Benchmark benchmark;
+    private ArrayList<T> entities;
 
     public PerformanceTest(Class<D> daoClass) {
         super(daoClass, false);
     }
 
-    public void testPerformance() throws Exception {
-        // disabled for regular builds
-//        for (int i = 0; i < RUNS; i++) {
-//            runTests(BATCH_SIZE);
-//        }
-    }
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
 
-    protected void runTests(int entityCount) {
         DaoLog.d("####################");
-        DaoLog.d(getClass().getSimpleName() + ": " + entityCount + " entities on " + new Date());
+        DaoLog.d(getClass().getSimpleName() + ": " + BATCH_SIZE + " entities on " + new Date());
         DaoLog.d("####################");
         clearIdentityScopeIfAny();
 
-        List<T> list = new ArrayList<T>(entityCount);
-        for (int i = 0; i < entityCount; i++) {
-            list.add(createEntity());
+        entities = new ArrayList(BATCH_SIZE);
+        for (int i = 0; i < BATCH_SIZE; i++) {
+            entities.add(createEntity());
         }
-        System.gc();
 
         dao.deleteAll();
-        // runOneByOneTests(list, entityCount, entityCount / 10);
-        dao.deleteAll();
-        DaoLog.d("------------------------");
-        System.gc();
+    }
 
-        // runBatchTests(list);
+    // disable for regular builds
+    public void _testPerformanceOneByOne() throws Exception {
+        int count = BATCH_SIZE / 10;
+        File benchFile = getBenchFile("greendao-1by1-" + count + ".tsv");
+        benchmark = new Benchmark(benchFile);
+        benchmark.addFixedColumnDevice().warmUpRuns(2);
+        for (int i = 0; i < RUNS; i++) {
+            runOneByOneTests(entities, count, count);
 
-        startClock("delete-all");
-        dao.deleteAll();
-        stopClock();
-        System.gc();
+            startClock("delete-all");
+            dao.deleteAll();
+            stopClock();
+
+            benchmark.commit();
+        }
+    }
+
+    private File getBenchFile(String name) {
+        File dir = Environment.getExternalStorageDirectory();
+        File file = new File(dir, name);
+        if (dir == null || !dir.canWrite()) {
+            Application app = createApplication(Application.class);
+            File appFile = new File(app.getFilesDir(), name);
+            DaoLog.d("Using file " + appFile.getAbsolutePath() + ", (cannot write to " + file.getAbsolutePath() + ")");
+            file = appFile;
+        }
+        return file;
+    }
+
+    // disable for regular builds
+    public void testPerformanceBatch() throws Exception {
+        File benchFile = getBenchFile("greendao-batch-" + BATCH_SIZE + ".tsv");
+        benchmark = new Benchmark(benchFile);
+        benchmark.addFixedColumnDevice().warmUpRuns(2);
+
+        for (int i = 0; i < RUNS; i++) {
+            runBatchTests(entities);
+
+            startClock("delete-all");
+            dao.deleteAll();
+            stopClock();
+
+            benchmark.commit();
+        }
     }
 
     protected void runOneByOneTests(List<T> list, int loadCount, int modifyCount) {
@@ -79,35 +115,30 @@ protected void runOneByOneTests(List<T> list, int loadCount, int modifyCount) {
             keys.add(daoAccess.getKey(list.get(i)));
         }
         clearIdentityScopeIfAny();
-        System.gc();
 
         list = runLoadOneByOne(keys, "load-one-by-one-1");
         list = runLoadOneByOne(keys, "load-one-by-one-2");
         Debug.stopMethodTracing();
 
         dao.deleteAll();
-        System.gc();
 
         startClock("insert-one-by-one");
         for (int i = 0; i < modifyCount; i++) {
             dao.insert(list.get(i));
         }
-        stopClock(modifyCount + " entities");
-        System.gc();
+        stopClock();
 
         startClock("update-one-by-one");
         for (int i = 0; i < modifyCount; i++) {
             dao.update(list.get(i));
         }
-        stopClock(modifyCount + " entities");
-        System.gc();
+        stopClock();
 
         startClock("delete-one-by-one");
         for (int i = 0; i < modifyCount; i++) {
             dao.delete(list.get(i));
         }
-        stopClock(modifyCount + " entities");
-        System.gc();
+        stopClock();
     }
 
     protected List<T> runLoadOneByOne(List<K> keys, String traceName) {
@@ -116,14 +147,14 @@ protected void runOneByOneTests(List<T> list, int loadCount, int modifyCount) {
         for (K key : keys) {
             list.add(dao.load(key));
         }
-        stopClock(keys.size() + " entities");
+        stopClock();
         return list;
     }
 
     protected void runBatchTests(List<T> list) {
         startClock("insert");
         dao.insertInTx(list);
-        stopClock(list.size() + " entities");
+        stopClock();
 
         list = null;
         System.gc();
@@ -136,37 +167,28 @@ protected void runBatchTests(List<T> list) {
 
         startClock("update");
         dao.updateInTx(list);
-        stopClock(list.size() + " entities");
+        stopClock();
     }
 
     protected List<T> runLoadAll(String traceName) {
         startClock(traceName);
         List<T> list = dao.loadAll();
-        stopClock(list.size() + " entities");
+        stopClock();
         return list;
     }
 
-    protected void startClock(String traceName) {
-        System.gc();
-        this.traceName = traceName;
+    protected void startClock(String name) {
+        benchmark.start(name);
         if (useTraceView) {
-            Debug.startMethodTracing(traceName);
+            Debug.startMethodTracing(name);
         }
-        start = System.currentTimeMillis();
     }
 
     protected void stopClock() {
-        stopClock(null);
-    }
-
-    protected void stopClock(String extraInfoOrNull) {
-        long time = System.currentTimeMillis() - start;
-        String extraLog = extraInfoOrNull != null ? " (" + extraInfoOrNull + ")" : "";
-        DaoLog.d(traceName + " completed in " + time + " ms" + extraLog);
+        benchmark.stop();
         if (useTraceView) {
             Debug.stopMethodTracing();
         }
-        System.gc();
     }
 
     protected abstract T createEntity();
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTestNotNull.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTestNotNull.java
similarity index 83%
rename from DaoTest/src/de/greenrobot/daotest/performance/PerformanceTestNotNull.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTestNotNull.java
index 57986b0f..31ccebda 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTestNotNull.java
+++ b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTestNotNull.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,15 +11,17 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.performance;
 
-import de.greenrobot.daotest.SimpleEntityNotNull;
-import de.greenrobot.daotest.SimpleEntityNotNullDao;
-import de.greenrobot.daotest.entity.SimpleEntityNotNullHelper;
+package org.greenrobot.greendao.performance;
+
+import org.greenrobot.greendao.daotest.SimpleEntityNotNull;
+import org.greenrobot.greendao.daotest.SimpleEntityNotNullDao;
+import org.greenrobot.greendao.daotest.entity.SimpleEntityNotNullHelper;
+
 import java.util.List;
 
 public class PerformanceTestNotNull extends PerformanceTest<SimpleEntityNotNullDao, SimpleEntityNotNull, Long> {
@@ -51,7 +53,7 @@ protected void accessAll(List<SimpleEntityNotNull> list, String traceName) {
             entity.getSimpleString();
             entity.getSimpleByteArray();
         }
-        stopClock(list.size() + " entities");
+        stopClock();
     }
 
 }
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTestNotNullIdentityScope.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTestNotNullIdentityScope.java
similarity index 80%
rename from DaoTest/src/de/greenrobot/daotest/performance/PerformanceTestNotNullIdentityScope.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTestNotNullIdentityScope.java
index eabbb7c0..f74f840d 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTestNotNullIdentityScope.java
+++ b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTestNotNullIdentityScope.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,14 +11,15 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.performance;
 
-import de.greenrobot.dao.identityscope.IdentityScopeLong;
-import de.greenrobot.daotest.SimpleEntityNotNull;
+package org.greenrobot.greendao.performance;
+
+import org.greenrobot.greendao.daotest.SimpleEntityNotNull;
+import org.greenrobot.greendao.identityscope.IdentityScopeLong;
 
 public class PerformanceTestNotNullIdentityScope extends PerformanceTestNotNull {
 
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/ReflectionPerformanceTest.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/ReflectionPerformanceTest.java
similarity index 96%
rename from DaoTest/src/de/greenrobot/daotest/performance/ReflectionPerformanceTest.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/ReflectionPerformanceTest.java
index 6abddab2..e523b927 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/ReflectionPerformanceTest.java
+++ b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/ReflectionPerformanceTest.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,17 +11,18 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
-package de.greenrobot.daotest.performance;
+
+package org.greenrobot.greendao.performance;
+
+import org.greenrobot.greendao.DaoLog;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
-import de.greenrobot.dao.DaoLog;
-
 public class ReflectionPerformanceTest // extends TestCase
 {
 
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/StringGenerator.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/StringGenerator.java
similarity index 68%
rename from DaoTest/src/de/greenrobot/daotest/performance/StringGenerator.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/StringGenerator.java
index 3fd87902..bb59bef7 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/StringGenerator.java
+++ b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/StringGenerator.java
@@ -1,4 +1,22 @@
-package de.greenrobot.daotest.performance;
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.performance;
 
 import java.util.Random;
 
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/target/ArrayUtils.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/ArrayUtils.java
similarity index 81%
rename from DaoTest/src/de/greenrobot/daotest/performance/target/ArrayUtils.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/ArrayUtils.java
index 0168b463..53e9cdf5 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/target/ArrayUtils.java
+++ b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/ArrayUtils.java
@@ -1,23 +1,24 @@
 /*
- * Copyright (C) 2006 The Android Open Source Project
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
+ * This file is part of greenDAO Generator.
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
  *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package de.greenrobot.daotest.performance.target;
+package org.greenrobot.greendao.performance.target;
 
 import java.lang.reflect.Array;
-import java.util.Collection;
 
 // XXX these should be changed to reflect the actual memory allocator we use.
 // it looks like right now objects want to be powers of 2 minus 8
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/target/LongHashMapAmarena2DZechner.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongHashMapAmarena2DZechner.java
similarity index 88%
rename from DaoTest/src/de/greenrobot/daotest/performance/target/LongHashMapAmarena2DZechner.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongHashMapAmarena2DZechner.java
index 2979e9f9..af8a1dba 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/target/LongHashMapAmarena2DZechner.java
+++ b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongHashMapAmarena2DZechner.java
@@ -1,21 +1,26 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
- * License. You may obtain a copy of the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
- * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
- * governing permissions and limitations under the License.
- ******************************************************************************/
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
 
-package de.greenrobot.daotest.performance.target;
+package org.greenrobot.greendao.performance.target;
 
-import java.util.Iterator;
+import org.greenrobot.greendao.DaoLog;
 
-import de.greenrobot.dao.DaoLog;
+import java.util.Iterator;
 
 /**
  * An long to object hashmap, taken from Amarena2D (thanks Christoph :p).
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/target/LongHashMapJDBM.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongHashMapJDBM.java
similarity index 94%
rename from DaoTest/src/de/greenrobot/daotest/performance/target/LongHashMapJDBM.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongHashMapJDBM.java
index 3eeee1cb..621dc19b 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/target/LongHashMapJDBM.java
+++ b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongHashMapJDBM.java
@@ -1,21 +1,22 @@
 /*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * This file is part of greenDAO Generator.
  *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package de.greenrobot.daotest.performance.target;
+package org.greenrobot.greendao.performance.target;
 
 import java.io.Serializable;
 import java.util.Arrays;
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/target/LongSparseArray.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongSparseArray.java
similarity index 91%
rename from DaoTest/src/de/greenrobot/daotest/performance/target/LongSparseArray.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongSparseArray.java
index f515ad05..5e6d46e8 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/target/LongSparseArray.java
+++ b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongSparseArray.java
@@ -1,20 +1,22 @@
 /*
- * Copyright (C) 2009 The Android Open Source Project
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
+ * This file is part of greenDAO Generator.
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
  *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package de.greenrobot.daotest.performance.target;
+package org.greenrobot.greendao.performance.target;
 
 import android.util.Log;
 
diff --git a/tests/DaoTestPerformance/src/main/AndroidManifest.xml b/tests/DaoTestPerformance/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..adf832cb
--- /dev/null
+++ b/tests/DaoTestPerformance/src/main/AndroidManifest.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="org.greenrobot.daotest.dummyapp"
+    android:versionCode="1"
+    android:versionName="1.0" >
+
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+
+    <application>
+        <uses-library android:name="android.test.runner" />
+    </application>
+
+</manifest>
\ No newline at end of file
