diff --git a/DaoGenerator/src-template/dao-master.ftl b/DaoGenerator/src-template/dao-master.ftl
index 5dd12941..d30c557f 100644
--- a/DaoGenerator/src-template/dao-master.ftl
+++ b/DaoGenerator/src-template/dao-master.ftl
@@ -21,10 +21,8 @@ package ${schema.defaultJavaPackageDao};
 
 import java.sql.Connection;
 import java.sql.SQLException;
-import java.sql.ResultSet;
-
-import de.greenrobot.dao.internal.JDBCUtils;
 
+import de.greenrobot.dao.AbstractConnectionManager;
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
@@ -61,7 +59,7 @@ public class DaoMaster extends AbstractDaoMaster {
     public static abstract class ConnectionManager extends AbstractConnectionManager {
 
         public ConnectionManager(String driverName, String connectionString) {
-            super(driverName, connectionString);
+            super(driverName, connectionString, SCHEMA_VERSION);
         }
 
         @Override
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
index a0488271..71800cbd 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
@@ -2,10 +2,8 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
-import java.sql.ResultSet;
-
-import de.greenrobot.dao.internal.JDBCUtils;
 
+import de.greenrobot.dao.AbstractConnectionManager;
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
@@ -69,55 +67,10 @@ public static void dropAllTables(Connection connection, boolean ifExists) throws
         AutoincrementEntityDao.dropTable(connection, ifExists);
     }
     
-    public static abstract class AbstractConnectionManager {
-    
-    	private String driverName;
-    	private String connectionString;
-    	private Connection connection;
-    	
-    	public AbstractConnectionManager(String driverName, String connectionString) {
-    		this.driverName = driverName;
-    		this.connectionString = connectionString;
-    		try {
-	    		onCreate();
-	    	} catch (SQLException e) {
-	    		throw new RuntimeException("Unable to manage this connection", e);
-	    	}
-    	}
-    	
-    	// TODO connection pooling
-    	public Connection getConnection() throws SQLException {
-    		if (this.connection == null) {
-		    	this.connection = JDBCUtils.connect(driverName, connectionString);
-			}
-			return this.connection;    	
-    	}
-    	
-		public void onOpen( Connection connection ) throws SQLException {} // not mandatory
-
-    	public abstract void onCreate(Connection connection) throws SQLException;
-
-    	public void onUpgrade(Connection connection, int oldVersion, int newVersion) throws SQLException {} // not mandatory
-    	
-    	private void onCreate() throws SQLException {
-    		Connection connection = getConnection();
-    		if (isBigBang(connection)) {
-    			onCreate(connection);
-    		}
-    	}
-    	
-    	private boolean isBigBang(Connection connection) throws SQLException {
-    		ResultSet resultSet = connection.getMetaData().getCatalogs();
-    		boolean result = !resultSet.next();
-    		resultSet.close();
-    		return result;
-    	}
-    }
-    
     public static abstract class ConnectionManager extends AbstractConnectionManager {
 
         public ConnectionManager(String driverName, String connectionString) {
-            super(driverName, connectionString);
+            super(driverName, connectionString, SCHEMA_VERSION);
         }
 
         @Override
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
index 8451f931..87bc2e8b 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
@@ -2,10 +2,8 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
-import java.sql.ResultSet;
-
-import de.greenrobot.dao.internal.JDBCUtils;
 
+import de.greenrobot.dao.AbstractConnectionManager;
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
@@ -38,55 +36,10 @@ public static void dropAllTables(Connection connection, boolean ifExists) throws
         RelationSource2Dao.dropTable(connection, ifExists);
     }
     
-    public static abstract class AbstractConnectionManager {
-    
-    	private String driverName;
-    	private String connectionString;
-    	private Connection connection;
-    	
-    	public AbstractConnectionManager(String driverName, String connectionString) {
-    		this.driverName = driverName;
-    		this.connectionString = connectionString;
-    		try {
-	    		onCreate();
-	    	} catch (SQLException e) {
-	    		throw new RuntimeException("Unable to manage this connection", e);
-	    	}
-    	}
-    	
-    	// TODO connection pooling
-    	public Connection getConnection() throws SQLException {
-    		if (this.connection == null) {
-		    	this.connection = JDBCUtils.connect(driverName, connectionString);
-			}
-			return this.connection;    	
-    	}
-    	
-		public void onOpen( Connection connection ) throws SQLException {} // not mandatory
-
-    	public abstract void onCreate(Connection connection) throws SQLException;
-
-    	public void onUpgrade(Connection connection, int oldVersion, int newVersion) throws SQLException {} // not mandatory
-    	
-    	private void onCreate() throws SQLException {
-    		Connection connection = getConnection();
-    		if (isBigBang(connection)) {
-    			onCreate(connection);
-    		}
-    	}
-    	
-    	private boolean isBigBang(Connection connection) throws SQLException {
-    		ResultSet resultSet = connection.getMetaData().getCatalogs();
-    		boolean result = !resultSet.next();
-    		resultSet.close();
-    		return result;
-    	}
-    }
-    
     public static abstract class ConnectionManager extends AbstractConnectionManager {
 
         public ConnectionManager(String driverName, String connectionString) {
-            super(driverName, connectionString);
+            super(driverName, connectionString, SCHEMA_VERSION);
         }
 
         @Override
