diff --git a/DaoExample/libs/commons-lang3-3.4.jar b/DaoExample/libs/commons-lang3-3.4.jar
new file mode 100644
index 00000000..8ec91d45
Binary files /dev/null and b/DaoExample/libs/commons-lang3-3.4.jar differ
diff --git a/DaoExample/res/layout/main.xml b/DaoExample/res/layout/main.xml
index 81641d53..8b0a9a89 100644
--- a/DaoExample/res/layout/main.xml
+++ b/DaoExample/res/layout/main.xml
@@ -24,6 +24,52 @@
 			android:id="@+id/buttonAdd"
 			android:onClick="onMyButtonClick"></Button>
 	</LinearLayout>
+	
+	<Button
+        android:id="@+id/btn_add"
+        android:layout_width="fill_parent"
+        android:layout_height="40dp"
+        android:layout_margin="20dp"
+        android:text="addAll"
+        android:textColor="#000000"
+        android:textSize="15sp" />
+	
+	<Button
+        android:id="@+id/btn_delete"
+        android:layout_width="fill_parent"
+        android:layout_height="40dp"
+        android:layout_margin="20dp"
+        android:text="deleteAll"
+        android:textColor="#000000"
+        android:textSize="15sp" />
+	
+	<Button
+        android:id="@+id/btn_query_count"
+        android:layout_width="fill_parent"
+        android:layout_height="40dp"
+        android:layout_margin="20dp"
+        android:text="queryCount"
+        android:textColor="#000000"
+        android:textSize="15sp" />
+	
+	<Button
+        android:id="@+id/btn_query_all"
+        android:layout_width="fill_parent"
+        android:layout_height="40dp"
+        android:layout_margin="20dp"
+        android:text="queryAll"
+        android:textColor="#000000"
+        android:textSize="15sp" />
+	
+	<Button
+        android:id="@+id/btn_query_with_param"
+        android:layout_width="fill_parent"
+        android:layout_height="40dp"
+        android:layout_margin="20dp"
+        android:text="queryWithParam"
+        android:textColor="#000000"
+        android:textSize="15sp" />
+	
 	<ListView
 		android:layout_height="wrap_content"
 		android:id="@android:id/list"
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/PlayHistoryDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/PlayHistoryDao.java
index 71a5130f..3327695d 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/PlayHistoryDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/PlayHistoryDao.java
@@ -58,7 +58,7 @@ public PlayHistoryDao(DaoConfig config, DaoSession daoSession) {
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "'PLAY_HISTORY' (" + //
-                "'_id' INTEGER PRIMARY KEY ," + // 0: id
+                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                 "'PLAY_ID' TEXT," + // 1: playId
                 "'SUBJECT_ID' TEXT," + // 2: subjectId
                 "'VIDEO_TITLE' TEXT," + // 3: videoTitle
@@ -78,6 +78,9 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
                 "'TVISFEE' INTEGER," + // 17: tvisfee
                 "'REAL_PLAYORDER' INTEGER," + // 18: real_playorder
                 "'SITE' INTEGER);"); // 19: site
+        // Add Indexes
+        db.execSQL("CREATE INDEX " + constraint + "IDX_PLAY_HISTORY_PLAY_ID ON PLAY_HISTORY" +
+                " (PLAY_ID);");
     }
 
     /** Drops the underlying database table. */
diff --git a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
index 314e3dc1..bda03fcc 100644
--- a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
+++ b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
@@ -17,6 +17,7 @@
 
 import java.text.DateFormat;
 import java.util.Date;
+import java.util.List;
 
 import android.app.ListActivity;
 import android.database.Cursor;
@@ -27,26 +28,41 @@
 import android.util.Log;
 import android.view.KeyEvent;
 import android.view.View;
+import android.view.View.OnClickListener;
 import android.view.inputmethod.EditorInfo;
+import android.widget.Button;
 import android.widget.EditText;
 import android.widget.ListView;
 import android.widget.SimpleCursorAdapter;
 import android.widget.TextView;
 import android.widget.TextView.OnEditorActionListener;
 
+import org.apache.commons.lang3.time.StopWatch;
+
+import de.greenrobot.dao.query.QueryBuilder;
 import de.greenrobot.daoexample.DaoMaster.DevOpenHelper;
+import de.greenrobot.daoexample.PlayHistoryDao.Properties;
 
-public class NoteActivity extends ListActivity {
+public class NoteActivity extends ListActivity implements OnClickListener {
 
     private SQLiteDatabase db;
 
     private EditText editText;
+    private Button mBtnAddAll;
+    private Button mBtnDeleteAll;
+    private Button mBtnQueryCount;
+    private Button mBtnQueryAll;
+    private Button mBtnQueryWithParam;
 
     private DaoMaster daoMaster;
     private DaoSession daoSession;
     private NoteDao noteDao;
+    private PlayHistoryDao playHistoryDao;
 
     private Cursor cursor;
+    private StopWatch sw;
+
+    private static final int DATA_COUNT = 550000;
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
@@ -60,6 +76,9 @@ public void onCreate(Bundle savedInstanceState) {
         daoSession = daoMaster.newSession();
         noteDao = daoSession.getNoteDao();
 
+        playHistoryDao = daoSession.getPlayHistoryDao();
+        sw = new StopWatch();
+
         String textColumn = NoteDao.Properties.Text.columnName;
         String orderBy = textColumn + " COLLATE LOCALIZED ASC";
         cursor = db.query(noteDao.getTablename(), noteDao.getAllColumns(), null, null, null, null, orderBy);
@@ -71,9 +90,20 @@ public void onCreate(Bundle savedInstanceState) {
         setListAdapter(adapter);
 
         editText = (EditText) findViewById(R.id.editTextNote);
+
+        initView();
+
         addUiListeners();
     }
 
+    private void initView() {
+        mBtnAddAll = (Button) findViewById(R.id.btn_add);
+        mBtnDeleteAll = (Button) findViewById(R.id.btn_delete);
+        mBtnQueryCount = (Button) findViewById(R.id.btn_query_count);
+        mBtnQueryAll = (Button) findViewById(R.id.btn_query_all);
+        mBtnQueryWithParam = (Button) findViewById(R.id.btn_query_with_param);
+    }
+
     protected void addUiListeners() {
         editText.setOnEditorActionListener(new OnEditorActionListener() {
 
@@ -105,6 +135,12 @@ public void beforeTextChanged(CharSequence s, int start, int count, int after) {
             public void afterTextChanged(Editable s) {
             }
         });
+
+        mBtnAddAll.setOnClickListener(this);
+        mBtnDeleteAll.setOnClickListener(this);
+        mBtnQueryCount.setOnClickListener(this);
+        mBtnQueryAll.setOnClickListener(this);
+        mBtnQueryWithParam.setOnClickListener(this);
     }
 
     public void onMyButtonClick(View view) {
@@ -131,4 +167,100 @@ protected void onListItemClick(ListView l, View v, int position, long id) {
         cursor.requery();
     }
 
+    @Override
+    public void onClick(View v) {
+        switch (v.getId()) {
+            case R.id.btn_add:
+                batchInsert();
+                break;
+            case R.id.btn_delete:
+                batchDelete();
+                break;
+            case R.id.btn_query_count:
+                long count = queryCount();
+                editText.setText(count + "");
+                break;
+            case R.id.btn_query_all:
+                queryAll();
+                break;
+            case R.id.btn_query_with_param:
+                List<PlayHistory> l = queryWithParam();
+                if (l != null && l.size() > 0) {
+                    editText.setText(l.size() + "  " + l.get(0).getId() + "  " + l.get(0).getPlayId());
+                } else {
+                    editText.setText("not found");
+                }
+                break;
+            default:
+                break;
+        }
+    }
+
+    private void batchInsert() {
+        PlayHistory h = new PlayHistory();
+        sw.start();
+
+        db.beginTransaction();
+        for (int i = 0; i < DATA_COUNT; i++) {
+
+            h.setId(null);
+            h.setPlayId(i + "");
+            playHistoryDao.insert(h);
+            if ((i + 1) % 50000 == 0) {
+                db.setTransactionSuccessful();
+                db.endTransaction();
+                sw.split();
+                System.out.println("inserted " + (i + 1) + "  " + sw.toSplitString() + "  " + sw.toString());
+                db.beginTransaction();
+            }
+        }
+        db.setTransactionSuccessful();
+        db.endTransaction();
+        sw.split();
+        System.out.println("total time " + sw.toSplitString() + "  " + sw.toString());
+        sw.stop();
+        sw.reset();
+    }
+
+    private void batchDelete() {
+        sw.start();
+        playHistoryDao.deleteAll();
+        sw.split();
+        System.out.println("total time " + sw.toSplitString() + "  " + sw.toString());
+        sw.stop();
+        sw.reset();
+    }
+
+    private long queryCount() {
+        return playHistoryDao.count();
+    }
+
+    private List<PlayHistory> queryAll() {
+        sw.start();
+        
+        List<PlayHistory> l = playHistoryDao.loadAll();
+        
+        sw.split();
+        System.out.println("total time " + sw.toSplitString() + "  " + sw.toString());
+        sw.stop();
+        sw.reset();
+        
+        return l;
+    }
+
+    private List<PlayHistory> queryWithParam() {
+        sw.start();
+
+        QueryBuilder<PlayHistory> qb = playHistoryDao.queryBuilder();
+        qb.where(Properties.PlayId.eq(editText.getText()));
+
+        List<PlayHistory> l = qb.list();
+        
+        sw.split();
+        System.out.println("total time " + sw.toSplitString() + "  " + sw.toString());
+        sw.stop();
+        sw.reset();
+        
+        return l;
+    }
 }
\ No newline at end of file
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index a8a4faa1..0b4b0c36 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -15,8 +15,11 @@
  */
 package de.greenrobot.daogenerator.gentest;
 
+import java.util.List;
+
 import de.greenrobot.daogenerator.DaoGenerator;
 import de.greenrobot.daogenerator.Entity;
+import de.greenrobot.daogenerator.Index;
 import de.greenrobot.daogenerator.Property;
 import de.greenrobot.daogenerator.Schema;
 import de.greenrobot.daogenerator.ToMany;
@@ -120,8 +123,9 @@ private static void addApkDownload(Schema schema) {
 
     private static void addPlayHistory(Schema schema) {
         Entity his = schema.addEntity("PlayHistory");
-        
-        his.addIdProperty();
+
+        his.addIdProperty().autoincrement();
+
         his.addStringProperty("playId");
         his.addStringProperty("subjectId");
         his.addStringProperty("videoTitle");
@@ -141,6 +145,18 @@ private static void addPlayHistory(Schema schema) {
         his.addIntProperty("tvisfee");
         his.addIntProperty("real_playorder");
         his.addIntProperty("site");
+
+        List<Property> pros = his.getProperties();
+        if (pros != null && pros.size() > 0) {
+            for (Property p : pros) {
+                if ("playId".equals(p.getPropertyName())) {
+                    Index index = new Index();
+                    index.addProperty(p);
+                    his.addIndex(index);
+                    break;
+                }
+            }
+        }
     }
 
 }
