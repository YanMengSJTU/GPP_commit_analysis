diff --git a/DaoGenerator/src-template/content-provider.ftl b/DaoGenerator/src-template/content-provider.ftl
index 93396f73..f74b32b8 100644
--- a/DaoGenerator/src-template/content-provider.ftl
+++ b/DaoGenerator/src-template/content-provider.ftl
@@ -12,7 +12,7 @@ import android.net.Uri;
 import de.greenrobot.dao.DaoLog;
 
 import ${schema.defaultJavaPackageDao}.DaoSession;
-import ${entity.javaPackageDao}.${entity.classNameDao};
+import ${entity.javaPackageDao}.${entity.classNameUserDao};
 
 /* Copy this code snippet into your AndroidManifest.xml inside the
 <application> element:
@@ -32,8 +32,8 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
     public static final String CONTENT_ITEM_TYPE = ContentResolver.CURSOR_ITEM_BASE_TYPE
     + "/" + BASE_PATH;
 
-    private static final String TABLENAME = ${entity.classNameDao}.TABLENAME;
-    private static final String PK = ${entity.classNameDao}.Properties.${entity.pkProperty.propertyName?cap_first}
+    private static final String TABLENAME = ${entity.classNameUserDao}.TABLENAME;
+    private static final String PK = ${entity.classNameUserDao}.Properties.${entity.pkProperty.propertyName?cap_first}
     .columnName;
 
 <#assign counter = 0>
diff --git a/DaoGenerator/src-template/dao-master.ftl b/DaoGenerator/src-template/dao-master.ftl
index adaffc48..bb3157dc 100644
--- a/DaoGenerator/src-template/dao-master.ftl
+++ b/DaoGenerator/src-template/dao-master.ftl
@@ -28,7 +28,7 @@ import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 
 <#list schema.entities as entity>
-import ${entity.javaPackageDao}.${entity.classNameDao};
+import ${entity.javaPackageDao}.${entity.classNameUserDao};
 </#list>
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
@@ -42,7 +42,7 @@ public class DaoMaster extends AbstractDaoMaster {
     public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
 <#list schema.entities as entity>
 <#if !entity.skipTableCreation>
-        ${entity.classNameDao}.createTable(db, ifNotExists);
+        ${entity.classNameUserDao}.createTable(db, ifNotExists);
 </#if>
 </#list>
     }
@@ -51,7 +51,7 @@ public class DaoMaster extends AbstractDaoMaster {
     public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
 <#list schema.entities as entity>
 <#if !entity.skipTableCreation>
-        ${entity.classNameDao}.dropTable(db, ifExists);
+        ${entity.classNameUserDao}.dropTable(db, ifExists);
 </#if>
 </#list>
     }
@@ -86,7 +86,7 @@ public class DaoMaster extends AbstractDaoMaster {
     public DaoMaster(SQLiteDatabase db) {
         super(db, SCHEMA_VERSION);
 <#list schema.entities as entity>
-        registerDaoClass(${entity.classNameDao}.class);
+        registerDaoClass(${entity.classNameUserDao}.class);
 </#list>
     }
     
diff --git a/DaoGenerator/src-template/dao-session.ftl b/DaoGenerator/src-template/dao-session.ftl
index e0201a48..82fa0909 100644
--- a/DaoGenerator/src-template/dao-session.ftl
+++ b/DaoGenerator/src-template/dao-session.ftl
@@ -33,7 +33,7 @@ import ${entity.javaPackage}.${entity.className};
 </#list>
 
 <#list schema.entities as entity>
-import ${entity.javaPackageDao}.${entity.classNameDao};
+import ${entity.javaPackageDao}.${entity.classNameUserDao};
 </#list>
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
@@ -46,11 +46,11 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
 public class DaoSession extends AbstractDaoSession {
 
 <#list schema.entities as entity>
-    private final DaoConfig ${entity.classNameDao?uncap_first}Config;
+    private final DaoConfig ${entity.classNameUserDao?uncap_first}Config;
 </#list>        
 
 <#list schema.entities as entity>
-    private final ${entity.classNameDao} ${entity.classNameDao?uncap_first};
+    private final ${entity.classNameUserDao} ${entity.classNameUserDao?uncap_first};
 </#list>        
 
     public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
@@ -58,29 +58,29 @@ public class DaoSession extends AbstractDaoSession {
         super(db);
 
 <#list schema.entities as entity>
-        ${entity.classNameDao?uncap_first}Config = daoConfigMap.get(${entity.classNameDao}.class).clone();
-        ${entity.classNameDao?uncap_first}Config.initIdentityScope(type);
+        ${entity.classNameUserDao?uncap_first}Config = daoConfigMap.get(${entity.classNameUserDao}.class).clone();
+        ${entity.classNameUserDao?uncap_first}Config.initIdentityScope(type);
 
 </#list>        
 <#list schema.entities as entity>
-        ${entity.classNameDao?uncap_first} = new ${entity.classNameDao}<#--
--->(${entity.classNameDao?uncap_first}Config, this);
+        ${entity.classNameUserDao?uncap_first} = new ${entity.classNameUserDao}<#--
+-->(${entity.classNameUserDao?uncap_first}Config, this);
 </#list>        
 
 <#list schema.entities as entity>
-        registerDao(${entity.className}.class, ${entity.classNameDao?uncap_first});
+        registerDao(${entity.className}.class, ${entity.classNameUserDao?uncap_first});
 </#list>        
     }
     
     public void clear() {
 <#list schema.entities as entity>
-        ${entity.classNameDao?uncap_first}Config.getIdentityScope().clear();
+        ${entity.classNameUserDao?uncap_first}Config.getIdentityScope().clear();
 </#list>    
     }
 
 <#list schema.entities as entity>
-    public ${entity.classNameDao} get${entity.classNameDao?cap_first}() {
-        return ${entity.classNameDao?uncap_first};
+    public ${entity.classNameUserDao} get${entity.classNameDao?cap_first}() {
+        return ${entity.classNameUserDao?uncap_first};
     }
 
 </#list>        
diff --git a/DaoGenerator/src-template/dao-unit-test.ftl b/DaoGenerator/src-template/dao-unit-test.ftl
index 376cf431..5eec9b55 100644
--- a/DaoGenerator/src-template/dao-unit-test.ftl
+++ b/DaoGenerator/src-template/dao-unit-test.ftl
@@ -27,13 +27,13 @@ import de.greenrobot.dao.test.AbstractDaoTestLongPk;
 </#if>
 
 import ${entity.javaPackage}.${entity.className};
-import ${entity.javaPackageDao}.${entity.classNameDao};
+import ${entity.javaPackageDao}.${entity.classNameUserDao};
 
 public class ${entity.classNameTest} extends <#if
-isStringPK>AbstractDaoTestStringPk<${entity.classNameDao}, ${entity.className}><#else>AbstractDaoTestLongPk<${entity.classNameDao}, ${entity.className}></#if> {
+isStringPK>AbstractDaoTestStringPk<${entity.classNameUserDao}, ${entity.className}><#else>AbstractDaoTestLongPk<${entity.classNameUserDao}, ${entity.className}></#if> {
 
     public ${entity.classNameTest}() {
-        super(${entity.classNameDao}.class);
+        super(${entity.classNameUserDao}.class);
     }
 
     @Override
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index e40c0a18..b9fb4671 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -64,7 +64,7 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
     private transient DaoSession daoSession;
 
     /** Used for active entity operations. */
-    private transient ${entity.classNameDao} myDao;
+    private transient ${entity.classNameUserDao} myDao;
 
 <#list entity.toOneRelations as toOne>
     private ${toOne.targetEntity.className} ${toOne.name};
@@ -110,7 +110,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     /** called by internal mechanisms, do not call yourself. */
     public void __setDaoSession(DaoSession daoSession) {
         this.daoSession = daoSession;
-        myDao = daoSession != null ? daoSession.get${entity.classNameDao?cap_first}() : null;
+        myDao = daoSession != null ? daoSession.get${entity.classNameUserDao?cap_first}() : null;
     }
 
 </#if>
@@ -146,7 +146,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
             }
-            ${toOne.targetEntity.classNameDao} targetDao = daoSession.get${toOne.targetEntity.classNameDao?cap_first}();
+            ${toOne.targetEntity.classNameUserDao} targetDao = daoSession.get${toOne.targetEntity.classNameDao?cap_first}();
             ${toOne.targetEntity.className} ${toOne.name}New = targetDao.load(__key);
             synchronized (this) {
                 ${toOne.name} = ${toOne.name}New;
@@ -158,7 +158,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
             }
-            ${toOne.targetEntity.classNameDao} targetDao = daoSession.get${toOne.targetEntity.classNameDao?cap_first}();
+            ${toOne.targetEntity.classNameUserDao} targetDao = daoSession.get${toOne.targetEntity.classNameDao?cap_first}();
             targetDao.refresh(${toOne.name});
             ${toOne.name}__refreshed = true;
         }
@@ -203,7 +203,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
             }
-            ${toMany.targetEntity.classNameDao} targetDao = daoSession.get${toMany.targetEntity.classNameDao?cap_first}();
+            ${toMany.targetEntity.classNameUserDao} targetDao = daoSession.get${toMany.targetEntity.classNameDao?cap_first}();
             List<${toMany.targetEntity.className}> ${toMany.name}New = targetDao._query${toMany.sourceEntity.className?cap_first}_${toMany.name?cap_first}(<#--
                 --><#list toMany.sourceProperties as property>${property.propertyName}<#if property_has_next>, </#if></#list>);
             synchronized (this) {<#-- Check if another thread was faster, we cannot lock while doing the query to prevent deadlocks -->
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index 0f9ecdd8..75071eef 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -2,7 +2,7 @@
  * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,7 +11,7 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
@@ -33,7 +33,7 @@
 
 /**
  * Once you have your model created, use this class to generate entities and DAOs.
- * 
+ *
  * @author Markus
  */
 public class DaoGenerator {
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index dc8b1049..17f7de2c 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -2,7 +2,7 @@
  * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,7 +11,7 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
@@ -52,6 +52,7 @@
 
     private String tableName;
     private String classNameDao;
+    private String classNameUserDao;
     private String classNameTest;
     private String javaPackage;
     private String javaPackageDao;
@@ -298,6 +299,14 @@ public void setClassNameDao(String classNameDao) {
         this.classNameDao = classNameDao;
     }
 
+    public String getClassNameUserDao() {
+        return classNameUserDao;
+    }
+
+    public void setClassNameUserDao(String classNameUserDao) {
+        this.classNameUserDao = classNameUserDao;
+    }
+
     public String getClassNameTest() {
         return classNameTest;
     }
@@ -503,6 +512,9 @@ protected void init2nPassNamesWithDefaults() {
         if (classNameDao == null) {
             classNameDao = className + "Dao";
         }
+        if (classNameUserDao == null) {
+            classNameUserDao = classNameDao;
+        }
         if (classNameTest == null) {
             classNameTest = className + "Test";
         }
@@ -580,6 +592,9 @@ private void init3rdPassRelations() {
     private void init3rdPassAdditionalImports() {
         if (active && !javaPackage.equals(javaPackageDao)) {
             additionalImportsEntity.add(javaPackageDao + "." + classNameDao);
+            if (!classNameDao.equals(classNameUserDao)) {
+                additionalImportsEntity.add(javaPackageDao + "." + classNameUserDao);
+            }
         }
 
         for (ToOne toOne : toOneRelations) {
@@ -601,8 +616,14 @@ private void checkAdditionalImportsEntityTargetEntity(Entity targetEntity) {
         if (!targetEntity.getJavaPackage().equals(javaPackage)) {
             additionalImportsEntity.add(targetEntity.getJavaPackage() + "." + targetEntity.getClassName());
         }
-        if (!targetEntity.getJavaPackageDao().equals(javaPackage)) {
-            additionalImportsEntity.add(targetEntity.getJavaPackageDao() + "." + targetEntity.getClassNameDao());
+        final String targetJavaPackageDao = targetEntity.getJavaPackageDao();
+        if (!targetJavaPackageDao.equals(javaPackage)) {
+            final String targetClassNameDao = targetEntity.getClassNameDao();
+            final String targetClassNameUserDao = targetEntity.getClassNameUserDao();
+            additionalImportsEntity.add(targetJavaPackageDao + "." + targetClassNameDao);
+            if (!targetClassNameDao.equals(targetClassNameUserDao)) {
+                additionalImportsEntity.add(targetJavaPackageDao + "." + targetClassNameUserDao);
+            }
         }
     }
 
