diff --git a/DaoExample/src-gen/.DS_Store b/DaoExample/src-gen/.DS_Store
deleted file mode 100644
index 5008ddfc..00000000
Binary files a/DaoExample/src-gen/.DS_Store and /dev/null differ
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
index 590d7138..46c46efe 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
@@ -1,63 +1,72 @@
-package de.greenrobot.daoexample;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
-/**
- * Entity mapped to table NOTE.
- */
-abstract public class NoteBase {
-
-    protected Long id;
-    /** Not-null value. */
-    protected String text;
-    protected String comment;
-    protected java.util.Date date;
-
-    public NoteBase() {
-    }
-
-    public NoteBase(Long id) {
-        this.id = id;
-    }
-
-    public NoteBase(Long id, String text, String comment, java.util.Date date) {
-        this.id = id;
-        this.text = text;
-        this.comment = comment;
-        this.date = date;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    /** Not-null value. */
-    public String getText() {
-        return text;
-    }
-
-    /** Not-null value; ensure this value is available before it is saved to the database. */
-    public void setText(String text) {
-        this.text = text;
-    }
-
-    public String getComment() {
-        return comment;
-    }
-
-    public void setComment(String comment) {
-        this.comment = comment;
-    }
-
-    public java.util.Date getDate() {
-        return date;
-    }
-
-    public void setDate(java.util.Date date) {
-        this.date = date;
-    }
-
-}
+package de.greenrobot.daoexample;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+/**
+ * Entity mapped to table NOTE.
+ */
+@Test
+@Test2( singleValueeee )
+@Test3( key2 = "value2", key1 = 5 )
+@Test4( key2 = "value2", key1 = null )
+abstract public class NoteBase {
+
+    protected Long id;
+    /** Not-null value. */
+    protected String text;
+    @JSONIgnore
+    protected String comment;
+    protected java.util.Date date;
+
+    @Deprecated
+    public NoteBase() {
+    }
+
+    public NoteBase(Long id) {
+        this.id = id;
+    }
+
+    @Inject( Context )
+    public NoteBase(Long id, String text, String comment, java.util.Date date) {
+        this.id = id;
+        this.text = text;
+        this.comment = comment;
+        this.date = date;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    /** Not-null value. */
+    public String getText() {
+        return text;
+    }
+
+    /** Not-null value; ensure this value is available before it is saved to the database. */
+    @test5( key1 = value1 )
+    public void setText(String text) {
+        this.text = text;
+    }
+
+    public String getComment() {
+        return comment;
+    }
+
+    public void setComment(String comment) {
+        this.comment = comment;
+    }
+
+    public java.util.Date getDate() {
+        return date;
+    }
+
+    @Test( key1 = value1 )
+    public void setDate(java.util.Date date) {
+        this.date = date;
+    }
+
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
index 40b5bbc1..19340096 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
@@ -27,6 +27,7 @@
         public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
         public final static Property Comment = new Property(2, String.class, "comment", false, "COMMENT");
         public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
+        public final static Property UserIds = new Property(4, java.util.List<String>.class, "userIds", false, "USER_IDS");
     };
 
 
@@ -45,7 +46,8 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'TEXT' TEXT NOT NULL ," + // 1: text
                 "'COMMENT' TEXT," + // 2: comment
-                "'DATE' INTEGER);"); // 3: date
+                "'DATE' INTEGER," + // 3: date
+                "'USER_IDS' TEXT);"); // 4: userIds
     }
 
     /** Drops the underlying database table. */
@@ -74,56 +76,42 @@ protected void bindValues(SQLiteStatement stmt, Note entity) {
         if (date != null) {
             stmt.bindLong(4, date.getTime());
         }
-    }
-
-    /** @inheritdoc */
-    @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
-    }    
-
-    /** @inheritdoc */
-    @Override
-    public Note readEntity(Cursor cursor, int offset) {
-        Note entity = new Note( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.getString(offset + 1), // text
-            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comment
-            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // date
-        );
-        return entity;
-    }
-     
-    /** @inheritdoc */
-    @Override
-    public void readEntity(Cursor cursor, Note entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setText(cursor.getString(offset + 1));
-        entity.setComment(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
-        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
-     }
-    
-    /** @inheritdoc */
-    @Override
-    protected Long updateKeyAfterInsert(Note entity, long rowId) {
-        entity.setId(rowId);
-        return rowId;
-    }
-    
-    /** @inheritdoc */
-    @Override
-    public Long getKey(Note entity) {
-        if(entity != null) {
-            return entity.getId();
-        } else {
-            return null;
-        }
-    }
-
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
-        return true;
-    }
-    
-}
+ 
+        java.util.List<String> userIds = entity.getUserIds();
+        if (userIds != null) {
+            stmt.bind
+Expression toBindType[property.propertyType] is undefined on line 138, column 24 in dao.ftl.
+The problematic instruction:
+----------
+==> ${toBindType[property.propertyType]} [on line 138, column 22 in dao.ftl]
+----------
+
+Java backtrace for programmers:
+----------
+freemarker.core.InvalidReferenceException: Expression toBindType[property.propertyType] is undefined on line 138, column 24 in dao.ftl.
+	at freemarker.core.TemplateObject.assertNonNull(TemplateObject.java:125)
+	at freemarker.core.Expression.getStringValue(Expression.java:118)
+	at freemarker.core.Expression.getStringValue(Expression.java:93)
+	at freemarker.core.DollarVariable.accept(DollarVariable.java:76)
+	at freemarker.core.Environment.visit(Environment.java:221)
+	at freemarker.core.MixedContent.accept(MixedContent.java:92)
+	at freemarker.core.Environment.visit(Environment.java:221)
+	at freemarker.core.IfBlock.accept(IfBlock.java:82)
+	at freemarker.core.Environment.visit(Environment.java:221)
+	at freemarker.core.IteratorBlock$Context.runLoop(IteratorBlock.java:179)
+	at freemarker.core.Environment.visit(Environment.java:428)
+	at freemarker.core.IteratorBlock.accept(IteratorBlock.java:102)
+	at freemarker.core.Environment.visit(Environment.java:221)
+	at freemarker.core.MixedContent.accept(MixedContent.java:92)
+	at freemarker.core.Environment.visit(Environment.java:221)
+	at freemarker.core.Environment.process(Environment.java:199)
+	at freemarker.template.Template.process(Template.java:237)
+	at de.greenrobot.daogenerator.DaoGenerator.generate(DaoGenerator.java:157)
+	at de.greenrobot.daogenerator.DaoGenerator.generateAll(DaoGenerator.java:108)
+	at de.greenrobot.daogenerator.DaoGenerator.generateAll(DaoGenerator.java:86)
+	at de.greenrobot.daogenerator.gentest.ExampleDaoGenerator.main(ExampleDaoGenerator.java:35)
+	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
+	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
+	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
+	at java.lang.reflect.Method.invoke(Method.java:597)
+	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
diff --git a/DaoExampleGenerator/lib/freemarker.jar b/DaoExampleGenerator/lib/freemarker.jar
deleted file mode 100644
index b3673e22..00000000
Binary files a/DaoExampleGenerator/lib/freemarker.jar and /dev/null differ
diff --git a/DaoExampleGenerator/lib/greenDAO-generator-javadoc.jar b/DaoExampleGenerator/lib/greenDAO-generator-javadoc.jar
deleted file mode 100644
index a7faf51f..00000000
Binary files a/DaoExampleGenerator/lib/greenDAO-generator-javadoc.jar and /dev/null differ
diff --git a/DaoExampleGenerator/lib/greenDAO-generator.jar b/DaoExampleGenerator/lib/greenDAO-generator.jar
deleted file mode 100644
index c676a815..00000000
Binary files a/DaoExampleGenerator/lib/greenDAO-generator.jar and /dev/null differ
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index 276d291e..de5cf5cd 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -15,17 +15,13 @@
  */
 package de.greenrobot.daogenerator.gentest;
 
-import de.greenrobot.daogenerator.DaoGenerator;
-import de.greenrobot.daogenerator.Entity;
-import de.greenrobot.daogenerator.Property;
-import de.greenrobot.daogenerator.Schema;
-import de.greenrobot.daogenerator.ToMany;
+import de.greenrobot.daogenerator.*;
 
 /**
  * Generates entities and DAOs for the example project DaoExample.
- * 
+ *
  * Run it as a Java application (not Android).
- * 
+ *
  * @author Markus
  */
 public class ExampleDaoGenerator {
@@ -41,10 +37,20 @@ public static void main(String[] args) throws Exception {
 
     private static void addNote(Schema schema) {
         Entity note = schema.addEntity("Note");
+
         note.addIdProperty();
-        note.addStringProperty("text").notNull();
-        note.addStringProperty("comment");
-        note.addDateProperty("date");
+        note.addStringProperty("text").notNull().addSetterAnnotation(new Annotation("test5", "key1", "value1"));
+        note.addStringProperty("comment").addFieldAnnotation(new Annotation("JSONIgnore"));
+        note.addDateProperty("date").addSetterAnnotation(new Annotation("Test", "key1", "value1"));
+        note.addAnnotation(new Annotation("Test"));
+        note.addAnnotation(new Annotation("Test2", "singleValueeee"));
+        note.addAnnotation(new Annotation("Test3", "key1", "5", "key2","\"value2\""));
+        note.addAnnotation(new Annotation("Test4", "key1", null, "key2","\"value2\""));
+        note.addProperty(PropertyType.StringList, "userIds");
+
+        note.addEmptyConstructorAnnotation(new Annotation("Deprecated"));
+        note.addFullConstructorAnnotation(new Annotation("Inject", "Context"));
+
     }
 
     private static void addCustomerOrder(Schema schema) {
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index 648b5c8d..52d50409 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -139,6 +139,10 @@ public PropertyBuilder addDateProperty(String propertyName) {
         return addProperty(PropertyType.Date, propertyName);
     }
 
+    public PropertyBuilder addStringList(String propertyName) {
+        return addProperty(PropertyType.StringList, propertyName);
+    }
+
     public Entity addAnnotation(Annotation annotation) {
         this.annotations.add(annotation);
         return this;
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java b/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java
index 0246239e..5c5def94 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java
@@ -2,7 +2,7 @@
  * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,7 +11,7 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
@@ -19,9 +19,9 @@
 
 /**
  * Currently available types for properties.
- * 
+ *
  * @author Markus
  */
 public enum PropertyType {
-    Byte, Short, Int, Long, Boolean, Float, Double, String, ByteArray, Date
+    Byte, Short, Int, Long, Boolean, Float, Double, String, ByteArray, Date, StringList
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
index e94c58f5..c7c877f2 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
@@ -2,7 +2,7 @@
  * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,7 +11,7 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
@@ -24,7 +24,7 @@
 
 /**
  * The "root" model class to which you can add entities to.
- * 
+ *
  * @see <a href="http://greendao-orm.com/documentation/modelling-entities/">Modelling Entities (Documentation page)</a>
  */
 public class Schema {
@@ -66,6 +66,7 @@ private void initTypeMappings() {
         propertyToDbType.put(PropertyType.String, "TEXT");
         propertyToDbType.put(PropertyType.ByteArray, "BLOB");
         propertyToDbType.put(PropertyType.Date, "INTEGER");
+        propertyToDbType.put(PropertyType.StringList, "TEXT");
 
         propertyToJavaTypeNotNull = new HashMap<PropertyType, String>();
         propertyToJavaTypeNotNull.put(PropertyType.Boolean, "boolean");
@@ -78,6 +79,7 @@ private void initTypeMappings() {
         propertyToJavaTypeNotNull.put(PropertyType.String, "String");
         propertyToJavaTypeNotNull.put(PropertyType.ByteArray, "byte[]");
         propertyToJavaTypeNotNull.put(PropertyType.Date, "java.util.Date");
+        propertyToJavaTypeNotNull.put(PropertyType.StringList, "java.util.List<String>");
 
         propertyToJavaTypeNullable = new HashMap<PropertyType, String>();
         propertyToJavaTypeNullable.put(PropertyType.Boolean, "Boolean");
@@ -90,6 +92,7 @@ private void initTypeMappings() {
         propertyToJavaTypeNullable.put(PropertyType.String, "String");
         propertyToJavaTypeNullable.put(PropertyType.ByteArray, "byte[]");
         propertyToJavaTypeNullable.put(PropertyType.Date, "java.util.Date");
+        propertyToJavaTypeNullable.put(PropertyType.StringList, "java.util.List<String>");
     }
 
     /**
