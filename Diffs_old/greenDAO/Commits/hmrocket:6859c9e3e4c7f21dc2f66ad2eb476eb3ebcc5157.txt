diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
index af01658a..6d86e393 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
@@ -18,6 +18,7 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.List;
 
 import android.database.CrossProcessCursor;
@@ -416,10 +417,15 @@ final protected T loadCurrent(Cursor cursor, int offset, boolean lock) {
         return loadAllAndCloseCursor(cursor);
     }
 
-    /** @deprecated groupBy & having does not make sense for entities. Method will be removed. */
-    public List<T> query(String selection, String[] selectionArgs, String groupBy, String having, String orderby) {
-        Cursor cursor = db.query(config.tablename, getAllColumns(), selection, selectionArgs, groupBy, having, orderby);
-        return loadAllAndCloseCursor(cursor);
+    /** Creates a repeatable {@link Query} object based on the given raw SQL where you can pass any WHERE clause and arguments. */
+    public Query<T> queryRawCreate(String where, Object... selectionArg) {
+        List<Object> argList = Arrays.asList(selectionArg);
+        return queryRawCreateListArgs(where, argList);
+    }
+
+    /** Creates a repeatable {@link Query} object based on the given raw SQL where you can pass any WHERE clause and arguments. */
+    public Query<T> queryRawCreateListArgs(String where, Collection<Object> selectionArg) {
+        return new Query<T>(this, statements.getSelectAll() + where, selectionArg);
     }
 
     public void deleteAll() {
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java b/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java
index faa89bc8..5e76f5b1 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java
@@ -193,4 +193,26 @@ public void testBuildTwice() {
         assertEquals(list1.get(0).getId(), list2.get(0).getId());
     }
 
+    public void testLike() {
+        TestEntity entity = insert(3).get(1);
+        entity.setSimpleString("greenrobot");
+        dao.update(entity);
+
+        Query<TestEntity> query = dao.queryBuilder().where(Properties.SimpleString.like("%robot")).build();
+        TestEntity entity2 = query.uniqueOrThrow();
+        assertEquals(entity.getId(), entity2.getId());
+        
+        query.setParameter(0, "green%");
+        entity2 = query.uniqueOrThrow();
+        assertEquals(entity.getId(), entity2.getId());
+        
+        query.setParameter(0, "%enrob%");
+        entity2 = query.uniqueOrThrow();
+        assertEquals(entity.getId(), entity2.getId());
+        
+        query.setParameter(0, "%nothere%");
+        entity2 = query.unique();
+        assertNull(entity2);
+    }
+
 }
diff --git a/DaoTest/src/de/greenrobot/daotest/query/RawQueryTest.java b/DaoTest/src/de/greenrobot/daotest/query/RawQueryTest.java
new file mode 100644
index 00000000..bf2db6c4
--- /dev/null
+++ b/DaoTest/src/de/greenrobot/daotest/query/RawQueryTest.java
@@ -0,0 +1,90 @@
+/*
+ * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * This file is part of greenDAO Generator.
+ * 
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package de.greenrobot.daotest.query;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import de.greenrobot.dao.LazyList;
+import de.greenrobot.dao.Query;
+import de.greenrobot.dao.QueryBuilder;
+import de.greenrobot.daotest.TestEntity;
+import de.greenrobot.daotest.TestEntityDao.Properties;
+import de.greenrobot.daotest.entity.TestEntityTestBase;
+
+public class RawQueryTest extends TestEntityTestBase {
+    @Override
+    protected void setUp() {
+        super.setUp();
+        QueryBuilder.LOG_SQL = true;
+        QueryBuilder.LOG_VALUES = true;
+    }
+
+    public void testRawQueryEmptySql() {
+        insert(3);
+        Query<TestEntity> query = dao.queryRawCreate("");
+        List<TestEntity> result = query.list();
+        assertEquals(3, result.size());
+    }
+
+    public void testRawQueryEqualsString() {
+        ArrayList<TestEntity> inserted = insert(3);
+        String value = getSimpleString(1);
+
+        String sql = "WHERE " + Properties.SimpleString.columnName + "=?";
+        List<TestEntity> result = dao.queryRawCreate(sql, value).list();
+        assertEquals(1, result.size());
+
+        TestEntity resultEntity = result.get(0);
+        assertEquals(value, resultEntity.getSimpleString());
+        assertEquals(inserted.get(1).getId(), resultEntity.getId());
+    }
+
+    public void testRawQueryCreate_setParameterInQuery() {
+        insert(3);
+        String value = getSimpleString(2);
+
+        String sql = "WHERE " + Properties.SimpleString.columnName + "=?";
+        Query<TestEntity> query = dao.queryRawCreate(sql, getSimpleString(1));
+        query.list();
+
+        query.setParameter(0, value);
+        List<TestEntity> result = query.list();
+
+        assertEquals(1, result.size());
+        assertEquals(value, result.get(0).getSimpleString());
+    }
+    
+    public void testRawQueryLazyList() {
+        ArrayList<TestEntity> list = insert(2);
+
+        LazyList<TestEntity> listLazy = dao.queryRawCreate("").listLazy();
+        assertEquals(list.size(), listLazy.size());
+        assertNull(listLazy.peak(0));
+        assertNull(listLazy.peak(1));
+
+        assertNotNull(listLazy.get(1));
+        assertNull(listLazy.peak(0));
+        assertNotNull(listLazy.peak(1));
+
+        assertNotNull(listLazy.get(0));
+        assertNotNull(listLazy.peak(0));
+        assertNotNull(listLazy.peak(1));
+    }
+
+}
diff --git a/README.md b/README.md
index 548b8136..f31c0aac 100644
--- a/README.md
+++ b/README.md
@@ -7,11 +7,12 @@ Home page, documentation, and support links: http://greendao-orm.com/
 Release History
 ---------------
 ### VX.X.0 Preview (2012-??-??): New asynchronous API
-* AsyncSession (acquired from DaoSession.startAsyncSession()) provides most operations for DAOs, Queries, and transactions in a asynchronously variant
+* New AsyncSession (acquired from DaoSession.startAsyncSession()) provides most operations for DAOs, Queries, and transactions in a asynchronously variant
 * AsyncOperations are processed in order by a background thread
 * waitForCompletion methods for AsyncSession and AsyncOperations
 * AsyncOperationListener for asynchronous callback when operations complete
 * Asynchronous operations can be merged in single transactions (details follow)
+* Added raw SQL queries returning a Query object (LazyList support etc.)
 
 ### V1.2.0 (2012-06-08): Feature release
 * Limited support of String PKs (no relations using String FKs yet)
