diff --git a/DaoCore/build.gradle b/DaoCore/build.gradle
index 82f43a50..49030e38 100644
--- a/DaoCore/build.gradle
+++ b/DaoCore/build.gradle
@@ -3,7 +3,7 @@ apply plugin: 'maven'
 apply plugin: 'signing'
 
 group = 'de.greenrobot'
-version = '1.3.8-SNAPSHOT'
+version = '1.3.8'
 sourceCompatibility = 1.6
 
 def isSnapshot = version.endsWith('-SNAPSHOT')
@@ -76,6 +76,7 @@ signing {
     }
 }
 
+/*
 uploadArchives {
     repositories {
         mavenDeployer {
@@ -133,4 +134,5 @@ uploadArchives {
            }
         }
     }
-}
\ No newline at end of file
+}
+*/
\ No newline at end of file
diff --git a/DaoCore/mybuild.xml b/DaoCore/mybuild.xml
index de919041..e21e0e36 100644
--- a/DaoCore/mybuild.xml
+++ b/DaoCore/mybuild.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project name="DaoCore" default="build-all">
 
-	<property name="version" value="1.3.0-SNAPSHOT" />
+	<property name="version" value="1.3.0" />
 	
 	<target name="build-all" depends="delete-release, build-jar, build-javadoc">
 	</target>
diff --git a/DaoCore/settings.gradle b/DaoCore/settings.gradle
index 48427d6a..51cb0020 100644
--- a/DaoCore/settings.gradle
+++ b/DaoCore/settings.gradle
@@ -1 +1 @@
-rootProject.name = 'greendao'
\ No newline at end of file
+rootProject.name = 'greendao-annotations'
\ No newline at end of file
diff --git a/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java b/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
index 9414f1f7..994d9494 100644
--- a/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
+++ b/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
@@ -34,6 +34,7 @@
     private volatile String selectByKey;
     private volatile String selectByRowId;
     private volatile String selectKeys;
+    private volatile String selectPk;
 
     public TableStatements(SQLiteDatabase db, String tablename, String[] allColumns, String[] pkColumns) {
         this.db = db;
@@ -108,4 +109,11 @@ public String getSelectByRowId() {
         return selectByRowId;
     }
 
+    /** creates a select which only selects PK. */
+    public String getSelectPk() {
+        if (selectPk == null) {
+            selectPk = SqlUtils.createSqlSelect(tablename, "T", pkColumns);
+        }
+        return selectPk;
+    }
 }
diff --git a/DaoCore/src/de/greenrobot/dao/query/AbstractQuery.java b/DaoCore/src/de/greenrobot/dao/query/AbstractQuery.java
index 2569011f..a17b2829 100644
--- a/DaoCore/src/de/greenrobot/dao/query/AbstractQuery.java
+++ b/DaoCore/src/de/greenrobot/dao/query/AbstractQuery.java
@@ -80,4 +80,11 @@ protected void checkThread() {
         }
     }
 
+    public String getSql() {
+        return sql;
+    }
+
+    public String[] getParameters() {
+        return parameters;
+    }
 }
diff --git a/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java b/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
index fdd58004..4efb53a1 100644
--- a/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
+++ b/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
@@ -251,16 +251,24 @@ protected void checkProperty(Property property) {
         return this;
     }
 
+    public Query<T> build() {
+        return build(false);
+    }
+
     /**
      * Builds a reusable query object (Query objects can be executed more efficiently than creating a QueryBuilder for
      * each execution.
      */
-    public Query<T> build() {
+    public Query<T> build(boolean onlyPk) {
         String select;
         if (joinBuilder == null || joinBuilder.length() == 0) {
-            select = InternalQueryDaoAccess.getStatements(dao).getSelectAll();
+            //select = InternalQueryDaoAccess.getStatements(dao).getSelectAll();
+            select = onlyPk ? InternalQueryDaoAccess.getStatements(dao).getSelectPk()
+                    : InternalQueryDaoAccess.getStatements(dao).getSelectAll();
         } else {
-            select = SqlUtils.createSqlSelect(dao.getTablename(), tablePrefix, dao.getAllColumns());
+            //select = SqlUtils.createSqlSelect(dao.getTablename(), tablePrefix, dao.getAllColumns());
+            select = onlyPk ? SqlUtils.createSqlSelect(dao.getTablename(), tablePrefix, dao.getPkColumns())
+                    : SqlUtils.createSqlSelect(dao.getTablename(), tablePrefix, dao.getAllColumns());
         }
         StringBuilder builder = new StringBuilder(select);
 
@@ -304,6 +312,14 @@ protected void checkProperty(Property property) {
      * QueryBuilder for each execution.
      */
     public DeleteQuery<T> buildDelete() {
+        if (limit != null || (orderBuilder != null && orderBuilder.length() > 0)) {
+            return buildDeleteWithLimitAndOrder();
+        }
+
+        return buildSimpleDelete();
+    }
+
+    protected DeleteQuery<T> buildSimpleDelete() {
         String tablename = dao.getTablename();
         String baseSql = SqlUtils.createSqlDelete(tablename, null);
         StringBuilder builder = new StringBuilder(baseSql);
@@ -349,6 +365,34 @@ protected void checkProperty(Property property) {
         return CountQuery.create(dao, sql, values.toArray());
     }
 
+    /*
+     * Android does not come with SQLITE_ENABLE_UPDATE_DELETE_LIMIT option enabled which prevents us from writing
+     * delete queries with limit and order. This method overcomes that limitation by re-writing the query as an IN
+     * statement
+     *
+     */
+    protected DeleteQuery<T> buildDeleteWithLimitAndOrder() {
+        if(dao.getPkColumns().length != 1) {
+            throw new UnsupportedOperationException("Delete with Limit and Order is only supported "
+                    + "for tables with 1 PK column");
+        }
+
+        Query<T> selectQuery = build(true);
+        String baseSql = SqlUtils.createSqlDelete(dao.getTablename(), null);
+        StringBuilder builder = new StringBuilder(baseSql);
+        builder.append(" WHERE ").append(dao.getPkColumns()[0])
+                .append(" IN( ").append(selectQuery.getSql()).append(" )");
+        String sql = builder.toString();
+        if (LOG_SQL) {
+            DaoLog.d("Built SQL for delete query: " + sql);
+        }
+        if (LOG_VALUES) {
+            DaoLog.d("Values for delete query: " + values);
+        }
+
+        return DeleteQuery.create(dao, sql, values.toArray());
+    }
+
     private void appendWhereClause(StringBuilder builder, String tablePrefixOrNull) {
         values.clear();
         if (!whereConditions.isEmpty()) {
diff --git a/DaoGenerator/.classpath b/DaoGenerator/.classpath
deleted file mode 100644
index a82e8447..00000000
--- a/DaoGenerator/.classpath
+++ /dev/null
@@ -1,14 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="src-template"/>
-	<classpathentry kind="src" path="src-test"/>
-	<classpathentry kind="src" path="src-generator-testentities"/>
-	<classpathentry kind="con" path="GROOVY_DSL_SUPPORT"/>
-	<classpathentry kind="con" path="GROOVY_SUPPORT"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
-	<classpathentry exported="true" kind="con" path="org.springsource.ide.eclipse.gradle.classpathcontainer"/>
-	<classpathentry kind="con" path="org.springsource.ide.eclipse.gradle.dsld.classpathcontainer"/>
-	<classpathentry kind="output" path="bin"/>
-</classpath>
diff --git a/DaoGenerator/.freemarker-ide.xml b/DaoGenerator/.freemarker-ide.xml
deleted file mode 100644
index 43d77411..00000000
--- a/DaoGenerator/.freemarker-ide.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<config>
-	<context-values>
-		<resource path="src-template/dao-master.ftl">
-			<value key="schema" object-class="de.greenrobot.daogenerator.Schema"/>
-		</resource>
-		<resource path="src-template/content-provider.ftl">
-			<value key="entity" object-class="de.greenrobot.daogenerator.Entity"/>
-			<value key="contentProvider" object-class="de.greenrobot.daogenerator.ContentProvider"/>
-			<value key="schema" object-class="de.greenrobot.daogenerator.Schema"/>
-		</resource>
-		<resource path="src-template/dao.ftl">
-			<value key="entity" object-class="de.greenrobot.daogenerator.Entity"/>
-			<value key="schema" object-class="de.greenrobot.daogenerator.Schema"/>
-		</resource>
-		<resource path="src-template/dao-deep.ftl">
-			<value key="entity" object-class="de.greenrobot.daogenerator.Entity"/>
-			<value key="schema" object-class="de.greenrobot.daogenerator.Schema"/>
-		</resource>
-		<resource path="src-template/entity.ftl">
-			<value key="entity" object-class="de.greenrobot.daogenerator.Entity"/>
-			<value key="schema" object-class="de.greenrobot.daogenerator.Schema"/>
-		</resource>
-		<resource path="src-template/dao-unit-test.ftl">
-			<value key="schema" object-class="de.greenrobot.daogenerator.Schema"/>
-			<value key="entity" object-class="de.greenrobot.daogenerator.Entity"/>
-		</resource>
-		<resource path="template/dao.ftl">
-			<value key="table" object-class="de.greenrobot.daogenerator.Entity"/>
-		</resource>
-	</context-values>
-	<macro-library>
-	</macro-library>
-</config>
\ No newline at end of file
diff --git a/DaoGenerator/.gitignore b/DaoGenerator/.gitignore
deleted file mode 100644
index 90ffd1f9..00000000
--- a/DaoGenerator/.gitignore
+++ /dev/null
@@ -1,5 +0,0 @@
-/test-out
-/release
-/bin
-/gradle.properties
-/build
diff --git a/DaoGenerator/.project b/DaoGenerator/.project
deleted file mode 100644
index 4d909547..00000000
--- a/DaoGenerator/.project
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>DaoGenerator</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.springsource.ide.eclipse.gradle.core.nature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-		<nature>org.eclipse.jdt.groovy.core.groovyNature</nature>
-	</natures>
-</projectDescription>
diff --git a/DaoGenerator/.settings/gradle/org.springsource.ide.eclipse.gradle.core.prefs b/DaoGenerator/.settings/gradle/org.springsource.ide.eclipse.gradle.core.prefs
deleted file mode 100644
index 734e6cba..00000000
--- a/DaoGenerator/.settings/gradle/org.springsource.ide.eclipse.gradle.core.prefs
+++ /dev/null
@@ -1,4 +0,0 @@
-#org.springsource.ide.eclipse.gradle.core.preferences.GradleProjectPreferences
-#Sun Feb 24 10:56:04 CET 2013
-org.springsource.ide.eclipse.gradle.linkedresources=
-org.springsource.ide.eclipse.gradle.rootprojectloc=
diff --git a/DaoGenerator/.settings/gradle/org.springsource.ide.eclipse.gradle.refresh.prefs b/DaoGenerator/.settings/gradle/org.springsource.ide.eclipse.gradle.refresh.prefs
deleted file mode 100644
index f6b5aef6..00000000
--- a/DaoGenerator/.settings/gradle/org.springsource.ide.eclipse.gradle.refresh.prefs
+++ /dev/null
@@ -1,3 +0,0 @@
-#org.springsource.ide.eclipse.gradle.core.actions.GradleRefreshPreferences
-#Sun Feb 24 10:56:15 CET 2013
-enableDSLD=true
diff --git a/DaoGenerator/.settings/org.eclipse.core.resources.prefs b/DaoGenerator/.settings/org.eclipse.core.resources.prefs
deleted file mode 100644
index 3d916f29..00000000
--- a/DaoGenerator/.settings/org.eclipse.core.resources.prefs
+++ /dev/null
@@ -1,2 +0,0 @@
-eclipse.preferences.version=1
-encoding/<project>=Cp1252
diff --git a/DaoGenerator/.settings/org.eclipse.jdt.core.prefs b/DaoGenerator/.settings/org.eclipse.jdt.core.prefs
deleted file mode 100644
index e2f40406..00000000
--- a/DaoGenerator/.settings/org.eclipse.jdt.core.prefs
+++ /dev/null
@@ -1,12 +0,0 @@
-#Fri Jul 22 21:20:49 CEST 2011
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.6
-org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.compiler.debug.localVariable=generate
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.6
diff --git a/DaoGenerator/.settings/org.eclipse.jdt.groovy.core.prefs b/DaoGenerator/.settings/org.eclipse.jdt.groovy.core.prefs
deleted file mode 100644
index 65c6dc88..00000000
--- a/DaoGenerator/.settings/org.eclipse.jdt.groovy.core.prefs
+++ /dev/null
@@ -1,2 +0,0 @@
-eclipse.preferences.version=1
-groovy.compiler.level=-1
diff --git a/DaoGenerator/settings.gradle b/DaoGenerator/settings.gradle
deleted file mode 100644
index 86014829..00000000
--- a/DaoGenerator/settings.gradle
+++ /dev/null
@@ -1 +0,0 @@
-rootProject.name = 'greendao-generator'
\ No newline at end of file
diff --git a/DaoTest/build.gradle b/DaoTest/build.gradle
index 4ba40c49..b49d09b3 100644
--- a/DaoTest/build.gradle
+++ b/DaoTest/build.gradle
@@ -4,7 +4,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:0.13.3'
+        classpath 'com.android.tools.build:gradle:1.0.0'
     }
 }
 
diff --git a/daogenerator/.gitignore b/daogenerator/.gitignore
new file mode 100644
index 00000000..796b96d1
--- /dev/null
+++ b/daogenerator/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/DaoGenerator/build.gradle b/daogenerator/build.gradle
similarity index 98%
rename from DaoGenerator/build.gradle
rename to daogenerator/build.gradle
index e25ff529..b72a258f 100644
--- a/DaoGenerator/build.gradle
+++ b/daogenerator/build.gradle
@@ -4,7 +4,7 @@ apply plugin: 'signing'
 
 group = 'de.greenrobot'
 version = '1.3.1'
-sourceCompatibility = 1.6
+sourceCompatibility = 1.7
 
 def isSnapshot = version.endsWith('-SNAPSHOT')
 def sonatypeRepositoryUrl
@@ -26,6 +26,7 @@ configurations {
 }
 
 dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
     compile ('org.freemarker:freemarker:2.3.20')
     testCompile 'junit:junit:4.11'
     // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4'
@@ -88,7 +89,7 @@ signing {
         println "Signing information missing/incomplete for ${project.name}"
     }
 }
-
+/*
 uploadArchives {
     repositories {
         mavenDeployer {
@@ -146,4 +147,5 @@ uploadArchives {
            }
         }
     }
-}
\ No newline at end of file
+}
+*/
\ No newline at end of file
diff --git a/DaoGenerator/java-formater.xml b/daogenerator/java-formater.xml
similarity index 100%
rename from DaoGenerator/java-formater.xml
rename to daogenerator/java-formater.xml
diff --git a/daogenerator/libs/freemarker.jar b/daogenerator/libs/freemarker.jar
new file mode 100644
index 00000000..b3673e22
Binary files /dev/null and b/daogenerator/libs/freemarker.jar differ
diff --git a/DaoGenerator/mybuild.xml b/daogenerator/mybuild.xml
similarity index 100%
rename from DaoGenerator/mybuild.xml
rename to daogenerator/mybuild.xml
diff --git a/DaoGenerator/performance/galaxy-nexus.xlsx b/daogenerator/performance/galaxy-nexus.xlsx
similarity index 100%
rename from DaoGenerator/performance/galaxy-nexus.xlsx
rename to daogenerator/performance/galaxy-nexus.xlsx
diff --git a/DaoGenerator/performance/performance-data.xlsx b/daogenerator/performance/performance-data.xlsx
similarity index 100%
rename from DaoGenerator/performance/performance-data.xlsx
rename to daogenerator/performance/performance-data.xlsx
diff --git a/daogenerator/settings.gradle b/daogenerator/settings.gradle
new file mode 100644
index 00000000..07152f72
--- /dev/null
+++ b/daogenerator/settings.gradle
@@ -0,0 +1 @@
+rootProject.name = 'greendao-generator-annotations'
\ No newline at end of file
diff --git a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java b/daogenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
similarity index 100%
rename from DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
rename to daogenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
diff --git a/daogenerator/src-template/annotation.ftl b/daogenerator/src-template/annotation.ftl
new file mode 100644
index 00000000..97b1d728
--- /dev/null
+++ b/daogenerator/src-template/annotation.ftl
@@ -0,0 +1,24 @@
+<#macro print_annotation annotation prefix>
+${prefix}@${annotation.name}<#rt>
+    <@compress single_line=true>
+        <#if annotation.parameters?has_content>
+            (
+            <#assign keys = annotation.parameters?keys>
+            <#list keys as key>
+                <#if key != annotation_no_name>
+                    ${key} =
+                </#if>
+                ${annotation.parameters[key]}<#t>
+                <#if key_has_next>,<#t> </#if>
+            </#list>
+            )
+        </#if>
+    </@compress>
+</#macro>
+
+<#macro print_annotations annotations prefix>
+    <#list annotations as annotation>
+        <@print_annotation annotation, prefix/>
+
+    </#list>
+</#macro>
\ No newline at end of file
diff --git a/DaoGenerator/src-template/content-provider.ftl b/daogenerator/src-template/content-provider.ftl
similarity index 100%
rename from DaoGenerator/src-template/content-provider.ftl
rename to daogenerator/src-template/content-provider.ftl
diff --git a/DaoGenerator/src-template/dao-deep.ftl b/daogenerator/src-template/dao-deep.ftl
similarity index 100%
rename from DaoGenerator/src-template/dao-deep.ftl
rename to daogenerator/src-template/dao-deep.ftl
diff --git a/DaoGenerator/src-template/dao-master.ftl b/daogenerator/src-template/dao-master.ftl
similarity index 100%
rename from DaoGenerator/src-template/dao-master.ftl
rename to daogenerator/src-template/dao-master.ftl
diff --git a/DaoGenerator/src-template/dao-session.ftl b/daogenerator/src-template/dao-session.ftl
similarity index 100%
rename from DaoGenerator/src-template/dao-session.ftl
rename to daogenerator/src-template/dao-session.ftl
diff --git a/DaoGenerator/src-template/dao-unit-test.ftl b/daogenerator/src-template/dao-unit-test.ftl
similarity index 100%
rename from DaoGenerator/src-template/dao-unit-test.ftl
rename to daogenerator/src-template/dao-unit-test.ftl
diff --git a/DaoGenerator/src-template/dao.ftl b/daogenerator/src-template/dao.ftl
similarity index 100%
rename from DaoGenerator/src-template/dao.ftl
rename to daogenerator/src-template/dao.ftl
diff --git a/DaoGenerator/src-template/entity.ftl b/daogenerator/src-template/entity-base.ftl
similarity index 80%
rename from DaoGenerator/src-template/entity.ftl
rename to daogenerator/src-template/entity-base.ftl
index e40c0a18..92e5633c 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/daogenerator/src-template/entity-base.ftl
@@ -17,6 +17,8 @@ You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
+<#include "*/annotation.ftl">
+
 <#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
 <#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
 <#assign complexTypes = ["String", "ByteArray", "Date"]/>
@@ -42,12 +44,13 @@ import ${additionalImport};
 // KEEP INCLUDES - put your custom includes here
 <#if keepIncludes?has_content>${keepIncludes!}</#if>// KEEP INCLUDES END
 <#else>
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 </#if>
 /**
  * Entity mapped to table ${entity.tableName}.
  */
-public class ${entity.className}<#if
+<@print_annotations entity.annotations, ""/>
+abstract public class ${entity.classNameBase}<#if
 entity.superclass?has_content> extends ${entity.superclass} </#if><#if
 entity.interfacesToImplement?has_content> implements <#list entity.interfacesToImplement
 as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
@@ -56,27 +59,28 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value. */
 </#if>
-    private ${property.javaType} ${property.propertyName};
+    <@print_annotations property.fieldAnnotations, "    "/>
+    protected ${property.javaType} ${property.propertyName};
 </#list>
 
 <#if entity.active>
     /** Used to resolve relations */
-    private transient DaoSession daoSession;
+    protected transient DaoSession daoSession;
 
     /** Used for active entity operations. */
-    private transient ${entity.classNameDao} myDao;
+    protected transient ${entity.classNameDao} myDao;
 
 <#list entity.toOneRelations as toOne>
-    private ${toOne.targetEntity.className} ${toOne.name};
+    protected ${toOne.targetEntity.className} ${toOne.name};
 <#if toOne.useFkProperty>
-    private ${toOne.resolvedKeyJavaType[0]} ${toOne.name}__resolvedKey;
+    protected ${toOne.resolvedKeyJavaType[0]} ${toOne.name}__resolvedKey;
 <#else>
-    private boolean ${toOne.name}__refreshed;
+    protected boolean ${toOne.name}__refreshed;
 </#if>
 
 </#list>
 <#list entity.toManyRelations as toMany>
-    private List<${toMany.targetEntity.className}> ${toMany.name};
+    protected List<${toMany.targetEntity.className}> ${toMany.name};
 </#list>
 
 </#if>
@@ -86,11 +90,12 @@ ${keepFields!}    // KEEP FIELDS END
 
 </#if>
 <#if entity.constructors>
-    public ${entity.className}() {
+    <@print_annotations entity.emptyConstructorAnnotations, "    "/>
+    public ${entity.classNameBase}() {
     }
 <#if entity.propertiesPk?has_content && entity.propertiesPk?size != entity.properties?size>
 
-    public ${entity.className}(<#list entity.propertiesPk as
+    public ${entity.classNameBase}(<#list entity.propertiesPk as
 property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
 <#list entity.propertiesPk as property>
         this.${property.propertyName} = ${property.propertyName};
@@ -98,7 +103,8 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     }
 </#if>
 
-    public ${entity.className}(<#list entity.properties as
+    <@print_annotations entity.fullConstructorAnnotations, "    "/>
+    public ${entity.classNameBase}(<#list entity.properties as
 property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
 <#list entity.properties as property>
         this.${property.propertyName} = ${property.propertyName};
@@ -118,6 +124,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value. */
 </#if>
+    <@print_annotations property.getterAnnotations, "    "/>
     public ${property.javaType} get${property.propertyName?cap_first}() {
         return ${property.propertyName};
     }
@@ -125,6 +132,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value; ensure this value is available before it is saved to the database. */
 </#if>
+    <@print_annotations property.setterAnnotations, "    "/>
     public void set${property.propertyName?cap_first}(${property.javaType} ${property.propertyName}) {
         this.${property.propertyName} = ${property.propertyName};
     }
@@ -139,19 +147,15 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     /** To-one relationship, resolved on first access. */
     public ${toOne.targetEntity.className} get${toOne.name?cap_first}() {
 <#if toOne.useFkProperty>
-        ${toOne.fkProperties[0].javaType} __key = this.${toOne.fkProperties[0].propertyName};
         if (${toOne.name}__resolvedKey == null || <#--
-        --><#if toOne.resolvedKeyUseEquals[0]>!${toOne.name}__resolvedKey.equals(__key)<#--
-        --><#else>${toOne.name}__resolvedKey != __key</#if>) {
+        --><#if toOne.resolvedKeyUseEquals[0]>!${toOne.name}__resolvedKey.equals(${toOne.fkProperties[0].propertyName})<#--
+        --><#else>${toOne.name}__resolvedKey != ${toOne.fkProperties[0].propertyName}</#if>) {
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
             }
             ${toOne.targetEntity.classNameDao} targetDao = daoSession.get${toOne.targetEntity.classNameDao?cap_first}();
-            ${toOne.targetEntity.className} ${toOne.name}New = targetDao.load(__key);
-            synchronized (this) {
-                ${toOne.name} = ${toOne.name}New;
-            	${toOne.name}__resolvedKey = __key;
-            }
+            ${toOne.name} = targetDao.load(${toOne.fkProperties[0].propertyName});
+            ${toOne.name}__resolvedKey = ${toOne.fkProperties[0].propertyName};
         }
 <#else>
         if (${toOne.name} != null || !${toOne.name}__refreshed) {
@@ -179,15 +183,13 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
             throw new DaoException("To-one property '${toOne.fkProperties[0].propertyName}' has not-null constraint; cannot set to-one to null");
         }
 </#if>
-        synchronized (this) {
-            this.${toOne.name} = ${toOne.name};
-<#if toOne.useFkProperty>        
-            ${toOne.fkProperties[0].propertyName} = <#if !toOne.fkProperties[0].notNull>${toOne.name} == null ? null : </#if>${toOne.name}.get${toOne.targetEntity.pkProperty.propertyName?cap_first}();
-            ${toOne.name}__resolvedKey = ${toOne.fkProperties[0].propertyName};
+        this.${toOne.name} = ${toOne.name};
+<#if toOne.useFkProperty>
+        ${toOne.fkProperties[0].propertyName} = <#if !toOne.fkProperties[0].notNull>${toOne.name} == null ? null : </#if>${toOne.name}.get${toOne.targetEntity.pkProperty.propertyName?cap_first}();
+        ${toOne.name}__resolvedKey = ${toOne.fkProperties[0].propertyName};
 <#else>
-            ${toOne.name}__refreshed = true;
+        ${toOne.name}__refreshed = true;
 </#if>
-        }
     }
 
 </#list>
@@ -198,19 +200,14 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 -->
 <#list entity.toManyRelations as toMany>
     /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
-    public List<${toMany.targetEntity.className}> get${toMany.name?cap_first}() {
+    public synchronized List<${toMany.targetEntity.className}> get${toMany.name?cap_first}() {
         if (${toMany.name} == null) {
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
             }
             ${toMany.targetEntity.classNameDao} targetDao = daoSession.get${toMany.targetEntity.classNameDao?cap_first}();
-            List<${toMany.targetEntity.className}> ${toMany.name}New = targetDao._query${toMany.sourceEntity.className?cap_first}_${toMany.name?cap_first}(<#--
+            ${toMany.name} = targetDao._query${toMany.sourceEntity.className?cap_first}_${toMany.name?cap_first}(<#--
                 --><#list toMany.sourceProperties as property>${property.propertyName}<#if property_has_next>, </#if></#list>);
-            synchronized (this) {<#-- Check if another thread was faster, we cannot lock while doing the query to prevent deadlocks -->
-                if(${toMany.name} == null) {
-                    ${toMany.name} = ${toMany.name}New;
-                }
-            }
         }
         return ${toMany.name};
     }
@@ -231,24 +228,24 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     public void delete() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.delete(this);
+        }
+        myDao.delete((${entity.className})this);
     }
 
     /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
     public void update() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.update(this);
+        }
+        myDao.update((${entity.className})this);
     }
 
     /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
     public void refresh() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.refresh(this);
+        }
+        myDao.refresh((${entity.className})this);
     }
 
 </#if>
@@ -257,4 +254,4 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 ${keepMethods!}    // KEEP METHODS END
 
 </#if>
-}
+}
\ No newline at end of file
diff --git a/daogenerator/src-template/entity.ftl b/daogenerator/src-template/entity.ftl
new file mode 100644
index 00000000..d412f2e4
--- /dev/null
+++ b/daogenerator/src-template/entity.ftl
@@ -0,0 +1,71 @@
+<#include "*/annotation.ftl">
+<#--
+Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+
+This file is part of greenDAO Generator.
+
+greenDAO Generator is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+greenDAO Generator is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+-->
+package ${entity.javaPackage};
+
+<#if entity.additionalImportsEntity?has_content>
+<#list entity.additionalImportsEntity as additionalImport>
+import ${additionalImport};
+</#list>
+</#if>
+
+
+<#if entity.hasKeepSections>
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+<#if keepIncludes?has_content>${keepIncludes!}</#if>// KEEP INCLUDES END
+<#else>
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+</#if>
+/**
+ * Entity mapped to table ${entity.tableName}.
+ */
+<@print_annotations entity.annotations, ""/>
+public class ${entity.className} extends ${entity.classNameBase} <#if
+entity.interfacesToImplement?has_content> implements <#list entity.interfacesToImplement
+as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
+<#if entity.hasKeepSections>
+    // KEEP FIELDS - put your custom fields here
+${keepFields!}    // KEEP FIELDS END
+</#if>
+<#if entity.constructors>
+    public ${entity.className}() {
+    }
+<#if entity.propertiesPk?has_content && entity.propertiesPk?size != entity.properties?size>
+
+    public ${entity.className}(<#list entity.propertiesPk as
+property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
+<#list entity.propertiesPk as property>
+        super(${property.propertyName});
+</#list>
+    }
+</#if>
+
+    public ${entity.className}(<#list entity.properties as
+property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
+        super(<#list entity.properties as
+        property>${property.propertyName}<#if property_has_next>, </#if></#list>);
+    }
+</#if>
+
+<#if entity.hasKeepSections>
+    // KEEP METHODS - put your custom methods here
+${keepMethods!}    // KEEP METHODS END
+
+</#if>
+}
\ No newline at end of file
diff --git a/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java b/daogenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
similarity index 100%
rename from DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
rename to daogenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
diff --git a/daogenerator/src/de/greenrobot/daogenerator/Annotation.java b/daogenerator/src/de/greenrobot/daogenerator/Annotation.java
new file mode 100644
index 00000000..33ff123d
--- /dev/null
+++ b/daogenerator/src/de/greenrobot/daogenerator/Annotation.java
@@ -0,0 +1,46 @@
+package de.greenrobot.daogenerator;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.regex.Pattern;
+
+/**
+ * Model class for an Annotation that can be attached to classses, properties or methods
+ * @author yigit@path.com
+ */
+public class Annotation {
+    private String name;
+    private Map<String, String> parameters = new HashMap<String, String>();
+    public static Pattern QUOTE = Pattern.compile("\"");
+
+    //we use this if Annotation has only 1 parameter
+    public static final String NO_NAME = "__no_name";
+    public static final String NULL = "null";
+
+    public Annotation(String name, String... params) {
+        this.name = name;
+        this.parameters = new HashMap<String, String>();
+        if(params.length > 1 && params.length % 2 != 0) {
+            throw new RuntimeException("annotation parameters should be key value pairs");
+        }
+        if(params.length == 1) {
+            this.parameters.put(NO_NAME, params[0] == null ? NULL : params[0]);
+        } else {
+            for(int i = 0; i < params.length; i += 2) {
+                this.parameters.put(params[i], params[i + 1] == null ? NULL : params[i + 1]);
+            }
+        }
+    }
+
+    public Annotation(String name) {
+        this.name = name;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public Map<String, String> getParameters() {
+        return parameters;
+    }
+}
\ No newline at end of file
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/ContentProvider.java b/daogenerator/src/de/greenrobot/daogenerator/ContentProvider.java
similarity index 100%
rename from DaoGenerator/src/de/greenrobot/daogenerator/ContentProvider.java
rename to daogenerator/src/de/greenrobot/daogenerator/ContentProvider.java
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/daogenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
similarity index 89%
rename from DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
rename to daogenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index 0f9ecdd8..04b04b51 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -45,6 +45,7 @@
     private Template templateDao;
     private Template templateDaoMaster;
     private Template templateDaoSession;
+    private Template templateEntityBase;
     private Template templateEntity;
     private Template templateDaoUnitTest;
     private Template templateContentProvider;
@@ -65,6 +66,7 @@ public DaoGenerator() throws IOException {
         templateDao = config.getTemplate("dao.ftl");
         templateDaoMaster = config.getTemplate("dao-master.ftl");
         templateDaoSession = config.getTemplate("dao-session.ftl");
+        templateEntityBase = config.getTemplate("entity-base.ftl");
         templateEntity = config.getTemplate("entity.ftl");
         templateDaoUnitTest = config.getTemplate("dao-unit-test.ftl");
         templateContentProvider = config.getTemplate("content-provider.ftl");
@@ -76,16 +78,22 @@ private Pattern compilePattern(String sectionName) {
                 + " END.*?\n", flags);
     }
 
+    /** Generates all entities and DAOs for the given schema. */
+    public void generateAll(Schema schema, String outDir, String outDirModel) throws Exception {
+        generateAll(schema, outDir, outDirModel, null);
+    }
+
     /** Generates all entities and DAOs for the given schema. */
     public void generateAll(Schema schema, String outDir) throws Exception {
-        generateAll(schema, outDir, null);
+        generateAll(schema, outDir, null, null);
     }
 
     /** Generates all entities and DAOs for the given schema. */
-    public void generateAll(Schema schema, String outDir, String outDirTest) throws Exception {
+    public void generateAll(Schema schema, String outDir, String outDirModel, String outDirTest) throws Exception {
         long start = System.currentTimeMillis();
 
         File outDirFile = toFileForceExists(outDir);
+        File outDirModelFile = outDirModel == null ? outDirFile : toFileForceExists(outDirModel);
 
         File outDirTestFile = null;
         if (outDirTest != null) {
@@ -101,7 +109,9 @@ public void generateAll(Schema schema, String outDir, String outDirTest) throws
         for (Entity entity : entities) {
             generate(templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(), schema, entity);
             if (!entity.isProtobuf() && !entity.isSkipGeneration()) {
-                generate(templateEntity, outDirFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
+                //generate(templateEntity, outDirFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
+                generate(templateEntity, outDirModelFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
+                generate(templateEntityBase, outDirFile, entity.getJavaPackage(), entity.getClassNameBase(), schema, entity);
             }
             if (outDirTestFile != null && !entity.isSkipGenerationTest()) {
                 String javaPackageTest = entity.getJavaPackageTest();
@@ -146,6 +156,7 @@ private void generate(Template template, File outDirFile, String javaPackage, St
         Map<String, Object> root = new HashMap<String, Object>();
         root.put("schema", schema);
         root.put("entity", entity);
+        root.put("annotation_no_name", Annotation.NO_NAME);
         if (additionalObjectsForTemplate != null) {
             root.putAll(additionalObjectsForTemplate);
         }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoUtil.java b/daogenerator/src/de/greenrobot/daogenerator/DaoUtil.java
similarity index 100%
rename from DaoGenerator/src/de/greenrobot/daogenerator/DaoUtil.java
rename to daogenerator/src/de/greenrobot/daogenerator/DaoUtil.java
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/daogenerator/src/de/greenrobot/daogenerator/Entity.java
similarity index 91%
rename from DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
rename to daogenerator/src/de/greenrobot/daogenerator/Entity.java
index dc8b1049..71df4dec 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -36,6 +36,7 @@
 public class Entity {
     private final Schema schema;
     private final String className;
+    private final String classNameBase;
     private final List<Property> properties;
     private List<Property> propertiesColumns;
     private final List<Property> propertiesPk;
@@ -48,6 +49,9 @@
     private final Collection<String> additionalImportsEntity;
     private final Collection<String> additionalImportsDao;
     private final List<String> interfacesToImplement;
+    private final List<Annotation> annotations;
+    private final List<Annotation> emptyConstructorAnnotations;
+    private final List<Annotation> fullConstructorAnnotations;
     private final List<ContentProvider> contentProviders;
 
     private String tableName;
@@ -71,6 +75,7 @@
     Entity(Schema schema, String className) {
         this.schema = schema;
         this.className = className;
+        this.classNameBase = className + "Base";
         properties = new ArrayList<Property>();
         propertiesPk = new ArrayList<Property>();
         propertiesNonPk = new ArrayList<Property>();
@@ -82,6 +87,9 @@
         additionalImportsEntity = new TreeSet<String>();
         additionalImportsDao = new TreeSet<String>();
         interfacesToImplement = new ArrayList<String>();
+        annotations = new ArrayList<Annotation>();
+        emptyConstructorAnnotations = new ArrayList<Annotation>();
+        fullConstructorAnnotations = new ArrayList<Annotation>();
         contentProviders = new ArrayList<ContentProvider>();
         constructors = true;
     }
@@ -227,6 +235,21 @@ protected void addIncomingToMany(ToMany toMany) {
         incomingToManyRelations.add(toMany);
     }
 
+    public Entity addAnnotation(Annotation annotation) {
+        this.annotations.add(annotation);
+        return this;
+    }
+
+    public Entity addEmptyConstructorAnnotation(Annotation annotation) {
+        this.emptyConstructorAnnotations.add(annotation);
+        return this;
+    }
+
+    public Entity addFullConstructorAnnotation(Annotation annotation) {
+        this.fullConstructorAnnotations.add(annotation);
+        return this;
+    }
+
     public ContentProvider addContentProvider() {
         List<Entity> entities = new ArrayList<Entity>();
         ContentProvider contentProvider = new ContentProvider(schema, entities);
@@ -266,6 +289,10 @@ public String getClassName() {
         return className;
     }
 
+    public String getClassNameBase() {
+        return classNameBase;
+    }
+
     public List<Property> getProperties() {
         return properties;
     }
@@ -415,6 +442,18 @@ public void setHasKeepSections(Boolean hasKeepSections) {
         return interfacesToImplement;
     }
 
+    public List<Annotation> getAnnotations() {
+        return annotations;
+    }
+
+    public List<Annotation> getEmptyConstructorAnnotations() {
+        return emptyConstructorAnnotations;
+    }
+
+    public List<Annotation> getFullConstructorAnnotations() {
+        return fullConstructorAnnotations;
+    }
+
     public List<ContentProvider> getContentProviders() {
         return contentProviders;
     }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Index.java b/daogenerator/src/de/greenrobot/daogenerator/Index.java
similarity index 100%
rename from DaoGenerator/src/de/greenrobot/daogenerator/Index.java
rename to daogenerator/src/de/greenrobot/daogenerator/Index.java
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/daogenerator/src/de/greenrobot/daogenerator/Property.java
similarity index 83%
rename from DaoGenerator/src/de/greenrobot/daogenerator/Property.java
rename to daogenerator/src/de/greenrobot/daogenerator/Property.java
index f54d05e8..22944c6e 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/Property.java
@@ -17,6 +17,9 @@
  */
 package de.greenrobot.daogenerator;
 
+import java.util.List;
+import java.util.ArrayList;
+
 /** Model class for an entity's property: a Java property mapped to a data base column. */
 public class Property {
 
@@ -54,6 +57,21 @@ public PropertyBuilder primaryKeyDesc() {
             return this;
         }
 
+        public PropertyBuilder addFieldAnnotation(Annotation annotation) {
+            property.fieldAnnotations.add(annotation);
+            return this;
+        }
+
+        public PropertyBuilder addSetterAnnotation(Annotation annotation) {
+            property.setterAnnotations.add(annotation);
+            return this;
+        }
+
+        public PropertyBuilder addGetterAnnotation(Annotation annotation) {
+            property.getterAnnotations.add(annotation);
+            return this;
+        }
+
         public PropertyBuilder autoincrement() {
             if (!property.primaryKey || property.propertyType != PropertyType.Long) {
                 throw new RuntimeException(
@@ -123,6 +141,10 @@ public Property getProperty() {
     private boolean unique;
     private boolean notNull;
 
+    private List<Annotation> fieldAnnotations = new ArrayList<Annotation>();
+    private List<Annotation> setterAnnotations = new ArrayList<Annotation>();
+    private List<Annotation> getterAnnotations = new ArrayList<Annotation>();
+
     /** Initialized in 2nd pass */
     private String constraints;
 
@@ -193,6 +215,18 @@ public Entity getEntity() {
         return entity;
     }
 
+    public List<Annotation> getFieldAnnotations() {
+        return fieldAnnotations;
+    }
+
+    public List<Annotation> getSetterAnnotations() {
+        return setterAnnotations;
+    }
+
+    public List<Annotation> getGetterAnnotations() {
+        return getterAnnotations;
+    }
+
     void init2ndPass() {
         initConstraint();
         if (columnType == null) {
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/PropertyOrderList.java b/daogenerator/src/de/greenrobot/daogenerator/PropertyOrderList.java
similarity index 100%
rename from DaoGenerator/src/de/greenrobot/daogenerator/PropertyOrderList.java
rename to daogenerator/src/de/greenrobot/daogenerator/PropertyOrderList.java
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java b/daogenerator/src/de/greenrobot/daogenerator/PropertyType.java
similarity index 100%
rename from DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java
rename to daogenerator/src/de/greenrobot/daogenerator/PropertyType.java
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Query.java b/daogenerator/src/de/greenrobot/daogenerator/Query.java
similarity index 100%
rename from DaoGenerator/src/de/greenrobot/daogenerator/Query.java
rename to daogenerator/src/de/greenrobot/daogenerator/Query.java
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/QueryParam.java b/daogenerator/src/de/greenrobot/daogenerator/QueryParam.java
similarity index 100%
rename from DaoGenerator/src/de/greenrobot/daogenerator/QueryParam.java
rename to daogenerator/src/de/greenrobot/daogenerator/QueryParam.java
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java b/daogenerator/src/de/greenrobot/daogenerator/Schema.java
similarity index 100%
rename from DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
rename to daogenerator/src/de/greenrobot/daogenerator/Schema.java
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/ToMany.java b/daogenerator/src/de/greenrobot/daogenerator/ToMany.java
similarity index 96%
rename from DaoGenerator/src/de/greenrobot/daogenerator/ToMany.java
rename to daogenerator/src/de/greenrobot/daogenerator/ToMany.java
index 67ca76aa..89aa9081 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/ToMany.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/ToMany.java
@@ -17,6 +17,7 @@
  */
 package de.greenrobot.daogenerator;
 
+import java.lang.System;
 import java.util.List;
 
 /** To-many relationship from a source entity to many target entitites. */
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/ToOne.java b/daogenerator/src/de/greenrobot/daogenerator/ToOne.java
similarity index 100%
rename from DaoGenerator/src/de/greenrobot/daogenerator/ToOne.java
rename to daogenerator/src/de/greenrobot/daogenerator/ToOne.java
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 54df5249..5fc04e34 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Sat May 24 08:38:11 CEST 2014
+#Mon Feb 16 19:28:59 NOVT 2015
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=http\://services.gradle.org/distributions/gradle-2.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
