diff --git a/DaoCore/src/de/greenrobot/dao/query/BaseBuilder.java b/DaoCore/src/de/greenrobot/dao/query/BaseBuilder.java
index aa57c1bd..1f19bbc0 100644
--- a/DaoCore/src/de/greenrobot/dao/query/BaseBuilder.java
+++ b/DaoCore/src/de/greenrobot/dao/query/BaseBuilder.java
@@ -6,7 +6,7 @@
 
 public class BaseBuilder {
 
-	private Dao<?, ?> mDao;
+	protected Dao<?, ?> mDao;
     protected StringBuilder orderBuilder;
 	
 	protected BaseBuilder(Dao<?, ?> dao) {
diff --git a/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java b/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
index bfd16289..ba5e0a8a 100644
--- a/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
+++ b/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
@@ -22,7 +22,6 @@
 import android.database.Cursor;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.AbstractDaoSession;
-import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.DaoLog;
 import de.greenrobot.dao.InternalQueryDaoAccess;
 import de.greenrobot.dao.Property;
@@ -30,7 +29,6 @@
 import de.greenrobot.dao.internal.SqlUtils;
 import de.greenrobot.dao.join.JoinBuilder;
 import de.greenrobot.dao.join.JoinType;
-import de.greenrobot.dao.query.WhereCondition.PropertyCondition;
 
 /**
  * Builds custom entity queries using constraints and parameters and without SQL (QueryBuilder creates SQL for you). To
@@ -158,7 +156,7 @@ protected WhereCondition combineWhereConditions(String combineOp, WhereCondition
     }
 
     protected void addCondition(StringBuilder builder, List<Object> values, WhereCondition condition) {
-        condition.appendTo(builder, tablePrefix);
+        condition.appendTo(builder, mDao.getTablename());
         condition.appendValuesTo(values);
     }
 
@@ -520,7 +518,7 @@ private void appendWhereClause(StringBuilder builder, String tablePrefixOrNull)
                     builder.append(" AND ");
                 }
                 WhereCondition condition = iter.next();
-                condition.appendTo(builder, tablePrefixOrNull);
+                condition.appendTo(builder, mDao.getTablename());
                 condition.appendValuesTo(values);
             }
         }
diff --git a/DaoCore/src/de/greenrobot/dao/query/UnionQueryBuilder.java b/DaoCore/src/de/greenrobot/dao/query/UnionQueryBuilder.java
index 3cb96019..4eaa5818 100644
--- a/DaoCore/src/de/greenrobot/dao/query/UnionQueryBuilder.java
+++ b/DaoCore/src/de/greenrobot/dao/query/UnionQueryBuilder.java
@@ -21,6 +21,9 @@
 	private List<QueryBuilder<?>> mQueryBuilders;
 	private AbstractDao<?, ?> mDao;
 	
+	private String mSql;
+	private ArrayList<String> mParameters;
+	
 	protected UnionQueryBuilder(AbstractDao<?, ?> dao) {
 		super(dao);
 		
@@ -64,14 +67,14 @@ public UnionQueryBuilder orderRaw(String rawOrder) {
         orderRawInternal(rawOrder);
         return this;
     }
+    
+    public String getSql() {
+    	build();
+    	return mSql;
+    }
 	
-	/**
-	 * Builds the union query and executes to return a cursor
-	 * @return Cursor for the results of the query
-	 */
-	public Cursor cursor() {
-		
-		boolean first = true;
+    private void build() {
+    	boolean first = true;
 
 		ArrayList<String> parameters = new ArrayList<String>();
 		
@@ -98,6 +101,16 @@ public Cursor cursor() {
 			sql.append(" ORDER BY ").append(orderBuilder);
 		}
 		
-		return mDao.getDatabase().rawQuery(sql.toString(), parameters.toArray(new String[parameters.size()]));
+		mSql = sql.toString();
+		mParameters = parameters;
+    }
+	/**
+	 * Builds the union query and executes to return a cursor
+	 * @return Cursor for the results of the query
+	 */
+	public Cursor cursor() {
+		
+		build();
+		return mDao.getDatabase().rawQuery(mSql, mParameters.toArray(new String[mParameters.size()]));
 	}
 }
diff --git a/DaoCore/src/de/greenrobot/dao/query/WhereCondition.java b/DaoCore/src/de/greenrobot/dao/query/WhereCondition.java
index 2a8b626a..1580318d 100644
--- a/DaoCore/src/de/greenrobot/dao/query/WhereCondition.java
+++ b/DaoCore/src/de/greenrobot/dao/query/WhereCondition.java
@@ -27,7 +27,7 @@
  */
 public interface WhereCondition {
 
-    void appendTo(StringBuilder builder, String tableAlias);
+    void appendTo(StringBuilder builder, String masterTablePrefix);
 
     void appendValuesTo(List<Object> values);
 
@@ -135,11 +135,19 @@ public PropertyCondition(Property property, String op, Object[] values) {
         }
 
         @Override
-        public void appendTo(StringBuilder builder, String tableAlias) {
-            if (tableAlias != null) {
-                builder.append(tableAlias).append('.');
+        public void appendTo(StringBuilder builder, String masterTablePrefix) {
+        	
+        	String prefix = property.getColumnPrefix();
+        	
+            if (prefix != null && prefix.length() > 0) {
+            	
+            	if(prefix.equals(masterTablePrefix)) {
+            		builder.append("T.");
+            	} else {
+            		builder.append(prefix).append('.');	
+            	}
             }
-            builder.append('\'').append(property.columnName).append('\'').append(op);
+            builder.append('\'').append(property.getColumnName()).append('\'').append(op);
         }
     }
 
@@ -162,7 +170,7 @@ public StringCondition(String string, Object... values) {
         }
 
         @Override
-        public void appendTo(StringBuilder builder, String tableAlias) {
+        public void appendTo(StringBuilder builder, String masterTablePrefix) {
             builder.append(string);
         }
 
diff --git a/DaoCore/src/de/greenrobot/dao/selectable/SqlSelectable.java b/DaoCore/src/de/greenrobot/dao/selectable/SqlSelectable.java
index 86dea5e2..5fc1f85f 100644
--- a/DaoCore/src/de/greenrobot/dao/selectable/SqlSelectable.java
+++ b/DaoCore/src/de/greenrobot/dao/selectable/SqlSelectable.java
@@ -1,5 +1,6 @@
 package de.greenrobot.dao.selectable;
 
+import de.greenrobot.dao.Property;
 import de.greenrobot.dao.Selectable;
 
 public class SqlSelectable implements Selectable {
@@ -22,6 +23,12 @@ public SqlSelectable as(String columnName) {
 		
 		return this;
 	}
+	
+	public SqlSelectable as(Property property) {
+		mColumnName = property.columnName;
+		
+		return this;
+	}
 
 	@Override
 	public String getColumnName() {
