diff --git a/DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java b/DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java
index e380577c..a8d49e6f 100644
--- a/DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java
+++ b/DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java
@@ -21,12 +21,18 @@
 public class SqlUtils {
 
     public static StringBuilder appendColumn(StringBuilder builder, String column) {
-        builder.append('\'').append(column).append('\'');
+        builder.append(column);
         return builder;
     }
 
     public static StringBuilder appendColumn(StringBuilder builder, String tableAlias, String column) {
-        builder.append(tableAlias).append(".'").append(column).append('\'');
+    	
+    	if(tableAlias.length() > 0) {
+    		builder.append(tableAlias).append(".'").append(column).append('\'');	
+    	} else {
+    		builder.append(column);
+    	}
+        
         return builder;
     }
 
diff --git a/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java b/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
index 753d7fe2..ec6d5f66 100644
--- a/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
+++ b/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
@@ -31,6 +31,7 @@
     private SQLiteStatement deleteStatement;
 
     private volatile String selectAll;
+    private volatile String selectColumns;
     private volatile String selectByKey;
     private volatile String selectByRowId;
     private volatile String selectKeys;
@@ -92,10 +93,10 @@ public String getSelectColumns(String[] columns, String[] aliases) {
     
     /** ends with an space to simplify appending to this string. */
     public String getSelectColumns(String[] columns, String[] aliases, boolean distinct) {
-        if (selectAll == null) {
-            selectAll = SqlUtils.createSqlSelect(tablename, aliases, "T", columns, distinct);
+        if (selectColumns == null) {
+        	selectColumns = SqlUtils.createSqlSelect(tablename, aliases, "T", columns, distinct);
         }
-        return selectAll;
+        return selectColumns;
     }
 
     public String getSelectKeys() {
diff --git a/DaoCore/src/de/greenrobot/dao/query/Query.java b/DaoCore/src/de/greenrobot/dao/query/Query.java
index f0164bc3..e295360f 100644
--- a/DaoCore/src/de/greenrobot/dao/query/Query.java
+++ b/DaoCore/src/de/greenrobot/dao/query/Query.java
@@ -130,7 +130,17 @@ public void setOffset(int offset) {
      * @return				The values of the property for all matches
      */
     public List<String> listOfFieldAsString(Property property) {
-    	List<Object> values = listOfField(property, FieldType.String);
+    	return listOfFieldAsString(property.columnName);
+    }
+    
+    /**
+     * Returns a single string field of a list of results
+     * @param columnName	The column name to retrieve
+     * @param fieldType		The type of the property
+     * @return				The values of the property for all matches
+     */
+    public List<String> listOfFieldAsString(String columnName) {
+    	List<Object> values = listOfField(columnName, FieldType.String);
     	
     	List<String> typedValues = new ArrayList<String>();
     	
@@ -148,7 +158,17 @@ public void setOffset(int offset) {
      * @return				The values of the property for all matches
      */
     public List<Double> listOfFieldAsDouble(Property property) {
-    	List<Object> values = listOfField(property, FieldType.Double);
+    	return listOfFieldAsDouble(property.columnName);
+    }
+    
+    /**
+     * Returns a double field of a list of results
+     * @param columnName	The column name to retrieve
+     * @param fieldType		The type of the property
+     * @return				The values of the property for all matches
+     */
+    public List<Double> listOfFieldAsDouble(String columnName) {
+    	List<Object> values = listOfField(columnName, FieldType.Double);
     	
     	List<Double> typedValues = new ArrayList<Double>();
     	
@@ -160,13 +180,23 @@ public void setOffset(int offset) {
     }
     
     /**
-     * Returns an integer field of a list of results
+     * Returns an int field of a list of results
      * @param property		The property to retrieve
      * @param fieldType		The type of the property
      * @return				The values of the property for all matches
      */
     public List<Integer> listOfFieldAsInt(Property property) {
-    	List<Object> values = listOfField(property, FieldType.Int);
+    	return listOfFieldAsInt(property.columnName);
+    }
+    
+    /**
+     * Returns an int field of a list of results
+     * @param columnName	The column name to retrieve
+     * @param fieldType		The type of the property
+     * @return				The values of the property for all matches
+     */
+    public List<Integer> listOfFieldAsInt(String columnName) {
+    	List<Object> values = listOfField(columnName, FieldType.Int);
     	
     	List<Integer> typedValues = new ArrayList<Integer>();
     	
@@ -184,7 +214,17 @@ public void setOffset(int offset) {
      * @return				The values of the property for all matches
      */
     public List<Long> listOfFieldAsLong(Property property) {
-    	List<Object> values = listOfField(property, FieldType.Long);
+    	return listOfFieldAsLong(property.columnName);
+    }
+    
+    /**
+     * Returns a long field of a list of results
+     * @param columnName	The column name to retrieve
+     * @param fieldType		The type of the property
+     * @return				The values of the property for all matches
+     */
+    public List<Long> listOfFieldAsLong(String columnName) {
+    	List<Object> values = listOfField(columnName, FieldType.Long);
     	
     	List<Long> typedValues = new ArrayList<Long>();
     	
@@ -196,13 +236,23 @@ public void setOffset(int offset) {
     }
     
     /**
-     * Returns a byte array string field of a list of results
+     * Returns a byte array field of a list of results
      * @param property		The property to retrieve
      * @param fieldType		The type of the property
      * @return				The values of the property for all matches
      */
     public List<Byte[]> listOfFieldAsByteArray(Property property) {
-    	List<Object> values = listOfField(property, FieldType.ByteArray);
+    	return listOfFieldAsByteArray(property.columnName);
+    }
+    
+    /**
+     * Returns a byte array field of a list of results
+     * @param columnName	The column name to retrieve
+     * @param fieldType		The type of the property
+     * @return				The values of the property for all matches
+     */
+    public List<Byte[]> listOfFieldAsByteArray(String columnName) {
+    	List<Object> values = listOfField(columnName, FieldType.ByteArray);
     	
     	List<Byte[]> typedValues = new ArrayList<Byte[]>();
     	
@@ -284,17 +334,34 @@ public Object uniqueField(Property property, FieldType fieldType) {
      * @return				The values of the property for all matches
      */
     public List<Object> listOfField(Property property, FieldType fieldType) {
+    	return listOfField(property.columnName, fieldType);
+    }
+    
+    /**
+     * Returns a single field of a list of results
+     * @param property		The property to retrieve
+     * @param fieldType		The type of the property
+     * @return				The values of the property for all matches
+     */
+    public List<Object> listOfField(String columnName, FieldType fieldType) {
     	checkThread();
         Cursor cursor = dao.getDatabase().rawQuery(sql, parameters);
         
         List<Object> toReturn = new ArrayList<Object>();
         
-        int columnIndex = cursor.getColumnIndex(property.columnName);
-        
-        while(cursor.moveToNext()) {
-        	toReturn.add(getValueFromCursor(cursor, columnIndex, fieldType));
+        if(cursor.getCount() > 0) {
+	        int columnIndex = cursor.getColumnIndex(columnName);
+	        
+	        if(columnIndex == -1) {
+	        	columnIndex = cursor.getColumnIndex("'" + columnName + "'");
+	        }
+	        
+	        if(columnIndex != -1) {
+	        	while(cursor.moveToNext()) {
+		        	toReturn.add(getValueFromCursor(cursor, columnIndex, fieldType));
+		        }	
+	        }
         }
-        
         return toReturn;
     }
     
diff --git a/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java b/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
index 8c310bf1..5346da17 100644
--- a/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
+++ b/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
@@ -121,6 +121,15 @@ private void checkOrderBuilder() {
         whereConditions.add(or(cond1, cond2, condMore));
         return this;
     }
+    
+    /**
+     * Adds the given conditions to the where clause using an logical OR. To create new conditions, use the properties
+     * given in the generated dao classes.
+     */
+    public QueryBuilder<T> whereAnd(WhereCondition cond1, WhereCondition cond2, WhereCondition... condMore) {
+        whereConditions.add(and(cond1, cond2, condMore));
+        return this;
+    }
 
     /**
      * Creates a WhereCondition by combining the given conditions using OR. The returned WhereCondition must be used
@@ -369,6 +378,32 @@ private void orderAscOrDesc(String ascOrDescWithLeadingSpace, Property... proper
     	return this;
     }
     
+    /**
+     * Sets the properties that will be returned. For use only if retrieving a Cursor using .cursor().
+     * The strings to be passed in will need to be qualified if necessary with table identifiers.
+     * @param properties
+     * @return
+     */
+    public QueryBuilder<T> select(String... columnNames) {
+    	
+    	selectColumns = new String[columnNames.length];
+    	tableAliases = new String[columnNames.length];
+    	
+    	for(int ii = 0; ii < columnNames.length; ii++) {
+   		
+    		final int dotIndex = columnNames[ii].indexOf('.');
+    		if(dotIndex > -1) {
+    			selectColumns[ii] = columnNames[ii].substring(dotIndex + 1);
+    			tableAliases[ii] = columnNames[ii].substring(0, dotIndex);
+    		} else {
+    			selectColumns[ii] = columnNames[ii];
+    			tableAliases[ii] = "";
+    		}
+    	}
+    	
+    	return this;
+    }
+    
     public boolean isMasterTable(String tableName) {
     	return dao.getTablename().equalsIgnoreCase(tableName);
     }
@@ -548,9 +583,61 @@ private void appendWhereClause(StringBuilder builder, String tablePrefixOrNull)
         return select(property).build().listOfFieldAsString(property);
     }
     
+    public List<String> listOfFieldAsString(String columnName) {
+        return select(columnName).build().listOfFieldAsString(columnName);
+    }
+    
     public String uniqueFieldAsString(Property property) {
         return select(property).build().uniqueFieldAsString(property);
     }
+    
+    public List<Double> listOfFieldAsDouble(Property property) {
+        return select(property).build().listOfFieldAsDouble(property);
+    }
+    
+    public List<Double> listOfFieldAsDouble(String columnName) {
+        return select(columnName).build().listOfFieldAsDouble(columnName);
+    }
+    
+    public Double uniqueFieldAsDouble(Property property) {
+        return select(property).build().uniqueFieldAsDouble(property);
+    }
+    
+    public List<Integer> listOfFieldAsInteger(Property property) {
+        return select(property).build().listOfFieldAsInt(property);
+    }
+    
+    public List<Integer> listOfFieldAsInteger(String columnName) {
+        return select(columnName).build().listOfFieldAsInt(columnName);
+    }
+    
+    public Integer uniqueFieldAsInteger(Property property) {
+        return select(property).build().uniqueFieldAsInt(property);
+    }
+    
+    public List<Long> listOfFieldAsLong(Property property) {
+        return select(property).build().listOfFieldAsLong(property);
+    }
+    
+    public List<Long> listOfFieldAsLong(String columnName) {
+        return select(columnName).build().listOfFieldAsLong(columnName);
+    }
+    
+    public Long uniqueFieldAsLong(Property property) {
+        return select(property).build().uniqueFieldAsLong(property);
+    }
+    
+    public List<Byte[]> listOfFieldAsByteArray(Property property) {
+        return select(property).build().listOfFieldAsByteArray(property);
+    }
+    
+    public List<Byte[]> listOfFieldAsByteArray(String columnName) {
+        return select(columnName).build().listOfFieldAsByteArray(columnName);
+    }
+    
+    public Byte[] uniqueFieldAsByteArray(Property property) {
+        return select(property).build().uniqueFieldAsByteArray(property);
+    }
 
     /**
      * Shorthand for {@link QueryBuilder#build() build()}.{@link Query#listLazy() listLazy()}; see
@@ -614,5 +701,13 @@ public Cursor cursor() {
     public long count() {
         return buildCount().count();
     }
+    
+    /**
+     * Returns true if the query returns any results. False if no results are returned.
+     * @return
+     */
+    public boolean any() {
+    	return buildCount().count() > 0;
+    }
 
 }
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 501565e5..03f46505 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -234,7 +234,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 </#if>
         return rowId;
 <#else>
-        return entity.get${entity.pkProperty.propertyName?cap_first}();
+        return entity.${entity.pkProperty.propertyName};
 </#if>
 <#else>
         // Unsupported or missing PK type
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index aed8b695..5cc41bb4 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -35,8 +35,12 @@ import de.greenrobot.dao.DaoException;
 <#list entity.additionalImportsEntity as additionalImport>
 import ${additionalImport};
 </#list>
+</#if>
 
+<#if entity.interfacesToImplement?has_content>
+import com.genie_connect.common.db.model.interfaces.*;
 </#if>
+
 <#if entity.hasKeepSections>
 // THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
 
@@ -104,6 +108,24 @@ ${keepFields!}    // KEEP FIELDS END
 	public String getTableName() {
 		return TABLE_NAME; 
 	}
+	
+	@Override
+	public String getEntityName() {
+		return ENTITY_NAME; 
+	}
+	
+<#if entity.propertiesPk[0].propertyType == "Long">
+	@Override
+	public Long getId() {
+		return ${entity.propertiesPk[0].propertyName}; 
+	}
+	
+	@Override
+	protected void setId(Long id) {
+		this.${entity.propertiesPk[0].propertyName} = id;
+	}
+</#if>
+
 
 
 <#if entity.constructors>
@@ -136,6 +158,20 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 
 </#if>
 
+<#list entity.properties as property>
+<#if property.propertyName?starts_with("contact_") || property.propertyName?starts_with("address_") ||
+	property.propertyName == "isFavourite" || property.propertyName == "hasNote">
+    public ${property.javaType} get${property.propertyName?cap_first}() {
+        return ${property.propertyName};
+    }
+    
+    public void set${property.propertyName?cap_first}(${property.javaType} value) {
+    	${property.propertyName} = value;
+    }
+    
+</#if>
+</#list>
+
 <#--
 ##########################################
 ########## To-One Relations ##############
