diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java
index aa593856..ea921b8a 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java
@@ -80,7 +80,7 @@ public void delete() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }
-        myDao.delete(this);
+        myDao.delete((Customer)this);
     }
 
     /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
@@ -88,7 +88,7 @@ public void update() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }
-        myDao.update(this);
+        myDao.update((Customer)this);
     }
 
     /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
@@ -96,7 +96,7 @@ public void refresh() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }
-        myDao.refresh(this);
+        myDao.refresh((Customer)this);
     }
 
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
index 961aff1b..153368dd 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
@@ -1,120 +1,122 @@
-package de.greenrobot.daoexample;
-
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
-
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoConfig;
-import de.greenrobot.dao.Property;
-
-import de.greenrobot.daoexample.Customer;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
- * DAO for table CUSTOMER.
-*/
-public class CustomerDao extends AbstractDao<Customer, Long> {
-
-    public static final String TABLENAME = "CUSTOMER";
-
-    /**
-     * Properties of entity Customer.<br/>
-     * Can be used for QueryBuilder and for referencing column names.
-    */
-    public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
-    };
-
-    private DaoSession daoSession;
-
-
-    public CustomerDao(DaoConfig config) {
-        super(config);
-    }
-    
-    public CustomerDao(DaoConfig config, DaoSession daoSession) {
-        super(config, daoSession);
-        this.daoSession = daoSession;
-    }
-
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'CUSTOMER' (" + //
-                "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'NAME' TEXT NOT NULL );"); // 1: name
-    }
-
-    /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
-        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CUSTOMER'";
-        db.execSQL(sql);
-    }
-
-    /** @inheritdoc */
-    @Override
-    protected void bindValues(SQLiteStatement stmt, Customer entity) {
-        stmt.clearBindings();
- 
-        Long id = entity.getId();
-        if (id != null) {
-            stmt.bindLong(1, id);
-        }
-        stmt.bindString(2, entity.getName());
-    }
-
-    @Override
-    protected void attachEntity(Customer entity) {
-        super.attachEntity(entity);
-        entity.__setDaoSession(daoSession);
-    }
-
-    /** @inheritdoc */
-    @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
-    }    
-
-    /** @inheritdoc */
-    @Override
-    public Customer readEntity(Cursor cursor, int offset) {
-        Customer entity = new Customer( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.getString(offset + 1) // name
-        );
-        return entity;
-    }
-     
-    /** @inheritdoc */
-    @Override
-    public void readEntity(Cursor cursor, Customer entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setName(cursor.getString(offset + 1));
-     }
-    
-    /** @inheritdoc */
-    @Override
-    protected Long updateKeyAfterInsert(Customer entity, long rowId) {
-        entity.setId(rowId);
-        return rowId;
-    }
-    
-    /** @inheritdoc */
-    @Override
-    public Long getKey(Customer entity) {
-        if(entity != null) {
-            return entity.getId();
-        } else {
-            return null;
-        }
-    }
-
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
-        return true;
-    }
-    
-}
+package de.greenrobot.daoexample;
+
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.DaoConfig;
+import de.greenrobot.dao.Property;
+
+import de.greenrobot.daoexample.Customer;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/**
+ * DAO for table CUSTOMER.
+*/
+public class CustomerDao extends AbstractDao<Customer, Long> {
+
+    public static final String TABLENAME = "CUSTOMER";
+
+    /**
+     * Properties of entity Customer.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
+    public static class Properties {
+        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
+        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
+    };
+
+    private DaoSession daoSession;
+
+
+    public CustomerDao(DaoConfig config) {
+        super(config);
+    }
+
+    public CustomerDao(DaoConfig config, DaoSession daoSession) {
+        super(config, daoSession);
+        this.daoSession = daoSession;
+    }
+
+    /** Creates the underlying database table. */
+    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+        String constraint = ifNotExists? "IF NOT EXISTS ": "";
+        db.execSQL("CREATE TABLE " + constraint + "'CUSTOMER' (" + //
+                "'_id' INTEGER PRIMARY KEY ," + // 0: id
+                "'NAME' TEXT NOT NULL );"); // 1: name
+    }
+
+    /** Drops the underlying database table. */
+    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CUSTOMER'";
+        db.execSQL(sql);
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected void bindValues(SQLiteStatement stmt, Customer entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+
+        }
+        stmt.bindString(2, entity.getName());
+    }
+
+    @Override
+    protected void attachEntity(Customer entity) {
+        super.attachEntity(entity);
+        entity.__setDaoSession(daoSession);
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long readKey(Cursor cursor, int offset) {
+        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Customer readEntity(Cursor cursor, int offset) {
+        Customer entity = new Customer( //
+
+            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) , // id
+            cursor.getString(offset + 1) // name
+        );
+        return entity;
+    }
+
+    /** @inheritdoc */
+    @Override
+    public void readEntity(Cursor cursor, Customer entity, int offset) {
+        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) );
+        entity.setName(cursor.getString(offset + 1) );
+     }
+
+    /** @inheritdoc */
+    @Override
+    protected Long updateKeyAfterInsert(Customer entity, long rowId) {
+        entity.setId(rowId);
+        return rowId;
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long getKey(Customer entity) {
+        if(entity != null) {
+            return entity.getId();
+        } else {
+            return null;
+        }
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected boolean isEntityUpdateable() {
+        return true;
+    }
+
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
index 27868c4f..2d0ff2c0 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
@@ -12,8 +12,8 @@ public Note(Long id) {
         super(id);
     }
 
-    public Note(Long id, String text, String comment, java.util.Date date) {
-        super(id, text, comment, date);
+    public Note(Long id, String text, String comment, java.util.Date date, java.util.List<String> userIds) {
+        super(id, text, comment, date, userIds);
     }
 
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
index 46c46efe..e23ed8a5 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
@@ -1,72 +1,82 @@
-package de.greenrobot.daoexample;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
-/**
- * Entity mapped to table NOTE.
- */
+package de.greenrobot.daoexample;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+/**
+ * Entity mapped to table NOTE.
+ */
 @Test
 @Test2( singleValueeee )
 @Test3( key2 = "value2", key1 = 5 )
 @Test4( key2 = "value2", key1 = null )
-abstract public class NoteBase {
-
-    protected Long id;
-    /** Not-null value. */
-    protected String text;
+abstract public class NoteBase {
+
+    protected Long id;
+    /** Not-null value. */
+    protected String text;
     @JSONIgnore
-    protected String comment;
-    protected java.util.Date date;
-
+    protected String comment;
+    protected java.util.Date date;
+    protected java.util.List<String> userIds;
+
     @Deprecated
-    public NoteBase() {
-    }
-
-    public NoteBase(Long id) {
-        this.id = id;
-    }
-
+    public NoteBase() {
+    }
+
+    public NoteBase(Long id) {
+        this.id = id;
+    }
+
     @Inject( Context )
-    public NoteBase(Long id, String text, String comment, java.util.Date date) {
-        this.id = id;
-        this.text = text;
-        this.comment = comment;
-        this.date = date;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    /** Not-null value. */
-    public String getText() {
-        return text;
-    }
-
-    /** Not-null value; ensure this value is available before it is saved to the database. */
+    public NoteBase(Long id, String text, String comment, java.util.Date date, java.util.List<String> userIds) {
+        this.id = id;
+        this.text = text;
+        this.comment = comment;
+        this.date = date;
+        this.userIds = userIds;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    /** Not-null value. */
+    public String getText() {
+        return text;
+    }
+
+    /** Not-null value; ensure this value is available before it is saved to the database. */
     @test5( key1 = value1 )
-    public void setText(String text) {
-        this.text = text;
-    }
-
-    public String getComment() {
-        return comment;
-    }
-
-    public void setComment(String comment) {
-        this.comment = comment;
-    }
-
-    public java.util.Date getDate() {
-        return date;
-    }
-
+    public void setText(String text) {
+        this.text = text;
+    }
+
+    public String getComment() {
+        return comment;
+    }
+
+    public void setComment(String comment) {
+        this.comment = comment;
+    }
+
+    public java.util.Date getDate() {
+        return date;
+    }
+
     @Test( key1 = value1 )
-    public void setDate(java.util.Date date) {
-        this.date = date;
-    }
-
-}
+    public void setDate(java.util.Date date) {
+        this.date = date;
+    }
+
+    public java.util.List<String> getUserIds() {
+        return userIds;
+    }
+
+    public void setUserIds(java.util.List<String> userIds) {
+        this.userIds = userIds;
+    }
+
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
index 19340096..0b544617 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
@@ -1,117 +1,143 @@
-package de.greenrobot.daoexample;
-
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
-
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoConfig;
-import de.greenrobot.dao.Property;
-
-import de.greenrobot.daoexample.Note;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
- * DAO for table NOTE.
-*/
-public class NoteDao extends AbstractDao<Note, Long> {
-
-    public static final String TABLENAME = "NOTE";
-
-    /**
-     * Properties of entity Note.<br/>
-     * Can be used for QueryBuilder and for referencing column names.
-    */
-    public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
-        public final static Property Comment = new Property(2, String.class, "comment", false, "COMMENT");
-        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
-        public final static Property UserIds = new Property(4, java.util.List<String>.class, "userIds", false, "USER_IDS");
-    };
-
-
-    public NoteDao(DaoConfig config) {
-        super(config);
-    }
-    
-    public NoteDao(DaoConfig config, DaoSession daoSession) {
-        super(config, daoSession);
-    }
-
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'NOTE' (" + //
-                "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'TEXT' TEXT NOT NULL ," + // 1: text
-                "'COMMENT' TEXT," + // 2: comment
-                "'DATE' INTEGER," + // 3: date
-                "'USER_IDS' TEXT);"); // 4: userIds
-    }
-
-    /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
-        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
-        db.execSQL(sql);
-    }
-
-    /** @inheritdoc */
-    @Override
-    protected void bindValues(SQLiteStatement stmt, Note entity) {
-        stmt.clearBindings();
- 
-        Long id = entity.getId();
-        if (id != null) {
-            stmt.bindLong(1, id);
-        }
-        stmt.bindString(2, entity.getText());
- 
-        String comment = entity.getComment();
-        if (comment != null) {
-            stmt.bindString(3, comment);
-        }
- 
-        java.util.Date date = entity.getDate();
-        if (date != null) {
-            stmt.bindLong(4, date.getTime());
-        }
- 
-        java.util.List<String> userIds = entity.getUserIds();
-        if (userIds != null) {
-            stmt.bind
-Expression toBindType[property.propertyType] is undefined on line 138, column 24 in dao.ftl.
-The problematic instruction:
-----------
-==> ${toBindType[property.propertyType]} [on line 138, column 22 in dao.ftl]
-----------
-
-Java backtrace for programmers:
-----------
-freemarker.core.InvalidReferenceException: Expression toBindType[property.propertyType] is undefined on line 138, column 24 in dao.ftl.
-	at freemarker.core.TemplateObject.assertNonNull(TemplateObject.java:125)
-	at freemarker.core.Expression.getStringValue(Expression.java:118)
-	at freemarker.core.Expression.getStringValue(Expression.java:93)
-	at freemarker.core.DollarVariable.accept(DollarVariable.java:76)
-	at freemarker.core.Environment.visit(Environment.java:221)
-	at freemarker.core.MixedContent.accept(MixedContent.java:92)
-	at freemarker.core.Environment.visit(Environment.java:221)
-	at freemarker.core.IfBlock.accept(IfBlock.java:82)
-	at freemarker.core.Environment.visit(Environment.java:221)
-	at freemarker.core.IteratorBlock$Context.runLoop(IteratorBlock.java:179)
-	at freemarker.core.Environment.visit(Environment.java:428)
-	at freemarker.core.IteratorBlock.accept(IteratorBlock.java:102)
-	at freemarker.core.Environment.visit(Environment.java:221)
-	at freemarker.core.MixedContent.accept(MixedContent.java:92)
-	at freemarker.core.Environment.visit(Environment.java:221)
-	at freemarker.core.Environment.process(Environment.java:199)
-	at freemarker.template.Template.process(Template.java:237)
-	at de.greenrobot.daogenerator.DaoGenerator.generate(DaoGenerator.java:157)
-	at de.greenrobot.daogenerator.DaoGenerator.generateAll(DaoGenerator.java:108)
-	at de.greenrobot.daogenerator.DaoGenerator.generateAll(DaoGenerator.java:86)
-	at de.greenrobot.daogenerator.gentest.ExampleDaoGenerator.main(ExampleDaoGenerator.java:35)
-	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
-	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
-	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
-	at java.lang.reflect.Method.invoke(Method.java:597)
-	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
+package de.greenrobot.daoexample;
+
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.DaoConfig;
+import de.greenrobot.dao.Property;
+
+import de.greenrobot.daoexample.Note;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/**
+ * DAO for table NOTE.
+*/
+public class NoteDao extends AbstractDao<Note, Long> {
+
+    public static final String TABLENAME = "NOTE";
+
+    /**
+     * Properties of entity Note.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
+    public static class Properties {
+        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
+        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
+        public final static Property Comment = new Property(2, String.class, "comment", false, "COMMENT");
+        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
+        public final static Property UserIds = new Property(4, java.util.List<String>.class, "userIds", false, "USER_IDS");
+    };
+
+
+    public NoteDao(DaoConfig config) {
+        super(config);
+    }
+
+    public NoteDao(DaoConfig config, DaoSession daoSession) {
+        super(config, daoSession);
+    }
+
+    /** Creates the underlying database table. */
+    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+        String constraint = ifNotExists? "IF NOT EXISTS ": "";
+        db.execSQL("CREATE TABLE " + constraint + "'NOTE' (" + //
+                "'_id' INTEGER PRIMARY KEY ," + // 0: id
+                "'TEXT' TEXT NOT NULL ," + // 1: text
+                "'COMMENT' TEXT," + // 2: comment
+                "'DATE' INTEGER," + // 3: date
+                "'USER_IDS' TEXT);"); // 4: userIds
+    }
+
+    /** Drops the underlying database table. */
+    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
+        db.execSQL(sql);
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected void bindValues(SQLiteStatement stmt, Note entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+
+        }
+        stmt.bindString(2, entity.getText());
+ 
+        String comment = entity.getComment();
+        if (comment != null) {
+            stmt.bindString(3, comment);
+
+        }
+ 
+        java.util.Date date = entity.getDate();
+        if (date != null) {
+            stmt.bindLong(4, date.getTime());
+
+        }
+ 
+        java.util.List<String> userIds = entity.getUserIds();
+        if (userIds != null) {
+            stmt.bindString(5, serializeStringList(userIds));
+
+        }
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long readKey(Cursor cursor, int offset) {
+        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Note readEntity(Cursor cursor, int offset) {
+        Note entity = new Note( //
+
+            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) , // id
+            cursor.getString(offset + 1) , // text
+            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) , // comment
+            cursor.isNull(offset + 3) ? null : new java.util.Date( cursor.getLong(offset + 3) ) , // date
+            cursor.isNull(offset + 4) ? null : deserializeStringList( cursor.getString(offset + 4) ) // userIds
+        );
+        return entity;
+    }
+
+    /** @inheritdoc */
+    @Override
+    public void readEntity(Cursor cursor, Note entity, int offset) {
+        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) );
+        entity.setText(cursor.getString(offset + 1) );
+        entity.setComment(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) );
+        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date( cursor.getLong(offset + 3) ) );
+        entity.setUserIds(cursor.isNull(offset + 4) ? null : deserializeStringList( cursor.getString(offset + 4) ));
+     }
+
+    /** @inheritdoc */
+    @Override
+    protected Long updateKeyAfterInsert(Note entity, long rowId) {
+        entity.setId(rowId);
+        return rowId;
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long getKey(Note entity) {
+        if(entity != null) {
+            return entity.getId();
+        } else {
+            return null;
+        }
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected boolean isEntityUpdateable() {
+        return true;
+    }
+
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java b/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java
index 1c23467d..c91eb8df 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java
@@ -93,7 +93,7 @@ public void delete() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }
-        myDao.delete(this);
+        myDao.delete((Order)this);
     }
 
     /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
@@ -101,7 +101,7 @@ public void update() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }
-        myDao.update(this);
+        myDao.update((Order)this);
     }
 
     /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
@@ -109,7 +109,7 @@ public void refresh() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }
-        myDao.refresh(this);
+        myDao.refresh((Order)this);
     }
 
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
index ce947bec..6c8c8056 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
@@ -1,150 +1,153 @@
-package de.greenrobot.daoexample;
-
-import java.util.List;
-import java.util.ArrayList;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
-
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoConfig;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.SqlUtils;
-import de.greenrobot.dao.Query;
-import de.greenrobot.dao.QueryBuilder;
-
-import de.greenrobot.daoexample.Order;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
- * DAO for table ORDERS.
-*/
-public class OrderDao extends AbstractDao<Order, Long> {
-
-    public static final String TABLENAME = "ORDERS";
-
-    /**
-     * Properties of entity Order.<br/>
-     * Can be used for QueryBuilder and for referencing column names.
-    */
-    public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
-        public final static Property CustomerId = new Property(2, long.class, "customerId", false, "CUSTOMER_ID");
-    };
-
-    private DaoSession daoSession;
-
-    private Query<Order> customer_OrdersQuery;
-
-    public OrderDao(DaoConfig config) {
-        super(config);
-    }
-    
-    public OrderDao(DaoConfig config, DaoSession daoSession) {
-        super(config, daoSession);
-        this.daoSession = daoSession;
-    }
-
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'ORDERS' (" + //
-                "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'DATE' INTEGER," + // 1: date
-                "'CUSTOMER_ID' INTEGER NOT NULL );"); // 2: customerId
-    }
-
-    /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
-        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDERS'";
-        db.execSQL(sql);
-    }
-
-    /** @inheritdoc */
-    @Override
-    protected void bindValues(SQLiteStatement stmt, Order entity) {
-        stmt.clearBindings();
- 
-        Long id = entity.getId();
-        if (id != null) {
-            stmt.bindLong(1, id);
-        }
- 
-        java.util.Date date = entity.getDate();
-        if (date != null) {
-            stmt.bindLong(2, date.getTime());
-        }
-        stmt.bindLong(3, entity.getCustomerId());
-    }
-
-    @Override
-    protected void attachEntity(Order entity) {
-        super.attachEntity(entity);
-        entity.__setDaoSession(daoSession);
-    }
-
-    /** @inheritdoc */
-    @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
-    }    
-
-    /** @inheritdoc */
-    @Override
-    public Order readEntity(Cursor cursor, int offset) {
-        Order entity = new Order( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
-            cursor.getLong(offset + 2) // customerId
-        );
-        return entity;
-    }
-     
-    /** @inheritdoc */
-    @Override
-    public void readEntity(Cursor cursor, Order entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
-        entity.setCustomerId(cursor.getLong(offset + 2));
-     }
-    
-    /** @inheritdoc */
-    @Override
-    protected Long updateKeyAfterInsert(Order entity, long rowId) {
-        entity.setId(rowId);
-        return rowId;
-    }
-    
-    /** @inheritdoc */
-    @Override
-    public Long getKey(Order entity) {
-        if(entity != null) {
-            return entity.getId();
-        } else {
-            return null;
-        }
-    }
-
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
-        return true;
-    }
-    
-    /** Internal query to resolve the "orders" to-many relationship of Customer. */
-    public synchronized List<Order> _queryCustomer_Orders(long customerId) {
-        if (customer_OrdersQuery == null) {
-            QueryBuilder<Order> queryBuilder = queryBuilder();
-            queryBuilder.where(Properties.CustomerId.eq(customerId));
-            queryBuilder.orderRaw("DATE ASC");
-            customer_OrdersQuery = queryBuilder.build();
-        } else {
-            customer_OrdersQuery.setParameter(0, customerId);
-        }
-        return customer_OrdersQuery.list();
-    }
-
+package de.greenrobot.daoexample;
+
+import java.util.List;
+import java.util.ArrayList;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.DaoConfig;
+import de.greenrobot.dao.Property;
+import de.greenrobot.dao.SqlUtils;
+import de.greenrobot.dao.Query;
+import de.greenrobot.dao.QueryBuilder;
+
+import de.greenrobot.daoexample.Order;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/**
+ * DAO for table ORDERS.
+*/
+public class OrderDao extends AbstractDao<Order, Long> {
+
+    public static final String TABLENAME = "ORDERS";
+
+    /**
+     * Properties of entity Order.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
+    public static class Properties {
+        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
+        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
+        public final static Property CustomerId = new Property(2, long.class, "customerId", false, "CUSTOMER_ID");
+    };
+
+    private DaoSession daoSession;
+
+    private Query<Order> customer_OrdersQuery;
+
+    public OrderDao(DaoConfig config) {
+        super(config);
+    }
+
+    public OrderDao(DaoConfig config, DaoSession daoSession) {
+        super(config, daoSession);
+        this.daoSession = daoSession;
+    }
+
+    /** Creates the underlying database table. */
+    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+        String constraint = ifNotExists? "IF NOT EXISTS ": "";
+        db.execSQL("CREATE TABLE " + constraint + "'ORDERS' (" + //
+                "'_id' INTEGER PRIMARY KEY ," + // 0: id
+                "'DATE' INTEGER," + // 1: date
+                "'CUSTOMER_ID' INTEGER NOT NULL );"); // 2: customerId
+    }
+
+    /** Drops the underlying database table. */
+    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDERS'";
+        db.execSQL(sql);
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected void bindValues(SQLiteStatement stmt, Order entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+
+        }
+ 
+        java.util.Date date = entity.getDate();
+        if (date != null) {
+            stmt.bindLong(2, date.getTime());
+
+        }
+        stmt.bindLong(3, entity.getCustomerId());
+    }
+
+    @Override
+    protected void attachEntity(Order entity) {
+        super.attachEntity(entity);
+        entity.__setDaoSession(daoSession);
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long readKey(Cursor cursor, int offset) {
+        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Order readEntity(Cursor cursor, int offset) {
+        Order entity = new Order( //
+
+            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) , // id
+            cursor.isNull(offset + 1) ? null : new java.util.Date( cursor.getLong(offset + 1) ) , // date
+            cursor.getLong(offset + 2) // customerId
+        );
+        return entity;
+    }
+
+    /** @inheritdoc */
+    @Override
+    public void readEntity(Cursor cursor, Order entity, int offset) {
+        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) );
+        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date( cursor.getLong(offset + 1) ) );
+        entity.setCustomerId(cursor.getLong(offset + 2) );
+     }
+
+    /** @inheritdoc */
+    @Override
+    protected Long updateKeyAfterInsert(Order entity, long rowId) {
+        entity.setId(rowId);
+        return rowId;
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long getKey(Order entity) {
+        if(entity != null) {
+            return entity.getId();
+        } else {
+            return null;
+        }
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected boolean isEntityUpdateable() {
+        return true;
+    }
+
+    /** Internal query to resolve the "orders" to-many relationship of Customer. */
+    public synchronized List<Order> _queryCustomer_Orders(long customerId) {
+        if (customer_OrdersQuery == null) {
+            QueryBuilder<Order> queryBuilder = queryBuilder();
+            queryBuilder.where(Properties.CustomerId.eq(customerId));
+            queryBuilder.orderRaw("DATE ASC");
+            customer_OrdersQuery = queryBuilder.build();
+        } else {
+            customer_OrdersQuery.setParameter(0, customerId);
+        }
+        return customer_OrdersQuery.list();
+    }
+
     private String selectDeep;
 
     protected String getSelectDeep() {
@@ -238,4 +241,4 @@ public Order loadDeep(Long key) {
         return loadDeepAllAndCloseCursor(cursor);
     }
  
-}
+}
