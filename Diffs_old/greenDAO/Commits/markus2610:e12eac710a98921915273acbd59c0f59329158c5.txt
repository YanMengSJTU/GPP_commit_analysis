diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
index 6d86e393..91131125 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
@@ -16,10 +16,9 @@
 
 package de.greenrobot.dao;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.List;
+import java.util.*;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 import android.database.CrossProcessCursor;
 import android.database.Cursor;
@@ -27,6 +26,7 @@
 import android.database.DatabaseUtils;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
+import android.text.TextUtils;
 
 /**
  * Base class for all DAOs: Implements entity operations like insert, load, delete, and query.
@@ -41,6 +41,8 @@
  *            Primary key (PK) type; use Void if entity does not have exactly one PK
  */
 public abstract class AbstractDao<T, K> {
+    protected static HashMap<String,Integer> columnNameToIndexMap;
+
     protected final SQLiteDatabase db;
     protected final DaoConfig config;
     protected IdentityScope<K, T> identityScope;
@@ -65,6 +67,40 @@ public AbstractDao(DaoConfig config, AbstractDaoSession daoSession) {
         }
         statements = config.statements;
         pkOrdinal = config.pkProperty != null ? config.pkProperty.ordinal : -1;
+
+
+        //if() {
+            if( columnNameToIndexMap==null ) {
+                synchronized (AbstractDao.class) {
+                    if( columnNameToIndexMap==null ) {
+                        columnNameToIndexMap = new HashMap<String, Integer>();
+                        Cursor c = null;
+                        try {
+                            c = daoSession.getDatabase().rawQuery("SELECT sql FROM sqlite_master WHERE tbl_name = ? AND type = 'table'", new String[]{config.tablename});
+
+                            c.moveToFirst();
+                            final String ddl = c.getString(0);
+                            final String regexp = "^CREATE TABLE .*?\\((.+)\\).*?$";
+                            final Pattern p = Pattern.compile(regexp);
+                            final Matcher m = p.matcher(ddl);
+                            m.matches();
+                            final String columnsStr = m.group(1);
+                            final String[] columns = TextUtils.split(columnsStr, ",");
+                            for( int i=0; i< columns.length; ++i ) {
+                                final String columnName = TextUtils.split(columns[i]," ")[0];
+                                columnNameToIndexMap.put(columnName,i);
+                            }
+
+
+                        } finally {
+                            if( c!=null )
+                                c.close();
+                        }
+
+                    }
+                }
+            }
+        //}
     }
 
     public AbstractDaoSession getSession() {
@@ -99,6 +135,13 @@ public Property getPkProperty() {
         return config.nonPkColumns;
     }
 
+    /**
+     * @throws NullPointerException if column does not exist
+     */
+    protected int getColumnIndexForName( String name ) {
+        return columnNameToIndexMap.get(name);
+    }
+
     /**
      * Loads and entity for the given PK.
      * 
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java b/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
index 7c7b373c..2265cdcd 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
@@ -3,8 +3,8 @@
 import java.util.List;
 import de.greenrobot.daoexample.DaoSession;
 import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.HasId;
 
+import de.greenrobot.dao.HasId;
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table CUSTOMER.
@@ -45,6 +45,12 @@ public Long getId() {
         return id;
     }
 
+    /** Not-null value. */
+    public Long getId( Long defaultValue ) {
+        final Long val = getId();
+        return val != null ? val : defaultValue;
+    }
+
     public void setId(Long id) {
         this.id = id;
     }
@@ -54,6 +60,12 @@ public String getName() {
         return name;
     }
 
+    /** Not-null value. */
+    public String getName( String defaultValue ) {
+        final String val = getName();
+        return val != null ? val : defaultValue;
+    }
+
     /** Not-null value; ensure this value is available before it is saved to the database. */
     public void setName(String name) {
         this.name = name;
@@ -76,7 +88,7 @@ public synchronized void resetOrders() {
         orders = null;
     }
 
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#delete(Object)}. Entity must attached to an entity context. */
     public void delete() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
@@ -84,7 +96,7 @@ public void delete() {
         myDao.delete(this);
     }
 
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#update(Object)}. Entity must attached to an entity context. */
     public void update() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
@@ -92,7 +104,7 @@ public void update() {
         myDao.update(this);
     }
 
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
     public void refresh() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
index 961aff1b..3c698716 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
@@ -81,8 +81,8 @@ public Long readKey(Cursor cursor, int offset) {
     @Override
     public Customer readEntity(Cursor cursor, int offset) {
         Customer entity = new Customer( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.getString(offset + 1) // name
+            cursor.isNull(getColumnIndexForName("_id")) ? null : cursor.getLong(getColumnIndexForName("_id")), // id
+            cursor.getString(getColumnIndexForName("NAME")) // name
         );
         return entity;
     }
@@ -90,8 +90,8 @@ public Customer readEntity(Cursor cursor, int offset) {
     /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, Customer entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setName(cursor.getString(offset + 1));
+        entity.setId(cursor.isNull(getColumnIndexForName("_id")) ? null : cursor.getLong(getColumnIndexForName("_id")));
+        entity.setName(cursor.getString(getColumnIndexForName("NAME")));
      }
     
     /** @inheritdoc */
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
index a3fb04ab..f531019e 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
@@ -1,9 +1,7 @@
 package de.greenrobot.daoexample;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
-
 import de.greenrobot.dao.HasId;
-
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table NOTE.
  */
@@ -33,6 +31,12 @@ public Long getId() {
         return id;
     }
 
+    /** Not-null value. */
+    public Long getId( Long defaultValue ) {
+        final Long val = getId();
+        return val != null ? val : defaultValue;
+    }
+
     public void setId(Long id) {
         this.id = id;
     }
@@ -42,6 +46,12 @@ public String getText() {
         return text;
     }
 
+    /** Not-null value. */
+    public String getText( String defaultValue ) {
+        final String val = getText();
+        return val != null ? val : defaultValue;
+    }
+
     /** Not-null value; ensure this value is available before it is saved to the database. */
     public void setText(String text) {
         this.text = text;
@@ -51,6 +61,12 @@ public String getComment() {
         return comment;
     }
 
+    /** Not-null value. */
+    public String getComment( String defaultValue ) {
+        final String val = getComment();
+        return val != null ? val : defaultValue;
+    }
+
     public void setComment(String comment) {
         this.comment = comment;
     }
@@ -59,6 +75,12 @@ public void setComment(String comment) {
         return date;
     }
 
+    /** Not-null value. */
+    public java.util.Date getDate( java.util.Date defaultValue ) {
+        final java.util.Date val = getDate();
+        return val != null ? val : defaultValue;
+    }
+
     public void setDate(java.util.Date date) {
         this.date = date;
     }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
index 40b5bbc1..f4a40323 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
@@ -86,10 +86,10 @@ public Long readKey(Cursor cursor, int offset) {
     @Override
     public Note readEntity(Cursor cursor, int offset) {
         Note entity = new Note( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.getString(offset + 1), // text
-            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comment
-            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // date
+            cursor.isNull(getColumnIndexForName("_id")) ? null : cursor.getLong(getColumnIndexForName("_id")), // id
+            cursor.getString(getColumnIndexForName("TEXT")), // text
+            cursor.isNull(getColumnIndexForName("COMMENT")) ? null : cursor.getString(getColumnIndexForName("COMMENT")), // comment
+            cursor.isNull(getColumnIndexForName("DATE")) ? null : new java.util.Date(cursor.getLong(getColumnIndexForName("DATE"))) // date
         );
         return entity;
     }
@@ -97,10 +97,10 @@ public Note readEntity(Cursor cursor, int offset) {
     /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, Note entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setText(cursor.getString(offset + 1));
-        entity.setComment(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
-        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
+        entity.setId(cursor.isNull(getColumnIndexForName("_id")) ? null : cursor.getLong(getColumnIndexForName("_id")));
+        entity.setText(cursor.getString(getColumnIndexForName("TEXT")));
+        entity.setComment(cursor.isNull(getColumnIndexForName("COMMENT")) ? null : cursor.getString(getColumnIndexForName("COMMENT")));
+        entity.setDate(cursor.isNull(getColumnIndexForName("DATE")) ? null : new java.util.Date(cursor.getLong(getColumnIndexForName("DATE"))));
      }
     
     /** @inheritdoc */
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
index ac8628ec..1980f404 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
@@ -2,8 +2,8 @@
 
 import de.greenrobot.daoexample.DaoSession;
 import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.HasId;
 
+import de.greenrobot.dao.HasId;
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table ORDERS.
@@ -47,6 +47,12 @@ public Long getId() {
         return id;
     }
 
+    /** Not-null value. */
+    public Long getId( Long defaultValue ) {
+        final Long val = getId();
+        return val != null ? val : defaultValue;
+    }
+
     public void setId(Long id) {
         this.id = id;
     }
@@ -55,6 +61,12 @@ public void setId(Long id) {
         return date;
     }
 
+    /** Not-null value. */
+    public java.util.Date getDate( java.util.Date defaultValue ) {
+        final java.util.Date val = getDate();
+        return val != null ? val : defaultValue;
+    }
+
     public void setDate(java.util.Date date) {
         this.date = date;
     }
@@ -89,7 +101,7 @@ public void setCustomer(Customer customer) {
         customer__resolvedKey = customerId;
     }
 
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#delete(Object)}. Entity must attached to an entity context. */
     public void delete() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
@@ -97,7 +109,7 @@ public void delete() {
         myDao.delete(this);
     }
 
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#update(Object)}. Entity must attached to an entity context. */
     public void update() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
@@ -105,7 +117,7 @@ public void update() {
         myDao.update(this);
     }
 
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
     public void refresh() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
index ce947bec..22da830b 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
@@ -94,9 +94,9 @@ public Long readKey(Cursor cursor, int offset) {
     @Override
     public Order readEntity(Cursor cursor, int offset) {
         Order entity = new Order( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
-            cursor.getLong(offset + 2) // customerId
+            cursor.isNull(getColumnIndexForName("_id")) ? null : cursor.getLong(getColumnIndexForName("_id")), // id
+            cursor.isNull(getColumnIndexForName("DATE")) ? null : new java.util.Date(cursor.getLong(getColumnIndexForName("DATE"))), // date
+            cursor.getLong(getColumnIndexForName("CUSTOMER_ID")) // customerId
         );
         return entity;
     }
@@ -104,9 +104,9 @@ public Order readEntity(Cursor cursor, int offset) {
     /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, Order entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
-        entity.setCustomerId(cursor.getLong(offset + 2));
+        entity.setId(cursor.isNull(getColumnIndexForName("_id")) ? null : cursor.getLong(getColumnIndexForName("_id")));
+        entity.setDate(cursor.isNull(getColumnIndexForName("DATE")) ? null : new java.util.Date(cursor.getLong(getColumnIndexForName("DATE"))));
+        entity.setCustomerId(cursor.getLong(getColumnIndexForName("CUSTOMER_ID")));
      }
     
     /** @inheritdoc */
diff --git a/DaoGenerator/src-template/property-colindex.ftl b/DaoGenerator/src-template/property-colindex.ftl
index 3272c7cf..4e34df68 100644
--- a/DaoGenerator/src-template/property-colindex.ftl
+++ b/DaoGenerator/src-template/property-colindex.ftl
@@ -1,6 +1,6 @@
 <#ftl strip_whitespace=true><#-- turn off "enable blank link before end of file on save" in your editor -->
 <#if schema.isReferenceColumnsByName()>
-cursor.getColumnIndex("${property.columnName}")<#t>
+getColumnIndexForName("${property.columnName}")<#t>
 <#else>
 offset + ${property_index} /*BOOGA*/<#t>
 </#if>
\ No newline at end of file
