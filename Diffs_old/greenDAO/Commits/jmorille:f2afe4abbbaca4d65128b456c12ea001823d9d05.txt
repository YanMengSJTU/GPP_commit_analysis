diff --git a/DaoExample/.classpath b/DaoExample/.classpath
index 1df48573..9ccb91e4 100644
--- a/DaoExample/.classpath
+++ b/DaoExample/.classpath
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
+	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="src-gen"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
diff --git a/DaoExample/project.properties b/DaoExample/project.properties
index c957743c..c4f09d2b 100644
--- a/DaoExample/project.properties
+++ b/DaoExample/project.properties
@@ -8,4 +8,4 @@
 # project structure.
 
 # Project target.
-target=android-4
+target=android-17
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index 276d291e..47ff1cf6 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -41,6 +41,7 @@ public static void main(String[] args) throws Exception {
 
     private static void addNote(Schema schema) {
         Entity note = schema.addEntity("Note");
+        note.implementsParceable();
         note.addIdProperty();
         note.addStringProperty("text").notNull();
         note.addStringProperty("comment");
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 443f74dc..3c6313b1 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -21,6 +21,8 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 <#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long"  } />
 package ${entity.javaPackageDao};
 
+import android.content.ContentValues;
+
 <#if entity.toOneRelations?has_content || entity.incomingToManyRelations?has_content>
 import java.util.List;
 </#if>
@@ -180,6 +182,42 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 </#if>  
     }    
 
+<#--
+############################## readContentValue ############################## 
+-->
+    public ContentValues readContentValues(Cursor cursor, int offset) {
+        ContentValues values = new ContentValues();
+<#list entity.properties as property> 
+        values.put(Properties.${property.propertyName?cap_first}.columnName,cursor.isNull(offset + ${property_index})? null: cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})  );
+</#list>  
+        return values;
+    }
+
+    public ContentValues readContentValues(${entity.className} entity) {
+        ContentValues values = new ContentValues();
+<#list entity.properties as property> 
+        values.put(Properties.${property.propertyName?cap_first}.columnName, <#if
+   property.propertyType == "Date">entity.get${property.propertyName?cap_first}()==null? null: entity.get${property.propertyName?cap_first}().getTime() <#elseif 
+   property.notNull>entity.get${property.propertyName?cap_first}() <#else
+   > entity.get${property.propertyName?cap_first}() </#if
+   >);
+</#list>  
+        return values;
+    }    
+
+     public ${entity.className} readEntity(ContentValues values) {
+        ${entity.className} entity = new ${entity.className}();
+<#list entity.properties as property>   
+        entity.set${property.propertyName?cap_first}(<#if
+   property.propertyType == "Date">  
+      values.getAs${toCursorType[property.propertyType]}(Properties.${property.propertyName?cap_first}.columnName)==null? null: new ${property.javaType}(values.getAs${toCursorType[property.propertyType]}(Properties.${property.propertyName?cap_first}.columnName)) <#else
+   >  values.getAs${toCursorType[property.propertyType]}(Properties.${property.propertyName?cap_first}.columnName)</#if
+   >); 
+</#list>        
+        //   attachEntity(entity)
+        return entity;
+     }
+ 
     /** @inheritdoc */
     @Override
     public ${entity.className} readEntity(Cursor cursor, int offset) {
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 03c51333..08f94327 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -22,8 +22,10 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 <#assign complexTypes = ["String", "ByteArray", "Date"]/>
 package ${entity.javaPackage};
 
+<#if entity.parceable>
 import android.os.Parcel;
 import android.os.Parcelable;
+</#if>
 
 <#if entity.toManyRelations?has_content>
 import java.util.List;
@@ -266,6 +268,8 @@ ${keepMethods!}    // KEEP METHODS END
 ########## Parcelable operations ######
 ##########################################
 -->
+<#if entity.parceable>
+
 //  @Override
   public int describeContents() {
     return 0;
@@ -322,4 +326,5 @@ ${keepMethods!}    // KEEP METHODS END
             return new ${entity.className}[size];
         }
     };
+</#if>    
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index 27f6cb3c..b30e4a68 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -70,6 +70,7 @@
     private String pkType;
     private String superclass;
 
+    private boolean parceable=false;
     private boolean protobuf;
     private boolean constructors;
     private boolean skipGeneration;
@@ -249,6 +250,11 @@ Entity useProtobuf() {
         protobuf = true;
         return this;
     }
+    
+    
+    public boolean isParceable() {
+        return parceable;
+    }
 
     public boolean isProtobuf() {
         return protobuf;
@@ -431,6 +437,12 @@ public void implementsSerializable() {
         interfacesToImplement.add("java.io.Serializable");
     }
 
+    public void implementsParceable() {
+        interfacesToImplement.add("android.os.Parcelable");
+        parceable = true;
+    }
+
+    
     public String getSuperclass() {
         return superclass;
     }
