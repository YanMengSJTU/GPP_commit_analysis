diff --git a/DaoGenerator/src-template/annotation.ftl b/DaoGenerator/src-template/annotation.ftl
new file mode 100644
index 00000000..97b1d728
--- /dev/null
+++ b/DaoGenerator/src-template/annotation.ftl
@@ -0,0 +1,24 @@
+<#macro print_annotation annotation prefix>
+${prefix}@${annotation.name}<#rt>
+    <@compress single_line=true>
+        <#if annotation.parameters?has_content>
+            (
+            <#assign keys = annotation.parameters?keys>
+            <#list keys as key>
+                <#if key != annotation_no_name>
+                    ${key} =
+                </#if>
+                ${annotation.parameters[key]}<#t>
+                <#if key_has_next>,<#t> </#if>
+            </#list>
+            )
+        </#if>
+    </@compress>
+</#macro>
+
+<#macro print_annotations annotations prefix>
+    <#list annotations as annotation>
+        <@print_annotation annotation, prefix/>
+
+    </#list>
+</#macro>
\ No newline at end of file
diff --git a/DaoGenerator/src-template/entity-base.ftl b/DaoGenerator/src-template/entity-base.ftl
index 24f395c0..04f03440 100644
--- a/DaoGenerator/src-template/entity-base.ftl
+++ b/DaoGenerator/src-template/entity-base.ftl
@@ -1,3 +1,4 @@
+<#include "*/annotation.ftl">
 <#--
 
 Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
@@ -17,6 +18,7 @@ You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
+
 <#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
 <#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
 <#assign complexTypes = ["String", "ByteArray", "Date"]/>
@@ -47,6 +49,7 @@ import ${additionalImport};
 /**
  * Entity mapped to table ${entity.tableName}.
  */
+<@print_annotations entity.annotations, ""/>
 abstract public class ${entity.classNameBase}<#if
 entity.superclass?has_content> extends ${entity.superclass} </#if><#if
 entity.interfacesToImplement?has_content> implements <#list entity.interfacesToImplement
@@ -56,6 +59,7 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value. */
 </#if>
+    <@print_annotations property.fieldAnnotations, "    "/>
     protected ${property.javaType} ${property.propertyName};
 </#list>
 
@@ -86,6 +90,7 @@ ${keepFields!}    // KEEP FIELDS END
 
 </#if>
 <#if entity.constructors>
+    <@print_annotations entity.emptyConstructorAnnotations, "    "/>
     public ${entity.classNameBase}() {
     }
 <#if entity.propertiesPk?has_content && entity.propertiesPk?size != entity.properties?size>
@@ -98,6 +103,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     }
 </#if>
 
+    <@print_annotations entity.fullConstructorAnnotations, "    "/>
     public ${entity.classNameBase}(<#list entity.properties as
 property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
 <#list entity.properties as property>
@@ -118,6 +124,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value. */
 </#if>
+    <@print_annotations property.getterAnnotations, "    "/>
     public ${property.javaType} get${property.propertyName?cap_first}() {
         return ${property.propertyName};
     }
@@ -125,6 +132,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value; ensure this value is available before it is saved to the database. */
 </#if>
+    <@print_annotations property.setterAnnotations, "    "/>
     public void set${property.propertyName?cap_first}(${property.javaType} ${property.propertyName}) {
         this.${property.propertyName} = ${property.propertyName};
     }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Annotation.java b/DaoGenerator/src/de/greenrobot/daogenerator/Annotation.java
new file mode 100644
index 00000000..aa47324e
--- /dev/null
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Annotation.java
@@ -0,0 +1,46 @@
+package de.greenrobot.daogenerator;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.regex.Pattern;
+
+/**
+ * Model class for an Annotation that can be attached to classses, properties or methods
+ * @author yigit@path.com
+ */
+public class Annotation {
+    private String name;
+    private Map<String, String> parameters = new HashMap<String, String>();
+    public static Pattern QUOTE = Pattern.compile("\"");
+
+    //we use this if Annotation has only 1 parameter
+    public static final String NO_NAME = "__no_name";
+    public static final String NULL = "null";
+
+    public Annotation(String name, String... params) {
+        this.name = name;
+        this.parameters = new HashMap<String, String>();
+        if(params.length > 1 && params.length % 2 != 0) {
+            throw new RuntimeException("annotation parameters should be key value pairs");
+        }
+        if(params.length == 1) {
+            this.parameters.put(NO_NAME, params[0] == null ? NULL : params[0]);
+        } else {
+            for(int i = 0; i < params.length; i += 2) {
+                this.parameters.put(params[i], params[i + 1] == null ? NULL : params[i + 1]);
+            }
+        }
+    }
+
+    public Annotation(String name) {
+        this.name = name;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public Map<String, String> getParameters() {
+        return parameters;
+    }
+}
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index 5a92074a..75c40276 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -146,6 +146,7 @@ private void generate(Template template, File outDirFile, String javaPackage, St
             Map<String, Object> root = new HashMap<String, Object>();
             root.put("schema", schema);
             root.put("entity", entity);
+            root.put("annotation_no_name", Annotation.NO_NAME);
 
             if (entity != null && entity.getHasKeepSections()) {
                 checkKeepSections(file, root);
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index 2adefb45..648b5c8d 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -55,6 +55,9 @@
     private final Collection<String> additionalImportsEntity;
     private final Collection<String> additionalImportsDao;
     private final List<String> interfacesToImplement;
+    private final List<Annotation> annotations;
+    private final List<Annotation> emptyConstructorAnnotations;
+    private final List<Annotation> fullConstructorAnnotations;
 
     private String tableName;
     private String classNameDao;
@@ -66,6 +69,7 @@
     private String pkType;
     private String superclass;
 
+
     private boolean protobuf;
     private boolean constructors;
     private boolean skipGeneration;
@@ -89,6 +93,9 @@
         additionalImportsEntity = new TreeSet<String>();
         additionalImportsDao = new TreeSet<String>();
         interfacesToImplement = new ArrayList<String>();
+        annotations = new ArrayList<Annotation>();
+        emptyConstructorAnnotations = new ArrayList<Annotation>();
+        fullConstructorAnnotations = new ArrayList<Annotation>();
         constructors = true;
     }
 
@@ -132,6 +139,23 @@ public PropertyBuilder addDateProperty(String propertyName) {
         return addProperty(PropertyType.Date, propertyName);
     }
 
+    public Entity addAnnotation(Annotation annotation) {
+        this.annotations.add(annotation);
+        return this;
+    }
+
+    public Entity addEmptyConstructorAnnotation(Annotation annotation) {
+        this.emptyConstructorAnnotations.add(annotation);
+        return this;
+    }
+
+    public Entity addFullConstructorAnnotation(Annotation annotation) {
+        this.fullConstructorAnnotations.add(annotation);
+        return this;
+    }
+
+
+
     public PropertyBuilder addProperty(PropertyType propertyType, String propertyName) {
         if (!propertyNames.add(propertyName)) {
             throw new RuntimeException("Property already defined: " + propertyName);
@@ -432,6 +456,18 @@ public void implementsSerializable() {
         interfacesToImplement.add("java.io.Serializable");
     }
 
+    public List<Annotation> getAnnotations() {
+        return annotations;
+    }
+
+    public List<Annotation> getEmptyConstructorAnnotations() {
+        return emptyConstructorAnnotations;
+    }
+
+    public List<Annotation> getFullConstructorAnnotations() {
+        return fullConstructorAnnotations;
+    }
+
     public String getSuperclass() {
         return superclass;
     }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index f54d05e8..8b3a321b 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -2,7 +2,7 @@
  * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,12 +11,15 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
 package de.greenrobot.daogenerator;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /** Model class for an entity's property: a Java property mapped to a data base column. */
 public class Property {
 
@@ -54,6 +57,21 @@ public PropertyBuilder primaryKeyDesc() {
             return this;
         }
 
+        public PropertyBuilder addFieldAnnotation(Annotation annotation) {
+            property.fieldAnnotations.add(annotation);
+            return this;
+        }
+
+        public PropertyBuilder addSetterAnnotation(Annotation annotation) {
+            property.setterAnnotations.add(annotation);
+            return this;
+        }
+
+        public PropertyBuilder addGetterAnnotation(Annotation annotation) {
+            property.getterAnnotations.add(annotation);
+            return this;
+        }
+
         public PropertyBuilder autoincrement() {
             if (!property.primaryKey || property.propertyType != PropertyType.Long) {
                 throw new RuntimeException(
@@ -123,6 +141,10 @@ public Property getProperty() {
     private boolean unique;
     private boolean notNull;
 
+    private List<Annotation> fieldAnnotations = new ArrayList<Annotation>();
+    private List<Annotation> setterAnnotations = new ArrayList<Annotation>();
+    private List<Annotation> getterAnnotations = new ArrayList<Annotation>();
+
     /** Initialized in 2nd pass */
     private String constraints;
 
@@ -193,6 +215,18 @@ public Entity getEntity() {
         return entity;
     }
 
+    public List<Annotation> getFieldAnnotations() {
+        return fieldAnnotations;
+    }
+
+    public List<Annotation> getSetterAnnotations() {
+        return setterAnnotations;
+    }
+
+    public List<Annotation> getGetterAnnotations() {
+        return getterAnnotations;
+    }
+
     void init2ndPass() {
         initConstraint();
         if (columnType == null) {
