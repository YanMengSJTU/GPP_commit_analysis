diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
index e94c14d9..7df735f0 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
@@ -16,10 +16,14 @@
 
 package de.greenrobot.dao;
 
+import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Date;
 import java.util.List;
+import java.util.Locale;
+import java.util.TimeZone;
 
 import android.database.CrossProcessCursor;
 import android.database.Cursor;
@@ -65,6 +69,7 @@
 
     protected final AbstractDaoSession session;
     protected final int pkOrdinal;
+    
 
     public AbstractDao(DaoConfig config) {
         this(config, null);
@@ -837,4 +842,22 @@ public SQLiteDatabase getDatabase() {
     /** Returns true if the Entity class can be updated, e.g. for setting the PK after insert. */
     abstract protected boolean isEntityUpdateable();
 
+    protected Date getDate(String sqlDate) {
+    	
+    	if(sqlDate == null || sqlDate.trim().length() == 0) {
+    		return null;
+    	}
+    	try {
+    		return getSqliteDateFormat().parse(sqlDate);
+    	} catch(ParseException ex) {
+    		return null;
+    	}
+    }
+    
+    private static final java.text.SimpleDateFormat getSqliteDateFormat() {
+    	java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
+    	format.setTimeZone(TimeZone.getTimeZone("UTC"));
+    	
+    	return format;
+    }
 }
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 03f46505..e7217c5a 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -18,7 +18,7 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
 <#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long" } />
-<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long"  } />
+<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "String"  } />
 package ${entity.javaPackageDao};
 
 <#if entity.toOneRelations?has_content || entity.incomingToManyRelations?has_content>
@@ -57,6 +57,7 @@ import ${entity.javaPackage}.${entity.className};
 import ${entity.javaPackage}.${entity.className}.Builder;
 </#if>
 
+
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
  * DAO for table ${entity.tableName}.
@@ -192,7 +193,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#list entity.properties as property>
             <#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#if
             property.propertyType == "Byte">(byte) </#if><#if
-            property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
+            property.propertyType == "Date">getDate(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
             property.propertyType == "Boolean"> != 0</#if><#if
             property.propertyType == "Date">)</#if><#if property_has_next>,</#if> // ${property.propertyName}
 </#list>        
@@ -216,8 +217,8 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#else> 
 <#list entity.properties as property>
         entity.${property.propertyName} = <#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#if
-            property.propertyType == "Byte">(byte) </#if><#if
-            property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
+            property.propertyType == "Byte">(byte) </#if><#if 
+            property.propertyType == "Date"> getDate(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
             property.propertyType == "Boolean"> != 0</#if><#if
             property.propertyType == "Date">)</#if>;
 </#list>
