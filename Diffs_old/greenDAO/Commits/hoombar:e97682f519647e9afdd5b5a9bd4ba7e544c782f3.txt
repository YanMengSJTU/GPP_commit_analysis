diff --git a/DaoCore/.classpath b/DaoCore/.classpath
index 7bc01d9a..68d83dbb 100644
--- a/DaoCore/.classpath
+++ b/DaoCore/.classpath
@@ -5,5 +5,6 @@
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="lib" path="libs/sqlcipher.jar"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/DaoCore/libs/sqlcipher.jar b/DaoCore/libs/sqlcipher.jar
new file mode 100644
index 00000000..b81f1055
Binary files /dev/null and b/DaoCore/libs/sqlcipher.jar differ
diff --git a/DaoCore/project.properties b/DaoCore/project.properties
index 96db7421..9cfc5397 100644
--- a/DaoCore/project.properties
+++ b/DaoCore/project.properties
@@ -9,4 +9,4 @@
 
 android.library=true
 # Project target.
-target=android-4
+target=Google Inc.:Google APIs:19
diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
index 95c29eb2..c01a7f79 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
@@ -24,9 +24,10 @@
 import android.database.CrossProcessCursor;
 import android.database.Cursor;
 import android.database.CursorWindow;
-import android.database.DatabaseUtils;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import net.sqlcipher.DatabaseUtils;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteStatement;
+
 import de.greenrobot.dao.identityscope.IdentityScope;
 import de.greenrobot.dao.identityscope.IdentityScopeLong;
 import de.greenrobot.dao.internal.DaoConfig;
diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDaoMaster.java b/DaoCore/src/de/greenrobot/dao/AbstractDaoMaster.java
index 5b635bcd..e328f13a 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDaoMaster.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDaoMaster.java
@@ -19,7 +19,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 import de.greenrobot.dao.internal.DaoConfig;
 
diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java b/DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java
index 6a37ef2a..4c233dba 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java
@@ -20,7 +20,7 @@
 import java.util.Map;
 import java.util.concurrent.Callable;
 
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase;
 import de.greenrobot.dao.async.AsyncSession;
 import de.greenrobot.dao.query.QueryBuilder;
 
diff --git a/DaoCore/src/de/greenrobot/dao/DbUtils.java b/DaoCore/src/de/greenrobot/dao/DbUtils.java
index 62e5c976..e36d0b22 100644
--- a/DaoCore/src/de/greenrobot/dao/DbUtils.java
+++ b/DaoCore/src/de/greenrobot/dao/DbUtils.java
@@ -22,9 +22,9 @@
 import java.io.OutputStream;
 
 import android.content.Context;
-import android.database.Cursor;
-import android.database.DatabaseUtils;
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.Cursor;
+import net.sqlcipher.DatabaseUtils;
+import net.sqlcipher.database.SQLiteDatabase;
 
 /** Database utils, for example to execute SQL scripts */
 // TODO add unit tests
diff --git a/DaoCore/src/de/greenrobot/dao/InternalQueryDaoAccess.java b/DaoCore/src/de/greenrobot/dao/InternalQueryDaoAccess.java
index d1896079..e7fcce07 100644
--- a/DaoCore/src/de/greenrobot/dao/InternalQueryDaoAccess.java
+++ b/DaoCore/src/de/greenrobot/dao/InternalQueryDaoAccess.java
@@ -2,7 +2,7 @@
 
 import java.util.List;
 
-import android.database.Cursor;
+import net.sqlcipher.Cursor;
 import de.greenrobot.dao.internal.TableStatements;
 
 /** For internal use by greenDAO only. */
diff --git a/DaoCore/src/de/greenrobot/dao/InternalUnitTestDaoAccess.java b/DaoCore/src/de/greenrobot/dao/InternalUnitTestDaoAccess.java
deleted file mode 100644
index 78df9030..00000000
--- a/DaoCore/src/de/greenrobot/dao/InternalUnitTestDaoAccess.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package de.greenrobot.dao;
-
-import java.lang.reflect.Constructor;
-
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import de.greenrobot.dao.identityscope.IdentityScope;
-import de.greenrobot.dao.internal.DaoConfig;
-
-/** Reserved for internal unit tests that want to access some non-public methods. Don't use for anything else. */
-public class InternalUnitTestDaoAccess<T, K> {
-    private final AbstractDao<T, K> dao;
-
-    public InternalUnitTestDaoAccess(SQLiteDatabase db, Class<AbstractDao<T, K>> daoClass, IdentityScope<?, ?> identityScope)
-            throws Exception {
-        DaoConfig daoConfig = new DaoConfig(db, daoClass);
-        daoConfig.setIdentityScope(identityScope);
-        Constructor<AbstractDao<T, K>> constructor = daoClass.getConstructor(DaoConfig.class);
-        dao = constructor.newInstance(daoConfig);
-    }
-
-    public K getKey(T entity) {
-        return dao.getKey(entity);
-    }
-
-    public Property[] getProperties() {
-        return dao.getProperties();
-    }
-
-    public boolean isEntityUpdateable() {
-        return dao.isEntityUpdateable();
-    }
-
-    public T readEntity(Cursor cursor, int offset) {
-        return dao.readEntity(cursor, offset);
-    }
-
-    public K readKey(Cursor cursor, int offset) {
-        return dao.readKey(cursor, offset);
-    }
-
-    public AbstractDao<T, K> getDao() {
-        return dao;
-    }
-
-}
diff --git a/DaoCore/src/de/greenrobot/dao/async/AsyncOperation.java b/DaoCore/src/de/greenrobot/dao/async/AsyncOperation.java
index 7f1b1c02..a67eaa6d 100644
--- a/DaoCore/src/de/greenrobot/dao/async/AsyncOperation.java
+++ b/DaoCore/src/de/greenrobot/dao/async/AsyncOperation.java
@@ -16,7 +16,7 @@
 
 package de.greenrobot.dao.async;
 
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.DaoException;
 
diff --git a/DaoCore/src/de/greenrobot/dao/async/AsyncOperationExecutor.java b/DaoCore/src/de/greenrobot/dao/async/AsyncOperationExecutor.java
index b63ec1b4..7071570c 100644
--- a/DaoCore/src/de/greenrobot/dao/async/AsyncOperationExecutor.java
+++ b/DaoCore/src/de/greenrobot/dao/async/AsyncOperationExecutor.java
@@ -23,7 +23,7 @@
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
 
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase;
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
diff --git a/DaoCore/src/de/greenrobot/dao/internal/DaoConfig.java b/DaoCore/src/de/greenrobot/dao/internal/DaoConfig.java
index 96473029..244ab8a1 100644
--- a/DaoCore/src/de/greenrobot/dao/internal/DaoConfig.java
+++ b/DaoCore/src/de/greenrobot/dao/internal/DaoConfig.java
@@ -20,7 +20,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.Property;
diff --git a/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java b/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
index 9414f1f7..3ca5029b 100644
--- a/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
+++ b/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
@@ -15,8 +15,8 @@
  */
 package de.greenrobot.dao.internal;
 
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteStatement;
 
 /** Helper class to create SQL statements for specific tables (used by greenDAO internally). */
 public class TableStatements {
diff --git a/DaoCore/src/de/greenrobot/dao/query/DeleteQuery.java b/DaoCore/src/de/greenrobot/dao/query/DeleteQuery.java
index 983e3720..1cd1993a 100644
--- a/DaoCore/src/de/greenrobot/dao/query/DeleteQuery.java
+++ b/DaoCore/src/de/greenrobot/dao/query/DeleteQuery.java
@@ -15,7 +15,7 @@
  */
 package de.greenrobot.dao.query;
 
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
 
 /**
diff --git a/DaoCore/src/de/greenrobot/dao/query/LazyList.java b/DaoCore/src/de/greenrobot/dao/query/LazyList.java
index 9bf12337..a0a4cdc2 100644
--- a/DaoCore/src/de/greenrobot/dao/query/LazyList.java
+++ b/DaoCore/src/de/greenrobot/dao/query/LazyList.java
@@ -24,7 +24,7 @@
 import java.util.NoSuchElementException;
 import java.util.concurrent.locks.ReentrantLock;
 
-import android.database.Cursor;
+import net.sqlcipher.Cursor;
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.InternalQueryDaoAccess;
 
diff --git a/DaoCore/src/de/greenrobot/dao/query/Query.java b/DaoCore/src/de/greenrobot/dao/query/Query.java
index 4d36b1b0..47009116 100644
--- a/DaoCore/src/de/greenrobot/dao/query/Query.java
+++ b/DaoCore/src/de/greenrobot/dao/query/Query.java
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import android.database.Cursor;
+import net.sqlcipher.Cursor;
 import android.os.Process;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.DaoException;
diff --git a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoSessionTest.java b/DaoCore/src/de/greenrobot/dao/test/AbstractDaoSessionTest.java
deleted file mode 100644
index aa94a156..00000000
--- a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoSessionTest.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package de.greenrobot.dao.test;
-
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Method;
-
-import android.database.sqlite.SQLiteDatabase;
-import de.greenrobot.dao.AbstractDaoMaster;
-import de.greenrobot.dao.AbstractDaoSession;
-
-/**
- * Base class for DAO (master) related testing.
- * 
- * @author Markus
- * 
- * @param <T>
- *            Type of a concrete DAO master
- */
-public abstract class AbstractDaoSessionTest<T extends AbstractDaoMaster, S extends AbstractDaoSession>
-        extends DbTest {
-
-    private final Class<T> daoMasterClass;
-    protected T daoMaster;
-    protected S daoSession;
-
-    public AbstractDaoSessionTest(Class<T> daoMasterClass) {
-        this(daoMasterClass, true);
-    }
-
-    public AbstractDaoSessionTest(Class<T> daoMasterClass, boolean inMemory) {
-        super(inMemory);
-        this.daoMasterClass = daoMasterClass;
-    }
-
-	@SuppressWarnings("unchecked")
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        try {
-            Constructor<T> constructor = daoMasterClass.getConstructor(SQLiteDatabase.class);
-            daoMaster = constructor.newInstance(db);
-
-            Method createTableMethod = daoMasterClass.getMethod("createAllTables", SQLiteDatabase.class, boolean.class);
-            createTableMethod.invoke(null, db, false);
-        } catch (Exception e) {
-            throw new RuntimeException("Could not prepare DAO session test", e);
-        }
-        daoSession = (S) daoMaster.newSession();
-    }
-
-}
\ No newline at end of file
diff --git a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTest.java b/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTest.java
deleted file mode 100644
index 6c301da7..00000000
--- a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTest.java
+++ /dev/null
@@ -1,95 +0,0 @@
-/*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package de.greenrobot.dao.test;
-
-import java.lang.reflect.Method;
-
-import android.database.sqlite.SQLiteDatabase;
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoLog;
-import de.greenrobot.dao.InternalUnitTestDaoAccess;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.identityscope.IdentityScope;
-
-/**
- * Base class for DAO related testing. Prepares an in-memory DB and DAO.
- * 
- * @author Markus
- * 
- * @param <D>
- *            DAO class
- * @param <T>
- *            Entity type of the DAO
- * @param <K>
- *            Key type of the DAO
- */
-public abstract class AbstractDaoTest<D extends AbstractDao<T, K>, T, K> extends DbTest {
-
-    protected final Class<D> daoClass;
-    protected D dao;
-    protected InternalUnitTestDaoAccess<T, K> daoAccess;
-    protected Property pkColumn;
-    protected IdentityScope<K, T> identityScopeForDao;
-
-    public AbstractDaoTest(Class<D> daoClass) {
-        this(daoClass, true);
-    }
-
-    public AbstractDaoTest(Class<D> daoClass, boolean inMemory) {
-        super(inMemory);
-        this.daoClass = daoClass;
-    }
-
-    public void setIdentityScopeBeforeSetUp(IdentityScope<K, T> identityScope) {
-        this.identityScopeForDao = identityScope;
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        try {
-            setUpTableForDao();
-            daoAccess = new InternalUnitTestDaoAccess<T, K>(db, (Class<AbstractDao<T, K>>) daoClass, identityScopeForDao);
-            dao = (D) daoAccess.getDao();
-        } catch (Exception e) {
-            throw new RuntimeException("Could not prepare DAO Test", e);
-        }
-    }
-
-    protected void setUpTableForDao() throws Exception {
-        try {
-            Method createTableMethod = daoClass.getMethod("createTable", SQLiteDatabase.class, boolean.class);
-            createTableMethod.invoke(null, db, false);
-        } catch (NoSuchMethodException e) {
-            DaoLog.i("No createTable method");
-        }
-    }
-
-    protected void clearIdentityScopeIfAny() {
-        if (identityScopeForDao != null) {
-            identityScopeForDao.clear();
-            DaoLog.d("Identity scope cleared");
-        } else {
-            DaoLog.d("No identity scope to clear");
-        }
-    }
-
-    protected void logTableDump() {
-        logTableDump(dao.getTablename());
-    }
-}
\ No newline at end of file
diff --git a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestLongPk.java b/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestLongPk.java
deleted file mode 100644
index 6be8b3d5..00000000
--- a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestLongPk.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package de.greenrobot.dao.test;
-
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoLog;
-
-/**
- * Base class for DAOs having a long/Long as a PK, which is quite common.
- * 
- * @author Markus
- * 
- * @param <D>
- *            DAO class
- * @param <T>
- *            Entity type of the DAO
- */
-public abstract class AbstractDaoTestLongPk<D extends AbstractDao<T, Long>, T> extends AbstractDaoTestSinglePk<D, T, Long> {
-
-    public AbstractDaoTestLongPk(Class<D> daoClass) {
-        super(daoClass);
-    }
-
-    /** {@inheritDoc} */
-    protected Long createRandomPk() {
-        return random.nextLong();
-    }
-    
-    public void testAssignPk() {
-        if (daoAccess.isEntityUpdateable()) {
-            T entity1 = createEntity(null);
-            if (entity1 != null) {
-                T entity2 = createEntity(null);
-
-                dao.insert(entity1);
-                dao.insert(entity2);
-
-                Long pk1 = daoAccess.getKey(entity1);
-                assertNotNull(pk1);
-                Long pk2 = daoAccess.getKey(entity2);
-                assertNotNull(pk2);
-
-                assertFalse(pk1.equals(pk2));
-
-                assertNotNull(dao.load(pk1));
-                assertNotNull(dao.load(pk2));
-            } else {
-                DaoLog.d("Skipping testAssignPk for " + daoClass + " (createEntity returned null for null key)");
-            }
-        } else {
-            DaoLog.d("Skipping testAssignPk for not updateable " + daoClass);
-        }
-    }
-
-
-}
\ No newline at end of file
diff --git a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java b/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
deleted file mode 100644
index f1d05b43..00000000
--- a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
+++ /dev/null
@@ -1,331 +0,0 @@
-/*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package de.greenrobot.dao.test;
-
-import android.database.Cursor;
-import android.database.DatabaseUtils;
-import android.database.SQLException;
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.SqlUtils;
-
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
-/**
- * Default tests for single-PK entities.
- *
- * @param <D> DAO class
- * @param <T> Entity type of the DAO
- * @param <K> Key type of the DAO
- * @author Markus
- */
-public abstract class AbstractDaoTestSinglePk<D extends AbstractDao<T, K>, T, K> extends AbstractDaoTest<D, T, K> {
-
-    protected Set<K> usedPks;
-    private Property pkColumn;
-
-    public AbstractDaoTestSinglePk(Class<D> daoClass) {
-        super(daoClass);
-        usedPks = new HashSet<K>();
-    }
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        Property[] columns = daoAccess.getProperties();
-        for (Property column : columns) {
-            if (column.primaryKey) {
-                if (pkColumn != null) {
-                    throw new RuntimeException("Test does not work with multiple PK columns");
-                }
-                pkColumn = column;
-            }
-        }
-        if (pkColumn == null) {
-            throw new RuntimeException("Test does not work without a PK column");
-        }
-    }
-
-    public void testInsertAndLoad() {
-        K pk = nextPk();
-        T entity = createEntity(pk);
-        dao.insert(entity);
-        assertEquals(pk, daoAccess.getKey(entity));
-        T entity2 = dao.load(pk);
-        assertNotNull(entity2);
-        assertEquals(daoAccess.getKey(entity), daoAccess.getKey(entity2));
-    }
-
-    public void testInsertInTx() {
-        dao.deleteAll();
-        List<T> list = new ArrayList<T>();
-        for (int i = 0; i < 20; i++) {
-            list.add(createEntityWithRandomPk());
-        }
-        dao.insertInTx(list);
-        assertEquals(list.size(), dao.count());
-    }
-
-    public void testCount() {
-        dao.deleteAll();
-        assertEquals(0, dao.count());
-        dao.insert(createEntityWithRandomPk());
-        assertEquals(1, dao.count());
-        dao.insert(createEntityWithRandomPk());
-        assertEquals(2, dao.count());
-    }
-
-    public void testInsertTwice() {
-        K pk = nextPk();
-        T entity = createEntity(pk);
-        dao.insert(entity);
-        try {
-            dao.insert(entity);
-            fail("Inserting twice should not work");
-        } catch (SQLException expected) {
-            // OK
-        }
-    }
-
-    public void testInsertOrReplaceTwice() {
-        T entity = createEntityWithRandomPk();
-        long rowId1 = dao.insert(entity);
-        long rowId2 = dao.insertOrReplace(entity);
-        if (dao.getPkProperty().type == Long.class) {
-            assertEquals(rowId1, rowId2);
-        }
-    }
-
-    public void testInsertOrReplaceInTx() {
-        dao.deleteAll();
-        List<T> listPartial = new ArrayList<T>();
-        List<T> listAll = new ArrayList<T>();
-        for (int i = 0; i < 20; i++) {
-            T entity = createEntityWithRandomPk();
-            if (i % 2 == 0) {
-                listPartial.add(entity);
-            }
-            listAll.add(entity);
-        }
-        dao.insertOrReplaceInTx(listPartial);
-        dao.insertOrReplaceInTx(listAll);
-        assertEquals(listAll.size(), dao.count());
-    }
-
-    public void testDelete() {
-        K pk = nextPk();
-        dao.deleteByKey(pk);
-        T entity = createEntity(pk);
-        dao.insert(entity);
-        assertNotNull(dao.load(pk));
-        dao.deleteByKey(pk);
-        assertNull(dao.load(pk));
-    }
-
-    public void testDeleteAll() {
-        List<T> entityList = new ArrayList<T>();
-        for (int i = 0; i < 10; i++) {
-            T entity = createEntityWithRandomPk();
-            entityList.add(entity);
-        }
-        dao.insertInTx(entityList);
-        dao.deleteAll();
-        assertEquals(0, dao.count());
-        for (T entity : entityList) {
-            K key = daoAccess.getKey(entity);
-            assertNotNull(key);
-            assertNull(dao.load(key));
-        }
-    }
-
-    public void testDeleteInTx() {
-        List<T> entityList = new ArrayList<T>();
-        for (int i = 0; i < 10; i++) {
-            T entity = createEntityWithRandomPk();
-            entityList.add(entity);
-        }
-        dao.insertInTx(entityList);
-        List<T> entitiesToDelete = new ArrayList<T>();
-        entitiesToDelete.add(entityList.get(0));
-        entitiesToDelete.add(entityList.get(3));
-        entitiesToDelete.add(entityList.get(4));
-        entitiesToDelete.add(entityList.get(8));
-        dao.deleteInTx(entitiesToDelete);
-        assertEquals(entityList.size() - entitiesToDelete.size(), dao.count());
-        for (T deletedEntity : entitiesToDelete) {
-            K key = daoAccess.getKey(deletedEntity);
-            assertNotNull(key);
-            assertNull(dao.load(key));
-        }
-    }
-
-    public void testDeleteByKeyInTx() {
-        List<T> entityList = new ArrayList<T>();
-        for (int i = 0; i < 10; i++) {
-            T entity = createEntityWithRandomPk();
-            entityList.add(entity);
-        }
-        dao.insertInTx(entityList);
-        List<K> keysToDelete = new ArrayList<K>();
-        keysToDelete.add(daoAccess.getKey(entityList.get(0)));
-        keysToDelete.add(daoAccess.getKey(entityList.get(3)));
-        keysToDelete.add(daoAccess.getKey(entityList.get(4)));
-        keysToDelete.add(daoAccess.getKey(entityList.get(8)));
-        dao.deleteByKeyInTx(keysToDelete);
-        assertEquals(entityList.size() - keysToDelete.size(), dao.count());
-        for (K key : keysToDelete) {
-            assertNotNull(key);
-            assertNull(dao.load(key));
-        }
-    }
-
-    public void testRowId() {
-        T entity1 = createEntityWithRandomPk();
-        T entity2 = createEntityWithRandomPk();
-        long rowId1 = dao.insert(entity1);
-        long rowId2 = dao.insert(entity2);
-        assertTrue(rowId1 != rowId2);
-    }
-
-    public void testLoadAll() {
-        dao.deleteAll();
-        List<T> list = new ArrayList<T>();
-        for (int i = 0; i < 15; i++) {
-            T entity = createEntity(nextPk());
-            list.add(entity);
-        }
-        dao.insertInTx(list);
-        List<T> loaded = dao.loadAll();
-        assertEquals(list.size(), loaded.size());
-    }
-
-    public void testQuery() {
-        dao.insert(createEntityWithRandomPk());
-        K pkForQuery = nextPk();
-        dao.insert(createEntity(pkForQuery));
-        dao.insert(createEntityWithRandomPk());
-
-        String where = "WHERE " + dao.getPkColumns()[0] + "=?";
-        List<T> list = dao.queryRaw(where, pkForQuery.toString());
-        assertEquals(1, list.size());
-        assertEquals(pkForQuery, daoAccess.getKey(list.get(0)));
-    }
-
-    public void testUpdate() {
-        dao.deleteAll();
-        T entity = createEntityWithRandomPk();
-        dao.insert(entity);
-        dao.update(entity);
-        assertEquals(1, dao.count());
-    }
-
-    public void testReadWithOffset() {
-        K pk = nextPk();
-        T entity = createEntity(pk);
-        dao.insert(entity);
-
-        Cursor cursor = queryWithDummyColumnsInFront(5, "42", pk);
-        try {
-            T entity2 = daoAccess.readEntity(cursor, 5);
-            assertEquals(pk, daoAccess.getKey(entity2));
-        } finally {
-            cursor.close();
-        }
-    }
-
-    public void testLoadPkWithOffset() {
-        runLoadPkTest(10);
-    }
-
-    public void testLoadPk() {
-        runLoadPkTest(0);
-    }
-
-    protected void runLoadPkTest(int offset) {
-        K pk = nextPk();
-        T entity = createEntity(pk);
-        dao.insert(entity);
-
-        Cursor cursor = queryWithDummyColumnsInFront(offset, "42", pk);
-        try {
-            K pk2 = daoAccess.readKey(cursor, offset);
-            assertEquals(pk, pk2);
-        } finally {
-            cursor.close();
-        }
-    }
-
-    protected Cursor queryWithDummyColumnsInFront(int dummyCount, String valueForColumn, K pk) {
-        StringBuilder builder = new StringBuilder("SELECT ");
-        for (int i = 0; i < dummyCount; i++) {
-            builder.append(valueForColumn).append(",");
-        }
-        SqlUtils.appendColumns(builder, "T", dao.getAllColumns()).append(" FROM ");
-        builder.append(dao.getTablename()).append(" T");
-        if (pk != null) {
-            builder.append(" WHERE ");
-
-            assertEquals(1, dao.getPkColumns().length);
-            builder.append(dao.getPkColumns()[0]).append("=");
-            DatabaseUtils.appendValueToSql(builder, pk);
-        }
-
-        String select = builder.toString();
-        Cursor cursor = db.rawQuery(select, null);
-        assertTrue(cursor.moveToFirst());
-        try {
-            for (int i = 0; i < dummyCount; i++) {
-                assertEquals(valueForColumn, cursor.getString(i));
-            }
-            if (pk != null) {
-                assertEquals(1, cursor.getCount());
-            }
-        } catch (RuntimeException ex) {
-            cursor.close();
-            throw ex;
-        }
-        return cursor;
-    }
-
-    /** Provides a collision free PK () not returned before in the current test. */
-    protected K nextPk() {
-        for (int i = 0; i < 100000; i++) {
-            K pk = createRandomPk();
-            if (usedPks.add(pk)) {
-                return pk;
-            }
-        }
-        throw new IllegalStateException("Could not find a new PK");
-    }
-
-    protected T createEntityWithRandomPk() {
-        return createEntity(nextPk());
-    }
-
-    /** K does not have to be collision free, check nextPk for collision free PKs. */
-    protected abstract K createRandomPk();
-
-    /**
-     * Creates an insertable entity. If the given key is null, but the entity's PK is not null the method must return
-     * null.
-     */
-    protected abstract T createEntity(K key);
-
-}
\ No newline at end of file
diff --git a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestStringPk.java b/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestStringPk.java
deleted file mode 100644
index e0c6ddff..00000000
--- a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestStringPk.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.dao.test;
-
-import de.greenrobot.dao.AbstractDao;
-
-/**
- * Base class for DAOs having a String as a PK.
- * 
- * @author Markus
- * 
- * @param <D>
- *            DAO class
- * @param <T>
- *            Entity type of the DAO
- */
-public abstract class AbstractDaoTestStringPk<D extends AbstractDao<T, String>, T> extends
-        AbstractDaoTestSinglePk<D, T, String> {
-
-    public AbstractDaoTestStringPk(Class<D> daoClass) {
-        super(daoClass);
-    }
-
-    @Override
-    protected String createRandomPk() {
-        int len = 1 + random.nextInt(30);
-        StringBuilder builder = new StringBuilder();
-        for (int i = 0; i < len; i++) {
-            char c = (char) ('a' + random.nextInt('z' - 'a'));
-            builder.append(c);
-        }
-        return builder.toString();
-    }
-
-}
diff --git a/DaoCore/src/de/greenrobot/dao/test/DbTest.java b/DaoCore/src/de/greenrobot/dao/test/DbTest.java
deleted file mode 100644
index 6788eca0..00000000
--- a/DaoCore/src/de/greenrobot/dao/test/DbTest.java
+++ /dev/null
@@ -1,117 +0,0 @@
-/*
- * Copyright (C) 2011-2013 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package de.greenrobot.dao.test;
-
-import android.app.Application;
-import android.app.Instrumentation;
-import android.database.sqlite.SQLiteDatabase;
-import android.test.AndroidTestCase;
-import de.greenrobot.dao.DbUtils;
-
-import java.util.Random;
-
-/**
- * Base class for database related testing, which prepares an in-memory or an file-based DB (using the test {@link
- * android.content.Context}). Also, offers some convenience methods to create new {@link Application} objects similar to
- * {@link android.test.ApplicationTestCase}.
- * <p/>
- * Unlike ApplicationTestCase, this class should behave more correctly when you call {@link #createApplication(Class)}
- * during {@link #setUp()}: {@link android.test.ApplicationTestCase#testApplicationTestCaseSetUpProperly()} leaves
- * Application objects un-terminated.
- *
- * @author Markus
- */
-public abstract class DbTest extends AndroidTestCase {
-
-    public static final String DB_NAME = "greendao-unittest-db.temp";
-
-    protected final Random random;
-    protected final boolean inMemory;
-    protected SQLiteDatabase db;
-
-    private Application application;
-
-    public DbTest() {
-        this(true);
-    }
-
-    public DbTest(boolean inMemory) {
-        this.inMemory = inMemory;
-        random = new Random();
-    }
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        db = createDatabase();
-    }
-
-    /** Returns a prepared application with the onCreate method already called. */
-    public <T extends Application> T createApplication(Class<T> appClass) {
-        assertNull("Application already created", application);
-        T app;
-        try {
-            app = (T) Instrumentation.newApplication(appClass, getContext());
-        } catch (Exception e) {
-            throw new RuntimeException("Could not create application " + appClass, e);
-        }
-        app.onCreate();
-        application = app;
-        return app;
-    }
-
-    /** Terminates a previously created application. Also called by {@link #tearDown()} if needed. */
-    public void terminateApplication() {
-        assertNotNull("Application not yet created", application);
-        application.onTerminate();
-        application = null;
-    }
-
-    /** Gets the previously created application. */
-    public <T extends Application> T getApplication() {
-        assertNotNull("Application not yet created", application);
-        return (T) application;
-    }
-
-    /** May be overriden by sub classes to set up a different db. */
-    protected SQLiteDatabase createDatabase() {
-        if (inMemory) {
-            return SQLiteDatabase.create(null);
-        } else {
-            getContext().deleteDatabase(DB_NAME);
-            return getContext().openOrCreateDatabase(DB_NAME, 0, null);
-        }
-    }
-
-    @Override
-    /** Closes the db, and terminates an application, if one was created before. */
-    protected void tearDown() throws Exception {
-        if (application != null) {
-            terminateApplication();
-        }
-        db.close();
-        if (!inMemory) {
-            getContext().deleteDatabase(DB_NAME);
-        }
-        super.tearDown();
-    }
-
-    protected void logTableDump(String tablename) {
-        DbUtils.logTableDump(db, tablename);
-    }
-
-}
\ No newline at end of file
diff --git a/DaoGenerator/.classpath b/DaoGenerator/.classpath
index a82e8447..4f4b8900 100644
--- a/DaoGenerator/.classpath
+++ b/DaoGenerator/.classpath
@@ -10,5 +10,6 @@
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 	<classpathentry exported="true" kind="con" path="org.springsource.ide.eclipse.gradle.classpathcontainer"/>
 	<classpathentry kind="con" path="org.springsource.ide.eclipse.gradle.dsld.classpathcontainer"/>
+	<classpathentry kind="lib" path="libs/freemarker-2.3.19.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
diff --git a/DaoGenerator/libs/freemarker-2.3.19.jar b/DaoGenerator/libs/freemarker-2.3.19.jar
new file mode 100644
index 00000000..b13671da
Binary files /dev/null and b/DaoGenerator/libs/freemarker-2.3.19.jar differ
diff --git a/DaoGenerator/src-template/content-provider.ftl b/DaoGenerator/src-template/content-provider.ftl
index 93396f73..39489750 100644
--- a/DaoGenerator/src-template/content-provider.ftl
+++ b/DaoGenerator/src-template/content-provider.ftl
@@ -5,7 +5,7 @@ import android.content.ContentResolver;
 import android.content.ContentValues;
 import android.content.UriMatcher;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase;
 import android.database.sqlite.SQLiteQueryBuilder;
 import android.net.Uri;
 
diff --git a/DaoGenerator/src-template/dao-master.ftl b/DaoGenerator/src-template/dao-master.ftl
index 4de541cd..e7692371 100644
--- a/DaoGenerator/src-template/dao-master.ftl
+++ b/DaoGenerator/src-template/dao-master.ftl
@@ -20,9 +20,9 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 package ${schema.defaultJavaPackageDao};
 
 import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteDatabase.CursorFactory;
-import android.database.sqlite.SQLiteOpenHelper;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase.CursorFactory;
+import net.sqlcipher.database.SQLiteOpenHelper;
 import android.util.Log;
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
diff --git a/DaoGenerator/src-template/dao-session.ftl b/DaoGenerator/src-template/dao-session.ftl
index e0201a48..f6e7f175 100644
--- a/DaoGenerator/src-template/dao-session.ftl
+++ b/DaoGenerator/src-template/dao-session.ftl
@@ -19,7 +19,7 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 -->
 package ${schema.defaultJavaPackageDao};
 
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase;
 
 import java.util.Map;
 
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 443f74dc..5ccd4164 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -28,8 +28,8 @@ import java.util.List;
 import java.util.ArrayList;
 </#if>
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
