diff --git a/.travis.yml b/.travis.yml
index 9d0df029..d05d416a 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,28 +1,43 @@
 language: android
+jdk: oraclejdk8
 # Use the Travis Container-Based Infrastructure
 sudo: false
-jdk:
-  - oraclejdk8
+
+cache:
+  directories:
+    - ${TRAVIS_BUILD_DIR}/gradle/caches/
+    - ${TRAVIS_BUILD_DIR}/gradle/wrapper/dists/
+  
 env:
   global:
-    # increase adb timeout (2 minutes by default)
-    - ADB_INSTALL_TIMEOUT=8
-  matrix:
-    - ANDROID_SDKS=android-23,sysimg-23  ANDROID_TARGET=android-19  ANDROID_ABI=armeabi-v7a
+    - ANDROID_API_LEVEL=24
+    - ANDROID_BUILD_TOOLS_VERSION=25.0.0
+    - ANDROID_ABI=armeabi-v7a
+    - ADB_INSTALL_TIMEOUT=20 # minutes (2 minutes by default)
+    
 android:
   components:
+    - tools # to get the new `repository-11.xml`
     - platform-tools
-    - tools
-    - build-tools-23.0.3
-    - android-23
+    - tools # to install Android SDK tools 25.1.x, https://github.com/travis-ci/travis-ci/issues/6040#issuecomment-219367943
+    - build-tools-$ANDROID_BUILD_TOOLS_VERSION
+    - android-$ANDROID_API_LEVEL
+    # Support library
+    - extra-android-support
+    # Latest artifacts in local repository
     - extra-android-m2repository
+    # Specify at least one system image
+    - sys-img-armeabi-v7a-android-$ANDROID_API_LEVEL
+    
 before_install:
-  - echo no | android create avd --force -n test -t $ANDROID_TARGET --abi $ANDROID_ABI
-  - emulator -avd test -no-skin -no-audio -no-window &
+  - mkdir "$ANDROID_HOME/licenses" || true
+  - echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license"
+
 before_script:
-  - chmod +x gradlew
-  - chmod +x ./ci/wait_for_emulator
-  - ./ci/wait_for_emulator
-  - adb shell input keyevent 82 &
+  # Create and start emulator
+  - echo no | android create avd --force -n test -t "android-"$ANDROID_API_LEVEL --abi $ANDROID_ABI
+  - emulator -avd test -no-skin -no-window &
+  - android-wait-for-emulator
+
 script:
-    - TERM=dumb ./gradlew connectedCheck
+    - ./gradlew clean connectedCheck --stacktrace
diff --git a/DaoCore/build.gradle b/DaoCore/build.gradle
index 92c0b6c7..404a3f52 100644
--- a/DaoCore/build.gradle
+++ b/DaoCore/build.gradle
@@ -4,7 +4,7 @@ apply plugin: 'signing'
 
 group = 'org.greenrobot'
 archivesBaseName = 'greendao'
-version = '3.1.1'
+version = '3.2.0'
 sourceCompatibility = 1.7
 targetCompatibility = 1.7
 
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java
index c2df27f0..a0667c02 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java
@@ -269,7 +269,7 @@ protected StringBuilder append(StringBuilder builder, Property property) {
     }
 
     /**
-     * Sets the offset for query results in combination with {@link #limit(int)}. The first {@code limit} results are
+     * Sets the offset for query results in combination with {@link #limit(int)}. The first {@code offset} results are
      * skipped and the total number of results will be limited by {@code limit}. You cannot use offset without limit.
      */
     public QueryBuilder<T> offset(int offset) {
diff --git a/DaoGenerator/build.gradle b/DaoGenerator/build.gradle
index 7142bc73..17a620e9 100644
--- a/DaoGenerator/build.gradle
+++ b/DaoGenerator/build.gradle
@@ -4,7 +4,7 @@ apply plugin: 'signing'
 
 group = 'org.greenrobot'
 archivesBaseName = 'greendao-generator'
-version = '3.1.0'
+version = '3.2.0'
 sourceCompatibility = 1.7
 
 repositories {
diff --git a/DaoGenerator/src-template/dao-deep.ftl b/DaoGenerator/src-template/dao-deep.ftl
index 35123713..2a447654 100644
--- a/DaoGenerator/src-template/dao-deep.ftl
+++ b/DaoGenerator/src-template/dao-deep.ftl
@@ -31,10 +31,10 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
             builder.append(',');
 </#if>
 </#list>
-            builder.append(" FROM ${entity.tableName} T");
+            builder.append(" FROM ${entity.dbName} T");
 <#list entity.toOneRelations as toOne>
-            builder.append(" LEFT JOIN ${toOne.targetEntity.tableName} T${toOne_index}<#--
---> ON T.\"${toOne.fkProperties[0].columnName}\"=T${toOne_index}.\"${toOne.targetEntity.pkProperty.columnName}\"");
+            builder.append(" LEFT JOIN ${toOne.targetEntity.dbName} T${toOne_index}<#--
+--> ON T.\"${toOne.fkProperties[0].dbName}\"=T${toOne_index}.\"${toOne.targetEntity.pkProperty.dbName}\"");
 </#list>
             builder.append(' ');
             selectDeep = builder.toString();
diff --git a/DaoGenerator/src-template/dao-master.ftl b/DaoGenerator/src-template/dao-master.ftl
index f53e4ad1..5cc3111d 100644
--- a/DaoGenerator/src-template/dao-master.ftl
+++ b/DaoGenerator/src-template/dao-master.ftl
@@ -47,7 +47,7 @@ public class ${schema.prefix}DaoMaster extends AbstractDaoMaster {
     /** Creates underlying database table using DAOs. */
     public static void createAllTables(Database db, boolean ifNotExists) {
 <#list schema.entities as entity>
-<#if !entity.skipTableCreation>
+<#if !entity.skipCreationInDb>
         ${entity.classNameDao}.createTable(db, ifNotExists);
 </#if>
 </#list>
@@ -56,7 +56,7 @@ public class ${schema.prefix}DaoMaster extends AbstractDaoMaster {
     /** Drops underlying database table using DAOs. */
     public static void dropAllTables(Database db, boolean ifExists) {
 <#list schema.entities as entity>
-<#if !entity.skipTableCreation>
+<#if !entity.skipCreationInDb>
         ${entity.classNameDao}.dropTable(db, ifExists);
 </#if>
 </#list>
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 98502ca0..421e8e79 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -66,11 +66,11 @@ import ${entity.javaPackage}.${entity.className}.Builder;
 </#if>
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
- * DAO for table "${entity.tableName}".
+ * DAO for table "${entity.dbName}".
 */
 public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${entity.pkType}> {
 
-    public static final String TABLENAME = "${entity.tableName}";
+    public static final String TABLENAME = "${entity.dbName}";
 
     /**
      * Properties of entity ${entity.className}.<br/>
@@ -78,7 +78,7 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
      */
     public static class Properties {
 <#list entity.propertiesColumns as property>
-        public final static Property ${property.propertyName?cap_first} = new Property(${property_index}, ${property.javaType}.class, "${property.propertyName}", ${property.primaryKey?string}, "${property.columnName}");
+        public final static Property ${property.propertyName?cap_first} = new Property(${property_index}, ${property.javaType}.class, "${property.propertyName}", ${property.primaryKey?string}, "${property.dbName}");
 </#list>
     }
 
@@ -104,27 +104,27 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
 </#if>
     }
 
-<#if !entity.skipTableCreation>
+<#if !entity.skipCreationInDb>
     /** Creates the underlying database table. */
     public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "\"${entity.tableName}\" (" + //
+        db.execSQL("CREATE TABLE " + constraint + "\"${entity.dbName}\" (" + //
 <#list entity.propertiesColumns as property>
-                "\"${property.columnName}\" ${property.columnType}<#if property.constraints??> ${property.constraints} </#if><#if property_has_next>," +<#else>);");</#if> // ${property_index}: ${property.propertyName}
+                "\"${property.dbName}\" ${property.dbType}<#if property.constraints??> ${property.constraints} </#if><#if property_has_next>," +<#else>);");</#if> // ${property_index}: ${property.propertyName}
 </#list>
 <#if entity.indexes?has_content >
         // Add Indexes
 <#list entity.indexes as index>
-        db.execSQL("CREATE <#if index.unique>UNIQUE </#if>INDEX " + constraint + "${index.name} ON ${entity.tableName}" +
+        db.execSQL("CREATE <#if index.unique>UNIQUE </#if>INDEX " + constraint + "${index.name} ON ${entity.dbName}" +
                 " (<#list index.properties 
-as property>\"${property.columnName}\"<#if (index.propertiesOrder[property_index])??> ${index.propertiesOrder[property_index]}</#if><#sep>,</#list>);");
+as property>\"${property.dbName}\"<#if (index.propertiesOrder[property_index])??> ${index.propertiesOrder[property_index]}</#if><#sep>,</#list>);");
 </#list>
 </#if>         
     }
 
     /** Drops the underlying database table. */
     public static void dropTable(Database db, boolean ifExists) {
-        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"${entity.tableName}\"";
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"${entity.dbName}\"";
         db.execSQL(sql);
     }
 
@@ -168,7 +168,7 @@ as property>\"${property.columnName}\"<#if (index.propertiesOrder[property_index
     }
 
 </#list>
-<#if entity.active>
+<#if entity.active && !entity.protobuf>
     @Override
     protected final void attachEntity(${entity.className} entity) {
         super.attachEntity(entity);
@@ -271,9 +271,13 @@ as property>\"${property.columnName}\"<#if (index.propertiesOrder[property_index
 <#if entity.pkProperty??>
 <#if entity.pkProperty.notNull>
         throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
+<#else>
+<#if entity.protobuf>
+        return entity.has${entity.pkProperty.propertyName?cap_first}();
 <#else>
         return entity.get${entity.pkProperty.propertyName?cap_first}() != null;
 </#if>
+</#if>
 <#else>
         // TODO
         return false;
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 51a483b7..f23cfc8f 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -56,12 +56,12 @@ import ${additionalImport};
 <#else>
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 </#if>
-<#if entity.javaDoc ??>
 
+<#if entity.javaDoc ??>
 ${entity.javaDoc}
 <#else>
 /**
- * Entity mapped to table "${entity.tableName}".
+ * Entity mapped to table "${entity.dbName}".
  */
 </#if>
 <#if entity.codeBeforeClass ??>
@@ -70,12 +70,12 @@ ${entity.codeBeforeClass}
 <#assign entityAttrs = []>
 <#if schema.name != "default"><#assign entityAttrs = entityAttrs + ["schema = \"${schema.name}\""]></#if>
 <#if entity.active><#assign entityAttrs = entityAttrs + ["active = true"]></#if>
-<#if entity.nonDefaultTableName><#assign entityAttrs = entityAttrs + ["nameInDb = \"${entity.tableName}\""]></#if>
+<#if entity.nonDefaultDbName><#assign entityAttrs = entityAttrs + ["nameInDb = \"${entity.dbName}\""]></#if>
 <#if (entity.multiIndexes?size > 0)>
     <#assign idxAttr>indexes = <@multiIndexes/></#assign>
     <#assign entityAttrs = entityAttrs + [idxAttr]>
 </#if>
-<#if entity.skipTableCreation><#assign entityAttrs = entityAttrs + ["createInDb = false"]></#if>
+<#if entity.skipCreationInDb><#assign entityAttrs = entityAttrs + ["createInDb = false"]></#if>
 @Entity<#if (entityAttrs?size > 0)>(${entityAttrs?join(", ")})</#if>
 public class ${entity.className}<#if
 entity.superclass?has_content> extends ${entity.superclass} </#if><#if
@@ -83,7 +83,7 @@ entity.interfacesToImplement?has_content> implements <#list entity.interfacesToI
 as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 <#list entity.properties as property>
 <#assign notNull = property.notNull && !primitiveTypes?seq_contains(property.javaTypeInEntity)>
-<#if property.primaryKey||notNull||property.unique||property.index??||property.nonDefaultColumnName||property.converter??>
+<#if property.primaryKey||notNull||property.unique||property.index??||property.nonDefaultDbName||property.converter??>
 
 </#if>
 <#if property.javaDocField ??>
@@ -95,8 +95,8 @@ ${property.javaDocField}
 <#if property.primaryKey>
     @Id<#if property.autoincrement>(autoincrement = true)</#if>
 </#if>
-<#if property.nonDefaultColumnName>
-    @Property(nameInDb = "${property.columnName}")
+<#if property.nonDefaultDbName>
+    @Property(nameInDb = "${property.dbName}")
 </#if>
 <#if property.converter??>
     @Convert(converter = ${property.converter}.class, columnType = ${property.javaType}.class)
@@ -137,8 +137,8 @@ ${property.javaDocField}
     private transient ${toOne.resolvedKeyJavaType[0]} ${toOne.name}__resolvedKey;
 <#else>
     @ToOne
-<#if toOne.fkProperties[0].nonDefaultColumnName>
-    @Property(nameInDb = "${toOne.fkProperties[0].columnName}")
+<#if toOne.fkProperties[0].nonDefaultDbName>
+    @Property(nameInDb = "${toOne.fkProperties[0].dbName}")
 </#if>
 <#if toOne.fkProperties[0].unique>
     @Unique
diff --git a/DaoGenerator/src/org/greenrobot/greendao/generator/DaoGenerator.java b/DaoGenerator/src/org/greenrobot/greendao/generator/DaoGenerator.java
index 0cc93f7e..bc49738e 100644
--- a/DaoGenerator/src/org/greenrobot/greendao/generator/DaoGenerator.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/DaoGenerator.java
@@ -30,6 +30,7 @@
 
 import freemarker.template.Configuration;
 import freemarker.template.Template;
+import freemarker.template.TemplateNotFoundException;
 
 /**
  * Once you have your model created, use this class to generate entities and DAOs.
@@ -58,9 +59,7 @@ public DaoGenerator() throws IOException {
         patternKeepFields = compilePattern("FIELDS");
         patternKeepMethods = compilePattern("METHODS");
 
-        Configuration config = new Configuration(Configuration.VERSION_2_3_23);
-        config.setClassForTemplateLoading(this.getClass(), "/");
-
+        Configuration config = getConfiguration("dao.ftl");
         templateDao = config.getTemplate("dao.ftl");
         templateDaoMaster = config.getTemplate("dao-master.ftl");
         templateDaoSession = config.getTemplate("dao-session.ftl");
@@ -69,6 +68,31 @@ public DaoGenerator() throws IOException {
         templateContentProvider = config.getTemplate("content-provider.ftl");
     }
 
+    private Configuration getConfiguration(String probingTemplate) throws IOException {
+        Configuration config = new Configuration(Configuration.VERSION_2_3_23);
+        config.setClassForTemplateLoading(getClass(), "/");
+
+        try {
+            config.getTemplate(probingTemplate);
+        } catch (TemplateNotFoundException e) {
+            // When running from an IDE like IntelliJ, class loading resources may fail for some reason (Gradle is OK)
+
+            // Working dir is module dir
+            File dir = new File("src/main/resources/");
+            if (!dir.exists()) {
+                // Working dir is base module dir
+                dir = new File("DaoGenerator/src/main/resources/");
+            }
+            if (dir.exists() && new File(dir, probingTemplate).exists()) {
+                config.setDirectoryForTemplateLoading(dir);
+                config.getTemplate(probingTemplate);
+            } else {
+                throw e;
+            }
+        }
+        return config;
+    }
+
     private Pattern compilePattern(String sectionName) {
         int flags = Pattern.DOTALL | Pattern.MULTILINE;
         return Pattern.compile(".*^\\s*?//\\s*?KEEP " + sectionName + ".*?\n(.*?)^\\s*// KEEP " + sectionName
diff --git a/DaoGenerator/src/org/greenrobot/greendao/generator/Entity.java b/DaoGenerator/src/org/greenrobot/greendao/generator/Entity.java
index e660259a..7b4debbd 100644
--- a/DaoGenerator/src/org/greenrobot/greendao/generator/Entity.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/Entity.java
@@ -58,8 +58,8 @@
     private final List<String> interfacesToImplement;
     private final List<ContentProvider> contentProviders;
 
-    private String tableName;
-    private boolean nonDefaultTableName;
+    private String dbName;
+    private boolean nonDefaultDbName;
     private String classNameDao;
     private String classNameTest;
     private String javaPackage;
@@ -75,7 +75,7 @@
     private boolean constructors;
     private boolean skipGeneration;
     private boolean skipGenerationTest;
-    private boolean skipTableCreation;
+    private boolean skipCreationInDb;
     private Boolean active;
     private Boolean hasKeepSections;
 
@@ -150,7 +150,7 @@ public PropertyBuilder addProperty(PropertyType propertyType, String propertyNam
     /** Adds a standard _id column required by standard Android classes, e.g. list adapters. */
     public PropertyBuilder addIdProperty() {
         PropertyBuilder builder = addLongProperty("id");
-        builder.columnName("_id").primaryKey();
+        builder.dbName("_id").primaryKey();
         return builder;
     }
 
@@ -233,7 +233,7 @@ public ToOne addToOneWithoutProperty(String name, Entity target, String fkColumn
         if (unique) {
             propertyBuilder.unique();
         }
-        propertyBuilder.columnName(fkColumnName);
+        propertyBuilder.dbName(fkColumnName);
         Property column = propertyBuilder.getProperty();
         Property[] fkColumns = {column};
         ToOne toOne = new ToOne(schema, this, target, fkColumns, false);
@@ -279,13 +279,21 @@ public Schema getSchema() {
         return schema;
     }
 
-    public String getTableName() {
-        return tableName;
+    public String getDbName() {
+        return dbName;
     }
 
+    @Deprecated
+    /**
+     * @deprecated Use setDbName
+     */
     public void setTableName(String tableName) {
-        this.tableName = tableName;
-        this.nonDefaultTableName = tableName != null;
+        setDbName(tableName);
+    }
+
+    public void setDbName(String dbName) {
+        this.dbName = dbName;
+        this.nonDefaultDbName = dbName != null;
     }
 
     public String getClassName() {
@@ -385,13 +393,21 @@ public void setSkipGeneration(boolean skipGeneration) {
         this.skipGeneration = skipGeneration;
     }
 
-    /** Flag if CREATE & DROP TABLE scripts should be skipped in Dao. */
+    @Deprecated
+    /**
+     * @deprecated Use setSkipCreationInDb
+     */
     public void setSkipTableCreation(boolean skipTableCreation) {
-        this.skipTableCreation = skipTableCreation;
+        setSkipCreationInDb(skipTableCreation);
+    }
+
+    /** Flag if CREATE & DROP TABLE scripts should be skipped in Dao. */
+    public void setSkipCreationInDb(boolean skipCreationInDb) {
+        this.skipCreationInDb = skipCreationInDb;
     }
 
-    public boolean isSkipTableCreation() {
-        return skipTableCreation;
+    public boolean isSkipCreationInDb() {
+        return skipCreationInDb;
     }
 
     public boolean isSkipGenerationTest() {
@@ -557,9 +573,9 @@ void init2ndPass() {
     }
 
     protected void init2ndPassNamesWithDefaults() {
-        if (tableName == null) {
-            tableName = DaoUtil.dbName(className);
-            nonDefaultTableName = false;
+        if (dbName == null) {
+            dbName = DaoUtil.dbName(className);
+            nonDefaultDbName = false;
         }
 
         if (classNameDao == null) {
@@ -591,11 +607,11 @@ protected void init2ndPassIndexNamesWithDefaults() {
         for (int i = 0; i < indexes.size(); i++) {
             Index index = indexes.get(i);
             if (index.getName() == null) {
-                String indexName = "IDX_" + getTableName();
+                String indexName = "IDX_" + getDbName();
                 List<Property> properties = index.getProperties();
                 for (int j = 0; j < properties.size(); j++) {
                     Property property = properties.get(j);
-                    indexName += "_" + property.getColumnName();
+                    indexName += "_" + property.getDbName();
                     if ("DESC".equalsIgnoreCase(index.getPropertiesOrder().get(j))) {
                         indexName += "_DESC";
                     }
@@ -714,8 +730,8 @@ public void validatePropertyExists(Property property) {
         return multiIndexes;
     }
 
-    public boolean isNonDefaultTableName() {
-        return nonDefaultTableName;
+    public boolean isNonDefaultDbName() {
+        return nonDefaultDbName;
     }
 
     @Override
diff --git a/DaoGenerator/src/org/greenrobot/greendao/generator/Property.java b/DaoGenerator/src/org/greenrobot/greendao/generator/Property.java
index f2b362bf..84857e70 100644
--- a/DaoGenerator/src/org/greenrobot/greendao/generator/Property.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/Property.java
@@ -29,14 +29,30 @@ public PropertyBuilder(Schema schema, Entity entity, PropertyType propertyType,
             property = new Property(schema, entity, propertyType, propertyName);
         }
 
+        @Deprecated
+        /**
+         * @deprecated use dbName
+         */
         public PropertyBuilder columnName(String columnName) {
-            property.columnName = columnName;
-            property.nonDefaultColumnName = columnName != null;
+            return dbName(columnName);
+        }
+
+        public PropertyBuilder dbName(String dbName) {
+            property.dbName = dbName;
+            property.nonDefaultDbName = dbName != null;
             return this;
         }
 
+        @Deprecated
+        /**
+         * @deprecated use dbType
+         */
         public PropertyBuilder columnType(String columnType) {
-            property.columnType = columnType;
+            return dbType(columnType);
+        }
+
+        public PropertyBuilder dbType(String dbType) {
+            property.dbType = dbType;
             return this;
         }
 
@@ -76,6 +92,14 @@ public PropertyBuilder notNull() {
             return this;
         }
 
+        public PropertyBuilder nonPrimitiveType() {
+            if (!property.propertyType.isScalar()) {
+                throw new RuntimeException("Type is already non-primitive");
+            }
+            property.nonPrimitiveType = true;
+            return this;
+        }
+
         public PropertyBuilder index() {
             Index index = new Index();
             index.addProperty(property);
@@ -170,8 +194,8 @@ public Property getProperty() {
     private PropertyType propertyType;
     private final String propertyName;
 
-    private String columnName;
-    private String columnType;
+    private String dbName;
+    private String dbType;
 
     private String customType;
     private String customTypeClassName;
@@ -193,6 +217,7 @@ public Property getProperty() {
 
     private boolean unique;
     private boolean notNull;
+    private boolean nonPrimitiveType;
 
     /** Initialized in 2nd pass */
     private String constraints;
@@ -201,7 +226,7 @@ public Property getProperty() {
 
     private String javaType;
 
-    private boolean nonDefaultColumnName;
+    private boolean nonDefaultDbName;
 
     /**
      * Index, which has only this property
@@ -229,16 +254,16 @@ public void setPropertyType(PropertyType propertyType) {
         this.propertyType = propertyType;
     }
 
-    public String getColumnName() {
-        return columnName;
+    public String getDbName() {
+        return dbName;
     }
 
-    public boolean isNonDefaultColumnName() {
-        return nonDefaultColumnName;
+    public boolean isNonDefaultDbName() {
+        return nonDefaultDbName;
     }
 
-    public String getColumnType() {
-        return columnType;
+    public String getDbType() {
+        return dbType;
     }
 
     public boolean isPrimaryKey() {
@@ -269,6 +294,10 @@ public boolean isNotNull() {
         return notNull;
     }
 
+    public boolean isNonPrimitiveType() {
+        return nonPrimitiveType || !propertyType.isScalar();
+    }
+
     public String getJavaType() {
         return javaType;
     }
@@ -400,16 +429,18 @@ public void setIndex(Index index) {
 
     void init2ndPass() {
         initConstraint();
-        if (columnType == null) {
-            columnType = schema.mapToDbType(propertyType);
+        if (dbType == null) {
+            dbType = schema.mapToDbType(propertyType);
         }
-        if (columnName == null) {
-            columnName = DaoUtil.dbName(propertyName);
-            nonDefaultColumnName = false;
-        } else if (primaryKey && propertyType == PropertyType.Long && columnName.equals("_id")) {
-            nonDefaultColumnName = false;
+        if (dbName == null) {
+            dbName = DaoUtil.dbName(propertyName);
+            nonDefaultDbName = false;
+        } else if (primaryKey && propertyType == PropertyType.Long && dbName.equals("_id")) {
+            nonDefaultDbName = false;
         }
-        if (notNull) {
+
+        // For backwards compatibility, consider notNull. It should be only dependent on nonPrimitiveType in the future.
+        if (notNull && !nonPrimitiveType) {
             javaType = schema.mapToJavaTypeNotNull(propertyType);
         } else {
             javaType = schema.mapToJavaTypeNullable(propertyType);
diff --git a/DaoGenerator/src/org/greenrobot/greendao/generator/PropertyOrderList.java b/DaoGenerator/src/org/greenrobot/greendao/generator/PropertyOrderList.java
index 81fe9e79..6f3a49e9 100644
--- a/DaoGenerator/src/org/greenrobot/greendao/generator/PropertyOrderList.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/PropertyOrderList.java
@@ -69,7 +69,7 @@ public String getCommaSeparatedString(String tablePrefixOrNull) {
                 if(tablePrefixOrNull != null) {
                     builder.append(tablePrefixOrNull).append('.');
                 }
-                builder.append('\'').append(property.getColumnName()).append('\'').append(' ');
+                builder.append('\'').append(property.getDbName()).append('\'').append(' ');
             }
             if (order != null) {
                 builder.append(order);
diff --git a/DaoGenerator/src/org/greenrobot/greendao/generator/PropertyType.java b/DaoGenerator/src/org/greenrobot/greendao/generator/PropertyType.java
index ef27259e..c638db3b 100644
--- a/DaoGenerator/src/org/greenrobot/greendao/generator/PropertyType.java
+++ b/DaoGenerator/src/org/greenrobot/greendao/generator/PropertyType.java
@@ -20,9 +20,22 @@
 
 /**
  * Currently available types for properties.
- * 
+ *
  * @author Markus
  */
 public enum PropertyType {
-    Byte, Short, Int, Long, Boolean, Float, Double, String, ByteArray, Date
+
+    Byte(true), Short(true), Int(true), Long(true), Boolean(true), Float(true), Double(true),
+    String(false), ByteArray(false), Date(false);
+
+    private final boolean scalar;
+
+    PropertyType(boolean scalar) {
+        this.scalar = scalar;
+    }
+
+    /** True if the type can be prepresented using a scalar (primitive type). */
+    public boolean isScalar() {
+        return scalar;
+    }
 }
diff --git a/README.md b/README.md
index 5ea3544c..e3b6fbc3 100644
--- a/README.md
+++ b/README.md
@@ -30,14 +30,14 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'org.greenrobot:greendao-gradle-plugin:3.1.1'
+        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.0'
     }
 }
  
 apply plugin: 'org.greenrobot.greendao'
  
 dependencies {
-    compile 'org.greenrobot:greendao:3.1.1'
+    compile 'org.greenrobot:greendao:3.2.0'
 }
 ```
 
diff --git a/build.gradle b/build.gradle
index f1b55c02..bde199f1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -3,18 +3,18 @@ task wrapper(type: Wrapper) {
 }
 
 ext {
-    buildToolsVersion = '23.0.3'
-    compileSdkVersion = 23
+    buildToolsVersion = '25.0.0'
+    compileSdkVersion = 25
 
     minSdkVersion = 7
-    targetSdkVersion = 23
+    targetSdkVersion = 25
 
     // common dependencies for Android projects
     dep = [
             androidPlugin: 'com.android.tools.build:gradle:2.2.2',
             greendaoPlugin: 'org.greenrobot:greendao-gradle-plugin:3.1.1',
-            appcompat: 'com.android.support:appcompat-v7:23.4.0',
-            recyclerview: 'com.android.support:recyclerview-v7:23.4.0'
+            appcompat: 'com.android.support:appcompat-v7:25.0.0',
+            recyclerview: 'com.android.support:recyclerview-v7:25.0.0'
     ]
 }
 
diff --git a/ci/wait_for_emulator b/ci/wait_for_emulator
deleted file mode 100644
index 207f028c..00000000
--- a/ci/wait_for_emulator
+++ /dev/null
@@ -1,17 +0,0 @@
-#!/bin/bash
-
-bootanim=""
-failcounter=0
-until [[ "$bootanim" =~ "stopped" ]]; do
-   bootanim=`adb -e shell getprop init.svc.bootanim 2>&1`
-   echo "$bootanim"
-   if [[ "$bootanim" =~ "not found" ]]; then
-      let "failcounter += 1"
-      if [[ $failcounter -gt 3 ]]; then
-        echo "Failed to start emulator"
-        exit 1
-      fi
-   fi
-   sleep 1
-done
-echo "Done"
\ No newline at end of file
diff --git a/examples/DaoExample/build.gradle b/examples/DaoExample/build.gradle
index 540ebb36..3e0acb5b 100644
--- a/examples/DaoExample/build.gradle
+++ b/examples/DaoExample/build.gradle
@@ -40,7 +40,7 @@ dependencies {
     compile project(':DaoCore')
 
     // This is only needed if you want to use encrypted databases
-    compile 'net.zetetic:android-database-sqlcipher:3.5.1'
+    compile 'net.zetetic:android-database-sqlcipher:3.5.4'
 }
 
 uploadArchives.enabled = false
diff --git a/examples/RxDaoExample/build.gradle b/examples/RxDaoExample/build.gradle
index 6cfc376c..bb31168f 100644
--- a/examples/RxDaoExample/build.gradle
+++ b/examples/RxDaoExample/build.gradle
@@ -41,7 +41,7 @@ dependencies {
     compile 'io.reactivex:rxjava:1.1.8'
 
     // This is only needed if you want to use encrypted databases
-    compile 'net.zetetic:android-database-sqlcipher:3.5.1'
+    compile 'net.zetetic:android-database-sqlcipher:3.5.4'
 }
 
 uploadArchives.enabled = false
diff --git a/greendao-api/build.gradle b/greendao-api/build.gradle
index dfb927e2..0971eb30 100644
--- a/greendao-api/build.gradle
+++ b/greendao-api/build.gradle
@@ -1,7 +1,7 @@
 apply plugin: 'java'
 
 group = 'org.greenrobot'
-version = '3.1.1'
+version = '3.2.0'
 
 sourceCompatibility = 1.7
 targetCompatibility = 1.7
diff --git a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Entity.java b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Entity.java
index d78d0871..ef5bf619 100644
--- a/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Entity.java
+++ b/greendao-api/src/main/java/org/greenrobot/greendao/annotation/Entity.java
@@ -54,4 +54,9 @@
      */
     boolean generateGettersSetters() default true;
 
+    /**
+     * Define a protobuf class of this entity to create an additional, special DAO for.
+     */
+    Class protobuf() default void.class;
+
 }
diff --git a/tests/DaoTest/build.gradle b/tests/DaoTest/build.gradle
index 6b7894a7..620810a2 100644
--- a/tests/DaoTest/build.gradle
+++ b/tests/DaoTest/build.gradle
@@ -27,7 +27,7 @@ dependencies {
     testCompile 'org.robolectric:robolectric:3.1'
     testCompile 'org.mockito:mockito-core:1.10.19'
 
-    androidTestCompile 'net.zetetic:android-database-sqlcipher:3.5.1'
+    androidTestCompile 'net.zetetic:android-database-sqlcipher:3.5.4'
     androidTestCompile 'io.reactivex:rxjava:1.1.7'
 }
 
diff --git a/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntity.java b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntity.java
index d77affdd..6792704b 100644
--- a/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntity.java
+++ b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntity.java
@@ -2,7 +2,8 @@
 
 import org.greenrobot.greendao.annotation.*;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "MINIMAL_ENTITY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntity.java
index 5505351c..3c13a436 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntity.java
@@ -2,7 +2,8 @@
 
 import org.greenrobot.greendao.annotation.*;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "ABCDEF_ENTITY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntity.java
index d205382b..5d971a37 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntity.java
@@ -5,7 +5,8 @@
 import org.greenrobot.greendao.daotest.DaoSession;
 import org.greenrobot.greendao.DaoException;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "AN_ACTIVE_ENTITY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntity.java
index 4f2f7bf8..b4fa4d9f 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntity.java
@@ -2,7 +2,8 @@
 
 import org.greenrobot.greendao.annotation.*;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "AUTOINCREMENT_ENTITY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntity.java
index 129cfc48..ac9249d3 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntity.java
@@ -4,7 +4,8 @@
 
 import org.greenrobot.greendao.daotest.customtype.MyTimestamp;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "CUSTOM_TYPE_ENTITY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntity.java
index a8f09eaf..dcc5b63b 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntity.java
@@ -4,7 +4,8 @@
 
 import java.lang.String;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "DATE_ENTITY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntity.java
index 50ad5cec..b8c10542 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntity.java
@@ -2,7 +2,8 @@
 
 import org.greenrobot.greendao.annotation.*;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "EXTENDS_IMPLEMENTS_ENTITY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntity.java
index 612828ab..06ba201a 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntity.java
@@ -2,7 +2,8 @@
 
 import org.greenrobot.greendao.annotation.*;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "INDEXED_STRING_ENTITY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntity.java
index 04f0342a..071c3745 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntity.java
@@ -2,7 +2,8 @@
 
 import org.greenrobot.greendao.annotation.*;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "JOIN_MANY_TO_DATE_ENTITY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntity.java
index aee1b7ea..51a4debc 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntity.java
@@ -5,7 +5,8 @@
 import org.greenrobot.greendao.daotest.DaoSession;
 import org.greenrobot.greendao.DaoException;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "RELATION_ENTITY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntity.java
index 87b47757..e3350218 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntity.java
@@ -2,7 +2,8 @@
 
 import org.greenrobot.greendao.annotation.*;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "SIMPLE_ENTITY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNull.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNull.java
index 061ee42f..45b8c769 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNull.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNull.java
@@ -2,7 +2,8 @@
 
 import org.greenrobot.greendao.annotation.*;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "SIMPLE_ENTITY_NOT_NULL".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntity.java
index 20b98570..48ff4187 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntity.java
@@ -2,7 +2,8 @@
 
 import org.greenrobot.greendao.annotation.*;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "ORDER TRANSACTION GROUP BY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMaster.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMaster.java
index 2d6c6c77..825724e5 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMaster.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMaster.java
@@ -6,6 +6,7 @@
 
 // KEEP INCLUDES - put your custom includes here
 // KEEP INCLUDES END
+
 /**
  * Entity mapped to table "SQLITE_MASTER".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntity.java
index 1694f621..51d88e08 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntity.java
@@ -2,7 +2,8 @@
 
 import org.greenrobot.greendao.annotation.*;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "STRING_KEY_VALUE_ENTITY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntity.java
index d338eee3..b3fe6c6e 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntity.java
@@ -2,7 +2,7 @@
 
 import org.greenrobot.greendao.annotation.*;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 
 /**
  * This entity is used by internal tests of greenDAO.
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntity.java
index e2abee49..5a0ee2ce 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntity.java
@@ -6,7 +6,8 @@
 import org.greenrobot.greendao.daotest.DaoSession;
 import org.greenrobot.greendao.DaoException;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "TO_MANY_ENTITY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntity.java
index 050fa9a3..6f69b1d4 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntity.java
@@ -2,7 +2,8 @@
 
 import org.greenrobot.greendao.annotation.*;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "TO_MANY_TARGET_ENTITY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntity.java
index c3696c00..dadd3b6f 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntity.java
@@ -6,7 +6,8 @@
 import org.greenrobot.greendao.daotest.DaoSession;
 import org.greenrobot.greendao.DaoException;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+
 /**
  * Entity mapped to table "TREE_ENTITY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/KeepEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/KeepEntity.java
index 1f8c1762..15dfe468 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/KeepEntity.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/KeepEntity.java
@@ -7,6 +7,7 @@
 // KEEP INCLUDES - put your custom includes here
 import android.os.Build;
 // KEEP INCLUDES END
+
 /**
  * Entity mapped to table "KEEP_ENTITY".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/ToManyTarget2.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/ToManyTarget2.java
index 7c06869d..c7e83cc4 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/ToManyTarget2.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/ToManyTarget2.java
@@ -6,6 +6,7 @@
 
 // KEEP INCLUDES - put your custom includes here
 // KEEP INCLUDES END
+
 /**
  * Entity mapped to table "TO_MANY_TARGET2".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialentity/RelationSource2.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialentity/RelationSource2.java
index deab6ae4..4eceae9d 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialentity/RelationSource2.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialentity/RelationSource2.java
@@ -16,6 +16,7 @@
 
 // KEEP INCLUDES - put your custom includes here
 // KEEP INCLUDES END
+
 /**
  * Entity mapped to table "RELATION_SOURCE2".
  */
diff --git a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialentity/ToOneTarget2.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialentity/ToOneTarget2.java
index 2be6c2f6..25ce358f 100644
--- a/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialentity/ToOneTarget2.java
+++ b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialentity/ToOneTarget2.java
@@ -6,6 +6,7 @@
 
 // KEEP INCLUDES - put your custom includes here
 // KEEP INCLUDES END
+
 /**
  * Entity mapped to table "TO_ONE_TARGET2".
  */
diff --git a/tests/DaoTestGenerator/src/org/greenrobot/greendao/generator/gentest/TestDaoGenerator.java b/tests/DaoTestGenerator/src/org/greenrobot/greendao/generator/gentest/TestDaoGenerator.java
index 5ea9b841..87f95f75 100644
--- a/tests/DaoTestGenerator/src/org/greenrobot/greendao/generator/gentest/TestDaoGenerator.java
+++ b/tests/DaoTestGenerator/src/org/greenrobot/greendao/generator/gentest/TestDaoGenerator.java
@@ -193,7 +193,7 @@ protected Entity createDate() {
 
     protected void createSpecialNames() {
         Entity specialNamesEntity = schema.addEntity("SpecialNamesEntity");
-        specialNamesEntity.setTableName("ORDER TRANSACTION GROUP BY");
+        specialNamesEntity.setDbName("ORDER TRANSACTION GROUP BY");
         specialNamesEntity.addIdProperty();
         specialNamesEntity.addStringProperty("count");
         specialNamesEntity.addStringProperty("select");
@@ -251,11 +251,11 @@ protected void createAutoincrement() {
 
     protected void createSqliteMaster() {
         Entity entity = schema.addEntity("SqliteMaster");
-        entity.setSkipTableCreation(true);
+        entity.setSkipCreationInDb(true);
         entity.setHasKeepSections(true);
         entity.addStringProperty("type");
         entity.addStringProperty("name");
-        entity.addStringProperty("tableName").columnName("tbl_name");
+        entity.addStringProperty("tableName").dbName("tbl_name");
         entity.addLongProperty("rootpage");
         entity.addStringProperty("sql");
     }
