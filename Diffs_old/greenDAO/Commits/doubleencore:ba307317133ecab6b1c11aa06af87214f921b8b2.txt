diff --git a/DaoGenerator/src-template/annotation.ftl b/DaoGenerator/src-template/annotation.ftl
new file mode 100644
index 00000000..97b1d728
--- /dev/null
+++ b/DaoGenerator/src-template/annotation.ftl
@@ -0,0 +1,24 @@
+<#macro print_annotation annotation prefix>
+${prefix}@${annotation.name}<#rt>
+    <@compress single_line=true>
+        <#if annotation.parameters?has_content>
+            (
+            <#assign keys = annotation.parameters?keys>
+            <#list keys as key>
+                <#if key != annotation_no_name>
+                    ${key} =
+                </#if>
+                ${annotation.parameters[key]}<#t>
+                <#if key_has_next>,<#t> </#if>
+            </#list>
+            )
+        </#if>
+    </@compress>
+</#macro>
+
+<#macro print_annotations annotations prefix>
+    <#list annotations as annotation>
+        <@print_annotation annotation, prefix/>
+
+    </#list>
+</#macro>
\ No newline at end of file
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 2449e833..df4dcfab 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -17,6 +17,7 @@ You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
+<#include "*/annotation.ftl">
 <#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
 <#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
 <#assign complexTypes = ["String", "ByteArray", "Date"]/>
@@ -25,11 +26,6 @@ package ${entity.javaPackage};
 <#if entity.toManyRelations?has_content>
 import java.util.List;
 </#if>
-<#list entity.properties as property>
-<#if property.annotationGson??>
-import com.google.gson.annotations.SerializedName;
-</#if>
-</#list>
 <#if entity.active>
 import ${schema.defaultJavaPackageDao}.DaoSession;
 import de.greenrobot.dao.DaoException;
@@ -52,6 +48,7 @@ import ${additionalImport};
 /**
  * Entity mapped to table ${entity.tableName}.
  */
+<@print_annotations entity.classAnnotations, ""/>
 public class ${entity.className}<#if
 entity.superclass?has_content> extends ${entity.superclass} </#if><#if
 entity.interfacesToImplement?has_content> implements <#list entity.interfacesToImplement
@@ -61,9 +58,7 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value. */
 </#if>
-<#if property.annotationGson??>
-    @SerializedName("${property.annotationGson}")
-</#if>
+    <@print_annotations property.fieldAnnotations, "    "/>
     private ${property.javaType} ${property.propertyName};
 </#list>
 
@@ -94,10 +89,13 @@ ${keepFields!}    // KEEP FIELDS END
 
 </#if>
 <#if entity.constructors>
+
+    <@print_annotations entity.emptyConstructorAnnotations, "    "/>
     public ${entity.className}() {
     }
 <#if entity.propertiesPk?has_content && entity.propertiesPk?size != entity.properties?size>
 
+    <@print_annotations entity.fullConstructorAnnotations, "    "/>
     public ${entity.className}(<#list entity.propertiesPk as
 property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
 <#list entity.propertiesPk as property>
@@ -126,6 +124,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value. */
 </#if>
+    <@print_annotations property.getterAnnotations, "    "/>
     public ${property.javaType} get${property.propertyName?cap_first}() {
         return ${property.propertyName};
     }
@@ -133,6 +132,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value; ensure this value is available before it is saved to the database. */
 </#if>
+    <@print_annotations property.setterAnnotations, "    "/>
     public void set${property.propertyName?cap_first}(${property.javaType} ${property.propertyName}) {
         this.${property.propertyName} = ${property.propertyName};
     }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Annotation.java b/DaoGenerator/src/de/greenrobot/daogenerator/Annotation.java
new file mode 100644
index 00000000..b437efe4
--- /dev/null
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Annotation.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package de.greenrobot.daogenerator;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.regex.Pattern;
+
+/**
+ * Model class for an Annotation that can be attached to classses, properties and their setter/getter/constructor methods
+ * @author yigit@path.com
+ */
+public class Annotation {
+    private String name;
+    protected String _package;
+    private Map<String, String> parameters = new HashMap<String, String>();
+    public static Pattern QUOTE = Pattern.compile("\"");
+
+    //we use this if Annotation has only 1 parameter
+    public static final String NO_NAME = "__no_name";
+    public static final String NULL = "null";
+
+    public Annotation(String name, String... params) {
+		this(name);
+        this.parameters = new HashMap<String, String>();
+        if(params.length > 1 && params.length % 2 != 0) {
+            throw new RuntimeException("annotation parameters should be key value pairs");
+        }
+        if(params.length == 1) {
+            this.parameters.put(NO_NAME, params[0] == null ? NULL : params[0]);
+        } else {
+            for(int i = 0; i < params.length; i += 2) {
+                this.parameters.put(params[i], params[i + 1] == null ? NULL : params[i + 1]);
+            }
+        }
+    }
+
+    public String getPackage() {
+        return _package;
+    }
+
+    public void setPackage(String _package) {
+        this._package = _package;
+    }
+
+    public Annotation(String name) {
+		//if name includes a ".", split it and write to package
+		int dotIndex = name.lastIndexOf(".");
+		if(dotIndex != -1) {
+			_package = name.substring(0, dotIndex);
+			name = name.substring(dotIndex + 1);
+		}
+        this.name = name;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public Map<String, String> getParameters() {
+        return parameters;
+    }
+}
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index 0f9ecdd8..6e7ef673 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -146,6 +146,7 @@ private void generate(Template template, File outDirFile, String javaPackage, St
         Map<String, Object> root = new HashMap<String, Object>();
         root.put("schema", schema);
         root.put("entity", entity);
+        root.put("annotation_no_name", Annotation.NO_NAME);
         if (additionalObjectsForTemplate != null) {
             root.putAll(additionalObjectsForTemplate);
         }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index 482513fb..c00794d5 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -49,6 +49,10 @@
     private final Collection<String> additionalImportsDao;
     private final List<String> interfacesToImplement;
     private final List<ContentProvider> contentProviders;
+    //annotation lists
+    private final List<Annotation> classAnnotations;
+    private final List<Annotation> emptyConstructorAnnotations;
+    private final List<Annotation> fullConstructorAnnotations;
 
     private String tableName;
     private String classNameDao;
@@ -85,6 +89,10 @@
         additionalImportsDao = new TreeSet<String>();
         interfacesToImplement = new ArrayList<String>();
         contentProviders = new ArrayList<ContentProvider>();
+        classAnnotations = new ArrayList<Annotation>();
+        emptyConstructorAnnotations = new ArrayList<Annotation>();
+        fullConstructorAnnotations = new ArrayList<Annotation>();
+
         constructors = true;
     }
 
@@ -385,6 +393,33 @@ public void setSkipGenerationTest(boolean skipGenerationTest) {
         return incomingToManyRelations;
     }
 
+    public List<Annotation> getClassAnnotations() {
+    	return classAnnotations;
+    }
+
+    public List<Annotation> getEmptyConstructorAnnotations() {
+    	return emptyConstructorAnnotations;
+    }
+
+    public List<Annotation> getFullConstructorAnnotations() {
+    	return fullConstructorAnnotations;
+    }
+
+    public Entity addClassAnnotation(Annotation annotation) {
+    	classAnnotations.add(annotation);
+    	return this;
+    }
+
+    public Entity addEmptyConstructorAnnotation(Annotation annotation) {
+    	emptyConstructorAnnotations.add(annotation);
+    	return this;
+    }
+
+    public Entity addFullConstructorAnnotation(Annotation annotation) {
+    	fullConstructorAnnotations.add(annotation);
+    	return this;
+    }
+
     /**
      * Entities with relations are active, but this method allows to make the entities active even if it does not have
      * relations.
@@ -605,6 +640,24 @@ private void init3rdPassAdditionalImports() {
             Entity targetEntity = toMany.getTargetEntity();
             checkAdditionalImportsEntityTargetEntity(targetEntity);
         }
+
+        addAnnotationImports(classAnnotations);
+        addAnnotationImports(emptyConstructorAnnotations);
+        addAnnotationImports(fullConstructorAnnotations);
+        for (Property property : properties) {
+            addAnnotationImports(property.getGetterAnnotations());
+            addAnnotationImports(property.getSetterAnnotations());
+            addAnnotationImports(property.getFieldAnnotations());
+        }
+
+    }
+
+    private void addAnnotationImports(List<Annotation> annotations) {
+        for (Annotation annotation : annotations) {
+            if (annotation.getPackage() != null) {
+                additionalImportsEntity.add(annotation.getPackage() + "." + annotation.getName());
+            }
+        }
     }
 
     private void checkAdditionalImportsEntityTargetEntity(Entity targetEntity) {
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index 4f4f8233..22bb0790 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -17,6 +17,9 @@
  */
 package de.greenrobot.daogenerator;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /** Model class for an entity's property: a Java property mapped to a data base column. */
 public class Property {
 
@@ -106,8 +109,24 @@ public Property getProperty() {
             return property;
         }
 
-        public PropertyBuilder annotationGson(String annotationGson) {
-            property.annotationGson = annotationGson;
+        public PropertyBuilder addFieldAnnotation(Annotation annotation) {
+            property.fieldAnnotations.add(annotation);
+            return this;
+        }
+
+        public PropertyBuilder addSetterAnnotation(Annotation annotation) {
+            property.setterAnnotations.add(annotation);
+            return this;
+        }
+
+        public PropertyBuilder addGetterAnnotation(Annotation annotation) {
+            property.getterAnnotations.add(annotation);
+            return this;
+        }
+
+        public PropertyBuilder addSetterGetterAnnotation(Annotation annotation) {
+            addSetterAnnotation(annotation);
+            addGetterAnnotation(annotation);
             return this;
         }
     }
@@ -128,7 +147,9 @@ public PropertyBuilder annotationGson(String annotationGson) {
     private boolean unique;
     private boolean notNull;
 
-    private String annotationGson;
+    private final List<Annotation> fieldAnnotations;
+    private final List<Annotation> setterAnnotations;
+    private final List<Annotation> getterAnnotations;
 
     /** Initialized in 2nd pass */
     private String constraints;
@@ -142,6 +163,9 @@ public Property(Schema schema, Entity entity, PropertyType propertyType, String
         this.entity = entity;
         this.propertyName = propertyName;
         this.propertyType = propertyType;
+        this.fieldAnnotations = new ArrayList<Annotation>();
+        this.getterAnnotations = new ArrayList<Annotation>();
+        this.setterAnnotations = new ArrayList<Annotation>();
     }
 
     public String getPropertyName() {
@@ -184,10 +208,6 @@ public boolean isNotNull() {
         return notNull;
     }
 
-    public String getAnnotationGson(){
-        return annotationGson;
-    }
-
     public String getJavaType() {
         return javaType;
     }
@@ -247,6 +267,18 @@ private void initConstraint() {
         }
     }
 
+    public List<Annotation> getFieldAnnotations() {
+        return fieldAnnotations;
+    }
+
+    public List<Annotation> getSetterAnnotations() {
+        return setterAnnotations;
+    }
+
+    public List<Annotation> getGetterAnnotations() {
+        return getterAnnotations;
+    }
+
     void init3ndPass() {
         // Nothing to do so far
     }
