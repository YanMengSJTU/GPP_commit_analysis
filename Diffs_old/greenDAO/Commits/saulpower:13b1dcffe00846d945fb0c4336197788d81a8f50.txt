diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
index 95c29eb2..5c8f5b69 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
@@ -16,11 +16,6 @@
 
 package de.greenrobot.dao;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.List;
-
 import android.database.CrossProcessCursor;
 import android.database.Cursor;
 import android.database.CursorWindow;
@@ -35,6 +30,11 @@
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+
 /**
  * Base class for all DAOs: Implements entity operations like insert, load, delete, and query.
  * 
@@ -130,6 +130,7 @@ public T load(K key) {
         if (identityScope != null) {
             T entity = identityScope.get(key);
             if (entity != null) {
+                onLoadEntity(entity);
                 return entity;
             }
         }
@@ -264,6 +265,7 @@ private void executeInsertInTx(SQLiteStatement stmt, Iterable<T> entities, boole
                 }
                 try {
                     for (T entity : entities) {
+                        onInsertEntity(entity);
                         bindValues(stmt, entity);
                         if (setPrimaryKey) {
                             long rowId = stmt.executeInsert();
@@ -304,6 +306,7 @@ public long insertWithoutSettingPk(T entity) {
         long rowId;
         if (db.isDbLockedByCurrentThread()) {
             synchronized (stmt) {
+                onInsertEntity(entity);
                 bindValues(stmt, entity);
                 rowId = stmt.executeInsert();
             }
@@ -312,6 +315,7 @@ public long insertWithoutSettingPk(T entity) {
             db.beginTransaction();
             try {
                 synchronized (stmt) {
+                    onInsertEntity(entity);
                     bindValues(stmt, entity);
                     rowId = stmt.executeInsert();
                 }
@@ -336,6 +340,7 @@ private long executeInsert(T entity, SQLiteStatement stmt) {
         long rowId;
         if (db.isDbLockedByCurrentThread()) {
             synchronized (stmt) {
+                onInsertEntity(entity);
                 bindValues(stmt, entity);
                 rowId = stmt.executeInsert();
             }
@@ -344,6 +349,7 @@ private long executeInsert(T entity, SQLiteStatement stmt) {
             db.beginTransaction();
             try {
                 synchronized (stmt) {
+                    onInsertEntity(entity);
                     bindValues(stmt, entity);
                     rowId = stmt.executeInsert();
                 }
@@ -412,9 +418,11 @@ final protected T loadCurrent(Cursor cursor, int offset, boolean lock) {
             long key = cursor.getLong(pkOrdinal + offset);
             T entity = lock ? identityScopeLong.get2(key) : identityScopeLong.get2NoLock(key);
             if (entity != null) {
+                onLoadEntity(entity);
                 return entity;
             } else {
                 entity = readEntity(cursor, offset);
+                onLoadEntity(entity);
                 attachEntity(entity);
                 if (lock) {
                     identityScopeLong.put2(key, entity);
@@ -434,6 +442,7 @@ final protected T loadCurrent(Cursor cursor, int offset, boolean lock) {
                 return entity;
             } else {
                 entity = readEntity(cursor, offset);
+                onLoadEntity(entity);
                 attachEntity(key, entity, lock);
                 return entity;
             }
@@ -447,6 +456,7 @@ final protected T loadCurrent(Cursor cursor, int offset, boolean lock) {
                 }
             }
             T entity = readEntity(cursor, offset);
+            onLoadEntity(entity);
             attachEntity(entity);
             return entity;
         }
@@ -493,6 +503,7 @@ public void deleteAll() {
     /** Deletes the given entity from the database. Currently, only single value PK entities are supported. */
     public void delete(T entity) {
         assertSinglePk();
+        onDeleteEntity(entity);
         K key = getKeyVerified(entity);
         deleteByKey(key);
     }
@@ -547,6 +558,7 @@ private void deleteInTxInternal(Iterable<T> entities, Iterable<K> keys) {
                 try {
                     if (entities != null) {
                         for (T entity : entities) {
+                            onDeleteEntity(entity);
                             K key = getKeyVerified(entity);
                             deleteByKeyInsideSynchronized(key, stmt);
                             if (keysToRemoveFromIdentityScope != null) {
@@ -619,6 +631,9 @@ public void deleteByKeyInTx(K... keys) {
 
     /** Resets all locally changed properties of the entity by reloading the values from the database. */
     public void refresh(T entity) {
+
+        onRefreshEntity(entity);
+
         assertSinglePk();
         K key = getKeyVerified(entity);
         String sql = statements.getSelectByKey();
@@ -665,6 +680,9 @@ public void update(T entity) {
     }
 
     protected void updateInsideSynchronized(T entity, SQLiteStatement stmt, boolean lock) {
+
+        onUpdateEntity(entity);
+
         // To do? Check if it's worth not to bind PKs here (performance).
         bindValues(stmt, entity);
         int index = config.allColumns.length + 1;
@@ -805,4 +823,18 @@ public SQLiteDatabase getDatabase() {
     /** Returns true if the Entity class can be updated, e.g. for setting the PK after insert. */
     abstract protected boolean isEntityUpdateable();
 
+    protected void onInsertEntity(T entity) {
+    }
+
+    protected void onLoadEntity(T entity) {
+    }
+
+    protected void onRefreshEntity(T entity) {
+    }
+
+    protected void onUpdateEntity(T entity) {
+    }
+
+    protected void onDeleteEntity(T entity) {
+    }
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
deleted file mode 100644
index 97eedd73..00000000
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package de.greenrobot.daoexample;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
-/**
- * Entity mapped to table NOTE.
- */
-public class Note {
-
-    private Long id;
-    /** Not-null value. */
-    private String text;
-    private NoteType type;
-    private java.util.Date date;
-    private String comment;
-
-    public Note() {
-    }
-
-    public Note(Long id) {
-        this.id = id;
-    }
-
-    public Note(Long id, String text, NoteType type, java.util.Date date, String comment) {
-        this.id = id;
-        this.text = text;
-        this.type = type;
-        this.date = date;
-        this.comment = comment;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    /** Not-null value. */
-    public String getText() {
-        return text;
-    }
-
-    /** Not-null value; ensure this value is available before it is saved to the database. */
-    public void setText(String text) {
-        this.text = text;
-    }
-
-    public NoteType getType() {
-        return type;
-    }
-
-    public void setType(NoteType type) {
-        this.type = type;
-    }
-
-    public java.util.Date getDate() {
-        return date;
-    }
-
-    public void setDate(java.util.Date date) {
-        this.date = date;
-    }
-
-    public String getComment() {
-        return comment;
-    }
-
-    public void setComment(String comment) {
-        this.comment = comment;
-    }
-
-}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
deleted file mode 100644
index 1fd3e0b7..00000000
--- a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
+++ /dev/null
@@ -1,139 +0,0 @@
-package de.greenrobot.daoexample;
-
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
-
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daoexample.Note;
-import de.greenrobot.daoexample.NoteType.NoteType;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
- * DAO for table NOTE.
-*/
-public class NoteDao extends AbstractDao<Note, Long> {
-
-    public static final String TABLENAME = "NOTE";
-
-    /**
-     * Properties of entity Note.<br/>
-     * Can be used for QueryBuilder and for referencing column names.
-    */
-    public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
-        public final static Property Type = new Property(2, NoteType.class, "type", false, "TYPE");
-        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
-        public final static Property Comment = new Property(4, String.class, "comment", false, "COMMENT");
-    };
-
-
-    public NoteDao(DaoConfig config) {
-        super(config);
-    }
-    
-    public NoteDao(DaoConfig config, DaoSession daoSession) {
-        super(config, daoSession);
-    }
-
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'NOTE' (" + //
-                "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'TEXT' TEXT NOT NULL ," + // 1: text
-                "'TYPE' INTEGER," + // 2: type
-                "'DATE' INTEGER," + // 3: date
-                "'COMMENT' TEXT);"); // 4: comment
-    }
-
-    /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
-        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
-        db.execSQL(sql);
-    }
-
-    /** @inheritdoc */
-    @Override
-    protected void bindValues(SQLiteStatement stmt, Note entity) {
-        stmt.clearBindings();
- 
-        Long id = entity.getId();
-        if (id != null) {
-            stmt.bindLong(1, id);
-        }
-        stmt.bindString(2, entity.getText());
- 
-        NoteType type = entity.getType();
-        if (type != null) {
-            stmt.bindLong(3, type.getValue());
-        }
- 
-        java.util.Date date = entity.getDate();
-        if (date != null) {
-            stmt.bindLong(4, date.getTime());
-        }
- 
-        String comment = entity.getComment();
-        if (comment != null) {
-            stmt.bindString(5, comment);
-        }
-    }
-
-    /** @inheritdoc */
-    @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
-    }    
-
-    /** @inheritdoc */
-    @Override
-    public Note readEntity(Cursor cursor, int offset) {
-        Note entity = new Note( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.getString(offset + 1), // text
-            cursor.isNull(offset + 2) ? null : NoteType.fromInt(cursor.getLong(offset + 2)), // type
-            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date
-            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // comment
-        );
-        return entity;
-    }
-     
-    /** @inheritdoc */
-    @Override
-    public void readEntity(Cursor cursor, Note entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setText(cursor.getString(offset + 1));
-        entity.setType(cursor.isNull(offset + 2) ? null : NoteType.fromInt(cursor.getLong(offset + 2)));
-        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
-        entity.setComment(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
-     }
-    
-    /** @inheritdoc */
-    @Override
-    protected Long updateKeyAfterInsert(Note entity, long rowId) {
-        entity.setId(rowId);
-        return rowId;
-    }
-    
-    /** @inheritdoc */
-    @Override
-    public Long getKey(Note entity) {
-        if(entity != null) {
-            return entity.getId();
-        } else {
-            return null;
-        }
-    }
-
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
-        return true;
-    }
-    
-}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/database/BaseObject.java b/DaoExample/src-gen/de/greenrobot/daoexample/database/BaseObject.java
new file mode 100644
index 00000000..04e90bff
--- /dev/null
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/database/BaseObject.java
@@ -0,0 +1,125 @@
+package de.greenrobot.daoexample.database;
+
+import de.greenrobot.daoexample.database.DaoSession;
+import de.greenrobot.dao.DaoException;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+/**
+ * Entity mapped to table BASE_OBJECT.
+ */
+public class BaseObject {
+
+    private java.util.Date updatedOn;
+    private java.util.Date createdOn;
+    /** Not-null value. */
+    private transient String derivedEntityType;
+    private transient Long baseId;
+
+    /** Used to resolve relations */
+    private transient DaoSession daoSession;
+
+    /** Used for active entity operations. */
+    private transient BaseObjectDao myDao;
+
+
+    public BaseObject() {
+    }
+
+    public BaseObject(Long baseId) {
+        this.baseId = baseId;
+    }
+
+    public BaseObject(java.util.Date updatedOn, java.util.Date createdOn, String derivedEntityType, Long baseId) {
+        this.updatedOn = updatedOn;
+        this.createdOn = createdOn;
+        this.derivedEntityType = derivedEntityType;
+        this.baseId = baseId;
+    }
+
+    /** called by internal mechanisms, do not call yourself. */
+    public void __setDaoSession(DaoSession daoSession) {
+        this.daoSession = daoSession;
+        myDao = daoSession != null ? daoSession.getBaseObjectDao() : null;
+    }
+
+    void loadBase(BaseObjectDao dao, Long baseId) {
+        myDao = dao;
+        this.baseId = baseId;
+        myDao.refresh(this);
+    }
+
+    void insertBase(BaseObjectDao dao) {
+        myDao = dao;
+        dao.insert(this);
+    }
+
+    void updateBase() {
+        myDao.update(this);
+    }
+
+    void deleteBase() {
+        myDao.delete(this);
+    }
+
+    public java.util.Date getUpdatedOn() {
+        return updatedOn;
+    }
+
+    public void setUpdatedOn(java.util.Date updatedOn) {
+        this.updatedOn = updatedOn;
+    }
+
+
+    public java.util.Date getCreatedOn() {
+        return createdOn;
+    }
+
+    public void setCreatedOn(java.util.Date createdOn) {
+        this.createdOn = createdOn;
+    }
+
+
+    /** Not-null value. */
+    public String getDerivedEntityType() {
+        return derivedEntityType;
+    }
+    /** Not-null value; ensure this value is available before it is saved to the database. */
+
+    public void setDerivedEntityType(String derivedEntityType) {
+        this.derivedEntityType = derivedEntityType;
+    }
+
+
+    public Long getBaseId() {
+        return baseId;
+    }
+
+    public void setBaseId(Long baseId) {
+        this.baseId = baseId;
+    }
+
+    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    public void delete() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }    
+        myDao.delete(this);
+    }
+
+    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    public void update() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }    
+        myDao.update(this);
+    }
+
+    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    public void refresh() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }    
+        myDao.refresh(this);
+    }
+
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/database/BaseObjectDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/database/BaseObjectDao.java
new file mode 100644
index 00000000..da33994b
--- /dev/null
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/database/BaseObjectDao.java
@@ -0,0 +1,139 @@
+package de.greenrobot.daoexample.database;
+
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.Property;
+import de.greenrobot.dao.internal.DaoConfig;
+
+import de.greenrobot.daoexample.database.BaseObject;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/** 
+ * DAO for table BASE_OBJECT.
+*/
+public class BaseObjectDao extends AbstractDao<BaseObject, Long> {
+
+    public static final String TABLENAME = "BASE_OBJECT";
+
+    /**
+     * Properties of entity BaseObject.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
+    public static class Properties {
+        public final static Property UpdatedOn = new Property(0, java.util.Date.class, "updatedOn", false, "UPDATED_ON");
+        public final static Property CreatedOn = new Property(1, java.util.Date.class, "createdOn", false, "CREATED_ON");
+        public final static Property DerivedEntityType = new Property(2, String.class, "derivedEntityType", false, "DERIVED_ENTITY_TYPE");
+        public final static Property BaseId = new Property(3, Long.class, "baseId", true, "BASE_ID");
+    };
+
+    private DaoSession daoSession;
+
+
+    public BaseObjectDao(DaoConfig config) {
+        super(config);
+    }
+    
+    public BaseObjectDao(DaoConfig config, DaoSession daoSession) {
+        super(config, daoSession);
+        this.daoSession = daoSession;
+    }
+
+    /** Creates the underlying database table. */
+    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+        String constraint = ifNotExists? "IF NOT EXISTS ": "";
+        db.execSQL("CREATE TABLE " + constraint + "'BASE_OBJECT' (" + //
+                "'UPDATED_ON' INTEGER," + // 0: updatedOn
+                "'CREATED_ON' INTEGER," + // 1: createdOn
+                "'DERIVED_ENTITY_TYPE' TEXT NOT NULL ," + // 2: derivedEntityType
+                "'BASE_ID' INTEGER PRIMARY KEY );"); // 3: baseId
+    }
+
+    /** Drops the underlying database table. */
+    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BASE_OBJECT'";
+        db.execSQL(sql);
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected void bindValues(SQLiteStatement stmt, BaseObject entity) {
+        stmt.clearBindings();
+ 
+        java.util.Date updatedOn = entity.getUpdatedOn();
+        if (updatedOn != null) {
+            stmt.bindLong(1, updatedOn.getTime());
+        }
+ 
+        java.util.Date createdOn = entity.getCreatedOn();
+        if (createdOn != null) {
+            stmt.bindLong(2, createdOn.getTime());
+        }
+        stmt.bindString(3, entity.getDerivedEntityType());
+ 
+        Long baseId = entity.getBaseId();
+        if (baseId != null) {
+            stmt.bindLong(4, baseId);
+        }
+    }
+
+    @Override
+    protected void attachEntity(BaseObject entity) {
+        super.attachEntity(entity);
+        entity.__setDaoSession(daoSession);
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long readKey(Cursor cursor, int offset) {
+        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
+    }    
+
+    /** @inheritdoc */
+    @Override
+    public BaseObject readEntity(Cursor cursor, int offset) {
+        BaseObject entity = new BaseObject( //
+            cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)), // updatedOn
+            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // createdOn
+            cursor.getString(offset + 2), // derivedEntityType
+            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // baseId
+        );
+        return entity;
+    }
+     
+    /** @inheritdoc */
+    @Override
+    public void readEntity(Cursor cursor, BaseObject entity, int offset) {
+        entity.setUpdatedOn(cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)));
+        entity.setCreatedOn(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
+        entity.setDerivedEntityType(cursor.getString(offset + 2));
+        entity.setBaseId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
+     }
+    
+    /** @inheritdoc */
+    @Override
+    protected Long updateKeyAfterInsert(BaseObject entity, long rowId) {
+        entity.setBaseId(rowId);
+        return rowId;
+    }
+    
+    /** @inheritdoc */
+    @Override
+    public Long getKey(BaseObject entity) {
+        if(entity != null) {
+            return entity.getBaseId();
+        } else {
+            return null;
+        }
+    }
+
+    /** @inheritdoc */
+    @Override    
+    protected boolean isEntityUpdateable() {
+        return true;
+    }
+    
+
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java b/DaoExample/src-gen/de/greenrobot/daoexample/database/Customer.java
similarity index 95%
rename from DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
rename to DaoExample/src-gen/de/greenrobot/daoexample/database/Customer.java
index 337a4e66..33e96c8a 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/database/Customer.java
@@ -1,11 +1,11 @@
-package de.greenrobot.daoexample;
+package de.greenrobot.daoexample.database;
 
 import java.util.List;
 import de.greenrobot.dao.DaoEnum;
 import java.util.HashMap;
 import java.util.Map;
 
-import de.greenrobot.daoexample.DaoSession;
+import de.greenrobot.daoexample.database.DaoSession;
 import de.greenrobot.dao.DaoException;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
@@ -14,9 +14,9 @@
  */
 public class Customer {
 
-    private Long id;
     /** Not-null value. */
     private String name;
+    private transient Long id;
 
     /** Used to resolve relations */
     private transient DaoSession daoSession;
@@ -33,9 +33,9 @@ public Customer(Long id) {
         this.id = id;
     }
 
-    public Customer(Long id, String name) {
-        this.id = id;
+    public Customer(String name, Long id) {
         this.name = name;
+        this.id = id;
     }
 
     /** called by internal mechanisms, do not call yourself. */
@@ -44,24 +44,26 @@ public void __setDaoSession(DaoSession daoSession) {
         myDao = daoSession != null ? daoSession.getCustomerDao() : null;
     }
 
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
 
     /** Not-null value. */
     public String getName() {
         return name;
     }
-
     /** Not-null value; ensure this value is available before it is saved to the database. */
+
     public void setName(String name) {
         this.name = name;
     }
 
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
     public enum OrderType implements DaoEnum {
         WORK(1),
         PERSONAL(2),
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/database/CustomerDao.java
similarity index 78%
rename from DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
rename to DaoExample/src-gen/de/greenrobot/daoexample/database/CustomerDao.java
index 25a88fc3..152708db 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/database/CustomerDao.java
@@ -1,4 +1,4 @@
-package de.greenrobot.daoexample;
+package de.greenrobot.daoexample.database;
 
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
@@ -8,7 +8,7 @@
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 
-import de.greenrobot.daoexample.Customer;
+import de.greenrobot.daoexample.database.Customer;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -23,8 +23,8 @@
      * Can be used for QueryBuilder and for referencing column names.
     */
     public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
+        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
+        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
     };
 
     private DaoSession daoSession;
@@ -43,8 +43,8 @@ public CustomerDao(DaoConfig config, DaoSession daoSession) {
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "'CUSTOMER' (" + //
-                "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'NAME' TEXT NOT NULL );"); // 1: name
+                "'NAME' TEXT NOT NULL ," + // 0: name
+                "'_id' INTEGER PRIMARY KEY );"); // 1: id
     }
 
     /** Drops the underlying database table. */
@@ -57,12 +57,12 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
     @Override
     protected void bindValues(SQLiteStatement stmt, Customer entity) {
         stmt.clearBindings();
+        stmt.bindString(1, entity.getName());
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.bindLong(2, id);
         }
-        stmt.bindString(2, entity.getName());
     }
 
     @Override
@@ -74,15 +74,15 @@ protected void attachEntity(Customer entity) {
     /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
     }    
 
     /** @inheritdoc */
     @Override
     public Customer readEntity(Cursor cursor, int offset) {
         Customer entity = new Customer( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.getString(offset + 1) // name
+            cursor.getString(offset + 0), // name
+            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // id
         );
         return entity;
     }
@@ -90,8 +90,8 @@ public Customer readEntity(Cursor cursor, int offset) {
     /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, Customer entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setName(cursor.getString(offset + 1));
+        entity.setName(cursor.getString(offset + 0));
+        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
      }
     
     /** @inheritdoc */
@@ -117,4 +117,5 @@ protected boolean isEntityUpdateable() {
         return true;
     }
     
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java b/DaoExample/src-gen/de/greenrobot/daoexample/database/DaoMaster.java
similarity index 86%
rename from DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
rename to DaoExample/src-gen/de/greenrobot/daoexample/database/DaoMaster.java
index 3a75b017..4f6edde2 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/database/DaoMaster.java
@@ -1,4 +1,4 @@
-package de.greenrobot.daoexample;
+package de.greenrobot.daoexample.database;
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
@@ -8,10 +8,10 @@
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 
-import de.greenrobot.daoexample.NoteDao;
-import de.greenrobot.daoexample.NoteTypeDao;
-import de.greenrobot.daoexample.CustomerDao;
-import de.greenrobot.daoexample.OrderDao;
+import de.greenrobot.daoexample.database.BaseObjectDao;
+import de.greenrobot.daoexample.database.NoteDao;
+import de.greenrobot.daoexample.database.CustomerDao;
+import de.greenrobot.daoexample.database.OrderDao;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -22,16 +22,16 @@
 
     /** Creates underlying database table using DAOs. */
     public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
+        BaseObjectDao.createTable(db, ifNotExists);
         NoteDao.createTable(db, ifNotExists);
-        NoteTypeDao.createTable(db, ifNotExists);
         CustomerDao.createTable(db, ifNotExists);
         OrderDao.createTable(db, ifNotExists);
     }
     
     /** Drops underlying database table using DAOs. */
     public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
+        BaseObjectDao.dropTable(db, ifExists);
         NoteDao.dropTable(db, ifExists);
-        NoteTypeDao.dropTable(db, ifExists);
         CustomerDao.dropTable(db, ifExists);
         OrderDao.dropTable(db, ifExists);
     }
@@ -65,8 +65,8 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 
     public DaoMaster(SQLiteDatabase db) {
         super(db, SCHEMA_VERSION);
+        registerDaoClass(BaseObjectDao.class);
         registerDaoClass(NoteDao.class);
-        registerDaoClass(NoteTypeDao.class);
         registerDaoClass(CustomerDao.class);
         registerDaoClass(OrderDao.class);
     }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java b/DaoExample/src-gen/de/greenrobot/daoexample/database/DaoSession.java
similarity index 66%
rename from DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java
rename to DaoExample/src-gen/de/greenrobot/daoexample/database/DaoSession.java
index da2f6d1a..d701df4b 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/database/DaoSession.java
@@ -1,4 +1,4 @@
-package de.greenrobot.daoexample;
+package de.greenrobot.daoexample.database;
 
 import android.database.sqlite.SQLiteDatabase;
 
@@ -9,15 +9,16 @@
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 import de.greenrobot.dao.internal.DaoConfig;
 
-import de.greenrobot.daoexample.Note;
-import de.greenrobot.daoexample.NoteType;
-import de.greenrobot.daoexample.Customer;
-import de.greenrobot.daoexample.Order;
+import de.greenrobot.daoexample.database.BaseObject;
+import de.greenrobot.daoexample.database.Note;
+import de.greenrobot.daoexample.database.NoteType;
+import de.greenrobot.daoexample.database.Customer;
+import de.greenrobot.daoexample.database.Order;
 
-import de.greenrobot.daoexample.NoteDao;
-import de.greenrobot.daoexample.NoteTypeDao;
-import de.greenrobot.daoexample.CustomerDao;
-import de.greenrobot.daoexample.OrderDao;
+import de.greenrobot.daoexample.database.BaseObjectDao;
+import de.greenrobot.daoexample.database.NoteDao;
+import de.greenrobot.daoexample.database.CustomerDao;
+import de.greenrobot.daoexample.database.OrderDao;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 
@@ -28,13 +29,13 @@
  */
 public class DaoSession extends AbstractDaoSession {
 
+    private final DaoConfig baseObjectDaoConfig;
     private final DaoConfig noteDaoConfig;
-    private final DaoConfig noteTypeDaoConfig;
     private final DaoConfig customerDaoConfig;
     private final DaoConfig orderDaoConfig;
 
+    private final BaseObjectDao baseObjectDao;
     private final NoteDao noteDao;
-    private final NoteTypeDao noteTypeDao;
     private final CustomerDao customerDao;
     private final OrderDao orderDao;
 
@@ -42,42 +43,42 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
             daoConfigMap) {
         super(db);
 
+        baseObjectDaoConfig = daoConfigMap.get(BaseObjectDao.class).clone();
+        baseObjectDaoConfig.initIdentityScope(type);
+
         noteDaoConfig = daoConfigMap.get(NoteDao.class).clone();
         noteDaoConfig.initIdentityScope(type);
 
-        noteTypeDaoConfig = daoConfigMap.get(NoteTypeDao.class).clone();
-        noteTypeDaoConfig.initIdentityScope(type);
-
         customerDaoConfig = daoConfigMap.get(CustomerDao.class).clone();
         customerDaoConfig.initIdentityScope(type);
 
         orderDaoConfig = daoConfigMap.get(OrderDao.class).clone();
         orderDaoConfig.initIdentityScope(type);
 
+        baseObjectDao = new BaseObjectDao(baseObjectDaoConfig, this);
         noteDao = new NoteDao(noteDaoConfig, this);
-        noteTypeDao = new NoteTypeDao(noteTypeDaoConfig, this);
         customerDao = new CustomerDao(customerDaoConfig, this);
         orderDao = new OrderDao(orderDaoConfig, this);
 
+        registerDao(BaseObject.class, baseObjectDao);
         registerDao(Note.class, noteDao);
-        registerDao(NoteType.class, noteTypeDao);
         registerDao(Customer.class, customerDao);
         registerDao(Order.class, orderDao);
     }
     
     public void clear() {
+        baseObjectDaoConfig.getIdentityScope().clear();
         noteDaoConfig.getIdentityScope().clear();
-        noteTypeDaoConfig.getIdentityScope().clear();
         customerDaoConfig.getIdentityScope().clear();
         orderDaoConfig.getIdentityScope().clear();
     }
 
-    public NoteDao getNoteDao() {
-        return noteDao;
+    public BaseObjectDao getBaseObjectDao() {
+        return baseObjectDao;
     }
 
-    public NoteTypeDao getNoteTypeDao() {
-        return noteTypeDao;
+    public NoteDao getNoteDao() {
+        return noteDao;
     }
 
     public CustomerDao getCustomerDao() {
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/database/Note.java b/DaoExample/src-gen/de/greenrobot/daoexample/database/Note.java
new file mode 100644
index 00000000..e37338de
--- /dev/null
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/database/Note.java
@@ -0,0 +1,130 @@
+package de.greenrobot.daoexample.database;
+
+import de.greenrobot.daoexample.database.NoteType;
+import de.greenrobot.daoexample.database.DaoSession;
+import de.greenrobot.dao.DaoException;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+/**
+ * Entity mapped to table NOTE.
+ */
+public class Note extends BaseObject  {
+
+    /** Not-null value. */
+    private String text;
+    private String comment;
+    private transient Long id;
+    private NoteType type;
+    private transient Long baseObjectId;
+
+    /** Used to resolve relations */
+    private transient DaoSession daoSession;
+
+    /** Used for active entity operations. */
+    private transient NoteDao myDao;
+
+
+    public Note() {
+    }
+
+    public Note(Long id) {
+        this.id = id;
+        setDerivedEntityType(getClass().getSimpleName());
+    }
+
+    Note(String text, String comment, Long id, NoteType type, Long baseObjectId) {
+        this.text = text;
+        this.comment = comment;
+        this.id = id;
+        this.type = type;
+        this.baseObjectId = baseObjectId;
+    }
+
+    public Note(String text, String comment, Long id, NoteType type) {
+        this.text = text;
+        this.comment = comment;
+        this.id = id;
+        this.type = type;
+        setDerivedEntityType(getClass().getSimpleName());
+    }
+
+    /** called by internal mechanisms, do not call yourself. */
+    @Override
+    public void __setDaoSession(DaoSession daoSession) {
+        super.__setDaoSession(daoSession);
+        this.daoSession = daoSession;
+        myDao = daoSession != null ? daoSession.getNoteDao() : null;
+    }
+
+
+    /** Not-null value. */
+    public String getText() {
+        return text;
+    }
+    /** Not-null value; ensure this value is available before it is saved to the database. */
+
+    public void setText(String text) {
+        this.text = text;
+    }
+
+
+    public String getComment() {
+        return comment;
+    }
+
+    public void setComment(String comment) {
+        this.comment = comment;
+    }
+
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+
+    public NoteType getType() {
+        return type;
+    }
+
+    public void setType(NoteType type) {
+        this.type = type;
+    }
+
+
+    Long getBaseObjectId() {
+        return baseObjectId;
+    }
+
+    void setBaseObjectId(Long baseObjectId) {
+        this.baseObjectId = baseObjectId;
+    }
+
+    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    public void delete() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }    
+        myDao.delete(this);
+    }
+
+    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    public void update() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }    
+        myDao.update(this);
+    }
+
+    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    public void refresh() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }    
+        myDao.refresh(this);
+    }
+
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/database/NoteDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/database/NoteDao.java
new file mode 100644
index 00000000..7b922a28
--- /dev/null
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/database/NoteDao.java
@@ -0,0 +1,174 @@
+package de.greenrobot.daoexample.database;
+
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.Property;
+import de.greenrobot.dao.internal.DaoConfig;
+
+import de.greenrobot.daoexample.database.Note;
+import de.greenrobot.daoexample.database.NoteType;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/** 
+ * DAO for table NOTE.
+*/
+public class NoteDao extends AbstractDao<Note, Long> {
+
+    public static final String TABLENAME = "NOTE";
+
+    /**
+     * Properties of entity Note.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
+    public static class Properties {
+        public final static Property Text = new Property(0, String.class, "text", false, "TEXT");
+        public final static Property Comment = new Property(1, String.class, "comment", false, "COMMENT");
+        public final static Property Id = new Property(2, Long.class, "id", true, "_id");
+        public final static Property Type = new Property(3, NoteType.class, "type", false, "TYPE");
+        public final static Property BaseObjectId = new Property(4, Long.class, "baseObjectId", false, "BASE_OBJECT_ID");
+    };
+
+    private DaoSession daoSession;
+
+
+    public NoteDao(DaoConfig config) {
+        super(config);
+    }
+    
+    public NoteDao(DaoConfig config, DaoSession daoSession) {
+        super(config, daoSession);
+        this.daoSession = daoSession;
+    }
+
+    /** Creates the underlying database table. */
+    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+        String constraint = ifNotExists? "IF NOT EXISTS ": "";
+        db.execSQL("CREATE TABLE " + constraint + "'NOTE' (" + //
+                "'TEXT' TEXT NOT NULL ," + // 0: text
+                "'COMMENT' TEXT," + // 1: comment
+                "'_id' INTEGER PRIMARY KEY ," + // 2: id
+                "'TYPE' INTEGER," + // 3: type
+                "'BASE_OBJECT_ID' INTEGER REFERENCES 'BASE_OBJECT'('BASE_ID') );"); // 4: baseObjectId
+    }
+
+    /** Drops the underlying database table. */
+    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
+        db.execSQL(sql);
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected void bindValues(SQLiteStatement stmt, Note entity) {
+        stmt.clearBindings();
+        stmt.bindString(1, entity.getText());
+ 
+        String comment = entity.getComment();
+        if (comment != null) {
+            stmt.bindString(2, comment);
+        }
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(3, id);
+        }
+ 
+        NoteType type = entity.getType();
+        if (type != null) {
+            stmt.bindLong(4, type.getValue());
+        }
+ 
+        Long baseObjectId = entity.getBaseObjectId();
+        if (baseObjectId != null) {
+            stmt.bindLong(5, baseObjectId);
+        }
+    }
+
+    @Override
+    protected void attachEntity(Note entity) {
+        super.attachEntity(entity);
+        entity.__setDaoSession(daoSession);
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long readKey(Cursor cursor, int offset) {
+        return cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2);
+    }    
+
+    /** @inheritdoc */
+    @Override
+    public Note readEntity(Cursor cursor, int offset) {
+        Note entity = new Note( //
+            cursor.getString(offset + 0), // text
+            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // comment
+            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // id
+            cursor.isNull(offset + 3) ? null : NoteType.fromInt(cursor.getLong(offset + 3)), // type
+            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // baseObjectId
+        );
+        return entity;
+    }
+     
+    /** @inheritdoc */
+    @Override
+    public void readEntity(Cursor cursor, Note entity, int offset) {
+        entity.setText(cursor.getString(offset + 0));
+        entity.setComment(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
+        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
+        entity.setType(cursor.isNull(offset + 3) ? null : NoteType.fromInt(cursor.getLong(offset + 3)));
+        entity.setBaseObjectId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
+     }
+    
+    /** @inheritdoc */
+    @Override
+    protected Long updateKeyAfterInsert(Note entity, long rowId) {
+        entity.setId(rowId);
+        return rowId;
+    }
+    
+    /** @inheritdoc */
+    @Override
+    public Long getKey(Note entity) {
+        if(entity != null) {
+            return entity.getId();
+        } else {
+            return null;
+        }
+    }
+
+    /** @inheritdoc */
+    @Override    
+    protected boolean isEntityUpdateable() {
+        return true;
+    }
+    
+
+    @Override
+    protected void onInsertEntity(Note entity) {
+        entity.insertBase(daoSession.getBaseObjectDao());
+        entity.setBaseObjectId(entity.getBaseId());
+    }
+
+    @Override
+    protected void onLoadEntity(Note entity) {
+        entity.loadBase(daoSession.getBaseObjectDao(), entity.getBaseObjectId());
+    }
+
+    @Override
+    protected void onRefreshEntity(Note entity) {
+        entity.loadBase(daoSession.getBaseObjectDao(), entity.getBaseObjectId());
+    }
+
+    @Override
+    protected void onUpdateEntity(Note entity) {
+        entity.updateBase();
+    }
+
+    @Override
+    protected void onDeleteEntity(Note entity) {
+        entity.deleteBase();
+    }
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteType.java b/DaoExample/src-gen/de/greenrobot/daoexample/database/NoteType.java
similarity index 94%
rename from DaoExample/src-gen/de/greenrobot/daoexample/NoteType.java
rename to DaoExample/src-gen/de/greenrobot/daoexample/database/NoteType.java
index db540e55..115ab396 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/NoteType.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/database/NoteType.java
@@ -1,4 +1,4 @@
-package de.greenrobot.daoexample;
+package de.greenrobot.daoexample.database;
 
 import de.greenrobot.dao.DaoEnum;
 import java.util.HashMap;
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java b/DaoExample/src-gen/de/greenrobot/daoexample/database/Order.java
similarity index 91%
rename from DaoExample/src-gen/de/greenrobot/daoexample/Order.java
rename to DaoExample/src-gen/de/greenrobot/daoexample/database/Order.java
index b31da4bf..cca7ab7e 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/database/Order.java
@@ -1,7 +1,7 @@
-package de.greenrobot.daoexample;
+package de.greenrobot.daoexample.database;
 
-import de.greenrobot.daoexample.Customer.OrderType;
-import de.greenrobot.daoexample.DaoSession;
+import de.greenrobot.daoexample.database.Customer.OrderType;
+import de.greenrobot.daoexample.database.DaoSession;
 import de.greenrobot.dao.DaoException;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
@@ -10,10 +10,10 @@
  */
 public class Order {
 
-    private Long id;
-    private long customerId;
     private java.util.Date date;
+    private transient Long id;
     private OrderType type;
+    private transient long customerId;
 
     /** Used to resolve relations */
     private transient DaoSession daoSession;
@@ -32,11 +32,11 @@ public Order(Long id) {
         this.id = id;
     }
 
-    public Order(Long id, long customerId, java.util.Date date, OrderType type) {
-        this.id = id;
-        this.customerId = customerId;
+    public Order(java.util.Date date, Long id, OrderType type, long customerId) {
         this.date = date;
+        this.id = id;
         this.type = type;
+        this.customerId = customerId;
     }
 
     /** called by internal mechanisms, do not call yourself. */
@@ -45,30 +45,25 @@ public void __setDaoSession(DaoSession daoSession) {
         myDao = daoSession != null ? daoSession.getOrderDao() : null;
     }
 
-    public Long getId() {
-        return id;
-    }
 
-    public void setId(Long id) {
-        this.id = id;
+    public java.util.Date getDate() {
+        return date;
     }
 
-    public long getCustomerId() {
-        return customerId;
+    public void setDate(java.util.Date date) {
+        this.date = date;
     }
 
-    public void setCustomerId(long customerId) {
-        this.customerId = customerId;
-    }
 
-    public java.util.Date getDate() {
-        return date;
+    public Long getId() {
+        return id;
     }
 
-    public void setDate(java.util.Date date) {
-        this.date = date;
+    public void setId(Long id) {
+        this.id = id;
     }
 
+
     public OrderType getType() {
         return type;
     }
@@ -77,6 +72,15 @@ public void setType(OrderType type) {
         this.type = type;
     }
 
+
+    public long getCustomerId() {
+        return customerId;
+    }
+
+    public void setCustomerId(long customerId) {
+        this.customerId = customerId;
+    }
+
     /** To-one relationship, resolved on first access. */
     public Customer getCustomer() {
         long __key = this.customerId;
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/database/OrderDao.java
similarity index 80%
rename from DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
rename to DaoExample/src-gen/de/greenrobot/daoexample/database/OrderDao.java
index f71d36bf..376e1873 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/database/OrderDao.java
@@ -1,4 +1,4 @@
-package de.greenrobot.daoexample;
+package de.greenrobot.daoexample.database;
 
 import java.util.List;
 import java.util.ArrayList;
@@ -13,8 +13,8 @@
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
 
-import de.greenrobot.daoexample.Order;
-import de.greenrobot.daoexample.Customer.OrderType;
+import de.greenrobot.daoexample.database.Order;
+import de.greenrobot.daoexample.database.Customer.OrderType;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -29,10 +29,10 @@
      * Can be used for QueryBuilder and for referencing column names.
     */
     public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property CustomerId = new Property(1, long.class, "customerId", false, "CUSTOMER_ID");
-        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
-        public final static Property Type = new Property(3, OrderType.class, "type", false, "TYPE");
+        public final static Property Date = new Property(0, java.util.Date.class, "date", false, "DATE");
+        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
+        public final static Property Type = new Property(2, OrderType.class, "type", false, "TYPE");
+        public final static Property CustomerId = new Property(3, long.class, "customerId", false, "CUSTOMER_ID");
     };
 
     private DaoSession daoSession;
@@ -52,10 +52,10 @@ public OrderDao(DaoConfig config, DaoSession daoSession) {
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "'ORDERS' (" + //
-                "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'CUSTOMER_ID' INTEGER NOT NULL ," + // 1: customerId
-                "'DATE' INTEGER," + // 2: date
-                "'TYPE' INTEGER);"); // 3: type
+                "'DATE' INTEGER," + // 0: date
+                "'_id' INTEGER PRIMARY KEY ," + // 1: id
+                "'TYPE' INTEGER," + // 2: type
+                "'CUSTOMER_ID' INTEGER NOT NULL );"); // 3: customerId
     }
 
     /** Drops the underlying database table. */
@@ -69,21 +69,21 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
     protected void bindValues(SQLiteStatement stmt, Order entity) {
         stmt.clearBindings();
  
-        Long id = entity.getId();
-        if (id != null) {
-            stmt.bindLong(1, id);
-        }
-        stmt.bindLong(2, entity.getCustomerId());
- 
         java.util.Date date = entity.getDate();
         if (date != null) {
-            stmt.bindLong(3, date.getTime());
+            stmt.bindLong(1, date.getTime());
+        }
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(2, id);
         }
  
         OrderType type = entity.getType();
         if (type != null) {
-            stmt.bindLong(4, type.getValue());
+            stmt.bindLong(3, type.getValue());
         }
+        stmt.bindLong(4, entity.getCustomerId());
     }
 
     @Override
@@ -95,17 +95,17 @@ protected void attachEntity(Order entity) {
     /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
     }    
 
     /** @inheritdoc */
     @Override
     public Order readEntity(Cursor cursor, int offset) {
         Order entity = new Order( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.getLong(offset + 1), // customerId
-            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // date
-            cursor.isNull(offset + 3) ? null : OrderType.fromInt(cursor.getLong(offset + 3)) // type
+            cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)), // date
+            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
+            cursor.isNull(offset + 2) ? null : OrderType.fromInt(cursor.getLong(offset + 2)), // type
+            cursor.getLong(offset + 3) // customerId
         );
         return entity;
     }
@@ -113,10 +113,10 @@ public Order readEntity(Cursor cursor, int offset) {
     /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, Order entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setCustomerId(cursor.getLong(offset + 1));
-        entity.setDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
-        entity.setType(cursor.isNull(offset + 3) ? null : OrderType.fromInt(cursor.getLong(offset + 3)));
+        entity.setDate(cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)));
+        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
+        entity.setType(cursor.isNull(offset + 2) ? null : OrderType.fromInt(cursor.getLong(offset + 2)));
+        entity.setCustomerId(cursor.getLong(offset + 3));
      }
     
     /** @inheritdoc */
@@ -250,4 +250,5 @@ public Order loadDeep(Long key) {
         return loadDeepAllAndCloseCursor(cursor);
     }
  
+
 }
diff --git a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
index 15361f5b..f60401e4 100644
--- a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
+++ b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
@@ -15,9 +15,6 @@
  */
 package de.greenrobot.daoexample;
 
-import java.text.DateFormat;
-import java.util.Date;
-
 import android.app.ListActivity;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
@@ -33,7 +30,11 @@
 import android.widget.SimpleCursorAdapter;
 import android.widget.TextView;
 import android.widget.TextView.OnEditorActionListener;
-import de.greenrobot.daoexample.DaoMaster.DevOpenHelper;
+import de.greenrobot.daoexample.database.*;
+import de.greenrobot.daoexample.database.DaoMaster.DevOpenHelper;
+
+import java.text.DateFormat;
+import java.util.Date;
 
 public class NoteActivity extends ListActivity {
 
@@ -116,7 +117,7 @@ private void addNote() {
 
         final DateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);
         String comment = "Added on " + df.format(new Date());
-        Note note = new Note(null, noteText, comment, new Date(), Note.NoteType.CHURCH);
+        Note note = new Note(comment, new Date(), noteText, null, NoteType.FRISBEE);
         noteDao.insert(note);
         Log.d("DaoExample", "Inserted new note, ID: " + note.getId());
 
diff --git a/DaoExampleGenerator/settings.gradle b/DaoExampleGenerator/settings.gradle
index 4cd77a8b..6e4ef561 100644
--- a/DaoExampleGenerator/settings.gradle
+++ b/DaoExampleGenerator/settings.gradle
@@ -1 +1,2 @@
+include 'DaoGenerator'
 rootProject.name = 'greendao-example-generator'
\ No newline at end of file
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index b23ea726..06452eb5 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -28,8 +28,12 @@
  */
 public class ExampleDaoGenerator {
 
+    private static Entity base;
+
     public static void main(String[] args) throws Exception {
-        Schema schema = new Schema(3, "de.greenrobot.daoexample");
+        Schema schema = new Schema(3, "de.greenrobot.daoexample.database");
+
+        createBaseEntity(schema);
 
         addNote(schema);
         addCustomerOrder(schema);
@@ -37,12 +41,19 @@ public static void main(String[] args) throws Exception {
         new DaoGenerator().generateAll(schema, "/Users/saulhoward/Developer/greenDAO/DaoExample/src-gen");
     }
 
+    private static void createBaseEntity(Schema schema) {
+        base = schema.addEntity("BaseObject");
+        base.addLongProperty("baseId").primaryKey().markTransient();
+        base.addDateProperty("createdOn");
+        base.addDateProperty("updatedOn");
+    }
+
     private static void addNote(Schema schema) {
         Entity note = schema.addEntity("Note");
-        note.addIdProperty();
+        note.setBaseEntity(base);
+        note.addIdProperty().markTransient();
         note.addStringProperty("text").notNull();
         note.addStringProperty("comment");
-        note.addDateProperty("date");
 
         addNoteType(schema, note);
     }
@@ -68,7 +79,7 @@ private static EntityEnum addOrderType(Entity entity) {
 
     private static void addCustomerOrder(Schema schema) {
         Entity customer = schema.addEntity("Customer");
-        customer.addIdProperty();
+        customer.addIdProperty().markTransient();
         customer.addStringProperty("name").notNull();
 
         EntityEnum entityEnum = addOrderType(customer);
@@ -76,9 +87,9 @@ private static void addCustomerOrder(Schema schema) {
         Entity order = schema.addEntity("Order");
         order.setTableName("ORDERS"); // "ORDER" is a reserved keyword
         order.addEnumProperty(entityEnum, "type");
-        order.addIdProperty();
+        order.addIdProperty().markTransient();
         Property orderDate = order.addDateProperty("date").getProperty();
-        Property customerId = order.addLongProperty("customerId").notNull().getProperty();
+        Property customerId = order.addLongProperty("customerId").notNull().markTransient().getProperty();
         order.addToOne(customer, customerId);
 
         ToMany customerToOrders = customer.addToMany(order, customerId);
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index b027e0aa..b08e8bbc 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -308,4 +308,32 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#if entity.toOneRelations?has_content>
     <#include "dao-deep.ftl">
 </#if>
+
+<#if entity.baseEntity?? && entity.referenceProperty??>
+    @Override
+    protected void onInsertEntity(${entity.className} entity) {
+        entity.insertBase(daoSession.get${entity.baseEntity.classNameDao?cap_first}());
+        entity.set${entity.referenceProperty.propertyName?cap_first}(entity.get${entity.baseEntity.pkProperty.propertyName?cap_first}());
+    }
+
+    @Override
+    protected void onLoadEntity(${entity.className} entity) {
+        entity.loadBase(daoSession.get${entity.baseEntity.classNameDao?cap_first}(), entity.get${entity.referenceProperty.propertyName?cap_first}());
+    }
+
+    @Override
+    protected void onRefreshEntity(${entity.className} entity) {
+        entity.loadBase(daoSession.get${entity.baseEntity.classNameDao?cap_first}(), entity.get${entity.referenceProperty.propertyName?cap_first}());
+    }
+
+    @Override
+    protected void onUpdateEntity(${entity.className} entity) {
+        entity.updateBase();
+    }
+
+    @Override
+    protected void onDeleteEntity(${entity.className} entity) {
+        entity.deleteBase();
+    }
+</#if>
 }
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 6310eca6..b346502f 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -67,7 +67,7 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value. */
 </#if>
-    private ${property.javaType} ${property.propertyName};
+    private <#if property.transientProperty>transient </#if>${property.javaType} ${property.propertyName};
 </#list>
 
 <#if entity.active>
@@ -102,14 +102,18 @@ ${keepFields!}    // KEEP FIELDS END
 <#if entity.propertiesPk?has_content && entity.propertiesPk?size != entity.properties?size>
 
     public ${entity.className}(<#list entity.propertiesPk as
-property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
+property><#if property_index != 0>, </#if>${property.javaType} ${property.propertyName}</#list>) {
 <#list entity.propertiesPk as property>
         this.${property.propertyName} = ${property.propertyName};
 </#list>
+    <#if entity.baseEntity??>
+        setDerivedEntityType(getClass().getSimpleName());
+    </#if>
     }
 </#if>
+<#if entity.hasReferenceProperty>
 
-    public ${entity.className}(<#list entity.properties as
+    ${entity.className}(<#list entity.properties as
 property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
 <#list entity.properties as property>
         this.${property.propertyName} = ${property.propertyName};
@@ -117,26 +121,69 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     }
 </#if>
 
+    public ${entity.className}(<#list entity.properties as
+        property><#if !property.reference><#if property_index != 0>, </#if>${property.javaType} ${property.propertyName}</#if></#list>) {
+    <#list entity.properties as property>
+        <#if !property.reference>
+        this.${property.propertyName} = ${property.propertyName};
+        </#if>
+    </#list>
+    <#if entity.baseEntity??>
+        setDerivedEntityType(getClass().getSimpleName());
+    </#if>
+    }
+</#if>
+
 <#if entity.active>
     /** called by internal mechanisms, do not call yourself. */
+<#if entity.baseEntity??>
+    @Override
+</#if>
     public void __setDaoSession(DaoSession daoSession) {
+        <#if entity.baseEntity??>
+        super.__setDaoSession(daoSession);
+        </#if>
         this.daoSession = daoSession;
         myDao = daoSession != null ? daoSession.get${entity.classNameDao?cap_first}() : null;
     }
 
 </#if>
+<#if entity.aBaseEntity>
+    void loadBase(${entity.classNameDao} dao, <#list entity.propertiesPk as
+        property><#if property_index != 0>, </#if>${property.javaType} ${property.propertyName}</#list>) {
+        myDao = dao;
+    <#list entity.propertiesPk as property>
+        this.${property.propertyName} = ${property.propertyName};
+    </#list>
+        myDao.refresh(this);
+    }
+
+    void insertBase(${entity.classNameDao} dao) {
+        myDao = dao;
+        dao.insert(this);
+    }
+
+    void updateBase() {
+        myDao.update(this);
+    }
+
+    void deleteBase() {
+        myDao.delete(this);
+    }
+</#if>
 <#list entity.properties as property>
+
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value. */
 </#if>
-    public ${property.javaType} get${property.propertyName?cap_first}() {
+    <#if !property.reference>public </#if>${property.javaType} get${property.propertyName?cap_first}() {
         return ${property.propertyName};
     }
-
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value; ensure this value is available before it is saved to the database. */
 </#if>
-    public void set${property.propertyName?cap_first}(${property.javaType} ${property.propertyName}) {
+
+    <#if !property.reference>public </#if>void set${property.propertyName?cap_first}(${property.javaType} ${property.propertyName}) {
         this.${property.propertyName} = ${property.propertyName};
     }
 
diff --git a/DaoGenerator/src-template/enumentity.ftl b/DaoGenerator/src-template/enumentity.ftl
index cef729da..f87586c5 100644
--- a/DaoGenerator/src-template/enumentity.ftl
+++ b/DaoGenerator/src-template/enumentity.ftl
@@ -23,6 +23,8 @@ import de.greenrobot.dao.DaoEnum;
 import java.util.HashMap;
 import java.util.Map;
 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+
 public enum ${entity.entityEnum.enumName} implements DaoEnum {
     <#list entity.entityEnum.values as value>
     ${value.name}(${value.tag})<#if value_has_next>,<#else>;</#if>
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoUtil.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoUtil.java
index 88a65867..64fe6019 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoUtil.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoUtil.java
@@ -82,6 +82,10 @@ public static int copyAllBytes(InputStream in, OutputStream out) throws IOExcept
         return byteCount;
     }
     
-
+    public static String firstToLowerCase(String s) {
+        char[] charArray = s.toCharArray();
+        charArray[0] = Character.toLowerCase(charArray[0]);
+        return new String(charArray);
+    }
 
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index 7d81eb16..ee86fea1 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -60,7 +60,8 @@
     private Property pkProperty;
     private String pkType;
     private String superclass;
-
+    private Entity baseEntity;
+    private boolean aBaseEntity = false;
     private boolean protobuf;
     private boolean constructors;
     private boolean skipGeneration;
@@ -69,6 +70,8 @@
     private Boolean active;
     private Boolean hasKeepSections;
 
+    private Property referenceProperty;
+
     protected boolean anEnum = false;
 
     Entity(Schema schema, String className) {
@@ -131,24 +134,26 @@ public PropertyBuilder addDateProperty(String propertyName) {
     }
 
     public PropertyBuilder addEnumProperty(EntityEnum entityEnum, String propertyName) {
-        return addProperty(entityEnum, propertyName);
+        return addProperty(null, entityEnum, propertyName);
     }
 
     public PropertyBuilder addProperty(PropertyType propertyType, String propertyName) {
+        return addProperty(propertyType, null, propertyName);
+    }
 
-        if (propertiesMap.containsKey(propertyName)) return new Property.PropertyBuilder(propertiesMap.get(propertyName));
+    private PropertyBuilder addProperty(PropertyType propertyType, EntityEnum entityEnum, String propertyName) {
 
-        PropertyBuilder builder = new Property.PropertyBuilder(schema, this, propertyType, propertyName);
-        propertiesMap.put(propertyName, builder.getProperty());
-        return builder;
-    }
+        if (propertiesMap.containsKey(propertyName.toUpperCase())) return new Property.PropertyBuilder(propertiesMap.get(propertyName.toUpperCase()));
 
-    public PropertyBuilder addProperty(EntityEnum entityEnum, String propertyName) {
+        PropertyBuilder builder;
 
-        if (propertiesMap.containsKey(propertyName)) return new Property.PropertyBuilder(propertiesMap.get(propertyName));
+        if (entityEnum != null) {
+            builder = new Property.PropertyBuilder(schema, this, entityEnum, propertyName);
+        } else {
+            builder = new Property.PropertyBuilder(schema, this, propertyType, propertyName);
+        }
 
-        PropertyBuilder builder = new Property.PropertyBuilder(schema, this, entityEnum, propertyName);
-        propertiesMap.put(propertyName, builder.getProperty());
+        propertiesMap.put(propertyName.toUpperCase(), builder.getProperty());
         return builder;
     }
 
@@ -165,8 +170,6 @@ public EntityEnum addEnum(String enumName, List<EntityEnum.Value> values) {
         return entityEnum;
     }
 
-
-
     /** Adds a to-many relationship; the target entity is joined to the PK property of this entity (typically the ID). */
     public ToMany addToMany(Entity target, Property targetProperty) {
         Property[] targetProperties = {targetProperty};
@@ -281,6 +284,9 @@ public Schema getSchema() {
     }
 
     public String getTableName() {
+        if (tableName == null) {
+            tableName = DaoUtil.dbName(className);
+        }
         return tableName;
     }
 
@@ -425,6 +431,10 @@ public Boolean getHasKeepSections() {
         return hasKeepSections;
     }
 
+    public Boolean getHasReferenceProperty() { return referenceProperty != null; }
+
+    public Property getReferenceProperty() { return referenceProperty; }
+
     public Collection<String> getAdditionalImportsEntity() {
         return additionalImportsEntity;
     }
@@ -463,6 +473,31 @@ public void setSuperclass(String classToExtend) {
         this.superclass = classToExtend;
     }
 
+    public Entity getBaseEntity() {
+        return baseEntity;
+    }
+
+    public void setBaseEntity(Entity baseEntity) {
+        if (!baseEntity.isaBaseEntity()) {
+            baseEntity.setaBaseEntity();
+        }
+        this.baseEntity = baseEntity;
+        this.superclass = baseEntity.getClassName();
+        referenceProperty = addLongProperty(DaoUtil.firstToLowerCase(superclass) + "Id").reference(baseEntity).markTransient().getProperty();
+    }
+
+    public boolean isaBaseEntity() {
+        return aBaseEntity;
+    }
+
+    public void setaBaseEntity() {
+        // initialize derived type property
+        if (!aBaseEntity) {
+            aBaseEntity = true;
+            addStringProperty("derivedEntityType").notNull().markTransient();
+        }
+    }
+
     void init2ndPass() {
         init2nPassNamesWithDefaults();
 
@@ -510,7 +545,7 @@ void init2ndPass() {
         if (active == null) {
             active = schema.isUseActiveEntitiesByDefault();
         }
-        active |= !toOneRelations.isEmpty() || !toManyRelations.isEmpty();
+        active |= !toOneRelations.isEmpty() || !toManyRelations.isEmpty() || baseEntity != null || aBaseEntity;
 
         if (hasKeepSections == null) {
             hasKeepSections = schema.isHasKeepSectionsByDefault();
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/EnumEntity.java b/DaoGenerator/src/de/greenrobot/daogenerator/EnumEntity.java
index da72c066..fdd58218 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/EnumEntity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/EnumEntity.java
@@ -50,11 +50,6 @@ void init2ndPass() {
         throw new UnsupportedOperationException("Adding properties is not supported for enums!");
     }
 
-    @Override
-    public Property.PropertyBuilder addProperty(EntityEnum entityEnum, String propertyName) {
-        throw new UnsupportedOperationException("Adding properties is not supported for enums!");
-    }
-
     @Override
     public Property.PropertyBuilder addIdProperty() {
         throw new UnsupportedOperationException("Adding properties is not supported for enums!");
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index 65110348..4675cc1f 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -81,6 +81,26 @@ public PropertyBuilder notNull() {
             return this;
         }
 
+        public PropertyBuilder reference(Entity entity) {
+            property.referenceTable = entity.getTableName();
+            if (entity.getPkProperty() != null) {
+                property.referenceColumn = entity.getPkProperty().getColumnName();
+            } else {
+                for (Property prop : entity.getProperties()) {
+                    if (prop.isPrimaryKey()) {
+                        property.referenceColumn = prop.getColumnName();
+                        break;
+                    }
+                }
+            }
+            return this;
+        }
+
+        public PropertyBuilder markTransient() {
+            property.transientProperty = true;
+            return this;
+        }
+
         public PropertyBuilder index() {
             Index index = new Index();
             index.addProperty(property);
@@ -122,6 +142,8 @@ public Property getProperty() {
 
     private String columnName;
     private String columnType;
+    private String referenceTable;
+    private String referenceColumn;
 
     private boolean primaryKey;
     private boolean pkAsc;
@@ -133,6 +155,8 @@ public Property getProperty() {
     private boolean unique;
     private boolean notNull;
 
+    private boolean transientProperty = false;
+
     /** Initialized in 2nd pass */
     private String constraints;
 
@@ -161,6 +185,9 @@ public void setPropertyType(PropertyType propertyType) {
     }
 
     public String getColumnName() {
+        if (columnName == null) {
+            columnName = DaoUtil.dbName(propertyName);
+        }
         return columnName;
     }
 
@@ -190,6 +217,10 @@ public boolean isNotNull() {
         return notNull;
     }
 
+    public boolean isReference() { return referenceTable != null && referenceColumn != null; }
+
+    public boolean isTransientProperty() { return transientProperty; }
+
     public String getJavaType() {
         return javaType;
     }
@@ -243,6 +274,14 @@ private void initConstraint() {
         if (unique) {
             constraintBuilder.append(" UNIQUE");
         }
+        if (referenceTable != null && referenceColumn != null) {
+            constraintBuilder.append(" REFERENCES '");
+            constraintBuilder.append(referenceTable);
+            constraintBuilder.append("'('");
+            constraintBuilder.append(referenceColumn);
+            constraintBuilder.append("')");
+        }
+
         String newContraints = constraintBuilder.toString().trim();
         if (constraintBuilder.length() > 0) {
             constraints = newContraints;
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/ToMany.java b/DaoGenerator/src/de/greenrobot/daogenerator/ToMany.java
index 67ca76aa..3394c592 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/ToMany.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/ToMany.java
@@ -98,9 +98,7 @@ public String getOrder() {
 
     void init2ndPass() {
         if (name == null) {
-            char[] nameCharArray = targetEntity.getClassName().toCharArray();
-            nameCharArray[0] = Character.toLowerCase(nameCharArray[0]);
-            name = new String(nameCharArray) + "List";
+            name = DaoUtil.firstToLowerCase(targetEntity.getClassName()) + "List";
         }
         if (sourceProperties == null) {
             List<Property> pks = sourceEntity.getPropertiesPk();
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/ToOne.java b/DaoGenerator/src/de/greenrobot/daogenerator/ToOne.java
index 82cb34f6..693013e8 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/ToOne.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/ToOne.java
@@ -76,9 +76,7 @@ public boolean isUseFkProperty() {
 
     void init2ndPass() {
         if (name == null) {
-            char[] nameCharArray = targetEntity.getClassName().toCharArray();
-            nameCharArray[0] = Character.toLowerCase(nameCharArray[0]);
-            name = new String(nameCharArray);
+            name = DaoUtil.firstToLowerCase(targetEntity.getClassName());
         }
 
     }
diff --git a/GreenSync/build.gradle b/GreenSync/build.gradle
new file mode 100644
index 00000000..6a353d8f
--- /dev/null
+++ b/GreenSync/build.gradle
@@ -0,0 +1,36 @@
+apply plugin: 'java'
+apply plugin: 'maven'
+
+group = 'de.greenrobot'
+sourceCompatibility = 1.6
+version = '1.3.0'
+
+repositories {
+    mavenCentral()
+}
+
+configurations {
+    provided
+}
+
+dependencies {
+    compile project(':DaoCore')
+    compile('com.google.code.gson:gson:2.2.4')
+}
+
+artifacts {
+    archives jar
+}
+
+sourceSets {
+    main {
+        java {
+            srcDir 'src'
+        }
+    }
+    test {
+        java {
+            srcDir 'src-test'
+        }
+    }
+}
\ No newline at end of file
diff --git a/GreenSync/gradle/wrapper/gradle-wrapper.jar b/GreenSync/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 00000000..d5c591c9
Binary files /dev/null and b/GreenSync/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/GreenSync/gradle/wrapper/gradle-wrapper.properties b/GreenSync/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 00000000..77861e64
--- /dev/null
+++ b/GreenSync/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Fri Mar 21 14:54:56 MDT 2014
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=http\://services.gradle.org/distributions/gradle-1.9-bin.zip
diff --git a/GreenSync/settings.gradle b/GreenSync/settings.gradle
new file mode 100644
index 00000000..fbd11505
--- /dev/null
+++ b/GreenSync/settings.gradle
@@ -0,0 +1,2 @@
+include 'DaoCore'
+rootProject.name = 'greensync'
\ No newline at end of file
diff --git a/GreenSync/src/de/greenrobot/sync/EnumAdapter.java b/GreenSync/src/de/greenrobot/sync/EnumAdapter.java
new file mode 100644
index 00000000..bdb066d7
--- /dev/null
+++ b/GreenSync/src/de/greenrobot/sync/EnumAdapter.java
@@ -0,0 +1,59 @@
+package de.greenrobot.sync;
+
+import de.greenrobot.dao.DaoEnum;
+
+import java.util.Arrays;
+import java.util.Comparator;
+
+/**
+ * Converts values of an enum to and from integers.
+ */
+final class EnumAdapter<E extends DaoEnum> {
+
+    private static final Comparator<DaoEnum> COMPARATOR = new Comparator<DaoEnum>() {
+        @Override
+        public int compare(DaoEnum o1, DaoEnum o2) {
+            return (int) (o1.getValue() - o2.getValue());
+        }
+    };
+
+    private final Class<E> type;
+
+    private final int[] values;
+    private final E[] constants;
+    private final boolean isDense;
+
+    EnumAdapter(Class<E> type) {
+        this.type = type;
+
+        constants = type.getEnumConstants();
+        Arrays.sort(constants, COMPARATOR);
+
+        int length = constants.length;
+        if (constants[0].getValue() == 1 && constants[length - 1].getValue() == length) {
+            // Values completely fill the range from 1..length
+            isDense = true;
+            values = null;
+        } else {
+            isDense = false;
+            values = new int[length];
+            for (int i = 0; i < length; i++) {
+                values[i] = (int) constants[i].getValue();
+            }
+        }
+    }
+
+    public int toInt(E e) {
+        return (int) e.getValue();
+    }
+
+    public E fromInt(int value) {
+        int index = isDense ? value - 1 : Arrays.binarySearch(values, value);
+        try {
+            return constants[index];
+        } catch (IndexOutOfBoundsException e) {
+            throw new IllegalArgumentException(
+                    "Unknown enum tag " + value + " for " + type.getCanonicalName());
+        }
+    }
+}
\ No newline at end of file
diff --git a/GreenSync/src/de/greenrobot/sync/GreenSync.java b/GreenSync/src/de/greenrobot/sync/GreenSync.java
new file mode 100644
index 00000000..945e8938
--- /dev/null
+++ b/GreenSync/src/de/greenrobot/sync/GreenSync.java
@@ -0,0 +1,50 @@
+package de.greenrobot.sync;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import de.greenrobot.dao.DaoEnum;
+
+import java.lang.reflect.Modifier;
+import java.util.*;
+
+/**
+ * Created by saulhoward on 3/21/14.
+ */
+public class GreenSync {
+
+    private Gson gson;
+
+    private final Map<Class<? extends DaoEnum>, EnumAdapter<? extends DaoEnum>> enumAdapters =
+            new LinkedHashMap<Class<? extends DaoEnum>, EnumAdapter<? extends DaoEnum>>();
+
+    public GreenSync() {
+        final GsonBuilder builder = new GsonBuilder();
+        builder.excludeFieldsWithModifiers(Modifier.TRANSIENT);
+        gson = builder.create();
+    }
+
+    /**
+     * Returns an enum adapter for {@code enumClass}.
+     */
+    @SuppressWarnings("unchecked")
+    synchronized <E extends DaoEnum> EnumAdapter<E> enumAdapter(Class<E> enumClass) {
+        EnumAdapter<E> adapter = (EnumAdapter<E>) enumAdapters.get(enumClass);
+        if (adapter == null) {
+            adapter = new EnumAdapter<E>(enumClass);
+            enumAdapters.put(enumClass, adapter);
+        }
+        return adapter;
+    }
+
+    public <T> boolean sync(T object) {
+        return false;
+    }
+
+    public <T> String sync(Class<T> clazz, List<T> objects) {
+
+        Map<String, List<T>> map = new HashMap<String, List<T>>();
+        map.put(clazz.getSimpleName(), objects);
+
+        return gson.toJson(map);
+    }
+}
diff --git a/settings.gradle b/settings.gradle
index dc0c4aa2..39da9b7e 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,2 +1,2 @@
-include 'DaoCore', 'DaoGenerator', 'DaoExampleGenerator', 'DaoExample'
+include 'DaoCore', 'DaoGenerator', 'DaoExampleGenerator', 'DaoExample', 'GreenSync'
 // include 'DaoTest' // Travis needs some Android setup for this
\ No newline at end of file
