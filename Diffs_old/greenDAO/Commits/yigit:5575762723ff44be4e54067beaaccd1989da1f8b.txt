diff --git a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
index ba21300b..cc9405d7 100644
--- a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
+++ b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
@@ -55,7 +55,8 @@ public TestDaoGenerator() {
         createActive();
         createExtendsImplements();
         createStringKeyValue();
-
+        createAutoincrement();
+        
         createSchema2();
     }
 
@@ -250,4 +251,9 @@ protected void createStringKeyValue() {
         entity.addStringProperty("value");
     }
 
+    protected void createAutoincrement() {
+        Entity entity = schema.addEntity("AutoincrementEntity");
+        entity.addIdProperty().autoincrement();
+    }
+
 }
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index f7053e55..d3d8508e 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -65,6 +65,10 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
 
     public static final String TABLENAME = "${entity.tableName}";
 
+    /**
+     * Properties of entity ${entity.className}.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
 <#list entity.propertiesColumns as property>
         public final static Property ${property.propertyName?cap_first} = new Property(${property_index}, ${property.javaType}.class, "${property.propertyName}", ${property.primaryKey?string}, "${property.columnName}");
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index 36813b59..8aea5307 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -54,6 +54,15 @@ public PropertyBuilder primaryKeyDesc() {
             return this;
         }
 
+        public PropertyBuilder autoincrement() {
+            if (!property.primaryKey || property.propertyType != PropertyType.Long) {
+                throw new RuntimeException(
+                        "AUTOINCREMENT is only available to primary key properties of type long/Long");
+            }
+            property.autoincrement = true;
+            return this;
+        }
+
         public PropertyBuilder unique() {
             property.unique = true;
             return this;
@@ -105,9 +114,11 @@ public Property getProperty() {
 
     private String columnName;
     private String columnType;
+
     private boolean primaryKey;
     private boolean pkAsc;
     private boolean pkDesc;
+    private boolean autoincrement;
 
     private boolean unique;
     private boolean notNull;
@@ -150,6 +161,10 @@ public boolean isPrimaryKey() {
         return primaryKey;
     }
 
+    public boolean isAutoincrement() {
+        return autoincrement;
+    }
+
     public String getConstraints() {
         return constraints;
     }
@@ -173,7 +188,7 @@ public int getOrdinal() {
     public void setOrdinal(int ordinal) {
         this.ordinal = ordinal;
     }
-    
+
     public Entity getEntity() {
         return entity;
     }
@@ -203,6 +218,9 @@ private void initConstraint() {
             if (pkDesc) {
                 constraintBuilder.append(" DESC");
             }
+            if (autoincrement) {
+                constraintBuilder.append(" AUTOINCREMENT");
+            }
         }
         if (notNull) {
             constraintBuilder.append(" NOT NULL");
@@ -219,10 +237,10 @@ private void initConstraint() {
     void init3ndPass() {
         // Nothing to do so far
     }
-    
+
     @Override
     public String toString() {
-        return "Property "+propertyName+" of "+entity.getClassName();
+        return "Property " + propertyName + " of " + entity.getClassName();
     }
 
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
index 392aa868..1cd9b718 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
@@ -18,6 +18,10 @@
 
     public static final String TABLENAME = "ABCDEF_ENTITY";
 
+    /**
+     * Properties of entity AbcdefEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property A = new Property(1, Integer.class, "a", false, "A");
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
index c61e7294..1bc63a31 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
@@ -18,6 +18,10 @@
 
     public static final String TABLENAME = "AN_ACTIVE_ENTITY";
 
+    /**
+     * Properties of entity AnActiveEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntity.java b/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntity.java
new file mode 100644
index 00000000..2366a448
--- /dev/null
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntity.java
@@ -0,0 +1,26 @@
+package de.greenrobot.daotest;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+/**
+ * Entity mapped to table AUTOINCREMENT_ENTITY.
+ */
+public class AutoincrementEntity {
+
+    private Long id;
+
+    public AutoincrementEntity() {
+    }
+
+    public AutoincrementEntity(Long id) {
+        this.id = id;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+}
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
new file mode 100644
index 00000000..b8f79a67
--- /dev/null
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
@@ -0,0 +1,105 @@
+package de.greenrobot.daotest;
+
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.DaoConfig;
+import de.greenrobot.dao.Property;
+
+import de.greenrobot.daotest.AutoincrementEntity;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/** 
+ * DAO for table AUTOINCREMENT_ENTITY.
+*/
+public class AutoincrementEntityDao extends AbstractDao<AutoincrementEntity, Long> {
+
+    public static final String TABLENAME = "AUTOINCREMENT_ENTITY";
+
+    /**
+     * Properties of entity AutoincrementEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
+    public static class Properties {
+        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
+    };
+
+
+    public AutoincrementEntityDao(DaoConfig config) {
+        super(config);
+    }
+    
+    public AutoincrementEntityDao(DaoConfig config, DaoSession daoSession) {
+        super(config, daoSession);
+    }
+
+    /** Creates the underlying database table. */
+    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'AUTOINCREMENT_ENTITY' (" + //
+                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT );"; // 0: id
+        db.execSQL(sql);
+    }
+
+    /** Drops the underlying database table. */
+    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AUTOINCREMENT_ENTITY'";
+        db.execSQL(sql);
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected void bindValues(SQLiteStatement stmt, AutoincrementEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long readKey(Cursor cursor, int offset) {
+        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    }    
+
+    /** @inheritdoc */
+    @Override
+    public AutoincrementEntity readEntity(Cursor cursor, int offset) {
+        AutoincrementEntity entity = new AutoincrementEntity( //
+            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) // id
+        );
+        return entity;
+    }
+     
+    /** @inheritdoc */
+    @Override
+    public void readEntity(Cursor cursor, AutoincrementEntity entity, int offset) {
+        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
+     }
+    
+    @Override
+    protected Long updateKeyAfterInsert(AutoincrementEntity entity, long rowId) {
+        entity.setId(rowId);
+        return rowId;
+    }
+    
+    /** @inheritdoc */
+    @Override
+    public Long getKey(AutoincrementEntity entity) {
+        if(entity != null) {
+            return entity.getId();
+        } else {
+            return null;
+        }
+    }
+
+    /** @inheritdoc */
+    @Override    
+    protected boolean isEntityUpdateable() {
+        return true;
+    }
+    
+}
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
index 3eb6b4ed..74d2cb4c 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
@@ -21,6 +21,7 @@
 import de.greenrobot.daotest.AnActiveEntityDao;
 import de.greenrobot.daotest.ExtendsImplementsEntityDao;
 import de.greenrobot.daotest.StringKeyValueEntityDao;
+import de.greenrobot.daotest.AutoincrementEntityDao;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -44,6 +45,7 @@ public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
         AnActiveEntityDao.createTable(db, ifNotExists);
         ExtendsImplementsEntityDao.createTable(db, ifNotExists);
         StringKeyValueEntityDao.createTable(db, ifNotExists);
+        AutoincrementEntityDao.createTable(db, ifNotExists);
     }
     
     /** Drops underlying database table using DAOs. */
@@ -61,6 +63,7 @@ public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
         AnActiveEntityDao.dropTable(db, ifExists);
         ExtendsImplementsEntityDao.dropTable(db, ifExists);
         StringKeyValueEntityDao.dropTable(db, ifExists);
+        AutoincrementEntityDao.dropTable(db, ifExists);
     }
     
     public static abstract class OpenHelper extends SQLiteOpenHelper {
@@ -105,6 +108,7 @@ public DaoMaster(SQLiteDatabase db) {
         registerDaoClass(AnActiveEntityDao.class);
         registerDaoClass(ExtendsImplementsEntityDao.class);
         registerDaoClass(StringKeyValueEntityDao.class);
+        registerDaoClass(AutoincrementEntityDao.class);
     }
     
     public DaoSession newSession() {
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
index 32a67194..cb5cbcbd 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
@@ -22,6 +22,7 @@
 import de.greenrobot.daotest.AnActiveEntity;
 import de.greenrobot.daotest.ExtendsImplementsEntity;
 import de.greenrobot.daotest.StringKeyValueEntity;
+import de.greenrobot.daotest.AutoincrementEntity;
 
 import de.greenrobot.daotest.SimpleEntityDao;
 import de.greenrobot.daotest.SimpleEntityNotNullDao;
@@ -36,6 +37,7 @@
 import de.greenrobot.daotest.AnActiveEntityDao;
 import de.greenrobot.daotest.ExtendsImplementsEntityDao;
 import de.greenrobot.daotest.StringKeyValueEntityDao;
+import de.greenrobot.daotest.AutoincrementEntityDao;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 
@@ -59,6 +61,7 @@
     private final DaoConfig anActiveEntityDaoConfig;
     private final DaoConfig extendsImplementsEntityDaoConfig;
     private final DaoConfig stringKeyValueEntityDaoConfig;
+    private final DaoConfig autoincrementEntityDaoConfig;
 
     private final SimpleEntityDao simpleEntityDao;
     private final SimpleEntityNotNullDao simpleEntityNotNullDao;
@@ -73,6 +76,7 @@
     private final AnActiveEntityDao anActiveEntityDao;
     private final ExtendsImplementsEntityDao extendsImplementsEntityDao;
     private final StringKeyValueEntityDao stringKeyValueEntityDao;
+    private final AutoincrementEntityDao autoincrementEntityDao;
 
     public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
@@ -117,6 +121,9 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         stringKeyValueEntityDaoConfig = daoConfigMap.get(StringKeyValueEntityDao.class).clone();
         stringKeyValueEntityDaoConfig.initIdentityScope(type);
 
+        autoincrementEntityDaoConfig = daoConfigMap.get(AutoincrementEntityDao.class).clone();
+        autoincrementEntityDaoConfig.initIdentityScope(type);
+
         simpleEntityDao = new SimpleEntityDao(simpleEntityDaoConfig, this);
         simpleEntityNotNullDao = new SimpleEntityNotNullDao(simpleEntityNotNullDaoConfig, this);
         testEntityDao = new TestEntityDao(testEntityDaoConfig, this);
@@ -130,6 +137,7 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         anActiveEntityDao = new AnActiveEntityDao(anActiveEntityDaoConfig, this);
         extendsImplementsEntityDao = new ExtendsImplementsEntityDao(extendsImplementsEntityDaoConfig, this);
         stringKeyValueEntityDao = new StringKeyValueEntityDao(stringKeyValueEntityDaoConfig, this);
+        autoincrementEntityDao = new AutoincrementEntityDao(autoincrementEntityDaoConfig, this);
 
         registerDao(SimpleEntity.class, simpleEntityDao);
         registerDao(SimpleEntityNotNull.class, simpleEntityNotNullDao);
@@ -144,6 +152,7 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         registerDao(AnActiveEntity.class, anActiveEntityDao);
         registerDao(ExtendsImplementsEntity.class, extendsImplementsEntityDao);
         registerDao(StringKeyValueEntity.class, stringKeyValueEntityDao);
+        registerDao(AutoincrementEntity.class, autoincrementEntityDao);
     }
     
     public void clear() {
@@ -160,6 +169,7 @@ public void clear() {
         anActiveEntityDaoConfig.getIdentityScope().clear();
         extendsImplementsEntityDaoConfig.getIdentityScope().clear();
         stringKeyValueEntityDaoConfig.getIdentityScope().clear();
+        autoincrementEntityDaoConfig.getIdentityScope().clear();
     }
 
     public SimpleEntityDao getSimpleEntityDao() {
@@ -214,4 +224,8 @@ public StringKeyValueEntityDao getStringKeyValueEntityDao() {
         return stringKeyValueEntityDao;
     }
 
+    public AutoincrementEntityDao getAutoincrementEntityDao() {
+        return autoincrementEntityDao;
+    }
+
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
index e6c0b4c0..9d2b32d9 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
@@ -18,6 +18,10 @@
 
     public static final String TABLENAME = "DATE_ENTITY";
 
+    /**
+     * Properties of entity DateEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
index 9776c7a5..0a0dbbb0 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
@@ -18,6 +18,10 @@
 
     public static final String TABLENAME = "EXTENDS_IMPLEMENTS_ENTITY";
 
+    /**
+     * Properties of entity ExtendsImplementsEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
index 681d762a..34eb3962 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
@@ -21,6 +21,10 @@
 
     public static final String TABLENAME = "RELATION_ENTITY";
 
+    /**
+     * Properties of entity RelationEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property ParentId = new Property(1, Long.class, "parentId", false, "PARENT_ID");
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
index 59cdf9ac..949636f5 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
@@ -18,6 +18,10 @@
 
     public static final String TABLENAME = "SIMPLE_ENTITY";
 
+    /**
+     * Properties of entity SimpleEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property SimpleBoolean = new Property(1, Boolean.class, "simpleBoolean", false, "SIMPLE_BOOLEAN");
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
index afe3b45b..0b9ae712 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
@@ -18,6 +18,10 @@
 
     public static final String TABLENAME = "SIMPLE_ENTITY_NOT_NULL";
 
+    /**
+     * Properties of entity SimpleEntityNotNull.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property Id = new Property(0, long.class, "id", true, "_id");
         public final static Property SimpleBoolean = new Property(1, boolean.class, "simpleBoolean", false, "SIMPLE_BOOLEAN");
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
index d8dfb323..7ea19c85 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
@@ -18,6 +18,10 @@
 
     public static final String TABLENAME = "SPECIAL_NAMES_ENTITY";
 
+    /**
+     * Properties of entity SpecialNamesEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property Count = new Property(1, String.class, "count", false, "COUNT");
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
index c9977873..7f31e811 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
@@ -18,6 +18,10 @@
 
     public static final String TABLENAME = "STRING_KEY_VALUE_ENTITY";
 
+    /**
+     * Properties of entity StringKeyValueEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property Key = new Property(0, String.class, "key", true, "KEY");
         public final static Property Value = new Property(1, String.class, "value", false, "VALUE");
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
index a2e0c7bf..202a6bf7 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
@@ -18,6 +18,10 @@
 
     public static final String TABLENAME = "TEST_ENTITY";
 
+    /**
+     * Properties of entity TestEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property SimpleInt = new Property(1, int.class, "simpleInt", false, "SIMPLE_INT");
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
index f04ae19d..2fede0f7 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
@@ -18,6 +18,10 @@
 
     public static final String TABLENAME = "TO_MANY_ENTITY";
 
+    /**
+     * Properties of entity ToManyEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property SourceJoinProperty = new Property(1, String.class, "sourceJoinProperty", false, "SOURCE_JOIN_PROPERTY");
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
index c5dbaded..5482782b 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
@@ -21,6 +21,10 @@
 
     public static final String TABLENAME = "TO_MANY_TARGET_ENTITY";
 
+    /**
+     * Properties of entity ToManyTargetEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property ToManyId = new Property(0, Long.class, "toManyId", false, "TO_MANY_ID");
         public final static Property ToManyIdDesc = new Property(1, Long.class, "toManyIdDesc", false, "TO_MANY_ID_DESC");
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
index 818a56dd..8f51d6d5 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
@@ -23,6 +23,10 @@
 
     public static final String TABLENAME = "TREE_ENTITY";
 
+    /**
+     * Properties of entity TreeEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property ParentId = new Property(1, Long.class, "parentId", false, "PARENT_ID");
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
index 4157528c..3d4dc62b 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
@@ -18,6 +18,10 @@
 
     public static final String TABLENAME = "KEEP_ENTITY";
 
+    /**
+     * Properties of entity KeepEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
     };
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
index 09bb1900..7a354b7b 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
@@ -21,6 +21,10 @@
 
     public static final String TABLENAME = "TO_MANY_TARGET2";
 
+    /**
+     * Properties of entity ToManyTarget2.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property FkId = new Property(1, Long.class, "fkId", false, "FK_ID");
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
index 2c5afa69..f2e239f8 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
@@ -25,6 +25,10 @@
 
     public static final String TABLENAME = "RELATION_SOURCE2";
 
+    /**
+     * Properties of entity RelationSource2.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property ToOneId = new Property(1, Long.class, "toOneId", false, "TO_ONE_ID");
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
index 851e4bb3..e8fe01d7 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
@@ -20,6 +20,10 @@
 
     public static final String TABLENAME = "TO_ONE_TARGET2";
 
+    /**
+     * Properties of entity ToOneTarget2.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
     };
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/AutoincrementEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/AutoincrementEntityTest.java
new file mode 100644
index 00000000..3c4f8a95
--- /dev/null
+++ b/DaoTest/src/de/greenrobot/daotest/entity/AutoincrementEntityTest.java
@@ -0,0 +1,40 @@
+package de.greenrobot.daotest.entity;
+
+import android.app.Application;
+import de.greenrobot.dao.test.AbstractDaoSessionTest;
+import de.greenrobot.daotest.AutoincrementEntity;
+import de.greenrobot.daotest.DaoMaster;
+import de.greenrobot.daotest.DaoSession;
+import de.greenrobot.daotest.SimpleEntity;
+
+public class AutoincrementEntityTest extends AbstractDaoSessionTest<Application, DaoMaster, DaoSession> {
+
+    public AutoincrementEntityTest() {
+        super(DaoMaster.class);
+    }
+
+    public void testAutoincrement() {
+        AutoincrementEntity entity = new AutoincrementEntity();
+        daoSession.insert(entity);
+        Long id1 = entity.getId();
+        assertNotNull(id1);
+        daoSession.delete(entity);
+
+        AutoincrementEntity entity2 = new AutoincrementEntity();
+        daoSession.insert(entity2);
+        assertEquals(id1 + 1, (long) entity2.getId());
+    }
+
+    public void testNoAutoincrement() {
+        SimpleEntity entity = new SimpleEntity();
+        daoSession.insert(entity);
+        Long id1 = entity.getId();
+        assertNotNull(id1);
+        daoSession.delete(entity);
+
+        SimpleEntity entity2 = new SimpleEntity();
+        daoSession.insert(entity2);
+        assertEquals(id1, entity2.getId());
+    }
+
+}
diff --git a/README.md b/README.md
index 472beb12..2772b117 100644
--- a/README.md
+++ b/README.md
@@ -12,6 +12,7 @@ Release History
 * Added getDatabase in DaoMaster, DaoSession, and Dao
 * Added insertOrReplaceInTx in Dao
 * Added deleteInTx in Dao
+* Added autoincrement() creating AUTOINCREMENT PKs
 * Made DAOs and DaoSessions in active entities transient (allows serialization of entities)
 * Minor fixes
 
