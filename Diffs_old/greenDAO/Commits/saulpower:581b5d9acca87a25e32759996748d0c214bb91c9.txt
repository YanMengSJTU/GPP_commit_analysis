diff --git a/DaoCore/src/de/greenrobot/dao/sync/GreenSync.java b/DaoCore/src/de/greenrobot/dao/sync/GreenSync.java
index 22c57d82..447c37c1 100644
--- a/DaoCore/src/de/greenrobot/dao/sync/GreenSync.java
+++ b/DaoCore/src/de/greenrobot/dao/sync/GreenSync.java
@@ -1,8 +1,8 @@
 package de.greenrobot.dao.sync;
 
+import android.net.Uri;
 import android.util.Log;
 import com.google.gson.FieldNamingPolicy;
-import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.reflect.TypeToken;
 import de.greenrobot.dao.AbstractDao;
@@ -18,6 +18,8 @@
  */
 public class GreenSync {
 
+    private static final String TAG = GreenSync.class.getSimpleName();
+
     private static Map<String, Type> sListTypeTokensMap = new HashMap<String, Type>();
     private static Map<String, Class<?>> sClassMap = new HashMap<String, Class<?>>();
 
@@ -25,7 +27,7 @@
     public static final String UPDATED = "Updated";
     public static final String DELETED = "Deleted";
 
-    private Gson mGson;
+    private JsonParser mJsonParser;
     private GreenSyncDaoBase mGreenSyncDaoBase;
     private AbstractDaoSession mSession;
     private SyncService mSyncService;
@@ -45,17 +47,21 @@ public static Type getTypeToken(String key) {
         return sListTypeTokensMap.get(key);
     }
 
-    public Gson getGson() {
-        return mGson;
+    public JsonParser getJsonParser() {
+        return mJsonParser;
     }
 
     public GreenSync(AbstractDaoSession session, SyncService syncService) {
+        this(session, syncService, null);
+    }
+
+    public GreenSync(AbstractDaoSession session, SyncService syncService, JsonParser jsonParser) {
 
-        final GsonBuilder builder = new GsonBuilder();
-        builder.excludeFieldsWithModifiers(Modifier.TRANSIENT);
-        builder.registerTypeAdapterFactory(new EntityTypeAdapterFactory(this));
-        builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE);
-        mGson = builder.create();
+        if (jsonParser == null) {
+            jsonParser = new GsonParser(this);
+        }
+
+        mJsonParser = jsonParser;
         mSession = session;
         mSyncService = syncService;
 
@@ -91,50 +97,57 @@ private void syncAction(Map<String, List<GreenSyncBase>> objects, String action)
 
         for (Map.Entry<String, List<GreenSyncBase>> object : objects.entrySet()) {
 
-            String className = object.getKey();
-            List<GreenSyncBase> items = object.getValue();
-
-            for (final GreenSyncBase item : items) {
-                String json = mGson.toJson(item);
-
-                SyncService.Callback callback = new SyncService.Callback() {
-                    @Override
-                    public void onSuccess(String response) {
-                        item.clean();
-                        item.setExternalId(response);
-                        mGreenSyncDaoBase.update(item);
-                    }
-
-                    @Override
-                    public void onFail(String errorMessage) {
-                        Log.e("GreenSync", "Failed Sync: " + errorMessage);
+            try {
+                SyncUri uri = new SyncUri.Builder()
+                        .pluralizePathNames()
+                        .appendClass(Class.forName(object.getKey()))
+                        .build();
+                List<GreenSyncBase> items = object.getValue();
+
+                for (final GreenSyncBase item : items) {
+                    String json = mJsonParser.toJson(item);
+
+                    SyncService.Callback callback = new SyncService.Callback() {
+                        @Override
+                        public void onSuccess(String response) {
+                            item.clean();
+                            item.setExternalId(response);
+                            mGreenSyncDaoBase.update(item);
+                        }
+
+                        @Override
+                        public void onFail(String errorMessage) {
+                            Log.e("GreenSync", "Failed Sync: " + errorMessage);
+                        }
+                    };
+
+                    if (action.equals(CREATED)) {
+                        mSyncService.create(uri, json, callback);
+                    } else if (action.equals(UPDATED)) {
+                        mSyncService.update(uri, json, callback);
+                    } else if (action.equals(DELETED)) {
+                        mSyncService.delete(uri, callback);
                     }
-                };
-
-                if (action.equals(CREATED)) {
-                    mSyncService.create(className, json, callback);
-                } else if (action.equals(UPDATED)) {
-                    mSyncService.update(className, json, callback);
-                } else if (action.equals(DELETED)) {
-                    mSyncService.delete(className, json, callback);
                 }
+            } catch (ClassNotFoundException ex) {
+                Log.e(TAG, "Could not find class to perform sync", ex);
             }
         }
     }
 
-    public <T> void load(final Class clazz, final String id, final SyncService.ObjectListener<T> listener) {
-        mSyncService.read(clazz.getSimpleName(), id, new SyncService.Callback() {
+    public <T> void load(final SyncUri uri, final SyncService.ObjectListener<T> listener) {
+        mSyncService.read(uri, new SyncService.Callback() {
             @Override
             public void onSuccess(String response) {
                 List list;
 
-                Type type = clazz;
+                Type type = uri.getUriClass();
 
-                if (id == null) {
-                    type = sListTypeTokensMap.get(clazz.getSimpleName());
+                if (uri.isList()) {
+                    type = sListTypeTokensMap.get(uri.getUriClass().getSimpleName());
                 }
 
-                Object object = mGson.fromJson(response, type);
+                Object object = mJsonParser.fromJson(response, type);
                 if (!(object instanceof List)) {
                     list = new ArrayList<T>();
                     list.add(object);
@@ -151,6 +164,14 @@ public void onFail(String errorMessage) {
         });
     }
 
+    public <T> void load(Class clazz, String id, SyncService.ObjectListener<T> listener) {
+        final SyncUri uri = new SyncUri.Builder()
+                .pluralizePathNames()
+                .appendObject(clazz, id)
+                .build();
+        load(uri, listener);
+    }
+
     public <T> void loadAll(Class clazz, final SyncService.ObjectListener<T> listener) {
         load(clazz, null, listener);
     }
@@ -163,13 +184,13 @@ public String syncBatch() {
         syncObjects.put(UPDATED, mGreenSyncDaoBase.getUpdatedObjects());
         syncObjects.put(DELETED, mGreenSyncDaoBase.getDeletedObjects());
 
-        return mGson.toJson(syncObjects);
+        return mJsonParser.toJson(syncObjects);
     }
 
     public void processResponse(String json) {
 
         Type listType = new TypeToken<Map<String, List>>() {}.getType();
-        Map<String, Map> map =  mGson.fromJson(json, listType);
+        Map<String, Map> map =  mJsonParser.fromJson(json, listType);
 
         for (Map.Entry<String, Map> action : map.entrySet()) {
             if (action.getKey().equals(CREATED)) {
diff --git a/DaoCore/src/de/greenrobot/dao/sync/GsonParser.java b/DaoCore/src/de/greenrobot/dao/sync/GsonParser.java
new file mode 100644
index 00000000..fa715f9d
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/sync/GsonParser.java
@@ -0,0 +1,35 @@
+package de.greenrobot.dao.sync;
+
+import com.google.gson.FieldNamingPolicy;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+
+import java.lang.reflect.Modifier;
+import java.lang.reflect.Type;
+
+/**
+ * Created by saulhoward on 7/11/14.
+ */
+public class GsonParser implements JsonParser {
+
+    private Gson mGson;
+
+    public GsonParser(GreenSync greenSync) {
+
+        final GsonBuilder builder = new GsonBuilder();
+        builder.excludeFieldsWithModifiers(Modifier.TRANSIENT);
+        builder.registerTypeAdapterFactory(new EntityTypeAdapterFactory(greenSync));
+        builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE);
+        mGson = builder.create();
+    }
+
+    @Override
+    public String toJson(Object src) {
+        return mGson.toJson(src);
+    }
+
+    @Override
+    public <T> T fromJson(String json, Type typeOfT) {
+        return mGson.fromJson(json, typeOfT);
+    }
+}
diff --git a/DaoCore/src/de/greenrobot/dao/sync/JsonParser.java b/DaoCore/src/de/greenrobot/dao/sync/JsonParser.java
new file mode 100644
index 00000000..9863587c
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/sync/JsonParser.java
@@ -0,0 +1,11 @@
+package de.greenrobot.dao.sync;
+
+import java.lang.reflect.Type;
+
+/**
+ * Created by saulhoward on 7/11/14.
+ */
+public interface JsonParser {
+    String toJson(Object src);
+    <T> T fromJson(String json, Type typeOfT);
+}
diff --git a/DaoCore/src/de/greenrobot/dao/sync/SyncService.java b/DaoCore/src/de/greenrobot/dao/sync/SyncService.java
index 7c948de7..245ba091 100644
--- a/DaoCore/src/de/greenrobot/dao/sync/SyncService.java
+++ b/DaoCore/src/de/greenrobot/dao/sync/SyncService.java
@@ -1,15 +1,17 @@
 package de.greenrobot.dao.sync;
 
+import android.net.Uri;
+
 import java.util.List;
 
 /**
  * Created by saulhoward on 3/31/14.
  */
 public interface SyncService {
-    void create(String className, String payload, final Callback callback);
-    void read(String className, String id, final Callback callback);
-    void update(String className, String payload, final Callback callback);
-    void delete(String className, String id, final Callback callback);
+    void create(SyncUri uri, String payload, final Callback callback);
+    void read(SyncUri uri, final Callback callback);
+    void update(SyncUri uri, String payload, final Callback callback);
+    void delete(SyncUri uri, final Callback callback);
 
     public interface Callback {
         void onSuccess(String response);
diff --git a/DaoCore/src/de/greenrobot/dao/sync/SyncUri.java b/DaoCore/src/de/greenrobot/dao/sync/SyncUri.java
new file mode 100644
index 00000000..c4306edc
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/sync/SyncUri.java
@@ -0,0 +1,179 @@
+package de.greenrobot.dao.sync;
+
+import java.util.LinkedList;
+
+/**
+ * Created by saulhoward on 7/11/14.
+ */
+public class SyncUri {
+
+    private final LinkedList<PathPart> path;
+    private final Part pagination;
+    private final LinkedList<Part> include;
+
+    private volatile String uriString;
+    private Class clazz;
+
+    public SyncUri(LinkedList<PathPart> path, Part pagination, LinkedList<Part> include) {
+        this.path = path;
+        this.pagination = pagination;
+        this.include = include;
+
+        for (PathPart part : path) {
+            if (part.isClass()) {
+                clazz = part.clazz;
+            }
+        }
+    }
+
+    public boolean isList() {
+        return path.getLast().isClass();
+    }
+
+    public Class getUriClass() {
+        return clazz;
+    }
+
+    private String makeUriString() {
+        StringBuilder builder = new StringBuilder();
+
+        for (Part part : path) {
+            builder.append(part.value);
+            if (!path.getLast().equals(part)) {
+                builder.append("/");
+            }
+        }
+
+        if (pagination != null || include.size() > 0) {
+            builder.append("?");
+
+            if (pagination != null) {
+                builder.append(pagination.value);
+                if (include.size() > 0) {
+                    builder.append("&");
+                }
+            }
+
+            for (Part part : include) {
+                builder.append(part.value);
+                if (!include.getLast().equals(part)) {
+                    builder.append(",");
+                }
+            }
+        }
+
+        return builder.toString();
+    }
+
+    @Override
+    public String toString() {
+        boolean cached = (uriString != null);
+        return cached ? uriString
+                : (uriString = makeUriString());
+    }
+
+    public static final class Builder {
+
+        private LinkedList<PathPart> path = new LinkedList<PathPart>();
+        private Part pagination;
+        private LinkedList<Part> include = new LinkedList<Part>();
+
+        private boolean pluralize = false;
+
+        <T extends Part>  Builder part(LinkedList<T> partList, T part) {
+            if (part != null) {
+                partList.addLast(part);
+            }
+            return this;
+        }
+
+        public Builder pluralizePathNames() {
+            pluralize = true;
+            return this;
+        }
+
+        public Builder appendClass(Class clazz) {
+            return part(path, PathPart.fromClass(clazz));
+        }
+
+        public Builder appendId(String id) {
+            return part(path, PathPart.fromId(id));
+        }
+
+        public Builder appendObject(Class clazz, String id) {
+            return part(path, PathPart.fromClass(clazz)).part(path, PathPart.fromId(id));
+        }
+
+        public Builder appendInclude(String include) {
+
+            if (this.include.size() == 0) {
+                include = "include=" + include;
+            }
+
+            return part(this.include, Part.from(include));
+        }
+
+        public Builder appendPagination(int pageNumber, int itemsPerPage) {
+            pagination = Part.from("pageNumber=" + pageNumber + "&itemsPerPage=" + itemsPerPage);
+            return this;
+        }
+
+        public SyncUri build() {
+            return new SyncUri(path, pagination, include);
+        }
+    }
+
+    static class Part {
+        String value;
+
+        Part(String value) {
+            this.value = value;
+        }
+
+        static Part from(String value) {
+            return new Part(value);
+        }
+    }
+
+    static class PathPart extends Part {
+
+        Class clazz;
+
+        public PathPart(String value, Class clazz) {
+            super(value);
+
+            this.clazz = clazz;
+        }
+
+        boolean isClass() {
+            return clazz != null;
+        }
+
+        static PathPart fromClass(Class clazz) {
+            return from(pluralize(clazz.getSimpleName()), clazz);
+        }
+
+        static PathPart fromId(String id) {
+            return from(id, null);
+        }
+
+        static PathPart from(String value, Class clazz) {
+
+            if (value == null) {
+                return null;
+            }
+
+            return new PathPart(value, clazz);
+        }
+
+        static String pluralize(String name) {
+            char last = name.charAt(name.length() - 1);
+
+            if (last == 'y') {
+                return name.substring(0, name.length() - 1) + "ies";
+            }
+
+            return name + "s";
+        }
+    }
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/sync/SyncUriTest.java b/DaoTest/src/de/greenrobot/daotest/sync/SyncUriTest.java
new file mode 100644
index 00000000..a09b0206
--- /dev/null
+++ b/DaoTest/src/de/greenrobot/daotest/sync/SyncUriTest.java
@@ -0,0 +1,39 @@
+package de.greenrobot.daotest.sync;
+
+import de.greenrobot.dao.sync.SyncUri;
+import de.greenrobot.dao.test.DbTest;
+
+/**
+ * Created by saulhoward on 7/11/14.
+ */
+public class SyncUriTest extends DbTest {
+
+    public void testSyncUri() {
+        SyncUri uri = new SyncUri.Builder()
+                .pluralizePathNames()
+                .appendClass(JournalEntry.class)
+                .appendId("12345")
+                .build();
+        assertEquals("JournalEntries/12345", uri.toString());
+
+        uri = new SyncUri.Builder()
+                .pluralizePathNames()
+                .appendObject(JournalEntry.class, "12345")
+                .appendPagination(2, 10)
+                .build();
+        assertEquals("JournalEntries/12345?pageNumber=2&itemsPerPage=10", uri.toString());
+
+        uri = new SyncUri.Builder()
+                .pluralizePathNames()
+                .appendObject(JournalEntry.class, "12345")
+                .appendPagination(2, 10)
+                .appendInclude("image")
+                .appendInclude("tag")
+                .build();
+        assertEquals("JournalEntries/12345?pageNumber=2&itemsPerPage=10&include=image,tag", uri.toString());
+    }
+
+    public static class JournalEntry {
+
+    }
+}
diff --git a/build.gradle b/build.gradle
old mode 100644
new mode 100755
index e69de29b..b62fff62
--- a/build.gradle
+++ b/build.gradle
@@ -0,0 +1,3 @@
+task wrapper(type: Wrapper) {
+    gradleVersion = '1.12'
+}
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100755
index 00000000..3c7abdf1
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100755
index 00000000..aacac335
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Sat May 24 08:38:11 CEST 2014
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=http\://services.gradle.org/distributions/gradle-1.12-all.zip
diff --git a/gradlew b/gradlew
new file mode 100755
index 00000000..91a7e269
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100755
index 00000000..8a0b282a
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/settings.gradle b/settings.gradle
index dc0c4aa2..a1b3f84e 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,2 +1,2 @@
 include 'DaoCore', 'DaoGenerator', 'DaoExampleGenerator', 'DaoExample'
-// include 'DaoTest' // Travis needs some Android setup for this
\ No newline at end of file
+include 'DaoTest' // Travis needs some Android setup for this
\ No newline at end of file
