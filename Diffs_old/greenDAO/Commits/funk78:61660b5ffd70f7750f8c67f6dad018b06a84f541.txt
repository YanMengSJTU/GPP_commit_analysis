diff --git a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
index f23fc0d9..bf05dca8 100644
--- a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
+++ b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
@@ -30,216 +30,215 @@
  */
 public class TestDaoGenerator {
 
-    public static void main(String[] args) throws Exception {
-        TestDaoGenerator testDaoGenerator = new TestDaoGenerator();
-        testDaoGenerator.generate();
-    }
-
-    private Schema schema;
-    private Entity testEntity;
-    private Schema schema2;
-
-    public TestDaoGenerator() {
-        schema = new Schema(1, "de.greenrobot.daotest");
-        schema.setDefaultJavaPackageTest("de.greenrobot.daotest.entity");
-
-        createSimple();
-        createSimpleNotNull();
-        testEntity = createTest();
-        createRelation();
-        createDate();
-        createSpecialNames();
-        createAbcdef();
-        createToMany();
-        createTreeEntity();
-        createActive();
-        createExtendsImplements();
-
-        createSchema2();
-    }
-
-    public void generate() throws Exception {
-        DaoGenerator daoGenerator = new DaoGenerator();
-        daoGenerator.generateAllWithDataStoreIntegration(schema, "../DaoTest/src-gen", "../DaoTest/src");
-        daoGenerator.generateAllWithDataStoreIntegration(schema2, "../DaoTest/src-gen", "../DaoTest/src");
-    }
-
-    protected void createSimple() {
-        Entity simple = schema.addEntity("SimpleEntity");
-        simple.addIdProperty();
-        simple.addBooleanProperty("simpleBoolean");
-        simple.addByteProperty("simpleByte");
-        simple.addShortProperty("simpleShort");
-        simple.addIntProperty("simpleInt");
-        simple.addLongProperty("simpleLong");
-        simple.addFloatProperty("simpleFloat");
-        simple.addDoubleProperty("simpleDouble");
-        simple.addStringProperty("simpleString");
-        simple.addByteArrayProperty("simpleByteArray");
-    }
-
-    protected void createSimpleNotNull() {
-        Entity notNull = schema.addEntity("SimpleEntityNotNull");
-        notNull.addIdProperty().notNull();
-        notNull.addBooleanProperty("simpleBoolean").notNull();
-        notNull.addByteProperty("simpleByte").notNull();
-        notNull.addShortProperty("simpleShort").notNull();
-        notNull.addIntProperty("simpleInt").notNull();
-        notNull.addLongProperty("simpleLong").notNull();
-        notNull.addFloatProperty("simpleFloat").notNull();
-        notNull.addDoubleProperty("simpleDouble").notNull();
-        notNull.addStringProperty("simpleString").notNull();
-        notNull.addByteArrayProperty("simpleByteArray").notNull();
-    }
-
-    protected Entity createTest() {
-        Entity testEntity = schema.addEntity("TestEntity");
-        testEntity.addIdProperty();
-        testEntity.addIntProperty("simpleInt").notNull();
-        testEntity.addIntProperty("simpleInteger");
-        testEntity.addStringProperty("simpleStringNotNull").notNull();
-        testEntity.addStringProperty("simpleString");
-        testEntity.addStringProperty("indexedString").index();
-        testEntity.addStringProperty("indexedStringAscUnique").indexAsc(null, true);
-        testEntity.addDateProperty("simpleDate");
-        testEntity.addBooleanProperty("simpleBoolean");
-        return testEntity;
-    }
-
-    protected void createRelation() {
-        Entity relationEntity = schema.addEntity("RelationEntity");
-        relationEntity.addIdProperty();
-        Property parentIdProperty = relationEntity.addLongProperty("parentId").getProperty();
-        relationEntity.addToOne(relationEntity, parentIdProperty).setName("parent");
-        Property testIdProperty = relationEntity.addLongProperty("testId").getProperty();
-        relationEntity.addToOne(testEntity, testIdProperty);
-        Property testIdNotNullProperty = relationEntity.addLongProperty("testIdNotNull").notNull().getProperty();
-        relationEntity.addToOne(testEntity, testIdNotNullProperty).setName("testNotNull");
-        relationEntity.addStringProperty("simpleString");
-        relationEntity.addToOneWithoutProperty("testWithoutProperty", testEntity, "WITHOUT_PROPERTY_TEST_ID");
-    }
-
-    protected void createToMany() {
-        Entity toManyTargetEntity = schema.addEntity("ToManyTargetEntity");
-        Property toManyIdProperty = toManyTargetEntity.addLongProperty("toManyId").getProperty();
-        Property toManyIdDescProperty = toManyTargetEntity.addLongProperty("toManyIdDesc").getProperty();
-        Property targetIdProperty = toManyTargetEntity.addIdProperty().getProperty();
-        Property targetJoinProperty = toManyTargetEntity.addStringProperty("targetJoinProperty").getProperty();
-
-        Entity toManyEntity = schema.addEntity("ToManyEntity");
-        Property sourceIdProperty = toManyEntity.addIdProperty().getProperty();
-        Property sourceJoinProperty = toManyEntity.addStringProperty("sourceJoinProperty").getProperty();
-
-        ToMany toMany = toManyEntity.addToMany(toManyTargetEntity, toManyIdProperty);
-        toMany.orderAsc(targetIdProperty);
-
-        ToMany toManyDesc = toManyEntity.addToMany(toManyTargetEntity, toManyIdDescProperty);
-        toManyDesc.setName("ToManyDescList");
-        toManyDesc.orderDesc(targetIdProperty);
-
-        ToMany toManyByJoinProperty = toManyEntity
-                .addToMany(sourceJoinProperty, toManyTargetEntity, targetJoinProperty);
-        toManyByJoinProperty.setName("ToManyByJoinProperty");
-        toManyByJoinProperty.orderAsc(targetIdProperty);
-
-        Property[] sourceProperties = { sourceIdProperty, sourceJoinProperty };
-        Property[] targetProperties = { toManyIdProperty, targetJoinProperty };
-        ToMany toManyJoinTwo = toManyEntity.addToMany(sourceProperties, toManyTargetEntity, targetProperties);
-        toManyJoinTwo.setName("ToManyJoinTwo");
-        toManyJoinTwo.orderDesc(targetJoinProperty);
-        toManyJoinTwo.orderDesc(targetIdProperty);
-    }
-    
-    protected void createTreeEntity() {
-        Entity treeEntity = schema.addEntity("TreeEntity");
-        treeEntity.addIdProperty();
-        Property parentIdProperty = treeEntity.addLongProperty("parentId").getProperty();
-        treeEntity.addToOne(treeEntity, parentIdProperty).setName("parent");
-        treeEntity.addToMany(treeEntity, parentIdProperty).setName("children");
-    }
-
-    protected void createDate() {
-        Entity dateEntity = schema.addEntity("DateEntity");
-        dateEntity.addIdProperty();
-        dateEntity.addDateProperty("date");
-        dateEntity.addDateProperty("dateNotNull").notNull();
-    }
-
-    protected void createSpecialNames() {
-        Entity specialNamesEntity = schema.addEntity("SpecialNamesEntity");
-        specialNamesEntity.addIdProperty();
-        specialNamesEntity.addStringProperty("count");
-        specialNamesEntity.addStringProperty("select");
-        specialNamesEntity.addStringProperty("sum");
-        specialNamesEntity.addStringProperty("avg");
-        specialNamesEntity.addStringProperty("join");
-        specialNamesEntity.addStringProperty("distinct");
-        specialNamesEntity.addStringProperty("on");
-        specialNamesEntity.addStringProperty("index");
-    }
-
-    private void createAbcdef() {
-        Entity entity = schema.addEntity("AbcdefEntity");
-        entity.addIdProperty();
-        entity.addIntProperty("a");
-        entity.addIntProperty("b");
-        entity.addIntProperty("c");
-        entity.addIntProperty("d");
-        entity.addIntProperty("e");
-        entity.addIntProperty("f");
-        entity.addIntProperty("g");
-        entity.addIntProperty("h");
-        entity.addIntProperty("j");
-        entity.addIntProperty("i");
-        entity.addIntProperty("k");
-    }
-
-    protected void createActive() {
-        Entity activeEntity = schema.addEntity("AnActiveEntity");
-        activeEntity.addIdProperty();
-        activeEntity.addStringProperty("text");
-        activeEntity.setActive(true);
-    }
-
-    protected void createExtendsImplements() {
-        Entity entity = schema.addEntity("ExtendsImplementsEntity");
-        entity.addIdProperty();
-        entity.addStringProperty("text");
-        entity.setSuperclass("TestSuperclass");
-        entity.implementsInterface("TestInterface");
-        entity.implementsSerializable();
-    }
-
-    private void createSchema2() {
-        schema2 = new Schema(1, "de.greenrobot.daotest2");
-        schema2.setDefaultJavaPackageTest("de.greenrobot.daotest2.entity");
-        schema2.setDefaultJavaPackageDao("de.greenrobot.daotest2.dao");
-        schema2.enableKeepSectionsByDefault();
-
-        Entity keepEntity = schema2.addEntity("KeepEntity");
-        keepEntity.addIdProperty();
-
-        Entity toManyTarget2 = schema2.addEntity("ToManyTarget2");
-        toManyTarget2.addIdProperty();
-        Property toManyTarget2FkId = toManyTarget2.addLongProperty("fkId").getProperty();
-        toManyTarget2.setSkipGenerationTest(true);
-
-        Entity toOneTarget2 = schema2.addEntity("ToOneTarget2");
-        toOneTarget2.addIdProperty();
-        toOneTarget2.setJavaPackage("de.greenrobot.daotest2.to1_specialentity");
-        toOneTarget2.setJavaPackageDao("de.greenrobot.daotest2.to1_specialdao");
-        toOneTarget2.setJavaPackageTest("de.greenrobot.daotest2.to1_specialtest");
-        toOneTarget2.setSkipGenerationTest(true);
-
-        Entity relationSource2 = schema2.addEntity("RelationSource2");
-        relationSource2.addIdProperty();
-        relationSource2.addToMany(toManyTarget2, toManyTarget2FkId);
-        Property toOneId = relationSource2.addLongProperty("toOneId").getProperty();
-        relationSource2.addToOne(toOneTarget2, toOneId);
-        relationSource2.setJavaPackage("de.greenrobot.daotest2.specialentity");
-        relationSource2.setJavaPackageDao("de.greenrobot.daotest2.specialdao");
-        relationSource2.setJavaPackageTest("de.greenrobot.daotest2.specialtest");
-        relationSource2.setSkipGenerationTest(true);
-    }
+	public static void main(String[] args) throws Exception {
+		TestDaoGenerator testDaoGenerator = new TestDaoGenerator();
+		testDaoGenerator.generate();
+	}
+
+	private Schema	schema;
+	private Entity	testEntity;
+	private Schema	schema2;
+
+	public TestDaoGenerator() {
+		this.schema = new Schema(1, "de.greenrobot.daotest");
+		this.schema.setDefaultJavaPackageTest("de.greenrobot.daotest.entity");
+
+		createSimple();
+		createSimpleNotNull();
+		this.testEntity = createTest();
+		createRelation();
+		createDate();
+		createSpecialNames();
+		createAbcdef();
+		createToMany();
+		createTreeEntity();
+		createActive();
+		createExtendsImplements();
+
+		createSchema2();
+	}
+
+	public void generate() throws Exception {
+		DaoGenerator daoGenerator = new DaoGenerator();
+		daoGenerator.generateAll(this.schema, "../DaoTest/src-gen", "../DaoTest/src");
+		daoGenerator.generateAll(this.schema2, "../DaoTest/src-gen", "../DaoTest/src");
+	}
+
+	protected void createSimple() {
+		Entity simple = this.schema.addEntity("SimpleEntity");
+		simple.addIdProperty();
+		simple.addBooleanProperty("simpleBoolean");
+		simple.addByteProperty("simpleByte");
+		simple.addShortProperty("simpleShort");
+		simple.addIntProperty("simpleInt");
+		simple.addLongProperty("simpleLong");
+		simple.addFloatProperty("simpleFloat");
+		simple.addDoubleProperty("simpleDouble");
+		simple.addStringProperty("simpleString");
+		simple.addByteArrayProperty("simpleByteArray");
+	}
+
+	protected void createSimpleNotNull() {
+		Entity notNull = this.schema.addEntity("SimpleEntityNotNull");
+		notNull.addIdProperty().notNull();
+		notNull.addBooleanProperty("simpleBoolean").notNull();
+		notNull.addByteProperty("simpleByte").notNull();
+		notNull.addShortProperty("simpleShort").notNull();
+		notNull.addIntProperty("simpleInt").notNull();
+		notNull.addLongProperty("simpleLong").notNull();
+		notNull.addFloatProperty("simpleFloat").notNull();
+		notNull.addDoubleProperty("simpleDouble").notNull();
+		notNull.addStringProperty("simpleString").notNull();
+		notNull.addByteArrayProperty("simpleByteArray").notNull();
+	}
+
+	protected Entity createTest() {
+		Entity testEntity = this.schema.addEntity("TestEntity");
+		testEntity.addIdProperty();
+		testEntity.addIntProperty("simpleInt").notNull();
+		testEntity.addIntProperty("simpleInteger");
+		testEntity.addStringProperty("simpleStringNotNull").notNull();
+		testEntity.addStringProperty("simpleString");
+		testEntity.addStringProperty("indexedString").index();
+		testEntity.addStringProperty("indexedStringAscUnique").indexAsc(null, true);
+		testEntity.addDateProperty("simpleDate");
+		testEntity.addBooleanProperty("simpleBoolean");
+		return testEntity;
+	}
+
+	protected void createRelation() {
+		Entity relationEntity = this.schema.addEntity("RelationEntity");
+		relationEntity.addIdProperty();
+		Property parentIdProperty = relationEntity.addLongProperty("parentId").getProperty();
+		relationEntity.addToOne(relationEntity, parentIdProperty).setName("parent");
+		Property testIdProperty = relationEntity.addLongProperty("testId").getProperty();
+		relationEntity.addToOne(this.testEntity, testIdProperty);
+		Property testIdNotNullProperty = relationEntity.addLongProperty("testIdNotNull").notNull().getProperty();
+		relationEntity.addToOne(this.testEntity, testIdNotNullProperty).setName("testNotNull");
+		relationEntity.addStringProperty("simpleString");
+		relationEntity.addToOneWithoutProperty("testWithoutProperty", this.testEntity, "WITHOUT_PROPERTY_TEST_ID");
+	}
+
+	protected void createToMany() {
+		Entity toManyTargetEntity = this.schema.addEntity("ToManyTargetEntity");
+		Property toManyIdProperty = toManyTargetEntity.addLongProperty("toManyId").getProperty();
+		Property toManyIdDescProperty = toManyTargetEntity.addLongProperty("toManyIdDesc").getProperty();
+		Property targetIdProperty = toManyTargetEntity.addIdProperty().getProperty();
+		Property targetJoinProperty = toManyTargetEntity.addStringProperty("targetJoinProperty").getProperty();
+
+		Entity toManyEntity = this.schema.addEntity("ToManyEntity");
+		Property sourceIdProperty = toManyEntity.addIdProperty().getProperty();
+		Property sourceJoinProperty = toManyEntity.addStringProperty("sourceJoinProperty").getProperty();
+
+		ToMany toMany = toManyEntity.addToMany(toManyTargetEntity, toManyIdProperty);
+		toMany.orderAsc(targetIdProperty);
+
+		ToMany toManyDesc = toManyEntity.addToMany(toManyTargetEntity, toManyIdDescProperty);
+		toManyDesc.setName("ToManyDescList");
+		toManyDesc.orderDesc(targetIdProperty);
+
+		ToMany toManyByJoinProperty = toManyEntity.addToMany(sourceJoinProperty, toManyTargetEntity, targetJoinProperty);
+		toManyByJoinProperty.setName("ToManyByJoinProperty");
+		toManyByJoinProperty.orderAsc(targetIdProperty);
+
+		Property[] sourceProperties = { sourceIdProperty, sourceJoinProperty };
+		Property[] targetProperties = { toManyIdProperty, targetJoinProperty };
+		ToMany toManyJoinTwo = toManyEntity.addToMany(sourceProperties, toManyTargetEntity, targetProperties);
+		toManyJoinTwo.setName("ToManyJoinTwo");
+		toManyJoinTwo.orderDesc(targetJoinProperty);
+		toManyJoinTwo.orderDesc(targetIdProperty);
+	}
+
+	protected void createTreeEntity() {
+		Entity treeEntity = this.schema.addEntity("TreeEntity");
+		treeEntity.addIdProperty();
+		Property parentIdProperty = treeEntity.addLongProperty("parentId").getProperty();
+		treeEntity.addToOne(treeEntity, parentIdProperty).setName("parent");
+		treeEntity.addToMany(treeEntity, parentIdProperty).setName("children");
+	}
+
+	protected void createDate() {
+		Entity dateEntity = this.schema.addEntity("DateEntity");
+		dateEntity.addIdProperty();
+		dateEntity.addDateProperty("date");
+		dateEntity.addDateProperty("dateNotNull").notNull();
+	}
+
+	protected void createSpecialNames() {
+		Entity specialNamesEntity = this.schema.addEntity("SpecialNamesEntity");
+		specialNamesEntity.addIdProperty();
+		specialNamesEntity.addStringProperty("count");
+		specialNamesEntity.addStringProperty("select");
+		specialNamesEntity.addStringProperty("sum");
+		specialNamesEntity.addStringProperty("avg");
+		specialNamesEntity.addStringProperty("join");
+		specialNamesEntity.addStringProperty("distinct");
+		specialNamesEntity.addStringProperty("on");
+		specialNamesEntity.addStringProperty("index");
+	}
+
+	private void createAbcdef() {
+		Entity entity = this.schema.addEntity("AbcdefEntity");
+		entity.addIdProperty();
+		entity.addIntProperty("a");
+		entity.addIntProperty("b");
+		entity.addIntProperty("c");
+		entity.addIntProperty("d");
+		entity.addIntProperty("e");
+		entity.addIntProperty("f");
+		entity.addIntProperty("g");
+		entity.addIntProperty("h");
+		entity.addIntProperty("j");
+		entity.addIntProperty("i");
+		entity.addIntProperty("k");
+	}
+
+	protected void createActive() {
+		Entity activeEntity = this.schema.addEntity("AnActiveEntity");
+		activeEntity.addIdProperty();
+		activeEntity.addStringProperty("text");
+		activeEntity.setActive(true);
+	}
+
+	protected void createExtendsImplements() {
+		Entity entity = this.schema.addEntity("ExtendsImplementsEntity");
+		entity.addIdProperty();
+		entity.addStringProperty("text");
+		entity.setSuperclass("TestSuperclass");
+		entity.implementsInterface("TestInterface");
+		entity.implementsSerializable();
+	}
+
+	private void createSchema2() {
+		this.schema2 = new Schema(1, "de.greenrobot.daotest2");
+		this.schema2.setDefaultJavaPackageTest("de.greenrobot.daotest2.entity");
+		this.schema2.setDefaultJavaPackageDao("de.greenrobot.daotest2.dao");
+		this.schema2.enableKeepSectionsByDefault();
+
+		Entity keepEntity = this.schema2.addEntity("KeepEntity");
+		keepEntity.addIdProperty();
+
+		Entity toManyTarget2 = this.schema2.addEntity("ToManyTarget2");
+		toManyTarget2.addIdProperty();
+		Property toManyTarget2FkId = toManyTarget2.addLongProperty("fkId").getProperty();
+		toManyTarget2.setSkipGenerationTest(true);
+
+		Entity toOneTarget2 = this.schema2.addEntity("ToOneTarget2");
+		toOneTarget2.addIdProperty();
+		toOneTarget2.setJavaPackage("de.greenrobot.daotest2.to1_specialentity");
+		toOneTarget2.setJavaPackageDao("de.greenrobot.daotest2.to1_specialdao");
+		toOneTarget2.setJavaPackageTest("de.greenrobot.daotest2.to1_specialtest");
+		toOneTarget2.setSkipGenerationTest(true);
+
+		Entity relationSource2 = this.schema2.addEntity("RelationSource2");
+		relationSource2.addIdProperty();
+		relationSource2.addToMany(toManyTarget2, toManyTarget2FkId);
+		Property toOneId = relationSource2.addLongProperty("toOneId").getProperty();
+		relationSource2.addToOne(toOneTarget2, toOneId);
+		relationSource2.setJavaPackage("de.greenrobot.daotest2.specialentity");
+		relationSource2.setJavaPackageDao("de.greenrobot.daotest2.specialdao");
+		relationSource2.setJavaPackageTest("de.greenrobot.daotest2.specialtest");
+		relationSource2.setSkipGenerationTest(true);
+	}
 
 }
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 1ac0f16c..a24e612d 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -251,20 +251,21 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 </#if>
 
 <#if entity.hasEasyDatastoreIntegration>
-	public ${entity.className}(com.google.appengine.api.datastore.Entity entity) {
-	<#list entity.properties as property>
-		try {
-			this.${property.propertyName} = (${property.javaType}) entity.getProperty(ds_${property.propertyName});
-		} catch (Exception e) {}
-	</#list>
+	public java.util.Map<String, Object> convertToMap() {
+		java.util.Map<String, Object> results = new java.util.HashMap<String, Object>();
+		<#list entity.properties as property>
+			results.put(ds_${property.propertyName}, this.${property.propertyName});
+		</#list>
+		return results;
 	}
 	
-	public com.google.appengine.api.datastore.Entity toDatastoreEntity () {
-		com.google.appengine.api.datastore.Entity result = new com.google.appengine.api.datastore.Entity(ds_entityName);
+	public ${entity.className} initFromMap(java.util.Map<String, Object> map) {
 		<#list entity.properties as property>
-		result.setProperty(ds_${property.propertyName},this.${property.propertyName});
+		try {
+			this.${property.propertyName} = (${property.javaType}) map.get(ds_${property.propertyName});
+		} catch (ClassCastException e) {}
 		</#list>
-		return result;
+		return this;
 	}
 </#if>
 
diff --git a/DaoGenerator/src-template/fakeDatastoreEntity.ftl b/DaoGenerator/src-template/fakeDatastoreEntity.ftl
deleted file mode 100644
index 396593a5..00000000
--- a/DaoGenerator/src-template/fakeDatastoreEntity.ftl
+++ /dev/null
@@ -1,7 +0,0 @@
-package com.google.appengine.api.datastore;
-
-public class Entity {
-	public Entity(String ds_entityName) {}
-	public void setProperty(Object ds_id, Object id) {}
-	public Object getProperty(String ds_id) {return null;}
-}
diff --git a/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java b/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
index 10d5b8d4..9192891e 100644
--- a/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
+++ b/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
@@ -65,32 +65,22 @@ public void testMinimalSchemaWithDsIntegration() throws Exception {
 		adressTable.addIntProperty("dummy").notNull();
 		assertEquals(1, schema.getEntities().size());
 		assertEquals(3, adressTable.getProperties().size());
+		schema.hasEasyDatastoreIntegration();
 
 		String outDir = "test-out";
 		File testOutDir = new File(outDir);
 		testOutDir.mkdirs();
 
-		String appSrcDir = "test-app-src-dir";
-		File appSrcTestOutDir = new File(appSrcDir);
-		appSrcTestOutDir.mkdirs();
-
 		File daoFile = new File(outDir + "/de/greenrobot/testdao/" + adressTable.getClassName() + "Dao.java");
 		daoFile.delete();
 		assertFalse(daoFile.exists());
 
-		File fakeEntity = new File(appSrcDir + "/com/google/appengine/api/datastore/Entity.java");
-		fakeEntity.delete();
-		assertFalse(fakeEntity.exists());
-
-		new DaoGenerator().generateAllWithDataStoreIntegration(schema, appSrcDir, outDir);
+		new DaoGenerator().generateAll(schema, outDir);
 
-		assertTrue(fakeEntity.toString(), fakeEntity.exists());
 		assertEquals("PRIMARY KEY", idProperty.getConstraints());
 		assertTrue(daoFile.toString(), daoFile.exists());
 
 		daoFile.delete();
-		fakeEntity.delete();
-		appSrcTestOutDir.delete();
 		testOutDir.delete();
 	}
 
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index 8b1c84c4..8f6cd34d 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -47,7 +47,6 @@
 	private Template	templateDaoSession;
 	private Template	templateEntity;
 	private Template	templateDaoUnitTest;
-	private Template	templateFakeDsEntity;
 
 	public DaoGenerator() throws IOException {
 		System.out.println("greenDAO Generator");
@@ -65,7 +64,6 @@ public DaoGenerator() throws IOException {
 		this.templateDao = config.getTemplate("dao.ftl");
 		this.templateDaoMaster = config.getTemplate("dao-master.ftl");
 		this.templateDaoSession = config.getTemplate("dao-session.ftl");
-		this.templateFakeDsEntity = config.getTemplate("fakeDatastoreEntity.ftl");
 		this.templateEntity = config.getTemplate("entity.ftl");
 		this.templateDaoUnitTest = config.getTemplate("dao-unit-test.ftl");
 	}
@@ -75,19 +73,12 @@ private Pattern compilePattern(String sectionName) {
 		return Pattern.compile(".*^\\s*?//\\s*?KEEP " + sectionName + ".*?\n(.*?)^\\s*// KEEP " + sectionName + " END.*?\n", flags);
 	}
 
-	/** Generates all entities and DAOs for the given schema. 
-	 * 
-	 * */
-	public void generateAllWithDataStoreIntegration(Schema schema, String appSrcDir, String outDir) throws Exception {
-		generateAll(schema, appSrcDir, outDir, null);
-	}
-
 	public void generateAll(Schema schema, String outDir) throws Exception {
-		generateAll(schema, null, outDir, null);
+		generateAll(schema, outDir, null);
 	}
 
 	/** Generates all entities and DAOs for the given schema. */
-	public void generateAll(Schema schema, String appSrcDir, String outDir, String outDirTest) throws Exception {
+	public void generateAll(Schema schema, String outDir, String outDirTest) throws Exception {
 		long start = System.currentTimeMillis();
 
 		File outDirFile = toFileForceExists(outDir);
@@ -97,16 +88,6 @@ public void generateAll(Schema schema, String appSrcDir, String outDir, String o
 			outDirTestFile = toFileForceExists(outDirTest);
 		}
 
-		if (schema.isHasEasyDatastoreIntegration() && appSrcDir == null) {
-			throw new RuntimeException(
-					"U have to provide the appSrcDir when using the EasyDataStoreIntegration, use method: generateAllWithDataStoreIntegration()");
-		}
-
-		File appSrcDirFile = null;
-		if (appSrcDir != null) {
-			appSrcDirFile = toFileForceExists(appSrcDir);
-		}
-
 		schema.init2ndPass();
 		schema.init3ndPass();
 
@@ -129,7 +110,6 @@ public void generateAll(Schema schema, String appSrcDir, String outDir, String o
 			}
 		}
 		generate(this.templateDaoMaster, outDirFile, schema.getDefaultJavaPackageDao(), "DaoMaster", schema, null);
-		generate(this.templateFakeDsEntity, appSrcDirFile, "/com/google/appengine/api/datastore", "Entity", schema, null);
 		generate(this.templateDaoSession, outDirFile, schema.getDefaultJavaPackageDao(), "DaoSession", schema, null);
 
 		long time = System.currentTimeMillis() - start;
