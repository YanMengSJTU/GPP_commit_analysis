diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/Customer.java b/DaoExample/src/main/java/de/greenrobot/daoexample/Customer.java
index 0198288d..600cd491 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/Customer.java
+++ b/DaoExample/src/main/java/de/greenrobot/daoexample/Customer.java
@@ -104,4 +104,18 @@ public void refresh() {
         myDao.refresh(this);
     }
 
+
+    /** merge */
+    public void merge(Customer model){
+        if(this.id != model.getId()){
+            return;
+        }
+        if(model.getId() != null && model.getId() != 0){
+            this.id = model.getId();
+        }
+        if(model.getName() != null && model.getName() != 0){
+            this.name = model.getName();
+        }
+    }
+
 }
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/Note.java b/DaoExample/src/main/java/de/greenrobot/daoexample/Note.java
index e8d9e1e9..5e885c6e 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/Note.java
+++ b/DaoExample/src/main/java/de/greenrobot/daoexample/Note.java
@@ -1,5 +1,8 @@
 package de.greenrobot.daoexample;
 
+import de.greenrobot.daoexample.DaoSession;
+import de.greenrobot.dao.DaoException;
+
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table "NOTE".
@@ -12,6 +15,13 @@
     private String comment;
     private java.util.Date date;
 
+    /** Used to resolve relations */
+    private transient DaoSession daoSession;
+
+    /** Used for active entity operations. */
+    private transient NoteDao myDao;
+
+
     public Note() {
     }
 
@@ -26,6 +36,12 @@ public Note(Long id, String text, String comment, java.util.Date date) {
         this.date = date;
     }
 
+    /** called by internal mechanisms, do not call yourself. */
+    public void __setDaoSession(DaoSession daoSession) {
+        this.daoSession = daoSession;
+        myDao = daoSession != null ? daoSession.getNoteDao() : null;
+    }
+
     public Long getId() {
         return id;
     }
@@ -60,4 +76,48 @@ public void setDate(java.util.Date date) {
         this.date = date;
     }
 
+    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    public void delete() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }    
+        myDao.delete(this);
+    }
+
+    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    public void update() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }    
+        myDao.update(this);
+    }
+
+    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    public void refresh() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }    
+        myDao.refresh(this);
+    }
+
+
+    /** merge */
+    public void merge(Note model){
+        if(this.id != model.getId()){
+            return;
+        }
+        if(model.getId() != null && model.getId() != 0){
+            this.id = model.getId();
+        }
+        if(model.getText() != null && model.getText() != 0){
+            this.text = model.getText();
+        }
+        if(model.getComment() != null && model.getComment() != 0){
+            this.comment = model.getComment();
+        }
+        if(model.getDate() != null && model.getDate() != 0){
+            this.date = model.getDate();
+        }
+    }
+
 }
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/NoteDao.java b/DaoExample/src/main/java/de/greenrobot/daoexample/NoteDao.java
index 6d7d8306..1989fe1c 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/NoteDao.java
+++ b/DaoExample/src/main/java/de/greenrobot/daoexample/NoteDao.java
@@ -29,6 +29,8 @@
         public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
     };
 
+    private DaoSession daoSession;
+
 
     public NoteDao(DaoConfig config) {
         super(config);
@@ -36,6 +38,7 @@ public NoteDao(DaoConfig config) {
     
     public NoteDao(DaoConfig config, DaoSession daoSession) {
         super(config, daoSession);
+        this.daoSession = daoSession;
     }
 
     /** Creates the underlying database table. */
@@ -76,6 +79,12 @@ protected void bindValues(SQLiteStatement stmt, Note entity) {
         }
     }
 
+    @Override
+    protected void attachEntity(Note entity) {
+        super.attachEntity(entity);
+        entity.__setDaoSession(daoSession);
+    }
+
     /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/Order.java b/DaoExample/src/main/java/de/greenrobot/daoexample/Order.java
index 49dcd4f3..07161635 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/Order.java
+++ b/DaoExample/src/main/java/de/greenrobot/daoexample/Order.java
@@ -118,4 +118,21 @@ public void refresh() {
         myDao.refresh(this);
     }
 
+
+    /** merge */
+    public void merge(Order model){
+        if(this.id != model.getId()){
+            return;
+        }
+        if(model.getId() != null && model.getId() != 0){
+            this.id = model.getId();
+        }
+        if(model.getDate() != null && model.getDate() != 0){
+            this.date = model.getDate();
+        }
+        if(model.getCustomerId() != null && model.getCustomerId() != 0){
+            this.customerId = model.getCustomerId();
+        }
+    }
+
 }
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index 23d957a7..238a076f 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -41,6 +41,7 @@ public static void main(String[] args) throws Exception {
 
     private static void addNote(Schema schema) {
         Entity note = schema.addEntity("Note");
+        note.setActive(true);
         note.addIdProperty();
         note.addStringProperty("text").notNull();
         note.addStringProperty("comment");
diff --git a/DaoGenerator/build.gradle b/DaoGenerator/build.gradle
index 714f38f5..caf05d82 100644
--- a/DaoGenerator/build.gradle
+++ b/DaoGenerator/build.gradle
@@ -174,7 +174,7 @@ ext {
     siteUrl = 'https://github.com/jcenter/greenDAO'
     gitUrl = 'https://github.com/jcenter/greenDAO.git'
 
-    libraryVersion = '3.1.2'
+    libraryVersion = '3.1.4'
 
 
     developerId = 'lijinchao2007'
@@ -187,6 +187,7 @@ ext {
 }
 
 apply plugin: 'com.jfrog.bintray'
+apply plugin: 'com.github.dcendents.android-maven'
 
 version = libraryVersion
 group = publishedGroupId
@@ -202,6 +203,46 @@ artifacts {
 Properties properties = new Properties()
 properties.load(project.rootProject.file('local.properties').newDataInputStream())
 
+
+install {
+    repositories.mavenInstaller {
+        // This generates POM.xml with proper parameters
+        pom {
+            project {
+                packaging 'jar'
+                groupId publishedGroupId
+                artifactId artifact
+
+                // Add your description here
+                name libraryName
+                description libraryDescription
+                url siteUrl
+
+                // Set your license
+                licenses {
+                    license {
+                        name licenseName
+                        url licenseUrl
+                    }
+                }
+                developers {
+                    developer {
+                        id developerId
+                        name developerName
+                        email developerEmail
+                    }
+                }
+                scm {
+                    connection gitUrl
+                    developerConnection gitUrl
+                    url siteUrl
+
+                }
+            }
+        }
+    }
+}
+
 bintray {
     user = properties.getProperty("bintray.user")
     key = properties.getProperty("bintray.apikey")
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 0e383d84..47b62a0f 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -279,6 +279,19 @@ ${property.javaDocSetter}
     }
 
 </#if>
+
+    /** merge */
+    public void merge(${entity.className} model){
+        if(this.${entity.getPkProperty().getPropertyName()} != model.get${entity.getPkProperty().getPropertyName()?cap_first}()){
+            return;
+        }
+    <#list entity.properties as property>
+        if(model.get${property.propertyName?cap_first}() != null && model.get${property.propertyName?cap_first}() != 0){
+            this.${property.propertyName} = model.get${property.propertyName?cap_first}();
+        }
+    </#list>
+    }
+
 <#if entity.hasKeepSections>
     // KEEP METHODS - put your custom methods here
 ${keepMethods!}    // KEEP METHODS END
