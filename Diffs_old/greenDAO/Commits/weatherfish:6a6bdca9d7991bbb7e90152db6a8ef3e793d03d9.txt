diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/query/LazyList.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/LazyList.java
index aee827b1..032ad7af 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/query/LazyList.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/LazyList.java
@@ -164,7 +164,7 @@ protected void checkCached() {
     }
 
     /** Like get but does not load the entity if it was not loaded before. */
-    public E peak(int location) {
+    public E peek(int location) {
         if (entities != null) {
             return entities.get(location);
         } else {
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/LazyListTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/LazyListTest.java
index 605c47a6..4cf2aca1 100644
--- a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/LazyListTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/LazyListTest.java
@@ -36,16 +36,16 @@ public void testSizeAndGetAndPeak() {
 
         LazyList<TestEntity> listLazy = dao.queryBuilder().build().listLazy();
         assertEquals(list.size(), listLazy.size());
-        assertNull(listLazy.peak(0));
-        assertNull(listLazy.peak(1));
+        assertNull(listLazy.peek(0));
+        assertNull(listLazy.peek(1));
 
         assertNotNull(listLazy.get(1));
-        assertNull(listLazy.peak(0));
-        assertNotNull(listLazy.peak(1));
+        assertNull(listLazy.peek(0));
+        assertNotNull(listLazy.peek(1));
 
         assertNotNull(listLazy.get(0));
-        assertNotNull(listLazy.peak(0));
-        assertNotNull(listLazy.peak(1));
+        assertNotNull(listLazy.peek(0));
+        assertNotNull(listLazy.peek(1));
     }
 
     public void testGetAll100() {
@@ -84,7 +84,7 @@ public void testSublistUncached() {
     public void testIterator() {
         ArrayList<TestEntity> list = insert(100);
         LazyList<TestEntity> listLazy = dao.queryBuilder().orderAsc(Properties.SimpleInteger).build().listLazy();
-        testIerator(list, listLazy, false);
+        testIterator(list, listLazy, false);
         assertTrue(listLazy.isClosed());
     }
 
@@ -92,12 +92,12 @@ public void testIteratorUncached() {
         ArrayList<TestEntity> list = insert(100);
         LazyList<TestEntity> listLazy = dao.queryBuilder().orderAsc(Properties.SimpleInteger).build()
                 .listLazyUncached();
-        testIerator(list, listLazy, true);
+        testIterator(list, listLazy, true);
         assertFalse(listLazy.isClosed());
         listLazy.close();
     }
 
-    protected void testIerator(ArrayList<TestEntity> list, LazyList<TestEntity> listLazy, boolean uncached) {
+    protected void testIterator(ArrayList<TestEntity> list, LazyList<TestEntity> listLazy, boolean uncached) {
         ListIterator<TestEntity> iterator = listLazy.listIterator();
         try {
             iterator.previous();
@@ -119,12 +119,12 @@ protected void testIerator(ArrayList<TestEntity> list, LazyList<TestEntity> list
             }
 
             TestEntity entity = list.get(i);
-            assertNull(listLazy.peak(i));
+            assertNull(listLazy.peek(i));
             TestEntity lazyEntity = iterator.next();
             if (uncached) {
-                assertNull(listLazy.peak(i));
+                assertNull(listLazy.peek(i));
             } else {
-                assertNotNull(listLazy.peak(i));
+                assertNotNull(listLazy.peek(i));
             }
             assertEquals(entity.getId(), lazyEntity.getId());
         }
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/RawQueryTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/RawQueryTest.java
index 1ec945ee..1c1a4b8e 100644
--- a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/RawQueryTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/RawQueryTest.java
@@ -76,16 +76,16 @@ public void testRawQueryLazyList() {
 
         LazyList<TestEntity> listLazy = dao.queryRawCreate("").listLazy();
         assertEquals(list.size(), listLazy.size());
-        assertNull(listLazy.peak(0));
-        assertNull(listLazy.peak(1));
+        assertNull(listLazy.peek(0));
+        assertNull(listLazy.peek(1));
 
         assertNotNull(listLazy.get(1));
-        assertNull(listLazy.peak(0));
-        assertNotNull(listLazy.peak(1));
+        assertNull(listLazy.peek(0));
+        assertNotNull(listLazy.peek(1));
 
         assertNotNull(listLazy.get(0));
-        assertNotNull(listLazy.peak(0));
-        assertNotNull(listLazy.peak(1));
+        assertNotNull(listLazy.peek(0));
+        assertNotNull(listLazy.peek(1));
     }
 
 }
