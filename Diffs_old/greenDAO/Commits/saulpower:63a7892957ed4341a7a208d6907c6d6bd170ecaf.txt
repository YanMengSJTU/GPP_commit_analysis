diff --git a/DaoCore/src/de/greenrobot/dao/sync/GreenSync.java b/DaoCore/src/de/greenrobot/dao/sync/GreenSync.java
index e58ca8e0..22c57d82 100644
--- a/DaoCore/src/de/greenrobot/dao/sync/GreenSync.java
+++ b/DaoCore/src/de/greenrobot/dao/sync/GreenSync.java
@@ -11,10 +11,7 @@
 
 import java.lang.reflect.Modifier;
 import java.lang.reflect.Type;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
 /**
  * Created by saulhoward on 3/21/14.
@@ -48,6 +45,10 @@ public static Type getTypeToken(String key) {
         return sListTypeTokensMap.get(key);
     }
 
+    public Gson getGson() {
+        return mGson;
+    }
+
     public GreenSync(AbstractDaoSession session, SyncService syncService) {
 
         final GsonBuilder builder = new GsonBuilder();
@@ -98,9 +99,9 @@ private void syncAction(Map<String, List<GreenSyncBase>> objects, String action)
 
                 SyncService.Callback callback = new SyncService.Callback() {
                     @Override
-                    public void onSuccess(String externalId) {
+                    public void onSuccess(String response) {
                         item.clean();
-                        item.setExternalId(externalId);
+                        item.setExternalId(response);
                         mGreenSyncDaoBase.update(item);
                     }
 
@@ -121,6 +122,39 @@ public void onFail(String errorMessage) {
         }
     }
 
+    public <T> void load(final Class clazz, final String id, final SyncService.ObjectListener<T> listener) {
+        mSyncService.read(clazz.getSimpleName(), id, new SyncService.Callback() {
+            @Override
+            public void onSuccess(String response) {
+                List list;
+
+                Type type = clazz;
+
+                if (id == null) {
+                    type = sListTypeTokensMap.get(clazz.getSimpleName());
+                }
+
+                Object object = mGson.fromJson(response, type);
+                if (!(object instanceof List)) {
+                    list = new ArrayList<T>();
+                    list.add(object);
+                } else {
+                    list = (List) object;
+                }
+                listener.onObjectsLoaded(list);
+            }
+
+            @Override
+            public void onFail(String errorMessage) {
+                listener.onObjectsLoaded(new ArrayList<T>());
+            }
+        });
+    }
+
+    public <T> void loadAll(Class clazz, final SyncService.ObjectListener<T> listener) {
+        load(clazz, null, listener);
+    }
+
     public String syncBatch() {
 
         Map<String, Map> syncObjects = new HashMap<String, Map>();
diff --git a/DaoCore/src/de/greenrobot/dao/sync/SyncService.java b/DaoCore/src/de/greenrobot/dao/sync/SyncService.java
index f0b25a4d..7c948de7 100644
--- a/DaoCore/src/de/greenrobot/dao/sync/SyncService.java
+++ b/DaoCore/src/de/greenrobot/dao/sync/SyncService.java
@@ -1,5 +1,7 @@
 package de.greenrobot.dao.sync;
 
+import java.util.List;
+
 /**
  * Created by saulhoward on 3/31/14.
  */
@@ -10,7 +12,11 @@
     void delete(String className, String id, final Callback callback);
 
     public interface Callback {
-        void onSuccess(String externalId);
+        void onSuccess(String response);
         void onFail(String errorMessage);
     }
+
+    public interface ObjectListener<T> {
+        void onObjectsLoaded(List<T> objects);
+    }
 }
diff --git a/DaoExample/src/de/greenrobot/daoexample/MySyncServce.java b/DaoExample/src/de/greenrobot/daoexample/MySyncServce.java
index 8cf687e8..a65ecbd0 100644
--- a/DaoExample/src/de/greenrobot/daoexample/MySyncServce.java
+++ b/DaoExample/src/de/greenrobot/daoexample/MySyncServce.java
@@ -1,15 +1,12 @@
 package de.greenrobot.daoexample;
 
 import android.content.Context;
-import android.util.Log;
 import com.android.volley.Request;
 import com.android.volley.RequestQueue;
 import com.android.volley.Response;
 import com.android.volley.VolleyError;
 import com.android.volley.toolbox.Volley;
 import de.greenrobot.dao.sync.SyncService;
-import org.json.JSONException;
-import org.json.JSONObject;
 
 /**
  * Created by saulhoward on 3/31/14.
@@ -43,7 +40,7 @@ public void create(String className, String payload, final Callback callback) {
 
     @Override
     public void read(String className, String id, final Callback callback) {
-        sendRequest(Request.Method.GET, className, null, null, callback);
+        sendRequest(Request.Method.GET, className, null, id, callback);
     }
 
     @Override
@@ -69,14 +66,7 @@ private void sendRequest(int method, String className, String payload, String id
         StringRequest request = new StringRequest(method, urlBuilder.toString(), payload, new Response.Listener<String>() {
             @Override
             public void onResponse(String response) {
-                Log.i("MySyncService", "Response: " + response);
-                JSONObject json = null;
-                try {
-                    json = new JSONObject(response);
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-                callback.onSuccess(json.optString("Guid"));
+                callback.onSuccess(response);
             }
         }, new Response.ErrorListener() {
             @Override
diff --git a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
index 94d2d9de..36a9f135 100644
--- a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
+++ b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
@@ -21,6 +21,7 @@
 import android.os.Bundle;
 import android.text.Editable;
 import android.text.TextWatcher;
+import android.util.Log;
 import android.view.KeyEvent;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -32,6 +33,7 @@
 import android.widget.TextView;
 import android.widget.TextView.OnEditorActionListener;
 import de.greenrobot.dao.sync.GreenSync;
+import de.greenrobot.dao.sync.SyncService;
 import de.greenrobot.daoexample.database.*;
 import de.greenrobot.daoexample.database.DaoMaster.DevOpenHelper;
 
@@ -232,7 +234,19 @@ protected void onListItemClick(ListView l, View v, int position, long id) {
     }
 
     private void toJson() {
-        greenSync.sync();
+        greenSync.loadAll(Notes.class, new SyncService.ObjectListener<Notes>() {
+            @Override
+            public void onObjectsLoaded(List<Notes> objects) {
+                Log.i(TAG, "Notes" + objects.size());
+            }
+        });
+        greenSync.load(Notes.class, "b4e814b0-9d4a-47d6-b373-1e88621dc529", new SyncService.ObjectListener<Notes>() {
+            @Override
+            public void onObjectsLoaded(List<Notes> objects) {
+                Log.i(TAG, "Notes: " + objects.size());
+            }
+        });
+//        greenSync.sync();
 //        Long start = System.currentTimeMillis();
 //        String json = greenSync.syncBatch();
 //        Log.i(TAG, "Write: " + json);
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/Customers.java b/DaoExample/src/de/greenrobot/daoexample/database/Customers.java
index ddf0ff4d..69ba8a24 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/Customers.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/Customers.java
@@ -1,8 +1,7 @@
 package de.greenrobot.daoexample.database;
 
 import java.util.List;
-import de.greenrobot.dao.sync.GreenSync;
-import com.google.gson.reflect.TypeToken;
+import java.util.Collections;
 import de.greenrobot.dao.DaoEnum;
 import java.util.Map;
 import java.util.HashMap;
@@ -125,7 +124,28 @@ public long getValue() {
                 }
             }
         }
-        return orders;
+        return Collections.unmodifiableList(orders);
+    }
+
+    public void setOrders(List<Order> orders) {
+        if (orders == null) return;
+
+        synchronized (this) {
+            for (Order item : orders) {
+                item.setCustomerId(getId());
+            }
+
+            this.orders = orders;
+        }
+    }
+
+    public void addOrders(Order orders) {
+        if (orders == null) return;
+
+        synchronized (this) {
+            orders.setCustomerId(getId());
+            this.orders.add(orders);
+        }
     }
 
     /** Resets a to-many relationship, making the next get call to query for a fresh result. */
@@ -157,9 +177,4 @@ public void refresh() {
         myDao.refresh(this);
     }
 
-    static {
-        GreenSync.registerListTypeToken("Customers", new TypeToken<List<Customers>>(){}.getType());
-        GreenSync.registerTypeToken("Customers", Customers.class);
-    }
-
 }
\ No newline at end of file
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/CustomersDao.java b/DaoExample/src/de/greenrobot/daoexample/database/CustomersDao.java
index 7cfc5f28..cb7a3f15 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/CustomersDao.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/CustomersDao.java
@@ -1,5 +1,8 @@
 package de.greenrobot.daoexample.database;
 
+import java.util.List;
+import de.greenrobot.dao.sync.GreenSync;
+import com.google.gson.reflect.TypeToken;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
@@ -151,4 +154,9 @@ protected void onPreDeleteEntity(Customers entity) {
         entity.deleteBase(daoSession.getSyncBaseDao());
     }
 
+    static {
+        GreenSync.registerListTypeToken("Customers", new TypeToken<List<Customers>>(){}.getType());
+        GreenSync.registerTypeToken("Customers", Customers.class);
+    }
+
 }
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/Notes.java b/DaoExample/src/de/greenrobot/daoexample/database/Notes.java
index df149d6f..41259f23 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/Notes.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/Notes.java
@@ -1,16 +1,15 @@
 package de.greenrobot.daoexample.database;
 
-import java.util.List;
-import de.greenrobot.dao.sync.GreenSync;
-import com.google.gson.reflect.TypeToken;
 import de.greenrobot.daoexample.database.NoteType;
+import android.os.Parcel;
+import android.os.Parcelable;
 import de.greenrobot.dao.DaoException;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table NOTES.
  */
-public class Notes extends SyncBase  {
+public class Notes extends SyncBase  implements Parcelable {
 
     private transient Long syncBaseId;
     /** Not-null value. */
@@ -123,9 +122,40 @@ public void refresh() {
         myDao.refresh(this);
     }
 
-    static {
-        GreenSync.registerListTypeToken("Notes", new TypeToken<List<Notes>>(){}.getType());
-        GreenSync.registerTypeToken("Notes", Notes.class);
+    public Notes(Parcel in ) {
+        readFromParcel(in);
     }
 
+    public static final Parcelable.Creator CREATOR = new Parcelable.Creator() {
+        public Notes createFromParcel(Parcel in) {
+            return new Notes(in);
+        }
+
+        public Notes[] newArray(int size) {
+            return new Notes[size];
+        }
+    };
+
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeLong(syncBaseId);
+        dest.writeString(name);
+        dest.writeString(comment);
+        dest.writeLong(id);
+        dest.writeLong(type.getValue());
+    }
+
+    @Override
+    public int describeContents() {
+    return 0;
+    }
+
+    private void readFromParcel(Parcel in) {
+        syncBaseId = in.readLong();
+        name = in.readString();
+        comment = in.readString();
+        id = in.readLong();
+        type = NoteType.fromInt(in.readLong());
+    }
 }
\ No newline at end of file
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/NotesDao.java b/DaoExample/src/de/greenrobot/daoexample/database/NotesDao.java
index 9df9bc00..c5784dc1 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/NotesDao.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/NotesDao.java
@@ -1,5 +1,8 @@
 package de.greenrobot.daoexample.database;
 
+import java.util.List;
+import de.greenrobot.dao.sync.GreenSync;
+import com.google.gson.reflect.TypeToken;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
@@ -170,4 +173,9 @@ protected void onPreDeleteEntity(Notes entity) {
         entity.deleteBase(daoSession.getSyncBaseDao());
     }
 
+    static {
+        GreenSync.registerListTypeToken("Notes", new TypeToken<List<Notes>>(){}.getType());
+        GreenSync.registerTypeToken("Notes", Notes.class);
+    }
+
 }
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/Order.java b/DaoExample/src/de/greenrobot/daoexample/database/Order.java
index f4ba2f63..7123ebc4 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/Order.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/Order.java
@@ -1,8 +1,5 @@
 package de.greenrobot.daoexample.database;
 
-import java.util.List;
-import de.greenrobot.dao.sync.GreenSync;
-import com.google.gson.reflect.TypeToken;
 import de.greenrobot.daoexample.database.Customers.OrderType;
 import de.greenrobot.dao.DaoException;
 
@@ -150,9 +147,4 @@ public void refresh() {
         myDao.refresh(this);
     }
 
-    static {
-        GreenSync.registerListTypeToken("Order", new TypeToken<List<Order>>(){}.getType());
-        GreenSync.registerTypeToken("Order", Order.class);
-    }
-
 }
\ No newline at end of file
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/OrderDao.java b/DaoExample/src/de/greenrobot/daoexample/database/OrderDao.java
index 6fa32873..54267ff4 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/OrderDao.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/OrderDao.java
@@ -1,18 +1,22 @@
 package de.greenrobot.daoexample.database;
 
+import java.util.List;
+import de.greenrobot.dao.sync.GreenSync;
+import com.google.gson.reflect.TypeToken;
+import java.util.ArrayList;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
+
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
 import de.greenrobot.dao.internal.SqlUtils;
+import de.greenrobot.dao.internal.DaoConfig;
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
-import de.greenrobot.daoexample.database.Customers.OrderType;
 
-import java.util.ArrayList;
-import java.util.List;
+import de.greenrobot.daoexample.database.Order;
+import de.greenrobot.daoexample.database.Customers.OrderType;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -164,99 +168,99 @@ protected boolean isEntityUpdateable() {
         return query.list();
     }
 
-    private String selectDeep;
-
-    protected String getSelectDeep() {
-        if (selectDeep == null) {
-            StringBuilder builder = new StringBuilder("SELECT ");
-            SqlUtils.appendColumns(builder, "T", getAllColumns());
-            builder.append(',');
-            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomersDao().getAllColumns());
-            builder.append(" FROM ORDERS T");
-            builder.append(" LEFT JOIN CUSTOMERS T0 ON T.'CUSTOMER_ID'=T0.'_id'");
-            builder.append(' ');
-            selectDeep = builder.toString();
-        }
-        return selectDeep;
-    }
-    
-    protected Order loadCurrentDeep(Cursor cursor, boolean lock) {
-        Order entity = loadCurrent(cursor, 0, lock);
-        int offset = getAllColumns().length;
-
-        Customers customers = loadCurrentOther(daoSession.getCustomersDao(), cursor, offset);
-         if(customers != null) {
-            entity.setCustomers(customers);
-        }
-
-        return entity;    
-    }
-
-    public Order loadDeep(Long key) {
-        assertSinglePk();
-        if (key == null) {
-            return null;
-        }
-
-        StringBuilder builder = new StringBuilder(getSelectDeep());
-        builder.append("WHERE ");
-        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
-        String sql = builder.toString();
-        
-        String[] keyArray = new String[] { key.toString() };
-        Cursor cursor = db.rawQuery(sql, keyArray);
-        
-        try {
-            boolean available = cursor.moveToFirst();
-            if (!available) {
-                return null;
-            } else if (!cursor.isLast()) {
-                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
-            }
-            return loadCurrentDeep(cursor, true);
-        } finally {
-            cursor.close();
-        }
-    }
-    
-    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
-    public List<Order> loadAllDeepFromCursor(Cursor cursor) {
-        int count = cursor.getCount();
-        List<Order> list = new ArrayList<Order>(count);
-        
-        if (cursor.moveToFirst()) {
-            if (identityScope != null) {
-                identityScope.lock();
-                identityScope.reserveRoom(count);
-            }
-            try {
-                do {
-                    list.add(loadCurrentDeep(cursor, false));
-                } while (cursor.moveToNext());
-            } finally {
-                if (identityScope != null) {
-                    identityScope.unlock();
-                }
-            }
-        }
-        return list;
-    }
-    
-    protected List<Order> loadDeepAllAndCloseCursor(Cursor cursor) {
-        try {
-            return loadAllDeepFromCursor(cursor);
-        } finally {
-            cursor.close();
-        }
-    }
-    
-
-    /** A raw-style query where you can pass any WHERE clause and arguments. */
-    public List<Order> queryDeep(String where, String... selectionArg) {
-        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
-        return loadDeepAllAndCloseCursor(cursor);
-    }
- 
+    private String selectDeep;
+
+    protected String getSelectDeep() {
+        if (selectDeep == null) {
+            StringBuilder builder = new StringBuilder("SELECT ");
+            SqlUtils.appendColumns(builder, "T", getAllColumns());
+            builder.append(',');
+            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomersDao().getAllColumns());
+            builder.append(" FROM ORDERS T");
+            builder.append(" LEFT JOIN CUSTOMERS T0 ON T.'CUSTOMER_ID'=T0.'_id'");
+            builder.append(' ');
+            selectDeep = builder.toString();
+        }
+        return selectDeep;
+    }
+    
+    protected Order loadCurrentDeep(Cursor cursor, boolean lock) {
+        Order entity = loadCurrent(cursor, 0, lock);
+        int offset = getAllColumns().length;
+
+        Customers customers = loadCurrentOther(daoSession.getCustomersDao(), cursor, offset);
+         if(customers != null) {
+            entity.setCustomers(customers);
+        }
+
+        return entity;    
+    }
+
+    public Order loadDeep(Long key) {
+        assertSinglePk();
+        if (key == null) {
+            return null;
+        }
+
+        StringBuilder builder = new StringBuilder(getSelectDeep());
+        builder.append("WHERE ");
+        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
+        String sql = builder.toString();
+        
+        String[] keyArray = new String[] { key.toString() };
+        Cursor cursor = db.rawQuery(sql, keyArray);
+        
+        try {
+            boolean available = cursor.moveToFirst();
+            if (!available) {
+                return null;
+            } else if (!cursor.isLast()) {
+                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
+            }
+            return loadCurrentDeep(cursor, true);
+        } finally {
+            cursor.close();
+        }
+    }
+    
+    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
+    public List<Order> loadAllDeepFromCursor(Cursor cursor) {
+        int count = cursor.getCount();
+        List<Order> list = new ArrayList<Order>(count);
+        
+        if (cursor.moveToFirst()) {
+            if (identityScope != null) {
+                identityScope.lock();
+                identityScope.reserveRoom(count);
+            }
+            try {
+                do {
+                    list.add(loadCurrentDeep(cursor, false));
+                } while (cursor.moveToNext());
+            } finally {
+                if (identityScope != null) {
+                    identityScope.unlock();
+                }
+            }
+        }
+        return list;
+    }
+    
+    protected List<Order> loadDeepAllAndCloseCursor(Cursor cursor) {
+        try {
+            return loadAllDeepFromCursor(cursor);
+        } finally {
+            cursor.close();
+        }
+    }
+    
+
+    /** A raw-style query where you can pass any WHERE clause and arguments. */
+    public List<Order> queryDeep(String where, String... selectionArg) {
+        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
+        return loadDeepAllAndCloseCursor(cursor);
+    }
+ 
     @Override
     protected void onPreInsertEntity(Order entity) {
         entity.insertBase(daoSession.getSyncBaseDao());
@@ -283,4 +287,9 @@ protected void onPreDeleteEntity(Order entity) {
         entity.deleteBase(daoSession.getSyncBaseDao());
     }
 
+    static {
+        GreenSync.registerListTypeToken("Order", new TypeToken<List<Order>>(){}.getType());
+        GreenSync.registerTypeToken("Order", Order.class);
+    }
+
 }
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/SyncBaseDao.java b/DaoExample/src/de/greenrobot/daoexample/database/SyncBaseDao.java
index fcdfa628..f5930446 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/SyncBaseDao.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/SyncBaseDao.java
@@ -3,14 +3,19 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
-import android.util.Log;
+
 import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.sync.GreenSyncBase;
+import de.greenrobot.dao.query.QueryBuilder;
+
+import de.greenrobot.daoexample.database.SyncBase;
+import de.greenrobot.daoexample.database.BaseState;
+import android.util.Log;
+import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.sync.GreenSyncDaoBase;
+import de.greenrobot.dao.sync.GreenSyncBase;
 
 import java.util.ArrayList;
 import java.util.HashMap;
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index 2a9aa89a..83ab007c 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -43,6 +43,7 @@ private static void addNote(Schema schema) {
         note.addIdProperty().markTransient();
         note.addStringProperty("name").notNull();
         note.addStringProperty("comment");
+        note.setImplementParcelable(true);
 
         addNoteType(schema, note);
     }
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index daf23011..2d54d5f9 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -21,9 +21,13 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 <#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long", "Enum": "Long"  } />
 package ${entity.javaPackageDao};
 
-<#if entity.toOneRelations?has_content || entity.incomingToManyRelations?has_content>
+<#if entity.toOneRelations?has_content || entity.incomingToManyRelations?has_content || (schema.greenSyncEnabled && !entity.aBaseEntity)>
 import java.util.List;
 </#if>
+<#if schema.greenSyncEnabled && !entity.aBaseEntity>
+import de.greenrobot.dao.sync.GreenSync;
+import com.google.gson.reflect.TypeToken;
+</#if>
 <#if entity.toOneRelations?has_content>
 import java.util.ArrayList;
 </#if>
@@ -405,4 +409,11 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
         return loadState(BaseState.CREATE);
     }
 </#if>
+<#if schema.greenSyncEnabled && !entity.aBaseEntity>
+    static {
+        GreenSync.registerListTypeToken("${entity.className}", new TypeToken<List<${entity.className}>>(){}.getType());
+        GreenSync.registerTypeToken("${entity.className}", ${entity.className}.class);
+    }
+
+</#if>
 }
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index f06ba425..098e8670 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -19,15 +19,13 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 -->
 <#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
 <#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
+<#assign toParcelType = {"Boolean":"Value", "boolean":"Byte", "Byte":"Value", "byte":"Byte", "Integer":"Value", "int":"Int", "Long":"Value", "long":"Long", "Float":"Value", "float":"Float", "Double":"Value", "double":"Double", "String":"String", "Byte[]":"ByteArray" }/>
 <#assign complexTypes = ["String", "ByteArray", "Date"]/>
 package ${entity.javaPackage};
 
-<#if entity.toManyRelations?has_content || (schema.greenSyncEnabled && !entity.aBaseEntity)>
+<#if entity.toManyRelations?has_content>
 import java.util.List;
-</#if>
-<#if schema.greenSyncEnabled && !entity.aBaseEntity>
-import de.greenrobot.dao.sync.GreenSync;
-import com.google.gson.reflect.TypeToken;
+import java.util.Collections;
 </#if>
 <#if entity.enums?has_content>
 import de.greenrobot.dao.DaoEnum;
@@ -40,6 +38,10 @@ import java.util.HashMap;
 import ${entity.javaPackage}.${property.entityEnum.entity.className}<#if !property.entityEnum.entity.anEnum>.${property.entityEnum.enumName}</#if>;
     </#if>
 </#list>
+<#if entity.implementParcelable>
+import android.os.Parcel;
+import android.os.Parcelable;
+</#if>
 <#if entity.aBaseEntity>
 import de.greenrobot.dao.sync.GreenSyncBase;
 </#if>
@@ -65,7 +67,7 @@ import ${additionalImport};
  * Entity mapped to table ${entity.tableName}.
  */
 public class ${entity.className}<#if
-entity.superclass?has_content> extends ${entity.superclass} </#if><#if
+entity.superclass?has_content> extends ${entity.superclass}</#if><#if
 entity.interfacesToImplement?has_content> implements <#list entity.interfacesToImplement
 as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 
@@ -317,7 +319,34 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
                 }
             }
         }
-        return ${toMany.name};
+        return Collections.unmodifiableList(${toMany.name});
+    }
+
+    public void set${toMany.name?cap_first}(List<${toMany.targetEntity.className}> ${toMany.name}) {
+        if (${toMany.name} == null) return;
+
+        synchronized (this) {
+            for (${toMany.targetEntity.className} item : ${toMany.name}) {
+                <#assign x=toMany.sourceProperties?size - 1>
+                <#list 0..x as i>
+                item.set${toMany.targetProperties[i].propertyName?cap_first}(get${toMany.sourceProperties[i].propertyName?cap_first}());
+                </#list>
+            }
+
+            this.${toMany.name} = ${toMany.name};
+        }
+    }
+
+    public void add${toMany.name?cap_first}(${toMany.targetEntity.className} ${toMany.name}) {
+        if (${toMany.name} == null) return;
+
+        synchronized (this) {
+            <#assign x=toMany.sourceProperties?size - 1>
+            <#list 0..x as i>
+            ${toMany.name}.set${toMany.targetProperties[i].propertyName?cap_first}(get${toMany.sourceProperties[i].propertyName?cap_first}());
+            </#list>
+            this.${toMany.name}.add(${toMany.name});
+        }
     }
 
     /** Resets a to-many relationship, making the next get call to query for a fresh result. */
@@ -357,16 +386,69 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     }
 
 </#if>
+<#if entity.implementParcelable>
+    public ${entity.className}(Parcel in ) {
+        readFromParcel(in);
+    }
+
+    public static final Parcelable.Creator CREATOR = new Parcelable.Creator() {
+        public ${entity.className} createFromParcel(Parcel in) {
+            return new ${entity.className}(in);
+        }
+
+        public ${entity.className}[] newArray(int size) {
+            return new ${entity.className}[size];
+        }
+    };
+
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+    <#list entity.properties as property>
+        <#if property.anEnum>
+        dest.writeLong(${property.propertyName}.getValue());
+        <#elseif property.javaType == "boolean">
+        dest.writeByte((byte) (${property.propertyName} ? 1 : 0));
+        <#else>
+        dest.write${toParcelType[property.javaType]}(${property.propertyName});
+        </#if>
+    </#list>
+    <#list entity.toOneRelations as toOne>
+        dest.writeValue(${toOne.name});
+    </#list>
+    <#list entity.toManyRelations as toMany>
+        dest.writeArray(${toMany.name} != null ? ${toMany.name}.toArray() : null);
+    </#list>
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    private void readFromParcel(Parcel in) {
+    <#list entity.properties as property>
+        <#if property.anEnum>
+        ${property.propertyName} = ${property.javaType}.fromInt(in.readLong());
+        <#elseif property.javaType == "boolean">
+        ${property.propertyName} = in.readByte() != 0;
+        <#elseif toParcelType[property.javaType] == "Value">
+        ${property.propertyName} = (${property.javaType}) in.read${toParcelType[property.javaType]}(ClassLoader.getSystemClassLoader());
+        <#else>
+        ${property.propertyName} = in.read${toParcelType[property.javaType]}();
+        </#if>
+    </#list>
+    <#list entity.toOneRelations as toOne>
+        ${toOne.name} = (${toOne.targetEntity.className}) in.readValue(${toOne.targetEntity.className}.class.getClassLoader());
+    </#list>
+    <#list entity.toManyRelations as toMany>
+        ${toMany.name} = in.readArrayList(${toMany.targetEntity.className}.class.getClassLoader());
+    </#list>
+    }
+</#if>
 <#if entity.hasKeepSections>
     // KEEP METHODS - put your custom methods here
 ${keepMethods!}    // KEEP METHODS END
 
-</#if>
-<#if schema.greenSyncEnabled && !entity.aBaseEntity>
-    static {
-        GreenSync.registerListTypeToken("${entity.className}", new TypeToken<List<${entity.className}>>(){}.getType());
-        GreenSync.registerTypeToken("${entity.className}", ${entity.className}.class);
-    }
-
 </#if>
 }
\ No newline at end of file
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index 1f8f2af5..6be977e8 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -67,6 +67,8 @@
     private boolean skipGeneration;
     private boolean skipGenerationTest;
     private boolean skipTableCreation;
+
+    private boolean implementParcelable = false;
     private Boolean active;
     private Boolean hasKeepSections;
 
@@ -376,6 +378,15 @@ public boolean isSkipGeneration() {
         return skipGeneration;
     }
 
+    public boolean isImplementParcelable() {
+        return implementParcelable;
+    }
+
+    public void setImplementParcelable(boolean implementParcelable) {
+        this.implementParcelable = implementParcelable;
+        implementsInterface("Parcelable");
+    }
+
     /**
      * Flag if the entity's code generation should be skipped. E.g. if you need to change the class after initial
      * generation.
diff --git a/local.properties b/local.properties
new file mode 100644
index 00000000..f50a3a99
--- /dev/null
+++ b/local.properties
@@ -0,0 +1,11 @@
+## This file is automatically generated by Android Studio.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must *NOT* be checked into Version Control Systems,
+# as it contains information specific to your local configuration.
+#
+# Location of the SDK. This is only used by Gradle.
+# For customization when using a Version Control System, please read the
+# header note.
+#Thu Apr 10 16:59:04 MDT 2014
+sdk.dir=/Applications/Android Studio.app/sdk
