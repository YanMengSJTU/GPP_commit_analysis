diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/DaoMaster.java b/DaoExample/src/main/java/de/greenrobot/daoexample/DaoMaster.java
index 53627f13..43bc8ef5 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/DaoMaster.java
+++ b/DaoExample/src/main/java/de/greenrobot/daoexample/DaoMaster.java
@@ -9,6 +9,7 @@
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 
 import de.greenrobot.daoexample.NoteDao;
+import de.greenrobot.daoexample.DeviceDao;
 import de.greenrobot.daoexample.CustomerDao;
 import de.greenrobot.daoexample.OrderDao;
 
@@ -22,6 +23,7 @@
     /** Creates underlying database table using DAOs. */
     public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
         NoteDao.createTable(db, ifNotExists);
+        DeviceDao.createTable(db, ifNotExists);
         CustomerDao.createTable(db, ifNotExists);
         OrderDao.createTable(db, ifNotExists);
     }
@@ -29,6 +31,7 @@ public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
     /** Drops underlying database table using DAOs. */
     public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
         NoteDao.dropTable(db, ifExists);
+        DeviceDao.dropTable(db, ifExists);
         CustomerDao.dropTable(db, ifExists);
         OrderDao.dropTable(db, ifExists);
     }
@@ -63,6 +66,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
     public DaoMaster(SQLiteDatabase db) {
         super(db, SCHEMA_VERSION);
         registerDaoClass(NoteDao.class);
+        registerDaoClass(DeviceDao.class);
         registerDaoClass(CustomerDao.class);
         registerDaoClass(OrderDao.class);
     }
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/DaoSession.java b/DaoExample/src/main/java/de/greenrobot/daoexample/DaoSession.java
index e6d19f42..32f2a364 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/DaoSession.java
+++ b/DaoExample/src/main/java/de/greenrobot/daoexample/DaoSession.java
@@ -10,10 +10,12 @@
 import de.greenrobot.dao.internal.DaoConfig;
 
 import de.greenrobot.daoexample.Note;
+import de.greenrobot.daoexample.Device;
 import de.greenrobot.daoexample.Customer;
 import de.greenrobot.daoexample.Order;
 
 import de.greenrobot.daoexample.NoteDao;
+import de.greenrobot.daoexample.DeviceDao;
 import de.greenrobot.daoexample.CustomerDao;
 import de.greenrobot.daoexample.OrderDao;
 
@@ -27,10 +29,12 @@
 public class DaoSession extends AbstractDaoSession {
 
     private final DaoConfig noteDaoConfig;
+    private final DaoConfig deviceDaoConfig;
     private final DaoConfig customerDaoConfig;
     private final DaoConfig orderDaoConfig;
 
     private final NoteDao noteDao;
+    private final DeviceDao deviceDao;
     private final CustomerDao customerDao;
     private final OrderDao orderDao;
 
@@ -41,6 +45,9 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         noteDaoConfig = daoConfigMap.get(NoteDao.class).clone();
         noteDaoConfig.initIdentityScope(type);
 
+        deviceDaoConfig = daoConfigMap.get(DeviceDao.class).clone();
+        deviceDaoConfig.initIdentityScope(type);
+
         customerDaoConfig = daoConfigMap.get(CustomerDao.class).clone();
         customerDaoConfig.initIdentityScope(type);
 
@@ -48,16 +55,19 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         orderDaoConfig.initIdentityScope(type);
 
         noteDao = new NoteDao(noteDaoConfig, this);
+        deviceDao = new DeviceDao(deviceDaoConfig, this);
         customerDao = new CustomerDao(customerDaoConfig, this);
         orderDao = new OrderDao(orderDaoConfig, this);
 
         registerDao(Note.class, noteDao);
+        registerDao(Device.class, deviceDao);
         registerDao(Customer.class, customerDao);
         registerDao(Order.class, orderDao);
     }
     
     public void clear() {
         noteDaoConfig.getIdentityScope().clear();
+        deviceDaoConfig.getIdentityScope().clear();
         customerDaoConfig.getIdentityScope().clear();
         orderDaoConfig.getIdentityScope().clear();
     }
@@ -66,6 +76,10 @@ public NoteDao getNoteDao() {
         return noteDao;
     }
 
+    public DeviceDao getDeviceDao() {
+        return deviceDao;
+    }
+
     public CustomerDao getCustomerDao() {
         return customerDao;
     }
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/Device.java b/DaoExample/src/main/java/de/greenrobot/daoexample/Device.java
new file mode 100644
index 00000000..ad16d819
--- /dev/null
+++ b/DaoExample/src/main/java/de/greenrobot/daoexample/Device.java
@@ -0,0 +1,70 @@
+package de.greenrobot.daoexample;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+/**
+ * Entity mapped to table "DEVICE".
+ */
+public class Device {
+
+    private Long id;
+    private String type;
+    private String rawName;
+    private String nickName;
+    private String macString;
+
+    public Device() {
+    }
+
+    public Device(Long id) {
+        this.id = id;
+    }
+
+    public Device(Long id, String type, String rawName, String nickName, String macString) {
+        this.id = id;
+        this.type = type;
+        this.rawName = rawName;
+        this.nickName = nickName;
+        this.macString = macString;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public String getRawName() {
+        return rawName;
+    }
+
+    public void setRawName(String rawName) {
+        this.rawName = rawName;
+    }
+
+    public String getNickName() {
+        return nickName;
+    }
+
+    public void setNickName(String nickName) {
+        this.nickName = nickName;
+    }
+
+    public String getMacString() {
+        return macString;
+    }
+
+    public void setMacString(String macString) {
+        this.macString = macString;
+    }
+
+}
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/DeviceDao.java b/DaoExample/src/main/java/de/greenrobot/daoexample/DeviceDao.java
new file mode 100644
index 00000000..ebe7d1fc
--- /dev/null
+++ b/DaoExample/src/main/java/de/greenrobot/daoexample/DeviceDao.java
@@ -0,0 +1,142 @@
+package de.greenrobot.daoexample;
+
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.Property;
+import de.greenrobot.dao.internal.DaoConfig;
+
+import de.greenrobot.daoexample.Device;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/** 
+ * DAO for table "DEVICE".
+*/
+public class DeviceDao extends AbstractDao<Device, Long> {
+
+    public static final String TABLENAME = "DEVICE";
+
+    /**
+     * Properties of entity Device.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
+    public static class Properties {
+        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
+        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
+        public final static Property RawName = new Property(2, String.class, "rawName", false, "RAW_NAME");
+        public final static Property NickName = new Property(3, String.class, "nickName", false, "NICK_NAME");
+        public final static Property MacString = new Property(4, String.class, "macString", false, "MAC_STRING");
+    };
+
+
+    public DeviceDao(DaoConfig config) {
+        super(config);
+    }
+    
+    public DeviceDao(DaoConfig config, DaoSession daoSession) {
+        super(config, daoSession);
+    }
+
+    /** Creates the underlying database table. */
+    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+        String constraint = ifNotExists? "IF NOT EXISTS ": "";
+        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE\" (" + //
+                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
+                "\"TYPE\" TEXT," + // 1: type
+                "\"RAW_NAME\" TEXT," + // 2: rawName
+                "\"NICK_NAME\" TEXT," + // 3: nickName
+                "\"MAC_STRING\" TEXT);"); // 4: macString
+    }
+
+    /** Drops the underlying database table. */
+    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE\"";
+        db.execSQL(sql);
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected void bindValues(SQLiteStatement stmt, Device entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        String type = entity.getType();
+        if (type != null) {
+            stmt.bindString(2, type);
+        }
+ 
+        String rawName = entity.getRawName();
+        if (rawName != null) {
+            stmt.bindString(3, rawName);
+        }
+ 
+        String nickName = entity.getNickName();
+        if (nickName != null) {
+            stmt.bindString(4, nickName);
+        }
+ 
+        String macString = entity.getMacString();
+        if (macString != null) {
+            stmt.bindString(5, macString);
+        }
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long readKey(Cursor cursor, int offset) {
+        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    }    
+
+    /** @inheritdoc */
+    @Override
+    public Device readEntity(Cursor cursor, int offset) {
+        Device entity = new Device( //
+            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
+            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
+            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rawName
+            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickName
+            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // macString
+        );
+        return entity;
+    }
+     
+    /** @inheritdoc */
+    @Override
+    public void readEntity(Cursor cursor, Device entity, int offset) {
+        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
+        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
+        entity.setRawName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
+        entity.setNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
+        entity.setMacString(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
+     }
+    
+    /** @inheritdoc */
+    @Override
+    protected Long updateKeyAfterInsert(Device entity, long rowId) {
+        entity.setId(rowId);
+        return rowId;
+    }
+    
+    /** @inheritdoc */
+    @Override
+    public Long getKey(Device entity) {
+        if(entity != null) {
+            return entity.getId();
+        } else {
+            return null;
+        }
+    }
+
+    /** @inheritdoc */
+    @Override    
+    protected boolean isEntityUpdateable() {
+        return true;
+    }
+    
+}
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/NoteActivity.java b/DaoExample/src/main/java/de/greenrobot/daoexample/NoteActivity.java
index 48a3ba53..e3636c8a 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/NoteActivity.java
+++ b/DaoExample/src/main/java/de/greenrobot/daoexample/NoteActivity.java
@@ -17,6 +17,7 @@
 
 import java.text.DateFormat;
 import java.util.Date;
+import java.util.List;
 
 import android.app.ListActivity;
 import android.database.Cursor;
@@ -33,18 +34,27 @@
 import android.widget.SimpleCursorAdapter;
 import android.widget.TextView;
 import android.widget.TextView.OnEditorActionListener;
+import android.widget.Toast;
+
+import de.greenrobot.dao.query.Query;
 import de.greenrobot.daoexample.DaoMaster.DevOpenHelper;
 
 public class NoteActivity extends ListActivity {
 
     private SQLiteDatabase db;
 
+
     private EditText editText;
 
     private DaoMaster daoMaster;
     private DaoSession daoSession;
     private NoteDao noteDao;
 
+    /*private SQLiteDatabase dbDevice;
+    private DaoMaster daoMasterDevice;
+    private DaoSession daoSessionDevice;*/
+    private DeviceDao deviceDao;
+
     private Cursor cursor;
 
     @Override
@@ -58,6 +68,17 @@ public void onCreate(Bundle savedInstanceState) {
         daoMaster = new DaoMaster(db);
         daoSession = daoMaster.newSession();
         noteDao = daoSession.getNoteDao();
+        deviceDao = daoSession.getDeviceDao();
+
+
+
+
+
+        /*DevOpenHelper helperDevice = new DaoMaster.DevOpenHelper(this, "device-db", null);
+        dbDevice = helperDevice.getWritableDatabase();
+        daoMasterDevice = new DaoMaster(dbDevice);
+        daoSessionDevice = daoMasterDevice.newSession();
+        deviceDao = daoSessionDevice.getDeviceDao();*/
 
         String textColumn = NoteDao.Properties.Text.columnName;
         String orderBy = textColumn + " COLLATE LOCALIZED ASC";
@@ -107,7 +128,23 @@ public void afterTextChanged(Editable s) {
     }
 
     public void onMyButtonClick(View view) {
-        addNote();
+        int id = view.getId();
+        if (id == R.id.buttonAddDevice){
+            addDevice();
+        }
+        else if (id == R.id.buttonDelDevice){
+            deleteDevice();
+        }
+        else if (id == R.id.buttonQueryDevice){
+            queryDevice();
+        }
+        else if (id == R.id.buttonUpdateDevice){
+            updateDeviceDb();
+        }
+        else if(id == R.id.buttonAdd){
+            addNote();
+        }
+
     }
 
     private void addNote() {
@@ -123,6 +160,46 @@ private void addNote() {
         cursor.requery();
     }
 
+    Device mDevice = null;
+
+    private void addDevice(){
+        Device device = new Device();
+        mDevice = device;
+        device.setId(null);
+        device.setMacString("akdjgalghalkd");
+        device.setNickName("class five");
+        device.setRawName("raw name five");
+        device.setType("tv");
+
+        deviceDao.insert(device);
+    }
+
+    private void updateDeviceDb(){
+        if (mDevice != null){
+            mDevice.setNickName("nick name 2");
+            deviceDao.insertOrReplace(mDevice);
+        }
+    }
+
+    private void deleteDevice(){
+        if (mDevice != null){
+            deviceDao.delete(mDevice);
+        }
+    }
+
+    private void queryDevice(){
+        Query query = deviceDao.queryBuilder().where(DeviceDao.Properties.Type.eq("tv")).build();
+        List<Device> deviceList = query.list();
+
+        if (deviceList != null && deviceList.size() > 0){
+            Toast.makeText(this, "query result count=" + deviceList.size(), Toast.LENGTH_SHORT).show();
+        }
+        else{
+            Toast.makeText(this, "query result count = 0" , Toast.LENGTH_SHORT).show();
+        }
+    }
+
+
     @Override
     protected void onListItemClick(ListView l, View v, int position, long id) {
         noteDao.deleteByKey(id);
diff --git a/DaoExample/src/main/res/layout/main.xml b/DaoExample/src/main/res/layout/main.xml
index 81641d53..7ea16da3 100644
--- a/DaoExample/src/main/res/layout/main.xml
+++ b/DaoExample/src/main/res/layout/main.xml
@@ -9,6 +9,30 @@
 		android:layout_height="wrap_content"
 		android:id="@+id/linearLayout1"
 		android:orientation="horizontal">
+        <Button
+            android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:text="AddDev"
+            android:id="@+id/buttonAddDevice"
+            android:onClick="onMyButtonClick"></Button>
+        <Button
+            android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:text="DelDev"
+            android:id="@+id/buttonDelDevice"
+            android:onClick="onMyButtonClick"></Button>
+        <Button
+            android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:text="QueryDev"
+            android:id="@+id/buttonQueryDevice"
+            android:onClick="onMyButtonClick"></Button>
+        <Button
+            android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:text="UpdateDev"
+            android:id="@+id/buttonUpdateDevice"
+            android:onClick="onMyButtonClick"></Button>
 		<EditText
 			android:layout_height="wrap_content"
 			android:layout_weight="1"
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index 23d957a7..fa4ec575 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -34,9 +34,11 @@ public static void main(String[] args) throws Exception {
         Schema schema = new Schema(1000, "de.greenrobot.daoexample");
 
         addNote(schema);
+        addDevice(schema);
         addCustomerOrder(schema);
 
-        new DaoGenerator().generateAll(schema, "../DaoExample/src/main/java");
+//        new DaoGenerator().generateAll(schema, "../DaoExample/src/main/java");
+        new DaoGenerator().generateAll(schema, "E:\\ws\\mygit\\greenDAO\\DaoExample\\src\\main\\java");
     }
 
     private static void addNote(Schema schema) {
@@ -47,6 +49,15 @@ private static void addNote(Schema schema) {
         note.addDateProperty("date");
     }
 
+    private static  void addDevice(Schema schema){
+        Entity device = schema.addEntity("Device");
+        device.addIdProperty();
+        device.addStringProperty("type");
+        device.addStringProperty("rawName");
+        device.addStringProperty("nickName");
+        device.addStringProperty("macString");
+    }
+
     private static void addCustomerOrder(Schema schema) {
         Entity customer = schema.addEntity("Customer");
         customer.addIdProperty();
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index bb25fe9a..700b3f51 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -58,7 +58,9 @@ public DaoGenerator() throws IOException {
         patternKeepMethods = compilePattern("METHODS");
 
         Configuration config = new Configuration(Configuration.VERSION_2_3_23);
-        config.setClassForTemplateLoading(this.getClass(), "/");
+//        config.setClassForTemplateLoading(this.getClass(), "/");
+
+        config.setDirectoryForTemplateLoading(new File("E:\\ws\\mygit\\greenDAO\\DaoGenerator\\src-template"));
 
         templateDao = config.getTemplate("dao.ftl");
         templateDaoMaster = config.getTemplate("dao-master.ftl");
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index a198531e..76fd2151 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.4-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-all.zip
