diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index c29d575c..bbaca500 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -33,25 +33,39 @@
     public static void main(String[] args) throws Exception {
         Schema schema = new Schema(1, "rezzza.model.greendao");
      // heritage level= 0
-        addNote(schema);
-        addCustomerOrder(schema);
-        addTimezone(schema);
-        addHotelAddress(schema);
-        addHotelDescription(schema);
-        addHotelPicture(schema);
+        Entity timezone = addTimezone(schema);
+        Entity HotelAddress = addHotelAddress(schema);
+        Entity HotelDescription = addHotelDescription(schema);
+        Entity HotelPicture = addHotelPicture(schema);
+        Entity PictureCollection = addPictureCollection(schema);
      // heritage level= 1
-        addCity(schema);
-        addHotel(schema);
+        Entity City = addCity(schema);
+        Entity Hotel = addHotel(schema);
      // heritage level= 2
-        addDeal(schema);
+        Entity Deal = addDeal(schema);
+       
+        //relation city et timezone
+        Property timezoneId = City.addLongProperty("timezoneId").getProperty();
+        City.addToOne(timezone, timezoneId, "Timezone");
+        //relation Deal et Hotel
+        Property hotelId = Deal.addLongProperty("hotelId").getProperty();
+        Deal.addToOne(Hotel, hotelId, "Hotel");
+        //relation Hotel et HotelDescription, HotelAdress, HotelPicture
+        Property hotelAddress = Hotel.addLongProperty("hotelAddressId").getProperty();
+        Property hotelDescription = Hotel.addLongProperty("hotelDescriptionId").getProperty();
+        Property hotelPicture = HotelPicture.addLongProperty("hotelId").getProperty();
+		Property positionPicture = HotelPicture.addStringProperty("position").getProperty();
+        Hotel.addToOne(HotelAddress, hotelAddress, "HotelAddress");
+        Hotel.addToOne(HotelDescription, hotelDescription, "HotelDescription");
+        Hotel.addToMany(HotelPicture, hotelPicture, "HotelPicture").orderAsc(positionPicture);
+        //relation HotelPicture et pictureCollection
+        Property pictureCollectionId = HotelPicture.addLongProperty("pictureCollectionId").getProperty();
+        HotelPicture.addToOne(PictureCollection, pictureCollectionId, "picture_collection");
         
-        
-        
-
         new DaoGenerator().generateAll(schema, "../../../../src");
     }
 
-    private static Entity addDeal(Schema schema) {
+	private static Entity addDeal(Schema schema) {
 		// 17 - 1 relation Deal-Hotel 1:n,
     	Entity deal = schema.addEntity("Deal");
 		deal.addIdProperty();
@@ -112,11 +126,24 @@ private static Entity addHotelPicture(Schema schema) {
 		// 4 Property +
 		Entity hotelPicture = schema.addEntity("HotelPicture");
 		hotelPicture.addIdProperty();
-		hotelPicture.addStringProperty("position");
+		/*
+		 * used above to order asc depending on the position
+		 * hotelPicture.addStringProperty("position"); 
+		*/
 		hotelPicture.addStringProperty("caption");
 		hotelPicture.addStringProperty("base_url");
 		return hotelPicture; 
 	}
+	
+	private static Entity addPictureCollection(Schema schema) {
+		Entity pictureCollection = schema.addEntity("PictureCollection");
+		pictureCollection.addIdProperty();
+		pictureCollection.addStringProperty("medium");
+		pictureCollection.addStringProperty("small");
+		pictureCollection.addStringProperty("thumbnail");
+		pictureCollection.addStringProperty("square");
+		return pictureCollection; 
+	}
 
 	private static Entity addHotelDescription(Schema schema) {
 		// 6 Property + one to one relation with Hotel
@@ -157,21 +184,21 @@ private static Entity addTimezone(Schema schema) {
 		return timezone;
 	}
 
-    private static void addCustomerOrder(Schema schema) {
-        Entity customer = schema.addEntity("Customer");
-        customer.addIdProperty();
-        customer.addStringProperty("name").notNull();
-
-        Entity order = schema.addEntity("Order");
-        order.setTableName("ORDERS"); // "ORDER" is a reserved keyword
-        order.addIdProperty();
-        Property orderDate = order.addDateProperty("date").getProperty();
-        Property customerId = order.addLongProperty("customerId").notNull().getProperty();
-        order.addToOne(customer, customerId);
-
-        ToMany customerToOrders = customer.addToMany(order, customerId);
-        customerToOrders.setName("orders");
-        customerToOrders.orderAsc(orderDate);
-    }
+//    private static void addCustomerOrder(Schema schema) {
+//        Entity customer = schema.addEntity("Customer");
+//        customer.addIdProperty();
+//        customer.addStringProperty("name").notNull();
+//
+//        Entity order = schema.addEntity("Order");
+//        order.setTableName("ORDERS"); // "ORDER" is a reserved keyword
+//        order.addIdProperty();
+//        Property orderDate = order.addDateProperty("date").getProperty();
+//        Property customerId = order.addLongProperty("customerId").notNull().getProperty();
+//        order.addToOne(customer, customerId);
+//
+//        ToMany customerToOrders = customer.addToMany(order, customerId);
+//        customerToOrders.setName("orders");
+//        customerToOrders.orderAsc(orderDate);
+//    }
 
 }
