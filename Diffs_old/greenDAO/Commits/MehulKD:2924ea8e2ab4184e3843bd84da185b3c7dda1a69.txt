diff --git a/DaoExample/src-gen/.DS_Store b/DaoExample/src-gen/.DS_Store
new file mode 100644
index 00000000..5008ddfc
Binary files /dev/null and b/DaoExample/src-gen/.DS_Store differ
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java b/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
index e493d0f9..8f0f5a85 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
@@ -1,102 +1,19 @@
 package de.greenrobot.daoexample;
 
-import java.util.List;
-import de.greenrobot.daoexample.DaoSession;
-import de.greenrobot.dao.DaoException;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 /**
  * Entity mapped to table CUSTOMER.
  */
-public class Customer {
-
-    private Long id;
-    /** Not-null value. */
-    private String name;
-
-    /** Used to resolve relations */
-    private transient DaoSession daoSession;
-
-    /** Used for active entity operations. */
-    private transient CustomerDao myDao;
-
-    private List<Order> orders;
-
+public class Customer extends CustomerBase  {
     public Customer() {
     }
 
     public Customer(Long id) {
-        this.id = id;
+        super(id);
     }
 
     public Customer(Long id, String name) {
-        this.id = id;
-        this.name = name;
-    }
-
-    /** called by internal mechanisms, do not call yourself. */
-    public void __setDaoSession(DaoSession daoSession) {
-        this.daoSession = daoSession;
-        myDao = daoSession != null ? daoSession.getCustomerDao() : null;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    /** Not-null value. */
-    public String getName() {
-        return name;
-    }
-
-    /** Not-null value; ensure this value is available before it is saved to the database. */
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
-    public synchronized List<Order> getOrders() {
-        if (orders == null) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
-            OrderDao targetDao = daoSession.getOrderDao();
-            orders = targetDao._queryCustomer_Orders(id);
-        }
-        return orders;
-    }
-
-    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
-    public synchronized void resetOrders() {
-        orders = null;
-    }
-
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
-    public void delete() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.delete(this);
-    }
-
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
-    public void update() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.update(this);
-    }
-
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
-    public void refresh() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.refresh(this);
+        super(id, name);
     }
 
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java
new file mode 100644
index 00000000..aa593856
--- /dev/null
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java
@@ -0,0 +1,102 @@
+package de.greenrobot.daoexample;
+
+import java.util.List;
+import de.greenrobot.daoexample.DaoSession;
+import de.greenrobot.dao.DaoException;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+/**
+ * Entity mapped to table CUSTOMER.
+ */
+abstract public class CustomerBase {
+
+    protected Long id;
+    /** Not-null value. */
+    protected String name;
+
+    /** Used to resolve relations */
+    protected transient DaoSession daoSession;
+
+    /** Used for active entity operations. */
+    protected transient CustomerDao myDao;
+
+    protected List<Order> orders;
+
+    public CustomerBase() {
+    }
+
+    public CustomerBase(Long id) {
+        this.id = id;
+    }
+
+    public CustomerBase(Long id, String name) {
+        this.id = id;
+        this.name = name;
+    }
+
+    /** called by internal mechanisms, do not call yourself. */
+    public void __setDaoSession(DaoSession daoSession) {
+        this.daoSession = daoSession;
+        myDao = daoSession != null ? daoSession.getCustomerDao() : null;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    /** Not-null value. */
+    public String getName() {
+        return name;
+    }
+
+    /** Not-null value; ensure this value is available before it is saved to the database. */
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
+    public synchronized List<Order> getOrders() {
+        if (orders == null) {
+            if (daoSession == null) {
+                throw new DaoException("Entity is detached from DAO context");
+            }
+            OrderDao targetDao = daoSession.getOrderDao();
+            orders = targetDao._queryCustomer_Orders(id);
+        }
+        return orders;
+    }
+
+    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
+    public synchronized void resetOrders() {
+        orders = null;
+    }
+
+    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    public void delete() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.delete(this);
+    }
+
+    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    public void update() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.update(this);
+    }
+
+    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    public void refresh() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.refresh(this);
+    }
+
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
index 627b4d42..27868c4f 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
@@ -1,63 +1,19 @@
 package de.greenrobot.daoexample;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 /**
  * Entity mapped to table NOTE.
  */
-public class Note {
-
-    private Long id;
-    /** Not-null value. */
-    private String text;
-    private String comment;
-    private java.util.Date date;
-
+public class Note extends NoteBase  {
     public Note() {
     }
 
     public Note(Long id) {
-        this.id = id;
+        super(id);
     }
 
     public Note(Long id, String text, String comment, java.util.Date date) {
-        this.id = id;
-        this.text = text;
-        this.comment = comment;
-        this.date = date;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    /** Not-null value. */
-    public String getText() {
-        return text;
-    }
-
-    /** Not-null value; ensure this value is available before it is saved to the database. */
-    public void setText(String text) {
-        this.text = text;
-    }
-
-    public String getComment() {
-        return comment;
-    }
-
-    public void setComment(String comment) {
-        this.comment = comment;
-    }
-
-    public java.util.Date getDate() {
-        return date;
-    }
-
-    public void setDate(java.util.Date date) {
-        this.date = date;
+        super(id, text, comment, date);
     }
 
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
new file mode 100644
index 00000000..590d7138
--- /dev/null
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
@@ -0,0 +1,63 @@
+package de.greenrobot.daoexample;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+/**
+ * Entity mapped to table NOTE.
+ */
+abstract public class NoteBase {
+
+    protected Long id;
+    /** Not-null value. */
+    protected String text;
+    protected String comment;
+    protected java.util.Date date;
+
+    public NoteBase() {
+    }
+
+    public NoteBase(Long id) {
+        this.id = id;
+    }
+
+    public NoteBase(Long id, String text, String comment, java.util.Date date) {
+        this.id = id;
+        this.text = text;
+        this.comment = comment;
+        this.date = date;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    /** Not-null value. */
+    public String getText() {
+        return text;
+    }
+
+    /** Not-null value; ensure this value is available before it is saved to the database. */
+    public void setText(String text) {
+        this.text = text;
+    }
+
+    public String getComment() {
+        return comment;
+    }
+
+    public void setComment(String comment) {
+        this.comment = comment;
+    }
+
+    public java.util.Date getDate() {
+        return date;
+    }
+
+    public void setDate(java.util.Date date) {
+        this.date = date;
+    }
+
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
index 345eb7fc..44d49740 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
@@ -1,115 +1,19 @@
 package de.greenrobot.daoexample;
 
-import de.greenrobot.daoexample.DaoSession;
-import de.greenrobot.dao.DaoException;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 /**
  * Entity mapped to table ORDERS.
  */
-public class Order {
-
-    private Long id;
-    private java.util.Date date;
-    private long customerId;
-
-    /** Used to resolve relations */
-    private transient DaoSession daoSession;
-
-    /** Used for active entity operations. */
-    private transient OrderDao myDao;
-
-    private Customer customer;
-    private Long customer__resolvedKey;
-
-
+public class Order extends OrderBase  {
     public Order() {
     }
 
     public Order(Long id) {
-        this.id = id;
+        super(id);
     }
 
     public Order(Long id, java.util.Date date, long customerId) {
-        this.id = id;
-        this.date = date;
-        this.customerId = customerId;
-    }
-
-    /** called by internal mechanisms, do not call yourself. */
-    public void __setDaoSession(DaoSession daoSession) {
-        this.daoSession = daoSession;
-        myDao = daoSession != null ? daoSession.getOrderDao() : null;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    public java.util.Date getDate() {
-        return date;
-    }
-
-    public void setDate(java.util.Date date) {
-        this.date = date;
-    }
-
-    public long getCustomerId() {
-        return customerId;
-    }
-
-    public void setCustomerId(long customerId) {
-        this.customerId = customerId;
-    }
-
-    /** To-one relationship, resolved on first access. */
-    public Customer getCustomer() {
-        if (customer__resolvedKey == null || !customer__resolvedKey.equals(customerId)) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
-            CustomerDao targetDao = daoSession.getCustomerDao();
-            customer = targetDao.load(customerId);
-            customer__resolvedKey = customerId;
-        }
-        return customer;
-    }
-
-    public void setCustomer(Customer customer) {
-        if (customer == null) {
-            throw new DaoException("To-one property 'customerId' has not-null constraint; cannot set to-one to null");
-        }
-        this.customer = customer;
-        customerId = customer.getId();
-        customer__resolvedKey = customerId;
-    }
-
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
-    public void delete() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.delete(this);
-    }
-
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
-    public void update() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.update(this);
-    }
-
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
-    public void refresh() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.refresh(this);
+        super(id, date, customerId);
     }
 
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java b/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java
new file mode 100644
index 00000000..1c23467d
--- /dev/null
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java
@@ -0,0 +1,115 @@
+package de.greenrobot.daoexample;
+
+import de.greenrobot.daoexample.DaoSession;
+import de.greenrobot.dao.DaoException;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+/**
+ * Entity mapped to table ORDERS.
+ */
+abstract public class OrderBase {
+
+    protected Long id;
+    protected java.util.Date date;
+    protected long customerId;
+
+    /** Used to resolve relations */
+    protected transient DaoSession daoSession;
+
+    /** Used for active entity operations. */
+    protected transient OrderDao myDao;
+
+    protected Customer customer;
+    protected Long customer__resolvedKey;
+
+
+    public OrderBase() {
+    }
+
+    public OrderBase(Long id) {
+        this.id = id;
+    }
+
+    public OrderBase(Long id, java.util.Date date, long customerId) {
+        this.id = id;
+        this.date = date;
+        this.customerId = customerId;
+    }
+
+    /** called by internal mechanisms, do not call yourself. */
+    public void __setDaoSession(DaoSession daoSession) {
+        this.daoSession = daoSession;
+        myDao = daoSession != null ? daoSession.getOrderDao() : null;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public java.util.Date getDate() {
+        return date;
+    }
+
+    public void setDate(java.util.Date date) {
+        this.date = date;
+    }
+
+    public long getCustomerId() {
+        return customerId;
+    }
+
+    public void setCustomerId(long customerId) {
+        this.customerId = customerId;
+    }
+
+    /** To-one relationship, resolved on first access. */
+    public Customer getCustomer() {
+        if (customer__resolvedKey == null || !customer__resolvedKey.equals(customerId)) {
+            if (daoSession == null) {
+                throw new DaoException("Entity is detached from DAO context");
+            }
+            CustomerDao targetDao = daoSession.getCustomerDao();
+            customer = targetDao.load(customerId);
+            customer__resolvedKey = customerId;
+        }
+        return customer;
+    }
+
+    public void setCustomer(Customer customer) {
+        if (customer == null) {
+            throw new DaoException("To-one property 'customerId' has not-null constraint; cannot set to-one to null");
+        }
+        this.customer = customer;
+        customerId = customer.getId();
+        customer__resolvedKey = customerId;
+    }
+
+    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    public void delete() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.delete(this);
+    }
+
+    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    public void update() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.update(this);
+    }
+
+    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    public void refresh() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.refresh(this);
+    }
+
+}
