diff --git a/.gitignore b/.gitignore
index 26f642f9..81509ead 100644
--- a/.gitignore
+++ b/.gitignore
@@ -72,4 +72,4 @@ crashlytics-build.properties
 
 
 Thumbs.db
-
+idea.txt
diff --git a/DaoCore/build.gradle b/DaoCore/build.gradle
index da75535c..49c5ae7d 100644
--- a/DaoCore/build.gradle
+++ b/DaoCore/build.gradle
@@ -6,7 +6,7 @@ android {
 
     defaultConfig {
         applicationId "de.greenrobot.dao"
-        minSdkVersion 8
+        minSdkVersion 15
         targetSdkVersion 21
         versionCode 1
         versionName "1.0"
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java
index 00f32919..01d7442e 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java
@@ -23,10 +23,6 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 
-import de.greenrobot.dao.AbstractDaoSession;
-import de.greenrobot.dao.DaoException;
-import de.greenrobot.dao.DaoLog;
-
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -92,7 +88,7 @@ public AbstractDaoSession getSession() {
         return session;
     }
 
-    TableStatements getStatements() {
+    public TableStatements getStatements() {
         return config.statements;
     }
 
@@ -260,6 +256,40 @@ public void insertOrReplaceInTx(T... entities) {
         insertOrReplaceInTx(Arrays.asList(entities), isEntityUpdateable());
     }
 
+    /**
+     * Inserts or ignores the given entities in the database using a transaction. The given entities will become
+     * tracked if the PK is set.
+     *
+     * @param entities
+     * The entities to insert.
+     * @param setPrimaryKey
+     * if true, the PKs of the given will be set after the insert; pass false to improve performance.
+     */
+    public void insertOrIgnoreInTx(Iterable<T> entities, boolean setPrimaryKey) {
+        SQLiteStatement stmt = statements.getInsertOrIgnoreStatement();
+        executeInsertInTx(stmt, entities, setPrimaryKey);
+    }
+
+    /**
+     * Inserts or ignores the given entities in the database using a transaction.
+     *
+     * @param entities
+     * The entities to insert.
+     */
+    public void insertOrIgnoreInTx(Iterable<T> entities) {
+        insertOrIgnoreInTx(entities, isEntityUpdateable());
+    }
+
+    /**
+     * Inserts or ignores the given entities in the database using a transaction.
+     *
+     * @param entities
+     * The entities to insert.
+     */
+    public void insertOrIgnoreInTx(T... entities) {
+        insertOrIgnoreInTx(Arrays.asList(entities), isEntityUpdateable());
+    }
+
     private void executeInsertInTx(SQLiteStatement stmt, Iterable<T> entities, boolean setPrimaryKey) {
         db.beginTransaction();
         try {
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/DbUtils.java b/DaoCore/src/main/java/de/greenrobot/dao/DbUtils.java
index dd72001e..caa116e4 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/DbUtils.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/DbUtils.java
@@ -26,6 +26,7 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 
+
 /** Database utils, for example to execute SQL scripts */
 // TODO add unit tests
 public class DbUtils {
@@ -115,13 +116,6 @@ public static int copyAllBytes(InputStream in, OutputStream out) throws IOExcept
     }
 
     public static byte[] readAsset(Context context, String filename) throws IOException {
-//        String s ="";
-//        for(String str : context.getResources().getAssets().list(".")){
-//            Log.e("my test",str);
-//            s+=str+" / ";
-//        }
-//        throw new IOException(s);
-
         InputStream in = context.getResources().getAssets().open(filename);
         try {
             return readAllBytes(in);
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/internal/FastCursor.java b/DaoCore/src/main/java/de/greenrobot/dao/internal/FastCursor.java
index d43e97f6..a511d0fb 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/internal/FastCursor.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/internal/FastCursor.java
@@ -184,7 +184,7 @@ public double getDouble(int columnIndex) {
 
     @Override
     public boolean isNull(int columnIndex) {
-        return window.isNull(position, columnIndex);
+        return window.getType(position, columnIndex) == FIELD_TYPE_NULL;
     }
 
     @Override
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java b/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java
index 9414f1f7..88f1c6b8 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java
@@ -26,6 +26,7 @@
     private final String[] pkColumns;
 
     private SQLiteStatement insertStatement;
+    private SQLiteStatement insertOrIgnoreStatement;
     private SQLiteStatement insertOrReplaceStatement;
     private SQLiteStatement updateStatement;
     private SQLiteStatement deleteStatement;
@@ -34,6 +35,7 @@
     private volatile String selectByKey;
     private volatile String selectByRowId;
     private volatile String selectKeys;
+    private volatile String selectPk;
 
     public TableStatements(SQLiteDatabase db, String tablename, String[] allColumns, String[] pkColumns) {
         this.db = db;
@@ -50,6 +52,14 @@ public SQLiteStatement getInsertStatement() {
         return insertStatement;
     }
 
+    public SQLiteStatement getInsertOrIgnoreStatement() {
+        if (insertOrIgnoreStatement == null) {
+            String sql = SqlUtils.createSqlInsert("INSERT OR IGNORE INTO ", tablename, allColumns);
+            insertOrIgnoreStatement = db.compileStatement(sql);
+        }
+        return insertOrIgnoreStatement;
+    }
+
     public SQLiteStatement getInsertOrReplaceStatement() {
         if (insertOrReplaceStatement == null) {
             String sql = SqlUtils.createSqlInsert("INSERT OR REPLACE INTO ", tablename, allColumns);
@@ -108,4 +118,11 @@ public String getSelectByRowId() {
         return selectByRowId;
     }
 
+    /** creates a select which only selects PK. */
+    public String getSelectPk() {
+        if(selectPk == null) {
+            selectPk = SqlUtils.createSqlSelect(tablename, "T", pkColumns);
+        }
+        return selectPk;
+    }
 }
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQuery.java b/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQuery.java
index 2569011f..fe14146f 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQuery.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQuery.java
@@ -61,6 +61,14 @@ protected AbstractQuery(AbstractDao<T, ?> dao, String sql, String[] parameters)
     // // TODO implement compile
     // }
 
+    public String getSql() {
+        return sql;
+    }
+
+    public String[] getParameters() {
+        return parameters;
+    }
+
     /**
      * Sets the parameter (0 based) using the position in which it was added during building the query.
      */
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/LazyList.java b/DaoCore/src/main/java/de/greenrobot/dao/query/LazyList.java
index 9bf12337..c67dd7be 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/LazyList.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/query/LazyList.java
@@ -15,6 +15,8 @@
  */
 package de.greenrobot.dao.query;
 
+import android.database.Cursor;
+
 import java.io.Closeable;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -24,7 +26,6 @@
 import java.util.NoSuchElementException;
 import java.util.concurrent.locks.ReentrantLock;
 
-import android.database.Cursor;
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.InternalQueryDaoAccess;
 
@@ -334,7 +335,7 @@ public int size() {
     public List<E> subList(int start, int end) {
         checkCached();
         for (int i = start; i < end; i++) {
-            entities.get(i);
+            get(i);
         }
         return entities.subList(start, end);
     }
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/QueryBuilder.java b/DaoCore/src/main/java/de/greenrobot/dao/query/QueryBuilder.java
index 6f0c2547..4232274a 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/QueryBuilder.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/query/QueryBuilder.java
@@ -256,11 +256,28 @@ protected void checkProperty(Property property) {
      * each execution.
      */
     public Query<T> build() {
+        return build(false);
+    }
+
+    /**
+     * Builds a reusable query object (Query objects can be executed more efficiently than creating a QueryBuilder for
+     * each execution.
+     */
+    public Query<T> build(boolean onlyPk) {
         String select;
         if (joinBuilder == null || joinBuilder.length() == 0) {
-            select = InternalQueryDaoAccess.getStatements(dao).getSelectAll();
+//            select = InternalQueryDaoAccess.getStatements(dao).getSelectAll();
+//            select = onlyPk
+//                    ? dao.getStatements().getSelectPk()
+//                    : dao.getStatements().getSelectAll();
+            select = onlyPk
+                    ? InternalQueryDaoAccess.getStatements(dao).getSelectPk()
+                    : InternalQueryDaoAccess.getStatements(dao).getSelectAll();
         } else {
-            select = SqlUtils.createSqlSelect(dao.getTablename(), tablePrefix, dao.getAllColumns());
+//            select = SqlUtils.createSqlSelect(dao.getTablename(), tablePrefix, dao.getAllColumns());
+            select = onlyPk
+                    ? SqlUtils.createSqlSelect(dao.getTablename(), tablePrefix, dao.getPkColumns())
+                    : SqlUtils.createSqlSelect(dao.getTablename(), tablePrefix, dao.getAllColumns());
         }
         StringBuilder builder = new StringBuilder(select);
 
@@ -304,6 +321,39 @@ protected void checkProperty(Property property) {
      * QueryBuilder for each execution.
      */
     public DeleteQuery<T> buildDelete() {
+        if(limit != null || (orderBuilder != null && orderBuilder.length() > 0)) {
+            return buildDeleteWithLimitAndOrder();
+        }
+        return buildSimpleDelete();
+    }
+
+    /**
+     * Android does not come with SQLITE_ENABLE_UPDATE_DELETE_LIMIT option enabled which prevents us from writing
+     * delete queries with limit and order. This method overcomes that limitation by re-writing the query as an IN
+     * statement
+     *
+     * */
+    protected DeleteQuery<T> buildDeleteWithLimitAndOrder() {
+        if(dao.getPkColumns().length != 1) {
+            throw new UnsupportedOperationException("Delete with Limit and Order is only supported "
+                    + "for tables with 1 PK column");
+        }
+        Query<T> selectQuery = build(true);
+        String baseSql = SqlUtils.createSqlDelete(dao.getTablename(), null);
+        StringBuilder builder = new StringBuilder(baseSql);
+        builder.append(" WHERE ").append(dao.getPkColumns()[0])
+                .append(" IN( ").append(selectQuery.getSql()).append(" )");
+        String sql = builder.toString();
+        if (LOG_SQL) {
+            DaoLog.d("Built SQL for delete query: " + sql);
+        }
+        if (LOG_VALUES) {
+            DaoLog.d("Values for delete query: " + values);
+        }
+        return DeleteQuery.create(dao, sql, values.toArray());
+    }
+
+    protected DeleteQuery<T> buildSimpleDelete() {
         String tablename = dao.getTablename();
         String baseSql = SqlUtils.createSqlDelete(tablename, null);
         StringBuilder builder = new StringBuilder(baseSql);
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/test/DbTest.java b/DaoCore/src/main/java/de/greenrobot/dao/test/DbTest.java
index 8587ee4b..bc1b749f 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/test/DbTest.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/test/DbTest.java
@@ -20,10 +20,11 @@
 import android.app.Instrumentation;
 import android.database.sqlite.SQLiteDatabase;
 import android.test.AndroidTestCase;
-import de.greenrobot.dao.DbUtils;
 
 import java.util.Random;
 
+import de.greenrobot.dao.DbUtils;
+
 /**
  * Base class for database related testing, which prepares an in-memory or an file-based DB (using the test {@link
  * android.content.Context}). Also, offers some convenience methods to create new {@link android.app.Application} objects similar to
@@ -61,6 +62,7 @@ protected void setUp() throws Exception {
     }
 
     /** Returns a prepared application with the onCreate method already called. */
+    @SuppressWarnings("unchecked")
     public <T extends Application> T createApplication(Class<T> appClass) {
         assertNull("Application already created", application);
         T app;
@@ -82,6 +84,7 @@ public void terminateApplication() {
     }
 
     /** Gets the previously created application. */
+    @SuppressWarnings("unchecked")
     public <T extends Application> T getApplication() {
         assertNotNull("Application not yet created", application);
         return (T) application;
diff --git a/DaoExample/build.gradle b/DaoExample/build.gradle
index 1f37ae7d..853d7d57 100644
--- a/DaoExample/build.gradle
+++ b/DaoExample/build.gradle
@@ -6,7 +6,7 @@ android {
 
     defaultConfig {
         applicationId "de.greenrobot.daoexample"
-        minSdkVersion 8
+        minSdkVersion 15
         targetSdkVersion 21
         versionCode 1
         versionName "1.0"
@@ -27,7 +27,7 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    compile 'com.android.support:appcompat-v7:21.0.0'
+//    compile 'com.android.support:appcompat-v7:21.0.0'
     compile project(":DaoCore")
 }
 
diff --git a/DaoExample/libs/greendao-1.3.0-beta-1.jar b/DaoExample/libs/greendao-1.3.0-beta-1.jar
deleted file mode 100644
index 473993d4..00000000
Binary files a/DaoExample/libs/greendao-1.3.0-beta-1.jar and /dev/null differ
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/NoteActivity.java b/DaoExample/src/main/java/de/greenrobot/daoexample/NoteActivity.java
index 27b063f0..fb326f49 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/NoteActivity.java
+++ b/DaoExample/src/main/java/de/greenrobot/daoexample/NoteActivity.java
@@ -48,7 +48,10 @@
 
     private Cursor cursor;
 
+    String orderBy;
+
     @Override
+    @SuppressWarnings("deprecation")
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
@@ -61,11 +64,12 @@ public void onCreate(Bundle savedInstanceState) {
         noteDao = daoSession.getNoteDao();
 
         String textColumn = NoteDao.Properties.Text.columnName;
-        String orderBy = textColumn + " COLLATE LOCALIZED ASC";
+        orderBy = textColumn + " COLLATE LOCALIZED ASC";
         cursor = db.query(noteDao.getTablename(), noteDao.getAllColumns(), null, null, null, null, orderBy);
         String[] from = { textColumn, NoteDao.Properties.Comment.columnName };
         int[] to = { android.R.id.text1, android.R.id.text2 };
 
+
         SimpleCursorAdapter adapter = new SimpleCursorAdapter(this, android.R.layout.simple_list_item_2, cursor, from,
                 to);
         setListAdapter(adapter);
@@ -121,14 +125,16 @@ private void addNote() {
         noteDao.insert(note);
         Log.d("DaoExample", "Inserted new note, ID: " + note.getId());
 
-        cursor.requery();
+//        cursor.requery();
+        cursor = db.query(noteDao.getTablename(), noteDao.getAllColumns(), null, null, null, null, orderBy);
     }
 
     @Override
     protected void onListItemClick(ListView l, View v, int position, long id) {
         noteDao.deleteByKey(id);
         Log.d("DaoExample", "Deleted note, ID: " + id);
-        cursor.requery();
+        cursor = db.query(noteDao.getTablename(), noteDao.getAllColumns(), null, null, null, null, orderBy);
+//        cursor.requery();
     }
 
 }
\ No newline at end of file
diff --git a/DaoExampleGenerator/build.gradle b/DaoExampleGenerator/build.gradle
index 020bb610..13cf01c7 100644
--- a/DaoExampleGenerator/build.gradle
+++ b/DaoExampleGenerator/build.gradle
@@ -6,7 +6,7 @@ dependencies {
     compile project(':DaoGenerator')
 }
 
-mainClassName = "de.greenrobot.daogenerator.gentest.ExampleDaoGenerator"
+//mainClassName = "de.greenrobot.daogenerator.gentest.ExampleDaoGenerator"
 
 //outputDir = "../DaoTest/src/test/java-gen"
 outputDir = "../DaoExample/src/main/java-gen"
diff --git a/DaoGenerator/build.gradle b/DaoGenerator/build.gradle
index 09e495ce..3864519c 100644
--- a/DaoGenerator/build.gradle
+++ b/DaoGenerator/build.gradle
@@ -1,4 +1,8 @@
 apply plugin: 'java'
+//apply plugin: 'maven'
+//apply plugin: 'signing'
+
+version = '1.3.1'
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
@@ -12,6 +16,115 @@ sourceSets {
     }
 }
 
+test {
+    doFirst {
+        mkdir 'test-out'
+    }
+    doLast{
+        delete 'test-out'
+    }
+}
+
+
+javadoc {
+    title = "greenDAO Generator ${version} API"
+    // Unfinished APIs:
+    excludes = ['de/greenrobot/daogenerator/Query*']
+    options.bottom = 'Available under the GPLv3 - <i>Copyright &#169; 2011-2013 <a href="http://greenrobot.de/">greenrobot.de</a>. All Rights Reserved.</i>'
+}
+
+
+// Auto deploy on Sonatype
+//http://jedicoder.blogspot.fr/2011/11/automated-gradle-project-deployment-to.html
+
+//task javadocJar(type: Jar, dependsOn: javadoc) {
+//    classifier = 'javadoc'
+//    from 'build/docs/javadoc'
+//}
+//
+//task sourcesJar(type: Jar) {
+//    from sourceSets.main.allSource
+//    classifier = 'sources'
+//}
+//
+//artifacts {
+//    archives jar
+//    archives javadocJar
+//    archives sourcesJar
+//}
+//
+//signing {
+//    if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&
+//            project.hasProperty('signing.secretKeyRingFile')) {
+//        sign configurations.archives
+//    } else {
+//        println "Signing information missing/incomplete for ${project.name}"
+//    }
+//}
+//
+//uploadArchives {
+//    repositories {
+//        mavenDeployer {
+//            if(project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername')
+//                    && project.hasProperty('preferedPassword')) {
+//                configuration = configurations.deployerJars
+//                repository(url: preferedRepo) {
+//                    authentication(userName: preferedUsername, password: preferedPassword)
+//                }
+//            } else if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
+//                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+//                repository(url: sonatypeRepositoryUrl) {
+//                    authentication(userName: sonatypeUsername, password: sonatypePassword)
+//                }
+//            } else {
+//                println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}"
+//            }
+//
+//            pom.project {
+//                name 'greenDAO Generator'
+//                packaging 'jar'
+//                description 'Code generator for greenDAO, the light and fast ORM for Android'
+//                url 'http://greendao-orm.com'
+//
+//                scm {
+//                    url 'https://github.com/jackuse/greenDAO'
+//                    connection 'scm:git@github.com:jackuse/greenDAO.git'
+//                    developerConnection 'scm:git@github.com:jackuse/greenDAO.git'
+//                }
+//
+//                licenses {
+//                    license {
+//                        name 'GNU General Public License, Version 3'
+//                        url 'http://www.gnu.org/licenses/gpl.txt'
+//                        distribution 'repo'
+//                    }
+//                }
+//
+//                developers {
+//                    developer {
+//                        id 'greenrobot'
+//                        name 'greenrobot'
+//                    }
+////                    developer {
+////                        id ''
+////                        name ''
+////                    }
+//                }
+//
+//                issueManagement {
+//                    system 'GitHub Issues'
+//                    url 'https://github.com/jackuse/greenDAO/issues'
+//                }
+//
+//                organization {
+//                    name 'greenrobot'
+//                    url 'http://greenrobot.de'
+//                }
+//            }
+//        }
+//    }
+//}
+
 
 //=======ORG=======
 //apply plugin: 'maven'
diff --git a/DaoTest/build.gradle b/DaoTest/build.gradle
index 37d94058..430ea7f9 100644
--- a/DaoTest/build.gradle
+++ b/DaoTest/build.gradle
@@ -28,6 +28,7 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile 'com.android.support:appcompat-v7:21.0.0'
     compile project(":DaoCore")
 }
 
diff --git a/DaoTest/src/androidTest/assets/minimal_entity.sql b/DaoTest/src/androidTest/assets/minimal_entity.sql
new file mode 100644
index 00000000..897aac27
--- /dev/null
+++ b/DaoTest/src/androidTest/assets/minimal_entity.sql
@@ -0,0 +1,6 @@
+CREATE TABLE MINIMAL_ENTITY (_id INTEGER PRIMARY KEY);
+INSERT INTO MINIMAL_ENTITY VALUES (1);
+INSERT INTO MINIMAL_ENTITY VALUES (2);
+INSERT INTO MINIMAL_ENTITY VALUES (3);
+INSERT INTO MINIMAL_ENTITY VALUES (4);
+INSERT INTO MINIMAL_ENTITY VALUES (5);
diff --git a/DaoTest/src/androidTest/java/de/greenrobot/daotest/DbUtilsTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/DbUtilsTest.java
index 09f71b5c..30aa5368 100644
--- a/DaoTest/src/androidTest/java/de/greenrobot/daotest/DbUtilsTest.java
+++ b/DaoTest/src/androidTest/java/de/greenrobot/daotest/DbUtilsTest.java
@@ -17,18 +17,23 @@
  */
 package de.greenrobot.daotest;
 
+import android.database.Cursor;
+
+import java.io.IOException;
+
+import de.greenrobot.dao.DbUtils;
 import de.greenrobot.dao.test.DbTest;
 
 public class DbUtilsTest extends DbTest {
-//    public void testExecuteSqlScript() throws IOException {
-//        DbUtils.executeSqlScript(getContext(), db, "minimal-entity.sql");
-//        Cursor cursor = db.rawQuery("SELECT count(*) from MINIMAL_ENTITY", null);
-//        try {
-//            cursor.moveToFirst();
-//            assertEquals(5, cursor.getInt(0));
-//        } finally {
-//            cursor.close();
-//        }
-//    }
+    public void testExecuteSqlScript() throws IOException {
+        DbUtils.executeSqlScript(getContext(), db, "minimal_entity.sql");
+        Cursor cursor = db.rawQuery("SELECT count(*) from MINIMAL_ENTITY", null);
+        try {
+            cursor.moveToFirst();
+            assertEquals(5, cursor.getInt(0));
+        } finally {
+            cursor.close();
+        }
+    }
 
 }
diff --git a/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/LazyListTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/LazyListTest.java
index dbfdfd86..36643930 100644
--- a/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/LazyListTest.java
+++ b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/LazyListTest.java
@@ -18,6 +18,7 @@
 package de.greenrobot.daotest.query;
 
 import java.util.ArrayList;
+import java.util.List;
 import java.util.ListIterator;
 import java.util.NoSuchElementException;
 
@@ -66,7 +67,7 @@ public void testGetAll100Uncached() {
     public void testIterator() {
         ArrayList<TestEntity> list = insert(100);
         LazyList<TestEntity> listLazy = dao.queryBuilder().orderAsc(Properties.SimpleInteger).build().listLazy();
-        testIerator(list, listLazy, false);
+        testIterator(list, listLazy, false);
         assertTrue(listLazy.isClosed());
     }
 
@@ -74,12 +75,12 @@ public void testIteratorUncached() {
         ArrayList<TestEntity> list = insert(100);
         LazyList<TestEntity> listLazy = dao.queryBuilder().orderAsc(Properties.SimpleInteger).build()
                 .listLazyUncached();
-        testIerator(list, listLazy, true);
+        testIterator(list, listLazy, true);
         assertFalse(listLazy.isClosed());
         listLazy.close();
     }
 
-    protected void testIerator(ArrayList<TestEntity> list, LazyList<TestEntity> listLazy, boolean uncached) {
+    protected void testIterator(ArrayList<TestEntity> list, LazyList<TestEntity> listLazy, boolean uncached) {
         ListIterator<TestEntity> iterator = listLazy.listIterator();
         try {
             iterator.previous();
@@ -183,5 +184,22 @@ public void testAutoClose() {
         }
         assertTrue(lazyList.isClosed());
     }
+
+    public void testSubList() {
+        insert(10);
+        LazyList<TestEntity> listLazy = dao.queryBuilder().orderAsc(Properties.SimpleInteger).build().listLazy();
+        List<TestEntity> subList = listLazy.subList(0, 5);
+        assertEquals(5, subList.size());
+        assertNoneNull(subList);
+        for (int i = 5; i < 10; i++) {
+            assertNull(listLazy.peak(i));
+        }
+        listLazy.close();
+    }
+    void assertNoneNull(List<?> list) {
+        for (Object item : list) {
+            assertNotNull(item);
+        }
+    }
     
 }
diff --git a/DaoTest/src/androidTest/res/assets/minimal-entity.sql b/DaoTest/src/androidTest/res/assets/minimal-entity.sql
deleted file mode 100644
index edae6051..00000000
--- a/DaoTest/src/androidTest/res/assets/minimal-entity.sql
+++ /dev/null
@@ -1,7 +0,0 @@
-CREATE TABLE MINIMAL_ENTITY (_id INTEGER PRIMARY KEY);
-INSERT INTO MINIMAL_ENTITY VALUES (1);
-INSERT INTO MINIMAL_ENTITY 
-	VALUES (2);
-INSERT INTO MINIMAL_ENTITY VALUES (3)   ;
-INSERT INTO MINIMAL_ENTITY VALUES (4);  
-INSERT INTO MINIMAL_ENTITY VALUES (5) ;  
diff --git a/DaoTest/src/main/assets/minimal_entity.sql b/DaoTest/src/main/assets/minimal_entity.sql
new file mode 100644
index 00000000..897aac27
--- /dev/null
+++ b/DaoTest/src/main/assets/minimal_entity.sql
@@ -0,0 +1,6 @@
+CREATE TABLE MINIMAL_ENTITY (_id INTEGER PRIMARY KEY);
+INSERT INTO MINIMAL_ENTITY VALUES (1);
+INSERT INTO MINIMAL_ENTITY VALUES (2);
+INSERT INTO MINIMAL_ENTITY VALUES (3);
+INSERT INTO MINIMAL_ENTITY VALUES (4);
+INSERT INTO MINIMAL_ENTITY VALUES (5);
diff --git a/DaoTest/src/main/java/com/borvo/de.greenrobot.greendao/MyActivity.java b/DaoTest/src/main/java/com/borvo/de.greenrobot.greendao/MyActivity.java
index b3342e79..135a52d9 100644
--- a/DaoTest/src/main/java/com/borvo/de.greenrobot.greendao/MyActivity.java
+++ b/DaoTest/src/main/java/com/borvo/de.greenrobot.greendao/MyActivity.java
@@ -1,36 +1,33 @@
 package de.greenrobot.greendao;
 
 import android.app.Activity;
-import android.os.Bundle;
-import android.view.Menu;
-import android.view.MenuItem;
 
 
 public class MyActivity extends Activity {
 
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_my);
-    }
-
-
-    @Override
-    public boolean onCreateOptionsMenu(Menu menu) {
-        // Inflate the menu; this adds items to the action bar if it is present.
-        getMenuInflater().inflate(R.menu.my, menu);
-        return true;
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        // Handle action bar item clicks here. The action bar will
-        // automatically handle clicks on the Home/Up button, so long
-        // as you specify a parent activity in AndroidManifest.xml.
-        int id = item.getItemId();
-        if (id == R.id.action_settings) {
-            return true;
-        }
-        return super.onOptionsItemSelected(item);
-    }
+//    @Override
+//    protected void onCreate(Bundle savedInstanceState) {
+//        super.onCreate(savedInstanceState);
+//        setContentView(R.layout.activity_my);
+//    }
+//
+//
+//    @Override
+//    public boolean onCreateOptionsMenu(Menu menu) {
+//        // Inflate the menu; this adds items to the action bar if it is present.
+//        getMenuInflater().inflate(R.menu.my, menu);
+//        return true;
+//    }
+//
+//    @Override
+//    public boolean onOptionsItemSelected(MenuItem item) {
+//        // Handle action bar item clicks here. The action bar will
+//        // automatically handle clicks on the Home/Up button, so long
+//        // as you specify a parent activity in AndroidManifest.xml.
+//        int id = item.getItemId();
+//        if (id == R.id.action_settings) {
+//            return true;
+//        }
+//        return super.onOptionsItemSelected(item);
+//    }
 }
diff --git a/DaoTest/src/main/res/assets/minimal-entity.sql b/DaoTest/src/main/res/assets/minimal-entity.sql
deleted file mode 100644
index edae6051..00000000
--- a/DaoTest/src/main/res/assets/minimal-entity.sql
+++ /dev/null
@@ -1,7 +0,0 @@
-CREATE TABLE MINIMAL_ENTITY (_id INTEGER PRIMARY KEY);
-INSERT INTO MINIMAL_ENTITY VALUES (1);
-INSERT INTO MINIMAL_ENTITY 
-	VALUES (2);
-INSERT INTO MINIMAL_ENTITY VALUES (3)   ;
-INSERT INTO MINIMAL_ENTITY VALUES (4);  
-INSERT INTO MINIMAL_ENTITY VALUES (5) ;  
diff --git a/DaoTest/src/main/res/menu/my.xml b/DaoTest/src/main/res/menu/my.xml
deleted file mode 100644
index bea58cc0..00000000
--- a/DaoTest/src/main/res/menu/my.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<menu xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools"
-    tools:context=".MyActivity" >
-    <item android:id="@+id/action_settings"
-        android:title="@string/action_settings"
-        android:orderInCategory="100"
-        android:showAsAction="never" />
-</menu>
diff --git a/PerformanceTestOrmLite/AndroidManifest.xml b/PerformanceTestOrmLite/AndroidManifest.xml
deleted file mode 100644
index 47a10c35..00000000
--- a/PerformanceTestOrmLite/AndroidManifest.xml
+++ /dev/null
@@ -1,14 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest
-	xmlns:android="http://schemas.android.com/apk/res/android"
-	package="de.greenrobot.performance.ormlite"
-	android:versionCode="1"
-	android:versionName="1.0">
-	<uses-sdk android:minSdkVersion="4" />
-	<instrumentation
-		android:targetPackage="de.greenrobot.performance.ormlite"
-		android:name="android.test.InstrumentationTestRunner" />
-	<application>
-		<uses-library android:name="android.test.runner" />
-	</application>
-</manifest>
\ No newline at end of file
diff --git a/PerformanceTestOrmLite/build.gradle b/PerformanceTestOrmLite/build.gradle
new file mode 100644
index 00000000..322d6604
--- /dev/null
+++ b/PerformanceTestOrmLite/build.gradle
@@ -0,0 +1,37 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 21
+    buildToolsVersion "21.0.2"
+
+    defaultConfig {
+        minSdkVersion 15
+        targetSdkVersion 21
+        versionCode 1
+        versionName "1.0"
+        testApplicationId "de.greenrobot.performance.ormlite"
+        testInstrumentationRunner "android.test.InstrumentationTestRunner"
+    }
+    buildTypes {
+        release {
+            runProguard false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+
+    sourceSets {
+        androidTest {
+            java.srcDirs = ['src/androidTest/java']
+        }
+    }
+}
+
+dependencies {
+//    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile project(":DaoCore")
+
+    compile files('libs/ormlite-android-4.48.jar', 'libs/ormlite-core-4.48.jar')
+//    testCompile files('libs/ormlite-android-4.48.jar')
+//    testCompile files('libs/ormlite-core-4.48.jar')
+}
+
diff --git a/PerformanceTestOrmLite/lib/ormlite-android-4.34-SNAPSHOT.jar b/PerformanceTestOrmLite/libs-old/ormlite-android-4.34-SNAPSHOT.jar
similarity index 100%
rename from PerformanceTestOrmLite/lib/ormlite-android-4.34-SNAPSHOT.jar
rename to PerformanceTestOrmLite/libs-old/ormlite-android-4.34-SNAPSHOT.jar
diff --git a/PerformanceTestOrmLite/lib/ormlite-core-4.34-SNAPSHOT.jar b/PerformanceTestOrmLite/libs-old/ormlite-core-4.34-SNAPSHOT.jar
similarity index 100%
rename from PerformanceTestOrmLite/lib/ormlite-core-4.34-SNAPSHOT.jar
rename to PerformanceTestOrmLite/libs-old/ormlite-core-4.34-SNAPSHOT.jar
diff --git a/PerformanceTestOrmLite/libs/ormlite-android-4.48.jar b/PerformanceTestOrmLite/libs/ormlite-android-4.48.jar
new file mode 100644
index 00000000..120d4650
Binary files /dev/null and b/PerformanceTestOrmLite/libs/ormlite-android-4.48.jar differ
diff --git a/PerformanceTestOrmLite/libs/ormlite-core-4.48.jar b/PerformanceTestOrmLite/libs/ormlite-core-4.48.jar
new file mode 100644
index 00000000..d8b74dec
Binary files /dev/null and b/PerformanceTestOrmLite/libs/ormlite-core-4.48.jar differ
diff --git a/PerformanceTestOrmLite/src/de/greenrobot/performance/ormlite/DbHelper.java b/PerformanceTestOrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/DbHelper.java
similarity index 97%
rename from PerformanceTestOrmLite/src/de/greenrobot/performance/ormlite/DbHelper.java
rename to PerformanceTestOrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/DbHelper.java
index 18d0d83d..e14c25d7 100644
--- a/PerformanceTestOrmLite/src/de/greenrobot/performance/ormlite/DbHelper.java
+++ b/PerformanceTestOrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/DbHelper.java
@@ -1,39 +1,39 @@
-package de.greenrobot.performance.ormlite;
-
-import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
-
-public class DbHelper extends SQLiteOpenHelper {
-
-    public DbHelper(Context context, String name) {
-        super(context, name, null, 1);
-    }
-
-    @Override
-    public void onCreate(SQLiteDatabase db) {
-        String sql = "CREATE TABLE SIMPLE_ENTITY_NOT_NULL (" + //
-                "_id INTEGER PRIMARY KEY NOT NULL ," + // 0
-                "SIMPLE_BOOLEAN INTEGER NOT NULL ," + // 1
-                "SIMPLE_BYTE INTEGER NOT NULL ," + // 2
-                "SIMPLE_SHORT INTEGER NOT NULL ," + // 3
-                "SIMPLE_INT INTEGER NOT NULL ," + // 4
-                "SIMPLE_LONG INTEGER NOT NULL ," + // 5
-                "SIMPLE_FLOAT REAL NOT NULL ," + // 6
-                "SIMPLE_DOUBLE REAL NOT NULL ," + // 7
-                "SIMPLE_STRING TEXT NOT NULL ," + // 8
-                "SIMPLE_BYTE_ARRAY BLOB NOT NULL )"; // 9
-        db.execSQL(sql);
-        
-        String sql2 = "CREATE TABLE MINIMAL_ENTITY (_id INTEGER PRIMARY KEY)";
-        db.execSQL(sql2);
-    }
-
-    @Override
-    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
-        db.execSQL("DROP TABLE IF EXISTS SIMPLE_ENTITY_NOT_NULL");
-        db.execSQL("DROP TABLE IF EXISTS MINIMAL_ENTITY");
-        onCreate(db);
-    }
-
-}
+package de.greenrobot.performance.ormlite;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+
+public class DbHelper extends SQLiteOpenHelper {
+
+    public DbHelper(Context context, String name) {
+        super(context, name, null, 1);
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase db) {
+        String sql = "CREATE TABLE SIMPLE_ENTITY_NOT_NULL (" + //
+                "_id INTEGER PRIMARY KEY NOT NULL ," + // 0
+                "SIMPLE_BOOLEAN INTEGER NOT NULL ," + // 1
+                "SIMPLE_BYTE INTEGER NOT NULL ," + // 2
+                "SIMPLE_SHORT INTEGER NOT NULL ," + // 3
+                "SIMPLE_INT INTEGER NOT NULL ," + // 4
+                "SIMPLE_LONG INTEGER NOT NULL ," + // 5
+                "SIMPLE_FLOAT REAL NOT NULL ," + // 6
+                "SIMPLE_DOUBLE REAL NOT NULL ," + // 7
+                "SIMPLE_STRING TEXT NOT NULL ," + // 8
+                "SIMPLE_BYTE_ARRAY BLOB NOT NULL )"; // 9
+        db.execSQL(sql);
+        
+        String sql2 = "CREATE TABLE MINIMAL_ENTITY (_id INTEGER PRIMARY KEY)";
+        db.execSQL(sql2);
+    }
+
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        db.execSQL("DROP TABLE IF EXISTS SIMPLE_ENTITY_NOT_NULL");
+        db.execSQL("DROP TABLE IF EXISTS MINIMAL_ENTITY");
+        onCreate(db);
+    }
+
+}
diff --git a/PerformanceTestOrmLite/src/de/greenrobot/performance/ormlite/MinimalEntity.java b/PerformanceTestOrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/MinimalEntity.java
similarity index 80%
rename from PerformanceTestOrmLite/src/de/greenrobot/performance/ormlite/MinimalEntity.java
rename to PerformanceTestOrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/MinimalEntity.java
index 60fe3ef2..43484f68 100644
--- a/PerformanceTestOrmLite/src/de/greenrobot/performance/ormlite/MinimalEntity.java
+++ b/PerformanceTestOrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/MinimalEntity.java
@@ -1,20 +1,23 @@
-package de.greenrobot.performance.ormlite;
-
-import com.j256.ormlite.field.DatabaseField;
-import com.j256.ormlite.table.DatabaseTable;
-
-@DatabaseTable(tableName = "MINIMAL_ENTITY")
-public class MinimalEntity {
-
-    @DatabaseField(id = true, columnName="_id")
-    private Long id;
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-    
-}
+package de.greenrobot.performance.ormlite;
+
+//import com.j256.ormlite.field.DatabaseField;
+//import com.j256.ormlite.table.DatabaseTable;
+
+import com.j256.ormlite.field.DatabaseField;
+import com.j256.ormlite.table.DatabaseTable;
+
+@DatabaseTable(tableName = "MINIMAL_ENTITY")
+public class MinimalEntity {
+
+    @DatabaseField(id = true, columnName="_id")
+    private Long id;
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+    
+}
diff --git a/PerformanceTestOrmLite/src/de/greenrobot/performance/ormlite/PerformanceTestOrmLite.java b/PerformanceTestOrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/PerformanceTestOrmLite.java
similarity index 96%
rename from PerformanceTestOrmLite/src/de/greenrobot/performance/ormlite/PerformanceTestOrmLite.java
rename to PerformanceTestOrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/PerformanceTestOrmLite.java
index ce65044f..2ddf8547 100644
--- a/PerformanceTestOrmLite/src/de/greenrobot/performance/ormlite/PerformanceTestOrmLite.java
+++ b/PerformanceTestOrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/PerformanceTestOrmLite.java
@@ -1,163 +1,165 @@
-package de.greenrobot.performance.ormlite;
-
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.Callable;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-import android.util.Log;
-
-import com.j256.ormlite.android.AndroidConnectionSource;
-import com.j256.ormlite.dao.Dao;
-import com.j256.ormlite.dao.DaoManager;
-
-public class PerformanceTestOrmLite extends ApplicationTestCase<Application> {
-
-    private Dao<SimpleEntityNotNull, Long> dao;
-    private boolean inMemory;
-    private DbHelper dbHelper;
-    private AndroidConnectionSource connectionSource;
-
-    public PerformanceTestOrmLite() {
-        super(Application.class);
-        inMemory = false;
-    }
-
-    @Override
-    protected void setUp() {
-        createApplication();
-        prepareDb();
-    }
-
-    protected void prepareDb() {
-        String name;
-        if (inMemory) {
-            name = null;
-        } else {
-            name = "test-db";
-            getApplication().deleteDatabase(name);
-        }
-        dbHelper = new DbHelper(getApplication(), name);
-        connectionSource = new AndroidConnectionSource(dbHelper);
-        try {
-            dao = DaoManager.createDao(connectionSource, SimpleEntityNotNull.class);
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        if (!inMemory) {
-            getApplication().deleteDatabase("test-db");
-        }
-    }
-
-    public void testPerformance() throws Exception {
-        runTests(100); // Warmup
-        deleteAll();
-        runTests(1000);
-        deleteAll();
-        runTests(1000);
-        deleteAll();
-        runTests(1000);
-        deleteAll();
-        runTests(1000);
-        deleteAll();
-        runTests(1000);
-        Log.d("DAO", "---------------End");
-    }
-
-    protected void deleteAll() {
-        dbHelper.getWritableDatabase().execSQL("DELETE FROM SIMPLE_ENTITY_NOT_NULL");
-    }
-
-    protected void runTests(int entityCount) throws Exception {
-        Log.d("DAO", "---------------Start: " + entityCount);
-
-        long start, time;
-
-        final List<SimpleEntityNotNull> list = new ArrayList<SimpleEntityNotNull>();
-        for (int i = 0; i < entityCount; i++) {
-            list.add(SimpleEntityNotNullHelper.createEntity((long) i));
-        }
-        System.gc();
-
-        runOneByOne(list, entityCount / 10);
-
-        System.gc();
-        deleteAll();
-
-        start = System.currentTimeMillis();
-        dao.callBatchTasks(new Callable<Void>() {
-
-            @Override
-            public Void call() throws Exception {
-                for (SimpleEntityNotNull entity : list) {
-                    dao.create(entity);
-                }
-                return null;
-            }
-        });
-        time = System.currentTimeMillis() - start;
-        Log.d("DAO", "ORMLite: Created (batch) " + list.size() + " entities in " + time + "ms");
-
-        start = System.currentTimeMillis();
-        dao.callBatchTasks(new Callable<Void>() {
-
-            @Override
-            public Void call() throws Exception {
-                for (SimpleEntityNotNull entity : list) {
-                    dao.update(entity);
-                }
-                return null;
-            }
-        });
-        time = System.currentTimeMillis() - start;
-        Log.d("DAO", "ORMLite: Updated (batch) " + list.size() + " entities in " + time + "ms");
-
-        start = System.currentTimeMillis();
-        List<SimpleEntityNotNull> reloaded = dao.queryForAll();
-        time = System.currentTimeMillis() - start;
-        Log.d("DAO", "ORMLite: Loaded " + reloaded.size() + " entities in " + time + "ms");
-
-        System.gc();
-        Log.d("DAO", "---------------End: " + entityCount);
-    }
-
-    protected void runOneByOne(List<SimpleEntityNotNull> list, int count) throws SQLException {
-        long start;
-        long time;
-        start = System.currentTimeMillis();
-        for (int i = 0; i < count; i++) {
-            dao.create(list.get(i));
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d("DAO", "ORMLite: Inserted (one-by-one) " + count + " entities in " + time + "ms");
-
-        start = System.currentTimeMillis();
-        for (int i = 0; i < count; i++) {
-            dao.update(list.get(i));
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d("DAO", "ORMLite: Updated (one-by-one) " + count + " entities in " + time + "ms");
-    }
-
-    public void testSemantics() {
-        try {
-            Dao<MinimalEntity, Long> minimalDao = DaoManager.createDao(connectionSource, MinimalEntity.class);
-            MinimalEntity data = new MinimalEntity();
-            minimalDao.create(data);
-            assertNull(data.getId()); // ORMLite does not update PK after insert
-            MinimalEntity data2 = minimalDao.queryForAll().get(0);
-            MinimalEntity data3 = minimalDao.queryForId(data2.getId());
-            assertNotSame(data, data2);
-            assertNotSame(data2, data3); // ORMLite does not provide object equality
-            assertEquals(data2.getId(), data3.getId());
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-    }
-}
+package de.greenrobot.performance.ormlite;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+import android.util.Log;
+
+import com.j256.ormlite.android.AndroidConnectionSource;
+import com.j256.ormlite.dao.Dao;
+import com.j256.ormlite.dao.DaoManager;
+
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.Callable;
+
+
+
+public class PerformanceTestOrmLite extends ApplicationTestCase<Application> {
+
+    private Dao<SimpleEntityNotNull, Long> dao;
+    private boolean inMemory;
+    private DbHelper dbHelper;
+    private AndroidConnectionSource connectionSource;
+
+    public PerformanceTestOrmLite() {
+        super(Application.class);
+        inMemory = false;
+    }
+
+    @Override
+    protected void setUp() {
+        createApplication();
+        prepareDb();
+    }
+
+    protected void prepareDb() {
+        String name;
+        if (inMemory) {
+            name = null;
+        } else {
+            name = "test-db";
+            getApplication().deleteDatabase(name);
+        }
+        dbHelper = new DbHelper(getApplication(), name);
+        connectionSource = new AndroidConnectionSource(dbHelper);
+        try {
+            dao = DaoManager.createDao(connectionSource, SimpleEntityNotNull.class);
+        } catch (SQLException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        if (!inMemory) {
+            getApplication().deleteDatabase("test-db");
+        }
+    }
+
+    public void testPerformance() throws Exception {
+        runTests(100); // Warmup
+        deleteAll();
+        runTests(1000);
+        deleteAll();
+        runTests(1000);
+        deleteAll();
+        runTests(1000);
+        deleteAll();
+        runTests(1000);
+        deleteAll();
+        runTests(1000);
+        Log.d("DAO", "---------------End");
+    }
+
+    protected void deleteAll() {
+        dbHelper.getWritableDatabase().execSQL("DELETE FROM SIMPLE_ENTITY_NOT_NULL");
+    }
+
+    protected void runTests(int entityCount) throws Exception {
+        Log.d("DAO", "---------------Start: " + entityCount);
+
+        long start, time;
+
+        final List<SimpleEntityNotNull> list = new ArrayList<SimpleEntityNotNull>();
+        for (int i = 0; i < entityCount; i++) {
+            list.add(SimpleEntityNotNullHelper.createEntity((long) i));
+        }
+        System.gc();
+
+        runOneByOne(list, entityCount / 10);
+
+        System.gc();
+        deleteAll();
+
+        start = System.currentTimeMillis();
+        dao.callBatchTasks(new Callable<Void>() {
+
+            @Override
+            public Void call() throws Exception {
+                for (SimpleEntityNotNull entity : list) {
+                    dao.create(entity);
+                }
+                return null;
+            }
+        });
+        time = System.currentTimeMillis() - start;
+        Log.d("DAO", "ORMLite: Created (batch) " + list.size() + " entities in " + time + "ms");
+
+        start = System.currentTimeMillis();
+        dao.callBatchTasks(new Callable<Void>() {
+
+            @Override
+            public Void call() throws Exception {
+                for (SimpleEntityNotNull entity : list) {
+                    dao.update(entity);
+                }
+                return null;
+            }
+        });
+        time = System.currentTimeMillis() - start;
+        Log.d("DAO", "ORMLite: Updated (batch) " + list.size() + " entities in " + time + "ms");
+
+        start = System.currentTimeMillis();
+        List<SimpleEntityNotNull> reloaded = dao.queryForAll();
+        time = System.currentTimeMillis() - start;
+        Log.d("DAO", "ORMLite: Loaded " + reloaded.size() + " entities in " + time + "ms");
+
+        System.gc();
+        Log.d("DAO", "---------------End: " + entityCount);
+    }
+
+    protected void runOneByOne(List<SimpleEntityNotNull> list, int count) throws SQLException {
+        long start;
+        long time;
+        start = System.currentTimeMillis();
+        for (int i = 0; i < count; i++) {
+            dao.create(list.get(i));
+        }
+        time = System.currentTimeMillis() - start;
+        Log.d("DAO", "ORMLite: Inserted (one-by-one) " + count + " entities in " + time + "ms");
+
+        start = System.currentTimeMillis();
+        for (int i = 0; i < count; i++) {
+            dao.update(list.get(i));
+        }
+        time = System.currentTimeMillis() - start;
+        Log.d("DAO", "ORMLite: Updated (one-by-one) " + count + " entities in " + time + "ms");
+    }
+
+    public void testSemantics() {
+        try {
+            Dao<MinimalEntity, Long> minimalDao = DaoManager.createDao(connectionSource, MinimalEntity.class);
+            MinimalEntity data = new MinimalEntity();
+            minimalDao.create(data);
+            assertNull(data.getId()); // ORMLite does not update PK after insert
+            MinimalEntity data2 = minimalDao.queryForAll().get(0);
+            MinimalEntity data3 = minimalDao.queryForId(data2.getId());
+            assertNotSame(data, data2);
+            assertNotSame(data2, data3); // ORMLite does not provide object equality
+            assertEquals(data2.getId(), data3.getId());
+        } catch (SQLException e) {
+            throw new RuntimeException(e);
+        }
+    }
+}
diff --git a/PerformanceTestOrmLite/src/de/greenrobot/performance/ormlite/SimpleEntityNotNull.java b/PerformanceTestOrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/SimpleEntityNotNull.java
similarity index 96%
rename from PerformanceTestOrmLite/src/de/greenrobot/performance/ormlite/SimpleEntityNotNull.java
rename to PerformanceTestOrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/SimpleEntityNotNull.java
index cd404d82..86ab776f 100644
--- a/PerformanceTestOrmLite/src/de/greenrobot/performance/ormlite/SimpleEntityNotNull.java
+++ b/PerformanceTestOrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/SimpleEntityNotNull.java
@@ -1,116 +1,116 @@
-package de.greenrobot.performance.ormlite;
-
-import com.j256.ormlite.field.DataType;
-import com.j256.ormlite.field.DatabaseField;
-import com.j256.ormlite.table.DatabaseTable;
-
-
-/** 
- * Entity mapped to table SIMPLE_ENTITY_NOT_NULL (schema version 1).
-*/
-@DatabaseTable(tableName = "SIMPLE_ENTITY_NOT_NULL")
-public class SimpleEntityNotNull {
-
-    @DatabaseField(id = true, columnName="_id")
-    private long id;
-    
-    @DatabaseField(columnName="SIMPLE_BOOLEAN")
-    private boolean simpleBoolean;
-    @DatabaseField(columnName="SIMPLE_BYTE")
-    private byte simpleByte;
-    @DatabaseField(columnName="SIMPLE_SHORT")
-    private short simpleShort;
-    @DatabaseField(columnName="SIMPLE_INT")
-    private int simpleInt;
-    @DatabaseField(columnName="SIMPLE_LONG")
-    private long simpleLong;
-    @DatabaseField(columnName="SIMPLE_FLOAT")
-    private float simpleFloat;
-    @DatabaseField(columnName="SIMPLE_DOUBLE")
-    private double simpleDouble;
-    @DatabaseField(columnName="SIMPLE_STRING")
-    private String simpleString;
-    @DatabaseField(dataType=DataType.BYTE_ARRAY,columnName="SIMPLE_BYTE_ARRAY")
-    private byte[] simpleByteArray; 
-    
-    public long getId() {
-        return id;
-    } 
-
-    public void setId(long id) {
-        this.id = id;
-    } 
-
-    public boolean getSimpleBoolean() {
-        return simpleBoolean;
-    } 
-
-    public void setSimpleBoolean(boolean simpleBoolean) {
-        this.simpleBoolean = simpleBoolean;
-    } 
-
-    public byte getSimpleByte() {
-        return simpleByte;
-    } 
-
-    public void setSimpleByte(byte simpleByte) {
-        this.simpleByte = simpleByte;
-    } 
-
-    public short getSimpleShort() {
-        return simpleShort;
-    } 
-
-    public void setSimpleShort(short simpleShort) {
-        this.simpleShort = simpleShort;
-    } 
-
-    public int getSimpleInt() {
-        return simpleInt;
-    } 
-
-    public void setSimpleInt(int simpleInt) {
-        this.simpleInt = simpleInt;
-    } 
-
-    public long getSimpleLong() {
-        return simpleLong;
-    } 
-
-    public void setSimpleLong(long simpleLong) {
-        this.simpleLong = simpleLong;
-    } 
-
-    public float getSimpleFloat() {
-        return simpleFloat;
-    } 
-
-    public void setSimpleFloat(float simpleFloat) {
-        this.simpleFloat = simpleFloat;
-    } 
-
-    public double getSimpleDouble() {
-        return simpleDouble;
-    } 
-
-    public void setSimpleDouble(double simpleDouble) {
-        this.simpleDouble = simpleDouble;
-    } 
-
-    public String getSimpleString() {
-        return simpleString;
-    } 
-
-    public void setSimpleString(String simpleString) {
-        this.simpleString = simpleString;
-    } 
-
-    public byte[] getSimpleByteArray() {
-        return simpleByteArray;
-    } 
-
-    public void setSimpleByteArray(byte[] simpleByteArray) {
-        this.simpleByteArray = simpleByteArray;
-    } 
-
-}
+package de.greenrobot.performance.ormlite;
+
+import com.j256.ormlite.field.DataType;
+import com.j256.ormlite.field.DatabaseField;
+import com.j256.ormlite.table.DatabaseTable;
+
+
+/** 
+ * Entity mapped to table SIMPLE_ENTITY_NOT_NULL (schema version 1).
+*/
+@DatabaseTable(tableName = "SIMPLE_ENTITY_NOT_NULL")
+public class SimpleEntityNotNull {
+
+    @DatabaseField(id = true, columnName="_id")
+    private long id;
+    
+    @DatabaseField(columnName="SIMPLE_BOOLEAN")
+    private boolean simpleBoolean;
+    @DatabaseField(columnName="SIMPLE_BYTE")
+    private byte simpleByte;
+    @DatabaseField(columnName="SIMPLE_SHORT")
+    private short simpleShort;
+    @DatabaseField(columnName="SIMPLE_INT")
+    private int simpleInt;
+    @DatabaseField(columnName="SIMPLE_LONG")
+    private long simpleLong;
+    @DatabaseField(columnName="SIMPLE_FLOAT")
+    private float simpleFloat;
+    @DatabaseField(columnName="SIMPLE_DOUBLE")
+    private double simpleDouble;
+    @DatabaseField(columnName="SIMPLE_STRING")
+    private String simpleString;
+    @DatabaseField(dataType=DataType.BYTE_ARRAY,columnName="SIMPLE_BYTE_ARRAY")
+    private byte[] simpleByteArray; 
+    
+    public long getId() {
+        return id;
+    } 
+
+    public void setId(long id) {
+        this.id = id;
+    } 
+
+    public boolean getSimpleBoolean() {
+        return simpleBoolean;
+    } 
+
+    public void setSimpleBoolean(boolean simpleBoolean) {
+        this.simpleBoolean = simpleBoolean;
+    } 
+
+    public byte getSimpleByte() {
+        return simpleByte;
+    } 
+
+    public void setSimpleByte(byte simpleByte) {
+        this.simpleByte = simpleByte;
+    } 
+
+    public short getSimpleShort() {
+        return simpleShort;
+    } 
+
+    public void setSimpleShort(short simpleShort) {
+        this.simpleShort = simpleShort;
+    } 
+
+    public int getSimpleInt() {
+        return simpleInt;
+    } 
+
+    public void setSimpleInt(int simpleInt) {
+        this.simpleInt = simpleInt;
+    } 
+
+    public long getSimpleLong() {
+        return simpleLong;
+    } 
+
+    public void setSimpleLong(long simpleLong) {
+        this.simpleLong = simpleLong;
+    } 
+
+    public float getSimpleFloat() {
+        return simpleFloat;
+    } 
+
+    public void setSimpleFloat(float simpleFloat) {
+        this.simpleFloat = simpleFloat;
+    } 
+
+    public double getSimpleDouble() {
+        return simpleDouble;
+    } 
+
+    public void setSimpleDouble(double simpleDouble) {
+        this.simpleDouble = simpleDouble;
+    } 
+
+    public String getSimpleString() {
+        return simpleString;
+    } 
+
+    public void setSimpleString(String simpleString) {
+        this.simpleString = simpleString;
+    } 
+
+    public byte[] getSimpleByteArray() {
+        return simpleByteArray;
+    } 
+
+    public void setSimpleByteArray(byte[] simpleByteArray) {
+        this.simpleByteArray = simpleByteArray;
+    } 
+
+}
diff --git a/PerformanceTestOrmLite/src/de/greenrobot/performance/ormlite/SimpleEntityNotNullHelper.java b/PerformanceTestOrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/SimpleEntityNotNullHelper.java
similarity index 97%
rename from PerformanceTestOrmLite/src/de/greenrobot/performance/ormlite/SimpleEntityNotNullHelper.java
rename to PerformanceTestOrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/SimpleEntityNotNullHelper.java
index a23f7497..59078355 100644
--- a/PerformanceTestOrmLite/src/de/greenrobot/performance/ormlite/SimpleEntityNotNullHelper.java
+++ b/PerformanceTestOrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/SimpleEntityNotNullHelper.java
@@ -1,22 +1,22 @@
-package de.greenrobot.performance.ormlite;
-
-public class SimpleEntityNotNullHelper {
-    protected static SimpleEntityNotNull createEntity(Long key) {
-        if (key == null) {
-            return null;
-        }
-        SimpleEntityNotNull entity = new SimpleEntityNotNull();
-        entity.setId(key);
-        entity.setSimpleBoolean(true);
-        entity.setSimpleByte(Byte.MAX_VALUE);
-        entity.setSimpleShort(Short.MAX_VALUE);
-        entity.setSimpleInt(Integer.MAX_VALUE);
-        entity.setSimpleLong(Long.MAX_VALUE);
-        entity.setSimpleFloat(Float.MAX_VALUE);
-        entity.setSimpleDouble(Double.MAX_VALUE);
-        entity.setSimpleString("greenrobot greenDAO");
-        byte[] bytes = { 42, -17, 23, 0, 127, -128 };
-        entity.setSimpleByteArray(bytes);
-        return entity;
-    }
-}
+package de.greenrobot.performance.ormlite;
+
+public class SimpleEntityNotNullHelper {
+    protected static SimpleEntityNotNull createEntity(Long key) {
+        if (key == null) {
+            return null;
+        }
+        SimpleEntityNotNull entity = new SimpleEntityNotNull();
+        entity.setId(key);
+        entity.setSimpleBoolean(true);
+        entity.setSimpleByte(Byte.MAX_VALUE);
+        entity.setSimpleShort(Short.MAX_VALUE);
+        entity.setSimpleInt(Integer.MAX_VALUE);
+        entity.setSimpleLong(Long.MAX_VALUE);
+        entity.setSimpleFloat(Float.MAX_VALUE);
+        entity.setSimpleDouble(Double.MAX_VALUE);
+        entity.setSimpleString("greenrobot greenDAO");
+        byte[] bytes = { 42, -17, 23, 0, 127, -128 };
+        entity.setSimpleByteArray(bytes);
+        return entity;
+    }
+}
diff --git a/PerformanceTestOrmLite/src/main/AndroidManifest.xml b/PerformanceTestOrmLite/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..d32a9cbc
--- /dev/null
+++ b/PerformanceTestOrmLite/src/main/AndroidManifest.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest
+	xmlns:android="http://schemas.android.com/apk/res/android"
+	package="de.greenrobot.performance.ormlite">
+	<application>
+		<uses-library android:name="android.test.runner" />
+	</application>
+</manifest>
\ No newline at end of file
diff --git a/README.md b/README.md
index 48fee8b3..790a931e 100644
--- a/README.md
+++ b/README.md
@@ -19,7 +19,7 @@ New features ahead for the brave: documentation and test coverage may be lacking
 
 Release History
 ---------------
-### Generator V1.3.1 (2015-05-24): Bugfix
+### Generator V1.3.1 (2014-05-24): Bugfix
 * Fix schema version >= 1000
 
 ### V1.3.7 (2013-11-27): Bugfix
diff --git a/settings.gradle b/settings.gradle
index ee62cff7..2dec0a67 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,4 +1,4 @@
-include ':app', ':DaoCore', ':DaoGenerator', ':DaoTest', ':DaoExampleGenerator', ':DaoExample'
+include ':app', ':DaoCore', ':DaoGenerator', ':DaoTest', ':DaoExampleGenerator', ':DaoExample', ':PerformanceTestOrmLite'
 //=======ORG=======
 //include 'DaoCore', 'DaoGenerator', 'DaoExampleGenerator'
 //include 'DaoTest' // Travis needs some Android setup for this
