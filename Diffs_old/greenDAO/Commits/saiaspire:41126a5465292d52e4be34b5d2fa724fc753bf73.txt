diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java
index 276f4cdb..8ab633f6 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java
@@ -105,5 +105,19 @@ public void refresh() {
         myDao.refresh((Customer)this);
     }
 
+    public void updateNotNull(Customer other) {
+        if(other.id != null) {
+            this.id = other.id;
+        }
+
+        if(other.name != null) {
+            this.name = other.name;
+        }
+
+        // relationships
+        if(other.getOrders() != null) {
+            this.setOrders(other.getOrders());
+        }
+    }
 
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
index bebf97f2..2af69421 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
@@ -85,5 +85,28 @@ public void setUserIds(java.util.List<String> userIds) {
         this.userIds = userIds;
     }
 
+    public void updateNotNull(Note other) {
+        if(other.id != null) {
+            this.id = other.id;
+        }
+
+        if(other.text != null) {
+            this.text = other.text;
+        }
+
+        if(other.comment != null) {
+            this.comment = other.comment;
+        }
+
+        if(other.date != null) {
+            this.date = other.date;
+        }
+
+        if(other.userIds != null) {
+            this.userIds = other.userIds;
+        }
+
+        // relationships
+    }
 
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
index 44d49740..9d39f425 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
@@ -12,8 +12,8 @@ public Order(Long id) {
         super(id);
     }
 
-    public Order(Long id, java.util.Date date, long customerId) {
-        super(id, date, customerId);
+    public Order(Long id, java.util.Date date, long customerId, byte[] serializedCustomer) {
+        super(id, date, customerId, serializedCustomer);
     }
 
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java b/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java
index a85b8174..62ed795c 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java
@@ -4,6 +4,7 @@
 import de.greenrobot.dao.DaoException;
 
 
+import de.greenrobot.dao.DbUtils;
 
 
 
@@ -16,7 +17,10 @@
     protected Long id;
     protected java.util.Date date;
     protected long customerId;
+    protected byte[] serializedCustomer;
 
+    //denormalized properties
+    private Customer customer2;
 
 
     /** Used to resolve relations */
@@ -36,10 +40,11 @@ public OrderBase(Long id) {
         this.id = id;
     }
 
-    public OrderBase(Long id, java.util.Date date, long customerId) {
+    public OrderBase(Long id, java.util.Date date, long customerId, byte[] serializedCustomer) {
         this.id = id;
         this.date = date;
         this.customerId = customerId;
+        this.serializedCustomer = serializedCustomer;
     }
 
     /** called by internal mechanisms, do not call yourself. */
@@ -72,6 +77,14 @@ public void setCustomerId(long customerId) {
         this.customerId = customerId;
     }
 
+    public byte[] getSerializedCustomer() {
+        return serializedCustomer;
+    }
+
+    public void setSerializedCustomer(byte[] serializedCustomer) {
+        this.serializedCustomer = serializedCustomer;
+    }
+
     /** To-one relationship, resolved on first access. */
     public Customer getCustomer() {
         if (customer__resolvedKey == null || !customer__resolvedKey.equals(customerId)) {
@@ -118,5 +131,40 @@ public void refresh() {
         myDao.refresh((Order)this);
     }
 
+    public void updateNotNull(Order other) {
+        if(other.id != null) {
+            this.id = other.id;
+        }
+
+        if(other.date != null) {
+            this.date = other.date;
+        }
+
+        if(other.customerId != null) {
+            this.customerId = other.customerId;
+        }
+
+        //serialized
+        if(other.getCustomer2() != null) {
+            setCustomer2(other.getCustomer2());
+        }
+
+        // relationships
+        if(other.getCustomer() != null) {
+            this.setCustomer(other.getCustomer());
+        }
+    }
+    public Customer getCustomer2() {
+        if(customer2 == null && serializedCustomer != null) {
+           customer2  = (Customer) DbUtils.deserializeObject(serializedCustomer);
+           serializedCustomer = null; //clear memory, before save, we'll re-serialize anyways if needed
+        }
+        return customer2;
+    }
+
+    public void setCustomer2(Customer customer2) {
+        this.customer2 = customer2;
+        serializedCustomer = null; //onBeforeSave will do serialization
+    }
 
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
index 04ab716e..f754f933 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
@@ -31,6 +31,7 @@
         public final static Property Id =new Property(0, Long.class , "id", true, "_id");
         public final static Property Date =new Property(1, java.util.Date.class , "date", false, "DATE");
         public final static Property CustomerId =new Property(2, long.class , "customerId", false, "CUSTOMER_ID");
+        public final static Property SerializedCustomer =new Property(3, byte[].class , "serializedCustomer", false, "SERIALIZED_CUSTOMER");
     };
 
     private DaoSession daoSession;
@@ -52,7 +53,8 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
         db.execSQL("CREATE TABLE " + constraint + "'ORDERS' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'DATE' INTEGER," + // 1: date
-                "'CUSTOMER_ID' INTEGER NOT NULL );"); // 2: customerId
+                "'CUSTOMER_ID' INTEGER NOT NULL ," + // 2: customerId
+                "'SERIALIZED_CUSTOMER' BLOB);"); // 3: serializedCustomer
     }
 
     /** Drops the underlying database table. */
@@ -79,6 +81,12 @@ protected void bindValues(SQLiteStatement stmt, Order entity) {
 
         }
         stmt.bindLong(3, entity.getCustomerId());
+ 
+        byte[] serializedCustomer = entity.getSerializedCustomer();
+        if (serializedCustomer != null) {
+            stmt.bindBlob(4, serializedCustomer);
+
+        }
     }
 
     @Override
@@ -100,7 +108,8 @@ public Order readEntity(Cursor cursor, int offset) {
 
             cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) , // id
             cursor.isNull(offset + 1) ? null : new java.util.Date( cursor.getLong(offset + 1) ) , // date
-            cursor.getLong(offset + 2) // customerId
+            cursor.getLong(offset + 2) , // customerId
+            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3) // serializedCustomer
         );
         return entity;
     }
@@ -111,6 +120,7 @@ public void readEntity(Cursor cursor, Order entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) );
         entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date( cursor.getLong(offset + 1) ) );
         entity.setCustomerId(cursor.getLong(offset + 2) );
+        entity.setSerializedCustomer(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3) );
      }
 
     /** @inheritdoc */
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index de5cf5cd..806bc5e6 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -64,6 +64,8 @@ private static void addCustomerOrder(Schema schema) {
         Property orderDate = order.addDateProperty("date").getProperty();
         Property customerId = order.addLongProperty("customerId").notNull().getProperty();
         order.addToOne(customer, customerId);
+        Property serializedCustomer = order.addProperty(PropertyType.ByteArray, "serializedCustomer").getProperty();
+        order.addSerializedProperty(serializedCustomer, "customer2", "Customer");
 
         ToMany customerToOrders = customer.addToMany(order, customerId);
         customerToOrders.setName("orders");
