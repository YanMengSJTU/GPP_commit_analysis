diff --git a/DaoCore/src/de/greenrobot/dao/sync/GreenSync.java b/DaoCore/src/de/greenrobot/dao/sync/GreenSync.java
index c8f0254d..e58ca8e0 100644
--- a/DaoCore/src/de/greenrobot/dao/sync/GreenSync.java
+++ b/DaoCore/src/de/greenrobot/dao/sync/GreenSync.java
@@ -1,5 +1,6 @@
 package de.greenrobot.dao.sync;
 
+import android.util.Log;
 import com.google.gson.FieldNamingPolicy;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
@@ -30,6 +31,7 @@
     private Gson mGson;
     private GreenSyncDaoBase mGreenSyncDaoBase;
     private AbstractDaoSession mSession;
+    private SyncService mSyncService;
 
     private final Map<Class<? extends DaoEnum>, EnumAdapter<? extends DaoEnum>> enumAdapters =
             new LinkedHashMap<Class<? extends DaoEnum>, EnumAdapter<? extends DaoEnum>>();
@@ -46,13 +48,15 @@ public static Type getTypeToken(String key) {
         return sListTypeTokensMap.get(key);
     }
 
-    public GreenSync(AbstractDaoSession session) {
+    public GreenSync(AbstractDaoSession session, SyncService syncService) {
+
         final GsonBuilder builder = new GsonBuilder();
         builder.excludeFieldsWithModifiers(Modifier.TRANSIENT);
         builder.registerTypeAdapterFactory(new EntityTypeAdapterFactory(this));
         builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE);
         mGson = builder.create();
         mSession = session;
+        mSyncService = syncService;
 
         for (AbstractDao dao : mSession.getDaos().values()) {
             if (dao instanceof GreenSyncDaoBase) {
@@ -76,7 +80,48 @@ public GreenSync(AbstractDaoSession session) {
         return adapter;
     }
 
-    public String sync() {
+    public void sync() {
+        syncAction(mGreenSyncDaoBase.getCreatedObjects(), CREATED);
+        syncAction(mGreenSyncDaoBase.getUpdatedObjects(), UPDATED);
+        syncAction(mGreenSyncDaoBase.getDeletedObjects(), DELETED);
+    }
+
+    private void syncAction(Map<String, List<GreenSyncBase>> objects, String action) {
+
+        for (Map.Entry<String, List<GreenSyncBase>> object : objects.entrySet()) {
+
+            String className = object.getKey();
+            List<GreenSyncBase> items = object.getValue();
+
+            for (final GreenSyncBase item : items) {
+                String json = mGson.toJson(item);
+
+                SyncService.Callback callback = new SyncService.Callback() {
+                    @Override
+                    public void onSuccess(String externalId) {
+                        item.clean();
+                        item.setExternalId(externalId);
+                        mGreenSyncDaoBase.update(item);
+                    }
+
+                    @Override
+                    public void onFail(String errorMessage) {
+                        Log.e("GreenSync", "Failed Sync: " + errorMessage);
+                    }
+                };
+
+                if (action.equals(CREATED)) {
+                    mSyncService.create(className, json, callback);
+                } else if (action.equals(UPDATED)) {
+                    mSyncService.update(className, json, callback);
+                } else if (action.equals(DELETED)) {
+                    mSyncService.delete(className, json, callback);
+                }
+            }
+        }
+    }
+
+    public String syncBatch() {
 
         Map<String, Map> syncObjects = new HashMap<String, Map>();
 
diff --git a/DaoCore/src/de/greenrobot/dao/sync/GreenSyncBase.java b/DaoCore/src/de/greenrobot/dao/sync/GreenSyncBase.java
index 5eb2891d..90879143 100644
--- a/DaoCore/src/de/greenrobot/dao/sync/GreenSyncBase.java
+++ b/DaoCore/src/de/greenrobot/dao/sync/GreenSyncBase.java
@@ -3,6 +3,11 @@
 /**
  * Created by saulhoward on 3/31/14.
  */
-public interface GreenSyncBase {
-    String getExternalId();
+public abstract class GreenSyncBase {
+
+    public abstract String getExternalId();
+    public abstract void setExternalId(String externalId);
+    public abstract void clean();
+
+
 }
diff --git a/DaoCore/src/de/greenrobot/dao/sync/GreenSyncDaoBase.java b/DaoCore/src/de/greenrobot/dao/sync/GreenSyncDaoBase.java
index 0eb7dca3..60934137 100644
--- a/DaoCore/src/de/greenrobot/dao/sync/GreenSyncDaoBase.java
+++ b/DaoCore/src/de/greenrobot/dao/sync/GreenSyncDaoBase.java
@@ -1,13 +1,15 @@
 package de.greenrobot.dao.sync;
 
+import java.util.List;
 import java.util.Map;
 
 /**
  * Created by saulhoward on 3/27/14.
  */
-public interface GreenSyncDaoBase {
+public interface GreenSyncDaoBase<T> {
 
-    Map getUpdatedObjects();
-    Map getDeletedObjects();
-    Map getCreatedObjects();
+    Map<String, List<GreenSyncBase>> getUpdatedObjects();
+    Map<String, List<GreenSyncBase>> getDeletedObjects();
+    Map<String, List<GreenSyncBase>> getCreatedObjects();
+    void update(T entity);
 }
diff --git a/DaoCore/src/de/greenrobot/dao/sync/SyncService.java b/DaoCore/src/de/greenrobot/dao/sync/SyncService.java
new file mode 100644
index 00000000..f0b25a4d
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/sync/SyncService.java
@@ -0,0 +1,16 @@
+package de.greenrobot.dao.sync;
+
+/**
+ * Created by saulhoward on 3/31/14.
+ */
+public interface SyncService {
+    void create(String className, String payload, final Callback callback);
+    void read(String className, String id, final Callback callback);
+    void update(String className, String payload, final Callback callback);
+    void delete(String className, String id, final Callback callback);
+
+    public interface Callback {
+        void onSuccess(String externalId);
+        void onFail(String errorMessage);
+    }
+}
diff --git a/DaoExample/AndroidManifest.xml b/DaoExample/AndroidManifest.xml
index 28fb3a4f..3e89c0cc 100644
--- a/DaoExample/AndroidManifest.xml
+++ b/DaoExample/AndroidManifest.xml
@@ -3,9 +3,10 @@
       package="de.greenrobot.daoexample"
       android:versionCode="1"
       android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="4" />
+    <uses-sdk android:minSdkVersion="8" />
+
+    <uses-permission android:name="android.permission.INTERNET"/>
 
-    <instrumentation android:targetPackage="de.greenrobot.daoexample" android:name="android.test.InstrumentationTestRunner" />
     <application android:icon="@drawable/icon" android:label="@string/app_name">
         <activity android:name=".NoteActivity">
             <intent-filter>
diff --git a/DaoExample/build.gradle b/DaoExample/build.gradle
index ed5308d1..a752ff7e 100644
--- a/DaoExample/build.gradle
+++ b/DaoExample/build.gradle
@@ -12,6 +12,7 @@ repositories {
 
 dependencies {
     compile fileTree(dir: 'libs', include: '*.jar')
+    compile ('com.mcxiaoke.volley:library:1.0.2');
 }
 
 sourceSets {
diff --git a/DaoExample/src/de/greenrobot/daoexample/MySyncServce.java b/DaoExample/src/de/greenrobot/daoexample/MySyncServce.java
new file mode 100644
index 00000000..8cf687e8
--- /dev/null
+++ b/DaoExample/src/de/greenrobot/daoexample/MySyncServce.java
@@ -0,0 +1,90 @@
+package de.greenrobot.daoexample;
+
+import android.content.Context;
+import android.util.Log;
+import com.android.volley.Request;
+import com.android.volley.RequestQueue;
+import com.android.volley.Response;
+import com.android.volley.VolleyError;
+import com.android.volley.toolbox.Volley;
+import de.greenrobot.dao.sync.SyncService;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * Created by saulhoward on 3/31/14.
+ */
+public class MySyncServce implements SyncService {
+
+    private static MySyncServce sSyncService;
+
+    private final String BASE_URL = "http://smartcare-api.azurewebsites.net";
+
+    private RequestQueue mRequestQueue;
+    private String urlPattern = "%s/api/v1/%d/%s";
+
+    public static MySyncServce get(Context context) {
+
+        if (sSyncService == null) {
+            sSyncService = new MySyncServce(context);
+        }
+
+        return sSyncService;
+    }
+
+    MySyncServce(Context context) {
+        mRequestQueue = Volley.newRequestQueue(context);
+    }
+
+    @Override
+    public void create(String className, String payload, final Callback callback) {
+        sendRequest(Request.Method.POST, className, payload, null, callback);
+    }
+
+    @Override
+    public void read(String className, String id, final Callback callback) {
+        sendRequest(Request.Method.GET, className, null, null, callback);
+    }
+
+    @Override
+    public void update(String className, String payload, Callback callback) {
+        sendRequest(Request.Method.PATCH, className, payload, null, callback);
+    }
+
+    @Override
+    public void delete(String className, String id, Callback callback) {
+        sendRequest(Request.Method.DELETE, className, null, id, callback);
+
+    }
+
+    private void sendRequest(int method, String className, String payload, String id, final Callback callback) {
+
+        StringBuilder urlBuilder = new StringBuilder(String.format(urlPattern, BASE_URL, 0, className));
+
+        if (id != null) {
+            urlBuilder.append("/");
+            urlBuilder.append(id);
+        }
+
+        StringRequest request = new StringRequest(method, urlBuilder.toString(), payload, new Response.Listener<String>() {
+            @Override
+            public void onResponse(String response) {
+                Log.i("MySyncService", "Response: " + response);
+                JSONObject json = null;
+                try {
+                    json = new JSONObject(response);
+                } catch (JSONException e) {
+                    e.printStackTrace();
+                }
+                callback.onSuccess(json.optString("Guid"));
+            }
+        }, new Response.ErrorListener() {
+            @Override
+            public void onErrorResponse(VolleyError error) {
+                callback.onFail(new String(error.networkResponse.data));
+            }
+        });
+
+        mRequestQueue.add(request);
+    }
+}
diff --git a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
index c8067b3f..94d2d9de 100644
--- a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
+++ b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
@@ -21,7 +21,6 @@
 import android.os.Bundle;
 import android.text.Editable;
 import android.text.TextWatcher;
-import android.util.Log;
 import android.view.KeyEvent;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -51,19 +50,20 @@
 
     private DaoMaster daoMaster;
     private DaoSession daoSession;
-    private NoteDao noteDao;
-    private CustomerDao customerDao;
-    private List<Note> notes;
-    private List<Customer> customers;
+    private NotesDao noteDao;
+    private CustomersDao customerDao;
+    private List<Notes> notes;
+    private List<Customers> customers;
     private MyAdapter adapter;
     private GreenSync greenSync;
+    private List<Notes> demoNotes;
 
-    public static class MyAdapter extends ArrayAdapter<Note> {
+    public static class MyAdapter extends ArrayAdapter<Notes> {
 
         int mResource;
         LayoutInflater mInflater;
 
-        public MyAdapter(Context context, int resource, List<Note> objects) {
+        public MyAdapter(Context context, int resource, List<Notes> objects) {
             super(context, resource, objects);
 
             mResource = resource;
@@ -86,9 +86,9 @@ public View getView(int position, View convertView, ViewGroup parent) {
                 viewHolder = (ViewHolder) view.getTag();
             }
 
-            Note note = getItem(position);
+            Notes note = getItem(position);
 
-            viewHolder.title.setText(note.getText());
+            viewHolder.title.setText(note.getName());
             viewHolder.subTitle.setText(note.getComment());
 
             return view;
@@ -120,10 +120,10 @@ public void onCreate(Bundle savedInstanceState) {
 
         daoMaster = new DaoMaster(db);
         daoSession = daoMaster.newSession();
-        noteDao = daoSession.getNoteDao();
-        customerDao = daoSession.getCustomerDao();
+        noteDao = daoSession.getNotesDao();
+        customerDao = daoSession.getCustomersDao();
 
-        greenSync = new GreenSync(daoSession);
+        greenSync = new GreenSync(daoSession, MySyncServce.get(this));
 
         createDemoData();
 
@@ -142,17 +142,17 @@ private void createDemoData() {
 
         int max = 5;
 
-        List<Note> demoNotes = new ArrayList<Note>();
-        List<Customer> demoCustomers = new ArrayList<Customer>();
+        List<Notes> demoNotes = new ArrayList<Notes>();
+        List<Customers> demoCustomers = new ArrayList<Customers>();
 
         for (int i = 0; i < max; i++) {
 
-            Note note = new Note("comment " + i, "text " + i, null, NoteType.fromInt(i % 3));
+            Notes note = new Notes("My Note " + i, "Comment " + i, null, NoteType.fromInt(i % 3 + 1));
             note.setCreatedOn(new Date());
             note.setUpdatedOn(new Date());
             demoNotes.add(note);
 
-            Customer customer = new Customer("Joe Bob" + i, null);
+            Customers customer = new Customers("Joe Bob" + i, null);
             customer.setCreatedOn(new Date());
             customer.setUpdatedOn(new Date());
             demoCustomers.add(customer);
@@ -207,12 +207,12 @@ private void addNote() {
 
         final DateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);
         String comment = "Added on " + df.format(new Date());
-        Note note = new Note(comment, noteText, null, NoteType.FRISBEE);
+        Notes note = new Notes(comment, noteText, null, NoteType.FRISBEE);
         note.setCreatedOn(new Date());
         note.setUpdatedOn(new Date());
         noteDao.insert(note);
 
-        Customer customer = new Customer("Joe Bob", null);
+        Customers customer = new Customers("Joe Bob", null);
         customerDao.insert(customer);
 
         notes.add(note);
@@ -232,11 +232,14 @@ protected void onListItemClick(ListView l, View v, int position, long id) {
     }
 
     private void toJson() {
-        Long start = System.currentTimeMillis();
-        String json = greenSync.sync();
-        Log.i(TAG, "Write: " + json);
-        start = System.currentTimeMillis();
-        greenSync.processResponse(json);
-        Log.i(TAG, "Read: " + (System.currentTimeMillis() - start));
+        greenSync.sync();
+//        Long start = System.currentTimeMillis();
+//        String json = greenSync.syncBatch();
+//        Log.i(TAG, "Write: " + json);
+//        start = System.currentTimeMillis();
+//        greenSync.processResponse(json);
+//        Log.i(TAG, "Read: " + (System.currentTimeMillis() - start));
     }
+
+
 }
\ No newline at end of file
diff --git a/DaoExample/src/de/greenrobot/daoexample/StringRequest.java b/DaoExample/src/de/greenrobot/daoexample/StringRequest.java
new file mode 100644
index 00000000..0d22564b
--- /dev/null
+++ b/DaoExample/src/de/greenrobot/daoexample/StringRequest.java
@@ -0,0 +1,58 @@
+package de.greenrobot.daoexample;
+
+import android.util.Base64;
+import com.android.volley.AuthFailureError;
+import com.android.volley.NetworkResponse;
+import com.android.volley.ParseError;
+import com.android.volley.Response;
+import com.android.volley.Response.ErrorListener;
+import com.android.volley.Response.Listener;
+import com.android.volley.toolbox.HttpHeaderParser;
+import com.android.volley.toolbox.JsonRequest;
+
+import java.io.UnsupportedEncodingException;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Created by saulhoward on 3/31/14.
+ */
+public class StringRequest extends JsonRequest<String> {
+
+    /**
+     * Creates a new request
+     * @param method the HTTP method to use
+     * @param url URL to fetch the JSON from
+     * @param payload The body of the request
+     * @param listener Listener to receive the JSON response
+     * @param errorListener Error listener, or null to ignore errors.
+     */
+    public StringRequest(int method, String url, String payload,
+                         Listener<String> listener, ErrorListener errorListener) {
+        super(method, url, payload, listener, errorListener);
+    }
+
+    @Override
+    protected Response<String> parseNetworkResponse(NetworkResponse response) {
+        try {
+            String jsonString =
+                    new String(response.data, HttpHeaderParser.parseCharset(response.headers));
+            return Response.success(jsonString,
+                    HttpHeaderParser.parseCacheHeaders(response));
+        } catch (UnsupportedEncodingException e) {
+            return Response.error(new ParseError(e));
+        }
+    }
+
+    @Override
+    public Map<String, String> getHeaders() throws AuthFailureError {
+
+        HashMap<String, String> params = new HashMap<String, String>();
+
+        String creds = String.format("%s:%s","asdfjkl;qweruiop","");
+        String auth = "Basic " + Base64.encodeToString(creds.getBytes(), Base64.DEFAULT);
+        params.put("Authorization", auth);
+
+        return params;
+    }
+}
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/BaseState.java b/DaoExample/src/de/greenrobot/daoexample/database/BaseState.java
index 45225866..84dfbd76 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/BaseState.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/BaseState.java
@@ -10,7 +10,7 @@
     CREATE(1),
     UPDATE(2),
     DELETE(3),
-    CLEAN(3);
+    CLEAN(4);
 
     private static final Map<Long, BaseState> intToTypeMap = new HashMap<Long, BaseState>();
 
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/Customer.java b/DaoExample/src/de/greenrobot/daoexample/database/Customers.java
similarity index 87%
rename from DaoExample/src/de/greenrobot/daoexample/database/Customer.java
rename to DaoExample/src/de/greenrobot/daoexample/database/Customers.java
index ba9bfde4..ddf0ff4d 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/Customer.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/Customers.java
@@ -11,9 +11,9 @@
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
- * Entity mapped to table CUSTOMER.
+ * Entity mapped to table CUSTOMERS.
  */
-public class Customer extends SyncBase  {
+public class Customers extends SyncBase  {
 
     private transient Long syncBaseId;
     /** Not-null value. */
@@ -24,24 +24,24 @@
     private transient DaoSession daoSession;
 
     /** Used for active entity operations. */
-    private transient CustomerDao myDao;
+    private transient CustomersDao myDao;
     private List<Order> orders;
 
-    public Customer() {
+    public Customers() {
     }
 
-    public Customer(Long id) {
+    public Customers(Long id) {
         this.id = id;
         setDerivedEntityType(getClass().getCanonicalName());
     }
 
-    Customer(Long syncBaseId, String name, Long id) {
+    Customers(Long syncBaseId, String name, Long id) {
         this.syncBaseId = syncBaseId;
         this.name = name;
         this.id = id;
     }
 
-    public Customer(String name, Long id) {
+    public Customers(String name, Long id) {
         this.name = name;
         this.id = id;
         setDerivedEntityType(getClass().getCanonicalName());
@@ -52,7 +52,7 @@ public Customer(String name, Long id) {
     public void __setDaoSession(DaoSession daoSession) {
         super.__setDaoSession(daoSession);
         this.daoSession = daoSession;
-        myDao = daoSession != null ? daoSession.getCustomerDao() : null;
+        myDao = daoSession != null ? daoSession.getCustomersDao() : null;
     }
 
     public Long getSyncBaseId() {
@@ -118,7 +118,7 @@ public long getValue() {
                 throw new DaoException("Entity is detached from DAO context");
             }
             OrderDao targetDao = daoSession.getOrderDao();
-            List<Order> ordersNew = targetDao._queryCustomer_Orders(id);
+            List<Order> ordersNew = targetDao._queryCustomers_Orders(id);
             synchronized (this) {
                 if(orders == null) {
                     orders = ordersNew;
@@ -158,8 +158,8 @@ public void refresh() {
     }
 
     static {
-        GreenSync.registerListTypeToken("Customer", new TypeToken<List<Customer>>(){}.getType());
-        GreenSync.registerTypeToken("Customer", Customer.class);
+        GreenSync.registerListTypeToken("Customers", new TypeToken<List<Customers>>(){}.getType());
+        GreenSync.registerTypeToken("Customers", Customers.class);
     }
 
 }
\ No newline at end of file
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/CustomerDao.java b/DaoExample/src/de/greenrobot/daoexample/database/CustomersDao.java
similarity index 76%
rename from DaoExample/src/de/greenrobot/daoexample/database/CustomerDao.java
rename to DaoExample/src/de/greenrobot/daoexample/database/CustomersDao.java
index afd3a33c..7cfc5f28 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/CustomerDao.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/CustomersDao.java
@@ -8,18 +8,18 @@
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 
-import de.greenrobot.daoexample.database.Customer;
+import de.greenrobot.daoexample.database.Customers;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
- * DAO for table CUSTOMER.
+ * DAO for table CUSTOMERS.
 */
-public class CustomerDao extends AbstractDao<Customer, Long> {
+public class CustomersDao extends AbstractDao<Customers, Long> {
 
-    public static final String TABLENAME = "CUSTOMER";
+    public static final String TABLENAME = "CUSTOMERS";
 
     /**
-     * Properties of entity Customer.<br/>
+     * Properties of entity Customers.<br/>
      * Can be used for QueryBuilder and for referencing column names.
     */
     public static class Properties {
@@ -30,11 +30,11 @@
 
     private DaoSession daoSession;
 
-    public CustomerDao(DaoConfig config) {
+    public CustomersDao(DaoConfig config) {
         super(config);
     }
     
-    public CustomerDao(DaoConfig config, DaoSession daoSession) {
+    public CustomersDao(DaoConfig config, DaoSession daoSession) {
         super(config, daoSession);
         this.daoSession = daoSession;
     }
@@ -42,7 +42,7 @@ public CustomerDao(DaoConfig config, DaoSession daoSession) {
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'CUSTOMER' (" + //
+        db.execSQL("CREATE TABLE " + constraint + "'CUSTOMERS' (" + //
                 "'SYNC_BASE_ID' INTEGER REFERENCES 'SYNC_BASE'('SYNC_BASE_ID') ," + // 0: syncBaseId
                 "'NAME' TEXT NOT NULL ," + // 1: name
                 "'_id' INTEGER PRIMARY KEY );"); // 2: id
@@ -50,13 +50,13 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
 
     /** Drops the underlying database table. */
     public static void dropTable(SQLiteDatabase db, boolean ifExists) {
-        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CUSTOMER'";
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CUSTOMERS'";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, Customer entity) {
+    protected void bindValues(SQLiteStatement stmt, Customers entity) {
         stmt.clearBindings();
  
         Long syncBaseId = entity.getSyncBaseId();
@@ -72,7 +72,7 @@ protected void bindValues(SQLiteStatement stmt, Customer entity) {
     }
 
     @Override
-    protected void attachEntity(Customer entity) {
+    protected void attachEntity(Customers entity) {
         super.attachEntity(entity);
         entity.__setDaoSession(daoSession);
     }
@@ -85,8 +85,8 @@ public Long readKey(Cursor cursor, int offset) {
 
     /** @inheritdoc */
     @Override
-    public Customer readEntity(Cursor cursor, int offset) {
-        Customer entity = new Customer( //
+    public Customers readEntity(Cursor cursor, int offset) {
+        Customers entity = new Customers( //
             cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // syncBaseId
             cursor.getString(offset + 1), // name
             cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // id
@@ -96,7 +96,7 @@ public Customer readEntity(Cursor cursor, int offset) {
      
     /** @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, Customer entity, int offset) {
+    public void readEntity(Cursor cursor, Customers entity, int offset) {
         entity.setSyncBaseId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
         entity.setName(cursor.getString(offset + 1));
         entity.setId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
@@ -104,14 +104,14 @@ public void readEntity(Cursor cursor, Customer entity, int offset) {
     
     /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(Customer entity, long rowId) {
+    protected Long updateKeyAfterInsert(Customers entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
     /** @inheritdoc */
     @Override
-    public Long getKey(Customer entity) {
+    public Long getKey(Customers entity) {
         if(entity != null) {
             return entity.getId();
         } else {
@@ -126,28 +126,28 @@ protected boolean isEntityUpdateable() {
     }
     
     @Override
-    protected void onPreInsertEntity(Customer entity) {
+    protected void onPreInsertEntity(Customers entity) {
         entity.insertBase(daoSession.getSyncBaseDao());
         entity.setSyncBaseId(entity.getSyncBaseId());
     }
 
     @Override
-    protected void onPreLoadEntity(Customer entity) {
+    protected void onPreLoadEntity(Customers entity) {
         entity.loadBase(daoSession.getSyncBaseDao(), entity.getSyncBaseId());
     }
 
     @Override
-    protected void onPreRefreshEntity(Customer entity) {
+    protected void onPreRefreshEntity(Customers entity) {
         entity.loadBase(daoSession.getSyncBaseDao(), entity.getSyncBaseId());
     }
 
     @Override
-    protected void onPreUpdateEntity(Customer entity) {
+    protected void onPreUpdateEntity(Customers entity) {
         entity.updateBase(daoSession.getSyncBaseDao());
     }
 
     @Override
-    protected void onPreDeleteEntity(Customer entity) {
+    protected void onPreDeleteEntity(Customers entity) {
         entity.deleteBase(daoSession.getSyncBaseDao());
     }
 
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/DaoMaster.java b/DaoExample/src/de/greenrobot/daoexample/database/DaoMaster.java
index f75ac81d..74d37c2b 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/DaoMaster.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/DaoMaster.java
@@ -9,8 +9,8 @@
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 
 import de.greenrobot.daoexample.database.SyncBaseDao;
-import de.greenrobot.daoexample.database.NoteDao;
-import de.greenrobot.daoexample.database.CustomerDao;
+import de.greenrobot.daoexample.database.NotesDao;
+import de.greenrobot.daoexample.database.CustomersDao;
 import de.greenrobot.daoexample.database.OrderDao;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
@@ -23,16 +23,16 @@
     /** Creates underlying database table using DAOs. */
     public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
         SyncBaseDao.createTable(db, ifNotExists);
-        NoteDao.createTable(db, ifNotExists);
-        CustomerDao.createTable(db, ifNotExists);
+        NotesDao.createTable(db, ifNotExists);
+        CustomersDao.createTable(db, ifNotExists);
         OrderDao.createTable(db, ifNotExists);
     }
     
     /** Drops underlying database table using DAOs. */
     public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
         SyncBaseDao.dropTable(db, ifExists);
-        NoteDao.dropTable(db, ifExists);
-        CustomerDao.dropTable(db, ifExists);
+        NotesDao.dropTable(db, ifExists);
+        CustomersDao.dropTable(db, ifExists);
         OrderDao.dropTable(db, ifExists);
     }
     
@@ -66,8 +66,8 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
     public DaoMaster(SQLiteDatabase db) {
         super(db, SCHEMA_VERSION);
         registerDaoClass(SyncBaseDao.class);
-        registerDaoClass(NoteDao.class);
-        registerDaoClass(CustomerDao.class);
+        registerDaoClass(NotesDao.class);
+        registerDaoClass(CustomersDao.class);
         registerDaoClass(OrderDao.class);
     }
     
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/DaoSession.java b/DaoExample/src/de/greenrobot/daoexample/database/DaoSession.java
index 23aaa60f..69a56ca2 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/DaoSession.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/DaoSession.java
@@ -11,14 +11,14 @@
 
 import de.greenrobot.daoexample.database.SyncBase;
 import de.greenrobot.daoexample.database.BaseState;
-import de.greenrobot.daoexample.database.Note;
+import de.greenrobot.daoexample.database.Notes;
 import de.greenrobot.daoexample.database.NoteType;
-import de.greenrobot.daoexample.database.Customer;
+import de.greenrobot.daoexample.database.Customers;
 import de.greenrobot.daoexample.database.Order;
 
 import de.greenrobot.daoexample.database.SyncBaseDao;
-import de.greenrobot.daoexample.database.NoteDao;
-import de.greenrobot.daoexample.database.CustomerDao;
+import de.greenrobot.daoexample.database.NotesDao;
+import de.greenrobot.daoexample.database.CustomersDao;
 import de.greenrobot.daoexample.database.OrderDao;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
@@ -31,13 +31,13 @@
 public class DaoSession extends AbstractDaoSession {
 
     private final DaoConfig syncBaseDaoConfig;
-    private final DaoConfig noteDaoConfig;
-    private final DaoConfig customerDaoConfig;
+    private final DaoConfig notesDaoConfig;
+    private final DaoConfig customersDaoConfig;
     private final DaoConfig orderDaoConfig;
 
     private final SyncBaseDao syncBaseDao;
-    private final NoteDao noteDao;
-    private final CustomerDao customerDao;
+    private final NotesDao notesDao;
+    private final CustomersDao customersDao;
     private final OrderDao orderDao;
 
     public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
@@ -47,30 +47,30 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         syncBaseDaoConfig = daoConfigMap.get(SyncBaseDao.class).clone();
         syncBaseDaoConfig.initIdentityScope(type);
 
-        noteDaoConfig = daoConfigMap.get(NoteDao.class).clone();
-        noteDaoConfig.initIdentityScope(type);
+        notesDaoConfig = daoConfigMap.get(NotesDao.class).clone();
+        notesDaoConfig.initIdentityScope(type);
 
-        customerDaoConfig = daoConfigMap.get(CustomerDao.class).clone();
-        customerDaoConfig.initIdentityScope(type);
+        customersDaoConfig = daoConfigMap.get(CustomersDao.class).clone();
+        customersDaoConfig.initIdentityScope(type);
 
         orderDaoConfig = daoConfigMap.get(OrderDao.class).clone();
         orderDaoConfig.initIdentityScope(type);
 
         syncBaseDao = new SyncBaseDao(syncBaseDaoConfig, this);
-        noteDao = new NoteDao(noteDaoConfig, this);
-        customerDao = new CustomerDao(customerDaoConfig, this);
+        notesDao = new NotesDao(notesDaoConfig, this);
+        customersDao = new CustomersDao(customersDaoConfig, this);
         orderDao = new OrderDao(orderDaoConfig, this);
 
         registerDao(SyncBase.class, syncBaseDao);
-        registerDao(Note.class, noteDao);
-        registerDao(Customer.class, customerDao);
+        registerDao(Notes.class, notesDao);
+        registerDao(Customers.class, customersDao);
         registerDao(Order.class, orderDao);
     }
     
     public void clear() {
         syncBaseDaoConfig.getIdentityScope().clear();
-        noteDaoConfig.getIdentityScope().clear();
-        customerDaoConfig.getIdentityScope().clear();
+        notesDaoConfig.getIdentityScope().clear();
+        customersDaoConfig.getIdentityScope().clear();
         orderDaoConfig.getIdentityScope().clear();
     }
 
@@ -78,12 +78,12 @@ public SyncBaseDao getSyncBaseDao() {
         return syncBaseDao;
     }
 
-    public NoteDao getNoteDao() {
-        return noteDao;
+    public NotesDao getNotesDao() {
+        return notesDao;
     }
 
-    public CustomerDao getCustomerDao() {
-        return customerDao;
+    public CustomersDao getCustomersDao() {
+        return customersDao;
     }
 
     public OrderDao getOrderDao() {
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/Note.java b/DaoExample/src/de/greenrobot/daoexample/database/Notes.java
similarity index 79%
rename from DaoExample/src/de/greenrobot/daoexample/database/Note.java
rename to DaoExample/src/de/greenrobot/daoexample/database/Notes.java
index 256fde20..df149d6f 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/Note.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/Notes.java
@@ -8,13 +8,13 @@
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
- * Entity mapped to table NOTE.
+ * Entity mapped to table NOTES.
  */
-public class Note extends SyncBase  {
+public class Notes extends SyncBase  {
 
     private transient Long syncBaseId;
     /** Not-null value. */
-    private String text;
+    private String name;
     private String comment;
     private transient Long id;
     private NoteType type;
@@ -23,26 +23,26 @@
     private transient DaoSession daoSession;
 
     /** Used for active entity operations. */
-    private transient NoteDao myDao;
+    private transient NotesDao myDao;
 
-    public Note() {
+    public Notes() {
     }
 
-    public Note(Long id) {
+    public Notes(Long id) {
         this.id = id;
         setDerivedEntityType(getClass().getCanonicalName());
     }
 
-    Note(Long syncBaseId, String text, String comment, Long id, NoteType type) {
+    Notes(Long syncBaseId, String name, String comment, Long id, NoteType type) {
         this.syncBaseId = syncBaseId;
-        this.text = text;
+        this.name = name;
         this.comment = comment;
         this.id = id;
         this.type = type;
     }
 
-    public Note(String text, String comment, Long id, NoteType type) {
-        this.text = text;
+    public Notes(String name, String comment, Long id, NoteType type) {
+        this.name = name;
         this.comment = comment;
         this.id = id;
         this.type = type;
@@ -54,7 +54,7 @@ public Note(String text, String comment, Long id, NoteType type) {
     public void __setDaoSession(DaoSession daoSession) {
         super.__setDaoSession(daoSession);
         this.daoSession = daoSession;
-        myDao = daoSession != null ? daoSession.getNoteDao() : null;
+        myDao = daoSession != null ? daoSession.getNotesDao() : null;
     }
 
     public Long getSyncBaseId() {
@@ -66,13 +66,13 @@ public void setSyncBaseId(Long syncBaseId) {
     }
 
     /** Not-null value. */
-    public String getText() {
-        return text;
+    public String getName() {
+        return name;
     }
 
     /** Not-null value; ensure this value is available before it is saved to the database. */
-    public void setText(String text) {
-        this.text = text;
+    public void setName(String name) {
+        this.name = name;
     }
 
     public String getComment() {
@@ -124,8 +124,8 @@ public void refresh() {
     }
 
     static {
-        GreenSync.registerListTypeToken("Note", new TypeToken<List<Note>>(){}.getType());
-        GreenSync.registerTypeToken("Note", Note.class);
+        GreenSync.registerListTypeToken("Notes", new TypeToken<List<Notes>>(){}.getType());
+        GreenSync.registerTypeToken("Notes", Notes.class);
     }
 
 }
\ No newline at end of file
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/NoteDao.java b/DaoExample/src/de/greenrobot/daoexample/database/NotesDao.java
similarity index 75%
rename from DaoExample/src/de/greenrobot/daoexample/database/NoteDao.java
rename to DaoExample/src/de/greenrobot/daoexample/database/NotesDao.java
index 2ff81f6c..9df9bc00 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/NoteDao.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/NotesDao.java
@@ -3,25 +3,29 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
+
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 
+import de.greenrobot.daoexample.database.Notes;
+import de.greenrobot.daoexample.database.NoteType;
+
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
- * DAO for table NOTE.
+ * DAO for table NOTES.
 */
-public class NoteDao extends AbstractDao<Note, Long> {
+public class NotesDao extends AbstractDao<Notes, Long> {
 
-    public static final String TABLENAME = "NOTE";
+    public static final String TABLENAME = "NOTES";
 
     /**
-     * Properties of entity Note.<br/>
+     * Properties of entity Notes.<br/>
      * Can be used for QueryBuilder and for referencing column names.
     */
     public static class Properties {
         public final static Property SyncBaseId = new Property(0, Long.class, "syncBaseId", false, "SYNC_BASE_ID");
-        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
+        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
         public final static Property Comment = new Property(2, String.class, "comment", false, "COMMENT");
         public final static Property Id = new Property(3, Long.class, "id", true, "_id");
         public final static Property Type = new Property(4, NoteType.class, "type", false, "TYPE");
@@ -29,11 +33,11 @@
 
     private DaoSession daoSession;
 
-    public NoteDao(DaoConfig config) {
+    public NotesDao(DaoConfig config) {
         super(config);
     }
     
-    public NoteDao(DaoConfig config, DaoSession daoSession) {
+    public NotesDao(DaoConfig config, DaoSession daoSession) {
         super(config, daoSession);
         this.daoSession = daoSession;
     }
@@ -41,9 +45,9 @@ public NoteDao(DaoConfig config, DaoSession daoSession) {
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'NOTE' (" + //
+        db.execSQL("CREATE TABLE " + constraint + "'NOTES' (" + //
                 "'SYNC_BASE_ID' INTEGER REFERENCES 'SYNC_BASE'('SYNC_BASE_ID') ," + // 0: syncBaseId
-                "'TEXT' TEXT NOT NULL ," + // 1: text
+                "'NAME' TEXT NOT NULL ," + // 1: name
                 "'COMMENT' TEXT," + // 2: comment
                 "'_id' INTEGER PRIMARY KEY ," + // 3: id
                 "'TYPE' INTEGER);"); // 4: type
@@ -51,20 +55,20 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
 
     /** Drops the underlying database table. */
     public static void dropTable(SQLiteDatabase db, boolean ifExists) {
-        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTES'";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, Note entity) {
+    protected void bindValues(SQLiteStatement stmt, Notes entity) {
         stmt.clearBindings();
  
         Long syncBaseId = entity.getSyncBaseId();
         if (syncBaseId != null) {
             stmt.bindLong(1, syncBaseId);
         }
-        stmt.bindString(2, entity.getText());
+        stmt.bindString(2, entity.getName());
  
         String comment = entity.getComment();
         if (comment != null) {
@@ -83,7 +87,7 @@ protected void bindValues(SQLiteStatement stmt, Note entity) {
     }
 
     @Override
-    protected void attachEntity(Note entity) {
+    protected void attachEntity(Notes entity) {
         super.attachEntity(entity);
         entity.__setDaoSession(daoSession);
     }
@@ -96,10 +100,10 @@ public Long readKey(Cursor cursor, int offset) {
 
     /** @inheritdoc */
     @Override
-    public Note readEntity(Cursor cursor, int offset) {
-        Note entity = new Note( //
+    public Notes readEntity(Cursor cursor, int offset) {
+        Notes entity = new Notes( //
             cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // syncBaseId
-            cursor.getString(offset + 1), // text
+            cursor.getString(offset + 1), // name
             cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comment
             cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // id
             cursor.isNull(offset + 4) ? null : NoteType.fromInt(cursor.getLong(offset + 4)) // type
@@ -109,9 +113,9 @@ public Note readEntity(Cursor cursor, int offset) {
      
     /** @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, Note entity, int offset) {
+    public void readEntity(Cursor cursor, Notes entity, int offset) {
         entity.setSyncBaseId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setText(cursor.getString(offset + 1));
+        entity.setName(cursor.getString(offset + 1));
         entity.setComment(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
         entity.setId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
         entity.setType(cursor.isNull(offset + 4) ? null : NoteType.fromInt(cursor.getLong(offset + 4)));
@@ -119,14 +123,14 @@ public void readEntity(Cursor cursor, Note entity, int offset) {
     
     /** @inheritdoc */
     @Override
-    protected Long updateKeyAfterInsert(Note entity, long rowId) {
+    protected Long updateKeyAfterInsert(Notes entity, long rowId) {
         entity.setId(rowId);
         return rowId;
     }
     
     /** @inheritdoc */
     @Override
-    public Long getKey(Note entity) {
+    public Long getKey(Notes entity) {
         if(entity != null) {
             return entity.getId();
         } else {
@@ -141,28 +145,28 @@ protected boolean isEntityUpdateable() {
     }
     
     @Override
-    protected void onPreInsertEntity(Note entity) {
+    protected void onPreInsertEntity(Notes entity) {
         entity.insertBase(daoSession.getSyncBaseDao());
         entity.setSyncBaseId(entity.getSyncBaseId());
     }
 
     @Override
-    protected void onPreLoadEntity(Note entity) {
+    protected void onPreLoadEntity(Notes entity) {
         entity.loadBase(daoSession.getSyncBaseDao(), entity.getSyncBaseId());
     }
 
     @Override
-    protected void onPreRefreshEntity(Note entity) {
+    protected void onPreRefreshEntity(Notes entity) {
         entity.loadBase(daoSession.getSyncBaseDao(), entity.getSyncBaseId());
     }
 
     @Override
-    protected void onPreUpdateEntity(Note entity) {
+    protected void onPreUpdateEntity(Notes entity) {
         entity.updateBase(daoSession.getSyncBaseDao());
     }
 
     @Override
-    protected void onPreDeleteEntity(Note entity) {
+    protected void onPreDeleteEntity(Notes entity) {
         entity.deleteBase(daoSession.getSyncBaseDao());
     }
 
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/Order.java b/DaoExample/src/de/greenrobot/daoexample/database/Order.java
index 77ff2d5a..f4ba2f63 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/Order.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/Order.java
@@ -3,7 +3,7 @@
 import java.util.List;
 import de.greenrobot.dao.sync.GreenSync;
 import com.google.gson.reflect.TypeToken;
-import de.greenrobot.daoexample.database.Customer.OrderType;
+import de.greenrobot.daoexample.database.Customers.OrderType;
 import de.greenrobot.dao.DaoException;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
@@ -23,8 +23,8 @@
 
     /** Used for active entity operations. */
     private transient OrderDao myDao;
-    private Customer customer;
-    private Long customer__resolvedKey;
+    private Customers customers;
+    private Long customers__resolvedKey;
 
     public Order() {
     }
@@ -99,30 +99,30 @@ public void setCustomerId(long customerId) {
     }
 
     /** To-one relationship, resolved on first access. */
-    public Customer getCustomer() {
+    public Customers getCustomers() {
         long __key = this.customerId;
-        if (customer__resolvedKey == null || !customer__resolvedKey.equals(__key)) {
+        if (customers__resolvedKey == null || !customers__resolvedKey.equals(__key)) {
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
             }
-            CustomerDao targetDao = daoSession.getCustomerDao();
-            Customer customerNew = targetDao.load(__key);
+            CustomersDao targetDao = daoSession.getCustomersDao();
+            Customers customersNew = targetDao.load(__key);
             synchronized (this) {
-                customer = customerNew;
-            	customer__resolvedKey = __key;
+                customers = customersNew;
+            	customers__resolvedKey = __key;
             }
         }
-        return customer;
+        return customers;
     }
 
-    public void setCustomer(Customer customer) {
-        if (customer == null) {
+    public void setCustomers(Customers customers) {
+        if (customers == null) {
             throw new DaoException("To-one property 'customerId' has not-null constraint; cannot set to-one to null");
         }
         synchronized (this) {
-            this.customer = customer;
-            customerId = customer.getId();
-            customer__resolvedKey = customerId;
+            this.customers = customers;
+            customerId = customers.getId();
+            customers__resolvedKey = customerId;
         }
     }
 
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/OrderDao.java b/DaoExample/src/de/greenrobot/daoexample/database/OrderDao.java
index aa44a6ff..6fa32873 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/OrderDao.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/OrderDao.java
@@ -1,20 +1,18 @@
 package de.greenrobot.daoexample.database;
 
-import java.util.List;
-import java.util.ArrayList;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
-
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.SqlUtils;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.internal.SqlUtils;
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
+import de.greenrobot.daoexample.database.Customers.OrderType;
 
-import de.greenrobot.daoexample.database.Order;
-import de.greenrobot.daoexample.database.Customer.OrderType;
+import java.util.ArrayList;
+import java.util.List;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -38,7 +36,7 @@
 
     private DaoSession daoSession;
 
-    private Query<Order> customer_OrdersQuery;
+    private Query<Order> customers_OrdersQuery;
 
     public OrderDao(DaoConfig config) {
         super(config);
@@ -151,114 +149,114 @@ protected boolean isEntityUpdateable() {
         return true;
     }
     
-    /** Internal query to resolve the "orders" to-many relationship of Customer. */
-    public List<Order> _queryCustomer_Orders(long customerId) {
+    /** Internal query to resolve the "orders" to-many relationship of Customers. */
+    public List<Order> _queryCustomers_Orders(long customerId) {
         synchronized (this) {
-            if (customer_OrdersQuery == null) {
+            if (customers_OrdersQuery == null) {
                 QueryBuilder<Order> queryBuilder = queryBuilder();
                 queryBuilder.where(Properties.CustomerId.eq(null));
                 queryBuilder.orderRaw("DATE ASC");
-                customer_OrdersQuery = queryBuilder.build();
+                customers_OrdersQuery = queryBuilder.build();
             }
         }
-        Query<Order> query = customer_OrdersQuery.forCurrentThread();
+        Query<Order> query = customers_OrdersQuery.forCurrentThread();
         query.setParameter(0, customerId);
         return query.list();
     }
 
-    private String selectDeep;
-
-    protected String getSelectDeep() {
-        if (selectDeep == null) {
-            StringBuilder builder = new StringBuilder("SELECT ");
-            SqlUtils.appendColumns(builder, "T", getAllColumns());
-            builder.append(',');
-            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomerDao().getAllColumns());
-            builder.append(" FROM ORDERS T");
-            builder.append(" LEFT JOIN CUSTOMER T0 ON T.'CUSTOMER_ID'=T0.'_id'");
-            builder.append(' ');
-            selectDeep = builder.toString();
-        }
-        return selectDeep;
-    }
-    
-    protected Order loadCurrentDeep(Cursor cursor, boolean lock) {
-        Order entity = loadCurrent(cursor, 0, lock);
-        int offset = getAllColumns().length;
-
-        Customer customer = loadCurrentOther(daoSession.getCustomerDao(), cursor, offset);
-         if(customer != null) {
-            entity.setCustomer(customer);
-        }
-
-        return entity;    
-    }
-
-    public Order loadDeep(Long key) {
-        assertSinglePk();
-        if (key == null) {
-            return null;
-        }
-
-        StringBuilder builder = new StringBuilder(getSelectDeep());
-        builder.append("WHERE ");
-        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
-        String sql = builder.toString();
-        
-        String[] keyArray = new String[] { key.toString() };
-        Cursor cursor = db.rawQuery(sql, keyArray);
-        
-        try {
-            boolean available = cursor.moveToFirst();
-            if (!available) {
-                return null;
-            } else if (!cursor.isLast()) {
-                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
-            }
-            return loadCurrentDeep(cursor, true);
-        } finally {
-            cursor.close();
-        }
-    }
-    
-    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
-    public List<Order> loadAllDeepFromCursor(Cursor cursor) {
-        int count = cursor.getCount();
-        List<Order> list = new ArrayList<Order>(count);
-        
-        if (cursor.moveToFirst()) {
-            if (identityScope != null) {
-                identityScope.lock();
-                identityScope.reserveRoom(count);
-            }
-            try {
-                do {
-                    list.add(loadCurrentDeep(cursor, false));
-                } while (cursor.moveToNext());
-            } finally {
-                if (identityScope != null) {
-                    identityScope.unlock();
-                }
-            }
-        }
-        return list;
-    }
-    
-    protected List<Order> loadDeepAllAndCloseCursor(Cursor cursor) {
-        try {
-            return loadAllDeepFromCursor(cursor);
-        } finally {
-            cursor.close();
-        }
-    }
-    
-
-    /** A raw-style query where you can pass any WHERE clause and arguments. */
-    public List<Order> queryDeep(String where, String... selectionArg) {
-        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
-        return loadDeepAllAndCloseCursor(cursor);
-    }
- 
+    private String selectDeep;
+
+    protected String getSelectDeep() {
+        if (selectDeep == null) {
+            StringBuilder builder = new StringBuilder("SELECT ");
+            SqlUtils.appendColumns(builder, "T", getAllColumns());
+            builder.append(',');
+            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomersDao().getAllColumns());
+            builder.append(" FROM ORDERS T");
+            builder.append(" LEFT JOIN CUSTOMERS T0 ON T.'CUSTOMER_ID'=T0.'_id'");
+            builder.append(' ');
+            selectDeep = builder.toString();
+        }
+        return selectDeep;
+    }
+    
+    protected Order loadCurrentDeep(Cursor cursor, boolean lock) {
+        Order entity = loadCurrent(cursor, 0, lock);
+        int offset = getAllColumns().length;
+
+        Customers customers = loadCurrentOther(daoSession.getCustomersDao(), cursor, offset);
+         if(customers != null) {
+            entity.setCustomers(customers);
+        }
+
+        return entity;    
+    }
+
+    public Order loadDeep(Long key) {
+        assertSinglePk();
+        if (key == null) {
+            return null;
+        }
+
+        StringBuilder builder = new StringBuilder(getSelectDeep());
+        builder.append("WHERE ");
+        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
+        String sql = builder.toString();
+        
+        String[] keyArray = new String[] { key.toString() };
+        Cursor cursor = db.rawQuery(sql, keyArray);
+        
+        try {
+            boolean available = cursor.moveToFirst();
+            if (!available) {
+                return null;
+            } else if (!cursor.isLast()) {
+                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
+            }
+            return loadCurrentDeep(cursor, true);
+        } finally {
+            cursor.close();
+        }
+    }
+    
+    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
+    public List<Order> loadAllDeepFromCursor(Cursor cursor) {
+        int count = cursor.getCount();
+        List<Order> list = new ArrayList<Order>(count);
+        
+        if (cursor.moveToFirst()) {
+            if (identityScope != null) {
+                identityScope.lock();
+                identityScope.reserveRoom(count);
+            }
+            try {
+                do {
+                    list.add(loadCurrentDeep(cursor, false));
+                } while (cursor.moveToNext());
+            } finally {
+                if (identityScope != null) {
+                    identityScope.unlock();
+                }
+            }
+        }
+        return list;
+    }
+    
+    protected List<Order> loadDeepAllAndCloseCursor(Cursor cursor) {
+        try {
+            return loadAllDeepFromCursor(cursor);
+        } finally {
+            cursor.close();
+        }
+    }
+    
+
+    /** A raw-style query where you can pass any WHERE clause and arguments. */
+    public List<Order> queryDeep(String where, String... selectionArg) {
+        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
+        return loadDeepAllAndCloseCursor(cursor);
+    }
+ 
     @Override
     protected void onPreInsertEntity(Order entity) {
         entity.insertBase(daoSession.getSyncBaseDao());
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/SyncBase.java b/DaoExample/src/de/greenrobot/daoexample/database/SyncBase.java
index a1628138..7ff6b119 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/SyncBase.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/SyncBase.java
@@ -8,7 +8,7 @@
 /**
  * Entity mapped to table SYNC_BASE.
  */
-public class SyncBase implements GreenSyncBase {
+public class SyncBase extends GreenSyncBase  {
 
     private java.util.Date updatedOn;
     private transient BaseState state;
@@ -58,6 +58,7 @@ void insertBase(SyncBaseDao dao) {
     }
 
     void updateBase(SyncBaseDao dao) {
+        if (state == BaseState.CREATE) return;
         myDao = dao;
         setState(BaseState.UPDATE);
         myDao.update(this);
@@ -68,6 +69,11 @@ void deleteBase(SyncBaseDao dao) {
         setState(BaseState.DELETE);
         myDao.delete(this);
     }
+
+    @Override
+    public void clean() {
+        setState(BaseState.CLEAN);
+    }
     public java.util.Date getUpdatedOn() {
         return updatedOn;
     }
diff --git a/DaoExample/src/de/greenrobot/daoexample/database/SyncBaseDao.java b/DaoExample/src/de/greenrobot/daoexample/database/SyncBaseDao.java
index b8c73f2a..fcdfa628 100644
--- a/DaoExample/src/de/greenrobot/daoexample/database/SyncBaseDao.java
+++ b/DaoExample/src/de/greenrobot/daoexample/database/SyncBaseDao.java
@@ -9,6 +9,7 @@
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 import de.greenrobot.dao.query.Query;
+import de.greenrobot.dao.sync.GreenSyncBase;
 import de.greenrobot.dao.sync.GreenSyncDaoBase;
 
 import java.util.ArrayList;
@@ -20,7 +21,7 @@
 /** 
  * DAO for table SYNC_BASE.
 */
-public class SyncBaseDao extends AbstractDao<SyncBase, Long> implements GreenSyncDaoBase {
+public class SyncBaseDao extends AbstractDao<SyncBase, Long> implements GreenSyncDaoBase<SyncBase> {
 
     public static final String TABLENAME = "SYNC_BASE";
 
@@ -168,16 +169,16 @@ protected boolean isEntityUpdateable() {
     * @param state
     * @return
     */
-    private Map loadState(BaseState state) {
+    private Map<String, List<GreenSyncBase>> loadState(BaseState state) {
 
-        Query query = queryBuilder().where(Properties.State.eq(state.getValue())).orderAsc(Properties.DerivedEntityType).build();
-        Cursor cursor = query.getCursor();
+    Query query = queryBuilder().where(Properties.State.eq(state.getValue())).orderAsc(Properties.DerivedEntityType).build();
+    Cursor cursor = query.getCursor();
 
-        Map<String, List> map = new HashMap<String, List>();
+    Map<String, List<GreenSyncBase>> map = new HashMap<String, List<GreenSyncBase>>();
 
         if (cursor.moveToFirst()) {
 
-            List list = new ArrayList<Object>();
+            List<GreenSyncBase> list = new ArrayList<GreenSyncBase>();
 
             do {
                 Long baseId = cursor.getLong(Properties.SyncBaseId.ordinal);
@@ -185,13 +186,13 @@ private Map loadState(BaseState state) {
                 String[] key = type.split("\\.");
 
                 if (!map.containsKey(key[key.length - 1])) {
-                    list = new ArrayList<Object>();
+                    list = new ArrayList<GreenSyncBase>();
                     map.put(key[key.length - 1], list);
                 }
 
                 try {
                     AbstractDao abstractDao = daoSession.getDao(Class.forName(type));
-                    Object object = abstractDao.queryBuilder().where(Properties.SyncBaseId.eq(baseId)).uniqueOrThrow();
+                    GreenSyncBase object = (GreenSyncBase) abstractDao.queryBuilder().where(Properties.SyncBaseId.eq(baseId)).uniqueOrThrow();
                     list.add(object);
                 } catch (ClassNotFoundException ex) {
                     Log.e("SyncBaseDao", "Could not load dao for class " + type);
@@ -205,17 +206,17 @@ private Map loadState(BaseState state) {
     }
 
     @Override
-    public Map getUpdatedObjects() {
+    public Map<String, List<GreenSyncBase>> getUpdatedObjects() {
         return loadState(BaseState.UPDATE);
     }
 
     @Override
-    public Map getDeletedObjects() {
+    public Map<String, List<GreenSyncBase>> getDeletedObjects() {
         return loadState(BaseState.DELETE);
     }
 
     @Override
-    public Map getCreatedObjects() {
+    public Map<String, List<GreenSyncBase>> getCreatedObjects() {
         return loadState(BaseState.CREATE);
     }
 }
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index b0cbd7f6..2a9aa89a 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -39,9 +39,9 @@ public static void main(String[] args) throws Exception {
     }
 
     private static void addNote(Schema schema) {
-        Entity note = schema.addEntity("Note");
+        Entity note = schema.addEntity("Notes");
         note.addIdProperty().markTransient();
-        note.addStringProperty("text").notNull();
+        note.addStringProperty("name").notNull();
         note.addStringProperty("comment");
 
         addNoteType(schema, note);
@@ -67,7 +67,7 @@ private static EntityEnum addOrderType(Entity entity) {
     }
 
     private static void addCustomerOrder(Schema schema) {
-        Entity customer = schema.addEntity("Customer");
+        Entity customer = schema.addEntity("Customers");
         customer.addIdProperty().markTransient();
         customer.addStringProperty("name").notNull();
 
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index d43762c0..daf23011 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -65,6 +65,7 @@ import ${entity.javaPackage}.${entity.className}.Builder;
 import android.util.Log;
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.sync.GreenSyncDaoBase;
+import de.greenrobot.dao.sync.GreenSyncBase;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -76,7 +77,7 @@ import java.util.Map;
 /** 
  * DAO for table ${entity.tableName}.
 */
-public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${entity.pkType}><#if entity.aBaseEntity> implements GreenSyncDaoBase</#if> {
+public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${entity.pkType}><#if entity.aBaseEntity> implements GreenSyncDaoBase<${entity.className}></#if> {
 
     public static final String TABLENAME = "${entity.tableName}";
 
@@ -353,16 +354,16 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
     * @param state
     * @return
     */
-    private Map loadState(BaseState state) {
+    private Map<String, List<GreenSyncBase>> loadState(BaseState state) {
 
-        Query query = queryBuilder().where(Properties.State.eq(state.getValue())).orderAsc(Properties.DerivedEntityType).build();
-        Cursor cursor = query.getCursor();
+    Query query = queryBuilder().where(Properties.State.eq(state.getValue())).orderAsc(Properties.DerivedEntityType).build();
+    Cursor cursor = query.getCursor();
 
-        Map<String, List> map = new HashMap<String, List>();
+    Map<String, List<GreenSyncBase>> map = new HashMap<String, List<GreenSyncBase>>();
 
         if (cursor.moveToFirst()) {
 
-            List list = new ArrayList<Object>();
+            List<GreenSyncBase> list = new ArrayList<GreenSyncBase>();
 
             do {
                 Long baseId = cursor.getLong(Properties.SyncBaseId.ordinal);
@@ -370,13 +371,13 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
                 String[] key = type.split("\\.");
 
                 if (!map.containsKey(key[key.length - 1])) {
-                    list = new ArrayList<Object>();
+                    list = new ArrayList<GreenSyncBase>();
                     map.put(key[key.length - 1], list);
                 }
 
                 try {
                     AbstractDao abstractDao = daoSession.getDao(Class.forName(type));
-                    Object object = abstractDao.queryBuilder().where(Properties.SyncBaseId.eq(baseId)).uniqueOrThrow();
+                    GreenSyncBase object = (GreenSyncBase) abstractDao.queryBuilder().where(Properties.SyncBaseId.eq(baseId)).uniqueOrThrow();
                     list.add(object);
                 } catch (ClassNotFoundException ex) {
                     Log.e("SyncBaseDao", "Could not load dao for class " + type);
@@ -390,17 +391,17 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
     }
 
     @Override
-    public Map getUpdatedObjects() {
+    public Map<String, List<GreenSyncBase>> getUpdatedObjects() {
         return loadState(BaseState.UPDATE);
     }
 
     @Override
-    public Map getDeletedObjects() {
+    public Map<String, List<GreenSyncBase>> getDeletedObjects() {
         return loadState(BaseState.DELETE);
     }
 
     @Override
-    public Map getCreatedObjects() {
+    public Map<String, List<GreenSyncBase>> getCreatedObjects() {
         return loadState(BaseState.CREATE);
     }
 </#if>
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 3d34c1a6..f06ba425 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -170,6 +170,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     }
 
     void updateBase(SyncBaseDao dao) {
+        if (state == BaseState.CREATE) return;
         myDao = dao;
         setState(BaseState.UPDATE);
         myDao.update(this);
@@ -180,6 +181,11 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
         setState(BaseState.DELETE);
         myDao.delete(this);
     }
+
+    @Override
+    public void clean() {
+        setState(BaseState.CLEAN);
+    }
 </#if>
 <#list entity.properties as property>
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
index 26a79c0a..044029f7 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
@@ -61,13 +61,13 @@ public void enableGreenSync() {
         syncBaseEntity.addDateProperty("createdOn");
         syncBaseEntity.addDateProperty("updatedOn");
         syncBaseEntity.addStringProperty("externalId");
-        syncBaseEntity.implementsInterface("GreenSyncBase");
+        syncBaseEntity.setSuperclass("GreenSyncBase");
 
         ArrayList<EntityEnum.Value> values = new ArrayList<EntityEnum.Value>();
         values.add(new EntityEnum.Value("create", 1));
         values.add(new EntityEnum.Value("update", 2));
         values.add(new EntityEnum.Value("delete", 3));
-        values.add(new EntityEnum.Value("clean", 3));
+        values.add(new EntityEnum.Value("clean", 4));
         EnumEntity enumEntity = addEnumEntity("BaseState", values);
 
         syncBaseEntity.addEnumProperty(enumEntity.getEntityEnum(), "state").markTransient();
diff --git a/data.ab b/data.ab
new file mode 100644
index 00000000..023831bc
Binary files /dev/null and b/data.ab differ
