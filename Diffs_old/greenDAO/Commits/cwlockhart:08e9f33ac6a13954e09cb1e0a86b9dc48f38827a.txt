diff --git a/DaoCore/build.gradle b/DaoCore/build.gradle
index b73c8a5a..81387b80 100644
--- a/DaoCore/build.gradle
+++ b/DaoCore/build.gradle
@@ -19,7 +19,7 @@ dependencies {
     compileOnly 'com.google.android:annotations:4.1.1.4'
     compileOnly 'com.google.android:support-v4:r7'
 
-    compileOnly 'io.reactivex:rxjava:1.1.7'
+    compileOnly 'io.reactivex:rxjava:1.1.8'
 
     compileOnly files('libs/sqlcipher.jar')
 }
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDaoSession.java b/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDaoSession.java
index fc71a0d6..f8636bb6 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDaoSession.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDaoSession.java
@@ -209,8 +209,8 @@ public AsyncSession startAsyncSession() {
     }
 
     /**
-     * The returned {@link RxTransaction} allows using DB transactions using Rx Observables without any Scheduler set
-     * for subscribeOn.
+     * The returned {@link RxTransaction} allows DB transactions using Rx Observables without any Scheduler set for
+     * subscribeOn.
      *
      * @see #rxTx()
      */
@@ -223,7 +223,7 @@ public RxTransaction rxTxPlain() {
     }
 
     /**
-     * The returned {@link RxTransaction} allows using DB transactions using Rx Observables using RX's IO scheduler for
+     * The returned {@link RxTransaction} allows DB transactions using Rx Observables using RX's IO scheduler for
      * subscribeOn.
      *
      * @see #rxTxPlain()
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/query/AbstractQueryData.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/AbstractQueryData.java
index 2321d8d5..0fff9f04 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/query/AbstractQueryData.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/AbstractQueryData.java
@@ -16,26 +16,31 @@
 
 package org.greenrobot.greendao.query;
 
-import java.lang.ref.WeakReference;
-
-import android.os.Process;
-import android.util.SparseArray;
 import org.greenrobot.greendao.AbstractDao;
 
+import java.lang.ref.WeakReference;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+
 abstract class AbstractQueryData<T, Q extends AbstractQuery<T>> {
     final String sql;
     final AbstractDao<T, ?> dao;
     final String[] initialValues;
-    final SparseArray<WeakReference<Q>> queriesForThreads;
+    final Map<Long, WeakReference<Q>> queriesForThreads;
 
     AbstractQueryData(AbstractDao<T, ?> dao, String sql, String[] initialValues) {
         this.dao = dao;
         this.sql = sql;
         this.initialValues = initialValues;
-        queriesForThreads = new SparseArray<WeakReference<Q>>();
+        queriesForThreads = new HashMap<>();
     }
 
-    /** Just an optimized version, which performs faster if the current thread is already the query's owner thread. */
+    /**
+     * Just an optimized version, which performs faster if the current thread is already the query's owner thread.
+     * Note: all parameters are reset to their initial values specified in {@link QueryBuilder}.
+     */
     Q forCurrentThread(Q query) {
         if (Thread.currentThread() == query.ownerThread) {
             System.arraycopy(initialValues, 0, query.parameters, 0, initialValues.length);
@@ -45,16 +50,14 @@ Q forCurrentThread(Q query) {
         }
     }
 
+    /**
+     * Note: all parameters are reset to their initial values specified in {@link QueryBuilder}.
+     */
     Q forCurrentThread() {
-        int threadId = Process.myTid();
-        if (threadId == 0) {
-            // Workaround for Robolectric, always returns 0
-            long id = Thread.currentThread().getId();
-            if (id < 0 || id > Integer.MAX_VALUE) {
-                throw new RuntimeException("Cannot handle thread ID: " + id);
-            }
-            threadId = (int) id;
-        }
+        // Process.myTid() seems to have issues on some devices (see Github #376) and Robolectric (#171):
+        // We use currentThread().getId() instead (unfortunately return a long, can not use SparseArray).
+        // PS.: thread ID may be reused, which should be fine because old thread will be gone anyway.
+        long threadId = Thread.currentThread().getId();
         synchronized (queriesForThreads) {
             WeakReference<Q> queryRef = queriesForThreads.get(threadId);
             Q query = queryRef != null ? queryRef.get() : null;
@@ -73,9 +76,11 @@ Q forCurrentThread() {
 
     void gc() {
         synchronized (queriesForThreads) {
-            for (int i = queriesForThreads.size() - 1; i >= 0; i--) {
-                if (queriesForThreads.valueAt(i).get() == null) {
-                    queriesForThreads.remove(queriesForThreads.keyAt(i));
+            Iterator<Entry<Long, WeakReference<Q>>> iterator = queriesForThreads.entrySet().iterator();
+            while (iterator.hasNext()) {
+                Entry<Long, WeakReference<Q>> entry = iterator.next();
+                if (entry.getValue() == null) {
+                    iterator.remove();
                 }
             }
         }
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/query/Query.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/Query.java
index 06ecc3b7..6176f3bc 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/query/Query.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/Query.java
@@ -16,12 +16,18 @@
 package org.greenrobot.greendao.query;
 
 import android.database.Cursor;
+
 import org.greenrobot.greendao.AbstractDao;
 import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.annotation.apihint.Internal;
+import org.greenrobot.greendao.rx.RxQuery;
+import org.greenrobot.greendao.rx.RxTransaction;
 
 import java.util.Date;
 import java.util.List;
 
+import rx.schedulers.Schedulers;
+
 /**
  * A repeatable query returning entities.
  *
@@ -60,12 +66,18 @@
 
     private final QueryData<T> queryData;
 
+    private volatile RxQuery rxTxPlain;
+    private volatile RxQuery rxTxIo;
+
     private Query(QueryData<T> queryData, AbstractDao<T, ?> dao, String sql, String[] initialValues, int limitPosition,
                   int offsetPosition) {
         super(dao, sql, initialValues, limitPosition, offsetPosition);
         this.queryData = queryData;
     }
 
+    /**
+     * Note: all parameters are reset to their initial values specified in {@link QueryBuilder}.
+     */
     public Query<T> forCurrentThread() {
         return queryData.forCurrentThread(this);
     }
@@ -146,4 +158,34 @@ public T uniqueOrThrow() {
     public Query<T> setParameter(int index, Boolean parameter) {
         return (Query<T>) super.setParameter(index, parameter);
     }
+
+    /**
+     * DO NOT USE.
+     * The returned {@link RxTransaction} allows getting query results using Rx Observables without any Scheduler set
+     * for subscribeOn.
+     *
+     * @see #__InternalRx()
+     */
+    @Internal
+    public RxQuery __internalRxPlain() {
+        if (rxTxPlain == null) {
+            rxTxPlain = new RxQuery(this);
+        }
+        return rxTxPlain;
+    }
+
+    /**
+     * DO NOT USE.
+     * The returned {@link RxTransaction} allows getting query results using Rx Observables using RX's IO scheduler for
+     * subscribeOn.
+     *
+     * @see #__internalRxPlain()
+     */
+    @Internal
+    public RxQuery __InternalRx() {
+        if (rxTxIo == null) {
+            rxTxIo = new RxQuery(this, Schedulers.io());
+        }
+        return rxTxIo;
+    }
 }
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java
index 5b0db7df..c2df27f0 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java
@@ -23,7 +23,9 @@
 import org.greenrobot.greendao.DaoException;
 import org.greenrobot.greendao.DaoLog;
 import org.greenrobot.greendao.Property;
+import org.greenrobot.greendao.annotation.apihint.Experimental;
 import org.greenrobot.greendao.internal.SqlUtils;
+import org.greenrobot.greendao.rx.RxQuery;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -425,6 +427,22 @@ private void appendJoinsAndWheres(StringBuilder builder, String tablePrefixOrNul
         return build().list();
     }
 
+    /**
+     * Shorthand for {@link QueryBuilder#build() build()}.{@link Query#__InternalRx()}.
+     */
+    @Experimental
+    public RxQuery<T> rx() {
+        return build().__InternalRx();
+    }
+
+    /**
+     * Shorthand for {@link QueryBuilder#build() build()}.{@link Query#__internalRxPlain()}.
+     */
+    @Experimental
+    public RxQuery<T> rxPlain() {
+        return build().__internalRxPlain();
+    }
+
     /**
      * Shorthand for {@link QueryBuilder#build() build()}.{@link Query#listLazy() listLazy()}; see
      * {@link Query#listLazy()} for details. To execute a query more than once, you should build the query and keep the
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxDao.java b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxDao.java
index aabbc90d..229b3ce2 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxDao.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxDao.java
@@ -32,6 +32,9 @@
  * Instances of RxDao may have an default {@link rx.Scheduler}, which is used to configure returned observables with
  * {@link Observable#subscribeOn(Scheduler)} (see {@link AbstractDao#rxPlain()}, which uses the IO scheduler).
  *
+ * Note: DO NOT call more than one data modification operation when you can use a transaction instead (see
+ * {@link RxTransaction}. Individual calls use a transaction each and are much slower.
+ *
  * @param <T> Entity type
  * @param <K> Primary key (PK) type; use Void if entity does not have exactly one PK
  * @see AbstractDao#rxPlain()
@@ -85,6 +88,21 @@ public T call() throws Exception {
         });
     }
 
+    /**
+     * Rx version of {@link AbstractDao#refresh(Object)} returning an Observable.
+     * Note that the Observable will emit the given entity back to its subscribers.
+     */
+    @Experimental
+    public Observable<T> refresh(final T entity) {
+        return wrap(new Callable<T>() {
+            @Override
+            public T call() throws Exception {
+                dao.refresh(entity);
+                return entity;
+            }
+        });
+    }
+
     /**
      * Rx version of {@link AbstractDao#insert(Object)} returning an Observable.
      * Note that the Observable will emit the given entity back to its subscribers.
@@ -100,9 +118,285 @@ public T call() throws Exception {
         });
     }
 
+    /**
+     * Rx version of {@link AbstractDao#insertInTx(Iterable)} returning an Observable.
+     * Note that the Observable will emit the given entities back to its subscribers.
+     */
+    @Experimental
+    public Observable<Iterable<T>> insertInTx(final Iterable<T> entities) {
+        return wrap(new Callable<Iterable<T>>() {
+            @Override
+            public Iterable<T> call() throws Exception {
+                dao.insertInTx(entities);
+                return entities;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#insertInTx(Object[])} returning an Observable.
+     * Note that the Observable will emit the given entities back to its subscribers.
+     */
+    @Experimental
+    public Observable<Object[]> insertInTx(final T... entities) {
+        return wrap(new Callable<Object[]>() {
+            @Override
+            public Object[] call() throws Exception {
+                dao.insertInTx(entities);
+                return entities;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#insertOrReplace(Object)} returning an Observable.
+     * Note that the Observable will emit the given entity back to its subscribers.
+     */
+    @Experimental
+    public Observable<T> insertOrReplace(final T entity) {
+        return wrap(new Callable<T>() {
+            @Override
+            public T call() throws Exception {
+                dao.insertOrReplace(entity);
+                return entity;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#insertOrReplaceInTx(Iterable)} returning an Observable.
+     * Note that the Observable will emit the given entities back to its subscribers.
+     */
+    @Experimental
+    public Observable<Iterable<T>> insertOrReplaceInTx(final Iterable<T> entities) {
+        return wrap(new Callable<Iterable<T>>() {
+            @Override
+            public Iterable<T> call() throws Exception {
+                dao.insertOrReplaceInTx(entities);
+                return entities;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#insertOrReplaceInTx(Object[])} returning an Observable.
+     * Note that the Observable will emit the given entities back to its subscribers.
+     */
+    @Experimental
+    public Observable<Object[]> insertOrReplaceInTx(final T... entities) {
+        return wrap(new Callable<Object[]>() {
+            @Override
+            public Object[] call() throws Exception {
+                dao.insertOrReplaceInTx(entities);
+                return entities;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#save(Object)} returning an Observable.
+     * Note that the Observable will emit the given entity back to its subscribers.
+     */
+    @Experimental
+    public Observable<T> save(final T entity) {
+        return wrap(new Callable<T>() {
+            @Override
+            public T call() throws Exception {
+                dao.save(entity);
+                return entity;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#saveInTx(Iterable)} returning an Observable.
+     * Note that the Observable will emit the given entities back to its subscribers.
+     */
+    @Experimental
+    public Observable<Iterable<T>> saveInTx(final Iterable<T> entities) {
+        return wrap(new Callable<Iterable<T>>() {
+            @Override
+            public Iterable<T> call() throws Exception {
+                dao.saveInTx(entities);
+                return entities;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#saveInTx(Object[])} returning an Observable.
+     * Note that the Observable will emit the given entities back to its subscribers.
+     */
+    @Experimental
+    public Observable<Object[]> saveInTx(final T... entities) {
+        return wrap(new Callable<Object[]>() {
+            @Override
+            public Object[] call() throws Exception {
+                dao.saveInTx(entities);
+                return entities;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#update(Object)} returning an Observable.
+     * Note that the Observable will emit the given entity back to its subscribers.
+     */
+    @Experimental
+    public Observable<T> update(final T entity) {
+        return wrap(new Callable<T>() {
+            @Override
+            public T call() throws Exception {
+                dao.update(entity);
+                return entity;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#updateInTx(Iterable)} returning an Observable.
+     * Note that the Observable will emit the given entities back to its subscribers.
+     */
+    @Experimental
+    public Observable<Iterable<T>> updateInTx(final Iterable<T> entities) {
+        return wrap(new Callable<Iterable<T>>() {
+            @Override
+            public Iterable<T> call() throws Exception {
+                dao.updateInTx(entities);
+                return entities;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#updateInTx(Object[])} returning an Observable.
+     * Note that the Observable will emit the given entities back to its subscribers.
+     */
+    @Experimental
+    public Observable<Object[]> updateInTx(final T... entities) {
+        return wrap(new Callable<Object[]>() {
+            @Override
+            public Object[] call() throws Exception {
+                dao.updateInTx(entities);
+                return entities;
+            }
+        });
+    }
+
+
+    /**
+     * Rx version of {@link AbstractDao#delete(Object)} returning an Observable.
+     */
+    @Experimental
+    public Observable<Void> delete(final T entity) {
+        return wrap(new Callable<Void>() {
+            @Override
+            public Void call() throws Exception {
+                dao.delete(entity);
+                return null;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#deleteByKey(Object)} returning an Observable.
+     */
+    @Experimental
+    public Observable<Void> deleteByKey(final K key) {
+        return wrap(new Callable<Void>() {
+            @Override
+            public Void call() throws Exception {
+                dao.deleteByKey(key);
+                return null;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#deleteAll()} returning an Observable.
+     */
+    @Experimental
+    public Observable<Void> deleteAll() {
+        return wrap(new Callable<Void>() {
+            @Override
+            public Void call() throws Exception {
+                dao.deleteAll();
+                return null;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#deleteInTx(Iterable)} returning an Observable.
+     */
+    @Experimental
+    public Observable<Void> deleteInTx(final Iterable<T> entities) {
+        return wrap(new Callable<Void>() {
+            @Override
+            public Void call() throws Exception {
+                dao.deleteInTx(entities);
+                return null;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#deleteInTx(Object[])} returning an Observable.
+     */
+    @Experimental
+    public Observable<Void> deleteInTx(final T... entities) {
+        return wrap(new Callable<Void>() {
+            @Override
+            public Void call() throws Exception {
+                dao.deleteInTx(entities);
+                return null;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#deleteByKeyInTx(Iterable)} returning an Observable.
+     */
+    @Experimental
+    public Observable<Void> deleteByKeyInTx(final Iterable<K> keys) {
+        return wrap(new Callable<Void>() {
+            @Override
+            public Void call() throws Exception {
+                dao.deleteByKeyInTx(keys);
+                return null;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#deleteByKeyInTx(Object[])} returning an Observable.
+     */
+    @Experimental
+    public Observable<Void> deleteByKeyInTx(final K... keys) {
+        return wrap(new Callable<Void>() {
+            @Override
+            public Void call() throws Exception {
+                dao.deleteByKeyInTx(keys);
+                return null;
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link AbstractDao#count()} returning an Observable.
+     */
+    @Experimental
+    public Observable<Long> count() {
+        return wrap(new Callable<Long>() {
+            @Override
+            public Long call() throws Exception {
+                return dao.count();
+            }
+        });
+    }
 
     /**
-     * The plain DAO that may be useful if you are inside a transaction, e.g {@link #runInTx(Runnable)}.
+     * The plain DAO.
      */
     @Experimental
     public AbstractDao<T, K> getDao() {
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxQuery.java b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxQuery.java
new file mode 100644
index 00000000..cc01be35
--- /dev/null
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxQuery.java
@@ -0,0 +1,114 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.greenrobot.greendao.rx;
+
+import org.greenrobot.greendao.annotation.apihint.Experimental;
+import org.greenrobot.greendao.query.LazyList;
+import org.greenrobot.greendao.query.Query;
+
+import java.util.List;
+import java.util.concurrent.Callable;
+
+import rx.Observable;
+import rx.Observable.OnSubscribe;
+import rx.Scheduler;
+import rx.Subscriber;
+import rx.exceptions.Exceptions;
+
+/**
+ * Gets {@link org.greenrobot.greendao.query.Query} results in Rx fashion.
+ */
+@Experimental
+// TODO Pass parameters: currently, parameters are always set to their initial values because of forCurrentThread()
+public class RxQuery<T> extends RxBase {
+    private final Query<T> query;
+
+    public RxQuery(Query<T> query) {
+        this.query = query;
+    }
+
+    public RxQuery(Query<T> query, Scheduler scheduler) {
+        super(scheduler);
+        this.query = query;
+    }
+
+    /**
+     * Rx version of {@link Query#list()} returning an Observable.
+     */
+    @Experimental
+    public Observable<List<T>> list() {
+        return wrap(new Callable<List<T>>() {
+            @Override
+            public List<T> call() throws Exception {
+                return query.forCurrentThread().list();
+            }
+        });
+    }
+
+    /**
+     * Rx version of {@link Query#unique()} returning an Observable.
+     */
+    @Experimental
+    public Observable<T> unique() {
+        return wrap(new Callable<T>() {
+            @Override
+            public T call() throws Exception {
+                return query.forCurrentThread().unique();
+            }
+        });
+    }
+
+    /**
+     * Emits the resulting entities one by one, producing them on the fly ("streaming" entities).
+     * Unlike {@link #list()}, it does not wait for the query to gather all results. Thus, the first entities are
+     * immediately available as soon the underlying database cursor has data. This approach may be more memory
+     * efficient for large number of entities (or large entities) at the cost of additional overhead caused by a
+     * per-entity delivery through Rx.
+     */
+    public Observable<T> oneByOne() {
+        Observable<T> observable = Observable.create(new OnSubscribe<T>() {
+            @Override
+            public void call(Subscriber<? super T> subscriber) {
+                try {
+                    LazyList<T> lazyList = query.forCurrentThread().listLazyUncached();
+                    try {
+                        for (T entity : lazyList) {
+                            if (subscriber.isUnsubscribed()) {
+                                break;
+                            }
+                            subscriber.onNext(entity);
+                        }
+                    } finally {
+                        lazyList.close();
+                    }
+                    if (!subscriber.isUnsubscribed()) {
+                        subscriber.onCompleted();
+                    }
+                } catch (Throwable e) {
+                    Exceptions.throwIfFatal(e);
+                    subscriber.onError(e);
+                }
+            }
+        });
+        return wrap(observable);
+    }
+
+//    @Experimental
+//    public Query<T> getQuery() {
+//        return query;
+//    }
+}
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxTransaction.java b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxTransaction.java
index f0e7cea2..8ef01d33 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxTransaction.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxTransaction.java
@@ -27,6 +27,7 @@
 /**
  * Allows to do transactions using Rx Observable.
  */
+@Experimental
 public class RxTransaction extends RxBase {
     private final AbstractDaoSession daoSession;
 
@@ -69,6 +70,7 @@ public T call() throws Exception {
     // Note: wrapping callInTxNoException does not make sense, because the Exception is handled by Rx anyway.
 
 
+    @Experimental
     public AbstractDaoSession getDaoSession() {
         return daoSession;
     }
diff --git a/DaoExample/src/main/java/org/greenrobot/greendao/example/Customer.java b/DaoExample/src/main/java/org/greenrobot/greendao/example/Customer.java
index 964b4587..9036c0c4 100644
--- a/DaoExample/src/main/java/org/greenrobot/greendao/example/Customer.java
+++ b/DaoExample/src/main/java/org/greenrobot/greendao/example/Customer.java
@@ -53,13 +53,6 @@ public Customer(Long id, @NotNull String name) {
         this.name = name;
     }
 
-    /** called by internal mechanisms, do not call yourself. */
-    @Generated(hash = 462117449)
-    public void __setDaoSession(DaoSession daoSession) {
-        this.daoSession = daoSession;
-        myDao = daoSession != null ? daoSession.getCustomerDao() : null;
-    }
-
     public Long getId() {
         return id;
     }
@@ -142,4 +135,11 @@ public void refresh() {
         myDao.refresh(this);
     }
 
+    /** called by internal mechanisms, do not call yourself. */
+    @Generated(hash = 462117449)
+    public void __setDaoSession(DaoSession daoSession) {
+        this.daoSession = daoSession;
+        myDao = daoSession != null ? daoSession.getCustomerDao() : null;
+    }
+
 }
diff --git a/DaoExample/src/main/java/org/greenrobot/greendao/example/Order.java b/DaoExample/src/main/java/org/greenrobot/greendao/example/Order.java
index 50ddaa14..9f55eef0 100644
--- a/DaoExample/src/main/java/org/greenrobot/greendao/example/Order.java
+++ b/DaoExample/src/main/java/org/greenrobot/greendao/example/Order.java
@@ -47,13 +47,6 @@ public Order(Long id, java.util.Date date, long customerId) {
         this.customerId = customerId;
     }
 
-    /** called by internal mechanisms, do not call yourself. */
-    @Generated(hash = 965731666)
-    public void __setDaoSession(DaoSession daoSession) {
-        this.daoSession = daoSession;
-        myDao = daoSession != null ? daoSession.getOrderDao() : null;
-    }
-
     public Long getId() {
         return id;
     }
@@ -135,6 +128,8 @@ public void update() {
         myDao.update(this);
     }
 
+
+
     /**
      * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
      * Entity must attached to an entity context.
@@ -147,4 +142,11 @@ public void refresh() {
         myDao.refresh(this);
     }
 
+    /** called by internal mechanisms, do not call yourself. */
+    @Generated(hash = 965731666)
+    public void __setDaoSession(DaoSession daoSession) {
+        this.daoSession = daoSession;
+        myDao = daoSession != null ? daoSession.getOrderDao() : null;
+    }
+
 }
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxDaoTest.java b/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxDaoTest.java
deleted file mode 100644
index 6330fe6a..00000000
--- a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxDaoTest.java
+++ /dev/null
@@ -1,130 +0,0 @@
-/*
- * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * This file is part of greenDAO Generator.
- *
- * greenDAO Generator is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * greenDAO Generator is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package org.greenrobot.greendao.daotest.rx;
-
-import org.greenrobot.greendao.daotest.TestEntity;
-import org.greenrobot.greendao.daotest.TestEntityDao;
-import org.greenrobot.greendao.rx.RxDao;
-import org.greenrobot.greendao.test.AbstractDaoTest;
-
-import java.util.List;
-import java.util.concurrent.TimeUnit;
-
-import rx.Observable;
-import rx.observers.TestSubscriber;
-
-public class RxDaoTest extends AbstractDaoTest<TestEntityDao, TestEntity, Long> {
-
-    private RxDao rxDao;
-
-    public RxDaoTest() {
-        super(TestEntityDao.class);
-    }
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        rxDao = dao.rx();
-    }
-
-    public void testScheduler() {
-        TestSubscriber<List<TestEntity>> testSubscriber = awaitTestSubscriber(rxDao.loadAll());
-        Thread lastSeenThread = testSubscriber.getLastSeenThread();
-        assertNotSame(lastSeenThread, Thread.currentThread());
-    }
-
-    public void testNoScheduler() {
-        RxDao<TestEntity, Long> rxDaoNoScheduler = dao.rxPlain();
-        TestSubscriber<List<TestEntity>> testSubscriber = awaitTestSubscriber(rxDaoNoScheduler.loadAll());
-        Thread lastSeenThread = testSubscriber.getLastSeenThread();
-        assertSame(lastSeenThread, Thread.currentThread());
-    }
-
-    public void testLoadAll() {
-        insertEntity("foo");
-        insertEntity("bar");
-
-        TestSubscriber<List<TestEntity>> testSubscriber = awaitTestSubscriber(rxDao.loadAll());
-        assertEquals(1, testSubscriber.getValueCount());
-        List<TestEntity> entities = testSubscriber.getOnNextEvents().get(0);
-
-        // Order of entities is unspecified
-        int foo = 0, bar = 0;
-        for (TestEntity entity : entities) {
-            String value = entity.getSimpleStringNotNull();
-            if (value.equals("foo")) {
-                foo++;
-            } else if (value.equals("bar")) {
-                bar++;
-            } else {
-                fail(value);
-            }
-        }
-        assertEquals(1, foo);
-        assertEquals(1, bar);
-    }
-
-    public void testLoad() {
-        TestEntity foo = insertEntity("foo");
-        TestSubscriber<TestEntity> testSubscriber = awaitTestSubscriber(rxDao.load(foo.getId()));
-        assertEquals(1, testSubscriber.getValueCount());
-        TestEntity foo2 = testSubscriber.getOnNextEvents().get(0);
-        assertEquals(foo.getSimpleStringNotNull(), foo2.getSimpleStringNotNull());
-    }
-
-    public void testLoad_noResult() {
-        TestSubscriber<TestEntity> testSubscriber = awaitTestSubscriber(rxDao.load(42));
-        assertEquals(1, testSubscriber.getValueCount());
-        // Should we really propagate null through Rx?
-        assertNull(testSubscriber.getOnNextEvents().get(0));
-    }
-
-    public void testInsert() {
-        TestEntity foo = createEntity("foo");
-        TestSubscriber<TestEntity> testSubscriber = awaitTestSubscriber(rxDao.insert(foo));
-        assertEquals(1, testSubscriber.getValueCount());
-        TestEntity foo2 = testSubscriber.getOnNextEvents().get(0);
-        assertSame(foo, foo2);
-
-        List<TestEntity> all = dao.loadAll();
-        assertEquals(1, all.size());
-        assertEquals(foo.getSimpleStringNotNull(), all.get(0).getSimpleStringNotNull());
-    }
-
-    private TestSubscriber<List<TestEntity>> awaitTestSubscriber(Observable<List<TestEntity>> observable) {
-        TestSubscriber<List<TestEntity>> testSubscriber = new TestSubscriber<>();
-        observable.subscribe(testSubscriber);
-        testSubscriber.awaitTerminalEvent(3, TimeUnit.SECONDS);
-        testSubscriber.assertCompleted();
-        testSubscriber.assertNoErrors();
-        return testSubscriber;
-    }
-
-    protected TestEntity insertEntity(String simpleStringNotNull) {
-        TestEntity entity = createEntity(simpleStringNotNull);
-        dao.insert(entity);
-        return entity;
-    }
-
-    private TestEntity createEntity(String simpleStringNotNull) {
-        TestEntity entity = new TestEntity();
-        entity.setSimpleStringNotNull(simpleStringNotNull);
-        return entity;
-    }
-}
diff --git a/settings.gradle b/settings.gradle
index dab9964d..9375406b 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,9 +1,12 @@
 include 'greendao-api'
 include 'DaoCore'
 include 'DaoGenerator'
-include 'DaoTestBase'
-include 'DaoTest'
-include 'DaoTestPerformance'
-include 'DaoTestGenerator'
-include 'DaoExample'
+include 'tests'
+// Disable until new plugins are pushed:
+//include 'DaoExample'
 
+include 'tests:DaoTestBase'
+include 'tests:DaoTest'
+include 'tests:DaoTestPerformance'
+include 'tests:DaoTestGenerator'
+include 'tests:DaoTestEntityAnnotation'
diff --git a/DaoTest/build.gradle b/tests/DaoTest/build.gradle
similarity index 94%
rename from DaoTest/build.gradle
rename to tests/DaoTest/build.gradle
index d75721fc..e30045a9 100644
--- a/DaoTest/build.gradle
+++ b/tests/DaoTest/build.gradle
@@ -21,7 +21,7 @@ android {
 }
 
 dependencies {
-    compile project(':DaoTestBase')
+    compile project(':tests:DaoTestBase')
 
     testCompile 'org.robolectric:robolectric:3.1'
     testCompile 'org.mockito:mockito-core:1.10.19'
diff --git a/DaoTest/proguard.cfg b/tests/DaoTest/proguard.cfg
similarity index 100%
rename from DaoTest/proguard.cfg
rename to tests/DaoTest/proguard.cfg
diff --git a/DaoTest/project.properties b/tests/DaoTest/project.properties
similarity index 100%
rename from DaoTest/project.properties
rename to tests/DaoTest/project.properties
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionConcurrentTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionConcurrentTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionConcurrentTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionConcurrentTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionConcurrentWALTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionConcurrentWALTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionConcurrentWALTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionConcurrentWALTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DbTestTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DbTestTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DbTestTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DbTestTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DbUtilsTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DbUtilsTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DbUtilsTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DbUtilsTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DeadlockPreventionTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DeadlockPreventionTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DeadlockPreventionTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DeadlockPreventionTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/IndexTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/IndexTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/IndexTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/IndexTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/LongHashMapTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/LongHashMapTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/LongHashMapTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/LongHashMapTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/AbstractAsyncTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/AbstractAsyncTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/AbstractAsyncTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/AbstractAsyncTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/BasicAsyncTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/BasicAsyncTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/BasicAsyncTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/BasicAsyncTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/MergeTxAsyncTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/MergeTxAsyncTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/MergeTxAsyncTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/MergeTxAsyncTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/contentprovider/SimpleEntityContentProviderTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/contentprovider/SimpleEntityContentProviderTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/contentprovider/SimpleEntityContentProviderTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/contentprovider/SimpleEntityContentProviderTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDataFileTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDataFileTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDataFileTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDataFileTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDatabaseOpenHelperTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDatabaseOpenHelperTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDatabaseOpenHelperTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDatabaseOpenHelperTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDbUtils.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDbUtils.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDbUtils.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDbUtils.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptionSimpleEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptionSimpleEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptionSimpleEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptionSimpleEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AbcdefEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AbcdefEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AbcdefEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AbcdefEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AnActiveEntityMultithreadingTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AnActiveEntityMultithreadingTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AnActiveEntityMultithreadingTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AnActiveEntityMultithreadingTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AnActiveEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AnActiveEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AnActiveEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AnActiveEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AutoincrementEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AutoincrementEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AutoincrementEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/AutoincrementEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/CustomTypeEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/CustomTypeEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/CustomTypeEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/CustomTypeEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/DateEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/DateEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/DateEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/DateEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ExtendsImplementsEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ExtendsImplementsEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ExtendsImplementsEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ExtendsImplementsEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/IndexedStringEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/IndexedStringEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/IndexedStringEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/IndexedStringEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/JoinManyToDateEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/JoinManyToDateEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/JoinManyToDateEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/JoinManyToDateEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/RelationEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/RelationEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/RelationEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/RelationEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/RelationEntityTestIdentityScope.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/RelationEntityTestIdentityScope.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/RelationEntityTestIdentityScope.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/RelationEntityTestIdentityScope.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SimpleEntityNotNullTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SimpleEntityNotNullTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SimpleEntityNotNullTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SimpleEntityNotNullTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SimpleEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SimpleEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SimpleEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SimpleEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SpecialNamesEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SpecialNamesEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SpecialNamesEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SpecialNamesEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SqliteMasterTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SqliteMasterTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SqliteMasterTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/SqliteMasterTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/StringKeyValueEntityIdentityScopeTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/StringKeyValueEntityIdentityScopeTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/StringKeyValueEntityIdentityScopeTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/StringKeyValueEntityIdentityScopeTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/StringKeyValueEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/StringKeyValueEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/StringKeyValueEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/StringKeyValueEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityIdentityScopeTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityIdentityScopeTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityIdentityScopeTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityIdentityScopeTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityTestBase.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityTestBase.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityTestBase.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TestEntityTestBase.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ToManyEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ToManyEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ToManyEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ToManyEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ToManyTargetEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ToManyTargetEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ToManyTargetEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/ToManyTargetEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TreeEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TreeEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TreeEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/entity/TreeEntityTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CountQueryTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CountQueryTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CountQueryTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CountQueryTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CountQueryThreadLocalTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CountQueryThreadLocalTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CountQueryThreadLocalTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CountQueryThreadLocalTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CursorQueryTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CursorQueryTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CursorQueryTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/CursorQueryTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/DeleteQueryTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/DeleteQueryTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/DeleteQueryTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/DeleteQueryTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/DeleteQueryThreadLocalTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/DeleteQueryThreadLocalTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/DeleteQueryThreadLocalTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/DeleteQueryThreadLocalTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/JoinTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/JoinTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/JoinTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/JoinTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/LazyListTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/LazyListTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/LazyListTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/LazyListTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderAndOrTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderAndOrTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderAndOrTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderAndOrTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderOrderTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderOrderTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderOrderTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderOrderTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderSimpleTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderSimpleTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderSimpleTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryBuilderSimpleTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryForThreadTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryForThreadTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryForThreadTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryForThreadTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryLimitOffsetTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryLimitOffsetTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryLimitOffsetTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryLimitOffsetTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QuerySpecialNamesTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QuerySpecialNamesTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QuerySpecialNamesTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QuerySpecialNamesTest.java
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/RawQueryTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/RawQueryTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/RawQueryTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/RawQueryTest.java
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxDaoTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxDaoTest.java
new file mode 100644
index 00000000..28447f11
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxDaoTest.java
@@ -0,0 +1,176 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.rx;
+
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao;
+import org.greenrobot.greendao.rx.RxDao;
+import org.greenrobot.greendao.test.AbstractDaoTest;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import rx.observers.TestSubscriber;
+
+public class RxDaoTest extends AbstractDaoTest<TestEntityDao, TestEntity, Long> {
+
+    private RxDao rxDao;
+
+    public RxDaoTest() {
+        super(TestEntityDao.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        rxDao = dao.rx();
+    }
+
+    public void testScheduler() {
+        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.loadAll());
+        Thread lastSeenThread = testSubscriber.getLastSeenThread();
+        assertNotSame(lastSeenThread, Thread.currentThread());
+    }
+
+    public void testNoScheduler() {
+        RxDao<TestEntity, Long> rxDaoNoScheduler = dao.rxPlain();
+        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDaoNoScheduler.loadAll());
+        Thread lastSeenThread = testSubscriber.getLastSeenThread();
+        assertSame(lastSeenThread, Thread.currentThread());
+    }
+
+    public void testLoadAll() {
+        insertEntity("foo");
+        insertEntity("bar");
+
+        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.loadAll());
+        assertEquals(1, testSubscriber.getValueCount());
+        List<TestEntity> entities = testSubscriber.getOnNextEvents().get(0);
+
+        // Order of entities is unspecified
+        int foo = 0, bar = 0;
+        for (TestEntity entity : entities) {
+            String value = entity.getSimpleStringNotNull();
+            if (value.equals("foo")) {
+                foo++;
+            } else if (value.equals("bar")) {
+                bar++;
+            } else {
+                fail(value);
+            }
+        }
+        assertEquals(1, foo);
+        assertEquals(1, bar);
+    }
+
+    public void testLoad() {
+        TestEntity foo = insertEntity("foo");
+        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.load(foo.getId()));
+        assertEquals(1, testSubscriber.getValueCount());
+        TestEntity foo2 = testSubscriber.getOnNextEvents().get(0);
+        assertEquals(foo.getSimpleStringNotNull(), foo2.getSimpleStringNotNull());
+    }
+
+    public void testLoad_noResult() {
+        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.load(42));
+        assertEquals(1, testSubscriber.getValueCount());
+        // Should we really propagate null through Rx?
+        assertNull(testSubscriber.getOnNextEvents().get(0));
+    }
+
+    public void testInsert() {
+        TestEntity foo = RxTestHelper.createEntity("foo");
+        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.insert(foo));
+        assertEquals(1, testSubscriber.getValueCount());
+        TestEntity foo2 = testSubscriber.getOnNextEvents().get(0);
+        assertSame(foo, foo2);
+
+        List<TestEntity> all = dao.loadAll();
+        assertEquals(1, all.size());
+        assertEquals(foo.getSimpleStringNotNull(), all.get(0).getSimpleStringNotNull());
+    }
+
+    public void testInsertInTx() {
+        TestEntity foo = RxTestHelper.createEntity("foo");
+        TestEntity bar = RxTestHelper.createEntity("bar");
+        TestSubscriber<Object[]> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.insertInTx(foo, bar));
+        assertEquals(1, testSubscriber.getValueCount());
+        Object[] array = testSubscriber.getOnNextEvents().get(0);
+        assertSame(foo, array[0]);
+        assertSame(bar, array[1]);
+
+        List<TestEntity> all = dao.loadAll();
+        assertEquals(2, all.size());
+        assertEquals(foo.getSimpleStringNotNull(), all.get(0).getSimpleStringNotNull());
+        assertEquals(bar.getSimpleStringNotNull(), all.get(1).getSimpleStringNotNull());
+    }
+
+    public void testInsertInTxList() {
+        TestEntity foo = RxTestHelper.createEntity("foo");
+        TestEntity bar = RxTestHelper.createEntity("bar");
+        List<TestEntity> list = new ArrayList<>();
+        list.add(foo);
+        list.add(bar);
+        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.insertInTx(list));
+        assertEquals(1, testSubscriber.getValueCount());
+        List<TestEntity> result = testSubscriber.getOnNextEvents().get(0);
+        assertSame(foo, result.get(0));
+        assertSame(bar, result.get(1));
+
+        List<TestEntity> all = dao.loadAll();
+        assertEquals(2, all.size());
+        assertEquals(foo.getSimpleStringNotNull(), all.get(0).getSimpleStringNotNull());
+        assertEquals(bar.getSimpleStringNotNull(), all.get(1).getSimpleStringNotNull());
+    }
+
+    public void testCount() {
+        TestEntity foo = insertEntity("foo");
+        TestSubscriber<Long> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.count());
+        assertEquals(1, testSubscriber.getValueCount());
+        Long count = testSubscriber.getOnNextEvents().get(0);
+        assertEquals(1L, (long) count);
+    }
+
+    public void testDelete() {
+        TestEntity foo = insertEntity("foo");
+        TestSubscriber<Long> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.delete(foo));
+        assertEquals(1, testSubscriber.getValueCount());
+        assertNull(testSubscriber.getOnNextEvents().get(0));
+        assertEquals(0, dao.count());
+    }
+
+    public void testUpdate() {
+        TestEntity foo = insertEntity("foo");
+        foo.setSimpleString("foofoo");
+        TestSubscriber<Long> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.update(foo));
+        assertEquals(1, testSubscriber.getValueCount());
+        assertSame(foo, testSubscriber.getOnNextEvents().get(0));
+        List<TestEntity> testEntities = dao.loadAll();
+        assertEquals(1, testEntities.size());
+        assertNotSame(foo, testEntities.get(0));
+        assertEquals("foofoo", testEntities.get(0).getSimpleString());
+    }
+
+    // TODO test remaining methods
+
+
+    protected TestEntity insertEntity(String simpleStringNotNull) {
+        return RxTestHelper.insertEntity(dao, simpleStringNotNull);
+    }
+}
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxQueryTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxQueryTest.java
new file mode 100644
index 00000000..63081dd1
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxQueryTest.java
@@ -0,0 +1,121 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.rx;
+
+import org.greenrobot.greendao.DaoLog;
+import org.greenrobot.greendao.daotest.DaoMaster;
+import org.greenrobot.greendao.daotest.DaoSession;
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao.Properties;
+import org.greenrobot.greendao.query.Query;
+import org.greenrobot.greendao.rx.RxQuery;
+import org.greenrobot.greendao.test.AbstractDaoSessionTest;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+
+import rx.Observable;
+import rx.Subscription;
+import rx.observers.TestSubscriber;
+
+public class RxQueryTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
+
+    private Query<TestEntity> query;
+    private RxQuery<TestEntity> rxQuery;
+
+    public RxQueryTest() {
+        super(DaoMaster.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        query = daoSession.getTestEntityDao().queryBuilder().where(Properties.SimpleInt.lt(10)).build();
+        rxQuery = query.__InternalRx();
+    }
+
+    public void testList() {
+        insertEntities(15);
+        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxQuery.list());
+        assertEquals(1, testSubscriber.getValueCount());
+        List<TestEntity> entitiesRead = testSubscriber.getOnNextEvents().get(0);
+        assertEquals(10, entitiesRead.size());
+    }
+
+    // TODO figure out how to pass params to rxQuery
+    public void _testListSetParameters() {
+        insertEntities(15);
+
+        // TODO how to pass those to rxQuery?
+        query.setParameter(0, 5);
+
+        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxQuery.list());
+        assertEquals(1, testSubscriber.getValueCount());
+        List<TestEntity> entitiesRead = testSubscriber.getOnNextEvents().get(0);
+        assertEquals(5, entitiesRead.size());
+    }
+
+    public void testUnique() {
+        insertEntities(1);
+        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxQuery.unique());
+        assertEquals(1, testSubscriber.getValueCount());
+        TestEntity entityRead = testSubscriber.getOnNextEvents().get(0);
+        assertNotNull(entityRead);
+    }
+
+    public void testOneByOne() {
+        insertEntities(15);
+        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxQuery.oneByOne());
+        assertEquals(10, testSubscriber.getValueCount());
+        for (int i = 0; i < 10; i++) {
+            TestEntity entity = testSubscriber.getOnNextEvents().get(i);
+            assertEquals(i, entity.getSimpleInt());
+        }
+    }
+
+    public void testOneByOneUnsubscribe() {
+        insertEntities(1000);
+        RxQuery<TestEntity> bigQuery = daoSession.getTestEntityDao().queryBuilder().rx();
+        TestSubscriber<TestEntity> testSubscriber = new TestSubscriber<>();
+        Observable<TestEntity> observable = bigQuery.oneByOne();
+        Subscription subscription = observable.subscribe(testSubscriber);
+        subscription.unsubscribe();
+        testSubscriber.assertUnsubscribed();
+        int count = testSubscriber.getValueCount();
+        testSubscriber.awaitTerminalEvent(100, TimeUnit.MILLISECONDS);
+        int count2 = testSubscriber.getValueCount();
+        DaoLog.d("Count 1: " + count + " vs. count 2: " + count2);
+        // Not strictly multi-threading correct, but anyway:
+        assertTrue(count2 < 1000);
+    }
+
+    protected List<TestEntity> insertEntities(int count) {
+        List<TestEntity> entities = new ArrayList<>(count);
+        for (int i = 0; i < count; i++) {
+            TestEntity entity = RxTestHelper.createEntity("My entity ");
+            entity.setSimpleInt(i);
+            entities.add(entity);
+        }
+
+        daoSession.getTestEntityDao().insertInTx(entities);
+        return entities;
+    }
+
+}
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTestHelper.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTestHelper.java
new file mode 100644
index 00000000..04cbb449
--- /dev/null
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTestHelper.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.greenrobot.greendao.daotest.rx;
+
+import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.daotest.TestEntityDao;
+
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+
+import rx.Observable;
+import rx.observers.TestSubscriber;
+
+public class RxTestHelper {
+    static <T> TestSubscriber<T> awaitTestSubscriber(Observable<T> observable) {
+        TestSubscriber<T> testSubscriber = new TestSubscriber<>();
+        observable.subscribe(testSubscriber);
+        testSubscriber.awaitTerminalEvent(3, TimeUnit.SECONDS);
+        testSubscriber.assertNoErrors();
+        testSubscriber.assertCompleted();
+        return testSubscriber;
+    }
+
+    static TestEntity insertEntity(TestEntityDao dao, String simpleStringNotNull) {
+        TestEntity entity = createEntity(simpleStringNotNull);
+        dao.insert(entity);
+        return entity;
+    }
+
+    static TestEntity createEntity(String simpleStringNotNull) {
+        TestEntity entity = new TestEntity();
+        entity.setSimpleStringNotNull(simpleStringNotNull);
+        return entity;
+    }
+}
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTransactionTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTransactionTest.java
similarity index 80%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTransactionTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTransactionTest.java
index 556960c3..03a4aee1 100644
--- a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTransactionTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTransactionTest.java
@@ -26,7 +26,6 @@
 
 import java.util.List;
 import java.util.concurrent.Callable;
-import java.util.concurrent.TimeUnit;
 
 import rx.Observable;
 import rx.observers.TestSubscriber;
@@ -83,7 +82,7 @@ public String call() {
     }
 
     private <T> TestSubscriber<T> assertTxExecuted(Observable<T> observable) {
-        TestSubscriber<T> testSubscriber = awaitTestSubscriber(observable);
+        TestSubscriber<T> testSubscriber = RxTestHelper.awaitTestSubscriber(observable);
         assertEquals(1, testSubscriber.getValueCount());
 
         daoSession.clear();
@@ -94,24 +93,8 @@ public String call() {
         return testSubscriber;
     }
 
-    private <T> TestSubscriber<T> awaitTestSubscriber(Observable<T> observable) {
-        TestSubscriber<T> testSubscriber = new TestSubscriber<>();
-        observable.subscribe(testSubscriber);
-        testSubscriber.awaitTerminalEvent(3, TimeUnit.SECONDS);
-        testSubscriber.assertCompleted();
-        testSubscriber.assertNoErrors();
-        return testSubscriber;
-    }
-
     protected TestEntity insertEntity(String simpleStringNotNull) {
-        TestEntity entity = createEntity(simpleStringNotNull);
-        daoSession.insert(entity);
-        return entity;
+        return RxTestHelper.insertEntity(daoSession.getTestEntityDao(), simpleStringNotNull);
     }
 
-    private TestEntity createEntity(String simpleStringNotNull) {
-        TestEntity entity = new TestEntity();
-        entity.setSimpleStringNotNull(simpleStringNotNull);
-        return entity;
-    }
 }
diff --git a/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest2/entity/KeepEntityTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest2/entity/KeepEntityTest.java
similarity index 100%
rename from DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest2/entity/KeepEntityTest.java
rename to tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest2/entity/KeepEntityTest.java
diff --git a/DaoTest/src/main/AndroidManifest.xml b/tests/DaoTest/src/main/AndroidManifest.xml
similarity index 100%
rename from DaoTest/src/main/AndroidManifest.xml
rename to tests/DaoTest/src/main/AndroidManifest.xml
diff --git a/DaoTest/src/main/assets/minimal-entity.sql b/tests/DaoTest/src/main/assets/minimal-entity.sql
similarity index 100%
rename from DaoTest/src/main/assets/minimal-entity.sql
rename to tests/DaoTest/src/main/assets/minimal-entity.sql
diff --git a/DaoTest/src/test/java/org/greenrobot/greendao/unittest/DaoMaster.java b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/DaoMaster.java
similarity index 100%
rename from DaoTest/src/test/java/org/greenrobot/greendao/unittest/DaoMaster.java
rename to tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/DaoMaster.java
diff --git a/DaoTest/src/test/java/org/greenrobot/greendao/unittest/DaoSession.java b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/DaoSession.java
similarity index 100%
rename from DaoTest/src/test/java/org/greenrobot/greendao/unittest/DaoSession.java
rename to tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/DaoSession.java
diff --git a/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntity.java b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntity.java
similarity index 100%
rename from DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntity.java
rename to tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntity.java
diff --git a/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityDao.java b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityDao.java
similarity index 100%
rename from DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityDao.java
rename to tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityDao.java
diff --git a/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityTest.java b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityTest.java
similarity index 100%
rename from DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityTest.java
rename to tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityTest.java
diff --git a/DaoTest/src/test/java/org/greenrobot/greendao/unittest/OptionalDepedenciesTest.java b/tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/OptionalDepedenciesTest.java
similarity index 100%
rename from DaoTest/src/test/java/org/greenrobot/greendao/unittest/OptionalDepedenciesTest.java
rename to tests/DaoTest/src/test/java/org/greenrobot/greendao/unittest/OptionalDepedenciesTest.java
diff --git a/DaoTestBase/build.gradle b/tests/DaoTestBase/build.gradle
similarity index 100%
rename from DaoTestBase/build.gradle
rename to tests/DaoTestBase/build.gradle
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AbcdefEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AnActiveEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/AutoincrementEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/CustomTypeEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DaoMaster.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DaoMaster.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DaoMaster.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DaoMaster.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DaoSession.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DaoSession.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DaoSession.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DaoSession.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/DateEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ExtendsImplementsEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/IndexedStringEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/JoinManyToDateEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/RelationEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityContentProvider.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityContentProvider.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityContentProvider.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityContentProvider.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNull.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNull.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNull.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNull.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNullDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNullDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNullDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SimpleEntityNotNullDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SpecialNamesEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMaster.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMaster.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMaster.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMaster.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMasterDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMasterDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMasterDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/SqliteMasterDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/StringKeyValueEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestInterface.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestInterface.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestInterface.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestInterface.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestSuperclass.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestSuperclass.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestSuperclass.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TestSuperclass.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/ToManyTargetEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/TreeEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/IntegerListConverter.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/IntegerListConverter.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/IntegerListConverter.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/IntegerListConverter.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/MyTimestamp.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/MyTimestamp.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/MyTimestamp.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/MyTimestamp.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/MyTimestampConverter.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/MyTimestampConverter.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/MyTimestampConverter.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/customtype/MyTimestampConverter.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/entity/SimpleEntityNotNullHelper.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/entity/SimpleEntityNotNullHelper.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/entity/SimpleEntityNotNullHelper.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest/entity/SimpleEntityNotNullHelper.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/KeepEntity.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/KeepEntity.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/KeepEntity.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/KeepEntity.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/ToManyTarget2.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/ToManyTarget2.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/ToManyTarget2.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/ToManyTarget2.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/DaoMaster.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/DaoMaster.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/DaoMaster.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/DaoMaster.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/DaoSession.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/DaoSession.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/DaoSession.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/DaoSession.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/KeepEntityDao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/KeepEntityDao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/KeepEntityDao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/KeepEntityDao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/ToManyTarget2Dao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/ToManyTarget2Dao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/ToManyTarget2Dao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/dao/ToManyTarget2Dao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialdao/RelationSource2Dao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialdao/RelationSource2Dao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialdao/RelationSource2Dao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialdao/RelationSource2Dao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialentity/RelationSource2.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialentity/RelationSource2.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialentity/RelationSource2.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/specialentity/RelationSource2.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialdao/ToOneTarget2Dao.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialdao/ToOneTarget2Dao.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialdao/ToOneTarget2Dao.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialdao/ToOneTarget2Dao.java
diff --git a/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialentity/ToOneTarget2.java b/tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialentity/ToOneTarget2.java
similarity index 100%
rename from DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialentity/ToOneTarget2.java
rename to tests/DaoTestBase/src/main/java/org/greenrobot/greendao/daotest2/to1_specialentity/ToOneTarget2.java
diff --git a/tests/DaoTestEntityAnnotation/build.gradle b/tests/DaoTestEntityAnnotation/build.gradle
new file mode 100644
index 00000000..274d0636
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/build.gradle
@@ -0,0 +1,50 @@
+buildscript {
+    repositories {
+        mavenLocal()
+        mavenCentral()
+    }
+
+    dependencies {
+        classpath 'com.android.tools.build:gradle:2.1.2'
+        classpath 'org.greenrobot:greendao-gradle-plugin:3.1.0-SNAPSHOT'
+    }
+}
+
+apply plugin: 'org.greenrobot.greendao'
+apply plugin: 'com.android.application'
+
+repositories {
+    mavenCentral()
+}
+
+android {
+    buildToolsVersion rootProject.ext.buildToolsVersion
+    compileSdkVersion rootProject.ext.compileSdkVersion
+
+    defaultConfig {
+        applicationId "org.greenrobot.greendao.test.entityannotation"
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
+        versionCode 1
+        versionName "1.0.0"
+
+        testInstrumentationRunner "android.test.InstrumentationTestRunner"
+    }
+
+    compileOptions {
+        encoding = "UTF-8"
+        sourceCompatibility JavaVersion.VERSION_1_6
+        targetCompatibility JavaVersion.VERSION_1_6
+    }
+}
+
+greendao {
+    schemaVersion 1000
+    generateTests true
+}
+
+dependencies {
+    compile project(':DaoCore')
+}
+
+uploadArchives.enabled = false
\ No newline at end of file
diff --git a/tests/DaoTestEntityAnnotation/proguard.cfg b/tests/DaoTestEntityAnnotation/proguard.cfg
new file mode 100644
index 00000000..12dd0392
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/proguard.cfg
@@ -0,0 +1,36 @@
+-optimizationpasses 5
+-dontusemixedcaseclassnames
+-dontskipnonpubliclibraryclasses
+-dontpreverify
+-verbose
+-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
+
+-keep public class * extends android.app.Activity
+-keep public class * extends android.app.Application
+-keep public class * extends android.app.Service
+-keep public class * extends android.content.BroadcastReceiver
+-keep public class * extends android.content.ContentProvider
+-keep public class * extends android.app.backup.BackupAgentHelper
+-keep public class * extends android.preference.Preference
+-keep public class com.android.vending.licensing.ILicensingService
+
+-keepclasseswithmembernames class * {
+    native <methods>;
+}
+
+-keepclasseswithmembernames class * {
+    public <init>(android.content.Context, android.util.AttributeSet);
+}
+
+-keepclasseswithmembernames class * {
+    public <init>(android.content.Context, android.util.AttributeSet, int);
+}
+
+-keepclassmembers enum * {
+    public static **[] values();
+    public static ** valueOf(java.lang.String);
+}
+
+-keep class * implements android.os.Parcelable {
+  public static final android.os.Parcelable$Creator *;
+}
diff --git a/tests/DaoTestEntityAnnotation/project.properties b/tests/DaoTestEntityAnnotation/project.properties
new file mode 100644
index 00000000..c957743c
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/project.properties
@@ -0,0 +1,11 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system use,
+# "ant.properties", and override values to adapt the script to your
+# project structure.
+
+# Project target.
+target=android-4
diff --git a/tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/CustomerOrderTest.java b/tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/CustomerOrderTest.java
new file mode 100644
index 00000000..5a182fd5
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/CustomerOrderTest.java
@@ -0,0 +1,60 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.test.AbstractDaoSessionTest;
+
+import java.util.Date;
+import java.util.List;
+
+public class CustomerOrderTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
+
+    public CustomerOrderTest() {
+        super(DaoMaster.class);
+    }
+
+    public void testCustomerToOrders() {
+        Customer customer = new Customer(null, "greenrobot");
+        daoSession.insert(customer);
+
+        addOrderToCustomer(customer);
+        addOrderToCustomer(customer);
+
+        List<Order> orders = customer.getOrders();
+        assertEquals(2, orders.size());
+    }
+
+    public void testOrderToCustomer() {
+        Customer customer = new Customer(null, "greenrobot");
+        daoSession.insert(customer);
+
+        Order order = addOrderToCustomer(customer);
+        Customer customer2 = order.getCustomer();
+        
+        assertSame(customer, customer2);
+    }
+
+    public void testUpdateBirectional() {
+        Customer customer = new Customer(null, "greenrobot");
+        daoSession.insert(customer);
+
+        addOrderToCustomer(customer);
+        List<Order> orders = customer.getOrders();
+        
+        Order newOrder = new Order();
+        newOrder.setCustomer(customer);
+        daoSession.insert(newOrder);
+        orders.add(newOrder);
+        assertEquals(2, orders.size());
+        
+        customer.resetOrders();
+        List<Order> orders2 = customer.getOrders();
+        assertEquals(orders.size(), orders2.size());
+    }
+
+    private Order addOrderToCustomer(Customer customer) {
+        Date date = new Date(System.currentTimeMillis() - ((long) (Math.random() * 1000 * 60 * 60 * 24 * 365)));
+        Order order = new Order(null, date, customer.getId());
+        daoSession.insert(order);
+        return order;
+    }
+
+}
diff --git a/tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/CustomerTest.java b/tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/CustomerTest.java
new file mode 100644
index 00000000..b0bcd549
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/CustomerTest.java
@@ -0,0 +1,22 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+
+import java.util.concurrent.atomic.AtomicLong;
+
+public class CustomerTest extends AbstractDaoTestLongPk<CustomerDao, Customer> {
+    private AtomicLong nameNumber = new AtomicLong();
+
+    public CustomerTest() {
+        super(CustomerDao.class);
+    }
+
+    @Override
+    protected Customer createEntity(Long key) {
+        Customer entity = new Customer();
+        entity.setId(key);
+        entity.setName("Ho " + nameNumber.incrementAndGet());
+        return entity;
+    }
+
+}
diff --git a/tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/NoteTest.java b/tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/NoteTest.java
new file mode 100644
index 00000000..a762603c
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/NoteTest.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+
+public class NoteTest extends AbstractDaoTestLongPk<NoteDao, Note> {
+
+    public NoteTest() {
+        super(NoteDao.class);
+    }
+
+    @Override
+    protected Note createEntity(Long key) {
+        Note entity = new Note();
+        entity.setId(key);
+        entity.setText("green note"); // Has to be set as it is "not null"
+        return entity;
+    }
+
+}
diff --git a/tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/OrderTest.java b/tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/OrderTest.java
new file mode 100644
index 00000000..ea45cb50
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/OrderTest.java
@@ -0,0 +1,19 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+
+public class OrderTest extends AbstractDaoTestLongPk<OrderDao, Order> {
+
+    public OrderTest() {
+        super(OrderDao.class);
+    }
+
+    @Override
+    protected Order createEntity(Long key) {
+        Order entity = new Order();
+        entity.setId(key);
+        entity.setCustomerId(1);
+        return entity;
+    }
+
+}
diff --git a/tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/TypesInInnerClassTest.java b/tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/TypesInInnerClassTest.java
new file mode 100644
index 00000000..cfad57ac
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/TypesInInnerClassTest.java
@@ -0,0 +1,27 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
+import org.greenrobot.greendao.test.entityannotation.TypesInInnerClass.MyInnerType;
+
+public class TypesInInnerClassTest extends AbstractDaoTestLongPk<TypesInInnerClassDao, TypesInInnerClass> {
+
+    public TypesInInnerClassTest() {
+        super(TypesInInnerClassDao.class);
+    }
+
+    @Override
+    protected TypesInInnerClass createEntity(Long key) {
+        TypesInInnerClass entity = new TypesInInnerClass();
+        entity.setId(key);
+        entity.setType(new MyInnerType("cafe"));
+        return entity;
+    }
+
+    public void testType() {
+        TypesInInnerClass entity = createEntity(1L);
+        dao.insert(entity);
+        TypesInInnerClass entity2 = dao.load(1L);
+        assertNotSame(entity, entity2);
+        assertEquals("cafe", entity2.getType().value);
+    }
+}
diff --git a/tests/DaoTestEntityAnnotation/src/main/AndroidManifest.xml b/tests/DaoTestEntityAnnotation/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..83e7c132
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/main/AndroidManifest.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="org.greenrobot.greendao.entityannotation">
+
+    <application
+        android:name="org.greenrobot.greendao.test.entityannotation.App"
+        android:label="greenDAO @Entity Test"
+        android:allowBackup="true">
+    </application>
+
+</manifest>
\ No newline at end of file
diff --git a/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/App.java b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/App.java
new file mode 100644
index 00000000..77b2db8c
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/App.java
@@ -0,0 +1,23 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+import android.app.Application;
+
+import org.greenrobot.greendao.database.Database;
+import org.greenrobot.greendao.test.entityannotation.DaoMaster.DevOpenHelper;
+
+public class App extends Application {
+    private DaoSession daoSession;
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+
+        DevOpenHelper helper = new DevOpenHelper(this, "annotation-test-db");
+        Database db = helper.getWritableDb();
+        daoSession = new DaoMaster(db).newSession();
+    }
+
+    public DaoSession getDaoSession() {
+        return daoSession;
+    }
+}
diff --git a/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Customer.java b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Customer.java
new file mode 100644
index 00000000..ccebe62e
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Customer.java
@@ -0,0 +1,145 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.annotation.Entity;
+import org.greenrobot.greendao.annotation.Generated;
+import org.greenrobot.greendao.annotation.Id;
+import org.greenrobot.greendao.annotation.JoinProperty;
+import org.greenrobot.greendao.annotation.NotNull;
+import org.greenrobot.greendao.annotation.OrderBy;
+import org.greenrobot.greendao.annotation.ToMany;
+import org.greenrobot.greendao.annotation.Unique;
+
+import java.util.List;
+
+/**
+ * Entity mapped to table "CUSTOMER".
+ */
+@Entity(active = true)
+public class Customer {
+
+    @Id(autoincrement = true)
+    private Long id;
+
+    @NotNull
+    @Unique
+    private String name;
+
+    /** Used to resolve relations */
+    @Generated(hash = 2040040024)
+    private transient DaoSession daoSession;
+
+    /** Used for active entity operations. */
+    @Generated(hash = 1697251196)
+    private transient CustomerDao myDao;
+
+    @ToMany(joinProperties = {
+            @JoinProperty(name = "id", referencedName = "customerId")
+    })
+    @OrderBy("date ASC")
+    private List<Order> orders;
+
+    @Generated(hash = 60841032)
+    public Customer() {
+    }
+
+    public Customer(Long id) {
+        this.id = id;
+    }
+
+    @Generated(hash = 969486800)
+    public Customer(Long id, @NotNull String name) {
+        this.id = id;
+        this.name = name;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    @NotNull
+    public String getName() {
+        return name;
+    }
+
+    /** Not-null value; ensure this value is available before it is saved to the database. */
+    public void setName(@NotNull String name) {
+        this.name = name;
+    }
+
+    /**
+     * To-many relationship, resolved on first access (and after reset).
+     * Changes to to-many relations are not persisted, make changes to the target entity.
+     */
+    @Generated(hash = 1084217201)
+    public List<Order> getOrders() {
+        if (orders == null) {
+            final DaoSession daoSession = this.daoSession;
+            if (daoSession == null) {
+                throw new DaoException("Entity is detached from DAO context");
+            }
+            OrderDao targetDao = daoSession.getOrderDao();
+            List<Order> ordersNew = targetDao._queryCustomer_Orders(id);
+            synchronized (this) {
+                if (orders == null) {
+                    orders = ordersNew;
+                }
+            }
+        }
+        return orders;
+    }
+
+    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
+    @Generated(hash = 1446109810)
+    public synchronized void resetOrders() {
+        orders = null;
+    }
+
+    /**
+     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
+     * Entity must attached to an entity context.
+     */
+    @Generated(hash = 128553479)
+    public void delete() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.delete(this);
+    }
+
+    /**
+     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
+     * Entity must attached to an entity context.
+     */
+    @Generated(hash = 713229351)
+    public void update() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.update(this);
+    }
+
+    /**
+     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
+     * Entity must attached to an entity context.
+     */
+    @Generated(hash = 1942392019)
+    public void refresh() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.refresh(this);
+    }
+
+    /** called by internal mechanisms, do not call yourself. */
+    @Generated(hash = 462117449)
+    public void __setDaoSession(DaoSession daoSession) {
+        this.daoSession = daoSession;
+        myDao = daoSession != null ? daoSession.getCustomerDao() : null;
+    }
+
+}
diff --git a/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Note.java b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Note.java
new file mode 100644
index 00000000..621678b1
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Note.java
@@ -0,0 +1,90 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.annotation.Convert;
+import org.greenrobot.greendao.annotation.Entity;
+import org.greenrobot.greendao.annotation.Generated;
+import org.greenrobot.greendao.annotation.Id;
+import org.greenrobot.greendao.annotation.Index;
+import org.greenrobot.greendao.annotation.NotNull;
+
+import java.util.Date;
+
+/**
+ * Entity mapped to table "NOTE".
+ */
+@Entity(indexes = {
+    @Index(value = "text, date DESC", unique = true)
+})
+public class Note {
+
+    @Id
+    private Long id;
+
+    @NotNull
+    private String text;
+    private String comment;
+    private Date date;
+
+    @Convert(converter = NoteTypeConverter.class, columnType = String.class)
+    private NoteType type;
+
+    @Generated(hash = 1272611929)
+    public Note() {
+    }
+
+    public Note(Long id) {
+        this.id = id;
+    }
+
+    @Generated(hash = 59778150)
+    public Note(Long id, @NotNull String text, String comment, Date date, NoteType type) {
+        this.id = id;
+        this.text = text;
+        this.comment = comment;
+        this.date = date;
+        this.type = type;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    @NotNull
+    public String getText() {
+        return text;
+    }
+
+    /** Not-null value; ensure this value is available before it is saved to the database. */
+    public void setText(@NotNull String text) {
+        this.text = text;
+    }
+
+    public String getComment() {
+        return comment;
+    }
+
+    public void setComment(String comment) {
+        this.comment = comment;
+    }
+
+    public Date getDate() {
+        return date;
+    }
+
+    public void setDate(Date date) {
+        this.date = date;
+    }
+
+    public NoteType getType() {
+        return type;
+    }
+
+    public void setType(NoteType type) {
+        this.type = type;
+    }
+
+}
diff --git a/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/NoteType.java b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/NoteType.java
new file mode 100644
index 00000000..b41868cc
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/NoteType.java
@@ -0,0 +1,5 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+public enum NoteType {
+    TEXT, LIST, PICTURE
+}
diff --git a/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/NoteTypeConverter.java b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/NoteTypeConverter.java
new file mode 100644
index 00000000..69cebad5
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/NoteTypeConverter.java
@@ -0,0 +1,15 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.converter.PropertyConverter;
+
+public class NoteTypeConverter implements PropertyConverter<NoteType, String> {
+    @Override
+    public NoteType convertToEntityProperty(String databaseValue) {
+        return NoteType.valueOf(databaseValue);
+    }
+
+    @Override
+    public String convertToDatabaseValue(NoteType entityProperty) {
+        return entityProperty.name();
+    }
+}
diff --git a/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Order.java b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Order.java
new file mode 100644
index 00000000..0f29a9af
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Order.java
@@ -0,0 +1,152 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.DaoException;
+import org.greenrobot.greendao.annotation.Entity;
+import org.greenrobot.greendao.annotation.Generated;
+import org.greenrobot.greendao.annotation.Id;
+import org.greenrobot.greendao.annotation.NotNull;
+import org.greenrobot.greendao.annotation.ToOne;
+
+/**
+ * Entity mapped to table "ORDERS".
+ */
+@Entity(active = true, nameInDb = "ORDERS")
+public class Order {
+
+    @Id
+    private Long id;
+    private java.util.Date date;
+    private long customerId;
+
+    /** Used to resolve relations */
+    @Generated(hash = 2040040024)
+    private transient DaoSession daoSession;
+
+    /** Used for active entity operations. */
+    @Generated(hash = 949219203)
+    private transient OrderDao myDao;
+
+    @ToOne(joinProperty = "customerId")
+    private Customer customer;
+
+    @Generated(hash = 8592637)
+    private transient Long customer__resolvedKey;
+
+    @Generated(hash = 1105174599)
+    public Order() {
+    }
+
+    public Order(Long id) {
+        this.id = id;
+    }
+
+    @Generated(hash = 767587610)
+    public Order(Long id, java.util.Date date, long customerId) {
+        this.id = id;
+        this.date = date;
+        this.customerId = customerId;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public java.util.Date getDate() {
+        return date;
+    }
+
+    public void setDate(java.util.Date date) {
+        this.date = date;
+    }
+
+    public long getCustomerId() {
+        return customerId;
+    }
+
+    public void setCustomerId(long customerId) {
+        this.customerId = customerId;
+    }
+
+    /** To-one relationship, resolved on first access. */
+    @Generated(hash = 941511332)
+    public Customer getCustomer() {
+        long __key = this.customerId;
+        if (customer__resolvedKey == null || !customer__resolvedKey.equals(__key)) {
+            final DaoSession daoSession = this.daoSession;
+            if (daoSession == null) {
+                throw new DaoException("Entity is detached from DAO context");
+            }
+            CustomerDao targetDao = daoSession.getCustomerDao();
+            Customer customerNew = targetDao.load(__key);
+            synchronized (this) {
+                customer = customerNew;
+                customer__resolvedKey = __key;
+            }
+        }
+        return customer;
+    }
+
+    /** called by internal mechanisms, do not call yourself. */
+    @Generated(hash = 625323961)
+    public void setCustomer(@NotNull Customer customer) {
+        if (customer == null) {
+            throw new DaoException(
+                    "To-one property 'customerId' has not-null constraint; cannot set to-one to null");
+        }
+        synchronized (this) {
+            this.customer = customer;
+            customerId = customer.getId();
+            customer__resolvedKey = customerId;
+        }
+    }
+
+    /**
+     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
+     * Entity must attached to an entity context.
+     */
+    @Generated(hash = 128553479)
+    public void delete() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.delete(this);
+    }
+
+    /**
+     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
+     * Entity must attached to an entity context.
+     */
+    @Generated(hash = 713229351)
+    public void update() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.update(this);
+    }
+
+
+
+    /**
+     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
+     * Entity must attached to an entity context.
+     */
+    @Generated(hash = 1942392019)
+    public void refresh() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.refresh(this);
+    }
+
+    /** called by internal mechanisms, do not call yourself. */
+    @Generated(hash = 965731666)
+    public void __setDaoSession(DaoSession daoSession) {
+        this.daoSession = daoSession;
+        myDao = daoSession != null ? daoSession.getOrderDao() : null;
+    }
+
+}
diff --git a/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/TypesInInnerClass.java b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/TypesInInnerClass.java
new file mode 100644
index 00000000..4a2a7f04
--- /dev/null
+++ b/tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/TypesInInnerClass.java
@@ -0,0 +1,65 @@
+package org.greenrobot.greendao.test.entityannotation;
+
+import org.greenrobot.greendao.annotation.Convert;
+import org.greenrobot.greendao.annotation.Entity;
+import org.greenrobot.greendao.annotation.Generated;
+import org.greenrobot.greendao.annotation.Id;
+import org.greenrobot.greendao.converter.PropertyConverter;
+
+@Entity
+public class TypesInInnerClass {
+    static class MyInnerType {
+
+        public MyInnerType(String value) {
+            this.value = value;
+        }
+
+        String value;
+    }
+
+    static class MyInnerTypeConverter implements PropertyConverter<MyInnerType, Long> {
+
+        @Override
+        public MyInnerType convertToEntityProperty(Long databaseValue) {
+            return databaseValue!=null? new MyInnerType(Long.toHexString(databaseValue)): null;
+        }
+
+        @Override
+        public Long convertToDatabaseValue(MyInnerType entityProperty) {
+            return entityProperty!= null? Long.parseLong(entityProperty.value, 16): null;
+        }
+    }
+
+    @Id
+    Long id;
+
+    @Convert(converter = MyInnerTypeConverter.class, columnType = Long.class)
+    MyInnerType type;
+
+    public MyInnerType getType() {
+        return this.type;
+    }
+
+    public void setType(MyInnerType type) {
+        this.type = type;
+    }
+
+    public Long getId() {
+        return this.id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    @Generated(hash = 1322981681)
+    public TypesInInnerClass(Long id, MyInnerType type) {
+        this.id = id;
+        this.type = type;
+    }
+
+    @Generated(hash = 1754325029)
+    public TypesInInnerClass() {
+    }
+
+}
diff --git a/DaoTestGenerator/build.gradle b/tests/DaoTestGenerator/build.gradle
similarity index 100%
rename from DaoTestGenerator/build.gradle
rename to tests/DaoTestGenerator/build.gradle
diff --git a/DaoTestGenerator/src/org/greenrobot/greendao/generator/gentest/TestDaoGenerator.java b/tests/DaoTestGenerator/src/org/greenrobot/greendao/generator/gentest/TestDaoGenerator.java
similarity index 100%
rename from DaoTestGenerator/src/org/greenrobot/greendao/generator/gentest/TestDaoGenerator.java
rename to tests/DaoTestGenerator/src/org/greenrobot/greendao/generator/gentest/TestDaoGenerator.java
diff --git a/DaoTestPerformance/build.gradle b/tests/DaoTestPerformance/build.gradle
similarity index 94%
rename from DaoTestPerformance/build.gradle
rename to tests/DaoTestPerformance/build.gradle
index b65b5569..39362e9f 100644
--- a/DaoTestPerformance/build.gradle
+++ b/tests/DaoTestPerformance/build.gradle
@@ -17,7 +17,7 @@ repositories {
 }
 
 dependencies {
-    compile project(':DaoTestBase')
+    compile project(':tests:DaoTestBase')
     androidTestCompile 'org.greenrobot:essentials:3.0.0-SNAPSHOT'
 }
 
diff --git a/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/Benchmark.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/Benchmark.java
similarity index 100%
rename from DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/Benchmark.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/Benchmark.java
diff --git a/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/IndexedStringPerformanceTest.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/IndexedStringPerformanceTest.java
similarity index 100%
rename from DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/IndexedStringPerformanceTest.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/IndexedStringPerformanceTest.java
diff --git a/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/LoockupPerformanceTest.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/LoockupPerformanceTest.java
similarity index 100%
rename from DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/LoockupPerformanceTest.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/LoockupPerformanceTest.java
diff --git a/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTest.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTest.java
similarity index 100%
rename from DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTest.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTest.java
diff --git a/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTestNotNull.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTestNotNull.java
similarity index 100%
rename from DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTestNotNull.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTestNotNull.java
diff --git a/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTestNotNullIdentityScope.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTestNotNullIdentityScope.java
similarity index 100%
rename from DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTestNotNullIdentityScope.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/PerformanceTestNotNullIdentityScope.java
diff --git a/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/ReflectionPerformanceTest.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/ReflectionPerformanceTest.java
similarity index 100%
rename from DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/ReflectionPerformanceTest.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/ReflectionPerformanceTest.java
diff --git a/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/StringGenerator.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/StringGenerator.java
similarity index 100%
rename from DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/StringGenerator.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/StringGenerator.java
diff --git a/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/ArrayUtils.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/ArrayUtils.java
similarity index 100%
rename from DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/ArrayUtils.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/ArrayUtils.java
diff --git a/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongHashMapAmarena2DZechner.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongHashMapAmarena2DZechner.java
similarity index 100%
rename from DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongHashMapAmarena2DZechner.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongHashMapAmarena2DZechner.java
diff --git a/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongHashMapJDBM.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongHashMapJDBM.java
similarity index 100%
rename from DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongHashMapJDBM.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongHashMapJDBM.java
diff --git a/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongSparseArray.java b/tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongSparseArray.java
similarity index 100%
rename from DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongSparseArray.java
rename to tests/DaoTestPerformance/src/androidTest/java/org/greenrobot/greendao/performance/target/LongSparseArray.java
diff --git a/DaoTestPerformance/src/main/AndroidManifest.xml b/tests/DaoTestPerformance/src/main/AndroidManifest.xml
similarity index 100%
rename from DaoTestPerformance/src/main/AndroidManifest.xml
rename to tests/DaoTestPerformance/src/main/AndroidManifest.xml
