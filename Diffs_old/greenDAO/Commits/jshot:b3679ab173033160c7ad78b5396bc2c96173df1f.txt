diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java
index 8ab633f6..f445657c 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java
@@ -8,6 +8,7 @@
 
 
 
+
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT . Enable "keep" sections if you want to edit.
 /**
  * Entity mapped to table CUSTOMER.
@@ -20,6 +21,7 @@
 
 
 
+
     /** Used to resolve relations */
     protected transient DaoSession daoSession;
 
@@ -116,8 +118,9 @@ public void updateNotNull(Customer other) {
 
         // relationships
         if(other.getOrders() != null) {
-            this.setOrders(other.getOrders());
+            orders = (other.getOrders());
         }
     }
 
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
index 2d0ff2c0..89cdc8b8 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
@@ -12,8 +12,8 @@ public Note(Long id) {
         super(id);
     }
 
-    public Note(Long id, String text, String comment, java.util.Date date, java.util.List<String> userIds) {
-        super(id, text, comment, date, userIds);
+    public Note(Long id, String text, String comment, java.util.Date date, Integer __gender, java.util.List<String> userIds) {
+        super(id, text, comment, date, __gender, userIds);
     }
 
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
index 2af69421..eb5c4890 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
@@ -3,6 +3,8 @@
 
 
 
+import de.greenrobot.daoexample.NoteActivity;
+
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT . Enable "keep" sections if you want to edit.
 /**
@@ -20,9 +22,13 @@
     @JSONIgnore
     protected String comment;
     protected java.util.Date date;
+    protected Integer __gender;
     protected java.util.List<String> userIds;
 
 
+    //enum properties
+    private NoteActivity.Gender gender;
+
 
     @Deprecated
     public NoteBase() {
@@ -33,11 +39,12 @@ public NoteBase(Long id) {
     }
 
     @Inject( Context )
-    public NoteBase(Long id, String text, String comment, java.util.Date date, java.util.List<String> userIds) {
+    public NoteBase(Long id, String text, String comment, java.util.Date date, Integer __gender, java.util.List<String> userIds) {
         this.id = id;
         this.text = text;
         this.comment = comment;
         this.date = date;
+        this.__gender = __gender;
         this.userIds = userIds;
     }
 
@@ -77,6 +84,16 @@ public void setDate(java.util.Date date) {
         this.date = date;
     }
 
+    @Test( key1 = value1 )
+    public Integer get__gender() {
+        return __gender;
+    }
+
+    @Test( key1 = value1 )
+    public void set__gender(Integer __gender) {
+        this.__gender = __gender;
+    }
+
     public java.util.List<String> getUserIds() {
         return userIds;
     }
@@ -102,6 +119,10 @@ public void updateNotNull(Note other) {
             this.date = other.date;
         }
 
+        if(other.getGender() != null) {
+            setGender(other.getGender());
+        }
+
         if(other.userIds != null) {
             this.userIds = other.userIds;
         }
@@ -109,4 +130,20 @@ public void updateNotNull(Note other) {
         // relationships
     }
 
+    public NoteActivity.Gender getGender() {
+        if(gender == null && __gender != null) {
+           gender  = NoteActivity.Gender.values()[__gender];
+        }
+        return gender;
+    }
+
+    public void setGender(NoteActivity.Gender gender) {
+        this.gender = gender;
+        if( this.gender == null) {
+            __gender = null;
+        } else {
+            __gender = this.gender.ordinal();
+        }
+    }
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
index d6612ade..ecc93a20 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
@@ -27,7 +27,8 @@
         public final static Property Text =new Property(1, String.class , "text", false, "TEXT");
         public final static Property Comment =new Property(2, String.class , "comment", false, "COMMENT");
         public final static Property Date =new Property(3, java.util.Date.class , "date", false, "DATE");
-        public final static Property UserIds =new Property(4, java.util.List.class , "userIds", false, "USER_IDS");
+        public final static Property __gender =new Property(4, Integer.class , "__gender", false, "__GENDER");
+        public final static Property UserIds =new Property(5, java.util.List.class , "userIds", false, "USER_IDS");
     };
 
 
@@ -47,7 +48,8 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
                 "'TEXT' TEXT NOT NULL ," + // 1: text
                 "'COMMENT' TEXT," + // 2: comment
                 "'DATE' INTEGER," + // 3: date
-                "'USER_IDS' TEXT);"); // 4: userIds
+                "'__GENDER' INTEGER," + // 4: __gender
+                "'USER_IDS' TEXT);"); // 5: userIds
     }
 
     /** Drops the underlying database table. */
@@ -81,9 +83,15 @@ protected void bindValues(SQLiteStatement stmt, Note entity) {
 
         }
  
+        Integer __gender = entity.get__gender();
+        if (__gender != null) {
+            stmt.bindLong(5, __gender);
+
+        }
+ 
         java.util.List<String> userIds = entity.getUserIds();
         if (userIds != null) {
-            stmt.bindString(5, serializeStringList(userIds));
+            stmt.bindString(6, serializeStringList(userIds));
 
         }
     }
@@ -103,7 +111,8 @@ public Note readEntity(Cursor cursor, int offset) {
             cursor.getString(offset + 1) , // text
             cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) , // comment
             cursor.isNull(offset + 3) ? null : new java.util.Date( cursor.getLong(offset + 3) ) , // date
-            cursor.isNull(offset + 4) ? null : deserializeStringList( cursor.getString(offset + 4) ) // userIds
+            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) , // __gender
+            cursor.isNull(offset + 5) ? null : deserializeStringList( cursor.getString(offset + 5) ) // userIds
         );
         return entity;
     }
@@ -115,7 +124,8 @@ public void readEntity(Cursor cursor, Note entity, int offset) {
         entity.setText(cursor.getString(offset + 1) );
         entity.setComment(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) );
         entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date( cursor.getLong(offset + 3) ) );
-        entity.setUserIds(cursor.isNull(offset + 4) ? null : deserializeStringList( cursor.getString(offset + 4) ));
+        entity.set__gender(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) );
+        entity.setUserIds(cursor.isNull(offset + 5) ? null : deserializeStringList( cursor.getString(offset + 5) ));
      }
 
     /** @inheritdoc */
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java b/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java
index 62ed795c..a4124a51 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java
@@ -8,6 +8,7 @@
 
 
 
+
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT . Enable "keep" sections if you want to edit.
 /**
  * Entity mapped to table ORDERS.
@@ -23,6 +24,7 @@
     private Customer customer2;
 
 
+
     /** Used to resolve relations */
     protected transient DaoSession daoSession;
 
@@ -167,4 +169,5 @@ public void setCustomer2(Customer customer2) {
         serializedCustomer = null; //onBeforeSave will do serialization
     }
 
+
 }
diff --git a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
index 48a3ba53..5ad4c1a9 100644
--- a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
+++ b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
@@ -130,4 +130,9 @@ protected void onListItemClick(ListView l, View v, int position, long id) {
         cursor.requery();
     }
 
+	public static class Gender {
+		male,
+		female
+	}
+
 }
\ No newline at end of file
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index 806bc5e6..b4dfe8bc 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -46,6 +46,7 @@ private static void addNote(Schema schema) {
         note.addAnnotation(new Annotation("Test2", "singleValueeee"));
         note.addAnnotation(new Annotation("Test3", "key1", "5", "key2","\"value2\""));
         note.addAnnotation(new Annotation("Test4", "key1", null, "key2","\"value2\""));
+        note.addEnumProperty("gender", "NoteActivity.Gender", new Annotation("Test", "key1", "value1")).addImport("de.greenrobot.daoexample.NoteActivity");
         note.addProperty(PropertyType.StringList, "userIds");
 
         note.addEmptyConstructorAnnotation(new Annotation("Deprecated"));
diff --git a/DaoGenerator/src-template/entity-base.ftl b/DaoGenerator/src-template/entity-base.ftl
index 07b458ed..4310eea9 100644
--- a/DaoGenerator/src-template/entity-base.ftl
+++ b/DaoGenerator/src-template/entity-base.ftl
@@ -1,5 +1,6 @@
 <#include "*/annotation.ftl">
 <#include "*/serialize-helper.ftl">
+<#include "*/enum-helper.ftl">
 <#--
 
 Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
@@ -49,6 +50,12 @@ import ${import};
     </#list>
 </#list>
 
+<#list entity.enumProperties as enum>
+    <#list enum.imports as import>
+import ${import};
+    </#list>
+</#list>
+
 
 <#if entity.hasKeepSections>
 // THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
@@ -82,6 +89,13 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
     </#list>
 </#if>
 
+<#if  entity.enumProperties?has_content>
+    //enum properties
+    <#list entity.enumProperties as enum>
+    private ${enum.className} ${enum.propertyName};
+    </#list>
+</#if>
+
 
 <#if entity.active>
     /** Used to resolve relations */
@@ -275,6 +289,10 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
         //serialized
         if(other.get${property.serialized.propertyName?cap_first}() != null) {
             set${property.serialized.propertyName?cap_first}(other.get${property.serialized.propertyName?cap_first}());
+        }
+            <#elseif property.enumarated??>
+        if(other.get${property.enumarated.propertyName?cap_first}() != null) {
+            set${property.enumarated.propertyName?cap_first}(other.get${property.enumarated.propertyName?cap_first}());
         }
             <#else>
         if(other.${property.propertyName} != null) {
@@ -304,6 +322,15 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 <@print_serialization_stub serialization />
 </#list>
 
+<#--
+##########################################
+########## Enumarated field Operations ######
+##########################################
+-->
+<#list entity.enumProperties as enum>
+<@print_enum_stub enum />
+</#list>
+
 <#if entity.hasKeepSections>
     // KEEP METHODS - put your custom methods here
 ${keepMethods!}    // KEEP METHODS END
diff --git a/DaoGenerator/src-template/enum-helper.ftl b/DaoGenerator/src-template/enum-helper.ftl
new file mode 100644
index 00000000..2d0a4e00
--- /dev/null
+++ b/DaoGenerator/src-template/enum-helper.ftl
@@ -0,0 +1,24 @@
+<#include "*/annotation.ftl">
+<#macro print_enum_stub stub>
+    <@print_annotations stub.getterAnnotations, "    "/>
+    public ${stub.className} get${stub.propertyName?cap_first}() {
+        if(${stub.propertyName} == null && ${stub.property.propertyName} != null) {
+           try {
+               ${stub.propertyName} = ${stub.className}.values()[${stub.property.propertyName}];
+           } catch(Throwable t) {
+               //silent fail
+           }
+        }
+        return ${stub.propertyName};
+    }
+
+    <@print_annotations stub.setterAnnotations, "    "/>
+    public void set${stub.propertyName?cap_first}(${stub.className} ${stub.propertyName}) {
+        this.${stub.propertyName} = ${stub.propertyName};
+        if( this.${stub.propertyName} == null) {
+            ${stub.property.propertyName} = null;
+        } else {
+            ${stub.property.propertyName} = this.${stub.propertyName}.ordinal();
+        }
+    }
+</#macro>
\ No newline at end of file
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index 08192b0a..5b896706 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -59,6 +59,7 @@
     private final List<Annotation> emptyConstructorAnnotations;
     private final List<Annotation> fullConstructorAnnotations;
     private final List<SerializedProperty> serializedProperties;
+    private final List<EnumProperty> enumProperties;
 
     private String tableName;
     private String classNameDao;
@@ -98,6 +99,7 @@
         emptyConstructorAnnotations = new ArrayList<Annotation>();
         fullConstructorAnnotations = new ArrayList<Annotation>();
         serializedProperties = new ArrayList<SerializedProperty>();
+        enumProperties = new ArrayList<EnumProperty>();
         constructors = true;
     }
 
@@ -158,10 +160,27 @@ public SerializedProperty addSerializedProperty(String propertyName, String clas
         return this.addSerializedProperty(property, propertyName, className);
     }
 
+    public EnumProperty addEnumProperty(Property property, String propertyName, String className) {
+        EnumProperty enumProperty = new EnumProperty(property, propertyName, className);
+        this.enumProperties.add(enumProperty);
+        return enumProperty;
+    }
+
+    public EnumProperty addEnumProperty(String propertyName, String className, Annotation basePropertyAnnotation) {
+        Property property = this.addProperty(PropertyType.Int, "__" + propertyName)
+                .addSetterGetterAnnotation(basePropertyAnnotation)
+                .getProperty();
+        return this.addEnumProperty(property, propertyName, className);
+    }
+
     public List<SerializedProperty> getSerializedProperties() {
         return serializedProperties;
     }
 
+    public List<EnumProperty> getEnumProperties() {
+        return enumProperties;
+    }
+
     public Entity addAnnotation(Annotation annotation) {
         this.annotations.add(annotation);
         return this;
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/EnumProperty.java b/DaoGenerator/src/de/greenrobot/daogenerator/EnumProperty.java
new file mode 100644
index 00000000..6a0db5f6
--- /dev/null
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/EnumProperty.java
@@ -0,0 +1,69 @@
+package de.greenrobot.daogenerator;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class EnumProperty {
+    protected Property property;
+    protected String propertyName;
+    protected String className;
+    protected List<String> imports = new ArrayList<String>();
+
+    private List<Annotation> setterAnnotations = new ArrayList<Annotation>();
+    private List<Annotation> getterAnnotations = new ArrayList<Annotation>();
+
+    public EnumProperty(Property property, String propertyName, String className) {
+        if(property.getPropertyType() != PropertyType.Int) {
+            throw new RuntimeException("Enum properties can only be constructed on top of int properties");
+        }
+        this.property = property;
+        this.propertyName = propertyName;
+        this.className = className;
+        property.setEnumarated(this);
+    }
+
+    public Property getProperty() {
+        return property;
+    }
+
+    public String getPropertyName() {
+        return propertyName;
+    }
+
+    public String getClassName() {
+        return className;
+    }
+
+    public List<Annotation> getSetterAnnotations() {
+        return setterAnnotations;
+    }
+
+    public List<Annotation> getGetterAnnotations() {
+        return getterAnnotations;
+    }
+
+    public EnumProperty addSetterAnnotation(Annotation annotation) {
+        setterAnnotations.add(annotation);
+        return this;
+    }
+
+    public EnumProperty addSetterGetterAnnotation(Annotation annotation) {
+        setterAnnotations.add(annotation);
+        getterAnnotations.add(annotation);
+        return this;
+    }
+
+    public EnumProperty addGetterAnnotation(Annotation annotation) {
+        getterAnnotations.add(annotation);
+        return this;
+    }
+
+    public EnumProperty addImport(String pack) {
+        this.imports.add(pack);
+        return this;
+    }
+
+    public List<String> getImports() {
+        return imports;
+    }
+}
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index 26bc7cc0..fbe07604 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -147,6 +147,7 @@ public Property getProperty() {
     private boolean unique;
     private boolean notNull;
     private SerializedProperty serialized;
+    private EnumProperty enumarated;
 
     private Entity backingEntity;
 
@@ -184,6 +185,14 @@ public void setSerialized(SerializedProperty serialized) {
         this.serialized = serialized;
     }
 
+    public EnumProperty getEnumarated() {
+        return enumarated;
+    }
+
+    public void setEnumarated(EnumProperty enumarated) {
+        this.enumarated = enumarated;
+    }
+
     public void setPropertyType(PropertyType propertyType) {
         this.propertyType = propertyType;
     }
