diff --git a/DaoCore/src/main/java/de/greenrobot/dao/Property.java b/DaoCore/src/main/java/de/greenrobot/dao/Property.java
index 77923eb7..eddd6e40 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/Property.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/Property.java
@@ -33,13 +33,17 @@
     public final String name;
     public final boolean primaryKey;
     public final String columnName;
+    public final String sqlType;
+    public final int version;
 
-    public Property(int ordinal, Class<?> type, String name, boolean primaryKey, String columnName) {
+    public Property(int ordinal, Class<?> type, String name, boolean primaryKey, String columnName, String sqlType, int version) {
         this.ordinal = ordinal;
         this.type = type;
         this.name = name;
         this.primaryKey = primaryKey;
         this.columnName = columnName;
+        this.sqlType = sqlType;
+        this.version = version;
     }
 
     /** Creates an "equal ('=')" condition  for this property. */
diff --git a/DaoGenerator/src-template/dao-master.ftl b/DaoGenerator/src-template/dao-master.ftl
index adaffc48..6f6bd55e 100644
--- a/DaoGenerator/src-template/dao-master.ftl
+++ b/DaoGenerator/src-template/dao-master.ftl
@@ -81,6 +81,56 @@ public class DaoMaster extends AbstractDaoMaster {
             dropAllTables(db, true);
             onCreate(db);
         }
+        
+    }
+    
+    /** WARNING: Drops all table on Upgrade! Use only during development. */
+    public static class AutoUpdateOpenHelper extends OpenHelper {
+        public AutoUpdateOpenHelper(Context context, String name, CursorFactory factory) {
+            super(context, name, factory);
+        }
+
+        @Override
+        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+			db.beginTransaction();
+        	try {
+<#list schema.entities as entity>
+        		${entity.classNameDao}.updateTable(db, oldVersion, newVersion);
+</#list>
+        		db.setTransactionSuccessful();
+        	} finally {
+        		db.endTransaction();
+        	}        
+        	
+		}
+        
+    }
+
+    /** WARNING: Drops all table on Upgrade! Use only during development. */
+    public static class DevAutoUpdateOpenHelper extends OpenHelper {
+        public DevAutoUpdateOpenHelper(Context context, String name, CursorFactory factory) {
+            super(context, name, factory);
+        }
+
+        @Override
+        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+			db.beginTransaction();
+        	try {
+<#list schema.entities as entity>
+        		${entity.classNameDao}.updateTable(db, oldVersion, newVersion);
+</#list>
+        		
+        	} catch (Exception e) {
+        		e.printStackTrace();
+                Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
+                dropAllTables(db, true);
+                onCreate(db);
+        	} finally {
+        		db.endTransaction();
+        	}        
+        	
+		}
+        
     }
 
     public DaoMaster(SQLiteDatabase db) {
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 60f7045b..6024b86f 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -30,6 +30,7 @@ import java.util.ArrayList;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
+import android.util.Log;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
@@ -64,6 +65,8 @@ import ${entity.javaPackage}.${entity.className}.Builder;
 public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${entity.pkType}> {
 
     public static final String TABLENAME = "${entity.tableName}";
+    
+    public static final String TAG = "${entity.classNameDao}";
 
     /**
      * Properties of entity ${entity.className}.<br/>
@@ -71,8 +74,15 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
     */
     public static class Properties {
 <#list entity.propertiesColumns as property>
-        public final static Property ${property.propertyName?cap_first} = new Property(${property_index}, ${property.javaType}.class, "${property.propertyName}", ${property.primaryKey?string}, "${property.columnName}");
+        public final static Property ${property.propertyName?cap_first} = new Property(${property_index}, ${property.javaType}.class, "${property.propertyName}", ${property.primaryKey?string}, "${property.columnName}", "${property.columnType}", ${property.version});
 </#list>
+
+		public final static Property [] all = {
+<#list entity.propertiesColumns as property>
+        	${property.propertyName?cap_first},
+</#list>
+		};
+		
     };
 
 <#if entity.active>
@@ -114,6 +124,15 @@ as property>\"${property.columnName}\"<#if property_has_next>,</#if></#list>);")
 </#list>
 </#if>         
     }
+    
+    public static void updateTable(SQLiteDatabase db, int oldVer, int newVer) {
+	    for (Property p : Properties.all) {
+			if (p.version > oldVer) {
+	    		Log.i(TAG, "Alter table " + TABLENAME + " add column '" + p.columnName + "' " + p.sqlType);
+	    		db.execSQL("ALTER TABLE \"" + TABLENAME + "\" ADD \"" + p.columnName + "\" " + p.sqlType);
+	    	}
+	    }
+	}
 
     /** Drops the underlying database table. */
     public static void dropTable(SQLiteDatabase db, boolean ifExists) {
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index 3af4607a..7045a970 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -134,6 +134,10 @@ public PropertyBuilder codeBeforeGetterAndSetter(String code) {
         public Property getProperty() {
             return property;
         }
+
+		public void setVersion(int versionDontForgetToBump) {
+			property.version = versionDontForgetToBump;
+		}
     }
 
     private final Schema schema;
@@ -169,6 +173,8 @@ public Property getProperty() {
     private String javaType;
     private String parcelableWriteStatement = "";
     private String parcelableReadStatement = "";
+    
+    private int version = -1;
 
     public Property(Schema schema, Entity entity, PropertyType propertyType, String propertyName) {
         this.schema = schema;
@@ -280,6 +286,14 @@ public String getDatabaseValueExpression() {
     public String getDatabaseValueExpressionNotNull() {
         return getDatabaseValueExpression("entity.get" + DaoUtil.capFirst(propertyName) + "()");
     }
+    
+    /**
+     * version this field was added.  can be used in the onUpgrade callback to auto update.
+     * @return
+     */
+    public String getVersion() {
+    	return String.valueOf(version);
+    }
 
     // Got too messy in template:
     // <#if property.customType?has_content>${property.propertyName}Converter.convertToDatabaseValue(</#if><#--
