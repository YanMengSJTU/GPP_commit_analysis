diff --git a/DaoGenerator/src-template/easy-mapping.ftl b/DaoGenerator/src-template/easy-mapping.ftl
new file mode 100644
index 00000000..c1e2ed33
--- /dev/null
+++ b/DaoGenerator/src-template/easy-mapping.ftl
@@ -0,0 +1,7 @@
+package com.droidastic.telljokes.db;
+
+public interface EasyMapping {
+	EasyMapping initFromMap(java.util.Map<String, Object> map);
+
+	java.util.Map<String, Object> convertToMap();
+}
\ No newline at end of file
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index a24e612d..f29ac3a1 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -263,7 +263,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 		<#list entity.properties as property>
 		try {
 			this.${property.propertyName} = (${property.javaType}) map.get(ds_${property.propertyName});
-		} catch (ClassCastException e) {}
+		} catch (Exception e) {}
 		</#list>
 		return this;
 	}
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index 8f6cd34d..b1ac79be 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -47,6 +47,7 @@
 	private Template	templateDaoSession;
 	private Template	templateEntity;
 	private Template	templateDaoUnitTest;
+	private Template	templateEasyMapping;
 
 	public DaoGenerator() throws IOException {
 		System.out.println("greenDAO Generator");
@@ -64,15 +65,11 @@ public DaoGenerator() throws IOException {
 		this.templateDao = config.getTemplate("dao.ftl");
 		this.templateDaoMaster = config.getTemplate("dao-master.ftl");
 		this.templateDaoSession = config.getTemplate("dao-session.ftl");
+		this.templateEasyMapping = config.getTemplate("easy-mapping.ftl");
 		this.templateEntity = config.getTemplate("entity.ftl");
 		this.templateDaoUnitTest = config.getTemplate("dao-unit-test.ftl");
 	}
 
-	private Pattern compilePattern(String sectionName) {
-		int flags = Pattern.DOTALL | Pattern.MULTILINE;
-		return Pattern.compile(".*^\\s*?//\\s*?KEEP " + sectionName + ".*?\n(.*?)^\\s*// KEEP " + sectionName + " END.*?\n", flags);
-	}
-
 	public void generateAll(Schema schema, String outDir) throws Exception {
 		generateAll(schema, outDir, null);
 	}
@@ -94,6 +91,12 @@ public void generateAll(Schema schema, String outDir, String outDirTest) throws
 		List<Entity> entities = schema.getEntities();
 
 		for (Entity entity : entities) {
+
+			if (schema.isHasEasyDatastoreIntegration()) {
+				entity.implementsSerializable();
+				entity.implementsInterface("EasyMapping");
+			}
+
 			generate(this.templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(), schema, entity);
 			if (!entity.isProtobuf() && !entity.isSkipGeneration()) {
 				generate(this.templateEntity, outDirFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
@@ -111,6 +114,7 @@ public void generateAll(Schema schema, String outDir, String outDirTest) throws
 		}
 		generate(this.templateDaoMaster, outDirFile, schema.getDefaultJavaPackageDao(), "DaoMaster", schema, null);
 		generate(this.templateDaoSession, outDirFile, schema.getDefaultJavaPackageDao(), "DaoSession", schema, null);
+		generate(this.templateEasyMapping, outDirFile, schema.getDefaultJavaPackageDao(), "EasyMapping", schema, null);
 
 		long time = System.currentTimeMillis() - start;
 		System.out.println("Processed " + entities.size() + " entities in " + time + "ms");
@@ -124,32 +128,11 @@ protected File toFileForceExists(String filename) throws IOException {
 		return file;
 	}
 
-	private void generate(Template template, File outDirFile, String javaPackage, String javaClassName, Schema schema, Entity entity)
-			throws Exception {
-		try {
-			File file = toJavaFilename(outDirFile, javaPackage, javaClassName);
-			file.getParentFile().mkdirs();
-
-			Map<String, Object> root = new HashMap<String, Object>();
-			root.put("schema", schema);
-			root.put("entity", entity);
-
-			if (entity != null && entity.getHasKeepSections()) {
-				checkKeepSections(file, root);
-			}
-
-			Writer writer = new FileWriter(file);
-			try {
-				template.process(root, writer);
-				writer.flush();
-				System.out.println("Written " + file.getCanonicalPath());
-			} finally {
-				writer.close();
-			}
-		} catch (Exception ex) {
-			System.err.println("Error while generating " + javaPackage + "." + javaClassName + " (" + outDirFile.getCanonicalPath() + ")");
-			throw ex;
-		}
+	protected File toJavaFilename(File outDirFile, String javaPackage, String javaClassName) {
+		String packageSubPath = javaPackage.replace('.', '/');
+		File packagePath = new File(outDirFile, packageSubPath);
+		File file = new File(packagePath, javaClassName + ".java");
+		return file;
 	}
 
 	private void checkKeepSections(File file, Map<String, Object> root) {
@@ -179,11 +162,37 @@ private void checkKeepSections(File file, Map<String, Object> root) {
 		}
 	}
 
-	protected File toJavaFilename(File outDirFile, String javaPackage, String javaClassName) {
-		String packageSubPath = javaPackage.replace('.', '/');
-		File packagePath = new File(outDirFile, packageSubPath);
-		File file = new File(packagePath, javaClassName + ".java");
-		return file;
+	private Pattern compilePattern(String sectionName) {
+		int flags = Pattern.DOTALL | Pattern.MULTILINE;
+		return Pattern.compile(".*^\\s*?//\\s*?KEEP " + sectionName + ".*?\n(.*?)^\\s*// KEEP " + sectionName + " END.*?\n", flags);
+	}
+
+	private void generate(Template template, File outDirFile, String javaPackage, String javaClassName, Schema schema, Entity entity)
+			throws Exception {
+		try {
+			File file = toJavaFilename(outDirFile, javaPackage, javaClassName);
+			file.getParentFile().mkdirs();
+
+			Map<String, Object> root = new HashMap<String, Object>();
+			root.put("schema", schema);
+			root.put("entity", entity);
+
+			if (entity != null && entity.getHasKeepSections()) {
+				checkKeepSections(file, root);
+			}
+
+			Writer writer = new FileWriter(file);
+			try {
+				template.process(root, writer);
+				writer.flush();
+				System.out.println("Written " + file.getCanonicalPath());
+			} finally {
+				writer.close();
+			}
+		} catch (Exception ex) {
+			System.err.println("Error while generating " + javaPackage + "." + javaClassName + " (" + outDirFile.getCanonicalPath() + ")");
+			throw ex;
+		}
 	}
 
 }
