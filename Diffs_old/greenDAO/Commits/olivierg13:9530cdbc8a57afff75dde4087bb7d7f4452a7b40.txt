diff --git a/CHANGELOG.md b/CHANGELOG.md
index eea4cd15..3f3a1dbe 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,11 +1,19 @@
 Release History
 ---------------
-### V2.1.0 Minor feature release (2015-09-XX, both core and generator)
+### V2.2.0 Minor feature and bugfix release (2016-??-??))
+* Attention: artifact group changed to 'org.greenrobot' (Java package starting with 'de' remains, no breaking changes)
+* Query.setParameter returns the query to allow a more fluent API
+* New DAO method detachAll to detach all entities of a specific type
+* Using Gradle 2.12's compileOnly dependencies fixed errors with Android Studio (only relevant if you want to work on the greenDAO source)
+
+### V2.1.0 Minor feature and bugfix release (2015-11-12, both core and generator)
 * Official Robolectric support: workaround for a broken system call in Robolectric triggered by Query.forCurrentThread
+* QueryBuilder now allows to create DISTINCT queries to avoid duplicate entities returned
 * CursorQuery (beta, API might change)
+* Deadlock prevention when loading a list of entities while doing concurrent updates
 * Fixed async queries
 * Better Android Studio support
-* Added performance tests for: ActiveAndroid, Realm, Parse
+* Generator: Possibility to supply custom JavaDoc for entities and their properties
 * Generator: Fixed codeBeforeGetter, added codeBeforeGetterAndSetter
 
 ### V2.0.0 Major feature release (2015-07-30, both core and generator)
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 00000000..1be8916f
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,45 @@
+Before you create an Issue...
+=============================
+
+There are better Places for Support
+-----------------------------------
+We want your question to be answered, so it is important that you ask at the right place. Be aware that an issue tracker is not the best place to ask for support. An issue tracker is used to track issues (bugs or feature requests).
+Instead, please use [stackoverflow.com](http://stackoverflow.com/questions/tagged/greendao?sort=frequent) and use the tag [greendao](http://stackoverflow.com/tags/greendao/info) for your question.
+
+If you want professional support, check http://greenrobot.org/contact-support/.
+
+Examples for support questions that are more likely to be answered on StackOverflow:
+
+* Asking how something works
+* Asking how to use greenDAO in a specific scenario
+* Your app crashes/misbehaves and you are not sure why
+
+The perfect Issue Report
+------------------------
+A couple of simple steps can save time for everyone.
+
+Check before reporting:
+
+* It's not a support inquiry
+* You have read the docs
+* You searched the web and stackoverflow
+* You searched existing issues to avoid duplicates
+
+Reporting bugs:
+
+ * Please investigate if is the bug is really caused by the library. Isolate the issue: what's the minimal code to reproduce the bug?
+ * Bonus steps to gain extra karma points: once you isolated and identified the issue, you can prepare an push request. Submit an unit test causing the bug, and ideally a fix for the bug.
+
+Requesting features:
+
+ * Ask yourself: is the feature useful for a majority users? One of our major goals is to keep the API simple and concise. We do not want to cover all possible use cases, but those that make 80% of users happy.
+
+A Note on Pull Requests
+=======================
+Pull requests (and issues) may queue up up a bit. Usually, pull requests and issues are checked when new releases are planned.
+
+For bigger pull requests, it's a good idea to check with the maintainer upfront about the idea and the implementation outline.
+
+Thanks for reading!
+===================
+It's your contributions and feedback that makes maintaining this library fun.
diff --git a/DaoCore/.gitignore b/DaoCore/.gitignore
index 5200a9fa..6a0dc5ea 100644
--- a/DaoCore/.gitignore
+++ b/DaoCore/.gitignore
@@ -1,5 +1 @@
-/gen
-/bin
-/release
-/build
 /gradle.properties
diff --git a/DaoCore/build.gradle b/DaoCore/build.gradle
index c4349eb0..d8bca22f 100644
--- a/DaoCore/build.gradle
+++ b/DaoCore/build.gradle
@@ -2,9 +2,9 @@ apply plugin: 'java'
 apply plugin: 'maven'
 apply plugin: 'signing'
 
-group = 'de.greenrobot'
+group = 'org.greenrobot'
 archivesBaseName = 'greendao'
-version = '2.1.0-SNAPSHOT'
+version = '2.2.0-SNAPSHOT'
 sourceCompatibility = 1.6
 
 def isSnapshot = version.endsWith('-SNAPSHOT')
@@ -19,10 +19,7 @@ repositories {
     mavenCentral()
 }
 
-// provided is not supported in Gradle 1.4, see http://issues.gradle.org/browse/GRADLE-784
-// Like this, it won't appear at all in the POM
 configurations {
-    provided
     deployerJars
 }
 
@@ -33,29 +30,19 @@ dependencies {
     provided files('libs/sqlcipher.jar')
 
     // Other dependencies
-    provided 'com.google.android:android:4.1.1.4'
-    provided 'com.google.android:android-test:4.1.1.4'
-    provided 'com.google.android:annotations:4.1.1.4'
-    provided 'com.google.android:support-v4:r7'
+    compileOnly 'com.google.android:android:4.1.1.4'
+    compileOnly 'com.google.android:android-test:4.1.1.4'
+    compileOnly 'com.google.android:annotations:4.1.1.4'
+    compileOnly 'com.google.android:support-v4:r7'
     // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4'
     deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
 }
 
-sourceSets {
-    main {
-        compileClasspath += configurations.provided
-        java {
-            srcDir 'src'
-        }
-    }
-}
-
 javadoc {
     failOnError = false
-    classpath += configurations.provided
     title = " greenDAO ${version} API"
-    options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2011-2013 <a href="http://greenrobot.de/">greenrobot.de</a>. All Rights Reserved.</i>'
-    excludes = ['de/greenrobot/dao/internal','de/greenrobot/dao/Internal*']
+	options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2011-2016 <a href="http://greenrobot.org/">greenrobot.org</a>. All Rights Reserved.</i>'
+	excludes = ['de/greenrobot/dao/internal','de/greenrobot/dao/Internal*']
 }
 
 task javadocJar(type: Jar, dependsOn: javadoc) {
@@ -76,7 +63,7 @@ artifacts {
 
 signing {
     if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&
-            project.hasProperty('signing.secretKeyRingFile')) {
+    project.hasProperty('signing.secretKeyRingFile')) {
         sign configurations.archives
     } else {
         println "Signing information missing/incomplete for ${project.name}"
diff --git a/DaoCore/project.properties b/DaoCore/project.properties
deleted file mode 100644
index 96db7421..00000000
--- a/DaoCore/project.properties
+++ /dev/null
@@ -1,12 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system use,
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-
-android.library=true
-# Project target.
-target=android-4
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java
index aef6169a..e08741ac 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2013 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,15 +37,12 @@
 
 /**
  * Base class for all DAOs: Implements entity operations like insert, load, delete, and query.
- *
+ * <p/>
  * This class is thread-safe.
  *
+ * @param <T> Entity type
+ * @param <K> Primary key (PK) type; use Void if entity does not have exactly one PK
  * @author Markus
- *
- * @param <T>
- *            Entity type
- * @param <K>
- *            Primary key (PK) type; use Void if entity does not have exactly one PK
  */
 /*
  * When operating on TX, statements, or identity scope the following locking order must be met to avoid deadlocks:
@@ -118,8 +115,7 @@ public Property getPkProperty() {
     /**
      * Loads and entity for the given PK.
      *
-     * @param key
-     *            a PK value or null
+     * @param key a PK value or null
      * @return The entity or null, if no entity matched the PK value
      */
     public T load(K key) {
@@ -134,13 +130,13 @@ public T load(K key) {
             }
         }
         String sql = statements.getSelectByKey();
-        String[] keyArray = new String[] { key.toString() };
+        String[] keyArray = new String[]{key.toString()};
         Cursor cursor = db.rawQuery(sql, keyArray);
         return loadUniqueAndCloseCursor(cursor);
     }
 
     public T loadByRowId(long rowId) {
-        String[] idArray = new String[] { Long.toString(rowId) };
+        String[] idArray = new String[]{Long.toString(rowId)};
         Cursor cursor = db.rawQuery(statements.getSelectByRowId(), idArray);
         return loadUniqueAndCloseCursor(cursor);
     }
@@ -179,6 +175,16 @@ public boolean detach(T entity) {
         }
     }
 
+    /**
+     * Detaches all entities (of type T) from the identity scope (session). Subsequent query results won't return any
+     * previously loaded objects.
+     */
+    public void detachAll() {
+        if (identityScope != null) {
+            identityScope.clear();
+        }
+    }
+
     protected List<T> loadAllAndCloseCursor(Cursor cursor) {
         try {
             return loadAllFromCursor(cursor);
@@ -190,8 +196,7 @@ public boolean detach(T entity) {
     /**
      * Inserts the given entities in the database using a transaction.
      *
-     * @param entities
-     *            The entities to insert.
+     * @param entities The entities to insert.
      */
     public void insertInTx(Iterable<T> entities) {
         insertInTx(entities, isEntityUpdateable());
@@ -200,8 +205,7 @@ public void insertInTx(Iterable<T> entities) {
     /**
      * Inserts the given entities in the database using a transaction.
      *
-     * @param entities
-     *            The entities to insert.
+     * @param entities The entities to insert.
      */
     public void insertInTx(T... entities) {
         insertInTx(Arrays.asList(entities), isEntityUpdateable());
@@ -211,10 +215,9 @@ public void insertInTx(T... entities) {
      * Inserts the given entities in the database using a transaction. The given entities will become tracked if the PK
      * is set.
      *
-     * @param entities
-     *            The entities to insert.
-     * @param setPrimaryKey
-     *            if true, the PKs of the given will be set after the insert; pass false to improve performance.
+     * @param entities      The entities to insert.
+     * @param setPrimaryKey if true, the PKs of the given will be set after the insert; pass false to improve
+     *                      performance.
      */
     public void insertInTx(Iterable<T> entities, boolean setPrimaryKey) {
         SQLiteStatement stmt = statements.getInsertStatement();
@@ -225,10 +228,9 @@ public void insertInTx(Iterable<T> entities, boolean setPrimaryKey) {
      * Inserts or replaces the given entities in the database using a transaction. The given entities will become
      * tracked if the PK is set.
      *
-     * @param entities
-     *            The entities to insert.
-     * @param setPrimaryKey
-     *            if true, the PKs of the given will be set after the insert; pass false to improve performance.
+     * @param entities      The entities to insert.
+     * @param setPrimaryKey if true, the PKs of the given will be set after the insert; pass false to improve
+     *                      performance.
      */
     public void insertOrReplaceInTx(Iterable<T> entities, boolean setPrimaryKey) {
         SQLiteStatement stmt = statements.getInsertOrReplaceStatement();
@@ -238,8 +240,7 @@ public void insertOrReplaceInTx(Iterable<T> entities, boolean setPrimaryKey) {
     /**
      * Inserts or replaces the given entities in the database using a transaction.
      *
-     * @param entities
-     *            The entities to insert.
+     * @param entities The entities to insert.
      */
     public void insertOrReplaceInTx(Iterable<T> entities) {
         insertOrReplaceInTx(entities, isEntityUpdateable());
@@ -248,8 +249,7 @@ public void insertOrReplaceInTx(Iterable<T> entities) {
     /**
      * Inserts or replaces the given entities in the database using a transaction.
      *
-     * @param entities
-     *            The entities to insert.
+     * @param entities The entities to insert.
      */
     public void insertOrReplaceInTx(T... entities) {
         insertOrReplaceInTx(Arrays.asList(entities), isEntityUpdateable());
@@ -294,8 +294,10 @@ public long insert(T entity) {
     }
 
     /**
-     * Insert an entity into the table associated with a concrete DAO <b>without</b> setting key property. Warning: This
-     * may be faster, but the entity should not be used anymore. The entity also won't be attached to identy scope.
+     * Insert an entity into the table associated with a concrete DAO <b>without</b> setting key property.
+     *
+     * Warning: This may be faster, but the entity should not be used anymore. The entity also won't be attached to
+     * identity scope.
      *
      * @return row ID of newly inserted entity
      */
@@ -369,16 +371,38 @@ protected void updateKeyAfterInsertAndAttach(T entity, long rowId, boolean lock)
     /** Reads all available rows from the given cursor and returns a list of entities. */
     protected List<T> loadAllFromCursor(Cursor cursor) {
         int count = cursor.getCount();
+        if (count == 0) {
+            return new ArrayList<T>();
+        }
         List<T> list = new ArrayList<T>(count);
+        CursorWindow window = null;
+        boolean useFastCursor = false;
+        if (cursor instanceof CrossProcessCursor) {
+            window = ((CrossProcessCursor) cursor).getWindow();
+            if (window != null) { // E.g. Robolectric has no Window at this point
+                if (window.getNumRows() == count) {
+                    cursor = new FastCursor(window);
+                    useFastCursor = true;
+                } else {
+                    DaoLog.d("Window vs. result size: " + window.getNumRows() + "/" + count);
+                }
+            }
+        }
+
         if (cursor.moveToFirst()) {
             if (identityScope != null) {
                 identityScope.lock();
                 identityScope.reserveRoom(count);
             }
+
             try {
-                do {
-                    list.add(loadCurrent(cursor, 0, false));
-                } while (cursor.moveToNext());
+                if (!useFastCursor && window != null && identityScope != null) {
+                    loadAllUnlockOnWindowBounds(cursor, window, list);
+                } else {
+                    do {
+                        list.add(loadCurrent(cursor, 0, false));
+                    } while (cursor.moveToNext());
+                }
             } finally {
                 if (identityScope != null) {
                     identityScope.unlock();
@@ -388,6 +412,42 @@ protected void updateKeyAfterInsertAndAttach(T entity, long rowId, boolean lock)
         return list;
     }
 
+    private void loadAllUnlockOnWindowBounds(Cursor cursor, CursorWindow window, List<T> list) {
+        int windowEnd = window.getStartPosition() + window.getNumRows();
+        for (int row = 0; ; row++) {
+            list.add(loadCurrent(cursor, 0, false));
+            row++;
+            if (row >= windowEnd) {
+                window = moveToNextUnlocked(cursor);
+                if (window == null) {
+                    break;
+                }
+                windowEnd = window.getStartPosition() + window.getNumRows();
+            } else {
+                if (!cursor.moveToNext()) {
+                    break;
+                }
+            }
+        }
+    }
+
+    /**
+     * Unlock identityScope during cursor.moveToNext() when it is about to fill the window (needs a db connection):
+     * We should not hold the lock while trying to acquire a db connection to avoid deadlocks.
+     */
+    private CursorWindow moveToNextUnlocked(Cursor cursor) {
+        identityScope.unlock();
+        try {
+            if (cursor.moveToNext()) {
+                return ((CrossProcessCursor) cursor).getWindow();
+            } else {
+                return null;
+            }
+        } finally {
+            identityScope.lock();
+        }
+    }
+
     /** Internal use only. Considers identity scope. */
     final protected T loadCurrent(Cursor cursor, int offset, boolean lock) {
         if (identityScopeLong != null) {
@@ -569,8 +629,7 @@ private void deleteInTxInternal(Iterable<T> entities, Iterable<K> keys) {
     /**
      * Deletes the given entities in the database using a transaction.
      *
-     * @param entities
-     *            The entities to delete.
+     * @param entities The entities to delete.
      */
     public void deleteInTx(Iterable<T> entities) {
         deleteInTxInternal(entities, null);
@@ -579,8 +638,7 @@ public void deleteInTx(Iterable<T> entities) {
     /**
      * Deletes the given entities in the database using a transaction.
      *
-     * @param entities
-     *            The entities to delete.
+     * @param entities The entities to delete.
      */
     public void deleteInTx(T... entities) {
         deleteInTxInternal(Arrays.asList(entities), null);
@@ -589,8 +647,7 @@ public void deleteInTx(T... entities) {
     /**
      * Deletes all entities with the given keys in the database using a transaction.
      *
-     * @param keys
-     *            Keys of the entities to delete.
+     * @param keys Keys of the entities to delete.
      */
     public void deleteByKeyInTx(Iterable<K> keys) {
         deleteInTxInternal(null, keys);
@@ -599,8 +656,7 @@ public void deleteByKeyInTx(Iterable<K> keys) {
     /**
      * Deletes all entities with the given keys in the database using a transaction.
      *
-     * @param keys
-     *            Keys of the entities to delete.
+     * @param keys Keys of the entities to delete.
      */
     public void deleteByKeyInTx(K... keys) {
         deleteInTxInternal(null, Arrays.asList(keys));
@@ -611,7 +667,7 @@ public void refresh(T entity) {
         assertSinglePk();
         K key = getKeyVerified(entity);
         String sql = statements.getSelectByKey();
-        String[] keyArray = new String[] { key.toString() };
+        String[] keyArray = new String[]{key.toString()};
         Cursor cursor = db.rawQuery(sql, keyArray);
         try {
             boolean available = cursor.moveToFirst();
@@ -672,11 +728,9 @@ protected void updateInsideSynchronized(T entity, SQLiteStatement stmt, boolean
     /**
      * Attaches the entity to the identity scope. Calls attachEntity(T entity).
      *
-     * @param key
-     *            Needed only for identity scope, pass null if there's none.
-     * @param entity
-     *            The entitiy to attach
-     * */
+     * @param key    Needed only for identity scope, pass null if there's none.
+     * @param entity The entitiy to attach
+     */
     protected final void attachEntity(K key, T entity, boolean lock) {
         attachEntity(entity);
         if (identityScope != null && key != null) {
@@ -692,17 +746,15 @@ protected final void attachEntity(K key, T entity, boolean lock) {
      * Sub classes with relations additionally set the DaoMaster here. Must be called before the entity is attached to
      * the identity scope.
      *
-     * @param entity
-     *            The entitiy to attach
-     * */
+     * @param entity The entitiy to attach
+     */
     protected void attachEntity(T entity) {
     }
 
     /**
      * Updates the given entities in the database using a transaction.
      *
-     * @param entities
-     *            The entities to insert.
+     * @param entities The entities to insert.
      */
     public void updateInTx(Iterable<T> entities) {
         SQLiteStatement stmt = statements.getUpdateStatement();
@@ -743,8 +795,7 @@ public void updateInTx(Iterable<T> entities) {
     /**
      * Updates the given entities in the database using a transaction.
      *
-     * @param entities
-     *            The entities to update.
+     * @param entities The entities to update.
      */
     public void updateInTx(T... entities) {
         updateInTx(Arrays.asList(entities));
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/internal/SqlUtils.java b/DaoCore/src/main/java/de/greenrobot/dao/internal/SqlUtils.java
index b9cdf407..3e328bc9 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/internal/SqlUtils.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/internal/SqlUtils.java
@@ -104,12 +104,12 @@ public static String createSqlInsert(String insertInto, String tablename, String
     }
 
     /** Creates an select for given columns with a trailing space */
-    public static String createSqlSelect(String tablename, String tableAlias, String[] columns) {
+    public static String createSqlSelect(String tablename, String tableAlias, String[] columns, boolean distinct) {
         if (tableAlias == null || tableAlias.length() < 0) {
             throw new DaoException("Table alias required");
         }
 
-        StringBuilder builder = new StringBuilder("SELECT ");
+        StringBuilder builder = new StringBuilder(distinct ? "SELECT DISTINCT " : "SELECT ");
         SqlUtils.appendColumns(builder, tableAlias, columns).append(" FROM ");
         builder.append('"').append(tablename).append('"').append(' ').append(tableAlias).append(' ');
         return builder.toString();
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java b/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java
index 3ca5029b..e9e026df 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,10 +25,10 @@
     private final String[] allColumns;
     private final String[] pkColumns;
 
-    private SQLiteStatement insertStatement;
-    private SQLiteStatement insertOrReplaceStatement;
-    private SQLiteStatement updateStatement;
-    private SQLiteStatement deleteStatement;
+    private volatile SQLiteStatement insertStatement;
+    private volatile SQLiteStatement insertOrReplaceStatement;
+    private volatile SQLiteStatement updateStatement;
+    private volatile SQLiteStatement deleteStatement;
 
     private volatile String selectAll;
     private volatile String selectByKey;
@@ -44,32 +44,48 @@ public TableStatements(SQLiteDatabase db, String tablename, String[] allColumns,
 
     public SQLiteStatement getInsertStatement() {
         if (insertStatement == null) {
-            String sql = SqlUtils.createSqlInsert("INSERT INTO ", tablename, allColumns);
-            insertStatement = db.compileStatement(sql);
+            synchronized (this) {
+                if (insertStatement == null) {
+                    String sql = SqlUtils.createSqlInsert("INSERT INTO ", tablename, allColumns);
+                    insertStatement = db.compileStatement(sql);
+                }
+            }
         }
         return insertStatement;
     }
 
     public SQLiteStatement getInsertOrReplaceStatement() {
         if (insertOrReplaceStatement == null) {
-            String sql = SqlUtils.createSqlInsert("INSERT OR REPLACE INTO ", tablename, allColumns);
-            insertOrReplaceStatement = db.compileStatement(sql);
+            synchronized (this) {
+                if (insertOrReplaceStatement == null) {
+                    String sql = SqlUtils.createSqlInsert("INSERT OR REPLACE INTO ", tablename, allColumns);
+                    insertOrReplaceStatement = db.compileStatement(sql);
+                }
+            }
         }
         return insertOrReplaceStatement;
     }
 
     public SQLiteStatement getDeleteStatement() {
         if (deleteStatement == null) {
-            String sql = SqlUtils.createSqlDelete(tablename, pkColumns);
-            deleteStatement = db.compileStatement(sql);
+            synchronized (this) {
+                if (deleteStatement == null) {
+                    String sql = SqlUtils.createSqlDelete(tablename, pkColumns);
+                    deleteStatement = db.compileStatement(sql);
+                }
+            }
         }
         return deleteStatement;
     }
 
     public SQLiteStatement getUpdateStatement() {
         if (updateStatement == null) {
-            String sql = SqlUtils.createSqlUpdate(tablename, allColumns, pkColumns);
-            updateStatement = db.compileStatement(sql);
+            synchronized (this) {
+                if (updateStatement == null) {
+                    String sql = SqlUtils.createSqlUpdate(tablename, allColumns, pkColumns);
+                    updateStatement = db.compileStatement(sql);
+                }
+            }
         }
         return updateStatement;
     }
@@ -77,7 +93,7 @@ public SQLiteStatement getUpdateStatement() {
     /** ends with an space to simplify appending to this string. */
     public String getSelectAll() {
         if (selectAll == null) {
-            selectAll = SqlUtils.createSqlSelect(tablename, "T", allColumns);
+            selectAll = SqlUtils.createSqlSelect(tablename, "T", allColumns, false);
         }
         return selectAll;
     }
@@ -85,7 +101,7 @@ public String getSelectAll() {
     /** ends with an space to simplify appending to this string. */
     public String getSelectKeys() {
         if (selectKeys == null) {
-            selectKeys = SqlUtils.createSqlSelect(tablename, "T", pkColumns);
+            selectKeys = SqlUtils.createSqlSelect(tablename, "T", pkColumns, false);
         }
         return selectKeys;
     }
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQuery.java b/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQuery.java
index 2bd21e8a..3d5c27e8 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQuery.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQuery.java
@@ -66,13 +66,14 @@ protected AbstractQuery(AbstractDao<T, ?> dao, String sql, String[] parameters)
     /**
      * Sets the parameter (0 based) using the position in which it was added during building the query.
      */
-    public void setParameter(int index, Object parameter) {
+    public AbstractQuery<T> setParameter(int index, Object parameter) {
         checkThread();
         if (parameter != null) {
             parameters[index] = parameter.toString();
         } else {
             parameters[index] = null;
         }
+        return this;
     }
 
     protected void checkThread() {
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQueryWithLimit.java b/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQueryWithLimit.java
index 08b29a29..c1816812 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQueryWithLimit.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/query/AbstractQueryWithLimit.java
@@ -41,21 +41,21 @@ protected AbstractQueryWithLimit(AbstractDao<T, ?> dao, String sql, String[] ini
      * Sets the parameter (0 based) using the position in which it was added during building the query. Note: all
      * standard WHERE parameters come first. After that come the WHERE parameters of joins (if any).
      */
-    public void setParameter(int index, Object parameter) {
+    public AbstractQueryWithLimit<T> setParameter(int index, Object parameter) {
         if (index >= 0 && (index == limitPosition || index == offsetPosition)) {
             throw new IllegalArgumentException("Illegal parameter index: " + index);
         }
-        super.setParameter(index, parameter);
+        return (AbstractQueryWithLimit<T>) super.setParameter(index, parameter);
     }
 
-    public void setParameter(int index, Date parameter) {
+    public AbstractQueryWithLimit<T> setParameter(int index, Date parameter) {
         Long converted = parameter != null ? parameter.getTime() : null;
-        setParameter(index, converted);
+        return setParameter(index, converted);
     }
 
-    public void setParameter(int index, Boolean parameter) {
+    public AbstractQueryWithLimit<T> setParameter(int index, Boolean parameter) {
         Integer converted = parameter != null ? (parameter ? 1 : 0) : null;
-        setParameter(index, converted);
+        return setParameter(index, converted);
     }
 
     /**
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java b/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java
index ab142a06..04dba3fe 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java
@@ -80,4 +80,12 @@ public WhereCondition and(WhereCondition cond1, WhereCondition cond2, WhereCondi
         return whereCollector.combineWhereConditions(" AND ", cond1, cond2, condMore);
     }
 
+    /**
+     * Usually you don't need this value; just in case you are mixing custom
+     * {@link de.greenrobot.dao.query.WhereCondition.StringCondition} into the query, this value allows to reference
+     * the joined (target) table.
+     */
+    public String getTablePrefix() {
+        return tablePrefix;
+    }
 }
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/Query.java b/DaoCore/src/main/java/de/greenrobot/dao/query/Query.java
index d9f47c87..0880fa17 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/Query.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/query/Query.java
@@ -20,6 +20,7 @@
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.DaoException;
 
+import java.util.Date;
 import java.util.List;
 
 /**
@@ -132,4 +133,18 @@ public T uniqueOrThrow() {
         return entity;
     }
 
+    @Override
+    public Query<T> setParameter(int index, Object parameter) {
+        return (Query<T>) super.setParameter(index, parameter);
+    }
+
+    @Override
+    public Query<T> setParameter(int index, Date parameter) {
+        return (Query<T>) super.setParameter(index, parameter);
+    }
+
+    @Override
+    public Query<T> setParameter(int index, Boolean parameter) {
+        return (Query<T>) super.setParameter(index, parameter);
+    }
 }
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/QueryBuilder.java b/DaoCore/src/main/java/de/greenrobot/dao/query/QueryBuilder.java
index 91333e8f..19a932b4 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/QueryBuilder.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/query/QueryBuilder.java
@@ -58,6 +58,7 @@
 
     private Integer limit;
     private Integer offset;
+    private boolean distinct;
 
     /** For internal use by greenDAO only. */
     public static <T2> QueryBuilder<T2> internalCreate(AbstractDao<T2, ?> dao) {
@@ -84,6 +85,12 @@ private void checkOrderBuilder() {
         }
     }
 
+    /** Use a SELECT DISTINCT to avoid duplicate entities returned, e.g. when doing joins. */
+    public QueryBuilder<T> distinct() {
+        distinct = true;
+        return this;
+    }
+
     /**
      * Adds the given conditions to the where clause using an logical AND. To create new conditions, use the properties
      * given in the generated dao classes.
@@ -262,7 +269,7 @@ public CursorQuery buildCursor() {
     }
 
     private StringBuilder createSelectBuilder() {
-        String select = SqlUtils.createSqlSelect(dao.getTablename(), tablePrefix, dao.getAllColumns());
+        String select = SqlUtils.createSqlSelect(dao.getTablename(), tablePrefix, dao.getAllColumns(), distinct);
         StringBuilder builder = new StringBuilder(select);
 
         appendJoinsAndWheres(builder, tablePrefix);
@@ -273,7 +280,6 @@ private StringBuilder createSelectBuilder() {
         return builder;
     }
 
-
     private int checkAddLimit(StringBuilder builder) {
         int limitPosition = -1;
         if (limit != null) {
diff --git a/DaoExample/.gitignore b/DaoExample/.gitignore
deleted file mode 100644
index c181ae51..00000000
--- a/DaoExample/.gitignore
+++ /dev/null
@@ -1,3 +0,0 @@
-/bin
-/gen
-/build
diff --git a/DaoExample/build.gradle b/DaoExample/build.gradle
index aea03174..f0c8977a 100644
--- a/DaoExample/build.gradle
+++ b/DaoExample/build.gradle
@@ -4,7 +4,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
+        classpath 'com.android.tools.build:gradle:1.5.0'
     }
 }
 
diff --git a/DaoExampleGenerator/.gitignore b/DaoExampleGenerator/.gitignore
deleted file mode 100644
index 81631c69..00000000
--- a/DaoExampleGenerator/.gitignore
+++ /dev/null
@@ -1,2 +0,0 @@
-/bin
-/build
diff --git a/DaoExampleGenerator/build.gradle b/DaoExampleGenerator/build.gradle
index 48c83710..f1e22828 100644
--- a/DaoExampleGenerator/build.gradle
+++ b/DaoExampleGenerator/build.gradle
@@ -2,7 +2,7 @@ apply plugin: 'java'
 apply plugin: 'maven'
 apply plugin:'application'
 
-group = 'de.greenrobot'
+group = 'org.greenrobot'
 archivesBaseName = 'greendao-example-generator'
 version = '1.4.0-SNAPSHOT'
 sourceCompatibility = 1.6
diff --git a/DaoGenerator/.gitignore b/DaoGenerator/.gitignore
index 90ffd1f9..6a0dc5ea 100644
--- a/DaoGenerator/.gitignore
+++ b/DaoGenerator/.gitignore
@@ -1,5 +1 @@
-/test-out
-/release
-/bin
 /gradle.properties
-/build
diff --git a/DaoGenerator/build.gradle b/DaoGenerator/build.gradle
index e6aa2668..a1e979a4 100644
--- a/DaoGenerator/build.gradle
+++ b/DaoGenerator/build.gradle
@@ -2,10 +2,10 @@ apply plugin: 'java'
 apply plugin: 'maven'
 apply plugin: 'signing'
 
-group = 'de.greenrobot'
+group = 'org.greenrobot'
 archivesBaseName = 'greendao-generator'
-version = '2.0.0'
-sourceCompatibility = 1.6
+version = '2.2.0-SNAPSHOT'
+sourceCompatibility = 1.7
 
 def isSnapshot = version.endsWith('-SNAPSHOT')
 def sonatypeRepositoryUrl
@@ -19,15 +19,12 @@ repositories {
     mavenCentral()
 }
 
-// provided is not supported in Gradle 1.4, see http://issues.gradle.org/browse/GRADLE-784
-// Like this, it won't appear at all in the POM
 configurations {
-    provided
     deployerJars
 }
 
 dependencies {
-    compile 'org.freemarker:freemarker:2.3.22'
+    compile 'org.freemarker:freemarker:2.3.23'
     testCompile 'junit:junit:4.12'
     // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4'
     deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
@@ -63,7 +60,7 @@ javadoc {
     title = "greenDAO Generator ${version} API"
     // Unfinished APIs:
     excludes = ['de/greenrobot/daogenerator/Query*']
-    options.bottom = 'Available under the GPLv3 - <i>Copyright &#169; 2011-2013 <a href="http://greenrobot.de/">greenrobot.de</a>. All Rights Reserved.</i>'
+    options.bottom = 'Available under the GPLv3 - <i>Copyright &#169; 2011-2016 <a href="http://greenrobot.org/">greenrobot.org</a>. All Rights Reserved.</i>'
 }
 
 task javadocJar(type: Jar, dependsOn: javadoc) {
@@ -84,7 +81,7 @@ artifacts {
 
 signing {
     if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&
-            project.hasProperty('signing.secretKeyRingFile')) {
+    project.hasProperty('signing.secretKeyRingFile')) {
         sign configurations.archives
     } else {
         println "Signing information missing/incomplete for ${project.name}"
diff --git a/DaoGenerator/mybuild.xml b/DaoGenerator/mybuild.xml
deleted file mode 100644
index 72ae38f0..00000000
--- a/DaoGenerator/mybuild.xml
+++ /dev/null
@@ -1,80 +0,0 @@
-<!--
-
-Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)     
-                                                                           
-This file is part of greenDAO Generator.                                   
-                                                                           
-greenDAO Generator is free software: you can redistribute it and/or modify 
-it under the terms of the GNU General Public License as published by       
-the Free Software Foundation, either version 3 of the License, or          
-(at your option) any later version.                                        
-greenDAO Generator is distributed in the hope that it will be useful,      
-but WITHOUT ANY WARRANTY; without even the implied warranty of             
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              
-GNU General Public License for more details.                               
-                                                                           
-You should have received a copy of the GNU General Public License          
-along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
-
--->
-<project name="DaoGenerator" default="build-generator">
-
-    <property name="version" value="1.3.0-SNAPSHOT" />
-	
-	<target name="build-generator" depends="delete-release, build-jar, build-javadoc"></target>
-	
-	<target name="delete-release">
-		<delete dir="release" />
-	</target>
-	
-	<target name="build-jar" description="Depends on Eclipse to have everthing compiled into bin/">
-		<mkdir dir="release" />
-		<jar jarfile="release/greenDAO-generator-${version}.jar" basedir="bin"/>
-	</target>
-
-	<target name="build-javadoc" description="Creates javadoc for classes">
-	    <delete dir="release/docs/api" />
-		<mkdir dir="release/docs/api" />
-		<javadoc destdir="release/docs/api" author="false" version="false" use="true" windowtitle="greenDAO generator API">
-		    <packageset dir="src" defaultexcludes="yes">
-	              <include name="de/greenrobot/daogenerator/**"/>
-		    </packageset>
-			<doctitle><![CDATA[<h1>greenDAO generator API</h1>]]></doctitle>
-		    <bottom><![CDATA[<i>Copyright &#169; 2011-2013 greenrobot.de. All Rights Reserved.</i>]]></bottom>
-		</javadoc>
-        <jar jarfile="release/greenDAO-generator-${version}-javadoc.jar" basedir="release/docs/api"/>
-	</target>
-
-    <target name="refresh-example-jars" description="(Also builds DaoCore and DaoGenerator)">
-        <ant antfile="../DaoCore/mybuild.xml" dir="../DaoCore/"/>
-        <antcall target="build-generator"></antcall>
-        <copy file="../DaoCore/release/greenDAO-${version}.jar" todir="../DaoExample/libs" ></copy>
-        <copy file="../DaoCore/release/greenDAO-${version}-javadoc.jar" todir="../DaoExample/docs" ></copy>
-        <copy file="release/greenDAO-generator-${version}.jar" todir="../DaoExampleGenerator/lib" ></copy>
-        <copy file="release/greenDAO-generator-${version}-javadoc.jar" todir="../DaoExampleGenerator/lib" ></copy>
-    </target>
-	
-	<target name="build-starter-package" description="Builds everything">
-    	<delete dir="release/example"/>
-        <antcall target="refresh-example-jars" />
-
-        <copy todir="release/example/javadoc/greendao" >
-            <fileset dir="../DaoCore/release/docs/api/"/>
-        </copy>
-        <copy todir="release/example/javadoc/greendao-generator" >
-            <fileset dir="release/docs/api/"/>
-        </copy>
-        <copy todir="release/example/DaoExample" >
-            <fileset dir="../DaoExample"/>
-        </copy>
-        <copy todir="release/example/DaoExampleGenerator" >
-            <fileset dir="../DaoExampleGenerator"/>
-        </copy>
-        <copy file="../DaoCore/release/greenDAO-${version}.jar" todir="release/example/" ></copy>
-        <copy file="../DaoCore/release/greenDAO-${version}-javadoc.jar" todir="release/example/" ></copy>
-        <copy file="release/greenDAO-generator-${version}.jar" todir="release/example/" ></copy>
-        <copy file="release/greenDAO-generator-${version}-javadoc.jar" todir="release/example/" ></copy>
-    	<zip destfile="release/greenDAO-${version}.zip" basedir="release/example/"></zip>
-    </target>
-
-</project>
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index e4e64e8f..0e383d84 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -44,9 +44,17 @@ import ${additionalImport};
 <#else>
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 </#if>
+<#if entity.javaDoc ??>
+
+${entity.javaDoc}
+<#else>
 /**
  * Entity mapped to table "${entity.tableName}".
  */
+</#if>
+<#if entity.codeBeforeClass ??>
+${entity.codeBeforeClass}
+</#if>
 public class ${entity.className}<#if
 entity.superclass?has_content> extends ${entity.superclass} </#if><#if
 entity.interfacesToImplement?has_content> implements <#list entity.interfacesToImplement
@@ -56,6 +64,9 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value. */
 </#if>
+<#if property.javaDocField ??>
+${property.javaDocField}
+</#if>
 <#if property.codeBeforeField ??>
      ${property.codeBeforeField}
 </#if>
@@ -121,6 +132,9 @@ property>${property.javaTypeInEntity} ${property.propertyName}<#if property_has_
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value. */
 </#if>
+<#if property.javaDocGetter ??>
+${property.javaDocGetter}
+</#if>
 <#if property.codeBeforeGetter ??>
     ${property.codeBeforeGetter}
 </#if>
@@ -131,6 +145,9 @@ property>${property.javaTypeInEntity} ${property.propertyName}<#if property_has_
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value; ensure this value is available before it is saved to the database. */
 </#if>
+<#if property.javaDocSetter ??>
+${property.javaDocSetter}
+</#if>
 <#if property.codeBeforeSetter ??>
     ${property.codeBeforeSetter}
 </#if>
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index 0828ca40..4e432f70 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * This file is part of greenDAO Generator.
  * 
@@ -28,7 +28,6 @@
 import java.util.regex.Pattern;
 
 import freemarker.template.Configuration;
-import freemarker.template.DefaultObjectWrapper;
 import freemarker.template.Template;
 
 /**
@@ -51,16 +50,15 @@
 
     public DaoGenerator() throws IOException {
         System.out.println("greenDAO Generator");
-        System.out.println("Copyright 2011-2015 Markus Junginger, greenrobot.de. Licensed under GPL V3.");
+        System.out.println("Copyright 2011-2016 Markus Junginger, greenrobot.de. Licensed under GPL V3.");
         System.out.println("This program comes with ABSOLUTELY NO WARRANTY");
 
         patternKeepIncludes = compilePattern("INCLUDES");
         patternKeepFields = compilePattern("FIELDS");
         patternKeepMethods = compilePattern("METHODS");
 
-        Configuration config = new Configuration();
+        Configuration config = new Configuration(Configuration.VERSION_2_3_23);
         config.setClassForTemplateLoading(this.getClass(), "/");
-        config.setObjectWrapper(new DefaultObjectWrapper());
 
         templateDao = config.getTemplate("dao.ftl");
         templateDaoMaster = config.getTemplate("dao-master.ftl");
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoUtil.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoUtil.java
index feb76469..a8a2e965 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoUtil.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoUtil.java
@@ -104,5 +104,11 @@ public static int copyAllBytes(InputStream in, OutputStream out) throws IOExcept
         return byteCount;
     }
 
-
+    public static String checkConvertToJavaDoc(String javaDoc, String indent) {
+        if (javaDoc != null && !javaDoc.trim().startsWith("/**")) {
+            javaDoc = javaDoc.replace("\n", "\n" + indent + " * ");
+            javaDoc = indent + "/**\n" + indent + " * " + javaDoc + "\n" + indent + " */";
+        }
+        return javaDoc;
+    }
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index f767cb72..da865a42 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -17,8 +17,6 @@
  */
 package de.greenrobot.daogenerator;
 
-import de.greenrobot.daogenerator.Property.PropertyBuilder;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashSet;
@@ -26,6 +24,8 @@
 import java.util.Set;
 import java.util.TreeSet;
 
+import de.greenrobot.daogenerator.Property.PropertyBuilder;
+
 /**
  * Model class for an entity: a Java data object mapped to a data base table. A new entity is added to a {@link Schema}
  * by the method {@link Schema#addEntity(String)} (there is no public constructor for {@link Entity} itself). <br/>
@@ -64,6 +64,8 @@
     private Property pkProperty;
     private String pkType;
     private String superclass;
+    private String javaDoc;
+    private String codeBeforeClass;
 
     private boolean protobuf;
     private boolean constructors;
@@ -463,6 +465,22 @@ public void setSuperclass(String classToExtend) {
         this.superclass = classToExtend;
     }
 
+    public String getJavaDoc() {
+        return javaDoc;
+    }
+
+    public void setJavaDoc(String javaDoc) {
+        this.javaDoc = DaoUtil.checkConvertToJavaDoc(javaDoc, "");
+    }
+
+    public String getCodeBeforeClass() {
+        return codeBeforeClass;
+    }
+
+    public void setCodeBeforeClass(String codeBeforeClass) {
+        this.codeBeforeClass = codeBeforeClass;
+    }
+
     void init2ndPass() {
         init2ndPassNamesWithDefaults();
 
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index 2c87c598..14534df5 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -131,6 +131,32 @@ public PropertyBuilder codeBeforeGetterAndSetter(String code) {
             return this;
         }
 
+        public PropertyBuilder javaDocField(String javaDoc) {
+            property.javaDocField = checkConvertToJavaDoc(javaDoc);
+            return this;
+        }
+
+        private String checkConvertToJavaDoc(String javaDoc) {
+            return DaoUtil.checkConvertToJavaDoc(javaDoc, "    ");
+        }
+
+        public PropertyBuilder javaDocGetter(String javaDoc) {
+            property.javaDocGetter = checkConvertToJavaDoc(javaDoc);
+            return this;
+        }
+
+        public PropertyBuilder javaDocSetter(String javaDoc) {
+            property.javaDocSetter = checkConvertToJavaDoc(javaDoc);
+            return this;
+        }
+
+        public PropertyBuilder javaDocGetterAndSetter(String javaDoc) {
+            javaDoc = checkConvertToJavaDoc(javaDoc);
+            property.javaDocGetter = javaDoc;
+            property.javaDocSetter = javaDoc;
+            return this;
+        }
+
         public Property getProperty() {
             return property;
         }
@@ -153,6 +179,10 @@ public Property getProperty() {
     private String codeBeforeGetter;
     private String codeBeforeSetter;
 
+    private String javaDocField;
+    private String javaDocGetter;
+    private String javaDocSetter;
+
     private boolean primaryKey;
     private boolean pkAsc;
     private boolean pkDesc;
@@ -263,6 +293,18 @@ public String getCodeBeforeSetter() {
         return codeBeforeSetter;
     }
 
+    public String getJavaDocField() {
+        return javaDocField;
+    }
+
+    public String getJavaDocGetter() {
+        return javaDocGetter;
+    }
+
+    public String getJavaDocSetter() {
+        return javaDocSetter;
+    }
+
     public String getDatabaseValueExpression() {
         return getDatabaseValueExpression(propertyName);
     }
@@ -284,9 +326,9 @@ public String getDatabaseValueExpression(String entityValue) {
         if (customType != null) {
             builder.append(')');
         }
-        if(propertyType == PropertyType.Boolean) {
+        if (propertyType == PropertyType.Boolean) {
             builder.append(" ? 1L: 0L");
-        } else if(propertyType == PropertyType.Date) {
+        } else if (propertyType == PropertyType.Date) {
             builder.append(".getTime()");
         }
         return builder.toString();
@@ -303,16 +345,15 @@ public String getEntityValueExpression(String databaseValue) {
         if (customType != null) {
             builder.append(propertyName).append("Converter.convertToEntityProperty(");
         }
-        if(propertyType == PropertyType.Byte) {
+        if (propertyType == PropertyType.Byte) {
             builder.append("(byte) ");
-        }else
-        if(propertyType == PropertyType.Date) {
+        } else if (propertyType == PropertyType.Date) {
             builder.append("new java.util.Date(");
         }
         builder.append(databaseValue);
-        if(propertyType == PropertyType.Boolean) {
+        if (propertyType == PropertyType.Boolean) {
             builder.append(" != 0");
-        } else if(propertyType == PropertyType.Date) {
+        } else if (propertyType == PropertyType.Date) {
             builder.append(")");
         }
         if (customType != null) {
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/ToManyWithJoinEntity.java b/DaoGenerator/src/de/greenrobot/daogenerator/ToManyWithJoinEntity.java
index 75221566..0f897f05 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/ToManyWithJoinEntity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/ToManyWithJoinEntity.java
@@ -45,8 +45,8 @@ public Property getTargetProperty() {
         return targetProperty;
     }
 
-    void init2ndPass() {
-        super.init2ndPass();
+    void init3rdPass() {
+        super.init3rdPass();
         List<Property> pks = sourceEntity.getPropertiesPk();
         if (pks.isEmpty()) {
             throw new RuntimeException("Source entity has no primary key, but we need it for " + this);
@@ -57,8 +57,4 @@ void init2ndPass() {
         }
     }
 
-    void init3rdPass() {
-        super.init3rdPass();
-    }
-
 }
diff --git a/DaoTest/.gitignore b/DaoTest/.gitignore
deleted file mode 100644
index 31ec0aee..00000000
--- a/DaoTest/.gitignore
+++ /dev/null
@@ -1,3 +0,0 @@
-/gen
-/DaoCore_src
-/bin
diff --git a/DaoTest/build.gradle b/DaoTest/build.gradle
index ad5d79f1..aeefcbff 100644
--- a/DaoTest/build.gradle
+++ b/DaoTest/build.gradle
@@ -4,7 +4,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
+        classpath 'com.android.tools.build:gradle:1.5.0'
     }
 }
 
@@ -19,14 +19,15 @@ android {
 
 dependencies {
     //sqlcipher dependencies
-    androidTestCompile 'commons-codec:commons-codec:1.5'
-    androidTestCompile group: 'com.google.guava', name: 'guava', version: '12.0'
-    androidTestCompile files('libs/sqlcipher.jar')
-
-    androidTestCompile project(':DaoCore')
-    androidTestCompile project(':PerformanceTests:Common')
-
-    testCompile project(':DaoCore')
+//    androidTestCompile 'commons-codec:commons-codec:1.5'
+//    androidTestCompile group: 'com.google.guava', name: 'guava', version: '12.0'
+//    androidTestCompile files('libs/sqlcipher.jar')
+//
+//    androidTestCompile project(':DaoCore')
+//    androidTestCompile project(':PerformanceTests:Common')
+//
+//    testCompile project(':DaoCore')
+    compile project(':DaoTestBase')
     testCompile 'org.robolectric:robolectric:3.0'
 }
 
@@ -34,23 +35,6 @@ android {
     buildToolsVersion rootProject.ext.buildToolsVersion
     compileSdkVersion rootProject.ext.compileSdkVersion
 
-    sourceSets {
-        main {
-            manifest.srcFile 'AndroidManifest.xml'
-            // Workaround: assets.srcDirs in androidTest doesn't seem to work currently
-            assets.srcDirs = ['assets']
-        }
-
-        androidTest {
-            assets.srcDirs = ['assets']
-            java.srcDirs = java.srcDirs + ['src','src-gen']
-        }
-
-        unitTest {
-            java.srcDirs = ['src-unit-test']
-        }
-    }
-
     defaultConfig {
         testApplicationId "de.greenrobot.daotest"
         testInstrumentationRunner "android.test.InstrumentationTestRunner"
diff --git a/DaoTest/res/values/dummy.xml b/DaoTest/res/values/dummy.xml
deleted file mode 100644
index 4c670337..00000000
--- a/DaoTest/res/values/dummy.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    
-</resources>
diff --git a/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/DaoSessionConcurrentTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/DaoSessionConcurrentTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentWALTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/DaoSessionConcurrentWALTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentWALTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/DaoSessionConcurrentWALTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/DaoSessionTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/DaoSessionTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/DaoSessionTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/DaoSessionTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/DbTestTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/DbTestTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/DbTestTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/DbTestTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/DbUtilsTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/DbUtilsTest.java
diff --git a/DaoTest/src/androidTest/java/de/greenrobot/daotest/DeadlockPreventionTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/DeadlockPreventionTest.java
new file mode 100644
index 00000000..ae015fb2
--- /dev/null
+++ b/DaoTest/src/androidTest/java/de/greenrobot/daotest/DeadlockPreventionTest.java
@@ -0,0 +1,153 @@
+/*
+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * This file is part of greenDAO Generator.
+ * 
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package de.greenrobot.daotest;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import de.greenrobot.dao.test.AbstractDaoSessionTest;
+
+/**
+ * Test to reproduce https://github.com/greenrobot/greenDAO/issues/223 (works at least on a Android 2.3 emulator).
+ */
+public class DeadlockPreventionTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
+
+    CountDownLatch done = new CountDownLatch(1);
+    private TestEntityDao dao;
+
+    public DeadlockPreventionTest() {
+        super(DaoMaster.class);
+    }
+
+    // Runs pretty long, only run manually
+    public void _testLoadAll() throws InterruptedException {
+        dao = daoSession.getTestEntityDao();
+        List<TestEntity> entities = new ArrayList<>();
+        for (int i = 0; i < 10000; i++) {
+            TestEntity entity = new TestEntity();
+            entity.setSimpleStringNotNull("Text" + i);
+            entities.add(entity);
+        }
+        dao.insertInTx(entities);
+        System.out.println("Entities inserted");
+
+        LoadThread loadThread = new LoadThread();
+        InsertThread insertThread = new InsertThread();
+        InsertBatchThread insertBatchThread = new InsertBatchThread();
+        loadThread.start();
+        insertThread.start();
+        insertBatchThread.start();
+
+        int lastCounterInsert = insertThread.counter;
+        int lastCounterInsertBatch = insertBatchThread.counter;
+        int noProgressCount = 0;
+        while (!done.await(10, TimeUnit.SECONDS)) {
+            if (lastCounterInsert == insertThread.counter && lastCounterInsertBatch == insertBatchThread.counter) {
+                noProgressCount++;
+                System.err.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
+                System.err.println("No progress #" + noProgressCount + ", dumping threads");
+                System.err.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
+                dumpStacktrace("LOAD", loadThread);
+                dumpStacktrace("INSERT", insertThread);
+                dumpStacktrace("INSERT BATCH", insertBatchThread);
+
+                if (noProgressCount >= 3) {
+                    // Test seems to be stuck, kill everything!
+                    System.exit(1);
+                }
+            } else {
+                lastCounterInsert = insertThread.counter;
+                lastCounterInsertBatch = insertBatchThread.counter;
+                noProgressCount = 0;
+            }
+        }
+
+        loadThread.join();
+        insertThread.join();
+        insertBatchThread.join();
+    }
+
+    private void dumpStacktrace(String name, Thread thread) {
+        System.err.println("--- Thread dump of " + name + " ------------------------");
+        for (StackTraceElement element : thread.getStackTrace()) {
+            System.err.println(element);
+        }
+    }
+
+    private class LoadThread extends Thread {
+        @Override
+        public void run() {
+            for (int i = 0; i < 10; i++) {
+                System.out.println("Starting loadAll #" + i);
+                dao.loadAll();
+            }
+            done.countDown();
+        }
+    }
+
+
+    private class InsertThread extends Thread {
+        volatile int counter = 0;
+
+        @Override
+        public void run() {
+            List<TestEntity> toDelete = new ArrayList<>();
+            while (done.getCount() > 0) {
+                TestEntity entity = new TestEntity();
+                entity.setSimpleStringNotNull("TextThread" + counter);
+                dao.insert(entity);
+                toDelete.add(entity);
+                counter++;
+                if (counter % 10 == 0) {
+                    System.out.println("Thread inserted " + counter+ ", now deleting");
+                    dao.deleteInTx(toDelete);
+                    toDelete.clear();
+                }
+            }
+        }
+    }
+
+    private class InsertBatchThread extends Thread {
+        volatile int counter = 0;
+
+        @Override
+        public void run() {
+            List<TestEntity> batch = new ArrayList<>();
+            List<TestEntity> toDelete = new ArrayList<>();
+            while (done.getCount() > 0) {
+                TestEntity entity = new TestEntity();
+                entity.setSimpleStringNotNull("TextThreadBatch" + counter);
+                batch.add(entity);
+                counter++;
+                if (counter % 10 == 0) {
+                    dao.insertInTx(batch);
+                    System.out.println("Batch Thread inserted " + counter);
+                    toDelete.addAll(batch);
+                    batch.clear();
+                }
+                if (counter % 1000 == 0) {
+                    dao.deleteInTx(toDelete);
+                    toDelete.clear();
+                    System.out.println("Batch Thread deleted " + counter);
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/DaoTest/src/de/greenrobot/daotest/IndexTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/IndexTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/IndexTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/IndexTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/LongHashMapTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/LongHashMapTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/LongHashMapTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/LongHashMapTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/async/AbstractAsyncTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/async/AbstractAsyncTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/async/AbstractAsyncTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/async/AbstractAsyncTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/async/BasicAsyncTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/async/BasicAsyncTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/async/BasicAsyncTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/async/BasicAsyncTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/async/MergeTxAsyncTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/async/MergeTxAsyncTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/async/MergeTxAsyncTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/async/MergeTxAsyncTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/contentprovider/SimpleEntityContentProviderTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/contentprovider/SimpleEntityContentProviderTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/contentprovider/SimpleEntityContentProviderTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/contentprovider/SimpleEntityContentProviderTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/AbcdefEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/AbcdefEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/AbcdefEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/AbcdefEntityTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityMultithreadingTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/AnActiveEntityMultithreadingTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityMultithreadingTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/AnActiveEntityMultithreadingTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/AnActiveEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/AnActiveEntityTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/AutoincrementEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/AutoincrementEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/AutoincrementEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/AutoincrementEntityTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/CustomTypeEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/CustomTypeEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/CustomTypeEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/CustomTypeEntityTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/DateEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/DateEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/DateEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/DateEntityTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/ExtendsImplementsEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/ExtendsImplementsEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/ExtendsImplementsEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/ExtendsImplementsEntityTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/IndexedStringEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/IndexedStringEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/IndexedStringEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/IndexedStringEntityTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/JoinManyToDateEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/JoinManyToDateEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/JoinManyToDateEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/JoinManyToDateEntityTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/RelationEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/RelationEntityTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTestIdentityScope.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/RelationEntityTestIdentityScope.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTestIdentityScope.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/RelationEntityTestIdentityScope.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityNotNullTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/SimpleEntityNotNullTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityNotNullTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/SimpleEntityNotNullTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/SimpleEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/SimpleEntityTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SpecialNamesEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/SpecialNamesEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/SpecialNamesEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/SpecialNamesEntityTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SqliteMasterTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/SqliteMasterTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/SqliteMasterTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/SqliteMasterTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityIdentityScopeTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/StringKeyValueEntityIdentityScopeTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityIdentityScopeTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/StringKeyValueEntityIdentityScopeTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/StringKeyValueEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/StringKeyValueEntityTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java
similarity index 86%
rename from DaoTest/src/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java
index 755156cb..10de895c 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java
+++ b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java
@@ -50,6 +50,17 @@ public void testDetach() {
         assertNotSame(entity, entity3);
     }
 
+    public void testDetachAll() {
+        TestEntity entity1 = createEntity(null);
+        TestEntity entity2 = createEntity(null);
+        dao.insertInTx(entity1, entity2);
+        dao.detachAll();
+        TestEntity entity1a = dao.load(entity1.getId());
+        TestEntity entity2a = dao.load(entity2.getId());
+        assertNotSame(entity1, entity1a);
+        assertNotSame(entity2, entity2a);
+    }
+
     public void testDetachOther() {
         TestEntity entity = createEntity(null);
         dao.insert(entity);
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/TestEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/TestEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/TestEntityTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityTestBase.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/TestEntityTestBase.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/TestEntityTestBase.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/TestEntityTestBase.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/ToManyEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/ToManyEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/ToManyEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/ToManyEntityTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/ToManyTargetEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/ToManyTargetEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/ToManyTargetEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/ToManyTargetEntityTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/TreeEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/TreeEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/TreeEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/entity/TreeEntityTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/query/CountQueryTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/CountQueryTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/query/CountQueryTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/query/CountQueryTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/query/CountQueryThreadLocalTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/CountQueryThreadLocalTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/query/CountQueryThreadLocalTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/query/CountQueryThreadLocalTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/query/CursorQueryTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/CursorQueryTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/query/CursorQueryTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/query/CursorQueryTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/DeleteQueryTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/query/DeleteQueryTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/query/DeleteQueryTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryThreadLocalTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/DeleteQueryThreadLocalTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/query/DeleteQueryThreadLocalTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/query/DeleteQueryThreadLocalTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/query/JoinTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/JoinTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/query/JoinTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/query/JoinTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/query/LazyListTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/LazyListTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/query/LazyListTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/query/LazyListTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderAndOrTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/QueryBuilderAndOrTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/query/QueryBuilderAndOrTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/query/QueryBuilderAndOrTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderOrderTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/QueryBuilderOrderTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/query/QueryBuilderOrderTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/query/QueryBuilderOrderTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java
similarity index 96%
rename from DaoTest/src/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java
index a8dbcc4b..221a80bd 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java
+++ b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java
@@ -250,4 +250,14 @@ public void testLike() {
         assertNull(entity2);
     }
 
+    public void testDistinct() {
+        TestEntity entity = insert(3).get(1);
+
+        Query<TestEntity> query = dao.queryBuilder().distinct()
+                .where(Properties.SimpleString.eq(entity.getSimpleString())).build();
+        TestEntity entity2 = query.uniqueOrThrow();
+        assertEquals(entity.getId(), entity2.getId());
+        // TODO improve test to check functionality
+    }
+
 }
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryForThreadTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/QueryForThreadTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/query/QueryForThreadTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/query/QueryForThreadTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryLimitOffsetTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/QueryLimitOffsetTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/query/QueryLimitOffsetTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/query/QueryLimitOffsetTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QuerySpecialNamesTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/QuerySpecialNamesTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/query/QuerySpecialNamesTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/query/QuerySpecialNamesTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/query/RawQueryTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest/query/RawQueryTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/query/RawQueryTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest/query/RawQueryTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest2/entity/KeepEntityTest.java b/DaoTest/src/androidTest/java/de/greenrobot/daotest2/entity/KeepEntityTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest2/entity/KeepEntityTest.java
rename to DaoTest/src/androidTest/java/de/greenrobot/daotest2/entity/KeepEntityTest.java
diff --git a/DaoTest/AndroidManifest.xml b/DaoTest/src/main/AndroidManifest.xml
similarity index 100%
rename from DaoTest/AndroidManifest.xml
rename to DaoTest/src/main/AndroidManifest.xml
diff --git a/DaoTest/assets/minimal-entity.sql b/DaoTest/src/main/assets/minimal-entity.sql
similarity index 100%
rename from DaoTest/assets/minimal-entity.sql
rename to DaoTest/src/main/assets/minimal-entity.sql
diff --git a/DaoTest/src-unit-test/de/greenrobot/dao/unittest/DaoMaster.java b/DaoTest/src/test/java/de/greenrobot/dao/unittest/DaoMaster.java
similarity index 100%
rename from DaoTest/src-unit-test/de/greenrobot/dao/unittest/DaoMaster.java
rename to DaoTest/src/test/java/de/greenrobot/dao/unittest/DaoMaster.java
diff --git a/DaoTest/src-unit-test/de/greenrobot/dao/unittest/DaoSession.java b/DaoTest/src/test/java/de/greenrobot/dao/unittest/DaoSession.java
similarity index 100%
rename from DaoTest/src-unit-test/de/greenrobot/dao/unittest/DaoSession.java
rename to DaoTest/src/test/java/de/greenrobot/dao/unittest/DaoSession.java
diff --git a/DaoTest/src-unit-test/de/greenrobot/dao/unittest/MinimalEntity.java b/DaoTest/src/test/java/de/greenrobot/dao/unittest/MinimalEntity.java
similarity index 100%
rename from DaoTest/src-unit-test/de/greenrobot/dao/unittest/MinimalEntity.java
rename to DaoTest/src/test/java/de/greenrobot/dao/unittest/MinimalEntity.java
diff --git a/DaoTest/src-unit-test/de/greenrobot/dao/unittest/MinimalEntityDao.java b/DaoTest/src/test/java/de/greenrobot/dao/unittest/MinimalEntityDao.java
similarity index 100%
rename from DaoTest/src-unit-test/de/greenrobot/dao/unittest/MinimalEntityDao.java
rename to DaoTest/src/test/java/de/greenrobot/dao/unittest/MinimalEntityDao.java
diff --git a/DaoTest/src-unit-test/de/greenrobot/dao/unittest/MinimalEntityTest.java b/DaoTest/src/test/java/de/greenrobot/dao/unittest/MinimalEntityTest.java
similarity index 100%
rename from DaoTest/src-unit-test/de/greenrobot/dao/unittest/MinimalEntityTest.java
rename to DaoTest/src/test/java/de/greenrobot/dao/unittest/MinimalEntityTest.java
diff --git a/DaoTestBase/build.gradle b/DaoTestBase/build.gradle
new file mode 100644
index 00000000..162abe30
--- /dev/null
+++ b/DaoTestBase/build.gradle
@@ -0,0 +1,9 @@
+apply plugin: 'java'
+
+sourceCompatibility = 1.7
+targetCompatibility = 1.7
+
+dependencies {
+    compile project(':DaoCore')
+    compileOnly 'com.google.android:android:4.1.1.4'
+}
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/AbcdefEntity.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/AbcdefEntity.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/AbcdefEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/AbcdefEntityDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/AnActiveEntity.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/AnActiveEntity.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/AnActiveEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/AnActiveEntityDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/AutoincrementEntity.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/AutoincrementEntity.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/AutoincrementEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/AutoincrementEntityDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/CustomTypeEntity.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/CustomTypeEntity.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/CustomTypeEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/CustomTypeEntityDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/DaoMaster.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/DaoMaster.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/DaoSession.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/DaoSession.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DateEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/DateEntity.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/DateEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/DateEntity.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/DateEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/DateEntityDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/ExtendsImplementsEntity.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/ExtendsImplementsEntity.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/IndexedStringEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/IndexedStringEntity.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/IndexedStringEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/IndexedStringEntity.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/IndexedStringEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/IndexedStringEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/IndexedStringEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/IndexedStringEntityDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/JoinManyToDateEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/JoinManyToDateEntity.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/JoinManyToDateEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/JoinManyToDateEntity.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/JoinManyToDateEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/JoinManyToDateEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/JoinManyToDateEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/JoinManyToDateEntityDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/RelationEntity.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/RelationEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/RelationEntity.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/RelationEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/RelationEntityDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/SimpleEntity.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/SimpleEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/SimpleEntity.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityContentProvider.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/SimpleEntityContentProvider.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityContentProvider.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/SimpleEntityContentProvider.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/SimpleEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/SimpleEntityDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNull.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/SimpleEntityNotNull.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNull.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/SimpleEntityNotNull.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/SimpleEntityNotNullDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/SimpleEntityNotNullDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/SpecialNamesEntity.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/SpecialNamesEntity.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/SpecialNamesEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/SpecialNamesEntityDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SqliteMaster.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/SqliteMaster.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/SqliteMaster.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/SqliteMaster.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/SqliteMasterDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/SqliteMasterDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/StringKeyValueEntity.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/StringKeyValueEntity.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/StringKeyValueEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/StringKeyValueEntityDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TestEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/TestEntity.java
similarity index 88%
rename from DaoTest/src-gen/de/greenrobot/daotest/TestEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/TestEntity.java
index 748cee08..15863049 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TestEntity.java
+++ b/DaoTestBase/src/main/java/de/greenrobot/daotest/TestEntity.java
@@ -1,11 +1,17 @@
 package de.greenrobot.daotest;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+
 /**
- * Entity mapped to table "TEST_ENTITY".
+ * This entity is used by internal tests of greenDAO.
+ * (This JavaDoc is defined in the generator project.)
  */
+// This is another test comment, you could also apply annotations like this
 public class TestEntity {
 
+    /**
+     * JavaDoc test field
+     */
     private Long id;
     private int simpleInt;
     private Integer simpleInteger;
@@ -46,6 +52,9 @@ public void setId(Long id) {
         this.id = id;
     }
 
+    /**
+     * JavaDoc test getter
+     */
     public int getSimpleInt() {
         return simpleInt;
     }
@@ -58,16 +67,25 @@ public Integer getSimpleInteger() {
         return simpleInteger;
     }
 
+    /**
+     * JavaDoc test setter
+     */
     public void setSimpleInteger(Integer simpleInteger) {
         this.simpleInteger = simpleInteger;
     }
 
     /** Not-null value. */
+    /**
+     * JavaDoc test getter and setter
+     */
     public String getSimpleStringNotNull() {
         return simpleStringNotNull;
     }
 
     /** Not-null value; ensure this value is available before it is saved to the database. */
+    /**
+     * JavaDoc test getter and setter
+     */
     public void setSimpleStringNotNull(String simpleStringNotNull) {
         this.simpleStringNotNull = simpleStringNotNull;
     }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/TestEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/TestEntityDao.java
diff --git a/DaoTest/src/de/greenrobot/daotest/TestInterface.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/TestInterface.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/TestInterface.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/TestInterface.java
diff --git a/DaoTest/src/de/greenrobot/daotest/TestSuperclass.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/TestSuperclass.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/TestSuperclass.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/TestSuperclass.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/ToManyEntity.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/ToManyEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/ToManyEntity.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/ToManyEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/ToManyEntityDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/ToManyTargetEntity.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/ToManyTargetEntity.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/ToManyTargetEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/ToManyTargetEntityDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/TreeEntity.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/TreeEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/TreeEntity.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/TreeEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/TreeEntityDao.java
diff --git a/DaoTest/src/de/greenrobot/daotest/customtype/IntegerListConverter.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/customtype/IntegerListConverter.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/customtype/IntegerListConverter.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/customtype/IntegerListConverter.java
diff --git a/DaoTest/src/de/greenrobot/daotest/customtype/MyTimestamp.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/customtype/MyTimestamp.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/customtype/MyTimestamp.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/customtype/MyTimestamp.java
diff --git a/DaoTest/src/de/greenrobot/daotest/customtype/MyTimestampConverter.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/customtype/MyTimestampConverter.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/customtype/MyTimestampConverter.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/customtype/MyTimestampConverter.java
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityNotNullHelper.java b/DaoTestBase/src/main/java/de/greenrobot/daotest/entity/SimpleEntityNotNullHelper.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityNotNullHelper.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest/entity/SimpleEntityNotNullHelper.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/KeepEntity.java b/DaoTestBase/src/main/java/de/greenrobot/daotest2/KeepEntity.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest2/KeepEntity.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest2/KeepEntity.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/ToManyTarget2.java b/DaoTestBase/src/main/java/de/greenrobot/daotest2/ToManyTarget2.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest2/ToManyTarget2.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest2/ToManyTarget2.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java b/DaoTestBase/src/main/java/de/greenrobot/daotest2/dao/DaoMaster.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest2/dao/DaoMaster.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoSession.java b/DaoTestBase/src/main/java/de/greenrobot/daotest2/dao/DaoSession.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoSession.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest2/dao/DaoSession.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest2/dao/KeepEntityDao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest2/dao/KeepEntityDao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/specialentity/RelationSource2.java b/DaoTestBase/src/main/java/de/greenrobot/daotest2/specialentity/RelationSource2.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest2/specialentity/RelationSource2.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest2/specialentity/RelationSource2.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java b/DaoTestBase/src/main/java/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialentity/ToOneTarget2.java b/DaoTestBase/src/main/java/de/greenrobot/daotest2/to1_specialentity/ToOneTarget2.java
similarity index 100%
rename from DaoTest/src-gen/de/greenrobot/daotest2/to1_specialentity/ToOneTarget2.java
rename to DaoTestBase/src/main/java/de/greenrobot/daotest2/to1_specialentity/ToOneTarget2.java
diff --git a/DaoTestGenerator/src/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java b/DaoTestGenerator/src/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
index 88ba6080..91780b10 100644
--- a/DaoTestGenerator/src/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
+++ b/DaoTestGenerator/src/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
@@ -68,9 +68,9 @@ public TestDaoGenerator() {
 
     public void generate() throws Exception {
         DaoGenerator daoGenerator = new DaoGenerator();
-        daoGenerator.generateAll(schema, "../DaoTest/src-gen", null, "../DaoTest/src");
-        daoGenerator.generateAll(schema2, "../DaoTest/src-gen", null, "../DaoTest/src");
-        daoGenerator.generateAll(schemaUnitTest, "../DaoTest/src-unit-test", null, "../DaoTest/src-unit-test");
+        daoGenerator.generateAll(schema, "../DaoTestBase/src/main/java");
+        daoGenerator.generateAll(schema2, "../DaoTestBase/src/main/java");
+        daoGenerator.generateAll(schemaUnitTest, "../DaoTestBase/src/test/java");
     }
 
     protected void createSimple() {
@@ -105,10 +105,13 @@ protected void createSimpleNotNull() {
 
     protected Entity createTest() {
         Entity testEntity = schema.addEntity("TestEntity");
-        testEntity.addIdProperty();
-        testEntity.addIntProperty("simpleInt").notNull();
-        testEntity.addIntProperty("simpleInteger");
-        testEntity.addStringProperty("simpleStringNotNull").notNull();
+        testEntity.setJavaDoc("This entity is used by internal tests of greenDAO.\n" +
+                "(This JavaDoc is defined in the generator project.)");
+        testEntity.setCodeBeforeClass("// This is another test comment, you could also apply annotations like this");
+        testEntity.addIdProperty().javaDocField("JavaDoc test field");
+        testEntity.addIntProperty("simpleInt").notNull().javaDocGetter("JavaDoc test getter");
+        testEntity.addIntProperty("simpleInteger").javaDocSetter("JavaDoc test setter");
+        testEntity.addStringProperty("simpleStringNotNull").notNull().javaDocGetterAndSetter("JavaDoc test getter and setter");
         testEntity.addStringProperty("simpleString");
         testEntity.addStringProperty("indexedString").index();
         testEntity.addStringProperty("indexedStringAscUnique").indexAsc(null, true);
diff --git a/DaoTestPerformance/build.gradle b/DaoTestPerformance/build.gradle
new file mode 100644
index 00000000..6710204a
--- /dev/null
+++ b/DaoTestPerformance/build.gradle
@@ -0,0 +1,25 @@
+buildscript {
+    repositories {
+        mavenCentral()
+    }
+
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.5.0'
+    }
+}
+
+apply plugin: 'com.android.application'
+
+dependencies {
+    compile project(':DaoTestBase')
+}
+
+android {
+    buildToolsVersion rootProject.ext.buildToolsVersion
+    compileSdkVersion rootProject.ext.compileSdkVersion
+
+    defaultConfig {
+        testApplicationId "org.greenrobot.greendao.perftest"
+        testInstrumentationRunner "android.test.InstrumentationTestRunner"
+    }
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/IndexedStringPerformanceTest.java b/DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/IndexedStringPerformanceTest.java
similarity index 98%
rename from DaoTest/src/de/greenrobot/daotest/performance/IndexedStringPerformanceTest.java
rename to DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/IndexedStringPerformanceTest.java
index 1a0822ec..dfb30b63 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/IndexedStringPerformanceTest.java
+++ b/DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/IndexedStringPerformanceTest.java
@@ -4,7 +4,7 @@
 import de.greenrobot.dao.test.AbstractDaoTest;
 import de.greenrobot.daotest.IndexedStringEntity;
 import de.greenrobot.daotest.IndexedStringEntityDao;
-import de.greenrobot.performance.StringGenerator;
+
 import java.util.ArrayList;
 import java.util.List;
 
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/LoockupPerformanceTest.java b/DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/LoockupPerformanceTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/performance/LoockupPerformanceTest.java
rename to DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/LoockupPerformanceTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTest.java b/DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/PerformanceTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/performance/PerformanceTest.java
rename to DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/PerformanceTest.java
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTestNotNull.java b/DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/PerformanceTestNotNull.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/performance/PerformanceTestNotNull.java
rename to DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/PerformanceTestNotNull.java
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTestNotNullIdentityScope.java b/DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/PerformanceTestNotNullIdentityScope.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/performance/PerformanceTestNotNullIdentityScope.java
rename to DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/PerformanceTestNotNullIdentityScope.java
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/ReflectionPerformanceTest.java b/DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/ReflectionPerformanceTest.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/performance/ReflectionPerformanceTest.java
rename to DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/ReflectionPerformanceTest.java
diff --git a/PerformanceTests/Common/src/main/java/de/greenrobot/performance/StringGenerator.java b/DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/StringGenerator.java
similarity index 72%
rename from PerformanceTests/Common/src/main/java/de/greenrobot/performance/StringGenerator.java
rename to DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/StringGenerator.java
index 8b19d819..3fd87902 100644
--- a/PerformanceTests/Common/src/main/java/de/greenrobot/performance/StringGenerator.java
+++ b/DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/StringGenerator.java
@@ -1,7 +1,6 @@
-package de.greenrobot.performance;
+package de.greenrobot.daotest.performance;
 
 import java.util.Random;
-import org.apache.commons.lang3.RandomStringUtils;
 
 /**
  * Helper class to generate a pre-determined set of random strings.
@@ -13,9 +12,9 @@
     private static final int MIN_LENGTH = 5;
     private static final int MAX_LENGTH = 500;
     // limit to a fixed set of chars
-    private static final char[] CHARS = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8',
+    private static final char[] CHARS = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8',
             '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',
-            'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };
+            'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
 
     /**
      * Creates the same random sequence of strings.
@@ -30,10 +29,12 @@
         stringRandom.setSeed(SEED);
 
         for (int i = 0; i < count; i++) {
-            int nextLength = lengthRandom.nextInt(MAX_LENGTH - MIN_LENGTH - 1);
-            nextLength += MIN_LENGTH;
-            strings[i] = RandomStringUtils.random(nextLength, 0, CHARS.length, true, true, CHARS,
-                    stringRandom);
+            int nextLength = MIN_LENGTH + lengthRandom.nextInt(MAX_LENGTH - MIN_LENGTH - 1);
+            char[] chars = new char[nextLength];
+            for (int j = 0; j < nextLength; j++) {
+                chars[j] = CHARS[stringRandom.nextInt(CHARS.length)];
+            }
+            strings[i] = new String(chars);
         }
         return strings;
     }
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/target/ArrayUtils.java b/DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/target/ArrayUtils.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/performance/target/ArrayUtils.java
rename to DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/target/ArrayUtils.java
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/target/LongHashMapAmarena2DZechner.java b/DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/target/LongHashMapAmarena2DZechner.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/performance/target/LongHashMapAmarena2DZechner.java
rename to DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/target/LongHashMapAmarena2DZechner.java
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/target/LongHashMapJDBM.java b/DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/target/LongHashMapJDBM.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/performance/target/LongHashMapJDBM.java
rename to DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/target/LongHashMapJDBM.java
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/target/LongSparseArray.java b/DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/target/LongSparseArray.java
similarity index 100%
rename from DaoTest/src/de/greenrobot/daotest/performance/target/LongSparseArray.java
rename to DaoTestPerformance/src/androidTest/java/de/greenrobot/daotest/performance/target/LongSparseArray.java
diff --git a/DaoTestPerformance/src/main/AndroidManifest.xml b/DaoTestPerformance/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..654ad192
--- /dev/null
+++ b/DaoTestPerformance/src/main/AndroidManifest.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="org.greenrobot.daotest.dummyapp"
+    android:versionCode="1"
+    android:versionName="1.0" >
+
+    <uses-sdk android:minSdkVersion="4" />
+
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+
+    <application>
+        <uses-library android:name="android.test.runner" />
+    </application>
+
+</manifest>
\ No newline at end of file
diff --git a/PerformanceTests/ActiveAndroid/build.gradle b/PerformanceTests/ActiveAndroid/build.gradle
deleted file mode 100644
index 6f1023b2..00000000
--- a/PerformanceTests/ActiveAndroid/build.gradle
+++ /dev/null
@@ -1,36 +0,0 @@
-buildscript {
-    repositories {
-        jcenter()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
-    }
-}
-
-apply plugin: 'com.android.application'
-
-repositories {
-    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
-}
-
-android {
-    buildToolsVersion rootProject.ext.buildToolsVersion
-    compileSdkVersion rootProject.ext.compileSdkVersion
-
-    defaultConfig {
-        applicationId 'de.greenrobot.performance.activeandroid'
-        minSdkVersion rootProject.ext.minSdkVersion
-        targetSdkVersion rootProject.ext.targetSdkVersion
-
-        testInstrumentationRunner 'android.test.InstrumentationTestRunner'
-
-        buildConfigField "boolean", "RUN_PERFORMANCE_TESTS", "false"
-    }
-}
-
-dependencies {
-    androidTestCompile project(':PerformanceTests:Common')
-    androidTestCompile 'com.android.support:support-v4:23.0.1'
-    androidTestCompile 'com.michaelpardo:activeandroid:3.1.0-SNAPSHOT'
-}
diff --git a/PerformanceTests/ActiveAndroid/src/androidTest/java/de/greenrobot/performance/activeandroid/IndexedStringEntity.java b/PerformanceTests/ActiveAndroid/src/androidTest/java/de/greenrobot/performance/activeandroid/IndexedStringEntity.java
deleted file mode 100644
index 1f953ed9..00000000
--- a/PerformanceTests/ActiveAndroid/src/androidTest/java/de/greenrobot/performance/activeandroid/IndexedStringEntity.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package de.greenrobot.performance.activeandroid;
-
-import com.activeandroid.Model;
-import com.activeandroid.annotation.Column;
-import com.activeandroid.annotation.Table;
-
-/**
- * Simple entity with a string property that is indexed.
- */
-@Table(name = "INDEXED_STRING_ENTITY")
-public class IndexedStringEntity extends Model {
-
-    @Column(name = "INDEXED_STRING", index =  true)
-    public String indexedString;
-
-}
diff --git a/PerformanceTests/ActiveAndroid/src/androidTest/java/de/greenrobot/performance/activeandroid/PerformanceTestActiveAndroid.java b/PerformanceTests/ActiveAndroid/src/androidTest/java/de/greenrobot/performance/activeandroid/PerformanceTestActiveAndroid.java
deleted file mode 100644
index 8964ede6..00000000
--- a/PerformanceTests/ActiveAndroid/src/androidTest/java/de/greenrobot/performance/activeandroid/PerformanceTestActiveAndroid.java
+++ /dev/null
@@ -1,238 +0,0 @@
-package de.greenrobot.performance.activeandroid;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-import android.util.Log;
-import com.activeandroid.ActiveAndroid;
-import com.activeandroid.Cache;
-import com.activeandroid.Configuration;
-import com.activeandroid.query.Select;
-import de.greenrobot.performance.StringGenerator;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * https://github.com/pardom/ActiveAndroid/wiki/Getting-started
- */
-public class PerformanceTestActiveAndroid extends ApplicationTestCase<Application> {
-
-    private static final String TAG = "PerfTestActiveAndroid";
-
-    private static final int BATCH_SIZE = 10000;
-    private static final int QUERY_COUNT = 1000;
-    private static final int RUNS = 8;
-
-    private static final String DATABASE_NAME = "active-android.db";
-
-    public PerformanceTestActiveAndroid() {
-        super(Application.class);
-    }
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        createApplication();
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        if (Cache.isInitialized()) {
-            ActiveAndroid.dispose();
-        }
-        getApplication().deleteDatabase(DATABASE_NAME);
-
-        super.tearDown();
-    }
-
-    public void testIndexedStringEntityQuery() {
-        //noinspection PointlessBooleanExpression
-        if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
-            Log.d(TAG, "Performance tests are disabled.");
-            return;
-        }
-        Log.d(TAG, "--------Indexed Queries: Start");
-
-        // set up database
-        Configuration dbConfiguration = new Configuration.Builder(getContext())
-                .setDatabaseName(DATABASE_NAME)
-                .addModelClass(IndexedStringEntity.class)
-                .create();
-        ActiveAndroid.initialize(dbConfiguration);
-        Log.d(TAG, "Set up database.");
-
-        for (int i = 0; i < RUNS; i++) {
-            Log.d(TAG, "----Run " + (i + 1) + " of " + RUNS);
-            doIndexedStringEntityQuery();
-        }
-
-        Log.d(TAG, "--------Indexed Queries: End");
-    }
-
-    private void doIndexedStringEntityQuery() {
-        // create entities
-        List<IndexedStringEntity> entities = new ArrayList<>(BATCH_SIZE);
-        String[] fixedRandomStrings = StringGenerator.createFixedRandomStrings(BATCH_SIZE);
-        for (int i = 0; i < BATCH_SIZE; i++) {
-            IndexedStringEntity entity = new IndexedStringEntity();
-            entity.indexedString = fixedRandomStrings[i];
-            entities.add(entity);
-        }
-        Log.d(TAG, "Built entities.");
-
-        // insert entities
-        ActiveAndroid.beginTransaction();
-        try {
-            for (int i = 0; i < BATCH_SIZE; i++) {
-                entities.get(i).save();
-            }
-            ActiveAndroid.setTransactionSuccessful();
-        } finally {
-            ActiveAndroid.endTransaction();
-        }
-        Log.d(TAG, "Inserted entities.");
-
-        // query for entities by indexed string at random
-        int[] randomIndices = StringGenerator.getFixedRandomIndices(QUERY_COUNT, BATCH_SIZE - 1);
-
-        long start = System.currentTimeMillis();
-        for (int i = 0; i < QUERY_COUNT; i++) {
-            int nextIndex = randomIndices[i];
-            //noinspection unused
-            List<IndexedStringEntity> query = new Select()
-                    .from(IndexedStringEntity.class)
-                    .where("INDEXED_STRING = ?", fixedRandomStrings[nextIndex])
-                    .execute();
-            // ActiveAndroid already builds all entities when executing the query, so move on
-        }
-        long time = System.currentTimeMillis() - start;
-        Log.d(TAG,
-                "Queried for " + QUERY_COUNT + " of " + BATCH_SIZE + " indexed entities in " + time
-                        + " ms.");
-
-        // delete all entities
-        ActiveAndroid.execSQL("DELETE FROM INDEXED_STRING_ENTITY");
-        Log.d(TAG, "Deleted all entities.");
-    }
-
-    public void testPerformance() throws Exception {
-        //noinspection PointlessBooleanExpression
-        if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
-            Log.d(TAG, "Performance tests are disabled.");
-            return;
-        }
-        Log.d(TAG, "---------------Start");
-
-        // set up database
-        Configuration dbConfiguration = new Configuration.Builder(getContext())
-                .setDatabaseName(DATABASE_NAME)
-                .addModelClass(SimpleEntityNotNull.class)
-                .create();
-        ActiveAndroid.initialize(dbConfiguration);
-
-        for (int i = 0; i < RUNS; i++) {
-            runTests(BATCH_SIZE);
-        }
-
-        Log.d(TAG, "---------------End");
-    }
-
-    protected void runTests(int entityCount) throws Exception {
-        Log.d(TAG, "---------------Start: " + entityCount);
-
-        long start, time;
-
-        final List<SimpleEntityNotNull> list = new ArrayList<>();
-        for (int i = 0; i < entityCount; i++) {
-            list.add(SimpleEntityNotNullHelper.createEntity());
-        }
-        System.gc();
-
-        runOneByOne(list, entityCount / 10);
-
-        System.gc();
-        deleteAll();
-
-        start = System.currentTimeMillis();
-        ActiveAndroid.beginTransaction();
-        try {
-            for (int i = 0; i < entityCount; i++) {
-                list.get(i).save();
-            }
-            ActiveAndroid.setTransactionSuccessful();
-        } finally {
-            ActiveAndroid.endTransaction();
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Created (batch) " + list.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        ActiveAndroid.beginTransaction();
-        try {
-            for (int i = 0; i < entityCount; i++) {
-                list.get(i).save();
-            }
-            ActiveAndroid.setTransactionSuccessful();
-        } finally {
-            ActiveAndroid.endTransaction();
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Updated (batch) " + list.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        List<SimpleEntityNotNull> reloaded = new Select()
-                .all()
-                .from(SimpleEntityNotNull.class)
-                .execute();
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Loaded (batch) " + reloaded.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        for (int i = 0; i < reloaded.size(); i++) {
-            SimpleEntityNotNull entity = reloaded.get(i);
-            entity.getId();
-            entity.getSimpleBoolean();
-            entity.getSimpleByte();
-            entity.getSimpleShort();
-            entity.getSimpleInt();
-            entity.getSimpleLong();
-            entity.getSimpleFloat();
-            entity.getSimpleDouble();
-            entity.getSimpleString();
-            entity.getSimpleByteArray();
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Accessed properties of " + reloaded.size() + " entities in " + time + " ms");
-
-        deleteAll();
-
-        System.gc();
-        Log.d(TAG, "---------------End: " + entityCount);
-    }
-
-    protected void deleteAll() {
-        long start = System.currentTimeMillis();
-        ActiveAndroid.execSQL("DELETE FROM SIMPLE_ENTITY_NOT_NULL");
-        long time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Deleted all entities in " + time + " ms");
-    }
-
-    protected void runOneByOne(List<SimpleEntityNotNull> list, int count) throws SQLException {
-        long start;
-        long time;
-        start = System.currentTimeMillis();
-        for (int i = 0; i < count; i++) {
-            list.get(i).save();
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Inserted (one-by-one) " + count + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        for (int i = 0; i < count; i++) {
-            list.get(i).save();
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Updated (one-by-one) " + count + " entities in " + time + " ms");
-    }
-}
diff --git a/PerformanceTests/ActiveAndroid/src/androidTest/java/de/greenrobot/performance/activeandroid/SimpleEntityNotNull.java b/PerformanceTests/ActiveAndroid/src/androidTest/java/de/greenrobot/performance/activeandroid/SimpleEntityNotNull.java
deleted file mode 100644
index 0fb740b8..00000000
--- a/PerformanceTests/ActiveAndroid/src/androidTest/java/de/greenrobot/performance/activeandroid/SimpleEntityNotNull.java
+++ /dev/null
@@ -1,103 +0,0 @@
-package de.greenrobot.performance.activeandroid;
-
-import com.activeandroid.Model;
-import com.activeandroid.annotation.Column;
-import com.activeandroid.annotation.Table;
-
-/**
- * Entity mapped to table SIMPLE_ENTITY_NOT_NULL.
- */
-@Table(name = "SIMPLE_ENTITY_NOT_NULL")
-public class SimpleEntityNotNull extends Model {
-
-    @Column(name = "SIMPLE_BOOLEAN")
-    public boolean simpleBoolean;
-    @Column(name = "SIMPLE_BYTE")
-    public byte simpleByte;
-    @Column(name = "SIMPLE_SHORT")
-    public short simpleShort;
-    @Column(name = "SIMPLE_INT")
-    public int simpleInt;
-    @Column(name = "SIMPLE_LONG")
-    public long simpleLong;
-    @Column(name = "SIMPLE_FLOAT")
-    public float simpleFloat;
-    @Column(name = "SIMPLE_DOUBLE")
-    public double simpleDouble;
-    @Column(name = "SIMPLE_STRING")
-    public String simpleString;
-    @Column(name = "SIMPLE_BYTE_ARRAY")
-    public byte[] simpleByteArray;
-
-    public boolean getSimpleBoolean() {
-        return simpleBoolean;
-    }
-
-    public void setSimpleBoolean(boolean simpleBoolean) {
-        this.simpleBoolean = simpleBoolean;
-    }
-
-    public byte getSimpleByte() {
-        return simpleByte;
-    }
-
-    public void setSimpleByte(byte simpleByte) {
-        this.simpleByte = simpleByte;
-    }
-
-    public short getSimpleShort() {
-        return simpleShort;
-    }
-
-    public void setSimpleShort(short simpleShort) {
-        this.simpleShort = simpleShort;
-    }
-
-    public int getSimpleInt() {
-        return simpleInt;
-    }
-
-    public void setSimpleInt(int simpleInt) {
-        this.simpleInt = simpleInt;
-    }
-
-    public long getSimpleLong() {
-        return simpleLong;
-    }
-
-    public void setSimpleLong(long simpleLong) {
-        this.simpleLong = simpleLong;
-    }
-
-    public float getSimpleFloat() {
-        return simpleFloat;
-    }
-
-    public void setSimpleFloat(float simpleFloat) {
-        this.simpleFloat = simpleFloat;
-    }
-
-    public double getSimpleDouble() {
-        return simpleDouble;
-    }
-
-    public void setSimpleDouble(double simpleDouble) {
-        this.simpleDouble = simpleDouble;
-    }
-
-    public String getSimpleString() {
-        return simpleString;
-    }
-
-    public void setSimpleString(String simpleString) {
-        this.simpleString = simpleString;
-    }
-
-    public byte[] getSimpleByteArray() {
-        return simpleByteArray;
-    }
-
-    public void setSimpleByteArray(byte[] simpleByteArray) {
-        this.simpleByteArray = simpleByteArray;
-    }
-}
diff --git a/PerformanceTests/ActiveAndroid/src/androidTest/java/de/greenrobot/performance/activeandroid/SimpleEntityNotNullHelper.java b/PerformanceTests/ActiveAndroid/src/androidTest/java/de/greenrobot/performance/activeandroid/SimpleEntityNotNullHelper.java
deleted file mode 100644
index 633eb466..00000000
--- a/PerformanceTests/ActiveAndroid/src/androidTest/java/de/greenrobot/performance/activeandroid/SimpleEntityNotNullHelper.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package de.greenrobot.performance.activeandroid;
-
-public class SimpleEntityNotNullHelper {
-    protected static SimpleEntityNotNull createEntity() {
-        SimpleEntityNotNull entity = new SimpleEntityNotNull();
-        entity.setSimpleBoolean(true);
-        entity.setSimpleByte(Byte.MAX_VALUE);
-        entity.setSimpleShort(Short.MAX_VALUE);
-        entity.setSimpleInt(Integer.MAX_VALUE);
-        entity.setSimpleLong(Long.MAX_VALUE);
-        entity.setSimpleFloat(Float.MAX_VALUE);
-        entity.setSimpleDouble(Double.MAX_VALUE);
-        entity.setSimpleString("greenrobot greenDAO");
-        byte[] bytes = { 42, -17, 23, 0, 127, -128 };
-        entity.setSimpleByteArray(bytes);
-        return entity;
-    }
-}
diff --git a/PerformanceTests/ActiveAndroid/src/main/AndroidManifest.xml b/PerformanceTests/ActiveAndroid/src/main/AndroidManifest.xml
deleted file mode 100644
index 074d059c..00000000
--- a/PerformanceTests/ActiveAndroid/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.performance.activeandroid">
-
-    <application>
-        <!-- empty application tag -->
-    </application>
-</manifest>
diff --git a/PerformanceTests/Common/build.gradle b/PerformanceTests/Common/build.gradle
deleted file mode 100644
index af4cae34..00000000
--- a/PerformanceTests/Common/build.gradle
+++ /dev/null
@@ -1,24 +0,0 @@
-buildscript {
-    repositories {
-        jcenter()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
-    }
-}
-
-apply plugin: 'com.android.library'
-
-android {
-    buildToolsVersion rootProject.ext.buildToolsVersion
-    compileSdkVersion rootProject.ext.compileSdkVersion
-
-    defaultConfig {
-        minSdkVersion rootProject.ext.minSdkVersion
-    }
-}
-
-dependencies {
-    compile 'org.apache.commons:commons-lang3:3.4'
-}
diff --git a/PerformanceTests/Common/src/main/AndroidManifest.xml b/PerformanceTests/Common/src/main/AndroidManifest.xml
deleted file mode 100644
index 69883fe4..00000000
--- a/PerformanceTests/Common/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,3 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.performance.common"/>
diff --git a/PerformanceTests/Couchbase/build.gradle b/PerformanceTests/Couchbase/build.gradle
deleted file mode 100644
index 5f4a9048..00000000
--- a/PerformanceTests/Couchbase/build.gradle
+++ /dev/null
@@ -1,38 +0,0 @@
-buildscript {
-    repositories {
-        jcenter()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
-    }
-}
-
-apply plugin: 'com.android.application'
-
-android {
-    buildToolsVersion rootProject.ext.buildToolsVersion
-    compileSdkVersion rootProject.ext.compileSdkVersion
-
-    defaultConfig {
-        applicationId 'de.greenrobot.performance.couchbase'
-        // Couchbase requires at least SDK level 9
-        minSdkVersion 9
-        targetSdkVersion rootProject.ext.targetSdkVersion
-
-        testInstrumentationRunner 'android.test.InstrumentationTestRunner'
-
-        buildConfigField "boolean", "RUN_PERFORMANCE_TESTS", "false"
-    }
-
-    packagingOptions {
-        exclude 'META-INF/ASL2.0'
-        exclude 'META-INF/LICENSE'
-        exclude 'META-INF/NOTICE'
-    }
-}
-
-dependencies {
-    androidTestCompile project(':PerformanceTests:Common')
-    androidTestCompile 'com.couchbase.lite:couchbase-lite-android:1.1.0'
-}
diff --git a/PerformanceTests/Couchbase/src/androidTest/java/de/greenrobot/performance/couchbase/PerformanceTestCouchbase.java b/PerformanceTests/Couchbase/src/androidTest/java/de/greenrobot/performance/couchbase/PerformanceTestCouchbase.java
deleted file mode 100644
index a004cd8f..00000000
--- a/PerformanceTests/Couchbase/src/androidTest/java/de/greenrobot/performance/couchbase/PerformanceTestCouchbase.java
+++ /dev/null
@@ -1,284 +0,0 @@
-package de.greenrobot.performance.couchbase;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-import android.util.Log;
-import com.couchbase.lite.CouchbaseLiteException;
-import com.couchbase.lite.Database;
-import com.couchbase.lite.Document;
-import com.couchbase.lite.Emitter;
-import com.couchbase.lite.Manager;
-import com.couchbase.lite.Mapper;
-import com.couchbase.lite.Query;
-import com.couchbase.lite.QueryEnumerator;
-import com.couchbase.lite.QueryRow;
-import com.couchbase.lite.View;
-import com.couchbase.lite.android.AndroidContext;
-import de.greenrobot.performance.StringGenerator;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-/**
- * http://developer.couchbase.com/documentation/mobile/1.1.0/develop/training/build-first-android-app/index.html
- * https://github.com/couchbaselabs/ToDoLite-Android
- */
-public class PerformanceTestCouchbase extends ApplicationTestCase<Application> {
-
-    private static final String TAG = "PerfTestCouchbase";
-
-    private static final int BATCH_SIZE = 10000;
-    private static final int QUERY_COUNT = 1000;
-    private static final int RUNS = 8;
-
-    private static final String DB_NAME = "couchbase-test";
-    private static final String DOC_TYPE = "simpleentity";
-
-    private Database database;
-
-    public PerformanceTestCouchbase() {
-        super(Application.class);
-    }
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        createApplication();
-        setupCouchbase();
-    }
-
-    private void setupCouchbase() throws CouchbaseLiteException, IOException {
-        Manager manager = new Manager(new AndroidContext(getApplication()),
-                Manager.DEFAULT_OPTIONS);
-        database = manager.getDatabase(DB_NAME);
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        database.delete();
-        database = null;
-
-        super.tearDown();
-    }
-
-    public void testIndexedStringEntityQuery() throws CouchbaseLiteException {
-        //noinspection PointlessBooleanExpression
-        if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
-            Log.d(TAG, "Performance tests are disabled.");
-            return;
-        }
-        Log.d(TAG, "--------Indexed Queries: Start");
-
-        // set up index on string property
-        View indexedStringView = database.getView("indexedStringView");
-        indexedStringView.setMap(new Mapper() {
-            @Override
-            public void map(Map<String, Object> document, Emitter emitter) {
-                String indexedString = (String) document.get("indexedString");
-                // only need an index of strings mapped to the document, so provide no value
-                emitter.emit(indexedString, null);
-            }
-        }, "1");
-        Log.d(TAG, "Set up view.");
-
-        for (int i = 0; i < RUNS; i++) {
-            Log.d(TAG, "----Run " + (i + 1) + " of " + RUNS);
-            doIndexedStringEntityQuery(indexedStringView);
-        }
-
-        Log.d(TAG, "--------Indexed Queries: End");
-    }
-
-    private void doIndexedStringEntityQuery(View indexedStringView) throws CouchbaseLiteException {
-        // create entities
-        String[] fixedRandomStrings = StringGenerator.createFixedRandomStrings(BATCH_SIZE);
-        database.beginTransaction();
-        for (int i = 0; i < BATCH_SIZE; i++) {
-            Document entity = database.getDocument(String.valueOf(i));
-            Map<String, Object> properties = new HashMap<>();
-            properties.put("indexedString", fixedRandomStrings[i]);
-            entity.putProperties(properties);
-        }
-        database.endTransaction(true);
-        Log.d(TAG, "Built and inserted entities.");
-
-        // query for entities by indexed string at random
-        int[] randomIndices = StringGenerator.getFixedRandomIndices(QUERY_COUNT, BATCH_SIZE - 1);
-
-        long start = System.currentTimeMillis();
-        for (int i = 0; i < QUERY_COUNT; i++) {
-            int nextIndex = randomIndices[i];
-            List<Object> keyToQuery = new ArrayList<>(1);
-            keyToQuery.add(fixedRandomStrings[nextIndex]);
-
-            Query query = indexedStringView.createQuery();
-            query.setKeys(keyToQuery);
-            QueryEnumerator result = query.run();
-            while (result.hasNext()) {
-                QueryRow row = result.next();
-                //noinspection unused
-                Document document = row.getDocument();
-            }
-        }
-        long time = System.currentTimeMillis() - start;
-        Log.d(TAG,
-                "Queried for " + QUERY_COUNT + " of " + BATCH_SIZE + " indexed entities in " + time
-                        + " ms.");
-
-        // delete all entities
-        deleteAll();
-    }
-
-    public void testPerformance() throws Exception {
-        //noinspection PointlessBooleanExpression
-        if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
-            Log.d(TAG, "Performance tests are disabled.");
-            return;
-        }
-
-        Log.d(TAG, "---------------Start");
-        for (int i = 0; i < RUNS; i++) {
-            runTests(BATCH_SIZE);
-        }
-        Log.d(TAG, "---------------End");
-    }
-
-    protected void runTests(int entityCount) throws Exception {
-        Log.d(TAG, "---------------Start: " + entityCount);
-
-        long start, time;
-
-        // precreate property maps for documents
-        List<Map<String, Object>> maps = new ArrayList<>(entityCount);
-        for (int i = 0; i < entityCount; i++) {
-            maps.add(createDocumentMap(i));
-        }
-        System.gc();
-
-        runOneByOne(maps, entityCount / 10);
-
-        System.gc();
-        deleteAll();
-
-        start = System.currentTimeMillis();
-        List<Document> documents = new ArrayList<>(entityCount);
-        database.beginTransaction();
-        for (int i = 0; i < entityCount; i++) {
-            // use our own ids (use .createDocument() for random UUIDs)
-            Document document = database.getDocument(String.valueOf(i));
-            document.putProperties(maps.get(i));
-            documents.add(document);
-        }
-        database.endTransaction(true);
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Created (batch) " + BATCH_SIZE + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        database.beginTransaction();
-        for (int i = 0; i < entityCount; i++) {
-            Document document = documents.get(i);
-            Map<String, Object> updatedProperties = new HashMap<>();
-            // copy existing properties to get _rev property
-            updatedProperties.putAll(document.getProperties());
-            updatedProperties.putAll(maps.get(i));
-            document.putProperties(updatedProperties);
-        }
-        database.endTransaction(true);
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Updated (batch) " + BATCH_SIZE + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        List<Document> reloaded = new ArrayList<>();
-        for (int i = 0; i < entityCount; i++) {
-            reloaded.add(database.getDocument(String.valueOf(i)));
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Loaded (one-by-one) " + reloaded.size() + " entities in " + time + " ms");
-
-        // Couchbase is not actually loading properties when getting a document
-        // so load them for each one to measure how long it takes to get to the actual data
-        start = System.currentTimeMillis();
-        for (int i = 0; i < reloaded.size(); i++) {
-            Document document = reloaded.get(i);
-            Map<String, Object> properties = document.getProperties();
-            properties.get("simpleBoolean");
-            properties.get("simpleByte");
-            properties.get("simpleShort");
-            properties.get("simpleInt");
-            properties.get("simpleLong");
-            properties.get("simpleFloat");
-            properties.get("simpleDouble");
-            properties.get("simpleString");
-            properties.get("simpleByteArray");
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Accessed properties of " + reloaded.size() + " entities in " + time + " ms");
-
-        deleteAll();
-
-        System.gc();
-        Log.d(TAG, "---------------End: " + entityCount);
-    }
-
-    private void runOneByOne(List<Map<String, Object>> maps, int count)
-            throws CouchbaseLiteException {
-        long start;
-        long time;
-        start = System.currentTimeMillis();
-        List<Document> documents = new ArrayList<>(count);
-        for (int i = 0; i < count; i++) {
-            // use our own ids (use .createDocument() for random UUIDs)
-            Document document = database.getDocument(String.valueOf(i));
-            document.putProperties(maps.get(i));
-            documents.add(document);
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Inserted (one-by-one) " + count + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        for (int i = 0; i < count; i++) {
-            Document document = documents.get(i);
-            Map<String, Object> updatedProperties = new HashMap<>();
-            // copy existing properties to get _rev property
-            updatedProperties.putAll(document.getProperties());
-            updatedProperties.putAll(maps.get(i));
-            document.putProperties(updatedProperties);
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Updated (one-by-one) " + count + " entities in " + time + " ms");
-    }
-
-    protected void deleteAll() throws CouchbaseLiteException {
-        long start = System.currentTimeMillis();
-        // query all documents, mark them as deleted
-        Query query = database.createAllDocumentsQuery();
-        QueryEnumerator result = query.run();
-        database.beginTransaction();
-        while (result.hasNext()) {
-            QueryRow row = result.next();
-            row.getDocument().purge();
-        }
-        database.endTransaction(true);
-        long time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Deleted all entities in " + time + " ms");
-    }
-
-    private Map<String, Object> createDocumentMap(int seed) throws CouchbaseLiteException {
-        Map<String, Object> map = new HashMap<>();
-        map.put("type", DOC_TYPE);
-        map.put("simpleBoolean", true);
-        map.put("simpleByte", seed & 0xff);
-        map.put("simpleShort", seed & 0xffff);
-        map.put("simpleInt", seed);
-        map.put("simpleLong", Long.MAX_VALUE - seed);
-        map.put("simpleFloat", (float) (Math.PI * seed));
-        map.put("simpleDouble", Math.E * seed);
-        map.put("simpleString", "greenrobot greenDAO");
-        byte[] bytes = { 42, -17, 23, 0, 127, -128 };
-        map.put("simpleByteArray", bytes);
-        return map;
-    }
-}
diff --git a/PerformanceTests/Couchbase/src/main/AndroidManifest.xml b/PerformanceTests/Couchbase/src/main/AndroidManifest.xml
deleted file mode 100644
index 7b350f19..00000000
--- a/PerformanceTests/Couchbase/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.performance.couchbase">
-
-    <application>
-        <!-- empty application tag -->
-    </application>
-</manifest>
diff --git a/PerformanceTests/Cupboard/build.gradle b/PerformanceTests/Cupboard/build.gradle
deleted file mode 100644
index 07e6977f..00000000
--- a/PerformanceTests/Cupboard/build.gradle
+++ /dev/null
@@ -1,31 +0,0 @@
-buildscript {
-    repositories {
-        jcenter()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
-    }
-}
-
-apply plugin: 'com.android.application'
-
-android {
-    buildToolsVersion rootProject.ext.buildToolsVersion
-    compileSdkVersion rootProject.ext.compileSdkVersion
-
-    defaultConfig {
-        applicationId 'de.greenrobot.performance.cupboard'
-        minSdkVersion rootProject.ext.minSdkVersion
-        targetSdkVersion rootProject.ext.targetSdkVersion
-
-        testInstrumentationRunner 'android.test.InstrumentationTestRunner'
-
-        buildConfigField "boolean", "RUN_PERFORMANCE_TESTS", "false"
-    }
-}
-
-dependencies {
-    androidTestCompile project(':PerformanceTests:Common')
-    androidTestCompile 'nl.qbusict:cupboard:2.1.2'
-}
diff --git a/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/IndexedStringEntity.java b/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/IndexedStringEntity.java
deleted file mode 100644
index 9cdaf006..00000000
--- a/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/IndexedStringEntity.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package de.greenrobot.performance.cupboard;
-
-import nl.qbusict.cupboard.annotation.Index;
-
-/**
- * Simple entity with a string property that is indexed.
- */
-public class IndexedStringEntity {
-
-    public Long _id;
-
-    @Index
-    public String indexedString;
-
-}
diff --git a/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/PerformanceTestCupboard.java b/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/PerformanceTestCupboard.java
deleted file mode 100644
index 896a085b..00000000
--- a/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/PerformanceTestCupboard.java
+++ /dev/null
@@ -1,232 +0,0 @@
-package de.greenrobot.performance.cupboard;
-
-import android.app.Application;
-import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
-import android.test.ApplicationTestCase;
-import android.util.Log;
-import de.greenrobot.performance.StringGenerator;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-import nl.qbusict.cupboard.Cupboard;
-import nl.qbusict.cupboard.CupboardBuilder;
-import nl.qbusict.cupboard.DatabaseCompartment;
-
-/**
- * https://bitbucket.org/qbusict/cupboard/wiki/GettingStarted
- */
-public class PerformanceTestCupboard extends ApplicationTestCase<Application> {
-
-    private static final String TAG = "PerfTestCupboard";
-
-    private static final int BATCH_SIZE = 10000;
-    private static final int QUERY_COUNT = 1000;
-    private static final int RUNS = 8;
-
-    private static final String DATABASE_NAME = "cupboard.db";
-    private static final int DATABASE_VERSION = 1;
-
-    private Cupboard cupboard;
-
-    public PerformanceTestCupboard() {
-        super(Application.class);
-    }
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        createApplication();
-        setUpCupboard();
-    }
-
-    private void setUpCupboard() {
-        cupboard = new CupboardBuilder().useAnnotations().build();
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        getApplication().deleteDatabase(DATABASE_NAME);
-
-        super.tearDown();
-    }
-
-    public void testIndexedStringEntityQuery() {
-        //noinspection PointlessBooleanExpression
-        if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
-            Log.d(TAG, "Performance tests are disabled.");
-            return;
-        }
-        Log.d(TAG, "--------Indexed Queries: Start");
-
-        // set up database
-        cupboard.register(IndexedStringEntity.class);
-        DbHelper dbHelper = new DbHelper(getApplication(), DATABASE_NAME, DATABASE_VERSION);
-        DatabaseCompartment database = cupboard.withDatabase(dbHelper.getWritableDatabase());
-        Log.d(TAG, "Set up database.");
-
-        for (int i = 0; i < RUNS; i++) {
-            Log.d(TAG, "----Run " + (i + 1) + " of " + RUNS);
-            doIndexedStringEntityQuery(database);
-        }
-
-        Log.d(TAG, "--------Indexed Queries: End");
-    }
-
-    public void doIndexedStringEntityQuery(DatabaseCompartment database) {
-        // create entities
-        List<IndexedStringEntity> entities = new ArrayList<>(BATCH_SIZE);
-        String[] fixedRandomStrings = StringGenerator.createFixedRandomStrings(BATCH_SIZE);
-        for (int i = 0; i < BATCH_SIZE; i++) {
-            IndexedStringEntity entity = new IndexedStringEntity();
-            entity._id = (long) i;
-            entity.indexedString = fixedRandomStrings[i];
-            entities.add(entity);
-        }
-        Log.d(TAG, "Built entities.");
-
-        // insert entities
-        database.put(entities);
-        Log.d(TAG, "Inserted entities.");
-
-        // query for entities by indexed string at random
-        int[] randomIndices = StringGenerator.getFixedRandomIndices(QUERY_COUNT, BATCH_SIZE - 1);
-
-        long start = System.currentTimeMillis();
-        for (int i = 0; i < QUERY_COUNT; i++) {
-            int nextIndex = randomIndices[i];
-            //noinspection unused
-            List<IndexedStringEntity> query = database.query(
-                    IndexedStringEntity.class)
-                    .withSelection("indexedString = ?", fixedRandomStrings[nextIndex])
-                    .list();
-        }
-        long time = System.currentTimeMillis() - start;
-        Log.d(TAG,
-                "Queried for " + QUERY_COUNT + " of " + BATCH_SIZE + " indexed entities in " + time
-                        + " ms.");
-
-        // delete all entities
-        database.delete(IndexedStringEntity.class, "");
-        Log.d(TAG, "Deleted all entities.");
-    }
-
-    public void testPerformance() throws Exception {
-        //noinspection PointlessBooleanExpression
-        if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
-            Log.d(TAG, "Performance tests are disabled.");
-            return;
-        }
-        Log.d(TAG, "---------------Start");
-
-        // set up database
-        cupboard.register(SimpleEntityNotNull.class);
-        DbHelper dbHelper = new DbHelper(getApplication(), DATABASE_NAME, DATABASE_VERSION);
-        DatabaseCompartment database = cupboard.withDatabase(dbHelper.getWritableDatabase());
-
-        for (int i = 0; i < RUNS; i++) {
-            runTests(database, BATCH_SIZE);
-        }
-
-        Log.d(TAG, "---------------End");
-    }
-
-    private void runTests(DatabaseCompartment database, int entityCount) throws Exception {
-        Log.d(TAG, "---------------Start: " + entityCount);
-
-        long start, time;
-
-        final List<SimpleEntityNotNull> list = new ArrayList<>();
-        for (int i = 0; i < entityCount; i++) {
-            list.add(SimpleEntityNotNullHelper.createEntity((long) i));
-        }
-        System.gc();
-
-        runOneByOne(database, list, entityCount / 10);
-
-        System.gc();
-        deleteAll(database);
-
-        start = System.currentTimeMillis();
-        database.put(list);
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Created (batch) " + list.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        database.put(list);
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Updated (batch) " + list.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        List<SimpleEntityNotNull> reloaded = database.query(SimpleEntityNotNull.class).list();
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Loaded (batch) " + reloaded.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        for (int i = 0; i < reloaded.size(); i++) {
-            SimpleEntityNotNull entity = reloaded.get(i);
-            entity.getId();
-            entity.getSimpleBoolean();
-            entity.getSimpleByte();
-            entity.getSimpleShort();
-            entity.getSimpleInt();
-            entity.getSimpleLong();
-            entity.getSimpleFloat();
-            entity.getSimpleDouble();
-            entity.getSimpleString();
-            entity.getSimpleByteArray();
-        }
-        time = System.currentTimeMillis() - start;
-
-        Log.d(TAG, "Accessed properties of " + reloaded.size() + " entities in " + time + " ms");
-
-        deleteAll(database);
-
-        System.gc();
-        Log.d(TAG, "---------------End: " + entityCount);
-    }
-
-    private void deleteAll(DatabaseCompartment database) {
-        long start = System.currentTimeMillis();
-        database.delete(SimpleEntityNotNull.class, "");
-        long time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Deleted all entities in " + time + " ms");
-    }
-
-    private void runOneByOne(DatabaseCompartment database, List<SimpleEntityNotNull> list,
-            int count) throws SQLException {
-        long start;
-        long time;
-        start = System.currentTimeMillis();
-        for (int i = 0; i < count; i++) {
-            database.put(list.get(i));
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Inserted (one-by-one) " + count + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        for (int i = 0; i < count; i++) {
-            database.put(list.get(i));
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Updated (one-by-one) " + count + " entities in " + time + " ms");
-    }
-
-    private class DbHelper extends SQLiteOpenHelper {
-        public DbHelper(Context context, String name, int version) {
-            super(context, name, null, version);
-        }
-
-        @Override
-        public void onCreate(SQLiteDatabase db) {
-            cupboard.withDatabase(db).createTables();
-        }
-
-        @Override
-        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
-            cupboard.withDatabase(db).upgradeTables();
-        }
-    }
-}
diff --git a/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/SimpleEntityNotNull.java b/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/SimpleEntityNotNull.java
deleted file mode 100644
index 62ed9d0e..00000000
--- a/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/SimpleEntityNotNull.java
+++ /dev/null
@@ -1,98 +0,0 @@
-package de.greenrobot.performance.cupboard;
-
-/**
- * Simple entity for performance testing.
- */
-public class SimpleEntityNotNull {
-
-    public Long _id;
-    public boolean simpleBoolean;
-    public byte simpleByte;
-    public short simpleShort;
-    public int simpleInt;
-    public long simpleLong;
-    public float simpleFloat;
-    public double simpleDouble;
-    public String simpleString;
-    public byte[] simpleByteArray;
-
-    public Long getId() {
-        return _id;
-    }
-
-    public boolean getSimpleBoolean() {
-        return simpleBoolean;
-    }
-
-    public void setSimpleBoolean(boolean simpleBoolean) {
-        this.simpleBoolean = simpleBoolean;
-    }
-
-    public byte getSimpleByte() {
-        return simpleByte;
-    }
-
-    public void setSimpleByte(byte simpleByte) {
-        this.simpleByte = simpleByte;
-    }
-
-    public short getSimpleShort() {
-        return simpleShort;
-    }
-
-    public void setId(Long id) {
-        this._id = id;
-    }
-
-    public void setSimpleShort(short simpleShort) {
-        this.simpleShort = simpleShort;
-    }
-
-    public int getSimpleInt() {
-        return simpleInt;
-    }
-
-    public void setSimpleInt(int simpleInt) {
-        this.simpleInt = simpleInt;
-    }
-
-    public long getSimpleLong() {
-        return simpleLong;
-    }
-
-    public void setSimpleLong(long simpleLong) {
-        this.simpleLong = simpleLong;
-    }
-
-    public float getSimpleFloat() {
-        return simpleFloat;
-    }
-
-    public void setSimpleFloat(float simpleFloat) {
-        this.simpleFloat = simpleFloat;
-    }
-
-    public double getSimpleDouble() {
-        return simpleDouble;
-    }
-
-    public void setSimpleDouble(double simpleDouble) {
-        this.simpleDouble = simpleDouble;
-    }
-
-    public String getSimpleString() {
-        return simpleString;
-    }
-
-    public void setSimpleString(String simpleString) {
-        this.simpleString = simpleString;
-    }
-
-    public byte[] getSimpleByteArray() {
-        return simpleByteArray;
-    }
-
-    public void setSimpleByteArray(byte[] simpleByteArray) {
-        this.simpleByteArray = simpleByteArray;
-    }
-}
diff --git a/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/SimpleEntityNotNullHelper.java b/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/SimpleEntityNotNullHelper.java
deleted file mode 100644
index 082d7766..00000000
--- a/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/SimpleEntityNotNullHelper.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package de.greenrobot.performance.cupboard;
-
-public class SimpleEntityNotNullHelper {
-    protected static SimpleEntityNotNull createEntity(Long key) {
-        if (key == null) {
-            return null;
-        }
-        SimpleEntityNotNull entity = new SimpleEntityNotNull();
-        entity.setId(key);
-        entity.setSimpleBoolean(true);
-        entity.setSimpleByte(Byte.MAX_VALUE);
-        entity.setSimpleShort(Short.MAX_VALUE);
-        entity.setSimpleInt(Integer.MAX_VALUE);
-        entity.setSimpleLong(Long.MAX_VALUE);
-        entity.setSimpleFloat(Float.MAX_VALUE);
-        entity.setSimpleDouble(Double.MAX_VALUE);
-        entity.setSimpleString("greenrobot greenDAO");
-        byte[] bytes = { 42, -17, 23, 0, 127, -128 };
-        entity.setSimpleByteArray(bytes);
-        return entity;
-    }
-}
diff --git a/PerformanceTests/Cupboard/src/main/AndroidManifest.xml b/PerformanceTests/Cupboard/src/main/AndroidManifest.xml
deleted file mode 100644
index 75a61d01..00000000
--- a/PerformanceTests/Cupboard/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.performance.cupboard">
-
-    <application>
-        <!-- empty application tag -->
-    </application>
-</manifest>
diff --git a/PerformanceTests/Firebase/build.gradle b/PerformanceTests/Firebase/build.gradle
deleted file mode 100644
index 1382041c..00000000
--- a/PerformanceTests/Firebase/build.gradle
+++ /dev/null
@@ -1,37 +0,0 @@
-buildscript {
-    repositories {
-        jcenter()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
-    }
-}
-
-apply plugin: 'com.android.application'
-
-android {
-    buildToolsVersion rootProject.ext.buildToolsVersion
-    compileSdkVersion rootProject.ext.compileSdkVersion
-
-    defaultConfig {
-        applicationId 'de.greenrobot.performance.firebase'
-        minSdkVersion rootProject.ext.minSdkVersion
-        targetSdkVersion rootProject.ext.targetSdkVersion
-
-        testInstrumentationRunner 'android.test.InstrumentationTestRunner'
-
-        buildConfigField "boolean", "RUN_PERFORMANCE_TESTS", "false"
-    }
-
-    packagingOptions {
-        exclude 'META-INF/LICENSE'
-        exclude 'META-INF/LICENSE-FIREBASE.txt'
-        exclude 'META-INF/NOTICE'
-    }
-}
-
-dependencies {
-    androidTestCompile project(':PerformanceTests:Common')
-    androidTestCompile 'com.firebase:firebase-client-android:2.3.1'
-}
diff --git a/PerformanceTests/Firebase/src/androidTest/java/de/greenrobot/performance/firebase/IndexedStringEntity.java b/PerformanceTests/Firebase/src/androidTest/java/de/greenrobot/performance/firebase/IndexedStringEntity.java
deleted file mode 100644
index c2e2cc20..00000000
--- a/PerformanceTests/Firebase/src/androidTest/java/de/greenrobot/performance/firebase/IndexedStringEntity.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package de.greenrobot.performance.firebase;
-
-
-/**
- * Simple entity with a string property that is indexed.
- */
-public class IndexedStringEntity {
-
-    public long _id;
-
-    public String indexedString;
-
-}
diff --git a/PerformanceTests/Firebase/src/androidTest/java/de/greenrobot/performance/firebase/PerformanceTestFirebase.java b/PerformanceTests/Firebase/src/androidTest/java/de/greenrobot/performance/firebase/PerformanceTestFirebase.java
deleted file mode 100644
index 7d8643de..00000000
--- a/PerformanceTests/Firebase/src/androidTest/java/de/greenrobot/performance/firebase/PerformanceTestFirebase.java
+++ /dev/null
@@ -1,281 +0,0 @@
-package de.greenrobot.performance.firebase;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-import android.util.Log;
-import com.firebase.client.ChildEventListener;
-import com.firebase.client.DataSnapshot;
-import com.firebase.client.Firebase;
-import com.firebase.client.FirebaseError;
-import com.firebase.client.Query;
-import com.firebase.client.ValueEventListener;
-import de.greenrobot.performance.StringGenerator;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-
-/**
- * Make sure to run the performance tests while in AIRPLANE MODE, as
- * <code>Firebase.goOffline()</code> does not seem to work as expected.
- *
- * https://www.firebase.com/docs/android/guide/
- */
-public class PerformanceTestFirebase extends ApplicationTestCase<Application> {
-
-    private static final String TAG = "PerfTestFirebase";
-
-    private static final int BATCH_SIZE = 10000;
-    // reduced query count as local datastore can not be indexed, resulting in low performance
-    private static final int QUERY_COUNT = 100;
-    private static final int RUNS = 8;
-
-    private Firebase rootFirebaseRef;
-
-    private List<SimpleEntityNotNull> reloaded;
-
-    public PerformanceTestFirebase() {
-        super(Application.class);
-    }
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        createApplication();
-        setupFirebase();
-    }
-
-    private void setupFirebase() {
-        // handle multiple tests calling setup
-        if (!Firebase.getDefaultConfig().isFrozen()) {
-            Firebase.getDefaultConfig().setPersistenceEnabled(true);
-        }
-        Firebase.setAndroidContext(getApplication());
-        Firebase.goOffline();
-
-        rootFirebaseRef = new Firebase("https://luminous-inferno-2264.firebaseio.com");
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        rootFirebaseRef.getApp().purgeOutstandingWrites();
-        rootFirebaseRef.removeValue();
-
-        getApplication().deleteDatabase("luminous-inferno-2264.firebaseio.com_default");
-
-        super.tearDown();
-    }
-
-    public void testIndexedStringEntityQuery() throws InterruptedException {
-        // Firebase does not support defining indexes locally, only in the cloud component
-        // We measure the local datastore query time anyhow, but WITHOUT INDEXES.
-
-        //noinspection PointlessBooleanExpression
-        if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
-            Log.d(TAG, "Performance tests are disabled.");
-            return;
-        }
-        Log.d(TAG, "--------Indexed Queries: Start");
-
-        // set up node for entities
-        Firebase entityRef = rootFirebaseRef.child("indexedStringEntity");
-
-        for (int i = 0; i < RUNS; i++) {
-            Log.d(TAG, "----Run " + (i + 1) + " of " + RUNS);
-            doIndexedStringEntityQuery(entityRef);
-        }
-
-        Log.d(TAG, "--------Indexed Queries: End");
-    }
-
-    public void doIndexedStringEntityQuery(Firebase entityRef) throws InterruptedException {
-        // create entities
-        List<IndexedStringEntity> entities = new ArrayList<>(BATCH_SIZE);
-        String[] fixedRandomStrings = StringGenerator.createFixedRandomStrings(BATCH_SIZE);
-        for (int i = 0; i < BATCH_SIZE; i++) {
-            IndexedStringEntity entity = new IndexedStringEntity();
-            entity._id = (long) i;
-            entity.indexedString = fixedRandomStrings[i];
-            entities.add(entity);
-        }
-        Log.d(TAG, "Built entities.");
-
-        // insert entities
-        entityRef.setValue(entities);
-        Log.d(TAG, "Inserted entities.");
-
-        // query for entities by indexed string at random
-        int[] randomIndices = StringGenerator.getFixedRandomIndices(QUERY_COUNT, BATCH_SIZE - 1);
-
-        long start = System.currentTimeMillis();
-        for (int i = 0; i < QUERY_COUNT; i++) {
-            int nextIndex = randomIndices[i];
-
-            final CountDownLatch queryLock = new CountDownLatch(1);
-            Query query = entityRef.orderByChild("indexedString");
-            query.equalTo(fixedRandomStrings[nextIndex]);
-            ChildEventListener queryEventListener = new ChildEventListener() {
-                @Override
-                public void onChildAdded(DataSnapshot dataSnapshot, String s) {
-                    //noinspection unused
-                    IndexedStringEntity entity = dataSnapshot.getValue(IndexedStringEntity.class);
-                    queryLock.countDown();
-                }
-
-                @Override
-                public void onChildChanged(DataSnapshot dataSnapshot, String s) {
-
-                }
-
-                @Override
-                public void onChildRemoved(DataSnapshot dataSnapshot) {
-
-                }
-
-                @Override
-                public void onChildMoved(DataSnapshot dataSnapshot, String s) {
-
-                }
-
-                @Override
-                public void onCancelled(FirebaseError firebaseError) {
-
-                }
-            };
-            query.addChildEventListener(queryEventListener);
-            // wait until there are query results
-            queryLock.await();
-            query.removeEventListener(queryEventListener);
-        }
-        long time = System.currentTimeMillis() - start;
-        Log.d(TAG,
-                "Queried for " + QUERY_COUNT + " of " + BATCH_SIZE + " indexed entities in " + time
-                        + " ms.");
-
-        // delete all entities
-        entityRef.setValue(null);
-        Log.d(TAG, "Deleted all entities.");
-    }
-
-    public void testPerformance() throws Exception {
-        //noinspection PointlessBooleanExpression
-        if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
-            Log.d(TAG, "Performance tests are disabled.");
-            return;
-        }
-        Log.d(TAG, "---------------Start");
-
-        // set up node for entities
-        Firebase simpleEntityRef = rootFirebaseRef.child("simpleEntities");
-
-        for (int i = 0; i < RUNS; i++) {
-            runTests(simpleEntityRef, BATCH_SIZE);
-        }
-        Log.d(TAG, "---------------End");
-    }
-
-    protected void runTests(Firebase simpleEntityRef, final int entityCount) throws Exception {
-        Log.d(TAG, "---------------Start: " + entityCount);
-
-        long start, time;
-
-        final List<SimpleEntityNotNull> list = new ArrayList<>();
-        for (int i = 0; i < entityCount; i++) {
-            list.add(SimpleEntityNotNullHelper.createEntity((long) i));
-        }
-        System.gc();
-
-        runOneByOne(simpleEntityRef, list, entityCount / 10);
-
-        System.gc();
-        deleteAll(simpleEntityRef);
-
-        // there is no such thing as batch storing of items in Firebase
-        // so store the whole list of entities at once
-        // https://www.firebase.com/docs/android/guide/understanding-data.html#section-arrays-in-firebase
-
-        start = System.currentTimeMillis();
-        simpleEntityRef.setValue(list);
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Created (batch) " + list.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        simpleEntityRef.setValue(list);
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Updated (batch) " + list.size() + " entities in " + time + " ms");
-
-        final CountDownLatch loadLock = new CountDownLatch(1);
-        start = System.currentTimeMillis();
-        reloaded = new ArrayList<>(entityCount);
-        simpleEntityRef.addListenerForSingleValueEvent(new ValueEventListener() {
-            @Override
-            public void onDataChange(DataSnapshot dataSnapshot) {
-                for (DataSnapshot entitySnapshot : dataSnapshot.getChildren()) {
-                    SimpleEntityNotNull entity = entitySnapshot.getValue(SimpleEntityNotNull.class);
-                    reloaded.add(entity);
-                }
-                loadLock.countDown();
-            }
-
-            @Override
-            public void onCancelled(FirebaseError firebaseError) {
-
-            }
-        });
-        loadLock.await(5 * 60, TimeUnit.SECONDS);
-        time = System.currentTimeMillis() - start;
-        long childrenCount = reloaded.size();
-        Log.d(TAG, "Loaded (batch) " + childrenCount + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        for (int i = 0; i < childrenCount; i++) {
-            SimpleEntityNotNull entity = reloaded.get(i);
-            entity.getId();
-            entity.getSimpleBoolean();
-            entity.getSimpleByte();
-            entity.getSimpleInt();
-            entity.getSimpleLong();
-            entity.getSimpleFloat();
-            entity.getSimpleDouble();
-            entity.getSimpleString();
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Accessed properties of " + childrenCount + " entities in " + time + " ms");
-
-        deleteAll(simpleEntityRef);
-
-        System.gc();
-        Log.d(TAG, "---------------End: " + entityCount);
-    }
-
-    protected void runOneByOne(Firebase simpleEntityRef, List<SimpleEntityNotNull> list,
-            int count) {
-        long start;
-        long time;
-        start = System.currentTimeMillis();
-        for (int i = 0; i < count; i++) {
-            // use the entity id as its key
-            SimpleEntityNotNull entity = list.get(i);
-            simpleEntityRef.child(String.valueOf(entity.getId())).setValue(entity);
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Inserted (one-by-one) " + count + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        for (int i = 0; i < count; i++) {
-            // use the entity id as its key
-            SimpleEntityNotNull entity = list.get(i);
-            simpleEntityRef.child(String.valueOf(entity.getId())).setValue(entity);
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Updated (one-by-one) " + count + " entities in " + time + " ms");
-    }
-
-    protected void deleteAll(Firebase simpleEntityRef) throws InterruptedException {
-        long start = System.currentTimeMillis();
-        simpleEntityRef.setValue(null);
-        long time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Deleted all entities in " + time + " ms");
-    }
-}
diff --git a/PerformanceTests/Firebase/src/androidTest/java/de/greenrobot/performance/firebase/SimpleEntityNotNull.java b/PerformanceTests/Firebase/src/androidTest/java/de/greenrobot/performance/firebase/SimpleEntityNotNull.java
deleted file mode 100644
index 78c528fb..00000000
--- a/PerformanceTests/Firebase/src/androidTest/java/de/greenrobot/performance/firebase/SimpleEntityNotNull.java
+++ /dev/null
@@ -1,112 +0,0 @@
-package de.greenrobot.performance.firebase;
-
-import java.util.Arrays;
-import java.util.List;
-
-/**
- * Simple entity for performance testing.
- */
-public class SimpleEntityNotNull {
-
-    // Only JSON supported equivalent types are available for Firebase as it uses JSON to store data
-    // use int instead of short
-    // use List<Byte> instead of byte[]
-
-    private long id;
-
-    private boolean simpleBoolean;
-    private byte simpleByte;
-    private int simpleShort;
-    private int simpleInt;
-    private long simpleLong;
-    private float simpleFloat;
-    private double simpleDouble;
-    /** Not-null value. */
-    private String simpleString;
-    /** Not-null value. */
-    private List<Byte> simpleByteArray;
-
-    public SimpleEntityNotNull() {
-        // empty default constructor, necessary for Firebase to be able to deserialize
-    }
-
-    public long getId() {
-        return id;
-    }
-
-    public void setId(long id) {
-        this.id = id;
-    }
-
-    public boolean getSimpleBoolean() {
-        return simpleBoolean;
-    }
-
-    public void setSimpleBoolean(boolean simpleBoolean) {
-        this.simpleBoolean = simpleBoolean;
-    }
-
-    public byte getSimpleByte() {
-        return simpleByte;
-    }
-
-    public void setSimpleByte(byte simpleByte) {
-        this.simpleByte = simpleByte;
-    }
-
-    public int getSimpleShort() {
-        return simpleShort;
-    }
-
-    public void setSimpleShort(int simpleShort) {
-        this.simpleShort = simpleShort;
-    }
-
-    public int getSimpleInt() {
-        return simpleInt;
-    }
-
-    public void setSimpleInt(int simpleInt) {
-        this.simpleInt = simpleInt;
-    }
-
-    public long getSimpleLong() {
-        return simpleLong;
-    }
-
-    public void setSimpleLong(long simpleLong) {
-        this.simpleLong = simpleLong;
-    }
-
-    public float getSimpleFloat() {
-        return simpleFloat;
-    }
-
-    public void setSimpleFloat(float simpleFloat) {
-        this.simpleFloat = simpleFloat;
-    }
-
-    public double getSimpleDouble() {
-        return simpleDouble;
-    }
-
-    public void setSimpleDouble(double simpleDouble) {
-        this.simpleDouble = simpleDouble;
-    }
-
-    public String getSimpleString() {
-        return simpleString;
-    }
-
-    public void setSimpleString(String simpleString) {
-        this.simpleString = simpleString;
-    }
-
-    public Byte[] getSimpleByteArray() {
-        return simpleByteArray.toArray(new Byte[simpleByteArray.size()]);
-    }
-
-    public void setSimpleByteArray(Byte[] simpleByteArray) {
-        this.simpleByteArray = Arrays.asList(simpleByteArray);
-    }
-}
diff --git a/PerformanceTests/Firebase/src/androidTest/java/de/greenrobot/performance/firebase/SimpleEntityNotNullHelper.java b/PerformanceTests/Firebase/src/androidTest/java/de/greenrobot/performance/firebase/SimpleEntityNotNullHelper.java
deleted file mode 100644
index 64b98ab0..00000000
--- a/PerformanceTests/Firebase/src/androidTest/java/de/greenrobot/performance/firebase/SimpleEntityNotNullHelper.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package de.greenrobot.performance.firebase;
-
-public class SimpleEntityNotNullHelper {
-    protected static SimpleEntityNotNull createEntity(Long key) {
-        if (key == null) {
-            return null;
-        }
-        SimpleEntityNotNull entity = new SimpleEntityNotNull();
-        entity.setId(key);
-        entity.setSimpleBoolean(true);
-        entity.setSimpleByte(Byte.MAX_VALUE);
-        entity.setSimpleShort(Short.MAX_VALUE);
-        entity.setSimpleInt(Integer.MAX_VALUE);
-        entity.setSimpleLong(Long.MAX_VALUE);
-        entity.setSimpleFloat(Float.MAX_VALUE);
-        entity.setSimpleDouble(Double.MAX_VALUE);
-        entity.setSimpleString("greenrobot greenDAO");
-        Byte[] bytes = { 42, -17, 23, 0, 127, -128 };
-        entity.setSimpleByteArray(bytes);
-        return entity;
-    }
-}
diff --git a/PerformanceTests/Firebase/src/main/AndroidManifest.xml b/PerformanceTests/Firebase/src/main/AndroidManifest.xml
deleted file mode 100644
index 46db6d54..00000000
--- a/PerformanceTests/Firebase/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.performance.firebase">
-
-    <uses-permission android:name="android.permission.INTERNET" />
-
-    <application>
-        <!-- empty application tag -->
-    </application>
-</manifest>
diff --git a/PerformanceTests/OrmLite/build.gradle b/PerformanceTests/OrmLite/build.gradle
deleted file mode 100644
index c7591751..00000000
--- a/PerformanceTests/OrmLite/build.gradle
+++ /dev/null
@@ -1,31 +0,0 @@
-buildscript {
-    repositories {
-        mavenCentral()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
-    }
-}
-
-apply plugin: 'com.android.application'
-
-android {
-    buildToolsVersion rootProject.ext.buildToolsVersion
-    compileSdkVersion rootProject.ext.compileSdkVersion
-
-    defaultConfig {
-        applicationId "de.greenrobot.performance.ormlite"
-        minSdkVersion rootProject.ext.minSdkVersion
-        targetSdkVersion rootProject.ext.targetSdkVersion
-
-        testInstrumentationRunner "android.test.InstrumentationTestRunner"
-
-        buildConfigField "boolean", "RUN_PERFORMANCE_TESTS", "false"
-    }
-}
-
-dependencies {
-    androidTestCompile project(':PerformanceTests:Common')
-    androidTestCompile 'com.j256.ormlite:ormlite-android:4.48'
-}
diff --git a/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/DbHelper.java b/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/DbHelper.java
deleted file mode 100644
index f4842747..00000000
--- a/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/DbHelper.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package de.greenrobot.performance.ormlite;
-
-import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper;
-import com.j256.ormlite.support.ConnectionSource;
-import com.j256.ormlite.table.TableUtils;
-import java.sql.SQLException;
-
-/**
- * https://github.com/j256/ormlite-examples/blob/master/android/HelloAndroid/src/com/example/helloandroid/DatabaseHelper.java
- */
-public class DbHelper extends OrmLiteSqliteOpenHelper {
-
-    public DbHelper(Context context, String name) {
-        super(context, name, null, 1);
-    }
-
-    @Override
-    public void onCreate(SQLiteDatabase sqLiteDatabase, ConnectionSource connectionSource) {
-        try {
-            TableUtils.createTable(connectionSource, IndexedStringEntity.class);
-            TableUtils.createTable(connectionSource, SimpleEntityNotNull.class);
-            TableUtils.createTable(connectionSource, MinimalEntity.class);
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    @Override
-    public void onUpgrade(SQLiteDatabase db, ConnectionSource connectionSource, int oldVersion,
-            int newVersion) {
-        try {
-            TableUtils.dropTable(connectionSource, IndexedStringEntity.class, true);
-            TableUtils.dropTable(connectionSource, SimpleEntityNotNull.class, true);
-            TableUtils.dropTable(connectionSource, MinimalEntity.class, true);
-            // after we drop the old databases, we create the new ones
-            onCreate(db, connectionSource);
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-    }
-}
diff --git a/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/IndexedStringEntity.java b/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/IndexedStringEntity.java
deleted file mode 100644
index 39834469..00000000
--- a/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/IndexedStringEntity.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package de.greenrobot.performance.ormlite;
-
-import com.j256.ormlite.field.DatabaseField;
-import com.j256.ormlite.table.DatabaseTable;
-
-/**
- * Simple entity with a string property that is indexed.
- */
-@DatabaseTable(tableName = "INDEXED_STRING_ENTITY")
-public class IndexedStringEntity {
-
-    @DatabaseField(id = true)
-    public Long _id;
-
-    @DatabaseField(columnName="INDEXED_STRING", index = true)
-    public String indexedString;
-
-}
diff --git a/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/MinimalEntity.java b/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/MinimalEntity.java
deleted file mode 100644
index 60baa6c9..00000000
--- a/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/MinimalEntity.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package de.greenrobot.performance.ormlite;
-
-import com.j256.ormlite.field.DatabaseField;
-import com.j256.ormlite.table.DatabaseTable;
-
-@DatabaseTable(tableName = "MINIMAL_ENTITY")
-public class MinimalEntity {
-
-    @DatabaseField(generatedId = true, columnName="_id")
-    private Long id;
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-    
-}
diff --git a/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/PerformanceTestOrmLite.java b/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/PerformanceTestOrmLite.java
deleted file mode 100644
index f2098850..00000000
--- a/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/PerformanceTestOrmLite.java
+++ /dev/null
@@ -1,260 +0,0 @@
-package de.greenrobot.performance.ormlite;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-import android.util.Log;
-import com.j256.ormlite.dao.Dao;
-import de.greenrobot.performance.StringGenerator;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.Callable;
-
-/**
- * http://ormlite.com/sqlite_java_android_orm.shtml https://github.com/j256/ormlite-examples
- */
-public class PerformanceTestOrmLite extends ApplicationTestCase<Application> {
-
-    private static final String TAG = "PerfTestOrmLite";
-
-    private static final int BATCH_SIZE = 10000;
-    private static final int QUERY_COUNT = 1000;
-    private static final int RUNS = 8;
-
-    private boolean inMemory;
-    private DbHelper dbHelper;
-
-    public PerformanceTestOrmLite() {
-        super(Application.class);
-        inMemory = false;
-    }
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        createApplication();
-        setUpOrmLite();
-    }
-
-    protected void setUpOrmLite() {
-        String name;
-        if (inMemory) {
-            name = null;
-        } else {
-            name = "test-db";
-            getApplication().deleteDatabase(name);
-        }
-        dbHelper = new DbHelper(getApplication(), name);
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        if (!inMemory) {
-            getApplication().deleteDatabase("test-db");
-        }
-
-        super.tearDown();
-    }
-
-    public void testIndexedStringEntityQuery() throws Exception {
-        //noinspection PointlessBooleanExpression
-        if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
-            Log.d(TAG, "Performance tests are disabled.");
-            return;
-        }
-        Log.d(TAG, "--------Indexed Queries: Start");
-
-        // set up data access
-        final Dao<IndexedStringEntity, Long> dao = dbHelper.getDao(IndexedStringEntity.class);
-        Log.d(TAG, "Set up data access.");
-
-        for (int i = 0; i < RUNS; i++) {
-            Log.d(TAG, "----Run " + (i + 1) + " of " + RUNS);
-            doIndexedStringEntityQuery(dao);
-        }
-
-        Log.d(TAG, "--------Indexed Queries: End");
-    }
-
-    public void doIndexedStringEntityQuery(final Dao<IndexedStringEntity, Long> dao)
-            throws Exception {
-        // create entities
-        final List<IndexedStringEntity> entities = new ArrayList<>(BATCH_SIZE);
-        String[] fixedRandomStrings = StringGenerator.createFixedRandomStrings(BATCH_SIZE);
-        for (int i = 0; i < BATCH_SIZE; i++) {
-            IndexedStringEntity entity = new IndexedStringEntity();
-            entity._id = (long) i;
-            entity.indexedString = fixedRandomStrings[i];
-            entities.add(entity);
-        }
-        Log.d(TAG, "Built entities.");
-
-        // insert entities
-        dao.callBatchTasks(new Callable<Void>() {
-            @Override
-            public Void call() throws Exception {
-                for (IndexedStringEntity entity : entities) {
-                    dao.create(entity);
-                }
-                return null;
-            }
-        });
-        Log.d(TAG, "Inserted entities.");
-
-        // query for entities by indexed string at random
-        int[] randomIndices = StringGenerator.getFixedRandomIndices(QUERY_COUNT, BATCH_SIZE - 1);
-
-        long start = System.currentTimeMillis();
-        for (int i = 0; i < QUERY_COUNT; i++) {
-            int nextIndex = randomIndices[i];
-            //noinspection unused
-            List<IndexedStringEntity> query = dao.queryBuilder()
-                    .where()
-                    .eq("INDEXED_STRING", fixedRandomStrings[nextIndex])
-                    .query();
-            // ORMLite already builds all entities when executing the query, so move on
-        }
-        long time = System.currentTimeMillis() - start;
-        Log.d(TAG,
-                "Queried for " + QUERY_COUNT + " of " + BATCH_SIZE + " indexed entities in " + time
-                        + " ms.");
-
-        // delete all entities
-        dbHelper.getWritableDatabase().execSQL("DELETE FROM INDEXED_STRING_ENTITY");
-        Log.d(TAG, "Deleted all entities.");
-    }
-
-    public void testPerformance() throws Exception {
-        //noinspection PointlessBooleanExpression
-        if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
-            Log.d(TAG, "Performance tests are disabled.");
-            return;
-        }
-        Log.d(TAG, "---------------Start");
-
-        Dao<SimpleEntityNotNull, Long> dao = dbHelper.getDao(SimpleEntityNotNull.class);
-
-        for (int i = 0; i < RUNS; i++) {
-            runTests(dao, BATCH_SIZE);
-        }
-        Log.d(TAG, "---------------End");
-    }
-
-    protected void runTests(final Dao<SimpleEntityNotNull, Long> dao, int entityCount)
-            throws Exception {
-        Log.d(TAG, "---------------Start: " + entityCount);
-
-        long start, time;
-
-        final List<SimpleEntityNotNull> list = new ArrayList<>();
-        for (int i = 0; i < entityCount; i++) {
-            list.add(SimpleEntityNotNullHelper.createEntity((long) i));
-        }
-        System.gc();
-
-        runOneByOne(dao, list, entityCount / 10);
-
-        System.gc();
-        deleteAll();
-
-        start = System.currentTimeMillis();
-        dao.callBatchTasks(new Callable<Void>() {
-
-            @Override
-            public Void call() throws Exception {
-                for (SimpleEntityNotNull entity : list) {
-                    dao.create(entity);
-                }
-                return null;
-            }
-        });
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Created (batch) " + list.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        dao.callBatchTasks(new Callable<Void>() {
-
-            @Override
-            public Void call() throws Exception {
-                for (SimpleEntityNotNull entity : list) {
-                    dao.update(entity);
-                }
-                return null;
-            }
-        });
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Updated (batch) " + list.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        List<SimpleEntityNotNull> reloaded = dao.queryForAll();
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Loaded (batch) " + reloaded.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        for (int i = 0; i < reloaded.size(); i++) {
-            SimpleEntityNotNull entity = reloaded.get(i);
-            entity.getId();
-            entity.getSimpleBoolean();
-            entity.getSimpleByte();
-            entity.getSimpleShort();
-            entity.getSimpleInt();
-            entity.getSimpleLong();
-            entity.getSimpleFloat();
-            entity.getSimpleDouble();
-            entity.getSimpleString();
-            entity.getSimpleByteArray();
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Accessed properties of " + reloaded.size() + " entities in " + time + " ms");
-
-        deleteAll();
-
-        System.gc();
-        Log.d(TAG, "---------------End: " + entityCount);
-    }
-
-    protected void runOneByOne(Dao<SimpleEntityNotNull, Long> dao, List<SimpleEntityNotNull> list,
-            int count) throws SQLException {
-        long start;
-        long time;
-        start = System.currentTimeMillis();
-        for (int i = 0; i < count; i++) {
-            dao.create(list.get(i));
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Inserted (one-by-one) " + count + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        for (int i = 0; i < count; i++) {
-            dao.update(list.get(i));
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Updated (one-by-one) " + count + " entities in " + time + " ms");
-    }
-
-    protected void deleteAll() {
-        long start = System.currentTimeMillis();
-        dbHelper.getWritableDatabase().execSQL("DELETE FROM SIMPLE_ENTITY_NOT_NULL");
-        long time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Deleted all entities in " + time + " ms");
-    }
-
-    public void testSemantics() {
-        try {
-            Dao<MinimalEntity, Long> minimalDao = dbHelper.getDao(MinimalEntity.class);
-            MinimalEntity data = new MinimalEntity();
-            minimalDao.create(data);
-            // ORMLite does update PK after insert if set to generatedId
-            assertNotNull(data.getId());
-            MinimalEntity data2 = minimalDao.queryForAll().get(0);
-            MinimalEntity data3 = minimalDao.queryForId(data2.getId());
-            // ORMLite does not provide object equality
-            assertNotSame(data, data2);
-            assertNotSame(data2, data3);
-            assertEquals(data2.getId(), data3.getId());
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-    }
-}
diff --git a/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/SimpleEntityNotNull.java b/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/SimpleEntityNotNull.java
deleted file mode 100644
index 86ab776f..00000000
--- a/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/SimpleEntityNotNull.java
+++ /dev/null
@@ -1,116 +0,0 @@
-package de.greenrobot.performance.ormlite;
-
-import com.j256.ormlite.field.DataType;
-import com.j256.ormlite.field.DatabaseField;
-import com.j256.ormlite.table.DatabaseTable;
-
-
-/** 
- * Entity mapped to table SIMPLE_ENTITY_NOT_NULL (schema version 1).
-*/
-@DatabaseTable(tableName = "SIMPLE_ENTITY_NOT_NULL")
-public class SimpleEntityNotNull {
-
-    @DatabaseField(id = true, columnName="_id")
-    private long id;
-    
-    @DatabaseField(columnName="SIMPLE_BOOLEAN")
-    private boolean simpleBoolean;
-    @DatabaseField(columnName="SIMPLE_BYTE")
-    private byte simpleByte;
-    @DatabaseField(columnName="SIMPLE_SHORT")
-    private short simpleShort;
-    @DatabaseField(columnName="SIMPLE_INT")
-    private int simpleInt;
-    @DatabaseField(columnName="SIMPLE_LONG")
-    private long simpleLong;
-    @DatabaseField(columnName="SIMPLE_FLOAT")
-    private float simpleFloat;
-    @DatabaseField(columnName="SIMPLE_DOUBLE")
-    private double simpleDouble;
-    @DatabaseField(columnName="SIMPLE_STRING")
-    private String simpleString;
-    @DatabaseField(dataType=DataType.BYTE_ARRAY,columnName="SIMPLE_BYTE_ARRAY")
-    private byte[] simpleByteArray; 
-    
-    public long getId() {
-        return id;
-    } 
-
-    public void setId(long id) {
-        this.id = id;
-    } 
-
-    public boolean getSimpleBoolean() {
-        return simpleBoolean;
-    } 
-
-    public void setSimpleBoolean(boolean simpleBoolean) {
-        this.simpleBoolean = simpleBoolean;
-    } 
-
-    public byte getSimpleByte() {
-        return simpleByte;
-    } 
-
-    public void setSimpleByte(byte simpleByte) {
-        this.simpleByte = simpleByte;
-    } 
-
-    public short getSimpleShort() {
-        return simpleShort;
-    } 
-
-    public void setSimpleShort(short simpleShort) {
-        this.simpleShort = simpleShort;
-    } 
-
-    public int getSimpleInt() {
-        return simpleInt;
-    } 
-
-    public void setSimpleInt(int simpleInt) {
-        this.simpleInt = simpleInt;
-    } 
-
-    public long getSimpleLong() {
-        return simpleLong;
-    } 
-
-    public void setSimpleLong(long simpleLong) {
-        this.simpleLong = simpleLong;
-    } 
-
-    public float getSimpleFloat() {
-        return simpleFloat;
-    } 
-
-    public void setSimpleFloat(float simpleFloat) {
-        this.simpleFloat = simpleFloat;
-    } 
-
-    public double getSimpleDouble() {
-        return simpleDouble;
-    } 
-
-    public void setSimpleDouble(double simpleDouble) {
-        this.simpleDouble = simpleDouble;
-    } 
-
-    public String getSimpleString() {
-        return simpleString;
-    } 
-
-    public void setSimpleString(String simpleString) {
-        this.simpleString = simpleString;
-    } 
-
-    public byte[] getSimpleByteArray() {
-        return simpleByteArray;
-    } 
-
-    public void setSimpleByteArray(byte[] simpleByteArray) {
-        this.simpleByteArray = simpleByteArray;
-    } 
-
-}
diff --git a/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/SimpleEntityNotNullHelper.java b/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/SimpleEntityNotNullHelper.java
deleted file mode 100644
index 59078355..00000000
--- a/PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/SimpleEntityNotNullHelper.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package de.greenrobot.performance.ormlite;
-
-public class SimpleEntityNotNullHelper {
-    protected static SimpleEntityNotNull createEntity(Long key) {
-        if (key == null) {
-            return null;
-        }
-        SimpleEntityNotNull entity = new SimpleEntityNotNull();
-        entity.setId(key);
-        entity.setSimpleBoolean(true);
-        entity.setSimpleByte(Byte.MAX_VALUE);
-        entity.setSimpleShort(Short.MAX_VALUE);
-        entity.setSimpleInt(Integer.MAX_VALUE);
-        entity.setSimpleLong(Long.MAX_VALUE);
-        entity.setSimpleFloat(Float.MAX_VALUE);
-        entity.setSimpleDouble(Double.MAX_VALUE);
-        entity.setSimpleString("greenrobot greenDAO");
-        byte[] bytes = { 42, -17, 23, 0, 127, -128 };
-        entity.setSimpleByteArray(bytes);
-        return entity;
-    }
-}
diff --git a/PerformanceTests/OrmLite/src/main/AndroidManifest.xml b/PerformanceTests/OrmLite/src/main/AndroidManifest.xml
deleted file mode 100644
index 30a7f9a5..00000000
--- a/PerformanceTests/OrmLite/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.performance.ormlite">
-
-    <application>
-        <!-- empty application tag -->
-    </application>
-</manifest>
\ No newline at end of file
diff --git a/PerformanceTests/Parse/build.gradle b/PerformanceTests/Parse/build.gradle
deleted file mode 100644
index 8ffc8e4c..00000000
--- a/PerformanceTests/Parse/build.gradle
+++ /dev/null
@@ -1,36 +0,0 @@
-buildscript {
-    repositories {
-        jcenter()
-        maven { url 'https://maven.parse.com/repo' }
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
-        classpath 'com.parse.tools:gradle:1.1'
-    }
-}
-
-apply plugin: 'com.android.application'
-apply plugin: 'com.parse'
-
-android {
-    buildToolsVersion rootProject.ext.buildToolsVersion
-    compileSdkVersion rootProject.ext.compileSdkVersion
-
-    defaultConfig {
-        applicationId 'de.greenrobot.performance.parse'
-        minSdkVersion rootProject.ext.minSdkVersion
-        targetSdkVersion rootProject.ext.targetSdkVersion
-
-        testInstrumentationRunner 'android.test.InstrumentationTestRunner'
-
-        buildConfigField "boolean", "RUN_PERFORMANCE_TESTS", "false"
-    }
-}
-
-dependencies {
-    androidTestCompile project(':PerformanceTests:Common')
-    compile 'com.parse.bolts:bolts-android:1.2.1'
-    compile 'com.parse:parse-android:1.10.2'
-}
-
diff --git a/PerformanceTests/Parse/src/androidTest/java/de/greenrobot/performance/parse/IndexedStringEntity.java b/PerformanceTests/Parse/src/androidTest/java/de/greenrobot/performance/parse/IndexedStringEntity.java
deleted file mode 100644
index 48f990fd..00000000
--- a/PerformanceTests/Parse/src/androidTest/java/de/greenrobot/performance/parse/IndexedStringEntity.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package de.greenrobot.performance.parse;
-
-import com.parse.ParseClassName;
-import com.parse.ParseObject;
-
-/**
- * Simple entity with a string property.
- */
-@ParseClassName("IndexedStringEntity")
-public class IndexedStringEntity extends ParseObject {
-
-    // Parse does not seem to support manual definition of indexes, so NOT actually indexed
-    public static final String INDEXED_STRING = "indexedString";
-
-    public String getIndexedString() {
-        return getString(INDEXED_STRING);
-    }
-
-    public void setIndexedString(String value) {
-        put(INDEXED_STRING, value);
-    }
-
-}
diff --git a/PerformanceTests/Parse/src/androidTest/java/de/greenrobot/performance/parse/PerformanceTestParse.java b/PerformanceTests/Parse/src/androidTest/java/de/greenrobot/performance/parse/PerformanceTestParse.java
deleted file mode 100644
index 8b876a15..00000000
--- a/PerformanceTests/Parse/src/androidTest/java/de/greenrobot/performance/parse/PerformanceTestParse.java
+++ /dev/null
@@ -1,239 +0,0 @@
-package de.greenrobot.performance.parse;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-import android.util.Log;
-import com.parse.Parse;
-import com.parse.ParseACL;
-import com.parse.ParseException;
-import com.parse.ParseObject;
-import com.parse.ParseQuery;
-import com.parse.ParseUser;
-import de.greenrobot.performance.StringGenerator;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * https://parse.com/docs/android/guide
- */
-public class PerformanceTestParse extends ApplicationTestCase<Application> {
-
-    private static final String TAG = "PerfTestParse";
-
-    // reduced batch size due to memory leak when pinning (of bolts.Task?)
-    private static final int BATCH_SIZE = 1000;
-    // reduced query count due to slow performance
-    private static final int QUERY_COUNT = 100;
-    private static final int RUNS = 8;
-
-    public PerformanceTestParse() {
-        super(Application.class);
-    }
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        createApplication();
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        getContext().deleteDatabase("ParseOfflineStore");
-
-        super.tearDown();
-    }
-
-    private void setupParse() {
-        // Enable Local Datastore.
-        Parse.enableLocalDatastore(getContext());
-
-        // Add your initialization code here
-        Parse.initialize(getContext(), "X9MEmCvnlX9oGRLmVhunkatw33jlF7wMPZZFw8lZ",
-                "FKI8s0UnK6nT6PdGVO2XgKlcsPZnGJlI8qoPpUKa");
-
-        ParseUser.enableAutomaticUser();
-        ParseACL defaultACL = new ParseACL();
-        // Optionally enable public read access.
-        // defaultACL.setPublicReadAccess(true);
-        ParseACL.setDefaultACL(defaultACL, true);
-    }
-
-    public void testIndexedStringEntityQuery() throws ParseException {
-        // According to the documentation, Parse does NOT support defining indexes manually
-        // or for the local datastore.
-        // We still are going to determine query performance WITHOUT AN INDEX.
-
-        //noinspection PointlessBooleanExpression
-        if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
-            Log.d(TAG, "Performance tests are disabled.");
-            return;
-        }
-        Log.d(TAG, "--------Indexed Queries: Start");
-
-        // set up parse inside of test
-        // setting it up in setUp() breaks Parse, as it keeps its init state between tests
-        // in hidden ParsePlugins
-        ParseObject.registerSubclass(IndexedStringEntity.class);
-        setupParse();
-
-        for (int i = 0; i < RUNS; i++) {
-            Log.d(TAG, "----Run " + (i + 1) + " of " + RUNS);
-            doIndexedStringEntityQuery();
-        }
-
-        Log.d(TAG, "--------Indexed Queries: End");
-    }
-
-    private void doIndexedStringEntityQuery() throws ParseException {
-        // create entities
-        List<IndexedStringEntity> entities = new ArrayList<>(BATCH_SIZE);
-        String[] fixedRandomStrings = StringGenerator.createFixedRandomStrings(BATCH_SIZE);
-        for (int i = 0; i < BATCH_SIZE; i++) {
-            IndexedStringEntity entity = new IndexedStringEntity();
-            entity.setIndexedString(fixedRandomStrings[i]);
-            entities.add(entity);
-        }
-        Log.d(TAG, "Built entities.");
-
-        // insert entities
-        ParseObject.pinAll(entities);
-        Log.d(TAG, "Inserted entities.");
-
-        // query for entities by indexed string at random
-        int[] randomIndices = StringGenerator.getFixedRandomIndices(QUERY_COUNT, BATCH_SIZE - 1);
-
-        long start = System.currentTimeMillis();
-        for (int i = 0; i < QUERY_COUNT; i++) {
-            int nextIndex = randomIndices[i];
-
-            ParseQuery<IndexedStringEntity> query = ParseQuery.getQuery(IndexedStringEntity.class);
-            query.whereEqualTo(IndexedStringEntity.INDEXED_STRING, fixedRandomStrings[nextIndex]);
-            //noinspection unused
-            List<IndexedStringEntity> result = query.find();
-        }
-        long time = System.currentTimeMillis() - start;
-        Log.d(TAG,
-                "Queried for " + QUERY_COUNT + " of " + BATCH_SIZE + " UNINDEXED entities in "
-                        + time + " ms.");
-
-        // delete all entities
-        ParseObject.unpinAll();
-        Log.d(TAG, "Deleted all entities.");
-    }
-
-    public void testPerformance() throws Exception {
-        //noinspection PointlessBooleanExpression
-        if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
-            Log.d(TAG, "Performance tests are disabled.");
-            return;
-        }
-        Log.d(TAG, "---------------Start");
-
-        // set up parse inside of test
-        // setting it up in setUp() breaks Parse, as it keeps its init state between tests
-        // in hidden ParsePlugins
-        setupParse();
-
-        for (int i = 0; i < RUNS; i++) {
-            runTests(BATCH_SIZE);
-        }
-
-        Log.d(TAG, "---------------End");
-    }
-
-    private void runTests(int entityCount) throws ParseException {
-        Log.d(TAG, "---------------Start: " + entityCount);
-
-        long start, time;
-
-        List<ParseObject> list = new ArrayList<>(entityCount);
-        for (int i = 0; i < entityCount; i++) {
-            list.add(createEntity(i));
-        }
-        System.gc();
-
-        runOneByOne(list, entityCount / 10);
-
-        System.gc();
-        deleteAll();
-
-        start = System.currentTimeMillis();
-        ParseObject.pinAll(list);
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Created (batch) " + list.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        ParseObject.pinAll(list);
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Updated (batch) " + list.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        List<ParseObject> reloaded = ParseQuery.getQuery("SimpleEntity")
-                .fromLocalDatastore()
-                .find();
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Loaded (batch) " + reloaded.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        for (int i = 0; i < reloaded.size(); i++) {
-            ParseObject entity = reloaded.get(i);
-            entity.getBoolean("simpleBoolean");
-            entity.getInt("simpleByte");
-            entity.getInt("simpleShort");
-            entity.getInt("simpleInt");
-            entity.getLong("simpleLong");
-            entity.getDouble("simpleFloat");
-            entity.getDouble("simpleDouble");
-            entity.getString("simpleString");
-            entity.getBytes("simpleByteArray");
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Accessed properties of " + reloaded.size() + " entities in " + time + " ms");
-
-        deleteAll();
-
-        System.gc();
-        Log.d(TAG, "---------------End: " + entityCount);
-    }
-
-    private void runOneByOne(List<ParseObject> list, int count) throws ParseException {
-        long start;
-        long time;
-        start = System.currentTimeMillis();
-        for (int i = 0; i < count; i++) {
-            list.get(i).pin();
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Inserted (one-by-one) " + count + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        for (int i = 0; i < count; i++) {
-            list.get(i).pin();
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Updated (one-by-one) " + count + " entities in " + time + " ms");
-    }
-
-    private void deleteAll() throws ParseException {
-        long start = System.currentTimeMillis();
-        ParseObject.unpinAll();
-        long time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Deleted all entities in " + time + " ms");
-    }
-
-    private ParseObject createEntity(int nr) {
-        ParseObject entity = new ParseObject("SimpleEntity");
-        entity.put("simpleBoolean", true);
-        entity.put("simpleByte", nr & 0xff);
-        entity.put("simpleShort", nr & 0xffff);
-        entity.put("simpleInt", nr);
-        entity.put("simpleLong", Long.MAX_VALUE - nr);
-        entity.put("simpleFloat", (float) (Math.PI * nr));
-        entity.put("simpleDouble", Math.E * nr);
-        entity.put("simpleString", "greenrobot greenDAO");
-        byte[] bytes = { 42, -17, 23, 0, 127, -128 };
-        entity.put("simpleByteArray", bytes);
-        return entity;
-    }
-}
diff --git a/PerformanceTests/Parse/src/main/AndroidManifest.xml b/PerformanceTests/Parse/src/main/AndroidManifest.xml
deleted file mode 100644
index 92ba7db1..00000000
--- a/PerformanceTests/Parse/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.performance.parse">
-
-    <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
-
-    <application>
-        <!-- empty application tag -->
-    </application>
-</manifest>
diff --git a/PerformanceTests/Realm/build.gradle b/PerformanceTests/Realm/build.gradle
deleted file mode 100644
index 071e7910..00000000
--- a/PerformanceTests/Realm/build.gradle
+++ /dev/null
@@ -1,31 +0,0 @@
-buildscript {
-    repositories {
-        jcenter()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
-    }
-}
-
-apply plugin: 'com.android.application'
-
-android {
-    buildToolsVersion rootProject.ext.buildToolsVersion
-    compileSdkVersion rootProject.ext.compileSdkVersion
-
-    defaultConfig {
-        applicationId 'de.greenrobot.performance.realm'
-        minSdkVersion rootProject.ext.minSdkVersion
-        targetSdkVersion rootProject.ext.targetSdkVersion
-
-        testInstrumentationRunner 'android.test.InstrumentationTestRunner'
-
-        buildConfigField "boolean", "RUN_PERFORMANCE_TESTS", "false"
-    }
-}
-
-dependencies {
-    androidTestCompile project(':PerformanceTests:Common')
-    androidTestCompile 'io.realm:realm-android:0.82.2'
-}
diff --git a/PerformanceTests/Realm/src/androidTest/java/de/greenrobot/performance/realm/IndexedStringEntity.java b/PerformanceTests/Realm/src/androidTest/java/de/greenrobot/performance/realm/IndexedStringEntity.java
deleted file mode 100644
index 3626e997..00000000
--- a/PerformanceTests/Realm/src/androidTest/java/de/greenrobot/performance/realm/IndexedStringEntity.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package de.greenrobot.performance.realm;
-
-import io.realm.RealmObject;
-import io.realm.annotations.Index;
-import io.realm.annotations.PrimaryKey;
-
-/**
- * Simple entity with a string property that is indexed.
- */
-public class IndexedStringEntity extends RealmObject {
-
-    @PrimaryKey
-    private long id;
-
-    @Index
-    private String indexedString;
-
-    // Be aware that the getters and setters will be overridden by the generated proxy class
-    // used in the back by RealmObjects, so any custom logic you add to the getters & setters
-    // will not actually be executed
-    public long getId() {
-        return id;
-    }
-
-    public void setId(long id) {
-        this.id = id;
-    }
-
-    public String getIndexedString() {
-        return indexedString;
-    }
-
-    public void setIndexedString(String indexedString) {
-        this.indexedString = indexedString;
-    }
-}
diff --git a/PerformanceTests/Realm/src/androidTest/java/de/greenrobot/performance/realm/PerformanceTestRealm.java b/PerformanceTests/Realm/src/androidTest/java/de/greenrobot/performance/realm/PerformanceTestRealm.java
deleted file mode 100644
index dcc521f2..00000000
--- a/PerformanceTests/Realm/src/androidTest/java/de/greenrobot/performance/realm/PerformanceTestRealm.java
+++ /dev/null
@@ -1,236 +0,0 @@
-package de.greenrobot.performance.realm;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-import android.util.Log;
-import de.greenrobot.performance.StringGenerator;
-import io.realm.Realm;
-import io.realm.RealmConfiguration;
-import io.realm.RealmQuery;
-import io.realm.RealmResults;
-import java.io.File;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * https://realm.io/docs/java/latest/ https://github.com/realm/realm-java/
- */
-public class PerformanceTestRealm extends ApplicationTestCase<Application> {
-
-    private static final String TAG = "PerfTestRealm";
-
-    private static final int BATCH_SIZE = 10000;
-    private static final int QUERY_COUNT = 1000;
-    private static final int RUNS = 8;
-
-    private Realm realm;
-    private boolean inMemory;
-
-    public PerformanceTestRealm() {
-        super(Application.class);
-        inMemory = false;
-    }
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        createApplication();
-        createRealm();
-    }
-
-    protected void createRealm() {
-        RealmConfiguration.Builder configBuilder = new RealmConfiguration.Builder(getContext());
-        if (inMemory) {
-            configBuilder.name("inmemory.realm").inMemory();
-        } else {
-            configBuilder.name("ondisk.realm");
-        }
-        realm = Realm.getInstance(configBuilder.build());
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        if (realm != null) {
-            String path = realm.getPath();
-
-            realm.close();
-
-            if (!inMemory) {
-                //noinspection ResultOfMethodCallIgnored
-                new File(path).delete();
-            }
-        }
-
-        super.tearDown();
-    }
-
-    public void testIndexedStringEntityQuery() {
-        //noinspection PointlessBooleanExpression
-        if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
-            Log.d(TAG, "Performance tests are disabled.");
-            return;
-        }
-        Log.d(TAG, "--------Indexed Queries: Start");
-
-        for (int i = 0; i < RUNS; i++) {
-            Log.d(TAG, "----Run " + (i + 1) + " of " + RUNS);
-            doIndexedStringEntityQuery();
-        }
-
-        Log.d(TAG, "--------Indexed Queries: End");
-    }
-
-    public void doIndexedStringEntityQuery() {
-        // create entities
-        List<IndexedStringEntity> entities = new ArrayList<>(BATCH_SIZE);
-        String[] fixedRandomStrings = StringGenerator.createFixedRandomStrings(BATCH_SIZE);
-        for (int i = 0; i < BATCH_SIZE; i++) {
-            IndexedStringEntity entity = new IndexedStringEntity();
-            entity.setId((long) i);
-            entity.setIndexedString(fixedRandomStrings[i]);
-            entities.add(entity);
-        }
-        Log.d(TAG, "Built entities.");
-
-        // insert entities
-        realm.beginTransaction();
-        realm.copyToRealm(entities);
-        realm.commitTransaction();
-        Log.d(TAG, "Inserted entities.");
-
-        // query for entities by indexed string at random
-        int[] randomIndices = StringGenerator.getFixedRandomIndices(QUERY_COUNT, BATCH_SIZE - 1);
-
-        long start = System.currentTimeMillis();
-        for (int i = 0; i < QUERY_COUNT; i++) {
-            int nextIndex = randomIndices[i];
-            RealmQuery<IndexedStringEntity> query = realm.where(IndexedStringEntity.class);
-            query.equalTo("indexedString", fixedRandomStrings[nextIndex]);
-            RealmResults<IndexedStringEntity> result = query.findAll();
-            for (int j = 0, resultSize = result.size(); j < resultSize; j++) {
-                // actually get each entity so its object is reconstructed, same with properties
-                IndexedStringEntity entity = result.get(j);
-                entity.getId();
-                entity.getIndexedString();
-            }
-        }
-        long time = System.currentTimeMillis() - start;
-        Log.d(TAG,
-                "Queried for " + QUERY_COUNT + " of " + BATCH_SIZE + " indexed entities in " + time
-                        + " ms.");
-
-        // delete all entities
-        realm.beginTransaction();
-        realm.allObjects(IndexedStringEntity.class).clear();
-        realm.commitTransaction();
-        Log.d(TAG, "Deleted all entities.");
-    }
-
-    public void testPerformance() throws Exception {
-        //noinspection PointlessBooleanExpression
-        if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
-            Log.d(TAG, "Performance tests are disabled.");
-            return;
-        }
-        Log.d(TAG, "---------------Start");
-
-        for (int i = 0; i < RUNS; i++) {
-            runTests(BATCH_SIZE);
-        }
-
-        Log.d(TAG, "---------------End");
-    }
-
-    protected void runTests(int entityCount) throws Exception {
-        Log.d(TAG, "---------------Start: " + entityCount);
-
-        long start, time;
-
-        final List<SimpleEntityNotNull> list = new ArrayList<>();
-        for (int i = 0; i < entityCount; i++) {
-            list.add(SimpleEntityNotNullHelper.createEntity((long) i));
-        }
-        System.gc();
-
-        runOneByOne(list, entityCount / 10);
-
-        System.gc();
-        deleteAll();
-
-        start = System.currentTimeMillis();
-        realm.beginTransaction();
-        realm.copyToRealm(list);
-        realm.commitTransaction();
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Created (batch) " + list.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        realm.beginTransaction();
-        realm.copyToRealmOrUpdate(list);
-        realm.commitTransaction();
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Updated (batch) " + list.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        RealmResults<SimpleEntityNotNull> reloaded = realm.allObjects(SimpleEntityNotNull.class);
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Loaded (batch) " + reloaded.size() + " entities in " + time + " ms");
-
-        // as Realm is not actually loading data, just referencing it,
-        // at least make sure we access every property to force it being loaded
-        start = System.currentTimeMillis();
-        for (int i = 0; i < reloaded.size(); i++) {
-            SimpleEntityNotNull entity = reloaded.get(i);
-            entity.getId();
-            entity.getSimpleBoolean();
-            entity.getSimpleByte();
-            entity.getSimpleShort();
-            entity.getSimpleInt();
-            entity.getSimpleLong();
-            entity.getSimpleFloat();
-            entity.getSimpleDouble();
-            entity.getSimpleString();
-            entity.getSimpleByteArray();
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Accessed properties of " + reloaded.size() + " entities in " + time + " ms");
-
-        deleteAll();
-
-        System.gc();
-        Log.d(TAG, "---------------End: " + entityCount);
-    }
-
-    protected void runOneByOne(List<SimpleEntityNotNull> list, int count) throws SQLException {
-        long start;
-        long time;
-        start = System.currentTimeMillis();
-        for (int i = 0; i < count; i++) {
-            realm.beginTransaction();
-            realm.copyToRealm(list.get(i));
-            realm.commitTransaction();
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Inserted (one-by-one) " + count + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        for (int i = 0; i < count; i++) {
-            realm.beginTransaction();
-            realm.copyToRealmOrUpdate(list.get(i));
-            realm.commitTransaction();
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Updated (one-by-one) " + count + " entities in " + time + " ms");
-    }
-
-    protected void deleteAll() {
-        long start = System.currentTimeMillis();
-        realm.beginTransaction();
-        realm.allObjects(SimpleEntityNotNull.class).clear();
-        realm.commitTransaction();
-        long time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Deleted all entities in " + time + " ms");
-    }
-}
diff --git a/PerformanceTests/Realm/src/androidTest/java/de/greenrobot/performance/realm/SimpleEntityNotNull.java b/PerformanceTests/Realm/src/androidTest/java/de/greenrobot/performance/realm/SimpleEntityNotNull.java
deleted file mode 100644
index 02994441..00000000
--- a/PerformanceTests/Realm/src/androidTest/java/de/greenrobot/performance/realm/SimpleEntityNotNull.java
+++ /dev/null
@@ -1,108 +0,0 @@
-package de.greenrobot.performance.realm;
-
-import io.realm.RealmObject;
-import io.realm.annotations.PrimaryKey;
-
-/**
- * Simple entity for performance testing.
- */
-public class SimpleEntityNotNull extends RealmObject {
-
-    @PrimaryKey
-    private long id;
-
-    private boolean simpleBoolean;
-    private byte simpleByte;
-    private short simpleShort;
-    private int simpleInt;
-    private long simpleLong;
-    private float simpleFloat;
-    private double simpleDouble;
-    /** Not-null value. */
-    private String simpleString;
-    /** Not-null value. */
-    private byte[] simpleByteArray;
-
-    // Be aware that the getters and setters will be overridden by the generated proxy class
-    // used in the back by RealmObjects, so any custom logic you add to the getters & setters
-    // will not actually be executed
-    public long getId() {
-        return id;
-    }
-
-    public void setId(long id) {
-        this.id = id;
-    }
-
-    public boolean getSimpleBoolean() {
-        return simpleBoolean;
-    }
-
-    public void setSimpleBoolean(boolean simpleBoolean) {
-        this.simpleBoolean = simpleBoolean;
-    }
-
-    public byte getSimpleByte() {
-        return simpleByte;
-    }
-
-    public void setSimpleByte(byte simpleByte) {
-        this.simpleByte = simpleByte;
-    }
-
-    public short getSimpleShort() {
-        return simpleShort;
-    }
-
-    public void setSimpleShort(short simpleShort) {
-        this.simpleShort = simpleShort;
-    }
-
-    public int getSimpleInt() {
-        return simpleInt;
-    }
-
-    public void setSimpleInt(int simpleInt) {
-        this.simpleInt = simpleInt;
-    }
-
-    public long getSimpleLong() {
-        return simpleLong;
-    }
-
-    public void setSimpleLong(long simpleLong) {
-        this.simpleLong = simpleLong;
-    }
-
-    public float getSimpleFloat() {
-        return simpleFloat;
-    }
-
-    public void setSimpleFloat(float simpleFloat) {
-        this.simpleFloat = simpleFloat;
-    }
-
-    public double getSimpleDouble() {
-        return simpleDouble;
-    }
-
-    public void setSimpleDouble(double simpleDouble) {
-        this.simpleDouble = simpleDouble;
-    }
-
-    public String getSimpleString() {
-        return simpleString;
-    }
-
-    public void setSimpleString(String simpleString) {
-        this.simpleString = simpleString;
-    }
-
-    public byte[] getSimpleByteArray() {
-        return simpleByteArray;
-    }
-
-    public void setSimpleByteArray(byte[] simpleByteArray) {
-        this.simpleByteArray = simpleByteArray;
-    }
-}
diff --git a/PerformanceTests/Realm/src/androidTest/java/de/greenrobot/performance/realm/SimpleEntityNotNullHelper.java b/PerformanceTests/Realm/src/androidTest/java/de/greenrobot/performance/realm/SimpleEntityNotNullHelper.java
deleted file mode 100644
index 711aeaa6..00000000
--- a/PerformanceTests/Realm/src/androidTest/java/de/greenrobot/performance/realm/SimpleEntityNotNullHelper.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package de.greenrobot.performance.realm;
-
-public class SimpleEntityNotNullHelper {
-    protected static SimpleEntityNotNull createEntity(Long key) {
-        if (key == null) {
-            return null;
-        }
-        SimpleEntityNotNull entity = new SimpleEntityNotNull();
-        entity.setId(key);
-        entity.setSimpleBoolean(true);
-        entity.setSimpleByte(Byte.MAX_VALUE);
-        entity.setSimpleShort(Short.MAX_VALUE);
-        entity.setSimpleInt(Integer.MAX_VALUE);
-        entity.setSimpleLong(Long.MAX_VALUE);
-        entity.setSimpleFloat(Float.MAX_VALUE);
-        entity.setSimpleDouble(Double.MAX_VALUE);
-        entity.setSimpleString("greenrobot greenDAO");
-        byte[] bytes = { 42, -17, 23, 0, 127, -128 };
-        entity.setSimpleByteArray(bytes);
-        return entity;
-    }
-}
diff --git a/PerformanceTests/Realm/src/main/AndroidManifest.xml b/PerformanceTests/Realm/src/main/AndroidManifest.xml
deleted file mode 100644
index edb8c462..00000000
--- a/PerformanceTests/Realm/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.performance.realm">
-
-    <application>
-        <!-- empty application tag -->
-    </application>
-</manifest>
diff --git a/PerformanceTests/Sqlite/build.gradle b/PerformanceTests/Sqlite/build.gradle
deleted file mode 100644
index 58b55778..00000000
--- a/PerformanceTests/Sqlite/build.gradle
+++ /dev/null
@@ -1,30 +0,0 @@
-buildscript {
-    repositories {
-        jcenter()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
-    }
-}
-
-apply plugin: 'com.android.application'
-
-android {
-    buildToolsVersion rootProject.ext.buildToolsVersion
-    compileSdkVersion rootProject.ext.compileSdkVersion
-
-    defaultConfig {
-        applicationId 'de.greenrobot.performance.sqlite'
-        minSdkVersion rootProject.ext.minSdkVersion
-        targetSdkVersion rootProject.ext.targetSdkVersion
-
-        testInstrumentationRunner 'android.test.InstrumentationTestRunner'
-
-        buildConfigField "boolean", "RUN_PERFORMANCE_TESTS", "false"
-    }
-}
-
-dependencies {
-    androidTestCompile project(':PerformanceTests:Common')
-}
diff --git a/PerformanceTests/Sqlite/src/androidTest/java/de/greenrobot/performance/sqlite/IndexedStringEntity.java b/PerformanceTests/Sqlite/src/androidTest/java/de/greenrobot/performance/sqlite/IndexedStringEntity.java
deleted file mode 100644
index 6cc3179d..00000000
--- a/PerformanceTests/Sqlite/src/androidTest/java/de/greenrobot/performance/sqlite/IndexedStringEntity.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package de.greenrobot.performance.sqlite;
-
-/**
- * Simple entity with a string property that is indexed.
- */
-public class IndexedStringEntity {
-
-    public Long _id;
-
-    public String indexedString;
-
-}
diff --git a/PerformanceTests/Sqlite/src/androidTest/java/de/greenrobot/performance/sqlite/PerformanceTestSqlite.java b/PerformanceTests/Sqlite/src/androidTest/java/de/greenrobot/performance/sqlite/PerformanceTestSqlite.java
deleted file mode 100644
index c830f813..00000000
--- a/PerformanceTests/Sqlite/src/androidTest/java/de/greenrobot/performance/sqlite/PerformanceTestSqlite.java
+++ /dev/null
@@ -1,387 +0,0 @@
-package de.greenrobot.performance.sqlite;
-
-import android.app.Application;
-import android.content.ContentValues;
-import android.content.Context;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
-import android.test.ApplicationTestCase;
-import android.util.Log;
-import de.greenrobot.performance.StringGenerator;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * https://bitbucket.org/qbusict/cupboard/wiki/GettingStarted
- */
-public class PerformanceTestSqlite extends ApplicationTestCase<Application> {
-
-    private static final String TAG = "PerfTestSqlite";
-
-    private static final int BATCH_SIZE = 10000;
-    private static final int QUERY_COUNT = 1000;
-    private static final int RUNS = 8;
-
-    private static final String DATABASE_NAME = "sqlite.db";
-    private static final int DATABASE_VERSION = 1;
-
-    public PerformanceTestSqlite() {
-        super(Application.class);
-    }
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        createApplication();
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        getApplication().deleteDatabase(DATABASE_NAME);
-
-        super.tearDown();
-    }
-
-    public void testIndexedStringEntityQuery() {
-        //noinspection PointlessBooleanExpression
-        if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
-            Log.d(TAG, "Performance tests are disabled.");
-            return;
-        }
-        Log.d(TAG, "--------Indexed Queries: Start");
-
-        // set up database
-        DbHelper dbHelper = new DbHelper(getApplication(), DATABASE_NAME, DATABASE_VERSION);
-        SQLiteDatabase database = dbHelper.getWritableDatabase();
-        Log.d(TAG, "Set up database.");
-
-        for (int i = 0; i < RUNS; i++) {
-            Log.d(TAG, "----Run " + (i + 1) + " of " + RUNS);
-            doIndexedStringEntityQuery(database);
-        }
-
-        Log.d(TAG, "--------Indexed Queries: End");
-    }
-
-    public void doIndexedStringEntityQuery(SQLiteDatabase database) {
-        // create entities
-        List<IndexedStringEntity> entities = new ArrayList<>(BATCH_SIZE);
-        String[] fixedRandomStrings = StringGenerator.createFixedRandomStrings(BATCH_SIZE);
-        for (int i = 0; i < BATCH_SIZE; i++) {
-            IndexedStringEntity entity = new IndexedStringEntity();
-            entity._id = (long) i;
-            entity.indexedString = fixedRandomStrings[i];
-            entities.add(entity);
-        }
-        Log.d(TAG, "Built entities.");
-
-        // insert entities
-        database.beginTransaction();
-        try {
-            ContentValues values = new ContentValues();
-            for (int i = 0; i < BATCH_SIZE; i++) {
-                IndexedStringEntity entity = entities.get(i);
-                values.put(DbHelper.IndexedEntityColumns._ID, entity._id);
-                values.put(DbHelper.IndexedEntityColumns.INDEXED_STRING, entity.indexedString);
-
-                database.insert(DbHelper.Tables.INDEXED_ENTITY, null, values);
-
-                values.clear();
-            }
-            database.setTransactionSuccessful();
-        } finally {
-            database.endTransaction();
-        }
-        Log.d(TAG, "Inserted entities.");
-
-        // query for entities by indexed string at random
-        int[] randomIndices = StringGenerator.getFixedRandomIndices(QUERY_COUNT, BATCH_SIZE - 1);
-
-        long start = System.currentTimeMillis();
-        for (int i = 0; i < QUERY_COUNT; i++) {
-            int nextIndex = randomIndices[i];
-
-            Cursor query = database.query(DbHelper.Tables.INDEXED_ENTITY,
-                    IndexedQuery.PROJECTION, DbHelper.IndexedEntityColumns.INDEXED_STRING + "=?",
-                    new String[] { fixedRandomStrings[nextIndex] }, null, null, null, null);
-            // do NO null checks and count checks, should throw to indicate something is incorrect
-            query.moveToFirst();
-
-            // reconstruct entity
-            IndexedStringEntity entity = new IndexedStringEntity();
-            entity._id = query.getLong(0);
-            entity.indexedString = query.getString(1);
-
-            query.close();
-        }
-        long time = System.currentTimeMillis() - start;
-        Log.d(TAG,
-                "Queried for " + QUERY_COUNT + " of " + BATCH_SIZE + " indexed entities in " + time
-                        + " ms.");
-
-        // delete all entities
-        database.delete(DbHelper.Tables.INDEXED_ENTITY, null, null);
-        Log.d(TAG, "Deleted all entities.");
-    }
-
-    public void testPerformance() throws Exception {
-        //noinspection PointlessBooleanExpression
-        if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
-            Log.d(TAG, "Performance tests are disabled.");
-            return;
-        }
-        Log.d(TAG, "---------------Start");
-
-        // set up database
-        DbHelper dbHelper = new DbHelper(getApplication(), DATABASE_NAME, DATABASE_VERSION);
-        SQLiteDatabase database = dbHelper.getWritableDatabase();
-
-        for (int i = 0; i < RUNS; i++) {
-            runTests(database, BATCH_SIZE);
-        }
-
-        Log.d(TAG, "---------------End");
-    }
-
-    private void runTests(SQLiteDatabase database, int entityCount) throws Exception {
-        Log.d(TAG, "---------------Start: " + entityCount);
-
-        long start, time;
-
-        final List<SimpleEntityNotNull> list = new ArrayList<>();
-        for (int i = 0; i < entityCount; i++) {
-            list.add(SimpleEntityNotNullHelper.createEntity((long) i));
-        }
-        System.gc();
-
-        runOneByOne(database, list, entityCount / 10);
-
-        System.gc();
-        deleteAll(database);
-
-        start = System.currentTimeMillis();
-        database.beginTransaction();
-        try {
-            ContentValues values = new ContentValues();
-            for (int i = 0; i < BATCH_SIZE; i++) {
-                SimpleEntityNotNull entity = list.get(i);
-                values.put(DbHelper.SimpleEntityColumns._ID, entity.getId());
-                buildContentValues(values, entity);
-                database.insert(DbHelper.Tables.SIMPLE_ENTITY, null, values);
-                values.clear();
-            }
-            database.setTransactionSuccessful();
-        } finally {
-            database.endTransaction();
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Created (batch) " + list.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        database.beginTransaction();
-        try {
-            ContentValues values = new ContentValues();
-            for (int i = 0; i < BATCH_SIZE; i++) {
-                SimpleEntityNotNull entity = list.get(i);
-                buildContentValues(values, entity);
-                database.update(DbHelper.Tables.SIMPLE_ENTITY, values,
-                        DbHelper.SimpleEntityColumns._ID + "=" + entity.getId(),
-                        null);
-                values.clear();
-            }
-            database.setTransactionSuccessful();
-        } finally {
-            database.endTransaction();
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Updated (batch) " + list.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        List<SimpleEntityNotNull> reloaded = new ArrayList<>(BATCH_SIZE);
-        Cursor query = database.query(DbHelper.Tables.SIMPLE_ENTITY, SimpleQuery.PROJECTION, null,
-                null, null, null, null, null);
-        while (query.moveToNext()) {
-            SimpleEntityNotNull entity = new SimpleEntityNotNull();
-            entity.setId(query.getLong(0));
-            entity.setSimpleBoolean(query.getInt(1) == 1);
-            entity.setSimpleByte((byte) query.getInt(2));
-            entity.setSimpleShort(query.getShort(3));
-            entity.setSimpleInt(query.getInt(4));
-            entity.setSimpleLong(query.getLong(5));
-            entity.setSimpleFloat(query.getFloat(6));
-            entity.setSimpleDouble(query.getDouble(7));
-            entity.setSimpleString(query.getString(8));
-            entity.setSimpleByteArray(query.getBlob(9));
-            reloaded.add(entity);
-        }
-        query.close();
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Loaded (batch) " + reloaded.size() + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        for (int i = 0; i < reloaded.size(); i++) {
-            SimpleEntityNotNull entity = reloaded.get(i);
-            entity.getId();
-            entity.getSimpleBoolean();
-            entity.getSimpleByte();
-            entity.getSimpleShort();
-            entity.getSimpleInt();
-            entity.getSimpleLong();
-            entity.getSimpleFloat();
-            entity.getSimpleDouble();
-            entity.getSimpleString();
-            entity.getSimpleByteArray();
-        }
-        time = System.currentTimeMillis() - start;
-
-        Log.d(TAG, "Accessed properties of " + reloaded.size() + " entities in " + time + " ms");
-
-        deleteAll(database);
-
-        System.gc();
-        Log.d(TAG, "---------------End: " + entityCount);
-    }
-
-    private void deleteAll(SQLiteDatabase database) {
-        long start = System.currentTimeMillis();
-        database.delete(DbHelper.Tables.SIMPLE_ENTITY, null, null);
-        long time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Deleted all entities in " + time + " ms");
-    }
-
-    private void runOneByOne(SQLiteDatabase database, List<SimpleEntityNotNull> list,
-            int count) throws SQLException {
-        long start;
-        long time;
-        start = System.currentTimeMillis();
-        ContentValues values = new ContentValues();
-        for (int i = 0; i < count; i++) {
-            SimpleEntityNotNull entity = list.get(i);
-            values.put(DbHelper.SimpleEntityColumns._ID, entity.getId());
-            buildContentValues(values, entity);
-            database.insert(DbHelper.Tables.SIMPLE_ENTITY, null, values);
-            values.clear();
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Inserted (one-by-one) " + count + " entities in " + time + " ms");
-
-        start = System.currentTimeMillis();
-        for (int i = 0; i < count; i++) {
-            SimpleEntityNotNull entity = list.get(i);
-            buildContentValues(values, entity);
-            database.update(DbHelper.Tables.SIMPLE_ENTITY, values,
-                    DbHelper.SimpleEntityColumns._ID + "=" + entity.getId(),
-                    null);
-            values.clear();
-        }
-        time = System.currentTimeMillis() - start;
-        Log.d(TAG, "Updated (one-by-one) " + count + " entities in " + time + " ms");
-    }
-
-    private void buildContentValues(ContentValues values, SimpleEntityNotNull entity) {
-        values.put(DbHelper.SimpleEntityColumns.SIMPLE_BOOLEAN, entity.getSimpleBoolean());
-        values.put(DbHelper.SimpleEntityColumns.SIMPLE_BYTE, entity.getSimpleByte());
-        values.put(DbHelper.SimpleEntityColumns.SIMPLE_SHORT, entity.getSimpleShort());
-        values.put(DbHelper.SimpleEntityColumns.SIMPLE_INT, entity.getSimpleInt());
-        values.put(DbHelper.SimpleEntityColumns.SIMPLE_LONG, entity.getSimpleLong());
-        values.put(DbHelper.SimpleEntityColumns.SIMPLE_FLOAT, entity.getSimpleFloat());
-        values.put(DbHelper.SimpleEntityColumns.SIMPLE_DOUBLE, entity.getSimpleDouble());
-        values.put(DbHelper.SimpleEntityColumns.SIMPLE_STRING, entity.getSimpleString());
-        values.put(DbHelper.SimpleEntityColumns.SIMPLE_BYTE_ARRAY, entity.getSimpleByteArray());
-    }
-
-    private interface IndexedQuery {
-        String[] PROJECTION = new String[] {
-                DbHelper.IndexedEntityColumns._ID, // 0
-                DbHelper.IndexedEntityColumns.INDEXED_STRING // 1
-        };
-    }
-
-    private interface SimpleQuery {
-        String[] PROJECTION = new String[] {
-                DbHelper.SimpleEntityColumns._ID, // 0
-                DbHelper.SimpleEntityColumns.SIMPLE_BOOLEAN,
-                DbHelper.SimpleEntityColumns.SIMPLE_BYTE, // 2
-                DbHelper.SimpleEntityColumns.SIMPLE_SHORT,
-                DbHelper.SimpleEntityColumns.SIMPLE_INT, // 4
-                DbHelper.SimpleEntityColumns.SIMPLE_LONG,
-                DbHelper.SimpleEntityColumns.SIMPLE_FLOAT, // 6
-                DbHelper.SimpleEntityColumns.SIMPLE_DOUBLE,
-                DbHelper.SimpleEntityColumns.SIMPLE_STRING, // 8
-                DbHelper.SimpleEntityColumns.SIMPLE_BYTE_ARRAY
-        };
-    }
-
-    private static class DbHelper extends SQLiteOpenHelper {
-
-        public interface Tables {
-            String SIMPLE_ENTITY = "SIMPLE_ENTITY_NOT_NULL";
-            String INDEXED_ENTITY = "INDEXED_STRING_ENTITY";
-        }
-
-        public interface SimpleEntityColumns {
-            String _ID = "_id";
-            String SIMPLE_BOOLEAN = "SIMPLE_BOOLEAN";
-            String SIMPLE_BYTE = "SIMPLE_BYTE";
-            String SIMPLE_SHORT = "SIMPLE_SHORT";
-            String SIMPLE_INT = "SIMPLE_INT";
-            String SIMPLE_LONG = "SIMPLE_LONG";
-            String SIMPLE_FLOAT = "SIMPLE_FLOAT";
-            String SIMPLE_DOUBLE = "SIMPLE_DOUBLE";
-            String SIMPLE_STRING = "SIMPLE_STRING";
-            String SIMPLE_BYTE_ARRAY = "SIMPLE_BYTE_ARRAY";
-        }
-
-        public interface IndexedEntityColumns {
-            String _ID = "_id";
-            String INDEXED_STRING = "INDEXED_STRING";
-        }
-
-        private static final String CREATE_SIMPLE_ENTITY_TABLE =
-                "CREATE TABLE " + Tables.SIMPLE_ENTITY
-                        + " ("
-                        + SimpleEntityColumns._ID + " INTEGER PRIMARY KEY NOT NULL ,"  // 0
-                        + SimpleEntityColumns.SIMPLE_BOOLEAN + " INTEGER NOT NULL ,"  // 1
-                        + SimpleEntityColumns.SIMPLE_BYTE + " INTEGER NOT NULL ,"  // 2
-                        + SimpleEntityColumns.SIMPLE_SHORT + " INTEGER NOT NULL ,"  // 3
-                        + SimpleEntityColumns.SIMPLE_INT + " INTEGER NOT NULL ,"  // 4
-                        + SimpleEntityColumns.SIMPLE_LONG + " INTEGER NOT NULL ,"  // 5
-                        + SimpleEntityColumns.SIMPLE_FLOAT + " REAL NOT NULL ,"  // 6
-                        + SimpleEntityColumns.SIMPLE_DOUBLE + " REAL NOT NULL ,"  // 7
-                        + SimpleEntityColumns.SIMPLE_STRING + " TEXT NOT NULL ,"  // 8
-                        + SimpleEntityColumns.SIMPLE_BYTE_ARRAY + " BLOB NOT NULL" // 9
-                        + ")";
-
-        private static final String CREATE_INDEXED_STRING_ENTITY_TABLE =
-                "CREATE TABLE " + Tables.INDEXED_ENTITY
-                        + " ("
-                        + IndexedEntityColumns._ID + " INTEGER PRIMARY KEY NOT NULL ," // 0
-                        + IndexedEntityColumns.INDEXED_STRING + " TEXT NOT NULL " // 1
-                        + ")";
-
-        private static final String CREATE_INDEX_ON_STRING =
-                "CREATE INDEX indexed_string ON " + Tables.INDEXED_ENTITY + "("
-                        + IndexedEntityColumns.INDEXED_STRING + ")";
-
-        public DbHelper(Context context, String name, int version) {
-            super(context, name, null, version);
-        }
-
-        @Override
-        public void onCreate(SQLiteDatabase db) {
-            db.execSQL(CREATE_SIMPLE_ENTITY_TABLE);
-            db.execSQL(CREATE_INDEXED_STRING_ENTITY_TABLE);
-            db.execSQL(CREATE_INDEX_ON_STRING);
-        }
-
-        @Override
-        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
-            db.execSQL("DROP TABLE IF EXISTS " + Tables.SIMPLE_ENTITY);
-            db.execSQL("DROP TABLE IF EXISTS " + Tables.INDEXED_ENTITY);
-            onCreate(db);
-        }
-    }
-}
diff --git a/PerformanceTests/Sqlite/src/androidTest/java/de/greenrobot/performance/sqlite/SimpleEntityNotNull.java b/PerformanceTests/Sqlite/src/androidTest/java/de/greenrobot/performance/sqlite/SimpleEntityNotNull.java
deleted file mode 100644
index 71f5611f..00000000
--- a/PerformanceTests/Sqlite/src/androidTest/java/de/greenrobot/performance/sqlite/SimpleEntityNotNull.java
+++ /dev/null
@@ -1,98 +0,0 @@
-package de.greenrobot.performance.sqlite;
-
-/**
- * Simple entity for performance testing.
- */
-public class SimpleEntityNotNull {
-
-    public Long _id;
-    public boolean simpleBoolean;
-    public byte simpleByte;
-    public short simpleShort;
-    public int simpleInt;
-    public long simpleLong;
-    public float simpleFloat;
-    public double simpleDouble;
-    public String simpleString;
-    public byte[] simpleByteArray;
-
-    public Long getId() {
-        return _id;
-    }
-
-    public boolean getSimpleBoolean() {
-        return simpleBoolean;
-    }
-
-    public void setSimpleBoolean(boolean simpleBoolean) {
-        this.simpleBoolean = simpleBoolean;
-    }
-
-    public byte getSimpleByte() {
-        return simpleByte;
-    }
-
-    public void setSimpleByte(byte simpleByte) {
-        this.simpleByte = simpleByte;
-    }
-
-    public short getSimpleShort() {
-        return simpleShort;
-    }
-
-    public void setId(Long id) {
-        this._id = id;
-    }
-
-    public void setSimpleShort(short simpleShort) {
-        this.simpleShort = simpleShort;
-    }
-
-    public int getSimpleInt() {
-        return simpleInt;
-    }
-
-    public void setSimpleInt(int simpleInt) {
-        this.simpleInt = simpleInt;
-    }
-
-    public long getSimpleLong() {
-        return simpleLong;
-    }
-
-    public void setSimpleLong(long simpleLong) {
-        this.simpleLong = simpleLong;
-    }
-
-    public float getSimpleFloat() {
-        return simpleFloat;
-    }
-
-    public void setSimpleFloat(float simpleFloat) {
-        this.simpleFloat = simpleFloat;
-    }
-
-    public double getSimpleDouble() {
-        return simpleDouble;
-    }
-
-    public void setSimpleDouble(double simpleDouble) {
-        this.simpleDouble = simpleDouble;
-    }
-
-    public String getSimpleString() {
-        return simpleString;
-    }
-
-    public void setSimpleString(String simpleString) {
-        this.simpleString = simpleString;
-    }
-
-    public byte[] getSimpleByteArray() {
-        return simpleByteArray;
-    }
-
-    public void setSimpleByteArray(byte[] simpleByteArray) {
-        this.simpleByteArray = simpleByteArray;
-    }
-}
diff --git a/PerformanceTests/Sqlite/src/androidTest/java/de/greenrobot/performance/sqlite/SimpleEntityNotNullHelper.java b/PerformanceTests/Sqlite/src/androidTest/java/de/greenrobot/performance/sqlite/SimpleEntityNotNullHelper.java
deleted file mode 100644
index c0e2c907..00000000
--- a/PerformanceTests/Sqlite/src/androidTest/java/de/greenrobot/performance/sqlite/SimpleEntityNotNullHelper.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package de.greenrobot.performance.sqlite;
-
-public class SimpleEntityNotNullHelper {
-    protected static SimpleEntityNotNull createEntity(Long key) {
-        if (key == null) {
-            return null;
-        }
-        SimpleEntityNotNull entity = new SimpleEntityNotNull();
-        entity.setId(key);
-        entity.setSimpleBoolean(true);
-        entity.setSimpleByte(Byte.MAX_VALUE);
-        entity.setSimpleShort(Short.MAX_VALUE);
-        entity.setSimpleInt(Integer.MAX_VALUE);
-        entity.setSimpleLong(Long.MAX_VALUE);
-        entity.setSimpleFloat(Float.MAX_VALUE);
-        entity.setSimpleDouble(Double.MAX_VALUE);
-        entity.setSimpleString("greenrobot greenDAO");
-        byte[] bytes = { 42, -17, 23, 0, 127, -128 };
-        entity.setSimpleByteArray(bytes);
-        return entity;
-    }
-}
diff --git a/PerformanceTests/Sqlite/src/main/AndroidManifest.xml b/PerformanceTests/Sqlite/src/main/AndroidManifest.xml
deleted file mode 100644
index 5587d7f5..00000000
--- a/PerformanceTests/Sqlite/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.performance.sqlite">
-
-    <application>
-        <!-- empty application tag -->
-    </application>
-</manifest>
diff --git a/README.md b/README.md
index 57aa0582..236eb112 100644
--- a/README.md
+++ b/README.md
@@ -17,21 +17,21 @@ greenDAO
 ========
 greenDAO is a light & fast ORM solution for Android that maps objects to SQLite databases. Being highly optimized for Android, greenDAO offers great performance and consumes minimal memory.
 
-**<font size="+1">Home page, documentation, and support links: http://greendao-orm.com/</font>**
+**<font size="+1">Home page, documentation, and support links: http://greenrobot.org/greendao/</font>**
 
 [![Build Status](https://travis-ci.org/greenrobot/greenDAO.svg?branch=master)](https://travis-ci.org/greenrobot/greenDAO)
 
 Features
 --------
-greenDAO has a unique set of features:
+greenDAO's unique set of features:
 
 * Rock solid: greenDAO has been around since 2011 and is used by countless famous apps
 * Super simple: concise and straight-forward API
 * Small: The library is <100K and it's just plain Java jar (no CPU dependent native parts)
 * Fast: Probably the fastest ORM for Android, driven by intelligent code generation
 * Safe and expressive query API: QueryBuilder uses property constants to avoid typos
-* V2.0.0 Powerful joins: query across entities and even chain joins for complex relations
-* V2.0.0 Flexible property types: use custom classes or enums to represent data in your entity
+* Powerful joins: query across entities and even chain joins for complex relations
+* Flexible property types: use custom classes or enums to represent data in your entity
 
 
 Add greenDAO to your project
@@ -40,14 +40,27 @@ greenDAO is available on Maven Central. Please ensure that you are using the lat
 
 Gradle dependency for your Android app:
 ```
-    compile 'de.greenrobot:greendao:2.0.0'
+    compile 'de.greenrobot:greendao:2.1.0'
 ```
 
 Gradle dependency for your Java generator project:
 ```
-    compile 'de.greenrobot:greendao-generator:2.0.0'
+    compile 'de.greenrobot:greendao-generator:2.1.0'
 ```
 
+Homepage, Documentation, Links
+------------------------------
+For more details on greenDAO please check [greenDAO's website](http://greenrobot.org/greendao). Here are some direct links you may find useful:
+
+[Features](http://greenrobot.org/greendao/features/)
+
+[Documentation](http://greenrobot.org/greendao/documentation/)
+
+[Changelog](CHANGELOG.md)
+
+[Technical FAQ](http://greenrobot.org/greendao/documentation/technical-faq/)
+
+[Non-Technical FAQ](http://greenrobot.org/greendao/documentation/faq/)
 
 Features in Beta
 ----------------
diff --git a/build.gradle b/build.gradle
index 6a01e479..6813a582 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,3 +1,11 @@
+if (JavaVersion.current().isJava8Compatible()) {
+    allprojects {
+        tasks.withType(Javadoc) {
+            options.addStringOption('Xdoclint:none', '-quiet')
+        }
+    }
+}
+
 subprojects {
     repositories {
         mavenCentral()
@@ -6,7 +14,7 @@ subprojects {
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.4'
+    gradleVersion = '2.12'
 }
 
 ext {
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index b5166dad..2c6137b8 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index a198531e..e6f72f81 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Jun 22 22:22:22 CEST 2015
+#Thu Mar 31 20:39:08 CEST 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.4-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.12-all.zip
diff --git a/gradlew b/gradlew
index 91a7e269..9d82f789 100755
--- a/gradlew
+++ b/gradlew
@@ -42,11 +42,6 @@ case "`uname`" in
     ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
 # Attempt to set APP_HOME
 # Resolve links: $0 may be a link
 PRG="$0"
@@ -61,9 +56,9 @@ while [ -h "$PRG" ] ; do
     fi
 done
 SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
+cd "`dirname \"$PRG\"`/" >/dev/null
 APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
+cd "$SAVED" >/dev/null
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
@@ -114,6 +109,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
diff --git a/gradlew.bat b/gradlew.bat
index 8a0b282a..5f192121 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -46,7 +46,7 @@ echo location of your Java installation.
 goto fail
 
 :init
-@rem Get command-line arguments, handling Windowz variants
+@rem Get command-line arguments, handling Windows variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
 if "%@eval[2+2]" == "4" goto 4NT_args
diff --git a/settings.gradle b/settings.gradle
index 660b6cd5..c0b1fc57 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,13 +1,7 @@
 include 'DaoCore', 'DaoGenerator', 'DaoExampleGenerator'
-include 'DaoTest' // Travis needs some Android setup for this
+include 'DaoTestBase'
+include 'DaoTest'
+include 'DaoTestPerformance'
 include 'DaoTestGenerator'
-include ':DaoExample'
-include ':PerformanceTests:Common'
-include ':PerformanceTests:ActiveAndroid'
-include ':PerformanceTests:Couchbase'
-include ':PerformanceTests:Cupboard'
-include ':PerformanceTests:Firebase'
-include ':PerformanceTests:OrmLite'
-include ':PerformanceTests:Parse'
-include ':PerformanceTests:Realm'
-include ':PerformanceTests:Sqlite'
+include 'DaoExample'
+
