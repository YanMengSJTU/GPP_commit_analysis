diff --git a/DaoCore/build.gradle b/DaoCore/build.gradle
index 2a53a4a2..2aa10da6 100644
--- a/DaoCore/build.gradle
+++ b/DaoCore/build.gradle
@@ -3,7 +3,7 @@ apply plugin: 'maven'
 apply plugin: 'signing'
 
 group = 'de.greenrobot'
-version = '1.3.7'
+version = '1.3.7-java'
 sourceCompatibility = 1.6
 
 def isSnapshot = version.endsWith('-SNAPSHOT')
@@ -27,10 +27,10 @@ configurations {
 }
 
 dependencies {
-    provided 'com.google.android:android:4.1.1.4'
-    provided 'com.google.android:android-test:4.1.1.4'
-    provided 'com.google.android:annotations:4.1.1.4'
-    provided 'com.google.android:support-v4:r7'
+//    provided 'com.google.android:android:4.1.1.4'
+//    provided 'com.google.android:android-test:4.1.1.4'
+//    provided 'com.google.android:annotations:4.1.1.4'
+//    provided 'com.google.android:support-v4:r7'
     // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4'
     deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
 }
diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
index 314ec15c..c5b7aadd 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
@@ -834,16 +834,16 @@ public Connection getConnection() {
     }
 
     /** Reads the values from the current position of the given cursor and returns a new entity. */
-    abstract protected T readEntity(ResultSet resultSet, int offset);
+    abstract protected T readEntity(ResultSet resultSet, int offset) throws SQLException;
 
     /** Reads the key from the current position of the given cursor, or returns null if there's no single-value key. */
-    abstract protected K readKey(ResultSet resultSet, int offset);
+    abstract protected K readKey(ResultSet resultSet, int offset) throws SQLException;
 
     /** Reads the values from the current position of the given cursor into an existing entity. */
-    abstract protected void readEntity(ResultSet resultSet, T entity, int offset);
+    abstract protected void readEntity(ResultSet resultSet, T entity, int offset) throws SQLException;
 
     /** Binds the entity's values to the statement. Make sure to synchronize the statement outside of the method. */
-    abstract protected void bindValues(PreparedStatement stmt, T entity);
+    abstract protected void bindValues(PreparedStatement stmt, T entity) throws SQLException;
 
     /**
      * Updates the entity's key if possible (only for Long PKs currently). This method must always return the entity's
diff --git a/DaoCore/src/de/greenrobot/dao/InternalUnitTestDaoAccess.java b/DaoCore/src/de/greenrobot/dao/InternalUnitTestDaoAccess.java
index abbc018d..3508fdde 100644
--- a/DaoCore/src/de/greenrobot/dao/InternalUnitTestDaoAccess.java
+++ b/DaoCore/src/de/greenrobot/dao/InternalUnitTestDaoAccess.java
@@ -19,6 +19,7 @@
 import java.lang.reflect.Constructor;
 import java.sql.Connection;
 import java.sql.ResultSet;
+import java.sql.SQLException;
 
 import de.greenrobot.dao.identityscope.IdentityScope;
 import de.greenrobot.dao.internal.DaoConfig;
@@ -47,11 +48,11 @@ public boolean isEntityUpdateable() {
         return dao.isEntityUpdateable();
     }
 
-    public T readEntity(ResultSet resultSet, int offset) {
+    public T readEntity(ResultSet resultSet, int offset) throws SQLException {
         return dao.readEntity(resultSet, offset);
     }
 
-    public K readKey(ResultSet resultSet, int offset) {
+    public K readKey(ResultSet resultSet, int offset) throws SQLException {
         return dao.readKey(resultSet, offset);
     }
 
diff --git a/DaoCore/src/de/greenrobot/dao/JDBCUtils.java b/DaoCore/src/de/greenrobot/dao/JDBCUtils.java
new file mode 100644
index 00000000..640f338a
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/JDBCUtils.java
@@ -0,0 +1,120 @@
+package de.greenrobot.dao;
+
+import java.io.File;
+import java.sql.Connection;
+import java.sql.Driver;
+import java.sql.DriverManager;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+public class JDBCUtils
+{
+	public static ResultSet query( Connection connection, String sql ) throws SQLException
+	{
+		return query( connection, sql, new Object[] {} );
+	}
+	
+	public static ResultSet query( Connection connection, String sql, Object... parameters ) throws SQLException
+	{
+		PreparedStatement statement = connection.prepareStatement( sql );
+		for ( int i = 0; i < parameters.length; i++ )
+		{
+			statement.setObject( i, parameters[i] );
+		}
+		ResultSet result = statement.executeQuery();
+		statement.close();
+		return result;
+	}
+	
+	public static boolean execute( Connection connection, String sql ) throws SQLException
+	{
+		return execute( connection, sql, new Object[] {} );
+	}
+	
+	public static boolean execute( Connection connection, String sql, Object... parameters ) throws SQLException
+	{
+		PreparedStatement statement = connection.prepareStatement( sql );
+		for ( int i = 0; i < parameters.length; i++ )
+		{
+			statement.setObject( i, parameters[i] );
+		}
+		boolean result = statement.execute();
+		statement.close();
+		return result;
+	}
+	
+	public static boolean transaction( Connection connection, String sql ) throws SQLException
+	{
+		return transaction( connection, sql, new Object[] {} );
+	}
+	
+	public static boolean transaction( Connection connection, String sql, Object... parameters ) throws SQLException
+	{
+		boolean result = false;
+		connection.setAutoCommit( false );
+		try
+		{
+			result = execute( connection, sql, parameters );
+			connection.commit();
+		}
+		catch ( SQLException exception )
+		{
+			if ( connection != null )
+			{
+				connection.rollback();
+			}
+			exception.printStackTrace();
+		}
+		finally
+		{
+			connection.setAutoCommit( true );
+		}
+		return result;
+	}
+	
+	public static boolean isNull( ResultSet resultSet, int index ) throws SQLException
+	{
+		return resultSet.getObject( index ) == null;
+	}
+	
+	public static Connection connect( String db ) throws SQLException
+	{
+		// setup
+		File f = new File( db );
+		if ( f.exists() )
+		{
+			f.delete();
+		}
+		else
+		{
+			if ( null != f.getParent() )
+			{
+				f.getParentFile().mkdirs();
+			}
+		}
+		// Loads and registers the JDBC driver
+		try
+		{
+			DriverManager.registerDriver( (Driver) ( Class.forName( "org.sqldroid.SQLDroidDriver", true, JDBCUtils.class.getClassLoader() ).newInstance() ) );
+		}
+		catch ( SQLException e )
+		{
+			e.printStackTrace();
+		}
+		catch ( IllegalAccessException e )
+		{
+			e.printStackTrace();
+		}
+		catch ( InstantiationException e )
+		{
+			e.printStackTrace();
+		}
+		catch ( ClassNotFoundException e )
+		{
+			e.printStackTrace();
+		}
+		
+		return DriverManager.getConnection( "jdbc:sqlite:" + db );
+	}
+}
diff --git a/DaoCore/src/de/greenrobot/dao/test/DbTest.java b/DaoCore/src/de/greenrobot/dao/test/DbTest.java
index 0736ec86..55da19a5 100644
--- a/DaoCore/src/de/greenrobot/dao/test/DbTest.java
+++ b/DaoCore/src/de/greenrobot/dao/test/DbTest.java
@@ -16,10 +16,7 @@
 
 package de.greenrobot.dao.test;
 
-import java.io.File;
 import java.sql.Connection;
-import java.sql.Driver;
-import java.sql.DriverManager;
 import java.sql.SQLException;
 import java.util.Random;
 
@@ -27,6 +24,7 @@
 import android.app.Instrumentation;
 import android.test.AndroidTestCase;
 import de.greenrobot.dao.DbUtils;
+import de.greenrobot.dao.JDBCUtils;
 
 /**
  * Base class for database related testing, which prepares an in-memory or an file-based DB (using the test {@link
@@ -101,38 +99,7 @@ protected Connection createConnection() throws SQLException {
 //            return getContext().openOrCreateDatabase(DB_NAME, 0, null);
 //        }
         
-     // setup
-		File f = new File(DB_NAME);
-		 if ( f.exists() ) {
-		   f.delete();
-		 } else {
-			 if (null != f.getParent()) {
-		       f.getParentFile().mkdirs();
-			 }
-		 }    
-		 // Loads and registers the JDBC driver
-		try
-		{
-			DriverManager.registerDriver((Driver)(Class.forName("org.sqldroid.SQLDroidDriver", true, getClass().getClassLoader()).newInstance()));
-		}
-		catch ( SQLException e )
-		{
-			e.printStackTrace();
-		}
-		catch ( IllegalAccessException e )
-		{
-			e.printStackTrace();
-		}
-		catch ( InstantiationException e )
-		{
-			e.printStackTrace();
-		}
-		catch ( ClassNotFoundException e )
-		{
-			e.printStackTrace();
-		}
-		
-		return DriverManager.getConnection("jdbc:sqlite:" + DB_NAME);
+    	return JDBCUtils.connect( DB_NAME );
     }
 
     @Override
diff --git a/DaoTest/project.properties b/DaoTest/project.properties
index dd110c3e..fdf1149c 100644
--- a/DaoTest/project.properties
+++ b/DaoTest/project.properties
@@ -9,4 +9,4 @@
 
 android.library.reference.1=../DaoCore
 # Project target.
-target=android-4
+target=android-19
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
index 63bcfc74..3b6c73d7 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
@@ -1,15 +1,16 @@
 package de.greenrobot.daotest;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 
-import de.greenrobot.daotest.AbcdefEntity;
-
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
  * DAO for table ABCDEF_ENTITY.
@@ -46,10 +47,11 @@ public AbcdefEntityDao(DaoConfig config, DaoSession daoSession) {
         super(config, daoSession);
     }
 
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    /** Creates the underlying database table. 
+     * @throws SQLException */
+    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'ABCDEF_ENTITY' (" + //
+        JDBCUtils.execute( connection, "CREATE TABLE " + constraint + "'ABCDEF_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'A' INTEGER," + // 1: a
                 "'B' INTEGER," + // 2: b
@@ -70,113 +72,115 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, AbcdefEntity entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, AbcdefEntity entity) throws SQLException {
+//        stmt.clearBindings();
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.setLong(1, id);
         }
  
         Integer a = entity.getA();
         if (a != null) {
-            stmt.bindLong(2, a);
+            stmt.setLong(2, a);
         }
  
         Integer b = entity.getB();
         if (b != null) {
-            stmt.bindLong(3, b);
+            stmt.setLong(3, b);
         }
  
         Integer c = entity.getC();
         if (c != null) {
-            stmt.bindLong(4, c);
+            stmt.setLong(4, c);
         }
  
         Integer d = entity.getD();
         if (d != null) {
-            stmt.bindLong(5, d);
+            stmt.setLong(5, d);
         }
  
         Integer e = entity.getE();
         if (e != null) {
-            stmt.bindLong(6, e);
+            stmt.setLong(6, e);
         }
  
         Integer f = entity.getF();
         if (f != null) {
-            stmt.bindLong(7, f);
+            stmt.setLong(7, f);
         }
  
         Integer g = entity.getG();
         if (g != null) {
-            stmt.bindLong(8, g);
+            stmt.setLong(8, g);
         }
  
         Integer h = entity.getH();
         if (h != null) {
-            stmt.bindLong(9, h);
+            stmt.setLong(9, h);
         }
  
         Integer j = entity.getJ();
         if (j != null) {
-            stmt.bindLong(10, j);
+            stmt.setLong(10, j);
         }
  
         Integer i = entity.getI();
         if (i != null) {
-            stmt.bindLong(11, i);
+            stmt.setLong(11, i);
         }
  
         Integer k = entity.getK();
         if (k != null) {
-            stmt.bindLong(12, k);
+            stmt.setLong(12, k);
         }
     }
 
     /** @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return resultSet.getObject(offset + 0) == null ? null : resultSet.getLong(offset + 0);
     }    
 
     /** @inheritdoc */
     @Override
-    public AbcdefEntity readEntity(Cursor cursor, int offset) {
+    public AbcdefEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
         AbcdefEntity entity = new AbcdefEntity( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // a
-            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // b
-            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // c
-            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // d
-            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // e
-            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // f
-            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // g
-            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // h
-            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // j
-            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // i
-            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // k
+            resultSet.getObject(offset + 0) == null ? null : resultSet.getLong(offset + 0), // id
+            resultSet.getObject(offset + 1) == null ? null : resultSet.getInt(offset + 1), // a
+            resultSet.getObject(offset + 2) == null ? null : resultSet.getInt(offset + 2), // b
+            resultSet.getObject(offset + 3) == null ? null : resultSet.getInt(offset + 3), // c
+            resultSet.getObject(offset + 4) == null ? null : resultSet.getInt(offset + 4), // d
+            resultSet.getObject(offset + 5) == null ? null : resultSet.getInt(offset + 5), // e
+            resultSet.getObject(offset + 6) == null ? null : resultSet.getInt(offset + 6), // f
+            resultSet.getObject(offset + 7) == null ? null : resultSet.getInt(offset + 7), // g
+            resultSet.getObject(offset + 8) == null ? null : resultSet.getInt(offset + 8), // h
+            resultSet.getObject(offset + 9) == null ? null : resultSet.getInt(offset + 9), // j
+            resultSet.getObject(offset + 10) == null ? null : resultSet.getInt(offset + 10), // i
+            resultSet.getObject(offset + 11) == null ? null : resultSet.getInt(offset + 11) // k
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, AbcdefEntity entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setA(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
-        entity.setB(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
-        entity.setC(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
-        entity.setD(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
-        entity.setE(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
-        entity.setF(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
-        entity.setG(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
-        entity.setH(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
-        entity.setJ(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
-        entity.setI(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
-        entity.setK(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
+    public void readEntity(ResultSet resultSet, AbcdefEntity entity, int offset) throws SQLException {
+        entity.setId(resultSet.getObject(offset + 0) == null ? null : resultSet.getLong(offset + 0));
+        entity.setA(resultSet.getObject(offset + 1) == null ? null : resultSet.getInt(offset + 1));
+        entity.setB(resultSet.getObject(offset + 2) == null ? null : resultSet.getInt(offset + 2));
+        entity.setC(resultSet.getObject(offset + 3) == null ? null : resultSet.getInt(offset + 3));
+        entity.setD(resultSet.getObject(offset + 4) == null ? null : resultSet.getInt(offset + 4));
+        entity.setE(resultSet.getObject(offset + 5) == null ? null : resultSet.getInt(offset + 5));
+        entity.setF(resultSet.getObject(offset + 6) == null ? null : resultSet.getInt(offset + 6));
+        entity.setG(resultSet.getObject(offset + 7) == null ? null : resultSet.getInt(offset + 7));
+        entity.setH(resultSet.getObject(offset + 8) == null ? null : resultSet.getInt(offset + 8));
+        entity.setJ(resultSet.getObject(offset + 9) == null ? null : resultSet.getInt(offset + 9));
+        entity.setI(resultSet.getObject(offset + 10) == null ? null : resultSet.getInt(offset + 10));
+        entity.setK(resultSet.getObject(offset + 11) == null ? null : resultSet.getInt(offset + 11));
      }
     
     /** @inheritdoc */
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntity.java b/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntity.java
index bcd27a00..fe526f5e 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntity.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntity.java
@@ -1,5 +1,7 @@
 package de.greenrobot.daotest;
 
+import java.sql.SQLException;
+
 import de.greenrobot.daotest.DaoSession;
 import de.greenrobot.dao.DaoException;
 
@@ -53,24 +55,27 @@ public void setText(String text) {
         this.text = text;
     }
 
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
-    public void delete() {
+    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. 
+     * @throws SQLException */
+    public void delete() throws SQLException {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }    
         myDao.delete(this);
     }
 
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
-    public void update() {
+    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. 
+     * @throws SQLException */
+    public void update() throws SQLException {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }    
         myDao.update(this);
     }
 
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
-    public void refresh() {
+    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. 
+     * @throws SQLException */
+    public void refresh() throws SQLException {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }    
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
index 21837b20..eb16640f 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
@@ -1,15 +1,16 @@
 package de.greenrobot.daotest;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 
-import de.greenrobot.daotest.AnActiveEntity;
-
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
  * DAO for table AN_ACTIVE_ENTITY.
@@ -39,10 +40,11 @@ public AnActiveEntityDao(DaoConfig config, DaoSession daoSession) {
         this.daoSession = daoSession;
     }
 
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    /** Creates the underlying database table. 
+     * @throws SQLException */
+    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'AN_ACTIVE_ENTITY' (" + //
+        JDBCUtils.execute(connection, "CREATE TABLE " + constraint + "'AN_ACTIVE_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'TEXT' TEXT);"); // 1: text
     }
@@ -53,19 +55,20 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, AnActiveEntity entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, AnActiveEntity entity) throws SQLException {
+//        stmt.clearBindings();
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.setLong(1, id);
         }
  
         String text = entity.getText();
         if (text != null) {
-            stmt.bindString(2, text);
+            stmt.setString(2, text);
         }
     }
 
@@ -75,27 +78,30 @@ protected void attachEntity(AnActiveEntity entity) {
         entity.__setDaoSession(daoSession);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return resultSet.getObject(offset + 0) == null ? null : resultSet.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public AnActiveEntity readEntity(Cursor cursor, int offset) {
+    public AnActiveEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
         AnActiveEntity entity = new AnActiveEntity( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // text
+            resultSet.getObject(offset + 0) == null ? null : resultSet.getLong(offset + 0), // id
+            resultSet.getObject(offset + 1) == null ? null : resultSet.getString(offset + 1) // text
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, AnActiveEntity entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
+    public void readEntity(ResultSet resultSet, AnActiveEntity entity, int offset) throws SQLException {
+        entity.setId(resultSet.getObject(offset + 0) == null ? null : resultSet.getLong(offset + 0));
+        entity.setText(resultSet.getObject(offset + 1) == null ? null : resultSet.getString(offset + 1));
      }
     
     /** @inheritdoc */
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
index 344db8df..9c32260a 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
@@ -1,15 +1,16 @@
 package de.greenrobot.daotest;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 
-import de.greenrobot.daotest.AutoincrementEntity;
-
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
  * DAO for table AUTOINCREMENT_ENTITY.
@@ -35,10 +36,11 @@ public AutoincrementEntityDao(DaoConfig config, DaoSession daoSession) {
         super(config, daoSession);
     }
 
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    /** Creates the underlying database table. 
+     * @throws SQLException */
+    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'AUTOINCREMENT_ENTITY' (" + //
+        JDBCUtils.execute( connection, "CREATE TABLE " + constraint + "'AUTOINCREMENT_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY AUTOINCREMENT );"); // 0: id
     }
 
@@ -48,36 +50,40 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, AutoincrementEntity entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, AutoincrementEntity entity) throws SQLException {
+//        stmt.clearBindings();
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.setLong(1, id);
         }
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return resultSet.getObject(offset + 0) == null ? null : resultSet.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public AutoincrementEntity readEntity(Cursor cursor, int offset) {
+    public AutoincrementEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
         AutoincrementEntity entity = new AutoincrementEntity( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) // id
+            resultSet.getObject(offset + 0) == null ? null : resultSet.getLong(offset + 0) // id
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, AutoincrementEntity entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
+    public void readEntity(ResultSet resultSet, AutoincrementEntity entity, int offset) throws SQLException {
+        entity.setId(resultSet.getObject(offset + 0) == null ? null : resultSet.getLong(offset + 0));
      }
     
     /** @inheritdoc */
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
index b68069c5..13cf9d67 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
@@ -1,11 +1,15 @@
 package de.greenrobot.daotest;
 
+import java.sql.Connection;
+import java.sql.SQLException;
+
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteDatabase.CursorFactory;
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 import de.greenrobot.dao.AbstractDaoMaster;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 
 import de.greenrobot.daotest.SimpleEntityDao;
@@ -31,22 +35,23 @@
 public class DaoMaster extends AbstractDaoMaster {
     public static final int SCHEMA_VERSION = 1;
 
-    /** Creates underlying database table using DAOs. */
-    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
-        SimpleEntityDao.createTable(db, ifNotExists);
-        SimpleEntityNotNullDao.createTable(db, ifNotExists);
-        TestEntityDao.createTable(db, ifNotExists);
-        RelationEntityDao.createTable(db, ifNotExists);
-        DateEntityDao.createTable(db, ifNotExists);
-        SpecialNamesEntityDao.createTable(db, ifNotExists);
-        AbcdefEntityDao.createTable(db, ifNotExists);
-        ToManyTargetEntityDao.createTable(db, ifNotExists);
-        ToManyEntityDao.createTable(db, ifNotExists);
-        TreeEntityDao.createTable(db, ifNotExists);
-        AnActiveEntityDao.createTable(db, ifNotExists);
-        ExtendsImplementsEntityDao.createTable(db, ifNotExists);
-        StringKeyValueEntityDao.createTable(db, ifNotExists);
-        AutoincrementEntityDao.createTable(db, ifNotExists);
+    /** Creates underlying database table using DAOs. 
+     * @throws SQLException */
+    public static void createAllTables(Connection connection, boolean ifNotExists) throws SQLException {
+        SimpleEntityDao.createTable(connection, ifNotExists);
+        SimpleEntityNotNullDao.createTable(connection, ifNotExists);
+        TestEntityDao.createTable(connection, ifNotExists);
+        RelationEntityDao.createTable(connection, ifNotExists);
+        DateEntityDao.createTable(connection, ifNotExists);
+        SpecialNamesEntityDao.createTable(connection, ifNotExists);
+        AbcdefEntityDao.createTable(connection, ifNotExists);
+        ToManyTargetEntityDao.createTable(connection, ifNotExists);
+        ToManyEntityDao.createTable(connection, ifNotExists);
+        TreeEntityDao.createTable(connection, ifNotExists);
+        AnActiveEntityDao.createTable(connection, ifNotExists);
+        ExtendsImplementsEntityDao.createTable(connection, ifNotExists);
+        StringKeyValueEntityDao.createTable(connection, ifNotExists);
+        AutoincrementEntityDao.createTable(connection, ifNotExists);
     }
     
     /** Drops underlying database table using DAOs. */
@@ -76,7 +81,16 @@ public OpenHelper(Context context, String name, CursorFactory factory) {
         @Override
         public void onCreate(SQLiteDatabase db) {
             Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
-            createAllTables(db, false);
+			try
+			{
+				String dbPath = db.getPath();
+				Connection connection = JDBCUtils.connect( dbPath );
+				createAllTables(connection, false);
+			}
+			catch ( SQLException e )
+			{
+				e.printStackTrace();
+			}
         }
     }
     
@@ -94,8 +108,8 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
         }
     }
 
-    public DaoMaster(SQLiteDatabase db) {
-        super(db, SCHEMA_VERSION);
+    public DaoMaster(Connection connection) {
+        super(connection, SCHEMA_VERSION);
         registerDaoClass(SimpleEntityDao.class);
         registerDaoClass(SimpleEntityNotNullDao.class);
         registerDaoClass(TestEntityDao.class);
@@ -114,11 +128,11 @@ public DaoMaster(SQLiteDatabase db) {
     }
     
     public DaoSession newSession() {
-        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
+        return new DaoSession(connection, IdentityScopeType.Session, daoConfigMap);
     }
     
     public DaoSession newSession(IdentityScopeType type) {
-        return new DaoSession(db, type, daoConfigMap);
+        return new DaoSession(connection, type, daoConfigMap);
     }
     
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
index 0a9a8e95..77ad42c7 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
@@ -1,7 +1,6 @@
 package de.greenrobot.daotest;
 
-import android.database.sqlite.SQLiteDatabase;
-
+import java.sql.Connection;
 import java.util.Map;
 
 import de.greenrobot.dao.AbstractDao;
@@ -9,38 +8,6 @@
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 import de.greenrobot.dao.internal.DaoConfig;
 
-import de.greenrobot.daotest.SimpleEntity;
-import de.greenrobot.daotest.SimpleEntityNotNull;
-import de.greenrobot.daotest.TestEntity;
-import de.greenrobot.daotest.RelationEntity;
-import de.greenrobot.daotest.DateEntity;
-import de.greenrobot.daotest.SpecialNamesEntity;
-import de.greenrobot.daotest.AbcdefEntity;
-import de.greenrobot.daotest.ToManyTargetEntity;
-import de.greenrobot.daotest.ToManyEntity;
-import de.greenrobot.daotest.TreeEntity;
-import de.greenrobot.daotest.AnActiveEntity;
-import de.greenrobot.daotest.ExtendsImplementsEntity;
-import de.greenrobot.daotest.StringKeyValueEntity;
-import de.greenrobot.daotest.AutoincrementEntity;
-import de.greenrobot.daotest.SqliteMaster;
-
-import de.greenrobot.daotest.SimpleEntityDao;
-import de.greenrobot.daotest.SimpleEntityNotNullDao;
-import de.greenrobot.daotest.TestEntityDao;
-import de.greenrobot.daotest.RelationEntityDao;
-import de.greenrobot.daotest.DateEntityDao;
-import de.greenrobot.daotest.SpecialNamesEntityDao;
-import de.greenrobot.daotest.AbcdefEntityDao;
-import de.greenrobot.daotest.ToManyTargetEntityDao;
-import de.greenrobot.daotest.ToManyEntityDao;
-import de.greenrobot.daotest.TreeEntityDao;
-import de.greenrobot.daotest.AnActiveEntityDao;
-import de.greenrobot.daotest.ExtendsImplementsEntityDao;
-import de.greenrobot.daotest.StringKeyValueEntityDao;
-import de.greenrobot.daotest.AutoincrementEntityDao;
-import de.greenrobot.daotest.SqliteMasterDao;
-
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 
 /**
@@ -82,9 +49,9 @@
     private final AutoincrementEntityDao autoincrementEntityDao;
     private final SqliteMasterDao sqliteMasterDao;
 
-    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
+    public DaoSession(Connection connection, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
-        super(db);
+        super(connection);
 
         simpleEntityDaoConfig = daoConfigMap.get(SimpleEntityDao.class).clone();
         simpleEntityDaoConfig.initIdentityScope(type);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
index b3eb348f..e5e5200a 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
@@ -1,15 +1,16 @@
 package de.greenrobot.daotest;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 
-import de.greenrobot.daotest.DateEntity;
-
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
  * DAO for table DATE_ENTITY.
@@ -37,10 +38,11 @@ public DateEntityDao(DaoConfig config, DaoSession daoSession) {
         super(config, daoSession);
     }
 
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    /** Creates the underlying database table. 
+     * @throws SQLException */
+    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'DATE_ENTITY' (" + //
+        JDBCUtils.execute(connection, "CREATE TABLE " + constraint + "'DATE_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'DATE' INTEGER," + // 1: date
                 "'DATE_NOT_NULL' INTEGER NOT NULL );"); // 2: dateNotNull
@@ -52,46 +54,50 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, DateEntity entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, DateEntity entity) throws SQLException {
+//        stmt.clearBindings();
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.setLong(1, id);
         }
  
         java.util.Date date = entity.getDate();
         if (date != null) {
-            stmt.bindLong(2, date.getTime());
+            stmt.setLong(2, date.getTime());
         }
-        stmt.bindLong(3, entity.getDateNotNull().getTime());
+        stmt.setLong(3, entity.getDateNotNull().getTime());
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public DateEntity readEntity(Cursor cursor, int offset) {
+    public DateEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
         DateEntity entity = new DateEntity( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
-            new java.util.Date(cursor.getLong(offset + 2)) // dateNotNull
+            JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0), // id
+            JDBCUtils.isNull( resultSet, offset + 1) ? null : new java.util.Date(resultSet.getLong(offset + 1)), // date
+            new java.util.Date(resultSet.getLong(offset + 2)) // dateNotNull
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, DateEntity entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
-        entity.setDateNotNull(new java.util.Date(cursor.getLong(offset + 2)));
+    public void readEntity(ResultSet resultSet, DateEntity entity, int offset) throws SQLException {
+        entity.setId(JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0));
+        entity.setDate(JDBCUtils.isNull( resultSet, offset + 1) ? null : new java.util.Date(resultSet.getLong(offset + 1)));
+        entity.setDateNotNull(new java.util.Date(resultSet.getLong(offset + 2)));
      }
     
     /** @inheritdoc */
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
index 10e62249..0e0201e3 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
@@ -1,15 +1,16 @@
 package de.greenrobot.daotest;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 
-import de.greenrobot.daotest.ExtendsImplementsEntity;
-
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
  * DAO for table EXTENDS_IMPLEMENTS_ENTITY.
@@ -36,10 +37,11 @@ public ExtendsImplementsEntityDao(DaoConfig config, DaoSession daoSession) {
         super(config, daoSession);
     }
 
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    /** Creates the underlying database table. 
+     * @throws SQLException */
+    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'EXTENDS_IMPLEMENTS_ENTITY' (" + //
+        JDBCUtils.execute(connection, "CREATE TABLE " + constraint + "'EXTENDS_IMPLEMENTS_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'TEXT' TEXT);"); // 1: text
     }
@@ -50,43 +52,47 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ExtendsImplementsEntity entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, ExtendsImplementsEntity entity) throws SQLException {
+//        stmt.clearBindings();
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.setLong(1, id);
         }
  
         String text = entity.getText();
         if (text != null) {
-            stmt.bindString(2, text);
+            stmt.setString(2, text);
         }
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public ExtendsImplementsEntity readEntity(Cursor cursor, int offset) {
+    public ExtendsImplementsEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
         ExtendsImplementsEntity entity = new ExtendsImplementsEntity( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // text
+            JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0), // id
+            JDBCUtils.isNull(resultSet, offset + 1) ? null : resultSet.getString(offset + 1) // text
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, ExtendsImplementsEntity entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
+    public void readEntity(ResultSet resultSet, ExtendsImplementsEntity entity, int offset) throws SQLException {
+        entity.setId(JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0));
+        entity.setText(JDBCUtils.isNull(resultSet, offset + 1) ? null : resultSet.getString(offset + 1));
      }
     
     /** @inheritdoc */
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntity.java b/DaoTest/src-gen/de/greenrobot/daotest/RelationEntity.java
index 7a2d6944..2489269c 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntity.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/RelationEntity.java
@@ -1,5 +1,7 @@
 package de.greenrobot.daotest;
 
+import java.sql.SQLException;
+
 import de.greenrobot.daotest.DaoSession;
 import de.greenrobot.dao.DaoException;
 
@@ -95,8 +97,9 @@ public void setSimpleString(String simpleString) {
         this.simpleString = simpleString;
     }
 
-    /** To-one relationship, resolved on first access. */
-    public RelationEntity getParent() {
+    /** To-one relationship, resolved on first access. 
+     * @throws SQLException */
+    public RelationEntity getParent() throws SQLException {
         Long __key = this.parentId;
         if (parent__resolvedKey == null || !parent__resolvedKey.equals(__key)) {
             if (daoSession == null) {
@@ -120,8 +123,9 @@ public void setParent(RelationEntity parent) {
         }
     }
 
-    /** To-one relationship, resolved on first access. */
-    public TestEntity getTestEntity() {
+    /** To-one relationship, resolved on first access. 
+     * @throws SQLException */
+    public TestEntity getTestEntity() throws SQLException {
         Long __key = this.testId;
         if (testEntity__resolvedKey == null || !testEntity__resolvedKey.equals(__key)) {
             if (daoSession == null) {
@@ -145,8 +149,9 @@ public void setTestEntity(TestEntity testEntity) {
         }
     }
 
-    /** To-one relationship, resolved on first access. */
-    public TestEntity getTestNotNull() {
+    /** To-one relationship, resolved on first access. 
+     * @throws SQLException */
+    public TestEntity getTestNotNull() throws SQLException {
         long __key = this.testIdNotNull;
         if (testNotNull__resolvedKey == null || !testNotNull__resolvedKey.equals(__key)) {
             if (daoSession == null) {
@@ -173,8 +178,9 @@ public void setTestNotNull(TestEntity testNotNull) {
         }
     }
 
-    /** To-one relationship, resolved on first access. */
-    public TestEntity getTestWithoutProperty() {
+    /** To-one relationship, resolved on first access. 
+     * @throws SQLException */
+    public TestEntity getTestWithoutProperty() throws SQLException {
         if (testWithoutProperty != null || !testWithoutProperty__refreshed) {
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
@@ -198,24 +204,27 @@ public void setTestWithoutProperty(TestEntity testWithoutProperty) {
         }
     }
 
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
-    public void delete() {
+    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. 
+     * @throws SQLException */
+    public void delete() throws SQLException {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }    
         myDao.delete(this);
     }
 
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
-    public void update() {
+    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. 
+     * @throws SQLException */
+    public void update() throws SQLException {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }    
         myDao.update(this);
     }
 
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
-    public void refresh() {
+    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. 
+     * @throws SQLException */
+    public void refresh() throws SQLException {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }    
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
index 4f09837e..4c5d57ff 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
@@ -1,17 +1,18 @@
 package de.greenrobot.daotest;
 
-import java.util.List;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 import java.util.ArrayList;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import java.util.List;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.SqlUtils;
 import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daotest.RelationEntity;
+import de.greenrobot.dao.internal.SqlUtils;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -46,10 +47,11 @@ public RelationEntityDao(DaoConfig config, DaoSession daoSession) {
         this.daoSession = daoSession;
     }
 
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    /** Creates the underlying database table. 
+     * @throws SQLException */
+    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'RELATION_ENTITY' (" + //
+        JDBCUtils.execute(connection, "CREATE TABLE " + constraint + "'RELATION_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'PARENT_ID' INTEGER," + // 1: parentId
                 "'TEST_ID' INTEGER," + // 2: testId
@@ -64,30 +66,31 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, RelationEntity entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, RelationEntity entity) throws SQLException {
+//        stmt.clearBindings();
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.setLong(1, id);
         }
  
         Long parentId = entity.getParentId();
         if (parentId != null) {
-            stmt.bindLong(2, parentId);
+            stmt.setLong(2, parentId);
         }
  
         Long testId = entity.getTestId();
         if (testId != null) {
-            stmt.bindLong(3, testId);
+            stmt.setLong(3, testId);
         }
-        stmt.bindLong(4, entity.getTestIdNotNull());
+        stmt.setLong(4, entity.getTestIdNotNull());
  
         String simpleString = entity.getSimpleString();
         if (simpleString != null) {
-            stmt.bindString(5, simpleString);
+            stmt.setString(5, simpleString);
         }
     }
 
@@ -97,33 +100,36 @@ protected void attachEntity(RelationEntity entity) {
         entity.__setDaoSession(daoSession);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public RelationEntity readEntity(Cursor cursor, int offset) {
+    public RelationEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
         RelationEntity entity = new RelationEntity( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // parentId
-            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // testId
-            cursor.getLong(offset + 3), // testIdNotNull
-            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // simpleString
+            JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0), // id
+            JDBCUtils.isNull(resultSet, offset + 1) ? null : resultSet.getLong(offset + 1), // parentId
+            JDBCUtils.isNull(resultSet, offset + 2) ? null : resultSet.getLong(offset + 2), // testId
+            resultSet.getLong(offset + 3), // testIdNotNull
+            JDBCUtils.isNull(resultSet, offset + 4) ? null : resultSet.getString(offset + 4) // simpleString
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, RelationEntity entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setParentId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
-        entity.setTestId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
-        entity.setTestIdNotNull(cursor.getLong(offset + 3));
-        entity.setSimpleString(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
+    public void readEntity(ResultSet resultSet, RelationEntity entity, int offset) throws SQLException {
+        entity.setId(JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0));
+        entity.setParentId(JDBCUtils.isNull( resultSet, offset + 1) ? null : resultSet.getLong(offset + 1));
+        entity.setTestId(JDBCUtils.isNull( resultSet, offset + 2) ? null : resultSet.getLong(offset + 2));
+        entity.setTestIdNotNull(resultSet.getLong(offset + 3));
+        entity.setSimpleString(JDBCUtils.isNull( resultSet, offset + 4) ? null : resultSet.getString(offset + 4));
      }
     
     /** @inheritdoc */
@@ -174,31 +180,31 @@ protected String getSelectDeep() {
         return selectDeep;
     }
     
-    protected RelationEntity loadCurrentDeep(Cursor cursor, boolean lock) {
-        RelationEntity entity = loadCurrent(cursor, 0, lock);
+    protected RelationEntity loadCurrentDeep(ResultSet resultSet, boolean lock) throws SQLException {
+        RelationEntity entity = loadCurrent(resultSet, 0, lock);
         int offset = getAllColumns().length;
 
-        RelationEntity parent = loadCurrentOther(daoSession.getRelationEntityDao(), cursor, offset);
+        RelationEntity parent = loadCurrentOther(daoSession.getRelationEntityDao(), resultSet, offset);
         entity.setParent(parent);
         offset += daoSession.getRelationEntityDao().getAllColumns().length;
 
-        TestEntity testEntity = loadCurrentOther(daoSession.getTestEntityDao(), cursor, offset);
+        TestEntity testEntity = loadCurrentOther(daoSession.getTestEntityDao(), resultSet, offset);
         entity.setTestEntity(testEntity);
         offset += daoSession.getTestEntityDao().getAllColumns().length;
 
-        TestEntity testNotNull = loadCurrentOther(daoSession.getTestEntityDao(), cursor, offset);
+        TestEntity testNotNull = loadCurrentOther(daoSession.getTestEntityDao(), resultSet, offset);
          if(testNotNull != null) {
             entity.setTestNotNull(testNotNull);
         }
         offset += daoSession.getTestEntityDao().getAllColumns().length;
 
-        TestEntity testWithoutProperty = loadCurrentOther(daoSession.getTestEntityDao(), cursor, offset);
+        TestEntity testWithoutProperty = loadCurrentOther(daoSession.getTestEntityDao(), resultSet, offset);
         entity.setTestWithoutProperty(testWithoutProperty);
 
         return entity;    
     }
 
-    public RelationEntity loadDeep(Long key) {
+    public RelationEntity loadDeep(Long key) throws SQLException {
         assertSinglePk();
         if (key == null) {
             return null;
@@ -210,35 +216,36 @@ public RelationEntity loadDeep(Long key) {
         String sql = builder.toString();
         
         String[] keyArray = new String[] { key.toString() };
-        Cursor cursor = db.rawQuery(sql, keyArray);
+        ResultSet resultSet = JDBCUtils.query( connection, sql, (Object[]) keyArray );
         
         try {
-            boolean available = cursor.moveToFirst();
+            boolean available = resultSet.first();
             if (!available) {
                 return null;
-            } else if (!cursor.isLast()) {
-                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
+            } else if (!resultSet.isLast()) {
+                throw new IllegalStateException("Expected unique result, but count was " + resultSet.getFetchSize());
             }
-            return loadCurrentDeep(cursor, true);
+            return loadCurrentDeep(resultSet, true);
         } finally {
-            cursor.close();
+            resultSet.close();
         }
     }
     
-    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
-    public List<RelationEntity> loadAllDeepFromCursor(Cursor cursor) {
-        int count = cursor.getCount();
+    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. 
+     * @throws SQLException */
+    public List<RelationEntity> loadAllDeepFromCursor(ResultSet resultSet) throws SQLException {
+        int count = resultSet.getFetchSize();
         List<RelationEntity> list = new ArrayList<RelationEntity>(count);
         
-        if (cursor.moveToFirst()) {
+        if (resultSet.first()) {
             if (identityScope != null) {
                 identityScope.lock();
                 identityScope.reserveRoom(count);
             }
             try {
                 do {
-                    list.add(loadCurrentDeep(cursor, false));
-                } while (cursor.moveToNext());
+                    list.add(loadCurrentDeep(resultSet, false));
+                } while (resultSet.next());
             } finally {
                 if (identityScope != null) {
                     identityScope.unlock();
@@ -248,19 +255,26 @@ public RelationEntity loadDeep(Long key) {
         return list;
     }
     
-    protected List<RelationEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
+    protected List<RelationEntity> loadDeepAllAndCloseCursor(ResultSet resultSet) throws SQLException {
         try {
-            return loadAllDeepFromCursor(cursor);
+            return loadAllDeepFromCursor(resultSet);
         } finally {
-            cursor.close();
+            resultSet.close();
         }
     }
     
 
-    /** A raw-style query where you can pass any WHERE clause and arguments. */
-    public List<RelationEntity> queryDeep(String where, String... selectionArg) {
-        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
-        return loadDeepAllAndCloseCursor(cursor);
+    /** A raw-style query where you can pass any WHERE clause and arguments. 
+     * @throws SQLException */
+    public List<RelationEntity> queryDeep(String where, String... selectionArg) throws SQLException {
+    	//@formatter:off
+    	ResultSet resultSet = JDBCUtils.query( 
+    			connection, 
+    			getSelectDeep() + where, 
+    			(Object[]) selectionArg
+    	);
+    	//@formatter:on
+        return loadDeepAllAndCloseCursor(resultSet);
     }
  
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityContentProvider.java b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityContentProvider.java
index 1375e1cf..3aff19da 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityContentProvider.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityContentProvider.java
@@ -1,18 +1,7 @@
 package de.greenrobot.daotest;
 
-import android.content.ContentProvider;
-import android.content.ContentResolver;
-import android.content.ContentValues;
-import android.content.UriMatcher;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteQueryBuilder;
 import android.net.Uri;
 
-import de.greenrobot.dao.DaoLog;
-
-import de.greenrobot.daotest.SimpleEntityDao;
-
 /* Copy this code snippet into your AndroidManifest.xml inside the <application> element:
 
     <provider
@@ -20,104 +9,105 @@
         android:authorities="de.greenrobot.daotest" />
 */
 
-public class SimpleEntityContentProvider extends ContentProvider {
+////TODO check if this class is really necessary
+public class SimpleEntityContentProvider {//extends ContentProvider {
 
     public static final String AUTHORITY = "de.greenrobot.daotest";
     public static final String BASE_PATH = "SimpleEntity";
     public static final Uri CONTENT_URI = Uri.parse("content://" + AUTHORITY + "/" + BASE_PATH);
-    public static final String CONTENT_TYPE = ContentResolver.CURSOR_DIR_BASE_TYPE
-            + "/" + BASE_PATH;
-    public static final String CONTENT_ITEM_TYPE = ContentResolver.CURSOR_ITEM_BASE_TYPE
-            + "/" + BASE_PATH;
-            
-    private static final String TABLENAME = SimpleEntityDao.TABLENAME;
-    private static final String PK = SimpleEntityDao.Properties.Id.columnName;
-
-    private static final int SIMPLEENTITY_DIR = 0;
-    private static final int SIMPLEENTITY_ID = 1;
-
-    private static final UriMatcher sURIMatcher;
-     
-    static {
-        sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);      
-        sURIMatcher.addURI(AUTHORITY, BASE_PATH, SIMPLEENTITY_DIR);
-        sURIMatcher.addURI(AUTHORITY, BASE_PATH + "/#", SIMPLEENTITY_ID);
-    }
-    
-    /** 
-    * This must be set from outside, it's recommended to do this inside your Application object.
-    * Subject to change (static isn't nice).
-    */
+//    public static final String CONTENT_TYPE = ContentResolver.CURSOR_DIR_BASE_TYPE
+//            + "/" + BASE_PATH;
+//    public static final String CONTENT_ITEM_TYPE = ContentResolver.CURSOR_ITEM_BASE_TYPE
+//            + "/" + BASE_PATH;
+//            
+//    private static final String TABLENAME = SimpleEntityDao.TABLENAME;
+//    private static final String PK = SimpleEntityDao.Properties.Id.columnName;
+//
+//    private static final int SIMPLEENTITY_DIR = 0;
+//    private static final int SIMPLEENTITY_ID = 1;
+//
+//    private static final UriMatcher sURIMatcher;
+//     
+//    static {
+//        sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);      
+//        sURIMatcher.addURI(AUTHORITY, BASE_PATH, SIMPLEENTITY_DIR);
+//        sURIMatcher.addURI(AUTHORITY, BASE_PATH + "/#", SIMPLEENTITY_ID);
+//    }
+//    
+//    /** 
+//    * This must be set from outside, it's recommended to do this inside your Application object.
+//    * Subject to change (static isn't nice).
+//    */
     public static DaoSession daoSession;
-    
-    @Override
-    public boolean onCreate() {
-        // if(daoSession == null) {
-        //     throw new IllegalStateException("DaoSession must be set before content provider is created");
-        // }
-        DaoLog.d("Content Provider started: " + CONTENT_URI);
-        return true;
-    }
-    
-    protected SQLiteDatabase getDatabase() {
-        if(daoSession == null) {
-            throw new IllegalStateException("DaoSession must be set during content provider is active");
-        }
-        return daoSession.getDatabase();
-    }
-        
-    @Override
-    public Uri insert(Uri uri, ContentValues values) {
-        throw new UnsupportedOperationException("This content provider is readonly");
-    }
-
-    @Override
-    public int delete(Uri uri, String selection, String[] selectionArgs) {
-        throw new UnsupportedOperationException("This content provider is readonly");
-    }
-    
-    @Override
-    public int update(Uri uri, ContentValues values, String selection,
-            String[] selectionArgs) {
-        throw new UnsupportedOperationException("This content provider is readonly");
-    }
- 
-    @Override
-    public Cursor query(Uri uri, String[] projection, String selection,
-            String[] selectionArgs, String sortOrder) {
-
-        SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
-        int uriType = sURIMatcher.match(uri);
-        switch (uriType) {
-        case SIMPLEENTITY_DIR:
-            queryBuilder.setTables(TABLENAME);
-            break;
-        case SIMPLEENTITY_ID:
-            queryBuilder.setTables(TABLENAME);
-            queryBuilder.appendWhere(PK + "="
-                    + uri.getLastPathSegment());
-            break;
-        default:
-            throw new IllegalArgumentException("Unknown URI: " + uri);
-        }
-
-        SQLiteDatabase db = getDatabase();
-        Cursor cursor = queryBuilder.query(db, projection, selection,
-                selectionArgs, null, null, sortOrder);
-        cursor.setNotificationUri(getContext().getContentResolver(), uri);
-
-        return cursor;
-    }
-    
-    @Override
-    public final String getType(Uri uri) {
-        switch (sURIMatcher.match(uri)) {
-        case SIMPLEENTITY_DIR:
-            return CONTENT_TYPE;
-        case SIMPLEENTITY_ID:
-            return CONTENT_ITEM_TYPE;
-        default :
-            throw new IllegalArgumentException("Unsupported URI: " + uri);
-        }
-    }
+//    
+//    @Override
+//    public boolean onCreate() {
+//        // if(daoSession == null) {
+//        //     throw new IllegalStateException("DaoSession must be set before content provider is created");
+//        // }
+//        DaoLog.d("Content Provider started: " + CONTENT_URI);
+//        return true;
+//    }
+//    
+//    protected Connection getConnection() {
+//        if(daoSession == null) {
+//            throw new IllegalStateException("DaoSession must be set during content provider is active");
+//        }
+//        return daoSession.getConnection();
+//    }
+//        
+//    @Override
+//    public Uri insert(Uri uri, ContentValues values) {
+//        throw new UnsupportedOperationException("This content provider is readonly");
+//    }
+//
+//    @Override
+//    public int delete(Uri uri, String selection, String[] selectionArgs) {
+//        throw new UnsupportedOperationException("This content provider is readonly");
+//    }
+//    
+//    @Override
+//    public int update(Uri uri, ContentValues values, String selection,
+//            String[] selectionArgs) {
+//        throw new UnsupportedOperationException("This content provider is readonly");
+//    }
+// 
+////    @Override
+////    public Cursor query(Uri uri, String[] projection, String selection,
+////            String[] selectionArgs, String sortOrder) {
+////
+////        SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
+////        int uriType = sURIMatcher.match(uri);
+////        switch (uriType) {
+////        case SIMPLEENTITY_DIR:
+////            queryBuilder.setTables(TABLENAME);
+////            break;
+////        case SIMPLEENTITY_ID:
+////            queryBuilder.setTables(TABLENAME);
+////            queryBuilder.appendWhere(PK + "="
+////                    + uri.getLastPathSegment());
+////            break;
+////        default:
+////            throw new IllegalArgumentException("Unknown URI: " + uri);
+////        }
+////
+////        Connection connection = getConnection();
+////        Cursor cursor = queryBuilder.query(db, projection, selection,
+////                selectionArgs, null, null, sortOrder);
+////        cursor.setNotificationUri(getContext().getContentResolver(), uri);
+////
+////        return cursor;
+////    }
+//    
+//    @Override
+//    public final String getType(Uri uri) {
+//        switch (sURIMatcher.match(uri)) {
+//        case SIMPLEENTITY_DIR:
+//            return CONTENT_TYPE;
+//        case SIMPLEENTITY_ID:
+//            return CONTENT_ITEM_TYPE;
+//        default :
+//            throw new IllegalArgumentException("Unsupported URI: " + uri);
+//        }
+//    }
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
index 70a5df92..e0ebb1f5 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
@@ -1,15 +1,16 @@
 package de.greenrobot.daotest;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 
-import de.greenrobot.daotest.SimpleEntity;
-
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
  * DAO for table SIMPLE_ENTITY.
@@ -44,10 +45,11 @@ public SimpleEntityDao(DaoConfig config, DaoSession daoSession) {
         super(config, daoSession);
     }
 
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    /** Creates the underlying database table. 
+     * @throws ` */
+    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'SIMPLE_ENTITY' (" + //
+        String sql = "CREATE TABLE " + constraint + "'SIMPLE_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'SIMPLE_BOOLEAN' INTEGER," + // 1: simpleBoolean
                 "'SIMPLE_BYTE' INTEGER," + // 2: simpleByte
@@ -57,7 +59,8 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
                 "'SIMPLE_FLOAT' REAL," + // 6: simpleFloat
                 "'SIMPLE_DOUBLE' REAL," + // 7: simpleDouble
                 "'SIMPLE_STRING' TEXT," + // 8: simpleString
-                "'SIMPLE_BYTE_ARRAY' BLOB);"); // 9: simpleByteArray
+                "'SIMPLE_BYTE_ARRAY' BLOB);"; // 9: simpleByteArray
+        JDBCUtils.execute( connection, sql );
     }
 
     /** Drops the underlying database table. */
@@ -66,99 +69,103 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, SimpleEntity entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, SimpleEntity entity) throws SQLException {
+//        stmt.clearBindings();
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.setLong(1, id);
         }
  
         Boolean simpleBoolean = entity.getSimpleBoolean();
         if (simpleBoolean != null) {
-            stmt.bindLong(2, simpleBoolean ? 1l: 0l);
+            stmt.setLong(2, simpleBoolean ? 1l: 0l);
         }
  
         Byte simpleByte = entity.getSimpleByte();
         if (simpleByte != null) {
-            stmt.bindLong(3, simpleByte);
+            stmt.setLong(3, simpleByte);
         }
  
         Short simpleShort = entity.getSimpleShort();
         if (simpleShort != null) {
-            stmt.bindLong(4, simpleShort);
+            stmt.setLong(4, simpleShort);
         }
  
         Integer simpleInt = entity.getSimpleInt();
         if (simpleInt != null) {
-            stmt.bindLong(5, simpleInt);
+            stmt.setLong(5, simpleInt);
         }
  
         Long simpleLong = entity.getSimpleLong();
         if (simpleLong != null) {
-            stmt.bindLong(6, simpleLong);
+            stmt.setLong(6, simpleLong);
         }
  
         Float simpleFloat = entity.getSimpleFloat();
         if (simpleFloat != null) {
-            stmt.bindDouble(7, simpleFloat);
+            stmt.setDouble(7, simpleFloat);
         }
  
         Double simpleDouble = entity.getSimpleDouble();
         if (simpleDouble != null) {
-            stmt.bindDouble(8, simpleDouble);
+            stmt.setDouble(8, simpleDouble);
         }
  
         String simpleString = entity.getSimpleString();
         if (simpleString != null) {
-            stmt.bindString(9, simpleString);
+            stmt.setString(9, simpleString);
         }
  
         byte[] simpleByteArray = entity.getSimpleByteArray();
         if (simpleByteArray != null) {
-            stmt.bindBlob(10, simpleByteArray);
+            stmt.setBytes(10, simpleByteArray);
         }
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return JDBCUtils.isNull( resultSet, offset + 0 ) ? null : resultSet.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public SimpleEntity readEntity(Cursor cursor, int offset) {
+    public SimpleEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
         SimpleEntity entity = new SimpleEntity( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // simpleBoolean
-            cursor.isNull(offset + 2) ? null : (byte) cursor.getShort(offset + 2), // simpleByte
-            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3), // simpleShort
-            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // simpleInt
-            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // simpleLong
-            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // simpleFloat
-            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // simpleDouble
-            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // simpleString
-            cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9) // simpleByteArray
+            JDBCUtils.isNull( resultSet, offset + 0 ) ? null : resultSet.getLong(offset + 0), // id
+            JDBCUtils.isNull( resultSet, offset + 1 ) ? null : resultSet.getShort(offset + 1) != 0, // simpleBoolean
+            JDBCUtils.isNull( resultSet, offset + 2 ) ? null : (byte) resultSet.getShort(offset + 2), // simpleByte
+            JDBCUtils.isNull( resultSet, offset + 3 ) ? null : resultSet.getShort(offset + 3), // simpleShort
+            JDBCUtils.isNull( resultSet, offset + 4 ) ? null : resultSet.getInt(offset + 4), // simpleInt
+            JDBCUtils.isNull( resultSet, offset + 5 ) ? null : resultSet.getLong(offset + 5), // simpleLong
+            JDBCUtils.isNull( resultSet, offset + 6 ) ? null : resultSet.getFloat(offset + 6), // simpleFloat
+            JDBCUtils.isNull( resultSet, offset + 7 ) ? null : resultSet.getDouble(offset + 7), // simpleDouble
+            JDBCUtils.isNull( resultSet, offset + 8 ) ? null : resultSet.getString(offset + 8), // simpleString
+            JDBCUtils.isNull( resultSet, offset + 9 ) ? null : resultSet.getBytes(offset + 9) // simpleByteArray
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, SimpleEntity entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setSimpleBoolean(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
-        entity.setSimpleByte(cursor.isNull(offset + 2) ? null : (byte) cursor.getShort(offset + 2));
-        entity.setSimpleShort(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3));
-        entity.setSimpleInt(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
-        entity.setSimpleLong(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
-        entity.setSimpleFloat(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
-        entity.setSimpleDouble(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
-        entity.setSimpleString(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
-        entity.setSimpleByteArray(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
+    public void readEntity(ResultSet resultSet, SimpleEntity entity, int offset) throws SQLException {
+        entity.setId(JDBCUtils.isNull( resultSet, offset + 0 ) ? null : resultSet.getLong(offset + 0));
+        entity.setSimpleBoolean(JDBCUtils.isNull( resultSet, offset + 1) ? null : resultSet.getShort(offset + 1) != 0);
+        entity.setSimpleByte(JDBCUtils.isNull( resultSet, offset + 2) ? null : (byte) resultSet.getShort(offset + 2));
+        entity.setSimpleShort(JDBCUtils.isNull( resultSet, offset + 3) ? null : resultSet.getShort(offset + 3));
+        entity.setSimpleInt(JDBCUtils.isNull( resultSet, offset + 4) ? null : resultSet.getInt(offset + 4));
+        entity.setSimpleLong(JDBCUtils.isNull( resultSet, offset + 5) ? null : resultSet.getLong(offset + 5));
+        entity.setSimpleFloat(JDBCUtils.isNull( resultSet, offset + 6) ? null : resultSet.getFloat(offset + 6));
+        entity.setSimpleDouble(JDBCUtils.isNull( resultSet, offset + 7) ? null : resultSet.getDouble(offset + 7));
+        entity.setSimpleString(JDBCUtils.isNull( resultSet, offset + 8) ? null : resultSet.getString(offset + 8));
+        entity.setSimpleByteArray(JDBCUtils.isNull( resultSet, offset + 9) ? null : resultSet.getBytes(offset + 9));
      }
     
     /** @inheritdoc */
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
index 246d9392..fbca3c8e 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
@@ -1,15 +1,16 @@
 package de.greenrobot.daotest;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 
-import de.greenrobot.daotest.SimpleEntityNotNull;
-
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
  * DAO for table SIMPLE_ENTITY_NOT_NULL.
@@ -44,10 +45,11 @@ public SimpleEntityNotNullDao(DaoConfig config, DaoSession daoSession) {
         super(config, daoSession);
     }
 
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    /** Creates the underlying database table. 
+     * @throws SQLException */
+    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'SIMPLE_ENTITY_NOT_NULL' (" + //
+        String sql = ("CREATE TABLE " + constraint + "'SIMPLE_ENTITY_NOT_NULL' (" + //
                 "'_id' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                 "'SIMPLE_BOOLEAN' INTEGER NOT NULL ," + // 1: simpleBoolean
                 "'SIMPLE_BYTE' INTEGER NOT NULL ," + // 2: simpleByte
@@ -58,6 +60,7 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
                 "'SIMPLE_DOUBLE' REAL NOT NULL ," + // 7: simpleDouble
                 "'SIMPLE_STRING' TEXT NOT NULL ," + // 8: simpleString
                 "'SIMPLE_BYTE_ARRAY' BLOB NOT NULL );"); // 9: simpleByteArray
+        JDBCUtils.execute( connection, sql );
     }
 
     /** Drops the underlying database table. */
@@ -66,59 +69,63 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, SimpleEntityNotNull entity) {
-        stmt.clearBindings();
-        stmt.bindLong(1, entity.getId());
-        stmt.bindLong(2, entity.getSimpleBoolean() ? 1l: 0l);
-        stmt.bindLong(3, entity.getSimpleByte());
-        stmt.bindLong(4, entity.getSimpleShort());
-        stmt.bindLong(5, entity.getSimpleInt());
-        stmt.bindLong(6, entity.getSimpleLong());
-        stmt.bindDouble(7, entity.getSimpleFloat());
-        stmt.bindDouble(8, entity.getSimpleDouble());
-        stmt.bindString(9, entity.getSimpleString());
-        stmt.bindBlob(10, entity.getSimpleByteArray());
+    protected void bindValues(PreparedStatement stmt, SimpleEntityNotNull entity) throws SQLException {
+//        stmt.clearBindings();
+        stmt.setLong(1, entity.getId());
+        stmt.setLong(2, entity.getSimpleBoolean() ? 1l: 0l);
+        stmt.setLong(3, entity.getSimpleByte());
+        stmt.setLong(4, entity.getSimpleShort());
+        stmt.setLong(5, entity.getSimpleInt());
+        stmt.setLong(6, entity.getSimpleLong());
+        stmt.setDouble(7, entity.getSimpleFloat());
+        stmt.setDouble(8, entity.getSimpleDouble());
+        stmt.setString(9, entity.getSimpleString());
+        stmt.setBytes(10, entity.getSimpleByteArray());
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.getLong(offset + 0);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return resultSet.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public SimpleEntityNotNull readEntity(Cursor cursor, int offset) {
+    public SimpleEntityNotNull readEntity(ResultSet resultSet, int offset) throws SQLException {
         SimpleEntityNotNull entity = new SimpleEntityNotNull( //
-            cursor.getLong(offset + 0), // id
-            cursor.getShort(offset + 1) != 0, // simpleBoolean
-            (byte) cursor.getShort(offset + 2), // simpleByte
-            cursor.getShort(offset + 3), // simpleShort
-            cursor.getInt(offset + 4), // simpleInt
-            cursor.getLong(offset + 5), // simpleLong
-            cursor.getFloat(offset + 6), // simpleFloat
-            cursor.getDouble(offset + 7), // simpleDouble
-            cursor.getString(offset + 8), // simpleString
-            cursor.getBlob(offset + 9) // simpleByteArray
+            resultSet.getLong(offset + 0), // id
+            resultSet.getShort(offset + 1) != 0, // simpleBoolean
+            (byte) resultSet.getShort(offset + 2), // simpleByte
+            resultSet.getShort(offset + 3), // simpleShort
+            resultSet.getInt(offset + 4), // simpleInt
+            resultSet.getLong(offset + 5), // simpleLong
+            resultSet.getFloat(offset + 6), // simpleFloat
+            resultSet.getDouble(offset + 7), // simpleDouble
+            resultSet.getString(offset + 8), // simpleString
+            resultSet.getBytes(offset + 9) // simpleByteArray
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, SimpleEntityNotNull entity, int offset) {
-        entity.setId(cursor.getLong(offset + 0));
-        entity.setSimpleBoolean(cursor.getShort(offset + 1) != 0);
-        entity.setSimpleByte((byte) cursor.getShort(offset + 2));
-        entity.setSimpleShort(cursor.getShort(offset + 3));
-        entity.setSimpleInt(cursor.getInt(offset + 4));
-        entity.setSimpleLong(cursor.getLong(offset + 5));
-        entity.setSimpleFloat(cursor.getFloat(offset + 6));
-        entity.setSimpleDouble(cursor.getDouble(offset + 7));
-        entity.setSimpleString(cursor.getString(offset + 8));
-        entity.setSimpleByteArray(cursor.getBlob(offset + 9));
+    public void readEntity(ResultSet resultSet, SimpleEntityNotNull entity, int offset) throws SQLException {
+        entity.setId(resultSet.getLong(offset + 0));
+        entity.setSimpleBoolean(resultSet.getShort(offset + 1) != 0);
+        entity.setSimpleByte((byte) resultSet.getShort(offset + 2));
+        entity.setSimpleShort(resultSet.getShort(offset + 3));
+        entity.setSimpleInt(resultSet.getInt(offset + 4));
+        entity.setSimpleLong(resultSet.getLong(offset + 5));
+        entity.setSimpleFloat(resultSet.getFloat(offset + 6));
+        entity.setSimpleDouble(resultSet.getDouble(offset + 7));
+        entity.setSimpleString(resultSet.getString(offset + 8));
+        entity.setSimpleByteArray(resultSet.getBytes(offset + 9));
      }
     
     /** @inheritdoc */
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
index 184203a7..0d3ceb27 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
@@ -1,15 +1,16 @@
 package de.greenrobot.daotest;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 
-import de.greenrobot.daotest.SpecialNamesEntity;
-
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
  * DAO for table SPECIAL_NAMES_ENTITY.
@@ -44,10 +45,11 @@ public SpecialNamesEntityDao(DaoConfig config, DaoSession daoSession) {
         super(config, daoSession);
     }
 
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    /** Creates the underlying database table. 
+     * @throws SQLException */
+    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'SPECIAL_NAMES_ENTITY' (" + //
+        JDBCUtils.execute( connection, "CREATE TABLE " + constraint + "'SPECIAL_NAMES_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'COUNT' TEXT," + // 1: count
                 "'SELECT' TEXT," + // 2: select
@@ -66,99 +68,103 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, SpecialNamesEntity entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, SpecialNamesEntity entity) throws SQLException {
+//        stmt.clearBindings();
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.setLong(1, id);
         }
  
         String count = entity.getCount();
         if (count != null) {
-            stmt.bindString(2, count);
+            stmt.setString(2, count);
         }
  
         String select = entity.getSelect();
         if (select != null) {
-            stmt.bindString(3, select);
+            stmt.setString(3, select);
         }
  
         String sum = entity.getSum();
         if (sum != null) {
-            stmt.bindString(4, sum);
+            stmt.setString(4, sum);
         }
  
         String avg = entity.getAvg();
         if (avg != null) {
-            stmt.bindString(5, avg);
+            stmt.setString(5, avg);
         }
  
         String join = entity.getJoin();
         if (join != null) {
-            stmt.bindString(6, join);
+            stmt.setString(6, join);
         }
  
         String distinct = entity.getDistinct();
         if (distinct != null) {
-            stmt.bindString(7, distinct);
+            stmt.setString(7, distinct);
         }
  
         String on = entity.getOn();
         if (on != null) {
-            stmt.bindString(8, on);
+            stmt.setString(8, on);
         }
  
         String index = entity.getIndex();
         if (index != null) {
-            stmt.bindString(9, index);
+            stmt.setString(9, index);
         }
  
         Integer order = entity.getOrder();
         if (order != null) {
-            stmt.bindLong(10, order);
+            stmt.setLong(10, order);
         }
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public SpecialNamesEntity readEntity(Cursor cursor, int offset) {
+    public SpecialNamesEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
         SpecialNamesEntity entity = new SpecialNamesEntity( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // count
-            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // select
-            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sum
-            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avg
-            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // join
-            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // distinct
-            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // on
-            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // index
-            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // order
+            JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0), // id
+            JDBCUtils.isNull( resultSet, offset + 1) ? null : resultSet.getString(offset + 1), // count
+            JDBCUtils.isNull( resultSet, offset + 2) ? null : resultSet.getString(offset + 2), // select
+            JDBCUtils.isNull( resultSet, offset + 3) ? null : resultSet.getString(offset + 3), // sum
+            JDBCUtils.isNull( resultSet, offset + 4) ? null : resultSet.getString(offset + 4), // avg
+            JDBCUtils.isNull( resultSet, offset + 5) ? null : resultSet.getString(offset + 5), // join
+            JDBCUtils.isNull( resultSet, offset + 6) ? null : resultSet.getString(offset + 6), // distinct
+            JDBCUtils.isNull( resultSet, offset + 7) ? null : resultSet.getString(offset + 7), // on
+            JDBCUtils.isNull( resultSet, offset + 8) ? null : resultSet.getString(offset + 8), // index
+            JDBCUtils.isNull( resultSet, offset + 9) ? null : resultSet.getInt(offset + 9) // order
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, SpecialNamesEntity entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setCount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
-        entity.setSelect(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
-        entity.setSum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
-        entity.setAvg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
-        entity.setJoin(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
-        entity.setDistinct(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
-        entity.setOn(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
-        entity.setIndex(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
-        entity.setOrder(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
+    public void readEntity(ResultSet resultSet, SpecialNamesEntity entity, int offset) throws SQLException {
+        entity.setId(JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0));
+        entity.setCount(JDBCUtils.isNull( resultSet, offset + 1) ? null : resultSet.getString(offset + 1));
+        entity.setSelect(JDBCUtils.isNull( resultSet, offset + 2) ? null : resultSet.getString(offset + 2));
+        entity.setSum(JDBCUtils.isNull( resultSet, offset + 3) ? null : resultSet.getString(offset + 3));
+        entity.setAvg(JDBCUtils.isNull( resultSet, offset + 4) ? null : resultSet.getString(offset + 4));
+        entity.setJoin(JDBCUtils.isNull( resultSet, offset + 5) ? null : resultSet.getString(offset + 5));
+        entity.setDistinct(JDBCUtils.isNull( resultSet, offset + 6) ? null : resultSet.getString(offset + 6));
+        entity.setOn(JDBCUtils.isNull( resultSet, offset + 7) ? null : resultSet.getString(offset + 7));
+        entity.setIndex(JDBCUtils.isNull( resultSet, offset + 8) ? null : resultSet.getString(offset + 8));
+        entity.setOrder(JDBCUtils.isNull( resultSet, offset + 9) ? null : resultSet.getInt(offset + 9));
      }
     
     /** @inheritdoc */
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java
index b83e409c..3a68e1de 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java
@@ -1,15 +1,14 @@
 package de.greenrobot.daotest;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 
-import de.greenrobot.daotest.SqliteMaster;
-
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
  * DAO for table SQLITE_MASTER.
@@ -39,64 +38,67 @@ public SqliteMasterDao(DaoConfig config, DaoSession daoSession) {
         super(config, daoSession);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, SqliteMaster entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, SqliteMaster entity) throws SQLException {
+//        stmt.clearBindings();
  
         String type = entity.getType();
         if (type != null) {
-            stmt.bindString(1, type);
+            stmt.setString(1, type);
         }
  
         String name = entity.getName();
         if (name != null) {
-            stmt.bindString(2, name);
+            stmt.setString(2, name);
         }
  
         String tableName = entity.getTableName();
         if (tableName != null) {
-            stmt.bindString(3, tableName);
+            stmt.setString(3, tableName);
         }
  
         Long rootpage = entity.getRootpage();
         if (rootpage != null) {
-            stmt.bindLong(4, rootpage);
+            stmt.setLong(4, rootpage);
         }
  
         String sql = entity.getSql();
         if (sql != null) {
-            stmt.bindString(5, sql);
+            stmt.setString(5, sql);
         }
     }
 
     /** @inheritdoc */
     @Override
-    public Void readKey(Cursor cursor, int offset) {
+    public Void readKey(ResultSet resultSet, int offset) {
         return null;
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public SqliteMaster readEntity(Cursor cursor, int offset) {
+    public SqliteMaster readEntity(ResultSet resultSet, int offset) throws SQLException {
         SqliteMaster entity = new SqliteMaster( //
-            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // type
-            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
-            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tableName
-            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // rootpage
-            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // sql
+            JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getString(offset + 0), // type
+            JDBCUtils.isNull(resultSet, offset + 1) ? null : resultSet.getString(offset + 1), // name
+            JDBCUtils.isNull(resultSet, offset + 2) ? null : resultSet.getString(offset + 2), // tableName
+            JDBCUtils.isNull(resultSet, offset + 3) ? null : resultSet.getLong(offset + 3), // rootpage
+            JDBCUtils.isNull(resultSet, offset + 4) ? null : resultSet.getString(offset + 4) // sql
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, SqliteMaster entity, int offset) {
-        entity.setType(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
-        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
-        entity.setTableName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
-        entity.setRootpage(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
-        entity.setSql(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
+    public void readEntity(ResultSet resultSet, SqliteMaster entity, int offset) throws SQLException {
+        entity.setType(JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getString(offset + 0));
+        entity.setName(JDBCUtils.isNull(resultSet, offset + 1) ? null : resultSet.getString(offset + 1));
+        entity.setTableName(JDBCUtils.isNull(resultSet, offset + 2) ? null : resultSet.getString(offset + 2));
+        entity.setRootpage(JDBCUtils.isNull(resultSet, offset + 3) ? null : resultSet.getLong(offset + 3));
+        entity.setSql(JDBCUtils.isNull(resultSet, offset + 4) ? null : resultSet.getString(offset + 4));
      }
     
     /** @inheritdoc */
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
index bdf2cd83..59215bde 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
@@ -1,15 +1,16 @@
 package de.greenrobot.daotest;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 
-import de.greenrobot.daotest.StringKeyValueEntity;
-
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
  * DAO for table STRING_KEY_VALUE_ENTITY.
@@ -36,10 +37,11 @@ public StringKeyValueEntityDao(DaoConfig config, DaoSession daoSession) {
         super(config, daoSession);
     }
 
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    /** Creates the underlying database table. 
+     * @throws SQLException */
+    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'STRING_KEY_VALUE_ENTITY' (" + //
+        JDBCUtils.execute(connection, "CREATE TABLE " + constraint + "'STRING_KEY_VALUE_ENTITY' (" + //
                 "'KEY' TEXT PRIMARY KEY NOT NULL ," + // 0: key
                 "'VALUE' TEXT);"); // 1: value
     }
@@ -50,43 +52,47 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, StringKeyValueEntity entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, StringKeyValueEntity entity) throws SQLException {
+//        stmt.clearBindings();
  
         String key = entity.getKey();
         if (key != null) {
-            stmt.bindString(1, key);
+            stmt.setString(1, key);
         }
  
         String value = entity.getValue();
         if (value != null) {
-            stmt.bindString(2, value);
+            stmt.setString(2, value);
         }
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public String readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
+    public String readKey(ResultSet resultSet, int offset) throws SQLException {
+        return JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getString(offset + 0);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public StringKeyValueEntity readEntity(Cursor cursor, int offset) {
+    public StringKeyValueEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
         StringKeyValueEntity entity = new StringKeyValueEntity( //
-            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // key
-            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // value
+            JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getString(offset + 0), // key
+            JDBCUtils.isNull(resultSet, offset + 1) ? null : resultSet.getString(offset + 1) // value
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, StringKeyValueEntity entity, int offset) {
-        entity.setKey(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
-        entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
+    public void readEntity(ResultSet resultSet, StringKeyValueEntity entity, int offset) throws SQLException {
+        entity.setKey(JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getString(offset + 0));
+        entity.setValue(JDBCUtils.isNull(resultSet, offset + 1) ? null : resultSet.getString(offset + 1));
      }
     
     /** @inheritdoc */
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
index 1287ec92..72eb44bc 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
@@ -2,18 +2,15 @@
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
+import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
-
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 
-import de.greenrobot.daotest.TestEntity;
-
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
  * DAO for table TEST_ENTITY.
@@ -83,84 +80,88 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, TestEntity entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, TestEntity entity) throws SQLException {
+//        stmt.clearBindings();
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.setLong(1, id);
         }
-        stmt.bindLong(2, entity.getSimpleInt());
+        stmt.setLong(2, entity.getSimpleInt());
  
         Integer simpleInteger = entity.getSimpleInteger();
         if (simpleInteger != null) {
-            stmt.bindLong(3, simpleInteger);
+            stmt.setLong(3, simpleInteger);
         }
-        stmt.bindString(4, entity.getSimpleStringNotNull());
+        stmt.setString(4, entity.getSimpleStringNotNull());
  
         String simpleString = entity.getSimpleString();
         if (simpleString != null) {
-            stmt.bindString(5, simpleString);
+            stmt.setString(5, simpleString);
         }
  
         String indexedString = entity.getIndexedString();
         if (indexedString != null) {
-            stmt.bindString(6, indexedString);
+            stmt.setString(6, indexedString);
         }
  
         String indexedStringAscUnique = entity.getIndexedStringAscUnique();
         if (indexedStringAscUnique != null) {
-            stmt.bindString(7, indexedStringAscUnique);
+            stmt.setString(7, indexedStringAscUnique);
         }
  
         java.util.Date simpleDate = entity.getSimpleDate();
         if (simpleDate != null) {
-            stmt.bindLong(8, simpleDate.getTime());
+            stmt.setLong(8, simpleDate.getTime());
         }
  
         Boolean simpleBoolean = entity.getSimpleBoolean();
         if (simpleBoolean != null) {
-            stmt.bindLong(9, simpleBoolean ? 1l: 0l);
+            stmt.setLong(9, simpleBoolean ? 1l: 0l);
         }
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public TestEntity readEntity(Cursor cursor, int offset) {
+    public TestEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
         TestEntity entity = new TestEntity( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.getInt(offset + 1), // simpleInt
-            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // simpleInteger
-            cursor.getString(offset + 3), // simpleStringNotNull
-            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // simpleString
-            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // indexedString
-            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // indexedStringAscUnique
-            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // simpleDate
-            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // simpleBoolean
+            JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0), // id
+            resultSet.getInt(offset + 1), // simpleInt
+            JDBCUtils.isNull(resultSet, offset + 2) ? null : resultSet.getInt(offset + 2), // simpleInteger
+            resultSet.getString(offset + 3), // simpleStringNotNull
+            JDBCUtils.isNull(resultSet, offset + 4) ? null : resultSet.getString(offset + 4), // simpleString
+            JDBCUtils.isNull(resultSet, offset + 5) ? null : resultSet.getString(offset + 5), // indexedString
+            JDBCUtils.isNull(resultSet, offset + 6) ? null : resultSet.getString(offset + 6), // indexedStringAscUnique
+            JDBCUtils.isNull(resultSet, offset + 7) ? null : new java.util.Date(resultSet.getLong(offset + 7)), // simpleDate
+            JDBCUtils.isNull(resultSet, offset + 8) ? null : resultSet.getShort(offset + 8) != 0 // simpleBoolean
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, TestEntity entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setSimpleInt(cursor.getInt(offset + 1));
-        entity.setSimpleInteger(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
-        entity.setSimpleStringNotNull(cursor.getString(offset + 3));
-        entity.setSimpleString(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
-        entity.setIndexedString(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
-        entity.setIndexedStringAscUnique(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
-        entity.setSimpleDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
-        entity.setSimpleBoolean(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
+    public void readEntity(ResultSet resultSet, TestEntity entity, int offset) throws SQLException {
+        entity.setId(JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0));
+        entity.setSimpleInt(resultSet.getInt(offset + 1));
+        entity.setSimpleInteger(JDBCUtils.isNull(resultSet, offset + 2) ? null : resultSet.getInt(offset + 2));
+        entity.setSimpleStringNotNull(resultSet.getString(offset + 3));
+        entity.setSimpleString(JDBCUtils.isNull(resultSet, offset + 4) ? null : resultSet.getString(offset + 4));
+        entity.setIndexedString(JDBCUtils.isNull(resultSet, offset + 5) ? null : resultSet.getString(offset + 5));
+        entity.setIndexedStringAscUnique(JDBCUtils.isNull(resultSet, offset + 6) ? null : resultSet.getString(offset + 6));
+        entity.setSimpleDate(JDBCUtils.isNull(resultSet, offset + 7) ? null : new java.util.Date(resultSet.getLong(offset + 7)));
+        entity.setSimpleBoolean(JDBCUtils.isNull(resultSet, offset + 8) ? null : resultSet.getShort(offset + 8) != 0);
      }
     
     /** @inheritdoc */
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntity.java b/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntity.java
index c88b577f..fc0e209b 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntity.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntity.java
@@ -1,7 +1,9 @@
 package de.greenrobot.daotest;
 
+import java.sql.SQLException;
 import java.util.List;
-import de.greenrobot.daotest.DaoSession;
+
+import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.DaoException;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
@@ -58,8 +60,9 @@ public void setSourceJoinProperty(String sourceJoinProperty) {
         this.sourceJoinProperty = sourceJoinProperty;
     }
 
-    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
-    public List<ToManyTargetEntity> getToManyTargetEntityList() {
+    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. 
+     * @throws SQLException */
+    public List<ToManyTargetEntity> getToManyTargetEntityList() throws SQLException {
         if (toManyTargetEntityList == null) {
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
@@ -80,8 +83,9 @@ public synchronized void resetToManyTargetEntityList() {
         toManyTargetEntityList = null;
     }
 
-    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
-    public List<ToManyTargetEntity> getToManyDescList() {
+    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. 
+     * @throws SQLException */
+    public List<ToManyTargetEntity> getToManyDescList() throws SQLException {
         if (toManyDescList == null) {
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
@@ -102,8 +106,9 @@ public synchronized void resetToManyDescList() {
         toManyDescList = null;
     }
 
-    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
-    public List<ToManyTargetEntity> getToManyByJoinProperty() {
+    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. 
+     * @throws SQLException */
+    public List<ToManyTargetEntity> getToManyByJoinProperty() throws SQLException {
         if (toManyByJoinProperty == null) {
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
@@ -124,8 +129,9 @@ public synchronized void resetToManyByJoinProperty() {
         toManyByJoinProperty = null;
     }
 
-    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
-    public List<ToManyTargetEntity> getToManyJoinTwo() {
+    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. 
+     * @throws SQLException */
+    public List<ToManyTargetEntity> getToManyJoinTwo() throws SQLException {
         if (toManyJoinTwo == null) {
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
@@ -146,24 +152,27 @@ public synchronized void resetToManyJoinTwo() {
         toManyJoinTwo = null;
     }
 
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
-    public void delete() {
+    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. 
+     * @throws SQLException */
+    public void delete() throws SQLException {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }    
         myDao.delete(this);
     }
 
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
-    public void update() {
+    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. 
+     * @throws SQLException */
+    public void update() throws SQLException {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }    
         myDao.update(this);
     }
 
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
-    public void refresh() {
+    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. 
+     * @throws SQLException */
+    public void refresh() throws SQLException {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }    
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
index 953c2ad0..d3a2282b 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
@@ -1,15 +1,16 @@
 package de.greenrobot.daotest;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 
-import de.greenrobot.daotest.ToManyEntity;
-
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
  * DAO for table TO_MANY_ENTITY.
@@ -39,10 +40,11 @@ public ToManyEntityDao(DaoConfig config, DaoSession daoSession) {
         this.daoSession = daoSession;
     }
 
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    /** Creates the underlying database table. 
+     * @throws SQLException */
+    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'TO_MANY_ENTITY' (" + //
+        JDBCUtils.execute( connection, "CREATE TABLE " + constraint + "'TO_MANY_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'SOURCE_JOIN_PROPERTY' TEXT);"); // 1: sourceJoinProperty
     }
@@ -53,19 +55,20 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ToManyEntity entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, ToManyEntity entity) throws SQLException {
+//        stmt.clearBindings();
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.setLong(1, id);
         }
  
         String sourceJoinProperty = entity.getSourceJoinProperty();
         if (sourceJoinProperty != null) {
-            stmt.bindString(2, sourceJoinProperty);
+            stmt.setString(2, sourceJoinProperty);
         }
     }
 
@@ -75,27 +78,30 @@ protected void attachEntity(ToManyEntity entity) {
         entity.__setDaoSession(daoSession);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public ToManyEntity readEntity(Cursor cursor, int offset) {
+    public ToManyEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
         ToManyEntity entity = new ToManyEntity( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // sourceJoinProperty
+            JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0), // id
+            JDBCUtils.isNull( resultSet, offset + 1) ? null : resultSet.getString(offset + 1) // sourceJoinProperty
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, ToManyEntity entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setSourceJoinProperty(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
+    public void readEntity(ResultSet resultSet, ToManyEntity entity, int offset) throws SQLException {
+        entity.setId(JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0));
+        entity.setSourceJoinProperty(JDBCUtils.isNull( resultSet, offset + 1) ? null : resultSet.getString(offset + 1));
      }
     
     /** @inheritdoc */
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
index ff44764b..edafc550 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
@@ -1,18 +1,19 @@
 package de.greenrobot.daotest;
 
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 import java.util.List;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
 
-import de.greenrobot.daotest.ToManyTargetEntity;
-
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
  * DAO for table TO_MANY_TARGET_ENTITY.
@@ -45,10 +46,11 @@ public ToManyTargetEntityDao(DaoConfig config, DaoSession daoSession) {
         super(config, daoSession);
     }
 
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    /** Creates the underlying database table. 
+     * @throws SQLException */
+    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'TO_MANY_TARGET_ENTITY' (" + //
+        JDBCUtils.execute( connection, "CREATE TABLE " + constraint + "'TO_MANY_TARGET_ENTITY' (" + //
                 "'TO_MANY_ID' INTEGER," + // 0: toManyId
                 "'TO_MANY_ID_DESC' INTEGER," + // 1: toManyIdDesc
                 "'_id' INTEGER PRIMARY KEY ," + // 2: id
@@ -61,57 +63,61 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ToManyTargetEntity entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, ToManyTargetEntity entity) throws SQLException {
+//        stmt.clearBindings();
  
         Long toManyId = entity.getToManyId();
         if (toManyId != null) {
-            stmt.bindLong(1, toManyId);
+            stmt.setLong(1, toManyId);
         }
  
         Long toManyIdDesc = entity.getToManyIdDesc();
         if (toManyIdDesc != null) {
-            stmt.bindLong(2, toManyIdDesc);
+            stmt.setLong(2, toManyIdDesc);
         }
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(3, id);
+            stmt.setLong(3, id);
         }
  
         String targetJoinProperty = entity.getTargetJoinProperty();
         if (targetJoinProperty != null) {
-            stmt.bindString(4, targetJoinProperty);
+            stmt.setString(4, targetJoinProperty);
         }
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return JDBCUtils.isNull( resultSet, offset + 2) ? null : resultSet.getLong(offset + 2);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public ToManyTargetEntity readEntity(Cursor cursor, int offset) {
+    public ToManyTargetEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
         ToManyTargetEntity entity = new ToManyTargetEntity( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // toManyId
-            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // toManyIdDesc
-            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // id
-            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // targetJoinProperty
+            JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0), // toManyId
+            JDBCUtils.isNull( resultSet, offset + 1) ? null : resultSet.getLong(offset + 1), // toManyIdDesc
+            JDBCUtils.isNull( resultSet, offset + 2) ? null : resultSet.getLong(offset + 2), // id
+            JDBCUtils.isNull( resultSet, offset + 3) ? null : resultSet.getString(offset + 3) // targetJoinProperty
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, ToManyTargetEntity entity, int offset) {
-        entity.setToManyId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setToManyIdDesc(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
-        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
-        entity.setTargetJoinProperty(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
+    public void readEntity(ResultSet resultSet, ToManyTargetEntity entity, int offset) throws SQLException {
+        entity.setToManyId(JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0));
+        entity.setToManyIdDesc(JDBCUtils.isNull( resultSet, offset + 1) ? null : resultSet.getLong(offset + 1));
+        entity.setId(JDBCUtils.isNull( resultSet, offset + 2) ? null : resultSet.getLong(offset + 2));
+        entity.setTargetJoinProperty(JDBCUtils.isNull( resultSet, offset + 3) ? null : resultSet.getString(offset + 3));
      }
     
     /** @inheritdoc */
@@ -137,8 +143,9 @@ protected boolean isEntityUpdateable() {
         return true;
     }
     
-    /** Internal query to resolve the "toManyTargetEntityList" to-many relationship of ToManyEntity. */
-    public List<ToManyTargetEntity> _queryToManyEntity_ToManyTargetEntityList(Long toManyId) {
+    /** Internal query to resolve the "toManyTargetEntityList" to-many relationship of ToManyEntity. 
+     * @throws SQLException */
+    public List<ToManyTargetEntity> _queryToManyEntity_ToManyTargetEntityList(Long toManyId) throws SQLException {
         synchronized (this) {
             if (toManyEntity_ToManyTargetEntityListQuery == null) {
                 QueryBuilder<ToManyTargetEntity> queryBuilder = queryBuilder();
@@ -152,8 +159,9 @@ protected boolean isEntityUpdateable() {
         return query.list();
     }
 
-    /** Internal query to resolve the "toManyDescList" to-many relationship of ToManyEntity. */
-    public List<ToManyTargetEntity> _queryToManyEntity_ToManyDescList(Long toManyIdDesc) {
+    /** Internal query to resolve the "toManyDescList" to-many relationship of ToManyEntity. 
+     * @throws SQLException */
+    public List<ToManyTargetEntity> _queryToManyEntity_ToManyDescList(Long toManyIdDesc) throws SQLException {
         synchronized (this) {
             if (toManyEntity_ToManyDescListQuery == null) {
                 QueryBuilder<ToManyTargetEntity> queryBuilder = queryBuilder();
@@ -167,8 +175,9 @@ protected boolean isEntityUpdateable() {
         return query.list();
     }
 
-    /** Internal query to resolve the "toManyByJoinProperty" to-many relationship of ToManyEntity. */
-    public List<ToManyTargetEntity> _queryToManyEntity_ToManyByJoinProperty(String targetJoinProperty) {
+    /** Internal query to resolve the "toManyByJoinProperty" to-many relationship of ToManyEntity. 
+     * @throws SQLException */
+    public List<ToManyTargetEntity> _queryToManyEntity_ToManyByJoinProperty(String targetJoinProperty) throws SQLException {
         synchronized (this) {
             if (toManyEntity_ToManyByJoinPropertyQuery == null) {
                 QueryBuilder<ToManyTargetEntity> queryBuilder = queryBuilder();
@@ -182,8 +191,9 @@ protected boolean isEntityUpdateable() {
         return query.list();
     }
 
-    /** Internal query to resolve the "toManyJoinTwo" to-many relationship of ToManyEntity. */
-    public List<ToManyTargetEntity> _queryToManyEntity_ToManyJoinTwo(Long toManyId, String targetJoinProperty) {
+    /** Internal query to resolve the "toManyJoinTwo" to-many relationship of ToManyEntity. 
+     * @throws SQLException */
+    public List<ToManyTargetEntity> _queryToManyEntity_ToManyJoinTwo(Long toManyId, String targetJoinProperty) throws SQLException {
         synchronized (this) {
             if (toManyEntity_ToManyJoinTwoQuery == null) {
                 QueryBuilder<ToManyTargetEntity> queryBuilder = queryBuilder();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntity.java b/DaoTest/src-gen/de/greenrobot/daotest/TreeEntity.java
index 8b4d0ca3..52accf78 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntity.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/TreeEntity.java
@@ -1,5 +1,6 @@
 package de.greenrobot.daotest;
 
+import java.sql.SQLException;
 import java.util.List;
 import de.greenrobot.daotest.DaoSession;
 import de.greenrobot.dao.DaoException;
@@ -58,8 +59,9 @@ public void setParentId(Long parentId) {
         this.parentId = parentId;
     }
 
-    /** To-one relationship, resolved on first access. */
-    public TreeEntity getParent() {
+    /** To-one relationship, resolved on first access. 
+     * @throws SQLException */
+    public TreeEntity getParent() throws SQLException {
         Long __key = this.parentId;
         if (parent__resolvedKey == null || !parent__resolvedKey.equals(__key)) {
             if (daoSession == null) {
@@ -83,8 +85,9 @@ public void setParent(TreeEntity parent) {
         }
     }
 
-    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
-    public List<TreeEntity> getChildren() {
+    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. 
+     * @throws SQLException */
+    public List<TreeEntity> getChildren() throws SQLException {
         if (children == null) {
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
@@ -105,24 +108,27 @@ public synchronized void resetChildren() {
         children = null;
     }
 
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
-    public void delete() {
+    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. 
+     * @throws SQLException */
+    public void delete() throws SQLException {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }    
         myDao.delete(this);
     }
 
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
-    public void update() {
+    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. 
+     * @throws SQLException */
+    public void update() throws SQLException {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }    
         myDao.update(this);
     }
 
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
-    public void refresh() {
+    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. 
+     * @throws SQLException */
+    public void refresh() throws SQLException {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }    
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
index 14d3521a..d68000ef 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
@@ -1,20 +1,21 @@
 package de.greenrobot.daotest;
 
-import java.util.List;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 import java.util.ArrayList;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import java.util.List;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.SqlUtils;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.internal.SqlUtils;
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
 
-import de.greenrobot.daotest.TreeEntity;
-
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
  * DAO for table TREE_ENTITY.
@@ -45,10 +46,11 @@ public TreeEntityDao(DaoConfig config, DaoSession daoSession) {
         this.daoSession = daoSession;
     }
 
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    /** Creates the underlying database table. 
+     * @throws SQLException */
+    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'TREE_ENTITY' (" + //
+        JDBCUtils.execute( connection, "CREATE TABLE " + constraint + "'TREE_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'PARENT_ID' INTEGER);"); // 1: parentId
     }
@@ -59,19 +61,20 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, TreeEntity entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, TreeEntity entity) throws SQLException {
+//        stmt.clearBindings();
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.setLong(1, id);
         }
  
         Long parentId = entity.getParentId();
         if (parentId != null) {
-            stmt.bindLong(2, parentId);
+            stmt.setLong(2, parentId);
         }
     }
 
@@ -81,27 +84,30 @@ protected void attachEntity(TreeEntity entity) {
         entity.__setDaoSession(daoSession);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public TreeEntity readEntity(Cursor cursor, int offset) {
+    public TreeEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
         TreeEntity entity = new TreeEntity( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // parentId
+            JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0), // id
+            JDBCUtils.isNull( resultSet, offset + 1) ? null : resultSet.getLong(offset + 1) // parentId
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, TreeEntity entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setParentId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
+    public void readEntity(ResultSet resultSet, TreeEntity entity, int offset) throws SQLException {
+        entity.setId(JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0));
+        entity.setParentId(JDBCUtils.isNull( resultSet, offset + 1) ? null : resultSet.getLong(offset + 1));
      }
     
     /** @inheritdoc */
@@ -127,8 +133,9 @@ protected boolean isEntityUpdateable() {
         return true;
     }
     
-    /** Internal query to resolve the "children" to-many relationship of TreeEntity. */
-    public List<TreeEntity> _queryTreeEntity_Children(Long parentId) {
+    /** Internal query to resolve the "children" to-many relationship of TreeEntity. 
+     * @throws SQLException */
+    public List<TreeEntity> _queryTreeEntity_Children(Long parentId) throws SQLException {
         synchronized (this) {
             if (treeEntity_ChildrenQuery == null) {
                 QueryBuilder<TreeEntity> queryBuilder = queryBuilder();
@@ -157,17 +164,17 @@ protected String getSelectDeep() {
         return selectDeep;
     }
     
-    protected TreeEntity loadCurrentDeep(Cursor cursor, boolean lock) {
-        TreeEntity entity = loadCurrent(cursor, 0, lock);
+    protected TreeEntity loadCurrentDeep(ResultSet resultSet, boolean lock) throws SQLException {
+        TreeEntity entity = loadCurrent(resultSet, 0, lock);
         int offset = getAllColumns().length;
 
-        TreeEntity parent = loadCurrentOther(daoSession.getTreeEntityDao(), cursor, offset);
+        TreeEntity parent = loadCurrentOther(daoSession.getTreeEntityDao(), resultSet, offset);
         entity.setParent(parent);
 
         return entity;    
     }
 
-    public TreeEntity loadDeep(Long key) {
+    public TreeEntity loadDeep(Long key) throws SQLException {
         assertSinglePk();
         if (key == null) {
             return null;
@@ -178,36 +185,37 @@ public TreeEntity loadDeep(Long key) {
         SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
         String sql = builder.toString();
         
-        String[] keyArray = new String[] { key.toString() };
-        Cursor cursor = db.rawQuery(sql, keyArray);
+        Object[] keyArray = new Object[] { key.toString() };
+        ResultSet resultSet = JDBCUtils.query( connection, sql, keyArray );
         
         try {
-            boolean available = cursor.moveToFirst();
+            boolean available = resultSet.next();
             if (!available) {
                 return null;
-            } else if (!cursor.isLast()) {
-                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
+            } else if (!resultSet.isLast()) {
+                throw new IllegalStateException("Expected unique result, but count was " + resultSet.getFetchSize());
             }
-            return loadCurrentDeep(cursor, true);
+            return loadCurrentDeep(resultSet, true);
         } finally {
-            cursor.close();
+            resultSet.close();
         }
     }
     
-    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
-    public List<TreeEntity> loadAllDeepFromCursor(Cursor cursor) {
-        int count = cursor.getCount();
+    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. 
+     * @throws SQLException */
+    public List<TreeEntity> loadAllDeepFromCursor(ResultSet resultSet) throws SQLException {
+        int count = resultSet.getFetchSize();
         List<TreeEntity> list = new ArrayList<TreeEntity>(count);
         
-        if (cursor.moveToFirst()) {
+        if (resultSet.first()) {
             if (identityScope != null) {
                 identityScope.lock();
                 identityScope.reserveRoom(count);
             }
             try {
                 do {
-                    list.add(loadCurrentDeep(cursor, false));
-                } while (cursor.moveToNext());
+                    list.add(loadCurrentDeep(resultSet, false));
+                } while (resultSet.next());
             } finally {
                 if (identityScope != null) {
                     identityScope.unlock();
@@ -217,19 +225,20 @@ public TreeEntity loadDeep(Long key) {
         return list;
     }
     
-    protected List<TreeEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
+    protected List<TreeEntity> loadDeepAllAndCloseCursor(ResultSet resultSet) throws SQLException {
         try {
-            return loadAllDeepFromCursor(cursor);
+            return loadAllDeepFromCursor(resultSet);
         } finally {
-            cursor.close();
+            resultSet.close();
         }
     }
     
 
-    /** A raw-style query where you can pass any WHERE clause and arguments. */
-    public List<TreeEntity> queryDeep(String where, String... selectionArg) {
-        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
-        return loadDeepAllAndCloseCursor(cursor);
+    /** A raw-style query where you can pass any WHERE clause and arguments. 
+     * @throws SQLException */
+    public List<TreeEntity> queryDeep(String where, String... selectionArg) throws SQLException {
+        ResultSet resultset = JDBCUtils.query(connection, ( getSelectDeep() + where ), (Object[]) selectionArg);
+        return loadDeepAllAndCloseCursor(resultset);
     }
  
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
index 699914c8..582e859b 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
@@ -1,5 +1,7 @@
 package de.greenrobot.daotest2.dao;
 
+import java.sql.Connection;
+
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteDatabase.CursorFactory;
@@ -63,8 +65,8 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
         }
     }
 
-    public DaoMaster(SQLiteDatabase db) {
-        super(db, SCHEMA_VERSION);
+    public DaoMaster(Connection connection) {
+        super(connection, SCHEMA_VERSION);
         registerDaoClass(KeepEntityDao.class);
         registerDaoClass(ToManyTarget2Dao.class);
         registerDaoClass(ToOneTarget2Dao.class);
@@ -72,11 +74,11 @@ public DaoMaster(SQLiteDatabase db) {
     }
     
     public DaoSession newSession() {
-        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
+        return new DaoSession(connection, IdentityScopeType.Session, daoConfigMap);
     }
     
     public DaoSession newSession(IdentityScopeType type) {
-        return new DaoSession(db, type, daoConfigMap);
+        return new DaoSession(connection, type, daoConfigMap);
     }
     
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoSession.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoSession.java
index ecd6983b..81a96cb8 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoSession.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoSession.java
@@ -1,23 +1,18 @@
 package de.greenrobot.daotest2.dao;
 
-import android.database.sqlite.SQLiteDatabase;
-
+import java.sql.Connection;
 import java.util.Map;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.AbstractDaoSession;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 import de.greenrobot.dao.internal.DaoConfig;
-
 import de.greenrobot.daotest2.KeepEntity;
 import de.greenrobot.daotest2.ToManyTarget2;
-import de.greenrobot.daotest2.to1_specialentity.ToOneTarget2;
+import de.greenrobot.daotest2.specialdao.RelationSource2Dao;
 import de.greenrobot.daotest2.specialentity.RelationSource2;
-
-import de.greenrobot.daotest2.dao.KeepEntityDao;
-import de.greenrobot.daotest2.dao.ToManyTarget2Dao;
 import de.greenrobot.daotest2.to1_specialdao.ToOneTarget2Dao;
-import de.greenrobot.daotest2.specialdao.RelationSource2Dao;
+import de.greenrobot.daotest2.to1_specialentity.ToOneTarget2;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 
@@ -38,9 +33,9 @@
     private final ToOneTarget2Dao toOneTarget2Dao;
     private final RelationSource2Dao relationSource2Dao;
 
-    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
+    public DaoSession(Connection connection, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
-        super(db);
+        super(connection);
 
         keepEntityDaoConfig = daoConfigMap.get(KeepEntityDao.class).clone();
         keepEntityDaoConfig.initIdentityScope(type);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
index f8de31aa..b5b02b12 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
@@ -1,13 +1,14 @@
 package de.greenrobot.daotest2.dao;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
-
 import de.greenrobot.daotest2.KeepEntity;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
@@ -48,36 +49,40 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, KeepEntity entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, KeepEntity entity) throws SQLException {
+//        stmt.clearBindings();
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.setLong(1, id);
         }
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public KeepEntity readEntity(Cursor cursor, int offset) {
+    public KeepEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
         KeepEntity entity = new KeepEntity( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) // id
+        		JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0) // id
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, KeepEntity entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
+    public void readEntity(ResultSet resultSet, KeepEntity entity, int offset) throws SQLException {
+        entity.setId(JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0));
      }
     
     /** @inheritdoc */
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
index a55df346..a0fdadae 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
@@ -1,16 +1,17 @@
 package de.greenrobot.daotest2.dao;
 
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 import java.util.List;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
-
 import de.greenrobot.daotest2.ToManyTarget2;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
@@ -54,43 +55,47 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ToManyTarget2 entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, ToManyTarget2 entity) throws SQLException {
+//        stmt.clearBindings();
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.setLong(1, id);
         }
  
         Long fkId = entity.getFkId();
         if (fkId != null) {
-            stmt.bindLong(2, fkId);
+            stmt.setLong(2, fkId);
         }
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public ToManyTarget2 readEntity(Cursor cursor, int offset) {
+    public ToManyTarget2 readEntity(ResultSet resultSet, int offset) throws SQLException {
         ToManyTarget2 entity = new ToManyTarget2( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // fkId
+            JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0), // id
+            JDBCUtils.isNull(resultSet, offset + 1) ? null : resultSet.getLong(offset + 1) // fkId
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, ToManyTarget2 entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setFkId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
+    public void readEntity(ResultSet resultSet, ToManyTarget2 entity, int offset) throws SQLException {
+        entity.setId(JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0));
+        entity.setFkId(JDBCUtils.isNull(resultSet, offset + 1) ? null : resultSet.getLong(offset + 1));
      }
     
     /** @inheritdoc */
@@ -116,8 +121,9 @@ protected boolean isEntityUpdateable() {
         return true;
     }
     
-    /** Internal query to resolve the "toManyTarget2List" to-many relationship of RelationSource2. */
-    public List<ToManyTarget2> _queryRelationSource2_ToManyTarget2List(Long fkId) {
+    /** Internal query to resolve the "toManyTarget2List" to-many relationship of RelationSource2. 
+     * @throws SQLException */
+    public List<ToManyTarget2> _queryRelationSource2_ToManyTarget2List(Long fkId) throws SQLException {
         synchronized (this) {
             if (relationSource2_ToManyTarget2ListQuery == null) {
                 QueryBuilder<ToManyTarget2> queryBuilder = queryBuilder();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
index 107160bc..29e99710 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
@@ -1,21 +1,20 @@
 package de.greenrobot.daotest2.specialdao;
 
-import java.util.List;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 import java.util.ArrayList;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import java.util.List;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.SqlUtils;
 import de.greenrobot.dao.internal.DaoConfig;
-
+import de.greenrobot.dao.internal.SqlUtils;
 import de.greenrobot.daotest2.dao.DaoSession;
-
-import de.greenrobot.daotest2.to1_specialentity.ToOneTarget2;
-
 import de.greenrobot.daotest2.specialentity.RelationSource2;
+import de.greenrobot.daotest2.to1_specialentity.ToOneTarget2;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -60,19 +59,20 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, RelationSource2 entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, RelationSource2 entity) throws SQLException {
+//        stmt.clearBindings();
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.setLong(1, id);
         }
  
         Long toOneId = entity.getToOneId();
         if (toOneId != null) {
-            stmt.bindLong(2, toOneId);
+            stmt.setLong(2, toOneId);
         }
     }
 
@@ -82,27 +82,30 @@ protected void attachEntity(RelationSource2 entity) {
         entity.__setDaoSession(daoSession);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public RelationSource2 readEntity(Cursor cursor, int offset) {
+    public RelationSource2 readEntity(ResultSet resultSet, int offset) throws SQLException {
         RelationSource2 entity = new RelationSource2( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // toOneId
+            JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0), // id
+            JDBCUtils.isNull( resultSet, offset + 1) ? null : resultSet.getLong(offset + 1) // toOneId
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, RelationSource2 entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setToOneId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
+    public void readEntity(ResultSet resultSet, RelationSource2 entity, int offset) throws SQLException {
+        entity.setId(JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0));
+        entity.setToOneId(JDBCUtils.isNull( resultSet, offset + 1) ? null : resultSet.getLong(offset + 1));
      }
     
     /** @inheritdoc */
@@ -144,17 +147,17 @@ protected String getSelectDeep() {
         return selectDeep;
     }
     
-    protected RelationSource2 loadCurrentDeep(Cursor cursor, boolean lock) {
-        RelationSource2 entity = loadCurrent(cursor, 0, lock);
+    protected RelationSource2 loadCurrentDeep(ResultSet resultSet, boolean lock) throws SQLException {
+        RelationSource2 entity = loadCurrent(resultSet, 0, lock);
         int offset = getAllColumns().length;
 
-        ToOneTarget2 toOneTarget2 = loadCurrentOther(daoSession.getToOneTarget2Dao(), cursor, offset);
+        ToOneTarget2 toOneTarget2 = loadCurrentOther(daoSession.getToOneTarget2Dao(), resultSet, offset);
         entity.setToOneTarget2(toOneTarget2);
 
         return entity;    
     }
 
-    public RelationSource2 loadDeep(Long key) {
+    public RelationSource2 loadDeep(Long key) throws SQLException {
         assertSinglePk();
         if (key == null) {
             return null;
@@ -166,35 +169,36 @@ public RelationSource2 loadDeep(Long key) {
         String sql = builder.toString();
         
         String[] keyArray = new String[] { key.toString() };
-        Cursor cursor = db.rawQuery(sql, keyArray);
+        ResultSet resultSet = JDBCUtils.query( connection, sql, (Object[]) keyArray );
         
         try {
-            boolean available = cursor.moveToFirst();
+            boolean available = resultSet.first();
             if (!available) {
                 return null;
-            } else if (!cursor.isLast()) {
-                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
+            } else if (!resultSet.isLast()) {
+                throw new IllegalStateException("Expected unique result, but count was " + resultSet.getFetchSize());
             }
-            return loadCurrentDeep(cursor, true);
+            return loadCurrentDeep(resultSet, true);
         } finally {
-            cursor.close();
+            resultSet.close();
         }
     }
     
-    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
-    public List<RelationSource2> loadAllDeepFromCursor(Cursor cursor) {
-        int count = cursor.getCount();
+    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. 
+     * @throws SQLException */
+    public List<RelationSource2> loadAllDeepFromCursor(ResultSet resultSet) throws SQLException {
+        int count = resultSet.getFetchSize();
         List<RelationSource2> list = new ArrayList<RelationSource2>(count);
         
-        if (cursor.moveToFirst()) {
+        if (resultSet.first()) {
             if (identityScope != null) {
                 identityScope.lock();
                 identityScope.reserveRoom(count);
             }
             try {
                 do {
-                    list.add(loadCurrentDeep(cursor, false));
-                } while (cursor.moveToNext());
+                    list.add(loadCurrentDeep(resultSet, false));
+                } while (resultSet.next());
             } finally {
                 if (identityScope != null) {
                     identityScope.unlock();
@@ -204,19 +208,20 @@ public RelationSource2 loadDeep(Long key) {
         return list;
     }
     
-    protected List<RelationSource2> loadDeepAllAndCloseCursor(Cursor cursor) {
+    protected List<RelationSource2> loadDeepAllAndCloseCursor(ResultSet resultSet) throws SQLException {
         try {
-            return loadAllDeepFromCursor(cursor);
+            return loadAllDeepFromCursor(resultSet);
         } finally {
-            cursor.close();
+            resultSet.close();
         }
     }
     
 
-    /** A raw-style query where you can pass any WHERE clause and arguments. */
-    public List<RelationSource2> queryDeep(String where, String... selectionArg) {
-        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
-        return loadDeepAllAndCloseCursor(cursor);
+    /** A raw-style query where you can pass any WHERE clause and arguments. 
+     * @throws SQLException */
+    public List<RelationSource2> queryDeep(String where, String... selectionArg) throws SQLException {
+        ResultSet resultSet = JDBCUtils.query(connection, getSelectDeep() + where, (Object[]) selectionArg);
+        return loadDeepAllAndCloseCursor(resultSet);
     }
  
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/specialentity/RelationSource2.java b/DaoTest/src-gen/de/greenrobot/daotest2/specialentity/RelationSource2.java
index ff587223..2c237909 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/specialentity/RelationSource2.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/specialentity/RelationSource2.java
@@ -1,5 +1,6 @@
 package de.greenrobot.daotest2.specialentity;
 
+import java.sql.SQLException;
 import java.util.List;
 import de.greenrobot.daotest2.dao.DaoSession;
 import de.greenrobot.dao.DaoException;
@@ -70,8 +71,9 @@ public void setToOneId(Long toOneId) {
         this.toOneId = toOneId;
     }
 
-    /** To-one relationship, resolved on first access. */
-    public ToOneTarget2 getToOneTarget2() {
+    /** To-one relationship, resolved on first access. 
+     * @throws SQLException */
+    public ToOneTarget2 getToOneTarget2() throws SQLException {
         Long __key = this.toOneId;
         if (toOneTarget2__resolvedKey == null || !toOneTarget2__resolvedKey.equals(__key)) {
             if (daoSession == null) {
@@ -95,8 +97,9 @@ public void setToOneTarget2(ToOneTarget2 toOneTarget2) {
         }
     }
 
-    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
-    public List<ToManyTarget2> getToManyTarget2List() {
+    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. 
+     * @throws SQLException */
+    public List<ToManyTarget2> getToManyTarget2List() throws SQLException {
         if (toManyTarget2List == null) {
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
@@ -117,24 +120,27 @@ public synchronized void resetToManyTarget2List() {
         toManyTarget2List = null;
     }
 
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
-    public void delete() {
+    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. 
+     * @throws SQLException */
+    public void delete() throws SQLException {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }    
         myDao.delete(this);
     }
 
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
-    public void update() {
+    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. 
+     * @throws SQLException */
+    public void update() throws SQLException {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }    
         myDao.update(this);
     }
 
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
-    public void refresh() {
+    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. 
+     * @throws SQLException */
+    public void refresh() throws SQLException {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
         }    
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
index 3ff139b3..9b1bf68a 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
@@ -1,15 +1,15 @@
 package de.greenrobot.daotest2.to1_specialdao;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.JDBCUtils;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
-
 import de.greenrobot.daotest2.dao.DaoSession;
-
 import de.greenrobot.daotest2.to1_specialentity.ToOneTarget2;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
@@ -50,36 +50,40 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
         db.execSQL(sql);
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ToOneTarget2 entity) {
-        stmt.clearBindings();
+    protected void bindValues(PreparedStatement stmt, ToOneTarget2 entity) throws SQLException {
+//        stmt.clearBindings();
  
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.setLong(1, id);
         }
     }
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
+        return JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0);
     }    
 
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public ToOneTarget2 readEntity(Cursor cursor, int offset) {
+    public ToOneTarget2 readEntity(ResultSet resultSet, int offset) throws SQLException {
         ToOneTarget2 entity = new ToOneTarget2( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) // id
+        		JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0) // id
         );
         return entity;
     }
      
-    /** @inheritdoc */
+    /** @throws SQLException 
+     * @inheritdoc */
     @Override
-    public void readEntity(Cursor cursor, ToOneTarget2 entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
+    public void readEntity(ResultSet resultSet, ToOneTarget2 entity, int offset) throws SQLException {
+        entity.setId(JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0));
      }
     
     /** @inheritdoc */
diff --git a/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java b/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java
index b263a9e7..bb2e13e5 100644
--- a/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java
@@ -409,7 +409,14 @@ public void testConcurrentResolveToMany() throws InterruptedException, SQLExcept
         Runnable runnable1 = new Runnable() {
             @Override
             public void run() {
-                entity.getToManyTargetEntityList();
+                try
+				{
+					entity.getToManyTargetEntityList();
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         };
 
@@ -417,7 +424,14 @@ public void run() {
         doTx(new Runnable() {
             @Override
             public void run() {
-                entity.getToManyTargetEntityList();
+                try
+				{
+					entity.getToManyTargetEntityList();
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         });
         latchThreadsDone.await();
@@ -431,7 +445,14 @@ public void testConcurrentResolveToOne() throws InterruptedException, SQLExcepti
         Runnable runnable1 = new Runnable() {
             @Override
             public void run() {
-                entity.getParent();
+                try
+				{
+					entity.getParent();
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         };
 
@@ -439,7 +460,14 @@ public void run() {
         doTx(new Runnable() {
             @Override
             public void run() {
-                entity.getParent();
+                try
+				{
+					entity.getParent();
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         });
         latchThreadsDone.await();
diff --git a/DaoTest/src/de/greenrobot/daotest/async/BasicAsyncTest.java b/DaoTest/src/de/greenrobot/daotest/async/BasicAsyncTest.java
index 5a181ee8..db949788 100644
--- a/DaoTest/src/de/greenrobot/daotest/async/BasicAsyncTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/async/BasicAsyncTest.java
@@ -1,5 +1,6 @@
 package de.greenrobot.daotest.async;
 
+import java.sql.SQLException;
 import java.util.concurrent.Callable;
 
 import android.os.Looper;
@@ -26,7 +27,7 @@ public void testWaitForCompletionNoOps() {
         asyncSession.waitForCompletion();
     }
 
-    public void testAsyncInsert() {
+    public void testAsyncInsert() throws SQLException {
         SimpleEntity entity = new SimpleEntity();
         entity.setSimpleString("heho");
         AsyncOperation operation = asyncSession.insert(entity);
@@ -38,7 +39,7 @@ public void testAsyncInsert() {
         assertSingleOperationCompleted(operation);
     }
 
-    public void testAsyncUpdate() {
+    public void testAsyncUpdate() throws SQLException {
         SimpleEntity entity = new SimpleEntity();
         entity.setSimpleString("heho");
         daoSession.insert(entity);
@@ -53,7 +54,7 @@ public void testAsyncUpdate() {
         assertSingleOperationCompleted(operation);
     }
 
-    public void testOperationGetResult() {
+    public void testOperationGetResult() throws SQLException {
         SimpleEntity entity = new SimpleEntity();
         entity.setSimpleString("heho");
         daoSession.insert(entity);
@@ -69,7 +70,7 @@ public void testOperationGetResult() {
         assertEquals(entity.getSimpleString(), result.getSimpleString());
     }
 
-    public void testOperationGetResultException() {
+    public void testOperationGetResultException() throws SQLException {
         SimpleEntity entity = new SimpleEntity();
         daoSession.insert(entity);
         AsyncOperation operation = asyncSession.insert(entity);
@@ -84,7 +85,7 @@ public void testOperationGetResultException() {
         assertTrue(operation.isFailed());
     }
 
-    public void testAsyncException() {
+    public void testAsyncException() throws SQLException {
         SimpleEntity entity = new SimpleEntity();
         daoSession.insert(entity);
         AsyncOperation operation = asyncSession.insert(entity);
diff --git a/DaoTest/src/de/greenrobot/daotest/async/MergeTxAsyncTest.java b/DaoTest/src/de/greenrobot/daotest/async/MergeTxAsyncTest.java
index c307e914..cdcc2a42 100644
--- a/DaoTest/src/de/greenrobot/daotest/async/MergeTxAsyncTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/async/MergeTxAsyncTest.java
@@ -1,11 +1,13 @@
 package de.greenrobot.daotest.async;
 
+import java.sql.SQLException;
+
 import de.greenrobot.dao.async.AsyncOperation;
 import de.greenrobot.daotest.SimpleEntity;
 
 public class MergeTxAsyncTest extends AbstractAsyncTest {
 
-    public void testMergeInsertAndUpdate() {
+    public void testMergeInsertAndUpdate() throws SQLException {
         SimpleEntity entity = new SimpleEntity();
         entity.setId(42l);
         entity.setSimpleString("heho");
diff --git a/DaoTest/src/de/greenrobot/daotest/contentprovider/SimpleEntityContentProviderTest.java b/DaoTest/src/de/greenrobot/daotest/contentprovider/SimpleEntityContentProviderTest.java
index 1cd76794..f0821cdc 100644
--- a/DaoTest/src/de/greenrobot/daotest/contentprovider/SimpleEntityContentProviderTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/contentprovider/SimpleEntityContentProviderTest.java
@@ -17,6 +17,8 @@
  */
 package de.greenrobot.daotest.contentprovider;
 
+import java.sql.SQLException;
+
 import android.database.Cursor;
 import android.test.suitebuilder.annotation.Suppress;
 
@@ -41,7 +43,7 @@ protected void setUp() throws Exception {
         SimpleEntityContentProvider.daoSession = daoSession;
     }
 
-    public void testQuery() {
+    public void testQuery() throws SQLException {
         SimpleEntity entity = new SimpleEntity();
         entity.setSimpleString("hello");
         daoSession.insert(entity);
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityMultithreadingTest.java b/DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityMultithreadingTest.java
index af0fc459..d498e80e 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityMultithreadingTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityMultithreadingTest.java
@@ -18,6 +18,7 @@
 package de.greenrobot.daotest.entity;
 
 import java.lang.reflect.Field;
+import java.sql.SQLException;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
@@ -106,8 +107,15 @@ public void run() {
             while (running) {
                 AnActiveEntity entity = null;
                 entity = new AnActiveEntity(1l);
-                dao.insert(entity);
-                dao.delete(entity);
+                try
+				{
+					dao.insert(entity);
+					dao.delete(entity);
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         }
     }
@@ -118,11 +126,18 @@ public void run() {
             countDownAndAwaitLatch();
 
             AnActiveEntity entity = new AnActiveEntity(1l);
-            dao.insert(entity);
-            while (running) {
-                dao.detach(entity);
-                entity = dao.load(1l);
-            }
+            try
+			{
+				dao.insert(entity);
+				while (running) {
+					dao.detach(entity);
+					entity = dao.load(1l);
+				}
+			}
+			catch ( SQLException e )
+			{
+				e.printStackTrace();
+			}
         }
     }
 }
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityTest.java
index c8112b8c..8b5e4c7a 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/AnActiveEntityTest.java
@@ -17,6 +17,8 @@
  */
 package de.greenrobot.daotest.entity;
 
+import java.sql.SQLException;
+
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.test.AbstractDaoSessionTest;
 import de.greenrobot.daotest.AnActiveEntity;
@@ -38,7 +40,7 @@ protected void setUp() throws Exception {
         dao = daoSession.getAnActiveEntityDao();
     }
 
-    public void testThrowWhenDetached() {
+    public void testThrowWhenDetached() throws SQLException {
         AnActiveEntity entity = new AnActiveEntity();
         try {
             entity.delete();
@@ -60,7 +62,7 @@ public void testThrowWhenDetached() {
         }
     }
 
-    public void testActiveUpdate() {
+    public void testActiveUpdate() throws SQLException {
         AnActiveEntity entity = new AnActiveEntity(1l);
         long rowId = dao.insert(entity);
 
@@ -73,7 +75,7 @@ public void testActiveUpdate() {
         assertEquals("NEW", entity2.getText());
     }
 
-    public void testActiveRefresh() {
+    public void testActiveRefresh() throws SQLException {
         AnActiveEntity entity = new AnActiveEntity(1l);
         dao.insert(entity);
 
@@ -85,7 +87,7 @@ public void testActiveRefresh() {
         assertEquals("NEW", entity.getText());
     }
 
-    public void testActiveDelete() {
+    public void testActiveDelete() throws SQLException {
         AnActiveEntity entity = new AnActiveEntity(1l);
         dao.insert(entity);
 
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/AutoincrementEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/AutoincrementEntityTest.java
index fbff5349..97f865ee 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/AutoincrementEntityTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/AutoincrementEntityTest.java
@@ -1,5 +1,7 @@
 package de.greenrobot.daotest.entity;
 
+import java.sql.SQLException;
+
 import de.greenrobot.dao.test.AbstractDaoSessionTest;
 import de.greenrobot.daotest.AutoincrementEntity;
 import de.greenrobot.daotest.DaoMaster;
@@ -12,7 +14,7 @@ public AutoincrementEntityTest() {
         super(DaoMaster.class);
     }
 
-    public void testAutoincrement() {
+    public void testAutoincrement() throws SQLException {
         AutoincrementEntity entity = new AutoincrementEntity();
         daoSession.insert(entity);
         Long id1 = entity.getId();
@@ -24,7 +26,7 @@ public void testAutoincrement() {
         assertEquals(id1 + 1, (long) entity2.getId());
     }
 
-    public void testNoAutoincrement() {
+    public void testNoAutoincrement() throws SQLException {
         SimpleEntity entity = new SimpleEntity();
         daoSession.insert(entity);
         Long id1 = entity.getId();
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/DateEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/DateEntityTest.java
index 78ef137c..2bfa6d57 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/DateEntityTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/DateEntityTest.java
@@ -17,6 +17,7 @@
  */
 package de.greenrobot.daotest.entity;
 
+import java.sql.SQLException;
 import java.util.Date;
 
 import de.greenrobot.dao.test.AbstractDaoTestLongPk;
@@ -37,7 +38,7 @@ protected DateEntity createEntity(Long key) {
         return entity;
     }
     
-    public void testValues() {
+    public void testValues() throws SQLException {
         DateEntity entity = createEntity(1l);
         dao.insert(entity);
         
@@ -47,7 +48,7 @@ public void testValues() {
         assertEquals(entity.getDateNotNull(), reloaded.getDateNotNull());
     }
 
-    public void testValues2() {
+    public void testValues2() throws SQLException {
         DateEntity entity = createEntity(1l);
         long t1=32479875;
         long t2=976345942443435235l;
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTest.java
index fe9b2f45..0750be74 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTest.java
@@ -17,6 +17,7 @@
  */
 package de.greenrobot.daotest.entity;
 
+import java.sql.SQLException;
 import java.util.List;
 
 import de.greenrobot.dao.identityscope.IdentityScopeType;
@@ -43,8 +44,8 @@ public RelationEntityTest() {
     @Override
     protected void setUp() throws Exception {
         super.setUp();
-        TestEntityDao.createTable(db, false);
-        daoMaster = new DaoMaster(db);
+        TestEntityDao.createTable(connection, false);
+        daoMaster = new DaoMaster(connection);
         daoSession = daoMaster.newSession(identityScopeTypeForSession);
         dao = daoSession.getRelationEntityDao();
     }
@@ -56,13 +57,13 @@ protected RelationEntity createEntity(Long key) {
         return entity;
     }
 
-    public void testToOne() {
+    public void testToOne() throws SQLException {
         RelationEntity entity = insertEntityWithRelations(42l);
         entity = dao.load(entity.getId());
         assertTestEntity(entity);
     }
 
-    public void testToOneSelf() {
+    public void testToOneSelf() throws SQLException {
         RelationEntity entity = createEntity(1l);
         dao.insert(entity);
 
@@ -77,21 +78,21 @@ public void testToOneSelf() {
         assertEquals(entity.getId(), parent.getId());
     }
 
-    public void testToOneClearKey() {
+    public void testToOneClearKey() throws SQLException {
         RelationEntity entity = insertEntityWithRelations(42l);
         assertNotNull(entity.getParent());
         entity.setParentId(null);
         assertNull(entity.getParent());
     }
 
-    public void testToOneClearEntity() {
+    public void testToOneClearEntity() throws SQLException {
         RelationEntity entity = insertEntityWithRelations(42l);
         assertNotNull(entity.getParentId());
         entity.setParent(null);
         assertNull(entity.getParentId());
     }
 
-    public void testToOneUpdateKey() {
+    public void testToOneUpdateKey() throws SQLException {
         RelationEntity entity = insertEntityWithRelations(42l);
         TestEntity testEntity = entity.getTestEntity();
         RelationEntity entity2 = insertEntityWithRelations(43l);
@@ -107,7 +108,7 @@ public void testToOneUpdateKey() {
         assertEquals(testEntity.getId(), entity.getTestEntity().getId());
     }
 
-    public void testToOneUpdateEntity() {
+    public void testToOneUpdateEntity() throws SQLException {
         RelationEntity entity = insertEntityWithRelations(42l);
         TestEntity testEntity = entity.getTestEntity();
         RelationEntity entity2 = insertEntityWithRelations(43l);
@@ -123,13 +124,13 @@ public void testToOneUpdateEntity() {
         assertEquals(testEntity.getId(), entity.getTestId());
     }
 
-    public void testToOneLoadDeep() {
+    public void testToOneLoadDeep() throws SQLException {
         RelationEntity entity = insertEntityWithRelations(42l);
         entity = dao.loadDeep(entity.getId());
         assertTestEntity(entity);
     }
 
-    public void testToOneNoMatch() {
+    public void testToOneNoMatch() throws SQLException {
         RelationEntity entity = insertEntityWithRelations(42l);
         assertNotNull(entity.getTestEntity());
         entity.setTestId(23l);
@@ -138,7 +139,7 @@ public void testToOneNoMatch() {
         assertNull(entity.getTestNotNull());
     }
 
-    public void testToOneNoMatchLoadDeep() {
+    public void testToOneNoMatchLoadDeep() throws SQLException {
         RelationEntity entity = insertEntityWithRelations(42l);
         assertNotNull(entity.getTestEntity());
         entity.setTestId(23l);
@@ -149,7 +150,7 @@ public void testToOneNoMatchLoadDeep() {
         assertNull(entity.getTestNotNull());
     }
 
-    public void testToOneLoadDeepNull() {
+    public void testToOneLoadDeepNull() throws SQLException {
         RelationEntity entity = insertEntityWithRelations(42l);
         entity.setParentId(null);
         entity.setTestId(null);
@@ -159,7 +160,7 @@ public void testToOneLoadDeepNull() {
         assertNull(entity.getTestEntity());
     }
 
-    public void testQueryDeep() {
+    public void testQueryDeep() throws SQLException {
         insertEntityWithRelations(42l);
         String columnName = RelationEntityDao.Properties.SimpleString.columnName;
         List<RelationEntity> entityList = dao.queryDeep("WHERE T." + columnName + "=?", "findMe");
@@ -167,7 +168,7 @@ public void testQueryDeep() {
         assertTestEntity(entityList.get(0));
     }
 
-    protected RelationEntity insertEntityWithRelations(Long testEntityId) {
+    protected RelationEntity insertEntityWithRelations(Long testEntityId) throws SQLException {
         TestEntity testEntity = daoSession.getTestEntityDao().load(testEntityId);
         if (testEntity == null) {
             testEntity = new TestEntity(testEntityId);
@@ -190,7 +191,7 @@ protected RelationEntity insertEntityWithRelations(Long testEntityId) {
         return entity;
     }
 
-    protected void assertTestEntity(RelationEntity entity) {
+    protected void assertTestEntity(RelationEntity entity) throws SQLException {
         TestEntity testEntity = entity.getTestEntity();
         assertNotNull(testEntity);
         assertEquals(42l, (long) testEntity.getId());
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTestIdentityScope.java b/DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTestIdentityScope.java
index 3cee5b10..8ebdc5c4 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTestIdentityScope.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/RelationEntityTestIdentityScope.java
@@ -17,6 +17,7 @@
  */
 package de.greenrobot.daotest.entity;
 
+import java.sql.SQLException;
 import java.util.List;
 
 import de.greenrobot.dao.identityscope.IdentityScopeType;
@@ -34,7 +35,7 @@ protected void setUp() throws Exception {
         super.setUp();
     }
 
-    public void testToOneLoadDeepIdentityScope() {
+    public void testToOneLoadDeepIdentityScope() throws SQLException {
         RelationEntity entity = insertEntityWithRelations(42l);
         RelationEntity entity2 = insertEntityWithRelations(42l);
         entity = dao.loadDeep(entity.getId());
@@ -45,7 +46,7 @@ public void testToOneLoadDeepIdentityScope() {
         assertSame(entity.getTestEntity(), entity2.getTestEntity());
     }
 
-    public void testToQueryDeepIdentityScope() {
+    public void testToQueryDeepIdentityScope() throws SQLException {
         insertEntityWithRelations(42l);
         RelationEntity entity2 = insertEntityWithRelations(42l);
         String columnName = RelationEntityDao.Properties.SimpleString.columnName;
@@ -58,7 +59,7 @@ public void testToQueryDeepIdentityScope() {
         assertSame(entity.getTestEntity(), entity2.getTestEntity());
     }
 
-    public void testLoadDeepIdentityScope() {
+    public void testLoadDeepIdentityScope() throws SQLException {
         RelationEntity entity = insertEntityWithRelations(42l);
         RelationEntity entity2 = dao.loadDeep(entity.getId());
         RelationEntity entity3 = dao.loadDeep(entity.getId());
@@ -67,7 +68,7 @@ public void testLoadDeepIdentityScope() {
         assertTestEntity(entity);
     }
 
-    public void testQueryDeepIdentityScope() {
+    public void testQueryDeepIdentityScope() throws SQLException {
         RelationEntity entity = insertEntityWithRelations(42l);
 
         String columnName = RelationEntityDao.Properties.SimpleString.columnName;
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityNotNullTest.java b/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityNotNullTest.java
index 94299a18..2d1a2474 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityNotNullTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityNotNullTest.java
@@ -17,6 +17,7 @@
  */
 package de.greenrobot.daotest.entity;
 
+import java.sql.SQLException;
 import java.util.Arrays;
 
 import de.greenrobot.dao.test.AbstractDaoTestLongPk;
@@ -34,7 +35,7 @@ protected SimpleEntityNotNull createEntity(Long key) {
         return SimpleEntityNotNullHelper.createEntity(key);
     }
 
-    public void testValues() {
+    public void testValues() throws SQLException {
         SimpleEntityNotNull entity = createEntity(1l);
         dao.insert(entity);
         SimpleEntityNotNull reloaded = dao.load(1l);
@@ -57,7 +58,7 @@ protected static void assertEqualProperties(SimpleEntityNotNull entity, SimpleEn
         assertTrue(Arrays.equals(entity.getSimpleByteArray(), reloaded.getSimpleByteArray()));
     }
 
-    public void testUpdateValues() {
+    public void testUpdateValues() throws SQLException {
         SimpleEntityNotNull entity = createEntity(1l);
         dao.insert(entity);
         entity = dao.load(1l);
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityTest.java
index 87cc2901..ec7f057e 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityTest.java
@@ -17,6 +17,7 @@
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
+import java.sql.SQLException;
 import java.util.Arrays;
 
 import de.greenrobot.dao.test.AbstractDaoTestLongPk;
@@ -36,7 +37,7 @@ protected SimpleEntity createEntity(Long key) {
         return entity;
     }
 
-    public void testValuesNull() {
+    public void testValuesNull() throws SQLException {
         SimpleEntity entity = createEntity(1l);
         dao.insert(entity);
         SimpleEntity reloaded = dao.load(1l);
@@ -46,7 +47,7 @@ public void testValuesNull() {
         assertValuesNull(reloaded);
     }
 
-    public void testValues() {
+    public void testValues() throws SQLException {
         SimpleEntity entity = createEntity(1l);
         setValues(entity);
         dao.insert(entity);
@@ -55,7 +56,7 @@ public void testValues() {
         assertValues(reloaded);
     }
 
-    public void testUpdateValues() {
+    public void testUpdateValues() throws SQLException {
         SimpleEntity entity = createEntity(1l);
         dao.insert(entity);
         entity = dao.load(1l);
@@ -66,7 +67,7 @@ public void testUpdateValues() {
         assertValues(reloaded);
     }
 
-    public void testUpdateValuesToNull() {
+    public void testUpdateValuesToNull() throws SQLException {
         SimpleEntity entity = createEntity(1l);
         setValues(entity);
         dao.insert(entity);
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SqliteMasterTest.java b/DaoTest/src/de/greenrobot/daotest/entity/SqliteMasterTest.java
index 8cb26bf5..1b2573bf 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/SqliteMasterTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/SqliteMasterTest.java
@@ -1,5 +1,6 @@
 package de.greenrobot.daotest.entity;
 
+import java.sql.SQLException;
 import java.util.List;
 
 import de.greenrobot.dao.DaoLog;
@@ -14,14 +15,14 @@ public SqliteMasterTest() {
         super(SqliteMasterDao.class);
     }
 
-    public void testLoadAll() {
+    public void testLoadAll() throws SQLException {
         List<SqliteMaster> all = dao.loadAll();
         for (SqliteMaster meta : all) {
             DaoLog.v(meta.toString());
         }
     }
 
-    public void testQueryRaw() {
+    public void testQueryRaw() throws SQLException {
         List<SqliteMaster> tables = dao.queryRaw("WHERE " + Properties.Type.columnName + "=?", "table");
         for (SqliteMaster table : tables) {
             DaoLog.v(table.toString());
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityIdentityScopeTest.java b/DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityIdentityScopeTest.java
index a071cfe4..3a4cd925 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityIdentityScopeTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityIdentityScopeTest.java
@@ -17,6 +17,8 @@
  */
 package de.greenrobot.daotest.entity;
 
+import java.sql.SQLException;
+
 import de.greenrobot.dao.identityscope.IdentityScopeObject;
 import de.greenrobot.daotest.StringKeyValueEntity;
 
@@ -27,7 +29,7 @@ protected void setUp() throws Exception {
         super.setUp();
     }
 
-    public void testLoadIdScope() {
+    public void testLoadIdScope() throws SQLException {
         StringKeyValueEntity entity = createEntityWithRandomPk();
         dao.insert(entity);
         StringKeyValueEntity entity2 = dao.load(entity.getKey());
@@ -37,7 +39,7 @@ public void testLoadIdScope() {
         assertSame(entity2, entity3);
     }
 
-    public void testLoadIdScope_load() {
+    public void testLoadIdScope_load() throws SQLException {
         StringKeyValueEntity entity = createEntityWithRandomPk();
         dao.insert(entity);
         dao.detach(entity);
@@ -48,7 +50,7 @@ public void testLoadIdScope_load() {
         assertSame(entity2, entity3);
     }
 
-    public void testDetach() {
+    public void testDetach() throws SQLException {
         StringKeyValueEntity entity = createEntityWithRandomPk();
         dao.insert(entity);
         dao.detach(entity);
@@ -61,7 +63,7 @@ public void testDetach() {
         assertNotSame(entity, entity3);
     }
 
-    public void testDetachOther() {
+    public void testDetachOther() throws SQLException {
         StringKeyValueEntity entity = createEntityWithRandomPk();
         dao.insert(entity);
         dao.detach(entity);
@@ -72,7 +74,7 @@ public void testDetachOther() {
         assertSame(entity2, entity3);
     }
 
-    public void testLoadAllScope() {
+    public void testLoadAllScope() throws SQLException {
         StringKeyValueEntity entity = createEntityWithRandomPk();
         dao.insert(entity);
         StringKeyValueEntity entity2 = dao.loadAll().get(0);
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java b/DaoTest/src/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java
index 755156cb..db9bebba 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java
@@ -17,6 +17,8 @@
  */
 package de.greenrobot.daotest.entity;
 
+import java.sql.SQLException;
+
 import de.greenrobot.dao.identityscope.IdentityScopeLong;
 import de.greenrobot.daotest.TestEntity;
 
@@ -27,7 +29,7 @@ protected void setUp() throws Exception {
         super.setUp();
     }
 
-    public void testLoadIdScope() {
+    public void testLoadIdScope() throws SQLException {
         TestEntity entity = createEntity(null);
         dao.insert(entity);
         TestEntity entity2 = dao.load(entity.getId());
@@ -37,7 +39,7 @@ public void testLoadIdScope() {
         assertSame(entity2, entity3);
     }
 
-    public void testDetach() {
+    public void testDetach() throws SQLException {
         TestEntity entity = createEntity(null);
         dao.insert(entity);
         dao.detach(entity);
@@ -50,7 +52,7 @@ public void testDetach() {
         assertNotSame(entity, entity3);
     }
 
-    public void testDetachOther() {
+    public void testDetachOther() throws SQLException {
         TestEntity entity = createEntity(null);
         dao.insert(entity);
         dao.detach(entity);
@@ -61,7 +63,7 @@ public void testDetachOther() {
         assertSame(entity2, entity3);
     }
 
-    public void testLoadAllScope() {
+    public void testLoadAllScope() throws SQLException {
         TestEntity entity = createEntity(null);
         dao.insert(entity);
         TestEntity entity2 = dao.loadAll().get(0);
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/TestEntityTest.java
index 237b9814..3436f95a 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/TestEntityTest.java
@@ -17,6 +17,8 @@
  */
 package de.greenrobot.daotest.entity;
 
+import java.sql.SQLException;
+
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.test.AbstractDaoTestLongPk;
 import de.greenrobot.daotest.TestEntity;
@@ -36,7 +38,7 @@ protected TestEntity createEntity(Long key) {
         return entity;
     }
 
-    public void testRefresh() {
+    public void testRefresh() throws SQLException {
         TestEntity entity = createEntity(1l);
         entity.setSimpleInteger(42);
         entity.setSimpleString(null);
@@ -48,7 +50,7 @@ public void testRefresh() {
         assertNull(entity.getSimpleString());
     }
 
-    public void testRefreshIllegal() {
+    public void testRefreshIllegal() throws SQLException {
         TestEntity entity = createEntity(1l);
         try {
             dao.refresh(entity);
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityTestBase.java b/DaoTest/src/de/greenrobot/daotest/entity/TestEntityTestBase.java
index a6b75a9d..2ace247e 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityTestBase.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/TestEntityTestBase.java
@@ -17,6 +17,7 @@
  */
 package de.greenrobot.daotest.entity;
 
+import java.sql.SQLException;
 import java.util.ArrayList;
 
 import de.greenrobot.dao.query.LazyList;
@@ -39,7 +40,7 @@ protected TestEntity createEntity(int simpleInteger, String simpleString) {
         return entity;
     }
 
-    protected ArrayList<TestEntity> insert(int count) {
+    protected ArrayList<TestEntity> insert(int count) throws SQLException {
         ArrayList<TestEntity> list = new ArrayList<TestEntity>();
         for (int i = 0; i < count; i++) {
             TestEntity entity = createEntity(getSimpleInteger(i), getSimpleString(i));
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/ToManyEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/ToManyEntityTest.java
index 55fd37bd..c63ad4cc 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/ToManyEntityTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/ToManyEntityTest.java
@@ -17,6 +17,7 @@
  */
 package de.greenrobot.daotest.entity;
 
+import java.sql.SQLException;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -45,7 +46,7 @@ protected void setUp() throws Exception {
         toManyTargetEntityDao = daoSession.getToManyTargetEntityDao();
     }
 
-    public void testToManyBasics() {
+    public void testToManyBasics() throws SQLException {
         int count = 0;
         for (int i = 0; i < 16; i++) {
             runTestToManyBasics(i + 1, i);
@@ -54,7 +55,7 @@ public void testToManyBasics() {
         assertEquals(count, toManyTargetEntityDao.count());
     }
 
-    public void runTestToManyBasics(long id, int count) {
+    public void runTestToManyBasics(long id, int count) throws SQLException {
         ToManyTargetEntity[] targetEntities = prepareToMany(id, count);
 
         ToManyEntity testEntity = toManyEntityDao.load(id);
@@ -77,13 +78,13 @@ private void assertSameEntities(ToManyTargetEntity[] targetEntities, List<ToMany
         }
     }
 
-    private ToManyTargetEntity[] prepareToMany(long id, int count) {
+    private ToManyTargetEntity[] prepareToMany(long id, int count) throws SQLException {
         ToManyEntity entity = new ToManyEntity(id);
         daoSession.insert(entity);
         return insertTargetEntitites(id, count, null);
     }
 
-    private ToManyTargetEntity[] insertTargetEntitites(Long toManyId, int count, String joinProperty) {
+    private ToManyTargetEntity[] insertTargetEntitites(Long toManyId, int count, String joinProperty) throws SQLException {
         ToManyTargetEntity[] targetEntities = new ToManyTargetEntity[count];
         for (int i = 0; i < count; i++) {
             ToManyTargetEntity target = new ToManyTargetEntity();
@@ -96,7 +97,7 @@ private void assertSameEntities(ToManyTargetEntity[] targetEntities, List<ToMany
         return targetEntities;
     }
 
-    public void testGetToManyTwice() {
+    public void testGetToManyTwice() throws SQLException {
         prepareToMany(1, 3);
 
         ToManyEntity testEntity = toManyEntityDao.load(1l);
@@ -105,7 +106,7 @@ public void testGetToManyTwice() {
         assertSame(resolvedToMany1, resolvedToMany2);
     }
 
-    public void testResetToMany() {
+    public void testResetToMany() throws SQLException {
         ToManyTargetEntity[] targetEntities = prepareToMany(1, 3);
 
         ToManyEntity testEntity = toManyEntityDao.load(1l);
@@ -116,7 +117,7 @@ public void testResetToMany() {
         assertSameEntities(targetEntities, resolvedToMany2);
     }
 
-    public void testChangeResetToMany() {
+    public void testChangeResetToMany() throws SQLException {
         prepareToMany(1, 3);
 
         ToManyEntity testEntity = toManyEntityDao.load(1l);
@@ -137,7 +138,7 @@ public void testChangeResetToMany() {
         assertEquals(0, resolvedToMany3.size());
     }
 
-    public void testToManyOrder() {
+    public void testToManyOrder() throws SQLException {
         prepareToMany(1, 3);
 
         ToManyEntity testEntity = toManyEntityDao.load(1l);
@@ -150,7 +151,7 @@ public void testToManyOrder() {
         assertSame(resolvedToManyAsc.get(2), resolvedToManyDesc.get(0));
     }
 
-    public void testJoinProperty() {
+    public void testJoinProperty() throws SQLException {
         ToManyEntity entity = new ToManyEntity(1l);
         entity.setSourceJoinProperty("JOIN ME");
         daoSession.insert(entity);
@@ -172,7 +173,7 @@ public void testJoinProperty() {
         assertFalse(middleEntity.getId() == targetEntities.get(1).getId());
     }
 
-    public void testTwoJoinProperty() {
+    public void testTwoJoinProperty() throws SQLException {
         ToManyEntity entity = new ToManyEntity(1l);
         entity.setSourceJoinProperty("JOIN ME");
         daoSession.insert(entity);
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/TreeEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/TreeEntityTest.java
index 7f0d43ee..d8dfacdc 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/TreeEntityTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/TreeEntityTest.java
@@ -1,5 +1,7 @@
 package de.greenrobot.daotest.entity;
 
+import java.sql.SQLException;
+
 import de.greenrobot.dao.test.AbstractDaoSessionTest;
 import de.greenrobot.daotest.DaoMaster;
 import de.greenrobot.daotest.DaoSession;
@@ -20,7 +22,7 @@ protected void setUp() throws Exception {
         treeEntityDao = daoSession.getTreeEntityDao();
     }
 
-    public void testNavigateTreeFromLeaf() {
+    public void testNavigateTreeFromLeaf() throws SQLException {
         createTree();
         daoSession.clear();
 
@@ -38,7 +40,7 @@ public void testNavigateTreeFromLeaf() {
         assertNull(root.getParent());
     }
 
-    public void testNavigateTreeFromMiddle() {
+    public void testNavigateTreeFromMiddle() throws SQLException {
         createTree();
         daoSession.clear();
 
@@ -54,7 +56,7 @@ public void testNavigateTreeFromMiddle() {
         assertNull(root.getParent());
     }
 
-    public void testNavigateTreeFromRoot() {
+    public void testNavigateTreeFromRoot() throws SQLException {
         createTree();
         daoSession.clear();
 
@@ -79,7 +81,7 @@ public void testNavigateTreeFromRoot() {
         assertEquals(0, child2.getChildren().size());
     }
 
-    private void createTree() {
+    private void createTree() throws SQLException {
         TreeEntity root = new TreeEntity(1l);
         TreeEntity child1 = new TreeEntity(11l);
         child1.setParent(root);
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTest.java b/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTest.java
index 60f1321f..c01c3276 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTest.java
@@ -17,6 +17,7 @@
  */
 package de.greenrobot.daotest.performance;
 
+import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
@@ -44,7 +45,7 @@ public void testPerformance() throws Exception {
         // runTests(1000);
     }
 
-    protected void runTests(int entityCount) {
+    protected void runTests(int entityCount) throws SQLException {
         DaoLog.d("####################");
         DaoLog.d(getClass().getSimpleName() + ": " + entityCount + " entities on " + new Date());
         DaoLog.d("####################");
@@ -70,7 +71,7 @@ protected void runTests(int entityCount) {
         System.gc();
     }
 
-    protected void runOneByOneTests(List<T> list, int loadCount, int modifyCount) {
+    protected void runOneByOneTests(List<T> list, int loadCount, int modifyCount) throws SQLException {
         dao.insertInTx(list);
         List<K> keys = new ArrayList<K>(loadCount);
         for (int i = 0; i < loadCount; i++) {
@@ -108,7 +109,7 @@ protected void runOneByOneTests(List<T> list, int loadCount, int modifyCount) {
         System.gc();
     }
 
-    protected List<T> runLoadOneByOne(List<K> keys, String traceName) {
+    protected List<T> runLoadOneByOne(List<K> keys, String traceName) throws SQLException {
         List<T> list = new ArrayList<T>(keys.size());
         startClock(traceName);
         for (K key : keys) {
@@ -118,7 +119,7 @@ protected void runOneByOneTests(List<T> list, int loadCount, int modifyCount) {
         return list;
     }
 
-    protected void runBatchTests(List<T> list) {
+    protected void runBatchTests(List<T> list) throws SQLException {
         startClock("insert");
         dao.insertInTx(list);
         stopClock(list.size() + " entities");
@@ -135,7 +136,7 @@ protected void runBatchTests(List<T> list) {
         stopClock(list.size() + " entities");
     }
 
-    protected List<T> runLoadAll(String traceName) {
+    protected List<T> runLoadAll(String traceName) throws SQLException {
         startClock(traceName);
         List<T> list = dao.loadAll();
         stopClock(list.size() + " entities");
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/target/ArrayUtils.java b/DaoTest/src/de/greenrobot/daotest/performance/target/ArrayUtils.java
index 0168b463..cb415d53 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/target/ArrayUtils.java
+++ b/DaoTest/src/de/greenrobot/daotest/performance/target/ArrayUtils.java
@@ -17,7 +17,6 @@
 package de.greenrobot.daotest.performance.target;
 
 import java.lang.reflect.Array;
-import java.util.Collection;
 
 // XXX these should be changed to reflect the actual memory allocator we use.
 // it looks like right now objects want to be powers of 2 minus 8
diff --git a/DaoTest/src/de/greenrobot/daotest/query/CountQueryTest.java b/DaoTest/src/de/greenrobot/daotest/query/CountQueryTest.java
index 8c4593ff..12bd4a21 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/CountQueryTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/CountQueryTest.java
@@ -17,6 +17,7 @@
  */
 package de.greenrobot.daotest.query;
 
+import java.sql.SQLException;
 import java.util.ArrayList;
 
 import de.greenrobot.dao.query.CountQuery;
@@ -35,7 +36,7 @@ protected void setUp() throws Exception {
         QueryBuilder.LOG_VALUES = true;
     }
 
-    public void testCountQuerySimple() {
+    public void testCountQuerySimple() throws SQLException {
         int value = getSimpleInteger(1);
         CountQuery<TestEntity> query = dao.queryBuilder().where(Properties.SimpleInteger.eq(value)).buildCount();
         assertEquals(0, query.count());
@@ -51,7 +52,7 @@ public void testCountQuerySimple() {
         assertEquals(0, query.count());
     }
 
-    public void testCountQueryTwoParameters() {
+    public void testCountQueryTwoParameters() throws SQLException {
         int value = getSimpleInteger(1);
         String valueString = getSimpleString(1);
         
@@ -75,7 +76,7 @@ public void testCountQueryTwoParameters() {
         assertEquals(0, query.count());
     }
 
-    public void testCountQueryTwoParametersOr() {
+    public void testCountQueryTwoParametersOr() throws SQLException {
         int value = getSimpleInteger(1);
         String valueString = getSimpleString(2);
         
@@ -96,7 +97,7 @@ public void testCountQueryTwoParametersOr() {
         assertEquals(0, query.count());
     }
 
-    public void testCountQueryChangeParameter() {
+    public void testCountQueryChangeParameter() throws SQLException {
         insert(3);
 
         String value = "not existing value";
@@ -110,7 +111,7 @@ public void testCountQueryChangeParameter() {
         assertEquals(0, query.count());
     }
 
-    public void testBuildQueryAndCountQuery() {
+    public void testBuildQueryAndCountQuery() throws SQLException {
         insert(3);
         int value = getSimpleInteger(1);
 
diff --git a/DaoTest/src/de/greenrobot/daotest/query/CountQueryThreadLocalTest.java b/DaoTest/src/de/greenrobot/daotest/query/CountQueryThreadLocalTest.java
index 8d64894e..ee4c466f 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/CountQueryThreadLocalTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/CountQueryThreadLocalTest.java
@@ -17,6 +17,8 @@
  */
 package de.greenrobot.daotest.query;
 
+import java.sql.SQLException;
+
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.query.CountQuery;
 import de.greenrobot.dao.query.QueryBuilder;
@@ -32,7 +34,7 @@ public void testGetForCurrentThread_SameInstance() {
         assertSame(query, query.forCurrentThread());
     }
 
-    public void testGetForCurrentThread_ParametersAreReset() {
+    public void testGetForCurrentThread_ParametersAreReset() throws SQLException {
         insert(3);
         int value = getSimpleInteger(1);
         CountQuery<TestEntity> query = dao.queryBuilder().where(Properties.SimpleInteger.eq(value)).buildCount();
@@ -42,7 +44,7 @@ public void testGetForCurrentThread_ParametersAreReset() {
         assertEquals(1, query.count());
     }
 
-    public void testGetForCurrentThread_TwoThreads() throws InterruptedException {
+    public void testGetForCurrentThread_TwoThreads() throws InterruptedException, SQLException {
         insert(3);
         createQueryFromOtherThread();
         CountQuery<TestEntity> query = queryFromOtherThread.forCurrentThread();
@@ -52,7 +54,7 @@ public void testGetForCurrentThread_TwoThreads() throws InterruptedException {
         assertEquals(0, query.count());
     }
 
-    public void testThrowOutsideOwnerThread() throws InterruptedException {
+    public void testThrowOutsideOwnerThread() throws InterruptedException, SQLException {
         createQueryFromOtherThread();
         try {
             queryFromOtherThread.count();
diff --git a/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryTest.java b/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryTest.java
index d189ad77..b313bc5c 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryTest.java
@@ -17,6 +17,7 @@
  */
 package de.greenrobot.daotest.query;
 
+import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -36,7 +37,7 @@ protected void setUp() throws Exception {
         QueryBuilder.LOG_VALUES = true;
     }
 
-    public void testDeleteQuerySimple() {
+    public void testDeleteQuerySimple() throws SQLException {
         ArrayList<TestEntity> inserted = insert(3);
         int value = getSimpleInteger(1);
         inserted.get(2).setSimpleInteger(value);
@@ -52,7 +53,7 @@ public void testDeleteQuerySimple() {
         assertEquals(getSimpleInteger(0), (int) allAfterDelete.get(0).getSimpleInteger());
     }
 
-    public void testDeleteQueryOr() {
+    public void testDeleteQueryOr() throws SQLException {
         ArrayList<TestEntity> inserted = insert(3);
 
         QueryBuilder<TestEntity> queryBuilder = dao.queryBuilder();
@@ -68,7 +69,7 @@ public void testDeleteQueryOr() {
         assertEquals(inserted.get(1).getSimpleInteger(), allAfterDelete.get(0).getSimpleInteger());
     }
 
-    public void testDeleteQueryExecutingMultipleTimes() {
+    public void testDeleteQueryExecutingMultipleTimes() throws SQLException {
         insert(3);
 
         String value = getSimpleString(1);
@@ -86,7 +87,7 @@ public void testDeleteQueryExecutingMultipleTimes() {
         assertEquals(4, dao.count());
     }
 
-    public void testDeleteQueryChangeParameter() {
+    public void testDeleteQueryChangeParameter() throws SQLException {
         insert(3);
 
         String value = getSimpleString(1);
@@ -102,7 +103,7 @@ public void testDeleteQueryChangeParameter() {
         assertEquals(getSimpleString(2), remaining.getSimpleString());
     }
 
-    public void testBuildQueryAndDeleteQuery() {
+    public void testBuildQueryAndDeleteQuery() throws SQLException {
         insert(3);
         int value = getSimpleInteger(1);
 
diff --git a/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryThreadLocalTest.java b/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryThreadLocalTest.java
index adb0c582..ae8cfd97 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryThreadLocalTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryThreadLocalTest.java
@@ -17,6 +17,8 @@
  */
 package de.greenrobot.daotest.query;
 
+import java.sql.SQLException;
+
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.query.DeleteQuery;
 import de.greenrobot.dao.query.QueryBuilder;
@@ -32,7 +34,7 @@ public void testGetForCurrentThread_SameInstance() {
         assertSame(query, query.forCurrentThread());
     }
 
-    public void testGetForCurrentThread_ParametersAreReset() {
+    public void testGetForCurrentThread_ParametersAreReset() throws SQLException {
         insert(3);
         int value = getSimpleInteger(1);
         DeleteQuery<TestEntity> query = dao.queryBuilder().where(Properties.SimpleInteger.eq(value)).buildDelete();
@@ -44,7 +46,7 @@ public void testGetForCurrentThread_ParametersAreReset() {
         assertEquals(2, dao.count());
     }
 
-    public void testGetForCurrentThread_TwoThreads() throws InterruptedException {
+    public void testGetForCurrentThread_TwoThreads() throws InterruptedException, SQLException {
         insert(3);
         createQueryFromOtherThread();
         DeleteQuery<TestEntity> query = queryFromOtherThread.forCurrentThread();
@@ -54,7 +56,7 @@ public void testGetForCurrentThread_TwoThreads() throws InterruptedException {
         assertEquals(2, dao.count());
     }
 
-    public void testThrowOutsideOwnerThread() throws InterruptedException {
+    public void testThrowOutsideOwnerThread() throws InterruptedException, SQLException {
         createQueryFromOtherThread();
         try {
             queryFromOtherThread.executeDeleteWithoutDetachingEntities();
diff --git a/DaoTest/src/de/greenrobot/daotest/query/LazyListTest.java b/DaoTest/src/de/greenrobot/daotest/query/LazyListTest.java
index 20af0472..316bdca9 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/LazyListTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/LazyListTest.java
@@ -17,6 +17,7 @@
  */
 package de.greenrobot.daotest.query;
 
+import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.ListIterator;
 import java.util.NoSuchElementException;
@@ -30,7 +31,7 @@
 
 public class LazyListTest extends TestEntityTestBase {
 
-    public void testSizeAndGetAndPeak() {
+    public void testSizeAndGetAndPeak() throws SQLException {
         ArrayList<TestEntity> list = insert(2);
 
         LazyList<TestEntity> listLazy = dao.queryBuilder().build().listLazy();
@@ -47,14 +48,14 @@ public void testSizeAndGetAndPeak() {
         assertNotNull(listLazy.peak(1));
     }
 
-    public void testGetAll100() {
+    public void testGetAll100() throws SQLException {
         ArrayList<TestEntity> list = insert(100);
         LazyList<TestEntity> listLazy = dao.queryBuilder().orderAsc(Properties.SimpleInteger).build().listLazy();
         assertIds(list, listLazy);
         assertTrue(listLazy.isClosed());
     }
 
-    public void testGetAll100Uncached() {
+    public void testGetAll100Uncached() throws SQLException {
         ArrayList<TestEntity> list = insert(100);
         LazyList<TestEntity> listLazy = dao.queryBuilder().orderAsc(Properties.SimpleInteger).build()
                 .listLazyUncached();
@@ -63,14 +64,14 @@ public void testGetAll100Uncached() {
         listLazy.close();
     }
 
-    public void testIterator() {
+    public void testIterator() throws SQLException {
         ArrayList<TestEntity> list = insert(100);
         LazyList<TestEntity> listLazy = dao.queryBuilder().orderAsc(Properties.SimpleInteger).build().listLazy();
         testIerator(list, listLazy, false);
         assertTrue(listLazy.isClosed());
     }
 
-    public void testIteratorUncached() {
+    public void testIteratorUncached() throws SQLException {
         ArrayList<TestEntity> list = insert(100);
         LazyList<TestEntity> listLazy = dao.queryBuilder().orderAsc(Properties.SimpleInteger).build()
                 .listLazyUncached();
@@ -119,7 +120,7 @@ protected void testIerator(ArrayList<TestEntity> list, LazyList<TestEntity> list
         }
     }
 
-    public void testEmpty() {
+    public void testEmpty() throws SQLException {
         insert(1);
 
         LazyList<TestEntity> listLazy = dao.queryBuilder().where(Properties.SimpleInteger.eq(-1)).build().listLazy();
@@ -134,7 +135,7 @@ public void testEmpty() {
 
     }
 
-    public void testUncached() {
+    public void testUncached() throws SQLException {
         insert(1);
 
         LazyList<TestEntity> listLazy = dao.queryBuilder().build().listLazyUncached();
@@ -159,7 +160,7 @@ public void testUncached() {
         assertTrue(listLazy.isClosed());
     }
 
-    public void testClose() {
+    public void testClose() throws SQLException {
         insert(1);
 
         LazyList<TestEntity> listLazy = dao.queryBuilder().build().listLazy();
@@ -173,7 +174,7 @@ public void testClose() {
         listLazy.close();
     }
 
-    public void testAutoClose() {
+    public void testAutoClose() throws SQLException {
         insert(10);
         LazyList<TestEntity> lazyList = dao.queryBuilder().build().listLazyUncached();
         CloseableListIterator<TestEntity> iterator = lazyList.listIteratorAutoClose();
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderAndOrTest.java b/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderAndOrTest.java
index d9e946b2..387245c8 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderAndOrTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderAndOrTest.java
@@ -17,6 +17,7 @@
  */
 package de.greenrobot.daotest.query;
 
+import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -34,7 +35,7 @@ public QueryBuilderAndOrTest() {
         QueryBuilder.LOG_VALUES = true;
     }
 
-    protected ArrayList<AbcdefEntity> insert(int count) {
+    protected ArrayList<AbcdefEntity> insert(int count) throws SQLException {
         ArrayList<AbcdefEntity> list = new ArrayList<AbcdefEntity>();
         for (int i = 0; i < count; i++) {
             int base = i * 100;
@@ -46,7 +47,7 @@ public QueryBuilderAndOrTest() {
         return list;
     }
 
-    public void testSimpleQuery() {
+    public void testSimpleQuery() throws SQLException {
         insert(3);
 
         QueryBuilder<AbcdefEntity> queryBuilder = dao.queryBuilder().where(Properties.A.eq(1)).orderAsc(Properties.A);
@@ -60,7 +61,7 @@ public void testSimpleQuery() {
         queryBuilder.buildDelete().executeDeleteWithoutDetachingEntities();
     }
 
-    public void testOr() {
+    public void testOr() throws SQLException {
         insert(3);
 
         QueryBuilder<AbcdefEntity> queryBuilder = dao.queryBuilder();
@@ -75,7 +76,7 @@ public void testOr() {
         queryBuilder.buildDelete().executeDeleteWithoutDetachingEntities();
     }
 
-    public void testOr3() {
+    public void testOr3() throws SQLException {
         insert(5);
 
         QueryBuilder<AbcdefEntity> queryBuilder = dao.queryBuilder();
@@ -91,7 +92,7 @@ public void testOr3() {
         queryBuilder.buildDelete().executeDeleteWithoutDetachingEntities();
     }
 
-    public void testOrNested() {
+    public void testOrNested() throws SQLException {
         insert(10);
 
         QueryBuilder<AbcdefEntity> queryBuilder = dao.queryBuilder();
@@ -108,7 +109,7 @@ public void testOrNested() {
         queryBuilder.buildDelete().executeDeleteWithoutDetachingEntities();
     }
 
-    public void testOrNestedNested() {
+    public void testOrNestedNested() throws SQLException {
         insert(10);
 
         QueryBuilder<AbcdefEntity> queryBuilder = dao.queryBuilder();
@@ -127,7 +128,7 @@ public void testOrNestedNested() {
         queryBuilder.buildDelete().executeDeleteWithoutDetachingEntities();
     }
 
-    public void testAnd() {
+    public void testAnd() throws SQLException {
         insert(5);
 
         QueryBuilder<AbcdefEntity> queryBuilder = dao.queryBuilder();
@@ -141,7 +142,7 @@ public void testAnd() {
         queryBuilder.buildDelete().executeDeleteWithoutDetachingEntities();
     }
 
-    public void testOrAnd() {
+    public void testOrAnd() throws SQLException {
         insert(10);
 
         QueryBuilder<AbcdefEntity> queryBuilder = dao.queryBuilder();
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderOrderTest.java b/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderOrderTest.java
index f9a43e6b..9533d27d 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderOrderTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderOrderTest.java
@@ -17,6 +17,7 @@
  */
 package de.greenrobot.daotest.query;
 
+import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -34,7 +35,7 @@ protected void setUp() throws Exception {
         QueryBuilder.LOG_VALUES = true;
     }
 
-    public void testOrderAsc() {
+    public void testOrderAsc() throws SQLException {
         ArrayList<TestEntity> inserted = insert(2);
         TestEntity entity = inserted.get(0);
         List<TestEntity> result = dao.queryBuilder().orderAsc(Properties.SimpleInteger).list();
@@ -45,7 +46,7 @@ public void testOrderAsc() {
         assertEquals(entity.getId(), result.get(0).getId());
     }
 
-    public void testOrderDesc() {
+    public void testOrderDesc() throws SQLException {
         ArrayList<TestEntity> inserted = insert(2);
         TestEntity entity = inserted.get(1);
         List<TestEntity> result = dao.queryBuilder().orderDesc(Properties.SimpleInteger).list();
@@ -56,7 +57,7 @@ public void testOrderDesc() {
         assertEquals(entity.getId(), result.get(0).getId());
     }
 
-    public void testOrderUpperLowercase() {
+    public void testOrderUpperLowercase() throws SQLException {
         List<TestEntity> list = new ArrayList<TestEntity>();
         TestEntity entityAA = addEntity(list, "aa");
         TestEntity entityAB = addEntity(list, "Ab");
@@ -77,7 +78,7 @@ public void testOrderUpperLowercase() {
         assertEquals(entityZC.getId(), result.get(5).getId());
     }
 
-    public void testOrderUmlauts() {
+    public void testOrderUmlauts() throws SQLException {
         List<TestEntity> list = new ArrayList<TestEntity>();
         TestEntity entityV = addEntity(list, "V");
         TestEntity entityB = addEntity(list, "B");
@@ -93,7 +94,7 @@ public void testOrderUmlauts() {
         assertEquals(entityV.getId(), result.get(3).getId());
     }
 
-    public void testOrderCustom() {
+    public void testOrderCustom() throws SQLException {
         List<TestEntity> list = new ArrayList<TestEntity>();
         TestEntity entityAA = addEntity(list, "Aa");
         TestEntity entityAB = addEntity(list, "ab");
@@ -107,7 +108,7 @@ public void testOrderCustom() {
         assertEquals(entityAB.getId(), result.get(2).getId());
     }
 
-    public void testOrderRaw() {
+    public void testOrderRaw() throws SQLException {
         ArrayList<TestEntity> inserted = insert(2);
         TestEntity entity = inserted.get(0);
         List<TestEntity> result = dao.queryBuilder().orderRaw(Properties.SimpleInteger.columnName + " ASC").list();
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java b/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java
index 3f9f7276..ad4fc02e 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/QueryBuilderSimpleTest.java
@@ -17,6 +17,7 @@
  */
 package de.greenrobot.daotest.query;
 
+import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
@@ -35,7 +36,7 @@ protected void setUp() throws Exception {
         QueryBuilder.LOG_VALUES = true;
     }
 
-    public void testEqInteger() {
+    public void testEqInteger() throws SQLException {
         ArrayList<TestEntity> inserted = insert(3);
         int value = getSimpleInteger(1);
 
@@ -47,7 +48,7 @@ public void testEqInteger() {
         assertEquals(inserted.get(1).getId(), resultEntity.getId());
     }
 
-    public void testEqString() {
+    public void testEqString() throws SQLException {
         ArrayList<TestEntity> inserted = insert(3);
         String value = getSimpleString(1);
 
@@ -59,7 +60,7 @@ public void testEqString() {
         assertEquals(inserted.get(1).getId(), resultEntity.getId());
     }
 
-    public void testIn() {
+    public void testIn() throws SQLException {
         ArrayList<TestEntity> inserted = insert(10);
         String value1 = getSimpleString(2);
         String value2 = getSimpleString(8);
@@ -82,7 +83,7 @@ public void testIn() {
         assertEquals(inserted.get(9).getId(), resultEntity3.getId());
     }
 
-    public void testNotIn() {
+    public void testNotIn() throws SQLException {
         ArrayList<TestEntity> inserted = insert(5);
         String value1 = getSimpleString(0);
         String value2 = getSimpleString(2);
@@ -99,7 +100,7 @@ public void testNotIn() {
         assertEquals(inserted.get(3).getId(), resultEntity2.getId());
     }
 
-    public void testEqStringAndInteger() {
+    public void testEqStringAndInteger() throws SQLException {
         ArrayList<TestEntity> inserted = insert(3);
         String valueStr = getSimpleString(1);
         int valueInt = getSimpleInteger(1);
@@ -112,7 +113,7 @@ public void testEqStringAndInteger() {
         assertEquals(inserted.get(1).getId(), resultEntity.getId());
     }
 
-    public void testNotEqString() {
+    public void testNotEqString() throws SQLException {
         ArrayList<TestEntity> inserted = insert(3);
         String value = getSimpleString(1);
 
@@ -127,7 +128,7 @@ public void testNotEqString() {
         assertEquals((long) inserted.get(2).getId(), hiId);
     }
 
-    public void testEqDate() {
+    public void testEqDate() throws SQLException {
         ArrayList<TestEntity> inserted = insert(3);
         TestEntity testEntity = inserted.get(1);
 
@@ -142,7 +143,7 @@ public void testEqDate() {
         assertEquals(testEntity.getId(), testEntity2.getId());
     }
 
-    public void testEqBoolean() {
+    public void testEqBoolean() throws SQLException {
         ArrayList<TestEntity> inserted = insert(3);
         TestEntity testEntity = inserted.get(1);
 
@@ -162,7 +163,7 @@ public void testEqBoolean() {
         assertEquals(testEntity.getId(), testEntity2.getId());
     }
 
-    public void testIsNullIsNotNull() {
+    public void testIsNullIsNotNull() throws SQLException {
         ArrayList<TestEntity> inserted = insert(2);
         TestEntity testEntityNull = inserted.get(0);
         TestEntity testEntityNotNull = inserted.get(1);
@@ -179,7 +180,7 @@ public void testIsNullIsNotNull() {
         assertEquals(testEntityNotNull.getId(), testEntityNotNull2.getId());
     }
 
-    public void testBuildTwice() {
+    public void testBuildTwice() throws SQLException {
         insert(3);
         String value = getSimpleString(1);
 
@@ -193,7 +194,7 @@ public void testBuildTwice() {
         assertEquals(list1.get(0).getId(), list2.get(0).getId());
     }
 
-    public void testLike() {
+    public void testLike() throws SQLException {
         TestEntity entity = insert(3).get(1);
         entity.setSimpleString("greenrobot");
         dao.update(entity);
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryForThreadTest.java b/DaoTest/src/de/greenrobot/daotest/query/QueryForThreadTest.java
index c99e2747..5154054a 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/QueryForThreadTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/QueryForThreadTest.java
@@ -19,6 +19,7 @@
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
+import java.sql.SQLException;
 
 import android.util.SparseArray;
 import de.greenrobot.dao.DaoException;
@@ -41,7 +42,7 @@ public void testGetForCurrentThread_SameInstance() {
         assertSame(query, query.forCurrentThread());
     }
 
-    public void testGetForCurrentThread_ParametersAreReset() {
+    public void testGetForCurrentThread_ParametersAreReset() throws SQLException {
         insert(3);
         int value = getSimpleInteger(1);
         Query<TestEntity> query = dao.queryBuilder().where(Properties.SimpleInteger.eq(value)).build();
@@ -91,7 +92,7 @@ public void testBuildQueryDoesntLeak() {
         }
     }
 
-    public void testGetForCurrentThread_TwoThreads() throws InterruptedException {
+    public void testGetForCurrentThread_TwoThreads() throws InterruptedException, SQLException {
         insert(3);
         createQueryFromOtherThread();
         Query<TestEntity> query = queryFromOtherThread.forCurrentThread();
@@ -108,7 +109,7 @@ public void testGetForCurrentThread_TwoThreads() throws InterruptedException {
         assertEquals(expected, (int) query.uniqueOrThrow().getSimpleInteger());
     }
 
-    public void testThrowOutsideOwnerThread() throws InterruptedException {
+    public void testThrowOutsideOwnerThread() throws InterruptedException, SQLException {
         createQueryFromOtherThread();
         try {
             queryFromOtherThread.list();
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryLimitOffsetTest.java b/DaoTest/src/de/greenrobot/daotest/query/QueryLimitOffsetTest.java
index 6d0d4865..d83bc185 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/QueryLimitOffsetTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/QueryLimitOffsetTest.java
@@ -17,6 +17,7 @@
  */
 package de.greenrobot.daotest.query;
 
+import java.sql.SQLException;
 import java.util.List;
 
 import de.greenrobot.dao.query.Query;
@@ -34,7 +35,7 @@ protected void setUp() throws Exception {
         QueryBuilder.LOG_VALUES = true;
     }
 
-    public void testQueryBuilderLimit() {
+    public void testQueryBuilderLimit() throws SQLException {
         insert(10);
         List<TestEntity> result = dao.queryBuilder().limit(3).orderAsc(Properties.SimpleInt).list();
         assertEquals(3, result.size());
@@ -44,7 +45,7 @@ public void testQueryBuilderLimit() {
         assertEquals(getSimpleInteger(2), result.get(2).getSimpleInteger().intValue());
     }
 
-    public void testQueryBuilderOffsetAndLimit() {
+    public void testQueryBuilderOffsetAndLimit() throws SQLException {
         insert(10);
         List<TestEntity> result = dao.queryBuilder().offset(3).limit(3).orderAsc(Properties.SimpleInt).list();
         assertEquals(3, result.size());
@@ -54,7 +55,7 @@ public void testQueryBuilderOffsetAndLimit() {
         assertEquals(getSimpleInteger(5), result.get(2).getSimpleInteger().intValue());
     }
 
-    public void testQueryBuilderOffsetAndLimitWithWhere() {
+    public void testQueryBuilderOffsetAndLimitWithWhere() throws SQLException {
         insert(10);
         List<TestEntity> result = dao.queryBuilder().where(Properties.SimpleInteger.gt(getSimpleInteger(1))).offset(2)
                 .limit(3).orderAsc(Properties.SimpleInt).list();
@@ -65,7 +66,7 @@ public void testQueryBuilderOffsetAndLimitWithWhere() {
         assertEquals(getSimpleInteger(6), result.get(2).getSimpleInteger().intValue());
     }
 
-    public void testQueryOffsetAndLimit() {
+    public void testQueryOffsetAndLimit() throws SQLException {
         insert(10);
         Query<TestEntity> query = dao.queryBuilder().where(Properties.SimpleInteger.gt(getSimpleInteger(-1))).offset(-1)
                 .limit(-1).orderAsc(Properties.SimpleInt).build(); 
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QuerySpecialNamesTest.java b/DaoTest/src/de/greenrobot/daotest/query/QuerySpecialNamesTest.java
index 2709b516..c941447e 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/QuerySpecialNamesTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/QuerySpecialNamesTest.java
@@ -17,6 +17,8 @@
  */
 package de.greenrobot.daotest.query;
 
+import java.sql.SQLException;
+
 import de.greenrobot.dao.query.QueryBuilder;
 import de.greenrobot.dao.test.AbstractDaoTest;
 import de.greenrobot.daotest.SpecialNamesEntity;
@@ -36,7 +38,7 @@ protected void setUp() throws Exception {
         QueryBuilder.LOG_VALUES = true;
     }
 
-    public void testWhereWithSpecialNames() {
+    public void testWhereWithSpecialNames() throws SQLException {
         QueryBuilder<SpecialNamesEntity> queryBuilder = dao.queryBuilder();
         queryBuilder.where(Properties.Avg.isNotNull());
         queryBuilder.where(Properties.Count.isNotNull());
@@ -52,7 +54,7 @@ public void testWhereWithSpecialNames() {
         queryBuilder.buildDelete().executeDeleteWithoutDetachingEntities();
     }
 
-    public void testWhereWithSpecialNamesWithValues() {
+    public void testWhereWithSpecialNamesWithValues() throws SQLException {
         QueryBuilder<SpecialNamesEntity> queryBuilder = dao.queryBuilder();
         queryBuilder.where(Properties.Avg.eq("test"));
         queryBuilder.where(Properties.Count.notIn("test", "test2"));
@@ -68,7 +70,7 @@ public void testWhereWithSpecialNamesWithValues() {
         queryBuilder.buildDelete().executeDeleteWithoutDetachingEntities();
     }
 
-    public void testOrderWithSpecialNames() {
+    public void testOrderWithSpecialNames() throws SQLException {
         QueryBuilder<SpecialNamesEntity> queryBuilder = dao.queryBuilder();
         queryBuilder.orderAsc(Properties.Avg);
         queryBuilder.orderAsc(Properties.Count);
diff --git a/DaoTest/src/de/greenrobot/daotest/query/RawQueryTest.java b/DaoTest/src/de/greenrobot/daotest/query/RawQueryTest.java
index b44fa077..8fa65184 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/RawQueryTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/RawQueryTest.java
@@ -17,6 +17,7 @@
  */
 package de.greenrobot.daotest.query;
 
+import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -35,14 +36,14 @@ protected void setUp() throws Exception {
         QueryBuilder.LOG_VALUES = true;
     }
 
-    public void testRawQueryEmptySql() {
+    public void testRawQueryEmptySql() throws SQLException {
         insert(3);
         Query<TestEntity> query = dao.queryRawCreate("");
         List<TestEntity> result = query.list();
         assertEquals(3, result.size());
     }
 
-    public void testRawQueryEqualsString() {
+    public void testRawQueryEqualsString() throws SQLException {
         ArrayList<TestEntity> inserted = insert(3);
         String value = getSimpleString(1);
 
@@ -55,7 +56,7 @@ public void testRawQueryEqualsString() {
         assertEquals(inserted.get(1).getId(), resultEntity.getId());
     }
 
-    public void testRawQueryCreate_setParameterInQuery() {
+    public void testRawQueryCreate_setParameterInQuery() throws SQLException {
         insert(3);
         String value = getSimpleString(2);
 
@@ -70,7 +71,7 @@ public void testRawQueryCreate_setParameterInQuery() {
         assertEquals(value, result.get(0).getSimpleString());
     }
     
-    public void testRawQueryLazyList() {
+    public void testRawQueryLazyList() throws SQLException {
         ArrayList<TestEntity> list = insert(2);
 
         LazyList<TestEntity> listLazy = dao.queryRawCreate("").listLazy();
