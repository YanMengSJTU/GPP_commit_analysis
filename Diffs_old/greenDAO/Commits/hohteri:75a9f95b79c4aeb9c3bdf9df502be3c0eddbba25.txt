diff --git a/DaoCore/build.gradle b/DaoCore/build.gradle
index 4978cc07..9a5e598b 100644
--- a/DaoCore/build.gradle
+++ b/DaoCore/build.gradle
@@ -3,7 +3,7 @@ apply plugin: 'maven'
 apply plugin: 'signing'
 
 group = 'de.greenrobot'
-archivesBaseName = 'greendao'
+archivesBaseName = 'greendao-sqlite'
 version = '2.1.0-SNAPSHOT'
 sourceCompatibility = 1.6
 
@@ -16,6 +16,24 @@ if(isSnapshot) {
 }
 
 repositories {
+mavenLocal()
+
+        maven {
+            url this.snapshotURL
+            credentials {
+                username = this.username 
+                password = this.password
+            }
+        }
+
+        maven {
+            url this.releaseURL
+            credentials {
+                username = this.username
+                password = this.password
+            }
+        }
+
     mavenCentral()
 }
 
@@ -31,6 +49,7 @@ dependencies {
     provided 'com.google.android:android-test:4.1.1.4'
     provided 'com.google.android:annotations:4.1.1.4'
     provided 'com.google.android:support-v4:r7'
+    provided 'org.sqlite:sqliteX:3.8.3'
     // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4'
     deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
 }
@@ -131,4 +150,4 @@ uploadArchives {
            }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java
index 51349dfb..77ae465f 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java
@@ -25,8 +25,8 @@
 import android.database.Cursor;
 import android.database.CursorWindow;
 import android.database.DatabaseUtils;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import org.sqlite.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteStatement;
 import de.greenrobot.dao.identityscope.IdentityScope;
 import de.greenrobot.dao.identityscope.IdentityScopeLong;
 import de.greenrobot.dao.internal.DaoConfig;
@@ -767,8 +767,17 @@ protected void assertSinglePk() {
         }
     }
 
+    private static final String[] countProjection = new String[]{"count(*)"};
+
     public long count() {
-        return DatabaseUtils.queryNumEntries(db, '\'' + config.tablename + '\'');
+        //return DatabaseUtils.queryNumEntries(db, '\'' + config.tablename + '\'');
+	Cursor cursor = db.query('\'' + config.tablename + '\'', countProjection, null, null, null, null, null);
+        try {
+            cursor.moveToFirst();
+            return cursor.getLong(0);
+        } finally {
+            cursor.close();
+        }
     }
 
     /** See {@link #getKey(Object)}, but guarantees that the returned key is never null (throws if null). */
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoMaster.java b/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoMaster.java
index 5b635bcd..4a7d1dbc 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoMaster.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoMaster.java
@@ -19,7 +19,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import android.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 import de.greenrobot.dao.internal.DaoConfig;
 
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoSession.java b/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoSession.java
index c3a3d5ce..decc5529 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoSession.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoSession.java
@@ -22,7 +22,7 @@
 import java.util.Map;
 import java.util.concurrent.Callable;
 
-import android.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.async.AsyncSession;
 import de.greenrobot.dao.query.QueryBuilder;
 
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/DbUtils.java b/DaoCore/src/main/java/de/greenrobot/dao/DbUtils.java
index 4cf4a389..c5ff2ccb 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/DbUtils.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/DbUtils.java
@@ -24,7 +24,7 @@
 import android.content.Context;
 import android.database.Cursor;
 import android.database.DatabaseUtils;
-import android.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteDatabase;
 
 /** Database utils, for example to execute SQL scripts */
 // TODO add unit tests
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/InternalUnitTestDaoAccess.java b/DaoCore/src/main/java/de/greenrobot/dao/InternalUnitTestDaoAccess.java
index 78df9030..75354cb9 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/InternalUnitTestDaoAccess.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/InternalUnitTestDaoAccess.java
@@ -19,7 +19,7 @@
 import java.lang.reflect.Constructor;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.identityscope.IdentityScope;
 import de.greenrobot.dao.internal.DaoConfig;
 
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperation.java b/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperation.java
index 38136065..52215331 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperation.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperation.java
@@ -16,7 +16,7 @@
 
 package de.greenrobot.dao.async;
 
-import android.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.DaoException;
 
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperationExecutor.java b/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperationExecutor.java
index 6e3b277a..b4d55504 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperationExecutor.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperationExecutor.java
@@ -15,7 +15,7 @@
  */
 package de.greenrobot.dao.async;
 
-import android.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteDatabase;
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncSession.java b/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncSession.java
index 45e7dfc2..123c58c7 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncSession.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncSession.java
@@ -1,6 +1,6 @@
 package de.greenrobot.dao.async;
 
-import android.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.AbstractDaoSession;
 import de.greenrobot.dao.DaoException;
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/internal/DaoConfig.java b/DaoCore/src/main/java/de/greenrobot/dao/internal/DaoConfig.java
index 96473029..098a9fbb 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/internal/DaoConfig.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/internal/DaoConfig.java
@@ -20,7 +20,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import android.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.Property;
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java b/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java
index 9414f1f7..38903555 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java
@@ -15,8 +15,8 @@
  */
 package de.greenrobot.dao.internal;
 
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import org.sqlite.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteStatement;
 
 /** Helper class to create SQL statements for specific tables (used by greenDAO internally). */
 public class TableStatements {
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/DeleteQuery.java b/DaoCore/src/main/java/de/greenrobot/dao/query/DeleteQuery.java
index ae4960e8..33c29501 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/DeleteQuery.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/query/DeleteQuery.java
@@ -15,7 +15,7 @@
  */
 package de.greenrobot.dao.query;
 
-import android.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
 
 /**
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoSessionTest.java b/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoSessionTest.java
index 08bc0ff9..22cccf3f 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoSessionTest.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoSessionTest.java
@@ -19,7 +19,7 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 
-import android.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.AbstractDaoSession;
 
@@ -63,4 +63,4 @@ protected void setUp() throws Exception {
         daoSession = (S) daoMaster.newSession();
     }
 
-}
\ No newline at end of file
+}
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTest.java b/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTest.java
index 6c301da7..bed11039 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTest.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTest.java
@@ -18,7 +18,7 @@
 
 import java.lang.reflect.Method;
 
-import android.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.DaoLog;
 import de.greenrobot.dao.InternalUnitTestDaoAccess;
@@ -92,4 +92,4 @@ protected void clearIdentityScopeIfAny() {
     protected void logTableDump() {
         logTableDump(dao.getTablename());
     }
-}
\ No newline at end of file
+}
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/test/DbTest.java b/DaoCore/src/main/java/de/greenrobot/dao/test/DbTest.java
index 6788eca0..6456e781 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/test/DbTest.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/test/DbTest.java
@@ -18,7 +18,7 @@
 
 import android.app.Application;
 import android.app.Instrumentation;
-import android.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteDatabase;
 import android.test.AndroidTestCase;
 import de.greenrobot.dao.DbUtils;
 
@@ -89,12 +89,21 @@ public void terminateApplication() {
 
     /** May be overriden by sub classes to set up a different db. */
     protected SQLiteDatabase createDatabase() {
-        if (inMemory) {
+        //if (inMemory) {
             return SQLiteDatabase.create(null);
-        } else {
+        /*} else {
             getContext().deleteDatabase(DB_NAME);
-            return getContext().openOrCreateDatabase(DB_NAME, 0, null);
-        }
+            int mode = 0;
+            File f = getContext().validateFilePath(DB_NAME, true);
+            int flags = SQLiteDatabase.CREATE_IF_NECESSARY;
+            if ((mode & getContext().MODE_ENABLE_WRITE_AHEAD_LOGGING) != 0) {
+                flags |= SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING;
+            }
+            SQLiteDatabase db = SQLiteDatabase.openDatabase(f.getPath(), null, flags, null);
+            setFilePermissionsFromMode(f.getPath(), mode, 0);
+            return db;
+            //return getContext().openOrCreateDatabase(DB_NAME, 0, null);
+        }*/
     }
 
     @Override
@@ -114,4 +123,4 @@ protected void logTableDump(String tablename) {
         DbUtils.logTableDump(db, tablename);
     }
 
-}
\ No newline at end of file
+}
diff --git a/DaoGenerator/build.gradle b/DaoGenerator/build.gradle
index ccdbde8b..aae564c9 100644
--- a/DaoGenerator/build.gradle
+++ b/DaoGenerator/build.gradle
@@ -3,7 +3,7 @@ apply plugin: 'maven'
 apply plugin: 'signing'
 
 group = 'de.greenrobot'
-archivesBaseName = 'greendao-generator'
+archivesBaseName = 'greendao-generator-sqlite'
 version = '2.0.0'
 sourceCompatibility = 1.6
 
diff --git a/DaoGenerator/src-template/content-provider.ftl b/DaoGenerator/src-template/content-provider.ftl
index 93396f73..b3dfbbe1 100644
--- a/DaoGenerator/src-template/content-provider.ftl
+++ b/DaoGenerator/src-template/content-provider.ftl
@@ -5,8 +5,8 @@ import android.content.ContentResolver;
 import android.content.ContentValues;
 import android.content.UriMatcher;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteQueryBuilder;
+import org.sqlite.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteQueryBuilder;
 import android.net.Uri;
 
 import de.greenrobot.dao.DaoLog;
diff --git a/DaoGenerator/src-template/dao-master.ftl b/DaoGenerator/src-template/dao-master.ftl
index adaffc48..46ffadd9 100644
--- a/DaoGenerator/src-template/dao-master.ftl
+++ b/DaoGenerator/src-template/dao-master.ftl
@@ -20,9 +20,9 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 package ${schema.defaultJavaPackageDao};
 
 import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteDatabase.CursorFactory;
-import android.database.sqlite.SQLiteOpenHelper;
+import org.sqlite.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteDatabase.CursorFactory;
+import org.sqlite.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
diff --git a/DaoGenerator/src-template/dao-session.ftl b/DaoGenerator/src-template/dao-session.ftl
index e0201a48..aabb3464 100644
--- a/DaoGenerator/src-template/dao-session.ftl
+++ b/DaoGenerator/src-template/dao-session.ftl
@@ -19,7 +19,7 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 -->
 package ${schema.defaultJavaPackageDao};
 
-import android.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteDatabase;
 
 import java.util.Map;
 
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 60f7045b..78ceeb69 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -28,8 +28,8 @@ import java.util.List;
 import java.util.ArrayList;
 </#if>
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import org.sqlite.database.sqlite.SQLiteDatabase;
+import org.sqlite.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index e4e64e8f..8b7da2de 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -146,7 +146,7 @@ property>${property.javaTypeInEntity} ${property.propertyName}<#if property_has_
 -->
 <#list entity.toOneRelations as toOne>
     /** To-one relationship, resolved on first access. */
-    public ${toOne.targetEntity.className} get${toOne.name?cap_first}() {
+    public com.sstatzz.shared.model.${toOne.targetEntity.className} get${toOne.name?cap_first}() {
 <#if toOne.useFkProperty>
         ${toOne.fkProperties[0].javaType} __key = this.${toOne.fkProperties[0].propertyName};
         if (${toOne.name}__resolvedKey == null || <#--
@@ -182,6 +182,10 @@ property>${property.javaTypeInEntity} ${property.propertyName}<#if property_has_
     }
 </#if>
 
+    public void set${toOne.name?cap_first}(com.sstatzz.shared.model.${toOne.targetEntity.className} ${toOne.name}) {
+       set${toOne.name?cap_first}( (${toOne.targetEntity.className}) ${toOne.name});
+    }
+
     public void set${toOne.name?cap_first}(${toOne.targetEntity.className} ${toOne.name}) {
 <#if toOne.fkProperties[0].notNull>
         if (${toOne.name} == null) {
@@ -207,7 +211,7 @@ property>${property.javaTypeInEntity} ${property.propertyName}<#if property_has_
 -->
 <#list entity.toManyRelations as toMany>
     /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
-    public List<${toMany.targetEntity.className}> get${toMany.name?cap_first}() {
+    public List<com.sstatzz.shared.model.${toMany.targetEntity.className}> get${toMany.name?cap_first}() {
         if (${toMany.name} == null) {
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
@@ -222,7 +226,8 @@ property>${property.javaTypeInEntity} ${property.propertyName}<#if property_has_
                 }
             }
         }
-        return ${toMany.name};
+        List<com.sstatzz.shared.model.${toMany.targetEntity.className}> temp = ${entity.className}.UnsafeCastUtil.cast(${toMany.name});
+        return temp;
     }
 
     /** Resets a to-many relationship, making the next get call to query for a fresh result. */
@@ -267,4 +272,15 @@ property>${property.javaTypeInEntity} ${property.propertyName}<#if property_has_
 ${keepMethods!}    // KEEP METHODS END
 
 </#if>
+    static class UnsafeCastUtil {
+           private UnsafeCastUtil(){ /* not instatiable */}
+
+           /**
+           * Warning! Using this method is a sin against the gods of programming!
+           */
+           @SuppressWarnings("unchecked")
+           public static <T> T cast(Object o){
+                   return (T)o;
+           }
+    }
 }
