diff --git a/DaoCore/src/de/greenrobot/dao/DbUtils.java b/DaoCore/src/de/greenrobot/dao/DbUtils.java
index be61b15b..1b011926 100644
--- a/DaoCore/src/de/greenrobot/dao/DbUtils.java
+++ b/DaoCore/src/de/greenrobot/dao/DbUtils.java
@@ -131,36 +131,48 @@ public static void logTableDump(SQLiteDatabase db, String tablename) {
         }
     }
 
+    public static byte[] serialize(Object o) throws IOException {
+        ByteArrayOutputStream bos = null;
+        try {
+            ObjectOutput out = null;
+            bos = new ByteArrayOutputStream();
+            out = new ObjectOutputStream(bos);
+            out.writeObject(o);
+            // Get the bytes of the serialized object
+            return bos.toByteArray();
+        } finally {
+            closeQuietly(bos);
+        }
+    }
+
     public static byte[] serializeObject(Object o) {
         if(o == null) {
             return null;
         }
-        ByteArrayOutputStream bos = new ByteArrayOutputStream();
         try {
-            ObjectOutput out = new ObjectOutputStream(bos);
-            out.writeObject(o);
-            out.close();
-
-            // Get the bytes of the serialized object
-            byte[] buf = bos.toByteArray();
-
-            return buf;
+            return serialize(o);
         } catch(IOException ioe) {
             Log.d("DBUTIL", "error" + ioe == null ? "null" : ioe.getMessage());
             return null;
         }
     }
 
+    public static Object deserialize(byte[] b) throws IOException, ClassNotFoundException {
+        ObjectInputStream in = null;
+        try {
+            in = new ObjectInputStream(new ByteArrayInputStream(b));
+            return in.readObject();
+        } finally {
+            closeQuietly(in);
+        }
+    }
+
     public static Object deserializeObject(byte[] b) {
         if(b == null) {
             return null;
         }
         try {
-            ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(b));
-            Object object = in.readObject();
-            in.close();
-
-            return object;
+            return deserialize(b);
         } catch(ClassNotFoundException cnfe) {
             return null;
         } catch(IOException ioe) {
@@ -168,4 +180,14 @@ public static Object deserializeObject(byte[] b) {
         }
     }
 
+    private static void closeQuietly(Closeable c) {
+        if (c != null) {
+            try {
+                c.close();
+            }
+            catch (Exception e) {
+                //
+            }
+        }
+    }
 }
