diff --git a/DaoGenerator/src-template/entity-base.ftl b/DaoGenerator/src-template/entity-base.ftl
index 4310eea9..5c5fbed3 100644
--- a/DaoGenerator/src-template/entity-base.ftl
+++ b/DaoGenerator/src-template/entity-base.ftl
@@ -34,8 +34,8 @@ import ${schema.defaultJavaPackageDao}.DaoSession;
 import de.greenrobot.dao.DaoException;
 
 </#if>
-<#if entity.additionalImportsEntity?has_content>
-<#list entity.additionalImportsEntity as additionalImport>
+<#if entity.additionalImportsEntityBase?has_content>
+<#list entity.additionalImportsEntityBase as additionalImport>
 import ${additionalImport};
 </#list>
 </#if>
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 0d59dc3c..0d7d6b72 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -1,3 +1,4 @@
+<#include "*/annotation.ftl">
 <#--
 
 Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
@@ -19,6 +20,13 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 -->
 package ${entity.javaPackage};
 
+<#if entity.additionalImportsEntity?has_content>
+<#list entity.additionalImportsEntity as additionalImport>
+import ${additionalImport};
+</#list>
+</#if>
+
+
 <#if entity.hasKeepSections>
 // THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
 
@@ -30,6 +38,7 @@ package ${entity.javaPackage};
 /**
  * Entity mapped to table ${entity.tableName}.
  */
+<@print_annotations entity.annotations, ""/>
 public class ${entity.className} extends ${entity.classNameBase} <#if
 entity.interfacesToImplement?has_content> implements <#list entity.interfacesToImplement
 as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index 03e2a74d..22da5ebd 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -52,6 +52,7 @@
     private final List<ToOne> toOneRelations;
     private final List<ToMany> toManyRelations;
     private final List<ToMany> incomingToManyRelations;
+    private final Collection<String> additionalImportsEntityBase;
     private final Collection<String> additionalImportsEntity;
     private final Collection<String> additionalImportsDao;
     private final List<String> interfacesToImplement;
@@ -92,6 +93,7 @@
         toOneRelations = new ArrayList<ToOne>();
         toManyRelations = new ArrayList<ToMany>();
         incomingToManyRelations = new ArrayList<ToMany>();
+        additionalImportsEntityBase = new TreeSet<String>();
         additionalImportsEntity = new TreeSet<String>();
         additionalImportsDao = new TreeSet<String>();
         interfacesToImplement = new ArrayList<String>();
@@ -481,14 +483,18 @@ public Boolean getHasKeepSections() {
         return hasKeepSections;
     }
 
-    public Collection<String> getAdditionalImportsEntity() {
-        return additionalImportsEntity;
+    public Collection<String> getAdditionalImportsEntityBase() {
+        return additionalImportsEntityBase;
     }
 
     public Collection<String> getAdditionalImportsDao() {
         return additionalImportsDao;
     }
 
+    public Collection<String> getAdditionalImportsEntity() {
+        return additionalImportsEntity;
+    }
+
     public void setHasKeepSections(Boolean hasKeepSections) {
         this.hasKeepSections = hasKeepSections;
     }
@@ -665,7 +671,7 @@ private void init3rdPassRelations() {
 
     private void init3rdPassAdditionalImports() {
         if (active && !javaPackage.equals(javaPackageDao)) {
-            additionalImportsEntity.add(javaPackageDao + "." + classNameDao);
+            additionalImportsEntityBase.add(javaPackageDao + "." + classNameDao);
         }
 
         for (ToOne toOne : toOneRelations) {
@@ -685,6 +691,16 @@ private void init3rdPassAdditionalImports() {
         for(Property property : properties) {
             checkAdditionalImportsProperty(property);
         }
+
+        checkAddionalImportsAnnotaion(annotations);
+
+        //for entity itself not the base class. we need to import all class annotations
+        for(Annotation annotation : annotations) {
+            if(annotation.getPackage() != null) {
+                additionalImportsEntity.add(annotation.getPackage());
+            }
+        }
+
     }
 
     private void checkAdditionalImportsProperty(Property property) {
@@ -696,17 +712,17 @@ private void checkAdditionalImportsProperty(Property property) {
     private void checkAddionalImportsAnnotaion(List<Annotation> annotations) {
         for(Annotation annotation : annotations) {
             if(annotation.getPackage() != null) {
-                additionalImportsEntity.add(annotation.getPackage());
+                additionalImportsEntityBase.add(annotation.getPackage());
             }
         }
     }
 
     private void checkAdditionalImportsEntityTargetEntity(Entity targetEntity) {
         if (!targetEntity.getJavaPackage().equals(javaPackage)) {
-            additionalImportsEntity.add(targetEntity.getJavaPackage() + "." + targetEntity.getClassName());
+            additionalImportsEntityBase.add(targetEntity.getJavaPackage() + "." + targetEntity.getClassName());
         }
         if (!targetEntity.getJavaPackageDao().equals(javaPackage)) {
-            additionalImportsEntity.add(targetEntity.getJavaPackageDao() + "." + targetEntity.getClassNameDao());
+            additionalImportsEntityBase.add(targetEntity.getJavaPackageDao() + "." + targetEntity.getClassNameDao());
         }
     }
 
