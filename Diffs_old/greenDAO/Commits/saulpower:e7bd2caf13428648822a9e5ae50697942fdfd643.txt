diff --git a/.gitignore b/.gitignore
index 2ccd1fa7..7455a831 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,21 @@
 .gradle
 *.iml
-.idea/
\ No newline at end of file
+.idea/
+build/
+
+# Eclipse
+.classpath
+.project
+.settings/
+
+# Intellij
+.idea/
+*.iml
+*.iws
+
+# Mac
+.DS_Store
+
+# Maven
+log/
+target/
diff --git a/DaoCore/src/de/greenrobot/dao/DaoEnum.java b/DaoCore/src/de/greenrobot/dao/DaoEnum.java
new file mode 100644
index 00000000..86337c1b
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/DaoEnum.java
@@ -0,0 +1,9 @@
+package de.greenrobot.dao;
+
+/**
+ * Created by saulhoward on 3/10/14.
+ */
+public interface DaoEnum {
+
+    long getValue();
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java b/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
index ed2996f7..337a4e66 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
@@ -1,6 +1,10 @@
 package de.greenrobot.daoexample;
 
 import java.util.List;
+import de.greenrobot.dao.DaoEnum;
+import java.util.HashMap;
+import java.util.Map;
+
 import de.greenrobot.daoexample.DaoSession;
 import de.greenrobot.dao.DaoException;
 
@@ -58,6 +62,36 @@ public void setName(String name) {
         this.name = name;
     }
 
+    public enum OrderType implements DaoEnum {
+        WORK(1),
+        PERSONAL(2),
+        CHURCH(3);
+
+        private static final Map<Long, OrderType> intToTypeMap = new HashMap<Long, OrderType>();
+
+        static {
+            for (OrderType type : OrderType.values()) {
+                intToTypeMap.put(type.value, type);
+            }
+        }
+
+        public static OrderType fromInt(long i) {
+            OrderType type = intToTypeMap.get(Long.valueOf(i));
+            return type;
+        }
+
+        private final long value;
+
+        private OrderType(long value) {
+            this.value = value;
+        }
+
+        @Override
+        public long getValue() {
+            return value;
+        }
+    }
+
     /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
     public List<Order> getOrders() {
         if (orders == null) {
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
index 95ecfb86..7b267172 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
@@ -1,5 +1,6 @@
 package de.greenrobot.daoexample;
 
+import de.greenrobot.daoexample.Customer.OrderType;
 import de.greenrobot.daoexample.DaoSession;
 import de.greenrobot.dao.DaoException;
 
@@ -9,6 +10,7 @@
  */
 public class Order {
 
+    private OrderType type;
     private Long id;
     private java.util.Date date;
     private long customerId;
@@ -30,7 +32,8 @@ public Order(Long id) {
         this.id = id;
     }
 
-    public Order(Long id, java.util.Date date, long customerId) {
+    public Order(OrderType type, Long id, java.util.Date date, long customerId) {
+        this.type = type;
         this.id = id;
         this.date = date;
         this.customerId = customerId;
@@ -42,6 +45,14 @@ public void __setDaoSession(DaoSession daoSession) {
         myDao = daoSession != null ? daoSession.getOrderDao() : null;
     }
 
+    public OrderType getType() {
+        return type;
+    }
+
+    public void setType(OrderType type) {
+        this.type = type;
+    }
+
     public Long getId() {
         return id;
     }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
index d3ac55a7..ea43c257 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
@@ -14,6 +14,7 @@
 import de.greenrobot.dao.query.QueryBuilder;
 
 import de.greenrobot.daoexample.Order;
+import de.greenrobot.daoexample.Customer.OrderType;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -28,9 +29,10 @@
      * Can be used for QueryBuilder and for referencing column names.
     */
     public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
-        public final static Property CustomerId = new Property(2, long.class, "customerId", false, "CUSTOMER_ID");
+        public final static Property Type = new Property(0, OrderType.class, "type", false, "TYPE");
+        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
+        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
+        public final static Property CustomerId = new Property(3, long.class, "customerId", false, "CUSTOMER_ID");
     };
 
     private DaoSession daoSession;
@@ -50,9 +52,10 @@ public OrderDao(DaoConfig config, DaoSession daoSession) {
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "'ORDERS' (" + //
-                "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'DATE' INTEGER," + // 1: date
-                "'CUSTOMER_ID' INTEGER NOT NULL );"); // 2: customerId
+                "'TYPE' INTEGER," + // 0: type
+                "'_id' INTEGER PRIMARY KEY ," + // 1: id
+                "'DATE' INTEGER," + // 2: date
+                "'CUSTOMER_ID' INTEGER NOT NULL );"); // 3: customerId
     }
 
     /** Drops the underlying database table. */
@@ -66,16 +69,21 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
     protected void bindValues(SQLiteStatement stmt, Order entity) {
         stmt.clearBindings();
  
+        OrderType type = entity.getType();
+        if (type != null) {
+            stmt.bindLong(1, type.getValue());
+        }
+ 
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(1, id);
+            stmt.bindLong(2, id);
         }
  
         java.util.Date date = entity.getDate();
         if (date != null) {
-            stmt.bindLong(2, date.getTime());
+            stmt.bindLong(3, date.getTime());
         }
-        stmt.bindLong(3, entity.getCustomerId());
+        stmt.bindLong(4, entity.getCustomerId());
     }
 
     @Override
@@ -87,16 +95,17 @@ protected void attachEntity(Order entity) {
     /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
     }    
 
     /** @inheritdoc */
     @Override
     public Order readEntity(Cursor cursor, int offset) {
         Order entity = new Order( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
-            cursor.getLong(offset + 2) // customerId
+            cursor.isNull(offset + 0) ? null : OrderType.fromInt(cursor.getLong(offset + 0)), // type
+            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
+            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // date
+            cursor.getLong(offset + 3) // customerId
         );
         return entity;
     }
@@ -104,9 +113,10 @@ public Order readEntity(Cursor cursor, int offset) {
     /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, Order entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
-        entity.setCustomerId(cursor.getLong(offset + 2));
+        entity.setType(cursor.isNull(offset + 0) ? null : OrderType.fromInt(cursor.getLong(offset + 0)));
+        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
+        entity.setDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
+        entity.setCustomerId(cursor.getLong(offset + 3));
      }
     
     /** @inheritdoc */
@@ -147,97 +157,97 @@ protected boolean isEntityUpdateable() {
         return query.list();
     }
 
-    private String selectDeep;
-
-    protected String getSelectDeep() {
-        if (selectDeep == null) {
-            StringBuilder builder = new StringBuilder("SELECT ");
-            SqlUtils.appendColumns(builder, "T", getAllColumns());
-            builder.append(',');
-            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomerDao().getAllColumns());
-            builder.append(" FROM ORDERS T");
-            builder.append(" LEFT JOIN CUSTOMER T0 ON T.'CUSTOMER_ID'=T0.'_id'");
-            builder.append(' ');
-            selectDeep = builder.toString();
-        }
-        return selectDeep;
-    }
-    
-    protected Order loadCurrentDeep(Cursor cursor, boolean lock) {
-        Order entity = loadCurrent(cursor, 0, lock);
-        int offset = getAllColumns().length;
-
-        Customer customer = loadCurrentOther(daoSession.getCustomerDao(), cursor, offset);
-         if(customer != null) {
-            entity.setCustomer(customer);
-        }
-
-        return entity;    
-    }
-
-    public Order loadDeep(Long key) {
-        assertSinglePk();
-        if (key == null) {
-            return null;
-        }
-
-        StringBuilder builder = new StringBuilder(getSelectDeep());
-        builder.append("WHERE ");
-        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
-        String sql = builder.toString();
-        
-        String[] keyArray = new String[] { key.toString() };
-        Cursor cursor = db.rawQuery(sql, keyArray);
-        
-        try {
-            boolean available = cursor.moveToFirst();
-            if (!available) {
-                return null;
-            } else if (!cursor.isLast()) {
-                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
-            }
-            return loadCurrentDeep(cursor, true);
-        } finally {
-            cursor.close();
-        }
-    }
-    
-    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
-    public List<Order> loadAllDeepFromCursor(Cursor cursor) {
-        int count = cursor.getCount();
-        List<Order> list = new ArrayList<Order>(count);
-        
-        if (cursor.moveToFirst()) {
-            if (identityScope != null) {
-                identityScope.lock();
-                identityScope.reserveRoom(count);
-            }
-            try {
-                do {
-                    list.add(loadCurrentDeep(cursor, false));
-                } while (cursor.moveToNext());
-            } finally {
-                if (identityScope != null) {
-                    identityScope.unlock();
-                }
-            }
-        }
-        return list;
-    }
-    
-    protected List<Order> loadDeepAllAndCloseCursor(Cursor cursor) {
-        try {
-            return loadAllDeepFromCursor(cursor);
-        } finally {
-            cursor.close();
-        }
-    }
-    
-
-    /** A raw-style query where you can pass any WHERE clause and arguments. */
-    public List<Order> queryDeep(String where, String... selectionArg) {
-        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
-        return loadDeepAllAndCloseCursor(cursor);
-    }
- 
+    private String selectDeep;
+
+    protected String getSelectDeep() {
+        if (selectDeep == null) {
+            StringBuilder builder = new StringBuilder("SELECT ");
+            SqlUtils.appendColumns(builder, "T", getAllColumns());
+            builder.append(',');
+            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomerDao().getAllColumns());
+            builder.append(" FROM ORDERS T");
+            builder.append(" LEFT JOIN CUSTOMER T0 ON T.'CUSTOMER_ID'=T0.'_id'");
+            builder.append(' ');
+            selectDeep = builder.toString();
+        }
+        return selectDeep;
+    }
+    
+    protected Order loadCurrentDeep(Cursor cursor, boolean lock) {
+        Order entity = loadCurrent(cursor, 0, lock);
+        int offset = getAllColumns().length;
+
+        Customer customer = loadCurrentOther(daoSession.getCustomerDao(), cursor, offset);
+         if(customer != null) {
+            entity.setCustomer(customer);
+        }
+
+        return entity;    
+    }
+
+    public Order loadDeep(Long key) {
+        assertSinglePk();
+        if (key == null) {
+            return null;
+        }
+
+        StringBuilder builder = new StringBuilder(getSelectDeep());
+        builder.append("WHERE ");
+        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
+        String sql = builder.toString();
+        
+        String[] keyArray = new String[] { key.toString() };
+        Cursor cursor = db.rawQuery(sql, keyArray);
+        
+        try {
+            boolean available = cursor.moveToFirst();
+            if (!available) {
+                return null;
+            } else if (!cursor.isLast()) {
+                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
+            }
+            return loadCurrentDeep(cursor, true);
+        } finally {
+            cursor.close();
+        }
+    }
+    
+    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
+    public List<Order> loadAllDeepFromCursor(Cursor cursor) {
+        int count = cursor.getCount();
+        List<Order> list = new ArrayList<Order>(count);
+        
+        if (cursor.moveToFirst()) {
+            if (identityScope != null) {
+                identityScope.lock();
+                identityScope.reserveRoom(count);
+            }
+            try {
+                do {
+                    list.add(loadCurrentDeep(cursor, false));
+                } while (cursor.moveToNext());
+            } finally {
+                if (identityScope != null) {
+                    identityScope.unlock();
+                }
+            }
+        }
+        return list;
+    }
+    
+    protected List<Order> loadDeepAllAndCloseCursor(Cursor cursor) {
+        try {
+            return loadAllDeepFromCursor(cursor);
+        } finally {
+            cursor.close();
+        }
+    }
+    
+
+    /** A raw-style query where you can pass any WHERE clause and arguments. */
+    public List<Order> queryDeep(String where, String... selectionArg) {
+        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
+        return loadDeepAllAndCloseCursor(cursor);
+    }
+ 
 }
diff --git a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
index 48a3ba53..15361f5b 100644
--- a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
+++ b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
@@ -116,7 +116,7 @@ private void addNote() {
 
         final DateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);
         String comment = "Added on " + df.format(new Date());
-        Note note = new Note(null, noteText, comment, new Date());
+        Note note = new Note(null, noteText, comment, new Date(), Note.NoteType.CHURCH);
         noteDao.insert(note);
         Log.d("DaoExample", "Inserted new note, ID: " + note.getId());
 
diff --git a/DaoExampleGenerator/build.gradle b/DaoExampleGenerator/build.gradle
index eadcfcd6..ac306b54 100644
--- a/DaoExampleGenerator/build.gradle
+++ b/DaoExampleGenerator/build.gradle
@@ -13,7 +13,7 @@ repositories {
 }
 
 dependencies {
-
+    compile project(':DaoGenerator')
 }
 
 sourceSets {
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index f097aba1..8c89ea1d 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -15,11 +15,9 @@
  */
 package de.greenrobot.daogenerator.gentest;
 
-import de.greenrobot.daogenerator.DaoGenerator;
-import de.greenrobot.daogenerator.Entity;
-import de.greenrobot.daogenerator.Property;
-import de.greenrobot.daogenerator.Schema;
-import de.greenrobot.daogenerator.ToMany;
+import de.greenrobot.daogenerator.*;
+
+import java.util.ArrayList;
 
 /**
  * Generates entities and DAOs for the example project DaoExample.
@@ -36,8 +34,7 @@ public static void main(String[] args) throws Exception {
         addNote(schema);
         addCustomerOrder(schema);
 
-
-        new DaoGenerator().generateAll(schema, "../DaoExample/src-gen");
+        new DaoGenerator().generateAll(schema, "/Users/saulhoward/Developer/greenDAO/DaoExample/src-gen");
     }
 
     private static void addNote(Schema schema) {
@@ -48,9 +45,13 @@ private static void addNote(Schema schema) {
         note.addDateProperty("date");
     }
 
-    private static void addNoteType(Schema schema) {
-        Entity noteType = schema.addEntity("NoteType");
-        noteType.addEnumProperty("Test");
+    private static EntityEnum addOrderType(Entity entity) {
+        ArrayList<EntityEnum.Value> values = new ArrayList<EntityEnum.Value>();
+        values.add(new EntityEnum.Value("Work", 1));
+        values.add(new EntityEnum.Value("Personal", 2));
+        values.add(new EntityEnum.Value("Church", 3));
+
+        return entity.addEnum("OrderType", values);
     }
 
     private static void addCustomerOrder(Schema schema) {
@@ -58,8 +59,11 @@ private static void addCustomerOrder(Schema schema) {
         customer.addIdProperty();
         customer.addStringProperty("name").notNull();
 
+        EntityEnum entityEnum = addOrderType(customer);
+
         Entity order = schema.addEntity("Order");
         order.setTableName("ORDERS"); // "ORDER" is a reserved keyword
+        order.addEnumProperty(entityEnum, "type");
         order.addIdProperty();
         Property orderDate = order.addDateProperty("date").getProperty();
         Property customerId = order.addLongProperty("customerId").notNull().getProperty();
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 443f74dc..77f33ddf 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -17,8 +17,8 @@ You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
-<#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long" } />
-<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long"  } />
+<#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long", "Enum": "Long" } />
+<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long", "Enum": "Long"  } />
 package ${entity.javaPackageDao};
 
 <#if entity.toOneRelations?has_content || entity.incomingToManyRelations?has_content>
@@ -53,6 +53,11 @@ import ${additionalImport};
 
 </#if>
 import ${entity.javaPackage}.${entity.className};
+<#list entity.properties as property>
+    <#if property.anEnum && entity.className != property.entityEnum.entity.className>
+import ${entity.javaPackage}.${property.entityEnum.entity.className}.${property.entityEnum.enumName};
+    </#if>
+</#list>
 <#if entity.protobuf>
 import ${entity.javaPackage}.${entity.className}.Builder;
 </#if>
@@ -128,7 +133,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#if entity.protobuf>
         if(entity.has${property.propertyName?cap_first}()) {
     </#if>        stmt.bind${toBindType[property.propertyType]}(${property_index + 1}, entity.get${property.propertyName?cap_first}()<#if
-     property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if>);
+     property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if><#if property.propertyType == "Enum">.getValue()</#if>);
 <#if entity.protobuf>
         }
 </#if>
@@ -136,7 +141,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
         ${property.javaType} ${property.propertyName} = entity.get${property.propertyName?cap_first}();
         if (${property.propertyName} != null) {
             stmt.bind${toBindType[property.propertyType]}(${property_index + 1}, ${property.propertyName}<#if
- property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if>);
+ property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if><#if property.propertyType == "Enum">.getValue()</#if>);
         }
 </#if>
 </#list>
@@ -202,8 +207,10 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#list entity.properties as property>
             <#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#if
             property.propertyType == "Byte">(byte) </#if><#if
+            property.propertyType == "Enum">${property.javaType}.fromInt(</#if><#if
             property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
             property.propertyType == "Boolean"> != 0</#if><#if
+            property.propertyType == "Enum">)</#if><#if
             property.propertyType == "Date">)</#if><#if property_has_next>,</#if> // ${property.propertyName}
 </#list>        
         );
@@ -227,8 +234,10 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#list entity.properties as property>
         entity.set${property.propertyName?cap_first}(<#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#if
             property.propertyType == "Byte">(byte) </#if><#if
+            property.propertyType == "Enum">${property.javaType}.fromInt(</#if><#if
             property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
             property.propertyType == "Boolean"> != 0</#if><#if
+            property.propertyType == "Enum">)</#if><#if
             property.propertyType == "Date">)</#if>);
 </#list>
 </#if>
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index e40c0a18..50d7e2e6 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -2,7 +2,7 @@
 
 Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)     
                                                                            
-This file is part of greenDAO Generator.                                   
+This file is part of greenDAO Generator.
                                                                            
 greenDAO Generator is free software: you can redistribute it and/or modify 
 it under the terms of the GNU General Public License as published by       
@@ -25,6 +25,17 @@ package ${entity.javaPackage};
 <#if entity.toManyRelations?has_content>
 import java.util.List;
 </#if>
+<#if entity.enums?has_content>
+import de.greenrobot.dao.DaoEnum;
+import java.util.HashMap;
+import java.util.Map;
+
+</#if>
+<#list entity.properties as property>
+    <#if property.anEnum && entity.className != property.entityEnum.entity.className>
+import ${entity.javaPackage}.${property.entityEnum.entity.className}.${property.entityEnum.enumName};
+    </#if>
+</#list>
 <#if entity.active>
 import ${schema.defaultJavaPackageDao}.DaoSession;
 import de.greenrobot.dao.DaoException;
@@ -129,6 +140,38 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
         this.${property.propertyName} = ${property.propertyName};
     }
 
+</#list>
+<#list entity.enums as enum>
+    public enum ${enum.enumName} implements DaoEnum {
+        <#list enum.values as value>
+        ${value.name}(${value.tag})<#if value_has_next>,<#else>;</#if>
+        </#list>
+
+        private static final Map<Long, ${enum.enumName}> intToTypeMap = new HashMap<Long, ${enum.enumName}>();
+
+        static {
+            for (${enum.enumName} type : ${enum.enumName}.values()) {
+                intToTypeMap.put(type.value, type);
+            }
+        }
+
+        public static ${enum.enumName} fromInt(long i) {
+            ${enum.enumName} type = intToTypeMap.get(Long.valueOf(i));
+            return type;
+        }
+
+        private final long value;
+
+        private ${enum.enumName}(long value) {
+            this.value = value;
+        }
+
+        @Override
+        public long getValue() {
+            return value;
+        }
+    }
+
 </#list>
 <#--
 ##########################################
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index c9dfc193..3a76377c 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -41,6 +41,7 @@
     private final List<Property> propertiesPk;
     private final List<Property> propertiesNonPk;
     private final Set<String> propertyNames;
+    private final List<EntityEnum> enums;
     private final List<Index> indexes;
     private final List<ToOne> toOneRelations;
     private final List<ToMany> toManyRelations;
@@ -75,6 +76,7 @@
         propertiesPk = new ArrayList<Property>();
         propertiesNonPk = new ArrayList<Property>();
         propertyNames = new HashSet<String>();
+        enums = new ArrayList<EntityEnum>();
         indexes = new ArrayList<Index>();
         toOneRelations = new ArrayList<ToOne>();
         toManyRelations = new ArrayList<ToMany>();
@@ -126,8 +128,8 @@ public PropertyBuilder addDateProperty(String propertyName) {
         return addProperty(PropertyType.Date, propertyName);
     }
 
-    public PropertyBuilder addEnumProperty(String propertyName) {
-        return addProperty(PropertyType.Enum, propertyName);
+    public PropertyBuilder addEnumProperty(EntityEnum entityEnum, String propertyName) {
+        return addProperty(entityEnum, propertyName);
     }
 
     public PropertyBuilder addProperty(PropertyType propertyType, String propertyName) {
@@ -139,6 +141,15 @@ public PropertyBuilder addProperty(PropertyType propertyType, String propertyNam
         return builder;
     }
 
+    public PropertyBuilder addProperty(EntityEnum entityEnum, String propertyName) {
+        if (!propertyNames.add(propertyName)) {
+            throw new RuntimeException("Property already defined: " + propertyName);
+        }
+        PropertyBuilder builder = new Property.PropertyBuilder(schema, this, entityEnum, propertyName);
+        properties.add(builder.getProperty());
+        return builder;
+    }
+
     /** Adds a standard _id column required by standard Android classes, e.g. list adapters. */
     public PropertyBuilder addIdProperty() {
         PropertyBuilder builder = addLongProperty("id");
@@ -146,6 +157,14 @@ public PropertyBuilder addIdProperty() {
         return builder;
     }
 
+    public EntityEnum addEnum(String enumName, List<EntityEnum.Value> values) {
+        EntityEnum entityEnum = new EntityEnum(this, enumName, values);
+        enums.add(entityEnum);
+        return entityEnum;
+    }
+
+
+
     /** Adds a to-many relationship; the target entity is joined to the PK property of this entity (typically the ID). */
     public ToMany addToMany(Entity target, Property targetProperty) {
         Property[] targetProperties = {targetProperty};
@@ -211,7 +230,7 @@ public ToOne addToOneWithoutProperty(String name, Entity target, String fkColumn
 
     public ToOne addToOneWithoutProperty(String name, Entity target, String fkColumnName, boolean notNull,
                                          boolean unique) {
-        PropertyBuilder propertyBuilder = new PropertyBuilder(schema, this, null, name);
+        PropertyBuilder propertyBuilder = new PropertyBuilder(schema, this, (PropertyType) null, name);
         if (notNull) {
             propertyBuilder.notNull();
         }
@@ -375,6 +394,8 @@ public void setSkipGenerationTest(boolean skipGenerationTest) {
         this.skipGenerationTest = skipGenerationTest;
     }
 
+    public List<EntityEnum> getEnums() { return enums; }
+
     public List<ToOne> getToOneRelations() {
         return toOneRelations;
     }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/EntityEnum.java b/DaoGenerator/src/de/greenrobot/daogenerator/EntityEnum.java
new file mode 100644
index 00000000..48a1d154
--- /dev/null
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/EntityEnum.java
@@ -0,0 +1,104 @@
+package de.greenrobot.daogenerator;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+/**
+ * Created by saulhoward on 3/10/14.
+ */
+public class EntityEnum {
+
+    private final String enumName;
+    private final List<Value> values;
+
+    private final Entity entity;
+
+    public EntityEnum(Entity entity, String enumName, List<Value> values) {
+
+        if (enumName == null) throw new NullPointerException("name");
+        if (values == null) throw new NullPointerException("values");
+        if (entity == null) throw new NullPointerException("entity");
+        this.enumName = enumName;
+        this.values = Collections.unmodifiableList(new ArrayList<Value>(values));
+        this.entity = entity;
+    }
+
+    public String getEnumName() { return enumName; }
+
+    public List<Value> getValues() {
+        return values;
+    }
+
+    public Entity getEntity() { return entity; }
+
+    @Override
+    public boolean equals(Object other) {
+        if (other instanceof EntityEnum) {
+            EntityEnum that = (EntityEnum) other;
+            return enumName.equals(that.enumName) //
+                    && values.equals(that.values) //
+                    && entity.equals(that.entity);
+        }
+        return false;
+    }
+
+    @Override
+    public int hashCode() {
+        return enumName.hashCode();
+    }
+
+    @Override
+    public String toString() {
+        StringBuilder result = new StringBuilder();
+        result.append(enumName);
+        result.append(entity.toString());
+        for (Value value : values) {
+            result.append("\n  ").append(value);
+        }
+        return result.toString();
+    }
+
+    /**
+     * An enum constant.
+     */
+    public static final class Value {
+        private final String name;
+        private final int tag;
+
+        public Value(String name, int tag) {
+            if (name == null) throw new NullPointerException("name");
+            this.name = name.toUpperCase();
+            this.tag = tag;
+        }
+
+        public String getName() {
+            return name;
+        }
+
+        public int getTag() {
+            return tag;
+        }
+
+        @Override
+        public boolean equals(Object other) {
+            if (other instanceof Value) {
+                Value that = (Value) other;
+                return name.equals(that.name) //
+                        && tag == that.tag;
+            }
+            return false;
+        }
+
+        @Override
+        public int hashCode() {
+            return name.hashCode();
+        }
+
+        @Override
+        public String toString() {
+            StringBuilder sb = new StringBuilder(String.format("%s = %d", name, tag));
+            return sb.toString();
+        }
+    }
+}
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/EnumProperty.java b/DaoGenerator/src/de/greenrobot/daogenerator/EnumProperty.java
new file mode 100644
index 00000000..b6b4b27e
--- /dev/null
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/EnumProperty.java
@@ -0,0 +1,20 @@
+package de.greenrobot.daogenerator;
+
+/**
+ * Created by saulhoward on 3/11/14.
+ */
+public class EnumProperty extends Property {
+
+    private EntityEnum entityEnum;
+
+    public EnumProperty(Schema schema, Entity entity, EntityEnum entityEnum, String propertyName) {
+        super(schema, entity, PropertyType.Enum, propertyName);
+
+        this.entityEnum = entityEnum;
+    }
+
+    public EntityEnum getEntityEnum() { return entityEnum; }
+
+    @Override
+    public String getJavaType() { return entityEnum.getEnumName(); }
+}
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index f54d05e8..bb5226f8 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -27,6 +27,10 @@ public PropertyBuilder(Schema schema, Entity entity, PropertyType propertyType,
             property = new Property(schema, entity, propertyType, propertyName);
         }
 
+        public PropertyBuilder(Schema schema, Entity entity, EntityEnum entityEnum, String propertyName) {
+            property = new EnumProperty(schema, entity, entityEnum, propertyName);
+        }
+
         public PropertyBuilder columnName(String columnName) {
             property.columnName = columnName;
             return this;
@@ -120,6 +124,8 @@ public Property getProperty() {
     private boolean pkDesc;
     private boolean pkAutoincrement;
 
+    private boolean isAnEnum;
+
     private boolean unique;
     private boolean notNull;
 
@@ -135,6 +141,7 @@ public Property(Schema schema, Entity entity, PropertyType propertyType, String
         this.entity = entity;
         this.propertyName = propertyName;
         this.propertyType = propertyType;
+        this.isAnEnum = propertyType == PropertyType.Enum;
     }
 
     public String getPropertyName() {
@@ -165,6 +172,8 @@ public boolean isAutoincrement() {
         return pkAutoincrement;
     }
 
+    public boolean isAnEnum() { return isAnEnum; }
+
     public String getConstraints() {
         return constraints;
     }
diff --git a/settings.gradle b/settings.gradle
index d568237f..dc0c4aa2 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,2 +1,2 @@
-include 'DaoCore', 'DaoGenerator', 'DaoExampleGenerator'
+include 'DaoCore', 'DaoGenerator', 'DaoExampleGenerator', 'DaoExample'
 // include 'DaoTest' // Travis needs some Android setup for this
\ No newline at end of file
