diff --git a/DaoCore/src/de/greenrobot/dao/GreenDaoListAdapter.java b/DaoCore/src/de/greenrobot/dao/GreenDaoListAdapter.java
new file mode 100644
index 00000000..7c0b4474
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/GreenDaoListAdapter.java
@@ -0,0 +1,122 @@
+package de.greenrobot.dao;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+
+public abstract class GreenDaoListAdapter<T extends HasId<Long>> extends BaseAdapter {
+	
+    protected boolean dataValid;
+    protected LazyList<T> lazyList;
+    protected Context context;
+
+    public GreenDaoListAdapter(Context context, LazyList<T> lazyList) {
+    	this.lazyList = lazyList;
+        this.dataValid = lazyList != null;
+        this.context = context;
+    }
+
+    /**
+     * Returns the list backing this adapter.
+     * @return the list.
+     */
+    public LazyList<T> getLazyList() {
+        return lazyList;
+    }
+
+    /**
+     * @see android.widget.ListAdapter#getCount()
+     */
+    @Override
+    public int getCount() {
+        return dataValid && lazyList != null ? lazyList.size() : 0;
+    }
+    
+    /**
+     * @see android.widget.ListAdapter#getItem(int)
+     */
+    @Override
+    public T getItem(int position) {
+        return dataValid && lazyList != null ? lazyList.get(position) : null;
+    }
+
+    /**
+     * @see android.widget.ListAdapter#getItemId(int)
+     */
+    @Override
+    public long getItemId(int position) {
+        if (dataValid && lazyList != null) {
+        	T item = lazyList.get(position);
+            return item!=null ? item.getId() : 0;
+        } else {
+            return 0;
+        }
+    }
+    
+    @Override
+    public boolean hasStableIds() {
+        return true;
+    }
+
+    /**
+     * @see android.widget.ListAdapter#getView(int, View, ViewGroup)
+     */
+    public View getView(int position, View convertView, ViewGroup parent) {
+    	
+        if (!dataValid) {
+            throw new IllegalStateException("this should only be called when lazylist is populated");
+        }
+        
+        T item = lazyList.get(position);
+        if (item == null) {
+            throw new IllegalStateException("Item at position " + position + " is null");
+        }
+        
+        View v = convertView == null ? newView(context, item, parent) : convertView;
+        bindView(v, context, item);
+        return v;
+    }
+
+    @Override
+    public View getDropDownView(int position, View convertView, ViewGroup parent) {
+    	
+        if (dataValid) {
+        	T item = lazyList.get(position);
+            View v = convertView == null ? newDropDownView(context, item, parent) : convertView;
+            bindView(v, context, item);
+            return v;
+        } else {
+            return null;
+        }
+    }
+    
+    /**
+     * Makes a new view to hold the data contained in the item.
+     * @param context Interface to application's global information
+     * @param item  The object that contains the data
+     * @param parent The parent to which the new view is attached to
+     * @return the newly created view.
+     */
+    public abstract View newView(Context context, T item, ViewGroup parent);
+
+    /**
+     * Makes a new drop down view to hold the data contained in the item.
+     * @param context Interface to application's global information
+     * @param item  The object that contains the data
+     * @param parent The parent to which the new view is attached to
+     * @return the newly created view.
+     */
+    public View newDropDownView(Context context, T item, ViewGroup parent) {
+        return newView(context, item, parent);
+    }
+
+    /**
+     * Bind an existing view to the data data contained in the item.
+     * @param view Existing view, returned earlier by newView
+     * @param context Interface to application's global information
+     * @param item The object that contains the data
+     */
+    public abstract void bindView(View view, Context context, T item);
+
+}
diff --git a/DaoCore/src/de/greenrobot/dao/HasId.java b/DaoCore/src/de/greenrobot/dao/HasId.java
new file mode 100644
index 00000000..36105fe9
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/HasId.java
@@ -0,0 +1,5 @@
+package de.greenrobot.dao;
+
+public interface HasId<T> {
+    public T getId();
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java b/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
index e493d0f9..7c7b373c 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
@@ -3,12 +3,13 @@
 import java.util.List;
 import de.greenrobot.daoexample.DaoSession;
 import de.greenrobot.dao.DaoException;
+import de.greenrobot.dao.HasId;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table CUSTOMER.
  */
-public class Customer {
+public class Customer implements HasId<Long> {
 
     private Long id;
     /** Not-null value. */
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
index 627b4d42..a3fb04ab 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
@@ -1,10 +1,13 @@
 package de.greenrobot.daoexample;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+
+import de.greenrobot.dao.HasId;
+
 /**
  * Entity mapped to table NOTE.
  */
-public class Note {
+public class Note implements HasId<Long> {
 
     private Long id;
     /** Not-null value. */
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
index 345eb7fc..ac8628ec 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
@@ -2,12 +2,13 @@
 
 import de.greenrobot.daoexample.DaoSession;
 import de.greenrobot.dao.DaoException;
+import de.greenrobot.dao.HasId;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table ORDERS.
  */
-public class Order {
+public class Order implements HasId<Long> {
 
     private Long id;
     private java.util.Date date;
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 98cf2b14..5210456d 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -28,6 +28,7 @@ import java.util.List;
 <#if entity.active>
 import ${schema.defaultJavaPackageDao}.DaoSession;
 import de.greenrobot.dao.DaoException;
+import de.greenrobot.dao.HasId;
 
 </#if>
 <#if entity.additionalImportsEntity?has_content>
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index 27f6cb3c..34649a3a 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -93,6 +93,9 @@
         additionalImportsDao = new TreeSet<String>();
         interfacesToImplement = new ArrayList<String>();
         constructors = true;
+
+        // Add Id interface to all entities
+        interfacesToImplement.add("HasId<Long>");
     }
 
     public PropertyBuilder addBooleanProperty(String propertyName) {
