diff --git a/DaoCore/build.gradle b/DaoCore/build.gradle
index 4978cc07..ace871bd 100644
--- a/DaoCore/build.gradle
+++ b/DaoCore/build.gradle
@@ -31,6 +31,10 @@ dependencies {
     provided 'com.google.android:android-test:4.1.1.4'
     provided 'com.google.android:annotations:4.1.1.4'
     provided 'com.google.android:support-v4:r7'
+    provided 'com.google.android:support-v4:r7'
+
+    provided files('libs/sqlcipher.jar')
+
     // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4'
     deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
 }
diff --git a/DaoCore/libs/sqlcipher.jar b/DaoCore/libs/sqlcipher.jar
new file mode 100644
index 00000000..51b02689
Binary files /dev/null and b/DaoCore/libs/sqlcipher.jar differ
diff --git a/DaoCore/src/de/greenrobot/dao/database/AndroidSQLiteDatabase.java b/DaoCore/src/de/greenrobot/dao/database/AndroidSQLiteDatabase.java
new file mode 100644
index 00000000..e3afa872
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/database/AndroidSQLiteDatabase.java
@@ -0,0 +1,82 @@
+/*
+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package de.greenrobot.dao.database;
+
+import android.database.Cursor;
+import android.database.SQLException;
+import android.database.sqlite.SQLiteDatabase;
+
+public class AndroidSQLiteDatabase implements Database {
+    private final SQLiteDatabase delegate;
+
+    public AndroidSQLiteDatabase(SQLiteDatabase delegate) {
+        this.delegate = delegate;
+    }
+
+    @Override
+    public Cursor rawQuery(String sql, String[] selectionArgs) {
+        return delegate.rawQuery(sql, selectionArgs);
+    }
+
+    @Override
+    public void execSQL(String sql) throws SQLException {
+        delegate.execSQL(sql);
+    }
+
+    @Override
+    public void beginTransaction() {
+        delegate.beginTransaction();
+    }
+
+    @Override
+    public void endTransaction() {
+        delegate.endTransaction();
+    }
+
+    @Override
+    public boolean inTransaction() {
+        return delegate.inTransaction();
+    }
+
+    @Override
+    public void setTransactionSuccessful() {
+        delegate.setTransactionSuccessful();
+    }
+
+    @Override
+    public void execSQL(String sql, Object[] bindArgs) throws SQLException {
+        delegate.execSQL(sql, bindArgs);
+    }
+
+    @Override
+    public DatabaseStatement compileStatement(String sql) {
+        return new AndroidSQLiteStatement(delegate.compileStatement(sql));
+    }
+
+    @Override
+    public boolean isDbLockedByCurrentThread() {
+        return delegate.isDbLockedByCurrentThread();
+    }
+
+    @Override
+    public void close() {
+        delegate.close();
+    }
+
+    public SQLiteDatabase getSQLiteDatabase() {
+        return delegate;
+    }
+}
diff --git a/DaoCore/src/de/greenrobot/dao/database/AndroidSQLiteStatement.java b/DaoCore/src/de/greenrobot/dao/database/AndroidSQLiteStatement.java
new file mode 100644
index 00000000..e985448b
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/database/AndroidSQLiteStatement.java
@@ -0,0 +1,77 @@
+/*
+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package de.greenrobot.dao.database;
+
+import android.database.sqlite.SQLiteStatement;
+
+public class AndroidSQLiteStatement implements DatabaseStatement {
+    private final SQLiteStatement delegate;
+
+    public AndroidSQLiteStatement(SQLiteStatement delegate) {
+        this.delegate = delegate;
+    }
+
+    @Override
+    public void execute() {
+        delegate.execute();
+    }
+
+    @Override
+    public long simpleQueryForLong() {
+        return delegate.simpleQueryForLong();
+    }
+
+    @Override
+    public void bindNull(int index) {
+        delegate.bindNull(index);
+    }
+
+    @Override
+    public long executeInsert() {
+        return delegate.executeInsert();
+    }
+
+    @Override
+    public void bindString(int index, String value) {
+        delegate.bindString(index, value);
+    }
+
+    @Override
+    public void bindBlob(int index, byte[] value) {
+        delegate.bindBlob(index, value);
+    }
+
+    @Override
+    public void bindLong(int index, long value) {
+        delegate.bindLong(index, value);
+    }
+
+    @Override
+    public void clearBindings() {
+        delegate.clearBindings();
+    }
+
+    @Override
+    public void bindDouble(int index, double value) {
+        delegate.bindDouble(index, value);
+    }
+
+    @Override
+    public void close() {
+        delegate.close();
+    }
+
+}
diff --git a/DaoCore/src/de/greenrobot/dao/database/Database.java b/DaoCore/src/de/greenrobot/dao/database/Database.java
new file mode 100644
index 00000000..14024b41
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/database/Database.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package de.greenrobot.dao.database;
+
+import android.database.Cursor;
+import android.database.SQLException;
+
+public interface Database {
+    Cursor rawQuery(String sql, String[] selectionArgs);
+
+    void execSQL(String sql) throws SQLException;
+
+    void beginTransaction();
+
+    void endTransaction();
+
+    boolean inTransaction();
+
+    void setTransactionSuccessful();
+
+    void execSQL(String sql, Object[] bindArgs) throws SQLException;
+
+    DatabaseStatement compileStatement(String sql);
+
+    boolean isDbLockedByCurrentThread();
+
+    void close();
+}
diff --git a/DaoCore/src/de/greenrobot/dao/database/DatabaseStatement.java b/DaoCore/src/de/greenrobot/dao/database/DatabaseStatement.java
new file mode 100644
index 00000000..c5743530
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/database/DatabaseStatement.java
@@ -0,0 +1,23 @@
+package de.greenrobot.dao.database;
+
+public interface DatabaseStatement {
+    void execute();
+
+    long simpleQueryForLong();
+
+    void bindNull(int index);
+
+    long executeInsert();
+
+    void bindString(int index, String value);
+
+    void bindBlob(int index, byte[] value);
+
+    void bindLong(int index, long value);
+
+    void clearBindings();
+
+    void bindDouble(int index, double value);
+
+    void close();
+}
diff --git a/DaoCore/src/de/greenrobot/dao/database/SQLCipherDatabase.java b/DaoCore/src/de/greenrobot/dao/database/SQLCipherDatabase.java
new file mode 100644
index 00000000..24031aff
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/database/SQLCipherDatabase.java
@@ -0,0 +1,82 @@
+/*
+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package de.greenrobot.dao.database;
+
+import android.database.Cursor;
+import android.database.SQLException;
+import net.sqlcipher.database.SQLiteDatabase;
+
+public class SQLCipherDatabase implements Database {
+    private final SQLiteDatabase delegate;
+
+    public SQLCipherDatabase(SQLiteDatabase delegate) {
+        this.delegate = delegate;
+    }
+
+    @Override
+    public Cursor rawQuery(String sql, String[] selectionArgs) {
+        return delegate.rawQuery(sql, selectionArgs);
+    }
+
+    @Override
+    public void execSQL(String sql) throws SQLException {
+        delegate.execSQL(sql);
+    }
+
+    @Override
+    public void beginTransaction() {
+        delegate.beginTransaction();
+    }
+
+    @Override
+    public void endTransaction() {
+        delegate.endTransaction();
+    }
+
+    @Override
+    public boolean inTransaction() {
+        return delegate.inTransaction();
+    }
+
+    @Override
+    public void setTransactionSuccessful() {
+        delegate.setTransactionSuccessful();
+    }
+
+    @Override
+    public void execSQL(String sql, Object[] bindArgs) throws SQLException {
+        delegate.execSQL(sql, bindArgs);
+    }
+
+    @Override
+    public DatabaseStatement compileStatement(String sql) {
+        return new SQLCipherStatement(delegate.compileStatement(sql));
+    }
+
+    @Override
+    public boolean isDbLockedByCurrentThread() {
+        return delegate.isDbLockedByCurrentThread();
+    }
+
+    @Override
+    public void close() {
+        delegate.close();
+    }
+
+    public SQLiteDatabase getSQLiteDatabase() {
+        return delegate;
+    }
+}
diff --git a/DaoCore/src/de/greenrobot/dao/database/SQLCipherStatement.java b/DaoCore/src/de/greenrobot/dao/database/SQLCipherStatement.java
new file mode 100644
index 00000000..6c073aad
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/database/SQLCipherStatement.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package de.greenrobot.dao.database;
+
+
+import net.sqlcipher.database.SQLiteStatement;
+
+public class SQLCipherStatement implements DatabaseStatement {
+    private final SQLiteStatement delegate;
+
+    public SQLCipherStatement(SQLiteStatement delegate) {
+        this.delegate = delegate;
+    }
+
+    @Override
+    public void execute() {
+        delegate.execute();
+    }
+
+    @Override
+    public long simpleQueryForLong() {
+        return delegate.simpleQueryForLong();
+    }
+
+    @Override
+    public void bindNull(int index) {
+        delegate.bindNull(index);
+    }
+
+    @Override
+    public long executeInsert() {
+        return delegate.executeInsert();
+    }
+
+    @Override
+    public void bindString(int index, String value) {
+        delegate.bindString(index, value);
+    }
+
+    @Override
+    public void bindBlob(int index, byte[] value) {
+        delegate.bindBlob(index, value);
+    }
+
+    @Override
+    public void bindLong(int index, long value) {
+        delegate.bindLong(index, value);
+    }
+
+    @Override
+    public void clearBindings() {
+        delegate.clearBindings();
+    }
+
+    @Override
+    public void bindDouble(int index, double value) {
+        delegate.bindDouble(index, value);
+    }
+
+    @Override
+    public void close() {
+        delegate.close();
+    }
+
+}
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java
index 51349dfb..cc2617b0 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2013 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,17 +16,11 @@
 
 package de.greenrobot.dao;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.List;
-
 import android.database.CrossProcessCursor;
 import android.database.Cursor;
 import android.database.CursorWindow;
-import android.database.DatabaseUtils;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 import de.greenrobot.dao.identityscope.IdentityScope;
 import de.greenrobot.dao.identityscope.IdentityScopeLong;
 import de.greenrobot.dao.internal.DaoConfig;
@@ -35,6 +29,11 @@
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+
 /**
  * Base class for all DAOs: Implements entity operations like insert, load, delete, and query.
  *
@@ -52,12 +51,12 @@
  * 
  * 1.) If not inside a TX already, begin a TX to acquire a DB connection (connection is to be handled like a lock)
  * 
- * 2.) The SQLiteStatement
+ * 2.) The DatabaseStatement
  * 
  * 3.) identityScope
  */
 public abstract class AbstractDao<T, K> {
-    protected final SQLiteDatabase db;
+    protected final Database db;
     protected final DaoConfig config;
     protected IdentityScope<K, T> identityScope;
     protected IdentityScopeLong<T> identityScopeLong;
@@ -217,7 +216,7 @@ public void insertInTx(T... entities) {
      *            if true, the PKs of the given will be set after the insert; pass false to improve performance.
      */
     public void insertInTx(Iterable<T> entities, boolean setPrimaryKey) {
-        SQLiteStatement stmt = statements.getInsertStatement();
+        DatabaseStatement stmt = statements.getInsertStatement();
         executeInsertInTx(stmt, entities, setPrimaryKey);
     }
 
@@ -231,7 +230,7 @@ public void insertInTx(Iterable<T> entities, boolean setPrimaryKey) {
      *            if true, the PKs of the given will be set after the insert; pass false to improve performance.
      */
     public void insertOrReplaceInTx(Iterable<T> entities, boolean setPrimaryKey) {
-        SQLiteStatement stmt = statements.getInsertOrReplaceStatement();
+        DatabaseStatement stmt = statements.getInsertOrReplaceStatement();
         executeInsertInTx(stmt, entities, setPrimaryKey);
     }
 
@@ -255,7 +254,7 @@ public void insertOrReplaceInTx(T... entities) {
         insertOrReplaceInTx(Arrays.asList(entities), isEntityUpdateable());
     }
 
-    private void executeInsertInTx(SQLiteStatement stmt, Iterable<T> entities, boolean setPrimaryKey) {
+    private void executeInsertInTx(DatabaseStatement stmt, Iterable<T> entities, boolean setPrimaryKey) {
         db.beginTransaction();
         try {
             synchronized (stmt) {
@@ -300,7 +299,7 @@ public long insert(T entity) {
      * @return row ID of newly inserted entity
      */
     public long insertWithoutSettingPk(T entity) {
-        SQLiteStatement stmt = statements.getInsertStatement();
+        DatabaseStatement stmt = statements.getInsertStatement();
         long rowId;
         if (db.isDbLockedByCurrentThread()) {
             synchronized (stmt) {
@@ -332,7 +331,7 @@ public long insertOrReplace(T entity) {
         return executeInsert(entity, statements.getInsertOrReplaceStatement());
     }
 
-    private long executeInsert(T entity, SQLiteStatement stmt) {
+    private long executeInsert(T entity, DatabaseStatement stmt) {
         long rowId;
         if (db.isDbLockedByCurrentThread()) {
             synchronized (stmt) {
@@ -500,7 +499,7 @@ public void delete(T entity) {
     /** Deletes an entity with the given PK from the database. Currently, only single value PK entities are supported. */
     public void deleteByKey(K key) {
         assertSinglePk();
-        SQLiteStatement stmt = statements.getDeleteStatement();
+        DatabaseStatement stmt = statements.getDeleteStatement();
         if (db.isDbLockedByCurrentThread()) {
             synchronized (stmt) {
                 deleteByKeyInsideSynchronized(key, stmt);
@@ -522,7 +521,7 @@ public void deleteByKey(K key) {
         }
     }
 
-    private void deleteByKeyInsideSynchronized(K key, SQLiteStatement stmt) {
+    private void deleteByKeyInsideSynchronized(K key, DatabaseStatement stmt) {
         if (key instanceof Long) {
             stmt.bindLong(1, (Long) key);
         } else if (key == null) {
@@ -535,7 +534,7 @@ private void deleteByKeyInsideSynchronized(K key, SQLiteStatement stmt) {
 
     private void deleteInTxInternal(Iterable<T> entities, Iterable<K> keys) {
         assertSinglePk();
-        SQLiteStatement stmt = statements.getDeleteStatement();
+        DatabaseStatement stmt = statements.getDeleteStatement();
         List<K> keysToRemoveFromIdentityScope = null;
         db.beginTransaction();
         try {
@@ -641,7 +640,7 @@ public void refresh(T entity) {
 
     public void update(T entity) {
         assertSinglePk();
-        SQLiteStatement stmt = statements.getUpdateStatement();
+        DatabaseStatement stmt = statements.getUpdateStatement();
         if (db.isDbLockedByCurrentThread()) {
             synchronized (stmt) {
                 updateInsideSynchronized(entity, stmt, true);
@@ -664,7 +663,7 @@ public void update(T entity) {
         return QueryBuilder.internalCreate(this);
     }
 
-    protected void updateInsideSynchronized(T entity, SQLiteStatement stmt, boolean lock) {
+    protected void updateInsideSynchronized(T entity, DatabaseStatement stmt, boolean lock) {
         // To do? Check if it's worth not to bind PKs here (performance).
         bindValues(stmt, entity);
         int index = config.allColumns.length + 1;
@@ -716,7 +715,7 @@ protected void attachEntity(T entity) {
      *            The entities to insert.
      */
     public void updateInTx(Iterable<T> entities) {
-        SQLiteStatement stmt = statements.getUpdateStatement();
+        DatabaseStatement stmt = statements.getUpdateStatement();
         db.beginTransaction();
         RuntimeException txEx = null;
         try {
@@ -768,7 +767,7 @@ protected void assertSinglePk() {
     }
 
     public long count() {
-        return DatabaseUtils.queryNumEntries(db, '\'' + config.tablename + '\'');
+        return statements.getCountStatement().simpleQueryForLong();
     }
 
     /** See {@link #getKey(Object)}, but guarantees that the returned key is never null (throws if null). */
@@ -786,7 +785,7 @@ protected K getKeyVerified(T entity) {
     }
 
     /** Gets the SQLiteDatabase for custom database access. Not needed for greenDAO entities. */
-    public SQLiteDatabase getDatabase() {
+    public Database getDatabase() {
         return db;
     }
 
@@ -800,7 +799,7 @@ public SQLiteDatabase getDatabase() {
     abstract protected void readEntity(Cursor cursor, T entity, int offset);
 
     /** Binds the entity's values to the statement. Make sure to synchronize the statement outside of the method. */
-    abstract protected void bindValues(SQLiteStatement stmt, T entity);
+    abstract protected void bindValues(DatabaseStatement stmt, T entity);
 
     /**
      * Updates the entity's key if possible (only for Long PKs currently). This method must always return the entity's
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoMaster.java b/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoMaster.java
index 5b635bcd..8177f339 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoMaster.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoMaster.java
@@ -20,8 +20,10 @@
 import java.util.Map;
 
 import android.database.sqlite.SQLiteDatabase;
+import de.greenrobot.dao.database.Database;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.AndroidSQLiteDatabase;
 
 /**
  * The master of dao will guide you: start dao sessions with the master.
@@ -29,11 +31,11 @@
  * @author Markus
  */
 public abstract class AbstractDaoMaster {
-    protected final SQLiteDatabase db;
+    protected final Database db;
     protected final int schemaVersion;
     protected final Map<Class<? extends AbstractDao<?, ?>>, DaoConfig> daoConfigMap;
 
-    public AbstractDaoMaster(SQLiteDatabase db, int schemaVersion) {
+    public AbstractDaoMaster(Database db, int schemaVersion) {
         this.db = db;
         this.schemaVersion = schemaVersion;
 
@@ -50,7 +52,7 @@ public int getSchemaVersion() {
     }
 
     /** Gets the SQLiteDatabase for custom database access. Not needed for greenDAO entities. */
-    public SQLiteDatabase getDatabase() {
+    public Database getDatabase() {
         return db;
     }
 
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoSession.java b/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoSession.java
index c3a3d5ce..73415de7 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoSession.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/AbstractDaoSession.java
@@ -22,8 +22,8 @@
 import java.util.Map;
 import java.util.concurrent.Callable;
 
-import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.async.AsyncSession;
+import de.greenrobot.dao.database.Database;
 import de.greenrobot.dao.query.QueryBuilder;
 
 /**
@@ -46,10 +46,10 @@
  * 
  */
 public class AbstractDaoSession {
-    private final SQLiteDatabase db;
+    private final Database db;
     private final Map<Class<?>, AbstractDao<?, ?>> entityToDao;
 
-    public AbstractDaoSession(SQLiteDatabase db) {
+    public AbstractDaoSession(Database db) {
         this.db = db;
         this.entityToDao = new HashMap<Class<?>, AbstractDao<?, ?>>();
     }
@@ -184,8 +184,8 @@ public void runInTx(Runnable runnable) {
         }
     }
 
-    /** Gets the SQLiteDatabase for custom database access. Not needed for greenDAO entities. */
-    public SQLiteDatabase getDatabase() {
+    /** Gets the Database for custom database access. Not needed for greenDAO entities. */
+    public Database getDatabase() {
         return db;
     }
 
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/InternalUnitTestDaoAccess.java b/DaoCore/src/main/java/de/greenrobot/dao/InternalUnitTestDaoAccess.java
index 78df9030..a0272d30 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/InternalUnitTestDaoAccess.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/InternalUnitTestDaoAccess.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,18 +16,18 @@
 
 package de.greenrobot.dao;
 
-import java.lang.reflect.Constructor;
-
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
+import de.greenrobot.dao.database.Database;
 import de.greenrobot.dao.identityscope.IdentityScope;
 import de.greenrobot.dao.internal.DaoConfig;
 
+import java.lang.reflect.Constructor;
+
 /** Reserved for internal unit tests that want to access some non-public methods. Don't use for anything else. */
 public class InternalUnitTestDaoAccess<T, K> {
     private final AbstractDao<T, K> dao;
 
-    public InternalUnitTestDaoAccess(SQLiteDatabase db, Class<AbstractDao<T, K>> daoClass, IdentityScope<?, ?> identityScope)
+    public InternalUnitTestDaoAccess(Database db, Class<AbstractDao<T, K>> daoClass, IdentityScope<?, ?> identityScope)
             throws Exception {
         DaoConfig daoConfig = new DaoConfig(db, daoClass);
         daoConfig.setIdentityScope(identityScope);
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperation.java b/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperation.java
index 38136065..6c6c4a7b 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperation.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperation.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,9 +16,9 @@
 
 package de.greenrobot.dao.async;
 
-import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.DaoException;
+import de.greenrobot.dao.database.Database;
 
 /**
  * An operation that will be enqueued for asynchronous execution.
@@ -48,7 +48,7 @@
 
     final OperationType type;
     final AbstractDao<Object, Object> dao;
-    private final SQLiteDatabase database;
+    private final Database database;
     /** Entity, Iterable<Entity>, Entity[], or Runnable. */
     final Object parameter;
     final int flags;
@@ -65,7 +65,7 @@
 
     @SuppressWarnings("unchecked")
     /** Either supply dao or database (set other to null). */
-    AsyncOperation(OperationType type, AbstractDao<?, ?> dao, SQLiteDatabase database, Object parameter, int flags) {
+    AsyncOperation(OperationType type, AbstractDao<?, ?> dao, Database database, Object parameter, int flags) {
         this.type = type;
         this.flags = flags;
         this.dao = (AbstractDao<Object, Object>) dao;
@@ -112,7 +112,7 @@ public boolean isMergeTx() {
         return (flags & FLAG_MERGE_TX) != 0;
     }
 
-    SQLiteDatabase getDatabase() {
+    Database getDatabase() {
         return database != null ? database : dao.getDatabase();
     }
 
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperationExecutor.java b/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperationExecutor.java
index 6e3b277a..59b0ccf7 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperationExecutor.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncOperationExecutor.java
@@ -15,12 +15,12 @@
  */
 package de.greenrobot.dao.async;
 
-import android.database.sqlite.SQLiteDatabase;
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.DaoLog;
+import de.greenrobot.dao.database.Database;
 import de.greenrobot.dao.query.Query;
 
 import java.util.ArrayList;
@@ -181,7 +181,7 @@ private void mergeTxAndExecute(AsyncOperation operation1, AsyncOperation operati
         mergedOps.add(operation1);
         mergedOps.add(operation2);
 
-        SQLiteDatabase db = operation1.getDatabase();
+        Database db = operation1.getDatabase();
         db.beginTransaction();
         boolean success = false;
         try {
@@ -342,7 +342,7 @@ private void executeOperation(AsyncOperation operation) {
     }
 
     private void executeTransactionRunnable(AsyncOperation operation) {
-        SQLiteDatabase db = operation.getDatabase();
+        Database db = operation.getDatabase();
         db.beginTransaction();
         try {
             ((Runnable) operation.parameter).run();
@@ -354,7 +354,7 @@ private void executeTransactionRunnable(AsyncOperation operation) {
 
     @SuppressWarnings("unchecked")
     private void executeTransactionCallable(AsyncOperation operation) throws Exception {
-        SQLiteDatabase db = operation.getDatabase();
+        Database db = operation.getDatabase();
         db.beginTransaction();
         try {
             operation.result = ((Callable<Object>) operation.parameter).call();
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncSession.java b/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncSession.java
index 45e7dfc2..f62d9a6e 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncSession.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/async/AsyncSession.java
@@ -1,10 +1,10 @@
 package de.greenrobot.dao.async;
 
-import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.AbstractDaoSession;
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.async.AsyncOperation.OperationType;
+import de.greenrobot.dao.database.Database;
 import de.greenrobot.dao.query.Query;
 
 import java.util.concurrent.Callable;
@@ -305,7 +305,7 @@ public AsyncOperation refresh(Object entity, int flags) {
     }
 
     private AsyncOperation enqueueDatabaseOperation(OperationType type, Object param, int flags) {
-        SQLiteDatabase database = daoSession.getDatabase();
+        Database database = daoSession.getDatabase();
         AsyncOperation operation = new AsyncOperation(type, null, database, param, flags | sessionFlags);
         executor.enqueue(operation);
         return operation;
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/internal/DaoConfig.java b/DaoCore/src/main/java/de/greenrobot/dao/internal/DaoConfig.java
index 96473029..c3845ef7 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/internal/DaoConfig.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/internal/DaoConfig.java
@@ -20,9 +20,9 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.DaoException;
+import de.greenrobot.dao.database.Database;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.identityscope.IdentityScope;
 import de.greenrobot.dao.identityscope.IdentityScopeLong;
@@ -35,7 +35,7 @@
  */
 public final class DaoConfig implements Cloneable {
 
-    public final SQLiteDatabase db;
+    public final Database db;
     public final String tablename;
     public final Property[] properties;
 
@@ -50,7 +50,7 @@
 
     private IdentityScope<?, ?> identityScope;
 
-    public DaoConfig(SQLiteDatabase db, Class<? extends AbstractDao<?, ?>> daoClass) {
+    public DaoConfig(Database db, Class<? extends AbstractDao<?, ?>> daoClass) {
         this.db = db;
         try {
             this.tablename = (String) daoClass.getField("TABLENAME").get(null);
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/internal/SqlUtils.java b/DaoCore/src/main/java/de/greenrobot/dao/internal/SqlUtils.java
index 360cb1ad..b205eb26 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/internal/SqlUtils.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/internal/SqlUtils.java
@@ -156,4 +156,8 @@ public static String escapeBlobArgument(byte[] bytes) {
         }
         return "X'" + new String(hexChars) + '\'';
     }
+
+    public static String createSqlCount(String tablename) {
+        return "SELECT COUNT(*) FROM \"" + tablename +'"';
+    }
 }
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java b/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java
index 9414f1f7..c00ad3bc 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,34 +15,35 @@
  */
 package de.greenrobot.dao.internal;
 
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 /** Helper class to create SQL statements for specific tables (used by greenDAO internally). */
 public class TableStatements {
-    private final SQLiteDatabase db;
+    private final Database db;
     private final String tablename;
     private final String[] allColumns;
     private final String[] pkColumns;
 
-    private SQLiteStatement insertStatement;
-    private SQLiteStatement insertOrReplaceStatement;
-    private SQLiteStatement updateStatement;
-    private SQLiteStatement deleteStatement;
+    private DatabaseStatement insertStatement;
+    private DatabaseStatement insertOrReplaceStatement;
+    private DatabaseStatement updateStatement;
+    private DatabaseStatement deleteStatement;
+    private DatabaseStatement countStatement;
 
     private volatile String selectAll;
     private volatile String selectByKey;
     private volatile String selectByRowId;
     private volatile String selectKeys;
 
-    public TableStatements(SQLiteDatabase db, String tablename, String[] allColumns, String[] pkColumns) {
+    public TableStatements(Database db, String tablename, String[] allColumns, String[] pkColumns) {
         this.db = db;
         this.tablename = tablename;
         this.allColumns = allColumns;
         this.pkColumns = pkColumns;
     }
 
-    public SQLiteStatement getInsertStatement() {
+    public DatabaseStatement getInsertStatement() {
         if (insertStatement == null) {
             String sql = SqlUtils.createSqlInsert("INSERT INTO ", tablename, allColumns);
             insertStatement = db.compileStatement(sql);
@@ -50,7 +51,7 @@ public SQLiteStatement getInsertStatement() {
         return insertStatement;
     }
 
-    public SQLiteStatement getInsertOrReplaceStatement() {
+    public DatabaseStatement getInsertOrReplaceStatement() {
         if (insertOrReplaceStatement == null) {
             String sql = SqlUtils.createSqlInsert("INSERT OR REPLACE INTO ", tablename, allColumns);
             insertOrReplaceStatement = db.compileStatement(sql);
@@ -58,7 +59,7 @@ public SQLiteStatement getInsertOrReplaceStatement() {
         return insertOrReplaceStatement;
     }
 
-    public SQLiteStatement getDeleteStatement() {
+    public DatabaseStatement getDeleteStatement() {
         if (deleteStatement == null) {
             String sql = SqlUtils.createSqlDelete(tablename, pkColumns);
             deleteStatement = db.compileStatement(sql);
@@ -66,7 +67,7 @@ public SQLiteStatement getDeleteStatement() {
         return deleteStatement;
     }
 
-    public SQLiteStatement getUpdateStatement() {
+    public DatabaseStatement getUpdateStatement() {
         if (updateStatement == null) {
             String sql = SqlUtils.createSqlUpdate(tablename, allColumns, pkColumns);
             updateStatement = db.compileStatement(sql);
@@ -74,6 +75,14 @@ public SQLiteStatement getUpdateStatement() {
         return updateStatement;
     }
 
+    public DatabaseStatement getCountStatement() {
+        if (countStatement == null) {
+            String sql = SqlUtils.createSqlCount(tablename);
+            countStatement = db.compileStatement(sql);
+        }
+        return countStatement;
+    }
+
     /** ends with an space to simplify appending to this string. */
     public String getSelectAll() {
         if (selectAll == null) {
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/DeleteQuery.java b/DaoCore/src/main/java/de/greenrobot/dao/query/DeleteQuery.java
index ae4960e8..e2512db2 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/query/DeleteQuery.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/query/DeleteQuery.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2013 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,17 +15,15 @@
  */
 package de.greenrobot.dao.query;
 
-import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.database.Database;
 
 /**
  * A repeatable query for deleting entities.<br/>
  * New API note: this is more likely to change.
- * 
+ *
+ * @param <T> The entity class the query will delete from.
  * @author Markus
- * 
- * @param <T>
- *            The entity class the query will delete from.
  */
 public class DeleteQuery<T> extends AbstractQuery<T> {
     private final static class QueryData<T2> extends AbstractQueryData<T2, DeleteQuery<T2>> {
@@ -58,12 +56,13 @@ private DeleteQuery(QueryData<T> queryData, AbstractDao<T, ?> dao, String sql, S
 
     /**
      * Deletes all matching entities without detaching them from the identity scope (aka session/cache). Note that this
-     * method may lead to stale entity objects in the session cache. Stale entities may be returned when loaded by their
+     * method may lead to stale entity objects in the session cache. Stale entities may be returned when loaded by
+     * their
      * primary key, but not using queries.
      */
     public void executeDeleteWithoutDetachingEntities() {
         checkThread();
-        SQLiteDatabase db = dao.getDatabase();
+        Database db = dao.getDatabase();
         if (db.isDbLockedByCurrentThread()) {
             dao.getDatabase().execSQL(sql, parameters);
         } else {
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoSessionTest.java b/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoSessionTest.java
index 08bc0ff9..af33a384 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoSessionTest.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoSessionTest.java
@@ -22,6 +22,7 @@
 import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.AbstractDaoSession;
+import de.greenrobot.dao.database.Database;
 
 /**
  * Base class for DAO (master) related testing.
@@ -52,10 +53,10 @@ public AbstractDaoSessionTest(Class<T> daoMasterClass, boolean inMemory) {
     protected void setUp() throws Exception {
         super.setUp();
         try {
-            Constructor<T> constructor = daoMasterClass.getConstructor(SQLiteDatabase.class);
+            Constructor<T> constructor = daoMasterClass.getConstructor(Database.class);
             daoMaster = constructor.newInstance(db);
 
-            Method createTableMethod = daoMasterClass.getMethod("createAllTables", SQLiteDatabase.class, boolean.class);
+            Method createTableMethod = daoMasterClass.getMethod("createAllTables", Database.class, boolean.class);
             createTableMethod.invoke(null, db, false);
         } catch (Exception e) {
             throw new RuntimeException("Could not prepare DAO session test", e);
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTest.java b/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTest.java
index 6c301da7..0805602f 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTest.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/test/AbstractDaoTest.java
@@ -23,6 +23,7 @@
 import de.greenrobot.dao.DaoLog;
 import de.greenrobot.dao.InternalUnitTestDaoAccess;
 import de.greenrobot.dao.Property;
+import de.greenrobot.dao.database.Database;
 import de.greenrobot.dao.identityscope.IdentityScope;
 
 /**
@@ -73,7 +74,7 @@ protected void setUp() throws Exception {
 
     protected void setUpTableForDao() throws Exception {
         try {
-            Method createTableMethod = daoClass.getMethod("createTable", SQLiteDatabase.class, boolean.class);
+            Method createTableMethod = daoClass.getMethod("createTable", Database.class, boolean.class);
             createTableMethod.invoke(null, db, false);
         } catch (NoSuchMethodException e) {
             DaoLog.i("No createTable method");
diff --git a/DaoCore/src/main/java/de/greenrobot/dao/test/DbTest.java b/DaoCore/src/main/java/de/greenrobot/dao/test/DbTest.java
index 6788eca0..e886abf1 100644
--- a/DaoCore/src/main/java/de/greenrobot/dao/test/DbTest.java
+++ b/DaoCore/src/main/java/de/greenrobot/dao/test/DbTest.java
@@ -20,14 +20,17 @@
 import android.app.Instrumentation;
 import android.database.sqlite.SQLiteDatabase;
 import android.test.AndroidTestCase;
+import de.greenrobot.dao.DaoLog;
 import de.greenrobot.dao.DbUtils;
+import de.greenrobot.dao.database.AndroidSQLiteDatabase;
+import de.greenrobot.dao.database.Database;
 
 import java.util.Random;
 
 /**
  * Base class for database related testing, which prepares an in-memory or an file-based DB (using the test {@link
- * android.content.Context}). Also, offers some convenience methods to create new {@link Application} objects similar to
- * {@link android.test.ApplicationTestCase}.
+ * android.content.Context}). Also, offers some convenience methods to create new {@link Application} objects similar
+ * to {@link android.test.ApplicationTestCase}.
  * <p/>
  * Unlike ApplicationTestCase, this class should behave more correctly when you call {@link #createApplication(Class)}
  * during {@link #setUp()}: {@link android.test.ApplicationTestCase#testApplicationTestCaseSetUpProperly()} leaves
@@ -41,7 +44,7 @@
 
     protected final Random random;
     protected final boolean inMemory;
-    protected SQLiteDatabase db;
+    protected Database db;
 
     private Application application;
 
@@ -88,13 +91,16 @@ public void terminateApplication() {
     }
 
     /** May be overriden by sub classes to set up a different db. */
-    protected SQLiteDatabase createDatabase() {
+    protected Database createDatabase() {
+        SQLiteDatabase sqLiteDatabase;
         if (inMemory) {
-            return SQLiteDatabase.create(null);
+            sqLiteDatabase = SQLiteDatabase.create(null);
+
         } else {
             getContext().deleteDatabase(DB_NAME);
-            return getContext().openOrCreateDatabase(DB_NAME, 0, null);
+            sqLiteDatabase = getContext().openOrCreateDatabase(DB_NAME, 0, null);
         }
+        return new AndroidSQLiteDatabase(sqLiteDatabase);
     }
 
     @Override
@@ -111,7 +117,11 @@ protected void tearDown() throws Exception {
     }
 
     protected void logTableDump(String tablename) {
-        DbUtils.logTableDump(db, tablename);
+        if (db instanceof AndroidSQLiteDatabase) {
+            DbUtils.logTableDump(((AndroidSQLiteDatabase) db).getSQLiteDatabase(), tablename);
+        } else {
+            DaoLog.w("Table dump unsupported for " + db);
+        }
     }
 
 }
\ No newline at end of file
diff --git a/DaoGenerator/build.gradle b/DaoGenerator/build.gradle
index ccdbde8b..faa4a724 100644
--- a/DaoGenerator/build.gradle
+++ b/DaoGenerator/build.gradle
@@ -4,7 +4,7 @@ apply plugin: 'signing'
 
 group = 'de.greenrobot'
 archivesBaseName = 'greendao-generator'
-version = '2.0.0'
+version = '2.1.0-SNAPSHOT'
 sourceCompatibility = 1.6
 
 def isSnapshot = version.endsWith('-SNAPSHOT')
diff --git a/DaoGenerator/src-template/content-provider.ftl b/DaoGenerator/src-template/content-provider.ftl
index 93396f73..35776da7 100644
--- a/DaoGenerator/src-template/content-provider.ftl
+++ b/DaoGenerator/src-template/content-provider.ftl
@@ -5,11 +5,12 @@ import android.content.ContentResolver;
 import android.content.ContentValues;
 import android.content.UriMatcher;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteQueryBuilder;
 import android.net.Uri;
 
 import de.greenrobot.dao.DaoLog;
+import de.greenrobot.dao.database.AndroidSQLiteDatabase;
+import de.greenrobot.dao.database.Database;
 
 import ${schema.defaultJavaPackageDao}.DaoSession;
 import ${entity.javaPackageDao}.${entity.classNameDao};
@@ -63,11 +64,11 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
     return true;
     }
 
-    protected SQLiteDatabase getDatabase() {
+    protected Database getDatabase() {
     if(daoSession == null) {
     throw new IllegalStateException("DaoSession must be set during content provider is active");
     }
-    return daoSession.getDatabase();
+    return ((AndroidSQLiteDatabase) daoSession.getDatabase()).getSQLiteDatabase();
     }
 
 <#--
@@ -107,7 +108,7 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
     throw new UnsupportedOperationException("This content provider is readonly");
 <#else>
     int uriType = sURIMatcher.match(uri);
-    SQLiteDatabase db = getDatabase();
+    Database db = getDatabase();
     int rowsDeleted = 0;
     String id;
     switch (uriType) {
@@ -143,7 +144,7 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
     throw new UnsupportedOperationException("This content provider is readonly");
 <#else>
     int uriType = sURIMatcher.match(uri);
-    SQLiteDatabase db = getDatabase();
+    Database db = getDatabase();
     int rowsUpdated = 0;
     String id;
     switch (uriType) {
@@ -190,8 +191,8 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
     throw new IllegalArgumentException("Unknown URI: " + uri);
     }
 
-    SQLiteDatabase db = getDatabase();
-    Cursor cursor = queryBuilder.query(db, projection, selection,
+    Database db = getDatabase();
+    Cursor cursor = queryBuilder.query(((AndroidSQLiteDatabase) db).getSQLiteDatabase(), projection, selection,
     selectionArgs, null, null, sortOrder);
     cursor.setNotificationUri(getContext().getContentResolver(), uri);
 
diff --git a/DaoGenerator/src-template/dao-master.ftl b/DaoGenerator/src-template/dao-master.ftl
index adaffc48..ae1b5f53 100644
--- a/DaoGenerator/src-template/dao-master.ftl
+++ b/DaoGenerator/src-template/dao-master.ftl
@@ -24,7 +24,10 @@ import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteDatabase.CursorFactory;
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
+
 import de.greenrobot.dao.AbstractDaoMaster;
+import de.greenrobot.dao.database.AndroidSQLiteDatabase;
+import de.greenrobot.dao.database.Database;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 
 <#list schema.entities as entity>
@@ -39,7 +42,7 @@ public class DaoMaster extends AbstractDaoMaster {
     public static final int SCHEMA_VERSION = ${schema.version?c};
 
     /** Creates underlying database table using DAOs. */
-    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createAllTables(Database db, boolean ifNotExists) {
 <#list schema.entities as entity>
 <#if !entity.skipTableCreation>
         ${entity.classNameDao}.createTable(db, ifNotExists);
@@ -48,7 +51,7 @@ public class DaoMaster extends AbstractDaoMaster {
     }
     
     /** Drops underlying database table using DAOs. */
-    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
+    public static void dropAllTables(Database db, boolean ifExists) {
 <#list schema.entities as entity>
 <#if !entity.skipTableCreation>
         ${entity.classNameDao}.dropTable(db, ifExists);
@@ -65,7 +68,7 @@ public class DaoMaster extends AbstractDaoMaster {
         @Override
         public void onCreate(SQLiteDatabase db) {
             Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
-            createAllTables(db, false);
+            createAllTables(new AndroidSQLiteDatabase(db), false);
         }
     }
     
@@ -78,12 +81,16 @@ public class DaoMaster extends AbstractDaoMaster {
         @Override
         public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
             Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
-            dropAllTables(db, true);
+            dropAllTables(new AndroidSQLiteDatabase(db), true);
             onCreate(db);
         }
     }
 
     public DaoMaster(SQLiteDatabase db) {
+        this(new AndroidSQLiteDatabase(db));
+    }
+
+    public DaoMaster(Database db) {
         super(db, SCHEMA_VERSION);
 <#list schema.entities as entity>
         registerDaoClass(${entity.classNameDao}.class);
diff --git a/DaoGenerator/src-template/dao-session.ftl b/DaoGenerator/src-template/dao-session.ftl
index e0201a48..e35c95a6 100644
--- a/DaoGenerator/src-template/dao-session.ftl
+++ b/DaoGenerator/src-template/dao-session.ftl
@@ -19,12 +19,11 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 -->
 package ${schema.defaultJavaPackageDao};
 
-import android.database.sqlite.SQLiteDatabase;
-
 import java.util.Map;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.AbstractDaoSession;
+import de.greenrobot.dao.database.Database;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 import de.greenrobot.dao.internal.DaoConfig;
 
@@ -53,7 +52,7 @@ public class DaoSession extends AbstractDaoSession {
     private final ${entity.classNameDao} ${entity.classNameDao?uncap_first};
 </#list>        
 
-    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
+    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
         super(db);
 
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 60f7045b..4f18d642 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -28,8 +28,6 @@ import java.util.List;
 import java.util.ArrayList;
 </#if>
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
@@ -37,6 +35,8 @@ import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.SqlUtils;
 </#if>
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 <#if entity.incomingToManyRelations?has_content>
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
@@ -99,7 +99,7 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
 
 <#if !entity.skipTableCreation>
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"${entity.tableName}\" (" + //
 <#list entity.propertiesColumns as property>
@@ -116,7 +116,7 @@ as property>\"${property.columnName}\"<#if property_has_next>,</#if></#list>);")
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"${entity.tableName}\"";
         db.execSQL(sql);
     }
@@ -124,7 +124,7 @@ as property>\"${property.columnName}\"<#if property_has_next>,</#if></#list>);")
 </#if>
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ${entity.className} entity) {
+    protected void bindValues(DatabaseStatement stmt, ${entity.className} entity) {
         stmt.clearBindings();
 <#list entity.properties as property>
 <#if property.notNull || entity.protobuf>
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
index ef47a89d..c5361a0f 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
@@ -1,12 +1,12 @@
 package de.greenrobot.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest.AbcdefEntity;
 
@@ -47,7 +47,7 @@ public AbcdefEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"ABCDEF_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -65,14 +65,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ABCDEF_ENTITY\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, AbcdefEntity entity) {
+    protected void bindValues(DatabaseStatement stmt, AbcdefEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
index 91fe814c..eeb31d24 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
@@ -1,12 +1,12 @@
 package de.greenrobot.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest.AnActiveEntity;
 
@@ -40,7 +40,7 @@ public AnActiveEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"AN_ACTIVE_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -48,14 +48,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AN_ACTIVE_ENTITY\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, AnActiveEntity entity) {
+    protected void bindValues(DatabaseStatement stmt, AnActiveEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
index 95fe147e..a2a789ec 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
@@ -1,12 +1,12 @@
 package de.greenrobot.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest.AutoincrementEntity;
 
@@ -36,21 +36,21 @@ public AutoincrementEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"AUTOINCREMENT_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT );"); // 0: id
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUTOINCREMENT_ENTITY\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, AutoincrementEntity entity) {
+    protected void bindValues(DatabaseStatement stmt, AutoincrementEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntityDao.java
index 32cf4e6a..57d0d34e 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntityDao.java
@@ -1,12 +1,12 @@
 package de.greenrobot.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest.customtype.MyTimestamp;
 import de.greenrobot.daotest.customtype.MyTimestampConverter;
@@ -41,7 +41,7 @@ public CustomTypeEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"CUSTOM_TYPE_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -49,14 +49,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOM_TYPE_ENTITY\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, CustomTypeEntity entity) {
+    protected void bindValues(DatabaseStatement stmt, CustomTypeEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
index 9df78105..086e3a32 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
@@ -5,7 +5,10 @@
 import android.database.sqlite.SQLiteDatabase.CursorFactory;
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
+
 import de.greenrobot.dao.AbstractDaoMaster;
+import de.greenrobot.dao.database.AndroidSQLiteDatabase;
+import de.greenrobot.dao.database.Database;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 
 import de.greenrobot.daotest.SimpleEntityDao;
@@ -34,7 +37,7 @@
     public static final int SCHEMA_VERSION = 1;
 
     /** Creates underlying database table using DAOs. */
-    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createAllTables(Database db, boolean ifNotExists) {
         SimpleEntityDao.createTable(db, ifNotExists);
         SimpleEntityNotNullDao.createTable(db, ifNotExists);
         TestEntityDao.createTable(db, ifNotExists);
@@ -54,7 +57,7 @@ public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
     }
     
     /** Drops underlying database table using DAOs. */
-    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
+    public static void dropAllTables(Database db, boolean ifExists) {
         SimpleEntityDao.dropTable(db, ifExists);
         SimpleEntityNotNullDao.dropTable(db, ifExists);
         TestEntityDao.dropTable(db, ifExists);
@@ -82,7 +85,7 @@ public OpenHelper(Context context, String name, CursorFactory factory) {
         @Override
         public void onCreate(SQLiteDatabase db) {
             Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
-            createAllTables(db, false);
+            createAllTables(new AndroidSQLiteDatabase(db), false);
         }
     }
     
@@ -95,12 +98,16 @@ public DevOpenHelper(Context context, String name, CursorFactory factory) {
         @Override
         public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
             Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
-            dropAllTables(db, true);
+            dropAllTables(new AndroidSQLiteDatabase(db), true);
             onCreate(db);
         }
     }
 
     public DaoMaster(SQLiteDatabase db) {
+        this(new AndroidSQLiteDatabase(db));
+    }
+
+    public DaoMaster(Database db) {
         super(db, SCHEMA_VERSION);
         registerDaoClass(SimpleEntityDao.class);
         registerDaoClass(SimpleEntityNotNullDao.class);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
index 951c4b6e..9637d6e8 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
@@ -1,11 +1,10 @@
 package de.greenrobot.daotest;
 
-import android.database.sqlite.SQLiteDatabase;
-
 import java.util.Map;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.AbstractDaoSession;
+import de.greenrobot.dao.database.Database;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 import de.greenrobot.dao.internal.DaoConfig;
 
@@ -90,7 +89,7 @@
     private final SqliteMasterDao sqliteMasterDao;
     private final CustomTypeEntityDao customTypeEntityDao;
 
-    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
+    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
         super(db);
 
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
index 7d5ab029..2373295d 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
@@ -2,12 +2,12 @@
 
 import java.util.List;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
 
@@ -42,7 +42,7 @@ public DateEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"DATE_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -51,14 +51,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATE_ENTITY\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, DateEntity entity) {
+    protected void bindValues(DatabaseStatement stmt, DateEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
index 243ea2b9..2196b21e 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
@@ -1,12 +1,12 @@
 package de.greenrobot.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest.ExtendsImplementsEntity;
 
@@ -37,7 +37,7 @@ public ExtendsImplementsEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"EXTENDS_IMPLEMENTS_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -45,14 +45,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXTENDS_IMPLEMENTS_ENTITY\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ExtendsImplementsEntity entity) {
+    protected void bindValues(DatabaseStatement stmt, ExtendsImplementsEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/JoinManyToDateEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/JoinManyToDateEntityDao.java
index 5ba3944c..1d58a915 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/JoinManyToDateEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/JoinManyToDateEntityDao.java
@@ -1,12 +1,12 @@
 package de.greenrobot.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest.JoinManyToDateEntity;
 
@@ -38,7 +38,7 @@ public JoinManyToDateEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"JOIN_MANY_TO_DATE_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -47,14 +47,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JOIN_MANY_TO_DATE_ENTITY\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, JoinManyToDateEntity entity) {
+    protected void bindValues(DatabaseStatement stmt, JoinManyToDateEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
index f4c5ab06..201a6dd1 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
@@ -3,13 +3,13 @@
 import java.util.List;
 import java.util.ArrayList;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.SqlUtils;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest.RelationEntity;
 
@@ -47,7 +47,7 @@ public RelationEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"RELATION_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -59,14 +59,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RELATION_ENTITY\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, RelationEntity entity) {
+    protected void bindValues(DatabaseStatement stmt, RelationEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityContentProvider.java b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityContentProvider.java
index 1375e1cf..589639c3 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityContentProvider.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityContentProvider.java
@@ -11,6 +11,7 @@
 
 import de.greenrobot.dao.DaoLog;
 
+import de.greenrobot.dao.database.AndroidSQLiteDatabase;
 import de.greenrobot.daotest.SimpleEntityDao;
 
 /* Copy this code snippet into your AndroidManifest.xml inside the <application> element:
@@ -63,7 +64,7 @@ protected SQLiteDatabase getDatabase() {
         if(daoSession == null) {
             throw new IllegalStateException("DaoSession must be set during content provider is active");
         }
-        return daoSession.getDatabase();
+        return ((AndroidSQLiteDatabase) daoSession.getDatabase()).getSQLiteDatabase();
     }
         
     @Override
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
index 6afdd7c8..778dc673 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
@@ -1,12 +1,12 @@
 package de.greenrobot.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest.SimpleEntity;
 
@@ -45,7 +45,7 @@ public SimpleEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"SIMPLE_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -61,14 +61,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SIMPLE_ENTITY\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, SimpleEntity entity) {
+    protected void bindValues(DatabaseStatement stmt, SimpleEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
index a90ccf3b..4470e5b1 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
@@ -1,12 +1,12 @@
 package de.greenrobot.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest.SimpleEntityNotNull;
 
@@ -45,7 +45,7 @@ public SimpleEntityNotNullDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"SIMPLE_ENTITY_NOT_NULL\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
@@ -61,14 +61,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SIMPLE_ENTITY_NOT_NULL\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, SimpleEntityNotNull entity) {
+    protected void bindValues(DatabaseStatement stmt, SimpleEntityNotNull entity) {
         stmt.clearBindings();
         stmt.bindLong(1, entity.getId());
         stmt.bindLong(2, entity.getSimpleBoolean() ? 1L: 0L);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
index 7e9c2698..16d111fd 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
@@ -1,12 +1,12 @@
 package de.greenrobot.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest.SpecialNamesEntity;
 
@@ -45,7 +45,7 @@ public SpecialNamesEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"ORDER TRANSACTION GROUP BY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -61,14 +61,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER TRANSACTION GROUP BY\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, SpecialNamesEntity entity) {
+    protected void bindValues(DatabaseStatement stmt, SpecialNamesEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java
index 8302d4d0..f36b2b8f 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java
@@ -1,12 +1,12 @@
 package de.greenrobot.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest.SqliteMaster;
 
@@ -41,7 +41,7 @@ public SqliteMasterDao(DaoConfig config, DaoSession daoSession) {
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, SqliteMaster entity) {
+    protected void bindValues(DatabaseStatement stmt, SqliteMaster entity) {
         stmt.clearBindings();
  
         String type = entity.getType();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
index 8efdfaef..1cf06036 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
@@ -1,12 +1,12 @@
 package de.greenrobot.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest.StringKeyValueEntity;
 
@@ -37,7 +37,7 @@ public StringKeyValueEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"STRING_KEY_VALUE_ENTITY\" (" + //
                 "\"KEY\" TEXT PRIMARY KEY NOT NULL ," + // 0: key
@@ -45,14 +45,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STRING_KEY_VALUE_ENTITY\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, StringKeyValueEntity entity) {
+    protected void bindValues(DatabaseStatement stmt, StringKeyValueEntity entity) {
         stmt.clearBindings();
  
         String key = entity.getKey();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
index 5febaa8b..3c288d3d 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
@@ -1,12 +1,12 @@
 package de.greenrobot.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest.TestEntity;
 
@@ -45,7 +45,7 @@ public TestEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"TEST_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -66,14 +66,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST_ENTITY\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, TestEntity entity) {
+    protected void bindValues(DatabaseStatement stmt, TestEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
index 410c448a..dc2f71f1 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
@@ -1,12 +1,12 @@
 package de.greenrobot.daotest;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest.ToManyEntity;
 
@@ -40,7 +40,7 @@ public ToManyEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"TO_MANY_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -48,14 +48,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TO_MANY_ENTITY\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ToManyEntity entity) {
+    protected void bindValues(DatabaseStatement stmt, ToManyEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
index 61aafebe..56309ac8 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
@@ -2,12 +2,12 @@
 
 import java.util.List;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
 
@@ -46,7 +46,7 @@ public ToManyTargetEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"TO_MANY_TARGET_ENTITY\" (" + //
                 "\"TO_MANY_ID\" INTEGER," + // 0: toManyId
@@ -56,14 +56,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TO_MANY_TARGET_ENTITY\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ToManyTargetEntity entity) {
+    protected void bindValues(DatabaseStatement stmt, ToManyTargetEntity entity) {
         stmt.clearBindings();
  
         Long toManyId = entity.getToManyId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
index 934b0b3a..b6e33c52 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
@@ -3,13 +3,13 @@
 import java.util.List;
 import java.util.ArrayList;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.SqlUtils;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
 
@@ -46,7 +46,7 @@ public TreeEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"TREE_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -54,14 +54,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TREE_ENTITY\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, TreeEntity entity) {
+    protected void bindValues(DatabaseStatement stmt, TreeEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
index 699914c8..112d7efb 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
@@ -5,7 +5,10 @@
 import android.database.sqlite.SQLiteDatabase.CursorFactory;
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
+
 import de.greenrobot.dao.AbstractDaoMaster;
+import de.greenrobot.dao.database.AndroidSQLiteDatabase;
+import de.greenrobot.dao.database.Database;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 
 import de.greenrobot.daotest2.dao.KeepEntityDao;
@@ -21,7 +24,7 @@
     public static final int SCHEMA_VERSION = 1;
 
     /** Creates underlying database table using DAOs. */
-    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createAllTables(Database db, boolean ifNotExists) {
         KeepEntityDao.createTable(db, ifNotExists);
         ToManyTarget2Dao.createTable(db, ifNotExists);
         ToOneTarget2Dao.createTable(db, ifNotExists);
@@ -29,7 +32,7 @@ public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
     }
     
     /** Drops underlying database table using DAOs. */
-    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
+    public static void dropAllTables(Database db, boolean ifExists) {
         KeepEntityDao.dropTable(db, ifExists);
         ToManyTarget2Dao.dropTable(db, ifExists);
         ToOneTarget2Dao.dropTable(db, ifExists);
@@ -45,7 +48,7 @@ public OpenHelper(Context context, String name, CursorFactory factory) {
         @Override
         public void onCreate(SQLiteDatabase db) {
             Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
-            createAllTables(db, false);
+            createAllTables(new AndroidSQLiteDatabase(db), false);
         }
     }
     
@@ -58,12 +61,16 @@ public DevOpenHelper(Context context, String name, CursorFactory factory) {
         @Override
         public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
             Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
-            dropAllTables(db, true);
+            dropAllTables(new AndroidSQLiteDatabase(db), true);
             onCreate(db);
         }
     }
 
     public DaoMaster(SQLiteDatabase db) {
+        this(new AndroidSQLiteDatabase(db));
+    }
+
+    public DaoMaster(Database db) {
         super(db, SCHEMA_VERSION);
         registerDaoClass(KeepEntityDao.class);
         registerDaoClass(ToManyTarget2Dao.class);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoSession.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoSession.java
index ecd6983b..ed152732 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoSession.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoSession.java
@@ -1,11 +1,10 @@
 package de.greenrobot.daotest2.dao;
 
-import android.database.sqlite.SQLiteDatabase;
-
 import java.util.Map;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.AbstractDaoSession;
+import de.greenrobot.dao.database.Database;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 import de.greenrobot.dao.internal.DaoConfig;
 
@@ -38,7 +37,7 @@
     private final ToOneTarget2Dao toOneTarget2Dao;
     private final RelationSource2Dao relationSource2Dao;
 
-    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
+    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
         super(db);
 
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
index c3d748f0..e395ce22 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
@@ -1,12 +1,12 @@
 package de.greenrobot.daotest2.dao;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest2.KeepEntity;
 
@@ -36,21 +36,21 @@ public KeepEntityDao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"KEEP_ENTITY\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY );"); // 0: id
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KEEP_ENTITY\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, KeepEntity entity) {
+    protected void bindValues(DatabaseStatement stmt, KeepEntity entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
index 9370a884..0a4ae9b0 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
@@ -2,12 +2,12 @@
 
 import java.util.List;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
 
@@ -41,7 +41,7 @@ public ToManyTarget2Dao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"TO_MANY_TARGET2\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -49,14 +49,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TO_MANY_TARGET2\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ToManyTarget2 entity) {
+    protected void bindValues(DatabaseStatement stmt, ToManyTarget2 entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
index ea61e43a..a28294a3 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
@@ -3,13 +3,13 @@
 import java.util.List;
 import java.util.ArrayList;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.SqlUtils;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest2.dao.DaoSession;
 
@@ -47,7 +47,7 @@ public RelationSource2Dao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"RELATION_SOURCE2\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
@@ -55,14 +55,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RELATION_SOURCE2\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, RelationSource2 entity) {
+    protected void bindValues(DatabaseStatement stmt, RelationSource2 entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
index 9048acb9..7cd3ee01 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
@@ -1,12 +1,12 @@
 package de.greenrobot.daotest2.to1_specialdao;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 
 import de.greenrobot.daotest2.dao.DaoSession;
 
@@ -38,21 +38,21 @@ public ToOneTarget2Dao(DaoConfig config, DaoSession daoSession) {
     }
 
     /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    public static void createTable(Database db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "\"TO_ONE_TARGET2\" (" + //
                 "\"_id\" INTEGER PRIMARY KEY );"); // 0: id
     }
 
     /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+    public static void dropTable(Database db, boolean ifExists) {
         String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TO_ONE_TARGET2\"";
         db.execSQL(sql);
     }
 
     /** @inheritdoc */
     @Override
-    protected void bindValues(SQLiteStatement stmt, ToOneTarget2 entity) {
+    protected void bindValues(DatabaseStatement stmt, ToOneTarget2 entity) {
         stmt.clearBindings();
  
         Long id = entity.getId();
diff --git a/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java b/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java
index ffa9e718..6de2cb72 100644
--- a/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java
@@ -2,10 +2,10 @@
 
 import java.util.concurrent.CountDownLatch;
 
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 import android.os.SystemClock;
 import de.greenrobot.dao.DaoLog;
+import de.greenrobot.dao.database.Database;
+import de.greenrobot.dao.database.DatabaseStatement;
 import de.greenrobot.dao.query.DeleteQuery;
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.test.AbstractDaoSessionTest;
@@ -309,17 +309,17 @@ public void run() {
      * threads and costs more memory.
      */
     public void _testThreadLocalSpeed() {
-        final SQLiteDatabase db = dao.getDatabase();
-        ThreadLocal<SQLiteStatement> threadLocal = new ThreadLocal<SQLiteStatement>() {
+        final Database db = dao.getDatabase();
+        ThreadLocal<DatabaseStatement> threadLocal = new ThreadLocal<DatabaseStatement>() {
             @Override
-            protected SQLiteStatement initialValue() {
+            protected DatabaseStatement initialValue() {
                 return db.compileStatement("SELECT 42");
             }
         };
         threadLocal.get();
         long start = SystemClock.currentThreadTimeMillis();
         for (int i = 0; i < 1000; i++) {
-            SQLiteStatement sqLiteStatement = threadLocal.get();
+            DatabaseStatement sqLiteStatement = threadLocal.get();
             assertNotNull(sqLiteStatement);
         }
         Long time = SystemClock.currentThreadTimeMillis() - start;
diff --git a/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentWALTest.java b/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentWALTest.java
index 89f66b6c..8ffa91ed 100644
--- a/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentWALTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentWALTest.java
@@ -3,6 +3,8 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.os.Build;
 import de.greenrobot.dao.DaoLog;
+import de.greenrobot.dao.database.AndroidSQLiteDatabase;
+import de.greenrobot.dao.database.Database;
 import de.greenrobot.dao.query.Query;
 
 import java.lang.reflect.Method;
@@ -10,10 +12,11 @@
 public class DaoSessionConcurrentWALTest extends DaoSessionConcurrentTest {
 
     @Override
-    protected SQLiteDatabase createDatabase() {
+    protected Database createDatabase() {
         int MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;
         getContext().deleteDatabase(DB_NAME);
-        return getContext().openOrCreateDatabase(DB_NAME, MODE_ENABLE_WRITE_AHEAD_LOGGING, null);
+        SQLiteDatabase sqLiteDatabase = getContext().openOrCreateDatabase(DB_NAME, MODE_ENABLE_WRITE_AHEAD_LOGGING, null);
+        return new AndroidSQLiteDatabase(sqLiteDatabase);
     }
 
     public void testConcurrentLockAndQueryDuringTxWAL() throws InterruptedException {
diff --git a/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java b/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java
index 4ff7957d..9af701ad 100644
--- a/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java
@@ -17,15 +17,18 @@
  */
 package de.greenrobot.daotest;
 
-import java.io.IOException;
-
 import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.DbUtils;
+import de.greenrobot.dao.database.AndroidSQLiteDatabase;
 import de.greenrobot.dao.test.DbTest;
 
+import java.io.IOException;
+
 public class DbUtilsTest extends DbTest {
     public void testExecuteSqlScript() throws IOException {
-        DbUtils.executeSqlScript(getContext(), db, "minimal-entity.sql");
+        SQLiteDatabase sqLiteDatabase = ((AndroidSQLiteDatabase) db).getSQLiteDatabase();
+        DbUtils.executeSqlScript(getContext(), sqLiteDatabase, "minimal-entity.sql");
         Cursor cursor = db.rawQuery("SELECT count(*) from MINIMAL_ENTITY", null);
         try {
             cursor.moveToFirst();
