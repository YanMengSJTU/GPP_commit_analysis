diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java
index ea921b8a..276f4cdb 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerBase.java
@@ -1,102 +1,109 @@
-package de.greenrobot.daoexample;
-
-import java.util.List;
-import de.greenrobot.daoexample.DaoSession;
-import de.greenrobot.dao.DaoException;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
-/**
- * Entity mapped to table CUSTOMER.
- */
-abstract public class CustomerBase {
-
-    protected Long id;
-    /** Not-null value. */
-    protected String name;
-
-    /** Used to resolve relations */
-    protected transient DaoSession daoSession;
-
-    /** Used for active entity operations. */
-    protected transient CustomerDao myDao;
-
-    protected List<Order> orders;
-
-    public CustomerBase() {
-    }
-
-    public CustomerBase(Long id) {
-        this.id = id;
-    }
-
-    public CustomerBase(Long id, String name) {
-        this.id = id;
-        this.name = name;
-    }
-
-    /** called by internal mechanisms, do not call yourself. */
-    public void __setDaoSession(DaoSession daoSession) {
-        this.daoSession = daoSession;
-        myDao = daoSession != null ? daoSession.getCustomerDao() : null;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    /** Not-null value. */
-    public String getName() {
-        return name;
-    }
-
-    /** Not-null value; ensure this value is available before it is saved to the database. */
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
-    public synchronized List<Order> getOrders() {
-        if (orders == null) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
-            OrderDao targetDao = daoSession.getOrderDao();
-            orders = targetDao._queryCustomer_Orders(id);
-        }
-        return orders;
-    }
-
-    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
-    public synchronized void resetOrders() {
-        orders = null;
-    }
-
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
-    public void delete() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }
-        myDao.delete((Customer)this);
-    }
-
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
-    public void update() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }
-        myDao.update((Customer)this);
-    }
-
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
-    public void refresh() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }
-        myDao.refresh((Customer)this);
-    }
-
-}
+package de.greenrobot.daoexample;
+
+import java.util.List;
+import de.greenrobot.daoexample.DaoSession;
+import de.greenrobot.dao.DaoException;
+
+
+
+
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT . Enable "keep" sections if you want to edit.
+/**
+ * Entity mapped to table CUSTOMER.
+ */
+abstract public class CustomerBase {
+
+    protected Long id;
+    /** Not-null value. */
+    protected String name;
+
+
+
+    /** Used to resolve relations */
+    protected transient DaoSession daoSession;
+
+    /** Used for active entity operations. */
+    protected transient CustomerDao myDao;
+
+    protected List<Order> orders;
+
+    public CustomerBase() {
+    }
+
+    public CustomerBase(Long id) {
+        this.id = id;
+    }
+
+    public CustomerBase(Long id, String name) {
+        this.id = id;
+        this.name = name;
+    }
+
+    /** called by internal mechanisms, do not call yourself. */
+    public void __setDaoSession(DaoSession daoSession) {
+        this.daoSession = daoSession;
+        myDao = daoSession != null ? daoSession.getCustomerDao() : null;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    /** Not-null value. */
+    public String getName() {
+        return name;
+    }
+
+    /** Not-null value; ensure this value is available before it is saved to the database. */
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
+    public synchronized List<Order> getOrders() {
+        if (orders == null) {
+            if (daoSession == null) {
+                throw new DaoException("Entity is detached from DAO context");
+            }
+            OrderDao targetDao = daoSession.getOrderDao();
+            orders = targetDao._queryCustomer_Orders(id);
+        }
+        return orders;
+    }
+
+    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
+    public synchronized void resetOrders() {
+        orders = null;
+    }
+
+    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    public void delete() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.delete((Customer)this);
+    }
+
+    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    public void update() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.update((Customer)this);
+    }
+
+    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    public void refresh() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.refresh((Customer)this);
+    }
+
+
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
index 153368dd..dcb57a84 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
@@ -23,8 +23,8 @@
      * Can be used for QueryBuilder and for referencing column names.
     */
     public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
+        public final static Property Id =new Property(0, Long.class , "id", true, "_id");
+        public final static Property Name =new Property(1, String.class , "name", false, "NAME");
     };
 
     private DaoSession daoSession;
@@ -57,6 +57,7 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
     @Override
     protected void bindValues(SQLiteStatement stmt, Customer entity) {
         stmt.clearBindings();
+        entity.onBeforeSave();
  
         Long id = entity.getId();
         if (id != null) {
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java b/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
index 9e9c1c36..c09b2609 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
@@ -1,78 +1,78 @@
-package de.greenrobot.daoexample;
-
-import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteDatabase.CursorFactory;
-import android.database.sqlite.SQLiteOpenHelper;
-import android.util.Log;
-import de.greenrobot.dao.AbstractDaoMaster;
-import de.greenrobot.dao.IdentityScopeType;
-
-import de.greenrobot.daoexample.NoteDao;
-import de.greenrobot.daoexample.CustomerDao;
-import de.greenrobot.daoexample.OrderDao;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
- * Master of DAO (schema version 3): knows all DAOs.
-*/
-public class DaoMaster extends AbstractDaoMaster {
-    public static final int SCHEMA_VERSION = 3;
-
-    /** Creates underlying database table using DAOs. */
-    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
-        NoteDao.createTable(db, ifNotExists);
-        CustomerDao.createTable(db, ifNotExists);
-        OrderDao.createTable(db, ifNotExists);
-    }
-    
-    /** Drops underlying database table using DAOs. */
-    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
-        NoteDao.dropTable(db, ifExists);
-        CustomerDao.dropTable(db, ifExists);
-        OrderDao.dropTable(db, ifExists);
-    }
-    
-    public static abstract class OpenHelper extends SQLiteOpenHelper {
-
-        public OpenHelper(Context context, String name, CursorFactory factory) {
-            super(context, name, factory, SCHEMA_VERSION);
-        }
-
-        @Override
-        public void onCreate(SQLiteDatabase db) {
-            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
-            createAllTables(db, false);
-        }
-    }
-    
-    /** WARNING: Drops all table on Upgrade! Use only during development. */
-    public static class DevOpenHelper extends OpenHelper {
-        public DevOpenHelper(Context context, String name, CursorFactory factory) {
-            super(context, name, factory);
-        }
-
-        @Override
-        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
-            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
-            dropAllTables(db, true);
-            onCreate(db);
-        }
-    }
-
-    public DaoMaster(SQLiteDatabase db) {
-        super(db, SCHEMA_VERSION);
-        registerDaoClass(NoteDao.class);
-        registerDaoClass(CustomerDao.class);
-        registerDaoClass(OrderDao.class);
-    }
-    
-    public DaoSession newSession() {
-        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
-    }
-    
-    public DaoSession newSession(IdentityScopeType type) {
-        return new DaoSession(db, type, daoConfigMap);
-    }
-    
-}
+package de.greenrobot.daoexample;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteDatabase.CursorFactory;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
+import de.greenrobot.dao.AbstractDaoMaster;
+import de.greenrobot.dao.IdentityScopeType;
+
+import de.greenrobot.daoexample.NoteDao;
+import de.greenrobot.daoexample.CustomerDao;
+import de.greenrobot.daoexample.OrderDao;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/**
+ * Master of DAO (schema version 3): knows all DAOs.
+*/
+public class DaoMaster extends AbstractDaoMaster {
+    public static final int SCHEMA_VERSION = 3;
+
+    /** Creates underlying database table using DAOs. */
+    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
+        NoteDao.createTable(db, ifNotExists);
+        CustomerDao.createTable(db, ifNotExists);
+        OrderDao.createTable(db, ifNotExists);
+    }
+
+    /** Drops underlying database table using DAOs. */
+    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
+        NoteDao.dropTable(db, ifExists);
+        CustomerDao.dropTable(db, ifExists);
+        OrderDao.dropTable(db, ifExists);
+    }
+
+    public static abstract class OpenHelper extends SQLiteOpenHelper {
+
+        public OpenHelper(Context context, String name, CursorFactory factory) {
+            super(context, name, factory, SCHEMA_VERSION);
+        }
+
+        @Override
+        public void onCreate(SQLiteDatabase db) {
+            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
+            createAllTables(db, false);
+        }
+    }
+
+    /** WARNING: Drops all table on Upgrade! Use only during development. */
+    public static class DevOpenHelper extends OpenHelper {
+        public DevOpenHelper(Context context, String name, CursorFactory factory) {
+            super(context, name, factory);
+        }
+
+        @Override
+        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
+            dropAllTables(db, true);
+            onCreate(db);
+        }
+    }
+
+    public DaoMaster(SQLiteDatabase db) {
+        super(db, SCHEMA_VERSION);
+        registerDaoClass(NoteDao.class);
+        registerDaoClass(CustomerDao.class);
+        registerDaoClass(OrderDao.class);
+    }
+
+    public DaoSession newSession() {
+        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
+    }
+
+    public DaoSession newSession(IdentityScopeType type) {
+        return new DaoSession(db, type, daoConfigMap);
+    }
+
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java b/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java
index 8887f051..328f2d0f 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java
@@ -21,7 +21,7 @@
 
 /**
  * {@inheritDoc}
- * 
+ *
  * @see de.greenrobot.dao.AbstractDaoSession
  */
 public class DaoSession extends AbstractDaoSession {
@@ -55,13 +55,20 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         registerDao(Customer.class, customerDao);
         registerDao(Order.class, orderDao);
     }
-    
+
     public void clear() {
         noteDaoConfig.getIdentityScope().clear();
         customerDaoConfig.getIdentityScope().clear();
         orderDaoConfig.getIdentityScope().clear();
     }
 
+    public void deleteAllData() {
+        noteDao.deleteAll();
+        customerDao.deleteAll();
+        orderDao.deleteAll();
+    }
+
+
     public NoteDao getNoteDao() {
         return noteDao;
     }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
index e23ed8a5..bebf97f2 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/NoteBase.java
@@ -1,82 +1,89 @@
-package de.greenrobot.daoexample;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
-/**
- * Entity mapped to table NOTE.
- */
+package de.greenrobot.daoexample;
+
+
+
+
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT . Enable "keep" sections if you want to edit.
+/**
+ * Entity mapped to table NOTE.
+ */
 @Test
 @Test2( singleValueeee )
 @Test3( key2 = "value2", key1 = 5 )
 @Test4( key2 = "value2", key1 = null )
-abstract public class NoteBase {
-
-    protected Long id;
-    /** Not-null value. */
-    protected String text;
+abstract public class NoteBase {
+
+    protected Long id;
+    /** Not-null value. */
+    protected String text;
     @JSONIgnore
-    protected String comment;
-    protected java.util.Date date;
-    protected java.util.List<String> userIds;
-
+    protected String comment;
+    protected java.util.Date date;
+    protected java.util.List<String> userIds;
+
+
+
     @Deprecated
-    public NoteBase() {
-    }
-
-    public NoteBase(Long id) {
-        this.id = id;
-    }
-
+    public NoteBase() {
+    }
+
+    public NoteBase(Long id) {
+        this.id = id;
+    }
+
     @Inject( Context )
-    public NoteBase(Long id, String text, String comment, java.util.Date date, java.util.List<String> userIds) {
-        this.id = id;
-        this.text = text;
-        this.comment = comment;
-        this.date = date;
-        this.userIds = userIds;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    /** Not-null value. */
-    public String getText() {
-        return text;
-    }
-
-    /** Not-null value; ensure this value is available before it is saved to the database. */
+    public NoteBase(Long id, String text, String comment, java.util.Date date, java.util.List<String> userIds) {
+        this.id = id;
+        this.text = text;
+        this.comment = comment;
+        this.date = date;
+        this.userIds = userIds;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    /** Not-null value. */
+    public String getText() {
+        return text;
+    }
+
+    /** Not-null value; ensure this value is available before it is saved to the database. */
     @test5( key1 = value1 )
-    public void setText(String text) {
-        this.text = text;
-    }
-
-    public String getComment() {
-        return comment;
-    }
-
-    public void setComment(String comment) {
-        this.comment = comment;
-    }
-
-    public java.util.Date getDate() {
-        return date;
-    }
-
+    public void setText(String text) {
+        this.text = text;
+    }
+
+    public String getComment() {
+        return comment;
+    }
+
+    public void setComment(String comment) {
+        this.comment = comment;
+    }
+
+    public java.util.Date getDate() {
+        return date;
+    }
+
     @Test( key1 = value1 )
-    public void setDate(java.util.Date date) {
-        this.date = date;
-    }
-
-    public java.util.List<String> getUserIds() {
-        return userIds;
-    }
-
-    public void setUserIds(java.util.List<String> userIds) {
-        this.userIds = userIds;
-    }
-
-}
+    public void setDate(java.util.Date date) {
+        this.date = date;
+    }
+
+    public java.util.List<String> getUserIds() {
+        return userIds;
+    }
+
+    public void setUserIds(java.util.List<String> userIds) {
+        this.userIds = userIds;
+    }
+
+
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
index 0b544617..d6612ade 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
@@ -23,11 +23,11 @@
      * Can be used for QueryBuilder and for referencing column names.
     */
     public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
-        public final static Property Comment = new Property(2, String.class, "comment", false, "COMMENT");
-        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
-        public final static Property UserIds = new Property(4, java.util.List<String>.class, "userIds", false, "USER_IDS");
+        public final static Property Id =new Property(0, Long.class , "id", true, "_id");
+        public final static Property Text =new Property(1, String.class , "text", false, "TEXT");
+        public final static Property Comment =new Property(2, String.class , "comment", false, "COMMENT");
+        public final static Property Date =new Property(3, java.util.Date.class , "date", false, "DATE");
+        public final static Property UserIds =new Property(4, java.util.List.class , "userIds", false, "USER_IDS");
     };
 
 
@@ -60,6 +60,7 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
     @Override
     protected void bindValues(SQLiteStatement stmt, Note entity) {
         stmt.clearBindings();
+        entity.onBeforeSave();
  
         Long id = entity.getId();
         if (id != null) {
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java b/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java
index c91eb8df..a85b8174 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/OrderBase.java
@@ -1,115 +1,122 @@
-package de.greenrobot.daoexample;
-
-import de.greenrobot.daoexample.DaoSession;
-import de.greenrobot.dao.DaoException;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
-/**
- * Entity mapped to table ORDERS.
- */
-abstract public class OrderBase {
-
-    protected Long id;
-    protected java.util.Date date;
-    protected long customerId;
-
-    /** Used to resolve relations */
-    protected transient DaoSession daoSession;
-
-    /** Used for active entity operations. */
-    protected transient OrderDao myDao;
-
-    protected Customer customer;
-    protected Long customer__resolvedKey;
-
-
-    public OrderBase() {
-    }
-
-    public OrderBase(Long id) {
-        this.id = id;
-    }
-
-    public OrderBase(Long id, java.util.Date date, long customerId) {
-        this.id = id;
-        this.date = date;
-        this.customerId = customerId;
-    }
-
-    /** called by internal mechanisms, do not call yourself. */
-    public void __setDaoSession(DaoSession daoSession) {
-        this.daoSession = daoSession;
-        myDao = daoSession != null ? daoSession.getOrderDao() : null;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    public java.util.Date getDate() {
-        return date;
-    }
-
-    public void setDate(java.util.Date date) {
-        this.date = date;
-    }
-
-    public long getCustomerId() {
-        return customerId;
-    }
-
-    public void setCustomerId(long customerId) {
-        this.customerId = customerId;
-    }
-
-    /** To-one relationship, resolved on first access. */
-    public Customer getCustomer() {
-        if (customer__resolvedKey == null || !customer__resolvedKey.equals(customerId)) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
-            CustomerDao targetDao = daoSession.getCustomerDao();
-            customer = targetDao.load(customerId);
-            customer__resolvedKey = customerId;
-        }
-        return customer;
-    }
-
-    public void setCustomer(Customer customer) {
-        if (customer == null) {
-            throw new DaoException("To-one property 'customerId' has not-null constraint; cannot set to-one to null");
-        }
-        this.customer = customer;
-        customerId = customer.getId();
-        customer__resolvedKey = customerId;
-    }
-
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
-    public void delete() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }
-        myDao.delete((Order)this);
-    }
-
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
-    public void update() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }
-        myDao.update((Order)this);
-    }
-
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
-    public void refresh() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }
-        myDao.refresh((Order)this);
-    }
-
-}
+package de.greenrobot.daoexample;
+
+import de.greenrobot.daoexample.DaoSession;
+import de.greenrobot.dao.DaoException;
+
+
+
+
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT . Enable "keep" sections if you want to edit.
+/**
+ * Entity mapped to table ORDERS.
+ */
+abstract public class OrderBase {
+
+    protected Long id;
+    protected java.util.Date date;
+    protected long customerId;
+
+
+
+    /** Used to resolve relations */
+    protected transient DaoSession daoSession;
+
+    /** Used for active entity operations. */
+    protected transient OrderDao myDao;
+
+    protected Customer customer;
+    protected Long customer__resolvedKey;
+
+
+    public OrderBase() {
+    }
+
+    public OrderBase(Long id) {
+        this.id = id;
+    }
+
+    public OrderBase(Long id, java.util.Date date, long customerId) {
+        this.id = id;
+        this.date = date;
+        this.customerId = customerId;
+    }
+
+    /** called by internal mechanisms, do not call yourself. */
+    public void __setDaoSession(DaoSession daoSession) {
+        this.daoSession = daoSession;
+        myDao = daoSession != null ? daoSession.getOrderDao() : null;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public java.util.Date getDate() {
+        return date;
+    }
+
+    public void setDate(java.util.Date date) {
+        this.date = date;
+    }
+
+    public long getCustomerId() {
+        return customerId;
+    }
+
+    public void setCustomerId(long customerId) {
+        this.customerId = customerId;
+    }
+
+    /** To-one relationship, resolved on first access. */
+    public Customer getCustomer() {
+        if (customer__resolvedKey == null || !customer__resolvedKey.equals(customerId)) {
+            if (daoSession == null) {
+                throw new DaoException("Entity is detached from DAO context");
+            }
+            CustomerDao targetDao = daoSession.getCustomerDao();
+            customer = targetDao.load(customerId);
+            customer__resolvedKey = customerId;
+        }
+        return customer;
+    }
+
+    public void setCustomer(Customer customer) {
+        if (customer == null) {
+            throw new DaoException("To-one property 'customerId' has not-null constraint; cannot set to-one to null");
+        }
+        this.customer = customer;
+        customerId = customer.getId();
+        customer__resolvedKey = customerId;
+    }
+
+    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    public void delete() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.delete((Order)this);
+    }
+
+    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    public void update() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.update((Order)this);
+    }
+
+    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    public void refresh() {
+        if (myDao == null) {
+            throw new DaoException("Entity is detached from DAO context");
+        }
+        myDao.refresh((Order)this);
+    }
+
+
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
index 6c8c8056..04ab716e 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
@@ -28,9 +28,9 @@
      * Can be used for QueryBuilder and for referencing column names.
     */
     public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
-        public final static Property CustomerId = new Property(2, long.class, "customerId", false, "CUSTOMER_ID");
+        public final static Property Id =new Property(0, Long.class , "id", true, "_id");
+        public final static Property Date =new Property(1, java.util.Date.class , "date", false, "DATE");
+        public final static Property CustomerId =new Property(2, long.class , "customerId", false, "CUSTOMER_ID");
     };
 
     private DaoSession daoSession;
@@ -65,6 +65,7 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
     @Override
     protected void bindValues(SQLiteStatement stmt, Order entity) {
         stmt.clearBindings();
+        entity.onBeforeSave();
  
         Long id = entity.getId();
         if (id != null) {
