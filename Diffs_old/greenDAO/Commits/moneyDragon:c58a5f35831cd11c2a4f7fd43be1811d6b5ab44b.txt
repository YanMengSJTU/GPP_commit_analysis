diff --git a/DaoCore/project.properties b/DaoCore/project.properties
index 96db7421..c57400d0 100644
--- a/DaoCore/project.properties
+++ b/DaoCore/project.properties
@@ -9,4 +9,4 @@
 
 android.library=true
 # Project target.
-target=android-4
+target=android-19
diff --git a/DaoExample/AndroidManifest.xml b/DaoExample/AndroidManifest.xml
index dda939f7..1a0f20ec 100644
--- a/DaoExample/AndroidManifest.xml
+++ b/DaoExample/AndroidManifest.xml
@@ -1,35 +1,37 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.daoexample"
-    android:versionCode="1"
-    android:versionName="1.0" >
-
-    <uses-sdk android:minSdkVersion="8" />
-
-    <instrumentation
-        android:name="android.test.InstrumentationTestRunner"
-        android:targetPackage="de.greenrobot.daoexample" />
-
-    <application
-        android:icon="@drawable/icon"
-        android:label="@string/app_name" >
-        <activity android:name=".MainActivity" >
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-
-        <uses-library android:name="android.test.runner" />
-
-        <activity
-            android:name=".NoteActivity"
-            android:label="@string/title_activity_main" >
-        </activity>
-        
-        <activity 
-            android:name=".ToolActivity"></activity>
-    </application>
-
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="de.greenrobot.daoexample"
+    android:versionCode="1"
+    android:versionName="1.0" >
+
+    <uses-sdk android:minSdkVersion="8" />
+    
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+
+    <instrumentation
+        android:name="android.test.InstrumentationTestRunner"
+        android:targetPackage="de.greenrobot.daoexample" />
+
+    <application
+        android:icon="@drawable/icon"
+        android:label="@string/app_name" >
+        <activity android:name=".MainActivity" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+
+        <uses-library android:name="android.test.runner" />
+
+        <activity
+            android:name=".NoteActivity"
+            android:label="@string/title_activity_main" >
+        </activity>
+        
+        <activity 
+            android:name=".ToolActivity"></activity>
+    </application>
+
 </manifest>
\ No newline at end of file
diff --git a/DaoExample/src/de/greenrobot/daoexample/ToolActivity.java b/DaoExample/src/de/greenrobot/daoexample/ToolActivity.java
index b950bb2f..5f5c0cd0 100644
--- a/DaoExample/src/de/greenrobot/daoexample/ToolActivity.java
+++ b/DaoExample/src/de/greenrobot/daoexample/ToolActivity.java
@@ -1,61 +1,70 @@
-package de.greenrobot.daoexample;
-
-import java.util.List;
-
-import android.app.Activity;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
-import android.content.pm.ProviderInfo;
-import android.os.Bundle;
-
-public class ToolActivity extends Activity {
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.tool);
-        initView();
-        initData();
-        initListener();
-    }
-
-    private void initView() {
-
-    }
-
-    private void initData() {
-
-        testShortcutList();
-    }
-
-    private void initListener() {
-
-    }
-
-    private void testShortcutList() {
-        List<PackageInfo> packs = getBaseContext().getPackageManager().getInstalledPackages(
-                PackageManager.GET_PROVIDERS);
-        if (packs != null) {
-            for (PackageInfo pack : packs) {
-                ProviderInfo[] providers = pack.providers;
-                if (providers != null) {
-                    for (ProviderInfo provider : providers) {
-                        System.out.println(provider.readPermission + "   " + provider.writePermission + "  "
-                                + provider.authority);
-                    }
-                }
-            }
-        }
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-    }
-
-}
+package de.greenrobot.daoexample;
+
+import java.util.List;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.ProviderInfo;
+import android.os.Bundle;
+import android.telephony.TelephonyManager;
+
+public class ToolActivity extends Activity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.tool);
+        initView();
+        initData();
+        initListener();
+    }
+
+    private void initView() {
+
+    }
+
+    private void initData() {
+
+        testShortcutList();
+        getPhoneNum();
+    }
+
+    private void initListener() {
+
+    }
+
+    private void testShortcutList() {
+        List<PackageInfo> packs = getBaseContext().getPackageManager().getInstalledPackages(
+                PackageManager.GET_PROVIDERS);
+        if (packs != null) {
+            for (PackageInfo pack : packs) {
+                ProviderInfo[] providers = pack.providers;
+                if (providers != null) {
+                    for (ProviderInfo provider : providers) {
+                        System.out.println(provider.readPermission + "   " + provider.writePermission + "  "
+                                + provider.authority);
+                    }
+                }
+            }
+        }
+    }
+    
+    private void getPhoneNum(){
+        TelephonyManager mTelephonyMgr = (TelephonyManager)getBaseContext().getSystemService(Context.TELEPHONY_SERVICE);
+        String num = mTelephonyMgr.getLine1Number();
+        System.out.println(num+"");
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+    }
+
+}
diff --git a/DaoTest/AndroidManifest.xml b/DaoTest/AndroidManifest.xml
index 993e13d4..2fbf7fbe 100644
--- a/DaoTest/AndroidManifest.xml
+++ b/DaoTest/AndroidManifest.xml
@@ -1,15 +1,19 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.daotest.dummyapp"
-    android:versionCode="1"
-    android:versionName="1.0" >
-
-    <uses-sdk android:minSdkVersion="4" />
-
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
-
-    <application>
-        <uses-library android:name="android.test.runner" />
-    </application>
-
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="de.greenrobot.daotest"
+    android:versionCode="1"
+    android:versionName="1.0" >
+
+    <uses-sdk android:minSdkVersion="8" />
+
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+    
+    <instrumentation
+        android:name="android.test.InstrumentationTestRunner"
+        android:targetPackage="de.greenrobot.daotest" />
+
+    <application>
+        <uses-library android:name="android.test.runner" />
+    </application>
+
 </manifest>
\ No newline at end of file
diff --git a/DaoTest/project.properties b/DaoTest/project.properties
index dd110c3e..fdf1149c 100644
--- a/DaoTest/project.properties
+++ b/DaoTest/project.properties
@@ -9,4 +9,4 @@
 
 android.library.reference.1=../DaoCore
 # Project target.
-target=android-4
+target=android-19
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/LoockupPerformanceTest.java b/DaoTest/src/de/greenrobot/daotest/performance/LoockupPerformanceTest.java
index 9b697d53..efeb5edf 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/LoockupPerformanceTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/performance/LoockupPerformanceTest.java
@@ -1,199 +1,199 @@
-/*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * This file is part of greenDAO Generator.
- * 
- * greenDAO Generator is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * greenDAO Generator is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- * 
- * You should have received a copy of the GNU General Public License
- * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
- */
-package de.greenrobot.daotest.performance;
-
-import java.util.Date;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Random;
-
-import junit.framework.TestCase;
-import de.greenrobot.dao.DaoLog;
-import de.greenrobot.dao.internal.LongHashMap;
-import de.greenrobot.daotest.performance.target.LongHashMapAmarena2DZechner;
-import de.greenrobot.daotest.performance.target.LongHashMapJDBM;
-import de.greenrobot.daotest.performance.target.LongSparseArray;
-
-public class LoockupPerformanceTest extends TestCase {
-
-    Random random;
-    private String traceName;
-    private long start;
-
-    public LoockupPerformanceTest() {
-        this.random = new Random();
-    }
-
-    public void testHashMapPerformance() {
-        // runTests(100);
-        // runTests(1000);
-        // runTests(10000);
-        // runTests(100000); // hash: 1485/420ms; sparse: 148196/196ms
-        DaoLog.d("testHashMapPerformance DONE");
-    }
-
-    private void runTests(int count) {
-        runTests(count, false);
-        runTests(count, true);
-    }
-
-    private void runTests(int count, boolean randomKeys) {
-        DaoLog.d("-----------------------------------");
-        DaoLog.d("Look up " + count + (randomKeys ? " random" : " linear") + " keys on " + new Date());
-        DaoLog.d("-----------------------------------");
-        long[] keys = new long[count];
-        for (int i = 0; i < count; i++) {
-            if (randomKeys) {
-                keys[i] = random.nextLong();
-            } else {
-                keys[i] = i;
-            }
-        }
-        for (int i = 0; i < 3; i++) {
-            runMapTest(new HashMap<Long, Object>(count), keys, "hashmap");
-            // runMapTest(new WeakHashMap<Long, Object>(count), keys, "weakhashmap");
-            // runMapTest(new ConcurrentHashMap<Long, Object>(count), keys, "concurrent-hashmap");
-            // runLongSparseArrayTest(keys);
-            runLongHashMap(keys);
-            runLongHashMapAmarena2DZechnerTest(keys);
-            // runLongHashMapJDBMTest(keys);
-            DaoLog.d("-----------------------------------");
-        }
-    }
-
-    protected void runMapTest(Map<Long, Object> map, long[] keys, String name) {
-        startClock("put-" + name + "-" + keys.length);
-        for (long key : keys) {
-            map.put(key, this);
-        }
-        stopClock();
-
-        startClock("get-" + name + "-" + keys.length);
-        int lossCount = 0;
-        for (long key : keys) {
-            Object object = map.get(key);
-            if (object != this) {
-                lossCount++;
-            }
-        }
-        if (lossCount > 0) {
-            stopClock("losses: " + lossCount);
-        } else {
-            stopClock();
-        }
-    }
-
-    private void runLongSparseArrayTest(long[] keys) {
-        if (keys.length > 10000) {
-            DaoLog.d("Skipping runLongSparseArrayTest for " + keys.length);
-            return;
-        }
-        LongSparseArray<Object> array = new LongSparseArray<Object>(keys.length);
-
-        startClock("put-sparsearray-" + keys.length);
-        for (long key : keys) {
-            array.put(key, this);
-        }
-        stopClock();
-
-        startClock("get-sparsearray-" + keys.length);
-        for (long key : keys) {
-            Object object = array.get(key);
-            if (object != this) {
-                fail("Ups: " + object);
-            }
-        }
-        stopClock();
-    }
-
-    private void runLongHashMapJDBMTest(long[] keys) {
-        LongHashMapJDBM<Object> map = new LongHashMapJDBM<Object>(keys.length);
-
-        startClock("put-jdbm-" + keys.length);
-        for (long key : keys) {
-            map.put(key, this);
-        }
-        stopClock();
-
-        startClock("get-jdbm-" + keys.length);
-        for (long key : keys) {
-            Object object = map.get(key);
-            if (object != this) {
-                fail("Ups: " + object);
-            }
-        }
-        stopClock();
-    }
-
-    private void runLongHashMap(long[] keys) {
-        LongHashMap<Object> map = new LongHashMap<Object>(keys.length);
-        map.reserveRoom(keys.length);
-
-        startClock("put-my-" + keys.length);
-        for (long key : keys) {
-            map.put(key, this);
-        }
-        stopClock();
-
-        startClock("get-my-" + keys.length);
-        for (long key : keys) {
-            Object object = map.get(key);
-            if (object != this) {
-                fail("Ups: " + object);
-            }
-        }
-        stopClock();
-        map.logStats();
-    }
-
-    private void runLongHashMapAmarena2DZechnerTest(long[] keys) {
-        LongHashMapAmarena2DZechner<Object> map = new LongHashMapAmarena2DZechner<Object>(keys.length);
-
-        startClock("put-amarena-" + keys.length);
-        for (long key : keys) {
-            map.put(key, this);
-        }
-        stopClock();
-
-        startClock("get-amarena-" + keys.length);
-        for (long key : keys) {
-            Object object = map.get(key);
-            if (object != this) {
-                fail("Ups: " + object);
-            }
-        }
-        stopClock();
-        map.logStats();
-    }
-
-    protected void startClock(String traceName) {
-        this.traceName = traceName;
-        start = System.currentTimeMillis();
-    }
-
-    protected void stopClock() {
-        stopClock(null);
-    }
-
-    protected void stopClock(String extraInfoOrNull) {
-        long time = System.currentTimeMillis() - start;
-        String extraLog = extraInfoOrNull != null ? " (" + extraInfoOrNull + ")" : "";
-        DaoLog.d(traceName + " completed in " + time + "ms" + extraLog);
-    }
-
-}
+/*
+ * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * This file is part of greenDAO Generator.
+ * 
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package de.greenrobot.daotest.performance;
+
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Random;
+
+import junit.framework.TestCase;
+import de.greenrobot.dao.DaoLog;
+import de.greenrobot.dao.internal.LongHashMap;
+import de.greenrobot.daotest.performance.target.LongHashMapAmarena2DZechner;
+import de.greenrobot.daotest.performance.target.LongHashMapJDBM;
+import de.greenrobot.daotest.performance.target.LongSparseArray;
+
+public class LoockupPerformanceTest extends TestCase {
+
+    Random random;
+    private String traceName;
+    private long start;
+
+    public LoockupPerformanceTest() {
+        this.random = new Random();
+    }
+
+    public void testHashMapPerformance() {
+        // runTests(100);
+        // runTests(1000);
+        // runTests(10000);
+         runTests(100000); // hash: 1485/420ms; sparse: 148196/196ms
+        DaoLog.d("testHashMapPerformance DONE");
+    }
+
+    private void runTests(int count) {
+        runTests(count, false);
+        runTests(count, true);
+    }
+
+    private void runTests(int count, boolean randomKeys) {
+        DaoLog.d("-----------------------------------");
+        DaoLog.d("Look up " + count + (randomKeys ? " random" : " linear") + " keys on " + new Date());
+        DaoLog.d("-----------------------------------");
+        long[] keys = new long[count];
+        for (int i = 0; i < count; i++) {
+            if (randomKeys) {
+                keys[i] = random.nextLong();
+            } else {
+                keys[i] = i;
+            }
+        }
+        for (int i = 0; i < 3; i++) {
+//            runMapTest(new HashMap<Long, Object>(count), keys, "hashmap");
+            // runMapTest(new WeakHashMap<Long, Object>(count), keys, "weakhashmap");
+            // runMapTest(new ConcurrentHashMap<Long, Object>(count), keys, "concurrent-hashmap");
+//             runLongSparseArrayTest(keys);
+//            runLongHashMap(keys);
+            runLongHashMapAmarena2DZechnerTest(keys);
+            // runLongHashMapJDBMTest(keys);
+            DaoLog.d("-----------------------------------");
+        }
+    }
+
+    protected void runMapTest(Map<Long, Object> map, long[] keys, String name) {
+        startClock("put-" + name + "-" + keys.length);
+        for (long key : keys) {
+            map.put(key, this);
+        }
+        stopClock();
+
+        startClock("get-" + name + "-" + keys.length);
+        int lossCount = 0;
+        for (long key : keys) {
+            Object object = map.get(key);
+            if (object != this) {
+                lossCount++;
+            }
+        }
+        if (lossCount > 0) {
+            stopClock("losses: " + lossCount);
+        } else {
+            stopClock();
+        }
+    }
+
+    private void runLongSparseArrayTest(long[] keys) {
+        if (keys.length > 10000) {
+            DaoLog.d("Skipping runLongSparseArrayTest for " + keys.length);
+            return;
+        }
+        LongSparseArray<Object> array = new LongSparseArray<Object>(keys.length);
+
+        startClock("put-sparsearray-" + keys.length);
+        for (long key : keys) {
+            array.put(key, this);
+        }
+        stopClock();
+
+        startClock("get-sparsearray-" + keys.length);
+        for (long key : keys) {
+            Object object = array.get(key);
+            if (object != this) {
+                fail("Ups: " + object);
+            }
+        }
+        stopClock();
+    }
+
+    private void runLongHashMapJDBMTest(long[] keys) {
+        LongHashMapJDBM<Object> map = new LongHashMapJDBM<Object>(keys.length);
+
+        startClock("put-jdbm-" + keys.length);
+        for (long key : keys) {
+            map.put(key, this);
+        }
+        stopClock();
+
+        startClock("get-jdbm-" + keys.length);
+        for (long key : keys) {
+            Object object = map.get(key);
+            if (object != this) {
+                fail("Ups: " + object);
+            }
+        }
+        stopClock();
+    }
+
+    private void runLongHashMap(long[] keys) {
+        LongHashMap<Object> map = new LongHashMap<Object>(keys.length);
+        map.reserveRoom(keys.length);
+
+        startClock("put-my-" + keys.length);
+        for (long key : keys) {
+            map.put(key, this);
+        }
+        stopClock();
+
+        startClock("get-my-" + keys.length);
+        for (long key : keys) {
+            Object object = map.get(key);
+            if (object != this) {
+                fail("Ups: " + object);
+            }
+        }
+        stopClock();
+        map.logStats();
+    }
+
+    private void runLongHashMapAmarena2DZechnerTest(long[] keys) {
+        LongHashMapAmarena2DZechner<Object> map = new LongHashMapAmarena2DZechner<Object>(keys.length);
+
+        startClock("put-amarena-" + keys.length);
+        for (long key : keys) {
+            map.put(key, this);
+        }
+        stopClock();
+
+        startClock("get-amarena-" + keys.length);
+        for (long key : keys) {
+            Object object = map.get(key);
+            if (object != this) {
+                fail("Ups: " + object);
+            }
+        }
+        stopClock();
+        map.logStats();
+    }
+
+    protected void startClock(String traceName) {
+        this.traceName = traceName;
+        start = System.currentTimeMillis();
+    }
+
+    protected void stopClock() {
+        stopClock(null);
+    }
+
+    protected void stopClock(String extraInfoOrNull) {
+        long time = System.currentTimeMillis() - start;
+        String extraLog = extraInfoOrNull != null ? " (" + extraInfoOrNull + ")" : "";
+        DaoLog.d(traceName + " completed in " + time + "ms" + extraLog);
+    }
+
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTest.java b/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTest.java
index 60f1321f..fca03fdf 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTest.java
@@ -41,7 +41,7 @@ public void testPerformance() throws Exception {
         // runTests(1000);
         // runTests(1000);
         // runTests(1000);
-        // runTests(1000);
+         runTests(1000);
     }
 
     protected void runTests(int entityCount) {
diff --git a/PerformanceTestOrmLite/project.properties b/PerformanceTestOrmLite/project.properties
index c957743c..a5578ba0 100644
--- a/PerformanceTestOrmLite/project.properties
+++ b/PerformanceTestOrmLite/project.properties
@@ -8,4 +8,4 @@
 # project structure.
 
 # Project target.
-target=android-4
+target=android-19
