diff --git a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
index c8b0af29..f23fc0d9 100644
--- a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
+++ b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
@@ -60,8 +60,8 @@ public TestDaoGenerator() {
 
     public void generate() throws Exception {
         DaoGenerator daoGenerator = new DaoGenerator();
-        daoGenerator.generateAll(schema, "../DaoTest/src-gen", "../DaoTest/src");
-        daoGenerator.generateAll(schema2, "../DaoTest/src-gen", "../DaoTest/src");
+        daoGenerator.generateAllWithDataStoreIntegration(schema, "../DaoTest/src-gen", "../DaoTest/src");
+        daoGenerator.generateAllWithDataStoreIntegration(schema2, "../DaoTest/src-gen", "../DaoTest/src");
     }
 
     protected void createSimple() {
diff --git a/DaoGenerator/src-template/fakeDatastoreEntity.ftl b/DaoGenerator/src-template/fakeDatastoreEntity.ftl
new file mode 100644
index 00000000..396593a5
--- /dev/null
+++ b/DaoGenerator/src-template/fakeDatastoreEntity.ftl
@@ -0,0 +1,7 @@
+package com.google.appengine.api.datastore;
+
+public class Entity {
+	public Entity(String ds_entityName) {}
+	public void setProperty(Object ds_id, Object id) {}
+	public Object getProperty(String ds_id) {return null;}
+}
diff --git a/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java b/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
index 8f17eea5..10d5b8d4 100644
--- a/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
+++ b/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
@@ -33,33 +33,74 @@
 
 public class SimpleDaoGeneratorTest {
 
-    @Test
-    public void testMinimalSchema() throws Exception {
-        Schema schema = new Schema(1, "de.greenrobot.testdao");
-        Entity adressTable = schema.addEntity("Adresse");
-        Property idProperty = adressTable.addIdProperty().getProperty();
-        adressTable.addIntProperty("count").index();
-        adressTable.addIntProperty("dummy").notNull();
-        assertEquals(1, schema.getEntities().size());
-        assertEquals(3, adressTable.getProperties().size());
-
-        File daoFile = new File("test-out/de/greenrobot/testdao/" + adressTable.getClassName() + "Dao.java");
-        daoFile.delete();
-        assertFalse(daoFile.exists());
-
-        new DaoGenerator().generateAll(schema, "test-out");
-
-        assertEquals("PRIMARY KEY", idProperty.getConstraints());
-        assertTrue(daoFile.toString(), daoFile.exists());
-    }
-
-    @Test
-    public void testDbName() {
-        assertEquals("NORMAL", DaoUtil.dbName("normal"));
-        assertEquals("NORMAL", DaoUtil.dbName("Normal"));
-        assertEquals("CAMEL_CASE", DaoUtil.dbName("CamelCase"));
-        assertEquals("CAMEL_CASE_THREE", DaoUtil.dbName("CamelCaseThree"));
-        assertEquals("CAMEL_CASE_XXXX", DaoUtil.dbName("CamelCaseXXXX"));
-    }
+	@Test
+	public void testMinimalSchema() throws Exception {
+		Schema schema = new Schema(1, "de.greenrobot.testdao");
+		Entity adressTable = schema.addEntity("Adresse");
+		Property idProperty = adressTable.addIdProperty().getProperty();
+		adressTable.addIntProperty("count").index();
+		adressTable.addIntProperty("dummy").notNull();
+		assertEquals(1, schema.getEntities().size());
+		assertEquals(3, adressTable.getProperties().size());
+
+		File testOutDir = new File("test-out");
+		testOutDir.mkdirs();
+
+		File daoFile = new File("test-out/de/greenrobot/testdao/" + adressTable.getClassName() + "Dao.java");
+		daoFile.delete();
+		assertFalse(daoFile.exists());
+
+		new DaoGenerator().generateAll(schema, "test-out");
+
+		assertEquals("PRIMARY KEY", idProperty.getConstraints());
+		assertTrue(daoFile.toString(), daoFile.exists());
+	}
+
+	@Test
+	public void testMinimalSchemaWithDsIntegration() throws Exception {
+		Schema schema = new Schema(1, "de.greenrobot.testdao");
+		Entity adressTable = schema.addEntity("Adresse");
+		Property idProperty = adressTable.addIdProperty().getProperty();
+		adressTable.addIntProperty("count").index();
+		adressTable.addIntProperty("dummy").notNull();
+		assertEquals(1, schema.getEntities().size());
+		assertEquals(3, adressTable.getProperties().size());
+
+		String outDir = "test-out";
+		File testOutDir = new File(outDir);
+		testOutDir.mkdirs();
+
+		String appSrcDir = "test-app-src-dir";
+		File appSrcTestOutDir = new File(appSrcDir);
+		appSrcTestOutDir.mkdirs();
+
+		File daoFile = new File(outDir + "/de/greenrobot/testdao/" + adressTable.getClassName() + "Dao.java");
+		daoFile.delete();
+		assertFalse(daoFile.exists());
+
+		File fakeEntity = new File(appSrcDir + "/com/google/appengine/api/datastore/Entity.java");
+		fakeEntity.delete();
+		assertFalse(fakeEntity.exists());
+
+		new DaoGenerator().generateAllWithDataStoreIntegration(schema, appSrcDir, outDir);
+
+		assertTrue(fakeEntity.toString(), fakeEntity.exists());
+		assertEquals("PRIMARY KEY", idProperty.getConstraints());
+		assertTrue(daoFile.toString(), daoFile.exists());
+
+		daoFile.delete();
+		fakeEntity.delete();
+		appSrcTestOutDir.delete();
+		testOutDir.delete();
+	}
+
+	@Test
+	public void testDbName() {
+		assertEquals("NORMAL", DaoUtil.dbName("normal"));
+		assertEquals("NORMAL", DaoUtil.dbName("Normal"));
+		assertEquals("CAMEL_CASE", DaoUtil.dbName("CamelCase"));
+		assertEquals("CAMEL_CASE_THREE", DaoUtil.dbName("CamelCaseThree"));
+		assertEquals("CAMEL_CASE_XXXX", DaoUtil.dbName("CamelCaseXXXX"));
+	}
 
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index b812531a..8b1c84c4 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -38,156 +38,172 @@
  */
 public class DaoGenerator {
 
-    private Pattern patternKeepIncludes;
-    private Pattern patternKeepFields;
-    private Pattern patternKeepMethods;
-
-    private Template templateDao;
-    private Template templateDaoMaster;
-    private Template templateDaoSession;
-    private Template templateEntity;
-    private Template templateDaoUnitTest;
-
-    public DaoGenerator() throws IOException {
-        System.out.println("greenDAO Generator");
-        System.out.println("Copyright 2011 Markus Junginger, greenrobot.de. Licensed under GPL V3.");
-        System.out.println("This program comes with ABSOLUTELY NO WARRANTY");
-
-        patternKeepIncludes = compilePattern("INCLUDES");
-        patternKeepFields = compilePattern("FIELDS");
-        patternKeepMethods = compilePattern("METHODS");
-
-        Configuration config = new Configuration();
-        config.setClassForTemplateLoading(this.getClass(), "/");
-        config.setObjectWrapper(new DefaultObjectWrapper());
-
-        templateDao = config.getTemplate("dao.ftl");
-        templateDaoMaster = config.getTemplate("dao-master.ftl");
-        templateDaoSession = config.getTemplate("dao-session.ftl");
-        templateEntity = config.getTemplate("entity.ftl");
-        templateDaoUnitTest = config.getTemplate("dao-unit-test.ftl");
-    }
-
-    private Pattern compilePattern(String sectionName) {
-        int flags = Pattern.DOTALL | Pattern.MULTILINE;
-        return Pattern.compile(".*^\\s*?//\\s*?KEEP " + sectionName + ".*?\n(.*?)^\\s*// KEEP " + sectionName
-                + " END.*?\n", flags);
-    }
-
-    /** Generates all entities and DAOs for the given schema. */
-    public void generateAll(Schema schema, String outDir) throws Exception {
-        generateAll(schema, outDir, null);
-    }
-
-    /** Generates all entities and DAOs for the given schema. */
-    public void generateAll(Schema schema, String outDir, String outDirTest) throws Exception {
-        long start = System.currentTimeMillis();
-
-        File outDirFile = toFileForceExists(outDir);
-
-        File outDirTestFile = null;
-        if (outDirTest != null) {
-            outDirTestFile = toFileForceExists(outDirTest);
-        }
-
-        schema.init2ndPass();
-        schema.init3ndPass();
-
-        List<Entity> entities = schema.getEntities();
-
-        for (Entity entity : entities) {
-            generate(templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(), schema, entity);
-            if (!entity.isProtobuf() && !entity.isSkipGeneration()) {
-                generate(templateEntity, outDirFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
-            }
-            if (outDirTestFile != null && !entity.isSkipGenerationTest()) {
-                String javaPackageTest = entity.getJavaPackageTest();
-                String classNameTest = entity.getClassNameTest();
-                File javaFilename = toJavaFilename(outDirTestFile, javaPackageTest, classNameTest);
-                if (!javaFilename.exists()) {
-                    generate(templateDaoUnitTest, outDirTestFile, javaPackageTest, classNameTest, schema, entity);
-                } else {
-                    System.out.println("Skipped " + javaFilename.getCanonicalPath());
-                }
-            }
-        }
-        generate(templateDaoMaster, outDirFile, schema.getDefaultJavaPackageDao(), "DaoMaster", schema, null);
-        generate(templateDaoSession, outDirFile, schema.getDefaultJavaPackageDao(), "DaoSession", schema, null);
-
-        long time = System.currentTimeMillis() - start;
-        System.out.println("Processed " + entities.size() + " entities in " + time + "ms");
-    }
-
-    protected File toFileForceExists(String filename) throws IOException {
-        File file = new File(filename);
-        if (!file.exists()) {
-            throw new IOException(filename
-                    + " does not exist. This check is to prevent accidential file generation into a wrong path.");
-        }
-        return file;
-    }
-
-    private void generate(Template template, File outDirFile, String javaPackage, String javaClassName, Schema schema,
-            Entity entity) throws Exception {
-        try {
-            File file = toJavaFilename(outDirFile, javaPackage, javaClassName);
-            file.getParentFile().mkdirs();
-
-            Map<String, Object> root = new HashMap<String, Object>();
-            root.put("schema", schema);
-            root.put("entity", entity);
-
-            if (entity != null && entity.getHasKeepSections()) {
-                checkKeepSections(file, root);
-            }
-
-            Writer writer = new FileWriter(file);
-            try {
-                template.process(root, writer);
-                writer.flush();
-                System.out.println("Written " + file.getCanonicalPath());
-            } finally {
-                writer.close();
-            }
-        } catch (Exception ex) {
-            System.err.println("Error while generating " + javaPackage + "." + javaClassName + " ("
-                    + outDirFile.getCanonicalPath() + ")");
-            throw ex;
-        }
-    }
-
-    private void checkKeepSections(File file, Map<String, Object> root) {
-        if (file.exists()) {
-            try {
-                String contents = new String(DaoUtil.readAllBytes(file));
-
-                Matcher matcher;
-
-                matcher = patternKeepIncludes.matcher(contents);
-                if (matcher.matches()) {
-                    root.put("keepIncludes", matcher.group(1));
-                }
-
-                matcher = patternKeepFields.matcher(contents);
-                if (matcher.matches()) {
-                    root.put("keepFields", matcher.group(1));
-                }
-
-                matcher = patternKeepMethods.matcher(contents);
-                if (matcher.matches()) {
-                    root.put("keepMethods", matcher.group(1));
-                }
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
-        }
-    }
-
-    protected File toJavaFilename(File outDirFile, String javaPackage, String javaClassName) {
-        String packageSubPath = javaPackage.replace('.', '/');
-        File packagePath = new File(outDirFile, packageSubPath);
-        File file = new File(packagePath, javaClassName + ".java");
-        return file;
-    }
+	private Pattern		patternKeepIncludes;
+	private Pattern		patternKeepFields;
+	private Pattern		patternKeepMethods;
+
+	private Template	templateDao;
+	private Template	templateDaoMaster;
+	private Template	templateDaoSession;
+	private Template	templateEntity;
+	private Template	templateDaoUnitTest;
+	private Template	templateFakeDsEntity;
+
+	public DaoGenerator() throws IOException {
+		System.out.println("greenDAO Generator");
+		System.out.println("Copyright 2011 Markus Junginger, greenrobot.de. Licensed under GPL V3.");
+		System.out.println("This program comes with ABSOLUTELY NO WARRANTY");
+
+		this.patternKeepIncludes = compilePattern("INCLUDES");
+		this.patternKeepFields = compilePattern("FIELDS");
+		this.patternKeepMethods = compilePattern("METHODS");
+
+		Configuration config = new Configuration();
+		config.setClassForTemplateLoading(this.getClass(), "/");
+		config.setObjectWrapper(new DefaultObjectWrapper());
+
+		this.templateDao = config.getTemplate("dao.ftl");
+		this.templateDaoMaster = config.getTemplate("dao-master.ftl");
+		this.templateDaoSession = config.getTemplate("dao-session.ftl");
+		this.templateFakeDsEntity = config.getTemplate("fakeDatastoreEntity.ftl");
+		this.templateEntity = config.getTemplate("entity.ftl");
+		this.templateDaoUnitTest = config.getTemplate("dao-unit-test.ftl");
+	}
+
+	private Pattern compilePattern(String sectionName) {
+		int flags = Pattern.DOTALL | Pattern.MULTILINE;
+		return Pattern.compile(".*^\\s*?//\\s*?KEEP " + sectionName + ".*?\n(.*?)^\\s*// KEEP " + sectionName + " END.*?\n", flags);
+	}
+
+	/** Generates all entities and DAOs for the given schema. 
+	 * 
+	 * */
+	public void generateAllWithDataStoreIntegration(Schema schema, String appSrcDir, String outDir) throws Exception {
+		generateAll(schema, appSrcDir, outDir, null);
+	}
+
+	public void generateAll(Schema schema, String outDir) throws Exception {
+		generateAll(schema, null, outDir, null);
+	}
+
+	/** Generates all entities and DAOs for the given schema. */
+	public void generateAll(Schema schema, String appSrcDir, String outDir, String outDirTest) throws Exception {
+		long start = System.currentTimeMillis();
+
+		File outDirFile = toFileForceExists(outDir);
+
+		File outDirTestFile = null;
+		if (outDirTest != null) {
+			outDirTestFile = toFileForceExists(outDirTest);
+		}
+
+		if (schema.isHasEasyDatastoreIntegration() && appSrcDir == null) {
+			throw new RuntimeException(
+					"U have to provide the appSrcDir when using the EasyDataStoreIntegration, use method: generateAllWithDataStoreIntegration()");
+		}
+
+		File appSrcDirFile = null;
+		if (appSrcDir != null) {
+			appSrcDirFile = toFileForceExists(appSrcDir);
+		}
+
+		schema.init2ndPass();
+		schema.init3ndPass();
+
+		List<Entity> entities = schema.getEntities();
+
+		for (Entity entity : entities) {
+			generate(this.templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(), schema, entity);
+			if (!entity.isProtobuf() && !entity.isSkipGeneration()) {
+				generate(this.templateEntity, outDirFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
+			}
+			if (outDirTestFile != null && !entity.isSkipGenerationTest()) {
+				String javaPackageTest = entity.getJavaPackageTest();
+				String classNameTest = entity.getClassNameTest();
+				File javaFilename = toJavaFilename(outDirTestFile, javaPackageTest, classNameTest);
+				if (!javaFilename.exists()) {
+					generate(this.templateDaoUnitTest, outDirTestFile, javaPackageTest, classNameTest, schema, entity);
+				} else {
+					System.out.println("Skipped " + javaFilename.getCanonicalPath());
+				}
+			}
+		}
+		generate(this.templateDaoMaster, outDirFile, schema.getDefaultJavaPackageDao(), "DaoMaster", schema, null);
+		generate(this.templateFakeDsEntity, appSrcDirFile, "/com/google/appengine/api/datastore", "Entity", schema, null);
+		generate(this.templateDaoSession, outDirFile, schema.getDefaultJavaPackageDao(), "DaoSession", schema, null);
+
+		long time = System.currentTimeMillis() - start;
+		System.out.println("Processed " + entities.size() + " entities in " + time + "ms");
+	}
+
+	protected File toFileForceExists(String filename) throws IOException {
+		File file = new File(filename);
+		if (!file.exists()) {
+			throw new IOException(filename + " does not exist. This check is to prevent accidential file generation into a wrong path.");
+		}
+		return file;
+	}
+
+	private void generate(Template template, File outDirFile, String javaPackage, String javaClassName, Schema schema, Entity entity)
+			throws Exception {
+		try {
+			File file = toJavaFilename(outDirFile, javaPackage, javaClassName);
+			file.getParentFile().mkdirs();
+
+			Map<String, Object> root = new HashMap<String, Object>();
+			root.put("schema", schema);
+			root.put("entity", entity);
+
+			if (entity != null && entity.getHasKeepSections()) {
+				checkKeepSections(file, root);
+			}
+
+			Writer writer = new FileWriter(file);
+			try {
+				template.process(root, writer);
+				writer.flush();
+				System.out.println("Written " + file.getCanonicalPath());
+			} finally {
+				writer.close();
+			}
+		} catch (Exception ex) {
+			System.err.println("Error while generating " + javaPackage + "." + javaClassName + " (" + outDirFile.getCanonicalPath() + ")");
+			throw ex;
+		}
+	}
+
+	private void checkKeepSections(File file, Map<String, Object> root) {
+		if (file.exists()) {
+			try {
+				String contents = new String(DaoUtil.readAllBytes(file));
+
+				Matcher matcher;
+
+				matcher = this.patternKeepIncludes.matcher(contents);
+				if (matcher.matches()) {
+					root.put("keepIncludes", matcher.group(1));
+				}
+
+				matcher = this.patternKeepFields.matcher(contents);
+				if (matcher.matches()) {
+					root.put("keepFields", matcher.group(1));
+				}
+
+				matcher = this.patternKeepMethods.matcher(contents);
+				if (matcher.matches()) {
+					root.put("keepMethods", matcher.group(1));
+				}
+			} catch (IOException e) {
+				e.printStackTrace();
+			}
+		}
+	}
+
+	protected File toJavaFilename(File outDirFile, String javaPackage, String javaClassName) {
+		String packageSubPath = javaPackage.replace('.', '/');
+		File packagePath = new File(outDirFile, packageSubPath);
+		File file = new File(packagePath, javaClassName + ".java");
+		return file;
+	}
 
 }
