diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
index 2f56f62e..fd124a9b 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
@@ -26,6 +26,7 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.List;
 
 /**
@@ -123,6 +124,39 @@ public T load(K key) {
         return loadUniqueAndCloseCursor(cursor);
     }
 
+    /**
+     * loads all entities given the key.
+     * it first checks identity scope to minimize # of queries
+     * keys might be sorted differently in the response.
+     * @param keys
+     * @return
+     */
+    public List<T> loadAll(Collection<K> keys) {
+        assertSinglePk();
+        if (keys.size() == 0) {
+            return new ArrayList<T>(0);
+        }
+        ArrayList<T> result = new ArrayList<T>(keys.size());
+        ArrayList<K> missing = new ArrayList<K>();
+        if (identityScope != null) {
+            for(K key : keys) {
+                T entity = identityScope.get(key);
+                if (entity != null) {
+                    result.add(entity);
+                } else {
+                    //these should go to db.
+                    missing.add(key);
+                }
+            }
+        }
+        if(missing.size() > 0) {
+            //for some, go to db.
+            QueryBuilder<T> qb = queryBuilder();
+            result.addAll(qb.where(getPkProperty().in(missing)).list());
+        }
+        return result;
+    }
+
     public T loadByRowId(long rowId) {
         String[] idArray = new String[] { Long.toString(rowId) };
         Cursor cursor = db.rawQuery(statements.getSelectByRowId(), idArray);
