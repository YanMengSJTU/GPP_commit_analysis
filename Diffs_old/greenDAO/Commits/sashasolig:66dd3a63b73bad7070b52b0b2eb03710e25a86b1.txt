diff --git a/DaoGenerator/build.gradle b/DaoGenerator/build.gradle
index 5a5efd4f..dce0f3af 100644
--- a/DaoGenerator/build.gradle
+++ b/DaoGenerator/build.gradle
@@ -5,17 +5,24 @@ task wrapper(type: Wrapper) {
 
 buildscript {
     repositories {
+        mavenLocal()
         mavenCentral()
     }
 
     dependencies {
         classpath 'com.android.tools.build:gradle:0.8+'
+        classpath 'com.path.android.build:gradle:1.2.0'
     }
 }
 
 apply plugin: 'java'
-apply plugin: 'maven'
+apply plugin: 'pathmaven'
 
+pathmaven {
+    groupId "de.greenrobot.dao"
+    artifactId "generator"
+    version "1.2"
+}
 
 repositories {
     maven { url 'http://repo1.maven.org/maven2' }
@@ -48,30 +55,3 @@ dependencies {
 // }
 // 
 // artifacts.add('archives', tasks["libraryJar"]);
-
-def deployToProd = hasProperty("pathMaven.deployToProd") && project.ext["pathMaven.deployToProd"].toBoolean()
-println "will deploy to prod?" + deployToProd
-
-uploadArchives {
-    repositories {
-        mavenDeployer {
-            if(deployToProd) {
-                snapshotRepository(url: project.ext["pathMaven.repo.snapshots"]) {
-                    authentication(userName: project.ext["pathMaven.username"], password: project.ext["pathMaven.password"]);
-                }
-
-                repository(url: project.ext["pathMaven.repo.releases"]) {
-                    authentication(userName: project.ext["pathMaven.username"], password: project.ext["pathMaven.password"]);
-                }
-            } else {
-                repository(url: mavenLocal().getUrl())
-            }
-
-            pom.project {
-                groupId 'de.greenrobot.dao'
-                artifactId 'generator'
-                version '1.1-SNAPSHOT'
-            }
-        }
-    }
-}
diff --git a/DaoGenerator/src-template/dao-master.ftl b/DaoGenerator/src-template/dao-master.ftl
index b22d6284..e6c97e74 100644
--- a/DaoGenerator/src-template/dao-master.ftl
+++ b/DaoGenerator/src-template/dao-master.ftl
@@ -17,7 +17,7 @@ You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
-package ${schema.defaultJavaPackageDao};
+package ${schema.javaPackageMasterSession};
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
@@ -28,7 +28,9 @@ import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.IdentityScopeType;
 
 <#list schema.entities as entity>
+<#if (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp))>
 import ${entity.javaPackageDao}.${entity.classNameDao};
+</#if>
 </#list>
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
@@ -41,7 +43,7 @@ public class DaoMaster extends AbstractDaoMaster {
     /** Creates underlying database table using DAOs. */
     public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
 <#list schema.entities as entity>
-<#if !entity.skipTableCreation>
+<#if (!entity.skipTableCreation && (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp)))>
         ${entity.classNameDao}.createTable(db, ifNotExists);
 </#if>
 </#list>
@@ -50,7 +52,7 @@ public class DaoMaster extends AbstractDaoMaster {
     /** Drops underlying database table using DAOs. */
     public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
 <#list schema.entities as entity>
-<#if !entity.skipTableCreation>
+<#if (!entity.skipTableCreation && (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp)))>
         ${entity.classNameDao}.dropTable(db, ifExists);
 </#if>
 </#list>
@@ -86,7 +88,9 @@ public class DaoMaster extends AbstractDaoMaster {
     public DaoMaster(SQLiteDatabase db) {
         super(db, SCHEMA_VERSION);
 <#list schema.entities as entity>
+<#if (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp))>
         registerDaoClass(${entity.classNameDao}.class);
+</#if>
 </#list>
     }
 
diff --git a/DaoGenerator/src-template/dao-session.ftl b/DaoGenerator/src-template/dao-session.ftl
index 26da2aa7..ea371be3 100644
--- a/DaoGenerator/src-template/dao-session.ftl
+++ b/DaoGenerator/src-template/dao-session.ftl
@@ -17,7 +17,7 @@ You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
-package ${schema.defaultJavaPackageDao};
+package ${schema.javaPackageMasterSession};
 
 import android.database.sqlite.SQLiteDatabase;
 
@@ -29,11 +29,15 @@ import de.greenrobot.dao.AbstractDaoSession;
 import de.greenrobot.dao.IdentityScopeType;
 
 <#list schema.entities as entity>
+<#if (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp))>
 import ${entity.javaPackage}.${entity.className};
+</#if>
 </#list>
 
 <#list schema.entities as entity>
+<#if (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp))>
 import ${entity.javaPackageDao}.${entity.classNameDao};
+</#if>
 </#list>
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
@@ -46,11 +50,15 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
 public class DaoSession extends AbstractDaoSession {
 
 <#list schema.entities as entity>
+<#if (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp))>
     private final DaoConfig ${entity.classNameDao?uncap_first}Config;
+</#if>
 </#list>
 
 <#list schema.entities as entity>
+<#if (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp))>
     private final ${entity.classNameDao} ${entity.classNameDao?uncap_first};
+</#if>
 </#list>
 
     public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
@@ -58,37 +66,47 @@ public class DaoSession extends AbstractDaoSession {
         super(db);
 
 <#list schema.entities as entity>
+<#if (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp))>
         ${entity.classNameDao?uncap_first}Config = daoConfigMap.get(${entity.classNameDao}.class).clone();
         ${entity.classNameDao?uncap_first}Config.initIdentityScope(type);
-
+</#if>
 </#list>
 <#list schema.entities as entity>
+<#if (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp))>
         ${entity.classNameDao?uncap_first} = new ${entity.classNameDao}<#--
 -->(${entity.classNameDao?uncap_first}Config, this);
+</#if>
 </#list>
 
 <#list schema.entities as entity>
+<#if (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp))>
         registerDao(${entity.className}.class, ${entity.classNameDao?uncap_first});
+</#if>
 </#list>
     }
 
     public void clear() {
 <#list schema.entities as entity>
+<#if (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp))>
         ${entity.classNameDao?uncap_first}Config.getIdentityScope().clear();
+</#if>
 </#list>
     }
 
     public void deleteAllData() {
 <#list schema.entities as entity>
+<#if (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp))>
         ${entity.classNameDao?uncap_first}.deleteAll();
+</#if>
 </#list>
     }
 
 
 <#list schema.entities as entity>
+<#if (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp))>
     public ${entity.classNameDao} get${entity.classNameDao?cap_first}() {
         return ${entity.classNameDao?uncap_first};
     }
-
+</#if>
 </#list>
 }
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index a3a41652..1d862671 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -53,8 +53,8 @@ import de.greenrobot.dao.Query;
 import de.greenrobot.dao.QueryBuilder;
 </#if>
 
-<#if entity.javaPackageDao != schema.defaultJavaPackageDao>
-import ${schema.defaultJavaPackageDao}.DaoSession;
+<#if entity.javaPackageDao != schema.javaPackageMasterSession>
+import ${schema.javaPackageMasterSession}.DaoSession;
 
 </#if>
 <#if entity.additionalImportsDao?has_content>
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index 75c40276..78939773 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -103,26 +103,31 @@ public void generateAll(Schema schema, String outDir, String outDirModel, String
 
         System.out.println("Processing schema version " + schema.getVersion() + "...");
 
+        String generateForApp = schema.getGenerateForApp();
+
         List<Entity> entities = schema.getEntities();
         for (Entity entity : entities) {
-            generate(templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(), schema, entity);
-            if (!entity.isProtobuf() && !entity.isSkipGeneration()) {
-                generate(templateEntity, outDirModelFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
-                generate(templateEntityBase, outDirFile, entity.getJavaPackage(), entity.getClassNameBase(), schema, entity);
-            }
-            if (outDirTestFile != null && !entity.isSkipGenerationTest()) {
-                String javaPackageTest = entity.getJavaPackageTest();
-                String classNameTest = entity.getClassNameTest();
-                File javaFilename = toJavaFilename(outDirTestFile, javaPackageTest, classNameTest);
-                if (!javaFilename.exists()) {
-                    generate(templateDaoUnitTest, outDirTestFile, javaPackageTest, classNameTest, schema, entity);
-                } else {
-                    System.out.println("Skipped " + javaFilename.getCanonicalPath());
+            if ((generateForApp != null && entity.getOnlyForApps().contains(generateForApp))
+                || (generateForApp == null && entity.getOnlyForApps().isEmpty())) {
+                generate(templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(), schema, entity);
+                if (!entity.isProtobuf() && !entity.isSkipGeneration()) {
+                    generate(templateEntity, outDirModelFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
+                    generate(templateEntityBase, outDirFile, entity.getJavaPackage(), entity.getClassNameBase(), schema, entity);
+                }
+                if (outDirTestFile != null && !entity.isSkipGenerationTest()) {
+                    String javaPackageTest = entity.getJavaPackageTest();
+                    String classNameTest = entity.getClassNameTest();
+                    File javaFilename = toJavaFilename(outDirTestFile, javaPackageTest, classNameTest);
+                    if (!javaFilename.exists()) {
+                        generate(templateDaoUnitTest, outDirTestFile, javaPackageTest, classNameTest, schema, entity);
+                    } else {
+                        System.out.println("Skipped " + javaFilename.getCanonicalPath());
+                    }
                 }
             }
         }
-        generate(templateDaoMaster, outDirFile, schema.getDefaultJavaPackageDao(), "DaoMaster", schema, null);
-        generate(templateDaoSession, outDirFile, schema.getDefaultJavaPackageDao(), "DaoSession", schema, null);
+        generate(templateDaoMaster, outDirFile, schema.getJavaPackageMasterSession(), "DaoMaster", schema, null);
+        generate(templateDaoSession, outDirFile, schema.getJavaPackageMasterSession(), "DaoSession", schema, null);
 
         long time = System.currentTimeMillis() - start;
         System.out.println("Processed " + entities.size() + " entities in " + time + "ms");
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index 70575492..5304498f 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -81,6 +81,8 @@
     private Boolean active;
     private Boolean hasKeepSections;
 
+    private final List<String> onlyForApps = new ArrayList<String>();
+
     Entity(Schema schema, String className) {
         this.schema = schema;
         this.className = className;
@@ -746,4 +748,12 @@ public void validatePropertyExists(Property property) {
     public String toString() {
         return "Entity " + className + " (package: " + javaPackage + ")";
     }
+
+    public List<String> getOnlyForApps() {
+        return onlyForApps;
+    }
+
+    public void addOnlyForApp(String app) {
+        onlyForApps.add(app);
+    }
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
index c7c877f2..6399578f 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
@@ -32,6 +32,7 @@
     private final String defaultJavaPackage;
     private String defaultJavaPackageDao;
     private String defaultJavaPackageTest;
+    private String javaPackageMasterSession;
     private final List<Entity> entities;
     private Map<PropertyType, String> propertyToDbType;
     private Map<PropertyType, String> propertyToJavaTypeNotNull;
@@ -39,6 +40,8 @@
     private boolean hasKeepSectionsByDefault;
     private boolean useActiveEntitiesByDefault;
 
+    private String generateForApp;
+
     public Schema(int version, String defaultJavaPackage) {
         this.version = version;
         this.defaultJavaPackage = defaultJavaPackage;
@@ -159,6 +162,14 @@ public void setDefaultJavaPackageTest(String defaultJavaPackageTest) {
         this.defaultJavaPackageTest = defaultJavaPackageTest;
     }
 
+    public String getJavaPackageMasterSession() {
+        return javaPackageMasterSession;
+    }
+
+    public void setJavaPackageMasterSession(String javaPackageMasterSession) {
+        this.javaPackageMasterSession = javaPackageMasterSession;
+    }
+
     public List<Entity> getEntities() {
         return entities;
     }
@@ -178,6 +189,9 @@ void init2ndPass() {
         if (defaultJavaPackageTest == null) {
             defaultJavaPackageTest = defaultJavaPackageDao;
         }
+        if (javaPackageMasterSession == null) {
+            javaPackageMasterSession = defaultJavaPackageDao;
+        }
         for (Entity entity : entities) {
             entity.init2ndPass();
         }
@@ -189,4 +203,11 @@ void init3ndPass() {
         }
     }
 
+    public String getGenerateForApp() {
+        return generateForApp;
+    }
+
+    public void setGenerateForApp(String generateForApp) {
+        this.generateForApp = generateForApp;
+    }
 }
