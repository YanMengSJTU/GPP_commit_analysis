diff --git a/DaoCore/build.gradle b/DaoCore/build.gradle
index 0e86d842..f7e0a8e0 100644
--- a/DaoCore/build.gradle
+++ b/DaoCore/build.gradle
@@ -1,6 +1,4 @@
 apply plugin: 'java'
-apply plugin: 'maven'
-apply plugin: 'signing'
 
 group = 'org.greenrobot'
 archivesBaseName = 'greendao'
@@ -19,27 +17,11 @@ dependencies {
     compileOnly 'com.google.android:annotations:4.1.1.4'
     compileOnly 'com.google.android:support-v4:r7'
 
-    compileOnly 'io.reactivex:rxjava:1.1.8'
+    compileOnly 'io.reactivex.rxjava2:rxjava:2.2.0'
 
     compileOnly files('libs/sqlcipher.jar')
 }
 
-javadoc {
-    failOnError = false
-    title = " greenDAO ${version} API"
-    options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2011-2017 <a href="http://greenrobot.org/">greenrobot.org</a>. All Rights Reserved.</i>'
-
-    excludes = ['org/greenrobot/dao/internal', 'org/greenrobot/dao/Internal*']
-    def srcApi = project(':greendao-api').file('src/main/java/')
-    if (!srcApi.directory) throw new GradleScriptException("Not a directory: ${srcApi}", null)
-    source += srcApi
-    doLast {
-        copy {
-            from '../javadoc-style'
-            into "build/docs/javadoc/"
-        }
-    }
-}
 
 task javadocJar(type: Jar, dependsOn: javadoc) {
     classifier = 'javadoc'
@@ -55,24 +37,4 @@ artifacts {
     archives jar
     archives javadocJar
     archives sourcesJar
-}
-
-uploadArchives {
-    repositories {
-        mavenDeployer {
-            // Basic definitions are defined in root project
-            pom.project {
-                name 'greenDAO'
-                description 'greenDAO is a light and fast ORM for Android'
-
-                licenses {
-                    license {
-                        name 'The Apache Software License, Version 2.0'
-                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
-                        distribution 'repo'
-                    }
-                }
-            }
-        }
-    }
 }
\ No newline at end of file
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDao.java b/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDao.java
index de08fe2c..fa773e25 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDao.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDao.java
@@ -39,7 +39,7 @@
 import java.util.Collection;
 import java.util.List;
 
-import rx.schedulers.Schedulers;
+import io.reactivex.schedulers.Schedulers;
 
 /**
  * Base class for all DAOs: Implements entity operations like insert, load, delete, and query.
@@ -52,11 +52,11 @@
  */
 /*
  * When operating on TX, statements, or identity scope the following locking order must be met to avoid deadlocks:
- * 
+ *
  * 1.) If not inside a TX already, begin a TX to acquire a DB connection (connection is to be handled like a lock)
- * 
+ *
  * 2.) The DatabaseStatement
- * 
+ *
  * 3.) identityScope
  */
 public abstract class AbstractDao<T, K> {
@@ -172,13 +172,17 @@ protected T loadUnique(Cursor cursor) {
         return loadCurrent(cursor, 0, true);
     }
 
-    /** Loads all available entities from the database. */
+    /**
+     * Loads all available entities from the database.
+     */
     public List<T> loadAll() {
         Cursor cursor = db.rawQuery(statements.getSelectAll(), null);
         return loadAllAndCloseCursor(cursor);
     }
 
-    /** Detaches an entity from the identity scope (session). Subsequent query results won't return this object. */
+    /**
+     * Detaches an entity from the identity scope (session). Subsequent query results won't return this object.
+     */
     public boolean detach(T entity) {
         if (identityScope != null) {
             K key = getKeyVerified(entity);
@@ -448,7 +452,9 @@ public void saveInTx(Iterable<T> entities) {
         }
     }
 
-    /** Reads all available rows from the given cursor and returns a list of entities. */
+    /**
+     * Reads all available rows from the given cursor and returns a list of entities.
+     */
     protected List<T> loadAllFromCursor(Cursor cursor) {
         int count = cursor.getCount();
         if (count == 0) {
@@ -528,7 +534,9 @@ private CursorWindow moveToNextUnlocked(Cursor cursor) {
         }
     }
 
-    /** Internal use only. Considers identity scope. */
+    /**
+     * Internal use only. Considers identity scope.
+     */
     final protected T loadCurrent(Cursor cursor, int offset, boolean lock) {
         if (identityScopeLong != null) {
             if (offset != 0) {
@@ -581,12 +589,16 @@ final protected T loadCurrent(Cursor cursor, int offset, boolean lock) {
         }
     }
 
-    /** Internal use only. Considers identity scope. */
+    /**
+     * Internal use only. Considers identity scope.
+     */
     final protected <O> O loadCurrentOther(AbstractDao<O, ?> dao, Cursor cursor, int offset) {
         return dao.loadCurrent(cursor, offset, /* TODO check this */true);
     }
 
-    /** A raw-style query where you can pass any WHERE clause and arguments. */
+    /**
+     * A raw-style query where you can pass any WHERE clause and arguments.
+     */
     public List<T> queryRaw(String where, String... selectionArg) {
         Cursor cursor = db.rawQuery(statements.getSelectAll() + where, selectionArg);
         return loadAllAndCloseCursor(cursor);
@@ -619,14 +631,18 @@ public void deleteAll() {
         }
     }
 
-    /** Deletes the given entity from the database. Currently, only single value PK entities are supported. */
+    /**
+     * Deletes the given entity from the database. Currently, only single value PK entities are supported.
+     */
     public void delete(T entity) {
         assertSinglePk();
         K key = getKeyVerified(entity);
         deleteByKey(key);
     }
 
-    /** Deletes an entity with the given PK from the database. Currently, only single value PK entities are supported. */
+    /**
+     * Deletes an entity with the given PK from the database. Currently, only single value PK entities are supported.
+     */
     public void deleteByKey(K key) {
         assertSinglePk();
         DatabaseStatement stmt = statements.getDeleteStatement();
@@ -742,7 +758,9 @@ public void deleteByKeyInTx(K... keys) {
         deleteInTxInternal(null, Arrays.asList(keys));
     }
 
-    /** Resets all locally changed properties of the entity by reloading the values from the database. */
+    /**
+     * Resets all locally changed properties of the entity by reloading the values from the database.
+     */
     public void refresh(T entity) {
         assertSinglePk();
         K key = getKeyVerified(entity);
@@ -922,7 +940,9 @@ public long count() {
         return statements.getCountStatement().simpleQueryForLong();
     }
 
-    /** See {@link #getKey(Object)}, but guarantees that the returned key is never null (throws if null). */
+    /**
+     * See {@link #getKey(Object)}, but guarantees that the returned key is never null (throws if null).
+     */
     protected K getKeyVerified(T entity) {
         K key = getKey(entity);
         if (key == null) {
@@ -964,22 +984,32 @@ protected K getKeyVerified(T entity) {
         return rxDao;
     }
 
-    /** Gets the SQLiteDatabase for custom database access. Not needed for greenDAO entities. */
+    /**
+     * Gets the SQLiteDatabase for custom database access. Not needed for greenDAO entities.
+     */
     public Database getDatabase() {
         return db;
     }
 
-    /** Reads the values from the current position of the given cursor and returns a new entity. */
+    /**
+     * Reads the values from the current position of the given cursor and returns a new entity.
+     */
     abstract protected T readEntity(Cursor cursor, int offset);
 
 
-    /** Reads the key from the current position of the given cursor, or returns null if there's no single-value key. */
+    /**
+     * Reads the key from the current position of the given cursor, or returns null if there's no single-value key.
+     */
     abstract protected K readKey(Cursor cursor, int offset);
 
-    /** Reads the values from the current position of the given cursor into an existing entity. */
+    /**
+     * Reads the values from the current position of the given cursor into an existing entity.
+     */
     abstract protected void readEntity(Cursor cursor, T entity, int offset);
 
-    /** Binds the entity's values to the statement. Make sure to synchronize the statement outside of the method. */
+    /**
+     * Binds the entity's values to the statement. Make sure to synchronize the statement outside of the method.
+     */
     abstract protected void bindValues(DatabaseStatement stmt, T entity);
 
     /**
@@ -1006,7 +1036,9 @@ public Database getDatabase() {
      */
     abstract protected boolean hasKey(T entity);
 
-    /** Returns true if the Entity class can be updated, e.g. for setting the PK after insert. */
+    /**
+     * Returns true if the Entity class can be updated, e.g. for setting the PK after insert.
+     */
     abstract protected boolean isEntityUpdateable();
 
 }
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDaoSession.java b/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDaoSession.java
index f8636bb6..65f8ae69 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDaoSession.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/AbstractDaoSession.java
@@ -28,7 +28,8 @@
 import org.greenrobot.greendao.query.QueryBuilder;
 import org.greenrobot.greendao.rx.RxTransaction;
 
-import rx.schedulers.Schedulers;
+import io.reactivex.schedulers.Schedulers;
+
 
 /**
  * DaoSession gives you access to your DAOs, offers convenient persistence methods, and also serves as a session cache.<br>
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/query/Query.java b/DaoCore/src/main/java/org/greenrobot/greendao/query/Query.java
index 6176f3bc..3e5b3889 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/query/Query.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/query/Query.java
@@ -26,7 +26,7 @@
 import java.util.Date;
 import java.util.List;
 
-import rx.schedulers.Schedulers;
+import io.reactivex.schedulers.Schedulers;
 
 /**
  * A repeatable query returning entities.
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxBase.java b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxBase.java
index 47aa355c..0e6c2ad4 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxBase.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxBase.java
@@ -21,8 +21,9 @@
 
 import java.util.concurrent.Callable;
 
-import rx.Observable;
-import rx.Scheduler;
+import io.reactivex.Observable;
+import io.reactivex.Scheduler;
+
 
 /**
  * Base functionality for Rx, e.g. default scheduler.
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxDao.java b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxDao.java
index 229b3ce2..385e520d 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxDao.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxDao.java
@@ -22,14 +22,15 @@
 import java.util.List;
 import java.util.concurrent.Callable;
 
-import rx.Observable;
-import rx.Scheduler;
+import io.reactivex.Observable;
+import io.reactivex.Scheduler;
+
 
 /**
  * Like {@link AbstractDao} but with Rx support. Most methods from AbstractDao are present here, but will return an
  * {@link Observable}. Modifying operations return the given entities, so they can be further processed in Rx.
  * <p>
- * Instances of RxDao may have an default {@link rx.Scheduler}, which is used to configure returned observables with
+ * Instances of RxDao may have an default {@link io.reactivex.Scheduler}, which is used to configure returned observables with
  * {@link Observable#subscribeOn(Scheduler)} (see {@link AbstractDao#rxPlain()}, which uses the IO scheduler).
  *
  * Note: DO NOT call more than one data modification operation when you can use a transaction instead (see
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxQuery.java b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxQuery.java
index cc01be35..4de1625d 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxQuery.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxQuery.java
@@ -23,11 +23,13 @@
 import java.util.List;
 import java.util.concurrent.Callable;
 
-import rx.Observable;
-import rx.Observable.OnSubscribe;
-import rx.Scheduler;
-import rx.Subscriber;
-import rx.exceptions.Exceptions;
+import io.reactivex.Observable;
+import io.reactivex.ObservableEmitter;
+import io.reactivex.ObservableOnSubscribe;
+import io.reactivex.Scheduler;
+import io.reactivex.annotations.NonNull;
+import io.reactivex.exceptions.Exceptions;
+
 
 /**
  * Gets {@link org.greenrobot.greendao.query.Query} results in Rx fashion.
@@ -80,27 +82,27 @@ public T call() throws Exception {
      * per-entity delivery through Rx.
      */
     public Observable<T> oneByOne() {
-        Observable<T> observable = Observable.create(new OnSubscribe<T>() {
+        Observable<T> observable = Observable.create(new ObservableOnSubscribe<T>() {
             @Override
-            public void call(Subscriber<? super T> subscriber) {
+            public void subscribe(@NonNull ObservableEmitter<T> emitter) {
                 try {
                     LazyList<T> lazyList = query.forCurrentThread().listLazyUncached();
                     try {
                         for (T entity : lazyList) {
-                            if (subscriber.isUnsubscribed()) {
+                            if (emitter.isDisposed()) {
                                 break;
                             }
-                            subscriber.onNext(entity);
+                            emitter.onNext(entity);
                         }
                     } finally {
                         lazyList.close();
                     }
-                    if (!subscriber.isUnsubscribed()) {
-                        subscriber.onCompleted();
+                    if (!emitter.isDisposed()) {
+                        emitter.onComplete();
                     }
                 } catch (Throwable e) {
                     Exceptions.throwIfFatal(e);
-                    subscriber.onError(e);
+                    emitter.onError(e);
                 }
             }
         });
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxTransaction.java b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxTransaction.java
index 8ef01d33..145ca141 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxTransaction.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxTransaction.java
@@ -21,8 +21,9 @@
 
 import java.util.concurrent.Callable;
 
-import rx.Observable;
-import rx.Scheduler;
+import io.reactivex.Observable;
+import io.reactivex.Scheduler;
+
 
 /**
  * Allows to do transactions using Rx Observable.
diff --git a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxUtils.java b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxUtils.java
index 0754754f..d5a3f460 100644
--- a/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxUtils.java
+++ b/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxUtils.java
@@ -20,15 +20,14 @@
 
 import java.util.concurrent.Callable;
 
-import rx.Observable;
-import rx.functions.Func0;
+import io.reactivex.Observable;
 
 @Internal
 class RxUtils {
     /** As of RxJava 1.1.7, Observable.fromCallable is still @Beta, so just in case... */
     @Internal
     static <T> Observable<T> fromCallable(final Callable<T> callable) {
-        return Observable.defer(new Func0<Observable<T>>() {
+        return Observable.defer(new Callable<Observable<T>>() {
 
             @Override
             public Observable<T> call() {
diff --git a/DaoGenerator/build.gradle b/DaoGenerator/build.gradle
index 128826cc..3df85e78 100644
--- a/DaoGenerator/build.gradle
+++ b/DaoGenerator/build.gradle
@@ -69,24 +69,4 @@ artifacts {
     archives jar
     archives javadocJar
     archives sourcesJar
-}
-
-uploadArchives {
-    repositories {
-        mavenDeployer {
-            // Basic definitions are defined in root project
-            pom.project {
-                name 'greenDAO Generator'
-                description 'Code generator for greenDAO, the light and fast ORM for Android'
-
-                licenses {
-                    license {
-                        name 'GNU General Public License, Version 3'
-                        url 'http://www.gnu.org/licenses/gpl.txt'
-                        distribution 'repo'
-                    }
-                }
-            }
-        }
-    }
 }
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index 8a526a49..d085cef1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,7 +15,7 @@ ext {
 
     // common dependencies for Android projects (not to be used in example projects for better copy and paste)
     dep = [
-            androidPlugin: 'com.android.tools.build:gradle:3.2.1',
+            androidPlugin: 'com.android.tools.build:gradle:3.3.2',
             greendaoPlugin: 'org.greenrobot:greendao-gradle-plugin:3.2.2'
     ]
 }
@@ -29,8 +29,6 @@ if (JavaVersion.current().isJava8Compatible()) {
 }
 
 subprojects {
-    apply plugin: 'maven'
-    apply plugin: 'signing'
 
     repositories {
         mavenCentral()
@@ -43,73 +41,8 @@ subprojects {
     }
 
     dependencies {
-        deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
-    }
-
-    signing {
-        if (project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&
-                project.hasProperty('signing.secretKeyRingFile')) {
-            sign configurations.archives
-        } else {
-            println "Signing information missing/incomplete for ${project.name}"
-        }
+        
     }
 
     // Use afterEvaluate or all dependencies will be lost in the generated POM
-    afterEvaluate {
-        uploadArchives {
-            repositories {
-                mavenDeployer {
-                    def isSnapshot = version.endsWith('-SNAPSHOT')
-                    def sonatypeRepositoryUrl = isSnapshot ?
-                            "https://oss.sonatype.org/content/repositories/snapshots/"
-                            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
-                    if (project.hasProperty('preferedRepo') && preferedRepo == 'local') {
-                        repository url: repositories.mavenLocal().url
-                    } else if (project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername')
-                            && project.hasProperty('preferedPassword')) {
-                        configuration = configurations.deployerJars
-                        repository(url: preferedRepo) {
-                            authentication(userName: preferedUsername, password: preferedPassword)
-                        }
-                    } else if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
-                        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
-                        repository(url: sonatypeRepositoryUrl) {
-                            authentication(userName: sonatypeUsername, password: sonatypePassword)
-                        }
-                    } else {
-                        println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}"
-                    }
-
-                    pom.project {
-                        packaging 'jar'
-                        url 'http://greenrobot.org/greendao'
-
-                        scm {
-                            url 'https://github.com/greenrobot/greenDAO'
-                            connection 'scm:git@github.com:greenrobot/greenDAO.git'
-                            developerConnection 'scm:git@github.com:greenrobot/greenDAO.git'
-                        }
-
-                        developers {
-                            developer {
-                                id 'greenrobot'
-                                name 'greenrobot'
-                            }
-                        }
-
-                        issueManagement {
-                            system 'GitHub Issues'
-                            url 'https://github.com/greenrobot/greenDAO/issues'
-                        }
-
-                        organization {
-                            name 'greenrobot'
-                            url 'http://greenrobot.org'
-                        }
-                    }
-                }
-            }
-        }
-    }
 }
diff --git a/examples/DaoExample/build.gradle b/examples/DaoExample/build.gradle
index 2f7a5f2f..615980dd 100644
--- a/examples/DaoExample/build.gradle
+++ b/examples/DaoExample/build.gradle
@@ -6,7 +6,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.2.1'
+        classpath 'com.android.tools.build:gradle:3.3.2'
         classpath 'org.greenrobot:greendao-gradle-plugin:3.2.2'
     }
 }
@@ -42,4 +42,3 @@ dependencies {
     implementation 'com.android.support:recyclerview-v7:27.1.1'
 }
 
-uploadArchives.enabled = false
diff --git a/examples/RxDaoExample/build.gradle b/examples/RxDaoExample/build.gradle
index 7aaaa026..1814682d 100644
--- a/examples/RxDaoExample/build.gradle
+++ b/examples/RxDaoExample/build.gradle
@@ -6,7 +6,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.2.1'
+        classpath 'com.android.tools.build:gradle:3.3.2'
         classpath 'org.greenrobot:greendao-gradle-plugin:3.2.2'
     }
 }
@@ -37,11 +37,9 @@ dependencies {
     // implementation 'net.zetetic:android-database-sqlcipher:3.5.6'
 
     implementation 'com.jakewharton.rxbinding:rxbinding:1.0.1'
-    implementation 'io.reactivex:rxandroid:1.2.1'
-    implementation 'io.reactivex:rxjava:1.3.0'
+    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
+    implementation 'io.reactivex.rxjava2:rxjava:2.2.0'
 
     implementation 'com.android.support:appcompat-v7:27.1.1'
     implementation 'com.android.support:recyclerview-v7:27.1.1'
 }
-
-uploadArchives.enabled = false
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 6828f128..e2b05e41 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Tue Apr 17 14:24:16 CEST 2018
+#Thu Mar 21 18:40:52 GMT+08:00 2019
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.1-all.zip
diff --git a/greendao-api/build.gradle b/greendao-api/build.gradle
index 58372fe5..a531a92d 100644
--- a/greendao-api/build.gradle
+++ b/greendao-api/build.gradle
@@ -32,24 +32,4 @@ artifacts {
     archives jar
     archives javadocJar
     archives sourcesJar
-}
-
-uploadArchives {
-    repositories {
-        mavenDeployer {
-            // Basic definitions are defined in root project
-            pom.project {
-                name 'greenDAO API'
-                description 'greenDAO is a light and fast ORM for Android'
-
-                licenses {
-                    license {
-                        name 'The Apache Software License, Version 2.0'
-                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
-                        distribution 'repo'
-                    }
-                }
-            }
-        }
-    }
 }
\ No newline at end of file
diff --git a/tests/DaoTest/build.gradle b/tests/DaoTest/build.gradle
index cb9cdda1..895c801f 100644
--- a/tests/DaoTest/build.gradle
+++ b/tests/DaoTest/build.gradle
@@ -37,7 +37,6 @@ dependencies {
     testImplementation 'org.mockito:mockito-core:1.10.19'
 
     androidTestImplementation 'net.zetetic:android-database-sqlcipher:3.5.6'
-    androidTestImplementation 'io.reactivex:rxjava:1.3.0'
+    androidTestImplementation 'io.reactivex.rxjava2:rxjava:2.2.0'
 }
 
-uploadArchives.enabled = false
diff --git a/tests/DaoTestBase/build.gradle b/tests/DaoTestBase/build.gradle
index 3d596adb..162abe30 100644
--- a/tests/DaoTestBase/build.gradle
+++ b/tests/DaoTestBase/build.gradle
@@ -7,5 +7,3 @@ dependencies {
     compile project(':DaoCore')
     compileOnly 'com.google.android:android:4.1.1.4'
 }
-
-uploadArchives.enabled = false
\ No newline at end of file
diff --git a/tests/DaoTestEntityAnnotation/build.gradle b/tests/DaoTestEntityAnnotation/build.gradle
index 933f8ca0..bcc15b5a 100644
--- a/tests/DaoTestEntityAnnotation/build.gradle
+++ b/tests/DaoTestEntityAnnotation/build.gradle
@@ -42,5 +42,3 @@ greendao {
 dependencies {
     implementation project(':DaoCore')
 }
-
-uploadArchives.enabled = false
\ No newline at end of file
diff --git a/tests/DaoTestGenerator/build.gradle b/tests/DaoTestGenerator/build.gradle
index cfdc0657..cc3e41b4 100644
--- a/tests/DaoTestGenerator/build.gradle
+++ b/tests/DaoTestGenerator/build.gradle
@@ -15,5 +15,3 @@ sourceSets {
 dependencies {
     compile project(':DaoGenerator')
 }
-
-uploadArchives.enabled = false
\ No newline at end of file
diff --git a/tests/DaoTestPerformance/build.gradle b/tests/DaoTestPerformance/build.gradle
index c7e5ff8e..d8bf5ae9 100644
--- a/tests/DaoTestPerformance/build.gradle
+++ b/tests/DaoTestPerformance/build.gradle
@@ -32,5 +32,3 @@ android {
         testInstrumentationRunner "android.test.InstrumentationTestRunner"
     }
 }
-
-uploadArchives.enabled = false
