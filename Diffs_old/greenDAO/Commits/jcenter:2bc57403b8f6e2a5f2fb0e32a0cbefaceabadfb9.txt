diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/Customer.java b/DaoExample/src/main/java/de/greenrobot/daoexample/Customer.java
index 48de8e71..9c3032c7 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/Customer.java
+++ b/DaoExample/src/main/java/de/greenrobot/daoexample/Customer.java
@@ -110,16 +110,12 @@ public void merge(Customer model){
         if(this.id != model.getId()){
             return;
         }
-
         if(model.getId() != null){
             this.id = model.getId();
         }
-
-
         if(model.getName() != null){
             this.name = model.getName();
         }
-
     }
 
 }
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/CustomerDao.java b/DaoExample/src/main/java/de/greenrobot/daoexample/CustomerDao.java
index f9df3d31..4bcb8416 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/CustomerDao.java
+++ b/DaoExample/src/main/java/de/greenrobot/daoexample/CustomerDao.java
@@ -117,4 +117,19 @@ protected boolean isEntityUpdateable() {
         return true;
     }
     
+
+
+    public Customer saveToDb(Customer model){
+        if(model == null){
+            return;
+        }
+        Customer dbModel = this.load(this.getKey(model));
+        if(dbModel != null){
+            dbModel.merge(model);
+        }else{
+            dbModel = model;
+        }
+        this.insertOrReplace(dbModel);
+        return dbModel;
+    }
 }
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/Note.java b/DaoExample/src/main/java/de/greenrobot/daoexample/Note.java
index e05302ca..5198dd53 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/Note.java
+++ b/DaoExample/src/main/java/de/greenrobot/daoexample/Note.java
@@ -14,6 +14,13 @@
     private String text;
     private String comment;
     private java.util.Date date;
+    private Boolean boo;
+    private Byte bit;
+    private java.util.Date dat;
+    private Double dou;
+    private Float flo;
+    private Long lon;
+    private Integer in;
 
     /** Used to resolve relations */
     private transient DaoSession daoSession;
@@ -29,11 +36,18 @@ public Note(Long id) {
         this.id = id;
     }
 
-    public Note(Long id, String text, String comment, java.util.Date date) {
+    public Note(Long id, String text, String comment, java.util.Date date, Boolean boo, Byte bit, java.util.Date dat, Double dou, Float flo, Long lon, Integer in) {
         this.id = id;
         this.text = text;
         this.comment = comment;
         this.date = date;
+        this.boo = boo;
+        this.bit = bit;
+        this.dat = dat;
+        this.dou = dou;
+        this.flo = flo;
+        this.lon = lon;
+        this.in = in;
     }
 
     /** called by internal mechanisms, do not call yourself. */
@@ -76,6 +90,62 @@ public void setDate(java.util.Date date) {
         this.date = date;
     }
 
+    public Boolean getBoo() {
+        return boo;
+    }
+
+    public void setBoo(Boolean boo) {
+        this.boo = boo;
+    }
+
+    public Byte getBit() {
+        return bit;
+    }
+
+    public void setBit(Byte bit) {
+        this.bit = bit;
+    }
+
+    public java.util.Date getDat() {
+        return dat;
+    }
+
+    public void setDat(java.util.Date dat) {
+        this.dat = dat;
+    }
+
+    public Double getDou() {
+        return dou;
+    }
+
+    public void setDou(Double dou) {
+        this.dou = dou;
+    }
+
+    public Float getFlo() {
+        return flo;
+    }
+
+    public void setFlo(Float flo) {
+        this.flo = flo;
+    }
+
+    public Long getLon() {
+        return lon;
+    }
+
+    public void setLon(Long lon) {
+        this.lon = lon;
+    }
+
+    public Integer getIn() {
+        return in;
+    }
+
+    public void setIn(Integer in) {
+        this.in = in;
+    }
+
     /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
     public void delete() {
         if (myDao == null) {
@@ -106,26 +176,39 @@ public void merge(Note model){
         if(this.id != model.getId()){
             return;
         }
-
         if(model.getId() != null){
             this.id = model.getId();
         }
-
-
         if(model.getText() != null){
             this.text = model.getText();
         }
-
-
         if(model.getComment() != null){
             this.comment = model.getComment();
         }
-
-
         if(model.getDate() != null){
             this.date = model.getDate();
         }
-
+        if(model.getBoo() != null){
+            this.boo = model.getBoo();
+        }
+        if(model.getBit() != null){
+            this.bit = model.getBit();
+        }
+        if(model.getDat() != null){
+            this.dat = model.getDat();
+        }
+        if(model.getDou() != null){
+            this.dou = model.getDou();
+        }
+        if(model.getFlo() != null){
+            this.flo = model.getFlo();
+        }
+        if(model.getLon() != null){
+            this.lon = model.getLon();
+        }
+        if(model.getIn() != null){
+            this.in = model.getIn();
+        }
     }
 
 }
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/NoteDao.java b/DaoExample/src/main/java/de/greenrobot/daoexample/NoteDao.java
index 1989fe1c..db90ce07 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/NoteDao.java
+++ b/DaoExample/src/main/java/de/greenrobot/daoexample/NoteDao.java
@@ -27,6 +27,13 @@
         public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
         public final static Property Comment = new Property(2, String.class, "comment", false, "COMMENT");
         public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
+        public final static Property Boo = new Property(4, Boolean.class, "boo", false, "BOO");
+        public final static Property Bit = new Property(5, Byte.class, "bit", false, "BIT");
+        public final static Property Dat = new Property(6, java.util.Date.class, "dat", false, "DAT");
+        public final static Property Dou = new Property(7, Double.class, "dou", false, "DOU");
+        public final static Property Flo = new Property(8, Float.class, "flo", false, "FLO");
+        public final static Property Lon = new Property(9, Long.class, "lon", false, "LON");
+        public final static Property In = new Property(10, Integer.class, "in", false, "IN");
     };
 
     private DaoSession daoSession;
@@ -48,7 +55,14 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
                 "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                 "\"TEXT\" TEXT NOT NULL ," + // 1: text
                 "\"COMMENT\" TEXT," + // 2: comment
-                "\"DATE\" INTEGER);"); // 3: date
+                "\"DATE\" INTEGER," + // 3: date
+                "\"BOO\" INTEGER," + // 4: boo
+                "\"BIT\" INTEGER," + // 5: bit
+                "\"DAT\" INTEGER," + // 6: dat
+                "\"DOU\" REAL," + // 7: dou
+                "\"FLO\" REAL," + // 8: flo
+                "\"LON\" INTEGER," + // 9: lon
+                "\"IN\" INTEGER);"); // 10: in
     }
 
     /** Drops the underlying database table. */
@@ -77,6 +91,41 @@ protected void bindValues(SQLiteStatement stmt, Note entity) {
         if (date != null) {
             stmt.bindLong(4, date.getTime());
         }
+ 
+        Boolean boo = entity.getBoo();
+        if (boo != null) {
+            stmt.bindLong(5, boo ? 1L: 0L);
+        }
+ 
+        Byte bit = entity.getBit();
+        if (bit != null) {
+            stmt.bindLong(6, bit);
+        }
+ 
+        java.util.Date dat = entity.getDat();
+        if (dat != null) {
+            stmt.bindLong(7, dat.getTime());
+        }
+ 
+        Double dou = entity.getDou();
+        if (dou != null) {
+            stmt.bindDouble(8, dou);
+        }
+ 
+        Float flo = entity.getFlo();
+        if (flo != null) {
+            stmt.bindDouble(9, flo);
+        }
+ 
+        Long lon = entity.getLon();
+        if (lon != null) {
+            stmt.bindLong(10, lon);
+        }
+ 
+        Integer in = entity.getIn();
+        if (in != null) {
+            stmt.bindLong(11, in);
+        }
     }
 
     @Override
@@ -98,7 +147,14 @@ public Note readEntity(Cursor cursor, int offset) {
             cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
             cursor.getString(offset + 1), // text
             cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comment
-            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // date
+            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date
+            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // boo
+            cursor.isNull(offset + 5) ? null : (byte) cursor.getShort(offset + 5), // bit
+            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // dat
+            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // dou
+            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // flo
+            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // lon
+            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // in
         );
         return entity;
     }
@@ -110,6 +166,13 @@ public void readEntity(Cursor cursor, Note entity, int offset) {
         entity.setText(cursor.getString(offset + 1));
         entity.setComment(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
         entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
+        entity.setBoo(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
+        entity.setBit(cursor.isNull(offset + 5) ? null : (byte) cursor.getShort(offset + 5));
+        entity.setDat(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
+        entity.setDou(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
+        entity.setFlo(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
+        entity.setLon(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
+        entity.setIn(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
      }
     
     /** @inheritdoc */
@@ -135,4 +198,19 @@ protected boolean isEntityUpdateable() {
         return true;
     }
     
+
+
+    public Note saveToDb(Note model){
+        if(model == null){
+            return;
+        }
+        Note dbModel = this.load(this.getKey(model));
+        if(dbModel != null){
+            dbModel.merge(model);
+        }else{
+            dbModel = model;
+        }
+        this.insertOrReplace(dbModel);
+        return dbModel;
+    }
 }
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/Order.java b/DaoExample/src/main/java/de/greenrobot/daoexample/Order.java
index 49990831..ca1ad8bf 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/Order.java
+++ b/DaoExample/src/main/java/de/greenrobot/daoexample/Order.java
@@ -124,21 +124,15 @@ public void merge(Order model){
         if(this.id != model.getId()){
             return;
         }
-
         if(model.getId() != null){
             this.id = model.getId();
         }
-
-
         if(model.getDate() != null){
             this.date = model.getDate();
         }
-
-
-        if(model.getCustomerId() != 0){
+        if(model.getCustomerId() != null){
             this.customerId = model.getCustomerId();
         }
-
     }
 
 }
diff --git a/DaoExample/src/main/java/de/greenrobot/daoexample/OrderDao.java b/DaoExample/src/main/java/de/greenrobot/daoexample/OrderDao.java
index 9cb68bc3..63a44ca6 100644
--- a/DaoExample/src/main/java/de/greenrobot/daoexample/OrderDao.java
+++ b/DaoExample/src/main/java/de/greenrobot/daoexample/OrderDao.java
@@ -240,4 +240,19 @@ public Order loadDeep(Long key) {
         return loadDeepAllAndCloseCursor(cursor);
     }
  
+
+
+    public Order saveToDb(Order model){
+        if(model == null){
+            return;
+        }
+        Order dbModel = this.load(this.getKey(model));
+        if(dbModel != null){
+            dbModel.merge(model);
+        }else{
+            dbModel = model;
+        }
+        this.insertOrReplace(dbModel);
+        return dbModel;
+    }
 }
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index 238a076f..0bc8f89b 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -15,6 +15,8 @@
  */
 package de.greenrobot.daogenerator.gentest;
 
+import java.util.Date;
+
 import de.greenrobot.daogenerator.DaoGenerator;
 import de.greenrobot.daogenerator.Entity;
 import de.greenrobot.daogenerator.Property;
@@ -46,6 +48,16 @@ private static void addNote(Schema schema) {
         note.addStringProperty("text").notNull();
         note.addStringProperty("comment");
         note.addDateProperty("date");
+
+        note.addBooleanProperty("boo");
+        note.addByteProperty("bit");
+        note.addDateProperty("dat");
+        note.addDoubleProperty("dou");
+        note.addFloatProperty("flo");
+        note.addLongProperty("lon");
+        note.addIntProperty("in");
+
+
     }
 
     private static void addCustomerOrder(Schema schema) {
diff --git a/DaoGenerator/build.gradle b/DaoGenerator/build.gradle
index 85a81ebc..ed1c628a 100644
--- a/DaoGenerator/build.gradle
+++ b/DaoGenerator/build.gradle
@@ -174,7 +174,7 @@ ext {
     siteUrl = 'https://github.com/jcenter/greenDAO'
     gitUrl = 'https://github.com/jcenter/greenDAO.git'
 
-    libraryVersion = '3.1.5'
+    libraryVersion = '3.1.7'
 
 
     developerId = 'lijinchao2007'
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 60f7045b..19e82ee4 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -306,4 +306,19 @@ as property>\"${property.columnName}\"<#if property_has_next>,</#if></#list>);")
 <#if entity.toOneRelations?has_content>
     <#include "dao-deep.ftl">
 </#if>
+
+
+    public ${entity.className} saveToDb(${entity.className} model){
+        if(model == null){
+            return null;
+        }
+        ${entity.className} dbModel = this.load(this.getKey(model));
+        if(dbModel != null){
+            dbModel.merge(model);
+        }else{
+            dbModel = model;
+        }
+        this.insertOrReplace(dbModel);
+        return dbModel;
+    }
 }
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 0c984fb4..af732777 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -286,17 +286,9 @@ ${property.javaDocSetter}
             return;
         }
     <#list entity.properties as property>
-
-        <#if property.javaTypeInEntity == "int" || property.javaTypeInEntity == "long" || property.javaTypeInEntity == "short" || property.javaTypeInEntity == "float" || property.javaTypeInEntity == "double" || property.javaTypeInEntity == "Date">
-        if(model.get${property.propertyName?cap_first}() != 0){
-            this.${property.propertyName} = model.get${property.propertyName?cap_first}();
-        }
-        <#else>
         if(model.get${property.propertyName?cap_first}() != null){
             this.${property.propertyName} = model.get${property.propertyName?cap_first}();
         }
-        </#if>
-
     </#list>
     }
 
