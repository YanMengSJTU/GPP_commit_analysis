diff --git a/DaoGenerator/src-template/dao-master.ftl b/DaoGenerator/src-template/dao-master.ftl
index adaffc48..d4d9708e 100644
--- a/DaoGenerator/src-template/dao-master.ftl
+++ b/DaoGenerator/src-template/dao-master.ftl
@@ -91,11 +91,11 @@ public class DaoMaster extends AbstractDaoMaster {
     }
     
     public DaoSession newSession() {
-        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
+        return new DaoSession(db, daoConfigMap);
     }
     
+    /** fix it as wacai app */
     public DaoSession newSession(IdentityScopeType type) {
-        return new DaoSession(db, type, daoConfigMap);
+        return new DaoSession(db, daoConfigMap);
     }
-    
 }
diff --git a/DaoGenerator/src-template/dao-session.ftl b/DaoGenerator/src-template/dao-session.ftl
index e0201a48..7626f05c 100644
--- a/DaoGenerator/src-template/dao-session.ftl
+++ b/DaoGenerator/src-template/dao-session.ftl
@@ -53,13 +53,13 @@ public class DaoSession extends AbstractDaoSession {
     private final ${entity.classNameDao} ${entity.classNameDao?uncap_first};
 </#list>        
 
-    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
+    public DaoSession(SQLiteDatabase db, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
         super(db);
 
 <#list schema.entities as entity>
         ${entity.classNameDao?uncap_first}Config = daoConfigMap.get(${entity.classNameDao}.class).clone();
-        ${entity.classNameDao?uncap_first}Config.initIdentityScope(type);
+        ${entity.classNameDao?uncap_first}Config.initIdentityScope(<#if entity.session>IdentityScopeType.Session<#else>IdentityScopeType.None</#if>);
 
 </#list>        
 <#list schema.entities as entity>
@@ -74,7 +74,9 @@ public class DaoSession extends AbstractDaoSession {
     
     public void clear() {
 <#list schema.entities as entity>
-        ${entity.classNameDao?uncap_first}Config.getIdentityScope().clear();
+		if (${entity.classNameDao?uncap_first}Config.getIdentityScope() != null) {
+			${entity.classNameDao?uncap_first}Config.getIdentityScope().clear();
+		}
 </#list>    
     }
 
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index dc8b1049..69b9f015 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -67,6 +67,7 @@
     private boolean skipTableCreation;
     private Boolean active;
     private Boolean hasKeepSections;
+    private Boolean session;
 
     Entity(Schema schema, String className) {
         this.schema = schema;
@@ -398,6 +399,10 @@ public Boolean getActive() {
     public Boolean getHasKeepSections() {
         return hasKeepSections;
     }
+    
+    public Boolean getSession() {
+		return session;
+	}
 
     public Collection<String> getAdditionalImportsEntity() {
         return additionalImportsEntity;
@@ -410,6 +415,10 @@ public Boolean getHasKeepSections() {
     public void setHasKeepSections(Boolean hasKeepSections) {
         this.hasKeepSections = hasKeepSections;
     }
+    
+    public void setSession(Boolean session) {
+		this.session = session;
+	}
 
     public List<String> getInterfacesToImplement() {
         return interfacesToImplement;
@@ -487,6 +496,10 @@ void init2ndPass() {
         if (hasKeepSections == null) {
             hasKeepSections = schema.isHasKeepSectionsByDefault();
         }
+        
+		if (session == null) {
+			session = schema.isUseSessionEntitiesByDefault();
+		}
 
         init2ndPassIndexNamesWithDefaults();
 
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
index e94c58f5..0ccce43a 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
@@ -38,6 +38,7 @@
     private Map<PropertyType, String> propertyToJavaTypeNullable;
     private boolean hasKeepSectionsByDefault;
     private boolean useActiveEntitiesByDefault;
+    private boolean useSessionEntitiesByDefault;
 
     public Schema(int version, String defaultJavaPackage) {
         this.version = version;
@@ -53,6 +54,10 @@ public void enableKeepSectionsByDefault() {
     public void enableActiveEntitiesByDefault() {
         useActiveEntitiesByDefault = true;
     }
+    
+    public void enableSessionEntitiesByDefault(){
+		useSessionEntitiesByDefault = true;
+    }
 
     private void initTypeMappings() {
         propertyToDbType = new HashMap<PropertyType, String>();
@@ -167,6 +172,10 @@ public boolean isHasKeepSectionsByDefault() {
     public boolean isUseActiveEntitiesByDefault() {
         return useActiveEntitiesByDefault;
     }
+    
+    public boolean isUseSessionEntitiesByDefault() {
+		return useSessionEntitiesByDefault;
+	}
 
     void init2ndPass() {
         if (defaultJavaPackageDao == null) {
