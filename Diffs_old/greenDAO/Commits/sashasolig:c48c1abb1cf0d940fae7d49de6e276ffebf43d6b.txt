diff --git a/.arcconfig b/.arcconfig
new file mode 100644
index 00000000..be99215f
--- /dev/null
+++ b/.arcconfig
@@ -0,0 +1,5 @@
+{
+	"project_id": "Path GreenDao",
+	"conduit_uri": "https://phabricator.path.com/",
+	"immutable_history": false
+}
diff --git a/DaoGenerator/build.gradle b/DaoGenerator/build.gradle
index fbd16153..28267603 100644
--- a/DaoGenerator/build.gradle
+++ b/DaoGenerator/build.gradle
@@ -7,11 +7,13 @@ buildscript {
     repositories {
         mavenLocal()
         mavenCentral()
+        maven { url project.ext["pathMaven.repo.snapshots"] }
+        maven { url project.ext["pathMaven.repo.releases"] }
     }
 
     dependencies {
         classpath 'com.android.tools.build:gradle:0.8+'
-        classpath 'com.path.android.build:gradle:1.2.+'
+        classpath 'com.path.android.build:gradle:1.3.+'
     }
 }
 
@@ -20,8 +22,8 @@ apply plugin: 'pathmaven'
 
 pathmaven {
     groupId "de.greenrobot.dao"
-    artifactId "generator"
-    version "1.2"
+    artifactId "generator-path"
+    version "1.3"
 }
 
 repositories {
diff --git a/DaoGenerator/src-template/dao-master.ftl b/DaoGenerator/src-template/dao-master.ftl
index e6c97e74..d706ec1b 100644
--- a/DaoGenerator/src-template/dao-master.ftl
+++ b/DaoGenerator/src-template/dao-master.ftl
@@ -59,22 +59,27 @@ public class DaoMaster extends AbstractDaoMaster {
     }
 
     public static abstract class OpenHelper extends SQLiteOpenHelper {
+        private Runnable onPostTableCreateRunnable;
 
-        public OpenHelper(Context context, String name, CursorFactory factory) {
+        public OpenHelper(Context context, String name, CursorFactory factory, Runnable onPostTableCreateRunnable) {
             super(context, name, factory, SCHEMA_VERSION);
+            this.onPostTableCreateRunnable = onPostTableCreateRunnable;
         }
 
         @Override
         public void onCreate(SQLiteDatabase db) {
             Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
             createAllTables(db, false);
+            if (onPostTableCreateRunnable != null) {
+                onPostTableCreateRunnable.run();
+            }
         }
     }
 
     /** WARNING: Drops all table on Upgrade! Use only during development. */
     public static class DevOpenHelper extends OpenHelper {
-        public DevOpenHelper(Context context, String name, CursorFactory factory) {
-            super(context, name, factory);
+        public DevOpenHelper(Context context, String name, CursorFactory factory, Runnable onPostTableCreateRunnable) {
+            super(context, name, factory, onPostTableCreateRunnable);
         }
 
         @Override
diff --git a/DaoGenerator/src-template/entity-base.ftl b/DaoGenerator/src-template/entity-base.ftl
index 582f931f..049028b7 100644
--- a/DaoGenerator/src-template/entity-base.ftl
+++ b/DaoGenerator/src-template/entity-base.ftl
@@ -30,7 +30,7 @@ package ${entity.javaPackage};
 import java.util.List;
 </#if>
 <#if entity.active>
-import ${schema.defaultJavaPackageDao}.DaoSession;
+import ${schema.javaPackageMasterSession}.DaoSession;
 import de.greenrobot.dao.DaoException;
 
 </#if>
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index 5304498f..b7c1e037 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -698,7 +698,7 @@ private void init3rdPassAdditionalImports() {
             checkAdditionalImportsSerializedProperty(property);
         }
 
-        checkAddionalImportsAnnotaion(annotations);
+        checkAddionalImportsAnnotation(annotations);
 
         //for entity itself not the base class. we need to import all class annotations
         for(Annotation annotation : annotations) {
@@ -710,18 +710,18 @@ private void init3rdPassAdditionalImports() {
     }
 
     private void checkAdditionalImportsProperty(Property property) {
-        checkAddionalImportsAnnotaion(property.getFieldAnnotations());
-        checkAddionalImportsAnnotaion(property.getGetterAnnotations());
-        checkAddionalImportsAnnotaion(property.getSetterAnnotations());
+        checkAddionalImportsAnnotation(property.getFieldAnnotations());
+        checkAddionalImportsAnnotation(property.getGetterAnnotations());
+        checkAddionalImportsAnnotation(property.getSetterAnnotations());
     }
     
     private void checkAdditionalImportsSerializedProperty(SerializedProperty property) {
-        checkAddionalImportsAnnotaion(property.getFieldAnnotations());
-        checkAddionalImportsAnnotaion(property.getGetterAnnotations());
-        checkAddionalImportsAnnotaion(property.getSetterAnnotations());
+        checkAddionalImportsAnnotation(property.getFieldAnnotations());
+        checkAddionalImportsAnnotation(property.getGetterAnnotations());
+        checkAddionalImportsAnnotation(property.getSetterAnnotations());
     }
 
-    private void checkAddionalImportsAnnotaion(List<Annotation> annotations) {
+    private void checkAddionalImportsAnnotation(List<Annotation> annotations) {
         for(Annotation annotation : annotations) {
             if(annotation.getPackage() != null) {
                 additionalImportsEntityBase.add(annotation.getPackage());
