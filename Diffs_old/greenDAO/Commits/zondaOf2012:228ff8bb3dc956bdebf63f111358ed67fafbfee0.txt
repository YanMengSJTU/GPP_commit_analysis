diff --git a/DaoCore/.classpath b/DaoCore/.classpath
index 7bc01d9a..51769745 100644
--- a/DaoCore/.classpath
+++ b/DaoCore/.classpath
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/DaoCore/project.properties b/DaoCore/project.properties
index 96db7421..76622468 100644
--- a/DaoCore/project.properties
+++ b/DaoCore/project.properties
@@ -9,4 +9,4 @@
 
 android.library=true
 # Project target.
-target=android-4
+target=android-8
diff --git a/DaoExample/.settings/org.eclipse.core.resources.prefs b/DaoExample/.settings/org.eclipse.core.resources.prefs
deleted file mode 100644
index 3d916f29..00000000
--- a/DaoExample/.settings/org.eclipse.core.resources.prefs
+++ /dev/null
@@ -1,2 +0,0 @@
-eclipse.preferences.version=1
-encoding/<project>=Cp1252
diff --git a/DaoExample/libs/greendao-1.3.0-beta-1.jar b/DaoExample/libs/greendao-1.3.0-beta-1.jar
deleted file mode 100644
index 473993d4..00000000
Binary files a/DaoExample/libs/greendao-1.3.0-beta-1.jar and /dev/null differ
diff --git a/DaoExample/project.properties b/DaoExample/project.properties
index c957743c..9ba54868 100644
--- a/DaoExample/project.properties
+++ b/DaoExample/project.properties
@@ -8,4 +8,5 @@
 # project structure.
 
 # Project target.
-target=android-4
+target=android-18
+android.library.reference.1=../DaoCore
diff --git a/DaoExample/src-test/de/greenrobot/daoexample/CustomerOrderTest.java b/DaoExample/src-test/de/greenrobot/daoexample/CustomerOrderTest.java
index 0fc73a34..c214aa5d 100644
--- a/DaoExample/src-test/de/greenrobot/daoexample/CustomerOrderTest.java
+++ b/DaoExample/src-test/de/greenrobot/daoexample/CustomerOrderTest.java
@@ -1,61 +1,61 @@
-package de.greenrobot.daoexample;
-
-import java.util.Date;
-import java.util.List;
-
-import android.app.Application;
-import de.greenrobot.dao.test.AbstractDaoSessionTest;
-
-public class CustomerOrderTest extends AbstractDaoSessionTest<Application, DaoMaster, DaoSession> {
-
-    public CustomerOrderTest() {
-        super(DaoMaster.class);
-    }
-
-    public void testCustomerToOrders() {
-        Customer customer = new Customer(null, "greenrobot");
-        daoSession.insert(customer);
-
-        addOrderToCustomer(customer);
-        addOrderToCustomer(customer);
-
-        List<Order> orders = customer.getOrders();
-        assertEquals(2, orders.size());
-    }
-
-    public void testOrderToCustomer() {
-        Customer customer = new Customer(null, "greenrobot");
-        daoSession.insert(customer);
-
-        Order order = addOrderToCustomer(customer);
-        Customer customer2 = order.getCustomer();
-        
-        assertSame(customer, customer2);
-    }
-
-    public void testUpdateBirectional() {
-        Customer customer = new Customer(null, "greenrobot");
-        daoSession.insert(customer);
-
-        addOrderToCustomer(customer);
-        List<Order> orders = customer.getOrders();
-        
-        Order newOrder = new Order();
-        newOrder.setCustomer(customer);
-        daoSession.insert(newOrder);
-        orders.add(newOrder);
-        assertEquals(2, orders.size());
-        
-        customer.resetOrders();
-        List<Order> orders2 = customer.getOrders();
-        assertEquals(orders.size(), orders2.size());
-    }
-
-    private Order addOrderToCustomer(Customer customer) {
-        Date date = new Date(System.currentTimeMillis() - ((long) (Math.random() * 1000 * 60 * 60 * 24 * 365)));
-        Order order = new Order(null, date, customer.getId());
-        daoSession.insert(order);
-        return order;
-    }
-
-}
+//package de.greenrobot.daoexample;
+//
+//import java.util.Date;
+//import java.util.List;
+//
+//import android.app.Application;
+//import de.greenrobot.dao.test.AbstractDaoSessionTest;
+//
+//public class CustomerOrderTest extends AbstractDaoSessionTest<Application, DaoMaster, DaoSession> {
+//
+//    public CustomerOrderTest() {
+//        super(DaoMaster.class);
+//    }
+//
+//    public void testCustomerToOrders() {
+//        Customer customer = new Customer(null, "greenrobot");
+//        daoSession.insert(customer);
+//
+//        addOrderToCustomer(customer);
+//        addOrderToCustomer(customer);
+//
+//        List<Order> orders = customer.getOrders();
+//        assertEquals(2, orders.size());
+//    }
+//
+//    public void testOrderToCustomer() {
+//        Customer customer = new Customer(null, "greenrobot");
+//        daoSession.insert(customer);
+//
+//        Order order = addOrderToCustomer(customer);
+//        Customer customer2 = order.getCustomer();
+//        
+//        assertSame(customer, customer2);
+//    }
+//
+//    public void testUpdateBirectional() {
+//        Customer customer = new Customer(null, "greenrobot");
+//        daoSession.insert(customer);
+//
+//        addOrderToCustomer(customer);
+//        List<Order> orders = customer.getOrders();
+//        
+//        Order newOrder = new Order();
+//        newOrder.setCustomer(customer);
+//        daoSession.insert(newOrder);
+//        orders.add(newOrder);
+//        assertEquals(2, orders.size());
+//        
+//        customer.resetOrders();
+//        List<Order> orders2 = customer.getOrders();
+//        assertEquals(orders.size(), orders2.size());
+//    }
+//
+//    private Order addOrderToCustomer(Customer customer) {
+//        Date date = new Date(System.currentTimeMillis() - ((long) (Math.random() * 1000 * 60 * 60 * 24 * 365)));
+//        Order order = new Order(null, date, customer.getId());
+//        daoSession.insert(order);
+//        return order;
+//    }
+//
+//}
diff --git a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
index 48a3ba53..bef95ebf 100644
--- a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
+++ b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
@@ -17,6 +17,7 @@
 
 import java.text.DateFormat;
 import java.util.Date;
+import java.util.List;
 
 import android.app.ListActivity;
 import android.database.Cursor;
@@ -33,101 +34,187 @@
 import android.widget.SimpleCursorAdapter;
 import android.widget.TextView;
 import android.widget.TextView.OnEditorActionListener;
+import de.greenrobot.dao.query.QueryBuilder;
+import de.greenrobot.dao.query.WhereCondition;
 import de.greenrobot.daoexample.DaoMaster.DevOpenHelper;
 
 public class NoteActivity extends ListActivity {
 
-    private SQLiteDatabase db;
-
-    private EditText editText;
-
-    private DaoMaster daoMaster;
-    private DaoSession daoSession;
-    private NoteDao noteDao;
-
-    private Cursor cursor;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setContentView(R.layout.main);
-
-        DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, "notes-db", null);
-        db = helper.getWritableDatabase();
-        daoMaster = new DaoMaster(db);
-        daoSession = daoMaster.newSession();
-        noteDao = daoSession.getNoteDao();
-
-        String textColumn = NoteDao.Properties.Text.columnName;
-        String orderBy = textColumn + " COLLATE LOCALIZED ASC";
-        cursor = db.query(noteDao.getTablename(), noteDao.getAllColumns(), null, null, null, null, orderBy);
-        String[] from = { textColumn, NoteDao.Properties.Comment.columnName };
-        int[] to = { android.R.id.text1, android.R.id.text2 };
-
-        SimpleCursorAdapter adapter = new SimpleCursorAdapter(this, android.R.layout.simple_list_item_2, cursor, from,
-                to);
-        setListAdapter(adapter);
-
-        editText = (EditText) findViewById(R.id.editTextNote);
-        addUiListeners();
-    }
-
-    protected void addUiListeners() {
-        editText.setOnEditorActionListener(new OnEditorActionListener() {
-
-            @Override
-            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
-                if (actionId == EditorInfo.IME_ACTION_DONE) {
-                    addNote();
-                    return true;
-                }
-                return false;
-            }
-        });
-
-        final View button = findViewById(R.id.buttonAdd);
-        button.setEnabled(false);
-        editText.addTextChangedListener(new TextWatcher() {
-
-            @Override
-            public void onTextChanged(CharSequence s, int start, int before, int count) {
-                boolean enable = s.length() != 0;
-                button.setEnabled(enable);
-            }
-
-            @Override
-            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-            }
-
-            @Override
-            public void afterTextChanged(Editable s) {
-            }
-        });
-    }
-
-    public void onMyButtonClick(View view) {
-        addNote();
-    }
-
-    private void addNote() {
-        String noteText = editText.getText().toString();
-        editText.setText("");
-
-        final DateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);
-        String comment = "Added on " + df.format(new Date());
-        Note note = new Note(null, noteText, comment, new Date());
-        noteDao.insert(note);
-        Log.d("DaoExample", "Inserted new note, ID: " + note.getId());
-
-        cursor.requery();
-    }
-
-    @Override
-    protected void onListItemClick(ListView l, View v, int position, long id) {
-        noteDao.deleteByKey(id);
-        Log.d("DaoExample", "Deleted note, ID: " + id);
-        cursor.requery();
-    }
+	private SQLiteDatabase db;
+
+	private EditText editText;
+
+	private DaoMaster daoMaster;
+	private DaoSession daoSession;
+	private NoteDao noteDao;
+
+	private Cursor cursor;
+
+	SimpleCursorAdapter adapter;
+
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+
+		setContentView(R.layout.main);
+
+		DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, "notes-db",
+				null);
+
+		db = helper.getWritableDatabase();
+
+		daoMaster = new DaoMaster(db);
+
+		daoSession = daoMaster.newSession();
+
+		noteDao = daoSession.getNoteDao();
+
+		String textColumn = NoteDao.Properties.Text.columnName;
+
+		String orderBy = textColumn + " COLLATE LOCALIZED ASC";
+
+		cursor = db.query(noteDao.getTablename(), noteDao.getAllColumns(),
+				null, null, null, null, orderBy);
+
+		String[] from = { textColumn, NoteDao.Properties.Comment.columnName };
+
+		int[] to = { android.R.id.text1, android.R.id.text2 };
+
+		// noteDao.queryBuilder().limit(5).build();
+
+		// DELETE FROM table where _id NOT IN (SELECT _id from table ORDER BY
+		// insertion_date DESC LIMIT 50)
+
+		adapter = new SimpleCursorAdapter(this,
+				android.R.layout.simple_list_item_2, cursor, from, to);
+
+		setListAdapter(adapter);
+
+		editText = (EditText) findViewById(R.id.editTextNote);
+
+		addUiListeners();
+	}
+
+	public void onMyLimitClick(View view) {
+
+		test();
+	}
+
+	void test() {
+
+		// int flag = db.delete(noteDao.getTablename(),
+		// NoteDao.Properties.Id.columnName
+		// + " NOT IN (SELECT _id from "
+		// + noteDao.getTablename()
+		// + " ORDER BY "
+		// + NoteDao.Properties.Date.columnName
+		// + " DESC LIMIT ?); ", new String[]{"5"});
+		//
+		//
+		// Log.i("TAG", "flag : " + flag);
+
+		// adapter.notifyDataSetChanged();
+
+		// Log.i("TAG", " noteDao.loadAll(): " + noteDao.loadAll().toString());
+
+		// sqlite 默认不区分大小写，可利用pragma语句修改，如下：为1则区分，为0则不区分
+		// db.execSQL("PRAGMA case_sensitive_like = 1");
+
+		QueryBuilder<Note> queryBuilder = null;
+
+		List<Note> queryResult = null;
+
+		// text以“A”开头的记录，并以时间降序排列
+		queryBuilder = noteDao.queryBuilder();
+
+		queryResult = queryBuilder.where(NoteDao.Properties.Text.like("A%"))
+				.orderDesc(NoteDao.Properties.Date).list();
+
+		Log.i("TAG", " one queryResult: " + queryResult.toString());
+
+		queryBuilder = noteDao.queryBuilder();
+
+		// 以text首字母降序排列
+		queryResult = queryBuilder.orderRaw(
+				NoteDao.Properties.Text.columnName + " COLLATE LOCALIZED DESC")
+				.list();
+
+		Log.i("TAG", " tow queryResult: " + queryResult.toString());
+
+		// 仅记录最新5条数据, 列查询
+		String queryCondition = NoteDao.Properties.Id.columnName
+				+ " NOT IN (SELECT _id from " + noteDao.getTablename()
+				+ " ORDER BY " + NoteDao.Properties.Date.columnName
+				+ " DESC LIMIT 5)";
+
+		noteDao.queryBuilder()
+				.where(new WhereCondition.StringCondition(queryCondition))
+				.buildDelete().executeDeleteWithoutDetachingEntities();
+
+		Log.i("TAG", " three queryResult: " + noteDao.loadAll().toString());
+
+		cursor.requery();
+	}
+
+	protected void addUiListeners() {
+		editText.setOnEditorActionListener(new OnEditorActionListener() {
+
+			@Override
+			public boolean onEditorAction(TextView v, int actionId,
+					KeyEvent event) {
+				if (actionId == EditorInfo.IME_ACTION_DONE) {
+					addNote();
+					return true;
+				}
+				return false;
+			}
+		});
+
+		final View button = findViewById(R.id.buttonAdd);
+		button.setEnabled(false);
+		editText.addTextChangedListener(new TextWatcher() {
+
+			@Override
+			public void onTextChanged(CharSequence s, int start, int before,
+					int count) {
+				boolean enable = s.length() != 0;
+				button.setEnabled(enable);
+			}
+
+			@Override
+			public void beforeTextChanged(CharSequence s, int start, int count,
+					int after) {
+			}
+
+			@Override
+			public void afterTextChanged(Editable s) {
+			}
+		});
+	}
+
+	public void onMyButtonClick(View view) {
+		addNote();
+	}
+
+	private void addNote() {
+		String noteText = editText.getText().toString();
+		editText.setText("");
+
+		final DateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM,
+				DateFormat.MEDIUM);
+		String comment = "Added on " + df.format(new Date());
+		Note note = new Note(null, noteText, comment, new Date());
+		noteDao.insert(note);
+		Log.d("DaoExample", "Inserted new note, ID: " + note.getId());
+
+		cursor.requery();
+	}
+
+	@Override
+	protected void onListItemClick(ListView l, View v, int position, long id) {
+		noteDao.deleteByKey(id);
+		Log.d("DaoExample", "Deleted note, ID: " + id);
+		cursor.requery();
+	}
 
 }
\ No newline at end of file
diff --git a/DaoExampleGenerator/.classpath b/DaoExampleGenerator/.classpath
index 1fe2a4f1..c346dbff 100644
--- a/DaoExampleGenerator/.classpath
+++ b/DaoExampleGenerator/.classpath
@@ -6,5 +6,6 @@
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 	<classpathentry exported="true" kind="con" path="org.springsource.ide.eclipse.gradle.classpathcontainer"/>
 	<classpathentry kind="con" path="org.springsource.ide.eclipse.gradle.dsld.classpathcontainer"/>
+	<classpathentry kind="lib" path="libs/greendao-1.3.7.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
diff --git a/DaoExampleGenerator/libs/greendao-1.3.7.jar b/DaoExampleGenerator/libs/greendao-1.3.7.jar
new file mode 100644
index 00000000..34516293
Binary files /dev/null and b/DaoExampleGenerator/libs/greendao-1.3.7.jar differ
diff --git a/DaoGenerator/.classpath b/DaoGenerator/.classpath
index a82e8447..58ef3ae4 100644
--- a/DaoGenerator/.classpath
+++ b/DaoGenerator/.classpath
@@ -10,5 +10,6 @@
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 	<classpathentry exported="true" kind="con" path="org.springsource.ide.eclipse.gradle.classpathcontainer"/>
 	<classpathentry kind="con" path="org.springsource.ide.eclipse.gradle.dsld.classpathcontainer"/>
+	<classpathentry kind="lib" path="libs/freemarker-2.3.20.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
diff --git a/DaoGenerator/freemarker-2.3.20.tar.gz b/DaoGenerator/freemarker-2.3.20.tar.gz
new file mode 100644
index 00000000..56f01478
Binary files /dev/null and b/DaoGenerator/freemarker-2.3.20.tar.gz differ
diff --git a/DaoGenerator/libs/freemarker-2.3.20.jar b/DaoGenerator/libs/freemarker-2.3.20.jar
new file mode 100644
index 00000000..91390441
Binary files /dev/null and b/DaoGenerator/libs/freemarker-2.3.20.jar differ
diff --git a/DaoTest/.classpath b/DaoTest/.classpath
index 80819056..22c86345 100644
--- a/DaoTest/.classpath
+++ b/DaoTest/.classpath
@@ -1,10 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="src" path="src-gen"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/DaoTest/project.properties b/DaoTest/project.properties
index dd110c3e..497e1e38 100644
--- a/DaoTest/project.properties
+++ b/DaoTest/project.properties
@@ -9,4 +9,4 @@
 
 android.library.reference.1=../DaoCore
 # Project target.
-target=android-4
+target=android-8
