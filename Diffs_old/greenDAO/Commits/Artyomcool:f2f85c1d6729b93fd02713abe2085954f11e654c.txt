diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
index 042d4c3e..3285f4d5 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
@@ -34,6 +34,11 @@
 import de.greenrobot.dao.internal.TableStatements;
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
 
 /**
  * Base class for all DAOs: Implements entity operations like insert, load, delete, and query.
@@ -114,7 +119,31 @@ public Property getPkProperty() {
     public String[] getNonPkColumns() {
         return config.nonPkColumns;
     }
-
+    
+    protected byte[] serializeObject(Object obj) {
+      try {
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeUnshared(obj);
+        oos.flush();
+        return baos.toByteArray();
+      }
+      catch (IOException e) {
+        throw new RuntimeException(e);
+      }
+    }
+
+    protected Object deserializeObject(byte[] byteArray) {
+      try {
+        ByteArrayInputStream bais = new ByteArrayInputStream(byteArray);
+        ObjectInputStream ois = new ObjectInputStream(bais);
+        return ois.readUnshared();
+      }
+      catch (Exception e) {
+        throw new RuntimeException(e);
+      }
+    }
+    
     /**
      * Loads and entity for the given PK.
      * 
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index 276d291e..0139e325 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -35,6 +35,7 @@ public static void main(String[] args) throws Exception {
 
         addNote(schema);
         addCustomerOrder(schema);
+        addContact(schema);
 
         new DaoGenerator().generateAll(schema, "../DaoExample/src-gen");
     }
@@ -64,4 +65,11 @@ private static void addCustomerOrder(Schema schema) {
         customerToOrders.orderAsc(orderDate);
     }
 
+    private static void addContact(Schema schema) {
+        Entity contact = schema.addEntity("Contact");
+        contact.addIdProperty();
+        contact.addStringProperty("name");
+        contact.addSerializedProperty("java.security.PublicKey", "publicKey");
+    }
+    
 }
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 443f74dc..a782bf64 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -17,8 +17,8 @@ You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
-<#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long" } />
-<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long"  } />
+<#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long", "Serialized":"Blob" } />
+<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long", "Serialized":"Blob" } />
 package ${entity.javaPackageDao};
 
 <#if entity.toOneRelations?has_content || entity.incomingToManyRelations?has_content>
@@ -127,16 +127,18 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#if property.notNull || entity.protobuf>
 <#if entity.protobuf>
         if(entity.has${property.propertyName?cap_first}()) {
-    </#if>        stmt.bind${toBindType[property.propertyType]}(${property_index + 1}, entity.get${property.propertyName?cap_first}()<#if
-     property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if>);
+    </#if>        stmt.bind${toBindType[property.propertyType]}(${property_index + 1}, <#if
+property.propertyType == "Serialized">serializeObject(entity.get${property.propertyName?cap_first}())<#else>entity.get${property.propertyName?cap_first}()</#if><#if
+property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if>);
 <#if entity.protobuf>
         }
 </#if>
 <#else> <#-- nullable, non-protobuff -->
         ${property.javaType} ${property.propertyName} = entity.get${property.propertyName?cap_first}();
         if (${property.propertyName} != null) {
-            stmt.bind${toBindType[property.propertyType]}(${property_index + 1}, ${property.propertyName}<#if
- property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if>);
+            stmt.bind${toBindType[property.propertyType]}(${property_index + 1}, <#if
+property.propertyType == "Serialized">serializeObject(${property.propertyName})<#else>${property.propertyName}</#if><#if
+property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if>);
         }
 </#if>
 </#list>
@@ -202,9 +204,11 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#list entity.properties as property>
             <#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#if
             property.propertyType == "Byte">(byte) </#if><#if
-            property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
+            property.propertyType == "Date">new java.util.Date(</#if><#if
+            property.propertyType == "Serialized">(${property.javaType}) deserializeObject(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
             property.propertyType == "Boolean"> != 0</#if><#if
-            property.propertyType == "Date">)</#if><#if property_has_next>,</#if> // ${property.propertyName}
+            property.propertyType == "Date">)</#if><#if
+            property.propertyType == "Serialized">)</#if><#if property_has_next>,</#if> // ${property.propertyName}
 </#list>        
         );
         return entity;
@@ -227,9 +231,11 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#list entity.properties as property>
         entity.set${property.propertyName?cap_first}(<#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#if
             property.propertyType == "Byte">(byte) </#if><#if
-            property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
+            property.propertyType == "Date">new java.util.Date(</#if><#if
+            property.propertyType == "Serialized">(${property.javaType}) deserializeObject(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
             property.propertyType == "Boolean"> != 0</#if><#if
-            property.propertyType == "Date">)</#if>);
+            property.propertyType == "Date">)</#if><#if
+            property.propertyType == "Serialized">)</#if>);
 </#list>
 </#if>
      }
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index e40c0a18..5c0417c6 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -207,7 +207,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
             List<${toMany.targetEntity.className}> ${toMany.name}New = targetDao._query${toMany.sourceEntity.className?cap_first}_${toMany.name?cap_first}(<#--
                 --><#list toMany.sourceProperties as property>${property.propertyName}<#if property_has_next>, </#if></#list>);
             synchronized (this) {<#-- Check if another thread was faster, we cannot lock while doing the query to prevent deadlocks -->
-                if(${toMany.name} == null) {
+                if (${toMany.name} == null) {
                     ${toMany.name} = ${toMany.name}New;
                 }
             }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index 27f6cb3c..4588d1ac 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -96,50 +96,54 @@
     }
 
     public PropertyBuilder addBooleanProperty(String propertyName) {
-        return addProperty(PropertyType.Boolean, propertyName);
+        return addProperty(PropertyType.Boolean, null, propertyName);
     }
 
     public PropertyBuilder addByteProperty(String propertyName) {
-        return addProperty(PropertyType.Byte, propertyName);
+        return addProperty(PropertyType.Byte, null, propertyName);
     }
 
     public PropertyBuilder addShortProperty(String propertyName) {
-        return addProperty(PropertyType.Short, propertyName);
+        return addProperty(PropertyType.Short, null, propertyName);
     }
 
     public PropertyBuilder addIntProperty(String propertyName) {
-        return addProperty(PropertyType.Int, propertyName);
+        return addProperty(PropertyType.Int, null, propertyName);
     }
 
     public PropertyBuilder addLongProperty(String propertyName) {
-        return addProperty(PropertyType.Long, propertyName);
+        return addProperty(PropertyType.Long, null, propertyName);
     }
 
     public PropertyBuilder addFloatProperty(String propertyName) {
-        return addProperty(PropertyType.Float, propertyName);
+        return addProperty(PropertyType.Float, null, propertyName);
     }
 
     public PropertyBuilder addDoubleProperty(String propertyName) {
-        return addProperty(PropertyType.Double, propertyName);
+        return addProperty(PropertyType.Double, null, propertyName);
     }
 
     public PropertyBuilder addByteArrayProperty(String propertyName) {
-        return addProperty(PropertyType.ByteArray, propertyName);
+        return addProperty(PropertyType.ByteArray, null, propertyName);
     }
 
     public PropertyBuilder addStringProperty(String propertyName) {
-        return addProperty(PropertyType.String, propertyName);
+        return addProperty(PropertyType.String, null, propertyName);
     }
 
     public PropertyBuilder addDateProperty(String propertyName) {
-        return addProperty(PropertyType.Date, propertyName);
+        return addProperty(PropertyType.Date, null, propertyName);
     }
 
-    public PropertyBuilder addProperty(PropertyType propertyType, String propertyName) {
+    public PropertyBuilder addSerializedProperty(String javaType, String propertyName) {
+        return addProperty(PropertyType.Serialized, javaType, propertyName);
+    }
+
+    public PropertyBuilder addProperty(PropertyType propertyType, String javaType, String propertyName) {
         if (!propertyNames.add(propertyName)) {
             throw new RuntimeException("Property already defined: " + propertyName);
         }
-        PropertyBuilder builder = new Property.PropertyBuilder(schema, this, propertyType, propertyName);
+        PropertyBuilder builder = new Property.PropertyBuilder(schema, this, propertyType, javaType, propertyName);
         properties.add(builder.getProperty());
         return builder;
     }
@@ -216,7 +220,7 @@ public ToOne addToOneWithoutProperty(String name, Entity target, String fkColumn
 
     public ToOne addToOneWithoutProperty(String name, Entity target, String fkColumnName, boolean notNull,
             boolean unique) {
-        PropertyBuilder propertyBuilder = new PropertyBuilder(schema, this, null, name);
+        PropertyBuilder propertyBuilder = new PropertyBuilder(schema, this, null, null, name);
         if (notNull) {
             propertyBuilder.notNull();
         }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index f54d05e8..9838044b 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -23,8 +23,8 @@
     public static class PropertyBuilder {
         private final Property property;
 
-        public PropertyBuilder(Schema schema, Entity entity, PropertyType propertyType, String propertyName) {
-            property = new Property(schema, entity, propertyType, propertyName);
+        public PropertyBuilder(Schema schema, Entity entity, PropertyType propertyType, String javaType, String propertyName) {
+            property = new Property(schema, entity, propertyType, javaType, propertyName);
         }
 
         public PropertyBuilder columnName(String columnName) {
@@ -110,6 +110,7 @@ public Property getProperty() {
     private final Schema schema;
     private final Entity entity;
     private PropertyType propertyType;
+    private String javaType;
     private final String propertyName;
 
     private String columnName;
@@ -128,12 +129,11 @@ public Property getProperty() {
 
     private int ordinal;
 
-    private String javaType;
-
-    public Property(Schema schema, Entity entity, PropertyType propertyType, String propertyName) {
+    public Property(Schema schema, Entity entity, PropertyType propertyType, String javaType, String propertyName) {
         this.schema = schema;
         this.entity = entity;
         this.propertyName = propertyName;
+        this.javaType = javaType;
         this.propertyType = propertyType;
     }
 
@@ -201,10 +201,12 @@ void init2ndPass() {
         if (columnName == null) {
             columnName = DaoUtil.dbName(propertyName);
         }
-        if (notNull) {
-            javaType = schema.mapToJavaTypeNotNull(propertyType);
-        } else {
-            javaType = schema.mapToJavaTypeNullable(propertyType);
+        if (javaType == null) {
+            if (notNull) {
+                javaType = schema.mapToJavaTypeNotNull(propertyType);
+            } else {
+                javaType = schema.mapToJavaTypeNullable(propertyType);
+            }
         }
     }
 
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java b/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java
index 0246239e..1a906ae1 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java
@@ -23,5 +23,5 @@
  * @author Markus
  */
 public enum PropertyType {
-    Byte, Short, Int, Long, Boolean, Float, Double, String, ByteArray, Date
+    Byte, Short, Int, Long, Boolean, Float, Double, String, ByteArray, Date, Serialized
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
index e94c58f5..e7d45c47 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
@@ -66,6 +66,7 @@ private void initTypeMappings() {
         propertyToDbType.put(PropertyType.String, "TEXT");
         propertyToDbType.put(PropertyType.ByteArray, "BLOB");
         propertyToDbType.put(PropertyType.Date, "INTEGER");
+        propertyToDbType.put(PropertyType.Serialized, "BLOB");
 
         propertyToJavaTypeNotNull = new HashMap<PropertyType, String>();
         propertyToJavaTypeNotNull.put(PropertyType.Boolean, "boolean");
