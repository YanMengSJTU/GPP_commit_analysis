diff --git a/.gitignore b/.gitignore
index 4a8da3bc..0a91ddc4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1 +1,22 @@
-.gradle
\ No newline at end of file
+.gradle
+.idea
+release
+target
+build
+libs
+.settings
+.project
+.classpath
+.idea
+.DS_Store
+bin
+gen
+proguard
+.pmd
+*~
+*.iml
+tmp
+gen-external-apklibs
+out
+tmp
+project.properties
diff --git a/DaoGenerator/.classpath b/DaoGenerator/.classpath
deleted file mode 100644
index 0012de0c..00000000
--- a/DaoGenerator/.classpath
+++ /dev/null
@@ -1,13 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="src-template"/>
-	<classpathentry kind="src" path="src-test"/>
-	<classpathentry kind="con" path="GROOVY_DSL_SUPPORT"/>
-	<classpathentry kind="con" path="GROOVY_SUPPORT"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
-	<classpathentry exported="true" kind="con" path="org.springsource.ide.eclipse.gradle.classpathcontainer"/>
-	<classpathentry kind="con" path="org.springsource.ide.eclipse.gradle.dsld.classpathcontainer"/>
-	<classpathentry kind="output" path="bin"/>
-</classpath>
diff --git a/DaoGenerator/.gitignore b/DaoGenerator/.gitignore
index 90ffd1f9..a365f536 100644
--- a/DaoGenerator/.gitignore
+++ b/DaoGenerator/.gitignore
@@ -3,3 +3,19 @@
 /bin
 /gradle.properties
 /build
+target
+libs
+.settings
+.project
+.classpath
+.idea
+.DS_Store
+gen
+proguard
+.pmd
+*~
+*.iml
+gen-external-apklibs
+out
+tmp
+project.properties
diff --git a/DaoGenerator/.project b/DaoGenerator/.project
deleted file mode 100644
index 4d909547..00000000
--- a/DaoGenerator/.project
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>DaoGenerator</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.springsource.ide.eclipse.gradle.core.nature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-		<nature>org.eclipse.jdt.groovy.core.groovyNature</nature>
-	</natures>
-</projectDescription>
diff --git a/DaoGenerator/.settings/gradle/org.springsource.ide.eclipse.gradle.core.prefs b/DaoGenerator/.settings/gradle/org.springsource.ide.eclipse.gradle.core.prefs
deleted file mode 100644
index 734e6cba..00000000
--- a/DaoGenerator/.settings/gradle/org.springsource.ide.eclipse.gradle.core.prefs
+++ /dev/null
@@ -1,4 +0,0 @@
-#org.springsource.ide.eclipse.gradle.core.preferences.GradleProjectPreferences
-#Sun Feb 24 10:56:04 CET 2013
-org.springsource.ide.eclipse.gradle.linkedresources=
-org.springsource.ide.eclipse.gradle.rootprojectloc=
diff --git a/DaoGenerator/.settings/gradle/org.springsource.ide.eclipse.gradle.refresh.prefs b/DaoGenerator/.settings/gradle/org.springsource.ide.eclipse.gradle.refresh.prefs
deleted file mode 100644
index f6b5aef6..00000000
--- a/DaoGenerator/.settings/gradle/org.springsource.ide.eclipse.gradle.refresh.prefs
+++ /dev/null
@@ -1,3 +0,0 @@
-#org.springsource.ide.eclipse.gradle.core.actions.GradleRefreshPreferences
-#Sun Feb 24 10:56:15 CET 2013
-enableDSLD=true
diff --git a/DaoGenerator/.settings/org.eclipse.core.resources.prefs b/DaoGenerator/.settings/org.eclipse.core.resources.prefs
deleted file mode 100644
index 3d916f29..00000000
--- a/DaoGenerator/.settings/org.eclipse.core.resources.prefs
+++ /dev/null
@@ -1,2 +0,0 @@
-eclipse.preferences.version=1
-encoding/<project>=Cp1252
diff --git a/DaoGenerator/.settings/org.eclipse.jdt.core.prefs b/DaoGenerator/.settings/org.eclipse.jdt.core.prefs
deleted file mode 100644
index e2f40406..00000000
--- a/DaoGenerator/.settings/org.eclipse.jdt.core.prefs
+++ /dev/null
@@ -1,12 +0,0 @@
-#Fri Jul 22 21:20:49 CEST 2011
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.6
-org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.compiler.debug.localVariable=generate
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.6
diff --git a/DaoGenerator/.settings/org.eclipse.jdt.groovy.core.prefs b/DaoGenerator/.settings/org.eclipse.jdt.groovy.core.prefs
deleted file mode 100644
index 7d7ee6dc..00000000
--- a/DaoGenerator/.settings/org.eclipse.jdt.groovy.core.prefs
+++ /dev/null
@@ -1,2 +0,0 @@
-eclipse.preferences.version=1
-groovy.compiler.level=18
diff --git a/DaoGenerator/libs/freemarker-2.3.19.jar b/DaoGenerator/libs/freemarker-2.3.19.jar
new file mode 100644
index 00000000..b13671da
Binary files /dev/null and b/DaoGenerator/libs/freemarker-2.3.19.jar differ
diff --git a/DaoGenerator/libs/gson-2.2.2.jar b/DaoGenerator/libs/gson-2.2.2.jar
new file mode 100644
index 00000000..9adc66fd
Binary files /dev/null and b/DaoGenerator/libs/gson-2.2.2.jar differ
diff --git a/DaoGenerator/libs/junit-4.10.jar b/DaoGenerator/libs/junit-4.10.jar
new file mode 100644
index 00000000..954851e6
Binary files /dev/null and b/DaoGenerator/libs/junit-4.10.jar differ
diff --git a/DaoGenerator/mybuild.xml b/DaoGenerator/mybuild.xml
index 72ae38f0..e46cab81 100644
--- a/DaoGenerator/mybuild.xml
+++ b/DaoGenerator/mybuild.xml
@@ -19,7 +19,7 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 -->
 <project name="DaoGenerator" default="build-generator">
 
-    <property name="version" value="1.3.0-SNAPSHOT" />
+    <property name="version" value="1.3.0-gson-patch" />
 	
 	<target name="build-generator" depends="delete-release, build-jar, build-javadoc"></target>
 	
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index e40c0a18..5b9fa083 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -28,8 +28,9 @@ import java.util.List;
 <#if entity.active>
 import ${schema.defaultJavaPackageDao}.DaoSession;
 import de.greenrobot.dao.DaoException;
-
 </#if>
+import com.google.gson.annotations.SerializedName;
+import com.google.gson.annotations.Expose;
 <#if entity.additionalImportsEntity?has_content>
 <#list entity.additionalImportsEntity as additionalImport>
 import ${additionalImport};
@@ -53,10 +54,20 @@ entity.interfacesToImplement?has_content> implements <#list entity.interfacesToI
 as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 
 <#list entity.properties as property>
-<#if property.notNull && complexTypes?seq_contains(property.propertyType)>
-    /** Not-null value. */
-</#if>
-    private ${property.javaType} ${property.propertyName};
+    <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
+        /** Not-null value. */
+    </#if>
+    <#if property.isExpose()>
+        <#if property.isJsonSerialize() && property.isJsonDeserialize()>
+            @Expose
+        <#else>
+            @Expose(serialize=<#if property.isJsonSerialize()> true <#else>false</#if>,deserialize=<#if property.isJsonDeserialize()> true <#else>false</#if>)
+        </#if>
+    </#if>
+    <#if property.getJsonFiled() ??>
+        @SerializedName("${property.getJsonFiled()}")
+    </#if>
+        private ${property.javaType} ${property.propertyName};
 </#list>
 
 <#if entity.active>
diff --git a/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java b/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
index 8f17eea5..35ca675f 100644
--- a/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
+++ b/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
@@ -17,19 +17,12 @@
  */
 package de.greenrobot.daogenerator.test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import de.greenrobot.daogenerator.*;
+import org.junit.Test;
 
 import java.io.File;
 
-import org.junit.Test;
-
-import de.greenrobot.daogenerator.DaoGenerator;
-import de.greenrobot.daogenerator.DaoUtil;
-import de.greenrobot.daogenerator.Entity;
-import de.greenrobot.daogenerator.Property;
-import de.greenrobot.daogenerator.Schema;
+import static org.junit.Assert.*;
 
 public class SimpleDaoGeneratorTest {
 
@@ -38,10 +31,11 @@ public void testMinimalSchema() throws Exception {
         Schema schema = new Schema(1, "de.greenrobot.testdao");
         Entity adressTable = schema.addEntity("Adresse");
         Property idProperty = adressTable.addIdProperty().getProperty();
+        adressTable.addStringProperty("json").serializedName("haha");
         adressTable.addIntProperty("count").index();
         adressTable.addIntProperty("dummy").notNull();
         assertEquals(1, schema.getEntities().size());
-        assertEquals(3, adressTable.getProperties().size());
+        assertEquals(4, adressTable.getProperties().size());
 
         File daoFile = new File("test-out/de/greenrobot/testdao/" + adressTable.getClassName() + "Dao.java");
         daoFile.delete();
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index 52797205..b4a384e0 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -17,6 +17,10 @@
  */
 package de.greenrobot.daogenerator;
 
+import freemarker.template.Configuration;
+import freemarker.template.DefaultObjectWrapper;
+import freemarker.template.Template;
+
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
@@ -27,13 +31,9 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import freemarker.template.Configuration;
-import freemarker.template.DefaultObjectWrapper;
-import freemarker.template.Template;
-
 /**
  * Once you have your model created, use this class to generate entities and DAOs.
- * 
+ *
  * @author Markus
  */
 public class DaoGenerator {
@@ -58,9 +58,11 @@ public DaoGenerator() throws IOException {
         patternKeepMethods = compilePattern("METHODS");
 
         Configuration config = new Configuration();
+
         config.setClassForTemplateLoading(this.getClass(), "/");
         config.setObjectWrapper(new DefaultObjectWrapper());
 
+
         templateDao = config.getTemplate("dao.ftl");
         templateDaoMaster = config.getTemplate("dao-master.ftl");
         templateDaoSession = config.getTemplate("dao-session.ftl");
@@ -74,12 +76,16 @@ private Pattern compilePattern(String sectionName) {
                 + " END.*?\n", flags);
     }
 
-    /** Generates all entities and DAOs for the given schema. */
+    /**
+     * Generates all entities and DAOs for the given schema.
+     */
     public void generateAll(Schema schema, String outDir) throws Exception {
         generateAll(schema, outDir, null);
     }
 
-    /** Generates all entities and DAOs for the given schema. */
+    /**
+     * Generates all entities and DAOs for the given schema.
+     */
     public void generateAll(Schema schema, String outDir, String outDirTest) throws Exception {
         long start = System.currentTimeMillis();
 
@@ -129,7 +135,7 @@ protected File toFileForceExists(String filename) throws IOException {
     }
 
     private void generate(Template template, File outDirFile, String javaPackage, String javaClassName, Schema schema,
-            Entity entity) throws Exception {
+                          Entity entity) throws Exception {
         try {
             File file = toJavaFilename(outDirFile, javaPackage, javaClassName);
             file.getParentFile().mkdirs();
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index f54d05e8..503eb47f 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -17,7 +17,9 @@
  */
 package de.greenrobot.daogenerator;
 
-/** Model class for an entity's property: a Java property mapped to a data base column. */
+/**
+ * Model class for an entity's property: a Java property mapped to a data base column.
+ */
 public class Property {
 
     public static class PropertyBuilder {
@@ -73,6 +75,25 @@ public PropertyBuilder notNull() {
             return this;
         }
 
+        public PropertyBuilder serializedName(String jsonFiled) {
+            property.jsonFiled = jsonFiled;
+            return this;
+        }
+
+        public PropertyBuilder jsonExpose(boolean serialize, boolean deserialize) {
+            property.expose = true;
+            property.serialize = serialize;
+            property.deserialize = deserialize;
+            return this;
+        }
+
+        public PropertyBuilder jsonExpose() {
+            property.expose = true;
+            property.serialize = true;
+            property.deserialize = true;
+            return this;
+        }
+
         public PropertyBuilder index() {
             Index index = new Index();
             index.addProperty(property);
@@ -123,7 +144,15 @@ public Property getProperty() {
     private boolean unique;
     private boolean notNull;
 
-    /** Initialized in 2nd pass */
+    private boolean expose;
+    private boolean serialize;
+    private boolean deserialize;
+    private String jsonFiled;
+
+
+    /**
+     * Initialized in 2nd pass
+     */
     private String constraints;
 
     private int ordinal;
@@ -189,10 +218,26 @@ public void setOrdinal(int ordinal) {
         this.ordinal = ordinal;
     }
 
+    public String getJsonFiled() {
+        return jsonFiled;
+    }
+
     public Entity getEntity() {
         return entity;
     }
 
+    public boolean isExpose() {
+        return expose;
+    }
+
+    public boolean isJsonSerialize() {
+        return serialize;
+    }
+
+    public boolean isJsonDeserialize() {
+        return deserialize;
+    }
+
     void init2ndPass() {
         initConstraint();
         if (columnType == null) {
