diff --git a/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java b/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
index d655e9a1..764cf779 100644
--- a/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
+++ b/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
@@ -80,10 +80,12 @@ public String getSelectAll() {
     
     /** ends with an space to simplify appending to this string. */
     public String getSelectAll(boolean distinct) {
-        if (selectAll == null) {
-            selectAll = SqlUtils.createSqlSelect(tablename, "T", allColumns, distinct);
-        }
-        return selectAll;
+        return getSelectAll(distinct, "T");
+    }
+    
+    /** ends with an space to simplify appending to this string. */
+    public String getSelectAll(boolean distinct, String tablePrefix) {
+    	return SqlUtils.createSqlSelect(tablename, tablePrefix, allColumns, distinct);
     }
     
     public String getSelectColumns(String[] columns, String[] aliases) {
@@ -92,7 +94,12 @@ public String getSelectColumns(String[] columns, String[] aliases) {
     
     /** ends with an space to simplify appending to this string. */
     public String getSelectColumns(String[] columns, String[] aliases, boolean distinct) {
-        return SqlUtils.createSqlSelect(tablename, aliases, "T", columns, distinct);
+        return getSelectColumns(columns, aliases, "T", distinct);
+    }
+    
+    /** ends with an space to simplify appending to this string. */
+    public String getSelectColumns(String[] columns, String[] aliases, String tableAlias, boolean distinct) {
+        return SqlUtils.createSqlSelect(tablename, aliases, tableAlias, columns, distinct);
     }
 
     public String getSelectKeys() {
diff --git a/DaoCore/src/de/greenrobot/dao/join/JoinBuilder.java b/DaoCore/src/de/greenrobot/dao/join/JoinBuilder.java
index 1f3fda12..48387af0 100644
--- a/DaoCore/src/de/greenrobot/dao/join/JoinBuilder.java
+++ b/DaoCore/src/de/greenrobot/dao/join/JoinBuilder.java
@@ -26,7 +26,7 @@ public JoinBuilder(QueryBuilder<T> queryBuilder, String joinTable, JoinType join
 
 	private String getQualitifedColumn(Selectable column) {
 		if(mQueryBuilder.isMasterTable(column.getColumnPrefix())) {
-			return "T." + column.getColumnName();
+			return mQueryBuilder.getMasterTablePrefix() + "." + column.getColumnName();
 		} else {
 			return column.getColumnPrefix() + "." + column.getColumnName();
 		}
diff --git a/DaoCore/src/de/greenrobot/dao/query/BaseBuilder.java b/DaoCore/src/de/greenrobot/dao/query/BaseBuilder.java
index 1f19bbc0..b0545802 100644
--- a/DaoCore/src/de/greenrobot/dao/query/BaseBuilder.java
+++ b/DaoCore/src/de/greenrobot/dao/query/BaseBuilder.java
@@ -8,9 +8,11 @@
 
 	protected Dao<?, ?> mDao;
     protected StringBuilder orderBuilder;
+    protected String mTablePrefix;
 	
-	protected BaseBuilder(Dao<?, ?> dao) {
+	protected BaseBuilder(Dao<?, ?> dao, String tablePrefix) {
 		mDao = dao;
+		mTablePrefix = tablePrefix;
 	}
 	
 	private void checkOrderBuilder() {
@@ -58,7 +60,7 @@ public boolean isMasterTable(String tableName) {
 
 	protected String getTableAlias(Selectable s) {
 		if (isMasterTable(s.getColumnPrefix())) {
-			return "T";
+			return mTablePrefix;
 		} else {
 			return s.getColumnPrefix();
 		}
diff --git a/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java b/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
index ba5e0a8a..cced888b 100644
--- a/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
+++ b/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
@@ -61,7 +61,6 @@
 
     private final List<Object> values;
     private final AbstractDao<T, ?> dao;
-    private final String tablePrefix;
 
     private Integer limit;
 
@@ -81,15 +80,22 @@ protected QueryBuilder(AbstractDao<T, ?> dao) {
     }
 
     protected QueryBuilder(AbstractDao<T, ?> dao, String tablePrefix) {
-    	super(dao);
+    	super(dao, tablePrefix);
     	
         this.dao = dao;
-        this.tablePrefix = tablePrefix;
         values = new ArrayList<Object>();
         whereConditions = new ArrayList<WhereCondition>();
         joinBuilders = new ArrayList<JoinBuilder<T>>();
     }
+    
+    public QueryBuilder<T> masterTablePrefix(String prefix) {
+    	mTablePrefix = prefix;
+    	return this;
+    }
 
+    public String getMasterTablePrefix() {
+    	return mTablePrefix;
+    }
     /**
      * Adds the given conditions to the where clause using an logical AND. To create new conditions, use the properties
      * given in the generated dao classes.
@@ -156,7 +162,7 @@ protected WhereCondition combineWhereConditions(String combineOp, WhereCondition
     }
 
     protected void addCondition(StringBuilder builder, List<Object> values, WhereCondition condition) {
-        condition.appendTo(builder, mDao.getTablename());
+        condition.appendTo(builder, mDao.getTablename(), mTablePrefix);
         condition.appendValuesTo(values);
     }
 
@@ -403,6 +409,20 @@ public UnionQueryBuilder union(QueryBuilder<?> unionQuery) {
     	
     	return unionBuilder;
     }
+    
+    /**
+     * Unions this query with the given query
+     * @param unionQuery	The query to union with this one
+     * @return a UnionQueryBuilder for building Union queries
+     */
+    public UnionQueryBuilder union(String unionQuery) {
+    	UnionQueryBuilder unionBuilder = new UnionQueryBuilder(this.dao);
+    	
+    	unionBuilder.union(this);
+    	unionBuilder.union(unionQuery);
+    	
+    	return unionBuilder;
+    }
 
     /**
      * Builds a reusable query object (Query objects can be executed more efficiently than creating a QueryBuilder for
@@ -412,9 +432,9 @@ public UnionQueryBuilder union(QueryBuilder<?> unionQuery) {
         String select;
         
     	if(selectColumns != null) {
-    		select = InternalQueryDaoAccess.getStatements(dao).getSelectColumns(selectColumns, tableAliases, distinct);
+    		select = InternalQueryDaoAccess.getStatements(dao).getSelectColumns(selectColumns, tableAliases, mTablePrefix, distinct);
     	} else {
-    		select = InternalQueryDaoAccess.getStatements(dao).getSelectAll(distinct);	
+    		select = InternalQueryDaoAccess.getStatements(dao).getSelectAll(distinct, mTablePrefix);	
     	}
         
         StringBuilder builder = new StringBuilder(select);
@@ -423,7 +443,7 @@ public UnionQueryBuilder union(QueryBuilder<?> unionQuery) {
         	builder.append(jBuilder.getJoinClause());
         }
 
-        appendWhereClause(builder, tablePrefix);
+        appendWhereClause(builder, mTablePrefix);
 
         if (orderBuilder != null && orderBuilder.length() > 0) {
             builder.append(" ORDER BY ").append(orderBuilder);
@@ -469,13 +489,13 @@ public UnionQueryBuilder union(QueryBuilder<?> unionQuery) {
 
         // tablePrefix gets replaced by table name below. Don't use tableName here because it causes trouble when
         // table name ends with tablePrefix.
-        appendWhereClause(builder, tablePrefix);
+        appendWhereClause(builder, mTablePrefix);
 
         String sql = builder.toString();
 
         // Remove table aliases, not supported for DELETE queries.
         // TODO(?): don't create table aliases in the first place.
-        sql = sql.replace(tablePrefix + ".'", tablename + ".'");
+        sql = sql.replace(mTablePrefix + ".'", tablename + ".'");
 
         if (LOG_SQL) {
             DaoLog.d("Built SQL for delete query: " + sql);
@@ -493,9 +513,9 @@ public UnionQueryBuilder union(QueryBuilder<?> unionQuery) {
      */
     public CountQuery<T> buildCount() {
         String tablename = dao.getTablename();
-        String baseSql = SqlUtils.createSqlSelectCountStar(tablename, tablePrefix);
+        String baseSql = SqlUtils.createSqlSelectCountStar(tablename, mTablePrefix);
         StringBuilder builder = new StringBuilder(baseSql);
-        appendWhereClause(builder, tablePrefix);
+        appendWhereClause(builder, mTablePrefix);
         String sql = builder.toString();
 
         if (LOG_SQL) {
@@ -518,7 +538,7 @@ private void appendWhereClause(StringBuilder builder, String tablePrefixOrNull)
                     builder.append(" AND ");
                 }
                 WhereCondition condition = iter.next();
-                condition.appendTo(builder, mDao.getTablename());
+                condition.appendTo(builder, mDao.getTablename(), mTablePrefix);
                 condition.appendValuesTo(values);
             }
         }
diff --git a/DaoCore/src/de/greenrobot/dao/query/UnionQueryBuilder.java b/DaoCore/src/de/greenrobot/dao/query/UnionQueryBuilder.java
index 4eaa5818..73390fdd 100644
--- a/DaoCore/src/de/greenrobot/dao/query/UnionQueryBuilder.java
+++ b/DaoCore/src/de/greenrobot/dao/query/UnionQueryBuilder.java
@@ -18,6 +18,8 @@
  */
 public class UnionQueryBuilder extends BaseBuilder {
 
+	private List<String> mRawSqlClauses;
+	
 	private List<QueryBuilder<?>> mQueryBuilders;
 	private AbstractDao<?, ?> mDao;
 	
@@ -25,9 +27,10 @@
 	private ArrayList<String> mParameters;
 	
 	protected UnionQueryBuilder(AbstractDao<?, ?> dao) {
-		super(dao);
+		super(dao, "T");
 		
 		mQueryBuilders = new ArrayList<QueryBuilder<?>>();
+		mRawSqlClauses = new ArrayList<String>();
 		mDao = dao;
 		
 	}
@@ -40,6 +43,12 @@ public UnionQueryBuilder union(QueryBuilder<?> queryBuilder) {
 		return this;
 	}
 	
+	public UnionQueryBuilder union(String sql) {
+		mRawSqlClauses.add(sql);
+		
+		return this;
+	}
+	
 	/** Adds the given properties to the ORDER BY section using ascending order. */
 	UnionQueryBuilder orderAsc(Property... properties) {
         orderAscOrDesc(" ASC", properties);
@@ -97,6 +106,17 @@ private void build() {
 			first = false;
         }
 		
+		for(String rawSql : mRawSqlClauses) {
+			
+			if(!first) {
+				sql.append(" UNION ");
+			}
+			
+			sql.append(rawSql);
+			
+			first = false;
+		}
+		
 		if (orderBuilder != null && orderBuilder.length() > 0) {
 			sql.append(" ORDER BY ").append(orderBuilder);
 		}
diff --git a/DaoCore/src/de/greenrobot/dao/query/WhereCondition.java b/DaoCore/src/de/greenrobot/dao/query/WhereCondition.java
index 1580318d..eb57e8cb 100644
--- a/DaoCore/src/de/greenrobot/dao/query/WhereCondition.java
+++ b/DaoCore/src/de/greenrobot/dao/query/WhereCondition.java
@@ -27,8 +27,8 @@
  */
 public interface WhereCondition {
 
-    void appendTo(StringBuilder builder, String masterTablePrefix);
-
+    void appendTo(StringBuilder builder, String masterTableName, String masterTablePrefix);
+    
     void appendValuesTo(List<Object> values);
 
     public abstract static class AbstractCondition implements WhereCondition {
@@ -135,14 +135,14 @@ public PropertyCondition(Property property, String op, Object[] values) {
         }
 
         @Override
-        public void appendTo(StringBuilder builder, String masterTablePrefix) {
+        public void appendTo(StringBuilder builder, String masterTableName, String masterTablePrefix) {
         	
         	String prefix = property.getColumnPrefix();
         	
             if (prefix != null && prefix.length() > 0) {
             	
-            	if(prefix.equals(masterTablePrefix)) {
-            		builder.append("T.");
+            	if(prefix.equals(masterTableName)) {
+            		builder.append(masterTablePrefix +".");
             	} else {
             		builder.append(prefix).append('.');	
             	}
@@ -150,6 +150,30 @@ public void appendTo(StringBuilder builder, String masterTablePrefix) {
             builder.append('\'').append(property.getColumnName()).append('\'').append(op);
         }
     }
+    
+    public static class ExistsCondition extends AbstractCondition {
+
+    	private Query<?> mExistsQuery;
+    	
+    	public ExistsCondition(QueryBuilder<?> existsQuery) {
+    		mExistsQuery = existsQuery.build();
+    	}
+    	
+		@Override
+		public void appendTo(StringBuilder builder, String masterTableName, String masterTablePrefix) {
+			builder.append("EXISTS (");
+			builder.append(mExistsQuery.sql);
+			builder.append(")");
+		}
+		
+		@Override
+		public void appendValuesTo(List<Object> valuesTarget) {
+			for(Object value : mExistsQuery.parameters) {
+				valuesTarget.add(value);
+			}
+		}
+    	
+    }
 
     public static class StringCondition extends AbstractCondition {
 
@@ -170,7 +194,7 @@ public StringCondition(String string, Object... values) {
         }
 
         @Override
-        public void appendTo(StringBuilder builder, String masterTablePrefix) {
+        public void appendTo(StringBuilder builder, String masterTableName, String masterTablePrefix) {
             builder.append(string);
         }
 
