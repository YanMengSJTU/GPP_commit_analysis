diff --git a/DaoCore/src/de/greenrobot/dao/Property.java b/DaoCore/src/de/greenrobot/dao/Property.java
index 51588181..edd81796 100644
--- a/DaoCore/src/de/greenrobot/dao/Property.java
+++ b/DaoCore/src/de/greenrobot/dao/Property.java
@@ -29,6 +29,7 @@
  */
 public class Property {
     public final int ordinal;
+    public final int ordinalZeroBased;
     public final Class<?> type;
     public final String name;
     public final boolean primaryKey;
@@ -36,6 +37,7 @@
 
     public Property(int ordinal, Class<?> type, String name, boolean primaryKey, String columnName) {
         this.ordinal = ordinal;
+        this.ordinalZeroBased = ordinal - 1;
         this.type = type;
         this.name = name;
         this.primaryKey = primaryKey;
diff --git a/DaoCore/src/de/greenrobot/dao/internal/DaoConfig.java b/DaoCore/src/de/greenrobot/dao/internal/DaoConfig.java
index a027db30..78cc7a46 100644
--- a/DaoCore/src/de/greenrobot/dao/internal/DaoConfig.java
+++ b/DaoCore/src/de/greenrobot/dao/internal/DaoConfig.java
@@ -114,10 +114,10 @@ public DaoConfig(Connection connection, Class<? extends AbstractDao<?, ?>> daoCl
 
         Property[] properties = new Property[propertyList.size()];
         for (Property property : propertyList) {
-            if (properties[property.ordinal] != null) {
+            if (properties[property.ordinalZeroBased] != null) {
                 throw new DaoException("Duplicate property ordinals");
             }
-            properties[property.ordinal] = property;
+            properties[property.ordinalZeroBased] = property;
         }
         return properties;
     }
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 15793d5f..5372acf2 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -76,7 +76,7 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
     */
     public static class Properties {
 <#list entity.propertiesColumns as property>
-        public final static Property ${property.propertyName?cap_first} = new Property(${property_index}, ${property.javaType}.class, "${property.propertyName}", ${property.primaryKey?string}, "${property.columnName}");
+        public final static Property ${property.propertyName?cap_first} = new Property(${property_index + 1}, ${property.javaType}.class, "${property.propertyName}", ${property.primaryKey?string}, "${property.columnName}");
 </#list>
     };
 
@@ -104,7 +104,7 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         JDBCUtils.execute( connection, "CREATE TABLE " + constraint + "'${entity.tableName}' (" + //
 <#list entity.propertiesColumns as property>
-                "'${property.columnName}' ${property.columnType}<#if property.constraints??> ${property.constraints} </#if><#if property_has_next>," +<#else>);");</#if> // ${property_index}: ${property.propertyName}
+                "'${property.columnName}' ${property.columnType}<#if property.constraints??> ${property.constraints} </#if><#if property_has_next>," +<#else>);");</#if> // ${property_index + 1}: ${property.propertyName}
 </#list>
 <#if entity.indexes?has_content >
         // Add Indexes
@@ -190,7 +190,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
         int index = 1;
 <#list entity.properties as property>
 <#if !property.notNull>
-        if (!cursor.isNull(offset + ${property_index})) {
+        if (!cursor.isNull(offset + ${property_index + 1})) {
     </#if>        builder.set${property.propertyName?cap_first}(resultSet.get${toCursorType[property.propertyType]}(offset + index));
 <#if !property.notNull>
         }
@@ -201,12 +201,11 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#--
 ############################## readEntity non-protobuff, constructor ############################## 
 -->
-		int index = 1;
         ${entity.className} entity = new ${entity.className}(
 <#list entity.properties as property>
-            <#if !property.notNull>JDBCUtils.isNull(resultSet, offset + index) ? null : </#if><#if
+            <#if !property.notNull>JDBCUtils.isNull(resultSet, offset + ${property_index + 1}) ? null : </#if><#if
             property.propertyType == "Byte">(byte) </#if><#if
-            property.propertyType == "Date">new java.util.Date(</#if>resultSet.get${toCursorType[property.propertyType]}(offset + index++)<#if
+            property.propertyType == "Date">new java.util.Date(</#if>resultSet.get${toCursorType[property.propertyType]}(offset + ${property_index + 1})<#if
             property.propertyType == "Boolean"> != 0</#if><#if
             property.propertyType == "Date">)</#if><#if property_has_next>,</#if> // ${property.propertyName}
 </#list>        
@@ -228,11 +227,10 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#if entity.protobuf>
         throw new UnsupportedOperationException("Protobuf objects cannot be modified");
 <#else> 
-		int index = 1;
 <#list entity.properties as property>
-        entity.set${property.propertyName?cap_first}(<#if !property.notNull>JDBCUtils.isNull(resultSet, offset + index) ? null : </#if><#if
+        entity.set${property.propertyName?cap_first}(<#if !property.notNull>JDBCUtils.isNull(resultSet, offset + ${property_index + 1}) ? null : </#if><#if
             property.propertyType == "Byte">(byte) </#if><#if
-            property.propertyType == "Date">new java.util.Date(</#if>resultSet.get${toCursorType[property.propertyType]}(offset + index++)<#if
+            property.propertyType == "Date">new java.util.Date(</#if>resultSet.get${toCursorType[property.propertyType]}(offset + ${property_index + 1})<#if
             property.propertyType == "Boolean"> != 0</#if><#if
             property.propertyType == "Date">)</#if>);
 </#list>
