diff --git a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
index f4d7835f..cdb557a2 100644
--- a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
+++ b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
@@ -281,6 +281,10 @@ protected void createEntityQueryBuilder() {
     entity.addIdProperty();
     entity.addStringProperty("text");
     entity.addStringProperty("text2");
+    entity.addIntProperty("intprop").complexJavaType();
+    entity.addIntProperty("intprop2").notNull();
+    entity.addIntProperty("intprop3").notNull().complexJavaType();
+    entity.addIntProperty("intprop4");
     entity.setEntityQueryBuilder(true);
   }
 
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 5e4d36a3..c8977b34 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -326,6 +326,22 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
             return this.build();
         }
         
+        /**
+         * <p>creates a {@link Query} for {@link ${entity.referencedClassName}} to find one by example.
+         * <p>Just nullable fields can be used. Just set one of these properties:
+         * <ul>
+<#list entity.properties as property>
+  <#if !property.primaryKey && property.complexJavaType>
+         * <li><code>${property.javaType} ${property.propertyName}</code></li>
+  </#if>
+</#list>
+         * </ul>
+         *
+         * @param example
+         *          the entity filled with example values
+         * 
+         * @return a {@link Query} to find the example entity
+         */
         public Query<${entity.referencedClassName}> findByExample(${entity.referencedClassName} example) { 
             if(example.get${entity.pkProperty.propertyName?cap_first}() != null) {
                 return findByPrimaryKey(example.get${entity.pkProperty.propertyName?cap_first}());
@@ -334,14 +350,12 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
             ArrayList<WhereCondition> conditions = new ArrayList<WhereCondition>();
 
 <#list entity.properties as property>
-  <#if !property.primaryKey>
+  <#if !property.primaryKey && property.complexJavaType>
             if (example.get${property.propertyName?cap_first}() != null) {
                 conditions.add(Properties.${property.propertyName?cap_first}.eq(example.get${property.propertyName?cap_first}()));
             }
   </#if>
 </#list>
-
-
            
             if (conditions.isEmpty()) {
                 throw new IllegalArgumentException("No example values given. Please provide at least one value!");
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index f54d05e8..f9c609f5 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -17,232 +17,254 @@
  */
 package de.greenrobot.daogenerator;
 
-/** Model class for an entity's property: a Java property mapped to a data base column. */
+/**
+ * Model class for an entity's property: a Java property mapped to a data base
+ * column.
+ */
 public class Property {
 
-    public static class PropertyBuilder {
-        private final Property property;
-
-        public PropertyBuilder(Schema schema, Entity entity, PropertyType propertyType, String propertyName) {
-            property = new Property(schema, entity, propertyType, propertyName);
-        }
-
-        public PropertyBuilder columnName(String columnName) {
-            property.columnName = columnName;
-            return this;
-        }
-
-        public PropertyBuilder columnType(String columnType) {
-            property.columnType = columnType;
-            return this;
-        }
-
-        public PropertyBuilder primaryKey() {
-            property.primaryKey = true;
-            return this;
-        }
-
-        public PropertyBuilder primaryKeyAsc() {
-            property.primaryKey = true;
-            property.pkAsc = true;
-            return this;
-        }
-
-        public PropertyBuilder primaryKeyDesc() {
-            property.primaryKey = true;
-            property.pkDesc = true;
-            return this;
-        }
-
-        public PropertyBuilder autoincrement() {
-            if (!property.primaryKey || property.propertyType != PropertyType.Long) {
-                throw new RuntimeException(
-                        "AUTOINCREMENT is only available to primary key properties of type long/Long");
-            }
-            property.pkAutoincrement = true;
-            return this;
-        }
-
-        public PropertyBuilder unique() {
-            property.unique = true;
-            return this;
-        }
-
-        public PropertyBuilder notNull() {
-            property.notNull = true;
-            return this;
-        }
-
-        public PropertyBuilder index() {
-            Index index = new Index();
-            index.addProperty(property);
-            property.entity.addIndex(index);
-            return this;
-        }
-
-        public PropertyBuilder indexAsc(String indexNameOrNull, boolean isUnique) {
-            Index index = new Index();
-            index.addPropertyAsc(property);
-            if (isUnique) {
-                index.makeUnique();
-            }
-            index.setName(indexNameOrNull);
-            property.entity.addIndex(index);
-            return this;
-        }
+  public static class PropertyBuilder {
+    private final Property property;
 
-        public PropertyBuilder indexDesc(String indexNameOrNull, boolean isUnique) {
-            Index index = new Index();
-            index.addPropertyDesc(property);
-            if (isUnique) {
-                index.makeUnique();
-            }
-            index.setName(indexNameOrNull);
-            property.entity.addIndex(index);
-            return this;
-        }
-
-        public Property getProperty() {
-            return property;
-        }
+    public PropertyBuilder(Schema schema, Entity entity, PropertyType propertyType, String propertyName) {
+      this.property = new Property(schema, entity, propertyType, propertyName);
     }
 
-    private final Schema schema;
-    private final Entity entity;
-    private PropertyType propertyType;
-    private final String propertyName;
-
-    private String columnName;
-    private String columnType;
-
-    private boolean primaryKey;
-    private boolean pkAsc;
-    private boolean pkDesc;
-    private boolean pkAutoincrement;
-
-    private boolean unique;
-    private boolean notNull;
-
-    /** Initialized in 2nd pass */
-    private String constraints;
-
-    private int ordinal;
-
-    private String javaType;
-
-    public Property(Schema schema, Entity entity, PropertyType propertyType, String propertyName) {
-        this.schema = schema;
-        this.entity = entity;
-        this.propertyName = propertyName;
-        this.propertyType = propertyType;
+    public PropertyBuilder columnName(String columnName) {
+      this.property.columnName = columnName;
+      return this;
     }
 
-    public String getPropertyName() {
-        return propertyName;
+    public PropertyBuilder columnType(String columnType) {
+      this.property.columnType = columnType;
+      return this;
     }
 
-    public PropertyType getPropertyType() {
-        return propertyType;
+    public PropertyBuilder primaryKey() {
+      this.property.primaryKey = true;
+      return this;
     }
 
-    public void setPropertyType(PropertyType propertyType) {
-        this.propertyType = propertyType;
+    public PropertyBuilder primaryKeyAsc() {
+      this.property.primaryKey = true;
+      this.property.pkAsc = true;
+      return this;
     }
 
-    public String getColumnName() {
-        return columnName;
+    public PropertyBuilder primaryKeyDesc() {
+      this.property.primaryKey = true;
+      this.property.pkDesc = true;
+      return this;
     }
 
-    public String getColumnType() {
-        return columnType;
+    public PropertyBuilder autoincrement() {
+      if (!this.property.primaryKey || (this.property.propertyType != PropertyType.Long)) {
+        throw new RuntimeException("AUTOINCREMENT is only available to primary key properties of type long/Long");
+      }
+      this.property.pkAutoincrement = true;
+      return this;
     }
 
-    public boolean isPrimaryKey() {
-        return primaryKey;
+    public PropertyBuilder unique() {
+      this.property.unique = true;
+      return this;
     }
 
-    public boolean isAutoincrement() {
-        return pkAutoincrement;
+    public PropertyBuilder notNull() {
+      this.property.notNull = true;
+      return this;
     }
 
-    public String getConstraints() {
-        return constraints;
+    public PropertyBuilder complexJavaType() {
+      this.property.complexJavaType = true;
+      return this;
     }
 
-    public boolean isUnique() {
-        return unique;
+    public PropertyBuilder index() {
+      Index index = new Index();
+      index.addProperty(this.property);
+      this.property.entity.addIndex(index);
+      return this;
     }
 
-    public boolean isNotNull() {
-        return notNull;
+    public PropertyBuilder indexAsc(String indexNameOrNull, boolean isUnique) {
+      Index index = new Index();
+      index.addPropertyAsc(this.property);
+      if (isUnique) {
+        index.makeUnique();
+      }
+      index.setName(indexNameOrNull);
+      this.property.entity.addIndex(index);
+      return this;
     }
 
-    public String getJavaType() {
-        return javaType;
+    public PropertyBuilder indexDesc(String indexNameOrNull, boolean isUnique) {
+      Index index = new Index();
+      index.addPropertyDesc(this.property);
+      if (isUnique) {
+        index.makeUnique();
+      }
+      index.setName(indexNameOrNull);
+      this.property.entity.addIndex(index);
+      return this;
     }
 
-    public int getOrdinal() {
-        return ordinal;
+    public Property getProperty() {
+      return this.property;
     }
+  }
 
-    public void setOrdinal(int ordinal) {
-        this.ordinal = ordinal;
-    }
+  private final Schema schema;
+  private final Entity entity;
+  private PropertyType propertyType;
+  private final String propertyName;
 
-    public Entity getEntity() {
-        return entity;
-    }
+  private String columnName;
+  private String columnType;
 
-    void init2ndPass() {
-        initConstraint();
-        if (columnType == null) {
-            columnType = schema.mapToDbType(propertyType);
-        }
-        if (columnName == null) {
-            columnName = DaoUtil.dbName(propertyName);
-        }
-        if (notNull) {
-            javaType = schema.mapToJavaTypeNotNull(propertyType);
-        } else {
-            javaType = schema.mapToJavaTypeNullable(propertyType);
-        }
-    }
+  private boolean primaryKey;
+  private boolean pkAsc;
+  private boolean pkDesc;
+  private boolean pkAutoincrement;
 
-    private void initConstraint() {
-        StringBuilder constraintBuilder = new StringBuilder();
-        if (primaryKey) {
-            constraintBuilder.append("PRIMARY KEY");
-            if (pkAsc) {
-                constraintBuilder.append(" ASC");
-            }
-            if (pkDesc) {
-                constraintBuilder.append(" DESC");
-            }
-            if (pkAutoincrement) {
-                constraintBuilder.append(" AUTOINCREMENT");
-            }
-        }
-        // Always have String PKs NOT NULL because SQLite is pretty strange in this respect:
-        // One could insert multiple rows with NULL PKs
-        if (notNull || (primaryKey && propertyType == PropertyType.String)) {
-            constraintBuilder.append(" NOT NULL");
-        }
-        if (unique) {
-            constraintBuilder.append(" UNIQUE");
-        }
-        String newContraints = constraintBuilder.toString().trim();
-        if (constraintBuilder.length() > 0) {
-            constraints = newContraints;
-        }
-    }
+  private boolean unique;
+  private boolean notNull;
+  private boolean complexJavaType;
 
-    void init3ndPass() {
-        // Nothing to do so far
-    }
+  /** Initialized in 2nd pass */
+  private String constraints;
+
+  private int ordinal;
+
+  private String javaType;
+
+  public Property(Schema schema, Entity entity, PropertyType propertyType, String propertyName) {
+    this.schema = schema;
+    this.entity = entity;
+    this.propertyName = propertyName;
+    this.propertyType = propertyType;
+  }
+
+  public String getPropertyName() {
+    return this.propertyName;
+  }
 
-    @Override
-    public String toString() {
-        return "Property " + propertyName + " of " + entity.getClassName();
+  public PropertyType getPropertyType() {
+    return this.propertyType;
+  }
+
+  public void setPropertyType(PropertyType propertyType) {
+    this.propertyType = propertyType;
+  }
+
+  public String getColumnName() {
+    return this.columnName;
+  }
+
+  public String getColumnType() {
+    return this.columnType;
+  }
+
+  public boolean isPrimaryKey() {
+    return this.primaryKey;
+  }
+
+  public boolean isAutoincrement() {
+    return this.pkAutoincrement;
+  }
+
+  public String getConstraints() {
+    return this.constraints;
+  }
+
+  public boolean isUnique() {
+    return this.unique;
+  }
+
+  public boolean isNotNull() {
+    return this.notNull;
+  }
+
+  public boolean isComplexJavaType() {
+    return this.complexJavaType;
+  }
+
+  public String getJavaType() {
+    return this.javaType;
+  }
+
+  public int getOrdinal() {
+    return this.ordinal;
+  }
+
+  public void setOrdinal(int ordinal) {
+    this.ordinal = ordinal;
+  }
+
+  public Entity getEntity() {
+    return this.entity;
+  }
+
+  void init2ndPass() {
+    this.initConstraint();
+    if (this.columnType == null) {
+      this.columnType = this.schema.mapToDbType(this.propertyType);
+    }
+    if (this.columnName == null) {
+      this.columnName = DaoUtil.dbName(this.propertyName);
+    }
+    if (this.notNull && !this.complexJavaType) {
+      this.javaType = this.schema.mapToJavaTypeNotNull(this.propertyType);
+    } else {
+      this.javaType = this.schema.mapToJavaTypeNullable(this.propertyType);
+      this.complexJavaType = true; // we deal with a complex data type
+    }
+    switch (this.propertyType) {
+    case ByteArray: // can be null everytime
+    case Date: // can be null everytime
+    case String: // can be null everytime
+      this.complexJavaType = true;
+    default:
+      break;
+    }
+  }
+
+  private void initConstraint() {
+    StringBuilder constraintBuilder = new StringBuilder();
+    if (this.primaryKey) {
+      constraintBuilder.append("PRIMARY KEY");
+      if (this.pkAsc) {
+        constraintBuilder.append(" ASC");
+      }
+      if (this.pkDesc) {
+        constraintBuilder.append(" DESC");
+      }
+      if (this.pkAutoincrement) {
+        constraintBuilder.append(" AUTOINCREMENT");
+      }
     }
+    // Always have String PKs NOT NULL because SQLite is pretty strange in this
+    // respect:
+    // One could insert multiple rows with NULL PKs
+    if (this.notNull || (this.primaryKey && (this.propertyType == PropertyType.String))) {
+      constraintBuilder.append(" NOT NULL");
+    }
+    if (this.unique) {
+      constraintBuilder.append(" UNIQUE");
+    }
+    String newContraints = constraintBuilder.toString().trim();
+    if (constraintBuilder.length() > 0) {
+      this.constraints = newContraints;
+    }
+  }
+
+  void init3ndPass() {
+    // Nothing to do so far
+  }
+
+  @Override
+  public String toString() {
+    return "Property " + this.propertyName + " of " + this.entity.getClassName();
+  }
 
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntity.java b/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntity.java
index f675631f..f6fc7c7d 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntity.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntity.java
@@ -9,6 +9,10 @@
     private Long id;
     private String text;
     private String text2;
+    private Integer intprop;
+    private int intprop2;
+    private Integer intprop3;
+    private Integer intprop4;
 
     public EntityQueryBuilderEntity() {
     }
@@ -17,10 +21,14 @@ public EntityQueryBuilderEntity(Long id) {
         this.id = id;
     }
 
-    public EntityQueryBuilderEntity(Long id, String text, String text2) {
+    public EntityQueryBuilderEntity(Long id, String text, String text2, Integer intprop, int intprop2, Integer intprop3, Integer intprop4) {
         this.id = id;
         this.text = text;
         this.text2 = text2;
+        this.intprop = intprop;
+        this.intprop2 = intprop2;
+        this.intprop3 = intprop3;
+        this.intprop4 = intprop4;
     }
 
     public Long getId() {
@@ -47,4 +55,36 @@ public void setText2(String text2) {
         this.text2 = text2;
     }
 
+    public Integer getIntprop() {
+        return intprop;
+    }
+
+    public void setIntprop(Integer intprop) {
+        this.intprop = intprop;
+    }
+
+    public int getIntprop2() {
+        return intprop2;
+    }
+
+    public void setIntprop2(int intprop2) {
+        this.intprop2 = intprop2;
+    }
+
+    public Integer getIntprop3() {
+        return intprop3;
+    }
+
+    public void setIntprop3(Integer intprop3) {
+        this.intprop3 = intprop3;
+    }
+
+    public Integer getIntprop4() {
+        return intprop4;
+    }
+
+    public void setIntprop4(Integer intprop4) {
+        this.intprop4 = intprop4;
+    }
+
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntityDao.java
index 4cb9f40f..a6919d18 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntityDao.java
@@ -30,6 +30,10 @@
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
         public final static Property Text2 = new Property(2, String.class, "text2", false, "TEXT2");
+        public final static Property Intprop = new Property(3, Integer.class, "intprop", false, "INTPROP");
+        public final static Property Intprop2 = new Property(4, int.class, "intprop2", false, "INTPROP2");
+        public final static Property Intprop3 = new Property(5, Integer.class, "intprop3", false, "INTPROP3");
+        public final static Property Intprop4 = new Property(6, Integer.class, "intprop4", false, "INTPROP4");
     };
 
 
@@ -47,7 +51,11 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
         db.execSQL("CREATE TABLE " + constraint + "'ENTITY_QUERY_BUILDER_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'TEXT' TEXT," + // 1: text
-                "'TEXT2' TEXT);"); // 2: text2
+                "'TEXT2' TEXT," + // 2: text2
+                "'INTPROP' INTEGER," + // 3: intprop
+                "'INTPROP2' INTEGER NOT NULL ," + // 4: intprop2
+                "'INTPROP3' INTEGER NOT NULL ," + // 5: intprop3
+                "'INTPROP4' INTEGER);"); // 6: intprop4
     }
 
     /** Drops the underlying database table. */
@@ -75,6 +83,18 @@ protected void bindValues(SQLiteStatement stmt, EntityQueryBuilderEntity entity)
         if (text2 != null) {
             stmt.bindString(3, text2);
         }
+ 
+        Integer intprop = entity.getIntprop();
+        if (intprop != null) {
+            stmt.bindLong(4, intprop);
+        }
+        stmt.bindLong(5, entity.getIntprop2());
+        stmt.bindLong(6, entity.getIntprop3());
+ 
+        Integer intprop4 = entity.getIntprop4();
+        if (intprop4 != null) {
+            stmt.bindLong(7, intprop4);
+        }
     }
 
     /** @inheritdoc */
@@ -89,7 +109,11 @@ public EntityQueryBuilderEntity readEntity(Cursor cursor, int offset) {
         EntityQueryBuilderEntity entity = new EntityQueryBuilderEntity( //
             cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
             cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // text
-            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // text2
+            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // text2
+            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // intprop
+            cursor.getInt(offset + 4), // intprop2
+            cursor.getInt(offset + 5), // intprop3
+            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // intprop4
         );
         return entity;
     }
@@ -100,6 +124,10 @@ public void readEntity(Cursor cursor, EntityQueryBuilderEntity entity, int offse
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
         entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
         entity.setText2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
+        entity.setIntprop(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
+        entity.setIntprop2(cursor.getInt(offset + 4));
+        entity.setIntprop3(cursor.getInt(offset + 5));
+        entity.setIntprop4(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
      }
     
     /** @inheritdoc */
@@ -143,6 +171,22 @@ public EntityQueryBuilderEntityQueryBuilder queryBuilder() {
             return this.build();
         }
         
+        /**
+         * <p>creates a {@link Query} for {@link EntityQueryBuilderEntity} to find one by example.
+         * <p>Just nullable fields can be used. Just set one of these properties:
+         * <ul>
+         * <li><code>String text</code></li>
+         * <li><code>String text2</code></li>
+         * <li><code>Integer intprop</code></li>
+         * <li><code>Integer intprop3</code></li>
+         * <li><code>Integer intprop4</code></li>
+         * </ul>
+         *
+         * @param example
+         *          the entity filled with example values
+         * 
+         * @return a {@link Query} to find the example entity
+         */
         public Query<EntityQueryBuilderEntity> findByExample(EntityQueryBuilderEntity example) { 
             if(example.getId() != null) {
                 return findByPrimaryKey(example.getId());
@@ -156,8 +200,15 @@ public EntityQueryBuilderEntityQueryBuilder queryBuilder() {
             if (example.getText2() != null) {
                 conditions.add(Properties.Text2.eq(example.getText2()));
             }
-
-
+            if (example.getIntprop() != null) {
+                conditions.add(Properties.Intprop.eq(example.getIntprop()));
+            }
+            if (example.getIntprop3() != null) {
+                conditions.add(Properties.Intprop3.eq(example.getIntprop3()));
+            }
+            if (example.getIntprop4() != null) {
+                conditions.add(Properties.Intprop4.eq(example.getIntprop4()));
+            }
            
             if (conditions.isEmpty()) {
                 throw new IllegalArgumentException("No example values given. Please provide at least one value!");
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/EntityQueryBuilderEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/EntityQueryBuilderEntityTest.java
index 70d5e2af..50a17641 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/EntityQueryBuilderEntityTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/EntityQueryBuilderEntityTest.java
@@ -18,6 +18,8 @@ protected EntityQueryBuilderEntity createEntity(Long key) {
     EntityQueryBuilderEntity entity = new EntityQueryBuilderEntity();
     entity.setId(key);
     entity.setText("Entity " + key);
+    entity.setIntprop2(2);
+    entity.setIntprop3(3);
     return entity;
   }
 
@@ -64,6 +66,8 @@ public void testFindByExampleStringMultiResult() {
 
     EntityQueryBuilderEntity example = new EntityQueryBuilderEntity();
     example.setText2("text");
+    example.setIntprop2(3);
+    example.setIntprop3(3);
     List<EntityQueryBuilderEntity> loaded = this.dao.queryBuilder().findByExample(example).list();
     assertEquals(list.size(), loaded.size());
   }
