diff --git a/DaoExample/build.gradle b/DaoExample/build.gradle
index 0a80805c..7c800cb8 100644
--- a/DaoExample/build.gradle
+++ b/DaoExample/build.gradle
@@ -1,28 +1,31 @@
-// Just a dummy script building a useless jar file. Waiting for version 0.3 of Android's new build system. 
-apply plugin: 'java'
-apply plugin: 'maven'
-
-group = 'de.greenrobot'
-version = '1.3.1'
-sourceCompatibility = 1.6
-
-repositories {
+buildscript {
+  repositories {
     mavenCentral()
+  }
+
+  dependencies {
+    classpath 'com.android.tools.build:gradle:0.5.1'
+  }
 }
 
+apply plugin: 'android'
+apply plugin: 'greendao'
+
 dependencies {
-    compile('de.greenrobot:greendao:1.3.1')
+  compile project(':DaoCore')
 }
 
-sourceSets {
-    main {
-        java {
-            srcDir 'src'
-            srcDir 'src-gen'
-            srcDir 'gen'
-        }
-    }
+android {
+  compileSdkVersion 17
+  buildToolsVersion "17"
+  
+  defaultConfig {
+    targetSdkVersion 15
+    minSdkVersion 8
+    versionCode 1
+  }
 }
-artifacts {
-    archives jar
+
+generateDaoSources {
+  genSrcPackage = "de.greenrobot.daoexample";
 }
diff --git a/DaoExample/libs/greendao-1.3.0-beta-1.jar b/DaoExample/libs/greendao-1.3.0-beta-1.jar
deleted file mode 100644
index 473993d4..00000000
Binary files a/DaoExample/libs/greendao-1.3.0-beta-1.jar and /dev/null differ
diff --git a/DaoExample/proguard.cfg b/DaoExample/proguard.cfg
deleted file mode 100644
index 12dd0392..00000000
--- a/DaoExample/proguard.cfg
+++ /dev/null
@@ -1,36 +0,0 @@
--optimizationpasses 5
--dontusemixedcaseclassnames
--dontskipnonpubliclibraryclasses
--dontpreverify
--verbose
--optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
-
--keep public class * extends android.app.Activity
--keep public class * extends android.app.Application
--keep public class * extends android.app.Service
--keep public class * extends android.content.BroadcastReceiver
--keep public class * extends android.content.ContentProvider
--keep public class * extends android.app.backup.BackupAgentHelper
--keep public class * extends android.preference.Preference
--keep public class com.android.vending.licensing.ILicensingService
-
--keepclasseswithmembernames class * {
-    native <methods>;
-}
-
--keepclasseswithmembernames class * {
-    public <init>(android.content.Context, android.util.AttributeSet);
-}
-
--keepclasseswithmembernames class * {
-    public <init>(android.content.Context, android.util.AttributeSet, int);
-}
-
--keepclassmembers enum * {
-    public static **[] values();
-    public static ** valueOf(java.lang.String);
-}
-
--keep class * implements android.os.Parcelable {
-  public static final android.os.Parcelable$Creator *;
-}
diff --git a/DaoExample/project.properties b/DaoExample/project.properties
deleted file mode 100644
index c957743c..00000000
--- a/DaoExample/project.properties
+++ /dev/null
@@ -1,11 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system use,
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-
-# Project target.
-target=android-4
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java b/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
deleted file mode 100644
index ed2996f7..00000000
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
+++ /dev/null
@@ -1,107 +0,0 @@
-package de.greenrobot.daoexample;
-
-import java.util.List;
-import de.greenrobot.daoexample.DaoSession;
-import de.greenrobot.dao.DaoException;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
-/**
- * Entity mapped to table CUSTOMER.
- */
-public class Customer {
-
-    private Long id;
-    /** Not-null value. */
-    private String name;
-
-    /** Used to resolve relations */
-    private transient DaoSession daoSession;
-
-    /** Used for active entity operations. */
-    private transient CustomerDao myDao;
-
-    private List<Order> orders;
-
-    public Customer() {
-    }
-
-    public Customer(Long id) {
-        this.id = id;
-    }
-
-    public Customer(Long id, String name) {
-        this.id = id;
-        this.name = name;
-    }
-
-    /** called by internal mechanisms, do not call yourself. */
-    public void __setDaoSession(DaoSession daoSession) {
-        this.daoSession = daoSession;
-        myDao = daoSession != null ? daoSession.getCustomerDao() : null;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    /** Not-null value. */
-    public String getName() {
-        return name;
-    }
-
-    /** Not-null value; ensure this value is available before it is saved to the database. */
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
-    public List<Order> getOrders() {
-        if (orders == null) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
-            OrderDao targetDao = daoSession.getOrderDao();
-            List<Order> ordersNew = targetDao._queryCustomer_Orders(id);
-            synchronized (this) {
-                if(orders == null) {
-                    orders = ordersNew;
-                }
-            }
-        }
-        return orders;
-    }
-
-    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
-    public synchronized void resetOrders() {
-        orders = null;
-    }
-
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
-    public void delete() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.delete(this);
-    }
-
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
-    public void update() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.update(this);
-    }
-
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
-    public void refresh() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.refresh(this);
-    }
-
-}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
deleted file mode 100644
index 25a88fc3..00000000
--- a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
+++ /dev/null
@@ -1,120 +0,0 @@
-package de.greenrobot.daoexample;
-
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
-
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daoexample.Customer;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
- * DAO for table CUSTOMER.
-*/
-public class CustomerDao extends AbstractDao<Customer, Long> {
-
-    public static final String TABLENAME = "CUSTOMER";
-
-    /**
-     * Properties of entity Customer.<br/>
-     * Can be used for QueryBuilder and for referencing column names.
-    */
-    public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
-    };
-
-    private DaoSession daoSession;
-
-
-    public CustomerDao(DaoConfig config) {
-        super(config);
-    }
-    
-    public CustomerDao(DaoConfig config, DaoSession daoSession) {
-        super(config, daoSession);
-        this.daoSession = daoSession;
-    }
-
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'CUSTOMER' (" + //
-                "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'NAME' TEXT NOT NULL );"); // 1: name
-    }
-
-    /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
-        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CUSTOMER'";
-        db.execSQL(sql);
-    }
-
-    /** @inheritdoc */
-    @Override
-    protected void bindValues(SQLiteStatement stmt, Customer entity) {
-        stmt.clearBindings();
- 
-        Long id = entity.getId();
-        if (id != null) {
-            stmt.bindLong(1, id);
-        }
-        stmt.bindString(2, entity.getName());
-    }
-
-    @Override
-    protected void attachEntity(Customer entity) {
-        super.attachEntity(entity);
-        entity.__setDaoSession(daoSession);
-    }
-
-    /** @inheritdoc */
-    @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
-    }    
-
-    /** @inheritdoc */
-    @Override
-    public Customer readEntity(Cursor cursor, int offset) {
-        Customer entity = new Customer( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.getString(offset + 1) // name
-        );
-        return entity;
-    }
-     
-    /** @inheritdoc */
-    @Override
-    public void readEntity(Cursor cursor, Customer entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setName(cursor.getString(offset + 1));
-     }
-    
-    /** @inheritdoc */
-    @Override
-    protected Long updateKeyAfterInsert(Customer entity, long rowId) {
-        entity.setId(rowId);
-        return rowId;
-    }
-    
-    /** @inheritdoc */
-    @Override
-    public Long getKey(Customer entity) {
-        if(entity != null) {
-            return entity.getId();
-        } else {
-            return null;
-        }
-    }
-
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
-        return true;
-    }
-    
-}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java b/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
deleted file mode 100644
index e3d85d15..00000000
--- a/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
+++ /dev/null
@@ -1,78 +0,0 @@
-package de.greenrobot.daoexample;
-
-import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteDatabase.CursorFactory;
-import android.database.sqlite.SQLiteOpenHelper;
-import android.util.Log;
-import de.greenrobot.dao.AbstractDaoMaster;
-import de.greenrobot.dao.identityscope.IdentityScopeType;
-
-import de.greenrobot.daoexample.NoteDao;
-import de.greenrobot.daoexample.CustomerDao;
-import de.greenrobot.daoexample.OrderDao;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
- * Master of DAO (schema version 3): knows all DAOs.
-*/
-public class DaoMaster extends AbstractDaoMaster {
-    public static final int SCHEMA_VERSION = 3;
-
-    /** Creates underlying database table using DAOs. */
-    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
-        NoteDao.createTable(db, ifNotExists);
-        CustomerDao.createTable(db, ifNotExists);
-        OrderDao.createTable(db, ifNotExists);
-    }
-    
-    /** Drops underlying database table using DAOs. */
-    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
-        NoteDao.dropTable(db, ifExists);
-        CustomerDao.dropTable(db, ifExists);
-        OrderDao.dropTable(db, ifExists);
-    }
-    
-    public static abstract class OpenHelper extends SQLiteOpenHelper {
-
-        public OpenHelper(Context context, String name, CursorFactory factory) {
-            super(context, name, factory, SCHEMA_VERSION);
-        }
-
-        @Override
-        public void onCreate(SQLiteDatabase db) {
-            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
-            createAllTables(db, false);
-        }
-    }
-    
-    /** WARNING: Drops all table on Upgrade! Use only during development. */
-    public static class DevOpenHelper extends OpenHelper {
-        public DevOpenHelper(Context context, String name, CursorFactory factory) {
-            super(context, name, factory);
-        }
-
-        @Override
-        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
-            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
-            dropAllTables(db, true);
-            onCreate(db);
-        }
-    }
-
-    public DaoMaster(SQLiteDatabase db) {
-        super(db, SCHEMA_VERSION);
-        registerDaoClass(NoteDao.class);
-        registerDaoClass(CustomerDao.class);
-        registerDaoClass(OrderDao.class);
-    }
-    
-    public DaoSession newSession() {
-        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
-    }
-    
-    public DaoSession newSession(IdentityScopeType type) {
-        return new DaoSession(db, type, daoConfigMap);
-    }
-    
-}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java b/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java
deleted file mode 100644
index e6d19f42..00000000
--- a/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java
+++ /dev/null
@@ -1,77 +0,0 @@
-package de.greenrobot.daoexample;
-
-import android.database.sqlite.SQLiteDatabase;
-
-import java.util.Map;
-
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.AbstractDaoSession;
-import de.greenrobot.dao.identityscope.IdentityScopeType;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daoexample.Note;
-import de.greenrobot.daoexample.Customer;
-import de.greenrobot.daoexample.Order;
-
-import de.greenrobot.daoexample.NoteDao;
-import de.greenrobot.daoexample.CustomerDao;
-import de.greenrobot.daoexample.OrderDao;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-
-/**
- * {@inheritDoc}
- * 
- * @see de.greenrobot.dao.AbstractDaoSession
- */
-public class DaoSession extends AbstractDaoSession {
-
-    private final DaoConfig noteDaoConfig;
-    private final DaoConfig customerDaoConfig;
-    private final DaoConfig orderDaoConfig;
-
-    private final NoteDao noteDao;
-    private final CustomerDao customerDao;
-    private final OrderDao orderDao;
-
-    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
-            daoConfigMap) {
-        super(db);
-
-        noteDaoConfig = daoConfigMap.get(NoteDao.class).clone();
-        noteDaoConfig.initIdentityScope(type);
-
-        customerDaoConfig = daoConfigMap.get(CustomerDao.class).clone();
-        customerDaoConfig.initIdentityScope(type);
-
-        orderDaoConfig = daoConfigMap.get(OrderDao.class).clone();
-        orderDaoConfig.initIdentityScope(type);
-
-        noteDao = new NoteDao(noteDaoConfig, this);
-        customerDao = new CustomerDao(customerDaoConfig, this);
-        orderDao = new OrderDao(orderDaoConfig, this);
-
-        registerDao(Note.class, noteDao);
-        registerDao(Customer.class, customerDao);
-        registerDao(Order.class, orderDao);
-    }
-    
-    public void clear() {
-        noteDaoConfig.getIdentityScope().clear();
-        customerDaoConfig.getIdentityScope().clear();
-        orderDaoConfig.getIdentityScope().clear();
-    }
-
-    public NoteDao getNoteDao() {
-        return noteDao;
-    }
-
-    public CustomerDao getCustomerDao() {
-        return customerDao;
-    }
-
-    public OrderDao getOrderDao() {
-        return orderDao;
-    }
-
-}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
deleted file mode 100644
index ed057058..00000000
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package de.greenrobot.daoexample;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
-/**
- * Entity mapped to table NOTE.
- */
-public class Note {
-
-    private Long id;
-    /** Not-null value. */
-    private String text;
-    private String comment;
-    private java.util.Date date;
-
-    public Note() {
-    }
-
-    public Note(Long id) {
-        this.id = id;
-    }
-
-    public Note(Long id, String text, String comment, java.util.Date date) {
-        this.id = id;
-        this.text = text;
-        this.comment = comment;
-        this.date = date;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    /** Not-null value. */
-    public String getText() {
-        return text;
-    }
-
-    /** Not-null value; ensure this value is available before it is saved to the database. */
-    public void setText(String text) {
-        this.text = text;
-    }
-
-    public String getComment() {
-        return comment;
-    }
-
-    public void setComment(String comment) {
-        this.comment = comment;
-    }
-
-    public java.util.Date getDate() {
-        return date;
-    }
-
-    public void setDate(java.util.Date date) {
-        this.date = date;
-    }
-
-}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
deleted file mode 100644
index 0fcaceee..00000000
--- a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
+++ /dev/null
@@ -1,129 +0,0 @@
-package de.greenrobot.daoexample;
-
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
-
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.DaoConfig;
-
-import de.greenrobot.daoexample.Note;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
- * DAO for table NOTE.
-*/
-public class NoteDao extends AbstractDao<Note, Long> {
-
-    public static final String TABLENAME = "NOTE";
-
-    /**
-     * Properties of entity Note.<br/>
-     * Can be used for QueryBuilder and for referencing column names.
-    */
-    public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
-        public final static Property Comment = new Property(2, String.class, "comment", false, "COMMENT");
-        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
-    };
-
-
-    public NoteDao(DaoConfig config) {
-        super(config);
-    }
-    
-    public NoteDao(DaoConfig config, DaoSession daoSession) {
-        super(config, daoSession);
-    }
-
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'NOTE' (" + //
-                "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'TEXT' TEXT NOT NULL ," + // 1: text
-                "'COMMENT' TEXT," + // 2: comment
-                "'DATE' INTEGER);"); // 3: date
-    }
-
-    /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
-        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
-        db.execSQL(sql);
-    }
-
-    /** @inheritdoc */
-    @Override
-    protected void bindValues(SQLiteStatement stmt, Note entity) {
-        stmt.clearBindings();
- 
-        Long id = entity.getId();
-        if (id != null) {
-            stmt.bindLong(1, id);
-        }
-        stmt.bindString(2, entity.getText());
- 
-        String comment = entity.getComment();
-        if (comment != null) {
-            stmt.bindString(3, comment);
-        }
- 
-        java.util.Date date = entity.getDate();
-        if (date != null) {
-            stmt.bindLong(4, date.getTime());
-        }
-    }
-
-    /** @inheritdoc */
-    @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
-    }    
-
-    /** @inheritdoc */
-    @Override
-    public Note readEntity(Cursor cursor, int offset) {
-        Note entity = new Note( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.getString(offset + 1), // text
-            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comment
-            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // date
-        );
-        return entity;
-    }
-     
-    /** @inheritdoc */
-    @Override
-    public void readEntity(Cursor cursor, Note entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setText(cursor.getString(offset + 1));
-        entity.setComment(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
-        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
-     }
-    
-    /** @inheritdoc */
-    @Override
-    protected Long updateKeyAfterInsert(Note entity, long rowId) {
-        entity.setId(rowId);
-        return rowId;
-    }
-    
-    /** @inheritdoc */
-    @Override
-    public Long getKey(Note entity) {
-        if(entity != null) {
-            return entity.getId();
-        } else {
-            return null;
-        }
-    }
-
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
-        return true;
-    }
-    
-}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
deleted file mode 100644
index 95ecfb86..00000000
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
+++ /dev/null
@@ -1,121 +0,0 @@
-package de.greenrobot.daoexample;
-
-import de.greenrobot.daoexample.DaoSession;
-import de.greenrobot.dao.DaoException;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
-/**
- * Entity mapped to table ORDERS.
- */
-public class Order {
-
-    private Long id;
-    private java.util.Date date;
-    private long customerId;
-
-    /** Used to resolve relations */
-    private transient DaoSession daoSession;
-
-    /** Used for active entity operations. */
-    private transient OrderDao myDao;
-
-    private Customer customer;
-    private Long customer__resolvedKey;
-
-
-    public Order() {
-    }
-
-    public Order(Long id) {
-        this.id = id;
-    }
-
-    public Order(Long id, java.util.Date date, long customerId) {
-        this.id = id;
-        this.date = date;
-        this.customerId = customerId;
-    }
-
-    /** called by internal mechanisms, do not call yourself. */
-    public void __setDaoSession(DaoSession daoSession) {
-        this.daoSession = daoSession;
-        myDao = daoSession != null ? daoSession.getOrderDao() : null;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    public java.util.Date getDate() {
-        return date;
-    }
-
-    public void setDate(java.util.Date date) {
-        this.date = date;
-    }
-
-    public long getCustomerId() {
-        return customerId;
-    }
-
-    public void setCustomerId(long customerId) {
-        this.customerId = customerId;
-    }
-
-    /** To-one relationship, resolved on first access. */
-    public Customer getCustomer() {
-        long __key = this.customerId;
-        if (customer__resolvedKey == null || !customer__resolvedKey.equals(__key)) {
-            if (daoSession == null) {
-                throw new DaoException("Entity is detached from DAO context");
-            }
-            CustomerDao targetDao = daoSession.getCustomerDao();
-            Customer customerNew = targetDao.load(__key);
-            synchronized (this) {
-                customer = customerNew;
-            	customer__resolvedKey = __key;
-            }
-        }
-        return customer;
-    }
-
-    public void setCustomer(Customer customer) {
-        if (customer == null) {
-            throw new DaoException("To-one property 'customerId' has not-null constraint; cannot set to-one to null");
-        }
-        synchronized (this) {
-            this.customer = customer;
-            customerId = customer.getId();
-            customer__resolvedKey = customerId;
-        }
-    }
-
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
-    public void delete() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.delete(this);
-    }
-
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
-    public void update() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.update(this);
-    }
-
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
-    public void refresh() {
-        if (myDao == null) {
-            throw new DaoException("Entity is detached from DAO context");
-        }    
-        myDao.refresh(this);
-    }
-
-}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
deleted file mode 100644
index d3ac55a7..00000000
--- a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
+++ /dev/null
@@ -1,243 +0,0 @@
-package de.greenrobot.daoexample;
-
-import java.util.List;
-import java.util.ArrayList;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
-
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.SqlUtils;
-import de.greenrobot.dao.internal.DaoConfig;
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.query.QueryBuilder;
-
-import de.greenrobot.daoexample.Order;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
- * DAO for table ORDERS.
-*/
-public class OrderDao extends AbstractDao<Order, Long> {
-
-    public static final String TABLENAME = "ORDERS";
-
-    /**
-     * Properties of entity Order.<br/>
-     * Can be used for QueryBuilder and for referencing column names.
-    */
-    public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
-        public final static Property CustomerId = new Property(2, long.class, "customerId", false, "CUSTOMER_ID");
-    };
-
-    private DaoSession daoSession;
-
-    private Query<Order> customer_OrdersQuery;
-
-    public OrderDao(DaoConfig config) {
-        super(config);
-    }
-    
-    public OrderDao(DaoConfig config, DaoSession daoSession) {
-        super(config, daoSession);
-        this.daoSession = daoSession;
-    }
-
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'ORDERS' (" + //
-                "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'DATE' INTEGER," + // 1: date
-                "'CUSTOMER_ID' INTEGER NOT NULL );"); // 2: customerId
-    }
-
-    /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
-        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDERS'";
-        db.execSQL(sql);
-    }
-
-    /** @inheritdoc */
-    @Override
-    protected void bindValues(SQLiteStatement stmt, Order entity) {
-        stmt.clearBindings();
- 
-        Long id = entity.getId();
-        if (id != null) {
-            stmt.bindLong(1, id);
-        }
- 
-        java.util.Date date = entity.getDate();
-        if (date != null) {
-            stmt.bindLong(2, date.getTime());
-        }
-        stmt.bindLong(3, entity.getCustomerId());
-    }
-
-    @Override
-    protected void attachEntity(Order entity) {
-        super.attachEntity(entity);
-        entity.__setDaoSession(daoSession);
-    }
-
-    /** @inheritdoc */
-    @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
-    }    
-
-    /** @inheritdoc */
-    @Override
-    public Order readEntity(Cursor cursor, int offset) {
-        Order entity = new Order( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
-            cursor.getLong(offset + 2) // customerId
-        );
-        return entity;
-    }
-     
-    /** @inheritdoc */
-    @Override
-    public void readEntity(Cursor cursor, Order entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
-        entity.setCustomerId(cursor.getLong(offset + 2));
-     }
-    
-    /** @inheritdoc */
-    @Override
-    protected Long updateKeyAfterInsert(Order entity, long rowId) {
-        entity.setId(rowId);
-        return rowId;
-    }
-    
-    /** @inheritdoc */
-    @Override
-    public Long getKey(Order entity) {
-        if(entity != null) {
-            return entity.getId();
-        } else {
-            return null;
-        }
-    }
-
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
-        return true;
-    }
-    
-    /** Internal query to resolve the "orders" to-many relationship of Customer. */
-    public List<Order> _queryCustomer_Orders(long customerId) {
-        synchronized (this) {
-            if (customer_OrdersQuery == null) {
-                QueryBuilder<Order> queryBuilder = queryBuilder();
-                queryBuilder.where(Properties.CustomerId.eq(null));
-                queryBuilder.orderRaw("DATE ASC");
-                customer_OrdersQuery = queryBuilder.build();
-            }
-        }
-        Query<Order> query = customer_OrdersQuery.forCurrentThread();
-        query.setParameter(0, customerId);
-        return query.list();
-    }
-
-    private String selectDeep;
-
-    protected String getSelectDeep() {
-        if (selectDeep == null) {
-            StringBuilder builder = new StringBuilder("SELECT ");
-            SqlUtils.appendColumns(builder, "T", getAllColumns());
-            builder.append(',');
-            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomerDao().getAllColumns());
-            builder.append(" FROM ORDERS T");
-            builder.append(" LEFT JOIN CUSTOMER T0 ON T.'CUSTOMER_ID'=T0.'_id'");
-            builder.append(' ');
-            selectDeep = builder.toString();
-        }
-        return selectDeep;
-    }
-    
-    protected Order loadCurrentDeep(Cursor cursor, boolean lock) {
-        Order entity = loadCurrent(cursor, 0, lock);
-        int offset = getAllColumns().length;
-
-        Customer customer = loadCurrentOther(daoSession.getCustomerDao(), cursor, offset);
-         if(customer != null) {
-            entity.setCustomer(customer);
-        }
-
-        return entity;    
-    }
-
-    public Order loadDeep(Long key) {
-        assertSinglePk();
-        if (key == null) {
-            return null;
-        }
-
-        StringBuilder builder = new StringBuilder(getSelectDeep());
-        builder.append("WHERE ");
-        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
-        String sql = builder.toString();
-        
-        String[] keyArray = new String[] { key.toString() };
-        Cursor cursor = db.rawQuery(sql, keyArray);
-        
-        try {
-            boolean available = cursor.moveToFirst();
-            if (!available) {
-                return null;
-            } else if (!cursor.isLast()) {
-                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
-            }
-            return loadCurrentDeep(cursor, true);
-        } finally {
-            cursor.close();
-        }
-    }
-    
-    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
-    public List<Order> loadAllDeepFromCursor(Cursor cursor) {
-        int count = cursor.getCount();
-        List<Order> list = new ArrayList<Order>(count);
-        
-        if (cursor.moveToFirst()) {
-            if (identityScope != null) {
-                identityScope.lock();
-                identityScope.reserveRoom(count);
-            }
-            try {
-                do {
-                    list.add(loadCurrentDeep(cursor, false));
-                } while (cursor.moveToNext());
-            } finally {
-                if (identityScope != null) {
-                    identityScope.unlock();
-                }
-            }
-        }
-        return list;
-    }
-    
-    protected List<Order> loadDeepAllAndCloseCursor(Cursor cursor) {
-        try {
-            return loadAllDeepFromCursor(cursor);
-        } finally {
-            cursor.close();
-        }
-    }
-    
-
-    /** A raw-style query where you can pass any WHERE clause and arguments. */
-    public List<Order> queryDeep(String where, String... selectionArg) {
-        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
-        return loadDeepAllAndCloseCursor(cursor);
-    }
- 
-}
diff --git a/DaoExample/src-test/de/greenrobot/daoexample/CustomerOrderTest.java b/DaoExample/src/instrumentTest/java/de/greenrobot/daoexample/CustomerOrderTest.java
similarity index 100%
rename from DaoExample/src-test/de/greenrobot/daoexample/CustomerOrderTest.java
rename to DaoExample/src/instrumentTest/java/de/greenrobot/daoexample/CustomerOrderTest.java
diff --git a/DaoExample/src-test/de/greenrobot/daoexample/NoteTest.java b/DaoExample/src/instrumentTest/java/de/greenrobot/daoexample/NoteTest.java
similarity index 100%
rename from DaoExample/src-test/de/greenrobot/daoexample/NoteTest.java
rename to DaoExample/src/instrumentTest/java/de/greenrobot/daoexample/NoteTest.java
diff --git a/DaoExample/AndroidManifest.xml b/DaoExample/src/main/AndroidManifest.xml
similarity index 100%
rename from DaoExample/AndroidManifest.xml
rename to DaoExample/src/main/AndroidManifest.xml
diff --git a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java b/DaoExample/src/main/java/de/greenrobot/daoexample/NoteActivity.java
similarity index 100%
rename from DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
rename to DaoExample/src/main/java/de/greenrobot/daoexample/NoteActivity.java
diff --git a/DaoExample/src/main/orm/de/greenrobot/daogenerator/gentest/Customer.java b/DaoExample/src/main/orm/de/greenrobot/daogenerator/gentest/Customer.java
new file mode 100644
index 00000000..20087abe
--- /dev/null
+++ b/DaoExample/src/main/orm/de/greenrobot/daogenerator/gentest/Customer.java
@@ -0,0 +1,17 @@
+package de.greemrobot.daogenerator.gentest;
+
+import de.greenrobot.daogenerator.annotation.Entity;
+import de.greenrobot.daogenerator.annotation.NotNull;
+import java.util.Date;
+import java.util.List;
+
+@Entity(table = "Customer")
+public class Customer {
+  
+  @NotNull
+  String name;
+  
+  @ToMany(relation = "customer", orderedBy = "date")
+  List<Order> ordersSortedByDate;
+  
+}
diff --git a/DaoExample/src/main/orm/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExample/src/main/orm/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
new file mode 100644
index 00000000..0139e325
--- /dev/null
+++ b/DaoExample/src/main/orm/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package de.greenrobot.daogenerator.gentest;
+
+import de.greenrobot.daogenerator.DaoGenerator;
+import de.greenrobot.daogenerator.Entity;
+import de.greenrobot.daogenerator.Property;
+import de.greenrobot.daogenerator.Schema;
+import de.greenrobot.daogenerator.ToMany;
+
+/**
+ * Generates entities and DAOs for the example project DaoExample.
+ * 
+ * Run it as a Java application (not Android).
+ * 
+ * @author Markus
+ */
+public class ExampleDaoGenerator {
+
+    public static void main(String[] args) throws Exception {
+        Schema schema = new Schema(3, "de.greenrobot.daoexample");
+
+        addNote(schema);
+        addCustomerOrder(schema);
+        addContact(schema);
+
+        new DaoGenerator().generateAll(schema, "../DaoExample/src-gen");
+    }
+
+    private static void addNote(Schema schema) {
+        Entity note = schema.addEntity("Note");
+        note.addIdProperty();
+        note.addStringProperty("text").notNull();
+        note.addStringProperty("comment");
+        note.addDateProperty("date");
+    }
+
+    private static void addCustomerOrder(Schema schema) {
+        Entity customer = schema.addEntity("Customer");
+        customer.addIdProperty();
+        customer.addStringProperty("name").notNull();
+
+        Entity order = schema.addEntity("Order");
+        order.setTableName("ORDERS"); // "ORDER" is a reserved keyword
+        order.addIdProperty();
+        Property orderDate = order.addDateProperty("date").getProperty();
+        Property customerId = order.addLongProperty("customerId").notNull().getProperty();
+        order.addToOne(customer, customerId);
+
+        ToMany customerToOrders = customer.addToMany(order, customerId);
+        customerToOrders.setName("orders");
+        customerToOrders.orderAsc(orderDate);
+    }
+
+    private static void addContact(Schema schema) {
+        Entity contact = schema.addEntity("Contact");
+        contact.addIdProperty();
+        contact.addStringProperty("name");
+        contact.addSerializedProperty("java.security.PublicKey", "publicKey");
+    }
+    
+}
diff --git a/DaoExample/src/main/orm/de/greenrobot/daogenerator/gentest/Note.java b/DaoExample/src/main/orm/de/greenrobot/daogenerator/gentest/Note.java
new file mode 100644
index 00000000..0e63f9e1
--- /dev/null
+++ b/DaoExample/src/main/orm/de/greenrobot/daogenerator/gentest/Note.java
@@ -0,0 +1,17 @@
+package de.greemrobot.daogenerator.gentest;
+
+import de.greenrobot.daogenerator.annotation.Entity;
+import de.greenrobot.daogenerator.annotation.NotNull;
+import java.util.Date;
+
+@Entity(table = "Note")
+public class Note {
+  
+  @NotNull
+  String text;
+  
+  String comment;
+  
+  Date date;
+  
+}
diff --git a/DaoExample/src/main/orm/de/greenrobot/daogenerator/gentest/Order.java b/DaoExample/src/main/orm/de/greenrobot/daogenerator/gentest/Order.java
new file mode 100644
index 00000000..2116cc63
--- /dev/null
+++ b/DaoExample/src/main/orm/de/greenrobot/daogenerator/gentest/Order.java
@@ -0,0 +1,17 @@
+package de.greemrobot.daogenerator.gentest;
+
+import de.greenrobot.daogenerator.annotation.Entity;
+import de.greenrobot.daogenerator.annotation.NotNull;
+import de.greenrobot.daogenerator.annotation.ToOne;
+import java.util.Date;
+
+@Entity(table = "_Order")
+public class Order {
+  
+  Date date;
+  
+  @NotNull
+  @ToOne
+  Customer customer;
+  
+}
diff --git a/DaoExample/res/drawable-hdpi/icon.png b/DaoExample/src/main/res/drawable-hdpi/icon.png
similarity index 100%
rename from DaoExample/res/drawable-hdpi/icon.png
rename to DaoExample/src/main/res/drawable-hdpi/icon.png
diff --git a/DaoExample/res/drawable-ldpi/icon.png b/DaoExample/src/main/res/drawable-ldpi/icon.png
similarity index 100%
rename from DaoExample/res/drawable-ldpi/icon.png
rename to DaoExample/src/main/res/drawable-ldpi/icon.png
diff --git a/DaoExample/res/drawable-mdpi/icon.png b/DaoExample/src/main/res/drawable-mdpi/icon.png
similarity index 100%
rename from DaoExample/res/drawable-mdpi/icon.png
rename to DaoExample/src/main/res/drawable-mdpi/icon.png
diff --git a/DaoExample/res/layout/main.xml b/DaoExample/src/main/res/layout/main.xml
similarity index 100%
rename from DaoExample/res/layout/main.xml
rename to DaoExample/src/main/res/layout/main.xml
diff --git a/DaoExample/res/values/strings.xml b/DaoExample/src/main/res/values/strings.xml
similarity index 100%
rename from DaoExample/res/values/strings.xml
rename to DaoExample/src/main/res/values/strings.xml
diff --git a/DaoExample/src/main/test2/Contact.java b/DaoExample/src/main/test2/Contact.java
new file mode 100644
index 00000000..edcf6d8c
--- /dev/null
+++ b/DaoExample/src/main/test2/Contact.java
@@ -0,0 +1,24 @@
+package de.greenrobot.daogenerator.gentest.test2;
+
+import de.greenrobot.daogenerator.annotation.Entity;
+import de.greenrobot.daogenerator.annotation.NotNull;
+import de.greenrobot.daogenerator.annotation.Serialized;
+import de.greenrobot.daogenerator.annotation.ToOne;
+import java.security.PublicKey;
+import java.util.Date;
+
+@Entity(table = "Contact")
+public class Contact {
+  
+  @ToOne
+  User user;
+  
+  Date creationDate;
+  
+  @NotNull
+  String name;
+  
+  @Serialized
+  PublicKey publicKey;
+  
+}
diff --git a/DaoExample/src/main/test2/Main.java b/DaoExample/src/main/test2/Main.java
new file mode 100644
index 00000000..cffe1a75
--- /dev/null
+++ b/DaoExample/src/main/test2/Main.java
@@ -0,0 +1,15 @@
+package de.greenrobot.daogenerator.gentest.test2;
+
+import de.greenrobot.daogenerator.DaoGenerator;
+import de.greenrobot.daogenerator.Schema;
+import de.greenrobot.daogenerator.SchemaGenerator;
+
+public class Main {
+
+  public static void main(String[] args) throws Exception {
+    SchemaGenerator schemaGenerator = new SchemaGenerator("src");
+    Schema schema = schemaGenerator.createSchema(1, "de.greenrobot.daoexample2");
+    new DaoGenerator().generateAll(schema, "src-gen");
+  }
+  
+}
diff --git a/DaoExample/src/main/test2/User.java b/DaoExample/src/main/test2/User.java
new file mode 100644
index 00000000..b83db14d
--- /dev/null
+++ b/DaoExample/src/main/test2/User.java
@@ -0,0 +1,29 @@
+package de.greenrobot.daogenerator.gentest.test2;
+
+import de.greenrobot.daogenerator.annotation.Entity;
+import de.greenrobot.daogenerator.annotation.NotNull;
+import de.greenrobot.daogenerator.annotation.Serialized;
+import de.greenrobot.daogenerator.annotation.ToMany;
+import java.security.PrivateKey;
+import java.security.PublicKey;
+import java.util.List;
+
+@Entity(table = "User")
+public class User {
+  
+  @NotNull
+  String name;
+  
+  @NotNull
+  int age;
+  
+  @Serialized
+  PublicKey publicKey;
+  
+  @Serialized
+  PrivateKey privateKey;
+  
+  @ToMany(relation = "user", orderedBy = "name")
+  List<Contact> contactsOrderedByName;
+  
+}
diff --git a/build.gradle b/build.gradle
index 920d365f..e9b7ba9e 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,11 +1,15 @@
 allprojects {
-    apply plugin: 'idea'
-    apply plugin: 'maven'
-    
-    group = 'de.greenrobot'
-    version = '1.3.1'
+  apply plugin: 'idea'
+  apply plugin: 'maven'
+  
+  group = 'de.greenrobot'
+  version = '1.3.1'
+  
+  repositories {
+    mavenCentral()
+  }
 }
 
 subprojects {
-    ext.sourceCompatibility = 1.6
+  ext.sourceCompatibility = 1.6
 }
diff --git a/buildSrc/DaoGenerator/build.gradle b/buildSrc/DaoGenerator/build.gradle
index b72846cd..91124f68 100644
--- a/buildSrc/DaoGenerator/build.gradle
+++ b/buildSrc/DaoGenerator/build.gradle
@@ -11,6 +11,7 @@ if (isSnapshot) {
 
 dependencies {
     compile 'org.freemarker:freemarker:2.3.19'
+    compile 'com.thoughtworks.qdox:qdox:1.12.1'
     testCompile 'junit:junit:4.11'
 }
 
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/SchemaGenerator.java b/buildSrc/DaoGenerator/src/de/greenrobot/daogenerator/SchemaGenerator.java
similarity index 95%
rename from DaoGenerator/src/de/greenrobot/daogenerator/SchemaGenerator.java
rename to buildSrc/DaoGenerator/src/de/greenrobot/daogenerator/SchemaGenerator.java
index acd864b3..24a17009 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/SchemaGenerator.java
+++ b/buildSrc/DaoGenerator/src/de/greenrobot/daogenerator/SchemaGenerator.java
@@ -17,14 +17,14 @@
 
 public class SchemaGenerator {
   
-  private String sourceDirectory;
+  private File sourceDirectory;
   private Map<String, PropertyType> javaTypeToPropertyType;
-  private Map<Type, Entity> typeToEntity = new HashMap<>();
+  private Map<Type, Entity> typeToEntity = new HashMap<Type, Entity>();
 
-  public SchemaGenerator(String sourceDirectory) {
+  public SchemaGenerator(File sourceDirectory) {
     this.sourceDirectory = sourceDirectory;
     
-    javaTypeToPropertyType = new HashMap<>();
+    javaTypeToPropertyType = new HashMap<String, PropertyType>();
     javaTypeToPropertyType.put("boolean", PropertyType.Boolean);
     javaTypeToPropertyType.put("Boolean", PropertyType.Boolean);
     javaTypeToPropertyType.put("byte", PropertyType.Byte);
@@ -45,12 +45,12 @@ public SchemaGenerator(String sourceDirectory) {
     javaTypeToPropertyType.put("java.util.Date", PropertyType.Date);
   }
 
-  public Schema createSchema(int version, String defaultJavaPackage) {
-    Schema schema = new Schema(version, defaultJavaPackage);
+  public Schema createSchema(int version, String genSrcPackage) {
+    Schema schema = new Schema(version, genSrcPackage);
     
     // Look for the java files.
     JavaDocBuilder builder = new JavaDocBuilder();
-    builder.addSourceTree(new File(sourceDirectory));
+    builder.addSourceTree(sourceDirectory);
     
     // Creates the entities.
     System.out.println("Creates the entities ...\n");
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/annotation/Entity.java b/buildSrc/DaoGenerator/src/de/greenrobot/daogenerator/annotation/Entity.java
similarity index 100%
rename from DaoGenerator/src/de/greenrobot/daogenerator/annotation/Entity.java
rename to buildSrc/DaoGenerator/src/de/greenrobot/daogenerator/annotation/Entity.java
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/annotation/NotNull.java b/buildSrc/DaoGenerator/src/de/greenrobot/daogenerator/annotation/NotNull.java
similarity index 100%
rename from DaoGenerator/src/de/greenrobot/daogenerator/annotation/NotNull.java
rename to buildSrc/DaoGenerator/src/de/greenrobot/daogenerator/annotation/NotNull.java
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/annotation/Serialized.java b/buildSrc/DaoGenerator/src/de/greenrobot/daogenerator/annotation/Serialized.java
similarity index 100%
rename from DaoGenerator/src/de/greenrobot/daogenerator/annotation/Serialized.java
rename to buildSrc/DaoGenerator/src/de/greenrobot/daogenerator/annotation/Serialized.java
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/annotation/ToMany.java b/buildSrc/DaoGenerator/src/de/greenrobot/daogenerator/annotation/ToMany.java
similarity index 100%
rename from DaoGenerator/src/de/greenrobot/daogenerator/annotation/ToMany.java
rename to buildSrc/DaoGenerator/src/de/greenrobot/daogenerator/annotation/ToMany.java
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/annotation/ToOne.java b/buildSrc/DaoGenerator/src/de/greenrobot/daogenerator/annotation/ToOne.java
similarity index 100%
rename from DaoGenerator/src/de/greenrobot/daogenerator/annotation/ToOne.java
rename to buildSrc/DaoGenerator/src/de/greenrobot/daogenerator/annotation/ToOne.java
diff --git a/buildSrc/GreenDaoPlugin/build.gradle b/buildSrc/GreenDaoPlugin/build.gradle
index ca850735..ab6d710a 100644
--- a/buildSrc/GreenDaoPlugin/build.gradle
+++ b/buildSrc/GreenDaoPlugin/build.gradle
@@ -1,11 +1,11 @@
 apply plugin: 'groovy'
 
 dependencies {
-    compile gradleApi()
-    compile localGroovy()
-    compile project(':DaoGenerator')
+  compile gradleApi()
+  compile localGroovy()
+  compile project(':DaoGenerator')
 }
 
 rootProject.dependencies {
-    runtime project(path)
+  runtime project(path)
 }
diff --git a/buildSrc/GreenDaoPlugin/src/main/groovy/de/greenrobot/greendao/plugin/GreenDaoPlugin.groovy b/buildSrc/GreenDaoPlugin/src/main/groovy/de/greenrobot/greendao/plugin/GreenDaoPlugin.groovy
index 8aeab638..bac4dfef 100644
--- a/buildSrc/GreenDaoPlugin/src/main/groovy/de/greenrobot/greendao/plugin/GreenDaoPlugin.groovy
+++ b/buildSrc/GreenDaoPlugin/src/main/groovy/de/greenrobot/greendao/plugin/GreenDaoPlugin.groovy
@@ -4,23 +4,23 @@ import de.greenrobot.greendao.task.GenerateDaoSources;
 import org.gradle.api.Plugin;
 import org.gradle.api.Project;
 import org.gradle.api.tasks.compile.JavaCompile;
+import org.gradle.api.Task;
 
 public class GreenDaoPlugin implements Plugin<Project> {
 
   @Override
   public void apply(Project project) {
-    project.task('compileGenerator', type: JavaCompile) << {
-      //source = project.files("src-in")
-      source.each({file -> print file.name})
+    Task generateDaoSources = project.tasks.create(name: 'generateDaoSources', type: GenerateDaoSources) {
+      ormSrcDir = project.file('src/main/orm');
+      schemaVersion = 1;
+      genSrcPackage = "orm.gensrc";
+      genSrcDir = new File(project.buildDir, 'gen-src');
     }
     
-    project.task('generateDaoSources', type: GenerateDaoSources) {
-      inputDir = project.file('input')
-      outputDir = project.file('output')
-      
+    project.afterEvaluate {
+      project.compileDebug.dependsOn(generateDaoSources);
+      project.android.sourceSets.main.java.srcDirs += generateDaoSources.genSrcDir;
     }
-    
-    project.task('build').dependsOn('compileGenerator')
   }
   
 }
diff --git a/buildSrc/GreenDaoPlugin/src/main/groovy/de/greenrobot/greendao/task/GenerateDaoSources.groovy b/buildSrc/GreenDaoPlugin/src/main/groovy/de/greenrobot/greendao/task/GenerateDaoSources.groovy
deleted file mode 100644
index a35313de..00000000
--- a/buildSrc/GreenDaoPlugin/src/main/groovy/de/greenrobot/greendao/task/GenerateDaoSources.groovy
+++ /dev/null
@@ -1,17 +0,0 @@
-package de.greenrobot.greendao.task
-
-import java.io.File
-import org.gradle.api.DefaultTask
-import org.gradle.api.tasks.TaskAction
-
-public class GenerateDaoSources extends DefaultTask {
-  
-  def File inputDir
-  def File outputDir
-  
-  @TaskAction
-  def void generateSources() {
-    println "Generates DAO sources."
-  }
-  
-}
diff --git a/buildSrc/GreenDaoPlugin/src/main/groovy/de/greenrobot/greendao/task/GenerateDaoSources.java b/buildSrc/GreenDaoPlugin/src/main/groovy/de/greenrobot/greendao/task/GenerateDaoSources.java
new file mode 100644
index 00000000..fe9006de
--- /dev/null
+++ b/buildSrc/GreenDaoPlugin/src/main/groovy/de/greenrobot/greendao/task/GenerateDaoSources.java
@@ -0,0 +1,27 @@
+package de.greenrobot.greendao.task;
+
+import de.greenrobot.daogenerator.DaoGenerator;
+import de.greenrobot.daogenerator.Schema;
+import java.io.File;
+import org.gradle.api.DefaultTask;
+import org.gradle.api.tasks.TaskAction;
+import de.greenrobot.daogenerator.SchemaGenerator;
+
+public class GenerateDaoSources extends DefaultTask {
+  
+  public File ormSrcDir;
+  public int schemaVersion;
+  public String genSrcPackage;
+  
+  public File genSrcDir;
+  
+  @TaskAction
+  public void generateSources() throws Exception {
+    genSrcDir.mkdirs();
+    
+    SchemaGenerator schemaGenerator = new SchemaGenerator(ormSrcDir);
+    Schema schema = schemaGenerator.createSchema(schemaVersion, genSrcPackage);
+    new DaoGenerator().generateAll(schema, genSrcDir.getAbsolutePath());
+  }
+  
+}
diff --git a/settings.gradle b/settings.gradle
index 5999081b..1665282f 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +1 @@
-include 'DaoCore', 'DaoExampleGenerator'
\ No newline at end of file
+include 'DaoCore', 'DaoExample'
\ No newline at end of file
