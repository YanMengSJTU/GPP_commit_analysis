diff --git a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
index cc9405d7..0abf2782 100644
--- a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
+++ b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
@@ -56,7 +56,8 @@ public TestDaoGenerator() {
         createExtendsImplements();
         createStringKeyValue();
         createAutoincrement();
-        
+        createSqliteMaster();
+
         createSchema2();
     }
 
@@ -151,7 +152,7 @@ protected void createToMany() {
         toManyJoinTwo.orderDesc(targetJoinProperty);
         toManyJoinTwo.orderDesc(targetIdProperty);
     }
-    
+
     protected void createTreeEntity() {
         Entity treeEntity = schema.addEntity("TreeEntity");
         treeEntity.addIdProperty();
@@ -244,7 +245,7 @@ private void createSchema2() {
         relationSource2.setJavaPackageTest("de.greenrobot.daotest2.specialtest");
         relationSource2.setSkipGenerationTest(true);
     }
-    
+
     protected void createStringKeyValue() {
         Entity entity = schema.addEntity("StringKeyValueEntity");
         entity.addStringProperty("key").primaryKey();
@@ -256,4 +257,15 @@ protected void createAutoincrement() {
         entity.addIdProperty().autoincrement();
     }
 
+    protected void createSqliteMaster() {
+        Entity entity = schema.addEntity("SqliteMaster");
+        entity.setSkipTableCreation(true);
+        entity.setHasKeepSections(true);
+        entity.addStringProperty("type");
+        entity.addStringProperty("name");
+        entity.addStringProperty("tableName").columnName("tbl_name");
+        entity.addLongProperty("rootpage");
+        entity.addStringProperty("sql");
+    }
+
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
index 74d2cb4c..9b15ea02 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
@@ -22,6 +22,7 @@
 import de.greenrobot.daotest.ExtendsImplementsEntityDao;
 import de.greenrobot.daotest.StringKeyValueEntityDao;
 import de.greenrobot.daotest.AutoincrementEntityDao;
+import de.greenrobot.daotest.SqliteMasterDao;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -109,6 +110,7 @@ public DaoMaster(SQLiteDatabase db) {
         registerDaoClass(ExtendsImplementsEntityDao.class);
         registerDaoClass(StringKeyValueEntityDao.class);
         registerDaoClass(AutoincrementEntityDao.class);
+        registerDaoClass(SqliteMasterDao.class);
     }
     
     public DaoSession newSession() {
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
index cb5cbcbd..9626fff1 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
@@ -23,6 +23,7 @@
 import de.greenrobot.daotest.ExtendsImplementsEntity;
 import de.greenrobot.daotest.StringKeyValueEntity;
 import de.greenrobot.daotest.AutoincrementEntity;
+import de.greenrobot.daotest.SqliteMaster;
 
 import de.greenrobot.daotest.SimpleEntityDao;
 import de.greenrobot.daotest.SimpleEntityNotNullDao;
@@ -38,6 +39,7 @@
 import de.greenrobot.daotest.ExtendsImplementsEntityDao;
 import de.greenrobot.daotest.StringKeyValueEntityDao;
 import de.greenrobot.daotest.AutoincrementEntityDao;
+import de.greenrobot.daotest.SqliteMasterDao;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 
@@ -62,6 +64,7 @@
     private final DaoConfig extendsImplementsEntityDaoConfig;
     private final DaoConfig stringKeyValueEntityDaoConfig;
     private final DaoConfig autoincrementEntityDaoConfig;
+    private final DaoConfig sqliteMasterDaoConfig;
 
     private final SimpleEntityDao simpleEntityDao;
     private final SimpleEntityNotNullDao simpleEntityNotNullDao;
@@ -77,6 +80,7 @@
     private final ExtendsImplementsEntityDao extendsImplementsEntityDao;
     private final StringKeyValueEntityDao stringKeyValueEntityDao;
     private final AutoincrementEntityDao autoincrementEntityDao;
+    private final SqliteMasterDao sqliteMasterDao;
 
     public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
@@ -124,6 +128,9 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         autoincrementEntityDaoConfig = daoConfigMap.get(AutoincrementEntityDao.class).clone();
         autoincrementEntityDaoConfig.initIdentityScope(type);
 
+        sqliteMasterDaoConfig = daoConfigMap.get(SqliteMasterDao.class).clone();
+        sqliteMasterDaoConfig.initIdentityScope(type);
+
         simpleEntityDao = new SimpleEntityDao(simpleEntityDaoConfig, this);
         simpleEntityNotNullDao = new SimpleEntityNotNullDao(simpleEntityNotNullDaoConfig, this);
         testEntityDao = new TestEntityDao(testEntityDaoConfig, this);
@@ -138,6 +145,7 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         extendsImplementsEntityDao = new ExtendsImplementsEntityDao(extendsImplementsEntityDaoConfig, this);
         stringKeyValueEntityDao = new StringKeyValueEntityDao(stringKeyValueEntityDaoConfig, this);
         autoincrementEntityDao = new AutoincrementEntityDao(autoincrementEntityDaoConfig, this);
+        sqliteMasterDao = new SqliteMasterDao(sqliteMasterDaoConfig, this);
 
         registerDao(SimpleEntity.class, simpleEntityDao);
         registerDao(SimpleEntityNotNull.class, simpleEntityNotNullDao);
@@ -153,6 +161,7 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         registerDao(ExtendsImplementsEntity.class, extendsImplementsEntityDao);
         registerDao(StringKeyValueEntity.class, stringKeyValueEntityDao);
         registerDao(AutoincrementEntity.class, autoincrementEntityDao);
+        registerDao(SqliteMaster.class, sqliteMasterDao);
     }
     
     public void clear() {
@@ -170,6 +179,7 @@ public void clear() {
         extendsImplementsEntityDaoConfig.getIdentityScope().clear();
         stringKeyValueEntityDaoConfig.getIdentityScope().clear();
         autoincrementEntityDaoConfig.getIdentityScope().clear();
+        sqliteMasterDaoConfig.getIdentityScope().clear();
     }
 
     public SimpleEntityDao getSimpleEntityDao() {
@@ -228,4 +238,8 @@ public AutoincrementEntityDao getAutoincrementEntityDao() {
         return autoincrementEntityDao;
     }
 
+    public SqliteMasterDao getSqliteMasterDao() {
+        return sqliteMasterDao;
+    }
+
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SqliteMaster.java b/DaoTest/src-gen/de/greenrobot/daotest/SqliteMaster.java
new file mode 100644
index 00000000..8aee2534
--- /dev/null
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SqliteMaster.java
@@ -0,0 +1,79 @@
+package de.greenrobot.daotest;
+
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
+/**
+ * Entity mapped to table SQLITE_MASTER.
+ */
+public class SqliteMaster {
+
+    private String type;
+    private String name;
+    private String tableName;
+    private Long rootpage;
+    private String sql;
+
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
+    public SqliteMaster() {
+    }
+
+    public SqliteMaster(String type, String name, String tableName, Long rootpage, String sql) {
+        this.type = type;
+        this.name = name;
+        this.tableName = tableName;
+        this.rootpage = rootpage;
+        this.sql = sql;
+    }
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getTableName() {
+        return tableName;
+    }
+
+    public void setTableName(String tableName) {
+        this.tableName = tableName;
+    }
+
+    public Long getRootpage() {
+        return rootpage;
+    }
+
+    public void setRootpage(Long rootpage) {
+        this.rootpage = rootpage;
+    }
+
+    public String getSql() {
+        return sql;
+    }
+
+    public void setSql(String sql) {
+        this.sql = sql;
+    }
+
+    // KEEP METHODS - put your custom methods here
+    @Override
+    public String toString() {
+        return "Type: " + type + ", name: " + name + ", table: " + tableName + ", SQL: " + sql;
+    }
+    // KEEP METHODS END
+
+}
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java
new file mode 100644
index 00000000..46ef631e
--- /dev/null
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java
@@ -0,0 +1,121 @@
+package de.greenrobot.daotest;
+
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.DaoConfig;
+import de.greenrobot.dao.Property;
+
+import de.greenrobot.daotest.SqliteMaster;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/** 
+ * DAO for table SQLITE_MASTER.
+*/
+public class SqliteMasterDao extends AbstractDao<SqliteMaster, Void> {
+
+    public static final String TABLENAME = "SQLITE_MASTER";
+
+    /**
+     * Properties of entity SqliteMaster.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
+    public static class Properties {
+        public final static Property Type = new Property(0, String.class, "type", false, "TYPE");
+        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
+        public final static Property TableName = new Property(2, String.class, "tableName", false, "tbl_name");
+        public final static Property Rootpage = new Property(3, Long.class, "rootpage", false, "ROOTPAGE");
+        public final static Property Sql = new Property(4, String.class, "sql", false, "SQL");
+    };
+
+
+    public SqliteMasterDao(DaoConfig config) {
+        super(config);
+    }
+    
+    public SqliteMasterDao(DaoConfig config, DaoSession daoSession) {
+        super(config, daoSession);
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected void bindValues(SQLiteStatement stmt, SqliteMaster entity) {
+        stmt.clearBindings();
+ 
+        String type = entity.getType();
+        if (type != null) {
+            stmt.bindString(1, type);
+        }
+ 
+        String name = entity.getName();
+        if (name != null) {
+            stmt.bindString(2, name);
+        }
+ 
+        String tableName = entity.getTableName();
+        if (tableName != null) {
+            stmt.bindString(3, tableName);
+        }
+ 
+        Long rootpage = entity.getRootpage();
+        if (rootpage != null) {
+            stmt.bindLong(4, rootpage);
+        }
+ 
+        String sql = entity.getSql();
+        if (sql != null) {
+            stmt.bindString(5, sql);
+        }
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Void readKey(Cursor cursor, int offset) {
+        return null;
+    }    
+
+    /** @inheritdoc */
+    @Override
+    public SqliteMaster readEntity(Cursor cursor, int offset) {
+        SqliteMaster entity = new SqliteMaster( //
+            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // type
+            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
+            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tableName
+            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // rootpage
+            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // sql
+        );
+        return entity;
+    }
+     
+    /** @inheritdoc */
+    @Override
+    public void readEntity(Cursor cursor, SqliteMaster entity, int offset) {
+        entity.setType(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
+        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
+        entity.setTableName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
+        entity.setRootpage(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
+        entity.setSql(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
+     }
+    
+    /** @inheritdoc */
+    @Override
+    protected Void updateKeyAfterInsert(SqliteMaster entity, long rowId) {
+        // Unsupported or missing PK type
+        return null;
+    }
+    
+    /** @inheritdoc */
+    @Override
+    public Void getKey(SqliteMaster entity) {
+        return null;
+    }
+
+    /** @inheritdoc */
+    @Override    
+    protected boolean isEntityUpdateable() {
+        return true;
+    }
+    
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SqliteMasterTest.java b/DaoTest/src/de/greenrobot/daotest/entity/SqliteMasterTest.java
new file mode 100644
index 00000000..45fc23c9
--- /dev/null
+++ b/DaoTest/src/de/greenrobot/daotest/entity/SqliteMasterTest.java
@@ -0,0 +1,36 @@
+package de.greenrobot.daotest.entity;
+
+import java.util.List;
+
+import de.greenrobot.dao.DaoLog;
+import de.greenrobot.dao.test.AbstractDaoTest;
+import de.greenrobot.daotest.SqliteMaster;
+import de.greenrobot.daotest.SqliteMasterDao;
+import de.greenrobot.daotest.SqliteMasterDao.Properties;
+
+public class SqliteMasterTest extends AbstractDaoTest<SqliteMasterDao, SqliteMaster, Void> {
+
+    public SqliteMasterTest() {
+        super(SqliteMasterDao.class);
+    }
+
+    protected SqliteMaster createEntity(Void key) {
+        SqliteMaster entity = new SqliteMaster();
+        return entity;
+    }
+
+    public void testLoadAll() {
+        List<SqliteMaster> all = dao.loadAll();
+        for (SqliteMaster meta : all) {
+            DaoLog.v(meta.toString());
+        }
+    }
+
+    public void testQueryRaw() {
+        List<SqliteMaster> tables = dao.queryRaw("WHERE " + Properties.Type.columnName + "=?", "table");
+        for (SqliteMaster table : tables) {
+            DaoLog.v(table.toString());
+        }
+    }
+
+}
