diff --git a/.gitignore b/.gitignore
index 047d97d..b8ca133 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,8 +2,6 @@
 /app
 .gradle
 /local.properties
-/.idea/workspace.xml
-/.idea/libraries
 .DS_Store
 /build
 *.iml
diff --git a/README.md b/README.md
index de33342..fbc8efe 100644
--- a/README.md
+++ b/README.md
@@ -106,13 +106,13 @@ Maven
     <dependency>
         <groupId>com.mobsandgeeks</groupId>
         <artifactId>android-saripaar</artifactId>
-        <version>2.0.2</version>
+        <version>(latest version)</version>
     </dependency>
 
 Gradle
 ---------------------
     dependencies {
-        compile 'com.mobsandgeeks:android-saripaar:2.0.2'
+        compile 'com.mobsandgeeks:android-saripaar:(latest version)'
     }
 
 Snapshots
@@ -121,7 +121,7 @@ In your `{project_base}/build.gradle` file, include the following.
 
     allprojects {
         repositories {
-            mavenCentral()
+            jcenter()
             maven {
                 url "https://oss.sonatype.org/content/repositories/snapshots/"
             }
@@ -147,7 +147,8 @@ Icon         | App           | Icon         | App           | Icon         | App
 ------------ | ------------- | ------------ | ------------- | ------------ | -------------
 <img src="https://lh3.ggpht.com/qhpfFQFd5YuLzT5d9jUCI69dMeLlW6XewLsgZ0l06D92M0SmvsMKSMd_YY1Xc9K1GyU=w300-rw" width="48" height="48" /> | [Wikipedia] | <img src="https://lh6.ggpht.com/i_pxbaojay2K2xb2RDC2W7eOnNlpGRgILoACaEDhaKz87JSg3nEJHV3Vz3wmS3L3e4M=w300-rw" width="48" height="48" /> | [Wikipedia Beta] | <img src="https://lh3.ggpht.com/o2lhzbRnq6U1oPxyqY6LDJIc2PO_tm1_sIbX-fMLpG2Sxk94QW2gQaDw8ewam1dPQrdz=w300-rw" width="48" height="48" /> | [Mizuno Baton]
 <img src="https://lh6.ggpht.com/t-WYlpXlwhLL0unTDChiVi24b4LP0kNsJQnRwFaMHd0NGqxgQ2LupQ1Dl7M1ztj8Vg8=w300-rw" width="48" height="48" /> | [Fetch] | <img src="https://lh3.ggpht.com/J3bMDphmzsPFQeMfWR-LH70g5vSGrTVggPzXQdUafKM2KmpWS3THIcSHQaTVbCQ_hjw=w300-rw" width="48" height="48" /> | [HealtheMinder] | <img src="https://lh3.ggpht.com/EhidzByoyUY1OPVcsjOmtOcRwoxphRCy1-a_qKLYKHwsS0DuHIC9cHIDEPLVKO-oTw=w300-rw" width="48" height="48" /> | [MomMe]
-<img src="https://lh5.ggpht.com/h6T-az0ip_OqNtSh__Kc5-0ZPpT7sYxSn4kFPOjrNI7o-LN9bPbovoiYDfswL-B5XQ=w300-rw" width="48" height="48" /> | [Feelknit] | <img src="https://lh4.ggpht.com/k5zFS5VheJKt1yBHKC-wBgJTwOQ4Q_Aa2XbG6Ea_-HvP8nXjYeSnO_227j1wVno1JZY=w300-rw" width="48" height="48" /> | [StreetBarz]
+<img src="https://lh5.ggpht.com/h6T-az0ip_OqNtSh__Kc5-0ZPpT7sYxSn4kFPOjrNI7o-LN9bPbovoiYDfswL-B5XQ=w300-rw" width="48" height="48" /> | [Feelknit] | <img src="https://lh4.ggpht.com/k5zFS5VheJKt1yBHKC-wBgJTwOQ4Q_Aa2XbG6Ea_-HvP8nXjYeSnO_227j1wVno1JZY=w300-rw" width="48" height="48" /> | [StreetBarz] | <img src="https://lh3.googleusercontent.com/4fO6lwPVZ7ncBsvfVpfME9xm9Nn6ggtEffCrNDFbqZ9LXBkYxSbdALWmNxQLwkhv3p6G=w300-rw" width="48" height="48" /> | [Roast Me]
+<img src="https://lh3.googleusercontent.com/Mtr7AqEN4WGJVih1rAjvvzl4rN5gYT2EwWxpVwczZXfRmixaQJBFnm-WBr8TkhGzpOA=w300-rw" width="48" height="48" /> | [Pipe] | <img src="https://lh3.googleusercontent.com/0fEpTqHqbVJ_0z7rdsG9wks5KiiaBjyA4MScLf19HSMhy8BR3vSX6agZ0NucyPMyow=w300-rw" width="48" height="48" /> | [Snagajob] | <img src="https://lh3.googleusercontent.com/SrowFwOEDERCrVqk7SaBwifZslMoqTk5iZ9gMKOafvD1KvlyYYLxvbNJXiiUjBSsLjk=w300-rw" width="48" height="48" /> | [Tatva Moksh Lakshya]
 
 Wiki
 ---------------------
@@ -191,4 +192,8 @@ License
   [HealtheMinder]: https://play.google.com/store/apps/details?id=org.hartfordhealthcare.healtheminder
   [Feelknit]: https://play.google.com/store/apps/details?id=com.qubittech.feelknit.app
   [StreetBarz]: https://play.google.com/store/apps/details?id=com.diofeher.StreetBarz
+  [Roast Me]: https://play.google.com/store/apps/details?id=com.marsvard.roastcam
+  [Pipe]: https://play.google.com/store/apps/details?id=com.pipeapp.pipe
+  [Snagajob]: https://play.google.com/store/apps/details?id=com.snagajob.jobseeker
+  [Tatva Moksh Lakshya]: https://play.google.com/store/apps/details?id=siesgst.edu.in.tml16
   [wiki]: https://github.com/ragunathjawahar/android-saripaar/wiki
diff --git a/build.gradle b/build.gradle
index b0ab333..08e9947 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.0.0'
+        classpath 'com.android.tools.build:gradle:2.1.3'
 
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
diff --git a/gradle.properties b/gradle.properties
index 7bfbeb4..225112f 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -31,6 +31,6 @@ POM_LICENCE_DIST=repo
 POM_DEVELOPER_ID=ragunathjawahar
 POM_DEVELOPER_NAME=Ragunath Jawahar
 
-ANDROID_BUILD_TARGET_SDK_VERSION=21
-ANDROID_BUILD_TOOLS_VERSION=21.1.2
-ANDROID_BUILD_SDK_VERSION=21
+ANDROID_BUILD_TARGET_SDK_VERSION=25
+ANDROID_BUILD_TOOLS_VERSION=25.0.0
+ANDROID_BUILD_SDK_VERSION=25
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index ce9604e..513255c 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Dec 08 13:12:35 IST 2014
+#Sun Nov 27 14:28:16 IST 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
diff --git a/gradlew b/gradlew
old mode 100644
new mode 100755
diff --git a/saripaar-showcase/.gitignore b/saripaar-showcase/.gitignore
deleted file mode 100644
index 796b96d..0000000
--- a/saripaar-showcase/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/build
diff --git a/saripaar-showcase/build.gradle b/saripaar-showcase/build.gradle
deleted file mode 100644
index df8f316..0000000
--- a/saripaar-showcase/build.gradle
+++ /dev/null
@@ -1,48 +0,0 @@
-apply plugin: 'com.android.application'
-apply plugin: 'kotlin-android'
-
-android {
-    compileSdkVersion 21
-    buildToolsVersion "21.1.2"
-
-    defaultConfig {
-        applicationId "com.mobsandgeeks.saripaar.showcase"
-        minSdkVersion 21
-        targetSdkVersion 21
-        versionCode 1
-        versionName "1.0"
-    }
-    buildTypes {
-        release {
-            minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-    lintOptions {
-        abortOnError false
-    }
-    sourceSets {
-        main.java.srcDirs += 'src/main/java'
-        main.java.srcDirs += 'src/main/kotlin'
-    }
-}
-
-dependencies {
-    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    compile 'com.mobsandgeeks:android-saripaar:2.0-SNAPSHOT'
-}
-
-buildscript {
-    ext.kotlin_version = '0.11.+'
-    repositories {
-        mavenCentral()
-    }
-    dependencies {
-        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
-    }
-}
-
-repositories {
-    mavenCentral()
-}
diff --git a/saripaar-showcase/proguard-rules.pro b/saripaar-showcase/proguard-rules.pro
deleted file mode 100644
index 36aa9dd..0000000
--- a/saripaar-showcase/proguard-rules.pro
+++ /dev/null
@@ -1,17 +0,0 @@
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in D:/Developer/android-sdk/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the proguardFiles
-# directive in build.gradle.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/saripaar-showcase/src/main/AndroidManifest.xml b/saripaar-showcase/src/main/AndroidManifest.xml
deleted file mode 100644
index ab9e22c..0000000
--- a/saripaar-showcase/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.mobsandgeeks.saripaar.showcase" >
-
-    <application
-        android:allowBackup="true"
-        android:icon="@drawable/ic_launcher"
-        android:label="@string/app_name"
-        android:theme="@style/AppTheme" >
-        <activity
-            android:name=".LoginActivity"
-            android:label="@string/login" >
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-    </application>
-
-</manifest>
diff --git a/saripaar-showcase/src/main/kotlin/com/mobsandgeeks/saripaar/showcase/LoginActivity.kt b/saripaar-showcase/src/main/kotlin/com/mobsandgeeks/saripaar/showcase/LoginActivity.kt
deleted file mode 100644
index 70753d9..0000000
--- a/saripaar-showcase/src/main/kotlin/com/mobsandgeeks/saripaar/showcase/LoginActivity.kt
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Copyright (C) 2015 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.showcase
-
-import android.app.Activity
-import android.os.Bundle
-import android.widget.Button
-import android.widget.EditText
-import android.widget.Toast
-import com.mobsandgeeks.saripaar.ValidationError
-import com.mobsandgeeks.saripaar.Validator
-import com.mobsandgeeks.saripaar.annotation.Email
-import com.mobsandgeeks.saripaar.annotation.NotEmpty
-import com.mobsandgeeks.saripaar.annotation.Order
-import com.mobsandgeeks.saripaar.annotation.Password
-import kotlin.properties.Delegates
-
-/**
- * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
- * @since 2.0
- */
-public class LoginActivity : Activity(), Validator.ValidationListener {
-
-    // UI References
-    NotEmpty(sequence = 1)
-    Email(sequence = 2)
-    Order(1)
-    private var emailEditText: EditText by Delegates.notNull()
-
-    Password(scheme = Password.Scheme.ALPHA_NUMERIC)
-    Order(2)
-    private var passwordEditText: EditText by Delegates.notNull()
-
-    private var loginButton: Button by Delegates.notNull()
-
-    // Validation
-    val validator = Validator(this)
-
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super<Activity>.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_login)
-
-        // UI References
-        emailEditText = findViewById(R.id.emailEditText) as EditText
-        passwordEditText = findViewById(R.id.passwordEditText) as EditText
-        loginButton = findViewById(R.id.loginButton) as Button
-
-        // Validator
-        validator.setValidationMode(Validator.Mode.IMMEDIATE)
-
-        // Listeners
-        validator.setValidationListener(this)
-        loginButton.setOnClickListener { v -> validator.validate() }
-    }
-
-    override fun onValidationSucceeded() {
-        showToast("Yay")
-    }
-
-    override fun onValidationFailed(errors: MutableList<ValidationError>) {
-        // Since, we're using Mode.IMMEDIATE, we'll be notified as soon
-        // as a view fails validation. So, the collection will always have
-        // only one item.
-        val error = errors.get(0)
-        val message = error.getCollatedErrorMessage(this)
-        val editText = error.getView() as EditText
-        editText.setError(message)
-        editText.requestFocus()
-    }
-
-    private fun showToast(message: String) {
-        Toast.makeText(this, message, Toast.LENGTH_LONG).show()
-    }
-}
diff --git a/saripaar-showcase/src/main/res/drawable-hdpi/ic_launcher.png b/saripaar-showcase/src/main/res/drawable-hdpi/ic_launcher.png
deleted file mode 100644
index 96a442e..0000000
Binary files a/saripaar-showcase/src/main/res/drawable-hdpi/ic_launcher.png and /dev/null differ
diff --git a/saripaar-showcase/src/main/res/drawable-mdpi/ic_launcher.png b/saripaar-showcase/src/main/res/drawable-mdpi/ic_launcher.png
deleted file mode 100644
index 359047d..0000000
Binary files a/saripaar-showcase/src/main/res/drawable-mdpi/ic_launcher.png and /dev/null differ
diff --git a/saripaar-showcase/src/main/res/drawable-xhdpi/ic_launcher.png b/saripaar-showcase/src/main/res/drawable-xhdpi/ic_launcher.png
deleted file mode 100644
index 71c6d76..0000000
Binary files a/saripaar-showcase/src/main/res/drawable-xhdpi/ic_launcher.png and /dev/null differ
diff --git a/saripaar-showcase/src/main/res/drawable-xxhdpi/ic_launcher.png b/saripaar-showcase/src/main/res/drawable-xxhdpi/ic_launcher.png
deleted file mode 100644
index 4df1894..0000000
Binary files a/saripaar-showcase/src/main/res/drawable-xxhdpi/ic_launcher.png and /dev/null differ
diff --git a/saripaar-showcase/src/main/res/layout/activity_login.xml b/saripaar-showcase/src/main/res/layout/activity_login.xml
deleted file mode 100644
index 572084a..0000000
--- a/saripaar-showcase/src/main/res/layout/activity_login.xml
+++ /dev/null
@@ -1,61 +0,0 @@
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-        xmlns:tools="http://schemas.android.com/tools"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:paddingLeft="@dimen/activity_horizontal_margin"
-        android:paddingRight="@dimen/activity_horizontal_margin"
-        android:paddingTop="@dimen/activity_vertical_margin"
-        android:paddingBottom="@dimen/activity_vertical_margin"
-        tools:context=".LoginActivity">
-
-    <LinearLayout
-        android:orientation="vertical"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_centerInParent="true"
-        android:id="@+id/linearLayout">
-
-        <TextView
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:textAppearance="?android:attr/textAppearanceMedium"
-            android:text="@string/email"
-            android:id="@+id/emailTextView"
-            android:labelFor="@+id/emailEditText" />
-
-        <EditText
-            android:layout_width="match_parent"
-            android:layout_height="0dp"
-            android:inputType="textPersonName"
-            android:ems="10"
-            android:id="@+id/emailEditText"
-            android:layout_weight="1"
-            android:autoText="false"
-            android:layout_marginBottom="20dp"/>
-
-        <TextView
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:labelFor="@+id/passwordEditText"
-            android:textAppearance="?android:attr/textAppearanceMedium"
-            android:text="@string/password"
-            android:id="@+id/passwordTextView"/>
-
-        <EditText
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:inputType="textPassword"
-            android:ems="10"
-            android:id="@+id/passwordEditText"/>
-    </LinearLayout>
-
-    <Button
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="@string/login"
-        android:id="@+id/loginButton"
-        android:layout_alignParentBottom="true"
-        android:layout_alignParentStart="true"
-        android:layout_alignEnd="@+id/linearLayout"/>
-
-</RelativeLayout>
diff --git a/saripaar-showcase/src/main/res/values-v21/styles.xml b/saripaar-showcase/src/main/res/values-v21/styles.xml
deleted file mode 100644
index c814c04..0000000
--- a/saripaar-showcase/src/main/res/values-v21/styles.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <style name="AppTheme" parent="android:Theme.Material">
-        <item name="android:colorPrimary">@color/primary</item>
-        <item name="android:colorPrimaryDark">@color/primary_dark</item>
-        <item name="android:colorAccent">@color/accent</item>
-    </style>
-</resources>
diff --git a/saripaar-showcase/src/main/res/values-w820dp/dimens.xml b/saripaar-showcase/src/main/res/values-w820dp/dimens.xml
deleted file mode 100644
index 63fc816..0000000
--- a/saripaar-showcase/src/main/res/values-w820dp/dimens.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<resources>
-    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
-         (such as screen margins) for screens with more than 820dp of available width. This
-         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
-    <dimen name="activity_horizontal_margin">64dp</dimen>
-</resources>
diff --git a/saripaar-showcase/src/main/res/values/colors.xml b/saripaar-showcase/src/main/res/values/colors.xml
deleted file mode 100644
index 85c4778..0000000
--- a/saripaar-showcase/src/main/res/values/colors.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <color name="primary">#3196C9</color>
-    <color name="primary_dark">#3367D6</color>
-    <color name="accent">#FFAA2B</color>
-</resources>
diff --git a/saripaar-showcase/src/main/res/values/dimens.xml b/saripaar-showcase/src/main/res/values/dimens.xml
deleted file mode 100644
index 47c8224..0000000
--- a/saripaar-showcase/src/main/res/values/dimens.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<resources>
-    <!-- Default screen margins, per the Android Design guidelines. -->
-    <dimen name="activity_horizontal_margin">16dp</dimen>
-    <dimen name="activity_vertical_margin">16dp</dimen>
-</resources>
diff --git a/saripaar-showcase/src/main/res/values/strings.xml b/saripaar-showcase/src/main/res/values/strings.xml
deleted file mode 100644
index 5ea468a..0000000
--- a/saripaar-showcase/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-
-    <string name="app_name">Saripaar Showcase</string>
-    <string name="login">Login</string>
-    <string name="email">Email</string>
-    <string name="password">Password</string>
-
-</resources>
diff --git a/saripaar-showcase/src/main/res/values/styles.xml b/saripaar-showcase/src/main/res/values/styles.xml
deleted file mode 100644
index ff6c9d2..0000000
--- a/saripaar-showcase/src/main/res/values/styles.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<resources>
-
-    <!-- Base application theme. -->
-    <style name="AppTheme" parent="android:Theme.Holo.Light.DarkActionBar">
-        <!-- Customize your theme here. -->
-    </style>
-
-</resources>
diff --git a/saripaar-tests/build.gradle b/saripaar-tests/build.gradle
index 5fec1ca..043be5f 100644
--- a/saripaar-tests/build.gradle
+++ b/saripaar-tests/build.gradle
@@ -7,7 +7,7 @@ android {
     defaultConfig {
         applicationId "com.mobsandgeeks.saripaar.tests"
         minSdkVersion 14
-        targetSdkVersion 21
+        targetSdkVersion 25
         versionCode 1
         versionName "1.0"
         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
@@ -28,10 +28,9 @@ android {
 
 dependencies {
     compile project(':saripaar')
-    compile fileTree(include: ['*.jar'], dir: 'libs')
     compile 'com.wrapp.floatlabelededittext:library:0.0.5'
-    compile 'com.android.support:support-annotations:21.0.3'
+    compile 'com.android.support:support-annotations:23.1.1'
 
-    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.0'
+    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
     androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
 }
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OptionalTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OptionalTest.java
new file mode 100644
index 0000000..16443f6
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OptionalTest.java
@@ -0,0 +1,38 @@
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.OptionalActivity;
+
+/**
+ * @author Ragunath Jawahar
+ */
+public class OptionalTest extends ActivityInstrumentationTestCase2<OptionalActivity> {
+
+    // UI References
+    private TextView mResultTextView;
+
+    public OptionalTest() {
+        super(OptionalActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        // Get references
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    public void testOptionalAll_success() {
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+    public void testOptionalInvalidEmail_failure() {
+        EspressoHelper.type(R.id.emailEditText, "Joey");
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.FIELD_EMAIL, mResultTextView);
+    }
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ValidateHiddenViewsTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ValidateHiddenViewsTest.java
new file mode 100644
index 0000000..4d32360
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ValidateHiddenViewsTest.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2016 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.ValidateInvisibleViewsActivity;
+
+public class ValidateHiddenViewsTest
+        extends ActivityInstrumentationTestCase2<ValidateInvisibleViewsActivity> {
+
+    // UI References
+    private TextView mResultTextView;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    public void testSkipHidden_success() {
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.clickView(R.id.hideRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+    public void testValidateHidden_failure() {
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.clickView(R.id.hideRadioButton);
+        EspressoHelper.clickView(R.id.validateHiddenViewsCheckBox);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_FAILURE, mResultTextView);
+    }
+
+    public void testValidateValidHiddenField_success() {
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.type(R.id.emailEditText, Constants.EMAIL);
+        EspressoHelper.clickView(R.id.hideRadioButton);
+        EspressoHelper.clickView(R.id.validateHiddenViewsCheckBox);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+    public ValidateHiddenViewsTest() {
+        super(ValidateInvisibleViewsActivity.class);
+    }
+
+}
diff --git a/saripaar-tests/src/main/AndroidManifest.xml b/saripaar-tests/src/main/AndroidManifest.xml
index 9e66ee6..2ab240e 100644
--- a/saripaar-tests/src/main/AndroidManifest.xml
+++ b/saripaar-tests/src/main/AndroidManifest.xml
@@ -3,10 +3,10 @@
     package="com.mobsandgeeks.saripaar.tests" >
 
     <application
-        android:allowBackup="true"
-        android:icon="@drawable/ic_launcher"
         android:label="@string/app_name"
-        android:theme="@style/AppTheme" >
+        android:icon="@drawable/ic_launcher"
+        android:theme="@style/AppTheme"
+        android:allowBackup="false">
         <activity
             android:name=".ui.OrderedValidateActivity"
             android:label="@string/title_activity_address" >
@@ -71,6 +71,12 @@
         <activity
             android:name=".ui.RemoveRulesActivity"
             android:label="@string/title_activity_remove_rules" />
+        <activity
+            android:name=".ui.ValidateInvisibleViewsActivity"
+            android:label="@string/title_activity_validate_invisible_views" />
+        <activity
+            android:name=".ui.OptionalActivity"
+            android:label="@string/title_activity_optional" />
     </application>
 
 </manifest>
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomAnnotationWithAdapterActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomAnnotationWithAdapterActivity.java
index 6f4dd09..df2fdea 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomAnnotationWithAdapterActivity.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomAnnotationWithAdapterActivity.java
@@ -30,6 +30,7 @@
 import com.mobsandgeeks.saripaar.tests.R;
 import com.mobsandgeeks.saripaar.tests.ui.validation.To;
 
+import java.lang.annotation.Annotation;
 import java.util.List;
 
 /**
@@ -104,6 +105,12 @@ public void onCheckedChanged(final CompoundButton buttonView, final boolean isCh
         public Integer getData(final SeekBar seekBar) throws ConversionException {
             return seekBar.getProgress();
         }
+
+        @Override
+        public <T extends Annotation> boolean containsOptionalValue(
+                final SeekBar view, final T ruleAnnotation) {
+            return false;
+        }
     }
 
 }
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomMultipleViewDataAdaptersActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomMultipleViewDataAdaptersActivity.java
index 96ef1ec..4521b8a 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomMultipleViewDataAdaptersActivity.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomMultipleViewDataAdaptersActivity.java
@@ -32,6 +32,7 @@
 import com.mobsandgeeks.saripaar.tests.R;
 import com.wrapp.floatlabelededittext.FloatLabeledEditText;
 
+import java.lang.annotation.Annotation;
 import java.util.List;
 
 /**
@@ -127,13 +128,19 @@ public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
         public String getData(FloatLabeledEditText flet) throws ConversionException {
             return flet.getEditText().getText().toString();
         }
+
+        @Override
+        public <T extends Annotation> boolean containsOptionalValue(
+                final FloatLabeledEditText editText, final T ruleAnnotation) {
+            return false;
+        }
     }
 
     static class FletIntegerAdapter implements ViewDataAdapter<FloatLabeledEditText, Integer> {
 
         @Override
-        public Integer getData(FloatLabeledEditText flet) throws ConversionException {
-            String numberText = flet.getEditText().getText().toString().trim();
+        public Integer getData(FloatLabeledEditText editText) throws ConversionException {
+            String numberText = editText.getEditText().getText().toString().trim();
             int number;
             try {
                 number = Integer.parseInt(numberText);
@@ -145,6 +152,12 @@ public Integer getData(FloatLabeledEditText flet) throws ConversionException {
 
             return number;
         }
+
+        @Override
+        public <T extends Annotation> boolean containsOptionalValue(
+                final FloatLabeledEditText editText, final T ruleAnnotation) {
+            return false;
+        }
     }
 
 }
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomViewDataAdapterActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomViewDataAdapterActivity.java
index cfeb9f1..2d973b4 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomViewDataAdapterActivity.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomViewDataAdapterActivity.java
@@ -30,6 +30,7 @@
 import com.mobsandgeeks.saripaar.tests.R;
 import com.wrapp.floatlabelededittext.FloatLabeledEditText;
 
+import java.lang.annotation.Annotation;
 import java.util.List;
 
 /**
@@ -100,6 +101,12 @@ public Boolean getData(FloatLabeledEditText flet) throws ConversionException {
                         String booleanText = flet.getEditText().getText().toString().trim();
                         return Boolean.parseBoolean(booleanText);
                     }
+
+                    @Override
+                    public <T extends Annotation> boolean containsOptionalValue(
+                            final FloatLabeledEditText editText, final T ruleAnnotation) {
+                        return false;
+                    }
                 }
             );
         }
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OptionalActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OptionalActivity.java
new file mode 100644
index 0000000..1b9fad3
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OptionalActivity.java
@@ -0,0 +1,67 @@
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.Checked;
+import com.mobsandgeeks.saripaar.annotation.Email;
+import com.mobsandgeeks.saripaar.annotation.Optional;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ */
+public class OptionalActivity extends Activity
+        implements Validator.ValidationListener, View.OnClickListener {
+
+    // Fields
+    @Optional @Email EditText mEmailEditText;
+    @Optional @Checked CheckBox mEmailUpdatesEditText;
+
+    // Attributes
+    private Validator mValidator;
+    private TextView mResultTextView;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_optional);
+
+        // UI References
+        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
+        mEmailUpdatesEditText = (CheckBox) findViewById(R.id.emailUpdatesCheckBox);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        Button saripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event listeners
+        saripaarButton.setOnClickListener(this);
+    }
+
+    @Override
+    public void onClick(View v) {
+        mValidator.validate();
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ValidateInvisibleViewsActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ValidateInvisibleViewsActivity.java
new file mode 100644
index 0000000..3b1160b
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ValidateInvisibleViewsActivity.java
@@ -0,0 +1,111 @@
+/*
+ * Copyright (C) 2016 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.EditText;
+import android.widget.RadioButton;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+/**
+ * This {@link Activity} is used for testing the
+ * {@link Validator#validateInvisibleViews(boolean)} method.
+ */
+public class ValidateInvisibleViewsActivity extends Activity
+        implements View.OnClickListener, CompoundButton.OnCheckedChangeListener,
+                Validator.ValidationListener {
+
+    // Fields
+    @NotEmpty
+    private EditText mNameEditText;
+
+    @NotEmpty
+    private EditText mEmailEditText;
+
+    private TextView mResultTextView;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_validate_invisible_views);
+
+        // View references
+        mNameEditText = (EditText) findViewById(R.id.nameEditText);
+        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        RadioButton showViewRadioButton = (RadioButton) findViewById(R.id.showRadioButton);
+        RadioButton hideViewRadioButton = (RadioButton) findViewById(R.id.hideRadioButton);
+        CheckBox validateHiddenViewsCheckBox =
+                (CheckBox) findViewById(R.id.validateHiddenViewsCheckBox);
+        Button saripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event listeners
+        showViewRadioButton.setOnCheckedChangeListener(this);
+        hideViewRadioButton.setOnCheckedChangeListener(this);
+        validateHiddenViewsCheckBox.setOnCheckedChangeListener(this);
+        saripaarButton.setOnClickListener(this);
+    }
+
+    @Override
+    public void onClick(View view) {
+        mValidator.validate();
+    }
+
+    @Override
+    public void onCheckedChanged(CompoundButton compoundButton, boolean checked) {
+        switch (compoundButton.getId()) {
+            case R.id.showRadioButton:
+                mEmailEditText.setVisibility(View.VISIBLE);
+                break;
+
+            case R.id.hideRadioButton:
+                mEmailEditText.setVisibility(View.INVISIBLE);
+                break;
+
+            case R.id.validateHiddenViewsCheckBox:
+                mValidator.validateInvisibleViews(checked);
+                break;
+        }
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(R.string.failure);
+    }
+}
diff --git a/saripaar-tests/src/main/res/layout/activity_optional.xml b/saripaar-tests/src/main/res/layout/activity_optional.xml
new file mode 100644
index 0000000..c738241
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_optional.xml
@@ -0,0 +1,48 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:id="@+id/root"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:paddingLeft="@dimen/activity_horizontal_margin"
+                android:paddingRight="@dimen/activity_horizontal_margin"
+                android:paddingTop="@dimen/activity_vertical_margin"
+                android:paddingBottom="@dimen/activity_vertical_margin">
+
+    <EditText
+        android:id="@+id/emailEditText"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:inputType="textEmailAddress"
+        android:hint="Email"/>
+
+    <CheckBox
+        android:id="@+id/emailUpdatesCheckBox"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/emailEditText"
+        android:text="Send me email updates"/>
+
+    <Button
+        android:id="@+id/saripaarButton"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <TextView
+        android:id="@+id/resultTextView"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:layout_below="@+id/emailUpdatesCheckBox"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_above="@+id/saripaarButton"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:gravity="center"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_validate_invisible_views.xml b/saripaar-tests/src/main/res/layout/activity_validate_invisible_views.xml
new file mode 100644
index 0000000..14251ce
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_validate_invisible_views.xml
@@ -0,0 +1,83 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    tools:ignore="HardcodedText">
+
+    <EditText
+        android:id="@+id/nameEditText"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:hint="Name"
+        android:inputType="text" />
+
+    <EditText
+        android:id="@+id/emailEditText"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:layout_below="@+id/nameEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:inputType="textEmailAddress"
+        android:hint="Email" />
+
+    <Button
+        android:id="@+id/saripaarButton"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true" />
+
+    <TextView
+        android:id="@+id/resultTextView"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_below="@+id/validateHiddenViewsCheckBox"
+        android:layout_above="@+id/saripaarButton"
+        android:gravity="center"
+        android:textAppearance="?android:attr/textAppearanceMedium" />
+
+    <RadioGroup
+        android:id="@+id/showHideRadioGroup"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/emailEditText"
+        android:orientation="horizontal">
+
+        <RadioButton
+            android:id="@+id/showRadioButton"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:text="Show View"
+            android:checked="false" />
+
+        <RadioButton
+            android:id="@+id/hideRadioButton"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:text="Hide View"
+            android:checked="false" />
+    </RadioGroup>
+
+    <CheckBox
+        android:id="@+id/validateHiddenViewsCheckBox"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/showHideRadioGroup"
+        android:text="Validate Hidden Views"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/values/strings.xml b/saripaar-tests/src/main/res/values/strings.xml
index 777d143..28e050d 100644
--- a/saripaar-tests/src/main/res/values/strings.xml
+++ b/saripaar-tests/src/main/res/values/strings.xml
@@ -13,6 +13,8 @@
     <string name="title_activity_quick_rule_only_controller">Quick Rule Controller</string>
     <string name="title_activity_confirm_password">Confirm Password</string>
     <string name="title_activity_remove_rules">Remove Rules</string>
+    <string name="title_activity_validate_invisible_views">Invisible Views</string>
+    <string name="title_activity_optional">Optional</string>
 
     <string name="burst">BURST</string>
     <string name="immediate">IMMEDIATE</string>
diff --git a/saripaar/build.gradle b/saripaar/build.gradle
index a6034eb..a0f07ab 100644
--- a/saripaar/build.gradle
+++ b/saripaar/build.gradle
@@ -12,7 +12,7 @@ android {
     }
     defaultConfig {
         minSdkVersion 8
-        targetSdkVersion 21
+        targetSdkVersion 25
     }
     compileOptions {
         sourceCompatibility JavaVersion.VERSION_1_6
@@ -32,6 +32,7 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile 'com.android.support:support-annotations:23.1.1'
 }
 
 apply from: '../gradle-mvn-push.gradle'
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ContextualAnnotationRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ContextualAnnotationRule.java
index f691ec7..a51d9f3 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ContextualAnnotationRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ContextualAnnotationRule.java
@@ -31,12 +31,11 @@
     /**
      * Constructor. All subclasses MUST have a constructor with the same signature.
      *
-     * @param validationContext  A {@link com.mobsandgeeks.saripaar.ValidationContext}.
-     * @param ruleAnnotation  The rule {@link java.lang.annotation.Annotation} instance to which
-     *      this rule is paired.
+     * @param ruleAnnotation  The rule {@link Annotation} instance to which this rule is paired.
+     * @param validationContext  A {@link ValidationContext}.
      */
-    protected ContextualAnnotationRule(ValidationContext validationContext,
-            RULE_ANNOTATION ruleAnnotation) {
+    protected ContextualAnnotationRule(final RULE_ANNOTATION ruleAnnotation,
+            final ValidationContext validationContext) {
         super(ruleAnnotation);
         if (validationContext == null) {
             throw new IllegalArgumentException("'validationContext' cannot be null.");
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Reflector.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Reflector.java
index fbe0221..17fc6b3 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Reflector.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Reflector.java
@@ -45,7 +45,7 @@
      * @return The {@link java.lang.reflect.Method} if the attribute is present,
      *      null otherwise.
      */
-    public static Method getAttributeMethod(final Class<? extends Annotation> annotationType,
+    static Method getAttributeMethod(final Class<? extends Annotation> annotationType,
             final String attributeName) {
         Method attributeMethod = null;
         try {
@@ -67,7 +67,7 @@ public static Method getAttributeMethod(final Class<? extends Annotation> annota
      * @return The attribute value.
      */
     @SuppressWarnings("unchecked")
-    public static <T> T getAttributeValue(final Annotation annotation, final String attributeName,
+    static <T> T getAttributeValue(final Annotation annotation, final String attributeName,
             final Class<T> attributeDataType) {
 
         T attributeValue = null;
@@ -102,7 +102,7 @@ public static Method getAttributeMethod(final Class<? extends Annotation> annota
      *
      * @return true if the annotation is present, false otherwise.
      */
-    public static boolean isAnnotated(final Class<? extends Annotation> inspected,
+    static boolean isAnnotated(final Class<? extends Annotation> inspected,
             final Class<? extends Annotation> expected) {
         boolean isAnnotated = false;
         Annotation[] declaredAnnotations = inspected.getDeclaredAnnotations();
@@ -125,7 +125,7 @@ public static boolean isAnnotated(final Class<? extends Annotation> inspected,
      *
      * @return The correct {@code getData(View)} method.
      */
-    public static Method findGetDataMethod(final Class<? extends ViewDataAdapter> dataAdapterType) {
+    static Method findGetDataMethod(final Class<? extends ViewDataAdapter> dataAdapterType) {
         Method getDataMethod = null;
         Method[] declaredMethods = dataAdapterType.getDeclaredMethods();
 
@@ -165,7 +165,7 @@ public static Method findGetDataMethod(final Class<? extends ViewDataAdapter> da
      *      have a single-argument constructor that accepts a rule
      *      {@link java.lang.annotation.Annotation} instance.
      */
-    public static AnnotationRule instantiateRule(final Class<? extends AnnotationRule> ruleType,
+    static AnnotationRule instantiateRule(final Class<? extends AnnotationRule> ruleType,
             final Annotation ruleAnnotation, final ValidationContext validationContext)
                     throws SaripaarViolationException {
         AnnotationRule rule = null;
@@ -173,9 +173,9 @@ public static AnnotationRule instantiateRule(final Class<? extends AnnotationRul
         try {
             if (ContextualAnnotationRule.class.isAssignableFrom(ruleType)) {
                 Constructor<?> constructor = ruleType.getDeclaredConstructor(
-                        ValidationContext.class, ruleAnnotation.annotationType());
+                        ruleAnnotation.annotationType(), ValidationContext.class);
                 constructor.setAccessible(true);
-                rule = (AnnotationRule) constructor.newInstance(validationContext, ruleAnnotation);
+                rule = (AnnotationRule) constructor.newInstance(ruleAnnotation, validationContext);
             } else if (AnnotationRule.class.isAssignableFrom(ruleType)) {
                 Constructor<?> constructor = ruleType.getDeclaredConstructor(
                         ruleAnnotation.annotationType());
@@ -206,7 +206,7 @@ public static AnnotationRule instantiateRule(final Class<? extends AnnotationRul
      * @return The expected data type for the
      *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}s.
      */
-    public static Class<?> getRuleDataType(final Annotation ruleAnnotation) {
+    static Class<?> getRuleDataType(final Annotation ruleAnnotation) {
         ValidateUsing validateUsing = getValidateUsingAnnotation(ruleAnnotation.annotationType());
         return getRuleDataType(validateUsing);
     }
@@ -221,7 +221,7 @@ public static AnnotationRule instantiateRule(final Class<? extends AnnotationRul
      * @return The expected data type for the
      *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}s.
      */
-    public static Class<?> getRuleDataType(final ValidateUsing validateUsing) {
+    static Class<?> getRuleDataType(final ValidateUsing validateUsing) {
         Class<? extends AnnotationRule> rule = validateUsing.value();
         Method[] methods = rule.getDeclaredMethods();
         return getRuleTypeFromIsValidMethod(rule, methods);
@@ -252,8 +252,8 @@ private static String getMissingConstructorErrorMessage(
         String message = null;
         if (ContextualAnnotationRule.class.isAssignableFrom(ruleType)) {
             message = String.format("A constructor accepting a '%s' and a '%s' is required for %s.",
-                    ValidationContext.class, annotationType.getName(),
-                    ruleType.getClass().getName());
+                    annotationType.getName(), ValidationContext.class,
+                    ruleType.getName());
         } else if (AnnotationRule.class.isAssignableFrom(ruleType)) {
             message = String.format(
                     "'%s' should have a single-argument constructor that accepts a '%s' instance.",
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Registry.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Registry.java
index 1fdaf5a..386a9f7 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Registry.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Registry.java
@@ -50,7 +50,7 @@
  */
 final class Registry {
     // Constants
-    public static final String TAG = "Registry";
+    private static final String TAG = "Registry";
 
     // Stock adapters that come with Saripaar
     private static final Map<Class<? extends View>,
@@ -80,7 +80,7 @@
      *      on {@link android.widget.TextView}s.
      */
     @SuppressWarnings("unchecked")
-    public void register(final Class<? extends Annotation>... ruleAnnotations) {
+    void register(final Class<? extends Annotation>... ruleAnnotations) {
         for (Class<? extends Annotation> ruleAnnotation : ruleAnnotations) {
             assertIsValidRuleAnnotation(ruleAnnotation);
 
@@ -121,7 +121,7 @@ public void register(final Class<? extends Annotation>... ruleAnnotations) {
      * @param <DATA_TYPE>  Data type expected by the {@link AnnotationRule} and
      *      is returned by the {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}.
      */
-    public <VIEW extends View, DATA_TYPE> void register(
+    <VIEW extends View, DATA_TYPE> void register(
             final Class<VIEW> viewType,
             final Class<DATA_TYPE> ruleDataType,
             final ViewDataAdapter<VIEW, DATA_TYPE> viewDataAdapter,
@@ -140,7 +140,7 @@ public void register(final Class<? extends Annotation>... ruleAnnotations) {
      * @return {@link java.util.Set} containing all registered rule
      *      {@link java.lang.annotation.Annotation}s.
      */
-    public Set<Class<? extends Annotation>> getRegisteredAnnotations() {
+    Set<Class<? extends Annotation>> getRegisteredAnnotations() {
         return mMappings.keySet();
     }
 
@@ -161,7 +161,7 @@ public void register(final Class<? extends Annotation>... ruleAnnotations) {
      *      found.
      */
     @SuppressWarnings("unchecked")
-    public <VIEW extends View> ViewDataAdapter<VIEW, ?> getDataAdapter(
+    <VIEW extends View> ViewDataAdapter<VIEW, ?> getDataAdapter(
             final Class< ? extends Annotation> annotationType,
             final Class<VIEW> viewType) {
 
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
index ae3d092..7c75ff3 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
@@ -27,7 +27,7 @@
  * @since 1.0
  */
 public abstract class Rule<VALIDATABLE> {
-    protected final int mSequence;
+    private final int mSequence;
 
     /**
      * Constructor.
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/SaripaarFieldsComparator.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/SaripaarFieldsComparator.java
index 25c2f45..467e06e 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/SaripaarFieldsComparator.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/SaripaarFieldsComparator.java
@@ -59,7 +59,7 @@ public int compare(final Field lhsField, final Field rhsField) {
      *
      * @return true if all the fields are ordered, false otherwise.
      */
-    public boolean areOrderedFields() {
+    boolean areOrderedFields() {
         return mOrderedFields;
     }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationContext.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationContext.java
index 064b187..c4d32c6 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationContext.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationContext.java
@@ -37,7 +37,7 @@
 public class ValidationContext {
 
     // Attributes
-    Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> mViewRulesMap;
+    private Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> mViewRulesMap;
     private Context mContext;
 
     ValidationContext(final Context context) {
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
index 6eb20b8..1e0aba2 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
@@ -51,6 +51,7 @@
 import com.mobsandgeeks.saripaar.annotation.Max;
 import com.mobsandgeeks.saripaar.annotation.Min;
 import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+import com.mobsandgeeks.saripaar.annotation.Optional;
 import com.mobsandgeeks.saripaar.annotation.Order;
 import com.mobsandgeeks.saripaar.annotation.Password;
 import com.mobsandgeeks.saripaar.annotation.Past;
@@ -125,7 +126,7 @@
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 1.0
  */
-@SuppressWarnings("unchecked")
+@SuppressWarnings({ "unchecked", "ForLoopReplaceableByForEach" })
 public class Validator {
 
     // Entries are registered inside a static block (Placed at the end of source)
@@ -141,7 +142,9 @@
     private Mode mValidationMode;
     private ValidationContext mValidationContext;
     private Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> mViewRulesMap;
+    private Map<View, ArrayList<Pair<Annotation, ViewDataAdapter>>> mOptionalViewsMap;
     private boolean mOrderedFields;
+    private boolean mValidateInvisibleViews;
     private SequenceComparator mSequenceComparator;
     private ViewValidatedAction mViewValidatedAction;
     private Handler mViewValidatedActionHandler;
@@ -285,6 +288,15 @@ public Mode getValidationMode() {
         return mValidationMode;
     }
 
+    /**
+     * Configures the validator to validate invisible views.
+     *
+     * @param validate  {@code true} includes invisible views during validation.
+     */
+    public void validateInvisibleViews(final boolean validate) {
+        this.mValidateInvisibleViews = validate;
+    }
+
     /**
      * Validates all {@link android.view.View}s with {@link com.mobsandgeeks.saripaar.Rule}s.
      * When validating in {@link com.mobsandgeeks.saripaar.Validator.Mode#IMMEDIATE}, all
@@ -433,7 +445,8 @@ public boolean cancelAsync() {
                 ? new ArrayList<Pair<Rule, ViewDataAdapter>>() : ruleAdapterPairs;
 
         // Add the quick rule to existing rules
-        for (QuickRule quickRule : quickRules) {
+        for (int i = 0, n = quickRules.length; i < n; i++) {
+            QuickRule quickRule = quickRules[i];
             if (quickRule != null) {
                 ruleAdapterPairs.add(new Pair(quickRule, null));
             }
@@ -493,7 +506,8 @@ private void createRulesSafelyAndLazily(final boolean addingQuickRules) {
 
         List<Field> annotatedFields = new ArrayList<Field>();
         List<Field> controllerViewFields = getControllerViewFields(controllerClass);
-        for (Field field : controllerViewFields) {
+        for (int i = 0, n = controllerViewFields.size(); i < n; i++) {
+            Field field = controllerViewFields.get(i);
             if (isSaripaarAnnotatedField(field, saripaarAnnotations)) {
                 annotatedFields.add(field);
             }
@@ -531,7 +545,8 @@ private void createRulesSafelyAndLazily(final boolean addingQuickRules) {
     private List<Field> getViewFields(final Class<?> clazz) {
         List<Field> viewFields = new ArrayList<Field>();
         Field[] declaredFields = clazz.getDeclaredFields();
-        for (Field field : declaredFields) {
+        for (int i = 0, n = declaredFields.length; i < n; i++) {
+            Field field = declaredFields[i];
             if (View.class.isAssignableFrom(field.getType())) {
                 viewFields.add(field);
             }
@@ -547,7 +562,8 @@ private boolean isSaripaarAnnotatedField(final Field field,
 
         if (!hasOrderAnnotation) {
             Annotation[] annotations = field.getAnnotations();
-            for (Annotation annotation : annotations) {
+            for (int i = 0, n = annotations.length; i < n; i++) {
+                Annotation annotation = annotations[i];
                 hasSaripaarAnnotation = registeredAnnotations.contains(annotation.annotationType());
                 if (hasSaripaarAnnotation) {
                     break;
@@ -564,25 +580,59 @@ private boolean isSaripaarAnnotatedField(final Field field,
         final Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> viewRulesMap =
                 new LinkedHashMap<View, ArrayList<Pair<Rule, ViewDataAdapter>>>();
 
-        for (Field field : annotatedFields) {
+        View view;
+        for (int i = 0, n = annotatedFields.size(); i < n; i++) {
+            Field field = annotatedFields.get(i);
             final ArrayList<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs =
                     new ArrayList<Pair<Rule, ViewDataAdapter>>();
             final Annotation[] fieldAnnotations = field.getAnnotations();
-            for (Annotation fieldAnnotation : fieldAnnotations) {
-                if (isSaripaarAnnotation(fieldAnnotation.annotationType())) {
+
+            // @Optional
+            final boolean hasOptionalAnnotation = hasOptionalAnnotation(fieldAnnotations);
+            if (hasOptionalAnnotation && mOptionalViewsMap == null) {
+                mOptionalViewsMap = new HashMap<View,
+                        ArrayList<Pair<Annotation, ViewDataAdapter>>>();
+            }
+
+            view = getView(field);
+            for (int j = 0, nAnnotations = fieldAnnotations.length; j < nAnnotations; j++) {
+                Annotation annotation = fieldAnnotations[j];
+                if (isSaripaarAnnotation(annotation.annotationType())) {
                     Pair<Rule, ViewDataAdapter> ruleAdapterPair =
-                            getRuleAdapterPair(fieldAnnotation, field);
+                            getRuleAdapterPair(annotation, field);
                     ruleAdapterPairs.add(ruleAdapterPair);
+
+                    // @Optional
+                    if (hasOptionalAnnotation) {
+                        ArrayList<Pair<Annotation, ViewDataAdapter>> pairs =
+                                mOptionalViewsMap.get(view);
+                        if (pairs == null) {
+                            pairs = new ArrayList<Pair<Annotation, ViewDataAdapter>>();
+                        }
+                        pairs.add(new Pair(annotation, ruleAdapterPair.second));
+                        mOptionalViewsMap.put(view, pairs);
+                    }
                 }
             }
 
             Collections.sort(ruleAdapterPairs, mSequenceComparator);
-            viewRulesMap.put(getView(field), ruleAdapterPairs);
+            viewRulesMap.put(view, ruleAdapterPairs);
         }
 
         return viewRulesMap;
     }
 
+    private boolean hasOptionalAnnotation(final Annotation[] annotations) {
+        if (annotations != null && annotations.length > 0) {
+            for (int i = 0, n = annotations.length; i < n; i++) {
+                if (Optional.class.equals(annotations[i].annotationType())) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
     private Pair<Rule, ViewDataAdapter> getRuleAdapterPair(final Annotation saripaarAnnotation,
             final Field viewField) {
         final Class<? extends Annotation> annotationType = saripaarAnnotation.annotationType();
@@ -745,41 +795,50 @@ private ValidationReport getValidationReport(final View targetView,
 
         validation:
         for (View view : views) {
-            ArrayList<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs = viewRulesMap.get(view);
-            int nRules = ruleAdapterPairs.size();
+            List<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs = viewRulesMap.get(view);
+
+            // @Optional
+            boolean isOptional = mOptionalViewsMap != null && mOptionalViewsMap.containsKey(view);
+            if (isOptional && containsOptionalValue(view)) {
+                continue;
+            }
 
             // Validate all the rules for the given view.
             List<Rule> failedRules = null;
-            for (int i = 0; i < nRules; i++) {
-
-                // Validate only views that are visible and enabled
-                if (view.isShown() && view.isEnabled()) {
-                    Pair<Rule, ViewDataAdapter> ruleAdapterPair = ruleAdapterPairs.get(i);
-                    Rule failedRule = validateViewWithRule(
-                            view, ruleAdapterPair.first, ruleAdapterPair.second);
-                    boolean isLastRuleForView = nRules == i + 1;
-
-                    if (failedRule != null) {
-                        if (addErrorToReport) {
-                            if (failedRules == null) {
-                                failedRules = new ArrayList<Rule>();
-                                validationErrors.add(new ValidationError(view, failedRules));
-                            }
-                            failedRules.add(failedRule);
-                        } else {
-                            hasMoreErrors = true;
-                        }
+            for (int i = 0, nRules = ruleAdapterPairs.size(); i < nRules; i++) {
+
+                // Skip views that are invisible and disabled
+                boolean disabledView = !view.isEnabled();
+                boolean skipView = !view.isShown() && !mValidateInvisibleViews;
+                if (disabledView || skipView) {
+                    continue;
+                }
+
+                Pair<Rule, ViewDataAdapter> ruleAdapterPair = ruleAdapterPairs.get(i);
+                Rule failedRule = validateViewWithRule(
+                        view, ruleAdapterPair.first, ruleAdapterPair.second);
+                boolean isLastRuleForView = i + 1 == nRules;
 
-                        if (Mode.IMMEDIATE.equals(validationMode) && isLastRuleForView) {
-                            break validation;
+                if (failedRule != null) {
+                    if (addErrorToReport) {
+                        if (failedRules == null) {
+                            failedRules = new ArrayList<Rule>();
+                            validationErrors.add(new ValidationError(view, failedRules));
                         }
+                        failedRules.add(failedRule);
+                    } else {
+                        hasMoreErrors = true;
                     }
 
-                    // Don't add reports for subsequent views
-                    if (view.equals(targetView) && isLastRuleForView) {
-                        addErrorToReport = false;
+                    if (Mode.IMMEDIATE.equals(validationMode) && isLastRuleForView) {
+                        break validation;
                     }
                 }
+
+                // Don't add reports for subsequent views
+                if (view.equals(targetView) && isLastRuleForView) {
+                    addErrorToReport = false;
+                }
             }
 
             // Callback if a view passes all rules
@@ -793,6 +852,23 @@ private ValidationReport getValidationReport(final View targetView,
         return new ValidationReport(validationErrors, hasMoreErrors);
     }
 
+    private boolean containsOptionalValue(final View view) {
+        ArrayList<Pair<Annotation, ViewDataAdapter>> annotationAdapterPairs
+                = mOptionalViewsMap.get(view);
+
+        for (int i = 0, n = annotationAdapterPairs.size(); i < n; i++) {
+            Pair<Annotation, ViewDataAdapter> pair = annotationAdapterPairs.get(i);
+            ViewDataAdapter adapter = pair.second;
+            Annotation ruleAnnotation = pair.first;
+
+            if (adapter.containsOptionalValue(view, ruleAnnotation)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
     private Rule validateViewWithRule(final View view, final Rule rule,
             final ViewDataAdapter dataAdapter) {
 
@@ -850,10 +926,9 @@ private View getLastView() {
     private View getViewBefore(final View view) {
         ArrayList<View> views = new ArrayList<View>(mViewRulesMap.keySet());
 
-        final int nViews = views.size();
         View currentView;
         View previousView = null;
-        for (int i = 0; i < nViews; i++) {
+        for (int i = 0, n = views.size(); i < n; i++) {
             currentView = views.get(i);
             if (currentView == view) {
                 previousView = i > 0 ? views.get(i - 1) : null;
@@ -935,12 +1010,12 @@ private View getViewBefore(final View view) {
         }
     }
 
-    class AsyncValidationTask extends AsyncTask<Void, Void, ValidationReport> {
+    private class AsyncValidationTask extends AsyncTask<Void, Void, ValidationReport> {
         private View mView;
         private boolean mOrderedRules;
         private String mReasonSuffix;
 
-        public AsyncValidationTask(final View view, final boolean orderedRules,
+        AsyncValidationTask(final View view, final boolean orderedRules,
                 final String reasonSuffix) {
             this.mView = view;
             this.mOrderedRules = orderedRules;
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/CheckBoxBooleanAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/CheckBoxBooleanAdapter.java
index 32f7ff0..ae6dbd1 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/CheckBoxBooleanAdapter.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/CheckBoxBooleanAdapter.java
@@ -16,6 +16,8 @@
 
 import android.widget.CheckBox;
 
+import java.lang.annotation.Annotation;
+
 /**
  * Adapter returns a {@link java.lang.Boolean} value from a {@link android.widget.CheckBox}.
  *
@@ -28,4 +30,10 @@
     public Boolean getData(final CheckBox checkBox) {
         return checkBox.isChecked();
     }
+
+    @Override
+    public <T extends Annotation> boolean containsOptionalValue(final CheckBox checkBox,
+            final T ruleAnnotation) {
+        return !checkBox.isChecked();
+    }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioButtonBooleanAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioButtonBooleanAdapter.java
index 818c605..2c2673e 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioButtonBooleanAdapter.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioButtonBooleanAdapter.java
@@ -16,6 +16,8 @@
 
 import android.widget.RadioButton;
 
+import java.lang.annotation.Annotation;
+
 /**
  * Adapter that returns a {@link java.lang.Boolean} value from a {@link android.widget.RadioButton}.
  *
@@ -28,4 +30,10 @@
     public Boolean getData(final RadioButton radioButton) {
         return radioButton.isChecked();
     }
+
+    @Override
+    public <T extends Annotation> boolean containsOptionalValue(final RadioButton radioButton,
+            final T ruleAnnotation) {
+        return !radioButton.isChecked();
+    }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioGroupBooleanAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioGroupBooleanAdapter.java
index fad9f67..18b1dbd 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioGroupBooleanAdapter.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioGroupBooleanAdapter.java
@@ -19,6 +19,8 @@
 
 import com.mobsandgeeks.saripaar.exception.ConversionException;
 
+import java.lang.annotation.Annotation;
+
 
 /**
  * Adapter that returns a {@link java.lang.Boolean} value from a {@link android.widget.RadioGroup}.
@@ -32,4 +34,10 @@
     public Boolean getData(RadioGroup radioGroup) throws ConversionException {
         return radioGroup.getCheckedRadioButtonId() != View.NO_ID;
     }
+
+    @Override
+    public <T extends Annotation> boolean containsOptionalValue(final RadioGroup radioGroup,
+            final T ruleAnnotation) {
+        return radioGroup.getCheckedRadioButtonId() == View.NO_ID;
+    }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/SpinnerIndexAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/SpinnerIndexAdapter.java
index 4a3a423..8ffe9e6 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/SpinnerIndexAdapter.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/SpinnerIndexAdapter.java
@@ -16,6 +16,10 @@
 
 import android.widget.Spinner;
 
+import com.mobsandgeeks.saripaar.annotation.Select;
+
+import java.lang.annotation.Annotation;
+
 /**
  * Adapter that returns the current selection index from a {@link android.widget.Spinner} using the
  * {@link android.widget.Spinner#getSelectedItemPosition()} method.
@@ -29,4 +33,13 @@
     public Integer getData(final Spinner spinner) {
         return spinner.getSelectedItemPosition();
     }
+
+    @Override
+    public <T extends Annotation> boolean containsOptionalValue(final Spinner spinner,
+            final T ruleAnnotation) {
+        int selection = spinner.getSelectedItemPosition();
+
+        return ruleAnnotation instanceof Select
+                && selection == ((Select) ruleAnnotation).defaultSelection();
+    }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewBaseAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewBaseAdapter.java
new file mode 100644
index 0000000..b2bb0e9
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewBaseAdapter.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2016 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.adapter;
+
+import android.view.View;
+import android.widget.TextView;
+
+import java.lang.annotation.Annotation;
+
+/**
+ * A base class that implements the {@link #containsOptionalValue(View, Annotation)} method for concrete
+ * {@link TextView} adapters.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.1.0
+ */
+abstract class TextViewBaseAdapter<DATA> implements ViewDataAdapter<TextView, DATA> {
+
+    @Override
+    public <T extends Annotation> boolean containsOptionalValue(final TextView textView,
+            final T annotation) {
+        return "".equals(textView.getText().toString());
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewDoubleAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewDoubleAdapter.java
index 1be3adc..693055b 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewDoubleAdapter.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewDoubleAdapter.java
@@ -25,12 +25,12 @@
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 2.0
  */
-public class TextViewDoubleAdapter implements ViewDataAdapter<TextView, Double> {
+public class TextViewDoubleAdapter extends TextViewBaseAdapter<Double> {
     private static final String REGEX_DECIMAL = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
 
     @Override
-    public Double getData(final TextView editText) throws ConversionException {
-        String doubleString = editText.getText().toString().trim();
+    public Double getData(final TextView textView) throws ConversionException {
+        String doubleString = textView.getText().toString().trim();
         if (!doubleString.matches(REGEX_DECIMAL)) {
             String message = String.format("Expected a floating point number, but was %s",
                 doubleString);
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewFloatAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewFloatAdapter.java
index 447c71a..c18d23c 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewFloatAdapter.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewFloatAdapter.java
@@ -25,12 +25,12 @@
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 2.0
  */
-public class TextViewFloatAdapter implements ViewDataAdapter<TextView, Float> {
+public class TextViewFloatAdapter extends TextViewBaseAdapter<Float> {
     private static final String REGEX_DECIMAL = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
 
     @Override
-    public Float getData(final TextView editText) throws ConversionException {
-        String floatString = editText.getText().toString().trim();
+    public Float getData(final TextView textView) throws ConversionException {
+        String floatString = textView.getText().toString().trim();
         if (!floatString.matches(REGEX_DECIMAL)) {
             String message = String.format("Expected a floating point number, but was %s",
                 floatString);
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewIntegerAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewIntegerAdapter.java
index f175cff..7f73e50 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewIntegerAdapter.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewIntegerAdapter.java
@@ -25,12 +25,12 @@
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 2.0
  */
-public class TextViewIntegerAdapter implements ViewDataAdapter<TextView, Integer> {
+public class TextViewIntegerAdapter extends TextViewBaseAdapter<Integer> {
     private static final String REGEX_INTEGER = "\\d+";
 
     @Override
-    public Integer getData(final TextView editText) throws ConversionException {
-        String integerString = editText.getText().toString().trim();
+    public Integer getData(final TextView textView) throws ConversionException {
+        String integerString = textView.getText().toString().trim();
         if (!integerString.matches(REGEX_INTEGER)) {
             String message = String.format("Expected an integer, but was %s", integerString);
             throw new ConversionException(message);
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewStringAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewStringAdapter.java
index 4fd3cdf..d479e25 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewStringAdapter.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewStringAdapter.java
@@ -23,10 +23,10 @@
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 2.0
  */
-public class TextViewStringAdapter implements ViewDataAdapter<TextView, String> {
+public class TextViewStringAdapter extends TextViewBaseAdapter<String> {
 
     @Override
-    public String getData(final TextView editText) {
-        return editText.getText().toString();
+    public String getData(final TextView textView) {
+        return textView.getText().toString();
     }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/ViewDataAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/ViewDataAdapter.java
index b7c6ef6..2d6e328 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/ViewDataAdapter.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/ViewDataAdapter.java
@@ -18,6 +18,8 @@
 
 import com.mobsandgeeks.saripaar.exception.ConversionException;
 
+import java.lang.annotation.Annotation;
+
 /**
  * {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}s are used to extract data from
  * {@link android.view.View}s. Saripaar provides a set of default adapters for stock Android
@@ -41,4 +43,15 @@
      *      data type.
      */
     DATA getData(VIEW view) throws ConversionException;
+
+    /**
+     * Used to check if the {@link View} contains an optional value. This method is used
+     * to cater the {@link com.mobsandgeeks.saripaar.annotation.Optional} annotation.
+     *
+     * @param view  The view that is being validated.
+     * @param <T>  The rule annotation used to validate the view.
+     *
+     * @return  {@code true} if the value represents an optional value, {@code false} otherwise.
+     */
+    <T extends Annotation> boolean containsOptionalValue(VIEW view, T ruleAnnotation);
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertFalse.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertFalse.java
index 46df3f7..f86c082 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertFalse.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertFalse.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.AssertFalseRule;
 
 import java.lang.annotation.ElementType;
@@ -29,7 +31,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface AssertFalse {
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "Should be false";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Should be false";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertTrue.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertTrue.java
index 4a8ee7b..65859c8 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertTrue.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertTrue.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.AssertTrueRule;
 
 import java.lang.annotation.ElementType;
@@ -29,7 +31,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface AssertTrue {
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "Should be true";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Should be true";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Checked.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Checked.java
index 4926464..22e05e0 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Checked.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Checked.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.CheckedRule;
 
 import java.lang.annotation.ElementType;
@@ -29,9 +31,9 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Checked {
-    boolean value()     default true;
+    boolean value()                 default true;
 
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "Must be checked";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Must be checked";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java
index 5eada96..5af5698 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.ConfirmEmailRule;
 
 import java.lang.annotation.ElementType;
@@ -29,7 +31,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface ConfirmEmail {
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "Emails don't match";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Emails don't match";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
index a03e44d..ac8d082 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.ConfirmPasswordRule;
 
 import java.lang.annotation.ElementType;
@@ -29,7 +31,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface ConfirmPassword {
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "Passwords don't match";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Passwords don't match";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/CreditCard.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/CreditCard.java
index 707da6c..5ffc66f 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/CreditCard.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/CreditCard.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.CreditCardRule;
 
 import java.lang.annotation.ElementType;
@@ -31,12 +33,12 @@
 public @interface CreditCard {
     Type[] cardTypes()  default {
         Type.AMEX, Type.DINERS, Type.DISCOVER,
-        Type.MASTERCARD, Type.VISA,
+        Type.MASTERCARD, Type.VISA
     };
 
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "Invalid card";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Invalid card";
+    int sequence()                  default -1;
 
     enum Type {
         AMEX, DINERS, DISCOVER, MASTERCARD, VISA, NONE
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMax.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMax.java
index 0ab601e..5ef9f5b 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMax.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMax.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.DecimalMaxRule;
 
 import java.lang.annotation.ElementType;
@@ -31,7 +33,7 @@
 public @interface DecimalMax {
     double value();
 
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "Should be less than max value";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Should be less than max value";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMin.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMin.java
index c94bf2b..2c32bc7 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMin.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMin.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.DecimalMinRule;
 
 import java.lang.annotation.ElementType;
@@ -31,7 +33,7 @@
 public @interface DecimalMin {
     double value();
 
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "Should be less than min value";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Should be greater than min value";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Digits.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Digits.java
index 526a749..c6ce3fd 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Digits.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Digits.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.DigitsRule;
 
 import java.lang.annotation.ElementType;
@@ -30,9 +32,9 @@
 @Target(ElementType.FIELD)
 public @interface Digits {
     int integer();
-    int fraction()      default 2;
+    int fraction()                  default 2;
 
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "Should be a digit";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Should be a digit";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Domain.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Domain.java
index 6fc53b3..b2ff5a6 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Domain.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Domain.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.DomainRule;
 
 import java.lang.annotation.ElementType;
@@ -29,9 +31,9 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Domain {
-    boolean allowLocal()    default false;
+    boolean allowLocal()            default false;
 
-    int sequence()          default -1;
-    int messageResId()      default -1;
-    String message()        default "Invalid domain name";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Invalid domain name";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java
index da2a984..f966354 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.EmailRule;
 
 import java.lang.annotation.ElementType;
@@ -29,9 +31,9 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Email {
-    boolean allowLocal()    default false;
+    boolean allowLocal()            default false;
 
-    int sequence()          default -1;
-    int messageResId()      default -1;
-    String message()        default "Invalid email";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Invalid email";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java
index 29bb0bf..ef633cf 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.DateFormats;
 import com.mobsandgeeks.saripaar.rule.FutureRule;
 
@@ -30,10 +32,10 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Future {
-    String dateFormat()     default DateFormats.DMY;
-    int dateFormatResId()   default -1;
+    @StringRes int dateFormatResId()    default -1;
+    String dateFormat()                 default DateFormats.DMY;
 
-    int sequence()          default -1;
-    int messageResId()      default -1;
-    String message()        default "Date should be in the future";
+    @StringRes int messageResId()       default -1;
+    String message()                    default "Date should be in the future";
+    int sequence()                      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/IpAddress.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/IpAddress.java
index c4e9f1f..d4811c4 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/IpAddress.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/IpAddress.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.IpAddressRule;
 
 import java.lang.annotation.ElementType;
@@ -29,7 +31,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface IpAddress {
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "Invalid IP address";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Invalid IP address";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Isbn.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Isbn.java
index 6b03326..ac0cde0 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Isbn.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Isbn.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.IsbnRule;
 
 import java.lang.annotation.ElementType;
@@ -29,7 +31,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Isbn {
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "Invalid ISBN";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Invalid ISBN";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Length.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Length.java
index dcaa632..9d47789 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Length.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Length.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.LengthRule;
 
 import java.lang.annotation.ElementType;
@@ -29,11 +31,11 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Length {
-    int min()           default Integer.MIN_VALUE;
-    int max()           default Integer.MAX_VALUE;
-    boolean trim()      default false;
+    int min()                       default 0;
+    int max()                       default Integer.MAX_VALUE;
+    boolean trim()                  default false;
 
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "Invalid length";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Invalid length";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java
index 20671e7..151ea84 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.MaxRule;
 
 import java.lang.annotation.ElementType;
@@ -31,7 +33,7 @@
 public @interface Max {
     int value();
 
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "Should be less than max value";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Should be less than max value";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java
index c957ca5..e568e49 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.MinRule;
 
 import java.lang.annotation.ElementType;
@@ -31,7 +33,7 @@
 public @interface Min {
     int value();
 
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "Should be greater than min value";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Should be greater than min value";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java
index e43c6e7..169c0c4 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.NotEmptyRule;
 
 import java.lang.annotation.ElementType;
@@ -29,9 +31,11 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface NotEmpty {
-    boolean trim()      default false;
+    @StringRes int emptyTextResId() default -1;
+    String emptyText()              default "";
+    boolean trim()                  default false;
 
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "This field is required";
+    @StringRes int messageResId()   default -1;
+    String message()                default "This field is required";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Optional.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Optional.java
new file mode 100644
index 0000000..8bf8529
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Optional.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.1.0
+ */
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Optional {
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Or.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Or.java
new file mode 100644
index 0000000..c49db59
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Or.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.1.0
+ */
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Or {
+    @StringRes int messageResId()   default -1;
+    String message()                default "One of the rules must be valid";
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Password.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Password.java
index 059173a..bfbaf51 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Password.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Password.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.PasswordRule;
 
 import java.lang.annotation.ElementType;
@@ -29,12 +31,12 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Password {
-    int min()           default 6;
-    Scheme scheme()     default Scheme.ANY;
+    int min()                       default 6;
+    Scheme scheme()                 default Scheme.ANY;
 
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "Invalid password";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Invalid password";
+    int sequence()                  default -1;
 
     enum Scheme {
         ANY, ALPHA, ALPHA_MIXED_CASE,
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Past.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Past.java
index 3f14844..39a4ff1 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Past.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Past.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.DateFormats;
 import com.mobsandgeeks.saripaar.rule.PastRule;
 
@@ -30,10 +32,10 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Past {
-    String dateFormat()     default DateFormats.DMY;
-    int dateFormatResId()   default -1;
+    @StringRes int dateFormatResId()    default -1;
+    String dateFormat()                 default DateFormats.DMY;
 
-    int sequence()          default -1;
-    int messageResId()      default -1;
-    String message()        default "Date should be in the past";
+    @StringRes int messageResId()       default -1;
+    String message()                    default "Date should be in the past";
+    int sequence()                      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Pattern.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Pattern.java
index 300f930..5d3e431 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Pattern.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Pattern.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.PatternRule;
 
 import java.lang.annotation.ElementType;
@@ -29,10 +31,11 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Pattern {
-    String regex();
-    boolean caseSensitive() default true;
+    @StringRes int regexResId()     default -1;
+    String regex()                  default ".*";
+    boolean caseSensitive()         default true;
 
-    int sequence()          default -1;
-    int messageResId()      default -1;
-    String message()        default "Input does not match pattern";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Input does not match pattern";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Select.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Select.java
index 11e6963..890aa1a 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Select.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Select.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.SelectRule;
 
 import java.lang.annotation.ElementType;
@@ -29,9 +31,9 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Select {
-    int defaultSelection()  default 0;
+    int defaultSelection()          default 0;
 
-    int sequence()          default -1;
-    int messageResId()      default -1;
-    String message()        default "Select a value";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Select a value";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Url.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Url.java
index 496bda4..f98c26c 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Url.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Url.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import com.mobsandgeeks.saripaar.rule.UrlRule;
 
 import java.lang.annotation.ElementType;
@@ -29,10 +31,10 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Url {
-    String[] schemes()          default { "http", "https", "ftp" };
-    boolean allowFragments()    default true;
+    String[] schemes()              default { "http", "https", "ftp" };
+    boolean allowFragments()        default true;
 
-    int sequence()              default -1;
-    int messageResId()          default -1;
-    String message()            default "Invalid URL";
+    @StringRes int messageResId()   default -1;
+    String message()                default "Invalid URL";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/ConfirmEmailRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/ConfirmEmailRule.java
index 31286d2..76e9b92 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/ConfirmEmailRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/ConfirmEmailRule.java
@@ -24,9 +24,9 @@
  */
 public class ConfirmEmailRule extends SameValueContextualRule<ConfirmEmail, Email, String> {
 
-    protected ConfirmEmailRule(final ValidationContext validationContext,
-            final ConfirmEmail confirmEmail) {
-        super(validationContext, confirmEmail, Email.class);
+    protected ConfirmEmailRule(final ConfirmEmail confirmEmail,
+            final ValidationContext validationContext) {
+        super(confirmEmail, Email.class, validationContext);
     }
 
     @Override
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/ConfirmPasswordRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/ConfirmPasswordRule.java
index e3575f6..11e231b 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/ConfirmPasswordRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/ConfirmPasswordRule.java
@@ -22,11 +22,12 @@
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 2.0
  */
-public class ConfirmPasswordRule extends SameValueContextualRule<ConfirmPassword, Password, String> {
+public class ConfirmPasswordRule
+        extends SameValueContextualRule<ConfirmPassword, Password, String> {
 
-    protected ConfirmPasswordRule(final ValidationContext validationContext,
-            final ConfirmPassword confirmPassword) {
-        super(validationContext, confirmPassword, Password.class);
+    protected ConfirmPasswordRule(final ConfirmPassword confirmPassword,
+            final ValidationContext validationContext) {
+        super(confirmPassword, Password.class, validationContext);
     }
 
     @Override
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java
index 15b5b07..54d68cd 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java
@@ -30,13 +30,9 @@
  * @since 2.0
  */
 public class FutureRule extends ContextualAnnotationRule<Future, String> {
-    private int mDateFormatResId;
-    private String mDateFormatString;
 
-    protected FutureRule(final ValidationContext validationContext, final Future future) {
-        super(validationContext, future);
-        mDateFormatResId = future.dateFormatResId();
-        mDateFormatString = future.dateFormat();
+    protected FutureRule(final Future future, final ValidationContext validationContext) {
+        super(future, validationContext);
     }
 
     @Override
@@ -53,8 +49,9 @@ public boolean isValid(final String dateString) {
 
     private DateFormat getDateFormat() {
         Context context = mValidationContext.getContext();
-        String dateFormatString =  mDateFormatResId != -1
-                ? context.getString(mDateFormatResId) : mDateFormatString;
+        int dateFormatResId = mRuleAnnotation.dateFormatResId();
+        String dateFormatString =  dateFormatResId != -1
+                ? context.getString(dateFormatResId) : mRuleAnnotation.dateFormat();
         return new SimpleDateFormat(dateFormatString);
     }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/NotEmptyRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/NotEmptyRule.java
index 90a50a9..d23e169 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/NotEmptyRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/NotEmptyRule.java
@@ -14,22 +14,36 @@
 
 package com.mobsandgeeks.saripaar.rule;
 
-import com.mobsandgeeks.saripaar.AnnotationRule;
+import android.content.Context;
+
+import com.mobsandgeeks.saripaar.ContextualAnnotationRule;
+import com.mobsandgeeks.saripaar.ValidationContext;
 import com.mobsandgeeks.saripaar.annotation.NotEmpty;
 
 /**
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 2.0
  */
-public class NotEmptyRule extends AnnotationRule<NotEmpty, String> {
+public class NotEmptyRule extends ContextualAnnotationRule<NotEmpty, String> {
 
-    protected NotEmptyRule(final NotEmpty notEmpty) {
-        super(notEmpty);
+    protected NotEmptyRule(final NotEmpty notEmpty, final ValidationContext validationContext) {
+        super(notEmpty, validationContext);
     }
 
     @Override
     public boolean isValid(final String data) {
-        return data != null && (mRuleAnnotation.trim()
-                ? data.trim().length() > 0 : data.length() > 0);
+        boolean isEmpty = false;
+        if (data != null) {
+            String text = mRuleAnnotation.trim() ? data.trim() : data;
+
+            Context context = mValidationContext.getContext();
+            String emptyText = mRuleAnnotation.emptyTextResId() != -1
+                    ? context.getString(mRuleAnnotation.emptyTextResId())
+                    : mRuleAnnotation.emptyText();
+
+            isEmpty = emptyText.equals(text) || "".equals(text);
+        }
+
+        return !isEmpty;
     }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PastRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PastRule.java
index 426aaec..2f3dbed 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PastRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PastRule.java
@@ -30,13 +30,9 @@
  * @since 2.0
  */
 public class PastRule extends ContextualAnnotationRule<Past, String> {
-    private int mDateFormatResId;
-    private String mDateFormatString;
 
-    protected PastRule(final ValidationContext validationContext, final Past past) {
-        super(validationContext, past);
-        mDateFormatResId = past.dateFormatResId();
-        mDateFormatString = past.dateFormat();
+    protected PastRule(final Past past, final ValidationContext validationContext) {
+        super(past, validationContext);
     }
 
     @Override
@@ -53,8 +49,9 @@ public boolean isValid(final String dateString) {
 
     private DateFormat getDateFormat() {
         Context context = mValidationContext.getContext();
-        String dateFormatString =  mDateFormatResId != -1
-                ? context.getString(mDateFormatResId) : mDateFormatString;
+        int dateFormatResId = mRuleAnnotation.dateFormatResId();
+        String dateFormatString =  dateFormatResId != -1
+                ? context.getString(dateFormatResId) : mRuleAnnotation.dateFormat();
         return new SimpleDateFormat(dateFormatString);
     }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PatternRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PatternRule.java
index 0213c6e..4821d72 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PatternRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PatternRule.java
@@ -14,7 +14,8 @@
 
 package com.mobsandgeeks.saripaar.rule;
 
-import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.ContextualAnnotationRule;
+import com.mobsandgeeks.saripaar.ValidationContext;
 import com.mobsandgeeks.saripaar.annotation.Pattern;
 
 import commons.validator.routines.RegexValidator;
@@ -23,15 +24,17 @@
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 2.0
  */
-public class PatternRule extends AnnotationRule<Pattern, String> {
+public class PatternRule extends ContextualAnnotationRule<Pattern, String> {
 
-    protected PatternRule(final Pattern pattern) {
-        super(pattern);
+    protected PatternRule(final Pattern pattern, final ValidationContext validationContext) {
+        super(pattern, validationContext);
     }
 
     @Override
     public boolean isValid(final String text) {
-        String regex = mRuleAnnotation.regex();
+        int regexResId = mRuleAnnotation.regexResId();
+        String regex = regexResId != -1
+                ? mValidationContext.getContext().getString(regexResId) : mRuleAnnotation.regex();
         boolean caseSensitive = mRuleAnnotation.caseSensitive();
         return new RegexValidator(regex, caseSensitive).isValid(text);
     }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SameValueContextualRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SameValueContextualRule.java
index 09e7337..78e818d 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SameValueContextualRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SameValueContextualRule.java
@@ -36,11 +36,11 @@
     private Class<SOURCE> mSourceClass;
     private Class<CONFIRM> mConfirmClass;
 
-    protected SameValueContextualRule(final ValidationContext validationContext,
-            final CONFIRM confirmAnnotation, final Class<SOURCE> sourceClass) {
-        super(validationContext, confirmAnnotation);
-        mSourceClass = sourceClass;
+    protected SameValueContextualRule(final CONFIRM confirmAnnotation,
+            final Class<SOURCE> sourceClass, final ValidationContext validationContext) {
+        super(confirmAnnotation, validationContext);
         mConfirmClass = (Class<CONFIRM>) confirmAnnotation.annotationType();
+        mSourceClass = sourceClass;
     }
 
     @Override
diff --git a/saripaar/src/main/java/commons/validator/routines/DomainValidator.java b/saripaar/src/main/java/commons/validator/routines/DomainValidator.java
index f8f43f9..3c7baa4 100644
--- a/saripaar/src/main/java/commons/validator/routines/DomainValidator.java
+++ b/saripaar/src/main/java/commons/validator/routines/DomainValidator.java
@@ -394,6 +394,7 @@ private String chompLeadingDot(String str) {
         "dental",
         "dentist",
         "desi",
+        "design",
         "dev",
         "diamonds",
         "diet",
diff --git a/settings.gradle b/settings.gradle
index d14b19f..0d125ad 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +1 @@
-include ':saripaar', ':saripaar-tests', ':saripaar-showcase'
+include ':saripaar', ':saripaar-tests'
