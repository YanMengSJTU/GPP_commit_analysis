diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordNoPasswordTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordNoPasswordTest.java
index d830e58..00acf6f 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordNoPasswordTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordNoPasswordTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.ConfirmPasswordNoPasswordActivity;
-
 public class ConfirmPasswordNoPasswordTest
         extends ActivityInstrumentationTestCase2<ConfirmPasswordNoPasswordActivity> {
 
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordSeveralPasswordsTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordSeveralPasswordsTest.java
index 4e103a9..9189413 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordSeveralPasswordsTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordSeveralPasswordsTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.ConfirmPasswordSeveralPasswordsActivity;
-
 public class ConfirmPasswordSeveralPasswordsTest
         extends ActivityInstrumentationTestCase2<ConfirmPasswordSeveralPasswordsActivity> {
 
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordWithPasswordTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordWithPasswordTest.java
index 31102d5..4ee5dd8 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordWithPasswordTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordWithPasswordTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.ConfirmPasswordWithPasswordActivity;
-
 public class ConfirmPasswordWithPasswordTest
         extends ActivityInstrumentationTestCase2<ConfirmPasswordWithPasswordActivity> {
 
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomAnnotationTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomAnnotationTest.java
index 0e07754..63cd634 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomAnnotationTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomAnnotationTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.CustomAnnotationActivity;
-
 public class CustomAnnotationTest
         extends ActivityInstrumentationTestCase2<CustomAnnotationActivity> {
 
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomAnnotationWithAdapterTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomAnnotationWithAdapterTest.java
index 1b1d6aa..b59a705 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomAnnotationWithAdapterTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomAnnotationWithAdapterTest.java
@@ -18,8 +18,6 @@
 import android.widget.SeekBar;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.CustomAnnotationWithAdapterActivity;
-
 public class CustomAnnotationWithAdapterTest
         extends ActivityInstrumentationTestCase2<CustomAnnotationWithAdapterActivity> {
 
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomMultipleViewDataAdaptersTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomMultipleViewDataAdaptersTest.java
index 475cd7e..4d079d5 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomMultipleViewDataAdaptersTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomMultipleViewDataAdaptersTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.CustomMultipleViewDataAdaptersActivity;
-
 public class CustomMultipleViewDataAdaptersTest
         extends ActivityInstrumentationTestCase2<CustomMultipleViewDataAdaptersActivity> {
 
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomViewDataAdapterTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomViewDataAdapterTest.java
index db88d0b..2a2e93c 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomViewDataAdapterTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomViewDataAdapterTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.CustomViewDataAdapterActivity;
-
 public class CustomViewDataAdapterTest
         extends ActivityInstrumentationTestCase2<CustomViewDataAdapterActivity> {
 
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OptionalTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OptionalTest.java
index 16443f6..1eced7d 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OptionalTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OptionalTest.java
@@ -3,8 +3,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.OptionalActivity;
-
 /**
  * @author Ragunath Jawahar
  */
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedSequencingTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedSequencingTest.java
index 0a511f5..ad4b027 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedSequencingTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedSequencingTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.OrderedSequencingActivity;
-
 public class OrderedSequencingTest
         extends ActivityInstrumentationTestCase2<OrderedSequencingActivity> {
 
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateBeforeTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateBeforeTest.java
index de1e57a..0b18307 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateBeforeTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateBeforeTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.OrderedValidateBeforeActivity;
-
 public class OrderedValidateBeforeTest
         extends ActivityInstrumentationTestCase2<OrderedValidateBeforeActivity> {
 
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateTillTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateTillTest.java
index b742341..5a473bf 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateTillTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateTillTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.OrderedValidateTillActivity;
-
 public class OrderedValidateTillTest
         extends ActivityInstrumentationTestCase2<OrderedValidateTillActivity> {
 
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyControllerTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyControllerTest.java
index b52bb34..2e7ed9b 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyControllerTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyControllerTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.QuickRuleOnlyControllerActivity;
-
 public class QuickRuleOnlyControllerTest
         extends ActivityInstrumentationTestCase2<QuickRuleOnlyControllerActivity> {
 
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyTest.java
index 1d22286..58ab4b6 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.QuickRuleOnlyActivity;
-
 public class QuickRuleOnlyTest
         extends ActivityInstrumentationTestCase2<QuickRuleOnlyActivity> {
 
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOrderedTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOrderedTest.java
index 071d974..13f1260 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOrderedTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOrderedTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.QuickRuleOrderedActivity;
-
 /**
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  */
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleUnorderedInOrderedTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleUnorderedInOrderedTest.java
index bb5e168..68f7fe0 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleUnorderedInOrderedTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleUnorderedInOrderedTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.QuickRuleUnorderedInOrderedActivity;
-
 /**
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  */
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleUnorderedTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleUnorderedTest.java
index 7a2fa48..acd48d9 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleUnorderedTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleUnorderedTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.QuickRuleUnorderedActivity;
-
 /**
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  */
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/RemoveRulesTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/RemoveRulesTest.java
index dc4a0ff..0cfd574 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/RemoveRulesTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/RemoveRulesTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.RemoveRulesActivity;
-
 public class RemoveRulesTest
         extends ActivityInstrumentationTestCase2<RemoveRulesActivity> {
 
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedSequencingTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedSequencingTest.java
index b6ebe76..8211b17 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedSequencingTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedSequencingTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.UnorderedSequencingActivity;
-
 public class UnorderedSequencingTest
         extends ActivityInstrumentationTestCase2<UnorderedSequencingActivity> {
 
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateBeforeTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateBeforeTest.java
index 951ecae..dcb4797 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateBeforeTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateBeforeTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.UnorderedValidateBeforeActivity;
-
 public class UnorderedValidateBeforeTest
         extends ActivityInstrumentationTestCase2<UnorderedValidateBeforeActivity> {
 
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateTest.java
index 15c8219..b22ea83 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.UnorderedValidateActivity;
-
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateTillTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateTillTest.java
index b107abb..8f0111a 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateTillTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateTillTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.UnorderedValidateTillActivity;
-
 public class UnorderedValidateTillTest
         extends ActivityInstrumentationTestCase2<UnorderedValidateTillActivity> {
 
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ValidateHiddenViewsTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ValidateHiddenViewsTest.java
index 4d32360..21ec16f 100644
--- a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ValidateHiddenViewsTest.java
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ValidateHiddenViewsTest.java
@@ -17,8 +17,6 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.TextView;
 
-import com.mobsandgeeks.saripaar.tests.ui.ValidateInvisibleViewsActivity;
-
 public class ValidateHiddenViewsTest
         extends ActivityInstrumentationTestCase2<ValidateInvisibleViewsActivity> {
 
diff --git a/saripaar-tests/src/main/AndroidManifest.xml b/saripaar-tests/src/main/AndroidManifest.xml
index 2ab240e..efed34d 100644
--- a/saripaar-tests/src/main/AndroidManifest.xml
+++ b/saripaar-tests/src/main/AndroidManifest.xml
@@ -10,73 +10,12 @@
         <activity
             android:name=".ui.OrderedValidateActivity"
             android:label="@string/title_activity_address" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN"/>
+
+                <category android:name="android.intent.category.LAUNCHER"/>
+            </intent-filter>
         </activity>
-        <activity
-            android:name=".ui.UnorderedValidateActivity"
-            android:label="@string/title_activity_address" />
-        <activity
-            android:name=".ui.OrderedValidateTillActivity"
-            android:label="@string/title_activity_address" />
-        <activity
-            android:name=".ui.UnorderedValidateTillActivity"
-            android:label="@string/title_activity_address" />
-        <activity
-            android:name=".ui.OrderedValidateBeforeActivity"
-            android:label="@string/title_activity_address" />
-        <activity
-            android:name=".ui.UnorderedValidateBeforeActivity"
-            android:label="@string/title_activity_address" />
-        <activity
-            android:name=".ui.CustomViewDataAdapterActivity"
-            android:label="@string/title_activity_custom_view" />
-        <activity
-            android:name=".ui.CustomMultipleViewDataAdaptersActivity"
-            android:label="@string/title_activity_custom_view" />
-        <activity
-            android:name=".ui.CustomAnnotationActivity"
-            android:label="@string/title_activity_custom_annotation" />
-        <activity
-            android:name=".ui.CustomAnnotationWithAdapterActivity"
-            android:label="@string/title_activity_custom_annotation_with_adapter" />
-        <activity
-            android:name=".ui.QuickRuleUnorderedActivity"
-            android:label="@string/title_activity_quick_rule" />
-        <activity
-            android:name=".ui.QuickRuleOrderedActivity"
-            android:label="@string/title_activity_quick_rule" />
-        <activity
-            android:name=".ui.QuickRuleUnorderedInOrderedActivity"
-            android:label="@string/title_activity_quick_rule" />
-        <activity
-            android:name=".ui.QuickRuleOnlyActivity"
-            android:label="@string/title_activity_quick_rule_only" />
-        <activity
-            android:name=".ui.QuickRuleOnlyControllerActivity"
-            android:label="@string/title_activity_quick_rule_only_controller" />
-        <activity
-            android:name=".ui.ConfirmPasswordWithPasswordActivity"
-            android:label="@string/title_activity_confirm_password" />
-        <activity
-            android:name=".ui.ConfirmPasswordNoPasswordActivity"
-            android:label="@string/title_activity_confirm_password" />
-        <activity
-            android:name=".ui.ConfirmPasswordSeveralPasswordsActivity"
-            android:label="@string/title_activity_confirm_password" />
-        <activity
-            android:name=".ui.OrderedSequencingActivity"
-            android:label="@string/title_activity_address" />
-        <activity
-            android:name=".ui.UnorderedSequencingActivity"
-            android:label="@string/title_activity_address" />
-        <activity
-            android:name=".ui.RemoveRulesActivity"
-            android:label="@string/title_activity_remove_rules" />
-        <activity
-            android:name=".ui.ValidateInvisibleViewsActivity"
-            android:label="@string/title_activity_validate_invisible_views" />
-        <activity
-            android:name=".ui.OptionalActivity"
-            android:label="@string/title_activity_optional" />
     </application>
 
 </manifest>
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/Common.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/Common.java
index 163ef13..1e02b9a 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/Common.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/Common.java
@@ -15,12 +15,9 @@
 package com.mobsandgeeks.saripaar.tests.ui;
 
 import android.util.Log;
-import android.view.View;
-import android.widget.TextView;
 
 import com.mobsandgeeks.saripaar.Rule;
 import com.mobsandgeeks.saripaar.ValidationError;
-import com.wrapp.floatlabelededittext.FloatLabeledEditText;
 
 import java.util.List;
 
@@ -32,13 +29,8 @@
     public static String getFailedFieldNames(List<ValidationError> errors) {
         StringBuilder stringBuilder = new StringBuilder();
         for (ValidationError error : errors) {
-            View view = error.getView();
-            TextView textView = view instanceof FloatLabeledEditText
-                ? ((FloatLabeledEditText) view).getEditText()
-                : (TextView) view;
             List<Rule> failedRules = error.getFailedRules();
-            String fieldName = textView.getHint().toString().toUpperCase().replaceAll(" ", "_");
-
+            String fieldName = "";
             for (Rule failedRule : failedRules) {
                 stringBuilder.append(fieldName).append(" ");
                 Log.i(Rule.class.getSimpleName(), failedRule.toString());
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordNoPasswordActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordNoPasswordActivity.java
deleted file mode 100644
index db6a416..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordNoPasswordActivity.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Copyright (C) 2015 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.ConfirmPassword;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-
-public class ConfirmPasswordNoPasswordActivity extends Activity
-            implements View.OnClickListener, Validator.ValidationListener {
-
-    @ConfirmPassword
-    private EditText mConfirmPasswordEditText;
-
-    private TextView mResultTextView;
-    private Button mSaripaarButton;
-
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_confirm_password_no_password);
-
-        mConfirmPasswordEditText = (EditText) findViewById(R.id.confirmPasswordEditText);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Event listeners
-        mSaripaarButton.setOnClickListener(this);
-
-        // Validation
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-    }
-
-    @Override
-    public void onClick(View v) {
-        try {
-            mValidator.validate();
-        } catch (IllegalStateException e) {
-            mResultTextView.setText(R.string.crash);
-        }
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordSeveralPasswordsActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordSeveralPasswordsActivity.java
deleted file mode 100644
index f2f1c4e..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordSeveralPasswordsActivity.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*
- * Copyright (C) 2015 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.ConfirmPassword;
-import com.mobsandgeeks.saripaar.annotation.Password;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-
-public class ConfirmPasswordSeveralPasswordsActivity extends Activity
-            implements View.OnClickListener, Validator.ValidationListener {
-
-    @Password
-    private EditText mPasswordEditText;
-
-    @Password
-    private EditText mAnotherPasswordEditText;
-
-    @ConfirmPassword
-    private EditText mConfirmPasswordEditText;
-
-    private TextView mResultTextView;
-    private Button mSaripaarButton;
-
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_confirm_password_sevaral_passwords);
-
-        mPasswordEditText = (EditText) findViewById(R.id.passwordEditText);
-        mAnotherPasswordEditText = (EditText) findViewById(R.id.anotherPasswordEditText);
-        mConfirmPasswordEditText = (EditText) findViewById(R.id.confirmPasswordEditText);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Event listeners
-        mSaripaarButton.setOnClickListener(this);
-
-        // Validation
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-    }
-
-    @Override
-    public void onClick(View v) {
-        try {
-            mValidator.validate();
-        } catch (IllegalStateException e) {
-            mResultTextView.setText(R.string.crash);
-        }
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordWithPasswordActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordWithPasswordActivity.java
deleted file mode 100644
index 3c62e2a..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordWithPasswordActivity.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Copyright (C) 2015 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.ConfirmPassword;
-import com.mobsandgeeks.saripaar.annotation.Password;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-
-public class ConfirmPasswordWithPasswordActivity extends Activity
-            implements View.OnClickListener, Validator.ValidationListener {
-
-    @Password
-    private EditText mPasswordEditText;
-
-    @ConfirmPassword
-    private EditText mConfirmPasswordEditText;
-
-    private TextView mResultTextView;
-    private Button mSaripaarButton;
-
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_confirm_password_with_password);
-
-        mPasswordEditText = (EditText) findViewById(R.id.passwordEditText);
-        mConfirmPasswordEditText = (EditText) findViewById(R.id.confirmPasswordEditText);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Event listeners
-        mSaripaarButton.setOnClickListener(this);
-
-        // Validation
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-    }
-
-    @Override
-    public void onClick(View v) {
-        mValidator.validate();
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomAnnotationActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomAnnotationActivity.java
deleted file mode 100644
index a478852..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomAnnotationActivity.java
+++ /dev/null
@@ -1,98 +0,0 @@
-/*
- * Copyright (C) 2014 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.CompoundButton;
-import android.widget.EditText;
-import android.widget.RadioButton;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.tests.R;
-import com.mobsandgeeks.saripaar.tests.ui.validation.HometownZipCode;
-
-import java.util.List;
-
-/**
- * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
- */
-public class CustomAnnotationActivity extends Activity
-        implements Validator.ValidationListener, View.OnClickListener {
-
-    @HometownZipCode
-    private EditText mZipCodeEditText;
-
-    private TextView mResultTextView;
-    private Button mSaripaarButton;
-
-    // Attributes
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_custom_annotation);
-
-        // UI References
-        mZipCodeEditText = (EditText) findViewById(R.id.zipCodeEditText);
-        RadioButton registerAnnotationRadioButton =
-            (RadioButton) findViewById(R.id.registerAnnotationRadioButton);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Validator
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Event listeners
-        registerAnnotationRadioButton.setOnCheckedChangeListener(
-            new CompoundButton.OnCheckedChangeListener() {
-
-                @Override
-                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-                    if (isChecked) {
-                        Validator.registerAnnotation(HometownZipCode.class);
-                    }
-                }
-            }
-        );
-        mSaripaarButton.setOnClickListener(this);
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
-    }
-
-    @Override
-    public void onClick(View v) {
-        try {
-            mValidator.validate();
-        } catch (IllegalStateException e) {
-            mResultTextView.setText("CRASH");
-        }
-    }
-
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomAnnotationWithAdapterActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomAnnotationWithAdapterActivity.java
deleted file mode 100644
index df2fdea..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomAnnotationWithAdapterActivity.java
+++ /dev/null
@@ -1,116 +0,0 @@
-/*
- * Copyright (C) 2014 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.CompoundButton;
-import android.widget.RadioButton;
-import android.widget.SeekBar;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.adapter.ViewDataAdapter;
-import com.mobsandgeeks.saripaar.exception.ConversionException;
-import com.mobsandgeeks.saripaar.tests.R;
-import com.mobsandgeeks.saripaar.tests.ui.validation.To;
-
-import java.lang.annotation.Annotation;
-import java.util.List;
-
-/**
- * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
- */
-public class CustomAnnotationWithAdapterActivity extends Activity
-        implements Validator.ValidationListener, View.OnClickListener,
-            CompoundButton.OnCheckedChangeListener {
-
-    @To(50)
-    private SeekBar mSeekBar;
-
-    private RadioButton mRegisterAnnotationRadioButton;
-    private TextView mResultTextView;
-    private Button mSaripaarButton;
-
-    // Attributes
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_custom_annotation_with_adapter);
-
-        // UI References
-        mSeekBar = (SeekBar) findViewById(R.id.seekBar);
-        mRegisterAnnotationRadioButton =
-            (RadioButton) findViewById(R.id.registerAnnotationRadioButton);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Validation
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Event listeners
-        mRegisterAnnotationRadioButton.setOnCheckedChangeListener(this);
-        mSaripaarButton.setOnClickListener(this);
-    }
-
-    @Override
-    public void onClick(final View v) {
-        try {
-            mValidator.validate();
-        } catch (IllegalStateException e) {
-            mResultTextView.setText("CRASH");
-            e.printStackTrace();
-        }
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(final List<ValidationError> errors) {
-        mResultTextView.setText(R.string.failure);
-    }
-
-    @Override
-    public void onCheckedChanged(final CompoundButton buttonView, final boolean isChecked) {
-        if (isChecked) {
-            SeekBarIntegerAdapter seekBarIntegerAdapter = new SeekBarIntegerAdapter();
-            Validator.registerAnnotation(To.class, SeekBar.class, seekBarIntegerAdapter);
-        }
-    }
-
-    static class SeekBarIntegerAdapter implements ViewDataAdapter<SeekBar, Integer> {
-
-        @Override
-        public Integer getData(final SeekBar seekBar) throws ConversionException {
-            return seekBar.getProgress();
-        }
-
-        @Override
-        public <T extends Annotation> boolean containsOptionalValue(
-                final SeekBar view, final T ruleAnnotation) {
-            return false;
-        }
-    }
-
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomMultipleViewDataAdaptersActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomMultipleViewDataAdaptersActivity.java
deleted file mode 100644
index 4521b8a..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomMultipleViewDataAdaptersActivity.java
+++ /dev/null
@@ -1,163 +0,0 @@
-/*
- * Copyright (C) 2014 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.CompoundButton;
-import android.widget.RadioButton;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.adapter.ViewDataAdapter;
-import com.mobsandgeeks.saripaar.annotation.Email;
-import com.mobsandgeeks.saripaar.annotation.Max;
-import com.mobsandgeeks.saripaar.annotation.Order;
-import com.mobsandgeeks.saripaar.exception.ConversionException;
-import com.mobsandgeeks.saripaar.tests.R;
-import com.wrapp.floatlabelededittext.FloatLabeledEditText;
-
-import java.lang.annotation.Annotation;
-import java.util.List;
-
-/**
- * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
- */
-public class CustomMultipleViewDataAdaptersActivity extends Activity
-        implements Validator.ValidationListener, View.OnClickListener,
-                CompoundButton.OnCheckedChangeListener {
-
-    @Email
-    @Order(1)
-    private FloatLabeledEditText mEmailFloatLabeledEditText;
-
-    @Max(2000)
-    @Order(2)
-    private FloatLabeledEditText mMaxFloatLabeledEditText;
-
-    private TextView mResultTextView;
-
-    // Attributes
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_custom_multiple_view_data_adapters);
-
-        // UI References
-        mEmailFloatLabeledEditText =
-            (FloatLabeledEditText) findViewById(R.id.emailFloatLabelEditText);
-        mMaxFloatLabeledEditText = (FloatLabeledEditText) findViewById(R.id.maxFloatLabelEditText);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        RadioButton registerEmailAdapterRadioButton =
-            (RadioButton) findViewById(R.id.registerEmailAdapterRadioButton);
-        RadioButton registerMaxAdapterRadioButton =
-            (RadioButton) findViewById(R.id.registerMaxAdapterRadioButton);
-        Button saripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Validator
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Event listeners
-        saripaarButton.setOnClickListener(this);
-        registerEmailAdapterRadioButton.setOnCheckedChangeListener(this);
-        registerMaxAdapterRadioButton.setOnCheckedChangeListener(this);
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
-    }
-
-    @Override
-    public void onClick(View v) {
-        try {
-            mValidator.validate();
-        } catch (UnsupportedOperationException e) {
-            e.printStackTrace();
-            mResultTextView.setText("CRASH");
-        }
-    }
-
-    @Override
-    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-        if (isChecked) {
-            ViewDataAdapter viewDataAdapter;
-
-            switch (buttonView.getId()) {
-                case R.id.registerEmailAdapterRadioButton:
-                    viewDataAdapter = new FletStringAdapter();
-                    break;
-
-                case R.id.registerMaxAdapterRadioButton:
-                    viewDataAdapter = new FletIntegerAdapter();
-                    break;
-
-                default:
-                    throw new RuntimeException("This should never happen.");
-            }
-            mValidator.registerAdapter(FloatLabeledEditText.class, viewDataAdapter);
-        }
-    }
-
-    static class FletStringAdapter implements ViewDataAdapter<FloatLabeledEditText, String> {
-
-        @Override
-        public String getData(FloatLabeledEditText flet) throws ConversionException {
-            return flet.getEditText().getText().toString();
-        }
-
-        @Override
-        public <T extends Annotation> boolean containsOptionalValue(
-                final FloatLabeledEditText editText, final T ruleAnnotation) {
-            return false;
-        }
-    }
-
-    static class FletIntegerAdapter implements ViewDataAdapter<FloatLabeledEditText, Integer> {
-
-        @Override
-        public Integer getData(FloatLabeledEditText editText) throws ConversionException {
-            String numberText = editText.getEditText().getText().toString().trim();
-            int number;
-            try {
-                number = Integer.parseInt(numberText);
-            } catch (NumberFormatException e) {
-                String message = String.format(
-                    "Unable to convert %s to Integer.", numberText);
-                throw new ConversionException(message);
-            }
-
-            return number;
-        }
-
-        @Override
-        public <T extends Annotation> boolean containsOptionalValue(
-                final FloatLabeledEditText editText, final T ruleAnnotation) {
-            return false;
-        }
-    }
-
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomViewDataAdapterActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomViewDataAdapterActivity.java
deleted file mode 100644
index 2d973b4..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomViewDataAdapterActivity.java
+++ /dev/null
@@ -1,114 +0,0 @@
-/*
- * Copyright (C) 2014 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.CompoundButton;
-import android.widget.RadioButton;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.adapter.ViewDataAdapter;
-import com.mobsandgeeks.saripaar.annotation.AssertTrue;
-import com.mobsandgeeks.saripaar.exception.ConversionException;
-import com.mobsandgeeks.saripaar.tests.R;
-import com.wrapp.floatlabelededittext.FloatLabeledEditText;
-
-import java.lang.annotation.Annotation;
-import java.util.List;
-
-/**
- * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
- */
-public class CustomViewDataAdapterActivity extends Activity
-        implements Validator.ValidationListener, View.OnClickListener,
-                CompoundButton.OnCheckedChangeListener {
-
-    @AssertTrue
-    private FloatLabeledEditText mBooleanFloatLabeledEditText;
-
-    private RadioButton mRegisterAdapterRadioButton;
-    private TextView mResultTextView;
-    private Button mSaripaarButton;
-
-    // Attributes
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_custom_view_data_adapter);
-
-        // UI References
-        mBooleanFloatLabeledEditText =
-            (FloatLabeledEditText) findViewById(R.id.booleanFloatLabelEditText);
-        mRegisterAdapterRadioButton = (RadioButton) findViewById(R.id.registerAdapterRadioButton);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Validator
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Event listeners
-        mSaripaarButton.setOnClickListener(this);
-        mRegisterAdapterRadioButton.setOnCheckedChangeListener(this);
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
-    }
-
-    @Override
-    public void onClick(View v) {
-        try {
-            mValidator.validate();
-        } catch (UnsupportedOperationException e) {
-            mResultTextView.setText("CRASH");
-        }
-    }
-
-    @Override
-    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-        if (isChecked) {
-            mValidator.registerAdapter(FloatLabeledEditText.class,
-                new ViewDataAdapter<FloatLabeledEditText, Boolean>() {
-
-                    @Override
-                    public Boolean getData(FloatLabeledEditText flet) throws ConversionException {
-                        String booleanText = flet.getEditText().getText().toString().trim();
-                        return Boolean.parseBoolean(booleanText);
-                    }
-
-                    @Override
-                    public <T extends Annotation> boolean containsOptionalValue(
-                            final FloatLabeledEditText editText, final T ruleAnnotation) {
-                        return false;
-                    }
-                }
-            );
-        }
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OptionalActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OptionalActivity.java
deleted file mode 100644
index 1b9fad3..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OptionalActivity.java
+++ /dev/null
@@ -1,67 +0,0 @@
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.CheckBox;
-import android.widget.EditText;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.Checked;
-import com.mobsandgeeks.saripaar.annotation.Email;
-import com.mobsandgeeks.saripaar.annotation.Optional;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-/**
- * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
- */
-public class OptionalActivity extends Activity
-        implements Validator.ValidationListener, View.OnClickListener {
-
-    // Fields
-    @Optional @Email EditText mEmailEditText;
-    @Optional @Checked CheckBox mEmailUpdatesEditText;
-
-    // Attributes
-    private Validator mValidator;
-    private TextView mResultTextView;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_optional);
-
-        // UI References
-        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
-        mEmailUpdatesEditText = (CheckBox) findViewById(R.id.emailUpdatesCheckBox);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        Button saripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Validator
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Event listeners
-        saripaarButton.setOnClickListener(this);
-    }
-
-    @Override
-    public void onClick(View v) {
-        mValidator.validate();
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedSequencingActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedSequencingActivity.java
deleted file mode 100644
index d1bbd7f..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedSequencingActivity.java
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
- * Copyright (C) 2015 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.RadioGroup;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.Email;
-import com.mobsandgeeks.saripaar.annotation.NotEmpty;
-import com.mobsandgeeks.saripaar.annotation.Order;
-import com.mobsandgeeks.saripaar.annotation.Length;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-/**
- * This {@link android.app.Activity} is used for testing the
- * {@link com.mobsandgeeks.saripaar.Validator#validate()} method on 'ordered' fields.
- */
-public class OrderedSequencingActivity extends Activity
-        implements Validator.ValidationListener, RadioGroup.OnCheckedChangeListener {
-
-    // Fields
-    @NotEmpty(sequence = 1, message = "Message 1")
-    @Length(sequence = 2, min = 3, message = "Message 2")
-    @Order(1)
-    private EditText mNameEditText;
-
-    @NotEmpty(sequence = 1, message = "Message 3")
-    @Length(sequence = 2, min = 10, message = "Message 4")
-    @Order(2)
-    private EditText mAddressEditText;
-
-    @NotEmpty(sequence = 1, message = "Message 5")
-    @Email(sequence = 2, message = "Message 6")
-    @Order(3)
-    private EditText mEmailEditText;
-
-    @NotEmpty(sequence = 1, message = "Message 7")
-    @Order(4)
-    private EditText mPhoneEditText;
-
-    private TextView mResultTextView;
-
-    // Attributes
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_un_ordered_sequencing);
-
-        // UI References
-        mNameEditText = (EditText) findViewById(R.id.nameEditText);
-        mAddressEditText = (EditText) findViewById(R.id.addressEditText);
-        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
-        mPhoneEditText = (EditText) findViewById(R.id.phoneEditText);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        RadioGroup modeRadioGroup = (RadioGroup) findViewById(R.id.modeRadioGroup);
-        Button saripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Validator
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Event listeners
-        modeRadioGroup.setOnCheckedChangeListener(this);
-        saripaarButton.setOnClickListener(new View.OnClickListener() {
-
-            @Override
-            public void onClick(View v) {
-                mValidator.validate();
-            }
-        });
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        StringBuilder stringBuilder = new StringBuilder();
-        for (ValidationError error : errors) {
-            stringBuilder.append(error.getCollatedErrorMessage(this))
-                    .append('\n');
-        }
-        mResultTextView.setText(stringBuilder.toString().trim());
-    }
-
-    @Override
-    public void onCheckedChanged(RadioGroup group, int checkedId) {
-        switch (checkedId) {
-            case R.id.burstRadioButton:
-                mValidator.setValidationMode(Validator.Mode.BURST);
-                break;
-
-            case R.id.immediateRadioButton:
-                mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
-                break;
-        }
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateActivity.java
index c35f935..773bbe9 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateActivity.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateActivity.java
@@ -21,10 +21,14 @@
 import android.widget.EditText;
 import android.widget.RadioGroup;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import com.mobsandgeeks.saripaar.ValidationError;
 import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.AssertTrue;
 import com.mobsandgeeks.saripaar.annotation.Email;
+import com.mobsandgeeks.saripaar.annotation.Max;
+import com.mobsandgeeks.saripaar.annotation.Min;
 import com.mobsandgeeks.saripaar.annotation.NotEmpty;
 import com.mobsandgeeks.saripaar.annotation.Order;
 import com.mobsandgeeks.saripaar.annotation.Length;
@@ -39,20 +43,24 @@
 public class OrderedValidateActivity extends Activity
         implements Validator.ValidationListener, RadioGroup.OnCheckedChangeListener {
 
+    @AssertTrue(message = "必须为真")
+    @Order(0)
+    private boolean text = true;
+
     // Fields
-    @NotEmpty
+    @NotEmpty(message = "请填写用户名称")
     @Order(1)
     private EditText mNameEditText;
 
-    @NotEmpty
+    @NotEmpty(message = "请填写地址")
     @Order(2)
     private EditText mAddressEditText;
 
-    @Email
+    @Email(message = "请填写有效的邮箱地址")
     @Order(3)
     private EditText mEmailEditText;
 
-    @NotEmpty
+    @NotEmpty(message = "请输入合法的手机号")
     @Length(min = 10, max = 10)
     @Order(4)
     private EditText mPhoneEditText;
@@ -98,7 +106,7 @@ public void onValidationSucceeded() {
 
     @Override
     public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
+        Toast.makeText(this, errors.get(0).getCollatedErrorMessage(this), Toast.LENGTH_SHORT).show();
     }
 
     @Override
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateBeforeActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateBeforeActivity.java
deleted file mode 100644
index 4c36317..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateBeforeActivity.java
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
- * Copyright (C) 2014 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.EditText;
-import android.widget.RadioGroup;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.Email;
-import com.mobsandgeeks.saripaar.annotation.NotEmpty;
-import com.mobsandgeeks.saripaar.annotation.Order;
-import com.mobsandgeeks.saripaar.annotation.Length;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-/**
- * This {@link android.app.Activity} is used for testing the
- * {@link com.mobsandgeeks.saripaar.Validator#validateBefore(android.view.View)} method on
- * 'ordered' fields.
- */
-public class OrderedValidateBeforeActivity extends Activity
-        implements Validator.ValidationListener, RadioGroup.OnCheckedChangeListener,
-                View.OnFocusChangeListener {
-
-    // Fields
-    @NotEmpty
-    @Order(1)
-    private EditText mNameEditText;
-
-    @NotEmpty
-    @Order(2)
-    private EditText mAddressEditText;
-
-    @Email
-    @Order(3)
-    private EditText mEmailEditText;
-
-    @NotEmpty
-    @Length
-    @Order(4)
-    private EditText mPhoneEditText;
-
-    private TextView mResultTextView;
-
-    // Attributes
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_un_ordered_validate_till_before);
-
-        // UI References
-        mNameEditText = (EditText) findViewById(R.id.nameEditText);
-        mAddressEditText = (EditText) findViewById(R.id.addressEditText);
-        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
-        mPhoneEditText = (EditText) findViewById(R.id.phoneEditText);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        RadioGroup modeRadioGroup = (RadioGroup) findViewById(R.id.modeRadioGroup);
-
-        // Validator
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Event listeners
-        mNameEditText.setOnFocusChangeListener(this);
-        mAddressEditText.setOnFocusChangeListener(this);
-        mEmailEditText.setOnFocusChangeListener(this);
-        mPhoneEditText.setOnFocusChangeListener(this);
-        modeRadioGroup.setOnCheckedChangeListener(this);
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
-    }
-
-    @Override
-    public void onCheckedChanged(RadioGroup group, int checkedId) {
-        switch (checkedId) {
-            case R.id.burstRadioButton:
-                mValidator.setValidationMode(Validator.Mode.BURST);
-                break;
-
-            case R.id.immediateRadioButton:
-                mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
-                break;
-        }
-    }
-
-    @Override
-    public void onFocusChange(View v, boolean hasFocus) {
-        if (hasFocus) {
-            mValidator.validateBefore(v);
-        }
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateTillActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateTillActivity.java
deleted file mode 100644
index a3dd55a..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateTillActivity.java
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
- * Copyright (C) 2014 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.EditText;
-import android.widget.RadioGroup;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.Email;
-import com.mobsandgeeks.saripaar.annotation.NotEmpty;
-import com.mobsandgeeks.saripaar.annotation.Order;
-import com.mobsandgeeks.saripaar.annotation.Length;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-/**
- * This {@link android.app.Activity} is used for testing the
- * {@link com.mobsandgeeks.saripaar.Validator#validateTill(android.view.View)} method on
- * 'ordered' fields.
- */
-public class OrderedValidateTillActivity extends Activity
-        implements Validator.ValidationListener, RadioGroup.OnCheckedChangeListener,
-                View.OnFocusChangeListener {
-
-    // Fields
-    @NotEmpty
-    @Order(1)
-    private EditText mNameEditText;
-
-    @NotEmpty
-    @Order(2)
-    private EditText mAddressEditText;
-
-    @Email
-    @Order(3)
-    private EditText mEmailEditText;
-
-    @NotEmpty
-    @Length(min = 10, max = 10)
-    @Order(4)
-    private EditText mPhoneEditText;
-
-    private TextView mResultTextView;
-
-    // Attributes
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_un_ordered_validate_till_before);
-
-        // UI References
-        mNameEditText = (EditText) findViewById(R.id.nameEditText);
-        mAddressEditText = (EditText) findViewById(R.id.addressEditText);
-        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
-        mPhoneEditText = (EditText) findViewById(R.id.phoneEditText);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        RadioGroup modeRadioGroup = (RadioGroup) findViewById(R.id.modeRadioGroup);
-
-        // Validator
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Event listeners
-        mNameEditText.setOnFocusChangeListener(this);
-        mAddressEditText.setOnFocusChangeListener(this);
-        mEmailEditText.setOnFocusChangeListener(this);
-        mPhoneEditText.setOnFocusChangeListener(this);
-        modeRadioGroup.setOnCheckedChangeListener(this);
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
-    }
-
-    @Override
-    public void onCheckedChanged(RadioGroup group, int checkedId) {
-        switch (checkedId) {
-            case R.id.burstRadioButton:
-                mValidator.setValidationMode(Validator.Mode.BURST);
-                break;
-
-            case R.id.immediateRadioButton:
-                mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
-                break;
-        }
-    }
-
-    @Override
-    public void onFocusChange(View v, boolean hasFocus) {
-        if (hasFocus) {
-            mValidator.validateTill(v);
-        }
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOnlyActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOnlyActivity.java
deleted file mode 100644
index 08242a2..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOnlyActivity.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * Copyright (C) 2015 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.QuickRule;
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-
-public class QuickRuleOnlyActivity extends Activity
-            implements View.OnClickListener, Validator.ValidationListener {
-
-    private EditText mOneOnlyEditText;
-
-    private TextView mResultTextView;
-    private Button mSaripaarButton;
-
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_quick_rule_only);
-
-        mOneOnlyEditText = (EditText) findViewById(R.id.oneOnlyEditText);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Event listeners
-        mSaripaarButton.setOnClickListener(this);
-
-        // Validation
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Add a quick rule
-        mValidator.put(mOneOnlyEditText, new QuickRule<TextView>() {
-            @Override
-            public boolean isValid(TextView textView) {
-                return "1".equals(textView.getText().toString());
-            }
-
-            @Override
-            public String getMessage(Context context) {
-                return "Enter 1, nothing else.";
-            }
-        });
-    }
-
-    @Override
-    public void onClick(View v) {
-        try {
-            mValidator.validate();
-        } catch (IllegalStateException e) {
-            mResultTextView.setText(R.string.crash);
-        }
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(R.string.failure);
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOnlyControllerActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOnlyControllerActivity.java
deleted file mode 100644
index 2d6b242..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOnlyControllerActivity.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
- * Copyright (C) 2015 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.QuickRule;
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-
-public class QuickRuleOnlyControllerActivity extends Activity {
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        // Set content view
-        LayoutInflater layoutInflater = LayoutInflater.from(this);
-        View view = layoutInflater.inflate(R.layout.activity_quick_rule_only, null);
-        setContentView(view);
-
-        // Controller
-        new Controller(view);
-    }
-
-    static class Controller implements View.OnClickListener, Validator.ValidationListener {
-        // UI
-        private EditText mOneOnlyEditText;
-        private TextView mResultTextView;
-        private Button mSaripaarButton;
-
-        // Attributes
-        private Validator mValidator;
-
-        Controller(final View rootView) {
-            // UI
-            mOneOnlyEditText = (EditText) rootView.findViewById(R.id.oneOnlyEditText);
-            mResultTextView = (TextView) rootView.findViewById(R.id.resultTextView);
-            mSaripaarButton = (Button) rootView.findViewById(R.id.saripaarButton);
-
-            // Validation
-            mValidator = new Validator(this);
-            mValidator.setValidationListener(this);
-
-            // Add a quick rule
-            mValidator.put(mOneOnlyEditText, new QuickRule<TextView>() {
-
-                @Override
-                public boolean isValid(TextView textView) {
-                    return "1".equals(textView.getText().toString());
-                }
-
-                @Override
-                public String getMessage(Context context) {
-                    return "Enter 1, nothing else.";
-                }
-            });
-
-            // Event listeners
-            mSaripaarButton.setOnClickListener(this);
-        }
-
-        @Override
-        public void onClick(View v) {
-            try {
-                mValidator.validate();
-            } catch (IllegalStateException e) {
-                mResultTextView.setText(R.string.crash);
-            }
-        }
-
-        @Override
-        public void onValidationSucceeded() {
-            mResultTextView.setText(R.string.success);
-        }
-
-        @Override
-        public void onValidationFailed(List<ValidationError> errors) {
-            mResultTextView.setText(R.string.failure);
-        }
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOrderedActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOrderedActivity.java
deleted file mode 100644
index ec59024..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOrderedActivity.java
+++ /dev/null
@@ -1,115 +0,0 @@
-/*
- * Copyright (C) 2014 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.CompoundButton;
-import android.widget.EditText;
-import android.widget.RadioButton;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.QuickRule;
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.Email;
-import com.mobsandgeeks.saripaar.annotation.NotEmpty;
-import com.mobsandgeeks.saripaar.annotation.Order;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-/**
- * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
- */
-public class QuickRuleOrderedActivity extends Activity
-        implements Validator.ValidationListener, CompoundButton.OnCheckedChangeListener,
-                View.OnClickListener {
-
-    @NotEmpty
-    @Order(1)
-    private EditText mZipCodeEditText;
-
-    @Order(2)
-    private EditText mAirtelNumberEditText;
-
-    @Email
-    @Order(3)
-    private EditText mEmailEditText;
-
-    private TextView mResultTextView;
-    private RadioButton mUseQuickRuleRadioButton;
-    private Button mSaripaarButton;
-
-    // Attributes
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_quick_rule_ordered);
-
-        // UI References
-        mZipCodeEditText = (EditText) findViewById(R.id.zipCodeEditText);
-        mAirtelNumberEditText = (EditText) findViewById(R.id.airtelNumberEditText);
-        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        mUseQuickRuleRadioButton = (RadioButton) findViewById(R.id.useQuickRuleRadioButton);
-        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Validator
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Event Listeners
-        mUseQuickRuleRadioButton.setOnCheckedChangeListener(this);
-        mSaripaarButton.setOnClickListener(this);
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
-    }
-
-    @Override
-    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-        mValidator.put(mAirtelNumberEditText, new QuickRule<TextView>() {
-
-            @Override
-            public boolean isValid(TextView textView) {
-                final String phoneNumber = textView.getText().toString().trim();
-                return phoneNumber.length() == 10 && phoneNumber.startsWith("999");
-            }
-
-            @Override
-            public String getMessage(Context context) {
-                return "Not an Airtel number :(";
-            }
-        });
-    }
-
-    @Override
-    public void onClick(View v) {
-        mValidator.validate();
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleUnorderedActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleUnorderedActivity.java
deleted file mode 100644
index 835fddb..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleUnorderedActivity.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
- * Copyright (C) 2014 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.CompoundButton;
-import android.widget.EditText;
-import android.widget.RadioButton;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.QuickRule;
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.NotEmpty;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-/**
- * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
- */
-public class QuickRuleUnorderedActivity extends Activity
-        implements Validator.ValidationListener, CompoundButton.OnCheckedChangeListener,
-                View.OnClickListener {
-
-    @NotEmpty
-    private EditText mZipCodeEditText;
-    private EditText mAirtelNumberEditText;
-
-    private TextView mResultTextView;
-    private RadioButton mUseQuickRuleRadioButton;
-    private Button mSaripaarButton;
-
-    // Attributes
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_quick_rule_unordered);
-
-        // UI References
-        mZipCodeEditText = (EditText) findViewById(R.id.zipCodeEditText);
-        mAirtelNumberEditText = (EditText) findViewById(R.id.airtelNumberEditText);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        mUseQuickRuleRadioButton = (RadioButton) findViewById(R.id.useQuickRuleRadioButton);
-        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Validator
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Event Listeners
-        mUseQuickRuleRadioButton.setOnCheckedChangeListener(this);
-        mSaripaarButton.setOnClickListener(this);
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
-    }
-
-    @Override
-    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-        mValidator.put(mAirtelNumberEditText, new QuickRule<TextView>() {
-
-            @Override
-            public boolean isValid(TextView textView) {
-                final String phoneNumber = textView.getText().toString().trim();
-                return phoneNumber.length() == 10 && phoneNumber.startsWith("999");
-            }
-
-            @Override
-            public String getMessage(Context context) {
-                return "Not an Airtel number :(";
-            }
-        });
-    }
-
-    @Override
-    public void onClick(View v) {
-        mValidator.validate();
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleUnorderedInOrderedActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleUnorderedInOrderedActivity.java
deleted file mode 100644
index 5c1d2db..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleUnorderedInOrderedActivity.java
+++ /dev/null
@@ -1,143 +0,0 @@
-/*
- * Copyright (C) 2014 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.CompoundButton;
-import android.widget.EditText;
-import android.widget.RadioButton;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.QuickRule;
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.NotEmpty;
-import com.mobsandgeeks.saripaar.annotation.Order;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-/**
- * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
- */
-public class QuickRuleUnorderedInOrderedActivity extends Activity
-        implements Validator.ValidationListener, CompoundButton.OnCheckedChangeListener,
-                View.OnClickListener {
-
-    @NotEmpty
-    @Order(1)
-    private EditText mZipCodeEditText;
-
-    @Order(2)
-    private EditText mAirtelNumberEditText;
-
-    private TextView mResultTextView;
-    private RadioButton mUseQuickRuleRadioButton;
-    private Button mSaripaarButton;
-
-    // Attributes
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_quick_rule_unordered_in_ordered);
-
-        // UI References
-        mZipCodeEditText = (EditText) findViewById(R.id.zipCodeEditText);
-        mAirtelNumberEditText = (EditText) findViewById(R.id.airtelNumberEditText);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        mUseQuickRuleRadioButton = (RadioButton) findViewById(R.id.useQuickRuleRadioButton);
-        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Validator
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Quick Rule for ORDERED field
-        mValidator.put(mAirtelNumberEditText, new QuickRule<TextView>() {
-
-            @Override
-            public boolean isValid(TextView textView) {
-                final String phoneNumber = textView.getText().toString().trim();
-                return phoneNumber.length() == 10 && phoneNumber.startsWith("999");
-            }
-
-            @Override
-            public String getMessage(Context context) {
-                return "Not an Airtel number :(";
-            }
-        });
-
-        // Event Listeners
-        mUseQuickRuleRadioButton.setOnCheckedChangeListener(this);
-        mSaripaarButton.setOnClickListener(this);
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
-    }
-
-    @Override
-    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-        EditText evenNumberEditText = (EditText) findViewById(R.id.evenNumberEditText);
-        QuickRule<TextView> evenNumberQuickRule = getEvenNumberQuickRule();
-
-        try {
-            mValidator.put(evenNumberEditText, evenNumberQuickRule);
-        } catch (IllegalStateException e) {
-            mResultTextView.setText("CRASH");
-        }
-    }
-
-    @Override
-    public void onClick(View v) {
-        mValidator.validate();
-    }
-
-    private QuickRule<TextView> getEvenNumberQuickRule() {
-        return new QuickRule<TextView>() {
-
-            @Override
-            public boolean isValid(TextView textView) {
-                String numberText = textView.getText().toString().trim();
-
-                boolean isEven;
-                try {
-                    isEven = Integer.parseInt(numberText) % 2 == 0;
-                } catch (NumberFormatException e) {
-                    isEven = false;
-                }
-
-                return isEven;
-            }
-
-            @Override
-            public String getMessage(Context context) {
-                return "Not an even number.";
-            }
-        };
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/RemoveRulesActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/RemoveRulesActivity.java
deleted file mode 100644
index 4998f86..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/RemoveRulesActivity.java
+++ /dev/null
@@ -1,105 +0,0 @@
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.CompoundButton;
-import android.widget.EditText;
-import android.widget.RadioButton;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.QuickRule;
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.Email;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-/**
- * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
- */
-public class RemoveRulesActivity extends Activity
-        implements Validator.ValidationListener, View.OnClickListener {
-
-    // Fields
-    @Email
-    private EditText mEmailEditText;
-
-    private RadioButton mAddQuickRuleRadioButton;
-    private RadioButton mRemoveRulesRadioButton;
-    private TextView mResultTextView;
-    private Button mSaripaarButton;
-
-    // Attributes
-    private Validator mValidator;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_remove_rules);
-
-        // UI References
-        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
-        mAddQuickRuleRadioButton = (RadioButton) findViewById(R.id.addQuickRuleRadioButton);
-        mRemoveRulesRadioButton = (RadioButton) findViewById(R.id.removeRulesRadioButton);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Validator
-        mValidator = new Validator(this);
-
-        // Event listeners
-        mSaripaarButton.setOnClickListener(this);
-        mValidator.setValidationListener(this);
-        mAddQuickRuleRadioButton.setOnCheckedChangeListener(
-                new CompoundButton.OnCheckedChangeListener() {
-
-                    @Override
-                    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-                        mValidator.put(mEmailEditText, new QuickRule<EditText>() {
-                            @Override
-                            public boolean isValid(EditText editText) {
-                                String email = editText.getText().toString();
-                                return email.endsWith("mobsandgeeks.com");
-                            }
-
-                            @Override
-                            public String getMessage(Context context) {
-                                return "Only allow emails from \"mobsandgeeks.com\" :P";
-                            }
-                        });
-                    }
-                });
-
-        mRemoveRulesRadioButton.setOnCheckedChangeListener(
-                new CompoundButton.OnCheckedChangeListener() {
-
-                    @Override
-                    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-                        mValidator.removeRules(mEmailEditText);
-                    }
-                });
-    }
-
-    @Override
-    public void onClick(View v) {
-        try {
-            mValidator.validate();
-        } catch (IllegalStateException e) {
-            mResultTextView.setText(R.string.crash);
-        }
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedSequencingActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedSequencingActivity.java
deleted file mode 100644
index 7ae5155..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedSequencingActivity.java
+++ /dev/null
@@ -1,122 +0,0 @@
-/*
- * Copyright (C) 2015 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.RadioGroup;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.Email;
-import com.mobsandgeeks.saripaar.annotation.NotEmpty;
-import com.mobsandgeeks.saripaar.annotation.Length;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-/**
- * This {@link android.app.Activity} is used for testing the
- * {@link com.mobsandgeeks.saripaar.Validator#validate()} method on 'ordered' fields.
- */
-public class UnorderedSequencingActivity extends Activity
-        implements Validator.ValidationListener, RadioGroup.OnCheckedChangeListener {
-
-    // Fields
-    @NotEmpty(sequence = 1, message = "Message 1")
-    @Length(sequence = 2, min = 3, message = "Message 2")
-    private EditText mNameEditText;
-
-    @NotEmpty(sequence = 1, message = "Message 3")
-    @Length(sequence = 2, min = 10, message = "Message 4")
-    private EditText mAddressEditText;
-
-    @NotEmpty(sequence = 1, message = "Message 5")
-    @Email(sequence = 2, message = "Message 6")
-    private EditText mEmailEditText;
-
-    @NotEmpty(sequence = 1, message = "Message 7")
-    private EditText mPhoneEditText;
-
-    private TextView mResultTextView;
-
-    // Attributes
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_un_ordered_sequencing);
-
-        // UI References
-        mNameEditText = (EditText) findViewById(R.id.nameEditText);
-        mAddressEditText = (EditText) findViewById(R.id.addressEditText);
-        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
-        mPhoneEditText = (EditText) findViewById(R.id.phoneEditText);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        RadioGroup modeRadioGroup = (RadioGroup) findViewById(R.id.modeRadioGroup);
-        Button saripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Validator
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Event listeners
-        modeRadioGroup.setOnCheckedChangeListener(this);
-        saripaarButton.setOnClickListener(new View.OnClickListener() {
-
-            @Override
-            public void onClick(View v) {
-                try {
-                    mValidator.validate();
-                } catch (IllegalStateException e) {
-                    mResultTextView.setText(R.string.crash);
-                }
-            }
-        });
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        StringBuilder stringBuilder = new StringBuilder();
-        for (ValidationError error : errors) {
-            stringBuilder.append(error.getCollatedErrorMessage(this))
-                    .append('\n');
-        }
-        mResultTextView.setText(stringBuilder.toString().trim());
-    }
-
-    @Override
-    public void onCheckedChanged(RadioGroup group, int checkedId) {
-        switch (checkedId) {
-            case R.id.burstRadioButton:
-                mValidator.setValidationMode(Validator.Mode.BURST);
-                break;
-
-            case R.id.immediateRadioButton:
-                mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
-                break;
-        }
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateActivity.java
deleted file mode 100644
index c0e98c0..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateActivity.java
+++ /dev/null
@@ -1,119 +0,0 @@
-/*
- * Copyright (C) 2014 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.RadioGroup;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.Email;
-import com.mobsandgeeks.saripaar.annotation.NotEmpty;
-import com.mobsandgeeks.saripaar.annotation.Length;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-/**
- * This {@link android.app.Activity} is used for testing the
- * {@link com.mobsandgeeks.saripaar.Validator#validate()} method on 'unordered' fields in
- * {@link com.mobsandgeeks.saripaar.Validator.Mode#BURST} mode. We should make sure that the
- * test fails in {@link com.mobsandgeeks.saripaar.Validator.Mode#IMMEDIATE} mode.
- * The {@link com.mobsandgeeks.saripaar.Validator#validateTill(android.view.View)} and
- * {@link com.mobsandgeeks.saripaar.Validator#validateBefore(android.view.View)} methods should
- * also fail when attempting to perform validation over unordered fields.
- */
-public class UnorderedValidateActivity extends Activity
-        implements Validator.ValidationListener, RadioGroup.OnCheckedChangeListener {
-
-    // Fields
-    @NotEmpty
-    private EditText mNameEditText;
-
-    @NotEmpty
-    private EditText mAddressEditText;
-
-    @Email
-    private EditText mEmailEditText;
-
-    @Length(min = 10, max = 10)
-    private EditText mPhoneEditText;
-
-    private TextView mResultTextView;
-
-    // Attributes
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_un_ordered_validate);
-
-        // UI References
-        mNameEditText = (EditText) findViewById(R.id.nameEditText);
-        mAddressEditText = (EditText) findViewById(R.id.addressEditText);
-        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
-        mPhoneEditText = (EditText) findViewById(R.id.phoneEditText);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        RadioGroup modeRadioGroup = (RadioGroup) findViewById(R.id.modeRadioGroup);
-        Button saripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Validator
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Event listeners
-        modeRadioGroup.setOnCheckedChangeListener(this);
-        saripaarButton.setOnClickListener(new View.OnClickListener() {
-
-            @Override
-            public void onClick(View v) {
-                try {
-                    mValidator.validate();
-                } catch (IllegalStateException e) {
-                    mResultTextView.setText("CRASH");
-                }
-            }
-        });
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
-    }
-
-    @Override
-    public void onCheckedChanged(RadioGroup group, int checkedId) {
-        switch (checkedId) {
-            case R.id.burstRadioButton:
-                mValidator.setValidationMode(Validator.Mode.BURST);
-                break;
-
-            case R.id.immediateRadioButton:
-                mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
-                break;
-        }
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateBeforeActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateBeforeActivity.java
deleted file mode 100644
index 536a9d9..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateBeforeActivity.java
+++ /dev/null
@@ -1,119 +0,0 @@
-/*
- * Copyright (C) 2014 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.EditText;
-import android.widget.RadioGroup;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.Email;
-import com.mobsandgeeks.saripaar.annotation.NotEmpty;
-import com.mobsandgeeks.saripaar.annotation.Length;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-/**
- * This {@link android.app.Activity} is used for testing the
- * {@link com.mobsandgeeks.saripaar.Validator#validateBefore(android.view.View)} method on
- * 'ordered' fields.
- */
-public class UnorderedValidateBeforeActivity extends Activity
-        implements Validator.ValidationListener, RadioGroup.OnCheckedChangeListener,
-                View.OnFocusChangeListener {
-
-    // Fields
-    @NotEmpty
-    private EditText mNameEditText;
-
-    @NotEmpty
-    private EditText mAddressEditText;
-
-    @Email
-    private EditText mEmailEditText;
-
-    @NotEmpty
-    @Length
-    private EditText mPhoneEditText;
-
-    private TextView mResultTextView;
-
-    // Attributes
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_un_ordered_validate_till_before);
-
-        // UI References
-        mNameEditText = (EditText) findViewById(R.id.nameEditText);
-        mAddressEditText = (EditText) findViewById(R.id.addressEditText);
-        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
-        mPhoneEditText = (EditText) findViewById(R.id.phoneEditText);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        RadioGroup modeRadioGroup = (RadioGroup) findViewById(R.id.modeRadioGroup);
-
-        // Validator
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Event listeners
-        mNameEditText.setOnFocusChangeListener(this);
-        mAddressEditText.setOnFocusChangeListener(this);
-        mEmailEditText.setOnFocusChangeListener(this);
-        mPhoneEditText.setOnFocusChangeListener(this);
-        modeRadioGroup.setOnCheckedChangeListener(this);
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
-    }
-
-    @Override
-    public void onCheckedChanged(RadioGroup group, int checkedId) {
-        switch (checkedId) {
-            case R.id.burstRadioButton:
-                mValidator.setValidationMode(Validator.Mode.BURST);
-                break;
-
-            case R.id.immediateRadioButton:
-                mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
-                break;
-        }
-    }
-
-    @Override
-    public void onFocusChange(View v, boolean hasFocus) {
-        if (hasFocus) {
-            try {
-                mValidator.validateTill(v);
-            } catch (IllegalStateException e) {
-                mResultTextView.setText("CRASH");
-            }
-        }
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateTillActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateTillActivity.java
deleted file mode 100644
index 3be4ab3..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateTillActivity.java
+++ /dev/null
@@ -1,119 +0,0 @@
-/*
- * Copyright (C) 2014 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.EditText;
-import android.widget.RadioGroup;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.Email;
-import com.mobsandgeeks.saripaar.annotation.NotEmpty;
-import com.mobsandgeeks.saripaar.annotation.Length;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-/**
- * This {@link android.app.Activity} is used for testing the
- * {@link com.mobsandgeeks.saripaar.Validator#validateTill(android.view.View)} method on
- * 'unordered' fields.
- */
-public class UnorderedValidateTillActivity extends Activity
-        implements Validator.ValidationListener, RadioGroup.OnCheckedChangeListener,
-                View.OnFocusChangeListener {
-
-    // Fields
-    @NotEmpty
-    private EditText mNameEditText;
-
-    @NotEmpty
-    private EditText mAddressEditText;
-
-    @Email
-    private EditText mEmailEditText;
-
-    @NotEmpty
-    @Length
-    private EditText mPhoneEditText;
-
-    private TextView mResultTextView;
-
-    // Attributes
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_un_ordered_validate_till_before);
-
-        // UI References
-        mNameEditText = (EditText) findViewById(R.id.nameEditText);
-        mAddressEditText = (EditText) findViewById(R.id.addressEditText);
-        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
-        mPhoneEditText = (EditText) findViewById(R.id.phoneEditText);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        RadioGroup modeRadioGroup = (RadioGroup) findViewById(R.id.modeRadioGroup);
-
-        // Validator
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Event listeners
-        mNameEditText.setOnFocusChangeListener(this);
-        mAddressEditText.setOnFocusChangeListener(this);
-        mEmailEditText.setOnFocusChangeListener(this);
-        mPhoneEditText.setOnFocusChangeListener(this);
-        modeRadioGroup.setOnCheckedChangeListener(this);
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(Common.getFailedFieldNames(errors));
-    }
-
-    @Override
-    public void onCheckedChanged(RadioGroup group, int checkedId) {
-        switch (checkedId) {
-            case R.id.burstRadioButton:
-                mValidator.setValidationMode(Validator.Mode.BURST);
-                break;
-
-            case R.id.immediateRadioButton:
-                mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
-                break;
-        }
-    }
-
-    @Override
-    public void onFocusChange(View v, boolean hasFocus) {
-        if (hasFocus) {
-            try {
-                mValidator.validateTill(v);
-            } catch (IllegalStateException e) {
-                mResultTextView.setText("CRASH");
-            }
-        }
-    }
-}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ValidateInvisibleViewsActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ValidateInvisibleViewsActivity.java
deleted file mode 100644
index 3b1160b..0000000
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ValidateInvisibleViewsActivity.java
+++ /dev/null
@@ -1,111 +0,0 @@
-/*
- * Copyright (C) 2016 Mobs & Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.tests.ui;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.CheckBox;
-import android.widget.CompoundButton;
-import android.widget.EditText;
-import android.widget.RadioButton;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.ValidationError;
-import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.NotEmpty;
-import com.mobsandgeeks.saripaar.tests.R;
-
-import java.util.List;
-
-/**
- * This {@link Activity} is used for testing the
- * {@link Validator#validateInvisibleViews(boolean)} method.
- */
-public class ValidateInvisibleViewsActivity extends Activity
-        implements View.OnClickListener, CompoundButton.OnCheckedChangeListener,
-                Validator.ValidationListener {
-
-    // Fields
-    @NotEmpty
-    private EditText mNameEditText;
-
-    @NotEmpty
-    private EditText mEmailEditText;
-
-    private TextView mResultTextView;
-
-    // Attributes
-    private Validator mValidator;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_validate_invisible_views);
-
-        // View references
-        mNameEditText = (EditText) findViewById(R.id.nameEditText);
-        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
-        mResultTextView = (TextView) findViewById(R.id.resultTextView);
-        RadioButton showViewRadioButton = (RadioButton) findViewById(R.id.showRadioButton);
-        RadioButton hideViewRadioButton = (RadioButton) findViewById(R.id.hideRadioButton);
-        CheckBox validateHiddenViewsCheckBox =
-                (CheckBox) findViewById(R.id.validateHiddenViewsCheckBox);
-        Button saripaarButton = (Button) findViewById(R.id.saripaarButton);
-
-        // Validator
-        mValidator = new Validator(this);
-        mValidator.setValidationListener(this);
-
-        // Event listeners
-        showViewRadioButton.setOnCheckedChangeListener(this);
-        hideViewRadioButton.setOnCheckedChangeListener(this);
-        validateHiddenViewsCheckBox.setOnCheckedChangeListener(this);
-        saripaarButton.setOnClickListener(this);
-    }
-
-    @Override
-    public void onClick(View view) {
-        mValidator.validate();
-    }
-
-    @Override
-    public void onCheckedChanged(CompoundButton compoundButton, boolean checked) {
-        switch (compoundButton.getId()) {
-            case R.id.showRadioButton:
-                mEmailEditText.setVisibility(View.VISIBLE);
-                break;
-
-            case R.id.hideRadioButton:
-                mEmailEditText.setVisibility(View.INVISIBLE);
-                break;
-
-            case R.id.validateHiddenViewsCheckBox:
-                mValidator.validateInvisibleViews(checked);
-                break;
-        }
-    }
-
-    @Override
-    public void onValidationSucceeded() {
-        mResultTextView.setText(R.string.success);
-    }
-
-    @Override
-    public void onValidationFailed(List<ValidationError> errors) {
-        mResultTextView.setText(R.string.failure);
-    }
-}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/DefaultViewValidatedAction.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/DefaultViewValidatedAction.java
index 37b12b0..eed15c0 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/DefaultViewValidatedAction.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/DefaultViewValidatedAction.java
@@ -18,9 +18,9 @@
 import android.widget.TextView;
 
 /**
- * A default implementation of the {@link com.mobsandgeeks.saripaar.Validator.ViewValidatedAction}
+ * A default implementation of the {@link Validator.ViewValidatedAction}
  * that clears error messages on {@link android.widget.EditText} views by calling the
- * {@link android.widget.TextView#setError(CharSequence)} with a {@code null} parameter.
+ * {@link TextView#setError(CharSequence)} with a {@code null} parameter.
  *
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 2.0
@@ -28,7 +28,11 @@
 public class DefaultViewValidatedAction implements Validator.ViewValidatedAction {
 
     @Override
-    public void onAllRulesPassed(final View view) {
+    public void onAllRulesPassed(final Object obj) {
+        if(!(obj instanceof View)){
+            return;
+        }
+        View view = (View) obj;
         boolean isTextView = view instanceof TextView;
         if (isTextView) {
             ((TextView) view).setError(null);
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Reflector.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Reflector.java
index 17fc6b3..25df6b5 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Reflector.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Reflector.java
@@ -22,6 +22,7 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Constructor;
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
@@ -38,15 +39,14 @@
     /**
      * Retrieves the attribute method of the given {@link java.lang.annotation.Annotation}.
      *
-     * @param annotationType  The {@link java.lang.annotation.Annotation}
-     *      {@link java.lang.Class} to check.
+     * @param annotationType The {@link java.lang.annotation.Annotation}
+     *                       {@link java.lang.Class} to check.
      * @param attributeName  Attribute name.
-     *
      * @return The {@link java.lang.reflect.Method} if the attribute is present,
-     *      null otherwise.
+     * null otherwise.
      */
     static Method getAttributeMethod(final Class<? extends Annotation> annotationType,
-            final String attributeName) {
+                                     final String attributeName) {
         Method attributeMethod = null;
         try {
             attributeMethod = annotationType.getMethod(attributeName);
@@ -59,16 +59,15 @@ static Method getAttributeMethod(final Class<? extends Annotation> annotationTyp
     /**
      * Retrieve an attribute value from an {@link java.lang.annotation.Annotation}.
      *
-     * @param annotation  An {@link java.lang.annotation.Annotation} instance.
-     * @param attributeName  Attribute name.
-     * @param attributeDataType  {@link java.lang.Class} representing the attribute data type.
-     * @param <T>  Attribute value type.
-     *
+     * @param annotation        An {@link java.lang.annotation.Annotation} instance.
+     * @param attributeName     Attribute name.
+     * @param attributeDataType {@link java.lang.Class} representing the attribute data type.
+     * @param <T>               Attribute value type.
      * @return The attribute value.
      */
     @SuppressWarnings("unchecked")
     static <T> T getAttributeValue(final Annotation annotation, final String attributeName,
-            final Class<T> attributeDataType) {
+                                   final Class<T> attributeDataType) {
 
         T attributeValue = null;
         Class<? extends Annotation> annotationType = annotation.annotationType();
@@ -97,13 +96,12 @@ static Method getAttributeMethod(final Class<? extends Annotation> annotationTyp
     /**
      * Checks if an annotation was annotated with the given annotation.
      *
-     * @param inspected  The {@link java.lang.annotation.Annotation} to be checked.
+     * @param inspected The {@link java.lang.annotation.Annotation} to be checked.
      * @param expected  The {@link java.lang.annotation.Annotation} that we are looking for.
-     *
      * @return true if the annotation is present, false otherwise.
      */
     static boolean isAnnotated(final Class<? extends Annotation> inspected,
-            final Class<? extends Annotation> expected) {
+                               final Class<? extends Annotation> expected) {
         boolean isAnnotated = false;
         Annotation[] declaredAnnotations = inspected.getDeclaredAnnotations();
         for (Annotation declaredAnnotation : declaredAnnotations) {
@@ -120,9 +118,8 @@ static boolean isAnnotated(final Class<? extends Annotation> inspected,
      * {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter#getData(android.view.View)}
      * {@link java.lang.reflect.Method}.
      *
-     * @param dataAdapterType  The {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}
-     *      class whose {@code getData(View)} method is required.
-     *
+     * @param dataAdapterType The {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}
+     *                        class whose {@code getData(View)} method is required.
      * @return The correct {@code getData(View)} method.
      */
     static Method findGetDataMethod(final Class<? extends ViewDataAdapter> dataAdapterType) {
@@ -155,19 +152,17 @@ static Method findGetDataMethod(final Class<? extends ViewDataAdapter> dataAdapt
     /**
      * Instantiates a {@link AnnotationRule} object for the given type.
      *
-     * @param ruleType  The {@link AnnotationRule} class to be instantiated.
-     * @param ruleAnnotation  The rule {@link java.lang.annotation.Annotation} associated with
-     *      the {@link AnnotationRule}.
-     *
+     * @param ruleType       The {@link AnnotationRule} class to be instantiated.
+     * @param ruleAnnotation The rule {@link java.lang.annotation.Annotation} associated with
+     *                       the {@link AnnotationRule}.
      * @return The instantiated {@link AnnotationRule} object.
-     *
      * @throws SaripaarViolationException if {@link AnnotationRule} does not
-     *      have a single-argument constructor that accepts a rule
-     *      {@link java.lang.annotation.Annotation} instance.
+     *                                    have a single-argument constructor that accepts a rule
+     *                                    {@link java.lang.annotation.Annotation} instance.
      */
     static AnnotationRule instantiateRule(final Class<? extends AnnotationRule> ruleType,
-            final Annotation ruleAnnotation, final ValidationContext validationContext)
-                    throws SaripaarViolationException {
+                                          final Annotation ruleAnnotation, final ValidationContext validationContext)
+            throws SaripaarViolationException {
         AnnotationRule rule = null;
 
         try {
@@ -201,10 +196,9 @@ static AnnotationRule instantiateRule(final Class<? extends AnnotationRule> rule
      * Method finds the data type of the {@link AnnotationRule} that is tied up to the given rule
      * annotation.
      *
-     * @param ruleAnnotation  Rule {@link java.lang.annotation.Annotation}.
-     *
+     * @param ruleAnnotation Rule {@link java.lang.annotation.Annotation}.
      * @return The expected data type for the
-     *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}s.
+     * {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}s.
      */
     static Class<?> getRuleDataType(final Annotation ruleAnnotation) {
         ValidateUsing validateUsing = getValidateUsingAnnotation(ruleAnnotation.annotationType());
@@ -215,11 +209,10 @@ static AnnotationRule instantiateRule(final Class<? extends AnnotationRule> rule
      * Method finds the data type of the {@link AnnotationRule} that is tied up to the given rule
      * annotation.
      *
-     * @param validateUsing  The {@link com.mobsandgeeks.saripaar.annotation.ValidateUsing}
-     *      instance.
-     *
+     * @param validateUsing The {@link com.mobsandgeeks.saripaar.annotation.ValidateUsing}
+     *                      instance.
      * @return The expected data type for the
-     *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}s.
+     * {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}s.
      */
     static Class<?> getRuleDataType(final ValidateUsing validateUsing) {
         Class<? extends AnnotationRule> rule = validateUsing.value();
@@ -264,7 +257,7 @@ private static String getMissingConstructorErrorMessage(
     }
 
     private static Class<?> getRuleTypeFromIsValidMethod(final Class<? extends AnnotationRule> rule,
-            final Method[] methods) {
+                                                         final Method[] methods) {
 
         Class<?> returnType = null;
         for (Method method : methods) {
@@ -286,7 +279,7 @@ private static String getMissingConstructorErrorMessage(
     }
 
     private static boolean matchesIsValidMethodSignature(final Method method,
-            final Class<?>[] parameterTypes) {
+                                                         final Class<?>[] parameterTypes) {
         int modifiers = method.getModifiers();
 
         boolean isPublic = Modifier.isPublic(modifiers);
@@ -300,4 +293,29 @@ private static boolean matchesIsValidMethodSignature(final Method method,
 
     private Reflector() {
     }
+
+    public static boolean isViewField(Field field) {
+        Class<?> cls = field.getType();
+        while (cls != null && !"java.lang.Object".equals(cls.getCanonicalName())) {
+            if (View.class.getCanonicalName().equals(cls.getCanonicalName())) {
+                return true;
+            }
+            cls = cls.getSuperclass();
+        }
+
+        return false;
+    }
+
+    public static <T> T getFieldValue(Object object, Field field) {
+        field.setAccessible(true);
+        try {
+            return (T) field.get(object);
+        } catch (IllegalAccessException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public static View getViewByField(Object object, Field field) {
+        return getFieldValue(object, field);
+    }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationContext.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationContext.java
index c4d32c6..d7a0199 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationContext.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationContext.java
@@ -23,6 +23,7 @@
 import com.mobsandgeeks.saripaar.exception.ConversionException;
 
 import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -37,11 +38,13 @@
 public class ValidationContext {
 
     // Attributes
-    private Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> mViewRulesMap;
+    private Map<Field, ArrayList<Pair<Rule, ViewDataAdapter>>> mViewRulesMap;
     private Context mContext;
+    private Object mController;
 
-    ValidationContext(final Context context) {
+    ValidationContext(final Context context,Object controller) {
         this.mContext = context;
+        this.mController = controller;
     }
 
     /**
@@ -61,16 +64,24 @@
 
         // Find all views with the target rule
         List<View> annotatedViews = new ArrayList<View>();
-        Set<View> views = mViewRulesMap.keySet();
-        for (View view : views) {
-            ArrayList<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs = mViewRulesMap.get(view);
-            for (Pair<Rule, ViewDataAdapter> ruleAdapterPair : ruleAdapterPairs) {
-                boolean uniqueMatchingView =
-                        annotationRuleClass.equals(ruleAdapterPair.first.getClass())
-                                && !annotatedViews.contains(view);
-                if (uniqueMatchingView) {
-                    annotatedViews.add(view);
+        Set<Field> views = mViewRulesMap.keySet();
+        for (Field field : views) {
+            try {
+                Object fieldValue = field.get(mController);
+                if(fieldValue instanceof View){
+                    View view = (View) fieldValue;
+                    ArrayList<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs = mViewRulesMap.get(view);
+                    for (Pair<Rule, ViewDataAdapter> ruleAdapterPair : ruleAdapterPairs) {
+                        boolean uniqueMatchingView =
+                                annotationRuleClass.equals(ruleAdapterPair.first.getClass())
+                                        && !annotatedViews.contains(view);
+                        if (uniqueMatchingView) {
+                            annotatedViews.add(view);
+                        }
+                    }
                 }
+            } catch (IllegalAccessException e) {
+                e.printStackTrace();
             }
         }
 
@@ -116,7 +127,7 @@ public Context getContext() {
         return mContext;
     }
 
-    void setViewRulesMap(final Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> viewRulesMap) {
+    void setViewRulesMap(final Map<Field, ArrayList<Pair<Rule, ViewDataAdapter>>> viewRulesMap) {
         mViewRulesMap = viewRulesMap;
     }
 
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationError.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationError.java
index a0b5c04..e9742ea 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationError.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationError.java
@@ -15,7 +15,6 @@
 package com.mobsandgeeks.saripaar;
 
 import android.content.Context;
-import android.view.View;
 
 import java.util.List;
 
@@ -27,28 +26,28 @@
  * @since 2.0
  */
 public class ValidationError {
-    private final View view;
+    private final Object object;
     private final List<Rule> failedRules;
 
     /**
      * Constructor.
      *
-     * @param view  A failed {@link android.view.View}.
+     * @param object  A failed {@link android.view.View}.
      * @param failedRules  A {@link java.util.List} of failed
      *      {@link com.mobsandgeeks.saripaar.Rule}s.
      */
-    ValidationError(final View view, final List<Rule> failedRules) {
-        this.view = view;
+    ValidationError(final Object object, final List<Rule> failedRules) {
+        this.object = object;
         this.failedRules = failedRules;
     }
 
     /**
      * Gets the failed {@link android.view.View}.
      *
-     * @return The failed view.
+     * @return The failed object.
      */
-    public View getView() {
-        return view;
+    public Object getObject() {
+        return object;
     }
 
     /**
@@ -85,7 +84,7 @@ public String getCollatedErrorMessage(final Context context) {
     @Override
     public String toString() {
         return "ValidationError{"
-                + "view=" + view
+                + "object=" + object
                 + ", failedRules=" + failedRules
                 + '}';
     }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
index 1e0aba2..7f843f9 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
@@ -73,60 +73,51 @@
 import java.util.Set;
 
 /**
- * The {@link com.mobsandgeeks.saripaar.Validator} takes care of validating the
- * {@link android.view.View}s in the given controller instance. Usually, an
- * {@link android.app.Activity} or a {@link android.app.Fragment}. However, it can also be used
- * with other controller classes that contain references to {@link android.view.View} objects.
+ * The {@link Validator} takes care of validating the
+ * {@link View}s in the given controller instance. Usually, an
+ * {@link Activity} or a {@link Fragment}. However, it can also be used
+ * with other controller classes that contain references to {@link View} objects.
  * <p>
- * The {@link com.mobsandgeeks.saripaar.Validator} is capable of performing validations in two
+ * The {@link Validator} is capable of performing validations in two
  * modes,
- *  <ol>
- *      <li>{@link Mode#BURST}, where all the views are validated and all errors are reported
- *          via the callback at once. Fields need not be ordered using the
- *          {@link com.mobsandgeeks.saripaar.annotation.Order} annotation in {@code BURST} mode.
- *      </li>
- *      <li>{@link Mode#IMMEDIATE}, in which the validation stops and the error is reported as soon
- *          as a {@link com.mobsandgeeks.saripaar.Rule} fails. To use this mode, the fields SHOULD
- *          BE ordered using the {@link com.mobsandgeeks.saripaar.annotation.Order} annotation.
- *      </li>
- *  </ol>
+ * <ol>
+ * <li>{@link Mode#BURST}, where all the views are validated and all errors are reported
+ * via the callback at once. Fields need not be ordered using the
+ * {@link Order} annotation in {@code BURST} mode.
+ * </li>
+ * <li>{@link Mode#IMMEDIATE}, in which the validation stops and the error is reported as soon
+ * as a {@link Rule} fails. To use this mode, the fields SHOULD
+ * BE ordered using the {@link Order} annotation.
+ * </li>
+ * </ol>
  * <p>
  * There are three flavors of the {@code validate()} method.
  * <ol>
- *      <li>{@link #validate()}, no frills regular validation that validates all
- *          {@link android.view.View}s.
- *      </li>
- *      <li>{@link #validateTill(android.view.View)}, validates all {@link android.view.View}s till
- *          the one that is specified.
- *      </li>
- *      <li>{@link #validateBefore(android.view.View)}, validates all {@link android.view.View}s
- *          before the specified {@link android.view.View}.
- *      </li>
+ * <li>{@link #validate()}, no frills regular validation that validates all
+ * {@link View}s.
+ * </li>
+ * </li>
  * </ol>
  * <p>
- * It is imperative that the fields are ordered while making the
- * {@link #validateTill(android.view.View)} and {@link #validateBefore(android.view.View)} method
- * calls.
- * <p>
- * The {@link com.mobsandgeeks.saripaar.Validator} requires a
- * {@link com.mobsandgeeks.saripaar.Validator.ValidationListener} that reports the outcome of the
+ * The {@link Validator} requires a
+ * {@link Validator.ValidationListener} that reports the outcome of the
  * validation.
  * <ul>
- *      <li> {@link com.mobsandgeeks.saripaar.Validator.ValidationListener#onValidationSucceeded()}
- *          is called if all {@link com.mobsandgeeks.saripaar.Rule}s pass.
- *      </li>
- *      <li>
- *          The {@link Validator.ValidationListener#onValidationFailed(java.util.List)}
- *          callback reports errors caused by failures. In {@link Mode#IMMEDIATE} this callback will
- *          contain just one instance of the {@link com.mobsandgeeks.saripaar.ValidationError}
- *          object.
- *      </li>
+ * <li> {@link Validator.ValidationListener#onValidationSucceeded()}
+ * is called if all {@link Rule}s pass.
+ * </li>
+ * <li>
+ * The {@link Validator.ValidationListener#onValidationFailed(List)}
+ * callback reports errors caused by failures. In {@link Mode#IMMEDIATE} this callback will
+ * contain just one instance of the {@link ValidationError}
+ * object.
+ * </li>
  * </ul>
  *
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 1.0
  */
-@SuppressWarnings({ "unchecked", "ForLoopReplaceableByForEach" })
+@SuppressWarnings({"unchecked", "ForLoopReplaceableByForEach"})
 public class Validator {
 
     // Entries are registered inside a static block (Placed at the end of source)
@@ -134,15 +125,15 @@
 
     // Holds adapter entries that are mapped to corresponding views.
     private final
-            Map<Class<? extends View>, HashMap<Class<?>, ViewDataAdapter>> mRegisteredAdaptersMap =
-                    new HashMap<Class<? extends View>, HashMap<Class<?>, ViewDataAdapter>>();
+    Map<Class<? extends View>, HashMap<Class<?>, ViewDataAdapter>> mRegisteredAdaptersMap =
+            new HashMap<Class<? extends View>, HashMap<Class<?>, ViewDataAdapter>>();
 
     // Attributes
     private Object mController;
     private Mode mValidationMode;
     private ValidationContext mValidationContext;
-    private Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> mViewRulesMap;
-    private Map<View, ArrayList<Pair<Annotation, ViewDataAdapter>>> mOptionalViewsMap;
+    private Map<Field, ArrayList<Pair<Rule, ViewDataAdapter>>> mRulesMap;
+    private Map<Field, ArrayList<Pair<Annotation, ViewDataAdapter>>> mOptionalViewsMap;
     private boolean mOrderedFields;
     private boolean mValidateInvisibleViews;
     private SequenceComparator mSequenceComparator;
@@ -154,40 +145,51 @@
     /**
      * Constructor.
      *
-     * @param controller  The class containing {@link android.view.View}s to be validated. Usually,
-     *      an {@link android.app.Activity} or a {@link android.app.Fragment}.
+     * @param controller The class containing {@link View}s to be validated. Usually,
+     *                   an {@link Activity} or a {@link Fragment}.
      */
-    public Validator(final Object controller) {
+    public Validator(final Context context, final Object controller) {
         assertNotNull(controller, "controller");
         mController = controller;
         mValidationMode = Mode.BURST;
         mSequenceComparator = new SequenceComparator();
         mViewValidatedAction = new DefaultViewValidatedAction();
+        mValidationContext = new ValidationContext(context, mController);
+    }
+
+    public Validator(final Object controller) {
+        this(null, controller);
 
-        // Instantiate a ValidationContext
+        Context context = null;
         if (controller instanceof Activity) {
-            mValidationContext = new ValidationContext((Activity) controller);
-        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB
-                && controller instanceof Fragment) {
-            Activity activity = ((Fragment) controller).getActivity();
-            mValidationContext = new ValidationContext(activity);
+            context = (Context) controller;
+        }
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+            if (controller instanceof Fragment) {
+                context = ((Fragment) controller).getActivity();
+            }
+        }
+
+        setContext(context);
+    }
+
+    public void setContext(Context context) {
+        if (mValidationContext == null && context != null) {
+            mValidationContext = new ValidationContext(context, mController);
         }
-        // Else, lazy init ValidationContext in #getRuleAdapterPair(Annotation, Field)
-        // or void #put(VIEW, QuickRule<VIEW>) by obtaining a Context from one of the
-        // View instances.
     }
 
     /**
-     * A convenience method for registering {@link com.mobsandgeeks.saripaar.Rule} annotations that
+     * A convenience method for registering {@link Rule} annotations that
      * act on {@link android.widget.TextView} and it's children, the most notable one being
      * {@link android.widget.EditText}. Register custom annotations for
-     * {@link android.widget.TextView}s that validates {@link java.lang.Double},
-     * {@link java.lang.Float}, {@link java.lang.Integer} and {@link java.lang.String} types.
+     * {@link android.widget.TextView}s that validates {@link Double},
+     * {@link Float}, {@link Integer} and {@link String} types.
      * <p>
      * For registering rule annotations for other view types see,
-     * {@link #registerAdapter(Class, com.mobsandgeeks.saripaar.adapter.ViewDataAdapter)}.
+     * {@link #registerAdapter(Class, ViewDataAdapter)}.
      *
-     * @param ruleAnnotation  A rule {@link java.lang.annotation.Annotation}.
+     * @param ruleAnnotation A rule {@link Annotation}.
      */
     public static void registerAnnotation(final Class<? extends Annotation> ruleAnnotation) {
         SARIPAAR_REGISTRY.register(ruleAnnotation);
@@ -196,15 +198,14 @@ public static void registerAnnotation(final Class<? extends Annotation> ruleAnno
     /**
      * An elaborate method for registering custom rule annotations.
      *
-     * @param annotation  The annotation that you want to register.
-     * @param viewType  The {@link android.view.View} type.
-     * @param viewDataAdapter  An instance of the
-     *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} for your
-     *      {@link android.view.View}.
-     *
-     * @param <VIEW>  The {@link android.view.View} for which the
-     *      {@link java.lang.annotation.Annotation} and
-     *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} is being registered.
+     * @param annotation      The annotation that you want to register.
+     * @param viewType        The {@link View} type.
+     * @param viewDataAdapter An instance of the
+     *                        {@link ViewDataAdapter} for your
+     *                        {@link View}.
+     * @param <VIEW>          The {@link View} for which the
+     *                        {@link Annotation} and
+     *                        {@link ViewDataAdapter} is being registered.
      */
     public static <VIEW extends View> void registerAnnotation(
             final Class<? extends Annotation> annotation, final Class<VIEW> viewType,
@@ -216,15 +217,14 @@ public static void registerAnnotation(final Class<? extends Annotation> ruleAnno
     }
 
     /**
-     * Registers a {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} for the given
-     * {@link android.view.View}.
-     *
-     * @param viewType  The {@link android.view.View} for which a
-     *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} is being registered.
-     * @param viewDataAdapter  A {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} instance.
+     * Registers a {@link ViewDataAdapter} for the given
+     * {@link View}.
      *
-     * @param <VIEW>  The {@link android.view.View} type.
-     * @param <DATA_TYPE>  The {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} type.
+     * @param viewType        The {@link View} for which a
+     *                        {@link ViewDataAdapter} is being registered.
+     * @param viewDataAdapter A {@link ViewDataAdapter} instance.
+     * @param <VIEW>          The {@link View} type.
+     * @param <DATA_TYPE>     The {@link ViewDataAdapter} type.
      */
     public <VIEW extends View, DATA_TYPE> void registerAdapter(
             final Class<VIEW> viewType, final ViewDataAdapter<VIEW, DATA_TYPE> viewDataAdapter) {
@@ -245,11 +245,11 @@ public static void registerAnnotation(final Class<? extends Annotation> ruleAnno
     }
 
     /**
-     * Set a {@link com.mobsandgeeks.saripaar.Validator.ValidationListener} to the
-     * {@link com.mobsandgeeks.saripaar.Validator}.
+     * Set a {@link Validator.ValidationListener} to the
+     * {@link Validator}.
      *
-     * @param validationListener  A {@link com.mobsandgeeks.saripaar.Validator.ValidationListener}
-     *      instance. null throws an {@link java.lang.IllegalArgumentException}.
+     * @param validationListener A {@link Validator.ValidationListener}
+     *                           instance. null throws an {@link IllegalArgumentException}.
      */
     public void setValidationListener(final ValidationListener validationListener) {
         assertNotNull(validationListener, "validationListener");
@@ -257,22 +257,22 @@ public void setValidationListener(final ValidationListener validationListener) {
     }
 
     /**
-     * Set a {@link com.mobsandgeeks.saripaar.Validator.ViewValidatedAction} to the
-     * {@link com.mobsandgeeks.saripaar.Validator}.
+     * Set a {@link Validator.ViewValidatedAction} to the
+     * {@link Validator}.
      *
-     * @param viewValidatedAction  A {@link com.mobsandgeeks.saripaar.Validator.ViewValidatedAction}
-     *      instance.
+     * @param viewValidatedAction A {@link Validator.ViewValidatedAction}
+     *                            instance.
      */
     public void setViewValidatedAction(final ViewValidatedAction viewValidatedAction) {
         this.mViewValidatedAction = viewValidatedAction;
     }
 
     /**
-     * Set the validation {@link com.mobsandgeeks.saripaar.Validator.Mode} for the current
-     * {@link com.mobsandgeeks.saripaar.Validator} instance.
+     * Set the validation {@link Validator.Mode} for the current
+     * {@link Validator} instance.
      *
-     * @param validationMode  {@link Mode#BURST} or {@link Mode#IMMEDIATE}, null throws an
-     *      {@link java.lang.IllegalArgumentException}.
+     * @param validationMode {@link Mode#BURST} or {@link Mode#IMMEDIATE}, null throws an
+     *                       {@link IllegalArgumentException}.
      */
     public void setValidationMode(final Mode validationMode) {
         assertNotNull(validationMode, "validationMode");
@@ -280,9 +280,9 @@ public void setValidationMode(final Mode validationMode) {
     }
 
     /**
-     * Gets the current {@link com.mobsandgeeks.saripaar.Validator.Mode}.
+     * Gets the current {@link Validator.Mode}.
      *
-     * @return The current validation mode of the {@link com.mobsandgeeks.saripaar.Validator}.
+     * @return The current validation mode of the {@link Validator}.
      */
     public Mode getValidationMode() {
         return mValidationMode;
@@ -291,57 +291,35 @@ public Mode getValidationMode() {
     /**
      * Configures the validator to validate invisible views.
      *
-     * @param validate  {@code true} includes invisible views during validation.
+     * @param validate {@code true} includes invisible views during validation.
      */
     public void validateInvisibleViews(final boolean validate) {
         this.mValidateInvisibleViews = validate;
     }
 
     /**
-     * Validates all {@link android.view.View}s with {@link com.mobsandgeeks.saripaar.Rule}s.
-     * When validating in {@link com.mobsandgeeks.saripaar.Validator.Mode#IMMEDIATE}, all
-     * {@link android.view.View} fields must be ordered using the
-     * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation.
+     * Validates all {@link View}s with {@link Rule}s.
+     * When validating in {@link Validator.Mode#IMMEDIATE}, all
+     * {@link View} fields must be ordered using the
+     * {@link Order} annotation.
      */
     public void validate() {
         validate(false);
     }
 
     /**
-     * Validates all {@link android.view.View}s before the specified {@link android.view.View}
-     * parameter. {@link android.view.View} fields MUST be ordered using the
-     * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation.
-     *
-     * @param view  A {@link android.view.View}.
-     */
-    public void validateBefore(final View view) {
-        validateBefore(view, false);
-    }
-
-    /**
-     * Validates all {@link android.view.View}s till the specified {@link android.view.View}
-     * parameter. {@link android.view.View} fields MUST be ordered using the
-     * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation.
-     *
-     * @param view  A {@link android.view.View}.
-     */
-    public void validateTill(final View view) {
-        validateTill(view, false);
-    }
-
-    /**
-     * Validates all {@link android.view.View}s with {@link com.mobsandgeeks.saripaar.Rule}s.
-     * When validating in {@link com.mobsandgeeks.saripaar.Validator.Mode#IMMEDIATE}, all
-     * {@link android.view.View} fields must be ordered using the
-     * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation. Asynchronous calls will cancel
+     * Validates all {@link View}s with {@link Rule}s.
+     * When validating in {@link Validator.Mode#IMMEDIATE}, all
+     * {@link View} fields must be ordered using the
+     * {@link Order} annotation. Asynchronous calls will cancel
      * any pending or ongoing asynchronous validation and start a new one.
      *
-     * @param async  true if asynchronous, false otherwise.
+     * @param async true if asynchronous, false otherwise.
      */
     public void validate(final boolean async) {
         createRulesSafelyAndLazily(false);
 
-        View lastView = getLastView();
+        Field lastView = getLastField();
         if (Mode.BURST.equals(mValidationMode)) {
             validateUnorderedFieldsWithCallbackTill(lastView, async);
         } else if (Mode.IMMEDIATE.equals(mValidationMode)) {
@@ -352,38 +330,9 @@ public void validate(final boolean async) {
         }
     }
 
-    /**
-     * Validates all {@link android.view.View}s before the specified {@link android.view.View}
-     * parameter. {@link android.view.View} fields MUST be ordered using the
-     * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation. Asynchronous calls will cancel
-     * any pending or ongoing asynchronous validation and start a new one.
-     *
-     * @param view  A {@link android.view.View}.
-     * @param async  true if asynchronous, false otherwise.
-     */
-    public void validateBefore(final View view, final boolean async) {
-        createRulesSafelyAndLazily(false);
-        View previousView = getViewBefore(view);
-        validateOrderedFieldsWithCallbackTill(previousView, "when using 'validateBefore(View)'.",
-                async);
-    }
-
-    /**
-     * Validates all {@link android.view.View}s till the specified {@link android.view.View}
-     * parameter. {@link android.view.View} fields MUST be ordered using the
-     * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation. Asynchronous calls will cancel
-     * any pending or ongoing asynchronous validation and start a new one.
-     *
-     * @param view  A {@link android.view.View}.
-     * @param async  true if asynchronous, false otherwise.
-     */
-    public void validateTill(final View view, final boolean async) {
-        validateOrderedFieldsWithCallbackTill(view, "when using 'validateTill(View)'.", async);
-    }
-
     /**
      * Used to find if an asynchronous validation task is running. Useful only when you run the
-     * {@link com.mobsandgeeks.saripaar.Validator} in asynchronous mode.
+     * {@link Validator} in asynchronous mode.
      *
      * @return true if the asynchronous task is running, false otherwise.
      */
@@ -408,64 +357,60 @@ public boolean cancelAsync() {
     }
 
     /**
-     * Add one or more {@link com.mobsandgeeks.saripaar.QuickRule}s for a {@link android.view.View}.
-     *
-     * @param view  A {@link android.view.View} for which
-     *      {@link com.mobsandgeeks.saripaar.QuickRule}(s) are to be added.
-     * @param quickRules  Varargs of {@link com.mobsandgeeks.saripaar.QuickRule}s.
+     * Add one or more {@link QuickRule}s for a {@link View}.
      *
-     * @param <VIEW>  The {@link android.view.View} type for which the
-     *      {@link com.mobsandgeeks.saripaar.QuickRule}s are being registered.
+     * @param view       A {@link View} for which
+     *                   {@link QuickRule}(s) are to be added.
+     * @param quickRules Varargs of {@link QuickRule}s.
+     * @param <VIEW>     The {@link View} type for which the
+     *                   {@link QuickRule}s are being registered.
+     *                   //TODO 兼容注册快速规则
      */
-    public <VIEW extends View> void put(final VIEW view, final QuickRule<VIEW>... quickRules) {
-        assertNotNull(view, "view");
-        assertNotNull(quickRules, "quickRules");
-        if (quickRules.length == 0) {
-            throw new IllegalArgumentException("'quickRules' cannot be empty.");
-        }
-
-        if (mValidationContext == null) {
-            mValidationContext = new ValidationContext(view.getContext());
-        }
-
-        // Create rules
-        createRulesSafelyAndLazily(true);
-
-        // If all fields are ordered, then this field should be ordered too
-        if (mOrderedFields && !mViewRulesMap.containsKey(view)) {
-            String message = String.format("All fields are ordered, so this `%s` should be "
-                    + "ordered too, declare the view as a field and add the `@Order` "
-                    + "annotation.", view.getClass().getName());
-            throw new IllegalStateException(message);
-        }
-
-        // If there are no rules, create an empty list
-        ArrayList<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs = mViewRulesMap.get(view);
-        ruleAdapterPairs = ruleAdapterPairs == null
-                ? new ArrayList<Pair<Rule, ViewDataAdapter>>() : ruleAdapterPairs;
-
-        // Add the quick rule to existing rules
-        for (int i = 0, n = quickRules.length; i < n; i++) {
-            QuickRule quickRule = quickRules[i];
-            if (quickRule != null) {
-                ruleAdapterPairs.add(new Pair(quickRule, null));
-            }
-        }
-        Collections.sort(ruleAdapterPairs, mSequenceComparator);
-        mViewRulesMap.put(view, ruleAdapterPairs);
-    }
+//    public <VIEW extends View> void put(final VIEW view, final QuickRule<VIEW>... quickRules) {
+//        assertNotNull(view, "view");
+//        assertNotNull(quickRules, "quickRules");
+//        if (quickRules.length == 0) {
+//            throw new IllegalArgumentException("'quickRules' cannot be empty.");
+//        }
+//
+//        // Create rules
+//        createRulesSafelyAndLazily(true);
+//
+//        // If all fields are ordered, then this field should be ordered too
+//        if (mOrderedFields && !mRulesMap.containsKey(view)) {
+//            String message = String.format("All fields are ordered, so this `%s` should be "
+//                    + "ordered too, declare the view as a field and add the `@Order` "
+//                    + "annotation.", view.getClass().getName());
+//            throw new IllegalStateException(message);
+//        }
+//
+//        // If there are no rules, create an empty list
+//        ArrayList<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs = mRulesMap.get(view);
+//        ruleAdapterPairs = ruleAdapterPairs == null
+//                ? new ArrayList<Pair<Rule, ViewDataAdapter>>() : ruleAdapterPairs;
+//
+//        // Add the quick rule to existing rules
+//        for (int i = 0, n = quickRules.length; i < n; i++) {
+//            QuickRule quickRule = quickRules[i];
+//            if (quickRule != null) {
+//                ruleAdapterPairs.add(new Pair(quickRule, null));
+//            }
+//        }
+//        Collections.sort(ruleAdapterPairs, mSequenceComparator);
+//        mRulesMap.put(view, ruleAdapterPairs);
+//    }
 
     /**
-     * Remove all {@link com.mobsandgeeks.saripaar.Rule}s for the given {@link android.view.View}.
+     * Remove all {@link Rule}s for the given {@link View}.
      *
-     * @param view  The {@link android.view.View} whose rules should be removed.
+     * @param view The {@link View} whose rules should be removed.
      */
     public void removeRules(final View view) {
         assertNotNull(view, "view");
-        if (mViewRulesMap == null) {
+        if (mRulesMap == null) {
             createRulesSafelyAndLazily(false);
         }
-        mViewRulesMap.remove(view);
+        mRulesMap.remove(view);
     }
 
     static boolean isSaripaarAnnotation(final Class<? extends Annotation> annotation) {
@@ -486,13 +431,13 @@ private static void assertNotNull(final Object object, final String argumentName
     private void createRulesSafelyAndLazily(final boolean addingQuickRules) {
         // Create rules lazily, because we don't have to worry about the order of
         // instantiating the Validator.
-        if (mViewRulesMap == null) {
+        if (mRulesMap == null) {
             final List<Field> annotatedFields = getSaripaarAnnotatedFields(mController.getClass());
-            mViewRulesMap = createRules(annotatedFields);
-            mValidationContext.setViewRulesMap(mViewRulesMap);
+            mRulesMap = createRules(annotatedFields);
+            mValidationContext.setViewRulesMap(mRulesMap);
         }
 
-        if (!addingQuickRules && mViewRulesMap.size() == 0) {
+        if (!addingQuickRules && mRulesMap.size() == 0) {
             String message = "No rules found. You must have at least one rule to validate. "
                     + "If you are using custom annotations, make sure that you have registered "
                     + "them using the 'Validator.register()' method.";
@@ -505,12 +450,15 @@ private void createRulesSafelyAndLazily(final boolean addingQuickRules) {
                 SARIPAAR_REGISTRY.getRegisteredAnnotations();
 
         List<Field> annotatedFields = new ArrayList<Field>();
-        List<Field> controllerViewFields = getControllerViewFields(controllerClass);
-        for (int i = 0, n = controllerViewFields.size(); i < n; i++) {
-            Field field = controllerViewFields.get(i);
-            if (isSaripaarAnnotatedField(field, saripaarAnnotations)) {
-                annotatedFields.add(field);
+        Class cls = controllerClass;
+        while (cls != null && !"java.lang.Object".equals(cls.getCanonicalName())){
+            Field[] fields = cls.getDeclaredFields();
+            for (Field field : fields) {
+                if (isSaripaarAnnotatedField(field, saripaarAnnotations)) {
+                    annotatedFields.add(field);
+                }
             }
+            cls = cls.getSuperclass();
         }
 
         // Sort
@@ -523,40 +471,9 @@ private void createRulesSafelyAndLazily(final boolean addingQuickRules) {
         return annotatedFields;
     }
 
-    private List<Field> getControllerViewFields(final Class<?> controllerClass) {
-        List<Field> controllerViewFields = new ArrayList<Field>();
-
-        // Fields declared in the controller
-        controllerViewFields.addAll(getViewFields(controllerClass));
-
-        // Inherited fields
-        Class<?> superClass = controllerClass.getSuperclass();
-        while (!superClass.equals(Object.class)) {
-            List<Field> viewFields = getViewFields(superClass);
-            if (viewFields.size() > 0) {
-                controllerViewFields.addAll(viewFields);
-            }
-            superClass = superClass.getSuperclass();
-        }
-
-        return controllerViewFields;
-    }
-
-    private List<Field> getViewFields(final Class<?> clazz) {
-        List<Field> viewFields = new ArrayList<Field>();
-        Field[] declaredFields = clazz.getDeclaredFields();
-        for (int i = 0, n = declaredFields.length; i < n; i++) {
-            Field field = declaredFields[i];
-            if (View.class.isAssignableFrom(field.getType())) {
-                viewFields.add(field);
-            }
-        }
-
-        return viewFields;
-    }
 
     private boolean isSaripaarAnnotatedField(final Field field,
-            final Set<Class<? extends Annotation>> registeredAnnotations) {
+                                             final Set<Class<? extends Annotation>> registeredAnnotations) {
         boolean hasOrderAnnotation = field.getAnnotation(Order.class) != null;
         boolean hasSaripaarAnnotation = false;
 
@@ -574,13 +491,12 @@ private boolean isSaripaarAnnotatedField(final Field field,
         return hasOrderAnnotation || hasSaripaarAnnotation;
     }
 
-    private Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> createRules(
+    private Map<Field, ArrayList<Pair<Rule, ViewDataAdapter>>> createRules(
             final List<Field> annotatedFields) {
 
-        final Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> viewRulesMap =
-                new LinkedHashMap<View, ArrayList<Pair<Rule, ViewDataAdapter>>>();
+        final Map<Field, ArrayList<Pair<Rule, ViewDataAdapter>>> viewRulesMap =
+                new LinkedHashMap<Field, ArrayList<Pair<Rule, ViewDataAdapter>>>();
 
-        View view;
         for (int i = 0, n = annotatedFields.size(); i < n; i++) {
             Field field = annotatedFields.get(i);
             final ArrayList<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs =
@@ -590,11 +506,10 @@ private boolean isSaripaarAnnotatedField(final Field field,
             // @Optional
             final boolean hasOptionalAnnotation = hasOptionalAnnotation(fieldAnnotations);
             if (hasOptionalAnnotation && mOptionalViewsMap == null) {
-                mOptionalViewsMap = new HashMap<View,
+                mOptionalViewsMap = new HashMap<Field,
                         ArrayList<Pair<Annotation, ViewDataAdapter>>>();
             }
 
-            view = getView(field);
             for (int j = 0, nAnnotations = fieldAnnotations.length; j < nAnnotations; j++) {
                 Annotation annotation = fieldAnnotations[j];
                 if (isSaripaarAnnotation(annotation.annotationType())) {
@@ -605,18 +520,18 @@ private boolean isSaripaarAnnotatedField(final Field field,
                     // @Optional
                     if (hasOptionalAnnotation) {
                         ArrayList<Pair<Annotation, ViewDataAdapter>> pairs =
-                                mOptionalViewsMap.get(view);
+                                mOptionalViewsMap.get(field);
                         if (pairs == null) {
                             pairs = new ArrayList<Pair<Annotation, ViewDataAdapter>>();
                         }
                         pairs.add(new Pair(annotation, ruleAdapterPair.second));
-                        mOptionalViewsMap.put(view, pairs);
+                        mOptionalViewsMap.put(field, pairs);
                     }
                 }
             }
 
             Collections.sort(ruleAdapterPairs, mSequenceComparator);
-            viewRulesMap.put(view, ruleAdapterPairs);
+            viewRulesMap.put(field, ruleAdapterPairs);
         }
 
         return viewRulesMap;
@@ -634,30 +549,13 @@ private boolean hasOptionalAnnotation(final Annotation[] annotations) {
     }
 
     private Pair<Rule, ViewDataAdapter> getRuleAdapterPair(final Annotation saripaarAnnotation,
-            final Field viewField) {
+                                                           final Field field) {
         final Class<? extends Annotation> annotationType = saripaarAnnotation.annotationType();
-        final Class<?> viewFieldType = viewField.getType();
+        final Class<?> viewFieldType = field.getType();
         final Class<?> ruleDataType = Reflector.getRuleDataType(saripaarAnnotation);
 
-        final ViewDataAdapter dataAdapter = getDataAdapter(annotationType, viewFieldType,
-                ruleDataType);
-
-        // If no matching adapter is found, throw.
-        if (dataAdapter == null) {
-            String viewType = viewFieldType.getName();
-            String message = String.format(
-                    "To use '%s' on '%s', register a '%s' that returns a '%s' from the '%s'.",
-                    annotationType.getName(),
-                    viewType,
-                    ViewDataAdapter.class.getName(),
-                    ruleDataType.getName(),
-                    viewType);
-            throw new UnsupportedOperationException(message);
-        }
-
-        if (mValidationContext == null) {
-            mValidationContext = new ValidationContext(getContext(viewField));
-        }
+        final ViewDataAdapter dataAdapter = Reflector.isViewField(field) ? getDataAdapter(annotationType, viewFieldType,
+                ruleDataType) : null;
 
         final Class<? extends AnnotationRule> ruleType = getRuleType(saripaarAnnotation);
         final AnnotationRule rule = Reflector.instantiateRule(ruleType,
@@ -667,7 +565,7 @@ private boolean hasOptionalAnnotation(final Annotation[] annotations) {
     }
 
     private ViewDataAdapter getDataAdapter(final Class<? extends Annotation> annotationType,
-            final Class<?> viewFieldType, final Class<?> adapterDataType) {
+                                           final Class<?> viewFieldType, final Class<?> adapterDataType) {
 
         // Get an adapter from the stock registry
         ViewDataAdapter dataAdapter = SARIPAAR_REGISTRY.getDataAdapter(
@@ -685,71 +583,38 @@ private ViewDataAdapter getDataAdapter(final Class<? extends Annotation> annotat
         return dataAdapter;
     }
 
-    private Context getContext(final Field viewField) {
-        Context context = null;
-        try {
-            if (!viewField.isAccessible()) {
-                viewField.setAccessible(true);
-            }
-            View view = (View) viewField.get(mController);
-            context = view.getContext();
-        } catch (IllegalAccessException e) {
-            e.printStackTrace();
-        }
-        return context;
-    }
-
     private Class<? extends AnnotationRule> getRuleType(final Annotation ruleAnnotation) {
         ValidateUsing validateUsing = ruleAnnotation.annotationType()
                 .getAnnotation(ValidateUsing.class);
         return validateUsing != null ? validateUsing.value() : null;
     }
 
-    private View getView(final Field field) {
-        View view = null;
-        try {
-            field.setAccessible(true);
-            view = (View) field.get(mController);
-
-            if (view == null) {
-                String message = String.format("'%s %s' is null.",
-                        field.getType().getSimpleName(), field.getName());
-                throw new IllegalStateException(message);
-            }
-        } catch (IllegalArgumentException e) {
-            e.printStackTrace();
-        } catch (IllegalAccessException e) {
-            e.printStackTrace();
-        }
-
-        return view;
-    }
 
-    private void validateUnorderedFieldsWithCallbackTill(final View view, final boolean async) {
-        validateFieldsWithCallbackTill(view, false, null, async);
+    private void validateUnorderedFieldsWithCallbackTill(final Field field, final boolean async) {
+        validateFieldsWithCallbackTill(field, false, null, async);
     }
 
-    private void validateOrderedFieldsWithCallbackTill(final View view, final String reasonSuffix,
-            final boolean async) {
-        validateFieldsWithCallbackTill(view, true, reasonSuffix, async);
+    private void validateOrderedFieldsWithCallbackTill(final Field field, final String reasonSuffix,
+                                                       final boolean async) {
+        validateFieldsWithCallbackTill(field, true, reasonSuffix, async);
     }
 
-    private void validateFieldsWithCallbackTill(final View view, final boolean orderedFields,
-            final String reasonSuffix, final boolean async) {
+    private void validateFieldsWithCallbackTill(final Field field, final boolean orderedFields,
+                                                final String reasonSuffix, final boolean async) {
         createRulesSafelyAndLazily(false);
         if (async) {
             if (mAsyncValidationTask != null) {
                 mAsyncValidationTask.cancel(true);
             }
-            mAsyncValidationTask = new AsyncValidationTask(view, orderedFields, reasonSuffix);
+            mAsyncValidationTask = new AsyncValidationTask(field, orderedFields, reasonSuffix);
             mAsyncValidationTask.execute((Void[]) null);
         } else {
-            triggerValidationListenerCallback(validateTill(view, orderedFields, reasonSuffix));
+            triggerValidationListenerCallback(validateTill(field, orderedFields, reasonSuffix));
         }
     }
 
-    private synchronized ValidationReport validateTill(final View view,
-            final boolean requiresOrderedRules, final String reasonSuffix) {
+    private synchronized ValidationReport validateTill(final Field field,
+                                                       final boolean requiresOrderedRules, final String reasonSuffix) {
         // Do we need ordered rules?
         if (requiresOrderedRules) {
             assertOrderedFields(mOrderedFields, reasonSuffix);
@@ -759,7 +624,7 @@ private synchronized ValidationReport validateTill(final View view,
         assertNotNull(mValidationListener, "validationListener");
 
         // Everything good. Bingo! validate ;)
-        return getValidationReport(view, mViewRulesMap, mValidationMode);
+        return getValidationReport(field, mRulesMap, mValidationMode);
     }
 
     private void triggerValidationListenerCallback(final ValidationReport validationReport) {
@@ -780,50 +645,42 @@ private void assertOrderedFields(final boolean orderedRules, final String reason
         }
     }
 
-    private ValidationReport getValidationReport(final View targetView,
-            final Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> viewRulesMap,
-                    final Mode validationMode) {
+    private ValidationReport getValidationReport(final Field targetField,
+                                                 final Map<Field, ArrayList<Pair<Rule, ViewDataAdapter>>> viewRulesMap,
+                                                 final Mode validationMode) {
 
         final List<ValidationError> validationErrors = new ArrayList<ValidationError>();
-        final Set<View> views = viewRulesMap.keySet();
+        final Set<Field> fields = viewRulesMap.keySet();
 
-        // Don't add errors for views that are placed after the specified view in validateTill()
-        boolean addErrorToReport = targetView != null;
+        // Don't add errors for fields that are placed after the specified view in validateTill()
+        boolean addErrorToReport = targetField != null;
 
         // Does the form have more errors? Used in validateTill()
         boolean hasMoreErrors = false;
 
         validation:
-        for (View view : views) {
-            List<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs = viewRulesMap.get(view);
+        for (Field field : fields) {
+            List<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs = viewRulesMap.get(field);
 
             // @Optional
-            boolean isOptional = mOptionalViewsMap != null && mOptionalViewsMap.containsKey(view);
-            if (isOptional && containsOptionalValue(view)) {
+            boolean isOptional = mOptionalViewsMap != null && mOptionalViewsMap.containsKey(field);
+            if (isOptional && containsOptionalValue(field)) {
                 continue;
             }
 
             // Validate all the rules for the given view.
             List<Rule> failedRules = null;
             for (int i = 0, nRules = ruleAdapterPairs.size(); i < nRules; i++) {
-
-                // Skip views that are invisible and disabled
-                boolean disabledView = !view.isEnabled();
-                boolean skipView = !view.isShown() && !mValidateInvisibleViews;
-                if (disabledView || skipView) {
-                    continue;
-                }
-
                 Pair<Rule, ViewDataAdapter> ruleAdapterPair = ruleAdapterPairs.get(i);
-                Rule failedRule = validateViewWithRule(
-                        view, ruleAdapterPair.first, ruleAdapterPair.second);
+                Rule failedRule = validateFieldWithRule(
+                        field, ruleAdapterPair.first, ruleAdapterPair.second);
                 boolean isLastRuleForView = i + 1 == nRules;
 
                 if (failedRule != null) {
                     if (addErrorToReport) {
                         if (failedRules == null) {
                             failedRules = new ArrayList<Rule>();
-                            validationErrors.add(new ValidationError(view, failedRules));
+                            validationErrors.add(new ValidationError(field, failedRules));
                         }
                         failedRules.add(failedRule);
                     } else {
@@ -835,8 +692,8 @@ private ValidationReport getValidationReport(final View targetView,
                     }
                 }
 
-                // Don't add reports for subsequent views
-                if (view.equals(targetView) && isLastRuleForView) {
+                // Don't add reports for subsequent fields
+                if (field.equals(targetField) && isLastRuleForView) {
                     addErrorToReport = false;
                 }
             }
@@ -845,23 +702,23 @@ private ValidationReport getValidationReport(final View targetView,
             boolean viewPassedAllRules = (failedRules == null || failedRules.size() == 0)
                     && !hasMoreErrors;
             if (viewPassedAllRules && mViewValidatedAction != null) {
-                triggerViewValidatedCallback(mViewValidatedAction, view);
+                triggerViewValidatedCallback(mViewValidatedAction, Reflector.getFieldValue(mController, field));
             }
         }
 
         return new ValidationReport(validationErrors, hasMoreErrors);
     }
 
-    private boolean containsOptionalValue(final View view) {
+    private boolean containsOptionalValue(final Field field) {
         ArrayList<Pair<Annotation, ViewDataAdapter>> annotationAdapterPairs
-                = mOptionalViewsMap.get(view);
+                = mOptionalViewsMap.get(field);
 
         for (int i = 0, n = annotationAdapterPairs.size(); i < n; i++) {
             Pair<Annotation, ViewDataAdapter> pair = annotationAdapterPairs.get(i);
             ViewDataAdapter adapter = pair.second;
             Annotation ruleAnnotation = pair.first;
-
-            if (adapter.containsOptionalValue(view, ruleAnnotation)) {
+            View view = Reflector.getViewByField(mController, field);
+            if (view != null && adapter != null && adapter.containsOptionalValue(view, ruleAnnotation)) {
                 return true;
             }
         }
@@ -869,37 +726,43 @@ private boolean containsOptionalValue(final View view) {
         return false;
     }
 
-    private Rule validateViewWithRule(final View view, final Rule rule,
-            final ViewDataAdapter dataAdapter) {
+    private Rule validateFieldWithRule(final Field field, final Rule rule,
+                                       final ViewDataAdapter dataAdapter) {
 
         boolean valid = false;
+        boolean isView = Reflector.isViewField(field);
+        Object fieldValue = Reflector.getFieldValue(mController, field);
         if (rule instanceof AnnotationRule) {
             Object data;
-
-            try {
-                data = dataAdapter.getData(view);
-                valid = rule.isValid(data);
-            } catch (ConversionException e) {
-                valid = false;
-                e.printStackTrace();
+            if (isView) {
+                View view = (View) fieldValue;
+                try {
+                    data = dataAdapter.getData(view);
+                    valid = rule.isValid(data);
+                } catch (ConversionException e) {
+                    valid = false;
+                    e.printStackTrace();
+                }
+            } else {
+                valid = rule.isValid(fieldValue);
             }
-        } else if (rule instanceof QuickRule) {
-            valid = rule.isValid(view);
+
+        } else if (rule instanceof QuickRule && isView) {
+            valid = rule.isValid(fieldValue);
         }
 
         return valid ? null : rule;
     }
 
-    private void triggerViewValidatedCallback(final ViewValidatedAction viewValidatedAction,
-            final View view) {
+    private void triggerViewValidatedCallback(final ViewValidatedAction viewValidatedAction, final Object obj) {
         boolean isOnMainThread = Looper.myLooper() == Looper.getMainLooper();
         if (isOnMainThread) {
-            viewValidatedAction.onAllRulesPassed(view);
+            viewValidatedAction.onAllRulesPassed(obj);
         } else {
             runOnMainThread(new Runnable() {
                 @Override
                 public void run() {
-                    viewValidatedAction.onAllRulesPassed(view);
+                    viewValidatedAction.onAllRulesPassed(obj);
                 }
             });
         }
@@ -912,31 +775,15 @@ private void runOnMainThread(final Runnable runnable) {
         mViewValidatedActionHandler.post(runnable);
     }
 
-    private View getLastView() {
-        final Set<View> views = mViewRulesMap.keySet();
-
-        View lastView = null;
-        for (View view : views) {
-            lastView = view;
-        }
-
-        return lastView;
-    }
-
-    private View getViewBefore(final View view) {
-        ArrayList<View> views = new ArrayList<View>(mViewRulesMap.keySet());
+    private Field getLastField() {
+        final Set<Field> fields = mRulesMap.keySet();
 
-        View currentView;
-        View previousView = null;
-        for (int i = 0, n = views.size(); i < n; i++) {
-            currentView = views.get(i);
-            if (currentView == view) {
-                previousView = i > 0 ? views.get(i - 1) : null;
-                break;
-            }
+        Field lastField = null;
+        for (Field field : fields) {
+            lastField = field;
         }
 
-        return previousView;
+        return lastField;
     }
 
     /**
@@ -948,34 +795,28 @@ private View getViewBefore(final View view) {
     public interface ValidationListener {
 
         /**
-         * Called when all {@link com.mobsandgeeks.saripaar.Rule}s pass.
+         * Called when all {@link Rule}s pass.
          */
         void onValidationSucceeded();
 
         /**
-         * Called when one or several {@link com.mobsandgeeks.saripaar.Rule}s fail.
+         * Called when one or several {@link Rule}s fail.
          *
-         * @param errors  List containing references to the {@link android.view.View}s and
-         *      {@link com.mobsandgeeks.saripaar.Rule}s that failed.
+         * @param errors List containing references to the {@link View}s and
+         *               {@link Rule}s that failed.
          */
         void onValidationFailed(List<ValidationError> errors);
     }
 
     /**
-     * Interface that provides a callback when all {@link com.mobsandgeeks.saripaar.Rule}s
-     * associated with a {@link android.view.View} passes.
+     * Interface that provides a callback when all {@link Rule}s
+     * associated with a {@link View} passes.
      *
      * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
      * @since 2.0
      */
     public interface ViewValidatedAction {
-
-        /**
-         * Called when all rules associated with the {@link android.view.View} passes.
-         *
-         * @param view  The {@link android.view.View} that has passed validation.
-         */
-        void onAllRulesPassed(View view);
+        void onAllRulesPassed(Object object);
     }
 
     /**
@@ -988,7 +829,7 @@ private View getViewBefore(final View view) {
 
         /**
          * BURST mode will validate all rules in all views before calling the
-         * {@link Validator.ValidationListener#onValidationFailed(java.util.List)}
+         * {@link Validator.ValidationListener#onValidationFailed(List)}
          * callback. Ordering and sequencing is optional.
          */
         BURST,
@@ -1011,20 +852,20 @@ private View getViewBefore(final View view) {
     }
 
     private class AsyncValidationTask extends AsyncTask<Void, Void, ValidationReport> {
-        private View mView;
+        private Field mField;
         private boolean mOrderedRules;
         private String mReasonSuffix;
 
-        AsyncValidationTask(final View view, final boolean orderedRules,
-                final String reasonSuffix) {
-            this.mView = view;
+        AsyncValidationTask(final Field field, final boolean orderedRules,
+                            final String reasonSuffix) {
+            this.mField = field;
             this.mOrderedRules = orderedRules;
             this.mReasonSuffix = reasonSuffix;
         }
 
         @Override
         protected ValidationReport doInBackground(final Void... params) {
-            return validateTill(mView, mOrderedRules, mReasonSuffix);
+            return validateTill(mField, mOrderedRules, mReasonSuffix);
         }
 
         @Override
