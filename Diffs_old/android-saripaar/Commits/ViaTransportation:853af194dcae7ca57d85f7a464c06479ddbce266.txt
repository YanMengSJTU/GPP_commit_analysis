diff --git a/.gitignore b/.gitignore
index c3412e0..4937144 100644
--- a/.gitignore
+++ b/.gitignore
@@ -28,3 +28,6 @@ libs/
 # IntelliJ projects
 .idea/
 *.iml
+
+# Maven
+release.properties
diff --git a/README.md b/README.md
index 980d7b2..3ee10f2 100644
--- a/README.md
+++ b/README.md
@@ -88,6 +88,20 @@ registerButton.setOnClickListener(new OnClickListener() {
 ```
 The `Validator.validate()` call runs the validations and returns the result via appropriate callbacks on the `ValidationListener`. You can run validations on a background `AsyncTask` by calling the `Validator.validateAsync()` method.
 
+Maven
+---------------------
+    <dependency>
+        <groupId>com.mobsandgeeks</groupId>
+        <artifactId>android-saripaar</artifactId>
+        <version>1.0.2</version>
+    </dependency>
+
+Gradle
+---------------------
+    dependencies {
+        compile 'com.mobsandgeeks:android-saripaar:1.0.2'
+    }
+
 Wiki
 ---------------------
 Please visit the [wiki] for a complete guide on Android Saripaar.
@@ -118,3 +132,7 @@ License
   [Validator]: https://github.com/ragunathjawahar/android-saripaar/blob/master/src/com/mobsandgeeks/saripaar/Validator.java
   [ValidationListener]: https://github.com/ragunathjawahar/android-saripaar/blob/master/src/com/mobsandgeeks/saripaar/Validator.java
   [wiki]: https://github.com/ragunathjawahar/android-saripaar/wiki
+
+
+[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/ragunathjawahar/android-saripaar/trend.png)](https://bitdeli.com/free "Bitdeli Badge")
+
diff --git a/pom.xml b/pom.xml
index 32ac828..0f7d2d2 100755
--- a/pom.xml
+++ b/pom.xml
@@ -1,6 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
@@ -12,7 +11,7 @@
     <groupId>com.mobsandgeeks</groupId>
     <artifactId>android-saripaar</artifactId>
     <packaging>jar</packaging>
-    <version>1.0-SNAPSHOT</version>
+    <version>1.0.3-SNAPSHOT</version>
 
     <name>Android Saripaar</name>
     <description>Rule-based UI validation library for Android</description>
@@ -41,8 +40,9 @@
     </licenses>
 
     <scm>
-        <url>https://github.com/ragunathjawahar/android-saripaar</url>
         <connection>scm:git:git@github.com:ragunathjawahar/android-saripaar.git</connection>
+        <developerConnection>scm:git:git@github.com:ragunathjawahar/android-saripaar.git</developerConnection>
+        <url>git@github.com:ragunathjawahar/android-saripaar.git</url>
     </scm>
 
     <organization>
@@ -60,6 +60,12 @@
         <java.version>1.6</java.version>
         <android.version>4.1.1.4</android.version>
         <android.platform>16</android.platform>
+        <maven.compiler.plugin>3.0</maven.compiler.plugin>
+        <android.maven.plugin>3.4.1</android.maven.plugin>
+        <maven.gpg.plugin>1.4</maven.gpg.plugin>
+        <maven.javadoc.plugin>2.9.1</maven.javadoc.plugin>
+        <maven.source.plugin>2.2.1</maven.source.plugin>
+        <maven.release.plugin>2.2.2</maven.release.plugin>
     </properties>
 
     <dependencies>
@@ -77,17 +83,16 @@
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-compiler-plugin</artifactId>
-                <version>2.5</version>
+                <version>${maven.compiler.plugin}</version>
                 <configuration>
                     <source>${java.version}</source>
                     <target>${java.version}</target>
                 </configuration>
             </plugin>
-
             <plugin>
                 <groupId>com.jayway.maven.plugins.android.generation2</groupId>
                 <artifactId>android-maven-plugin</artifactId>
-                <version>3.4.1</version>
+                <version>${android.maven.plugin}</version>
                 <extensions>true</extensions>
                 <configuration>
                     <androidManifestFile>${project.basedir}/AndroidManifest.xml</androidManifestFile>
@@ -97,21 +102,72 @@
                     </sdk>
                 </configuration>
             </plugin>
-
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-gpg-plugin</artifactId>
-                <version>1.4</version>
+                <artifactId>maven-source-plugin</artifactId>
+                <version>${maven.source.plugin}</version>
                 <executions>
                     <execution>
-                        <id>sign-artifacts</id>
+                        <id>attach-source</id>
                         <phase>verify</phase>
                         <goals>
-                            <goal>sign</goal>
+                            <goal>jar-no-fork</goal>
                         </goals>
                     </execution>
                 </executions>
             </plugin>
+            <plugin>
+                <artifactId>maven-javadoc-plugin</artifactId>
+                <version>${maven.javadoc.plugin}</version>
+                <executions>
+                    <execution>
+                        <id>javadoc-jar</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>jar</goal>
+                        </goals>
+                        <configuration>
+                            <includeDependencySources>false</includeDependencySources>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-release-plugin</artifactId>
+                <version>${maven.release.plugin}</version>
+            </plugin>
         </plugins>
     </build>
+
+    <profiles>
+        <profile>
+            <id>release-sign-artifacts</id>
+            <activation>
+                <property>
+                    <name>performRelease</name>
+                    <value>true</value>
+                </property>
+            </activation>
+            <build>
+                <plugins>
+                    <plugin>
+                        <groupId>org.apache.maven.plugins</groupId>
+                        <artifactId>maven-gpg-plugin</artifactId>
+                        <version>${maven.gpg.plugin}</version>
+                        <executions>
+                            <execution>
+                                <id>sign-artifacts</id>
+                                <phase>verify</phase>
+                                <goals>
+                                    <goal>sign</goal>
+                                </goals>
+                            </execution>
+                        </executions>
+                    </plugin>
+                </plugins>
+            </build>
+        </profile>
+    </profiles>
+
 </project>
diff --git a/src/com/mobsandgeeks/saripaar/AnnotationToRuleConverter.java b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
similarity index 85%
rename from src/com/mobsandgeeks/saripaar/AnnotationToRuleConverter.java
rename to src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
index 1e0518f..36b86d0 100644
--- a/src/com/mobsandgeeks/saripaar/AnnotationToRuleConverter.java
+++ b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
@@ -14,15 +14,11 @@
 
 package com.mobsandgeeks.saripaar;
 
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.List;
-
 import android.content.Context;
 import android.util.Log;
 import android.view.View;
 import android.widget.Checkable;
+import android.widget.Spinner;
 import android.widget.TextView;
 
 import com.mobsandgeeks.saripaar.annotation.Checked;
@@ -33,17 +29,23 @@
 import com.mobsandgeeks.saripaar.annotation.Password;
 import com.mobsandgeeks.saripaar.annotation.Regex;
 import com.mobsandgeeks.saripaar.annotation.Required;
+import com.mobsandgeeks.saripaar.annotation.Select;
 import com.mobsandgeeks.saripaar.annotation.TextRule;
 
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * Class contains {@code static} methods that return appropriate {@link Rule}s for Saripaar
  * annotations.
  *
  * @author Ragunath Jawahar <rj@mobsandgeeks.com>
  */
-class AnnotationToRuleConverter {
+class AnnotationRuleFactory {
     // Debug
-    static final String TAG = AnnotationToRuleConverter.class.getSimpleName();
+    static final String TAG = "AnnotationToRuleConverter";
  
     // Constants
     static final String WARN_TEXT = "%s - @%s can only be applied to TextView and " +
@@ -51,34 +53,55 @@
     static final String WARN_CHECKABLE = "%s - @%s can only be applied to Checkable, " +
             "its implementations and subclasses.";
 
+    static final String WARN_SPINNER = "%s - @%s can only be applied to Spinner, " +
+            "its implementations and subclasses.";
+
     public static Rule<?> getRule(Field field, View view, Annotation annotation) {
-        Class<?> annotationClass = annotation.getClass();
+        Class<?> annotationType = annotation.annotationType();
 
-        if (Required.class.isAssignableFrom(annotationClass)) {
-            return getRequiredRule(field, view, (Required) annotation);
-        } else if (Checked.class.isAssignableFrom(annotationClass)) {
+        if (Checked.class.equals(annotationType)) {
             return getCheckedRule(field, view, (Checked) annotation);
-        } else if (TextRule.class.isAssignableFrom(annotationClass)) {
+        } else if (Required.class.equals(annotationType)) {
+            return getRequiredRule(field, view, (Required) annotation);
+        } else if (TextRule.class.equals(annotationType)) {
             return getTextRule(field, view, (TextRule) annotation);
-        } else if (Regex.class.isAssignableFrom(annotationClass)) {
+        } else if (Regex.class.equals(annotationType)) {
             return getRegexRule(field, view, (Regex) annotation);
-        } else if (NumberRule.class.isAssignableFrom(annotationClass)) {
+        } else if (NumberRule.class.equals(annotationType)) {
             return getNumberRule(field, view, (NumberRule) annotation);
-        } else if (Password.class.isAssignableFrom(annotationClass)) {
+        } else if (Password.class.equals(annotationType)) {
             return getPasswordRule(field, view, (Password) annotation);
-        } else if (Email.class.isAssignableFrom(annotationClass)) {
+        } else if (Email.class.equals(annotationType)) {
             return getEmailRule(field, view, (Email) annotation);
-        } else if (IpAddress.class.isAssignableFrom(annotationClass)) {
+        } else if (IpAddress.class.equals(annotationType)) {
             return getIpAddressRule(field, view, (IpAddress) annotation);
+        } else if (Select.class.equals(annotationType)) {
+            return getSelectRule(field, view, (Select) annotation);
         }
 
         return null;
     }
 
+    private static Rule<Spinner> getSelectRule(Field field, View view, Select select) {
+        if (!Spinner.class.isAssignableFrom(view.getClass())) {
+            Log.w(TAG, String.format(WARN_SPINNER, field.getName(),
+                    Spinner.class.getSimpleName()));
+            return null;
+        }
+
+        int messageResId = select.messageResId();
+        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
+                select.message();
+
+        int unexpectedSelection = select.defaultSelection();
+
+        return Rules.spinnerNotEq(message, unexpectedSelection);
+    }
+
     public static Rule<?> getRule(Field field, View view, Annotation annotation, Object... params) {
-        Class<?> annotationClass = annotation.getClass();
+        Class<?> annotationType = annotation.annotationType();
 
-        if (ConfirmPassword.class.isAssignableFrom(annotationClass)) {
+        if (ConfirmPassword.class.equals(annotationType)) {
             TextView passwordTextView = (TextView) params[0];
             return getConfirmPasswordRule(field, view, (ConfirmPassword) annotation,
                     passwordTextView);
@@ -255,7 +278,9 @@
                 Rules.regex(message, Rules.REGEX_IP_ADDRESS, true));
     }
 
-    private static Rule<Checkable> getCheckedRule(Field field, View view, Checked checked) {
+    private static Rule<Checkable> getCheckedRule(
+            Field field, View view, Checked checked) {
+
         if (!Checkable.class.isAssignableFrom(view.getClass())) {
             Log.w(TAG, String.format(WARN_CHECKABLE, field.getName(),
                     Checked.class.getSimpleName()));
diff --git a/src/com/mobsandgeeks/saripaar/Rule.java b/src/com/mobsandgeeks/saripaar/Rule.java
index 9cc9263..5aaca3b 100644
--- a/src/com/mobsandgeeks/saripaar/Rule.java
+++ b/src/com/mobsandgeeks/saripaar/Rule.java
@@ -15,23 +15,18 @@
 package com.mobsandgeeks.saripaar;
 
 import android.view.View;
-import android.widget.Checkable;
 
 /**
  * Abstract class that allows to define validation rules for {@link View}s.
  *
  * @author Ragunath Jawahar <rj@mobsandgeeks.com>
  *
- * @param <T> Usually the {@link View} this rule is applicable for. Sometimes may be interfaces
- * such as {@link Checkable} which are indeed {@link View} components or widgets.
+ * @param <T> The {@link View} this rule is applicable for.
  */
 public abstract class Rule<T> {
 
     private String mFailureMessage;
 
-    @SuppressWarnings("unused")
-    private Rule() { /* Cannot instantiate */ }
-
     /**
      * Creates a new validation Rule.
      *
diff --git a/src/com/mobsandgeeks/saripaar/Rules.java b/src/com/mobsandgeeks/saripaar/Rules.java
index 47f61b9..3291926 100644
--- a/src/com/mobsandgeeks/saripaar/Rules.java
+++ b/src/com/mobsandgeeks/saripaar/Rules.java
@@ -14,9 +14,6 @@
 
 package com.mobsandgeeks.saripaar;
 
-import java.util.LinkedHashMap;
-import java.util.Set;
-
 import android.inputmethodservice.ExtractEditText;
 import android.text.TextUtils;
 import android.view.View;
@@ -31,6 +28,9 @@
 import android.widget.TextView;
 import android.widget.ToggleButton;
 
+import java.util.LinkedHashMap;
+import java.util.Set;
+
 /**
  * A built-in class with a collection of common rules. {@link TextView} references notable direct
  * and indirect subclasses that includes but not limited to {@link EditText},
@@ -188,7 +188,7 @@ public boolean isValid(TextView view) {
      * @param expectedString {@link String} value to be compared with the text returned by
      *          {@code getText()}. {@code null} is treated as empty {@link String}.
      *
-     * @return True if the text matches the {@code expectedString{@code  value, false otherwise.
+     * @return True if the text matches the {@code expectedString} value, false otherwise.
      */
     public static Rule<TextView> eq(final String failureMessage, final String expectedString) {
         return eq(failureMessage, expectedString, false, false);
@@ -204,7 +204,7 @@ public boolean isValid(TextView view) {
      * @param ignoreCase Specifies whether the text's case differences should be ignored.
      * @param trimInput Specifies whether to trim the text returned by {@code getText()}.
      *
-     * @return True if the text matches the {@code expectedString{@code  value, false otherwise. The
+     * @return True if the text matches the {@code expectedString} value, false otherwise. The
      *          return value is affected by {@code ignoreCase} and {@code trimInput}
      *          parameters.
      */
@@ -237,7 +237,7 @@ public boolean isValid(TextView textView) {
      * @param expectedInt {@code int} value to be compared with the text returned by
      *          {@code getText()}.
      *
-     * @return True if the input text is equal to the {@code expectedInt{@code  value.
+     * @return True if the input text is equal to the {@code expectedInt} value.
      */
     public static Rule<TextView> eq(final String failureMessage, final int expectedInt) {
         return eq(failureMessage, (long) expectedInt);
@@ -251,7 +251,7 @@ public boolean isValid(TextView textView) {
      * @param lesserInt {@code int} value to be compared with the text returned by
      *          {@code getText()}.
      *
-     * @return True if the input text is greater to the {@code expectedInt{@code  value.
+     * @return True if the input text is greater to the {@code expectedInt} value.
      */
     public static Rule<TextView> gt(final String failureMessage, final int lesserInt) {
         return gt(failureMessage, (long) lesserInt);
@@ -265,7 +265,7 @@ public boolean isValid(TextView textView) {
      * @param greaterInt {@code int} value to be compared with the text returned by
      *          {@code getText()}.
      *
-     * @return True if the input text is less than the {@code expectedInt{@code  value.
+     * @return True if the input text is less than the {@code expectedInt} value.
      */
     public static Rule<TextView> lt(final String failureMessage, final int greaterInt) {
         return lt(failureMessage, (long) greaterInt);
@@ -279,7 +279,7 @@ public boolean isValid(TextView textView) {
      * @param expectedLong {@code long} value to be compared with the text returned by
      *          {@code getText()}.
      *
-     * @return True if the input text is equal to the {@code expectedLong{@code  value.
+     * @return True if the input text is equal to the {@code expectedLong} value.
      */
     public static Rule<TextView> eq(final String failureMessage, final long expectedLong) {
         return new Rule<TextView>(failureMessage) {
@@ -306,7 +306,7 @@ public boolean isValid(TextView textView) {
      * @param lesserLong {@code long} value to be compared with the text returned by
      *          {@code getText()}.
      *
-     * @return True if the input text is greater than the {@code expectedLong{@code  value.
+     * @return True if the input text is greater than the {@code expectedLong} value.
      */
     public static Rule<TextView> gt(final String failureMessage, final long lesserLong) {
         return new Rule<TextView>(failureMessage) {
@@ -333,7 +333,7 @@ public boolean isValid(TextView textView) {
      * @param greaterLong {@code long} value to be compared with the text returned by
      *          {@code getText()}.
      *
-     * @return True if the input text is less than the {@code expectedLong{@code  value.
+     * @return True if the input text is less than the {@code expectedLong} value.
      */
     public static Rule<TextView> lt(final String failureMessage, final long greaterLong) {
         return new Rule<TextView>(failureMessage) {
@@ -360,7 +360,7 @@ public boolean isValid(TextView textView) {
      * @param expectedFloat {@code float} value to be compared with the text returned by
      *          {@code getText()}.
      *
-     * @return True if the input text is equal to the {@code expectedFloat{@code  value.
+     * @return True if the input text is equal to the {@code expectedFloat} value.
      */
     public static Rule<TextView> eq(final String failureMessage, final float expectedFloat) {
         return new Rule<TextView>(failureMessage) {
@@ -387,7 +387,7 @@ public boolean isValid(TextView view) {
      * @param lesserFloat {@code float} value to be compared with the text returned by
      *          {@code getText()}.
      *
-     * @return True if the input text is equal to the {@code expectedFloat{@code  value.
+     * @return True if the input text is equal to the {@code expectedFloat} value.
      */
     public static Rule<TextView> gt(final String failureMessage, final float lesserFloat) {
         return new Rule<TextView>(failureMessage) {
@@ -414,7 +414,7 @@ public boolean isValid(TextView view) {
      * @param greaterFloat {@code float} value to be compared with the text returned by
      *          {@code getText()}.
      *
-     * @return True if the input text is less than the {@code expectedFloat{@code  value.
+     * @return True if the input text is less than the {@code expectedFloat} value.
      */
     public static Rule<TextView> lt(final String failureMessage, final float greaterFloat) {
         return new Rule<TextView>(failureMessage) {
@@ -441,7 +441,7 @@ public boolean isValid(TextView view) {
      * @param expectedDouble {@code double} value to be compared with the text returned by
      *          {@code getText()}.
      *
-     * @return True if the input text is equal to the {@code expectedDouble{@code  value.
+     * @return True if the input text is equal to the {@code expectedDouble} value.
      */
     public static Rule<TextView> eq(final String failureMessage, final double expectedDouble) {
         return new Rule<TextView>(failureMessage) {
@@ -468,7 +468,7 @@ public boolean isValid(TextView view) {
      * @param lesserDouble {@code double} value to be compared with the text returned by
      *          {@code getText()}.
      *
-     * @return True if the input text is greater than the {@code expectedDouble{@code  value.
+     * @return True if the input text is greater than the {@code expectedDouble} value.
      */
     public static Rule<TextView> gt(final String failureMessage, final double lesserDouble) {
         return new Rule<TextView>(failureMessage) {
@@ -495,7 +495,7 @@ public boolean isValid(TextView view) {
      * @param greaterDouble {@code double} value to be compared with the text returned by
      *          {@code getText()}.
      *
-     * @return True if the input text is less than the {@code expectedDouble{@code  value.
+     * @return True if the input text is less than the {@code expectedDouble} value.
      */
     public static Rule<TextView> lt(final String failureMessage, final double greaterDouble) {
         return new Rule<TextView>(failureMessage) {
@@ -523,12 +523,13 @@ public boolean isValid(TextView view) {
      *
      * @return True if the state is same as {@code checked}.
      */
-    public static Rule<Checkable> checked(final String failureMessage, final boolean checked) {
+    public static Rule<Checkable> checked(final String failureMessage,
+            final boolean checked) {
         return new Rule<Checkable>(failureMessage) {
 
             @Override
-            public boolean isValid(Checkable checkableView) {
-                return checkableView.isChecked() == checked;
+            public boolean isValid(Checkable view) {
+                return view.isChecked() == checked;
             }
         };
     }
@@ -592,6 +593,27 @@ public boolean isValid(Spinner spinner) {
         };
     }
 
+    /**
+     * Checks if the {@link Spinner}'s item selection (obtained by calling
+     * {@code getSelectionItemPosition()}) is not equal to the specified selection.
+     *
+     * @param failureMessage The failure message for this {@link Rule}.
+     * @param selection The unexpected selection on the {@link Spinner}.
+     *
+     * @return {@code true} if the selection is not equal to the given position, 
+     *         {@code false} otherwise. 
+     */
+    public static Rule<Spinner> spinnerNotEq(final String failureMessage, final int selection) {
+
+        return new Rule<Spinner>(failureMessage) {
+
+            @Override
+            public boolean isValid(Spinner spinner) {
+                return spinner.getSelectedItemPosition() != selection;
+            }
+        };
+    }
+
     /**
      * Performs an '&&' (and) operation on the given array of {@link Rules}.
      *
diff --git a/src/com/mobsandgeeks/saripaar/Validator.java b/src/com/mobsandgeeks/saripaar/Validator.java
index 0e181d3..faadbb8 100644
--- a/src/com/mobsandgeeks/saripaar/Validator.java
+++ b/src/com/mobsandgeeks/saripaar/Validator.java
@@ -14,15 +14,6 @@
 
 package com.mobsandgeeks.saripaar;
 
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
 import android.os.AsyncTask;
 import android.util.Log;
 import android.view.View;
@@ -36,8 +27,18 @@
 import com.mobsandgeeks.saripaar.annotation.Password;
 import com.mobsandgeeks.saripaar.annotation.Regex;
 import com.mobsandgeeks.saripaar.annotation.Required;
+import com.mobsandgeeks.saripaar.annotation.Select;
 import com.mobsandgeeks.saripaar.annotation.TextRule;
 
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
 /**
  * A processor that checks all the {@link Rule}s against their {@link View}s.
  *
@@ -45,7 +46,7 @@
  */
 public class Validator {
     // Debug
-    static final String TAG = Validator.class.getSimpleName();
+    static final String TAG = "Validator";
     static final boolean DEBUG = false;
 
     private Object mController;
@@ -425,9 +426,9 @@ private ViewRulePair getViewAndRule(Field field, Annotation annotation, Object..
 
         Rule<?> rule = null;
         if (params != null && params.length > 0) {
-            rule = AnnotationToRuleConverter.getRule(field, view, annotation, params);
+            rule = AnnotationRuleFactory.getRule(field, view, annotation, params);
         } else {
-            rule = AnnotationToRuleConverter.getRule(field, view, annotation);
+            rule = AnnotationRuleFactory.getRule(field, view, annotation);
         }
 
         return rule != null ? new ViewRulePair(view, rule) : null;
@@ -455,6 +456,11 @@ private View getView(Field field) {
             Annotation[] annotations = field.getAnnotations();
             for (Annotation annotation : annotations) {
                 if (isSaripaarAnnotation(annotation)) {
+                    if (DEBUG) {
+                        Log.d(TAG, String.format("%s %s is annotated with @%s",
+                                field.getType().getSimpleName(), field.getName(),
+                                annotation.annotationType().getSimpleName()));
+                    }
                     annotationFieldPairs.add(new AnnotationFieldPair(annotation, field));
                 }
             }
@@ -521,6 +527,7 @@ private boolean isSaripaarAnnotation(Annotation annotation) {
                 annotationType.equals(Password.class) ||
                 annotationType.equals(Regex.class) ||
                 annotationType.equals(Required.class) ||
+                annotationType.equals(Select.class) ||
                 annotationType.equals(TextRule.class);
     }
 
@@ -579,6 +586,9 @@ private int getAnnotationOrder(Annotation annotation) {
             } else if (annotatedClass.equals(Required.class)) {
                 return ((Required) annotation).order();
 
+            } else if (annotatedClass.equals(Select.class)) {
+                return ((Select) annotation).order();
+
             } else if (annotatedClass.equals(TextRule.class)) {
                 return ((TextRule) annotation).order();
 
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Select.java b/src/com/mobsandgeeks/saripaar/annotation/Select.java
new file mode 100644
index 0000000..07c0bfe
--- /dev/null
+++ b/src/com/mobsandgeeks/saripaar/annotation/Select.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2013 Mobs and Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the 
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
+ * either express or implied. See the License for the specific language governing permissions and 
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.widget.Spinner;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Used on a {@link Spinner} to check if the selected item is not the default.
+ * 
+ * @author Muhammad Hewedy
+ */
+@Target(ElementType.FIELD)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Select {
+    public int order();
+    public int defaultSelection()   default 0;
+    public String message()         default "Select an item.";
+    public int messageResId()       default 0;
+}
