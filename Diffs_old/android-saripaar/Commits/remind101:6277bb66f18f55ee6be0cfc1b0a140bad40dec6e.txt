diff --git a/src/com/mobsandgeeks/saripaar/Validator.java b/src/com/mobsandgeeks/saripaar/Validator.java
index ca8c146..ad8badd 100644
--- a/src/com/mobsandgeeks/saripaar/Validator.java
+++ b/src/com/mobsandgeeks/saripaar/Validator.java
@@ -251,10 +251,10 @@ public void validateAsync() {
 
             @Override
             protected void onPostExecute(List<ViewErrorPair> pair) {
-                if (pair == null) {
-                    mValidationListener.onValidationSucceeded();
-                } else {
+                if (pair != null && pair.size() > 0 || !mAnnotationsProcessed) {
                     mValidationListener.onValidationFailed(pair);
+                } else {
+                    mValidationListener.onValidationSucceeded();
                 }
 
                 mAsyncValidationTask = null;
@@ -426,10 +426,6 @@ public void removeRulesFor(View view) {
         return list;
     }
 
-    public static boolean validateInline(String contactInfo) {
-        return true;
-    }
-
     private void createRulesFromAnnotations(List<FieldAnnotationsPair> fieldAnnotationsPairs) {
         TextView passwordTextView = null;
         int passwordViewCount = 0;
@@ -505,24 +501,6 @@ private ViewErrorKeyPair getViewErrorKeyPair(Field field, Annotation annotation)
         return null;
     }
 
-//    private ViewRulePair getViewAndRule(Field field, Annotation annotation, Object... params) {
-//        View view = getView(field);
-//        if (view == null) {
-//            Log.w(TAG, String.format("Your %s - %s is null. Please check your field assignment(s).",
-//                    field.getType().getSimpleName(), field.getName()));
-//            return null;
-//        }
-//
-//        Rule<?> rule = null;
-//        if (params != null && params.length > 0) {
-//            rule = AnnotationRuleFactory.getRule(field, view, annotation, params);
-//        } else {
-//            rule = AnnotationRuleFactory.getRule(field, view, annotation);
-//        }
-//
-//        return rule != null ? new ViewRulePair(view, rule) : null;
-//    }
-
     private View getView(Field field) {
         try {
             field.setAccessible(true);
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Regex.java b/src/com/mobsandgeeks/saripaar/annotation/Regex.java
index 9e953a3..1e8a0e9 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Regex.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Regex.java
@@ -26,7 +26,7 @@
  *
  * @author Ragunath Jawahar <rj@mobsandgeeks.com>
  */
-@Target({ElementType.FIELD, ElementType.LOCAL_VARIABLE})
+@Target({ElementType.FIELD})
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Regex {
     public int order() default 0;
