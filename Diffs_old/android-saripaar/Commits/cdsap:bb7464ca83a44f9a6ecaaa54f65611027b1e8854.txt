diff --git a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
index 36b86d0..760c33f 100644
--- a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
+++ b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
@@ -23,6 +23,7 @@
 
 import com.mobsandgeeks.saripaar.annotation.Checked;
 import com.mobsandgeeks.saripaar.annotation.ConfirmPassword;
+import com.mobsandgeeks.saripaar.annotation.ConfirmEmail;
 import com.mobsandgeeks.saripaar.annotation.Email;
 import com.mobsandgeeks.saripaar.annotation.IpAddress;
 import com.mobsandgeeks.saripaar.annotation.NumberRule;
@@ -46,7 +47,7 @@
 class AnnotationRuleFactory {
     // Debug
     static final String TAG = "AnnotationToRuleConverter";
- 
+
     // Constants
     static final String WARN_TEXT = "%s - @%s can only be applied to TextView and " +
             "its subclasses.";
@@ -107,6 +108,12 @@
                     passwordTextView);
         }
 
+        if (ConfirmEmail.class.equals(annotationType)) {
+            TextView emailTextView = (TextView) params[0];
+            return getConfirmEmailRule(field, view, (ConfirmEmail) annotation,
+                    emailTextView);
+        }
+
         return (params == null || params.length == 0) ? getRule(field, view, annotation) : null;
     }
 
@@ -264,6 +271,21 @@
                 Rules.regex(message, Rules.REGEX_EMAIL, true));
     }
 
+    private static Rule<TextView> getConfirmEmailRule(Field field, View view,
+            ConfirmEmail confirmEmail, TextView emailTextView) {
+        if (!TextView.class.isAssignableFrom(view.getClass())) {
+            Log.w(TAG, String.format(WARN_TEXT, field.getName(),
+                    ConfirmEmail.class.getSimpleName()));
+            return null;
+        }
+
+        int messageResId = confirmEmail.messageResId();
+        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
+                         confirmEmail.message();
+
+        return Rules.eq(message, emailTextView);
+    }
+
     private static Rule<View> getIpAddressRule(Field field, View view, IpAddress ipAddress) {
         if (!TextView.class.isAssignableFrom(view.getClass())) {
             Log.w(TAG, String.format(WARN_TEXT, field.getName(), IpAddress.class.getSimpleName()));
diff --git a/src/com/mobsandgeeks/saripaar/Validator.java b/src/com/mobsandgeeks/saripaar/Validator.java
index faadbb8..830231b 100644
--- a/src/com/mobsandgeeks/saripaar/Validator.java
+++ b/src/com/mobsandgeeks/saripaar/Validator.java
@@ -21,6 +21,7 @@
 
 import com.mobsandgeeks.saripaar.annotation.Checked;
 import com.mobsandgeeks.saripaar.annotation.ConfirmPassword;
+import com.mobsandgeeks.saripaar.annotation.ConfirmEmail;
 import com.mobsandgeeks.saripaar.annotation.Email;
 import com.mobsandgeeks.saripaar.annotation.IpAddress;
 import com.mobsandgeeks.saripaar.annotation.NumberRule;
@@ -372,7 +373,9 @@ private ViewRulePair validateAllRules() {
 
     private void createRulesFromAnnotations(List<AnnotationFieldPair> annotationFieldPairs) {
         TextView passwordTextView = null;
+        TextView emailTextView = null;
         TextView confirmPasswordTextView = null;
+        TextView confirmEmailTextView = null;
 
         for (AnnotationFieldPair pair : annotationFieldPairs) {
             // Password
@@ -385,6 +388,12 @@ private void createRulesFromAnnotations(List<AnnotationFieldPair> annotationFiel
                 }
             }
 
+            if (pair.annotation.annotationType().equals(Email.class)) {
+                if (emailTextView == null) {
+                    emailTextView = (TextView) getView(pair.field);
+                }
+            }
+
             // Confirm password
             if (pair.annotation.annotationType().equals(ConfirmPassword.class)) {
                 if (passwordTextView == null) {
@@ -398,11 +407,26 @@ private void createRulesFromAnnotations(List<AnnotationFieldPair> annotationFiel
                 }
             }
 
+            // Confirm email
+            if (pair.annotation.annotationType().equals(ConfirmEmail.class)) {
+                if (emailTextView == null) {
+                    throw new IllegalStateException("A @Email annotated field is required " +
+                            "before you can use @ConfirmEmail.");
+                } else if (confirmEmailTextView != null) {
+                    throw new IllegalStateException("You cannot annotate " +
+                            "two fields in the same Activity with @ConfirmEmail.");
+                } else if (confirmEmailTextView == null) {
+                    confirmEmailTextView = (TextView) getView(pair.field);
+                }
+            }
+
             // Others
             ViewRulePair viewRulePair = null;
             if (pair.annotation.annotationType().equals(ConfirmPassword.class)) {
                 viewRulePair = getViewAndRule(pair.field, pair.annotation, passwordTextView);
-            } else {
+            } else if(pair.annotation.annotationType().equals(ConfirmEmail.class)) {
+                viewRulePair = getViewAndRule(pair.field, pair.annotation, emailTextView);
+            }else {
                 viewRulePair = getViewAndRule(pair.field, pair.annotation);
             }
             if (viewRulePair != null) {
@@ -522,6 +546,7 @@ private boolean isSaripaarAnnotation(Annotation annotation) {
         return annotationType.equals(Checked.class) ||
                 annotationType.equals(ConfirmPassword.class) ||
                 annotationType.equals(Email.class) ||
+                annotationType.equals(ConfirmEmail.class) ||
                 annotationType.equals(IpAddress.class) ||
                 annotationType.equals(NumberRule.class) ||
                 annotationType.equals(Password.class) ||
@@ -571,6 +596,9 @@ private int getAnnotationOrder(Annotation annotation) {
             } else if (annotatedClass.equals(Email.class)) {
                 return ((Email) annotation).order();
 
+            } else if (annotatedClass.equals(ConfirmEmail.class)) {
+                return ((ConfirmEmail) annotation).order();
+
             } else if (annotatedClass.equals(IpAddress.class)) {
                 return ((IpAddress) annotation).order();
 
diff --git a/src/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java b/src/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java
new file mode 100644
index 0000000..15602c9
--- /dev/null
+++ b/src/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2012 Mobs and Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the 
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
+ * either express or implied. See the License for the specific language governing permissions and 
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Used along with the {@link Email} annotation. This annotation makes sure that the
+ * contents of the confirm email {@code EditText} matches the contents of the email
+ * {@code EditText}.
+ *
+ * @author IÃ±aki Villar <inaki.seri@gmail.com>
+ */
+@Target(ElementType.FIELD)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface ConfirmEmail{
+    public int order();
+    public String message()     default "Emails don't match";
+    public int messageResId()   default 0;
+}
