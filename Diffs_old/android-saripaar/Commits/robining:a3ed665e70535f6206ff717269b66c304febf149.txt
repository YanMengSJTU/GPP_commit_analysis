diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/DefaultViewValidatedAction.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/DefaultValidatedAction.java
similarity index 88%
rename from saripaar/src/main/java/com/mobsandgeeks/saripaar/DefaultViewValidatedAction.java
rename to saripaar/src/main/java/com/mobsandgeeks/saripaar/DefaultValidatedAction.java
index eed15c0..9d133ab 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/DefaultViewValidatedAction.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/DefaultValidatedAction.java
@@ -18,14 +18,14 @@
 import android.widget.TextView;
 
 /**
- * A default implementation of the {@link Validator.ViewValidatedAction}
+ * A default implementation of the {@link Validator.ValidatedAction}
  * that clears error messages on {@link android.widget.EditText} views by calling the
  * {@link TextView#setError(CharSequence)} with a {@code null} parameter.
  *
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 2.0
  */
-public class DefaultViewValidatedAction implements Validator.ViewValidatedAction {
+public class DefaultValidatedAction implements Validator.ValidatedAction {
 
     @Override
     public void onAllRulesPassed(final Object obj) {
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
index 3da71d8..c935568 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
@@ -137,7 +137,7 @@
     private boolean mOrderedFields;
     private boolean mValidateInvisibleViews;
     private SequenceComparator mSequenceComparator;
-    private ViewValidatedAction mViewValidatedAction;
+    private ValidatedAction mValidatedAction;
     private Handler mViewValidatedActionHandler;
     private ValidationListener mValidationListener;
     private AsyncValidationTask mAsyncValidationTask;
@@ -153,7 +153,7 @@ public Validator(final Context context, final Object controller) {
         mController = controller;
         mValidationMode = Mode.BURST;
         mSequenceComparator = new SequenceComparator();
-        mViewValidatedAction = new DefaultViewValidatedAction();
+        mValidatedAction = new DefaultValidatedAction();
         if (context != null) {
             mValidationContext = new ValidationContext(context, mController);
         }
@@ -259,14 +259,14 @@ public void setValidationListener(final ValidationListener validationListener) {
     }
 
     /**
-     * Set a {@link Validator.ViewValidatedAction} to the
+     * Set a {@link ValidatedAction} to the
      * {@link Validator}.
      *
-     * @param viewValidatedAction A {@link Validator.ViewValidatedAction}
+     * @param validatedAction A {@link ValidatedAction}
      *                            instance.
      */
-    public void setViewValidatedAction(final ViewValidatedAction viewValidatedAction) {
-        this.mViewValidatedAction = viewValidatedAction;
+    public void setViewValidatedAction(final ValidatedAction validatedAction) {
+        this.mValidatedAction = validatedAction;
     }
 
     /**
@@ -703,8 +703,8 @@ private ValidationReport getValidationReport(final Field targetField,
             // Callback if a view passes all rules
             boolean viewPassedAllRules = (failedRules == null || failedRules.size() == 0)
                     && !hasMoreErrors;
-            if (viewPassedAllRules && mViewValidatedAction != null) {
-                triggerViewValidatedCallback(mViewValidatedAction, Reflector.getFieldValue(mController, field));
+            if (viewPassedAllRules && mValidatedAction != null) {
+                triggerViewValidatedCallback(mValidatedAction, Reflector.getFieldValue(mController, field));
             }
         }
 
@@ -756,15 +756,15 @@ private Rule validateFieldWithRule(final Field field, final Rule rule,
         return valid ? null : rule;
     }
 
-    private void triggerViewValidatedCallback(final ViewValidatedAction viewValidatedAction, final Object obj) {
+    private void triggerViewValidatedCallback(final ValidatedAction validatedAction, final Object obj) {
         boolean isOnMainThread = Looper.myLooper() == Looper.getMainLooper();
         if (isOnMainThread) {
-            viewValidatedAction.onAllRulesPassed(obj);
+            validatedAction.onAllRulesPassed(obj);
         } else {
             runOnMainThread(new Runnable() {
                 @Override
                 public void run() {
-                    viewValidatedAction.onAllRulesPassed(obj);
+                    validatedAction.onAllRulesPassed(obj);
                 }
             });
         }
@@ -817,7 +817,7 @@ private Field getLastField() {
      * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
      * @since 2.0
      */
-    public interface ViewValidatedAction {
+    public interface ValidatedAction {
         void onAllRulesPassed(Object object);
     }
 
