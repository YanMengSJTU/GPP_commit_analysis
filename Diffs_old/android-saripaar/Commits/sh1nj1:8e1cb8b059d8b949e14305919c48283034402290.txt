diff --git a/pom.xml b/pom.xml
index 5d569af..a374556 100755
--- a/pom.xml
+++ b/pom.xml
@@ -11,7 +11,7 @@
     <groupId>com.mobsandgeeks</groupId>
     <artifactId>android-saripaar</artifactId>
     <packaging>jar</packaging>
-    <version>1.0.4-SNAPSHOT</version>
+    <version>1.0.5-SNAPSHOT</version>
 
     <name>Android Saripaar</name>
     <description>Rule-based UI validation library for Android</description>
@@ -170,4 +170,16 @@
         </profile>
     </profiles>
 
+	<distributionManagement>
+		<repository>
+			<id>company</id>
+			<name>Company Nexus repository</name>
+			<url>http://dev-blast01/nexus/content/repositories/releases/</url>
+		</repository>
+		<snapshotRepository>
+			<id>company-snapshot</id>
+			<name>Company Nexus repository for SNAPSHOT</name>
+			<url>http://dev-blast01/nexus/content/repositories/snapshots/</url>
+		</snapshotRepository>
+	</distributionManagement>
 </project>
diff --git a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
index 36b86d0..d3b9e02 100644
--- a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
+++ b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
@@ -1,19 +1,26 @@
 /*
  * Copyright (C) 2012 Mobs and Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
- * limitations under the License.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
  */
 
 package com.mobsandgeeks.saripaar;
 
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.List;
+
 import android.content.Context;
 import android.util.Log;
 import android.view.View;
@@ -32,31 +39,25 @@
 import com.mobsandgeeks.saripaar.annotation.Select;
 import com.mobsandgeeks.saripaar.annotation.TextRule;
 
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.List;
-
 /**
- * Class contains {@code static} methods that return appropriate {@link Rule}s for Saripaar
- * annotations.
+ * Class contains {@code static} methods that return appropriate {@link Rule}s
+ * for Saripaar annotations.
  *
  * @author Ragunath Jawahar <rj@mobsandgeeks.com>
  */
 class AnnotationRuleFactory {
+
     // Debug
-    static final String TAG = "AnnotationToRuleConverter";
- 
+    static final String TAG            = "AnnotationToRuleConverter";
+
     // Constants
-    static final String WARN_TEXT = "%s - @%s can only be applied to TextView and " +
-            "its subclasses.";
-    static final String WARN_CHECKABLE = "%s - @%s can only be applied to Checkable, " +
-            "its implementations and subclasses.";
+    static final String WARN_TEXT      = "%s - @%s can only be applied to TextView and " + "its subclasses.";
+    static final String WARN_CHECKABLE = "%s - @%s can only be applied to Checkable, " + "its implementations and subclasses.";
 
-    static final String WARN_SPINNER = "%s - @%s can only be applied to Spinner, " +
-            "its implementations and subclasses.";
+    static final String WARN_SPINNER   = "%s - @%s can only be applied to Spinner, " + "its implementations and subclasses.";
 
     public static Rule<?> getRule(Field field, View view, Annotation annotation) {
+
         Class<?> annotationType = annotation.annotationType();
 
         if (Checked.class.equals(annotationType)) {
@@ -83,15 +84,14 @@
     }
 
     private static Rule<Spinner> getSelectRule(Field field, View view, Select select) {
+
         if (!Spinner.class.isAssignableFrom(view.getClass())) {
-            Log.w(TAG, String.format(WARN_SPINNER, field.getName(),
-                    Spinner.class.getSimpleName()));
+            Log.w(TAG, String.format(WARN_SPINNER, field.getName(), Spinner.class.getSimpleName()));
             return null;
         }
 
         int messageResId = select.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-                select.message();
+        String message = messageResId != 0 ? view.getContext().getString(messageResId) : select.message();
 
         int unexpectedSelection = select.defaultSelection();
 
@@ -99,31 +99,32 @@
     }
 
     public static Rule<?> getRule(Field field, View view, Annotation annotation, Object... params) {
+
         Class<?> annotationType = annotation.annotationType();
 
         if (ConfirmPassword.class.equals(annotationType)) {
             TextView passwordTextView = (TextView) params[0];
-            return getConfirmPasswordRule(field, view, (ConfirmPassword) annotation,
-                    passwordTextView);
+            return getConfirmPasswordRule(field, view, (ConfirmPassword) annotation, passwordTextView);
         }
 
         return (params == null || params.length == 0) ? getRule(field, view, annotation) : null;
     }
 
     private static Rule<TextView> getRequiredRule(Field field, View view, Required required) {
+
         if (!TextView.class.isAssignableFrom(view.getClass())) {
             Log.w(TAG, String.format(WARN_TEXT, field.getName(), Required.class.getSimpleName()));
             return null;
         }
 
         int messageResId = required.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            required.message();
+        String message = messageResId != 0 ? view.getContext().getString(messageResId) : required.message();
 
         return Rules.required(message, required.trim());
     }
 
     private static Rule<View> getTextRule(Field field, View view, TextRule textRule) {
+
         if (!TextView.class.isAssignableFrom(view.getClass())) {
             Log.w(TAG, String.format(WARN_TEXT, field.getName(), TextRule.class.getSimpleName()));
             return null;
@@ -131,8 +132,8 @@
 
         List<Rule<?>> rules = new ArrayList<Rule<?>>();
         int messageResId = textRule.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            textRule.message();
+        String message = messageResId != 0 ? view.getContext().getString(messageResId) : textRule.message();
+        message = getMessageByName(view, textRule.messageResName(), message);
 
         if (textRule.minLength() > 0) {
             rules.add(Rules.minLength(null, textRule.minLength(), textRule.trim()));
@@ -148,6 +149,7 @@
     }
 
     private static Rule<TextView> getRegexRule(Field field, View view, Regex regexRule) {
+
         if (!TextView.class.isAssignableFrom(view.getClass())) {
             Log.w(TAG, String.format(WARN_TEXT, field.getName(), Regex.class.getSimpleName()));
             return null;
@@ -158,61 +160,87 @@
         String message = messageResId != 0 ? context.getString(messageResId) : regexRule.message();
 
         int patternResId = regexRule.patternResId();
-        String pattern = patternResId != 0 ? view.getContext().getString(patternResId) :
-            regexRule.pattern();
+        String pattern = patternResId != 0 ? view.getContext().getString(patternResId) : regexRule.pattern();
 
         return Rules.regex(message, pattern, regexRule.trim());
     }
 
     private static Rule<View> getNumberRule(Field field, View view, NumberRule numberRule) {
+
         if (!TextView.class.isAssignableFrom(view.getClass())) {
             Log.w(TAG, String.format(WARN_TEXT, field.getName(), NumberRule.class.getSimpleName()));
             return null;
         } else if (numberRule.type() == null) {
-            throw new IllegalArgumentException(String.format("@%s.type() cannot be null.",
-                    NumberRule.class.getSimpleName()));
+            throw new IllegalArgumentException(String.format("@%s.type() cannot be null.", NumberRule.class.getSimpleName()));
         }
 
         List<Rule<?>> rules = new ArrayList<Rule<?>>();
         int messageResId = numberRule.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            numberRule.message();
+        String message = messageResId != 0 ? view.getContext().getString(messageResId) : numberRule.message();
 
         switch (numberRule.type()) {
-        case INTEGER: case LONG:
-            Rules.regex(null, Rules.REGEX_INTEGER, true); break;
-        case FLOAT: case DOUBLE:
-            Rules.regex(null, Rules.REGEX_DECIMAL, true); break;
+            case INTEGER:
+            case LONG:
+                Rules.regex(null, Rules.REGEX_INTEGER, true);
+                break;
+            case FLOAT:
+            case DOUBLE:
+                Rules.regex(null, Rules.REGEX_DECIMAL, true);
+                break;
         }
 
         if (numberRule.lt() != Double.MIN_VALUE) {
             String ltNumber = String.valueOf(numberRule.lt());
             double number = Double.parseDouble(ltNumber);
             switch (numberRule.type()) {
-            case INTEGER:   rules.add(Rules.lt(null, ((int) number)));   break;
-            case LONG:      rules.add(Rules.lt(null, ((long) number)));  break;
-            case FLOAT:     rules.add(Rules.lt(null, Float.parseFloat(ltNumber)));   break;
-            case DOUBLE:    rules.add(Rules.lt(null, Double.parseDouble(ltNumber))); break;
+                case INTEGER:
+                    rules.add(Rules.lt(null, ((int) number)));
+                    break;
+                case LONG:
+                    rules.add(Rules.lt(null, ((long) number)));
+                    break;
+                case FLOAT:
+                    rules.add(Rules.lt(null, Float.parseFloat(ltNumber)));
+                    break;
+                case DOUBLE:
+                    rules.add(Rules.lt(null, Double.parseDouble(ltNumber)));
+                    break;
             }
         }
         if (numberRule.gt() != Double.MAX_VALUE) {
             String gtNumber = String.valueOf(numberRule.gt());
             double number = Double.parseDouble(gtNumber);
             switch (numberRule.type()) {
-            case INTEGER:   rules.add(Rules.gt(null, ((int) number)));  break;
-            case LONG:      rules.add(Rules.gt(null, ((long) number))); break;
-            case FLOAT:     rules.add(Rules.gt(null, Float.parseFloat(gtNumber)));   break;
-            case DOUBLE:    rules.add(Rules.gt(null, Double.parseDouble(gtNumber))); break;
+                case INTEGER:
+                    rules.add(Rules.gt(null, ((int) number)));
+                    break;
+                case LONG:
+                    rules.add(Rules.gt(null, ((long) number)));
+                    break;
+                case FLOAT:
+                    rules.add(Rules.gt(null, Float.parseFloat(gtNumber)));
+                    break;
+                case DOUBLE:
+                    rules.add(Rules.gt(null, Double.parseDouble(gtNumber)));
+                    break;
             }
         }
         if (numberRule.eq() != Double.MAX_VALUE) {
             String eqNumber = String.valueOf(numberRule.eq());
             double number = Double.parseDouble(eqNumber);
             switch (numberRule.type()) {
-            case INTEGER:   rules.add(Rules.eq(null, ((int) number)));  break;
-            case LONG:      rules.add(Rules.eq(null, ((long) number))); break;
-            case FLOAT:     rules.add(Rules.eq(null, Float.parseFloat(eqNumber)));   break;
-            case DOUBLE:    rules.add(Rules.eq(null, Double.parseDouble(eqNumber))); break;
+                case INTEGER:
+                    rules.add(Rules.eq(null, ((int) number)));
+                    break;
+                case LONG:
+                    rules.add(Rules.eq(null, ((long) number)));
+                    break;
+                case FLOAT:
+                    rules.add(Rules.eq(null, Float.parseFloat(eqNumber)));
+                    break;
+                case DOUBLE:
+                    rules.add(Rules.eq(null, Double.parseDouble(eqNumber)));
+                    break;
             }
         }
 
@@ -223,73 +251,82 @@
     }
 
     private static Rule<TextView> getPasswordRule(Field field, View view, Password password) {
+
         if (!TextView.class.isAssignableFrom(view.getClass())) {
             Log.w(TAG, String.format(WARN_TEXT, field.getName(), Password.class.getSimpleName()));
             return null;
         }
 
         int messageResId = password.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            password.message();
+        String message = messageResId != 0 ? view.getContext().getString(messageResId) : password.message();
+        message = getMessageByName(view, password.messageResName(), message);
 
         return Rules.required(message, false);
     }
 
-    private static Rule<TextView> getConfirmPasswordRule(Field field, View view,
-            ConfirmPassword confirmPassword, TextView passwordTextView) {
+    private static Rule<TextView> getConfirmPasswordRule(Field field, View view, ConfirmPassword confirmPassword, TextView passwordTextView) {
+
         if (!TextView.class.isAssignableFrom(view.getClass())) {
-            Log.w(TAG, String.format(WARN_TEXT, field.getName(),
-                    ConfirmPassword.class.getSimpleName()));
+            Log.w(TAG, String.format(WARN_TEXT, field.getName(), ConfirmPassword.class.getSimpleName()));
             return null;
         }
 
         int messageResId = confirmPassword.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            confirmPassword.message();
+        String message = messageResId != 0 ? view.getContext().getString(messageResId) : confirmPassword.message();
 
         return Rules.eq(message, passwordTextView);
     }
 
     private static Rule<View> getEmailRule(Field field, View view, Email email) {
+
         if (!TextView.class.isAssignableFrom(view.getClass())) {
             Log.w(TAG, String.format(WARN_TEXT, field.getName(), Regex.class.getSimpleName()));
             return null;
         }
 
         int messageResId = email.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            email.message();
+        String message = messageResId != 0 ? view.getContext().getString(messageResId) : email.message();
+        message = getMessageByName(view, email.messageResName(), message);
 
-        return Rules.or(message, Rules.eq(null, Rules.EMPTY_STRING),
-                Rules.regex(message, Rules.REGEX_EMAIL, true));
+        return Rules.or(message, Rules.eq(null, Rules.EMPTY_STRING), Rules.regex(message, Rules.REGEX_EMAIL, true));
+    }
+
+    private static String getMessageByName(View view, String messageName, String message) {
+
+        int messageResId;
+        if (message == null || "".equals(message)) {
+            Context context = view.getContext();
+            messageResId = context.getResources().getIdentifier(messageName, "string", context.getPackageName());
+            if (messageResId == 0) {
+                throw new IllegalArgumentException("Message resource can't be found by name[" + messageName + "]");
+            }
+            message = context.getString(messageResId);
+        }
+        return message;
     }
 
     private static Rule<View> getIpAddressRule(Field field, View view, IpAddress ipAddress) {
+
         if (!TextView.class.isAssignableFrom(view.getClass())) {
             Log.w(TAG, String.format(WARN_TEXT, field.getName(), IpAddress.class.getSimpleName()));
             return null;
         }
 
         int messageResId = ipAddress.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            ipAddress.message();
+        String message = messageResId != 0 ? view.getContext().getString(messageResId) : ipAddress.message();
 
-        return Rules.or(message, Rules.eq(null, Rules.EMPTY_STRING),
-                Rules.regex(message, Rules.REGEX_IP_ADDRESS, true));
+        return Rules.or(message, Rules.eq(null, Rules.EMPTY_STRING), Rules.regex(message, Rules.REGEX_IP_ADDRESS, true));
     }
 
-    private static Rule<Checkable> getCheckedRule(
-            Field field, View view, Checked checked) {
+    private static Rule<Checkable> getCheckedRule(Field field, View view, Checked checked) {
 
         if (!Checkable.class.isAssignableFrom(view.getClass())) {
-            Log.w(TAG, String.format(WARN_CHECKABLE, field.getName(),
-                    Checked.class.getSimpleName()));
+            Log.w(TAG, String.format(WARN_CHECKABLE, field.getName(), Checked.class.getSimpleName()));
             return null;
         }
 
         int messageResId = checked.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            checked.message();
+        String message = messageResId != 0 ? view.getContext().getString(messageResId) : checked.message();
 
         return Rules.checked(message, checked.checked());
     }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Checked.java b/src/com/mobsandgeeks/saripaar/annotation/Checked.java
index e15ae40..521c148 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Checked.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Checked.java
@@ -1,38 +1,47 @@
 /*
  * Copyright (C) 2012 Mobs and Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
- * limitations under the License.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
  */
 
 package com.mobsandgeeks.saripaar.annotation;
 
-import android.widget.Checkable;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import android.widget.Checkable;
+
 import com.mobsandgeeks.saripaar.Rules;
 
 /**
- * Annotation works with {@code Views} that implement the {@link Checkable} interface.
+ * Annotation works with {@code Views} that implement the {@link Checkable}
+ * interface.
  *
  * @author Ragunath Jawahar <rj@mobsandgeeks.com>
  */
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Checked {
+
     public int order();
-    public boolean checked()    default true;
-    public String message()     default Rules.EMPTY_STRING;
-    public int messageResId()   default 0;
+
+    public boolean checked() default true;
+
+    public String message() default Rules.EMPTY_STRING;
+
+    public int messageResId() default 0;
+
+    public String messageResName() default "";
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java b/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
index 407387e..094b825 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
@@ -32,4 +32,5 @@
     public int order();
     public String message()     default "Passwords don't match";
     public int messageResId()   default 0;
+    public String messageResName() default "";
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Email.java b/src/com/mobsandgeeks/saripaar/annotation/Email.java
index 675d79c..294c991 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Email.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Email.java
@@ -1,15 +1,17 @@
 /*
  * Copyright (C) 2012 Mobs and Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
- * limitations under the License.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
  */
 
 package com.mobsandgeeks.saripaar.annotation;
@@ -29,7 +31,12 @@
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Email {
+
     public int order();
-    public String message()     default Rules.EMPTY_STRING;
-    public int messageResId()   default 0;
+
+    public String message() default Rules.EMPTY_STRING;
+
+    public int messageResId() default 0;
+
+    public String messageResName() default "";
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Password.java b/src/com/mobsandgeeks/saripaar/annotation/Password.java
index f2275ad..e28e2e9 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Password.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Password.java
@@ -1,15 +1,17 @@
 /*
  * Copyright (C) 2012 Mobs and Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
- * limitations under the License.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
  */
 
 package com.mobsandgeeks.saripaar.annotation;
@@ -27,7 +29,12 @@
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Password {
+
     public int order();
-    public String message()     default "Password is required";
-    public int messageResId()   default 0;
+
+    public String message() default "Password is required";
+
+    public int messageResId() default 0;
+
+    public String messageResName() default "";
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/TextRule.java b/src/com/mobsandgeeks/saripaar/annotation/TextRule.java
index e896a98..e9317f9 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/TextRule.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/TextRule.java
@@ -1,15 +1,17 @@
 /*
  * Copyright (C) 2012 Mobs and Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
- * limitations under the License.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
  */
 
 package com.mobsandgeeks.saripaar.annotation;
@@ -22,18 +24,26 @@
 import com.mobsandgeeks.saripaar.Rules;
 
 /**
- * Specifies constraints such as min length, max length and trim on textual data contained
- * in {@code View}s.
+ * Specifies constraints such as min length, max length and trim on textual data
+ * contained in {@code View}s.
  *
  * @author Ragunath Jawahar <rj@mobsandgeeks.com>
  */
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface TextRule {
+
     public int order();
-    public int minLength()      default 0;
-    public int maxLength()      default Integer.MAX_VALUE;
-    public boolean trim()       default true;
-    public String message()     default Rules.EMPTY_STRING;
-    public int messageResId()   default 0;
+
+    public int minLength() default 0;
+
+    public int maxLength() default Integer.MAX_VALUE;
+
+    public boolean trim() default true;
+
+    public String message() default Rules.EMPTY_STRING;
+
+    public int messageResId() default 0;
+
+    public String messageResName() default "";
 }
