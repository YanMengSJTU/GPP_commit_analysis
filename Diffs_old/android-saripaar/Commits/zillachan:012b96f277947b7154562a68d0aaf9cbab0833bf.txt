diff --git a/.gitignore b/.gitignore
index 46e4a89..b8ca133 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,32 +1,7 @@
-# built application files
-*.apk
-*.ap_
-
-# files for the dex VM
-*.dex
-
-# Java class files
-*.class
-
-# generated files
-bin/
-gen/
-target/
-
-# Local configuration file (sdk path, etc)
-local.properties
-
-# Eclipse project and configuration files
-.classpath
-.project
-.settings/
-
-# Libraries
-libs/
-
-# IntelliJ projects
-.idea/
+/.idea
+/app
+.gradle
+/local.properties
+.DS_Store
+/build
 *.iml
-
-# Maven
-release.properties
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..9e4a15e
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,26 @@
+language: android
+
+jdk: oraclejdk7
+
+env:
+  matrix:
+    - ANDROID_TARGET=android-19  ANDROID_ABI=armeabi-v7a
+
+android:
+  components:
+    - build-tools-21.1.1
+
+notifications:
+  email: false
+
+before_script:
+  # Grant execution permissions to Gradle wrapper
+  - chmod +x gradlew
+
+  # Create and start emulator
+  - echo no | android create avd --force -n test -t $ANDROID_TARGET --abi $ANDROID_ABI
+  - emulator -avd test -no-skin -no-audio -no-window &
+  - adb wait-for-device
+  - adb shell input keyevent 82 &
+
+script: ./gradlew connectedAndroidTest --stacktrace --info
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
deleted file mode 100644
index 8fc9c99..0000000
--- a/AndroidManifest.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.mobsandgeeks.saripaar"
-    android:versionCode="1"
-    android:versionName="1.0">
-
-    <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="15" />
-
-    <application></application>
-
-</manifest>
diff --git a/README.md b/README.md
index 0d03dfa..fbc8efe 100644
--- a/README.md
+++ b/README.md
@@ -1,48 +1,50 @@
-Android Saripaar
-================
+Android Saripaar v2 [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Android%20Saripaar-brightgreen.svg?style=flat)](http://android-arsenal.com/details/1/526)
+===================
 ![Logo](logo.png)
 
 **சரிபார்** - sari-paar (Tamil for "to check", "verify" or "validate")
 
-Android Saripaar is a simple, yet powerful rule-based UI validation library for Android.
-It is the **SIMPLEST** validation library available for Android.
+Android Saripaar is a simple, feature-rich and powerful rule-based UI form validation library for Android.
+It is the **SIMPLEST** UI validation library available for Android.
 
 Why Android Saripaar?
 ---------------------
 
- - Declarative style validation powered by **Annotations**.
- - **Extensible**
+ - Built on top of [Apache Commons Validator], a validation framework with proven track record on the web, desktop and mobile platforms.
+ - Declarative style validation using **Annotations**.
+ - **Extensible**, now allows Custom Annotations.
  - **Synchronous** and **Asynchronous** validations, you don't have to worry about threading.
+ - Supports both BURST and IMMEDIATE modes.
  - Works with **Stock Android Widgets**, no custom view dependencies.
- - Quick to setup, just download the [jar] and include it in your `libs` project folder.
  - Isolates validation logic using rules.
- - Compatible with other annotation frameworks such as **[AndroidAnnotations]**, **[RoboGuice]**, etc.,
+ - Compatible with other annotation-based libraries and frameworks such as [ButterKnife], [AndroidAnnotations], [RoboGuice], etc.,
 
 Quick Start
 -----------
 **Step 1 - Annotate your widgets using [Saripaar Annotations]**
 ```java
-@Required(order = 1)
-@Email(order = 2)
+@NotEmpty
+@Email
 private EditText emailEditText;
 
-@Password(order = 3)
-@TextRule(order = 4, minLength = 6, message = "Enter at least 6 characters.")
+@Password(min = 6, scheme = Password.Scheme.ALPHA_NUMERIC_MIXED_CASE_SYMBOLS)
 private EditText passwordEditText;
 
-@ConfirmPassword(order = 5)
+@ConfirmPassword
 private EditText confirmPasswordEditText;
 
-@Checked(order = 6, message = "You must agree to the terms.")
+@Checked(message = "You must agree to the terms.")
 private CheckBox iAgreeCheckBox;
 ```
 
-The annotations are self-explanatory. The `order` attribute is mandatory and specifies the order in which the validations will be performed by the library.
+The annotations are self-explanatory. The `@Order` annotation is required ONLY when performing ordered validations using
+`Validator.validateTill(View)` and `Validator.validateBefore(View)` or in `IMMEDIATE` mode.
 
 **Step 2 - Instantiate a new [Validator]**
 ```java
-public void onCreate() {
-    super.onCreate();
+@Override
+public void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
     // Code…
 
     validator = new Validator(this);
@@ -55,53 +57,99 @@ You will need a `Validator` and a `ValidationListener` for receiving callbacks o
 
 **Step 3 - Implement a [ValidationListener]**
 ```java
-public class RegistrationActivity implements ValidationListener {
+public class RegistrationActivity extends Activity implements ValidationListener {
 
+    // Code…
+
+    @Override
     public void onValidationSucceeded() {
         Toast.makeText(this, "Yay! we got it right!", Toast.LENGTH_SHORT).show();
     }
 
-    public void onValidationFailed(View failedView, Rule<?> failedRule) {
-        String message = failedRule.getFailureMessage();
-
-        if (failedView instanceof EditText) {
-            failedView.requestFocus();
-            ((EditText) failedView).setError(message);
-        } else {
-            Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        for (ValidationError error : errors) {
+            View view = error.getView();
+            String message = error.getCollatedErrorMessage(this);
+
+            // Display error messages ;)
+            if (view instanceof EditText) {
+                ((EditText) view).setError(message);
+            } else {
+                Toast.makeText(this, message, Toast.LENGTH_LONG).show();
+            }
         }
     }
-
 }
 ```
  - `onValidationSucceeded()` - Called when all your views pass all validations.
- - `onValidationFailed(View, Rule<?>)` - Called when a `Rule` fails, you receive the `View` along with the `Rule` that failed.
+ - `onValidationFailed(List<ValidationError> errors)` - Called when there are validation error(s).
 
 **Step 4 - Validate**
 ```java
 registerButton.setOnClickListener(new OnClickListener() {
 
+    @Override
     public void onClick(View v) {
         validator.validate();
     }
 });
 ```
-The `Validator.validate()` call runs the validations and returns the result via appropriate callbacks on the `ValidationListener`. You can run validations on a background `AsyncTask` by calling the `Validator.validateAsync()` method.
+The `Validator.validate()` call runs the validations and returns the result via appropriate callbacks on the `ValidationListener`. You can run validations on a background `AsyncTask` by calling the `Validator.validate(true)` method.
+
+Saripaar X
+---------------------
+If you are looking for country-specific annotations, checkout the [Saripaar X] project. The extensions project is in its early stages and needs contributors. Feel free to contribute.
 
 Maven
 ---------------------
     <dependency>
         <groupId>com.mobsandgeeks</groupId>
         <artifactId>android-saripaar</artifactId>
-        <version>1.0.2</version>
+        <version>(latest version)</version>
     </dependency>
 
 Gradle
 ---------------------
     dependencies {
-        compile 'com.mobsandgeeks:android-saripaar:1.0.2'
+        compile 'com.mobsandgeeks:android-saripaar:(latest version)'
     }
 
+Snapshots
+---------------------
+In your `{project_base}/build.gradle` file, include the following.
+
+    allprojects {
+        repositories {
+            jcenter()
+            maven {
+                url "https://oss.sonatype.org/content/repositories/snapshots/"
+            }
+        }
+    }
+
+ProGuard
+---------------------
+Exclude Saripaar classes from obfuscation and minification. Add the following rules to your `proguard-rules.pro` file.
+
+    -keep class com.mobsandgeeks.saripaar.** {*;}
+    -keep @com.mobsandgeeks.saripaar.annotation.ValidateUsing class * {*;}
+
+Evolution
+---------------------
+For those interested in finding out how v2 evolved from v1, watch this (~20 second) [video].
+
+Using Saripaar?
+---------------------
+[Tweet] me with your Google Play URL and I'll add your app to the list :)
+
+Icon         | App           | Icon         | App           | Icon         | App
+------------ | ------------- | ------------ | ------------- | ------------ | -------------
+<img src="https://lh3.ggpht.com/qhpfFQFd5YuLzT5d9jUCI69dMeLlW6XewLsgZ0l06D92M0SmvsMKSMd_YY1Xc9K1GyU=w300-rw" width="48" height="48" /> | [Wikipedia] | <img src="https://lh6.ggpht.com/i_pxbaojay2K2xb2RDC2W7eOnNlpGRgILoACaEDhaKz87JSg3nEJHV3Vz3wmS3L3e4M=w300-rw" width="48" height="48" /> | [Wikipedia Beta] | <img src="https://lh3.ggpht.com/o2lhzbRnq6U1oPxyqY6LDJIc2PO_tm1_sIbX-fMLpG2Sxk94QW2gQaDw8ewam1dPQrdz=w300-rw" width="48" height="48" /> | [Mizuno Baton]
+<img src="https://lh6.ggpht.com/t-WYlpXlwhLL0unTDChiVi24b4LP0kNsJQnRwFaMHd0NGqxgQ2LupQ1Dl7M1ztj8Vg8=w300-rw" width="48" height="48" /> | [Fetch] | <img src="https://lh3.ggpht.com/J3bMDphmzsPFQeMfWR-LH70g5vSGrTVggPzXQdUafKM2KmpWS3THIcSHQaTVbCQ_hjw=w300-rw" width="48" height="48" /> | [HealtheMinder] | <img src="https://lh3.ggpht.com/EhidzByoyUY1OPVcsjOmtOcRwoxphRCy1-a_qKLYKHwsS0DuHIC9cHIDEPLVKO-oTw=w300-rw" width="48" height="48" /> | [MomMe]
+<img src="https://lh5.ggpht.com/h6T-az0ip_OqNtSh__Kc5-0ZPpT7sYxSn4kFPOjrNI7o-LN9bPbovoiYDfswL-B5XQ=w300-rw" width="48" height="48" /> | [Feelknit] | <img src="https://lh4.ggpht.com/k5zFS5VheJKt1yBHKC-wBgJTwOQ4Q_Aa2XbG6Ea_-HvP8nXjYeSnO_227j1wVno1JZY=w300-rw" width="48" height="48" /> | [StreetBarz] | <img src="https://lh3.googleusercontent.com/4fO6lwPVZ7ncBsvfVpfME9xm9Nn6ggtEffCrNDFbqZ9LXBkYxSbdALWmNxQLwkhv3p6G=w300-rw" width="48" height="48" /> | [Roast Me]
+<img src="https://lh3.googleusercontent.com/Mtr7AqEN4WGJVih1rAjvvzl4rN5gYT2EwWxpVwczZXfRmixaQJBFnm-WBr8TkhGzpOA=w300-rw" width="48" height="48" /> | [Pipe] | <img src="https://lh3.googleusercontent.com/0fEpTqHqbVJ_0z7rdsG9wks5KiiaBjyA4MScLf19HSMhy8BR3vSX6agZ0NucyPMyow=w300-rw" width="48" height="48" /> | [Snagajob] | <img src="https://lh3.googleusercontent.com/SrowFwOEDERCrVqk7SaBwifZslMoqTk5iZ9gMKOafvD1KvlyYYLxvbNJXiiUjBSsLjk=w300-rw" width="48" height="48" /> | [Tatva Moksh Lakshya]
+
 Wiki
 ---------------------
 Please visit the [wiki] for a complete guide on Android Saripaar.
@@ -109,7 +157,7 @@ Please visit the [wiki] for a complete guide on Android Saripaar.
 License
 ---------------------
 
-    Copyright 2012 Mobs and Geeks
+    Copyright 2012 - 2015 Mobs & Geeks
 
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
@@ -123,16 +171,29 @@ License
     See the License for the specific language governing permissions and
     limitations under the License.
 
-<sub>Saripaar Logo © 2013, Mobs & Geeks.<sub>
+<sub>Saripaar Logo © 2013 - 2015, Mobs &amp; Geeks.<sub>
 
   [jar]: http://search.maven.org/#search%7Cga%7C1%7Candroid%20saripaar
-  [Saripaar Annotations]: https://github.com/ragunathjawahar/android-saripaar/tree/master/src/com/mobsandgeeks/saripaar/annotation
+  [Apache Commons Validator]: http://commons.apache.org/proper/commons-validator/
+  [ButterKnife]: https://github.com/JakeWharton/butterknife
   [AndroidAnnotations]: https://github.com/excilys/androidannotations
-  [RoboGuice]: http://code.google.com/p/roboguice/
-  [Validator]: https://github.com/ragunathjawahar/android-saripaar/blob/master/src/com/mobsandgeeks/saripaar/Validator.java
-  [ValidationListener]: https://github.com/ragunathjawahar/android-saripaar/blob/master/src/com/mobsandgeeks/saripaar/Validator.java
+  [RoboGuice]: https://github.com/roboguice/roboguice/
+  [Saripaar Annotations]: https://github.com/ragunathjawahar/android-saripaar/tree/master/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation
+  [Validator]: https://github.com/ragunathjawahar/android-saripaar/blob/master/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
+  [ValidationListener]: https://github.com/ragunathjawahar/android-saripaar/blob/master/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
+  [Saripaar X]: https://github.com/ragunathjawahar/saripaar-x
+  [video]: https://youtu.be/6Os9RxVK76A?t=23
+  [Tweet]: https://twitter.com/ragunathjawahar
+  [Wikipedia]: https://play.google.com/store/apps/details?id=org.wikipedia
+  [Wikipedia Beta]: https://play.google.com/store/apps/details?id=org.wikipedia.beta
+  [Fetch]: https://play.google.com/store/apps/details?id=com.buywithfetch.android
+  [Mizuno Baton]: https://play.google.com/store/apps/details?id=com.mizuno.baton
+  [MomMe]: https://play.google.com/store/apps/details?id=org.harthosp.momme
+  [HealtheMinder]: https://play.google.com/store/apps/details?id=org.hartfordhealthcare.healtheminder
+  [Feelknit]: https://play.google.com/store/apps/details?id=com.qubittech.feelknit.app
+  [StreetBarz]: https://play.google.com/store/apps/details?id=com.diofeher.StreetBarz
+  [Roast Me]: https://play.google.com/store/apps/details?id=com.marsvard.roastcam
+  [Pipe]: https://play.google.com/store/apps/details?id=com.pipeapp.pipe
+  [Snagajob]: https://play.google.com/store/apps/details?id=com.snagajob.jobseeker
+  [Tatva Moksh Lakshya]: https://play.google.com/store/apps/details?id=siesgst.edu.in.tml16
   [wiki]: https://github.com/ragunathjawahar/android-saripaar/wiki
-
-
-[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/ragunathjawahar/android-saripaar/trend.png)](https://bitdeli.com/free "Bitdeli Badge")
-
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 0000000..08e9947
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,27 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+
+buildscript {
+    repositories {
+        mavenCentral()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:2.1.3'
+
+        // NOTE: Do not place your application dependencies here; they belong
+        // in the individual module build.gradle files
+    }
+}
+
+allprojects {
+    version = VERSION_NAME
+    group = GROUP
+
+    repositories {
+        mavenCentral()
+        maven {
+            url "https://oss.sonatype.org/content/repositories/snapshots/"
+        }
+    }
+}
+
+apply plugin: 'android-reporting'
diff --git a/config/quality.gradle b/config/quality.gradle
new file mode 100644
index 0000000..3f45d0e
--- /dev/null
+++ b/config/quality.gradle
@@ -0,0 +1,50 @@
+apply plugin: 'checkstyle'
+apply plugin: 'findbugs'
+apply plugin: 'pmd'
+
+check.dependsOn 'checkstyle', 'findbugs', 'pmd'
+
+task checkstyle(type: Checkstyle) {
+    configFile file("${project.rootDir}/config/quality/checkstyle/checkstyle.xml")
+    source 'src'
+    include '**/com/mobsandgeeks/saripaar/*.java'
+    exclude '**/gen/**'
+
+    classpath = files()
+}
+
+task findbugs(type: FindBugs) {
+    ignoreFailures = true
+    effort = "max"
+    reportLevel = "high"
+    excludeFilter = new File("${project.rootDir}/config/quality/findbugs/findbugs-filter.xml")
+    classes = files("$project.buildDir/intermediates/classes/")
+
+    source 'src'
+    include '**/com/mobsandgeeks/saripaar/*.java'
+    exclude '**/gen/**'
+
+    reports {
+        xml {
+            destination "$project.buildDir/reports/findbugs/findbugs.xml"
+            xml.withMessages true
+        }
+    }
+
+    classpath = files()
+}
+
+task pmd(type: Pmd) {
+    ruleSetFiles = files("${project.rootDir}/config/quality/pmd/pmd-ruleset.xml")
+    ignoreFailures = true
+    ruleSets = ["java-basic", "java-braces", "java-strings"]
+
+    source 'src'
+    include '**/com/mobsandgeeks/saripaar/*.java'
+    exclude '**/gen/**'
+
+    reports {
+        xml.enabled = true
+        html.enabled = true
+    }
+}
diff --git a/config/quality/checkstyle/checkstyle.xml b/config/quality/checkstyle/checkstyle.xml
new file mode 100644
index 0000000..2a54eb8
--- /dev/null
+++ b/config/quality/checkstyle/checkstyle.xml
@@ -0,0 +1,103 @@
+<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
+    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
+<!--
+    Checkstyle-Configuration: Android Checkstyle
+    Description: none
+-->
+<module name="Checker">
+
+    <property name="severity" value="warning" />
+
+    <module name="TreeWalker">
+        <property name="tabWidth" value="4" />
+        <module name="ConstantName" />
+        <module name="LocalFinalVariableName" />
+        <module name="LocalVariableName" />
+        <module name="MethodName" />
+        <module name="PackageName" />
+        <module name="ParameterName" />
+        <module name="TypeName" />
+        <module name="AvoidStarImport" />
+        <module name="IllegalImport" />
+        <module name="RedundantImport" />
+        <module name="UnusedImports" />
+        <module name="LineLength">
+            <property name="severity" value="ignore" />
+            <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit" />
+        </module>
+        <module name="MethodLength" />
+        <module name="ParameterNumber" />
+        <module name="EmptyForIteratorPad" />
+        <module name="MethodParamPad" />
+        <module name="NoWhitespaceAfter">
+            <property name="tokens" value="BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS" />
+        </module>
+        <module name="NoWhitespaceBefore" />
+        <module name="OperatorWrap" />
+        <module name="ParenPad" />
+        <module name="TypecastParenPad" />
+        <module name="WhitespaceAfter" />
+        <module name="WhitespaceAround">
+            <property name="allowEmptyMethods" value="true" />
+        </module>
+        <module name="ModifierOrder" />
+        <module name="RedundantModifier" />
+        <module name="AvoidNestedBlocks" />
+        <module name="EmptyBlock" />
+        <module name="LeftCurly" />
+        <module name="NeedBraces" />
+        <module name="RightCurly" />
+        <module name="EmptyStatement" />
+        <module name="EqualsHashCode" />
+        <!-- <module name="HiddenField"/> -->
+        <module name="IllegalInstantiation" />
+        <module name="InnerAssignment" />
+        <module name="MagicNumber" />
+        <module name="MissingSwitchDefault" />
+        <module name="RedundantThrows">
+            <property name="suppressLoadErrors" value="true" />
+        </module>
+        <module name="SimplifyBooleanExpression" />
+        <module name="SimplifyBooleanReturn" />
+        <module name="DesignForExtension">
+            <property name="severity" value="ignore" />
+            <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit" />
+        </module>
+        <module name="FinalClass" />
+        <module name="HideUtilityClassConstructor" />
+        <module name="InterfaceIsType" />
+        <module name="ArrayTypeStyle" />
+        <module name="FinalParameters">
+            <property name="severity" value="ignore" />
+            <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit" />
+        </module>
+        <module name="TodoComment">
+            <property name="severity" value="ignore" />
+            <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit" />
+        </module>
+        <module name="UpperEll" />
+        <module name="MethodLength">
+            <property name="max" value="40" />
+        </module>
+        <module name="LineLength">
+            <property name="max" value="100" />
+        </module>
+        <module name="InnerTypeLast" />
+    </module>
+    <module name="NewlineAtEndOfFile">
+        <property name="severity" value="ignore" />
+        <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit" />
+    </module>
+    <module name="Translation" />
+    <module name="FileTabCharacter">
+        <property name="severity" value="ignore" />
+        <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit" />
+    </module>
+    <module name="RegexpSingleline">
+        <property name="severity" value="ignore" />
+        <property name="format" value="\s+$" />
+        <property name="message" value="Line has trailing spaces." />
+        <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit" />
+    </module>
+
+</module>
diff --git a/config/quality/findbugs/findbugs-filter.xml b/config/quality/findbugs/findbugs-filter.xml
new file mode 100644
index 0000000..f59d04e
--- /dev/null
+++ b/config/quality/findbugs/findbugs-filter.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<FindBugsFilter>
+    <!-- http://stackoverflow.com/questions/7568579/eclipsefindbugs-exclude-filter-files-doesnt-work -->
+    <Match>
+        <Class name="~.*\.R\$.*"/>
+    </Match>
+    <Match>
+        <Class name="~.*\.Manifest\$.*"/>
+    </Match>
+    <!-- All bugs in test classes, except for JUnit-specific bugs -->
+    <Match>
+        <Class name="~.*\.*Test" />
+        <Not>
+            <Bug code="IJU" />
+        </Not>
+    </Match>
+
+    <Match>
+        <Package name="com.actionbarsherlock.internal.nineoldandroids.animation" />
+    </Match>
+
+    <Match>
+        <Package name="com.actionbarsherlock.view" />
+    </Match>
+
+    <Match>
+        <Package name="com.actionbarsherlock.internal.widget" />
+    </Match>
+
+</FindBugsFilter>
diff --git a/config/quality/pmd/pmd-ruleset.xml b/config/quality/pmd/pmd-ruleset.xml
new file mode 100644
index 0000000..66d4ce0
--- /dev/null
+++ b/config/quality/pmd/pmd-ruleset.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0"?>
+<ruleset name="Custom ruleset"
+         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
+    <description>
+        This ruleset checks my code for bad stuff
+    </description>
+</ruleset>
diff --git a/gradle-mvn-push.gradle b/gradle-mvn-push.gradle
new file mode 100644
index 0000000..9df521a
--- /dev/null
+++ b/gradle-mvn-push.gradle
@@ -0,0 +1,115 @@
+/*
+ * Copyright 2013 Chris Banes
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+apply plugin: 'maven'
+apply plugin: 'signing'
+
+def isReleaseBuild() {
+    return VERSION_NAME.contains("SNAPSHOT") == false
+}
+
+def getReleaseRepositoryUrl() {
+    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
+            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
+}
+
+def getSnapshotRepositoryUrl() {
+    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
+            : "https://oss.sonatype.org/content/repositories/snapshots/"
+}
+
+def getRepositoryUsername() {
+    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
+}
+
+def getRepositoryPassword() {
+    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
+}
+
+afterEvaluate { project ->
+    uploadArchives {
+        repositories {
+            mavenDeployer {
+                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+
+                pom.groupId = GROUP
+                pom.artifactId = POM_ARTIFACT_ID
+                pom.version = VERSION_NAME
+
+                repository(url: getReleaseRepositoryUrl()) {
+                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+                }
+                snapshotRepository(url: getSnapshotRepositoryUrl()) {
+                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+                }
+
+                pom.project {
+                    name POM_NAME
+                    packaging POM_PACKAGING
+                    description POM_DESCRIPTION
+                    url POM_URL
+
+                    scm {
+                        url POM_SCM_URL
+                        connection POM_SCM_CONNECTION
+                        developerConnection POM_SCM_DEV_CONNECTION
+                    }
+
+                    licenses {
+                        license {
+                            name POM_LICENCE_NAME
+                            url POM_LICENCE_URL
+                            distribution POM_LICENCE_DIST
+                        }
+                    }
+
+                    developers {
+                        developer {
+                            id POM_DEVELOPER_ID
+                            name POM_DEVELOPER_NAME
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    signing {
+        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
+        sign configurations.archives
+    }
+
+    task androidJavadocs(type: Javadoc) {
+        source = android.sourceSets.main.java.srcDirs
+        exclude '**/commons/**'
+        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+    }
+
+    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
+        classifier = 'javadoc'
+        from androidJavadocs.destinationDir
+    }
+
+    task androidSourcesJar(type: Jar) {
+        classifier = 'sources'
+        from android.sourceSets.main.java.sourceFiles
+    }
+
+    artifacts {
+        archives androidSourcesJar
+        archives androidJavadocsJar
+    }
+}
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
index 0000000..225112f
--- /dev/null
+++ b/gradle.properties
@@ -0,0 +1,36 @@
+# Project-wide Gradle settings.
+
+# IDE (e.g. Android Studio) users:
+# Settings specified in this file will override any Gradle settings
+# configured through the IDE.
+
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Default value: -Xmx10248m -XX:MaxPermSize=256m
+# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
+
+VERSION_NAME=2.1.0-SNAPSHOT
+GROUP=com.mobsandgeeks
+
+POM_DESCRIPTION=Rule-based UI form validation library for Android
+POM_URL=https://github.com/ragunathjawahar/android-saripaar
+POM_SCM_URL=git@github.com:ragunathjawahar/android-saripaar.git
+POM_SCM_CONNECTION=scm:git:git@github.com:ragunathjawahar/android-saripaar.git
+POM_SCM_DEV_CONNECTION=scm:git:git@github.com:ragunathjawahar/android-saripaar.git
+POM_LICENCE_NAME=The Apache Software License, Version 2.0
+POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
+POM_LICENCE_DIST=repo
+POM_DEVELOPER_ID=ragunathjawahar
+POM_DEVELOPER_NAME=Ragunath Jawahar
+
+ANDROID_BUILD_TARGET_SDK_VERSION=25
+ANDROID_BUILD_TOOLS_VERSION=25.0.0
+ANDROID_BUILD_SDK_VERSION=25
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000..8c0fb64
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000..513255c
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Sun Nov 27 14:28:16 IST 2016
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
diff --git a/gradlew b/gradlew
new file mode 100755
index 0000000..91a7e26
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 0000000..8a0b282
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/pom.xml b/pom.xml
deleted file mode 100755
index 5d569af..0000000
--- a/pom.xml
+++ /dev/null
@@ -1,173 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-
-    <parent>
-        <groupId>org.sonatype.oss</groupId>
-        <artifactId>oss-parent</artifactId>
-        <version>7</version>
-    </parent>
-
-    <groupId>com.mobsandgeeks</groupId>
-    <artifactId>android-saripaar</artifactId>
-    <packaging>jar</packaging>
-    <version>1.0.4-SNAPSHOT</version>
-
-    <name>Android Saripaar</name>
-    <description>Rule-based UI validation library for Android</description>
-    <url>https://github.com/ragunathjawahar/android-saripaar</url>
-    <inceptionYear>2012</inceptionYear>
-
-    <developers>
-        <developer>
-            <name>Ragunath Jawahar</name>
-            <email>rj@mobsandgeeks.com</email>
-            <id>ragunathjawahar</id>
-            <url>http://mobsandgeeks.com</url>
-            <timezone>+5:30</timezone>
-            <roles>
-                <role>developer</role>
-            </roles>
-        </developer>
-    </developers>
-
-    <licenses>
-        <license>
-            <name>Apache License Version 2.0</name>
-            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-            <distribution>repo</distribution>
-        </license>
-    </licenses>
-
-    <scm>
-        <connection>scm:git:git@github.com:ragunathjawahar/android-saripaar.git</connection>
-        <developerConnection>scm:git:git@github.com:ragunathjawahar/android-saripaar.git</developerConnection>
-        <url>git@github.com:ragunathjawahar/android-saripaar.git</url>
-    </scm>
-
-    <organization>
-        <name>Mobs &amp; Geeks</name>
-        <url>http://mobsandgeeks.com</url>
-    </organization>
-
-    <issueManagement>
-        <system>GitHub Issues</system>
-        <url>https://github.com/ragunathjawahar/android-saripaar/issues</url>
-    </issueManagement>
-
-    <properties>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-        <java.version>1.6</java.version>
-        <android.version>4.1.1.4</android.version>
-        <android.platform>16</android.platform>
-        <maven.compiler.plugin>3.0</maven.compiler.plugin>
-        <android.maven.plugin>3.4.1</android.maven.plugin>
-        <maven.gpg.plugin>1.4</maven.gpg.plugin>
-        <maven.javadoc.plugin>2.9.1</maven.javadoc.plugin>
-        <maven.source.plugin>2.2.1</maven.source.plugin>
-        <maven.release.plugin>2.2.2</maven.release.plugin>
-    </properties>
-
-    <dependencies>
-        <dependency>
-            <groupId>com.google.android</groupId>
-            <artifactId>android</artifactId>
-            <version>${android.version}</version>
-            <scope>provided</scope>
-        </dependency>
-    </dependencies>
-
-    <build>
-        <sourceDirectory>src</sourceDirectory>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <version>${maven.compiler.plugin}</version>
-                <configuration>
-                    <source>${java.version}</source>
-                    <target>${java.version}</target>
-                </configuration>
-            </plugin>
-            <plugin>
-                <groupId>com.jayway.maven.plugins.android.generation2</groupId>
-                <artifactId>android-maven-plugin</artifactId>
-                <version>${android.maven.plugin}</version>
-                <extensions>true</extensions>
-                <configuration>
-                    <androidManifestFile>${project.basedir}/AndroidManifest.xml</androidManifestFile>
-                    <nativeLibrariesDirectory>ignored</nativeLibrariesDirectory>
-                    <sdk>
-                        <platform>${android.platform}</platform>
-                    </sdk>
-                </configuration>
-            </plugin>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-source-plugin</artifactId>
-                <version>${maven.source.plugin}</version>
-                <executions>
-                    <execution>
-                        <id>attach-source</id>
-                        <phase>verify</phase>
-                        <goals>
-                            <goal>jar-no-fork</goal>
-                        </goals>
-                    </execution>
-                </executions>
-            </plugin>
-            <plugin>
-                <artifactId>maven-javadoc-plugin</artifactId>
-                <version>${maven.javadoc.plugin}</version>
-                <executions>
-                    <execution>
-                        <id>javadoc-jar</id>
-                        <phase>package</phase>
-                        <goals>
-                            <goal>jar</goal>
-                        </goals>
-                        <configuration>
-                            <includeDependencySources>false</includeDependencySources>
-                        </configuration>
-                    </execution>
-                </executions>
-            </plugin>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-release-plugin</artifactId>
-                <version>${maven.release.plugin}</version>
-            </plugin>
-        </plugins>
-    </build>
-
-    <profiles>
-        <profile>
-            <id>release-sign-artifacts</id>
-            <activation>
-                <property>
-                    <name>performRelease</name>
-                    <value>true</value>
-                </property>
-            </activation>
-            <build>
-                <plugins>
-                    <plugin>
-                        <groupId>org.apache.maven.plugins</groupId>
-                        <artifactId>maven-gpg-plugin</artifactId>
-                        <version>${maven.gpg.plugin}</version>
-                        <executions>
-                            <execution>
-                                <id>sign-artifacts</id>
-                                <phase>verify</phase>
-                                <goals>
-                                    <goal>sign</goal>
-                                </goals>
-                            </execution>
-                        </executions>
-                    </plugin>
-                </plugins>
-            </build>
-        </profile>
-    </profiles>
-
-</project>
diff --git a/project.properties b/project.properties
deleted file mode 100644
index 5ca3505..0000000
--- a/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-7
-android.library=true
diff --git a/saripaar-tests/.gitignore b/saripaar-tests/.gitignore
new file mode 100644
index 0000000..796b96d
--- /dev/null
+++ b/saripaar-tests/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/saripaar-tests/build.gradle b/saripaar-tests/build.gradle
new file mode 100644
index 0000000..043be5f
--- /dev/null
+++ b/saripaar-tests/build.gradle
@@ -0,0 +1,36 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
+
+    defaultConfig {
+        applicationId "com.mobsandgeeks.saripaar.tests"
+        minSdkVersion 14
+        targetSdkVersion 25
+        versionCode 1
+        versionName "1.0"
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+    lintOptions {
+        abortOnError false
+    }
+    packagingOptions {
+        exclude 'LICENSE.txt'
+    }
+}
+
+dependencies {
+    compile project(':saripaar')
+    compile 'com.wrapp.floatlabelededittext:library:0.0.5'
+    compile 'com.android.support:support-annotations:23.1.1'
+
+    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
+    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
+}
diff --git a/saripaar-tests/proguard-rules.pro b/saripaar-tests/proguard-rules.pro
new file mode 100644
index 0000000..eb07fae
--- /dev/null
+++ b/saripaar-tests/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in C:\Program Files (x86)\Android\android-studio\sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordNoPasswordTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordNoPasswordTest.java
new file mode 100644
index 0000000..d830e58
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordNoPasswordTest.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.ConfirmPasswordNoPasswordActivity;
+
+public class ConfirmPasswordNoPasswordTest
+        extends ActivityInstrumentationTestCase2<ConfirmPasswordNoPasswordActivity> {
+
+    private TextView mResultTextView;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    public void testOnlyConfirmPassword_crash() {
+        String password = "there_lies_MY-S3creT";
+        EspressoHelper.type(R.id.confirmPasswordEditText, password);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_CRASH, mResultTextView);
+    }
+
+    public ConfirmPasswordNoPasswordTest() {
+        super(ConfirmPasswordNoPasswordActivity.class);
+    }
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordSeveralPasswordsTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordSeveralPasswordsTest.java
new file mode 100644
index 0000000..4e103a9
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordSeveralPasswordsTest.java
@@ -0,0 +1,46 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.ConfirmPasswordSeveralPasswordsActivity;
+
+public class ConfirmPasswordSeveralPasswordsTest
+        extends ActivityInstrumentationTestCase2<ConfirmPasswordSeveralPasswordsActivity> {
+
+    private TextView mResultTextView;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    public void testSeveralPasswordAnnotations_crash() {
+        String password = "there_lies_MY-S3creT";
+        EspressoHelper.type(R.id.passwordEditText, password);
+        EspressoHelper.type(R.id.anotherPasswordEditText, password);
+        EspressoHelper.type(R.id.confirmPasswordEditText, password);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_CRASH, mResultTextView);
+    }
+
+    public ConfirmPasswordSeveralPasswordsTest() {
+        super(ConfirmPasswordSeveralPasswordsActivity.class);
+    }
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordWithPasswordTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordWithPasswordTest.java
new file mode 100644
index 0000000..31102d5
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ConfirmPasswordWithPasswordTest.java
@@ -0,0 +1,52 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.ConfirmPasswordWithPasswordActivity;
+
+public class ConfirmPasswordWithPasswordTest
+        extends ActivityInstrumentationTestCase2<ConfirmPasswordWithPasswordActivity> {
+
+    private TextView mResultTextView;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    public void testValidPasswordAndConfirmPassword_success() {
+        String password = "there_lies_MY-S3creT";
+        EspressoHelper.type(R.id.passwordEditText, password);
+        EspressoHelper.type(R.id.confirmPasswordEditText, password);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+    public void testPasswordMismatch_failure() {
+        EspressoHelper.type(R.id.passwordEditText, "password_one");
+        EspressoHelper.type(R.id.confirmPasswordEditText, "password_1");
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.FIELD_CONFIRM_PASSWORD, mResultTextView);
+    }
+
+    public ConfirmPasswordWithPasswordTest() {
+        super(ConfirmPasswordWithPasswordActivity.class);
+    }
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/Constants.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/Constants.java
new file mode 100644
index 0000000..59251bf
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/Constants.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+public interface Constants {
+    // Fields
+    String FIELD_NAME = "NAME";
+    String FIELD_ADDRESS = "ADDRESS";
+    String FIELD_EMAIL = "EMAIL";
+    String FIELD_PHONE = "PHONE";
+    String FIELD_ZIP_CODE = "ZIP_CODE";
+    String FIELD_AIRTEL_NUMBER = "AIRTEL_NUMBER";
+    String FIELD_MAX = "MAX";
+    String FIELD_CONFIRM_PASSWORD = "CONFIRM_PASSWORD";
+
+    // Values
+    String NAME = "Android";
+    String ADDRESS = "1600 Amphitheatre Parkway";
+    String EMAIL = "droid@android.com";
+    String PHONE = "1234567890";
+    String ZIP_CODE = "635001";
+    String AIRTEL_NUMBER = "9998888888";
+
+    // State
+    String STATE_SUCCESS = "SUCCESS";
+    String STATE_FAILURE = "FAILURE";
+    String STATE_CRASH = "CRASH";
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomAnnotationTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomAnnotationTest.java
new file mode 100644
index 0000000..0e07754
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomAnnotationTest.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.CustomAnnotationActivity;
+
+public class CustomAnnotationTest
+        extends ActivityInstrumentationTestCase2<CustomAnnotationActivity> {
+
+    private TextView mResultTextView;
+
+    public CustomAnnotationTest() {
+        super(CustomAnnotationActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    // Using 'testX' prefix, because of static variables in Validator > Registry.
+    public void test0UnregisteredAnnotationWithNoOtherRules_crash() {
+        EspressoHelper.type(R.id.zipCodeEditText, Constants.ZIP_CODE);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_CRASH, mResultTextView);
+    }
+
+    public void test1ValidZipCode_success() {
+        EspressoHelper.clickView(R.id.registerAnnotationRadioButton);
+        EspressoHelper.type(R.id.zipCodeEditText, Constants.ZIP_CODE);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+    public void test2InvalidZipCode_failure() {
+        EspressoHelper.clickView(R.id.registerAnnotationRadioButton);
+        EspressoHelper.type(R.id.zipCodeEditText, "600018");
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.FIELD_ZIP_CODE, mResultTextView);
+    }
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomAnnotationWithAdapterTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomAnnotationWithAdapterTest.java
new file mode 100644
index 0000000..1b1d6aa
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomAnnotationWithAdapterTest.java
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.SeekBar;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.CustomAnnotationWithAdapterActivity;
+
+public class CustomAnnotationWithAdapterTest
+        extends ActivityInstrumentationTestCase2<CustomAnnotationWithAdapterActivity> {
+
+    private SeekBar mSeekBar;
+    private TextView mResultTextView;
+
+    public CustomAnnotationWithAdapterTest() {
+        super(CustomAnnotationWithAdapterActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        CustomAnnotationWithAdapterActivity activity = getActivity();
+
+        mSeekBar = (SeekBar) activity.findViewById(R.id.seekBar);
+        mResultTextView = (TextView) activity.findViewById(R.id.resultTextView);
+    }
+
+    public void test0NoRegisteredAdapter_crash() {
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_CRASH, mResultTextView);
+    }
+
+    public void test1RegisteredAdapterSeekBarAboveRange_failure() {
+        mSeekBar.setProgress(60);
+        EspressoHelper.clickView(R.id.registerAnnotationRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_FAILURE, mResultTextView);
+    }
+
+    public void test2RegisteredAdapterSeekBarAboveRange_success() {
+        mSeekBar.setProgress(25);
+        EspressoHelper.clickView(R.id.registerAnnotationRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomMultipleViewDataAdaptersTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomMultipleViewDataAdaptersTest.java
new file mode 100644
index 0000000..475cd7e
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomMultipleViewDataAdaptersTest.java
@@ -0,0 +1,68 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.CustomMultipleViewDataAdaptersActivity;
+
+public class CustomMultipleViewDataAdaptersTest
+        extends ActivityInstrumentationTestCase2<CustomMultipleViewDataAdaptersActivity> {
+
+    private TextView mResultTextView;
+
+    public CustomMultipleViewDataAdaptersTest() {
+        super(CustomMultipleViewDataAdaptersActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    public void test0InvalidEmailNoEmailAdapterInvalidMaxNoMaxAdapter_crash() {
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_CRASH, mResultTextView);
+    }
+
+    public void test1InvalidEmailWithEmailAdapterInvalidMaxNoMaxAdapter_crash() {
+        EspressoHelper.clickView(R.id.registerEmailAdapterRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_CRASH, mResultTextView);
+    }
+
+    public void test2InvalidEmailWithEmailAdapterInvalidMaxWithMaxAdapter_failure() {
+        EspressoHelper.clickView(R.id.registerEmailAdapterRadioButton);
+        EspressoHelper.clickView(R.id.registerMaxAdapterRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+
+        String result = String.format("%s %s", Constants.FIELD_EMAIL, Constants.FIELD_MAX);
+        EspressoHelper.checkForText(result, mResultTextView);
+    }
+
+    public void test3ValidFieldsWithAdapters_success() {
+        EspressoHelper.type(R.id.emailEditText, Constants.EMAIL);
+        EspressoHelper.clickView(R.id.registerEmailAdapterRadioButton);
+
+        EspressoHelper.type(R.id.maxEditText, "1947");
+        EspressoHelper.clickView(R.id.registerMaxAdapterRadioButton);
+
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomViewDataAdapterTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomViewDataAdapterTest.java
new file mode 100644
index 0000000..db88d0b
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/CustomViewDataAdapterTest.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.CustomViewDataAdapterActivity;
+
+public class CustomViewDataAdapterTest
+        extends ActivityInstrumentationTestCase2<CustomViewDataAdapterActivity> {
+
+    private TextView mResultTextView;
+
+    public CustomViewDataAdapterTest() {
+        super(CustomViewDataAdapterActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    public void testNoDataAdapter_crash() {
+        EspressoHelper.type(R.id.booleanEditText, "true");
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_CRASH, mResultTextView);
+    }
+
+    public void testRegisterAdapter_success() {
+        EspressoHelper.type(R.id.booleanEditText, "true");
+        EspressoHelper.clickView(R.id.registerAdapterRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/EspressoHelper.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/EspressoHelper.java
new file mode 100644
index 0000000..1fac850
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/EspressoHelper.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.support.test.espresso.Espresso;
+import android.widget.TextView;
+
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.action.ViewActions.typeText;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static junit.framework.Assert.assertEquals;
+
+public class EspressoHelper {
+
+    public static void type(final int viewId, final String text) {
+        ensureViewIsVisible();
+        onView(withId(viewId)).perform(typeText(text));
+    }
+
+    public static void clickView(final int viewId) {
+        ensureViewIsVisible();
+        onView(withId(viewId)).perform(click());
+    }
+
+    public static void checkForText(final String expectedText, final TextView resultTextView) {
+        String actualText = resultTextView.getText().toString().trim();
+        assertEquals(expectedText, actualText);
+    }
+
+    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     *  Private Methods
+     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     */
+    private static void ensureViewIsVisible() {
+        Espresso.closeSoftKeyboard();
+        try {
+            Thread.sleep(300);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+    }
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OptionalTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OptionalTest.java
new file mode 100644
index 0000000..16443f6
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OptionalTest.java
@@ -0,0 +1,38 @@
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.OptionalActivity;
+
+/**
+ * @author Ragunath Jawahar
+ */
+public class OptionalTest extends ActivityInstrumentationTestCase2<OptionalActivity> {
+
+    // UI References
+    private TextView mResultTextView;
+
+    public OptionalTest() {
+        super(OptionalActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        // Get references
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    public void testOptionalAll_success() {
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+    public void testOptionalInvalidEmail_failure() {
+        EspressoHelper.type(R.id.emailEditText, "Joey");
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.FIELD_EMAIL, mResultTextView);
+    }
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedSequencingTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedSequencingTest.java
new file mode 100644
index 0000000..0a511f5
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedSequencingTest.java
@@ -0,0 +1,74 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.OrderedSequencingActivity;
+
+public class OrderedSequencingTest
+        extends ActivityInstrumentationTestCase2<OrderedSequencingActivity> {
+
+    // UI References
+    private TextView mResultTextView;
+
+    public OrderedSequencingTest() {
+        super(OrderedSequencingActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        // Get references
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    /* ============================================================================
+     *  BURST Mode
+     * ============================================================================
+     */
+    public void testBurst_failure() {
+        EspressoHelper.clickView(R.id.burstRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+
+        String[] messages = {
+                "Message 1", "Message 2", "Message 3",
+                "Message 4", "Message 5", "Message 6",
+                "Message 7"
+        };
+        StringBuilder messageBuilder = new StringBuilder();
+        for (String message : messages) {
+            messageBuilder.append(message).append('\n');
+        }
+
+        String expectedErrorMessages = messageBuilder.toString().trim();
+        EspressoHelper.checkForText(expectedErrorMessages, mResultTextView);
+    }
+
+    /* ============================================================================
+     *  IMMEDIATE Mode
+     * ============================================================================
+     */
+    public void testImmediate_failure() {
+        EspressoHelper.clickView(R.id.immediateRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+
+        String expectedErrorMessages = "Message 1\nMessage 2";
+        EspressoHelper.checkForText(expectedErrorMessages, mResultTextView);
+    }
+
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateBeforeTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateBeforeTest.java
new file mode 100644
index 0000000..de1e57a
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateBeforeTest.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.OrderedValidateBeforeActivity;
+
+public class OrderedValidateBeforeTest
+        extends ActivityInstrumentationTestCase2<OrderedValidateBeforeActivity> {
+
+    // UI References
+    private TextView mResultTextView;
+
+    public OrderedValidateBeforeTest() {
+        super(OrderedValidateBeforeActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    /* ============================================================================
+     *  BURST Mode
+     * ============================================================================
+     */
+    public void testBurstValidateBeforeFirstField_nothing() {
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.checkForText("", mResultTextView);
+    }
+
+    public void testBurstValidateBeforeLastField_failure() {
+        EspressoHelper.type(R.id.phoneEditText, Constants.PHONE);
+        String text = String.format("%s %s %s",
+                Constants.FIELD_NAME, Constants.FIELD_ADDRESS, Constants.FIELD_EMAIL);
+        EspressoHelper.checkForText(text, mResultTextView);
+    }
+
+    /* ============================================================================
+     *  IMMEDIATE Mode
+     * ============================================================================
+     */
+    public void testImmediateValidateBeforeFirstField_nothing() {
+        EspressoHelper.clickView(R.id.immediateRadioButton);
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.checkForText("", mResultTextView);
+    }
+
+    public void testImmediateValidateBeforeLastField_failure() {
+        EspressoHelper.clickView(R.id.immediateRadioButton);
+        EspressoHelper.type(R.id.phoneEditText, Constants.PHONE);
+        EspressoHelper.checkForText(Constants.FIELD_NAME, mResultTextView);
+    }
+
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateTest.java
new file mode 100644
index 0000000..b3e96de
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateTest.java
@@ -0,0 +1,158 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.OrderedValidateActivity;
+
+public class OrderedValidateTest
+        extends ActivityInstrumentationTestCase2<OrderedValidateActivity> {
+
+    // UI References
+    private TextView mResultTextView;
+
+    public OrderedValidateTest() {
+        super(OrderedValidateActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        // Get references
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    /* ============================================================================
+     *  BURST Mode
+     * ============================================================================
+     */
+    public void testBurstValidName_failure() {
+        String resultText = String.format("%s %s %s %s",
+            Constants.FIELD_ADDRESS, Constants.FIELD_EMAIL,
+            Constants.FIELD_PHONE, Constants.FIELD_PHONE);
+        testField(R.id.nameEditText, Constants.NAME, resultText);
+    }
+
+    public void testBurstValidAddress_failure() {
+        String resultText = String.format("%s %s %s %s",
+            Constants.FIELD_NAME, Constants.FIELD_EMAIL,
+            Constants.FIELD_PHONE, Constants.FIELD_PHONE);
+        testField(R.id.addressEditText, Constants.ADDRESS, resultText);
+    }
+
+    public void testBurstValidEmail_failure() {
+        String resultText = String.format("%s %s %s %s",
+            Constants.FIELD_NAME, Constants.FIELD_ADDRESS,
+            Constants.FIELD_PHONE, Constants.FIELD_PHONE);
+        testField(R.id.emailEditText, Constants.EMAIL, resultText);
+    }
+
+    public void testBurstValidPhone_failure() {
+        String resultText = String.format("%s %s %s",
+            Constants.FIELD_NAME, Constants.FIELD_ADDRESS, Constants.FIELD_EMAIL);
+        testField(R.id.phoneEditText, Constants.PHONE, resultText);
+    }
+
+    public void testBurstValidNamePhone_failure() {
+        String resultText = String.format("%s %s", Constants.FIELD_ADDRESS, Constants.FIELD_EMAIL);
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.type(R.id.phoneEditText, Constants.PHONE);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(resultText, mResultTextView);
+    }
+
+    public void testBurstInvalidAll_failure() {
+        EspressoHelper.clickView(R.id.saripaarButton);
+        String text = String.format("%s %s %s %s %s",
+            Constants.FIELD_NAME, Constants.FIELD_ADDRESS, Constants.FIELD_EMAIL,
+            Constants.FIELD_PHONE, Constants.FIELD_PHONE);
+        EspressoHelper.checkForText(text, mResultTextView);
+    }
+
+    public void testBurstValidAll_success() {
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.type(R.id.addressEditText, Constants.ADDRESS);
+        EspressoHelper.type(R.id.emailEditText, Constants.EMAIL);
+        EspressoHelper.type(R.id.phoneEditText, Constants.PHONE);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+    /* ============================================================================
+     *  IMMEDIATE Mode
+     * ============================================================================
+     */
+    public void testImmediateInvalidAll_failure() {
+        EspressoHelper.clickView(R.id.immediateRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.FIELD_NAME, mResultTextView);
+    }
+
+    public void testImmediateValidName_failure() {
+        EspressoHelper.clickView(R.id.immediateRadioButton);
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.FIELD_ADDRESS, mResultTextView);
+    }
+
+    public void testImmediateValidNameAddress_failure() {
+        EspressoHelper.clickView(R.id.immediateRadioButton);
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.type(R.id.addressEditText, Constants.ADDRESS);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.FIELD_EMAIL, mResultTextView);
+    }
+
+    public void testImmediateValidNameAddressEmail_failure() {
+        EspressoHelper.clickView(R.id.immediateRadioButton);
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.type(R.id.addressEditText, Constants.ADDRESS);
+        EspressoHelper.type(R.id.emailEditText, Constants.EMAIL);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        String text = String.format("%s %s", Constants.FIELD_PHONE, Constants.FIELD_PHONE);
+        EspressoHelper.checkForText(text, mResultTextView);
+    }
+
+    public void testImmediateValidAll_success() {
+        EspressoHelper.clickView(R.id.immediateRadioButton);
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.type(R.id.addressEditText, Constants.ADDRESS);
+        EspressoHelper.type(R.id.emailEditText, Constants.EMAIL);
+        EspressoHelper.type(R.id.phoneEditText, Constants.PHONE);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+    public void testImmediateValidAddressEmail_failure() {
+        EspressoHelper.clickView(R.id.immediateRadioButton);
+        EspressoHelper.type(R.id.addressEditText, Constants.ADDRESS);
+        EspressoHelper.type(R.id.emailEditText, Constants.EMAIL);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.FIELD_NAME, mResultTextView);
+    }
+
+    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     *  Private Methods
+     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     */
+    private void testField(int viewId, String textToType, String text) {
+        EspressoHelper.type(viewId, textToType);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(text, mResultTextView);
+    }
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateTillTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateTillTest.java
new file mode 100644
index 0000000..b742341
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/OrderedValidateTillTest.java
@@ -0,0 +1,87 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.OrderedValidateTillActivity;
+
+public class OrderedValidateTillTest
+        extends ActivityInstrumentationTestCase2<OrderedValidateTillActivity> {
+
+    // UI References
+    private TextView mResultTextView;
+
+    public OrderedValidateTillTest() {
+        super(OrderedValidateTillActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    /* ============================================================================
+     *  BURST Mode
+     * ============================================================================
+     */
+    public void testBurstValidateTill() {
+        EspressoHelper.type(R.id.emailEditText, Constants.EMAIL);
+        String text = String.format("%s %s %s",
+                Constants.FIELD_NAME, Constants.FIELD_ADDRESS, Constants.FIELD_EMAIL);
+        EspressoHelper.checkForText(text, mResultTextView);
+
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.checkForText(Constants.FIELD_NAME, mResultTextView);
+
+        EspressoHelper.type(R.id.phoneEditText, Constants.PHONE);
+        text = String.format("%s %s %s",
+                Constants.FIELD_ADDRESS, Constants.FIELD_PHONE, Constants.FIELD_PHONE);
+        EspressoHelper.checkForText(text, mResultTextView);
+
+        EspressoHelper.type(R.id.addressEditText, Constants.ADDRESS);
+        EspressoHelper.checkForText(Constants.FIELD_ADDRESS, mResultTextView);
+
+        EspressoHelper.clickView(R.id.nameEditText);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+    /* ============================================================================
+     *  IMMEDIATE Mode
+     * ============================================================================
+     */
+    public void testImmediateValidateTill() {
+        EspressoHelper.clickView(R.id.immediateRadioButton);
+
+        EspressoHelper.type(R.id.emailEditText, Constants.EMAIL);
+        EspressoHelper.checkForText(Constants.FIELD_NAME, mResultTextView);
+
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.checkForText(Constants.FIELD_NAME, mResultTextView);
+
+        EspressoHelper.type(R.id.phoneEditText, Constants.PHONE);
+        EspressoHelper.checkForText(Constants.FIELD_ADDRESS, mResultTextView);
+
+        EspressoHelper.type(R.id.addressEditText, Constants.ADDRESS);
+        EspressoHelper.checkForText(Constants.FIELD_ADDRESS, mResultTextView);
+
+        EspressoHelper.clickView(R.id.nameEditText);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyControllerTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyControllerTest.java
new file mode 100644
index 0000000..b52bb34
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyControllerTest.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.QuickRuleOnlyControllerActivity;
+
+public class QuickRuleOnlyControllerTest
+        extends ActivityInstrumentationTestCase2<QuickRuleOnlyControllerActivity> {
+
+    private TextView mResultTextView;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    public void testInputNot1_failure() {
+        EspressoHelper.type(R.id.oneOnlyEditText, "100");
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_FAILURE, mResultTextView);
+    }
+
+    public void testInput1_success() {
+        EspressoHelper.type(R.id.oneOnlyEditText, "1");
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+    public QuickRuleOnlyControllerTest() {
+        super(QuickRuleOnlyControllerActivity.class);
+    }
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyTest.java
new file mode 100644
index 0000000..1d22286
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyTest.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.QuickRuleOnlyActivity;
+
+public class QuickRuleOnlyTest
+        extends ActivityInstrumentationTestCase2<QuickRuleOnlyActivity> {
+
+    private TextView mResultTextView;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    public void testInputNot1_failure() {
+        EspressoHelper.type(R.id.oneOnlyEditText, "100");
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_FAILURE, mResultTextView);
+    }
+
+    public void testInput1_success() {
+        EspressoHelper.type(R.id.oneOnlyEditText, "1");
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+    public QuickRuleOnlyTest() {
+        super(QuickRuleOnlyActivity.class);
+    }
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOrderedTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOrderedTest.java
new file mode 100644
index 0000000..071d974
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOrderedTest.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.QuickRuleOrderedActivity;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ */
+public class QuickRuleOrderedTest
+        extends ActivityInstrumentationTestCase2<QuickRuleOrderedActivity> {
+
+    private TextView mResultTextView;
+
+    public QuickRuleOrderedTest() {
+        super(QuickRuleOrderedActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    public void testInvalidZipCodeInvalidEmailNoQuickRule_failure() {
+        EspressoHelper.clickView(R.id.saripaarButton);
+        String result = String.format("%s %s", Constants.FIELD_ZIP_CODE, Constants.FIELD_EMAIL);
+        EspressoHelper.checkForText(result, mResultTextView);
+    }
+
+    public void testAllInvalidWithQuickRule_failure() {
+        EspressoHelper.clickView(R.id.useQuickRuleRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        String result = String.format("%s %s %s",
+            Constants.FIELD_ZIP_CODE, Constants.FIELD_AIRTEL_NUMBER, Constants.FIELD_EMAIL);
+        EspressoHelper.checkForText(result, mResultTextView);
+    }
+
+    public void testAllValidButQuickRule_failure() {
+        EspressoHelper.type(R.id.zipCodeEditText, Constants.ZIP_CODE);
+        EspressoHelper.type(R.id.emailEditText, Constants.EMAIL);
+        EspressoHelper.clickView(R.id.useQuickRuleRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.FIELD_AIRTEL_NUMBER, mResultTextView);
+    }
+
+    public void testAllValidWithQuickRule_success() {
+        EspressoHelper.type(R.id.zipCodeEditText, Constants.ZIP_CODE);
+        EspressoHelper.type(R.id.airtelNumberEditText, Constants.AIRTEL_NUMBER);
+        EspressoHelper.type(R.id.emailEditText, Constants.EMAIL);
+        EspressoHelper.clickView(R.id.useQuickRuleRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleUnorderedInOrderedTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleUnorderedInOrderedTest.java
new file mode 100644
index 0000000..bb5e168
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleUnorderedInOrderedTest.java
@@ -0,0 +1,52 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.QuickRuleUnorderedInOrderedActivity;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ */
+public class QuickRuleUnorderedInOrderedTest
+        extends ActivityInstrumentationTestCase2<QuickRuleUnorderedInOrderedActivity> {
+
+    private TextView mResultTextView;
+
+    public QuickRuleUnorderedInOrderedTest() {
+        super(QuickRuleUnorderedInOrderedActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    public void testInvalidZipCodeInvalidAirtelNumberNoEvenNumberQuickRule_failure() {
+        EspressoHelper.clickView(R.id.saripaarButton);
+        String result = String.format("%s %s",
+            Constants.FIELD_ZIP_CODE, Constants.FIELD_AIRTEL_NUMBER);
+        EspressoHelper.checkForText(result, mResultTextView);
+    }
+
+    public void testInvalidZipCodeInvalidAirtelNumberWithEvenNumberQuickRule_crash() {
+        EspressoHelper.clickView(R.id.useQuickRuleRadioButton);
+        EspressoHelper.checkForText(Constants.STATE_CRASH, mResultTextView);
+    }
+
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleUnorderedTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleUnorderedTest.java
new file mode 100644
index 0000000..7a2fa48
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleUnorderedTest.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.QuickRuleUnorderedActivity;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ */
+public class QuickRuleUnorderedTest
+        extends ActivityInstrumentationTestCase2<QuickRuleUnorderedActivity> {
+
+    private TextView mResultTextView;
+
+    public QuickRuleUnorderedTest() {
+        super(QuickRuleUnorderedActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    public void testInvalidZipCodeNoQuickRule_failure() {
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.FIELD_ZIP_CODE, mResultTextView);
+    }
+
+    public void testValidZipCodeNoQuickRule_success() {
+        EspressoHelper.type(R.id.zipCodeEditText, Constants.ZIP_CODE);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+    public void testValidZipCodeAirtelNumberQuickRule_failure() {
+        EspressoHelper.type(R.id.zipCodeEditText, Constants.ZIP_CODE);
+        EspressoHelper.clickView(R.id.useQuickRuleRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.FIELD_AIRTEL_NUMBER, mResultTextView);
+    }
+
+    public void testInvalidZipCodeInvalidAirtelNumberQuickRule_failure() {
+        EspressoHelper.clickView(R.id.useQuickRuleRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+
+        String result = String.format("%s %s",
+            Constants.FIELD_ZIP_CODE, Constants.FIELD_AIRTEL_NUMBER);
+        EspressoHelper.checkForText(result, mResultTextView);
+    }
+
+    public void testZipCodeAirtelNumberQuickRuleValid_success() {
+        EspressoHelper.clickView(R.id.useQuickRuleRadioButton);
+        EspressoHelper.type(R.id.zipCodeEditText, Constants.ZIP_CODE);
+        EspressoHelper.type(R.id.airtelNumberEditText, Constants.AIRTEL_NUMBER);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/RemoveRulesTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/RemoveRulesTest.java
new file mode 100644
index 0000000..dc4a0ff
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/RemoveRulesTest.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.RemoveRulesActivity;
+
+public class RemoveRulesTest
+        extends ActivityInstrumentationTestCase2<RemoveRulesActivity> {
+
+    private TextView mResultTextView;
+
+    public RemoveRulesTest() {
+        super(RemoveRulesActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    public void testAddQuickRulesValidEmail_success() {
+        EspressoHelper.type(R.id.emailEditText, "rj@mobsandgeeks.com");
+        EspressoHelper.clickView(R.id.addQuickRuleRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+    public void testAddQuickRulesInvalidEmail_failure() {
+        EspressoHelper.type(R.id.emailEditText, Constants.EMAIL);
+        EspressoHelper.clickView(R.id.addQuickRuleRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.FIELD_EMAIL, mResultTextView);
+    }
+
+    public void testRemoveRulesWithoutQuickRule_crash() {
+        EspressoHelper.type(R.id.emailEditText, Constants.EMAIL);
+        EspressoHelper.clickView(R.id.removeRulesRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_CRASH, mResultTextView);
+    }
+
+    public void testRemoveRulesWithQuickRule_crash() {
+        EspressoHelper.type(R.id.emailEditText, Constants.EMAIL);
+        EspressoHelper.clickView(R.id.addQuickRuleRadioButton);
+        EspressoHelper.clickView(R.id.removeRulesRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_CRASH, mResultTextView);
+    }
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedSequencingTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedSequencingTest.java
new file mode 100644
index 0000000..b6ebe76
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedSequencingTest.java
@@ -0,0 +1,72 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.UnorderedSequencingActivity;
+
+public class UnorderedSequencingTest
+        extends ActivityInstrumentationTestCase2<UnorderedSequencingActivity> {
+
+    // UI References
+    private TextView mResultTextView;
+
+    public UnorderedSequencingTest() {
+        super(UnorderedSequencingActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        // Get references
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    /* ============================================================================
+     *  BURST Mode
+     * ============================================================================
+     */
+    public void testBurst_failure() {
+        EspressoHelper.clickView(R.id.burstRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+
+        String[] messages = {
+                "Message 3", "Message 4", "Message 5",
+                "Message 6", "Message 1", "Message 2",
+                "Message 7"
+        };
+        StringBuilder messageBuilder = new StringBuilder();
+        for (String message : messages) {
+            messageBuilder.append(message).append('\n');
+        }
+
+        String expectedErrorMessages = messageBuilder.toString().trim();
+        EspressoHelper.checkForText(expectedErrorMessages, mResultTextView);
+    }
+
+    /* ============================================================================
+     *  IMMEDIATE Mode
+     * ============================================================================
+     */
+    public void testImmediate_crash() {
+        EspressoHelper.clickView(R.id.immediateRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_CRASH, mResultTextView);
+    }
+
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateBeforeTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateBeforeTest.java
new file mode 100644
index 0000000..951ecae
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateBeforeTest.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.UnorderedValidateBeforeActivity;
+
+public class UnorderedValidateBeforeTest
+        extends ActivityInstrumentationTestCase2<UnorderedValidateBeforeActivity> {
+
+    // UI References
+    private TextView mResultTextView;
+
+    public UnorderedValidateBeforeTest() {
+        super(UnorderedValidateBeforeActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    /* ============================================================================
+     *  BURST Mode
+     * ============================================================================
+     */
+    public void testBurstValidateBeforeFirstField_crash() {
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.checkForText(Constants.STATE_CRASH, mResultTextView);
+    }
+
+    /* ============================================================================
+     *  IMMEDIATE Mode
+     * ============================================================================
+     */
+    public void testImmediateValidateTill_crash() {
+        EspressoHelper.clickView(R.id.immediateRadioButton);
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.checkForText(Constants.STATE_CRASH, mResultTextView);
+    }
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateTest.java
new file mode 100644
index 0000000..15c8219
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateTest.java
@@ -0,0 +1,130 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.UnorderedValidateActivity;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+public class UnorderedValidateTest
+        extends ActivityInstrumentationTestCase2<UnorderedValidateActivity> {
+
+    // UI References
+    private TextView mResultTextView;
+
+    public UnorderedValidateTest() {
+        super(UnorderedValidateActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        // Get references
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    /* ============================================================================
+     *  BURST Mode
+     * ============================================================================
+     */
+    public void testBurstValidName() {
+        testField(R.id.nameEditText, Constants.NAME, Constants.FIELD_NAME);
+    }
+
+    public void testBurstValidAddress() {
+        testField(R.id.addressEditText, Constants.ADDRESS, Constants.FIELD_ADDRESS);
+    }
+
+    public void testBurstValidEmail() {
+        testField(R.id.emailEditText, Constants.EMAIL, Constants.FIELD_EMAIL);
+    }
+
+    public void testBurstValidPhone() {
+        testField(R.id.phoneEditText, Constants.PHONE, Constants.FIELD_PHONE);
+    }
+
+    public void testBurstValidAll() {
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.type(R.id.addressEditText, Constants.ADDRESS);
+        EspressoHelper.type(R.id.emailEditText, Constants.EMAIL);
+        EspressoHelper.type(R.id.phoneEditText, Constants.PHONE);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        checkForText(Arrays.asList(Constants.STATE_SUCCESS));
+    }
+
+    public void testBurstInvalidAll() {
+        EspressoHelper.clickView(R.id.saripaarButton);
+        checkForText(Arrays.asList(Constants.FIELD_NAME, Constants.FIELD_ADDRESS,
+                Constants.FIELD_EMAIL, Constants.FIELD_PHONE));
+    }
+
+    /* ============================================================================
+     *  IMMEDIATE Mode
+     * ============================================================================
+     */
+    public void testImmediateValidAllCrash() {
+        EspressoHelper.clickView(R.id.immediateRadioButton);
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.type(R.id.addressEditText, Constants.ADDRESS);
+        EspressoHelper.type(R.id.emailEditText, Constants.EMAIL);
+        EspressoHelper.type(R.id.phoneEditText, Constants.PHONE);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        checkForText(Arrays.asList(Constants.STATE_CRASH));
+    }
+
+    public void testImmediateInvalidAllCrash() {
+        EspressoHelper.clickView(R.id.immediateRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        checkForText(Arrays.asList(Constants.STATE_CRASH));
+    }
+
+    public void testImmediateValidOneCrash() {
+        EspressoHelper.clickView(R.id.immediateRadioButton);
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        checkForText(Arrays.asList(Constants.STATE_CRASH));
+    }
+
+    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     *  Private Methods
+     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     */
+    private void testField(int viewId, String textToType, String fieldToIgnore) {
+        List<String> words = new ArrayList<String>(
+            Arrays.asList(Constants.FIELD_NAME, Constants.FIELD_ADDRESS,
+                Constants.FIELD_EMAIL, Constants.FIELD_PHONE));
+        boolean removed = words.remove(fieldToIgnore);
+        if (!removed) {
+            String message = String.format("Words does not contain '%s'.", fieldToIgnore);
+            throw new IllegalArgumentException(message);
+        }
+        EspressoHelper.type(viewId, textToType);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        checkForText(words);
+    }
+
+    private void checkForText(List<String> words) {
+        String resultText = mResultTextView.getText().toString();
+        for (String word : words) {
+            assertTrue(resultText.contains(word));
+        }
+    }
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateTillTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateTillTest.java
new file mode 100644
index 0000000..b107abb
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/UnorderedValidateTillTest.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.UnorderedValidateTillActivity;
+
+public class UnorderedValidateTillTest
+        extends ActivityInstrumentationTestCase2<UnorderedValidateTillActivity> {
+
+    // UI References
+    private TextView mResultTextView;
+
+    public UnorderedValidateTillTest() {
+        super(UnorderedValidateTillActivity.class);
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    /* ============================================================================
+     *  BURST Mode
+     * ============================================================================
+     */
+    public void testBurstValidateTill_crash() {
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.checkForText(Constants.STATE_CRASH, mResultTextView);
+    }
+
+    /* ============================================================================
+     *  IMMEDIATE Mode
+     * ============================================================================
+     */
+    public void testImmediateValidateTill_crash() {
+        EspressoHelper.clickView(R.id.immediateRadioButton);
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.checkForText(Constants.STATE_CRASH, mResultTextView);
+    }
+
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ValidateHiddenViewsTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ValidateHiddenViewsTest.java
new file mode 100644
index 0000000..4d32360
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/ValidateHiddenViewsTest.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2016 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.ValidateInvisibleViewsActivity;
+
+public class ValidateHiddenViewsTest
+        extends ActivityInstrumentationTestCase2<ValidateInvisibleViewsActivity> {
+
+    // UI References
+    private TextView mResultTextView;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    public void testSkipHidden_success() {
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.clickView(R.id.hideRadioButton);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+    public void testValidateHidden_failure() {
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.clickView(R.id.hideRadioButton);
+        EspressoHelper.clickView(R.id.validateHiddenViewsCheckBox);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_FAILURE, mResultTextView);
+    }
+
+    public void testValidateValidHiddenField_success() {
+        EspressoHelper.type(R.id.nameEditText, Constants.NAME);
+        EspressoHelper.type(R.id.emailEditText, Constants.EMAIL);
+        EspressoHelper.clickView(R.id.hideRadioButton);
+        EspressoHelper.clickView(R.id.validateHiddenViewsCheckBox);
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+    public ValidateHiddenViewsTest() {
+        super(ValidateInvisibleViewsActivity.class);
+    }
+
+}
diff --git a/saripaar-tests/src/main/AndroidManifest.xml b/saripaar-tests/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..2ab240e
--- /dev/null
+++ b/saripaar-tests/src/main/AndroidManifest.xml
@@ -0,0 +1,82 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.mobsandgeeks.saripaar.tests" >
+
+    <application
+        android:label="@string/app_name"
+        android:icon="@drawable/ic_launcher"
+        android:theme="@style/AppTheme"
+        android:allowBackup="false">
+        <activity
+            android:name=".ui.OrderedValidateActivity"
+            android:label="@string/title_activity_address" >
+        </activity>
+        <activity
+            android:name=".ui.UnorderedValidateActivity"
+            android:label="@string/title_activity_address" />
+        <activity
+            android:name=".ui.OrderedValidateTillActivity"
+            android:label="@string/title_activity_address" />
+        <activity
+            android:name=".ui.UnorderedValidateTillActivity"
+            android:label="@string/title_activity_address" />
+        <activity
+            android:name=".ui.OrderedValidateBeforeActivity"
+            android:label="@string/title_activity_address" />
+        <activity
+            android:name=".ui.UnorderedValidateBeforeActivity"
+            android:label="@string/title_activity_address" />
+        <activity
+            android:name=".ui.CustomViewDataAdapterActivity"
+            android:label="@string/title_activity_custom_view" />
+        <activity
+            android:name=".ui.CustomMultipleViewDataAdaptersActivity"
+            android:label="@string/title_activity_custom_view" />
+        <activity
+            android:name=".ui.CustomAnnotationActivity"
+            android:label="@string/title_activity_custom_annotation" />
+        <activity
+            android:name=".ui.CustomAnnotationWithAdapterActivity"
+            android:label="@string/title_activity_custom_annotation_with_adapter" />
+        <activity
+            android:name=".ui.QuickRuleUnorderedActivity"
+            android:label="@string/title_activity_quick_rule" />
+        <activity
+            android:name=".ui.QuickRuleOrderedActivity"
+            android:label="@string/title_activity_quick_rule" />
+        <activity
+            android:name=".ui.QuickRuleUnorderedInOrderedActivity"
+            android:label="@string/title_activity_quick_rule" />
+        <activity
+            android:name=".ui.QuickRuleOnlyActivity"
+            android:label="@string/title_activity_quick_rule_only" />
+        <activity
+            android:name=".ui.QuickRuleOnlyControllerActivity"
+            android:label="@string/title_activity_quick_rule_only_controller" />
+        <activity
+            android:name=".ui.ConfirmPasswordWithPasswordActivity"
+            android:label="@string/title_activity_confirm_password" />
+        <activity
+            android:name=".ui.ConfirmPasswordNoPasswordActivity"
+            android:label="@string/title_activity_confirm_password" />
+        <activity
+            android:name=".ui.ConfirmPasswordSeveralPasswordsActivity"
+            android:label="@string/title_activity_confirm_password" />
+        <activity
+            android:name=".ui.OrderedSequencingActivity"
+            android:label="@string/title_activity_address" />
+        <activity
+            android:name=".ui.UnorderedSequencingActivity"
+            android:label="@string/title_activity_address" />
+        <activity
+            android:name=".ui.RemoveRulesActivity"
+            android:label="@string/title_activity_remove_rules" />
+        <activity
+            android:name=".ui.ValidateInvisibleViewsActivity"
+            android:label="@string/title_activity_validate_invisible_views" />
+        <activity
+            android:name=".ui.OptionalActivity"
+            android:label="@string/title_activity_optional" />
+    </application>
+
+</manifest>
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/Common.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/Common.java
new file mode 100644
index 0000000..163ef13
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/Common.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.util.Log;
+import android.view.View;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.Rule;
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.wrapp.floatlabelededittext.FloatLabeledEditText;
+
+import java.util.List;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ */
+public final class Common {
+
+    public static String getFailedFieldNames(List<ValidationError> errors) {
+        StringBuilder stringBuilder = new StringBuilder();
+        for (ValidationError error : errors) {
+            View view = error.getView();
+            TextView textView = view instanceof FloatLabeledEditText
+                ? ((FloatLabeledEditText) view).getEditText()
+                : (TextView) view;
+            List<Rule> failedRules = error.getFailedRules();
+            String fieldName = textView.getHint().toString().toUpperCase().replaceAll(" ", "_");
+
+            for (Rule failedRule : failedRules) {
+                stringBuilder.append(fieldName).append(" ");
+                Log.i(Rule.class.getSimpleName(), failedRule.toString());
+            }
+        }
+        return stringBuilder.toString();
+    }
+
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordNoPasswordActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordNoPasswordActivity.java
new file mode 100644
index 0000000..db6a416
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordNoPasswordActivity.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.ConfirmPassword;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+
+public class ConfirmPasswordNoPasswordActivity extends Activity
+            implements View.OnClickListener, Validator.ValidationListener {
+
+    @ConfirmPassword
+    private EditText mConfirmPasswordEditText;
+
+    private TextView mResultTextView;
+    private Button mSaripaarButton;
+
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_confirm_password_no_password);
+
+        mConfirmPasswordEditText = (EditText) findViewById(R.id.confirmPasswordEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Event listeners
+        mSaripaarButton.setOnClickListener(this);
+
+        // Validation
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+    }
+
+    @Override
+    public void onClick(View v) {
+        try {
+            mValidator.validate();
+        } catch (IllegalStateException e) {
+            mResultTextView.setText(R.string.crash);
+        }
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordSeveralPasswordsActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordSeveralPasswordsActivity.java
new file mode 100644
index 0000000..f2f1c4e
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordSeveralPasswordsActivity.java
@@ -0,0 +1,87 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.ConfirmPassword;
+import com.mobsandgeeks.saripaar.annotation.Password;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+
+public class ConfirmPasswordSeveralPasswordsActivity extends Activity
+            implements View.OnClickListener, Validator.ValidationListener {
+
+    @Password
+    private EditText mPasswordEditText;
+
+    @Password
+    private EditText mAnotherPasswordEditText;
+
+    @ConfirmPassword
+    private EditText mConfirmPasswordEditText;
+
+    private TextView mResultTextView;
+    private Button mSaripaarButton;
+
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_confirm_password_sevaral_passwords);
+
+        mPasswordEditText = (EditText) findViewById(R.id.passwordEditText);
+        mAnotherPasswordEditText = (EditText) findViewById(R.id.anotherPasswordEditText);
+        mConfirmPasswordEditText = (EditText) findViewById(R.id.confirmPasswordEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Event listeners
+        mSaripaarButton.setOnClickListener(this);
+
+        // Validation
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+    }
+
+    @Override
+    public void onClick(View v) {
+        try {
+            mValidator.validate();
+        } catch (IllegalStateException e) {
+            mResultTextView.setText(R.string.crash);
+        }
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordWithPasswordActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordWithPasswordActivity.java
new file mode 100644
index 0000000..3c62e2a
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordWithPasswordActivity.java
@@ -0,0 +1,79 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.ConfirmPassword;
+import com.mobsandgeeks.saripaar.annotation.Password;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+
+public class ConfirmPasswordWithPasswordActivity extends Activity
+            implements View.OnClickListener, Validator.ValidationListener {
+
+    @Password
+    private EditText mPasswordEditText;
+
+    @ConfirmPassword
+    private EditText mConfirmPasswordEditText;
+
+    private TextView mResultTextView;
+    private Button mSaripaarButton;
+
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_confirm_password_with_password);
+
+        mPasswordEditText = (EditText) findViewById(R.id.passwordEditText);
+        mConfirmPasswordEditText = (EditText) findViewById(R.id.confirmPasswordEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Event listeners
+        mSaripaarButton.setOnClickListener(this);
+
+        // Validation
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+    }
+
+    @Override
+    public void onClick(View v) {
+        mValidator.validate();
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomAnnotationActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomAnnotationActivity.java
new file mode 100644
index 0000000..a478852
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomAnnotationActivity.java
@@ -0,0 +1,98 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.CompoundButton;
+import android.widget.EditText;
+import android.widget.RadioButton;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.tests.R;
+import com.mobsandgeeks.saripaar.tests.ui.validation.HometownZipCode;
+
+import java.util.List;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ */
+public class CustomAnnotationActivity extends Activity
+        implements Validator.ValidationListener, View.OnClickListener {
+
+    @HometownZipCode
+    private EditText mZipCodeEditText;
+
+    private TextView mResultTextView;
+    private Button mSaripaarButton;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_custom_annotation);
+
+        // UI References
+        mZipCodeEditText = (EditText) findViewById(R.id.zipCodeEditText);
+        RadioButton registerAnnotationRadioButton =
+            (RadioButton) findViewById(R.id.registerAnnotationRadioButton);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event listeners
+        registerAnnotationRadioButton.setOnCheckedChangeListener(
+            new CompoundButton.OnCheckedChangeListener() {
+
+                @Override
+                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                    if (isChecked) {
+                        Validator.registerAnnotation(HometownZipCode.class);
+                    }
+                }
+            }
+        );
+        mSaripaarButton.setOnClickListener(this);
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+
+    @Override
+    public void onClick(View v) {
+        try {
+            mValidator.validate();
+        } catch (IllegalStateException e) {
+            mResultTextView.setText("CRASH");
+        }
+    }
+
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomAnnotationWithAdapterActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomAnnotationWithAdapterActivity.java
new file mode 100644
index 0000000..df2fdea
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomAnnotationWithAdapterActivity.java
@@ -0,0 +1,116 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.CompoundButton;
+import android.widget.RadioButton;
+import android.widget.SeekBar;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.adapter.ViewDataAdapter;
+import com.mobsandgeeks.saripaar.exception.ConversionException;
+import com.mobsandgeeks.saripaar.tests.R;
+import com.mobsandgeeks.saripaar.tests.ui.validation.To;
+
+import java.lang.annotation.Annotation;
+import java.util.List;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ */
+public class CustomAnnotationWithAdapterActivity extends Activity
+        implements Validator.ValidationListener, View.OnClickListener,
+            CompoundButton.OnCheckedChangeListener {
+
+    @To(50)
+    private SeekBar mSeekBar;
+
+    private RadioButton mRegisterAnnotationRadioButton;
+    private TextView mResultTextView;
+    private Button mSaripaarButton;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_custom_annotation_with_adapter);
+
+        // UI References
+        mSeekBar = (SeekBar) findViewById(R.id.seekBar);
+        mRegisterAnnotationRadioButton =
+            (RadioButton) findViewById(R.id.registerAnnotationRadioButton);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Validation
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event listeners
+        mRegisterAnnotationRadioButton.setOnCheckedChangeListener(this);
+        mSaripaarButton.setOnClickListener(this);
+    }
+
+    @Override
+    public void onClick(final View v) {
+        try {
+            mValidator.validate();
+        } catch (IllegalStateException e) {
+            mResultTextView.setText("CRASH");
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(final List<ValidationError> errors) {
+        mResultTextView.setText(R.string.failure);
+    }
+
+    @Override
+    public void onCheckedChanged(final CompoundButton buttonView, final boolean isChecked) {
+        if (isChecked) {
+            SeekBarIntegerAdapter seekBarIntegerAdapter = new SeekBarIntegerAdapter();
+            Validator.registerAnnotation(To.class, SeekBar.class, seekBarIntegerAdapter);
+        }
+    }
+
+    static class SeekBarIntegerAdapter implements ViewDataAdapter<SeekBar, Integer> {
+
+        @Override
+        public Integer getData(final SeekBar seekBar) throws ConversionException {
+            return seekBar.getProgress();
+        }
+
+        @Override
+        public <T extends Annotation> boolean containsOptionalValue(
+                final SeekBar view, final T ruleAnnotation) {
+            return false;
+        }
+    }
+
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomMultipleViewDataAdaptersActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomMultipleViewDataAdaptersActivity.java
new file mode 100644
index 0000000..4521b8a
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomMultipleViewDataAdaptersActivity.java
@@ -0,0 +1,163 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.CompoundButton;
+import android.widget.RadioButton;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.adapter.ViewDataAdapter;
+import com.mobsandgeeks.saripaar.annotation.Email;
+import com.mobsandgeeks.saripaar.annotation.Max;
+import com.mobsandgeeks.saripaar.annotation.Order;
+import com.mobsandgeeks.saripaar.exception.ConversionException;
+import com.mobsandgeeks.saripaar.tests.R;
+import com.wrapp.floatlabelededittext.FloatLabeledEditText;
+
+import java.lang.annotation.Annotation;
+import java.util.List;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ */
+public class CustomMultipleViewDataAdaptersActivity extends Activity
+        implements Validator.ValidationListener, View.OnClickListener,
+                CompoundButton.OnCheckedChangeListener {
+
+    @Email
+    @Order(1)
+    private FloatLabeledEditText mEmailFloatLabeledEditText;
+
+    @Max(2000)
+    @Order(2)
+    private FloatLabeledEditText mMaxFloatLabeledEditText;
+
+    private TextView mResultTextView;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_custom_multiple_view_data_adapters);
+
+        // UI References
+        mEmailFloatLabeledEditText =
+            (FloatLabeledEditText) findViewById(R.id.emailFloatLabelEditText);
+        mMaxFloatLabeledEditText = (FloatLabeledEditText) findViewById(R.id.maxFloatLabelEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        RadioButton registerEmailAdapterRadioButton =
+            (RadioButton) findViewById(R.id.registerEmailAdapterRadioButton);
+        RadioButton registerMaxAdapterRadioButton =
+            (RadioButton) findViewById(R.id.registerMaxAdapterRadioButton);
+        Button saripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event listeners
+        saripaarButton.setOnClickListener(this);
+        registerEmailAdapterRadioButton.setOnCheckedChangeListener(this);
+        registerMaxAdapterRadioButton.setOnCheckedChangeListener(this);
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+
+    @Override
+    public void onClick(View v) {
+        try {
+            mValidator.validate();
+        } catch (UnsupportedOperationException e) {
+            e.printStackTrace();
+            mResultTextView.setText("CRASH");
+        }
+    }
+
+    @Override
+    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+        if (isChecked) {
+            ViewDataAdapter viewDataAdapter;
+
+            switch (buttonView.getId()) {
+                case R.id.registerEmailAdapterRadioButton:
+                    viewDataAdapter = new FletStringAdapter();
+                    break;
+
+                case R.id.registerMaxAdapterRadioButton:
+                    viewDataAdapter = new FletIntegerAdapter();
+                    break;
+
+                default:
+                    throw new RuntimeException("This should never happen.");
+            }
+            mValidator.registerAdapter(FloatLabeledEditText.class, viewDataAdapter);
+        }
+    }
+
+    static class FletStringAdapter implements ViewDataAdapter<FloatLabeledEditText, String> {
+
+        @Override
+        public String getData(FloatLabeledEditText flet) throws ConversionException {
+            return flet.getEditText().getText().toString();
+        }
+
+        @Override
+        public <T extends Annotation> boolean containsOptionalValue(
+                final FloatLabeledEditText editText, final T ruleAnnotation) {
+            return false;
+        }
+    }
+
+    static class FletIntegerAdapter implements ViewDataAdapter<FloatLabeledEditText, Integer> {
+
+        @Override
+        public Integer getData(FloatLabeledEditText editText) throws ConversionException {
+            String numberText = editText.getEditText().getText().toString().trim();
+            int number;
+            try {
+                number = Integer.parseInt(numberText);
+            } catch (NumberFormatException e) {
+                String message = String.format(
+                    "Unable to convert %s to Integer.", numberText);
+                throw new ConversionException(message);
+            }
+
+            return number;
+        }
+
+        @Override
+        public <T extends Annotation> boolean containsOptionalValue(
+                final FloatLabeledEditText editText, final T ruleAnnotation) {
+            return false;
+        }
+    }
+
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomViewDataAdapterActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomViewDataAdapterActivity.java
new file mode 100644
index 0000000..2d973b4
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomViewDataAdapterActivity.java
@@ -0,0 +1,114 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.CompoundButton;
+import android.widget.RadioButton;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.adapter.ViewDataAdapter;
+import com.mobsandgeeks.saripaar.annotation.AssertTrue;
+import com.mobsandgeeks.saripaar.exception.ConversionException;
+import com.mobsandgeeks.saripaar.tests.R;
+import com.wrapp.floatlabelededittext.FloatLabeledEditText;
+
+import java.lang.annotation.Annotation;
+import java.util.List;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ */
+public class CustomViewDataAdapterActivity extends Activity
+        implements Validator.ValidationListener, View.OnClickListener,
+                CompoundButton.OnCheckedChangeListener {
+
+    @AssertTrue
+    private FloatLabeledEditText mBooleanFloatLabeledEditText;
+
+    private RadioButton mRegisterAdapterRadioButton;
+    private TextView mResultTextView;
+    private Button mSaripaarButton;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_custom_view_data_adapter);
+
+        // UI References
+        mBooleanFloatLabeledEditText =
+            (FloatLabeledEditText) findViewById(R.id.booleanFloatLabelEditText);
+        mRegisterAdapterRadioButton = (RadioButton) findViewById(R.id.registerAdapterRadioButton);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event listeners
+        mSaripaarButton.setOnClickListener(this);
+        mRegisterAdapterRadioButton.setOnCheckedChangeListener(this);
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+
+    @Override
+    public void onClick(View v) {
+        try {
+            mValidator.validate();
+        } catch (UnsupportedOperationException e) {
+            mResultTextView.setText("CRASH");
+        }
+    }
+
+    @Override
+    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+        if (isChecked) {
+            mValidator.registerAdapter(FloatLabeledEditText.class,
+                new ViewDataAdapter<FloatLabeledEditText, Boolean>() {
+
+                    @Override
+                    public Boolean getData(FloatLabeledEditText flet) throws ConversionException {
+                        String booleanText = flet.getEditText().getText().toString().trim();
+                        return Boolean.parseBoolean(booleanText);
+                    }
+
+                    @Override
+                    public <T extends Annotation> boolean containsOptionalValue(
+                            final FloatLabeledEditText editText, final T ruleAnnotation) {
+                        return false;
+                    }
+                }
+            );
+        }
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OptionalActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OptionalActivity.java
new file mode 100644
index 0000000..1b9fad3
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OptionalActivity.java
@@ -0,0 +1,67 @@
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.Checked;
+import com.mobsandgeeks.saripaar.annotation.Email;
+import com.mobsandgeeks.saripaar.annotation.Optional;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ */
+public class OptionalActivity extends Activity
+        implements Validator.ValidationListener, View.OnClickListener {
+
+    // Fields
+    @Optional @Email EditText mEmailEditText;
+    @Optional @Checked CheckBox mEmailUpdatesEditText;
+
+    // Attributes
+    private Validator mValidator;
+    private TextView mResultTextView;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_optional);
+
+        // UI References
+        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
+        mEmailUpdatesEditText = (CheckBox) findViewById(R.id.emailUpdatesCheckBox);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        Button saripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event listeners
+        saripaarButton.setOnClickListener(this);
+    }
+
+    @Override
+    public void onClick(View v) {
+        mValidator.validate();
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedSequencingActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedSequencingActivity.java
new file mode 100644
index 0000000..d1bbd7f
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedSequencingActivity.java
@@ -0,0 +1,123 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.RadioGroup;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.Email;
+import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+import com.mobsandgeeks.saripaar.annotation.Order;
+import com.mobsandgeeks.saripaar.annotation.Length;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+/**
+ * This {@link android.app.Activity} is used for testing the
+ * {@link com.mobsandgeeks.saripaar.Validator#validate()} method on 'ordered' fields.
+ */
+public class OrderedSequencingActivity extends Activity
+        implements Validator.ValidationListener, RadioGroup.OnCheckedChangeListener {
+
+    // Fields
+    @NotEmpty(sequence = 1, message = "Message 1")
+    @Length(sequence = 2, min = 3, message = "Message 2")
+    @Order(1)
+    private EditText mNameEditText;
+
+    @NotEmpty(sequence = 1, message = "Message 3")
+    @Length(sequence = 2, min = 10, message = "Message 4")
+    @Order(2)
+    private EditText mAddressEditText;
+
+    @NotEmpty(sequence = 1, message = "Message 5")
+    @Email(sequence = 2, message = "Message 6")
+    @Order(3)
+    private EditText mEmailEditText;
+
+    @NotEmpty(sequence = 1, message = "Message 7")
+    @Order(4)
+    private EditText mPhoneEditText;
+
+    private TextView mResultTextView;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_un_ordered_sequencing);
+
+        // UI References
+        mNameEditText = (EditText) findViewById(R.id.nameEditText);
+        mAddressEditText = (EditText) findViewById(R.id.addressEditText);
+        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
+        mPhoneEditText = (EditText) findViewById(R.id.phoneEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        RadioGroup modeRadioGroup = (RadioGroup) findViewById(R.id.modeRadioGroup);
+        Button saripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event listeners
+        modeRadioGroup.setOnCheckedChangeListener(this);
+        saripaarButton.setOnClickListener(new View.OnClickListener() {
+
+            @Override
+            public void onClick(View v) {
+                mValidator.validate();
+            }
+        });
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        StringBuilder stringBuilder = new StringBuilder();
+        for (ValidationError error : errors) {
+            stringBuilder.append(error.getCollatedErrorMessage(this))
+                    .append('\n');
+        }
+        mResultTextView.setText(stringBuilder.toString().trim());
+    }
+
+    @Override
+    public void onCheckedChanged(RadioGroup group, int checkedId) {
+        switch (checkedId) {
+            case R.id.burstRadioButton:
+                mValidator.setValidationMode(Validator.Mode.BURST);
+                break;
+
+            case R.id.immediateRadioButton:
+                mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
+                break;
+        }
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateActivity.java
new file mode 100644
index 0000000..c35f935
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateActivity.java
@@ -0,0 +1,116 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.RadioGroup;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.Email;
+import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+import com.mobsandgeeks.saripaar.annotation.Order;
+import com.mobsandgeeks.saripaar.annotation.Length;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+/**
+ * This {@link android.app.Activity} is used for testing the
+ * {@link com.mobsandgeeks.saripaar.Validator#validate()} method on 'ordered' fields.
+ */
+public class OrderedValidateActivity extends Activity
+        implements Validator.ValidationListener, RadioGroup.OnCheckedChangeListener {
+
+    // Fields
+    @NotEmpty
+    @Order(1)
+    private EditText mNameEditText;
+
+    @NotEmpty
+    @Order(2)
+    private EditText mAddressEditText;
+
+    @Email
+    @Order(3)
+    private EditText mEmailEditText;
+
+    @NotEmpty
+    @Length(min = 10, max = 10)
+    @Order(4)
+    private EditText mPhoneEditText;
+
+    private TextView mResultTextView;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_un_ordered_validate);
+
+        // UI References
+        mNameEditText = (EditText) findViewById(R.id.nameEditText);
+        mAddressEditText = (EditText) findViewById(R.id.addressEditText);
+        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
+        mPhoneEditText = (EditText) findViewById(R.id.phoneEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        RadioGroup modeRadioGroup = (RadioGroup) findViewById(R.id.modeRadioGroup);
+        Button saripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event listeners
+        modeRadioGroup.setOnCheckedChangeListener(this);
+        saripaarButton.setOnClickListener(new View.OnClickListener() {
+
+            @Override
+            public void onClick(View v) {
+                mValidator.validate();
+            }
+        });
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+
+    @Override
+    public void onCheckedChanged(RadioGroup group, int checkedId) {
+        switch (checkedId) {
+            case R.id.burstRadioButton:
+                mValidator.setValidationMode(Validator.Mode.BURST);
+                break;
+
+            case R.id.immediateRadioButton:
+                mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
+                break;
+        }
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateBeforeActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateBeforeActivity.java
new file mode 100644
index 0000000..4c36317
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateBeforeActivity.java
@@ -0,0 +1,120 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.RadioGroup;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.Email;
+import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+import com.mobsandgeeks.saripaar.annotation.Order;
+import com.mobsandgeeks.saripaar.annotation.Length;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+/**
+ * This {@link android.app.Activity} is used for testing the
+ * {@link com.mobsandgeeks.saripaar.Validator#validateBefore(android.view.View)} method on
+ * 'ordered' fields.
+ */
+public class OrderedValidateBeforeActivity extends Activity
+        implements Validator.ValidationListener, RadioGroup.OnCheckedChangeListener,
+                View.OnFocusChangeListener {
+
+    // Fields
+    @NotEmpty
+    @Order(1)
+    private EditText mNameEditText;
+
+    @NotEmpty
+    @Order(2)
+    private EditText mAddressEditText;
+
+    @Email
+    @Order(3)
+    private EditText mEmailEditText;
+
+    @NotEmpty
+    @Length
+    @Order(4)
+    private EditText mPhoneEditText;
+
+    private TextView mResultTextView;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_un_ordered_validate_till_before);
+
+        // UI References
+        mNameEditText = (EditText) findViewById(R.id.nameEditText);
+        mAddressEditText = (EditText) findViewById(R.id.addressEditText);
+        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
+        mPhoneEditText = (EditText) findViewById(R.id.phoneEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        RadioGroup modeRadioGroup = (RadioGroup) findViewById(R.id.modeRadioGroup);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event listeners
+        mNameEditText.setOnFocusChangeListener(this);
+        mAddressEditText.setOnFocusChangeListener(this);
+        mEmailEditText.setOnFocusChangeListener(this);
+        mPhoneEditText.setOnFocusChangeListener(this);
+        modeRadioGroup.setOnCheckedChangeListener(this);
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+
+    @Override
+    public void onCheckedChanged(RadioGroup group, int checkedId) {
+        switch (checkedId) {
+            case R.id.burstRadioButton:
+                mValidator.setValidationMode(Validator.Mode.BURST);
+                break;
+
+            case R.id.immediateRadioButton:
+                mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
+                break;
+        }
+    }
+
+    @Override
+    public void onFocusChange(View v, boolean hasFocus) {
+        if (hasFocus) {
+            mValidator.validateBefore(v);
+        }
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateTillActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateTillActivity.java
new file mode 100644
index 0000000..a3dd55a
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateTillActivity.java
@@ -0,0 +1,120 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.RadioGroup;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.Email;
+import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+import com.mobsandgeeks.saripaar.annotation.Order;
+import com.mobsandgeeks.saripaar.annotation.Length;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+/**
+ * This {@link android.app.Activity} is used for testing the
+ * {@link com.mobsandgeeks.saripaar.Validator#validateTill(android.view.View)} method on
+ * 'ordered' fields.
+ */
+public class OrderedValidateTillActivity extends Activity
+        implements Validator.ValidationListener, RadioGroup.OnCheckedChangeListener,
+                View.OnFocusChangeListener {
+
+    // Fields
+    @NotEmpty
+    @Order(1)
+    private EditText mNameEditText;
+
+    @NotEmpty
+    @Order(2)
+    private EditText mAddressEditText;
+
+    @Email
+    @Order(3)
+    private EditText mEmailEditText;
+
+    @NotEmpty
+    @Length(min = 10, max = 10)
+    @Order(4)
+    private EditText mPhoneEditText;
+
+    private TextView mResultTextView;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_un_ordered_validate_till_before);
+
+        // UI References
+        mNameEditText = (EditText) findViewById(R.id.nameEditText);
+        mAddressEditText = (EditText) findViewById(R.id.addressEditText);
+        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
+        mPhoneEditText = (EditText) findViewById(R.id.phoneEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        RadioGroup modeRadioGroup = (RadioGroup) findViewById(R.id.modeRadioGroup);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event listeners
+        mNameEditText.setOnFocusChangeListener(this);
+        mAddressEditText.setOnFocusChangeListener(this);
+        mEmailEditText.setOnFocusChangeListener(this);
+        mPhoneEditText.setOnFocusChangeListener(this);
+        modeRadioGroup.setOnCheckedChangeListener(this);
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+
+    @Override
+    public void onCheckedChanged(RadioGroup group, int checkedId) {
+        switch (checkedId) {
+            case R.id.burstRadioButton:
+                mValidator.setValidationMode(Validator.Mode.BURST);
+                break;
+
+            case R.id.immediateRadioButton:
+                mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
+                break;
+        }
+    }
+
+    @Override
+    public void onFocusChange(View v, boolean hasFocus) {
+        if (hasFocus) {
+            mValidator.validateTill(v);
+        }
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOnlyActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOnlyActivity.java
new file mode 100644
index 0000000..08242a2
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOnlyActivity.java
@@ -0,0 +1,91 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.QuickRule;
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+
+public class QuickRuleOnlyActivity extends Activity
+            implements View.OnClickListener, Validator.ValidationListener {
+
+    private EditText mOneOnlyEditText;
+
+    private TextView mResultTextView;
+    private Button mSaripaarButton;
+
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_quick_rule_only);
+
+        mOneOnlyEditText = (EditText) findViewById(R.id.oneOnlyEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Event listeners
+        mSaripaarButton.setOnClickListener(this);
+
+        // Validation
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Add a quick rule
+        mValidator.put(mOneOnlyEditText, new QuickRule<TextView>() {
+            @Override
+            public boolean isValid(TextView textView) {
+                return "1".equals(textView.getText().toString());
+            }
+
+            @Override
+            public String getMessage(Context context) {
+                return "Enter 1, nothing else.";
+            }
+        });
+    }
+
+    @Override
+    public void onClick(View v) {
+        try {
+            mValidator.validate();
+        } catch (IllegalStateException e) {
+            mResultTextView.setText(R.string.crash);
+        }
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(R.string.failure);
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOnlyControllerActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOnlyControllerActivity.java
new file mode 100644
index 0000000..2d6b242
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOnlyControllerActivity.java
@@ -0,0 +1,105 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.QuickRule;
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+
+public class QuickRuleOnlyControllerActivity extends Activity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        // Set content view
+        LayoutInflater layoutInflater = LayoutInflater.from(this);
+        View view = layoutInflater.inflate(R.layout.activity_quick_rule_only, null);
+        setContentView(view);
+
+        // Controller
+        new Controller(view);
+    }
+
+    static class Controller implements View.OnClickListener, Validator.ValidationListener {
+        // UI
+        private EditText mOneOnlyEditText;
+        private TextView mResultTextView;
+        private Button mSaripaarButton;
+
+        // Attributes
+        private Validator mValidator;
+
+        Controller(final View rootView) {
+            // UI
+            mOneOnlyEditText = (EditText) rootView.findViewById(R.id.oneOnlyEditText);
+            mResultTextView = (TextView) rootView.findViewById(R.id.resultTextView);
+            mSaripaarButton = (Button) rootView.findViewById(R.id.saripaarButton);
+
+            // Validation
+            mValidator = new Validator(this);
+            mValidator.setValidationListener(this);
+
+            // Add a quick rule
+            mValidator.put(mOneOnlyEditText, new QuickRule<TextView>() {
+
+                @Override
+                public boolean isValid(TextView textView) {
+                    return "1".equals(textView.getText().toString());
+                }
+
+                @Override
+                public String getMessage(Context context) {
+                    return "Enter 1, nothing else.";
+                }
+            });
+
+            // Event listeners
+            mSaripaarButton.setOnClickListener(this);
+        }
+
+        @Override
+        public void onClick(View v) {
+            try {
+                mValidator.validate();
+            } catch (IllegalStateException e) {
+                mResultTextView.setText(R.string.crash);
+            }
+        }
+
+        @Override
+        public void onValidationSucceeded() {
+            mResultTextView.setText(R.string.success);
+        }
+
+        @Override
+        public void onValidationFailed(List<ValidationError> errors) {
+            mResultTextView.setText(R.string.failure);
+        }
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOrderedActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOrderedActivity.java
new file mode 100644
index 0000000..ec59024
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOrderedActivity.java
@@ -0,0 +1,115 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.CompoundButton;
+import android.widget.EditText;
+import android.widget.RadioButton;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.QuickRule;
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.Email;
+import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+import com.mobsandgeeks.saripaar.annotation.Order;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ */
+public class QuickRuleOrderedActivity extends Activity
+        implements Validator.ValidationListener, CompoundButton.OnCheckedChangeListener,
+                View.OnClickListener {
+
+    @NotEmpty
+    @Order(1)
+    private EditText mZipCodeEditText;
+
+    @Order(2)
+    private EditText mAirtelNumberEditText;
+
+    @Email
+    @Order(3)
+    private EditText mEmailEditText;
+
+    private TextView mResultTextView;
+    private RadioButton mUseQuickRuleRadioButton;
+    private Button mSaripaarButton;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_quick_rule_ordered);
+
+        // UI References
+        mZipCodeEditText = (EditText) findViewById(R.id.zipCodeEditText);
+        mAirtelNumberEditText = (EditText) findViewById(R.id.airtelNumberEditText);
+        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        mUseQuickRuleRadioButton = (RadioButton) findViewById(R.id.useQuickRuleRadioButton);
+        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event Listeners
+        mUseQuickRuleRadioButton.setOnCheckedChangeListener(this);
+        mSaripaarButton.setOnClickListener(this);
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+
+    @Override
+    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+        mValidator.put(mAirtelNumberEditText, new QuickRule<TextView>() {
+
+            @Override
+            public boolean isValid(TextView textView) {
+                final String phoneNumber = textView.getText().toString().trim();
+                return phoneNumber.length() == 10 && phoneNumber.startsWith("999");
+            }
+
+            @Override
+            public String getMessage(Context context) {
+                return "Not an Airtel number :(";
+            }
+        });
+    }
+
+    @Override
+    public void onClick(View v) {
+        mValidator.validate();
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleUnorderedActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleUnorderedActivity.java
new file mode 100644
index 0000000..835fddb
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleUnorderedActivity.java
@@ -0,0 +1,105 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.CompoundButton;
+import android.widget.EditText;
+import android.widget.RadioButton;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.QuickRule;
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ */
+public class QuickRuleUnorderedActivity extends Activity
+        implements Validator.ValidationListener, CompoundButton.OnCheckedChangeListener,
+                View.OnClickListener {
+
+    @NotEmpty
+    private EditText mZipCodeEditText;
+    private EditText mAirtelNumberEditText;
+
+    private TextView mResultTextView;
+    private RadioButton mUseQuickRuleRadioButton;
+    private Button mSaripaarButton;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_quick_rule_unordered);
+
+        // UI References
+        mZipCodeEditText = (EditText) findViewById(R.id.zipCodeEditText);
+        mAirtelNumberEditText = (EditText) findViewById(R.id.airtelNumberEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        mUseQuickRuleRadioButton = (RadioButton) findViewById(R.id.useQuickRuleRadioButton);
+        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event Listeners
+        mUseQuickRuleRadioButton.setOnCheckedChangeListener(this);
+        mSaripaarButton.setOnClickListener(this);
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+
+    @Override
+    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+        mValidator.put(mAirtelNumberEditText, new QuickRule<TextView>() {
+
+            @Override
+            public boolean isValid(TextView textView) {
+                final String phoneNumber = textView.getText().toString().trim();
+                return phoneNumber.length() == 10 && phoneNumber.startsWith("999");
+            }
+
+            @Override
+            public String getMessage(Context context) {
+                return "Not an Airtel number :(";
+            }
+        });
+    }
+
+    @Override
+    public void onClick(View v) {
+        mValidator.validate();
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleUnorderedInOrderedActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleUnorderedInOrderedActivity.java
new file mode 100644
index 0000000..5c1d2db
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleUnorderedInOrderedActivity.java
@@ -0,0 +1,143 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.CompoundButton;
+import android.widget.EditText;
+import android.widget.RadioButton;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.QuickRule;
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+import com.mobsandgeeks.saripaar.annotation.Order;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ */
+public class QuickRuleUnorderedInOrderedActivity extends Activity
+        implements Validator.ValidationListener, CompoundButton.OnCheckedChangeListener,
+                View.OnClickListener {
+
+    @NotEmpty
+    @Order(1)
+    private EditText mZipCodeEditText;
+
+    @Order(2)
+    private EditText mAirtelNumberEditText;
+
+    private TextView mResultTextView;
+    private RadioButton mUseQuickRuleRadioButton;
+    private Button mSaripaarButton;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_quick_rule_unordered_in_ordered);
+
+        // UI References
+        mZipCodeEditText = (EditText) findViewById(R.id.zipCodeEditText);
+        mAirtelNumberEditText = (EditText) findViewById(R.id.airtelNumberEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        mUseQuickRuleRadioButton = (RadioButton) findViewById(R.id.useQuickRuleRadioButton);
+        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Quick Rule for ORDERED field
+        mValidator.put(mAirtelNumberEditText, new QuickRule<TextView>() {
+
+            @Override
+            public boolean isValid(TextView textView) {
+                final String phoneNumber = textView.getText().toString().trim();
+                return phoneNumber.length() == 10 && phoneNumber.startsWith("999");
+            }
+
+            @Override
+            public String getMessage(Context context) {
+                return "Not an Airtel number :(";
+            }
+        });
+
+        // Event Listeners
+        mUseQuickRuleRadioButton.setOnCheckedChangeListener(this);
+        mSaripaarButton.setOnClickListener(this);
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+
+    @Override
+    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+        EditText evenNumberEditText = (EditText) findViewById(R.id.evenNumberEditText);
+        QuickRule<TextView> evenNumberQuickRule = getEvenNumberQuickRule();
+
+        try {
+            mValidator.put(evenNumberEditText, evenNumberQuickRule);
+        } catch (IllegalStateException e) {
+            mResultTextView.setText("CRASH");
+        }
+    }
+
+    @Override
+    public void onClick(View v) {
+        mValidator.validate();
+    }
+
+    private QuickRule<TextView> getEvenNumberQuickRule() {
+        return new QuickRule<TextView>() {
+
+            @Override
+            public boolean isValid(TextView textView) {
+                String numberText = textView.getText().toString().trim();
+
+                boolean isEven;
+                try {
+                    isEven = Integer.parseInt(numberText) % 2 == 0;
+                } catch (NumberFormatException e) {
+                    isEven = false;
+                }
+
+                return isEven;
+            }
+
+            @Override
+            public String getMessage(Context context) {
+                return "Not an even number.";
+            }
+        };
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/RemoveRulesActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/RemoveRulesActivity.java
new file mode 100644
index 0000000..4998f86
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/RemoveRulesActivity.java
@@ -0,0 +1,105 @@
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.CompoundButton;
+import android.widget.EditText;
+import android.widget.RadioButton;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.QuickRule;
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.Email;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ */
+public class RemoveRulesActivity extends Activity
+        implements Validator.ValidationListener, View.OnClickListener {
+
+    // Fields
+    @Email
+    private EditText mEmailEditText;
+
+    private RadioButton mAddQuickRuleRadioButton;
+    private RadioButton mRemoveRulesRadioButton;
+    private TextView mResultTextView;
+    private Button mSaripaarButton;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_remove_rules);
+
+        // UI References
+        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
+        mAddQuickRuleRadioButton = (RadioButton) findViewById(R.id.addQuickRuleRadioButton);
+        mRemoveRulesRadioButton = (RadioButton) findViewById(R.id.removeRulesRadioButton);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        mSaripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Validator
+        mValidator = new Validator(this);
+
+        // Event listeners
+        mSaripaarButton.setOnClickListener(this);
+        mValidator.setValidationListener(this);
+        mAddQuickRuleRadioButton.setOnCheckedChangeListener(
+                new CompoundButton.OnCheckedChangeListener() {
+
+                    @Override
+                    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                        mValidator.put(mEmailEditText, new QuickRule<EditText>() {
+                            @Override
+                            public boolean isValid(EditText editText) {
+                                String email = editText.getText().toString();
+                                return email.endsWith("mobsandgeeks.com");
+                            }
+
+                            @Override
+                            public String getMessage(Context context) {
+                                return "Only allow emails from \"mobsandgeeks.com\" :P";
+                            }
+                        });
+                    }
+                });
+
+        mRemoveRulesRadioButton.setOnCheckedChangeListener(
+                new CompoundButton.OnCheckedChangeListener() {
+
+                    @Override
+                    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                        mValidator.removeRules(mEmailEditText);
+                    }
+                });
+    }
+
+    @Override
+    public void onClick(View v) {
+        try {
+            mValidator.validate();
+        } catch (IllegalStateException e) {
+            mResultTextView.setText(R.string.crash);
+        }
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedSequencingActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedSequencingActivity.java
new file mode 100644
index 0000000..7ae5155
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedSequencingActivity.java
@@ -0,0 +1,122 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.RadioGroup;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.Email;
+import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+import com.mobsandgeeks.saripaar.annotation.Length;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+/**
+ * This {@link android.app.Activity} is used for testing the
+ * {@link com.mobsandgeeks.saripaar.Validator#validate()} method on 'ordered' fields.
+ */
+public class UnorderedSequencingActivity extends Activity
+        implements Validator.ValidationListener, RadioGroup.OnCheckedChangeListener {
+
+    // Fields
+    @NotEmpty(sequence = 1, message = "Message 1")
+    @Length(sequence = 2, min = 3, message = "Message 2")
+    private EditText mNameEditText;
+
+    @NotEmpty(sequence = 1, message = "Message 3")
+    @Length(sequence = 2, min = 10, message = "Message 4")
+    private EditText mAddressEditText;
+
+    @NotEmpty(sequence = 1, message = "Message 5")
+    @Email(sequence = 2, message = "Message 6")
+    private EditText mEmailEditText;
+
+    @NotEmpty(sequence = 1, message = "Message 7")
+    private EditText mPhoneEditText;
+
+    private TextView mResultTextView;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_un_ordered_sequencing);
+
+        // UI References
+        mNameEditText = (EditText) findViewById(R.id.nameEditText);
+        mAddressEditText = (EditText) findViewById(R.id.addressEditText);
+        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
+        mPhoneEditText = (EditText) findViewById(R.id.phoneEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        RadioGroup modeRadioGroup = (RadioGroup) findViewById(R.id.modeRadioGroup);
+        Button saripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event listeners
+        modeRadioGroup.setOnCheckedChangeListener(this);
+        saripaarButton.setOnClickListener(new View.OnClickListener() {
+
+            @Override
+            public void onClick(View v) {
+                try {
+                    mValidator.validate();
+                } catch (IllegalStateException e) {
+                    mResultTextView.setText(R.string.crash);
+                }
+            }
+        });
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        StringBuilder stringBuilder = new StringBuilder();
+        for (ValidationError error : errors) {
+            stringBuilder.append(error.getCollatedErrorMessage(this))
+                    .append('\n');
+        }
+        mResultTextView.setText(stringBuilder.toString().trim());
+    }
+
+    @Override
+    public void onCheckedChanged(RadioGroup group, int checkedId) {
+        switch (checkedId) {
+            case R.id.burstRadioButton:
+                mValidator.setValidationMode(Validator.Mode.BURST);
+                break;
+
+            case R.id.immediateRadioButton:
+                mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
+                break;
+        }
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateActivity.java
new file mode 100644
index 0000000..c0e98c0
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateActivity.java
@@ -0,0 +1,119 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.RadioGroup;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.Email;
+import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+import com.mobsandgeeks.saripaar.annotation.Length;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+/**
+ * This {@link android.app.Activity} is used for testing the
+ * {@link com.mobsandgeeks.saripaar.Validator#validate()} method on 'unordered' fields in
+ * {@link com.mobsandgeeks.saripaar.Validator.Mode#BURST} mode. We should make sure that the
+ * test fails in {@link com.mobsandgeeks.saripaar.Validator.Mode#IMMEDIATE} mode.
+ * The {@link com.mobsandgeeks.saripaar.Validator#validateTill(android.view.View)} and
+ * {@link com.mobsandgeeks.saripaar.Validator#validateBefore(android.view.View)} methods should
+ * also fail when attempting to perform validation over unordered fields.
+ */
+public class UnorderedValidateActivity extends Activity
+        implements Validator.ValidationListener, RadioGroup.OnCheckedChangeListener {
+
+    // Fields
+    @NotEmpty
+    private EditText mNameEditText;
+
+    @NotEmpty
+    private EditText mAddressEditText;
+
+    @Email
+    private EditText mEmailEditText;
+
+    @Length(min = 10, max = 10)
+    private EditText mPhoneEditText;
+
+    private TextView mResultTextView;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_un_ordered_validate);
+
+        // UI References
+        mNameEditText = (EditText) findViewById(R.id.nameEditText);
+        mAddressEditText = (EditText) findViewById(R.id.addressEditText);
+        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
+        mPhoneEditText = (EditText) findViewById(R.id.phoneEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        RadioGroup modeRadioGroup = (RadioGroup) findViewById(R.id.modeRadioGroup);
+        Button saripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event listeners
+        modeRadioGroup.setOnCheckedChangeListener(this);
+        saripaarButton.setOnClickListener(new View.OnClickListener() {
+
+            @Override
+            public void onClick(View v) {
+                try {
+                    mValidator.validate();
+                } catch (IllegalStateException e) {
+                    mResultTextView.setText("CRASH");
+                }
+            }
+        });
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+
+    @Override
+    public void onCheckedChanged(RadioGroup group, int checkedId) {
+        switch (checkedId) {
+            case R.id.burstRadioButton:
+                mValidator.setValidationMode(Validator.Mode.BURST);
+                break;
+
+            case R.id.immediateRadioButton:
+                mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
+                break;
+        }
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateBeforeActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateBeforeActivity.java
new file mode 100644
index 0000000..536a9d9
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateBeforeActivity.java
@@ -0,0 +1,119 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.RadioGroup;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.Email;
+import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+import com.mobsandgeeks.saripaar.annotation.Length;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+/**
+ * This {@link android.app.Activity} is used for testing the
+ * {@link com.mobsandgeeks.saripaar.Validator#validateBefore(android.view.View)} method on
+ * 'ordered' fields.
+ */
+public class UnorderedValidateBeforeActivity extends Activity
+        implements Validator.ValidationListener, RadioGroup.OnCheckedChangeListener,
+                View.OnFocusChangeListener {
+
+    // Fields
+    @NotEmpty
+    private EditText mNameEditText;
+
+    @NotEmpty
+    private EditText mAddressEditText;
+
+    @Email
+    private EditText mEmailEditText;
+
+    @NotEmpty
+    @Length
+    private EditText mPhoneEditText;
+
+    private TextView mResultTextView;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_un_ordered_validate_till_before);
+
+        // UI References
+        mNameEditText = (EditText) findViewById(R.id.nameEditText);
+        mAddressEditText = (EditText) findViewById(R.id.addressEditText);
+        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
+        mPhoneEditText = (EditText) findViewById(R.id.phoneEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        RadioGroup modeRadioGroup = (RadioGroup) findViewById(R.id.modeRadioGroup);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event listeners
+        mNameEditText.setOnFocusChangeListener(this);
+        mAddressEditText.setOnFocusChangeListener(this);
+        mEmailEditText.setOnFocusChangeListener(this);
+        mPhoneEditText.setOnFocusChangeListener(this);
+        modeRadioGroup.setOnCheckedChangeListener(this);
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+
+    @Override
+    public void onCheckedChanged(RadioGroup group, int checkedId) {
+        switch (checkedId) {
+            case R.id.burstRadioButton:
+                mValidator.setValidationMode(Validator.Mode.BURST);
+                break;
+
+            case R.id.immediateRadioButton:
+                mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
+                break;
+        }
+    }
+
+    @Override
+    public void onFocusChange(View v, boolean hasFocus) {
+        if (hasFocus) {
+            try {
+                mValidator.validateTill(v);
+            } catch (IllegalStateException e) {
+                mResultTextView.setText("CRASH");
+            }
+        }
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateTillActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateTillActivity.java
new file mode 100644
index 0000000..3be4ab3
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateTillActivity.java
@@ -0,0 +1,119 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.RadioGroup;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.Email;
+import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+import com.mobsandgeeks.saripaar.annotation.Length;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+/**
+ * This {@link android.app.Activity} is used for testing the
+ * {@link com.mobsandgeeks.saripaar.Validator#validateTill(android.view.View)} method on
+ * 'unordered' fields.
+ */
+public class UnorderedValidateTillActivity extends Activity
+        implements Validator.ValidationListener, RadioGroup.OnCheckedChangeListener,
+                View.OnFocusChangeListener {
+
+    // Fields
+    @NotEmpty
+    private EditText mNameEditText;
+
+    @NotEmpty
+    private EditText mAddressEditText;
+
+    @Email
+    private EditText mEmailEditText;
+
+    @NotEmpty
+    @Length
+    private EditText mPhoneEditText;
+
+    private TextView mResultTextView;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_un_ordered_validate_till_before);
+
+        // UI References
+        mNameEditText = (EditText) findViewById(R.id.nameEditText);
+        mAddressEditText = (EditText) findViewById(R.id.addressEditText);
+        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
+        mPhoneEditText = (EditText) findViewById(R.id.phoneEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        RadioGroup modeRadioGroup = (RadioGroup) findViewById(R.id.modeRadioGroup);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event listeners
+        mNameEditText.setOnFocusChangeListener(this);
+        mAddressEditText.setOnFocusChangeListener(this);
+        mEmailEditText.setOnFocusChangeListener(this);
+        mPhoneEditText.setOnFocusChangeListener(this);
+        modeRadioGroup.setOnCheckedChangeListener(this);
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(Common.getFailedFieldNames(errors));
+    }
+
+    @Override
+    public void onCheckedChanged(RadioGroup group, int checkedId) {
+        switch (checkedId) {
+            case R.id.burstRadioButton:
+                mValidator.setValidationMode(Validator.Mode.BURST);
+                break;
+
+            case R.id.immediateRadioButton:
+                mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
+                break;
+        }
+    }
+
+    @Override
+    public void onFocusChange(View v, boolean hasFocus) {
+        if (hasFocus) {
+            try {
+                mValidator.validateTill(v);
+            } catch (IllegalStateException e) {
+                mResultTextView.setText("CRASH");
+            }
+        }
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ValidateInvisibleViewsActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ValidateInvisibleViewsActivity.java
new file mode 100644
index 0000000..3b1160b
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ValidateInvisibleViewsActivity.java
@@ -0,0 +1,111 @@
+/*
+ * Copyright (C) 2016 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.EditText;
+import android.widget.RadioButton;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+/**
+ * This {@link Activity} is used for testing the
+ * {@link Validator#validateInvisibleViews(boolean)} method.
+ */
+public class ValidateInvisibleViewsActivity extends Activity
+        implements View.OnClickListener, CompoundButton.OnCheckedChangeListener,
+                Validator.ValidationListener {
+
+    // Fields
+    @NotEmpty
+    private EditText mNameEditText;
+
+    @NotEmpty
+    private EditText mEmailEditText;
+
+    private TextView mResultTextView;
+
+    // Attributes
+    private Validator mValidator;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_validate_invisible_views);
+
+        // View references
+        mNameEditText = (EditText) findViewById(R.id.nameEditText);
+        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
+        mResultTextView = (TextView) findViewById(R.id.resultTextView);
+        RadioButton showViewRadioButton = (RadioButton) findViewById(R.id.showRadioButton);
+        RadioButton hideViewRadioButton = (RadioButton) findViewById(R.id.hideRadioButton);
+        CheckBox validateHiddenViewsCheckBox =
+                (CheckBox) findViewById(R.id.validateHiddenViewsCheckBox);
+        Button saripaarButton = (Button) findViewById(R.id.saripaarButton);
+
+        // Validator
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+
+        // Event listeners
+        showViewRadioButton.setOnCheckedChangeListener(this);
+        hideViewRadioButton.setOnCheckedChangeListener(this);
+        validateHiddenViewsCheckBox.setOnCheckedChangeListener(this);
+        saripaarButton.setOnClickListener(this);
+    }
+
+    @Override
+    public void onClick(View view) {
+        mValidator.validate();
+    }
+
+    @Override
+    public void onCheckedChanged(CompoundButton compoundButton, boolean checked) {
+        switch (compoundButton.getId()) {
+            case R.id.showRadioButton:
+                mEmailEditText.setVisibility(View.VISIBLE);
+                break;
+
+            case R.id.hideRadioButton:
+                mEmailEditText.setVisibility(View.INVISIBLE);
+                break;
+
+            case R.id.validateHiddenViewsCheckBox:
+                mValidator.validateInvisibleViews(checked);
+                break;
+        }
+    }
+
+    @Override
+    public void onValidationSucceeded() {
+        mResultTextView.setText(R.string.success);
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors) {
+        mResultTextView.setText(R.string.failure);
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/validation/HometownZipCode.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/validation/HometownZipCode.java
new file mode 100644
index 0000000..7dfbae2
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/validation/HometownZipCode.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui.validation;
+
+import com.mobsandgeeks.saripaar.annotation.ValidateUsing;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@ValidateUsing(HometownZipCodeRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface HometownZipCode {
+    public int sequence()       default -1;
+    public int messageResId()   default -1;
+    public String message()     default "We accept orders only in 635001.";
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/validation/HometownZipCodeRule.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/validation/HometownZipCodeRule.java
new file mode 100644
index 0000000..b20bb7c
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/validation/HometownZipCodeRule.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui.validation;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+
+public class HometownZipCodeRule extends AnnotationRule<HometownZipCode, String> {
+
+    protected HometownZipCodeRule(HometownZipCode hometownZipCode) {
+        super(hometownZipCode);
+    }
+
+    @Override
+    public boolean isValid(String data) {
+        return "635001".equals(data);
+    }
+
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/validation/To.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/validation/To.java
new file mode 100644
index 0000000..29ee73c
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/validation/To.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui.validation;
+
+import com.mobsandgeeks.saripaar.annotation.ValidateUsing;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@ValidateUsing(ToRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface To {
+    public int value();
+
+    public int sequence()       default -1;
+    public int messageResId()   default -1;
+    public String message()     default "";
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/validation/ToRule.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/validation/ToRule.java
new file mode 100644
index 0000000..c151d5f
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/validation/ToRule.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui.validation;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+
+public class ToRule extends AnnotationRule<To, Integer> {
+
+    protected ToRule(To to) {
+        super(to);
+    }
+
+    @Override
+    public boolean isValid(Integer progress) {
+        return progress <= mRuleAnnotation.value();
+    }
+
+}
diff --git a/saripaar-tests/src/main/res/drawable-hdpi/ic_launcher.png b/saripaar-tests/src/main/res/drawable-hdpi/ic_launcher.png
new file mode 100644
index 0000000..96a442e
Binary files /dev/null and b/saripaar-tests/src/main/res/drawable-hdpi/ic_launcher.png differ
diff --git a/saripaar-tests/src/main/res/drawable-mdpi/ic_launcher.png b/saripaar-tests/src/main/res/drawable-mdpi/ic_launcher.png
new file mode 100644
index 0000000..359047d
Binary files /dev/null and b/saripaar-tests/src/main/res/drawable-mdpi/ic_launcher.png differ
diff --git a/saripaar-tests/src/main/res/drawable-xhdpi/ic_launcher.png b/saripaar-tests/src/main/res/drawable-xhdpi/ic_launcher.png
new file mode 100644
index 0000000..71c6d76
Binary files /dev/null and b/saripaar-tests/src/main/res/drawable-xhdpi/ic_launcher.png differ
diff --git a/saripaar-tests/src/main/res/drawable-xxhdpi/ic_launcher.png b/saripaar-tests/src/main/res/drawable-xxhdpi/ic_launcher.png
new file mode 100644
index 0000000..4df1894
Binary files /dev/null and b/saripaar-tests/src/main/res/drawable-xxhdpi/ic_launcher.png differ
diff --git a/saripaar-tests/src/main/res/layout/activity_confirm_password_no_password.xml b/saripaar-tests/src/main/res/layout/activity_confirm_password_no_password.xml
new file mode 100644
index 0000000..a2c531c
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_confirm_password_no_password.xml
@@ -0,0 +1,46 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:paddingLeft="@dimen/activity_horizontal_margin"
+                android:paddingRight="@dimen/activity_horizontal_margin"
+                android:paddingTop="@dimen/activity_vertical_margin"
+                android:paddingBottom="@dimen/activity_vertical_margin"
+                android:id="@+id/root">
+
+    <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:id="@+id/saripaarButton"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <EditText
+        android:id="@+id/confirmPasswordEditText"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:inputType="textPassword"
+        android:hint="@string/confirm_password"
+        android:ems="10"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <TextView
+        android:id="@+id/resultTextView"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:layout_below="@+id/confirmPasswordEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_above="@+id/saripaarButton"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:gravity="center"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_confirm_password_sevaral_passwords.xml b/saripaar-tests/src/main/res/layout/activity_confirm_password_sevaral_passwords.xml
new file mode 100644
index 0000000..b75422d
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_confirm_password_sevaral_passwords.xml
@@ -0,0 +1,73 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:paddingLeft="@dimen/activity_horizontal_margin"
+                android:paddingRight="@dimen/activity_horizontal_margin"
+                android:paddingTop="@dimen/activity_vertical_margin"
+                android:paddingBottom="@dimen/activity_vertical_margin"
+                android:id="@+id/root">
+
+    <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:id="@+id/saripaarButton"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <EditText
+        android:id="@+id/confirmPasswordEditText"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:inputType="textPassword"
+        android:hint="@string/confirm_password"
+        android:ems="10"
+        android:layout_below="@+id/anotherPasswordEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <TextView
+        android:id="@+id/resultTextView"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:layout_below="@+id/confirmPasswordEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_above="@+id/saripaarButton"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:gravity="center"/>
+
+    <EditText
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:inputType="textPassword"
+        android:ems="10"
+        android:id="@+id/passwordEditText"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:hint="Password"/>
+
+    <EditText
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:inputType="textPassword"
+        android:ems="10"
+        android:id="@+id/anotherPasswordEditText"
+        android:layout_below="@+id/passwordEditText"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:hint="Another Password"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_confirm_password_with_password.xml b/saripaar-tests/src/main/res/layout/activity_confirm_password_with_password.xml
new file mode 100644
index 0000000..d3c4e12
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_confirm_password_with_password.xml
@@ -0,0 +1,60 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:paddingLeft="@dimen/activity_horizontal_margin"
+                android:paddingRight="@dimen/activity_horizontal_margin"
+                android:paddingTop="@dimen/activity_vertical_margin"
+                android:paddingBottom="@dimen/activity_vertical_margin"
+                android:id="@+id/root">
+
+    <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:id="@+id/saripaarButton"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <EditText
+        android:id="@+id/passwordEditText"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:hint="@string/password"
+        android:inputType="textPassword"
+        android:ems="10"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <EditText
+        android:id="@+id/confirmPasswordEditText"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:inputType="textPassword"
+        android:hint="@string/confirm_password"
+        android:ems="10"
+        android:layout_below="@+id/passwordEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <TextView
+        android:id="@+id/resultTextView"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:layout_below="@+id/confirmPasswordEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_above="@+id/saripaarButton"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:gravity="center"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_custom_annotation.xml b/saripaar-tests/src/main/res/layout/activity_custom_annotation.xml
new file mode 100644
index 0000000..677e848
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_custom_annotation.xml
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:paddingLeft="@dimen/activity_horizontal_margin"
+        android:paddingRight="@dimen/activity_horizontal_margin"
+        android:paddingTop="@dimen/activity_vertical_margin"
+        android:paddingBottom="@dimen/activity_vertical_margin" >
+
+    <TextView
+        android:text="@string/saripaar_v2"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/saripaarTextView"/>
+
+    <EditText
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/saripaarTextView"
+        android:hint="Zip Code"
+        android:inputType="number"
+        android:id="@+id/zipCodeEditText" />
+
+    <Button
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:id="@+id/saripaarButton"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true" />
+
+    <TextView
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:id="@+id/resultTextView"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:gravity="center"
+        android:layout_above="@+id/saripaarButton"/>
+
+    <RadioButton
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Register Annotation"
+        android:id="@+id/registerAnnotationRadioButton"
+        android:layout_below="@+id/zipCodeEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:checked="false"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_custom_annotation_with_adapter.xml b/saripaar-tests/src/main/res/layout/activity_custom_annotation_with_adapter.xml
new file mode 100644
index 0000000..e401944
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_custom_annotation_with_adapter.xml
@@ -0,0 +1,57 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:paddingLeft="@dimen/activity_horizontal_margin"
+        android:paddingRight="@dimen/activity_horizontal_margin"
+        android:paddingTop="@dimen/activity_vertical_margin"
+        android:paddingBottom="@dimen/activity_vertical_margin" >
+
+    <TextView
+        android:text="@string/saripaar_v2"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/saripaarTextView"/>
+
+    <Button
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:id="@+id/saripaarButton"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true" />
+
+    <TextView
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:id="@+id/resultTextView"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:gravity="center"
+        android:layout_above="@+id/saripaarButton"
+        android:layout_below="@+id/registerAnnotationRadioButton"/>
+
+    <SeekBar
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/seekBar"
+        android:layout_below="@+id/saripaarTextView"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:indeterminate="false"/>
+
+    <RadioButton
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Register Annotation with Adapter"
+        android:id="@+id/registerAnnotationRadioButton"
+        android:layout_below="@+id/seekBar"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:checked="false"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_custom_multiple_view_data_adapters.xml b/saripaar-tests/src/main/res/layout/activity_custom_multiple_view_data_adapters.xml
new file mode 100644
index 0000000..2bce2ae
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_custom_multiple_view_data_adapters.xml
@@ -0,0 +1,91 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:paddingLeft="@dimen/activity_horizontal_margin"
+        android:paddingRight="@dimen/activity_horizontal_margin"
+        android:paddingTop="@dimen/activity_vertical_margin"
+        android:paddingBottom="@dimen/activity_vertical_margin" >
+
+    <TextView
+        android:text="@string/saripaar_v2"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/saripaarTextView"/>
+
+    <!--
+        The EditText is separated from FloatLabeledEditText, therefore you can access the EditText
+        directly using the findViewById(int) call. This is just a demonstration on how to use
+        custom views with Saripaar v2.
+    -->
+    <com.wrapp.floatlabelededittext.FloatLabeledEditText
+        android:id="@+id/emailFloatLabelEditText"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/saripaarTextView">
+
+        <EditText
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="Email"
+            android:inputType="textEmailAddress"
+            android:id="@+id/emailEditText"/>
+    </com.wrapp.floatlabelededittext.FloatLabeledEditText>
+
+    <RadioButton
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Register Adapter for Email"
+        android:id="@+id/registerEmailAdapterRadioButton"
+        android:layout_below="@+id/emailFloatLabelEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:checked="false"/>
+
+    <com.wrapp.floatlabelededittext.FloatLabeledEditText
+        android:id="@+id/maxFloatLabelEditText"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/registerEmailAdapterRadioButton">
+
+        <EditText
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="Max"
+            android:inputType="textEmailAddress"
+            android:id="@+id/maxEditText"/>
+    </com.wrapp.floatlabelededittext.FloatLabeledEditText>
+
+    <RadioButton
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Register Adapter for Max"
+        android:id="@+id/registerMaxAdapterRadioButton"
+        android:layout_below="@+id/maxFloatLabelEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:checked="false"/>
+
+    <Button
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:id="@+id/saripaarButton"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true" />
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:id="@+id/resultTextView"
+        android:layout_below="@+id/registerMaxAdapterRadioButton"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:gravity="center"
+        android:layout_alignRight="@+id/emailFloatLabelEditText"
+        android:layout_alignEnd="@+id/emailFloatLabelEditText"
+        android:layout_above="@+id/saripaarButton"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_custom_view_data_adapter.xml b/saripaar-tests/src/main/res/layout/activity_custom_view_data_adapter.xml
new file mode 100644
index 0000000..8670bff
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_custom_view_data_adapter.xml
@@ -0,0 +1,67 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:paddingLeft="@dimen/activity_horizontal_margin"
+        android:paddingRight="@dimen/activity_horizontal_margin"
+        android:paddingTop="@dimen/activity_vertical_margin"
+        android:paddingBottom="@dimen/activity_vertical_margin" >
+
+    <TextView
+        android:text="@string/saripaar_v2"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/saripaarTextView"/>
+
+    <!--
+        The EditText is separated from FloatLabeledEditText, therefore you can access the EditText
+        directly using the findViewById(int) call. This is just a demonstration on how to use
+        custom views with Saripaar v2.
+    -->
+    <com.wrapp.floatlabelededittext.FloatLabeledEditText
+        android:id="@+id/booleanFloatLabelEditText"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/saripaarTextView">
+
+        <EditText
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="Boolean"
+            android:inputType="textEmailAddress"
+            android:id="@+id/booleanEditText"/>
+    </com.wrapp.floatlabelededittext.FloatLabeledEditText>
+
+    <Button
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:id="@+id/saripaarButton"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true" />
+
+    <RadioButton
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Register Adapter for Float Label"
+        android:id="@+id/registerAdapterRadioButton"
+        android:layout_below="@+id/booleanFloatLabelEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:checked="false"/>
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:id="@+id/resultTextView"
+        android:layout_below="@+id/registerAdapterRadioButton"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:gravity="center"
+        android:layout_alignRight="@+id/booleanFloatLabelEditText"
+        android:layout_alignEnd="@+id/booleanFloatLabelEditText"
+        android:layout_above="@+id/saripaarButton"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_optional.xml b/saripaar-tests/src/main/res/layout/activity_optional.xml
new file mode 100644
index 0000000..c738241
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_optional.xml
@@ -0,0 +1,48 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:id="@+id/root"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:paddingLeft="@dimen/activity_horizontal_margin"
+                android:paddingRight="@dimen/activity_horizontal_margin"
+                android:paddingTop="@dimen/activity_vertical_margin"
+                android:paddingBottom="@dimen/activity_vertical_margin">
+
+    <EditText
+        android:id="@+id/emailEditText"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:inputType="textEmailAddress"
+        android:hint="Email"/>
+
+    <CheckBox
+        android:id="@+id/emailUpdatesCheckBox"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/emailEditText"
+        android:text="Send me email updates"/>
+
+    <Button
+        android:id="@+id/saripaarButton"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <TextView
+        android:id="@+id/resultTextView"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:layout_below="@+id/emailUpdatesCheckBox"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_above="@+id/saripaarButton"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:gravity="center"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_quick_rule_only.xml b/saripaar-tests/src/main/res/layout/activity_quick_rule_only.xml
new file mode 100644
index 0000000..de3bfa1
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_quick_rule_only.xml
@@ -0,0 +1,46 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:paddingLeft="@dimen/activity_horizontal_margin"
+                android:paddingRight="@dimen/activity_horizontal_margin"
+                android:paddingTop="@dimen/activity_vertical_margin"
+                android:paddingBottom="@dimen/activity_vertical_margin"
+                android:id="@+id/root">
+
+    <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:id="@+id/saripaarButton"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <EditText
+        android:id="@+id/oneOnlyEditText"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:inputType="textPassword"
+        android:hint="1 Only"
+        android:ems="10"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <TextView
+        android:id="@+id/resultTextView"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:layout_below="@+id/oneOnlyEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_above="@+id/saripaarButton"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:gravity="center"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_quick_rule_only_controller.xml b/saripaar-tests/src/main/res/layout/activity_quick_rule_only_controller.xml
new file mode 100644
index 0000000..de3bfa1
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_quick_rule_only_controller.xml
@@ -0,0 +1,46 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:paddingLeft="@dimen/activity_horizontal_margin"
+                android:paddingRight="@dimen/activity_horizontal_margin"
+                android:paddingTop="@dimen/activity_vertical_margin"
+                android:paddingBottom="@dimen/activity_vertical_margin"
+                android:id="@+id/root">
+
+    <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:id="@+id/saripaarButton"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <EditText
+        android:id="@+id/oneOnlyEditText"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:inputType="textPassword"
+        android:hint="1 Only"
+        android:ems="10"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <TextView
+        android:id="@+id/resultTextView"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:layout_below="@+id/oneOnlyEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_above="@+id/saripaarButton"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:gravity="center"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_quick_rule_ordered.xml b/saripaar-tests/src/main/res/layout/activity_quick_rule_ordered.xml
new file mode 100644
index 0000000..00d1f8a
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_quick_rule_ordered.xml
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:paddingLeft="@dimen/activity_horizontal_margin"
+        android:paddingRight="@dimen/activity_horizontal_margin"
+        android:paddingTop="@dimen/activity_vertical_margin"
+        android:paddingBottom="@dimen/activity_vertical_margin" >
+
+    <TextView
+        android:text="@string/saripaar_v2"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/saripaarTextView"/>
+
+    <EditText
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/saripaarTextView"
+        android:hint="Zip Code"
+        android:inputType="number"
+        android:id="@+id/zipCodeEditText" />
+
+    <Button
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:id="@+id/saripaarButton"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true" />
+
+    <TextView
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:id="@+id/resultTextView"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:gravity="center"
+        android:layout_above="@+id/saripaarButton"
+        android:layout_below="@+id/useQuickRuleRadioButton"/>
+
+    <RadioButton
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Use Quick Rule"
+        android:id="@+id/useQuickRuleRadioButton"
+        android:checked="false"
+        android:layout_below="@+id/emailEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"/>
+
+    <EditText
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:hint="Airtel Number"
+        android:id="@+id/airtelNumberEditText"
+        android:layout_below="@+id/zipCodeEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <EditText
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:hint="Email"
+        android:id="@+id/emailEditText"
+        android:layout_below="@+id/airtelNumberEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_quick_rule_unordered.xml b/saripaar-tests/src/main/res/layout/activity_quick_rule_unordered.xml
new file mode 100644
index 0000000..826d1a2
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_quick_rule_unordered.xml
@@ -0,0 +1,66 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:paddingLeft="@dimen/activity_horizontal_margin"
+        android:paddingRight="@dimen/activity_horizontal_margin"
+        android:paddingTop="@dimen/activity_vertical_margin"
+        android:paddingBottom="@dimen/activity_vertical_margin" >
+
+    <TextView
+        android:text="@string/saripaar_v2"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/saripaarTextView"/>
+
+    <EditText
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/saripaarTextView"
+        android:hint="Zip Code"
+        android:inputType="number"
+        android:id="@+id/zipCodeEditText" />
+
+    <Button
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:id="@+id/saripaarButton"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true" />
+
+    <TextView
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:id="@+id/resultTextView"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:gravity="center"
+        android:layout_above="@+id/saripaarButton"
+        android:layout_below="@+id/useQuickRuleRadioButton"/>
+
+    <RadioButton
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Use Quick Rule"
+        android:id="@+id/useQuickRuleRadioButton"
+        android:checked="false"
+        android:layout_below="@+id/airtelNumberEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"/>
+
+    <EditText
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:hint="Airtel Number"
+        android:id="@+id/airtelNumberEditText"
+        android:layout_below="@+id/zipCodeEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_quick_rule_unordered_in_ordered.xml b/saripaar-tests/src/main/res/layout/activity_quick_rule_unordered_in_ordered.xml
new file mode 100644
index 0000000..bbe9e4b
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_quick_rule_unordered_in_ordered.xml
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:paddingLeft="@dimen/activity_horizontal_margin"
+        android:paddingRight="@dimen/activity_horizontal_margin"
+        android:paddingTop="@dimen/activity_vertical_margin"
+        android:paddingBottom="@dimen/activity_vertical_margin" >
+
+    <TextView
+        android:text="@string/saripaar_v2"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/saripaarTextView"/>
+
+    <EditText
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/saripaarTextView"
+        android:hint="Zip Code"
+        android:inputType="number"
+        android:id="@+id/zipCodeEditText" />
+
+    <Button
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:id="@+id/saripaarButton"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true" />
+
+    <TextView
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:id="@+id/resultTextView"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:gravity="center"
+        android:layout_above="@+id/saripaarButton"
+        android:layout_below="@+id/useQuickRuleRadioButton"/>
+
+    <RadioButton
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Use Quick Rule"
+        android:id="@+id/useQuickRuleRadioButton"
+        android:checked="false"
+        android:layout_below="@+id/evenNumberEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"/>
+
+    <EditText
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:hint="Airtel Number"
+        android:id="@+id/airtelNumberEditText"
+        android:layout_below="@+id/zipCodeEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <EditText
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:inputType="number"
+        android:ems="10"
+        android:hint="Even Number"
+        android:id="@+id/evenNumberEditText"
+        android:layout_below="@+id/airtelNumberEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_remove_rules.xml b/saripaar-tests/src/main/res/layout/activity_remove_rules.xml
new file mode 100644
index 0000000..1d53cd1
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_remove_rules.xml
@@ -0,0 +1,64 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:paddingLeft="@dimen/activity_horizontal_margin"
+                android:paddingRight="@dimen/activity_horizontal_margin"
+                android:paddingTop="@dimen/activity_vertical_margin"
+                android:paddingBottom="@dimen/activity_vertical_margin"
+                android:id="@+id/root">
+
+    <Button
+        android:id="@+id/saripaarButton"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <EditText
+        android:id="@+id/emailEditText"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:hint="Email"
+        android:ems="10"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <TextView
+        android:id="@+id/resultTextView"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_above="@+id/saripaarButton"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:gravity="center"
+        android:layout_below="@+id/removeRulesRadioButton"/>
+
+    <RadioButton
+        android:id="@+id/removeRulesRadioButton"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Remove Rules"
+        android:layout_below="@+id/addQuickRuleRadioButton"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:checked="false"/>
+
+    <RadioButton
+        android:id="@+id/addQuickRuleRadioButton"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Add Quick Rule"
+        android:layout_below="@+id/emailEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_un_ordered_sequencing.xml b/saripaar-tests/src/main/res/layout/activity_un_ordered_sequencing.xml
new file mode 100644
index 0000000..8e1d6d8
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_un_ordered_sequencing.xml
@@ -0,0 +1,20 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:paddingLeft="@dimen/activity_horizontal_margin"
+        android:paddingRight="@dimen/activity_horizontal_margin"
+        android:paddingTop="@dimen/activity_vertical_margin"
+        android:paddingBottom="@dimen/activity_vertical_margin"
+        tools:context="com.mobsandgeeks.saripaar.tests.ui.OrderedValidateTillActivity"
+        android:id="@+id/root">
+
+    <include layout="@layout/activity_un_ordered_validate_common" />
+
+    <Button
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:id="@+id/saripaarButton"
+        android:layout_alignParentBottom="true" />
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_un_ordered_validate.xml b/saripaar-tests/src/main/res/layout/activity_un_ordered_validate.xml
new file mode 100644
index 0000000..9452ca5
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_un_ordered_validate.xml
@@ -0,0 +1,19 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:paddingLeft="@dimen/activity_horizontal_margin"
+        android:paddingRight="@dimen/activity_horizontal_margin"
+        android:paddingTop="@dimen/activity_vertical_margin"
+        android:paddingBottom="@dimen/activity_vertical_margin"
+        android:id="@+id/root">
+
+    <include layout="@layout/activity_un_ordered_validate_common" />
+
+    <Button
+        android:id="@+id/saripaarButton"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:layout_alignParentBottom="true" />
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_un_ordered_validate_common.xml b/saripaar-tests/src/main/res/layout/activity_un_ordered_validate_common.xml
new file mode 100644
index 0000000..2e59ff4
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_un_ordered_validate_common.xml
@@ -0,0 +1,97 @@
+<merge xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <TextView
+        android:text="@string/saripaar_v2"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/saripaarTextView"/>
+
+    <EditText
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:inputType="textPersonName"
+        android:ems="10"
+        android:id="@+id/nameEditText"
+        android:hint="Name"
+        android:layout_below="@+id/saripaarTextView"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <EditText
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:inputType="textPostalAddress"
+        android:ems="10"
+        android:id="@+id/addressEditText"
+        android:layout_below="@+id/nameEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignRight="@+id/nameEditText"
+        android:layout_alignEnd="@+id/nameEditText"
+        android:hint="Address"
+        android:lines="3"/>
+
+    <EditText
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:inputType="textEmailAddress"
+        android:ems="10"
+        android:id="@+id/emailEditText"
+        android:layout_below="@+id/addressEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:hint="Email"/>
+
+    <EditText
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:inputType="phone"
+        android:ems="10"
+        android:id="@+id/phoneEditText"
+        android:layout_below="@+id/emailEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignRight="@+id/emailEditText"
+        android:layout_alignEnd="@+id/emailEditText"
+        android:hint="Phone"/>
+
+    <RadioGroup
+        android:orientation="horizontal"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerVertical="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:id="@+id/modeRadioGroup">
+
+        <RadioButton
+            android:id="@+id/burstRadioButton"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:checked="true"
+            android:text="@string/burst"/>
+
+        <RadioButton
+            android:id="@+id/immediateRadioButton"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:text="@string/immediate"/>
+    </RadioGroup>
+
+    <TextView
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:id="@+id/resultTextView"
+        android:layout_below="@+id/modeRadioGroup"
+        android:layout_above="@+id/saripaarButton"
+        android:gravity="center"
+        android:textAlignment="center"/>
+
+</merge>
diff --git a/saripaar-tests/src/main/res/layout/activity_un_ordered_validate_till_before.xml b/saripaar-tests/src/main/res/layout/activity_un_ordered_validate_till_before.xml
new file mode 100644
index 0000000..aa34cc0
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_un_ordered_validate_till_before.xml
@@ -0,0 +1,13 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:paddingLeft="@dimen/activity_horizontal_margin"
+        android:paddingRight="@dimen/activity_horizontal_margin"
+        android:paddingTop="@dimen/activity_vertical_margin"
+        android:paddingBottom="@dimen/activity_vertical_margin"
+        tools:context="com.mobsandgeeks.saripaar.tests.ui.OrderedValidateTillActivity"
+        android:id="@+id/root">
+
+    <include layout="@layout/activity_un_ordered_validate_common" />
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/layout/activity_validate_invisible_views.xml b/saripaar-tests/src/main/res/layout/activity_validate_invisible_views.xml
new file mode 100644
index 0000000..14251ce
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_validate_invisible_views.xml
@@ -0,0 +1,83 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    tools:ignore="HardcodedText">
+
+    <EditText
+        android:id="@+id/nameEditText"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:hint="Name"
+        android:inputType="text" />
+
+    <EditText
+        android:id="@+id/emailEditText"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:layout_below="@+id/nameEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:inputType="textEmailAddress"
+        android:hint="Email" />
+
+    <Button
+        android:id="@+id/saripaarButton"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true" />
+
+    <TextView
+        android:id="@+id/resultTextView"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_below="@+id/validateHiddenViewsCheckBox"
+        android:layout_above="@+id/saripaarButton"
+        android:gravity="center"
+        android:textAppearance="?android:attr/textAppearanceMedium" />
+
+    <RadioGroup
+        android:id="@+id/showHideRadioGroup"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/emailEditText"
+        android:orientation="horizontal">
+
+        <RadioButton
+            android:id="@+id/showRadioButton"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:text="Show View"
+            android:checked="false" />
+
+        <RadioButton
+            android:id="@+id/hideRadioButton"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:text="Hide View"
+            android:checked="false" />
+    </RadioGroup>
+
+    <CheckBox
+        android:id="@+id/validateHiddenViewsCheckBox"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/showHideRadioGroup"
+        android:text="Validate Hidden Views"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/values-v21/styles.xml b/saripaar-tests/src/main/res/values-v21/styles.xml
new file mode 100644
index 0000000..dba3c41
--- /dev/null
+++ b/saripaar-tests/src/main/res/values-v21/styles.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <style name="AppTheme" parent="android:Theme.Material.Light">
+    </style>
+</resources>
diff --git a/saripaar-tests/src/main/res/values-w820dp/dimens.xml b/saripaar-tests/src/main/res/values-w820dp/dimens.xml
new file mode 100644
index 0000000..63fc816
--- /dev/null
+++ b/saripaar-tests/src/main/res/values-w820dp/dimens.xml
@@ -0,0 +1,6 @@
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
diff --git a/saripaar-tests/src/main/res/values/dimens.xml b/saripaar-tests/src/main/res/values/dimens.xml
new file mode 100644
index 0000000..47c8224
--- /dev/null
+++ b/saripaar-tests/src/main/res/values/dimens.xml
@@ -0,0 +1,5 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+</resources>
diff --git a/saripaar-tests/src/main/res/values/strings.xml b/saripaar-tests/src/main/res/values/strings.xml
new file mode 100644
index 0000000..28e050d
--- /dev/null
+++ b/saripaar-tests/src/main/res/values/strings.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <string name="app_name">Saripaar Tests</string>
+    <string name="saripaar_v2">Android Saripaar v2</string>
+
+    <string name="title_activity_address">Address</string>
+    <string name="title_activity_custom_view">Custom View</string>
+    <string name="title_activity_custom_annotation">Custom Annotation</string>
+    <string name="title_activity_custom_annotation_with_adapter">Custom Annotation with Adapter</string>
+    <string name="title_activity_quick_rule">Quick Rule</string>
+    <string name="title_activity_quick_rule_only">Quick Rule Only</string>
+    <string name="title_activity_quick_rule_only_controller">Quick Rule Controller</string>
+    <string name="title_activity_confirm_password">Confirm Password</string>
+    <string name="title_activity_remove_rules">Remove Rules</string>
+    <string name="title_activity_validate_invisible_views">Invisible Views</string>
+    <string name="title_activity_optional">Optional</string>
+
+    <string name="burst">BURST</string>
+    <string name="immediate">IMMEDIATE</string>
+    <string name="success">SUCCESS</string>
+    <string name="failure">FAILURE</string>
+    <string name="crash">CRASH</string>
+
+    <string name="password">Password</string>
+    <string name="confirm_password">Confirm Password</string>
+
+</resources>
diff --git a/saripaar-tests/src/main/res/values/styles.xml b/saripaar-tests/src/main/res/values/styles.xml
new file mode 100644
index 0000000..ff6c9d2
--- /dev/null
+++ b/saripaar-tests/src/main/res/values/styles.xml
@@ -0,0 +1,8 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="android:Theme.Holo.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+    </style>
+
+</resources>
diff --git a/saripaar/.gitignore b/saripaar/.gitignore
new file mode 100644
index 0000000..796b96d
--- /dev/null
+++ b/saripaar/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/saripaar/build.gradle b/saripaar/build.gradle
new file mode 100644
index 0000000..a0f07ab
--- /dev/null
+++ b/saripaar/build.gradle
@@ -0,0 +1,38 @@
+import com.android.builder.core.BuilderConstants
+
+apply plugin: 'com.android.library'
+apply from: '../config/quality.gradle'
+
+android {
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
+
+    lintOptions {
+        abortOnError false
+    }
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 25
+    }
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_6
+        targetCompatibility JavaVersion.VERSION_1_6
+    }
+    libraryVariants.all { variant ->
+        def name = variant.buildType.name
+        if (name.equals(BuilderConstants.DEBUG)) {
+            return; // Skip debug builds.
+        }
+        def task = project.tasks.create "jar${name.capitalize()}", Jar
+        task.dependsOn variant.javaCompile
+        task.from variant.javaCompile.destinationDir
+        artifacts.add('archives', task);
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile 'com.android.support:support-annotations:23.1.1'
+}
+
+apply from: '../gradle-mvn-push.gradle'
diff --git a/saripaar/gradle.properties b/saripaar/gradle.properties
new file mode 100644
index 0000000..3384faa
--- /dev/null
+++ b/saripaar/gradle.properties
@@ -0,0 +1,3 @@
+POM_NAME=Android Saripaar
+POM_ARTIFACT_ID=android-saripaar
+POM_PACKAGING=jar
diff --git a/saripaar/proguard-rules.pro b/saripaar/proguard-rules.pro
new file mode 100644
index 0000000..61ed5e6
--- /dev/null
+++ b/saripaar/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in C:/Program Files (x86)/Android/android-studio/sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/saripaar/src/main/AndroidManifest.xml b/saripaar/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..c4f4329
--- /dev/null
+++ b/saripaar/src/main/AndroidManifest.xml
@@ -0,0 +1,5 @@
+<manifest package="com.mobsandgeeks.saripaar">
+
+    <application />
+
+</manifest>
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java
new file mode 100644
index 0000000..980ea8e
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java
@@ -0,0 +1,67 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar;
+
+import android.content.Context;
+
+import java.lang.annotation.Annotation;
+
+/**
+ * Saripaar {@link java.lang.annotation.Annotation}s have an
+ * {@link com.mobsandgeeks.saripaar.AnnotationRule} paired to them, via the
+ * {@link com.mobsandgeeks.saripaar.annotation.ValidateUsing} annotation. Like stock annotations,
+ * custom annotations must also have a corresponding
+ * {@link com.mobsandgeeks.saripaar.AnnotationRule}.
+ *
+ * @param <RULE_ANNOTATION>  The associated rule {@link java.lang.annotation.Annotation}.
+ * @param <DATA_TYPE>  The data type this rule operates on.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public abstract class AnnotationRule<RULE_ANNOTATION extends Annotation, DATA_TYPE>
+        extends Rule<DATA_TYPE> {
+
+    protected final RULE_ANNOTATION mRuleAnnotation;
+
+    /**
+     * Constructor. It is mandatory that all subclasses MUST have a constructor with the same
+     * signature.
+     *
+     * @param ruleAnnotation  The rule {@link java.lang.annotation.Annotation} instance to which
+     *      this rule is paired.
+     */
+    protected AnnotationRule(final RULE_ANNOTATION ruleAnnotation) {
+        super(ruleAnnotation != null
+                ? Reflector.getAttributeValue(ruleAnnotation, "sequence", Integer.TYPE) : -1);
+        if (ruleAnnotation == null) {
+            throw new IllegalArgumentException("'ruleAnnotation' cannot be null.");
+        }
+        mRuleAnnotation = ruleAnnotation;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public String getMessage(final Context context) {
+        final int messageResId = Reflector.getAttributeValue(mRuleAnnotation, "messageResId",
+                Integer.class);
+
+        return messageResId != -1
+                ? context.getString(messageResId)
+                : Reflector.getAttributeValue(mRuleAnnotation, "message", String.class);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ContextualAnnotationRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ContextualAnnotationRule.java
new file mode 100644
index 0000000..a51d9f3
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ContextualAnnotationRule.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar;
+
+import java.lang.annotation.Annotation;
+
+/**
+ * An {@link com.mobsandgeeks.saripaar.AnnotationRule} that has access to a
+ * {@link com.mobsandgeeks.saripaar.ValidationContext}.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public abstract class ContextualAnnotationRule<RULE_ANNOTATION extends Annotation, DATA_TYPE>
+        extends AnnotationRule<RULE_ANNOTATION, DATA_TYPE> {
+
+    protected ValidationContext mValidationContext;
+
+    /**
+     * Constructor. All subclasses MUST have a constructor with the same signature.
+     *
+     * @param ruleAnnotation  The rule {@link Annotation} instance to which this rule is paired.
+     * @param validationContext  A {@link ValidationContext}.
+     */
+    protected ContextualAnnotationRule(final RULE_ANNOTATION ruleAnnotation,
+            final ValidationContext validationContext) {
+        super(ruleAnnotation);
+        if (validationContext == null) {
+            throw new IllegalArgumentException("'validationContext' cannot be null.");
+        }
+        mValidationContext = validationContext;
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/DateFormats.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/DateFormats.java
new file mode 100644
index 0000000..be473a0
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/DateFormats.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar;
+
+/**
+ * A collection of the most commonly used date format constants.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public final class DateFormats {
+
+    public static final String DMY = "dd-MM-yyyy";
+    public static final String YMD = "yyyy-MM-dd";
+    public static final String MDY = "MM-dd-yyyy";
+
+    public static final String DMY_TIME_12_HOURS = "dd-MM-yyyy hh:mm aa";
+    public static final String YMD_TIME_12_HOURS = "yyyy-MM-dd hh:mm aa";
+    public static final String MDY_TIME_12_HOURS = "MM-dd-yyyy hh:mm aa";
+
+    public static final String DMY_TIME_24_HOURS = "dd-MM-yyyy kk:mm";
+    public static final String YMD_TIME_24_HOURS = "yyyy-MM-dd kk:mm";
+    public static final String MDY_TIME_24_HOURS = "MM-dd-yyyy kk:mm";
+
+    private DateFormats() {
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/DefaultViewValidatedAction.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/DefaultViewValidatedAction.java
new file mode 100644
index 0000000..37b12b0
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/DefaultViewValidatedAction.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar;
+
+import android.view.View;
+import android.widget.TextView;
+
+/**
+ * A default implementation of the {@link com.mobsandgeeks.saripaar.Validator.ViewValidatedAction}
+ * that clears error messages on {@link android.widget.EditText} views by calling the
+ * {@link android.widget.TextView#setError(CharSequence)} with a {@code null} parameter.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class DefaultViewValidatedAction implements Validator.ViewValidatedAction {
+
+    @Override
+    public void onAllRulesPassed(final View view) {
+        boolean isTextView = view instanceof TextView;
+        if (isTextView) {
+            ((TextView) view).setError(null);
+        }
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/QuickRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/QuickRule.java
new file mode 100644
index 0000000..9fd101b
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/QuickRule.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar;
+
+import android.view.View;
+
+/**
+ * Unlike {@link com.mobsandgeeks.saripaar.AnnotationRule}s,
+ * {@link com.mobsandgeeks.saripaar.QuickRule}s can exist without Annotations. These rules are
+ * directly applied to {@link android.view.View}s. They are added to the
+ * {@link com.mobsandgeeks.saripaar.Validator} using the
+ * {@link com.mobsandgeeks.saripaar.Validator#put(android.view.View, QuickRule[])} method.
+ *
+ * @param <VIEW>  The {@link android.view.View} on which this rule is to be applied.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public abstract class QuickRule<VIEW extends View> extends Rule<VIEW> {
+
+    /**
+     * Default constructor.
+     */
+    protected QuickRule() {
+        super(-1);
+    }
+
+    /**
+     * Constructor.
+     *
+     * @param sequence  A non-negative integer value.
+     */
+    protected QuickRule(final int sequence) {
+        super(sequence);
+        if (sequence < 0) {
+            String message = "'sequence' should be a non-negative integer.";
+            throw new IllegalArgumentException(message);
+        }
+    }
+
+    /**
+     * Checks if the rule is valid.
+     *
+     * @param view  The {@link android.view.View} on which the rule has to be applied.
+     *
+     * @return true if valid, false otherwise.
+     */
+    public abstract boolean isValid(VIEW view);
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Reflector.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Reflector.java
new file mode 100644
index 0000000..17fc6b3
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Reflector.java
@@ -0,0 +1,303 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar;
+
+import android.view.View;
+
+import com.mobsandgeeks.saripaar.adapter.ViewDataAdapter;
+import com.mobsandgeeks.saripaar.annotation.ValidateUsing;
+import com.mobsandgeeks.saripaar.exception.SaripaarViolationException;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+
+/**
+ * Contains reflection methods that are helpful for introspection and retrieval of frequently used
+ * methods and attributes.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+final class Reflector {
+
+    /**
+     * Retrieves the attribute method of the given {@link java.lang.annotation.Annotation}.
+     *
+     * @param annotationType  The {@link java.lang.annotation.Annotation}
+     *      {@link java.lang.Class} to check.
+     * @param attributeName  Attribute name.
+     *
+     * @return The {@link java.lang.reflect.Method} if the attribute is present,
+     *      null otherwise.
+     */
+    static Method getAttributeMethod(final Class<? extends Annotation> annotationType,
+            final String attributeName) {
+        Method attributeMethod = null;
+        try {
+            attributeMethod = annotationType.getMethod(attributeName);
+        } catch (NoSuchMethodException e) {
+            e.printStackTrace();
+        }
+        return attributeMethod;
+    }
+
+    /**
+     * Retrieve an attribute value from an {@link java.lang.annotation.Annotation}.
+     *
+     * @param annotation  An {@link java.lang.annotation.Annotation} instance.
+     * @param attributeName  Attribute name.
+     * @param attributeDataType  {@link java.lang.Class} representing the attribute data type.
+     * @param <T>  Attribute value type.
+     *
+     * @return The attribute value.
+     */
+    @SuppressWarnings("unchecked")
+    static <T> T getAttributeValue(final Annotation annotation, final String attributeName,
+            final Class<T> attributeDataType) {
+
+        T attributeValue = null;
+        Class<? extends Annotation> annotationType = annotation.annotationType();
+        Method attributeMethod = getAttributeMethod(annotationType, attributeName);
+
+        if (attributeMethod == null) {
+            String message = String.format("Cannot find attribute '%s' in annotation '%s'.",
+                    attributeName, annotationType.getName());
+            throw new IllegalStateException(message);
+        } else {
+            try {
+                Object result = attributeMethod.invoke(annotation);
+                attributeValue = attributeDataType.isPrimitive()
+                        ? (T) result
+                        : attributeDataType.cast(result);
+            } catch (IllegalAccessException e) {
+                e.printStackTrace();
+            } catch (InvocationTargetException e) {
+                e.printStackTrace();
+            }
+        }
+
+        return attributeValue;
+    }
+
+    /**
+     * Checks if an annotation was annotated with the given annotation.
+     *
+     * @param inspected  The {@link java.lang.annotation.Annotation} to be checked.
+     * @param expected  The {@link java.lang.annotation.Annotation} that we are looking for.
+     *
+     * @return true if the annotation is present, false otherwise.
+     */
+    static boolean isAnnotated(final Class<? extends Annotation> inspected,
+            final Class<? extends Annotation> expected) {
+        boolean isAnnotated = false;
+        Annotation[] declaredAnnotations = inspected.getDeclaredAnnotations();
+        for (Annotation declaredAnnotation : declaredAnnotations) {
+            isAnnotated = expected.equals(declaredAnnotation.annotationType());
+            if (isAnnotated) {
+                break;
+            }
+        }
+        return isAnnotated;
+    }
+
+    /**
+     * Finds and returns the correct
+     * {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter#getData(android.view.View)}
+     * {@link java.lang.reflect.Method}.
+     *
+     * @param dataAdapterType  The {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}
+     *      class whose {@code getData(View)} method is required.
+     *
+     * @return The correct {@code getData(View)} method.
+     */
+    static Method findGetDataMethod(final Class<? extends ViewDataAdapter> dataAdapterType) {
+        Method getDataMethod = null;
+        Method[] declaredMethods = dataAdapterType.getDeclaredMethods();
+
+        for (Method method : declaredMethods) {
+            boolean methodNameIsGetData = "getData".equals(method.getName());
+
+            if (methodNameIsGetData) {
+                // If we don't declare a throws clause in the method signature, the compiler
+                // creates an auto-generated volatile method with the java.lang.Object return type.
+                int modifiers = method.getModifiers();
+                boolean nonVolatile = !Modifier.isVolatile(modifiers);
+
+                // Single 'View' parameter
+                Class<?>[] parameterTypes = method.getParameterTypes();
+                boolean hasSingleViewParameter = parameterTypes.length == 1
+                        && View.class.isAssignableFrom(parameterTypes[0]);
+
+                if (nonVolatile && hasSingleViewParameter) {
+                    getDataMethod = method;
+                    break;
+                }
+            }
+        }
+        return getDataMethod;
+    }
+
+    /**
+     * Instantiates a {@link AnnotationRule} object for the given type.
+     *
+     * @param ruleType  The {@link AnnotationRule} class to be instantiated.
+     * @param ruleAnnotation  The rule {@link java.lang.annotation.Annotation} associated with
+     *      the {@link AnnotationRule}.
+     *
+     * @return The instantiated {@link AnnotationRule} object.
+     *
+     * @throws SaripaarViolationException if {@link AnnotationRule} does not
+     *      have a single-argument constructor that accepts a rule
+     *      {@link java.lang.annotation.Annotation} instance.
+     */
+    static AnnotationRule instantiateRule(final Class<? extends AnnotationRule> ruleType,
+            final Annotation ruleAnnotation, final ValidationContext validationContext)
+                    throws SaripaarViolationException {
+        AnnotationRule rule = null;
+
+        try {
+            if (ContextualAnnotationRule.class.isAssignableFrom(ruleType)) {
+                Constructor<?> constructor = ruleType.getDeclaredConstructor(
+                        ruleAnnotation.annotationType(), ValidationContext.class);
+                constructor.setAccessible(true);
+                rule = (AnnotationRule) constructor.newInstance(ruleAnnotation, validationContext);
+            } else if (AnnotationRule.class.isAssignableFrom(ruleType)) {
+                Constructor<?> constructor = ruleType.getDeclaredConstructor(
+                        ruleAnnotation.annotationType());
+                constructor.setAccessible(true);
+                rule = (AnnotationRule) constructor.newInstance(ruleAnnotation);
+            }
+        } catch (NoSuchMethodException e) {
+            String message = getMissingConstructorErrorMessage(ruleType,
+                    ruleAnnotation.annotationType());
+            throw new SaripaarViolationException(message);
+        } catch (InvocationTargetException e) {
+            e.printStackTrace();
+        } catch (InstantiationException e) {
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        }
+
+        return rule;
+    }
+
+    /**
+     * Method finds the data type of the {@link AnnotationRule} that is tied up to the given rule
+     * annotation.
+     *
+     * @param ruleAnnotation  Rule {@link java.lang.annotation.Annotation}.
+     *
+     * @return The expected data type for the
+     *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}s.
+     */
+    static Class<?> getRuleDataType(final Annotation ruleAnnotation) {
+        ValidateUsing validateUsing = getValidateUsingAnnotation(ruleAnnotation.annotationType());
+        return getRuleDataType(validateUsing);
+    }
+
+    /**
+     * Method finds the data type of the {@link AnnotationRule} that is tied up to the given rule
+     * annotation.
+     *
+     * @param validateUsing  The {@link com.mobsandgeeks.saripaar.annotation.ValidateUsing}
+     *      instance.
+     *
+     * @return The expected data type for the
+     *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}s.
+     */
+    static Class<?> getRuleDataType(final ValidateUsing validateUsing) {
+        Class<? extends AnnotationRule> rule = validateUsing.value();
+        Method[] methods = rule.getDeclaredMethods();
+        return getRuleTypeFromIsValidMethod(rule, methods);
+    }
+
+    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     *  Private Methods
+     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     */
+    private static ValidateUsing getValidateUsingAnnotation(
+            final Class<? extends Annotation> annotationType) {
+        ValidateUsing validateUsing = null;
+
+        Annotation[] declaredAnnotations = annotationType.getDeclaredAnnotations();
+        for (Annotation annotation : declaredAnnotations) {
+            if (ValidateUsing.class.equals(annotation.annotationType())) {
+                validateUsing = (ValidateUsing) annotation;
+                break;
+            }
+        }
+        return validateUsing;
+    }
+
+    private static String getMissingConstructorErrorMessage(
+            final Class<? extends AnnotationRule> ruleType,
+            final Class<? extends Annotation> annotationType) {
+
+        String message = null;
+        if (ContextualAnnotationRule.class.isAssignableFrom(ruleType)) {
+            message = String.format("A constructor accepting a '%s' and a '%s' is required for %s.",
+                    annotationType.getName(), ValidationContext.class,
+                    ruleType.getName());
+        } else if (AnnotationRule.class.isAssignableFrom(ruleType)) {
+            message = String.format(
+                    "'%s' should have a single-argument constructor that accepts a '%s' instance.",
+                    ruleType.getName(), annotationType.getName());
+        }
+
+        return message;
+    }
+
+    private static Class<?> getRuleTypeFromIsValidMethod(final Class<? extends AnnotationRule> rule,
+            final Method[] methods) {
+
+        Class<?> returnType = null;
+        for (Method method : methods) {
+            Class<?>[] parameterTypes = method.getParameterTypes();
+
+            if (matchesIsValidMethodSignature(method, parameterTypes)) {
+                // This will be null, if there are no matching methods
+                // in the class with a similar signature.
+                if (returnType != null) {
+                    String message = String.format(
+                            "Found duplicate 'boolean isValid(T)' method signature in '%s'.",
+                            rule.getName());
+                    throw new SaripaarViolationException(message);
+                }
+                returnType = parameterTypes[0];
+            }
+        }
+        return returnType;
+    }
+
+    private static boolean matchesIsValidMethodSignature(final Method method,
+            final Class<?>[] parameterTypes) {
+        int modifiers = method.getModifiers();
+
+        boolean isPublic = Modifier.isPublic(modifiers);
+        boolean nonVolatile = !Modifier.isVolatile(modifiers);
+        boolean returnsBoolean = Boolean.TYPE.equals(method.getReturnType());
+        boolean matchesMethodName = "isValid".equals(method.getName());
+        boolean hasSingleParameter = parameterTypes.length == 1;
+
+        return isPublic && nonVolatile && returnsBoolean && matchesMethodName && hasSingleParameter;
+    }
+
+    private Reflector() {
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Registry.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Registry.java
new file mode 100644
index 0000000..386a9f7
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Registry.java
@@ -0,0 +1,315 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar;
+
+import android.util.Log;
+import android.view.View;
+import android.widget.CheckBox;
+import android.widget.RadioButton;
+import android.widget.RadioGroup;
+import android.widget.Spinner;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.adapter.CheckBoxBooleanAdapter;
+import com.mobsandgeeks.saripaar.adapter.RadioButtonBooleanAdapter;
+import com.mobsandgeeks.saripaar.adapter.RadioGroupBooleanAdapter;
+import com.mobsandgeeks.saripaar.adapter.SpinnerIndexAdapter;
+import com.mobsandgeeks.saripaar.adapter.TextViewDoubleAdapter;
+import com.mobsandgeeks.saripaar.adapter.TextViewFloatAdapter;
+import com.mobsandgeeks.saripaar.adapter.TextViewIntegerAdapter;
+import com.mobsandgeeks.saripaar.adapter.TextViewStringAdapter;
+import com.mobsandgeeks.saripaar.adapter.ViewDataAdapter;
+import com.mobsandgeeks.saripaar.annotation.ValidateUsing;
+import com.mobsandgeeks.saripaar.exception.SaripaarViolationException;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * Maintains a registry of all {@link android.view.View}s and
+ * {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}s that are registered to rule
+ * {@link java.lang.annotation.Annotation}s.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+final class Registry {
+    // Constants
+    private static final String TAG = "Registry";
+
+    // Stock adapters that come with Saripaar
+    private static final Map<Class<? extends View>,
+            HashMap<Class<?>, ViewDataAdapter>> STOCK_ADAPTERS =
+                    new HashMap<Class<? extends View>, HashMap<Class<?>, ViewDataAdapter>>();
+
+    // Attributes
+    private Map<Class<? extends Annotation>,
+            HashMap<Class<? extends View>, ViewDataAdapter>> mMappings;
+
+    /**
+     * Good Ol' constructor.
+     */
+    Registry() {
+        mMappings = new HashMap<Class<? extends Annotation>,
+                HashMap<Class<? extends View>, ViewDataAdapter>>();
+    }
+
+    /**
+     * This is a convenience method for Annotations that operate on {@link android.widget.TextView}
+     * and it's subclasses such as {@link android.widget.EditText}. Use this to register your custom
+     * annotation if your {@link AnnotationRule} performs validations on
+     * {@link java.lang.String}s, {@link java.lang.Integer}s, {@link java.lang.Float}s and
+     * {@link java.lang.Double} values.
+     *
+     * @param ruleAnnotations  Varargs of rule {@link java.lang.annotation.Annotation}s that operate
+     *      on {@link android.widget.TextView}s.
+     */
+    @SuppressWarnings("unchecked")
+    void register(final Class<? extends Annotation>... ruleAnnotations) {
+        for (Class<? extends Annotation> ruleAnnotation : ruleAnnotations) {
+            assertIsValidRuleAnnotation(ruleAnnotation);
+
+            final ValidateUsing validateUsing = ruleAnnotation.getAnnotation(ValidateUsing.class);
+            final Class<?> ruleDataType = Reflector.getRuleDataType(validateUsing);
+
+            HashMap<Class<?>, ViewDataAdapter> viewDataAdapterMap =
+                    STOCK_ADAPTERS.get(TextView.class);
+            if (viewDataAdapterMap != null) {
+                ViewDataAdapter dataAdapter = viewDataAdapterMap.get(ruleDataType);
+                if (dataAdapter != null) {
+                    register(TextView.class, ruleDataType, dataAdapter, ruleAnnotation);
+                } else {
+                    String message = String.format(
+                            "Unable to find a matching adapter for `%s`, that returns a `%s`.",
+                            ruleAnnotation.getName(), ruleDataType.getName());
+                    throw new SaripaarViolationException(message);
+                }
+            }
+        }
+    }
+
+    /**
+     * Registers {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}s for the associated
+     * {@link AnnotationRule}s and their {@link android.view.View}s.
+     *
+     * @param viewType  The {@link android.view.View} type on which the {@link AnnotationRule}
+     *      can be used.
+     * @param ruleDataType  Data type expected by the {@link AnnotationRule}.
+     * @param viewDataAdapter  The {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}
+     *      that can get the data for the {@link AnnotationRule} from the
+     *      {@link android.view.View}.
+     * @param ruleAnnotations  Varargs of rule {@link java.lang.annotation.Annotation}s that
+     *      can be used with the {@link android.view.View} and the
+     *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}.
+     *
+     * @param <VIEW>  Type parameter that is a subclass of {@link android.view.View} class.
+     * @param <DATA_TYPE>  Data type expected by the {@link AnnotationRule} and
+     *      is returned by the {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}.
+     */
+    <VIEW extends View, DATA_TYPE> void register(
+            final Class<VIEW> viewType,
+            final Class<DATA_TYPE> ruleDataType,
+            final ViewDataAdapter<VIEW, DATA_TYPE> viewDataAdapter,
+            final Class<? extends Annotation>... ruleAnnotations) {
+
+        if (ruleAnnotations != null && ruleAnnotations.length > 0) {
+            for (Class<? extends Annotation> ruleAnnotation : ruleAnnotations) {
+                register(ruleAnnotation, ruleDataType, viewType, viewDataAdapter);
+            }
+        }
+    }
+
+    /**
+     * Retrieve all registered rule annotations.
+     *
+     * @return {@link java.util.Set} containing all registered rule
+     *      {@link java.lang.annotation.Annotation}s.
+     */
+    Set<Class<? extends Annotation>> getRegisteredAnnotations() {
+        return mMappings.keySet();
+    }
+
+    /**
+     * Retrieves the registered {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} associated
+     * with the rule {@link java.lang.annotation.Annotation} and
+     * {@link android.view.View}. If no registered adapter is not found, the method looks for a
+     * compatible adapter instead.
+     *
+     * @param annotationType  The rule annotation type that requires a data adapter.
+     * @param viewType  The {@link android.view.View} whose adapter we are looking for.
+     *
+     * @param <VIEW>  Type parameter that ensures type safety for the {@link View} and
+     *      the {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}.
+     *
+     * @return Registered or compatible
+     *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} or null if none is
+     *      found.
+     */
+    @SuppressWarnings("unchecked")
+    <VIEW extends View> ViewDataAdapter<VIEW, ?> getDataAdapter(
+            final Class< ? extends Annotation> annotationType,
+            final Class<VIEW> viewType) {
+
+        HashMap<Class<? extends View>, ViewDataAdapter> viewDataAdapterHashMap =
+            mMappings.get(annotationType);
+
+        // Check for a direct match
+        ViewDataAdapter matchingViewAdapter = null;
+        if (viewDataAdapterHashMap != null) {
+            matchingViewAdapter = viewDataAdapterHashMap.get(viewType);
+
+            // If no 'ViewDataAdapter' is registered, check for a compatible one
+            if (matchingViewAdapter == null) {
+                matchingViewAdapter = getCompatibleViewDataAdapter(viewDataAdapterHashMap,
+                        viewType);
+            }
+        }
+
+        return matchingViewAdapter;
+    }
+
+    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     *  Private Methods
+     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     */
+    private <VIEW extends View, DATA_TYPE> void register(
+            final Class<? extends Annotation> ruleAnnotation,
+            final Class<DATA_TYPE> ruleDataType,
+            final Class<VIEW> view,
+            final ViewDataAdapter<VIEW, DATA_TYPE> viewDataAdapter) {
+        assertIsValidRuleAnnotation(ruleAnnotation);
+        assertCompatibleReturnType(ruleDataType, viewDataAdapter);
+
+        // Get the view-adapter pairs registered to a rule annotation.
+        HashMap<Class<? extends View>, ViewDataAdapter> viewAdapterPairs;
+        if (mMappings.containsKey(ruleAnnotation)) {
+            viewAdapterPairs = mMappings.get(ruleAnnotation);
+        } else {
+            viewAdapterPairs = new HashMap<Class<? extends View>, ViewDataAdapter>();
+            mMappings.put(ruleAnnotation, viewAdapterPairs);
+        }
+
+        if (viewAdapterPairs.containsKey(view)) {
+            String message = String.format("A '%s' for '%s' has already been registered.",
+                    ruleAnnotation.getName(), view.getName());
+            Log.w(TAG, message);
+        } else {
+            viewAdapterPairs.put(view, viewDataAdapter);
+        }
+    }
+
+    private void assertIsValidRuleAnnotation(final Class<? extends Annotation> ruleAnnotation) {
+        // 1. Check for @ValidateUsing annotation
+        boolean validRuleAnnotation = Reflector.isAnnotated(ruleAnnotation, ValidateUsing.class);
+        if (!validRuleAnnotation) {
+            String message = String.format("'%s' is not annotated with '%s'.",
+                    ruleAnnotation.getName(), ValidateUsing.class.getName());
+            throw new IllegalArgumentException(message);
+        }
+
+        // 2. Check for 'sequence' attribute
+        assertAttribute(ruleAnnotation, "sequence", Integer.TYPE);
+
+        // 3. Check for 'message' attribute
+        assertAttribute(ruleAnnotation, "message", String.class);
+
+        // 4. Check for 'messageResId' attribute
+        assertAttribute(ruleAnnotation, "messageResId", Integer.TYPE);
+    }
+
+    private void assertAttribute(final Class<? extends Annotation> annotationType,
+            final String attributeName, final Class<?> attributeType) {
+        Method attributeMethod = Reflector.getAttributeMethod(annotationType, attributeName);
+
+        if (attributeMethod == null) {
+            String message = String.format("'%s' requires the '%s' attribute.",
+                    annotationType.getName(), attributeName);
+            throw new SaripaarViolationException(message);
+        }
+
+        final Class<?> returnType = attributeMethod.getReturnType();
+        if (!attributeType.equals(returnType)) {
+            String message = String.format("'%s' in '%s' should be of type '%s', but was '%s'.",
+                    attributeName, annotationType.getName(),
+                    attributeType.getName(), returnType.getName());
+            throw new SaripaarViolationException(message);
+        }
+    }
+
+    private <DATA_TYPE, VIEW extends View> void assertCompatibleReturnType(
+            final Class<DATA_TYPE> ruleDataType,
+            final ViewDataAdapter<VIEW, DATA_TYPE> viewDataAdapter) {
+        Method getDataMethod = Reflector.findGetDataMethod(viewDataAdapter.getClass());
+
+        Class<?> adapterReturnType = getDataMethod.getReturnType();
+        if (!ruleDataType.equals(adapterReturnType)) {
+            String message = String.format("'%s' returns '%s', but expecting '%s'.",
+                    viewDataAdapter.getClass().getName(),
+                    adapterReturnType.getName(),
+                    ruleDataType.getName());
+            throw new IllegalArgumentException(message);
+        }
+    }
+
+    private <VIEW extends View> ViewDataAdapter getCompatibleViewDataAdapter(
+            final HashMap<Class<? extends View>, ViewDataAdapter> viewDataAdapterHashMap,
+            final Class<VIEW> viewType) {
+
+        ViewDataAdapter compatibleViewAdapter = null;
+        Set<Class<? extends View>> registeredViews = viewDataAdapterHashMap.keySet();
+        for (Class<? extends View> registeredView : registeredViews) {
+            if (registeredView.isAssignableFrom(viewType)) {
+                compatibleViewAdapter = viewDataAdapterHashMap.get(registeredView);
+            }
+        }
+        return compatibleViewAdapter;
+    }
+
+    // Register all views along with their corresponding adapters
+    static {
+        HashMap<Class<?>, ViewDataAdapter> adapters;
+
+        // CheckBox
+        adapters = new HashMap<Class<?>, ViewDataAdapter>();
+        adapters.put(Boolean.class, new CheckBoxBooleanAdapter());
+        STOCK_ADAPTERS.put(CheckBox.class, adapters);
+
+        // RadioButton
+        adapters = new HashMap<Class<?>, ViewDataAdapter>();
+        adapters.put(Boolean.class, new RadioButtonBooleanAdapter());
+        STOCK_ADAPTERS.put(RadioButton.class, adapters);
+
+        // RadioGroup
+        adapters = new HashMap<Class<?>, ViewDataAdapter>();
+        adapters.put(Boolean.class, new RadioGroupBooleanAdapter());
+        STOCK_ADAPTERS.put(RadioGroup.class, adapters);
+
+        // Spinner
+        adapters = new HashMap<Class<?>, ViewDataAdapter>();
+        adapters.put(Integer.class, new SpinnerIndexAdapter());
+        STOCK_ADAPTERS.put(Spinner.class, adapters);
+
+        // TextView
+        adapters = new HashMap<Class<?>, ViewDataAdapter>();
+        adapters.put(String.class, new TextViewStringAdapter());
+        adapters.put(Integer.class, new TextViewIntegerAdapter());
+        adapters.put(Float.class, new TextViewFloatAdapter());
+        adapters.put(Double.class, new TextViewDoubleAdapter());
+        STOCK_ADAPTERS.put(TextView.class, adapters);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
new file mode 100644
index 0000000..7c75ff3
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
@@ -0,0 +1,69 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar;
+
+import android.content.Context;
+
+/**
+ * This is a base interface for {@link com.mobsandgeeks.saripaar.AnnotationRule} and
+ * {@link com.mobsandgeeks.saripaar.QuickRule}.
+ *
+ * @param <VALIDATABLE>  A data type for an {@link com.mobsandgeeks.saripaar.AnnotationRule} and
+ *      a {@link android.view.View} for a {@link com.mobsandgeeks.saripaar.QuickRule}.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 1.0
+ */
+public abstract class Rule<VALIDATABLE> {
+    private final int mSequence;
+
+    /**
+     * Constructor.
+     *
+     * @param sequence  The sequence number for this {@link com.mobsandgeeks.saripaar.Rule}.
+     */
+    protected Rule(final int sequence) {
+        mSequence = sequence;
+    }
+
+    /**
+     * Checks if the rule is valid.
+     *
+     * @param validatable  Element on which the validation is applied, could be a data type or a
+     *      {@link android.view.View}.
+     *
+     * @return true if valid, false otherwise.
+     */
+    public abstract boolean isValid(VALIDATABLE validatable);
+
+    /**
+     * Returns a failure message associated with the rule.
+     *
+     * @param context  Any {@link android.content.Context} instance, usually an
+     *      {@link android.app.Activity}.
+     *
+     * @return A failure message.
+     */
+    public abstract String getMessage(Context context);
+
+    /**
+     * Returns the sequence of the {@link com.mobsandgeeks.saripaar.Rule}.
+     *
+     * @return The sequence.
+     */
+    public final int getSequence() {
+        return mSequence;
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/SaripaarFieldsComparator.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/SaripaarFieldsComparator.java
new file mode 100644
index 0000000..467e06e
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/SaripaarFieldsComparator.java
@@ -0,0 +1,65 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar;
+
+import com.mobsandgeeks.saripaar.annotation.Order;
+
+import java.lang.reflect.Field;
+import java.util.Comparator;
+
+/**
+ * Sorts the {@link android.view.View} {@link java.lang.reflect.Field} objects based on the
+ * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+final class SaripaarFieldsComparator implements Comparator<Field> {
+    private boolean mOrderedFields = true;
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public int compare(final Field lhsField, final Field rhsField) {
+        final Order lhsOrderAnnotation = lhsField.getAnnotation(Order.class);
+        final Order rhsOrderAnnotation = rhsField.getAnnotation(Order.class);
+
+        int comparison;
+        if (lhsOrderAnnotation == null || rhsOrderAnnotation == null) {
+            mOrderedFields = false;
+            comparison = 0;
+        } else {
+            int lhsOrder = lhsOrderAnnotation.value();
+            int rhsOrder = rhsOrderAnnotation.value();
+
+            comparison = lhsOrder == rhsOrder
+                    ? 0 : lhsOrder > rhsOrder ? 1 : -1;
+        }
+
+        return comparison;
+    }
+
+    /**
+     * Tells if the fields are ordered. Useful only after the
+     * {@link com.mobsandgeeks.saripaar.SaripaarFieldsComparator} is used to sort collection. Will
+     * return true, if this method is called on an unused instance.
+     *
+     * @return true if all the fields are ordered, false otherwise.
+     */
+    boolean areOrderedFields() {
+        return mOrderedFields;
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/SequenceComparator.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/SequenceComparator.java
new file mode 100644
index 0000000..8307981
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/SequenceComparator.java
@@ -0,0 +1,46 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar;
+
+import android.util.Pair;
+
+import com.mobsandgeeks.saripaar.adapter.ViewDataAdapter;
+
+import java.util.Comparator;
+
+/**
+ * Sorts the {@link com.mobsandgeeks.saripaar.Rule} and
+ * {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} pairs based on the
+ * 'sequence' attribute.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+final class SequenceComparator implements Comparator<Pair<Rule, ViewDataAdapter>> {
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public int compare(final Pair<Rule, ViewDataAdapter> lhsPair,
+            final Pair<Rule, ViewDataAdapter> rhsPair) {
+
+        final int lhsSequence = lhsPair.first.getSequence();
+        final int rhsSequence = rhsPair.first.getSequence();
+
+        return lhsSequence == rhsSequence
+                ? 0 : lhsSequence > rhsSequence ? 1 : -1;
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationContext.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationContext.java
new file mode 100644
index 0000000..c4d32c6
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationContext.java
@@ -0,0 +1,149 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar;
+
+import android.content.Context;
+import android.util.Pair;
+import android.view.View;
+
+import com.mobsandgeeks.saripaar.adapter.ViewDataAdapter;
+import com.mobsandgeeks.saripaar.annotation.ValidateUsing;
+import com.mobsandgeeks.saripaar.exception.ConversionException;
+
+import java.lang.annotation.Annotation;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * Grants access to information about other {@link android.view.View}s in the controller object.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class ValidationContext {
+
+    // Attributes
+    private Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> mViewRulesMap;
+    private Context mContext;
+
+    ValidationContext(final Context context) {
+        this.mContext = context;
+    }
+
+    /**
+     * Retrieves all {@link android.view.View}s that are annotated with the specified annotation.
+     *
+     * @param saripaarAnnotation  The annotation we are interested in.
+     *
+     * @return A {@link java.util.List} of {@link android.view.View}s annotated with the
+     *      given annotation.
+     */
+    public List<View> getAnnotatedViews(final Class<? extends Annotation> saripaarAnnotation) {
+        assertNotNull(saripaarAnnotation, "saripaarAnnotation");
+        assertIsRegisteredAnnotation(saripaarAnnotation);
+
+        // Get the AnnotationRule class
+        Class<? extends AnnotationRule> annotationRuleClass = getRuleClass(saripaarAnnotation);
+
+        // Find all views with the target rule
+        List<View> annotatedViews = new ArrayList<View>();
+        Set<View> views = mViewRulesMap.keySet();
+        for (View view : views) {
+            ArrayList<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs = mViewRulesMap.get(view);
+            for (Pair<Rule, ViewDataAdapter> ruleAdapterPair : ruleAdapterPairs) {
+                boolean uniqueMatchingView =
+                        annotationRuleClass.equals(ruleAdapterPair.first.getClass())
+                                && !annotatedViews.contains(view);
+                if (uniqueMatchingView) {
+                    annotatedViews.add(view);
+                }
+            }
+        }
+
+        return annotatedViews;
+    }
+
+    /**
+     * Retrieves the data from the given {@link android.view.View} using the appropriate
+     * {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}.
+     *
+     * @param view  A {@link android.view.View}.
+     * @param saripaarAnnotation  The annotation used to annotate the {@link android.view.View}.
+     *
+     * @return The data that's on the {@link android.view.View}.
+     */
+    public Object getData(final View view, Class<? extends Annotation> saripaarAnnotation) {
+        assertNotNull(view, "view");
+        assertNotNull(saripaarAnnotation, "saripaarAnnotation");
+
+        Object data = null;
+        ArrayList<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs = mViewRulesMap.get(view);
+        Class<? extends AnnotationRule> annotationRuleClass = getRuleClass(saripaarAnnotation);
+
+        for (Pair<Rule, ViewDataAdapter> ruleAdapterPair : ruleAdapterPairs) {
+            if (annotationRuleClass.equals(ruleAdapterPair.first.getClass())) {
+                try {
+                    data = ruleAdapterPair.second.getData(view);
+                } catch (ConversionException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+
+        return data;
+    }
+
+    /**
+     * Get a {@link Context}.
+     *
+     * @return A {@link Context}.
+     */
+    public Context getContext() {
+        return mContext;
+    }
+
+    void setViewRulesMap(final Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> viewRulesMap) {
+        mViewRulesMap = viewRulesMap;
+    }
+
+    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     *  Private Methods
+     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     */
+    private void assertNotNull(final Object object, final String argumentName) {
+        if (object == null) {
+            String message = String.format("'%s' cannot be null.", argumentName);
+            throw new IllegalArgumentException(message);
+        }
+    }
+
+    private void assertIsRegisteredAnnotation(
+            final Class<? extends Annotation> saripaarAnnotation) {
+        if (!Validator.isSaripaarAnnotation(saripaarAnnotation)) {
+            String message = String.format("%s is not a registered Saripaar annotation.",
+                    saripaarAnnotation.getName());
+            throw new IllegalArgumentException(message);
+        }
+    }
+
+    private Class<? extends AnnotationRule> getRuleClass(
+            final Class<? extends Annotation> saripaarAnnotation) {
+        ValidateUsing validateUsingAnnotation = saripaarAnnotation
+                .getAnnotation(ValidateUsing.class);
+        return validateUsingAnnotation.value();
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationError.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationError.java
new file mode 100644
index 0000000..a0b5c04
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationError.java
@@ -0,0 +1,92 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar;
+
+import android.content.Context;
+import android.view.View;
+
+import java.util.List;
+
+/**
+ * Contains a failed {@link android.view.View} and the corresponding
+ * {@link com.mobsandgeeks.saripaar.Rule}.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class ValidationError {
+    private final View view;
+    private final List<Rule> failedRules;
+
+    /**
+     * Constructor.
+     *
+     * @param view  A failed {@link android.view.View}.
+     * @param failedRules  A {@link java.util.List} of failed
+     *      {@link com.mobsandgeeks.saripaar.Rule}s.
+     */
+    ValidationError(final View view, final List<Rule> failedRules) {
+        this.view = view;
+        this.failedRules = failedRules;
+    }
+
+    /**
+     * Gets the failed {@link android.view.View}.
+     *
+     * @return The failed view.
+     */
+    public View getView() {
+        return view;
+    }
+
+    /**
+     * Gets the failed {@link com.mobsandgeeks.saripaar.Rule}s.
+     *
+     * @return A {@link java.util.List} of failed {@link com.mobsandgeeks.saripaar.Rule}s.
+     */
+    public List<Rule> getFailedRules() {
+        return failedRules;
+    }
+
+    /**
+     * Extracts error messages from multiple failed rules and returns a {@link java.lang.String}
+     * object.
+     *
+     * @param context  A {@link android.content.Context}.
+     *
+     * @return A collated error message.
+     */
+    public String getCollatedErrorMessage(final Context context) {
+        StringBuilder stringBuilder = new StringBuilder();
+        for (Rule failedRule : failedRules) {
+            String message = failedRule.getMessage(context).trim();
+            if (message.length() > 0) {
+                stringBuilder.append(message).append('\n');
+            }
+        }
+        return stringBuilder.toString().trim();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public String toString() {
+        return "ValidationError{"
+                + "view=" + view
+                + ", failedRules=" + failedRules
+                + '}';
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
new file mode 100644
index 0000000..1e0aba2
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
@@ -0,0 +1,1070 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar;
+
+import android.app.Activity;
+import android.app.Fragment;
+import android.content.Context;
+import android.os.AsyncTask;
+import android.os.Build;
+import android.os.Handler;
+import android.os.Looper;
+import android.util.Pair;
+import android.view.View;
+import android.widget.CheckBox;
+import android.widget.RadioButton;
+import android.widget.RadioGroup;
+import android.widget.Spinner;
+
+import com.mobsandgeeks.saripaar.adapter.CheckBoxBooleanAdapter;
+import com.mobsandgeeks.saripaar.adapter.RadioButtonBooleanAdapter;
+import com.mobsandgeeks.saripaar.adapter.RadioGroupBooleanAdapter;
+import com.mobsandgeeks.saripaar.adapter.SpinnerIndexAdapter;
+import com.mobsandgeeks.saripaar.adapter.ViewDataAdapter;
+import com.mobsandgeeks.saripaar.annotation.AssertFalse;
+import com.mobsandgeeks.saripaar.annotation.AssertTrue;
+import com.mobsandgeeks.saripaar.annotation.Checked;
+import com.mobsandgeeks.saripaar.annotation.ConfirmEmail;
+import com.mobsandgeeks.saripaar.annotation.ConfirmPassword;
+import com.mobsandgeeks.saripaar.annotation.CreditCard;
+import com.mobsandgeeks.saripaar.annotation.DecimalMax;
+import com.mobsandgeeks.saripaar.annotation.DecimalMin;
+import com.mobsandgeeks.saripaar.annotation.Digits;
+import com.mobsandgeeks.saripaar.annotation.Domain;
+import com.mobsandgeeks.saripaar.annotation.Email;
+import com.mobsandgeeks.saripaar.annotation.Future;
+import com.mobsandgeeks.saripaar.annotation.IpAddress;
+import com.mobsandgeeks.saripaar.annotation.Isbn;
+import com.mobsandgeeks.saripaar.annotation.Length;
+import com.mobsandgeeks.saripaar.annotation.Max;
+import com.mobsandgeeks.saripaar.annotation.Min;
+import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+import com.mobsandgeeks.saripaar.annotation.Optional;
+import com.mobsandgeeks.saripaar.annotation.Order;
+import com.mobsandgeeks.saripaar.annotation.Password;
+import com.mobsandgeeks.saripaar.annotation.Past;
+import com.mobsandgeeks.saripaar.annotation.Pattern;
+import com.mobsandgeeks.saripaar.annotation.Select;
+import com.mobsandgeeks.saripaar.annotation.Url;
+import com.mobsandgeeks.saripaar.annotation.ValidateUsing;
+import com.mobsandgeeks.saripaar.exception.ConversionException;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * The {@link com.mobsandgeeks.saripaar.Validator} takes care of validating the
+ * {@link android.view.View}s in the given controller instance. Usually, an
+ * {@link android.app.Activity} or a {@link android.app.Fragment}. However, it can also be used
+ * with other controller classes that contain references to {@link android.view.View} objects.
+ * <p>
+ * The {@link com.mobsandgeeks.saripaar.Validator} is capable of performing validations in two
+ * modes,
+ *  <ol>
+ *      <li>{@link Mode#BURST}, where all the views are validated and all errors are reported
+ *          via the callback at once. Fields need not be ordered using the
+ *          {@link com.mobsandgeeks.saripaar.annotation.Order} annotation in {@code BURST} mode.
+ *      </li>
+ *      <li>{@link Mode#IMMEDIATE}, in which the validation stops and the error is reported as soon
+ *          as a {@link com.mobsandgeeks.saripaar.Rule} fails. To use this mode, the fields SHOULD
+ *          BE ordered using the {@link com.mobsandgeeks.saripaar.annotation.Order} annotation.
+ *      </li>
+ *  </ol>
+ * <p>
+ * There are three flavors of the {@code validate()} method.
+ * <ol>
+ *      <li>{@link #validate()}, no frills regular validation that validates all
+ *          {@link android.view.View}s.
+ *      </li>
+ *      <li>{@link #validateTill(android.view.View)}, validates all {@link android.view.View}s till
+ *          the one that is specified.
+ *      </li>
+ *      <li>{@link #validateBefore(android.view.View)}, validates all {@link android.view.View}s
+ *          before the specified {@link android.view.View}.
+ *      </li>
+ * </ol>
+ * <p>
+ * It is imperative that the fields are ordered while making the
+ * {@link #validateTill(android.view.View)} and {@link #validateBefore(android.view.View)} method
+ * calls.
+ * <p>
+ * The {@link com.mobsandgeeks.saripaar.Validator} requires a
+ * {@link com.mobsandgeeks.saripaar.Validator.ValidationListener} that reports the outcome of the
+ * validation.
+ * <ul>
+ *      <li> {@link com.mobsandgeeks.saripaar.Validator.ValidationListener#onValidationSucceeded()}
+ *          is called if all {@link com.mobsandgeeks.saripaar.Rule}s pass.
+ *      </li>
+ *      <li>
+ *          The {@link Validator.ValidationListener#onValidationFailed(java.util.List)}
+ *          callback reports errors caused by failures. In {@link Mode#IMMEDIATE} this callback will
+ *          contain just one instance of the {@link com.mobsandgeeks.saripaar.ValidationError}
+ *          object.
+ *      </li>
+ * </ul>
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 1.0
+ */
+@SuppressWarnings({ "unchecked", "ForLoopReplaceableByForEach" })
+public class Validator {
+
+    // Entries are registered inside a static block (Placed at the end of source)
+    private static final Registry SARIPAAR_REGISTRY = new Registry();
+
+    // Holds adapter entries that are mapped to corresponding views.
+    private final
+            Map<Class<? extends View>, HashMap<Class<?>, ViewDataAdapter>> mRegisteredAdaptersMap =
+                    new HashMap<Class<? extends View>, HashMap<Class<?>, ViewDataAdapter>>();
+
+    // Attributes
+    private Object mController;
+    private Mode mValidationMode;
+    private ValidationContext mValidationContext;
+    private Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> mViewRulesMap;
+    private Map<View, ArrayList<Pair<Annotation, ViewDataAdapter>>> mOptionalViewsMap;
+    private boolean mOrderedFields;
+    private boolean mValidateInvisibleViews;
+    private SequenceComparator mSequenceComparator;
+    private ViewValidatedAction mViewValidatedAction;
+    private Handler mViewValidatedActionHandler;
+    private ValidationListener mValidationListener;
+    private AsyncValidationTask mAsyncValidationTask;
+
+    /**
+     * Constructor.
+     *
+     * @param controller  The class containing {@link android.view.View}s to be validated. Usually,
+     *      an {@link android.app.Activity} or a {@link android.app.Fragment}.
+     */
+    public Validator(final Object controller) {
+        assertNotNull(controller, "controller");
+        mController = controller;
+        mValidationMode = Mode.BURST;
+        mSequenceComparator = new SequenceComparator();
+        mViewValidatedAction = new DefaultViewValidatedAction();
+
+        // Instantiate a ValidationContext
+        if (controller instanceof Activity) {
+            mValidationContext = new ValidationContext((Activity) controller);
+        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB
+                && controller instanceof Fragment) {
+            Activity activity = ((Fragment) controller).getActivity();
+            mValidationContext = new ValidationContext(activity);
+        }
+        // Else, lazy init ValidationContext in #getRuleAdapterPair(Annotation, Field)
+        // or void #put(VIEW, QuickRule<VIEW>) by obtaining a Context from one of the
+        // View instances.
+    }
+
+    /**
+     * A convenience method for registering {@link com.mobsandgeeks.saripaar.Rule} annotations that
+     * act on {@link android.widget.TextView} and it's children, the most notable one being
+     * {@link android.widget.EditText}. Register custom annotations for
+     * {@link android.widget.TextView}s that validates {@link java.lang.Double},
+     * {@link java.lang.Float}, {@link java.lang.Integer} and {@link java.lang.String} types.
+     * <p>
+     * For registering rule annotations for other view types see,
+     * {@link #registerAdapter(Class, com.mobsandgeeks.saripaar.adapter.ViewDataAdapter)}.
+     *
+     * @param ruleAnnotation  A rule {@link java.lang.annotation.Annotation}.
+     */
+    public static void registerAnnotation(final Class<? extends Annotation> ruleAnnotation) {
+        SARIPAAR_REGISTRY.register(ruleAnnotation);
+    }
+
+    /**
+     * An elaborate method for registering custom rule annotations.
+     *
+     * @param annotation  The annotation that you want to register.
+     * @param viewType  The {@link android.view.View} type.
+     * @param viewDataAdapter  An instance of the
+     *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} for your
+     *      {@link android.view.View}.
+     *
+     * @param <VIEW>  The {@link android.view.View} for which the
+     *      {@link java.lang.annotation.Annotation} and
+     *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} is being registered.
+     */
+    public static <VIEW extends View> void registerAnnotation(
+            final Class<? extends Annotation> annotation, final Class<VIEW> viewType,
+            final ViewDataAdapter<VIEW, ?> viewDataAdapter) {
+
+        ValidateUsing validateUsing = annotation.getAnnotation(ValidateUsing.class);
+        Class ruleDataType = Reflector.getRuleDataType(validateUsing);
+        SARIPAAR_REGISTRY.register(viewType, ruleDataType, viewDataAdapter, annotation);
+    }
+
+    /**
+     * Registers a {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} for the given
+     * {@link android.view.View}.
+     *
+     * @param viewType  The {@link android.view.View} for which a
+     *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} is being registered.
+     * @param viewDataAdapter  A {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} instance.
+     *
+     * @param <VIEW>  The {@link android.view.View} type.
+     * @param <DATA_TYPE>  The {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} type.
+     */
+    public <VIEW extends View, DATA_TYPE> void registerAdapter(
+            final Class<VIEW> viewType, final ViewDataAdapter<VIEW, DATA_TYPE> viewDataAdapter) {
+        assertNotNull(viewType, "viewType");
+        assertNotNull(viewDataAdapter, "viewDataAdapter");
+
+        HashMap<Class<?>, ViewDataAdapter> dataTypeAdapterMap = mRegisteredAdaptersMap.get(viewType);
+        if (dataTypeAdapterMap == null) {
+            dataTypeAdapterMap = new HashMap<Class<?>, ViewDataAdapter>();
+            mRegisteredAdaptersMap.put(viewType, dataTypeAdapterMap);
+        }
+
+        // Find adapter's data type
+        Method getDataMethod = Reflector.findGetDataMethod(viewDataAdapter.getClass());
+        Class<?> adapterDataType = getDataMethod.getReturnType();
+
+        dataTypeAdapterMap.put(adapterDataType, viewDataAdapter);
+    }
+
+    /**
+     * Set a {@link com.mobsandgeeks.saripaar.Validator.ValidationListener} to the
+     * {@link com.mobsandgeeks.saripaar.Validator}.
+     *
+     * @param validationListener  A {@link com.mobsandgeeks.saripaar.Validator.ValidationListener}
+     *      instance. null throws an {@link java.lang.IllegalArgumentException}.
+     */
+    public void setValidationListener(final ValidationListener validationListener) {
+        assertNotNull(validationListener, "validationListener");
+        this.mValidationListener = validationListener;
+    }
+
+    /**
+     * Set a {@link com.mobsandgeeks.saripaar.Validator.ViewValidatedAction} to the
+     * {@link com.mobsandgeeks.saripaar.Validator}.
+     *
+     * @param viewValidatedAction  A {@link com.mobsandgeeks.saripaar.Validator.ViewValidatedAction}
+     *      instance.
+     */
+    public void setViewValidatedAction(final ViewValidatedAction viewValidatedAction) {
+        this.mViewValidatedAction = viewValidatedAction;
+    }
+
+    /**
+     * Set the validation {@link com.mobsandgeeks.saripaar.Validator.Mode} for the current
+     * {@link com.mobsandgeeks.saripaar.Validator} instance.
+     *
+     * @param validationMode  {@link Mode#BURST} or {@link Mode#IMMEDIATE}, null throws an
+     *      {@link java.lang.IllegalArgumentException}.
+     */
+    public void setValidationMode(final Mode validationMode) {
+        assertNotNull(validationMode, "validationMode");
+        this.mValidationMode = validationMode;
+    }
+
+    /**
+     * Gets the current {@link com.mobsandgeeks.saripaar.Validator.Mode}.
+     *
+     * @return The current validation mode of the {@link com.mobsandgeeks.saripaar.Validator}.
+     */
+    public Mode getValidationMode() {
+        return mValidationMode;
+    }
+
+    /**
+     * Configures the validator to validate invisible views.
+     *
+     * @param validate  {@code true} includes invisible views during validation.
+     */
+    public void validateInvisibleViews(final boolean validate) {
+        this.mValidateInvisibleViews = validate;
+    }
+
+    /**
+     * Validates all {@link android.view.View}s with {@link com.mobsandgeeks.saripaar.Rule}s.
+     * When validating in {@link com.mobsandgeeks.saripaar.Validator.Mode#IMMEDIATE}, all
+     * {@link android.view.View} fields must be ordered using the
+     * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation.
+     */
+    public void validate() {
+        validate(false);
+    }
+
+    /**
+     * Validates all {@link android.view.View}s before the specified {@link android.view.View}
+     * parameter. {@link android.view.View} fields MUST be ordered using the
+     * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation.
+     *
+     * @param view  A {@link android.view.View}.
+     */
+    public void validateBefore(final View view) {
+        validateBefore(view, false);
+    }
+
+    /**
+     * Validates all {@link android.view.View}s till the specified {@link android.view.View}
+     * parameter. {@link android.view.View} fields MUST be ordered using the
+     * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation.
+     *
+     * @param view  A {@link android.view.View}.
+     */
+    public void validateTill(final View view) {
+        validateTill(view, false);
+    }
+
+    /**
+     * Validates all {@link android.view.View}s with {@link com.mobsandgeeks.saripaar.Rule}s.
+     * When validating in {@link com.mobsandgeeks.saripaar.Validator.Mode#IMMEDIATE}, all
+     * {@link android.view.View} fields must be ordered using the
+     * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation. Asynchronous calls will cancel
+     * any pending or ongoing asynchronous validation and start a new one.
+     *
+     * @param async  true if asynchronous, false otherwise.
+     */
+    public void validate(final boolean async) {
+        createRulesSafelyAndLazily(false);
+
+        View lastView = getLastView();
+        if (Mode.BURST.equals(mValidationMode)) {
+            validateUnorderedFieldsWithCallbackTill(lastView, async);
+        } else if (Mode.IMMEDIATE.equals(mValidationMode)) {
+            String reasonSuffix = String.format("in %s mode.", Mode.IMMEDIATE.toString());
+            validateOrderedFieldsWithCallbackTill(lastView, reasonSuffix, async);
+        } else {
+            throw new RuntimeException("This should never happen!");
+        }
+    }
+
+    /**
+     * Validates all {@link android.view.View}s before the specified {@link android.view.View}
+     * parameter. {@link android.view.View} fields MUST be ordered using the
+     * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation. Asynchronous calls will cancel
+     * any pending or ongoing asynchronous validation and start a new one.
+     *
+     * @param view  A {@link android.view.View}.
+     * @param async  true if asynchronous, false otherwise.
+     */
+    public void validateBefore(final View view, final boolean async) {
+        createRulesSafelyAndLazily(false);
+        View previousView = getViewBefore(view);
+        validateOrderedFieldsWithCallbackTill(previousView, "when using 'validateBefore(View)'.",
+                async);
+    }
+
+    /**
+     * Validates all {@link android.view.View}s till the specified {@link android.view.View}
+     * parameter. {@link android.view.View} fields MUST be ordered using the
+     * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation. Asynchronous calls will cancel
+     * any pending or ongoing asynchronous validation and start a new one.
+     *
+     * @param view  A {@link android.view.View}.
+     * @param async  true if asynchronous, false otherwise.
+     */
+    public void validateTill(final View view, final boolean async) {
+        validateOrderedFieldsWithCallbackTill(view, "when using 'validateTill(View)'.", async);
+    }
+
+    /**
+     * Used to find if an asynchronous validation task is running. Useful only when you run the
+     * {@link com.mobsandgeeks.saripaar.Validator} in asynchronous mode.
+     *
+     * @return true if the asynchronous task is running, false otherwise.
+     */
+    public boolean isValidating() {
+        return mAsyncValidationTask != null
+                && mAsyncValidationTask.getStatus() != AsyncTask.Status.FINISHED;
+    }
+
+    /**
+     * Cancels a running asynchronous validation task.
+     *
+     * @return true if a running asynchronous task was cancelled, false otherwise.
+     */
+    public boolean cancelAsync() {
+        boolean cancelled = false;
+        if (mAsyncValidationTask != null) {
+            cancelled = mAsyncValidationTask.cancel(true);
+            mAsyncValidationTask = null;
+        }
+
+        return cancelled;
+    }
+
+    /**
+     * Add one or more {@link com.mobsandgeeks.saripaar.QuickRule}s for a {@link android.view.View}.
+     *
+     * @param view  A {@link android.view.View} for which
+     *      {@link com.mobsandgeeks.saripaar.QuickRule}(s) are to be added.
+     * @param quickRules  Varargs of {@link com.mobsandgeeks.saripaar.QuickRule}s.
+     *
+     * @param <VIEW>  The {@link android.view.View} type for which the
+     *      {@link com.mobsandgeeks.saripaar.QuickRule}s are being registered.
+     */
+    public <VIEW extends View> void put(final VIEW view, final QuickRule<VIEW>... quickRules) {
+        assertNotNull(view, "view");
+        assertNotNull(quickRules, "quickRules");
+        if (quickRules.length == 0) {
+            throw new IllegalArgumentException("'quickRules' cannot be empty.");
+        }
+
+        if (mValidationContext == null) {
+            mValidationContext = new ValidationContext(view.getContext());
+        }
+
+        // Create rules
+        createRulesSafelyAndLazily(true);
+
+        // If all fields are ordered, then this field should be ordered too
+        if (mOrderedFields && !mViewRulesMap.containsKey(view)) {
+            String message = String.format("All fields are ordered, so this `%s` should be "
+                    + "ordered too, declare the view as a field and add the `@Order` "
+                    + "annotation.", view.getClass().getName());
+            throw new IllegalStateException(message);
+        }
+
+        // If there are no rules, create an empty list
+        ArrayList<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs = mViewRulesMap.get(view);
+        ruleAdapterPairs = ruleAdapterPairs == null
+                ? new ArrayList<Pair<Rule, ViewDataAdapter>>() : ruleAdapterPairs;
+
+        // Add the quick rule to existing rules
+        for (int i = 0, n = quickRules.length; i < n; i++) {
+            QuickRule quickRule = quickRules[i];
+            if (quickRule != null) {
+                ruleAdapterPairs.add(new Pair(quickRule, null));
+            }
+        }
+        Collections.sort(ruleAdapterPairs, mSequenceComparator);
+        mViewRulesMap.put(view, ruleAdapterPairs);
+    }
+
+    /**
+     * Remove all {@link com.mobsandgeeks.saripaar.Rule}s for the given {@link android.view.View}.
+     *
+     * @param view  The {@link android.view.View} whose rules should be removed.
+     */
+    public void removeRules(final View view) {
+        assertNotNull(view, "view");
+        if (mViewRulesMap == null) {
+            createRulesSafelyAndLazily(false);
+        }
+        mViewRulesMap.remove(view);
+    }
+
+    static boolean isSaripaarAnnotation(final Class<? extends Annotation> annotation) {
+        return SARIPAAR_REGISTRY.getRegisteredAnnotations().contains(annotation);
+    }
+
+    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     *  Private Methods
+     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     */
+    private static void assertNotNull(final Object object, final String argumentName) {
+        if (object == null) {
+            String message = String.format("'%s' cannot be null.", argumentName);
+            throw new IllegalArgumentException(message);
+        }
+    }
+
+    private void createRulesSafelyAndLazily(final boolean addingQuickRules) {
+        // Create rules lazily, because we don't have to worry about the order of
+        // instantiating the Validator.
+        if (mViewRulesMap == null) {
+            final List<Field> annotatedFields = getSaripaarAnnotatedFields(mController.getClass());
+            mViewRulesMap = createRules(annotatedFields);
+            mValidationContext.setViewRulesMap(mViewRulesMap);
+        }
+
+        if (!addingQuickRules && mViewRulesMap.size() == 0) {
+            String message = "No rules found. You must have at least one rule to validate. "
+                    + "If you are using custom annotations, make sure that you have registered "
+                    + "them using the 'Validator.register()' method.";
+            throw new IllegalStateException(message);
+        }
+    }
+
+    private List<Field> getSaripaarAnnotatedFields(final Class<?> controllerClass) {
+        Set<Class<? extends Annotation>> saripaarAnnotations =
+                SARIPAAR_REGISTRY.getRegisteredAnnotations();
+
+        List<Field> annotatedFields = new ArrayList<Field>();
+        List<Field> controllerViewFields = getControllerViewFields(controllerClass);
+        for (int i = 0, n = controllerViewFields.size(); i < n; i++) {
+            Field field = controllerViewFields.get(i);
+            if (isSaripaarAnnotatedField(field, saripaarAnnotations)) {
+                annotatedFields.add(field);
+            }
+        }
+
+        // Sort
+        SaripaarFieldsComparator comparator = new SaripaarFieldsComparator();
+        Collections.sort(annotatedFields, comparator);
+        mOrderedFields = annotatedFields.size() == 1
+                ? annotatedFields.get(0).getAnnotation(Order.class) != null
+                : annotatedFields.size() != 0 && comparator.areOrderedFields();
+
+        return annotatedFields;
+    }
+
+    private List<Field> getControllerViewFields(final Class<?> controllerClass) {
+        List<Field> controllerViewFields = new ArrayList<Field>();
+
+        // Fields declared in the controller
+        controllerViewFields.addAll(getViewFields(controllerClass));
+
+        // Inherited fields
+        Class<?> superClass = controllerClass.getSuperclass();
+        while (!superClass.equals(Object.class)) {
+            List<Field> viewFields = getViewFields(superClass);
+            if (viewFields.size() > 0) {
+                controllerViewFields.addAll(viewFields);
+            }
+            superClass = superClass.getSuperclass();
+        }
+
+        return controllerViewFields;
+    }
+
+    private List<Field> getViewFields(final Class<?> clazz) {
+        List<Field> viewFields = new ArrayList<Field>();
+        Field[] declaredFields = clazz.getDeclaredFields();
+        for (int i = 0, n = declaredFields.length; i < n; i++) {
+            Field field = declaredFields[i];
+            if (View.class.isAssignableFrom(field.getType())) {
+                viewFields.add(field);
+            }
+        }
+
+        return viewFields;
+    }
+
+    private boolean isSaripaarAnnotatedField(final Field field,
+            final Set<Class<? extends Annotation>> registeredAnnotations) {
+        boolean hasOrderAnnotation = field.getAnnotation(Order.class) != null;
+        boolean hasSaripaarAnnotation = false;
+
+        if (!hasOrderAnnotation) {
+            Annotation[] annotations = field.getAnnotations();
+            for (int i = 0, n = annotations.length; i < n; i++) {
+                Annotation annotation = annotations[i];
+                hasSaripaarAnnotation = registeredAnnotations.contains(annotation.annotationType());
+                if (hasSaripaarAnnotation) {
+                    break;
+                }
+            }
+        }
+
+        return hasOrderAnnotation || hasSaripaarAnnotation;
+    }
+
+    private Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> createRules(
+            final List<Field> annotatedFields) {
+
+        final Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> viewRulesMap =
+                new LinkedHashMap<View, ArrayList<Pair<Rule, ViewDataAdapter>>>();
+
+        View view;
+        for (int i = 0, n = annotatedFields.size(); i < n; i++) {
+            Field field = annotatedFields.get(i);
+            final ArrayList<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs =
+                    new ArrayList<Pair<Rule, ViewDataAdapter>>();
+            final Annotation[] fieldAnnotations = field.getAnnotations();
+
+            // @Optional
+            final boolean hasOptionalAnnotation = hasOptionalAnnotation(fieldAnnotations);
+            if (hasOptionalAnnotation && mOptionalViewsMap == null) {
+                mOptionalViewsMap = new HashMap<View,
+                        ArrayList<Pair<Annotation, ViewDataAdapter>>>();
+            }
+
+            view = getView(field);
+            for (int j = 0, nAnnotations = fieldAnnotations.length; j < nAnnotations; j++) {
+                Annotation annotation = fieldAnnotations[j];
+                if (isSaripaarAnnotation(annotation.annotationType())) {
+                    Pair<Rule, ViewDataAdapter> ruleAdapterPair =
+                            getRuleAdapterPair(annotation, field);
+                    ruleAdapterPairs.add(ruleAdapterPair);
+
+                    // @Optional
+                    if (hasOptionalAnnotation) {
+                        ArrayList<Pair<Annotation, ViewDataAdapter>> pairs =
+                                mOptionalViewsMap.get(view);
+                        if (pairs == null) {
+                            pairs = new ArrayList<Pair<Annotation, ViewDataAdapter>>();
+                        }
+                        pairs.add(new Pair(annotation, ruleAdapterPair.second));
+                        mOptionalViewsMap.put(view, pairs);
+                    }
+                }
+            }
+
+            Collections.sort(ruleAdapterPairs, mSequenceComparator);
+            viewRulesMap.put(view, ruleAdapterPairs);
+        }
+
+        return viewRulesMap;
+    }
+
+    private boolean hasOptionalAnnotation(final Annotation[] annotations) {
+        if (annotations != null && annotations.length > 0) {
+            for (int i = 0, n = annotations.length; i < n; i++) {
+                if (Optional.class.equals(annotations[i].annotationType())) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
+    private Pair<Rule, ViewDataAdapter> getRuleAdapterPair(final Annotation saripaarAnnotation,
+            final Field viewField) {
+        final Class<? extends Annotation> annotationType = saripaarAnnotation.annotationType();
+        final Class<?> viewFieldType = viewField.getType();
+        final Class<?> ruleDataType = Reflector.getRuleDataType(saripaarAnnotation);
+
+        final ViewDataAdapter dataAdapter = getDataAdapter(annotationType, viewFieldType,
+                ruleDataType);
+
+        // If no matching adapter is found, throw.
+        if (dataAdapter == null) {
+            String viewType = viewFieldType.getName();
+            String message = String.format(
+                    "To use '%s' on '%s', register a '%s' that returns a '%s' from the '%s'.",
+                    annotationType.getName(),
+                    viewType,
+                    ViewDataAdapter.class.getName(),
+                    ruleDataType.getName(),
+                    viewType);
+            throw new UnsupportedOperationException(message);
+        }
+
+        if (mValidationContext == null) {
+            mValidationContext = new ValidationContext(getContext(viewField));
+        }
+
+        final Class<? extends AnnotationRule> ruleType = getRuleType(saripaarAnnotation);
+        final AnnotationRule rule = Reflector.instantiateRule(ruleType,
+                saripaarAnnotation, mValidationContext);
+
+        return new Pair<Rule, ViewDataAdapter>(rule, dataAdapter);
+    }
+
+    private ViewDataAdapter getDataAdapter(final Class<? extends Annotation> annotationType,
+            final Class<?> viewFieldType, final Class<?> adapterDataType) {
+
+        // Get an adapter from the stock registry
+        ViewDataAdapter dataAdapter = SARIPAAR_REGISTRY.getDataAdapter(
+                annotationType, (Class) viewFieldType);
+
+        // If we are unable to find a Saripaar stock adapter, check the registered adapters
+        if (dataAdapter == null) {
+            HashMap<Class<?>, ViewDataAdapter> dataTypeAdapterMap =
+                    mRegisteredAdaptersMap.get(viewFieldType);
+            dataAdapter = dataTypeAdapterMap != null
+                    ? dataTypeAdapterMap.get(adapterDataType)
+                    : null;
+        }
+
+        return dataAdapter;
+    }
+
+    private Context getContext(final Field viewField) {
+        Context context = null;
+        try {
+            if (!viewField.isAccessible()) {
+                viewField.setAccessible(true);
+            }
+            View view = (View) viewField.get(mController);
+            context = view.getContext();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        }
+        return context;
+    }
+
+    private Class<? extends AnnotationRule> getRuleType(final Annotation ruleAnnotation) {
+        ValidateUsing validateUsing = ruleAnnotation.annotationType()
+                .getAnnotation(ValidateUsing.class);
+        return validateUsing != null ? validateUsing.value() : null;
+    }
+
+    private View getView(final Field field) {
+        View view = null;
+        try {
+            field.setAccessible(true);
+            view = (View) field.get(mController);
+
+            if (view == null) {
+                String message = String.format("'%s %s' is null.",
+                        field.getType().getSimpleName(), field.getName());
+                throw new IllegalStateException(message);
+            }
+        } catch (IllegalArgumentException e) {
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        }
+
+        return view;
+    }
+
+    private void validateUnorderedFieldsWithCallbackTill(final View view, final boolean async) {
+        validateFieldsWithCallbackTill(view, false, null, async);
+    }
+
+    private void validateOrderedFieldsWithCallbackTill(final View view, final String reasonSuffix,
+            final boolean async) {
+        validateFieldsWithCallbackTill(view, true, reasonSuffix, async);
+    }
+
+    private void validateFieldsWithCallbackTill(final View view, final boolean orderedFields,
+            final String reasonSuffix, final boolean async) {
+        createRulesSafelyAndLazily(false);
+        if (async) {
+            if (mAsyncValidationTask != null) {
+                mAsyncValidationTask.cancel(true);
+            }
+            mAsyncValidationTask = new AsyncValidationTask(view, orderedFields, reasonSuffix);
+            mAsyncValidationTask.execute((Void[]) null);
+        } else {
+            triggerValidationListenerCallback(validateTill(view, orderedFields, reasonSuffix));
+        }
+    }
+
+    private synchronized ValidationReport validateTill(final View view,
+            final boolean requiresOrderedRules, final String reasonSuffix) {
+        // Do we need ordered rules?
+        if (requiresOrderedRules) {
+            assertOrderedFields(mOrderedFields, reasonSuffix);
+        }
+
+        // Have we registered a validation listener?
+        assertNotNull(mValidationListener, "validationListener");
+
+        // Everything good. Bingo! validate ;)
+        return getValidationReport(view, mViewRulesMap, mValidationMode);
+    }
+
+    private void triggerValidationListenerCallback(final ValidationReport validationReport) {
+        final List<ValidationError> validationErrors = validationReport.errors;
+
+        if (validationErrors.size() == 0 && !validationReport.hasMoreErrors) {
+            mValidationListener.onValidationSucceeded();
+        } else {
+            mValidationListener.onValidationFailed(validationErrors);
+        }
+    }
+
+    private void assertOrderedFields(final boolean orderedRules, final String reasonSuffix) {
+        if (!orderedRules) {
+            String message = "Rules are unordered, all view fields should be ordered "
+                    + "using the '@Order' annotation " + reasonSuffix;
+            throw new IllegalStateException(message);
+        }
+    }
+
+    private ValidationReport getValidationReport(final View targetView,
+            final Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> viewRulesMap,
+                    final Mode validationMode) {
+
+        final List<ValidationError> validationErrors = new ArrayList<ValidationError>();
+        final Set<View> views = viewRulesMap.keySet();
+
+        // Don't add errors for views that are placed after the specified view in validateTill()
+        boolean addErrorToReport = targetView != null;
+
+        // Does the form have more errors? Used in validateTill()
+        boolean hasMoreErrors = false;
+
+        validation:
+        for (View view : views) {
+            List<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs = viewRulesMap.get(view);
+
+            // @Optional
+            boolean isOptional = mOptionalViewsMap != null && mOptionalViewsMap.containsKey(view);
+            if (isOptional && containsOptionalValue(view)) {
+                continue;
+            }
+
+            // Validate all the rules for the given view.
+            List<Rule> failedRules = null;
+            for (int i = 0, nRules = ruleAdapterPairs.size(); i < nRules; i++) {
+
+                // Skip views that are invisible and disabled
+                boolean disabledView = !view.isEnabled();
+                boolean skipView = !view.isShown() && !mValidateInvisibleViews;
+                if (disabledView || skipView) {
+                    continue;
+                }
+
+                Pair<Rule, ViewDataAdapter> ruleAdapterPair = ruleAdapterPairs.get(i);
+                Rule failedRule = validateViewWithRule(
+                        view, ruleAdapterPair.first, ruleAdapterPair.second);
+                boolean isLastRuleForView = i + 1 == nRules;
+
+                if (failedRule != null) {
+                    if (addErrorToReport) {
+                        if (failedRules == null) {
+                            failedRules = new ArrayList<Rule>();
+                            validationErrors.add(new ValidationError(view, failedRules));
+                        }
+                        failedRules.add(failedRule);
+                    } else {
+                        hasMoreErrors = true;
+                    }
+
+                    if (Mode.IMMEDIATE.equals(validationMode) && isLastRuleForView) {
+                        break validation;
+                    }
+                }
+
+                // Don't add reports for subsequent views
+                if (view.equals(targetView) && isLastRuleForView) {
+                    addErrorToReport = false;
+                }
+            }
+
+            // Callback if a view passes all rules
+            boolean viewPassedAllRules = (failedRules == null || failedRules.size() == 0)
+                    && !hasMoreErrors;
+            if (viewPassedAllRules && mViewValidatedAction != null) {
+                triggerViewValidatedCallback(mViewValidatedAction, view);
+            }
+        }
+
+        return new ValidationReport(validationErrors, hasMoreErrors);
+    }
+
+    private boolean containsOptionalValue(final View view) {
+        ArrayList<Pair<Annotation, ViewDataAdapter>> annotationAdapterPairs
+                = mOptionalViewsMap.get(view);
+
+        for (int i = 0, n = annotationAdapterPairs.size(); i < n; i++) {
+            Pair<Annotation, ViewDataAdapter> pair = annotationAdapterPairs.get(i);
+            ViewDataAdapter adapter = pair.second;
+            Annotation ruleAnnotation = pair.first;
+
+            if (adapter.containsOptionalValue(view, ruleAnnotation)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    private Rule validateViewWithRule(final View view, final Rule rule,
+            final ViewDataAdapter dataAdapter) {
+
+        boolean valid = false;
+        if (rule instanceof AnnotationRule) {
+            Object data;
+
+            try {
+                data = dataAdapter.getData(view);
+                valid = rule.isValid(data);
+            } catch (ConversionException e) {
+                valid = false;
+                e.printStackTrace();
+            }
+        } else if (rule instanceof QuickRule) {
+            valid = rule.isValid(view);
+        }
+
+        return valid ? null : rule;
+    }
+
+    private void triggerViewValidatedCallback(final ViewValidatedAction viewValidatedAction,
+            final View view) {
+        boolean isOnMainThread = Looper.myLooper() == Looper.getMainLooper();
+        if (isOnMainThread) {
+            viewValidatedAction.onAllRulesPassed(view);
+        } else {
+            runOnMainThread(new Runnable() {
+                @Override
+                public void run() {
+                    viewValidatedAction.onAllRulesPassed(view);
+                }
+            });
+        }
+    }
+
+    private void runOnMainThread(final Runnable runnable) {
+        if (mViewValidatedActionHandler == null) {
+            mViewValidatedActionHandler = new Handler(Looper.getMainLooper());
+        }
+        mViewValidatedActionHandler.post(runnable);
+    }
+
+    private View getLastView() {
+        final Set<View> views = mViewRulesMap.keySet();
+
+        View lastView = null;
+        for (View view : views) {
+            lastView = view;
+        }
+
+        return lastView;
+    }
+
+    private View getViewBefore(final View view) {
+        ArrayList<View> views = new ArrayList<View>(mViewRulesMap.keySet());
+
+        View currentView;
+        View previousView = null;
+        for (int i = 0, n = views.size(); i < n; i++) {
+            currentView = views.get(i);
+            if (currentView == view) {
+                previousView = i > 0 ? views.get(i - 1) : null;
+                break;
+            }
+        }
+
+        return previousView;
+    }
+
+    /**
+     * Listener with callback methods that notifies the outcome of validation.
+     *
+     * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+     * @since 1.0
+     */
+    public interface ValidationListener {
+
+        /**
+         * Called when all {@link com.mobsandgeeks.saripaar.Rule}s pass.
+         */
+        void onValidationSucceeded();
+
+        /**
+         * Called when one or several {@link com.mobsandgeeks.saripaar.Rule}s fail.
+         *
+         * @param errors  List containing references to the {@link android.view.View}s and
+         *      {@link com.mobsandgeeks.saripaar.Rule}s that failed.
+         */
+        void onValidationFailed(List<ValidationError> errors);
+    }
+
+    /**
+     * Interface that provides a callback when all {@link com.mobsandgeeks.saripaar.Rule}s
+     * associated with a {@link android.view.View} passes.
+     *
+     * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+     * @since 2.0
+     */
+    public interface ViewValidatedAction {
+
+        /**
+         * Called when all rules associated with the {@link android.view.View} passes.
+         *
+         * @param view  The {@link android.view.View} that has passed validation.
+         */
+        void onAllRulesPassed(View view);
+    }
+
+    /**
+     * Validation mode.
+     *
+     * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+     * @since 2.0
+     */
+    public enum Mode {
+
+        /**
+         * BURST mode will validate all rules in all views before calling the
+         * {@link Validator.ValidationListener#onValidationFailed(java.util.List)}
+         * callback. Ordering and sequencing is optional.
+         */
+        BURST,
+
+        /**
+         * IMMEDIATE mode will stop the validation after validating all the rules
+         * of the first failing view. Requires ordered rules, sequencing is optional.
+         */
+        IMMEDIATE
+    }
+
+    static class ValidationReport {
+        List<ValidationError> errors;
+        boolean hasMoreErrors;
+
+        ValidationReport(final List<ValidationError> errors, final boolean hasMoreErrors) {
+            this.errors = errors;
+            this.hasMoreErrors = hasMoreErrors;
+        }
+    }
+
+    private class AsyncValidationTask extends AsyncTask<Void, Void, ValidationReport> {
+        private View mView;
+        private boolean mOrderedRules;
+        private String mReasonSuffix;
+
+        AsyncValidationTask(final View view, final boolean orderedRules,
+                final String reasonSuffix) {
+            this.mView = view;
+            this.mOrderedRules = orderedRules;
+            this.mReasonSuffix = reasonSuffix;
+        }
+
+        @Override
+        protected ValidationReport doInBackground(final Void... params) {
+            return validateTill(mView, mOrderedRules, mReasonSuffix);
+        }
+
+        @Override
+        protected void onPostExecute(final ValidationReport validationReport) {
+            triggerValidationListenerCallback(validationReport);
+        }
+    }
+
+    static {
+        // CheckBoxBooleanAdapter
+        SARIPAAR_REGISTRY.register(CheckBox.class, Boolean.class,
+                new CheckBoxBooleanAdapter(),
+                AssertFalse.class, AssertTrue.class, Checked.class);
+
+        // RadioGroupBooleanAdapter
+        SARIPAAR_REGISTRY.register(RadioGroup.class, Boolean.class,
+                new RadioGroupBooleanAdapter(),
+                Checked.class);
+
+        // RadioButtonBooleanAdapter
+        SARIPAAR_REGISTRY.register(RadioButton.class, Boolean.class,
+                new RadioButtonBooleanAdapter(),
+                AssertFalse.class, AssertTrue.class, Checked.class);
+
+        // SpinnerIndexAdapter
+        SARIPAAR_REGISTRY.register(Spinner.class, Integer.class,
+                new SpinnerIndexAdapter(),
+                Select.class);
+
+        // TextViewDoubleAdapter
+        SARIPAAR_REGISTRY.register(DecimalMax.class, DecimalMin.class);
+
+        // TextViewIntegerAdapter
+        SARIPAAR_REGISTRY.register(Max.class, Min.class);
+
+        // TextViewStringAdapter
+        SARIPAAR_REGISTRY.register(
+                ConfirmEmail.class, ConfirmPassword.class, CreditCard.class,
+                Digits.class, Domain.class, Email.class, Future.class,
+                IpAddress.class, Isbn.class, Length.class, NotEmpty.class,
+                Password.class, Past.class, Pattern.class, Url.class);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/CheckBoxBooleanAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/CheckBoxBooleanAdapter.java
new file mode 100644
index 0000000..ae6dbd1
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/CheckBoxBooleanAdapter.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.adapter;
+
+import android.widget.CheckBox;
+
+import java.lang.annotation.Annotation;
+
+/**
+ * Adapter returns a {@link java.lang.Boolean} value from a {@link android.widget.CheckBox}.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class CheckBoxBooleanAdapter implements ViewDataAdapter<CheckBox, Boolean> {
+
+    @Override
+    public Boolean getData(final CheckBox checkBox) {
+        return checkBox.isChecked();
+    }
+
+    @Override
+    public <T extends Annotation> boolean containsOptionalValue(final CheckBox checkBox,
+            final T ruleAnnotation) {
+        return !checkBox.isChecked();
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioButtonBooleanAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioButtonBooleanAdapter.java
new file mode 100644
index 0000000..2c2673e
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioButtonBooleanAdapter.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.adapter;
+
+import android.widget.RadioButton;
+
+import java.lang.annotation.Annotation;
+
+/**
+ * Adapter that returns a {@link java.lang.Boolean} value from a {@link android.widget.RadioButton}.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class RadioButtonBooleanAdapter implements ViewDataAdapter<RadioButton, Boolean> {
+
+    @Override
+    public Boolean getData(final RadioButton radioButton) {
+        return radioButton.isChecked();
+    }
+
+    @Override
+    public <T extends Annotation> boolean containsOptionalValue(final RadioButton radioButton,
+            final T ruleAnnotation) {
+        return !radioButton.isChecked();
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioGroupBooleanAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioGroupBooleanAdapter.java
new file mode 100644
index 0000000..18b1dbd
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioGroupBooleanAdapter.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.adapter;
+
+import android.view.View;
+import android.widget.RadioGroup;
+
+import com.mobsandgeeks.saripaar.exception.ConversionException;
+
+import java.lang.annotation.Annotation;
+
+
+/**
+ * Adapter that returns a {@link java.lang.Boolean} value from a {@link android.widget.RadioGroup}.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class RadioGroupBooleanAdapter implements ViewDataAdapter<RadioGroup, Boolean> {
+
+    @Override
+    public Boolean getData(RadioGroup radioGroup) throws ConversionException {
+        return radioGroup.getCheckedRadioButtonId() != View.NO_ID;
+    }
+
+    @Override
+    public <T extends Annotation> boolean containsOptionalValue(final RadioGroup radioGroup,
+            final T ruleAnnotation) {
+        return radioGroup.getCheckedRadioButtonId() == View.NO_ID;
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/SpinnerIndexAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/SpinnerIndexAdapter.java
new file mode 100644
index 0000000..8ffe9e6
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/SpinnerIndexAdapter.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.adapter;
+
+import android.widget.Spinner;
+
+import com.mobsandgeeks.saripaar.annotation.Select;
+
+import java.lang.annotation.Annotation;
+
+/**
+ * Adapter that returns the current selection index from a {@link android.widget.Spinner} using the
+ * {@link android.widget.Spinner#getSelectedItemPosition()} method.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class SpinnerIndexAdapter implements ViewDataAdapter<Spinner, Integer> {
+
+    @Override
+    public Integer getData(final Spinner spinner) {
+        return spinner.getSelectedItemPosition();
+    }
+
+    @Override
+    public <T extends Annotation> boolean containsOptionalValue(final Spinner spinner,
+            final T ruleAnnotation) {
+        int selection = spinner.getSelectedItemPosition();
+
+        return ruleAnnotation instanceof Select
+                && selection == ((Select) ruleAnnotation).defaultSelection();
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewBaseAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewBaseAdapter.java
new file mode 100644
index 0000000..b2bb0e9
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewBaseAdapter.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2016 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.adapter;
+
+import android.view.View;
+import android.widget.TextView;
+
+import java.lang.annotation.Annotation;
+
+/**
+ * A base class that implements the {@link #containsOptionalValue(View, Annotation)} method for concrete
+ * {@link TextView} adapters.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.1.0
+ */
+abstract class TextViewBaseAdapter<DATA> implements ViewDataAdapter<TextView, DATA> {
+
+    @Override
+    public <T extends Annotation> boolean containsOptionalValue(final TextView textView,
+            final T annotation) {
+        return "".equals(textView.getText().toString());
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewDoubleAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewDoubleAdapter.java
new file mode 100644
index 0000000..693055b
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewDoubleAdapter.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.adapter;
+
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.exception.ConversionException;
+
+/**
+ * Adapter parses and returns a {@link java.lang.Double} from {@link android.widget.TextView}s or
+ * its subclasses like {@link android.widget.EditText}s.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class TextViewDoubleAdapter extends TextViewBaseAdapter<Double> {
+    private static final String REGEX_DECIMAL = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
+
+    @Override
+    public Double getData(final TextView textView) throws ConversionException {
+        String doubleString = textView.getText().toString().trim();
+        if (!doubleString.matches(REGEX_DECIMAL)) {
+            String message = String.format("Expected a floating point number, but was %s",
+                doubleString);
+            throw new ConversionException(message);
+        }
+
+        return Double.parseDouble(doubleString);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewFloatAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewFloatAdapter.java
new file mode 100644
index 0000000..c18d23c
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewFloatAdapter.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.adapter;
+
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.exception.ConversionException;
+
+/**
+ * Adapter returns a {@link java.lang.Float} from {@link android.widget.TextView}s or
+ * its subclasses like {@link android.widget.EditText}s.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class TextViewFloatAdapter extends TextViewBaseAdapter<Float> {
+    private static final String REGEX_DECIMAL = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
+
+    @Override
+    public Float getData(final TextView textView) throws ConversionException {
+        String floatString = textView.getText().toString().trim();
+        if (!floatString.matches(REGEX_DECIMAL)) {
+            String message = String.format("Expected a floating point number, but was %s",
+                floatString);
+            throw new ConversionException(message);
+        }
+
+        return Float.parseFloat(floatString);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewIntegerAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewIntegerAdapter.java
new file mode 100644
index 0000000..7f73e50
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewIntegerAdapter.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.adapter;
+
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.exception.ConversionException;
+
+/**
+ * Adapter parses and returns an {@link java.lang.Integer} from {@link android.widget.TextView}s or
+ * its subclasses like {@link android.widget.EditText}s.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class TextViewIntegerAdapter extends TextViewBaseAdapter<Integer> {
+    private static final String REGEX_INTEGER = "\\d+";
+
+    @Override
+    public Integer getData(final TextView textView) throws ConversionException {
+        String integerString = textView.getText().toString().trim();
+        if (!integerString.matches(REGEX_INTEGER)) {
+            String message = String.format("Expected an integer, but was %s", integerString);
+            throw new ConversionException(message);
+        }
+
+        return Integer.parseInt(integerString);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewStringAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewStringAdapter.java
new file mode 100644
index 0000000..d479e25
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/TextViewStringAdapter.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.adapter;
+
+import android.widget.TextView;
+
+/**
+ * Adapter returns a {@link java.lang.String} from {@link android.widget.TextView}s or
+ * its subclasses, usually {@link android.widget.EditText}s.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class TextViewStringAdapter extends TextViewBaseAdapter<String> {
+
+    @Override
+    public String getData(final TextView textView) {
+        return textView.getText().toString();
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/ViewDataAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/ViewDataAdapter.java
new file mode 100644
index 0000000..2d6e328
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/ViewDataAdapter.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.adapter;
+
+import android.view.View;
+
+import com.mobsandgeeks.saripaar.exception.ConversionException;
+
+import java.lang.annotation.Annotation;
+
+/**
+ * {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}s are used to extract data from
+ * {@link android.view.View}s. Saripaar provides a set of default adapters for stock Android
+ * widgets. Developers can implement their own adapters for custom views or data types they are
+ * interested in.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public interface ViewDataAdapter<VIEW extends View, DATA> {
+
+    /**
+     * Extract and return the appropriate data from a given {@link android.view.View}.
+     *
+     * @param view  The {@link android.view.View} from which contains the data that we are
+     *      interested in.
+     *
+     * @return The interested data.
+     *
+     * @throws ConversionException If the adapter is unable to convert the data to the expected
+     *      data type.
+     */
+    DATA getData(VIEW view) throws ConversionException;
+
+    /**
+     * Used to check if the {@link View} contains an optional value. This method is used
+     * to cater the {@link com.mobsandgeeks.saripaar.annotation.Optional} annotation.
+     *
+     * @param view  The view that is being validated.
+     * @param <T>  The rule annotation used to validate the view.
+     *
+     * @return  {@code true} if the value represents an optional value, {@code false} otherwise.
+     */
+    <T extends Annotation> boolean containsOptionalValue(VIEW view, T ruleAnnotation);
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertFalse.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertFalse.java
new file mode 100644
index 0000000..f86c082
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertFalse.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.AssertFalseRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(AssertFalseRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface AssertFalse {
+    @StringRes int messageResId()   default -1;
+    String message()                default "Should be false";
+    int sequence()                  default -1;
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertTrue.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertTrue.java
new file mode 100644
index 0000000..65859c8
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertTrue.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.AssertTrueRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(AssertTrueRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface AssertTrue {
+    @StringRes int messageResId()   default -1;
+    String message()                default "Should be true";
+    int sequence()                  default -1;
+}
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Checked.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Checked.java
similarity index 56%
rename from src/com/mobsandgeeks/saripaar/annotation/Checked.java
rename to saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Checked.java
index e15ae40..22e05e0 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Checked.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Checked.java
@@ -1,38 +1,39 @@
 /*
- * Copyright (C) 2012 Mobs and Geeks
+ * Copyright (C) 2014 Mobs & Geeks
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.mobsandgeeks.saripaar.annotation;
 
-import android.widget.Checkable;
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.CheckedRule;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import com.mobsandgeeks.saripaar.Rules;
-
 /**
- * Annotation works with {@code Views} that implement the {@link Checkable} interface.
- *
- * @author Ragunath Jawahar <rj@mobsandgeeks.com>
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 1.0
  */
-@Target(ElementType.FIELD)
+@ValidateUsing(CheckedRule.class)
 @Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
 public @interface Checked {
-    public int order();
-    public boolean checked()    default true;
-    public String message()     default Rules.EMPTY_STRING;
-    public int messageResId()   default 0;
+    boolean value()                 default true;
+
+    @StringRes int messageResId()   default -1;
+    String message()                default "Must be checked";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java
new file mode 100644
index 0000000..5af5698
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.ConfirmEmailRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(ConfirmEmailRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface ConfirmEmail {
+    @StringRes int messageResId()   default -1;
+    String message()                default "Emails don't match";
+    int sequence()                  default -1;
+}
diff --git a/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
similarity index 58%
rename from src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
rename to saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
index 407387e..ac8d082 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
@@ -1,35 +1,37 @@
 /*
- * Copyright (C) 2012 Mobs and Geeks
+ * Copyright (C) 2014 Mobs & Geeks
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.ConfirmPasswordRule;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
 /**
- * Used along with the {@link Password} annotation. This annotation makes sure that the
- * contents of the confirm password {@code EditText} matches the contents of the password
- * {@code EditText}.
- *
- * @author Ragunath Jawahar <rj@mobsandgeeks.com>
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 1.0
  */
-@Target(ElementType.FIELD)
+@ValidateUsing(ConfirmPasswordRule.class)
 @Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
 public @interface ConfirmPassword {
-    public int order();
-    public String message()     default "Passwords don't match";
-    public int messageResId()   default 0;
+    @StringRes int messageResId()   default -1;
+    String message()                default "Passwords don't match";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/CreditCard.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/CreditCard.java
new file mode 100644
index 0000000..5ffc66f
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/CreditCard.java
@@ -0,0 +1,46 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.CreditCardRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(CreditCardRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface CreditCard {
+    Type[] cardTypes()  default {
+        Type.AMEX, Type.DINERS, Type.DISCOVER,
+        Type.MASTERCARD, Type.VISA
+    };
+
+    @StringRes int messageResId()   default -1;
+    String message()                default "Invalid card";
+    int sequence()                  default -1;
+
+    enum Type {
+        AMEX, DINERS, DISCOVER, MASTERCARD, VISA, NONE
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMax.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMax.java
new file mode 100644
index 0000000..5ef9f5b
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMax.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.DecimalMaxRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(DecimalMaxRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface DecimalMax {
+    double value();
+
+    @StringRes int messageResId()   default -1;
+    String message()                default "Should be less than max value";
+    int sequence()                  default -1;
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMin.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMin.java
new file mode 100644
index 0000000..2c32bc7
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMin.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.DecimalMinRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(DecimalMinRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface DecimalMin {
+    double value();
+
+    @StringRes int messageResId()   default -1;
+    String message()                default "Should be greater than min value";
+    int sequence()                  default -1;
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Digits.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Digits.java
new file mode 100644
index 0000000..c6ce3fd
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Digits.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.DigitsRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(DigitsRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Digits {
+    int integer();
+    int fraction()                  default 2;
+
+    @StringRes int messageResId()   default -1;
+    String message()                default "Should be a digit";
+    int sequence()                  default -1;
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Domain.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Domain.java
new file mode 100644
index 0000000..b2ff5a6
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Domain.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.DomainRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(DomainRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Domain {
+    boolean allowLocal()            default false;
+
+    @StringRes int messageResId()   default -1;
+    String message()                default "Invalid domain name";
+    int sequence()                  default -1;
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java
new file mode 100644
index 0000000..f966354
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.EmailRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 1.0
+ */
+@ValidateUsing(EmailRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Email {
+    boolean allowLocal()            default false;
+
+    @StringRes int messageResId()   default -1;
+    String message()                default "Invalid email";
+    int sequence()                  default -1;
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java
new file mode 100644
index 0000000..ef633cf
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.DateFormats;
+import com.mobsandgeeks.saripaar.rule.FutureRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(FutureRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Future {
+    @StringRes int dateFormatResId()    default -1;
+    String dateFormat()                 default DateFormats.DMY;
+
+    @StringRes int messageResId()       default -1;
+    String message()                    default "Date should be in the future";
+    int sequence()                      default -1;
+}
diff --git a/src/com/mobsandgeeks/saripaar/annotation/IpAddress.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/IpAddress.java
similarity index 58%
rename from src/com/mobsandgeeks/saripaar/annotation/IpAddress.java
rename to saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/IpAddress.java
index dfeb005..d4811c4 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/IpAddress.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/IpAddress.java
@@ -1,35 +1,37 @@
 /*
- * Copyright (C) 2012 Mobs and Geeks
+ * Copyright (C) 2014 Mobs & Geeks
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.IpAddressRule;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import com.mobsandgeeks.saripaar.Rules;
-
 /**
- * Allows only valid IP Addresses on the annotated {@code View}.
- *
- * @author Ragunath Jawahar <rj@mobsandgeeks.com>
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 1.0
  */
-@Target(ElementType.FIELD)
+@ValidateUsing(IpAddressRule.class)
 @Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
 public @interface IpAddress {
-    public int order();
-    public String message()     default Rules.EMPTY_STRING;
-    public int messageResId()   default 0;
+    @StringRes int messageResId()   default -1;
+    String message()                default "Invalid IP address";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Isbn.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Isbn.java
new file mode 100644
index 0000000..ac0cde0
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Isbn.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.IsbnRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(IsbnRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Isbn {
+    @StringRes int messageResId()   default -1;
+    String message()                default "Invalid ISBN";
+    int sequence()                  default -1;
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Length.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Length.java
new file mode 100644
index 0000000..9d47789
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Length.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.LengthRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(LengthRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Length {
+    int min()                       default 0;
+    int max()                       default Integer.MAX_VALUE;
+    boolean trim()                  default false;
+
+    @StringRes int messageResId()   default -1;
+    String message()                default "Invalid length";
+    int sequence()                  default -1;
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java
new file mode 100644
index 0000000..151ea84
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.MaxRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(MaxRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Max {
+    int value();
+
+    @StringRes int messageResId()   default -1;
+    String message()                default "Should be less than max value";
+    int sequence()                  default -1;
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java
new file mode 100644
index 0000000..e568e49
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.MinRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(MinRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Min {
+    int value();
+
+    @StringRes int messageResId()   default -1;
+    String message()                default "Should be greater than min value";
+    int sequence()                  default -1;
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java
new file mode 100644
index 0000000..169c0c4
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.NotEmptyRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(NotEmptyRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface NotEmpty {
+    @StringRes int emptyTextResId() default -1;
+    String emptyText()              default "";
+    boolean trim()                  default false;
+
+    @StringRes int messageResId()   default -1;
+    String message()                default "This field is required";
+    int sequence()                  default -1;
+}
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Password.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Optional.java
similarity index 61%
rename from src/com/mobsandgeeks/saripaar/annotation/Password.java
rename to saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Optional.java
index f2275ad..8bf8529 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Password.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Optional.java
@@ -1,14 +1,14 @@
 /*
- * Copyright (C) 2012 Mobs and Geeks
+ * Copyright (C) 2015 Mobs & Geeks
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
@@ -20,14 +20,10 @@
 import java.lang.annotation.Target;
 
 /**
- * Used to annotate a password field. Passwords are always required.
- *
- * @author Ragunath Jawahar <rj@mobsandgeeks.com>
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.1.0
  */
-@Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
-public @interface Password {
-    public int order();
-    public String message()     default "Password is required";
-    public int messageResId()   default 0;
+@Target(ElementType.FIELD)
+public @interface Optional {
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Required.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Or.java
similarity index 60%
rename from src/com/mobsandgeeks/saripaar/annotation/Required.java
rename to saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Or.java
index 7f075b2..c49db59 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Required.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Or.java
@@ -1,34 +1,33 @@
 /*
- * Copyright (C) 2012 Mobs and Geeks
+ * Copyright (C) 2015 Mobs & Geeks
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import android.support.annotation.StringRes;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
 /**
- * When used, the field cannot be empty.
- *
- * @author Ragunath Jawahar <rj@mobsandgeeks.com>
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.1.0
  */
-@Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
-public @interface Required {
-    public int order();
-    public boolean trim()       default true;
-    public String message()     default "This field is required.";
-    public int messageResId()   default 0;
+@Target(ElementType.FIELD)
+public @interface Or {
+    @StringRes int messageResId()   default -1;
+    String message()                default "One of the rules must be valid";
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Email.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Order.java
similarity index 60%
rename from src/com/mobsandgeeks/saripaar/annotation/Email.java
rename to saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Order.java
index 675d79c..7222482 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Email.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Order.java
@@ -1,14 +1,14 @@
 /*
- * Copyright (C) 2012 Mobs and Geeks
+ * Copyright (C) 2014 Mobs & Geeks
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
@@ -19,17 +19,12 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import com.mobsandgeeks.saripaar.Rules;
-
 /**
- * Enforces email validation on the annotated {@code View}.
- *
- * @author Ragunath Jawahar <rj@mobsandgeeks.com>
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
  */
-@Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
-public @interface Email {
-    public int order();
-    public String message()     default Rules.EMPTY_STRING;
-    public int messageResId()   default 0;
+@Target(ElementType.FIELD)
+public @interface Order {
+    int value();
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Password.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Password.java
new file mode 100644
index 0000000..bfbaf51
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Password.java
@@ -0,0 +1,46 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.PasswordRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 1.0
+ */
+@ValidateUsing(PasswordRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Password {
+    int min()                       default 6;
+    Scheme scheme()                 default Scheme.ANY;
+
+    @StringRes int messageResId()   default -1;
+    String message()                default "Invalid password";
+    int sequence()                  default -1;
+
+    enum Scheme {
+        ANY, ALPHA, ALPHA_MIXED_CASE,
+        NUMERIC, ALPHA_NUMERIC, ALPHA_NUMERIC_MIXED_CASE,
+        ALPHA_NUMERIC_SYMBOLS, ALPHA_NUMERIC_MIXED_CASE_SYMBOLS
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Past.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Past.java
new file mode 100644
index 0000000..39a4ff1
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Past.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.DateFormats;
+import com.mobsandgeeks.saripaar.rule.PastRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(PastRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Past {
+    @StringRes int dateFormatResId()    default -1;
+    String dateFormat()                 default DateFormats.DMY;
+
+    @StringRes int messageResId()       default -1;
+    String message()                    default "Date should be in the past";
+    int sequence()                      default -1;
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Pattern.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Pattern.java
new file mode 100644
index 0000000..5d3e431
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Pattern.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.PatternRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(PatternRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Pattern {
+    @StringRes int regexResId()     default -1;
+    String regex()                  default ".*";
+    boolean caseSensitive()         default true;
+
+    @StringRes int messageResId()   default -1;
+    String message()                default "Input does not match pattern";
+    int sequence()                  default -1;
+}
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Select.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Select.java
similarity index 60%
rename from src/com/mobsandgeeks/saripaar/annotation/Select.java
rename to saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Select.java
index 07c0bfe..890aa1a 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Select.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Select.java
@@ -1,20 +1,22 @@
 /*
- * Copyright (c) 2013 Mobs and Geeks
+ * Copyright (C) 2014 Mobs & Geeks
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.mobsandgeeks.saripaar.annotation;
 
-import android.widget.Spinner;
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.SelectRule;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -22,15 +24,16 @@
 import java.lang.annotation.Target;
 
 /**
- * Used on a {@link Spinner} to check if the selected item is not the default.
- * 
  * @author Muhammad Hewedy
+ * @since 1.0
  */
-@Target(ElementType.FIELD)
+@ValidateUsing(SelectRule.class)
 @Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
 public @interface Select {
-    public int order();
-    public int defaultSelection()   default 0;
-    public String message()         default "Select an item.";
-    public int messageResId()       default 0;
+    int defaultSelection()          default 0;
+
+    @StringRes int messageResId()   default -1;
+    String message()                default "Select a value";
+    int sequence()                  default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Url.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Url.java
new file mode 100644
index 0000000..f98c26c
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Url.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import android.support.annotation.StringRes;
+
+import com.mobsandgeeks.saripaar.rule.UrlRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@ValidateUsing(UrlRule.class)
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Url {
+    String[] schemes()              default { "http", "https", "ftp" };
+    boolean allowFragments()        default true;
+
+    @StringRes int messageResId()   default -1;
+    String message()                default "Invalid URL";
+    int sequence()                  default -1;
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ValidateUsing.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ValidateUsing.java
new file mode 100644
index 0000000..4567b32
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ValidateUsing.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.ANNOTATION_TYPE)
+public @interface ValidateUsing {
+    Class<? extends AnnotationRule> value();
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/exception/ConversionException.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/exception/ConversionException.java
new file mode 100644
index 0000000..1f1b799
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/exception/ConversionException.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.exception;
+
+/**
+ * Thrown by {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter}s when an adapter is unable
+ * to convert the data retrieved from a {@link android.view.View} into the desired type.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class ConversionException extends Exception {
+
+    public ConversionException(String message) {
+        super(message);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/exception/SaripaarViolationException.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/exception/SaripaarViolationException.java
new file mode 100644
index 0000000..c35f93a
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/exception/SaripaarViolationException.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.exception;
+
+/**
+ * Thrown when the developer does not adhere to framework requirements when extending Saripaar's
+ * functionality.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class SaripaarViolationException extends RuntimeException {
+
+    public SaripaarViolationException(final String message) {
+        super(message);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/AssertFalseRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/AssertFalseRule.java
new file mode 100644
index 0000000..6c9aaad
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/AssertFalseRule.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.AssertFalse;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class AssertFalseRule extends AnnotationRule<AssertFalse, Boolean> {
+
+    protected AssertFalseRule(final AssertFalse assertFalse) {
+        super(assertFalse);
+    }
+
+    @Override
+    public boolean isValid(final Boolean value) {
+        if (value == null) {
+            throw new IllegalArgumentException("'data' cannot be null.");
+        }
+        return !value;
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/AssertTrueRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/AssertTrueRule.java
new file mode 100644
index 0000000..325f2ed
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/AssertTrueRule.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.AssertTrue;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class AssertTrueRule extends AnnotationRule<AssertTrue, Boolean> {
+
+    protected AssertTrueRule(final AssertTrue assertTrue) {
+        super(assertTrue);
+    }
+
+    @Override
+    public boolean isValid(final Boolean value) {
+        if (value == null) {
+            throw new IllegalArgumentException("'data' cannot be null.");
+        }
+        return value;
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/CheckedRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/CheckedRule.java
new file mode 100644
index 0000000..ddc6d5a
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/CheckedRule.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.Checked;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class CheckedRule extends AnnotationRule<Checked, Boolean> {
+
+    protected CheckedRule(final Checked checked) {
+        super(checked);
+    }
+
+    @Override
+    public boolean isValid(final Boolean value) {
+        if (value == null) {
+            throw new IllegalArgumentException("'data' cannot be null.");
+        }
+        return mRuleAnnotation.value() == value;
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/ConfirmEmailRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/ConfirmEmailRule.java
new file mode 100644
index 0000000..76e9b92
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/ConfirmEmailRule.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.ValidationContext;
+import com.mobsandgeeks.saripaar.annotation.ConfirmEmail;
+import com.mobsandgeeks.saripaar.annotation.Email;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class ConfirmEmailRule extends SameValueContextualRule<ConfirmEmail, Email, String> {
+
+    protected ConfirmEmailRule(final ConfirmEmail confirmEmail,
+            final ValidationContext validationContext) {
+        super(confirmEmail, Email.class, validationContext);
+    }
+
+    @Override
+    public boolean isValid(final String confirmValue) {
+        return super.isValid(confirmValue);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/ConfirmPasswordRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/ConfirmPasswordRule.java
new file mode 100644
index 0000000..11e231b
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/ConfirmPasswordRule.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.ValidationContext;
+import com.mobsandgeeks.saripaar.annotation.ConfirmPassword;
+import com.mobsandgeeks.saripaar.annotation.Password;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class ConfirmPasswordRule
+        extends SameValueContextualRule<ConfirmPassword, Password, String> {
+
+    protected ConfirmPasswordRule(final ConfirmPassword confirmPassword,
+            final ValidationContext validationContext) {
+        super(confirmPassword, Password.class, validationContext);
+    }
+
+    @Override
+    public boolean isValid(final String confirmValue) {
+        return super.isValid(confirmValue);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/CreditCardRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/CreditCardRule.java
new file mode 100644
index 0000000..f119d22
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/CreditCardRule.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.CreditCard;
+
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+
+import commons.validator.routines.CreditCardValidator;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class CreditCardRule extends AnnotationRule<CreditCard, String> {
+    private static final Map<CreditCard.Type, Long> CARD_TYPE_REGISTRY =
+            new HashMap<CreditCard.Type, Long>(){{
+                put(CreditCard.Type.AMEX, CreditCardValidator.AMEX);
+                put(CreditCard.Type.DINERS, CreditCardValidator.DINERS);
+                put(CreditCard.Type.DISCOVER, CreditCardValidator.DISCOVER);
+                put(CreditCard.Type.MASTERCARD, CreditCardValidator.MASTERCARD);
+                put(CreditCard.Type.VISA, CreditCardValidator.VISA);
+            }};
+
+    protected CreditCardRule(final CreditCard creditCard) {
+        super(creditCard);
+    }
+
+    @Override
+    public boolean isValid(final String creditCardNumber) {
+        CreditCard.Type[] types = mRuleAnnotation.cardTypes();
+        HashSet<CreditCard.Type> typesSet = new HashSet<CreditCard.Type>(Arrays.asList(types));
+
+        long options = 0;
+        if (!typesSet.contains(CreditCard.Type.NONE)) {
+            for (CreditCard.Type type : typesSet) {
+                options += CARD_TYPE_REGISTRY.get(type);
+            }
+        } else {
+            options = CreditCardValidator.NONE;
+        }
+
+        return new CreditCardValidator(options).isValid(creditCardNumber.replaceAll("\\s", ""));
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/DecimalMaxRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/DecimalMaxRule.java
new file mode 100644
index 0000000..4b2de5f
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/DecimalMaxRule.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.DecimalMax;
+
+import commons.validator.routines.DoubleValidator;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class DecimalMaxRule extends AnnotationRule<DecimalMax, Double> {
+
+    protected DecimalMaxRule(final DecimalMax decimalMax) {
+        super(decimalMax);
+    }
+
+    @Override
+    public boolean isValid(final Double value) {
+        if (value == null) {
+            throw new IllegalArgumentException("'Double' cannot be null.");
+        }
+        double maxValue = mRuleAnnotation.value();
+        return DoubleValidator.getInstance().maxValue(value, maxValue);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/DecimalMinRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/DecimalMinRule.java
new file mode 100644
index 0000000..2e41c78
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/DecimalMinRule.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.DecimalMin;
+
+import commons.validator.routines.DoubleValidator;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class DecimalMinRule extends AnnotationRule<DecimalMin, Double> {
+
+    protected DecimalMinRule(final DecimalMin decimalMin) {
+        super(decimalMin);
+    }
+
+    @Override
+    public boolean isValid(final Double value) {
+        if (value == null) {
+            throw new IllegalArgumentException("'Double' cannot be null.");
+        }
+        double minValue = mRuleAnnotation.value();
+        return DoubleValidator.getInstance().minValue(value, minValue);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/DigitsRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/DigitsRule.java
new file mode 100644
index 0000000..455df18
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/DigitsRule.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.Digits;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class DigitsRule extends AnnotationRule<Digits, String> {
+
+    protected DigitsRule(final Digits digits) {
+        super(digits);
+    }
+
+    @Override
+    public boolean isValid(final String digits) {
+        int integer = mRuleAnnotation.integer();
+        int fraction = mRuleAnnotation.fraction();
+
+        String digitsRegex = String.format("(\\d{0,%d})(\\.\\d{1,%d})?", integer, fraction);
+        return digits.matches(digitsRegex);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/DomainRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/DomainRule.java
new file mode 100644
index 0000000..0e03f2d
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/DomainRule.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.Domain;
+
+import commons.validator.routines.DomainValidator;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class DomainRule extends AnnotationRule<Domain, String> {
+
+    protected DomainRule(final Domain domain) {
+        super(domain);
+    }
+
+    @Override
+    public boolean isValid(final String domain) {
+        boolean allowLocal = mRuleAnnotation.allowLocal();
+        DomainValidator domainValidator = DomainValidator.getInstance(allowLocal);
+        return domainValidator.isValid(domain);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/EmailRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/EmailRule.java
new file mode 100644
index 0000000..9e1b670
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/EmailRule.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.Email;
+
+import commons.validator.routines.EmailValidator;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class EmailRule extends AnnotationRule<Email, String> {
+
+    protected EmailRule(final Email email) {
+        super(email);
+    }
+
+    @Override
+    public boolean isValid(final String email) {
+        boolean allowLocal = mRuleAnnotation.allowLocal();
+        return EmailValidator.getInstance(allowLocal).isValid(email);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java
new file mode 100644
index 0000000..54d68cd
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import android.content.Context;
+
+import com.mobsandgeeks.saripaar.ContextualAnnotationRule;
+import com.mobsandgeeks.saripaar.ValidationContext;
+import com.mobsandgeeks.saripaar.annotation.Future;
+
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class FutureRule extends ContextualAnnotationRule<Future, String> {
+
+    protected FutureRule(final Future future, final ValidationContext validationContext) {
+        super(future, validationContext);
+    }
+
+    @Override
+    public boolean isValid(final String dateString) {
+        DateFormat dateFormat = getDateFormat();
+        Date parsedDate = null;
+        try {
+            parsedDate = dateFormat.parse(dateString);
+        } catch (ParseException ignored) {}
+
+        Date now = new Date();
+        return parsedDate != null && parsedDate.after(now);
+    }
+
+    private DateFormat getDateFormat() {
+        Context context = mValidationContext.getContext();
+        int dateFormatResId = mRuleAnnotation.dateFormatResId();
+        String dateFormatString =  dateFormatResId != -1
+                ? context.getString(dateFormatResId) : mRuleAnnotation.dateFormat();
+        return new SimpleDateFormat(dateFormatString);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/IpAddressRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/IpAddressRule.java
new file mode 100644
index 0000000..e31a46e
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/IpAddressRule.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.IpAddress;
+
+import commons.validator.routines.InetAddressValidator;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class IpAddressRule extends AnnotationRule<IpAddress, String> {
+
+    protected IpAddressRule(final IpAddress ipAddress) {
+        super(ipAddress);
+    }
+
+    @Override
+    public boolean isValid(final String ipAddress) {
+        return InetAddressValidator.getInstance().isValid(ipAddress);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/IsbnRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/IsbnRule.java
new file mode 100644
index 0000000..9489ca9
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/IsbnRule.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.Isbn;
+
+import commons.validator.routines.ISBNValidator;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class IsbnRule extends AnnotationRule<Isbn, String> {
+
+    protected IsbnRule(final Isbn isbn) {
+        super(isbn);
+    }
+
+    @Override
+    public boolean isValid(final String isbn) {
+        return ISBNValidator.getInstance().isValid(isbn);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/LengthRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/LengthRule.java
new file mode 100644
index 0000000..b65992d
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/LengthRule.java
@@ -0,0 +1,66 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.Length;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class LengthRule extends AnnotationRule<Length, String> {
+
+    protected LengthRule(final Length length) {
+        super(length);
+    }
+
+    @Override
+    public boolean isValid(final String text) {
+        if (text == null) {
+            throw new IllegalArgumentException("'text' cannot be null.");
+        }
+        int ruleMin = mRuleAnnotation.min();
+        int ruleMax = mRuleAnnotation.max();
+
+        // Assert min is <= max
+        assertMinMax(ruleMin, ruleMax);
+
+        // Trim?
+        int length = mRuleAnnotation.trim() ? text.trim().length() : text.length();
+
+        // Check for min length
+        boolean minIsValid = true;
+        if (ruleMin != Integer.MIN_VALUE) { // Min is set
+            minIsValid = length >= ruleMin;
+        }
+
+        // Check for max length
+        boolean maxIsValid = true;
+        if (ruleMax != Integer.MAX_VALUE) { // Max is set
+            maxIsValid = length <= ruleMax;
+        }
+
+        return minIsValid && maxIsValid;
+    }
+
+    private void assertMinMax(int min, int max) {
+        if (min > max) {
+            String message = String.format(
+                    "'min' (%d) should be less than or equal to 'max' (%d).", min, max);
+            throw new IllegalStateException(message);
+        }
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/MaxRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/MaxRule.java
new file mode 100644
index 0000000..41dfdf1
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/MaxRule.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.Max;
+
+import commons.validator.routines.IntegerValidator;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class MaxRule extends AnnotationRule<Max, Integer> {
+
+    protected MaxRule(final Max max) {
+        super(max);
+    }
+
+    @Override
+    public boolean isValid(final Integer value) {
+        if (value == null) {
+            throw new IllegalArgumentException("'Integer' cannot be null.");
+        }
+        int maxValue = mRuleAnnotation.value();
+        return IntegerValidator.getInstance().maxValue(value, maxValue);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/MinRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/MinRule.java
new file mode 100644
index 0000000..a010e1e
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/MinRule.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.Min;
+
+import commons.validator.routines.IntegerValidator;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class MinRule extends AnnotationRule<Min, Integer> {
+
+    protected MinRule(final Min min) {
+        super(min);
+    }
+
+    @Override
+    public boolean isValid(final Integer value) {
+        if (value == null) {
+            throw new IllegalArgumentException("'Integer' cannot be null.");
+        }
+        int minValue = mRuleAnnotation.value();
+        return IntegerValidator.getInstance().minValue(value, minValue);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/NotEmptyRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/NotEmptyRule.java
new file mode 100644
index 0000000..d23e169
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/NotEmptyRule.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import android.content.Context;
+
+import com.mobsandgeeks.saripaar.ContextualAnnotationRule;
+import com.mobsandgeeks.saripaar.ValidationContext;
+import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class NotEmptyRule extends ContextualAnnotationRule<NotEmpty, String> {
+
+    protected NotEmptyRule(final NotEmpty notEmpty, final ValidationContext validationContext) {
+        super(notEmpty, validationContext);
+    }
+
+    @Override
+    public boolean isValid(final String data) {
+        boolean isEmpty = false;
+        if (data != null) {
+            String text = mRuleAnnotation.trim() ? data.trim() : data;
+
+            Context context = mValidationContext.getContext();
+            String emptyText = mRuleAnnotation.emptyTextResId() != -1
+                    ? context.getString(mRuleAnnotation.emptyTextResId())
+                    : mRuleAnnotation.emptyText();
+
+            isEmpty = emptyText.equals(text) || "".equals(text);
+        }
+
+        return !isEmpty;
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PasswordRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PasswordRule.java
new file mode 100644
index 0000000..57f8c59
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PasswordRule.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.Password;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class PasswordRule extends AnnotationRule<Password, String> {
+
+    /*
+     * http://stackoverflow.com/questions/1559751/
+     * regex-to-make-sure-that-the-string-contains-at-least-one-lower-case-char-upper
+     */
+    private final Map<Password.Scheme, String> SCHEME_PATTERNS =
+            new HashMap<Password.Scheme, String>() {{
+                put(Password.Scheme.ANY, ".+");
+                put(Password.Scheme.ALPHA, "\\w+");
+                put(Password.Scheme.ALPHA_MIXED_CASE, "(?=.*[a-z])(?=.*[A-Z]).+");
+                put(Password.Scheme.NUMERIC, "\\d+");
+                put(Password.Scheme.ALPHA_NUMERIC, "(?=.*[a-zA-Z])(?=.*[\\d]).+");
+                put(Password.Scheme.ALPHA_NUMERIC_MIXED_CASE,
+                    "(?=.*[a-z])(?=.*[A-Z])(?=.*[\\d]).+");
+                put(Password.Scheme.ALPHA_NUMERIC_SYMBOLS,
+                    "(?=.*[a-zA-Z])(?=.*[\\d])(?=.*([^\\w])).+");
+                put(Password.Scheme.ALPHA_NUMERIC_MIXED_CASE_SYMBOLS,
+                    "(?=.*[a-z])(?=.*[A-Z])(?=.*[\\d])(?=.*([^\\w])).+");
+            }};
+
+    protected PasswordRule(final Password password) {
+        super(password);
+    }
+
+    @Override
+    public boolean isValid(final String password) {
+        boolean hasMinChars = password.length() >= mRuleAnnotation.min();
+        boolean matchesScheme = password.matches(SCHEME_PATTERNS.get(mRuleAnnotation.scheme()));
+        return hasMinChars && matchesScheme;
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PastRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PastRule.java
new file mode 100644
index 0000000..2f3dbed
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PastRule.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import android.content.Context;
+
+import com.mobsandgeeks.saripaar.ContextualAnnotationRule;
+import com.mobsandgeeks.saripaar.ValidationContext;
+import com.mobsandgeeks.saripaar.annotation.Past;
+
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class PastRule extends ContextualAnnotationRule<Past, String> {
+
+    protected PastRule(final Past past, final ValidationContext validationContext) {
+        super(past, validationContext);
+    }
+
+    @Override
+    public boolean isValid(final String dateString) {
+        DateFormat dateFormat = getDateFormat();
+        Date parsedDate = null;
+        try {
+            parsedDate = dateFormat.parse(dateString);
+        } catch (ParseException ignored) {}
+
+        Date now = new Date();
+        return parsedDate != null && parsedDate.before(now);
+    }
+
+    private DateFormat getDateFormat() {
+        Context context = mValidationContext.getContext();
+        int dateFormatResId = mRuleAnnotation.dateFormatResId();
+        String dateFormatString =  dateFormatResId != -1
+                ? context.getString(dateFormatResId) : mRuleAnnotation.dateFormat();
+        return new SimpleDateFormat(dateFormatString);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PatternRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PatternRule.java
new file mode 100644
index 0000000..4821d72
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PatternRule.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.ContextualAnnotationRule;
+import com.mobsandgeeks.saripaar.ValidationContext;
+import com.mobsandgeeks.saripaar.annotation.Pattern;
+
+import commons.validator.routines.RegexValidator;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class PatternRule extends ContextualAnnotationRule<Pattern, String> {
+
+    protected PatternRule(final Pattern pattern, final ValidationContext validationContext) {
+        super(pattern, validationContext);
+    }
+
+    @Override
+    public boolean isValid(final String text) {
+        int regexResId = mRuleAnnotation.regexResId();
+        String regex = regexResId != -1
+                ? mValidationContext.getContext().getString(regexResId) : mRuleAnnotation.regex();
+        boolean caseSensitive = mRuleAnnotation.caseSensitive();
+        return new RegexValidator(regex, caseSensitive).isValid(text);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SameValueContextualRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SameValueContextualRule.java
new file mode 100644
index 0000000..78e818d
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SameValueContextualRule.java
@@ -0,0 +1,68 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import android.view.View;
+
+import com.mobsandgeeks.saripaar.ContextualAnnotationRule;
+import com.mobsandgeeks.saripaar.ValidationContext;
+
+import java.lang.annotation.Annotation;
+import java.util.List;
+
+/**
+ * A generic class for comparing values across two {@link android.view.View}s.
+ *
+ * @see com.mobsandgeeks.saripaar.annotation.ConfirmEmail
+ * @see com.mobsandgeeks.saripaar.annotation.ConfirmPassword
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+class SameValueContextualRule<CONFIRM extends Annotation, SOURCE extends Annotation, DATA_TYPE>
+        extends ContextualAnnotationRule<CONFIRM, DATA_TYPE> {
+    private Class<SOURCE> mSourceClass;
+    private Class<CONFIRM> mConfirmClass;
+
+    protected SameValueContextualRule(final CONFIRM confirmAnnotation,
+            final Class<SOURCE> sourceClass, final ValidationContext validationContext) {
+        super(confirmAnnotation, validationContext);
+        mConfirmClass = (Class<CONFIRM>) confirmAnnotation.annotationType();
+        mSourceClass = sourceClass;
+    }
+
+    @Override
+    public boolean isValid(final DATA_TYPE confirmValue) {
+        List<View> sourceViews = mValidationContext.getAnnotatedViews(mSourceClass);
+        int nSourceViews = sourceViews.size();
+
+        if (nSourceViews == 0) {
+            String message = String.format(
+                    "You should have a view annotated with '%s' to use '%s'.",
+                    mSourceClass.getName(), mConfirmClass.getName());
+            throw new IllegalStateException(message);
+        } else if (nSourceViews > 1) {
+            String message = String.format(
+                    "More than 1 field annotated with '%s'.", mSourceClass.getName());
+            throw new IllegalStateException(message);
+        }
+
+        // There's only one, then we're good to go :)
+        View view = sourceViews.get(0);
+        Object sourceValue = mValidationContext.getData(view, mSourceClass);
+
+        return confirmValue.equals(sourceValue);
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SelectRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SelectRule.java
new file mode 100644
index 0000000..452f5bd
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SelectRule.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.Select;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class SelectRule extends AnnotationRule<Select, Integer> {
+
+    protected SelectRule(final Select select) {
+        super(select);
+    }
+
+    @Override
+    public boolean isValid(final Integer index) {
+        if (index == null) {
+            throw new IllegalArgumentException("'index' cannot be null.");
+        }
+        return mRuleAnnotation.defaultSelection() != index;
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/UrlRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/UrlRule.java
new file mode 100644
index 0000000..6938fb2
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/UrlRule.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2014 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.rule;
+
+import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.annotation.Url;
+
+import commons.validator.routines.UrlValidator;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class UrlRule extends AnnotationRule<Url, String> {
+
+    protected UrlRule(final Url url) {
+        super(url);
+    }
+
+    @Override
+    public boolean isValid(final String url) {
+        String[] schemes = mRuleAnnotation.schemes();
+        long options = mRuleAnnotation.allowFragments()
+                ? 0 : UrlValidator.NO_FRAGMENTS;
+
+        UrlValidator urlValidator = schemes != null && schemes.length > 0
+                ? new UrlValidator(schemes, options) : UrlValidator.getInstance();
+
+        return urlValidator.isValid(url);
+    }
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/AbstractFormatValidator.java b/saripaar/src/main/java/commons/validator/routines/AbstractFormatValidator.java
new file mode 100644
index 0000000..1bd3a03
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/AbstractFormatValidator.java
@@ -0,0 +1,221 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines;
+
+import java.text.Format;
+import java.text.ParsePosition;
+import java.util.Locale;
+import java.io.Serializable;
+
+/**
+ * <p>Abstract class for <i>Format</i> based Validation.</p>
+ *
+ * <p>This is a <i>base</i> class for building Date and Number
+ *    Validators using format parsing.</p>
+ *
+ * @version $Revision$
+ * @since Validator 1.3.0
+ */
+public abstract class AbstractFormatValidator implements Serializable {
+
+    private static final long serialVersionUID = -4690687565200568258L;
+
+    private final boolean strict;
+
+    /**
+     * Construct an instance with the specified strict setting.
+     *
+     * @param strict <code>true</code> if strict
+     *        <code>Format</code> parsing should be used.
+     */
+    public AbstractFormatValidator(boolean strict) {
+        this.strict = strict;
+    }
+
+    /**
+     * <p>Indicates whether validated values should adhere
+     *    strictly to the <code>Format</code> used.</p>
+     *
+     * <p>Typically implementations of <code>Format</code>
+     *    ignore invalid characters at the end of the value
+     *    and just stop parsing. For example parsing a date
+     *    value of <code>01/01/20x0</code> using a pattern
+     *    of <code>dd/MM/yyyy</code> will result in a year
+     *    of <code>20</code> if <code>strict</code> is set
+     *    to <code>false</code>, whereas setting <code>strict</code>
+     *    to <code>true</code> will cause this value to fail
+     *    validation.</p>
+     *
+     * @return <code>true</code> if strict <code>Format</code>
+     *         parsing should be used.
+     */
+    public boolean isStrict() {
+        return strict;
+    }
+
+    /**
+     * <p>Validate using the default <code>Locale</code>.
+     *
+     * @param value The value validation is being performed on.
+     * @return <code>true</code> if the value is valid.
+     */
+    public boolean isValid(String value) {
+        return isValid(value, (String)null, (Locale)null);
+    }
+
+    /**
+     * <p>Validate using the specified <i>pattern</i>.
+     *
+     * @param value The value validation is being performed on.
+     * @param pattern The pattern used to validate the value against.
+     * @return <code>true</code> if the value is valid.
+     */
+    public boolean isValid(String value, String pattern) {
+        return isValid(value, pattern, (Locale)null);
+    }
+
+    /**
+     * <p>Validate using the specified <code>Locale</code>.
+     *
+     * @param value The value validation is being performed on.
+     * @param locale The locale to use for the Format, defaults to the default
+     * @return <code>true</code> if the value is valid.
+     */
+    public boolean isValid(String value, Locale locale) {
+        return isValid(value, (String)null, locale);
+    }
+
+    /**
+     * <p>Validate using the specified pattern and/or <code>Locale</code>.
+     *
+     * @param value The value validation is being performed on.
+     * @param pattern The pattern used to format the value.
+     * @param locale The locale to use for the Format, defaults to the default
+     * @return <code>true</code> if the value is valid.
+     */
+    public abstract boolean isValid(String value, String pattern, Locale locale);
+
+    /**
+     * <p>Format an object into a <code>String</code> using
+     * the default Locale.</p>
+     *
+     * @param value The value validation is being performed on.
+     * @return The value formatted as a <code>String</code>.
+     */
+    public String format(Object value) {
+        return format(value, (String)null, (Locale)null);
+    }
+
+    /**
+     * <p>Format an object into a <code>String</code> using
+     * the specified pattern.</p>
+     *
+     * @param value The value validation is being performed on.
+     * @param pattern The pattern used to format the value.
+     * @return The value formatted as a <code>String</code>.
+     */
+    public String format(Object value, String pattern) {
+        return format(value, pattern, (Locale)null);
+    }
+
+    /**
+     * <p>Format an object into a <code>String</code> using
+     * the specified Locale.</p>
+     *
+     * @param value The value validation is being performed on.
+     * @param locale The locale to use for the Format.
+     * @return The value formatted as a <code>String</code>.
+     */
+    public String format(Object value, Locale locale) {
+        return format(value, (String)null, locale);
+    }
+
+    /**
+     * <p>Format an object using the specified pattern and/or
+     *    <code>Locale</code>.
+     *
+     * @param value The value validation is being performed on.
+     * @param pattern The pattern used to format the value.
+     * @param locale The locale to use for the Format.
+     * @return The value formatted as a <code>String</code>.
+     */
+    public String format(Object value, String pattern, Locale locale) {
+        Format formatter = getFormat(pattern, locale);
+        return format(value, formatter);
+    }
+
+    /**
+     * <p>Format a value with the specified <code>Format</code>.</p>
+     *
+     * @param value The value to be formatted.
+     * @param formatter The Format to use.
+     * @return The formatted value.
+     */
+    protected String format(Object value, Format formatter) {
+        return formatter.format(value);
+    }
+
+    /**
+     * <p>Parse the value with the specified <code>Format</code>.</p>
+     *
+     * @param value The value to be parsed.
+     * @param formatter The Format to parse the value with.
+     * @return The parsed value if valid or <code>null</code> if invalid.
+     */
+    protected Object parse(String value, Format formatter) {
+
+        ParsePosition pos = new ParsePosition(0);
+        Object parsedValue = formatter.parseObject(value, pos);
+        if (pos.getErrorIndex() > -1) {
+            return null;
+        }
+
+        if (isStrict() && pos.getIndex() < value.length()) {
+            return null;
+        }
+
+        if (parsedValue != null) {
+            parsedValue = processParsedValue(parsedValue, formatter);
+        }
+
+        return parsedValue;
+
+    }
+
+    /**
+     * <p>Process the parsed value, performing any further validation
+     *    and type conversion required.</p>
+     *
+     * @param value The parsed object created.
+     * @param formatter The Format used to parse the value with.
+     * @return The parsed value converted to the appropriate type
+     *         if valid or <code>null</code> if invalid.
+     */
+    protected abstract Object processParsedValue(Object value, Format formatter);
+
+    /**
+     * <p>Returns a <code>Format</code> for the specified <i>pattern</i>
+     *    and/or <code>Locale</code>.</p>
+     *
+     * @param pattern The pattern used to validate the value against or
+     *        <code>null</code> to use the default for the <code>Locale</code>.
+     * @param locale The locale to use for the currency format, system default if null.
+     * @return The <code>NumberFormat</code> to created.
+     */
+    protected abstract Format getFormat(String pattern, Locale locale);
+
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/AbstractNumberValidator.java b/saripaar/src/main/java/commons/validator/routines/AbstractNumberValidator.java
new file mode 100644
index 0000000..6eb6329
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/AbstractNumberValidator.java
@@ -0,0 +1,271 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines;
+
+import java.text.DecimalFormatSymbols;
+import java.text.Format;
+import java.text.NumberFormat;
+import java.text.DecimalFormat;
+import java.util.Locale;
+
+/**
+ * <p>Abstract class for Number Validation.</p>
+ *
+ * <p>This is a <i>base</i> class for building Number
+ *    Validators using format parsing.</p>
+ *
+ * @version $Revision$
+ * @since Validator 1.3.0
+ */
+public abstract class AbstractNumberValidator extends AbstractFormatValidator {
+
+    private static final long serialVersionUID = -3088817875906765463L;
+
+    /** Standard <code>NumberFormat</code> type */
+    public static final int STANDARD_FORMAT = 0;
+
+    /** Currency <code>NumberFormat</code> type */
+    public static final int CURRENCY_FORMAT = 1;
+
+    /** Percent <code>NumberFormat</code> type */
+    public static final int PERCENT_FORMAT  = 2;
+
+    private final boolean allowFractions;
+    private final int     formatType;
+
+    /**
+     * Construct an instance with specified <i>strict</i>
+     * and <i>decimal</i> parameters.
+     *
+     * @param strict <code>true</code> if strict
+     *        <code>Format</code> parsing should be used.
+     * @param formatType The <code>NumberFormat</code> type to
+     *        create for validation, default is STANDARD_FORMAT.
+     * @param allowFractions <code>true</code> if fractions are
+     *        allowed or <code>false</code> if integers only.
+     */
+    public AbstractNumberValidator(boolean strict, int formatType, boolean allowFractions) {
+        super(strict);
+        this.allowFractions = allowFractions;
+        this.formatType = formatType;
+    }
+
+    /**
+     * <p>Indicates whether the number being validated is
+     *    a decimal or integer.</p>
+     *
+     * @return <code>true</code> if decimals are allowed
+     *       or <code>false</code> if the number is an integer.
+     */
+    public boolean isAllowFractions() {
+        return allowFractions;
+    }
+
+    /**
+     * <p>Indicates the type of <code>NumberFormat</code> created
+     *    by this validator instance.</p>
+     *
+     * @return the format type created.
+     */
+    public int getFormatType() {
+        return formatType;
+    }
+
+    /**
+     * <p>Validate using the specified <code>Locale</code>.</p>
+     *
+     * @param value The value validation is being performed on.
+     * @param pattern The pattern used to validate the value against, or the
+     *        default for the <code>Locale</code> if <code>null</code>.
+     * @param locale The locale to use for the date format, system default if null.
+     * @return <code>true</code> if the value is valid.
+     */
+    public boolean isValid(String value, String pattern, Locale locale) {
+        Object parsedValue = parse(value, pattern, locale);
+        return (parsedValue == null ? false : true);
+    }
+
+    /**
+     * Check if the value is within a specified range.
+     *
+     * @param value The value validation is being performed on.
+     * @param min The minimum value of the range.
+     * @param max The maximum value of the range.
+     * @return <code>true</code> if the value is within the
+     *         specified range.
+     */
+    public boolean isInRange(Number value, Number min, Number max) {
+        return (minValue(value, min) && maxValue(value, max));
+    }
+
+    /**
+     * Check if the value is greater than or equal to a minimum.
+     *
+     * @param value The value validation is being performed on.
+     * @param min The minimum value.
+     * @return <code>true</code> if the value is greater than
+     *         or equal to the minimum.
+     */
+    public boolean minValue(Number value, Number min) {
+        if (isAllowFractions()) {
+            return (value.doubleValue() >= min.doubleValue());
+        }
+        return (value.longValue() >= min.longValue());
+    }
+
+    /**
+     * Check if the value is less than or equal to a maximum.
+     *
+     * @param value The value validation is being performed on.
+     * @param max The maximum value.
+     * @return <code>true</code> if the value is less than
+     *         or equal to the maximum.
+     */
+    public boolean maxValue(Number value, Number max) {
+        if (isAllowFractions()) {
+            return (value.doubleValue() <= max.doubleValue());
+        }
+        return (value.longValue() <= max.longValue());
+    }
+
+    /**
+     * <p>Parse the value using the specified pattern.</p>
+     *
+     * @param value The value validation is being performed on.
+     * @param pattern The pattern used to validate the value against, or the
+     *        default for the <code>Locale</code> if <code>null</code>.
+     * @param locale The locale to use for the date format, system default if null.
+     * @return The parsed value if valid or <code>null</code> if invalid.
+     */
+    protected Object parse(String value, String pattern, Locale locale) {
+
+        value = (value == null ? null : value.trim());
+        if (value == null || value.length() == 0) {
+            return null;
+        }
+        Format formatter = getFormat(pattern, locale);
+        return parse(value, formatter);
+
+    }
+
+    /**
+     * <p>Process the parsed value, performing any further validation
+     *    and type conversion required.</p>
+     *
+     * @param value The parsed object created.
+     * @param formatter The Format used to parse the value with.
+     * @return The parsed value converted to the appropriate type
+     *         if valid or <code>null</code> if invalid.
+     */
+    protected abstract Object processParsedValue(Object value, Format formatter);
+
+    /**
+     * <p>Returns a <code>NumberFormat</code> for the specified <i>pattern</i>
+     *    and/or <code>Locale</code>.</p>
+     *
+     * @param pattern The pattern used to validate the value against or
+     *        <code>null</code> to use the default for the <code>Locale</code>.
+     * @param locale The locale to use for the currency format, system default if null.
+     * @return The <code>NumberFormat</code> to created.
+     */
+    protected Format getFormat(String pattern, Locale locale) {
+
+        NumberFormat formatter = null;
+        boolean usePattern = (pattern != null && pattern.length() > 0);
+        if (!usePattern) {
+            formatter = (NumberFormat)getFormat(locale);
+        } else if (locale == null) {
+            formatter =  new DecimalFormat(pattern);
+        } else {
+            DecimalFormatSymbols symbols = new DecimalFormatSymbols(locale);
+            formatter = new DecimalFormat(pattern, symbols);
+        }
+
+        if (determineScale(formatter) == 0) {
+            formatter.setParseIntegerOnly(true);
+        }
+        return formatter;
+    }
+
+    /**
+     * <p>Returns the <i>multiplier</i> of the <code>NumberFormat</code>.</p>
+     *
+     * @param format The <code>NumberFormat</code> to determine the
+     *        multiplier of.
+     * @return The multiplying factor for the format..
+     */
+    protected int determineScale(NumberFormat format) {
+        if (!isStrict()) {
+            return -1;
+        }
+        if (!isAllowFractions() || format.isParseIntegerOnly()) {
+            return 0;
+        }
+        int minimumFraction = format.getMinimumFractionDigits();
+        int maximumFraction = format.getMaximumFractionDigits();
+        if (minimumFraction != maximumFraction) {
+            return -1;
+        }
+        int scale = minimumFraction;
+        if (format instanceof DecimalFormat) {
+            int multiplier = ((DecimalFormat)format).getMultiplier();
+            if (multiplier == 100) {
+                scale += 2;
+            } else if (multiplier == 1000) {
+                scale += 3;
+            }
+        } else if (formatType == PERCENT_FORMAT) {
+            scale += 2;
+        }
+        return scale;
+    }
+
+    /**
+     * <p>Returns a <code>NumberFormat</code> for the specified Locale.</p>
+     *
+     * @param locale The locale a <code>NumberFormat</code> is required for,
+     *   system default if null.
+     * @return The <code>NumberFormat</code> to created.
+     */
+    protected Format getFormat(Locale locale) {
+        NumberFormat formatter = null;
+        switch (formatType) {
+        case CURRENCY_FORMAT:
+            if (locale == null) {
+                formatter = NumberFormat.getCurrencyInstance();
+            } else {
+                formatter = NumberFormat.getCurrencyInstance(locale);
+            }
+            break;
+        case PERCENT_FORMAT:
+            if (locale == null) {
+                formatter = NumberFormat.getPercentInstance();
+            } else {
+                formatter = NumberFormat.getPercentInstance(locale);
+            }
+            break;
+        default:
+            if (locale == null) {
+                formatter = NumberFormat.getInstance();
+            } else {
+                formatter = NumberFormat.getInstance(locale);
+            }
+            break;
+        }
+        return formatter;
+    }
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/CodeValidator.java b/saripaar/src/main/java/commons/validator/routines/CodeValidator.java
new file mode 100644
index 0000000..07b074a
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/CodeValidator.java
@@ -0,0 +1,250 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines;
+
+import java.io.Serializable;
+
+import commons.validator.routines.checkdigit.CheckDigit;
+
+/**
+ * Generic <b>Code Validation</b> providing format, minimum/maximum
+ * length and {@link CheckDigit} validations.
+ * <p>
+ * Performs the following validations on a code:
+ * <ul>
+ *   <li>Check the <i>format</i> of the code using a <i>regular expression.</i> (if specified)</li>
+ *   <li>Check the <i>minimum</i> and <i>maximum</i> length  (if specified) of the <i>parsed</i> code
+ *      (i.e. parsed by the <i>regular expression</i>).</li>
+ *   <li>Performs {@link CheckDigit} validation on the parsed code (if specified).</li>
+ * </ul>
+ * <p>
+ * Configure the validator with the appropriate regular expression, minimum/maximum length
+ * and {@link CheckDigit} validator and then call one of the two validation
+ * methods provided:</p>
+ *    <ul>
+ *       <li><code>boolean isValid(code)</code></li>
+ *       <li><code>String validate(code)</code></li>
+ *    </ul>
+ * <p>
+ * Codes often include <i>format</i> characters - such as hyphens - to make them
+ * more easily human readable. These can be removed prior to length and check digit
+ * validation by  specifying them as a <i>non-capturing</i> group in the regular
+ * expression (i.e. use the <code>(?:   )</code> notation).
+ *
+ * @version $Revision$
+ * @since Validator 1.4
+ */
+public final class CodeValidator implements Serializable {
+
+    private static final long serialVersionUID = 446960910870938233L;
+
+    private final RegexValidator regexValidator;
+    private final int minLength;
+    private final int maxLength;
+    private final CheckDigit checkdigit;
+
+    /**
+     * Construct a code validator with a specified regular
+     * expression and {@link CheckDigit}.
+     *
+     * @param regex The format regular expression
+     * @param checkdigit The check digit validation routine
+     */
+    public CodeValidator(String regex, CheckDigit checkdigit) {
+        this(regex, -1, -1, checkdigit);
+    }
+
+    /**
+     * Construct a code validator with a specified regular
+     * expression, length and {@link CheckDigit}.
+     *
+     * @param regex The format regular expression.
+     * @param length The length of the code
+     *  (sets the mimimum/maximum to the same)
+     * @param checkdigit The check digit validation routine
+     */
+    public CodeValidator(String regex, int length, CheckDigit checkdigit) {
+        this(regex, length, length, checkdigit);
+    }
+
+    /**
+     * Construct a code validator with a specified regular
+     * expression, minimum/maximum length and {@link CheckDigit} validation.
+     *
+     * @param regex The regular expression validator
+     * @param minLength The minimum length of the code
+     * @param maxLength The maximum length of the code
+     * @param checkdigit The check digit validation routine
+     */
+    public CodeValidator(String regex, int minLength, int maxLength,
+            CheckDigit checkdigit) {
+        if (regex != null && regex.length() > 0) {
+            this.regexValidator = new RegexValidator(regex);
+        } else {
+            this.regexValidator = null;
+        }
+        this.minLength = minLength;
+        this.maxLength = maxLength;
+        this.checkdigit = checkdigit;
+    }
+
+    /**
+     * Construct a code validator with a specified regular expression,
+     * validator and {@link CheckDigit} validation.
+     *
+     * @param regexValidator The format regular expression validator
+     * @param checkdigit The check digit validation routine.
+     */
+    public CodeValidator(RegexValidator regexValidator, CheckDigit checkdigit) {
+        this(regexValidator, -1, -1, checkdigit);
+    }
+
+    /**
+     * Construct a code validator with a specified regular expression,
+     * validator, length and {@link CheckDigit} validation.
+     *
+     * @param regexValidator The format regular expression validator
+     * @param length The length of the code
+     *  (sets the mimimum/maximum to the same value)
+     * @param checkdigit The check digit validation routine
+     */
+    public CodeValidator(RegexValidator regexValidator, int length, CheckDigit checkdigit) {
+        this(regexValidator, length, length, checkdigit);
+    }
+
+    /**
+     * Construct a code validator with a specified regular expression
+     * validator, minimum/maximum length and {@link CheckDigit} validation.
+     *
+     * @param regexValidator The format regular expression validator
+     * @param minLength The minimum length of the code
+     * @param maxLength The maximum length of the code
+     * @param checkdigit The check digit validation routine
+     */
+    public CodeValidator(RegexValidator regexValidator, int minLength, int maxLength,
+            CheckDigit checkdigit) {
+        this.regexValidator = regexValidator;
+        this.minLength = minLength;
+        this.maxLength = maxLength;
+        this.checkdigit = checkdigit;
+    }
+
+    /**
+     * Return the check digit validation routine.
+     * <p>
+     * <b>N.B.</b> Optional, if not set no Check Digit
+     * validation will be performed on the code.
+     *
+     * @return The check digit validation routine
+     */
+    public CheckDigit getCheckDigit() {
+        return checkdigit;
+    }
+
+    /**
+     * Return the minimum length of the code.
+     * <p>
+     * <b>N.B.</b> Optional, if less than zero the
+     * minimum length will not be checked.
+     *
+     * @return The minimum length of the code or
+     * <code>-1</code> if the code has no minimum length
+     */
+    public int getMinLength() {
+        return minLength;
+    }
+
+    /**
+     * Return the maximum length of the code.
+     * <p>
+     * <b>N.B.</b> Optional, if less than zero the
+     * maximum length will not be checked.
+     *
+     * @return The maximum length of the code or
+     * <code>-1</code> if the code has no maximum length
+     */
+    public int getMaxLength() {
+        return maxLength;
+    }
+
+    /**
+     * Return the <i>regular expression</i> validator.
+     * <p>
+     * <b>N.B.</b> Optional, if not set no regular
+     * expression validation will be performed on the code.
+     *
+     * @return The regular expression validator
+     */
+    public RegexValidator getRegexValidator() {
+        return regexValidator;
+    }
+
+    /**
+     * Validate the code returning either <code>true</code>
+     * or <code>false</code>.
+     *
+     * @param input The code to validate
+     * @return <code>true</code> if valid, otherwise
+     * <code>false</code>
+     */
+    public boolean isValid(String input) {
+        return (validate(input) != null);
+    }
+
+    /**
+     * Validate the code returning either the valid code or
+     * <code>null</code> if invalid.
+     *
+     * @param input The code to validate
+     * @return The code if valid, otherwise <code>null</code>
+     * if invalid
+     */
+    public Object validate(String input) {
+
+        if (input == null) {
+            return null;
+        }
+
+        String code = input.trim();
+        if (code.length() == 0) {
+            return null;
+        }
+
+        // validate/reformat using regular expression
+        if (regexValidator != null) {
+            code = regexValidator.validate(code);
+            if (code == null) {
+                return null;
+            }
+        }
+
+        // check the length
+        if ((minLength >= 0 && code.length() < minLength) ||
+            (maxLength >= 0 && code.length() > maxLength)) {
+            return null;
+        }
+
+        // validate the check digit
+        if (checkdigit != null && !checkdigit.isValid(code)) {
+            return null;
+        }
+
+        return code;
+
+    }
+
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/CreditCardValidator.java b/saripaar/src/main/java/commons/validator/routines/CreditCardValidator.java
new file mode 100644
index 0000000..6ee0873
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/CreditCardValidator.java
@@ -0,0 +1,229 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines;
+
+import commons.validator.routines.checkdigit.CheckDigit;
+import commons.validator.routines.checkdigit.LuhnCheckDigit;
+import java.io.Serializable;
+import java.util.List;
+import java.util.ArrayList;
+
+/**
+ * Perform credit card validations.
+ *
+ * <p>
+ * By default, all supported card types are allowed.  You can specify which
+ * cards should pass validation by configuring the validation options. For
+ * example,
+ * </p>
+ *
+ * <pre>
+ * <code>CreditCardValidator ccv = new CreditCardValidator(CreditCardValidator.AMEX + CreditCardValidator.VISA);</code>
+ * </pre>
+ *
+ * <p>
+ * configures the validator to only pass American Express and Visa cards.
+ * If a card type is not directly supported by this class, you can implement
+ * the CreditCardType interface and pass an instance into the
+ * <code>addAllowedCardType</code> method.
+ * </p>
+ *
+ * <p>
+ * For a similar implementation in Perl, reference Sean M. Burke's
+ * <a href="http://www.speech.cs.cmu.edu/~sburke/pub/luhn_lib.html">script</a>.
+ * More information can be found in Michael Gilleland's essay 
+ * <a href="http://web.archive.org/web/20120614072656/http://www.merriampark.com/anatomycc.htm">Anatomy of Credit Card Numbers</a>.
+ * </p>
+ *
+ * @version $Revision$
+ * @since Validator 1.4
+ */
+public class CreditCardValidator implements Serializable {
+
+    private static final long serialVersionUID = 5955978921148959496L;
+
+    /**
+     * Option specifying that no cards are allowed.  This is useful if
+     * you want only custom card types to validate so you turn off the
+     * default cards with this option.
+     *
+     * <pre>
+     * <code>
+     * CreditCardValidator v = new CreditCardValidator(CreditCardValidator.NONE);
+     * v.addAllowedCardType(customType);
+     * v.isValid(aCardNumber);
+     * </code>
+     * </pre>
+     */
+    public static final long NONE = 0;
+
+    /**
+     * Option specifying that American Express cards are allowed.
+     */
+    public static final long AMEX = 1 << 0;
+
+    /**
+     * Option specifying that Visa cards are allowed.
+     */
+    public static final long VISA = 1 << 1;
+
+    /**
+     * Option specifying that Mastercard cards are allowed.
+     */
+    public static final long MASTERCARD = 1 << 2;
+
+    /**
+     * Option specifying that Discover cards are allowed.
+     */
+    public static final long DISCOVER = 1 << 3;
+
+    /**
+     * Option specifying that Diners cards are allowed.
+     */
+    public static final long DINERS = 1 << 4;
+
+    /**
+     * The CreditCardTypes that are allowed to pass validation.
+     */
+    private final List cardTypes = new ArrayList();
+
+    /**
+     * Luhn checkdigit validator for the card numbers.
+     */
+    private static final CheckDigit LUHN_VALIDATOR = LuhnCheckDigit.LUHN_CHECK_DIGIT;
+
+    /** American Express (Amex) Card Validator */
+    public static final CodeValidator AMEX_VALIDATOR = new CodeValidator("^(3[47]\\d{13})$", LUHN_VALIDATOR);
+
+    /** Diners Card Validator */
+    public static final CodeValidator DINERS_VALIDATOR = new CodeValidator("^(30[0-5]\\d{11}|3095\\d{10}|36\\d{12}|3[8-9]\\d{12})$", LUHN_VALIDATOR);
+
+    /** Discover Card regular expressions */
+    private static final RegexValidator DISCOVER_REGEX = new RegexValidator(new String[] {"^(6011\\d{12})$", "^(64[4-9]\\d{13})$", "^(65\\d{14})$"});
+
+    /** Discover Card Validator */
+    public static final CodeValidator DISCOVER_VALIDATOR = new CodeValidator(DISCOVER_REGEX, LUHN_VALIDATOR);
+
+    /** Mastercard Card Validator */
+    public static final CodeValidator MASTERCARD_VALIDATOR = new CodeValidator("^(5[1-5]\\d{14})$", LUHN_VALIDATOR);
+
+    /** Visa Card Validator */
+    public static final CodeValidator VISA_VALIDATOR = new CodeValidator("^(4)(\\d{12}|\\d{15})$", LUHN_VALIDATOR);
+
+    /**
+     * Create a new CreditCardValidator with default options.
+     */
+    public CreditCardValidator() {
+        this(AMEX + VISA + MASTERCARD + DISCOVER);
+    }
+
+    /**
+     * Create a new CreditCardValidator with the specified options.
+     * @param options Pass in
+     * CreditCardValidator.VISA + CreditCardValidator.AMEX to specify that
+     * those are the only valid card types.
+     */
+    public CreditCardValidator(long options) {
+        super();
+
+        if (isOn(options, VISA)) {
+            this.cardTypes.add(VISA_VALIDATOR);
+        }
+
+        if (isOn(options, AMEX)) {
+            this.cardTypes.add(AMEX_VALIDATOR);
+        }
+
+        if (isOn(options, MASTERCARD)) {
+            this.cardTypes.add(MASTERCARD_VALIDATOR);
+        }
+
+        if (isOn(options, DISCOVER)) {
+            this.cardTypes.add(DISCOVER_VALIDATOR);
+        }
+
+        if (isOn(options, DINERS)) {
+            this.cardTypes.add(DINERS_VALIDATOR);
+        }
+    }
+
+    /**
+     * Create a new CreditCardValidator with the specified {@link CodeValidator}s.
+     * @param creditCardValidators Set of valid code validators
+     */
+    public CreditCardValidator(CodeValidator[] creditCardValidators) {
+        if (creditCardValidators == null) {
+            throw new IllegalArgumentException("Card validators are missing");
+        }
+        for (int i = 0; i < creditCardValidators.length; i++) {
+            cardTypes.add(creditCardValidators[i]);
+        }
+    }
+
+    /**
+     * Checks if the field is a valid credit card number.
+     * @param card The card number to validate.
+     * @return Whether the card number is valid.
+     */
+    public boolean isValid(String card) {
+        if (card == null || card.length() == 0) {
+            return false;
+        }
+        for (int i = 0; i < cardTypes.size(); i++) {
+            CodeValidator type = (CodeValidator)cardTypes.get(i);
+            if (type.isValid(card)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Checks if the field is a valid credit card number.
+     * @param card The card number to validate.
+     * @return The card number if valid or <code>null</code>
+     * if invalid.
+     */
+    public Object validate(String card) {
+        if (card == null || card.length() == 0) {
+            return null;
+        }
+        Object result = null;
+        for (int i = 0; i < cardTypes.size(); i++) {
+            CodeValidator type = (CodeValidator)cardTypes.get(i);
+            result = type.validate(card);
+            if (result != null) {
+                return result ;
+            }
+        }
+        return null;
+
+    }
+    /**
+     * Tests whether the given flag is on.  If the flag is not a power of 2
+     * (ie. 3) this tests whether the combination of flags is on.
+     *
+     * @param options The options specified.
+     * @param flag Flag value to check.
+     *
+     * @return whether the specified flag value is on.
+     */
+    private boolean isOn(long options, long flag) {
+        return (options & flag) > 0;
+    }
+
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/DomainValidator.java b/saripaar/src/main/java/commons/validator/routines/DomainValidator.java
new file mode 100644
index 0000000..3c7baa4
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/DomainValidator.java
@@ -0,0 +1,1156 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines;
+
+import java.io.Serializable;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.Arrays;
+import java.util.Locale;
+
+/**
+ * <p><b>Domain name</b> validation routines.</p>
+ *
+ * <p>
+ * This validator provides methods for validating Internet domain names
+ * and top-level domains.
+ * </p>
+ *
+ * <p>Domain names are evaluated according
+ * to the standards <a href="http://www.ietf.org/rfc/rfc1034.txt">RFC1034</a>,
+ * section 3, and <a href="http://www.ietf.org/rfc/rfc1123.txt">RFC1123</a>,
+ * section 2.1. No accommodation is provided for the specialized needs of
+ * other applications; if the domain name has been URL-encoded, for example,
+ * validation will fail even though the equivalent plaintext version of the
+ * same name would have passed.
+ * </p>
+ *
+ * <p>
+ * Validation is also provided for top-level domains (TLDs) as defined and
+ * maintained by the Internet Assigned Numbers Authority (IANA):
+ * </p>
+ *
+ *   <ul>
+ *     <li>{@link #isValidInfrastructureTld} - validates infrastructure TLDs
+ *         (<code>.arpa</code>, etc.)</li>
+ *     <li>{@link #isValidGenericTld} - validates generic TLDs
+ *         (<code>.com, .org</code>, etc.)</li>
+ *     <li>{@link #isValidCountryCodeTld} - validates country code TLDs
+ *         (<code>.us, .uk, .cn</code>, etc.)</li>
+ *   </ul>
+ *
+ * <p>
+ * (<b>NOTE</b>: This class does not provide IP address lookup for domain names or
+ * methods to ensure that a given domain name matches a specific IP; see
+ * {@link java.net.InetAddress} for that functionality.)
+ * </p>
+ *
+ * @version $Revision$
+ * @since Validator 1.4
+ */
+public class DomainValidator implements Serializable {
+
+    private static final long serialVersionUID = -4407125112880174009L;
+
+    // Regular expression strings for hostnames (derived from RFC2396 and RFC 1123)
+
+    // RFC2396: domainlabel   = alphanum | alphanum *( alphanum | "-" ) alphanum
+    // Max 63 characters
+    private static final String DOMAIN_LABEL_REGEX = "\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?";
+
+    // RFC2396 toplabel = alpha | alpha *( alphanum | "-" ) alphanum
+    // Max 63 characters
+    private static final String TOP_LABEL_REGEX = "\\p{Alpha}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?";
+
+    // RFC2396 hostname = *( domainlabel "." ) toplabel [ "." ]
+    // Note that the regex currently requires both a domain label and a top level label, whereas
+    // the RFC does not. This is because the regex is used to detect if a TLD is present.
+    // If the match fails, input is checked against DOMAIN_LABEL_REGEX (hostnameRegex)
+    // RFC1123 sec 2.1 allows hostnames to start with a digit
+    private static final String DOMAIN_NAME_REGEX =
+            "^(?:" + DOMAIN_LABEL_REGEX + "\\.)+" + "(" + TOP_LABEL_REGEX + ")\\.?$";
+
+    private final boolean allowLocal;
+
+    /**
+     * Singleton instance of this validator, which
+     *  doesn't consider local addresses as valid.
+     */
+    private static final DomainValidator DOMAIN_VALIDATOR = new DomainValidator(false);
+
+    /**
+     * Singleton instance of this validator, which does
+     *  consider local addresses valid.
+     */
+    private static final DomainValidator DOMAIN_VALIDATOR_WITH_LOCAL = new DomainValidator(true);
+
+    /**
+     * RegexValidator for matching domains.
+     */
+    private final RegexValidator domainRegex =
+            new RegexValidator(DOMAIN_NAME_REGEX);
+    /**
+     * RegexValidator for matching a local hostname
+     */
+    // RFC1123 sec 2.1 allows hostnames to start with a digit
+    private final RegexValidator hostnameRegex =
+            new RegexValidator(DOMAIN_LABEL_REGEX);
+
+    /**
+     * Returns the singleton instance of this validator. It
+     *  will not consider local addresses as valid.
+     * @return the singleton instance of this validator
+     */
+    public static DomainValidator getInstance() {
+        return DOMAIN_VALIDATOR;
+    }
+
+    /**
+     * Returns the singleton instance of this validator,
+     *  with local validation as required.
+     * @param allowLocal Should local addresses be considered valid?
+     * @return the singleton instance of this validator
+     */
+    public static DomainValidator getInstance(boolean allowLocal) {
+       if(allowLocal) {
+          return DOMAIN_VALIDATOR_WITH_LOCAL;
+       }
+       return DOMAIN_VALIDATOR;
+    }
+
+    /** Private constructor. */
+    private DomainValidator(boolean allowLocal) {
+       this.allowLocal = allowLocal;
+    }
+
+    /**
+     * Returns true if the specified <code>String</code> parses
+     * as a valid domain name with a recognized top-level domain.
+     * The parsing is case-insensitive.
+     * @param domain the parameter to check for domain name syntax
+     * @return true if the parameter is a valid domain name
+     */
+    public boolean isValid(String domain) {
+        if (domain == null) {
+            return false;
+        }
+        domain = unicodeToASCII(domain);
+        // hosts must be equally reachable via punycode and Unicode;
+        // Unicode is never shorter than punycode, so check punycode
+        // if domain did not convert, then it will be caught by ASCII
+        // checks in the regexes below
+        if (domain.length() > 253) {
+            return false;
+        }
+        String[] groups = domainRegex.match(domain);
+        if (groups != null && groups.length > 0) {
+            return isValidTld(groups[0]);
+        }
+        return allowLocal && hostnameRegex.isValid(domain);
+    }
+
+    // package protected for unit test access
+    // must agree with isValid() above
+    final boolean isValidDomainSyntax(String domain) {
+        if (domain == null) {
+            return false;
+        }
+        domain = unicodeToASCII(domain);
+        // hosts must be equally reachable via punycode and Unicode;
+        // Unicode is never shorter than punycode, so check punycode
+        // if domain did not convert, then it will be caught by ASCII
+        // checks in the regexes below
+        if (domain.length() > 253) {
+            return false;
+        }
+        String[] groups = domainRegex.match(domain);
+        return (groups != null && groups.length > 0)
+                || hostnameRegex.isValid(domain);
+    }
+
+    /**
+     * Returns true if the specified <code>String</code> matches any
+     * IANA-defined top-level domain. Leading dots are ignored if present.
+     * The search is case-insensitive.
+     * @param tld the parameter to check for TLD status, not null
+     * @return true if the parameter is a TLD
+     */
+    public boolean isValidTld(String tld) {
+        tld = unicodeToASCII(tld);
+        if(allowLocal && isValidLocalTld(tld)) {
+           return true;
+        }
+        return isValidInfrastructureTld(tld)
+                || isValidGenericTld(tld)
+                || isValidCountryCodeTld(tld);
+    }
+
+    /**
+     * Returns true if the specified <code>String</code> matches any
+     * IANA-defined infrastructure top-level domain. Leading dots are
+     * ignored if present. The search is case-insensitive.
+     * @param iTld the parameter to check for infrastructure TLD status, not null
+     * @return true if the parameter is an infrastructure TLD
+     */
+    public boolean isValidInfrastructureTld(String iTld) {
+        iTld = unicodeToASCII(iTld);
+        return Arrays.binarySearch(INFRASTRUCTURE_TLDS, (chompLeadingDot(iTld.toLowerCase(Locale.ENGLISH)))) >= 0;
+    }
+
+    /**
+     * Returns true if the specified <code>String</code> matches any
+     * IANA-defined generic top-level domain. Leading dots are ignored
+     * if present. The search is case-insensitive.
+     * @param gTld the parameter to check for generic TLD status, not null
+     * @return true if the parameter is a generic TLD
+     */
+    public boolean isValidGenericTld(String gTld) {
+        gTld = unicodeToASCII(gTld);
+        return Arrays.binarySearch(GENERIC_TLDS, chompLeadingDot(gTld.toLowerCase(Locale.ENGLISH))) >= 0;
+    }
+
+    /**
+     * Returns true if the specified <code>String</code> matches any
+     * IANA-defined country code top-level domain. Leading dots are
+     * ignored if present. The search is case-insensitive.
+     * @param ccTld the parameter to check for country code TLD status, not null
+     * @return true if the parameter is a country code TLD
+     */
+    public boolean isValidCountryCodeTld(String ccTld) {
+        ccTld = unicodeToASCII(ccTld);
+        return Arrays.binarySearch(COUNTRY_CODE_TLDS, chompLeadingDot(ccTld.toLowerCase(Locale.ENGLISH))) >= 0;
+    }
+
+    /**
+     * Returns true if the specified <code>String</code> matches any
+     * widely used "local" domains (localhost or localdomain). Leading dots are
+     * ignored if present. The search is case-insensitive.
+     * @param lTld the parameter to check for local TLD status, not null
+     * @return true if the parameter is an local TLD
+     */
+    public boolean isValidLocalTld(String lTld) {
+        lTld = unicodeToASCII(lTld);
+        return Arrays.binarySearch(LOCAL_TLDS, chompLeadingDot(lTld.toLowerCase(Locale.ENGLISH))) >= 0;
+    }
+
+    private String chompLeadingDot(String str) {
+        if (str.startsWith(".")) {
+            return str.substring(1);
+        }
+        return str;
+    }
+
+    // ---------------------------------------------
+    // ----- TLDs defined by IANA
+    // ----- Authoritative and comprehensive list at:
+    // ----- http://data.iana.org/TLD/tlds-alpha-by-domain.txt
+
+    // Note that the above list is in UPPER case.
+    // The code currently converts strings to lower case (as per the tables below)
+
+    // IANA also provide an HTML list at http://www.iana.org/domains/root/db
+    // Note that this contains several country code entries which are NOT in
+    // the text file. These all have the "Not assigned" in the "Sponsoring Organisation" column
+    // For example (as of 2015-01-02):
+    // .bl  country-code    Not assigned
+    // .um  country-code    Not assigned
+
+    // WARNING: this array MUST be sorted, others it cannot be searched reliably using binary search
+    private static final String[] INFRASTRUCTURE_TLDS = new String[] {
+        "arpa",               // internet infrastructure
+    };
+
+    // WARNING: this array MUST be sorted, others it cannot be searched reliably using binary search
+    private static final String[] GENERIC_TLDS = new String[] {
+        "abogado",
+        "academy",
+        "accountants",
+        "active",
+        "actor",
+        "adult",
+        "aero",
+        "agency",
+        "airforce",
+        "allfinanz",
+        "alsace",
+        "amsterdam",
+        "android",
+        "aquarelle",
+        "archi",
+        "army",
+        "arpa",
+        "asia",
+        "associates",
+        "attorney",
+        "auction",
+        "audio",
+        "autos",
+        "axa",
+        "band",
+        "bar",
+        "bargains",
+        "bayern",
+        "beer",
+        "berlin",
+        "best",
+        "bid",
+        "bike",
+        "bio",
+        "biz",
+        "black",
+        "blackfriday",
+        "bloomberg",
+        "blue",
+        "bmw",
+        "bnpparibas",
+        "boo",
+        "boutique",
+        "brussels",
+        "budapest",
+        "build",
+        "builders",
+        "business",
+        "buzz",
+        "bzh",
+        "cab",
+        "cal",
+        "camera",
+        "camp",
+        "cancerresearch",
+        "capetown",
+        "capital",
+        "caravan",
+        "cards",
+        "care",
+        "career",
+        "careers",
+        "cartier",
+        "casa",
+        "cash",
+        "cat",
+        "catering",
+        "center",
+        "ceo",
+        "cern",
+        "channel",
+        "cheap",
+        "christmas",
+        "chrome",
+        "church",
+        "citic",
+        "city",
+        "claims",
+        "cleaning",
+        "click",
+        "clinic",
+        "clothing",
+        "club",
+        "coach",
+        "codes",
+        "coffee",
+        "college",
+        "cologne",
+        "com",
+        "community",
+        "company",
+        "computer",
+        "condos",
+        "construction",
+        "consulting",
+        "contractors",
+        "cooking",
+        "cool",
+        "coop",
+        "country",
+        "credit",
+        "creditcard",
+        "cricket",
+        "crs",
+        "cruises",
+        "cuisinella",
+        "cymru",
+        "dad",
+        "dance",
+        "dating",
+        "day",
+        "deals",
+        "degree",
+        "delivery",
+        "democrat",
+        "dental",
+        "dentist",
+        "desi",
+        "design",
+        "dev",
+        "diamonds",
+        "diet",
+        "digital",
+        "direct",
+        "directory",
+        "discount",
+        "dnp",
+        "docs",
+        "domains",
+        "doosan",
+        "durban",
+        "dvag",
+        "eat",
+        "edu",
+        "education",
+        "email",
+        "emerck",
+        "energy",
+        "engineer",
+        "engineering",
+        "enterprises",
+        "equipment",
+        "esq",
+        "estate",
+        "eurovision",
+        "eus",
+        "events",
+        "everbank",
+        "exchange",
+        "expert",
+        "exposed",
+        "fail",
+        "farm",
+        "fashion",
+        "feedback",
+        "finance",
+        "financial",
+        "firmdale",
+        "fish",
+        "fishing",
+        "fitness",
+        "flights",
+        "florist",
+        "flowers",
+        "flsmidth",
+        "fly",
+        "foo",
+        "forsale",
+        "foundation",
+        "frl",
+        "frogans",
+        "fund",
+        "furniture",
+        "futbol",
+        "gal",
+        "gallery",
+        "garden",
+        "gbiz",
+        "gent",
+        "ggee",
+        "gift",
+        "gifts",
+        "gives",
+        "glass",
+        "gle",
+        "global",
+        "globo",
+        "gmail",
+        "gmo",
+        "gmx",
+        "google",
+        "gop",
+        "gov",
+        "graphics",
+        "gratis",
+        "green",
+        "gripe",
+        "guide",
+        "guitars",
+        "guru",
+        "hamburg",
+        "haus",
+        "healthcare",
+        "help",
+        "here",
+        "hiphop",
+        "hiv",
+        "holdings",
+        "holiday",
+        "homes",
+        "horse",
+        "host",
+        "hosting",
+        "house",
+        "how",
+        "ibm",
+        "immo",
+        "immobilien",
+        "industries",
+        "info",
+        "ing",
+        "ink",
+        "institute",
+        "insure",
+        "int",
+        "international",
+        "investments",
+        "irish",
+        "iwc",
+        "jetzt",
+        "jobs",
+        "joburg",
+        "juegos",
+        "kaufen",
+        "kim",
+        "kitchen",
+        "kiwi",
+        "koeln",
+        "krd",
+        "kred",
+        "lacaixa",
+        "land",
+        "latrobe",
+        "lawyer",
+        "lds",
+        "lease",
+        "legal",
+        "lgbt",
+        "lidl",
+        "life",
+        "lighting",
+        "limited",
+        "limo",
+        "link",
+        "loans",
+        "london",
+        "lotto",
+        "ltda",
+        "luxe",
+        "luxury",
+        "madrid",
+        "maison",
+        "management",
+        "mango",
+        "market",
+        "marketing",
+        "media",
+        "meet",
+        "melbourne",
+        "meme",
+        "memorial",
+        "menu",
+        "miami",
+        "mil",
+        "mini",
+        "mobi",
+        "moda",
+        "moe",
+        "monash",
+        "money",
+        "mormon",
+        "mortgage",
+        "moscow",
+        "motorcycles",
+        "mov",
+        "museum",
+        "nagoya",
+        "name",
+        "navy",
+        "net",
+        "network",
+        "neustar",
+        "new",
+        "nexus",
+        "ngo",
+        "nhk",
+        "ninja",
+        "nra",
+        "nrw",
+        "nyc",
+        "okinawa",
+        "ong",
+        "onl",
+        "ooo",
+        "org",
+        "organic",
+        "osaka",
+        "otsuka",
+        "ovh",
+        "paris",
+        "partners",
+        "parts",
+        "party",
+        "pharmacy",
+        "photo",
+        "photography",
+        "photos",
+        "physio",
+        "pics",
+        "pictures",
+        "pink",
+        "pizza",
+        "place",
+        "plumbing",
+        "pohl",
+        "poker",
+        "porn",
+        "post",
+        "praxi",
+        "press",
+        "pro",
+        "prod",
+        "productions",
+        "prof",
+        "properties",
+        "property",
+        "pub",
+        "qpon",
+        "quebec",
+        "realtor",
+        "recipes",
+        "red",
+        "rehab",
+        "reise",
+        "reisen",
+        "reit",
+        "ren",
+        "rentals",
+        "repair",
+        "report",
+        "republican",
+        "rest",
+        "restaurant",
+        "reviews",
+        "rich",
+        "rio",
+        "rip",
+        "rocks",
+        "rodeo",
+        "rsvp",
+        "ruhr",
+        "ryukyu",
+        "saarland",
+        "sale",
+        "samsung",
+        "sarl",
+        "sca",
+        "scb",
+        "schmidt",
+        "schule",
+        "schwarz",
+        "science",
+        "scot",
+        "services",
+        "sew",
+        "sexy",
+        "shiksha",
+        "shoes",
+        "shriram",
+        "singles",
+        "sky",
+        "social",
+        "software",
+        "sohu",
+        "solar",
+        "solutions",
+        "soy",
+        "space",
+        "spiegel",
+        "supplies",
+        "supply",
+        "support",
+        "surf",
+        "surgery",
+        "suzuki",
+        "sydney",
+        "systems",
+        "taipei",
+        "tatar",
+        "tattoo",
+        "tax",
+        "technology",
+        "tel",
+        "tienda",
+        "tips",
+        "tires",
+        "tirol",
+        "today",
+        "tokyo",
+        "tools",
+        "top",
+        "town",
+        "toys",
+        "trade",
+        "training",
+        "travel",
+        "trust",
+        "tui",
+        "university",
+        "uno",
+        "uol",
+        "vacations",
+        "vegas",
+        "ventures",
+        "versicherung",
+        "vet",
+        "viajes",
+        "video",
+        "villas",
+        "vision",
+        "vlaanderen",
+        "vodka",
+        "vote",
+        "voting",
+        "voto",
+        "voyage",
+        "wales",
+        "wang",
+        "watch",
+        "webcam",
+        "website",
+        "wed",
+        "wedding",
+        "whoswho",
+        "wien",
+        "wiki",
+        "williamhill",
+        "wme",
+        "work",
+        "works",
+        "world",
+        "wtc",
+        "wtf",
+        "xn--1qqw23a", // 佛山 Guangzhou YU Wei Information Technology Co., Ltd.
+        "xn--3bst00m", // 集团 Eagle Horizon Limited
+        "xn--3ds443g", // 在线 TLD REGISTRY LIMITED
+        "xn--45q11c", // 八卦 Zodiac Scorpio Limited
+        "xn--4gbrim", // موقع Suhub Electronic Establishment
+        "xn--55qw42g", // 公益 China Organizational Name Administration Center
+        "xn--55qx5d", // 公司 Computer Network Information Center of Chinese Academy of Sciences （China Internet Network Information Center）
+        "xn--6frz82g", // 移动 Afilias Limited
+        "xn--6qq986b3xl", // 我爱你 Tycoon Treasure Limited
+        "xn--80adxhks", // москва Foundation for Assistance for Internet Technologies and Infrastructure Development (FAITID)
+        "xn--80asehdb", // онлайн CORE Association
+        "xn--80aswg", // сайт CORE Association
+        "xn--c1avg", // орг Public Interest Registry
+        "xn--cg4bki", // 삼성 SAMSUNG SDS CO., LTD
+        "xn--czr694b", // 商标 HU YI GLOBAL INFORMATION RESOURCES(HOLDING) COMPANY.HONGKONG LIMITED
+        "xn--czrs0t", // 商店 Wild Island, LLC
+        "xn--czru2d", // 商城 Zodiac Aquarius Limited
+        "xn--d1acj3b", // дети The Foundation for Network Initiatives “The Smart Internet”
+        "xn--fiq228c5hs", // 中文网 TLD REGISTRY LIMITED
+        "xn--fiq64b", // 中信 CITIC Group Corporation
+        "xn--flw351e", // 谷歌 Charleston Road Registry Inc.
+        "xn--hxt814e", // 网店 Zodiac Libra Limited
+        "xn--i1b6b1a6a2e", // संगठन Public Interest Registry
+        "xn--io0a7i", // 网络 Computer Network Information Center of Chinese Academy of Sciences （China Internet Network Information Center）
+        "xn--kput3i", // 手机 Beijing RITT-Net Technology Development Co., Ltd
+        "xn--mgbab2bd", // بازار CORE Association
+        "xn--ngbc5azd", // شبكة International Domain Registry Pty. Ltd.
+        "xn--nqv7f", // 机构 Public Interest Registry
+        "xn--nqv7fs00ema", // 组织机构 Public Interest Registry
+        "xn--p1acf", // рус Rusnames Limited
+        "xn--q9jyb4c", // みんな Charleston Road Registry Inc.
+        "xn--qcka1pmc", // グーグル Charleston Road Registry Inc.
+        "xn--rhqv96g", // 世界 Stable Tone Limited
+        "xn--ses554g", // 网址 HU YI GLOBAL INFORMATION RESOURCES (HOLDING) COMPANY. HONGKONG LIMITED
+        "xn--unup4y", // 游戏 Spring Fields, LLC
+        "xn--vermgensberater-ctb", // vermögensberater Deutsche Vermögensberatung Aktiengesellschaft DVAG
+        "xn--vermgensberatung-pwb", // vermögensberatung Deutsche Vermögensberatung Aktiengesellschaft DVAG
+        "xn--vhquv", // 企业 Dash McCook, LLC
+        "xn--xhq521b", // 广东 Guangzhou YU Wei Information Technology Co., Ltd.
+        "xn--zfr164b", // 政务 China Organizational Name Administration Center
+        "xxx",
+        "xyz",
+        "yachts",
+        "yandex",
+        "yoga",
+        "yokohama",
+        "youtube",
+        "zip",
+        "zone",
+        "zuerich",
+   };
+
+    // WARNING: this array MUST be sorted, others it cannot be searched reliably using binary search
+    private static final String[] COUNTRY_CODE_TLDS = new String[] {
+        "ac",                 // Ascension Island
+        "ad",                 // Andorra
+        "ae",                 // United Arab Emirates
+        "af",                 // Afghanistan
+        "ag",                 // Antigua and Barbuda
+        "ai",                 // Anguilla
+        "al",                 // Albania
+        "am",                 // Armenia
+        "an",                 // Netherlands Antilles
+        "ao",                 // Angola
+        "aq",                 // Antarctica
+        "ar",                 // Argentina
+        "as",                 // American Samoa
+        "at",                 // Austria
+        "au",                 // Australia (includes Ashmore and Cartier Islands and Coral Sea Islands)
+        "aw",                 // Aruba
+        "ax",                 // Åland
+        "az",                 // Azerbaijan
+        "ba",                 // Bosnia and Herzegovina
+        "bb",                 // Barbados
+        "bd",                 // Bangladesh
+        "be",                 // Belgium
+        "bf",                 // Burkina Faso
+        "bg",                 // Bulgaria
+        "bh",                 // Bahrain
+        "bi",                 // Burundi
+        "bj",                 // Benin
+        "bm",                 // Bermuda
+        "bn",                 // Brunei Darussalam
+        "bo",                 // Bolivia
+        "br",                 // Brazil
+        "bs",                 // Bahamas
+        "bt",                 // Bhutan
+        "bv",                 // Bouvet Island
+        "bw",                 // Botswana
+        "by",                 // Belarus
+        "bz",                 // Belize
+        "ca",                 // Canada
+        "cc",                 // Cocos (Keeling) Islands
+        "cd",                 // Democratic Republic of the Congo (formerly Zaire)
+        "cf",                 // Central African Republic
+        "cg",                 // Republic of the Congo
+        "ch",                 // Switzerland
+        "ci",                 // Côte d'Ivoire
+        "ck",                 // Cook Islands
+        "cl",                 // Chile
+        "cm",                 // Cameroon
+        "cn",                 // China, mainland
+        "co",                 // Colombia
+        "cr",                 // Costa Rica
+        "cu",                 // Cuba
+        "cv",                 // Cape Verde
+        "cw",                 // Curaçao
+        "cx",                 // Christmas Island
+        "cy",                 // Cyprus
+        "cz",                 // Czech Republic
+        "de",                 // Germany
+        "dj",                 // Djibouti
+        "dk",                 // Denmark
+        "dm",                 // Dominica
+        "do",                 // Dominican Republic
+        "dz",                 // Algeria
+        "ec",                 // Ecuador
+        "ee",                 // Estonia
+        "eg",                 // Egypt
+        "er",                 // Eritrea
+        "es",                 // Spain
+        "et",                 // Ethiopia
+        "eu",                 // European Union
+        "fi",                 // Finland
+        "fj",                 // Fiji
+        "fk",                 // Falkland Islands
+        "fm",                 // Federated States of Micronesia
+        "fo",                 // Faroe Islands
+        "fr",                 // France
+        "ga",                 // Gabon
+        "gb",                 // Great Britain (United Kingdom)
+        "gd",                 // Grenada
+        "ge",                 // Georgia
+        "gf",                 // French Guiana
+        "gg",                 // Guernsey
+        "gh",                 // Ghana
+        "gi",                 // Gibraltar
+        "gl",                 // Greenland
+        "gm",                 // The Gambia
+        "gn",                 // Guinea
+        "gp",                 // Guadeloupe
+        "gq",                 // Equatorial Guinea
+        "gr",                 // Greece
+        "gs",                 // South Georgia and the South Sandwich Islands
+        "gt",                 // Guatemala
+        "gu",                 // Guam
+        "gw",                 // Guinea-Bissau
+        "gy",                 // Guyana
+        "hk",                 // Hong Kong
+        "hm",                 // Heard Island and McDonald Islands
+        "hn",                 // Honduras
+        "hr",                 // Croatia (Hrvatska)
+        "ht",                 // Haiti
+        "hu",                 // Hungary
+        "id",                 // Indonesia
+        "ie",                 // Ireland (Éire)
+        "il",                 // Israel
+        "im",                 // Isle of Man
+        "in",                 // India
+        "io",                 // British Indian Ocean Territory
+        "iq",                 // Iraq
+        "ir",                 // Iran
+        "is",                 // Iceland
+        "it",                 // Italy
+        "je",                 // Jersey
+        "jm",                 // Jamaica
+        "jo",                 // Jordan
+        "jp",                 // Japan
+        "ke",                 // Kenya
+        "kg",                 // Kyrgyzstan
+        "kh",                 // Cambodia (Khmer)
+        "ki",                 // Kiribati
+        "km",                 // Comoros
+        "kn",                 // Saint Kitts and Nevis
+        "kp",                 // North Korea
+        "kr",                 // South Korea
+        "kw",                 // Kuwait
+        "ky",                 // Cayman Islands
+        "kz",                 // Kazakhstan
+        "la",                 // Laos (currently being marketed as the official domain for Los Angeles)
+        "lb",                 // Lebanon
+        "lc",                 // Saint Lucia
+        "li",                 // Liechtenstein
+        "lk",                 // Sri Lanka
+        "lr",                 // Liberia
+        "ls",                 // Lesotho
+        "lt",                 // Lithuania
+        "lu",                 // Luxembourg
+        "lv",                 // Latvia
+        "ly",                 // Libya
+        "ma",                 // Morocco
+        "mc",                 // Monaco
+        "md",                 // Moldova
+        "me",                 // Montenegro
+        "mg",                 // Madagascar
+        "mh",                 // Marshall Islands
+        "mk",                 // Republic of Macedonia
+        "ml",                 // Mali
+        "mm",                 // Myanmar
+        "mn",                 // Mongolia
+        "mo",                 // Macau
+        "mp",                 // Northern Mariana Islands
+        "mq",                 // Martinique
+        "mr",                 // Mauritania
+        "ms",                 // Montserrat
+        "mt",                 // Malta
+        "mu",                 // Mauritius
+        "mv",                 // Maldives
+        "mw",                 // Malawi
+        "mx",                 // Mexico
+        "my",                 // Malaysia
+        "mz",                 // Mozambique
+        "na",                 // Namibia
+        "nc",                 // New Caledonia
+        "ne",                 // Niger
+        "nf",                 // Norfolk Island
+        "ng",                 // Nigeria
+        "ni",                 // Nicaragua
+        "nl",                 // Netherlands
+        "no",                 // Norway
+        "np",                 // Nepal
+        "nr",                 // Nauru
+        "nu",                 // Niue
+        "nz",                 // New Zealand
+        "om",                 // Oman
+        "pa",                 // Panama
+        "pe",                 // Peru
+        "pf",                 // French Polynesia With Clipperton Island
+        "pg",                 // Papua New Guinea
+        "ph",                 // Philippines
+        "pk",                 // Pakistan
+        "pl",                 // Poland
+        "pm",                 // Saint-Pierre and Miquelon
+        "pn",                 // Pitcairn Islands
+        "pr",                 // Puerto Rico
+        "ps",                 // Palestinian territories (PA-controlled West Bank and Gaza Strip)
+        "pt",                 // Portugal
+        "pw",                 // Palau
+        "py",                 // Paraguay
+        "qa",                 // Qatar
+        "re",                 // Réunion
+        "ro",                 // Romania
+        "rs",                 // Serbia
+        "ru",                 // Russia
+        "rw",                 // Rwanda
+        "sa",                 // Saudi Arabia
+        "sb",                 // Solomon Islands
+        "sc",                 // Seychelles
+        "sd",                 // Sudan
+        "se",                 // Sweden
+        "sg",                 // Singapore
+        "sh",                 // Saint Helena
+        "si",                 // Slovenia
+        "sj",                 // Svalbard and Jan Mayen Islands Not in use (Norwegian dependencies; see .no)
+        "sk",                 // Slovakia
+        "sl",                 // Sierra Leone
+        "sm",                 // San Marino
+        "sn",                 // Senegal
+        "so",                 // Somalia
+        "sr",                 // Suriname
+        "st",                 // São Tomé and Príncipe
+        "su",                 // Soviet Union (deprecated)
+        "sv",                 // El Salvador
+        "sx",                 // Sint Maarten
+        "sy",                 // Syria
+        "sz",                 // Swaziland
+        "tc",                 // Turks and Caicos Islands
+        "td",                 // Chad
+        "tf",                 // French Southern and Antarctic Lands
+        "tg",                 // Togo
+        "th",                 // Thailand
+        "tj",                 // Tajikistan
+        "tk",                 // Tokelau
+        "tl",                 // East Timor (deprecated old code)
+        "tm",                 // Turkmenistan
+        "tn",                 // Tunisia
+        "to",                 // Tonga
+        "tp",                 // East Timor
+        "tr",                 // Turkey
+        "tt",                 // Trinidad and Tobago
+        "tv",                 // Tuvalu
+        "tw",                 // Taiwan, Republic of China
+        "tz",                 // Tanzania
+        "ua",                 // Ukraine
+        "ug",                 // Uganda
+        "uk",                 // United Kingdom
+        "us",                 // United States of America
+        "uy",                 // Uruguay
+        "uz",                 // Uzbekistan
+        "va",                 // Vatican City State
+        "vc",                 // Saint Vincent and the Grenadines
+        "ve",                 // Venezuela
+        "vg",                 // British Virgin Islands
+        "vi",                 // U.S. Virgin Islands
+        "vn",                 // Vietnam
+        "vu",                 // Vanuatu
+        "wf",                 // Wallis and Futuna
+        "ws",                 // Samoa (formerly Western Samoa)
+        "xn--3e0b707e", // 한국 KISA (Korea Internet &amp; Security Agency)
+        "xn--45brj9c", // ভারত National Internet Exchange of India
+        "xn--80ao21a", // қаз Association of IT Companies of Kazakhstan
+        "xn--90a3ac", // срб Serbian National Internet Domain Registry (RNIDS)
+        "xn--clchc0ea0b2g2a9gcd", // சிங்கப்பூர் Singapore Network Information Centre (SGNIC) Pte Ltd
+        "xn--d1alf", // мкд Macedonian Academic Research Network Skopje
+        "xn--fiqs8s", // 中国 China Internet Network Information Center
+        "xn--fiqz9s", // 中國 China Internet Network Information Center
+        "xn--fpcrj9c3d", // భారత్ National Internet Exchange of India
+        "xn--fzc2c9e2c", // ලංකා LK Domain Registry
+        "xn--gecrj9c", // ભારત National Internet Exchange of India
+        "xn--h2brj9c", // भारत National Internet Exchange of India
+        "xn--j1amh", // укр Ukrainian Network Information Centre (UANIC), Inc.
+        "xn--j6w193g", // 香港 Hong Kong Internet Registration Corporation Ltd.
+        "xn--kprw13d", // 台湾 Taiwan Network Information Center (TWNIC)
+        "xn--kpry57d", // 台灣 Taiwan Network Information Center (TWNIC)
+        "xn--l1acc", // мон Datacom Co.,Ltd
+        "xn--lgbbat1ad8j", // الجزائر CERIST
+        "xn--mgb9awbf", // عمان Telecommunications Regulatory Authority (TRA)
+        "xn--mgba3a4f16a", // ایران Institute for Research in Fundamental Sciences (IPM)
+        "xn--mgbaam7a8h", // امارات Telecommunications Regulatory Authority (TRA)
+        "xn--mgbayh7gpa", // الاردن National Information Technology Center (NITC)
+        "xn--mgbbh1a71e", // بھارت National Internet Exchange of India
+        "xn--mgbc0a9azcg", // المغرب Agence Nationale de Réglementation des Télécommunications (ANRT)
+        "xn--mgberp4a5d4ar", // السعودية Communications and Information Technology Commission
+        "xn--mgbx4cd0ab", // مليسيا MYNIC Berhad
+        "xn--node", // გე Information Technologies Development Center (ITDC)
+        "xn--o3cw4h", // ไทย Thai Network Information Center Foundation
+        "xn--ogbpf8fl", // سورية National Agency for Network Services (NANS)
+        "xn--p1ai", // рф Coordination Center for TLD RU
+        "xn--pgbs0dh", // تونس Agence Tunisienne d&#39;Internet
+        "xn--s9brj9c", // ਭਾਰਤ National Internet Exchange of India
+        "xn--wgbh1c", // مصر National Telecommunication Regulatory Authority - NTRA
+        "xn--wgbl6a", // قطر Communications Regulatory Authority
+        "xn--xkc2al3hye2a", // இலங்கை LK Domain Registry
+        "xn--xkc2dl3a5ee0h", // இந்தியா National Internet Exchange of India
+        "xn--yfro4i67o", // 新加坡 Singapore Network Information Centre (SGNIC) Pte Ltd
+        "xn--ygbi2ammx", // فلسطين Ministry of Telecom &amp; Information Technology (MTIT)
+        "ye",                 // Yemen
+        "yt",                 // Mayotte
+        "za",                 // South Africa
+        "zm",                 // Zambia
+        "zw",                 // Zimbabwe
+    };
+
+    // WARNING: this array MUST be sorted, others it cannot be searched reliably using binary search
+    private static final String[] LOCAL_TLDS = new String[] {
+       "localdomain",         // Also widely used as localhost.localdomain
+       "localhost",           // RFC2606 defined
+    };
+
+    /**
+     * Converts potentially Unicode input to punycode.
+     * If conversion fails, returns the original input.
+     * 
+     * @param input the string to convert, not null
+     * @return converted input, or original input if conversion fails
+     */
+    // Needed by UrlValidator
+    static String unicodeToASCII(String input) {
+        try {
+            return /* java.net.IDN. */ toASCII(input);
+        } catch (IllegalArgumentException e) { // input is not valid
+            return input;
+        }
+    }
+
+    // ================= Code needed for Java 1.4 and 1.5 compatibility ===============
+
+    private static class IDNHolder {
+        private static Method getMethod() {
+            try {
+                Class clazz = Class.forName("java.net.IDN", false, DomainValidator.class.getClassLoader());
+                return clazz.getDeclaredMethod("toASCII", new Class[]{String.class});
+            } catch (Exception e) {
+              return null;
+            }
+        }
+        private static final Method JAVA_NET_IDN_TO_ASCII = getMethod();
+    }
+
+    /*
+     * Helper method to invoke java.net.IDN.toAscii(String).
+     * Allows code to be compiled with Java 1.4 and 1.5 
+     * @throws IllegalArgumentException if the input string doesn't conform to RFC 3490 specification
+     */
+    private static final String toASCII(String line) throws IllegalArgumentException {
+//        java.net.IDN.toASCII(line); // Java 1.6+
+        // implementation for Java 1.4 and 1.5
+        // effectively this is done by IDN.toASCII but we want to skip the entire call
+        if (isOnlyASCII(line)) {
+            return line;
+        }
+        Method m = IDNHolder.JAVA_NET_IDN_TO_ASCII;
+        if (m == null) { // avoid NPE
+            return line;
+        }
+        try {
+            return (String) m.invoke(null, new String[]{line.toLowerCase(Locale.ENGLISH)});
+        } catch (IllegalAccessException e) {
+            throw new RuntimeException(e); // Should not happen
+        } catch (InvocationTargetException e) {
+            Throwable t = e.getCause();
+            if (t instanceof IllegalArgumentException) { // this is expected from toASCII method
+                throw (IllegalArgumentException) t;
+            }
+            throw new RuntimeException(e); // Should not happen
+        }
+    }
+
+    /*
+     * Check if input contains only ASCII
+     * Treats null as all ASCII
+     */
+    private static boolean isOnlyASCII(String input) {
+        if (input == null) {
+            return true;
+        }
+        for(int i=0; i < input.length(); i++) {
+            if (input.charAt(i) > 0x7F) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/DoubleValidator.java b/saripaar/src/main/java/commons/validator/routines/DoubleValidator.java
new file mode 100644
index 0000000..1456e81
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/DoubleValidator.java
@@ -0,0 +1,251 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines;
+
+import java.text.Format;
+import java.util.Locale;
+
+/**
+ * <p><b>Double Validation</b> and Conversion routines (<code>java.lang.Double</code>).</p>
+ *
+ * <p>This validator provides a number of methods for
+ *    validating/converting a <code>String</code> value to
+ *    a <code>Double</code> using <code>java.text.NumberFormat</code>
+ *    to parse either:</p>
+ *    <ul>
+ *       <li>using the default format for the default <code>Locale</code></li>
+ *       <li>using a specified pattern with the default <code>Locale</code></li>
+ *       <li>using the default format for a specified <code>Locale</code></li>
+ *       <li>using a specified pattern with a specified <code>Locale</code></li>
+ *    </ul>
+ *
+ * <p>Use one of the <code>isValid()</code> methods to just validate or
+ *    one of the <code>validate()</code> methods to validate and receive a
+ *    <i>converted</i> <code>Double</code> value.</p>
+ *
+ * <p>Once a value has been successfully converted the following
+ *    methods can be used to perform minimum, maximum and range checks:</p>
+ *    <ul>
+ *       <li><code>minValue()</code> checks whether the value is greater
+ *           than or equal to a specified minimum.</li>
+ *       <li><code>maxValue()</code> checks whether the value is less
+ *           than or equal to a specified maximum.</li>
+ *       <li><code>isInRange()</code> checks whether the value is within
+ *           a specified range of values.</li>
+ *    </ul>
+ *
+ * <p>So that the same mechanism used for parsing an <i>input</i> value
+ *    for validation can be used to format <i>output</i>, corresponding
+ *    <code>format()</code> methods are also provided. That is you can
+ *    format either:</p>
+ *    <ul>
+ *       <li>using the default format for the default <code>Locale</code></li>
+ *       <li>using a specified pattern with the default <code>Locale</code></li>
+ *       <li>using the default format for a specified <code>Locale</code></li>
+ *       <li>using a specified pattern with a specified <code>Locale</code></li>
+ *    </ul>
+ *
+ * @version $Revision$
+ * @since Validator 1.3.0
+ */
+public class DoubleValidator extends AbstractNumberValidator {
+
+    private static final long serialVersionUID = 5867946581318211330L;
+
+    private static final DoubleValidator VALIDATOR = new DoubleValidator();
+
+    /**
+     * Return a singleton instance of this validator.
+     * @return A singleton instance of the DoubleValidator.
+     */
+    public static DoubleValidator getInstance() {
+        return VALIDATOR;
+    }
+
+    /**
+     * Construct a <i>strict</i> instance.
+     */
+    public DoubleValidator() {
+        this(true, STANDARD_FORMAT);
+    }
+
+    /**
+     * <p>Construct an instance with the specified strict setting
+     *    and format type.</p>
+     *
+     * <p>The <code>formatType</code> specified what type of
+     *    <code>NumberFormat</code> is created - valid types
+     *    are:</p>
+     *    <ul>
+     *       <li>AbstractNumberValidator.STANDARD_FORMAT -to create
+     *           <i>standard</i> number formats (the default).</li>
+     *       <li>AbstractNumberValidator.CURRENCY_FORMAT -to create
+     *           <i>currency</i> number formats.</li>
+     *       <li>AbstractNumberValidator.PERCENT_FORMAT -to create
+     *           <i>percent</i> number formats (the default).</li>
+     *    </ul>
+     *
+     * @param strict <code>true</code> if strict
+     *        <code>Format</code> parsing should be used.
+     * @param formatType The <code>NumberFormat</code> type to
+     *        create for validation, default is STANDARD_FORMAT.
+     */
+    public DoubleValidator(boolean strict, int formatType) {
+        super(strict, formatType, true);
+    }
+
+    /**
+     * <p>Validate/convert a <code>Double</code> using the default
+     *    <code>Locale</code>.
+     *
+     * @param value The value validation is being performed on.
+     * @return The parsed <code>Double</code> if valid or <code>null</code>
+     *  if invalid.
+     */
+    public Double validate(String value) {
+        return (Double)parse(value, (String)null, (Locale)null);
+    }
+
+    /**
+     * <p>Validate/convert a <code>Double</code> using the
+     *    specified <i>pattern</i>.
+     *
+     * @param value The value validation is being performed on.
+     * @param pattern The pattern used to validate the value against.
+     * @return The parsed <code>BigDecimal</code> if valid or <code>null</code> if invalid.
+     */
+    public Double validate(String value, String pattern) {
+        return (Double)parse(value, pattern, (Locale)null);
+    }
+
+    /**
+     * <p>Validate/convert a <code>Double</code> using the
+     *    specified <code>Locale</code>.
+     *
+     * @param value The value validation is being performed on.
+     * @param locale The locale to use for the number format, system default if null.
+     * @return The parsed <code>Double</code> if valid or <code>null</code> if invalid.
+     */
+    public Double validate(String value, Locale locale) {
+        return (Double)parse(value, (String)null, locale);
+    }
+
+    /**
+     * <p>Validate/convert a <code>Double</code> using the
+     *    specified pattern and/ or <code>Locale</code>.
+     *
+     * @param value The value validation is being performed on.
+     * @param pattern The pattern used to validate the value against, or the
+     *        default for the <code>Locale</code> if <code>null</code>.
+     * @param locale The locale to use for the date format, system default if null.
+     * @return The parsed <code>Double</code> if valid or <code>null</code> if invalid.
+     */
+    public Double validate(String value, String pattern, Locale locale) {
+        return (Double)parse(value, pattern, locale);
+    }
+
+    /**
+     * Check if the value is within a specified range.
+     *
+     * @param value The <code>Number</code> value to check.
+     * @param min The minimum value of the range.
+     * @param max The maximum value of the range.
+     * @return <code>true</code> if the value is within the
+     *         specified range.
+     */
+    public boolean isInRange(double value, double min, double max) {
+        return (value >= min && value <= max);
+    }
+
+    /**
+     * Check if the value is within a specified range.
+     *
+     * @param value The <code>Number</code> value to check.
+     * @param min The minimum value of the range.
+     * @param max The maximum value of the range.
+     * @return <code>true</code> if the value is within the
+     *         specified range.
+     */
+    public boolean isInRange(Double value, double min, double max) {
+        return isInRange(value.doubleValue(), min, max);
+    }
+
+    /**
+     * Check if the value is greater than or equal to a minimum.
+     *
+     * @param value The value validation is being performed on.
+     * @param min The minimum value.
+     * @return <code>true</code> if the value is greater than
+     *         or equal to the minimum.
+     */
+    public boolean minValue(double value, double min) {
+        return (value >= min);
+    }
+
+    /**
+     * Check if the value is greater than or equal to a minimum.
+     *
+     * @param value The value validation is being performed on.
+     * @param min The minimum value.
+     * @return <code>true</code> if the value is greater than
+     *         or equal to the minimum.
+     */
+    public boolean minValue(Double value, double min) {
+        return minValue(value.doubleValue(), min);
+    }
+
+    /**
+     * Check if the value is less than or equal to a maximum.
+     *
+     * @param value The value validation is being performed on.
+     * @param max The maximum value.
+     * @return <code>true</code> if the value is less than
+     *         or equal to the maximum.
+     */
+    public boolean maxValue(double value, double max) {
+        return (value <= max);
+    }
+
+    /**
+     * Check if the value is less than or equal to a maximum.
+     *
+     * @param value The value validation is being performed on.
+     * @param max The maximum value.
+     * @return <code>true</code> if the value is less than
+     *         or equal to the maximum.
+     */
+    public boolean maxValue(Double value, double max) {
+        return maxValue(value.doubleValue(), max);
+    }
+
+    /**
+     * Convert the parsed value to a <code>Double</code>.
+     *
+     * @param value The parsed <code>Number</code> object created.
+     * @param formatter The Format used to parse the value with.
+     * @return The validated/converted <code>Double</code> value if valid
+     * or <code>null</code> if invalid.
+     */
+    protected Object processParsedValue(Object value, Format formatter) {
+
+        if (value instanceof Double) {
+            return value;
+        }
+        return new Double(((Number)value).doubleValue());
+
+    }
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/EmailValidator.java b/saripaar/src/main/java/commons/validator/routines/EmailValidator.java
new file mode 100644
index 0000000..274c19d
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/EmailValidator.java
@@ -0,0 +1,165 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines;
+
+import java.io.Serializable;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+/**
+ * <p>Perform email validations.</p>
+ * <p>
+ * Based on a script by <a href="mailto:stamhankar@hotmail.com">Sandeep V. Tamhankar</a>
+ * http://javascript.internet.com
+ * </p>
+ * <p>
+ * This implementation is not guaranteed to catch all possible errors in an email address.
+ * </p>.
+ *
+ * @version $Revision$
+ * @since Validator 1.4
+ */
+public class EmailValidator implements Serializable {
+
+    private static final long serialVersionUID = 1705927040799295880L;
+
+    private static final String SPECIAL_CHARS = "\\p{Cntrl}\\(\\)<>@,;:'\\\\\\\"\\.\\[\\]";
+    private static final String VALID_CHARS = "[^\\s" + SPECIAL_CHARS + "]";
+    private static final String QUOTED_USER = "(\"[^\"]*\")";
+    private static final String WORD = "((" + VALID_CHARS + "|')+|" + QUOTED_USER + ")";
+
+    private static final String EMAIL_REGEX = "^\\s*?(.+)@(.+?)\\s*$";
+    private static final String IP_DOMAIN_REGEX = "^\\[(.*)\\]$";
+    private static final String USER_REGEX = "^\\s*" + WORD + "(\\." + WORD + ")*$";
+
+    private static final Pattern EMAIL_PATTERN = Pattern.compile(EMAIL_REGEX);
+    private static final Pattern IP_DOMAIN_PATTERN = Pattern.compile(IP_DOMAIN_REGEX);
+    private static final Pattern USER_PATTERN = Pattern.compile(USER_REGEX);
+
+    private final boolean allowLocal;
+
+    /**
+     * Singleton instance of this class, which
+     *  doesn't consider local addresses as valid.
+     */
+    private static final EmailValidator EMAIL_VALIDATOR = new EmailValidator(false);
+
+    /**
+     * Singleton instance of this class, which does
+     *  consider local addresses valid.
+     */
+    private static final EmailValidator EMAIL_VALIDATOR_WITH_LOCAL = new EmailValidator(true);
+
+    /**
+     * Returns the Singleton instance of this validator.
+     *
+     * @return singleton instance of this validator.
+     */
+    public static EmailValidator getInstance() {
+        return EMAIL_VALIDATOR;
+    }
+
+    /**
+     * Returns the Singleton instance of this validator,
+     *  with local validation as required.
+     *
+     * @param allowLocal Should local addresses be considered valid?
+     * @return singleton instance of this validator
+     */
+    public static EmailValidator getInstance(boolean allowLocal) {
+        if(allowLocal) {
+           return EMAIL_VALIDATOR_WITH_LOCAL;
+        }
+        return EMAIL_VALIDATOR;
+    }
+
+    /**
+     * Protected constructor for subclasses to use.
+     *
+     * @param allowLocal Should local addresses be considered valid?
+     */
+    protected EmailValidator(boolean allowLocal) {
+        super();
+        this.allowLocal = allowLocal;
+    }
+
+    /**
+     * <p>Checks if a field has a valid e-mail address.</p>
+     *
+     * @param email The value validation is being performed on.  A <code>null</code>
+     *              value is considered invalid.
+     * @return true if the email address is valid.
+     */
+    public boolean isValid(String email) {
+        if (email == null) {
+            return false;
+        }
+
+        if (email.endsWith(".")) { // check this first - it's cheap!
+            return false;
+        }
+
+        // Check the whole email address structure
+        Matcher emailMatcher = EMAIL_PATTERN.matcher(email);
+        if (!emailMatcher.matches()) {
+            return false;
+        }
+
+        if (!isValidUser(emailMatcher.group(1))) {
+            return false;
+        }
+
+        if (!isValidDomain(emailMatcher.group(2))) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Returns true if the domain component of an email address is valid.
+     *
+     * @param domain being validated, may be in IDN format
+     * @return true if the email address's domain is valid.
+     */
+    protected boolean isValidDomain(String domain) {
+        // see if domain is an IP address in brackets
+        Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);
+
+        if (ipDomainMatcher.matches()) {
+            InetAddressValidator inetAddressValidator =
+                    InetAddressValidator.getInstance();
+            return inetAddressValidator.isValid(ipDomainMatcher.group(1));
+        }
+        // Domain is symbolic name
+        DomainValidator domainValidator =
+                DomainValidator.getInstance(allowLocal);
+        return domainValidator.isValid(domain) ||
+                domainValidator.isValidTld(domain);
+    }
+
+    /**
+     * Returns true if the user component of an email address is valid.
+     *
+     * @param user being validated
+     * @return true if the user name is valid.
+     */
+    protected boolean isValidUser(String user) {
+        return USER_PATTERN.matcher(user).matches();
+    }
+
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/ISBNValidator.java b/saripaar/src/main/java/commons/validator/routines/ISBNValidator.java
new file mode 100644
index 0000000..22bffd5
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/ISBNValidator.java
@@ -0,0 +1,258 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines;
+
+import java.io.Serializable;
+import commons.validator.routines.checkdigit.EAN13CheckDigit;
+import commons.validator.routines.checkdigit.ISBN10CheckDigit;
+import commons.validator.routines.checkdigit.CheckDigitException;
+
+/**
+ * <b>ISBN-10</b> and <b>ISBN-13</b> Code Validation.
+ * <p>
+ * This validator validates the code is either a valid ISBN-10
+ * (using a {@link CodeValidator} with the {@link ISBN10CheckDigit})
+ * or a valid ISBN-13 code (using a {@link CodeValidator} with the
+ * the {@link EAN13CheckDigit} routine).
+ * <p>
+ * The <code>validate()</code> methods return the ISBN code with formatting
+ * characters removed if valid or <code>null</code> if invalid.
+ * <p>
+ * This validator also provides the facility to convert ISBN-10 codes to
+ * ISBN-13 if the <code>convert</code> property is <code>true</code>.
+ * <p>
+ * From 1st January 2007 the book industry will start to use a new 13 digit
+ * ISBN number (rather than this 10 digit ISBN number). ISBN-13 codes are
+ * <a href="http://en.wikipedia.org/wiki/European_Article_Number">EAN</a>
+ * codes, for more information see:</p>
+ *
+ * <ul>
+ *   <li><a href="http://en.wikipedia.org/wiki/ISBN">Wikipedia - International
+ *       Standard Book Number (ISBN)</a>.</li>
+ *   <li>EAN - see
+ *       <a href="http://en.wikipedia.org/wiki/European_Article_Number">Wikipedia -
+ *       European Article Number</a>.</li>
+ *   <li><a href="http://www.isbn.org/standards/home/isbn/transition.asp">ISBN-13
+ *       Transition details</a>.</li>
+ * </ul>
+ *
+ * @version $Revision$
+ * @since Validator 1.4
+ */
+public class ISBNValidator implements Serializable {
+
+    private static final long serialVersionUID = 4319515687976420405L;
+
+    private static final String SEP = "(?:\\-|\\s)";
+    private static final String GROUP = "(\\d{1,5})";
+    private static final String PUBLISHER = "(\\d{1,7})";
+    private static final String TITLE = "(\\d{1,6})";
+
+    /**
+     * ISBN-10 consists of 4 groups of numbers separated by either dashes (-)
+     * or spaces.  The first group is 1-5 characters, second 1-7, third 1-6,
+     * and fourth is 1 digit or an X.
+     */
+    static final String ISBN10_REGEX     =
+                  "^(?:(\\d{9}[0-9X])|(?:" + GROUP + SEP + PUBLISHER + SEP + TITLE + SEP + "([0-9X])))$";
+
+    /**
+     * ISBN-13 consists of 5 groups of numbers separated by either dashes (-)
+     * or spaces.  The first group is 978 or 979, the second group is
+     * 1-5 characters, third 1-7, fourth 1-6, and fifth is 1 digit.
+     */
+    static final String ISBN13_REGEX     =
+        "^(978|979)(?:(\\d{10})|(?:" + SEP + GROUP + SEP + PUBLISHER + SEP + TITLE + SEP + "([0-9])))$";
+
+    /** ISBN Code Validator (which converts ISBN-10 codes to ISBN-13 */
+    private static final ISBNValidator ISBN_VALIDATOR = new ISBNValidator();
+
+    /** ISBN Code Validator (which converts ISBN-10 codes to ISBN-13 */
+    private static final ISBNValidator ISBN_VALIDATOR_NO_CONVERT = new ISBNValidator(false);
+
+
+    /** ISBN-10 Code Validator */
+    private final CodeValidator isbn10Validator = new CodeValidator(ISBN10_REGEX, 10, ISBN10CheckDigit.ISBN10_CHECK_DIGIT);
+
+    /** ISBN-13 Code Validator */
+    private final CodeValidator isbn13Validator = new CodeValidator(ISBN13_REGEX, 13, EAN13CheckDigit.EAN13_CHECK_DIGIT);
+
+    private final boolean convert;
+
+    /**
+     * Return a singleton instance of the ISBN validator which
+     * converts ISBN-10 codes to ISBN-13.
+     *
+     * @return A singleton instance of the ISBN validator.
+     */
+    public static ISBNValidator getInstance() {
+        return ISBN_VALIDATOR;
+    }
+
+    /**
+     * Return a singleton instance of the ISBN validator specifying
+     * whether ISBN-10 codes should be converted to ISBN-13.
+     *
+     * @param convert <code>true</code> if valid ISBN-10 codes
+     * should be converted to ISBN-13 codes or <code>false</code>
+     * if valid ISBN-10 codes should be returned unchanged.
+     * @return A singleton instance of the ISBN validator.
+     */
+    public static ISBNValidator getInstance(boolean convert) {
+        return (convert ? ISBN_VALIDATOR : ISBN_VALIDATOR_NO_CONVERT);
+    }
+
+    /**
+     * Construct an ISBN validator which converts ISBN-10 codes
+     * to ISBN-13.
+     */
+    public ISBNValidator() {
+        this(true);
+    }
+
+    /**
+     * Construct an ISBN validator indicating whether
+     * ISBN-10 codes should be converted to ISBN-13.
+     *
+     * @param convert <code>true</code> if valid ISBN-10 codes
+     * should be converted to ISBN-13 codes or <code>false</code>
+     * if valid ISBN-10 codes should be returned unchanged.
+     */
+    public ISBNValidator(boolean convert) {
+        this.convert = convert;
+    }
+
+    /**
+     * Check the code is either a valid ISBN-10 or ISBN-13 code.
+     *
+     * @param code The code to validate.
+     * @return <code>true</code> if a valid ISBN-10 or
+     * ISBN-13 code, otherwise <code>false</code>.
+     */
+    public boolean isValid(String code) {
+        return (isValidISBN13(code) || isValidISBN10(code));
+    }
+
+    /**
+     * Check the code is a valid ISBN-10 code.
+     *
+     * @param code The code to validate.
+     * @return <code>true</code> if a valid ISBN-10
+     * code, otherwise <code>false</code>.
+     */
+    public boolean isValidISBN10(String code) {
+        return isbn10Validator.isValid(code);
+    }
+
+    /**
+     * Check the code is a valid ISBN-13 code.
+     *
+     * @param code The code to validate.
+     * @return <code>true</code> if a valid ISBN-13
+     * code, otherwise <code>false</code>.
+     */
+    public boolean isValidISBN13(String code) {
+        return isbn13Validator.isValid(code);
+    }
+
+    /**
+     * Check the code is either a valid ISBN-10 or ISBN-13 code.
+     * <p>
+     * If valid, this method returns the ISBN code with
+     * formatting characters removed (i.e. space or hyphen).
+     * <p>
+     * Converts an ISBN-10 codes to ISBN-13 if
+     * <code>convertToISBN13</code> is <code>true</code>.
+     *
+     * @param code The code to validate.
+     * @return A valid ISBN code if valid, otherwise <code>null</code>.
+     */
+    public String validate(String code) {
+        String result = validateISBN13(code);
+        if (result == null) {
+            result = validateISBN10(code);
+            if (result != null && convert) {
+                result = convertToISBN13(result);
+            }
+        }
+        return result;
+    }
+
+    /**
+     * Check the code is a valid ISBN-10 code.
+     * <p>
+     * If valid, this method returns the ISBN-10 code with
+     * formatting characters removed (i.e. space or hyphen).
+     *
+     * @param code The code to validate.
+     * @return A valid ISBN-10 code if valid,
+     * otherwise <code>null</code>.
+     */
+    public String validateISBN10(String code) {
+        Object result = isbn10Validator.validate(code);
+        return (result == null ? null : result.toString());
+    }
+
+    /**
+     * Check the code is a valid ISBN-13 code.
+     * <p>
+     * If valid, this method returns the ISBN-13 code with
+     * formatting characters removed (i.e. space or hyphen).
+     *
+     * @param code The code to validate.
+     * @return A valid ISBN-13 code if valid,
+     * otherwise <code>null</code>.
+     */
+    public String validateISBN13(String code) {
+        Object result = isbn13Validator.validate(code);
+        return (result == null ? null : result.toString());
+    }
+
+    /**
+     * Convert an ISBN-10 code to an ISBN-13 code.
+     * <p>
+     * This method requires a valid ISBN-10 with NO formatting
+     * characters.
+     *
+     * @param isbn10 The ISBN-10 code to convert
+     * @return A converted ISBN-13 code or <code>null</code>
+     * if the ISBN-10 code is not valid
+     */
+    public String convertToISBN13(String isbn10) {
+
+        if (isbn10 == null) {
+            return null;
+        }
+
+        String input = isbn10.trim();
+        if (input.length() != 10) {
+            throw new IllegalArgumentException("Invalid length " + input.length() + " for '" + input + "'");
+        }
+
+        // Calculate the new ISBN-13 code
+        String isbn13 = "978" + input.substring(0, 9);
+        try {
+            String checkDigit = isbn13Validator.getCheckDigit().calculate(isbn13);
+            isbn13 += checkDigit;
+            return isbn13;
+        } catch (CheckDigitException e) {
+            throw new IllegalArgumentException("Check digit error for '" + input + "' - " + e.getMessage());
+        }
+
+    }
+
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/InetAddressValidator.java b/saripaar/src/main/java/commons/validator/routines/InetAddressValidator.java
new file mode 100644
index 0000000..84d7db0
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/InetAddressValidator.java
@@ -0,0 +1,185 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package commons.validator.routines;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+/**
+ * <p><b>InetAddress</b> validation and conversion routines (<code>java.net.InetAddress</code>).</p>
+ *
+ * <p>This class provides methods to validate a candidate IP address.
+ *
+ * <p>
+ * This class is a Singleton; you can retrieve the instance via the {@link #getInstance()} method.
+ * </p>
+ *
+ * @version $Revision$
+ * @since Validator 1.4
+ */
+public class InetAddressValidator implements Serializable {
+
+    private static final long serialVersionUID = -919201640201914789L;
+
+    private static final String IPV4_REGEX =
+            "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$";
+
+    /**
+     * Singleton instance of this class.
+     */
+    private static final InetAddressValidator VALIDATOR = new InetAddressValidator();
+
+    /** IPv4 RegexValidator */
+    private final RegexValidator ipv4Validator = new RegexValidator(IPV4_REGEX);
+
+    /**
+     * Returns the singleton instance of this validator.
+     * @return the singleton instance of this validator
+     */
+    public static InetAddressValidator getInstance() {
+        return VALIDATOR;
+    }
+
+    /**
+     * Checks if the specified string is a valid IP address.
+     * @param inetAddress the string to validate
+     * @return true if the string validates as an IP address
+     */
+    public boolean isValid(String inetAddress) {
+        return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);
+    }
+
+    /**
+     * Validates an IPv4 address. Returns true if valid.
+     * @param inet4Address the IPv4 address to validate
+     * @return true if the argument contains a valid IPv4 address
+     */
+    public boolean isValidInet4Address(String inet4Address) {
+        // verify that address conforms to generic IPv4 format
+        String[] groups = ipv4Validator.match(inet4Address);
+
+        if (groups == null) {
+            return false;
+        }
+
+        // verify that address subgroups are legal
+        for (int i = 0; i <= 3; i++) {
+            String ipSegment = groups[i];
+            if (ipSegment == null || ipSegment.length() == 0) {
+                return false;
+            }
+
+            int iIpSegment = 0;
+
+            try {
+                iIpSegment = Integer.parseInt(ipSegment);
+            } catch(NumberFormatException e) {
+                return false;
+            }
+
+            if (iIpSegment > 255) {
+                return false;
+            }
+
+            if (ipSegment.length() > 1 && ipSegment.startsWith("0")) {
+                return false;
+            }
+
+        }
+
+        return true;
+    }
+
+    /**
+     * Validates an IPv6 address. Returns true if valid.
+     * @param inet6Address the IPv6 address to validate
+     * @return true if the argument contains a valid IPv6 address
+     * 
+     * @since 1.4.1
+     */
+    public boolean isValidInet6Address(String inet6Address) {
+        boolean containsCompressedZeroes = inet6Address.indexOf("::") > -1; // contains is Java 1.5
+        if (containsCompressedZeroes && (inet6Address.indexOf("::") != inet6Address.lastIndexOf("::"))) {
+            return false;
+        }
+        if ((inet6Address.startsWith(":") && !inet6Address.startsWith("::"))
+                || (inet6Address.endsWith(":") && !inet6Address.endsWith("::"))) {
+            return false;
+        }
+        Object[] octets = inet6Address.split(":");
+        if (containsCompressedZeroes) {
+            List octetList = new ArrayList(Arrays.asList(octets));
+            if (inet6Address.endsWith("::")) {
+                // String.split() drops ending empty segments
+                octetList.add("");
+            } else if (inet6Address.startsWith("::") && !octetList.isEmpty()) {
+                octetList.remove(0);
+            }
+            octets = octetList.toArray();
+        }
+        if (octets.length > 8) {
+            return false;
+        }
+        int validOctets = 0;
+        int emptyOctets = 0;
+        for (int index = 0; index < octets.length; index++) {
+            String octet = (String) octets[index];
+            if (octet.length() == 0) {
+                emptyOctets++;
+                if (emptyOctets > 1) {
+                    return false;
+                }
+            } else {
+                emptyOctets = 0;
+                if (octet.indexOf(".") > -1) { // contains is Java 1.5+
+                    if (!inet6Address.endsWith(octet)) {
+                        return false;
+                    }
+                    if (index > octets.length - 1 || index > 6) {
+                        // IPV4 occupies last two octets
+                        return false;
+                    }
+                    if (!isValidInet4Address(octet)) {
+                        return false;
+                    }
+                    validOctets += 2;
+                    continue;
+                }
+                if (octet.length() > 4) {
+                    return false;
+                }
+                int octetInt = 0;
+                try {
+                    octetInt = Integer.valueOf(octet, 16).intValue();
+                } catch (NumberFormatException e) {
+                    return false;
+                }
+                if (octetInt < 0 || octetInt > 0xffff) {
+                    return false;
+                }
+            }
+            validOctets++;
+        }
+        if (validOctets < 8 && !containsCompressedZeroes) {
+            return false;
+        }
+        return true;
+    }
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/IntegerValidator.java b/saripaar/src/main/java/commons/validator/routines/IntegerValidator.java
new file mode 100644
index 0000000..e8041d0
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/IntegerValidator.java
@@ -0,0 +1,254 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines;
+
+import java.text.Format;
+import java.util.Locale;
+
+/**
+ * <p><b>Integer Validation</b> and Conversion routines (<code>java.lang.Integer</code>).</p>
+ *
+ * <p>This validator provides a number of methods for
+ *    validating/converting a <code>String</code> value to
+ *    a <code>Integer</code> using <code>java.text.NumberFormat</code>
+ *    to parse either:</p>
+ *    <ul>
+ *       <li>using the default format for the default <code>Locale</code></li>
+ *       <li>using a specified pattern with the default <code>Locale</code></li>
+ *       <li>using the default format for a specified <code>Locale</code></li>
+ *       <li>using a specified pattern with a specified <code>Locale</code></li>
+ *    </ul>
+ *
+ * <p>Use one of the <code>isValid()</code> methods to just validate or
+ *    one of the <code>validate()</code> methods to validate and receive a
+ *    <i>converted</i> <code>Integer</code> value.</p>
+ *
+ * <p>Once a value has been successfully converted the following
+ *    methods can be used to perform minimum, maximum and range checks:</p>
+ *    <ul>
+ *       <li><code>minValue()</code> checks whether the value is greater
+ *           than or equal to a specified minimum.</li>
+ *       <li><code>maxValue()</code> checks whether the value is less
+ *           than or equal to a specified maximum.</li>
+ *       <li><code>isInRange()</code> checks whether the value is within
+ *           a specified range of values.</li>
+ *    </ul>
+ *
+ * <p>So that the same mechanism used for parsing an <i>input</i> value
+ *    for validation can be used to format <i>output</i>, corresponding
+ *    <code>format()</code> methods are also provided. That is you can
+ *    format either:</p>
+ *    <ul>
+ *       <li>using the default format for the default <code>Locale</code></li>
+ *       <li>using a specified pattern with the default <code>Locale</code></li>
+ *       <li>using the default format for a specified <code>Locale</code></li>
+ *       <li>using a specified pattern with a specified <code>Locale</code></li>
+ *    </ul>
+ *
+ * @version $Revision$
+ * @since Validator 1.3.0
+ */
+public class IntegerValidator extends AbstractNumberValidator {
+
+    private static final long serialVersionUID = 422081746310306596L;
+
+    private static final IntegerValidator VALIDATOR = new IntegerValidator();
+
+    /**
+     * Return a singleton instance of this validator.
+     * @return A singleton instance of the IntegerValidator.
+     */
+    public static IntegerValidator getInstance() {
+        return VALIDATOR;
+    }
+
+    /**
+     * Construct a <i>strict</i> instance.
+     */
+    public IntegerValidator() {
+        this(true, STANDARD_FORMAT);
+    }
+
+    /**
+     * <p>Construct an instance with the specified strict setting
+     *    and format type.</p>
+     *
+     * <p>The <code>formatType</code> specified what type of
+     *    <code>NumberFormat</code> is created - valid types
+     *    are:</p>
+     *    <ul>
+     *       <li>AbstractNumberValidator.STANDARD_FORMAT -to create
+     *           <i>standard</i> number formats (the default).</li>
+     *       <li>AbstractNumberValidator.CURRENCY_FORMAT -to create
+     *           <i>currency</i> number formats.</li>
+     *       <li>AbstractNumberValidator.PERCENT_FORMAT -to create
+     *           <i>percent</i> number formats (the default).</li>
+     *    </ul>
+     *
+     * @param strict <code>true</code> if strict
+     *        <code>Format</code> parsing should be used.
+     * @param formatType The <code>NumberFormat</code> type to
+     *        create for validation, default is STANDARD_FORMAT.
+     */
+    public IntegerValidator(boolean strict, int formatType) {
+        super(strict, formatType, false);
+    }
+
+    /**
+     * <p>Validate/convert an <code>Integer</code> using the default
+     *    <code>Locale</code>.
+     *
+     * @param value The value validation is being performed on.
+     * @return The parsed <code>Integer</code> if valid or <code>null</code>
+     *  if invalid.
+     */
+    public Integer validate(String value) {
+        return (Integer)parse(value, (String)null, (Locale)null);
+    }
+
+    /**
+     * <p>Validate/convert an <code>Integer</code> using the
+     *    specified <i>pattern</i>.
+     *
+     * @param value The value validation is being performed on.
+     * @param pattern The pattern used to validate the value against.
+     * @return The parsed <code>Integer</code> if valid or <code>null</code> if invalid.
+     */
+    public Integer validate(String value, String pattern) {
+        return (Integer)parse(value, pattern, (Locale)null);
+    }
+
+    /**
+     * <p>Validate/convert an <code>Integer</code> using the
+     *    specified <code>Locale</code>.
+     *
+     * @param value The value validation is being performed on.
+     * @param locale The locale to use for the number format, system default if null.
+     * @return The parsed <code>Integer</code> if valid or <code>null</code> if invalid.
+     */
+    public Integer validate(String value, Locale locale) {
+        return (Integer)parse(value, (String)null, locale);
+    }
+
+    /**
+     * <p>Validate/convert a <code>Integer</code> using the
+     *    specified pattern and/ or <code>Locale</code>.
+     *
+     * @param value The value validation is being performed on.
+     * @param pattern The pattern used to validate the value against, or the
+     *        default for the <code>Locale</code> if <code>null</code>.
+     * @param locale The locale to use for the date format, system default if null.
+     * @return The parsed <code>Integer</code> if valid or <code>null</code> if invalid.
+     */
+    public Integer validate(String value, String pattern, Locale locale) {
+        return (Integer)parse(value, pattern, locale);
+    }
+
+    /**
+     * Check if the value is within a specified range.
+     *
+     * @param value The <code>Number</code> value to check.
+     * @param min The minimum value of the range.
+     * @param max The maximum value of the range.
+     * @return <code>true</code> if the value is within the
+     *         specified range.
+     */
+    public boolean isInRange(int value, int min, int max) {
+        return (value >= min && value <= max);
+    }
+
+    /**
+     * Check if the value is within a specified range.
+     *
+     * @param value The <code>Number</code> value to check.
+     * @param min The minimum value of the range.
+     * @param max The maximum value of the range.
+     * @return <code>true</code> if the value is within the
+     *         specified range.
+     */
+    public boolean isInRange(Integer value, int min, int max) {
+        return isInRange(value.intValue(), min, max);
+    }
+
+    /**
+     * Check if the value is greater than or equal to a minimum.
+     *
+     * @param value The value validation is being performed on.
+     * @param min The minimum value.
+     * @return <code>true</code> if the value is greater than
+     *         or equal to the minimum.
+     */
+    public boolean minValue(int value, int min) {
+        return (value >= min);
+    }
+
+    /**
+     * Check if the value is greater than or equal to a minimum.
+     *
+     * @param value The value validation is being performed on.
+     * @param min The minimum value.
+     * @return <code>true</code> if the value is greater than
+     *         or equal to the minimum.
+     */
+    public boolean minValue(Integer value, int min) {
+        return minValue(value.intValue(), min);
+    }
+
+    /**
+     * Check if the value is less than or equal to a maximum.
+     *
+     * @param value The value validation is being performed on.
+     * @param max The maximum value.
+     * @return <code>true</code> if the value is less than
+     *         or equal to the maximum.
+     */
+    public boolean maxValue(int value, int max) {
+        return (value <= max);
+    }
+
+    /**
+     * Check if the value is less than or equal to a maximum.
+     *
+     * @param value The value validation is being performed on.
+     * @param max The maximum value.
+     * @return <code>true</code> if the value is less than
+     *         or equal to the maximum.
+     */
+    public boolean maxValue(Integer value, int max) {
+        return maxValue(value.intValue(), max);
+    }
+
+    /**
+     * <p>Perform further validation and convert the <code>Number</code> to
+     * an <code>Integer</code>.</p>
+     *
+     * @param value The parsed <code>Number</code> object created.
+     * @param formatter The Format used to parse the value with.
+     * @return The parsed <code>Number</code> converted to an
+     *   <code>Integer</code> if valid or <code>null</code> if invalid.
+     */
+    protected Object processParsedValue(Object value, Format formatter) {
+
+        long longValue = ((Number)value).longValue();
+
+        if (longValue < Integer.MIN_VALUE ||
+            longValue > Integer.MAX_VALUE) {
+            return null;
+        }
+        return new Integer((int)longValue);
+    }
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/RegexValidator.java b/saripaar/src/main/java/commons/validator/routines/RegexValidator.java
new file mode 100644
index 0000000..67bdd54
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/RegexValidator.java
@@ -0,0 +1,227 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines;
+
+import java.io.Serializable;
+import java.util.regex.Pattern;
+import java.util.regex.Matcher;
+
+/**
+ * <b>Regular Expression</b> validation (using JDK 1.4+ regex support).
+ * <p>
+ * Construct the validator either for a single regular expression or a set (array) of
+ * regular expressions. By default validation is <i>case sensitive</i> but constructors
+ * are provided to allow  <i>case in-sensitive</i> validation. For example to create
+ * a validator which does <i>case in-sensitive</i> validation for a set of regular
+ * expressions:
+ * </p>
+ * <pre>
+ * <code>
+ * String[] regexs = new String[] {...};
+ * RegexValidator validator = new RegexValidator(regexs, false);
+ * </code>
+ * </pre>
+ *
+ * <ul>
+ *   <li>Validate <code>true</code> or <code>false</code>:</li>
+ *   <li>
+ *     <ul>
+ *       <li><code>boolean valid = validator.isValid(value);</code></li>
+ *     </ul>
+ *   </li>
+ *   <li>Validate returning an aggregated String of the matched groups:</li>
+ *   <li>
+ *     <ul>
+ *       <li><code>String result = validator.validate(value);</code></li>
+ *     </ul>
+ *   </li>
+ *   <li>Validate returning the matched groups:</li>
+ *   <li>
+ *     <ul>
+ *       <li><code>String[] result = validator.match(value);</code></li>
+ *     </ul>
+ *   </li>
+ * </ul>
+ *
+ * <p>
+ * Cached instances pre-compile and re-use {@link Pattern}(s) - which according
+ * to the {@link Pattern} API are safe to use in a multi-threaded environment.
+ * </p>
+ *
+ * @version $Revision$
+ * @since Validator 1.4
+ */
+public class RegexValidator implements Serializable {
+
+    private static final long serialVersionUID = -8832409930574867162L;
+
+    private final Pattern[] patterns;
+
+    /**
+     * Construct a <i>case sensitive</i> validator for a single
+     * regular expression.
+     *
+     * @param regex The regular expression this validator will
+     * validate against
+     */
+    public RegexValidator(String regex) {
+        this(regex, true);
+    }
+
+    /**
+     * Construct a validator for a single regular expression
+     * with the specified case sensitivity.
+     *
+     * @param regex The regular expression this validator will
+     * validate against
+     * @param caseSensitive when <code>true</code> matching is <i>case
+     * sensitive</i>, otherwise matching is <i>case in-sensitive</i>
+     */
+    public RegexValidator(String regex, boolean caseSensitive) {
+        this(new String[] {regex}, caseSensitive);
+    }
+
+    /**
+     * Construct a <i>case sensitive</i> validator that matches any one
+     * of the set of regular expressions.
+     *
+     * @param regexs The set of regular expressions this validator will
+     * validate against
+     */
+    public RegexValidator(String[] regexs) {
+        this(regexs, true);
+    }
+
+    /**
+     * Construct a validator that matches any one of the set of regular
+     * expressions with the specified case sensitivity.
+     *
+     * @param regexs The set of regular expressions this validator will
+     * validate against
+     * @param caseSensitive when <code>true</code> matching is <i>case
+     * sensitive</i>, otherwise matching is <i>case in-sensitive</i>
+     */
+    public RegexValidator(String[] regexs, boolean caseSensitive) {
+        if (regexs == null || regexs.length == 0) {
+            throw new IllegalArgumentException("Regular expressions are missing");
+        }
+        patterns = new Pattern[regexs.length];
+        int flags =  (caseSensitive ? 0: Pattern.CASE_INSENSITIVE);
+        for (int i = 0; i < regexs.length; i++) {
+            if (regexs[i] == null || regexs[i].length() == 0) {
+                throw new IllegalArgumentException("Regular expression[" + i + "] is missing");
+            }
+            patterns[i] =  Pattern.compile(regexs[i], flags);
+        }
+    }
+
+    /**
+     * Validate a value against the set of regular expressions.
+     *
+     * @param value The value to validate.
+     * @return <code>true</code> if the value is valid
+     * otherwise <code>false</code>.
+     */
+    public boolean isValid(String value) {
+        if (value == null) {
+            return false;
+        }
+        for (int i = 0; i < patterns.length; i++) {
+            if (patterns[i].matcher(value).matches()) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Validate a value against the set of regular expressions
+     * returning the array of matched groups.
+     *
+     * @param value The value to validate.
+     * @return String array of the <i>groups</i> matched if
+     * valid or <code>null</code> if invalid
+     */
+    public String[] match(String value) {
+        if (value == null) {
+            return null;
+        }
+        for (int i = 0; i < patterns.length; i++) {
+            Matcher matcher = patterns[i].matcher(value);
+            if (matcher.matches()) {
+                int count = matcher.groupCount();
+                String[] groups = new String[count];
+                for (int j = 0; j < count; j++) {
+                    groups[j] = matcher.group(j+1);
+                }
+                return groups;
+            }
+        }
+        return null;
+    }
+
+
+    /**
+     * Validate a value against the set of regular expressions
+     * returning a String value of the aggregated groups.
+     *
+     * @param value The value to validate.
+     * @return Aggregated String value comprised of the
+     * <i>groups</i> matched if valid or <code>null</code> if invalid
+     */
+    public String validate(String value) {
+        if (value == null) {
+            return null;
+        }
+        for (int i = 0; i < patterns.length; i++) {
+            Matcher matcher = patterns[i].matcher(value);
+            if (matcher.matches()) {
+                int count = matcher.groupCount();
+                if (count == 1) {
+                    return matcher.group(1);
+                }
+                StringBuffer buffer = new StringBuffer();
+                for (int j = 0; j < count; j++) {
+                    String component = matcher.group(j+1);
+                    if (component != null) {
+                        buffer.append(component);
+                    }
+                }
+                return buffer.toString();
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Provide a String representation of this validator.
+     * @return A String representation of this validator
+     */
+    public String toString() {
+        StringBuffer buffer = new StringBuffer();
+        buffer.append("RegexValidator{");
+        for (int i = 0; i < patterns.length; i++) {
+            if (i > 0) {
+                buffer.append(",");
+            }
+            buffer.append(patterns[i].pattern());
+        }
+        buffer.append("}");
+        return buffer.toString();
+    }
+
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/UrlValidator.java b/saripaar/src/main/java/commons/validator/routines/UrlValidator.java
new file mode 100644
index 0000000..0f89a49
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/UrlValidator.java
@@ -0,0 +1,502 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines;
+
+import java.io.Serializable;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Locale;
+import java.util.Set;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+/**
+ * <p><b>URL Validation</b> routines.</p>
+ * Behavior of validation is modified by passing in options:
+ * <ul>
+ * <li>ALLOW_2_SLASHES - [FALSE]  Allows double '/' characters in the path
+ * component.</li>
+ * <li>NO_FRAGMENT- [FALSE]  By default fragments are allowed, if this option is
+ * included then fragments are flagged as illegal.</li>
+ * <li>ALLOW_ALL_SCHEMES - [FALSE] By default only http, https, and ftp are
+ * considered valid schemes.  Enabling this option will let any scheme pass validation.</li>
+ * </ul>
+ *
+ * <p>Originally based in on php script by Debbie Dyer, validation.php v1.2b, Date: 03/07/02,
+ * http://javascript.internet.com. However, this validation now bears little resemblance
+ * to the php original.</p>
+ * <pre>
+ *   Example of usage:
+ *   Construct a UrlValidator with valid schemes of "http", and "https".
+ *
+ *    String[] schemes = {"http","https"}.
+ *    UrlValidator urlValidator = new UrlValidator(schemes);
+ *    if (urlValidator.isValid("ftp://foo.bar.com/")) {
+ *       System.out.println("url is valid");
+ *    } else {
+ *       System.out.println("url is invalid");
+ *    }
+ *
+ *    prints "url is invalid"
+ *   If instead the default constructor is used.
+ *
+ *    UrlValidator urlValidator = new UrlValidator();
+ *    if (urlValidator.isValid("ftp://foo.bar.com/")) {
+ *       System.out.println("url is valid");
+ *    } else {
+ *       System.out.println("url is invalid");
+ *    }
+ *
+ *   prints out "url is valid"
+ *  </pre>
+ *
+ * @see
+ * <a href="http://www.ietf.org/rfc/rfc2396.txt">
+ *  Uniform Resource Identifiers (URI): Generic Syntax
+ * </a>
+ *
+ * @version $Revision$
+ * @since Validator 1.4
+ */
+public class UrlValidator implements Serializable {
+
+    private static final long serialVersionUID = 7557161713937335013L;
+
+    /**
+     * Allows all validly formatted schemes to pass validation instead of
+     * supplying a set of valid schemes.
+     */
+    public static final long ALLOW_ALL_SCHEMES = 1 << 0;
+
+    /**
+     * Allow two slashes in the path component of the URL.
+     */
+    public static final long ALLOW_2_SLASHES = 1 << 1;
+
+    /**
+     * Enabling this options disallows any URL fragments.
+     */
+    public static final long NO_FRAGMENTS = 1 << 2;
+
+    /**
+     * Allow local URLs, such as http://localhost/ or http://machine/ .
+     * This enables a broad-brush check, for complex local machine name
+     *  validation requirements you should create your validator with
+     *  a {@link RegexValidator} instead ({@link #UrlValidator(RegexValidator, long)})
+     */
+    public static final long ALLOW_LOCAL_URLS = 1 << 3;
+
+    /**
+     * This expression derived/taken from the BNF for URI (RFC2396).
+     */
+    private static final String URL_REGEX =
+            "^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?";
+    //        12            3  4          5       6   7        8 9
+    private static final Pattern URL_PATTERN = Pattern.compile(URL_REGEX);
+
+    /**
+     * Schema/Protocol (ie. http:, ftp:, file:, etc).
+     */
+    private static final int PARSE_URL_SCHEME = 2;
+
+    /**
+     * Includes hostname/ip and port number.
+     */
+    private static final int PARSE_URL_AUTHORITY = 4;
+
+    private static final int PARSE_URL_PATH = 5;
+
+    private static final int PARSE_URL_QUERY = 7;
+
+    private static final int PARSE_URL_FRAGMENT = 9;
+
+    /**
+     * Protocol scheme (e.g. http, ftp, https).
+     */
+    private static final String SCHEME_REGEX = "^\\p{Alpha}[\\p{Alnum}\\+\\-\\.]*";
+    private static final Pattern SCHEME_PATTERN = Pattern.compile(SCHEME_REGEX);
+
+    // Drop numeric, and  "+-." for now
+    // TODO does not allow for optional userinfo. 
+    // Validation of character set is done by isValidAuthority
+    private static final String AUTHORITY_CHARS_REGEX = "\\p{Alnum}\\-\\.";
+
+    private static final String AUTHORITY_REGEX =
+            "^([" + AUTHORITY_CHARS_REGEX + "]*)(:\\d*)?(.*)?";
+    //        1                                 2       3
+    private static final Pattern AUTHORITY_PATTERN = Pattern.compile(AUTHORITY_REGEX);
+
+    private static final int PARSE_AUTHORITY_HOST_IP = 1;
+
+    private static final int PARSE_AUTHORITY_PORT = 2;
+
+    /**
+     * Should always be empty. The code currently allows spaces.
+     */
+    private static final int PARSE_AUTHORITY_EXTRA = 3;
+
+    private static final String PATH_REGEX = "^(/[-\\w:@&?=+,.!/~*'%$_;\\(\\)]*)?$";
+    private static final Pattern PATH_PATTERN = Pattern.compile(PATH_REGEX);
+
+    private static final String QUERY_REGEX = "^(.*)$";
+    private static final Pattern QUERY_PATTERN = Pattern.compile(QUERY_REGEX);
+
+    private static final String PORT_REGEX = "^:(\\d{1,5})$";
+    private static final Pattern PORT_PATTERN = Pattern.compile(PORT_REGEX);
+
+    /**
+     * Holds the set of current validation options.
+     */
+    private final long options;
+
+    /**
+     * The set of schemes that are allowed to be in a URL.
+     */
+    private final Set allowedSchemes; // Must be lower-case
+
+    /**
+     * Regular expressions used to manually validate authorities if IANA
+     * domain name validation isn't desired.
+     */
+    private final RegexValidator authorityValidator;
+
+    /**
+     * If no schemes are provided, default to this set.
+     */
+    private static final String[] DEFAULT_SCHEMES = {"http", "https", "ftp"}; // Must be lower-case
+
+    /**
+     * Singleton instance of this class with default schemes and options.
+     */
+    private static final UrlValidator DEFAULT_URL_VALIDATOR = new UrlValidator();
+
+    /**
+     * Returns the singleton instance of this class with default schemes and options.
+     * @return singleton instance with default schemes and options
+     */
+    public static UrlValidator getInstance() {
+        return DEFAULT_URL_VALIDATOR;
+    }
+
+    /**
+     * Create a UrlValidator with default properties.
+     */
+    public UrlValidator() {
+        this(null);
+    }
+
+    /**
+     * Behavior of validation is modified by passing in several strings options:
+     * @param schemes Pass in one or more url schemes to consider valid, passing in
+     *        a null will default to "http,https,ftp" being valid.
+     *        If a non-null schemes is specified then all valid schemes must
+     *        be specified. Setting the ALLOW_ALL_SCHEMES option will
+     *        ignore the contents of schemes.
+     */
+    public UrlValidator(String[] schemes) {
+        this(schemes, 0L);
+    }
+
+    /**
+     * Initialize a UrlValidator with the given validation options.
+     * @param options The options should be set using the public constants declared in
+     * this class.  To set multiple options you simply add them together.  For example,
+     * ALLOW_2_SLASHES + NO_FRAGMENTS enables both of those options.
+     */
+    public UrlValidator(long options) {
+        this(null, null, options);
+    }
+
+    /**
+     * Behavior of validation is modified by passing in options:
+     * @param schemes The set of valid schemes. Ignored if the ALLOW_ALL_SCHEMES option is set.
+     * @param options The options should be set using the public constants declared in
+     * this class.  To set multiple options you simply add them together.  For example,
+     * ALLOW_2_SLASHES + NO_FRAGMENTS enables both of those options.
+     */
+    public UrlValidator(String[] schemes, long options) {
+        this(schemes, null, options);
+    }
+
+    /**
+     * Initialize a UrlValidator with the given validation options.
+     * @param authorityValidator Regular expression validator used to validate the authority part
+     * This allows the user to override the standard set of domains.
+     * @param options Validation options. Set using the public constants of this class.
+     * To set multiple options, simply add them together:
+     * <p><code>ALLOW_2_SLASHES + NO_FRAGMENTS</code></p>
+     * enables both of those options.
+     */
+    public UrlValidator(RegexValidator authorityValidator, long options) {
+        this(null, authorityValidator, options);
+    }
+
+    /**
+     * Customizable constructor. Validation behavior is modifed by passing in options.
+     * @param schemes the set of valid schemes. Ignored if the ALLOW_ALL_SCHEMES option is set.
+     * @param authorityValidator Regular expression validator used to validate the authority part
+     * @param options Validation options. Set using the public constants of this class.
+     * To set multiple options, simply add them together:
+     * <p><code>ALLOW_2_SLASHES + NO_FRAGMENTS</code></p>
+     * enables both of those options.
+     */
+    public UrlValidator(String[] schemes, RegexValidator authorityValidator, long options) {
+        this.options = options;
+
+        if (isOn(ALLOW_ALL_SCHEMES)) {
+            allowedSchemes = Collections.EMPTY_SET;
+        } else {
+            if (schemes == null) {
+                schemes = DEFAULT_SCHEMES;
+            }
+            allowedSchemes = new HashSet(schemes.length);
+            for(int i=0; i < schemes.length; i++) {
+                allowedSchemes.add(schemes[i].toLowerCase(Locale.ENGLISH));
+            }
+        }
+
+        this.authorityValidator = authorityValidator;
+    }
+
+    /**
+     * <p>Checks if a field has a valid url address.</p>
+     *
+     * Note that the method calls #isValidAuthority()
+     * which checks that the domain is valid.
+     *
+     * @param value The value validation is being performed on.  A <code>null</code>
+     * value is considered invalid.
+     * @return true if the url is valid.
+     */
+    public boolean isValid(String value) {
+        if (value == null) {
+            return false;
+        }
+
+        // Check the whole url address structure
+        Matcher urlMatcher = URL_PATTERN.matcher(value);
+        if (!urlMatcher.matches()) {
+            return false;
+        }
+
+        String scheme = urlMatcher.group(PARSE_URL_SCHEME);
+        if (!isValidScheme(scheme)) {
+            return false;
+        }
+
+        String authority = urlMatcher.group(PARSE_URL_AUTHORITY);
+        if ("file".equals(scheme) && "".equals(authority)) {
+            // Special case - file: allows an empty authority
+        } else {
+            // Validate the authority
+            if (!isValidAuthority(authority)) {
+                return false;
+            }
+        }
+
+        if (!isValidPath(urlMatcher.group(PARSE_URL_PATH))) {
+            return false;
+        }
+
+        if (!isValidQuery(urlMatcher.group(PARSE_URL_QUERY))) {
+            return false;
+        }
+
+        if (!isValidFragment(urlMatcher.group(PARSE_URL_FRAGMENT))) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Validate scheme. If schemes[] was initialized to a non null,
+     * then only those schemes are allowed.
+     * Otherwise the default schemes are "http", "https", "ftp".
+     * Matching is case-blind.
+     * @param scheme The scheme to validate.  A <code>null</code> value is considered
+     * invalid.
+     * @return true if valid.
+     */
+    protected boolean isValidScheme(String scheme) {
+        if (scheme == null) {
+            return false;
+        }
+
+        // TODO could be removed if external schemes were checked in the ctor before being stored
+        if (!SCHEME_PATTERN.matcher(scheme).matches()) {
+            return false;
+        }
+
+        if (isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme.toLowerCase(Locale.ENGLISH))) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Returns true if the authority is properly formatted.  An authority is the combination
+     * of hostname and port.  A <code>null</code> authority value is considered invalid.
+     * Note: this implementation validates the domain unless a RegexValidator was provided.
+     * If a RegexValidator was supplied and it matches, then the authority is regarded
+     * as valid with no further checks, otherwise the method checks against the
+     * AUTHORITY_PATTERN and the DomainValidator (ALLOW_LOCAL_URLS)
+     * @param authority Authority value to validate, alllows IDN
+     * @return true if authority (hostname and port) is valid.
+     */
+    protected boolean isValidAuthority(String authority) {
+        if (authority == null) {
+            return false;
+        }
+
+        // check manual authority validation if specified
+        if (authorityValidator != null && authorityValidator.isValid(authority)) {
+            return true;
+        }
+        // convert to ASCII if possible
+        final String authorityASCII = DomainValidator.unicodeToASCII(authority);
+
+        Matcher authorityMatcher = AUTHORITY_PATTERN.matcher(authorityASCII);
+        if (!authorityMatcher.matches()) {
+            return false;
+        }
+
+        String hostLocation = authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);
+        // check if authority is hostname or IP address:
+        // try a hostname first since that's much more likely
+        DomainValidator domainValidator = DomainValidator.getInstance(isOn(ALLOW_LOCAL_URLS));
+        if (!domainValidator.isValid(hostLocation)) {
+            // try an IP address
+            InetAddressValidator inetAddressValidator =
+                InetAddressValidator.getInstance();
+            if (!inetAddressValidator.isValid(hostLocation)) {
+                // isn't either one, so the URL is invalid
+                return false;
+            }
+        }
+
+        String port = authorityMatcher.group(PARSE_AUTHORITY_PORT);
+        if (port != null && !PORT_PATTERN.matcher(port).matches()) {
+            return false;
+        }
+
+        String extra = authorityMatcher.group(PARSE_AUTHORITY_EXTRA);
+        if (extra != null && extra.trim().length() > 0){
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Returns true if the path is valid.  A <code>null</code> value is considered invalid.
+     * @param path Path value to validate.
+     * @return true if path is valid.
+     */
+    protected boolean isValidPath(String path) {
+        if (path == null) {
+            return false;
+        }
+
+        if (!PATH_PATTERN.matcher(path).matches()) {
+            return false;
+        }
+
+        int slash2Count = countToken("//", path);
+        if (isOff(ALLOW_2_SLASHES) && (slash2Count > 0)) {
+            return false;
+        }
+
+        int slashCount = countToken("/", path);
+        int dot2Count = countToken("..", path);
+        if (dot2Count > 0 && (slashCount - slash2Count - 1) <= dot2Count) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Returns true if the query is null or it's a properly formatted query string.
+     * @param query Query value to validate.
+     * @return true if query is valid.
+     */
+    protected boolean isValidQuery(String query) {
+        if (query == null) {
+            return true;
+        }
+
+        return QUERY_PATTERN.matcher(query).matches();
+    }
+
+    /**
+     * Returns true if the given fragment is null or fragments are allowed.
+     * @param fragment Fragment value to validate.
+     * @return true if fragment is valid.
+     */
+    protected boolean isValidFragment(String fragment) {
+        if (fragment == null) {
+            return true;
+        }
+
+        return isOff(NO_FRAGMENTS);
+    }
+
+    /**
+     * Returns the number of times the token appears in the target.
+     * @param token Token value to be counted.
+     * @param target Target value to count tokens in.
+     * @return the number of tokens.
+     */
+    protected int countToken(String token, String target) {
+        int tokenIndex = 0;
+        int count = 0;
+        while (tokenIndex != -1) {
+            tokenIndex = target.indexOf(token, tokenIndex);
+            if (tokenIndex > -1) {
+                tokenIndex++;
+                count++;
+            }
+        }
+        return count;
+    }
+
+    /**
+     * Tests whether the given flag is on.  If the flag is not a power of 2
+     * (ie. 3) this tests whether the combination of flags is on.
+     *
+     * @param flag Flag value to check.
+     *
+     * @return whether the specified flag value is on.
+     */
+    private boolean isOn(long flag) {
+        return (options & flag) > 0;
+    }
+
+    /**
+     * Tests whether the given flag is off.  If the flag is not a power of 2
+     * (ie. 3) this tests whether the combination of flags is off.
+     *
+     * @param flag Flag value to check.
+     *
+     * @return whether the specified flag value is off.
+     */
+    private boolean isOff(long flag) {
+        return (options & flag) == 0;
+    }
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/checkdigit/CheckDigit.java b/saripaar/src/main/java/commons/validator/routines/checkdigit/CheckDigit.java
new file mode 100644
index 0000000..5c0ceb8
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/checkdigit/CheckDigit.java
@@ -0,0 +1,71 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines.checkdigit;
+
+/**
+ * <b>Check Digit</b> calculation and validation.
+ * <p>
+ * The logic for validating check digits has previously been
+ * embedded within the logic for specific code validation, which
+ * includes other validations such as verifying the format
+ * or length of a code. {@link CheckDigit} provides for separating out
+ * the check digit calculation logic enabling it to be more easily
+ * tested and reused.
+ * </p>
+ * <p>
+ * Although Commons Validator is primarily concerned with validation,
+ * {@link CheckDigit} also defines behaviour for calculating/generating check
+ * digits, since it makes sense that users will want to (re-)use the
+ * same logic for both. The {@link commons.validator.routines.ISBNValidator}
+ * makes specific use of this feature by providing the facility to validate ISBN-10 codes
+ * and then convert them to the new ISBN-13 standard.
+ * </p>
+ * <p>
+ * CheckDigit is used by the new generic @link CodeValidator} implementation.
+ * </p>
+ *
+ * <h3>Implementations</h3>
+ * See the 
+ * <a href="package-summary.html">Package Summary</a> for a full
+ * list of implementations provided within Commons Validator.
+ *
+ * @see commons.validator.routines.CodeValidator
+ * @version $Revision$
+ * @since Validator 1.4
+ */
+public interface CheckDigit {
+
+    /**
+     * Calculates the <i>Check Digit</i> for a code.
+     *
+     * @param code The code to calculate the Check Digit for.
+     * The string must not include the check digit
+     * @return The calculated Check Digit
+     * @throws CheckDigitException if an error occurs.
+     */
+    String calculate(String code) throws CheckDigitException;
+
+    /**
+     * Validates the check digit for the code.
+     *
+     * @param code The code to validate, the string must include the check digit.
+     * @return <code>true</code> if the check digit is valid, otherwise
+     * <code>false</code>.
+     */
+    boolean isValid(String code);
+
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/checkdigit/CheckDigitException.java b/saripaar/src/main/java/commons/validator/routines/checkdigit/CheckDigitException.java
new file mode 100644
index 0000000..5007b82
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/checkdigit/CheckDigitException.java
@@ -0,0 +1,54 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines.checkdigit;
+
+/**
+ * Check Digit calculation/validation error.
+ *
+ * @since Validator 1.4
+ */
+public class CheckDigitException extends Exception {
+
+    private static final long serialVersionUID = -3519894732624685477L;
+
+    /**
+     * Construct an Exception with no message.
+     */
+    public CheckDigitException() {
+    }
+
+    /**
+     * Construct an Exception with a message.
+     *
+     * @param msg The error message.
+     */
+    public CheckDigitException(String msg) {
+        super(msg);
+    }
+
+    /**
+     * Construct an Exception with a message and
+     * the underlying cause.
+     *
+     * @param msg The error message.
+     * @param cause The underlying cause of the error
+     */
+    public CheckDigitException(String msg, Throwable cause) {
+        super(msg, cause);
+    }
+
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/checkdigit/EAN13CheckDigit.java b/saripaar/src/main/java/commons/validator/routines/checkdigit/EAN13CheckDigit.java
new file mode 100644
index 0000000..bc895c0
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/checkdigit/EAN13CheckDigit.java
@@ -0,0 +1,77 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines.checkdigit;
+
+/**
+ * Modulus 10 <b>EAN-13</b> / <b>UPC</b> / <b>ISBN-13</b> Check Digit
+ * calculation/validation.
+ * <p>
+ * Check digit calculation is based on <i>modulus 10</i> with digits in
+ * an <i>odd</i> position (from right to left) being weighted 1 and <i>even</i>
+ * position digits being weighted 3.
+ * <p>
+ * For further information see:
+ * <ul>
+ *   <li>EAN-13 - see
+ *       <a href="http://en.wikipedia.org/wiki/European_Article_Number">Wikipedia -
+ *       European Article Number</a>.</li>
+ *   <li>UPC - see
+ *       <a href="http://en.wikipedia.org/wiki/Universal_Product_Code">Wikipedia -
+ *       Universal Product Code</a>.</li>
+ *   <li>ISBN-13 - see
+ *       <a href="http://en.wikipedia.org/wiki/ISBN">Wikipedia - International
+ *       Standard Book Number (ISBN)</a>.</li>
+ * </ul>
+ *
+ * @version $Revision$
+ * @since Validator 1.4
+ */
+public final class EAN13CheckDigit extends ModulusCheckDigit {
+
+    private static final long serialVersionUID = 1726347093230424107L;
+
+    /** Singleton EAN-13 Check Digit instance */
+    public static final CheckDigit EAN13_CHECK_DIGIT = new EAN13CheckDigit();
+
+    /** weighting given to digits depending on their right position */
+    private static final int[] POSITION_WEIGHT = new int[] {3, 1};
+
+    /**
+     * Construct a modulus 10 Check Digit routine for EAN/UPC.
+     */
+    public EAN13CheckDigit() {
+        super(10);
+    }
+
+    /**
+     * <p>Calculates the <i>weighted</i> value of a character in the
+     * code at a specified position.</p>
+     *
+     * <p>For EAN-13 (from right to left) <b>odd</b> digits are weighted
+     * with a factor of <b>one</b> and <b>even</b> digits with a factor
+     * of <b>three</b>.</p>
+     *
+     * @param charValue The numeric value of the character.
+     * @param leftPos The position of the character in the code, counting from left to right
+     * @param rightPos The positionof the character in the code, counting from right to left
+     * @return The weighted value of the character.
+     */
+    protected int weightedValue(int charValue, int leftPos, int rightPos) {
+        int weight = POSITION_WEIGHT[rightPos % 2];
+        return charValue * weight;
+    }
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/checkdigit/ISBN10CheckDigit.java b/saripaar/src/main/java/commons/validator/routines/checkdigit/ISBN10CheckDigit.java
new file mode 100644
index 0000000..ce9564c
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/checkdigit/ISBN10CheckDigit.java
@@ -0,0 +1,112 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines.checkdigit;
+
+/**
+ * Modulus 11 <b>ISBN-10</b> Check Digit calculation/validation.
+ * <p>
+ * ISBN-10 Numbers are a numeric code except for the last (check) digit
+ * which can have a value of "X".
+ * <p>
+ * Check digit calculation is based on <i>modulus 11</i> with digits being weighted
+ * based by their position, from right to left  with the first digit being weighted
+ * 1, the second 2 and so on. If the check digit is calculated as "10" it is converted
+ * to "X".
+ * <p>
+ * <b>N.B.</b> From 1st January 2007 the book industry will start to use a new 13 digit
+ * ISBN number (rather than this 10 digit ISBN number) which uses the EAN-13 / UPC
+ * (see {@link EAN13CheckDigit}) standard.
+ * <p>
+ * For further information see:
+ * <ul>
+ *   <li><a href="http://en.wikipedia.org/wiki/ISBN">Wikipedia - International
+ *       Standard Book Number (ISBN)</a>.</li>
+ *   <li><a href="http://www.isbn.org/standards/home/isbn/transition.asp">ISBN-13
+ *       Transition details</a>.</li>
+ * </ul>
+ *
+ * @version $Revision$
+ * @since Validator 1.4
+ */
+public final class ISBN10CheckDigit extends ModulusCheckDigit {
+
+    private static final long serialVersionUID = 8000855044504864964L;
+
+    /** Singleton ISBN-10 Check Digit instance */
+    public static final CheckDigit ISBN10_CHECK_DIGIT = new ISBN10CheckDigit();
+
+    /**
+     * Construct a modulus 11 Check Digit routine for ISBN-10.
+     */
+    public ISBN10CheckDigit() {
+        super(11);
+    }
+
+    /**
+     * Calculates the <i>weighted</i> value of a charcter in the
+     * code at a specified position.
+     *
+     * <p>For ISBN-10 (from right to left) digits are weighted
+     * by their position.</p>
+     *
+     * @param charValue The numeric value of the character.
+     * @param leftPos The position of the character in the code, counting from left to right
+     * @param rightPos The positionof the character in the code, counting from right to left
+     * @return The weighted value of the character.
+     */
+    protected int weightedValue(int charValue, int leftPos, int rightPos) {
+        return charValue * rightPos;
+    }
+
+    /**
+     * <p>Convert a character at a specified position to an
+     * integer value.</p>
+     *
+     * <p>Character 'X' check digit converted to 10.</p>
+     *
+     * @param character The character to convert.
+     * @param leftPos The position of the character in the code, counting from left to right
+     * @param rightPos The position of the character in the code, counting from right to left
+     * @return The integer value of the character.
+     * @throws CheckDigitException if an error occurs.
+     */
+    protected int toInt(char character, int leftPos, int rightPos)
+            throws CheckDigitException {
+        if (rightPos == 1 && character == 'X') {
+            return 10;
+        }
+        return super.toInt(character, leftPos, rightPos);
+    }
+
+    /**
+     * <p>Convert an integer value to a character at a specified position.</p>
+     *
+     * <p>Value '10' for position 1 (check digit) converted to 'X'.</p>
+     *
+     * @param charValue The integer value of the character.
+     * @return The converted character.
+     * @throws CheckDigitException if an error occurs.
+     */
+    protected String toCheckDigit(int charValue)
+            throws CheckDigitException {
+        if (charValue == 10) {
+            return "X";
+        }
+        return super.toCheckDigit(charValue);
+    }
+
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/checkdigit/LuhnCheckDigit.java b/saripaar/src/main/java/commons/validator/routines/checkdigit/LuhnCheckDigit.java
new file mode 100644
index 0000000..dffdc51
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/checkdigit/LuhnCheckDigit.java
@@ -0,0 +1,75 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines.checkdigit;
+
+/**
+ * Modulus 10 <b>Luhn</b> Check Digit calculation/validation.
+ *
+ * Luhn check digits are used, for example, by:
+ * <ul>
+ *    <li><a href="http://en.wikipedia.org/wiki/Credit_card">Credit Card Numbers</a></li>
+ *    <li><a href="http://en.wikipedia.org/wiki/IMEI">IMEI Numbers</a> - International
+ *        Mobile Equipment Identity Numbers</li>
+ * </ul>
+ * Check digit calculation is based on <i>modulus 10</i> with digits in
+ * an <i>odd</i> position (from right to left) being weighted 1 and <i>even</i>
+ * position digits being weighted 2 (weighted values greater than 9 have 9 subtracted).
+ *
+ * <p>
+ * See <a href="http://en.wikipedia.org/wiki/Luhn_algorithm">Wikipedia</a>
+ * for more details.
+ * </p>
+ *
+ * @version $Revision$
+ * @since Validator 1.4
+ */
+public final class LuhnCheckDigit extends ModulusCheckDigit {
+
+    private static final long serialVersionUID = -2976900113942875999L;
+
+    /** Singleton Luhn Check Digit instance */
+    public static final CheckDigit LUHN_CHECK_DIGIT = new LuhnCheckDigit();
+
+    /** weighting given to digits depending on their right position */
+    private static final int[] POSITION_WEIGHT = new int[] {2, 1};
+
+    /**
+     * Construct a modulus 10 Luhn Check Digit routine.
+     */
+    public LuhnCheckDigit() {
+        super(10);
+    }
+
+    /**
+     * <p>Calculates the <i>weighted</i> value of a charcter in the
+     * code at a specified position.</p>
+     *
+     * <p>For Luhn (from right to left) <b>odd</b> digits are weighted
+     * with a factor of <b>one</b> and <b>even</b> digits with a factor
+     * of <b>two</b>. Weighted values &gt; 9, have 9 subtracted</p>
+     *
+     * @param charValue The numeric value of the character.
+     * @param leftPos The position of the character in the code, counting from left to right
+     * @param rightPos The positionof the character in the code, counting from right to left
+     * @return The weighted value of the character.
+     */
+    protected int weightedValue(int charValue, int leftPos, int rightPos) {
+        int weight = POSITION_WEIGHT[rightPos % 2];
+        int weightedValue = charValue * weight;
+        return weightedValue > 9 ? (weightedValue - 9) : weightedValue;
+    }
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/checkdigit/ModulusCheckDigit.java b/saripaar/src/main/java/commons/validator/routines/checkdigit/ModulusCheckDigit.java
new file mode 100644
index 0000000..7e386e7
--- /dev/null
+++ b/saripaar/src/main/java/commons/validator/routines/checkdigit/ModulusCheckDigit.java
@@ -0,0 +1,202 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package commons.validator.routines.checkdigit;
+
+import java.io.Serializable;
+
+/**
+ * Abstract <b>Modulus</b> Check digit calculation/validation.
+ * <p>
+ * Provides a <i>base</i> class for building <i>modulus</i> Check
+ * Digit routines.
+ * <p>
+ * This implementation only handles <i>single-digit numeric</i> codes, such as
+ * <b>EAN-13</b>. For <i>alphanumeric</i> codes such as <b>EAN-128</b> you
+ * will need to implement/override the <code>toInt()</code> and
+ * <code>toChar()</code> methods.
+ * <p>
+ *
+ * @version $Revision$
+ * @since Validator 1.4
+ */
+public abstract class ModulusCheckDigit implements CheckDigit, Serializable {
+
+    private static final long serialVersionUID = 2948962251251528941L;
+
+    // N.B. The modulus can be > 10 provided that the implementing class overrides toCheckDigit and toInt
+    // (for example as in ISBN10CheckDigit)
+    private final int modulus;
+
+    /**
+     * Construct a {@link CheckDigit} routine for a specified modulus.
+     *
+     * @param modulus The modulus value to use for the check digit calculation
+     */
+    public ModulusCheckDigit(int modulus) {
+        this.modulus = modulus;
+    }
+
+    /**
+     * Return the modulus value this check digit routine is based on.
+     *
+     * @return The modulus value this check digit routine is based on
+     */
+    public int getModulus() {
+        return modulus;
+    }
+
+    /**
+     * Validate a modulus check digit for a code.
+     *
+     * @param code The code to validate
+     * @return <code>true</code> if the check digit is valid, otherwise
+     * <code>false</code>
+     */
+    public boolean isValid(String code) {
+        if (code == null || code.length() == 0) {
+            return false;
+        }
+        try {
+            int modulusResult = calculateModulus(code, true);
+            return (modulusResult == 0);
+        } catch (CheckDigitException  ex) {
+            return false;
+        }
+    }
+
+    /**
+     * Calculate a modulus <i>Check Digit</i> for a code.
+     *
+     * @param code The code to calculate the Check Digit for
+     * @return The calculated Check Digit
+     * @throws CheckDigitException if an error occurs calculating
+     * the check digit for the specified code
+     */
+    public String calculate(String code) throws CheckDigitException {
+        if (code == null || code.length() == 0) {
+            throw new CheckDigitException("Code is missing");
+        }
+        int modulusResult = calculateModulus(code, false);
+        int charValue = (modulus - modulusResult) % modulus;
+        return toCheckDigit(charValue);
+    }
+
+    /**
+     * Calculate the modulus for a code.
+     *
+     * @param code The code to calculate the modulus for.
+     * @param includesCheckDigit Whether the code includes the Check Digit or not.
+     * @return The modulus value
+     * @throws CheckDigitException if an error occurs calculating the modulus
+     * for the specified code
+     */
+    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
+        int total = 0;
+        for (int i = 0; i < code.length(); i++) {
+            int lth = code.length() + (includesCheckDigit ? 0 : 1);
+            int leftPos  = i + 1;
+            int rightPos = lth - i;
+            int charValue = toInt(code.charAt(i), leftPos, rightPos);
+            total += weightedValue(charValue, leftPos, rightPos);
+        }
+        if (total == 0) {
+            throw new CheckDigitException("Invalid code, sum is zero");
+        }
+        return total % modulus;
+    }
+
+    /**
+     * Calculates the <i>weighted</i> value of a character in the
+     * code at a specified position.
+     * <p>
+     * Some modulus routines weight the value of a character
+     * depending on its position in the code (e.g. ISBN-10), while
+     * others use different weighting factors for odd/even positions
+     * (e.g. EAN or Luhn). Implement the appropriate mechanism
+     * required by overriding this method.
+     *
+     * @param charValue The numeric value of the character
+     * @param leftPos The position of the character in the code, counting from left to right
+     * @param rightPos The positionof the character in the code, counting from right to left
+     * @return The weighted value of the character
+     * @throws CheckDigitException if an error occurs calculating
+     * the weighted value
+     */
+    protected abstract int weightedValue(int charValue, int leftPos, int rightPos)
+            throws CheckDigitException;
+
+
+    /**
+     * Convert a character at a specified position to an integer value.
+     * <p>
+     * <b>Note:</b> this implementation only handlers numeric values
+     * For non-numeric characters, override this method to provide
+     * character--&gt;integer conversion.
+     *
+     * @param character The character to convert
+     * @param leftPos The position of the character in the code, counting from left to right (for identifiying the position in the string)
+     * @param rightPos The position of the character in the code, counting from right to left (not used here)
+     * @return The integer value of the character
+     * @throws CheckDigitException if character is non-numeric
+     */
+    protected int toInt(char character, int leftPos, int rightPos)
+            throws CheckDigitException {
+        if (Character.isDigit(character)) {
+            return Character.getNumericValue(character);
+        }
+        throw new CheckDigitException("Invalid Character[" +
+                leftPos + "] = '" + character + "'");
+    }
+
+    /**
+     * Convert an integer value to a check digit.
+     * <p>
+     * <b>Note:</b> this implementation only handles single-digit numeric values
+     * For non-numeric characters, override this method to provide
+     * integer--&gt;character conversion.
+     *
+     * @param charValue The integer value of the character
+     * @return The converted character
+     * @throws CheckDigitException if integer character value
+     * doesn't represent a numeric character
+     */
+    protected String toCheckDigit(int charValue)
+            throws CheckDigitException {
+        if (charValue >= 0 && charValue <= 9) {
+            return Integer.toString(charValue);
+        }
+        throw new CheckDigitException("Invalid Check Digit Value =" +
+                + charValue);
+    }
+
+    /**
+     * Add together the individual digits in a number.
+     *
+     * @param number The number whose digits are to be added
+     * @return The sum of the digits
+     */
+    public static int sumDigits(int number) {
+        int total = 0;
+        int todo = number;
+        while (todo > 0) {
+            total += todo % 10;
+            todo  = todo / 10;
+        }
+        return total;
+    }
+
+}
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 0000000..0d125ad
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1 @@
+include ':saripaar', ':saripaar-tests'
diff --git a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
deleted file mode 100644
index 36b86d0..0000000
--- a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
+++ /dev/null
@@ -1,297 +0,0 @@
-/*
- * Copyright (C) 2012 Mobs and Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar;
-
-import android.content.Context;
-import android.util.Log;
-import android.view.View;
-import android.widget.Checkable;
-import android.widget.Spinner;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.annotation.Checked;
-import com.mobsandgeeks.saripaar.annotation.ConfirmPassword;
-import com.mobsandgeeks.saripaar.annotation.Email;
-import com.mobsandgeeks.saripaar.annotation.IpAddress;
-import com.mobsandgeeks.saripaar.annotation.NumberRule;
-import com.mobsandgeeks.saripaar.annotation.Password;
-import com.mobsandgeeks.saripaar.annotation.Regex;
-import com.mobsandgeeks.saripaar.annotation.Required;
-import com.mobsandgeeks.saripaar.annotation.Select;
-import com.mobsandgeeks.saripaar.annotation.TextRule;
-
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Class contains {@code static} methods that return appropriate {@link Rule}s for Saripaar
- * annotations.
- *
- * @author Ragunath Jawahar <rj@mobsandgeeks.com>
- */
-class AnnotationRuleFactory {
-    // Debug
-    static final String TAG = "AnnotationToRuleConverter";
- 
-    // Constants
-    static final String WARN_TEXT = "%s - @%s can only be applied to TextView and " +
-            "its subclasses.";
-    static final String WARN_CHECKABLE = "%s - @%s can only be applied to Checkable, " +
-            "its implementations and subclasses.";
-
-    static final String WARN_SPINNER = "%s - @%s can only be applied to Spinner, " +
-            "its implementations and subclasses.";
-
-    public static Rule<?> getRule(Field field, View view, Annotation annotation) {
-        Class<?> annotationType = annotation.annotationType();
-
-        if (Checked.class.equals(annotationType)) {
-            return getCheckedRule(field, view, (Checked) annotation);
-        } else if (Required.class.equals(annotationType)) {
-            return getRequiredRule(field, view, (Required) annotation);
-        } else if (TextRule.class.equals(annotationType)) {
-            return getTextRule(field, view, (TextRule) annotation);
-        } else if (Regex.class.equals(annotationType)) {
-            return getRegexRule(field, view, (Regex) annotation);
-        } else if (NumberRule.class.equals(annotationType)) {
-            return getNumberRule(field, view, (NumberRule) annotation);
-        } else if (Password.class.equals(annotationType)) {
-            return getPasswordRule(field, view, (Password) annotation);
-        } else if (Email.class.equals(annotationType)) {
-            return getEmailRule(field, view, (Email) annotation);
-        } else if (IpAddress.class.equals(annotationType)) {
-            return getIpAddressRule(field, view, (IpAddress) annotation);
-        } else if (Select.class.equals(annotationType)) {
-            return getSelectRule(field, view, (Select) annotation);
-        }
-
-        return null;
-    }
-
-    private static Rule<Spinner> getSelectRule(Field field, View view, Select select) {
-        if (!Spinner.class.isAssignableFrom(view.getClass())) {
-            Log.w(TAG, String.format(WARN_SPINNER, field.getName(),
-                    Spinner.class.getSimpleName()));
-            return null;
-        }
-
-        int messageResId = select.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-                select.message();
-
-        int unexpectedSelection = select.defaultSelection();
-
-        return Rules.spinnerNotEq(message, unexpectedSelection);
-    }
-
-    public static Rule<?> getRule(Field field, View view, Annotation annotation, Object... params) {
-        Class<?> annotationType = annotation.annotationType();
-
-        if (ConfirmPassword.class.equals(annotationType)) {
-            TextView passwordTextView = (TextView) params[0];
-            return getConfirmPasswordRule(field, view, (ConfirmPassword) annotation,
-                    passwordTextView);
-        }
-
-        return (params == null || params.length == 0) ? getRule(field, view, annotation) : null;
-    }
-
-    private static Rule<TextView> getRequiredRule(Field field, View view, Required required) {
-        if (!TextView.class.isAssignableFrom(view.getClass())) {
-            Log.w(TAG, String.format(WARN_TEXT, field.getName(), Required.class.getSimpleName()));
-            return null;
-        }
-
-        int messageResId = required.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            required.message();
-
-        return Rules.required(message, required.trim());
-    }
-
-    private static Rule<View> getTextRule(Field field, View view, TextRule textRule) {
-        if (!TextView.class.isAssignableFrom(view.getClass())) {
-            Log.w(TAG, String.format(WARN_TEXT, field.getName(), TextRule.class.getSimpleName()));
-            return null;
-        }
-
-        List<Rule<?>> rules = new ArrayList<Rule<?>>();
-        int messageResId = textRule.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            textRule.message();
-
-        if (textRule.minLength() > 0) {
-            rules.add(Rules.minLength(null, textRule.minLength(), textRule.trim()));
-        }
-        if (textRule.maxLength() != Integer.MAX_VALUE) {
-            rules.add(Rules.maxLength(null, textRule.maxLength(), textRule.trim()));
-        }
-
-        Rule<?>[] ruleArray = new Rule<?>[rules.size()];
-        rules.toArray(ruleArray);
-
-        return Rules.and(message, ruleArray);
-    }
-
-    private static Rule<TextView> getRegexRule(Field field, View view, Regex regexRule) {
-        if (!TextView.class.isAssignableFrom(view.getClass())) {
-            Log.w(TAG, String.format(WARN_TEXT, field.getName(), Regex.class.getSimpleName()));
-            return null;
-        }
-
-        Context context = view.getContext();
-        int messageResId = regexRule.messageResId();
-        String message = messageResId != 0 ? context.getString(messageResId) : regexRule.message();
-
-        int patternResId = regexRule.patternResId();
-        String pattern = patternResId != 0 ? view.getContext().getString(patternResId) :
-            regexRule.pattern();
-
-        return Rules.regex(message, pattern, regexRule.trim());
-    }
-
-    private static Rule<View> getNumberRule(Field field, View view, NumberRule numberRule) {
-        if (!TextView.class.isAssignableFrom(view.getClass())) {
-            Log.w(TAG, String.format(WARN_TEXT, field.getName(), NumberRule.class.getSimpleName()));
-            return null;
-        } else if (numberRule.type() == null) {
-            throw new IllegalArgumentException(String.format("@%s.type() cannot be null.",
-                    NumberRule.class.getSimpleName()));
-        }
-
-        List<Rule<?>> rules = new ArrayList<Rule<?>>();
-        int messageResId = numberRule.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            numberRule.message();
-
-        switch (numberRule.type()) {
-        case INTEGER: case LONG:
-            Rules.regex(null, Rules.REGEX_INTEGER, true); break;
-        case FLOAT: case DOUBLE:
-            Rules.regex(null, Rules.REGEX_DECIMAL, true); break;
-        }
-
-        if (numberRule.lt() != Double.MIN_VALUE) {
-            String ltNumber = String.valueOf(numberRule.lt());
-            double number = Double.parseDouble(ltNumber);
-            switch (numberRule.type()) {
-            case INTEGER:   rules.add(Rules.lt(null, ((int) number)));   break;
-            case LONG:      rules.add(Rules.lt(null, ((long) number)));  break;
-            case FLOAT:     rules.add(Rules.lt(null, Float.parseFloat(ltNumber)));   break;
-            case DOUBLE:    rules.add(Rules.lt(null, Double.parseDouble(ltNumber))); break;
-            }
-        }
-        if (numberRule.gt() != Double.MAX_VALUE) {
-            String gtNumber = String.valueOf(numberRule.gt());
-            double number = Double.parseDouble(gtNumber);
-            switch (numberRule.type()) {
-            case INTEGER:   rules.add(Rules.gt(null, ((int) number)));  break;
-            case LONG:      rules.add(Rules.gt(null, ((long) number))); break;
-            case FLOAT:     rules.add(Rules.gt(null, Float.parseFloat(gtNumber)));   break;
-            case DOUBLE:    rules.add(Rules.gt(null, Double.parseDouble(gtNumber))); break;
-            }
-        }
-        if (numberRule.eq() != Double.MAX_VALUE) {
-            String eqNumber = String.valueOf(numberRule.eq());
-            double number = Double.parseDouble(eqNumber);
-            switch (numberRule.type()) {
-            case INTEGER:   rules.add(Rules.eq(null, ((int) number)));  break;
-            case LONG:      rules.add(Rules.eq(null, ((long) number))); break;
-            case FLOAT:     rules.add(Rules.eq(null, Float.parseFloat(eqNumber)));   break;
-            case DOUBLE:    rules.add(Rules.eq(null, Double.parseDouble(eqNumber))); break;
-            }
-        }
-
-        Rule<?>[] ruleArray = new Rule<?>[rules.size()];
-        rules.toArray(ruleArray);
-
-        return Rules.and(message, ruleArray);
-    }
-
-    private static Rule<TextView> getPasswordRule(Field field, View view, Password password) {
-        if (!TextView.class.isAssignableFrom(view.getClass())) {
-            Log.w(TAG, String.format(WARN_TEXT, field.getName(), Password.class.getSimpleName()));
-            return null;
-        }
-
-        int messageResId = password.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            password.message();
-
-        return Rules.required(message, false);
-    }
-
-    private static Rule<TextView> getConfirmPasswordRule(Field field, View view,
-            ConfirmPassword confirmPassword, TextView passwordTextView) {
-        if (!TextView.class.isAssignableFrom(view.getClass())) {
-            Log.w(TAG, String.format(WARN_TEXT, field.getName(),
-                    ConfirmPassword.class.getSimpleName()));
-            return null;
-        }
-
-        int messageResId = confirmPassword.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            confirmPassword.message();
-
-        return Rules.eq(message, passwordTextView);
-    }
-
-    private static Rule<View> getEmailRule(Field field, View view, Email email) {
-        if (!TextView.class.isAssignableFrom(view.getClass())) {
-            Log.w(TAG, String.format(WARN_TEXT, field.getName(), Regex.class.getSimpleName()));
-            return null;
-        }
-
-        int messageResId = email.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            email.message();
-
-        return Rules.or(message, Rules.eq(null, Rules.EMPTY_STRING),
-                Rules.regex(message, Rules.REGEX_EMAIL, true));
-    }
-
-    private static Rule<View> getIpAddressRule(Field field, View view, IpAddress ipAddress) {
-        if (!TextView.class.isAssignableFrom(view.getClass())) {
-            Log.w(TAG, String.format(WARN_TEXT, field.getName(), IpAddress.class.getSimpleName()));
-            return null;
-        }
-
-        int messageResId = ipAddress.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            ipAddress.message();
-
-        return Rules.or(message, Rules.eq(null, Rules.EMPTY_STRING),
-                Rules.regex(message, Rules.REGEX_IP_ADDRESS, true));
-    }
-
-    private static Rule<Checkable> getCheckedRule(
-            Field field, View view, Checked checked) {
-
-        if (!Checkable.class.isAssignableFrom(view.getClass())) {
-            Log.w(TAG, String.format(WARN_CHECKABLE, field.getName(),
-                    Checked.class.getSimpleName()));
-            return null;
-        }
-
-        int messageResId = checked.messageResId();
-        String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            checked.message();
-
-        return Rules.checked(message, checked.checked());
-    }
-
-}
diff --git a/src/com/mobsandgeeks/saripaar/Rule.java b/src/com/mobsandgeeks/saripaar/Rule.java
deleted file mode 100644
index 5aaca3b..0000000
--- a/src/com/mobsandgeeks/saripaar/Rule.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- * Copyright (C) 2012 Mobs and Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar;
-
-import android.view.View;
-
-/**
- * Abstract class that allows to define validation rules for {@link View}s.
- *
- * @author Ragunath Jawahar <rj@mobsandgeeks.com>
- *
- * @param <T> The {@link View} this rule is applicable for.
- */
-public abstract class Rule<T> {
-
-    private String mFailureMessage;
-
-    /**
-     * Creates a new validation Rule.
-     *
-     * @param failureMessage The failure message associated with the Rule.
-     */
-    public Rule(String failureMessage) {
-        mFailureMessage = failureMessage;
-    }
-
-    /**
-     * Returns the failure message associated with the rule.
-     *
-     * @return Returns the failure message associated with the rule
-     */
-    public String getFailureMessage() {
-        return mFailureMessage;
-    }
-
-    /**
-     * Sets the failure message for the Rule.
-     *
-     * @param failureMessage The failure message associated with the Rule.
-     */
-    public void setFailureMessage(String failureMessage) {
-        this.mFailureMessage = failureMessage;
-    }
-
-    /**
-     * Checks whether the Rule is valid for the associated {@link View}.
-     *
-     * @param view The view associated with this Rule.
-     * @return True if validation succeeds, false otherwise.
-     */
-    public abstract boolean isValid(T view);
-
-}
diff --git a/src/com/mobsandgeeks/saripaar/Rules.java b/src/com/mobsandgeeks/saripaar/Rules.java
deleted file mode 100644
index 65e3f81..0000000
--- a/src/com/mobsandgeeks/saripaar/Rules.java
+++ /dev/null
@@ -1,792 +0,0 @@
-/*
- * Copyright (C) 2012 Mobs and Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar;
-
-import android.inputmethodservice.ExtractEditText;
-import android.text.TextUtils;
-import android.view.View;
-import android.widget.AutoCompleteTextView;
-import android.widget.CheckBox;
-import android.widget.Checkable;
-import android.widget.CheckedTextView;
-import android.widget.EditText;
-import android.widget.MultiAutoCompleteTextView;
-import android.widget.RadioButton;
-import android.widget.Spinner;
-import android.widget.TextView;
-import android.widget.ToggleButton;
-
-import java.util.LinkedHashMap;
-import java.util.Set;
-
-/**
- * A built-in class with a collection of common rules. {@link TextView} references notable direct
- * and indirect subclasses that includes but not limited to {@link EditText},
- * {@link AutoCompleteTextView}, {@link ExtractEditText} and {@link MultiAutoCompleteTextView}.
- * {@link Checkable} references notable implementing classes but not limited to {@link CheckBox},
- * {@link CheckedTextView}, {@link RadioButton} and {@link ToggleButton}.
- *
- * You may use it with any custom {@link View}s you may define that extends or implements the above
- * mentioned classes and interfaces.
- *
- * @author Ragunath Jawahar <rj@mobsandgeeks.com>
- */
-public final class Rules {
-    // Constants
-    public static final String EMPTY_STRING = "";
-
-    // Regular Expressions
-    private static final String GOOD_IRI_CHAR =
-            "a-zA-Z0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF"; // android.util.Patterns.java
-    private static final String TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL =
-            "(?:"
-            + "(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])"
-            + "|(?:biz|b[abdefghijmnorstvwyz])"
-            + "|(?:cat|com|coop|c[acdfghiklmnoruvxyz])"
-            + "|d[ejkmoz]"
-            + "|(?:edu|e[cegrstu])"
-            + "|f[ijkmor]"
-            + "|(?:gov|g[abdefghilmnpqrstuwy])"
-            + "|h[kmnrtu]"
-            + "|(?:info|int|i[delmnoqrst])"
-            + "|(?:jobs|j[emop])"
-            + "|k[eghimnprwyz]"
-            + "|l[abcikrstuvy]"
-            + "|(?:mil|mobi|museum|m[acdeghklmnopqrstuvwxyz])"
-            + "|(?:name|net|n[acefgilopruz])"
-            + "|(?:org|om)"
-            + "|(?:pro|p[aefghklmnrstwy])"
-            + "|qa"
-            + "|r[eosuw]"
-            + "|s[abcdeghijklmnortuvyz]"
-            + "|(?:tel|travel|t[cdfghjklmnoprtvwz])"
-            + "|u[agksyz]"
-            + "|v[aceginu]"
-            + "|w[fs]"
-            + "|(?:xn\\-\\-0zwm56d|xn\\-\\-11b5bs3a9aj6g|xn\\-\\-80akhbyknj4f|xn\\-\\-9t4b11yi5a|xn\\-\\-deba0ad|xn\\-\\-g6w251d|xn\\-\\-hgbk6aj7f53bba|xn\\-\\-hlcj6aya9esc7a|xn\\-\\-jxalpdlp|xn\\-\\-kgbechtv|xn\\-\\-zckzah)"
-            + "|y[etu]"
-            + "|z[amw]))"; // android.util.Patterns.java
-
-    public static final String REGEX_INTEGER = "\\d+";
-
-    public static final String REGEX_DECIMAL = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
-
-    public static final String REGEX_EMAIL =
-            "[a-zA-Z0-9\\+\\.\\_\\%\\-\\+]{1,256}"
-            + "\\@[a-zA-Z0-9][a-zA-Z0-9\\-]{0,64}"
-            + "(\\.[a-zA-Z0-9][a-zA-Z0-9\\-]{0,25})+"; // android.util.Patterns.java
-
-    public static final String REGEX_IP_ADDRESS =
-            "((25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(25[0-5]|2[0-4]"
-            + "[0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]"
-            + "[0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}"
-            + "|[1-9][0-9]|[0-9]))"; // android.util.Patterns.java
-
-    public static final String REGEX_WEB_URL =
-            "((?:(http|https|Http|Https|rtsp|Rtsp):\\/\\/(?:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)"
-            + "\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,64}(?:\\:(?:[a-zA-Z0-9\\$\\-\\_"
-            + "\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,25})?\\@)?)?"
-            + "((?:(?:[" + GOOD_IRI_CHAR + "][" + GOOD_IRI_CHAR + "\\-]{0,64}\\.)+"   // named host
-            + TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL
-            + "|(?:(?:25[0-5]|2[0-4]" // or ip address
-            + "[0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(?:25[0-5]|2[0-4][0-9]"
-            + "|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1]"
-            + "[0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}"
-            + "|[1-9][0-9]|[0-9])))"
-            + "(?:\\:\\d{1,5})?)" // plus option port number
-            + "(\\/(?:(?:[" + GOOD_IRI_CHAR + "\\;\\/\\?\\:\\@\\&\\=\\#\\~"  // plus option query params
-            + "\\-\\.\\+\\!\\*\\'\\(\\)\\,\\_])|(?:\\%[a-fA-F0-9]{2}))*)?"
-            + "(?:\\b|$)"; // android.util.Patterns.java
-
-    /**
-     * The classical required {@link Rule}. Checks if the {@link TextView} or its subclass
-     * {@link View}'s displayed text is not empty.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param trimInput Specifies whether to trim the text returned by {@code getText()}.
-     *
-     * @return True if the {@link View} is not empty, false otherwise. The return value is affected
-     * by the {@code trimInput} parameter.
-     */
-    public static Rule<TextView> required(final String failureMessage, final boolean trimInput) {
-        return new Rule<TextView>(failureMessage) {
-
-            @Override
-            public boolean isValid(TextView textView) {
-                return !TextUtils.isEmpty(getText(textView, trimInput));
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text matches the
-     * given regular expression.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param regex Regular expression pattern to be matched against the text returned by
-     *          {@code getText()}.
-     * @param trimInput Specifies whether to trim the text returned by {@code getText()}.
-     *
-     * @throws IllegalArgumentException If {@code regex} is {@code null}.
-     *
-     * @return True if the text matches the regular expression. The return value is affected
-     * by the {@code trimInput} parameter.
-     */
-    public static Rule<TextView> regex(final String failureMessage, final String regex, 
-            final boolean trimInput) {
-        if (regex == null) {
-            throw new IllegalArgumentException("\'regex\' cannot be null");
-        }
-
-        return new Rule<TextView>(failureMessage) {
-
-            @Override
-            public boolean isValid(TextView textView) {
-                String text = getText(textView, trimInput);
-                return text != null ? text.matches(regex) : false;
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text has at least the
-     * minimum number of characters specified by this {@link Rule}.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param minLength Minimum number of characters required in the text returned by
-     *          {@code getText()}. The returned text is affected by the {@code trimInput}
-     *          parameter.
-     * @param trimInput Specifies whether to trim the text returned by {@code getText()}.
-     *
-     * @return True if the text has the minimum number of characters specified, false otherwise.
-     */
-    public static Rule<TextView> minLength(final String failureMessage, final int minLength,
-            final boolean trimInput) {
-
-        return new Rule<TextView>(failureMessage) {
-
-            @Override
-            public boolean isValid(TextView view) {
-                String text = getText(view, trimInput);
-                return text != null ? text.length() >= minLength : false;
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text's length is less
-     * than or equal to the maximum number of characters specified by this {@link Rule}.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param maxLength Maximum number of characters allowed in the text returned by
-     *          {@code getText()}. The returned text is affected by the {@code trimInput}
-     *          parameter.
-     * @param trimInput Specifies whether to trim the text returned by {@code getText()}.
-     *
-     * @return True if the text length is less than or equal to the maximum number of characters
-     *          specified, false otherwise.
-     */
-    public static Rule<TextView> maxLength(final String failureMessage, final int maxLength,
-            final boolean trimInput) {
-
-        return new Rule<TextView>(failureMessage) {
-
-            @Override
-            public boolean isValid(TextView view) {
-                String text = getText(view, trimInput);
-                return text != null ? text.length() <= maxLength : false;
-            }
-        };
-    }
-
-    /**
-     * Checks if the contents of two {@link TextView}s are equal. Ideal for password and confirm
-     * password.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param anotherTextView The {@link TextView} whose contents have to be checked against the
-     *          {@link TextView} that is being validated.
-     *
-     * @throws IllegalArgumentException If {@code anotherTextView} is {@code null}.
-     *
-     * @return True if both the {@link TextView} contents are equal.
-     */
-    public static Rule<TextView> eq(final String failureMessage, final TextView anotherTextView) {
-        if (anotherTextView == null) {
-            throw new IllegalArgumentException("\'anotherTextView\' cannot be null");
-        }
-
-        return new Rule<TextView>(failureMessage) {
-
-            @Override
-            public boolean isValid(TextView view) {
-                return view.getText().toString().equals(anotherTextView.getText().toString());
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text value equals
-     * the given {@link String} value.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param expectedString {@link String} value to be compared with the text returned by
-     *          {@code getText()}. {@code null} is treated as empty {@link String}.
-     *
-     * @return True if the text matches the {@code expectedString} value, false otherwise.
-     */
-    public static Rule<TextView> eq(final String failureMessage, final String expectedString) {
-        return eq(failureMessage, expectedString, false, false);
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text value equals
-     * the given {@link String} value.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param expectedString {@link String} value to be compared with the text returned by
-     *          {@code getText()}. {@code null} is treated as empty {@link String}.
-     * @param ignoreCase Specifies whether the text's case differences should be ignored.
-     * @param trimInput Specifies whether to trim the text returned by {@code getText()}.
-     *
-     * @return True if the text matches the {@code expectedString} value, false otherwise. The
-     *          return value is affected by {@code ignoreCase} and {@code trimInput}
-     *          parameters.
-     */
-    public static Rule<TextView> eq(final String failureMessage, final String expectedString,
-            final boolean ignoreCase, final boolean trimInput) {
-        final String cleanString = expectedString == null ? EMPTY_STRING : expectedString;
-
-        return new Rule<TextView>(failureMessage) {
-
-            @Override
-            public boolean isValid(TextView textView) {
-                boolean valid = false;
-                String actualString = getText(textView, trimInput);
-                if (actualString != null) {
-                    valid = ignoreCase ?
-                            actualString.equalsIgnoreCase(cleanString) :
-                                actualString.equals(cleanString);
-                }
-
-                return valid;
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text value equals
-     * the specified {@code int} value.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param expectedInt {@code int} value to be compared with the text returned by
-     *          {@code getText()}.
-     *
-     * @return True if the input text is equal to the {@code expectedInt} value.
-     */
-    public static Rule<TextView> eq(final String failureMessage, final int expectedInt) {
-        return eq(failureMessage, (long) expectedInt);
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text value is
-     * greater than the specified {@code int} value.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param lesserInt {@code int} value to be compared with the text returned by
-     *          {@code getText()}.
-     *
-     * @return True if the input text is greater to the {@code expectedInt} value.
-     */
-    public static Rule<TextView> gt(final String failureMessage, final int lesserInt) {
-        return gt(failureMessage, (long) lesserInt);
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text value is less 
-     * than the specified {@code int} value.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param greaterInt {@code int} value to be compared with the text returned by
-     *          {@code getText()}.
-     *
-     * @return True if the input text is less than the {@code expectedInt} value.
-     */
-    public static Rule<TextView> lt(final String failureMessage, final int greaterInt) {
-        return lt(failureMessage, (long) greaterInt);
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text value equals
-     * the specified {@code long} value.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param expectedLong {@code long} value to be compared with the text returned by
-     *          {@code getText()}.
-     *
-     * @return True if the input text is equal to the {@code expectedLong} value.
-     */
-    public static Rule<TextView> eq(final String failureMessage, final long expectedLong) {
-        return new Rule<TextView>(failureMessage) {
-
-            @Override
-            public boolean isValid(TextView textView) {
-                boolean valid = false;
-                String actualLong = getText(textView, true);
-                if (actualLong != null) {
-                    valid = actualLong.matches(REGEX_INTEGER) ?
-                            Long.parseLong(actualLong) == expectedLong : false;
-                }
-
-                return valid;
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text value is
-     * greater than the specified {@code long} value.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param lesserLong {@code long} value to be compared with the text returned by
-     *          {@code getText()}.
-     *
-     * @return True if the input text is greater than the {@code expectedLong} value.
-     */
-    public static Rule<TextView> gt(final String failureMessage, final long lesserLong) {
-        return new Rule<TextView>(failureMessage) {
-
-            @Override
-            public boolean isValid(TextView textView) {
-                boolean valid = false;
-                String actualLong = getText(textView, true);
-                if (actualLong != null) {
-                    valid = actualLong.matches(REGEX_INTEGER) ?
-                            Long.parseLong(actualLong) > lesserLong : false;
-                }
-
-                return valid;
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text value is less
-     * than the specified {@code long} value.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param greaterLong {@code long} value to be compared with the text returned by
-     *          {@code getText()}.
-     *
-     * @return True if the input text is less than the {@code expectedLong} value.
-     */
-    public static Rule<TextView> lt(final String failureMessage, final long greaterLong) {
-        return new Rule<TextView>(failureMessage) {
-
-            @Override
-            public boolean isValid(TextView textView) {
-                boolean valid = false;
-                String actualLong = getText(textView, true);
-                if (actualLong != null) {
-                    valid = actualLong.matches(REGEX_INTEGER) ?
-                            Long.parseLong(actualLong) < greaterLong : false;
-                }
-
-                return valid;
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text value equals
-     * the specified {@code float} value.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param expectedFloat {@code float} value to be compared with the text returned by
-     *          {@code getText()}.
-     *
-     * @return True if the input text is equal to the {@code expectedFloat} value.
-     */
-    public static Rule<TextView> eq(final String failureMessage, final float expectedFloat) {
-        return new Rule<TextView>(failureMessage) {
-
-            @Override
-            public boolean isValid(TextView view) {
-                boolean valid = false;
-                String actualFloat = getText(view, true);
-                if (actualFloat != null) {
-                    valid = actualFloat.matches(REGEX_DECIMAL) ?
-                            Float.parseFloat(actualFloat) == expectedFloat : false;
-                }
-
-                return valid;
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text value is
-     * greater than the specified {@code float} value.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param lesserFloat {@code float} value to be compared with the text returned by
-     *          {@code getText()}.
-     *
-     * @return True if the input text is equal to the {@code expectedFloat} value.
-     */
-    public static Rule<TextView> gt(final String failureMessage, final float lesserFloat) {
-        return new Rule<TextView>(failureMessage) {
-
-            @Override
-            public boolean isValid(TextView view) {
-                boolean valid = false;
-                String actualFloat = getText(view, true);
-                if (actualFloat != null) {
-                    valid = actualFloat.matches(REGEX_DECIMAL) ?
-                            Float.parseFloat(actualFloat) > lesserFloat : false;
-                }
-
-                return valid;
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text value is
-     * less than the specified {@code float} value.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param greaterFloat {@code float} value to be compared with the text returned by
-     *          {@code getText()}.
-     *
-     * @return True if the input text is less than the {@code expectedFloat} value.
-     */
-    public static Rule<TextView> lt(final String failureMessage, final float greaterFloat) {
-        return new Rule<TextView>(failureMessage) {
-
-            @Override
-            public boolean isValid(TextView view) {
-                boolean valid = false;
-                String actualFloat = getText(view, true);
-                if (actualFloat != null) {
-                    valid = actualFloat.matches(REGEX_DECIMAL) ?
-                            Float.parseFloat(actualFloat) < greaterFloat : false;
-                }
-
-                return valid;
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text value equals
-     * the specified {@code double} value.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param expectedDouble {@code double} value to be compared with the text returned by
-     *          {@code getText()}.
-     *
-     * @return True if the input text is equal to the {@code expectedDouble} value.
-     */
-    public static Rule<TextView> eq(final String failureMessage, final double expectedDouble) {
-        return new Rule<TextView>(failureMessage) {
-
-            @Override
-            public boolean isValid(TextView view) {
-                boolean valid = false;
-                String actualDouble = getText(view, true);
-                if (actualDouble != null) {
-                    valid = actualDouble.matches(REGEX_DECIMAL) ?
-                            Double.parseDouble(actualDouble) == expectedDouble : false;
-                }
-
-                return valid;
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text value is
-     * greater than the specified {@code double} value.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param lesserDouble {@code double} value to be compared with the text returned by
-     *          {@code getText()}.
-     *
-     * @return True if the input text is greater than the {@code expectedDouble} value.
-     */
-    public static Rule<TextView> gt(final String failureMessage, final double lesserDouble) {
-        return new Rule<TextView>(failureMessage) {
-
-            @Override
-            public boolean isValid(TextView view) {
-                boolean valid = false;
-                String actualDouble = getText(view, true);
-                if (actualDouble != null) {
-                    valid = actualDouble.matches(REGEX_DECIMAL) ?
-                            Double.parseDouble(actualDouble) > lesserDouble : false;
-                }
-
-                return valid;
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link TextView} or its subclass {@link View}'s displayed text value is
-     * less than the specified {@code double} value.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param greaterDouble {@code double} value to be compared with the text returned by
-     *          {@code getText()}.
-     *
-     * @return True if the input text is less than the {@code expectedDouble} value.
-     */
-    public static Rule<TextView> lt(final String failureMessage, final double greaterDouble) {
-        return new Rule<TextView>(failureMessage) {
-
-            @Override
-            public boolean isValid(TextView view) {
-                boolean valid = false;
-                String actualDouble = getText(view, true);
-                if (actualDouble != null) {
-                    valid = actualDouble.matches(REGEX_DECIMAL) ?
-                            Double.parseDouble(actualDouble) < greaterDouble : false;
-                }
-
-                return valid;
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link Checkable} or its subclass {@link View}'s state is same as the state
-     * specified.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param checked The expected state of the {@link Checkable} widget.
-     *
-     * @return True if the state is same as {@code checked}.
-     */
-    public static Rule<Checkable> checked(final String failureMessage,
-            final boolean checked) {
-        return new Rule<Checkable>(failureMessage) {
-
-            @Override
-            public boolean isValid(Checkable view) {
-                return view.isChecked() == checked;
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link Spinner}'s selected item's {@link String} value (obtained by calling
-     * {@code toString()} on the selected item) equals the expected {@link String} value.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param expectedString {@link String} value to be compared with the text returned by
-     *          calling {@code toString()} on the selected {@link Spinner} item.
-     * @param ignoreCase Specifies whether the text's case differences should be ignored.
-     * @param trimInput Specifies whether to trim the String returned by {@code toString()}
-     *          on the selected item.
-     *
-     * @return True if both the {@link String} values are equal.
-     */
-    public static Rule<Spinner> spinnerEq(final String failureMessage,
-            final String expectedString, final boolean ignoreCase, final boolean trimInput) {
-
-        return new Rule<Spinner>(failureMessage) {
-
-            @Override
-            public boolean isValid(Spinner spinner) {
-                boolean equals = false;
-                Object selectedItem = spinner.getSelectedItem();
-                if (expectedString == null && selectedItem == null) {
-                    equals = true;
-                } else if (expectedString != null && selectedItem != null) {
-                    String selectedItemString = selectedItem.toString();
-                    selectedItemString = trimInput ? selectedItemString.trim() : selectedItemString;
-
-                    equals = ignoreCase ?
-                            selectedItemString.equalsIgnoreCase(expectedString) :
-                                selectedItemString.equals(expectedString);
-                }
-
-                return equals;
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link Spinner}'s selected item's position (obtained by calling
-     * {@code getSelectionItemPosition()}) equals the expected selection index.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param expectedPosition The position to be compared with the position returned by
-     *          calling {@code getSelectedItemPosition()} on the {@link Spinner}.
-     *
-     * @return True if both the {@link String} values are equal.
-     */
-    public static Rule<Spinner> spinnerEq(final String failureMessage, final int expectedPosition) {
-
-        return new Rule<Spinner>(failureMessage) {
-
-            @Override
-            public boolean isValid(Spinner spinner) {
-                return spinner.getSelectedItemPosition() == expectedPosition;
-            }
-        };
-    }
-
-    /**
-     * Checks if the {@link Spinner}'s item selection (obtained by calling
-     * {@code getSelectionItemPosition()}) is not equal to the specified selection.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param selection The unexpected selection on the {@link Spinner}.
-     *
-     * @return {@code true} if the selection is not equal to the given position, 
-     *         {@code false} otherwise. 
-     */
-    public static Rule<Spinner> spinnerNotEq(final String failureMessage, final int selection) {
-
-        return new Rule<Spinner>(failureMessage) {
-
-            @Override
-            public boolean isValid(Spinner spinner) {
-                return spinner.getSelectedItemPosition() != selection;
-            }
-        };
-    }
-
-    /**
-     * Performs an '&&' (and) operation on the given array of {@link Rules}.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param rules An array of {@link Rule}s on which the '&&' (and) operation is to be performed.
-     *
-     * @return True if all {@link Rule}s are valid.
-     */
-    public static Rule<View> and(final String failureMessage, final Rule<?>... rules) {
-        return new Rule<View>(failureMessage) {
-
-            @Override
-            public boolean isValid(View view) {
-                boolean valid = true;
-                for(Rule rule : rules) {
-                    if (rule != null) valid &= rule.isValid(view);
-                    if (!valid) break;
-                }
-
-                return valid;
-            }
-        };
-    }
-
-    /**
-     * Performs a '||' (or) operation on the given array of {@link Rules}.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param rules An array of {@link Rule}s on which the '||' (or) operation is to be performed.
-     *
-     * @return True if at least one of the {@link Rule}s is valid.
-     */
-    public static Rule<View> or(final String failureMessage, final Rule<?>... rules) {
-        return new Rule<View>(failureMessage) {
-
-            @Override
-            public boolean isValid(View view) {
-                boolean valid = false;
-                for(Rule rule : rules) {
-                    if (rule != null) valid |= rule.isValid(view);
-                    if (valid) break;
-                }
-
-                return valid;
-            }
-        };
-    }
-
-    /**
-     * Unlike the other rules, this one performs an '&&' (and) operation on several
-     * {@link View}s.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param viewsAndRules A {@link LinkedHashMap} containing rules for different {@link View}s.
-     *
-     * @return True if all {@link Rule}s are valid.
-     */
-    public static Rule<View> compositeAnd(final String failureMessage,
-            final LinkedHashMap<View, Rule<?>> viewsAndRules) {
-
-        return new Rule<View>(failureMessage) {
-
-            @Override
-            public boolean isValid(View view) {
-                boolean valid = true;
-
-                Set<View> keySet = viewsAndRules.keySet();
-                for (View viewKey : keySet) {
-                    Rule rule = viewsAndRules.get(viewKey);
-                    valid &= rule.isValid(view);
-                    if (!valid) break;
-                }
-
-                return valid;
-            }
-        };
-    }
-
-    /**
-     * Unlike the other rules, this one performs a '||' (or) operation on several
-     * {@link View}s.
-     *
-     * @param failureMessage The failure message for this {@link Rule}.
-     * @param viewsAndRules A {@link LinkedHashMap} containing rules for different {@link View}s.
-     *
-     * @return True if at least one of the {@link Rule}s is valid.
-     */
-    public static Rule<View> compositeOr(final String failureMessage,
-            final LinkedHashMap<View, Rule<?>> viewsAndRules) {
-
-        return new Rule<View>(failureMessage) {
-
-            @Override
-            public boolean isValid(View view) {
-                boolean valid = false;
-
-                Set<View> keySet = viewsAndRules.keySet();
-                for (View viewKey : keySet) {
-                    Rule rule = viewsAndRules.get(viewKey);
-                    valid |= rule.isValid(viewKey);
-                    if (valid) break;
-                }
-
-                return valid;
-            }
-        };
-    }
-
-    private static String getText(final TextView textView, final boolean trim) {
-        CharSequence text = null;
-        if (textView != null) {
-            text = textView.getText();
-            text = trim ? text.toString().trim() : text;
-        }
-
-        return text != null ? text.toString() : null;
-    }
-
-}
diff --git a/src/com/mobsandgeeks/saripaar/Validator.java b/src/com/mobsandgeeks/saripaar/Validator.java
deleted file mode 100644
index faadbb8..0000000
--- a/src/com/mobsandgeeks/saripaar/Validator.java
+++ /dev/null
@@ -1,602 +0,0 @@
-/*
- * Copyright (C) 2012 Mobs and Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar;
-
-import android.os.AsyncTask;
-import android.util.Log;
-import android.view.View;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.annotation.Checked;
-import com.mobsandgeeks.saripaar.annotation.ConfirmPassword;
-import com.mobsandgeeks.saripaar.annotation.Email;
-import com.mobsandgeeks.saripaar.annotation.IpAddress;
-import com.mobsandgeeks.saripaar.annotation.NumberRule;
-import com.mobsandgeeks.saripaar.annotation.Password;
-import com.mobsandgeeks.saripaar.annotation.Regex;
-import com.mobsandgeeks.saripaar.annotation.Required;
-import com.mobsandgeeks.saripaar.annotation.Select;
-import com.mobsandgeeks.saripaar.annotation.TextRule;
-
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-/**
- * A processor that checks all the {@link Rule}s against their {@link View}s.
- *
- * @author Ragunath Jawahar <rj@mobsandgeeks.com>
- */
-public class Validator {
-    // Debug
-    static final String TAG = "Validator";
-    static final boolean DEBUG = false;
-
-    private Object mController;
-    private boolean mAnnotationsProcessed;
-    private List<ViewRulePair> mViewsAndRules;
-    private Map<String, Object> mProperties;
-    private AsyncTask<Void, Void, ViewRulePair> mAsyncValidationTask;
-    private ValidationListener mValidationListener;
-
-    /**
-     * Private constructor. Cannot be instantiated.
-     */
-    private Validator() {
-        mAnnotationsProcessed = false;
-        mViewsAndRules = new ArrayList<Validator.ViewRulePair>();
-        mProperties = new HashMap<String, Object>();
-    }
-
-    /**
-     * Creates a new {@link Validator}.
-     *
-     * @param controller The instance that holds references to the Views that are
-     * being validated. Usually an {@code Activity} or a {@code Fragment}. Also accepts
-     * controller instances that have annotated {@code View} references.
-     */
-    public Validator(Object controller) {
-        this();
-        if (controller == null) {
-            throw new IllegalArgumentException("'controller' cannot be null");
-        }
-        mController = controller;
-    }
-
-    /**
-     * Interface definition for a callback to be invoked when {@code validate()} is called.
-     */
-    public interface ValidationListener {
-
-        /**
-         * Called when all the {@link Rule}s added to this Validator are valid.
-         */
-        public void onValidationSucceeded();
-
-        /**
-         * Called if any of the {@link Rule}s fail.
-         *
-         * @param failedView The {@link View} that did not pass validation.
-         * @param failedRule The failed {@link Rule} associated with the {@link View}.
-         */
-        public void onValidationFailed(View failedView, Rule<?> failedRule);
-    }
-
-    /**
-     * Add a {@link View} and it's associated {@link Rule} to the Validator.
-     *
-     * @param view The {@link View} to be validated.
-     * @param rule The {@link Rule} associated with the view.
-     *
-     * @throws IllegalArgumentException If {@code rule} is {@code null}.
-     */
-    public void put(View view, Rule<?> rule) {
-        if (rule == null) {
-            throw new IllegalArgumentException("'rule' cannot be null");
-        }
-
-        mViewsAndRules.add(new ViewRulePair(view, rule));
-    }
-
-    /**
-     * Convenience method for adding multiple {@link Rule}s for a single {@link View}.
-     *
-     * @param view The {@link View} to be validated.
-     * @param rules {@link List} of {@link Rule}s associated with the view.
-     *
-     * @throws IllegalArgumentException If {@code rules} is {@code null}.
-     */
-    public void put(View view, List<Rule<?>> rules) {
-        if (rules == null) {
-            throw new IllegalArgumentException("\'rules\' cannot be null");
-        }
-
-        for (Rule<?> rule : rules) {
-            put(view, rule);
-        }
-    }
-
-    /**
-     * Convenience method for adding just {@link Rule}s to the Validator.
-     *
-     * @param rule A {@link Rule}, usually composite or custom.
-     */
-    public void put(Rule<?> rule) {
-        put(null, rule);
-    }
-
-    /**
-     * Validate all the {@link Rule}s against their {@link View}s.
-     *
-     * @throws IllegalStateException If a {@link ValidationListener} is not registered.
-     */
-    public synchronized void validate() {
-        if (mValidationListener == null) {
-            throw new IllegalStateException("Set a " + ValidationListener.class.getSimpleName() +
-                    " before attempting to validate.");
-        }
-
-        ViewRulePair failedViewRulePair = validateAllRules();
-        if (failedViewRulePair == null) {
-            mValidationListener.onValidationSucceeded();
-        } else {
-            mValidationListener.onValidationFailed(failedViewRulePair.view, failedViewRulePair.rule);
-        }
-    }
-
-    /**
-     * Asynchronously validates all the {@link Rule}s against their {@link View}s. Subsequent calls
-     * to this method will cancel any pending asynchronous validations and start a new one.
-     *
-     * @throws IllegalStateException If a {@link ValidationListener} is not registered.
-     */
-    public void validateAsync() {
-        if (mValidationListener == null) {
-            throw new IllegalStateException("Set a " + ValidationListener.class.getSimpleName() +
-                    " before attempting to validate.");
-        }
-
-        // Cancel the existing task
-        if (mAsyncValidationTask != null) {
-            mAsyncValidationTask.cancel(true);
-            mAsyncValidationTask = null;
-        }
-
-        // Start a new one ;)
-        mAsyncValidationTask = new AsyncTask<Void, Void, ViewRulePair>() {
-
-            @Override
-            protected ViewRulePair doInBackground(Void... params) {
-                return validateAllRules();
-            }
-
-            @Override
-            protected void onPostExecute(ViewRulePair pair) {
-                if (pair == null) {
-                    mValidationListener.onValidationSucceeded();
-                } else {
-                    mValidationListener.onValidationFailed(pair.view, pair.rule);
-                }
-
-                mAsyncValidationTask = null;
-            }
-
-            @Override
-            protected void onCancelled() {
-                mAsyncValidationTask = null;
-            }
-        };
-
-        mAsyncValidationTask.execute((Void[]) null);
-    }
-
-    /**
-     * Used to find if the asynchronous validation task is running, useful only when you run the
-     * Validator in asynchronous mode using the {@code validateAsync} method.
-     *
-     * @return True if the asynchronous task is running, false otherwise.
-     */
-    public boolean isValidating() {
-        return mAsyncValidationTask != null &&
-                mAsyncValidationTask.getStatus() != AsyncTask.Status.FINISHED;
-    }
-
-    /**
-     * Cancels the asynchronous validation task if running, useful only when you run the
-     * Validator in asynchronous mode using the {@code validateAsync} method.
-     *
-     * @return True if the asynchronous task was cancelled.
-     */
-    public boolean cancelAsync() {
-        boolean cancelled = false;
-        if (mAsyncValidationTask != null) {
-            cancelled = mAsyncValidationTask.cancel(true);
-            mAsyncValidationTask = null;
-        }
-
-        return cancelled;
-    }
-
-    /**
-     * Returns the callback registered for this Validator.
-     *
-     * @return The callback, or null if one is not registered.
-     */
-    public ValidationListener getValidationListener() {
-        return mValidationListener;
-    }
-
-    /**
-     * Register a callback to be invoked when {@code validate()} is called.
-     *
-     * @param validationListener The callback that will run.
-     */
-    public void setValidationListener(ValidationListener validationListener) {
-        this.mValidationListener = validationListener;
-    }
-
-    /**
-     * Updates a property value if it exists, else creates a new one.
-     *
-     * @param name The property name.
-     * @param value Value of the property.
-     *
-     * @throws IllegalArgumentException If {@code name} is {@code null}.
-     */
-    public void setProperty(String name, Object value) {
-        if (name == null) {
-            throw new IllegalArgumentException("\'name\' cannot be null");
-        }
-
-        mProperties.put(name, value);
-    }
-
-    /**
-     * Retrieves the value of the given property.
-     *
-     * @param name The property name.
-     *
-     * @throws IllegalArgumentException If {@code name} is {@code null}.
-     *
-     * @return Value of the property or {@code null} if the property does not exist.
-     */
-    public Object getProperty(String name) {
-        if (name == null) {
-            throw new IllegalArgumentException("\'name\' cannot be null");
-        }
-
-        return mProperties.get(name);
-    }
-
-    /**
-     * Removes the property from this Validator.
-     *
-     * @param name The property name.
-     *
-     * @return The value of the removed property or {@code null} if the property was not found.
-     */
-    public Object removeProperty(String name) {
-        return name != null ? mProperties.remove(name) : null;
-    }
-
-    /**
-     * Checks if the specified property exists in this Validator.
-     *
-     * @param name The property name.
-     *
-     * @return True if the property exists.
-     */
-    public boolean containsProperty(String name) {
-        return name != null ? mProperties.containsKey(name) : false;
-    }
-
-    /**
-     * Removes all properties from this Validator.
-     */
-    public void removeAllProperties() {
-        mProperties.clear();
-    }
-
-    /**
-     * Removes all the rules for the matching {@link View}
-     * @param view The {@code View} whose rules must be removed.
-     */
-    public void removeRulesFor(View view) {
-        if (view == null) {
-            throw new IllegalArgumentException("'view' cannot be null");
-        }
-
-        int index = 0;
-        while (index < mViewsAndRules.size()) {
-            ViewRulePair pair = mViewsAndRules.get(index);
-            if (pair.view == view) {
-                mViewsAndRules.remove(index);
-                continue;
-            }
-
-            index++;
-        }
-    }
-
-    /**
-     * Validates all rules added to this Validator.
-     *
-     * @return {@code null} if all {@code Rule}s are valid, else returns the failed
-     *          {@code ViewRulePair}.
-     */
-    private ViewRulePair validateAllRules() {
-        if (!mAnnotationsProcessed) {
-            createRulesFromAnnotations(getSaripaarAnnotatedFields());
-            mAnnotationsProcessed = true;
-        }
-
-        if (mViewsAndRules.size() == 0) {
-            Log.i(TAG, "No rules found. Passing validation by default.");
-            return null;
-        }
-
-        ViewRulePair failedViewRulePair = null;
-        for (ViewRulePair pair : mViewsAndRules) {
-            if (pair == null) continue;
-
-            // Validate views only if they are visible and enabled
-            if (pair.view != null) {
-                if (!pair.view.isShown() || !pair.view.isEnabled()) continue;
-            }
-
-            if (!pair.rule.isValid(pair.view)) {
-                failedViewRulePair = pair;
-                break;
-            }
-        }
-
-        return failedViewRulePair;
-    }
-
-    private void createRulesFromAnnotations(List<AnnotationFieldPair> annotationFieldPairs) {
-        TextView passwordTextView = null;
-        TextView confirmPasswordTextView = null;
-
-        for (AnnotationFieldPair pair : annotationFieldPairs) {
-            // Password
-            if (pair.annotation.annotationType().equals(Password.class)) {
-                if (passwordTextView == null) {
-                    passwordTextView = (TextView) getView(pair.field);
-                } else {
-                    throw new IllegalStateException("You cannot annotate " +
-                            "two fields in the same Activity with @Password.");
-                }
-            }
-
-            // Confirm password
-            if (pair.annotation.annotationType().equals(ConfirmPassword.class)) {
-                if (passwordTextView == null) {
-                    throw new IllegalStateException("A @Password annotated field is required " +
-                            "before you can use @ConfirmPassword.");
-                } else if (confirmPasswordTextView != null) {
-                    throw new IllegalStateException("You cannot annotate " +
-                            "two fields in the same Activity with @ConfirmPassword.");
-                } else if (confirmPasswordTextView == null) {
-                    confirmPasswordTextView = (TextView) getView(pair.field);
-                }
-            }
-
-            // Others
-            ViewRulePair viewRulePair = null;
-            if (pair.annotation.annotationType().equals(ConfirmPassword.class)) {
-                viewRulePair = getViewAndRule(pair.field, pair.annotation, passwordTextView);
-            } else {
-                viewRulePair = getViewAndRule(pair.field, pair.annotation);
-            }
-            if (viewRulePair != null) {
-                if (DEBUG) {
-                    Log.d(TAG, String.format("Added @%s rule for %s.",
-                            pair.annotation.annotationType().getSimpleName(),
-                            pair.field.getName()));
-                }
-                mViewsAndRules.add(viewRulePair);
-            }
-        }
-    }
-
-    private ViewRulePair getViewAndRule(Field field, Annotation annotation, Object... params) {
-        View view = getView(field);
-        if (view == null) {
-            Log.w(TAG, String.format("Your %s - %s is null. Please check your field assignment(s).",
-                    field.getType().getSimpleName(), field.getName()));
-            return null;
-        }
-
-        Rule<?> rule = null;
-        if (params != null && params.length > 0) {
-            rule = AnnotationRuleFactory.getRule(field, view, annotation, params);
-        } else {
-            rule = AnnotationRuleFactory.getRule(field, view, annotation);
-        }
-
-        return rule != null ? new ViewRulePair(view, rule) : null;
-    }
-
-    private View getView(Field field) {
-        try {
-            field.setAccessible(true);
-            Object instance = mController;
-
-            return (View) field.get(instance);
-        } catch (IllegalArgumentException e) {
-            e.printStackTrace();
-        } catch (IllegalAccessException e) {
-            e.printStackTrace();
-        }
-        return null;
-    }
-
-    private List<AnnotationFieldPair> getSaripaarAnnotatedFields() {
-        List<AnnotationFieldPair> annotationFieldPairs = new ArrayList<AnnotationFieldPair>();
-        List<Field> fieldsWithAnnotations = getViewFieldsWithAnnotations();
-
-        for (Field field : fieldsWithAnnotations) {
-            Annotation[] annotations = field.getAnnotations();
-            for (Annotation annotation : annotations) {
-                if (isSaripaarAnnotation(annotation)) {
-                    if (DEBUG) {
-                        Log.d(TAG, String.format("%s %s is annotated with @%s",
-                                field.getType().getSimpleName(), field.getName(),
-                                annotation.annotationType().getSimpleName()));
-                    }
-                    annotationFieldPairs.add(new AnnotationFieldPair(annotation, field));
-                }
-            }
-        }
-
-        Collections.sort(annotationFieldPairs, new AnnotationFieldPairCompartor());
-
-        return annotationFieldPairs;
-    }
-
-    private List<Field> getViewFieldsWithAnnotations() {
-        List<Field> fieldsWithAnnotations = new ArrayList<Field>();
-        List<Field> viewFields = getAllViewFields();
-        for (Field field : viewFields) {
-            Annotation[] annotations = field.getAnnotations();
-            if (annotations == null || annotations.length == 0) {
-                continue;
-            }
-            fieldsWithAnnotations.add(field);
-        }
-        return fieldsWithAnnotations;
-    }
-
-    private List<Field> getAllViewFields() {
-        List<Field> viewFields = new ArrayList<Field>();
-
-        // Declared fields
-        Class<?> superClass = null;
-        if (mController != null) {
-            viewFields.addAll(getDeclaredViewFields(mController.getClass()));
-            superClass = mController.getClass().getSuperclass();
-        }
-
-        // Inherited fields
-        while (superClass != null && !superClass.equals(Object.class)) {
-            List<Field> declaredViewFields = getDeclaredViewFields(superClass);
-            if (declaredViewFields.size() > 0) {
-                viewFields.addAll(declaredViewFields);
-            }
-            superClass = superClass.getSuperclass();
-        }
-
-        return viewFields;
-    }
-
-    private List<Field> getDeclaredViewFields(Class<?> clazz) {
-        List<Field> viewFields = new ArrayList<Field>();
-        Field[] declaredFields = clazz.getDeclaredFields();
-        for (Field f : declaredFields) {
-            if (View.class.isAssignableFrom(f.getType())) {
-                viewFields.add(f);
-            }
-        }
-        return viewFields;
-    }
-
-    private boolean isSaripaarAnnotation(Annotation annotation) {
-        Class<?> annotationType = annotation.annotationType();
-        return annotationType.equals(Checked.class) ||
-                annotationType.equals(ConfirmPassword.class) ||
-                annotationType.equals(Email.class) ||
-                annotationType.equals(IpAddress.class) ||
-                annotationType.equals(NumberRule.class) ||
-                annotationType.equals(Password.class) ||
-                annotationType.equals(Regex.class) ||
-                annotationType.equals(Required.class) ||
-                annotationType.equals(Select.class) ||
-                annotationType.equals(TextRule.class);
-    }
-
-    private class ViewRulePair {
-        public View view;
-        public Rule rule;
-
-        public ViewRulePair(View view, Rule<?> rule) {
-            this.view = view;
-            this.rule = rule;
-        }
-    }
-
-    private class AnnotationFieldPair {
-        public Annotation annotation;
-        public Field field;
-
-        public AnnotationFieldPair(Annotation annotation, Field field) {
-            this.annotation = annotation;
-            this.field = field;
-        }
-    }
-
-    private class AnnotationFieldPairCompartor implements Comparator<AnnotationFieldPair> {
-
-        @Override
-        public int compare(AnnotationFieldPair lhs, AnnotationFieldPair rhs) {
-            int lhsOrder = getAnnotationOrder(lhs.annotation);
-            int rhsOrder = getAnnotationOrder(rhs.annotation);
-            return lhsOrder < rhsOrder ? -1 : lhsOrder == rhsOrder ? 0 : 1;
-        }
-
-        private int getAnnotationOrder(Annotation annotation) {
-            Class<?> annotatedClass = annotation.annotationType();
-            if (annotatedClass.equals(Checked.class)) {
-                return ((Checked) annotation).order();
-
-            } else if (annotatedClass.equals(ConfirmPassword.class)) {
-                return ((ConfirmPassword) annotation).order();
-
-            } else if (annotatedClass.equals(Email.class)) {
-                return ((Email) annotation).order();
-
-            } else if (annotatedClass.equals(IpAddress.class)) {
-                return ((IpAddress) annotation).order();
-
-            } else if (annotatedClass.equals(NumberRule.class)) {
-                return ((NumberRule) annotation).order();
-
-            } else if (annotatedClass.equals(Password.class)) {
-                return ((Password) annotation).order();
-
-            } else if (annotatedClass.equals(Regex.class)) {
-                return ((Regex) annotation).order();
-
-            } else if (annotatedClass.equals(Required.class)) {
-                return ((Required) annotation).order();
-
-            } else if (annotatedClass.equals(Select.class)) {
-                return ((Select) annotation).order();
-
-            } else if (annotatedClass.equals(TextRule.class)) {
-                return ((TextRule) annotation).order();
-
-            } else {
-                throw new IllegalArgumentException(String.format("%s is not a Saripaar annotation",
-                        annotatedClass.getName()));
-            }
-        }
-    }
-
-}
diff --git a/src/com/mobsandgeeks/saripaar/annotation/NumberRule.java b/src/com/mobsandgeeks/saripaar/annotation/NumberRule.java
deleted file mode 100644
index 3059e49..0000000
--- a/src/com/mobsandgeeks/saripaar/annotation/NumberRule.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Copyright (C) 2012 Mobs and Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.annotation;
-
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-import com.mobsandgeeks.saripaar.Rules;
-
-/**
- * Number rule annotation. Allows a specific primitive type contained in {@link NumberType}.
- * Additional options such as greater than (>), less than (<) and equals (==) are available. 
- *
- * @author Ragunath Jawahar <rj@mobsandgeeks.com>
- */
-@Target(ElementType.FIELD)
-@Retention(RetentionPolicy.RUNTIME)
-public @interface NumberRule {
-    public int order();
-    public NumberType type();
-    public double gt()          default Double.MAX_VALUE;
-    public double lt()          default Double.MIN_VALUE;
-    public double eq()          default Double.MAX_VALUE;
-    public String message()     default Rules.EMPTY_STRING;
-    public int messageResId()   default 0;
-
-    public enum NumberType {
-        INTEGER, LONG, FLOAT, DOUBLE
-    }
-}
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Regex.java b/src/com/mobsandgeeks/saripaar/annotation/Regex.java
deleted file mode 100644
index e549b3d..0000000
--- a/src/com/mobsandgeeks/saripaar/annotation/Regex.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (C) 2012 Mobs and Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.annotation;
-
-import com.mobsandgeeks.saripaar.Rules;
-
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-/**
- * Enables to specify a regular expression for the {@code EditText}.
- *
- * @author Ragunath Jawahar <rj@mobsandgeeks.com>
- */
-@Target(ElementType.FIELD)
-@Retention(RetentionPolicy.RUNTIME)
-public @interface Regex {
-    public int order();
-    public String pattern()     default ".";
-    public int patternResId()   default 0;
-    public boolean trim()       default true;
-    public String message()     default Rules.EMPTY_STRING;
-    public int messageResId()   default 0;
-}
diff --git a/src/com/mobsandgeeks/saripaar/annotation/TextRule.java b/src/com/mobsandgeeks/saripaar/annotation/TextRule.java
deleted file mode 100644
index e896a98..0000000
--- a/src/com/mobsandgeeks/saripaar/annotation/TextRule.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Copyright (C) 2012 Mobs and Geeks
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
- * except in compliance with the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
- * limitations under the License.
- */
-
-package com.mobsandgeeks.saripaar.annotation;
-
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-import com.mobsandgeeks.saripaar.Rules;
-
-/**
- * Specifies constraints such as min length, max length and trim on textual data contained
- * in {@code View}s.
- *
- * @author Ragunath Jawahar <rj@mobsandgeeks.com>
- */
-@Target(ElementType.FIELD)
-@Retention(RetentionPolicy.RUNTIME)
-public @interface TextRule {
-    public int order();
-    public int minLength()      default 0;
-    public int maxLength()      default Integer.MAX_VALUE;
-    public boolean trim()       default true;
-    public String message()     default Rules.EMPTY_STRING;
-    public int messageResId()   default 0;
-}
