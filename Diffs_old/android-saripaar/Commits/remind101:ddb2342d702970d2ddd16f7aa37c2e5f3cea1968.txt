diff --git a/build.gradle b/build.gradle
index 0fb9ba3..52629c9 100644
--- a/build.gradle
+++ b/build.gradle
@@ -24,6 +24,7 @@ android {
             manifest.srcFile 'AndroidManifest.xml'
             java.srcDirs = ['src']
         }
+        androidTest.setRoot('tests')
     }
 
 }
\ No newline at end of file
diff --git a/src/com/mobsandgeeks/saripaar/Validator.java b/src/com/mobsandgeeks/saripaar/Validator.java
index b789989..3fec2be 100644
--- a/src/com/mobsandgeeks/saripaar/Validator.java
+++ b/src/com/mobsandgeeks/saripaar/Validator.java
@@ -15,6 +15,7 @@
 package com.mobsandgeeks.saripaar;
 
 import android.annotation.TargetApi;
+import android.app.Activity;
 import android.os.AsyncTask;
 import android.os.Build;
 import android.os.Bundle;
@@ -57,7 +58,7 @@
     static final boolean DEBUG = false;
 
     private Object mController;
-    private boolean mAnnotationsProcessed;
+    private volatile boolean mAnnotationsProcessed;
     private List<ViewRulePair> validationForm = new ArrayList<ViewRulePair>();
     private List<ViewErrorKeyPair> serverValidationForm = new ArrayList<ViewErrorKeyPair>();
     private Map<String, Object> mProperties = new HashMap<String, Object>();
@@ -72,24 +73,53 @@ private Validator() {
     }
 
     @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-    public <T extends android.app.Fragment> Validator(T fragment) {
+    public <F extends android.app.Fragment> Validator(F fragment) {
         this();
         if (fragment == null) {
             throw new IllegalArgumentException("'controller' cannot be null");
         }
         mController = fragment;
-        createRulesFromAnnotations(getSaripaarAnnotatedFields());
-        mAnnotationsProcessed = true;
+        initForm();
+
     }
 
-    public <T extends Fragment> Validator(T fragment) {
+    public <F extends Fragment> Validator(F fragment) {
         this();
         if (fragment == null) {
             throw new IllegalArgumentException("'controller' cannot be null");
         }
         mController = fragment;
-        createRulesFromAnnotations(getSaripaarAnnotatedFields());
-        mAnnotationsProcessed = true;
+        initForm();
+    }
+
+    public <A extends Activity> Validator(A activity) {
+        this();
+        if (activity == null) {
+            throw new IllegalArgumentException("'controller' cannot be null");
+        }
+        mController = activity;
+        initForm();
+    }
+
+    private void initForm() {
+        new AsyncTask<Void, Void, Void>() {
+
+            @Override
+            protected void onPreExecute() {
+                mAnnotationsProcessed = false;
+            }
+
+            @Override
+            protected Void doInBackground(Void... params) {
+                createRulesFromAnnotations(getSaripaarAnnotatedFields());
+                return null;
+            }
+
+            @Override
+            protected void onPostExecute(Void aVoid) {
+                mAnnotationsProcessed = true;
+            }
+        }.execute();
     }
 
     //Bundle[{email=has already been taken}]
@@ -180,9 +210,8 @@ public synchronized void validate() {
             throw new IllegalStateException("Set a " + ValidationListener.class.getSimpleName() +
                     " before attempting to validate.");
         }
-
         List<ViewErrorPair> failedViewRulePair = validateAllRules();
-        if (failedViewRulePair != null && failedViewRulePair.size() > 0) {
+        if (failedViewRulePair != null && failedViewRulePair.size() > 0 || !mAnnotationsProcessed) {
             mValidationListener.onValidationFailed(failedViewRulePair);
         } else {
             mValidationListener.onValidationSucceeded();
diff --git a/tests/java/com/mobsandgeeks/saripaar/ValidatorTest.java b/tests/java/com/mobsandgeeks/saripaar/ValidatorTest.java
new file mode 100644
index 0000000..42c492b
--- /dev/null
+++ b/tests/java/com/mobsandgeeks/saripaar/ValidatorTest.java
@@ -0,0 +1,72 @@
+package com.mobsandgeeks.saripaar;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.test.ActivityUnitTestCase;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.annotation.Required;
+
+import java.util.List;
+
+public class ValidatorTest extends ActivityUnitTestCase<ValidatorTest.TestActivity> {
+
+    private Fragment fragment;
+    final String errorMessage = "Error";
+    private Intent intent;
+
+    public ValidatorTest() {
+        super(ValidatorTest.TestActivity.class);
+    }
+
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        intent = new Intent(getInstrumentation().getTargetContext(), TestActivity.class);
+    }
+
+    public void testRequiredAnnotation() {
+        startActivity(intent, null, null);
+        getActivity().validator.setValidationListener(new Validator.ValidationListener() {
+            @Override
+            public void onValidationSucceeded() {
+                assertTrue(true);
+            }
+
+            @Override
+            public void onValidationFailed(List<ViewErrorPair> failedResults) {
+                assertTrue(false);
+            }
+
+            @Override
+            public void onServerMappingFinish(List<ViewErrorPair> mappingResults) {
+                assertTrue(false);
+            }
+        });
+        try {
+            //Giving time for annotations to process
+            Thread.sleep(100);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+        getActivity().validator.validate();
+    }
+
+    public static class TestActivity extends Activity {
+        @Required
+        TextView textView;
+        Validator validator;
+
+        @Override
+        protected void onCreate(Bundle savedInstanceState) {
+            super.onCreate(savedInstanceState);
+            textView = new TextView(this);
+            textView.setText(null);
+            validator = new Validator(this);
+        }
+    }
+
+}
\ No newline at end of file
