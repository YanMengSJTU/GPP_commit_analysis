diff --git a/README.md b/README.md
index de33342..cbd9bad 100644
--- a/README.md
+++ b/README.md
@@ -106,13 +106,13 @@ Maven
     <dependency>
         <groupId>com.mobsandgeeks</groupId>
         <artifactId>android-saripaar</artifactId>
-        <version>2.0.2</version>
+        <version>(latest version)</version>
     </dependency>
 
 Gradle
 ---------------------
     dependencies {
-        compile 'com.mobsandgeeks:android-saripaar:2.0.2'
+        compile 'com.mobsandgeeks:android-saripaar:(latest version)'
     }
 
 Snapshots
@@ -121,7 +121,7 @@ In your `{project_base}/build.gradle` file, include the following.
 
     allprojects {
         repositories {
-            mavenCentral()
+            jcenter()
             maven {
                 url "https://oss.sonatype.org/content/repositories/snapshots/"
             }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ContextualAnnotationRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ContextualAnnotationRule.java
index f691ec7..8f65d68 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ContextualAnnotationRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ContextualAnnotationRule.java
@@ -35,8 +35,8 @@
      * @param ruleAnnotation  The rule {@link java.lang.annotation.Annotation} instance to which
      *      this rule is paired.
      */
-    protected ContextualAnnotationRule(ValidationContext validationContext,
-            RULE_ANNOTATION ruleAnnotation) {
+    protected ContextualAnnotationRule(final ValidationContext validationContext,
+            final RULE_ANNOTATION ruleAnnotation) {
         super(ruleAnnotation);
         if (validationContext == null) {
             throw new IllegalArgumentException("'validationContext' cannot be null.");
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java
index e43c6e7..8627027 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java
@@ -29,9 +29,11 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface NotEmpty {
-    boolean trim()      default false;
+    boolean trim()          default false;
+    String emptyText()      default "";
+    int emptyTextResId()    default -1;
 
-    int sequence()      default -1;
-    int messageResId()  default -1;
-    String message()    default "This field is required";
+    int sequence()          default -1;
+    int messageResId()      default -1;
+    String message()        default "This field is required";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Optional.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Optional.java
new file mode 100644
index 0000000..8bf8529
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Optional.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.1.0
+ */
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Optional {
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Or.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Or.java
new file mode 100644
index 0000000..3a01cd7
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Or.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.1.0
+ */
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Or {
+    int messageResId()  default -1;
+    String message()    default "One of the rules must be valid";
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java
index 15b5b07..6d4fef1 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java
@@ -30,13 +30,9 @@
  * @since 2.0
  */
 public class FutureRule extends ContextualAnnotationRule<Future, String> {
-    private int mDateFormatResId;
-    private String mDateFormatString;
 
     protected FutureRule(final ValidationContext validationContext, final Future future) {
         super(validationContext, future);
-        mDateFormatResId = future.dateFormatResId();
-        mDateFormatString = future.dateFormat();
     }
 
     @Override
@@ -53,8 +49,9 @@ public boolean isValid(final String dateString) {
 
     private DateFormat getDateFormat() {
         Context context = mValidationContext.getContext();
-        String dateFormatString =  mDateFormatResId != -1
-                ? context.getString(mDateFormatResId) : mDateFormatString;
+        int dateFormatResId = mRuleAnnotation.dateFormatResId();
+        String dateFormatString =  dateFormatResId != -1
+                ? context.getString(dateFormatResId) : mRuleAnnotation.dateFormat();
         return new SimpleDateFormat(dateFormatString);
     }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/NotEmptyRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/NotEmptyRule.java
index 90a50a9..36c7eaa 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/NotEmptyRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/NotEmptyRule.java
@@ -14,22 +14,36 @@
 
 package com.mobsandgeeks.saripaar.rule;
 
-import com.mobsandgeeks.saripaar.AnnotationRule;
+import android.content.Context;
+
+import com.mobsandgeeks.saripaar.ContextualAnnotationRule;
+import com.mobsandgeeks.saripaar.ValidationContext;
 import com.mobsandgeeks.saripaar.annotation.NotEmpty;
 
 /**
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 2.0
  */
-public class NotEmptyRule extends AnnotationRule<NotEmpty, String> {
+public class NotEmptyRule extends ContextualAnnotationRule<NotEmpty, String> {
 
-    protected NotEmptyRule(final NotEmpty notEmpty) {
-        super(notEmpty);
+    protected NotEmptyRule(final ValidationContext validationContext, final NotEmpty notEmpty) {
+        super(validationContext, notEmpty);
     }
 
     @Override
     public boolean isValid(final String data) {
-        return data != null && (mRuleAnnotation.trim()
-                ? data.trim().length() > 0 : data.length() > 0);
+        boolean isEmpty = false;
+        if (data != null) {
+            String text = mRuleAnnotation.trim() ? data.trim() : data;
+
+            Context context = mValidationContext.getContext();
+            String emptyText = mRuleAnnotation.emptyTextResId() != -1
+                    ? context.getString(mRuleAnnotation.emptyTextResId())
+                    : mRuleAnnotation.emptyText();
+
+            isEmpty = emptyText.equals(text) || "".equals(text);
+        }
+
+        return !isEmpty;
     }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PastRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PastRule.java
index 426aaec..6148d21 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PastRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PastRule.java
@@ -30,13 +30,9 @@
  * @since 2.0
  */
 public class PastRule extends ContextualAnnotationRule<Past, String> {
-    private int mDateFormatResId;
-    private String mDateFormatString;
 
     protected PastRule(final ValidationContext validationContext, final Past past) {
         super(validationContext, past);
-        mDateFormatResId = past.dateFormatResId();
-        mDateFormatString = past.dateFormat();
     }
 
     @Override
@@ -53,8 +49,9 @@ public boolean isValid(final String dateString) {
 
     private DateFormat getDateFormat() {
         Context context = mValidationContext.getContext();
-        String dateFormatString =  mDateFormatResId != -1
-                ? context.getString(mDateFormatResId) : mDateFormatString;
+        int dateFormatResId = mRuleAnnotation.dateFormatResId();
+        String dateFormatString =  dateFormatResId != -1
+                ? context.getString(dateFormatResId) : mRuleAnnotation.dateFormat();
         return new SimpleDateFormat(dateFormatString);
     }
 }
