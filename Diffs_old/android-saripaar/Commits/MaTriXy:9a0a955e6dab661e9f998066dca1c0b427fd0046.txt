diff --git a/.travis.yml b/.travis.yml
index b28363a..9e4a15e 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,5 +1,7 @@
 language: android
+
 jdk: oraclejdk7
+
 env:
   matrix:
     - ANDROID_TARGET=android-19  ANDROID_ABI=armeabi-v7a
@@ -8,6 +10,9 @@ android:
   components:
     - build-tools-21.1.1
 
+notifications:
+  email: false
+
 before_script:
   # Grant execution permissions to Gradle wrapper
   - chmod +x gradlew
diff --git a/README.md b/README.md
index 29bacf8..de33342 100644
--- a/README.md
+++ b/README.md
@@ -1,15 +1,11 @@
-Android Saripaar v2 [![Build Status](https://travis-ci.org/ragunathjawahar/android-saripaar.svg?branch=master)](https://travis-ci.org/ragunathjawahar/android-saripaar) [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Android%20Saripaar-brightgreen.svg?style=flat)](http://android-arsenal.com/details/1/526)
+Android Saripaar v2 [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Android%20Saripaar-brightgreen.svg?style=flat)](http://android-arsenal.com/details/1/526)
 ===================
 ![Logo](logo.png)
 
 **சரிபார்** - sari-paar (Tamil for "to check", "verify" or "validate")
 
-Android Saripaar is a simple, yet powerful rule-based UI form validation library for Android.
-It is the **SIMPLEST** and **FEATURE-RICH** validation library available for Android.
-
-*Note: v2 is still under development and is available as snapshots for PREVIEW. For a feature complete
-version of the library, please use v1 (available from Maven Central). The following annotations are
-yet to be implemented in Saripaar v2 `@Future`, `@Past` and `@Digits`*.
+Android Saripaar is a simple, feature-rich and powerful rule-based UI form validation library for Android.
+It is the **SIMPLEST** UI validation library available for Android.
 
 Why Android Saripaar?
 ---------------------
@@ -20,9 +16,8 @@ Why Android Saripaar?
  - **Synchronous** and **Asynchronous** validations, you don't have to worry about threading.
  - Supports both BURST and IMMEDIATE modes.
  - Works with **Stock Android Widgets**, no custom view dependencies.
- - Quick to setup, just download the [jar] and include it in your `libs` project folder.
  - Isolates validation logic using rules.
- - Compatible with other annotation frameworks such as [ButterKnife], [AndroidAnnotations], [RoboGuice], etc.,
+ - Compatible with other annotation-based libraries and frameworks such as [ButterKnife], [AndroidAnnotations], [RoboGuice], etc.,
 
 Quick Start
 -----------
@@ -47,8 +42,9 @@ The annotations are self-explanatory. The `@Order` annotation is required ONLY w
 
 **Step 2 - Instantiate a new [Validator]**
 ```java
-public void onCreate() {
-    super.onCreate();
+@Override
+public void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
     // Code…
 
     validator = new Validator(this);
@@ -61,12 +57,16 @@ You will need a `Validator` and a `ValidationListener` for receiving callbacks o
 
 **Step 3 - Implement a [ValidationListener]**
 ```java
-public class RegistrationActivity implements ValidationListener {
+public class RegistrationActivity extends Activity implements ValidationListener {
+
+    // Code…
 
+    @Override
     public void onValidationSucceeded() {
         Toast.makeText(this, "Yay! we got it right!", Toast.LENGTH_SHORT).show();
     }
 
+    @Override
     public void onValidationFailed(List<ValidationError> errors) {
         for (ValidationError error : errors) {
             View view = error.getView();
@@ -80,7 +80,6 @@ public class RegistrationActivity implements ValidationListener {
             }
         }
     }
-
 }
 ```
  - `onValidationSucceeded()` - Called when all your views pass all validations.
@@ -90,6 +89,7 @@ public class RegistrationActivity implements ValidationListener {
 ```java
 registerButton.setOnClickListener(new OnClickListener() {
 
+    @Override
     public void onClick(View v) {
         validator.validate();
     }
@@ -97,18 +97,22 @@ registerButton.setOnClickListener(new OnClickListener() {
 ```
 The `Validator.validate()` call runs the validations and returns the result via appropriate callbacks on the `ValidationListener`. You can run validations on a background `AsyncTask` by calling the `Validator.validate(true)` method.
 
+Saripaar X
+---------------------
+If you are looking for country-specific annotations, checkout the [Saripaar X] project. The extensions project is in its early stages and needs contributors. Feel free to contribute.
+
 Maven
 ---------------------
     <dependency>
         <groupId>com.mobsandgeeks</groupId>
         <artifactId>android-saripaar</artifactId>
-        <version>2.0-SNAPSHOT</version>
+        <version>2.0.2</version>
     </dependency>
 
 Gradle
 ---------------------
     dependencies {
-        compile 'com.mobsandgeeks:android-saripaar:2.0-SNAPSHOT'
+        compile 'com.mobsandgeeks:android-saripaar:2.0.2'
     }
 
 Snapshots
@@ -129,7 +133,11 @@ ProGuard
 Exclude Saripaar classes from obfuscation and minification. Add the following rules to your `proguard-rules.pro` file.
 
     -keep class com.mobsandgeeks.saripaar.** {*;}
-    -keep class commons.validator.routines.** {*;}
+    -keep @com.mobsandgeeks.saripaar.annotation.ValidateUsing class * {*;}
+
+Evolution
+---------------------
+For those interested in finding out how v2 evolved from v1, watch this (~20 second) [video].
 
 Using Saripaar?
 ---------------------
@@ -139,17 +147,7 @@ Icon         | App           | Icon         | App           | Icon         | App
 ------------ | ------------- | ------------ | ------------- | ------------ | -------------
 <img src="https://lh3.ggpht.com/qhpfFQFd5YuLzT5d9jUCI69dMeLlW6XewLsgZ0l06D92M0SmvsMKSMd_YY1Xc9K1GyU=w300-rw" width="48" height="48" /> | [Wikipedia] | <img src="https://lh6.ggpht.com/i_pxbaojay2K2xb2RDC2W7eOnNlpGRgILoACaEDhaKz87JSg3nEJHV3Vz3wmS3L3e4M=w300-rw" width="48" height="48" /> | [Wikipedia Beta] | <img src="https://lh3.ggpht.com/o2lhzbRnq6U1oPxyqY6LDJIc2PO_tm1_sIbX-fMLpG2Sxk94QW2gQaDw8ewam1dPQrdz=w300-rw" width="48" height="48" /> | [Mizuno Baton]
 <img src="https://lh6.ggpht.com/t-WYlpXlwhLL0unTDChiVi24b4LP0kNsJQnRwFaMHd0NGqxgQ2LupQ1Dl7M1ztj8Vg8=w300-rw" width="48" height="48" /> | [Fetch] | <img src="https://lh3.ggpht.com/J3bMDphmzsPFQeMfWR-LH70g5vSGrTVggPzXQdUafKM2KmpWS3THIcSHQaTVbCQ_hjw=w300-rw" width="48" height="48" /> | [HealtheMinder] | <img src="https://lh3.ggpht.com/EhidzByoyUY1OPVcsjOmtOcRwoxphRCy1-a_qKLYKHwsS0DuHIC9cHIDEPLVKO-oTw=w300-rw" width="48" height="48" /> | [MomMe]
-<img src="https://lh5.ggpht.com/h6T-az0ip_OqNtSh__Kc5-0ZPpT7sYxSn4kFPOjrNI7o-LN9bPbovoiYDfswL-B5XQ=w300-rw" width="48" height="48" /> | [Feelknit]
-
-Publications
----------------------
-Cover        | Book         
------------- | -------------
-<img src="http://ecx.images-amazon.com/images/I/416xlob1VeL.jpg" width="48" /> | [Expert Android]
-<img src="http://ecx.images-amazon.com/images/I/417dVd61vKL._BO2,204,203,200_PIsitb-sticker-v3-big,TopRight,0,-55_SX324_SY324_PIkin4,BottomRight,1,22_AA346_SH20_OU03_.jpg" width="48" /> | [Android Top 10 Libraries & Frameworks (German)]
-
-**[AndroidDev Weekly issue #61]** - Open Source Project of the Week<br />
-**[AndroidWeekly issue #65]** - Libraries & Code
+<img src="https://lh5.ggpht.com/h6T-az0ip_OqNtSh__Kc5-0ZPpT7sYxSn4kFPOjrNI7o-LN9bPbovoiYDfswL-B5XQ=w300-rw" width="48" height="48" /> | [Feelknit] | <img src="https://lh4.ggpht.com/k5zFS5VheJKt1yBHKC-wBgJTwOQ4Q_Aa2XbG6Ea_-HvP8nXjYeSnO_227j1wVno1JZY=w300-rw" width="48" height="48" /> | [StreetBarz]
 
 Wiki
 ---------------------
@@ -182,6 +180,8 @@ License
   [Saripaar Annotations]: https://github.com/ragunathjawahar/android-saripaar/tree/master/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation
   [Validator]: https://github.com/ragunathjawahar/android-saripaar/blob/master/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
   [ValidationListener]: https://github.com/ragunathjawahar/android-saripaar/blob/master/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
+  [Saripaar X]: https://github.com/ragunathjawahar/saripaar-x
+  [video]: https://youtu.be/6Os9RxVK76A?t=23
   [Tweet]: https://twitter.com/ragunathjawahar
   [Wikipedia]: https://play.google.com/store/apps/details?id=org.wikipedia
   [Wikipedia Beta]: https://play.google.com/store/apps/details?id=org.wikipedia.beta
@@ -190,8 +190,5 @@ License
   [MomMe]: https://play.google.com/store/apps/details?id=org.harthosp.momme
   [HealtheMinder]: https://play.google.com/store/apps/details?id=org.hartfordhealthcare.healtheminder
   [Feelknit]: https://play.google.com/store/apps/details?id=com.qubittech.feelknit.app
-  [Expert Android]: http://www.apress.com/9781430249504
-  [Android Top 10 Libraries & Frameworks (German)]: http://www.amazon.de/Android-Top10-Libraries-Frameworks-Programmieren-ebook/dp/B00OPXVJ0I/
-  [AndroidDev Weekly issue #61]: http://androiddevweekly.com/2013/06/17/Issue-61.html
-  [AndroidWeekly issue #65]: http://androidweekly.net/issues/issue-65
+  [StreetBarz]: https://play.google.com/store/apps/details?id=com.diofeher.StreetBarz
   [wiki]: https://github.com/ragunathjawahar/android-saripaar/wiki
diff --git a/gradle.properties b/gradle.properties
index 0953a58..7bfbeb4 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -17,7 +17,7 @@
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
 
-VERSION_NAME=2.0-SNAPSHOT
+VERSION_NAME=2.1.0-SNAPSHOT
 GROUP=com.mobsandgeeks
 
 POM_DESCRIPTION=Rule-based UI form validation library for Android
diff --git a/saripaar-showcase/build.gradle b/saripaar-showcase/build.gradle
index 3eac9ab..df8f316 100644
--- a/saripaar-showcase/build.gradle
+++ b/saripaar-showcase/build.gradle
@@ -1,4 +1,5 @@
 apply plugin: 'com.android.application'
+apply plugin: 'kotlin-android'
 
 android {
     compileSdkVersion 21
@@ -17,9 +18,31 @@ android {
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
     }
+    lintOptions {
+        abortOnError false
+    }
+    sourceSets {
+        main.java.srcDirs += 'src/main/java'
+        main.java.srcDirs += 'src/main/kotlin'
+    }
 }
 
 dependencies {
+    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
     compile fileTree(dir: 'libs', include: ['*.jar'])
     compile 'com.mobsandgeeks:android-saripaar:2.0-SNAPSHOT'
 }
+
+buildscript {
+    ext.kotlin_version = '0.11.+'
+    repositories {
+        mavenCentral()
+    }
+    dependencies {
+        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
+    }
+}
+
+repositories {
+    mavenCentral()
+}
diff --git a/saripaar-showcase/src/main/java/com/mobsandgeeks/saripaar/showcase/LoginActivity.java b/saripaar-showcase/src/main/java/com/mobsandgeeks/saripaar/showcase/LoginActivity.java
deleted file mode 100644
index 43fe29c..0000000
--- a/saripaar-showcase/src/main/java/com/mobsandgeeks/saripaar/showcase/LoginActivity.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package com.mobsandgeeks.saripaar.showcase;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.widget.EditText;
-
-public class LoginActivity extends Activity {
-
-    private EditText mEmailEditText;
-    private EditText mPasswordEditText;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_login);
-
-        // UI References
-        mEmailEditText = (EditText) findViewById(R.id.emailEditText);
-        mPasswordEditText = (EditText) findViewById(R.id.passwordEditText);
-    }
-
-}
diff --git a/saripaar-showcase/src/main/kotlin/com/mobsandgeeks/saripaar/showcase/LoginActivity.kt b/saripaar-showcase/src/main/kotlin/com/mobsandgeeks/saripaar/showcase/LoginActivity.kt
new file mode 100644
index 0000000..70753d9
--- /dev/null
+++ b/saripaar-showcase/src/main/kotlin/com/mobsandgeeks/saripaar/showcase/LoginActivity.kt
@@ -0,0 +1,86 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.showcase
+
+import android.app.Activity
+import android.os.Bundle
+import android.widget.Button
+import android.widget.EditText
+import android.widget.Toast
+import com.mobsandgeeks.saripaar.ValidationError
+import com.mobsandgeeks.saripaar.Validator
+import com.mobsandgeeks.saripaar.annotation.Email
+import com.mobsandgeeks.saripaar.annotation.NotEmpty
+import com.mobsandgeeks.saripaar.annotation.Order
+import com.mobsandgeeks.saripaar.annotation.Password
+import kotlin.properties.Delegates
+
+/**
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class LoginActivity : Activity(), Validator.ValidationListener {
+
+    // UI References
+    NotEmpty(sequence = 1)
+    Email(sequence = 2)
+    Order(1)
+    private var emailEditText: EditText by Delegates.notNull()
+
+    Password(scheme = Password.Scheme.ALPHA_NUMERIC)
+    Order(2)
+    private var passwordEditText: EditText by Delegates.notNull()
+
+    private var loginButton: Button by Delegates.notNull()
+
+    // Validation
+    val validator = Validator(this)
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super<Activity>.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_login)
+
+        // UI References
+        emailEditText = findViewById(R.id.emailEditText) as EditText
+        passwordEditText = findViewById(R.id.passwordEditText) as EditText
+        loginButton = findViewById(R.id.loginButton) as Button
+
+        // Validator
+        validator.setValidationMode(Validator.Mode.IMMEDIATE)
+
+        // Listeners
+        validator.setValidationListener(this)
+        loginButton.setOnClickListener { v -> validator.validate() }
+    }
+
+    override fun onValidationSucceeded() {
+        showToast("Yay")
+    }
+
+    override fun onValidationFailed(errors: MutableList<ValidationError>) {
+        // Since, we're using Mode.IMMEDIATE, we'll be notified as soon
+        // as a view fails validation. So, the collection will always have
+        // only one item.
+        val error = errors.get(0)
+        val message = error.getCollatedErrorMessage(this)
+        val editText = error.getView() as EditText
+        editText.setError(message)
+        editText.requestFocus()
+    }
+
+    private fun showToast(message: String) {
+        Toast.makeText(this, message, Toast.LENGTH_LONG).show()
+    }
+}
diff --git a/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyControllerTest.java b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyControllerTest.java
new file mode 100644
index 0000000..b52bb34
--- /dev/null
+++ b/saripaar-tests/src/androidTest/java/com/mobsandgeeks/saripaar/tests/QuickRuleOnlyControllerTest.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.tests.ui.QuickRuleOnlyControllerActivity;
+
+public class QuickRuleOnlyControllerTest
+        extends ActivityInstrumentationTestCase2<QuickRuleOnlyControllerActivity> {
+
+    private TextView mResultTextView;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        mResultTextView = (TextView) getActivity().findViewById(R.id.resultTextView);
+    }
+
+    public void testInputNot1_failure() {
+        EspressoHelper.type(R.id.oneOnlyEditText, "100");
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_FAILURE, mResultTextView);
+    }
+
+    public void testInput1_success() {
+        EspressoHelper.type(R.id.oneOnlyEditText, "1");
+        EspressoHelper.clickView(R.id.saripaarButton);
+        EspressoHelper.checkForText(Constants.STATE_SUCCESS, mResultTextView);
+    }
+
+    public QuickRuleOnlyControllerTest() {
+        super(QuickRuleOnlyControllerActivity.class);
+    }
+}
diff --git a/saripaar-tests/src/main/AndroidManifest.xml b/saripaar-tests/src/main/AndroidManifest.xml
index fbd7a7b..9e66ee6 100644
--- a/saripaar-tests/src/main/AndroidManifest.xml
+++ b/saripaar-tests/src/main/AndroidManifest.xml
@@ -49,7 +49,10 @@
             android:label="@string/title_activity_quick_rule" />
         <activity
             android:name=".ui.QuickRuleOnlyActivity"
-            android:label="@string/title_activity_quick_rule" />
+            android:label="@string/title_activity_quick_rule_only" />
+        <activity
+            android:name=".ui.QuickRuleOnlyControllerActivity"
+            android:label="@string/title_activity_quick_rule_only_controller" />
         <activity
             android:name=".ui.ConfirmPasswordWithPasswordActivity"
             android:label="@string/title_activity_confirm_password" />
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomMultipleViewDataAdaptersActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomMultipleViewDataAdaptersActivity.java
index f1e5ba9..96ef1ec 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomMultipleViewDataAdaptersActivity.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomMultipleViewDataAdaptersActivity.java
@@ -117,7 +117,7 @@ public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                 default:
                     throw new RuntimeException("This should never happen.");
             }
-            Validator.registerAdapter(FloatLabeledEditText.class, viewDataAdapter);
+            mValidator.registerAdapter(FloatLabeledEditText.class, viewDataAdapter);
         }
     }
 
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomViewDataAdapterActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomViewDataAdapterActivity.java
index 5139228..cfeb9f1 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomViewDataAdapterActivity.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/CustomViewDataAdapterActivity.java
@@ -92,7 +92,7 @@ public void onClick(View v) {
     @Override
     public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
         if (isChecked) {
-            Validator.registerAdapter(FloatLabeledEditText.class,
+            mValidator.registerAdapter(FloatLabeledEditText.class,
                 new ViewDataAdapter<FloatLabeledEditText, Boolean>() {
 
                     @Override
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedSequencingActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedSequencingActivity.java
index 286cff5..d1bbd7f 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedSequencingActivity.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedSequencingActivity.java
@@ -27,7 +27,7 @@
 import com.mobsandgeeks.saripaar.annotation.Email;
 import com.mobsandgeeks.saripaar.annotation.NotEmpty;
 import com.mobsandgeeks.saripaar.annotation.Order;
-import com.mobsandgeeks.saripaar.annotation.Size;
+import com.mobsandgeeks.saripaar.annotation.Length;
 import com.mobsandgeeks.saripaar.tests.R;
 
 import java.util.List;
@@ -41,12 +41,12 @@
 
     // Fields
     @NotEmpty(sequence = 1, message = "Message 1")
-    @Size(sequence = 2, min = 3, message = "Message 2")
+    @Length(sequence = 2, min = 3, message = "Message 2")
     @Order(1)
     private EditText mNameEditText;
 
     @NotEmpty(sequence = 1, message = "Message 3")
-    @Size(sequence = 2, min = 10, message = "Message 4")
+    @Length(sequence = 2, min = 10, message = "Message 4")
     @Order(2)
     private EditText mAddressEditText;
 
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateActivity.java
index 9be87c3..c35f935 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateActivity.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateActivity.java
@@ -27,7 +27,7 @@
 import com.mobsandgeeks.saripaar.annotation.Email;
 import com.mobsandgeeks.saripaar.annotation.NotEmpty;
 import com.mobsandgeeks.saripaar.annotation.Order;
-import com.mobsandgeeks.saripaar.annotation.Size;
+import com.mobsandgeeks.saripaar.annotation.Length;
 import com.mobsandgeeks.saripaar.tests.R;
 
 import java.util.List;
@@ -53,7 +53,7 @@
     private EditText mEmailEditText;
 
     @NotEmpty
-    @Size(min = 10, max = 10)
+    @Length(min = 10, max = 10)
     @Order(4)
     private EditText mPhoneEditText;
 
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateBeforeActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateBeforeActivity.java
index df8651d..4c36317 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateBeforeActivity.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateBeforeActivity.java
@@ -26,7 +26,7 @@
 import com.mobsandgeeks.saripaar.annotation.Email;
 import com.mobsandgeeks.saripaar.annotation.NotEmpty;
 import com.mobsandgeeks.saripaar.annotation.Order;
-import com.mobsandgeeks.saripaar.annotation.Size;
+import com.mobsandgeeks.saripaar.annotation.Length;
 import com.mobsandgeeks.saripaar.tests.R;
 
 import java.util.List;
@@ -54,7 +54,7 @@
     private EditText mEmailEditText;
 
     @NotEmpty
-    @Size
+    @Length
     @Order(4)
     private EditText mPhoneEditText;
 
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateTillActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateTillActivity.java
index af5c561..a3dd55a 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateTillActivity.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/OrderedValidateTillActivity.java
@@ -26,7 +26,7 @@
 import com.mobsandgeeks.saripaar.annotation.Email;
 import com.mobsandgeeks.saripaar.annotation.NotEmpty;
 import com.mobsandgeeks.saripaar.annotation.Order;
-import com.mobsandgeeks.saripaar.annotation.Size;
+import com.mobsandgeeks.saripaar.annotation.Length;
 import com.mobsandgeeks.saripaar.tests.R;
 
 import java.util.List;
@@ -54,7 +54,7 @@
     private EditText mEmailEditText;
 
     @NotEmpty
-    @Size(min = 10, max = 10)
+    @Length(min = 10, max = 10)
     @Order(4)
     private EditText mPhoneEditText;
 
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOnlyControllerActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOnlyControllerActivity.java
new file mode 100644
index 0000000..2d6b242
--- /dev/null
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/QuickRuleOnlyControllerActivity.java
@@ -0,0 +1,105 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.tests.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.QuickRule;
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.tests.R;
+
+import java.util.List;
+
+
+public class QuickRuleOnlyControllerActivity extends Activity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        // Set content view
+        LayoutInflater layoutInflater = LayoutInflater.from(this);
+        View view = layoutInflater.inflate(R.layout.activity_quick_rule_only, null);
+        setContentView(view);
+
+        // Controller
+        new Controller(view);
+    }
+
+    static class Controller implements View.OnClickListener, Validator.ValidationListener {
+        // UI
+        private EditText mOneOnlyEditText;
+        private TextView mResultTextView;
+        private Button mSaripaarButton;
+
+        // Attributes
+        private Validator mValidator;
+
+        Controller(final View rootView) {
+            // UI
+            mOneOnlyEditText = (EditText) rootView.findViewById(R.id.oneOnlyEditText);
+            mResultTextView = (TextView) rootView.findViewById(R.id.resultTextView);
+            mSaripaarButton = (Button) rootView.findViewById(R.id.saripaarButton);
+
+            // Validation
+            mValidator = new Validator(this);
+            mValidator.setValidationListener(this);
+
+            // Add a quick rule
+            mValidator.put(mOneOnlyEditText, new QuickRule<TextView>() {
+
+                @Override
+                public boolean isValid(TextView textView) {
+                    return "1".equals(textView.getText().toString());
+                }
+
+                @Override
+                public String getMessage(Context context) {
+                    return "Enter 1, nothing else.";
+                }
+            });
+
+            // Event listeners
+            mSaripaarButton.setOnClickListener(this);
+        }
+
+        @Override
+        public void onClick(View v) {
+            try {
+                mValidator.validate();
+            } catch (IllegalStateException e) {
+                mResultTextView.setText(R.string.crash);
+            }
+        }
+
+        @Override
+        public void onValidationSucceeded() {
+            mResultTextView.setText(R.string.success);
+        }
+
+        @Override
+        public void onValidationFailed(List<ValidationError> errors) {
+            mResultTextView.setText(R.string.failure);
+        }
+    }
+}
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/RemoveRulesActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/RemoveRulesActivity.java
index 87a5a56..4998f86 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/RemoveRulesActivity.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/RemoveRulesActivity.java
@@ -3,7 +3,6 @@
 import android.app.Activity;
 import android.content.Context;
 import android.os.Bundle;
-import android.text.Editable;
 import android.view.View;
 import android.widget.Button;
 import android.widget.CompoundButton;
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedSequencingActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedSequencingActivity.java
index e1e8086..7ae5155 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedSequencingActivity.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedSequencingActivity.java
@@ -26,7 +26,7 @@
 import com.mobsandgeeks.saripaar.Validator;
 import com.mobsandgeeks.saripaar.annotation.Email;
 import com.mobsandgeeks.saripaar.annotation.NotEmpty;
-import com.mobsandgeeks.saripaar.annotation.Size;
+import com.mobsandgeeks.saripaar.annotation.Length;
 import com.mobsandgeeks.saripaar.tests.R;
 
 import java.util.List;
@@ -40,11 +40,11 @@
 
     // Fields
     @NotEmpty(sequence = 1, message = "Message 1")
-    @Size(sequence = 2, min = 3, message = "Message 2")
+    @Length(sequence = 2, min = 3, message = "Message 2")
     private EditText mNameEditText;
 
     @NotEmpty(sequence = 1, message = "Message 3")
-    @Size(sequence = 2, min = 10, message = "Message 4")
+    @Length(sequence = 2, min = 10, message = "Message 4")
     private EditText mAddressEditText;
 
     @NotEmpty(sequence = 1, message = "Message 5")
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateActivity.java
index 161ff4b..c0e98c0 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateActivity.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateActivity.java
@@ -26,7 +26,7 @@
 import com.mobsandgeeks.saripaar.Validator;
 import com.mobsandgeeks.saripaar.annotation.Email;
 import com.mobsandgeeks.saripaar.annotation.NotEmpty;
-import com.mobsandgeeks.saripaar.annotation.Size;
+import com.mobsandgeeks.saripaar.annotation.Length;
 import com.mobsandgeeks.saripaar.tests.R;
 
 import java.util.List;
@@ -53,7 +53,7 @@
     @Email
     private EditText mEmailEditText;
 
-    @Size(min = 10, max = 10)
+    @Length(min = 10, max = 10)
     private EditText mPhoneEditText;
 
     private TextView mResultTextView;
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateBeforeActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateBeforeActivity.java
index 883894a..536a9d9 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateBeforeActivity.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateBeforeActivity.java
@@ -25,7 +25,7 @@
 import com.mobsandgeeks.saripaar.Validator;
 import com.mobsandgeeks.saripaar.annotation.Email;
 import com.mobsandgeeks.saripaar.annotation.NotEmpty;
-import com.mobsandgeeks.saripaar.annotation.Size;
+import com.mobsandgeeks.saripaar.annotation.Length;
 import com.mobsandgeeks.saripaar.tests.R;
 
 import java.util.List;
@@ -50,7 +50,7 @@
     private EditText mEmailEditText;
 
     @NotEmpty
-    @Size
+    @Length
     private EditText mPhoneEditText;
 
     private TextView mResultTextView;
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateTillActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateTillActivity.java
index 93e857b..3be4ab3 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateTillActivity.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/UnorderedValidateTillActivity.java
@@ -25,7 +25,7 @@
 import com.mobsandgeeks.saripaar.Validator;
 import com.mobsandgeeks.saripaar.annotation.Email;
 import com.mobsandgeeks.saripaar.annotation.NotEmpty;
-import com.mobsandgeeks.saripaar.annotation.Size;
+import com.mobsandgeeks.saripaar.annotation.Length;
 import com.mobsandgeeks.saripaar.tests.R;
 
 import java.util.List;
@@ -50,7 +50,7 @@
     private EditText mEmailEditText;
 
     @NotEmpty
-    @Size
+    @Length
     private EditText mPhoneEditText;
 
     private TextView mResultTextView;
diff --git a/saripaar-tests/src/main/res/layout/activity_quick_rule_only_controller.xml b/saripaar-tests/src/main/res/layout/activity_quick_rule_only_controller.xml
new file mode 100644
index 0000000..de3bfa1
--- /dev/null
+++ b/saripaar-tests/src/main/res/layout/activity_quick_rule_only_controller.xml
@@ -0,0 +1,46 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:paddingLeft="@dimen/activity_horizontal_margin"
+                android:paddingRight="@dimen/activity_horizontal_margin"
+                android:paddingTop="@dimen/activity_vertical_margin"
+                android:paddingBottom="@dimen/activity_vertical_margin"
+                android:id="@+id/root">
+
+    <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Saripaar!"
+        android:id="@+id/saripaarButton"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <EditText
+        android:id="@+id/oneOnlyEditText"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:inputType="textPassword"
+        android:hint="1 Only"
+        android:ems="10"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"/>
+
+    <TextView
+        android:id="@+id/resultTextView"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:layout_below="@+id/oneOnlyEditText"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_above="@+id/saripaarButton"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:gravity="center"/>
+
+</RelativeLayout>
diff --git a/saripaar-tests/src/main/res/values/strings.xml b/saripaar-tests/src/main/res/values/strings.xml
index 11db1e2..777d143 100644
--- a/saripaar-tests/src/main/res/values/strings.xml
+++ b/saripaar-tests/src/main/res/values/strings.xml
@@ -9,6 +9,8 @@
     <string name="title_activity_custom_annotation">Custom Annotation</string>
     <string name="title_activity_custom_annotation_with_adapter">Custom Annotation with Adapter</string>
     <string name="title_activity_quick_rule">Quick Rule</string>
+    <string name="title_activity_quick_rule_only">Quick Rule Only</string>
+    <string name="title_activity_quick_rule_only_controller">Quick Rule Controller</string>
     <string name="title_activity_confirm_password">Confirm Password</string>
     <string name="title_activity_remove_rules">Remove Rules</string>
 
diff --git a/saripaar/build.gradle b/saripaar/build.gradle
index c7ccac8..a6034eb 100644
--- a/saripaar/build.gradle
+++ b/saripaar/build.gradle
@@ -7,6 +7,9 @@ android {
     compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
     buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
+    lintOptions {
+        abortOnError false
+    }
     defaultConfig {
         minSdkVersion 8
         targetSdkVersion 21
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java
index 2202068..980ea8e 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java
@@ -44,8 +44,8 @@
      *      this rule is paired.
      */
     protected AnnotationRule(final RULE_ANNOTATION ruleAnnotation) {
-        super(ruleAnnotation != null ?
-                Reflector.getAttributeValue(ruleAnnotation, "sequence", Integer.TYPE) : -1);
+        super(ruleAnnotation != null
+                ? Reflector.getAttributeValue(ruleAnnotation, "sequence", Integer.TYPE) : -1);
         if (ruleAnnotation == null) {
             throw new IllegalArgumentException("'ruleAnnotation' cannot be null.");
         }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ContextualAnnotationRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ContextualAnnotationRule.java
index d3c24aa..f691ec7 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ContextualAnnotationRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ContextualAnnotationRule.java
@@ -43,5 +43,4 @@ protected ContextualAnnotationRule(ValidationContext validationContext,
         }
         mValidationContext = validationContext;
     }
-
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/DateFormats.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/DateFormats.java
new file mode 100644
index 0000000..be473a0
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/DateFormats.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar;
+
+/**
+ * A collection of the most commonly used date format constants.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public final class DateFormats {
+
+    public static final String DMY = "dd-MM-yyyy";
+    public static final String YMD = "yyyy-MM-dd";
+    public static final String MDY = "MM-dd-yyyy";
+
+    public static final String DMY_TIME_12_HOURS = "dd-MM-yyyy hh:mm aa";
+    public static final String YMD_TIME_12_HOURS = "yyyy-MM-dd hh:mm aa";
+    public static final String MDY_TIME_12_HOURS = "MM-dd-yyyy hh:mm aa";
+
+    public static final String DMY_TIME_24_HOURS = "dd-MM-yyyy kk:mm";
+    public static final String YMD_TIME_24_HOURS = "yyyy-MM-dd kk:mm";
+    public static final String MDY_TIME_24_HOURS = "MM-dd-yyyy kk:mm";
+
+    private DateFormats() {
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Registry.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Registry.java
index 78337d2..1fdaf5a 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Registry.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Registry.java
@@ -18,11 +18,13 @@
 import android.view.View;
 import android.widget.CheckBox;
 import android.widget.RadioButton;
+import android.widget.RadioGroup;
 import android.widget.Spinner;
 import android.widget.TextView;
 
 import com.mobsandgeeks.saripaar.adapter.CheckBoxBooleanAdapter;
 import com.mobsandgeeks.saripaar.adapter.RadioButtonBooleanAdapter;
+import com.mobsandgeeks.saripaar.adapter.RadioGroupBooleanAdapter;
 import com.mobsandgeeks.saripaar.adapter.SpinnerIndexAdapter;
 import com.mobsandgeeks.saripaar.adapter.TextViewDoubleAdapter;
 import com.mobsandgeeks.saripaar.adapter.TextViewFloatAdapter;
@@ -292,6 +294,11 @@ private void assertAttribute(final Class<? extends Annotation> annotationType,
         adapters.put(Boolean.class, new RadioButtonBooleanAdapter());
         STOCK_ADAPTERS.put(RadioButton.class, adapters);
 
+        // RadioGroup
+        adapters = new HashMap<Class<?>, ViewDataAdapter>();
+        adapters.put(Boolean.class, new RadioGroupBooleanAdapter());
+        STOCK_ADAPTERS.put(RadioGroup.class, adapters);
+
         // Spinner
         adapters = new HashMap<Class<?>, ViewDataAdapter>();
         adapters.put(Integer.class, new SpinnerIndexAdapter());
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
index c69f4bb..ae3d092 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
@@ -31,6 +31,8 @@
 
     /**
      * Constructor.
+     *
+     * @param sequence  The sequence number for this {@link com.mobsandgeeks.saripaar.Rule}.
      */
     protected Rule(final int sequence) {
         mSequence = sequence;
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/SaripaarFieldsComparator.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/SaripaarFieldsComparator.java
index 07e4f30..25c2f45 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/SaripaarFieldsComparator.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/SaripaarFieldsComparator.java
@@ -46,8 +46,7 @@ public int compare(final Field lhsField, final Field rhsField) {
             int rhsOrder = rhsOrderAnnotation.value();
 
             comparison = lhsOrder == rhsOrder
-                    ? 0
-                    : lhsOrder > rhsOrder ? 1 : -1;
+                    ? 0 : lhsOrder > rhsOrder ? 1 : -1;
         }
 
         return comparison;
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/SequenceComparator.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/SequenceComparator.java
index 93f497c..8307981 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/SequenceComparator.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/SequenceComparator.java
@@ -14,26 +14,33 @@
 
 package com.mobsandgeeks.saripaar;
 
+import android.util.Pair;
+
+import com.mobsandgeeks.saripaar.adapter.ViewDataAdapter;
+
 import java.util.Comparator;
 
 /**
- * Sorts the {@link com.mobsandgeeks.saripaar.Validator.RuleAdapterPair}s based on the
+ * Sorts the {@link com.mobsandgeeks.saripaar.Rule} and
+ * {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} pairs based on the
  * 'sequence' attribute.
  *
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 2.0
  */
-final class SequenceComparator implements Comparator<Validator.RuleAdapterPair> {
+final class SequenceComparator implements Comparator<Pair<Rule, ViewDataAdapter>> {
 
+    /**
+     * {@inheritDoc}
+     */
     @Override
-    public int compare(final Validator.RuleAdapterPair lhsPair,
-            final Validator.RuleAdapterPair rhsPair) {
+    public int compare(final Pair<Rule, ViewDataAdapter> lhsPair,
+            final Pair<Rule, ViewDataAdapter> rhsPair) {
 
-        final int lhsSequence = lhsPair.rule.getSequence();
-        final int rhsSequence = rhsPair.rule.getSequence();
+        final int lhsSequence = lhsPair.first.getSequence();
+        final int rhsSequence = rhsPair.first.getSequence();
 
-        return lhsSequence > rhsSequence
-                ? 1
-                : lhsSequence < rhsSequence ? -1 : 0;
+        return lhsSequence == rhsSequence
+                ? 0 : lhsSequence > rhsSequence ? 1 : -1;
     }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationContext.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationContext.java
index 22cccd3..064b187 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationContext.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/ValidationContext.java
@@ -14,8 +14,11 @@
 
 package com.mobsandgeeks.saripaar;
 
+import android.content.Context;
+import android.util.Pair;
 import android.view.View;
 
+import com.mobsandgeeks.saripaar.adapter.ViewDataAdapter;
 import com.mobsandgeeks.saripaar.annotation.ValidateUsing;
 import com.mobsandgeeks.saripaar.exception.ConversionException;
 
@@ -34,9 +37,11 @@
 public class ValidationContext {
 
     // Attributes
-    Map<View, ArrayList<Validator.RuleAdapterPair>> mViewRulesMap;
+    Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> mViewRulesMap;
+    private Context mContext;
 
-    ValidationContext() {
+    ValidationContext(final Context context) {
+        this.mContext = context;
     }
 
     /**
@@ -52,17 +57,16 @@
         assertIsRegisteredAnnotation(saripaarAnnotation);
 
         // Get the AnnotationRule class
-
         Class<? extends AnnotationRule> annotationRuleClass = getRuleClass(saripaarAnnotation);
 
         // Find all views with the target rule
         List<View> annotatedViews = new ArrayList<View>();
         Set<View> views = mViewRulesMap.keySet();
         for (View view : views) {
-            ArrayList<Validator.RuleAdapterPair> ruleAdapterPairs = mViewRulesMap.get(view);
-            for (Validator.RuleAdapterPair ruleAdapterPair : ruleAdapterPairs) {
+            ArrayList<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs = mViewRulesMap.get(view);
+            for (Pair<Rule, ViewDataAdapter> ruleAdapterPair : ruleAdapterPairs) {
                 boolean uniqueMatchingView =
-                        annotationRuleClass.equals(ruleAdapterPair.rule.getClass())
+                        annotationRuleClass.equals(ruleAdapterPair.first.getClass())
                                 && !annotatedViews.contains(view);
                 if (uniqueMatchingView) {
                     annotatedViews.add(view);
@@ -87,13 +91,13 @@ public Object getData(final View view, Class<? extends Annotation> saripaarAnnot
         assertNotNull(saripaarAnnotation, "saripaarAnnotation");
 
         Object data = null;
-        ArrayList<Validator.RuleAdapterPair> ruleAdapterPairs = mViewRulesMap.get(view);
+        ArrayList<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs = mViewRulesMap.get(view);
         Class<? extends AnnotationRule> annotationRuleClass = getRuleClass(saripaarAnnotation);
 
-        for (Validator.RuleAdapterPair ruleAdapterPair : ruleAdapterPairs) {
-            if (annotationRuleClass.equals(ruleAdapterPair.rule.getClass())) {
+        for (Pair<Rule, ViewDataAdapter> ruleAdapterPair : ruleAdapterPairs) {
+            if (annotationRuleClass.equals(ruleAdapterPair.first.getClass())) {
                 try {
-                    data = ruleAdapterPair.dataAdapter.getData(view);
+                    data = ruleAdapterPair.second.getData(view);
                 } catch (ConversionException e) {
                     e.printStackTrace();
                 }
@@ -103,7 +107,16 @@ public Object getData(final View view, Class<? extends Annotation> saripaarAnnot
         return data;
     }
 
-    void setViewRulesMap(final Map<View, ArrayList<Validator.RuleAdapterPair>> viewRulesMap) {
+    /**
+     * Get a {@link Context}.
+     *
+     * @return A {@link Context}.
+     */
+    public Context getContext() {
+        return mContext;
+    }
+
+    void setViewRulesMap(final Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> viewRulesMap) {
         mViewRulesMap = viewRulesMap;
     }
 
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
index 9c01c17..6eb20b8 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
@@ -14,16 +14,23 @@
 
 package com.mobsandgeeks.saripaar;
 
+import android.app.Activity;
+import android.app.Fragment;
+import android.content.Context;
 import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Handler;
 import android.os.Looper;
+import android.util.Pair;
 import android.view.View;
 import android.widget.CheckBox;
 import android.widget.RadioButton;
+import android.widget.RadioGroup;
 import android.widget.Spinner;
 
 import com.mobsandgeeks.saripaar.adapter.CheckBoxBooleanAdapter;
 import com.mobsandgeeks.saripaar.adapter.RadioButtonBooleanAdapter;
+import com.mobsandgeeks.saripaar.adapter.RadioGroupBooleanAdapter;
 import com.mobsandgeeks.saripaar.adapter.SpinnerIndexAdapter;
 import com.mobsandgeeks.saripaar.adapter.ViewDataAdapter;
 import com.mobsandgeeks.saripaar.annotation.AssertFalse;
@@ -34,19 +41,22 @@
 import com.mobsandgeeks.saripaar.annotation.CreditCard;
 import com.mobsandgeeks.saripaar.annotation.DecimalMax;
 import com.mobsandgeeks.saripaar.annotation.DecimalMin;
+import com.mobsandgeeks.saripaar.annotation.Digits;
 import com.mobsandgeeks.saripaar.annotation.Domain;
-import com.mobsandgeeks.saripaar.annotation.Order;
-import com.mobsandgeeks.saripaar.annotation.Url;
 import com.mobsandgeeks.saripaar.annotation.Email;
-import com.mobsandgeeks.saripaar.annotation.Isbn;
+import com.mobsandgeeks.saripaar.annotation.Future;
 import com.mobsandgeeks.saripaar.annotation.IpAddress;
+import com.mobsandgeeks.saripaar.annotation.Isbn;
+import com.mobsandgeeks.saripaar.annotation.Length;
 import com.mobsandgeeks.saripaar.annotation.Max;
 import com.mobsandgeeks.saripaar.annotation.Min;
 import com.mobsandgeeks.saripaar.annotation.NotEmpty;
+import com.mobsandgeeks.saripaar.annotation.Order;
 import com.mobsandgeeks.saripaar.annotation.Password;
+import com.mobsandgeeks.saripaar.annotation.Past;
 import com.mobsandgeeks.saripaar.annotation.Pattern;
 import com.mobsandgeeks.saripaar.annotation.Select;
-import com.mobsandgeeks.saripaar.annotation.Size;
+import com.mobsandgeeks.saripaar.annotation.Url;
 import com.mobsandgeeks.saripaar.annotation.ValidateUsing;
 import com.mobsandgeeks.saripaar.exception.ConversionException;
 
@@ -116,21 +126,21 @@
  * @since 1.0
  */
 @SuppressWarnings("unchecked")
-public final class Validator {
+public class Validator {
 
     // Entries are registered inside a static block (Placed at the end of source)
     private static final Registry SARIPAAR_REGISTRY = new Registry();
 
     // Holds adapter entries that are mapped to corresponding views.
-    private static final
-            Map<Class<? extends View>, HashMap<Class<?>, ViewDataAdapter>> REGISTERED_ADAPTERS =
+    private final
+            Map<Class<? extends View>, HashMap<Class<?>, ViewDataAdapter>> mRegisteredAdaptersMap =
                     new HashMap<Class<? extends View>, HashMap<Class<?>, ViewDataAdapter>>();
 
     // Attributes
     private Object mController;
     private Mode mValidationMode;
     private ValidationContext mValidationContext;
-    private Map<View, ArrayList<RuleAdapterPair>> mViewRulesMap;
+    private Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> mViewRulesMap;
     private boolean mOrderedFields;
     private SequenceComparator mSequenceComparator;
     private ViewValidatedAction mViewValidatedAction;
@@ -148,9 +158,20 @@ public Validator(final Object controller) {
         assertNotNull(controller, "controller");
         mController = controller;
         mValidationMode = Mode.BURST;
-        mValidationContext = new ValidationContext();
         mSequenceComparator = new SequenceComparator();
         mViewValidatedAction = new DefaultViewValidatedAction();
+
+        // Instantiate a ValidationContext
+        if (controller instanceof Activity) {
+            mValidationContext = new ValidationContext((Activity) controller);
+        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB
+                && controller instanceof Fragment) {
+            Activity activity = ((Fragment) controller).getActivity();
+            mValidationContext = new ValidationContext(activity);
+        }
+        // Else, lazy init ValidationContext in #getRuleAdapterPair(Annotation, Field)
+        // or void #put(VIEW, QuickRule<VIEW>) by obtaining a Context from one of the
+        // View instances.
     }
 
     /**
@@ -202,15 +223,15 @@ public static void registerAnnotation(final Class<? extends Annotation> ruleAnno
      * @param <VIEW>  The {@link android.view.View} type.
      * @param <DATA_TYPE>  The {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} type.
      */
-    public static <VIEW extends View, DATA_TYPE> void registerAdapter(
+    public <VIEW extends View, DATA_TYPE> void registerAdapter(
             final Class<VIEW> viewType, final ViewDataAdapter<VIEW, DATA_TYPE> viewDataAdapter) {
         assertNotNull(viewType, "viewType");
         assertNotNull(viewDataAdapter, "viewDataAdapter");
 
-        HashMap<Class<?>, ViewDataAdapter> dataTypeAdapterMap = REGISTERED_ADAPTERS.get(viewType);
+        HashMap<Class<?>, ViewDataAdapter> dataTypeAdapterMap = mRegisteredAdaptersMap.get(viewType);
         if (dataTypeAdapterMap == null) {
             dataTypeAdapterMap = new HashMap<Class<?>, ViewDataAdapter>();
-            REGISTERED_ADAPTERS.put(viewType, dataTypeAdapterMap);
+            mRegisteredAdaptersMap.put(viewType, dataTypeAdapterMap);
         }
 
         // Find adapter's data type
@@ -391,6 +412,10 @@ public boolean cancelAsync() {
             throw new IllegalArgumentException("'quickRules' cannot be empty.");
         }
 
+        if (mValidationContext == null) {
+            mValidationContext = new ValidationContext(view.getContext());
+        }
+
         // Create rules
         createRulesSafelyAndLazily(true);
 
@@ -403,14 +428,14 @@ public boolean cancelAsync() {
         }
 
         // If there are no rules, create an empty list
-        ArrayList<RuleAdapterPair> ruleAdapterPairs = mViewRulesMap.get(view);
+        ArrayList<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs = mViewRulesMap.get(view);
         ruleAdapterPairs = ruleAdapterPairs == null
-                ? new ArrayList<RuleAdapterPair>() : ruleAdapterPairs;
+                ? new ArrayList<Pair<Rule, ViewDataAdapter>>() : ruleAdapterPairs;
 
         // Add the quick rule to existing rules
         for (QuickRule quickRule : quickRules) {
             if (quickRule != null) {
-                ruleAdapterPairs.add(new RuleAdapterPair(quickRule, null));
+                ruleAdapterPairs.add(new Pair(quickRule, null));
             }
         }
         Collections.sort(ruleAdapterPairs, mSequenceComparator);
@@ -533,17 +558,20 @@ private boolean isSaripaarAnnotatedField(final Field field,
         return hasOrderAnnotation || hasSaripaarAnnotation;
     }
 
-    private Map<View, ArrayList<RuleAdapterPair>> createRules(final List<Field> annotatedFields) {
+    private Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> createRules(
+            final List<Field> annotatedFields) {
 
-        final Map<View, ArrayList<RuleAdapterPair>> viewRulesMap =
-                new LinkedHashMap<View, ArrayList<RuleAdapterPair>>();
+        final Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> viewRulesMap =
+                new LinkedHashMap<View, ArrayList<Pair<Rule, ViewDataAdapter>>>();
 
         for (Field field : annotatedFields) {
-            final ArrayList<RuleAdapterPair> ruleAdapterPairs = new ArrayList<RuleAdapterPair>();
+            final ArrayList<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs =
+                    new ArrayList<Pair<Rule, ViewDataAdapter>>();
             final Annotation[] fieldAnnotations = field.getAnnotations();
             for (Annotation fieldAnnotation : fieldAnnotations) {
                 if (isSaripaarAnnotation(fieldAnnotation.annotationType())) {
-                    RuleAdapterPair ruleAdapterPair = getRuleAdapterPair(fieldAnnotation, field);
+                    Pair<Rule, ViewDataAdapter> ruleAdapterPair =
+                            getRuleAdapterPair(fieldAnnotation, field);
                     ruleAdapterPairs.add(ruleAdapterPair);
                 }
             }
@@ -555,7 +583,7 @@ private boolean isSaripaarAnnotatedField(final Field field,
         return viewRulesMap;
     }
 
-    private RuleAdapterPair getRuleAdapterPair(final Annotation saripaarAnnotation,
+    private Pair<Rule, ViewDataAdapter> getRuleAdapterPair(final Annotation saripaarAnnotation,
             final Field viewField) {
         final Class<? extends Annotation> annotationType = saripaarAnnotation.annotationType();
         final Class<?> viewFieldType = viewField.getType();
@@ -577,11 +605,15 @@ private RuleAdapterPair getRuleAdapterPair(final Annotation saripaarAnnotation,
             throw new UnsupportedOperationException(message);
         }
 
+        if (mValidationContext == null) {
+            mValidationContext = new ValidationContext(getContext(viewField));
+        }
+
         final Class<? extends AnnotationRule> ruleType = getRuleType(saripaarAnnotation);
         final AnnotationRule rule = Reflector.instantiateRule(ruleType,
                 saripaarAnnotation, mValidationContext);
 
-        return new RuleAdapterPair(rule, dataAdapter);
+        return new Pair<Rule, ViewDataAdapter>(rule, dataAdapter);
     }
 
     private ViewDataAdapter getDataAdapter(final Class<? extends Annotation> annotationType,
@@ -594,7 +626,7 @@ private ViewDataAdapter getDataAdapter(final Class<? extends Annotation> annotat
         // If we are unable to find a Saripaar stock adapter, check the registered adapters
         if (dataAdapter == null) {
             HashMap<Class<?>, ViewDataAdapter> dataTypeAdapterMap =
-                    REGISTERED_ADAPTERS.get(viewFieldType);
+                    mRegisteredAdaptersMap.get(viewFieldType);
             dataAdapter = dataTypeAdapterMap != null
                     ? dataTypeAdapterMap.get(adapterDataType)
                     : null;
@@ -603,6 +635,20 @@ private ViewDataAdapter getDataAdapter(final Class<? extends Annotation> annotat
         return dataAdapter;
     }
 
+    private Context getContext(final Field viewField) {
+        Context context = null;
+        try {
+            if (!viewField.isAccessible()) {
+                viewField.setAccessible(true);
+            }
+            View view = (View) viewField.get(mController);
+            context = view.getContext();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        }
+        return context;
+    }
+
     private Class<? extends AnnotationRule> getRuleType(final Annotation ruleAnnotation) {
         ValidateUsing validateUsing = ruleAnnotation.annotationType()
                 .getAnnotation(ValidateUsing.class);
@@ -648,7 +694,7 @@ private void validateFieldsWithCallbackTill(final View view, final boolean order
             mAsyncValidationTask = new AsyncValidationTask(view, orderedFields, reasonSuffix);
             mAsyncValidationTask.execute((Void[]) null);
         } else {
-            handleCallbacks(validateTill(view, orderedFields, reasonSuffix));
+            triggerValidationListenerCallback(validateTill(view, orderedFields, reasonSuffix));
         }
     }
 
@@ -666,7 +712,7 @@ private synchronized ValidationReport validateTill(final View view,
         return getValidationReport(view, mViewRulesMap, mValidationMode);
     }
 
-    private void handleCallbacks(final ValidationReport validationReport) {
+    private void triggerValidationListenerCallback(final ValidationReport validationReport) {
         final List<ValidationError> validationErrors = validationReport.errors;
 
         if (validationErrors.size() == 0 && !validationReport.hasMoreErrors) {
@@ -678,15 +724,15 @@ private void handleCallbacks(final ValidationReport validationReport) {
 
     private void assertOrderedFields(final boolean orderedRules, final String reasonSuffix) {
         if (!orderedRules) {
-            String message = String.format(
-                    "Rules are unordered, all view fields should be ordered "
-                    + "using the '@Order' annotation " + reasonSuffix);
+            String message = "Rules are unordered, all view fields should be ordered "
+                    + "using the '@Order' annotation " + reasonSuffix;
             throw new IllegalStateException(message);
         }
     }
 
     private ValidationReport getValidationReport(final View targetView,
-            final Map<View, ArrayList<RuleAdapterPair>> viewRulesMap, final Mode validationMode) {
+            final Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> viewRulesMap,
+                    final Mode validationMode) {
 
         final List<ValidationError> validationErrors = new ArrayList<ValidationError>();
         final Set<View> views = viewRulesMap.keySet();
@@ -699,7 +745,7 @@ private ValidationReport getValidationReport(final View targetView,
 
         validation:
         for (View view : views) {
-            ArrayList<RuleAdapterPair> ruleAdapterPairs = viewRulesMap.get(view);
+            ArrayList<Pair<Rule, ViewDataAdapter>> ruleAdapterPairs = viewRulesMap.get(view);
             int nRules = ruleAdapterPairs.size();
 
             // Validate all the rules for the given view.
@@ -708,9 +754,9 @@ private ValidationReport getValidationReport(final View targetView,
 
                 // Validate only views that are visible and enabled
                 if (view.isShown() && view.isEnabled()) {
-                    RuleAdapterPair ruleAdapterPair = ruleAdapterPairs.get(i);
+                    Pair<Rule, ViewDataAdapter> ruleAdapterPair = ruleAdapterPairs.get(i);
                     Rule failedRule = validateViewWithRule(
-                            view, ruleAdapterPair.rule, ruleAdapterPair.dataAdapter);
+                            view, ruleAdapterPair.first, ruleAdapterPair.second);
                     boolean isLastRuleForView = nRules == i + 1;
 
                     if (failedRule != null) {
@@ -866,28 +912,19 @@ private View getViewBefore(final View view) {
     public enum Mode {
 
         /**
-         * BURST mode will validate all rules before calling the
+         * BURST mode will validate all rules in all views before calling the
          * {@link Validator.ValidationListener#onValidationFailed(java.util.List)}
-         * callback.
+         * callback. Ordering and sequencing is optional.
          */
         BURST,
 
         /**
-         * IMMEDIATE mode will stop the validation as soon as it encounters the first failing rule.
+         * IMMEDIATE mode will stop the validation after validating all the rules
+         * of the first failing view. Requires ordered rules, sequencing is optional.
          */
         IMMEDIATE
     }
 
-    static class RuleAdapterPair {
-        Rule rule;
-        ViewDataAdapter dataAdapter;
-
-        RuleAdapterPair(final Rule rule, final ViewDataAdapter dataAdapter) {
-            this.rule = rule;
-            this.dataAdapter = dataAdapter;
-        }
-    }
-
     static class ValidationReport {
         List<ValidationError> errors;
         boolean hasMoreErrors;
@@ -917,7 +954,7 @@ protected ValidationReport doInBackground(final Void... params) {
 
         @Override
         protected void onPostExecute(final ValidationReport validationReport) {
-            handleCallbacks(validationReport);
+            triggerValidationListenerCallback(validationReport);
         }
     }
 
@@ -927,6 +964,11 @@ protected void onPostExecute(final ValidationReport validationReport) {
                 new CheckBoxBooleanAdapter(),
                 AssertFalse.class, AssertTrue.class, Checked.class);
 
+        // RadioGroupBooleanAdapter
+        SARIPAAR_REGISTRY.register(RadioGroup.class, Boolean.class,
+                new RadioGroupBooleanAdapter(),
+                Checked.class);
+
         // RadioButtonBooleanAdapter
         SARIPAAR_REGISTRY.register(RadioButton.class, Boolean.class,
                 new RadioButtonBooleanAdapter(),
@@ -946,9 +988,8 @@ protected void onPostExecute(final ValidationReport validationReport) {
         // TextViewStringAdapter
         SARIPAAR_REGISTRY.register(
                 ConfirmEmail.class, ConfirmPassword.class, CreditCard.class,
-                Domain.class, Email.class, IpAddress.class, Isbn.class,
-                NotEmpty.class, Password.class, Pattern.class, Size.class,
-                Url.class);
-//            Digits.class, Future.class, Past.class
+                Digits.class, Domain.class, Email.class, Future.class,
+                IpAddress.class, Isbn.class, Length.class, NotEmpty.class,
+                Password.class, Past.class, Pattern.class, Url.class);
     }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioGroupBooleanAdapter.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioGroupBooleanAdapter.java
new file mode 100644
index 0000000..fad9f67
--- /dev/null
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/adapter/RadioGroupBooleanAdapter.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2015 Mobs & Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.adapter;
+
+import android.view.View;
+import android.widget.RadioGroup;
+
+import com.mobsandgeeks.saripaar.exception.ConversionException;
+
+
+/**
+ * Adapter that returns a {@link java.lang.Boolean} value from a {@link android.widget.RadioGroup}.
+ *
+ * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
+ * @since 2.0
+ */
+public class RadioGroupBooleanAdapter implements ViewDataAdapter<RadioGroup, Boolean> {
+
+    @Override
+    public Boolean getData(RadioGroup radioGroup) throws ConversionException {
+        return radioGroup.getCheckedRadioButtonId() != View.NO_ID;
+    }
+}
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertFalse.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertFalse.java
index 79a800c..46df3f7 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertFalse.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertFalse.java
@@ -29,7 +29,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface AssertFalse {
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Should be false";
+    int sequence()      default -1;
+    int messageResId()  default -1;
+    String message()    default "Should be false";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertTrue.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertTrue.java
index 025b289..4a8ee7b 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertTrue.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertTrue.java
@@ -29,7 +29,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface AssertTrue {
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Should be true";
+    int sequence()      default -1;
+    int messageResId()  default -1;
+    String message()    default "Should be true";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Checked.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Checked.java
index c09de56..4926464 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Checked.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Checked.java
@@ -29,9 +29,9 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Checked {
-    public boolean value()      default true;
+    boolean value()     default true;
 
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Must be checked";
+    int sequence()      default -1;
+    int messageResId()  default -1;
+    String message()    default "Must be checked";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java
index de64946..5eada96 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java
@@ -29,7 +29,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface ConfirmEmail {
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Emails don't match";
+    int sequence()      default -1;
+    int messageResId()  default -1;
+    String message()    default "Emails don't match";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
index 432396a..a03e44d 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
@@ -29,7 +29,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface ConfirmPassword {
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Passwords don't match";
+    int sequence()      default -1;
+    int messageResId()  default -1;
+    String message()    default "Passwords don't match";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/CreditCard.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/CreditCard.java
index 2affc8e..707da6c 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/CreditCard.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/CreditCard.java
@@ -29,16 +29,16 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface CreditCard {
-    public Type[] cardTypes() default {
+    Type[] cardTypes()  default {
         Type.AMEX, Type.DINERS, Type.DISCOVER,
         Type.MASTERCARD, Type.VISA,
     };
 
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Invalid card";
+    int sequence()      default -1;
+    int messageResId()  default -1;
+    String message()    default "Invalid card";
 
-    public enum Type {
+    enum Type {
         AMEX, DINERS, DISCOVER, MASTERCARD, VISA, NONE
     }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMax.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMax.java
index 324d6d3..0ab601e 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMax.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMax.java
@@ -29,9 +29,9 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface DecimalMax {
-    public double value();
+    double value();
 
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Should be less than max value";
+    int sequence()      default -1;
+    int messageResId()  default -1;
+    String message()    default "Should be less than max value";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMin.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMin.java
index 66ef3b7..c94bf2b 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMin.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMin.java
@@ -29,9 +29,9 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface DecimalMin {
-    public double value();
+    double value();
 
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Should be less than min value";
+    int sequence()      default -1;
+    int messageResId()  default -1;
+    String message()    default "Should be less than min value";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Digits.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Digits.java
index 38f8648..526a749 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Digits.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Digits.java
@@ -29,7 +29,10 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Digits {
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Should be a digit";
+    int integer();
+    int fraction()      default 2;
+
+    int sequence()      default -1;
+    int messageResId()  default -1;
+    String message()    default "Should be a digit";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Domain.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Domain.java
index 693c69b..6fc53b3 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Domain.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Domain.java
@@ -29,9 +29,9 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Domain {
-    public boolean allowLocal() default false;
+    boolean allowLocal()    default false;
 
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Invalid domain name";
+    int sequence()          default -1;
+    int messageResId()      default -1;
+    String message()        default "Invalid domain name";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java
index 0e937ab..da2a984 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java
@@ -29,9 +29,9 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Email {
-    public boolean allowLocal() default false;
+    boolean allowLocal()    default false;
 
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Invalid email";
+    int sequence()          default -1;
+    int messageResId()      default -1;
+    String message()        default "Invalid email";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java
index ffb7605..29bb0bf 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java
@@ -14,6 +14,7 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import com.mobsandgeeks.saripaar.DateFormats;
 import com.mobsandgeeks.saripaar.rule.FutureRule;
 
 import java.lang.annotation.ElementType;
@@ -29,7 +30,10 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Future {
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Date should be in future";
+    String dateFormat()     default DateFormats.DMY;
+    int dateFormatResId()   default -1;
+
+    int sequence()          default -1;
+    int messageResId()      default -1;
+    String message()        default "Date should be in the future";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/IpAddress.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/IpAddress.java
index dc7ee42..c4e9f1f 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/IpAddress.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/IpAddress.java
@@ -29,7 +29,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface IpAddress {
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Invalid IP address";
+    int sequence()      default -1;
+    int messageResId()  default -1;
+    String message()    default "Invalid IP address";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Isbn.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Isbn.java
index d4a4f27..6b03326 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Isbn.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Isbn.java
@@ -29,7 +29,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Isbn {
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Invalid ISBN";
+    int sequence()      default -1;
+    int messageResId()  default -1;
+    String message()    default "Invalid ISBN";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Size.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Length.java
similarity index 69%
rename from saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Size.java
rename to saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Length.java
index 4580fdb..dcaa632 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Size.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Length.java
@@ -14,7 +14,7 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
-import com.mobsandgeeks.saripaar.rule.SizeRule;
+import com.mobsandgeeks.saripaar.rule.LengthRule;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -25,15 +25,15 @@
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 2.0
  */
-@ValidateUsing(SizeRule.class)
+@ValidateUsing(LengthRule.class)
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
-public @interface Size {
-    public int min()            default Integer.MIN_VALUE;
-    public int max()            default Integer.MAX_VALUE;
-    public boolean trim()       default false;
+public @interface Length {
+    int min()           default Integer.MIN_VALUE;
+    int max()           default Integer.MAX_VALUE;
+    boolean trim()      default false;
 
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Invalid length";
+    int sequence()      default -1;
+    int messageResId()  default -1;
+    String message()    default "Invalid length";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java
index d5f6238..20671e7 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java
@@ -29,9 +29,9 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Max {
-    public int value();
+    int value();
 
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Should be less than max value";
+    int sequence()      default -1;
+    int messageResId()  default -1;
+    String message()    default "Should be less than max value";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java
index 43ce262..c957ca5 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java
@@ -29,9 +29,9 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Min {
-    public int value();
+    int value();
 
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Should be greater than min value";
+    int sequence()      default -1;
+    int messageResId()  default -1;
+    String message()    default "Should be greater than min value";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java
index af75f17..e43c6e7 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java
@@ -29,9 +29,9 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface NotEmpty {
-    public boolean trim()       default false;
+    boolean trim()      default false;
 
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "This field is required.";
+    int sequence()      default -1;
+    int messageResId()  default -1;
+    String message()    default "This field is required";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Order.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Order.java
index bf123fe..7222482 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Order.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Order.java
@@ -26,5 +26,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Order {
-    public int value();
+    int value();
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Password.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Password.java
index ac721be..059173a 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Password.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Password.java
@@ -29,14 +29,14 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Password {
-    public int min()            default 6;
-    public Scheme scheme()      default Scheme.ANY;
+    int min()           default 6;
+    Scheme scheme()     default Scheme.ANY;
 
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Invalid password";
+    int sequence()      default -1;
+    int messageResId()  default -1;
+    String message()    default "Invalid password";
 
-    public enum Scheme {
+    enum Scheme {
         ANY, ALPHA, ALPHA_MIXED_CASE,
         NUMERIC, ALPHA_NUMERIC, ALPHA_NUMERIC_MIXED_CASE,
         ALPHA_NUMERIC_SYMBOLS, ALPHA_NUMERIC_MIXED_CASE_SYMBOLS
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Past.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Past.java
index c3bd06f..3f14844 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Past.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Past.java
@@ -14,6 +14,7 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import com.mobsandgeeks.saripaar.DateFormats;
 import com.mobsandgeeks.saripaar.rule.PastRule;
 
 import java.lang.annotation.ElementType;
@@ -29,7 +30,10 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Past {
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Date should be in past";
+    String dateFormat()     default DateFormats.DMY;
+    int dateFormatResId()   default -1;
+
+    int sequence()          default -1;
+    int messageResId()      default -1;
+    String message()        default "Date should be in the past";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Pattern.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Pattern.java
index e3db603..300f930 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Pattern.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Pattern.java
@@ -29,10 +29,10 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Pattern {
-    public String regex();
-    public boolean caseSensitive()  default true;
+    String regex();
+    boolean caseSensitive() default true;
 
-    public int sequence()           default -1;
-    public int messageResId()       default -1;
-    public String message()         default "Input does not match pattern";
+    int sequence()          default -1;
+    int messageResId()      default -1;
+    String message()        default "Input does not match pattern";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Select.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Select.java
index 53ae881..11e6963 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Select.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Select.java
@@ -29,9 +29,9 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Select {
-    public int defaultSelection()   default 0;
+    int defaultSelection()  default 0;
 
-    public int sequence()           default -1;
-    public int messageResId()       default -1;
-    public String message()         default "Select a value";
+    int sequence()          default -1;
+    int messageResId()      default -1;
+    String message()        default "Select a value";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Url.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Url.java
index c52dfc4..496bda4 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Url.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Url.java
@@ -29,10 +29,10 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Url {
-    public String[] schemes()       default { "http", "https", "ftp" };
-    public boolean allowFragments() default true;
+    String[] schemes()          default { "http", "https", "ftp" };
+    boolean allowFragments()    default true;
 
-    public int sequence()           default -1;
-    public int messageResId()       default -1;
-    public String message()         default "Invalid URL";
+    int sequence()              default -1;
+    int messageResId()          default -1;
+    String message()            default "Invalid URL";
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/exception/SaripaarViolationException.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/exception/SaripaarViolationException.java
index 7af56ba..c35f93a 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/exception/SaripaarViolationException.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/exception/SaripaarViolationException.java
@@ -26,5 +26,4 @@
     public SaripaarViolationException(final String message) {
         super(message);
     }
-
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/CreditCardRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/CreditCardRule.java
index 27c856f..f119d22 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/CreditCardRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/CreditCardRule.java
@@ -56,6 +56,6 @@ public boolean isValid(final String creditCardNumber) {
             options = CreditCardValidator.NONE;
         }
 
-        return new CreditCardValidator(options).isValid(creditCardNumber);
+        return new CreditCardValidator(options).isValid(creditCardNumber.replaceAll("\\s", ""));
     }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/DigitsRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/DigitsRule.java
index def5356..455df18 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/DigitsRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/DigitsRule.java
@@ -28,7 +28,11 @@ protected DigitsRule(final Digits digits) {
     }
 
     @Override
-    public boolean isValid(final String data) {
-        return false;
+    public boolean isValid(final String digits) {
+        int integer = mRuleAnnotation.integer();
+        int fraction = mRuleAnnotation.fraction();
+
+        String digitsRegex = String.format("(\\d{0,%d})(\\.\\d{1,%d})?", integer, fraction);
+        return digits.matches(digitsRegex);
     }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java
index f5026cb..15b5b07 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java
@@ -14,23 +14,47 @@
 
 package com.mobsandgeeks.saripaar.rule;
 
-import com.mobsandgeeks.saripaar.AnnotationRule;
+import android.content.Context;
+
+import com.mobsandgeeks.saripaar.ContextualAnnotationRule;
+import com.mobsandgeeks.saripaar.ValidationContext;
 import com.mobsandgeeks.saripaar.annotation.Future;
 
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
 import java.util.Date;
 
 /**
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 2.0
  */
-public class FutureRule extends AnnotationRule<Future, Date> {
+public class FutureRule extends ContextualAnnotationRule<Future, String> {
+    private int mDateFormatResId;
+    private String mDateFormatString;
 
-    protected FutureRule(final Future future) {
-        super(future);
+    protected FutureRule(final ValidationContext validationContext, final Future future) {
+        super(validationContext, future);
+        mDateFormatResId = future.dateFormatResId();
+        mDateFormatString = future.dateFormat();
     }
 
     @Override
-    public boolean isValid(final Date data) {
-        return false;
+    public boolean isValid(final String dateString) {
+        DateFormat dateFormat = getDateFormat();
+        Date parsedDate = null;
+        try {
+            parsedDate = dateFormat.parse(dateString);
+        } catch (ParseException ignored) {}
+
+        Date now = new Date();
+        return parsedDate != null && parsedDate.after(now);
+    }
+
+    private DateFormat getDateFormat() {
+        Context context = mValidationContext.getContext();
+        String dateFormatString =  mDateFormatResId != -1
+                ? context.getString(mDateFormatResId) : mDateFormatString;
+        return new SimpleDateFormat(dateFormatString);
     }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SizeRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/LengthRule.java
similarity index 91%
rename from saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SizeRule.java
rename to saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/LengthRule.java
index 778538d..b65992d 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SizeRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/LengthRule.java
@@ -15,16 +15,16 @@
 package com.mobsandgeeks.saripaar.rule;
 
 import com.mobsandgeeks.saripaar.AnnotationRule;
-import com.mobsandgeeks.saripaar.annotation.Size;
+import com.mobsandgeeks.saripaar.annotation.Length;
 
 /**
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 2.0
  */
-public class SizeRule extends AnnotationRule<Size, String> {
+public class LengthRule extends AnnotationRule<Length, String> {
 
-    protected SizeRule(final Size size) {
-        super(size);
+    protected LengthRule(final Length length) {
+        super(length);
     }
 
     @Override
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PastRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PastRule.java
index 1224180..426aaec 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PastRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/PastRule.java
@@ -14,23 +14,47 @@
 
 package com.mobsandgeeks.saripaar.rule;
 
-import com.mobsandgeeks.saripaar.AnnotationRule;
+import android.content.Context;
+
+import com.mobsandgeeks.saripaar.ContextualAnnotationRule;
+import com.mobsandgeeks.saripaar.ValidationContext;
 import com.mobsandgeeks.saripaar.annotation.Past;
 
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
 import java.util.Date;
 
 /**
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
  * @since 2.0
  */
-public class PastRule extends AnnotationRule<Past, Date> {
+public class PastRule extends ContextualAnnotationRule<Past, String> {
+    private int mDateFormatResId;
+    private String mDateFormatString;
 
-    protected PastRule(final Past past) {
-        super(past);
+    protected PastRule(final ValidationContext validationContext, final Past past) {
+        super(validationContext, past);
+        mDateFormatResId = past.dateFormatResId();
+        mDateFormatString = past.dateFormat();
     }
 
     @Override
-    public boolean isValid(final Date data) {
-        return false;
+    public boolean isValid(final String dateString) {
+        DateFormat dateFormat = getDateFormat();
+        Date parsedDate = null;
+        try {
+            parsedDate = dateFormat.parse(dateString);
+        } catch (ParseException ignored) {}
+
+        Date now = new Date();
+        return parsedDate != null && parsedDate.before(now);
+    }
+
+    private DateFormat getDateFormat() {
+        Context context = mValidationContext.getContext();
+        String dateFormatString =  mDateFormatResId != -1
+                ? context.getString(mDateFormatResId) : mDateFormatString;
+        return new SimpleDateFormat(dateFormatString);
     }
 }
diff --git a/saripaar/src/main/java/commons/validator/routines/AbstractFormatValidator.java b/saripaar/src/main/java/commons/validator/routines/AbstractFormatValidator.java
index 577e3f7..1bd3a03 100644
--- a/saripaar/src/main/java/commons/validator/routines/AbstractFormatValidator.java
+++ b/saripaar/src/main/java/commons/validator/routines/AbstractFormatValidator.java
@@ -14,12 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines;
 
 import java.text.Format;
 import java.text.ParsePosition;
 import java.util.Locale;
+import java.io.Serializable;
 
 /**
  * <p>Abstract class for <i>Format</i> based Validation.</p>
@@ -27,9 +27,12 @@
  * <p>This is a <i>base</i> class for building Date and Number
  *    Validators using format parsing.</p>
  *
+ * @version $Revision$
  * @since Validator 1.3.0
  */
-public abstract class AbstractFormatValidator {
+public abstract class AbstractFormatValidator implements Serializable {
+
+    private static final long serialVersionUID = -4690687565200568258L;
 
     private final boolean strict;
 
@@ -174,18 +177,23 @@ protected String format(Object value, Format formatter) {
      * @return The parsed value if valid or <code>null</code> if invalid.
      */
     protected Object parse(String value, Format formatter) {
+
         ParsePosition pos = new ParsePosition(0);
         Object parsedValue = formatter.parseObject(value, pos);
         if (pos.getErrorIndex() > -1) {
             return null;
         }
+
         if (isStrict() && pos.getIndex() < value.length()) {
             return null;
         }
+
         if (parsedValue != null) {
             parsedValue = processParsedValue(parsedValue, formatter);
         }
+
         return parsedValue;
+
     }
 
     /**
@@ -209,4 +217,5 @@ protected Object parse(String value, Format formatter) {
      * @return The <code>NumberFormat</code> to created.
      */
     protected abstract Format getFormat(String pattern, Locale locale);
+
 }
diff --git a/saripaar/src/main/java/commons/validator/routines/AbstractNumberValidator.java b/saripaar/src/main/java/commons/validator/routines/AbstractNumberValidator.java
index b287519..6eb6329 100644
--- a/saripaar/src/main/java/commons/validator/routines/AbstractNumberValidator.java
+++ b/saripaar/src/main/java/commons/validator/routines/AbstractNumberValidator.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines;
 
 import java.text.DecimalFormatSymbols;
@@ -29,10 +28,13 @@
  * <p>This is a <i>base</i> class for building Number
  *    Validators using format parsing.</p>
  *
+ * @version $Revision$
  * @since Validator 1.3.0
  */
 public abstract class AbstractNumberValidator extends AbstractFormatValidator {
 
+    private static final long serialVersionUID = -3088817875906765463L;
+
     /** Standard <code>NumberFormat</code> type */
     public static final int STANDARD_FORMAT = 0;
 
@@ -41,8 +43,9 @@
 
     /** Percent <code>NumberFormat</code> type */
     public static final int PERCENT_FORMAT  = 2;
+
     private final boolean allowFractions;
-    private final int formatType;
+    private final int     formatType;
 
     /**
      * Construct an instance with specified <i>strict</i>
@@ -93,7 +96,7 @@ public int getFormatType() {
      */
     public boolean isValid(String value, String pattern, Locale locale) {
         Object parsedValue = parse(value, pattern, locale);
-        return parsedValue != null;
+        return (parsedValue == null ? false : true);
     }
 
     /**
@@ -120,9 +123,8 @@ public boolean isInRange(Number value, Number min, Number max) {
     public boolean minValue(Number value, Number min) {
         if (isAllowFractions()) {
             return (value.doubleValue() >= min.doubleValue());
-        } else {
-            return (value.longValue() >= min.longValue());
         }
+        return (value.longValue() >= min.longValue());
     }
 
     /**
@@ -136,9 +138,8 @@ public boolean minValue(Number value, Number min) {
     public boolean maxValue(Number value, Number max) {
         if (isAllowFractions()) {
             return (value.doubleValue() <= max.doubleValue());
-        } else {
-            return (value.longValue() <= max.longValue());
         }
+        return (value.longValue() <= max.longValue());
     }
 
     /**
@@ -151,12 +152,14 @@ public boolean maxValue(Number value, Number max) {
      * @return The parsed value if valid or <code>null</code> if invalid.
      */
     protected Object parse(String value, String pattern, Locale locale) {
+
         value = (value == null ? null : value.trim());
         if (value == null || value.length() == 0) {
             return null;
         }
         Format formatter = getFormat(pattern, locale);
         return parse(value, formatter);
+
     }
 
     /**
@@ -180,6 +183,7 @@ protected Object parse(String value, String pattern, Locale locale) {
      * @return The <code>NumberFormat</code> to created.
      */
     protected Format getFormat(String pattern, Locale locale) {
+
         NumberFormat formatter = null;
         boolean usePattern = (pattern != null && pattern.length() > 0);
         if (!usePattern) {
@@ -190,6 +194,7 @@ protected Format getFormat(String pattern, Locale locale) {
             DecimalFormatSymbols symbols = new DecimalFormatSymbols(locale);
             formatter = new DecimalFormat(pattern, symbols);
         }
+
         if (determineScale(formatter) == 0) {
             formatter.setParseIntegerOnly(true);
         }
diff --git a/saripaar/src/main/java/commons/validator/routines/CodeValidator.java b/saripaar/src/main/java/commons/validator/routines/CodeValidator.java
index 6dcef6d..07b074a 100644
--- a/saripaar/src/main/java/commons/validator/routines/CodeValidator.java
+++ b/saripaar/src/main/java/commons/validator/routines/CodeValidator.java
@@ -1,12 +1,12 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
+ * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * the License.  You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -14,9 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines;
 
+import java.io.Serializable;
+
 import commons.validator.routines.checkdigit.CheckDigit;
 
 /**
@@ -25,28 +26,32 @@
  * <p>
  * Performs the following validations on a code:
  * <ul>
- * <li>Check the <i>format</i> of the code using a <i>regular expression.</i> (if specified)</li>
- * <li>Check the <i>minimum</i> and <i>maximum</i> length (if specified) of the <i>parsed</i> code
- * (i.e. parsed by the <i>regular expression</i>).</li>
- * <li>Performs {@link CheckDigit} validation on the parsed code (if specified).</li>
+ *   <li>Check the <i>format</i> of the code using a <i>regular expression.</i> (if specified)</li>
+ *   <li>Check the <i>minimum</i> and <i>maximum</i> length  (if specified) of the <i>parsed</i> code
+ *      (i.e. parsed by the <i>regular expression</i>).</li>
+ *   <li>Performs {@link CheckDigit} validation on the parsed code (if specified).</li>
  * </ul>
  * <p>
  * Configure the validator with the appropriate regular expression, minimum/maximum length
  * and {@link CheckDigit} validator and then call one of the two validation
  * methods provided:</p>
- * <ul>
- * <li><code>boolean isValid(code)</code></li>
- * <li><code>String validate(code)</code></li>
- * </ul>
+ *    <ul>
+ *       <li><code>boolean isValid(code)</code></li>
+ *       <li><code>String validate(code)</code></li>
+ *    </ul>
  * <p>
  * Codes often include <i>format</i> characters - such as hyphens - to make them
  * more easily human readable. These can be removed prior to length and check digit
- * validation by specifying them as a <i>non-capturing</i> group in the regular
- * expression (i.e. use the <code>(?: )</code> notation).</p>
+ * validation by  specifying them as a <i>non-capturing</i> group in the regular
+ * expression (i.e. use the <code>(?:   )</code> notation).
  *
+ * @version $Revision$
  * @since Validator 1.4
  */
-public final class CodeValidator {
+public final class CodeValidator implements Serializable {
+
+    private static final long serialVersionUID = 446960910870938233L;
+
     private final RegexValidator regexValidator;
     private final int minLength;
     private final int maxLength;
@@ -56,7 +61,7 @@
      * Construct a code validator with a specified regular
      * expression and {@link CheckDigit}.
      *
-     * @param regex      The format regular expression
+     * @param regex The format regular expression
      * @param checkdigit The check digit validation routine
      */
     public CodeValidator(String regex, CheckDigit checkdigit) {
@@ -67,9 +72,9 @@ public CodeValidator(String regex, CheckDigit checkdigit) {
      * Construct a code validator with a specified regular
      * expression, length and {@link CheckDigit}.
      *
-     * @param regex      The format regular expression.
-     * @param length     The length of the code
-     *                   (sets the mimimum/maximum to the same)
+     * @param regex The format regular expression.
+     * @param length The length of the code
+     *  (sets the mimimum/maximum to the same)
      * @param checkdigit The check digit validation routine
      */
     public CodeValidator(String regex, int length, CheckDigit checkdigit) {
@@ -80,13 +85,13 @@ public CodeValidator(String regex, int length, CheckDigit checkdigit) {
      * Construct a code validator with a specified regular
      * expression, minimum/maximum length and {@link CheckDigit} validation.
      *
-     * @param regex      The regular expression validator
-     * @param minLength  The minimum length of the code
-     * @param maxLength  The maximum length of the code
+     * @param regex The regular expression validator
+     * @param minLength The minimum length of the code
+     * @param maxLength The maximum length of the code
      * @param checkdigit The check digit validation routine
      */
     public CodeValidator(String regex, int minLength, int maxLength,
-                         CheckDigit checkdigit) {
+            CheckDigit checkdigit) {
         if (regex != null && regex.length() > 0) {
             this.regexValidator = new RegexValidator(regex);
         } else {
@@ -102,7 +107,7 @@ public CodeValidator(String regex, int minLength, int maxLength,
      * validator and {@link CheckDigit} validation.
      *
      * @param regexValidator The format regular expression validator
-     * @param checkdigit     The check digit validation routine.
+     * @param checkdigit The check digit validation routine.
      */
     public CodeValidator(RegexValidator regexValidator, CheckDigit checkdigit) {
         this(regexValidator, -1, -1, checkdigit);
@@ -113,9 +118,9 @@ public CodeValidator(RegexValidator regexValidator, CheckDigit checkdigit) {
      * validator, length and {@link CheckDigit} validation.
      *
      * @param regexValidator The format regular expression validator
-     * @param length         The length of the code
-     *                       (sets the mimimum/maximum to the same value)
-     * @param checkdigit     The check digit validation routine
+     * @param length The length of the code
+     *  (sets the mimimum/maximum to the same value)
+     * @param checkdigit The check digit validation routine
      */
     public CodeValidator(RegexValidator regexValidator, int length, CheckDigit checkdigit) {
         this(regexValidator, length, length, checkdigit);
@@ -126,12 +131,12 @@ public CodeValidator(RegexValidator regexValidator, int length, CheckDigit check
      * validator, minimum/maximum length and {@link CheckDigit} validation.
      *
      * @param regexValidator The format regular expression validator
-     * @param minLength      The minimum length of the code
-     * @param maxLength      The maximum length of the code
-     * @param checkdigit     The check digit validation routine
+     * @param minLength The minimum length of the code
+     * @param maxLength The maximum length of the code
+     * @param checkdigit The check digit validation routine
      */
     public CodeValidator(RegexValidator regexValidator, int minLength, int maxLength,
-                         CheckDigit checkdigit) {
+            CheckDigit checkdigit) {
         this.regexValidator = regexValidator;
         this.minLength = minLength;
         this.maxLength = maxLength;
@@ -142,7 +147,7 @@ public CodeValidator(RegexValidator regexValidator, int minLength, int maxLength
      * Return the check digit validation routine.
      * <p>
      * <b>N.B.</b> Optional, if not set no Check Digit
-     * validation will be performed on the code.</p>
+     * validation will be performed on the code.
      *
      * @return The check digit validation routine
      */
@@ -154,7 +159,7 @@ public CheckDigit getCheckDigit() {
      * Return the minimum length of the code.
      * <p>
      * <b>N.B.</b> Optional, if less than zero the
-     * minimum length will not be checked.</p>
+     * minimum length will not be checked.
      *
      * @return The minimum length of the code or
      * <code>-1</code> if the code has no minimum length
@@ -167,7 +172,7 @@ public int getMinLength() {
      * Return the maximum length of the code.
      * <p>
      * <b>N.B.</b> Optional, if less than zero the
-     * maximum length will not be checked.</p>
+     * maximum length will not be checked.
      *
      * @return The maximum length of the code or
      * <code>-1</code> if the code has no maximum length
@@ -180,7 +185,7 @@ public int getMaxLength() {
      * Return the <i>regular expression</i> validator.
      * <p>
      * <b>N.B.</b> Optional, if not set no regular
-     * expression validation will be performed on the code.</p>
+     * expression validation will be performed on the code.
      *
      * @return The regular expression validator
      */
@@ -209,13 +214,16 @@ public boolean isValid(String input) {
      * if invalid
      */
     public Object validate(String input) {
+
         if (input == null) {
             return null;
         }
+
         String code = input.trim();
         if (code.length() == 0) {
             return null;
         }
+
         // validate/reformat using regular expression
         if (regexValidator != null) {
             code = regexValidator.validate(code);
@@ -223,15 +231,20 @@ public Object validate(String input) {
                 return null;
             }
         }
+
         // check the length
         if ((minLength >= 0 && code.length() < minLength) ||
             (maxLength >= 0 && code.length() > maxLength)) {
             return null;
         }
+
         // validate the check digit
         if (checkdigit != null && !checkdigit.isValid(code)) {
             return null;
         }
+
         return code;
+
     }
+
 }
diff --git a/saripaar/src/main/java/commons/validator/routines/CreditCardValidator.java b/saripaar/src/main/java/commons/validator/routines/CreditCardValidator.java
index d53770f..6ee0873 100644
--- a/saripaar/src/main/java/commons/validator/routines/CreditCardValidator.java
+++ b/saripaar/src/main/java/commons/validator/routines/CreditCardValidator.java
@@ -1,12 +1,12 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
+ * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * the License.  You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -14,45 +14,59 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines;
 
 import commons.validator.routines.checkdigit.CheckDigit;
 import commons.validator.routines.checkdigit.LuhnCheckDigit;
-
+import java.io.Serializable;
 import java.util.List;
 import java.util.ArrayList;
 
 /**
- * <p>Perform credit card validations.</p>
+ * Perform credit card validations.
+ *
  * <p>
- * By default, all supported card types are allowed. You can specify which
+ * By default, all supported card types are allowed.  You can specify which
  * cards should pass validation by configuring the validation options. For
- * example,<br>
+ * example,
+ * </p>
+ *
+ * <pre>
  * <code>CreditCardValidator ccv = new CreditCardValidator(CreditCardValidator.AMEX + CreditCardValidator.VISA);</code>
+ * </pre>
+ *
+ * <p>
  * configures the validator to only pass American Express and Visa cards.
  * If a card type is not directly supported by this class, you can implement
  * the CreditCardType interface and pass an instance into the
  * <code>addAllowedCardType</code> method.
  * </p>
+ *
+ * <p>
  * For a similar implementation in Perl, reference Sean M. Burke's
  * <a href="http://www.speech.cs.cmu.edu/~sburke/pub/luhn_lib.html">script</a>.
- * More information is also available
- * <a href="http://www.merriampark.com/anatomycc.htm">here</a>.
+ * More information can be found in Michael Gilleland's essay 
+ * <a href="http://web.archive.org/web/20120614072656/http://www.merriampark.com/anatomycc.htm">Anatomy of Credit Card Numbers</a>.
+ * </p>
  *
+ * @version $Revision$
  * @since Validator 1.4
  */
-public class CreditCardValidator {
+public class CreditCardValidator implements Serializable {
+
+    private static final long serialVersionUID = 5955978921148959496L;
 
     /**
-     * Option specifying that no cards are allowed. This is useful if
+     * Option specifying that no cards are allowed.  This is useful if
      * you want only custom card types to validate so you turn off the
      * default cards with this option.
-     * <br>
+     *
      * <pre>
+     * <code>
      * CreditCardValidator v = new CreditCardValidator(CreditCardValidator.NONE);
      * v.addAllowedCardType(customType);
      * v.isValid(aCardNumber);
+     * </code>
      * </pre>
      */
     public static final long NONE = 0;
@@ -92,41 +106,23 @@
      */
     private static final CheckDigit LUHN_VALIDATOR = LuhnCheckDigit.LUHN_CHECK_DIGIT;
 
-    /**
-     * American Express (Amex) Card Validator
-     */
-    public static final CodeValidator AMEX_VALIDATOR = new CodeValidator(
-            "^(3[47]\\d{13})$", LUHN_VALIDATOR);
+    /** American Express (Amex) Card Validator */
+    public static final CodeValidator AMEX_VALIDATOR = new CodeValidator("^(3[47]\\d{13})$", LUHN_VALIDATOR);
 
-    /**
-     * Diners Card Validator
-     */
-    public static final CodeValidator DINERS_VALIDATOR = new CodeValidator(
-            "^(30[0-5]\\d{11}|3095\\d{10}|36\\d{12}|3[8-9]\\d{12})$", LUHN_VALIDATOR);
+    /** Diners Card Validator */
+    public static final CodeValidator DINERS_VALIDATOR = new CodeValidator("^(30[0-5]\\d{11}|3095\\d{10}|36\\d{12}|3[8-9]\\d{12})$", LUHN_VALIDATOR);
 
-    /**
-     * Discover Card regular expressions
-     */
-    private static final RegexValidator DISCOVER_REGEX = new RegexValidator(
-            new String[]{"^(6011\\d{12})$", "^(64[4-9]\\d{13})$", "^(65\\d{14})$"});
+    /** Discover Card regular expressions */
+    private static final RegexValidator DISCOVER_REGEX = new RegexValidator(new String[] {"^(6011\\d{12})$", "^(64[4-9]\\d{13})$", "^(65\\d{14})$"});
 
-    /**
-     * Discover Card Validator
-     */
-    public static final CodeValidator DISCOVER_VALIDATOR = new CodeValidator(
-            DISCOVER_REGEX, LUHN_VALIDATOR);
+    /** Discover Card Validator */
+    public static final CodeValidator DISCOVER_VALIDATOR = new CodeValidator(DISCOVER_REGEX, LUHN_VALIDATOR);
 
-    /**
-     * Mastercard Card Validator
-     */
-    public static final CodeValidator MASTERCARD_VALIDATOR = new CodeValidator(
-            "^(5[1-5]\\d{14})$", LUHN_VALIDATOR);
+    /** Mastercard Card Validator */
+    public static final CodeValidator MASTERCARD_VALIDATOR = new CodeValidator("^(5[1-5]\\d{14})$", LUHN_VALIDATOR);
 
-    /**
-     * Visa Card Validator
-     */
-    public static final CodeValidator VISA_VALIDATOR = new CodeValidator(
-            "^(4)(\\d{12}|\\d{15})$", LUHN_VALIDATOR);
+    /** Visa Card Validator */
+    public static final CodeValidator VISA_VALIDATOR = new CodeValidator("^(4)(\\d{12}|\\d{15})$", LUHN_VALIDATOR);
 
     /**
      * Create a new CreditCardValidator with default options.
@@ -137,25 +133,29 @@ public CreditCardValidator() {
 
     /**
      * Create a new CreditCardValidator with the specified options.
-     *
      * @param options Pass in
-     *                CreditCardValidator.VISA + CreditCardValidator.AMEX to specify that
-     *                those are the only valid card types.
+     * CreditCardValidator.VISA + CreditCardValidator.AMEX to specify that
+     * those are the only valid card types.
      */
     public CreditCardValidator(long options) {
         super();
+
         if (isOn(options, VISA)) {
             this.cardTypes.add(VISA_VALIDATOR);
         }
+
         if (isOn(options, AMEX)) {
             this.cardTypes.add(AMEX_VALIDATOR);
         }
+
         if (isOn(options, MASTERCARD)) {
             this.cardTypes.add(MASTERCARD_VALIDATOR);
         }
+
         if (isOn(options, DISCOVER)) {
             this.cardTypes.add(DISCOVER_VALIDATOR);
         }
+
         if (isOn(options, DINERS)) {
             this.cardTypes.add(DINERS_VALIDATOR);
         }
@@ -163,7 +163,6 @@ public CreditCardValidator(long options) {
 
     /**
      * Create a new CreditCardValidator with the specified {@link CodeValidator}s.
-     *
      * @param creditCardValidators Set of valid code validators
      */
     public CreditCardValidator(CodeValidator[] creditCardValidators) {
@@ -177,7 +176,6 @@ public CreditCardValidator(CodeValidator[] creditCardValidators) {
 
     /**
      * Checks if the field is a valid credit card number.
-     *
      * @param card The card number to validate.
      * @return Whether the card number is valid.
      */
@@ -186,7 +184,7 @@ public boolean isValid(String card) {
             return false;
         }
         for (int i = 0; i < cardTypes.size(); i++) {
-            CodeValidator type = (CodeValidator) cardTypes.get(i);
+            CodeValidator type = (CodeValidator)cardTypes.get(i);
             if (type.isValid(card)) {
                 return true;
             }
@@ -196,7 +194,6 @@ public boolean isValid(String card) {
 
     /**
      * Checks if the field is a valid credit card number.
-     *
      * @param card The card number to validate.
      * @return The card number if valid or <code>null</code>
      * if invalid.
@@ -207,24 +204,26 @@ public Object validate(String card) {
         }
         Object result = null;
         for (int i = 0; i < cardTypes.size(); i++) {
-            CodeValidator type = (CodeValidator) cardTypes.get(i);
+            CodeValidator type = (CodeValidator)cardTypes.get(i);
             result = type.validate(card);
             if (result != null) {
-                return result;
+                return result ;
             }
         }
         return null;
-    }
 
+    }
     /**
-     * Tests whether the given flag is on. If the flag is not a power of 2
+     * Tests whether the given flag is on.  If the flag is not a power of 2
      * (ie. 3) this tests whether the combination of flags is on.
      *
      * @param options The options specified.
-     * @param flag    Flag value to check.
+     * @param flag Flag value to check.
+     *
      * @return whether the specified flag value is on.
      */
     private boolean isOn(long options, long flag) {
         return (options & flag) > 0;
     }
+
 }
diff --git a/saripaar/src/main/java/commons/validator/routines/DomainValidator.java b/saripaar/src/main/java/commons/validator/routines/DomainValidator.java
index 6e4d013..f8f43f9 100644
--- a/saripaar/src/main/java/commons/validator/routines/DomainValidator.java
+++ b/saripaar/src/main/java/commons/validator/routines/DomainValidator.java
@@ -1,12 +1,12 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
+ * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * the License.  You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -14,81 +14,105 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines;
 
+import java.io.Serializable;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.util.Arrays;
-import java.util.List;
+import java.util.Locale;
 
 /**
  * <p><b>Domain name</b> validation routines.</p>
+ *
  * <p>
  * This validator provides methods for validating Internet domain names
  * and top-level domains.
  * </p>
+ *
  * <p>Domain names are evaluated according
  * to the standards <a href="http://www.ietf.org/rfc/rfc1034.txt">RFC1034</a>,
  * section 3, and <a href="http://www.ietf.org/rfc/rfc1123.txt">RFC1123</a>,
- * section 2.1. No accomodation is provided for the specialized needs of
+ * section 2.1. No accommodation is provided for the specialized needs of
  * other applications; if the domain name has been URL-encoded, for example,
  * validation will fail even though the equivalent plaintext version of the
  * same name would have passed.
  * </p>
+ *
  * <p>
  * Validation is also provided for top-level domains (TLDs) as defined and
  * maintained by the Internet Assigned Numbers Authority (IANA):
  * </p>
- * <ul>
- * <li>{@link #isValidInfrastructureTld} - validates infrastructure TLDs
- * (<code>.arpa</code>, etc.)</li>
- * <li>{@link #isValidGenericTld} - validates generic TLDs
- * (<code>.com, .org</code>, etc.)</li>
- * <li>{@link #isValidCountryCodeTld} - validates country code TLDs
- * (<code>.us, .uk, .cn</code>, etc.)</li>
- * </ul>
+ *
+ *   <ul>
+ *     <li>{@link #isValidInfrastructureTld} - validates infrastructure TLDs
+ *         (<code>.arpa</code>, etc.)</li>
+ *     <li>{@link #isValidGenericTld} - validates generic TLDs
+ *         (<code>.com, .org</code>, etc.)</li>
+ *     <li>{@link #isValidCountryCodeTld} - validates country code TLDs
+ *         (<code>.us, .uk, .cn</code>, etc.)</li>
+ *   </ul>
+ *
  * <p>
  * (<b>NOTE</b>: This class does not provide IP address lookup for domain names or
  * methods to ensure that a given domain name matches a specific IP; see
  * {@link java.net.InetAddress} for that functionality.)
  * </p>
  *
+ * @version $Revision$
  * @since Validator 1.4
  */
-public class DomainValidator {
+public class DomainValidator implements Serializable {
+
+    private static final long serialVersionUID = -4407125112880174009L;
 
     // Regular expression strings for hostnames (derived from RFC2396 and RFC 1123)
-    private static final String DOMAIN_LABEL_REGEX = "\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*";
-    private static final String TOP_LABEL_REGEX = "\\p{Alpha}{2,}";
+
+    // RFC2396: domainlabel   = alphanum | alphanum *( alphanum | "-" ) alphanum
+    // Max 63 characters
+    private static final String DOMAIN_LABEL_REGEX = "\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?";
+
+    // RFC2396 toplabel = alpha | alpha *( alphanum | "-" ) alphanum
+    // Max 63 characters
+    private static final String TOP_LABEL_REGEX = "\\p{Alpha}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?";
+
+    // RFC2396 hostname = *( domainlabel "." ) toplabel [ "." ]
+    // Note that the regex currently requires both a domain label and a top level label, whereas
+    // the RFC does not. This is because the regex is used to detect if a TLD is present.
+    // If the match fails, input is checked against DOMAIN_LABEL_REGEX (hostnameRegex)
+    // RFC1123 sec 2.1 allows hostnames to start with a digit
     private static final String DOMAIN_NAME_REGEX =
-            "^(?:" + DOMAIN_LABEL_REGEX + "\\.)+" + "(" + TOP_LABEL_REGEX + ")$";
+            "^(?:" + DOMAIN_LABEL_REGEX + "\\.)+" + "(" + TOP_LABEL_REGEX + ")\\.?$";
+
     private final boolean allowLocal;
 
     /**
      * Singleton instance of this validator, which
-     * doesn't consider local addresses as valid.
+     *  doesn't consider local addresses as valid.
      */
     private static final DomainValidator DOMAIN_VALIDATOR = new DomainValidator(false);
 
     /**
      * Singleton instance of this validator, which does
-     * consider local addresses valid.
+     *  consider local addresses valid.
      */
     private static final DomainValidator DOMAIN_VALIDATOR_WITH_LOCAL = new DomainValidator(true);
 
     /**
      * RegexValidator for matching domains.
      */
-    private final RegexValidator domainRegex = new RegexValidator(DOMAIN_NAME_REGEX);
-
+    private final RegexValidator domainRegex =
+            new RegexValidator(DOMAIN_NAME_REGEX);
     /**
-     * RegexValidator for matching the a local hostname
+     * RegexValidator for matching a local hostname
      */
-    private final RegexValidator hostnameRegex = new RegexValidator(DOMAIN_LABEL_REGEX);
+    // RFC1123 sec 2.1 allows hostnames to start with a digit
+    private final RegexValidator hostnameRegex =
+            new RegexValidator(DOMAIN_LABEL_REGEX);
 
     /**
      * Returns the singleton instance of this validator. It
-     * will not consider local addresses as valid.
-     *
+     *  will not consider local addresses as valid.
      * @return the singleton instance of this validator
      */
     public static DomainValidator getInstance() {
@@ -97,405 +121,1035 @@ public static DomainValidator getInstance() {
 
     /**
      * Returns the singleton instance of this validator,
-     * with local validation as required.
-     *
+     *  with local validation as required.
      * @param allowLocal Should local addresses be considered valid?
      * @return the singleton instance of this validator
      */
     public static DomainValidator getInstance(boolean allowLocal) {
-        if (allowLocal) {
-            return DOMAIN_VALIDATOR_WITH_LOCAL;
-        }
-        return DOMAIN_VALIDATOR;
+       if(allowLocal) {
+          return DOMAIN_VALIDATOR_WITH_LOCAL;
+       }
+       return DOMAIN_VALIDATOR;
     }
 
-    /**
-     * Private constructor.
-     */
+    /** Private constructor. */
     private DomainValidator(boolean allowLocal) {
-        this.allowLocal = allowLocal;
+       this.allowLocal = allowLocal;
     }
 
     /**
      * Returns true if the specified <code>String</code> parses
      * as a valid domain name with a recognized top-level domain.
-     * The parsing is case-sensitive.
-     *
+     * The parsing is case-insensitive.
      * @param domain the parameter to check for domain name syntax
      * @return true if the parameter is a valid domain name
      */
     public boolean isValid(String domain) {
+        if (domain == null) {
+            return false;
+        }
+        domain = unicodeToASCII(domain);
+        // hosts must be equally reachable via punycode and Unicode;
+        // Unicode is never shorter than punycode, so check punycode
+        // if domain did not convert, then it will be caught by ASCII
+        // checks in the regexes below
+        if (domain.length() > 253) {
+            return false;
+        }
         String[] groups = domainRegex.match(domain);
         if (groups != null && groups.length > 0) {
             return isValidTld(groups[0]);
-        } else if (allowLocal) {
-            if (hostnameRegex.isValid(domain)) {
-                return true;
-            }
         }
-        return false;
+        return allowLocal && hostnameRegex.isValid(domain);
+    }
+
+    // package protected for unit test access
+    // must agree with isValid() above
+    final boolean isValidDomainSyntax(String domain) {
+        if (domain == null) {
+            return false;
+        }
+        domain = unicodeToASCII(domain);
+        // hosts must be equally reachable via punycode and Unicode;
+        // Unicode is never shorter than punycode, so check punycode
+        // if domain did not convert, then it will be caught by ASCII
+        // checks in the regexes below
+        if (domain.length() > 253) {
+            return false;
+        }
+        String[] groups = domainRegex.match(domain);
+        return (groups != null && groups.length > 0)
+                || hostnameRegex.isValid(domain);
     }
 
     /**
      * Returns true if the specified <code>String</code> matches any
      * IANA-defined top-level domain. Leading dots are ignored if present.
-     * The search is case-sensitive.
-     *
-     * @param tld the parameter to check for TLD status
+     * The search is case-insensitive.
+     * @param tld the parameter to check for TLD status, not null
      * @return true if the parameter is a TLD
      */
     public boolean isValidTld(String tld) {
-        if (allowLocal && isValidLocalTld(tld)) {
-            return true;
+        tld = unicodeToASCII(tld);
+        if(allowLocal && isValidLocalTld(tld)) {
+           return true;
         }
         return isValidInfrastructureTld(tld)
-            || isValidGenericTld(tld)
-            || isValidCountryCodeTld(tld);
+                || isValidGenericTld(tld)
+                || isValidCountryCodeTld(tld);
     }
 
     /**
      * Returns true if the specified <code>String</code> matches any
      * IANA-defined infrastructure top-level domain. Leading dots are
-     * ignored if present. The search is case-sensitive.
-     *
-     * @param iTld the parameter to check for infrastructure TLD status
+     * ignored if present. The search is case-insensitive.
+     * @param iTld the parameter to check for infrastructure TLD status, not null
      * @return true if the parameter is an infrastructure TLD
      */
     public boolean isValidInfrastructureTld(String iTld) {
-        return INFRASTRUCTURE_TLD_LIST.contains(chompLeadingDot(iTld.toLowerCase()));
+        iTld = unicodeToASCII(iTld);
+        return Arrays.binarySearch(INFRASTRUCTURE_TLDS, (chompLeadingDot(iTld.toLowerCase(Locale.ENGLISH)))) >= 0;
     }
 
     /**
      * Returns true if the specified <code>String</code> matches any
      * IANA-defined generic top-level domain. Leading dots are ignored
-     * if present. The search is case-sensitive.
-     *
-     * @param gTld the parameter to check for generic TLD status
+     * if present. The search is case-insensitive.
+     * @param gTld the parameter to check for generic TLD status, not null
      * @return true if the parameter is a generic TLD
      */
     public boolean isValidGenericTld(String gTld) {
-        return GENERIC_TLD_LIST.contains(chompLeadingDot(gTld.toLowerCase()));
+        gTld = unicodeToASCII(gTld);
+        return Arrays.binarySearch(GENERIC_TLDS, chompLeadingDot(gTld.toLowerCase(Locale.ENGLISH))) >= 0;
     }
 
     /**
      * Returns true if the specified <code>String</code> matches any
      * IANA-defined country code top-level domain. Leading dots are
-     * ignored if present. The search is case-sensitive.
-     *
-     * @param ccTld the parameter to check for country code TLD status
+     * ignored if present. The search is case-insensitive.
+     * @param ccTld the parameter to check for country code TLD status, not null
      * @return true if the parameter is a country code TLD
      */
     public boolean isValidCountryCodeTld(String ccTld) {
-        return COUNTRY_CODE_TLD_LIST.contains(chompLeadingDot(ccTld.toLowerCase()));
+        ccTld = unicodeToASCII(ccTld);
+        return Arrays.binarySearch(COUNTRY_CODE_TLDS, chompLeadingDot(ccTld.toLowerCase(Locale.ENGLISH))) >= 0;
     }
 
     /**
      * Returns true if the specified <code>String</code> matches any
      * widely used "local" domains (localhost or localdomain). Leading dots are
-     * ignored if present. The search is case-sensitive.
-     *
-     * @param iTld the parameter to check for local TLD status
+     * ignored if present. The search is case-insensitive.
+     * @param lTld the parameter to check for local TLD status, not null
      * @return true if the parameter is an local TLD
      */
-    public boolean isValidLocalTld(String iTld) {
-        return LOCAL_TLD_LIST.contains(chompLeadingDot(iTld.toLowerCase()));
+    public boolean isValidLocalTld(String lTld) {
+        lTld = unicodeToASCII(lTld);
+        return Arrays.binarySearch(LOCAL_TLDS, chompLeadingDot(lTld.toLowerCase(Locale.ENGLISH))) >= 0;
     }
 
     private String chompLeadingDot(String str) {
         if (str.startsWith(".")) {
             return str.substring(1);
-        } else {
-            return str;
         }
+        return str;
     }
 
     // ---------------------------------------------
     // ----- TLDs defined by IANA
     // ----- Authoritative and comprehensive list at:
     // ----- http://data.iana.org/TLD/tlds-alpha-by-domain.txt
-    private static final String[] INFRASTRUCTURE_TLDS = new String[]{
-        "arpa", // internet infrastructure
-        "root" // diagnostic marker for non-truncated root zone
-    };
-    private static final String[] GENERIC_TLDS = new String[]{
-        "aero", // air transport industry
-        "asia", // Pan-Asia/Asia Pacific
-        "biz", // businesses
-        "cat", // Catalan linguistic/cultural community
-        "com", // commercial enterprises
-        "coop", // cooperative associations
-        "info", // informational sites
-        "jobs", // Human Resource managers
-        "mobi", // mobile products and services
-        "museum", // museums, surprisingly enough
-        "name", // individuals' sites
-        "net", // internet support infrastructure/business
-        "org", // noncommercial organizations
-        "pro", // credentialed professionals and entities
-        "tel", // contact data for businesses and individuals
-        "travel", // entities in the travel industry
-        "gov", // United States Government
-        "edu", // accredited postsecondary US education entities
-        "mil", // United States Military
-        "int" // organizations established by international treaty
+
+    // Note that the above list is in UPPER case.
+    // The code currently converts strings to lower case (as per the tables below)
+
+    // IANA also provide an HTML list at http://www.iana.org/domains/root/db
+    // Note that this contains several country code entries which are NOT in
+    // the text file. These all have the "Not assigned" in the "Sponsoring Organisation" column
+    // For example (as of 2015-01-02):
+    // .bl  country-code    Not assigned
+    // .um  country-code    Not assigned
+
+    // WARNING: this array MUST be sorted, others it cannot be searched reliably using binary search
+    private static final String[] INFRASTRUCTURE_TLDS = new String[] {
+        "arpa",               // internet infrastructure
     };
-    private static final String[] COUNTRY_CODE_TLDS = new String[]{
-        "ac", // Ascension Island
-        "ad", // Andorra
-        "ae", // United Arab Emirates
-        "af", // Afghanistan
-        "ag", // Antigua and Barbuda
-        "ai", // Anguilla
-        "al", // Albania
-        "am", // Armenia
-        "an", // Netherlands Antilles
-        "ao", // Angola
-        "aq", // Antarctica
-        "ar", // Argentina
-        "as", // American Samoa
-        "at", // Austria
-        "au", // Australia (includes Ashmore and Cartier Islands and Coral Sea Islands)
-        "aw", // Aruba
-        "ax", // Åland
-        "az", // Azerbaijan
-        "ba", // Bosnia and Herzegovina
-        "bb", // Barbados
-        "bd", // Bangladesh
-        "be", // Belgium
-        "bf", // Burkina Faso
-        "bg", // Bulgaria
-        "bh", // Bahrain
-        "bi", // Burundi
-        "bj", // Benin
-        "bm", // Bermuda
-        "bn", // Brunei Darussalam
-        "bo", // Bolivia
-        "br", // Brazil
-        "bs", // Bahamas
-        "bt", // Bhutan
-        "bv", // Bouvet Island
-        "bw", // Botswana
-        "by", // Belarus
-        "bz", // Belize
-        "ca", // Canada
-        "cc", // Cocos (Keeling) Islands
-        "cd", // Democratic Republic of the Congo (formerly Zaire)
-        "cf", // Central African Republic
-        "cg", // Republic of the Congo
-        "ch", // Switzerland
-        "ci", // Côte d'Ivoire
-        "ck", // Cook Islands
-        "cl", // Chile
-        "cm", // Cameroon
-        "cn", // China, mainland
-        "co", // Colombia
-        "cr", // Costa Rica
-        "cu", // Cuba
-        "cv", // Cape Verde
-        "cx", // Christmas Island
-        "cy", // Cyprus
-        "cz", // Czech Republic
-        "de", // Germany
-        "dj", // Djibouti
-        "dk", // Denmark
-        "dm", // Dominica
-        "do", // Dominican Republic
-        "dz", // Algeria
-        "ec", // Ecuador
-        "ee", // Estonia
-        "eg", // Egypt
-        "er", // Eritrea
-        "es", // Spain
-        "et", // Ethiopia
-        "eu", // European Union
-        "fi", // Finland
-        "fj", // Fiji
-        "fk", // Falkland Islands
-        "fm", // Federated States of Micronesia
-        "fo", // Faroe Islands
-        "fr", // France
-        "ga", // Gabon
-        "gb", // Great Britain (United Kingdom)
-        "gd", // Grenada
-        "ge", // Georgia
-        "gf", // French Guiana
-        "gg", // Guernsey
-        "gh", // Ghana
-        "gi", // Gibraltar
-        "gl", // Greenland
-        "gm", // The Gambia
-        "gn", // Guinea
-        "gp", // Guadeloupe
-        "gq", // Equatorial Guinea
-        "gr", // Greece
-        "gs", // South Georgia and the South Sandwich Islands
-        "gt", // Guatemala
-        "gu", // Guam
-        "gw", // Guinea-Bissau
-        "gy", // Guyana
-        "hk", // Hong Kong
-        "hm", // Heard Island and McDonald Islands
-        "hn", // Honduras
-        "hr", // Croatia (Hrvatska)
-        "ht", // Haiti
-        "hu", // Hungary
-        "id", // Indonesia
-        "ie", // Ireland (Éire)
-        "il", // Israel
-        "im", // Isle of Man
-        "in", // India
-        "io", // British Indian Ocean Territory
-        "iq", // Iraq
-        "ir", // Iran
-        "is", // Iceland
-        "it", // Italy
-        "je", // Jersey
-        "jm", // Jamaica
-        "jo", // Jordan
-        "jp", // Japan
-        "ke", // Kenya
-        "kg", // Kyrgyzstan
-        "kh", // Cambodia (Khmer)
-        "ki", // Kiribati
-        "km", // Comoros
-        "kn", // Saint Kitts and Nevis
-        "kp", // North Korea
-        "kr", // South Korea
-        "kw", // Kuwait
-        "ky", // Cayman Islands
-        "kz", // Kazakhstan
-        "la", // Laos (currently being marketed as the official domain for Los Angeles)
-        "lb", // Lebanon
-        "lc", // Saint Lucia
-        "li", // Liechtenstein
-        "lk", // Sri Lanka
-        "lr", // Liberia
-        "ls", // Lesotho
-        "lt", // Lithuania
-        "lu", // Luxembourg
-        "lv", // Latvia
-        "ly", // Libya
-        "ma", // Morocco
-        "mc", // Monaco
-        "md", // Moldova
-        "me", // Montenegro
-        "mg", // Madagascar
-        "mh", // Marshall Islands
-        "mk", // Republic of Macedonia
-        "ml", // Mali
-        "mm", // Myanmar
-        "mn", // Mongolia
-        "mo", // Macau
-        "mp", // Northern Mariana Islands
-        "mq", // Martinique
-        "mr", // Mauritania
-        "ms", // Montserrat
-        "mt", // Malta
-        "mu", // Mauritius
-        "mv", // Maldives
-        "mw", // Malawi
-        "mx", // Mexico
-        "my", // Malaysia
-        "mz", // Mozambique
-        "na", // Namibia
-        "nc", // New Caledonia
-        "ne", // Niger
-        "nf", // Norfolk Island
-        "ng", // Nigeria
-        "ni", // Nicaragua
-        "nl", // Netherlands
-        "no", // Norway
-        "np", // Nepal
-        "nr", // Nauru
-        "nu", // Niue
-        "nz", // New Zealand
-        "om", // Oman
-        "pa", // Panama
-        "pe", // Peru
-        "pf", // French Polynesia With Clipperton Island
-        "pg", // Papua New Guinea
-        "ph", // Philippines
-        "pk", // Pakistan
-        "pl", // Poland
-        "pm", // Saint-Pierre and Miquelon
-        "pn", // Pitcairn Islands
-        "pr", // Puerto Rico
-        "ps", // Palestinian territories (PA-controlled West Bank and Gaza Strip)
-        "pt", // Portugal
-        "pw", // Palau
-        "py", // Paraguay
-        "qa", // Qatar
-        "re", // Réunion
-        "ro", // Romania
-        "rs", // Serbia
-        "ru", // Russia
-        "rw", // Rwanda
-        "sa", // Saudi Arabia
-        "sb", // Solomon Islands
-        "sc", // Seychelles
-        "sd", // Sudan
-        "se", // Sweden
-        "sg", // Singapore
-        "sh", // Saint Helena
-        "si", // Slovenia
-        "sj", // Svalbard and Jan Mayen Islands Not in use (Norwegian dependencies; see .no)
-        "sk", // Slovakia
-        "sl", // Sierra Leone
-        "sm", // San Marino
-        "sn", // Senegal
-        "so", // Somalia
-        "sr", // Suriname
-        "st", // São Tomé and Príncipe
-        "su", // Soviet Union (deprecated)
-        "sv", // El Salvador
-        "sy", // Syria
-        "sz", // Swaziland
-        "tc", // Turks and Caicos Islands
-        "td", // Chad
-        "tf", // French Southern and Antarctic Lands
-        "tg", // Togo
-        "th", // Thailand
-        "tj", // Tajikistan
-        "tk", // Tokelau
-        "tl", // East Timor (deprecated old code)
-        "tm", // Turkmenistan
-        "tn", // Tunisia
-        "to", // Tonga
-        "tp", // East Timor
-        "tr", // Turkey
-        "tt", // Trinidad and Tobago
-        "tv", // Tuvalu
-        "tw", // Taiwan, Republic of China
-        "tz", // Tanzania
-        "ua", // Ukraine
-        "ug", // Uganda
-        "uk", // United Kingdom
-        "um", // United States Minor Outlying Islands
-        "us", // United States of America
-        "uy", // Uruguay
-        "uz", // Uzbekistan
-        "va", // Vatican City State
-        "vc", // Saint Vincent and the Grenadines
-        "ve", // Venezuela
-        "vg", // British Virgin Islands
-        "vi", // U.S. Virgin Islands
-        "vn", // Vietnam
-        "vu", // Vanuatu
-        "wf", // Wallis and Futuna
-        "ws", // Samoa (formerly Western Samoa)
-        "ye", // Yemen
-        "yt", // Mayotte
-        "yu", // Serbia and Montenegro (originally Yugoslavia)
-        "za", // South Africa
-        "zm", // Zambia
-        "zw", // Zimbabwe
+
+    // WARNING: this array MUST be sorted, others it cannot be searched reliably using binary search
+    private static final String[] GENERIC_TLDS = new String[] {
+        "abogado",
+        "academy",
+        "accountants",
+        "active",
+        "actor",
+        "adult",
+        "aero",
+        "agency",
+        "airforce",
+        "allfinanz",
+        "alsace",
+        "amsterdam",
+        "android",
+        "aquarelle",
+        "archi",
+        "army",
+        "arpa",
+        "asia",
+        "associates",
+        "attorney",
+        "auction",
+        "audio",
+        "autos",
+        "axa",
+        "band",
+        "bar",
+        "bargains",
+        "bayern",
+        "beer",
+        "berlin",
+        "best",
+        "bid",
+        "bike",
+        "bio",
+        "biz",
+        "black",
+        "blackfriday",
+        "bloomberg",
+        "blue",
+        "bmw",
+        "bnpparibas",
+        "boo",
+        "boutique",
+        "brussels",
+        "budapest",
+        "build",
+        "builders",
+        "business",
+        "buzz",
+        "bzh",
+        "cab",
+        "cal",
+        "camera",
+        "camp",
+        "cancerresearch",
+        "capetown",
+        "capital",
+        "caravan",
+        "cards",
+        "care",
+        "career",
+        "careers",
+        "cartier",
+        "casa",
+        "cash",
+        "cat",
+        "catering",
+        "center",
+        "ceo",
+        "cern",
+        "channel",
+        "cheap",
+        "christmas",
+        "chrome",
+        "church",
+        "citic",
+        "city",
+        "claims",
+        "cleaning",
+        "click",
+        "clinic",
+        "clothing",
+        "club",
+        "coach",
+        "codes",
+        "coffee",
+        "college",
+        "cologne",
+        "com",
+        "community",
+        "company",
+        "computer",
+        "condos",
+        "construction",
+        "consulting",
+        "contractors",
+        "cooking",
+        "cool",
+        "coop",
+        "country",
+        "credit",
+        "creditcard",
+        "cricket",
+        "crs",
+        "cruises",
+        "cuisinella",
+        "cymru",
+        "dad",
+        "dance",
+        "dating",
+        "day",
+        "deals",
+        "degree",
+        "delivery",
+        "democrat",
+        "dental",
+        "dentist",
+        "desi",
+        "dev",
+        "diamonds",
+        "diet",
+        "digital",
+        "direct",
+        "directory",
+        "discount",
+        "dnp",
+        "docs",
+        "domains",
+        "doosan",
+        "durban",
+        "dvag",
+        "eat",
+        "edu",
+        "education",
+        "email",
+        "emerck",
+        "energy",
+        "engineer",
+        "engineering",
+        "enterprises",
+        "equipment",
+        "esq",
+        "estate",
+        "eurovision",
+        "eus",
+        "events",
+        "everbank",
+        "exchange",
+        "expert",
+        "exposed",
+        "fail",
+        "farm",
+        "fashion",
+        "feedback",
+        "finance",
+        "financial",
+        "firmdale",
+        "fish",
+        "fishing",
+        "fitness",
+        "flights",
+        "florist",
+        "flowers",
+        "flsmidth",
+        "fly",
+        "foo",
+        "forsale",
+        "foundation",
+        "frl",
+        "frogans",
+        "fund",
+        "furniture",
+        "futbol",
+        "gal",
+        "gallery",
+        "garden",
+        "gbiz",
+        "gent",
+        "ggee",
+        "gift",
+        "gifts",
+        "gives",
+        "glass",
+        "gle",
+        "global",
+        "globo",
+        "gmail",
+        "gmo",
+        "gmx",
+        "google",
+        "gop",
+        "gov",
+        "graphics",
+        "gratis",
+        "green",
+        "gripe",
+        "guide",
+        "guitars",
+        "guru",
+        "hamburg",
+        "haus",
+        "healthcare",
+        "help",
+        "here",
+        "hiphop",
+        "hiv",
+        "holdings",
+        "holiday",
+        "homes",
+        "horse",
+        "host",
+        "hosting",
+        "house",
+        "how",
+        "ibm",
+        "immo",
+        "immobilien",
+        "industries",
+        "info",
+        "ing",
+        "ink",
+        "institute",
+        "insure",
+        "int",
+        "international",
+        "investments",
+        "irish",
+        "iwc",
+        "jetzt",
+        "jobs",
+        "joburg",
+        "juegos",
+        "kaufen",
+        "kim",
+        "kitchen",
+        "kiwi",
+        "koeln",
+        "krd",
+        "kred",
+        "lacaixa",
+        "land",
+        "latrobe",
+        "lawyer",
+        "lds",
+        "lease",
+        "legal",
+        "lgbt",
+        "lidl",
+        "life",
+        "lighting",
+        "limited",
+        "limo",
+        "link",
+        "loans",
+        "london",
+        "lotto",
+        "ltda",
+        "luxe",
+        "luxury",
+        "madrid",
+        "maison",
+        "management",
+        "mango",
+        "market",
+        "marketing",
+        "media",
+        "meet",
+        "melbourne",
+        "meme",
+        "memorial",
+        "menu",
+        "miami",
+        "mil",
+        "mini",
+        "mobi",
+        "moda",
+        "moe",
+        "monash",
+        "money",
+        "mormon",
+        "mortgage",
+        "moscow",
+        "motorcycles",
+        "mov",
+        "museum",
+        "nagoya",
+        "name",
+        "navy",
+        "net",
+        "network",
+        "neustar",
+        "new",
+        "nexus",
+        "ngo",
+        "nhk",
+        "ninja",
+        "nra",
+        "nrw",
+        "nyc",
+        "okinawa",
+        "ong",
+        "onl",
+        "ooo",
+        "org",
+        "organic",
+        "osaka",
+        "otsuka",
+        "ovh",
+        "paris",
+        "partners",
+        "parts",
+        "party",
+        "pharmacy",
+        "photo",
+        "photography",
+        "photos",
+        "physio",
+        "pics",
+        "pictures",
+        "pink",
+        "pizza",
+        "place",
+        "plumbing",
+        "pohl",
+        "poker",
+        "porn",
+        "post",
+        "praxi",
+        "press",
+        "pro",
+        "prod",
+        "productions",
+        "prof",
+        "properties",
+        "property",
+        "pub",
+        "qpon",
+        "quebec",
+        "realtor",
+        "recipes",
+        "red",
+        "rehab",
+        "reise",
+        "reisen",
+        "reit",
+        "ren",
+        "rentals",
+        "repair",
+        "report",
+        "republican",
+        "rest",
+        "restaurant",
+        "reviews",
+        "rich",
+        "rio",
+        "rip",
+        "rocks",
+        "rodeo",
+        "rsvp",
+        "ruhr",
+        "ryukyu",
+        "saarland",
+        "sale",
+        "samsung",
+        "sarl",
+        "sca",
+        "scb",
+        "schmidt",
+        "schule",
+        "schwarz",
+        "science",
+        "scot",
+        "services",
+        "sew",
+        "sexy",
+        "shiksha",
+        "shoes",
+        "shriram",
+        "singles",
+        "sky",
+        "social",
+        "software",
+        "sohu",
+        "solar",
+        "solutions",
+        "soy",
+        "space",
+        "spiegel",
+        "supplies",
+        "supply",
+        "support",
+        "surf",
+        "surgery",
+        "suzuki",
+        "sydney",
+        "systems",
+        "taipei",
+        "tatar",
+        "tattoo",
+        "tax",
+        "technology",
+        "tel",
+        "tienda",
+        "tips",
+        "tires",
+        "tirol",
+        "today",
+        "tokyo",
+        "tools",
+        "top",
+        "town",
+        "toys",
+        "trade",
+        "training",
+        "travel",
+        "trust",
+        "tui",
+        "university",
+        "uno",
+        "uol",
+        "vacations",
+        "vegas",
+        "ventures",
+        "versicherung",
+        "vet",
+        "viajes",
+        "video",
+        "villas",
+        "vision",
+        "vlaanderen",
+        "vodka",
+        "vote",
+        "voting",
+        "voto",
+        "voyage",
+        "wales",
+        "wang",
+        "watch",
+        "webcam",
+        "website",
+        "wed",
+        "wedding",
+        "whoswho",
+        "wien",
+        "wiki",
+        "williamhill",
+        "wme",
+        "work",
+        "works",
+        "world",
+        "wtc",
+        "wtf",
+        "xn--1qqw23a", // 佛山 Guangzhou YU Wei Information Technology Co., Ltd.
+        "xn--3bst00m", // 集团 Eagle Horizon Limited
+        "xn--3ds443g", // 在线 TLD REGISTRY LIMITED
+        "xn--45q11c", // 八卦 Zodiac Scorpio Limited
+        "xn--4gbrim", // موقع Suhub Electronic Establishment
+        "xn--55qw42g", // 公益 China Organizational Name Administration Center
+        "xn--55qx5d", // 公司 Computer Network Information Center of Chinese Academy of Sciences （China Internet Network Information Center）
+        "xn--6frz82g", // 移动 Afilias Limited
+        "xn--6qq986b3xl", // 我爱你 Tycoon Treasure Limited
+        "xn--80adxhks", // москва Foundation for Assistance for Internet Technologies and Infrastructure Development (FAITID)
+        "xn--80asehdb", // онлайн CORE Association
+        "xn--80aswg", // сайт CORE Association
+        "xn--c1avg", // орг Public Interest Registry
+        "xn--cg4bki", // 삼성 SAMSUNG SDS CO., LTD
+        "xn--czr694b", // 商标 HU YI GLOBAL INFORMATION RESOURCES(HOLDING) COMPANY.HONGKONG LIMITED
+        "xn--czrs0t", // 商店 Wild Island, LLC
+        "xn--czru2d", // 商城 Zodiac Aquarius Limited
+        "xn--d1acj3b", // дети The Foundation for Network Initiatives “The Smart Internet”
+        "xn--fiq228c5hs", // 中文网 TLD REGISTRY LIMITED
+        "xn--fiq64b", // 中信 CITIC Group Corporation
+        "xn--flw351e", // 谷歌 Charleston Road Registry Inc.
+        "xn--hxt814e", // 网店 Zodiac Libra Limited
+        "xn--i1b6b1a6a2e", // संगठन Public Interest Registry
+        "xn--io0a7i", // 网络 Computer Network Information Center of Chinese Academy of Sciences （China Internet Network Information Center）
+        "xn--kput3i", // 手机 Beijing RITT-Net Technology Development Co., Ltd
+        "xn--mgbab2bd", // بازار CORE Association
+        "xn--ngbc5azd", // شبكة International Domain Registry Pty. Ltd.
+        "xn--nqv7f", // 机构 Public Interest Registry
+        "xn--nqv7fs00ema", // 组织机构 Public Interest Registry
+        "xn--p1acf", // рус Rusnames Limited
+        "xn--q9jyb4c", // みんな Charleston Road Registry Inc.
+        "xn--qcka1pmc", // グーグル Charleston Road Registry Inc.
+        "xn--rhqv96g", // 世界 Stable Tone Limited
+        "xn--ses554g", // 网址 HU YI GLOBAL INFORMATION RESOURCES (HOLDING) COMPANY. HONGKONG LIMITED
+        "xn--unup4y", // 游戏 Spring Fields, LLC
+        "xn--vermgensberater-ctb", // vermögensberater Deutsche Vermögensberatung Aktiengesellschaft DVAG
+        "xn--vermgensberatung-pwb", // vermögensberatung Deutsche Vermögensberatung Aktiengesellschaft DVAG
+        "xn--vhquv", // 企业 Dash McCook, LLC
+        "xn--xhq521b", // 广东 Guangzhou YU Wei Information Technology Co., Ltd.
+        "xn--zfr164b", // 政务 China Organizational Name Administration Center
+        "xxx",
+        "xyz",
+        "yachts",
+        "yandex",
+        "yoga",
+        "yokohama",
+        "youtube",
+        "zip",
+        "zone",
+        "zuerich",
+   };
+
+    // WARNING: this array MUST be sorted, others it cannot be searched reliably using binary search
+    private static final String[] COUNTRY_CODE_TLDS = new String[] {
+        "ac",                 // Ascension Island
+        "ad",                 // Andorra
+        "ae",                 // United Arab Emirates
+        "af",                 // Afghanistan
+        "ag",                 // Antigua and Barbuda
+        "ai",                 // Anguilla
+        "al",                 // Albania
+        "am",                 // Armenia
+        "an",                 // Netherlands Antilles
+        "ao",                 // Angola
+        "aq",                 // Antarctica
+        "ar",                 // Argentina
+        "as",                 // American Samoa
+        "at",                 // Austria
+        "au",                 // Australia (includes Ashmore and Cartier Islands and Coral Sea Islands)
+        "aw",                 // Aruba
+        "ax",                 // Åland
+        "az",                 // Azerbaijan
+        "ba",                 // Bosnia and Herzegovina
+        "bb",                 // Barbados
+        "bd",                 // Bangladesh
+        "be",                 // Belgium
+        "bf",                 // Burkina Faso
+        "bg",                 // Bulgaria
+        "bh",                 // Bahrain
+        "bi",                 // Burundi
+        "bj",                 // Benin
+        "bm",                 // Bermuda
+        "bn",                 // Brunei Darussalam
+        "bo",                 // Bolivia
+        "br",                 // Brazil
+        "bs",                 // Bahamas
+        "bt",                 // Bhutan
+        "bv",                 // Bouvet Island
+        "bw",                 // Botswana
+        "by",                 // Belarus
+        "bz",                 // Belize
+        "ca",                 // Canada
+        "cc",                 // Cocos (Keeling) Islands
+        "cd",                 // Democratic Republic of the Congo (formerly Zaire)
+        "cf",                 // Central African Republic
+        "cg",                 // Republic of the Congo
+        "ch",                 // Switzerland
+        "ci",                 // Côte d'Ivoire
+        "ck",                 // Cook Islands
+        "cl",                 // Chile
+        "cm",                 // Cameroon
+        "cn",                 // China, mainland
+        "co",                 // Colombia
+        "cr",                 // Costa Rica
+        "cu",                 // Cuba
+        "cv",                 // Cape Verde
+        "cw",                 // Curaçao
+        "cx",                 // Christmas Island
+        "cy",                 // Cyprus
+        "cz",                 // Czech Republic
+        "de",                 // Germany
+        "dj",                 // Djibouti
+        "dk",                 // Denmark
+        "dm",                 // Dominica
+        "do",                 // Dominican Republic
+        "dz",                 // Algeria
+        "ec",                 // Ecuador
+        "ee",                 // Estonia
+        "eg",                 // Egypt
+        "er",                 // Eritrea
+        "es",                 // Spain
+        "et",                 // Ethiopia
+        "eu",                 // European Union
+        "fi",                 // Finland
+        "fj",                 // Fiji
+        "fk",                 // Falkland Islands
+        "fm",                 // Federated States of Micronesia
+        "fo",                 // Faroe Islands
+        "fr",                 // France
+        "ga",                 // Gabon
+        "gb",                 // Great Britain (United Kingdom)
+        "gd",                 // Grenada
+        "ge",                 // Georgia
+        "gf",                 // French Guiana
+        "gg",                 // Guernsey
+        "gh",                 // Ghana
+        "gi",                 // Gibraltar
+        "gl",                 // Greenland
+        "gm",                 // The Gambia
+        "gn",                 // Guinea
+        "gp",                 // Guadeloupe
+        "gq",                 // Equatorial Guinea
+        "gr",                 // Greece
+        "gs",                 // South Georgia and the South Sandwich Islands
+        "gt",                 // Guatemala
+        "gu",                 // Guam
+        "gw",                 // Guinea-Bissau
+        "gy",                 // Guyana
+        "hk",                 // Hong Kong
+        "hm",                 // Heard Island and McDonald Islands
+        "hn",                 // Honduras
+        "hr",                 // Croatia (Hrvatska)
+        "ht",                 // Haiti
+        "hu",                 // Hungary
+        "id",                 // Indonesia
+        "ie",                 // Ireland (Éire)
+        "il",                 // Israel
+        "im",                 // Isle of Man
+        "in",                 // India
+        "io",                 // British Indian Ocean Territory
+        "iq",                 // Iraq
+        "ir",                 // Iran
+        "is",                 // Iceland
+        "it",                 // Italy
+        "je",                 // Jersey
+        "jm",                 // Jamaica
+        "jo",                 // Jordan
+        "jp",                 // Japan
+        "ke",                 // Kenya
+        "kg",                 // Kyrgyzstan
+        "kh",                 // Cambodia (Khmer)
+        "ki",                 // Kiribati
+        "km",                 // Comoros
+        "kn",                 // Saint Kitts and Nevis
+        "kp",                 // North Korea
+        "kr",                 // South Korea
+        "kw",                 // Kuwait
+        "ky",                 // Cayman Islands
+        "kz",                 // Kazakhstan
+        "la",                 // Laos (currently being marketed as the official domain for Los Angeles)
+        "lb",                 // Lebanon
+        "lc",                 // Saint Lucia
+        "li",                 // Liechtenstein
+        "lk",                 // Sri Lanka
+        "lr",                 // Liberia
+        "ls",                 // Lesotho
+        "lt",                 // Lithuania
+        "lu",                 // Luxembourg
+        "lv",                 // Latvia
+        "ly",                 // Libya
+        "ma",                 // Morocco
+        "mc",                 // Monaco
+        "md",                 // Moldova
+        "me",                 // Montenegro
+        "mg",                 // Madagascar
+        "mh",                 // Marshall Islands
+        "mk",                 // Republic of Macedonia
+        "ml",                 // Mali
+        "mm",                 // Myanmar
+        "mn",                 // Mongolia
+        "mo",                 // Macau
+        "mp",                 // Northern Mariana Islands
+        "mq",                 // Martinique
+        "mr",                 // Mauritania
+        "ms",                 // Montserrat
+        "mt",                 // Malta
+        "mu",                 // Mauritius
+        "mv",                 // Maldives
+        "mw",                 // Malawi
+        "mx",                 // Mexico
+        "my",                 // Malaysia
+        "mz",                 // Mozambique
+        "na",                 // Namibia
+        "nc",                 // New Caledonia
+        "ne",                 // Niger
+        "nf",                 // Norfolk Island
+        "ng",                 // Nigeria
+        "ni",                 // Nicaragua
+        "nl",                 // Netherlands
+        "no",                 // Norway
+        "np",                 // Nepal
+        "nr",                 // Nauru
+        "nu",                 // Niue
+        "nz",                 // New Zealand
+        "om",                 // Oman
+        "pa",                 // Panama
+        "pe",                 // Peru
+        "pf",                 // French Polynesia With Clipperton Island
+        "pg",                 // Papua New Guinea
+        "ph",                 // Philippines
+        "pk",                 // Pakistan
+        "pl",                 // Poland
+        "pm",                 // Saint-Pierre and Miquelon
+        "pn",                 // Pitcairn Islands
+        "pr",                 // Puerto Rico
+        "ps",                 // Palestinian territories (PA-controlled West Bank and Gaza Strip)
+        "pt",                 // Portugal
+        "pw",                 // Palau
+        "py",                 // Paraguay
+        "qa",                 // Qatar
+        "re",                 // Réunion
+        "ro",                 // Romania
+        "rs",                 // Serbia
+        "ru",                 // Russia
+        "rw",                 // Rwanda
+        "sa",                 // Saudi Arabia
+        "sb",                 // Solomon Islands
+        "sc",                 // Seychelles
+        "sd",                 // Sudan
+        "se",                 // Sweden
+        "sg",                 // Singapore
+        "sh",                 // Saint Helena
+        "si",                 // Slovenia
+        "sj",                 // Svalbard and Jan Mayen Islands Not in use (Norwegian dependencies; see .no)
+        "sk",                 // Slovakia
+        "sl",                 // Sierra Leone
+        "sm",                 // San Marino
+        "sn",                 // Senegal
+        "so",                 // Somalia
+        "sr",                 // Suriname
+        "st",                 // São Tomé and Príncipe
+        "su",                 // Soviet Union (deprecated)
+        "sv",                 // El Salvador
+        "sx",                 // Sint Maarten
+        "sy",                 // Syria
+        "sz",                 // Swaziland
+        "tc",                 // Turks and Caicos Islands
+        "td",                 // Chad
+        "tf",                 // French Southern and Antarctic Lands
+        "tg",                 // Togo
+        "th",                 // Thailand
+        "tj",                 // Tajikistan
+        "tk",                 // Tokelau
+        "tl",                 // East Timor (deprecated old code)
+        "tm",                 // Turkmenistan
+        "tn",                 // Tunisia
+        "to",                 // Tonga
+        "tp",                 // East Timor
+        "tr",                 // Turkey
+        "tt",                 // Trinidad and Tobago
+        "tv",                 // Tuvalu
+        "tw",                 // Taiwan, Republic of China
+        "tz",                 // Tanzania
+        "ua",                 // Ukraine
+        "ug",                 // Uganda
+        "uk",                 // United Kingdom
+        "us",                 // United States of America
+        "uy",                 // Uruguay
+        "uz",                 // Uzbekistan
+        "va",                 // Vatican City State
+        "vc",                 // Saint Vincent and the Grenadines
+        "ve",                 // Venezuela
+        "vg",                 // British Virgin Islands
+        "vi",                 // U.S. Virgin Islands
+        "vn",                 // Vietnam
+        "vu",                 // Vanuatu
+        "wf",                 // Wallis and Futuna
+        "ws",                 // Samoa (formerly Western Samoa)
+        "xn--3e0b707e", // 한국 KISA (Korea Internet &amp; Security Agency)
+        "xn--45brj9c", // ভারত National Internet Exchange of India
+        "xn--80ao21a", // қаз Association of IT Companies of Kazakhstan
+        "xn--90a3ac", // срб Serbian National Internet Domain Registry (RNIDS)
+        "xn--clchc0ea0b2g2a9gcd", // சிங்கப்பூர் Singapore Network Information Centre (SGNIC) Pte Ltd
+        "xn--d1alf", // мкд Macedonian Academic Research Network Skopje
+        "xn--fiqs8s", // 中国 China Internet Network Information Center
+        "xn--fiqz9s", // 中國 China Internet Network Information Center
+        "xn--fpcrj9c3d", // భారత్ National Internet Exchange of India
+        "xn--fzc2c9e2c", // ලංකා LK Domain Registry
+        "xn--gecrj9c", // ભારત National Internet Exchange of India
+        "xn--h2brj9c", // भारत National Internet Exchange of India
+        "xn--j1amh", // укр Ukrainian Network Information Centre (UANIC), Inc.
+        "xn--j6w193g", // 香港 Hong Kong Internet Registration Corporation Ltd.
+        "xn--kprw13d", // 台湾 Taiwan Network Information Center (TWNIC)
+        "xn--kpry57d", // 台灣 Taiwan Network Information Center (TWNIC)
+        "xn--l1acc", // мон Datacom Co.,Ltd
+        "xn--lgbbat1ad8j", // الجزائر CERIST
+        "xn--mgb9awbf", // عمان Telecommunications Regulatory Authority (TRA)
+        "xn--mgba3a4f16a", // ایران Institute for Research in Fundamental Sciences (IPM)
+        "xn--mgbaam7a8h", // امارات Telecommunications Regulatory Authority (TRA)
+        "xn--mgbayh7gpa", // الاردن National Information Technology Center (NITC)
+        "xn--mgbbh1a71e", // بھارت National Internet Exchange of India
+        "xn--mgbc0a9azcg", // المغرب Agence Nationale de Réglementation des Télécommunications (ANRT)
+        "xn--mgberp4a5d4ar", // السعودية Communications and Information Technology Commission
+        "xn--mgbx4cd0ab", // مليسيا MYNIC Berhad
+        "xn--node", // გე Information Technologies Development Center (ITDC)
+        "xn--o3cw4h", // ไทย Thai Network Information Center Foundation
+        "xn--ogbpf8fl", // سورية National Agency for Network Services (NANS)
+        "xn--p1ai", // рф Coordination Center for TLD RU
+        "xn--pgbs0dh", // تونس Agence Tunisienne d&#39;Internet
+        "xn--s9brj9c", // ਭਾਰਤ National Internet Exchange of India
+        "xn--wgbh1c", // مصر National Telecommunication Regulatory Authority - NTRA
+        "xn--wgbl6a", // قطر Communications Regulatory Authority
+        "xn--xkc2al3hye2a", // இலங்கை LK Domain Registry
+        "xn--xkc2dl3a5ee0h", // இந்தியா National Internet Exchange of India
+        "xn--yfro4i67o", // 新加坡 Singapore Network Information Centre (SGNIC) Pte Ltd
+        "xn--ygbi2ammx", // فلسطين Ministry of Telecom &amp; Information Technology (MTIT)
+        "ye",                 // Yemen
+        "yt",                 // Mayotte
+        "za",                 // South Africa
+        "zm",                 // Zambia
+        "zw",                 // Zimbabwe
     };
-    private static final String[] LOCAL_TLDS = new String[]{
-        "localhost", // RFC2606 defined
-        "localdomain" // Also widely used as localhost.localdomain
+
+    // WARNING: this array MUST be sorted, others it cannot be searched reliably using binary search
+    private static final String[] LOCAL_TLDS = new String[] {
+       "localdomain",         // Also widely used as localhost.localdomain
+       "localhost",           // RFC2606 defined
     };
-    private static final List INFRASTRUCTURE_TLD_LIST = Arrays.asList(INFRASTRUCTURE_TLDS);
-    private static final List GENERIC_TLD_LIST = Arrays.asList(GENERIC_TLDS);
-    private static final List COUNTRY_CODE_TLD_LIST = Arrays.asList(COUNTRY_CODE_TLDS);
-    private static final List LOCAL_TLD_LIST = Arrays.asList(LOCAL_TLDS);
+
+    /**
+     * Converts potentially Unicode input to punycode.
+     * If conversion fails, returns the original input.
+     * 
+     * @param input the string to convert, not null
+     * @return converted input, or original input if conversion fails
+     */
+    // Needed by UrlValidator
+    static String unicodeToASCII(String input) {
+        try {
+            return /* java.net.IDN. */ toASCII(input);
+        } catch (IllegalArgumentException e) { // input is not valid
+            return input;
+        }
+    }
+
+    // ================= Code needed for Java 1.4 and 1.5 compatibility ===============
+
+    private static class IDNHolder {
+        private static Method getMethod() {
+            try {
+                Class clazz = Class.forName("java.net.IDN", false, DomainValidator.class.getClassLoader());
+                return clazz.getDeclaredMethod("toASCII", new Class[]{String.class});
+            } catch (Exception e) {
+              return null;
+            }
+        }
+        private static final Method JAVA_NET_IDN_TO_ASCII = getMethod();
+    }
+
+    /*
+     * Helper method to invoke java.net.IDN.toAscii(String).
+     * Allows code to be compiled with Java 1.4 and 1.5 
+     * @throws IllegalArgumentException if the input string doesn't conform to RFC 3490 specification
+     */
+    private static final String toASCII(String line) throws IllegalArgumentException {
+//        java.net.IDN.toASCII(line); // Java 1.6+
+        // implementation for Java 1.4 and 1.5
+        // effectively this is done by IDN.toASCII but we want to skip the entire call
+        if (isOnlyASCII(line)) {
+            return line;
+        }
+        Method m = IDNHolder.JAVA_NET_IDN_TO_ASCII;
+        if (m == null) { // avoid NPE
+            return line;
+        }
+        try {
+            return (String) m.invoke(null, new String[]{line.toLowerCase(Locale.ENGLISH)});
+        } catch (IllegalAccessException e) {
+            throw new RuntimeException(e); // Should not happen
+        } catch (InvocationTargetException e) {
+            Throwable t = e.getCause();
+            if (t instanceof IllegalArgumentException) { // this is expected from toASCII method
+                throw (IllegalArgumentException) t;
+            }
+            throw new RuntimeException(e); // Should not happen
+        }
+    }
+
+    /*
+     * Check if input contains only ASCII
+     * Treats null as all ASCII
+     */
+    private static boolean isOnlyASCII(String input) {
+        if (input == null) {
+            return true;
+        }
+        for(int i=0; i < input.length(); i++) {
+            if (input.charAt(i) > 0x7F) {
+                return false;
+            }
+        }
+        return true;
+    }
+
 }
diff --git a/saripaar/src/main/java/commons/validator/routines/DoubleValidator.java b/saripaar/src/main/java/commons/validator/routines/DoubleValidator.java
index 4284336..1456e81 100644
--- a/saripaar/src/main/java/commons/validator/routines/DoubleValidator.java
+++ b/saripaar/src/main/java/commons/validator/routines/DoubleValidator.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines;
 
 import java.text.Format;
@@ -38,7 +37,7 @@
  *    one of the <code>validate()</code> methods to validate and receive a
  *    <i>converted</i> <code>Double</code> value.</p>
  *
- * <p>Once a value has been sucessfully converted the following
+ * <p>Once a value has been successfully converted the following
  *    methods can be used to perform minimum, maximum and range checks:</p>
  *    <ul>
  *       <li><code>minValue()</code> checks whether the value is greater
@@ -60,9 +59,13 @@
  *       <li>using a specified pattern with a specified <code>Locale</code></li>
  *    </ul>
  *
+ * @version $Revision$
  * @since Validator 1.3.0
  */
 public class DoubleValidator extends AbstractNumberValidator {
+
+    private static final long serialVersionUID = 5867946581318211330L;
+
     private static final DoubleValidator VALIDATOR = new DoubleValidator();
 
     /**
@@ -238,10 +241,11 @@ public boolean maxValue(Double value, double max) {
      * or <code>null</code> if invalid.
      */
     protected Object processParsedValue(Object value, Format formatter) {
+
         if (value instanceof Double) {
             return value;
-        } else {
-            return new Double(((Number) value).doubleValue());
         }
+        return new Double(((Number)value).doubleValue());
+
     }
 }
diff --git a/saripaar/src/main/java/commons/validator/routines/EmailValidator.java b/saripaar/src/main/java/commons/validator/routines/EmailValidator.java
index bfb9869..274c19d 100644
--- a/saripaar/src/main/java/commons/validator/routines/EmailValidator.java
+++ b/saripaar/src/main/java/commons/validator/routines/EmailValidator.java
@@ -1,12 +1,12 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
+ * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * the License.  You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -14,53 +14,53 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines;
 
+import java.io.Serializable;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 /**
  * <p>Perform email validations.</p>
  * <p>
- * This class is a Singleton; you can retrieve the instance via the getInstance() method.
- * </p>
- * <p>
  * Based on a script by <a href="mailto:stamhankar@hotmail.com">Sandeep V. Tamhankar</a>
  * http://javascript.internet.com
  * </p>
  * <p>
  * This implementation is not guaranteed to catch all possible errors in an email address.
- * For example, an address like nobody@noplace.somedog will pass validator, even though there
- * is no TLD "somedog"
  * </p>.
  *
+ * @version $Revision$
  * @since Validator 1.4
  */
-public class EmailValidator {
+public class EmailValidator implements Serializable {
+
+    private static final long serialVersionUID = 1705927040799295880L;
+
     private static final String SPECIAL_CHARS = "\\p{Cntrl}\\(\\)<>@,;:'\\\\\\\"\\.\\[\\]";
     private static final String VALID_CHARS = "[^\\s" + SPECIAL_CHARS + "]";
     private static final String QUOTED_USER = "(\"[^\"]*\")";
     private static final String WORD = "((" + VALID_CHARS + "|')+|" + QUOTED_USER + ")";
-    private static final String LEGAL_ASCII_REGEX = "^\\p{ASCII}+$";
+
     private static final String EMAIL_REGEX = "^\\s*?(.+)@(.+?)\\s*$";
     private static final String IP_DOMAIN_REGEX = "^\\[(.*)\\]$";
     private static final String USER_REGEX = "^\\s*" + WORD + "(\\." + WORD + ")*$";
-    private static final Pattern MATCH_ASCII_PATTERN = Pattern.compile(LEGAL_ASCII_REGEX);
+
     private static final Pattern EMAIL_PATTERN = Pattern.compile(EMAIL_REGEX);
     private static final Pattern IP_DOMAIN_PATTERN = Pattern.compile(IP_DOMAIN_REGEX);
     private static final Pattern USER_PATTERN = Pattern.compile(USER_REGEX);
+
     private final boolean allowLocal;
 
     /**
      * Singleton instance of this class, which
-     * doesn't consider local addresses as valid.
+     *  doesn't consider local addresses as valid.
      */
     private static final EmailValidator EMAIL_VALIDATOR = new EmailValidator(false);
 
     /**
      * Singleton instance of this class, which does
-     * consider local addresses valid.
+     *  consider local addresses valid.
      */
     private static final EmailValidator EMAIL_VALIDATOR_WITH_LOCAL = new EmailValidator(true);
 
@@ -75,14 +75,14 @@ public static EmailValidator getInstance() {
 
     /**
      * Returns the Singleton instance of this validator,
-     * with local validation as required.
+     *  with local validation as required.
      *
      * @param allowLocal Should local addresses be considered valid?
      * @return singleton instance of this validator
      */
     public static EmailValidator getInstance(boolean allowLocal) {
-        if (allowLocal) {
-            return EMAIL_VALIDATOR_WITH_LOCAL;
+        if(allowLocal) {
+           return EMAIL_VALIDATOR_WITH_LOCAL;
         }
         return EMAIL_VALIDATOR;
     }
@@ -100,7 +100,7 @@ protected EmailValidator(boolean allowLocal) {
     /**
      * <p>Checks if a field has a valid e-mail address.</p>
      *
-     * @param email The value validation is being performed on. A <code>null</code>
+     * @param email The value validation is being performed on.  A <code>null</code>
      *              value is considered invalid.
      * @return true if the email address is valid.
      */
@@ -108,8 +108,8 @@ public boolean isValid(String email) {
         if (email == null) {
             return false;
         }
-        Matcher asciiMatcher = MATCH_ASCII_PATTERN.matcher(email);
-        if (!asciiMatcher.matches()) {
+
+        if (email.endsWith(".")) { // check this first - it's cheap!
             return false;
         }
 
@@ -118,37 +118,38 @@ public boolean isValid(String email) {
         if (!emailMatcher.matches()) {
             return false;
         }
-        if (email.endsWith(".")) {
-            return false;
-        }
+
         if (!isValidUser(emailMatcher.group(1))) {
             return false;
         }
+
         if (!isValidDomain(emailMatcher.group(2))) {
             return false;
         }
+
         return true;
     }
 
     /**
      * Returns true if the domain component of an email address is valid.
      *
-     * @param domain being validated.
+     * @param domain being validated, may be in IDN format
      * @return true if the email address's domain is valid.
      */
     protected boolean isValidDomain(String domain) {
         // see if domain is an IP address in brackets
         Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);
+
         if (ipDomainMatcher.matches()) {
             InetAddressValidator inetAddressValidator =
-                InetAddressValidator.getInstance();
+                    InetAddressValidator.getInstance();
             return inetAddressValidator.isValid(ipDomainMatcher.group(1));
-        } else {
-            // Domain is symbolic name
-            DomainValidator domainValidator =
-                DomainValidator.getInstance(allowLocal);
-            return domainValidator.isValid(domain);
         }
+        // Domain is symbolic name
+        DomainValidator domainValidator =
+                DomainValidator.getInstance(allowLocal);
+        return domainValidator.isValid(domain) ||
+                domainValidator.isValidTld(domain);
     }
 
     /**
@@ -160,5 +161,5 @@ protected boolean isValidDomain(String domain) {
     protected boolean isValidUser(String user) {
         return USER_PATTERN.matcher(user).matches();
     }
-}
 
+}
diff --git a/saripaar/src/main/java/commons/validator/routines/ISBNValidator.java b/saripaar/src/main/java/commons/validator/routines/ISBNValidator.java
index d1d6baf..22bffd5 100644
--- a/saripaar/src/main/java/commons/validator/routines/ISBNValidator.java
+++ b/saripaar/src/main/java/commons/validator/routines/ISBNValidator.java
@@ -1,12 +1,12 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
+ * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * the License.  You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines;
 
+import java.io.Serializable;
 import commons.validator.routines.checkdigit.EAN13CheckDigit;
 import commons.validator.routines.checkdigit.ISBN10CheckDigit;
 import commons.validator.routines.checkdigit.CheckDigitException;
@@ -39,19 +39,23 @@
  * ISBN number (rather than this 10 digit ISBN number). ISBN-13 codes are
  * <a href="http://en.wikipedia.org/wiki/European_Article_Number">EAN</a>
  * codes, for more information see:</p>
+ *
  * <ul>
- * <li><a href="http://en.wikipedia.org/wiki/ISBN">Wikipedia - International
- * Standard Book Number (ISBN)</a>.</li>
- * <li>EAN - see
- * <a href="http://en.wikipedia.org/wiki/European_Article_Number">Wikipedia -
- * European Article Number</a>.</li>
- * <li><a href="http://www.isbn.org/standards/home/isbn/transition.asp">ISBN-13
- * Transition details</a>.</li>
+ *   <li><a href="http://en.wikipedia.org/wiki/ISBN">Wikipedia - International
+ *       Standard Book Number (ISBN)</a>.</li>
+ *   <li>EAN - see
+ *       <a href="http://en.wikipedia.org/wiki/European_Article_Number">Wikipedia -
+ *       European Article Number</a>.</li>
+ *   <li><a href="http://www.isbn.org/standards/home/isbn/transition.asp">ISBN-13
+ *       Transition details</a>.</li>
  * </ul>
  *
+ * @version $Revision$
  * @since Validator 1.4
  */
-public class ISBNValidator {
+public class ISBNValidator implements Serializable {
+
+    private static final long serialVersionUID = 4319515687976420405L;
 
     private static final String SEP = "(?:\\-|\\s)";
     private static final String GROUP = "(\\d{1,5})";
@@ -60,42 +64,33 @@
 
     /**
      * ISBN-10 consists of 4 groups of numbers separated by either dashes (-)
-     * or spaces. The first group is 1-5 characters, second 1-7, third 1-6,
+     * or spaces.  The first group is 1-5 characters, second 1-7, third 1-6,
      * and fourth is 1 digit or an X.
      */
-    static final String ISBN10_REGEX =
-            "^(?:(\\d{9}[0-9X])|(?:" + GROUP + SEP + PUBLISHER + SEP + TITLE + SEP + "([0-9X])))$";
+    static final String ISBN10_REGEX     =
+                  "^(?:(\\d{9}[0-9X])|(?:" + GROUP + SEP + PUBLISHER + SEP + TITLE + SEP + "([0-9X])))$";
 
     /**
      * ISBN-13 consists of 5 groups of numbers separated by either dashes (-)
-     * or spaces. The first group is 978 or 979, the second group is
+     * or spaces.  The first group is 978 or 979, the second group is
      * 1-5 characters, third 1-7, fourth 1-6, and fifth is 1 digit.
      */
-    static final String ISBN13_REGEX =
-            "^(978|979)(?:(\\d{10})|(?:" + SEP + GROUP + SEP + PUBLISHER + SEP
-                    + TITLE + SEP + "([0-9])))$";
+    static final String ISBN13_REGEX     =
+        "^(978|979)(?:(\\d{10})|(?:" + SEP + GROUP + SEP + PUBLISHER + SEP + TITLE + SEP + "([0-9])))$";
 
-    /**
-     * ISBN Code Validator (which converts ISBN-10 codes to ISBN-13
-     */
+    /** ISBN Code Validator (which converts ISBN-10 codes to ISBN-13 */
     private static final ISBNValidator ISBN_VALIDATOR = new ISBNValidator();
 
-    /**
-     * ISBN Code Validator (which converts ISBN-10 codes to ISBN-13
-     */
+    /** ISBN Code Validator (which converts ISBN-10 codes to ISBN-13 */
     private static final ISBNValidator ISBN_VALIDATOR_NO_CONVERT = new ISBNValidator(false);
 
-    /**
-     * ISBN-10 Code Validator
-     */
-    private final CodeValidator isbn10Validator = new CodeValidator(ISBN10_REGEX, 10,
-            ISBN10CheckDigit.ISBN10_CHECK_DIGIT);
 
-    /**
-     * ISBN-13 Code Validator
-     */
-    private final CodeValidator isbn13Validator = new CodeValidator(ISBN13_REGEX, 13,
-            EAN13CheckDigit.EAN13_CHECK_DIGIT);
+    /** ISBN-10 Code Validator */
+    private final CodeValidator isbn10Validator = new CodeValidator(ISBN10_REGEX, 10, ISBN10CheckDigit.ISBN10_CHECK_DIGIT);
+
+    /** ISBN-13 Code Validator */
+    private final CodeValidator isbn13Validator = new CodeValidator(ISBN13_REGEX, 13, EAN13CheckDigit.EAN13_CHECK_DIGIT);
+
     private final boolean convert;
 
     /**
@@ -113,8 +108,8 @@ public static ISBNValidator getInstance() {
      * whether ISBN-10 codes should be converted to ISBN-13.
      *
      * @param convert <code>true</code> if valid ISBN-10 codes
-     *                should be converted to ISBN-13 codes or <code>false</code>
-     *                if valid ISBN-10 codes should be returned unchanged.
+     * should be converted to ISBN-13 codes or <code>false</code>
+     * if valid ISBN-10 codes should be returned unchanged.
      * @return A singleton instance of the ISBN validator.
      */
     public static ISBNValidator getInstance(boolean convert) {
@@ -134,8 +129,8 @@ public ISBNValidator() {
      * ISBN-10 codes should be converted to ISBN-13.
      *
      * @param convert <code>true</code> if valid ISBN-10 codes
-     *                should be converted to ISBN-13 codes or <code>false</code>
-     *                if valid ISBN-10 codes should be returned unchanged.
+     * should be converted to ISBN-13 codes or <code>false</code>
+     * if valid ISBN-10 codes should be returned unchanged.
      */
     public ISBNValidator(boolean convert) {
         this.convert = convert;
@@ -179,11 +174,9 @@ public boolean isValidISBN13(String code) {
      * <p>
      * If valid, this method returns the ISBN code with
      * formatting characters removed (i.e. space or hyphen).
-     * </p>
      * <p>
      * Converts an ISBN-10 codes to ISBN-13 if
      * <code>convertToISBN13</code> is <code>true</code>.
-     * </p>
      *
      * @param code The code to validate.
      * @return A valid ISBN code if valid, otherwise <code>null</code>.
@@ -203,7 +196,7 @@ public String validate(String code) {
      * Check the code is a valid ISBN-10 code.
      * <p>
      * If valid, this method returns the ISBN-10 code with
-     * formatting characters removed (i.e. space or hyphen).</p>
+     * formatting characters removed (i.e. space or hyphen).
      *
      * @param code The code to validate.
      * @return A valid ISBN-10 code if valid,
@@ -218,7 +211,7 @@ public String validateISBN10(String code) {
      * Check the code is a valid ISBN-13 code.
      * <p>
      * If valid, this method returns the ISBN-13 code with
-     * formatting characters removed (i.e. space or hyphen).</p>
+     * formatting characters removed (i.e. space or hyphen).
      *
      * @param code The code to validate.
      * @return A valid ISBN-13 code if valid,
@@ -233,20 +226,21 @@ public String validateISBN13(String code) {
      * Convert an ISBN-10 code to an ISBN-13 code.
      * <p>
      * This method requires a valid ISBN-10 with NO formatting
-     * characters.</p>
+     * characters.
      *
      * @param isbn10 The ISBN-10 code to convert
      * @return A converted ISBN-13 code or <code>null</code>
      * if the ISBN-10 code is not valid
      */
     public String convertToISBN13(String isbn10) {
+
         if (isbn10 == null) {
             return null;
         }
+
         String input = isbn10.trim();
         if (input.length() != 10) {
-            throw new IllegalArgumentException("Invalid length " + input.length()
-                    + " for '" + input + "'");
+            throw new IllegalArgumentException("Invalid length " + input.length() + " for '" + input + "'");
         }
 
         // Calculate the new ISBN-13 code
@@ -256,8 +250,9 @@ public String convertToISBN13(String isbn10) {
             isbn13 += checkDigit;
             return isbn13;
         } catch (CheckDigitException e) {
-            throw new IllegalArgumentException("Check digit error for '" + input
-                    + "' - " + e.getMessage());
+            throw new IllegalArgumentException("Check digit error for '" + input + "' - " + e.getMessage());
         }
+
     }
+
 }
diff --git a/saripaar/src/main/java/commons/validator/routines/InetAddressValidator.java b/saripaar/src/main/java/commons/validator/routines/InetAddressValidator.java
index 0ed8cd7..84d7db0 100644
--- a/saripaar/src/main/java/commons/validator/routines/InetAddressValidator.java
+++ b/saripaar/src/main/java/commons/validator/routines/InetAddressValidator.java
@@ -1,12 +1,12 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
+ * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * the License.  You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -17,33 +17,40 @@
 
 package commons.validator.routines;
 
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
 /**
  * <p><b>InetAddress</b> validation and conversion routines (<code>java.net.InetAddress</code>).</p>
+ *
  * <p>This class provides methods to validate a candidate IP address.
+ *
  * <p>
  * This class is a Singleton; you can retrieve the instance via the {@link #getInstance()} method.
  * </p>
  *
+ * @version $Revision$
  * @since Validator 1.4
  */
-public class InetAddressValidator {
+public class InetAddressValidator implements Serializable {
+
+    private static final long serialVersionUID = -919201640201914789L;
 
     private static final String IPV4_REGEX =
-        "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$";
+            "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$";
 
     /**
      * Singleton instance of this class.
      */
     private static final InetAddressValidator VALIDATOR = new InetAddressValidator();
 
-    /**
-     * IPv4 RegexValidator
-     */
+    /** IPv4 RegexValidator */
     private final RegexValidator ipv4Validator = new RegexValidator(IPV4_REGEX);
 
     /**
      * Returns the singleton instance of this validator.
-     *
      * @return the singleton instance of this validator
      */
     public static InetAddressValidator getInstance() {
@@ -52,40 +59,126 @@ public static InetAddressValidator getInstance() {
 
     /**
      * Checks if the specified string is a valid IP address.
-     *
      * @param inetAddress the string to validate
      * @return true if the string validates as an IP address
      */
     public boolean isValid(String inetAddress) {
-        return isValidInet4Address(inetAddress);
+        return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);
     }
 
     /**
      * Validates an IPv4 address. Returns true if valid.
-     *
      * @param inet4Address the IPv4 address to validate
      * @return true if the argument contains a valid IPv4 address
      */
     public boolean isValidInet4Address(String inet4Address) {
         // verify that address conforms to generic IPv4 format
         String[] groups = ipv4Validator.match(inet4Address);
-        if (groups == null) return false;
+
+        if (groups == null) {
+            return false;
+        }
 
         // verify that address subgroups are legal
         for (int i = 0; i <= 3; i++) {
             String ipSegment = groups[i];
-            if (ipSegment == null || ipSegment.length() <= 0) {
+            if (ipSegment == null || ipSegment.length() == 0) {
                 return false;
             }
+
             int iIpSegment = 0;
+
             try {
                 iIpSegment = Integer.parseInt(ipSegment);
-            } catch (NumberFormatException e) {
+            } catch(NumberFormatException e) {
                 return false;
             }
+
             if (iIpSegment > 255) {
                 return false;
             }
+
+            if (ipSegment.length() > 1 && ipSegment.startsWith("0")) {
+                return false;
+            }
+
+        }
+
+        return true;
+    }
+
+    /**
+     * Validates an IPv6 address. Returns true if valid.
+     * @param inet6Address the IPv6 address to validate
+     * @return true if the argument contains a valid IPv6 address
+     * 
+     * @since 1.4.1
+     */
+    public boolean isValidInet6Address(String inet6Address) {
+        boolean containsCompressedZeroes = inet6Address.indexOf("::") > -1; // contains is Java 1.5
+        if (containsCompressedZeroes && (inet6Address.indexOf("::") != inet6Address.lastIndexOf("::"))) {
+            return false;
+        }
+        if ((inet6Address.startsWith(":") && !inet6Address.startsWith("::"))
+                || (inet6Address.endsWith(":") && !inet6Address.endsWith("::"))) {
+            return false;
+        }
+        Object[] octets = inet6Address.split(":");
+        if (containsCompressedZeroes) {
+            List octetList = new ArrayList(Arrays.asList(octets));
+            if (inet6Address.endsWith("::")) {
+                // String.split() drops ending empty segments
+                octetList.add("");
+            } else if (inet6Address.startsWith("::") && !octetList.isEmpty()) {
+                octetList.remove(0);
+            }
+            octets = octetList.toArray();
+        }
+        if (octets.length > 8) {
+            return false;
+        }
+        int validOctets = 0;
+        int emptyOctets = 0;
+        for (int index = 0; index < octets.length; index++) {
+            String octet = (String) octets[index];
+            if (octet.length() == 0) {
+                emptyOctets++;
+                if (emptyOctets > 1) {
+                    return false;
+                }
+            } else {
+                emptyOctets = 0;
+                if (octet.indexOf(".") > -1) { // contains is Java 1.5+
+                    if (!inet6Address.endsWith(octet)) {
+                        return false;
+                    }
+                    if (index > octets.length - 1 || index > 6) {
+                        // IPV4 occupies last two octets
+                        return false;
+                    }
+                    if (!isValidInet4Address(octet)) {
+                        return false;
+                    }
+                    validOctets += 2;
+                    continue;
+                }
+                if (octet.length() > 4) {
+                    return false;
+                }
+                int octetInt = 0;
+                try {
+                    octetInt = Integer.valueOf(octet, 16).intValue();
+                } catch (NumberFormatException e) {
+                    return false;
+                }
+                if (octetInt < 0 || octetInt > 0xffff) {
+                    return false;
+                }
+            }
+            validOctets++;
+        }
+        if (validOctets < 8 && !containsCompressedZeroes) {
+            return false;
         }
         return true;
     }
diff --git a/saripaar/src/main/java/commons/validator/routines/IntegerValidator.java b/saripaar/src/main/java/commons/validator/routines/IntegerValidator.java
index 21cb0d1..e8041d0 100644
--- a/saripaar/src/main/java/commons/validator/routines/IntegerValidator.java
+++ b/saripaar/src/main/java/commons/validator/routines/IntegerValidator.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines;
 
 import java.text.Format;
@@ -38,7 +37,7 @@
  *    one of the <code>validate()</code> methods to validate and receive a
  *    <i>converted</i> <code>Integer</code> value.</p>
  *
- * <p>Once a value has been sucessfully converted the following
+ * <p>Once a value has been successfully converted the following
  *    methods can be used to perform minimum, maximum and range checks:</p>
  *    <ul>
  *       <li><code>minValue()</code> checks whether the value is greater
@@ -60,9 +59,13 @@
  *       <li>using a specified pattern with a specified <code>Locale</code></li>
  *    </ul>
  *
+ * @version $Revision$
  * @since Validator 1.3.0
  */
 public class IntegerValidator extends AbstractNumberValidator {
+
+    private static final long serialVersionUID = 422081746310306596L;
+
     private static final IntegerValidator VALIDATOR = new IntegerValidator();
 
     /**
@@ -114,7 +117,7 @@ public IntegerValidator(boolean strict, int formatType) {
      *  if invalid.
      */
     public Integer validate(String value) {
-        return (Integer) parse(value, (String)null, (Locale)null);
+        return (Integer)parse(value, (String)null, (Locale)null);
     }
 
     /**
@@ -152,7 +155,7 @@ public Integer validate(String value, Locale locale) {
      * @return The parsed <code>Integer</code> if valid or <code>null</code> if invalid.
      */
     public Integer validate(String value, String pattern, Locale locale) {
-        return (Integer) parse(value, pattern, locale);
+        return (Integer)parse(value, pattern, locale);
     }
 
     /**
@@ -239,12 +242,13 @@ public boolean maxValue(Integer value, int max) {
      *   <code>Integer</code> if valid or <code>null</code> if invalid.
      */
     protected Object processParsedValue(Object value, Format formatter) {
+
         long longValue = ((Number)value).longValue();
+
         if (longValue < Integer.MIN_VALUE ||
             longValue > Integer.MAX_VALUE) {
             return null;
-        } else {
-            return (int) longValue;
         }
+        return new Integer((int)longValue);
     }
 }
diff --git a/saripaar/src/main/java/commons/validator/routines/RegexValidator.java b/saripaar/src/main/java/commons/validator/routines/RegexValidator.java
index 788ec13..67bdd54 100644
--- a/saripaar/src/main/java/commons/validator/routines/RegexValidator.java
+++ b/saripaar/src/main/java/commons/validator/routines/RegexValidator.java
@@ -1,12 +1,12 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
+ * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * the License.  You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines;
 
+import java.io.Serializable;
 import java.util.regex.Pattern;
 import java.util.regex.Matcher;
 
@@ -25,22 +25,50 @@
  * <p>
  * Construct the validator either for a single regular expression or a set (array) of
  * regular expressions. By default validation is <i>case sensitive</i> but constructors
- * are provided to allow <i>case in-sensitive</i> validation. For example to create
+ * are provided to allow  <i>case in-sensitive</i> validation. For example to create
  * a validator which does <i>case in-sensitive</i> validation for a set of regular
  * expressions:
  * </p>
  * <pre>
+ * <code>
  * String[] regexs = new String[] {...};
  * RegexValidator validator = new RegexValidator(regexs, false);
+ * </code>
  * </pre>
+ *
+ * <ul>
+ *   <li>Validate <code>true</code> or <code>false</code>:</li>
+ *   <li>
+ *     <ul>
+ *       <li><code>boolean valid = validator.isValid(value);</code></li>
+ *     </ul>
+ *   </li>
+ *   <li>Validate returning an aggregated String of the matched groups:</li>
+ *   <li>
+ *     <ul>
+ *       <li><code>String result = validator.validate(value);</code></li>
+ *     </ul>
+ *   </li>
+ *   <li>Validate returning the matched groups:</li>
+ *   <li>
+ *     <ul>
+ *       <li><code>String[] result = validator.match(value);</code></li>
+ *     </ul>
+ *   </li>
+ * </ul>
+ *
  * <p>
  * Cached instances pre-compile and re-use {@link Pattern}(s) - which according
  * to the {@link Pattern} API are safe to use in a multi-threaded environment.
  * </p>
  *
+ * @version $Revision$
  * @since Validator 1.4
  */
-public class RegexValidator {
+public class RegexValidator implements Serializable {
+
+    private static final long serialVersionUID = -8832409930574867162L;
+
     private final Pattern[] patterns;
 
     /**
@@ -48,7 +76,7 @@
      * regular expression.
      *
      * @param regex The regular expression this validator will
-     *              validate against
+     * validate against
      */
     public RegexValidator(String regex) {
         this(regex, true);
@@ -58,13 +86,13 @@ public RegexValidator(String regex) {
      * Construct a validator for a single regular expression
      * with the specified case sensitivity.
      *
-     * @param regex         The regular expression this validator will
-     *                      validate against
+     * @param regex The regular expression this validator will
+     * validate against
      * @param caseSensitive when <code>true</code> matching is <i>case
-     *                      sensitive</i>, otherwise matching is <i>case in-sensitive</i>
+     * sensitive</i>, otherwise matching is <i>case in-sensitive</i>
      */
     public RegexValidator(String regex, boolean caseSensitive) {
-        this(new String[]{regex}, caseSensitive);
+        this(new String[] {regex}, caseSensitive);
     }
 
     /**
@@ -72,7 +100,7 @@ public RegexValidator(String regex, boolean caseSensitive) {
      * of the set of regular expressions.
      *
      * @param regexs The set of regular expressions this validator will
-     *               validate against
+     * validate against
      */
     public RegexValidator(String[] regexs) {
         this(regexs, true);
@@ -82,22 +110,22 @@ public RegexValidator(String[] regexs) {
      * Construct a validator that matches any one of the set of regular
      * expressions with the specified case sensitivity.
      *
-     * @param regexs        The set of regular expressions this validator will
-     *                      validate against
+     * @param regexs The set of regular expressions this validator will
+     * validate against
      * @param caseSensitive when <code>true</code> matching is <i>case
-     *                      sensitive</i>, otherwise matching is <i>case in-sensitive</i>
+     * sensitive</i>, otherwise matching is <i>case in-sensitive</i>
      */
     public RegexValidator(String[] regexs, boolean caseSensitive) {
         if (regexs == null || regexs.length == 0) {
             throw new IllegalArgumentException("Regular expressions are missing");
         }
         patterns = new Pattern[regexs.length];
-        int flags = (caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);
+        int flags =  (caseSensitive ? 0: Pattern.CASE_INSENSITIVE);
         for (int i = 0; i < regexs.length; i++) {
             if (regexs[i] == null || regexs[i].length() == 0) {
                 throw new IllegalArgumentException("Regular expression[" + i + "] is missing");
             }
-            patterns[i] = Pattern.compile(regexs[i], flags);
+            patterns[i] =  Pattern.compile(regexs[i], flags);
         }
     }
 
@@ -138,7 +166,7 @@ public boolean isValid(String value) {
                 int count = matcher.groupCount();
                 String[] groups = new String[count];
                 for (int j = 0; j < count; j++) {
-                    groups[j] = matcher.group(j + 1);
+                    groups[j] = matcher.group(j+1);
                 }
                 return groups;
             }
@@ -146,6 +174,7 @@ public boolean isValid(String value) {
         return null;
     }
 
+
     /**
      * Validate a value against the set of regular expressions
      * returning a String value of the aggregated groups.
@@ -167,7 +196,7 @@ public String validate(String value) {
                 }
                 StringBuffer buffer = new StringBuffer();
                 for (int j = 0; j < count; j++) {
-                    String component = matcher.group(j + 1);
+                    String component = matcher.group(j+1);
                     if (component != null) {
                         buffer.append(component);
                     }
@@ -180,7 +209,6 @@ public String validate(String value) {
 
     /**
      * Provide a String representation of this validator.
-     *
      * @return A String representation of this validator
      */
     public String toString() {
@@ -195,4 +223,5 @@ public String toString() {
         buffer.append("}");
         return buffer.toString();
     }
+
 }
diff --git a/saripaar/src/main/java/commons/validator/routines/UrlValidator.java b/saripaar/src/main/java/commons/validator/routines/UrlValidator.java
index 66ae846..0f89a49 100644
--- a/saripaar/src/main/java/commons/validator/routines/UrlValidator.java
+++ b/saripaar/src/main/java/commons/validator/routines/UrlValidator.java
@@ -1,12 +1,12 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
+ * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * the License.  You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -14,12 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines;
 
-import java.util.Arrays;
+import java.io.Serializable;
 import java.util.Collections;
 import java.util.HashSet;
+import java.util.Locale;
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -27,46 +27,54 @@
 /**
  * <p><b>URL Validation</b> routines.</p>
  * Behavior of validation is modified by passing in options:
- * <p>ALLOW_2_SLASHES - [FALSE] Allows double '/' characters in the path
- * component.</p>
- * <p>NO_FRAGMENT- [FALSE] By default fragments are allowed, if this option is
- * included then fragments are flagged as illegal.</p>
- * <p>ALLOW_ALL_SCHEMES - [FALSE] By default only http, https, and ftp are
- * considered valid schemes. Enabling this option will let any scheme pass validation.</p>
+ * <ul>
+ * <li>ALLOW_2_SLASHES - [FALSE]  Allows double '/' characters in the path
+ * component.</li>
+ * <li>NO_FRAGMENT- [FALSE]  By default fragments are allowed, if this option is
+ * included then fragments are flagged as illegal.</li>
+ * <li>ALLOW_ALL_SCHEMES - [FALSE] By default only http, https, and ftp are
+ * considered valid schemes.  Enabling this option will let any scheme pass validation.</li>
+ * </ul>
+ *
  * <p>Originally based in on php script by Debbie Dyer, validation.php v1.2b, Date: 03/07/02,
  * http://javascript.internet.com. However, this validation now bears little resemblance
  * to the php original.</p>
  * <pre>
- * Example of usage:
- * Construct a UrlValidator with valid schemes of "http", and "https".
+ *   Example of usage:
+ *   Construct a UrlValidator with valid schemes of "http", and "https".
  *
- * String[] schemes = {"http","https"}.
- * UrlValidator urlValidator = new UrlValidator(schemes);
- * if (urlValidator.isValid("ftp://foo.bar.com/")) {
- *     System.out.println("url is valid");
- * } else {
- *     System.out.println("url is invalid");
- * }
+ *    String[] schemes = {"http","https"}.
+ *    UrlValidator urlValidator = new UrlValidator(schemes);
+ *    if (urlValidator.isValid("ftp://foo.bar.com/")) {
+ *       System.out.println("url is valid");
+ *    } else {
+ *       System.out.println("url is invalid");
+ *    }
  *
- * prints "url is invalid"
- * If instead the default constructor is used.
+ *    prints "url is invalid"
+ *   If instead the default constructor is used.
  *
- * UrlValidator urlValidator = new UrlValidator();
- * if (urlValidator.isValid("ftp://foo.bar.com/")) {
- *     System.out.println("url is valid");
- * } else {
- *     System.out.println("url is invalid");
- * }
+ *    UrlValidator urlValidator = new UrlValidator();
+ *    if (urlValidator.isValid("ftp://foo.bar.com/")) {
+ *       System.out.println("url is valid");
+ *    } else {
+ *       System.out.println("url is invalid");
+ *    }
  *
- * prints out "url is valid"
- * </pre>
+ *   prints out "url is valid"
+ *  </pre>
  *
- * @see <a href="http://www.ietf.org/rfc/rfc2396.txt">
- * Uniform Resource Identifiers (URI): Generic Syntax
+ * @see
+ * <a href="http://www.ietf.org/rfc/rfc2396.txt">
+ *  Uniform Resource Identifiers (URI): Generic Syntax
  * </a>
+ *
+ * @version $Revision$
  * @since Validator 1.4
  */
-public class UrlValidator {
+public class UrlValidator implements Serializable {
+
+    private static final long serialVersionUID = 7557161713937335013L;
 
     /**
      * Allows all validly formatted schemes to pass validation instead of
@@ -87,21 +95,17 @@
     /**
      * Allow local URLs, such as http://localhost/ or http://machine/ .
      * This enables a broad-brush check, for complex local machine name
-     * validation requirements you should create your validator with
-     * a {@link RegexValidator} instead ({@link #UrlValidator(RegexValidator, long)})
+     *  validation requirements you should create your validator with
+     *  a {@link RegexValidator} instead ({@link #UrlValidator(RegexValidator, long)})
      */
     public static final long ALLOW_LOCAL_URLS = 1 << 3;
 
-    // Drop numeric, and "+-." for now
-    private static final String AUTHORITY_CHARS_REGEX = "\\p{Alnum}\\-\\.";
-
     /**
      * This expression derived/taken from the BNF for URI (RFC2396).
      */
     private static final String URL_REGEX =
-        "^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?";
-
-    // 12 3 4 5 6 7 8 9
+            "^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?";
+    //        12            3  4          5       6   7        8 9
     private static final Pattern URL_PATTERN = Pattern.compile(URL_REGEX);
 
     /**
@@ -113,33 +117,44 @@
      * Includes hostname/ip and port number.
      */
     private static final int PARSE_URL_AUTHORITY = 4;
+
     private static final int PARSE_URL_PATH = 5;
+
     private static final int PARSE_URL_QUERY = 7;
+
     private static final int PARSE_URL_FRAGMENT = 9;
 
     /**
-     * Protocol (ie. http:, ftp:,https:).
+     * Protocol scheme (e.g. http, ftp, https).
      */
     private static final String SCHEME_REGEX = "^\\p{Alpha}[\\p{Alnum}\\+\\-\\.]*";
     private static final Pattern SCHEME_PATTERN = Pattern.compile(SCHEME_REGEX);
-    private static final String AUTHORITY_REGEX =
-        "^([" + AUTHORITY_CHARS_REGEX + "]*)(:\\d*)?(.*)?";
 
-    // 1 2 3 4
+    // Drop numeric, and  "+-." for now
+    // TODO does not allow for optional userinfo. 
+    // Validation of character set is done by isValidAuthority
+    private static final String AUTHORITY_CHARS_REGEX = "\\p{Alnum}\\-\\.";
+
+    private static final String AUTHORITY_REGEX =
+            "^([" + AUTHORITY_CHARS_REGEX + "]*)(:\\d*)?(.*)?";
+    //        1                                 2       3
     private static final Pattern AUTHORITY_PATTERN = Pattern.compile(AUTHORITY_REGEX);
+
     private static final int PARSE_AUTHORITY_HOST_IP = 1;
+
     private static final int PARSE_AUTHORITY_PORT = 2;
 
     /**
-     * Should always be empty.
+     * Should always be empty. The code currently allows spaces.
      */
     private static final int PARSE_AUTHORITY_EXTRA = 3;
+
     private static final String PATH_REGEX = "^(/[-\\w:@&?=+,.!/~*'%$_;\\(\\)]*)?$";
     private static final Pattern PATH_PATTERN = Pattern.compile(PATH_REGEX);
+
     private static final String QUERY_REGEX = "^(.*)$";
     private static final Pattern QUERY_PATTERN = Pattern.compile(QUERY_REGEX);
-    private static final String LEGAL_ASCII_REGEX = "^\\p{ASCII}+$";
-    private static final Pattern ASCII_PATTERN = Pattern.compile(LEGAL_ASCII_REGEX);
+
     private static final String PORT_REGEX = "^:(\\d{1,5})$";
     private static final Pattern PORT_PATTERN = Pattern.compile(PORT_REGEX);
 
@@ -151,7 +166,7 @@
     /**
      * The set of schemes that are allowed to be in a URL.
      */
-    private final Set allowedSchemes;
+    private final Set allowedSchemes; // Must be lower-case
 
     /**
      * Regular expressions used to manually validate authorities if IANA
@@ -162,7 +177,7 @@
     /**
      * If no schemes are provided, default to this set.
      */
-    private static final String[] DEFAULT_SCHEMES = {"http", "https", "ftp"};
+    private static final String[] DEFAULT_SCHEMES = {"http", "https", "ftp"}; // Must be lower-case
 
     /**
      * Singleton instance of this class with default schemes and options.
@@ -171,7 +186,6 @@
 
     /**
      * Returns the singleton instance of this class with default schemes and options.
-     *
      * @return singleton instance with default schemes and options
      */
     public static UrlValidator getInstance() {
@@ -187,12 +201,11 @@ public UrlValidator() {
 
     /**
      * Behavior of validation is modified by passing in several strings options:
-     *
      * @param schemes Pass in one or more url schemes to consider valid, passing in
-     *                a null will default to "http,https,ftp" being valid.
-     *                If a non-null schemes is specified then all valid schemes must
-     *                be specified. Setting the ALLOW_ALL_SCHEMES option will
-     *                ignore the contents of schemes.
+     *        a null will default to "http,https,ftp" being valid.
+     *        If a non-null schemes is specified then all valid schemes must
+     *        be specified. Setting the ALLOW_ALL_SCHEMES option will
+     *        ignore the contents of schemes.
      */
     public UrlValidator(String[] schemes) {
         this(schemes, 0L);
@@ -200,10 +213,9 @@ public UrlValidator(String[] schemes) {
 
     /**
      * Initialize a UrlValidator with the given validation options.
-     *
      * @param options The options should be set using the public constants declared in
-     *                this class. To set multiple options you simply add them together. For example,
-     *                ALLOW_2_SLASHES + NO_FRAGMENTS enables both of those options.
+     * this class.  To set multiple options you simply add them together.  For example,
+     * ALLOW_2_SLASHES + NO_FRAGMENTS enables both of those options.
      */
     public UrlValidator(long options) {
         this(null, null, options);
@@ -211,11 +223,10 @@ public UrlValidator(long options) {
 
     /**
      * Behavior of validation is modified by passing in options:
-     *
-     * @param schemes The set of valid schemes.
+     * @param schemes The set of valid schemes. Ignored if the ALLOW_ALL_SCHEMES option is set.
      * @param options The options should be set using the public constants declared in
-     *                this class. To set multiple options you simply add them together. For example,
-     *                ALLOW_2_SLASHES + NO_FRAGMENTS enables both of those options.
+     * this class.  To set multiple options you simply add them together.  For example,
+     * ALLOW_2_SLASHES + NO_FRAGMENTS enables both of those options.
      */
     public UrlValidator(String[] schemes, long options) {
         this(schemes, null, options);
@@ -223,12 +234,12 @@ public UrlValidator(String[] schemes, long options) {
 
     /**
      * Initialize a UrlValidator with the given validation options.
-     *
      * @param authorityValidator Regular expression validator used to validate the authority part
-     * @param options            Validation options. Set using the public constants of this class.
-     *                           To set multiple options, simply add them together:
-     *                           <p><code>ALLOW_2_SLASHES + NO_FRAGMENTS</code></p>
-     *                           enables both of those options.
+     * This allows the user to override the standard set of domains.
+     * @param options Validation options. Set using the public constants of this class.
+     * To set multiple options, simply add them together:
+     * <p><code>ALLOW_2_SLASHES + NO_FRAGMENTS</code></p>
+     * enables both of those options.
      */
     public UrlValidator(RegexValidator authorityValidator, long options) {
         this(null, authorityValidator, options);
@@ -236,51 +247,57 @@ public UrlValidator(RegexValidator authorityValidator, long options) {
 
     /**
      * Customizable constructor. Validation behavior is modifed by passing in options.
-     *
-     * @param schemes            the set of valid schemes
+     * @param schemes the set of valid schemes. Ignored if the ALLOW_ALL_SCHEMES option is set.
      * @param authorityValidator Regular expression validator used to validate the authority part
-     * @param options            Validation options. Set using the public constants of this class.
-     *                           To set multiple options, simply add them together:
-     *                           <p><code>ALLOW_2_SLASHES + NO_FRAGMENTS</code></p>
-     *                           enables both of those options.
+     * @param options Validation options. Set using the public constants of this class.
+     * To set multiple options, simply add them together:
+     * <p><code>ALLOW_2_SLASHES + NO_FRAGMENTS</code></p>
+     * enables both of those options.
      */
     public UrlValidator(String[] schemes, RegexValidator authorityValidator, long options) {
         this.options = options;
+
         if (isOn(ALLOW_ALL_SCHEMES)) {
-            this.allowedSchemes = Collections.EMPTY_SET;
+            allowedSchemes = Collections.EMPTY_SET;
         } else {
             if (schemes == null) {
                 schemes = DEFAULT_SCHEMES;
             }
-            this.allowedSchemes = new HashSet();
-            this.allowedSchemes.addAll(Arrays.asList(schemes));
+            allowedSchemes = new HashSet(schemes.length);
+            for(int i=0; i < schemes.length; i++) {
+                allowedSchemes.add(schemes[i].toLowerCase(Locale.ENGLISH));
+            }
         }
+
         this.authorityValidator = authorityValidator;
     }
 
     /**
      * <p>Checks if a field has a valid url address.</p>
      *
-     * @param value The value validation is being performed on. A <code>null</code>
-     *              value is considered invalid.
+     * Note that the method calls #isValidAuthority()
+     * which checks that the domain is valid.
+     *
+     * @param value The value validation is being performed on.  A <code>null</code>
+     * value is considered invalid.
      * @return true if the url is valid.
      */
     public boolean isValid(String value) {
         if (value == null) {
             return false;
         }
-        if (!ASCII_PATTERN.matcher(value).matches()) {
-            return false;
-        }
+
         // Check the whole url address structure
         Matcher urlMatcher = URL_PATTERN.matcher(value);
         if (!urlMatcher.matches()) {
             return false;
         }
+
         String scheme = urlMatcher.group(PARSE_URL_SCHEME);
         if (!isValidScheme(scheme)) {
             return false;
         }
+
         String authority = urlMatcher.group(PARSE_URL_AUTHORITY);
         if ("file".equals(scheme) && "".equals(authority)) {
             // Special case - file: allows an empty authority
@@ -290,63 +307,75 @@ public boolean isValid(String value) {
                 return false;
             }
         }
+
         if (!isValidPath(urlMatcher.group(PARSE_URL_PATH))) {
             return false;
         }
+
         if (!isValidQuery(urlMatcher.group(PARSE_URL_QUERY))) {
             return false;
         }
+
         if (!isValidFragment(urlMatcher.group(PARSE_URL_FRAGMENT))) {
             return false;
         }
+
         return true;
     }
 
     /**
      * Validate scheme. If schemes[] was initialized to a non null,
-     * then only those scheme's are allowed. Note this is slightly different
-     * than for the constructor.
-     *
-     * @param scheme The scheme to validate. A <code>null</code> value is considered
-     *               invalid.
+     * then only those schemes are allowed.
+     * Otherwise the default schemes are "http", "https", "ftp".
+     * Matching is case-blind.
+     * @param scheme The scheme to validate.  A <code>null</code> value is considered
+     * invalid.
      * @return true if valid.
      */
     protected boolean isValidScheme(String scheme) {
         if (scheme == null) {
             return false;
         }
+
+        // TODO could be removed if external schemes were checked in the ctor before being stored
         if (!SCHEME_PATTERN.matcher(scheme).matches()) {
             return false;
         }
-        if (isOff(ALLOW_ALL_SCHEMES)) {
-            if (!this.allowedSchemes.contains(scheme)) {
-                return false;
-            }
+
+        if (isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme.toLowerCase(Locale.ENGLISH))) {
+            return false;
         }
+
         return true;
     }
 
     /**
-     * Returns true if the authority is properly formatted. An authority is the combination
-     * of hostname and port. A <code>null</code> authority value is considered invalid.
-     *
-     * @param authority Authority value to validate.
+     * Returns true if the authority is properly formatted.  An authority is the combination
+     * of hostname and port.  A <code>null</code> authority value is considered invalid.
+     * Note: this implementation validates the domain unless a RegexValidator was provided.
+     * If a RegexValidator was supplied and it matches, then the authority is regarded
+     * as valid with no further checks, otherwise the method checks against the
+     * AUTHORITY_PATTERN and the DomainValidator (ALLOW_LOCAL_URLS)
+     * @param authority Authority value to validate, alllows IDN
      * @return true if authority (hostname and port) is valid.
      */
     protected boolean isValidAuthority(String authority) {
         if (authority == null) {
             return false;
         }
+
         // check manual authority validation if specified
-        if (authorityValidator != null) {
-            if (authorityValidator.isValid(authority)) {
-                return true;
-            }
+        if (authorityValidator != null && authorityValidator.isValid(authority)) {
+            return true;
         }
-        Matcher authorityMatcher = AUTHORITY_PATTERN.matcher(authority);
+        // convert to ASCII if possible
+        final String authorityASCII = DomainValidator.unicodeToASCII(authority);
+
+        Matcher authorityMatcher = AUTHORITY_PATTERN.matcher(authorityASCII);
         if (!authorityMatcher.matches()) {
             return false;
         }
+
         String hostLocation = authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);
         // check if authority is hostname or IP address:
         // try a hostname first since that's much more likely
@@ -360,22 +389,22 @@ protected boolean isValidAuthority(String authority) {
                 return false;
             }
         }
+
         String port = authorityMatcher.group(PARSE_AUTHORITY_PORT);
-        if (port != null) {
-            if (!PORT_PATTERN.matcher(port).matches()) {
-                return false;
-            }
+        if (port != null && !PORT_PATTERN.matcher(port).matches()) {
+            return false;
         }
+
         String extra = authorityMatcher.group(PARSE_AUTHORITY_EXTRA);
-        if (extra != null && extra.trim().length() > 0) {
+        if (extra != null && extra.trim().length() > 0){
             return false;
         }
+
         return true;
     }
 
     /**
-     * Returns true if the path is valid. A <code>null</code> value is considered invalid.
-     *
+     * Returns true if the path is valid.  A <code>null</code> value is considered invalid.
      * @param path Path value to validate.
      * @return true if path is valid.
      */
@@ -383,26 +412,27 @@ protected boolean isValidPath(String path) {
         if (path == null) {
             return false;
         }
+
         if (!PATH_PATTERN.matcher(path).matches()) {
             return false;
         }
+
         int slash2Count = countToken("//", path);
         if (isOff(ALLOW_2_SLASHES) && (slash2Count > 0)) {
             return false;
         }
+
         int slashCount = countToken("/", path);
         int dot2Count = countToken("..", path);
-        if (dot2Count > 0) {
-            if ((slashCount - slash2Count - 1) <= dot2Count) {
-                return false;
-            }
+        if (dot2Count > 0 && (slashCount - slash2Count - 1) <= dot2Count) {
+            return false;
         }
+
         return true;
     }
 
     /**
      * Returns true if the query is null or it's a properly formatted query string.
-     *
      * @param query Query value to validate.
      * @return true if query is valid.
      */
@@ -410,12 +440,12 @@ protected boolean isValidQuery(String query) {
         if (query == null) {
             return true;
         }
+
         return QUERY_PATTERN.matcher(query).matches();
     }
 
     /**
      * Returns true if the given fragment is null or fragments are allowed.
-     *
      * @param fragment Fragment value to validate.
      * @return true if fragment is valid.
      */
@@ -423,13 +453,13 @@ protected boolean isValidFragment(String fragment) {
         if (fragment == null) {
             return true;
         }
+
         return isOff(NO_FRAGMENTS);
     }
 
     /**
      * Returns the number of times the token appears in the target.
-     *
-     * @param token  Token value to be counted.
+     * @param token Token value to be counted.
      * @param target Target value to count tokens in.
      * @return the number of tokens.
      */
@@ -447,24 +477,26 @@ protected int countToken(String token, String target) {
     }
 
     /**
-     * Tests whether the given flag is on. If the flag is not a power of 2
+     * Tests whether the given flag is on.  If the flag is not a power of 2
      * (ie. 3) this tests whether the combination of flags is on.
      *
      * @param flag Flag value to check.
+     *
      * @return whether the specified flag value is on.
      */
     private boolean isOn(long flag) {
-        return (this.options & flag) > 0;
+        return (options & flag) > 0;
     }
 
     /**
-     * Tests whether the given flag is off. If the flag is not a power of 2
+     * Tests whether the given flag is off.  If the flag is not a power of 2
      * (ie. 3) this tests whether the combination of flags is off.
      *
      * @param flag Flag value to check.
+     *
      * @return whether the specified flag value is off.
      */
     private boolean isOff(long flag) {
-        return (this.options & flag) == 0;
+        return (options & flag) == 0;
     }
 }
diff --git a/saripaar/src/main/java/commons/validator/routines/checkdigit/CheckDigit.java b/saripaar/src/main/java/commons/validator/routines/checkdigit/CheckDigit.java
index 013489f..5c0ceb8 100644
--- a/saripaar/src/main/java/commons/validator/routines/checkdigit/CheckDigit.java
+++ b/saripaar/src/main/java/commons/validator/routines/checkdigit/CheckDigit.java
@@ -1,12 +1,12 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
+ * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * the License.  You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines.checkdigit;
 
 /**
@@ -36,34 +35,37 @@
  * and then convert them to the new ISBN-13 standard.
  * </p>
  * <p>
- * {@link CheckDigit} is used by the new generic
- * {@link commons.validator.routines.CodeValidator} implementation.
+ * CheckDigit is used by the new generic @link CodeValidator} implementation.
  * </p>
+ *
  * <h3>Implementations</h3>
- * See the
+ * See the 
  * <a href="package-summary.html">Package Summary</a> for a full
  * list of implementations provided within Commons Validator.
  *
  * @see commons.validator.routines.CodeValidator
+ * @version $Revision$
  * @since Validator 1.4
  */
 public interface CheckDigit {
 
     /**
-     * Calculate the <i>Check Digit</i> for a code.
+     * Calculates the <i>Check Digit</i> for a code.
      *
      * @param code The code to calculate the Check Digit for.
+     * The string must not include the check digit
      * @return The calculated Check Digit
      * @throws CheckDigitException if an error occurs.
      */
-    public String calculate(String code) throws CheckDigitException;
+    String calculate(String code) throws CheckDigitException;
 
     /**
-     * Validate the check digit for the code.
+     * Validates the check digit for the code.
      *
-     * @param code The code to validate.
+     * @param code The code to validate, the string must include the check digit.
      * @return <code>true</code> if the check digit is valid, otherwise
      * <code>false</code>.
      */
-    public boolean isValid(String code);
+    boolean isValid(String code);
+
 }
diff --git a/saripaar/src/main/java/commons/validator/routines/checkdigit/CheckDigitException.java b/saripaar/src/main/java/commons/validator/routines/checkdigit/CheckDigitException.java
index fb25c9a..5007b82 100644
--- a/saripaar/src/main/java/commons/validator/routines/checkdigit/CheckDigitException.java
+++ b/saripaar/src/main/java/commons/validator/routines/checkdigit/CheckDigitException.java
@@ -1,12 +1,12 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
+ * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * the License.  You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines.checkdigit;
 
 /**
@@ -23,6 +22,7 @@
  * @since Validator 1.4
  */
 public class CheckDigitException extends Exception {
+
     private static final long serialVersionUID = -3519894732624685477L;
 
     /**
@@ -44,10 +44,11 @@ public CheckDigitException(String msg) {
      * Construct an Exception with a message and
      * the underlying cause.
      *
-     * @param msg   The error message.
+     * @param msg The error message.
      * @param cause The underlying cause of the error
      */
     public CheckDigitException(String msg, Throwable cause) {
         super(msg, cause);
     }
+
 }
diff --git a/saripaar/src/main/java/commons/validator/routines/checkdigit/EAN13CheckDigit.java b/saripaar/src/main/java/commons/validator/routines/checkdigit/EAN13CheckDigit.java
index 2cb5440..bc895c0 100644
--- a/saripaar/src/main/java/commons/validator/routines/checkdigit/EAN13CheckDigit.java
+++ b/saripaar/src/main/java/commons/validator/routines/checkdigit/EAN13CheckDigit.java
@@ -1,12 +1,12 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
+ * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * the License.  You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines.checkdigit;
 
 /**
@@ -24,34 +23,32 @@
  * Check digit calculation is based on <i>modulus 10</i> with digits in
  * an <i>odd</i> position (from right to left) being weighted 1 and <i>even</i>
  * position digits being weighted 3.
- * </p>
+ * <p>
  * For further information see:
  * <ul>
- * <li>EAN-13 - see
- * <a href="http://en.wikipedia.org/wiki/European_Article_Number">Wikipedia -
- * European Article Number</a>.</li>
- * <li>UPC - see
- * <a href="http://en.wikipedia.org/wiki/Universal_Product_Code">Wikipedia -
- * Universal Product Code</a>.</li>
- * <li>ISBN-13 - see
- * <a href="http://en.wikipedia.org/wiki/ISBN">Wikipedia - International
- * Standard Book Number (ISBN)</a>.</li>
+ *   <li>EAN-13 - see
+ *       <a href="http://en.wikipedia.org/wiki/European_Article_Number">Wikipedia -
+ *       European Article Number</a>.</li>
+ *   <li>UPC - see
+ *       <a href="http://en.wikipedia.org/wiki/Universal_Product_Code">Wikipedia -
+ *       Universal Product Code</a>.</li>
+ *   <li>ISBN-13 - see
+ *       <a href="http://en.wikipedia.org/wiki/ISBN">Wikipedia - International
+ *       Standard Book Number (ISBN)</a>.</li>
  * </ul>
  *
+ * @version $Revision$
  * @since Validator 1.4
  */
 public final class EAN13CheckDigit extends ModulusCheckDigit {
+
     private static final long serialVersionUID = 1726347093230424107L;
 
-    /**
-     * Singleton EAN-13 Check Digit instance
-     */
+    /** Singleton EAN-13 Check Digit instance */
     public static final CheckDigit EAN13_CHECK_DIGIT = new EAN13CheckDigit();
 
-    /**
-     * weighting given to digits depending on their right position
-     */
-    private static final int[] POSITION_WEIGHT = new int[]{3, 1};
+    /** weighting given to digits depending on their right position */
+    private static final int[] POSITION_WEIGHT = new int[] {3, 1};
 
     /**
      * Construct a modulus 10 Check Digit routine for EAN/UPC.
@@ -62,19 +59,19 @@ public EAN13CheckDigit() {
 
     /**
      * <p>Calculates the <i>weighted</i> value of a character in the
-     * code at a specified position.
-     * </p>
+     * code at a specified position.</p>
+     *
      * <p>For EAN-13 (from right to left) <b>odd</b> digits are weighted
      * with a factor of <b>one</b> and <b>even</b> digits with a factor
      * of <b>three</b>.</p>
      *
      * @param charValue The numeric value of the character.
-     * @param leftPos   The position of the character in the code, counting from left to right
-     * @param rightPos  The positionof the character in the code, counting from right to left
+     * @param leftPos The position of the character in the code, counting from left to right
+     * @param rightPos The positionof the character in the code, counting from right to left
      * @return The weighted value of the character.
      */
     protected int weightedValue(int charValue, int leftPos, int rightPos) {
         int weight = POSITION_WEIGHT[rightPos % 2];
-        return (charValue * weight);
+        return charValue * weight;
     }
 }
diff --git a/saripaar/src/main/java/commons/validator/routines/checkdigit/ISBN10CheckDigit.java b/saripaar/src/main/java/commons/validator/routines/checkdigit/ISBN10CheckDigit.java
index 822e367..ce9564c 100644
--- a/saripaar/src/main/java/commons/validator/routines/checkdigit/ISBN10CheckDigit.java
+++ b/saripaar/src/main/java/commons/validator/routines/checkdigit/ISBN10CheckDigit.java
@@ -1,12 +1,12 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
+ * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * the License.  You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines.checkdigit;
 
 /**
@@ -22,34 +21,32 @@
  * <p>
  * ISBN-10 Numbers are a numeric code except for the last (check) digit
  * which can have a value of "X".
- * </p>
  * <p>
  * Check digit calculation is based on <i>modulus 11</i> with digits being weighted
- * based by their position, from right to left with the first digit being weighted
+ * based by their position, from right to left  with the first digit being weighted
  * 1, the second 2 and so on. If the check digit is calculated as "10" it is converted
  * to "X".
- * </p>
  * <p>
  * <b>N.B.</b> From 1st January 2007 the book industry will start to use a new 13 digit
  * ISBN number (rather than this 10 digit ISBN number) which uses the EAN-13 / UPC
  * (see {@link EAN13CheckDigit}) standard.
- * </p>
+ * <p>
  * For further information see:
  * <ul>
- * <li><a href="http://en.wikipedia.org/wiki/ISBN">Wikipedia - International
- * Standard Book Number (ISBN)</a>.</li>
- * <li><a href="http://www.isbn.org/standards/home/isbn/transition.asp">ISBN-13
- * Transition details</a>.</li>
+ *   <li><a href="http://en.wikipedia.org/wiki/ISBN">Wikipedia - International
+ *       Standard Book Number (ISBN)</a>.</li>
+ *   <li><a href="http://www.isbn.org/standards/home/isbn/transition.asp">ISBN-13
+ *       Transition details</a>.</li>
  * </ul>
  *
+ * @version $Revision$
  * @since Validator 1.4
  */
 public final class ISBN10CheckDigit extends ModulusCheckDigit {
+
     private static final long serialVersionUID = 8000855044504864964L;
 
-    /**
-     * Singleton ISBN-10 Check Digit instance
-     */
+    /** Singleton ISBN-10 Check Digit instance */
     public static final CheckDigit ISBN10_CHECK_DIGIT = new ISBN10CheckDigit();
 
     /**
@@ -62,40 +59,42 @@ public ISBN10CheckDigit() {
     /**
      * Calculates the <i>weighted</i> value of a charcter in the
      * code at a specified position.
+     *
      * <p>For ISBN-10 (from right to left) digits are weighted
      * by their position.</p>
      *
      * @param charValue The numeric value of the character.
-     * @param leftPos   The position of the character in the code, counting from left to right
-     * @param rightPos  The positionof the character in the code, counting from right to left
+     * @param leftPos The position of the character in the code, counting from left to right
+     * @param rightPos The positionof the character in the code, counting from right to left
      * @return The weighted value of the character.
      */
     protected int weightedValue(int charValue, int leftPos, int rightPos) {
-        return (charValue * rightPos);
+        return charValue * rightPos;
     }
 
     /**
      * <p>Convert a character at a specified position to an
      * integer value.</p>
+     *
      * <p>Character 'X' check digit converted to 10.</p>
      *
      * @param character The character to convert.
-     * @param leftPos   The position of the character in the code, counting from left to right
-     * @param rightPos  The positionof the character in the code, counting from right to left
+     * @param leftPos The position of the character in the code, counting from left to right
+     * @param rightPos The position of the character in the code, counting from right to left
      * @return The integer value of the character.
      * @throws CheckDigitException if an error occurs.
      */
     protected int toInt(char character, int leftPos, int rightPos)
-        throws CheckDigitException {
+            throws CheckDigitException {
         if (rightPos == 1 && character == 'X') {
             return 10;
-        } else {
-            return super.toInt(character, leftPos, rightPos);
         }
+        return super.toInt(character, leftPos, rightPos);
     }
 
     /**
      * <p>Convert an integer value to a character at a specified position.</p>
+     *
      * <p>Value '10' for position 1 (check digit) converted to 'X'.</p>
      *
      * @param charValue The integer value of the character.
@@ -103,11 +102,11 @@ protected int toInt(char character, int leftPos, int rightPos)
      * @throws CheckDigitException if an error occurs.
      */
     protected String toCheckDigit(int charValue)
-        throws CheckDigitException {
+            throws CheckDigitException {
         if (charValue == 10) {
             return "X";
-        } else {
-            return super.toCheckDigit(charValue);
         }
+        return super.toCheckDigit(charValue);
     }
+
 }
diff --git a/saripaar/src/main/java/commons/validator/routines/checkdigit/LuhnCheckDigit.java b/saripaar/src/main/java/commons/validator/routines/checkdigit/LuhnCheckDigit.java
index a68d5ff..dffdc51 100644
--- a/saripaar/src/main/java/commons/validator/routines/checkdigit/LuhnCheckDigit.java
+++ b/saripaar/src/main/java/commons/validator/routines/checkdigit/LuhnCheckDigit.java
@@ -1,12 +1,12 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
+ * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * the License.  You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -14,37 +14,38 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines.checkdigit;
 
 /**
- * <p>Modulus 10 <b>Luhn</b> Check Digit calculation/validation.</p>
+ * Modulus 10 <b>Luhn</b> Check Digit calculation/validation.
+ *
  * Luhn check digits are used, for example, by:
  * <ul>
- * <li><a href="http://en.wikipedia.org/wiki/Credit_card">Credit Card Numbers</a></li>
- * <li><a href="http://en.wikipedia.org/wiki/IMEI">IMEI Numbers</a> - International
- * Mobile Equipment Identity Numbers</li>
+ *    <li><a href="http://en.wikipedia.org/wiki/Credit_card">Credit Card Numbers</a></li>
+ *    <li><a href="http://en.wikipedia.org/wiki/IMEI">IMEI Numbers</a> - International
+ *        Mobile Equipment Identity Numbers</li>
  * </ul>
  * Check digit calculation is based on <i>modulus 10</i> with digits in
  * an <i>odd</i> position (from right to left) being weighted 1 and <i>even</i>
  * position digits being weighted 2 (weighted values greater than 9 have 9 subtracted).
+ *
+ * <p>
  * See <a href="http://en.wikipedia.org/wiki/Luhn_algorithm">Wikipedia</a>
  * for more details.
+ * </p>
  *
+ * @version $Revision$
  * @since Validator 1.4
  */
 public final class LuhnCheckDigit extends ModulusCheckDigit {
+
     private static final long serialVersionUID = -2976900113942875999L;
 
-    /**
-     * Singleton Luhn Check Digit instance
-     */
+    /** Singleton Luhn Check Digit instance */
     public static final CheckDigit LUHN_CHECK_DIGIT = new LuhnCheckDigit();
 
-    /**
-     * weighting given to digits depending on their right position
-     */
-    private static final int[] POSITION_WEIGHT = new int[]{2, 1};
+    /** weighting given to digits depending on their right position */
+    private static final int[] POSITION_WEIGHT = new int[] {2, 1};
 
     /**
      * Construct a modulus 10 Luhn Check Digit routine.
@@ -56,18 +57,19 @@ public LuhnCheckDigit() {
     /**
      * <p>Calculates the <i>weighted</i> value of a charcter in the
      * code at a specified position.</p>
+     *
      * <p>For Luhn (from right to left) <b>odd</b> digits are weighted
      * with a factor of <b>one</b> and <b>even</b> digits with a factor
      * of <b>two</b>. Weighted values &gt; 9, have 9 subtracted</p>
      *
      * @param charValue The numeric value of the character.
-     * @param leftPos   The position of the character in the code, counting from left to right
-     * @param rightPos  The positionof the character in the code, counting from right to left
+     * @param leftPos The position of the character in the code, counting from left to right
+     * @param rightPos The positionof the character in the code, counting from right to left
      * @return The weighted value of the character.
      */
     protected int weightedValue(int charValue, int leftPos, int rightPos) {
         int weight = POSITION_WEIGHT[rightPos % 2];
-        int weightedValue = (charValue * weight);
-        return (weightedValue > 9 ? (weightedValue - 9) : weightedValue);
+        int weightedValue = charValue * weight;
+        return weightedValue > 9 ? (weightedValue - 9) : weightedValue;
     }
 }
diff --git a/saripaar/src/main/java/commons/validator/routines/checkdigit/ModulusCheckDigit.java b/saripaar/src/main/java/commons/validator/routines/checkdigit/ModulusCheckDigit.java
index 4e459d1..7e386e7 100644
--- a/saripaar/src/main/java/commons/validator/routines/checkdigit/ModulusCheckDigit.java
+++ b/saripaar/src/main/java/commons/validator/routines/checkdigit/ModulusCheckDigit.java
@@ -1,12 +1,12 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
+ * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * the License.  You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package commons.validator.routines.checkdigit;
 
 import java.io.Serializable;
@@ -24,21 +23,22 @@
  * <p>
  * Provides a <i>base</i> class for building <i>modulus</i> Check
  * Digit routines.
- * </p>
  * <p>
  * This implementation only handles <i>single-digit numeric</i> codes, such as
  * <b>EAN-13</b>. For <i>alphanumeric</i> codes such as <b>EAN-128</b> you
  * will need to implement/override the <code>toInt()</code> and
  * <code>toChar()</code> methods.
- * </p>
+ * <p>
  *
+ * @version $Revision$
  * @since Validator 1.4
  */
 public abstract class ModulusCheckDigit implements CheckDigit, Serializable {
+
     private static final long serialVersionUID = 2948962251251528941L;
 
-    // N.B. The modulus can be > 10 provided that the implementing class overrides toCheckDigit
-    // and toInt (for example as in ISBN10CheckDigit)
+    // N.B. The modulus can be > 10 provided that the implementing class overrides toCheckDigit and toInt
+    // (for example as in ISBN10CheckDigit)
     private final int modulus;
 
     /**
@@ -73,7 +73,7 @@ public boolean isValid(String code) {
         try {
             int modulusResult = calculateModulus(code, true);
             return (modulusResult == 0);
-        } catch (CheckDigitException ex) {
+        } catch (CheckDigitException  ex) {
             return false;
         }
     }
@@ -84,7 +84,7 @@ public boolean isValid(String code) {
      * @param code The code to calculate the Check Digit for
      * @return The calculated Check Digit
      * @throws CheckDigitException if an error occurs calculating
-     *                             the check digit for the specified code
+     * the check digit for the specified code
      */
     public String calculate(String code) throws CheckDigitException {
         if (code == null || code.length() == 0) {
@@ -98,17 +98,17 @@ public String calculate(String code) throws CheckDigitException {
     /**
      * Calculate the modulus for a code.
      *
-     * @param code               The code to calculate the modulus for.
+     * @param code The code to calculate the modulus for.
      * @param includesCheckDigit Whether the code includes the Check Digit or not.
      * @return The modulus value
      * @throws CheckDigitException if an error occurs calculating the modulus
-     *                             for the specified code
+     * for the specified code
      */
     protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
         int total = 0;
         for (int i = 0; i < code.length(); i++) {
             int lth = code.length() + (includesCheckDigit ? 0 : 1);
-            int leftPos = i + 1;
+            int leftPos  = i + 1;
             int rightPos = lth - i;
             int charValue = toInt(code.charAt(i), leftPos, rightPos);
             total += weightedValue(charValue, leftPos, rightPos);
@@ -116,7 +116,7 @@ protected int calculateModulus(String code, boolean includesCheckDigit) throws C
         if (total == 0) {
             throw new CheckDigitException("Invalid code, sum is zero");
         }
-        return (total % modulus);
+        return total % modulus;
     }
 
     /**
@@ -127,39 +127,39 @@ protected int calculateModulus(String code, boolean includesCheckDigit) throws C
      * depending on its position in the code (e.g. ISBN-10), while
      * others use different weighting factors for odd/even positions
      * (e.g. EAN or Luhn). Implement the appropriate mechanism
-     * required by overriding this method.</p>
+     * required by overriding this method.
      *
      * @param charValue The numeric value of the character
-     * @param leftPos   The position of the character in the code, counting from left to right
-     * @param rightPos  The positionof the character in the code, counting from right to left
+     * @param leftPos The position of the character in the code, counting from left to right
+     * @param rightPos The positionof the character in the code, counting from right to left
      * @return The weighted value of the character
      * @throws CheckDigitException if an error occurs calculating
-     *                             the weighted value
+     * the weighted value
      */
     protected abstract int weightedValue(int charValue, int leftPos, int rightPos)
-        throws CheckDigitException;
+            throws CheckDigitException;
+
 
     /**
      * Convert a character at a specified position to an integer value.
      * <p>
      * <b>Note:</b> this implementation only handlers numeric values
      * For non-numeric characters, override this method to provide
-     * character--&gt;integer conversion.</p>
+     * character--&gt;integer conversion.
      *
      * @param character The character to convert
-     * @param leftPos   The position of the character in the code, counting from left to right (for identifiying the position in the string)
-     * @param rightPos  The position of the character in the code, counting from right to left (not used here)
+     * @param leftPos The position of the character in the code, counting from left to right (for identifiying the position in the string)
+     * @param rightPos The position of the character in the code, counting from right to left (not used here)
      * @return The integer value of the character
      * @throws CheckDigitException if character is non-numeric
      */
     protected int toInt(char character, int leftPos, int rightPos)
-        throws CheckDigitException {
+            throws CheckDigitException {
         if (Character.isDigit(character)) {
             return Character.getNumericValue(character);
-        } else {
-            throw new CheckDigitException("Invalid Character[" +
-                leftPos + "] = '" + character + "'");
         }
+        throw new CheckDigitException("Invalid Character[" +
+                leftPos + "] = '" + character + "'");
     }
 
     /**
@@ -167,21 +167,20 @@ protected int toInt(char character, int leftPos, int rightPos)
      * <p>
      * <b>Note:</b> this implementation only handles single-digit numeric values
      * For non-numeric characters, override this method to provide
-     * integer--&gt;character conversion.</p>
+     * integer--&gt;character conversion.
      *
      * @param charValue The integer value of the character
      * @return The converted character
      * @throws CheckDigitException if integer character value
-     *                             doesn't represent a numeric character
+     * doesn't represent a numeric character
      */
     protected String toCheckDigit(int charValue)
-        throws CheckDigitException {
+            throws CheckDigitException {
         if (charValue >= 0 && charValue <= 9) {
             return Integer.toString(charValue);
-        } else {
-            throw new CheckDigitException("Invalid Check Digit Value =" +
-                +charValue);
         }
+        throw new CheckDigitException("Invalid Check Digit Value =" +
+                + charValue);
     }
 
     /**
@@ -195,8 +194,9 @@ public static int sumDigits(int number) {
         int todo = number;
         while (todo > 0) {
             total += todo % 10;
-            todo = todo / 10;
+            todo  = todo / 10;
         }
         return total;
     }
+
 }
