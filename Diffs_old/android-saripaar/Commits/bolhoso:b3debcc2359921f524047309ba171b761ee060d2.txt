diff --git a/.gitignore b/.gitignore
index 46e4a89..c646b24 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,6 +9,8 @@
 *.class
 
 # generated files
+.gradle
+build/
 bin/
 gen/
 target/
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 0000000..90802c6
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,38 @@
+apply plugin: 'android-library'
+
+archivesBaseName = 'android-saripaar'
+
+buildscript {
+    repositories {
+        mavenCentral()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:0.8.+'
+    }
+}
+
+task wrapper(type: Wrapper) {
+    gradleVersion = '1.10'
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19.1.0"
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_7
+        targetCompatibility JavaVersion.VERSION_1_7
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            resources.srcDirs = ['src']
+            aidl.srcDirs = ['src']
+            renderscript.srcDirs = ['src']
+            res.srcDirs = ['res']
+            assets.srcDirs = ['assets']
+        }
+    }
+}
diff --git a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
index 36b86d0..6854581 100644
--- a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
+++ b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
@@ -14,6 +14,11 @@
 
 package com.mobsandgeeks.saripaar;
 
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.List;
+
 import android.content.Context;
 import android.util.Log;
 import android.view.View;
@@ -21,6 +26,7 @@
 import android.widget.Spinner;
 import android.widget.TextView;
 
+import com.mobsandgeeks.saripaar.Rule;
 import com.mobsandgeeks.saripaar.annotation.Checked;
 import com.mobsandgeeks.saripaar.annotation.ConfirmPassword;
 import com.mobsandgeeks.saripaar.annotation.Email;
@@ -32,11 +38,6 @@
 import com.mobsandgeeks.saripaar.annotation.Select;
 import com.mobsandgeeks.saripaar.annotation.TextRule;
 
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * Class contains {@code static} methods that return appropriate {@link Rule}s for Saripaar
  * annotations.
@@ -135,7 +136,7 @@
             textRule.message();
 
         if (textRule.minLength() > 0) {
-            rules.add(Rules.minLength(null, textRule.minLength(), textRule.trim()));
+            rules.add(Rules.minLength(null, textRule.minLength(), textRule.trim(), textRule.required()));
         }
         if (textRule.maxLength() != Integer.MAX_VALUE) {
             rules.add(Rules.maxLength(null, textRule.maxLength(), textRule.trim()));
diff --git a/src/com/mobsandgeeks/saripaar/Rules.java b/src/com/mobsandgeeks/saripaar/Rules.java
index 65e3f81..eda150f 100644
--- a/src/com/mobsandgeeks/saripaar/Rules.java
+++ b/src/com/mobsandgeeks/saripaar/Rules.java
@@ -169,22 +169,38 @@ public boolean isValid(TextView textView) {
      *          {@code getText()}. The returned text is affected by the {@code trimInput}
      *          parameter.
      * @param trimInput Specifies whether to trim the text returned by {@code getText()}.
+     * @param required Determine if an empty content will be allowed (when {@code false})
      *
      * @return True if the text has the minimum number of characters specified, false otherwise.
      */
     public static Rule<TextView> minLength(final String failureMessage, final int minLength,
-            final boolean trimInput) {
+            final boolean trimInput, final boolean required) {
 
         return new Rule<TextView>(failureMessage) {
 
             @Override
             public boolean isValid(TextView view) {
                 String text = getText(view, trimInput);
-                return text != null ? text.length() >= minLength : false;
+
+                if (text != null && text.length() > 0) {
+                    return text.length() >= minLength;
+                }
+
+                // Empty text, return false if the field is required
+                return !required;
             }
         };
     }
 
+    /**
+     * Specifies the  {@link TextView} should have a min length and is required.
+     * @see #minLength(String, int, boolean, boolean)
+     */
+    public static Rule<TextView> minLength(final String failureMessage, final int minLength,
+                                           final boolean trimInput) {
+        return minLength(failureMessage, minLength, trimInput, true);
+    }
+
     /**
      * Checks if the {@link TextView} or its subclass {@link View}'s displayed text's length is less
      * than or equal to the maximum number of characters specified by this {@link Rule}.
diff --git a/src/com/mobsandgeeks/saripaar/annotation/TextRule.java b/src/com/mobsandgeeks/saripaar/annotation/TextRule.java
index e896a98..77594af 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/TextRule.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/TextRule.java
@@ -23,7 +23,7 @@
 
 /**
  * Specifies constraints such as min length, max length and trim on textual data contained
- * in {@code View}s.
+ * in {@code View}s. If {@code required} is false, an empty field will be allowed.
  *
  * @author Ragunath Jawahar <rj@mobsandgeeks.com>
  */
@@ -36,4 +36,5 @@
     public boolean trim()       default true;
     public String message()     default Rules.EMPTY_STRING;
     public int messageResId()   default 0;
+    public boolean required()   default true;
 }
