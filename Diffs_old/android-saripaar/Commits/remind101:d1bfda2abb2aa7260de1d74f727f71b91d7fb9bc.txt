diff --git a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
index 36b86d0..77ed3d7 100644
--- a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
+++ b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
@@ -15,6 +15,7 @@
 package com.mobsandgeeks.saripaar;
 
 import android.content.Context;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.widget.Checkable;
@@ -46,7 +47,7 @@
 class AnnotationRuleFactory {
     // Debug
     static final String TAG = "AnnotationToRuleConverter";
- 
+
     // Constants
     static final String WARN_TEXT = "%s - @%s can only be applied to TextView and " +
             "its subclasses.";
@@ -118,7 +119,7 @@
 
         int messageResId = required.messageResId();
         String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            required.message();
+                required.message();
 
         return Rules.required(message, required.trim());
     }
@@ -132,7 +133,7 @@
         List<Rule<?>> rules = new ArrayList<Rule<?>>();
         int messageResId = textRule.messageResId();
         String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            textRule.message();
+                textRule.message();
 
         if (textRule.minLength() > 0) {
             rules.add(Rules.minLength(null, textRule.minLength(), textRule.trim()));
@@ -156,10 +157,19 @@
         Context context = view.getContext();
         int messageResId = regexRule.messageResId();
         String message = messageResId != 0 ? context.getString(messageResId) : regexRule.message();
-
-        int patternResId = regexRule.patternResId();
-        String pattern = patternResId != 0 ? view.getContext().getString(patternResId) :
-            regexRule.pattern();
+        String pattern = null;
+        try {
+            pattern = ((PatternFetcher) regexRule.patternFetcher().newInstance()).getPattern();
+        } catch (InstantiationException e) {
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        }
+        if (TextUtils.isEmpty(pattern)) {
+            int patternResId = regexRule.patternResId();
+            pattern = patternResId != 0 ? view.getContext().getString(patternResId) :
+                    regexRule.pattern();
+        }
 
         return Rules.regex(message, pattern, regexRule.trim());
     }
@@ -176,43 +186,71 @@
         List<Rule<?>> rules = new ArrayList<Rule<?>>();
         int messageResId = numberRule.messageResId();
         String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            numberRule.message();
+                numberRule.message();
 
         switch (numberRule.type()) {
-        case INTEGER: case LONG:
-            Rules.regex(null, Rules.REGEX_INTEGER, true); break;
-        case FLOAT: case DOUBLE:
-            Rules.regex(null, Rules.REGEX_DECIMAL, true); break;
+            case INTEGER:
+            case LONG:
+                Rules.regex(null, Rules.REGEX_INTEGER, true);
+                break;
+            case FLOAT:
+            case DOUBLE:
+                Rules.regex(null, Rules.REGEX_DECIMAL, true);
+                break;
         }
 
         if (numberRule.lt() != Double.MIN_VALUE) {
             String ltNumber = String.valueOf(numberRule.lt());
             double number = Double.parseDouble(ltNumber);
             switch (numberRule.type()) {
-            case INTEGER:   rules.add(Rules.lt(null, ((int) number)));   break;
-            case LONG:      rules.add(Rules.lt(null, ((long) number)));  break;
-            case FLOAT:     rules.add(Rules.lt(null, Float.parseFloat(ltNumber)));   break;
-            case DOUBLE:    rules.add(Rules.lt(null, Double.parseDouble(ltNumber))); break;
+                case INTEGER:
+                    rules.add(Rules.lt(null, ((int) number)));
+                    break;
+                case LONG:
+                    rules.add(Rules.lt(null, ((long) number)));
+                    break;
+                case FLOAT:
+                    rules.add(Rules.lt(null, Float.parseFloat(ltNumber)));
+                    break;
+                case DOUBLE:
+                    rules.add(Rules.lt(null, Double.parseDouble(ltNumber)));
+                    break;
             }
         }
         if (numberRule.gt() != Double.MAX_VALUE) {
             String gtNumber = String.valueOf(numberRule.gt());
             double number = Double.parseDouble(gtNumber);
             switch (numberRule.type()) {
-            case INTEGER:   rules.add(Rules.gt(null, ((int) number)));  break;
-            case LONG:      rules.add(Rules.gt(null, ((long) number))); break;
-            case FLOAT:     rules.add(Rules.gt(null, Float.parseFloat(gtNumber)));   break;
-            case DOUBLE:    rules.add(Rules.gt(null, Double.parseDouble(gtNumber))); break;
+                case INTEGER:
+                    rules.add(Rules.gt(null, ((int) number)));
+                    break;
+                case LONG:
+                    rules.add(Rules.gt(null, ((long) number)));
+                    break;
+                case FLOAT:
+                    rules.add(Rules.gt(null, Float.parseFloat(gtNumber)));
+                    break;
+                case DOUBLE:
+                    rules.add(Rules.gt(null, Double.parseDouble(gtNumber)));
+                    break;
             }
         }
         if (numberRule.eq() != Double.MAX_VALUE) {
             String eqNumber = String.valueOf(numberRule.eq());
             double number = Double.parseDouble(eqNumber);
             switch (numberRule.type()) {
-            case INTEGER:   rules.add(Rules.eq(null, ((int) number)));  break;
-            case LONG:      rules.add(Rules.eq(null, ((long) number))); break;
-            case FLOAT:     rules.add(Rules.eq(null, Float.parseFloat(eqNumber)));   break;
-            case DOUBLE:    rules.add(Rules.eq(null, Double.parseDouble(eqNumber))); break;
+                case INTEGER:
+                    rules.add(Rules.eq(null, ((int) number)));
+                    break;
+                case LONG:
+                    rules.add(Rules.eq(null, ((long) number)));
+                    break;
+                case FLOAT:
+                    rules.add(Rules.eq(null, Float.parseFloat(eqNumber)));
+                    break;
+                case DOUBLE:
+                    rules.add(Rules.eq(null, Double.parseDouble(eqNumber)));
+                    break;
             }
         }
 
@@ -230,13 +268,13 @@
 
         int messageResId = password.messageResId();
         String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            password.message();
+                password.message();
 
         return Rules.required(message, false);
     }
 
     private static Rule<TextView> getConfirmPasswordRule(Field field, View view,
-            ConfirmPassword confirmPassword, TextView passwordTextView) {
+                                                         ConfirmPassword confirmPassword, TextView passwordTextView) {
         if (!TextView.class.isAssignableFrom(view.getClass())) {
             Log.w(TAG, String.format(WARN_TEXT, field.getName(),
                     ConfirmPassword.class.getSimpleName()));
@@ -245,7 +283,7 @@
 
         int messageResId = confirmPassword.messageResId();
         String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            confirmPassword.message();
+                confirmPassword.message();
 
         return Rules.eq(message, passwordTextView);
     }
@@ -258,7 +296,7 @@
 
         int messageResId = email.messageResId();
         String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            email.message();
+                email.message();
 
         return Rules.or(message, Rules.eq(null, Rules.EMPTY_STRING),
                 Rules.regex(message, Rules.REGEX_EMAIL, true));
@@ -272,7 +310,7 @@
 
         int messageResId = ipAddress.messageResId();
         String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            ipAddress.message();
+                ipAddress.message();
 
         return Rules.or(message, Rules.eq(null, Rules.EMPTY_STRING),
                 Rules.regex(message, Rules.REGEX_IP_ADDRESS, true));
@@ -289,7 +327,7 @@
 
         int messageResId = checked.messageResId();
         String message = messageResId != 0 ? view.getContext().getString(messageResId) :
-            checked.message();
+                checked.message();
 
         return Rules.checked(message, checked.checked());
     }
diff --git a/src/com/mobsandgeeks/saripaar/PatternFetcher.java b/src/com/mobsandgeeks/saripaar/PatternFetcher.java
new file mode 100644
index 0000000..7a4eba0
--- /dev/null
+++ b/src/com/mobsandgeeks/saripaar/PatternFetcher.java
@@ -0,0 +1,8 @@
+package com.mobsandgeeks.saripaar;
+
+/**
+ * Created by maxchursin on 7/31/14.
+ */
+public interface PatternFetcher {
+    String getPattern();
+}
diff --git a/src/com/mobsandgeeks/saripaar/Validator.java b/src/com/mobsandgeeks/saripaar/Validator.java
index 5cc20ee..89dba11 100644
--- a/src/com/mobsandgeeks/saripaar/Validator.java
+++ b/src/com/mobsandgeeks/saripaar/Validator.java
@@ -15,7 +15,6 @@
 package com.mobsandgeeks.saripaar;
 
 import android.annotation.TargetApi;
-import android.app.Activity;
 import android.os.AsyncTask;
 import android.os.Build;
 import android.support.v4.app.Fragment;
@@ -69,14 +68,6 @@ private Validator() {
         mProperties = new HashMap<String, Object>();
     }
 
-    public <T extends Activity> Validator(T activity) {
-        this();
-        if (activity == null) {
-            throw new IllegalArgumentException("'controller' cannot be null");
-        }
-        mController = activity;
-    }
-
     @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     public <T extends android.app.Fragment> Validator(T fragment) {
         this();
@@ -110,7 +101,7 @@ private Validator() {
          * @param failedView The {@link View} that did not pass validation.
          * @param failedRule The failed {@link Rule} associated with the {@link View}.
          */
-        public void onValidationFailed(TextView failedView, Rule<?> failedRule);
+        public void onValidationFailed(View failedView, Rule<?> failedRule);
     }
 
     /**
@@ -118,9 +109,10 @@ private Validator() {
      *
      * @param view The {@link View} to be validated.
      * @param rule The {@link Rule} associated with the view.
+     *
      * @throws IllegalArgumentException If {@code rule} is {@code null}.
      */
-    public void put(TextView view, Rule<?> rule) {
+    public void put(View view, Rule<?> rule) {
         if (rule == null) {
             throw new IllegalArgumentException("'rule' cannot be null");
         }
@@ -131,11 +123,12 @@ public void put(TextView view, Rule<?> rule) {
     /**
      * Convenience method for adding multiple {@link Rule}s for a single {@link View}.
      *
-     * @param view  The {@link View} to be validated.
+     * @param view The {@link View} to be validated.
      * @param rules {@link List} of {@link Rule}s associated with the view.
+     *
      * @throws IllegalArgumentException If {@code rules} is {@code null}.
      */
-    public void put(TextView view, List<Rule<?>> rules) {
+    public void put(View view, List<Rule<?>> rules) {
         if (rules == null) {
             throw new IllegalArgumentException("\'rules\' cannot be null");
         }
@@ -267,8 +260,9 @@ public void setValidationListener(ValidationListener validationListener) {
     /**
      * Updates a property value if it exists, else creates a new one.
      *
-     * @param name  The property name.
+     * @param name The property name.
      * @param value Value of the property.
+     *
      * @throws IllegalArgumentException If {@code name} is {@code null}.
      */
     public void setProperty(String name, Object value) {
@@ -283,8 +277,10 @@ public void setProperty(String name, Object value) {
      * Retrieves the value of the given property.
      *
      * @param name The property name.
-     * @return Value of the property or {@code null} if the property does not exist.
+     *
      * @throws IllegalArgumentException If {@code name} is {@code null}.
+     *
+     * @return Value of the property or {@code null} if the property does not exist.
      */
     public Object getProperty(String name) {
         if (name == null) {
@@ -298,6 +294,7 @@ public Object getProperty(String name) {
      * Removes the property from this Validator.
      *
      * @param name The property name.
+     *
      * @return The value of the removed property or {@code null} if the property was not found.
      */
     public Object removeProperty(String name) {
@@ -308,6 +305,7 @@ public Object removeProperty(String name) {
      * Checks if the specified property exists in this Validator.
      *
      * @param name The property name.
+     *
      * @return True if the property exists.
      */
     public boolean containsProperty(String name) {
@@ -323,7 +321,6 @@ public void removeAllProperties() {
 
     /**
      * Removes all the rules for the matching {@link View}
-     *
      * @param view The {@code View} whose rules must be removed.
      */
     public void removeRulesFor(View view) {
@@ -347,7 +344,7 @@ public void removeRulesFor(View view) {
      * Validates all rules added to this Validator.
      *
      * @return {@code null} if all {@code Rule}s are valid, else returns the failed
-     * {@code ViewRulePair}.
+     *          {@code ViewRulePair}.
      */
     private ViewRulePair validateAllRules() {
         if (!mAnnotationsProcessed) {
@@ -401,7 +398,7 @@ private void createRulesFromAnnotations(List<AnnotationFieldPair> annotationFiel
                 } else if (confirmPasswordTextView != null) {
                     throw new IllegalStateException("You cannot annotate " +
                             "two fields in the same Activity with @ConfirmPassword.");
-                } else if (confirmPasswordTextView == null) {
+                } else {
                     confirmPasswordTextView = (TextView) getView(pair.field);
                 }
             }
@@ -425,7 +422,7 @@ private void createRulesFromAnnotations(List<AnnotationFieldPair> annotationFiel
     }
 
     private ViewRulePair getViewAndRule(Field field, Annotation annotation, Object... params) {
-        TextView view = getView(field);
+        View view = getView(field);
         if (view == null) {
             Log.w(TAG, String.format("Your %s - %s is null. Please check your field assignment(s).",
                     field.getType().getSimpleName(), field.getName()));
@@ -442,12 +439,12 @@ private ViewRulePair getViewAndRule(Field field, Annotation annotation, Object..
         return rule != null ? new ViewRulePair(view, rule) : null;
     }
 
-    private TextView getView(Field field) {
+    private View getView(Field field) {
         try {
             field.setAccessible(true);
             Object instance = mController;
 
-            return (TextView) field.get(instance);
+            return (View) field.get(instance);
         } catch (IllegalArgumentException e) {
             e.printStackTrace();
         } catch (IllegalAccessException e) {
@@ -474,7 +471,7 @@ private TextView getView(Field field) {
             }
         }
 
-        Collections.sort(annotationFieldPairs, new AnnotationFieldPairCompartor());
+        Collections.sort(annotationFieldPairs, new AnnotationFieldPairComparator());
 
         return annotationFieldPairs;
     }
@@ -540,10 +537,10 @@ private boolean isSaripaarAnnotation(Annotation annotation) {
     }
 
     private class ViewRulePair {
-        public TextView view;
+        public View view;
         public Rule rule;
 
-        public ViewRulePair(TextView view, Rule<?> rule) {
+        public ViewRulePair(View view, Rule<?> rule) {
             this.view = view;
             this.rule = rule;
         }
@@ -559,7 +556,7 @@ public AnnotationFieldPair(Annotation annotation, Field field) {
         }
     }
 
-    private class AnnotationFieldPairCompartor implements Comparator<AnnotationFieldPair> {
+    private class AnnotationFieldPairComparator implements Comparator<AnnotationFieldPair> {
 
         @Override
         public int compare(AnnotationFieldPair lhs, AnnotationFieldPair rhs) {
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Regex.java b/src/com/mobsandgeeks/saripaar/annotation/Regex.java
index e549b3d..523b619 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Regex.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Regex.java
@@ -30,9 +30,16 @@
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Regex {
     public int order();
-    public String pattern()     default ".";
-    public int patternResId()   default 0;
-    public boolean trim()       default true;
-    public String message()     default Rules.EMPTY_STRING;
-    public int messageResId()   default 0;
+
+    public String pattern() default ".";
+
+    public int patternResId() default 0;
+
+    public Class patternFetcher() default Void.class;
+
+    public boolean trim() default true;
+
+    public String message() default Rules.EMPTY_STRING;
+
+    public int messageResId() default 0;
 }
