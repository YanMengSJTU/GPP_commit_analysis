diff --git a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
index 8664898..7748f20 100644
--- a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
+++ b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
@@ -134,12 +134,24 @@
         int messageResId = textRule.messageResId();
         String message = messageResId != 0 ? view.getContext().getString(messageResId) :
                 textRule.message();
+        int minLength = textRule.maxLength();
+        int maxLength = textRule.minLength();
 
-        if (textRule.minLength() > 0) {
-            rules.add(Rules.minLength(null, textRule.minLength(), textRule.trim()));
+        try {
+            MinMaxProvider minMaxProvider = (MinMaxProvider) textRule.minMaxProvider().newInstance();
+            minLength = minMaxProvider.getMin();
+            maxLength = minMaxProvider.getMax();
+            message = minMaxProvider.errorMessage();
+        } catch (InstantiationException e) {
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        }
+        if (minLength > 0) {
+            rules.add(Rules.minLength(null, minLength, textRule.trim()));
         }
-        if (textRule.maxLength() != Integer.MAX_VALUE) {
-            rules.add(Rules.maxLength(null, textRule.maxLength(), textRule.trim()));
+        if (maxLength != Integer.MAX_VALUE) {
+            rules.add(Rules.maxLength(null, maxLength, textRule.trim()));
         }
 
         Rule<?>[] ruleArray = new Rule<?>[rules.size()];
@@ -158,19 +170,18 @@
         int messageResId = regexRule.messageResId();
         String message = messageResId != 0 ? context.getString(messageResId) : regexRule.message();
         String pattern = null;
+        int patternResId = regexRule.patternResId();
+        pattern = patternResId != 0 ? view.getContext().getString(patternResId) :
+                regexRule.pattern();
         try {
-            pattern = ((PatternProvider) regexRule.patternFetcher().newInstance()).getPattern();
+            PatternProvider patternProvider = (PatternProvider) regexRule.patternProvider().newInstance();
+            pattern = patternProvider.getPattern();
+            message = patternProvider.errorMessage();
         } catch (InstantiationException e) {
             e.printStackTrace();
         } catch (IllegalAccessException e) {
             e.printStackTrace();
         }
-        if (TextUtils.isEmpty(pattern)) {
-            int patternResId = regexRule.patternResId();
-            pattern = patternResId != 0 ? view.getContext().getString(patternResId) :
-                    regexRule.pattern();
-        }
-
         return Rules.regex(message, pattern, regexRule.trim());
     }
 
diff --git a/src/com/mobsandgeeks/saripaar/MinMaxProvider.java b/src/com/mobsandgeeks/saripaar/MinMaxProvider.java
new file mode 100644
index 0000000..3c8ca0f
--- /dev/null
+++ b/src/com/mobsandgeeks/saripaar/MinMaxProvider.java
@@ -0,0 +1,12 @@
+package com.mobsandgeeks.saripaar;
+
+/**
+ * Created by maxchursin on 7/31/14.
+ */
+public interface MinMaxProvider {
+    int getMin();
+
+    int getMax();
+
+    String errorMessage();
+}
diff --git a/src/com/mobsandgeeks/saripaar/PatternProvider.java b/src/com/mobsandgeeks/saripaar/PatternProvider.java
index ec1bb13..486ee2b 100644
--- a/src/com/mobsandgeeks/saripaar/PatternProvider.java
+++ b/src/com/mobsandgeeks/saripaar/PatternProvider.java
@@ -5,4 +5,6 @@
  */
 public interface PatternProvider {
     String getPattern();
+
+    String errorMessage();
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/MatchServerErrors.java b/src/com/mobsandgeeks/saripaar/annotation/MatchServerErrors.java
index c7d50c5..2dcabbf 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/MatchServerErrors.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/MatchServerErrors.java
@@ -14,8 +14,6 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
-import com.mobsandgeeks.saripaar.Rules;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -31,10 +29,4 @@
 @Retention(RetentionPolicy.RUNTIME)
 public @interface MatchServerErrors {
     public String[] errorKeys();
-
-    public boolean trim() default true;
-
-    public String message() default Rules.EMPTY_STRING;
-
-    public int messageResId() default 0;
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Regex.java b/src/com/mobsandgeeks/saripaar/annotation/Regex.java
index 023c7df..6fdce37 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Regex.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Regex.java
@@ -35,7 +35,7 @@
 
     public int patternResId() default 0;
 
-    public Class patternFetcher() default Void.class;
+    public Class patternProvider() default Void.class;
 
     public boolean trim() default true;
 
diff --git a/src/com/mobsandgeeks/saripaar/annotation/TextRule.java b/src/com/mobsandgeeks/saripaar/annotation/TextRule.java
index 209a7c5..ccdddcc 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/TextRule.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/TextRule.java
@@ -32,6 +32,8 @@
 public @interface TextRule {
     public int order() default 0;
 
+    public Class minMaxProvider() default Void.class;
+
     public int minLength() default 0;
 
     public int maxLength() default Integer.MAX_VALUE;
