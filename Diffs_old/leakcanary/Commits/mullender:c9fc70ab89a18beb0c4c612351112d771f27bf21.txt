diff --git a/library/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java b/library/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java
index e8affabb..eab1f827 100644
--- a/library/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java
+++ b/library/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java
@@ -35,7 +35,9 @@
 
 public final class LeakCanary {
 
-  /**
+    private static RefWatcher refWatcher;
+
+    /**
    * Creates a {@link RefWatcher} that works out of the box, and starts watching activity
    * references (on ICS+).
    */
@@ -55,7 +57,7 @@ public static RefWatcher install(Application application,
     enableDisplayLeakActivity(application);
     HeapDump.Listener heapDumpListener =
         new ServiceHeapDumpListener(application, listenerServiceClass);
-    RefWatcher refWatcher = androidWatcher(application, heapDumpListener);
+      refWatcher = androidWatcher(application, heapDumpListener);
     ActivityRefWatcher.installOnIcsPlus(application, refWatcher);
     return refWatcher;
   }
@@ -133,6 +135,17 @@ public static String leakInfo(Context context, HeapDump heapDump, AnalysisResult
     return info;
   }
 
+  public static void watch(final Object watchedReference, String referenceName) {
+    if (refWatcher == null) {
+      return;
+    }
+    refWatcher.watch(watchedReference, referenceName);
+  }
+
+  public static void watch(final Object watchedReference) {
+    watch(watchedReference, "");
+  }
+
   /**
    * Whether the current process is the process running the {@link HeapAnalyzerService}, which is
    * a different process than the normal app process.
