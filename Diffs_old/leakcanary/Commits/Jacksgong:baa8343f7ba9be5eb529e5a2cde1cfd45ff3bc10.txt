diff --git a/README.md b/README.md
index 68097900..749a0172 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-# Leakcanary Square的一款Android/Java内存泄露检测工具
+# Leakcanary Square的一款Android/Java内存泄漏检测工具
 
 **readme中文翻译[@Jacksgong](https://github.com/Jacksgong/leakcanary)**
 
@@ -32,7 +32,7 @@ public class ExampleApplication extends Application {
 }
 ```
 
-**这样就可以了!** 在debug包中activity内存泄露将会被监听到，并且将会自动显示一个通知(show a notification)。
+**这样就可以了!** 在debug包中activity内存泄漏将会被监听到，并且将会自动显示一个通知(show a notification)。
 
 ## II. 为什么要使用LeakCanary?
 
@@ -49,7 +49,7 @@ RefWatcher refWatcher = {...};
 // 我们预测shcrodingerCat很快会销毁(也许不会)，这里监听了它.
 refWatcher.watch(schrodingerCat);
 ```
-`LeakCanary.install()`会返回预设的`RefWatcher`，并且安装了一个`ActivityRefWatcher`来监听activity调用了`Activity.onDestroy()`以后的泄露。
+`LeakCanary.install()`会返回预设的`RefWatcher`，并且安装了一个`ActivityRefWatcher`来监听activity调用了`Activity.onDestroy()`以后的泄漏。
 
 ```
 public class ExampleApplication extends Application {
@@ -67,7 +67,7 @@ public class ExampleApplication extends Application {
   }
 }
 ```
-你也可以使用`RefWatcher`来监听fragment的泄露:
+你也可以使用`RefWatcher`来监听fragment的泄漏:
 
 ```
 public abstract class BaseFragment extends Fragment {
@@ -86,9 +86,9 @@ public abstract class BaseFragment extends Fragment {
 2. 之后，在后台线程，它检查引用是否已经被释放，如果没有它将促发一次GC。
 3. 如果引用依然没有被释放，它会导出heap到存储在app文件系统的`a.hprof`文件。
 4. `HeapAnalyzerService`在单独的一个进程被启动，并且`HeapAnalyzer`使用[`HAHA`](https://github.com/square/haha)来解析heap。
-5. `HeapAnalyzer`由于采用了单独的reference key，在heap dump中找到了`KeyedWeakReference`并且定位到泄露的引用。
-6. `HeapAnalyzer`通过计算出到GC根部最短路径的强引用来决定是否这里是泄露了，并且建立导致泄露的引用关系链。
-7. 结果将传回在app进程的`DisplayLeakService`，并且显示泄露通知。
+5. `HeapAnalyzer`由于采用了单独的reference key，在heap dump中找到了`KeyedWeakReference`并且定位到泄漏的引用。
+6. `HeapAnalyzer`通过计算出到GC根部最短路径的强引用来决定是否这里是泄漏了，并且建立导致泄漏的引用关系链。
+7. 结果将传回在app进程的`DisplayLeakService`，并且显示泄漏通知。
 
 ## V. 我应该如何拷贝leak trace呢？
 
@@ -107,26 +107,26 @@ In com.example.leakcanary:1.0:1 com.example.leakcanary.MainActivity has leaked:
 
 也可以从**action bar menu**分享leak trace与heap dump文件。
 
-## VI. 应该如何解决内存泄露呢?
+## VI. 应该如何解决内存泄漏呢?
 
 一旦拥有了leak trace，就可以分析出哪个路径中的引用不应该存在，然后分析出引用依然存在的原因。通常情况是注册的监听没有反注册，或者是`close()`方法没有调用，或者是一个未知的类(通常也指l没有句柄的对象，就纯new出来执行了某方法)hold住了外部类的引用。如果你分析不出你代码中的问题，别放弃，可以在[Stack Overflow question](http://stackoverflow.com/questions/tagged/leakcanary)(使用`leakcanary` 标签)中创建相关问题。
 
-## VII. 我的泄露是因为执行Android SDK导致的！
+## VII. 我的泄漏是因为执行Android SDK导致的！
 
-随着时间的推移，已经有一些已知的由于Android SDK的执行导致的内存泄露得到了作为生厂商AOSP的修复。当发生这样的内存泄露的时候，其实我们作为应用开发者能做的很少。对于这样的问题，LeakCanary已经有内建了一个忽略已知Android SDK泄露的列表: [`AndroidExcludedRefs.java`](https://github.com/square/leakcanary/blob/master/library/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java)。如果你发现了新的，请提供leak trace、reference key、设备版本与Android版来[创建问题](https://github.com/square/leakcanary/issues/new)，当然如果能够提供一个heap dump的文件连接更好。
+随着时间的推移，已经有一些已知的由于Android SDK的执行导致的内存泄漏得到了作为生厂商AOSP的修复。当发生这样的内存泄漏的时候，其实我们作为应用开发者能做的很少。对于这样的问题，LeakCanary已经有内建了一个忽略已知Android SDK泄漏的列表: [`AndroidExcludedRefs.java`](https://github.com/square/leakcanary/blob/master/library/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java)。如果你发现了新的，请提供leak trace、reference key、设备版本与Android版来[创建问题](https://github.com/square/leakcanary/issues/new)，当然如果能够提供一个heap dump的文件连接更好。
 
-这对于**新发布的Android**来说是特别重要的，你有机会能够帮助尽早发现新的内存泄露，使整个Android社区受益。
+这对于**新发布的Android**来说是特别重要的，你有机会能够帮助尽早发现新的内存泄漏，使整个Android社区受益。
 
 开发版本的快照: [Sonatype's `snapshots` repository](https://oss.sonatype.org/content/repositories/snapshots/)。
 
 ## VIII. 超出leak trace范围
 
-通常leak trace是不够的，还需要通过[MAT](http://eclipse.org/mat/)或者[YourKit](https://www.yourkit.com/)来深挖heap dump，下面是你如何通过heap dump来找出泄露:
+通常leak trace是不够的，还需要通过[MAT](http://eclipse.org/mat/)或者[YourKit](https://www.yourkit.com/)来深挖heap dump，下面是你如何通过heap dump来找出泄漏:
 
 1. 找到`com.squareup.leakcanary.KeyedWeakReference`所有的实例。
 2. 对于每个实例，查看它的`key`成员变量。
 3. 找到包含与LeakCanary报出的reference key相同`key`成员变量的`KeyedWeakReference`。
-4. 那么这个`KeyedWeakReference`中的`reference`成员变量，就是你泄露了的对象。
+4. 那么这个`KeyedWeakReference`中的`reference`成员变量，就是你泄漏了的对象。
 5. 到此为止，剩余的工作就是，开始查找到GC Roots最短路径(不包含弱引用)。
 
 ## IX. 定制
