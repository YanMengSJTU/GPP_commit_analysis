diff --git a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/AnalysisResult.java b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/AnalysisResult.java
index 16039d32..823a7534 100644
--- a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/AnalysisResult.java
+++ b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/AnalysisResult.java
@@ -52,16 +52,16 @@
    * Class name of the object that leaked if {@link #leakFound} is true, null otherwise.
    * The class name format is the same as what would be returned by {@link Class#getName()}.
    */
-  public final @Nullable String className;
+  @Nullable public final String className;
 
   /**
    * Shortest path to GC roots for the leaking object if {@link #leakFound} is true, null
    * otherwise. This can be used as a unique signature for the leak.
    */
-  public final @Nullable LeakTrace leakTrace;
+  @Nullable public final LeakTrace leakTrace;
 
   /** Null unless the analysis failed. */
-  public final @Nullable Throwable failure;
+  @Nullable public final Throwable failure;
 
   /**
    * The number of bytes which would be freed if all references to the leaking object were
diff --git a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/AnalyzerProgressListener.java b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/AnalyzerProgressListener.java
index 917a98ba..96e015fa 100644
--- a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/AnalyzerProgressListener.java
+++ b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/AnalyzerProgressListener.java
@@ -4,7 +4,7 @@
 
 public interface AnalyzerProgressListener {
 
-  AnalyzerProgressListener NONE = new AnalyzerProgressListener() {
+  @NonNull AnalyzerProgressListener NONE = new AnalyzerProgressListener() {
     @Override public void onProgressUpdate(@NonNull Step step) {
     }
   };
diff --git a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/LeakTrace.java b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/LeakTrace.java
index b276aef9..c63c7aca 100644
--- a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/LeakTrace.java
+++ b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/LeakTrace.java
@@ -25,8 +25,8 @@
  */
 public final class LeakTrace implements Serializable {
 
-  public final @NonNull List<LeakTraceElement> elements;
-  public final @NonNull List<Reachability> expectedReachability;
+  @NonNull public final List<LeakTraceElement> elements;
+  @NonNull public final List<Reachability> expectedReachability;
 
   LeakTrace(List<LeakTraceElement> elements, List<Reachability> expectedReachability) {
     this.elements = elements;
diff --git a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/TrackedReference.java b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/TrackedReference.java
index ebfd9f8c..1460808c 100644
--- a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/TrackedReference.java
+++ b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/TrackedReference.java
@@ -12,16 +12,16 @@
 public class TrackedReference {
 
   /** Corresponds to {@link KeyedWeakReference#key}. */
-  public final @NonNull String key;
+  @NonNull public final String key;
 
   /** Corresponds to {@link KeyedWeakReference#name}. */
-  public final @NonNull String name;
+  @NonNull public final String name;
 
   /** Class of the tracked instance. */
-  public final @NonNull String className;
+  @NonNull public final String className;
 
   /** List of all fields (member and static) for that instance. */
-  public final List<LeakReference> fields;
+  @NonNull public final List<LeakReference> fields;
 
   public TrackedReference(@NonNull String key, @NonNull String name, @NonNull String className,
       @NonNull List<LeakReference> fields) {
diff --git a/leakcanary-android-instrumentation/src/main/java/com/squareup/leakcanary/InstrumentationLeakResults.java b/leakcanary-android-instrumentation/src/main/java/com/squareup/leakcanary/InstrumentationLeakResults.java
index 523d1015..2e2333a5 100644
--- a/leakcanary-android-instrumentation/src/main/java/com/squareup/leakcanary/InstrumentationLeakResults.java
+++ b/leakcanary-android-instrumentation/src/main/java/com/squareup/leakcanary/InstrumentationLeakResults.java
@@ -24,22 +24,22 @@
 
 public final class InstrumentationLeakResults {
 
-  public static final InstrumentationLeakResults NONE =
+  @NonNull public static final InstrumentationLeakResults NONE =
       new InstrumentationLeakResults(Collections.<Result>emptyList(),
           Collections.<Result>emptyList(), Collections.<Result>emptyList());
 
   /** Proper leaks found during instrumentation tests. */
-  public final @NonNull List<Result> detectedLeaks;
+  @NonNull public final List<Result> detectedLeaks;
 
   /**
    * Excluded leaks found during instrumentation tests, based on {@link RefWatcher#excludedRefs}
    */
-  public final @NonNull List<Result> excludedLeaks;
+  @NonNull public final List<Result> excludedLeaks;
 
   /**
    * Leak analysis failures that happened when we tried to detect leaks.
    */
-  public final @NonNull List<Result> failures;
+  @NonNull public final List<Result> failures;
 
   public InstrumentationLeakResults(@NonNull List<Result> detectedLeaks,
       @NonNull List<Result> excludedLeaks, @NonNull List<Result> failures) {
@@ -49,8 +49,8 @@ public InstrumentationLeakResults(@NonNull List<Result> detectedLeaks,
   }
 
   public static final class Result {
-    public final @NonNull HeapDump heapDump;
-    public final @NonNull AnalysisResult analysisResult;
+    @NonNull public final HeapDump heapDump;
+    @NonNull public final AnalysisResult analysisResult;
 
     public Result(@NonNull HeapDump heapDump, @NonNull AnalysisResult analysisResult) {
       this.heapDump = heapDump;
diff --git a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/RefWatcher.java b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/RefWatcher.java
index ca9f6602..9fd86367 100644
--- a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/RefWatcher.java
+++ b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/RefWatcher.java
@@ -1,19 +1,21 @@
 package com.squareup.leakcanary;
 
+import android.support.annotation.NonNull;
+
 /**
  * No-op implementation of {@link RefWatcher} for release builds. Please use {@link
  * RefWatcher#DISABLED}.
  */
 public final class RefWatcher {
 
-  public static final RefWatcher DISABLED = new RefWatcher();
+  @NonNull public static final RefWatcher DISABLED = new RefWatcher();
 
   private RefWatcher() {
   }
 
-  public void watch(Object watchedReference) {
+  public void watch(@NonNull Object watchedReference) {
   }
 
-  public void watch(Object watchedReference, String referenceName) {
+  public void watch(@NonNull Object watchedReference, @NonNull String referenceName) {
   }
 }
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
index 01206503..c88df672 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
@@ -138,6 +138,7 @@ private HeapDump renameHeapdump(HeapDump heapDump) {
    * the heap dump. Don't forget to check {@link AnalysisResult#leakFound} and {@link
    * AnalysisResult#excludedLeak} first.
    */
-  protected void afterDefaultHandling(HeapDump heapDump, AnalysisResult result, String leakInfo) {
+  protected void afterDefaultHandling(@NonNull HeapDump heapDump, @NonNull AnalysisResult result,
+      @NonNull String leakInfo) {
   }
 }
