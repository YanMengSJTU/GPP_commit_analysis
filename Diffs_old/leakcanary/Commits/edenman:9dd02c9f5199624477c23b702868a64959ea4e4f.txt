diff --git a/leakcanary-android-no-op/build.gradle b/leakcanary-android-no-op/build.gradle
new file mode 100644
index 00000000..9a787b47
--- /dev/null
+++ b/leakcanary-android-no-op/build.gradle
@@ -0,0 +1,32 @@
+version rootProject.ext.VERSION_NAME
+group rootProject.ext.GROUP
+
+buildscript {
+  repositories {
+    mavenCentral()
+  }
+}
+
+apply plugin: 'com.android.library'
+
+repositories {
+  mavenCentral()
+}
+
+dependencies {
+}
+
+android {
+  compileSdkVersion rootProject.ext.compileSdkVersion
+  buildToolsVersion rootProject.ext.buildToolsVersion
+  defaultConfig {
+    minSdkVersion rootProject.ext.minSdkVersion
+  }
+}
+
+task sourceJar(type: Jar) {
+  from 'src/main/java'
+}
+
+apply from: rootProject.file('gradle/checkstyle.gradle')
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
\ No newline at end of file
diff --git a/leakcanary-android-no-op/gradle.properties b/leakcanary-android-no-op/gradle.properties
new file mode 100644
index 00000000..60494b8a
--- /dev/null
+++ b/leakcanary-android-no-op/gradle.properties
@@ -0,0 +1,2 @@
+POM_ARTIFACT_ID=leakcanary-android-no-op
+POM_NAME=No op LeakCanary for Android
\ No newline at end of file
diff --git a/leakcanary-android-no-op/src/main/AndroidManifest.xml b/leakcanary-android-no-op/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..acd455c3
--- /dev/null
+++ b/leakcanary-android-no-op/src/main/AndroidManifest.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 Square, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<manifest
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.squareup.leakcanary.android.noop"
+    >
+</manifest>
diff --git a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/LeakCanary.java b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/LeakCanary.java
new file mode 100644
index 00000000..a9784143
--- /dev/null
+++ b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/LeakCanary.java
@@ -0,0 +1,22 @@
+package com.squareup.leakcanary;
+
+import android.app.Application;
+import android.content.Context;
+
+/**
+ * A no-op version of {@link LeakCanary} that can be used in release builds.
+ */
+public final class LeakCanary {
+
+  public static RefWatcher install(Application application) {
+    return RefWatcher.DISABLED;
+  }
+
+  public static boolean isInAnalyzerProcess(Context context) {
+    return false;
+  }
+
+  private LeakCanary() {
+    throw new AssertionError();
+  }
+}
diff --git a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/RefWatcher.java b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/RefWatcher.java
new file mode 100644
index 00000000..ca9f6602
--- /dev/null
+++ b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/RefWatcher.java
@@ -0,0 +1,19 @@
+package com.squareup.leakcanary;
+
+/**
+ * No-op implementation of {@link RefWatcher} for release builds. Please use {@link
+ * RefWatcher#DISABLED}.
+ */
+public final class RefWatcher {
+
+  public static final RefWatcher DISABLED = new RefWatcher();
+
+  private RefWatcher() {
+  }
+
+  public void watch(Object watchedReference) {
+  }
+
+  public void watch(Object watchedReference, String referenceName) {
+  }
+}
diff --git a/leakcanary-sample/build.gradle b/leakcanary-sample/build.gradle
index 187808c6..852189d7 100644
--- a/leakcanary-sample/build.gradle
+++ b/leakcanary-sample/build.gradle
@@ -2,6 +2,8 @@ apply plugin: 'com.android.application'
 
 dependencies {
   debugCompile project(':leakcanary-android')
+  releaseCompile project(':leakcanary-android-no-op')
+
   testCompile "junit:junit:4.12"
   testCompile "org.robolectric:robolectric:3.4.2"
 }
diff --git a/leakcanary-sample/src/debug/AndroidManifest.xml b/leakcanary-sample/src/debug/AndroidManifest.xml
deleted file mode 100644
index fed8c859..00000000
--- a/leakcanary-sample/src/debug/AndroidManifest.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools">
-
-  <application
-      android:name="com.example.leakcanary.DebugExampleApplication"
-      android:label="LeakCanary Sample Debug"
-      tools:replace="android:name,android:label"
-      />
-</manifest>
diff --git a/leakcanary-sample/src/debug/java/com/example/leakcanary/DebugExampleApplication.java b/leakcanary-sample/src/debug/java/com/example/leakcanary/DebugExampleApplication.java
deleted file mode 100644
index 6cc0686e..00000000
--- a/leakcanary-sample/src/debug/java/com/example/leakcanary/DebugExampleApplication.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package com.example.leakcanary;
-
-import android.os.StrictMode;
-import com.squareup.leakcanary.LeakCanary;
-
-public class DebugExampleApplication extends ExampleApplication {
-  @Override public void onCreate() {
-    super.onCreate();
-    setupLeakCanary();
-  }
-
-  protected void setupLeakCanary() {
-    if (LeakCanary.isInAnalyzerProcess(this)) {
-      // This process is dedicated to LeakCanary for heap analysis.
-      // You should not init your app in this process.
-      return;
-    }
-    enabledStrictMode();
-    LeakCanary.install(this);
-  }
-
-  private static void enabledStrictMode() {
-    StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder() //
-        .detectAll() //
-        .penaltyLog() //
-        .penaltyDeath() //
-        .build());
-  }
-}
diff --git a/leakcanary-sample/src/main/java/com/example/leakcanary/ExampleApplication.java b/leakcanary-sample/src/main/java/com/example/leakcanary/ExampleApplication.java
index 09a667e8..08cb841b 100644
--- a/leakcanary-sample/src/main/java/com/example/leakcanary/ExampleApplication.java
+++ b/leakcanary-sample/src/main/java/com/example/leakcanary/ExampleApplication.java
@@ -22,5 +22,24 @@
 public class ExampleApplication extends Application {
   @Override public void onCreate() {
     super.onCreate();
+    setupLeakCanary();
+  }
+
+  protected void setupLeakCanary() {
+    if (LeakCanary.isInAnalyzerProcess(this)) {
+      // This process is dedicated to LeakCanary for heap analysis.
+      // You should not init your app in this process.
+      return;
+    }
+    enabledStrictMode();
+    LeakCanary.install(this);
+  }
+
+  private static void enabledStrictMode() {
+    StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder() //
+        .detectAll() //
+        .penaltyLog() //
+        .penaltyDeath() //
+        .build());
   }
 }
diff --git a/leakcanary-sample/src/test/java/com/example/leakcanary/TestExampleApplication.java b/leakcanary-sample/src/test/java/com/example/leakcanary/TestExampleApplication.java
index 2e0e7320..91750c2b 100644
--- a/leakcanary-sample/src/test/java/com/example/leakcanary/TestExampleApplication.java
+++ b/leakcanary-sample/src/test/java/com/example/leakcanary/TestExampleApplication.java
@@ -1,6 +1,6 @@
 package com.example.leakcanary;
 
-public class TestExampleApplication extends DebugExampleApplication {
+public class TestExampleApplication extends ExampleApplication {
   @Override protected void setupLeakCanary() {
     // No leakcanary in unit tests.
   }
diff --git a/settings.gradle b/settings.gradle
index 4408e3cc..73da17f3 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,4 +1,5 @@
 include ':leakcanary-watcher'
 include ':leakcanary-analyzer'
 include ':leakcanary-android'
+include ':leakcanary-android-no-op'
 include ':leakcanary-sample'
