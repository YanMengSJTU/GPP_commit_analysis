diff --git a/leakcanary-android-instrumentation/build.gradle b/leakcanary-android-instrumentation/build.gradle
index 4fc4f31f..087bc5d4 100644
--- a/leakcanary-android-instrumentation/build.gradle
+++ b/leakcanary-android-instrumentation/build.gradle
@@ -15,6 +15,7 @@ android {
     disable 'GoogleAppIndexingWarning'
     // junit references java.lang.management
     ignore 'InvalidPackage'
+    check 'Interoperability'
   }
 }
 
diff --git a/leakcanary-android-instrumentation/src/main/java/com/squareup/leakcanary/FailTestOnLeakRunListener.java b/leakcanary-android-instrumentation/src/main/java/com/squareup/leakcanary/FailTestOnLeakRunListener.java
index c4de3152..6bacb90d 100644
--- a/leakcanary-android-instrumentation/src/main/java/com/squareup/leakcanary/FailTestOnLeakRunListener.java
+++ b/leakcanary-android-instrumentation/src/main/java/com/squareup/leakcanary/FailTestOnLeakRunListener.java
@@ -68,7 +68,7 @@
    * is started. Returns null to continue leak detection, or a string describing the reason for
    * skipping otherwise.
    */
-  @Nullable protected String skipLeakDetectionReason(@NonNull Description description) {
+  protected @Nullable String skipLeakDetectionReason(@NonNull Description description) {
     return null;
   }
 
@@ -120,8 +120,7 @@ protected void reportLeaks(@NonNull InstrumentationLeakResults results) {
   }
 
   /** Can be overridden to customize the failure string message. */
-  @NonNull
-  protected String buildLeakDetectedMessage(
+  protected @NonNull String buildLeakDetectedMessage(
       @NonNull List<InstrumentationLeakResults.Result> detectedLeaks) {
     StringBuilder failureMessage = new StringBuilder();
     failureMessage.append(
diff --git a/leakcanary-android-instrumentation/src/main/java/com/squareup/leakcanary/InstrumentationLeakDetector.java b/leakcanary-android-instrumentation/src/main/java/com/squareup/leakcanary/InstrumentationLeakDetector.java
index def1e781..f8e53dbc 100644
--- a/leakcanary-android-instrumentation/src/main/java/com/squareup/leakcanary/InstrumentationLeakDetector.java
+++ b/leakcanary-android-instrumentation/src/main/java/com/squareup/leakcanary/InstrumentationLeakDetector.java
@@ -20,6 +20,7 @@
 import android.content.Context;
 import android.os.Debug;
 import android.os.SystemClock;
+import android.support.annotation.NonNull;
 import java.io.File;
 import java.util.ArrayList;
 import java.util.List;
@@ -109,7 +110,8 @@
    * {@link RunListener} that calls {@link #detectLeaks()}, for instance
    * {@link FailTestOnLeakRunListener}.
    */
-  public static AndroidRefWatcherBuilder instrumentationRefWatcher(Application application) {
+  public static @NonNull AndroidRefWatcherBuilder instrumentationRefWatcher(
+      @NonNull Application application) {
     return LeakCanary.refWatcher(application)
         .watchExecutor(new WatchExecutor() {
           // Storing weak refs to ensure they make it to the queue.
@@ -121,7 +123,7 @@ public static AndroidRefWatcherBuilder instrumentationRefWatcher(Application app
         });
   }
 
-  public InstrumentationLeakResults detectLeaks() {
+  public @NonNull InstrumentationLeakResults detectLeaks() {
     Instrumentation instrumentation = getInstrumentation();
     Context context = instrumentation.getTargetContext();
     RefWatcher refWatcher = LeakCanary.installedRefWatcher();
diff --git a/leakcanary-android-instrumentation/src/main/java/com/squareup/leakcanary/InstrumentationLeakResults.java b/leakcanary-android-instrumentation/src/main/java/com/squareup/leakcanary/InstrumentationLeakResults.java
index 84a66599..523d1015 100644
--- a/leakcanary-android-instrumentation/src/main/java/com/squareup/leakcanary/InstrumentationLeakResults.java
+++ b/leakcanary-android-instrumentation/src/main/java/com/squareup/leakcanary/InstrumentationLeakResults.java
@@ -15,6 +15,7 @@
  */
 package com.squareup.leakcanary;
 
+import android.support.annotation.NonNull;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -28,30 +29,30 @@
           Collections.<Result>emptyList(), Collections.<Result>emptyList());
 
   /** Proper leaks found during instrumentation tests. */
-  public final List<Result> detectedLeaks;
+  public final @NonNull List<Result> detectedLeaks;
 
   /**
    * Excluded leaks found during instrumentation tests, based on {@link RefWatcher#excludedRefs}
    */
-  public final List<Result> excludedLeaks;
+  public final @NonNull List<Result> excludedLeaks;
 
   /**
    * Leak analysis failures that happened when we tried to detect leaks.
    */
-  public final List<Result> failures;
+  public final @NonNull List<Result> failures;
 
-  public InstrumentationLeakResults(List<Result> detectedLeaks, List<Result> excludedLeaks,
-      List<Result> failures) {
+  public InstrumentationLeakResults(@NonNull List<Result> detectedLeaks,
+      @NonNull List<Result> excludedLeaks, @NonNull List<Result> failures) {
     this.detectedLeaks = unmodifiableList(new ArrayList<>(detectedLeaks));
     this.excludedLeaks = unmodifiableList(new ArrayList<>(excludedLeaks));
     this.failures = unmodifiableList(new ArrayList<>(failures));
   }
 
   public static final class Result {
-    public final HeapDump heapDump;
-    public final AnalysisResult analysisResult;
+    public final @NonNull HeapDump heapDump;
+    public final @NonNull AnalysisResult analysisResult;
 
-    public Result(HeapDump heapDump, AnalysisResult analysisResult) {
+    public Result(@NonNull HeapDump heapDump, @NonNull AnalysisResult analysisResult) {
       this.heapDump = heapDump;
       this.analysisResult = analysisResult;
     }
