diff --git a/leakcanary-android-no-op/build.gradle b/leakcanary-android-no-op/build.gradle
deleted file mode 100644
index 9a787b47..00000000
--- a/leakcanary-android-no-op/build.gradle
+++ /dev/null
@@ -1,32 +0,0 @@
-version rootProject.ext.VERSION_NAME
-group rootProject.ext.GROUP
-
-buildscript {
-  repositories {
-    mavenCentral()
-  }
-}
-
-apply plugin: 'com.android.library'
-
-repositories {
-  mavenCentral()
-}
-
-dependencies {
-}
-
-android {
-  compileSdkVersion rootProject.ext.compileSdkVersion
-  buildToolsVersion rootProject.ext.buildToolsVersion
-  defaultConfig {
-    minSdkVersion rootProject.ext.minSdkVersion
-  }
-}
-
-task sourceJar(type: Jar) {
-  from 'src/main/java'
-}
-
-apply from: rootProject.file('gradle/checkstyle.gradle')
-apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
\ No newline at end of file
diff --git a/leakcanary-android-no-op/gradle.properties b/leakcanary-android-no-op/gradle.properties
deleted file mode 100644
index 60494b8a..00000000
--- a/leakcanary-android-no-op/gradle.properties
+++ /dev/null
@@ -1,2 +0,0 @@
-POM_ARTIFACT_ID=leakcanary-android-no-op
-POM_NAME=No op LeakCanary for Android
\ No newline at end of file
diff --git a/leakcanary-android-no-op/src/main/AndroidManifest.xml b/leakcanary-android-no-op/src/main/AndroidManifest.xml
deleted file mode 100644
index acd455c3..00000000
--- a/leakcanary-android-no-op/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-  ~ Copyright (C) 2015 Square, Inc.
-  ~
-  ~ Licensed under the Apache License, Version 2.0 (the "License");
-  ~ you may not use this file except in compliance with the License.
-  ~ You may obtain a copy of the License at
-  ~
-  ~      http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing, software
-  ~ distributed under the License is distributed on an "AS IS" BASIS,
-  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~ See the License for the specific language governing permissions and
-  ~ limitations under the License.
-  -->
-<manifest
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.squareup.leakcanary.android.noop"
-    >
-</manifest>
diff --git a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/LeakCanary.java b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/LeakCanary.java
deleted file mode 100644
index a9784143..00000000
--- a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/LeakCanary.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package com.squareup.leakcanary;
-
-import android.app.Application;
-import android.content.Context;
-
-/**
- * A no-op version of {@link LeakCanary} that can be used in release builds.
- */
-public final class LeakCanary {
-
-  public static RefWatcher install(Application application) {
-    return RefWatcher.DISABLED;
-  }
-
-  public static boolean isInAnalyzerProcess(Context context) {
-    return false;
-  }
-
-  private LeakCanary() {
-    throw new AssertionError();
-  }
-}
diff --git a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/RefWatcher.java b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/RefWatcher.java
deleted file mode 100644
index ca9f6602..00000000
--- a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/RefWatcher.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.squareup.leakcanary;
-
-/**
- * No-op implementation of {@link RefWatcher} for release builds. Please use {@link
- * RefWatcher#DISABLED}.
- */
-public final class RefWatcher {
-
-  public static final RefWatcher DISABLED = new RefWatcher();
-
-  private RefWatcher() {
-  }
-
-  public void watch(Object watchedReference) {
-  }
-
-  public void watch(Object watchedReference, String referenceName) {
-  }
-}
diff --git a/leakcanary-sample/build.gradle b/leakcanary-sample/build.gradle
index 54e0d55c..187808c6 100644
--- a/leakcanary-sample/build.gradle
+++ b/leakcanary-sample/build.gradle
@@ -2,7 +2,8 @@ apply plugin: 'com.android.application'
 
 dependencies {
   debugCompile project(':leakcanary-android')
-  releaseCompile project(':leakcanary-android-no-op');
+  testCompile "junit:junit:4.12"
+  testCompile "org.robolectric:robolectric:3.4.2"
 }
 
 android {
diff --git a/leakcanary-sample/src/debug/AndroidManifest.xml b/leakcanary-sample/src/debug/AndroidManifest.xml
new file mode 100644
index 00000000..fed8c859
--- /dev/null
+++ b/leakcanary-sample/src/debug/AndroidManifest.xml
@@ -0,0 +1,9 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools">
+
+  <application
+      android:name="com.example.leakcanary.DebugExampleApplication"
+      android:label="LeakCanary Sample Debug"
+      tools:replace="android:name,android:label"
+      />
+</manifest>
diff --git a/leakcanary-sample/src/debug/java/com/example/leakcanary/DebugExampleApplication.java b/leakcanary-sample/src/debug/java/com/example/leakcanary/DebugExampleApplication.java
new file mode 100644
index 00000000..6cc0686e
--- /dev/null
+++ b/leakcanary-sample/src/debug/java/com/example/leakcanary/DebugExampleApplication.java
@@ -0,0 +1,29 @@
+package com.example.leakcanary;
+
+import android.os.StrictMode;
+import com.squareup.leakcanary.LeakCanary;
+
+public class DebugExampleApplication extends ExampleApplication {
+  @Override public void onCreate() {
+    super.onCreate();
+    setupLeakCanary();
+  }
+
+  protected void setupLeakCanary() {
+    if (LeakCanary.isInAnalyzerProcess(this)) {
+      // This process is dedicated to LeakCanary for heap analysis.
+      // You should not init your app in this process.
+      return;
+    }
+    enabledStrictMode();
+    LeakCanary.install(this);
+  }
+
+  private static void enabledStrictMode() {
+    StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder() //
+        .detectAll() //
+        .penaltyLog() //
+        .penaltyDeath() //
+        .build());
+  }
+}
diff --git a/leakcanary-sample/src/main/java/com/example/leakcanary/ExampleApplication.java b/leakcanary-sample/src/main/java/com/example/leakcanary/ExampleApplication.java
index 82f8c994..09a667e8 100644
--- a/leakcanary-sample/src/main/java/com/example/leakcanary/ExampleApplication.java
+++ b/leakcanary-sample/src/main/java/com/example/leakcanary/ExampleApplication.java
@@ -20,23 +20,7 @@
 import com.squareup.leakcanary.LeakCanary;
 
 public class ExampleApplication extends Application {
-
   @Override public void onCreate() {
     super.onCreate();
-    if (LeakCanary.isInAnalyzerProcess(this)) {
-      // This process is dedicated to LeakCanary for heap analysis.
-      // You should not init your app in this process.
-      return;
-    }
-    enabledStrictMode();
-    LeakCanary.install(this);
-  }
-
-  private static void enabledStrictMode() {
-    StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder() //
-        .detectAll() //
-        .penaltyLog() //
-        .penaltyDeath() //
-        .build());
   }
 }
diff --git a/leakcanary-sample/src/test/java/com/example/leakcanary/SampleTest.java b/leakcanary-sample/src/test/java/com/example/leakcanary/SampleTest.java
new file mode 100644
index 00000000..960cfedb
--- /dev/null
+++ b/leakcanary-sample/src/test/java/com/example/leakcanary/SampleTest.java
@@ -0,0 +1,20 @@
+package com.example.leakcanary;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.android.controller.ActivityController;
+import org.robolectric.annotation.Config;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(constants = BuildConfig.class, application = TestExampleApplication.class)
+public class SampleTest {
+  @Test public void testTheThing() throws Exception {
+    ActivityController<MainActivity> controller =
+        Robolectric.buildActivity(MainActivity.class).create().start().resume().visible();
+    controller.get().findViewById(R.id.async_task).performClick();
+    controller.stop();
+    controller.destroy();
+  }
+}
diff --git a/leakcanary-sample/src/test/java/com/example/leakcanary/TestExampleApplication.java b/leakcanary-sample/src/test/java/com/example/leakcanary/TestExampleApplication.java
new file mode 100644
index 00000000..2e0e7320
--- /dev/null
+++ b/leakcanary-sample/src/test/java/com/example/leakcanary/TestExampleApplication.java
@@ -0,0 +1,7 @@
+package com.example.leakcanary;
+
+public class TestExampleApplication extends DebugExampleApplication {
+  @Override protected void setupLeakCanary() {
+    // No leakcanary in unit tests.
+  }
+}
diff --git a/settings.gradle b/settings.gradle
index 73da17f3..4408e3cc 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,5 +1,4 @@
 include ':leakcanary-watcher'
 include ':leakcanary-analyzer'
 include ':leakcanary-android'
-include ':leakcanary-android-no-op'
 include ':leakcanary-sample'
