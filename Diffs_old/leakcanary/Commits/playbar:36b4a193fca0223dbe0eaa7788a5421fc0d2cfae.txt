diff --git a/.gitignore b/.gitignore
index 3e76ed69..925601e3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,36 +1,37 @@
-# Gradle
-.gradle
-gradlew.bat
-build
-local.properties
-reports
-
-# Maven
-target
-pom.xml.*
-release.properties
-gen-external-apklibs
-
-# Eclipse
-.classpath
-.project
-.settings
-eclipsebin
-
-# IntelliJ IDEA
-.idea
-*.iml
-*.ipl
-*.iws
-classes/
-idea-classes/
-coverage-error.log
-
-# Android
-gen
-bin
-project.properties
-out
-
-# Finder
-.DS_Store
+# Gradle
+.gradle
+gradlew.bat
+build
+local.properties
+reports
+
+# Maven
+target
+pom.xml.*
+release.properties
+gen-external-apklibs
+
+# Eclipse
+.classpath
+.project
+.settings
+eclipsebin
+
+# IntelliJ IDEA
+.idea
+*.iml
+*.ipl
+*.iws
+classes/
+idea-classes/
+coverage-error.log
+
+# Android
+gen
+bin
+project.properties
+out
+
+# Finder
+.DS_Store
+*.gitignore
diff --git a/leakcanary-sample/src/main/java/com/example/leakcanary/ExampleApplication.java b/leakcanary-sample/src/main/java/com/example/leakcanary/ExampleApplication.java
index 82f8c994..bc803157 100644
--- a/leakcanary-sample/src/main/java/com/example/leakcanary/ExampleApplication.java
+++ b/leakcanary-sample/src/main/java/com/example/leakcanary/ExampleApplication.java
@@ -16,12 +16,22 @@
 package com.example.leakcanary;
 
 import android.app.Application;
+import android.content.Context;
 import android.os.StrictMode;
 import com.squareup.leakcanary.LeakCanary;
+import com.squareup.leakcanary.RefWatcher;
 
 public class ExampleApplication extends Application {
 
-  @Override public void onCreate() {
+  public static RefWatcher getRefWatcher(Context context) {
+    ExampleApplication application = (ExampleApplication) context.getApplicationContext();
+    return application.refWatcher;
+  }
+
+  private RefWatcher refWatcher;
+
+  @Override
+  public void onCreate() {
     super.onCreate();
     if (LeakCanary.isInAnalyzerProcess(this)) {
       // This process is dedicated to LeakCanary for heap analysis.
diff --git a/leakcanary-sample/src/main/java/com/example/leakcanary/MainActivity.java b/leakcanary-sample/src/main/java/com/example/leakcanary/MainActivity.java
index 870f59b1..0973b5d3 100644
--- a/leakcanary-sample/src/main/java/com/example/leakcanary/MainActivity.java
+++ b/leakcanary-sample/src/main/java/com/example/leakcanary/MainActivity.java
@@ -21,15 +21,22 @@
 import android.os.SystemClock;
 import android.view.View;
 
+import com.squareup.leakcanary.RefWatcher;
+
 public class MainActivity extends Activity {
 
-  @Override protected void onCreate(Bundle savedInstanceState) {
+  @Override
+  protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.main_activity);
 
+    RefWatcher refWatcher = ExampleApplication.getRefWatcher(this);
+    refWatcher.watch(this);
+
     View button = findViewById(R.id.async_task);
     button.setOnClickListener(new View.OnClickListener() {
-      @Override public void onClick(View v) {
+      @Override
+      public void onClick(View v) {
         startAsyncTask();
       }
     });
@@ -40,7 +47,8 @@ void startAsyncTask() {
     // class MainActivity. If the activity gets destroyed before the task finishes (e.g. rotation),
     // the activity instance will leak.
     new AsyncTask<Void, Void, Void>() {
-      @Override protected Void doInBackground(Void... params) {
+      @Override
+      protected Void doInBackground(Void... params) {
         // Do some slow work in background
         SystemClock.sleep(20000);
         return null;
diff --git a/leakmem/build.gradle b/leakmem/build.gradle
new file mode 100644
index 00000000..09864a06
--- /dev/null
+++ b/leakmem/build.gradle
@@ -0,0 +1,28 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 23
+    buildToolsVersion '25.0.0'
+
+    defaultConfig {
+        applicationId "org.geek.leakmemory"
+        minSdkVersion 14
+        targetSdkVersion 23
+        versionCode 1
+        versionName "1.0"
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    testCompile 'junit:junit:4.12'
+    compile 'com.android.support:appcompat-v7:23.0.1'
+
+    compile project(':leakcanary-android')
+}
diff --git a/leakmem/proguard-rules.pro b/leakmem/proguard-rules.pro
new file mode 100644
index 00000000..2a48cf01
--- /dev/null
+++ b/leakmem/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /Users/zhanggeng/android_tools/android_studio/android-sdk-macosx/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/leakmem/src/main/AndroidManifest.xml b/leakmem/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..0e14c305
--- /dev/null
+++ b/leakmem/src/main/AndroidManifest.xml
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="org.geek.leakmemory" >
+
+    <application
+        android:allowBackup="true"
+        android:name=".ExampleApplication"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme" >
+        <activity android:name=".MainActivity" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+
+        <service
+            android:name="com.squareup.leakcanary.internal.HeapAnalyzerService"
+            android:enabled="false"
+            android:process=":leakcanary" />
+        <service
+            android:name="com.squareup.leakcanary.DisplayLeakService"
+            android:enabled="false" />
+
+        <activity
+            android:name="com.squareup.leakcanary.internal.DisplayLeakActivity"
+            android:enabled="false"
+            >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+
+    </application>
+
+</manifest>
diff --git a/leakmem/src/main/java/org/geek/leakmemory/ExampleApplication.java b/leakmem/src/main/java/org/geek/leakmemory/ExampleApplication.java
new file mode 100644
index 00000000..165b44fa
--- /dev/null
+++ b/leakmem/src/main/java/org/geek/leakmemory/ExampleApplication.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.geek.leakmemory;
+
+import android.app.Application;
+import android.content.Context;
+import android.os.StrictMode;
+
+import com.squareup.leakcanary.LeakCanary;
+import com.squareup.leakcanary.RefWatcher;
+
+import static android.os.Build.VERSION.SDK_INT;
+import static android.os.Build.VERSION_CODES.GINGERBREAD;
+
+public class ExampleApplication extends Application {
+
+    public static RefWatcher getRefWatcher(Context context) {
+        ExampleApplication application = (ExampleApplication) context
+                .getApplicationContext();
+        return application.refWatcher;
+    }
+
+    private RefWatcher refWatcher;
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        enabledStrictMode();
+        refWatcher = LeakCanary.install(this);
+    }
+
+    private void enabledStrictMode() {
+        if (SDK_INT >= GINGERBREAD) {
+            StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder() //
+                    .detectAll() //
+                    .penaltyLog() //
+                    .penaltyDeath() //
+                    .build());
+        }
+    }
+}
diff --git a/leakmem/src/main/java/org/geek/leakmemory/MainActivity.java b/leakmem/src/main/java/org/geek/leakmemory/MainActivity.java
new file mode 100644
index 00000000..6cca1640
--- /dev/null
+++ b/leakmem/src/main/java/org/geek/leakmemory/MainActivity.java
@@ -0,0 +1,55 @@
+package org.geek.leakmemory;
+
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.os.SystemClock;
+import android.support.v7.app.AppCompatActivity;
+import android.view.View;
+import android.widget.TextView;
+
+import com.squareup.leakcanary.RefWatcher;
+
+
+public class MainActivity extends AppCompatActivity {
+
+    private TextView textView;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+
+        RefWatcher refWatcher = ExampleApplication.getRefWatcher(this);
+        refWatcher.watch(this);
+
+        textView = (TextView) findViewById(R.id.tv);
+        textView.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startAsyncTask();
+            }
+        });
+
+    }
+
+    private void async() {
+
+        startAsyncTask();
+    }
+
+    private void startAsyncTask() {
+        // This async task is an anonymous class and therefore has a hidden reference to the outer
+        // class MainActivity. If the activity gets destroyed before the task finishes (e.g. rotation),
+        // the activity instance will leak.
+        new AsyncTask<Void, Void, Void>() {
+            @Override
+            protected Void doInBackground(Void... params) {
+                // Do some slow work in background
+                SystemClock.sleep(20000);
+                return null;
+            }
+        }.execute();
+    }
+
+
+}
diff --git a/leakmem/src/main/res/layout/activity_main.xml b/leakmem/src/main/res/layout/activity_main.xml
new file mode 100644
index 00000000..a5e461f4
--- /dev/null
+++ b/leakmem/src/main/res/layout/activity_main.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    tools:context=".MainActivity">
+
+    <TextView
+        android:id="@+id/tv"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Hello leak"
+        android:layout_centerVertical="true"
+        android:layout_centerHorizontal="true" />
+</RelativeLayout>
diff --git a/leakmem/src/main/res/mipmap-hdpi/ic_launcher.png b/leakmem/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 00000000..cde69bcc
Binary files /dev/null and b/leakmem/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/leakmem/src/main/res/mipmap-mdpi/ic_launcher.png b/leakmem/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 00000000..c133a0cb
Binary files /dev/null and b/leakmem/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/leakmem/src/main/res/mipmap-xhdpi/ic_launcher.png b/leakmem/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 00000000..bfa42f0e
Binary files /dev/null and b/leakmem/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/leakmem/src/main/res/mipmap-xxhdpi/ic_launcher.png b/leakmem/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 00000000..324e72cd
Binary files /dev/null and b/leakmem/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/leakmem/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/leakmem/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 00000000..aee44e13
Binary files /dev/null and b/leakmem/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/leakmem/src/main/res/values-w820dp/dimens.xml b/leakmem/src/main/res/values-w820dp/dimens.xml
new file mode 100644
index 00000000..63fc8164
--- /dev/null
+++ b/leakmem/src/main/res/values-w820dp/dimens.xml
@@ -0,0 +1,6 @@
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
diff --git a/leakmem/src/main/res/values/colors.xml b/leakmem/src/main/res/values/colors.xml
new file mode 100644
index 00000000..3ab3e9cb
--- /dev/null
+++ b/leakmem/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+</resources>
diff --git a/leakmem/src/main/res/values/dimens.xml b/leakmem/src/main/res/values/dimens.xml
new file mode 100644
index 00000000..47c82246
--- /dev/null
+++ b/leakmem/src/main/res/values/dimens.xml
@@ -0,0 +1,5 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+</resources>
diff --git a/leakmem/src/main/res/values/strings.xml b/leakmem/src/main/res/values/strings.xml
new file mode 100644
index 00000000..513ba53b
--- /dev/null
+++ b/leakmem/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">LeakMemory</string>
+</resources>
diff --git a/leakmem/src/main/res/values/styles.xml b/leakmem/src/main/res/values/styles.xml
new file mode 100644
index 00000000..5885930d
--- /dev/null
+++ b/leakmem/src/main/res/values/styles.xml
@@ -0,0 +1,11 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+</resources>
diff --git a/settings.gradle b/settings.gradle
index 73da17f3..6cc9eed4 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -3,3 +3,4 @@ include ':leakcanary-analyzer'
 include ':leakcanary-android'
 include ':leakcanary-android-no-op'
 include ':leakcanary-sample'
+include ':leakmem'
