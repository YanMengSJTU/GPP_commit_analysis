diff --git a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HeapAnalyzer.java b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HeapAnalyzer.java
index 2b2238f9..1441892b 100644
--- a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HeapAnalyzer.java
+++ b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HeapAnalyzer.java
@@ -173,12 +173,14 @@ private Instance findLeakingReference(String key, Snapshot snapshot) {
   }
 
   private Set<String> keysForSnapshot(Snapshot snapshot) {
-    ClassObj refClass = snapshot.findClass(KeyedWeakReference.class.getName());
     Set<String> keysFound = new HashSet<>();
-    for (Instance instance : refClass.getInstancesList()) {
-      List<ClassInstance.FieldValue> values = classInstanceValues(instance);
-      String keyCandidate = asString(fieldValue(values, "key"));
-      keysFound.add(keyCandidate);
+    ClassObj refClass = snapshot.findClass(KeyedWeakReference.class.getName());
+    if (refClass != null) {
+      for (Instance instance : refClass.getInstancesList()) {
+        List<ClassInstance.FieldValue> values = classInstanceValues(instance);
+        String keyCandidate = asString(fieldValue(values, "key"));
+        keysFound.add(keyCandidate);
+      }
     }
     return keysFound;
   }
diff --git a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/RunAnalyzer.java b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/RunAnalyzer.java
index 72e7f960..f0a0351f 100644
--- a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/RunAnalyzer.java
+++ b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/RunAnalyzer.java
@@ -48,9 +48,11 @@ void run() {
     List<AnalysisResult> results = heapAnalyzer.checkForLeaks(file);
     for (AnalysisResult result : results) {
       if (result.failure != null) {
+        System.out.println("result parse error:");
         result.failure.printStackTrace();
       }
       if (result.leakTrace != null) {
+        System.out.println("found leak:");
         System.out.println(result.leakTrace);
       }
     }
