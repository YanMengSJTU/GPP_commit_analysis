diff --git a/docs/api/leakcanary-android-core/alltypes/index.md b/docs/api/leakcanary-android-core/alltypes/index.md
new file mode 100644
index 00000000..d8a17d88
--- /dev/null
+++ b/docs/api/leakcanary-android-core/alltypes/index.md
@@ -0,0 +1,9 @@
+
+
+### All Types
+
+| Name | Summary |
+|---|---|
+| [leakcanary.DefaultOnHeapAnalyzedListener](../leakcanary/-default-on-heap-analyzed-listener/index.md) | Default [OnHeapAnalyzedListener](../leakcanary/-on-heap-analyzed-listener/index.md) implementation, which will store the analysis to disk and show a notification summarizing the result. |
+| [leakcanary.LeakCanary](../leakcanary/-leak-canary/index.md) | The entry point API for LeakCanary. LeakCanary builds on top of [AppWatcher](#). AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. |
+| [leakcanary.OnHeapAnalyzedListener](../leakcanary/-on-heap-analyzed-listener/index.md) | Listener set in [LeakCanary.Config](../leakcanary/-leak-canary/-config/index.md) and called by LeakCanary on a background thread when the heap analysis is complete. |
diff --git a/docs/api/leakcanary-android-core/index.md b/docs/api/leakcanary-android-core/index.md
new file mode 100644
index 00000000..d953c84f
--- /dev/null
+++ b/docs/api/leakcanary-android-core/index.md
@@ -0,0 +1,11 @@
+[leakcanary-android-core](./index.md)
+
+### Packages
+
+| Name | Summary |
+|---|---|
+| [leakcanary](leakcanary/index.md) |  |
+
+### Index
+
+[All Types](alltypes/index.md)
\ No newline at end of file
diff --git a/docs/api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/-init-.md b/docs/api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/-init-.md
new file mode 100644
index 00000000..db18098c
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/-init-.md
@@ -0,0 +1,9 @@
+[leakcanary-android-core](../../index.md) / [leakcanary](../index.md) / [DefaultOnHeapAnalyzedListener](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`DefaultOnHeapAnalyzedListener(application: Application)`
+
+Default [OnHeapAnalyzedListener](../-on-heap-analyzed-listener/index.md) implementation, which will store the analysis to disk and
+show a notification summarizing the result.
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/create.md b/docs/api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/create.md
new file mode 100644
index 00000000..e263a048
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/create.md
@@ -0,0 +1,5 @@
+[leakcanary-android-core](../../index.md) / [leakcanary](../index.md) / [DefaultOnHeapAnalyzedListener](index.md) / [create](./create.md)
+
+# create
+
+`fun create(): `[`OnHeapAnalyzedListener`](../-on-heap-analyzed-listener/index.md)
\ No newline at end of file
diff --git a/docs/api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/index.md b/docs/api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/index.md
new file mode 100644
index 00000000..85ae5b0c
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/index.md
@@ -0,0 +1,26 @@
+[leakcanary-android-core](../../index.md) / [leakcanary](../index.md) / [DefaultOnHeapAnalyzedListener](./index.md)
+
+# DefaultOnHeapAnalyzedListener
+
+`class DefaultOnHeapAnalyzedListener : `[`OnHeapAnalyzedListener`](../-on-heap-analyzed-listener/index.md)
+
+Default [OnHeapAnalyzedListener](../-on-heap-analyzed-listener/index.md) implementation, which will store the analysis to disk and
+show a notification summarizing the result.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `DefaultOnHeapAnalyzedListener(application: Application)`<br>Default [OnHeapAnalyzedListener](../-on-heap-analyzed-listener/index.md) implementation, which will store the analysis to disk and show a notification summarizing the result. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [onHeapAnalyzed](on-heap-analyzed.md) | `fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+
+### Companion Object Functions
+
+| Name | Summary |
+|---|---|
+| [create](create.md) | `fun create(): `[`OnHeapAnalyzedListener`](../-on-heap-analyzed-listener/index.md) |
diff --git a/docs/api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/on-heap-analyzed.md b/docs/api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/on-heap-analyzed.md
new file mode 100644
index 00000000..d899c0a0
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/on-heap-analyzed.md
@@ -0,0 +1,12 @@
+[leakcanary-android-core](../../index.md) / [leakcanary](../index.md) / [DefaultOnHeapAnalyzedListener](index.md) / [onHeapAnalyzed](./on-heap-analyzed.md)
+
+# onHeapAnalyzed
+
+`fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Overrides [OnHeapAnalyzedListener.onHeapAnalyzed](../-on-heap-analyzed-listener/on-heap-analyzed.md)
+
+**See Also**
+
+[OnHeapAnalyzedListener](../-on-heap-analyzed-listener/index.md)
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/-init-.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/-init-.md
new file mode 100644
index 00000000..e5aad7fb
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/-init-.md
@@ -0,0 +1,12 @@
+[leakcanary-android-core](../../../index.md) / [leakcanary](../../index.md) / [LeakCanary](../index.md) / [Config](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`Config(dumpHeap: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = true, dumpHeapWhenDebugging: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = false, retainedVisibleThreshold: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)` = 5, referenceMatchers: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<ReferenceMatcher> = AndroidReferenceMatchers.appDefaults, objectInspectors: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<ObjectInspector> = AndroidObjectInspectors.appDefaults, onHeapAnalyzedListener: `[`OnHeapAnalyzedListener`](../../-on-heap-analyzed-listener/index.md)` = DefaultOnHeapAnalyzedListener.create(), computeRetainedHeapSize: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = true, maxStoredHeapDumps: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)` = 7, requestWriteExternalStoragePermission: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = false, useExperimentalLeakFinders: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = false)`
+
+LeakCanary configuration data class. Properties can be updated via [copy](#).
+
+**See Also**
+
+[config](../config.md)
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/compute-retained-heap-size.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/compute-retained-heap-size.md
new file mode 100644
index 00000000..9bd08722
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/compute-retained-heap-size.md
@@ -0,0 +1,16 @@
+[leakcanary-android-core](../../../index.md) / [leakcanary](../../index.md) / [LeakCanary](../index.md) / [Config](index.md) / [computeRetainedHeapSize](./compute-retained-heap-size.md)
+
+# computeRetainedHeapSize
+
+`val computeRetainedHeapSize: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Whether to compute the retained heap size, which is the total number of bytes in memory that
+would be reclaimed if the detected leaks didn't happen. This includes native memory
+associated to Java objects (e.g. Android bitmaps).
+
+Computing the retained heap size can slow down the analysis because it requires navigating
+from GC roots through the entire object graph, whereas [shark.HeapAnalyzer](#) would otherwise
+stop as soon as all leaking instances are found.
+
+Defaults to true.
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap-when-debugging.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap-when-debugging.md
new file mode 100644
index 00000000..4ad3289f
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap-when-debugging.md
@@ -0,0 +1,12 @@
+[leakcanary-android-core](../../../index.md) / [leakcanary](../../index.md) / [LeakCanary](../index.md) / [Config](index.md) / [dumpHeapWhenDebugging](./dump-heap-when-debugging.md)
+
+# dumpHeapWhenDebugging
+
+`val dumpHeapWhenDebugging: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+If [dumpHeapWhenDebugging](./dump-heap-when-debugging.md) is false then LeakCanary will not dump the heap
+when the debugger is attached. The debugger can create temporary memory leaks (for instance
+if a thread is blocked on a breakpoint).
+
+Defaults to false.
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap.md
new file mode 100644
index 00000000..699e0a1e
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap.md
@@ -0,0 +1,12 @@
+[leakcanary-android-core](../../../index.md) / [leakcanary](../../index.md) / [LeakCanary](../index.md) / [Config](index.md) / [dumpHeap](./dump-heap.md)
+
+# dumpHeap
+
+`val dumpHeap: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Whether LeakCanary should dump the heap when enough retained instances are found. This needs
+to be true for LeakCanary to work, but sometimes you may want to temporarily disable
+LeakCanary (e.g. for a product demo).
+
+Defaults to true.
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/index.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/index.md
new file mode 100644
index 00000000..e69d9f9f
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/index.md
@@ -0,0 +1,32 @@
+[leakcanary-android-core](../../../index.md) / [leakcanary](../../index.md) / [LeakCanary](../index.md) / [Config](./index.md)
+
+# Config
+
+`data class Config`
+
+LeakCanary configuration data class. Properties can be updated via [copy](#).
+
+**See Also**
+
+[config](../config.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `Config(dumpHeap: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = true, dumpHeapWhenDebugging: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = false, retainedVisibleThreshold: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)` = 5, referenceMatchers: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<ReferenceMatcher> = AndroidReferenceMatchers.appDefaults, objectInspectors: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<ObjectInspector> = AndroidObjectInspectors.appDefaults, onHeapAnalyzedListener: `[`OnHeapAnalyzedListener`](../../-on-heap-analyzed-listener/index.md)` = DefaultOnHeapAnalyzedListener.create(), computeRetainedHeapSize: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = true, maxStoredHeapDumps: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)` = 7, requestWriteExternalStoragePermission: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = false, useExperimentalLeakFinders: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = false)`<br>LeakCanary configuration data class. Properties can be updated via [copy](#). |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [computeRetainedHeapSize](compute-retained-heap-size.md) | `val computeRetainedHeapSize: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn't happen. This includes native memory associated to Java objects (e.g. Android bitmaps). |
+| [dumpHeap](dump-heap.md) | `val dumpHeap: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Whether LeakCanary should dump the heap when enough retained instances are found. This needs to be true for LeakCanary to work, but sometimes you may want to temporarily disable LeakCanary (e.g. for a product demo). |
+| [dumpHeapWhenDebugging](dump-heap-when-debugging.md) | `val dumpHeapWhenDebugging: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>If [dumpHeapWhenDebugging](dump-heap-when-debugging.md) is false then LeakCanary will not dump the heap when the debugger is attached. The debugger can create temporary memory leaks (for instance if a thread is blocked on a breakpoint). |
+| [maxStoredHeapDumps](max-stored-heap-dumps.md) | `val maxStoredHeapDumps: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>How many heap dumps are kept on the Android device for this app package. When this threshold is reached LeakCanary deletes the older heap dumps. As several heap dumps may be enqueued you should avoid going down to 1 or 2. |
+| [objectInspectors](object-inspectors.md) | `val objectInspectors: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<ObjectInspector>`<br>List of [ObjectInspector](#) that provide LeakCanary with insights about objects found in the heap. You can create your own [ObjectInspector](#) implementations, and also add a [shark.AppSingletonInspector](#) instance created with the list of internal singletons. |
+| [onHeapAnalyzedListener](on-heap-analyzed-listener.md) | `val onHeapAnalyzedListener: `[`OnHeapAnalyzedListener`](../../-on-heap-analyzed-listener/index.md)<br>Called on a background thread when the heap analysis is complete. If you want leaks to be added to the activity that lists leaks, make sure to delegate calls to a [DefaultOnHeapAnalyzedListener](../../-default-on-heap-analyzed-listener/index.md). |
+| [referenceMatchers](reference-matchers.md) | `val referenceMatchers: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<ReferenceMatcher>`<br>Known patterns of references in the heap, lister here either to ignore them ([IgnoredReferenceMatcher](#)) or to mark them as library leaks ([LibraryLeakReferenceMatcher](#)). |
+| [requestWriteExternalStoragePermission](request-write-external-storage-permission.md) | `val requestWriteExternalStoragePermission: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>LeakCanary always attempts to store heap dumps on the external storage if the WRITE_EXTERNAL_STORAGE is already granted, and otherwise uses the app storage. If the WRITE_EXTERNAL_STORAGE permission is not granted and [requestWriteExternalStoragePermission](request-write-external-storage-permission.md) is true, then LeakCanary will display a notification to ask for that permission. |
+| [retainedVisibleThreshold](retained-visible-threshold.md) | `val retainedVisibleThreshold: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>When the app is visible, LeakCanary will wait for at least [retainedVisibleThreshold](retained-visible-threshold.md) retained instances before dumping the heap. Dumping the heap freezes the UI and can be frustrating for developers who are trying to work. This is especially frustrating as the Android Framework has a number of leaks that cannot easily be fixed. |
+| [useExperimentalLeakFinders](use-experimental-leak-finders.md) | `val useExperimentalLeakFinders: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>When true, [objectInspectors](object-inspectors.md) are used to find leaks instead of only checking instances tracked by [KeyedWeakReference](#). This leads to finding more leaks and shorter leak traces. However this also means the same leaking instances will be found in every heap dump for a given process life. |
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/max-stored-heap-dumps.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/max-stored-heap-dumps.md
new file mode 100644
index 00000000..932c8670
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/max-stored-heap-dumps.md
@@ -0,0 +1,12 @@
+[leakcanary-android-core](../../../index.md) / [leakcanary](../../index.md) / [LeakCanary](../index.md) / [Config](index.md) / [maxStoredHeapDumps](./max-stored-heap-dumps.md)
+
+# maxStoredHeapDumps
+
+`val maxStoredHeapDumps: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+How many heap dumps are kept on the Android device for this app package. When this threshold
+is reached LeakCanary deletes the older heap dumps. As several heap dumps may be enqueued
+you should avoid going down to 1 or 2.
+
+Defaults to 7.
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/object-inspectors.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/object-inspectors.md
new file mode 100644
index 00000000..fa9daa04
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/object-inspectors.md
@@ -0,0 +1,12 @@
+[leakcanary-android-core](../../../index.md) / [leakcanary](../../index.md) / [LeakCanary](../index.md) / [Config](index.md) / [objectInspectors](./object-inspectors.md)
+
+# objectInspectors
+
+`val objectInspectors: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<ObjectInspector>`
+
+List of [ObjectInspector](#) that provide LeakCanary with insights about objects found in the
+heap. You can create your own [ObjectInspector](#) implementations, and also add
+a [shark.AppSingletonInspector](#) instance created with the list of internal singletons.
+
+Defaults to [AndroidObjectInspectors.appDefaults](#)
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/on-heap-analyzed-listener.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/on-heap-analyzed-listener.md
new file mode 100644
index 00000000..7f9c0a00
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/on-heap-analyzed-listener.md
@@ -0,0 +1,12 @@
+[leakcanary-android-core](../../../index.md) / [leakcanary](../../index.md) / [LeakCanary](../index.md) / [Config](index.md) / [onHeapAnalyzedListener](./on-heap-analyzed-listener.md)
+
+# onHeapAnalyzedListener
+
+`val onHeapAnalyzedListener: `[`OnHeapAnalyzedListener`](../../-on-heap-analyzed-listener/index.md)
+
+Called on a background thread when the heap analysis is complete.
+If you want leaks to be added to the activity that lists leaks, make sure to delegate
+calls to a [DefaultOnHeapAnalyzedListener](../../-default-on-heap-analyzed-listener/index.md).
+
+Defaults to [DefaultOnHeapAnalyzedListener](../../-default-on-heap-analyzed-listener/index.md)
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/reference-matchers.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/reference-matchers.md
new file mode 100644
index 00000000..cd915e79
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/reference-matchers.md
@@ -0,0 +1,16 @@
+[leakcanary-android-core](../../../index.md) / [leakcanary](../../index.md) / [LeakCanary](../index.md) / [Config](index.md) / [referenceMatchers](./reference-matchers.md)
+
+# referenceMatchers
+
+`val referenceMatchers: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<ReferenceMatcher>`
+
+Known patterns of references in the heap, lister here either to ignore them
+([IgnoredReferenceMatcher](#)) or to mark them as library leaks ([LibraryLeakReferenceMatcher](#)).
+
+When adding your own custom [LibraryLeakReferenceMatcher](#) instances, you'll most
+likely want to set [LibraryLeakReferenceMatcher.patternApplies](#) with a filter that checks
+for the Android OS version and manufacturer. The build information can be obtained by calling
+[shark.AndroidBuildMirror.fromHeapGraph](#).
+
+Defaults to [AndroidReferenceMatchers.appDefaults](#)
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/request-write-external-storage-permission.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/request-write-external-storage-permission.md
new file mode 100644
index 00000000..d5550495
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/request-write-external-storage-permission.md
@@ -0,0 +1,14 @@
+[leakcanary-android-core](../../../index.md) / [leakcanary](../../index.md) / [LeakCanary](../index.md) / [Config](index.md) / [requestWriteExternalStoragePermission](./request-write-external-storage-permission.md)
+
+# requestWriteExternalStoragePermission
+
+`val requestWriteExternalStoragePermission: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+LeakCanary always attempts to store heap dumps on the external storage if the
+WRITE_EXTERNAL_STORAGE is already granted, and otherwise uses the app storage.
+If the WRITE_EXTERNAL_STORAGE permission is not granted and
+[requestWriteExternalStoragePermission](./request-write-external-storage-permission.md) is true, then LeakCanary will display a notification
+to ask for that permission.
+
+Defaults to false because that permission notification can be annoying.
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/retained-visible-threshold.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/retained-visible-threshold.md
new file mode 100644
index 00000000..ab4b347b
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/retained-visible-threshold.md
@@ -0,0 +1,22 @@
+[leakcanary-android-core](../../../index.md) / [leakcanary](../../index.md) / [LeakCanary](../index.md) / [Config](index.md) / [retainedVisibleThreshold](./retained-visible-threshold.md)
+
+# retainedVisibleThreshold
+
+`val retainedVisibleThreshold: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+When the app is visible, LeakCanary will wait for at least
+[retainedVisibleThreshold](./retained-visible-threshold.md) retained instances before dumping the heap. Dumping the heap
+freezes the UI and can be frustrating for developers who are trying to work. This is
+especially frustrating as the Android Framework has a number of leaks that cannot easily
+be fixed.
+
+When the app becomes invisible, LeakCanary dumps the heap after
+[AppWatcher.Config.watchDurationMillis](#) ms.
+
+The app is considered visible if it has at least one activity in started state.
+
+A higher threshold means LeakCanary will dump the heap less often, therefore it won't be
+bothering developers as much but it could miss some leaks.
+
+Defaults to 5.
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/use-experimental-leak-finders.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/use-experimental-leak-finders.md
new file mode 100644
index 00000000..eaf321e0
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/-config/use-experimental-leak-finders.md
@@ -0,0 +1,13 @@
+[leakcanary-android-core](../../../index.md) / [leakcanary](../../index.md) / [LeakCanary](../index.md) / [Config](index.md) / [useExperimentalLeakFinders](./use-experimental-leak-finders.md)
+
+# useExperimentalLeakFinders
+
+`val useExperimentalLeakFinders: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+When true, [objectInspectors](object-inspectors.md) are used to find leaks instead of only checking instances
+tracked by [KeyedWeakReference](#). This leads to finding more leaks and shorter leak traces.
+However this also means the same leaking instances will be found in every heap dump for a
+given process life.
+
+Defaults to false.
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/config.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/config.md
new file mode 100644
index 00000000..d7cf349f
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/config.md
@@ -0,0 +1,13 @@
+[leakcanary-android-core](../../index.md) / [leakcanary](../index.md) / [LeakCanary](index.md) / [config](./config.md)
+
+# config
+
+`var config: `[`LeakCanary.Config`](-config/index.md)
+
+The current LeakCanary configuration. Can be updated at any time, usually by replacing it with
+a mutated copy, e.g.:
+
+```
+LeakCanary.config = LeakCanary.config.copy(computeRetainedHeapSize = true)
+```
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/dump-heap.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/dump-heap.md
new file mode 100644
index 00000000..71c4ccc4
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/dump-heap.md
@@ -0,0 +1,10 @@
+[leakcanary-android-core](../../index.md) / [leakcanary](../index.md) / [LeakCanary](index.md) / [dumpHeap](./dump-heap.md)
+
+# dumpHeap
+
+`fun dumpHeap(): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Immediately triggers a heap dump and analysis, if there is at least one retained instance
+tracked by [AppWatcher.objectWatcher](#). If there are no retained instances then the heap will not
+be dumped and a notification will be shown instead.
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/index.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/index.md
new file mode 100644
index 00000000..c957571f
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/index.md
@@ -0,0 +1,31 @@
+[leakcanary-android-core](../../index.md) / [leakcanary](../index.md) / [LeakCanary](./index.md)
+
+# LeakCanary
+
+`object LeakCanary`
+
+The entry point API for LeakCanary. LeakCanary builds on top of [AppWatcher](#). AppWatcher
+notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and
+publishes the results.
+
+LeakCanary can be configured by updating [config](config.md).
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [Config](-config/index.md) | `data class Config`<br>LeakCanary configuration data class. Properties can be updated via [copy](#). |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [config](config.md) | `var config: `[`LeakCanary.Config`](-config/index.md)<br>The current LeakCanary configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [dumpHeap](dump-heap.md) | `fun dumpHeap(): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Immediately triggers a heap dump and analysis, if there is at least one retained instance tracked by [AppWatcher.objectWatcher](#). If there are no retained instances then the heap will not be dumped and a notification will be shown instead. |
+| [newLeakDisplayActivityIntent](new-leak-display-activity-intent.md) | `fun newLeakDisplayActivityIntent(): Intent`<br>Returns a new [Intent](#) that can be used to programmatically launch the leak display activity. |
+| [showLeakDisplayActivityLauncherIcon](show-leak-display-activity-launcher-icon.md) | `fun showLeakDisplayActivityLauncherIcon(showLauncherIcon: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Dynamically shows / hides the launcher icon for the leak display activity. Note: you can change the default value by overriding the leak_canary_add_launcher_icon boolean resource: |
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/new-leak-display-activity-intent.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/new-leak-display-activity-intent.md
new file mode 100644
index 00000000..e219909d
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/new-leak-display-activity-intent.md
@@ -0,0 +1,8 @@
+[leakcanary-android-core](../../index.md) / [leakcanary](../index.md) / [LeakCanary](index.md) / [newLeakDisplayActivityIntent](./new-leak-display-activity-intent.md)
+
+# newLeakDisplayActivityIntent
+
+`fun newLeakDisplayActivityIntent(): Intent`
+
+Returns a new [Intent](#) that can be used to programmatically launch the leak display activity.
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-leak-canary/show-leak-display-activity-launcher-icon.md b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/show-leak-display-activity-launcher-icon.md
new file mode 100644
index 00000000..05bd1d95
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-leak-canary/show-leak-display-activity-launcher-icon.md
@@ -0,0 +1,17 @@
+[leakcanary-android-core](../../index.md) / [leakcanary](../index.md) / [LeakCanary](index.md) / [showLeakDisplayActivityLauncherIcon](./show-leak-display-activity-launcher-icon.md)
+
+# showLeakDisplayActivityLauncherIcon
+
+`fun showLeakDisplayActivityLauncherIcon(showLauncherIcon: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Dynamically shows / hides the launcher icon for the leak display activity.
+Note: you can change the default value by overriding the leak_canary_add_launcher_icon
+boolean resource:
+
+```
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <bool name="leak_canary_add_launcher_icon">false</bool>
+</resources>
+```
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/index.md b/docs/api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/index.md
new file mode 100644
index 00000000..b9016e7c
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/index.md
@@ -0,0 +1,28 @@
+[leakcanary-android-core](../../index.md) / [leakcanary](../index.md) / [OnHeapAnalyzedListener](./index.md)
+
+# OnHeapAnalyzedListener
+
+`interface OnHeapAnalyzedListener`
+
+Listener set in [LeakCanary.Config](../-leak-canary/-config/index.md) and called by LeakCanary on a background thread when the
+heap analysis is complete.
+
+You can create a [OnHeapAnalyzedListener](./index.md) from a lambda by calling [invoke](invoke.md).
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [onHeapAnalyzed](on-heap-analyzed.md) | `abstract fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+
+### Companion Object Functions
+
+| Name | Summary |
+|---|---|
+| [invoke](invoke.md) | `operator fun invoke(block: (HeapAnalysis) -> `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)`): `[`OnHeapAnalyzedListener`](./index.md)<br>Utility function to create a [OnHeapAnalyzedListener](./index.md) from the passed in [block](invoke.md#leakcanary.OnHeapAnalyzedListener.Companion$invoke(kotlin.Function1((shark.HeapAnalysis, kotlin.Unit)))/block) lambda instead of using the anonymous `object : OnHeapAnalyzedListener` syntax. |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [DefaultOnHeapAnalyzedListener](../-default-on-heap-analyzed-listener/index.md) | `class DefaultOnHeapAnalyzedListener : `[`OnHeapAnalyzedListener`](./index.md)<br>Default [OnHeapAnalyzedListener](./index.md) implementation, which will store the analysis to disk and show a notification summarizing the result. |
diff --git a/docs/api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/invoke.md b/docs/api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/invoke.md
new file mode 100644
index 00000000..b24934d0
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/invoke.md
@@ -0,0 +1,17 @@
+[leakcanary-android-core](../../index.md) / [leakcanary](../index.md) / [OnHeapAnalyzedListener](index.md) / [invoke](./invoke.md)
+
+# invoke
+
+`inline operator fun invoke(crossinline block: (HeapAnalysis) -> `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)`): `[`OnHeapAnalyzedListener`](index.md)
+
+Utility function to create a [OnHeapAnalyzedListener](index.md) from the passed in [block](invoke.md#leakcanary.OnHeapAnalyzedListener.Companion$invoke(kotlin.Function1((shark.HeapAnalysis, kotlin.Unit)))/block) lambda
+instead of using the anonymous `object : OnHeapAnalyzedListener` syntax.
+
+Usage:
+
+``` kotlin
+val listener = OnHeapAnalyzedListener {
+
+}
+```
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/on-heap-analyzed.md b/docs/api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/on-heap-analyzed.md
new file mode 100644
index 00000000..9c9ab3e0
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/on-heap-analyzed.md
@@ -0,0 +1,10 @@
+[leakcanary-android-core](../../index.md) / [leakcanary](../index.md) / [OnHeapAnalyzedListener](index.md) / [onHeapAnalyzed](./on-heap-analyzed.md)
+
+# onHeapAnalyzed
+
+`abstract fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+**See Also**
+
+[OnHeapAnalyzedListener](index.md)
+
diff --git a/docs/api/leakcanary-android-core/leakcanary/index.md b/docs/api/leakcanary-android-core/leakcanary/index.md
new file mode 100644
index 00000000..ef6a0bad
--- /dev/null
+++ b/docs/api/leakcanary-android-core/leakcanary/index.md
@@ -0,0 +1,11 @@
+[leakcanary-android-core](../index.md) / [leakcanary](./index.md)
+
+## Package leakcanary
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [DefaultOnHeapAnalyzedListener](-default-on-heap-analyzed-listener/index.md) | `class DefaultOnHeapAnalyzedListener : `[`OnHeapAnalyzedListener`](-on-heap-analyzed-listener/index.md)<br>Default [OnHeapAnalyzedListener](-on-heap-analyzed-listener/index.md) implementation, which will store the analysis to disk and show a notification summarizing the result. |
+| [LeakCanary](-leak-canary/index.md) | `object LeakCanary`<br>The entry point API for LeakCanary. LeakCanary builds on top of [AppWatcher](#). AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. |
+| [OnHeapAnalyzedListener](-on-heap-analyzed-listener/index.md) | `interface OnHeapAnalyzedListener`<br>Listener set in [LeakCanary.Config](-leak-canary/-config/index.md) and called by LeakCanary on a background thread when the heap analysis is complete. |
diff --git a/docs/api/leakcanary-android-core/package-list b/docs/api/leakcanary-android-core/package-list
new file mode 100644
index 00000000..e886de54
--- /dev/null
+++ b/docs/api/leakcanary-android-core/package-list
@@ -0,0 +1,4 @@
+$dokka.format:gfm
+$dokka.linkExtension:md
+
+leakcanary
diff --git a/docs/api/leakcanary-android-instrumentation/alltypes/index.md b/docs/api/leakcanary-android-instrumentation/alltypes/index.md
new file mode 100644
index 00000000..56d2bef1
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/alltypes/index.md
@@ -0,0 +1,10 @@
+
+
+### All Types
+
+| Name | Summary |
+|---|---|
+| [leakcanary.FailAnnotatedTestOnLeakRunListener](../leakcanary/-fail-annotated-test-on-leak-run-listener/index.md) | A JUnit [RunListener](#) extending [FailTestOnLeakRunListener](../leakcanary/-fail-test-on-leak-run-listener/index.md) to detecting memory leaks in Android instrumentation tests only when the [FailTestOnLeak](../leakcanary/-fail-test-on-leak/index.md) annotation is used. |
+| [leakcanary.FailTestOnLeak](../leakcanary/-fail-test-on-leak/index.md) | An [Annotation](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-annotation/index.html) class to be used in conjunction with [FailAnnotatedTestOnLeakRunListener](../leakcanary/-fail-annotated-test-on-leak-run-listener/index.md) for detecting memory leaks. When using [FailAnnotatedTestOnLeakRunListener](../leakcanary/-fail-annotated-test-on-leak-run-listener/index.md), the tests should be annotated with this class in order for the listener to detect memory leaks. |
+| [leakcanary.FailTestOnLeakRunListener](../leakcanary/-fail-test-on-leak-run-listener/index.md) | A JUnit [RunListener](#) that uses [InstrumentationLeakDetector](../leakcanary/-instrumentation-leak-detector/index.md) to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. |
+| [leakcanary.InstrumentationLeakDetector](../leakcanary/-instrumentation-leak-detector/index.md) | [InstrumentationLeakDetector](../leakcanary/-instrumentation-leak-detector/index.md) can be used to detect memory leaks in instrumentation tests. |
diff --git a/docs/api/leakcanary-android-instrumentation/index.md b/docs/api/leakcanary-android-instrumentation/index.md
new file mode 100644
index 00000000..d1e65775
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/index.md
@@ -0,0 +1,11 @@
+[leakcanary-android-instrumentation](./index.md)
+
+### Packages
+
+| Name | Summary |
+|---|---|
+| [leakcanary](leakcanary/index.md) |  |
+
+### Index
+
+[All Types](alltypes/index.md)
\ No newline at end of file
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/-init-.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/-init-.md
new file mode 100644
index 00000000..d952730c
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/-init-.md
@@ -0,0 +1,14 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailAnnotatedTestOnLeakRunListener](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`FailAnnotatedTestOnLeakRunListener()`
+
+A JUnit [RunListener](#) extending [FailTestOnLeakRunListener](../-fail-test-on-leak-run-listener/index.md) to detecting memory
+leaks in Android instrumentation tests only when the [FailTestOnLeak](../-fail-test-on-leak/index.md) annotation
+is used.
+
+**See Also**
+
+[FailTestOnLeak](../-fail-test-on-leak/index.md)
+
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/index.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/index.md
new file mode 100644
index 00000000..c258126e
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/index.md
@@ -0,0 +1,39 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailAnnotatedTestOnLeakRunListener](./index.md)
+
+# FailAnnotatedTestOnLeakRunListener
+
+`class FailAnnotatedTestOnLeakRunListener : `[`FailTestOnLeakRunListener`](../-fail-test-on-leak-run-listener/index.md)
+
+A JUnit [RunListener](#) extending [FailTestOnLeakRunListener](../-fail-test-on-leak-run-listener/index.md) to detecting memory
+leaks in Android instrumentation tests only when the [FailTestOnLeak](../-fail-test-on-leak/index.md) annotation
+is used.
+
+**See Also**
+
+[FailTestOnLeak](../-fail-test-on-leak/index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `FailAnnotatedTestOnLeakRunListener()`<br>A JUnit [RunListener](#) extending [FailTestOnLeakRunListener](../-fail-test-on-leak-run-listener/index.md) to detecting memory leaks in Android instrumentation tests only when the [FailTestOnLeak](../-fail-test-on-leak/index.md) annotation is used. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [skipLeakDetectionReason](skip-leak-detection-reason.md) | `fun skipLeakDetectionReason(description: Description): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`?`<br>Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise. |
+
+### Inherited Functions
+
+| Name | Summary |
+|---|---|
+| [failTest](../-fail-test-on-leak-run-listener/fail-test.md) | `fun failTest(message: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Reports that the test has failed, with the provided [message](../-fail-test-on-leak-run-listener/fail-test.md#leakcanary.FailTestOnLeakRunListener$failTest(kotlin.String)/message). |
+| [onAnalysisPerformed](../-fail-test-on-leak-run-listener/on-analysis-performed.md) | `open fun onAnalysisPerformed(heapAnalysis: HeapAnalysis): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Called when a heap analysis has been performed and a result is available. |
+| [testAssumptionFailure](../-fail-test-on-leak-run-listener/test-assumption-failure.md) | `open fun testAssumptionFailure(failure: Failure): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+| [testFailure](../-fail-test-on-leak-run-listener/test-failure.md) | `open fun testFailure(failure: Failure): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+| [testFinished](../-fail-test-on-leak-run-listener/test-finished.md) | `open fun testFinished(description: Description): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+| [testIgnored](../-fail-test-on-leak-run-listener/test-ignored.md) | `open fun testIgnored(description: Description): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+| [testRunFinished](../-fail-test-on-leak-run-listener/test-run-finished.md) | `open fun testRunFinished(result: Result): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+| [testRunStarted](../-fail-test-on-leak-run-listener/test-run-started.md) | `open fun testRunStarted(description: Description): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+| [testStarted](../-fail-test-on-leak-run-listener/test-started.md) | `open fun testStarted(description: Description): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/skip-leak-detection-reason.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/skip-leak-detection-reason.md
new file mode 100644
index 00000000..d0cc4b5c
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/skip-leak-detection-reason.md
@@ -0,0 +1,12 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailAnnotatedTestOnLeakRunListener](index.md) / [skipLeakDetectionReason](./skip-leak-detection-reason.md)
+
+# skipLeakDetectionReason
+
+`protected fun skipLeakDetectionReason(description: Description): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`?`
+
+Overrides [FailTestOnLeakRunListener.skipLeakDetectionReason](../-fail-test-on-leak-run-listener/skip-leak-detection-reason.md)
+
+Can be overridden to skip leak detection based on the description provided when a test
+is started. Return null to continue leak detection, or a string describing the reason for
+skipping otherwise.
+
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/-init-.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/-init-.md
new file mode 100644
index 00000000..b69bae60
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/-init-.md
@@ -0,0 +1,17 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailTestOnLeakRunListener](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`FailTestOnLeakRunListener()`
+
+A JUnit [RunListener](#) that uses [InstrumentationLeakDetector](../-instrumentation-leak-detector/index.md) to detect memory leaks in Android
+instrumentation tests. It waits for the end of a test, and if the test succeeds then it will
+look for retained objects, trigger a heap dump if needed and perform an analysis.
+
+[FailTestOnLeakRunListener](index.md) can be subclassed to override [skipLeakDetectionReason](skip-leak-detection-reason.md) and
+[onAnalysisPerformed](on-analysis-performed.md)
+
+**See Also**
+
+[InstrumentationLeakDetector](../-instrumentation-leak-detector/index.md)
+
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/fail-test.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/fail-test.md
new file mode 100644
index 00000000..9c909fc4
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/fail-test.md
@@ -0,0 +1,8 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailTestOnLeakRunListener](index.md) / [failTest](./fail-test.md)
+
+# failTest
+
+`protected fun failTest(message: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Reports that the test has failed, with the provided [message](fail-test.md#leakcanary.FailTestOnLeakRunListener$failTest(kotlin.String)/message).
+
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/index.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/index.md
new file mode 100644
index 00000000..bb3bafff
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/index.md
@@ -0,0 +1,43 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailTestOnLeakRunListener](./index.md)
+
+# FailTestOnLeakRunListener
+
+`open class FailTestOnLeakRunListener : RunListener`
+
+A JUnit [RunListener](#) that uses [InstrumentationLeakDetector](../-instrumentation-leak-detector/index.md) to detect memory leaks in Android
+instrumentation tests. It waits for the end of a test, and if the test succeeds then it will
+look for retained objects, trigger a heap dump if needed and perform an analysis.
+
+[FailTestOnLeakRunListener](./index.md) can be subclassed to override [skipLeakDetectionReason](skip-leak-detection-reason.md) and
+[onAnalysisPerformed](on-analysis-performed.md)
+
+**See Also**
+
+[InstrumentationLeakDetector](../-instrumentation-leak-detector/index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `FailTestOnLeakRunListener()`<br>A JUnit [RunListener](#) that uses [InstrumentationLeakDetector](../-instrumentation-leak-detector/index.md) to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [failTest](fail-test.md) | `fun failTest(message: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Reports that the test has failed, with the provided [message](fail-test.md#leakcanary.FailTestOnLeakRunListener$failTest(kotlin.String)/message). |
+| [onAnalysisPerformed](on-analysis-performed.md) | `open fun onAnalysisPerformed(heapAnalysis: HeapAnalysis): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Called when a heap analysis has been performed and a result is available. |
+| [skipLeakDetectionReason](skip-leak-detection-reason.md) | `open fun skipLeakDetectionReason(description: Description): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`?`<br>Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise. |
+| [testAssumptionFailure](test-assumption-failure.md) | `open fun testAssumptionFailure(failure: Failure): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+| [testFailure](test-failure.md) | `open fun testFailure(failure: Failure): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+| [testFinished](test-finished.md) | `open fun testFinished(description: Description): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+| [testIgnored](test-ignored.md) | `open fun testIgnored(description: Description): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+| [testRunFinished](test-run-finished.md) | `open fun testRunFinished(result: Result): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+| [testRunStarted](test-run-started.md) | `open fun testRunStarted(description: Description): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+| [testStarted](test-started.md) | `open fun testStarted(description: Description): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [FailAnnotatedTestOnLeakRunListener](../-fail-annotated-test-on-leak-run-listener/index.md) | `class FailAnnotatedTestOnLeakRunListener : `[`FailTestOnLeakRunListener`](./index.md)<br>A JUnit [RunListener](#) extending [FailTestOnLeakRunListener](./index.md) to detecting memory leaks in Android instrumentation tests only when the [FailTestOnLeak](../-fail-test-on-leak/index.md) annotation is used. |
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/on-analysis-performed.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/on-analysis-performed.md
new file mode 100644
index 00000000..337d7e09
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/on-analysis-performed.md
@@ -0,0 +1,11 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailTestOnLeakRunListener](index.md) / [onAnalysisPerformed](./on-analysis-performed.md)
+
+# onAnalysisPerformed
+
+`protected open fun onAnalysisPerformed(heapAnalysis: HeapAnalysis): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Called when a heap analysis has been performed and a result is available.
+
+The default implementation call [failTest](fail-test.md) if the [heapAnalysis](on-analysis-performed.md#leakcanary.FailTestOnLeakRunListener$onAnalysisPerformed(shark.HeapAnalysis)/heapAnalysis) failed or if
+[HeapAnalysisSuccess.applicationLeaks](#) is not empty.
+
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/skip-leak-detection-reason.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/skip-leak-detection-reason.md
new file mode 100644
index 00000000..702c5b65
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/skip-leak-detection-reason.md
@@ -0,0 +1,10 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailTestOnLeakRunListener](index.md) / [skipLeakDetectionReason](./skip-leak-detection-reason.md)
+
+# skipLeakDetectionReason
+
+`protected open fun skipLeakDetectionReason(description: Description): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`?`
+
+Can be overridden to skip leak detection based on the description provided when a test
+is started. Return null to continue leak detection, or a string describing the reason for
+skipping otherwise.
+
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-assumption-failure.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-assumption-failure.md
new file mode 100644
index 00000000..6de5595f
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-assumption-failure.md
@@ -0,0 +1,5 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailTestOnLeakRunListener](index.md) / [testAssumptionFailure](./test-assumption-failure.md)
+
+# testAssumptionFailure
+
+`open fun testAssumptionFailure(failure: Failure): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-failure.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-failure.md
new file mode 100644
index 00000000..c3939a7e
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-failure.md
@@ -0,0 +1,5 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailTestOnLeakRunListener](index.md) / [testFailure](./test-failure.md)
+
+# testFailure
+
+`open fun testFailure(failure: Failure): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-finished.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-finished.md
new file mode 100644
index 00000000..73724bfa
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-finished.md
@@ -0,0 +1,5 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailTestOnLeakRunListener](index.md) / [testFinished](./test-finished.md)
+
+# testFinished
+
+`open fun testFinished(description: Description): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-ignored.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-ignored.md
new file mode 100644
index 00000000..15679185
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-ignored.md
@@ -0,0 +1,5 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailTestOnLeakRunListener](index.md) / [testIgnored](./test-ignored.md)
+
+# testIgnored
+
+`open fun testIgnored(description: Description): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-run-finished.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-run-finished.md
new file mode 100644
index 00000000..097e8b41
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-run-finished.md
@@ -0,0 +1,5 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailTestOnLeakRunListener](index.md) / [testRunFinished](./test-run-finished.md)
+
+# testRunFinished
+
+`open fun testRunFinished(result: Result): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-run-started.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-run-started.md
new file mode 100644
index 00000000..7d81fd51
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-run-started.md
@@ -0,0 +1,5 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailTestOnLeakRunListener](index.md) / [testRunStarted](./test-run-started.md)
+
+# testRunStarted
+
+`open fun testRunStarted(description: Description): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-started.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-started.md
new file mode 100644
index 00000000..bf0c758d
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-started.md
@@ -0,0 +1,5 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailTestOnLeakRunListener](index.md) / [testStarted](./test-started.md)
+
+# testStarted
+
+`open fun testStarted(description: Description): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak/-init-.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak/-init-.md
new file mode 100644
index 00000000..7fcbee49
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak/-init-.md
@@ -0,0 +1,14 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailTestOnLeak](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`FailTestOnLeak()`
+
+An [Annotation](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-annotation/index.html) class to be used in conjunction with [FailAnnotatedTestOnLeakRunListener](../-fail-annotated-test-on-leak-run-listener/index.md)
+for detecting memory leaks. When using [FailAnnotatedTestOnLeakRunListener](../-fail-annotated-test-on-leak-run-listener/index.md), the tests
+should be annotated with this class in order for the listener to detect memory leaks.
+
+**See Also**
+
+[FailAnnotatedTestOnLeakRunListener](../-fail-annotated-test-on-leak-run-listener/index.md)
+
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak/index.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak/index.md
new file mode 100644
index 00000000..ca8dbe00
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak/index.md
@@ -0,0 +1,19 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [FailTestOnLeak](./index.md)
+
+# FailTestOnLeak
+
+`@Target([AnnotationTarget.FUNCTION]) annotation class FailTestOnLeak`
+
+An [Annotation](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-annotation/index.html) class to be used in conjunction with [FailAnnotatedTestOnLeakRunListener](../-fail-annotated-test-on-leak-run-listener/index.md)
+for detecting memory leaks. When using [FailAnnotatedTestOnLeakRunListener](../-fail-annotated-test-on-leak-run-listener/index.md), the tests
+should be annotated with this class in order for the listener to detect memory leaks.
+
+**See Also**
+
+[FailAnnotatedTestOnLeakRunListener](../-fail-annotated-test-on-leak-run-listener/index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `FailTestOnLeak()`<br>An [Annotation](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-annotation/index.html) class to be used in conjunction with [FailAnnotatedTestOnLeakRunListener](../-fail-annotated-test-on-leak-run-listener/index.md) for detecting memory leaks. When using [FailAnnotatedTestOnLeakRunListener](../-fail-annotated-test-on-leak-run-listener/index.md), the tests should be annotated with this class in order for the listener to detect memory leaks. |
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-init-.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-init-.md
new file mode 100644
index 00000000..1979ba32
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-init-.md
@@ -0,0 +1,58 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [InstrumentationLeakDetector](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`InstrumentationLeakDetector()`
+
+[InstrumentationLeakDetector](index.md) can be used to detect memory leaks in instrumentation tests.
+
+To use it, you need to:
+
+* Call [updateConfig](update-config.md) so that [AppWatcher](#) will watch objects and [LeakCanary](#) will not dump
+the heap on retained objects
+* Add an instrumentation test listener (e.g. [FailTestOnLeakRunListener](../-fail-test-on-leak-run-listener/index.md)) that will invoke
+[detectLeaks](detect-leaks.md).
+
+### Add an instrumentation test listener
+
+LeakCanary provides [FailTestOnLeakRunListener](../-fail-test-on-leak-run-listener/index.md), but you can also implement
+your own [RunListener](#) and call [detectLeaks](detect-leaks.md) directly if you need a more custom
+behavior (for instance running it only once per test suite).
+
+All you need to do is add the following to the defaultConfig of your build.gradle:
+
+`testInstrumentationRunnerArgument "listener", "leakcanary.FailTestOnLeakRunListener"`
+
+Then you can run your instrumentation tests via Gradle as usually, and they will fail when
+a memory leak is detected:
+
+`./gradlew leakcanary-sample:connectedCheck`
+
+If instead you want to run UI tests via adb, add a *listener* execution argument to
+your command line for running the UI tests:
+`-e listener leakcanary.FailTestOnLeakRunListener`. The full command line
+should look something like this:
+
+```
+adb shell am instrument \\
+-w com.android.foo/android.support.test.runner.AndroidJUnitRunner \\
+-e listener leakcanary.FailTestOnLeakRunListener
+```
+
+### Rationale
+
+Instead of using the [InstrumentationLeakDetector](index.md), one could simply enable LeakCanary in
+instrumentation tests.
+
+This approach would have two disadvantages:
+
+* Heap dumps freeze the VM, and the leak analysis is IO and CPU heavy. This can slow down
+the test and introduce flakiness
+* The leak analysis is asynchronous by default. This means the tests could finish and the
+process die before the analysis is finished.
+
+The approach taken here is to collect all objects to watch as you run the test, but not
+do any heap dump during the test. Then, at the end, if any of the watched objects is still in
+memory we dump the heap and perform a blocking analysis. There is only one heap dump performed,
+no matter the number of objects retained.
+
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/-init-.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/-init-.md
new file mode 100644
index 00000000..dda08409
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/-init-.md
@@ -0,0 +1,5 @@
+[leakcanary-android-instrumentation](../../../../index.md) / [leakcanary](../../../index.md) / [InstrumentationLeakDetector](../../index.md) / [Result](../index.md) / [AnalysisPerformed](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`AnalysisPerformed(heapAnalysis: HeapAnalysis)`
\ No newline at end of file
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/heap-analysis.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/heap-analysis.md
new file mode 100644
index 00000000..ffa0b7eb
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/heap-analysis.md
@@ -0,0 +1,5 @@
+[leakcanary-android-instrumentation](../../../../index.md) / [leakcanary](../../../index.md) / [InstrumentationLeakDetector](../../index.md) / [Result](../index.md) / [AnalysisPerformed](index.md) / [heapAnalysis](./heap-analysis.md)
+
+# heapAnalysis
+
+`val heapAnalysis: HeapAnalysis`
\ No newline at end of file
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/index.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/index.md
new file mode 100644
index 00000000..732ba767
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/index.md
@@ -0,0 +1,17 @@
+[leakcanary-android-instrumentation](../../../../index.md) / [leakcanary](../../../index.md) / [InstrumentationLeakDetector](../../index.md) / [Result](../index.md) / [AnalysisPerformed](./index.md)
+
+# AnalysisPerformed
+
+`class AnalysisPerformed : `[`InstrumentationLeakDetector.Result`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `AnalysisPerformed(heapAnalysis: HeapAnalysis)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [heapAnalysis](heap-analysis.md) | `val heapAnalysis: HeapAnalysis` |
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-no-analysis.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-no-analysis.md
new file mode 100644
index 00000000..e3da4941
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-no-analysis.md
@@ -0,0 +1,5 @@
+[leakcanary-android-instrumentation](../../../index.md) / [leakcanary](../../index.md) / [InstrumentationLeakDetector](../index.md) / [Result](index.md) / [NoAnalysis](./-no-analysis.md)
+
+# NoAnalysis
+
+`object NoAnalysis : `[`InstrumentationLeakDetector.Result`](index.md)
\ No newline at end of file
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/index.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/index.md
new file mode 100644
index 00000000..150b1073
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/index.md
@@ -0,0 +1,21 @@
+[leakcanary-android-instrumentation](../../../index.md) / [leakcanary](../../index.md) / [InstrumentationLeakDetector](../index.md) / [Result](./index.md)
+
+# Result
+
+`sealed class Result`
+
+The result of calling [detectLeaks](../detect-leaks.md), which is either [NoAnalysis](-no-analysis.md) or [AnalysisPerformed](-analysis-performed/index.md).
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [AnalysisPerformed](-analysis-performed/index.md) | `class AnalysisPerformed : `[`InstrumentationLeakDetector.Result`](./index.md) |
+| [NoAnalysis](-no-analysis.md) | `object NoAnalysis : `[`InstrumentationLeakDetector.Result`](./index.md) |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [AnalysisPerformed](-analysis-performed/index.md) | `class AnalysisPerformed : `[`InstrumentationLeakDetector.Result`](./index.md) |
+| [NoAnalysis](-no-analysis.md) | `object NoAnalysis : `[`InstrumentationLeakDetector.Result`](./index.md) |
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/detect-leaks.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/detect-leaks.md
new file mode 100644
index 00000000..bf079652
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/detect-leaks.md
@@ -0,0 +1,8 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [InstrumentationLeakDetector](index.md) / [detectLeaks](./detect-leaks.md)
+
+# detectLeaks
+
+`fun detectLeaks(): `[`InstrumentationLeakDetector.Result`](-result/index.md)
+
+Looks for retained objects, triggers a heap dump if needed and performs an analysis.
+
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/index.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/index.md
new file mode 100644
index 00000000..62ec4168
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/index.md
@@ -0,0 +1,81 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [InstrumentationLeakDetector](./index.md)
+
+# InstrumentationLeakDetector
+
+`class InstrumentationLeakDetector`
+
+[InstrumentationLeakDetector](./index.md) can be used to detect memory leaks in instrumentation tests.
+
+To use it, you need to:
+
+* Call [updateConfig](update-config.md) so that [AppWatcher](#) will watch objects and [LeakCanary](#) will not dump
+the heap on retained objects
+* Add an instrumentation test listener (e.g. [FailTestOnLeakRunListener](../-fail-test-on-leak-run-listener/index.md)) that will invoke
+[detectLeaks](detect-leaks.md).
+
+### Add an instrumentation test listener
+
+LeakCanary provides [FailTestOnLeakRunListener](../-fail-test-on-leak-run-listener/index.md), but you can also implement
+your own [RunListener](#) and call [detectLeaks](detect-leaks.md) directly if you need a more custom
+behavior (for instance running it only once per test suite).
+
+All you need to do is add the following to the defaultConfig of your build.gradle:
+
+`testInstrumentationRunnerArgument "listener", "leakcanary.FailTestOnLeakRunListener"`
+
+Then you can run your instrumentation tests via Gradle as usually, and they will fail when
+a memory leak is detected:
+
+`./gradlew leakcanary-sample:connectedCheck`
+
+If instead you want to run UI tests via adb, add a *listener* execution argument to
+your command line for running the UI tests:
+`-e listener leakcanary.FailTestOnLeakRunListener`. The full command line
+should look something like this:
+
+```
+adb shell am instrument \\
+-w com.android.foo/android.support.test.runner.AndroidJUnitRunner \\
+-e listener leakcanary.FailTestOnLeakRunListener
+```
+
+### Rationale
+
+Instead of using the [InstrumentationLeakDetector](./index.md), one could simply enable LeakCanary in
+instrumentation tests.
+
+This approach would have two disadvantages:
+
+* Heap dumps freeze the VM, and the leak analysis is IO and CPU heavy. This can slow down
+the test and introduce flakiness
+* The leak analysis is asynchronous by default. This means the tests could finish and the
+process die before the analysis is finished.
+
+The approach taken here is to collect all objects to watch as you run the test, but not
+do any heap dump during the test. Then, at the end, if any of the watched objects is still in
+memory we dump the heap and perform a blocking analysis. There is only one heap dump performed,
+no matter the number of objects retained.
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [Result](-result/index.md) | `sealed class Result`<br>The result of calling [detectLeaks](detect-leaks.md), which is either [NoAnalysis](-result/-no-analysis.md) or [AnalysisPerformed](-result/-analysis-performed/index.md). |
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `InstrumentationLeakDetector()`<br>[InstrumentationLeakDetector](./index.md) can be used to detect memory leaks in instrumentation tests. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [detectLeaks](detect-leaks.md) | `fun detectLeaks(): `[`InstrumentationLeakDetector.Result`](-result/index.md)<br>Looks for retained objects, triggers a heap dump if needed and performs an analysis. |
+
+### Companion Object Functions
+
+| Name | Summary |
+|---|---|
+| [updateConfig](update-config.md) | `fun updateConfig(): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Configures [AppWatcher](#) to watch objects and [LeakCanary](#) to not dump the heap on retained objects so that instrumentation tests run smoothly, and we can look for leaks at the end of a test. This is automatically called by [FailTestOnLeakRunListener](../-fail-test-on-leak-run-listener/index.md) when the tests start running. |
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/update-config.md b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/update-config.md
new file mode 100644
index 00000000..da580060
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/update-config.md
@@ -0,0 +1,11 @@
+[leakcanary-android-instrumentation](../../index.md) / [leakcanary](../index.md) / [InstrumentationLeakDetector](index.md) / [updateConfig](./update-config.md)
+
+# updateConfig
+
+`fun updateConfig(): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Configures [AppWatcher](#) to watch objects and [LeakCanary](#) to not dump the heap on retained
+objects so that instrumentation tests run smoothly, and we can look for leaks at the end of
+a test. This is automatically called by [FailTestOnLeakRunListener](../-fail-test-on-leak-run-listener/index.md) when the tests start
+running.
+
diff --git a/docs/api/leakcanary-android-instrumentation/leakcanary/index.md b/docs/api/leakcanary-android-instrumentation/leakcanary/index.md
new file mode 100644
index 00000000..6872aa14
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/leakcanary/index.md
@@ -0,0 +1,17 @@
+[leakcanary-android-instrumentation](../index.md) / [leakcanary](./index.md)
+
+## Package leakcanary
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [FailAnnotatedTestOnLeakRunListener](-fail-annotated-test-on-leak-run-listener/index.md) | `class FailAnnotatedTestOnLeakRunListener : `[`FailTestOnLeakRunListener`](-fail-test-on-leak-run-listener/index.md)<br>A JUnit [RunListener](#) extending [FailTestOnLeakRunListener](-fail-test-on-leak-run-listener/index.md) to detecting memory leaks in Android instrumentation tests only when the [FailTestOnLeak](-fail-test-on-leak/index.md) annotation is used. |
+| [FailTestOnLeakRunListener](-fail-test-on-leak-run-listener/index.md) | `open class FailTestOnLeakRunListener : RunListener`<br>A JUnit [RunListener](#) that uses [InstrumentationLeakDetector](-instrumentation-leak-detector/index.md) to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. |
+| [InstrumentationLeakDetector](-instrumentation-leak-detector/index.md) | `class InstrumentationLeakDetector`<br>[InstrumentationLeakDetector](-instrumentation-leak-detector/index.md) can be used to detect memory leaks in instrumentation tests. |
+
+### Annotations
+
+| Name | Summary |
+|---|---|
+| [FailTestOnLeak](-fail-test-on-leak/index.md) | `annotation class FailTestOnLeak`<br>An [Annotation](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-annotation/index.html) class to be used in conjunction with [FailAnnotatedTestOnLeakRunListener](-fail-annotated-test-on-leak-run-listener/index.md) for detecting memory leaks. When using [FailAnnotatedTestOnLeakRunListener](-fail-annotated-test-on-leak-run-listener/index.md), the tests should be annotated with this class in order for the listener to detect memory leaks. |
diff --git a/docs/api/leakcanary-android-instrumentation/package-list b/docs/api/leakcanary-android-instrumentation/package-list
new file mode 100644
index 00000000..e886de54
--- /dev/null
+++ b/docs/api/leakcanary-android-instrumentation/package-list
@@ -0,0 +1,4 @@
+$dokka.format:gfm
+$dokka.linkExtension:md
+
+leakcanary
diff --git a/docs/api/leakcanary-android-process/alltypes/index.md b/docs/api/leakcanary-android-process/alltypes/index.md
new file mode 100644
index 00000000..0889db82
--- /dev/null
+++ b/docs/api/leakcanary-android-process/alltypes/index.md
@@ -0,0 +1,7 @@
+
+
+### All Types
+
+| Name | Summary |
+|---|---|
+| [leakcanary.LeakCanaryProcess](../leakcanary/-leak-canary-process/index.md) | Used to determine whether the current process is the LeakCanary analyzer process. By depending on the `leakcanary-android-process` artifact instead of the `leakcanary-android`, LeakCanary will automatically run its analysis in a separate process. |
diff --git a/docs/api/leakcanary-android-process/index.md b/docs/api/leakcanary-android-process/index.md
new file mode 100644
index 00000000..a07c6db6
--- /dev/null
+++ b/docs/api/leakcanary-android-process/index.md
@@ -0,0 +1,11 @@
+[leakcanary-android-process](./index.md)
+
+### Packages
+
+| Name | Summary |
+|---|---|
+| [leakcanary](leakcanary/index.md) |  |
+
+### Index
+
+[All Types](alltypes/index.md)
\ No newline at end of file
diff --git a/docs/api/leakcanary-android-process/leakcanary/-leak-canary-process/index.md b/docs/api/leakcanary-android-process/leakcanary/-leak-canary-process/index.md
new file mode 100644
index 00000000..efbfeb7f
--- /dev/null
+++ b/docs/api/leakcanary-android-process/leakcanary/-leak-canary-process/index.md
@@ -0,0 +1,18 @@
+[leakcanary-android-process](../../index.md) / [leakcanary](../index.md) / [LeakCanaryProcess](./index.md)
+
+# LeakCanaryProcess
+
+`object LeakCanaryProcess`
+
+Used to determine whether the current process is the LeakCanary analyzer process. By depending
+on the `leakcanary-android-process` artifact instead of the `leakcanary-android`, LeakCanary
+will automatically run its analysis in a separate process.
+
+As such, you'll need to be careful to do any custom configuration of LeakCanary in both the main
+process and the analyzer process.
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [isInAnalyzerProcess](is-in-analyzer-process.md) | `fun isInAnalyzerProcess(context: Context): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Whether the current process is the process running the heap analyzer, which is a different process than the normal app process. |
diff --git a/docs/api/leakcanary-android-process/leakcanary/-leak-canary-process/is-in-analyzer-process.md b/docs/api/leakcanary-android-process/leakcanary/-leak-canary-process/is-in-analyzer-process.md
new file mode 100644
index 00000000..3322ae7d
--- /dev/null
+++ b/docs/api/leakcanary-android-process/leakcanary/-leak-canary-process/is-in-analyzer-process.md
@@ -0,0 +1,9 @@
+[leakcanary-android-process](../../index.md) / [leakcanary](../index.md) / [LeakCanaryProcess](index.md) / [isInAnalyzerProcess](./is-in-analyzer-process.md)
+
+# isInAnalyzerProcess
+
+`fun isInAnalyzerProcess(context: Context): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Whether the current process is the process running the heap analyzer, which is
+a different process than the normal app process.
+
diff --git a/docs/api/leakcanary-android-process/leakcanary/index.md b/docs/api/leakcanary-android-process/leakcanary/index.md
new file mode 100644
index 00000000..856aceca
--- /dev/null
+++ b/docs/api/leakcanary-android-process/leakcanary/index.md
@@ -0,0 +1,9 @@
+[leakcanary-android-process](../index.md) / [leakcanary](./index.md)
+
+## Package leakcanary
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [LeakCanaryProcess](-leak-canary-process/index.md) | `object LeakCanaryProcess`<br>Used to determine whether the current process is the LeakCanary analyzer process. By depending on the `leakcanary-android-process` artifact instead of the `leakcanary-android`, LeakCanary will automatically run its analysis in a separate process. |
diff --git a/docs/api/leakcanary-android-process/package-list b/docs/api/leakcanary-android-process/package-list
new file mode 100644
index 00000000..e886de54
--- /dev/null
+++ b/docs/api/leakcanary-android-process/package-list
@@ -0,0 +1,4 @@
+$dokka.format:gfm
+$dokka.linkExtension:md
+
+leakcanary
diff --git a/docs/api/leakcanary-object-watcher-android/alltypes/index.md b/docs/api/leakcanary-object-watcher-android/alltypes/index.md
new file mode 100644
index 00000000..1dcce4a0
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher-android/alltypes/index.md
@@ -0,0 +1,7 @@
+
+
+### All Types
+
+| Name | Summary |
+|---|---|
+| [leakcanary.AppWatcher](../leakcanary/-app-watcher/index.md) | The entry point API for using [ObjectWatcher](#) in an Android app. [AppWatcher.objectWatcher](../leakcanary/-app-watcher/object-watcher.md) is in charge of detecting retained objects, and [AppWatcher](../leakcanary/-app-watcher/index.md) is auto configured on app start to pass it activity and fragment instances. Call [ObjectWatcher.watch](#) on [objectWatcher](../leakcanary/-app-watcher/object-watcher.md) to watch any other object that you expect to be unreachable. |
diff --git a/docs/api/leakcanary-object-watcher-android/index.md b/docs/api/leakcanary-object-watcher-android/index.md
new file mode 100644
index 00000000..bae5257b
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher-android/index.md
@@ -0,0 +1,11 @@
+[leakcanary-object-watcher-android](./index.md)
+
+### Packages
+
+| Name | Summary |
+|---|---|
+| [leakcanary](leakcanary/index.md) |  |
+
+### Index
+
+[All Types](alltypes/index.md)
\ No newline at end of file
diff --git a/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-init-.md b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-init-.md
new file mode 100644
index 00000000..aeb69e8d
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-init-.md
@@ -0,0 +1,5 @@
+[leakcanary-object-watcher-android](../../../index.md) / [leakcanary](../../index.md) / [AppWatcher](../index.md) / [Config](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`Config(enabled: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = InternalAppWatcher.isDebuggableBuild, watchActivities: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = true, watchFragments: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = true, watchFragmentViews: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = true, watchDurationMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)` = TimeUnit.SECONDS.toMillis(5))`
\ No newline at end of file
diff --git a/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/enabled.md b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/enabled.md
new file mode 100644
index 00000000..2f39941c
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/enabled.md
@@ -0,0 +1,10 @@
+[leakcanary-object-watcher-android](../../../index.md) / [leakcanary](../../index.md) / [AppWatcher](../index.md) / [Config](index.md) / [enabled](./enabled.md)
+
+# enabled
+
+`val enabled: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Whether AppWatcher should watch objects (by keeping weak references to them).
+
+Default to true in debuggable builds and false is non debuggable builds.
+
diff --git a/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/index.md b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/index.md
new file mode 100644
index 00000000..40313db9
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/index.md
@@ -0,0 +1,21 @@
+[leakcanary-object-watcher-android](../../../index.md) / [leakcanary](../../index.md) / [AppWatcher](../index.md) / [Config](./index.md)
+
+# Config
+
+`data class Config`
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `Config(enabled: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = InternalAppWatcher.isDebuggableBuild, watchActivities: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = true, watchFragments: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = true, watchFragmentViews: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = true, watchDurationMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)` = TimeUnit.SECONDS.toMillis(5))` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [enabled](enabled.md) | `val enabled: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Whether AppWatcher should watch objects (by keeping weak references to them). |
+| [watchActivities](watch-activities.md) | `val watchActivities: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Whether AppWatcher should automatically watch destroyed activity instances. |
+| [watchDurationMillis](watch-duration-millis.md) | `val watchDurationMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>How long to wait before reporting a watched object as retained. |
+| [watchFragments](watch-fragments.md) | `val watchFragments: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Whether AppWatcher should automatically watch destroyed fragment instances. |
+| [watchFragmentViews](watch-fragment-views.md) | `val watchFragmentViews: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Whether AppWatcher should automatically watch destroyed fragment view instances. |
diff --git a/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-activities.md b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-activities.md
new file mode 100644
index 00000000..4f6fa009
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-activities.md
@@ -0,0 +1,10 @@
+[leakcanary-object-watcher-android](../../../index.md) / [leakcanary](../../index.md) / [AppWatcher](../index.md) / [Config](index.md) / [watchActivities](./watch-activities.md)
+
+# watchActivities
+
+`val watchActivities: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Whether AppWatcher should automatically watch destroyed activity instances.
+
+Defaults to true.
+
diff --git a/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-duration-millis.md b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-duration-millis.md
new file mode 100644
index 00000000..d009c517
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-duration-millis.md
@@ -0,0 +1,10 @@
+[leakcanary-object-watcher-android](../../../index.md) / [leakcanary](../../index.md) / [AppWatcher](../index.md) / [Config](index.md) / [watchDurationMillis](./watch-duration-millis.md)
+
+# watchDurationMillis
+
+`val watchDurationMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+How long to wait before reporting a watched object as retained.
+
+Default to 5 seconds.
+
diff --git a/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-fragment-views.md b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-fragment-views.md
new file mode 100644
index 00000000..e3269538
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-fragment-views.md
@@ -0,0 +1,10 @@
+[leakcanary-object-watcher-android](../../../index.md) / [leakcanary](../../index.md) / [AppWatcher](../index.md) / [Config](index.md) / [watchFragmentViews](./watch-fragment-views.md)
+
+# watchFragmentViews
+
+`val watchFragmentViews: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Whether AppWatcher should automatically watch destroyed fragment view instances.
+
+Defaults to true.
+
diff --git a/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-fragments.md b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-fragments.md
new file mode 100644
index 00000000..8520caa9
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-fragments.md
@@ -0,0 +1,10 @@
+[leakcanary-object-watcher-android](../../../index.md) / [leakcanary](../../index.md) / [AppWatcher](../index.md) / [Config](index.md) / [watchFragments](./watch-fragments.md)
+
+# watchFragments
+
+`val watchFragments: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Whether AppWatcher should automatically watch destroyed fragment instances.
+
+Defaults to true.
+
diff --git a/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/config.md b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/config.md
new file mode 100644
index 00000000..897fb8af
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/config.md
@@ -0,0 +1,13 @@
+[leakcanary-object-watcher-android](../../index.md) / [leakcanary](../index.md) / [AppWatcher](index.md) / [config](./config.md)
+
+# config
+
+`var config: `[`AppWatcher.Config`](-config/index.md)
+
+The current AppWatcher configuration. Can be updated at any time, usually by replacing it with
+a mutated copy, e.g.:
+
+```
+LeakCanary.config = LeakCanary.config.copy(enabled = false)
+```
+
diff --git a/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/index.md b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/index.md
new file mode 100644
index 00000000..40efc9f0
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/index.md
@@ -0,0 +1,30 @@
+[leakcanary-object-watcher-android](../../index.md) / [leakcanary](../index.md) / [AppWatcher](./index.md)
+
+# AppWatcher
+
+`object AppWatcher`
+
+The entry point API for using [ObjectWatcher](#) in an Android app. [AppWatcher.objectWatcher](object-watcher.md) is
+in charge of detecting retained objects, and [AppWatcher](./index.md) is auto configured on app start to
+pass it activity and fragment instances. Call [ObjectWatcher.watch](#) on [objectWatcher](object-watcher.md) to
+watch any other object that you expect to be unreachable.
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [Config](-config/index.md) | `data class Config` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [config](config.md) | `var config: `[`AppWatcher.Config`](-config/index.md)<br>The current AppWatcher configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: |
+| [isInstalled](is-installed.md) | `val isInstalled: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) |
+| [objectWatcher](object-watcher.md) | `val objectWatcher: ObjectWatcher`<br>The [ObjectWatcher](#) used by AppWatcher to detect retained objects. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [manualInstall](manual-install.md) | `fun manualInstall(application: Application): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>[AppWatcher](./index.md) is automatically installed on main process start by [leakcanary.internal.AppWatcherInstaller](#) which is registered in the AndroidManifest.xml of your app. If you disabled [leakcanary.internal.AppWatcherInstaller](#) or you need AppWatcher or LeakCanary to run outside of the main process then you can call this method to install [AppWatcher](./index.md). |
diff --git a/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/is-installed.md b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/is-installed.md
new file mode 100644
index 00000000..2a239f4c
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/is-installed.md
@@ -0,0 +1,10 @@
+[leakcanary-object-watcher-android](../../index.md) / [leakcanary](../index.md) / [AppWatcher](index.md) / [isInstalled](./is-installed.md)
+
+# isInstalled
+
+`val isInstalled: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+**See Also**
+
+[manualInstall](manual-install.md)
+
diff --git a/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/manual-install.md b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/manual-install.md
new file mode 100644
index 00000000..3ace9b31
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/manual-install.md
@@ -0,0 +1,12 @@
+[leakcanary-object-watcher-android](../../index.md) / [leakcanary](../index.md) / [AppWatcher](index.md) / [manualInstall](./manual-install.md)
+
+# manualInstall
+
+`fun manualInstall(application: Application): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+[AppWatcher](index.md) is automatically installed on main process start by
+[leakcanary.internal.AppWatcherInstaller](#) which is registered in the AndroidManifest.xml of
+your app. If you disabled [leakcanary.internal.AppWatcherInstaller](#) or you need AppWatcher
+or LeakCanary to run outside of the main process then you can call this method to install
+[AppWatcher](index.md).
+
diff --git a/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/object-watcher.md b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/object-watcher.md
new file mode 100644
index 00000000..47617835
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/object-watcher.md
@@ -0,0 +1,8 @@
+[leakcanary-object-watcher-android](../../index.md) / [leakcanary](../index.md) / [AppWatcher](index.md) / [objectWatcher](./object-watcher.md)
+
+# objectWatcher
+
+`val objectWatcher: ObjectWatcher`
+
+The [ObjectWatcher](#) used by AppWatcher to detect retained objects.
+
diff --git a/docs/api/leakcanary-object-watcher-android/leakcanary/index.md b/docs/api/leakcanary-object-watcher-android/leakcanary/index.md
new file mode 100644
index 00000000..fe6223ab
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher-android/leakcanary/index.md
@@ -0,0 +1,9 @@
+[leakcanary-object-watcher-android](../index.md) / [leakcanary](./index.md)
+
+## Package leakcanary
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [AppWatcher](-app-watcher/index.md) | `object AppWatcher`<br>The entry point API for using [ObjectWatcher](#) in an Android app. [AppWatcher.objectWatcher](-app-watcher/object-watcher.md) is in charge of detecting retained objects, and [AppWatcher](-app-watcher/index.md) is auto configured on app start to pass it activity and fragment instances. Call [ObjectWatcher.watch](#) on [objectWatcher](-app-watcher/object-watcher.md) to watch any other object that you expect to be unreachable. |
diff --git a/docs/api/leakcanary-object-watcher-android/package-list b/docs/api/leakcanary-object-watcher-android/package-list
new file mode 100644
index 00000000..e886de54
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher-android/package-list
@@ -0,0 +1,4 @@
+$dokka.format:gfm
+$dokka.linkExtension:md
+
+leakcanary
diff --git a/docs/api/leakcanary-object-watcher/alltypes/index.md b/docs/api/leakcanary-object-watcher/alltypes/index.md
new file mode 100644
index 00000000..036a7050
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/alltypes/index.md
@@ -0,0 +1,11 @@
+
+
+### All Types
+
+| Name | Summary |
+|---|---|
+| [leakcanary.Clock](../leakcanary/-clock/index.md) | An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. |
+| [leakcanary.GcTrigger](../leakcanary/-gc-trigger/index.md) | [GcTrigger](../leakcanary/-gc-trigger/index.md) is used to try triggering garbage collection and enqueuing [KeyedWeakReference](../leakcanary/-keyed-weak-reference/index.md) into the associated [java.lang.ref.ReferenceQueue](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/ReferenceQueue.html). The default implementation [Default](../leakcanary/-gc-trigger/-default/index.md) comes from AOSP. |
+| [leakcanary.KeyedWeakReference](../leakcanary/-keyed-weak-reference/index.md) | A weak reference used by [ObjectWatcher](../leakcanary/-object-watcher/index.md) to determine which objects become weakly reachable and which don't. [ObjectWatcher](../leakcanary/-object-watcher/index.md) uses [key](../leakcanary/-keyed-weak-reference/key.md) to keep track of [KeyedWeakReference](../leakcanary/-keyed-weak-reference/index.md) instances that haven't made it into the associated [ReferenceQueue](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/ReferenceQueue.html) yet. |
+| [leakcanary.ObjectWatcher](../leakcanary/-object-watcher/index.md) | [ObjectWatcher](../leakcanary/-object-watcher/index.md) can be passed objects to [watch](../leakcanary/-object-watcher/watch.md). It will create [KeyedWeakReference](../leakcanary/-keyed-weak-reference/index.md) instances that reference watches objects, and check if those references have been cleared as expected on the [checkRetainedExecutor](#) executor. If not, these objects are considered retained and [ObjectWatcher](../leakcanary/-object-watcher/index.md) will then notify the [onObjectRetainedListener](#) on that executor thread. |
+| [leakcanary.OnObjectRetainedListener](../leakcanary/-on-object-retained-listener/index.md) | Listener used by [ObjectWatcher](../leakcanary/-object-watcher/index.md) to report retained objects. |
diff --git a/docs/api/leakcanary-object-watcher/index.md b/docs/api/leakcanary-object-watcher/index.md
new file mode 100644
index 00000000..4fad67a9
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/index.md
@@ -0,0 +1,11 @@
+[leakcanary-object-watcher](./index.md)
+
+### Packages
+
+| Name | Summary |
+|---|---|
+| [leakcanary](leakcanary/index.md) |  |
+
+### Index
+
+[All Types](alltypes/index.md)
\ No newline at end of file
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-clock/index.md b/docs/api/leakcanary-object-watcher/leakcanary/-clock/index.md
new file mode 100644
index 00000000..d2ad10d2
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-clock/index.md
@@ -0,0 +1,13 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [Clock](./index.md)
+
+# Clock
+
+`interface Clock`
+
+An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts.
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [uptimeMillis](uptime-millis.md) | `abstract fun uptimeMillis(): `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>On Android VMs, this should return android.os.SystemClock.uptimeMillis(). |
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-clock/uptime-millis.md b/docs/api/leakcanary-object-watcher/leakcanary/-clock/uptime-millis.md
new file mode 100644
index 00000000..83c2d3e3
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-clock/uptime-millis.md
@@ -0,0 +1,8 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [Clock](index.md) / [uptimeMillis](./uptime-millis.md)
+
+# uptimeMillis
+
+`abstract fun uptimeMillis(): `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+On Android VMs, this should return android.os.SystemClock.uptimeMillis().
+
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/index.md b/docs/api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/index.md
new file mode 100644
index 00000000..a078848d
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/index.md
@@ -0,0 +1,13 @@
+[leakcanary-object-watcher](../../../index.md) / [leakcanary](../../index.md) / [GcTrigger](../index.md) / [Default](./index.md)
+
+# Default
+
+`object Default : `[`GcTrigger`](../index.md)
+
+Default implementation of [GcTrigger](../index.md).
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [runGc](run-gc.md) | `fun runGc(): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Attempts to run garbage collection. |
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/run-gc.md b/docs/api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/run-gc.md
new file mode 100644
index 00000000..d5110d23
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/run-gc.md
@@ -0,0 +1,10 @@
+[leakcanary-object-watcher](../../../index.md) / [leakcanary](../../index.md) / [GcTrigger](../index.md) / [Default](index.md) / [runGc](./run-gc.md)
+
+# runGc
+
+`fun runGc(): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Overrides [GcTrigger.runGc](../run-gc.md)
+
+Attempts to run garbage collection.
+
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-gc-trigger/index.md b/docs/api/leakcanary-object-watcher/leakcanary/-gc-trigger/index.md
new file mode 100644
index 00000000..f9da4107
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-gc-trigger/index.md
@@ -0,0 +1,27 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [GcTrigger](./index.md)
+
+# GcTrigger
+
+`interface GcTrigger`
+
+[GcTrigger](./index.md) is used to try triggering garbage collection and enqueuing [KeyedWeakReference](../-keyed-weak-reference/index.md) into
+the associated [java.lang.ref.ReferenceQueue](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/ReferenceQueue.html). The default implementation [Default](-default/index.md) comes from
+AOSP.
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [Default](-default/index.md) | `object Default : `[`GcTrigger`](./index.md)<br>Default implementation of [GcTrigger](./index.md). |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [runGc](run-gc.md) | `abstract fun runGc(): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Attempts to run garbage collection. |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [Default](-default/index.md) | `object Default : `[`GcTrigger`](./index.md)<br>Default implementation of [GcTrigger](./index.md). |
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-gc-trigger/run-gc.md b/docs/api/leakcanary-object-watcher/leakcanary/-gc-trigger/run-gc.md
new file mode 100644
index 00000000..bde4366f
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-gc-trigger/run-gc.md
@@ -0,0 +1,8 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [GcTrigger](index.md) / [runGc](./run-gc.md)
+
+# runGc
+
+`abstract fun runGc(): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Attempts to run garbage collection.
+
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/-init-.md b/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/-init-.md
new file mode 100644
index 00000000..66d519b6
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/-init-.md
@@ -0,0 +1,13 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [KeyedWeakReference](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`KeyedWeakReference(referent: `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`, key: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, name: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, watchUptimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, referenceQueue: `[`ReferenceQueue`](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/ReferenceQueue.html)`<`[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`>)`
+
+A weak reference used by [ObjectWatcher](../-object-watcher/index.md) to determine which objects become weakly reachable
+and which don't. [ObjectWatcher](../-object-watcher/index.md) uses [key](key.md) to keep track of [KeyedWeakReference](index.md) instances that
+haven't made it into the associated [ReferenceQueue](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/ReferenceQueue.html) yet.
+
+[heapDumpUptimeMillis](heap-dump-uptime-millis.md) should be set with the current time from [Clock.uptimeMillis](../-clock/uptime-millis.md) right
+before dumping the heap, so that we can later determine how long an object was retained.
+
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/heap-dump-uptime-millis.md b/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/heap-dump-uptime-millis.md
new file mode 100644
index 00000000..50a3d274
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/heap-dump-uptime-millis.md
@@ -0,0 +1,5 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [KeyedWeakReference](index.md) / [heapDumpUptimeMillis](./heap-dump-uptime-millis.md)
+
+# heapDumpUptimeMillis
+
+`@JvmStatic var heapDumpUptimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/index.md b/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/index.md
new file mode 100644
index 00000000..d88b86c8
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/index.md
@@ -0,0 +1,33 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [KeyedWeakReference](./index.md)
+
+# KeyedWeakReference
+
+`class KeyedWeakReference : `[`WeakReference`](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/WeakReference.html)`<`[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`>`
+
+A weak reference used by [ObjectWatcher](../-object-watcher/index.md) to determine which objects become weakly reachable
+and which don't. [ObjectWatcher](../-object-watcher/index.md) uses [key](key.md) to keep track of [KeyedWeakReference](./index.md) instances that
+haven't made it into the associated [ReferenceQueue](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/ReferenceQueue.html) yet.
+
+[heapDumpUptimeMillis](heap-dump-uptime-millis.md) should be set with the current time from [Clock.uptimeMillis](../-clock/uptime-millis.md) right
+before dumping the heap, so that we can later determine how long an object was retained.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `KeyedWeakReference(referent: `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`, key: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, name: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, watchUptimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, referenceQueue: `[`ReferenceQueue`](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/ReferenceQueue.html)`<`[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`>)`<br>A weak reference used by [ObjectWatcher](../-object-watcher/index.md) to determine which objects become weakly reachable and which don't. [ObjectWatcher](../-object-watcher/index.md) uses [key](key.md) to keep track of [KeyedWeakReference](./index.md) instances that haven't made it into the associated [ReferenceQueue](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/ReferenceQueue.html) yet. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [key](key.md) | `val key: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+| [name](name.md) | `val name: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+| [retainedUptimeMillis](retained-uptime-millis.md) | `var retainedUptimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>Time at which the associated object ([referent](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/WeakReference.html#referent)) was considered retained, or -1 if it hasn't been yet. |
+| [watchUptimeMillis](watch-uptime-millis.md) | `val watchUptimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+
+### Companion Object Properties
+
+| Name | Summary |
+|---|---|
+| [heapDumpUptimeMillis](heap-dump-uptime-millis.md) | `var heapDumpUptimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/key.md b/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/key.md
new file mode 100644
index 00000000..3757805a
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/key.md
@@ -0,0 +1,5 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [KeyedWeakReference](index.md) / [key](./key.md)
+
+# key
+
+`val key: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/name.md b/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/name.md
new file mode 100644
index 00000000..ce100a79
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/name.md
@@ -0,0 +1,5 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [KeyedWeakReference](index.md) / [name](./name.md)
+
+# name
+
+`val name: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/retained-uptime-millis.md b/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/retained-uptime-millis.md
new file mode 100644
index 00000000..6e25e85c
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/retained-uptime-millis.md
@@ -0,0 +1,9 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [KeyedWeakReference](index.md) / [retainedUptimeMillis](./retained-uptime-millis.md)
+
+# retainedUptimeMillis
+
+`var retainedUptimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Time at which the associated object ([referent](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/WeakReference.html#referent)) was considered retained, or -1 if it hasn't
+been yet.
+
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/watch-uptime-millis.md b/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/watch-uptime-millis.md
new file mode 100644
index 00000000..7590a067
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/watch-uptime-millis.md
@@ -0,0 +1,5 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [KeyedWeakReference](index.md) / [watchUptimeMillis](./watch-uptime-millis.md)
+
+# watchUptimeMillis
+
+`val watchUptimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/-init-.md b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/-init-.md
new file mode 100644
index 00000000..ac9ace3b
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/-init-.md
@@ -0,0 +1,16 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [ObjectWatcher](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`ObjectWatcher(clock: `[`Clock`](../-clock/index.md)`, checkRetainedExecutor: `[`Executor`](https://docs.oracle.com/javase/6/docs/api/java/util/concurrent/Executor.html)`, isEnabled: () -> `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = { true })`
+
+[ObjectWatcher](index.md) can be passed objects to [watch](watch.md). It will create [KeyedWeakReference](../-keyed-weak-reference/index.md) instances
+that reference watches objects, and check if those references have been cleared as expected on
+the [checkRetainedExecutor](#) executor. If not, these objects are considered retained and
+[ObjectWatcher](index.md) will then notify the [onObjectRetainedListener](#) on that executor thread.
+
+[checkRetainedExecutor](#) is expected to run its tasks on a background thread, with a significant
+to give the GC the opportunity to identify weakly reachable objects.
+
+[ObjectWatcher](index.md) is thread safe.
+
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/add-on-object-retained-listener.md b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/add-on-object-retained-listener.md
new file mode 100644
index 00000000..a0d9c5aa
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/add-on-object-retained-listener.md
@@ -0,0 +1,5 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [ObjectWatcher](index.md) / [addOnObjectRetainedListener](./add-on-object-retained-listener.md)
+
+# addOnObjectRetainedListener
+
+`@Synchronized fun addOnObjectRetainedListener(listener: `[`OnObjectRetainedListener`](../-on-object-retained-listener/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-objects-watched-before.md b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-objects-watched-before.md
new file mode 100644
index 00000000..de599fab
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-objects-watched-before.md
@@ -0,0 +1,9 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [ObjectWatcher](index.md) / [clearObjectsWatchedBefore](./clear-objects-watched-before.md)
+
+# clearObjectsWatchedBefore
+
+`@Synchronized fun clearObjectsWatchedBefore(heapDumpUptimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Clears all [KeyedWeakReference](../-keyed-weak-reference/index.md) that were created before [heapDumpUptimeMillis](clear-objects-watched-before.md#leakcanary.ObjectWatcher$clearObjectsWatchedBefore(kotlin.Long)/heapDumpUptimeMillis) (based on
+[clock](../-clock/uptime-millis.md))
+
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-watched-objects.md b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-watched-objects.md
new file mode 100644
index 00000000..08b7aa8f
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-watched-objects.md
@@ -0,0 +1,8 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [ObjectWatcher](index.md) / [clearWatchedObjects](./clear-watched-objects.md)
+
+# clearWatchedObjects
+
+`@Synchronized fun clearWatchedObjects(): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Clears all [KeyedWeakReference](../-keyed-weak-reference/index.md)
+
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/has-retained-objects.md b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/has-retained-objects.md
new file mode 100644
index 00000000..aa973f51
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/has-retained-objects.md
@@ -0,0 +1,9 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [ObjectWatcher](index.md) / [hasRetainedObjects](./has-retained-objects.md)
+
+# hasRetainedObjects
+
+`val hasRetainedObjects: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Returns true if there are watched objects that aren't weakly reachable, and
+have been watched for long enough to be considered retained.
+
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/has-watched-objects.md b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/has-watched-objects.md
new file mode 100644
index 00000000..06401844
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/has-watched-objects.md
@@ -0,0 +1,9 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [ObjectWatcher](index.md) / [hasWatchedObjects](./has-watched-objects.md)
+
+# hasWatchedObjects
+
+`val hasWatchedObjects: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Returns true if there are watched objects that aren't weakly reachable, even
+if they haven't been watched for long enough to be considered retained.
+
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/index.md b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/index.md
new file mode 100644
index 00000000..fec9126d
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/index.md
@@ -0,0 +1,40 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [ObjectWatcher](./index.md)
+
+# ObjectWatcher
+
+`class ObjectWatcher`
+
+[ObjectWatcher](./index.md) can be passed objects to [watch](watch.md). It will create [KeyedWeakReference](../-keyed-weak-reference/index.md) instances
+that reference watches objects, and check if those references have been cleared as expected on
+the [checkRetainedExecutor](#) executor. If not, these objects are considered retained and
+[ObjectWatcher](./index.md) will then notify the [onObjectRetainedListener](#) on that executor thread.
+
+[checkRetainedExecutor](#) is expected to run its tasks on a background thread, with a significant
+to give the GC the opportunity to identify weakly reachable objects.
+
+[ObjectWatcher](./index.md) is thread safe.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `ObjectWatcher(clock: `[`Clock`](../-clock/index.md)`, checkRetainedExecutor: `[`Executor`](https://docs.oracle.com/javase/6/docs/api/java/util/concurrent/Executor.html)`, isEnabled: () -> `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = { true })`<br>[ObjectWatcher](./index.md) can be passed objects to [watch](watch.md). It will create [KeyedWeakReference](../-keyed-weak-reference/index.md) instances that reference watches objects, and check if those references have been cleared as expected on the [checkRetainedExecutor](#) executor. If not, these objects are considered retained and [ObjectWatcher](./index.md) will then notify the [onObjectRetainedListener](#) on that executor thread. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [hasRetainedObjects](has-retained-objects.md) | `val hasRetainedObjects: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Returns true if there are watched objects that aren't weakly reachable, and have been watched for long enough to be considered retained. |
+| [hasWatchedObjects](has-watched-objects.md) | `val hasWatchedObjects: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Returns true if there are watched objects that aren't weakly reachable, even if they haven't been watched for long enough to be considered retained. |
+| [retainedObjectCount](retained-object-count.md) | `val retainedObjectCount: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>Returns the number of retained objects, ie the number of watched objects that aren't weakly reachable, and have been watched for long enough to be considered retained. |
+| [retainedObjects](retained-objects.md) | `val retainedObjects: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`>`<br>Returns the objects that are currently considered retained. Useful for logging purposes. Be careful with those objects and release them ASAP as you may creating longer lived leaks then the one that are already there. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [addOnObjectRetainedListener](add-on-object-retained-listener.md) | `fun addOnObjectRetainedListener(listener: `[`OnObjectRetainedListener`](../-on-object-retained-listener/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+| [clearObjectsWatchedBefore](clear-objects-watched-before.md) | `fun clearObjectsWatchedBefore(heapDumpUptimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Clears all [KeyedWeakReference](../-keyed-weak-reference/index.md) that were created before [heapDumpUptimeMillis](clear-objects-watched-before.md#leakcanary.ObjectWatcher$clearObjectsWatchedBefore(kotlin.Long)/heapDumpUptimeMillis) (based on [clock](../-clock/uptime-millis.md)) |
+| [clearWatchedObjects](clear-watched-objects.md) | `fun clearWatchedObjects(): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Clears all [KeyedWeakReference](../-keyed-weak-reference/index.md) |
+| [removeOnObjectRetainedListener](remove-on-object-retained-listener.md) | `fun removeOnObjectRetainedListener(listener: `[`OnObjectRetainedListener`](../-on-object-retained-listener/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+| [watch](watch.md) | `fun watch(watchedObject: `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Identical to [watch](watch.md) with an empty string reference name.`fun watch(watchedObject: `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`, name: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Watches the provided [watchedObject](watch.md#leakcanary.ObjectWatcher$watch(kotlin.Any, kotlin.String)/watchedObject). |
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/remove-on-object-retained-listener.md b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/remove-on-object-retained-listener.md
new file mode 100644
index 00000000..f5e94007
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/remove-on-object-retained-listener.md
@@ -0,0 +1,5 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [ObjectWatcher](index.md) / [removeOnObjectRetainedListener](./remove-on-object-retained-listener.md)
+
+# removeOnObjectRetainedListener
+
+`@Synchronized fun removeOnObjectRetainedListener(listener: `[`OnObjectRetainedListener`](../-on-object-retained-listener/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-object-count.md b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-object-count.md
new file mode 100644
index 00000000..78cd8918
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-object-count.md
@@ -0,0 +1,9 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [ObjectWatcher](index.md) / [retainedObjectCount](./retained-object-count.md)
+
+# retainedObjectCount
+
+`val retainedObjectCount: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Returns the number of retained objects, ie the number of watched objects that aren't weakly
+reachable, and have been watched for long enough to be considered retained.
+
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-objects.md b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-objects.md
new file mode 100644
index 00000000..5b3ad5bb
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-objects.md
@@ -0,0 +1,10 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [ObjectWatcher](index.md) / [retainedObjects](./retained-objects.md)
+
+# retainedObjects
+
+`val retainedObjects: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`>`
+
+Returns the objects that are currently considered retained. Useful for logging purposes.
+Be careful with those objects and release them ASAP as you may creating longer lived leaks
+then the one that are already there.
+
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/watch.md b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/watch.md
new file mode 100644
index 00000000..eb6aee84
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-object-watcher/watch.md
@@ -0,0 +1,15 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [ObjectWatcher](index.md) / [watch](./watch.md)
+
+# watch
+
+`@Synchronized fun watch(watchedObject: `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Identical to [watch](./watch.md) with an empty string reference name.
+
+`@Synchronized fun watch(watchedObject: `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`, name: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Watches the provided [watchedObject](watch.md#leakcanary.ObjectWatcher$watch(kotlin.Any, kotlin.String)/watchedObject).
+
+### Parameters
+
+`name` - A logical identifier for the watched object.
\ No newline at end of file
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/index.md b/docs/api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/index.md
new file mode 100644
index 00000000..6f7d88a7
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/index.md
@@ -0,0 +1,19 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [OnObjectRetainedListener](./index.md)
+
+# OnObjectRetainedListener
+
+`interface OnObjectRetainedListener`
+
+Listener used by [ObjectWatcher](../-object-watcher/index.md) to report retained objects.
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [onObjectRetained](on-object-retained.md) | `abstract fun onObjectRetained(): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>A watched object became retained. |
+
+### Companion Object Functions
+
+| Name | Summary |
+|---|---|
+| [invoke](invoke.md) | `operator fun invoke(block: () -> `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)`): `[`OnObjectRetainedListener`](./index.md)<br>Utility function to create a [OnObjectRetainedListener](./index.md) from the passed in [block](invoke.md#leakcanary.OnObjectRetainedListener.Companion$invoke(kotlin.Function0((kotlin.Unit)))/block) lambda instead of using the anonymous `object : OnObjectRetainedListener` syntax. |
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/invoke.md b/docs/api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/invoke.md
new file mode 100644
index 00000000..7b8dd4f4
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/invoke.md
@@ -0,0 +1,17 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [OnObjectRetainedListener](index.md) / [invoke](./invoke.md)
+
+# invoke
+
+`inline operator fun invoke(crossinline block: () -> `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)`): `[`OnObjectRetainedListener`](index.md)
+
+Utility function to create a [OnObjectRetainedListener](index.md) from the passed in [block](invoke.md#leakcanary.OnObjectRetainedListener.Companion$invoke(kotlin.Function0((kotlin.Unit)))/block) lambda
+instead of using the anonymous `object : OnObjectRetainedListener` syntax.
+
+Usage:
+
+``` kotlin
+val listener = OnObjectRetainedListener {
+
+}
+```
+
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/on-object-retained.md b/docs/api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/on-object-retained.md
new file mode 100644
index 00000000..552881ae
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/on-object-retained.md
@@ -0,0 +1,8 @@
+[leakcanary-object-watcher](../../index.md) / [leakcanary](../index.md) / [OnObjectRetainedListener](index.md) / [onObjectRetained](./on-object-retained.md)
+
+# onObjectRetained
+
+`abstract fun onObjectRetained(): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+A watched object became retained.
+
diff --git a/docs/api/leakcanary-object-watcher/leakcanary/index.md b/docs/api/leakcanary-object-watcher/leakcanary/index.md
new file mode 100644
index 00000000..04452fd5
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/leakcanary/index.md
@@ -0,0 +1,13 @@
+[leakcanary-object-watcher](../index.md) / [leakcanary](./index.md)
+
+## Package leakcanary
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [Clock](-clock/index.md) | `interface Clock`<br>An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. |
+| [GcTrigger](-gc-trigger/index.md) | `interface GcTrigger`<br>[GcTrigger](-gc-trigger/index.md) is used to try triggering garbage collection and enqueuing [KeyedWeakReference](-keyed-weak-reference/index.md) into the associated [java.lang.ref.ReferenceQueue](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/ReferenceQueue.html). The default implementation [Default](-gc-trigger/-default/index.md) comes from AOSP. |
+| [KeyedWeakReference](-keyed-weak-reference/index.md) | `class KeyedWeakReference : `[`WeakReference`](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/WeakReference.html)`<`[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`>`<br>A weak reference used by [ObjectWatcher](-object-watcher/index.md) to determine which objects become weakly reachable and which don't. [ObjectWatcher](-object-watcher/index.md) uses [key](-keyed-weak-reference/key.md) to keep track of [KeyedWeakReference](-keyed-weak-reference/index.md) instances that haven't made it into the associated [ReferenceQueue](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/ReferenceQueue.html) yet. |
+| [ObjectWatcher](-object-watcher/index.md) | `class ObjectWatcher`<br>[ObjectWatcher](-object-watcher/index.md) can be passed objects to [watch](-object-watcher/watch.md). It will create [KeyedWeakReference](-keyed-weak-reference/index.md) instances that reference watches objects, and check if those references have been cleared as expected on the [checkRetainedExecutor](#) executor. If not, these objects are considered retained and [ObjectWatcher](-object-watcher/index.md) will then notify the [onObjectRetainedListener](#) on that executor thread. |
+| [OnObjectRetainedListener](-on-object-retained-listener/index.md) | `interface OnObjectRetainedListener`<br>Listener used by [ObjectWatcher](-object-watcher/index.md) to report retained objects. |
diff --git a/docs/api/leakcanary-object-watcher/package-list b/docs/api/leakcanary-object-watcher/package-list
new file mode 100644
index 00000000..e886de54
--- /dev/null
+++ b/docs/api/leakcanary-object-watcher/package-list
@@ -0,0 +1,4 @@
+$dokka.format:gfm
+$dokka.linkExtension:md
+
+leakcanary
diff --git a/docs/api/shark-android/alltypes/index.md b/docs/api/shark-android/alltypes/index.md
new file mode 100644
index 00000000..b64af2fb
--- /dev/null
+++ b/docs/api/shark-android/alltypes/index.md
@@ -0,0 +1,9 @@
+
+
+### All Types
+
+| Name | Summary |
+|---|---|
+| [shark.AndroidBuildMirror](../shark/-android-build-mirror/index.md) | Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via [fromHeapGraph](../shark/-android-build-mirror/from-heap-graph.md). |
+| [shark.AndroidObjectInspectors](../shark/-android-object-inspectors/index.md) | A set of default [ObjectInspector](#)s that knows about common AOSP and library classes. |
+| [shark.AndroidReferenceMatchers](../shark/-android-reference-matchers/index.md) | [AndroidReferenceMatchers](../shark/-android-reference-matchers/index.md) values add [ReferenceMatcher](#) instances to a global list via their [add](#) method. A [ReferenceMatcher](#) is either a [IgnoredReferenceMatcher](#) or a [LibraryLeakReferenceMatcher](#). |
diff --git a/docs/api/shark-android/index.md b/docs/api/shark-android/index.md
new file mode 100644
index 00000000..7d6042a4
--- /dev/null
+++ b/docs/api/shark-android/index.md
@@ -0,0 +1,11 @@
+[shark-android](./index.md)
+
+### Packages
+
+| Name | Summary |
+|---|---|
+| [shark](shark/index.md) |  |
+
+### Index
+
+[All Types](alltypes/index.md)
\ No newline at end of file
diff --git a/docs/api/shark-android/package-list b/docs/api/shark-android/package-list
new file mode 100644
index 00000000..415577c3
--- /dev/null
+++ b/docs/api/shark-android/package-list
@@ -0,0 +1,4 @@
+$dokka.format:gfm
+$dokka.linkExtension:md
+
+shark
diff --git a/docs/api/shark-android/shark/-android-build-mirror/-init-.md b/docs/api/shark-android/shark/-android-build-mirror/-init-.md
new file mode 100644
index 00000000..4725bac3
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-build-mirror/-init-.md
@@ -0,0 +1,9 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidBuildMirror](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`AndroidBuildMirror(manufacturer: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, sdkInt: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)`
+
+Caches values from the android.os.Build class in the heap dump.
+Retrieve a cached instances via [fromHeapGraph](from-heap-graph.md).
+
diff --git a/docs/api/shark-android/shark/-android-build-mirror/from-heap-graph.md b/docs/api/shark-android/shark/-android-build-mirror/from-heap-graph.md
new file mode 100644
index 00000000..ca98f4cb
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-build-mirror/from-heap-graph.md
@@ -0,0 +1,10 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidBuildMirror](index.md) / [fromHeapGraph](./from-heap-graph.md)
+
+# fromHeapGraph
+
+`fun fromHeapGraph(graph: HeapGraph): `[`AndroidBuildMirror`](index.md)
+
+**See Also**
+
+[AndroidBuildMirror](index.md)
+
diff --git a/docs/api/shark-android/shark/-android-build-mirror/index.md b/docs/api/shark-android/shark/-android-build-mirror/index.md
new file mode 100644
index 00000000..3db12553
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-build-mirror/index.md
@@ -0,0 +1,27 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidBuildMirror](./index.md)
+
+# AndroidBuildMirror
+
+`class AndroidBuildMirror`
+
+Caches values from the android.os.Build class in the heap dump.
+Retrieve a cached instances via [fromHeapGraph](from-heap-graph.md).
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `AndroidBuildMirror(manufacturer: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, sdkInt: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)`<br>Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via [fromHeapGraph](from-heap-graph.md). |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [manufacturer](manufacturer.md) | `val manufacturer: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>Value of android.os.Build.MANUFACTURER |
+| [sdkInt](sdk-int.md) | `val sdkInt: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>Value of android.os.Build.VERSION.SDK_INT |
+
+### Companion Object Functions
+
+| Name | Summary |
+|---|---|
+| [fromHeapGraph](from-heap-graph.md) | `fun fromHeapGraph(graph: HeapGraph): `[`AndroidBuildMirror`](./index.md) |
diff --git a/docs/api/shark-android/shark/-android-build-mirror/manufacturer.md b/docs/api/shark-android/shark/-android-build-mirror/manufacturer.md
new file mode 100644
index 00000000..19a6ce74
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-build-mirror/manufacturer.md
@@ -0,0 +1,8 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidBuildMirror](index.md) / [manufacturer](./manufacturer.md)
+
+# manufacturer
+
+`val manufacturer: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+Value of android.os.Build.MANUFACTURER
+
diff --git a/docs/api/shark-android/shark/-android-build-mirror/sdk-int.md b/docs/api/shark-android/shark/-android-build-mirror/sdk-int.md
new file mode 100644
index 00000000..8cec616c
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-build-mirror/sdk-int.md
@@ -0,0 +1,8 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidBuildMirror](index.md) / [sdkInt](./sdk-int.md)
+
+# sdkInt
+
+`val sdkInt: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Value of android.os.Build.VERSION.SDK_INT
+
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/index.md
new file mode 100644
index 00000000..d3521990
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [ACTIVITY](./index.md)
+
+# ACTIVITY
+
+`ACTIVITY`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/inspect.md
new file mode 100644
index 00000000..abcb5741
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [ACTIVITY](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/index.md
new file mode 100644
index 00000000..bb44c283
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [ANDROIDX_FRAGMENT](./index.md)
+
+# ANDROIDX_FRAGMENT
+
+`ANDROIDX_FRAGMENT`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/inspect.md
new file mode 100644
index 00000000..51b592c9
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [ANDROIDX_FRAGMENT](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/index.md
new file mode 100644
index 00000000..b9a7baff
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [APPLICATION](./index.md)
+
+# APPLICATION
+
+`APPLICATION`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/inspect.md
new file mode 100644
index 00000000..accac49c
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [APPLICATION](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/index.md
new file mode 100644
index 00000000..e40dfe6e
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [CONTEXT_WRAPPER](./index.md)
+
+# CONTEXT_WRAPPER
+
+`CONTEXT_WRAPPER`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/inspect.md
new file mode 100644
index 00000000..47a67e17
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [CONTEXT_WRAPPER](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/index.md
new file mode 100644
index 00000000..ffcffb82
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [COORDINATOR](./index.md)
+
+# COORDINATOR
+
+`COORDINATOR`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/inspect.md
new file mode 100644
index 00000000..d8e955b7
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [COORDINATOR](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/index.md
new file mode 100644
index 00000000..9dd5cdf7
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [DIALOG](./index.md)
+
+# DIALOG
+
+`DIALOG`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/inspect.md
new file mode 100644
index 00000000..1cc99533
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [DIALOG](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/index.md
new file mode 100644
index 00000000..444b5b13
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [EDITOR](./index.md)
+
+# EDITOR
+
+`EDITOR`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/inspect.md
new file mode 100644
index 00000000..786404fd
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [EDITOR](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/index.md
new file mode 100644
index 00000000..dda93fae
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [FRAGMENT](./index.md)
+
+# FRAGMENT
+
+`FRAGMENT`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/inspect.md
new file mode 100644
index 00000000..d39e5361
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [FRAGMENT](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/index.md
new file mode 100644
index 00000000..9f212e2b
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [INPUT_METHOD_MANAGER](./index.md)
+
+# INPUT_METHOD_MANAGER
+
+`INPUT_METHOD_MANAGER`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/inspect.md
new file mode 100644
index 00000000..e35fd12d
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [INPUT_METHOD_MANAGER](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/index.md
new file mode 100644
index 00000000..3ae50fc0
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [MAIN_THREAD](./index.md)
+
+# MAIN_THREAD
+
+`MAIN_THREAD`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/inspect.md
new file mode 100644
index 00000000..bf2b1455
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [MAIN_THREAD](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/index.md
new file mode 100644
index 00000000..af4479cf
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [MESSAGE_QUEUE](./index.md)
+
+# MESSAGE_QUEUE
+
+`MESSAGE_QUEUE`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/inspect.md
new file mode 100644
index 00000000..05bfe09d
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [MESSAGE_QUEUE](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/index.md
new file mode 100644
index 00000000..520d5746
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [MORTAR_PRESENTER](./index.md)
+
+# MORTAR_PRESENTER
+
+`MORTAR_PRESENTER`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/inspect.md
new file mode 100644
index 00000000..ed1d3517
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [MORTAR_PRESENTER](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/index.md
new file mode 100644
index 00000000..e6dc3b0a
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [MORTAR_SCOPE](./index.md)
+
+# MORTAR_SCOPE
+
+`MORTAR_SCOPE`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/inspect.md
new file mode 100644
index 00000000..4038066a
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [MORTAR_SCOPE](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/index.md
new file mode 100644
index 00000000..43f2bfc1
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [SUPPORT_FRAGMENT](./index.md)
+
+# SUPPORT_FRAGMENT
+
+`SUPPORT_FRAGMENT`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/inspect.md
new file mode 100644
index 00000000..8075d150
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [SUPPORT_FRAGMENT](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/index.md
new file mode 100644
index 00000000..919584bc
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [TOAST](./index.md)
+
+# TOAST
+
+`TOAST`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/inspect.md
new file mode 100644
index 00000000..cc3b3075
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [TOAST](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-v-i-e-w/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-v-i-e-w/index.md
new file mode 100644
index 00000000..e1e9a2d3
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-v-i-e-w/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [VIEW](./index.md)
+
+# VIEW
+
+`VIEW`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-v-i-e-w/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-v-i-e-w/inspect.md
new file mode 100644
index 00000000..4dad68bd
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-v-i-e-w/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [VIEW](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/index.md
new file mode 100644
index 00000000..df91cfa0
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [VIEW_ROOT_IMPL](./index.md)
+
+# VIEW_ROOT_IMPL
+
+`VIEW_ROOT_IMPL`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/inspect.md
new file mode 100644
index 00000000..6f782611
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [VIEW_ROOT_IMPL](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/index.md b/docs/api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/index.md
new file mode 100644
index 00000000..010fc8ff
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/index.md
@@ -0,0 +1,11 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [WINDOW](./index.md)
+
+# WINDOW
+
+`WINDOW`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/inspect.md b/docs/api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/inspect.md
new file mode 100644
index 00000000..1fabd10a
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/inspect.md
@@ -0,0 +1,5 @@
+[shark-android](../../../index.md) / [shark](../../index.md) / [AndroidObjectInspectors](../index.md) / [WINDOW](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: ObjectReporter): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/app-defaults.md b/docs/api/shark-android/shark/-android-object-inspectors/app-defaults.md
new file mode 100644
index 00000000..bed6aebc
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/app-defaults.md
@@ -0,0 +1,10 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidObjectInspectors](index.md) / [appDefaults](./app-defaults.md)
+
+# appDefaults
+
+`val appDefaults: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<ObjectInspector>`
+
+**See Also**
+
+[AndroidObjectInspectors](index.md)
+
diff --git a/docs/api/shark-android/shark/-android-object-inspectors/index.md b/docs/api/shark-android/shark/-android-object-inspectors/index.md
new file mode 100644
index 00000000..7a7eb341
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-object-inspectors/index.md
@@ -0,0 +1,47 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidObjectInspectors](./index.md)
+
+# AndroidObjectInspectors
+
+`enum class AndroidObjectInspectors : ObjectInspector`
+
+A set of default [ObjectInspector](#)s that knows about common AOSP and library
+classes.
+
+These are heuristics based on our experience and knowledge of AOSP and various library
+internals. We only make a decision if we're reasonably sure the state of an object is
+unlikely to be the result of a programmer mistake.
+
+For example, no matter how many mistakes we make in our code, the value of Activity.mDestroy
+will not be influenced by those mistakes.
+
+Most developers should use the entire set of default [ObjectInspector](#) by calling [appDefaults](app-defaults.md),
+unless there's a bug and you temporarily want to remove an inspector.
+
+### Enum Values
+
+| Name | Summary |
+|---|---|
+| [VIEW](-v-i-e-w/index.md) |  |
+| [EDITOR](-e-d-i-t-o-r/index.md) |  |
+| [ACTIVITY](-a-c-t-i-v-i-t-y/index.md) |  |
+| [CONTEXT_WRAPPER](-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/index.md) |  |
+| [DIALOG](-d-i-a-l-o-g/index.md) |  |
+| [APPLICATION](-a-p-p-l-i-c-a-t-i-o-n/index.md) |  |
+| [INPUT_METHOD_MANAGER](-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/index.md) |  |
+| [FRAGMENT](-f-r-a-g-m-e-n-t/index.md) |  |
+| [SUPPORT_FRAGMENT](-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/index.md) |  |
+| [ANDROIDX_FRAGMENT](-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/index.md) |  |
+| [MESSAGE_QUEUE](-m-e-s-s-a-g-e_-q-u-e-u-e/index.md) |  |
+| [MORTAR_PRESENTER](-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/index.md) |  |
+| [MORTAR_SCOPE](-m-o-r-t-a-r_-s-c-o-p-e/index.md) |  |
+| [COORDINATOR](-c-o-o-r-d-i-n-a-t-o-r/index.md) |  |
+| [MAIN_THREAD](-m-a-i-n_-t-h-r-e-a-d/index.md) |  |
+| [VIEW_ROOT_IMPL](-v-i-e-w_-r-o-o-t_-i-m-p-l/index.md) |  |
+| [WINDOW](-w-i-n-d-o-w/index.md) |  |
+| [TOAST](-t-o-a-s-t/index.md) |  |
+
+### Companion Object Properties
+
+| Name | Summary |
+|---|---|
+| [appDefaults](app-defaults.md) | `val appDefaults: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<ObjectInspector>` |
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-d_-m-a-n-a-g-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-d_-m-a-n-a-g-e-r.md
new file mode 100644
index 00000000..c5bcce5b
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-d_-m-a-n-a-g-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [ACCESSIBILITY_NODE_ID_MANAGER](./-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-d_-m-a-n-a-g-e-r.md)
+
+# ACCESSIBILITY_NODE_ID_MANAGER
+
+`ACCESSIBILITY_NODE_ID_MANAGER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-n-f-o__-m-o-r-i-g-i-n-a-l-t-e-x-t.md b/docs/api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-n-f-o__-m-o-r-i-g-i-n-a-l-t-e-x-t.md
new file mode 100644
index 00000000..8c7bffb4
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-n-f-o__-m-o-r-i-g-i-n-a-l-t-e-x-t.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [ACCESSIBILITY_NODE_INFO__MORIGINALTEXT](./-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-n-f-o__-m-o-r-i-g-i-n-a-l-t-e-x-t.md)
+
+# ACCESSIBILITY_NODE_INFO__MORIGINALTEXT
+
+`ACCESSIBILITY_NODE_INFO__MORIGINALTEXT`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-a-c-c-o-u-n-t_-m-a-n-a-g-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-a-c-c-o-u-n-t_-m-a-n-a-g-e-r.md
new file mode 100644
index 00000000..e1dc5586
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-a-c-c-o-u-n-t_-m-a-n-a-g-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [ACCOUNT_MANAGER](./-a-c-c-o-u-n-t_-m-a-n-a-g-e-r.md)
+
+# ACCOUNT_MANAGER
+
+`ACCOUNT_MANAGER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-h-o-o-s-e_-m-o-d-e-l.md b/docs/api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-h-o-o-s-e_-m-o-d-e-l.md
new file mode 100644
index 00000000..5cce0b2a
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-h-o-o-s-e_-m-o-d-e-l.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [ACTIVITY_CHOOSE_MODEL](./-a-c-t-i-v-i-t-y_-c-h-o-o-s-e_-m-o-d-e-l.md)
+
+# ACTIVITY_CHOOSE_MODEL
+
+`ACTIVITY_CHOOSE_MODEL`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-l-i-e-n-t_-r-e-c-o-r-d__-n-e-x-t_-i-d-l-e.md b/docs/api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-l-i-e-n-t_-r-e-c-o-r-d__-n-e-x-t_-i-d-l-e.md
new file mode 100644
index 00000000..bb30d9ac
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-l-i-e-n-t_-r-e-c-o-r-d__-n-e-x-t_-i-d-l-e.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [ACTIVITY_CLIENT_RECORD__NEXT_IDLE](./-a-c-t-i-v-i-t-y_-c-l-i-e-n-t_-r-e-c-o-r-d__-n-e-x-t_-i-d-l-e.md)
+
+# ACTIVITY_CLIENT_RECORD__NEXT_IDLE
+
+`ACTIVITY_CLIENT_RECORD__NEXT_IDLE`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-m-a-n-a-g-e-r_-m-c-o-n-t-e-x-t.md b/docs/api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-m-a-n-a-g-e-r_-m-c-o-n-t-e-x-t.md
new file mode 100644
index 00000000..16d44ef7
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-m-a-n-a-g-e-r_-m-c-o-n-t-e-x-t.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [ACTIVITY_MANAGER_MCONTEXT](./-a-c-t-i-v-i-t-y_-m-a-n-a-g-e-r_-m-c-o-n-t-e-x-t.md)
+
+# ACTIVITY_MANAGER_MCONTEXT
+
+`ACTIVITY_MANAGER_MCONTEXT`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-a-p-p_-w-i-d-g-e-t_-h-o-s-t_-c-a-l-l-b-a-c-k-s.md b/docs/api/shark-android/shark/-android-reference-matchers/-a-p-p_-w-i-d-g-e-t_-h-o-s-t_-c-a-l-l-b-a-c-k-s.md
new file mode 100644
index 00000000..2d14504e
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-a-p-p_-w-i-d-g-e-t_-h-o-s-t_-c-a-l-l-b-a-c-k-s.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [APP_WIDGET_HOST_CALLBACKS](./-a-p-p_-w-i-d-g-e-t_-h-o-s-t_-c-a-l-l-b-a-c-k-s.md)
+
+# APP_WIDGET_HOST_CALLBACKS
+
+`APP_WIDGET_HOST_CALLBACKS`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r.md
new file mode 100644
index 00000000..2d9ce488
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [AUDIO_MANAGER](./-a-u-d-i-o_-m-a-n-a-g-e-r.md)
+
+# AUDIO_MANAGER
+
+`AUDIO_MANAGER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t_-s-t-a-t-i-c.md b/docs/api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t_-s-t-a-t-i-c.md
new file mode 100644
index 00000000..65043b81
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t_-s-t-a-t-i-c.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [AUDIO_MANAGER__MCONTEXT_STATIC](./-a-u-d-i-o_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t_-s-t-a-t-i-c.md)
+
+# AUDIO_MANAGER__MCONTEXT_STATIC
+
+`AUDIO_MANAGER__MCONTEXT_STATIC`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-a-w_-r-e-s-o-u-r-c-e__-s-r-e-s-o-u-r-c-e-s.md b/docs/api/shark-android/shark/-android-reference-matchers/-a-w_-r-e-s-o-u-r-c-e__-s-r-e-s-o-u-r-c-e-s.md
new file mode 100644
index 00000000..cf61a60b
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-a-w_-r-e-s-o-u-r-c-e__-s-r-e-s-o-u-r-c-e-s.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [AW_RESOURCE__SRESOURCES](./-a-w_-r-e-s-o-u-r-c-e__-s-r-e-s-o-u-r-c-e-s.md)
+
+# AW_RESOURCE__SRESOURCES
+
+`AW_RESOURCE__SRESOURCES`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-b-a-c-k-d-r-o-p_-f-r-a-m-e_-r-e-n-d-e-r-e-r__-m-d-e-c-o-r-v-i-e-w.md b/docs/api/shark-android/shark/-android-reference-matchers/-b-a-c-k-d-r-o-p_-f-r-a-m-e_-r-e-n-d-e-r-e-r__-m-d-e-c-o-r-v-i-e-w.md
new file mode 100644
index 00000000..35e79b31
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-b-a-c-k-d-r-o-p_-f-r-a-m-e_-r-e-n-d-e-r-e-r__-m-d-e-c-o-r-v-i-e-w.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [BACKDROP_FRAME_RENDERER__MDECORVIEW](./-b-a-c-k-d-r-o-p_-f-r-a-m-e_-r-e-n-d-e-r-e-r__-m-d-e-c-o-r-v-i-e-w.md)
+
+# BACKDROP_FRAME_RENDERER__MDECORVIEW
+
+`BACKDROP_FRAME_RENDERER__MDECORVIEW`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-b-i-o-m-e-t-r-i-c_-p-r-o-m-p-t.md b/docs/api/shark-android/shark/-android-reference-matchers/-b-i-o-m-e-t-r-i-c_-p-r-o-m-p-t.md
new file mode 100644
index 00000000..4a418f6a
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-b-i-o-m-e-t-r-i-c_-p-r-o-m-p-t.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [BIOMETRIC_PROMPT](./-b-i-o-m-e-t-r-i-c_-p-r-o-m-p-t.md)
+
+# BIOMETRIC_PROMPT
+
+`BIOMETRIC_PROMPT`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-b-l-o-c-k-i-n-g_-q-u-e-u-e.md b/docs/api/shark-android/shark/-android-reference-matchers/-b-l-o-c-k-i-n-g_-q-u-e-u-e.md
new file mode 100644
index 00000000..87ee7a80
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-b-l-o-c-k-i-n-g_-q-u-e-u-e.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [BLOCKING_QUEUE](./-b-l-o-c-k-i-n-g_-q-u-e-u-e.md)
+
+# BLOCKING_QUEUE
+
+`BLOCKING_QUEUE`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-b-u-b-b-l-e_-p-o-p-u-p_-h-e-l-p-e-r__-s-h-e-l-p-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-b-u-b-b-l-e_-p-o-p-u-p_-h-e-l-p-e-r__-s-h-e-l-p-e-r.md
new file mode 100644
index 00000000..6236421b
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-b-u-b-b-l-e_-p-o-p-u-p_-h-e-l-p-e-r__-s-h-e-l-p-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [BUBBLE_POPUP_HELPER__SHELPER](./-b-u-b-b-l-e_-p-o-p-u-p_-h-e-l-p-e-r__-s-h-e-l-p-e-r.md)
+
+# BUBBLE_POPUP_HELPER__SHELPER
+
+`BUBBLE_POPUP_HELPER__SHELPER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-c-h-a-n-g-e_-w-a-t-c-h-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-c-h-a-n-g-e_-w-a-t-c-h-e-r.md
new file mode 100644
index 00000000..00ad9647
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-c-h-a-n-g-e_-w-a-t-c-h-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [CHANGE_WATCHER](./-c-h-a-n-g-e_-w-a-t-c-h-e-r.md)
+
+# CHANGE_WATCHER
+
+`CHANGE_WATCHER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-e-x_-m-a-n-a-g-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-e-x_-m-a-n-a-g-e-r.md
new file mode 100644
index 00000000..39ddae4d
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-e-x_-m-a-n-a-g-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [CLIPBOARD_EX_MANAGER](./-c-l-i-p-b-o-a-r-d_-e-x_-m-a-n-a-g-e-r.md)
+
+# CLIPBOARD_EX_MANAGER
+
+`CLIPBOARD_EX_MANAGER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-u-i_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e.md b/docs/api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-u-i_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e.md
new file mode 100644
index 00000000..e3de3f16
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-u-i_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [CLIPBOARD_UI_MANAGER__SINSTANCE](./-c-l-i-p-b-o-a-r-d_-u-i_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e.md)
+
+# CLIPBOARD_UI_MANAGER__SINSTANCE
+
+`CLIPBOARD_UI_MANAGER__SINSTANCE`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-c-o-n-n-e-c-t-i-v-i-t-y_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e.md b/docs/api/shark-android/shark/-android-reference-matchers/-c-o-n-n-e-c-t-i-v-i-t-y_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e.md
new file mode 100644
index 00000000..60224478
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-c-o-n-n-e-c-t-i-v-i-t-y_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [CONNECTIVITY_MANAGER__SINSTANCE](./-c-o-n-n-e-c-t-i-v-i-t-y_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e.md)
+
+# CONNECTIVITY_MANAGER__SINSTANCE
+
+`CONNECTIVITY_MANAGER__SINSTANCE`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-d-e-v-i-c-e_-p-o-l-i-c-y_-m-a-n-a-g-e-r__-s-e-t-t-i-n-g-s_-o-b-s-e-r-v-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-d-e-v-i-c-e_-p-o-l-i-c-y_-m-a-n-a-g-e-r__-s-e-t-t-i-n-g-s_-o-b-s-e-r-v-e-r.md
new file mode 100644
index 00000000..d490eb31
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-d-e-v-i-c-e_-p-o-l-i-c-y_-m-a-n-a-g-e-r__-s-e-t-t-i-n-g-s_-o-b-s-e-r-v-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER](./-d-e-v-i-c-e_-p-o-l-i-c-y_-m-a-n-a-g-e-r__-s-e-t-t-i-n-g-s_-o-b-s-e-r-v-e-r.md)
+
+# DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER
+
+`DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-e-d-i-t-t-e-x-t_-b-l-i-n-k_-m-e-s-s-a-g-e-q-u-e-u-e.md b/docs/api/shark-android/shark/-android-reference-matchers/-e-d-i-t-t-e-x-t_-b-l-i-n-k_-m-e-s-s-a-g-e-q-u-e-u-e.md
new file mode 100644
index 00000000..6f507c6d
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-e-d-i-t-t-e-x-t_-b-l-i-n-k_-m-e-s-s-a-g-e-q-u-e-u-e.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [EDITTEXT_BLINK_MESSAGEQUEUE](./-e-d-i-t-t-e-x-t_-b-l-i-n-k_-m-e-s-s-a-g-e-q-u-e-u-e.md)
+
+# EDITTEXT_BLINK_MESSAGEQUEUE
+
+`EDITTEXT_BLINK_MESSAGEQUEUE`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-e-v-e-n-t_-r-e-c-e-i-v-e-r__-m-m-e-s-s-a-g-e_-q-u-e-u-e.md b/docs/api/shark-android/shark/-android-reference-matchers/-e-v-e-n-t_-r-e-c-e-i-v-e-r__-m-m-e-s-s-a-g-e_-q-u-e-u-e.md
new file mode 100644
index 00000000..6705018b
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-e-v-e-n-t_-r-e-c-e-i-v-e-r__-m-m-e-s-s-a-g-e_-q-u-e-u-e.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [EVENT_RECEIVER__MMESSAGE_QUEUE](./-e-v-e-n-t_-r-e-c-e-i-v-e-r__-m-m-e-s-s-a-g-e_-q-u-e-u-e.md)
+
+# EVENT_RECEIVER__MMESSAGE_QUEUE
+
+`EVENT_RECEIVER__MMESSAGE_QUEUE`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-f-i-n-a-l-i-z-e-r_-w-a-t-c-h-d-o-g_-d-a-e-m-o-n.md b/docs/api/shark-android/shark/-android-reference-matchers/-f-i-n-a-l-i-z-e-r_-w-a-t-c-h-d-o-g_-d-a-e-m-o-n.md
new file mode 100644
index 00000000..7f7d0ac0
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-f-i-n-a-l-i-z-e-r_-w-a-t-c-h-d-o-g_-d-a-e-m-o-n.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [FINALIZER_WATCHDOG_DAEMON](./-f-i-n-a-l-i-z-e-r_-w-a-t-c-h-d-o-g_-d-a-e-m-o-n.md)
+
+# FINALIZER_WATCHDOG_DAEMON
+
+`FINALIZER_WATCHDOG_DAEMON`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-g-e-s-t-u-r-e_-b-o-o-s-t_-m-a-n-a-g-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-g-e-s-t-u-r-e_-b-o-o-s-t_-m-a-n-a-g-e-r.md
new file mode 100644
index 00000000..c2a0076d
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-g-e-s-t-u-r-e_-b-o-o-s-t_-m-a-n-a-g-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [GESTURE_BOOST_MANAGER](./-g-e-s-t-u-r-e_-b-o-o-s-t_-m-a-n-a-g-e-r.md)
+
+# GESTURE_BOOST_MANAGER
+
+`GESTURE_BOOST_MANAGER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-h-u-a-w-e-i.md b/docs/api/shark-android/shark/-android-reference-matchers/-h-u-a-w-e-i.md
new file mode 100644
index 00000000..22bf0312
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-h-u-a-w-e-i.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [HUAWEI](./-h-u-a-w-e-i.md)
+
+# HUAWEI
+
+`const val HUAWEI: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r_-i-s_-t-e-r-r-i-b-l-e.md b/docs/api/shark-android/shark/-android-reference-matchers/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r_-i-s_-t-e-r-r-i-b-l-e.md
new file mode 100644
index 00000000..879f1dfc
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r_-i-s_-t-e-r-r-i-b-l-e.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [INPUT_METHOD_MANAGER_IS_TERRIBLE](./-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r_-i-s_-t-e-r-r-i-b-l-e.md)
+
+# INPUT_METHOD_MANAGER_IS_TERRIBLE
+
+`INPUT_METHOD_MANAGER_IS_TERRIBLE`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-i-n-s-t-r-u-m-e-n-t-a-t-i-o-n_-r-e-c-o-m-m-e-n-d_-a-c-t-i-v-i-t-y.md b/docs/api/shark-android/shark/-android-reference-matchers/-i-n-s-t-r-u-m-e-n-t-a-t-i-o-n_-r-e-c-o-m-m-e-n-d_-a-c-t-i-v-i-t-y.md
new file mode 100644
index 00000000..f00db08d
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-i-n-s-t-r-u-m-e-n-t-a-t-i-o-n_-r-e-c-o-m-m-e-n-d_-a-c-t-i-v-i-t-y.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [INSTRUMENTATION_RECOMMEND_ACTIVITY](./-i-n-s-t-r-u-m-e-n-t-a-t-i-o-n_-r-e-c-o-m-m-e-n-d_-a-c-t-i-v-i-t-y.md)
+
+# INSTRUMENTATION_RECOMMEND_ACTIVITY
+
+`INSTRUMENTATION_RECOMMEND_ACTIVITY`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-l-a-y-o-u-t_-t-r-a-n-s-i-t-i-o-n.md b/docs/api/shark-android/shark/-android-reference-matchers/-l-a-y-o-u-t_-t-r-a-n-s-i-t-i-o-n.md
new file mode 100644
index 00000000..70f0e2ac
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-l-a-y-o-u-t_-t-r-a-n-s-i-t-i-o-n.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [LAYOUT_TRANSITION](./-l-a-y-o-u-t_-t-r-a-n-s-i-t-i-o-n.md)
+
+# LAYOUT_TRANSITION
+
+`LAYOUT_TRANSITION`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-h-e-a-p_-d-u-m-p-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-h-e-a-p_-d-u-m-p-e-r.md
new file mode 100644
index 00000000..766dcf4f
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-h-e-a-p_-d-u-m-p-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [LEAK_CANARY_HEAP_DUMPER](./-l-e-a-k_-c-a-n-a-r-y_-h-e-a-p_-d-u-m-p-e-r.md)
+
+# LEAK_CANARY_HEAP_DUMPER
+
+`LEAK_CANARY_HEAP_DUMPER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-i-n-t-e-r-n-a-l.md b/docs/api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-i-n-t-e-r-n-a-l.md
new file mode 100644
index 00000000..36effd53
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-i-n-t-e-r-n-a-l.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [LEAK_CANARY_INTERNAL](./-l-e-a-k_-c-a-n-a-r-y_-i-n-t-e-r-n-a-l.md)
+
+# LEAK_CANARY_INTERNAL
+
+`LEAK_CANARY_INTERNAL`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-t-h-r-e-a-d.md b/docs/api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-t-h-r-e-a-d.md
new file mode 100644
index 00000000..1e4816dd
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-t-h-r-e-a-d.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [LEAK_CANARY_THREAD](./-l-e-a-k_-c-a-n-a-r-y_-t-h-r-e-a-d.md)
+
+# LEAK_CANARY_THREAD
+
+`LEAK_CANARY_THREAD`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-l-e-n-o-v-o.md b/docs/api/shark-android/shark/-android-reference-matchers/-l-e-n-o-v-o.md
new file mode 100644
index 00000000..12978a7b
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-l-e-n-o-v-o.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [LENOVO](./-l-e-n-o-v-o.md)
+
+# LENOVO
+
+`const val LENOVO: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-l-g-c-o-n-t-e-x-t__-m-c-o-n-t-e-x-t.md b/docs/api/shark-android/shark/-android-reference-matchers/-l-g-c-o-n-t-e-x-t__-m-c-o-n-t-e-x-t.md
new file mode 100644
index 00000000..834f61e5
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-l-g-c-o-n-t-e-x-t__-m-c-o-n-t-e-x-t.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [LGCONTEXT__MCONTEXT](./-l-g-c-o-n-t-e-x-t__-m-c-o-n-t-e-x-t.md)
+
+# LGCONTEXT__MCONTEXT
+
+`LGCONTEXT__MCONTEXT`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-l-g.md b/docs/api/shark-android/shark/-android-reference-matchers/-l-g.md
new file mode 100644
index 00000000..00e272ad
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-l-g.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [LG](./-l-g.md)
+
+# LG
+
+`const val LG: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-m-a-g-n-i-f-i-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-m-a-g-n-i-f-i-e-r.md
new file mode 100644
index 00000000..f8d2f271
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-m-a-g-n-i-f-i-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [MAGNIFIER](./-m-a-g-n-i-f-i-e-r.md)
+
+# MAGNIFIER
+
+`MAGNIFIER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-m-a-i-n.md b/docs/api/shark-android/shark/-android-reference-matchers/-m-a-i-n.md
new file mode 100644
index 00000000..54171dd2
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-m-a-i-n.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [MAIN](./-m-a-i-n.md)
+
+# MAIN
+
+`MAIN`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-m-a-p-p-e-r_-c-l-i-e-n-t.md b/docs/api/shark-android/shark/-android-reference-matchers/-m-a-p-p-e-r_-c-l-i-e-n-t.md
new file mode 100644
index 00000000..ccf8a7e0
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-m-a-p-p-e-r_-c-l-i-e-n-t.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [MAPPER_CLIENT](./-m-a-p-p-e-r_-c-l-i-e-n-t.md)
+
+# MAPPER_CLIENT
+
+`MAPPER_CLIENT`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-p-r-o-j-e-c-t-i-o-n_-c-a-l-l-b-a-c-k.md b/docs/api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-p-r-o-j-e-c-t-i-o-n_-c-a-l-l-b-a-c-k.md
new file mode 100644
index 00000000..f21d543e
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-p-r-o-j-e-c-t-i-o-n_-c-a-l-l-b-a-c-k.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [MEDIA_PROJECTION_CALLBACK](./-m-e-d-i-a_-p-r-o-j-e-c-t-i-o-n_-c-a-l-l-b-a-c-k.md)
+
+# MEDIA_PROJECTION_CALLBACK
+
+`MEDIA_PROJECTION_CALLBACK`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-c-a-n-n-e-r_-c-o-n-n-e-c-t-i-o-n.md b/docs/api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-c-a-n-n-e-r_-c-o-n-n-e-c-t-i-o-n.md
new file mode 100644
index 00000000..6b05f4e7
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-c-a-n-n-e-r_-c-o-n-n-e-c-t-i-o-n.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [MEDIA_SCANNER_CONNECTION](./-m-e-d-i-a_-s-c-a-n-n-e-r_-c-o-n-n-e-c-t-i-o-n.md)
+
+# MEDIA_SCANNER_CONNECTION
+
+`MEDIA_SCANNER_CONNECTION`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-e-s-s-i-o-n_-l-e-g-a-c-y_-h-e-l-p-e-r__-s-i-n-s-t-a-n-c-e.md b/docs/api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-e-s-s-i-o-n_-l-e-g-a-c-y_-h-e-l-p-e-r__-s-i-n-s-t-a-n-c-e.md
new file mode 100644
index 00000000..88129761
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-e-s-s-i-o-n_-l-e-g-a-c-y_-h-e-l-p-e-r__-s-i-n-s-t-a-n-c-e.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [MEDIA_SESSION_LEGACY_HELPER__SINSTANCE](./-m-e-d-i-a_-s-e-s-s-i-o-n_-l-e-g-a-c-y_-h-e-l-p-e-r__-s-i-n-s-t-a-n-c-e.md)
+
+# MEDIA_SESSION_LEGACY_HELPER__SINSTANCE
+
+`MEDIA_SESSION_LEGACY_HELPER__SINSTANCE`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-m-e-i-z-u.md b/docs/api/shark-android/shark/-android-reference-matchers/-m-e-i-z-u.md
new file mode 100644
index 00000000..170fa82a
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-m-e-i-z-u.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [MEIZU](./-m-e-i-z-u.md)
+
+# MEIZU
+
+`const val MEIZU: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-m-o-t-o-r-o-l-a.md b/docs/api/shark-android/shark/-android-reference-matchers/-m-o-t-o-r-o-l-a.md
new file mode 100644
index 00000000..d2934484
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-m-o-t-o-r-o-l-a.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [MOTOROLA](./-m-o-t-o-r-o-l-a.md)
+
+# MOTOROLA
+
+`const val MOTOROLA: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-n-v-i-d-i-a.md b/docs/api/shark-android/shark/-android-reference-matchers/-n-v-i-d-i-a.md
new file mode 100644
index 00000000..9c850b37
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-n-v-i-d-i-a.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [NVIDIA](./-n-v-i-d-i-a.md)
+
+# NVIDIA
+
+`const val NVIDIA: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-p-e-r-s-o-n-a_-m-a-n-a-g-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-p-e-r-s-o-n-a_-m-a-n-a-g-e-r.md
new file mode 100644
index 00000000..b04535d7
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-p-e-r-s-o-n-a_-m-a-n-a-g-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [PERSONA_MANAGER](./-p-e-r-s-o-n-a_-m-a-n-a-g-e-r.md)
+
+# PERSONA_MANAGER
+
+`PERSONA_MANAGER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-r-e-f-e-r-e-n-c-e-s.md b/docs/api/shark-android/shark/-android-reference-matchers/-r-e-f-e-r-e-n-c-e-s.md
new file mode 100644
index 00000000..9bc9f3c5
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-r-e-f-e-r-e-n-c-e-s.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [REFERENCES](./-r-e-f-e-r-e-n-c-e-s.md)
+
+# REFERENCES
+
+`REFERENCES`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-r-e-s-o-u-r-c-e-s__-m-c-o-n-t-e-x-t.md b/docs/api/shark-android/shark/-android-reference-matchers/-r-e-s-o-u-r-c-e-s__-m-c-o-n-t-e-x-t.md
new file mode 100644
index 00000000..528312b6
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-r-e-s-o-u-r-c-e-s__-m-c-o-n-t-e-x-t.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [RESOURCES__MCONTEXT](./-r-e-s-o-u-r-c-e-s__-m-c-o-n-t-e-x-t.md)
+
+# RESOURCES__MCONTEXT
+
+`RESOURCES__MCONTEXT`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-s-a-m-s-u-n-g.md b/docs/api/shark-android/shark/-android-reference-matchers/-s-a-m-s-u-n-g.md
new file mode 100644
index 00000000..63138a09
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-s-a-m-s-u-n-g.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [SAMSUNG](./-s-a-m-s-u-n-g.md)
+
+# SAMSUNG
+
+`const val SAMSUNG: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-s-e-m_-a-p-p_-i-c-o-n_-s-o-l-u-t-i-o-n.md b/docs/api/shark-android/shark/-android-reference-matchers/-s-e-m_-a-p-p_-i-c-o-n_-s-o-l-u-t-i-o-n.md
new file mode 100644
index 00000000..9af37135
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-s-e-m_-a-p-p_-i-c-o-n_-s-o-l-u-t-i-o-n.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [SEM_APP_ICON_SOLUTION](./-s-e-m_-a-p-p_-i-c-o-n_-s-o-l-u-t-i-o-n.md)
+
+# SEM_APP_ICON_SOLUTION
+
+`SEM_APP_ICON_SOLUTION`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-s-e-m_-c-l-i-p-b-o-a-r-d_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t.md b/docs/api/shark-android/shark/-android-reference-matchers/-s-e-m_-c-l-i-p-b-o-a-r-d_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t.md
new file mode 100644
index 00000000..6f7cb331
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-s-e-m_-c-l-i-p-b-o-a-r-d_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [SEM_CLIPBOARD_MANAGER__MCONTEXT](./-s-e-m_-c-l-i-p-b-o-a-r-d_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t.md)
+
+# SEM_CLIPBOARD_MANAGER__MCONTEXT
+
+`SEM_CLIPBOARD_MANAGER__MCONTEXT`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-s-e-m_-e-m-e-r-g-e-n-c-y_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t.md b/docs/api/shark-android/shark/-android-reference-matchers/-s-e-m_-e-m-e-r-g-e-n-c-y_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t.md
new file mode 100644
index 00000000..6335951f
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-s-e-m_-e-m-e-r-g-e-n-c-y_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [SEM_EMERGENCY_MANAGER__MCONTEXT](./-s-e-m_-e-m-e-r-g-e-n-c-y_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t.md)
+
+# SEM_EMERGENCY_MANAGER__MCONTEXT
+
+`SEM_EMERGENCY_MANAGER__MCONTEXT`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-s-e-m_-p-e-r-s-o-n-a_-m-a-n-a-g-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-s-e-m_-p-e-r-s-o-n-a_-m-a-n-a-g-e-r.md
new file mode 100644
index 00000000..c43d5872
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-s-e-m_-p-e-r-s-o-n-a_-m-a-n-a-g-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [SEM_PERSONA_MANAGER](./-s-e-m_-p-e-r-s-o-n-a_-m-a-n-a-g-e-r.md)
+
+# SEM_PERSONA_MANAGER
+
+`SEM_PERSONA_MANAGER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-s-m-a-r-t_-c-o-v-e-r_-m-a-n-a-g-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-s-m-a-r-t_-c-o-v-e-r_-m-a-n-a-g-e-r.md
new file mode 100644
index 00000000..7212e9e1
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-s-m-a-r-t_-c-o-v-e-r_-m-a-n-a-g-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [SMART_COVER_MANAGER](./-s-m-a-r-t_-c-o-v-e-r_-m-a-n-a-g-e-r.md)
+
+# SMART_COVER_MANAGER
+
+`SMART_COVER_MANAGER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-s-p-a-n_-c-o-n-t-r-o-l-l-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-s-p-a-n_-c-o-n-t-r-o-l-l-e-r.md
new file mode 100644
index 00000000..53156d88
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-s-p-a-n_-c-o-n-t-r-o-l-l-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [SPAN_CONTROLLER](./-s-p-a-n_-c-o-n-t-r-o-l-l-e-r.md)
+
+# SPAN_CONTROLLER
+
+`SPAN_CONTROLLER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-s-p-e-e-c-h_-r-e-c-o-g-n-i-z-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-s-p-e-e-c-h_-r-e-c-o-g-n-i-z-e-r.md
new file mode 100644
index 00000000..49428294
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-s-p-e-e-c-h_-r-e-c-o-g-n-i-z-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [SPEECH_RECOGNIZER](./-s-p-e-e-c-h_-r-e-c-o-g-n-i-z-e-r.md)
+
+# SPEECH_RECOGNIZER
+
+`SPEECH_RECOGNIZER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r.md
new file mode 100644
index 00000000..90363f30
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [SPELL_CHECKER](./-s-p-e-l-l_-c-h-e-c-k-e-r.md)
+
+# SPELL_CHECKER
+
+`SPELL_CHECKER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r_-s-e-s-s-i-o-n.md b/docs/api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r_-s-e-s-s-i-o-n.md
new file mode 100644
index 00000000..da596f1f
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r_-s-e-s-s-i-o-n.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [SPELL_CHECKER_SESSION](./-s-p-e-l-l_-c-h-e-c-k-e-r_-s-e-s-s-i-o-n.md)
+
+# SPELL_CHECKER_SESSION
+
+`SPELL_CHECKER_SESSION`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-s-p-e-n_-g-e-s-t-u-r-e_-m-a-n-a-g-e-r.md b/docs/api/shark-android/shark/-android-reference-matchers/-s-p-e-n_-g-e-s-t-u-r-e_-m-a-n-a-g-e-r.md
new file mode 100644
index 00000000..7b19cc0a
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-s-p-e-n_-g-e-s-t-u-r-e_-m-a-n-a-g-e-r.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [SPEN_GESTURE_MANAGER](./-s-p-e-n_-g-e-s-t-u-r-e_-m-a-n-a-g-e-r.md)
+
+# SPEN_GESTURE_MANAGER
+
+`SPEN_GESTURE_MANAGER`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-s-y-s-t-e-m_-s-e-n-s-o-r_-m-a-n-a-g-e-r__-m-a-p-p-c-o-n-t-e-x-t-i-m-p-l.md b/docs/api/shark-android/shark/-android-reference-matchers/-s-y-s-t-e-m_-s-e-n-s-o-r_-m-a-n-a-g-e-r__-m-a-p-p-c-o-n-t-e-x-t-i-m-p-l.md
new file mode 100644
index 00000000..719b82ed
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-s-y-s-t-e-m_-s-e-n-s-o-r_-m-a-n-a-g-e-r__-m-a-p-p-c-o-n-t-e-x-t-i-m-p-l.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL](./-s-y-s-t-e-m_-s-e-n-s-o-r_-m-a-n-a-g-e-r__-m-a-p-p-c-o-n-t-e-x-t-i-m-p-l.md)
+
+# SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL
+
+`SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-l-i-n-e__-s-c-a-c-h-e-d.md b/docs/api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-l-i-n-e__-s-c-a-c-h-e-d.md
new file mode 100644
index 00000000..6f9ef812
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-l-i-n-e__-s-c-a-c-h-e-d.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [TEXT_LINE__SCACHED](./-t-e-x-t_-l-i-n-e__-s-c-a-c-h-e-d.md)
+
+# TEXT_LINE__SCACHED
+
+`TEXT_LINE__SCACHED`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-t-o_-s-p-e-e-c-h.md b/docs/api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-t-o_-s-p-e-e-c-h.md
new file mode 100644
index 00000000..f560bac2
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-t-o_-s-p-e-e-c-h.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [TEXT_TO_SPEECH](./-t-e-x-t_-t-o_-s-p-e-e-c-h.md)
+
+# TEXT_TO_SPEECH
+
+`TEXT_TO_SPEECH`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-v-i-e-w__-m-l-a-s-t_-h-o-v-e-r-e-d_-v-i-e-w.md b/docs/api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-v-i-e-w__-m-l-a-s-t_-h-o-v-e-r-e-d_-v-i-e-w.md
new file mode 100644
index 00000000..81160f14
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-v-i-e-w__-m-l-a-s-t_-h-o-v-e-r-e-d_-v-i-e-w.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [TEXT_VIEW__MLAST_HOVERED_VIEW](./-t-e-x-t_-v-i-e-w__-m-l-a-s-t_-h-o-v-e-r-e-d_-v-i-e-w.md)
+
+# TEXT_VIEW__MLAST_HOVERED_VIEW
+
+`TEXT_VIEW__MLAST_HOVERED_VIEW`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-u-s-e-r_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e.md b/docs/api/shark-android/shark/-android-reference-matchers/-u-s-e-r_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e.md
new file mode 100644
index 00000000..f07bdcb7
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-u-s-e-r_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [USER_MANAGER__SINSTANCE](./-u-s-e-r_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e.md)
+
+# USER_MANAGER__SINSTANCE
+
+`USER_MANAGER__SINSTANCE`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-v-i-e-w-l-o-c-a-t-i-o-n-h-o-l-d-e-r_-r-o-o-t.md b/docs/api/shark-android/shark/-android-reference-matchers/-v-i-e-w-l-o-c-a-t-i-o-n-h-o-l-d-e-r_-r-o-o-t.md
new file mode 100644
index 00000000..387286b8
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-v-i-e-w-l-o-c-a-t-i-o-n-h-o-l-d-e-r_-r-o-o-t.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [VIEWLOCATIONHOLDER_ROOT](./-v-i-e-w-l-o-c-a-t-i-o-n-h-o-l-d-e-r_-r-o-o-t.md)
+
+# VIEWLOCATIONHOLDER_ROOT
+
+`VIEWLOCATIONHOLDER_ROOT`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-v-i-e-w_-c-o-n-f-i-g-u-r-a-t-i-o-n__-m-c-o-n-t-e-x-t.md b/docs/api/shark-android/shark/-android-reference-matchers/-v-i-e-w_-c-o-n-f-i-g-u-r-a-t-i-o-n__-m-c-o-n-t-e-x-t.md
new file mode 100644
index 00000000..933ae2a4
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-v-i-e-w_-c-o-n-f-i-g-u-r-a-t-i-o-n__-m-c-o-n-t-e-x-t.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [VIEW_CONFIGURATION__MCONTEXT](./-v-i-e-w_-c-o-n-f-i-g-u-r-a-t-i-o-n__-m-c-o-n-t-e-x-t.md)
+
+# VIEW_CONFIGURATION__MCONTEXT
+
+`VIEW_CONFIGURATION__MCONTEXT`
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/-v-i-v-o.md b/docs/api/shark-android/shark/-android-reference-matchers/-v-i-v-o.md
new file mode 100644
index 00000000..07c87254
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/-v-i-v-o.md
@@ -0,0 +1,5 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [VIVO](./-v-i-v-o.md)
+
+# VIVO
+
+`const val VIVO: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/app-defaults.md b/docs/api/shark-android/shark/-android-reference-matchers/app-defaults.md
new file mode 100644
index 00000000..e5ea8c0e
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/app-defaults.md
@@ -0,0 +1,10 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [appDefaults](./app-defaults.md)
+
+# appDefaults
+
+`val appDefaults: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<ReferenceMatcher>`
+
+**See Also**
+
+[AndroidReferenceMatchers](index.md)
+
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/build-known-references.md b/docs/api/shark-android/shark/-android-reference-matchers/build-known-references.md
new file mode 100644
index 00000000..5cf9acee
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/build-known-references.md
@@ -0,0 +1,9 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [buildKnownReferences](./build-known-references.md)
+
+# buildKnownReferences
+
+`fun buildKnownReferences(referenceMatchers: `[`Set`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/index.html)`<`[`AndroidReferenceMatchers`](index.md)`>): `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<ReferenceMatcher>`
+
+Builds a list of [ReferenceMatcher](#) from the [referenceMatchers](build-known-references.md#shark.AndroidReferenceMatchers.Companion$buildKnownReferences(kotlin.collections.Set((shark.AndroidReferenceMatchers)))/referenceMatchers) set of
+[AndroidReferenceMatchers](index.md).
+
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/ignored-instance-field.md b/docs/api/shark-android/shark/-android-reference-matchers/ignored-instance-field.md
new file mode 100644
index 00000000..ab3bd1d4
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/ignored-instance-field.md
@@ -0,0 +1,8 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [ignoredInstanceField](./ignored-instance-field.md)
+
+# ignoredInstanceField
+
+`fun ignoredInstanceField(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): IgnoredReferenceMatcher`
+
+Creates a [IgnoredReferenceMatcher](#) that matches a [InstanceFieldPattern](#).
+
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/ignored-java-local.md b/docs/api/shark-android/shark/-android-reference-matchers/ignored-java-local.md
new file mode 100644
index 00000000..91cc2cd5
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/ignored-java-local.md
@@ -0,0 +1,8 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [ignoredJavaLocal](./ignored-java-local.md)
+
+# ignoredJavaLocal
+
+`fun ignoredJavaLocal(threadName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): IgnoredReferenceMatcher`
+
+Creates a [IgnoredReferenceMatcher](#) that matches a [JavaLocalPattern](#).
+
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/ignored-references-only.md b/docs/api/shark-android/shark/-android-reference-matchers/ignored-references-only.md
new file mode 100644
index 00000000..662844c8
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/ignored-references-only.md
@@ -0,0 +1,9 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [ignoredReferencesOnly](./ignored-references-only.md)
+
+# ignoredReferencesOnly
+
+`val ignoredReferencesOnly: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<ReferenceMatcher>`
+
+Returns a list of [ReferenceMatcher](#) that only contains [IgnoredReferenceMatcher](#) and no
+[LibraryLeakReferenceMatcher](#).
+
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/index.md b/docs/api/shark-android/shark/-android-reference-matchers/index.md
new file mode 100644
index 00000000..3b1f7151
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/index.md
@@ -0,0 +1,110 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](./index.md)
+
+# AndroidReferenceMatchers
+
+`enum class AndroidReferenceMatchers`
+
+[AndroidReferenceMatchers](./index.md) values add [ReferenceMatcher](#) instances to a global list via their
+[add](#) method. A [ReferenceMatcher](#) is either a [IgnoredReferenceMatcher](#) or
+a [LibraryLeakReferenceMatcher](#).
+
+[AndroidReferenceMatchers](./index.md) is used to build the list of known references that cannot ever create
+leaks (via [IgnoredReferenceMatcher](#)) as well as the list of known leaks in the Android Framework
+and in manufacturer specific Android implementations.
+
+This class is a work in progress. You can help by reporting leak traces that seem to be caused
+by the Android SDK, here: https://github.com/square/leakcanary/issues/new
+
+We filter on SDK versions and Manufacturers because many of those leaks are specific to a given
+manufacturer implementation, they usually share their builds across multiple models, and the
+leaks eventually get fixed in newer versions.
+
+Most app developers should use [appDefaults](app-defaults.md). However, you can also use a subset of
+[AndroidReferenceMatchers](./index.md) by creating an [EnumSet](https://docs.oracle.com/javase/6/docs/api/java/util/EnumSet.html) that matches your needs and calling
+[buildKnownReferences](build-known-references.md).
+
+### Enum Values
+
+| Name | Summary |
+|---|---|
+| [ACTIVITY_CLIENT_RECORD__NEXT_IDLE](-a-c-t-i-v-i-t-y_-c-l-i-e-n-t_-r-e-c-o-r-d__-n-e-x-t_-i-d-l-e.md) |  |
+| [SPAN_CONTROLLER](-s-p-a-n_-c-o-n-t-r-o-l-l-e-r.md) |  |
+| [MEDIA_SESSION_LEGACY_HELPER__SINSTANCE](-m-e-d-i-a_-s-e-s-s-i-o-n_-l-e-g-a-c-y_-h-e-l-p-e-r__-s-i-n-s-t-a-n-c-e.md) |  |
+| [TEXT_LINE__SCACHED](-t-e-x-t_-l-i-n-e__-s-c-a-c-h-e-d.md) |  |
+| [BLOCKING_QUEUE](-b-l-o-c-k-i-n-g_-q-u-e-u-e.md) |  |
+| [INPUT_METHOD_MANAGER_IS_TERRIBLE](-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r_-i-s_-t-e-r-r-i-b-l-e.md) |  |
+| [LAYOUT_TRANSITION](-l-a-y-o-u-t_-t-r-a-n-s-i-t-i-o-n.md) |  |
+| [SPELL_CHECKER_SESSION](-s-p-e-l-l_-c-h-e-c-k-e-r_-s-e-s-s-i-o-n.md) |  |
+| [SPELL_CHECKER](-s-p-e-l-l_-c-h-e-c-k-e-r.md) |  |
+| [ACTIVITY_CHOOSE_MODEL](-a-c-t-i-v-i-t-y_-c-h-o-o-s-e_-m-o-d-e-l.md) |  |
+| [MEDIA_PROJECTION_CALLBACK](-m-e-d-i-a_-p-r-o-j-e-c-t-i-o-n_-c-a-l-l-b-a-c-k.md) |  |
+| [SPEECH_RECOGNIZER](-s-p-e-e-c-h_-r-e-c-o-g-n-i-z-e-r.md) |  |
+| [ACCOUNT_MANAGER](-a-c-c-o-u-n-t_-m-a-n-a-g-e-r.md) |  |
+| [MEDIA_SCANNER_CONNECTION](-m-e-d-i-a_-s-c-a-n-n-e-r_-c-o-n-n-e-c-t-i-o-n.md) |  |
+| [USER_MANAGER__SINSTANCE](-u-s-e-r_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e.md) |  |
+| [APP_WIDGET_HOST_CALLBACKS](-a-p-p_-w-i-d-g-e-t_-h-o-s-t_-c-a-l-l-b-a-c-k-s.md) |  |
+| [AUDIO_MANAGER](-a-u-d-i-o_-m-a-n-a-g-e-r.md) |  |
+| [EDITTEXT_BLINK_MESSAGEQUEUE](-e-d-i-t-t-e-x-t_-b-l-i-n-k_-m-e-s-s-a-g-e-q-u-e-u-e.md) |  |
+| [CONNECTIVITY_MANAGER__SINSTANCE](-c-o-n-n-e-c-t-i-v-i-t-y_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e.md) |  |
+| [ACCESSIBILITY_NODE_INFO__MORIGINALTEXT](-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-n-f-o__-m-o-r-i-g-i-n-a-l-t-e-x-t.md) |  |
+| [CHANGE_WATCHER](-c-h-a-n-g-e_-w-a-t-c-h-e-r.md) |  |
+| [BIOMETRIC_PROMPT](-b-i-o-m-e-t-r-i-c_-p-r-o-m-p-t.md) |  |
+| [MAGNIFIER](-m-a-g-n-i-f-i-e-r.md) |  |
+| [BACKDROP_FRAME_RENDERER__MDECORVIEW](-b-a-c-k-d-r-o-p_-f-r-a-m-e_-r-e-n-d-e-r-e-r__-m-d-e-c-o-r-v-i-e-w.md) |  |
+| [VIEWLOCATIONHOLDER_ROOT](-v-i-e-w-l-o-c-a-t-i-o-n-h-o-l-d-e-r_-r-o-o-t.md) |  |
+| [ACCESSIBILITY_NODE_ID_MANAGER](-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-d_-m-a-n-a-g-e-r.md) |  |
+| [TEXT_TO_SPEECH](-t-e-x-t_-t-o_-s-p-e-e-c-h.md) |  |
+| [SPEN_GESTURE_MANAGER](-s-p-e-n_-g-e-s-t-u-r-e_-m-a-n-a-g-e-r.md) |  |
+| [CLIPBOARD_UI_MANAGER__SINSTANCE](-c-l-i-p-b-o-a-r-d_-u-i_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e.md) |  |
+| [SEM_CLIPBOARD_MANAGER__MCONTEXT](-s-e-m_-c-l-i-p-b-o-a-r-d_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t.md) |  |
+| [CLIPBOARD_EX_MANAGER](-c-l-i-p-b-o-a-r-d_-e-x_-m-a-n-a-g-e-r.md) |  |
+| [SEM_EMERGENCY_MANAGER__MCONTEXT](-s-e-m_-e-m-e-r-g-e-n-c-y_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t.md) |  |
+| [SEM_PERSONA_MANAGER](-s-e-m_-p-e-r-s-o-n-a_-m-a-n-a-g-e-r.md) |  |
+| [SEM_APP_ICON_SOLUTION](-s-e-m_-a-p-p_-i-c-o-n_-s-o-l-u-t-i-o-n.md) |  |
+| [AW_RESOURCE__SRESOURCES](-a-w_-r-e-s-o-u-r-c-e__-s-r-e-s-o-u-r-c-e-s.md) |  |
+| [TEXT_VIEW__MLAST_HOVERED_VIEW](-t-e-x-t_-v-i-e-w__-m-l-a-s-t_-h-o-v-e-r-e-d_-v-i-e-w.md) |  |
+| [PERSONA_MANAGER](-p-e-r-s-o-n-a_-m-a-n-a-g-e-r.md) |  |
+| [RESOURCES__MCONTEXT](-r-e-s-o-u-r-c-e-s__-m-c-o-n-t-e-x-t.md) |  |
+| [VIEW_CONFIGURATION__MCONTEXT](-v-i-e-w_-c-o-n-f-i-g-u-r-a-t-i-o-n__-m-c-o-n-t-e-x-t.md) |  |
+| [AUDIO_MANAGER__MCONTEXT_STATIC](-a-u-d-i-o_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t_-s-t-a-t-i-c.md) |  |
+| [ACTIVITY_MANAGER_MCONTEXT](-a-c-t-i-v-i-t-y_-m-a-n-a-g-e-r_-m-c-o-n-t-e-x-t.md) |  |
+| [GESTURE_BOOST_MANAGER](-g-e-s-t-u-r-e_-b-o-o-s-t_-m-a-n-a-g-e-r.md) |  |
+| [BUBBLE_POPUP_HELPER__SHELPER](-b-u-b-b-l-e_-p-o-p-u-p_-h-e-l-p-e-r__-s-h-e-l-p-e-r.md) |  |
+| [LGCONTEXT__MCONTEXT](-l-g-c-o-n-t-e-x-t__-m-c-o-n-t-e-x-t.md) |  |
+| [SMART_COVER_MANAGER](-s-m-a-r-t_-c-o-v-e-r_-m-a-n-a-g-e-r.md) |  |
+| [MAPPER_CLIENT](-m-a-p-p-e-r_-c-l-i-e-n-t.md) |  |
+| [SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL](-s-y-s-t-e-m_-s-e-n-s-o-r_-m-a-n-a-g-e-r__-m-a-p-p-c-o-n-t-e-x-t-i-m-p-l.md) |  |
+| [INSTRUMENTATION_RECOMMEND_ACTIVITY](-i-n-s-t-r-u-m-e-n-t-a-t-i-o-n_-r-e-c-o-m-m-e-n-d_-a-c-t-i-v-i-t-y.md) |  |
+| [DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER](-d-e-v-i-c-e_-p-o-l-i-c-y_-m-a-n-a-g-e-r__-s-e-t-t-i-n-g-s_-o-b-s-e-r-v-e-r.md) |  |
+| [REFERENCES](-r-e-f-e-r-e-n-c-e-s.md) |  |
+| [FINALIZER_WATCHDOG_DAEMON](-f-i-n-a-l-i-z-e-r_-w-a-t-c-h-d-o-g_-d-a-e-m-o-n.md) |  |
+| [MAIN](-m-a-i-n.md) |  |
+| [LEAK_CANARY_THREAD](-l-e-a-k_-c-a-n-a-r-y_-t-h-r-e-a-d.md) |  |
+| [LEAK_CANARY_HEAP_DUMPER](-l-e-a-k_-c-a-n-a-r-y_-h-e-a-p_-d-u-m-p-e-r.md) |  |
+| [LEAK_CANARY_INTERNAL](-l-e-a-k_-c-a-n-a-r-y_-i-n-t-e-r-n-a-l.md) |  |
+| [EVENT_RECEIVER__MMESSAGE_QUEUE](-e-v-e-n-t_-r-e-c-e-i-v-e-r__-m-m-e-s-s-a-g-e_-q-u-e-u-e.md) |  |
+
+### Companion Object Properties
+
+| Name | Summary |
+|---|---|
+| [appDefaults](app-defaults.md) | `val appDefaults: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<ReferenceMatcher>` |
+| [HUAWEI](-h-u-a-w-e-i.md) | `const val HUAWEI: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+| [ignoredReferencesOnly](ignored-references-only.md) | `val ignoredReferencesOnly: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<ReferenceMatcher>`<br>Returns a list of [ReferenceMatcher](#) that only contains [IgnoredReferenceMatcher](#) and no [LibraryLeakReferenceMatcher](#). |
+| [LENOVO](-l-e-n-o-v-o.md) | `const val LENOVO: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+| [LG](-l-g.md) | `const val LG: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+| [MEIZU](-m-e-i-z-u.md) | `const val MEIZU: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+| [MOTOROLA](-m-o-t-o-r-o-l-a.md) | `const val MOTOROLA: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+| [NVIDIA](-n-v-i-d-i-a.md) | `const val NVIDIA: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+| [SAMSUNG](-s-a-m-s-u-n-g.md) | `const val SAMSUNG: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+| [VIVO](-v-i-v-o.md) | `const val VIVO: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+
+### Companion Object Functions
+
+| Name | Summary |
+|---|---|
+| [buildKnownReferences](build-known-references.md) | `fun buildKnownReferences(referenceMatchers: `[`Set`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/index.html)`<`[`AndroidReferenceMatchers`](./index.md)`>): `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<ReferenceMatcher>`<br>Builds a list of [ReferenceMatcher](#) from the [referenceMatchers](build-known-references.md#shark.AndroidReferenceMatchers.Companion$buildKnownReferences(kotlin.collections.Set((shark.AndroidReferenceMatchers)))/referenceMatchers) set of [AndroidReferenceMatchers](./index.md). |
+| [ignoredInstanceField](ignored-instance-field.md) | `fun ignoredInstanceField(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): IgnoredReferenceMatcher`<br>Creates a [IgnoredReferenceMatcher](#) that matches a [InstanceFieldPattern](#). |
+| [ignoredJavaLocal](ignored-java-local.md) | `fun ignoredJavaLocal(threadName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): IgnoredReferenceMatcher`<br>Creates a [IgnoredReferenceMatcher](#) that matches a [JavaLocalPattern](#). |
+| [instanceFieldLeak](instance-field-leak.md) | `fun instanceFieldLeak(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, description: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)` = "", patternApplies: `[`AndroidBuildMirror`](../-android-build-mirror/index.md)`.() -> `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = ALWAYS): LibraryLeakReferenceMatcher`<br>Creates a [LibraryLeakReferenceMatcher](#) that matches a [InstanceFieldPattern](#). [description](instance-field-leak.md#shark.AndroidReferenceMatchers.Companion$instanceFieldLeak(kotlin.String, kotlin.String, kotlin.String, kotlin.Function1((shark.AndroidBuildMirror, kotlin.Boolean)))/description) should convey what we know about this library leak. |
+| [staticFieldLeak](static-field-leak.md) | `fun staticFieldLeak(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, description: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)` = "", patternApplies: `[`AndroidBuildMirror`](../-android-build-mirror/index.md)`.() -> `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = ALWAYS): LibraryLeakReferenceMatcher`<br>Creates a [LibraryLeakReferenceMatcher](#) that matches a [StaticFieldPattern](#). [description](static-field-leak.md#shark.AndroidReferenceMatchers.Companion$staticFieldLeak(kotlin.String, kotlin.String, kotlin.String, kotlin.Function1((shark.AndroidBuildMirror, kotlin.Boolean)))/description) should convey what we know about this library leak. |
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/instance-field-leak.md b/docs/api/shark-android/shark/-android-reference-matchers/instance-field-leak.md
new file mode 100644
index 00000000..e8b3df63
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/instance-field-leak.md
@@ -0,0 +1,9 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [instanceFieldLeak](./instance-field-leak.md)
+
+# instanceFieldLeak
+
+`fun instanceFieldLeak(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, description: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)` = "", patternApplies: `[`AndroidBuildMirror`](../-android-build-mirror/index.md)`.() -> `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = ALWAYS): LibraryLeakReferenceMatcher`
+
+Creates a [LibraryLeakReferenceMatcher](#) that matches a [InstanceFieldPattern](#).
+[description](instance-field-leak.md#shark.AndroidReferenceMatchers.Companion$instanceFieldLeak(kotlin.String, kotlin.String, kotlin.String, kotlin.Function1((shark.AndroidBuildMirror, kotlin.Boolean)))/description) should convey what we know about this library leak.
+
diff --git a/docs/api/shark-android/shark/-android-reference-matchers/static-field-leak.md b/docs/api/shark-android/shark/-android-reference-matchers/static-field-leak.md
new file mode 100644
index 00000000..8da2d8ea
--- /dev/null
+++ b/docs/api/shark-android/shark/-android-reference-matchers/static-field-leak.md
@@ -0,0 +1,9 @@
+[shark-android](../../index.md) / [shark](../index.md) / [AndroidReferenceMatchers](index.md) / [staticFieldLeak](./static-field-leak.md)
+
+# staticFieldLeak
+
+`fun staticFieldLeak(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, description: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)` = "", patternApplies: `[`AndroidBuildMirror`](../-android-build-mirror/index.md)`.() -> `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = ALWAYS): LibraryLeakReferenceMatcher`
+
+Creates a [LibraryLeakReferenceMatcher](#) that matches a [StaticFieldPattern](#).
+[description](static-field-leak.md#shark.AndroidReferenceMatchers.Companion$staticFieldLeak(kotlin.String, kotlin.String, kotlin.String, kotlin.Function1((shark.AndroidBuildMirror, kotlin.Boolean)))/description) should convey what we know about this library leak.
+
diff --git a/docs/api/shark-android/shark/index.md b/docs/api/shark-android/shark/index.md
new file mode 100644
index 00000000..ed70a6ae
--- /dev/null
+++ b/docs/api/shark-android/shark/index.md
@@ -0,0 +1,17 @@
+[shark-android](../index.md) / [shark](./index.md)
+
+## Package shark
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [AndroidBuildMirror](-android-build-mirror/index.md) | `class AndroidBuildMirror`<br>Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via [fromHeapGraph](-android-build-mirror/from-heap-graph.md). |
+| [AndroidObjectInspectors](-android-object-inspectors/index.md) | `enum class AndroidObjectInspectors : ObjectInspector`<br>A set of default [ObjectInspector](#)s that knows about common AOSP and library classes. |
+| [AndroidReferenceMatchers](-android-reference-matchers/index.md) | `enum class AndroidReferenceMatchers`<br>[AndroidReferenceMatchers](-android-reference-matchers/index.md) values add [ReferenceMatcher](#) instances to a global list via their [add](#) method. A [ReferenceMatcher](#) is either a [IgnoredReferenceMatcher](#) or a [LibraryLeakReferenceMatcher](#). |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [unwrapActivityContext](unwrap-activity-context.md) | `fun HeapInstance.unwrapActivityContext(): HeapInstance?`<br>Recursively unwraps `this` [HeapInstance](#) as a ContextWrapper until an Activity is found in which case it is returned. Returns null if no activity was found. |
diff --git a/docs/api/shark-android/shark/unwrap-activity-context.md b/docs/api/shark-android/shark/unwrap-activity-context.md
new file mode 100644
index 00000000..c64b3db0
--- /dev/null
+++ b/docs/api/shark-android/shark/unwrap-activity-context.md
@@ -0,0 +1,9 @@
+[shark-android](../index.md) / [shark](index.md) / [unwrapActivityContext](./unwrap-activity-context.md)
+
+# unwrapActivityContext
+
+`fun HeapInstance.unwrapActivityContext(): HeapInstance?`
+
+Recursively unwraps `this` [HeapInstance](#) as a ContextWrapper until an Activity is found in which case it is
+returned. Returns null if no activity was found.
+
diff --git a/docs/api/shark-graph/alltypes/index.md b/docs/api/shark-graph/alltypes/index.md
new file mode 100644
index 00000000..ea62e3ed
--- /dev/null
+++ b/docs/api/shark-graph/alltypes/index.md
@@ -0,0 +1,12 @@
+
+
+### All Types
+
+| Name | Summary |
+|---|---|
+| [shark.GraphContext](../shark/-graph-context/index.md) | In memory store that can be used to store objects in a given [HeapGraph](../shark/-heap-graph/index.md) instance. This is a simple [MutableMap](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-map/index.html) of [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) to [Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html), but with unsafe generics access. |
+| [shark.HeapField](../shark/-heap-field/index.md) | Represents a static field or an instance field. |
+| [shark.HeapGraph](../shark/-heap-graph/index.md) | Enables navigation through the heap graph of objects. |
+| [shark.HeapObject](../shark/-heap-object/index.md) | An object in the heap dump. |
+| [shark.HeapValue](../shark/-heap-value/index.md) | Represents a value in the heap dump, which can be an object reference or a primitive type. |
+| [shark.HprofHeapGraph](../shark/-hprof-heap-graph/index.md) | A [HeapGraph](../shark/-heap-graph/index.md) that reads from an indexed [Hprof](#). Create a new instance with [indexHprof](../shark/-hprof-heap-graph/index-hprof.md). |
diff --git a/docs/api/shark-graph/index.md b/docs/api/shark-graph/index.md
new file mode 100644
index 00000000..3230fc45
--- /dev/null
+++ b/docs/api/shark-graph/index.md
@@ -0,0 +1,11 @@
+[shark-graph](./index.md)
+
+### Packages
+
+| Name | Summary |
+|---|---|
+| [shark](shark/index.md) |  |
+
+### Index
+
+[All Types](alltypes/index.md)
\ No newline at end of file
diff --git a/docs/api/shark-graph/package-list b/docs/api/shark-graph/package-list
new file mode 100644
index 00000000..415577c3
--- /dev/null
+++ b/docs/api/shark-graph/package-list
@@ -0,0 +1,4 @@
+$dokka.format:gfm
+$dokka.linkExtension:md
+
+shark
diff --git a/docs/api/shark-graph/shark/-graph-context/-init-.md b/docs/api/shark-graph/shark/-graph-context/-init-.md
new file mode 100644
index 00000000..23ec90a1
--- /dev/null
+++ b/docs/api/shark-graph/shark/-graph-context/-init-.md
@@ -0,0 +1,9 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [GraphContext](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`GraphContext()`
+
+In memory store that can be used to store objects in a given [HeapGraph](../-heap-graph/index.md) instance.
+This is a simple [MutableMap](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-map/index.html) of [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) to [Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html), but with unsafe generics access.
+
diff --git a/docs/api/shark-graph/shark/-graph-context/contains.md b/docs/api/shark-graph/shark/-graph-context/contains.md
new file mode 100644
index 00000000..c73f01fe
--- /dev/null
+++ b/docs/api/shark-graph/shark/-graph-context/contains.md
@@ -0,0 +1,10 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [GraphContext](index.md) / [contains](./contains.md)
+
+# contains
+
+`operator fun contains(key: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+**See Also**
+
+[MutableMap.containsKey](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-map/contains-key.html)
+
diff --git a/docs/api/shark-graph/shark/-graph-context/get-or-put.md b/docs/api/shark-graph/shark/-graph-context/get-or-put.md
new file mode 100644
index 00000000..80fa34b9
--- /dev/null
+++ b/docs/api/shark-graph/shark/-graph-context/get-or-put.md
@@ -0,0 +1,10 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [GraphContext](index.md) / [getOrPut](./get-or-put.md)
+
+# getOrPut
+
+`fun <T> getOrPut(key: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, defaultValue: () -> `[`T`](get-or-put.md#T)`): `[`T`](get-or-put.md#T)
+
+**See Also**
+
+[MutableMap.getOrPut](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/get-or-put.html)
+
diff --git a/docs/api/shark-graph/shark/-graph-context/get.md b/docs/api/shark-graph/shark/-graph-context/get.md
new file mode 100644
index 00000000..28c7e4c3
--- /dev/null
+++ b/docs/api/shark-graph/shark/-graph-context/get.md
@@ -0,0 +1,5 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [GraphContext](index.md) / [get](./get.md)
+
+# get
+
+`operator fun <T> get(key: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`T`](get.md#T)`?`
\ No newline at end of file
diff --git a/docs/api/shark-graph/shark/-graph-context/index.md b/docs/api/shark-graph/shark/-graph-context/index.md
new file mode 100644
index 00000000..0509cd2c
--- /dev/null
+++ b/docs/api/shark-graph/shark/-graph-context/index.md
@@ -0,0 +1,24 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [GraphContext](./index.md)
+
+# GraphContext
+
+`class GraphContext`
+
+In memory store that can be used to store objects in a given [HeapGraph](../-heap-graph/index.md) instance.
+This is a simple [MutableMap](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-map/index.html) of [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) to [Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html), but with unsafe generics access.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `GraphContext()`<br>In memory store that can be used to store objects in a given [HeapGraph](../-heap-graph/index.md) instance. This is a simple [MutableMap](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-map/index.html) of [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) to [Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html), but with unsafe generics access. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [contains](contains.md) | `operator fun contains(key: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) |
+| [get](get.md) | `operator fun <T> get(key: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`T`](get.md#T)`?` |
+| [getOrPut](get-or-put.md) | `fun <T> getOrPut(key: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, defaultValue: () -> `[`T`](get-or-put.md#T)`): `[`T`](get-or-put.md#T) |
+| [minusAssign](minus-assign.md) | `operator fun minusAssign(key: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+| [set](set.md) | `operator fun <T> set(key: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, value: `[`T`](set.md#T)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-graph/shark/-graph-context/minus-assign.md b/docs/api/shark-graph/shark/-graph-context/minus-assign.md
new file mode 100644
index 00000000..77641f91
--- /dev/null
+++ b/docs/api/shark-graph/shark/-graph-context/minus-assign.md
@@ -0,0 +1,10 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [GraphContext](index.md) / [minusAssign](./minus-assign.md)
+
+# minusAssign
+
+`operator fun minusAssign(key: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+**See Also**
+
+[MutableMap.remove](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-map/remove.html)
+
diff --git a/docs/api/shark-graph/shark/-graph-context/set.md b/docs/api/shark-graph/shark/-graph-context/set.md
new file mode 100644
index 00000000..701480ac
--- /dev/null
+++ b/docs/api/shark-graph/shark/-graph-context/set.md
@@ -0,0 +1,10 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [GraphContext](index.md) / [set](./set.md)
+
+# set
+
+`operator fun <T> set(key: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, value: `[`T`](set.md#T)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+**See Also**
+
+[MutableMap.set](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/set.html)
+
diff --git a/docs/api/shark-graph/shark/-heap-field/-init-.md b/docs/api/shark-graph/shark/-heap-field/-init-.md
new file mode 100644
index 00000000..47dac96c
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-field/-init-.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapField](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`HeapField(declaringClass: `[`HeapObject.HeapClass`](../-heap-object/-heap-class/index.md)`, name: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, value: `[`HeapValue`](../-heap-value/index.md)`)`
+
+Represents a static field or an instance field.
+
diff --git a/docs/api/shark-graph/shark/-heap-field/declaring-class.md b/docs/api/shark-graph/shark/-heap-field/declaring-class.md
new file mode 100644
index 00000000..e8d5344d
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-field/declaring-class.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapField](index.md) / [declaringClass](./declaring-class.md)
+
+# declaringClass
+
+`val declaringClass: `[`HeapObject.HeapClass`](../-heap-object/-heap-class/index.md)
+
+The class this field was declared in.
+
diff --git a/docs/api/shark-graph/shark/-heap-field/index.md b/docs/api/shark-graph/shark/-heap-field/index.md
new file mode 100644
index 00000000..1de0864e
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-field/index.md
@@ -0,0 +1,25 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapField](./index.md)
+
+# HeapField
+
+`class HeapField`
+
+Represents a static field or an instance field.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `HeapField(declaringClass: `[`HeapObject.HeapClass`](../-heap-object/-heap-class/index.md)`, name: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, value: `[`HeapValue`](../-heap-value/index.md)`)`<br>Represents a static field or an instance field. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [declaringClass](declaring-class.md) | `val declaringClass: `[`HeapObject.HeapClass`](../-heap-object/-heap-class/index.md)<br>The class this field was declared in. |
+| [name](name.md) | `val name: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>Name of the field |
+| [value](value.md) | `val value: `[`HeapValue`](../-heap-value/index.md)<br>Value of the field. Also see shorthands [valueAsClass](value-as-class.md), [valueAsInstance](value-as-instance.md), [valueAsObjectArray](value-as-object-array.md), [valueAsPrimitiveArray](value-as-primitive-array.md). |
+| [valueAsClass](value-as-class.md) | `val valueAsClass: `[`HeapObject.HeapClass`](../-heap-object/-heap-class/index.md)`?`<br>Return a [HeapClass](../-heap-object/-heap-class/index.md) is [value](value.md) references a class, and null otherwise. |
+| [valueAsInstance](value-as-instance.md) | `val valueAsInstance: `[`HeapObject.HeapInstance`](../-heap-object/-heap-instance/index.md)`?`<br>Return a [HeapInstance](../-heap-object/-heap-instance/index.md) is [value](value.md) references an instance, and null otherwise. |
+| [valueAsObjectArray](value-as-object-array.md) | `val valueAsObjectArray: `[`HeapObject.HeapObjectArray`](../-heap-object/-heap-object-array/index.md)`?`<br>Return a [HeapObjectArray](../-heap-object/-heap-object-array/index.md) is [value](value.md) references an object array, and null otherwise. |
+| [valueAsPrimitiveArray](value-as-primitive-array.md) | `val valueAsPrimitiveArray: `[`HeapObject.HeapPrimitiveArray`](../-heap-object/-heap-primitive-array/index.md)`?`<br>Return a [HeapPrimitiveArray](../-heap-object/-heap-primitive-array/index.md) is [value](value.md) references a primitive array, and null otherwise. |
diff --git a/docs/api/shark-graph/shark/-heap-field/name.md b/docs/api/shark-graph/shark/-heap-field/name.md
new file mode 100644
index 00000000..23e4fad1
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-field/name.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapField](index.md) / [name](./name.md)
+
+# name
+
+`val name: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+Name of the field
+
diff --git a/docs/api/shark-graph/shark/-heap-field/value-as-class.md b/docs/api/shark-graph/shark/-heap-field/value-as-class.md
new file mode 100644
index 00000000..a28c3f0e
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-field/value-as-class.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapField](index.md) / [valueAsClass](./value-as-class.md)
+
+# valueAsClass
+
+`val valueAsClass: `[`HeapObject.HeapClass`](../-heap-object/-heap-class/index.md)`?`
+
+Return a [HeapClass](../-heap-object/-heap-class/index.md) is [value](value.md) references a class, and null otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-field/value-as-instance.md b/docs/api/shark-graph/shark/-heap-field/value-as-instance.md
new file mode 100644
index 00000000..ed173f2d
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-field/value-as-instance.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapField](index.md) / [valueAsInstance](./value-as-instance.md)
+
+# valueAsInstance
+
+`val valueAsInstance: `[`HeapObject.HeapInstance`](../-heap-object/-heap-instance/index.md)`?`
+
+Return a [HeapInstance](../-heap-object/-heap-instance/index.md) is [value](value.md) references an instance, and null otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-field/value-as-object-array.md b/docs/api/shark-graph/shark/-heap-field/value-as-object-array.md
new file mode 100644
index 00000000..fc641c26
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-field/value-as-object-array.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapField](index.md) / [valueAsObjectArray](./value-as-object-array.md)
+
+# valueAsObjectArray
+
+`val valueAsObjectArray: `[`HeapObject.HeapObjectArray`](../-heap-object/-heap-object-array/index.md)`?`
+
+Return a [HeapObjectArray](../-heap-object/-heap-object-array/index.md) is [value](value.md) references an object array, and null otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-field/value-as-primitive-array.md b/docs/api/shark-graph/shark/-heap-field/value-as-primitive-array.md
new file mode 100644
index 00000000..85534bf9
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-field/value-as-primitive-array.md
@@ -0,0 +1,9 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapField](index.md) / [valueAsPrimitiveArray](./value-as-primitive-array.md)
+
+# valueAsPrimitiveArray
+
+`val valueAsPrimitiveArray: `[`HeapObject.HeapPrimitiveArray`](../-heap-object/-heap-primitive-array/index.md)`?`
+
+Return a [HeapPrimitiveArray](../-heap-object/-heap-primitive-array/index.md) is [value](value.md) references a primitive array, and null
+otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-field/value.md b/docs/api/shark-graph/shark/-heap-field/value.md
new file mode 100644
index 00000000..a8564336
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-field/value.md
@@ -0,0 +1,9 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapField](index.md) / [value](./value.md)
+
+# value
+
+`val value: `[`HeapValue`](../-heap-value/index.md)
+
+Value of the field. Also see shorthands [valueAsClass](value-as-class.md), [valueAsInstance](value-as-instance.md),
+[valueAsObjectArray](value-as-object-array.md), [valueAsPrimitiveArray](value-as-primitive-array.md).
+
diff --git a/docs/api/shark-graph/shark/-heap-graph/classes.md b/docs/api/shark-graph/shark/-heap-graph/classes.md
new file mode 100644
index 00000000..df5d49b1
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-graph/classes.md
@@ -0,0 +1,10 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapGraph](index.md) / [classes](./classes.md)
+
+# classes
+
+`abstract val classes: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject.HeapClass`](../-heap-object/-heap-class/index.md)`>`
+
+Sequence of all classes in the heap dump.
+
+This sequence does not trigger any IO reads.
+
diff --git a/docs/api/shark-graph/shark/-heap-graph/context.md b/docs/api/shark-graph/shark/-heap-graph/context.md
new file mode 100644
index 00000000..10e6a7ea
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-graph/context.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapGraph](index.md) / [context](./context.md)
+
+# context
+
+`abstract val context: `[`GraphContext`](../-graph-context/index.md)
+
+In memory store that can be used to store objects this [HeapGraph](index.md) instance.
+
diff --git a/docs/api/shark-graph/shark/-heap-graph/find-class-by-name.md b/docs/api/shark-graph/shark/-heap-graph/find-class-by-name.md
new file mode 100644
index 00000000..3b7e9488
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-graph/find-class-by-name.md
@@ -0,0 +1,9 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapGraph](index.md) / [findClassByName](./find-class-by-name.md)
+
+# findClassByName
+
+`abstract fun findClassByName(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`HeapObject.HeapClass`](../-heap-object/-heap-class/index.md)`?`
+
+Returns the [HeapClass](../-heap-object/-heap-class/index.md) corresponding to the provided [className](find-class-by-name.md#shark.HeapGraph$findClassByName(kotlin.String)/className), or null if the
+class cannot be found.
+
diff --git a/docs/api/shark-graph/shark/-heap-graph/find-object-by-id.md b/docs/api/shark-graph/shark/-heap-graph/find-object-by-id.md
new file mode 100644
index 00000000..857c9c35
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-graph/find-object-by-id.md
@@ -0,0 +1,9 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapGraph](index.md) / [findObjectById](./find-object-by-id.md)
+
+# findObjectById
+
+`abstract fun findObjectById(objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`): `[`HeapObject`](../-heap-object/index.md)
+
+Returns the [HeapObject](../-heap-object/index.md) corresponding to the provided [objectId](find-object-by-id.md#shark.HeapGraph$findObjectById(kotlin.Long)/objectId), and throws
+[IllegalArgumentException](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-illegal-argument-exception/index.html) otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-graph/gc-roots.md b/docs/api/shark-graph/shark/-heap-graph/gc-roots.md
new file mode 100644
index 00000000..bc7d2722
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-graph/gc-roots.md
@@ -0,0 +1,9 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapGraph](index.md) / [gcRoots](./gc-roots.md)
+
+# gcRoots
+
+`abstract val gcRoots: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<GcRoot>`
+
+All GC roots which type matches types known to this heap graph and which point to non null
+references.
+
diff --git a/docs/api/shark-graph/shark/-heap-graph/identifier-byte-size.md b/docs/api/shark-graph/shark/-heap-graph/identifier-byte-size.md
new file mode 100644
index 00000000..4e709404
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-graph/identifier-byte-size.md
@@ -0,0 +1,5 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapGraph](index.md) / [identifierByteSize](./identifier-byte-size.md)
+
+# identifierByteSize
+
+`abstract val identifierByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-graph/shark/-heap-graph/index.md b/docs/api/shark-graph/shark/-heap-graph/index.md
new file mode 100644
index 00000000..b05eef92
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-graph/index.md
@@ -0,0 +1,32 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapGraph](./index.md)
+
+# HeapGraph
+
+`interface HeapGraph`
+
+Enables navigation through the heap graph of objects.
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [classes](classes.md) | `abstract val classes: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject.HeapClass`](../-heap-object/-heap-class/index.md)`>`<br>Sequence of all classes in the heap dump. |
+| [context](context.md) | `abstract val context: `[`GraphContext`](../-graph-context/index.md)<br>In memory store that can be used to store objects this [HeapGraph](./index.md) instance. |
+| [gcRoots](gc-roots.md) | `abstract val gcRoots: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<GcRoot>`<br>All GC roots which type matches types known to this heap graph and which point to non null references. |
+| [identifierByteSize](identifier-byte-size.md) | `abstract val identifierByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [instances](instances.md) | `abstract val instances: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject.HeapInstance`](../-heap-object/-heap-instance/index.md)`>`<br>Sequence of all instances in the heap dump. |
+| [objects](objects.md) | `abstract val objects: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject`](../-heap-object/index.md)`>`<br>Sequence of all objects in the heap dump. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [findClassByName](find-class-by-name.md) | `abstract fun findClassByName(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`HeapObject.HeapClass`](../-heap-object/-heap-class/index.md)`?`<br>Returns the [HeapClass](../-heap-object/-heap-class/index.md) corresponding to the provided [className](find-class-by-name.md#shark.HeapGraph$findClassByName(kotlin.String)/className), or null if the class cannot be found. |
+| [findObjectById](find-object-by-id.md) | `abstract fun findObjectById(objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`): `[`HeapObject`](../-heap-object/index.md)<br>Returns the [HeapObject](../-heap-object/index.md) corresponding to the provided [objectId](find-object-by-id.md#shark.HeapGraph$findObjectById(kotlin.Long)/objectId), and throws [IllegalArgumentException](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-illegal-argument-exception/index.html) otherwise. |
+| [objectExists](object-exists.md) | `abstract fun objectExists(objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Returns true if the provided [objectId](object-exists.md#shark.HeapGraph$objectExists(kotlin.Long)/objectId) exists in the heap dump. |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [HprofHeapGraph](../-hprof-heap-graph/index.md) | `class HprofHeapGraph : `[`HeapGraph`](./index.md)<br>A [HeapGraph](./index.md) that reads from an indexed [Hprof](#). Create a new instance with [indexHprof](../-hprof-heap-graph/index-hprof.md). |
diff --git a/docs/api/shark-graph/shark/-heap-graph/instances.md b/docs/api/shark-graph/shark/-heap-graph/instances.md
new file mode 100644
index 00000000..1041b173
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-graph/instances.md
@@ -0,0 +1,10 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapGraph](index.md) / [instances](./instances.md)
+
+# instances
+
+`abstract val instances: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject.HeapInstance`](../-heap-object/-heap-instance/index.md)`>`
+
+Sequence of all instances in the heap dump.
+
+This sequence does not trigger any IO reads.
+
diff --git a/docs/api/shark-graph/shark/-heap-graph/object-exists.md b/docs/api/shark-graph/shark/-heap-graph/object-exists.md
new file mode 100644
index 00000000..552d4384
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-graph/object-exists.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapGraph](index.md) / [objectExists](./object-exists.md)
+
+# objectExists
+
+`abstract fun objectExists(objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Returns true if the provided [objectId](object-exists.md#shark.HeapGraph$objectExists(kotlin.Long)/objectId) exists in the heap dump.
+
diff --git a/docs/api/shark-graph/shark/-heap-graph/objects.md b/docs/api/shark-graph/shark/-heap-graph/objects.md
new file mode 100644
index 00000000..19f7297a
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-graph/objects.md
@@ -0,0 +1,10 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapGraph](index.md) / [objects](./objects.md)
+
+# objects
+
+`abstract val objects: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject`](../-heap-object/index.md)`>`
+
+Sequence of all objects in the heap dump.
+
+This sequence does not trigger any IO reads.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/class-hierarchy.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/class-hierarchy.md
new file mode 100644
index 00000000..cdc48c6d
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/class-hierarchy.md
@@ -0,0 +1,9 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [classHierarchy](./class-hierarchy.md)
+
+# classHierarchy
+
+`val classHierarchy: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject.HeapClass`](index.md)`>`
+
+The class hierarchy starting at this class (included) and ending at the [Object](https://docs.oracle.com/javase/6/docs/api/java/lang/Object.html) class
+(included).
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/direct-instances.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/direct-instances.md
new file mode 100644
index 00000000..bf6990f3
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/direct-instances.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [directInstances](./direct-instances.md)
+
+# directInstances
+
+`val directInstances: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject.HeapInstance`](../-heap-instance/index.md)`>`
+
+All direct instances of this class, ie excluding any instance of subclasses of this class.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/get.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/get.md
new file mode 100644
index 00000000..9071ccf3
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/get.md
@@ -0,0 +1,10 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [get](./get.md)
+
+# get
+
+`operator fun get(fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`HeapField`](../../-heap-field/index.md)`?`
+
+**See Also**
+
+[readStaticField](read-static-field.md)
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/graph.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/graph.md
new file mode 100644
index 00000000..3769da45
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/graph.md
@@ -0,0 +1,10 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [graph](./graph.md)
+
+# graph
+
+`val graph: `[`HeapGraph`](../../-heap-graph/index.md)
+
+Overrides [HeapObject.graph](../graph.md)
+
+The graph of objects in the heap, which you can use to navigate the heap.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/index.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/index.md
new file mode 100644
index 00000000..f5c3def2
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/index.md
@@ -0,0 +1,44 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](./index.md)
+
+# HeapClass
+
+`class HeapClass : `[`HeapObject`](../index.md)
+
+A class in the heap dump.
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [classHierarchy](class-hierarchy.md) | `val classHierarchy: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject.HeapClass`](./index.md)`>`<br>The class hierarchy starting at this class (included) and ending at the [Object](https://docs.oracle.com/javase/6/docs/api/java/lang/Object.html) class (included). |
+| [directInstances](direct-instances.md) | `val directInstances: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject.HeapInstance`](../-heap-instance/index.md)`>`<br>All direct instances of this class, ie excluding any instance of subclasses of this class. |
+| [graph](graph.md) | `val graph: `[`HeapGraph`](../../-heap-graph/index.md)<br>The graph of objects in the heap, which you can use to navigate the heap. |
+| [instanceByteSize](instance-byte-size.md) | `val instanceByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The total byte size of fields for instances of this class, as registered in the class dump. This includes the size of fields from superclasses. |
+| [instances](instances.md) | `val instances: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject.HeapInstance`](../-heap-instance/index.md)`>`<br>All instances of this class, including instances of subclasses of this class. |
+| [name](name.md) | `val name: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>The name of this class, identical to [Class.getName](https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName()). |
+| [objectId](object-id.md) | `val objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The heap identifier of this object. |
+| [simpleName](simple-name.md) | `val simpleName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>Returns [name](name.md) stripped of any string content before the last period (included). |
+| [subclasses](subclasses.md) | `val subclasses: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject.HeapClass`](./index.md)`>`<br>All the subclasses (direct and indirect) of this class, in the order they were recorded in the heap dump. |
+| [superclass](superclass.md) | `val superclass: `[`HeapObject.HeapClass`](./index.md)`?`<br>The [HeapClass](./index.md) representing the superclass of this [HeapClass](./index.md). If this [HeapClass](./index.md) represents either the [Object](https://docs.oracle.com/javase/6/docs/api/java/lang/Object.html) class or a primitive type, then null is returned. If this [HeapClass](./index.md) represents an array class then the [HeapClass](./index.md) object representing the [Object](https://docs.oracle.com/javase/6/docs/api/java/lang/Object.html) class is returned. |
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [asClass](../as-class.md) | `val asClass: `[`HeapObject.HeapClass`](./index.md)`?`<br>This [HeapObject](../index.md) as a [HeapClass](./index.md) if it is one, or null otherwise |
+| [asInstance](../as-instance.md) | `val asInstance: `[`HeapObject.HeapInstance`](../-heap-instance/index.md)`?`<br>This [HeapObject](../index.md) as a [HeapInstance](../-heap-instance/index.md) if it is one, or null otherwise |
+| [asObjectArray](../as-object-array.md) | `val asObjectArray: `[`HeapObject.HeapObjectArray`](../-heap-object-array/index.md)`?`<br>This [HeapObject](../index.md) as a [HeapObjectArray](../-heap-object-array/index.md) if it is one, or null otherwise |
+| [asPrimitiveArray](../as-primitive-array.md) | `val asPrimitiveArray: `[`HeapObject.HeapPrimitiveArray`](../-heap-primitive-array/index.md)`?`<br>This [HeapObject](../index.md) as a [HeapPrimitiveArray](../-heap-primitive-array/index.md) if it is one, or null otherwise |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [get](get.md) | `operator fun get(fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`HeapField`](../../-heap-field/index.md)`?` |
+| [readFieldsByteSize](read-fields-byte-size.md) | `fun readFieldsByteSize(): `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The total byte size of fields for instances of this class, computed as the sum of the individual size of each field of this class. This does not include the size of fields from superclasses. |
+| [readRecord](read-record.md) | `fun readRecord(): ClassDumpRecord`<br>Reads and returns the underlying [ClassDumpRecord](#). |
+| [readStaticField](read-static-field.md) | `fun readStaticField(fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`HeapField`](../../-heap-field/index.md)`?`<br>Returns a [HeapField](../../-heap-field/index.md) object that reflects the specified declared field of the class represented by this [HeapClass](./index.md) object, or null if this field does not exist. The [name](name.md) parameter specifies the simple name of the desired field. |
+| [readStaticFields](read-static-fields.md) | `fun readStaticFields(): `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapField`](../../-heap-field/index.md)`>`<br>The static fields of this class, as a sequence of [HeapField](../../-heap-field/index.md). |
+| [subclassOf](subclass-of.md) | `infix fun subclassOf(superclass: `[`HeapObject.HeapClass`](./index.md)`): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Returns true if [superclass](subclass-of.md#shark.HeapObject.HeapClass$subclassOf(shark.HeapObject.HeapClass)/superclass) is a superclass of this [HeapClass](./index.md). |
+| [superclassOf](superclass-of.md) | `infix fun superclassOf(subclass: `[`HeapObject.HeapClass`](./index.md)`): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Returns true if [subclass](superclass-of.md#shark.HeapObject.HeapClass$superclassOf(shark.HeapObject.HeapClass)/subclass) is a sub class of this [HeapClass](./index.md). |
+| [toString](to-string.md) | `fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/instance-byte-size.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/instance-byte-size.md
new file mode 100644
index 00000000..bb9abe83
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/instance-byte-size.md
@@ -0,0 +1,13 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [instanceByteSize](./instance-byte-size.md)
+
+# instanceByteSize
+
+`val instanceByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+The total byte size of fields for instances of this class, as registered in the class dump.
+This includes the size of fields from superclasses.
+
+**See Also**
+
+[readFieldsByteSize](read-fields-byte-size.md)
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/instances.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/instances.md
new file mode 100644
index 00000000..cb5a742e
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/instances.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [instances](./instances.md)
+
+# instances
+
+`val instances: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject.HeapInstance`](../-heap-instance/index.md)`>`
+
+All instances of this class, including instances of subclasses of this class.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/name.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/name.md
new file mode 100644
index 00000000..3f21245e
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/name.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [name](./name.md)
+
+# name
+
+`val name: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+The name of this class, identical to [Class.getName](https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName()).
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/object-id.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/object-id.md
new file mode 100644
index 00000000..f230ecf8
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/object-id.md
@@ -0,0 +1,10 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [objectId](./object-id.md)
+
+# objectId
+
+`val objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [HeapObject.objectId](../object-id.md)
+
+The heap identifier of this object.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/read-fields-byte-size.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/read-fields-byte-size.md
new file mode 100644
index 00000000..0cf8dfa7
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/read-fields-byte-size.md
@@ -0,0 +1,16 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [readFieldsByteSize](./read-fields-byte-size.md)
+
+# readFieldsByteSize
+
+`fun readFieldsByteSize(): `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+The total byte size of fields for instances of this class, computed as the sum of the
+individual size of each field of this class. This does not include the size of fields from
+superclasses.
+
+This may trigger IO reads.
+
+**See Also**
+
+[instanceByteSize](instance-byte-size.md)
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/read-record.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/read-record.md
new file mode 100644
index 00000000..21f99386
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/read-record.md
@@ -0,0 +1,12 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [readRecord](./read-record.md)
+
+# readRecord
+
+`fun readRecord(): ClassDumpRecord`
+
+Overrides [HeapObject.readRecord](../read-record.md)
+
+Reads and returns the underlying [ClassDumpRecord](#).
+
+This may trigger IO reads.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/read-static-field.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/read-static-field.md
new file mode 100644
index 00000000..092ee803
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/read-static-field.md
@@ -0,0 +1,14 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [readStaticField](./read-static-field.md)
+
+# readStaticField
+
+`fun readStaticField(fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`HeapField`](../../-heap-field/index.md)`?`
+
+Returns a [HeapField](../../-heap-field/index.md) object that reflects the specified declared
+field of the class represented by this [HeapClass](index.md) object, or null if this field does not
+exist. The [name](name.md) parameter specifies the simple name of the desired field.
+
+Also available as a convenience operator: [get](get.md)
+
+This may trigger IO reads.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/read-static-fields.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/read-static-fields.md
new file mode 100644
index 00000000..d3e990cd
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/read-static-fields.md
@@ -0,0 +1,10 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [readStaticFields](./read-static-fields.md)
+
+# readStaticFields
+
+`fun readStaticFields(): `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapField`](../../-heap-field/index.md)`>`
+
+The static fields of this class, as a sequence of [HeapField](../../-heap-field/index.md).
+
+This may trigger IO reads.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/simple-name.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/simple-name.md
new file mode 100644
index 00000000..93553b44
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/simple-name.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [simpleName](./simple-name.md)
+
+# simpleName
+
+`val simpleName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+Returns [name](name.md) stripped of any string content before the last period (included).
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/subclass-of.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/subclass-of.md
new file mode 100644
index 00000000..c84cda93
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/subclass-of.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [subclassOf](./subclass-of.md)
+
+# subclassOf
+
+`infix fun subclassOf(superclass: `[`HeapObject.HeapClass`](index.md)`): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Returns true if [superclass](subclass-of.md#shark.HeapObject.HeapClass$subclassOf(shark.HeapObject.HeapClass)/superclass) is a superclass of this [HeapClass](index.md).
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/subclasses.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/subclasses.md
new file mode 100644
index 00000000..cae19b2f
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/subclasses.md
@@ -0,0 +1,9 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [subclasses](./subclasses.md)
+
+# subclasses
+
+`val subclasses: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject.HeapClass`](index.md)`>`
+
+All the subclasses (direct and indirect) of this class,
+in the order they were recorded in the heap dump.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/superclass-of.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/superclass-of.md
new file mode 100644
index 00000000..06ea7ca7
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/superclass-of.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [superclassOf](./superclass-of.md)
+
+# superclassOf
+
+`infix fun superclassOf(subclass: `[`HeapObject.HeapClass`](index.md)`): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Returns true if [subclass](superclass-of.md#shark.HeapObject.HeapClass$superclassOf(shark.HeapObject.HeapClass)/subclass) is a sub class of this [HeapClass](index.md).
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/superclass.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/superclass.md
new file mode 100644
index 00000000..c646c035
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/superclass.md
@@ -0,0 +1,11 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [superclass](./superclass.md)
+
+# superclass
+
+`val superclass: `[`HeapObject.HeapClass`](index.md)`?`
+
+The [HeapClass](index.md) representing the superclass of this [HeapClass](index.md). If this [HeapClass](index.md)
+represents either the [Object](https://docs.oracle.com/javase/6/docs/api/java/lang/Object.html) class or a primitive type, then
+null is returned. If this [HeapClass](index.md) represents an array class then the
+[HeapClass](index.md) object representing the [Object](https://docs.oracle.com/javase/6/docs/api/java/lang/Object.html) class is returned.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-class/to-string.md b/docs/api/shark-graph/shark/-heap-object/-heap-class/to-string.md
new file mode 100644
index 00000000..f226b489
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-class/to-string.md
@@ -0,0 +1,5 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapClass](index.md) / [toString](./to-string.md)
+
+# toString
+
+`fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-instance/byte-size.md b/docs/api/shark-graph/shark/-heap-object/-heap-instance/byte-size.md
new file mode 100644
index 00000000..274bdc75
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-instance/byte-size.md
@@ -0,0 +1,10 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapInstance](index.md) / [byteSize](./byte-size.md)
+
+# byteSize
+
+`val byteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+**See Also**
+
+[HeapClass.instanceByteSize](../-heap-class/instance-byte-size.md)
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-instance/get.md b/docs/api/shark-graph/shark/-heap-object/-heap-instance/get.md
new file mode 100644
index 00000000..ba736614
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-instance/get.md
@@ -0,0 +1,11 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapInstance](index.md) / [get](./get.md)
+
+# get
+
+`operator fun get(declaringClass: `[`KClass`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html)`<out `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`>, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`HeapField`](../../-heap-field/index.md)`?`
+`operator fun get(declaringClassName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`HeapField`](../../-heap-field/index.md)`?`
+
+**See Also**
+
+[readField](read-field.md)
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-instance/graph.md b/docs/api/shark-graph/shark/-heap-object/-heap-instance/graph.md
new file mode 100644
index 00000000..6736d82f
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-instance/graph.md
@@ -0,0 +1,10 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapInstance](index.md) / [graph](./graph.md)
+
+# graph
+
+`val graph: `[`HeapGraph`](../../-heap-graph/index.md)
+
+Overrides [HeapObject.graph](../graph.md)
+
+The graph of objects in the heap, which you can use to navigate the heap.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-instance/index.md b/docs/api/shark-graph/shark/-heap-object/-heap-instance/index.md
new file mode 100644
index 00000000..2e6a660a
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-instance/index.md
@@ -0,0 +1,40 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapInstance](./index.md)
+
+# HeapInstance
+
+`class HeapInstance : `[`HeapObject`](../index.md)
+
+An instance in the heap dump.
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [byteSize](byte-size.md) | `val byteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [graph](graph.md) | `val graph: `[`HeapGraph`](../../-heap-graph/index.md)<br>The graph of objects in the heap, which you can use to navigate the heap. |
+| [instanceClass](instance-class.md) | `val instanceClass: `[`HeapObject.HeapClass`](../-heap-class/index.md)<br>The class of this instance. |
+| [instanceClassName](instance-class-name.md) | `val instanceClassName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>The name of the class of this instance, identical to [Class.getName](https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName()). |
+| [instanceClassSimpleName](instance-class-simple-name.md) | `val instanceClassSimpleName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>Returns [instanceClassName](instance-class-name.md) stripped of any string content before the last period (included). |
+| [isPrimitiveWrapper](is-primitive-wrapper.md) | `val isPrimitiveWrapper: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Whether this is an instance of a primitive wrapper type. |
+| [objectId](object-id.md) | `val objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The heap identifier of this object. |
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [asClass](../as-class.md) | `val asClass: `[`HeapObject.HeapClass`](../-heap-class/index.md)`?`<br>This [HeapObject](../index.md) as a [HeapClass](../-heap-class/index.md) if it is one, or null otherwise |
+| [asInstance](../as-instance.md) | `val asInstance: `[`HeapObject.HeapInstance`](./index.md)`?`<br>This [HeapObject](../index.md) as a [HeapInstance](./index.md) if it is one, or null otherwise |
+| [asObjectArray](../as-object-array.md) | `val asObjectArray: `[`HeapObject.HeapObjectArray`](../-heap-object-array/index.md)`?`<br>This [HeapObject](../index.md) as a [HeapObjectArray](../-heap-object-array/index.md) if it is one, or null otherwise |
+| [asPrimitiveArray](../as-primitive-array.md) | `val asPrimitiveArray: `[`HeapObject.HeapPrimitiveArray`](../-heap-primitive-array/index.md)`?`<br>This [HeapObject](../index.md) as a [HeapPrimitiveArray](../-heap-primitive-array/index.md) if it is one, or null otherwise |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [get](get.md) | `operator fun get(declaringClass: `[`KClass`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html)`<out `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`>, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`HeapField`](../../-heap-field/index.md)`?`<br>`operator fun get(declaringClassName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`HeapField`](../../-heap-field/index.md)`?` |
+| [instanceOf](instance-of.md) | `infix fun instanceOf(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Returns true if this is an instance of the class named [className](instance-of.md#shark.HeapObject.HeapInstance$instanceOf(kotlin.String)/className) or an instance of a subclass of that class.`infix fun instanceOf(expectedClass: `[`KClass`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html)`<*>): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>`infix fun instanceOf(expectedClass: `[`HeapObject.HeapClass`](../-heap-class/index.md)`): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Returns true if this is an instance of [expectedClass](instance-of.md#shark.HeapObject.HeapInstance$instanceOf(kotlin.reflect.KClass((kotlin.Any)))/expectedClass) or an instance of a subclass of that class. |
+| [readAsJavaString](read-as-java-string.md) | `fun readAsJavaString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`?`<br>If this [HeapInstance](./index.md) is an instance of the [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) class, returns a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) instance with content that matches the string in the heap dump. Otherwise returns null. |
+| [readField](read-field.md) | `fun readField(declaringClass: `[`KClass`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html)`<out `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`>, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`HeapField`](../../-heap-field/index.md)`?``fun readField(declaringClassName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`HeapField`](../../-heap-field/index.md)`?`<br>Returns a [HeapField](../../-heap-field/index.md) object that reflects the specified declared field of the instance represented by this [HeapInstance](./index.md) object, or null if this field does not exist. The [declaringClassName](read-field.md#shark.HeapObject.HeapInstance$readField(kotlin.String, kotlin.String)/declaringClassName) specifies the class in which the desired field is declared, and the [fieldName](read-field.md#shark.HeapObject.HeapInstance$readField(kotlin.String, kotlin.String)/fieldName) parameter specifies the simple name of the desired field. |
+| [readFields](read-fields.md) | `fun readFields(): `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapField`](../../-heap-field/index.md)`>`<br>The fields of this instance, as a sequence of [HeapField](../../-heap-field/index.md). |
+| [readRecord](read-record.md) | `fun readRecord(): InstanceDumpRecord`<br>Reads and returns the underlying [InstanceDumpRecord](#). |
+| [toString](to-string.md) | `fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-instance/instance-class-name.md b/docs/api/shark-graph/shark/-heap-object/-heap-instance/instance-class-name.md
new file mode 100644
index 00000000..57058598
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-instance/instance-class-name.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapInstance](index.md) / [instanceClassName](./instance-class-name.md)
+
+# instanceClassName
+
+`val instanceClassName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+The name of the class of this instance, identical to [Class.getName](https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName()).
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-instance/instance-class-simple-name.md b/docs/api/shark-graph/shark/-heap-object/-heap-instance/instance-class-simple-name.md
new file mode 100644
index 00000000..22351263
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-instance/instance-class-simple-name.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapInstance](index.md) / [instanceClassSimpleName](./instance-class-simple-name.md)
+
+# instanceClassSimpleName
+
+`val instanceClassSimpleName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+Returns [instanceClassName](instance-class-name.md) stripped of any string content before the last period (included).
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-instance/instance-class.md b/docs/api/shark-graph/shark/-heap-object/-heap-instance/instance-class.md
new file mode 100644
index 00000000..344909d1
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-instance/instance-class.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapInstance](index.md) / [instanceClass](./instance-class.md)
+
+# instanceClass
+
+`val instanceClass: `[`HeapObject.HeapClass`](../-heap-class/index.md)
+
+The class of this instance.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-instance/instance-of.md b/docs/api/shark-graph/shark/-heap-object/-heap-instance/instance-of.md
new file mode 100644
index 00000000..1649067d
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-instance/instance-of.md
@@ -0,0 +1,15 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapInstance](index.md) / [instanceOf](./instance-of.md)
+
+# instanceOf
+
+`infix fun instanceOf(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Returns true if this is an instance of the class named [className](instance-of.md#shark.HeapObject.HeapInstance$instanceOf(kotlin.String)/className) or an instance of a
+subclass of that class.
+
+`infix fun instanceOf(expectedClass: `[`KClass`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html)`<*>): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+`infix fun instanceOf(expectedClass: `[`HeapObject.HeapClass`](../-heap-class/index.md)`): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Returns true if this is an instance of [expectedClass](instance-of.md#shark.HeapObject.HeapInstance$instanceOf(kotlin.reflect.KClass((kotlin.Any)))/expectedClass) or an instance of a subclass of that
+class.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-instance/is-primitive-wrapper.md b/docs/api/shark-graph/shark/-heap-object/-heap-instance/is-primitive-wrapper.md
new file mode 100644
index 00000000..b7046112
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-instance/is-primitive-wrapper.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapInstance](index.md) / [isPrimitiveWrapper](./is-primitive-wrapper.md)
+
+# isPrimitiveWrapper
+
+`val isPrimitiveWrapper: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Whether this is an instance of a primitive wrapper type.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-instance/object-id.md b/docs/api/shark-graph/shark/-heap-object/-heap-instance/object-id.md
new file mode 100644
index 00000000..bfa17b13
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-instance/object-id.md
@@ -0,0 +1,10 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapInstance](index.md) / [objectId](./object-id.md)
+
+# objectId
+
+`val objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [HeapObject.objectId](../object-id.md)
+
+The heap identifier of this object.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-instance/read-as-java-string.md b/docs/api/shark-graph/shark/-heap-object/-heap-instance/read-as-java-string.md
new file mode 100644
index 00000000..98d240c2
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-instance/read-as-java-string.md
@@ -0,0 +1,11 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapInstance](index.md) / [readAsJavaString](./read-as-java-string.md)
+
+# readAsJavaString
+
+`fun readAsJavaString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`?`
+
+If this [HeapInstance](index.md) is an instance of the [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) class, returns a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) instance
+with content that matches the string in the heap dump. Otherwise returns null.
+
+This may trigger IO reads.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-instance/read-field.md b/docs/api/shark-graph/shark/-heap-object/-heap-instance/read-field.md
new file mode 100644
index 00000000..b8db45b2
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-instance/read-field.md
@@ -0,0 +1,21 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapInstance](index.md) / [readField](./read-field.md)
+
+# readField
+
+`fun readField(declaringClass: `[`KClass`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html)`<out `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`>, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`HeapField`](../../-heap-field/index.md)`?`
+
+**See Also**
+
+[readField](./read-field.md)
+
+`fun readField(declaringClassName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`HeapField`](../../-heap-field/index.md)`?`
+
+Returns a [HeapField](../../-heap-field/index.md) object that reflects the specified declared
+field of the instance represented by this [HeapInstance](index.md) object, or null if this field does
+not exist. The [declaringClassName](read-field.md#shark.HeapObject.HeapInstance$readField(kotlin.String, kotlin.String)/declaringClassName) specifies the class in which the desired field is
+declared, and the [fieldName](read-field.md#shark.HeapObject.HeapInstance$readField(kotlin.String, kotlin.String)/fieldName) parameter specifies the simple name of the desired field.
+
+Also available as a convenience operator: [get](get.md)
+
+This may trigger IO reads.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-instance/read-fields.md b/docs/api/shark-graph/shark/-heap-object/-heap-instance/read-fields.md
new file mode 100644
index 00000000..6c479fa5
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-instance/read-fields.md
@@ -0,0 +1,10 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapInstance](index.md) / [readFields](./read-fields.md)
+
+# readFields
+
+`fun readFields(): `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapField`](../../-heap-field/index.md)`>`
+
+The fields of this instance, as a sequence of [HeapField](../../-heap-field/index.md).
+
+This may trigger IO reads.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-instance/read-record.md b/docs/api/shark-graph/shark/-heap-object/-heap-instance/read-record.md
new file mode 100644
index 00000000..37a86a3d
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-instance/read-record.md
@@ -0,0 +1,12 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapInstance](index.md) / [readRecord](./read-record.md)
+
+# readRecord
+
+`fun readRecord(): InstanceDumpRecord`
+
+Overrides [HeapObject.readRecord](../read-record.md)
+
+Reads and returns the underlying [InstanceDumpRecord](#).
+
+This may trigger IO reads.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-instance/to-string.md b/docs/api/shark-graph/shark/-heap-object/-heap-instance/to-string.md
new file mode 100644
index 00000000..e3471591
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-instance/to-string.md
@@ -0,0 +1,5 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapInstance](index.md) / [toString](./to-string.md)
+
+# toString
+
+`fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-object-array/array-class-name.md b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/array-class-name.md
new file mode 100644
index 00000000..6097d58b
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/array-class-name.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapObjectArray](index.md) / [arrayClassName](./array-class-name.md)
+
+# arrayClassName
+
+`val arrayClassName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+The name of the class of this array, identical to [Class.getName](https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName()).
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-object-array/array-class-simple-name.md b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/array-class-simple-name.md
new file mode 100644
index 00000000..d6765274
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/array-class-simple-name.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapObjectArray](index.md) / [arrayClassSimpleName](./array-class-simple-name.md)
+
+# arrayClassSimpleName
+
+`val arrayClassSimpleName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+Returns [arrayClassName](array-class-name.md) stripped of any string content before the last period (included).
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-object-array/array-class.md b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/array-class.md
new file mode 100644
index 00000000..971fbe76
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/array-class.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapObjectArray](index.md) / [arrayClass](./array-class.md)
+
+# arrayClass
+
+`val arrayClass: `[`HeapObject.HeapClass`](../-heap-class/index.md)
+
+The class of this array.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-object-array/graph.md b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/graph.md
new file mode 100644
index 00000000..7ac65299
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/graph.md
@@ -0,0 +1,10 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapObjectArray](index.md) / [graph](./graph.md)
+
+# graph
+
+`val graph: `[`HeapGraph`](../../-heap-graph/index.md)
+
+Overrides [HeapObject.graph](../graph.md)
+
+The graph of objects in the heap, which you can use to navigate the heap.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-object-array/index.md b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/index.md
new file mode 100644
index 00000000..73de8728
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/index.md
@@ -0,0 +1,36 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapObjectArray](./index.md)
+
+# HeapObjectArray
+
+`class HeapObjectArray : `[`HeapObject`](../index.md)
+
+An object array in the heap dump.
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [arrayClass](array-class.md) | `val arrayClass: `[`HeapObject.HeapClass`](../-heap-class/index.md)<br>The class of this array. |
+| [arrayClassName](array-class-name.md) | `val arrayClassName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>The name of the class of this array, identical to [Class.getName](https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName()). |
+| [arrayClassSimpleName](array-class-simple-name.md) | `val arrayClassSimpleName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>Returns [arrayClassName](array-class-name.md) stripped of any string content before the last period (included). |
+| [graph](graph.md) | `val graph: `[`HeapGraph`](../../-heap-graph/index.md)<br>The graph of objects in the heap, which you can use to navigate the heap. |
+| [isPrimitiveWrapperArray](is-primitive-wrapper-array.md) | `val isPrimitiveWrapperArray: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) |
+| [objectId](object-id.md) | `val objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The heap identifier of this object. |
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [asClass](../as-class.md) | `val asClass: `[`HeapObject.HeapClass`](../-heap-class/index.md)`?`<br>This [HeapObject](../index.md) as a [HeapClass](../-heap-class/index.md) if it is one, or null otherwise |
+| [asInstance](../as-instance.md) | `val asInstance: `[`HeapObject.HeapInstance`](../-heap-instance/index.md)`?`<br>This [HeapObject](../index.md) as a [HeapInstance](../-heap-instance/index.md) if it is one, or null otherwise |
+| [asObjectArray](../as-object-array.md) | `val asObjectArray: `[`HeapObject.HeapObjectArray`](./index.md)`?`<br>This [HeapObject](../index.md) as a [HeapObjectArray](./index.md) if it is one, or null otherwise |
+| [asPrimitiveArray](../as-primitive-array.md) | `val asPrimitiveArray: `[`HeapObject.HeapPrimitiveArray`](../-heap-primitive-array/index.md)`?`<br>This [HeapObject](../index.md) as a [HeapPrimitiveArray](../-heap-primitive-array/index.md) if it is one, or null otherwise |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [readByteSize](read-byte-size.md) | `fun readByteSize(): `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The total byte shallow size of elements in this array. |
+| [readElements](read-elements.md) | `fun readElements(): `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapValue`](../../-heap-value/index.md)`>`<br>The elements in this array, as a sequence of [HeapValue](../../-heap-value/index.md). |
+| [readRecord](read-record.md) | `fun readRecord(): ObjectArrayDumpRecord`<br>Reads and returns the underlying [ObjectArrayDumpRecord](#). |
+| [toString](to-string.md) | `fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-object-array/is-primitive-wrapper-array.md b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/is-primitive-wrapper-array.md
new file mode 100644
index 00000000..2315da84
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/is-primitive-wrapper-array.md
@@ -0,0 +1,5 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapObjectArray](index.md) / [isPrimitiveWrapperArray](./is-primitive-wrapper-array.md)
+
+# isPrimitiveWrapperArray
+
+`val isPrimitiveWrapperArray: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-object-array/object-id.md b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/object-id.md
new file mode 100644
index 00000000..e126bba8
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/object-id.md
@@ -0,0 +1,10 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapObjectArray](index.md) / [objectId](./object-id.md)
+
+# objectId
+
+`val objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [HeapObject.objectId](../object-id.md)
+
+The heap identifier of this object.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-object-array/read-byte-size.md b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/read-byte-size.md
new file mode 100644
index 00000000..9c288b6a
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/read-byte-size.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapObjectArray](index.md) / [readByteSize](./read-byte-size.md)
+
+# readByteSize
+
+`fun readByteSize(): `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+The total byte shallow size of elements in this array.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-object-array/read-elements.md b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/read-elements.md
new file mode 100644
index 00000000..d097dfd0
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/read-elements.md
@@ -0,0 +1,10 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapObjectArray](index.md) / [readElements](./read-elements.md)
+
+# readElements
+
+`fun readElements(): `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapValue`](../../-heap-value/index.md)`>`
+
+The elements in this array, as a sequence of [HeapValue](../../-heap-value/index.md).
+
+This may trigger IO reads.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-object-array/read-record.md b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/read-record.md
new file mode 100644
index 00000000..9062c1b2
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/read-record.md
@@ -0,0 +1,12 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapObjectArray](index.md) / [readRecord](./read-record.md)
+
+# readRecord
+
+`fun readRecord(): ObjectArrayDumpRecord`
+
+Overrides [HeapObject.readRecord](../read-record.md)
+
+Reads and returns the underlying [ObjectArrayDumpRecord](#).
+
+This may trigger IO reads.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-object-array/to-string.md b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/to-string.md
new file mode 100644
index 00000000..481f6068
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-object-array/to-string.md
@@ -0,0 +1,5 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapObjectArray](index.md) / [toString](./to-string.md)
+
+# toString
+
+`fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/array-class-name.md b/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/array-class-name.md
new file mode 100644
index 00000000..789f2eac
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/array-class-name.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapPrimitiveArray](index.md) / [arrayClassName](./array-class-name.md)
+
+# arrayClassName
+
+`val arrayClassName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+The name of the class of this array, identical to [Class.getName](https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName()).
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/graph.md b/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/graph.md
new file mode 100644
index 00000000..f01b7f96
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/graph.md
@@ -0,0 +1,10 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapPrimitiveArray](index.md) / [graph](./graph.md)
+
+# graph
+
+`val graph: `[`HeapGraph`](../../-heap-graph/index.md)
+
+Overrides [HeapObject.graph](../graph.md)
+
+The graph of objects in the heap, which you can use to navigate the heap.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/index.md b/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/index.md
new file mode 100644
index 00000000..734f6f50
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/index.md
@@ -0,0 +1,33 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapPrimitiveArray](./index.md)
+
+# HeapPrimitiveArray
+
+`class HeapPrimitiveArray : `[`HeapObject`](../index.md)
+
+A primitive array in the heap dump.
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [arrayClassName](array-class-name.md) | `val arrayClassName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>The name of the class of this array, identical to [Class.getName](https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName()). |
+| [graph](graph.md) | `val graph: `[`HeapGraph`](../../-heap-graph/index.md)<br>The graph of objects in the heap, which you can use to navigate the heap. |
+| [objectId](object-id.md) | `val objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The heap identifier of this object. |
+| [primitiveType](primitive-type.md) | `val primitiveType: PrimitiveType`<br>The [PrimitiveType](#) of elements in this array. |
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [asClass](../as-class.md) | `val asClass: `[`HeapObject.HeapClass`](../-heap-class/index.md)`?`<br>This [HeapObject](../index.md) as a [HeapClass](../-heap-class/index.md) if it is one, or null otherwise |
+| [asInstance](../as-instance.md) | `val asInstance: `[`HeapObject.HeapInstance`](../-heap-instance/index.md)`?`<br>This [HeapObject](../index.md) as a [HeapInstance](../-heap-instance/index.md) if it is one, or null otherwise |
+| [asObjectArray](../as-object-array.md) | `val asObjectArray: `[`HeapObject.HeapObjectArray`](../-heap-object-array/index.md)`?`<br>This [HeapObject](../index.md) as a [HeapObjectArray](../-heap-object-array/index.md) if it is one, or null otherwise |
+| [asPrimitiveArray](../as-primitive-array.md) | `val asPrimitiveArray: `[`HeapObject.HeapPrimitiveArray`](./index.md)`?`<br>This [HeapObject](../index.md) as a [HeapPrimitiveArray](./index.md) if it is one, or null otherwise |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [readByteSize](read-byte-size.md) | `fun readByteSize(): `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The total byte shallow size of elements in this array. |
+| [readRecord](read-record.md) | `fun readRecord(): PrimitiveArrayDumpRecord`<br>Reads and returns the underlying [PrimitiveArrayDumpRecord](#). |
+| [toString](to-string.md) | `fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/object-id.md b/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/object-id.md
new file mode 100644
index 00000000..b3f19ade
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/object-id.md
@@ -0,0 +1,10 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapPrimitiveArray](index.md) / [objectId](./object-id.md)
+
+# objectId
+
+`val objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [HeapObject.objectId](../object-id.md)
+
+The heap identifier of this object.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/primitive-type.md b/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/primitive-type.md
new file mode 100644
index 00000000..5d37321d
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/primitive-type.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapPrimitiveArray](index.md) / [primitiveType](./primitive-type.md)
+
+# primitiveType
+
+`val primitiveType: PrimitiveType`
+
+The [PrimitiveType](#) of elements in this array.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/read-byte-size.md b/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/read-byte-size.md
new file mode 100644
index 00000000..77926b49
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/read-byte-size.md
@@ -0,0 +1,8 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapPrimitiveArray](index.md) / [readByteSize](./read-byte-size.md)
+
+# readByteSize
+
+`fun readByteSize(): `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+The total byte shallow size of elements in this array.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/read-record.md b/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/read-record.md
new file mode 100644
index 00000000..8a936139
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/read-record.md
@@ -0,0 +1,12 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapPrimitiveArray](index.md) / [readRecord](./read-record.md)
+
+# readRecord
+
+`fun readRecord(): PrimitiveArrayDumpRecord`
+
+Overrides [HeapObject.readRecord](../read-record.md)
+
+Reads and returns the underlying [PrimitiveArrayDumpRecord](#).
+
+This may trigger IO reads.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/to-string.md b/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/to-string.md
new file mode 100644
index 00000000..7812aa28
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/-heap-primitive-array/to-string.md
@@ -0,0 +1,5 @@
+[shark-graph](../../../index.md) / [shark](../../index.md) / [HeapObject](../index.md) / [HeapPrimitiveArray](index.md) / [toString](./to-string.md)
+
+# toString
+
+`fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-graph/shark/-heap-object/as-class.md b/docs/api/shark-graph/shark/-heap-object/as-class.md
new file mode 100644
index 00000000..cd6a7f6d
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/as-class.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapObject](index.md) / [asClass](./as-class.md)
+
+# asClass
+
+`val asClass: `[`HeapObject.HeapClass`](-heap-class/index.md)`?`
+
+This [HeapObject](index.md) as a [HeapClass](-heap-class/index.md) if it is one, or null otherwise
+
diff --git a/docs/api/shark-graph/shark/-heap-object/as-instance.md b/docs/api/shark-graph/shark/-heap-object/as-instance.md
new file mode 100644
index 00000000..c4530105
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/as-instance.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapObject](index.md) / [asInstance](./as-instance.md)
+
+# asInstance
+
+`val asInstance: `[`HeapObject.HeapInstance`](-heap-instance/index.md)`?`
+
+This [HeapObject](index.md) as a [HeapInstance](-heap-instance/index.md) if it is one, or null otherwise
+
diff --git a/docs/api/shark-graph/shark/-heap-object/as-object-array.md b/docs/api/shark-graph/shark/-heap-object/as-object-array.md
new file mode 100644
index 00000000..62a6331e
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/as-object-array.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapObject](index.md) / [asObjectArray](./as-object-array.md)
+
+# asObjectArray
+
+`val asObjectArray: `[`HeapObject.HeapObjectArray`](-heap-object-array/index.md)`?`
+
+This [HeapObject](index.md) as a [HeapObjectArray](-heap-object-array/index.md) if it is one, or null otherwise
+
diff --git a/docs/api/shark-graph/shark/-heap-object/as-primitive-array.md b/docs/api/shark-graph/shark/-heap-object/as-primitive-array.md
new file mode 100644
index 00000000..dff3886a
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/as-primitive-array.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapObject](index.md) / [asPrimitiveArray](./as-primitive-array.md)
+
+# asPrimitiveArray
+
+`val asPrimitiveArray: `[`HeapObject.HeapPrimitiveArray`](-heap-primitive-array/index.md)`?`
+
+This [HeapObject](index.md) as a [HeapPrimitiveArray](-heap-primitive-array/index.md) if it is one, or null otherwise
+
diff --git a/docs/api/shark-graph/shark/-heap-object/graph.md b/docs/api/shark-graph/shark/-heap-object/graph.md
new file mode 100644
index 00000000..58098c67
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/graph.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapObject](index.md) / [graph](./graph.md)
+
+# graph
+
+`abstract val graph: `[`HeapGraph`](../-heap-graph/index.md)
+
+The graph of objects in the heap, which you can use to navigate the heap.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/index.md b/docs/api/shark-graph/shark/-heap-object/index.md
new file mode 100644
index 00000000..f3e84f67
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/index.md
@@ -0,0 +1,42 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapObject](./index.md)
+
+# HeapObject
+
+`sealed class HeapObject`
+
+An object in the heap dump.
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [HeapClass](-heap-class/index.md) | `class HeapClass : `[`HeapObject`](./index.md)<br>A class in the heap dump. |
+| [HeapInstance](-heap-instance/index.md) | `class HeapInstance : `[`HeapObject`](./index.md)<br>An instance in the heap dump. |
+| [HeapObjectArray](-heap-object-array/index.md) | `class HeapObjectArray : `[`HeapObject`](./index.md)<br>An object array in the heap dump. |
+| [HeapPrimitiveArray](-heap-primitive-array/index.md) | `class HeapPrimitiveArray : `[`HeapObject`](./index.md)<br>A primitive array in the heap dump. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [asClass](as-class.md) | `val asClass: `[`HeapObject.HeapClass`](-heap-class/index.md)`?`<br>This [HeapObject](./index.md) as a [HeapClass](-heap-class/index.md) if it is one, or null otherwise |
+| [asInstance](as-instance.md) | `val asInstance: `[`HeapObject.HeapInstance`](-heap-instance/index.md)`?`<br>This [HeapObject](./index.md) as a [HeapInstance](-heap-instance/index.md) if it is one, or null otherwise |
+| [asObjectArray](as-object-array.md) | `val asObjectArray: `[`HeapObject.HeapObjectArray`](-heap-object-array/index.md)`?`<br>This [HeapObject](./index.md) as a [HeapObjectArray](-heap-object-array/index.md) if it is one, or null otherwise |
+| [asPrimitiveArray](as-primitive-array.md) | `val asPrimitiveArray: `[`HeapObject.HeapPrimitiveArray`](-heap-primitive-array/index.md)`?`<br>This [HeapObject](./index.md) as a [HeapPrimitiveArray](-heap-primitive-array/index.md) if it is one, or null otherwise |
+| [graph](graph.md) | `abstract val graph: `[`HeapGraph`](../-heap-graph/index.md)<br>The graph of objects in the heap, which you can use to navigate the heap. |
+| [objectId](object-id.md) | `abstract val objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The heap identifier of this object. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [readRecord](read-record.md) | `abstract fun readRecord(): ObjectRecord`<br>Reads and returns the underlying [ObjectRecord](#). |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [HeapClass](-heap-class/index.md) | `class HeapClass : `[`HeapObject`](./index.md)<br>A class in the heap dump. |
+| [HeapInstance](-heap-instance/index.md) | `class HeapInstance : `[`HeapObject`](./index.md)<br>An instance in the heap dump. |
+| [HeapObjectArray](-heap-object-array/index.md) | `class HeapObjectArray : `[`HeapObject`](./index.md)<br>An object array in the heap dump. |
+| [HeapPrimitiveArray](-heap-primitive-array/index.md) | `class HeapPrimitiveArray : `[`HeapObject`](./index.md)<br>A primitive array in the heap dump. |
diff --git a/docs/api/shark-graph/shark/-heap-object/object-id.md b/docs/api/shark-graph/shark/-heap-object/object-id.md
new file mode 100644
index 00000000..1eb360e2
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/object-id.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapObject](index.md) / [objectId](./object-id.md)
+
+# objectId
+
+`abstract val objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+The heap identifier of this object.
+
diff --git a/docs/api/shark-graph/shark/-heap-object/read-record.md b/docs/api/shark-graph/shark/-heap-object/read-record.md
new file mode 100644
index 00000000..9a3f923c
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-object/read-record.md
@@ -0,0 +1,10 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapObject](index.md) / [readRecord](./read-record.md)
+
+# readRecord
+
+`abstract fun readRecord(): ObjectRecord`
+
+Reads and returns the underlying [ObjectRecord](#).
+
+This may trigger IO reads.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/-init-.md b/docs/api/shark-graph/shark/-heap-value/-init-.md
new file mode 100644
index 00000000..0bbcd273
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/-init-.md
@@ -0,0 +1,9 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`HeapValue(graph: `[`HeapGraph`](../-heap-graph/index.md)`, holder: ValueHolder)`
+
+Represents a value in the heap dump, which can be an object reference or
+a primitive type.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/as-boolean.md b/docs/api/shark-graph/shark/-heap-value/as-boolean.md
new file mode 100644
index 00000000..8fc68b8f
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/as-boolean.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [asBoolean](./as-boolean.md)
+
+# asBoolean
+
+`val asBoolean: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)`?`
+
+This [HeapValue](index.md) as a [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) if it represents one, or null otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/as-byte.md b/docs/api/shark-graph/shark/-heap-value/as-byte.md
new file mode 100644
index 00000000..42712cbb
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/as-byte.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [asByte](./as-byte.md)
+
+# asByte
+
+`val asByte: `[`Byte`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte/index.html)`?`
+
+This [HeapValue](index.md) as a [Byte](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte/index.html) if it represents one, or null otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/as-char.md b/docs/api/shark-graph/shark/-heap-value/as-char.md
new file mode 100644
index 00000000..91b4ef49
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/as-char.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [asChar](./as-char.md)
+
+# asChar
+
+`val asChar: `[`Char`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-char/index.html)`?`
+
+This [HeapValue](index.md) as a [Char](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-char/index.html) if it represents one, or null otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/as-double.md b/docs/api/shark-graph/shark/-heap-value/as-double.md
new file mode 100644
index 00000000..24fc97f9
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/as-double.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [asDouble](./as-double.md)
+
+# asDouble
+
+`val asDouble: `[`Double`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)`?`
+
+This [HeapValue](index.md) as a [Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html) if it represents one, or null otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/as-float.md b/docs/api/shark-graph/shark/-heap-value/as-float.md
new file mode 100644
index 00000000..5f0866da
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/as-float.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [asFloat](./as-float.md)
+
+# asFloat
+
+`val asFloat: `[`Float`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-float/index.html)`?`
+
+This [HeapValue](index.md) as a [Float](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-float/index.html) if it represents one, or null otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/as-int.md b/docs/api/shark-graph/shark/-heap-value/as-int.md
new file mode 100644
index 00000000..11bed45b
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/as-int.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [asInt](./as-int.md)
+
+# asInt
+
+`val asInt: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`?`
+
+This [HeapValue](index.md) as an [Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) if it represents one, or null otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/as-long.md b/docs/api/shark-graph/shark/-heap-value/as-long.md
new file mode 100644
index 00000000..b0bc9c7a
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/as-long.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [asLong](./as-long.md)
+
+# asLong
+
+`val asLong: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`?`
+
+This [HeapValue](index.md) as a [Long](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) if it represents one, or null otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/as-non-null-object-id.md b/docs/api/shark-graph/shark/-heap-value/as-non-null-object-id.md
new file mode 100644
index 00000000..cd69171d
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/as-non-null-object-id.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [asNonNullObjectId](./as-non-null-object-id.md)
+
+# asNonNullObjectId
+
+`val asNonNullObjectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`?`
+
+This [HeapValue](index.md) as a [Long](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) if it represents a non null object reference, or null otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/as-object-id.md b/docs/api/shark-graph/shark/-heap-value/as-object-id.md
new file mode 100644
index 00000000..2fbfff36
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/as-object-id.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [asObjectId](./as-object-id.md)
+
+# asObjectId
+
+`val asObjectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`?`
+
+This [HeapValue](index.md) as a [Long](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) if it represents an object reference, or null otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/as-object.md b/docs/api/shark-graph/shark/-heap-value/as-object.md
new file mode 100644
index 00000000..fe7d0c03
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/as-object.md
@@ -0,0 +1,9 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [asObject](./as-object.md)
+
+# asObject
+
+`val asObject: `[`HeapObject`](../-heap-object/index.md)`?`
+
+The [HeapObject](../-heap-object/index.md) referenced by this [HeapValue](index.md) if it represents a non null object reference,
+or null otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/as-short.md b/docs/api/shark-graph/shark/-heap-value/as-short.md
new file mode 100644
index 00000000..a8848025
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/as-short.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [asShort](./as-short.md)
+
+# asShort
+
+`val asShort: `[`Short`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-short/index.html)`?`
+
+This [HeapValue](index.md) as a [Short](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-short/index.html) if it represents one, or null otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/graph.md b/docs/api/shark-graph/shark/-heap-value/graph.md
new file mode 100644
index 00000000..c9d9751b
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/graph.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [graph](./graph.md)
+
+# graph
+
+`val graph: `[`HeapGraph`](../-heap-graph/index.md)
+
+The graph of objects in the heap, which you can use to navigate the heap.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/holder.md b/docs/api/shark-graph/shark/-heap-value/holder.md
new file mode 100644
index 00000000..f258001d
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/holder.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [holder](./holder.md)
+
+# holder
+
+`val holder: ValueHolder`
+
+Holds the actual value that this [HeapValue](index.md) represents.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/index.md b/docs/api/shark-graph/shark/-heap-value/index.md
new file mode 100644
index 00000000..c6e8811e
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/index.md
@@ -0,0 +1,40 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](./index.md)
+
+# HeapValue
+
+`class HeapValue`
+
+Represents a value in the heap dump, which can be an object reference or
+a primitive type.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `HeapValue(graph: `[`HeapGraph`](../-heap-graph/index.md)`, holder: ValueHolder)`<br>Represents a value in the heap dump, which can be an object reference or a primitive type. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [asBoolean](as-boolean.md) | `val asBoolean: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)`?`<br>This [HeapValue](./index.md) as a [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) if it represents one, or null otherwise. |
+| [asByte](as-byte.md) | `val asByte: `[`Byte`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte/index.html)`?`<br>This [HeapValue](./index.md) as a [Byte](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte/index.html) if it represents one, or null otherwise. |
+| [asChar](as-char.md) | `val asChar: `[`Char`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-char/index.html)`?`<br>This [HeapValue](./index.md) as a [Char](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-char/index.html) if it represents one, or null otherwise. |
+| [asDouble](as-double.md) | `val asDouble: `[`Double`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)`?`<br>This [HeapValue](./index.md) as a [Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html) if it represents one, or null otherwise. |
+| [asFloat](as-float.md) | `val asFloat: `[`Float`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-float/index.html)`?`<br>This [HeapValue](./index.md) as a [Float](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-float/index.html) if it represents one, or null otherwise. |
+| [asInt](as-int.md) | `val asInt: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`?`<br>This [HeapValue](./index.md) as an [Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) if it represents one, or null otherwise. |
+| [asLong](as-long.md) | `val asLong: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`?`<br>This [HeapValue](./index.md) as a [Long](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) if it represents one, or null otherwise. |
+| [asNonNullObjectId](as-non-null-object-id.md) | `val asNonNullObjectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`?`<br>This [HeapValue](./index.md) as a [Long](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) if it represents a non null object reference, or null otherwise. |
+| [asObject](as-object.md) | `val asObject: `[`HeapObject`](../-heap-object/index.md)`?`<br>The [HeapObject](../-heap-object/index.md) referenced by this [HeapValue](./index.md) if it represents a non null object reference, or null otherwise. |
+| [asObjectId](as-object-id.md) | `val asObjectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`?`<br>This [HeapValue](./index.md) as a [Long](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) if it represents an object reference, or null otherwise. |
+| [asShort](as-short.md) | `val asShort: `[`Short`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-short/index.html)`?`<br>This [HeapValue](./index.md) as a [Short](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-short/index.html) if it represents one, or null otherwise. |
+| [graph](graph.md) | `val graph: `[`HeapGraph`](../-heap-graph/index.md)<br>The graph of objects in the heap, which you can use to navigate the heap. |
+| [holder](holder.md) | `val holder: ValueHolder`<br>Holds the actual value that this [HeapValue](./index.md) represents. |
+| [isNonNullReference](is-non-null-reference.md) | `val isNonNullReference: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>True is this [HeapValue](./index.md) represents a non null object reference, false otherwise. |
+| [isNullReference](is-null-reference.md) | `val isNullReference: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>True is this [HeapValue](./index.md) represents a null object reference, false otherwise. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [readAsJavaString](read-as-java-string.md) | `fun readAsJavaString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`?`<br>If this [HeapValue](./index.md) if it represents a non null object reference to an instance of the [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) class, returns a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) instance with content that matches the string in the heap dump. Otherwise returns null. |
diff --git a/docs/api/shark-graph/shark/-heap-value/is-non-null-reference.md b/docs/api/shark-graph/shark/-heap-value/is-non-null-reference.md
new file mode 100644
index 00000000..f2e2b90a
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/is-non-null-reference.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [isNonNullReference](./is-non-null-reference.md)
+
+# isNonNullReference
+
+`val isNonNullReference: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+True is this [HeapValue](index.md) represents a non null object reference, false otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/is-null-reference.md b/docs/api/shark-graph/shark/-heap-value/is-null-reference.md
new file mode 100644
index 00000000..dbeeb759
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/is-null-reference.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [isNullReference](./is-null-reference.md)
+
+# isNullReference
+
+`val isNullReference: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+True is this [HeapValue](index.md) represents a null object reference, false otherwise.
+
diff --git a/docs/api/shark-graph/shark/-heap-value/read-as-java-string.md b/docs/api/shark-graph/shark/-heap-value/read-as-java-string.md
new file mode 100644
index 00000000..ecbba1a1
--- /dev/null
+++ b/docs/api/shark-graph/shark/-heap-value/read-as-java-string.md
@@ -0,0 +1,12 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HeapValue](index.md) / [readAsJavaString](./read-as-java-string.md)
+
+# readAsJavaString
+
+`fun readAsJavaString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`?`
+
+If this [HeapValue](index.md) if it represents a non null object reference to an instance of the
+[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) class, returns a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) instance with content that matches the string in the heap
+dump. Otherwise returns null.
+
+This may trigger IO reads.
+
diff --git a/docs/api/shark-graph/shark/-hprof-heap-graph/classes.md b/docs/api/shark-graph/shark/-hprof-heap-graph/classes.md
new file mode 100644
index 00000000..fdadb1af
--- /dev/null
+++ b/docs/api/shark-graph/shark/-hprof-heap-graph/classes.md
@@ -0,0 +1,12 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HprofHeapGraph](index.md) / [classes](./classes.md)
+
+# classes
+
+`val classes: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject.HeapClass`](../-heap-object/-heap-class/index.md)`>`
+
+Overrides [HeapGraph.classes](../-heap-graph/classes.md)
+
+Sequence of all classes in the heap dump.
+
+This sequence does not trigger any IO reads.
+
diff --git a/docs/api/shark-graph/shark/-hprof-heap-graph/context.md b/docs/api/shark-graph/shark/-hprof-heap-graph/context.md
new file mode 100644
index 00000000..d8ab3507
--- /dev/null
+++ b/docs/api/shark-graph/shark/-hprof-heap-graph/context.md
@@ -0,0 +1,10 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HprofHeapGraph](index.md) / [context](./context.md)
+
+# context
+
+`val context: `[`GraphContext`](../-graph-context/index.md)
+
+Overrides [HeapGraph.context](../-heap-graph/context.md)
+
+In memory store that can be used to store objects this [HeapGraph](../-heap-graph/index.md) instance.
+
diff --git a/docs/api/shark-graph/shark/-hprof-heap-graph/find-class-by-name.md b/docs/api/shark-graph/shark/-hprof-heap-graph/find-class-by-name.md
new file mode 100644
index 00000000..bbe68c62
--- /dev/null
+++ b/docs/api/shark-graph/shark/-hprof-heap-graph/find-class-by-name.md
@@ -0,0 +1,11 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HprofHeapGraph](index.md) / [findClassByName](./find-class-by-name.md)
+
+# findClassByName
+
+`fun findClassByName(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`HeapObject.HeapClass`](../-heap-object/-heap-class/index.md)`?`
+
+Overrides [HeapGraph.findClassByName](../-heap-graph/find-class-by-name.md)
+
+Returns the [HeapClass](../-heap-object/-heap-class/index.md) corresponding to the provided [className](../-heap-graph/find-class-by-name.md#shark.HeapGraph$findClassByName(kotlin.String)/className), or null if the
+class cannot be found.
+
diff --git a/docs/api/shark-graph/shark/-hprof-heap-graph/find-object-by-id.md b/docs/api/shark-graph/shark/-hprof-heap-graph/find-object-by-id.md
new file mode 100644
index 00000000..6e204cf1
--- /dev/null
+++ b/docs/api/shark-graph/shark/-hprof-heap-graph/find-object-by-id.md
@@ -0,0 +1,11 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HprofHeapGraph](index.md) / [findObjectById](./find-object-by-id.md)
+
+# findObjectById
+
+`fun findObjectById(objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`): `[`HeapObject`](../-heap-object/index.md)
+
+Overrides [HeapGraph.findObjectById](../-heap-graph/find-object-by-id.md)
+
+Returns the [HeapObject](../-heap-object/index.md) corresponding to the provided [objectId](../-heap-graph/find-object-by-id.md#shark.HeapGraph$findObjectById(kotlin.Long)/objectId), and throws
+[IllegalArgumentException](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-illegal-argument-exception/index.html) otherwise.
+
diff --git a/docs/api/shark-graph/shark/-hprof-heap-graph/gc-roots.md b/docs/api/shark-graph/shark/-hprof-heap-graph/gc-roots.md
new file mode 100644
index 00000000..e602ba20
--- /dev/null
+++ b/docs/api/shark-graph/shark/-hprof-heap-graph/gc-roots.md
@@ -0,0 +1,11 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HprofHeapGraph](index.md) / [gcRoots](./gc-roots.md)
+
+# gcRoots
+
+`val gcRoots: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<GcRoot>`
+
+Overrides [HeapGraph.gcRoots](../-heap-graph/gc-roots.md)
+
+All GC roots which type matches types known to this heap graph and which point to non null
+references.
+
diff --git a/docs/api/shark-graph/shark/-hprof-heap-graph/identifier-byte-size.md b/docs/api/shark-graph/shark/-hprof-heap-graph/identifier-byte-size.md
new file mode 100644
index 00000000..05c97b8d
--- /dev/null
+++ b/docs/api/shark-graph/shark/-hprof-heap-graph/identifier-byte-size.md
@@ -0,0 +1,8 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HprofHeapGraph](index.md) / [identifierByteSize](./identifier-byte-size.md)
+
+# identifierByteSize
+
+`val identifierByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [HeapGraph.identifierByteSize](../-heap-graph/identifier-byte-size.md)
+
diff --git a/docs/api/shark-graph/shark/-hprof-heap-graph/index-hprof.md b/docs/api/shark-graph/shark/-hprof-heap-graph/index-hprof.md
new file mode 100644
index 00000000..6b3317ae
--- /dev/null
+++ b/docs/api/shark-graph/shark/-hprof-heap-graph/index-hprof.md
@@ -0,0 +1,5 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HprofHeapGraph](index.md) / [indexHprof](./index-hprof.md)
+
+# indexHprof
+
+`fun indexHprof(hprof: Hprof): `[`HeapGraph`](../-heap-graph/index.md)
\ No newline at end of file
diff --git a/docs/api/shark-graph/shark/-hprof-heap-graph/index.md b/docs/api/shark-graph/shark/-hprof-heap-graph/index.md
new file mode 100644
index 00000000..2ddb101b
--- /dev/null
+++ b/docs/api/shark-graph/shark/-hprof-heap-graph/index.md
@@ -0,0 +1,32 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HprofHeapGraph](./index.md)
+
+# HprofHeapGraph
+
+`class HprofHeapGraph : `[`HeapGraph`](../-heap-graph/index.md)
+
+A [HeapGraph](../-heap-graph/index.md) that reads from an indexed [Hprof](#). Create a new instance with [indexHprof](index-hprof.md).
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [classes](classes.md) | `val classes: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject.HeapClass`](../-heap-object/-heap-class/index.md)`>`<br>Sequence of all classes in the heap dump. |
+| [context](context.md) | `val context: `[`GraphContext`](../-graph-context/index.md)<br>In memory store that can be used to store objects this [HeapGraph](../-heap-graph/index.md) instance. |
+| [gcRoots](gc-roots.md) | `val gcRoots: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<GcRoot>`<br>All GC roots which type matches types known to this heap graph and which point to non null references. |
+| [identifierByteSize](identifier-byte-size.md) | `val identifierByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [instances](instances.md) | `val instances: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject.HeapInstance`](../-heap-object/-heap-instance/index.md)`>`<br>Sequence of all instances in the heap dump. |
+| [objects](objects.md) | `val objects: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject`](../-heap-object/index.md)`>`<br>Sequence of all objects in the heap dump. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [findClassByName](find-class-by-name.md) | `fun findClassByName(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`): `[`HeapObject.HeapClass`](../-heap-object/-heap-class/index.md)`?`<br>Returns the [HeapClass](../-heap-object/-heap-class/index.md) corresponding to the provided [className](../-heap-graph/find-class-by-name.md#shark.HeapGraph$findClassByName(kotlin.String)/className), or null if the class cannot be found. |
+| [findObjectById](find-object-by-id.md) | `fun findObjectById(objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`): `[`HeapObject`](../-heap-object/index.md)<br>Returns the [HeapObject](../-heap-object/index.md) corresponding to the provided [objectId](../-heap-graph/find-object-by-id.md#shark.HeapGraph$findObjectById(kotlin.Long)/objectId), and throws [IllegalArgumentException](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-illegal-argument-exception/index.html) otherwise. |
+| [objectExists](object-exists.md) | `fun objectExists(objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Returns true if the provided [objectId](../-heap-graph/object-exists.md#shark.HeapGraph$objectExists(kotlin.Long)/objectId) exists in the heap dump. |
+
+### Companion Object Functions
+
+| Name | Summary |
+|---|---|
+| [indexHprof](index-hprof.md) | `fun indexHprof(hprof: Hprof): `[`HeapGraph`](../-heap-graph/index.md) |
diff --git a/docs/api/shark-graph/shark/-hprof-heap-graph/instances.md b/docs/api/shark-graph/shark/-hprof-heap-graph/instances.md
new file mode 100644
index 00000000..9137884f
--- /dev/null
+++ b/docs/api/shark-graph/shark/-hprof-heap-graph/instances.md
@@ -0,0 +1,12 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HprofHeapGraph](index.md) / [instances](./instances.md)
+
+# instances
+
+`val instances: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject.HeapInstance`](../-heap-object/-heap-instance/index.md)`>`
+
+Overrides [HeapGraph.instances](../-heap-graph/instances.md)
+
+Sequence of all instances in the heap dump.
+
+This sequence does not trigger any IO reads.
+
diff --git a/docs/api/shark-graph/shark/-hprof-heap-graph/object-exists.md b/docs/api/shark-graph/shark/-hprof-heap-graph/object-exists.md
new file mode 100644
index 00000000..61f83efc
--- /dev/null
+++ b/docs/api/shark-graph/shark/-hprof-heap-graph/object-exists.md
@@ -0,0 +1,10 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HprofHeapGraph](index.md) / [objectExists](./object-exists.md)
+
+# objectExists
+
+`fun objectExists(objectId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Overrides [HeapGraph.objectExists](../-heap-graph/object-exists.md)
+
+Returns true if the provided [objectId](../-heap-graph/object-exists.md#shark.HeapGraph$objectExists(kotlin.Long)/objectId) exists in the heap dump.
+
diff --git a/docs/api/shark-graph/shark/-hprof-heap-graph/objects.md b/docs/api/shark-graph/shark/-hprof-heap-graph/objects.md
new file mode 100644
index 00000000..41c4d8c0
--- /dev/null
+++ b/docs/api/shark-graph/shark/-hprof-heap-graph/objects.md
@@ -0,0 +1,12 @@
+[shark-graph](../../index.md) / [shark](../index.md) / [HprofHeapGraph](index.md) / [objects](./objects.md)
+
+# objects
+
+`val objects: `[`Sequence`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html)`<`[`HeapObject`](../-heap-object/index.md)`>`
+
+Overrides [HeapGraph.objects](../-heap-graph/objects.md)
+
+Sequence of all objects in the heap dump.
+
+This sequence does not trigger any IO reads.
+
diff --git a/docs/api/shark-graph/shark/index.md b/docs/api/shark-graph/shark/index.md
new file mode 100644
index 00000000..d3fba981
--- /dev/null
+++ b/docs/api/shark-graph/shark/index.md
@@ -0,0 +1,14 @@
+[shark-graph](../index.md) / [shark](./index.md)
+
+## Package shark
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [GraphContext](-graph-context/index.md) | `class GraphContext`<br>In memory store that can be used to store objects in a given [HeapGraph](-heap-graph/index.md) instance. This is a simple [MutableMap](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-map/index.html) of [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) to [Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html), but with unsafe generics access. |
+| [HeapField](-heap-field/index.md) | `class HeapField`<br>Represents a static field or an instance field. |
+| [HeapGraph](-heap-graph/index.md) | `interface HeapGraph`<br>Enables navigation through the heap graph of objects. |
+| [HeapObject](-heap-object/index.md) | `sealed class HeapObject`<br>An object in the heap dump. |
+| [HeapValue](-heap-value/index.md) | `class HeapValue`<br>Represents a value in the heap dump, which can be an object reference or a primitive type. |
+| [HprofHeapGraph](-hprof-heap-graph/index.md) | `class HprofHeapGraph : `[`HeapGraph`](-heap-graph/index.md)<br>A [HeapGraph](-heap-graph/index.md) that reads from an indexed [Hprof](#). Create a new instance with [indexHprof](-hprof-heap-graph/index-hprof.md). |
diff --git a/docs/api/shark-hprof/alltypes/index.md b/docs/api/shark-hprof/alltypes/index.md
new file mode 100644
index 00000000..a7361e3a
--- /dev/null
+++ b/docs/api/shark-hprof/alltypes/index.md
@@ -0,0 +1,15 @@
+
+
+### All Types
+
+| Name | Summary |
+|---|---|
+| [shark.GcRoot](../shark/-gc-root/index.md) | A GcRoot as identified by [HprofRecord.HeapDumpRecord.GcRootRecord](../shark/-hprof-record/-heap-dump-record/-gc-root-record/index.md) in the heap dump. |
+| [shark.Hprof](../shark/-hprof/index.md) | An opened Hprof file which can be read via [reader](../shark/-hprof/reader.md). Open a new hprof with [open](../shark/-hprof/open.md), and don't forget to call [close](../shark/-hprof/close.md) once done. |
+| [shark.HprofPrimitiveArrayStripper](../shark/-hprof-primitive-array-stripper/index.md) | Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of '?'. |
+| [shark.HprofReader](../shark/-hprof-reader/index.md) | Reads hprof content from an Okio [BufferedSource](#). |
+| [shark.HprofRecord](../shark/-hprof-record/index.md) | A Hprof record. These data structure map 1:1 with how records are written in hprof files. |
+| [shark.HprofWriter](../shark/-hprof-writer/index.md) | Generates Hprof files. |
+| [shark.OnHprofRecordListener](../shark/-on-hprof-record-listener/index.md) | Listener passed in to [HprofReader.readHprofRecords](../shark/-hprof-reader/read-hprof-records.md), gets notified for each [HprofRecord](../shark/-hprof-record/index.md) found in the heap dump which types is in the set of the recordTypes parameter passed to [HprofReader.readHprofRecords](../shark/-hprof-reader/read-hprof-records.md). |
+| [shark.PrimitiveType](../shark/-primitive-type/index.md) | A primitive type in the prof. |
+| [shark.ValueHolder](../shark/-value-holder/index.md) | A value in the heap dump, which can be a [ReferenceHolder](../shark/-value-holder/-reference-holder/index.md) or a primitive type. |
diff --git a/docs/api/shark-hprof/index.md b/docs/api/shark-hprof/index.md
new file mode 100644
index 00000000..8368a6cf
--- /dev/null
+++ b/docs/api/shark-hprof/index.md
@@ -0,0 +1,11 @@
+[shark-hprof](./index.md)
+
+### Packages
+
+| Name | Summary |
+|---|---|
+| [shark](shark/index.md) |  |
+
+### Index
+
+[All Types](alltypes/index.md)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/package-list b/docs/api/shark-hprof/package-list
new file mode 100644
index 00000000..415577c3
--- /dev/null
+++ b/docs/api/shark-hprof/package-list
@@ -0,0 +1,4 @@
+$dokka.format:gfm
+$dokka.linkExtension:md
+
+shark
diff --git a/docs/api/shark-hprof/shark/-gc-root/-debugger/-init-.md b/docs/api/shark-hprof/shark/-gc-root/-debugger/-init-.md
new file mode 100644
index 00000000..a15ec6aa
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-debugger/-init-.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [Debugger](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`Debugger(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`
+
+An object held by a connected debugger
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-debugger/id.md b/docs/api/shark-hprof/shark/-gc-root/-debugger/id.md
new file mode 100644
index 00000000..8fbc6f6e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-debugger/id.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [Debugger](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [GcRoot.id](../id.md)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-debugger/index.md b/docs/api/shark-hprof/shark/-gc-root/-debugger/index.md
new file mode 100644
index 00000000..a57ed5e2
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-debugger/index.md
@@ -0,0 +1,19 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [Debugger](./index.md)
+
+# Debugger
+
+`class Debugger : `[`GcRoot`](../index.md)
+
+An object held by a connected debugger
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `Debugger(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`<br>An object held by a connected debugger |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
diff --git a/docs/api/shark-hprof/shark/-gc-root/-finalizing/-init-.md b/docs/api/shark-hprof/shark/-gc-root/-finalizing/-init-.md
new file mode 100644
index 00000000..c982ab37
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-finalizing/-init-.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [Finalizing](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`Finalizing(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`
+
+An object that is in a queue, waiting for a finalizer to run.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-finalizing/id.md b/docs/api/shark-hprof/shark/-gc-root/-finalizing/id.md
new file mode 100644
index 00000000..a4dbf404
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-finalizing/id.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [Finalizing](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [GcRoot.id](../id.md)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-finalizing/index.md b/docs/api/shark-hprof/shark/-gc-root/-finalizing/index.md
new file mode 100644
index 00000000..ea566a83
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-finalizing/index.md
@@ -0,0 +1,19 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [Finalizing](./index.md)
+
+# Finalizing
+
+`class Finalizing : `[`GcRoot`](../index.md)
+
+An object that is in a queue, waiting for a finalizer to run.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `Finalizing(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`<br>An object that is in a queue, waiting for a finalizer to run. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
diff --git a/docs/api/shark-hprof/shark/-gc-root/-interned-string/-init-.md b/docs/api/shark-hprof/shark/-gc-root/-interned-string/-init-.md
new file mode 100644
index 00000000..0a4dbaf7
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-interned-string/-init-.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [InternedString](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`InternedString(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`
+
+An interned string, see [java.lang.String.intern](https://docs.oracle.com/javase/6/docs/api/java/lang/String.html#intern()).
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-interned-string/id.md b/docs/api/shark-hprof/shark/-gc-root/-interned-string/id.md
new file mode 100644
index 00000000..27646f68
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-interned-string/id.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [InternedString](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [GcRoot.id](../id.md)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-interned-string/index.md b/docs/api/shark-hprof/shark/-gc-root/-interned-string/index.md
new file mode 100644
index 00000000..4de4efc5
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-interned-string/index.md
@@ -0,0 +1,19 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [InternedString](./index.md)
+
+# InternedString
+
+`class InternedString : `[`GcRoot`](../index.md)
+
+An interned string, see [java.lang.String.intern](https://docs.oracle.com/javase/6/docs/api/java/lang/String.html#intern()).
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `InternedString(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`<br>An interned string, see [java.lang.String.intern](https://docs.oracle.com/javase/6/docs/api/java/lang/String.html#intern()). |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
diff --git a/docs/api/shark-hprof/shark/-gc-root/-java-frame/-init-.md b/docs/api/shark-hprof/shark/-gc-root/-java-frame/-init-.md
new file mode 100644
index 00000000..64297408
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-java-frame/-init-.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JavaFrame](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`JavaFrame(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, frameNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)`
+
+A java local variable
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-java-frame/frame-number.md b/docs/api/shark-hprof/shark/-gc-root/-java-frame/frame-number.md
new file mode 100644
index 00000000..cabb5a9e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-java-frame/frame-number.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JavaFrame](index.md) / [frameNumber](./frame-number.md)
+
+# frameNumber
+
+`val frameNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+frame number in stack trace (-1 for empty)
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-java-frame/id.md b/docs/api/shark-hprof/shark/-gc-root/-java-frame/id.md
new file mode 100644
index 00000000..ab3f57f6
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-java-frame/id.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JavaFrame](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [GcRoot.id](../id.md)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-java-frame/index.md b/docs/api/shark-hprof/shark/-gc-root/-java-frame/index.md
new file mode 100644
index 00000000..646da8f0
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-java-frame/index.md
@@ -0,0 +1,21 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JavaFrame](./index.md)
+
+# JavaFrame
+
+`class JavaFrame : `[`GcRoot`](../index.md)
+
+A java local variable
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `JavaFrame(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, frameNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)`<br>A java local variable |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [frameNumber](frame-number.md) | `val frameNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>frame number in stack trace (-1 for empty) |
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
+| [threadSerialNumber](thread-serial-number.md) | `val threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>Corresponds to [ThreadObject.threadSerialNumber](../-thread-object/thread-serial-number.md) |
diff --git a/docs/api/shark-hprof/shark/-gc-root/-java-frame/thread-serial-number.md b/docs/api/shark-hprof/shark/-gc-root/-java-frame/thread-serial-number.md
new file mode 100644
index 00000000..4f4694e6
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-java-frame/thread-serial-number.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JavaFrame](index.md) / [threadSerialNumber](./thread-serial-number.md)
+
+# threadSerialNumber
+
+`val threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Corresponds to [ThreadObject.threadSerialNumber](../-thread-object/thread-serial-number.md)
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-jni-global/-init-.md b/docs/api/shark-hprof/shark/-gc-root/-jni-global/-init-.md
new file mode 100644
index 00000000..47d367f9
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-jni-global/-init-.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JniGlobal](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`JniGlobal(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, jniGlobalRefId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`
+
+A global variable in native code.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-jni-global/id.md b/docs/api/shark-hprof/shark/-gc-root/-jni-global/id.md
new file mode 100644
index 00000000..31e27277
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-jni-global/id.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JniGlobal](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [GcRoot.id](../id.md)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-jni-global/index.md b/docs/api/shark-hprof/shark/-gc-root/-jni-global/index.md
new file mode 100644
index 00000000..8d35fdfa
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-jni-global/index.md
@@ -0,0 +1,20 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JniGlobal](./index.md)
+
+# JniGlobal
+
+`class JniGlobal : `[`GcRoot`](../index.md)
+
+A global variable in native code.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `JniGlobal(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, jniGlobalRefId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`<br>A global variable in native code. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
+| [jniGlobalRefId](jni-global-ref-id.md) | `val jniGlobalRefId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
diff --git a/docs/api/shark-hprof/shark/-gc-root/-jni-global/jni-global-ref-id.md b/docs/api/shark-hprof/shark/-gc-root/-jni-global/jni-global-ref-id.md
new file mode 100644
index 00000000..7a9494cd
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-jni-global/jni-global-ref-id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JniGlobal](index.md) / [jniGlobalRefId](./jni-global-ref-id.md)
+
+# jniGlobalRefId
+
+`val jniGlobalRefId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-gc-root/-jni-local/-init-.md b/docs/api/shark-hprof/shark/-gc-root/-jni-local/-init-.md
new file mode 100644
index 00000000..a0b1a2ed
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-jni-local/-init-.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JniLocal](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`JniLocal(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, frameNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)`
+
+A local variable in native code.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-jni-local/frame-number.md b/docs/api/shark-hprof/shark/-gc-root/-jni-local/frame-number.md
new file mode 100644
index 00000000..b4af873f
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-jni-local/frame-number.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JniLocal](index.md) / [frameNumber](./frame-number.md)
+
+# frameNumber
+
+`val frameNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+frame number in stack trace (-1 for empty)
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-jni-local/id.md b/docs/api/shark-hprof/shark/-gc-root/-jni-local/id.md
new file mode 100644
index 00000000..e65ada98
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-jni-local/id.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JniLocal](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [GcRoot.id](../id.md)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-jni-local/index.md b/docs/api/shark-hprof/shark/-gc-root/-jni-local/index.md
new file mode 100644
index 00000000..4c9671e0
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-jni-local/index.md
@@ -0,0 +1,21 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JniLocal](./index.md)
+
+# JniLocal
+
+`class JniLocal : `[`GcRoot`](../index.md)
+
+A local variable in native code.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `JniLocal(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, frameNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)`<br>A local variable in native code. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [frameNumber](frame-number.md) | `val frameNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>frame number in stack trace (-1 for empty) |
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
+| [threadSerialNumber](thread-serial-number.md) | `val threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>Corresponds to [ThreadObject.threadSerialNumber](../-thread-object/thread-serial-number.md) |
diff --git a/docs/api/shark-hprof/shark/-gc-root/-jni-local/thread-serial-number.md b/docs/api/shark-hprof/shark/-gc-root/-jni-local/thread-serial-number.md
new file mode 100644
index 00000000..7c09d1db
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-jni-local/thread-serial-number.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JniLocal](index.md) / [threadSerialNumber](./thread-serial-number.md)
+
+# threadSerialNumber
+
+`val threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Corresponds to [ThreadObject.threadSerialNumber](../-thread-object/thread-serial-number.md)
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-jni-monitor/-init-.md b/docs/api/shark-hprof/shark/-gc-root/-jni-monitor/-init-.md
new file mode 100644
index 00000000..4c9b33f8
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-jni-monitor/-init-.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JniMonitor](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`JniMonitor(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, stackDepth: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)`
+
+It's unclear what this is, documentation welcome.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-jni-monitor/id.md b/docs/api/shark-hprof/shark/-gc-root/-jni-monitor/id.md
new file mode 100644
index 00000000..8c6deb76
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-jni-monitor/id.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JniMonitor](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [GcRoot.id](../id.md)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-jni-monitor/index.md b/docs/api/shark-hprof/shark/-gc-root/-jni-monitor/index.md
new file mode 100644
index 00000000..8d8e69a9
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-jni-monitor/index.md
@@ -0,0 +1,21 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JniMonitor](./index.md)
+
+# JniMonitor
+
+`class JniMonitor : `[`GcRoot`](../index.md)
+
+It's unclear what this is, documentation welcome.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `JniMonitor(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, stackDepth: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)`<br>It's unclear what this is, documentation welcome. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
+| [stackDepth](stack-depth.md) | `val stackDepth: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [stackTraceSerialNumber](stack-trace-serial-number.md) | `val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
diff --git a/docs/api/shark-hprof/shark/-gc-root/-jni-monitor/stack-depth.md b/docs/api/shark-hprof/shark/-gc-root/-jni-monitor/stack-depth.md
new file mode 100644
index 00000000..8c188880
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-jni-monitor/stack-depth.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JniMonitor](index.md) / [stackDepth](./stack-depth.md)
+
+# stackDepth
+
+`val stackDepth: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-gc-root/-jni-monitor/stack-trace-serial-number.md b/docs/api/shark-hprof/shark/-gc-root/-jni-monitor/stack-trace-serial-number.md
new file mode 100644
index 00000000..51b1e09d
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-jni-monitor/stack-trace-serial-number.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [JniMonitor](index.md) / [stackTraceSerialNumber](./stack-trace-serial-number.md)
+
+# stackTraceSerialNumber
+
+`val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-gc-root/-monitor-used/-init-.md b/docs/api/shark-hprof/shark/-gc-root/-monitor-used/-init-.md
new file mode 100644
index 00000000..7a6f752b
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-monitor-used/-init-.md
@@ -0,0 +1,9 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [MonitorUsed](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`MonitorUsed(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`
+
+Everything that called the wait() or notify() methods, or
+that is synchronized.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-monitor-used/id.md b/docs/api/shark-hprof/shark/-gc-root/-monitor-used/id.md
new file mode 100644
index 00000000..371674e0
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-monitor-used/id.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [MonitorUsed](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [GcRoot.id](../id.md)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-monitor-used/index.md b/docs/api/shark-hprof/shark/-gc-root/-monitor-used/index.md
new file mode 100644
index 00000000..e92ab90e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-monitor-used/index.md
@@ -0,0 +1,20 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [MonitorUsed](./index.md)
+
+# MonitorUsed
+
+`class MonitorUsed : `[`GcRoot`](../index.md)
+
+Everything that called the wait() or notify() methods, or
+that is synchronized.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `MonitorUsed(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`<br>Everything that called the wait() or notify() methods, or that is synchronized. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
diff --git a/docs/api/shark-hprof/shark/-gc-root/-native-stack/-init-.md b/docs/api/shark-hprof/shark/-gc-root/-native-stack/-init-.md
new file mode 100644
index 00000000..3f298ef2
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-native-stack/-init-.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [NativeStack](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`NativeStack(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)`
+
+Input or output parameters in native code
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-native-stack/id.md b/docs/api/shark-hprof/shark/-gc-root/-native-stack/id.md
new file mode 100644
index 00000000..c3562906
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-native-stack/id.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [NativeStack](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [GcRoot.id](../id.md)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-native-stack/index.md b/docs/api/shark-hprof/shark/-gc-root/-native-stack/index.md
new file mode 100644
index 00000000..d477c713
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-native-stack/index.md
@@ -0,0 +1,20 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [NativeStack](./index.md)
+
+# NativeStack
+
+`class NativeStack : `[`GcRoot`](../index.md)
+
+Input or output parameters in native code
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `NativeStack(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)`<br>Input or output parameters in native code |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
+| [threadSerialNumber](thread-serial-number.md) | `val threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>Corresponds to [ThreadObject.threadSerialNumber](../-thread-object/thread-serial-number.md) Note: the corresponding thread is sometimes not found, see: https://issuetracker.google.com/issues/122713143 |
diff --git a/docs/api/shark-hprof/shark/-gc-root/-native-stack/thread-serial-number.md b/docs/api/shark-hprof/shark/-gc-root/-native-stack/thread-serial-number.md
new file mode 100644
index 00000000..3bbdc8c8
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-native-stack/thread-serial-number.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [NativeStack](index.md) / [threadSerialNumber](./thread-serial-number.md)
+
+# threadSerialNumber
+
+`val threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Corresponds to [ThreadObject.threadSerialNumber](../-thread-object/thread-serial-number.md)
+Note: the corresponding thread is sometimes not found, see:
+https://issuetracker.google.com/issues/122713143
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-reference-cleanup/-init-.md b/docs/api/shark-hprof/shark/-gc-root/-reference-cleanup/-init-.md
new file mode 100644
index 00000000..02481e03
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-reference-cleanup/-init-.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [ReferenceCleanup](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`ReferenceCleanup(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`
+
+It's unclear what this is, documentation welcome.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-reference-cleanup/id.md b/docs/api/shark-hprof/shark/-gc-root/-reference-cleanup/id.md
new file mode 100644
index 00000000..fd7c895c
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-reference-cleanup/id.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [ReferenceCleanup](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [GcRoot.id](../id.md)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-reference-cleanup/index.md b/docs/api/shark-hprof/shark/-gc-root/-reference-cleanup/index.md
new file mode 100644
index 00000000..920029c3
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-reference-cleanup/index.md
@@ -0,0 +1,19 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [ReferenceCleanup](./index.md)
+
+# ReferenceCleanup
+
+`class ReferenceCleanup : `[`GcRoot`](../index.md)
+
+It's unclear what this is, documentation welcome.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `ReferenceCleanup(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`<br>It's unclear what this is, documentation welcome. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
diff --git a/docs/api/shark-hprof/shark/-gc-root/-sticky-class/-init-.md b/docs/api/shark-hprof/shark/-gc-root/-sticky-class/-init-.md
new file mode 100644
index 00000000..bae750a7
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-sticky-class/-init-.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [StickyClass](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`StickyClass(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`
+
+A system class
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-sticky-class/id.md b/docs/api/shark-hprof/shark/-gc-root/-sticky-class/id.md
new file mode 100644
index 00000000..ecda623e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-sticky-class/id.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [StickyClass](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [GcRoot.id](../id.md)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-sticky-class/index.md b/docs/api/shark-hprof/shark/-gc-root/-sticky-class/index.md
new file mode 100644
index 00000000..9411bf27
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-sticky-class/index.md
@@ -0,0 +1,19 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [StickyClass](./index.md)
+
+# StickyClass
+
+`class StickyClass : `[`GcRoot`](../index.md)
+
+A system class
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `StickyClass(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`<br>A system class |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
diff --git a/docs/api/shark-hprof/shark/-gc-root/-thread-block/-init-.md b/docs/api/shark-hprof/shark/-gc-root/-thread-block/-init-.md
new file mode 100644
index 00000000..fe8a9c98
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-thread-block/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [ThreadBlock](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`ThreadBlock(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-gc-root/-thread-block/id.md b/docs/api/shark-hprof/shark/-gc-root/-thread-block/id.md
new file mode 100644
index 00000000..60f1863a
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-thread-block/id.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [ThreadBlock](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [GcRoot.id](../id.md)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-thread-block/index.md b/docs/api/shark-hprof/shark/-gc-root/-thread-block/index.md
new file mode 100644
index 00000000..1ce409b7
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-thread-block/index.md
@@ -0,0 +1,18 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [ThreadBlock](./index.md)
+
+# ThreadBlock
+
+`class ThreadBlock : `[`GcRoot`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `ThreadBlock(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
+| [threadSerialNumber](thread-serial-number.md) | `val threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>Corresponds to [ThreadObject.threadSerialNumber](../-thread-object/thread-serial-number.md) |
diff --git a/docs/api/shark-hprof/shark/-gc-root/-thread-block/thread-serial-number.md b/docs/api/shark-hprof/shark/-gc-root/-thread-block/thread-serial-number.md
new file mode 100644
index 00000000..d0799886
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-thread-block/thread-serial-number.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [ThreadBlock](index.md) / [threadSerialNumber](./thread-serial-number.md)
+
+# threadSerialNumber
+
+`val threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Corresponds to [ThreadObject.threadSerialNumber](../-thread-object/thread-serial-number.md)
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-thread-object/-init-.md b/docs/api/shark-hprof/shark/-gc-root/-thread-object/-init-.md
new file mode 100644
index 00000000..0322be0e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-thread-object/-init-.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [ThreadObject](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`ThreadObject(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)`
+
+A thread.
+
+Added at https://android.googlesource.com/platform/tools/base/+/c0f0d528c155cab32e372dac77370569a386245c
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-thread-object/id.md b/docs/api/shark-hprof/shark/-gc-root/-thread-object/id.md
new file mode 100644
index 00000000..f98f1a86
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-thread-object/id.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [ThreadObject](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [GcRoot.id](../id.md)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-thread-object/index.md b/docs/api/shark-hprof/shark/-gc-root/-thread-object/index.md
new file mode 100644
index 00000000..67939e5b
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-thread-object/index.md
@@ -0,0 +1,23 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [ThreadObject](./index.md)
+
+# ThreadObject
+
+`class ThreadObject : `[`GcRoot`](../index.md)
+
+A thread.
+
+Added at https://android.googlesource.com/platform/tools/base/+/c0f0d528c155cab32e372dac77370569a386245c
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `ThreadObject(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)`<br>A thread. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
+| [stackTraceSerialNumber](stack-trace-serial-number.md) | `val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [threadSerialNumber](thread-serial-number.md) | `val threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
diff --git a/docs/api/shark-hprof/shark/-gc-root/-thread-object/stack-trace-serial-number.md b/docs/api/shark-hprof/shark/-gc-root/-thread-object/stack-trace-serial-number.md
new file mode 100644
index 00000000..24dbb596
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-thread-object/stack-trace-serial-number.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [ThreadObject](index.md) / [stackTraceSerialNumber](./stack-trace-serial-number.md)
+
+# stackTraceSerialNumber
+
+`val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-gc-root/-thread-object/thread-serial-number.md b/docs/api/shark-hprof/shark/-gc-root/-thread-object/thread-serial-number.md
new file mode 100644
index 00000000..0ed2667e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-thread-object/thread-serial-number.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [ThreadObject](index.md) / [threadSerialNumber](./thread-serial-number.md)
+
+# threadSerialNumber
+
+`val threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-gc-root/-unknown/-init-.md b/docs/api/shark-hprof/shark/-gc-root/-unknown/-init-.md
new file mode 100644
index 00000000..95fa6d57
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-unknown/-init-.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [Unknown](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`Unknown(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`
+
+An unknown gc root.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-unknown/id.md b/docs/api/shark-hprof/shark/-gc-root/-unknown/id.md
new file mode 100644
index 00000000..e72bfa09
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-unknown/id.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [Unknown](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [GcRoot.id](../id.md)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-unknown/index.md b/docs/api/shark-hprof/shark/-gc-root/-unknown/index.md
new file mode 100644
index 00000000..2ef04013
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-unknown/index.md
@@ -0,0 +1,19 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [Unknown](./index.md)
+
+# Unknown
+
+`class Unknown : `[`GcRoot`](../index.md)
+
+An unknown gc root.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `Unknown(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`<br>An unknown gc root. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
diff --git a/docs/api/shark-hprof/shark/-gc-root/-unreachable/-init-.md b/docs/api/shark-hprof/shark/-gc-root/-unreachable/-init-.md
new file mode 100644
index 00000000..d463f372
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-unreachable/-init-.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [Unreachable](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`Unreachable(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`
+
+An object that is unreachable from any other root, but not a root itself.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-unreachable/id.md b/docs/api/shark-hprof/shark/-gc-root/-unreachable/id.md
new file mode 100644
index 00000000..f0923a68
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-unreachable/id.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [Unreachable](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [GcRoot.id](../id.md)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-unreachable/index.md b/docs/api/shark-hprof/shark/-gc-root/-unreachable/index.md
new file mode 100644
index 00000000..f8ab32ed
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-unreachable/index.md
@@ -0,0 +1,19 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [Unreachable](./index.md)
+
+# Unreachable
+
+`class Unreachable : `[`GcRoot`](../index.md)
+
+An object that is unreachable from any other root, but not a root itself.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `Unreachable(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`<br>An object that is unreachable from any other root, but not a root itself. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
diff --git a/docs/api/shark-hprof/shark/-gc-root/-vm-internal/-init-.md b/docs/api/shark-hprof/shark/-gc-root/-vm-internal/-init-.md
new file mode 100644
index 00000000..3ae1ec0e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-vm-internal/-init-.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [VmInternal](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`VmInternal(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`
+
+It's unclear what this is, documentation welcome.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-vm-internal/id.md b/docs/api/shark-hprof/shark/-gc-root/-vm-internal/id.md
new file mode 100644
index 00000000..6134b1d7
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-vm-internal/id.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [VmInternal](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [GcRoot.id](../id.md)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/-vm-internal/index.md b/docs/api/shark-hprof/shark/-gc-root/-vm-internal/index.md
new file mode 100644
index 00000000..d09e9af5
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/-vm-internal/index.md
@@ -0,0 +1,19 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [GcRoot](../index.md) / [VmInternal](./index.md)
+
+# VmInternal
+
+`class VmInternal : `[`GcRoot`](../index.md)
+
+It's unclear what this is, documentation welcome.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `VmInternal(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`<br>It's unclear what this is, documentation welcome. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
diff --git a/docs/api/shark-hprof/shark/-gc-root/id.md b/docs/api/shark-hprof/shark/-gc-root/id.md
new file mode 100644
index 00000000..408d608c
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/id.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [GcRoot](index.md) / [id](./id.md)
+
+# id
+
+`abstract val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+The object id of the object that this gc root references.
+
diff --git a/docs/api/shark-hprof/shark/-gc-root/index.md b/docs/api/shark-hprof/shark/-gc-root/index.md
new file mode 100644
index 00000000..85db15fd
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-gc-root/index.md
@@ -0,0 +1,55 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [GcRoot](./index.md)
+
+# GcRoot
+
+`sealed class GcRoot`
+
+A GcRoot as identified by [HprofRecord.HeapDumpRecord.GcRootRecord](../-hprof-record/-heap-dump-record/-gc-root-record/index.md) in the heap dump.
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [Debugger](-debugger/index.md) | `class Debugger : `[`GcRoot`](./index.md)<br>An object held by a connected debugger |
+| [Finalizing](-finalizing/index.md) | `class Finalizing : `[`GcRoot`](./index.md)<br>An object that is in a queue, waiting for a finalizer to run. |
+| [InternedString](-interned-string/index.md) | `class InternedString : `[`GcRoot`](./index.md)<br>An interned string, see [java.lang.String.intern](https://docs.oracle.com/javase/6/docs/api/java/lang/String.html#intern()). |
+| [JavaFrame](-java-frame/index.md) | `class JavaFrame : `[`GcRoot`](./index.md)<br>A java local variable |
+| [JniGlobal](-jni-global/index.md) | `class JniGlobal : `[`GcRoot`](./index.md)<br>A global variable in native code. |
+| [JniLocal](-jni-local/index.md) | `class JniLocal : `[`GcRoot`](./index.md)<br>A local variable in native code. |
+| [JniMonitor](-jni-monitor/index.md) | `class JniMonitor : `[`GcRoot`](./index.md)<br>It's unclear what this is, documentation welcome. |
+| [MonitorUsed](-monitor-used/index.md) | `class MonitorUsed : `[`GcRoot`](./index.md)<br>Everything that called the wait() or notify() methods, or that is synchronized. |
+| [NativeStack](-native-stack/index.md) | `class NativeStack : `[`GcRoot`](./index.md)<br>Input or output parameters in native code |
+| [ReferenceCleanup](-reference-cleanup/index.md) | `class ReferenceCleanup : `[`GcRoot`](./index.md)<br>It's unclear what this is, documentation welcome. |
+| [StickyClass](-sticky-class/index.md) | `class StickyClass : `[`GcRoot`](./index.md)<br>A system class |
+| [ThreadBlock](-thread-block/index.md) | `class ThreadBlock : `[`GcRoot`](./index.md) |
+| [ThreadObject](-thread-object/index.md) | `class ThreadObject : `[`GcRoot`](./index.md)<br>A thread. |
+| [Unknown](-unknown/index.md) | `class Unknown : `[`GcRoot`](./index.md)<br>An unknown gc root. |
+| [Unreachable](-unreachable/index.md) | `class Unreachable : `[`GcRoot`](./index.md)<br>An object that is unreachable from any other root, but not a root itself. |
+| [VmInternal](-vm-internal/index.md) | `class VmInternal : `[`GcRoot`](./index.md)<br>It's unclear what this is, documentation welcome. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `abstract val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The object id of the object that this gc root references. |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [Debugger](-debugger/index.md) | `class Debugger : `[`GcRoot`](./index.md)<br>An object held by a connected debugger |
+| [Finalizing](-finalizing/index.md) | `class Finalizing : `[`GcRoot`](./index.md)<br>An object that is in a queue, waiting for a finalizer to run. |
+| [InternedString](-interned-string/index.md) | `class InternedString : `[`GcRoot`](./index.md)<br>An interned string, see [java.lang.String.intern](https://docs.oracle.com/javase/6/docs/api/java/lang/String.html#intern()). |
+| [JavaFrame](-java-frame/index.md) | `class JavaFrame : `[`GcRoot`](./index.md)<br>A java local variable |
+| [JniGlobal](-jni-global/index.md) | `class JniGlobal : `[`GcRoot`](./index.md)<br>A global variable in native code. |
+| [JniLocal](-jni-local/index.md) | `class JniLocal : `[`GcRoot`](./index.md)<br>A local variable in native code. |
+| [JniMonitor](-jni-monitor/index.md) | `class JniMonitor : `[`GcRoot`](./index.md)<br>It's unclear what this is, documentation welcome. |
+| [MonitorUsed](-monitor-used/index.md) | `class MonitorUsed : `[`GcRoot`](./index.md)<br>Everything that called the wait() or notify() methods, or that is synchronized. |
+| [NativeStack](-native-stack/index.md) | `class NativeStack : `[`GcRoot`](./index.md)<br>Input or output parameters in native code |
+| [ReferenceCleanup](-reference-cleanup/index.md) | `class ReferenceCleanup : `[`GcRoot`](./index.md)<br>It's unclear what this is, documentation welcome. |
+| [StickyClass](-sticky-class/index.md) | `class StickyClass : `[`GcRoot`](./index.md)<br>A system class |
+| [ThreadBlock](-thread-block/index.md) | `class ThreadBlock : `[`GcRoot`](./index.md) |
+| [ThreadObject](-thread-object/index.md) | `class ThreadObject : `[`GcRoot`](./index.md)<br>A thread. |
+| [Unknown](-unknown/index.md) | `class Unknown : `[`GcRoot`](./index.md)<br>An unknown gc root. |
+| [Unreachable](-unreachable/index.md) | `class Unreachable : `[`GcRoot`](./index.md)<br>An object that is unreachable from any other root, but not a root itself. |
+| [VmInternal](-vm-internal/index.md) | `class VmInternal : `[`GcRoot`](./index.md)<br>It's unclear what this is, documentation welcome. |
diff --git a/docs/api/shark-hprof/shark/-hprof-primitive-array-stripper/-init-.md b/docs/api/shark-hprof/shark/-hprof-primitive-array-stripper/-init-.md
new file mode 100644
index 00000000..d88ea1c2
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-primitive-array-stripper/-init-.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofPrimitiveArrayStripper](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`HprofPrimitiveArrayStripper()`
+
+Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes,
+which can be useful to remove PII. Char arrays are handled slightly differently because 0 would
+be the null character so instead these become arrays of '?'.
+
diff --git a/docs/api/shark-hprof/shark/-hprof-primitive-array-stripper/index.md b/docs/api/shark-hprof/shark/-hprof-primitive-array-stripper/index.md
new file mode 100644
index 00000000..8602e6a8
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-primitive-array-stripper/index.md
@@ -0,0 +1,24 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofPrimitiveArrayStripper](./index.md)
+
+# HprofPrimitiveArrayStripper
+
+`class HprofPrimitiveArrayStripper`
+
+Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes,
+which can be useful to remove PII. Char arrays are handled slightly differently because 0 would
+be the null character so instead these become arrays of '?'.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `HprofPrimitiveArrayStripper()`<br>Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of '?'. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [stripPrimitiveArrays](strip-primitive-arrays.md) | `fun stripPrimitiveArrays(inputHprofFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)`, outputHprofFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)` = File(
+        inputHprofFile.parent, inputHprofFile.name.replace(
+        ".hprof", "-stripped.hprof"
+    ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + "-stripped" })): `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-primitive-array-stripper/strip-primitive-arrays.md b/docs/api/shark-hprof/shark/-hprof-primitive-array-stripper/strip-primitive-arrays.md
new file mode 100644
index 00000000..13eb0ac7
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-primitive-array-stripper/strip-primitive-arrays.md
@@ -0,0 +1,13 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofPrimitiveArrayStripper](index.md) / [stripPrimitiveArrays](./strip-primitive-arrays.md)
+
+# stripPrimitiveArrays
+
+`fun stripPrimitiveArrays(inputHprofFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)`, outputHprofFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)` = File(
+        inputHprofFile.parent, inputHprofFile.name.replace(
+        ".hprof", "-stripped.hprof"
+    ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + "-stripped" })): `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)
+
+**See Also**
+
+[HprofPrimitiveArrayStripper](index.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-reader/-init-.md b/docs/api/shark-hprof/shark/-hprof-reader/-init-.md
new file mode 100644
index 00000000..b0cf0c21
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-reader/-init-.md
@@ -0,0 +1,15 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofReader](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`HprofReader(source: BufferedSource, identifierByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, startByteReadCount: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)` = 0L)`
+
+Reads hprof content from an Okio [BufferedSource](#).
+
+Not thread safe, should be used from a single thread.
+
+Binary Dump Format reference: http://hg.openjdk.java.net/jdk6/jdk6/jdk/raw-file/tip/src/share/demo/jvmti/hprof/manual.html#mozTocId848088
+
+The Android Hprof format differs in some ways from that reference. This parser implementation
+is largely adapted from https://android.googlesource.com/platform/tools/base/+/studio-master-dev/perflib/src/main/java/com/android/tools/perflib
+
diff --git a/docs/api/shark-hprof/shark/-hprof-reader/byte-read-count.md b/docs/api/shark-hprof/shark/-hprof-reader/byte-read-count.md
new file mode 100644
index 00000000..423d9fb7
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-reader/byte-read-count.md
@@ -0,0 +1,9 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofReader](index.md) / [byteReadCount](./byte-read-count.md)
+
+# byteReadCount
+
+`var byteReadCount: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Starts at [startByteReadCount](start-byte-read-count.md) and increases as [HprofReader](index.md) reads bytes. This is useful
+for tracking the position of content in the backing [source](#). This never resets.
+
diff --git a/docs/api/shark-hprof/shark/-hprof-reader/identifier-byte-size.md b/docs/api/shark-hprof/shark/-hprof-reader/identifier-byte-size.md
new file mode 100644
index 00000000..0247589b
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-reader/identifier-byte-size.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofReader](index.md) / [identifierByteSize](./identifier-byte-size.md)
+
+# identifierByteSize
+
+`val identifierByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Size of Hprof identifiers. Identifiers are used to represent UTF8 strings, objects,
+stack traces, etc. They can have the same size as host pointers or sizeof(void*), but are not
+required to be.
+
diff --git a/docs/api/shark-hprof/shark/-hprof-reader/index.md b/docs/api/shark-hprof/shark/-hprof-reader/index.md
new file mode 100644
index 00000000..9fdf6601
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-reader/index.md
@@ -0,0 +1,39 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofReader](./index.md)
+
+# HprofReader
+
+`class HprofReader`
+
+Reads hprof content from an Okio [BufferedSource](#).
+
+Not thread safe, should be used from a single thread.
+
+Binary Dump Format reference: http://hg.openjdk.java.net/jdk6/jdk6/jdk/raw-file/tip/src/share/demo/jvmti/hprof/manual.html#mozTocId848088
+
+The Android Hprof format differs in some ways from that reference. This parser implementation
+is largely adapted from https://android.googlesource.com/platform/tools/base/+/studio-master-dev/perflib/src/main/java/com/android/tools/perflib
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `HprofReader(source: BufferedSource, identifierByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, startByteReadCount: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)` = 0L)`<br>Reads hprof content from an Okio [BufferedSource](#). |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [byteReadCount](byte-read-count.md) | `var byteReadCount: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>Starts at [startByteReadCount](start-byte-read-count.md) and increases as [HprofReader](./index.md) reads bytes. This is useful for tracking the position of content in the backing [source](#). This never resets. |
+| [identifierByteSize](identifier-byte-size.md) | `val identifierByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>Size of Hprof identifiers. Identifiers are used to represent UTF8 strings, objects, stack traces, etc. They can have the same size as host pointers or sizeof(void*), but are not required to be. |
+| [startByteReadCount](start-byte-read-count.md) | `val startByteReadCount: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>How many bytes have already been read from [source](#) when this [HprofReader](./index.md) is created. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [readClassDumpRecord](read-class-dump-record.md) | `fun readClassDumpRecord(): `[`HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord`](../-hprof-record/-heap-dump-record/-object-record/-class-dump-record/index.md)<br>Reads a full class record after a class dump tag. |
+| [readHprofRecords](read-hprof-records.md) | `fun readHprofRecords(recordTypes: `[`Set`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/index.html)`<`[`KClass`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html)`<out `[`HprofRecord`](../-hprof-record/index.md)`>>, listener: `[`OnHprofRecordListener`](../-on-hprof-record-listener/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Reads all hprof records from [source](#). Assumes the [reader](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/java.io.-file/reader.html) was just created, with a source that currently points to the start position of hprof records. |
+| [readInstanceDumpRecord](read-instance-dump-record.md) | `fun readInstanceDumpRecord(): `[`HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord`](../-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/index.md)<br>Reads a full instance record after a instance dump tag. |
+| [readObjectArrayDumpRecord](read-object-array-dump-record.md) | `fun readObjectArrayDumpRecord(): `[`HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord`](../-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/index.md)<br>Reads a full object array record after a object array dump tag. |
+| [readPrimitiveArrayDumpRecord](read-primitive-array-dump-record.md) | `fun readPrimitiveArrayDumpRecord(): `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](../-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/index.md)<br>Reads a full primitive array record after a primitive array dump tag. |
+| [readValue](read-value.md) | `fun readValue(type: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`): `[`ValueHolder`](../-value-holder/index.md)<br>Reads a value in the heap dump, which can be a reference or a primitive type. |
diff --git a/docs/api/shark-hprof/shark/-hprof-reader/read-class-dump-record.md b/docs/api/shark-hprof/shark/-hprof-reader/read-class-dump-record.md
new file mode 100644
index 00000000..501cd4bc
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-reader/read-class-dump-record.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofReader](index.md) / [readClassDumpRecord](./read-class-dump-record.md)
+
+# readClassDumpRecord
+
+`fun readClassDumpRecord(): `[`HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord`](../-hprof-record/-heap-dump-record/-object-record/-class-dump-record/index.md)
+
+Reads a full class record after a class dump tag.
+
diff --git a/docs/api/shark-hprof/shark/-hprof-reader/read-hprof-records.md b/docs/api/shark-hprof/shark/-hprof-reader/read-hprof-records.md
new file mode 100644
index 00000000..b2bad632
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-reader/read-hprof-records.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofReader](index.md) / [readHprofRecords](./read-hprof-records.md)
+
+# readHprofRecords
+
+`fun readHprofRecords(recordTypes: `[`Set`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/index.html)`<`[`KClass`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html)`<out `[`HprofRecord`](../-hprof-record/index.md)`>>, listener: `[`OnHprofRecordListener`](../-on-hprof-record-listener/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Reads all hprof records from [source](#).
+Assumes the [reader](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/java.io.-file/reader.html) was just created, with a source that currently points to the start
+position of hprof records.
+
diff --git a/docs/api/shark-hprof/shark/-hprof-reader/read-instance-dump-record.md b/docs/api/shark-hprof/shark/-hprof-reader/read-instance-dump-record.md
new file mode 100644
index 00000000..59b236f2
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-reader/read-instance-dump-record.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofReader](index.md) / [readInstanceDumpRecord](./read-instance-dump-record.md)
+
+# readInstanceDumpRecord
+
+`fun readInstanceDumpRecord(): `[`HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord`](../-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/index.md)
+
+Reads a full instance record after a instance dump tag.
+
diff --git a/docs/api/shark-hprof/shark/-hprof-reader/read-object-array-dump-record.md b/docs/api/shark-hprof/shark/-hprof-reader/read-object-array-dump-record.md
new file mode 100644
index 00000000..77cbdc46
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-reader/read-object-array-dump-record.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofReader](index.md) / [readObjectArrayDumpRecord](./read-object-array-dump-record.md)
+
+# readObjectArrayDumpRecord
+
+`fun readObjectArrayDumpRecord(): `[`HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord`](../-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/index.md)
+
+Reads a full object array record after a object array dump tag.
+
diff --git a/docs/api/shark-hprof/shark/-hprof-reader/read-primitive-array-dump-record.md b/docs/api/shark-hprof/shark/-hprof-reader/read-primitive-array-dump-record.md
new file mode 100644
index 00000000..f6d293b9
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-reader/read-primitive-array-dump-record.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofReader](index.md) / [readPrimitiveArrayDumpRecord](./read-primitive-array-dump-record.md)
+
+# readPrimitiveArrayDumpRecord
+
+`fun readPrimitiveArrayDumpRecord(): `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](../-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/index.md)
+
+Reads a full primitive array record after a primitive array dump tag.
+
diff --git a/docs/api/shark-hprof/shark/-hprof-reader/read-value.md b/docs/api/shark-hprof/shark/-hprof-reader/read-value.md
new file mode 100644
index 00000000..f476bc31
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-reader/read-value.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofReader](index.md) / [readValue](./read-value.md)
+
+# readValue
+
+`fun readValue(type: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`): `[`ValueHolder`](../-value-holder/index.md)
+
+Reads a value in the heap dump, which can be a reference or a primitive type.
+
diff --git a/docs/api/shark-hprof/shark/-hprof-reader/start-byte-read-count.md b/docs/api/shark-hprof/shark/-hprof-reader/start-byte-read-count.md
new file mode 100644
index 00000000..e58ff467
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-reader/start-byte-read-count.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofReader](index.md) / [startByteReadCount](./start-byte-read-count.md)
+
+# startByteReadCount
+
+`val startByteReadCount: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+How many bytes have already been read from [source](#) when this [HprofReader](index.md) is created.
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-end-record.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-end-record.md
new file mode 100644
index 00000000..0a9350e2
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-end-record.md
@@ -0,0 +1,9 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofRecord](index.md) / [HeapDumpEndRecord](./-heap-dump-end-record.md)
+
+# HeapDumpEndRecord
+
+`object HeapDumpEndRecord : `[`HprofRecord`](index.md)
+
+Terminates a series of heap dump segments. Concatenation of heap dump segments equals a
+heap dump.
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/-init-.md
new file mode 100644
index 00000000..cbec5901
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../index.md) / [shark](../../../index.md) / [HprofRecord](../../index.md) / [HeapDumpRecord](../index.md) / [GcRootRecord](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`GcRootRecord(gcRoot: `[`GcRoot`](../../../-gc-root/index.md)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/gc-root.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/gc-root.md
new file mode 100644
index 00000000..c8d15de1
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/gc-root.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../index.md) / [shark](../../../index.md) / [HprofRecord](../../index.md) / [HeapDumpRecord](../index.md) / [GcRootRecord](index.md) / [gcRoot](./gc-root.md)
+
+# gcRoot
+
+`val gcRoot: `[`GcRoot`](../../../-gc-root/index.md)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/index.md
new file mode 100644
index 00000000..1da8ab92
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/index.md
@@ -0,0 +1,17 @@
+[shark-hprof](../../../../index.md) / [shark](../../../index.md) / [HprofRecord](../../index.md) / [HeapDumpRecord](../index.md) / [GcRootRecord](./index.md)
+
+# GcRootRecord
+
+`class GcRootRecord : `[`HprofRecord.HeapDumpRecord`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `GcRootRecord(gcRoot: `[`GcRoot`](../../../-gc-root/index.md)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [gcRoot](gc-root.md) | `val gcRoot: `[`GcRoot`](../../../-gc-root/index.md) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/-init-.md
new file mode 100644
index 00000000..0ff6ba34
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../index.md) / [shark](../../../index.md) / [HprofRecord](../../index.md) / [HeapDumpRecord](../index.md) / [HeapDumpInfoRecord](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`HeapDumpInfoRecord(heapId: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, heapNameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-id.md
new file mode 100644
index 00000000..17278c77
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../index.md) / [shark](../../../index.md) / [HprofRecord](../../index.md) / [HeapDumpRecord](../index.md) / [HeapDumpInfoRecord](index.md) / [heapId](./heap-id.md)
+
+# heapId
+
+`val heapId: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-name-string-id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-name-string-id.md
new file mode 100644
index 00000000..7b9f9210
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-name-string-id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../index.md) / [shark](../../../index.md) / [HprofRecord](../../index.md) / [HeapDumpRecord](../index.md) / [HeapDumpInfoRecord](index.md) / [heapNameStringId](./heap-name-string-id.md)
+
+# heapNameStringId
+
+`val heapNameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/index.md
new file mode 100644
index 00000000..d6c6e39a
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/index.md
@@ -0,0 +1,18 @@
+[shark-hprof](../../../../index.md) / [shark](../../../index.md) / [HprofRecord](../../index.md) / [HeapDumpRecord](../index.md) / [HeapDumpInfoRecord](./index.md)
+
+# HeapDumpInfoRecord
+
+`class HeapDumpInfoRecord : `[`HprofRecord.HeapDumpRecord`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `HeapDumpInfoRecord(heapId: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, heapNameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [heapId](heap-id.md) | `val heapId: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [heapNameStringId](heap-name-string-id.md) | `val heapNameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/-init-.md
new file mode 100644
index 00000000..2212395e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [ClassDumpRecord](../index.md) / [FieldRecord](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`FieldRecord(nameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, type: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/index.md
new file mode 100644
index 00000000..eea8597b
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/index.md
@@ -0,0 +1,18 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [ClassDumpRecord](../index.md) / [FieldRecord](./index.md)
+
+# FieldRecord
+
+`data class FieldRecord`
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `FieldRecord(nameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, type: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [nameStringId](name-string-id.md) | `val nameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [type](type.md) | `val type: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/name-string-id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/name-string-id.md
new file mode 100644
index 00000000..bfbf6824
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/name-string-id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [ClassDumpRecord](../index.md) / [FieldRecord](index.md) / [nameStringId](./name-string-id.md)
+
+# nameStringId
+
+`val nameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/type.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/type.md
new file mode 100644
index 00000000..4664f655
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/type.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [ClassDumpRecord](../index.md) / [FieldRecord](index.md) / [type](./type.md)
+
+# type
+
+`val type: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-init-.md
new file mode 100644
index 00000000..7c7ef343
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ClassDumpRecord](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`ClassDumpRecord(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, superclassId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, classLoaderId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, signersId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, protectionDomainId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, instanceSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, staticFields: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord`](-static-field-record/index.md)`>, fields: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord`](-field-record/index.md)`>)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/-init-.md
new file mode 100644
index 00000000..1daa8599
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [ClassDumpRecord](../index.md) / [StaticFieldRecord](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`StaticFieldRecord(nameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, type: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, value: `[`ValueHolder`](../../../../../-value-holder/index.md)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/index.md
new file mode 100644
index 00000000..ed811d42
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/index.md
@@ -0,0 +1,19 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [ClassDumpRecord](../index.md) / [StaticFieldRecord](./index.md)
+
+# StaticFieldRecord
+
+`data class StaticFieldRecord`
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `StaticFieldRecord(nameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, type: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, value: `[`ValueHolder`](../../../../../-value-holder/index.md)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [nameStringId](name-string-id.md) | `val nameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [type](type.md) | `val type: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [value](value.md) | `val value: `[`ValueHolder`](../../../../../-value-holder/index.md) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/name-string-id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/name-string-id.md
new file mode 100644
index 00000000..bd33cccd
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/name-string-id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [ClassDumpRecord](../index.md) / [StaticFieldRecord](index.md) / [nameStringId](./name-string-id.md)
+
+# nameStringId
+
+`val nameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/type.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/type.md
new file mode 100644
index 00000000..ea687bff
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/type.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [ClassDumpRecord](../index.md) / [StaticFieldRecord](index.md) / [type](./type.md)
+
+# type
+
+`val type: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/value.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/value.md
new file mode 100644
index 00000000..3baab17b
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/value.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [ClassDumpRecord](../index.md) / [StaticFieldRecord](index.md) / [value](./value.md)
+
+# value
+
+`val value: `[`ValueHolder`](../../../../../-value-holder/index.md)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/class-loader-id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/class-loader-id.md
new file mode 100644
index 00000000..86f1a467
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/class-loader-id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ClassDumpRecord](index.md) / [classLoaderId](./class-loader-id.md)
+
+# classLoaderId
+
+`val classLoaderId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/fields.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/fields.md
new file mode 100644
index 00000000..e18b1be0
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/fields.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ClassDumpRecord](index.md) / [fields](./fields.md)
+
+# fields
+
+`val fields: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord`](-field-record/index.md)`>`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/id.md
new file mode 100644
index 00000000..abb55dd6
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ClassDumpRecord](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/index.md
new file mode 100644
index 00000000..416060a3
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/index.md
@@ -0,0 +1,32 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ClassDumpRecord](./index.md)
+
+# ClassDumpRecord
+
+`class ClassDumpRecord : `[`HprofRecord.HeapDumpRecord.ObjectRecord`](../index.md)
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [FieldRecord](-field-record/index.md) | `data class FieldRecord` |
+| [StaticFieldRecord](-static-field-record/index.md) | `data class StaticFieldRecord` |
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `ClassDumpRecord(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, superclassId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, classLoaderId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, signersId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, protectionDomainId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, instanceSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, staticFields: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord`](-static-field-record/index.md)`>, fields: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord`](-field-record/index.md)`>)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [classLoaderId](class-loader-id.md) | `val classLoaderId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [fields](fields.md) | `val fields: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord`](-field-record/index.md)`>` |
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [instanceSize](instance-size.md) | `val instanceSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [protectionDomainId](protection-domain-id.md) | `val protectionDomainId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [signersId](signers-id.md) | `val signersId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [stackTraceSerialNumber](stack-trace-serial-number.md) | `val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [staticFields](static-fields.md) | `val staticFields: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord`](-static-field-record/index.md)`>` |
+| [superclassId](superclass-id.md) | `val superclassId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/instance-size.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/instance-size.md
new file mode 100644
index 00000000..f356d895
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/instance-size.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ClassDumpRecord](index.md) / [instanceSize](./instance-size.md)
+
+# instanceSize
+
+`val instanceSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/protection-domain-id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/protection-domain-id.md
new file mode 100644
index 00000000..edd60eb3
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/protection-domain-id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ClassDumpRecord](index.md) / [protectionDomainId](./protection-domain-id.md)
+
+# protectionDomainId
+
+`val protectionDomainId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/signers-id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/signers-id.md
new file mode 100644
index 00000000..2250faee
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/signers-id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ClassDumpRecord](index.md) / [signersId](./signers-id.md)
+
+# signersId
+
+`val signersId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/stack-trace-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/stack-trace-serial-number.md
new file mode 100644
index 00000000..7bcbff4e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/stack-trace-serial-number.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ClassDumpRecord](index.md) / [stackTraceSerialNumber](./stack-trace-serial-number.md)
+
+# stackTraceSerialNumber
+
+`val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/static-fields.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/static-fields.md
new file mode 100644
index 00000000..d9fc6067
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/static-fields.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ClassDumpRecord](index.md) / [staticFields](./static-fields.md)
+
+# staticFields
+
+`val staticFields: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord`](-static-field-record/index.md)`>`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/superclass-id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/superclass-id.md
new file mode 100644
index 00000000..8fab7371
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/superclass-id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ClassDumpRecord](index.md) / [superclassId](./superclass-id.md)
+
+# superclassId
+
+`val superclassId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/-init-.md
new file mode 100644
index 00000000..46aa0f5d
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [InstanceDumpRecord](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`InstanceDumpRecord(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, classId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, fieldValues: `[`ByteArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/class-id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/class-id.md
new file mode 100644
index 00000000..6f48ed4a
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/class-id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [InstanceDumpRecord](index.md) / [classId](./class-id.md)
+
+# classId
+
+`val classId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/field-values.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/field-values.md
new file mode 100644
index 00000000..bc33e1a6
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/field-values.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [InstanceDumpRecord](index.md) / [fieldValues](./field-values.md)
+
+# fieldValues
+
+`val fieldValues: `[`ByteArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/index.html)
+
+Instance field values (this class, followed by super class, etc)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/id.md
new file mode 100644
index 00000000..d6678b24
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [InstanceDumpRecord](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/index.md
new file mode 100644
index 00000000..21655157
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/index.md
@@ -0,0 +1,20 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [InstanceDumpRecord](./index.md)
+
+# InstanceDumpRecord
+
+`class InstanceDumpRecord : `[`HprofRecord.HeapDumpRecord.ObjectRecord`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `InstanceDumpRecord(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, classId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, fieldValues: `[`ByteArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [classId](class-id.md) | `val classId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [fieldValues](field-values.md) | `val fieldValues: `[`ByteArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/index.html)<br>Instance field values (this class, followed by super class, etc) |
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [stackTraceSerialNumber](stack-trace-serial-number.md) | `val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/stack-trace-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/stack-trace-serial-number.md
new file mode 100644
index 00000000..fe3786a3
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/stack-trace-serial-number.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [InstanceDumpRecord](index.md) / [stackTraceSerialNumber](./stack-trace-serial-number.md)
+
+# stackTraceSerialNumber
+
+`val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/-init-.md
new file mode 100644
index 00000000..47f5261e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ObjectArrayDumpRecord](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`ObjectArrayDumpRecord(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, arrayClassId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, elementIds: `[`LongArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long-array/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/array-class-id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/array-class-id.md
new file mode 100644
index 00000000..123bd720
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/array-class-id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ObjectArrayDumpRecord](index.md) / [arrayClassId](./array-class-id.md)
+
+# arrayClassId
+
+`val arrayClassId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/element-ids.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/element-ids.md
new file mode 100644
index 00000000..7ca63aef
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/element-ids.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ObjectArrayDumpRecord](index.md) / [elementIds](./element-ids.md)
+
+# elementIds
+
+`val elementIds: `[`LongArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long-array/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/id.md
new file mode 100644
index 00000000..b3fceab3
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ObjectArrayDumpRecord](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/index.md
new file mode 100644
index 00000000..4838d7b6
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/index.md
@@ -0,0 +1,20 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ObjectArrayDumpRecord](./index.md)
+
+# ObjectArrayDumpRecord
+
+`class ObjectArrayDumpRecord : `[`HprofRecord.HeapDumpRecord.ObjectRecord`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `ObjectArrayDumpRecord(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, arrayClassId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, elementIds: `[`LongArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long-array/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [arrayClassId](array-class-id.md) | `val arrayClassId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [elementIds](element-ids.md) | `val elementIds: `[`LongArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long-array/index.html) |
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [stackTraceSerialNumber](stack-trace-serial-number.md) | `val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/stack-trace-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/stack-trace-serial-number.md
new file mode 100644
index 00000000..38e5c413
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/stack-trace-serial-number.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [ObjectArrayDumpRecord](index.md) / [stackTraceSerialNumber](./stack-trace-serial-number.md)
+
+# stackTraceSerialNumber
+
+`val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/-init-.md
new file mode 100644
index 00000000..9d75cf70
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [BooleanArrayDump](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`BooleanArrayDump(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, array: `[`BooleanArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean-array/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/array.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/array.md
new file mode 100644
index 00000000..d4a81ffb
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/array.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [BooleanArrayDump](index.md) / [array](./array.md)
+
+# array
+
+`val array: `[`BooleanArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean-array/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/id.md
new file mode 100644
index 00000000..14b4a1ea
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/id.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [BooleanArrayDump](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.id](../id.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/index.md
new file mode 100644
index 00000000..2263929f
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/index.md
@@ -0,0 +1,20 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [BooleanArrayDump](./index.md)
+
+# BooleanArrayDump
+
+`class BooleanArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `BooleanArrayDump(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, array: `[`BooleanArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean-array/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [array](array.md) | `val array: `[`BooleanArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean-array/index.html) |
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [size](size.md) | `val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [stackTraceSerialNumber](stack-trace-serial-number.md) | `val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/size.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/size.md
new file mode 100644
index 00000000..8f0c0ce9
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/size.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [BooleanArrayDump](index.md) / [size](./size.md)
+
+# size
+
+`val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.size](../size.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/stack-trace-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/stack-trace-serial-number.md
new file mode 100644
index 00000000..756de81d
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/stack-trace-serial-number.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [BooleanArrayDump](index.md) / [stackTraceSerialNumber](./stack-trace-serial-number.md)
+
+# stackTraceSerialNumber
+
+`val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.stackTraceSerialNumber](../stack-trace-serial-number.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/-init-.md
new file mode 100644
index 00000000..da423db3
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [ByteArrayDump](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`ByteArrayDump(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, array: `[`ByteArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/array.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/array.md
new file mode 100644
index 00000000..aa8b6a5f
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/array.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [ByteArrayDump](index.md) / [array](./array.md)
+
+# array
+
+`val array: `[`ByteArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/id.md
new file mode 100644
index 00000000..9f176398
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/id.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [ByteArrayDump](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.id](../id.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/index.md
new file mode 100644
index 00000000..a9c54355
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/index.md
@@ -0,0 +1,20 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [ByteArrayDump](./index.md)
+
+# ByteArrayDump
+
+`class ByteArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `ByteArrayDump(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, array: `[`ByteArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [array](array.md) | `val array: `[`ByteArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/index.html) |
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [size](size.md) | `val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [stackTraceSerialNumber](stack-trace-serial-number.md) | `val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/size.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/size.md
new file mode 100644
index 00000000..d9447691
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/size.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [ByteArrayDump](index.md) / [size](./size.md)
+
+# size
+
+`val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.size](../size.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/stack-trace-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/stack-trace-serial-number.md
new file mode 100644
index 00000000..4c715707
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/stack-trace-serial-number.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [ByteArrayDump](index.md) / [stackTraceSerialNumber](./stack-trace-serial-number.md)
+
+# stackTraceSerialNumber
+
+`val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.stackTraceSerialNumber](../stack-trace-serial-number.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/-init-.md
new file mode 100644
index 00000000..494fdb29
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [CharArrayDump](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`CharArrayDump(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, array: `[`CharArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-char-array/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/array.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/array.md
new file mode 100644
index 00000000..c9fba8f5
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/array.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [CharArrayDump](index.md) / [array](./array.md)
+
+# array
+
+`val array: `[`CharArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-char-array/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/id.md
new file mode 100644
index 00000000..9210ae3f
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/id.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [CharArrayDump](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.id](../id.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/index.md
new file mode 100644
index 00000000..d4223b84
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/index.md
@@ -0,0 +1,20 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [CharArrayDump](./index.md)
+
+# CharArrayDump
+
+`class CharArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `CharArrayDump(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, array: `[`CharArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-char-array/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [array](array.md) | `val array: `[`CharArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-char-array/index.html) |
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [size](size.md) | `val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [stackTraceSerialNumber](stack-trace-serial-number.md) | `val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/size.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/size.md
new file mode 100644
index 00000000..90591ab6
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/size.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [CharArrayDump](index.md) / [size](./size.md)
+
+# size
+
+`val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.size](../size.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/stack-trace-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/stack-trace-serial-number.md
new file mode 100644
index 00000000..bb834fe1
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/stack-trace-serial-number.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [CharArrayDump](index.md) / [stackTraceSerialNumber](./stack-trace-serial-number.md)
+
+# stackTraceSerialNumber
+
+`val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.stackTraceSerialNumber](../stack-trace-serial-number.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/-init-.md
new file mode 100644
index 00000000..3e6b5d2a
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [DoubleArrayDump](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`DoubleArrayDump(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, array: `[`DoubleArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double-array/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/array.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/array.md
new file mode 100644
index 00000000..12c7b134
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/array.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [DoubleArrayDump](index.md) / [array](./array.md)
+
+# array
+
+`val array: `[`DoubleArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double-array/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/id.md
new file mode 100644
index 00000000..4342ca58
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/id.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [DoubleArrayDump](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.id](../id.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/index.md
new file mode 100644
index 00000000..5b7137f6
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/index.md
@@ -0,0 +1,20 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [DoubleArrayDump](./index.md)
+
+# DoubleArrayDump
+
+`class DoubleArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `DoubleArrayDump(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, array: `[`DoubleArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double-array/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [array](array.md) | `val array: `[`DoubleArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double-array/index.html) |
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [size](size.md) | `val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [stackTraceSerialNumber](stack-trace-serial-number.md) | `val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/size.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/size.md
new file mode 100644
index 00000000..55a98772
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/size.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [DoubleArrayDump](index.md) / [size](./size.md)
+
+# size
+
+`val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.size](../size.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/stack-trace-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/stack-trace-serial-number.md
new file mode 100644
index 00000000..7fd29b73
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/stack-trace-serial-number.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [DoubleArrayDump](index.md) / [stackTraceSerialNumber](./stack-trace-serial-number.md)
+
+# stackTraceSerialNumber
+
+`val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.stackTraceSerialNumber](../stack-trace-serial-number.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/-init-.md
new file mode 100644
index 00000000..08e799cc
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [FloatArrayDump](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`FloatArrayDump(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, array: `[`FloatArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-float-array/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/array.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/array.md
new file mode 100644
index 00000000..e4df5a67
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/array.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [FloatArrayDump](index.md) / [array](./array.md)
+
+# array
+
+`val array: `[`FloatArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-float-array/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/id.md
new file mode 100644
index 00000000..832bb574
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/id.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [FloatArrayDump](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.id](../id.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/index.md
new file mode 100644
index 00000000..67d27ac4
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/index.md
@@ -0,0 +1,20 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [FloatArrayDump](./index.md)
+
+# FloatArrayDump
+
+`class FloatArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `FloatArrayDump(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, array: `[`FloatArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-float-array/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [array](array.md) | `val array: `[`FloatArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-float-array/index.html) |
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [size](size.md) | `val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [stackTraceSerialNumber](stack-trace-serial-number.md) | `val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/size.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/size.md
new file mode 100644
index 00000000..cbeca359
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/size.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [FloatArrayDump](index.md) / [size](./size.md)
+
+# size
+
+`val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.size](../size.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/stack-trace-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/stack-trace-serial-number.md
new file mode 100644
index 00000000..a51d1a4a
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/stack-trace-serial-number.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [FloatArrayDump](index.md) / [stackTraceSerialNumber](./stack-trace-serial-number.md)
+
+# stackTraceSerialNumber
+
+`val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.stackTraceSerialNumber](../stack-trace-serial-number.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/-init-.md
new file mode 100644
index 00000000..ab97a1b9
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [IntArrayDump](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`IntArrayDump(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, array: `[`IntArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int-array/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/array.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/array.md
new file mode 100644
index 00000000..4e7295f1
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/array.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [IntArrayDump](index.md) / [array](./array.md)
+
+# array
+
+`val array: `[`IntArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int-array/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/id.md
new file mode 100644
index 00000000..cea51728
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/id.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [IntArrayDump](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.id](../id.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/index.md
new file mode 100644
index 00000000..a2fcae53
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/index.md
@@ -0,0 +1,20 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [IntArrayDump](./index.md)
+
+# IntArrayDump
+
+`class IntArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `IntArrayDump(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, array: `[`IntArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int-array/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [array](array.md) | `val array: `[`IntArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int-array/index.html) |
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [size](size.md) | `val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [stackTraceSerialNumber](stack-trace-serial-number.md) | `val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/size.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/size.md
new file mode 100644
index 00000000..4d905f34
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/size.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [IntArrayDump](index.md) / [size](./size.md)
+
+# size
+
+`val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.size](../size.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/stack-trace-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/stack-trace-serial-number.md
new file mode 100644
index 00000000..6a4a32f5
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/stack-trace-serial-number.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [IntArrayDump](index.md) / [stackTraceSerialNumber](./stack-trace-serial-number.md)
+
+# stackTraceSerialNumber
+
+`val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.stackTraceSerialNumber](../stack-trace-serial-number.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/-init-.md
new file mode 100644
index 00000000..81f2b421
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [LongArrayDump](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`LongArrayDump(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, array: `[`LongArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long-array/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/array.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/array.md
new file mode 100644
index 00000000..fd7eb278
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/array.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [LongArrayDump](index.md) / [array](./array.md)
+
+# array
+
+`val array: `[`LongArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long-array/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/id.md
new file mode 100644
index 00000000..d5fb4f08
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/id.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [LongArrayDump](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.id](../id.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/index.md
new file mode 100644
index 00000000..bbb85e4e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/index.md
@@ -0,0 +1,20 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [LongArrayDump](./index.md)
+
+# LongArrayDump
+
+`class LongArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `LongArrayDump(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, array: `[`LongArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long-array/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [array](array.md) | `val array: `[`LongArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long-array/index.html) |
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [size](size.md) | `val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [stackTraceSerialNumber](stack-trace-serial-number.md) | `val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/size.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/size.md
new file mode 100644
index 00000000..8cb2e64e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/size.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [LongArrayDump](index.md) / [size](./size.md)
+
+# size
+
+`val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.size](../size.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/stack-trace-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/stack-trace-serial-number.md
new file mode 100644
index 00000000..69286688
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/stack-trace-serial-number.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [LongArrayDump](index.md) / [stackTraceSerialNumber](./stack-trace-serial-number.md)
+
+# stackTraceSerialNumber
+
+`val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.stackTraceSerialNumber](../stack-trace-serial-number.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/-init-.md
new file mode 100644
index 00000000..cdb0be09
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [ShortArrayDump](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`ShortArrayDump(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, array: `[`ShortArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-short-array/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/array.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/array.md
new file mode 100644
index 00000000..e0c23772
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/array.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [ShortArrayDump](index.md) / [array](./array.md)
+
+# array
+
+`val array: `[`ShortArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-short-array/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/id.md
new file mode 100644
index 00000000..5053f7ef
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/id.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [ShortArrayDump](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.id](../id.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/index.md
new file mode 100644
index 00000000..e9fb426a
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/index.md
@@ -0,0 +1,20 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [ShortArrayDump](./index.md)
+
+# ShortArrayDump
+
+`class ShortArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `ShortArrayDump(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, array: `[`ShortArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-short-array/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [array](array.md) | `val array: `[`ShortArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-short-array/index.html) |
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [size](size.md) | `val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [stackTraceSerialNumber](stack-trace-serial-number.md) | `val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/size.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/size.md
new file mode 100644
index 00000000..1b3a7f06
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/size.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [ShortArrayDump](index.md) / [size](./size.md)
+
+# size
+
+`val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.size](../size.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/stack-trace-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/stack-trace-serial-number.md
new file mode 100644
index 00000000..bda71d30
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/stack-trace-serial-number.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../../../../../index.md) / [shark](../../../../../index.md) / [HprofRecord](../../../../index.md) / [HeapDumpRecord](../../../index.md) / [ObjectRecord](../../index.md) / [PrimitiveArrayDumpRecord](../index.md) / [ShortArrayDump](index.md) / [stackTraceSerialNumber](./stack-trace-serial-number.md)
+
+# stackTraceSerialNumber
+
+`val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+Overrides [PrimitiveArrayDumpRecord.stackTraceSerialNumber](../stack-trace-serial-number.md)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/id.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/id.md
new file mode 100644
index 00000000..1f2f0c86
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [PrimitiveArrayDumpRecord](index.md) / [id](./id.md)
+
+# id
+
+`abstract val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/index.md
new file mode 100644
index 00000000..348e29c7
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/index.md
@@ -0,0 +1,44 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [PrimitiveArrayDumpRecord](./index.md)
+
+# PrimitiveArrayDumpRecord
+
+`sealed class PrimitiveArrayDumpRecord : `[`HprofRecord.HeapDumpRecord.ObjectRecord`](../index.md)
+
+Note: we could move the arrays to the parent class as a ByteString or ByteArray
+and then each subtype can create a new array of the right type if needed.
+However, experimenting with live parsing has shown that we never to read arrays except
+when we want to display leak trace information, in which case we do need the data.
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [BooleanArrayDump](-boolean-array-dump/index.md) | `class BooleanArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](./index.md) |
+| [ByteArrayDump](-byte-array-dump/index.md) | `class ByteArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](./index.md) |
+| [CharArrayDump](-char-array-dump/index.md) | `class CharArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](./index.md) |
+| [DoubleArrayDump](-double-array-dump/index.md) | `class DoubleArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](./index.md) |
+| [FloatArrayDump](-float-array-dump/index.md) | `class FloatArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](./index.md) |
+| [IntArrayDump](-int-array-dump/index.md) | `class IntArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](./index.md) |
+| [LongArrayDump](-long-array-dump/index.md) | `class LongArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](./index.md) |
+| [ShortArrayDump](-short-array-dump/index.md) | `class ShortArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](./index.md) |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `abstract val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [size](size.md) | `abstract val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [stackTraceSerialNumber](stack-trace-serial-number.md) | `abstract val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [BooleanArrayDump](-boolean-array-dump/index.md) | `class BooleanArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](./index.md) |
+| [ByteArrayDump](-byte-array-dump/index.md) | `class ByteArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](./index.md) |
+| [CharArrayDump](-char-array-dump/index.md) | `class CharArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](./index.md) |
+| [DoubleArrayDump](-double-array-dump/index.md) | `class DoubleArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](./index.md) |
+| [FloatArrayDump](-float-array-dump/index.md) | `class FloatArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](./index.md) |
+| [IntArrayDump](-int-array-dump/index.md) | `class IntArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](./index.md) |
+| [LongArrayDump](-long-array-dump/index.md) | `class LongArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](./index.md) |
+| [ShortArrayDump](-short-array-dump/index.md) | `class ShortArrayDump : `[`HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord`](./index.md) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/size.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/size.md
new file mode 100644
index 00000000..e0b58e3a
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/size.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [PrimitiveArrayDumpRecord](index.md) / [size](./size.md)
+
+# size
+
+`abstract val size: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/stack-trace-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/stack-trace-serial-number.md
new file mode 100644
index 00000000..6d6157bb
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/stack-trace-serial-number.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../../../index.md) / [shark](../../../../index.md) / [HprofRecord](../../../index.md) / [HeapDumpRecord](../../index.md) / [ObjectRecord](../index.md) / [PrimitiveArrayDumpRecord](index.md) / [stackTraceSerialNumber](./stack-trace-serial-number.md)
+
+# stackTraceSerialNumber
+
+`abstract val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/index.md
new file mode 100644
index 00000000..591f3af7
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/index.md
@@ -0,0 +1,23 @@
+[shark-hprof](../../../../index.md) / [shark](../../../index.md) / [HprofRecord](../../index.md) / [HeapDumpRecord](../index.md) / [ObjectRecord](./index.md)
+
+# ObjectRecord
+
+`sealed class ObjectRecord : `[`HprofRecord.HeapDumpRecord`](../index.md)
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [ClassDumpRecord](-class-dump-record/index.md) | `class ClassDumpRecord : `[`HprofRecord.HeapDumpRecord.ObjectRecord`](./index.md) |
+| [InstanceDumpRecord](-instance-dump-record/index.md) | `class InstanceDumpRecord : `[`HprofRecord.HeapDumpRecord.ObjectRecord`](./index.md) |
+| [ObjectArrayDumpRecord](-object-array-dump-record/index.md) | `class ObjectArrayDumpRecord : `[`HprofRecord.HeapDumpRecord.ObjectRecord`](./index.md) |
+| [PrimitiveArrayDumpRecord](-primitive-array-dump-record/index.md) | `sealed class PrimitiveArrayDumpRecord : `[`HprofRecord.HeapDumpRecord.ObjectRecord`](./index.md)<br>Note: we could move the arrays to the parent class as a ByteString or ByteArray and then each subtype can create a new array of the right type if needed. However, experimenting with live parsing has shown that we never to read arrays except when we want to display leak trace information, in which case we do need the data. |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [ClassDumpRecord](-class-dump-record/index.md) | `class ClassDumpRecord : `[`HprofRecord.HeapDumpRecord.ObjectRecord`](./index.md) |
+| [InstanceDumpRecord](-instance-dump-record/index.md) | `class InstanceDumpRecord : `[`HprofRecord.HeapDumpRecord.ObjectRecord`](./index.md) |
+| [ObjectArrayDumpRecord](-object-array-dump-record/index.md) | `class ObjectArrayDumpRecord : `[`HprofRecord.HeapDumpRecord.ObjectRecord`](./index.md) |
+| [PrimitiveArrayDumpRecord](-primitive-array-dump-record/index.md) | `sealed class PrimitiveArrayDumpRecord : `[`HprofRecord.HeapDumpRecord.ObjectRecord`](./index.md)<br>Note: we could move the arrays to the parent class as a ByteString or ByteArray and then each subtype can create a new array of the right type if needed. However, experimenting with live parsing has shown that we never to read arrays except when we want to display leak trace information, in which case we do need the data. |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/index.md b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/index.md
new file mode 100644
index 00000000..ed4113de
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-heap-dump-record/index.md
@@ -0,0 +1,21 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [HeapDumpRecord](./index.md)
+
+# HeapDumpRecord
+
+`sealed class HeapDumpRecord : `[`HprofRecord`](../index.md)
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [GcRootRecord](-gc-root-record/index.md) | `class GcRootRecord : `[`HprofRecord.HeapDumpRecord`](./index.md) |
+| [HeapDumpInfoRecord](-heap-dump-info-record/index.md) | `class HeapDumpInfoRecord : `[`HprofRecord.HeapDumpRecord`](./index.md) |
+| [ObjectRecord](-object-record/index.md) | `sealed class ObjectRecord : `[`HprofRecord.HeapDumpRecord`](./index.md) |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [GcRootRecord](-gc-root-record/index.md) | `class GcRootRecord : `[`HprofRecord.HeapDumpRecord`](./index.md) |
+| [HeapDumpInfoRecord](-heap-dump-info-record/index.md) | `class HeapDumpInfoRecord : `[`HprofRecord.HeapDumpRecord`](./index.md) |
+| [ObjectRecord](-object-record/index.md) | `sealed class ObjectRecord : `[`HprofRecord.HeapDumpRecord`](./index.md) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/-init-.md
new file mode 100644
index 00000000..6632c7a2
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [LoadClassRecord](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`LoadClassRecord(classSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, classNameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/class-name-string-id.md b/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/class-name-string-id.md
new file mode 100644
index 00000000..5c93b395
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/class-name-string-id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [LoadClassRecord](index.md) / [classNameStringId](./class-name-string-id.md)
+
+# classNameStringId
+
+`val classNameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/class-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/class-serial-number.md
new file mode 100644
index 00000000..ec6f5e60
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/class-serial-number.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [LoadClassRecord](index.md) / [classSerialNumber](./class-serial-number.md)
+
+# classSerialNumber
+
+`val classSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/id.md b/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/id.md
new file mode 100644
index 00000000..29964f46
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [LoadClassRecord](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/index.md b/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/index.md
new file mode 100644
index 00000000..e9e1958e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/index.md
@@ -0,0 +1,20 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [LoadClassRecord](./index.md)
+
+# LoadClassRecord
+
+`class LoadClassRecord : `[`HprofRecord`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `LoadClassRecord(classSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, classNameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [classNameStringId](class-name-string-id.md) | `val classNameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [classSerialNumber](class-serial-number.md) | `val classSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [stackTraceSerialNumber](stack-trace-serial-number.md) | `val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/stack-trace-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/stack-trace-serial-number.md
new file mode 100644
index 00000000..2fb26f6a
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-load-class-record/stack-trace-serial-number.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [LoadClassRecord](index.md) / [stackTraceSerialNumber](./stack-trace-serial-number.md)
+
+# stackTraceSerialNumber
+
+`val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/-init-.md
new file mode 100644
index 00000000..da2a899a
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StackFrameRecord](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`StackFrameRecord(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, methodNameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, methodSignatureStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, sourceFileNameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, classSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, lineNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/class-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/class-serial-number.md
new file mode 100644
index 00000000..e893d46b
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/class-serial-number.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StackFrameRecord](index.md) / [classSerialNumber](./class-serial-number.md)
+
+# classSerialNumber
+
+`val classSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/id.md b/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/id.md
new file mode 100644
index 00000000..474b9363
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StackFrameRecord](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/index.md b/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/index.md
new file mode 100644
index 00000000..a674e40f
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/index.md
@@ -0,0 +1,22 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StackFrameRecord](./index.md)
+
+# StackFrameRecord
+
+`class StackFrameRecord : `[`HprofRecord`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `StackFrameRecord(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, methodNameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, methodSignatureStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, sourceFileNameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, classSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, lineNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [classSerialNumber](class-serial-number.md) | `val classSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [lineNumber](line-number.md) | `val lineNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>0 line number 0 no line information available -1 unknown location -2 compiled method (Not implemented) -3 native method (Not implemented) |
+| [methodNameStringId](method-name-string-id.md) | `val methodNameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [methodSignatureStringId](method-signature-string-id.md) | `val methodSignatureStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [sourceFileNameStringId](source-file-name-string-id.md) | `val sourceFileNameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/line-number.md b/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/line-number.md
new file mode 100644
index 00000000..21b7f7b3
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/line-number.md
@@ -0,0 +1,12 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StackFrameRecord](index.md) / [lineNumber](./line-number.md)
+
+# lineNumber
+
+`val lineNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+0 line number
+0 no line information available
+-1 unknown location
+-2 compiled method (Not implemented)
+-3 native method (Not implemented)
+
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-name-string-id.md b/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-name-string-id.md
new file mode 100644
index 00000000..19068196
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-name-string-id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StackFrameRecord](index.md) / [methodNameStringId](./method-name-string-id.md)
+
+# methodNameStringId
+
+`val methodNameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-signature-string-id.md b/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-signature-string-id.md
new file mode 100644
index 00000000..79c00eb5
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-signature-string-id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StackFrameRecord](index.md) / [methodSignatureStringId](./method-signature-string-id.md)
+
+# methodSignatureStringId
+
+`val methodSignatureStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/source-file-name-string-id.md b/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/source-file-name-string-id.md
new file mode 100644
index 00000000..45fa84ea
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-stack-frame-record/source-file-name-string-id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StackFrameRecord](index.md) / [sourceFileNameStringId](./source-file-name-string-id.md)
+
+# sourceFileNameStringId
+
+`val sourceFileNameStringId: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-stack-trace-record/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-stack-trace-record/-init-.md
new file mode 100644
index 00000000..ffda58f3
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-stack-trace-record/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StackTraceRecord](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`StackTraceRecord(stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, stackFrameIds: `[`LongArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long-array/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-stack-trace-record/index.md b/docs/api/shark-hprof/shark/-hprof-record/-stack-trace-record/index.md
new file mode 100644
index 00000000..60db5e79
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-stack-trace-record/index.md
@@ -0,0 +1,19 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StackTraceRecord](./index.md)
+
+# StackTraceRecord
+
+`class StackTraceRecord : `[`HprofRecord`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `StackTraceRecord(stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, stackFrameIds: `[`LongArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long-array/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [stackFrameIds](stack-frame-ids.md) | `val stackFrameIds: `[`LongArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long-array/index.html) |
+| [stackTraceSerialNumber](stack-trace-serial-number.md) | `val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+| [threadSerialNumber](thread-serial-number.md) | `val threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-frame-ids.md b/docs/api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-frame-ids.md
new file mode 100644
index 00000000..88bc154b
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-frame-ids.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StackTraceRecord](index.md) / [stackFrameIds](./stack-frame-ids.md)
+
+# stackFrameIds
+
+`val stackFrameIds: `[`LongArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long-array/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-trace-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-trace-serial-number.md
new file mode 100644
index 00000000..6ac93da7
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-trace-serial-number.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StackTraceRecord](index.md) / [stackTraceSerialNumber](./stack-trace-serial-number.md)
+
+# stackTraceSerialNumber
+
+`val stackTraceSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-stack-trace-record/thread-serial-number.md b/docs/api/shark-hprof/shark/-hprof-record/-stack-trace-record/thread-serial-number.md
new file mode 100644
index 00000000..bd194285
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-stack-trace-record/thread-serial-number.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StackTraceRecord](index.md) / [threadSerialNumber](./thread-serial-number.md)
+
+# threadSerialNumber
+
+`val threadSerialNumber: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-string-record/-init-.md b/docs/api/shark-hprof/shark/-hprof-record/-string-record/-init-.md
new file mode 100644
index 00000000..6d677783
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-string-record/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StringRecord](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`StringRecord(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, string: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-string-record/id.md b/docs/api/shark-hprof/shark/-hprof-record/-string-record/id.md
new file mode 100644
index 00000000..3de951ef
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-string-record/id.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StringRecord](index.md) / [id](./id.md)
+
+# id
+
+`val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-string-record/index.md b/docs/api/shark-hprof/shark/-hprof-record/-string-record/index.md
new file mode 100644
index 00000000..6bd6cc8a
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-string-record/index.md
@@ -0,0 +1,18 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StringRecord](./index.md)
+
+# StringRecord
+
+`class StringRecord : `[`HprofRecord`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `StringRecord(id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, string: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [id](id.md) | `val id: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+| [string](string.md) | `val string: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof-record/-string-record/string.md b/docs/api/shark-hprof/shark/-hprof-record/-string-record/string.md
new file mode 100644
index 00000000..d6357b5d
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/-string-record/string.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [HprofRecord](../index.md) / [StringRecord](index.md) / [string](./string.md)
+
+# string
+
+`val string: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-record/index.md b/docs/api/shark-hprof/shark/-hprof-record/index.md
new file mode 100644
index 00000000..2a4b4dd2
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-record/index.md
@@ -0,0 +1,29 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofRecord](./index.md)
+
+# HprofRecord
+
+`sealed class HprofRecord`
+
+A Hprof record. These data structure map 1:1 with how records are written in hprof files.
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [HeapDumpEndRecord](-heap-dump-end-record.md) | `object HeapDumpEndRecord : `[`HprofRecord`](./index.md)<br>Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump. |
+| [HeapDumpRecord](-heap-dump-record/index.md) | `sealed class HeapDumpRecord : `[`HprofRecord`](./index.md) |
+| [LoadClassRecord](-load-class-record/index.md) | `class LoadClassRecord : `[`HprofRecord`](./index.md) |
+| [StackFrameRecord](-stack-frame-record/index.md) | `class StackFrameRecord : `[`HprofRecord`](./index.md) |
+| [StackTraceRecord](-stack-trace-record/index.md) | `class StackTraceRecord : `[`HprofRecord`](./index.md) |
+| [StringRecord](-string-record/index.md) | `class StringRecord : `[`HprofRecord`](./index.md) |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [HeapDumpEndRecord](-heap-dump-end-record.md) | `object HeapDumpEndRecord : `[`HprofRecord`](./index.md)<br>Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump. |
+| [HeapDumpRecord](-heap-dump-record/index.md) | `sealed class HeapDumpRecord : `[`HprofRecord`](./index.md) |
+| [LoadClassRecord](-load-class-record/index.md) | `class LoadClassRecord : `[`HprofRecord`](./index.md) |
+| [StackFrameRecord](-stack-frame-record/index.md) | `class StackFrameRecord : `[`HprofRecord`](./index.md) |
+| [StackTraceRecord](-stack-trace-record/index.md) | `class StackTraceRecord : `[`HprofRecord`](./index.md) |
+| [StringRecord](-string-record/index.md) | `class StringRecord : `[`HprofRecord`](./index.md) |
diff --git a/docs/api/shark-hprof/shark/-hprof-writer/close.md b/docs/api/shark-hprof/shark/-hprof-writer/close.md
new file mode 100644
index 00000000..7f13c54e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-writer/close.md
@@ -0,0 +1,9 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofWriter](index.md) / [close](./close.md)
+
+# close
+
+`fun close(): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Flushes to disk all [HprofRecord.HeapDumpRecord](../-hprof-record/-heap-dump-record/index.md) that are currently written to the in memory
+buffer, then closes the file.
+
diff --git a/docs/api/shark-hprof/shark/-hprof-writer/hprof-version.md b/docs/api/shark-hprof/shark/-hprof-writer/hprof-version.md
new file mode 100644
index 00000000..07fa516c
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-writer/hprof-version.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofWriter](index.md) / [hprofVersion](./hprof-version.md)
+
+# hprofVersion
+
+`val hprofVersion: `[`Hprof.HprofVersion`](../-hprof/-hprof-version/index.md)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-writer/identifier-byte-size.md b/docs/api/shark-hprof/shark/-hprof-writer/identifier-byte-size.md
new file mode 100644
index 00000000..0d4c12c3
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-writer/identifier-byte-size.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofWriter](index.md) / [identifierByteSize](./identifier-byte-size.md)
+
+# identifierByteSize
+
+`val identifierByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof-writer/index.md b/docs/api/shark-hprof/shark/-hprof-writer/index.md
new file mode 100644
index 00000000..9082f03d
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-writer/index.md
@@ -0,0 +1,30 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofWriter](./index.md)
+
+# HprofWriter
+
+`class HprofWriter : `[`Closeable`](https://docs.oracle.com/javase/6/docs/api/java/io/Closeable.html)
+
+Generates Hprof files.
+
+Call [open](open.md) to create an instance, [write](write.md) to add instances and [close](close.md) when you're done.
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [hprofVersion](hprof-version.md) | `val hprofVersion: `[`Hprof.HprofVersion`](../-hprof/-hprof-version/index.md) |
+| [identifierByteSize](identifier-byte-size.md) | `val identifierByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [close](close.md) | `fun close(): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Flushes to disk all [HprofRecord.HeapDumpRecord](../-hprof-record/-heap-dump-record/index.md) that are currently written to the in memory buffer, then closes the file. |
+| [valuesToBytes](values-to-bytes.md) | `fun valuesToBytes(values: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`ValueHolder`](../-value-holder/index.md)`>): `[`ByteArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/index.html)<br>Helper method for creating a [ByteArray](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/index.html) for [InstanceDumpRecord.fieldValues](../-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/field-values.md) from a list of [ValueHolder](../-value-holder/index.md). |
+| [write](write.md) | `fun write(record: `[`HprofRecord`](../-hprof-record/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Appends a [HprofRecord](../-hprof-record/index.md) to the heap dump. If [record](write.md#shark.HprofWriter$write(shark.HprofRecord)/record) is a [HprofRecord.HeapDumpRecord](../-hprof-record/-heap-dump-record/index.md) then it will not be written to an in memory buffer and written to file only when the next a record that is not a [HprofRecord.HeapDumpRecord](../-hprof-record/-heap-dump-record/index.md) is written or when [close](close.md) is called. |
+
+### Companion Object Functions
+
+| Name | Summary |
+|---|---|
+| [open](open.md) | `fun open(hprofFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)`, identifierByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)` = 4, hprofVersion: `[`Hprof.HprofVersion`](../-hprof/-hprof-version/index.md)` = HprofVersion.ANDROID): `[`HprofWriter`](./index.md)<br>Opens a new file for writing hprof records. Don't forget to call [close](close.md) once done. |
diff --git a/docs/api/shark-hprof/shark/-hprof-writer/open.md b/docs/api/shark-hprof/shark/-hprof-writer/open.md
new file mode 100644
index 00000000..63430cf6
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-writer/open.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofWriter](index.md) / [open](./open.md)
+
+# open
+
+`fun open(hprofFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)`, identifierByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)` = 4, hprofVersion: `[`Hprof.HprofVersion`](../-hprof/-hprof-version/index.md)` = HprofVersion.ANDROID): `[`HprofWriter`](index.md)
+
+Opens a new file for writing hprof records. Don't forget to call [close](close.md) once done.
+
diff --git a/docs/api/shark-hprof/shark/-hprof-writer/values-to-bytes.md b/docs/api/shark-hprof/shark/-hprof-writer/values-to-bytes.md
new file mode 100644
index 00000000..eb5b8b92
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-writer/values-to-bytes.md
@@ -0,0 +1,9 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofWriter](index.md) / [valuesToBytes](./values-to-bytes.md)
+
+# valuesToBytes
+
+`fun valuesToBytes(values: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`ValueHolder`](../-value-holder/index.md)`>): `[`ByteArray`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/index.html)
+
+Helper method for creating a [ByteArray](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/index.html) for [InstanceDumpRecord.fieldValues](../-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/field-values.md) from a
+list of [ValueHolder](../-value-holder/index.md).
+
diff --git a/docs/api/shark-hprof/shark/-hprof-writer/write.md b/docs/api/shark-hprof/shark/-hprof-writer/write.md
new file mode 100644
index 00000000..5040f43c
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof-writer/write.md
@@ -0,0 +1,10 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [HprofWriter](index.md) / [write](./write.md)
+
+# write
+
+`fun write(record: `[`HprofRecord`](../-hprof-record/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Appends a [HprofRecord](../-hprof-record/index.md) to the heap dump. If [record](write.md#shark.HprofWriter$write(shark.HprofRecord)/record) is a [HprofRecord.HeapDumpRecord](../-hprof-record/-heap-dump-record/index.md) then
+it will not be written to an in memory buffer and written to file only when the next a record
+that is not a [HprofRecord.HeapDumpRecord](../-hprof-record/-heap-dump-record/index.md) is written or when [close](close.md) is called.
+
diff --git a/docs/api/shark-hprof/shark/-hprof/-hprof-version/-a-n-d-r-o-i-d.md b/docs/api/shark-hprof/shark/-hprof/-hprof-version/-a-n-d-r-o-i-d.md
new file mode 100644
index 00000000..e14b8ba1
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof/-hprof-version/-a-n-d-r-o-i-d.md
@@ -0,0 +1,11 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [Hprof](../index.md) / [HprofVersion](index.md) / [ANDROID](./-a-n-d-r-o-i-d.md)
+
+# ANDROID
+
+`ANDROID`
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [versionString](version-string.md) | `val versionString: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a3.md b/docs/api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a3.md
new file mode 100644
index 00000000..4694a67e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a3.md
@@ -0,0 +1,11 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [Hprof](../index.md) / [HprofVersion](index.md) / [JDK1_2_BETA3](./-j-d-k1_2_-b-e-t-a3.md)
+
+# JDK1_2_BETA3
+
+`JDK1_2_BETA3`
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [versionString](version-string.md) | `val versionString: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a4.md b/docs/api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a4.md
new file mode 100644
index 00000000..27546f4f
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a4.md
@@ -0,0 +1,11 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [Hprof](../index.md) / [HprofVersion](index.md) / [JDK1_2_BETA4](./-j-d-k1_2_-b-e-t-a4.md)
+
+# JDK1_2_BETA4
+
+`JDK1_2_BETA4`
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [versionString](version-string.md) | `val versionString: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k_6.md b/docs/api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k_6.md
new file mode 100644
index 00000000..511ba1e4
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k_6.md
@@ -0,0 +1,11 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [Hprof](../index.md) / [HprofVersion](index.md) / [JDK_6](./-j-d-k_6.md)
+
+# JDK_6
+
+`JDK_6`
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [versionString](version-string.md) | `val versionString: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof/-hprof-version/index.md b/docs/api/shark-hprof/shark/-hprof/-hprof-version/index.md
new file mode 100644
index 00000000..5b7f5683
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof/-hprof-version/index.md
@@ -0,0 +1,22 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [Hprof](../index.md) / [HprofVersion](./index.md)
+
+# HprofVersion
+
+`enum class HprofVersion`
+
+Supported hprof versions
+
+### Enum Values
+
+| Name | Summary |
+|---|---|
+| [JDK1_2_BETA3](-j-d-k1_2_-b-e-t-a3.md) |  |
+| [JDK1_2_BETA4](-j-d-k1_2_-b-e-t-a4.md) |  |
+| [JDK_6](-j-d-k_6.md) |  |
+| [ANDROID](-a-n-d-r-o-i-d.md) |  |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [versionString](version-string.md) | `val versionString: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark-hprof/shark/-hprof/-hprof-version/version-string.md b/docs/api/shark-hprof/shark/-hprof/-hprof-version/version-string.md
new file mode 100644
index 00000000..8914a76f
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof/-hprof-version/version-string.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [Hprof](../index.md) / [HprofVersion](index.md) / [versionString](./version-string.md)
+
+# versionString
+
+`val versionString: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof/close.md b/docs/api/shark-hprof/shark/-hprof/close.md
new file mode 100644
index 00000000..ac87c2f9
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof/close.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [Hprof](index.md) / [close](./close.md)
+
+# close
+
+`fun close(): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-hprof/heap-dump-timestamp.md b/docs/api/shark-hprof/shark/-hprof/heap-dump-timestamp.md
new file mode 100644
index 00000000..7a3f45fb
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof/heap-dump-timestamp.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [Hprof](index.md) / [heapDumpTimestamp](./heap-dump-timestamp.md)
+
+# heapDumpTimestamp
+
+`val heapDumpTimestamp: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Unix timestamp at which the heap was dumped.
+
diff --git a/docs/api/shark-hprof/shark/-hprof/hprof-version.md b/docs/api/shark-hprof/shark/-hprof/hprof-version.md
new file mode 100644
index 00000000..cf0f4817
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof/hprof-version.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [Hprof](index.md) / [hprofVersion](./hprof-version.md)
+
+# hprofVersion
+
+`val hprofVersion: `[`Hprof.HprofVersion`](-hprof-version/index.md)
+
+Version of the opened hprof, which is tied to the runtime where the heap was dumped.
+
diff --git a/docs/api/shark-hprof/shark/-hprof/index.md b/docs/api/shark-hprof/shark/-hprof/index.md
new file mode 100644
index 00000000..97d9b6e7
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof/index.md
@@ -0,0 +1,35 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [Hprof](./index.md)
+
+# Hprof
+
+`class Hprof : `[`Closeable`](https://docs.oracle.com/javase/6/docs/api/java/io/Closeable.html)
+
+An opened Hprof file which can be read via [reader](reader.md). Open a new hprof with [open](open.md), and don't
+forget to call [close](close.md) once done.
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [HprofVersion](-hprof-version/index.md) | `enum class HprofVersion`<br>Supported hprof versions |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [heapDumpTimestamp](heap-dump-timestamp.md) | `val heapDumpTimestamp: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>Unix timestamp at which the heap was dumped. |
+| [hprofVersion](hprof-version.md) | `val hprofVersion: `[`Hprof.HprofVersion`](-hprof-version/index.md)<br>Version of the opened hprof, which is tied to the runtime where the heap was dumped. |
+| [reader](reader.md) | `val reader: `[`HprofReader`](../-hprof-reader/index.md) |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [close](close.md) | `fun close(): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+| [moveReaderTo](move-reader-to.md) | `fun moveReaderTo(newPosition: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Moves [reader](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/java.io.-file/reader.html) to a new position in the hprof file. This is transparent to the reader, and will not reset [HprofReader.byteReadCount](../-hprof-reader/byte-read-count.md). |
+
+### Companion Object Functions
+
+| Name | Summary |
+|---|---|
+| [open](open.md) | `fun open(hprofFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)`): `[`Hprof`](./index.md)<br>Reads the headers of the provided [hprofFile](open.md#shark.Hprof.Companion$open(java.io.File)/hprofFile) and returns an opened [Hprof](./index.md). Don't forget to call [close](close.md) once done. |
diff --git a/docs/api/shark-hprof/shark/-hprof/move-reader-to.md b/docs/api/shark-hprof/shark/-hprof/move-reader-to.md
new file mode 100644
index 00000000..dab13147
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof/move-reader-to.md
@@ -0,0 +1,9 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [Hprof](index.md) / [moveReaderTo](./move-reader-to.md)
+
+# moveReaderTo
+
+`fun moveReaderTo(newPosition: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Moves [reader](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/java.io.-file/reader.html) to a new position in the hprof file. This is transparent to the reader, and
+will not reset [HprofReader.byteReadCount](../-hprof-reader/byte-read-count.md).
+
diff --git a/docs/api/shark-hprof/shark/-hprof/open.md b/docs/api/shark-hprof/shark/-hprof/open.md
new file mode 100644
index 00000000..098e3520
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof/open.md
@@ -0,0 +1,9 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [Hprof](index.md) / [open](./open.md)
+
+# open
+
+`fun open(hprofFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)`): `[`Hprof`](index.md)
+
+Reads the headers of the provided [hprofFile](open.md#shark.Hprof.Companion$open(java.io.File)/hprofFile) and returns an opened [Hprof](index.md). Don't forget
+to call [close](close.md) once done.
+
diff --git a/docs/api/shark-hprof/shark/-hprof/reader.md b/docs/api/shark-hprof/shark/-hprof/reader.md
new file mode 100644
index 00000000..8af155ef
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-hprof/reader.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [Hprof](index.md) / [reader](./reader.md)
+
+# reader
+
+`val reader: `[`HprofReader`](../-hprof-reader/index.md)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-on-hprof-record-listener/index.md b/docs/api/shark-hprof/shark/-on-hprof-record-listener/index.md
new file mode 100644
index 00000000..c91fb6c1
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-on-hprof-record-listener/index.md
@@ -0,0 +1,21 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [OnHprofRecordListener](./index.md)
+
+# OnHprofRecordListener
+
+`interface OnHprofRecordListener`
+
+Listener passed in to [HprofReader.readHprofRecords](../-hprof-reader/read-hprof-records.md), gets notified for each [HprofRecord](../-hprof-record/index.md)
+found in the heap dump which types is in the set of the recordTypes parameter passed to
+[HprofReader.readHprofRecords](../-hprof-reader/read-hprof-records.md).
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [onHprofRecord](on-hprof-record.md) | `abstract fun onHprofRecord(position: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, record: `[`HprofRecord`](../-hprof-record/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+
+### Companion Object Functions
+
+| Name | Summary |
+|---|---|
+| [invoke](invoke.md) | `operator fun invoke(block: (`[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, `[`HprofRecord`](../-hprof-record/index.md)`) -> `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)`): `[`OnHprofRecordListener`](./index.md)<br>Utility function to create a [OnHprofRecordListener](./index.md) from the passed in [block](invoke.md#shark.OnHprofRecordListener.Companion$invoke(kotlin.Function2((kotlin.Long, shark.HprofRecord, kotlin.Unit)))/block) lambda instead of using the anonymous `object : OnHprofRecordListener` syntax. |
diff --git a/docs/api/shark-hprof/shark/-on-hprof-record-listener/invoke.md b/docs/api/shark-hprof/shark/-on-hprof-record-listener/invoke.md
new file mode 100644
index 00000000..78c8acbd
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-on-hprof-record-listener/invoke.md
@@ -0,0 +1,17 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [OnHprofRecordListener](index.md) / [invoke](./invoke.md)
+
+# invoke
+
+`inline operator fun invoke(crossinline block: (`[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, `[`HprofRecord`](../-hprof-record/index.md)`) -> `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)`): `[`OnHprofRecordListener`](index.md)
+
+Utility function to create a [OnHprofRecordListener](index.md) from the passed in [block](invoke.md#shark.OnHprofRecordListener.Companion$invoke(kotlin.Function2((kotlin.Long, shark.HprofRecord, kotlin.Unit)))/block) lambda
+instead of using the anonymous `object : OnHprofRecordListener` syntax.
+
+Usage:
+
+``` kotlin
+val listener = OnHprofRecordListener { position, record ->
+
+}
+```
+
diff --git a/docs/api/shark-hprof/shark/-on-hprof-record-listener/on-hprof-record.md b/docs/api/shark-hprof/shark/-on-hprof-record-listener/on-hprof-record.md
new file mode 100644
index 00000000..32684521
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-on-hprof-record-listener/on-hprof-record.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [OnHprofRecordListener](index.md) / [onHprofRecord](./on-hprof-record.md)
+
+# onHprofRecord
+
+`abstract fun onHprofRecord(position: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, record: `[`HprofRecord`](../-hprof-record/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-primitive-type/-b-o-o-l-e-a-n.md b/docs/api/shark-hprof/shark/-primitive-type/-b-o-o-l-e-a-n.md
new file mode 100644
index 00000000..ee83a4db
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-primitive-type/-b-o-o-l-e-a-n.md
@@ -0,0 +1,12 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [PrimitiveType](index.md) / [BOOLEAN](./-b-o-o-l-e-a-n.md)
+
+# BOOLEAN
+
+`BOOLEAN`
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [byteSize](byte-size.md) | `val byteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The size in bytes for each value of that type. |
+| [hprofType](hprof-type.md) | `val hprofType: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The hprof defined "basic type". |
diff --git a/docs/api/shark-hprof/shark/-primitive-type/-b-y-t-e.md b/docs/api/shark-hprof/shark/-primitive-type/-b-y-t-e.md
new file mode 100644
index 00000000..f96eb3ad
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-primitive-type/-b-y-t-e.md
@@ -0,0 +1,12 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [PrimitiveType](index.md) / [BYTE](./-b-y-t-e.md)
+
+# BYTE
+
+`BYTE`
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [byteSize](byte-size.md) | `val byteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The size in bytes for each value of that type. |
+| [hprofType](hprof-type.md) | `val hprofType: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The hprof defined "basic type". |
diff --git a/docs/api/shark-hprof/shark/-primitive-type/-c-h-a-r.md b/docs/api/shark-hprof/shark/-primitive-type/-c-h-a-r.md
new file mode 100644
index 00000000..dbcbb212
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-primitive-type/-c-h-a-r.md
@@ -0,0 +1,12 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [PrimitiveType](index.md) / [CHAR](./-c-h-a-r.md)
+
+# CHAR
+
+`CHAR`
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [byteSize](byte-size.md) | `val byteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The size in bytes for each value of that type. |
+| [hprofType](hprof-type.md) | `val hprofType: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The hprof defined "basic type". |
diff --git a/docs/api/shark-hprof/shark/-primitive-type/-d-o-u-b-l-e.md b/docs/api/shark-hprof/shark/-primitive-type/-d-o-u-b-l-e.md
new file mode 100644
index 00000000..1801a603
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-primitive-type/-d-o-u-b-l-e.md
@@ -0,0 +1,12 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [PrimitiveType](index.md) / [DOUBLE](./-d-o-u-b-l-e.md)
+
+# DOUBLE
+
+`DOUBLE`
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [byteSize](byte-size.md) | `val byteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The size in bytes for each value of that type. |
+| [hprofType](hprof-type.md) | `val hprofType: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The hprof defined "basic type". |
diff --git a/docs/api/shark-hprof/shark/-primitive-type/-f-l-o-a-t.md b/docs/api/shark-hprof/shark/-primitive-type/-f-l-o-a-t.md
new file mode 100644
index 00000000..36e14fb9
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-primitive-type/-f-l-o-a-t.md
@@ -0,0 +1,12 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [PrimitiveType](index.md) / [FLOAT](./-f-l-o-a-t.md)
+
+# FLOAT
+
+`FLOAT`
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [byteSize](byte-size.md) | `val byteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The size in bytes for each value of that type. |
+| [hprofType](hprof-type.md) | `val hprofType: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The hprof defined "basic type". |
diff --git a/docs/api/shark-hprof/shark/-primitive-type/-i-n-t.md b/docs/api/shark-hprof/shark/-primitive-type/-i-n-t.md
new file mode 100644
index 00000000..6de1383c
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-primitive-type/-i-n-t.md
@@ -0,0 +1,12 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [PrimitiveType](index.md) / [INT](./-i-n-t.md)
+
+# INT
+
+`INT`
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [byteSize](byte-size.md) | `val byteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The size in bytes for each value of that type. |
+| [hprofType](hprof-type.md) | `val hprofType: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The hprof defined "basic type". |
diff --git a/docs/api/shark-hprof/shark/-primitive-type/-l-o-n-g.md b/docs/api/shark-hprof/shark/-primitive-type/-l-o-n-g.md
new file mode 100644
index 00000000..eb37e46f
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-primitive-type/-l-o-n-g.md
@@ -0,0 +1,12 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [PrimitiveType](index.md) / [LONG](./-l-o-n-g.md)
+
+# LONG
+
+`LONG`
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [byteSize](byte-size.md) | `val byteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The size in bytes for each value of that type. |
+| [hprofType](hprof-type.md) | `val hprofType: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The hprof defined "basic type". |
diff --git a/docs/api/shark-hprof/shark/-primitive-type/-r-e-f-e-r-e-n-c-e_-h-p-r-o-f_-t-y-p-e.md b/docs/api/shark-hprof/shark/-primitive-type/-r-e-f-e-r-e-n-c-e_-h-p-r-o-f_-t-y-p-e.md
new file mode 100644
index 00000000..0f63d69d
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-primitive-type/-r-e-f-e-r-e-n-c-e_-h-p-r-o-f_-t-y-p-e.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [PrimitiveType](index.md) / [REFERENCE_HPROF_TYPE](./-r-e-f-e-r-e-n-c-e_-h-p-r-o-f_-t-y-p-e.md)
+
+# REFERENCE_HPROF_TYPE
+
+`const val REFERENCE_HPROF_TYPE: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+The hprof defined "basic type" for references.
+
diff --git a/docs/api/shark-hprof/shark/-primitive-type/-s-h-o-r-t.md b/docs/api/shark-hprof/shark/-primitive-type/-s-h-o-r-t.md
new file mode 100644
index 00000000..835c76cd
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-primitive-type/-s-h-o-r-t.md
@@ -0,0 +1,12 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [PrimitiveType](index.md) / [SHORT](./-s-h-o-r-t.md)
+
+# SHORT
+
+`SHORT`
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [byteSize](byte-size.md) | `val byteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The size in bytes for each value of that type. |
+| [hprofType](hprof-type.md) | `val hprofType: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The hprof defined "basic type". |
diff --git a/docs/api/shark-hprof/shark/-primitive-type/byte-size-by-hprof-type.md b/docs/api/shark-hprof/shark/-primitive-type/byte-size-by-hprof-type.md
new file mode 100644
index 00000000..160a1969
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-primitive-type/byte-size-by-hprof-type.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [PrimitiveType](index.md) / [byteSizeByHprofType](./byte-size-by-hprof-type.md)
+
+# byteSizeByHprofType
+
+`val byteSizeByHprofType: `[`Map`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-map/index.html)`<`[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`>`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-primitive-type/byte-size.md b/docs/api/shark-hprof/shark/-primitive-type/byte-size.md
new file mode 100644
index 00000000..f869facf
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-primitive-type/byte-size.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [PrimitiveType](index.md) / [byteSize](./byte-size.md)
+
+# byteSize
+
+`val byteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+The size in bytes for each value of that type.
+
diff --git a/docs/api/shark-hprof/shark/-primitive-type/hprof-type.md b/docs/api/shark-hprof/shark/-primitive-type/hprof-type.md
new file mode 100644
index 00000000..ca95bf3b
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-primitive-type/hprof-type.md
@@ -0,0 +1,8 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [PrimitiveType](index.md) / [hprofType](./hprof-type.md)
+
+# hprofType
+
+`val hprofType: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
+
+The hprof defined "basic type".
+
diff --git a/docs/api/shark-hprof/shark/-primitive-type/index.md b/docs/api/shark-hprof/shark/-primitive-type/index.md
new file mode 100644
index 00000000..1840e243
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-primitive-type/index.md
@@ -0,0 +1,34 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [PrimitiveType](./index.md)
+
+# PrimitiveType
+
+`enum class PrimitiveType`
+
+A primitive type in the prof.
+
+### Enum Values
+
+| Name | Summary |
+|---|---|
+| [BOOLEAN](-b-o-o-l-e-a-n.md) |  |
+| [CHAR](-c-h-a-r.md) |  |
+| [FLOAT](-f-l-o-a-t.md) |  |
+| [DOUBLE](-d-o-u-b-l-e.md) |  |
+| [BYTE](-b-y-t-e.md) |  |
+| [SHORT](-s-h-o-r-t.md) |  |
+| [INT](-i-n-t.md) |  |
+| [LONG](-l-o-n-g.md) |  |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [byteSize](byte-size.md) | `val byteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The size in bytes for each value of that type. |
+| [hprofType](hprof-type.md) | `val hprofType: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The hprof defined "basic type". |
+
+### Companion Object Properties
+
+| Name | Summary |
+|---|---|
+| [byteSizeByHprofType](byte-size-by-hprof-type.md) | `val byteSizeByHprofType: `[`Map`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-map/index.html)`<`[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`, `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`>` |
+| [REFERENCE_HPROF_TYPE](-r-e-f-e-r-e-n-c-e_-h-p-r-o-f_-t-y-p-e.md) | `const val REFERENCE_HPROF_TYPE: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)<br>The hprof defined "basic type" for references. |
diff --git a/docs/api/shark-hprof/shark/-value-holder/-boolean-holder/-init-.md b/docs/api/shark-hprof/shark/-value-holder/-boolean-holder/-init-.md
new file mode 100644
index 00000000..a3f8786b
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-boolean-holder/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [BooleanHolder](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`BooleanHolder(value: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-boolean-holder/index.md b/docs/api/shark-hprof/shark/-value-holder/-boolean-holder/index.md
new file mode 100644
index 00000000..cc826f66
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-boolean-holder/index.md
@@ -0,0 +1,17 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [BooleanHolder](./index.md)
+
+# BooleanHolder
+
+`data class BooleanHolder : `[`ValueHolder`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `BooleanHolder(value: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [value](value.md) | `val value: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) |
diff --git a/docs/api/shark-hprof/shark/-value-holder/-boolean-holder/value.md b/docs/api/shark-hprof/shark/-value-holder/-boolean-holder/value.md
new file mode 100644
index 00000000..f443da60
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-boolean-holder/value.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [BooleanHolder](index.md) / [value](./value.md)
+
+# value
+
+`val value: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-byte-holder/-init-.md b/docs/api/shark-hprof/shark/-value-holder/-byte-holder/-init-.md
new file mode 100644
index 00000000..383336b4
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-byte-holder/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [ByteHolder](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`ByteHolder(value: `[`Byte`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-byte-holder/index.md b/docs/api/shark-hprof/shark/-value-holder/-byte-holder/index.md
new file mode 100644
index 00000000..aa985283
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-byte-holder/index.md
@@ -0,0 +1,17 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [ByteHolder](./index.md)
+
+# ByteHolder
+
+`data class ByteHolder : `[`ValueHolder`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `ByteHolder(value: `[`Byte`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [value](value.md) | `val value: `[`Byte`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte/index.html) |
diff --git a/docs/api/shark-hprof/shark/-value-holder/-byte-holder/value.md b/docs/api/shark-hprof/shark/-value-holder/-byte-holder/value.md
new file mode 100644
index 00000000..c763f8b2
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-byte-holder/value.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [ByteHolder](index.md) / [value](./value.md)
+
+# value
+
+`val value: `[`Byte`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-char-holder/-init-.md b/docs/api/shark-hprof/shark/-value-holder/-char-holder/-init-.md
new file mode 100644
index 00000000..52f54501
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-char-holder/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [CharHolder](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`CharHolder(value: `[`Char`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-char/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-char-holder/index.md b/docs/api/shark-hprof/shark/-value-holder/-char-holder/index.md
new file mode 100644
index 00000000..88f81c06
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-char-holder/index.md
@@ -0,0 +1,17 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [CharHolder](./index.md)
+
+# CharHolder
+
+`data class CharHolder : `[`ValueHolder`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `CharHolder(value: `[`Char`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-char/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [value](value.md) | `val value: `[`Char`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-char/index.html) |
diff --git a/docs/api/shark-hprof/shark/-value-holder/-char-holder/value.md b/docs/api/shark-hprof/shark/-value-holder/-char-holder/value.md
new file mode 100644
index 00000000..a756be04
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-char-holder/value.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [CharHolder](index.md) / [value](./value.md)
+
+# value
+
+`val value: `[`Char`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-char/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-double-holder/-init-.md b/docs/api/shark-hprof/shark/-value-holder/-double-holder/-init-.md
new file mode 100644
index 00000000..22f99af9
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-double-holder/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [DoubleHolder](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`DoubleHolder(value: `[`Double`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-double-holder/index.md b/docs/api/shark-hprof/shark/-value-holder/-double-holder/index.md
new file mode 100644
index 00000000..03693669
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-double-holder/index.md
@@ -0,0 +1,17 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [DoubleHolder](./index.md)
+
+# DoubleHolder
+
+`data class DoubleHolder : `[`ValueHolder`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `DoubleHolder(value: `[`Double`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [value](value.md) | `val value: `[`Double`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html) |
diff --git a/docs/api/shark-hprof/shark/-value-holder/-double-holder/value.md b/docs/api/shark-hprof/shark/-value-holder/-double-holder/value.md
new file mode 100644
index 00000000..f82d5d5c
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-double-holder/value.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [DoubleHolder](index.md) / [value](./value.md)
+
+# value
+
+`val value: `[`Double`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-float-holder/-init-.md b/docs/api/shark-hprof/shark/-value-holder/-float-holder/-init-.md
new file mode 100644
index 00000000..f2b7c994
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-float-holder/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [FloatHolder](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`FloatHolder(value: `[`Float`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-float/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-float-holder/index.md b/docs/api/shark-hprof/shark/-value-holder/-float-holder/index.md
new file mode 100644
index 00000000..ff9ac779
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-float-holder/index.md
@@ -0,0 +1,17 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [FloatHolder](./index.md)
+
+# FloatHolder
+
+`data class FloatHolder : `[`ValueHolder`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `FloatHolder(value: `[`Float`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-float/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [value](value.md) | `val value: `[`Float`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-float/index.html) |
diff --git a/docs/api/shark-hprof/shark/-value-holder/-float-holder/value.md b/docs/api/shark-hprof/shark/-value-holder/-float-holder/value.md
new file mode 100644
index 00000000..f649e36e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-float-holder/value.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [FloatHolder](index.md) / [value](./value.md)
+
+# value
+
+`val value: `[`Float`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-float/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-int-holder/-init-.md b/docs/api/shark-hprof/shark/-value-holder/-int-holder/-init-.md
new file mode 100644
index 00000000..b5702233
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-int-holder/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [IntHolder](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`IntHolder(value: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-int-holder/index.md b/docs/api/shark-hprof/shark/-value-holder/-int-holder/index.md
new file mode 100644
index 00000000..2cc5087d
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-int-holder/index.md
@@ -0,0 +1,17 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [IntHolder](./index.md)
+
+# IntHolder
+
+`data class IntHolder : `[`ValueHolder`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `IntHolder(value: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [value](value.md) | `val value: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html) |
diff --git a/docs/api/shark-hprof/shark/-value-holder/-int-holder/value.md b/docs/api/shark-hprof/shark/-value-holder/-int-holder/value.md
new file mode 100644
index 00000000..88ed05a1
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-int-holder/value.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [IntHolder](index.md) / [value](./value.md)
+
+# value
+
+`val value: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-long-holder/-init-.md b/docs/api/shark-hprof/shark/-value-holder/-long-holder/-init-.md
new file mode 100644
index 00000000..78b2b34e
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-long-holder/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [LongHolder](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`LongHolder(value: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-long-holder/index.md b/docs/api/shark-hprof/shark/-value-holder/-long-holder/index.md
new file mode 100644
index 00000000..e324576a
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-long-holder/index.md
@@ -0,0 +1,17 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [LongHolder](./index.md)
+
+# LongHolder
+
+`data class LongHolder : `[`ValueHolder`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `LongHolder(value: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [value](value.md) | `val value: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
diff --git a/docs/api/shark-hprof/shark/-value-holder/-long-holder/value.md b/docs/api/shark-hprof/shark/-value-holder/-long-holder/value.md
new file mode 100644
index 00000000..44cb23cd
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-long-holder/value.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [LongHolder](index.md) / [value](./value.md)
+
+# value
+
+`val value: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-n-u-l-l_-r-e-f-e-r-e-n-c-e.md b/docs/api/shark-hprof/shark/-value-holder/-n-u-l-l_-r-e-f-e-r-e-n-c-e.md
new file mode 100644
index 00000000..a105a5a1
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-n-u-l-l_-r-e-f-e-r-e-n-c-e.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [ValueHolder](index.md) / [NULL_REFERENCE](./-n-u-l-l_-r-e-f-e-r-e-n-c-e.md)
+
+# NULL_REFERENCE
+
+`const val NULL_REFERENCE: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-reference-holder/-init-.md b/docs/api/shark-hprof/shark/-value-holder/-reference-holder/-init-.md
new file mode 100644
index 00000000..3838d4b6
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-reference-holder/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [ReferenceHolder](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`ReferenceHolder(value: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-reference-holder/index.md b/docs/api/shark-hprof/shark/-value-holder/-reference-holder/index.md
new file mode 100644
index 00000000..0cdbe33d
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-reference-holder/index.md
@@ -0,0 +1,18 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [ReferenceHolder](./index.md)
+
+# ReferenceHolder
+
+`data class ReferenceHolder : `[`ValueHolder`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `ReferenceHolder(value: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [isNull](is-null.md) | `val isNull: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) |
+| [value](value.md) | `val value: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
diff --git a/docs/api/shark-hprof/shark/-value-holder/-reference-holder/is-null.md b/docs/api/shark-hprof/shark/-value-holder/-reference-holder/is-null.md
new file mode 100644
index 00000000..a4bdfdb7
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-reference-holder/is-null.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [ReferenceHolder](index.md) / [isNull](./is-null.md)
+
+# isNull
+
+`val isNull: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-reference-holder/value.md b/docs/api/shark-hprof/shark/-value-holder/-reference-holder/value.md
new file mode 100644
index 00000000..30547591
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-reference-holder/value.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [ReferenceHolder](index.md) / [value](./value.md)
+
+# value
+
+`val value: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-short-holder/-init-.md b/docs/api/shark-hprof/shark/-value-holder/-short-holder/-init-.md
new file mode 100644
index 00000000..572fbd21
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-short-holder/-init-.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [ShortHolder](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`ShortHolder(value: `[`Short`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-short/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/-short-holder/index.md b/docs/api/shark-hprof/shark/-value-holder/-short-holder/index.md
new file mode 100644
index 00000000..63329281
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-short-holder/index.md
@@ -0,0 +1,17 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [ShortHolder](./index.md)
+
+# ShortHolder
+
+`data class ShortHolder : `[`ValueHolder`](../index.md)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `ShortHolder(value: `[`Short`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-short/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [value](value.md) | `val value: `[`Short`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-short/index.html) |
diff --git a/docs/api/shark-hprof/shark/-value-holder/-short-holder/value.md b/docs/api/shark-hprof/shark/-value-holder/-short-holder/value.md
new file mode 100644
index 00000000..7a24091b
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/-short-holder/value.md
@@ -0,0 +1,5 @@
+[shark-hprof](../../../index.md) / [shark](../../index.md) / [ValueHolder](../index.md) / [ShortHolder](index.md) / [value](./value.md)
+
+# value
+
+`val value: `[`Short`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-short/index.html)
\ No newline at end of file
diff --git a/docs/api/shark-hprof/shark/-value-holder/index.md b/docs/api/shark-hprof/shark/-value-holder/index.md
new file mode 100644
index 00000000..562cfad1
--- /dev/null
+++ b/docs/api/shark-hprof/shark/-value-holder/index.md
@@ -0,0 +1,42 @@
+[shark-hprof](../../index.md) / [shark](../index.md) / [ValueHolder](./index.md)
+
+# ValueHolder
+
+`sealed class ValueHolder`
+
+A value in the heap dump, which can be a [ReferenceHolder](-reference-holder/index.md) or
+a primitive type.
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [BooleanHolder](-boolean-holder/index.md) | `data class BooleanHolder : `[`ValueHolder`](./index.md) |
+| [ByteHolder](-byte-holder/index.md) | `data class ByteHolder : `[`ValueHolder`](./index.md) |
+| [CharHolder](-char-holder/index.md) | `data class CharHolder : `[`ValueHolder`](./index.md) |
+| [DoubleHolder](-double-holder/index.md) | `data class DoubleHolder : `[`ValueHolder`](./index.md) |
+| [FloatHolder](-float-holder/index.md) | `data class FloatHolder : `[`ValueHolder`](./index.md) |
+| [IntHolder](-int-holder/index.md) | `data class IntHolder : `[`ValueHolder`](./index.md) |
+| [LongHolder](-long-holder/index.md) | `data class LongHolder : `[`ValueHolder`](./index.md) |
+| [ReferenceHolder](-reference-holder/index.md) | `data class ReferenceHolder : `[`ValueHolder`](./index.md) |
+| [ShortHolder](-short-holder/index.md) | `data class ShortHolder : `[`ValueHolder`](./index.md) |
+
+### Companion Object Properties
+
+| Name | Summary |
+|---|---|
+| [NULL_REFERENCE](-n-u-l-l_-r-e-f-e-r-e-n-c-e.md) | `const val NULL_REFERENCE: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [BooleanHolder](-boolean-holder/index.md) | `data class BooleanHolder : `[`ValueHolder`](./index.md) |
+| [ByteHolder](-byte-holder/index.md) | `data class ByteHolder : `[`ValueHolder`](./index.md) |
+| [CharHolder](-char-holder/index.md) | `data class CharHolder : `[`ValueHolder`](./index.md) |
+| [DoubleHolder](-double-holder/index.md) | `data class DoubleHolder : `[`ValueHolder`](./index.md) |
+| [FloatHolder](-float-holder/index.md) | `data class FloatHolder : `[`ValueHolder`](./index.md) |
+| [IntHolder](-int-holder/index.md) | `data class IntHolder : `[`ValueHolder`](./index.md) |
+| [LongHolder](-long-holder/index.md) | `data class LongHolder : `[`ValueHolder`](./index.md) |
+| [ReferenceHolder](-reference-holder/index.md) | `data class ReferenceHolder : `[`ValueHolder`](./index.md) |
+| [ShortHolder](-short-holder/index.md) | `data class ShortHolder : `[`ValueHolder`](./index.md) |
diff --git a/docs/api/shark-hprof/shark/index.md b/docs/api/shark-hprof/shark/index.md
new file mode 100644
index 00000000..345d3c9b
--- /dev/null
+++ b/docs/api/shark-hprof/shark/index.md
@@ -0,0 +1,17 @@
+[shark-hprof](../index.md) / [shark](./index.md)
+
+## Package shark
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [GcRoot](-gc-root/index.md) | `sealed class GcRoot`<br>A GcRoot as identified by [HprofRecord.HeapDumpRecord.GcRootRecord](-hprof-record/-heap-dump-record/-gc-root-record/index.md) in the heap dump. |
+| [Hprof](-hprof/index.md) | `class Hprof : `[`Closeable`](https://docs.oracle.com/javase/6/docs/api/java/io/Closeable.html)<br>An opened Hprof file which can be read via [reader](-hprof/reader.md). Open a new hprof with [open](-hprof/open.md), and don't forget to call [close](-hprof/close.md) once done. |
+| [HprofPrimitiveArrayStripper](-hprof-primitive-array-stripper/index.md) | `class HprofPrimitiveArrayStripper`<br>Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of '?'. |
+| [HprofReader](-hprof-reader/index.md) | `class HprofReader`<br>Reads hprof content from an Okio [BufferedSource](#). |
+| [HprofRecord](-hprof-record/index.md) | `sealed class HprofRecord`<br>A Hprof record. These data structure map 1:1 with how records are written in hprof files. |
+| [HprofWriter](-hprof-writer/index.md) | `class HprofWriter : `[`Closeable`](https://docs.oracle.com/javase/6/docs/api/java/io/Closeable.html)<br>Generates Hprof files. |
+| [OnHprofRecordListener](-on-hprof-record-listener/index.md) | `interface OnHprofRecordListener`<br>Listener passed in to [HprofReader.readHprofRecords](-hprof-reader/read-hprof-records.md), gets notified for each [HprofRecord](-hprof-record/index.md) found in the heap dump which types is in the set of the recordTypes parameter passed to [HprofReader.readHprofRecords](-hprof-reader/read-hprof-records.md). |
+| [PrimitiveType](-primitive-type/index.md) | `enum class PrimitiveType`<br>A primitive type in the prof. |
+| [ValueHolder](-value-holder/index.md) | `sealed class ValueHolder`<br>A value in the heap dump, which can be a [ReferenceHolder](-value-holder/-reference-holder/index.md) or a primitive type. |
diff --git a/docs/api/shark-log/alltypes/index.md b/docs/api/shark-log/alltypes/index.md
new file mode 100644
index 00000000..7adb6d6e
--- /dev/null
+++ b/docs/api/shark-log/alltypes/index.md
@@ -0,0 +1,7 @@
+
+
+### All Types
+
+| Name | Summary |
+|---|---|
+| [shark.SharkLog](../shark/-shark-log/index.md) | Central Logger for all Shark artifacts. Set [logger](../shark/-shark-log/logger.md) to change where these logs go. |
diff --git a/docs/api/shark-log/index.md b/docs/api/shark-log/index.md
new file mode 100644
index 00000000..f0e5e071
--- /dev/null
+++ b/docs/api/shark-log/index.md
@@ -0,0 +1,11 @@
+[shark-log](./index.md)
+
+### Packages
+
+| Name | Summary |
+|---|---|
+| [shark](shark/index.md) |  |
+
+### Index
+
+[All Types](alltypes/index.md)
\ No newline at end of file
diff --git a/docs/api/shark-log/package-list b/docs/api/shark-log/package-list
new file mode 100644
index 00000000..415577c3
--- /dev/null
+++ b/docs/api/shark-log/package-list
@@ -0,0 +1,4 @@
+$dokka.format:gfm
+$dokka.linkExtension:md
+
+shark
diff --git a/docs/api/shark-log/shark/-shark-log/-logger/d.md b/docs/api/shark-log/shark/-shark-log/-logger/d.md
new file mode 100644
index 00000000..8afe1098
--- /dev/null
+++ b/docs/api/shark-log/shark/-shark-log/-logger/d.md
@@ -0,0 +1,12 @@
+[shark-log](../../../index.md) / [shark](../../index.md) / [SharkLog](../index.md) / [Logger](index.md) / [d](./d.md)
+
+# d
+
+`abstract fun d(message: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, vararg args: `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`?): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Logs a debug message formatted with the passed in arguments.
+
+`abstract fun d(throwable: `[`Throwable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html)`, message: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, vararg args: `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`?): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Logs a [Throwable](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html) and debug message formatted with the passed in arguments.
+
diff --git a/docs/api/shark-log/shark/-shark-log/-logger/index.md b/docs/api/shark-log/shark/-shark-log/-logger/index.md
new file mode 100644
index 00000000..ddf5942e
--- /dev/null
+++ b/docs/api/shark-log/shark/-shark-log/-logger/index.md
@@ -0,0 +1,15 @@
+[shark-log](../../../index.md) / [shark](../../index.md) / [SharkLog](../index.md) / [Logger](./index.md)
+
+# Logger
+
+`interface Logger`
+
+**See Also**
+
+[SharkLog](../index.md)
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [d](d.md) | `abstract fun d(message: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, vararg args: `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`?): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Logs a debug message formatted with the passed in arguments.`abstract fun d(throwable: `[`Throwable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html)`, message: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, vararg args: `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`?): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Logs a [Throwable](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html) and debug message formatted with the passed in arguments. |
diff --git a/docs/api/shark-log/shark/-shark-log/d.md b/docs/api/shark-log/shark/-shark-log/d.md
new file mode 100644
index 00000000..01717102
--- /dev/null
+++ b/docs/api/shark-log/shark/-shark-log/d.md
@@ -0,0 +1,11 @@
+[shark-log](../../index.md) / [shark](../index.md) / [SharkLog](index.md) / [d](./d.md)
+
+# d
+
+`fun d(message: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, vararg args: `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`?): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+`fun d(throwable: `[`Throwable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html)`, message: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, vararg args: `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`?): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+**See Also**
+
+[Logger.d](-logger/d.md)
+
diff --git a/docs/api/shark-log/shark/-shark-log/index.md b/docs/api/shark-log/shark/-shark-log/index.md
new file mode 100644
index 00000000..a0cf19b6
--- /dev/null
+++ b/docs/api/shark-log/shark/-shark-log/index.md
@@ -0,0 +1,25 @@
+[shark-log](../../index.md) / [shark](../index.md) / [SharkLog](./index.md)
+
+# SharkLog
+
+`object SharkLog`
+
+Central Logger for all Shark artifacts. Set [logger](logger.md) to change where these logs go.
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [Logger](-logger/index.md) | `interface Logger` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [logger](logger.md) | `var logger: `[`SharkLog.Logger`](-logger/index.md)`?` |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [d](d.md) | `fun d(message: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, vararg args: `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`?): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>`fun d(throwable: `[`Throwable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html)`, message: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, vararg args: `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`?): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark-log/shark/-shark-log/logger.md b/docs/api/shark-log/shark/-shark-log/logger.md
new file mode 100644
index 00000000..05e91693
--- /dev/null
+++ b/docs/api/shark-log/shark/-shark-log/logger.md
@@ -0,0 +1,5 @@
+[shark-log](../../index.md) / [shark](../index.md) / [SharkLog](index.md) / [logger](./logger.md)
+
+# logger
+
+`var logger: `[`SharkLog.Logger`](-logger/index.md)`?`
\ No newline at end of file
diff --git a/docs/api/shark-log/shark/index.md b/docs/api/shark-log/shark/index.md
new file mode 100644
index 00000000..9829e456
--- /dev/null
+++ b/docs/api/shark-log/shark/index.md
@@ -0,0 +1,9 @@
+[shark-log](../index.md) / [shark](./index.md)
+
+## Package shark
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [SharkLog](-shark-log/index.md) | `object SharkLog`<br>Central Logger for all Shark artifacts. Set [logger](-shark-log/logger.md) to change where these logs go. |
diff --git a/docs/api/shark/alltypes/index.md b/docs/api/shark/alltypes/index.md
new file mode 100644
index 00000000..b9b2f20b
--- /dev/null
+++ b/docs/api/shark/alltypes/index.md
@@ -0,0 +1,27 @@
+
+
+### All Types
+
+| Name | Summary |
+|---|---|
+| [shark.ApplicationLeak](../shark/-application-leak/index.md) | A leak found by [HeapAnalyzer](../shark/-heap-analyzer/index.md) in your application. |
+| [shark.AppSingletonInspector](../shark/-app-singleton-inspector/index.md) | Inspector that automatically marks instances of the provided class names as not leaking because they're app wide singletons. |
+| [shark.HeapAnalysis](../shark/-heap-analysis/index.md) | The result of an analysis performed by [HeapAnalyzer](../shark/-heap-analyzer/index.md), either a [HeapAnalysisSuccess](../shark/-heap-analysis-success/index.md) or a [HeapAnalysisFailure](../shark/-heap-analysis-failure/index.md). This class is serializable however there are no guarantees of forward compatibility. |
+| [shark.HeapAnalysisException](../shark/-heap-analysis-exception/index.md) |  |
+| [shark.HeapAnalysisFailure](../shark/-heap-analysis-failure/index.md) | The analysis performed by [HeapAnalyzer](../shark/-heap-analyzer/index.md) did not complete successfully. |
+| [shark.HeapAnalysisSuccess](../shark/-heap-analysis-success/index.md) | The result of a successful heap analysis performed by [HeapAnalyzer](../shark/-heap-analyzer/index.md). |
+| [shark.HeapAnalyzer](../shark/-heap-analyzer/index.md) | Analyzes heap dumps to look for leaks. |
+| [shark.IgnoredReferenceMatcher](../shark/-ignored-reference-matcher/index.md) | [IgnoredReferenceMatcher](../shark/-ignored-reference-matcher/index.md) should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. |
+| [shark.Leak](../shark/-leak/index.md) | A leak found by [HeapAnalyzer](../shark/-heap-analyzer/index.md), either an [ApplicationLeak](../shark/-application-leak/index.md) or a [LibraryLeak](../shark/-library-leak/index.md). |
+| [shark.LeakNodeStatus](../shark/-leak-node-status/index.md) |  |
+| [shark.LeakReference](../shark/-leak-reference/index.md) | A single field in a [LeakTraceElement](../shark/-leak-trace-element/index.md). |
+| [shark.LeakTrace](../shark/-leak-trace/index.md) | A chain of references that constitute the shortest strong reference path from a GC root to the leaking object. Fixing the leak usually means breaking one of the references in that chain. |
+| [shark.LeakTraceElement](../shark/-leak-trace-element/index.md) |  |
+| [shark.LibraryLeak](../shark/-library-leak/index.md) | A leak found by [HeapAnalyzer](../shark/-heap-analyzer/index.md), where the only path to the leaking object required going through a reference matched by [pattern](../shark/-library-leak/pattern.md), as provided to a [LibraryLeakReferenceMatcher](../shark/-library-leak-reference-matcher/index.md) instance. This is a known leak in library code that is beyond your control. |
+| [shark.LibraryLeakReferenceMatcher](../shark/-library-leak-reference-matcher/index.md) | [LibraryLeakReferenceMatcher](../shark/-library-leak-reference-matcher/index.md) should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don't match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as [LibraryLeak](../shark/-library-leak/index.md) instead of [ApplicationLeak](../shark/-application-leak/index.md). |
+| [shark.ObjectInspector](../shark/-object-inspector/index.md) | Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. [inspect](../shark/-object-inspector/inspect.md) will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided [ObjectReporter](../shark/-object-reporter/index.md) to provide insights for that object. |
+| [shark.ObjectInspectors](../shark/-object-inspectors/index.md) | A set of default [ObjectInspector](../shark/-object-inspector/index.md)s that knows about common JDK objects. |
+| [shark.ObjectReporter](../shark/-object-reporter/index.md) | Enables [ObjectInspector](../shark/-object-inspector/index.md) implementations to provide insights on [heapObject](../shark/-object-reporter/heap-object.md), which is an object (class, instance or array) found in the heap. |
+| [shark.OnAnalysisProgressListener](../shark/-on-analysis-progress-listener/index.md) | Reports progress from the [HeapAnalyzer](../shark/-heap-analyzer/index.md) as they occur, as [Step](../shark/-on-analysis-progress-listener/-step/index.md) values. |
+| [shark.ReferenceMatcher](../shark/-reference-matcher/index.md) | Used to pattern match known patterns of references in the heap, either to ignore them ([IgnoredReferenceMatcher](../shark/-ignored-reference-matcher/index.md)) or to mark them as library leaks ([LibraryLeakReferenceMatcher](../shark/-library-leak-reference-matcher/index.md)). |
+| [shark.ReferencePattern](../shark/-reference-pattern/index.md) | A pattern that will match references for a given [ReferenceMatcher](../shark/-reference-matcher/index.md). |
diff --git a/docs/api/shark/index.md b/docs/api/shark/index.md
new file mode 100644
index 00000000..73375ceb
--- /dev/null
+++ b/docs/api/shark/index.md
@@ -0,0 +1,11 @@
+[shark](./index.md)
+
+### Packages
+
+| Name | Summary |
+|---|---|
+| [shark](shark/index.md) |  |
+
+### Index
+
+[All Types](alltypes/index.md)
\ No newline at end of file
diff --git a/docs/api/shark/package-list b/docs/api/shark/package-list
new file mode 100644
index 00000000..415577c3
--- /dev/null
+++ b/docs/api/shark/package-list
@@ -0,0 +1,4 @@
+$dokka.format:gfm
+$dokka.linkExtension:md
+
+shark
diff --git a/docs/api/shark/shark/-app-singleton-inspector/-init-.md b/docs/api/shark/shark/-app-singleton-inspector/-init-.md
new file mode 100644
index 00000000..1dbd4a5c
--- /dev/null
+++ b/docs/api/shark/shark/-app-singleton-inspector/-init-.md
@@ -0,0 +1,9 @@
+[shark](../../index.md) / [shark](../index.md) / [AppSingletonInspector](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`AppSingletonInspector(vararg singletonClasses: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`)`
+
+Inspector that automatically marks instances of the provided class names as not leaking
+because they're app wide singletons.
+
diff --git a/docs/api/shark/shark/-app-singleton-inspector/index.md b/docs/api/shark/shark/-app-singleton-inspector/index.md
new file mode 100644
index 00000000..17c48696
--- /dev/null
+++ b/docs/api/shark/shark/-app-singleton-inspector/index.md
@@ -0,0 +1,20 @@
+[shark](../../index.md) / [shark](../index.md) / [AppSingletonInspector](./index.md)
+
+# AppSingletonInspector
+
+`class AppSingletonInspector : `[`ObjectInspector`](../-object-inspector/index.md)
+
+Inspector that automatically marks instances of the provided class names as not leaking
+because they're app wide singletons.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `AppSingletonInspector(vararg singletonClasses: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`)`<br>Inspector that automatically marks instances of the provided class names as not leaking because they're app wide singletons. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: `[`ObjectReporter`](../-object-reporter/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark/shark/-app-singleton-inspector/inspect.md b/docs/api/shark/shark/-app-singleton-inspector/inspect.md
new file mode 100644
index 00000000..f90be2a2
--- /dev/null
+++ b/docs/api/shark/shark/-app-singleton-inspector/inspect.md
@@ -0,0 +1,12 @@
+[shark](../../index.md) / [shark](../index.md) / [AppSingletonInspector](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: `[`ObjectReporter`](../-object-reporter/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Overrides [ObjectInspector.inspect](../-object-inspector/inspect.md)
+
+**See Also**
+
+[ObjectInspector](../-object-inspector/index.md)
+
diff --git a/docs/api/shark/shark/-application-leak/-init-.md b/docs/api/shark/shark/-application-leak/-init-.md
new file mode 100644
index 00000000..1656da86
--- /dev/null
+++ b/docs/api/shark/shark/-application-leak/-init-.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [ApplicationLeak](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`ApplicationLeak(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, leakTrace: `[`LeakTrace`](../-leak-trace/index.md)`, retainedHeapByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`?)`
+
+A leak found by [HeapAnalyzer](../-heap-analyzer/index.md) in your application.
+
diff --git a/docs/api/shark/shark/-application-leak/class-name.md b/docs/api/shark/shark/-application-leak/class-name.md
new file mode 100644
index 00000000..e2199ea0
--- /dev/null
+++ b/docs/api/shark/shark/-application-leak/class-name.md
@@ -0,0 +1,11 @@
+[shark](../../index.md) / [shark](../index.md) / [ApplicationLeak](index.md) / [className](./class-name.md)
+
+# className
+
+`val className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+Overrides [Leak.className](../-leak/class-name.md)
+
+Class name of the leaking object.
+The class name format is the same as what would be returned by [Class.getName](https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName()).
+
diff --git a/docs/api/shark/shark/-application-leak/create-group-hash.md b/docs/api/shark/shark/-application-leak/create-group-hash.md
new file mode 100644
index 00000000..247854d2
--- /dev/null
+++ b/docs/api/shark/shark/-application-leak/create-group-hash.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [ApplicationLeak](index.md) / [createGroupHash](./create-group-hash.md)
+
+# createGroupHash
+
+`protected fun createGroupHash(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+Overrides [Leak.createGroupHash](../-leak/create-group-hash.md)
+
diff --git a/docs/api/shark/shark/-application-leak/index.md b/docs/api/shark/shark/-application-leak/index.md
new file mode 100644
index 00000000..485e415d
--- /dev/null
+++ b/docs/api/shark/shark/-application-leak/index.md
@@ -0,0 +1,34 @@
+[shark](../../index.md) / [shark](../index.md) / [ApplicationLeak](./index.md)
+
+# ApplicationLeak
+
+`data class ApplicationLeak : `[`Leak`](../-leak/index.md)
+
+A leak found by [HeapAnalyzer](../-heap-analyzer/index.md) in your application.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `ApplicationLeak(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, leakTrace: `[`LeakTrace`](../-leak-trace/index.md)`, retainedHeapByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`?)`<br>A leak found by [HeapAnalyzer](../-heap-analyzer/index.md) in your application. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [className](class-name.md) | `val className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>Class name of the leaking object. The class name format is the same as what would be returned by [Class.getName](https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName()). |
+| [leakTrace](leak-trace.md) | `val leakTrace: `[`LeakTrace`](../-leak-trace/index.md)<br>Shortest path from GC roots to the leaking object. |
+| [retainedHeapByteSize](retained-heap-byte-size.md) | `val retainedHeapByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`?`<br>The number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed. |
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [classSimpleName](../-leak/class-simple-name.md) | `val classSimpleName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>Returns [className](../-leak/class-name.md) stripped of any string content before the last period (included). |
+| [groupHash](../-leak/group-hash.md) | `val groupHash: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>A unique SHA1 hash that represents this group of leaks. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [createGroupHash](create-group-hash.md) | `fun createGroupHash(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark/shark/-application-leak/leak-trace.md b/docs/api/shark/shark/-application-leak/leak-trace.md
new file mode 100644
index 00000000..26dc4aa5
--- /dev/null
+++ b/docs/api/shark/shark/-application-leak/leak-trace.md
@@ -0,0 +1,10 @@
+[shark](../../index.md) / [shark](../index.md) / [ApplicationLeak](index.md) / [leakTrace](./leak-trace.md)
+
+# leakTrace
+
+`val leakTrace: `[`LeakTrace`](../-leak-trace/index.md)
+
+Overrides [Leak.leakTrace](../-leak/leak-trace.md)
+
+Shortest path from GC roots to the leaking object.
+
diff --git a/docs/api/shark/shark/-application-leak/retained-heap-byte-size.md b/docs/api/shark/shark/-application-leak/retained-heap-byte-size.md
new file mode 100644
index 00000000..caa36392
--- /dev/null
+++ b/docs/api/shark/shark/-application-leak/retained-heap-byte-size.md
@@ -0,0 +1,11 @@
+[shark](../../index.md) / [shark](../index.md) / [ApplicationLeak](index.md) / [retainedHeapByteSize](./retained-heap-byte-size.md)
+
+# retainedHeapByteSize
+
+`val retainedHeapByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`?`
+
+Overrides [Leak.retainedHeapByteSize](../-leak/retained-heap-byte-size.md)
+
+The number of bytes which would be freed if all references to the leaking object were
+released. Null if the retained heap size was not computed.
+
diff --git a/docs/api/shark/shark/-heap-analysis-exception/-init-.md b/docs/api/shark/shark/-heap-analysis-exception/-init-.md
new file mode 100644
index 00000000..1f0d38ff
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-exception/-init-.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisException](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`HeapAnalysisException(cause: `[`Throwable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-heap-analysis-exception/index.md b/docs/api/shark/shark/-heap-analysis-exception/index.md
new file mode 100644
index 00000000..ec64d5b0
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-exception/index.md
@@ -0,0 +1,17 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisException](./index.md)
+
+# HeapAnalysisException
+
+`class HeapAnalysisException : `[`RuntimeException`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-runtime-exception/index.html)
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `HeapAnalysisException(cause: `[`Throwable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html)`)` |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [toString](to-string.md) | `fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark/shark/-heap-analysis-exception/to-string.md b/docs/api/shark/shark/-heap-analysis-exception/to-string.md
new file mode 100644
index 00000000..9ad40469
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-exception/to-string.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisException](index.md) / [toString](./to-string.md)
+
+# toString
+
+`fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-heap-analysis-failure/-init-.md b/docs/api/shark/shark/-heap-analysis-failure/-init-.md
new file mode 100644
index 00000000..759cb4d7
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-failure/-init-.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisFailure](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`HeapAnalysisFailure(heapDumpFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)`, createdAtTimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, analysisDurationMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, exception: `[`HeapAnalysisException`](../-heap-analysis-exception/index.md)`)`
+
+The analysis performed by [HeapAnalyzer](../-heap-analyzer/index.md) did not complete successfully.
+
diff --git a/docs/api/shark/shark/-heap-analysis-failure/analysis-duration-millis.md b/docs/api/shark/shark/-heap-analysis-failure/analysis-duration-millis.md
new file mode 100644
index 00000000..5ed5cbf7
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-failure/analysis-duration-millis.md
@@ -0,0 +1,10 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisFailure](index.md) / [analysisDurationMillis](./analysis-duration-millis.md)
+
+# analysisDurationMillis
+
+`val analysisDurationMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [HeapAnalysis.analysisDurationMillis](../-heap-analysis/analysis-duration-millis.md)
+
+Total time spent analyzing the heap.
+
diff --git a/docs/api/shark/shark/-heap-analysis-failure/created-at-time-millis.md b/docs/api/shark/shark/-heap-analysis-failure/created-at-time-millis.md
new file mode 100644
index 00000000..cb523d89
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-failure/created-at-time-millis.md
@@ -0,0 +1,10 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisFailure](index.md) / [createdAtTimeMillis](./created-at-time-millis.md)
+
+# createdAtTimeMillis
+
+`val createdAtTimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [HeapAnalysis.createdAtTimeMillis](../-heap-analysis/created-at-time-millis.md)
+
+The [System.currentTimeMillis](https://docs.oracle.com/javase/6/docs/api/java/lang/System.html#currentTimeMillis()) when this [HeapAnalysis](../-heap-analysis/index.md) instance was created.
+
diff --git a/docs/api/shark/shark/-heap-analysis-failure/exception.md b/docs/api/shark/shark/-heap-analysis-failure/exception.md
new file mode 100644
index 00000000..91d72dd9
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-failure/exception.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisFailure](index.md) / [exception](./exception.md)
+
+# exception
+
+`val exception: `[`HeapAnalysisException`](../-heap-analysis-exception/index.md)
+
+An exception wrapping the actual exception that was thrown.
+
diff --git a/docs/api/shark/shark/-heap-analysis-failure/heap-dump-file.md b/docs/api/shark/shark/-heap-analysis-failure/heap-dump-file.md
new file mode 100644
index 00000000..d722daf2
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-failure/heap-dump-file.md
@@ -0,0 +1,10 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisFailure](index.md) / [heapDumpFile](./heap-dump-file.md)
+
+# heapDumpFile
+
+`val heapDumpFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)
+
+Overrides [HeapAnalysis.heapDumpFile](../-heap-analysis/heap-dump-file.md)
+
+The hprof file that was analyzed.
+
diff --git a/docs/api/shark/shark/-heap-analysis-failure/index.md b/docs/api/shark/shark/-heap-analysis-failure/index.md
new file mode 100644
index 00000000..e22b3d5f
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-failure/index.md
@@ -0,0 +1,22 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisFailure](./index.md)
+
+# HeapAnalysisFailure
+
+`data class HeapAnalysisFailure : `[`HeapAnalysis`](../-heap-analysis/index.md)
+
+The analysis performed by [HeapAnalyzer](../-heap-analyzer/index.md) did not complete successfully.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `HeapAnalysisFailure(heapDumpFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)`, createdAtTimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, analysisDurationMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, exception: `[`HeapAnalysisException`](../-heap-analysis-exception/index.md)`)`<br>The analysis performed by [HeapAnalyzer](../-heap-analyzer/index.md) did not complete successfully. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [analysisDurationMillis](analysis-duration-millis.md) | `val analysisDurationMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>Total time spent analyzing the heap. |
+| [createdAtTimeMillis](created-at-time-millis.md) | `val createdAtTimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The [System.currentTimeMillis](https://docs.oracle.com/javase/6/docs/api/java/lang/System.html#currentTimeMillis()) when this [HeapAnalysis](../-heap-analysis/index.md) instance was created. |
+| [exception](exception.md) | `val exception: `[`HeapAnalysisException`](../-heap-analysis-exception/index.md)<br>An exception wrapping the actual exception that was thrown. |
+| [heapDumpFile](heap-dump-file.md) | `val heapDumpFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)<br>The hprof file that was analyzed. |
diff --git a/docs/api/shark/shark/-heap-analysis-success/-init-.md b/docs/api/shark/shark/-heap-analysis-success/-init-.md
new file mode 100644
index 00000000..4de43e93
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-success/-init-.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisSuccess](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`HeapAnalysisSuccess(heapDumpFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)`, createdAtTimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, analysisDurationMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, applicationLeaks: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`ApplicationLeak`](../-application-leak/index.md)`>, libraryLeaks: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`LibraryLeak`](../-library-leak/index.md)`>)`
+
+The result of a successful heap analysis performed by [HeapAnalyzer](../-heap-analyzer/index.md).
+
diff --git a/docs/api/shark/shark/-heap-analysis-success/all-leaks.md b/docs/api/shark/shark/-heap-analysis-success/all-leaks.md
new file mode 100644
index 00000000..3b8e7ff0
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-success/all-leaks.md
@@ -0,0 +1,9 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisSuccess](index.md) / [allLeaks](./all-leaks.md)
+
+# allLeaks
+
+`val allLeaks: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`Leak`](../-leak/index.md)`>`
+
+The list of [Leak](../-leak/index.md) found in the heap dump by [HeapAnalyzer](../-heap-analyzer/index.md), ie all [applicationLeaks](application-leaks.md) and
+all [libraryLeaks](library-leaks.md) in one list.
+
diff --git a/docs/api/shark/shark/-heap-analysis-success/analysis-duration-millis.md b/docs/api/shark/shark/-heap-analysis-success/analysis-duration-millis.md
new file mode 100644
index 00000000..0ca62574
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-success/analysis-duration-millis.md
@@ -0,0 +1,10 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisSuccess](index.md) / [analysisDurationMillis](./analysis-duration-millis.md)
+
+# analysisDurationMillis
+
+`val analysisDurationMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [HeapAnalysis.analysisDurationMillis](../-heap-analysis/analysis-duration-millis.md)
+
+Total time spent analyzing the heap.
+
diff --git a/docs/api/shark/shark/-heap-analysis-success/application-leaks.md b/docs/api/shark/shark/-heap-analysis-success/application-leaks.md
new file mode 100644
index 00000000..855eeb50
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-success/application-leaks.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisSuccess](index.md) / [applicationLeaks](./application-leaks.md)
+
+# applicationLeaks
+
+`val applicationLeaks: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`ApplicationLeak`](../-application-leak/index.md)`>`
+
+The list of [ApplicationLeak](../-application-leak/index.md) found in the heap dump by [HeapAnalyzer](../-heap-analyzer/index.md).
+
diff --git a/docs/api/shark/shark/-heap-analysis-success/created-at-time-millis.md b/docs/api/shark/shark/-heap-analysis-success/created-at-time-millis.md
new file mode 100644
index 00000000..c34fa494
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-success/created-at-time-millis.md
@@ -0,0 +1,10 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisSuccess](index.md) / [createdAtTimeMillis](./created-at-time-millis.md)
+
+# createdAtTimeMillis
+
+`val createdAtTimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Overrides [HeapAnalysis.createdAtTimeMillis](../-heap-analysis/created-at-time-millis.md)
+
+The [System.currentTimeMillis](https://docs.oracle.com/javase/6/docs/api/java/lang/System.html#currentTimeMillis()) when this [HeapAnalysis](../-heap-analysis/index.md) instance was created.
+
diff --git a/docs/api/shark/shark/-heap-analysis-success/heap-dump-file.md b/docs/api/shark/shark/-heap-analysis-success/heap-dump-file.md
new file mode 100644
index 00000000..a7cf7b6f
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-success/heap-dump-file.md
@@ -0,0 +1,10 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisSuccess](index.md) / [heapDumpFile](./heap-dump-file.md)
+
+# heapDumpFile
+
+`val heapDumpFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)
+
+Overrides [HeapAnalysis.heapDumpFile](../-heap-analysis/heap-dump-file.md)
+
+The hprof file that was analyzed.
+
diff --git a/docs/api/shark/shark/-heap-analysis-success/index.md b/docs/api/shark/shark/-heap-analysis-success/index.md
new file mode 100644
index 00000000..d8a2f0ca
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-success/index.md
@@ -0,0 +1,24 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisSuccess](./index.md)
+
+# HeapAnalysisSuccess
+
+`data class HeapAnalysisSuccess : `[`HeapAnalysis`](../-heap-analysis/index.md)
+
+The result of a successful heap analysis performed by [HeapAnalyzer](../-heap-analyzer/index.md).
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `HeapAnalysisSuccess(heapDumpFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)`, createdAtTimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, analysisDurationMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`, applicationLeaks: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`ApplicationLeak`](../-application-leak/index.md)`>, libraryLeaks: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`LibraryLeak`](../-library-leak/index.md)`>)`<br>The result of a successful heap analysis performed by [HeapAnalyzer](../-heap-analyzer/index.md). |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [allLeaks](all-leaks.md) | `val allLeaks: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`Leak`](../-leak/index.md)`>`<br>The list of [Leak](../-leak/index.md) found in the heap dump by [HeapAnalyzer](../-heap-analyzer/index.md), ie all [applicationLeaks](application-leaks.md) and all [libraryLeaks](library-leaks.md) in one list. |
+| [analysisDurationMillis](analysis-duration-millis.md) | `val analysisDurationMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>Total time spent analyzing the heap. |
+| [applicationLeaks](application-leaks.md) | `val applicationLeaks: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`ApplicationLeak`](../-application-leak/index.md)`>`<br>The list of [ApplicationLeak](../-application-leak/index.md) found in the heap dump by [HeapAnalyzer](../-heap-analyzer/index.md). |
+| [createdAtTimeMillis](created-at-time-millis.md) | `val createdAtTimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The [System.currentTimeMillis](https://docs.oracle.com/javase/6/docs/api/java/lang/System.html#currentTimeMillis()) when this [HeapAnalysis](../-heap-analysis/index.md) instance was created. |
+| [heapDumpFile](heap-dump-file.md) | `val heapDumpFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)<br>The hprof file that was analyzed. |
+| [libraryLeaks](library-leaks.md) | `val libraryLeaks: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`LibraryLeak`](../-library-leak/index.md)`>`<br>The list of [LibraryLeak](../-library-leak/index.md) found in the heap dump by [HeapAnalyzer](../-heap-analyzer/index.md). |
diff --git a/docs/api/shark/shark/-heap-analysis-success/library-leaks.md b/docs/api/shark/shark/-heap-analysis-success/library-leaks.md
new file mode 100644
index 00000000..f45afe3e
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis-success/library-leaks.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysisSuccess](index.md) / [libraryLeaks](./library-leaks.md)
+
+# libraryLeaks
+
+`val libraryLeaks: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`LibraryLeak`](../-library-leak/index.md)`>`
+
+The list of [LibraryLeak](../-library-leak/index.md) found in the heap dump by [HeapAnalyzer](../-heap-analyzer/index.md).
+
diff --git a/docs/api/shark/shark/-heap-analysis/analysis-duration-millis.md b/docs/api/shark/shark/-heap-analysis/analysis-duration-millis.md
new file mode 100644
index 00000000..1e2869a8
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis/analysis-duration-millis.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysis](index.md) / [analysisDurationMillis](./analysis-duration-millis.md)
+
+# analysisDurationMillis
+
+`abstract val analysisDurationMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+Total time spent analyzing the heap.
+
diff --git a/docs/api/shark/shark/-heap-analysis/created-at-time-millis.md b/docs/api/shark/shark/-heap-analysis/created-at-time-millis.md
new file mode 100644
index 00000000..2e5f95dc
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis/created-at-time-millis.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysis](index.md) / [createdAtTimeMillis](./created-at-time-millis.md)
+
+# createdAtTimeMillis
+
+`abstract val createdAtTimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)
+
+The [System.currentTimeMillis](https://docs.oracle.com/javase/6/docs/api/java/lang/System.html#currentTimeMillis()) when this [HeapAnalysis](index.md) instance was created.
+
diff --git a/docs/api/shark/shark/-heap-analysis/heap-dump-file.md b/docs/api/shark/shark/-heap-analysis/heap-dump-file.md
new file mode 100644
index 00000000..4256d764
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis/heap-dump-file.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysis](index.md) / [heapDumpFile](./heap-dump-file.md)
+
+# heapDumpFile
+
+`abstract val heapDumpFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)
+
+The hprof file that was analyzed.
+
diff --git a/docs/api/shark/shark/-heap-analysis/index.md b/docs/api/shark/shark/-heap-analysis/index.md
new file mode 100644
index 00000000..724f6414
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analysis/index.md
@@ -0,0 +1,24 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalysis](./index.md)
+
+# HeapAnalysis
+
+`sealed class HeapAnalysis : `[`Serializable`](https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html)
+
+The result of an analysis performed by [HeapAnalyzer](../-heap-analyzer/index.md), either a [HeapAnalysisSuccess](../-heap-analysis-success/index.md) or a
+[HeapAnalysisFailure](../-heap-analysis-failure/index.md). This class is serializable however there are no guarantees of forward
+compatibility.
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [analysisDurationMillis](analysis-duration-millis.md) | `abstract val analysisDurationMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>Total time spent analyzing the heap. |
+| [createdAtTimeMillis](created-at-time-millis.md) | `abstract val createdAtTimeMillis: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)<br>The [System.currentTimeMillis](https://docs.oracle.com/javase/6/docs/api/java/lang/System.html#currentTimeMillis()) when this [HeapAnalysis](./index.md) instance was created. |
+| [heapDumpFile](heap-dump-file.md) | `abstract val heapDumpFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)<br>The hprof file that was analyzed. |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [HeapAnalysisFailure](../-heap-analysis-failure/index.md) | `data class HeapAnalysisFailure : `[`HeapAnalysis`](./index.md)<br>The analysis performed by [HeapAnalyzer](../-heap-analyzer/index.md) did not complete successfully. |
+| [HeapAnalysisSuccess](../-heap-analysis-success/index.md) | `data class HeapAnalysisSuccess : `[`HeapAnalysis`](./index.md)<br>The result of a successful heap analysis performed by [HeapAnalyzer](../-heap-analyzer/index.md). |
diff --git a/docs/api/shark/shark/-heap-analyzer/-init-.md b/docs/api/shark/shark/-heap-analyzer/-init-.md
new file mode 100644
index 00000000..4a9f400e
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analyzer/-init-.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalyzer](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`HeapAnalyzer(listener: `[`OnAnalysisProgressListener`](../-on-analysis-progress-listener/index.md)`)`
+
+Analyzes heap dumps to look for leaks.
+
diff --git a/docs/api/shark/shark/-heap-analyzer/analyze.md b/docs/api/shark/shark/-heap-analyzer/analyze.md
new file mode 100644
index 00000000..5846ae9f
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analyzer/analyze.md
@@ -0,0 +1,9 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalyzer](index.md) / [analyze](./analyze.md)
+
+# analyze
+
+`fun analyze(heapDumpFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)`, referenceMatchers: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`ReferenceMatcher`](../-reference-matcher/index.md)`> = emptyList(), computeRetainedHeapSize: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = false, objectInspectors: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`ObjectInspector`](../-object-inspector/index.md)`> = emptyList(), leakFinders: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`ObjectInspector`](../-object-inspector/index.md)`> = objectInspectors): `[`HeapAnalysis`](../-heap-analysis/index.md)
+
+Searches the heap dump for leaking instances and then computes the shortest strong reference
+path from those instances to the GC roots.
+
diff --git a/docs/api/shark/shark/-heap-analyzer/index.md b/docs/api/shark/shark/-heap-analyzer/index.md
new file mode 100644
index 00000000..98b084b2
--- /dev/null
+++ b/docs/api/shark/shark/-heap-analyzer/index.md
@@ -0,0 +1,19 @@
+[shark](../../index.md) / [shark](../index.md) / [HeapAnalyzer](./index.md)
+
+# HeapAnalyzer
+
+`class HeapAnalyzer`
+
+Analyzes heap dumps to look for leaks.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `HeapAnalyzer(listener: `[`OnAnalysisProgressListener`](../-on-analysis-progress-listener/index.md)`)`<br>Analyzes heap dumps to look for leaks. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [analyze](analyze.md) | `fun analyze(heapDumpFile: `[`File`](https://docs.oracle.com/javase/6/docs/api/java/io/File.html)`, referenceMatchers: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`ReferenceMatcher`](../-reference-matcher/index.md)`> = emptyList(), computeRetainedHeapSize: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = false, objectInspectors: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`ObjectInspector`](../-object-inspector/index.md)`> = emptyList(), leakFinders: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`ObjectInspector`](../-object-inspector/index.md)`> = objectInspectors): `[`HeapAnalysis`](../-heap-analysis/index.md)<br>Searches the heap dump for leaking instances and then computes the shortest strong reference path from those instances to the GC roots. |
diff --git a/docs/api/shark/shark/-ignored-reference-matcher/-init-.md b/docs/api/shark/shark/-ignored-reference-matcher/-init-.md
new file mode 100644
index 00000000..636a436e
--- /dev/null
+++ b/docs/api/shark/shark/-ignored-reference-matcher/-init-.md
@@ -0,0 +1,9 @@
+[shark](../../index.md) / [shark](../index.md) / [IgnoredReferenceMatcher](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`IgnoredReferenceMatcher(pattern: `[`ReferencePattern`](../-reference-pattern/index.md)`)`
+
+[IgnoredReferenceMatcher](index.md) should be used to match references that cannot ever create leaks. The
+shortest path finder will never go through matching references.
+
diff --git a/docs/api/shark/shark/-ignored-reference-matcher/index.md b/docs/api/shark/shark/-ignored-reference-matcher/index.md
new file mode 100644
index 00000000..61462590
--- /dev/null
+++ b/docs/api/shark/shark/-ignored-reference-matcher/index.md
@@ -0,0 +1,20 @@
+[shark](../../index.md) / [shark](../index.md) / [IgnoredReferenceMatcher](./index.md)
+
+# IgnoredReferenceMatcher
+
+`class IgnoredReferenceMatcher : `[`ReferenceMatcher`](../-reference-matcher/index.md)
+
+[IgnoredReferenceMatcher](./index.md) should be used to match references that cannot ever create leaks. The
+shortest path finder will never go through matching references.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `IgnoredReferenceMatcher(pattern: `[`ReferencePattern`](../-reference-pattern/index.md)`)`<br>[IgnoredReferenceMatcher](./index.md) should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [pattern](pattern.md) | `val pattern: `[`ReferencePattern`](../-reference-pattern/index.md)<br>The pattern that references will be matched against. |
diff --git a/docs/api/shark/shark/-ignored-reference-matcher/pattern.md b/docs/api/shark/shark/-ignored-reference-matcher/pattern.md
new file mode 100644
index 00000000..e06e79a4
--- /dev/null
+++ b/docs/api/shark/shark/-ignored-reference-matcher/pattern.md
@@ -0,0 +1,10 @@
+[shark](../../index.md) / [shark](../index.md) / [IgnoredReferenceMatcher](index.md) / [pattern](./pattern.md)
+
+# pattern
+
+`val pattern: `[`ReferencePattern`](../-reference-pattern/index.md)
+
+Overrides [ReferenceMatcher.pattern](../-reference-matcher/pattern.md)
+
+The pattern that references will be matched against.
+
diff --git a/docs/api/shark/shark/-leak-node-status/-l-e-a-k-i-n-g.md b/docs/api/shark/shark/-leak-node-status/-l-e-a-k-i-n-g.md
new file mode 100644
index 00000000..78470f7c
--- /dev/null
+++ b/docs/api/shark/shark/-leak-node-status/-l-e-a-k-i-n-g.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakNodeStatus](index.md) / [LEAKING](./-l-e-a-k-i-n-g.md)
+
+# LEAKING
+
+`LEAKING`
+
+The instance was no longer needed and therefore expected to be unreachable.
+
diff --git a/docs/api/shark/shark/-leak-node-status/-n-o-t_-l-e-a-k-i-n-g.md b/docs/api/shark/shark/-leak-node-status/-n-o-t_-l-e-a-k-i-n-g.md
new file mode 100644
index 00000000..4e1e91b5
--- /dev/null
+++ b/docs/api/shark/shark/-leak-node-status/-n-o-t_-l-e-a-k-i-n-g.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakNodeStatus](index.md) / [NOT_LEAKING](./-n-o-t_-l-e-a-k-i-n-g.md)
+
+# NOT_LEAKING
+
+`NOT_LEAKING`
+
+The instance was needed and therefore expected to be reachable.
+
diff --git a/docs/api/shark/shark/-leak-node-status/-u-n-k-n-o-w-n.md b/docs/api/shark/shark/-leak-node-status/-u-n-k-n-o-w-n.md
new file mode 100644
index 00000000..1f16396c
--- /dev/null
+++ b/docs/api/shark/shark/-leak-node-status/-u-n-k-n-o-w-n.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakNodeStatus](index.md) / [UNKNOWN](./-u-n-k-n-o-w-n.md)
+
+# UNKNOWN
+
+`UNKNOWN`
+
+No decision can be made about the provided instance.
+
diff --git a/docs/api/shark/shark/-leak-node-status/index.md b/docs/api/shark/shark/-leak-node-status/index.md
new file mode 100644
index 00000000..e485f803
--- /dev/null
+++ b/docs/api/shark/shark/-leak-node-status/index.md
@@ -0,0 +1,13 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakNodeStatus](./index.md)
+
+# LeakNodeStatus
+
+`enum class LeakNodeStatus`
+
+### Enum Values
+
+| Name | Summary |
+|---|---|
+| [NOT_LEAKING](-n-o-t_-l-e-a-k-i-n-g.md) | The instance was needed and therefore expected to be reachable. |
+| [LEAKING](-l-e-a-k-i-n-g.md) | The instance was no longer needed and therefore expected to be unreachable. |
+| [UNKNOWN](-u-n-k-n-o-w-n.md) | No decision can be made about the provided instance. |
diff --git a/docs/api/shark/shark/-leak-reference/-init-.md b/docs/api/shark/shark/-leak-reference/-init-.md
new file mode 100644
index 00000000..e9d837c3
--- /dev/null
+++ b/docs/api/shark/shark/-leak-reference/-init-.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakReference](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`LeakReference(type: `[`LeakTraceElement.Type`](../-leak-trace-element/-type/index.md)`, name: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`)`
+
+A single field in a [LeakTraceElement](../-leak-trace-element/index.md).
+
diff --git a/docs/api/shark/shark/-leak-reference/display-name.md b/docs/api/shark/shark/-leak-reference/display-name.md
new file mode 100644
index 00000000..1d3b0394
--- /dev/null
+++ b/docs/api/shark/shark/-leak-reference/display-name.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakReference](index.md) / [displayName](./display-name.md)
+
+# displayName
+
+`val displayName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-reference/grouping-name.md b/docs/api/shark/shark/-leak-reference/grouping-name.md
new file mode 100644
index 00000000..7e3fa47b
--- /dev/null
+++ b/docs/api/shark/shark/-leak-reference/grouping-name.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakReference](index.md) / [groupingName](./grouping-name.md)
+
+# groupingName
+
+`val groupingName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-reference/index.md b/docs/api/shark/shark/-leak-reference/index.md
new file mode 100644
index 00000000..56ff917c
--- /dev/null
+++ b/docs/api/shark/shark/-leak-reference/index.md
@@ -0,0 +1,22 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakReference](./index.md)
+
+# LeakReference
+
+`data class LeakReference : `[`Serializable`](https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html)
+
+A single field in a [LeakTraceElement](../-leak-trace-element/index.md).
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `LeakReference(type: `[`LeakTraceElement.Type`](../-leak-trace-element/-type/index.md)`, name: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`)`<br>A single field in a [LeakTraceElement](../-leak-trace-element/index.md). |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [displayName](display-name.md) | `val displayName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+| [groupingName](grouping-name.md) | `val groupingName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+| [name](name.md) | `val name: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+| [type](type.md) | `val type: `[`LeakTraceElement.Type`](../-leak-trace-element/-type/index.md) |
diff --git a/docs/api/shark/shark/-leak-reference/name.md b/docs/api/shark/shark/-leak-reference/name.md
new file mode 100644
index 00000000..3f89aaae
--- /dev/null
+++ b/docs/api/shark/shark/-leak-reference/name.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakReference](index.md) / [name](./name.md)
+
+# name
+
+`val name: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-reference/type.md b/docs/api/shark/shark/-leak-reference/type.md
new file mode 100644
index 00000000..d2555da6
--- /dev/null
+++ b/docs/api/shark/shark/-leak-reference/type.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakReference](index.md) / [type](./type.md)
+
+# type
+
+`val type: `[`LeakTraceElement.Type`](../-leak-trace-element/-type/index.md)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace-element/-holder/-a-r-r-a-y.md b/docs/api/shark/shark/-leak-trace-element/-holder/-a-r-r-a-y.md
new file mode 100644
index 00000000..47040199
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/-holder/-a-r-r-a-y.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [LeakTraceElement](../index.md) / [Holder](index.md) / [ARRAY](./-a-r-r-a-y.md)
+
+# ARRAY
+
+`ARRAY`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace-element/-holder/-c-l-a-s-s.md b/docs/api/shark/shark/-leak-trace-element/-holder/-c-l-a-s-s.md
new file mode 100644
index 00000000..bf63d78e
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/-holder/-c-l-a-s-s.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [LeakTraceElement](../index.md) / [Holder](index.md) / [CLASS](./-c-l-a-s-s.md)
+
+# CLASS
+
+`CLASS`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace-element/-holder/-o-b-j-e-c-t.md b/docs/api/shark/shark/-leak-trace-element/-holder/-o-b-j-e-c-t.md
new file mode 100644
index 00000000..54723485
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/-holder/-o-b-j-e-c-t.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [LeakTraceElement](../index.md) / [Holder](index.md) / [OBJECT](./-o-b-j-e-c-t.md)
+
+# OBJECT
+
+`OBJECT`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace-element/-holder/-t-h-r-e-a-d.md b/docs/api/shark/shark/-leak-trace-element/-holder/-t-h-r-e-a-d.md
new file mode 100644
index 00000000..c2706cdd
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/-holder/-t-h-r-e-a-d.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [LeakTraceElement](../index.md) / [Holder](index.md) / [THREAD](./-t-h-r-e-a-d.md)
+
+# THREAD
+
+`THREAD`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace-element/-holder/index.md b/docs/api/shark/shark/-leak-trace-element/-holder/index.md
new file mode 100644
index 00000000..85845b36
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/-holder/index.md
@@ -0,0 +1,14 @@
+[shark](../../../index.md) / [shark](../../index.md) / [LeakTraceElement](../index.md) / [Holder](./index.md)
+
+# Holder
+
+`enum class Holder`
+
+### Enum Values
+
+| Name | Summary |
+|---|---|
+| [OBJECT](-o-b-j-e-c-t.md) |  |
+| [CLASS](-c-l-a-s-s.md) |  |
+| [THREAD](-t-h-r-e-a-d.md) |  |
+| [ARRAY](-a-r-r-a-y.md) |  |
diff --git a/docs/api/shark/shark/-leak-trace-element/-init-.md b/docs/api/shark/shark/-leak-trace-element/-init-.md
new file mode 100644
index 00000000..b0bdcaa0
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/-init-.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakTraceElement](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`LeakTraceElement(reference: `[`LeakReference`](../-leak-reference/index.md)`?, holder: `[`LeakTraceElement.Holder`](-holder/index.md)`, className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, labels: `[`Set`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/index.html)`<`[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`>, leakStatus: `[`LeakNodeStatus`](../-leak-node-status/index.md)`, leakStatusReason: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`)`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace-element/-type/-a-r-r-a-y_-e-n-t-r-y.md b/docs/api/shark/shark/-leak-trace-element/-type/-a-r-r-a-y_-e-n-t-r-y.md
new file mode 100644
index 00000000..e5bbaea2
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/-type/-a-r-r-a-y_-e-n-t-r-y.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [LeakTraceElement](../index.md) / [Type](index.md) / [ARRAY_ENTRY](./-a-r-r-a-y_-e-n-t-r-y.md)
+
+# ARRAY_ENTRY
+
+`ARRAY_ENTRY`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace-element/-type/-i-n-s-t-a-n-c-e_-f-i-e-l-d.md b/docs/api/shark/shark/-leak-trace-element/-type/-i-n-s-t-a-n-c-e_-f-i-e-l-d.md
new file mode 100644
index 00000000..ad415fbd
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/-type/-i-n-s-t-a-n-c-e_-f-i-e-l-d.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [LeakTraceElement](../index.md) / [Type](index.md) / [INSTANCE_FIELD](./-i-n-s-t-a-n-c-e_-f-i-e-l-d.md)
+
+# INSTANCE_FIELD
+
+`INSTANCE_FIELD`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace-element/-type/-l-o-c-a-l.md b/docs/api/shark/shark/-leak-trace-element/-type/-l-o-c-a-l.md
new file mode 100644
index 00000000..2699b95f
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/-type/-l-o-c-a-l.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [LeakTraceElement](../index.md) / [Type](index.md) / [LOCAL](./-l-o-c-a-l.md)
+
+# LOCAL
+
+`LOCAL`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace-element/-type/-s-t-a-t-i-c_-f-i-e-l-d.md b/docs/api/shark/shark/-leak-trace-element/-type/-s-t-a-t-i-c_-f-i-e-l-d.md
new file mode 100644
index 00000000..2d773adf
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/-type/-s-t-a-t-i-c_-f-i-e-l-d.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [LeakTraceElement](../index.md) / [Type](index.md) / [STATIC_FIELD](./-s-t-a-t-i-c_-f-i-e-l-d.md)
+
+# STATIC_FIELD
+
+`STATIC_FIELD`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace-element/-type/index.md b/docs/api/shark/shark/-leak-trace-element/-type/index.md
new file mode 100644
index 00000000..d888c67c
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/-type/index.md
@@ -0,0 +1,14 @@
+[shark](../../../index.md) / [shark](../../index.md) / [LeakTraceElement](../index.md) / [Type](./index.md)
+
+# Type
+
+`enum class Type`
+
+### Enum Values
+
+| Name | Summary |
+|---|---|
+| [INSTANCE_FIELD](-i-n-s-t-a-n-c-e_-f-i-e-l-d.md) |  |
+| [STATIC_FIELD](-s-t-a-t-i-c_-f-i-e-l-d.md) |  |
+| [LOCAL](-l-o-c-a-l.md) |  |
+| [ARRAY_ENTRY](-a-r-r-a-y_-e-n-t-r-y.md) |  |
diff --git a/docs/api/shark/shark/-leak-trace-element/class-name.md b/docs/api/shark/shark/-leak-trace-element/class-name.md
new file mode 100644
index 00000000..6be6d721
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/class-name.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakTraceElement](index.md) / [className](./class-name.md)
+
+# className
+
+`val className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace-element/class-simple-name.md b/docs/api/shark/shark/-leak-trace-element/class-simple-name.md
new file mode 100644
index 00000000..608e49b3
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/class-simple-name.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakTraceElement](index.md) / [classSimpleName](./class-simple-name.md)
+
+# classSimpleName
+
+`val classSimpleName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+Returns {@link #className} without the package.
+
diff --git a/docs/api/shark/shark/-leak-trace-element/holder.md b/docs/api/shark/shark/-leak-trace-element/holder.md
new file mode 100644
index 00000000..51cef257
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/holder.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakTraceElement](index.md) / [holder](./holder.md)
+
+# holder
+
+`val holder: `[`LeakTraceElement.Holder`](-holder/index.md)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace-element/index.md b/docs/api/shark/shark/-leak-trace-element/index.md
new file mode 100644
index 00000000..6ef89d9e
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/index.md
@@ -0,0 +1,30 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakTraceElement](./index.md)
+
+# LeakTraceElement
+
+`data class LeakTraceElement : `[`Serializable`](https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html)
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [Holder](-holder/index.md) | `enum class Holder` |
+| [Type](-type/index.md) | `enum class Type` |
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `LeakTraceElement(reference: `[`LeakReference`](../-leak-reference/index.md)`?, holder: `[`LeakTraceElement.Holder`](-holder/index.md)`, className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, labels: `[`Set`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/index.html)`<`[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`>, leakStatus: `[`LeakNodeStatus`](../-leak-node-status/index.md)`, leakStatusReason: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`)` |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [className](class-name.md) | `val className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+| [classSimpleName](class-simple-name.md) | `val classSimpleName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>Returns {@link #className} without the package. |
+| [holder](holder.md) | `val holder: `[`LeakTraceElement.Holder`](-holder/index.md) |
+| [labels](labels.md) | `val labels: `[`Set`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/index.html)`<`[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`>`<br>Labels that were computed during analysis. A label provides extra information that helps understand the leak trace element. |
+| [leakStatus](leak-status.md) | `val leakStatus: `[`LeakNodeStatus`](../-leak-node-status/index.md) |
+| [leakStatusReason](leak-status-reason.md) | `val leakStatusReason: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+| [reference](reference.md) | `val reference: `[`LeakReference`](../-leak-reference/index.md)`?`<br>Information about the reference that points to the next [LeakTraceElement](./index.md) in [LeakTrace.elements](../-leak-trace/elements.md). Null if this is the last element in the leak trace, ie the leaking object. |
diff --git a/docs/api/shark/shark/-leak-trace-element/labels.md b/docs/api/shark/shark/-leak-trace-element/labels.md
new file mode 100644
index 00000000..00fdcd44
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/labels.md
@@ -0,0 +1,9 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakTraceElement](index.md) / [labels](./labels.md)
+
+# labels
+
+`val labels: `[`Set`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/index.html)`<`[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`>`
+
+Labels that were computed during analysis. A label provides extra information that helps
+understand the leak trace element.
+
diff --git a/docs/api/shark/shark/-leak-trace-element/leak-status-reason.md b/docs/api/shark/shark/-leak-trace-element/leak-status-reason.md
new file mode 100644
index 00000000..862d304e
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/leak-status-reason.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakTraceElement](index.md) / [leakStatusReason](./leak-status-reason.md)
+
+# leakStatusReason
+
+`val leakStatusReason: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace-element/leak-status.md b/docs/api/shark/shark/-leak-trace-element/leak-status.md
new file mode 100644
index 00000000..92a110ea
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/leak-status.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakTraceElement](index.md) / [leakStatus](./leak-status.md)
+
+# leakStatus
+
+`val leakStatus: `[`LeakNodeStatus`](../-leak-node-status/index.md)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace-element/reference.md b/docs/api/shark/shark/-leak-trace-element/reference.md
new file mode 100644
index 00000000..cd6973e7
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace-element/reference.md
@@ -0,0 +1,10 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakTraceElement](index.md) / [reference](./reference.md)
+
+# reference
+
+`val reference: `[`LeakReference`](../-leak-reference/index.md)`?`
+
+Information about the reference that points to the next [LeakTraceElement](index.md) in
+[LeakTrace.elements](../-leak-trace/elements.md). Null if this is the last element in the leak trace, ie the leaking
+object.
+
diff --git a/docs/api/shark/shark/-leak-trace/-init-.md b/docs/api/shark/shark/-leak-trace/-init-.md
new file mode 100644
index 00000000..6dbe2091
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace/-init-.md
@@ -0,0 +1,9 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakTrace](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`LeakTrace(elements: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`LeakTraceElement`](../-leak-trace-element/index.md)`>)`
+
+A chain of references that constitute the shortest strong reference path from a GC root to the
+leaking object. Fixing the leak usually means breaking one of the references in that chain.
+
diff --git a/docs/api/shark/shark/-leak-trace/element-may-be-leak-cause.md b/docs/api/shark/shark/-leak-trace/element-may-be-leak-cause.md
new file mode 100644
index 00000000..36fb3527
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace/element-may-be-leak-cause.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakTrace](index.md) / [elementMayBeLeakCause](./element-may-be-leak-cause.md)
+
+# elementMayBeLeakCause
+
+`fun elementMayBeLeakCause(index: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace/elements.md b/docs/api/shark/shark/-leak-trace/elements.md
new file mode 100644
index 00000000..fc287bd3
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace/elements.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakTrace](index.md) / [elements](./elements.md)
+
+# elements
+
+`val elements: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`LeakTraceElement`](../-leak-trace-element/index.md)`>`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace/index.md b/docs/api/shark/shark/-leak-trace/index.md
new file mode 100644
index 00000000..c7d58df2
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace/index.md
@@ -0,0 +1,28 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakTrace](./index.md)
+
+# LeakTrace
+
+`data class LeakTrace : `[`Serializable`](https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html)
+
+A chain of references that constitute the shortest strong reference path from a GC root to the
+leaking object. Fixing the leak usually means breaking one of the references in that chain.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `LeakTrace(elements: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`LeakTraceElement`](../-leak-trace-element/index.md)`>)`<br>A chain of references that constitute the shortest strong reference path from a GC root to the leaking object. Fixing the leak usually means breaking one of the references in that chain. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [elements](elements.md) | `val elements: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`LeakTraceElement`](../-leak-trace-element/index.md)`>` |
+| [leakCauses](leak-causes.md) | `val leakCauses: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`LeakTraceElement`](../-leak-trace-element/index.md)`>` |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [elementMayBeLeakCause](element-may-be-leak-cause.md) | `fun elementMayBeLeakCause(index: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`): `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) |
+| [toString](to-string.md) | `fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark/shark/-leak-trace/leak-causes.md b/docs/api/shark/shark/-leak-trace/leak-causes.md
new file mode 100644
index 00000000..33569b8a
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace/leak-causes.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakTrace](index.md) / [leakCauses](./leak-causes.md)
+
+# leakCauses
+
+`val leakCauses: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`LeakTraceElement`](../-leak-trace-element/index.md)`>`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak-trace/to-string.md b/docs/api/shark/shark/-leak-trace/to-string.md
new file mode 100644
index 00000000..505b6fb7
--- /dev/null
+++ b/docs/api/shark/shark/-leak-trace/to-string.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [LeakTrace](index.md) / [toString](./to-string.md)
+
+# toString
+
+`fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak/class-name.md b/docs/api/shark/shark/-leak/class-name.md
new file mode 100644
index 00000000..8b40e2b3
--- /dev/null
+++ b/docs/api/shark/shark/-leak/class-name.md
@@ -0,0 +1,9 @@
+[shark](../../index.md) / [shark](../index.md) / [Leak](index.md) / [className](./class-name.md)
+
+# className
+
+`abstract val className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+Class name of the leaking object.
+The class name format is the same as what would be returned by [Class.getName](https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName()).
+
diff --git a/docs/api/shark/shark/-leak/class-simple-name.md b/docs/api/shark/shark/-leak/class-simple-name.md
new file mode 100644
index 00000000..717f776d
--- /dev/null
+++ b/docs/api/shark/shark/-leak/class-simple-name.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [Leak](index.md) / [classSimpleName](./class-simple-name.md)
+
+# classSimpleName
+
+`val classSimpleName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+Returns [className](class-name.md) stripped of any string content before the last period (included).
+
diff --git a/docs/api/shark/shark/-leak/create-group-hash.md b/docs/api/shark/shark/-leak/create-group-hash.md
new file mode 100644
index 00000000..324616ce
--- /dev/null
+++ b/docs/api/shark/shark/-leak/create-group-hash.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [Leak](index.md) / [createGroupHash](./create-group-hash.md)
+
+# createGroupHash
+
+`protected abstract fun createGroupHash(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-leak/group-hash.md b/docs/api/shark/shark/-leak/group-hash.md
new file mode 100644
index 00000000..1cf68acc
--- /dev/null
+++ b/docs/api/shark/shark/-leak/group-hash.md
@@ -0,0 +1,11 @@
+[shark](../../index.md) / [shark](../index.md) / [Leak](index.md) / [groupHash](./group-hash.md)
+
+# groupHash
+
+`val groupHash: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+A unique SHA1 hash that represents this group of leaks.
+
+For [ApplicationLeak](../-application-leak/index.md) this is based on [LeakTrace.leakCauses](../-leak-trace/leak-causes.md) and for [LibraryLeak](../-library-leak/index.md) this is
+based on [LibraryLeak.pattern](../-library-leak/pattern.md).
+
diff --git a/docs/api/shark/shark/-leak/index.md b/docs/api/shark/shark/-leak/index.md
new file mode 100644
index 00000000..c521d4ea
--- /dev/null
+++ b/docs/api/shark/shark/-leak/index.md
@@ -0,0 +1,30 @@
+[shark](../../index.md) / [shark](../index.md) / [Leak](./index.md)
+
+# Leak
+
+`sealed class Leak : `[`Serializable`](https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html)
+
+A leak found by [HeapAnalyzer](../-heap-analyzer/index.md), either an [ApplicationLeak](../-application-leak/index.md) or a [LibraryLeak](../-library-leak/index.md).
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [className](class-name.md) | `abstract val className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>Class name of the leaking object. The class name format is the same as what would be returned by [Class.getName](https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName()). |
+| [classSimpleName](class-simple-name.md) | `val classSimpleName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>Returns [className](class-name.md) stripped of any string content before the last period (included). |
+| [groupHash](group-hash.md) | `val groupHash: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>A unique SHA1 hash that represents this group of leaks. |
+| [leakTrace](leak-trace.md) | `abstract val leakTrace: `[`LeakTrace`](../-leak-trace/index.md)<br>Shortest path from GC roots to the leaking object. |
+| [retainedHeapByteSize](retained-heap-byte-size.md) | `abstract val retainedHeapByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`?`<br>The number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [createGroupHash](create-group-hash.md) | `abstract fun createGroupHash(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [ApplicationLeak](../-application-leak/index.md) | `data class ApplicationLeak : `[`Leak`](./index.md)<br>A leak found by [HeapAnalyzer](../-heap-analyzer/index.md) in your application. |
+| [LibraryLeak](../-library-leak/index.md) | `data class LibraryLeak : `[`Leak`](./index.md)<br>A leak found by [HeapAnalyzer](../-heap-analyzer/index.md), where the only path to the leaking object required going through a reference matched by [pattern](../-library-leak/pattern.md), as provided to a [LibraryLeakReferenceMatcher](../-library-leak-reference-matcher/index.md) instance. This is a known leak in library code that is beyond your control. |
diff --git a/docs/api/shark/shark/-leak/leak-trace.md b/docs/api/shark/shark/-leak/leak-trace.md
new file mode 100644
index 00000000..589aa93a
--- /dev/null
+++ b/docs/api/shark/shark/-leak/leak-trace.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [Leak](index.md) / [leakTrace](./leak-trace.md)
+
+# leakTrace
+
+`abstract val leakTrace: `[`LeakTrace`](../-leak-trace/index.md)
+
+Shortest path from GC roots to the leaking object.
+
diff --git a/docs/api/shark/shark/-leak/retained-heap-byte-size.md b/docs/api/shark/shark/-leak/retained-heap-byte-size.md
new file mode 100644
index 00000000..a384f377
--- /dev/null
+++ b/docs/api/shark/shark/-leak/retained-heap-byte-size.md
@@ -0,0 +1,9 @@
+[shark](../../index.md) / [shark](../index.md) / [Leak](index.md) / [retainedHeapByteSize](./retained-heap-byte-size.md)
+
+# retainedHeapByteSize
+
+`abstract val retainedHeapByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`?`
+
+The number of bytes which would be freed if all references to the leaking object were
+released. Null if the retained heap size was not computed.
+
diff --git a/docs/api/shark/shark/-library-leak-reference-matcher/-init-.md b/docs/api/shark/shark/-library-leak-reference-matcher/-init-.md
new file mode 100644
index 00000000..c713eb83
--- /dev/null
+++ b/docs/api/shark/shark/-library-leak-reference-matcher/-init-.md
@@ -0,0 +1,12 @@
+[shark](../../index.md) / [shark](../index.md) / [LibraryLeakReferenceMatcher](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`LibraryLeakReferenceMatcher(pattern: `[`ReferencePattern`](../-reference-pattern/index.md)`, description: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)` = "", patternApplies: (HeapGraph) -> `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = { true })`
+
+[LibraryLeakReferenceMatcher](index.md) should be used to match references in library code that are
+known to create leaks and are beyond your control. The shortest path finder will only go
+through matching references after it has exhausted references that don't match, prioritizing
+finding an application leak over a known library leak. Library leaks will be reported as
+[LibraryLeak](../-library-leak/index.md) instead of [ApplicationLeak](../-application-leak/index.md).
+
diff --git a/docs/api/shark/shark/-library-leak-reference-matcher/description.md b/docs/api/shark/shark/-library-leak-reference-matcher/description.md
new file mode 100644
index 00000000..b4323911
--- /dev/null
+++ b/docs/api/shark/shark/-library-leak-reference-matcher/description.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [LibraryLeakReferenceMatcher](index.md) / [description](./description.md)
+
+# description
+
+`val description: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+A description that conveys what we know about this library leak.
+
diff --git a/docs/api/shark/shark/-library-leak-reference-matcher/index.md b/docs/api/shark/shark/-library-leak-reference-matcher/index.md
new file mode 100644
index 00000000..3e4440b3
--- /dev/null
+++ b/docs/api/shark/shark/-library-leak-reference-matcher/index.md
@@ -0,0 +1,25 @@
+[shark](../../index.md) / [shark](../index.md) / [LibraryLeakReferenceMatcher](./index.md)
+
+# LibraryLeakReferenceMatcher
+
+`data class LibraryLeakReferenceMatcher : `[`ReferenceMatcher`](../-reference-matcher/index.md)
+
+[LibraryLeakReferenceMatcher](./index.md) should be used to match references in library code that are
+known to create leaks and are beyond your control. The shortest path finder will only go
+through matching references after it has exhausted references that don't match, prioritizing
+finding an application leak over a known library leak. Library leaks will be reported as
+[LibraryLeak](../-library-leak/index.md) instead of [ApplicationLeak](../-application-leak/index.md).
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `LibraryLeakReferenceMatcher(pattern: `[`ReferencePattern`](../-reference-pattern/index.md)`, description: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)` = "", patternApplies: (HeapGraph) -> `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)` = { true })`<br>[LibraryLeakReferenceMatcher](./index.md) should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don't match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as [LibraryLeak](../-library-leak/index.md) instead of [ApplicationLeak](../-application-leak/index.md). |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [description](description.md) | `val description: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>A description that conveys what we know about this library leak. |
+| [pattern](pattern.md) | `val pattern: `[`ReferencePattern`](../-reference-pattern/index.md)<br>The pattern that references will be matched against. |
+| [patternApplies](pattern-applies.md) | `val patternApplies: (HeapGraph) -> `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)<br>Whether the identified leak may exist in the provided [HeapGraph](#). Defaults to true. If the heap dump comes from a VM that runs a different version of the library that doesn't have the leak, then this should return false. |
diff --git a/docs/api/shark/shark/-library-leak-reference-matcher/pattern-applies.md b/docs/api/shark/shark/-library-leak-reference-matcher/pattern-applies.md
new file mode 100644
index 00000000..24be4342
--- /dev/null
+++ b/docs/api/shark/shark/-library-leak-reference-matcher/pattern-applies.md
@@ -0,0 +1,10 @@
+[shark](../../index.md) / [shark](../index.md) / [LibraryLeakReferenceMatcher](index.md) / [patternApplies](./pattern-applies.md)
+
+# patternApplies
+
+`val patternApplies: (HeapGraph) -> `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)
+
+Whether the identified leak may exist in the provided [HeapGraph](#). Defaults to true. If
+the heap dump comes from a VM that runs a different version of the library that doesn't
+have the leak, then this should return false.
+
diff --git a/docs/api/shark/shark/-library-leak-reference-matcher/pattern.md b/docs/api/shark/shark/-library-leak-reference-matcher/pattern.md
new file mode 100644
index 00000000..d5307245
--- /dev/null
+++ b/docs/api/shark/shark/-library-leak-reference-matcher/pattern.md
@@ -0,0 +1,10 @@
+[shark](../../index.md) / [shark](../index.md) / [LibraryLeakReferenceMatcher](index.md) / [pattern](./pattern.md)
+
+# pattern
+
+`val pattern: `[`ReferencePattern`](../-reference-pattern/index.md)
+
+Overrides [ReferenceMatcher.pattern](../-reference-matcher/pattern.md)
+
+The pattern that references will be matched against.
+
diff --git a/docs/api/shark/shark/-library-leak/-init-.md b/docs/api/shark/shark/-library-leak/-init-.md
new file mode 100644
index 00000000..8702aea3
--- /dev/null
+++ b/docs/api/shark/shark/-library-leak/-init-.md
@@ -0,0 +1,10 @@
+[shark](../../index.md) / [shark](../index.md) / [LibraryLeak](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`LibraryLeak(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, leakTrace: `[`LeakTrace`](../-leak-trace/index.md)`, retainedHeapByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`?, pattern: `[`ReferencePattern`](../-reference-pattern/index.md)`, description: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`)`
+
+A leak found by [HeapAnalyzer](../-heap-analyzer/index.md), where the only path to the leaking object required going
+through a reference matched by [pattern](pattern.md), as provided to a [LibraryLeakReferenceMatcher](../-library-leak-reference-matcher/index.md)
+instance. This is a known leak in library code that is beyond your control.
+
diff --git a/docs/api/shark/shark/-library-leak/class-name.md b/docs/api/shark/shark/-library-leak/class-name.md
new file mode 100644
index 00000000..8497a876
--- /dev/null
+++ b/docs/api/shark/shark/-library-leak/class-name.md
@@ -0,0 +1,11 @@
+[shark](../../index.md) / [shark](../index.md) / [LibraryLeak](index.md) / [className](./class-name.md)
+
+# className
+
+`val className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+Overrides [Leak.className](../-leak/class-name.md)
+
+Class name of the leaking object.
+The class name format is the same as what would be returned by [Class.getName](https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName()).
+
diff --git a/docs/api/shark/shark/-library-leak/create-group-hash.md b/docs/api/shark/shark/-library-leak/create-group-hash.md
new file mode 100644
index 00000000..daccfae3
--- /dev/null
+++ b/docs/api/shark/shark/-library-leak/create-group-hash.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [LibraryLeak](index.md) / [createGroupHash](./create-group-hash.md)
+
+# createGroupHash
+
+`protected fun createGroupHash(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+Overrides [Leak.createGroupHash](../-leak/create-group-hash.md)
+
diff --git a/docs/api/shark/shark/-library-leak/description.md b/docs/api/shark/shark/-library-leak/description.md
new file mode 100644
index 00000000..0ed73c6a
--- /dev/null
+++ b/docs/api/shark/shark/-library-leak/description.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [LibraryLeak](index.md) / [description](./description.md)
+
+# description
+
+`val description: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
+
+A description that conveys what we know about this library leak.
+
diff --git a/docs/api/shark/shark/-library-leak/index.md b/docs/api/shark/shark/-library-leak/index.md
new file mode 100644
index 00000000..fd69a2cb
--- /dev/null
+++ b/docs/api/shark/shark/-library-leak/index.md
@@ -0,0 +1,38 @@
+[shark](../../index.md) / [shark](../index.md) / [LibraryLeak](./index.md)
+
+# LibraryLeak
+
+`data class LibraryLeak : `[`Leak`](../-leak/index.md)
+
+A leak found by [HeapAnalyzer](../-heap-analyzer/index.md), where the only path to the leaking object required going
+through a reference matched by [pattern](pattern.md), as provided to a [LibraryLeakReferenceMatcher](../-library-leak-reference-matcher/index.md)
+instance. This is a known leak in library code that is beyond your control.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `LibraryLeak(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, leakTrace: `[`LeakTrace`](../-leak-trace/index.md)`, retainedHeapByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`?, pattern: `[`ReferencePattern`](../-reference-pattern/index.md)`, description: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`)`<br>A leak found by [HeapAnalyzer](../-heap-analyzer/index.md), where the only path to the leaking object required going through a reference matched by [pattern](pattern.md), as provided to a [LibraryLeakReferenceMatcher](../-library-leak-reference-matcher/index.md) instance. This is a known leak in library code that is beyond your control. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [className](class-name.md) | `val className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>Class name of the leaking object. The class name format is the same as what would be returned by [Class.getName](https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName()). |
+| [description](description.md) | `val description: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>A description that conveys what we know about this library leak. |
+| [leakTrace](leak-trace.md) | `val leakTrace: `[`LeakTrace`](../-leak-trace/index.md)<br>Shortest path from GC roots to the leaking object. |
+| [pattern](pattern.md) | `val pattern: `[`ReferencePattern`](../-reference-pattern/index.md)<br>The pattern that matched one of the references in [leakTrace](leak-trace.md), as provided to a [LibraryLeakReferenceMatcher](../-library-leak-reference-matcher/index.md) instance. |
+| [retainedHeapByteSize](retained-heap-byte-size.md) | `val retainedHeapByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`?`<br>The number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed. |
+
+### Inherited Properties
+
+| Name | Summary |
+|---|---|
+| [classSimpleName](../-leak/class-simple-name.md) | `val classSimpleName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>Returns [className](../-leak/class-name.md) stripped of any string content before the last period (included). |
+| [groupHash](../-leak/group-hash.md) | `val groupHash: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)<br>A unique SHA1 hash that represents this group of leaks. |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [createGroupHash](create-group-hash.md) | `fun createGroupHash(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark/shark/-library-leak/leak-trace.md b/docs/api/shark/shark/-library-leak/leak-trace.md
new file mode 100644
index 00000000..e2a17154
--- /dev/null
+++ b/docs/api/shark/shark/-library-leak/leak-trace.md
@@ -0,0 +1,10 @@
+[shark](../../index.md) / [shark](../index.md) / [LibraryLeak](index.md) / [leakTrace](./leak-trace.md)
+
+# leakTrace
+
+`val leakTrace: `[`LeakTrace`](../-leak-trace/index.md)
+
+Overrides [Leak.leakTrace](../-leak/leak-trace.md)
+
+Shortest path from GC roots to the leaking object.
+
diff --git a/docs/api/shark/shark/-library-leak/pattern.md b/docs/api/shark/shark/-library-leak/pattern.md
new file mode 100644
index 00000000..628adcd9
--- /dev/null
+++ b/docs/api/shark/shark/-library-leak/pattern.md
@@ -0,0 +1,9 @@
+[shark](../../index.md) / [shark](../index.md) / [LibraryLeak](index.md) / [pattern](./pattern.md)
+
+# pattern
+
+`val pattern: `[`ReferencePattern`](../-reference-pattern/index.md)
+
+The pattern that matched one of the references in [leakTrace](leak-trace.md), as provided to a
+[LibraryLeakReferenceMatcher](../-library-leak-reference-matcher/index.md) instance.
+
diff --git a/docs/api/shark/shark/-library-leak/retained-heap-byte-size.md b/docs/api/shark/shark/-library-leak/retained-heap-byte-size.md
new file mode 100644
index 00000000..82302a6e
--- /dev/null
+++ b/docs/api/shark/shark/-library-leak/retained-heap-byte-size.md
@@ -0,0 +1,11 @@
+[shark](../../index.md) / [shark](../index.md) / [LibraryLeak](index.md) / [retainedHeapByteSize](./retained-heap-byte-size.md)
+
+# retainedHeapByteSize
+
+`val retainedHeapByteSize: `[`Int`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)`?`
+
+Overrides [Leak.retainedHeapByteSize](../-leak/retained-heap-byte-size.md)
+
+The number of bytes which would be freed if all references to the leaking object were
+released. Null if the retained heap size was not computed.
+
diff --git a/docs/api/shark/shark/-object-inspector/index.md b/docs/api/shark/shark/-object-inspector/index.md
new file mode 100644
index 00000000..215974b8
--- /dev/null
+++ b/docs/api/shark/shark/-object-inspector/index.md
@@ -0,0 +1,31 @@
+[shark](../../index.md) / [shark](../index.md) / [ObjectInspector](./index.md)
+
+# ObjectInspector
+
+`interface ObjectInspector`
+
+Provides LeakCanary with insights about objects (classes, instances and arrays) found in the
+heap. [inspect](inspect.md) will be called for each object that LeakCanary wants to know more about.
+The implementation can then use the provided [ObjectReporter](../-object-reporter/index.md) to provide insights for that
+object.
+
+You can create a [ObjectInspector](./index.md) from a lambda by calling [invoke](invoke.md).
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `abstract fun inspect(reporter: `[`ObjectReporter`](../-object-reporter/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+
+### Companion Object Functions
+
+| Name | Summary |
+|---|---|
+| [invoke](invoke.md) | `operator fun invoke(block: (`[`ObjectReporter`](../-object-reporter/index.md)`) -> `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)`): `[`ObjectInspector`](./index.md)<br>Utility function to create a [ObjectInspector](./index.md) from the passed in [block](invoke.md#shark.ObjectInspector.Companion$invoke(kotlin.Function1((shark.ObjectReporter, kotlin.Unit)))/block) lambda instead of using the anonymous `object : OnHeapAnalyzedListener` syntax. |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [AppSingletonInspector](../-app-singleton-inspector/index.md) | `class AppSingletonInspector : `[`ObjectInspector`](./index.md)<br>Inspector that automatically marks instances of the provided class names as not leaking because they're app wide singletons. |
+| [ObjectInspectors](../-object-inspectors/index.md) | `enum class ObjectInspectors : `[`ObjectInspector`](./index.md)<br>A set of default [ObjectInspector](./index.md)s that knows about common JDK objects. |
diff --git a/docs/api/shark/shark/-object-inspector/inspect.md b/docs/api/shark/shark/-object-inspector/inspect.md
new file mode 100644
index 00000000..fd80f814
--- /dev/null
+++ b/docs/api/shark/shark/-object-inspector/inspect.md
@@ -0,0 +1,10 @@
+[shark](../../index.md) / [shark](../index.md) / [ObjectInspector](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`abstract fun inspect(reporter: `[`ObjectReporter`](../-object-reporter/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+**See Also**
+
+[ObjectInspector](index.md)
+
diff --git a/docs/api/shark/shark/-object-inspector/invoke.md b/docs/api/shark/shark/-object-inspector/invoke.md
new file mode 100644
index 00000000..93427424
--- /dev/null
+++ b/docs/api/shark/shark/-object-inspector/invoke.md
@@ -0,0 +1,17 @@
+[shark](../../index.md) / [shark](../index.md) / [ObjectInspector](index.md) / [invoke](./invoke.md)
+
+# invoke
+
+`inline operator fun invoke(crossinline block: (`[`ObjectReporter`](../-object-reporter/index.md)`) -> `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)`): `[`ObjectInspector`](index.md)
+
+Utility function to create a [ObjectInspector](index.md) from the passed in [block](invoke.md#shark.ObjectInspector.Companion$invoke(kotlin.Function1((shark.ObjectReporter, kotlin.Unit)))/block) lambda instead of
+using the anonymous `object : OnHeapAnalyzedListener` syntax.
+
+Usage:
+
+``` kotlin
+val inspector = ObjectInspector { reporter ->
+
+}
+```
+
diff --git a/docs/api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/index.md b/docs/api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/index.md
new file mode 100644
index 00000000..7b8c805d
--- /dev/null
+++ b/docs/api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/index.md
@@ -0,0 +1,11 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ObjectInspectors](../index.md) / [ANONYMOUS_CLASS](./index.md)
+
+# ANONYMOUS_CLASS
+
+`ANONYMOUS_CLASS`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: `[`ObjectReporter`](../../-object-reporter/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/inspect.md b/docs/api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/inspect.md
new file mode 100644
index 00000000..fafca4eb
--- /dev/null
+++ b/docs/api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/inspect.md
@@ -0,0 +1,12 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ObjectInspectors](../index.md) / [ANONYMOUS_CLASS](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: `[`ObjectReporter`](../../-object-reporter/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Overrides [ObjectInspector.inspect](../../-object-inspector/inspect.md)
+
+**See Also**
+
+[ObjectInspector](../../-object-inspector/index.md)
+
diff --git a/docs/api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/index.md b/docs/api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/index.md
new file mode 100644
index 00000000..95ccad96
--- /dev/null
+++ b/docs/api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/index.md
@@ -0,0 +1,11 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ObjectInspectors](../index.md) / [CLASSLOADER](./index.md)
+
+# CLASSLOADER
+
+`CLASSLOADER`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: `[`ObjectReporter`](../../-object-reporter/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/inspect.md b/docs/api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/inspect.md
new file mode 100644
index 00000000..733bf9f3
--- /dev/null
+++ b/docs/api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/inspect.md
@@ -0,0 +1,12 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ObjectInspectors](../index.md) / [CLASSLOADER](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: `[`ObjectReporter`](../../-object-reporter/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Overrides [ObjectInspector.inspect](../../-object-inspector/inspect.md)
+
+**See Also**
+
+[ObjectInspector](../../-object-inspector/index.md)
+
diff --git a/docs/api/shark/shark/-object-inspectors/-c-l-a-s-s/index.md b/docs/api/shark/shark/-object-inspectors/-c-l-a-s-s/index.md
new file mode 100644
index 00000000..55df283a
--- /dev/null
+++ b/docs/api/shark/shark/-object-inspectors/-c-l-a-s-s/index.md
@@ -0,0 +1,11 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ObjectInspectors](../index.md) / [CLASS](./index.md)
+
+# CLASS
+
+`CLASS`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: `[`ObjectReporter`](../../-object-reporter/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark/shark/-object-inspectors/-c-l-a-s-s/inspect.md b/docs/api/shark/shark/-object-inspectors/-c-l-a-s-s/inspect.md
new file mode 100644
index 00000000..540aeabf
--- /dev/null
+++ b/docs/api/shark/shark/-object-inspectors/-c-l-a-s-s/inspect.md
@@ -0,0 +1,12 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ObjectInspectors](../index.md) / [CLASS](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: `[`ObjectReporter`](../../-object-reporter/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Overrides [ObjectInspector.inspect](../../-object-inspector/inspect.md)
+
+**See Also**
+
+[ObjectInspector](../../-object-inspector/index.md)
+
diff --git a/docs/api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/index.md b/docs/api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/index.md
new file mode 100644
index 00000000..420027b4
--- /dev/null
+++ b/docs/api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/index.md
@@ -0,0 +1,11 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ObjectInspectors](../index.md) / [KEYED_WEAK_REFERENCE](./index.md)
+
+# KEYED_WEAK_REFERENCE
+
+`KEYED_WEAK_REFERENCE`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: `[`ObjectReporter`](../../-object-reporter/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/inspect.md b/docs/api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/inspect.md
new file mode 100644
index 00000000..5a6c5907
--- /dev/null
+++ b/docs/api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/inspect.md
@@ -0,0 +1,12 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ObjectInspectors](../index.md) / [KEYED_WEAK_REFERENCE](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: `[`ObjectReporter`](../../-object-reporter/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Overrides [ObjectInspector.inspect](../../-object-inspector/inspect.md)
+
+**See Also**
+
+[ObjectInspector](../../-object-inspector/index.md)
+
diff --git a/docs/api/shark/shark/-object-inspectors/-t-h-r-e-a-d/index.md b/docs/api/shark/shark/-object-inspectors/-t-h-r-e-a-d/index.md
new file mode 100644
index 00000000..20f7b733
--- /dev/null
+++ b/docs/api/shark/shark/-object-inspectors/-t-h-r-e-a-d/index.md
@@ -0,0 +1,11 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ObjectInspectors](../index.md) / [THREAD](./index.md)
+
+# THREAD
+
+`THREAD`
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](inspect.md) | `fun inspect(reporter: `[`ObjectReporter`](../../-object-reporter/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
diff --git a/docs/api/shark/shark/-object-inspectors/-t-h-r-e-a-d/inspect.md b/docs/api/shark/shark/-object-inspectors/-t-h-r-e-a-d/inspect.md
new file mode 100644
index 00000000..593c67a8
--- /dev/null
+++ b/docs/api/shark/shark/-object-inspectors/-t-h-r-e-a-d/inspect.md
@@ -0,0 +1,12 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ObjectInspectors](../index.md) / [THREAD](index.md) / [inspect](./inspect.md)
+
+# inspect
+
+`fun inspect(reporter: `[`ObjectReporter`](../../-object-reporter/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Overrides [ObjectInspector.inspect](../../-object-inspector/inspect.md)
+
+**See Also**
+
+[ObjectInspector](../../-object-inspector/index.md)
+
diff --git a/docs/api/shark/shark/-object-inspectors/index.md b/docs/api/shark/shark/-object-inspectors/index.md
new file mode 100644
index 00000000..3b20a78d
--- /dev/null
+++ b/docs/api/shark/shark/-object-inspectors/index.md
@@ -0,0 +1,29 @@
+[shark](../../index.md) / [shark](../index.md) / [ObjectInspectors](./index.md)
+
+# ObjectInspectors
+
+`enum class ObjectInspectors : `[`ObjectInspector`](../-object-inspector/index.md)
+
+A set of default [ObjectInspector](../-object-inspector/index.md)s that knows about common JDK objects.
+
+### Enum Values
+
+| Name | Summary |
+|---|---|
+| [KEYED_WEAK_REFERENCE](-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/index.md) |  |
+| [CLASSLOADER](-c-l-a-s-s-l-o-a-d-e-r/index.md) |  |
+| [CLASS](-c-l-a-s-s/index.md) |  |
+| [ANONYMOUS_CLASS](-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/index.md) |  |
+| [THREAD](-t-h-r-e-a-d/index.md) |  |
+
+### Inherited Functions
+
+| Name | Summary |
+|---|---|
+| [inspect](../-object-inspector/inspect.md) | `abstract fun inspect(reporter: `[`ObjectReporter`](../-object-reporter/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+
+### Companion Object Properties
+
+| Name | Summary |
+|---|---|
+| [jdkDefaults](jdk-defaults.md) | `val jdkDefaults: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`ObjectInspector`](../-object-inspector/index.md)`>` |
diff --git a/docs/api/shark/shark/-object-inspectors/jdk-defaults.md b/docs/api/shark/shark/-object-inspectors/jdk-defaults.md
new file mode 100644
index 00000000..3fe8fa7d
--- /dev/null
+++ b/docs/api/shark/shark/-object-inspectors/jdk-defaults.md
@@ -0,0 +1,10 @@
+[shark](../../index.md) / [shark](../index.md) / [ObjectInspectors](index.md) / [jdkDefaults](./jdk-defaults.md)
+
+# jdkDefaults
+
+`val jdkDefaults: `[`List`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)`<`[`ObjectInspector`](../-object-inspector/index.md)`>`
+
+**See Also**
+
+[ObjectInspectors](index.md)
+
diff --git a/docs/api/shark/shark/-object-reporter/-init-.md b/docs/api/shark/shark/-object-reporter/-init-.md
new file mode 100644
index 00000000..f23eec3a
--- /dev/null
+++ b/docs/api/shark/shark/-object-reporter/-init-.md
@@ -0,0 +1,12 @@
+[shark](../../index.md) / [shark](../index.md) / [ObjectReporter](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`ObjectReporter(heapObject: HeapObject)`
+
+Enables [ObjectInspector](../-object-inspector/index.md) implementations to provide insights on [heapObject](heap-object.md), which is
+an object (class, instance or array) found in the heap.
+
+A given [ObjectReporter](index.md) only maps to one object in the heap, but is shared to many
+[ObjectInspector](../-object-inspector/index.md) implementations and accumulates insights.
+
diff --git a/docs/api/shark/shark/-object-reporter/heap-object.md b/docs/api/shark/shark/-object-reporter/heap-object.md
new file mode 100644
index 00000000..7d64bc62
--- /dev/null
+++ b/docs/api/shark/shark/-object-reporter/heap-object.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [ObjectReporter](index.md) / [heapObject](./heap-object.md)
+
+# heapObject
+
+`val heapObject: HeapObject`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-object-reporter/index.md b/docs/api/shark/shark/-object-reporter/index.md
new file mode 100644
index 00000000..c5ab1402
--- /dev/null
+++ b/docs/api/shark/shark/-object-reporter/index.md
@@ -0,0 +1,33 @@
+[shark](../../index.md) / [shark](../index.md) / [ObjectReporter](./index.md)
+
+# ObjectReporter
+
+`class ObjectReporter`
+
+Enables [ObjectInspector](../-object-inspector/index.md) implementations to provide insights on [heapObject](heap-object.md), which is
+an object (class, instance or array) found in the heap.
+
+A given [ObjectReporter](./index.md) only maps to one object in the heap, but is shared to many
+[ObjectInspector](../-object-inspector/index.md) implementations and accumulates insights.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `ObjectReporter(heapObject: HeapObject)`<br>Enables [ObjectInspector](../-object-inspector/index.md) implementations to provide insights on [heapObject](heap-object.md), which is an object (class, instance or array) found in the heap. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [heapObject](heap-object.md) | `val heapObject: HeapObject` |
+| [labels](labels.md) | `val labels: `[`LinkedHashSet`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-linked-hash-set/index.html)`<`[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`>`<br>Labels that will be visible on the corresponding [heapObject](heap-object.md) in the leak trace. |
+| [leakingReasons](leaking-reasons.md) | `val leakingReasons: `[`MutableSet`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-set/index.html)`<`[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`>`<br>Reasons for which this object is expected to be unreachable (ie it's leaking). |
+| [likelyLeakingReasons](likely-leaking-reasons.md) | `val likelyLeakingReasons: `[`MutableSet`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-set/index.html)`<`[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`>` |
+| [notLeakingReasons](not-leaking-reasons.md) | `val notLeakingReasons: `[`MutableSet`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-set/index.html)`<`[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`>`<br>Reasons for which this object is expected to be reachable (ie it's not leaking). |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [whenInstanceOf](when-instance-of.md) | `fun whenInstanceOf(expectedClass: `[`KClass`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html)`<out `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`>, block: `[`ObjectReporter`](./index.md)`.(HeapInstance) -> `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Runs [block](when-instance-of.md#shark.ObjectReporter$whenInstanceOf(kotlin.reflect.KClass((kotlin.Any)), kotlin.Function2((shark.ObjectReporter, shark.HeapObject.HeapInstance, kotlin.Unit)))/block) if [ObjectReporter.heapObject](heap-object.md) is an instance of [expectedClass](when-instance-of.md#shark.ObjectReporter$whenInstanceOf(kotlin.reflect.KClass((kotlin.Any)), kotlin.Function2((shark.ObjectReporter, shark.HeapObject.HeapInstance, kotlin.Unit)))/expectedClass).`fun whenInstanceOf(expectedClassName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, block: `[`ObjectReporter`](./index.md)`.(HeapInstance) -> `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)<br>Runs [block](when-instance-of.md#shark.ObjectReporter$whenInstanceOf(kotlin.String, kotlin.Function2((shark.ObjectReporter, shark.HeapObject.HeapInstance, kotlin.Unit)))/block) if [ObjectReporter.heapObject](heap-object.md) is an instance of [expectedClassName](when-instance-of.md#shark.ObjectReporter$whenInstanceOf(kotlin.String, kotlin.Function2((shark.ObjectReporter, shark.HeapObject.HeapInstance, kotlin.Unit)))/expectedClassName). |
diff --git a/docs/api/shark/shark/-object-reporter/labels.md b/docs/api/shark/shark/-object-reporter/labels.md
new file mode 100644
index 00000000..8cda5947
--- /dev/null
+++ b/docs/api/shark/shark/-object-reporter/labels.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [ObjectReporter](index.md) / [labels](./labels.md)
+
+# labels
+
+`val labels: `[`LinkedHashSet`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-linked-hash-set/index.html)`<`[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`>`
+
+Labels that will be visible on the corresponding [heapObject](heap-object.md) in the leak trace.
+
diff --git a/docs/api/shark/shark/-object-reporter/leaking-reasons.md b/docs/api/shark/shark/-object-reporter/leaking-reasons.md
new file mode 100644
index 00000000..1069267a
--- /dev/null
+++ b/docs/api/shark/shark/-object-reporter/leaking-reasons.md
@@ -0,0 +1,12 @@
+[shark](../../index.md) / [shark](../index.md) / [ObjectReporter](index.md) / [leakingReasons](./leaking-reasons.md)
+
+# leakingReasons
+
+`val leakingReasons: `[`MutableSet`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-set/index.html)`<`[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`>`
+
+Reasons for which this object is expected to be unreachable (ie it's leaking).
+
+Only add reasons to this if you're 100% sure this object is leaking, otherwise add reasons to
+[likelyLeakingReasons](likely-leaking-reasons.md). The difference is that objects that are "likely leaking" are not
+considered to be leaking objects on which LeakCanary should compute the leak trace.
+
diff --git a/docs/api/shark/shark/-object-reporter/likely-leaking-reasons.md b/docs/api/shark/shark/-object-reporter/likely-leaking-reasons.md
new file mode 100644
index 00000000..115185ab
--- /dev/null
+++ b/docs/api/shark/shark/-object-reporter/likely-leaking-reasons.md
@@ -0,0 +1,10 @@
+[shark](../../index.md) / [shark](../index.md) / [ObjectReporter](index.md) / [likelyLeakingReasons](./likely-leaking-reasons.md)
+
+# likelyLeakingReasons
+
+`val likelyLeakingReasons: `[`MutableSet`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-set/index.html)`<`[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`>`
+
+**See Also**
+
+[leakingReasons](leaking-reasons.md)
+
diff --git a/docs/api/shark/shark/-object-reporter/not-leaking-reasons.md b/docs/api/shark/shark/-object-reporter/not-leaking-reasons.md
new file mode 100644
index 00000000..080471d3
--- /dev/null
+++ b/docs/api/shark/shark/-object-reporter/not-leaking-reasons.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [ObjectReporter](index.md) / [notLeakingReasons](./not-leaking-reasons.md)
+
+# notLeakingReasons
+
+`val notLeakingReasons: `[`MutableSet`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-set/index.html)`<`[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`>`
+
+Reasons for which this object is expected to be reachable (ie it's not leaking).
+
diff --git a/docs/api/shark/shark/-object-reporter/when-instance-of.md b/docs/api/shark/shark/-object-reporter/when-instance-of.md
new file mode 100644
index 00000000..f0412327
--- /dev/null
+++ b/docs/api/shark/shark/-object-reporter/when-instance-of.md
@@ -0,0 +1,12 @@
+[shark](../../index.md) / [shark](../index.md) / [ObjectReporter](index.md) / [whenInstanceOf](./when-instance-of.md)
+
+# whenInstanceOf
+
+`fun whenInstanceOf(expectedClass: `[`KClass`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html)`<out `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)`>, block: `[`ObjectReporter`](index.md)`.(HeapInstance) -> `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Runs [block](when-instance-of.md#shark.ObjectReporter$whenInstanceOf(kotlin.reflect.KClass((kotlin.Any)), kotlin.Function2((shark.ObjectReporter, shark.HeapObject.HeapInstance, kotlin.Unit)))/block) if [ObjectReporter.heapObject](heap-object.md) is an instance of [expectedClass](when-instance-of.md#shark.ObjectReporter$whenInstanceOf(kotlin.reflect.KClass((kotlin.Any)), kotlin.Function2((shark.ObjectReporter, shark.HeapObject.HeapInstance, kotlin.Unit)))/expectedClass).
+
+`fun whenInstanceOf(expectedClassName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, block: `[`ObjectReporter`](index.md)`.(HeapInstance) -> `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
+
+Runs [block](when-instance-of.md#shark.ObjectReporter$whenInstanceOf(kotlin.String, kotlin.Function2((shark.ObjectReporter, shark.HeapObject.HeapInstance, kotlin.Unit)))/block) if [ObjectReporter.heapObject](heap-object.md) is an instance of [expectedClassName](when-instance-of.md#shark.ObjectReporter$whenInstanceOf(kotlin.String, kotlin.Function2((shark.ObjectReporter, shark.HeapObject.HeapInstance, kotlin.Unit)))/expectedClassName).
+
diff --git a/docs/api/shark/shark/-on-analysis-progress-listener/-n-o_-o-p.md b/docs/api/shark/shark/-on-analysis-progress-listener/-n-o_-o-p.md
new file mode 100644
index 00000000..eba38bb0
--- /dev/null
+++ b/docs/api/shark/shark/-on-analysis-progress-listener/-n-o_-o-p.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [OnAnalysisProgressListener](index.md) / [NO_OP](./-n-o_-o-p.md)
+
+# NO_OP
+
+`val NO_OP: `[`OnAnalysisProgressListener`](index.md)
+
+A no-op [OnAnalysisProgressListener](index.md)
+
diff --git a/docs/api/shark/shark/-on-analysis-progress-listener/-step/-b-u-i-l-d-i-n-g_-l-e-a-k_-t-r-a-c-e-s.md b/docs/api/shark/shark/-on-analysis-progress-listener/-step/-b-u-i-l-d-i-n-g_-l-e-a-k_-t-r-a-c-e-s.md
new file mode 100644
index 00000000..f1b21e21
--- /dev/null
+++ b/docs/api/shark/shark/-on-analysis-progress-listener/-step/-b-u-i-l-d-i-n-g_-l-e-a-k_-t-r-a-c-e-s.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [OnAnalysisProgressListener](../index.md) / [Step](index.md) / [BUILDING_LEAK_TRACES](./-b-u-i-l-d-i-n-g_-l-e-a-k_-t-r-a-c-e-s.md)
+
+# BUILDING_LEAK_TRACES
+
+`BUILDING_LEAK_TRACES`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-n-a-t-i-v-e_-r-e-t-a-i-n-e-d_-s-i-z-e.md b/docs/api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-n-a-t-i-v-e_-r-e-t-a-i-n-e-d_-s-i-z-e.md
new file mode 100644
index 00000000..db43067a
--- /dev/null
+++ b/docs/api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-n-a-t-i-v-e_-r-e-t-a-i-n-e-d_-s-i-z-e.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [OnAnalysisProgressListener](../index.md) / [Step](index.md) / [COMPUTING_NATIVE_RETAINED_SIZE](./-c-o-m-p-u-t-i-n-g_-n-a-t-i-v-e_-r-e-t-a-i-n-e-d_-s-i-z-e.md)
+
+# COMPUTING_NATIVE_RETAINED_SIZE
+
+`COMPUTING_NATIVE_RETAINED_SIZE`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-r-e-t-a-i-n-e-d_-s-i-z-e.md b/docs/api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-r-e-t-a-i-n-e-d_-s-i-z-e.md
new file mode 100644
index 00000000..b2802554
--- /dev/null
+++ b/docs/api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-r-e-t-a-i-n-e-d_-s-i-z-e.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [OnAnalysisProgressListener](../index.md) / [Step](index.md) / [COMPUTING_RETAINED_SIZE](./-c-o-m-p-u-t-i-n-g_-r-e-t-a-i-n-e-d_-s-i-z-e.md)
+
+# COMPUTING_RETAINED_SIZE
+
+`COMPUTING_RETAINED_SIZE`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-d-o-m-i-n-a-t-o-r-s.md b/docs/api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-d-o-m-i-n-a-t-o-r-s.md
new file mode 100644
index 00000000..3215bf55
--- /dev/null
+++ b/docs/api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-d-o-m-i-n-a-t-o-r-s.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [OnAnalysisProgressListener](../index.md) / [Step](index.md) / [FINDING_DOMINATORS](./-f-i-n-d-i-n-g_-d-o-m-i-n-a-t-o-r-s.md)
+
+# FINDING_DOMINATORS
+
+`FINDING_DOMINATORS`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-l-e-a-k-i-n-g_-i-n-s-t-a-n-c-e-s.md b/docs/api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-l-e-a-k-i-n-g_-i-n-s-t-a-n-c-e-s.md
new file mode 100644
index 00000000..7f76a298
--- /dev/null
+++ b/docs/api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-l-e-a-k-i-n-g_-i-n-s-t-a-n-c-e-s.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [OnAnalysisProgressListener](../index.md) / [Step](index.md) / [FINDING_LEAKING_INSTANCES](./-f-i-n-d-i-n-g_-l-e-a-k-i-n-g_-i-n-s-t-a-n-c-e-s.md)
+
+# FINDING_LEAKING_INSTANCES
+
+`FINDING_LEAKING_INSTANCES`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-p-a-t-h-s_-t-o_-l-e-a-k-i-n-g_-i-n-s-t-a-n-c-e-s.md b/docs/api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-p-a-t-h-s_-t-o_-l-e-a-k-i-n-g_-i-n-s-t-a-n-c-e-s.md
new file mode 100644
index 00000000..6c80af56
--- /dev/null
+++ b/docs/api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-p-a-t-h-s_-t-o_-l-e-a-k-i-n-g_-i-n-s-t-a-n-c-e-s.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [OnAnalysisProgressListener](../index.md) / [Step](index.md) / [FINDING_PATHS_TO_LEAKING_INSTANCES](./-f-i-n-d-i-n-g_-p-a-t-h-s_-t-o_-l-e-a-k-i-n-g_-i-n-s-t-a-n-c-e-s.md)
+
+# FINDING_PATHS_TO_LEAKING_INSTANCES
+
+`FINDING_PATHS_TO_LEAKING_INSTANCES`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-on-analysis-progress-listener/-step/-p-a-r-s-i-n-g_-h-e-a-p_-d-u-m-p.md b/docs/api/shark/shark/-on-analysis-progress-listener/-step/-p-a-r-s-i-n-g_-h-e-a-p_-d-u-m-p.md
new file mode 100644
index 00000000..b0fbf7df
--- /dev/null
+++ b/docs/api/shark/shark/-on-analysis-progress-listener/-step/-p-a-r-s-i-n-g_-h-e-a-p_-d-u-m-p.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [OnAnalysisProgressListener](../index.md) / [Step](index.md) / [PARSING_HEAP_DUMP](./-p-a-r-s-i-n-g_-h-e-a-p_-d-u-m-p.md)
+
+# PARSING_HEAP_DUMP
+
+`PARSING_HEAP_DUMP`
\ No newline at end of file
diff --git a/docs/api/shark/shark/-on-analysis-progress-listener/-step/index.md b/docs/api/shark/shark/-on-analysis-progress-listener/-step/index.md
new file mode 100644
index 00000000..92c3173e
--- /dev/null
+++ b/docs/api/shark/shark/-on-analysis-progress-listener/-step/index.md
@@ -0,0 +1,17 @@
+[shark](../../../index.md) / [shark](../../index.md) / [OnAnalysisProgressListener](../index.md) / [Step](./index.md)
+
+# Step
+
+`enum class Step`
+
+### Enum Values
+
+| Name | Summary |
+|---|---|
+| [PARSING_HEAP_DUMP](-p-a-r-s-i-n-g_-h-e-a-p_-d-u-m-p.md) |  |
+| [FINDING_LEAKING_INSTANCES](-f-i-n-d-i-n-g_-l-e-a-k-i-n-g_-i-n-s-t-a-n-c-e-s.md) |  |
+| [FINDING_PATHS_TO_LEAKING_INSTANCES](-f-i-n-d-i-n-g_-p-a-t-h-s_-t-o_-l-e-a-k-i-n-g_-i-n-s-t-a-n-c-e-s.md) |  |
+| [FINDING_DOMINATORS](-f-i-n-d-i-n-g_-d-o-m-i-n-a-t-o-r-s.md) |  |
+| [COMPUTING_NATIVE_RETAINED_SIZE](-c-o-m-p-u-t-i-n-g_-n-a-t-i-v-e_-r-e-t-a-i-n-e-d_-s-i-z-e.md) |  |
+| [COMPUTING_RETAINED_SIZE](-c-o-m-p-u-t-i-n-g_-r-e-t-a-i-n-e-d_-s-i-z-e.md) |  |
+| [BUILDING_LEAK_TRACES](-b-u-i-l-d-i-n-g_-l-e-a-k_-t-r-a-c-e-s.md) |  |
diff --git a/docs/api/shark/shark/-on-analysis-progress-listener/index.md b/docs/api/shark/shark/-on-analysis-progress-listener/index.md
new file mode 100644
index 00000000..ebc5b9bd
--- /dev/null
+++ b/docs/api/shark/shark/-on-analysis-progress-listener/index.md
@@ -0,0 +1,31 @@
+[shark](../../index.md) / [shark](../index.md) / [OnAnalysisProgressListener](./index.md)
+
+# OnAnalysisProgressListener
+
+`interface OnAnalysisProgressListener`
+
+Reports progress from the [HeapAnalyzer](../-heap-analyzer/index.md) as they occur, as [Step](-step/index.md) values.
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [Step](-step/index.md) | `enum class Step` |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [onAnalysisProgress](on-analysis-progress.md) | `abstract fun onAnalysisProgress(step: `[`OnAnalysisProgressListener.Step`](-step/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) |
+
+### Companion Object Properties
+
+| Name | Summary |
+|---|---|
+| [NO_OP](-n-o_-o-p.md) | `val NO_OP: `[`OnAnalysisProgressListener`](./index.md)<br>A no-op [OnAnalysisProgressListener](./index.md) |
+
+### Companion Object Functions
+
+| Name | Summary |
+|---|---|
+| [invoke](invoke.md) | `operator fun invoke(block: (`[`OnAnalysisProgressListener.Step`](-step/index.md)`) -> `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)`): `[`OnAnalysisProgressListener`](./index.md)<br>Utility function to create a [OnAnalysisProgressListener](./index.md) from the passed in [block](invoke.md#shark.OnAnalysisProgressListener.Companion$invoke(kotlin.Function1((shark.OnAnalysisProgressListener.Step, kotlin.Unit)))/block) lambda instead of using the anonymous `object : OnAnalysisProgressListener` syntax. |
diff --git a/docs/api/shark/shark/-on-analysis-progress-listener/invoke.md b/docs/api/shark/shark/-on-analysis-progress-listener/invoke.md
new file mode 100644
index 00000000..26152c80
--- /dev/null
+++ b/docs/api/shark/shark/-on-analysis-progress-listener/invoke.md
@@ -0,0 +1,17 @@
+[shark](../../index.md) / [shark](../index.md) / [OnAnalysisProgressListener](index.md) / [invoke](./invoke.md)
+
+# invoke
+
+`inline operator fun invoke(crossinline block: (`[`OnAnalysisProgressListener.Step`](-step/index.md)`) -> `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)`): `[`OnAnalysisProgressListener`](index.md)
+
+Utility function to create a [OnAnalysisProgressListener](index.md) from the passed in [block](invoke.md#shark.OnAnalysisProgressListener.Companion$invoke(kotlin.Function1((shark.OnAnalysisProgressListener.Step, kotlin.Unit)))/block) lambda
+instead of using the anonymous `object : OnAnalysisProgressListener` syntax.
+
+Usage:
+
+``` kotlin
+val listener = OnAnalysisProgressListener {
+
+}
+```
+
diff --git a/docs/api/shark/shark/-on-analysis-progress-listener/on-analysis-progress.md b/docs/api/shark/shark/-on-analysis-progress-listener/on-analysis-progress.md
new file mode 100644
index 00000000..a1cb5a9e
--- /dev/null
+++ b/docs/api/shark/shark/-on-analysis-progress-listener/on-analysis-progress.md
@@ -0,0 +1,5 @@
+[shark](../../index.md) / [shark](../index.md) / [OnAnalysisProgressListener](index.md) / [onAnalysisProgress](./on-analysis-progress.md)
+
+# onAnalysisProgress
+
+`abstract fun onAnalysisProgress(step: `[`OnAnalysisProgressListener.Step`](-step/index.md)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-reference-matcher/index.md b/docs/api/shark/shark/-reference-matcher/index.md
new file mode 100644
index 00000000..eddcc1e3
--- /dev/null
+++ b/docs/api/shark/shark/-reference-matcher/index.md
@@ -0,0 +1,21 @@
+[shark](../../index.md) / [shark](../index.md) / [ReferenceMatcher](./index.md)
+
+# ReferenceMatcher
+
+`sealed class ReferenceMatcher`
+
+Used to pattern match known patterns of references in the heap, either to ignore them
+([IgnoredReferenceMatcher](../-ignored-reference-matcher/index.md)) or to mark them as library leaks ([LibraryLeakReferenceMatcher](../-library-leak-reference-matcher/index.md)).
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [pattern](pattern.md) | `abstract val pattern: `[`ReferencePattern`](../-reference-pattern/index.md)<br>The pattern that references will be matched against. |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [IgnoredReferenceMatcher](../-ignored-reference-matcher/index.md) | `class IgnoredReferenceMatcher : `[`ReferenceMatcher`](./index.md)<br>[IgnoredReferenceMatcher](../-ignored-reference-matcher/index.md) should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. |
+| [LibraryLeakReferenceMatcher](../-library-leak-reference-matcher/index.md) | `data class LibraryLeakReferenceMatcher : `[`ReferenceMatcher`](./index.md)<br>[LibraryLeakReferenceMatcher](../-library-leak-reference-matcher/index.md) should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don't match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as [LibraryLeak](../-library-leak/index.md) instead of [ApplicationLeak](../-application-leak/index.md). |
diff --git a/docs/api/shark/shark/-reference-matcher/pattern.md b/docs/api/shark/shark/-reference-matcher/pattern.md
new file mode 100644
index 00000000..25b31f7e
--- /dev/null
+++ b/docs/api/shark/shark/-reference-matcher/pattern.md
@@ -0,0 +1,8 @@
+[shark](../../index.md) / [shark](../index.md) / [ReferenceMatcher](index.md) / [pattern](./pattern.md)
+
+# pattern
+
+`abstract val pattern: `[`ReferencePattern`](../-reference-pattern/index.md)
+
+The pattern that references will be matched against.
+
diff --git a/docs/api/shark/shark/-reference-pattern/-instance-field-pattern/-init-.md b/docs/api/shark/shark/-reference-pattern/-instance-field-pattern/-init-.md
new file mode 100644
index 00000000..523558a6
--- /dev/null
+++ b/docs/api/shark/shark/-reference-pattern/-instance-field-pattern/-init-.md
@@ -0,0 +1,13 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ReferencePattern](../index.md) / [InstanceFieldPattern](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`InstanceFieldPattern(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`)`
+
+Matches instances field references, identified by [className](class-name.md) and [fieldName](field-name.md).
+
+Note: If [fieldName](field-name.md) is declared in a superclass it will still match for subclasses.
+This is to support overriding of rules for specific cases. If two [ReferenceMatcher](../../-reference-matcher/index.md) match for
+the same [fieldName](field-name.md) but for different [className](class-name.md) in a class hierarchy, then the closest
+class in the hierarchy wins.
+
diff --git a/docs/api/shark/shark/-reference-pattern/-instance-field-pattern/class-name.md b/docs/api/shark/shark/-reference-pattern/-instance-field-pattern/class-name.md
new file mode 100644
index 00000000..fe141115
--- /dev/null
+++ b/docs/api/shark/shark/-reference-pattern/-instance-field-pattern/class-name.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ReferencePattern](../index.md) / [InstanceFieldPattern](index.md) / [className](./class-name.md)
+
+# className
+
+`val className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-reference-pattern/-instance-field-pattern/field-name.md b/docs/api/shark/shark/-reference-pattern/-instance-field-pattern/field-name.md
new file mode 100644
index 00000000..e981a572
--- /dev/null
+++ b/docs/api/shark/shark/-reference-pattern/-instance-field-pattern/field-name.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ReferencePattern](../index.md) / [InstanceFieldPattern](index.md) / [fieldName](./field-name.md)
+
+# fieldName
+
+`val fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-reference-pattern/-instance-field-pattern/index.md b/docs/api/shark/shark/-reference-pattern/-instance-field-pattern/index.md
new file mode 100644
index 00000000..a94bd1d1
--- /dev/null
+++ b/docs/api/shark/shark/-reference-pattern/-instance-field-pattern/index.md
@@ -0,0 +1,31 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ReferencePattern](../index.md) / [InstanceFieldPattern](./index.md)
+
+# InstanceFieldPattern
+
+`data class InstanceFieldPattern : `[`ReferencePattern`](../index.md)
+
+Matches instances field references, identified by [className](class-name.md) and [fieldName](field-name.md).
+
+Note: If [fieldName](field-name.md) is declared in a superclass it will still match for subclasses.
+This is to support overriding of rules for specific cases. If two [ReferenceMatcher](../../-reference-matcher/index.md) match for
+the same [fieldName](field-name.md) but for different [className](class-name.md) in a class hierarchy, then the closest
+class in the hierarchy wins.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `InstanceFieldPattern(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`)`<br>Matches instances field references, identified by [className](class-name.md) and [fieldName](field-name.md). |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [className](class-name.md) | `val className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+| [fieldName](field-name.md) | `val fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [toString](to-string.md) | `fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark/shark/-reference-pattern/-instance-field-pattern/to-string.md b/docs/api/shark/shark/-reference-pattern/-instance-field-pattern/to-string.md
new file mode 100644
index 00000000..c21325b7
--- /dev/null
+++ b/docs/api/shark/shark/-reference-pattern/-instance-field-pattern/to-string.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ReferencePattern](../index.md) / [InstanceFieldPattern](index.md) / [toString](./to-string.md)
+
+# toString
+
+`fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-reference-pattern/-java-local-pattern/-init-.md b/docs/api/shark/shark/-reference-pattern/-java-local-pattern/-init-.md
new file mode 100644
index 00000000..f9a29b4c
--- /dev/null
+++ b/docs/api/shark/shark/-reference-pattern/-java-local-pattern/-init-.md
@@ -0,0 +1,8 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ReferencePattern](../index.md) / [JavaLocalPattern](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`JavaLocalPattern(threadName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`)`
+
+Matches local references held in the stack of frames of a given thread, identified by its name.
+
diff --git a/docs/api/shark/shark/-reference-pattern/-java-local-pattern/index.md b/docs/api/shark/shark/-reference-pattern/-java-local-pattern/index.md
new file mode 100644
index 00000000..4f26e912
--- /dev/null
+++ b/docs/api/shark/shark/-reference-pattern/-java-local-pattern/index.md
@@ -0,0 +1,25 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ReferencePattern](../index.md) / [JavaLocalPattern](./index.md)
+
+# JavaLocalPattern
+
+`data class JavaLocalPattern : `[`ReferencePattern`](../index.md)
+
+Matches local references held in the stack of frames of a given thread, identified by its name.
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `JavaLocalPattern(threadName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`)`<br>Matches local references held in the stack of frames of a given thread, identified by its name. |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [threadName](thread-name.md) | `val threadName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [toString](to-string.md) | `fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark/shark/-reference-pattern/-java-local-pattern/thread-name.md b/docs/api/shark/shark/-reference-pattern/-java-local-pattern/thread-name.md
new file mode 100644
index 00000000..99e08b58
--- /dev/null
+++ b/docs/api/shark/shark/-reference-pattern/-java-local-pattern/thread-name.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ReferencePattern](../index.md) / [JavaLocalPattern](index.md) / [threadName](./thread-name.md)
+
+# threadName
+
+`val threadName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-reference-pattern/-java-local-pattern/to-string.md b/docs/api/shark/shark/-reference-pattern/-java-local-pattern/to-string.md
new file mode 100644
index 00000000..c11a2c15
--- /dev/null
+++ b/docs/api/shark/shark/-reference-pattern/-java-local-pattern/to-string.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ReferencePattern](../index.md) / [JavaLocalPattern](index.md) / [toString](./to-string.md)
+
+# toString
+
+`fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-reference-pattern/-static-field-pattern/-init-.md b/docs/api/shark/shark/-reference-pattern/-static-field-pattern/-init-.md
new file mode 100644
index 00000000..80129351
--- /dev/null
+++ b/docs/api/shark/shark/-reference-pattern/-static-field-pattern/-init-.md
@@ -0,0 +1,8 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ReferencePattern](../index.md) / [StaticFieldPattern](index.md) / [&lt;init&gt;](./-init-.md)
+
+# &lt;init&gt;
+
+`StaticFieldPattern(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`)`
+
+Matches static field references, identified by [className](class-name.md) and [fieldName](field-name.md).
+
diff --git a/docs/api/shark/shark/-reference-pattern/-static-field-pattern/class-name.md b/docs/api/shark/shark/-reference-pattern/-static-field-pattern/class-name.md
new file mode 100644
index 00000000..409b2e12
--- /dev/null
+++ b/docs/api/shark/shark/-reference-pattern/-static-field-pattern/class-name.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ReferencePattern](../index.md) / [StaticFieldPattern](index.md) / [className](./class-name.md)
+
+# className
+
+`val className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-reference-pattern/-static-field-pattern/field-name.md b/docs/api/shark/shark/-reference-pattern/-static-field-pattern/field-name.md
new file mode 100644
index 00000000..54025dd4
--- /dev/null
+++ b/docs/api/shark/shark/-reference-pattern/-static-field-pattern/field-name.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ReferencePattern](../index.md) / [StaticFieldPattern](index.md) / [fieldName](./field-name.md)
+
+# fieldName
+
+`val fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-reference-pattern/-static-field-pattern/index.md b/docs/api/shark/shark/-reference-pattern/-static-field-pattern/index.md
new file mode 100644
index 00000000..461b2100
--- /dev/null
+++ b/docs/api/shark/shark/-reference-pattern/-static-field-pattern/index.md
@@ -0,0 +1,26 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ReferencePattern](../index.md) / [StaticFieldPattern](./index.md)
+
+# StaticFieldPattern
+
+`data class StaticFieldPattern : `[`ReferencePattern`](../index.md)
+
+Matches static field references, identified by [className](class-name.md) and [fieldName](field-name.md).
+
+### Constructors
+
+| Name | Summary |
+|---|---|
+| [&lt;init&gt;](-init-.md) | `StaticFieldPattern(className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`, fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)`)`<br>Matches static field references, identified by [className](class-name.md) and [fieldName](field-name.md). |
+
+### Properties
+
+| Name | Summary |
+|---|---|
+| [className](class-name.md) | `val className: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+| [fieldName](field-name.md) | `val fieldName: `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
+
+### Functions
+
+| Name | Summary |
+|---|---|
+| [toString](to-string.md) | `fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) |
diff --git a/docs/api/shark/shark/-reference-pattern/-static-field-pattern/to-string.md b/docs/api/shark/shark/-reference-pattern/-static-field-pattern/to-string.md
new file mode 100644
index 00000000..9ecaf1c2
--- /dev/null
+++ b/docs/api/shark/shark/-reference-pattern/-static-field-pattern/to-string.md
@@ -0,0 +1,5 @@
+[shark](../../../index.md) / [shark](../../index.md) / [ReferencePattern](../index.md) / [StaticFieldPattern](index.md) / [toString](./to-string.md)
+
+# toString
+
+`fun toString(): `[`String`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)
\ No newline at end of file
diff --git a/docs/api/shark/shark/-reference-pattern/index.md b/docs/api/shark/shark/-reference-pattern/index.md
new file mode 100644
index 00000000..11cf754b
--- /dev/null
+++ b/docs/api/shark/shark/-reference-pattern/index.md
@@ -0,0 +1,23 @@
+[shark](../../index.md) / [shark](../index.md) / [ReferencePattern](./index.md)
+
+# ReferencePattern
+
+`sealed class ReferencePattern : `[`Serializable`](https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html)
+
+A pattern that will match references for a given [ReferenceMatcher](../-reference-matcher/index.md).
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [InstanceFieldPattern](-instance-field-pattern/index.md) | `data class InstanceFieldPattern : `[`ReferencePattern`](./index.md)<br>Matches instances field references, identified by [className](-instance-field-pattern/class-name.md) and [fieldName](-instance-field-pattern/field-name.md). |
+| [JavaLocalPattern](-java-local-pattern/index.md) | `data class JavaLocalPattern : `[`ReferencePattern`](./index.md)<br>Matches local references held in the stack of frames of a given thread, identified by its name. |
+| [StaticFieldPattern](-static-field-pattern/index.md) | `data class StaticFieldPattern : `[`ReferencePattern`](./index.md)<br>Matches static field references, identified by [className](-static-field-pattern/class-name.md) and [fieldName](-static-field-pattern/field-name.md). |
+
+### Inheritors
+
+| Name | Summary |
+|---|---|
+| [InstanceFieldPattern](-instance-field-pattern/index.md) | `data class InstanceFieldPattern : `[`ReferencePattern`](./index.md)<br>Matches instances field references, identified by [className](-instance-field-pattern/class-name.md) and [fieldName](-instance-field-pattern/field-name.md). |
+| [JavaLocalPattern](-java-local-pattern/index.md) | `data class JavaLocalPattern : `[`ReferencePattern`](./index.md)<br>Matches local references held in the stack of frames of a given thread, identified by its name. |
+| [StaticFieldPattern](-static-field-pattern/index.md) | `data class StaticFieldPattern : `[`ReferencePattern`](./index.md)<br>Matches static field references, identified by [className](-static-field-pattern/class-name.md) and [fieldName](-static-field-pattern/field-name.md). |
diff --git a/docs/api/shark/shark/index.md b/docs/api/shark/shark/index.md
new file mode 100644
index 00000000..6b2b2564
--- /dev/null
+++ b/docs/api/shark/shark/index.md
@@ -0,0 +1,34 @@
+[shark](../index.md) / [shark](./index.md)
+
+## Package shark
+
+### Types
+
+| Name | Summary |
+|---|---|
+| [ApplicationLeak](-application-leak/index.md) | `data class ApplicationLeak : `[`Leak`](-leak/index.md)<br>A leak found by [HeapAnalyzer](-heap-analyzer/index.md) in your application. |
+| [AppSingletonInspector](-app-singleton-inspector/index.md) | `class AppSingletonInspector : `[`ObjectInspector`](-object-inspector/index.md)<br>Inspector that automatically marks instances of the provided class names as not leaking because they're app wide singletons. |
+| [HeapAnalysis](-heap-analysis/index.md) | `sealed class HeapAnalysis : `[`Serializable`](https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html)<br>The result of an analysis performed by [HeapAnalyzer](-heap-analyzer/index.md), either a [HeapAnalysisSuccess](-heap-analysis-success/index.md) or a [HeapAnalysisFailure](-heap-analysis-failure/index.md). This class is serializable however there are no guarantees of forward compatibility. |
+| [HeapAnalysisFailure](-heap-analysis-failure/index.md) | `data class HeapAnalysisFailure : `[`HeapAnalysis`](-heap-analysis/index.md)<br>The analysis performed by [HeapAnalyzer](-heap-analyzer/index.md) did not complete successfully. |
+| [HeapAnalysisSuccess](-heap-analysis-success/index.md) | `data class HeapAnalysisSuccess : `[`HeapAnalysis`](-heap-analysis/index.md)<br>The result of a successful heap analysis performed by [HeapAnalyzer](-heap-analyzer/index.md). |
+| [HeapAnalyzer](-heap-analyzer/index.md) | `class HeapAnalyzer`<br>Analyzes heap dumps to look for leaks. |
+| [IgnoredReferenceMatcher](-ignored-reference-matcher/index.md) | `class IgnoredReferenceMatcher : `[`ReferenceMatcher`](-reference-matcher/index.md)<br>[IgnoredReferenceMatcher](-ignored-reference-matcher/index.md) should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. |
+| [Leak](-leak/index.md) | `sealed class Leak : `[`Serializable`](https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html)<br>A leak found by [HeapAnalyzer](-heap-analyzer/index.md), either an [ApplicationLeak](-application-leak/index.md) or a [LibraryLeak](-library-leak/index.md). |
+| [LeakNodeStatus](-leak-node-status/index.md) | `enum class LeakNodeStatus` |
+| [LeakReference](-leak-reference/index.md) | `data class LeakReference : `[`Serializable`](https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html)<br>A single field in a [LeakTraceElement](-leak-trace-element/index.md). |
+| [LeakTrace](-leak-trace/index.md) | `data class LeakTrace : `[`Serializable`](https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html)<br>A chain of references that constitute the shortest strong reference path from a GC root to the leaking object. Fixing the leak usually means breaking one of the references in that chain. |
+| [LeakTraceElement](-leak-trace-element/index.md) | `data class LeakTraceElement : `[`Serializable`](https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html) |
+| [LibraryLeak](-library-leak/index.md) | `data class LibraryLeak : `[`Leak`](-leak/index.md)<br>A leak found by [HeapAnalyzer](-heap-analyzer/index.md), where the only path to the leaking object required going through a reference matched by [pattern](-library-leak/pattern.md), as provided to a [LibraryLeakReferenceMatcher](-library-leak-reference-matcher/index.md) instance. This is a known leak in library code that is beyond your control. |
+| [LibraryLeakReferenceMatcher](-library-leak-reference-matcher/index.md) | `data class LibraryLeakReferenceMatcher : `[`ReferenceMatcher`](-reference-matcher/index.md)<br>[LibraryLeakReferenceMatcher](-library-leak-reference-matcher/index.md) should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don't match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as [LibraryLeak](-library-leak/index.md) instead of [ApplicationLeak](-application-leak/index.md). |
+| [ObjectInspector](-object-inspector/index.md) | `interface ObjectInspector`<br>Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. [inspect](-object-inspector/inspect.md) will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided [ObjectReporter](-object-reporter/index.md) to provide insights for that object. |
+| [ObjectInspectors](-object-inspectors/index.md) | `enum class ObjectInspectors : `[`ObjectInspector`](-object-inspector/index.md)<br>A set of default [ObjectInspector](-object-inspector/index.md)s that knows about common JDK objects. |
+| [ObjectReporter](-object-reporter/index.md) | `class ObjectReporter`<br>Enables [ObjectInspector](-object-inspector/index.md) implementations to provide insights on [heapObject](-object-reporter/heap-object.md), which is an object (class, instance or array) found in the heap. |
+| [OnAnalysisProgressListener](-on-analysis-progress-listener/index.md) | `interface OnAnalysisProgressListener`<br>Reports progress from the [HeapAnalyzer](-heap-analyzer/index.md) as they occur, as [Step](-on-analysis-progress-listener/-step/index.md) values. |
+| [ReferenceMatcher](-reference-matcher/index.md) | `sealed class ReferenceMatcher`<br>Used to pattern match known patterns of references in the heap, either to ignore them ([IgnoredReferenceMatcher](-ignored-reference-matcher/index.md)) or to mark them as library leaks ([LibraryLeakReferenceMatcher](-library-leak-reference-matcher/index.md)). |
+| [ReferencePattern](-reference-pattern/index.md) | `sealed class ReferencePattern : `[`Serializable`](https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html)<br>A pattern that will match references for a given [ReferenceMatcher](-reference-matcher/index.md). |
+
+### Exceptions
+
+| Name | Summary |
+|---|---|
+| [HeapAnalysisException](-heap-analysis-exception/index.md) | `class HeapAnalysisException : `[`RuntimeException`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-runtime-exception/index.html) |
diff --git a/docs/changelog.md b/docs/changelog.md
index 47d903d8..ca285bff 100644
--- a/docs/changelog.md
+++ b/docs/changelog.md
@@ -8,7 +8,7 @@ Now is a great time to adopt it and provide feedback before the stable release.
 
 * New standalone library! [Shark](shark.md) is the heap analyzer that powers LeakCanary 2, and it can run in any Java VM. It comes with a [CLI](shark.md#shark-cli): you can now run `shark-cli analyze-process com.example.myapp` from your computer.
 * New Heap Explorer directly on device! Open a Heap Analysis in LeakCanary, tap the options menu and select "Heap Explorer". This is still experimental and not very user friendly, contributions welcome!
-* **Large API rewrite** to improve usability. If you used the alpha with a customized configuration, there are breaking changes. Of note: LeakSentry became [AppWatcher](/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/), RefWatcher became [ObjectWatcher](/api/leakcanary-object-watcher/leakcanary/-object-watcher/), AndroidExcludedRefs became [AndroidReferenceMatchers](/api/shark-android/shark/-android-reference-matchers/), AnalysisResultListener became [OnHeapAnalyzedListener](/api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/), AndroidLeakTraceInspectors became [AndroidObjectInspectors](/api/shark-android/shark/-android-object-inspectors/).
+* **Large API rewrite** to improve usability. If you used the alpha with a customized configuration, there are breaking changes. Of note: LeakSentry became [AppWatcher](/leakcanary/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/), RefWatcher became [ObjectWatcher](/leakcanary/api/leakcanary-object-watcher/leakcanary/-object-watcher/), AndroidExcludedRefs became [AndroidReferenceMatchers](/leakcanary/api/shark-android/shark/-android-reference-matchers/), AnalysisResultListener became [OnHeapAnalyzedListener](/leakcanary/api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/), AndroidLeakTraceInspectors became [AndroidObjectInspectors](/leakcanary/api/shark-android/shark/-android-object-inspectors/).
 * The entire API surface is now documented and the documentation is available on this website: see the **LeakCanary API** tab at the top.
 * Removed the **dependency on Android X**. No more configuration issues! [#1462](https://github.com/square/leakcanary/issues/1462) 
 * Added **Proguard rules** for LeakCanary and ObjectWatcher. [#1500](https://github.com/square/leakcanary/pull/1500) 
diff --git a/docs/faq.md b/docs/faq.md
index 20c9a14d..ec251c50 100644
--- a/docs/faq.md
+++ b/docs/faq.md
@@ -2,7 +2,7 @@
 
 ## Can a leak be caused by the Android SDK?
 
-Yes. There are a number of known memory leaks that have been fixed over time in AOSP as well as in manufacturer implementations. When such a leak occurs, there is little you can do as an app developer to fix it. For that reason, LeakCanary has a built-in list of known Android leaks to ignore: [AndroidReferenceMatchers](/api/shark-android/shark/-android-reference-matchers/).
+Yes. There are a number of known memory leaks that have been fixed over time in AOSP as well as in manufacturer implementations. When such a leak occurs, there is little you can do as an app developer to fix it. For that reason, LeakCanary has a built-in list of known Android leaks to ignore: [AndroidReferenceMatchers](/leakcanary/api/shark-android/shark/-android-reference-matchers/).
 
 If you find a new one, please [create an issue](https://github.com/square/leakcanary/issues/new/choose) and follow these steps:
 
@@ -11,7 +11,7 @@ If you find a new one, please [create an issue](https://github.com/square/leakca
 3. Check if it happens on the latest version of Android, and otherwise use blame to find when it was fixed.
 4. If it's still happening, build a simple repro case.
 5. File an issue on [b.android.com](http://b.android.com) with the leak trace and the repro case.
-6. Create a PR in LeakCanary to update [AndroidReferenceMatchers](/api/shark-android/shark/-android-reference-matchers/). Optional: if you find a hack to clear that leak on previous versions of Android, feel free to document it.
+6. Create a PR in LeakCanary to update [AndroidReferenceMatchers](/leakcanary/api/shark-android/shark/-android-reference-matchers/). Optional: if you find a hack to clear that leak on previous versions of Android, feel free to document it.
 
 ## How do I share a leak trace?
 
diff --git a/docs/fundamentals.md b/docs/fundamentals.md
index 77f248f6..8a115ce2 100644
--- a/docs/fundamentals.md
+++ b/docs/fundamentals.md
@@ -113,7 +113,7 @@ At the top of the leak trace is a garbage-collection (GC) root. GC roots are spe
 is true)
 ```
 
-At the bottom of the leak trace is the leaking instance. This instance was passed to [AppWatcher.objectWatcher](/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/object-watcher/) to confirm it would be garbage collected, and it ended up not being garbage collected which triggered LeakCanary.
+At the bottom of the leak trace is the leaking instance. This instance was passed to [AppWatcher.objectWatcher](/leakcanary/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/object-watcher/) to confirm it would be garbage collected, and it ended up not being garbage collected which triggered LeakCanary.
 
 ### Chain of references
 
@@ -143,7 +143,7 @@ The chain of references from the GC root to the leaking instance is what is prev
     │    View.mWindowAttachCount=1
 ```
 
-LeakCanary runs heuristics to determine the lifecycle state of the nodes of the leak trace, and therefore whether they are leaking or not. For example, if a view has `View#mAttachInfo = null` and `mParent != null` then it is detached yet has a parent, so that view is probably leaking. In the leak trace, for each node you'll see `Leaking: YES / NO / UNKNOWN` with an explanation in parenthesis. LeakCanary can also surface extra information about the state of a node, e.g. `View.mWindowAttachCount=1`. LeakCanary comes with a set of default heuristics: [AndroidObjectInspectors](/api/shark-android/shark/-android-object-inspectors/). You can add your own heuristics by updating [LeakCanary.Config.objectInspectors](/api/leakcanary-android-core/leakcanary/-leak-canary/-config/object-inspectors/) (see the [recipe](recipes.md#identifying-leaking-objects-and-labeling-objects)).
+LeakCanary runs heuristics to determine the lifecycle state of the nodes of the leak trace, and therefore whether they are leaking or not. For example, if a view has `View#mAttachInfo = null` and `mParent != null` then it is detached yet has a parent, so that view is probably leaking. In the leak trace, for each node you'll see `Leaking: YES / NO / UNKNOWN` with an explanation in parenthesis. LeakCanary can also surface extra information about the state of a node, e.g. `View.mWindowAttachCount=1`. LeakCanary comes with a set of default heuristics: [AndroidObjectInspectors](/leakcanary/api/shark-android/shark/-android-object-inspectors/). You can add your own heuristics by updating [LeakCanary.Config.objectInspectors](/leakcanary/api/leakcanary-android-core/leakcanary/-leak-canary/-config/object-inspectors/) (see the [recipe](recipes.md#identifying-leaking-objects-and-labeling-objects)).
 
 ### Narrowing down the cause of a leak
 
diff --git a/docs/getting_started.md b/docs/getting_started.md
index 72eed82b..4bde7cd6 100644
--- a/docs/getting_started.md
+++ b/docs/getting_started.md
@@ -5,7 +5,7 @@ Add LeakCanary to `build.gradle`:
 ```groovy
 dependencies {
   // debugImplementation because LeakCanary should only run in debug builds.
-  debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-alpha-3'
+  debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-beta-1'
 }
 ```
 
diff --git a/docs/recipes.md b/docs/recipes.md
index 3c3c2503..50b5c94a 100644
--- a/docs/recipes.md
+++ b/docs/recipes.md
@@ -4,7 +4,7 @@ If you think a recipe might be missing or you're not sure that what you're tryin
 
 ## Watching objects with a lifecycle
 
-In your application, you may have other objects with a lifecycle, such as fragments, services, Dagger components, etc. Use [AppWatcher.objectWatcher](/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/object-watcher/) to watch instances that should be garbage collected:
+In your application, you may have other objects with a lifecycle, such as fragments, services, Dagger components, etc. Use [AppWatcher.objectWatcher](/leakcanary/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/object-watcher/) to watch instances that should be garbage collected:
 
 ```kotlin
 class MyService : Service {
@@ -20,13 +20,13 @@ class MyService : Service {
 
 ## Configuration
 
-To customize the detection of retained objects at runtime, update [AppWatcher.config](/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/config/):
+To customize the detection of retained objects at runtime, update [AppWatcher.config](/leakcanary/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/config/):
 
 ```
 AppWatcher.config = AppWatcher.config.copy(watchFragmentViews = false)
 ```
 
-To customize the heap dumping & analysis, update [LeakCanary.config](/api/leakcanary-android-core/leakcanary/-leak-canary/config/):
+To customize the heap dumping & analysis, update [LeakCanary.config](/leakcanary/api/leakcanary-android-core/leakcanary/-leak-canary/config/):
 
 ```
 LeakCanary.config = LeakCanary.config.copy(retainedVisibleThreshold = 3)
@@ -136,7 +136,7 @@ res/
 
 You can change the default behavior to upload the analysis result to a server of your choosing.
 
-Create a custom [OnHeapAnalyzedListener](/api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/) that delegates to [DefaultOnHeapAnalyzedListener](/api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/): 
+Create a custom [OnHeapAnalyzedListener](/leakcanary/api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/) that delegates to [DefaultOnHeapAnalyzedListener](/leakcanary/api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/): 
 
 ```kotlin
 class LeakUploader : OnHeapAnalyzedListener {
@@ -152,7 +152,7 @@ class LeakUploader : OnHeapAnalyzedListener {
 }
 ```
 
-Set [LeakCanary.config.onHeapAnalyzedListener](/api/leakcanary-android-core/leakcanary/-leak-canary/-config/on-heap-analyzed-listener/):
+Set [LeakCanary.config.onHeapAnalyzedListener](/leakcanary/api/leakcanary-android-core/leakcanary/-leak-canary/-config/on-heap-analyzed-listener/):
 
 ```kotlin
 class DebugExampleApplication : ExampleApplication() {
@@ -167,7 +167,7 @@ class DebugExampleApplication : ExampleApplication() {
 
 ## Matching known library leaks
 
-Set [LeakCanary.Config.referenceMatchers](/api/leakcanary-android-core/leakcanary/-leak-canary/-config/reference-matchers/) to a list that builds on top of [AndroidReferenceMatchers.appDefaults](/api/shark-android/shark/-android-reference-matchers/app-defaults/):
+Set [LeakCanary.Config.referenceMatchers](/leakcanary/api/leakcanary-android-core/leakcanary/-leak-canary/-config/reference-matchers/) to a list that builds on top of [AndroidReferenceMatchers.appDefaults](/leakcanary/api/shark-android/shark/-android-reference-matchers/app-defaults/):
 
 ```kotlin
 class DebugExampleApplication : ExampleApplication() {
diff --git a/docs/upgrading-to-leakcanary-2.0.md b/docs/upgrading-to-leakcanary-2.0.md
index 67d5d4c8..bad33fdc 100644
--- a/docs/upgrading-to-leakcanary-2.0.md
+++ b/docs/upgrading-to-leakcanary-2.0.md
@@ -79,7 +79,7 @@ val objectWatcher: ObjectWatcher = AppWatcher.objectWatcher
 
 ## Compile errors because RefWatcher is used in release code
 
-If you were using `RefWatcher` in non debug code, you now get a compile error because the no-op artifact is gone. [ObjectWatcher](/api/leakcanary-object-watcher/leakcanary/-object-watcher/) now lives in the `object-watcher` artifact, which is suitable for production. You have two options:
+If you were using `RefWatcher` in non debug code, you now get a compile error because the no-op artifact is gone. [ObjectWatcher](/leakcanary/api/leakcanary-object-watcher/leakcanary/-object-watcher/) now lives in the `object-watcher` artifact, which is suitable for production. You have two options:
 
 ### Option 1: Add `object-watcher-android` to release builds.
 
@@ -89,7 +89,7 @@ dependencies {
 }
 ```
 
-* It will automatically keep weak references to destroyed activities, fragments, and any instance you pass to [AppWatcher.objectWatcher](/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/object-watcher/).
+* It will automatically keep weak references to destroyed activities, fragments, and any instance you pass to [AppWatcher.objectWatcher](/leakcanary/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/object-watcher/).
 * It will not trigger heap dumps or anything else that LeakCanary does.
 * It's very little code and should have a no impact on your release app.
 * You can use it to count how many objects are retained, for example to add metadata to OutOfMemoryError crashes:
@@ -138,7 +138,7 @@ public class DebugExampleApplication extends ExampleApplication {
 
 ### Now
 
-AppWatcher is in charge of detecting retained objects. Its configuration can be updated at any time by replacing [AppWatcher.config](/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/config/):
+AppWatcher is in charge of detecting retained objects. Its configuration can be updated at any time by replacing [AppWatcher.config](/leakcanary/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/config/):
 
 ```kotlin
 class DebugExampleApplication : ExampleApplication() {
@@ -150,7 +150,7 @@ class DebugExampleApplication : ExampleApplication() {
 }
 ```
 
-LeakCanary is in charge of taking heap dumps and analyzing them. Its configuration can be updated at any time by replacing [LeakCanary.config](/api/leakcanary-android-core/leakcanary/-leak-canary/config/):
+LeakCanary is in charge of taking heap dumps and analyzing them. Its configuration can be updated at any time by replacing [LeakCanary.config](/leakcanary/api/leakcanary-android-core/leakcanary/-leak-canary/config/):
 
 ```kotlin
 disableLeakCanaryButton.setOnClickListener {
diff --git a/gradle.properties b/gradle.properties
index 176c24f4..fc790e98 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.squareup.leakcanary
-VERSION_NAME=2.0-alpha-4-SNAPSHOT
+VERSION_NAME=2.0-beta-2-SNAPSHOT
 
 POM_DESCRIPTION=Leak Canary
 
diff --git a/shark-android/src/test/java/shark/LegacyHprofTest.kt b/shark-android/src/test/java/shark/LegacyHprofTest.kt
index cba552da..f2a1278a 100644
--- a/shark-android/src/test/java/shark/LegacyHprofTest.kt
+++ b/shark-android/src/test/java/shark/LegacyHprofTest.kt
@@ -2,7 +2,6 @@ package shark
 
 import org.assertj.core.api.Assertions.assertThat
 import org.junit.Test
-import shark.LeakNodeStatus.LEAKING
 import shark.LegacyHprofTest.WRAPS_ACTIVITY.DESTROYED
 import shark.LegacyHprofTest.WRAPS_ACTIVITY.NOT_ACTIVITY
 import shark.LegacyHprofTest.WRAPS_ACTIVITY.NOT_DESTROYED
@@ -28,6 +27,12 @@ class LegacyHprofTest {
     assertThat(leak.leakTrace.elements[0].labels).contains("GC Root: System class")
   }
 
+  @Test fun gcRootReferencesUnknownObject() {
+    val analysis = analyzeHprof("gcroot_unknown_object.hprof")
+
+    assertThat(analysis.applicationLeaks).hasSize(2)
+  }
+
   @Test fun androidMStripped() {
     val stripper = HprofPrimitiveArrayStripper()
     val sourceHprof = fileFromResources("leak_asynctask_m.hprof")
diff --git a/shark-android/src/test/resources/gcroot_unknown_object.hprof b/shark-android/src/test/resources/gcroot_unknown_object.hprof
new file mode 100755
index 00000000..f08f4545
Binary files /dev/null and b/shark-android/src/test/resources/gcroot_unknown_object.hprof differ
diff --git a/shark-graph/src/main/java/shark/HeapGraph.kt b/shark-graph/src/main/java/shark/HeapGraph.kt
index 82b83966..1b64a971 100644
--- a/shark-graph/src/main/java/shark/HeapGraph.kt
+++ b/shark-graph/src/main/java/shark/HeapGraph.kt
@@ -14,7 +14,9 @@ interface HeapGraph {
   val context: GraphContext
   /**
    * All GC roots which type matches types known to this heap graph and which point to non null
-   * references.
+   * references. You can retrieve the object that a GC Root points to by calling [findObjectById]
+   * with [GcRoot.id], however you need to first check that [objectExists] returns true because
+   * GC roots can point to objects that don't exist in the heap dump.
    */
   val gcRoots: List<GcRoot>
   /**
diff --git a/shark/src/main/java/shark/internal/PathFinder.kt b/shark/src/main/java/shark/internal/PathFinder.kt
index 366d5090..cc94b0b3 100644
--- a/shark/src/main/java/shark/internal/PathFinder.kt
+++ b/shark/src/main/java/shark/internal/PathFinder.kt
@@ -295,6 +295,15 @@ internal class PathFinder(
     }
 
     return graph.gcRoots
+        .filter { gcRoot ->
+          // GC roots sometimes reference objects that don't exist in the heap dump
+          // See https://github.com/square/leakcanary/issues/1516
+          val objectExists = graph.objectExists(gcRoot.id)
+          if (!objectExists) {
+            SharkLog.d("%s gc root ignored because it's pointing to unknown object @%s", gcRoot::class.java.simpleName, gcRoot.id)
+          }
+          objectExists
+        }
         .map { graph.findObjectById(it.id) to it }
         .sortedWith(Comparator { (graphObject1, root1), (graphObject2, root2) ->
           // Sorting based on pattern name first. In reverse order so that ThreadObject is before JavaLocalPattern
