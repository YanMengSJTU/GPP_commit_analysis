diff --git a/.travis.yml b/.travis.yml
index e4452455..ad714957 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -4,6 +4,8 @@ android:
   components:
     - build-tools-21.1.2
     - android-21
+    - extra-android-m2repository
+    - extra-android-support
   licenses:
     - android-sdk-license-5be876d5
 
diff --git a/leakcanary-android/build.gradle b/leakcanary-android/build.gradle
index 394da675..22174654 100644
--- a/leakcanary-android/build.gradle
+++ b/leakcanary-android/build.gradle
@@ -15,6 +15,7 @@ repositories {
 
 dependencies {
   compile project(':leakcanary-analyzer')
+  compile "com.android.support:support-v4:22.1.1"
 }
 
 def gitSha() {
diff --git a/leakcanary-android/src/main/AndroidManifest.xml b/leakcanary-android/src/main/AndroidManifest.xml
index 05d4ad81..caada60b 100644
--- a/leakcanary-android/src/main/AndroidManifest.xml
+++ b/leakcanary-android/src/main/AndroidManifest.xml
@@ -46,5 +46,14 @@
       </intent-filter>
     </activity>
 
+  <provider
+      android:name="android.support.v4.content.FileProvider"
+      android:authorities="@string/__leak_canary_file_provider_authority"
+      android:exported="false"
+      android:grantUriPermissions="true">
+      <meta-data
+          android:name="android.support.FILE_PROVIDER_PATHS"
+          android:resource="@xml/file_paths" />
+  </provider>
   </application>
 </manifest>
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidHeapDumper.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidHeapDumper.java
index 53b0ef5c..562657d0 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidHeapDumper.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidHeapDumper.java
@@ -29,7 +29,6 @@
 import java.io.File;
 import java.io.IOException;
 
-import static com.squareup.leakcanary.internal.LeakCanaryInternals.isExternalStorageWritable;
 import static com.squareup.leakcanary.internal.LeakCanaryInternals.storageDirectory;
 import static java.util.concurrent.TimeUnit.SECONDS;
 
@@ -46,9 +45,6 @@ public AndroidHeapDumper(Context context) {
   }
 
   @Override public File dumpHeap() {
-    if (!isExternalStorageWritable()) {
-      Log.d(TAG, "Could not dump heap, external storage not mounted.");
-    }
     File heapDumpFile = getHeapDumpFile();
     if (heapDumpFile.exists()) {
       Log.d(TAG, "Could not dump heap, previous analysis still is in progress.");
@@ -84,9 +80,6 @@ public AndroidHeapDumper(Context context) {
   public void cleanup() {
     LeakCanaryInternals.executeOnFileIoThread(new Runnable() {
       @Override public void run() {
-        if (isExternalStorageWritable()) {
-          Log.d(TAG, "Could not attempt cleanup, external storage not mounted.");
-        }
         File heapDumpFile = getHeapDumpFile();
         if (heapDumpFile.exists()) {
           Log.d(TAG, "Previous analysis did not complete correctly, cleaning: " + heapDumpFile);
@@ -97,7 +90,7 @@ public void cleanup() {
   }
 
   private File getHeapDumpFile() {
-    return new File(storageDirectory(), "suspected_leak_heapdump.hprof");
+    return new File(storageDirectory(context), "suspected_leak_heapdump.hprof");
   }
 
   private void showToast(final FutureResult<Toast> waitingForToast) {
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
index ce02d8fa..1b8d8c6d 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
@@ -62,7 +62,7 @@ protected final void onHeapAnalyzed(HeapDump heapDump, AnalysisResult result) {
     }
 
     int maxStoredLeaks = getResources().getInteger(R.integer.__leak_canary_max_stored_leaks);
-    File renamedFile = findNextAvailableHprofFile(maxStoredLeaks);
+    File renamedFile = findNextAvailableHprofFile(this, maxStoredLeaks);
 
     if (renamedFile == null) {
       // No file available.
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/DisplayLeakActivity.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/DisplayLeakActivity.java
index 4e58471d..aabaa828 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/DisplayLeakActivity.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/DisplayLeakActivity.java
@@ -25,6 +25,7 @@
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.Looper;
+import android.support.v4.content.FileProvider;
 import android.text.format.DateUtils;
 import android.util.Log;
 import android.view.LayoutInflater;
@@ -38,9 +39,11 @@
 import android.widget.ListAdapter;
 import android.widget.ListView;
 import android.widget.TextView;
+
 import com.squareup.leakcanary.AnalysisResult;
 import com.squareup.leakcanary.HeapDump;
 import com.squareup.leakcanary.R;
+
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FilenameFilter;
@@ -180,10 +183,13 @@ private void shareLeak() {
   private void shareHeapDump() {
     Leak visibleLeak = getVisibleLeak();
     File heapDumpFile = visibleLeak.heapDump.heapDumpFile;
-    heapDumpFile.setReadable(true, false);
     Intent intent = new Intent(Intent.ACTION_SEND);
+    Uri uri = FileProvider.getUriForFile(this,
+            getString(R.string.__leak_canary_file_provider_authority), heapDumpFile);
     intent.setType("application/octet-stream");
-    intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(heapDumpFile));
+    intent.setData(uri);
+    intent.putExtra(Intent.EXTRA_STREAM, uri);
+    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
     startActivity(Intent.createChooser(intent, getString(R.string.__leak_canary_share_with)));
   }
 
@@ -273,7 +279,7 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
         actionButton.setText(R.string.__leak_canary_delete_all);
         actionButton.setOnClickListener(new View.OnClickListener() {
           @Override public void onClick(View v) {
-            File[] files = detectedLeakDirectory().listFiles();
+            File[] files = detectedLeakDirectory(DisplayLeakActivity.this).listFiles();
             if (files != null) {
               for (File file : files) {
                 file.delete();
@@ -383,7 +389,7 @@ static void forgetActivity() {
 
     LoadLeaks(DisplayLeakActivity activity) {
       this.activityOrNull = activity;
-      leakDirectory = detectedLeakDirectory();
+      leakDirectory = detectedLeakDirectory(activity);
       mainHandler = new Handler(Looper.getMainLooper());
     }
 
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/LeakCanaryInternals.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/LeakCanaryInternals.java
index ac8ecba7..2372d792 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/LeakCanaryInternals.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/LeakCanaryInternals.java
@@ -22,8 +22,8 @@
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.ServiceInfo;
-import android.os.Environment;
 import android.util.Log;
+
 import java.io.File;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;
@@ -32,7 +32,6 @@
 import static android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_ENABLED;
 import static android.content.pm.PackageManager.DONT_KILL_APP;
 import static android.content.pm.PackageManager.GET_SERVICES;
-import static android.os.Environment.DIRECTORY_DOWNLOADS;
 
 public final class LeakCanaryInternals {
 
@@ -49,15 +48,15 @@ public static void executeOnFileIoThread(Runnable runnable) {
     fileIoExecutor.execute(runnable);
   }
 
-  public static File storageDirectory() {
-    File downloadsDirectory = Environment.getExternalStoragePublicDirectory(DIRECTORY_DOWNLOADS);
-    File leakCanaryDirectory = new File(downloadsDirectory, "leakcanary");
+  public static File storageDirectory(Context context) {
+    File cacheDir = context.getCacheDir();
+    File leakCanaryDirectory = new File(cacheDir, "leakcanary");
     leakCanaryDirectory.mkdirs();
     return leakCanaryDirectory;
   }
 
-  public static File detectedLeakDirectory() {
-    File directory = new File(storageDirectory(), "detected_leaks");
+  public static File detectedLeakDirectory(Context context) {
+    File directory = new File(storageDirectory(context), "detected_leaks");
     directory.mkdirs();
     return directory;
   }
@@ -66,13 +65,8 @@ public static File leakResultFile(File heapdumpFile) {
     return new File(heapdumpFile.getParentFile(), heapdumpFile.getName() + ".result");
   }
 
-  public static boolean isExternalStorageWritable() {
-    String state = Environment.getExternalStorageState();
-    return Environment.MEDIA_MOUNTED.equals(state);
-  }
-
-  public static File findNextAvailableHprofFile(int maxFiles) {
-    File directory = detectedLeakDirectory();
+  public static File findNextAvailableHprofFile(Context context, int maxFiles) {
+    File directory = detectedLeakDirectory(context);
     for (int i = 0; i < maxFiles; i++) {
       String heapDumpName = "heap_dump_" + i + ".hprof";
       File file = new File(directory, heapDumpName);
diff --git a/leakcanary-android/src/main/res/values/__leak_canary_strings.xml b/leakcanary-android/src/main/res/values/__leak_canary_strings.xml
index f92e8fd1..ed350b10 100644
--- a/leakcanary-android/src/main/res/values/__leak_canary_strings.xml
+++ b/leakcanary-android/src/main/res/values/__leak_canary_strings.xml
@@ -28,5 +28,5 @@
   <string name="__leak_canary_delete">Delete</string>
   <string name="__leak_canary_failure_report">"Please report this failure to http://github.com/square/leakcanary\n"</string>
   <string name="__leak_canary_delete_all">Delete all</string>
-
+  <string name="__leak_canary_file_provider_authority">com.squareup.leakcanary.fileprovider</string>
 </resources>
\ No newline at end of file
diff --git a/leakcanary-android/src/main/res/xml/file_paths.xml b/leakcanary-android/src/main/res/xml/file_paths.xml
new file mode 100644
index 00000000..e24fc6d1
--- /dev/null
+++ b/leakcanary-android/src/main/res/xml/file_paths.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<paths xmlns:android="http://schemas.android.com/apk/res/android">
+    <cache-path name="leakcanary" path="leakcanary/" />
+</paths>
