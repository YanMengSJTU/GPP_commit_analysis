diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/AbstractAnalysisResultService.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/AbstractAnalysisResultService.java
index 74cd3dad..902cf69c 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/AbstractAnalysisResultService.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/AbstractAnalysisResultService.java
@@ -34,6 +34,7 @@ public static void sendResultToListener(Context context, String listenerServiceC
     }
     //启动Service通知，抽象类，DisplayLeakService
     Intent intent = new Intent(context, listenerServiceClass);
+    //将分析的信息传回给Service,发出内存泄漏的通知
     intent.putExtra(HEAP_DUMP_EXTRA, heapDump);
     intent.putExtra(RESULT_EXTRA, result);
     context.startService(intent);
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidRefWatcherBuilder.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidRefWatcherBuilder.java
index 5d1acc05..4fc89d13 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidRefWatcherBuilder.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidRefWatcherBuilder.java
@@ -90,6 +90,7 @@ public RefWatcher buildAndInstall() {
   }
 
   @Override protected boolean isDisabled() {
+    //用于判断服务进程是否在前台，重要
     return LeakCanary.isInAnalyzerProcess(context);
   }
 
@@ -111,7 +112,7 @@ public RefWatcher buildAndInstall() {
   }
 
   @Override protected WatchExecutor defaultWatchExecutor() {
-    //默认线程池
+    //默认线程池，5s
     return new AndroidWatchExecutor(DEFAULT_WATCH_DELAY_MILLIS);
   }
 }
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidWatchExecutor.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidWatchExecutor.java
index 6cadbc76..5db2f5eb 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidWatchExecutor.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidWatchExecutor.java
@@ -39,7 +39,7 @@
   public AndroidWatchExecutor(long initialDelayMillis) {
     //主线程Handler
     mainHandler = new Handler(Looper.getMainLooper());
-    //这里new了一个HandlerThread，内部封装好了looper.prepare()等操作
+    //这里new了一个HandlerThread，也就是一个异步线程，内部封装好了looper.prepare()等操作
     HandlerThread handlerThread = new HandlerThread(LEAK_CANARY_THREAD_NAME);
     handlerThread.start();
     //handlerThread内部的handler
@@ -69,6 +69,7 @@ void waitForIdle(final Retryable retryable, final int failedAttempts) {
     Looper.myQueue().addIdleHandler(new MessageQueue.IdleHandler() {
       @Override public boolean queueIdle() {
         postToBackgroundWithDelay(retryable, failedAttempts);
+        //return false,说明只执行一遍
         return false;
       }
     });
@@ -79,7 +80,9 @@ void postToBackgroundWithDelay(final Retryable retryable, final int failedAttemp
     long delayMillis = initialDelayMillis * exponentialBackoffFactor;
     backgroundHandler.postDelayed(new Runnable() {
       @Override public void run() {
+        //执行分析
         Retryable.Result result = retryable.run();
+        //如果结果是RETRY，则稍后重试，这个对应于debug
         if (result == RETRY) {
           postWaitForIdle(retryable, failedAttempts + 1);
         }
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
index cff51d0c..5917e0e3 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
@@ -38,6 +38,10 @@
  * You can extend this class and override {@link #afterDefaultHandling(HeapDump, AnalysisResult,
  * String)} to add custom behavior, e.g. uploading the heap dump.
  */
+
+/**
+ * 同样是个IntentService
+ */
 public class DisplayLeakService extends AbstractAnalysisResultService {
 
   @Override protected final void onHeapAnalyzed(HeapDump heapDump, AnalysisResult result) {
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java
index b15aab88..711eaef0 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java
@@ -161,6 +161,7 @@ public static boolean isInAnalyzerProcess(Context context) {
     Boolean isInAnalyzerProcess = LeakCanaryInternals.isInAnalyzerProcess;
     // This only needs to be computed once per process.
     if (isInAnalyzerProcess == null) {
+      //判断进程是否在后台，重要
       isInAnalyzerProcess = isInServiceProcess(context, HeapAnalyzerService.class);
       LeakCanaryInternals.isInAnalyzerProcess = isInAnalyzerProcess;
     }
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/HeapAnalyzerService.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/HeapAnalyzerService.java
index 23034970..83163873 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/HeapAnalyzerService.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/HeapAnalyzerService.java
@@ -57,7 +57,7 @@ public HeapAnalyzerService() {
     HeapDump heapDump = (HeapDump) intent.getSerializableExtra(HEAPDUMP_EXTRA);
 
     HeapAnalyzer heapAnalyzer = new HeapAnalyzer(heapDump.excludedRefs);
-    //分析获得结果
+    //分析获得结果,haha库就在内部调用的，注意分析
     AnalysisResult result = heapAnalyzer.checkForLeak(heapDump.heapDumpFile, heapDump.referenceKey);
     //回调结果
     AbstractAnalysisResultService.sendResultToListener(this, listenerClassName, heapDump, result);
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/LeakCanaryInternals.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/LeakCanaryInternals.java
index 8308376d..432779d4 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/LeakCanaryInternals.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/LeakCanaryInternals.java
@@ -114,6 +114,7 @@ public static boolean isInServiceProcess(Context context, Class<? extends Servic
     }
 
     if (serviceInfo.processName.equals(mainProcess)) {
+      //如果服务进程和主进程是同一个进程，那就不对了
       CanaryLog.d("Did not expect service %s to run in main process %s", serviceClass, mainProcess);
       // Technically we are in the service process, but we're not in the service dedicated process.
       return false;
@@ -133,6 +134,7 @@ public static boolean isInServiceProcess(Context context, Class<? extends Servic
     }
     if (runningProcesses != null) {
       for (ActivityManager.RunningAppProcessInfo process : runningProcesses) {
+        //获取当前正在前台对进程
         if (process.pid == myPid) {
           myProcess = process;
           break;
diff --git a/leakcanary-watcher/src/main/java/com/squareup/leakcanary/GcTrigger.java b/leakcanary-watcher/src/main/java/com/squareup/leakcanary/GcTrigger.java
index bc259a0e..b9f3c56c 100644
--- a/leakcanary-watcher/src/main/java/com/squareup/leakcanary/GcTrigger.java
+++ b/leakcanary-watcher/src/main/java/com/squareup/leakcanary/GcTrigger.java
@@ -29,6 +29,7 @@
       // System.gc() does not garbage collect every time. Runtime.gc() is
       // more likely to perfom a gc.
       //这里用的是Runtime.getRuntime().gc()
+      //注意这里和System.gc()的区别
       Runtime.getRuntime().gc();
       //等待100毫秒
       enqueueReferences();
diff --git a/leakcanary-watcher/src/main/java/com/squareup/leakcanary/RefWatcherBuilder.java b/leakcanary-watcher/src/main/java/com/squareup/leakcanary/RefWatcherBuilder.java
index 51c1d802..000a5475 100644
--- a/leakcanary-watcher/src/main/java/com/squareup/leakcanary/RefWatcherBuilder.java
+++ b/leakcanary-watcher/src/main/java/com/squareup/leakcanary/RefWatcherBuilder.java
@@ -51,6 +51,7 @@ public final T gcTrigger(GcTrigger gcTrigger) {
 
   /** Creates a {@link RefWatcher}. */
   public final RefWatcher build() {
+    // 判断install是否在Analyzer进程里，重复执行
     if (isDisabled()) {
       return RefWatcher.DISABLED;
     }
