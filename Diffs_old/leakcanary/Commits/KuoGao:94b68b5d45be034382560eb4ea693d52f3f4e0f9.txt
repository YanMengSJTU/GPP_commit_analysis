diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/ActivityRefWatcher.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/ActivityRefWatcher.java
index 160e840f..2ad70d5a 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/ActivityRefWatcher.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/ActivityRefWatcher.java
@@ -19,70 +19,128 @@
 import android.app.Activity;
 import android.app.Application;
 import android.os.Bundle;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.Message;
 
 import static android.os.Build.VERSION.SDK_INT;
 import static android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH;
 import static com.squareup.leakcanary.Preconditions.checkNotNull;
 
-@TargetApi(ICE_CREAM_SANDWICH) public final class ActivityRefWatcher {
+@TargetApi(ICE_CREAM_SANDWICH)
+public final class ActivityRefWatcher {
 
-  public static void installOnIcsPlus(Application application, RefWatcher refWatcher) {
-    if (SDK_INT < ICE_CREAM_SANDWICH) {
-      // If you need to support Android < ICS, override onDestroy() in your base activity.
-      return;
+    public static void installOnIcsPlus(Application application, RefWatcher refWatcher) {
+        ActivityRefWatcher activityRefWatcher = new ActivityRefWatcher(application, refWatcher);
+        activityRefWatcher.watchActivities();
     }
-    ActivityRefWatcher activityRefWatcher = new ActivityRefWatcher(application, refWatcher);
-    activityRefWatcher.watchActivities();
-  }
 
-  private final Application.ActivityLifecycleCallbacks lifecycleCallbacks =
-      new Application.ActivityLifecycleCallbacks() {
-        @Override public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
-        }
+    private final Application.ActivityLifecycleCallbacks lifecycleCallbacks =
+            new Application.ActivityLifecycleCallbacks() {
+                @Override
+                public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
+                }
+
+                @Override
+                public void onActivityStarted(Activity activity) {
+                }
+
+                @Override
+                public void onActivityResumed(Activity activity) {
+                }
+
+                @Override
+                public void onActivityPaused(Activity activity) {
+                }
+
+                @Override
+                public void onActivityStopped(Activity activity) {
+                }
+
+                @Override
+                public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
+                }
+
+                @Override
+                public void onActivityDestroyed(Activity activity) {
+                    ActivityRefWatcher.this.onActivityDestroyed(activity);
+                }
+            };
+
+    private final Application application;
+    private final RefWatcher refWatcher;
+
+    /**
+     * Constructs an {@link ActivityRefWatcher} that will make sure the activities are not leaking
+     * after they have been destroyed.
+     */
+    public ActivityRefWatcher(Application application, final RefWatcher refWatcher) {
+        this.application = checkNotNull(application, "application");
+        this.refWatcher = checkNotNull(refWatcher, "refWatcher");
+    }
 
-        @Override public void onActivityStarted(Activity activity) {
-        }
+    void onActivityDestroyed(Activity activity) {
+        refWatcher.watch(activity);
+    }
 
-        @Override public void onActivityResumed(Activity activity) {
+    public void watchActivities() {
+        // Make sure you don't get installed twice.
+        if (SDK_INT >= ICE_CREAM_SANDWICH) {
+            stopWatchingActivities();
+            application.registerActivityLifecycleCallbacks(lifecycleCallbacks);
+        } else {
+            stopWatchingActivitiesLower14();
+            registerActivityLifecycleCallbacksLower14();
         }
+    }
+
+    public void stopWatchingActivities() {
+        application.unregisterActivityLifecycleCallbacks(lifecycleCallbacks);
+    }
+
+    public void stopWatchingActivitiesLower14() {
+        try {
+            Object currentActivityThread = ReflectUtils.invokeStaticMethod("android.app.ActivityThread", "currentActivityThread", null);
+            Object mH = ReflectUtils.getFieldValue(currentActivityThread, "mH");
+            ReflectUtils.setField(mH, "mCallback", null);
+        } catch (Exception e) {
 
-        @Override public void onActivityPaused(Activity activity) {
         }
+    }
+
+    public void registerActivityLifecycleCallbacksLower14() {
+        try {
+            Object currentActivityThread = ReflectUtils.invokeStaticMethod("android.app.ActivityThread", "currentActivityThread", null);
+            Object mH = ReflectUtils.getFieldValue(currentActivityThread, "mH");
+            ReflectUtils.setField(mH, "mCallback", new InjectCallback(lifecycleCallbacks));
+        } catch (Exception e) {
 
-        @Override public void onActivityStopped(Activity activity) {
         }
+    }
 
-        @Override public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
+    private final static class InjectCallback implements Handler.Callback {
+
+        private Application.ActivityLifecycleCallbacks mActivityLifecycleCallbacks;
+
+        public InjectCallback(Application.ActivityLifecycleCallbacks mActivityLifecycleCallbacks) {
+            this.mActivityLifecycleCallbacks = mActivityLifecycleCallbacks;
         }
 
-        @Override public void onActivityDestroyed(Activity activity) {
-          ActivityRefWatcher.this.onActivityDestroyed(activity);
+        @Override
+        public boolean handleMessage(Message msg) {
+            if (msg.what == 109) {
+                try {
+                    IBinder token = (IBinder) msg.obj;
+                    Object currentActivityThread = ReflectUtils.invokeStaticMethod("android.app.ActivityThread", "currentActivityThread", null);
+                    Object activity = ReflectUtils.invokeMethod(currentActivityThread, "getActivity", new Class[]{IBinder.class}, token);
+                    if (mActivityLifecycleCallbacks != null && activity != null) {
+                        mActivityLifecycleCallbacks.onActivityDestroyed((Activity) activity);
+                    }
+                } catch (Throwable t) {
+
+                }
+            }
+            return false;
         }
-      };
-
-  private final Application application;
-  private final RefWatcher refWatcher;
-
-  /**
-   * Constructs an {@link ActivityRefWatcher} that will make sure the activities are not leaking
-   * after they have been destroyed.
-   */
-  public ActivityRefWatcher(Application application, final RefWatcher refWatcher) {
-    this.application = checkNotNull(application, "application");
-    this.refWatcher = checkNotNull(refWatcher, "refWatcher");
-  }
-
-  void onActivityDestroyed(Activity activity) {
-    refWatcher.watch(activity);
-  }
-
-  public void watchActivities() {
-    // Make sure you don't get installed twice.
-    stopWatchingActivities();
-    application.registerActivityLifecycleCallbacks(lifecycleCallbacks);
-  }
-
-  public void stopWatchingActivities() {
-    application.unregisterActivityLifecycleCallbacks(lifecycleCallbacks);
-  }
+    }
 }
