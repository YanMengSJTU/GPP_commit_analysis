diff --git a/CHANGELOG.md b/CHANGELOG.md
index 5f263e90..1c22c20c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,27 +1,36 @@
 # Change Log
 
-## Version 1.6 (Future release)
+## Version 1.6.1 (2018-06-21)
 
+* [#727](https://github.com/square/leakcanary/issues/727) Improved leak analysis: LeakCanary now identifies and highlights the potential causes of the leak.
 * [#1011](https://github.com/square/leakcanary/issues/1011) We noticed that computing the retained heap size could take a long time, so it's now optional and off by default.
-* [#633](https://github.com/square/leakcanary/pull/633) Support for detecting leaks in instrumentation tests.
-* [#985](https://github.com/square/leakcanary/pull/985) Ability to convert leak traces into stack traces for easy remote reporting.
+* [#633](https://github.com/square/leakcanary/pull/633) Support for detecting leaks in instrumentation tests ([see the wiki](https://github.com/square/leakcanary/wiki/Customizing-LeakCanary#running-leakcanary-in-instrumentation-tests)).
+* [#985](https://github.com/square/leakcanary/pull/985) Ability to convert leak traces into stack traces for easy remote reporting ([see the wiki](https://github.com/square/leakcanary/wiki/Customizing-LeakCanary#uploading-to-a-server)).
 * [#983](https://github.com/square/leakcanary/issues/983) Support for watching destroyed Fragments.
 * [#846](https://github.com/square/leakcanary/issues/846) LeakCanary now uses foreground services and displays a notification when the analysis is in progress. This also fixes crashes when analyzing in background on O+.
+* The LeakCanary icon (to start to DisplayLeakActivity) is now hidden by default, and only enabled after the first leak is found.
 * [#775](https://github.com/square/leakcanary/issues/775) Fixed crash when sharing heap dumps on O+ and added a dependency to the support-core-utils library.
 * [#930](https://github.com/square/leakcanary/pull/930) DisplayLeakActivity has a responsive icon.
 * [#685](https://github.com/square/leakcanary/issues/685) Stopped doing IO on main thread in DisplayLeakActivity (fixes StrictMode errors).
 * [#999](https://github.com/square/leakcanary/pull/999) Updated HAHA to 2.0.4, which uses Trove4j as an external dependency (from jcenter) instead of rebundling it. This is to clarify licences (Apache v2 vs LGPL 2.1).
-* Several small bug fixes.
+* Several bug and crash fixes.
 
 Many thanks to [@AdityaAnand1](https://github.com/AdityaAnand1), [@alhah](https://github.com/alhah), [@christxph](https://github.com/christxph), [@csoon03](https://github.com/csoon03), [@daqi](https://github.com/daqi), [@JakeWharton](https://github.com/JakeWharton), [@jankovd](https://github.com/jankovd), [@jrodbx](https://github.com/jrodbx), [@kurtisnelson](https://github.com/kurtisnelson), [@NightlyNexus](https://github.com/NightlyNexus), [@pyricau](https://github.com/pyricau), [@SalvatoreT](https://github.com/SalvatoreT), [@shmuelr](https://github.com/shmuelr), [@tokou](https://github.com/tokou), [@xueqiushi](https://github.com/xueqiushi)
  for the code contributions!
 
+Note: we made a 1.6 release but quickly followed up with 1.6.1 due to [#1058](https://github.com/square/leakcanary/issues/1058).
+
 ### Public API changes
 
 * The installed ref watcher singleton is now available via `LeakCanary.installedRefWatcher()`
-* TBD
-
-For more details, see the [1.6 Milestone](https://github.com/square/leakcanary/milestone/3) and the [full diff](https://github.com/square/leakcanary/compare/v1.5.4...master).
+* `AnalysisResult.leakTraceAsFakeException()` returns an exception that can be used to report and group leak traces to a tool like Bugsnag or Crashlytics.
+* New `InstrumentationLeakDetector` and `FailTestOnLeakRunListener` APIs for detecting leaks in instrumentation tests.
+* New `Reachability.Inspector` and `RefWatcherBuilder.stethoscopeClasses()` API to establish reachability and help identify leak causes.
+* Watching activities can be disabled with `AndroidRefWatcherBuilder.watchActivities(false)`, watching fragments can be disabled with `AndroidRefWatcherBuilder.watchFragments(false)`
+* `LeakCanary.setDisplayLeakActivityDirectoryProvider()` is deprecated and replaced with `LeakCanary.setLeakDirectoryProvider()`
+* New `RefWatcherBuilder.computeRetainedHeapSize()` API to enable the computing of the retained heap size (off by default).
+
+For more details, see the [1.6.1 Milestone](https://github.com/square/leakcanary/milestone/3) and the [full diff](https://github.com/square/leakcanary/compare/v1.5.4...v1.6.1).
 
 ## Version 1.5.4 *(2017-09-22)*
 
diff --git a/README.md b/README.md
index 563d5f61..155de599 100644
--- a/README.md
+++ b/README.md
@@ -15,8 +15,10 @@ In your `build.gradle`:
 
 ```groovy
 dependencies {
-  debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
-  releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
+  debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'
+  releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'
+  // Optional, if you use support library fragments:
+  debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.1'
 }
 ```
 
@@ -38,34 +40,31 @@ public class ExampleApplication extends Application {
 }
 ```
 
-**You're good to go!** LeakCanary will automatically show a notification when an activity memory leak is detected in your debug build.
+**You're good to go!** LeakCanary will automatically show a notification when an activity or support fragment memory leak is detected in your debug build.
 
-**What's next?** You could watch a [live investigation](https://www.youtube.com/watch?v=KwArTJHLq5g), read more on [setting it up](https://github.com/square/leakcanary/wiki/FAQ#how-do-i-use-it) and even [customize it](https://github.com/square/leakcanary/wiki/Customizing-LeakCanary) to your needs.
+**What's next?** You could watch a [live investigation](https://www.youtube.com/watch?v=KwArTJHLq5g) then [customize LeakCanary](https://github.com/square/leakcanary/wiki/Customizing-LeakCanary) to your needs.
 
 ## FAQ
 
 * [Why should I use LeakCanary?](https://github.com/square/leakcanary/wiki/FAQ#why-should-i-use-leakcanary)
-* [How do I use it?](https://github.com/square/leakcanary/wiki/FAQ#how-do-i-use-it)
 * [How does it work?](https://github.com/square/leakcanary/wiki/FAQ#how-does-it-work)
+* [How do I fix a memory leak?](https://github.com/square/leakcanary/wiki/FAQ#how-do-i-fix-a-memory-leak)
 * [How do I customize LeakCanary to my needs?](https://github.com/square/leakcanary/wiki/FAQ#how-do-i-customize-leakcanary-to-my-needs)
+* [Where can I learn more?](https://github.com/square/leakcanary/wiki/FAQ#where-can-i-learn-more)
 * [How do I copy the leak trace?](https://github.com/square/leakcanary/wiki/FAQ#how-do-i-copy-the-leak-trace)
-* [How do I fix a memory leak?](https://github.com/square/leakcanary/wiki/FAQ#how-do-i-fix-a-memory-leak)
 * [Can a leak be caused by the Android SDK?](https://github.com/square/leakcanary/wiki/FAQ#can-a-leak-be-caused-by-the-android-sdk)
 * [How can I dig beyond the leak trace?](https://github.com/square/leakcanary/wiki/FAQ#how-can-i-dig-beyond-the-leak-trace)
-* [How do I disable LeakCanary in tests?](https://github.com/square/leakcanary/wiki/FAQ#how-do-i-disable-leakcanary-in-tests)
+* [How do disable I LeakCanary in tests?](https://github.com/square/leakcanary/wiki/FAQ#how-do-i-disable-leakcanary-in-tests)
 * [How do I fix build errors?](https://github.com/square/leakcanary/wiki/FAQ#how-do-i-fix-build-errors)
 * [How many methods does LeakCanary add?](https://github.com/square/leakcanary/wiki/FAQ#how-many-methods-does-leakcanary-add)
-* [Where can I learn more?](https://github.com/square/leakcanary/wiki/FAQ#where-can-i-learn-more)
 * [How do I use the SNAPSHOT version?](https://github.com/square/leakcanary/wiki/FAQ#how-do-i-use-the-snapshot-version)
 * [How can I be notified of new releases?](https://github.com/square/leakcanary/wiki/FAQ#how-can-i-be-notified-of-new-releases)
 * [Who's behind LeakCanary?](https://github.com/square/leakcanary/wiki/FAQ#whos-behind-leakcanary)
 * [Why is it called LeakCanary?](https://github.com/square/leakcanary/wiki/FAQ#why-is-it-called-leakcanary)
 * [Who made the logo?](https://github.com/square/leakcanary/wiki/FAQ#who-made-the-logo)
-* [Build error: Failed to resolve](https://github.com/square/leakcanary/wiki/FAQ#build-error-failed-to-resolve)
 * [Instant Run can trigger invalid leaks](https://github.com/square/leakcanary/wiki/FAQ#instant-run-can-trigger-invalid-leaks)
 * [I know I have a leak. Why doesn't the notification show?](https://github.com/square/leakcanary/wiki/FAQ#i-know-i-have-a-leak-why-doesnt-the-notification-show)
 
-
 <p align="center">
 <img src="https://github.com/square/leakcanary/wiki/assets/icon_512.png" width="250"/>
 </p>
diff --git a/gradle.properties b/gradle.properties
index 838a4e84..03ab67e4 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.squareup.leakcanary
-VERSION_NAME=1.6-SNAPSHOT
+VERSION_NAME=1.7-SNAPSHOT
 
 POM_DESCRIPTION=Leak Canary
 
diff --git a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HahaHelper.java b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HahaHelper.java
index bb09ad92..b322c162 100644
--- a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HahaHelper.java
+++ b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HahaHelper.java
@@ -83,6 +83,7 @@ static String valueAsString(Object value) {
 
   /** Given a string instance from the heap dump, this returns its actual string value. */
   static String asString(Object stringObject) {
+    checkNotNull(stringObject, "stringObject");
     Instance instance = (Instance) stringObject;
     List<ClassInstance.FieldValue> values = classInstanceValues(instance);
 
diff --git a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HeapAnalyzer.java b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HeapAnalyzer.java
index d57663a5..ebd5617f 100644
--- a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HeapAnalyzer.java
+++ b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HeapAnalyzer.java
@@ -211,10 +211,19 @@ private String generateRootKey(RootObj root) {
 
   private Instance findLeakingReference(String key, Snapshot snapshot) {
     ClassObj refClass = snapshot.findClass(KeyedWeakReference.class.getName());
+    if (refClass == null) {
+      throw new IllegalStateException(
+          "Could not find the " + KeyedWeakReference.class.getName() + " class in the heap dump.");
+    }
     List<String> keysFound = new ArrayList<>();
     for (Instance instance : refClass.getInstancesList()) {
       List<ClassInstance.FieldValue> values = classInstanceValues(instance);
-      String keyCandidate = asString(fieldValue(values, "key"));
+      Object keyFieldValue = fieldValue(values, "key");
+      if (keyFieldValue == null) {
+        keysFound.add(null);
+        continue;
+      }
+      String keyCandidate = asString(keyFieldValue);
       if (keyCandidate.equals(key)) {
         return fieldValue(values, "referent");
       }
diff --git a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/LeakCanary.java b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/LeakCanary.java
index a9784143..f6fd4c8a 100644
--- a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/LeakCanary.java
+++ b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/LeakCanary.java
@@ -12,6 +12,10 @@ public static RefWatcher install(Application application) {
     return RefWatcher.DISABLED;
   }
 
+  public static RefWatcher installedRefWatcher() {
+    return RefWatcher.DISABLED;
+  }
+
   public static boolean isInAnalyzerProcess(Context context) {
     return false;
   }
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java
index 232bf933..34c92bba 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java
@@ -25,6 +25,7 @@
 import static android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH;
 import static android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1;
 import static android.os.Build.VERSION_CODES.JELLY_BEAN;
+import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;
 import static android.os.Build.VERSION_CODES.KITKAT;
 import static android.os.Build.VERSION_CODES.LOLLIPOP;
 import static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;
@@ -250,7 +251,7 @@
     }
   },
 
-  USER_MANAGER__SINSTANCE(SDK_INT >= JELLY_BEAN && SDK_INT <= M) {
+  USER_MANAGER__SINSTANCE(SDK_INT >= JELLY_BEAN_MR2 && SDK_INT < O) {
     @Override void add(ExcludedRefs.Builder excluded) {
       excluded.instanceField("android.os.UserManager", "mContext")
           .reason("UserManager has a static sInstance field that creates an instance and caches it"
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidHeapDumper.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidHeapDumper.java
index 63e75028..78299fdc 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidHeapDumper.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidHeapDumper.java
@@ -18,6 +18,9 @@
 import android.app.Notification;
 import android.app.NotificationManager;
 import android.content.Context;
+import android.content.res.Configuration;
+import android.graphics.PixelFormat;
+import android.os.Build;
 import android.os.Debug;
 import android.os.Handler;
 import android.os.Looper;
@@ -25,11 +28,16 @@
 import android.os.SystemClock;
 import android.view.Gravity;
 import android.view.LayoutInflater;
+import android.view.View;
+import android.view.WindowManager;
+import android.view.accessibility.AccessibilityEvent;
+import android.view.accessibility.AccessibilityManager;
 import android.widget.Toast;
 import com.squareup.leakcanary.internal.FutureResult;
 import com.squareup.leakcanary.internal.LeakCanaryInternals;
 import java.io.File;
 
+import static android.view.accessibility.AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED;
 import static java.util.concurrent.TimeUnit.SECONDS;
 
 public final class AndroidHeapDumper implements HeapDumper {
@@ -89,7 +97,7 @@ private void showToast(final FutureResult<Toast> waitingForToast) {
         toast.setDuration(Toast.LENGTH_LONG);
         LayoutInflater inflater = LayoutInflater.from(context);
         toast.setView(inflater.inflate(R.layout.leak_canary_heap_dump_toast, null));
-        toast.show();
+        show(toast);
         // Waiting for Idle to make sure Toast gets rendered.
         Looper.myQueue().addIdleHandler(new MessageQueue.IdleHandler() {
           @Override public boolean queueIdle() {
@@ -104,8 +112,85 @@ private void showToast(final FutureResult<Toast> waitingForToast) {
   private void cancelToast(final Toast toast) {
     mainHandler.post(new Runnable() {
       @Override public void run() {
-        toast.cancel();
+        hide(toast);
       }
     });
   }
+
+  private void show(Toast toast) {
+    View view = toast.getView();
+    Context context = toast.getView().getContext();
+
+    WindowManager windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+
+    // We can resolve the Gravity here by using the Locale for getting
+    // the layout direction
+    Configuration config = view.getContext().getResources().getConfiguration();
+    int gravity = toast.getGravity();
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+      gravity = Gravity.getAbsoluteGravity(gravity, config.getLayoutDirection());
+    }
+
+    WindowManager.LayoutParams params = buildLayoutParams();
+    params.gravity = gravity;
+    if ((gravity & Gravity.HORIZONTAL_GRAVITY_MASK) == Gravity.FILL_HORIZONTAL) {
+      params.horizontalWeight = 1.0f;
+    }
+    if ((gravity & Gravity.VERTICAL_GRAVITY_MASK) == Gravity.FILL_VERTICAL) {
+      params.verticalWeight = 1.0f;
+    }
+    params.x = toast.getXOffset();
+    params.y = toast.getYOffset();
+    params.verticalMargin = toast.getVerticalMargin();
+    params.horizontalMargin = toast.getHorizontalMargin();
+    params.packageName = context.getPackageName();
+    try {
+      windowManager.addView(view, params);
+    } catch (WindowManager.BadTokenException ignored) {
+      CanaryLog.d("Could not show leak toast, the window token has been canceled");
+      return;
+    }
+    trySendAccessibilityEvent(view);
+  }
+
+  private void hide(Toast toast) {
+    View view = toast.getView();
+    if (view.getParent() != null) {
+      Context context = toast.getView().getContext();
+      WindowManager windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+      windowManager.removeView(view);
+    }
+  }
+
+  private WindowManager.LayoutParams buildLayoutParams() {
+    WindowManager.LayoutParams params = new WindowManager.LayoutParams();
+    params.height = WindowManager.LayoutParams.WRAP_CONTENT;
+    params.width = WindowManager.LayoutParams.WRAP_CONTENT;
+    params.format = PixelFormat.TRANSLUCENT;
+    params.windowAnimations = android.R.style.Animation_Toast;
+    params.type = WindowManager.LayoutParams.TYPE_TOAST;
+    params.setTitle("Toast");
+    params.flags = WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON
+        | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
+        | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;
+    return params;
+  }
+
+  private void trySendAccessibilityEvent(View view) {
+    Context context = view.getContext();
+    AccessibilityManager accessibilityManager =
+        (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
+    if (!accessibilityManager.isEnabled()) {
+      return;
+    }
+    // treat toasts as notifications since they are used to
+    // announce a transient piece of information to the user
+    AccessibilityEvent event = AccessibilityEvent.obtain(TYPE_NOTIFICATION_STATE_CHANGED);
+    event.setClassName(getClass().getName());
+    event.setPackageName(context.getPackageName());
+    view.dispatchPopulateAccessibilityEvent(event);
+    accessibilityManager.sendAccessibilityEvent(event);
+  }
+
+
 }
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidReachabilityInspectors.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidReachabilityInspectors.java
index b1387067..1a4060db 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidReachabilityInspectors.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidReachabilityInspectors.java
@@ -53,6 +53,10 @@
 
   MORTAR_PRESENTER(MortarPresenterInspector.class),
 
+  VIEW_ROOT_IMPL(ViewImplInspector.class),
+
+  MAIN_THEAD(MainThreadInspector.class),
+
   //
   ;
 
@@ -176,4 +180,30 @@
     }
   }
 
+  public static class ViewImplInspector implements Reachability.Inspector {
+    @Override public Reachability expectedReachability(LeakTraceElement element) {
+      if (!element.isInstanceOf("android.view.ViewRootImpl")) {
+        return Reachability.UNKNOWN;
+      }
+      String mView = element.getFieldReferenceValue("mView");
+      if (mView == null) {
+        return Reachability.UNKNOWN;
+      }
+      return mView.equals("null") ? Reachability.UNREACHABLE : Reachability.REACHABLE;
+    }
+  }
+
+  public static class MainThreadInspector implements Reachability.Inspector {
+    @Override public Reachability expectedReachability(LeakTraceElement element) {
+      if (!element.isInstanceOf(Thread.class)) {
+        return Reachability.UNKNOWN;
+      }
+      String name = element.getFieldReferenceValue("name");
+      if ("main".equals(name)) {
+        return Reachability.REACHABLE;
+      }
+      return Reachability.UNKNOWN;
+    }
+  }
+
 }
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java
index 0af04f2b..30c836dc 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java
@@ -43,12 +43,14 @@ public static RefWatcher install(Application application) {
   }
 
   /**
-   * @return the {@link RefWatcher} installed via {@link AndroidRefWatcherBuilder#buildAndInstall()}.
+   * Returns the {@link RefWatcher} installed via
+   * {@link AndroidRefWatcherBuilder#buildAndInstall()}, and {@link RefWatcher#DISABLED} is no
+   * {@link RefWatcher} has been installed.
    */
   public static RefWatcher installedRefWatcher() {
     RefWatcher refWatcher = LeakCanaryInternals.installedRefWatcher;
     if (refWatcher == null) {
-      throw new IllegalStateException("AndroidRefWatcherBuilder.buildAndInstall() was not called");
+      return RefWatcher.DISABLED;
     }
     return refWatcher;
   }
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/DisplayLeakConnectorView.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/DisplayLeakConnectorView.java
index 3bafb82b..3a500da3 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/DisplayLeakConnectorView.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/DisplayLeakConnectorView.java
@@ -144,8 +144,7 @@ public DisplayLeakConnectorView(Context context, AttributeSet attrs) {
   private void drawStartLine(Canvas cacheCanvas) {
     int width = getMeasuredWidth();
     float halfWidth = width / 2f;
-    float halfHeight = getMeasuredHeight() / 2f;
-    cacheCanvas.drawLine(halfWidth, 0, halfWidth, halfHeight, classNamePaint);
+    cacheCanvas.drawLine(halfWidth, 0, halfWidth, circleY, classNamePaint);
   }
 
   private void drawRoot(Canvas cacheCanvas) {
diff --git a/leakcanary-android/src/main/res/values/leak_canary_strings.xml b/leakcanary-android/src/main/res/values/leak_canary_strings.xml
index b4faa52d..e39f1f53 100644
--- a/leakcanary-android/src/main/res/values/leak_canary_strings.xml
+++ b/leakcanary-android/src/main/res/values/leak_canary_strings.xml
@@ -34,7 +34,7 @@
   <string name="leak_canary_storage_permission_activity_label">Storage permission</string>
   <string name="leak_canary_toast_heap_dump">Dumping memory, app will freeze. Brrrr.</string>
   <string name="leak_canary_delete">Delete</string>
-  <string name="leak_canary_failure_report">"Please report this failure to http://github.com/square/leakcanary\n"</string>
+  <string name="leak_canary_failure_report">"Please report this failure to http://github.com/square/leakcanary and share the heapdump file that caused it.\n"</string>
   <string name="leak_canary_delete_all">Delete all</string>
   <string name="leak_canary_delete_all_leaks_title">Are you sure you want to delete all leaks?</string>
   <string name="leak_canary_could_not_save_title">Could not save result.</string>
diff --git a/leakcanary-android/src/main/res/xml/leak_canary_file_paths.xml b/leakcanary-android/src/main/res/xml/leak_canary_file_paths.xml
index 8fa00f15..05952829 100644
--- a/leakcanary-android/src/main/res/xml/leak_canary_file_paths.xml
+++ b/leakcanary-android/src/main/res/xml/leak_canary_file_paths.xml
@@ -1,4 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <paths>
   <external-path name="downloads" path="Download/" />
+  <files-path name="leakcanary" path="leakcanary/" />
+
 </paths>
