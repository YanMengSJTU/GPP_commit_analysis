diff --git a/build.gradle b/build.gradle
index b5b0528b..8a60622e 100644
--- a/build.gradle
+++ b/build.gradle
@@ -27,6 +27,6 @@ ext {
   javaVersion = JavaVersion.VERSION_1_7
 
   GROUP = 'com.github.veqtor'
-  VERSION_NAME = "1.5.3"
+  VERSION_NAME = "1.5.4"
 }
 
diff --git a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/AbstractAnalysisResultService.java b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/AbstractAnalysisResultService.java
new file mode 100644
index 00000000..3340f34e
--- /dev/null
+++ b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/AbstractAnalysisResultService.java
@@ -0,0 +1,27 @@
+//
+// Source code recreated from a .class file by IntelliJ IDEA
+// (powered by Fernflower decompiler)
+//
+
+package com.squareup.leakcanary;
+
+import android.app.IntentService;
+import android.content.Context;
+import android.content.Intent;
+
+public abstract class AbstractAnalysisResultService extends IntentService {
+
+    public static void sendResultToListener(Context context, String listenerServiceClassName, HeapDump heapDump, AnalysisResult result) {
+
+    }
+
+    public AbstractAnalysisResultService() {
+        super(AbstractAnalysisResultService.class.getName());
+    }
+
+    protected final void onHandleIntent(Intent intent) {
+
+    }
+
+    protected abstract void onHeapAnalyzed(HeapDump var1, AnalysisResult var2);
+}
diff --git a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/AnalysisResult.java b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/AnalysisResult.java
new file mode 100644
index 00000000..046c1bb8
--- /dev/null
+++ b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/AnalysisResult.java
@@ -0,0 +1,26 @@
+//
+// Source code recreated from a .class file by IntelliJ IDEA
+// (powered by Fernflower decompiler)
+//
+
+package com.squareup.leakcanary;
+
+import java.io.Serializable;
+
+public final class AnalysisResult implements Serializable {
+
+    public static AnalysisResult noLeak(long analysisDurationMs) {
+        return new AnalysisResult(false, false, (String)null, (LeakTrace)null, (Throwable)null, 0L, analysisDurationMs);
+    }
+
+    public static AnalysisResult leakDetected(boolean excludedLeak, String className, LeakTrace leakTrace, long retainedHeapSize, long analysisDurationMs) {
+        return new AnalysisResult(true, excludedLeak, className, leakTrace, (Throwable)null, retainedHeapSize, analysisDurationMs);
+    }
+
+    public static AnalysisResult failure(Throwable failure, long analysisDurationMs) {
+        return new AnalysisResult(false, false, (String)null, (LeakTrace)null, failure, 0L, analysisDurationMs);
+    }
+
+    private AnalysisResult(boolean leakFound, boolean excludedLeak, String className, LeakTrace leakTrace, Throwable failure, long retainedHeapSize, long analysisDurationMs) {
+    }
+}
diff --git a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/DisplayLeakService.java b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
new file mode 100644
index 00000000..69512d79
--- /dev/null
+++ b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
@@ -0,0 +1,16 @@
+//
+// Source code recreated from a .class file by IntelliJ IDEA
+// (powered by Fernflower decompiler)
+//
+
+package com.squareup.leakcanary;
+public class DisplayLeakService extends AbstractAnalysisResultService {
+    public DisplayLeakService() {
+    }
+
+    protected final void onHeapAnalyzed(HeapDump heapDump, AnalysisResult result) {
+    }
+
+    protected void afterDefaultHandling(HeapDump heapDump, AnalysisResult result, String leakInfo) {
+    }
+}
diff --git a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/ExcludedRefs.java b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/ExcludedRefs.java
index ccde6d19..bc35e629 100644
--- a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/ExcludedRefs.java
+++ b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/ExcludedRefs.java
@@ -16,8 +16,6 @@
 package com.squareup.leakcanary;
 
 import java.io.Serializable;
-import java.util.LinkedHashMap;
-import java.util.Map;
 /**
  * Prevents specific references from being taken into account when computing the shortest reference
  * path from a suspected leaking instance to the GC roots.
@@ -66,14 +64,6 @@ public static Builder builder() {
 
     public static final class BuilderWithParams implements Builder {
 
-        private final Map<String, Map<String, ParamsBuilder>> fieldNameByClassName =
-                new LinkedHashMap<>();
-        private final Map<String, Map<String, ParamsBuilder>> staticFieldNameByClassName =
-                new LinkedHashMap<>();
-        private final Map<String, ParamsBuilder> threadNames = new LinkedHashMap<>();
-        private final Map<String, ParamsBuilder> classNames = new LinkedHashMap<>();
-        private final Map<String, ParamsBuilder> rootClassNames = new LinkedHashMap<>();
-
         private ParamsBuilder lastParams;
 
         BuilderWithParams() {
diff --git a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/Exclusion.java b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/Exclusion.java
new file mode 100644
index 00000000..2c48794c
--- /dev/null
+++ b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/Exclusion.java
@@ -0,0 +1,15 @@
+//
+// Source code recreated from a .class file by IntelliJ IDEA
+// (powered by Fernflower decompiler)
+//
+
+package com.squareup.leakcanary;
+
+import com.squareup.leakcanary.ExcludedRefs.ParamsBuilder;
+import java.io.Serializable;
+
+public final class Exclusion implements Serializable {
+
+    Exclusion(ParamsBuilder builder) {
+    }
+}
diff --git a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/LeakTrace.java b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/LeakTrace.java
new file mode 100644
index 00000000..8e17cd68
--- /dev/null
+++ b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/LeakTrace.java
@@ -0,0 +1,24 @@
+//
+// Source code recreated from a .class file by IntelliJ IDEA
+// (powered by Fernflower decompiler)
+//
+
+package com.squareup.leakcanary;
+
+import java.io.Serializable;
+import java.util.List;
+
+public final class LeakTrace implements Serializable {
+
+    LeakTrace(List<LeakTraceElement> elements) {
+    }
+
+    public String toString() {
+        return "";
+    }
+
+    public String toDetailedString() {
+        return "";
+
+    }
+}
diff --git a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/LeakTraceElement.java b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/LeakTraceElement.java
new file mode 100644
index 00000000..ec0ee415
--- /dev/null
+++ b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/LeakTraceElement.java
@@ -0,0 +1,46 @@
+//
+// Source code recreated from a .class file by IntelliJ IDEA
+// (powered by Fernflower decompiler)
+//
+
+package com.squareup.leakcanary;
+
+import java.io.Serializable;
+import java.util.List;
+
+public final class LeakTraceElement implements Serializable {
+
+    LeakTraceElement(String referenceName, LeakTraceElement.Type type, LeakTraceElement.Holder holder, String className, String extra, Exclusion exclusion, List<String> fields) {
+
+    }
+
+    public String toString() {
+        String string = "";
+        return string;
+    }
+
+    public String toDetailedString() {
+        String string = "* ";
+        return string;
+    }
+
+    public static enum Holder {
+        OBJECT,
+        CLASS,
+        THREAD,
+        ARRAY;
+
+        private Holder() {
+        }
+    }
+
+    public static enum Type {
+        INSTANCE_FIELD,
+        STATIC_FIELD,
+        LOCAL,
+        ARRAY_ENTRY;
+
+        private Type() {
+        }
+    }
+}
diff --git a/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/ServiceHeapDumpListener.java b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/ServiceHeapDumpListener.java
new file mode 100644
index 00000000..bda322e1
--- /dev/null
+++ b/leakcanary-android-no-op/src/main/java/com/squareup/leakcanary/ServiceHeapDumpListener.java
@@ -0,0 +1,18 @@
+//
+// Source code recreated from a .class file by IntelliJ IDEA
+// (powered by Fernflower decompiler)
+//
+
+package com.squareup.leakcanary;
+
+import android.content.Context;
+import com.squareup.leakcanary.HeapDump.Listener;
+
+public final class ServiceHeapDumpListener implements Listener {
+
+    public ServiceHeapDumpListener(Context context, Class<? extends AbstractAnalysisResultService> listenerServiceClass) {
+    }
+
+    public void analyze(HeapDump heapDump) {
+    }
+}
