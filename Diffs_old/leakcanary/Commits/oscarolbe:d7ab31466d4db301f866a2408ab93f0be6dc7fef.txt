diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java
index 1081ae34..58ed8971 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java
@@ -47,25 +47,43 @@ public static RefWatcher install(Application application) {
    * activity references (on ICS+).
    */
   public static RefWatcher install(Application application,
-      Class<? extends AbstractAnalysisResultService> listenerServiceClass,
-      ExcludedRefs excludedRefs) {
+                                   Class<? extends AbstractAnalysisResultService> listenerServiceClass,
+                                   ExcludedRefs excludedRefs) {
     if (isInAnalyzerProcess(application)) {
       return RefWatcher.DISABLED;
     }
     enableDisplayLeakActivity(application);
     HeapDump.Listener heapDumpListener =
-        new ServiceHeapDumpListener(application, listenerServiceClass);
-    RefWatcher refWatcher = androidWatcher(application, heapDumpListener, excludedRefs);
+            new ServiceHeapDumpListener(application, listenerServiceClass);
+    RefWatcher refWatcher = androidWatcher(application, heapDumpListener, excludedRefs, new DefaultLeakDirectoryProvider(application));
     ActivityRefWatcher.installOnIcsPlus(application, refWatcher);
     return refWatcher;
   }
 
+  /**
+   * Creates a {@link RefWatcher} that reports results to the provided service, and starts watching
+   * activity references (on ICS+).
+   */
+  public static RefWatcher install(Application application,
+                                   Class<? extends AbstractAnalysisResultService> listenerServiceClass,
+                                   ExcludedRefs excludedRefs, LeakDirectoryProvider leakDirectoryProvider) {
+    if (isInAnalyzerProcess(application)) {
+      return RefWatcher.DISABLED;
+    }
+    enableDisplayLeakActivity(application);
+    HeapDump.Listener heapDumpListener =
+            new ServiceHeapDumpListener(application, listenerServiceClass);
+    RefWatcher refWatcher = androidWatcher(application, heapDumpListener, excludedRefs, leakDirectoryProvider);
+    ActivityRefWatcher.installOnIcsPlus(application, refWatcher);
+    return refWatcher;
+  }
+
+
   /**
    * Creates a {@link RefWatcher} with a default configuration suitable for Android.
    */
   public static RefWatcher androidWatcher(Context context, HeapDump.Listener heapDumpListener,
-      ExcludedRefs excludedRefs) {
-    LeakDirectoryProvider leakDirectoryProvider = new DefaultLeakDirectoryProvider(context);
+      ExcludedRefs excludedRefs, LeakDirectoryProvider leakDirectoryProvider) {
     DebuggerControl debuggerControl = new AndroidDebuggerControl();
     AndroidHeapDumper heapDumper = new AndroidHeapDumper(context, leakDirectoryProvider);
     heapDumper.cleanup();
