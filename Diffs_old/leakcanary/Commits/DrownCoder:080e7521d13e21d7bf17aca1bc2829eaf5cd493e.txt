diff --git a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HeapAnalyzer.java b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HeapAnalyzer.java
index 0075abcd..9bdf8197 100644
--- a/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HeapAnalyzer.java
+++ b/leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HeapAnalyzer.java
@@ -111,6 +111,7 @@ public AnalysisResult checkForLeak(File heapDumpFile, String referenceKey) {
     }
 
     try {
+      // 将 dump 文件解析成 snapshot 对象，haha库的用法
       HprofBuffer buffer = new MemoryMappedFileBuffer(heapDumpFile);
       HprofParser parser = new HprofParser(buffer);
       Snapshot snapshot = parser.parse();
@@ -122,7 +123,7 @@ public AnalysisResult checkForLeak(File heapDumpFile, String referenceKey) {
       if (leakingRef == null) {
         return noLeak(since(analysisStartNanoTime));
       }
-
+      // 找到泄漏路径
       return findLeakTrace(analysisStartNanoTime, snapshot, leakingRef);
     } catch (Throwable e) {
       return failure(e, since(analysisStartNanoTime));
@@ -199,6 +200,7 @@ private AnalysisResult findLeakTrace(long analysisStartNanoTime, Snapshot snapsh
       retainedSize += computeIgnoredBitmapRetainedSize(snapshot, leakingInstance);
     }
 
+    // 使用haha这个库去建立最短引用路径
     return leakDetected(result.excludingKnownLeaks, className, leakTrace, retainedSize,
         since(analysisStartNanoTime));
   }
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/AbstractAnalysisResultService.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/AbstractAnalysisResultService.java
index 9b193831..74cd3dad 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/AbstractAnalysisResultService.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/AbstractAnalysisResultService.java
@@ -32,6 +32,7 @@ public static void sendResultToListener(Context context, String listenerServiceC
     } catch (ClassNotFoundException e) {
       throw new RuntimeException(e);
     }
+    //启动Service通知，抽象类，DisplayLeakService
     Intent intent = new Intent(context, listenerServiceClass);
     intent.putExtra(HEAP_DUMP_EXTRA, heapDump);
     intent.putExtra(RESULT_EXTRA, result);
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
index 6bf9450a..cff51d0c 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
@@ -56,10 +56,12 @@
     String contentText;
 
     if (!shouldSaveResult) {
+      //无泄露
       contentTitle = getString(R.string.leak_canary_no_leak_title);
       contentText = getString(R.string.leak_canary_no_leak_text);
       pendingIntent = null;
     } else if (resultSaved) {
+      //获得一个pendingIntent
       pendingIntent = DisplayLeakActivity.createPendingIntent(this, heapDump.referenceKey);
 
       if (result.failure == null) {
@@ -81,6 +83,7 @@
     }
     // New notification id every second.
     int notificationId = (int) (SystemClock.uptimeMillis() / 1000);
+    //显示一个通知，显示内存泄漏
     showNotification(this, contentTitle, contentText, pendingIntent, notificationId);
     afterDefaultHandling(heapDump, result, leakInfo);
   }
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/ServiceHeapDumpListener.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/ServiceHeapDumpListener.java
index 2ccb1422..ecc03819 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/ServiceHeapDumpListener.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/ServiceHeapDumpListener.java
@@ -36,6 +36,7 @@ public ServiceHeapDumpListener(Context context,
 
   @Override public void analyze(HeapDump heapDump) {
     checkNotNull(heapDump, "heapDump");
+    //开启HeapAnalyzerService，是一个HandlerService
     HeapAnalyzerService.runAnalysis(context, heapDump, listenerServiceClass);
   }
 }
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/HeapAnalyzerService.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/HeapAnalyzerService.java
index d03dad94..2bcdbece 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/HeapAnalyzerService.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/HeapAnalyzerService.java
@@ -54,8 +54,9 @@ public HeapAnalyzerService() {
     HeapDump heapDump = (HeapDump) intent.getSerializableExtra(HEAPDUMP_EXTRA);
 
     HeapAnalyzer heapAnalyzer = new HeapAnalyzer(heapDump.excludedRefs);
-
+    //分析获得结果
     AnalysisResult result = heapAnalyzer.checkForLeak(heapDump.heapDumpFile, heapDump.referenceKey);
+    //回调结果
     AbstractAnalysisResultService.sendResultToListener(this, listenerClassName, heapDump, result);
   }
 }
diff --git a/leakcanary-watcher/src/main/java/com/squareup/leakcanary/RefWatcher.java b/leakcanary-watcher/src/main/java/com/squareup/leakcanary/RefWatcher.java
index 255d9c34..b5c2b292 100644
--- a/leakcanary-watcher/src/main/java/com/squareup/leakcanary/RefWatcher.java
+++ b/leakcanary-watcher/src/main/java/com/squareup/leakcanary/RefWatcher.java
@@ -133,13 +133,14 @@ private void ensureGoneAsync(final long watchStartNanoTime, final KeyedWeakRefer
       //如果该对象仍然在retainedKey中，则说明内存泄漏了，进行分析
       long startDumpHeap = System.nanoTime();
       long gcDurationMs = NANOSECONDS.toMillis(startDumpHeap - gcStartNanoTime);
-
+      // dump出来heap，此时认为内存确实已经泄漏了
       File heapDumpFile = heapDumper.dumpHeap();
       if (heapDumpFile == RETRY_LATER) {
         // Could not dump the heap.
         return RETRY;
       }
       long heapDumpDurationMs = NANOSECONDS.toMillis(System.nanoTime() - startDumpHeap);
+      //开始分析
       heapdumpListener.analyze(
           new HeapDump(heapDumpFile, reference.key, reference.name, excludedRefs, watchDurationMs,
               gcDurationMs, heapDumpDurationMs));
