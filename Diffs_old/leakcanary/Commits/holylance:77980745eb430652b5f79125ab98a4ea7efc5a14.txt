diff --git a/docs/changelog.md b/docs/changelog.md
index 02cf6832..47d903d8 100644
--- a/docs/changelog.md
+++ b/docs/changelog.md
@@ -1,6 +1,6 @@
 # Change Log
 
-## Version 2.0 Beta 1 (2019-17-30)
+## Version 2.0 Beta 1 (2019-07-30)
 
 LeakCanary 2 reached **beta status**: the internals and APIs are mostly stable.
 
@@ -9,7 +9,7 @@ Now is a great time to adopt it and provide feedback before the stable release.
 * New standalone library! [Shark](shark.md) is the heap analyzer that powers LeakCanary 2, and it can run in any Java VM. It comes with a [CLI](shark.md#shark-cli): you can now run `shark-cli analyze-process com.example.myapp` from your computer.
 * New Heap Explorer directly on device! Open a Heap Analysis in LeakCanary, tap the options menu and select "Heap Explorer". This is still experimental and not very user friendly, contributions welcome!
 * **Large API rewrite** to improve usability. If you used the alpha with a customized configuration, there are breaking changes. Of note: LeakSentry became [AppWatcher](/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/), RefWatcher became [ObjectWatcher](/api/leakcanary-object-watcher/leakcanary/-object-watcher/), AndroidExcludedRefs became [AndroidReferenceMatchers](/api/shark-android/shark/-android-reference-matchers/), AnalysisResultListener became [OnHeapAnalyzedListener](/api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/), AndroidLeakTraceInspectors became [AndroidObjectInspectors](/api/shark-android/shark/-android-object-inspectors/).
-* The entire API surface is now documented and the documentation is available on this website: try the search bar at the top and **LeakCanary API ∨** in the navigation menu.
+* The entire API surface is now documented and the documentation is available on this website: see the **LeakCanary API** tab at the top.
 * Removed the **dependency on Android X**. No more configuration issues! [#1462](https://github.com/square/leakcanary/issues/1462) 
 * Added **Proguard rules** for LeakCanary and ObjectWatcher. [#1500](https://github.com/square/leakcanary/pull/1500) 
 * Display LeakCanary version in the About screen. [#1448](https://github.com/square/leakcanary/issues/1448) 
diff --git a/docs/contributing.md b/docs/contributing.md
index 7b4fb258..956b4d8c 100644
--- a/docs/contributing.md
+++ b/docs/contributing.md
@@ -1,8 +1,7 @@
 # Contributing
 
-If you would like to contribute code to LeakCanary you can do so through GitHub by
-forking the repository and sending a pull request.
+You are most welcome to contribute code, answer [StackOverflow questions](http://stackoverflow.com/questions/tagged/leakcanary?sort=active), help manage GitHub issues and review pull requests.
 
-When submitting code, please make every effort to follow existing conventions
-and style in order to keep the code as readable as possible. Please also make
-sure your code compiles by running `./gradlew build`.
+If you would like to contribute code to LeakCanary you can do so through GitHub by
+forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions
+and style in order to keep the code as readable as possible.
\ No newline at end of file
diff --git a/docs/recipes.md b/docs/recipes.md
index 4559a6bf..3c3c2503 100644
--- a/docs/recipes.md
+++ b/docs/recipes.md
@@ -2,29 +2,6 @@
 
 If you think a recipe might be missing or you're not sure that what you're trying to achieve is possible with the current APIs, please [file an issue](https://github.com/square/leakcanary/issues/new/choose). Your feedback help us make LeakCanary better for the entire community.
 
-## Configuring AppWatcher in `object-watcher-android`
-
-AppWatcher is in charge of detecting retained objects. Its configuration can be updated at any time by replacing [AppWatcher.config](/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/config/):
-```kotlin
-class DebugExampleApplication : ExampleApplication() {
-
-  override fun onCreate() {
-    super.onCreate()
-    AppWatcher.config = AppWatcher.config.copy(watchFragmentViews = false)
-  }
-}
-```
-
-## Configuring LeakCanary
-
-LeakCanary can be configured by replacing [LeakCanary.config](/api/leakcanary-android-core/leakcanary/-leak-canary/config/):
-
-```kotlin
-disableLeakCanaryButton.setOnClickListener {
-  LeakCanary.config = LeakCanary.config.copy(dumpHeap = false)
-}
-```
-
 ## Watching objects with a lifecycle
 
 In your application, you may have other objects with a lifecycle, such as fragments, services, Dagger components, etc. Use [AppWatcher.objectWatcher](/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/object-watcher/) to watch instances that should be garbage collected:
@@ -41,6 +18,47 @@ class MyService : Service {
 }
 ```
 
+## Configuration
+
+To customize the detection of retained objects at runtime, update [AppWatcher.config](/api/leakcanary-object-watcher-android/leakcanary/-app-watcher/config/):
+
+```
+AppWatcher.config = AppWatcher.config.copy(watchFragmentViews = false)
+```
+
+To customize the heap dumping & analysis, update [LeakCanary.config](/api/leakcanary-android-core/leakcanary/-leak-canary/config/):
+
+```
+LeakCanary.config = LeakCanary.config.copy(retainedVisibleThreshold = 3)
+```
+
+The LeakCanary UI can be configured by overriding the following resources:
+
+```xml
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <public name="leak_canary_display_activity_label" type="string"/>
+  <public name="leak_canary_heap_dump_toast" type="layout"/>
+  <public name="leak_canary_icon" type="mipmap"/>
+  <public name="leak_canary_add_dynamic_shortcut" type="bool"/>
+  <public name="leak_canary_add_launcher_icon" type="bool"/>
+</resources>
+```
+
+## Disabling LeakCanary
+
+Sometimes it's necessary to disable LeakCanary temporarily, for example for a product demo or when running performance tests. You have different options, depending on what you're trying to achieve:
+
+* Create a build variant that does not include the LeakCanary dependencies, see [Setting up LeakCanary for different product flavors](#setting-up-leakcanary-for-different-product-flavors).
+* Disable the tracking of retained objects: `AppWatcher.config = AppWatcher.config.copy(enabled = false)`.
+* Disable the heap dumping & analysis: `LeakCanary.config = LeakCanary.config.copy(dumpHeap = false)`.
+* Hide the leak display activity launcher icon: override `R.bool.leak_canary_add_launcher_icon` or call `LeakCanary.showLeakDisplayActivityLauncherIcon(false)`
+
+!!! info
+    When you set `AppWatcher.config.enabled` to false, `AppWatcher.objectWatcher` will stop creating weak references to destroyed objects.
+
+	If instead you set `LeakCanary.Config.dumpHeap` to false, `AppWatcher.objectWatcher` will still keep track of retained objects, and LeakCanary will look for these objects when you change `LeakCanary.Config.dumpHeap` back to true.
+
 ## Counting retained instances in production
 
 `com.squareup.leakcanary:leakcanary-android` should only be used in debug builds. It depends on `com.squareup.leakcanary:object-watcher-android` which you can use in production to track and count retained instances.
@@ -49,7 +67,7 @@ In your `build.gradle`:
 
 ```gradle
 dependencies {
-  implementation 'com.squareup.leakcanary:object-watcher-android:2.0-alpha-2'
+  implementation 'com.squareup.leakcanary:object-watcher-android:2.0-beta-1'
 }
 ```
 
diff --git a/docs/support.md b/docs/support.md
index e8527600..13a92c9a 100644
--- a/docs/support.md
+++ b/docs/support.md
@@ -1,14 +1,12 @@
 # LeakCanary Support
 
-If you're looking for support for LeakCanary:
+If you're looking for help with LeakCanary:
 
 * Learn the [Fundamentals](fundamentals.md)
 * Try the [code recipes](recipes.md)
 * Read the [FAQ](https://square.github.io/leakcanary/faq/)
 * Watch [recorded presentations](recorded-presentations.md)
 * Read [blog articles](blog-articles.md)
-* Check out the StackOverflow [LeakCanary tag](http://stackoverflow.com/questions/tagged/leakcanary?sort=active) and ask a question
-
-Feel free to edit this file to add links to online communities that can help developers investigate LeakCanary leaks.
+* Ask a question [on StackOverflow](http://stackoverflow.com/questions/tagged/leakcanary?sort=active)
 
 
diff --git a/docs/upgrading-to-leakcanary-2.0.md b/docs/upgrading-to-leakcanary-2.0.md
index 48221383..67d5d4c8 100644
--- a/docs/upgrading-to-leakcanary-2.0.md
+++ b/docs/upgrading-to-leakcanary-2.0.md
@@ -1,3 +1,10 @@
+LeakCanary 2 is a major rewrite. High level changes:
+
+* New heap analyzer, reimplemented from scratch to use 10 times less memory ([see Shark](shark.md)).
+* APIs updated to simplify configuration and provide access to the new heap analyzer.
+* Internals rewritten to 100% Kotlin.
+* Multiple leaks detected in one analysis, grouped per leak type
+
 ## Dependencies
 
 ### Before
diff --git a/leakcanary-android-core/src/main/java/leakcanary/LeakCanary.kt b/leakcanary-android-core/src/main/java/leakcanary/LeakCanary.kt
index 43175756..d1137c82 100644
--- a/leakcanary-android-core/src/main/java/leakcanary/LeakCanary.kt
+++ b/leakcanary-android-core/src/main/java/leakcanary/LeakCanary.kt
@@ -151,6 +151,24 @@ object LeakCanary {
    */
   fun newLeakDisplayActivityIntent() = InternalLeakCanary.leakDisplayActivityIntent
 
+  /**
+   * Dynamically shows / hides the launcher icon for the leak display activity.
+   * Note: you can change the default value by overriding the leak_canary_add_launcher_icon
+   * boolean resource:
+   *
+   * ```
+   * <?xml version="1.0" encoding="utf-8"?>
+   * <resources>
+   *   <bool name="leak_canary_add_launcher_icon">false</bool>
+   * </resources>
+   * ```
+   */
+  fun showLeakDisplayActivityLauncherIcon(showLauncherIcon: Boolean) {
+    InternalLeakCanary.setEnabledBlocking(
+        "leakcanary.internal.activity.LeakLauncherActivity", showLauncherIcon
+    )
+  }
+
   /**
    * Immediately triggers a heap dump and analysis, if there is at least one retained instance
    * tracked by [AppWatcher.objectWatcher]. If there are no retained instances then the heap will not
diff --git a/leakcanary-android-core/src/main/java/leakcanary/internal/InternalLeakCanary.kt b/leakcanary-android-core/src/main/java/leakcanary/internal/InternalLeakCanary.kt
index bd5ed793..aad91994 100644
--- a/leakcanary-android-core/src/main/java/leakcanary/internal/InternalLeakCanary.kt
+++ b/leakcanary-android-core/src/main/java/leakcanary/internal/InternalLeakCanary.kt
@@ -4,6 +4,9 @@ import android.app.Application
 import android.app.Instrumentation
 import android.content.ComponentName
 import android.content.Intent
+import android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED
+import android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_ENABLED
+import android.content.pm.PackageManager.DONT_KILL_APP
 import android.content.pm.ShortcutInfo.Builder
 import android.content.pm.ShortcutManager
 import android.graphics.drawable.Icon
@@ -66,7 +69,8 @@ internal object InternalLeakCanary : (Application) -> Unit, OnObjectRetainedList
     val backgroundHandler = Handler(handlerThread.looper)
 
     heapDumpTrigger = HeapDumpTrigger(
-        application, backgroundHandler, AppWatcher.objectWatcher, gcTrigger, heapDumper, configProvider
+        application, backgroundHandler, AppWatcher.objectWatcher, gcTrigger, heapDumper,
+        configProvider
     )
     application.registerVisibilityListener { applicationVisible ->
       this.applicationVisible = applicationVisible
@@ -222,6 +226,17 @@ internal object InternalLeakCanary : (Application) -> Unit, OnObjectRetainedList
     }
   }
 
+  fun setEnabledBlocking(
+    componentClassName: String,
+    enabled: Boolean
+  ) {
+    val component = ComponentName(application, componentClassName)
+    val newState =
+      if (enabled) COMPONENT_ENABLED_STATE_ENABLED else COMPONENT_ENABLED_STATE_DISABLED
+    // Blocks on IPC.
+    application.packageManager.setComponentEnabledSetting(component, newState, DONT_KILL_APP)
+  }
+
   inline fun <reified T : Any> noOpDelegate(): T {
     val javaClass = T::class.java
     val noOpHandler = InvocationHandler { _, _, _ ->
diff --git a/mkdocs.yml b/mkdocs.yml
index 8fdce2f0..7f66932a 100644
--- a/mkdocs.yml
+++ b/mkdocs.yml
@@ -19,6 +19,8 @@ theme:
   palette:
     primary: 'deep-orange'
     accent: 'deep-purple'
+  feature:
+    tabs: true
 
 markdown_extensions:
   - smarty
@@ -45,27 +47,29 @@ nav:
   - 'Fundamentals': fundamentals.md
   - 'Code recipes': recipes.md
   - 'FAQ': faq.md
-  - 'Shark': shark.md
-  - 'Stack Overflow ⏏': https://stackoverflow.com/questions/tagged/leakcanary?sort=active
+  - 'Change Log': changelog.md
+  - 'Help & Community':
+    - 'Support': support.md
+    - 'Upgrading to LeakCanary 2': upgrading-to-leakcanary-2.0.md
+    - 'Recorded Presentations': recorded-presentations.md
+    - 'Blog Articles': blog-articles.md
+    - 'Stack Overflow ⏏': https://stackoverflow.com/questions/tagged/leakcanary?sort=active
+    - 'Contributing': contributing.md
+    - 'Code of Conduct': code_of_conduct.md
+  - 'Shark':
+    - 'Overview': shark.md
+    - 'Shark API':
+      - 'Shark': api/shark/shark/index.md
+      - 'Extension: Shark Android': api/shark-android/shark/index.md
+      - 'Core: Graph': api/shark-graph/shark/index.md
+      - 'Core: Hprof': api/shark-hprof/shark/index.md
+      - 'Core: Logs': api/shark-log/shark/index.md
   - 'LeakCanary API':
     - 'LeakCanary': api/leakcanary-android-core/leakcanary/index.md
     - 'ObjectWatcher Android': api/leakcanary-object-watcher-android/leakcanary/index.md
     - 'Extension: Instrumentation tests': api/leakcanary-android-instrumentation/leakcanary/index.md
     - 'Extension: Separate process': api/leakcanary-android-process/leakcanary/index.md
     - 'Core: ObjectWatcher': api/leakcanary-object-watcher/leakcanary/index.md
-  - 'Shark API':
-    - 'Shark': api/shark/shark/index.md
-    - 'Extension: Shark Android': api/shark-android/shark/index.md
-    - 'Core: Graph': api/shark-graph/shark/index.md
-    - 'Core: Hprof': api/shark-hprof/shark/index.md
-    - 'Core: Logs': api/shark-log/shark/index.md
-  - 'Change Log': changelog.md
-  - 'Support': support.md
-  - 'Upgrading to LeakCanary 2': upgrading-to-leakcanary-2.0.md
-  - 'Blog Articles': blog-articles.md
-  - 'Recorded Presentations': recorded-presentations.md
-  - 'Contributing': contributing.md
-  - 'Code of Conduct': code_of_conduct.md
 
 # Google Analytics. Add export LEAKCANARY_GOOGLE_ANALYTICS_KEY="UA-XXXXXXXXX-X" to your ~/.bashrc
 google_analytics:
diff --git a/shark-android/src/main/java/shark/AndroidObjectInspectors.kt b/shark-android/src/main/java/shark/AndroidObjectInspectors.kt
index 2d963441..01826916 100644
--- a/shark-android/src/main/java/shark/AndroidObjectInspectors.kt
+++ b/shark-android/src/main/java/shark/AndroidObjectInspectors.kt
@@ -69,12 +69,16 @@ enum class AndroidObjectInspectors : ObjectInspector {
               likelyLeakingReasons += "View detached and has parent"
             } else {
               val viewParent = mParentRef.asObject!!.asInstance!!
-              if (viewParent instanceOf "android.view.View" &&
-                  viewParent["android.view.View", "mAttachInfo"]!!.value.isNullReference
-              ) {
-                likelyLeakingReasons += "View attached but parent detached (attach disorder)"
+              if (viewParent instanceOf "android.view.View") {
+                if (viewParent["android.view.View", "mAttachInfo"]!!.value.isNullReference) {
+                  likelyLeakingReasons += "View attached but parent ${viewParent.instanceClassName} detached (attach disorder)"
+                } else {
+                  notLeakingReasons += "View attached"
+                  labels += "View.parent ${viewParent.instanceClassName} attached as well"
+                }
               } else {
                 notLeakingReasons += "View attached"
+                labels += "Parent ${viewParent.instanceClassName} not a android.view.View"
               }
             }
           }
diff --git a/shark-android/src/main/java/shark/AndroidReferenceMatchers.kt b/shark-android/src/main/java/shark/AndroidReferenceMatchers.kt
index a25e3376..d33e06e4 100644
--- a/shark-android/src/main/java/shark/AndroidReferenceMatchers.kt
+++ b/shark-android/src/main/java/shark/AndroidReferenceMatchers.kt
@@ -202,7 +202,7 @@ enum class AndroidReferenceMatchers {
           description =
           "HUAWEI added a mLastSrvView field to InputMethodManager" + " that leaks a reference to the last served view."
       ) {
-        manufacturer == HUAWEI && sdkInt in 23..27
+        manufacturer == HUAWEI && sdkInt in 23..28
       }
 
       references += instanceFieldLeak(
@@ -462,7 +462,7 @@ enum class AndroidReferenceMatchers {
               + " Fixed in AOSP: https://android.googlesource.com/platform/frameworks/base/+"
               + "/5b734f2430e9f26c769d6af8ea5645e390fcf5af%5E%21/"
       ) {
-        sdkInt <= 22
+        sdkInt <= 23
       }
     }
   },
@@ -513,6 +513,49 @@ enum class AndroidReferenceMatchers {
     }
   },
 
+  CHANGE_WATCHER {
+    override fun add(references: MutableList<ReferenceMatcher>) {
+      references += instanceFieldLeak(
+          "android.widget.TextView\$ChangeWatcher", "this\$0"
+          ,
+          description = "AssistStructure (google assistant / autofill) holds on to text spannables" +
+              " on the screen. One such spannables is unfortunately TextView.ChangeWatcher, which" +
+              " ends up leaking the textview."
+      ) {
+        sdkInt in 24..25
+      }
+    }
+  },
+
+  BIOMETRIC_PROMPT {
+    override fun add(references: MutableList<ReferenceMatcher>) {
+      references += instanceFieldLeak(
+          "android.hardware.biometrics.BiometricPrompt", "mFingerprintManager"
+          ,
+          description = "BiometricPrompt holds on to a FingerprintManager which holds on to a " +
+              "destroyed activity."
+      ) {
+        sdkInt == 28
+      }
+    }
+  },
+
+  MAGNIFIER {
+    override fun add(references: MutableList<ReferenceMatcher>) {
+      references += instanceFieldLeak(
+          "android.widget.Magnifier\$InternalPopupWindow", "mCallback"
+          ,
+          description = "android.widget.Magnifier.InternalPopupWindow registers a frame callback" +
+              " on android.view.ThreadedRenderer.SimpleRenderer which holds it as a native" +
+              " reference. android.widget.Editor\$InsertionHandleView registers an" +
+              " OnOperationCompleteCallback on Magnifier.InternalPopupWindow. These references are" +
+              " held after the activity has been destroyed."
+      ) {
+        sdkInt == 28
+      }
+    }
+  },
+
   BACKDROP_FRAME_RENDERER__MDECORVIEW {
     override fun add(
       references: MutableList<ReferenceMatcher>
@@ -562,7 +605,7 @@ enum class AndroidReferenceMatchers {
               children view forever. Future releases of Q will hold weak references.
             """.trimIndent()
       ) {
-        sdkInt == 28
+        sdkInt in 28..29
       }
     }
 
@@ -659,6 +702,30 @@ enum class AndroidReferenceMatchers {
     }
   },
 
+  CLIPBOARD_EX_MANAGER {
+    override fun add(
+      references: MutableList<ReferenceMatcher>
+    ) {
+      references += instanceFieldLeak(
+          "android.sec.clipboard.ClipboardExManager", "mContext",
+          description = "android.sec.clipboard.ClipboardExManager\$IClipboardDataPasteEventImpl\$1" +
+              " is a native callback that holds IClipboardDataPasteEventImpl which holds" +
+              " ClipboardExManager which has a destroyed activity as mContext"
+      ) {
+        manufacturer == SAMSUNG && sdkInt == 23
+      }
+      references += instanceFieldLeak(
+          "android.widget.TextView\$IClipboardDataPasteEventImpl", "this\$0",
+          description = "TextView\$IClipboardDataPasteEventImpl\$1 is held by a native ref, and" +
+              " IClipboardDataPasteEventImpl ends up leaking a detached textview"
+      ) {
+        manufacturer == SAMSUNG && sdkInt == 22
+      }
+    }
+  },
+
+
+
   SEM_EMERGENCY_MANAGER__MCONTEXT {
     override fun add(
       references: MutableList<ReferenceMatcher>
@@ -851,6 +918,20 @@ enum class AndroidReferenceMatchers {
     }
   },
 
+  SMART_COVER_MANAGER {
+    override fun add(
+      references: MutableList<ReferenceMatcher>
+    ) {
+      references += instanceFieldLeak(
+          "com.lge.systemservice.core.SmartCoverManager", "mContext",
+          description = "SmartCoverManager\$CallbackRegister is a callback held by a native ref," +
+              " and SmartCoverManager ends up leaking an activity context."
+      ) {
+        manufacturer == LG && sdkInt == 27
+      }
+    }
+  },
+
   MAPPER_CLIENT {
     override fun add(
       references: MutableList<ReferenceMatcher>
