diff --git "a/help/leakcanary-sample demo\346\210\252\345\233\276.png" "b/help/leakcanary-sample demo\346\210\252\345\233\276.png"
new file mode 100644
index 00000000..4bc6abb9
Binary files /dev/null and "b/help/leakcanary-sample demo\346\210\252\345\233\276.png" differ
diff --git a/leakcanary-sample/readme.md b/leakcanary-sample/readme.md
new file mode 100644
index 00000000..1cbc5080
--- /dev/null
+++ b/leakcanary-sample/readme.md
@@ -0,0 +1,9 @@
+demo工程
+从gradle配置：
+ debugCompile project(':leakcanary-android')
+ releaseCompile project(':leakcanary-android-no-op');
+可以知道debug环境引用leakcanary-android工程
+release环境引用leakcanary-android-no-op工程
+
+debug和release的区别：
+1）release环境isInAnalyzerProcess直接返回false,不会启动检测进程
diff --git a/leakcanary-sample/src/main/java/com/example/leakcanary/ExampleApplication.java b/leakcanary-sample/src/main/java/com/example/leakcanary/ExampleApplication.java
index 82f8c994..de3e9a40 100644
--- a/leakcanary-sample/src/main/java/com/example/leakcanary/ExampleApplication.java
+++ b/leakcanary-sample/src/main/java/com/example/leakcanary/ExampleApplication.java
@@ -17,6 +17,7 @@
 
 import android.app.Application;
 import android.os.StrictMode;
+
 import com.squareup.leakcanary.LeakCanary;
 
 public class ExampleApplication extends Application {
@@ -26,8 +27,11 @@
     if (LeakCanary.isInAnalyzerProcess(this)) {
       // This process is dedicated to LeakCanary for heap analysis.
       // You should not init your app in this process.
+      // 这个进程主要用于LeakCanary做堆栈分析，我们app的业务逻辑不能运行在这里
+      // release环境的LeakCanary,LeakCanary.isInAnalyzerProcess(this)直接返回false
       return;
     }
+
     enabledStrictMode();
     LeakCanary.install(this);
   }
diff --git a/leakcanary-sample/src/main/java/com/example/leakcanary/MainActivity.java b/leakcanary-sample/src/main/java/com/example/leakcanary/MainActivity.java
index 870f59b1..d220fb56 100644
--- a/leakcanary-sample/src/main/java/com/example/leakcanary/MainActivity.java
+++ b/leakcanary-sample/src/main/java/com/example/leakcanary/MainActivity.java
@@ -22,15 +22,27 @@
 import android.view.View;
 
 public class MainActivity extends Activity {
-
+  int i = 1;
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.main_activity);
 
     View button = findViewById(R.id.async_task);
     button.setOnClickListener(new View.OnClickListener() {
+      int ii = i;
       @Override public void onClick(View v) {
+
         startAsyncTask();
+//        System.out.println("czs======" + i);
+//        new AsyncTask<Void, Void, Void>() {
+//          @Override protected Void doInBackground(Void... params) {
+//            // Do some slow work in background
+//            System.out.println("czs=======" + ii);
+//            System.out.println("czs======" + i);
+//            SystemClock.sleep(20000);
+//            return null;
+//          }
+//        }.execute();
       }
     });
   }
@@ -39,9 +51,14 @@ void startAsyncTask() {
     // This async task is an anonymous class and therefore has a hidden reference to the outer
     // class MainActivity. If the activity gets destroyed before the task finishes (e.g. rotation),
     // the activity instance will leak.
+    // 匿名类，匿名类的声明是在编译时进行的，实例化在运行时进行
+    // 匿名类可被视为非静态的内部类，所以它们具有和方法内部声明的非静态内部类一样的权限和限制
+    // AsyncTask匿名类能引用到MainActivity到i，说明持有了MainActivity的实例，如果MainActivity destroy时
+    // 异步任务还引用到它，就释放不了，于是就内存泄漏了。
     new AsyncTask<Void, Void, Void>() {
       @Override protected Void doInBackground(Void... params) {
         // Do some slow work in background
+        System.out.println("czs=======" + i); // 能访问到i，说明能引用到MainActivity到实例
         SystemClock.sleep(20000);
         return null;
       }
