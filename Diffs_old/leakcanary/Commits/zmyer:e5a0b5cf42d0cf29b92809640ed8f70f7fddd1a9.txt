diff --git a/.travis.yml b/.travis.yml
index dba4114c..8ee7fed7 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,13 +1,5 @@
 language: android
 
-android:
-  components:
-    # Update tools and then platform-tools explicitly so lint gets an updated database. Can be removed once 3.0 is out.
-    - tools
-    - platform-tools
-    - extra-android-m2repository
-    - android-27
-
 jdk:
   - oraclejdk8
 
diff --git a/build.gradle b/build.gradle
index 18539284..0973e3f1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -3,7 +3,8 @@ apply plugin: 'com.github.ben-manes.versions'
 buildscript {
   ext.versions = [
     'minSdk': 14,
-    'compileSdk': 27,
+    'compileSdk': 28,
+    'errorProne': '2.3.1',
   ]
   repositories {
     jcenter()
@@ -11,9 +12,9 @@ buildscript {
     maven { url 'https://plugins.gradle.org/m2/' }
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:3.1.3'
-    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.13'
-    classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
+    classpath 'com.android.tools.build:gradle:3.1.4'
+    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16'
+    classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
   }
 }
 
@@ -49,7 +50,7 @@ subprojects {
         // Force all the error-prone dependencies to use the same version.
         if (details.requested.group == 'com.google.errorprone' &&
                 details.requested.name.startsWith('error_prone_')) {
-          details.useVersion '2.1.2'
+          details.useVersion versions.errorProne
         }
       }
     }
@@ -63,4 +64,8 @@ subprojects {
       showStackTraces true
     }
   }
+
+  dependencies {
+    errorprone "com.google.errorprone:error_prone_core:${versions.errorProne}"
+  }
 }
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index f6b961fd..0d4a9516 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index a4fc03df..7dc503f1 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.8-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.9-all.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java
index 34c92bba..8e34064d 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java
@@ -34,6 +34,7 @@
 import static android.os.Build.VERSION_CODES.N_MR1;
 import static android.os.Build.VERSION_CODES.O;
 import static android.os.Build.VERSION_CODES.O_MR1;
+import static android.os.Build.VERSION_CODES.P;
 import static com.squareup.leakcanary.AndroidWatchExecutor.LEAK_CANARY_THREAD_NAME;
 import static com.squareup.leakcanary.internal.LeakCanaryInternals.HUAWEI;
 import static com.squareup.leakcanary.internal.LeakCanaryInternals.LENOVO;
@@ -573,6 +574,17 @@
       excluded.instanceField("android.view.Choreographer$FrameDisplayEventReceiver",
           "mMessageQueue").alwaysExclude();
     }
+  },
+
+  VIEWLOCATIONHOLDER_ROOT(SDK_INT == P) {
+    @Override void add(ExcludedRefs.Builder excluded) {
+      //  In Android P, ViewLocationHolder has an mRoot field that is not cleared in its clear()
+      // method.
+      // Introduced in https://github.com/aosp-mirror/platform_frameworks_base/commit/86b326012813f09d8f1de7d6d26c986a909de894
+      // Bug report: https://issuetracker.google.com/issues/112792715
+      excluded.instanceField("android.view.ViewGroup$ViewLocationHolder",
+          "mRoot");
+    }
   };
 
   /**
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/CanaryLog.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/CanaryLog.java
index b4e288db..9db42e53 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/CanaryLog.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/CanaryLog.java
@@ -20,7 +20,7 @@
       if (formatted.length() < 4000) {
         Log.d("LeakCanary", formatted);
       } else {
-        String[] lines = formatted.split("\n");
+        String[] lines = formatted.split("\n", -1);
         for (String line : lines) {
           Log.d("LeakCanary", line);
         }
diff --git a/leakcanary-android/src/main/res/values-de/leak_canary_strings.xml b/leakcanary-android/src/main/res/values-de/leak_canary_strings.xml
index 111874fd..a7f3cde1 100644
--- a/leakcanary-android/src/main/res/values-de/leak_canary_strings.xml
+++ b/leakcanary-android/src/main/res/values-de/leak_canary_strings.xml
@@ -20,12 +20,12 @@
     <string name="leak_canary_leak_excluded_retaining">[Ausgeschlossen] %1$s hat %2$s geleaked</string>
     <string name="leak_canary_analysis_failed">Leak Analyse fehlgeschlagen</string>
     <string name="leak_canary_leak_list_title">Leaks in %s</string>
-    <string name="leak_canary_notification_analysing">Analyzing Heap Dump</string>
+    <string name="leak_canary_notification_analysing">Analyisere Heap Dump</string>
     <string name="leak_canary_notification_channel">LeakCanary</string>
-    <string name="leak_canary_notification_dumping">Dumping Heap</string>
-    <string name="leak_canary_notification_foreground_text">LeakCanary is working.</string>
-    <string name="leak_canary_notification_message">Für mehr Details hier klicken</string>
-    <string name="leak_canary_notification_reporting">Reporting LeakCanary result</string>
+    <string name="leak_canary_notification_dumping">Sichere Heap</string>
+    <string name="leak_canary_notification_foreground_text">LeakCanary ist beschäftigt.</string>
+    <string name="leak_canary_notification_message">Für mehr Details, hier klicken</string>
+    <string name="leak_canary_notification_reporting">Sichere LeakCanary Ergebnis</string>
     <string name="leak_canary_share_leak">Info teilen</string>
     <string name="leak_canary_share_heap_dump">Heap Dump teilen</string>
     <string name="leak_canary_share_with">Teilen mit…</string>
@@ -44,7 +44,7 @@
     <string name="leak_canary_permission_not_granted">Bitte gewähre die Storage Berechtigung, andernfalls werden Memory Leaks nicht erkannt.</string>
     <string name="leak_canary_permission_notification_title">Leak erkannt, benötige Berechtigung</string>
     <string name="leak_canary_permission_notification_text">Hier klicken, um Storage Berechtigung für %s zu aktivieren.</string>
-    <string name="leak_canary_help_title">Tap here to learn more</string>
+    <string name="leak_canary_help_title">Tippe hier, um mehr zu erfahren</string>
     <string name="leak_canary_help_detail"><![CDATA[A memory leak is a programming error that causes
   your application to keep a reference to an object that is no longer needed. As a result, the
   memory allocated for that object cannot be reclaimed, eventually leading to an OutOfMemoryError
diff --git a/leakcanary-sample/build.gradle b/leakcanary-sample/build.gradle
index 6be6872f..70b25c53 100644
--- a/leakcanary-sample/build.gradle
+++ b/leakcanary-sample/build.gradle
@@ -5,7 +5,7 @@ dependencies {
   releaseImplementation project(':leakcanary-android-no-op')
 
   testImplementation "junit:junit:4.12"
-  testImplementation "org.robolectric:robolectric:3.8"
+  testImplementation "org.robolectric:robolectric:4.0-alpha-3"
   androidTestImplementation project(':leakcanary-android-instrumentation')
   androidTestImplementation 'com.android.support.test:runner:1.0.2'
   androidTestImplementation 'com.android.support.test:rules:1.0.2'
diff --git a/leakcanary-sample/src/test/java/com/example/leakcanary/SampleTest.java b/leakcanary-sample/src/test/java/com/example/leakcanary/SampleTest.java
index aac3d4a1..29f1f367 100644
--- a/leakcanary-sample/src/test/java/com/example/leakcanary/SampleTest.java
+++ b/leakcanary-sample/src/test/java/com/example/leakcanary/SampleTest.java
@@ -8,7 +8,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class, application = TestExampleApplication.class)
+@Config(application = TestExampleApplication.class)
 public class SampleTest {
   @Test public void testTheThing() throws Exception {
     ActivityController<MainActivity> controller =
