diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidRefWatcherBuilder.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidRefWatcherBuilder.java
index 43816beb..fb9a2c05 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidRefWatcherBuilder.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidRefWatcherBuilder.java
@@ -76,6 +76,23 @@
     return self();
   }
 
+  /**
+   * Set the default importance of all Notifications
+   * @param importance a constant from the NotificationManager class
+   */
+  public @NonNull AndroidRefWatcherBuilder notificationImportance(int importance) {
+    LeakCanaryInternals.setNotificationImportance(context, importance);
+    return self();
+  }
+
+  /**
+   * Should the [Excluded] leak notifications be shown.
+   */
+  public @NonNull AndroidRefWatcherBuilder showExcludedLeaks(boolean show) {
+    LeakCanaryInternals.showExcludedLeaks(context, show);
+    return self();
+  }
+
   /**
    * Creates a {@link RefWatcher} instance and makes it available through {@link
    * LeakCanary#installedRefWatcher()}.
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
index 7dadb7e6..b8d66d86 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
@@ -16,6 +16,7 @@
 package com.squareup.leakcanary;
 
 import android.app.PendingIntent;
+import android.content.Context;
 import android.os.SystemClock;
 import android.support.annotation.NonNull;
 import com.squareup.leakcanary.internal.DisplayLeakActivity;
@@ -27,6 +28,8 @@
 
 import static android.text.format.Formatter.formatShortFileSize;
 import static com.squareup.leakcanary.LeakCanary.leakInfo;
+import static com.squareup.leakcanary.internal.LeakCanaryInternals.SHARED_PREF_CONFIG_FILE;
+import static com.squareup.leakcanary.internal.LeakCanaryInternals.SHARED_PREF_EXCLUDED_LEAKS;
 import static com.squareup.leakcanary.internal.LeakCanaryInternals.classSimpleName;
 
 /**
@@ -51,35 +54,39 @@ protected final void onHeapAnalyzed(@NonNull AnalyzedHeap analyzedHeap) {
 
     String contentTitle;
     if (resultSaved) {
-      PendingIntent pendingIntent =
-          DisplayLeakActivity.createPendingIntent(this, heapDump.referenceKey);
-      if (result.failure != null) {
-        contentTitle = getString(R.string.leak_canary_analysis_failed);
-      } else {
-        String className = classSimpleName(result.className);
-        if (result.leakFound) {
-          if (result.retainedHeapSize == AnalysisResult.RETAINED_HEAP_SKIPPED) {
-            if (result.excludedLeak) {
-              contentTitle = getString(R.string.leak_canary_leak_excluded, className);
+      boolean showExcludedLeaks = getSharedPreferences(SHARED_PREF_CONFIG_FILE, Context.MODE_PRIVATE)
+              .getBoolean(SHARED_PREF_EXCLUDED_LEAKS, true);
+      if (!result.excludedLeak || showExcludedLeaks) {
+        PendingIntent pendingIntent =
+                DisplayLeakActivity.createPendingIntent(this, heapDump.referenceKey);
+        if (result.failure != null) {
+          contentTitle = getString(R.string.leak_canary_analysis_failed);
+        } else {
+          String className = classSimpleName(result.className);
+          if (result.leakFound) {
+            if (result.retainedHeapSize == AnalysisResult.RETAINED_HEAP_SKIPPED) {
+              if (result.excludedLeak) {
+                contentTitle = getString(R.string.leak_canary_leak_excluded, className);
+              } else {
+                contentTitle = getString(R.string.leak_canary_class_has_leaked, className);
+              }
             } else {
-              contentTitle = getString(R.string.leak_canary_class_has_leaked, className);
+              String size = formatShortFileSize(this, result.retainedHeapSize);
+              if (result.excludedLeak) {
+                contentTitle =
+                        getString(R.string.leak_canary_leak_excluded_retaining, className, size);
+              } else {
+                contentTitle =
+                        getString(R.string.leak_canary_class_has_leaked_retaining, className, size);
+              }
             }
           } else {
-            String size = formatShortFileSize(this, result.retainedHeapSize);
-            if (result.excludedLeak) {
-              contentTitle =
-                  getString(R.string.leak_canary_leak_excluded_retaining, className, size);
-            } else {
-              contentTitle =
-                  getString(R.string.leak_canary_class_has_leaked_retaining, className, size);
-            }
+            contentTitle = getString(R.string.leak_canary_class_no_leak, className);
           }
-        } else {
-          contentTitle = getString(R.string.leak_canary_class_no_leak, className);
         }
+        String contentText = getString(R.string.leak_canary_notification_message);
+        showNotification(pendingIntent, contentTitle, contentText);
       }
-      String contentText = getString(R.string.leak_canary_notification_message);
-      showNotification(pendingIntent, contentTitle, contentText);
     } else {
       onAnalysisResultFailure(getString(R.string.leak_canary_could_not_save_text));
     }
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/LeakCanaryInternals.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/LeakCanaryInternals.java
index dcd3f1ec..68093114 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/LeakCanaryInternals.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/LeakCanaryInternals.java
@@ -23,6 +23,7 @@
 import android.app.Service;
 import android.content.ComponentName;
 import android.content.Context;
+import android.content.SharedPreferences;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.ServiceInfo;
@@ -209,4 +210,18 @@ public static LeakDirectoryProvider getLeakDirectoryProvider(Context context) {
   private LeakCanaryInternals() {
     throw new AssertionError();
   }
+
+  public static void setNotificationImportance(Context context, int importance) {
+    SharedPreferences sharedPref = context.getSharedPreferences(SHARED_PREF_CONFIG_FILE, Context.MODE_PRIVATE);
+    sharedPref.edit().putInt(SHARED_PREF_NOTIFICATION_IMPORTANCE, importance).apply();
+  }
+
+  public static void showExcludedLeaks(Context context, boolean show) {
+    SharedPreferences sharedPref = context.getSharedPreferences(SHARED_PREF_CONFIG_FILE, Context.MODE_PRIVATE);
+    sharedPref.edit().putBoolean(SHARED_PREF_EXCLUDED_LEAKS, show).apply();
+  }
+
+  public static final String SHARED_PREF_CONFIG_FILE = "custom_config";
+  public static final String SHARED_PREF_NOTIFICATION_IMPORTANCE = "notification_importance";
+  public static final String SHARED_PREF_EXCLUDED_LEAKS = "show_excluded_leaks";
 }
