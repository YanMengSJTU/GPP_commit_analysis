diff --git a/leakcanary-android-core/src/main/java/leakcanary/internal/AndroidHeapDumper.kt b/leakcanary-android-core/src/main/java/leakcanary/internal/AndroidHeapDumper.kt
index c2de9a42..8caa7ebb 100644
--- a/leakcanary-android-core/src/main/java/leakcanary/internal/AndroidHeapDumper.kt
+++ b/leakcanary-android-core/src/main/java/leakcanary/internal/AndroidHeapDumper.kt
@@ -85,7 +85,12 @@ internal class AndroidHeapDumper(
 
     return try {
       Debug.dumpHprofData(heapDumpFile.absolutePath)
-      heapDumpFile
+      if (heapDumpFile.length() == 0L) {
+        CanaryLog.d("Dumped heap file is 0 byte length")
+        null
+      } else {
+        heapDumpFile
+      }
     } catch (e: Exception) {
       CanaryLog.d(e, "Could not dump heap")
       // Abort heap dump
diff --git a/leakcanary-haha/src/main/java/leakcanary/HprofParser.kt b/leakcanary-haha/src/main/java/leakcanary/HprofParser.kt
index b8d5daa8..f866a126 100644
--- a/leakcanary-haha/src/main/java/leakcanary/HprofParser.kt
+++ b/leakcanary-haha/src/main/java/leakcanary/HprofParser.kt
@@ -413,7 +413,13 @@ class HprofParser private constructor(
                 if (callback != null || computeObjectClassSize) {
                   val classDumpRecord = readClassDumpRecord(id)
                   if (computeObjectClassSize) {
-                    maybeEmptyInstancesAreEmpty = when (classDumpRecord.instanceSize) {
+                    // In Android 16 classDumpRecord.instanceSize can be 8 yet there are 0 fields.
+                    // Better rely on our own computation of instance size.
+                    // See #1374
+                    val objectClassFieldSize = classDumpRecord.fields.sumBy {
+                      typeSize(it.type)
+                    }
+                    maybeEmptyInstancesAreEmpty = when (objectClassFieldSize) {
                       0 -> false
                       maybeEmptySize -> true
                       else ->
@@ -939,11 +945,15 @@ class HprofParser private constructor(
     )
 
     fun open(heapDump: File): HprofParser {
-      if (heapDump.length() > MAX_HEAP_DUMP_SIZE) {
+      val fileLength = heapDump.length()
+      if (fileLength > MAX_HEAP_DUMP_SIZE) {
         throw IllegalArgumentException(
-            "Heap dump file length is ${heapDump.length()} bytes which is more than the max supported $MAX_HEAP_DUMP_SIZE"
+            "Heap dump file length is $fileLength bytes which is more than the max supported $MAX_HEAP_DUMP_SIZE"
         )
       }
+      if (fileLength == 0L) {
+        throw IllegalArgumentException("Heap dump file is 0 byte length")
+      }
       val inputStream = heapDump.inputStream()
       val channel = inputStream.channel
       val source = inputStream.source()
