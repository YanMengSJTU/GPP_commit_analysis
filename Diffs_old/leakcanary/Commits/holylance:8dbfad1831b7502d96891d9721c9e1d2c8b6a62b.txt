diff --git a/CODE_OF_CONDUCT.md b/.github/CODE_OF_CONDUCT.md
similarity index 100%
rename from CODE_OF_CONDUCT.md
rename to .github/CODE_OF_CONDUCT.md
diff --git a/.github/ISSUE_TEMPLATE/1-leak.md b/.github/ISSUE_TEMPLATE/1-leak.md
new file mode 100644
index 00000000..df578e2f
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE/1-leak.md
@@ -0,0 +1,17 @@
+---
+name: "\U0001F424Leak in your app"
+about: Use Stack Overflow instead
+title: "\U0001F649 [This issue will be immediately closed]"
+labels: 'type: leak'
+assignees: ''
+
+---
+
+üõë ùôéùôèùôäùôã
+
+This issue tracker is not for help with memory leaks detected by LeakCanary in your own app.
+
+To fix a leak: 
+
+* First, learn the fundamentals: https://github.com/square/leakcanary#fundamentals
+* Then, create a Stack Overflow question: http://stackoverflow.com/questions/tagged/leakcanary
diff --git a/.github/ISSUE_TEMPLATE/2-bug.md b/.github/ISSUE_TEMPLATE/2-bug.md
new file mode 100644
index 00000000..2a8301be
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE/2-bug.md
@@ -0,0 +1,32 @@
+---
+name: "\U0001F41BBug report"
+about: 'Build errors, bugs and runtime crashes in version 2.0'
+title: ''
+labels: 'type: bug'
+assignees: ''
+
+---
+
+### Description
+
+[Description of the issue]
+
+### Steps to Reproduce
+
+[Provide a sample project, a .hprof file or a failing test]
+
+1. [First Step]
+2. [Second Step]
+3. [and so on...]
+
+**Expected behavior:** [What you expect to happen]
+
+### Version Information
+
+* LeakCanary version:
+* Android OS version:
+* Gradle version:
+
+### Additional Information
+
+Any additional information, configuration or data that might be necessary to reproduce the issue.
diff --git a/.github/ISSUE_TEMPLATE/3-feature.md b/.github/ISSUE_TEMPLATE/3-feature.md
new file mode 100644
index 00000000..9620f7cf
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE/3-feature.md
@@ -0,0 +1,14 @@
+---
+name: "\U0001F64FFeature request"
+about: Suggest an idea for LeakCanary
+title: ''
+labels: 'type: enhancement'
+assignees: ''
+
+---
+
+### Problem description
+
+### Potential solutions
+
+### Additional information
diff --git a/.github/ISSUE_TEMPLATE/4-doc.md b/.github/ISSUE_TEMPLATE/4-doc.md
new file mode 100644
index 00000000..9f785213
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE/4-doc.md
@@ -0,0 +1,10 @@
+---
+name: "\U0001F4DADocumentation request"
+about: Point out what's confusing or missing
+title: ''
+labels: 'type: documentation'
+assignees: ''
+
+---
+
+
diff --git a/.github/ISSUE_TEMPLATE/5-sdk.md b/.github/ISSUE_TEMPLATE/5-sdk.md
new file mode 100644
index 00000000..e4e12c20
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE/5-sdk.md
@@ -0,0 +1,16 @@
+---
+name: "\U0001F916Leak in Android SDK / support library"
+about: Help LeakCanary identify known leaks
+title: ''
+labels: 'type: leak'
+assignees: ''
+
+---
+
+Read this first: https://github.com/square/leakcanary#can-a-leak-be-caused-by-the-android-sdk
+
+### LeakTrace information
+
+```
+{REPLACE THIS LINE WITH THE OUTPUT FROM LEAKCANARY}
+```
diff --git a/SUPPORT.md b/.github/SUPPORT.md
similarity index 100%
rename from SUPPORT.md
rename to .github/SUPPORT.md
diff --git a/CHANGELOG.md b/CHANGELOG.md
index a28d4be6..1435dc88 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,8 +1,37 @@
 # Change Log
 
+## Version 2.0 Alpha 2 (2019-05-21)
+
+**Thanks for testing the alpha**, we're counting on you to help us find bugs and suggest improvements! Check out the new [Getting Started](https://github.com/square/leakcanary#getting-started) instructions and the [migration guide](https://github.com/square/leakcanary/wiki/Migrating-to-LeakCanary-2.0). 
+
+* [#1040](https://github.com/square/leakcanary/pull/1040) Import and analyze hprof files from other devices
+* [#1344](https://github.com/square/leakcanary/pull/1344) Computing retained size
+* [#1325](https://github.com/square/leakcanary/pull/1325) New notification showing current count of retained instances
+* [#1079](https://github.com/square/leakcanary/pull/1079) "Excluded" leaks have been renamed to "Won't fix" leaks to clarify meaning.
+* [#1328](https://github.com/square/leakcanary/pull/1328) New leaks are called out in the UI. 
+* [#1327](https://github.com/square/leakcanary/pull/1327) LeakSentry can be enabled / disabled and is automatically disabled in non debuggable builds.
+* [#1173](https://github.com/square/leakcanary/pull/1173) Experimental: now reporting leaks that only go through weak references (previously reported as "no path to instance")
+* [#1339](https://github.com/square/leakcanary/pull/1339) Readded support for Thread name based exclusions
+* [#1312](https://github.com/square/leakcanary/pull/1312) Fixed bug causing LeakCanary to stop detecting leaks after the app is killed.
+* [#1310](https://github.com/square/leakcanary/pull/1310) [#1313](https://github.com/square/leakcanary/pull/1313) [#1314](https://github.com/square/leakcanary/pull/1314) [#1340](https://github.com/square/leakcanary/pull/1340) [#1337](https://github.com/square/leakcanary/pull/1337) Many API changes
+* [#1296](https://github.com/square/leakcanary/pull/1296) [#1293](https://github.com/square/leakcanary/pull/1293) [#1306](https://github.com/square/leakcanary/pull/1306) [#1336](https://github.com/square/leakcanary/pull/1336) Fixed several crashes. 
+
+Many thanks to
+[@forrestbice](https://github.com/forrestbice),
+[@Foso](https://github.com/Foso),
+[@Goddchen](https://github.com/Goddchen),
+[@marcosholgado](https://github.com/marcosholgado),
+[@orionlee](https://github.com/orionlee),
+[@pyricau](https://github.com/pyricau),
+[@satoshun](https://github.com/satoshun),
+[@ZacSweers](https://github.com/ZacSweers)
+for the contributions!
+
+For more details, see the [2.0-alpha-2 Milestone](https://github.com/square/leakcanary/milestone/7) and the [full diff](https://github.com/square/leakcanary/compare/v2.0-alpha-1...v2.0-alpha-2).
+
 ## Version 2.0 Alpha 1 (2019-04-23)
 
-**Thanks for testing the alpha**, we're counting on you to help us find bugs and suggest improvements! Check out the new [Getting Started](https://github.com/square/leakcanary#getting-started) instructions and the [migration guide](https://github.com/square/leakcanary/wiki/Migrating-to-LeakCanary-2.0). This change log is also available as a [Twitter thread](https://twitter.com/Piwai/status/1120681920835276800).
+This change log is also available as a [Twitter thread](https://twitter.com/Piwai/status/1120681920835276800).
 
 <img src="https://github.com/square/leakcanary/wiki/assets/logo-2.0-200px.png" />
 
@@ -38,7 +67,7 @@ Many thanks to
 [@WhatsEmo](https://github.com/WhatsEmo)
 for the contributions!
 
-For more details, see the [2.0 Milestone](https://github.com/square/leakcanary/milestone/6) and the [full diff](https://github.com/square/leakcanary/compare/v1.6.3...master).
+For more details, see the [2.0-alpha-1 Milestone](https://github.com/square/leakcanary/milestone/6) and the [full diff](https://github.com/square/leakcanary/compare/v1.6.3...v2.0-alpha-1).
 
 ## Version 1.6.3 (2019-01-10)
 
diff --git a/README.md b/README.md
index 31c48a74..329d8f39 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-# LeakCanary
+# üê§ LeakCanary
 
 A memory leak detection library for Android.
 
@@ -14,7 +14,7 @@ Add LeakCanary to `build.gradle`:
 
 ```gradle
 dependencies {
-  debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-alpha-1'
+  debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-alpha-2'
 }
 ```
 
@@ -30,7 +30,7 @@ What's next?
 
 Note: **LeakCanary 2 is in alpha**.
 * Check out the [migration guide](https://github.com/square/leakcanary/wiki/Migrating-to-LeakCanary-2.0).
-* Here is the [change log](https://github.com/square/leakcanary/blob/master/CHANGELOG.md#version-20-alpha-1-2019-04-23).
+* Here is the [change log](https://github.com/square/leakcanary/blob/master/CHANGELOG.md#version-20-alpha-2-2019-05-21).
 * To set up LeakCanary 1.6, go to the [1.6 Readme](https://github.com/square/leakcanary/blob/master/README-1.6.md).
 
 ## Fundamentals
@@ -63,13 +63,23 @@ If you cannot figure out a leak, **please do not file an issue**. Instead, creat
 
 ## Code Recipes
 
-If you think a recipe might be missing or you're not sure that what you're trying to achieve is possible with the current APIs, please [file an issue](https://github.com/square/leakcanary/issues/new). Your feedback help us make LeakCanary better for the entire community.
+If you think a recipe might be missing or you're not sure that what you're trying to achieve is possible with the current APIs, please [file an issue](https://github.com/square/leakcanary/issues/new/choose). Your feedback help us make LeakCanary better for the entire community.
 
 ### Configuring LeakSentry & LeakCanary
 
-LeakCanary is released as two distinct libraries: `com.squareup.leakcanary:leaksentry` and `com.squareup.leakcanary:leakcanary-android` which depends on `leaksentry`.
+LeakCanary is released as two distinct libraries:
 
-LeakSentry is in charge of detecting retained instances. Its configuration can be updated at any time by replacing `LeakSentry.config`:
+* LeakSentry
+  * Detects retained instances.
+  * Suitable for release builds.
+  * Artifact id: `com.squareup.leakcanary:leaksentry`.
+* LeakCanary
+  * Dumps the heap and analyzes it.
+  * Currently only suitable for debug builds.
+  * Depends on LeakSentry.
+  * Artifact id: `com.squareup.leakcanary:leakcanary-android`.
+
+LeakSentry can be configured by replacing `LeakSentry.config`:
 ```kotlin
 class DebugExampleApplication : ExampleApplication() {
 
@@ -80,7 +90,7 @@ class DebugExampleApplication : ExampleApplication() {
 }
 ```
 
-LeakCanary is in charge of dumping the heap and analyzing it. Its configuration can be updated at any time by replacing `LeakCanary.config`:
+LeakCanary can be configured by replacing `LeakCanary.config`:
 
 ```kotlin
 disableLeakCanaryButton.setOnClickListener {
@@ -112,7 +122,7 @@ In your `build.gradle`:
 
 ```gradle
 dependencies {
-  implementation 'com.squareup.leakcanary:leaksentry:2.0-alpha-1'
+  implementation 'com.squareup.leakcanary:leaksentry:2.0-alpha-2'
 }
 ```
 
@@ -137,7 +147,7 @@ android {
     // ...
 
     testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
-    testInstrumentationRunnerArgument "listener", "com.squareup.leakcanary.FailTestOnLeakRunListener"
+    testInstrumentationRunnerArgument "listener", "leakcanary.FailTestOnLeakRunListener"
   }
 }
 ```
@@ -179,17 +189,85 @@ res/
 
 ### Uploading to a server
 
-You can change the default behavior to upload the leak trace and heap dump to a server of your choosing.
+You can change the default behavior to upload the analysis result to a server of your choosing.
+
+Create a custom `AnalysisResultListener` that delegates to the default: 
 
-**TODO Document this**
+```kotlin
+class LeakUploader : AnalysisResultListener {
+  override fun invoke(
+    application: Application,
+    heapAnalysis: HeapAnalysis
+  ) {
+    TODO("Upload heap analysis to server")
+
+    // Delegate to default behavior (notification and saving result)
+    DefaultAnalysisResultListener(application, heapAnalysis)
+  }
+}
+```
 
-### Identifying AOSP leaks as "won't fix"
+Set `analysisResultListener` on the LeakCanary config:
 
-**TODO Document this**
+```kotlin
+class DebugExampleApplication : ExampleApplication() {
+
+  override fun onCreate() {
+    super.onCreate()
+    LeakCanary.config = LeakCanary.config.copy(analysisResultListener = LeakUploader())
+  }
+}
+```
+
+
+### Identifying 3rd party leaks as "won't fix"
+
+Set `exclusionsFactory` on the LeakCanary config to a `ExclusionsFactory` that delegates to the default one and then and add custom exclusions:
+
+```kotlin
+class DebugExampleApplication : ExampleApplication() {
+
+  override fun onCreate() {
+    super.onCreate()
+    LeakCanary.config = LeakCanary.config.copy(exclusionsFactory = { hprofParser ->
+      val defaultFactory = AndroidExcludedRefs.exclusionsFactory(AndroidExcludedRefs.appDefaults)
+      val appDefaults = defaultFactory(hprofParser)
+      val customExclusion = Exclusion(
+          type = StaticFieldExclusion("com.thirdparty.SomeSingleton", "sContext"),
+          status = Exclusion.Status.WONT_FIX_LEAK,
+          reason = "SomeSingleton in library X has a static field leaking a context."
+      )
+      appDefaults + customExclusion
+    })
+  }
+}
+```
 
 ### Identifying leaking instances and labeling instances
 
-**TODO Document this**
+```kotlin
+class DebugExampleApplication : ExampleApplication() {
+
+  override fun onCreate() {
+    super.onCreate()
+    val customLabeler: Labeler = { parser, node ->
+      listOf("Heap dump object id is ${node.instance}")
+    }
+    val labelers = AndroidLabelers.defaultAndroidLabelers(this) + customLabeler
+
+    val customInspector: LeakInspector = { parser, node ->
+      with(parser) {
+        if (node.instance.objectRecord.isInstanceOf("com.example.MySingleton")) {
+          LeakNodeStatus.notLeaking("MySingleton is a singleton")
+        } else LeakNodeStatus.unknown()
+      }
+    }
+    val leakInspectors = AndroidLeakInspectors.defaultAndroidInspectors() + customInspector
+
+    LeakCanary.config = LeakCanary.config.copy(labelers = labelers, leakInspectors = leakInspectors)
+  }
+}
+```
 
 ## FAQ
 
@@ -197,7 +275,7 @@ You can change the default behavior to upload the leak trace and heap dump to a
 
 Yes. There are a number of known memory leaks that have been fixed over time in AOSP as well as in manufacturer implementations. When such a leak occurs, there is little you can do as an app developer to fix it. For that reason, LeakCanary has a built-in list of known Android leaks to ignore: [AndroidExcludedRefs.kt](https://github.com/square/leakcanary/blob/master/leakcanary-android-core/src/main/java/leakcanary/AndroidExcludedRefs.kt).
 
-If you find a new one, please [create an issue](https://github.com/square/leakcanary/issues/new) and follow these steps:
+If you find a new one, please [create an issue](https://github.com/square/leakcanary/issues/new/choose) and follow these steps:
 
 1. Provide the entire leak trace information (reference key, device, etc), and use backticks (`) for formatting.
 2. Read the AOSP source for that version of Android, and try to figure out why it happens. You can easily navigate through SDK versions [android/platform_frameworks_base](https://github.com/android/platform_frameworks_base).
@@ -235,7 +313,7 @@ Update your dependencies to the latest SNAPSHOT (see [build.gradle](https://gith
 
 ```gradle
  dependencies {
-   debugCompile 'com.squareup.leakcanary:leakcanary-android:2.0-alpha-2-SNAPSHOT'
+   debugCompile 'com.squareup.leakcanary:leakcanary-android:2.0-alpha-3-SNAPSHOT'
  }
 ```
 
diff --git a/gradle.properties b/gradle.properties
index 8f8156dc..840adde5 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.squareup.leakcanary
-VERSION_NAME=2.0-alpha-2-SNAPSHOT
+VERSION_NAME=2.0-alpha-3-SNAPSHOT
 
 POM_DESCRIPTION=Leak Canary
 
