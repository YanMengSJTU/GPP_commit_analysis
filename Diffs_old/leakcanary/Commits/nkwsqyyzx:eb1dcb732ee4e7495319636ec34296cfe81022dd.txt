diff --git a/README.md b/README.md
index ce382529..cd59e2ac 100644
--- a/README.md
+++ b/README.md
@@ -30,6 +30,23 @@ public class ExampleApplication extends Application {
 }
 ```
 
+Also, if you want to inject LeakCanary into your own project, you can build this project and add libs to your project, then:
+```java
+public class ExampleApplication extends Application {
+
+  @Override public void onCreate() {
+    super.onCreate();
+    LeakCanary.installResourceProvider(new IResourceProvider() {
+        // blah blah
+    });
+	LeakCanary.install(this, XDisplayLeakService.class, AndroidExcludedRefs.createAppDefaults().build());
+  }
+  private static class XDisplayLeakService extends DisplayLeakService {
+      // empty class is OK.
+  }
+}
+```
+
 **You're good to go!** LeakCanary will automatically show a notification when an activity memory leak is detected in your debug build.
 
 Questions? Check out [the FAQ](https://github.com/square/leakcanary/wiki/FAQ)!
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidHeapDumper.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidHeapDumper.java
index c46435f3..9cc3f67b 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidHeapDumper.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidHeapDumper.java
@@ -123,7 +123,7 @@ private void showToast(final FutureResult<Toast> waitingForToast) {
         toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);
         toast.setDuration(Toast.LENGTH_LONG);
         LayoutInflater inflater = LayoutInflater.from(context);
-        toast.setView(inflater.inflate(R.layout.leak_canary_heap_dump_toast, null));
+        toast.setView(inflater.inflate(ResourceProvider.provider().leak_canary_heap_dump_toast(), null));
         toast.show();
         // Waiting for Idle to make sure Toast gets rendered.
         Looper.myQueue().addIdleHandler(new MessageQueue.IdleHandler() {
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/DefaultLeakDirectoryProvider.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/DefaultLeakDirectoryProvider.java
index 812b6e64..012fc600 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/DefaultLeakDirectoryProvider.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/DefaultLeakDirectoryProvider.java
@@ -54,10 +54,10 @@ public DefaultLeakDirectoryProvider(Context context) {
       return;
     }
     PendingIntent pendingIntent = RequestStoragePermissionActivity.createPendingIntent(context);
-    String contentTitle = context.getString(R.string.leak_canary_permission_notification_title);
+    String contentTitle = context.getString(ResourceProvider.provider().leak_canary_permission_notification_title());
     CharSequence packageName = context.getPackageName();
     String contentText =
-        context.getString(R.string.leak_canary_permission_notification_text, packageName);
+        context.getString(ResourceProvider.provider().leak_canary_permission_notification_text(), packageName);
     showNotification(context, contentTitle, contentText, pendingIntent);
   }
 
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
index afdc4e94..391139a5 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/DisplayLeakService.java
@@ -59,8 +59,8 @@
     String contentText;
 
     if (!shouldSaveResult) {
-      contentTitle = getString(R.string.leak_canary_no_leak_title);
-      contentText = getString(R.string.leak_canary_no_leak_text);
+      contentTitle = getString(ResourceProvider.provider().leak_canary_no_leak_title());
+      contentText = getString(ResourceProvider.provider().leak_canary_no_leak_text());
       pendingIntent = null;
     } else if (resultSaved) {
       pendingIntent = DisplayLeakActivity.createPendingIntent(this, heapDump.referenceKey);
@@ -69,17 +69,17 @@
         String size = formatShortFileSize(this, result.retainedHeapSize);
         String className = classSimpleName(result.className);
         if (result.excludedLeak) {
-          contentTitle = getString(R.string.leak_canary_leak_excluded, className, size);
+          contentTitle = getString(ResourceProvider.provider().leak_canary_leak_excluded(), className, size);
         } else {
-          contentTitle = getString(R.string.leak_canary_class_has_leaked, className, size);
+          contentTitle = getString(ResourceProvider.provider().leak_canary_class_has_leaked(), className, size);
         }
       } else {
-        contentTitle = getString(R.string.leak_canary_analysis_failed);
+        contentTitle = getString(ResourceProvider.provider().leak_canary_analysis_failed());
       }
-      contentText = getString(R.string.leak_canary_notification_message);
+      contentText = getString(ResourceProvider.provider().leak_canary_notification_message());
     } else {
-      contentTitle = getString(R.string.leak_canary_could_not_save_title);
-      contentText = getString(R.string.leak_canary_could_not_save_text);
+      contentTitle = getString(ResourceProvider.provider().leak_canary_could_not_save_title());
+      contentText = getString(ResourceProvider.provider().leak_canary_could_not_save_text());
       pendingIntent = null;
     }
     showNotification(this, contentTitle, contentText, pendingIntent);
@@ -125,7 +125,7 @@ private HeapDump renameHeapdump(HeapDump heapDump) {
 
     Resources resources = getResources();
     int maxStoredHeapDumps =
-        Math.max(resources.getInteger(R.integer.leak_canary_max_stored_leaks), 1);
+        Math.max(resources.getInteger(ResourceProvider.provider().leak_canary_max_stored_leaks()), 1);
     File[] hprofFiles = heapDump.heapDumpFile.getParentFile().listFiles(new FilenameFilter() {
       @Override public boolean accept(File dir, String filename) {
         return filename.endsWith(".hprof");
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/IResourceProvider.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/IResourceProvider.java
new file mode 100644
index 00000000..0b25e07a
--- /dev/null
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/IResourceProvider.java
@@ -0,0 +1,76 @@
+package com.squareup.leakcanary;
+
+/**
+ * Provide resource for custom resources.
+ */
+public interface IResourceProvider {
+    int leak_canary_notification();
+
+    int leak_canary_action();
+
+    int leak_canary_display_leak_failure();
+
+    int leak_canary_display_leak_list();
+
+    int leak_canary_row_connector();
+
+    int leak_canary_row_more();
+
+    int leak_canary_row_text();
+
+    int leak_canary_row_time();
+
+    int leak_canary_max_stored_leaks();
+
+    int leak_canary_watch_delay_millis();
+
+    int leak_canary_display_leak();
+
+    int leak_canary_heap_dump_toast();
+
+    int leak_canary_leak_row();
+
+    int leak_canary_ref_row();
+
+    int leak_canary_ref_top_row();
+
+    int leak_canary_analysis_failed();
+
+    int leak_canary_class_has_leaked();
+
+    int leak_canary_could_not_save_text();
+
+    int leak_canary_could_not_save_title();
+
+    int leak_canary_delete();
+
+    int leak_canary_delete_all();
+
+    int leak_canary_excluded_row();
+
+    int leak_canary_failure_report();
+
+    int leak_canary_leak_excluded();
+
+    int leak_canary_leak_list_title();
+
+    int leak_canary_no_leak_text();
+
+    int leak_canary_no_leak_title();
+
+    int leak_canary_notification_message();
+
+    int leak_canary_permission_not_granted();
+
+    int leak_canary_permission_notification_text();
+
+    int leak_canary_permission_notification_title();
+
+    int leak_canary_share_heap_dump();
+
+    int leak_canary_share_leak();
+
+    int leak_canary_share_with();
+
+    int leak_canary_LeakCanary_Base();
+}
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java
index 1081ae34..8b3f61a9 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/LeakCanary.java
@@ -32,6 +32,13 @@
 import static com.squareup.leakcanary.internal.LeakCanaryInternals.setEnabled;
 
 public final class LeakCanary {
+  /**
+   * Use custom resource provider.
+   * @param provider
+   */
+  public static void installResourceProvider(IResourceProvider provider) {
+    ResourceProvider.setProvider(provider);
+  }
 
   /**
    * Creates a {@link RefWatcher} that works out of the box, and starts watching activity
@@ -70,7 +77,7 @@ public static RefWatcher androidWatcher(Context context, HeapDump.Listener heapD
     AndroidHeapDumper heapDumper = new AndroidHeapDumper(context, leakDirectoryProvider);
     heapDumper.cleanup();
     Resources resources = context.getResources();
-    int watchDelayMillis = resources.getInteger(R.integer.leak_canary_watch_delay_millis);
+    int watchDelayMillis = resources.getInteger(ResourceProvider.provider().leak_canary_watch_delay_millis());
     AndroidWatchExecutor executor = new AndroidWatchExecutor(watchDelayMillis);
     return new RefWatcher(executor, debuggerControl, GcTrigger.DEFAULT, heapDumper,
         heapDumpListener, excludedRefs);
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/ResourceProvider.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/ResourceProvider.java
new file mode 100644
index 00000000..d3b35338
--- /dev/null
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/ResourceProvider.java
@@ -0,0 +1,193 @@
+package com.squareup.leakcanary;
+
+public class ResourceProvider {
+    private static final IResourceProvider defaultResourceProvider = new IResourceProvider() {
+        @Override
+        public int leak_canary_notification() {
+            return R.drawable.leak_canary_notification;
+        }
+
+        @Override
+        public int leak_canary_action() {
+            return R.id.leak_canary_action;
+        }
+
+        @Override
+        public int leak_canary_display_leak_failure() {
+            return R.id.leak_canary_display_leak_failure;
+        }
+
+        @Override
+        public int leak_canary_display_leak_list() {
+            return R.id.leak_canary_display_leak_list;
+        }
+
+        @Override
+        public int leak_canary_row_connector() {
+            return R.id.leak_canary_row_connector;
+        }
+
+        @Override
+        public int leak_canary_row_more() {
+            return R.id.leak_canary_row_more;
+        }
+
+        @Override
+        public int leak_canary_row_text() {
+            return R.id.leak_canary_row_text;
+        }
+
+        @Override
+        public int leak_canary_row_time() {
+            return R.id.leak_canary_row_time;
+        }
+
+        @Override
+        public int leak_canary_max_stored_leaks() {
+            return R.integer.leak_canary_max_stored_leaks;
+        }
+
+        @Override
+        public int leak_canary_watch_delay_millis() {
+            return R.integer.leak_canary_watch_delay_millis;
+        }
+
+        @Override
+        public int leak_canary_display_leak() {
+            return R.layout.leak_canary_display_leak;
+        }
+
+        @Override
+        public int leak_canary_heap_dump_toast() {
+            return R.layout.leak_canary_heap_dump_toast;
+        }
+
+        @Override
+        public int leak_canary_leak_row() {
+            return R.layout.leak_canary_leak_row;
+        }
+
+        @Override
+        public int leak_canary_ref_row() {
+            return R.layout.leak_canary_ref_row;
+        }
+
+        @Override
+        public int leak_canary_ref_top_row() {
+            return R.layout.leak_canary_ref_top_row;
+        }
+
+        @Override
+        public int leak_canary_analysis_failed() {
+            return R.string.leak_canary_analysis_failed;
+        }
+
+        @Override
+        public int leak_canary_class_has_leaked() {
+            return R.string.leak_canary_class_has_leaked;
+        }
+
+        @Override
+        public int leak_canary_could_not_save_text() {
+            return R.string.leak_canary_could_not_save_text;
+        }
+
+        @Override
+        public int leak_canary_could_not_save_title() {
+            return R.string.leak_canary_could_not_save_title;
+        }
+
+        @Override
+        public int leak_canary_delete() {
+            return R.string.leak_canary_delete;
+        }
+
+        @Override
+        public int leak_canary_delete_all() {
+            return R.string.leak_canary_delete_all;
+        }
+
+        @Override
+        public int leak_canary_excluded_row() {
+            return R.string.leak_canary_excluded_row;
+        }
+
+        @Override
+        public int leak_canary_failure_report() {
+            return R.string.leak_canary_failure_report;
+        }
+
+        @Override
+        public int leak_canary_leak_excluded() {
+            return R.string.leak_canary_leak_excluded;
+        }
+
+        @Override
+        public int leak_canary_leak_list_title() {
+            return R.string.leak_canary_leak_list_title;
+        }
+
+        @Override
+        public int leak_canary_no_leak_text() {
+            return R.string.leak_canary_no_leak_text;
+        }
+
+        @Override
+        public int leak_canary_no_leak_title() {
+            return R.string.leak_canary_no_leak_title;
+        }
+
+        @Override
+        public int leak_canary_notification_message() {
+            return R.string.leak_canary_notification_message;
+        }
+
+        @Override
+        public int leak_canary_permission_not_granted() {
+            return R.string.leak_canary_permission_not_granted;
+        }
+
+        @Override
+        public int leak_canary_permission_notification_text() {
+            return R.string.leak_canary_permission_notification_text;
+        }
+
+        @Override
+        public int leak_canary_permission_notification_title() {
+            return R.string.leak_canary_permission_notification_title;
+        }
+
+        @Override
+        public int leak_canary_share_heap_dump() {
+            return R.string.leak_canary_share_heap_dump;
+        }
+
+        @Override
+        public int leak_canary_share_leak() {
+            return R.string.leak_canary_share_leak;
+        }
+
+        @Override
+        public int leak_canary_share_with() {
+            return R.string.leak_canary_share_with;
+        }
+
+        @Override
+        public int leak_canary_LeakCanary_Base() {
+            return R.style.leak_canary_LeakCanary_Base;
+        }
+    };
+
+    private static IResourceProvider provider;
+
+    private ResourceProvider() {
+    }
+
+    public static IResourceProvider provider() {
+        return provider == null ? defaultResourceProvider : provider;
+    }
+
+    public static void setProvider(IResourceProvider provider) {
+        ResourceProvider.provider = provider;
+    }
+}
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/DisplayLeakActivity.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/DisplayLeakActivity.java
index 4ab1baf2..a9f3813e 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/DisplayLeakActivity.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/DisplayLeakActivity.java
@@ -43,7 +43,8 @@
 import com.squareup.leakcanary.DefaultLeakDirectoryProvider;
 import com.squareup.leakcanary.HeapDump;
 import com.squareup.leakcanary.LeakDirectoryProvider;
-import com.squareup.leakcanary.R;
+import com.squareup.leakcanary.ResourceProvider;
+
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FilenameFilter;
@@ -119,11 +120,11 @@ private static LeakDirectoryProvider leakDirectoryProvider(Context context) {
     //noinspection unchecked
     leaks = (List<Leak>) getLastNonConfigurationInstance();
 
-    setContentView(R.layout.leak_canary_display_leak);
+    setContentView(ResourceProvider.provider().leak_canary_display_leak());
 
-    listView = (ListView) findViewById(R.id.leak_canary_display_leak_list);
-    failureView = (TextView) findViewById(R.id.leak_canary_display_leak_failure);
-    actionButton = (Button) findViewById(R.id.leak_canary_action);
+    listView = (ListView) findViewById(ResourceProvider.provider().leak_canary_display_leak_list());
+    failureView = (TextView) findViewById(ResourceProvider.provider().leak_canary_display_leak_failure());
+    actionButton = (Button) findViewById(ResourceProvider.provider().leak_canary_action());
 
     updateUi();
   }
@@ -153,7 +154,7 @@ private static LeakDirectoryProvider leakDirectoryProvider(Context context) {
     // We don't want this to be called with an incompatible theme.
     // This could happen if you implement runtime switching of themes
     // using ActivityLifecycleCallbacks.
-    if (resid != R.style.leak_canary_LeakCanary_Base) {
+    if (resid != ResourceProvider.provider().leak_canary_LeakCanary_Base()) {
       return;
     }
     super.setTheme(resid);
@@ -167,7 +168,7 @@ private static LeakDirectoryProvider leakDirectoryProvider(Context context) {
   @Override public boolean onCreateOptionsMenu(Menu menu) {
     Leak visibleLeak = getVisibleLeak();
     if (visibleLeak != null) {
-      menu.add(R.string.leak_canary_share_leak)
+      menu.add(ResourceProvider.provider().leak_canary_share_leak())
           .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
             @Override public boolean onMenuItemClick(MenuItem item) {
               shareLeak();
@@ -175,7 +176,7 @@ private static LeakDirectoryProvider leakDirectoryProvider(Context context) {
             }
           });
       if (visibleLeak.heapDump.heapDumpFile.exists()) {
-        menu.add(R.string.leak_canary_share_heap_dump)
+        menu.add(ResourceProvider.provider().leak_canary_share_heap_dump())
             .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
               @Override public boolean onMenuItemClick(MenuItem item) {
                 shareHeapDump();
@@ -211,7 +212,7 @@ void shareLeak() {
     Intent intent = new Intent(Intent.ACTION_SEND);
     intent.setType("text/plain");
     intent.putExtra(Intent.EXTRA_TEXT, leakInfo);
-    startActivity(Intent.createChooser(intent, getString(R.string.leak_canary_share_with)));
+    startActivity(Intent.createChooser(intent, getString(ResourceProvider.provider().leak_canary_share_with())));
   }
 
   void shareHeapDump() {
@@ -221,7 +222,7 @@ void shareHeapDump() {
     Intent intent = new Intent(Intent.ACTION_SEND);
     intent.setType("application/octet-stream");
     intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(heapDumpFile));
-    startActivity(Intent.createChooser(intent, getString(R.string.leak_canary_share_with)));
+    startActivity(Intent.createChooser(intent, getString(ResourceProvider.provider().leak_canary_share_with())));
   }
 
   void deleteVisibleLeak() {
@@ -280,18 +281,18 @@ void updateUi() {
       if (result.failure != null) {
         listView.setVisibility(GONE);
         failureView.setVisibility(VISIBLE);
-        String failureMessage = getString(R.string.leak_canary_failure_report)
+        String failureMessage = getString(ResourceProvider.provider().leak_canary_failure_report())
             + LIBRARY_VERSION
             + " "
             + GIT_SHA
             + "\n"
             + Log.getStackTraceString(result.failure);
         failureView.setText(failureMessage);
-        setTitle(R.string.leak_canary_analysis_failed);
+        setTitle(ResourceProvider.provider().leak_canary_analysis_failed());
         invalidateOptionsMenu();
         getActionBar().setDisplayHomeAsUpEnabled(true);
         actionButton.setVisibility(VISIBLE);
-        actionButton.setText(R.string.leak_canary_delete);
+        actionButton.setText(ResourceProvider.provider().leak_canary_delete());
         actionButton.setOnClickListener(new View.OnClickListener() {
           @Override public void onClick(View v) {
             deleteVisibleLeak();
@@ -314,7 +315,7 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
           invalidateOptionsMenu();
           getActionBar().setDisplayHomeAsUpEnabled(true);
           actionButton.setVisibility(VISIBLE);
-          actionButton.setText(R.string.leak_canary_delete);
+          actionButton.setText(ResourceProvider.provider().leak_canary_delete());
           actionButton.setOnClickListener(new View.OnClickListener() {
             @Override public void onClick(View v) {
               deleteVisibleLeak();
@@ -325,7 +326,7 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
         adapter.update(result.leakTrace, heapDump.referenceKey, heapDump.referenceName);
         String size = formatShortFileSize(this, result.retainedHeapSize);
         String className = classSimpleName(result.className);
-        setTitle(getString(R.string.leak_canary_class_has_leaked, className, size));
+        setTitle(getString(ResourceProvider.provider().leak_canary_class_has_leaked(), className, size));
       }
     } else {
       if (listAdapter instanceof LeakListAdapter) {
@@ -341,9 +342,9 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
           }
         });
         invalidateOptionsMenu();
-        setTitle(getString(R.string.leak_canary_leak_list_title, getPackageName()));
+        setTitle(getString(ResourceProvider.provider().leak_canary_leak_list_title(), getPackageName()));
         getActionBar().setDisplayHomeAsUpEnabled(false);
-        actionButton.setText(R.string.leak_canary_delete_all);
+        actionButton.setText(ResourceProvider.provider().leak_canary_delete_all());
         actionButton.setOnClickListener(new View.OnClickListener() {
           @Override public void onClick(View v) {
             deleteAllLeaks();
@@ -383,10 +384,10 @@ Leak getVisibleLeak() {
     @Override public View getView(int position, View convertView, ViewGroup parent) {
       if (convertView == null) {
         convertView = LayoutInflater.from(DisplayLeakActivity.this)
-            .inflate(R.layout.leak_canary_leak_row, parent, false);
+            .inflate(ResourceProvider.provider().leak_canary_leak_row(), parent, false);
       }
-      TextView titleView = (TextView) convertView.findViewById(R.id.leak_canary_row_text);
-      TextView timeView = (TextView) convertView.findViewById(R.id.leak_canary_row_time);
+      TextView titleView = (TextView) convertView.findViewById(ResourceProvider.provider().leak_canary_row_text());
+      TextView timeView = (TextView) convertView.findViewById(ResourceProvider.provider().leak_canary_row_time());
       Leak leak = getItem(position);
 
       String index = (leaks.size() - position) + ". ";
@@ -395,9 +396,9 @@ Leak getVisibleLeak() {
       if (leak.result.failure == null) {
         String className = classSimpleName(leak.result.className);
         String size = formatShortFileSize(DisplayLeakActivity.this, leak.result.retainedHeapSize);
-        title = getString(R.string.leak_canary_class_has_leaked, className, size);
+        title = getString(ResourceProvider.provider().leak_canary_class_has_leaked(), className, size);
         if (leak.result.excludedLeak) {
-          title = getString(R.string.leak_canary_excluded_row, title);
+          title = getString(ResourceProvider.provider().leak_canary_excluded_row(), title);
         }
         title = index + title;
       } else {
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/DisplayLeakAdapter.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/DisplayLeakAdapter.java
index fd23cfbd..42e7a076 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/DisplayLeakAdapter.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/DisplayLeakAdapter.java
@@ -22,10 +22,12 @@
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
 import android.widget.TextView;
+
 import com.squareup.leakcanary.Exclusion;
 import com.squareup.leakcanary.LeakTrace;
 import com.squareup.leakcanary.LeakTraceElement;
-import com.squareup.leakcanary.R;
+import com.squareup.leakcanary.ResourceProvider;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -50,16 +52,16 @@
     if (getItemViewType(position) == TOP_ROW) {
       if (convertView == null) {
         convertView =
-            LayoutInflater.from(context).inflate(R.layout.leak_canary_ref_top_row, parent, false);
+            LayoutInflater.from(context).inflate(ResourceProvider.provider().leak_canary_ref_top_row(), parent, false);
       }
-      TextView textView = findById(convertView, R.id.leak_canary_row_text);
+      TextView textView = findById(convertView, ResourceProvider.provider().leak_canary_row_text());
       textView.setText(context.getPackageName());
     } else {
       if (convertView == null) {
         convertView =
-            LayoutInflater.from(context).inflate(R.layout.leak_canary_ref_row, parent, false);
+            LayoutInflater.from(context).inflate(ResourceProvider.provider().leak_canary_ref_row(), parent, false);
       }
-      TextView textView = findById(convertView, R.id.leak_canary_row_text);
+      TextView textView = findById(convertView, ResourceProvider.provider().leak_canary_row_text());
 
       boolean isRoot = position == 1;
       boolean isLeakingInstance = position == getCount() - 1;
@@ -70,7 +72,7 @@
       }
       textView.setText(Html.fromHtml(htmlString));
 
-      DisplayLeakConnectorView connector = findById(convertView, R.id.leak_canary_row_connector);
+      DisplayLeakConnectorView connector = findById(convertView, ResourceProvider.provider().leak_canary_row_connector());
       if (isRoot) {
         connector.setType(DisplayLeakConnectorView.Type.START);
       } else {
@@ -80,7 +82,7 @@
           connector.setType(DisplayLeakConnectorView.Type.NODE);
         }
       }
-      MoreDetailsView moreDetailsView = findById(convertView, R.id.leak_canary_row_more);
+      MoreDetailsView moreDetailsView = findById(convertView, ResourceProvider.provider().leak_canary_row_more());
       moreDetailsView.setOpened(opened[position]);
     }
 
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/LeakCanaryInternals.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/LeakCanaryInternals.java
index cdb5a055..7b8ffd2e 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/LeakCanaryInternals.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/LeakCanaryInternals.java
@@ -26,8 +26,10 @@
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.ServiceInfo;
+
 import com.squareup.leakcanary.CanaryLog;
-import com.squareup.leakcanary.R;
+import com.squareup.leakcanary.ResourceProvider;
+
 import java.lang.reflect.Method;
 import java.util.List;
 import java.util.concurrent.Executor;
@@ -140,7 +142,7 @@ public static void showNotification(Context context, CharSequence contentTitle,
     Notification notification;
     if (SDK_INT < HONEYCOMB) {
       notification = new Notification();
-      notification.icon = R.drawable.leak_canary_notification;
+      notification.icon = ResourceProvider.provider().leak_canary_notification();
       notification.when = System.currentTimeMillis();
       notification.flags |= Notification.FLAG_AUTO_CANCEL;
       try {
@@ -153,7 +155,7 @@ public static void showNotification(Context context, CharSequence contentTitle,
       }
     } else {
       Notification.Builder builder = new Notification.Builder(context) //
-          .setSmallIcon(R.drawable.leak_canary_notification)
+          .setSmallIcon(ResourceProvider.provider().leak_canary_notification())
           .setWhen(System.currentTimeMillis())
           .setContentTitle(contentTitle)
           .setContentText(contentText)
diff --git a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/RequestStoragePermissionActivity.java b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/RequestStoragePermissionActivity.java
index 3d8a23f1..894fb01e 100644
--- a/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/RequestStoragePermissionActivity.java
+++ b/leakcanary-android/src/main/java/com/squareup/leakcanary/internal/RequestStoragePermissionActivity.java
@@ -22,7 +22,8 @@
 import android.content.Intent;
 import android.os.Bundle;
 import android.widget.Toast;
-import com.squareup.leakcanary.R;
+
+import com.squareup.leakcanary.ResourceProvider;
 
 import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
 import static android.app.PendingIntent.FLAG_UPDATE_CURRENT;
@@ -61,7 +62,7 @@ public static PendingIntent createPendingIntent(Context context) {
   @Override public void onRequestPermissionsResult(int requestCode, String[] permissions,
       int[] grantResults) {
     if (!hasStoragePermission()) {
-      Toast.makeText(getApplication(), R.string.leak_canary_permission_not_granted, LENGTH_LONG)
+      Toast.makeText(getApplication(), ResourceProvider.provider().leak_canary_permission_not_granted(), LENGTH_LONG)
           .show();
     }
     finish();
