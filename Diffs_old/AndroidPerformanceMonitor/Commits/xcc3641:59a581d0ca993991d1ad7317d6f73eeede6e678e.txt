diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/AbstractSampler.kt b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/AbstractSampler.kt
index 2d84b54..a53afcc 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/AbstractSampler.kt
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/AbstractSampler.kt
@@ -29,7 +29,7 @@ internal abstract class AbstractSampler(sampleInterval: Long) {
         override fun run() {
             doSample()
             if (mShouldSample.get()) {
-                HandlerThreadFactory.getTimerThreadHandler()
+                HandlerThreadFactory.timerThreadHandler
                         .postDelayed(this, mSampleInterval)
             }
         }
@@ -45,8 +45,8 @@ internal abstract class AbstractSampler(sampleInterval: Long) {
         }
         mShouldSample.set(true)
 
-        HandlerThreadFactory.getTimerThreadHandler().removeCallbacks(mRunnable)
-        HandlerThreadFactory.getTimerThreadHandler().postDelayed(mRunnable, BlockCanaryInternals.getInstance().sampleDelay)
+        HandlerThreadFactory.timerThreadHandler.removeCallbacks(mRunnable)
+        HandlerThreadFactory.timerThreadHandler.postDelayed(mRunnable, BlockCanaryInternals.getInstance().sampleDelay)
     }
 
     fun stop() {
@@ -54,7 +54,7 @@ internal abstract class AbstractSampler(sampleInterval: Long) {
             return
         }
         mShouldSample.set(false)
-        HandlerThreadFactory.getTimerThreadHandler().removeCallbacks(mRunnable)
+        HandlerThreadFactory.timerThreadHandler.removeCallbacks(mRunnable)
     }
 
     protected abstract fun doSample()
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.kt
similarity index 60%
rename from blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java
rename to blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.kt
index 42dd1f1..4e71cf5 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.kt
@@ -13,45 +13,23 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.moduth.blockcanary;
+package com.github.moduth.blockcanary
 
-import android.content.Context;
-
-import com.github.moduth.blockcanary.internal.BlockInfo;
-
-import java.io.File;
-import java.util.LinkedList;
-import java.util.List;
+import android.content.Context
+import com.github.moduth.blockcanary.internal.BlockInfo
+import java.io.File
+import java.util.*
 
 /**
  * User should provide a real implementation of this class to use BlockCanary.
  */
-public class BlockCanaryContext implements BlockInterceptor {
-
-    private static Context sApplicationContext;
-    private static BlockCanaryContext sInstance = null;
-
-    public BlockCanaryContext() {
-    }
-
-    static void init(Context context, BlockCanaryContext blockCanaryContext) {
-        sApplicationContext = context;
-        sInstance = blockCanaryContext;
-    }
-
-    public static BlockCanaryContext get() {
-        if (sInstance == null) {
-            throw new RuntimeException("BlockCanaryContext null");
-        } else {
-            return sInstance;
-        }
-    }
+open class BlockCanaryContext : BlockInterceptor {
 
     /**
      * Provide application context.
      */
-    public Context provideContext() {
-        return sApplicationContext;
+    fun provideContext(): Context {
+        return sApplicationContext
     }
 
     /**
@@ -59,8 +37,8 @@ public Context provideContext() {
      *
      * @return Qualifier which can specify this installation, like version + flavor.
      */
-    public String provideQualifier() {
-        return "unknown";
+    open fun provideQualifier(): String {
+        return "unknown"
     }
 
     /**
@@ -68,27 +46,27 @@ public String provideQualifier() {
      *
      * @return user id
      */
-    public String provideUid() {
-        return "uid";
+    open fun provideUid(): String {
+        return "uid"
     }
 
     /**
      * Network type
      *
-     * @return {@link String} like 2G, 3G, 4G, wifi, etc.
+     * @return [String] like 2G, 3G, 4G, wifi, etc.
      */
-    public String provideNetworkType() {
-        return "unknown";
+    open fun provideNetworkType(): String {
+        return "unknown"
     }
 
     /**
      * Config monitor duration, after this time BlockCanary will stop, use
-     * with {@code BlockCanary}'s isMonitorDurationEnd
+     * with `BlockCanary`'s isMonitorDurationEnd
      *
      * @return monitor last duration (in hour)
      */
-    public int provideMonitorDuration() {
-        return -1;
+    open fun provideMonitorDuration(): Int {
+        return -1
     }
 
     /**
@@ -97,22 +75,23 @@ public int provideMonitorDuration() {
      *
      * @return threshold in mills
      */
-    public int provideBlockThreshold() {
-        return 1000;
+    open fun provideBlockThreshold(): Int {
+        return 1000
     }
 
     /**
      * Thread stack dump interval, use when block happens, BlockCanary will dump on main thread
      * stack according to current sample cycle.
-     * <p>
+     *
+     *
      * Because the implementation mechanism of Looper, real dump interval would be longer than
      * the period specified here (especially when cpu is busier).
-     * </p>
+     *
      *
      * @return dump interval (in millis)
      */
-    public int provideDumpInterval() {
-        return provideBlockThreshold();
+    fun provideDumpInterval(): Int {
+        return provideBlockThreshold()
     }
 
     /**
@@ -120,8 +99,8 @@ public int provideDumpInterval() {
      *
      * @return path of log files
      */
-    public String providePath() {
-        return "/blockcanary/";
+    fun providePath(): String {
+        return "/blockcanary/"
     }
 
     /**
@@ -129,8 +108,8 @@ public String providePath() {
      *
      * @return true if need, else if not need.
      */
-    public boolean displayNotification() {
-        return true;
+    open fun displayNotification(): Boolean {
+        return true
     }
 
     /**
@@ -140,8 +119,8 @@ public boolean displayNotification() {
      * @param dest files compressed
      * @return true if compression is successful
      */
-    public boolean zip(File[] src, File dest) {
-        return false;
+    fun zip(src: Array<File>, dest: File): Boolean {
+        return false
     }
 
     /**
@@ -149,8 +128,8 @@ public boolean zip(File[] src, File dest) {
      *
      * @param zippedFile zipped file
      */
-    public void upload(File zippedFile) {
-        throw new UnsupportedOperationException();
+    fun upload(zippedFile: File) {
+        throw UnsupportedOperationException()
     }
 
     /**
@@ -159,8 +138,8 @@ public void upload(File zippedFile) {
      *
      * @return null if simply concern only package with process name.
      */
-    public List<String> concernPackages() {
-        return null;
+    open fun concernPackages(): List<String>? {
+        return null
     }
 
     /**
@@ -168,8 +147,8 @@ public void upload(File zippedFile) {
      *
      * @return true if filter, false it not.
      */
-    public boolean filterNonConcernStack() {
-        return false;
+    fun filterNonConcernStack(): Boolean {
+        return false
     }
 
     /**
@@ -177,10 +156,10 @@ public boolean filterNonConcernStack() {
      *
      * @return return null if you don't need white-list filter.
      */
-    public List<String> provideWhiteList() {
-        LinkedList<String> whiteList = new LinkedList<>();
-        whiteList.add("org.chromium");
-        return whiteList;
+    open fun provideWhiteList(): List<String> {
+        val whiteList = LinkedList<String>()
+        whiteList.add("org.chromium")
+        return whiteList
     }
 
     /**
@@ -188,15 +167,14 @@ public boolean filterNonConcernStack() {
      *
      * @return true if delete, false it not.
      */
-    public boolean deleteFilesInWhiteList() {
-        return true;
+    fun deleteFilesInWhiteList(): Boolean {
+        return true
     }
 
     /**
      * Block interceptor, developer may provide their own actions.
      */
-    @Override
-    public void onBlock(Context context, BlockInfo blockInfo) {
+    override fun onBlock(context: Context, blockInfo: BlockInfo) {
 
     }
 
@@ -205,7 +183,22 @@ public void onBlock(Context context, BlockInfo blockInfo) {
      *
      * @return true if stop, false otherwise
      */
-    public boolean stopWhenDebugging() {
-        return true;
+    open fun stopWhenDebugging(): Boolean {
+        return true
+    }
+
+    companion object {
+
+        private lateinit var sApplicationContext: Context
+        private lateinit var sInstance: BlockCanaryContext
+
+        @JvmStatic
+        fun init(context: Context, blockCanaryContext: BlockCanaryContext) {
+            sApplicationContext = context
+            sInstance = blockCanaryContext
+        }
+
+        @JvmStatic
+        fun instance(): BlockCanaryContext = sInstance
     }
 }
\ No newline at end of file
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/HandlerThreadFactory.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/HandlerThreadFactory.java
deleted file mode 100644
index e2b77cc..0000000
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/HandlerThreadFactory.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Copyright (C) 2016 MarkZhai (http://zhaiyifan.cn).
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.github.moduth.blockcanary;
-
-import android.os.Handler;
-import android.os.HandlerThread;
-
-final class HandlerThreadFactory {
-
-    private static HandlerThreadWrapper sLoopThread = new HandlerThreadWrapper("loop");
-    private static HandlerThreadWrapper sWriteLogThread = new HandlerThreadWrapper("writer");
-
-    private HandlerThreadFactory() {
-        throw new InstantiationError("Must not instantiate this class");
-    }
-
-    public static Handler getTimerThreadHandler() {
-        return sLoopThread.getHandler();
-    }
-
-    public static Handler getWriteLogThreadHandler() {
-        return sWriteLogThread.getHandler();
-    }
-
-    private static class HandlerThreadWrapper {
-        private Handler handler;
-
-        public HandlerThreadWrapper(String threadName) {
-            HandlerThread handlerThread = new HandlerThread("BlockCanary-" + threadName);
-            handlerThread.start();
-            handler = new Handler(handlerThread.getLooper());
-        }
-
-        public Handler getHandler() {
-            return handler;
-        }
-    }
-}
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/HandlerThreadFactory.kt b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/HandlerThreadFactory.kt
new file mode 100644
index 0000000..913d56e
--- /dev/null
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/HandlerThreadFactory.kt
@@ -0,0 +1,44 @@
+/*
+ * Copyright (C) 2016 MarkZhai (http://zhaiyifan.cn).
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.github.moduth.blockcanary
+
+import android.os.Handler
+import android.os.HandlerThread
+
+internal class HandlerThreadFactory private constructor() {
+
+    private class HandlerThreadWrapper(threadName: String) {
+        val handler: Handler
+
+        init {
+            val handlerThread = HandlerThread("BlockCanary-$threadName")
+            handlerThread.start()
+            handler = Handler(handlerThread.looper)
+        }
+    }
+
+    companion object {
+
+        private val sLoopThread = HandlerThreadWrapper("loop")
+        private val sWriteLogThread = HandlerThreadWrapper("writer")
+
+        @JvmStatic
+        val timerThreadHandler: Handler = sLoopThread.handler
+
+        @JvmStatic
+        val writeLogThreadHandler: Handler = sWriteLogThread.handler
+    }
+}
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LogWriter.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LogWriter.java
deleted file mode 100644
index fab8b72..0000000
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LogWriter.java
+++ /dev/null
@@ -1,143 +0,0 @@
-/*
- * Copyright (C) 2016 MarkZhai (http://zhaiyifan.cn).
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.github.moduth.blockcanary;
-
-import android.util.Log;
-
-import com.github.moduth.blockcanary.internal.BlockInfo;
-
-import java.io.BufferedWriter;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.OutputStreamWriter;
-import java.text.SimpleDateFormat;
-import java.util.Locale;
-
-/**
- * Log writer which runs in standalone thread.
- */
-public class LogWriter {
-
-    private static final String TAG = "LogWriter";
-
-    private static final Object SAVE_DELETE_LOCK = new Object();
-    private static final SimpleDateFormat FILE_NAME_FORMATTER
-            = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss.SSS", Locale.US);
-    private static final SimpleDateFormat TIME_FORMATTER
-            = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
-    private static final long OBSOLETE_DURATION = 2 * 24 * 3600 * 1000L;
-
-    private LogWriter() {
-        throw new InstantiationError("Must not instantiate this class");
-    }
-
-    /**
-     * Save log to file
-     *
-     * @param str block info string
-     * @return log file path
-     */
-    public static String save(String str) {
-        String path;
-        synchronized (SAVE_DELETE_LOCK) {
-            path = save("looper", str);
-        }
-        return path;
-    }
-
-    /**
-     * Delete obsolete log files, which is by default 2 days.
-     */
-    public static void cleanObsolete() {
-        HandlerThreadFactory.getWriteLogThreadHandler().post(new Runnable() {
-            @Override
-            public void run() {
-                long now = System.currentTimeMillis();
-                File[] f = BlockCanaryInternals.getLogFiles();
-                if (f != null && f.length > 0) {
-                    synchronized (SAVE_DELETE_LOCK) {
-                        for (File aF : f) {
-                            if (now - aF.lastModified() > OBSOLETE_DURATION) {
-                                aF.delete();
-                            }
-                        }
-                    }
-                }
-            }
-        });
-    }
-
-    public static void deleteAll() {
-        synchronized (SAVE_DELETE_LOCK) {
-            try {
-                File[] files = BlockCanaryInternals.getLogFiles();
-                if (files != null && files.length > 0) {
-                    for (File file : files) {
-                        file.delete();
-                    }
-                }
-            } catch (Throwable e) {
-                Log.e(TAG, "deleteAll: ", e);
-            }
-        }
-    }
-
-    private static String save(String logFileName, String str) {
-        String path = "";
-        BufferedWriter writer = null;
-        try {
-            File file = BlockCanaryInternals.detectedBlockDirectory();
-            long time = System.currentTimeMillis();
-            path = file.getAbsolutePath() + "/"
-                    + logFileName + "-"
-                    + FILE_NAME_FORMATTER.format(time) + ".log";
-
-            OutputStreamWriter out =
-                    new OutputStreamWriter(new FileOutputStream(path, true), "UTF-8");
-
-            writer = new BufferedWriter(out);
-
-            writer.write(BlockInfo.SEPARATOR);
-            writer.write("**********************");
-            writer.write(BlockInfo.SEPARATOR);
-            writer.write(TIME_FORMATTER.format(time) + "(write log time)");
-            writer.write(BlockInfo.SEPARATOR);
-            writer.write(BlockInfo.SEPARATOR);
-            writer.write(str);
-            writer.write(BlockInfo.SEPARATOR);
-
-            writer.flush();
-            writer.close();
-            writer = null;
-
-        } catch (Throwable t) {
-            Log.e(TAG, "save: ", t);
-        } finally {
-            try {
-                if (writer != null) {
-                    writer.close();
-                }
-            } catch (Exception e) {
-                Log.e(TAG, "save: ", e);
-            }
-        }
-        return path;
-    }
-
-    public static File generateTempZip(String filename) {
-        return new File(BlockCanaryInternals.getPath() + "/" + filename + ".zip");
-    }
-}
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LogWriter.kt b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LogWriter.kt
new file mode 100644
index 0000000..c217c71
--- /dev/null
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LogWriter.kt
@@ -0,0 +1,127 @@
+/*
+ * Copyright (C) 2016 MarkZhai (http://zhaiyifan.cn).
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.github.moduth.blockcanary
+
+import android.util.Log
+import com.github.moduth.blockcanary.internal.BlockInfo
+import java.io.BufferedWriter
+import java.io.File
+import java.io.FileOutputStream
+import java.io.OutputStreamWriter
+import java.text.SimpleDateFormat
+import java.util.*
+
+/**
+ * Log writer which runs in standalone thread.
+ */
+object LogWriter {
+
+    private const val TAG = "LogWriter"
+
+    private val SAVE_DELETE_LOCK = Any()
+    private val FILE_NAME_FORMATTER = SimpleDateFormat("yyyy-MM-dd_HH-mm-ss.SSS", Locale.US)
+    private val TIME_FORMATTER = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US)
+    private const val OBSOLETE_DURATION = 2 * 24 * 3600 * 1000L
+
+    /**
+     * Save log to file
+     *
+     * @param str block info string
+     * @return log file path
+     */
+    @JvmStatic
+    fun save(str: String) {
+        synchronized(SAVE_DELETE_LOCK) {
+            save("looper", str)
+        }
+    }
+
+    /**
+     * Delete obsolete log files, which is by default 2 days.
+     */
+    @JvmStatic
+    fun cleanObsolete() {
+        HandlerThreadFactory.writeLogThreadHandler.post {
+            val now = System.currentTimeMillis()
+            BlockCanaryInternals.getLogFiles()
+                    ?.takeIf { it.isNotEmpty() }
+                    ?.let {
+                        synchronized(SAVE_DELETE_LOCK) {
+                            it.filter { now - it.lastModified() > OBSOLETE_DURATION }.forEach { it.delete() }
+                        }
+                    }
+        }
+    }
+
+    @JvmStatic
+    fun deleteAll() {
+        synchronized(SAVE_DELETE_LOCK) {
+            try {
+                BlockCanaryInternals.getLogFiles()
+                        ?.takeIf { it.isNotEmpty() }
+                        ?.forEach { it.delete() }
+            } catch (e: Throwable) {
+                Log.e(TAG, "deleteAll: ", e)
+            }
+        }
+    }
+
+    @JvmStatic
+    private fun save(logFileName: String, str: String): String {
+        var path = ""
+        var writer: BufferedWriter? = null
+        try {
+            val file = BlockCanaryInternals.detectedBlockDirectory()
+            val time = System.currentTimeMillis()
+            path = (file.absolutePath + "/"
+                    + logFileName + "-"
+                    + FILE_NAME_FORMATTER.format(time) + ".log")
+
+            val out = OutputStreamWriter(FileOutputStream(path, true), "UTF-8")
+
+            writer = BufferedWriter(out)
+
+            writer.write(BlockInfo.SEPARATOR)
+            writer.write("**********************")
+            writer.write(BlockInfo.SEPARATOR)
+            writer.write(TIME_FORMATTER.format(time) + "(write log time)")
+            writer.write(BlockInfo.SEPARATOR)
+            writer.write(BlockInfo.SEPARATOR)
+            writer.write(str)
+            writer.write(BlockInfo.SEPARATOR)
+
+            writer.flush()
+            writer.close()
+            writer = null
+
+        } catch (t: Throwable) {
+            Log.e(TAG, "save: ", t)
+        } finally {
+            try {
+                writer?.close()
+            } catch (e: Exception) {
+                Log.e(TAG, "save: ", e)
+            }
+
+        }
+        return path
+    }
+
+    @JvmStatic
+    fun generateTempZip(filename: String): File {
+        return File("${BlockCanaryInternals.getPath()}/$filename.zip")
+    }
+}
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LooperMonitor.kt b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LooperMonitor.kt
index 5f1b280..52c4fa4 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LooperMonitor.kt
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LooperMonitor.kt
@@ -61,7 +61,7 @@ internal class LooperMonitor(private val mBlockListener: BlockListener, blockThr
         val startTime = mStartTimestamp
         val startThreadTime = mStartThreadTimestamp
         val endThreadTime = SystemClock.currentThreadTimeMillis()
-        HandlerThreadFactory.getWriteLogThreadHandler().post { mBlockListener.onBlockEvent(startTime, endTime, startThreadTime, endThreadTime) }
+        HandlerThreadFactory.writeLogThreadHandler.post { mBlockListener.onBlockEvent(startTime, endTime, startThreadTime, endThreadTime) }
     }
 
     private fun startDump() {
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java
index edc0858..d9d9192 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java
@@ -39,10 +39,10 @@
     private boolean mMonitorStarted = false;
 
     private BlockCanary() {
-        BlockCanaryInternals.setContext(BlockCanaryContext.get());
+        BlockCanaryInternals.setContext(BlockCanaryContext.instance());
         mBlockCanaryCore = BlockCanaryInternals.getInstance();
-        mBlockCanaryCore.addBlockInterceptor(BlockCanaryContext.get());
-        if (!BlockCanaryContext.get().displayNotification()) {
+        mBlockCanaryCore.addBlockInterceptor(BlockCanaryContext.instance());
+        if (!BlockCanaryContext.instance().displayNotification()) {
             return;
         }
         mBlockCanaryCore.addBlockInterceptor(new DisplayService());
@@ -58,7 +58,7 @@ private BlockCanary() {
      */
     public static BlockCanary install(Context context, BlockCanaryContext blockCanaryContext) {
         BlockCanaryContext.init(context, blockCanaryContext);
-        setEnabled(context, DisplayActivity.class, BlockCanaryContext.get().displayNotification());
+        setEnabled(context, DisplayActivity.class, BlockCanaryContext.instance().displayNotification());
         return get();
     }
 
@@ -112,7 +112,7 @@ public void upload() {
      * BlockCanary.
      */
     public void recordStartTime() {
-        PreferenceManager.getDefaultSharedPreferences(BlockCanaryContext.get().provideContext())
+        PreferenceManager.getDefaultSharedPreferences(BlockCanaryContext.instance().provideContext())
                 .edit()
                 .putLong("BlockCanary_StartTime", System.currentTimeMillis())
                 .commit();
@@ -125,10 +125,10 @@ public void recordStartTime() {
      */
     public boolean isMonitorDurationEnd() {
         long startTime =
-                PreferenceManager.getDefaultSharedPreferences(BlockCanaryContext.get().provideContext())
+                PreferenceManager.getDefaultSharedPreferences(BlockCanaryContext.instance().provideContext())
                         .getLong("BlockCanary_StartTime", 0);
         return startTime != 0 && System.currentTimeMillis() - startTime >
-                BlockCanaryContext.get().provideMonitorDuration() * 3600 * 1000;
+                BlockCanaryContext.instance().provideMonitorDuration() * 3600 * 1000;
     }
 
     // these lines are originally copied from LeakCanary: Copyright (C) 2015 Square, Inc.
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/DisplayActivity.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/DisplayActivity.java
index b0b69ff..2f7f521 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/DisplayActivity.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/DisplayActivity.java
@@ -390,7 +390,7 @@ public void run() {
                         boolean needAddToList = true;
 
                         if (BlockCanaryUtils.isInWhiteList(blockInfo)) {
-                            if (BlockCanaryContext.get().deleteFilesInWhiteList()) {
+                            if (BlockCanaryContext.instance().deleteFilesInWhiteList()) {
                                 blockFile.delete();
                                 blockFile = null;
                             }
@@ -398,7 +398,7 @@ public void run() {
                         }
 
                         blockInfo.concernStackString = BlockCanaryUtils.concernStackString(blockInfo);
-                        if (BlockCanaryContext.get().filterNonConcernStack() &&
+                        if (BlockCanaryContext.instance().filterNonConcernStack() &&
                                 TextUtils.isEmpty(blockInfo.concernStackString)) {
                             needAddToList = false;
                         }
