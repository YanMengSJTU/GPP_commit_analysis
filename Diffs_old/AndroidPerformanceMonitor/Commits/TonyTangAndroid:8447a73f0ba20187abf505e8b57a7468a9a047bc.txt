diff --git a/CHANGELOG.md b/CHANGELOG.md
index e529235..366a907 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,8 +1,21 @@
 # Change Log
 
-You can watch releases [on Maven](https://oss.sonatype.org/content/groups/public/com/github/moduth/).
+You can watch releases [on Maven](https://oss.sonatype.org/content/groups/public/com/github/markzhai/).
 
-## Version 1.3
+## Version 1.5 *(2017-02-26)*
+
+Debug mode stop monitor.
+
+## Version 1.4 *(2016-11-02)*
+
+- Bug fix.
+- Add onBlock interceptor.
+
+### 1.4.1 (2017-01-19)
+
+- Bug fix
+
+## Version 1.3 *(2016-08-24)*
 
 - Code refactor.
 - Support white-list and concern packages.
@@ -27,4 +40,4 @@ Initial release.
 Fix no-op api not align bug.
 
 ### 1.0.2
-Add notification sound, fix 2.3 crash.
\ No newline at end of file
+Add notification sound, fix 2.3 crash.
diff --git a/README.md b/README.md
index bb62a7b..bd17983 100644
--- a/README.md
+++ b/README.md
@@ -5,8 +5,11 @@ A transparent ui-block detection library for Android, app only needs one-line-co
 
 The naming is to pay respect to the great library [LeakCanary](https://github.com/square/leakcanary), ui-related codes are modified from leakcanary's ui part.
 
-- 1.3.0 Add white-list and concern-package feature.
+- 1.5.0 Add context that can stop monitor in debug mode.
+- 1.4.1 Bug fix.
+- 1.4.0 Bug fix, add onBlock interceptor in context.
 - 1.3.1 Enable configuration of label and icon.
+- 1.3.0 Add white-list and concern-package feature.
 
 # Getting started
 
@@ -15,11 +18,11 @@ You may choose how to assemble them as you like.
 ```gradle
 dependencies {
     // most often used way, enable notification to notify block event
-    compile 'com.github.markzhai:blockcanary-android:1.3.1'
+    compile 'com.github.markzhai:blockcanary-android:1.5.0'
 
     // this way you only enable BlockCanary in debug package
-    // debugCompile 'com.github.markzhai:blockcanary-android:1.3.1'
-    // releaseCompile 'com.github.markzhai:blockcanary-no-op:1.3.1'
+    // debugCompile 'com.github.markzhai:blockcanary-android:1.5.0'
+    // releaseCompile 'com.github.markzhai:blockcanary-no-op:1.5.0'
 }
 ```
 
@@ -190,6 +193,13 @@ public class AppBlockCanaryContext extends BlockCanaryContext {
     public boolean deleteFilesInWhiteList() {
         return true;
     }
+
+    /**
+     * Block interceptor, developer may provide their own actions.
+     */
+    public void onBlock(Context context, BlockInfo blockInfo) {
+
+    }
 }
 ```
 
@@ -205,6 +215,11 @@ Principle flow picture:
 ![Block detail](art/shot1.png "detail")
 ![Block list](art/shot2.png "list")
 
+# Donation
+
+If you find this repository helpful, you may make a donation to me via alipay or wechat.
+![alipay](http://blog.zhaiyifan.cn/images/donation-alipay.png "alipay") ![wechat](http://blog.zhaiyifan.cn/images/donation.jpg "wechat")
+
 # Contributors
 
 This library is initially created by [markzhai](https://github.com/markzhai), and maintained under the organization [moduth](https://github.com/moduth) with [nimengbo](https://github.com/nimengbo) and [zzz40500](https://github.com/zzz40500).
diff --git a/README_CN.md b/README_CN.md
index 54ff5c1..97c7090 100644
--- a/README_CN.md
+++ b/README_CN.md
@@ -5,9 +5,13 @@ BlockCanary是一个Android平台的一个非侵入式的性能监控组件，
 
 取名为BlockCanary则是为了向LeakCanary致敬，顺便本库的UI部分是从LeakCanary改来的，之后可能会做一些调整。
 
+- 1.5.0 Context 中增加 Debug 时不监控选项。
+- 1.4.1 Bug修复
+- 1.4.0 修复 1.3.x 的 bug，增加发生卡慢时的拦截方法。
 - 1.3.0 增加白名单和包名过滤功能
 
 # 包介绍
+
 - blockcanary-android  blockcanary类的一些实现
 - blockcanary-analyzer 记录block信息的核心实现
 - blockcanary-no-op    空包，为了release打包时不编译进去
@@ -20,11 +24,11 @@ BlockCanary是一个Android平台的一个非侵入式的性能监控组件，
 
 ```gradle
 dependencies {
-    compile 'com.github.markzhai:blockcanary-android:1.3.1'
+    compile 'com.github.markzhai:blockcanary-android:1.5.0'
 
     // 仅在debug包启用BlockCanary进行卡顿监控和提示的话，可以这么用
-    debugCompile 'com.github.markzhai:blockcanary-android:1.3.1'
-    releaseCompile 'com.github.markzhai:blockcanary-no-op:1.3.1'
+    debugCompile 'com.github.markzhai:blockcanary-android:1.5.0'
+    releaseCompile 'com.github.markzhai:blockcanary-no-op:1.5.0'
 }
 ```
 
@@ -36,7 +40,6 @@ PS: 由于该库使用了 `getMainLooper().setMessageLogging()`, 请确认是否
 public class DemoApplication extends Application {
     @Override
     public void onCreate() {
-        ...
         // 在主进程初始化调用哈
         BlockCanary.install(this, new AppBlockCanaryContext()).start();
     }
@@ -186,6 +189,13 @@ public class AppBlockCanaryContext extends BlockCanaryContext {
     public boolean deleteFilesInWhiteList() {
         return true;
     }
+
+    /**
+     * Block interceptor, developer may provide their own actions.
+     */
+    public void onBlock(Context context, BlockInfo blockInfo) {
+
+    }
 }
 ```
 
@@ -207,7 +217,7 @@ public class AppBlockCanaryContext extends BlockCanaryContext {
 - 首先可以根据手机性能，如核数、机型、内存来判断对应耗时是不是应该判定为卡顿。如一些差的机器，或者内存本身不足的时候。
 - 根据CPU情况，是否是app拿不到cpu，被其他应用拿走了。
 - 看timecost和threadtimecost，如果两者差得很多，则是主线程被等待或者资源被抢占。
-- 看卡顿发生前最近的几次堆栈，如果堆栈相同，则可以判定为是改出发生卡顿，否则需要比较分析。
+- 看卡顿发生前最近的几次堆栈，如果堆栈相同，则可以判定为是该处发生卡顿，否则需要比较分析。
 
 # Demo工程
 **请参考本项目下的demo module，点击三个按钮会触发对应的耗时事件，消息栏则会弹出block的notification，点击可以进去查看详细信息。**  
diff --git a/blockcanary-analyzer/gradle.properties b/blockcanary-analyzer/gradle.properties
index c930903..948f9dc 100644
--- a/blockcanary-analyzer/gradle.properties
+++ b/blockcanary-analyzer/gradle.properties
@@ -1,8 +1,8 @@
 POM_NAME=Android BlockCanary Analyzer Library
 POM_ARTIFACT_ID=blockcanary-analyzer
 POM_PACKAGING=aar
-VERSION_NAME=1.3.1
-VERSION_CODE=12
+VERSION_NAME=1.5.0
+VERSION_CODE=16
 GROUP=com.github.markzhai
 
 POM_DESCRIPTION=Android BlockCanary Analyzer Library
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java
index 4e50dc5..42dd1f1 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java
@@ -17,6 +17,8 @@
 
 import android.content.Context;
 
+import com.github.moduth.blockcanary.internal.BlockInfo;
+
 import java.io.File;
 import java.util.LinkedList;
 import java.util.List;
@@ -24,7 +26,7 @@
 /**
  * User should provide a real implementation of this class to use BlockCanary.
  */
-public class BlockCanaryContext {
+public class BlockCanaryContext implements BlockInterceptor {
 
     private static Context sApplicationContext;
     private static BlockCanaryContext sInstance = null;
@@ -32,7 +34,7 @@
     public BlockCanaryContext() {
     }
 
-    public static void init(Context context, BlockCanaryContext blockCanaryContext) {
+    static void init(Context context, BlockCanaryContext blockCanaryContext) {
         sApplicationContext = context;
         sInstance = blockCanaryContext;
     }
@@ -189,4 +191,21 @@ public boolean filterNonConcernStack() {
     public boolean deleteFilesInWhiteList() {
         return true;
     }
+
+    /**
+     * Block interceptor, developer may provide their own actions.
+     */
+    @Override
+    public void onBlock(Context context, BlockInfo blockInfo) {
+
+    }
+
+    /**
+     * Whether to stop monitoring when in debug mode.
+     *
+     * @return true if stop, false otherwise
+     */
+    public boolean stopWhenDebugging() {
+        return true;
+    }
 }
\ No newline at end of file
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
index 452ec28..f065472 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
@@ -23,17 +23,19 @@
 import java.io.File;
 import java.io.FilenameFilter;
 import java.util.ArrayList;
+import java.util.LinkedList;
+import java.util.List;
 
 public final class BlockCanaryInternals {
 
-    public LooperMonitor monitor;
-    public StackSampler stackSampler;
-    public CpuSampler cpuSampler;
+    LooperMonitor monitor;
+    StackSampler stackSampler;
+    CpuSampler cpuSampler;
 
     private static BlockCanaryInternals sInstance;
     private static BlockCanaryContext sContext;
 
-    private BlockInterceptor mInterceptor;
+    private List<BlockInterceptor> mInterceptorChain = new LinkedList<>();
 
     public BlockCanaryInternals() {
 
@@ -60,12 +62,14 @@ public void onBlockEvent(long realTimeStart, long realTimeEnd,
                             .flushString();
                     LogWriter.save(blockInfo.toString());
 
-                    if (getContext().displayNotification() && mInterceptor != null) {
-                        mInterceptor.onBlock(getContext().provideContext(), blockInfo.timeStart);
+                    if (mInterceptorChain.size() != 0) {
+                        for (BlockInterceptor interceptor : mInterceptorChain) {
+                            interceptor.onBlock(getContext().provideContext(), blockInfo);
+                        }
                     }
                 }
             }
-        }, getContext().provideBlockThreshold()));
+        }, getContext().provideBlockThreshold(), getContext().stopWhenDebugging()));
 
         LogWriter.cleanObsolete();
     }
@@ -75,7 +79,7 @@ public void onBlockEvent(long realTimeStart, long realTimeEnd,
      *
      * @return BlockCanaryInternals instance
      */
-    public static BlockCanaryInternals getInstance() {
+    static BlockCanaryInternals getInstance() {
         if (sInstance == null) {
             synchronized (BlockCanaryInternals.class) {
                 if (sInstance == null) {
@@ -99,19 +103,19 @@ public static BlockCanaryContext getContext() {
         return sContext;
     }
 
-    public void setOnBlockInterceptor(BlockInterceptor blockInterceptor) {
-        mInterceptor = blockInterceptor;
+    void addBlockInterceptor(BlockInterceptor blockInterceptor) {
+        mInterceptorChain.add(blockInterceptor);
     }
 
-    public void setMonitor(LooperMonitor looperPrinter) {
+    private void setMonitor(LooperMonitor looperPrinter) {
         monitor = looperPrinter;
     }
 
-    public long getSampleDelay() {
+    long getSampleDelay() {
         return (long) (BlockCanaryInternals.getContext().provideBlockThreshold() * 0.8f);
     }
 
-    public static String getPath() {
+    static String getPath() {
         String state = Environment.getExternalStorageState();
         String logPath = BlockCanaryInternals.getContext()
                 == null ? "" : BlockCanaryInternals.getContext().providePath();
@@ -123,7 +127,7 @@ public static String getPath() {
         return Environment.getDataDirectory().getAbsolutePath() + BlockCanaryInternals.getContext().providePath();
     }
 
-    public static File detectedBlockDirectory() {
+    static File detectedBlockDirectory() {
         File directory = new File(getPath());
         if (!directory.exists()) {
             directory.mkdirs();
@@ -139,11 +143,11 @@ public static File detectedBlockDirectory() {
         return null;
     }
 
-    static class BlockLogFileFilter implements FilenameFilter {
+    private static class BlockLogFileFilter implements FilenameFilter {
 
         private String TYPE = ".log";
 
-        public BlockLogFileFilter() {
+        BlockLogFileFilter() {
 
         }
 
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockInterceptor.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockInterceptor.java
index b94ca0c..26a3df6 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockInterceptor.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockInterceptor.java
@@ -17,6 +17,8 @@
 
 import android.content.Context;
 
-public interface BlockInterceptor {
-    void onBlock(Context context, String timeStart);
+import com.github.moduth.blockcanary.internal.BlockInfo;
+
+interface BlockInterceptor {
+    void onBlock(Context context, BlockInfo blockInfo);
 }
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LooperMonitor.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LooperMonitor.java
index b3dfb43..3b697e6 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LooperMonitor.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LooperMonitor.java
@@ -15,6 +15,7 @@
  */
 package com.github.moduth.blockcanary;
 
+import android.os.Debug;
 import android.os.SystemClock;
 import android.util.Printer;
 
@@ -27,6 +28,7 @@
     private long mStartThreadTimestamp = 0;
     private BlockListener mBlockListener = null;
     private boolean mPrintingStarted = false;
+    private final boolean mStopWhenDebugging;
 
     public interface BlockListener {
         void onBlockEvent(long realStartTime,
@@ -35,16 +37,20 @@ void onBlockEvent(long realStartTime,
                           long threadTimeEnd);
     }
 
-    public LooperMonitor(BlockListener blockListener, long blockThresholdMillis) {
+    public LooperMonitor(BlockListener blockListener, long blockThresholdMillis, boolean stopWhenDebugging) {
         if (blockListener == null) {
             throw new IllegalArgumentException("blockListener should not be null.");
         }
         mBlockListener = blockListener;
         mBlockThresholdMillis = blockThresholdMillis;
+        mStopWhenDebugging = stopWhenDebugging;
     }
 
     @Override
     public void println(String x) {
+        if (mStopWhenDebugging && Debug.isDebuggerConnected()) {
+            return;
+        }
         if (!mPrintingStarted) {
             mStartTimestamp = System.currentTimeMillis();
             mStartThreadTimestamp = SystemClock.currentThreadTimeMillis();
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
index 36f5f09..1b07edd 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
@@ -107,18 +107,18 @@
         sApiLevel = Build.VERSION.SDK_INT + " " + VERSION.RELEASE;
         sQualifier = BlockCanaryInternals.getContext().provideQualifier();
         try {
-            TelephonyManager mTManager = (TelephonyManager) BlockCanaryInternals
+            TelephonyManager telephonyManager = (TelephonyManager) BlockCanaryInternals
                     .getContext()
                     .provideContext()
                     .getSystemService(Context.TELEPHONY_SERVICE);
-            sImei = mTManager.getDeviceId();
+            sImei = telephonyManager.getDeviceId();
         } catch (Exception exception) {
             Log.e(TAG, NEW_INSTANCE_METHOD, exception);
             sImei = EMPTY_IMEI;
         }
     }
 
-    protected BlockInfo() {
+    public BlockInfo() {
     }
 
     public static BlockInfo newInstance() {
diff --git a/blockcanary-android-no-op/gradle.properties b/blockcanary-android-no-op/gradle.properties
index 953b442..f57d2de 100644
--- a/blockcanary-android-no-op/gradle.properties
+++ b/blockcanary-android-no-op/gradle.properties
@@ -1,8 +1,8 @@
 POM_NAME=Android BlockCanary NO-OP Library
 POM_ARTIFACT_ID=blockcanary-no-op
 POM_PACKAGING=jar
-VERSION_NAME=1.3.1
-VERSION_CODE=12
+VERSION_NAME=1.5.0
+VERSION_CODE=16
 GROUP=com.github.markzhai
 
 POM_DESCRIPTION=Android BlockCanary NO-OP Library
diff --git a/blockcanary-android-no-op/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java b/blockcanary-android-no-op/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java
index ad85e33..84b55a0 100644
--- a/blockcanary-android-no-op/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java
+++ b/blockcanary-android-no-op/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java
@@ -17,8 +17,9 @@
 
 import android.content.Context;
 
+import com.github.moduth.blockcanary.internal.BlockInfo;
+
 import java.io.File;
-import java.util.LinkedList;
 import java.util.List;
 
 /**
@@ -32,7 +33,7 @@
     public BlockCanaryContext() {
     }
 
-    public static void init(Context c, BlockCanaryContext g) {
+    static void init(Context c, BlockCanaryContext g) {
         sApplicationContext = c;
         sInstance = g;
     }
@@ -104,4 +105,12 @@ public boolean filterNonConcernStack() {
     public boolean deleteFilesInWhiteList() {
         return false;
     }
+
+    public void onBlock(Context context, BlockInfo blockInfo) {
+
+    }
+
+    public boolean stopWhenDebugging() {
+        return true;
+    }
 }
\ No newline at end of file
diff --git a/blockcanary-android-no-op/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java b/blockcanary-android-no-op/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
new file mode 100644
index 0000000..278a8c7
--- /dev/null
+++ b/blockcanary-android-no-op/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
@@ -0,0 +1,4 @@
+package com.github.moduth.blockcanary.internal;
+
+public class BlockInfo {
+}
diff --git a/blockcanary-android/build.gradle b/blockcanary-android/build.gradle
index 750d4ac..ebe613e 100644
--- a/blockcanary-android/build.gradle
+++ b/blockcanary-android/build.gradle
@@ -22,5 +22,5 @@ android {
 dependencies {
     compile fileTree(include: ['*.jar'], dir: 'libs')
 //    compile project(':blockcanary-analyzer')
-    compile 'com.github.markzhai:blockcanary-analyzer:1.3.1'
+    compile 'com.github.markzhai:blockcanary-analyzer:1.5.0'
 }
diff --git a/blockcanary-android/gradle.properties b/blockcanary-android/gradle.properties
index 44939ee..863c166 100644
--- a/blockcanary-android/gradle.properties
+++ b/blockcanary-android/gradle.properties
@@ -1,8 +1,8 @@
 POM_NAME=Android BlockCanary Library
 POM_ARTIFACT_ID=blockcanary-android
 POM_PACKAGING=aar
-VERSION_NAME=1.3.1
-VERSION_CODE=12
+VERSION_NAME=1.5.0
+VERSION_CODE=16
 GROUP=com.github.markzhai
 
 POM_DESCRIPTION=Android BlockCanary Library
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java
index 75919fe..edc0858 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java
@@ -41,10 +41,12 @@
     private BlockCanary() {
         BlockCanaryInternals.setContext(BlockCanaryContext.get());
         mBlockCanaryCore = BlockCanaryInternals.getInstance();
+        mBlockCanaryCore.addBlockInterceptor(BlockCanaryContext.get());
         if (!BlockCanaryContext.get().displayNotification()) {
             return;
         }
-        mBlockCanaryCore.setOnBlockInterceptor(new DisplayService());
+        mBlockCanaryCore.addBlockInterceptor(new DisplayService());
+
     }
 
     /**
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
index ff7862c..7d71590 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
@@ -23,6 +23,7 @@
 import android.content.Intent;
 import android.util.Log;
 
+import com.github.moduth.blockcanary.internal.BlockInfo;
 import com.github.moduth.blockcanary.ui.DisplayActivity;
 
 import java.lang.reflect.InvocationTargetException;
@@ -38,12 +39,12 @@
     private static final String TAG = "DisplayService";
 
     @Override
-    public void onBlock(Context context, String timeStart) {
+    public void onBlock(Context context, BlockInfo blockInfo) {
         Intent intent = new Intent(context, DisplayActivity.class);
-        intent.putExtra("show_latest", timeStart);
+        intent.putExtra("show_latest", blockInfo.timeStart);
         intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
         PendingIntent pendingIntent = PendingIntent.getActivity(context, 1, intent, FLAG_UPDATE_CURRENT);
-        String contentTitle = context.getString(R.string.block_canary_class_has_blocked, timeStart);
+        String contentTitle = context.getString(R.string.block_canary_class_has_blocked, blockInfo.timeStart);
         String contentText = context.getString(R.string.block_canary_notification_message);
         show(context, contentTitle, contentText, pendingIntent);
     }
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/BlockCanaryUtils.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/BlockCanaryUtils.java
index 0baa66c..195b0ce 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/BlockCanaryUtils.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/BlockCanaryUtils.java
@@ -17,7 +17,9 @@
     static {
         WHITE_LIST.addAll(BlockCanaryInternals.getContext().provideWhiteList());
 
-        CONCERN_LIST.addAll(BlockCanaryInternals.getContext().concernPackages());
+        if (BlockCanaryInternals.getContext().concernPackages() != null) {
+            CONCERN_LIST.addAll(BlockCanaryInternals.getContext().concernPackages());
+        }
         if (CONCERN_LIST.isEmpty()) {
             CONCERN_LIST.add(ProcessUtils.myProcessName());
         }
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/DisplayActivity.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/DisplayActivity.java
index 5726f26..cdd30b8 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/DisplayActivity.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/DisplayActivity.java
@@ -17,8 +17,10 @@
 
 import android.app.ActionBar;
 import android.app.Activity;
+import android.app.AlertDialog;
 import android.app.PendingIntent;
 import android.content.Context;
+import android.content.DialogInterface;
 import android.content.Intent;
 import android.net.Uri;
 import android.os.Build;
@@ -250,9 +252,21 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
             mActionButton.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View v) {
-                    LogWriter.deleteAll();
-                    mBlockInfoEntries = Collections.emptyList();
-                    updateUi();
+                    DialogInterface.OnClickListener okListener = new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            LogWriter.deleteAll();
+                            mBlockInfoEntries = Collections.emptyList();
+                            updateUi();
+                        }
+                    };
+                    new AlertDialog.Builder(DisplayActivity.this)
+                            .setTitle(getString(R.string.block_canary_delete))
+                            .setMessage(getString(R.string.block_canary_delete_all_dialog_content))
+                            .setPositiveButton(getString(R.string.block_canary_yes), okListener)
+                            .setNegativeButton(getString(R.string.block_canary_no), null)
+                            .show();
+
                 }
             });
         }
@@ -282,18 +296,18 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
             }
             mActionButton.setVisibility(VISIBLE);
             mActionButton.setText(R.string.block_canary_delete);
-            mActionButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    if (blockInfo != null) {
-                        blockInfo.logFile.delete();
-                        mBlockStartTime = null;
-                        mBlockInfoEntries.remove(blockInfo);
-                        updateUi();
-                    }
-                }
-            });
         }
+        mActionButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (blockInfo != null) {
+                    blockInfo.logFile.delete();
+                    mBlockStartTime = null;
+                    mBlockInfoEntries.remove(blockInfo);
+                    updateUi();
+                }
+            }
+        });
         adapter.update(blockInfo);
         setTitle(getString(R.string.block_canary_class_has_blocked, blockInfo.timeCost));
     }
diff --git a/blockcanary-android/src/main/res/values/strings.xml b/blockcanary-android/src/main/res/values/strings.xml
index b4ca0ee..bbea1ad 100644
--- a/blockcanary-android/src/main/res/values/strings.xml
+++ b/blockcanary-android/src/main/res/values/strings.xml
@@ -6,6 +6,9 @@
     <string name="block_canary_block_list_title">Blocks in %s</string>
     <string name="block_canary_delete">Delete</string>
     <string name="block_canary_delete_all">Delete all</string>
+    <string name="block_canary_delete_all_dialog_content">Are you sure to delete all records?</string>
     <string name="block_canary_class_has_blocked">blocked %s ms</string>
     <string name="block_canary_notification_message">Click for more details</string>
+    <string name="block_canary_yes">Yes</string>
+    <string name="block_canary_no">No</string>
 </resources>
diff --git a/blockcanary-sample/src/main/java/com/example/blockcanary/AppContext.java b/blockcanary-sample/src/main/java/com/example/blockcanary/AppContext.java
index a1116bc..612df72 100644
--- a/blockcanary-sample/src/main/java/com/example/blockcanary/AppContext.java
+++ b/blockcanary-sample/src/main/java/com/example/blockcanary/AppContext.java
@@ -77,4 +77,9 @@ public boolean displayNotification() {
         list.add("com.whitelist");
         return list;
     }
+
+    @Override
+    public boolean stopWhenDebugging() {
+        return true;
+    }
 }
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index eee148b..2e498be 100644
--- a/build.gradle
+++ b/build.gradle
@@ -6,7 +6,7 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.3'
+        classpath 'com.android.tools.build:gradle:2.2.2'
     }
 }
 
