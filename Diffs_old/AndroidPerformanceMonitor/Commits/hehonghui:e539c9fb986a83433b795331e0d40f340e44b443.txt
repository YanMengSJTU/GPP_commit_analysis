diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
index 895d0d6..73c467a 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
@@ -18,7 +18,11 @@
 import android.os.Environment;
 import android.os.Looper;
 
+import com.github.moduth.blockcanary.interceptor.DefaultBlockInterceptor;
+import com.github.moduth.blockcanary.interceptor.BlockInterceptor;
 import com.github.moduth.blockcanary.internal.BlockInfo;
+import com.github.moduth.blockcanary.sampler.CpuSampler;
+import com.github.moduth.blockcanary.sampler.StackSampler;
 
 import java.io.File;
 import java.io.FilenameFilter;
@@ -33,7 +37,7 @@
     CpuSampler cpuSampler;
 
     private static BlockCanaryInternals sInstance;
-    private static BlockCanaryContext sContext;
+    private static DefaultBlockInterceptor sContext;
 
     private List<BlockInterceptor> mInterceptorChain = new LinkedList<>();
 
@@ -79,7 +83,7 @@ public void onBlockEvent(long realTimeStart, long realTimeEnd,
      *
      * @return BlockCanaryInternals instance
      */
-    static BlockCanaryInternals getInstance() {
+    public static BlockCanaryInternals getInstance() {
         if (sInstance == null) {
             synchronized (BlockCanaryInternals.class) {
                 if (sInstance == null) {
@@ -91,15 +95,15 @@ static BlockCanaryInternals getInstance() {
     }
 
     /**
-     * set {@link BlockCanaryContext} implementation
+     * set {@link DefaultBlockInterceptor} implementation
      *
      * @param context context
      */
-    public static void setContext(BlockCanaryContext context) {
+    public static void setContext(DefaultBlockInterceptor context) {
         sContext = context;
     }
 
-    public static BlockCanaryContext getContext() {
+    public static DefaultBlockInterceptor getContext() {
         return sContext;
     }
 
@@ -111,7 +115,7 @@ private void setMonitor(LooperMonitor looperPrinter) {
         monitor = looperPrinter;
     }
 
-    long getSampleDelay() {
+    public long getSampleDelay() {
         return (long) (BlockCanaryInternals.getContext().provideBlockThreshold() * 0.8f);
     }
 
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/HandlerThreadFactory.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/HandlerThreadFactory.java
index bf4c26d..e21876c 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/HandlerThreadFactory.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/HandlerThreadFactory.java
@@ -18,7 +18,7 @@
 import android.os.Handler;
 import android.os.HandlerThread;
 
-final class HandlerThreadFactory {
+public final class HandlerThreadFactory {
 
     private static HandlerThreadWrapper sLoopThread = new HandlerThreadWrapper("loop");
     private static HandlerThreadWrapper sWriteLogThread = new HandlerThreadWrapper("writer");
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockInterceptor.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/BlockInterceptor.java
similarity index 89%
rename from blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockInterceptor.java
rename to blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/BlockInterceptor.java
index 26a3df6..9dc74b1 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockInterceptor.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/BlockInterceptor.java
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.moduth.blockcanary;
+package com.github.moduth.blockcanary.interceptor;
 
 import android.content.Context;
 
 import com.github.moduth.blockcanary.internal.BlockInfo;
 
-interface BlockInterceptor {
+public interface BlockInterceptor {
     void onBlock(Context context, BlockInfo blockInfo);
 }
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/DefaultBlockInterceptor.java
similarity index 93%
rename from blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java
rename to blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/DefaultBlockInterceptor.java
index 42dd1f1..45af671 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/DefaultBlockInterceptor.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.moduth.blockcanary;
+package com.github.moduth.blockcanary.interceptor;
 
 import android.content.Context;
 
@@ -26,20 +26,20 @@
 /**
  * User should provide a real implementation of this class to use BlockCanary.
  */
-public class BlockCanaryContext implements BlockInterceptor {
+public class DefaultBlockInterceptor implements BlockInterceptor {
 
     private static Context sApplicationContext;
-    private static BlockCanaryContext sInstance = null;
+    private static DefaultBlockInterceptor sInstance = null;
 
-    public BlockCanaryContext() {
+    public DefaultBlockInterceptor() {
     }
 
-    static void init(Context context, BlockCanaryContext blockCanaryContext) {
+    static void init(Context context, DefaultBlockInterceptor blockCanaryContext) {
         sApplicationContext = context;
         sInstance = blockCanaryContext;
     }
 
-    public static BlockCanaryContext get() {
+    public static DefaultBlockInterceptor get() {
         if (sInstance == null) {
             throw new RuntimeException("BlockCanaryContext null");
         } else {
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/AbstractSampler.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/sampler/AbstractSampler.java
similarity index 92%
rename from blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/AbstractSampler.java
rename to blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/sampler/AbstractSampler.java
index 919e1c2..688f1c0 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/AbstractSampler.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/sampler/AbstractSampler.java
@@ -13,7 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.moduth.blockcanary;
+package com.github.moduth.blockcanary.sampler;
+
+import com.github.moduth.blockcanary.BlockCanaryInternals;
+import com.github.moduth.blockcanary.HandlerThreadFactory;
 
 import java.util.concurrent.atomic.AtomicBoolean;
 
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/CpuSampler.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/sampler/CpuSampler.java
similarity index 98%
rename from blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/CpuSampler.java
rename to blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/sampler/CpuSampler.java
index 86c966d..e997f1e 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/CpuSampler.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/sampler/CpuSampler.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.moduth.blockcanary;
+package com.github.moduth.blockcanary.sampler;
 
 import android.util.Log;
 
@@ -29,7 +29,7 @@
 /**
  * Dumps cpu usage.
  */
-class CpuSampler extends AbstractSampler {
+public class CpuSampler extends AbstractSampler {
 
     private static final String TAG = "CpuSampler";
     private static final int BUFFER_SIZE = 1000;
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/StackSampler.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/sampler/StackSampler.java
similarity index 96%
rename from blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/StackSampler.java
rename to blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/sampler/StackSampler.java
index 2d65e4a..8584ab9 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/StackSampler.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/sampler/StackSampler.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.moduth.blockcanary;
+package com.github.moduth.blockcanary.sampler;
 
 import com.github.moduth.blockcanary.internal.BlockInfo;
 
@@ -23,7 +23,7 @@
 /**
  * Dumps thread stack.
  */
-class StackSampler extends AbstractSampler {
+public class StackSampler extends AbstractSampler {
 
     private static final int DEFAULT_MAX_ENTRY_COUNT = 100;
     private static final LinkedHashMap<Long, String> sStackMap = new LinkedHashMap<>();
