diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
index 73c467a..be8b1de 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
@@ -15,6 +15,7 @@
  */
 package com.github.moduth.blockcanary;
 
+import android.content.Context;
 import android.os.Environment;
 import android.os.Looper;
 
@@ -36,8 +37,13 @@
     StackSampler stackSampler;
     CpuSampler cpuSampler;
 
+    /**
+     * Null object pattern
+     */
+    private static final BlockInterceptor NULL_OBJ = new DefaultBlockInterceptor();
+
     private static BlockCanaryInternals sInstance;
-    private static DefaultBlockInterceptor sContext;
+    private static Context sContext;
 
     private List<BlockInterceptor> mInterceptorChain = new LinkedList<>();
 
@@ -45,9 +51,9 @@ public BlockCanaryInternals() {
 
         stackSampler = new StackSampler(
                 Looper.getMainLooper().getThread(),
-                sContext.provideDumpInterval());
+                getInterceptor(0).provideDumpInterval());
 
-        cpuSampler = new CpuSampler(sContext.provideDumpInterval());
+        cpuSampler = new CpuSampler(getInterceptor(0).provideDumpInterval());
 
         setMonitor(new LooperMonitor(new LooperMonitor.BlockListener() {
 
@@ -59,6 +65,9 @@ public void onBlockEvent(long realTimeStart, long realTimeEnd,
                         .getThreadStackEntries(realTimeStart, realTimeEnd);
                 if (!threadStackEntries.isEmpty()) {
                     BlockInfo blockInfo = BlockInfo.newInstance()
+                            .setQualifier(getInterceptor(0).provideQualifier())
+                            .setUid(getInterceptor(0).provideUid())
+                            .setNetwork(getInterceptor(0).provideNetworkType())
                             .setMainThreadTimeCost(realTimeStart, realTimeEnd, threadTimeStart, threadTimeEnd)
                             .setCpuBusyFlag(cpuSampler.isCpuBusy(realTimeStart, realTimeEnd))
                             .setRecentCpuRate(cpuSampler.getCpuRateInfo())
@@ -68,16 +77,18 @@ public void onBlockEvent(long realTimeStart, long realTimeEnd,
 
                     if (mInterceptorChain.size() != 0) {
                         for (BlockInterceptor interceptor : mInterceptorChain) {
-                            interceptor.onBlock(getContext().provideContext(), blockInfo);
+                            interceptor.onBlock(BlockCanaryInternals.getContext(), blockInfo);
                         }
                     }
                 }
             }
-        }, getContext().provideBlockThreshold(), getContext().stopWhenDebugging()));
+        }, getInterceptor(0).provideBlockThreshold(), getInterceptor(0).stopWhenDebugging()));
 
         LogWriter.cleanObsolete();
     }
 
+
+
     /**
      * Get BlockCanaryInternals singleton
      *
@@ -99,11 +110,11 @@ public static BlockCanaryInternals getInstance() {
      *
      * @param context context
      */
-    public static void setContext(DefaultBlockInterceptor context) {
+    public static void setContext(Context context) {
         sContext = context;
     }
 
-    public static DefaultBlockInterceptor getContext() {
+    public static Context getContext() {
         return sContext;
     }
 
@@ -111,24 +122,30 @@ void addBlockInterceptor(BlockInterceptor blockInterceptor) {
         mInterceptorChain.add(blockInterceptor);
     }
 
+    public BlockInterceptor getInterceptor(int pos) {
+        if ( pos < 0 || mInterceptorChain.size() <= pos ) {
+            return NULL_OBJ;
+        }
+        return mInterceptorChain.get(pos) ;
+    }
+
     private void setMonitor(LooperMonitor looperPrinter) {
         monitor = looperPrinter;
     }
 
     public long getSampleDelay() {
-        return (long) (BlockCanaryInternals.getContext().provideBlockThreshold() * 0.8f);
+        return (long) (getInterceptor(0).provideBlockThreshold() * 0.8f);
     }
 
     static String getPath() {
         String state = Environment.getExternalStorageState();
-        String logPath = BlockCanaryInternals.getContext()
-                == null ? "" : BlockCanaryInternals.getContext().providePath();
+        String logPath = BlockCanaryInternals.getInstance().getInterceptor(0) == null ? "" : BlockCanaryInternals.getInstance().getInterceptor(0).providePath();
 
         if (Environment.MEDIA_MOUNTED.equals(state)
                 && Environment.getExternalStorageDirectory().canWrite()) {
             return Environment.getExternalStorageDirectory().getPath() + logPath;
         }
-        return getContext().provideContext().getFilesDir() + BlockCanaryInternals.getContext().providePath();
+        return BlockCanaryInternals.getContext().getFilesDir() + BlockCanaryInternals.getInstance().getInterceptor(0).providePath();
     }
 
     static File detectedBlockDirectory() {
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/BlockInterceptor.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/BlockInterceptor.java
index 9dc74b1..556c3b2 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/BlockInterceptor.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/BlockInterceptor.java
@@ -19,6 +19,55 @@
 
 import com.github.moduth.blockcanary.internal.BlockInfo;
 
+import java.io.File;
+import java.util.Collection;
+
 public interface BlockInterceptor {
     void onBlock(Context context, BlockInfo blockInfo);
+
+    int provideBlockThreshold();
+
+    int provideDumpInterval();
+
+    boolean stopWhenDebugging();
+
+    String providePath();
+
+
+    /**
+     * Implement in your project.
+     *
+     * @return Qualifier which can specify this installation, like version + flavor.
+     */
+    public String provideQualifier() ;
+
+    /**
+     * Implement in your project.
+     *
+     * @return user id
+     */
+    public String provideUid()  ;
+
+    /**
+     * Network type
+     *
+     * @return {@link String} like 2G, 3G, 4G, wifi, etc.
+     */
+    public String provideNetworkType()  ;
+
+    boolean displayNotification();
+
+    int provideMonitorDuration();
+
+    boolean zip(File[] logFiles, File zippedFile);
+
+    void upload(File file);
+
+    boolean deleteFilesInWhiteList();
+
+    boolean filterNonConcernStack();
+
+    Collection<? extends String> concernPackages();
+
+    Collection<? extends String> provideWhiteList();
 }
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/DefaultBlockInterceptor.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/DefaultBlockInterceptor.java
index 45af671..99a0183 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/DefaultBlockInterceptor.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/DefaultBlockInterceptor.java
@@ -28,37 +28,12 @@
  */
 public class DefaultBlockInterceptor implements BlockInterceptor {
 
-    private static Context sApplicationContext;
-    private static DefaultBlockInterceptor sInstance = null;
-
-    public DefaultBlockInterceptor() {
-    }
-
-    static void init(Context context, DefaultBlockInterceptor blockCanaryContext) {
-        sApplicationContext = context;
-        sInstance = blockCanaryContext;
-    }
-
-    public static DefaultBlockInterceptor get() {
-        if (sInstance == null) {
-            throw new RuntimeException("BlockCanaryContext null");
-        } else {
-            return sInstance;
-        }
-    }
-
-    /**
-     * Provide application context.
-     */
-    public Context provideContext() {
-        return sApplicationContext;
-    }
-
     /**
      * Implement in your project.
      *
      * @return Qualifier which can specify this installation, like version + flavor.
      */
+    @Override
     public String provideQualifier() {
         return "unknown";
     }
@@ -68,6 +43,7 @@ public String provideQualifier() {
      *
      * @return user id
      */
+    @Deprecated
     public String provideUid() {
         return "uid";
     }
@@ -77,6 +53,7 @@ public String provideUid() {
      *
      * @return {@link String} like 2G, 3G, 4G, wifi, etc.
      */
+    @Override
     public String provideNetworkType() {
         return "unknown";
     }
@@ -87,6 +64,7 @@ public String provideNetworkType() {
      *
      * @return monitor last duration (in hour)
      */
+    @Override
     public int provideMonitorDuration() {
         return -1;
     }
@@ -97,6 +75,7 @@ public int provideMonitorDuration() {
      *
      * @return threshold in mills
      */
+    @Override
     public int provideBlockThreshold() {
         return 1000;
     }
@@ -111,6 +90,7 @@ public int provideBlockThreshold() {
      *
      * @return dump interval (in millis)
      */
+    @Override
     public int provideDumpInterval() {
         return provideBlockThreshold();
     }
@@ -120,6 +100,7 @@ public int provideDumpInterval() {
      *
      * @return path of log files
      */
+    @Override
     public String providePath() {
         return "/blockcanary/";
     }
@@ -129,6 +110,7 @@ public String providePath() {
      *
      * @return true if need, else if not need.
      */
+    @Override
     public boolean displayNotification() {
         return true;
     }
@@ -140,6 +122,7 @@ public boolean displayNotification() {
      * @param dest files compressed
      * @return true if compression is successful
      */
+    @Override
     public boolean zip(File[] src, File dest) {
         return false;
     }
@@ -149,6 +132,7 @@ public boolean zip(File[] src, File dest) {
      *
      * @param zippedFile zipped file
      */
+    @Override
     public void upload(File zippedFile) {
         throw new UnsupportedOperationException();
     }
@@ -159,6 +143,7 @@ public void upload(File zippedFile) {
      *
      * @return null if simply concern only package with process name.
      */
+    @Override
     public List<String> concernPackages() {
         return null;
     }
@@ -168,6 +153,7 @@ public void upload(File zippedFile) {
      *
      * @return true if filter, false it not.
      */
+    @Override
     public boolean filterNonConcernStack() {
         return false;
     }
@@ -177,6 +163,7 @@ public boolean filterNonConcernStack() {
      *
      * @return return null if you don't need white-list filter.
      */
+    @Override
     public List<String> provideWhiteList() {
         LinkedList<String> whiteList = new LinkedList<>();
         whiteList.add("org.chromium");
@@ -188,6 +175,7 @@ public boolean filterNonConcernStack() {
      *
      * @return true if delete, false it not.
      */
+    @Override
     public boolean deleteFilesInWhiteList() {
         return true;
     }
@@ -205,6 +193,7 @@ public void onBlock(Context context, BlockInfo blockInfo) {
      *
      * @return true if stop, false otherwise
      */
+    @Override
     public boolean stopWhenDebugging() {
         return true;
     }
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
index 1b07edd..b839ee5 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
@@ -63,7 +63,7 @@
     public static final String KEY_TOTAL_MEMORY = "totalMemory";
     public static final String KEY_FREE_MEMORY = "freeMemory";
 
-    public static String sQualifier;
+//    public static String sQualifier;
     public static String sModel;
     public static String sApiLevel = "";
     /**
@@ -105,12 +105,9 @@
         sCpuCoreNum = PerformanceUtils.getNumCores();
         sModel = Build.MODEL;
         sApiLevel = Build.VERSION.SDK_INT + " " + VERSION.RELEASE;
-        sQualifier = BlockCanaryInternals.getContext().provideQualifier();
         try {
             TelephonyManager telephonyManager = (TelephonyManager) BlockCanaryInternals
-                    .getContext()
-                    .provideContext()
-                    .getSystemService(Context.TELEPHONY_SERVICE);
+                    .getContext().getSystemService(Context.TELEPHONY_SERVICE);
             sImei = telephonyManager.getDeviceId();
         } catch (Exception exception) {
             Log.e(TAG, NEW_INSTANCE_METHOD, exception);
@@ -123,7 +120,7 @@ public BlockInfo() {
 
     public static BlockInfo newInstance() {
         BlockInfo blockInfo = new BlockInfo();
-        Context context = BlockCanaryInternals.getContext().provideContext();
+        Context context = BlockCanaryInternals.getContext();
         if (blockInfo.versionName == null || blockInfo.versionName.length() == 0) {
             try {
                 PackageInfo info = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);
@@ -137,17 +134,31 @@ public static BlockInfo newInstance() {
         blockInfo.cpuCoreNum = sCpuCoreNum;
         blockInfo.model = sModel;
         blockInfo.apiLevel = sApiLevel;
-        blockInfo.qualifier = sQualifier;
         blockInfo.imei = sImei;
-        blockInfo.uid = BlockCanaryInternals.getContext().provideUid();
         blockInfo.processName = ProcessUtils.myProcessName();
-        blockInfo.network = BlockCanaryInternals.getContext().provideNetworkType();
         blockInfo.freeMemory = String.valueOf(PerformanceUtils.getFreeMemory());
         blockInfo.totalMemory = String.valueOf(PerformanceUtils.getTotalMemory());
 
         return blockInfo;
     }
 
+
+    public BlockInfo setQualifier(String qualifier) {
+        this.qualifier = qualifier;
+        return this;
+    }
+
+
+    public BlockInfo setUid(String uid) {
+        this.uid = uid;
+        return this;
+    }
+
+    public BlockInfo setNetwork(String network) {
+        this.network = network;
+        return this;
+    }
+
     public BlockInfo setCpuBusyFlag(boolean busy) {
         cpuBusy = busy;
         return this;
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/PerformanceUtils.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/PerformanceUtils.java
index 1efecfa..d06426e 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/PerformanceUtils.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/PerformanceUtils.java
@@ -68,7 +68,7 @@ public boolean accept(File pathname) {
     }
 
     public static long getFreeMemory() {
-        ActivityManager am = (ActivityManager) BlockCanaryInternals.getContext().provideContext().getSystemService(Context.ACTIVITY_SERVICE);
+        ActivityManager am = (ActivityManager) BlockCanaryInternals.getContext().getSystemService(Context.ACTIVITY_SERVICE);
         ActivityManager.MemoryInfo mi = new ActivityManager.MemoryInfo();
         am.getMemoryInfo(mi);
         return mi.availMem / 1024;
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/ProcessUtils.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/ProcessUtils.java
index 7029f0f..f7f1db3 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/ProcessUtils.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/ProcessUtils.java
@@ -39,7 +39,7 @@ public static String myProcessName() {
             if (sProcessName != null) {
                 return sProcessName;
             }
-            sProcessName = obtainProcessName(BlockCanaryInternals.getContext().provideContext());
+            sProcessName = obtainProcessName(BlockCanaryInternals.getContext());
             return sProcessName;
         }
     }
diff --git a/blockcanary-android/build.gradle b/blockcanary-android/build.gradle
index ebe613e..5573931 100644
--- a/blockcanary-android/build.gradle
+++ b/blockcanary-android/build.gradle
@@ -21,6 +21,6 @@ android {
 
 dependencies {
     compile fileTree(include: ['*.jar'], dir: 'libs')
-//    compile project(':blockcanary-analyzer')
-    compile 'com.github.markzhai:blockcanary-analyzer:1.5.0'
+    compile project(':blockcanary-analyzer')
+//    compile 'com.github.markzhai:blockcanary-analyzer:1.5.0'
 }
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java
index edc0858..42dad66 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java
@@ -21,6 +21,7 @@
 import android.os.Looper;
 import android.preference.PreferenceManager;
 
+import com.github.moduth.blockcanary.interceptor.BlockInterceptor;
 import com.github.moduth.blockcanary.ui.DisplayActivity;
 
 import java.util.concurrent.Executor;
@@ -37,28 +38,23 @@
     private static BlockCanary sInstance;
     private BlockCanaryInternals mBlockCanaryCore;
     private boolean mMonitorStarted = false;
+    BlockInterceptor mBlockInterceptor ;
 
     private BlockCanary() {
-        BlockCanaryInternals.setContext(BlockCanaryContext.get());
         mBlockCanaryCore = BlockCanaryInternals.getInstance();
-        mBlockCanaryCore.addBlockInterceptor(BlockCanaryContext.get());
-        if (!BlockCanaryContext.get().displayNotification()) {
-            return;
-        }
-        mBlockCanaryCore.addBlockInterceptor(new DisplayService());
-
     }
 
     /**
      * Install {@link BlockCanary}
      *
      * @param context            Application context
-     * @param blockCanaryContext BlockCanary context
+     * @param interceptor BlockCanary interceptor
      * @return {@link BlockCanary}
      */
-    public static BlockCanary install(Context context, BlockCanaryContext blockCanaryContext) {
-        BlockCanaryContext.init(context, blockCanaryContext);
-        setEnabled(context, DisplayActivity.class, BlockCanaryContext.get().displayNotification());
+    public static BlockCanary install(Context context, BlockInterceptor interceptor) {
+        BlockCanaryInternals.setContext(context.getApplicationContext());
+        get().setup(interceptor);
+        setEnabled(context, DisplayActivity.class, interceptor.displayNotification());
         return get();
     }
 
@@ -78,6 +74,18 @@ public static BlockCanary get() {
         return sInstance;
     }
 
+    /**
+     * setup BlockInterceptor to provide some params.
+     * @param interceptor BlockInterceptor instance
+     */
+    public void setup(BlockInterceptor interceptor) {
+        mBlockInterceptor = interceptor ;
+        mBlockCanaryCore.addBlockInterceptor(interceptor);
+        if (interceptor!= null && interceptor.displayNotification()) {
+            mBlockCanaryCore.addBlockInterceptor(new DisplayService());
+        }
+    }
+
     /**
      * Start monitoring.
      */
@@ -112,7 +120,7 @@ public void upload() {
      * BlockCanary.
      */
     public void recordStartTime() {
-        PreferenceManager.getDefaultSharedPreferences(BlockCanaryContext.get().provideContext())
+        PreferenceManager.getDefaultSharedPreferences(BlockCanaryInternals.getContext())
                 .edit()
                 .putLong("BlockCanary_StartTime", System.currentTimeMillis())
                 .commit();
@@ -125,10 +133,10 @@ public void recordStartTime() {
      */
     public boolean isMonitorDurationEnd() {
         long startTime =
-                PreferenceManager.getDefaultSharedPreferences(BlockCanaryContext.get().provideContext())
+                PreferenceManager.getDefaultSharedPreferences(BlockCanaryInternals.getContext())
                         .getLong("BlockCanary_StartTime", 0);
         return startTime != 0 && System.currentTimeMillis() - startTime >
-                BlockCanaryContext.get().provideMonitorDuration() * 3600 * 1000;
+                get().mBlockInterceptor.provideMonitorDuration() * 3600 * 1000;
     }
 
     // these lines are originally copied from LeakCanary: Copyright (C) 2015 Square, Inc.
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
index 7d71590..ab92e49 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
@@ -23,6 +23,7 @@
 import android.content.Intent;
 import android.util.Log;
 
+import com.github.moduth.blockcanary.interceptor.DefaultBlockInterceptor;
 import com.github.moduth.blockcanary.internal.BlockInfo;
 import com.github.moduth.blockcanary.ui.DisplayActivity;
 
@@ -34,7 +35,7 @@
 import static android.os.Build.VERSION_CODES.HONEYCOMB;
 import static android.os.Build.VERSION_CODES.JELLY_BEAN;
 
-final class DisplayService implements BlockInterceptor {
+final class DisplayService extends DefaultBlockInterceptor {
 
     private static final String TAG = "DisplayService";
 
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/Uploader.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/Uploader.java
index 7334075..960225e 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/Uploader.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/Uploader.java
@@ -17,6 +17,8 @@
 
 import android.util.Log;
 
+import com.github.moduth.blockcanary.interceptor.BlockInterceptor;
+
 import java.io.File;
 import java.text.SimpleDateFormat;
 import java.util.Date;
@@ -41,7 +43,8 @@ private static File zip() {
             Log.e(TAG, "zip: ", e);
         }
         File zippedFile = LogWriter.generateTempZip("BlockCanary-" + timeString);
-        BlockCanaryInternals.getContext().zip(BlockCanaryInternals.getLogFiles(), zippedFile);
+        BlockInterceptor interceptor = BlockCanaryInternals.getInstance().getInterceptor(0);
+        interceptor.zip(BlockCanaryInternals.getLogFiles(), zippedFile);
         LogWriter.deleteAll();
         return zippedFile;
     }
@@ -52,7 +55,8 @@ public static void zipAndUpload() {
             public void run() {
                 final File file = zip();
                 if (file.exists()) {
-                    BlockCanaryInternals.getContext().upload(file);
+                    BlockInterceptor interceptor = BlockCanaryInternals.getInstance().getInterceptor(0);
+                    interceptor.upload(file);
                 }
             }
         });
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/BlockCanaryUtils.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/BlockCanaryUtils.java
index 195b0ce..8246879 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/BlockCanaryUtils.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/BlockCanaryUtils.java
@@ -15,10 +15,10 @@
     private static final List<String> CONCERN_LIST = new LinkedList<>();
 
     static {
-        WHITE_LIST.addAll(BlockCanaryInternals.getContext().provideWhiteList());
+        WHITE_LIST.addAll(BlockCanaryInternals.getInstance().getInterceptor(0).provideWhiteList());
 
-        if (BlockCanaryInternals.getContext().concernPackages() != null) {
-            CONCERN_LIST.addAll(BlockCanaryInternals.getContext().concernPackages());
+        if (BlockCanaryInternals.getInstance().getInterceptor(0).concernPackages() != null) {
+            CONCERN_LIST.addAll(BlockCanaryInternals.getInstance().getInterceptor(0).concernPackages());
         }
         if (CONCERN_LIST.isEmpty()) {
             CONCERN_LIST.add(ProcessUtils.myProcessName());
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/DisplayActivity.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/DisplayActivity.java
index cdd30b8..b6828a4 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/DisplayActivity.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/DisplayActivity.java
@@ -42,7 +42,6 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
-import com.github.moduth.blockcanary.BlockCanaryContext;
 import com.github.moduth.blockcanary.BlockCanaryInternals;
 import com.github.moduth.blockcanary.LogWriter;
 import com.github.moduth.blockcanary.R;
@@ -409,7 +408,7 @@ public void run() {
                         boolean needAddToList = true;
 
                         if (BlockCanaryUtils.isInWhiteList(blockInfo)) {
-                            if (BlockCanaryContext.get().deleteFilesInWhiteList()) {
+                            if (BlockCanaryInternals.getInstance().getInterceptor(0).deleteFilesInWhiteList()) {
                                 blockFile.delete();
                                 blockFile = null;
                             }
@@ -417,7 +416,7 @@ public void run() {
                         }
 
                         blockInfo.concernStackString = BlockCanaryUtils.concernStackString(blockInfo);
-                        if (BlockCanaryContext.get().filterNonConcernStack() &&
+                        if (BlockCanaryInternals.getInstance().getInterceptor(0).filterNonConcernStack() &&
                                 TextUtils.isEmpty(blockInfo.concernStackString)) {
                             needAddToList = false;
                         }
diff --git a/blockcanary-sample/src/main/java/com/example/blockcanary/AppContext.java b/blockcanary-sample/src/main/java/com/example/blockcanary/AppContext.java
index 612df72..c4926ca 100644
--- a/blockcanary-sample/src/main/java/com/example/blockcanary/AppContext.java
+++ b/blockcanary-sample/src/main/java/com/example/blockcanary/AppContext.java
@@ -19,11 +19,11 @@
 import android.content.pm.PackageManager;
 import android.util.Log;
 
-import com.github.moduth.blockcanary.BlockCanaryContext;
+import com.github.moduth.blockcanary.interceptor.DefaultBlockInterceptor;
 
 import java.util.List;
 
-public class AppContext extends BlockCanaryContext {
+public class AppContext extends DefaultBlockInterceptor {
     private static final String TAG = "AppContext";
 
     @Override
