diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
deleted file mode 100644
index 8cab9c8..0000000
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * Copyright (C) 2015 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.github.moduth.blockcanary;
-
-import android.annotation.TargetApi;
-import android.app.Notification;
-import android.app.NotificationManager;
-import android.app.PendingIntent;
-import android.content.Context;
-import android.content.Intent;
-import com.github.moduth.blockcanary.internal.BlockInfo;
-import com.github.moduth.blockcanary.ui.DisplayActivity;
-
-import static android.app.PendingIntent.FLAG_UPDATE_CURRENT;
-import static android.os.Build.VERSION.SDK_INT;
-import static android.os.Build.VERSION_CODES.HONEYCOMB;
-import static android.os.Build.VERSION_CODES.JELLY_BEAN;
-
-final class DisplayService implements BlockInterceptor {
-
-    @Override
-    public void onBlock(Context context, BlockInfo blockInfo) {
-        Intent intent = new Intent(context, DisplayActivity.class);
-        intent.putExtra("show_latest", blockInfo.timeStart);
-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
-        PendingIntent pendingIntent = PendingIntent.getActivity(context, 1, intent, FLAG_UPDATE_CURRENT);
-        String contentTitle = context.getString(R.string.block_canary_class_has_blocked, blockInfo.timeStart);
-        String contentText = context.getString(R.string.block_canary_notification_message);
-        show(context, contentTitle, contentText, pendingIntent);
-    }
-
-    @TargetApi(HONEYCOMB)
-    private void show(Context context, String contentTitle, String contentText, PendingIntent pendingIntent) {
-        NotificationManager notificationManager = (NotificationManager)
-                context.getSystemService(Context.NOTIFICATION_SERVICE);
-        assert notificationManager != null;
-        Notification notification;
-        Notification.Builder builder = new Notification.Builder(context)
-                .setSmallIcon(R.drawable.block_canary_notification)
-                .setWhen(System.currentTimeMillis())
-                .setContentTitle(contentTitle)
-                .setContentText(contentText)
-                .setAutoCancel(true)
-                .setContentIntent(pendingIntent)
-                .setDefaults(Notification.DEFAULT_SOUND);
-        if (SDK_INT < JELLY_BEAN) {
-            notification = builder.getNotification();
-        } else {
-            notification = builder.build();
-        }
-        notificationManager.notify(0xDEAFBEEF, notification);
-    }
-}
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.kt b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.kt
new file mode 100644
index 0000000..9d97e28
--- /dev/null
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.kt
@@ -0,0 +1,73 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.github.moduth.blockcanary
+
+import android.app.Notification
+import android.app.NotificationChannel
+import android.app.NotificationManager
+import android.app.PendingIntent
+import android.app.PendingIntent.FLAG_UPDATE_CURRENT
+import android.content.Context
+import android.content.Intent
+import android.os.Build
+import com.github.moduth.blockcanary.internal.BlockInfo
+import com.github.moduth.blockcanary.ui.DisplayActivity
+
+
+internal class DisplayService : BlockInterceptor {
+
+    override fun onBlock(context: Context, blockInfo: BlockInfo) {
+        val intent = Intent(context, DisplayActivity::class.java)
+        intent.putExtra("show_latest", blockInfo.timeStart)
+        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
+        val pendingIntent = PendingIntent.getActivity(context, 1, intent, FLAG_UPDATE_CURRENT)
+        val contentTitle = context.getString(R.string.block_canary_class_has_blocked, blockInfo.timeStart)
+        val contentText = context.getString(R.string.block_canary_notification_message)
+        show(context, contentTitle, contentText, pendingIntent)
+    }
+
+    private fun show(context: Context, contentTitle: String, contentText: String, pendingIntent: PendingIntent) {
+        createChannel(context)
+        val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
+        val builder = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)
+            Notification.Builder(context, NAME)
+        else Notification.Builder(context)
+
+        builder
+                .setSmallIcon(R.drawable.block_canary_notification)
+                .setWhen(System.currentTimeMillis())
+                .setContentTitle(contentTitle)
+                .setContentText(contentText)
+                .setAutoCancel(true)
+                .setContentIntent(pendingIntent)
+
+        notificationManager.notify(-0x21504111, builder.build())
+    }
+
+    private fun createChannel(context: Context) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            val channel = NotificationChannel(NAME, NAME, NotificationManager.IMPORTANCE_LOW)
+            channel.description = "卡顿信息"
+            val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
+            notificationManager.createNotificationChannel(channel)
+        }
+    }
+
+    companion object {
+        const val NAME = "Block"
+    }
+
+}
diff --git a/build.gradle b/build.gradle
index 3add558..8725069 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,14 +1,14 @@
 // Top-level build file where you can add configuration options common to all sub-projects/modules.
 
 buildscript {
-    ext.kotlin_version = '1.2.51'
+    ext.kotlin_version = '1.2.60'
     repositories {
         mavenCentral()
         google()
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.1.3'
+        classpath 'com.android.tools.build:gradle:3.1.4'
         classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
         classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
     }
@@ -23,7 +23,7 @@ allprojects {
     ext {
         LIBRARY_COMPILE_SDK_VERSION = 27
         LIBRARY_BUILD_TOOLS_VERSION = "28.0.1"
-        LIBRARY_MIN_SDK_VERSION = 14
+        LIBRARY_MIN_SDK_VERSION = 16
         LIBRARY_TARGET_SDK_VERSION = 22
         GROUP_NAME = 'com.github.xcc3641'
     }
