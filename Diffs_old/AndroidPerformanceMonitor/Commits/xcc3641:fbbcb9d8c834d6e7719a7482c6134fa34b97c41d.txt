diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/AbstractSampler.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/AbstractSampler.java
index c1e3383..311f7ba 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/AbstractSampler.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/AbstractSampler.java
@@ -40,7 +40,7 @@ public void run() {
     };
 
     public AbstractSampler(long sampleInterval) {
-        if (0 == sampleInterval) {
+        if (sampleInterval == 0) {
             sampleInterval = DEFAULT_SAMPLE_INTERVAL;
         }
         mSampleInterval = sampleInterval;
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
index 895d0d6..68dbe33 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
@@ -39,9 +39,7 @@
 
     public BlockCanaryInternals() {
 
-        stackSampler = new StackSampler(
-                Looper.getMainLooper().getThread(),
-                sContext.provideDumpInterval());
+        stackSampler = new StackSampler(Looper.getMainLooper().getThread(), sContext.provideDumpInterval());
 
         cpuSampler = new CpuSampler(sContext.provideDumpInterval());
 
@@ -117,11 +115,10 @@ long getSampleDelay() {
 
     static String getPath() {
         String state = Environment.getExternalStorageState();
-        String logPath = BlockCanaryInternals.getContext()
-                == null ? "" : BlockCanaryInternals.getContext().providePath();
+        String logPath = BlockCanaryInternals.getContext() == null ? "" :
+                BlockCanaryInternals.getContext().providePath();
 
-        if (Environment.MEDIA_MOUNTED.equals(state)
-                && Environment.getExternalStorageDirectory().canWrite()) {
+        if (Environment.MEDIA_MOUNTED.equals(state) && Environment.getExternalStorageDirectory().canWrite()) {
             return Environment.getExternalStorageDirectory().getPath() + logPath;
         }
         return getContext().provideContext().getFilesDir() + BlockCanaryInternals.getContext().providePath();
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/HandlerThreadFactory.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/HandlerThreadFactory.java
index bf4c26d..e2b77cc 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/HandlerThreadFactory.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/HandlerThreadFactory.java
@@ -36,7 +36,7 @@ public static Handler getWriteLogThreadHandler() {
     }
 
     private static class HandlerThreadWrapper {
-        private Handler handler = null;
+        private Handler handler;
 
         public HandlerThreadWrapper(String threadName) {
             HandlerThread handlerThread = new HandlerThread("BlockCanary-" + threadName);
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LooperMonitor.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LooperMonitor.java
index 3b697e6..e101c92 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LooperMonitor.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LooperMonitor.java
@@ -26,7 +26,7 @@
     private long mBlockThresholdMillis = DEFAULT_BLOCK_THRESHOLD_MILLIS;
     private long mStartTimestamp = 0;
     private long mStartThreadTimestamp = 0;
-    private BlockListener mBlockListener = null;
+    private BlockListener mBlockListener;
     private boolean mPrintingStarted = false;
     private final boolean mStopWhenDebugging;
 
@@ -83,21 +83,21 @@ public void run() {
     }
 
     private void startDump() {
-        if (null != BlockCanaryInternals.getInstance().stackSampler) {
+        if (BlockCanaryInternals.getInstance().stackSampler != null) {
             BlockCanaryInternals.getInstance().stackSampler.start();
         }
 
-        if (null != BlockCanaryInternals.getInstance().cpuSampler) {
+        if (BlockCanaryInternals.getInstance().cpuSampler != null) {
             BlockCanaryInternals.getInstance().cpuSampler.start();
         }
     }
 
     private void stopDump() {
-        if (null != BlockCanaryInternals.getInstance().stackSampler) {
+        if (BlockCanaryInternals.getInstance().stackSampler != null) {
             BlockCanaryInternals.getInstance().stackSampler.stop();
         }
 
-        if (null != BlockCanaryInternals.getInstance().cpuSampler) {
+        if (BlockCanaryInternals.getInstance().cpuSampler != null) {
             BlockCanaryInternals.getInstance().cpuSampler.stop();
         }
     }
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/StackSampler.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/StackSampler.java
index 2d65e4a..a6f43d4 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/StackSampler.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/StackSampler.java
@@ -61,9 +61,7 @@ protected void doSample() {
         StringBuilder stringBuilder = new StringBuilder();
 
         for (StackTraceElement stackTraceElement : mCurrentThread.getStackTrace()) {
-            stringBuilder
-                    .append(stackTraceElement.toString())
-                    .append(BlockInfo.SEPARATOR);
+            stringBuilder.append(stackTraceElement.toString()).append(BlockInfo.SEPARATOR);
         }
 
         synchronized (sStackMap) {
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
index 1b07edd..2ec816f 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
@@ -20,6 +20,7 @@
 import android.os.Build;
 import android.os.Build.VERSION;
 import android.telephony.TelephonyManager;
+import android.text.TextUtils;
 import android.util.Log;
 
 import com.github.moduth.blockcanary.BlockCanaryInternals;
@@ -118,13 +119,13 @@
         }
     }
 
-    public BlockInfo() {
+    private BlockInfo() {
     }
 
     public static BlockInfo newInstance() {
         BlockInfo blockInfo = new BlockInfo();
         Context context = BlockCanaryInternals.getContext().provideContext();
-        if (blockInfo.versionName == null || blockInfo.versionName.length() == 0) {
+        if (TextUtils.isEmpty(blockInfo.versionName)) {
             try {
                 PackageInfo info = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);
                 blockInfo.versionCode = info.versionCode;
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/PerformanceUtils.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/PerformanceUtils.java
index 1efecfa..d1254c2 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/PerformanceUtils.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/PerformanceUtils.java
@@ -53,11 +53,8 @@ public boolean accept(File pathname) {
 
         if (sCoreNum == 0) {
             try {
-                // Get directory containing CPU info
                 File dir = new File("/sys/devices/system/cpu/");
-                // Filter to only list the devices we care about
                 File[] files = dir.listFiles(new CpuFilter());
-                // Return the number of cores (virtual CPU devices)
                 sCoreNum = files.length;
             } catch (Exception e) {
                 Log.e(TAG, "getNumCores exception", e);
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
index 7d71590..8cab9c8 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
@@ -21,14 +21,9 @@
 import android.app.PendingIntent;
 import android.content.Context;
 import android.content.Intent;
-import android.util.Log;
-
 import com.github.moduth.blockcanary.internal.BlockInfo;
 import com.github.moduth.blockcanary.ui.DisplayActivity;
 
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-
 import static android.app.PendingIntent.FLAG_UPDATE_CURRENT;
 import static android.os.Build.VERSION.SDK_INT;
 import static android.os.Build.VERSION_CODES.HONEYCOMB;
@@ -36,8 +31,6 @@
 
 final class DisplayService implements BlockInterceptor {
 
-    private static final String TAG = "DisplayService";
-
     @Override
     public void onBlock(Context context, BlockInfo blockInfo) {
         Intent intent = new Intent(context, DisplayActivity.class);
@@ -53,35 +46,20 @@ public void onBlock(Context context, BlockInfo blockInfo) {
     private void show(Context context, String contentTitle, String contentText, PendingIntent pendingIntent) {
         NotificationManager notificationManager = (NotificationManager)
                 context.getSystemService(Context.NOTIFICATION_SERVICE);
-
+        assert notificationManager != null;
         Notification notification;
-        if (SDK_INT < HONEYCOMB) {
-            notification = new Notification();
-            notification.icon = R.drawable.block_canary_notification;
-            notification.when = System.currentTimeMillis();
-            notification.flags |= Notification.FLAG_AUTO_CANCEL;
-            notification.defaults = Notification.DEFAULT_SOUND;
-            try {
-                Method deprecatedMethod = notification.getClass().getMethod("setLatestEventInfo", Context.class, CharSequence.class, CharSequence.class, PendingIntent.class);
-                deprecatedMethod.invoke(notification, context, contentTitle, contentText, pendingIntent);
-            } catch (NoSuchMethodException | IllegalAccessException | IllegalArgumentException
-                    | InvocationTargetException e) {
-                Log.w(TAG, "Method not found", e);
-            }
+        Notification.Builder builder = new Notification.Builder(context)
+                .setSmallIcon(R.drawable.block_canary_notification)
+                .setWhen(System.currentTimeMillis())
+                .setContentTitle(contentTitle)
+                .setContentText(contentText)
+                .setAutoCancel(true)
+                .setContentIntent(pendingIntent)
+                .setDefaults(Notification.DEFAULT_SOUND);
+        if (SDK_INT < JELLY_BEAN) {
+            notification = builder.getNotification();
         } else {
-            Notification.Builder builder = new Notification.Builder(context)
-                    .setSmallIcon(R.drawable.block_canary_notification)
-                    .setWhen(System.currentTimeMillis())
-                    .setContentTitle(contentTitle)
-                    .setContentText(contentText)
-                    .setAutoCancel(true)
-                    .setContentIntent(pendingIntent)
-                    .setDefaults(Notification.DEFAULT_SOUND);
-            if (SDK_INT < JELLY_BEAN) {
-                notification = builder.getNotification();
-            } else {
-                notification = builder.build();
-            }
+            notification = builder.build();
         }
         notificationManager.notify(0xDEAFBEEF, notification);
     }
