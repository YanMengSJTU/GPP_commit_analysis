diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
index be8b1de..b12f13c 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
@@ -16,17 +16,14 @@
 package com.github.moduth.blockcanary;
 
 import android.content.Context;
-import android.os.Environment;
 import android.os.Looper;
 
-import com.github.moduth.blockcanary.interceptor.DefaultBlockInterceptor;
 import com.github.moduth.blockcanary.interceptor.BlockInterceptor;
+import com.github.moduth.blockcanary.interceptor.DefaultBlockInterceptor;
 import com.github.moduth.blockcanary.internal.BlockInfo;
 import com.github.moduth.blockcanary.sampler.CpuSampler;
 import com.github.moduth.blockcanary.sampler.StackSampler;
 
-import java.io.File;
-import java.io.FilenameFilter;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
@@ -48,46 +45,44 @@
     private List<BlockInterceptor> mInterceptorChain = new LinkedList<>();
 
     public BlockCanaryInternals() {
-
         stackSampler = new StackSampler(
                 Looper.getMainLooper().getThread(),
                 getInterceptor(0).provideDumpInterval());
-
         cpuSampler = new CpuSampler(getInterceptor(0).provideDumpInterval());
-
-        setMonitor(new LooperMonitor(new LooperMonitor.BlockListener() {
-
-            @Override
-            public void onBlockEvent(long realTimeStart, long realTimeEnd,
-                                     long threadTimeStart, long threadTimeEnd) {
-                // Get recent thread-stack entries and cpu usage
-                ArrayList<String> threadStackEntries = stackSampler
-                        .getThreadStackEntries(realTimeStart, realTimeEnd);
-                if (!threadStackEntries.isEmpty()) {
-                    BlockInfo blockInfo = BlockInfo.newInstance()
-                            .setQualifier(getInterceptor(0).provideQualifier())
-                            .setUid(getInterceptor(0).provideUid())
-                            .setNetwork(getInterceptor(0).provideNetworkType())
-                            .setMainThreadTimeCost(realTimeStart, realTimeEnd, threadTimeStart, threadTimeEnd)
-                            .setCpuBusyFlag(cpuSampler.isCpuBusy(realTimeStart, realTimeEnd))
-                            .setRecentCpuRate(cpuSampler.getCpuRateInfo())
-                            .setThreadStackEntries(threadStackEntries)
-                            .flushString();
-                    LogWriter.save(blockInfo.toString());
-
-                    if (mInterceptorChain.size() != 0) {
-                        for (BlockInterceptor interceptor : mInterceptorChain) {
-                            interceptor.onBlock(BlockCanaryInternals.getContext(), blockInfo);
-                        }
-                    }
-                }
-            }
-        }, getInterceptor(0).provideBlockThreshold(), getInterceptor(0).stopWhenDebugging()));
+        // set Looper printer
+        monitor = new LooperMonitor(mBlockListener, getInterceptor(0).provideBlockThreshold(), getInterceptor(0).stopWhenDebugging());
 
         LogWriter.cleanObsolete();
     }
 
 
+    LooperMonitor.BlockListener mBlockListener = new LooperMonitor.BlockListener() {
+        @Override
+        public void onBlockEvent(long realTimeStart, long realTimeEnd, long threadTimeStart, long threadTimeEnd) {
+            // Get recent thread-stack entries and cpu usage
+            ArrayList<String> threadStackEntries = stackSampler
+                    .getThreadStackEntries(realTimeStart, realTimeEnd);
+            if (!threadStackEntries.isEmpty()) {
+                BlockInfo blockInfo = BlockInfo.newInstance()
+                        .setQualifier(getInterceptor(0).provideQualifier())
+                        .setUid(getInterceptor(0).provideUid())
+                        .setNetwork(getInterceptor(0).provideNetworkType())
+                        .setMainThreadTimeCost(realTimeStart, realTimeEnd, threadTimeStart, threadTimeEnd)
+                        .setCpuBusyFlag(cpuSampler.isCpuBusy(realTimeStart, realTimeEnd))
+                        .setRecentCpuRate(cpuSampler.getCpuRateInfo())
+                        .setThreadStackEntries(threadStackEntries)
+                        .flushString();
+                LogWriter.save(blockInfo.toString());
+
+                if (mInterceptorChain.size() != 0) {
+                    for (BlockInterceptor interceptor : mInterceptorChain) {
+                        interceptor.onBlock(BlockCanaryInternals.getContext(), blockInfo);
+                    }
+                }
+            }
+        }
+    };
+
 
     /**
      * Get BlockCanaryInternals singleton
@@ -106,9 +101,9 @@ public static BlockCanaryInternals getInstance() {
     }
 
     /**
-     * set {@link DefaultBlockInterceptor} implementation
+     * set Context
      *
-     * @param context context
+     * @param context You should pass a Application Context
      */
     public static void setContext(Context context) {
         sContext = context;
@@ -119,7 +114,9 @@ public static Context getContext() {
     }
 
     void addBlockInterceptor(BlockInterceptor blockInterceptor) {
-        mInterceptorChain.add(blockInterceptor);
+        if ( blockInterceptor != null ) {
+            mInterceptorChain.add(blockInterceptor);
+        }
     }
 
     public BlockInterceptor getInterceptor(int pos) {
@@ -129,52 +126,7 @@ public BlockInterceptor getInterceptor(int pos) {
         return mInterceptorChain.get(pos) ;
     }
 
-    private void setMonitor(LooperMonitor looperPrinter) {
-        monitor = looperPrinter;
-    }
-
     public long getSampleDelay() {
         return (long) (getInterceptor(0).provideBlockThreshold() * 0.8f);
     }
-
-    static String getPath() {
-        String state = Environment.getExternalStorageState();
-        String logPath = BlockCanaryInternals.getInstance().getInterceptor(0) == null ? "" : BlockCanaryInternals.getInstance().getInterceptor(0).providePath();
-
-        if (Environment.MEDIA_MOUNTED.equals(state)
-                && Environment.getExternalStorageDirectory().canWrite()) {
-            return Environment.getExternalStorageDirectory().getPath() + logPath;
-        }
-        return BlockCanaryInternals.getContext().getFilesDir() + BlockCanaryInternals.getInstance().getInterceptor(0).providePath();
-    }
-
-    static File detectedBlockDirectory() {
-        File directory = new File(getPath());
-        if (!directory.exists()) {
-            directory.mkdirs();
-        }
-        return directory;
-    }
-
-    public static File[] getLogFiles() {
-        File f = detectedBlockDirectory();
-        if (f.exists() && f.isDirectory()) {
-            return f.listFiles(new BlockLogFileFilter());
-        }
-        return null;
-    }
-
-    private static class BlockLogFileFilter implements FilenameFilter {
-
-        private String TYPE = ".log";
-
-        BlockLogFileFilter() {
-
-        }
-
-        @Override
-        public boolean accept(File dir, String filename) {
-            return filename.endsWith(TYPE);
-        }
-    }
 }
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LogWriter.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LogWriter.java
index fab8b72..5737ac3 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LogWriter.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/LogWriter.java
@@ -15,13 +15,16 @@
  */
 package com.github.moduth.blockcanary;
 
+import android.os.Environment;
 import android.util.Log;
 
+import com.github.moduth.blockcanary.interceptor.BlockInterceptor;
 import com.github.moduth.blockcanary.internal.BlockInfo;
 
 import java.io.BufferedWriter;
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.FilenameFilter;
 import java.io.OutputStreamWriter;
 import java.text.SimpleDateFormat;
 import java.util.Locale;
@@ -66,7 +69,7 @@ public static void cleanObsolete() {
             @Override
             public void run() {
                 long now = System.currentTimeMillis();
-                File[] f = BlockCanaryInternals.getLogFiles();
+                File[] f = getLogFiles();
                 if (f != null && f.length > 0) {
                     synchronized (SAVE_DELETE_LOCK) {
                         for (File aF : f) {
@@ -83,7 +86,7 @@ public void run() {
     public static void deleteAll() {
         synchronized (SAVE_DELETE_LOCK) {
             try {
-                File[] files = BlockCanaryInternals.getLogFiles();
+                File[] files = getLogFiles();
                 if (files != null && files.length > 0) {
                     for (File file : files) {
                         file.delete();
@@ -99,7 +102,7 @@ private static String save(String logFileName, String str) {
         String path = "";
         BufferedWriter writer = null;
         try {
-            File file = BlockCanaryInternals.detectedBlockDirectory();
+            File file = detectedBlockDirectory();
             long time = System.currentTimeMillis();
             path = file.getAbsolutePath() + "/"
                     + logFileName + "-"
@@ -138,6 +141,49 @@ private static String save(String logFileName, String str) {
     }
 
     public static File generateTempZip(String filename) {
-        return new File(BlockCanaryInternals.getPath() + "/" + filename + ".zip");
+        return new File(getPath() + "/" + filename + ".zip");
+    }
+
+
+    private static String getPath() {
+        String state = Environment.getExternalStorageState();
+        BlockInterceptor interceptor = BlockCanaryInternals.getInstance().getInterceptor(0) ;
+        String logPath =  interceptor == null ? "" : interceptor.providePath();
+
+        if (Environment.MEDIA_MOUNTED.equals(state)
+                && Environment.getExternalStorageDirectory().canWrite()) {
+            return Environment.getExternalStorageDirectory().getPath() + logPath;
+        }
+        return BlockCanaryInternals.getContext().getFilesDir() + interceptor.providePath();
+    }
+
+    static File detectedBlockDirectory() {
+        File directory = new File(getPath());
+        if (!directory.exists()) {
+            directory.mkdirs();
+        }
+        return directory;
+    }
+
+    public static File[] getLogFiles() {
+        File f = detectedBlockDirectory();
+        if (f.exists() && f.isDirectory()) {
+            return f.listFiles(new BlockLogFileFilter());
+        }
+        return null;
+    }
+
+    private static class BlockLogFileFilter implements FilenameFilter {
+
+        private String TYPE = ".log";
+
+        BlockLogFileFilter() {
+
+        }
+
+        @Override
+        public boolean accept(File dir, String filename) {
+            return filename.endsWith(TYPE);
+        }
     }
 }
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/BlockInterceptor.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/BlockInterceptor.java
index 556c3b2..188784d 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/BlockInterceptor.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/interceptor/BlockInterceptor.java
@@ -20,54 +20,136 @@
 import com.github.moduth.blockcanary.internal.BlockInfo;
 
 import java.io.File;
-import java.util.Collection;
+import java.util.List;
 
 public interface BlockInterceptor {
+    /**
+     * Block interceptor, developer may provide their own actions.
+     */
     void onBlock(Context context, BlockInfo blockInfo);
 
-    int provideBlockThreshold();
-
-    int provideDumpInterval();
-
-    boolean stopWhenDebugging();
-
-    String providePath();
-
-
     /**
      * Implement in your project.
      *
      * @return Qualifier which can specify this installation, like version + flavor.
      */
-    public String provideQualifier() ;
+
+    String provideQualifier();
 
     /**
      * Implement in your project.
      *
      * @return user id
      */
-    public String provideUid()  ;
+    String provideUid();
 
     /**
      * Network type
      *
-     * @return {@link String} like 2G, 3G, 4G, wifi, etc.
+     * @return ;@link String} like 2G, 3G, 4G, wifi, etc.
      */
-    public String provideNetworkType()  ;
 
-    boolean displayNotification();
+    String provideNetworkType();
+
+    /**
+     * Config monitor duration, after this time BlockCanary will stop, use
+     * with ;@code BlockCanary}'s isMonitorDurationEnd
+     *
+     * @return monitor last duration (in hour)
+     */
 
     int provideMonitorDuration();
 
-    boolean zip(File[] logFiles, File zippedFile);
+    /**
+     * Config block threshold (in millis), dispatch over this duration is regarded as a BLOCK. You may set it
+     * from performance of device.
+     *
+     * @return threshold in mills
+     */
 
-    void upload(File file);
+    int provideBlockThreshold();
 
-    boolean deleteFilesInWhiteList();
+    /**
+     * Thread stack dump interval, use when block happens, BlockCanary will dump on main thread
+     * stack according to current sample cycle.
+     * <p>
+     * Because the implementation mechanism of Looper, real dump interval would be longer than
+     * the period specified here (especially when cpu is busier).
+     * </p>
+     *
+     * @return dump interval (in millis)
+     */
+
+    int provideDumpInterval();
+
+    /**
+     * Path to save log, like "/blockcanary/", will save to sdcard if can.
+     *
+     * @return path of log files
+     */
+
+    String providePath();
+
+    /**
+     * If need notification to notice block.
+     *
+     * @return true if need, else if not need.
+     */
+
+    boolean displayNotification();
+
+    /**
+     * Implement in your project, bundle files into a zip file.
+     *
+     * @param src  files before compress
+     * @param dest files compressed
+     * @return true if compression is successful
+     */
+
+    boolean zip(File[] src, File dest);
+
+    /**
+     * Implement in your project, bundled log files.
+     *
+     * @param zippedFile zipped file
+     */
+    void upload(File zippedFile);
+
+    /**
+     * Packages that developer concern, by default it uses process name,
+     * put high priority one in pre-order.
+     *
+     * @return null if simply concern only package with process name.
+     */
+
+    List<String> concernPackages();
+
+    /**
+     * Filter stack without any in concern package, used with @;code concernPackages}.
+     *
+     * @return true if filter, false it not.
+     */
 
     boolean filterNonConcernStack();
 
-    Collection<? extends String> concernPackages();
+    /**
+     * Provide white list, entry in white list will not be shown in ui list.
+     *
+     * @return return null if you don't need white-list filter.
+     */
+    List<String> provideWhiteList();
 
-    Collection<? extends String> provideWhiteList();
+    /**
+     * Whether to delete files whose stack is in white list, used with white-list.
+     *
+     * @return true if delete, false it not.
+     */
+    boolean deleteFilesInWhiteList();
+
+    /**
+     * Whether to stop monitoring when in debug mode.
+     *
+     * @return true if stop, false otherwise
+     */
+    boolean stopWhenDebugging();
 }
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/Uploader.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/Uploader.java
index 960225e..4b90b97 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/Uploader.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/Uploader.java
@@ -44,7 +44,7 @@ private static File zip() {
         }
         File zippedFile = LogWriter.generateTempZip("BlockCanary-" + timeString);
         BlockInterceptor interceptor = BlockCanaryInternals.getInstance().getInterceptor(0);
-        interceptor.zip(BlockCanaryInternals.getLogFiles(), zippedFile);
+        interceptor.zip(LogWriter.getLogFiles(), zippedFile);
         LogWriter.deleteAll();
         return zippedFile;
     }
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/DisplayActivity.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/DisplayActivity.java
index b6828a4..5402b20 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/DisplayActivity.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/ui/DisplayActivity.java
@@ -396,7 +396,7 @@ static void forgetActivity() {
         @Override
         public void run() {
             final List<BlockInfoEx> blockInfoList = new ArrayList<>();
-            File[] files = BlockCanaryInternals.getLogFiles();
+            File[] files = LogWriter.getLogFiles();
             if (files != null) {
                 for (File blockFile : files) {
                     try {
