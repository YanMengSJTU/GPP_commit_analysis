diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
index d5e70b3..d9660a9 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
@@ -58,6 +58,7 @@ public void onBlockEvent(long realTimeStart, long realTimeEnd,
                             .setCpuBusyFlag(cpuSampler.isCpuBusy(realTimeStart, realTimeEnd))
                             .setRecentCpuRate(cpuSampler.getCpuRateInfo())
                             .setThreadStackEntries(threadStackEntries)
+                            .setStackTraceElements(stackSampler.getTraceElements())
                             .flushString();
                     LogWriter.save(blockInfo.toString());
 
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/StackSampler.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/StackSampler.java
index a6f43d4..b6c6653 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/StackSampler.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/StackSampler.java
@@ -31,6 +31,14 @@
     private int mMaxEntryCount = DEFAULT_MAX_ENTRY_COUNT;
     private Thread mCurrentThread;
 
+    public  StackTraceElement[] getTraceElements() {
+        synchronized (sStackMap) {
+            return traceElements;
+        }
+    }
+
+    private static  StackTraceElement[] traceElements;
+
     public StackSampler(Thread thread, long sampleIntervalMillis) {
         this(thread, DEFAULT_MAX_ENTRY_COUNT, sampleIntervalMillis);
     }
@@ -59,9 +67,11 @@ public StackSampler(Thread thread, int maxEntryCount, long sampleIntervalMillis)
     @Override
     protected void doSample() {
         StringBuilder stringBuilder = new StringBuilder();
-
-        for (StackTraceElement stackTraceElement : mCurrentThread.getStackTrace()) {
-            stringBuilder.append(stackTraceElement.toString()).append(BlockInfo.SEPARATOR);
+        traceElements = mCurrentThread.getStackTrace();
+        for (StackTraceElement stackTraceElement : traceElements) {
+            stringBuilder
+                    .append(stackTraceElement.toString())
+                    .append(BlockInfo.SEPARATOR);
         }
 
         synchronized (sStackMap) {
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
index 74e27fb..67dd315 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
@@ -88,6 +88,7 @@
     public boolean cpuBusy;
     public String cpuRateInfo;
     public ArrayList<String> threadStackEntries = new ArrayList<>();
+    public StackTraceElement[] stackTraceElements ;
 
     private StringBuilder basicSb = new StringBuilder();
     private StringBuilder cpuSb = new StringBuilder();
@@ -145,6 +146,11 @@ public BlockInfo setThreadStackEntries(ArrayList<String> threadStackEntries) {
         return this;
     }
 
+    public BlockInfo setStackTraceElements(StackTraceElement[] stackTraceElements) {
+        this.stackTraceElements = stackTraceElements;
+        return this;
+    }
+
     public BlockInfo setMainThreadTimeCost(long realTimeStart, long realTimeEnd, long threadTimeStart, long threadTimeEnd) {
         timeCost = realTimeEnd - realTimeStart;
         threadTimeCost = threadTimeEnd - threadTimeStart;
@@ -201,4 +207,22 @@ public String getTimeString() {
     public String toString() {
         return String.valueOf(basicSb) + timeSb + cpuSb + stackSb;
     }
+
+    public Exception buildException(){
+        StringBuilder sb = new StringBuilder("threadTimeCost time cost:")
+                .append(threadTimeCost)
+                .append("ms,real time cost:")
+                .append(timeCost)
+                .append("ms");
+        if(timeCost - threadTimeCost > 300){
+            sb.append(",thread waiting a long time!!!");
+        }
+        if(cpuBusy){
+            sb.append(",cpu is busy !!!");
+        }
+        Exception exception = new BlockcanaryException(sb.toString());
+        exception.setStackTrace(stackTraceElements);
+        return exception;
+
+    }
 }
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockcanaryException.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockcanaryException.java
new file mode 100644
index 0000000..86fe7f8
--- /dev/null
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/BlockcanaryException.java
@@ -0,0 +1,19 @@
+package com.github.moduth.blockcanary.internal;
+
+public class BlockcanaryException extends Exception{
+
+    public BlockcanaryException() {
+    }
+
+    public BlockcanaryException(String detailMessage) {
+        super(detailMessage);
+    }
+
+    public BlockcanaryException(String detailMessage, Throwable throwable) {
+        super(detailMessage, throwable);
+    }
+
+    public BlockcanaryException(Throwable throwable) {
+        super(throwable);
+    }
+}
diff --git a/blockcanary-android-no-op/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java b/blockcanary-android-no-op/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
index 278a8c7..0dbd64f 100644
--- a/blockcanary-android-no-op/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
+++ b/blockcanary-android-no-op/src/main/java/com/github/moduth/blockcanary/internal/BlockInfo.java
@@ -1,4 +1,23 @@
 package com.github.moduth.blockcanary.internal;
 
 public class BlockInfo {
+    public Exception buildException(){
+        return null;
+    }
+
+    public String getBasicString() {
+        return "";
+    }
+
+    public String getCpuString() {
+        return "";
+    }
+
+    public String getTimeString() {
+        return "";
+    }
+
+    public String toString() {
+        return "";
+    }
 }
diff --git a/blockcanary-sample/src/main/java/com/example/blockcanary/AppContext.java b/blockcanary-sample/src/main/java/com/example/blockcanary/AppContext.java
index 5d4bc0e..3a0fdc8 100644
--- a/blockcanary-sample/src/main/java/com/example/blockcanary/AppContext.java
+++ b/blockcanary-sample/src/main/java/com/example/blockcanary/AppContext.java
@@ -15,11 +15,13 @@
  */
 package com.example.blockcanary;
 
+import android.content.Context;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.util.Log;
 
 import com.github.moduth.blockcanary.BlockCanaryContext;
+import com.github.moduth.blockcanary.internal.BlockInfo;
 import com.github.moduth.blockcanary.internal.NetUtils;
 
 import java.util.List;
@@ -83,4 +85,14 @@ public boolean displayNotification() {
     public boolean stopWhenDebugging() {
         return true;
     }
+
+    @Override
+    public void onBlock(Context context, BlockInfo blockInfo) {
+        super.onBlock(context, blockInfo);
+        Exception e = blockInfo.buildException();
+        if(e != null){
+            e.printStackTrace();
+        }
+        Log.e("block",blockInfo.toString());
+    }
 }
\ No newline at end of file
