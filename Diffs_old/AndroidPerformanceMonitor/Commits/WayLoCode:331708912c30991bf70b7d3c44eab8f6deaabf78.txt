diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
index 7d71590..81df9ad 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
@@ -17,27 +17,22 @@
 
 import android.annotation.TargetApi;
 import android.app.Notification;
+import android.app.NotificationChannel;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.content.Context;
 import android.content.Intent;
-import android.util.Log;
-
+import android.graphics.Color;
 import com.github.moduth.blockcanary.internal.BlockInfo;
 import com.github.moduth.blockcanary.ui.DisplayActivity;
 
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-
 import static android.app.PendingIntent.FLAG_UPDATE_CURRENT;
 import static android.os.Build.VERSION.SDK_INT;
 import static android.os.Build.VERSION_CODES.HONEYCOMB;
-import static android.os.Build.VERSION_CODES.JELLY_BEAN;
+import static android.os.Build.VERSION_CODES.O;
 
 final class DisplayService implements BlockInterceptor {
 
-    private static final String TAG = "DisplayService";
-
     @Override
     public void onBlock(Context context, BlockInfo blockInfo) {
         Intent intent = new Intent(context, DisplayActivity.class);
@@ -54,35 +49,33 @@ private void show(Context context, String contentTitle, String contentText, Pend
         NotificationManager notificationManager = (NotificationManager)
                 context.getSystemService(Context.NOTIFICATION_SERVICE);
 
-        Notification notification;
-        if (SDK_INT < HONEYCOMB) {
-            notification = new Notification();
-            notification.icon = R.drawable.block_canary_notification;
-            notification.when = System.currentTimeMillis();
-            notification.flags |= Notification.FLAG_AUTO_CANCEL;
-            notification.defaults = Notification.DEFAULT_SOUND;
-            try {
-                Method deprecatedMethod = notification.getClass().getMethod("setLatestEventInfo", Context.class, CharSequence.class, CharSequence.class, PendingIntent.class);
-                deprecatedMethod.invoke(notification, context, contentTitle, contentText, pendingIntent);
-            } catch (NoSuchMethodException | IllegalAccessException | IllegalArgumentException
-                    | InvocationTargetException e) {
-                Log.w(TAG, "Method not found", e);
-            }
+        Notification.Builder builder;
+
+        if (SDK_INT >= O) {
+            NotificationChannel channe = new NotificationChannel("channelId", "channelName", NotificationManager.IMPORTANCE_HIGH);
+            // 配置通知渠道的属性
+            channe.setDescription("channelDescription");
+            // 设置通知出现时的闪灯（如果 android 设备支持的话）
+            channe.enableLights(true);
+            channe.setLightColor(Color.RED);
+            // 设置通知出现时的震动（如果 android 设备支持的话）
+            channe.enableVibration(true); channe.setVibrationPattern(new long[]{100, 200, 300, 400, 500, 400, 300, 200, 400});
+
+            notificationManager.createNotificationChannel(channe);
+            builder = new Notification.Builder(context, "channelId");
+
         } else {
-            Notification.Builder builder = new Notification.Builder(context)
-                    .setSmallIcon(R.drawable.block_canary_notification)
-                    .setWhen(System.currentTimeMillis())
-                    .setContentTitle(contentTitle)
-                    .setContentText(contentText)
-                    .setAutoCancel(true)
-                    .setContentIntent(pendingIntent)
-                    .setDefaults(Notification.DEFAULT_SOUND);
-            if (SDK_INT < JELLY_BEAN) {
-                notification = builder.getNotification();
-            } else {
-                notification = builder.build();
-            }
+            builder = new Notification.Builder(context);
         }
-        notificationManager.notify(0xDEAFBEEF, notification);
+
+        builder.setSmallIcon(R.drawable.block_canary_notification)
+                .setWhen(System.currentTimeMillis())
+                .setContentTitle(contentTitle)
+                .setContentText(contentText)
+                .setAutoCancel(true)
+                .setContentIntent(pendingIntent)
+                .setDefaults(Notification.DEFAULT_SOUND);
+
+        notificationManager.notify(0xDEAFBEEF, builder.build());
     }
 }
