diff --git a/blockcanary-analyzer/build.gradle b/blockcanary-analyzer/build.gradle
index 83af379..e8054dc 100644
--- a/blockcanary-analyzer/build.gradle
+++ b/blockcanary-analyzer/build.gradle
@@ -20,5 +20,5 @@ android {
 }
 
 dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
+    implementation fileTree(dir: 'libs', include: ['*.jar'])
 }
diff --git a/blockcanary-android-no-op/build.gradle b/blockcanary-android-no-op/build.gradle
index 83af379..e8054dc 100644
--- a/blockcanary-android-no-op/build.gradle
+++ b/blockcanary-android-no-op/build.gradle
@@ -20,5 +20,5 @@ android {
 }
 
 dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
+    implementation fileTree(dir: 'libs', include: ['*.jar'])
 }
diff --git a/blockcanary-android/build.gradle b/blockcanary-android/build.gradle
index 3e8ccc1..dc6db41 100644
--- a/blockcanary-android/build.gradle
+++ b/blockcanary-android/build.gradle
@@ -20,7 +20,7 @@ android {
 }
 
 dependencies {
-    compile fileTree(include: ['*.jar'], dir: 'libs')
-    compile project(':blockcanary-analyzer')
-    //compile 'com.github.markzhai:blockcanary-analyzer:1.5.0'
+    implementation fileTree(include: ['*.jar'], dir: 'libs')
+    api project(':blockcanary-analyzer')
+    //implementation 'com.github.markzhai:blockcanary-analyzer:1.5.0'
 }
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java
index edc0858..aa5bf48 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java
@@ -15,9 +15,12 @@
  */
 package com.github.moduth.blockcanary;
 
+import android.app.NotificationChannel;
+import android.app.NotificationManager;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.pm.PackageManager;
+import android.os.Build;
 import android.os.Looper;
 import android.preference.PreferenceManager;
 
@@ -33,7 +36,8 @@
 public final class BlockCanary {
 
     private static final String TAG = "BlockCanary";
-
+    // these lines are originally copied from LeakCanary: Copyright (C) 2015 Square, Inc.
+    private static final Executor fileIoExecutor = newSingleThreadExecutor("File-IO");
     private static BlockCanary sInstance;
     private BlockCanaryInternals mBlockCanaryCore;
     private boolean mMonitorStarted = false;
@@ -57,6 +61,7 @@ private BlockCanary() {
      * @return {@link BlockCanary}
      */
     public static BlockCanary install(Context context, BlockCanaryContext blockCanaryContext) {
+        createNotificationChannel(context);
         BlockCanaryContext.init(context, blockCanaryContext);
         setEnabled(context, DisplayActivity.class, BlockCanaryContext.get().displayNotification());
         return get();
@@ -78,6 +83,50 @@ public static BlockCanary get() {
         return sInstance;
     }
 
+    private static void setEnabledBlocking(Context appContext,
+                                           Class<?> componentClass,
+                                           boolean enabled) {
+        ComponentName component = new ComponentName(appContext, componentClass);
+        PackageManager packageManager = appContext.getPackageManager();
+        int newState = enabled ? COMPONENT_ENABLED_STATE_ENABLED : COMPONENT_ENABLED_STATE_DISABLED;
+        // Blocks on IPC.
+        packageManager.setComponentEnabledSetting(component, newState, DONT_KILL_APP);
+    }
+
+    private static void executeOnFileIoThread(Runnable runnable) {
+        fileIoExecutor.execute(runnable);
+    }
+
+    private static Executor newSingleThreadExecutor(String threadName) {
+        return Executors.newSingleThreadExecutor(new SingleThreadFactory(threadName));
+    }
+
+    private static void setEnabled(Context context,
+                                   final Class<?> componentClass,
+                                   final boolean enabled) {
+        final Context appContext = context.getApplicationContext();
+        executeOnFileIoThread(new Runnable() {
+            @Override
+            public void run() {
+                setEnabledBlocking(appContext, componentClass, enabled);
+            }
+        });
+    }
+
+    private static void createNotificationChannel(Context context) {
+        // Create the NotificationChannel, but only on API 26+ because
+        // the NotificationChannel class is new and not in the support library
+        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            int importance = NotificationManager.IMPORTANCE_DEFAULT;
+            NotificationChannel channel = new NotificationChannel(DisplayService.CHANNEL_ID, "Block Canary", importance);
+            channel.setDescription("Block Canary");
+            // Register the channel with the system; you can't change the importance
+            // or other notification behaviors after this
+            NotificationManager notificationManager = context.getSystemService(NotificationManager.class);
+            if(notificationManager != null) notificationManager.createNotificationChannel(channel);
+        }
+    }
+
     /**
      * Start monitoring.
      */
@@ -99,6 +148,7 @@ public void stop() {
             mBlockCanaryCore.cpuSampler.stop();
         }
     }
+    // end of lines copied from LeakCanary
 
     /**
      * Zip and upload log files, will user context's zip and log implementation.
@@ -130,38 +180,4 @@ public boolean isMonitorDurationEnd() {
         return startTime != 0 && System.currentTimeMillis() - startTime >
                 BlockCanaryContext.get().provideMonitorDuration() * 3600 * 1000;
     }
-
-    // these lines are originally copied from LeakCanary: Copyright (C) 2015 Square, Inc.
-    private static final Executor fileIoExecutor = newSingleThreadExecutor("File-IO");
-
-    private static void setEnabledBlocking(Context appContext,
-                                           Class<?> componentClass,
-                                           boolean enabled) {
-        ComponentName component = new ComponentName(appContext, componentClass);
-        PackageManager packageManager = appContext.getPackageManager();
-        int newState = enabled ? COMPONENT_ENABLED_STATE_ENABLED : COMPONENT_ENABLED_STATE_DISABLED;
-        // Blocks on IPC.
-        packageManager.setComponentEnabledSetting(component, newState, DONT_KILL_APP);
-    }
-    // end of lines copied from LeakCanary
-
-    private static void executeOnFileIoThread(Runnable runnable) {
-        fileIoExecutor.execute(runnable);
-    }
-
-    private static Executor newSingleThreadExecutor(String threadName) {
-        return Executors.newSingleThreadExecutor(new SingleThreadFactory(threadName));
-    }
-
-    private static void setEnabled(Context context,
-                                   final Class<?> componentClass,
-                                   final boolean enabled) {
-        final Context appContext = context.getApplicationContext();
-        executeOnFileIoThread(new Runnable() {
-            @Override
-            public void run() {
-                setEnabledBlocking(appContext, componentClass, enabled);
-            }
-        });
-    }
 }
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
index 7d71590..fc10be7 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/DisplayService.java
@@ -15,12 +15,12 @@
  */
 package com.github.moduth.blockcanary;
 
-import android.annotation.TargetApi;
 import android.app.Notification;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.content.Context;
 import android.content.Intent;
+import android.os.Build;
 import android.util.Log;
 
 import com.github.moduth.blockcanary.internal.BlockInfo;
@@ -33,10 +33,12 @@
 import static android.os.Build.VERSION.SDK_INT;
 import static android.os.Build.VERSION_CODES.HONEYCOMB;
 import static android.os.Build.VERSION_CODES.JELLY_BEAN;
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
 
 final class DisplayService implements BlockInterceptor {
 
     private static final String TAG = "DisplayService";
+    public static final String CHANNEL_ID = "BLOCK_CANARY";
 
     @Override
     public void onBlock(Context context, BlockInfo blockInfo) {
@@ -49,40 +51,54 @@ public void onBlock(Context context, BlockInfo blockInfo) {
         show(context, contentTitle, contentText, pendingIntent);
     }
 
-    @TargetApi(HONEYCOMB)
     private void show(Context context, String contentTitle, String contentText, PendingIntent pendingIntent) {
         NotificationManager notificationManager = (NotificationManager)
                 context.getSystemService(Context.NOTIFICATION_SERVICE);
 
-        Notification notification;
-        if (SDK_INT < HONEYCOMB) {
-            notification = new Notification();
-            notification.icon = R.drawable.block_canary_notification;
-            notification.when = System.currentTimeMillis();
-            notification.flags |= Notification.FLAG_AUTO_CANCEL;
-            notification.defaults = Notification.DEFAULT_SOUND;
-            try {
-                Method deprecatedMethod = notification.getClass().getMethod("setLatestEventInfo", Context.class, CharSequence.class, CharSequence.class, PendingIntent.class);
-                deprecatedMethod.invoke(notification, context, contentTitle, contentText, pendingIntent);
-            } catch (NoSuchMethodException | IllegalAccessException | IllegalArgumentException
-                    | InvocationTargetException e) {
-                Log.w(TAG, "Method not found", e);
-            }
-        } else {
-            Notification.Builder builder = new Notification.Builder(context)
-                    .setSmallIcon(R.drawable.block_canary_notification)
-                    .setWhen(System.currentTimeMillis())
-                    .setContentTitle(contentTitle)
-                    .setContentText(contentText)
-                    .setAutoCancel(true)
-                    .setContentIntent(pendingIntent)
-                    .setDefaults(Notification.DEFAULT_SOUND);
-            if (SDK_INT < JELLY_BEAN) {
-                notification = builder.getNotification();
+        if(notificationManager != null) {
+            Notification notification;
+            if (SDK_INT < HONEYCOMB) {
+                notification = new Notification();
+                notification.icon = R.drawable.block_canary_notification;
+                notification.when = System.currentTimeMillis();
+                notification.flags |= Notification.FLAG_AUTO_CANCEL;
+                notification.defaults = Notification.DEFAULT_SOUND;
+                try {
+                    Method deprecatedMethod = notification.getClass().getMethod("setLatestEventInfo", Context.class, CharSequence.class, CharSequence.class, PendingIntent.class);
+                    deprecatedMethod.invoke(notification, context, contentTitle, contentText, pendingIntent);
+                } catch (NoSuchMethodException | IllegalAccessException | IllegalArgumentException
+                        | InvocationTargetException e) {
+                    Log.w(TAG, "Method not found", e);
+                }
             } else {
-                notification = builder.build();
+                Notification.Builder builder;
+                if(SDK_INT >= Build.VERSION_CODES.O) {
+                    builder = new Notification.Builder(context, CHANNEL_ID)
+                            .setSmallIcon(R.drawable.block_canary_notification)
+                            .setWhen(System.currentTimeMillis())
+                            .setContentTitle(contentTitle)
+                            .setContentText(contentText)
+                            .setAutoCancel(true)
+                            .setContentIntent(pendingIntent)
+                            .setDefaults(Notification.DEFAULT_SOUND);
+                } else {
+                    builder = new Notification.Builder(context)
+                            .setSmallIcon(R.drawable.block_canary_notification)
+                            .setWhen(System.currentTimeMillis())
+                            .setContentTitle(contentTitle)
+                            .setContentText(contentText)
+                            .setAutoCancel(true)
+                            .setContentIntent(pendingIntent)
+                            .setDefaults(Notification.DEFAULT_SOUND);
+                }
+
+                if (SDK_INT < JELLY_BEAN) {
+                    notification = builder.getNotification();
+                } else {
+                    notification = builder.build();
+                }
             }
+            notificationManager.notify(0xDEAFBEEF, notification);
         }
-        notificationManager.notify(0xDEAFBEEF, notification);
     }
 }
diff --git a/blockcanary-sample/build.gradle b/blockcanary-sample/build.gradle
index 32d69b8..3635637 100644
--- a/blockcanary-sample/build.gradle
+++ b/blockcanary-sample/build.gradle
@@ -20,10 +20,10 @@ android {
 }
 
 dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    debugCompile project(':blockcanary-android')
-    releaseCompile project(':blockcanary-android-no-op')
+    implementation fileTree(dir: 'libs', include: ['*.jar'])
+    debugImplementation project(':blockcanary-android')
+    releaseImplementation project(':blockcanary-android-no-op')
 
-    compile 'com.android.support:appcompat-v7:24.2.0'
-    compile 'com.android.support:design:24.2.0'
+    implementation 'com.android.support:appcompat-v7:28.0.0'
+    implementation 'com.android.support:design:28.0.0'
 }
diff --git a/build.gradle b/build.gradle
index 2e498be..549caeb 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,9 +4,10 @@ buildscript {
     repositories {
         mavenCentral()
         jcenter()
+        google()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.2.2'
+        classpath 'com.android.tools.build:gradle:3.4.1'
     }
 }
 
@@ -14,11 +15,14 @@ allprojects {
     repositories {
         mavenCentral()
         jcenter()
+        maven {
+            url 'https://maven.google.com/'
+        }
     }
     ext {
-        LIBRARY_COMPILE_SDK_VERSION = 23
-        LIBRARY_BUILD_TOOLS_VERSION = "23.0.3"
-        LIBRARY_MIN_SDK_VERSION = 9
-        LIBRARY_TARGET_SDK_VERSION = 22
+        LIBRARY_COMPILE_SDK_VERSION = 28
+        LIBRARY_BUILD_TOOLS_VERSION = "28.0.3"
+        LIBRARY_MIN_SDK_VERSION = 16
+        LIBRARY_TARGET_SDK_VERSION = 28
     }
 }
diff --git a/gradle.properties b/gradle.properties
index d4b7bce..fc62b95 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -18,4 +18,3 @@ org.gradle.jvmargs=-Xmx8192M
 org.gradle.daemon=true
 org.gradle.configureondemand=true
 org.gradle.parallel=true
-android.useDeprecatedNdk=true
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 586936a..f9dee44 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Apr 13 16:42:11 CST 2016
+#Wed Jun 26 23:56:27 WIB 2019
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-5.1.1-all.zip
