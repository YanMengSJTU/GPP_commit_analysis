diff --git a/blockcanary-analyzer/build.gradle b/blockcanary-analyzer/build.gradle
index 83af379..348f898 100644
--- a/blockcanary-analyzer/build.gradle
+++ b/blockcanary-analyzer/build.gradle
@@ -20,5 +20,6 @@ android {
 }
 
 dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
+    implementation fileTree(dir: 'libs', include: ['*.jar'])
+    implementation project(':yhook')
 }
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java
index 42dd1f1..ae03959 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryContext.java
@@ -18,6 +18,7 @@
 import android.content.Context;
 
 import com.github.moduth.blockcanary.internal.BlockInfo;
+import com.tencent.wstt.gt.controller.GTRController;
 
 import java.io.File;
 import java.util.LinkedList;
@@ -35,7 +36,8 @@ public BlockCanaryContext() {
     }
 
     static void init(Context context, BlockCanaryContext blockCanaryContext) {
-        sApplicationContext = context;
+        sApplicationContext = context.getApplicationContext();
+        GTRController.init(sApplicationContext);
         sInstance = blockCanaryContext;
     }
 
diff --git a/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/GTRLog.java b/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/GTRLog.java
new file mode 100644
index 0000000..d4d08c4
--- /dev/null
+++ b/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/GTRLog.java
@@ -0,0 +1,73 @@
+package com.tencent.wstt.gt;
+
+import android.util.Log;
+
+/**
+ * Created by Elvis on 2016/11/19.
+ * 自定义Log，支持打印开关，支持本地存储开关
+ */
+
+public class GTRLog {
+    private static String TAG = "GTR_TAG_";
+
+    //是否要打开Log
+    public static boolean isOpen = false;
+
+    //是否要进行本地保存
+    public static boolean isSaveLocal = false;
+
+    public static void v(String tag, String msg) {
+        if (!isOpen) {
+            return;
+        }
+        Log.v(TAG + tag, msg);
+        if (isSaveLocal) {
+            saveLocal("verbose", tag, msg);
+        }
+    }
+
+    public static void d(String tag, String msg) {
+        if (!isOpen) {
+            return;
+        }
+        Log.d(TAG + tag, msg);
+        if (isSaveLocal) {
+            saveLocal("debug", tag, msg);
+        }
+    }
+    public static void i(String tag, String msg) {
+        if (!isOpen) {
+            return;
+        }
+        Log.i(TAG + tag, msg);
+        if (isSaveLocal) {
+            saveLocal("info", tag, msg);
+        }
+    }
+    public static void w(String tag, String msg) {
+        if (!isOpen) {
+            return;
+        }
+        Log.w(TAG + tag, msg);
+        if (isSaveLocal) {
+            saveLocal("warn", tag, msg);
+        }
+    }
+    public static void e(String tag, String msg) {
+        if (!isOpen) {
+            return;
+        }
+        Log.e(TAG + tag, msg);
+        if (isSaveLocal) {
+            saveLocal("error", tag, msg);
+        }
+    }
+
+    /**
+     * @deprecated
+     * 本地存储相关：
+     */
+    private static void saveLocal(String level, String tag, String msg) {
+        // TODO
+    }
+}
diff --git a/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/GTRCollector.java b/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/GTRCollector.java
new file mode 100644
index 0000000..c67b75f
--- /dev/null
+++ b/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/GTRCollector.java
@@ -0,0 +1,110 @@
+package com.tencent.wstt.gt.collector;
+
+import android.content.Context;
+import android.os.Build;
+import android.os.Handler;
+import android.os.Looper;
+
+import com.tencent.wstt.gt.GTRLog;
+//import com.tencent.wstt.gt.client.GTRClient;
+//import com.tencent.wstt.gt.collector.monitor.MonitorManager;
+import com.tencent.wstt.gt.collector.monitor.HookMonitor;
+import com.tencent.wstt.gt.collector.util.ProcessUtil;
+
+public class GTRCollector {
+    private static final String TAG = "GTRCollector";
+
+    public static int mainThreadId;
+
+    // 作为当次测试的ID
+    private static long startTestTime = System.currentTimeMillis();
+
+    public static Context applicationContext;
+
+    // 监控器状态
+    private static boolean isRunning = false;
+
+    private static HookMonitor sHookMonitor;
+
+    public static boolean init(Context context) {
+        // 防止重复开启
+        if (isRunning) {
+            return true;
+        }
+
+        // 支持SDK版本21（5.0）以上
+        if (Build.VERSION.SDK_INT < 21) {
+            return false;
+        }
+
+        applicationContext = context.getApplicationContext();
+
+        // 只采集应用UI进程数据
+        if (!ProcessUtil.isUIProcess(applicationContext, android.os.Process.myPid())) {
+            return false;
+        }
+
+        mainThreadId = android.os.Process.myTid();
+
+//        GTRClient.init(applicationContext);
+//        initMonitors();
+//        isRunning = true;
+//
+//        if (!GTRClient.tryConnectServer(applicationContext)) {
+//            GTRLog.w(TAG, "No GT service is available, waiting for the GT app.");
+//        }
+
+        sHookMonitor = new HookMonitor();
+        sHookMonitor.start();
+
+        return isRunning;
+    }
+
+//    private static void initMonitors() {
+//        MonitorManager.getInstance().setContext(applicationContext);
+//        MonitorManager.startMonitors();
+//    }
+//
+//    public static void startMonitorsIfNeeded() {
+//        if (!isRunning) {
+//            MonitorManager.startMonitors();
+//        }
+//    }
+
+    public static long getStartTime() {
+        return startTestTime;
+    }
+
+    private static Handler handler = new Handler(Looper.getMainLooper());
+
+//    private static Runnable stopDelayRunnable = new Runnable() {
+//        @Override
+//        public void run() {
+//            stopChoreographerCollect();
+//        }
+//    };
+
+//    private static void startChoreographerCollect() {
+//        // 获取卡顿数据（计算流畅值和拉栈）：(这个必须在最后开启，防止捕获到GTR的卡顿)
+//        MonitorManager.getMonitor(MonitorManager.CHORE_MONITOR).start();
+//    }
+//
+//    private static void stopChoreographerCollect() {
+//        //获取卡顿数据（计算流畅值和拉栈）：(这个必须在最后开启，防止捕获到GTR的卡顿)
+//        MonitorManager.getMonitor(MonitorManager.CHORE_MONITOR).stop();
+//    }
+
+    /**
+     * 开启或者关闭choreographer的数据采集
+     * @param ifStart true if want to start collect choreographer data,
+     *                false if to stop
+     */
+//    public static void collectChoreographer(boolean ifStart) {
+//        if (isRunning && ifStart) {
+//            handler.removeCallbacks(stopDelayRunnable);
+//            startChoreographerCollect();
+//        } else if (isRunning) {
+//            handler.postDelayed(stopDelayRunnable,1500);
+//        }
+//    }
+}
diff --git a/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/monitor/AbsMonitor.java b/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/monitor/AbsMonitor.java
new file mode 100644
index 0000000..891ff6f
--- /dev/null
+++ b/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/monitor/AbsMonitor.java
@@ -0,0 +1,41 @@
+package com.tencent.wstt.gt.collector.monitor;
+
+import android.content.Context;
+import android.os.Handler;
+import android.os.HandlerThread;
+
+/**
+ * Created by p_xcli on 2017/12/24.
+ */
+
+public class AbsMonitor {
+    protected HandlerThread thread;
+    protected Handler handler;
+    int threadId = -1;
+
+    volatile boolean started;
+
+    public void start() {
+
+    }
+
+    public void start(Context context) {
+
+    }
+
+    public void stop() {
+
+    }
+
+    public void stop(Context context) {
+
+    }
+
+    public int getWorkThreadId() {
+        return threadId;
+    }
+
+    public Handler getHandler() {
+        return handler;
+    }
+}
diff --git a/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/monitor/HookMonitor.java b/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/monitor/HookMonitor.java
new file mode 100644
index 0000000..ff5fa4a
--- /dev/null
+++ b/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/monitor/HookMonitor.java
@@ -0,0 +1,69 @@
+package com.tencent.wstt.gt.collector.monitor;
+
+import android.content.Context;
+import android.os.Handler;
+
+import com.kunpeng.pit.HookMain;
+import com.tencent.wstt.gt.GTRLog;
+import com.tencent.wstt.gt.collector.monitor.yhook.WhiteList;
+
+/**
+ * Created by p_hongjcong on 2017/7/13.
+ */
+public class HookMonitor extends AbsMonitor {
+    private static final String TAG = "HookMonitor";
+
+    @Override
+    public void start() {
+        start(null);
+    }
+
+    private static void startJava_YAHFAHook() {
+        Class<?> hookClazz;
+        try {
+            hookClazz = Class.forName("com.tencent.wstt.gt.collector.monitor.yhook.ActivityHookList");
+            HookMain.doHookDefault(hookClazz);
+            hookClazz = Class.forName("com.tencent.wstt.gt.collector.monitor.yhook.DBHookList");
+            HookMain.doHookDefault(hookClazz);
+            hookClazz = Class.forName("com.tencent.wstt.gt.collector.monitor.yhook.FragmentHookList");
+            HookMain.doHookDefault(hookClazz);
+            hookClazz = Class.forName("com.tencent.wstt.gt.collector.monitor.yhook.FragmentHookList_v4");
+            HookMain.doHookDefault(hookClazz);
+            hookClazz = Class.forName("com.tencent.wstt.gt.collector.monitor.yhook.OperationHookList");
+            HookMain.doHookDefault(hookClazz);
+            hookClazz = Class.forName("com.tencent.wstt.gt.collector.monitor.yhook.ViewBuildHookList");
+            HookMain.doHookDefault(hookClazz);
+
+            if (WhiteList.isYunOS()) {
+                hookClazz = Class.forName("com.tencent.wstt.gt.collector.monitor.yhook.ViewDrawHookWhiteList");
+            } else {
+                hookClazz = Class.forName("com.tencent.wstt.gt.collector.monitor.yhook.ViewDrawHookList");
+            }
+
+            HookMain.doHookDefault(hookClazz);
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void start(Context context) {
+        startJava_YAHFAHook();
+        GTRLog.d(TAG, "monitor started");
+    }
+
+    @Override
+    public void stop() {
+        super.stop();
+    }
+
+    @Override
+    public int getWorkThreadId() {
+        return super.getWorkThreadId();
+    }
+
+    @Override
+    public Handler getHandler() {
+        return super.getHandler();
+    }
+}
diff --git a/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/monitor/yhook/ViewBuildHookList.java b/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/monitor/yhook/ViewBuildHookList.java
new file mode 100644
index 0000000..d19eb9d
--- /dev/null
+++ b/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/monitor/yhook/ViewBuildHookList.java
@@ -0,0 +1,58 @@
+package com.tencent.wstt.gt.collector.monitor.yhook;
+
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.kunpeng.pit.HookAnnotation;
+//import com.tencent.wstt.gt.GTConfig;
+import com.tencent.wstt.gt.GTRLog;
+//import com.tencent.wstt.gt.client.GTRClient;
+import com.tencent.wstt.gt.collector.GTRCollector;
+
+
+/**
+ * Created by p_hongjcong on 2017/5/2.
+ */
+public class ViewBuildHookList {
+    private static final String TAG = "HookList_viewbuild";
+
+    /** View构建相关： **/
+    @HookAnnotation(
+            className = "android.view.LayoutInflater",
+            methodName = "inflate",
+            methodSig = "(ILandroid/view/ViewGroup;)Landroid/view/View;")
+    public static View inflate(Object thiz, int resource, ViewGroup root) {
+        GTRLog.e(TAG,"LayoutInflater.inflate");
+        String resourceName = "未知";
+
+        if (GTRCollector.applicationContext != null) {
+            try {
+                resourceName = GTRCollector.applicationContext.getResources().getResourceName(resource);
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+
+        long start = System.currentTimeMillis();
+        View view = inflate_backup(thiz, resource, root);
+        long end = System.currentTimeMillis();
+
+//        GTRClient.pushData(new StringBuilder()
+//                .append("LayoutInflater.inflate")
+//                .append(GTConfig.separator).append(resourceName)
+//                .append(GTConfig.separator).append(start)
+//                .append(GTConfig.separator).append(end)
+//                .toString());
+        return view;
+    }
+
+    public static View inflate_backup(Object thiz, int resource, ViewGroup root) {
+        GTRLog.d(TAG, "这个日志出现了就爆炸了");
+        return null;
+    }
+
+    public static View inflate_tmp(Object thiz, int resource, ViewGroup root) {
+        GTRLog.d(TAG, "这个日志出现了就爆炸了");
+        return null;
+    }
+}
diff --git a/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/monitor/yhook/WhiteList.java b/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/monitor/yhook/WhiteList.java
new file mode 100644
index 0000000..de882a9
--- /dev/null
+++ b/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/monitor/yhook/WhiteList.java
@@ -0,0 +1,19 @@
+package com.tencent.wstt.gt.collector.monitor.yhook;
+
+import android.os.Build;
+
+/**
+ * @author p_xcli
+ * Created on 2018/1/20.
+ */
+
+public class WhiteList {
+    /**
+     * Whether the OS is powered by YunOS,
+     * the list is still far from being completed.
+     * @return
+     */
+    public static boolean isYunOS() {
+        return Build.DISPLAY.startsWith("Flyme");
+    }
+}
diff --git a/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/util/ProcessUtil.java b/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/util/ProcessUtil.java
new file mode 100644
index 0000000..e7aef73
--- /dev/null
+++ b/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/collector/util/ProcessUtil.java
@@ -0,0 +1,31 @@
+package com.tencent.wstt.gt.collector.util;
+
+import android.app.ActivityManager;
+import android.app.ActivityManager.RunningAppProcessInfo;
+import android.content.Context;
+
+/**
+ * Created by elvis on 2017/2/24.
+ */
+
+public class ProcessUtil {
+    /**
+     * 判断进程是否包含Application主线程
+     * @param context
+     * @param pid
+     * @return
+     */
+    public static boolean isUIProcess(Context context, int pid) {
+        String processName = null;
+        ActivityManager mActivityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
+        for (RunningAppProcessInfo appProcess : mActivityManager.getRunningAppProcesses()) {
+            if (appProcess.pid == pid) {
+                processName = appProcess.processName;
+                break;
+            }
+        }
+
+        String packageName = context.getPackageName();
+        return processName != null && processName.equals(packageName);
+    }
+}
diff --git a/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/controller/GTRController.java b/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/controller/GTRController.java
new file mode 100644
index 0000000..7b333a9
--- /dev/null
+++ b/blockcanary-analyzer/src/main/java/com/tencent/wstt/gt/controller/GTRController.java
@@ -0,0 +1,49 @@
+package com.tencent.wstt.gt.controller;
+
+import android.content.Context;
+
+//import com.tencent.wstt.gt.Env;
+//import com.tencent.wstt.gt.collector.GTRCollector;
+
+import com.tencent.wstt.gt.collector.GTRCollector;
+
+import java.io.File;
+
+public class GTRController {
+    private static Context sContext;
+
+    public static Context getContext() {
+        return sContext;
+    }
+
+    /** 模式有两种
+     /* 1.启动应用时开启采集并保存数据（缺点：无法准确获取启动时长）（默认）
+     /* 2.启动应用时不开启采集，接受到广播时再启动采集并保存数据（缺点：开启之前的数据会被遗漏）
+     * @param context
+     * */
+	public static void init(Context context) {
+        sContext = context.getApplicationContext();
+        GTRCollector.init(sContext);
+
+//        // 读取模式：
+//        boolean startCollector = true;
+//        File gtrDir = new File(Env.GTR_CONFIG_PATH);
+//        if (gtrDir.exists()) {
+//            File[] files = gtrDir.listFiles();
+//            if (files != null) {
+//                for (File file : files) {
+//                    if (file.getName().equals(sContext.getPackageName() + ".txt")) {
+//                        startCollector = false;
+//                    }
+//                }
+//            }
+//        }
+//
+//        if (startCollector) {
+//            GTRCollector.init(sContext);
+//        }
+//
+//        // 注册广播控制器
+//        GTRBroadcastReceiver.start(context);
+    }
+}
diff --git a/blockcanary-android/build.gradle b/blockcanary-android/build.gradle
index ebe613e..97cd13d 100644
--- a/blockcanary-android/build.gradle
+++ b/blockcanary-android/build.gradle
@@ -20,7 +20,7 @@ android {
 }
 
 dependencies {
-    compile fileTree(include: ['*.jar'], dir: 'libs')
-//    compile project(':blockcanary-analyzer')
-    compile 'com.github.markzhai:blockcanary-analyzer:1.5.0'
+    implementation fileTree(include: ['*.jar'], dir: 'libs')
+    api project(':blockcanary-analyzer')
+//    compile 'com.github.markzhai:blockcanary-analyzer:1.5.0'
 }
diff --git a/blockcanary-sample/build.gradle b/blockcanary-sample/build.gradle
index 32d69b8..60501bb 100644
--- a/blockcanary-sample/build.gradle
+++ b/blockcanary-sample/build.gradle
@@ -20,10 +20,10 @@ android {
 }
 
 dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    debugCompile project(':blockcanary-android')
-    releaseCompile project(':blockcanary-android-no-op')
+    implementation fileTree(dir: 'libs', include: ['*.jar'])
+    debugImplementation project(':blockcanary-android')
+    releaseImplementation project(':blockcanary-android-no-op')
 
-    compile 'com.android.support:appcompat-v7:24.2.0'
-    compile 'com.android.support:design:24.2.0'
+    implementation 'com.android.support:appcompat-v7:26.0.0'
+    implementation 'com.android.support:design:26.0.0'
 }
diff --git a/build.gradle b/build.gradle
index eb3b42d..ab4a043 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,9 +4,10 @@ buildscript {
     repositories {
         mavenCentral()
         jcenter()
+        google()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.2.2'
+        classpath 'com.android.tools.build:gradle:3.1.0'
     }
 }
 
@@ -14,10 +15,11 @@ allprojects {
     repositories {
         mavenCentral()
         jcenter()
+        google()
     }
     ext {
         LIBRARY_COMPILE_SDK_VERSION = 26
-        LIBRARY_BUILD_TOOLS_VERSION = "26.0.2"
+        LIBRARY_BUILD_TOOLS_VERSION = "27.0.3"
         LIBRARY_MIN_SDK_VERSION = 18
         LIBRARY_TARGET_SDK_VERSION = 26
         supportLibVersion = '26.0.0+'
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 586936a..4f25d5e 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-5.1.1-all.zip
diff --git a/yhook/build.gradle b/yhook/build.gradle
index d24bbc9..0b11465 100644
--- a/yhook/build.gradle
+++ b/yhook/build.gradle
@@ -10,7 +10,13 @@ android {
         targetSdkVersion LIBRARY_TARGET_SDK_VERSION
         versionCode 1
         versionName "1.0"
-        
+        externalNativeBuild {
+            ndkBuild {
+                abiFilters 'armeabi-v7a', 'x86', 'arm64-v8a'
+                //c++ need
+                //cppFlags "-std=gnu++11"
+            }
+        }
     }
     buildTypes {
         release {
@@ -18,7 +24,11 @@ android {
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
     }
-
+    externalNativeBuild {
+        ndkBuild {
+            path 'src/main/jni/Android.mk'
+        }
+    }
     productFlavors {
     }
 }
