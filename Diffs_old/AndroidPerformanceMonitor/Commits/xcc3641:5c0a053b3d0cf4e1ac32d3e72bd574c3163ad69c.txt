diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/PerformanceUtils.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/PerformanceUtils.java
deleted file mode 100644
index d1254c2..0000000
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/PerformanceUtils.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/*
- * Copyright (C) 2016 MarkZhai (http://zhaiyifan.cn).
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.github.moduth.blockcanary.internal;
-
-import android.app.ActivityManager;
-import android.content.Context;
-import android.util.Log;
-
-import com.github.moduth.blockcanary.BlockCanaryInternals;
-
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileFilter;
-import java.io.FileReader;
-import java.io.IOException;
-import java.util.regex.Pattern;
-
-class PerformanceUtils {
-    private static final String TAG = "PerformanceUtils";
-
-    private static int sCoreNum = 0;
-    private static long sTotalMemo = 0;
-
-    private PerformanceUtils() {
-        throw new InstantiationError("Must not instantiate this class");
-    }
-
-    /**
-     * Get cpu core number
-     *
-     * @return int cpu core number
-     */
-    public static int getNumCores() {
-        class CpuFilter implements FileFilter {
-            @Override
-            public boolean accept(File pathname) {
-                return Pattern.matches("cpu[0-9]", pathname.getName());
-            }
-        }
-
-        if (sCoreNum == 0) {
-            try {
-                File dir = new File("/sys/devices/system/cpu/");
-                File[] files = dir.listFiles(new CpuFilter());
-                sCoreNum = files.length;
-            } catch (Exception e) {
-                Log.e(TAG, "getNumCores exception", e);
-                sCoreNum = 1;
-            }
-        }
-        return sCoreNum;
-    }
-
-    public static long getFreeMemory() {
-        ActivityManager am = (ActivityManager) BlockCanaryInternals.getContext().provideContext().getSystemService(Context.ACTIVITY_SERVICE);
-        ActivityManager.MemoryInfo mi = new ActivityManager.MemoryInfo();
-        am.getMemoryInfo(mi);
-        return mi.availMem / 1024;
-    }
-
-    public static long getTotalMemory() {
-        if (sTotalMemo == 0) {
-            String str1 = "/proc/meminfo";
-            String str2;
-            String[] arrayOfString;
-            long initial_memory = -1;
-            FileReader localFileReader = null;
-            try {
-                localFileReader = new FileReader(str1);
-                BufferedReader localBufferedReader = new BufferedReader(localFileReader, 8192);
-                str2 = localBufferedReader.readLine();
-
-                if (str2 != null) {
-                    arrayOfString = str2.split("\\s+");
-                    initial_memory = Integer.valueOf(arrayOfString[1]);
-                }
-                localBufferedReader.close();
-
-            } catch (IOException e) {
-                Log.e(TAG, "getTotalMemory exception = ", e);
-            } finally {
-                if (localFileReader != null) {
-                    try {
-                        localFileReader.close();
-                    } catch (IOException e) {
-                        Log.e(TAG, "close localFileReader exception = ", e);
-                    }
-                }
-            }
-            sTotalMemo = initial_memory;
-        }
-        return sTotalMemo;
-    }
-}
\ No newline at end of file
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/PerformanceUtils.kt b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/PerformanceUtils.kt
new file mode 100644
index 0000000..7c49177
--- /dev/null
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/PerformanceUtils.kt
@@ -0,0 +1,101 @@
+/*
+ * Copyright (C) 2016 MarkZhai (http://zhaiyifan.cn).
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.github.moduth.blockcanary.internal
+
+import android.app.ActivityManager
+import android.content.Context
+import android.util.Log
+import com.github.moduth.blockcanary.BlockCanaryInternals
+import java.io.*
+import java.util.regex.Pattern
+
+internal class PerformanceUtils private constructor() {
+
+    companion object {
+        private const val TAG = "PerformanceUtils"
+
+        private var sCoreNum = 0
+        private var sTotalMemo: Long = 0
+
+        /**
+         * Get cpu core number
+         *
+         * @return int cpu core number
+         */
+        @JvmStatic
+        val numCores: Int
+            get() {
+                class CpuFilter : FileFilter {
+                    override fun accept(pathname: File): Boolean {
+                        return Pattern.matches("cpu[0-9]", pathname.name)
+                    }
+                }
+
+                if (sCoreNum == 0) {
+                    sCoreNum = try {
+                        val dir = File("/sys/devices/system/cpu/")
+                        val files = dir.listFiles(CpuFilter())
+                        files.size
+                    } catch (e: Exception) {
+                        Log.e(TAG, "getNumCores exception", e)
+                        1
+                    }
+
+                }
+                return sCoreNum
+            }
+
+        @JvmStatic
+        val freeMemory: Long
+            get() {
+                val am = BlockCanaryInternals.getContext().provideContext().getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager
+                val mi = ActivityManager.MemoryInfo()
+                am.getMemoryInfo(mi)
+                return mi.availMem / 1024
+            }
+
+        @JvmStatic
+        val totalMemory: Long
+            get() {
+                if (sTotalMemo == 0L) {
+                    val str1 = "/proc/meminfo"
+                    var initialMemory: Long = -1
+                    var localFileReader: FileReader? = null
+                    try {
+                        localFileReader = FileReader(str1)
+                        val localBufferedReader = BufferedReader(localFileReader, 8192)
+                        localBufferedReader.readLine()?.let {
+                            val arrayOfString: Array<String> = it.split("\\s+".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()
+                            initialMemory = Integer.valueOf(arrayOfString[1]).toLong()
+                        }
+                        localBufferedReader.close()
+                    } catch (e: IOException) {
+                        Log.e(TAG, "getTotalMemory exception = ", e)
+                    } finally {
+                        localFileReader?.also {
+                            try {
+                                localFileReader.close()
+                            } catch (e: IOException) {
+                                Log.e(TAG, "close localFileReader exception = ", e)
+                            }
+                        }
+                    }
+                    sTotalMemo = initialMemory
+                }
+                return sTotalMemo
+            }
+    }
+}
\ No newline at end of file
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/ProcessUtils.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/ProcessUtils.java
deleted file mode 100644
index 7029f0f..0000000
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/ProcessUtils.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Copyright (C) 2016 MarkZhai (http://zhaiyifan.cn).
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.github.moduth.blockcanary.internal;
-
-import android.app.ActivityManager;
-import android.content.Context;
-
-import com.github.moduth.blockcanary.BlockCanaryInternals;
-
-import java.util.List;
-
-public class ProcessUtils {
-
-    private static volatile String sProcessName;
-    private final static Object sNameLock = new Object();
-
-    private ProcessUtils() {
-        throw new InstantiationError("Must not instantiate this class");
-    }
-
-    public static String myProcessName() {
-        if (sProcessName != null) {
-            return sProcessName;
-        }
-        synchronized (sNameLock) {
-            if (sProcessName != null) {
-                return sProcessName;
-            }
-            sProcessName = obtainProcessName(BlockCanaryInternals.getContext().provideContext());
-            return sProcessName;
-        }
-    }
-
-    private static String obtainProcessName(Context context) {
-        final int pid = android.os.Process.myPid();
-        ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
-        List<ActivityManager.RunningAppProcessInfo> listTaskInfo = am.getRunningAppProcesses();
-        if (listTaskInfo != null && !listTaskInfo.isEmpty()) {
-            for (ActivityManager.RunningAppProcessInfo info : listTaskInfo) {
-                if (info != null && info.pid == pid) {
-                    return info.processName;
-                }
-            }
-        }
-        return null;
-    }
-}
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/ProcessUtils.kt b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/ProcessUtils.kt
new file mode 100644
index 0000000..1ae1ea0
--- /dev/null
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/internal/ProcessUtils.kt
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2016 MarkZhai (http://zhaiyifan.cn).
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.github.moduth.blockcanary.internal
+
+import android.app.ActivityManager
+import android.content.Context
+
+import com.github.moduth.blockcanary.BlockCanaryInternals
+
+class ProcessUtils private constructor() {
+    companion object {
+
+        @Volatile
+        private var sProcessName: String? = null
+        private val sNameLock = Any()
+
+        @JvmStatic
+        fun myProcessName(): String? {
+            if (sProcessName != null) {
+                return sProcessName
+            }
+            synchronized(sNameLock) {
+                if (sProcessName != null) {
+                    return sProcessName
+                }
+                sProcessName = obtainProcessName(BlockCanaryInternals.getContext().provideContext())
+                return sProcessName
+            }
+        }
+
+        private fun obtainProcessName(context: Context): String? {
+            val pid = android.os.Process.myPid()
+            val am = context.getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager
+            return am.runningAppProcesses
+                    ?.takeIf { it.isNotEmpty() }
+                    ?.find { it != null && it.pid == pid }
+                    ?.processName
+        }
+    }
+}
