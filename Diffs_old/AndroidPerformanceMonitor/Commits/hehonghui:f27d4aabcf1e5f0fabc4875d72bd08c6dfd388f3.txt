diff --git a/CHANGELOG.md b/CHANGELOG.md
index 366a907..008e1d9 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -2,6 +2,13 @@
 
 You can watch releases [on Maven](https://oss.sonatype.org/content/groups/public/com/github/markzhai/).
 
+
+## Version 1.5.1 *(2017-08-19)*
+
+1. refactor this framework;
+2. change class `BlockCanaryContext` to `DefaultBlockInterceptor`.
+
+
 ## Version 1.5 *(2017-02-26)*
 
 Debug mode stop monitor.
diff --git a/README.md b/README.md
index bd17983..c7388fa 100644
--- a/README.md
+++ b/README.md
@@ -51,9 +51,9 @@ public class DemoApplication extends Application {
 }
 ```
 
-Implement your application `BlockCanaryContext` context (strongly recommend you to check all these configs)：
+Implement your application `BlockInterceptor` context (strongly recommend you to check all these configs, or you can use DefaultBlockInterceptor directly.)：
 ```java
-public class AppBlockCanaryContext extends BlockCanaryContext {
+public class AppBlockCanaryContext extends BlockInterceptor {
 
     /**
      * Implement in your project.
diff --git a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
index b12f13c..8103f08 100644
--- a/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
+++ b/blockcanary-analyzer/src/main/java/com/github/moduth/blockcanary/BlockCanaryInternals.java
@@ -44,7 +44,7 @@
 
     private List<BlockInterceptor> mInterceptorChain = new LinkedList<>();
 
-    public BlockCanaryInternals() {
+    private BlockCanaryInternals() {
         stackSampler = new StackSampler(
                 Looper.getMainLooper().getThread(),
                 getInterceptor(0).provideDumpInterval());
diff --git a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java
index 42dad66..53e4186 100644
--- a/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java
+++ b/blockcanary-android/src/main/java/com/github/moduth/blockcanary/BlockCanary.java
@@ -33,27 +33,21 @@
 
 public final class BlockCanary {
 
-    private static final String TAG = "BlockCanary";
-
     private static BlockCanary sInstance;
-    private BlockCanaryInternals mBlockCanaryCore;
     private boolean mMonitorStarted = false;
-    BlockInterceptor mBlockInterceptor ;
 
     private BlockCanary() {
-        mBlockCanaryCore = BlockCanaryInternals.getInstance();
     }
 
     /**
      * Install {@link BlockCanary}
      *
-     * @param context            Application context
+     * @param context  Application context
      * @param interceptor BlockCanary interceptor
      * @return {@link BlockCanary}
      */
     public static BlockCanary install(Context context, BlockInterceptor interceptor) {
-        BlockCanaryInternals.setContext(context.getApplicationContext());
-        get().setup(interceptor);
+        get().setup(context, interceptor);
         setEnabled(context, DisplayActivity.class, interceptor.displayNotification());
         return get();
     }
@@ -76,13 +70,14 @@ public static BlockCanary get() {
 
     /**
      * setup BlockInterceptor to provide some params.
+     * @param context Application context
      * @param interceptor BlockInterceptor instance
      */
-    public void setup(BlockInterceptor interceptor) {
-        mBlockInterceptor = interceptor ;
-        mBlockCanaryCore.addBlockInterceptor(interceptor);
+    public void setup(Context context, BlockInterceptor interceptor) {
+        BlockCanaryInternals.setContext(context.getApplicationContext());
+        BlockCanaryInternals.getInstance().addBlockInterceptor(interceptor);
         if (interceptor!= null && interceptor.displayNotification()) {
-            mBlockCanaryCore.addBlockInterceptor(new DisplayService());
+            BlockCanaryInternals.getInstance().addBlockInterceptor(new DisplayService());
         }
     }
 
@@ -92,7 +87,7 @@ public void setup(BlockInterceptor interceptor) {
     public void start() {
         if (!mMonitorStarted) {
             mMonitorStarted = true;
-            Looper.getMainLooper().setMessageLogging(mBlockCanaryCore.monitor);
+            Looper.getMainLooper().setMessageLogging(BlockCanaryInternals.getInstance().monitor);
         }
     }
 
@@ -103,8 +98,8 @@ public void stop() {
         if (mMonitorStarted) {
             mMonitorStarted = false;
             Looper.getMainLooper().setMessageLogging(null);
-            mBlockCanaryCore.stackSampler.stop();
-            mBlockCanaryCore.cpuSampler.stop();
+            BlockCanaryInternals.getInstance().stackSampler.stop();
+            BlockCanaryInternals.getInstance().cpuSampler.stop();
         }
     }
 
@@ -136,7 +131,7 @@ public boolean isMonitorDurationEnd() {
                 PreferenceManager.getDefaultSharedPreferences(BlockCanaryInternals.getContext())
                         .getLong("BlockCanary_StartTime", 0);
         return startTime != 0 && System.currentTimeMillis() - startTime >
-                get().mBlockInterceptor.provideMonitorDuration() * 3600 * 1000;
+                BlockCanaryInternals.getInstance().getInterceptor(0).provideMonitorDuration() * 3600 * 1000;
     }
 
     // these lines are originally copied from LeakCanary: Copyright (C) 2015 Square, Inc.
