diff --git a/EventBus/src/de/greenrobot/event/EventBus.java b/EventBus/src/de/greenrobot/event/EventBus.java
index 56a0942a..62f3bbbd 100644
--- a/EventBus/src/de/greenrobot/event/EventBus.java
+++ b/EventBus/src/de/greenrobot/event/EventBus.java
@@ -339,7 +339,7 @@ private void unubscribeByEventType(Object subscriber, Class<?> eventType) {
             int size = subscriptions.size();
             for (int i = 0; i < size; i++) {
                 Subscription subscription = subscriptions.get(i);
-                if (subscription.subscriber == subscriber) {
+                if (subscription.getSubscriber() == subscriber) {
                     subscription.active = false;
                     subscriptions.remove(i);
                     i--;
@@ -583,13 +583,18 @@ void invokeSubscriber(PendingPost pendingPost) {
     }
 
     void invokeSubscriber(Subscription subscription, Object event) throws Error {
+        Object subscriber = subscription.getSubscriber();
+        if (subscriber == null) {
+            return;
+        }
+
         try {
-            subscription.subscriberMethod.method.invoke(subscription.subscriber, event);
+            subscription.subscriberMethod.method.invoke(subscriber, event);
         } catch (InvocationTargetException e) {
             Throwable cause = e.getCause();
             if (event instanceof SubscriberExceptionEvent) {
                 // Don't send another SubscriberExceptionEvent to avoid infinite event recursion, just log
-                Log.e(TAG, "SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass()
+                Log.e(TAG, "SubscriberExceptionEvent subscriber " + subscriber.getClass()
                         + " threw an exception", cause);
                 SubscriberExceptionEvent exEvent = (SubscriberExceptionEvent) event;
                 Log.e(TAG, "Initial event " + exEvent.causingEvent + " caused exception in "
@@ -597,10 +602,10 @@ void invokeSubscriber(Subscription subscription, Object event) throws Error {
             } else {
                 if (logSubscriberExceptions) {
                     Log.e(TAG, "Could not dispatch event: " + event.getClass() + " to subscribing class "
-                            + subscription.subscriber.getClass(), cause);
+                            + subscriber.getClass(), cause);
                 }
                 SubscriberExceptionEvent exEvent = new SubscriberExceptionEvent(this, cause, event,
-                        subscription.subscriber);
+                        subscriber);
                 post(exEvent);
             }
         } catch (IllegalAccessException e) {
diff --git a/EventBus/src/de/greenrobot/event/Subscription.java b/EventBus/src/de/greenrobot/event/Subscription.java
index 6c84c440..afd3c838 100644
--- a/EventBus/src/de/greenrobot/event/Subscription.java
+++ b/EventBus/src/de/greenrobot/event/Subscription.java
@@ -15,8 +15,11 @@
  */
 package de.greenrobot.event;
 
+import java.lang.ref.WeakReference;
+
+
 final class Subscription {
-    final Object subscriber;
+    final private WeakReference<Object> subscriber;
     final SubscriberMethod subscriberMethod;
     final int priority;
     /**
@@ -26,7 +29,7 @@
     volatile boolean active;
 
     Subscription(Object subscriber, SubscriberMethod subscriberMethod, int priority) {
-        this.subscriber = subscriber;
+        this.subscriber = new WeakReference<Object>(subscriber);
         this.subscriberMethod = subscriberMethod;
         this.priority = priority;
         active = true;
@@ -34,17 +37,35 @@
 
     @Override
     public boolean equals(Object other) {
-        if (other instanceof Subscription) {
-            Subscription otherSubscription = (Subscription) other;
-            return subscriber == otherSubscription.subscriber
-                    && subscriberMethod.equals(otherSubscription.subscriberMethod);
-        } else {
+        if (!(other instanceof Subscription)) {
+            return false;
+        }
+
+        Subscription otherSubscription = (Subscription) other;
+        Object mySubscriber = subscriber.get();
+        Object otherSubscriber = otherSubscription.subscriber.get();
+
+        if ((mySubscriber == null) || (otherSubscriber == null)) {
             return false;
         }
+
+        return mySubscriber == otherSubscriber
+            && subscriberMethod.equals(otherSubscription.subscriberMethod);
     }
 
     @Override
     public int hashCode() {
-        return subscriber.hashCode() + subscriberMethod.methodString.hashCode();
+        int hashCode = subscriberMethod.methodString.hashCode();
+        Object mySubscriber = subscriber.get();
+
+        if (mySubscriber != null) {
+            hashCode += mySubscriber.hashCode();
+        }
+
+        return hashCode;
+    }
+
+    public Object getSubscriber() {
+        return subscriber.get();
     }
-}
\ No newline at end of file
+}
