diff --git a/EventBus/src/de/greenrobot/event/EventBus.java b/EventBus/src/de/greenrobot/event/EventBus.java
index 52892e57..56a0942a 100644
--- a/EventBus/src/de/greenrobot/event/EventBus.java
+++ b/EventBus/src/de/greenrobot/event/EventBus.java
@@ -67,6 +67,7 @@ protected PostingThreadState initialValue() {
 
     private boolean subscribed;
     private boolean logSubscriberExceptions;
+    private boolean debug;
 
     /** Convenience singleton for apps using a process-wide EventBus instance. */
     public static EventBus getDefault() {
@@ -113,6 +114,7 @@ public EventBus() {
         asyncPoster = new AsyncPoster(this);
         subscriberMethodFinder = new SubscriberMethodFinder();
         logSubscriberExceptions = true;
+        debug = true;
     }
 
     /**
@@ -126,6 +128,20 @@ public void configureLogSubscriberExceptions(boolean logSubscriberExceptions) {
         this.logSubscriberExceptions = logSubscriberExceptions;
     }
 
+    /**
+     * Before registering any subscribers, use this method to configure if EventBus should log exceptions thrown by
+     * subscribers (default: true).
+     */
+    public EventBus debug(boolean debug) {
+        /*
+        if (subscribed) {
+            throw new EventBusException("This method must be called before any registration");
+        }
+        */
+        this.debug = debug;
+        return this;
+    }
+
     /**
      * Registers the given subscriber to receive events. Subscribers must call {@link #unregister(Object)} once they are
      * no longer interested in receiving events.
@@ -487,7 +503,9 @@ private void postSingleEvent(Object event, PostingThreadState postingState) thro
             }
         }
         if (!subscriptionFound) {
+            if (debug) {
             Log.d(TAG, "No subscribers registered for event " + eventClass);
+            }
             if (eventClass != NoSubscriberEvent.class && eventClass != SubscriberExceptionEvent.class) {
                 post(new NoSubscriberEvent(this, event));
             }
