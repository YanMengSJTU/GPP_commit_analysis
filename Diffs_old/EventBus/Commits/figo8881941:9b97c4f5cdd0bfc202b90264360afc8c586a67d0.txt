diff --git a/EventBus/src/org/greenrobot/eventbus/EventBus.java b/EventBus/src/org/greenrobot/eventbus/EventBus.java
index 231b0815..226433a4 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBus.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java
@@ -448,12 +448,21 @@ private boolean postSingleEventForEventType(Object event, PostingThreadState pos
         return false;
     }
 
+    /**
+     * 把事件发布给订阅者的方法
+     * @param subscription
+     * @param event
+     * @param isMainThread
+     */
     private void postToSubscription(Subscription subscription, Object event, boolean isMainThread) {
         switch (subscription.subscriberMethod.threadMode) {
             case POSTING:
+                //在哪个线程发布事件，就在哪个线程调用订阅方法
                 invokeSubscriber(subscription, event);
                 break;
             case MAIN:
+                //如果当前为主线程，则直接调用订阅方法
+                //如果不是，则使用Poster同步回主线程调用订阅方法
                 if (isMainThread) {
                     invokeSubscriber(subscription, event);
                 } else {
@@ -461,6 +470,8 @@ private void postToSubscription(Subscription subscription, Object event, boolean
                 }
                 break;
             case MAIN_ORDERED:
+                //无论在什么线程，都使用Poster同步回主线程按顺序调用订阅方法
+                //该Mode，保证事件在主线程按顺序发布给订阅者
                 if (mainThreadPoster != null) {
                     mainThreadPoster.enqueue(subscription, event);
                 } else {
@@ -469,6 +480,8 @@ private void postToSubscription(Subscription subscription, Object event, boolean
                 }
                 break;
             case BACKGROUND:
+                //如果当前线程是主线程，则使用Poster，在后台异步调用订阅方法
+                //如果不是，则直接调用订阅方法
                 if (isMainThread) {
                     backgroundPoster.enqueue(subscription, event);
                 } else {
@@ -476,6 +489,7 @@ private void postToSubscription(Subscription subscription, Object event, boolean
                 }
                 break;
             case ASYNC:
+                //无论在什么线程，都使用Poster异步调用订阅方法
                 asyncPoster.enqueue(subscription, event);
                 break;
             default:
@@ -526,6 +540,11 @@ void invokeSubscriber(PendingPost pendingPost) {
         }
     }
 
+    /**
+     * 通过反射调用订阅者订阅方法的方法
+     * @param subscription
+     * @param event
+     */
     void invokeSubscriber(Subscription subscription, Object event) {
         try {
             subscription.subscriberMethod.method.invoke(subscription.subscriber, event);
