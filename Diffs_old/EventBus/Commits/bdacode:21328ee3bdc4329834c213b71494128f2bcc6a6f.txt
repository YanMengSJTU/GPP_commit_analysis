diff --git a/EventBus/META-INF/MANIFEST.MF b/EventBus/META-INF/MANIFEST.MF
new file mode 100644
index 00000000..58630c02
--- /dev/null
+++ b/EventBus/META-INF/MANIFEST.MF
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+
diff --git a/EventBus/src/de/greenrobot/event/DeferredSubscription.java b/EventBus/src/de/greenrobot/event/DeferredSubscription.java
new file mode 100644
index 00000000..cdd9798e
--- /dev/null
+++ b/EventBus/src/de/greenrobot/event/DeferredSubscription.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package de.greenrobot.event;
+
+final class DeferredSubscription {
+    final Class<?> subscriberType;
+    final SubscriberMethod subscriberMethod;
+    final int priority;
+    /**
+     * Becomes false as soon as {@link de.greenrobot.event.EventBus#unregister(Object)} is called, which is checked by queued event delivery
+     * {@link de.greenrobot.event.EventBus#invokeSubscriber(de.greenrobot.event.PendingPost)} to prevent race conditions.
+     */
+    volatile boolean active;
+
+    DeferredSubscription(Class<?> subscriberType, SubscriberMethod subscriberMethod, int priority) {
+        this.subscriberType = subscriberType;
+        this.subscriberMethod = subscriberMethod;
+        this.priority = priority;
+        active = true;
+    }
+
+    @Override
+    public boolean equals(Object other) {
+        if (other instanceof DeferredSubscription) {
+            DeferredSubscription otherSubscription = (DeferredSubscription) other;
+            return subscriberType == otherSubscription.subscriberType
+                    && subscriberMethod.equals(otherSubscription.subscriberMethod);
+        } else {
+            return false;
+        }
+    }
+
+    @Override
+    public int hashCode() {
+        return subscriberType.hashCode() + subscriberMethod.methodString.hashCode();
+    }
+}
\ No newline at end of file
diff --git a/EventBus/src/de/greenrobot/event/EventBus.java b/EventBus/src/de/greenrobot/event/EventBus.java
index 20ccc454..8f4c9084 100644
--- a/EventBus/src/de/greenrobot/event/EventBus.java
+++ b/EventBus/src/de/greenrobot/event/EventBus.java
@@ -19,10 +19,7 @@
 import android.util.Log;
 
 import java.lang.reflect.InvocationTargetException;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.ExecutorService;
@@ -50,9 +47,14 @@
     private static final Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<Class<?>, List<Class<?>>>();
 
     private final Map<Class<?>, CopyOnWriteArrayList<Subscription>> subscriptionsByEventType;
+    private final Map<Class<?>, CopyOnWriteArrayList<DeferredSubscription>> deferredSubscriptionsByEventType;
+
     private final Map<Object, List<Class<?>>> typesBySubscriber;
+    private final Map<Class<?>, List<Class<?>>> typesByDeferredSubscriberType;
+
     private final Map<Class<?>, Object> stickyEvents;
-    private final ConcurrentHashMap<Class<?>, ConcurrentHashMap<Class<?>, String>> stickyEventsReadMarks;
+    private final Map<Class<?>, List<Object>> deferredSubscriptionEventsQueues;
+    private final Map<Object, Map<Class<?>, String>> deferredSubscriptionReadMarks;
 
     private final ThreadLocal<PostingThreadState> currentPostingThreadState = new ThreadLocal<PostingThreadState>() {
         @Override
@@ -114,10 +116,16 @@ public static void clearSkipMethodNameVerifications() {
      * central bus, consider {@link #getDefault()}.
      */
     public EventBus() {
-        subscriptionsByEventType = new HashMap<Class<?>, CopyOnWriteArrayList<Subscription>>();
-        typesBySubscriber = new HashMap<Object, List<Class<?>>>();
+        subscriptionsByEventType = new ConcurrentHashMap<Class<?>, CopyOnWriteArrayList<Subscription>>();
+        deferredSubscriptionsByEventType = new ConcurrentHashMap<Class<?>, CopyOnWriteArrayList<DeferredSubscription>>();
+
+        typesBySubscriber = new ConcurrentHashMap<Object, List<Class<?>>>();
+        typesByDeferredSubscriberType = new ConcurrentHashMap<Class<?>, List<Class<?>>>();
+
         stickyEvents = new ConcurrentHashMap<Class<?>, Object>();
-        stickyEventsReadMarks = new ConcurrentHashMap<Class<?>, ConcurrentHashMap<Class<?>, String>>();
+        deferredSubscriptionEventsQueues = new ConcurrentHashMap<Class<?>, List<Object>>();
+        deferredSubscriptionReadMarks = new ConcurrentHashMap<Object, Map<Class<?>, String>>();
+
         mainThreadPoster = new HandlerPoster(this, Looper.getMainLooper(), 10);
         backgroundPoster = new BackgroundPoster(this);
         asyncPoster = new AsyncPoster(this);
@@ -232,6 +240,14 @@ public void registerSticky(Object subscriber, String methodName, Class<?> eventT
         register(subscriber, methodName, true, eventType, moreEventTypes);
     }
 
+    /**
+     *
+     * @param subscriberType
+     */
+    public void subscribeDeferred(Class<?> subscriberType) {
+
+    }
+
     private synchronized void register(Object subscriber, String methodName, boolean sticky, Class<?> eventType,
                                        Class<?>... moreEventTypes) {
         Class<?> subscriberClass = subscriber.getClass();
