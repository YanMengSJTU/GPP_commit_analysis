diff --git a/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java
index daa51c35..8a46f93a 100644
--- a/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java
+++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java
@@ -27,6 +27,9 @@
     private final PendingPostQueue queue;
     private final EventBus eventBus;
 
+    /**
+     * 这个变量为了让线程池只能单线程执行
+     */
     private volatile boolean executorRunning;
 
     BackgroundPoster(EventBus eventBus) {
@@ -38,6 +41,7 @@
     public void enqueue(Subscription subscription, Object event) {
         //获取一个消息，并将任务重新初始化
         PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);
+        //加synchronized保证单线程执行
         synchronized (this) {
             //任务入队
             queue.enqueue(pendingPost);
@@ -56,9 +60,10 @@ public void run() {
             try {
                 //一直死循环执行
                 while (true) {
-                    //获取下一个消息
+                    //获取下一个消息，并设定1秒阻塞
                     PendingPost pendingPost = queue.poll(1000);
                     if (pendingPost == null) {
+                        //加synchronized保证单线程执行，这里也加是因为要保证executorRunning的值不出错
                         synchronized (this) {
                             //同样要双重检查
                             pendingPost = queue.poll();
diff --git a/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java b/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java
index 4beaff36..0f8ea0b3 100644
--- a/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java
+++ b/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java
@@ -50,7 +50,7 @@ protected HandlerPoster(EventBus eventBus, Looper looper, int maxMillisInsideHan
      */
     @Override
     public void enqueue(Subscription subscription, Object event) {
-        //获取一个等待发送的消息类对象
+        //获取一个等待发送的消息
         PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);
         synchronized (this) {
             //消息入队
@@ -71,7 +71,7 @@ public void handleMessage(Message msg) {
         boolean rescheduled = false;
         try {
             long started = SystemClock.uptimeMillis();
-            //死循环，从队列中获取下一个事件
+            //死循环，从队列中获取下一个消息
             while (true) {
                 PendingPost pendingPost = queue.poll();
                 if (pendingPost == null) {
@@ -88,7 +88,7 @@ public void handleMessage(Message msg) {
                 //反射调用订阅者的订阅方法，这里在Handler中回调，所以在主线程
                 eventBus.invokeSubscriber(pendingPost);
                 long timeInMethod = SystemClock.uptimeMillis() - started;
-                //继续循环发送
+                //继续循环发送消息
                 if (timeInMethod >= maxMillisInsideHandleMessage) {
                     if (!sendMessage(obtainMessage())) {
                         throw new EventBusException("Could not send handler message");
diff --git a/EventBus/src/org/greenrobot/eventbus/PendingPost.java b/EventBus/src/org/greenrobot/eventbus/PendingPost.java
index baf738ad..01b29919 100644
--- a/EventBus/src/org/greenrobot/eventbus/PendingPost.java
+++ b/EventBus/src/org/greenrobot/eventbus/PendingPost.java
@@ -19,11 +19,11 @@
 import java.util.List;
 
 /**
- * 封装等待发送事件Api的类，类似Handler的Message对象，内部有对象池和事件
+ * 封装等待发送事件Api的类，相当于一个消息，类似Handler的Message对象，内部有对象池和事件
  */
 final class PendingPost {
     /**
-     *
+     * 队列
      */
     private final static List<PendingPost> pendingPostPool = new ArrayList<PendingPost>();
     /**
@@ -45,7 +45,7 @@ private PendingPost(Object event, Subscription subscription) {
     }
 
     /**
-     * 从池子中获取一个事件发送类对象
+     * 从池子中获取一个消息
      *
      * @param subscription 订阅信息
      * @param event        事件
@@ -68,7 +68,7 @@ static PendingPost obtainPendingPost(Subscription subscription, Object event) {
     /**
      * 回收
      *
-     * @param pendingPost 事件发送类
+     * @param pendingPost 包裹了订阅者信息的消息
      */
     static void releasePendingPost(PendingPost pendingPost) {
         //重置字段
diff --git a/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java b/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java
index e6cad4a8..15e0c949 100644
--- a/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java
+++ b/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java
@@ -17,7 +17,7 @@
 package org.greenrobot.eventbus;
 
 /**
- * 发送事件队列，是一个链表
+ * 发送事件队列，维护一个消息对象链表
  */
 final class PendingPostQueue {
     /**
@@ -32,7 +32,7 @@
     /**
      * 入队
      *
-     * @param pendingPost 下一个事件对象
+     * @param pendingPost 下一个消息
      */
     synchronized void enqueue(PendingPost pendingPost) {
         if (pendingPost == null) {
@@ -52,7 +52,7 @@ synchronized void enqueue(PendingPost pendingPost) {
     }
 
     /**
-     * 获取下一个事件对象
+     * 获取下一个消息
      */
     synchronized PendingPost poll() {
         PendingPost pendingPost = head;
