diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
index 7f619a7e..ca64396d 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
@@ -160,10 +160,15 @@ private void findUsingReflectionInSingleClass(FindState findState) {
             int modifiers = method.getModifiers();
             if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {
                 Class<?>[] parameterTypes = method.getParameterTypes();
-                if (parameterTypes.length == 1) {
+                if (parameterTypes.length <= 1) {
                     Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);
                     if (subscribeAnnotation != null) {
-                        Class<?> eventType = parameterTypes[0];
+                        Class<?> eventType = parameterTypes.length== 0 ? null : parameterTypes[0];
+                        if(eventType == null&&subscribeAnnotation.tag().equals("")){
+                            String methodName = method.getDeclaringClass().getName() + "." + method.getName();
+                            throw new EventBusException("@Subscribe method " + methodName +
+                                    "must have exactly at lest 1 parameter or not empty tag ");
+                        }
                         if (findState.checkAdd(method, eventType)) {
                             ThreadMode threadMode = subscribeAnnotation.threadMode();
                             findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode,
@@ -218,6 +223,7 @@ void recycle() {
         boolean checkAdd(Method method, Class<?> eventType) {
             // 2 level check: 1st level with event type only (fast), 2nd level with complete signature when required.
             // Usually a subscriber doesn't have methods listening to the same event type.
+            if(eventType == null) return true;
             Object existing = anyMethodByEventType.put(eventType, method);
             if (existing == null) {
                 return true;
