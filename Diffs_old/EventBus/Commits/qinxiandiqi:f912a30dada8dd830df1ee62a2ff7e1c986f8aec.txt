diff --git a/.travis.yml b/.travis.yml
deleted file mode 100644
index e086ce10..00000000
--- a/.travis.yml
+++ /dev/null
@@ -1,24 +0,0 @@
-language: android
-jdk:
-  - openjdk6
-  - oraclejdk7
-
-# http://docs.travis-ci.com/user/languages/android/
-android:
-  components:
-    - build-tools-21.1.2
-    - android-10
-
-before_script:
-  - chmod +x gradlew
-#  - echo no | android create avd --force -n test -t android-10 --abi armeabi
-#  - emulator -avd test -no-skin -no-audio -no-window &
-#  - android-wait-for-emulator
-#  - adb shell input keyevent 82 &
-
-# Currently connectedCheck fails, so don't run unit test on Emulator for now. Issue:
-# com.android.builder.testing.ConnectedDevice > hasTests[test(AVD) - 2.3.3] FAILED
-# No tests found.
-
-script:
-    - TERM=dumb ./gradlew check
diff --git a/EventBus/.classpath b/EventBus/.classpath
deleted file mode 100644
index 7bc01d9a..00000000
--- a/EventBus/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/EventBus/.project b/EventBus/.project
deleted file mode 100644
index 3321bf38..00000000
--- a/EventBus/.project
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>EventBus</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/EventBus/AndroidManifest.xml b/EventBus/AndroidManifest.xml
deleted file mode 100644
index 2ad17bbd..00000000
--- a/EventBus/AndroidManifest.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.event"
-    android:versionCode="1"
-    android:versionName="1.0">
-
-    <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17" />
-
-    <application android:label="EventBus">
-
-    </application>
-
-</manifest>
diff --git a/EventBus/build.gradle b/EventBus/build.gradle
index b377bf64..73b2bf37 100644
--- a/EventBus/build.gradle
+++ b/EventBus/build.gradle
@@ -1,136 +1,24 @@
-apply plugin: 'java'
-apply plugin: 'maven'
-apply plugin: 'signing'
+apply plugin: 'com.android.library'
 
-group = 'de.greenrobot'
-version = '2.4.1-SNAPSHOT'
-sourceCompatibility = 1.6
+android {
+    compileSdkVersion 23
+    buildToolsVersion "23.0.1"
 
-def isSnapshot = version.endsWith('-SNAPSHOT')
-def sonatypeRepositoryUrl
-if(isSnapshot) {
-	sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
-} else {
-	sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
-}
-
-repositories {
-    mavenCentral()
-}
-
-// Still unsupported, see http://issues.gradle.org/browse/GRADLE-784
-// Like this, it won't appear at all in the POM
-configurations {
-    provided
-    deployerJars
-}
-
-dependencies {
-    provided 'com.google.android:android:4.1.1.4'
-    provided 'com.google.android:android-test:4.1.1.4'
-    provided 'com.google.android:annotations:4.1.1.4'
-    provided 'com.google.android:support-v4:r7'
-    // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4'
-    deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
-}
+    defaultConfig {
+        minSdkVersion 4
+        targetSdkVersion 17
+        testApplicationId "de.greenrobot.event.test"
+        testInstrumentationRunner "android.test.InstrumentationTestRunner"
+    }
 
-sourceSets {
-    main {
-        compileClasspath += configurations.provided
-        java {
-            srcDir 'src'
-            // exclude 'de/greenrobot/event/util/**'
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
         }
     }
 }
 
-javadoc {
-    classpath += configurations.provided
-    title = "EventBus ${version} API"
-	options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2012-2014 <a href="http://greenrobot.de/">greenrobot.de</a>. All Rights Reserved.</i>'
-}
-
-task javadocJar(type: Jar, dependsOn: javadoc) {
-    classifier = 'javadoc'
-    from 'build/docs/javadoc'
-}
-
-task sourcesJar(type: Jar) {
-    from sourceSets.main.allSource
-    classifier = 'sources'
-}
-
-artifacts {
-    archives jar
-    archives javadocJar
-    archives sourcesJar
-}
-
-signing {
-    if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&
-    project.hasProperty('signing.secretKeyRingFile')) {
-        sign configurations.archives
-    } else {
-        println "Signing information missing/incomplete for ${project.name}"
-    }
+dependencies {
+    compile 'com.android.support:support-v4:23.0.1'
 }
-
-uploadArchives {
-    repositories {
-        mavenDeployer {
-            if(project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername') 
-                && project.hasProperty('preferedPassword')) {
-                configuration = configurations.deployerJars
-                repository(url: preferedRepo) {
-                    authentication(userName: preferedUsername, password: preferedPassword)
-                }
-            } else if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
-                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
-                repository(url: sonatypeRepositoryUrl) {
-                    authentication(userName: sonatypeUsername, password: sonatypePassword)
-                }
-            } else {
-                println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}"
-            }
-
-            pom.artifactId = 'eventbus'
-            pom.project {
-               name 'EventBus'
-               packaging 'jar'
-               description 'EventBus is a publish/subscribe event bus optimized for Android .'
-               url 'https://github.com/greenrobot/EventBus'
-
-               scm {
-                   url 'https://github.com/greenrobot/EventBus'
-                   connection 'scm:git@github.com:greenrobot/EventBus.git'
-                   developerConnection 'scm:git@github.com:greenrobot/EventBus.git'
-               }
-
-               licenses {
-                   license {
-                       name 'The Apache Software License, Version 2.0'
-                       url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
-                       distribution 'repo'
-                   }
-               }
-
-               developers {
-                   developer {
-                       id 'greenrobot'
-                       name 'greenrobot'
-                   }
-               }
-               
-               issueManagement {
-                   system 'GitHub Issues'
-                   url 'https://github.com/greenrobot/EventBus/issues'
-               }
-
-               organization {
-                   name 'greenrobot'
-                   url 'http://greenrobot.de'
-               }
-           }
-        }
-    }
-}
\ No newline at end of file
diff --git a/EventBus/libs/android-support-v4.jar b/EventBus/libs/android-support-v4.jar
deleted file mode 100644
index 6080877d..00000000
Binary files a/EventBus/libs/android-support-v4.jar and /dev/null differ
diff --git a/EventBus/mybuild.xml b/EventBus/mybuild.xml
deleted file mode 100644
index 0ab1cf4b..00000000
--- a/EventBus/mybuild.xml
+++ /dev/null
@@ -1,13 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="greenrobot EventBus" default="build-jar">
-
-	<target name="build-jar" description="Depends on Eclipse to have everything compiled into bin/">
-		<mkdir dir="release" />
-		<jar jarfile="release/eventbus.jar">
-			<fileset dir="bin/classes">
-				<include name="de/greenrobot/**" />
-			</fileset>
-		</jar>
-	</target>
-
-</project>
diff --git a/EventBus/project.properties b/EventBus/project.properties
deleted file mode 100644
index 484dab07..00000000
--- a/EventBus/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-17
-android.library=true
diff --git a/EventBus/res/values/strings.xml b/EventBus/res/values/strings.xml
deleted file mode 100644
index 85420055..00000000
--- a/EventBus/res/values/strings.xml
+++ /dev/null
@@ -1,2 +0,0 @@
-<resources>
-</resources>
diff --git a/EventBus/settings.gradle b/EventBus/settings.gradle
deleted file mode 100644
index 4d211e40..00000000
--- a/EventBus/settings.gradle
+++ /dev/null
@@ -1 +0,0 @@
-rootProject.name = 'eventbus'
\ No newline at end of file
diff --git a/EventBusTest/src/de/greenrobot/event/test/AbstractEventBusTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/AbstractEventBusTest.java
similarity index 99%
rename from EventBusTest/src/de/greenrobot/event/test/AbstractEventBusTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/AbstractEventBusTest.java
index 2d997620..b4da19ba 100644
--- a/EventBusTest/src/de/greenrobot/event/test/AbstractEventBusTest.java
+++ b/EventBus/src/androidTest/java/de/greenrobot/event/test/AbstractEventBusTest.java
@@ -15,17 +15,19 @@
  */
 package de.greenrobot.event.test;
 
+import android.annotation.SuppressLint;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+
+import junit.framework.TestCase;
+
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import junit.framework.TestCase;
-import android.annotation.SuppressLint;
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Message;
 import de.greenrobot.event.EventBus;
 
 /**
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusBackgroundThreadTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusBackgroundThreadTest.java
similarity index 100%
rename from EventBusTest/src/de/greenrobot/event/test/EventBusBackgroundThreadTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusBackgroundThreadTest.java
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusBasicTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusBasicTest.java
similarity index 99%
rename from EventBusTest/src/de/greenrobot/event/test/EventBusBasicTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusBasicTest.java
index c34feb38..758f7d6a 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusBasicTest.java
+++ b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusBasicTest.java
@@ -17,11 +17,13 @@
 
 import android.app.Activity;
 import android.util.Log;
-import de.greenrobot.event.EventBus;
+
 import junit.framework.TestCase;
 
 import java.lang.ref.WeakReference;
 
+import de.greenrobot.event.EventBus;
+
 /**
  * @author Markus Junginger, greenrobot
  */
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusBuilderTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusBuilderTest.java
similarity index 100%
rename from EventBusTest/src/de/greenrobot/event/test/EventBusBuilderTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusBuilderTest.java
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusCancelEventDeliveryTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusCancelEventDeliveryTest.java
similarity index 99%
rename from EventBusTest/src/de/greenrobot/event/test/EventBusCancelEventDeliveryTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusCancelEventDeliveryTest.java
index 027d74f9..8a9eec86 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusCancelEventDeliveryTest.java
+++ b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusCancelEventDeliveryTest.java
@@ -15,9 +15,10 @@
  */
 package de.greenrobot.event.test;
 
+import android.test.UiThreadTest;
+
 import java.util.concurrent.CountDownLatch;
 
-import android.test.UiThreadTest;
 import de.greenrobot.event.EventBusException;
 
 /**
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusInheritanceDisabledTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusInheritanceDisabledTest.java
similarity index 98%
rename from EventBusTest/src/de/greenrobot/event/test/EventBusInheritanceDisabledTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusInheritanceDisabledTest.java
index 43aaf467..391972cb 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusInheritanceDisabledTest.java
+++ b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusInheritanceDisabledTest.java
@@ -15,9 +15,10 @@
  */
 package de.greenrobot.event.test;
 
-import de.greenrobot.event.EventBus;
 import junit.framework.TestCase;
 
+import de.greenrobot.event.EventBus;
+
 /**
  * @author Markus Junginger, greenrobot
  */
@@ -153,7 +154,7 @@ public void onEvent(MyEventInterfaceExtended event) {
     static class SubscriberExtended extends EventBusInheritanceDisabledTest {
         private int countMyEventOverwritten;
 
-        public void onEvent(MyEvent event) {
+        public void onEvent(EventBusInheritanceDisabledTest.MyEvent event) {
             countMyEventOverwritten++;
         }
     }
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusInheritanceTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusInheritanceTest.java
similarity index 98%
rename from EventBusTest/src/de/greenrobot/event/test/EventBusInheritanceTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusInheritanceTest.java
index 10384951..bc7b8767 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusInheritanceTest.java
+++ b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusInheritanceTest.java
@@ -16,6 +16,7 @@
 package de.greenrobot.event.test;
 
 import junit.framework.TestCase;
+
 import de.greenrobot.event.EventBus;
 
 /**
@@ -153,7 +154,7 @@ public void onEvent(MyEventInterfaceExtended event) {
     static class SubscriberExtended extends EventBusInheritanceTest {
         private int countMyEventOverwritten;
 
-        public void onEvent(MyEvent event) {
+        public void onEvent(EventBusInheritanceTest.MyEvent event) {
             countMyEventOverwritten++;
         }
     }
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusMainThreadRacingTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusMainThreadRacingTest.java
similarity index 100%
rename from EventBusTest/src/de/greenrobot/event/test/EventBusMainThreadRacingTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusMainThreadRacingTest.java
index 0b3ac3a8..27756ee8 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusMainThreadRacingTest.java
+++ b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusMainThreadRacingTest.java
@@ -15,12 +15,12 @@
  */
 package de.greenrobot.event.test;
 
-import java.util.Random;
-import java.util.concurrent.CountDownLatch;
-
 import android.os.Handler;
 import android.os.Looper;
 
+import java.util.Random;
+import java.util.concurrent.CountDownLatch;
+
 /**
  * @author Markus Junginger, greenrobot
  */
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusMainThreadTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusMainThreadTest.java
similarity index 100%
rename from EventBusTest/src/de/greenrobot/event/test/EventBusMainThreadTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusMainThreadTest.java
index 41b6302b..95d7b9a0 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusMainThreadTest.java
+++ b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusMainThreadTest.java
@@ -15,11 +15,11 @@
  */
 package de.greenrobot.event.test;
 
+import android.os.Looper;
+
 import java.util.ArrayList;
 import java.util.List;
 
-import android.os.Looper;
-
 /**
  * @author Markus Junginger, greenrobot
  */
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusMethodModifiersTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusMethodModifiersTest.java
similarity index 99%
rename from EventBusTest/src/de/greenrobot/event/test/EventBusMethodModifiersTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusMethodModifiersTest.java
index 6d664b9c..c122f743 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusMethodModifiersTest.java
+++ b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusMethodModifiersTest.java
@@ -16,6 +16,7 @@
 package de.greenrobot.event.test;
 
 import android.os.Looper;
+
 import de.greenrobot.event.EventBus;
 import de.greenrobot.event.EventBusException;
 
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusMultithreadedTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusMultithreadedTest.java
similarity index 99%
rename from EventBusTest/src/de/greenrobot/event/test/EventBusMultithreadedTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusMultithreadedTest.java
index be68fd12..61d0427b 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusMultithreadedTest.java
+++ b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusMultithreadedTest.java
@@ -15,13 +15,14 @@
  */
 package de.greenrobot.event.test;
 
+import android.os.Looper;
+import android.util.Log;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import android.os.Looper;
-import android.util.Log;
 import de.greenrobot.event.EventBus;
 
 /**
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusNoSubscriberEventTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusNoSubscriberEventTest.java
similarity index 100%
rename from EventBusTest/src/de/greenrobot/event/test/EventBusNoSubscriberEventTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusNoSubscriberEventTest.java
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusOrderedSubscriptionsTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusOrderedSubscriptionsTest.java
similarity index 99%
rename from EventBusTest/src/de/greenrobot/event/test/EventBusOrderedSubscriptionsTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusOrderedSubscriptionsTest.java
index 0cb794ac..c6983776 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusOrderedSubscriptionsTest.java
+++ b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusOrderedSubscriptionsTest.java
@@ -15,11 +15,12 @@
  */
 package de.greenrobot.event.test;
 
+import android.util.Log;
+
 import java.util.ArrayList;
 import java.util.List;
 
 import de.greenrobot.event.EventBus;
-import android.util.Log;
 
 /**
  * @author Markus Junginger, greenrobot
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusRegistrationRacingTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusRegistrationRacingTest.java
similarity index 100%
rename from EventBusTest/src/de/greenrobot/event/test/EventBusRegistrationRacingTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusRegistrationRacingTest.java
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusStickyEventTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusStickyEventTest.java
similarity index 100%
rename from EventBusTest/src/de/greenrobot/event/test/EventBusStickyEventTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusStickyEventTest.java
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusSubscriberExceptionTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusSubscriberExceptionTest.java
similarity index 100%
rename from EventBusTest/src/de/greenrobot/event/test/EventBusSubscriberExceptionTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusSubscriberExceptionTest.java
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusSubscriberLegalTest.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusSubscriberLegalTest.java
similarity index 100%
rename from EventBusTest/src/de/greenrobot/event/test/EventBusSubscriberLegalTest.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/EventBusSubscriberLegalTest.java
diff --git a/EventBusTest/src/de/greenrobot/event/test/IntTestEvent.java b/EventBus/src/androidTest/java/de/greenrobot/event/test/IntTestEvent.java
similarity index 100%
rename from EventBusTest/src/de/greenrobot/event/test/IntTestEvent.java
rename to EventBus/src/androidTest/java/de/greenrobot/event/test/IntTestEvent.java
diff --git a/EventBus/src/de/greenrobot/event/AsyncPoster.java b/EventBus/src/de/greenrobot/event/AsyncPoster.java
deleted file mode 100644
index 936527b7..00000000
--- a/EventBus/src/de/greenrobot/event/AsyncPoster.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.event;
-
-
-/**
- * Posts events in background.
- * 
- * @author Markus
- */
-class AsyncPoster implements Runnable {
-
-    private final PendingPostQueue queue;
-    private final EventBus eventBus;
-
-    AsyncPoster(EventBus eventBus) {
-        this.eventBus = eventBus;
-        queue = new PendingPostQueue();
-    }
-
-    public void enqueue(Subscription subscription, Object event) {
-        PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);
-        queue.enqueue(pendingPost);
-        eventBus.getExecutorService().execute(this);
-    }
-
-    @Override
-    public void run() {
-        PendingPost pendingPost = queue.poll();
-        if(pendingPost == null) {
-            throw new IllegalStateException("No pending post available");
-        }
-        eventBus.invokeSubscriber(pendingPost);
-    }
-
-}
diff --git a/EventBus/src/de/greenrobot/event/BackgroundPoster.java b/EventBus/src/de/greenrobot/event/BackgroundPoster.java
deleted file mode 100644
index 00e9ee54..00000000
--- a/EventBus/src/de/greenrobot/event/BackgroundPoster.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.event;
-
-import android.util.Log;
-
-/**
- * Posts events in background.
- * 
- * @author Markus
- */
-final class BackgroundPoster implements Runnable {
-
-    private final PendingPostQueue queue;
-    private final EventBus eventBus;
-
-    private volatile boolean executorRunning;
-
-    BackgroundPoster(EventBus eventBus) {
-        this.eventBus = eventBus;
-        queue = new PendingPostQueue();
-    }
-
-    public void enqueue(Subscription subscription, Object event) {
-        PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);
-        synchronized (this) {
-            queue.enqueue(pendingPost);
-            if (!executorRunning) {
-                executorRunning = true;
-                eventBus.getExecutorService().execute(this);
-            }
-        }
-    }
-
-    @Override
-    public void run() {
-        try {
-            try {
-                while (true) {
-                    PendingPost pendingPost = queue.poll(1000);
-                    if (pendingPost == null) {
-                        synchronized (this) {
-                            // Check again, this time in synchronized
-                            pendingPost = queue.poll();
-                            if (pendingPost == null) {
-                                executorRunning = false;
-                                return;
-                            }
-                        }
-                    }
-                    eventBus.invokeSubscriber(pendingPost);
-                }
-            } catch (InterruptedException e) {
-                Log.w("Event", Thread.currentThread().getName() + " was interruppted", e);
-            }
-        } finally {
-            executorRunning = false;
-        }
-    }
-
-}
diff --git a/EventBus/src/de/greenrobot/event/EventBus.java b/EventBus/src/de/greenrobot/event/EventBus.java
deleted file mode 100644
index 95863ade..00000000
--- a/EventBus/src/de/greenrobot/event/EventBus.java
+++ /dev/null
@@ -1,568 +0,0 @@
-/*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.event;
-
-import android.os.Looper;
-import android.util.Log;
-
-import java.lang.reflect.InvocationTargetException;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.CopyOnWriteArrayList;
-import java.util.concurrent.ExecutorService;
-
-/**
- * EventBus is a central publish/subscribe event system for Android. Events are posted ({@link #post(Object)}) to the
- * bus, which delivers it to subscribers that have a matching handler method for the event type. To receive events,
- * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered,
- * subscribers receive events until {@link #unregister(Object)} is called. By convention, event handling methods must
- * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event).
- *
- * @author Markus Junginger, greenrobot
- */
-public class EventBus {
-
-    /** Log tag, apps may override it. */
-    public static String TAG = "Event";
-
-    static volatile EventBus defaultInstance;
-
-    private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder();
-    private static final Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<Class<?>, List<Class<?>>>();
-
-    private final Map<Class<?>, CopyOnWriteArrayList<Subscription>> subscriptionsByEventType;
-    private final Map<Object, List<Class<?>>> typesBySubscriber;
-    private final Map<Class<?>, Object> stickyEvents;
-
-    private final ThreadLocal<PostingThreadState> currentPostingThreadState = new ThreadLocal<PostingThreadState>() {
-        @Override
-        protected PostingThreadState initialValue() {
-            return new PostingThreadState();
-        }
-    };
-
-
-    private final HandlerPoster mainThreadPoster;
-    private final BackgroundPoster backgroundPoster;
-    private final AsyncPoster asyncPoster;
-    private final SubscriberMethodFinder subscriberMethodFinder;
-    private final ExecutorService executorService;
-
-    private final boolean throwSubscriberException;
-    private final boolean logSubscriberExceptions;
-    private final boolean logNoSubscriberMessages;
-    private final boolean sendSubscriberExceptionEvent;
-    private final boolean sendNoSubscriberEvent;
-    private final boolean eventInheritance;
-
-    /** Convenience singleton for apps using a process-wide EventBus instance. */
-    public static EventBus getDefault() {
-        if (defaultInstance == null) {
-            synchronized (EventBus.class) {
-                if (defaultInstance == null) {
-                    defaultInstance = new EventBus();
-                }
-            }
-        }
-        return defaultInstance;
-    }
-
-    public static EventBusBuilder builder() {
-        return new EventBusBuilder();
-    }
-
-    /** For unit test primarily. */
-    public static void clearCaches() {
-        SubscriberMethodFinder.clearCaches();
-        eventTypesCache.clear();
-    }
-
-    /**
-     * Creates a new EventBus instance; each instance is a separate scope in which events are delivered. To use a
-     * central bus, consider {@link #getDefault()}.
-     */
-    public EventBus() {
-        this(DEFAULT_BUILDER);
-    }
-
-    EventBus(EventBusBuilder builder) {
-        subscriptionsByEventType = new HashMap<Class<?>, CopyOnWriteArrayList<Subscription>>();
-        typesBySubscriber = new HashMap<Object, List<Class<?>>>();
-        stickyEvents = new ConcurrentHashMap<Class<?>, Object>();
-        mainThreadPoster = new HandlerPoster(this, Looper.getMainLooper(), 10);
-        backgroundPoster = new BackgroundPoster(this);
-        asyncPoster = new AsyncPoster(this);
-        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);
-        logSubscriberExceptions = builder.logSubscriberExceptions;
-        logNoSubscriberMessages = builder.logNoSubscriberMessages;
-        sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;
-        sendNoSubscriberEvent = builder.sendNoSubscriberEvent;
-        throwSubscriberException = builder.throwSubscriberException;
-        eventInheritance = builder.eventInheritance;
-        executorService = builder.executorService;
-    }
-
-
-    /**
-     * Registers the given subscriber to receive events. Subscribers must call {@link #unregister(Object)} once they
-     * are no longer interested in receiving events.
-     * <p/>
-     * Subscribers have event handling methods that are identified by their name, typically called "onEvent". Event
-     * handling methods must have exactly one parameter, the event. If the event handling method is to be called in a
-     * specific thread, a modifier is appended to the method name. Valid modifiers match one of the {@link ThreadMode}
-     * enums. For example, if a method is to be called in the UI/main thread by EventBus, it would be called
-     * "onEventMainThread".
-     */
-    public void register(Object subscriber) {
-        register(subscriber, false, 0);
-    }
-
-    /**
-     * Like {@link #register(Object)} with an additional subscriber priority to influence the order of event delivery.
-     * Within the same delivery thread ({@link ThreadMode}), higher priority subscribers will receive events before
-     * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of
-     * delivery among subscribers with different {@link ThreadMode}s!
-     */
-    public void register(Object subscriber, int priority) {
-        register(subscriber, false, priority);
-    }
-
-    /**
-     * Like {@link #register(Object)}, but also triggers delivery of the most recent sticky event (posted with
-     * {@link #postSticky(Object)}) to the given subscriber.
-     */
-    public void registerSticky(Object subscriber) {
-        register(subscriber, true, 0);
-    }
-
-    /**
-     * Like {@link #register(Object, int)}, but also triggers delivery of the most recent sticky event (posted with
-     * {@link #postSticky(Object)}) to the given subscriber.
-     */
-    public void registerSticky(Object subscriber, int priority) {
-        register(subscriber, true, priority);
-    }
-
-    private synchronized void register(Object subscriber, boolean sticky, int priority) {
-        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());
-        for (SubscriberMethod subscriberMethod : subscriberMethods) {
-            subscribe(subscriber, subscriberMethod, sticky, priority);
-        }
-    }
-
-    // Must be called in synchronized block
-    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boolean sticky, int priority) {
-        Class<?> eventType = subscriberMethod.eventType;
-        CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);
-        Subscription newSubscription = new Subscription(subscriber, subscriberMethod, priority);
-        if (subscriptions == null) {
-            subscriptions = new CopyOnWriteArrayList<Subscription>();
-            subscriptionsByEventType.put(eventType, subscriptions);
-        } else {
-            if (subscriptions.contains(newSubscription)) {
-                throw new EventBusException("Subscriber " + subscriber.getClass() + " already registered to event "
-                        + eventType);
-            }
-        }
-
-        // Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again)
-        // subscriberMethod.method.setAccessible(true);
-
-        int size = subscriptions.size();
-        for (int i = 0; i <= size; i++) {
-            if (i == size || newSubscription.priority > subscriptions.get(i).priority) {
-                subscriptions.add(i, newSubscription);
-                break;
-            }
-        }
-
-        List<Class<?>> subscribedEvents = typesBySubscriber.get(subscriber);
-        if (subscribedEvents == null) {
-            subscribedEvents = new ArrayList<Class<?>>();
-            typesBySubscriber.put(subscriber, subscribedEvents);
-        }
-        subscribedEvents.add(eventType);
-
-        if (sticky) {
-            if (eventInheritance) {
-                // Existing sticky events of all subclasses of eventType have to be considered.
-                // Note: Iterating over all events may be inefficient with lots of sticky events,
-                // thus data structure should be changed to allow a more efficient lookup
-                // (e.g. an additional map storing sub classes of super classes: Class -> List<Class>).
-                Set<Map.Entry<Class<?>, Object>> entries = stickyEvents.entrySet();
-                for (Map.Entry<Class<?>, Object> entry : entries) {
-                    Class<?> candidateEventType = entry.getKey();
-                    if (eventType.isAssignableFrom(candidateEventType)) {
-                        Object stickyEvent = entry.getValue();
-                        checkPostStickyEventToSubscription(newSubscription, stickyEvent);
-                    }
-                }
-            } else {
-                Object stickyEvent = stickyEvents.get(eventType);
-                checkPostStickyEventToSubscription(newSubscription, stickyEvent);
-            }
-        }
-    }
-
-    private void checkPostStickyEventToSubscription(Subscription newSubscription, Object stickyEvent) {
-        if (stickyEvent != null) {
-            // If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)
-            // --> Strange corner case, which we don't take care of here.
-            postToSubscription(newSubscription, stickyEvent, Looper.getMainLooper() == Looper.myLooper());
-        }
-    }
-
-    public synchronized boolean isRegistered(Object subscriber) {
-        return typesBySubscriber.containsKey(subscriber);
-    }
-
-    /** Only updates subscriptionsByEventType, not typesBySubscriber! Caller must update typesBySubscriber. */
-    private void unubscribeByEventType(Object subscriber, Class<?> eventType) {
-        List<Subscription> subscriptions = subscriptionsByEventType.get(eventType);
-        if (subscriptions != null) {
-            int size = subscriptions.size();
-            for (int i = 0; i < size; i++) {
-                Subscription subscription = subscriptions.get(i);
-                if (subscription.subscriber == subscriber) {
-                    subscription.active = false;
-                    subscriptions.remove(i);
-                    i--;
-                    size--;
-                }
-            }
-        }
-    }
-
-    /** Unregisters the given subscriber from all event classes. */
-    public synchronized void unregister(Object subscriber) {
-        List<Class<?>> subscribedTypes = typesBySubscriber.get(subscriber);
-        if (subscribedTypes != null) {
-            for (Class<?> eventType : subscribedTypes) {
-                unubscribeByEventType(subscriber, eventType);
-            }
-            typesBySubscriber.remove(subscriber);
-        } else {
-            Log.w(TAG, "Subscriber to unregister was not registered before: " + subscriber.getClass());
-        }
-    }
-
-    /** Posts the given event to the event bus. */
-    public void post(Object event) {
-        PostingThreadState postingState = currentPostingThreadState.get();
-        List<Object> eventQueue = postingState.eventQueue;
-        eventQueue.add(event);
-
-        if (!postingState.isPosting) {
-            postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();
-            postingState.isPosting = true;
-            if (postingState.canceled) {
-                throw new EventBusException("Internal error. Abort state was not reset");
-            }
-            try {
-                while (!eventQueue.isEmpty()) {
-                    postSingleEvent(eventQueue.remove(0), postingState);
-                }
-            } finally {
-                postingState.isPosting = false;
-                postingState.isMainThread = false;
-            }
-        }
-    }
-
-    /**
-     * Called from a subscriber's event handling method, further event delivery will be canceled. Subsequent
-     * subscribers
-     * won't receive the event. Events are usually canceled by higher priority subscribers (see
-     * {@link #register(Object, int)}). Canceling is restricted to event handling methods running in posting thread
-     * {@link ThreadMode#PostThread}.
-     */
-    public void cancelEventDelivery(Object event) {
-        PostingThreadState postingState = currentPostingThreadState.get();
-        if (!postingState.isPosting) {
-            throw new EventBusException(
-                    "This method may only be called from inside event handling methods on the posting thread");
-        } else if (event == null) {
-            throw new EventBusException("Event may not be null");
-        } else if (postingState.event != event) {
-            throw new EventBusException("Only the currently handled event may be aborted");
-        } else if (postingState.subscription.subscriberMethod.threadMode != ThreadMode.PostThread) {
-            throw new EventBusException(" event handlers may only abort the incoming event");
-        }
-
-        postingState.canceled = true;
-    }
-
-    /**
-     * Posts the given event to the event bus and holds on to the event (because it is sticky). The most recent sticky
-     * event of an event's type is kept in memory for future access. This can be {@link #registerSticky(Object)} or
-     * {@link #getStickyEvent(Class)}.
-     */
-    public void postSticky(Object event) {
-        synchronized (stickyEvents) {
-            stickyEvents.put(event.getClass(), event);
-        }
-        // Should be posted after it is putted, in case the subscriber wants to remove immediately
-        post(event);
-    }
-
-    /**
-     * Gets the most recent sticky event for the given type.
-     *
-     * @see #postSticky(Object)
-     */
-    public <T> T getStickyEvent(Class<T> eventType) {
-        synchronized (stickyEvents) {
-            return eventType.cast(stickyEvents.get(eventType));
-        }
-    }
-
-    /**
-     * Remove and gets the recent sticky event for the given event type.
-     *
-     * @see #postSticky(Object)
-     */
-    public <T> T removeStickyEvent(Class<T> eventType) {
-        synchronized (stickyEvents) {
-            return eventType.cast(stickyEvents.remove(eventType));
-        }
-    }
-
-    /**
-     * Removes the sticky event if it equals to the given event.
-     *
-     * @return true if the events matched and the sticky event was removed.
-     */
-    public boolean removeStickyEvent(Object event) {
-        synchronized (stickyEvents) {
-            Class<?> eventType = event.getClass();
-            Object existingEvent = stickyEvents.get(eventType);
-            if (event.equals(existingEvent)) {
-                stickyEvents.remove(eventType);
-                return true;
-            } else {
-                return false;
-            }
-        }
-    }
-
-    /**
-     * Removes all sticky events.
-     */
-    public void removeAllStickyEvents() {
-        synchronized (stickyEvents) {
-            stickyEvents.clear();
-        }
-    }
-
-    public boolean hasSubscriberForEvent(Class<?> eventClass) {
-        List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);
-        if (eventTypes != null) {
-            int countTypes = eventTypes.size();
-            for (int h = 0; h < countTypes; h++) {
-                Class<?> clazz = eventTypes.get(h);
-                CopyOnWriteArrayList<Subscription> subscriptions;
-                synchronized (this) {
-                    subscriptions = subscriptionsByEventType.get(clazz);
-                }
-                if (subscriptions != null && !subscriptions.isEmpty()) {
-                    return true;
-                }
-            }
-        }
-        return false;
-    }
-
-    private void postSingleEvent(Object event, PostingThreadState postingState) throws Error {
-        Class<?> eventClass = event.getClass();
-        boolean subscriptionFound = false;
-        if (eventInheritance) {
-            List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);
-            int countTypes = eventTypes.size();
-            for (int h = 0; h < countTypes; h++) {
-                Class<?> clazz = eventTypes.get(h);
-                subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);
-            }
-        } else {
-            subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);
-        }
-        if (!subscriptionFound) {
-            if (logNoSubscriberMessages) {
-                Log.d(TAG, "No subscribers registered for event " + eventClass);
-            }
-            if (sendNoSubscriberEvent && eventClass != NoSubscriberEvent.class &&
-                    eventClass != SubscriberExceptionEvent.class) {
-                post(new NoSubscriberEvent(this, event));
-            }
-        }
-    }
-
-    private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class<?> eventClass) {
-        CopyOnWriteArrayList<Subscription> subscriptions;
-        synchronized (this) {
-            subscriptions = subscriptionsByEventType.get(eventClass);
-        }
-        if (subscriptions != null && !subscriptions.isEmpty()) {
-            for (Subscription subscription : subscriptions) {
-                postingState.event = event;
-                postingState.subscription = subscription;
-                boolean aborted = false;
-                try {
-                    postToSubscription(subscription, event, postingState.isMainThread);
-                    aborted = postingState.canceled;
-                } finally {
-                    postingState.event = null;
-                    postingState.subscription = null;
-                    postingState.canceled = false;
-                }
-                if (aborted) {
-                    break;
-                }
-            }
-            return true;
-        }
-        return false;
-    }
-
-    private void postToSubscription(Subscription subscription, Object event, boolean isMainThread) {
-        switch (subscription.subscriberMethod.threadMode) {
-            case PostThread:
-                invokeSubscriber(subscription, event);
-                break;
-            case MainThread:
-                if (isMainThread) {
-                    invokeSubscriber(subscription, event);
-                } else {
-                    mainThreadPoster.enqueue(subscription, event);
-                }
-                break;
-            case BackgroundThread:
-                if (isMainThread) {
-                    backgroundPoster.enqueue(subscription, event);
-                } else {
-                    invokeSubscriber(subscription, event);
-                }
-                break;
-            case Async:
-                asyncPoster.enqueue(subscription, event);
-                break;
-            default:
-                throw new IllegalStateException("Unknown thread mode: " + subscription.subscriberMethod.threadMode);
-        }
-    }
-
-    /** Looks up all Class objects including super classes and interfaces. Should also work for interfaces. */
-    private List<Class<?>> lookupAllEventTypes(Class<?> eventClass) {
-        synchronized (eventTypesCache) {
-            List<Class<?>> eventTypes = eventTypesCache.get(eventClass);
-            if (eventTypes == null) {
-                eventTypes = new ArrayList<Class<?>>();
-                Class<?> clazz = eventClass;
-                while (clazz != null) {
-                    eventTypes.add(clazz);
-                    addInterfaces(eventTypes, clazz.getInterfaces());
-                    clazz = clazz.getSuperclass();
-                }
-                eventTypesCache.put(eventClass, eventTypes);
-            }
-            return eventTypes;
-        }
-    }
-
-    /** Recurses through super interfaces. */
-    static void addInterfaces(List<Class<?>> eventTypes, Class<?>[] interfaces) {
-        for (Class<?> interfaceClass : interfaces) {
-            if (!eventTypes.contains(interfaceClass)) {
-                eventTypes.add(interfaceClass);
-                addInterfaces(eventTypes, interfaceClass.getInterfaces());
-            }
-        }
-    }
-
-    /**
-     * Invokes the subscriber if the subscriptions is still active. Skipping subscriptions prevents race conditions
-     * between {@link #unregister(Object)} and event delivery. Otherwise the event might be delivered after the
-     * subscriber unregistered. This is particularly important for main thread delivery and registrations bound to the
-     * live cycle of an Activity or Fragment.
-     */
-    void invokeSubscriber(PendingPost pendingPost) {
-        Object event = pendingPost.event;
-        Subscription subscription = pendingPost.subscription;
-        PendingPost.releasePendingPost(pendingPost);
-        if (subscription.active) {
-            invokeSubscriber(subscription, event);
-        }
-    }
-
-    void invokeSubscriber(Subscription subscription, Object event) {
-        try {
-            subscription.subscriberMethod.method.invoke(subscription.subscriber, event);
-        } catch (InvocationTargetException e) {
-            handleSubscriberException(subscription, event, e.getCause());
-        } catch (IllegalAccessException e) {
-            throw new IllegalStateException("Unexpected exception", e);
-        }
-    }
-
-    private void handleSubscriberException(Subscription subscription, Object event, Throwable cause) {
-        if (event instanceof SubscriberExceptionEvent) {
-            if (logSubscriberExceptions) {
-                // Don't send another SubscriberExceptionEvent to avoid infinite event recursion, just log
-                Log.e(TAG, "SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass()
-                        + " threw an exception", cause);
-                SubscriberExceptionEvent exEvent = (SubscriberExceptionEvent) event;
-                Log.e(TAG, "Initial event " + exEvent.causingEvent + " caused exception in "
-                        + exEvent.causingSubscriber, exEvent.throwable);
-            }
-        } else {
-            if (throwSubscriberException) {
-                throw new EventBusException("Invoking subscriber failed", cause);
-            }
-            if (logSubscriberExceptions) {
-                Log.e(TAG, "Could not dispatch event: " + event.getClass() + " to subscribing class "
-                        + subscription.subscriber.getClass(), cause);
-            }
-            if (sendSubscriberExceptionEvent) {
-                SubscriberExceptionEvent exEvent = new SubscriberExceptionEvent(this, cause, event,
-                        subscription.subscriber);
-                post(exEvent);
-            }
-        }
-    }
-
-    /** For ThreadLocal, much faster to set (and get multiple values). */
-    final static class PostingThreadState {
-        final List<Object> eventQueue = new ArrayList<Object>();
-        boolean isPosting;
-        boolean isMainThread;
-        Subscription subscription;
-        Object event;
-        boolean canceled;
-    }
-
-    ExecutorService getExecutorService() {
-        return executorService;
-    }
-
-    // Just an idea: we could provide a callback to post() to be notified, an alternative would be events, of course...
-    /* public */interface PostCallback {
-        void onPostCompleted(List<SubscriberExceptionEvent> exceptionEvents);
-    }
-
-}
diff --git a/EventBus/src/de/greenrobot/event/EventBusBuilder.java b/EventBus/src/de/greenrobot/event/EventBusBuilder.java
deleted file mode 100644
index 06350609..00000000
--- a/EventBus/src/de/greenrobot/event/EventBusBuilder.java
+++ /dev/null
@@ -1,136 +0,0 @@
-/*
- * Copyright (C) 2014 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.event;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-
-/**
- * Creates EventBus instances with custom parameters and also allows to install a custom default EventBus instance.
- * Create a new builder using {@link EventBus#builder()}.
- */
-public class EventBusBuilder {
-    private final static ExecutorService DEFAULT_EXECUTOR_SERVICE = Executors.newCachedThreadPool();
-
-    boolean logSubscriberExceptions = true;
-    boolean logNoSubscriberMessages = true;
-    boolean sendSubscriberExceptionEvent = true;
-    boolean sendNoSubscriberEvent = true;
-    boolean throwSubscriberException;
-    boolean eventInheritance = true;
-    ExecutorService executorService = DEFAULT_EXECUTOR_SERVICE;
-    List<Class<?>> skipMethodVerificationForClasses;
-
-    EventBusBuilder() {
-    }
-
-    /** Default: true */
-    public EventBusBuilder logSubscriberExceptions(boolean logSubscriberExceptions) {
-        this.logSubscriberExceptions = logSubscriberExceptions;
-        return this;
-    }
-
-    /** Default: true */
-    public EventBusBuilder logNoSubscriberMessages(boolean logNoSubscriberMessages) {
-        this.logNoSubscriberMessages = logNoSubscriberMessages;
-        return this;
-    }
-
-    /** Default: true */
-    public EventBusBuilder sendSubscriberExceptionEvent(boolean sendSubscriberExceptionEvent) {
-        this.sendSubscriberExceptionEvent = sendSubscriberExceptionEvent;
-        return this;
-    }
-
-    /** Default: true */
-    public EventBusBuilder sendNoSubscriberEvent(boolean sendNoSubscriberEvent) {
-        this.sendNoSubscriberEvent = sendNoSubscriberEvent;
-        return this;
-    }
-
-    /**
-     * Fails if an subscriber throws an exception (default: false).
-     * <p/>
-     * Tip: Use this with BuildConfig.DEBUG to let the app crash in DEBUG mode (only). This way, you won't miss
-     * exceptions during development.
-     */
-    public EventBusBuilder throwSubscriberException(boolean throwSubscriberException) {
-        this.throwSubscriberException = throwSubscriberException;
-        return this;
-    }
-
-    /**
-     * By default, EventBus considers the event class hierarchy (subscribers to super classes will be notified).
-     * Switching this feature off will improve posting of events. For simple event classes extending Object directly,
-     * we measured a speed up of 20% for event posting. For more complex event hierarchies, the speed up should be
-     * >20%.
-     * <p/>
-     * However, keep in mind that event posting usually consumes just a small proportion of CPU time inside an app,
-     * unless it is posting at high rates, e.g. hundreds/thousands of events per second.
-     */
-    public EventBusBuilder eventInheritance(boolean eventInheritance) {
-        this.eventInheritance = eventInheritance;
-        return this;
-    }
-
-
-    /**
-     * Provide a custom thread pool to EventBus used for async and background event delivery. This is an advanced
-     * setting to that can break things: ensure the given ExecutorService won't get stuck to avoid undefined behavior.
-     */
-    public EventBusBuilder executorService(ExecutorService executorService) {
-        this.executorService = executorService;
-        return this;
-    }
-
-    /**
-     * Method name verification is done for methods starting with onEvent to avoid typos; using this method you can
-     * exclude subscriber classes from this check. Also disables checks for method modifiers (public, not static nor
-     * abstract).
-     */
-    public EventBusBuilder skipMethodVerificationFor(Class<?> clazz) {
-        if (skipMethodVerificationForClasses == null) {
-            skipMethodVerificationForClasses = new ArrayList<Class<?>>();
-        }
-        skipMethodVerificationForClasses.add(clazz);
-        return this;
-    }
-
-    /**
-     * Installs the default EventBus returned by {@link EventBus#getDefault()} using this builders' values. Must be
-     * done only once before the first usage of the default EventBus.
-     *
-     * @throws EventBusException if there's already a default EventBus instance in place
-     */
-    public EventBus installDefaultEventBus() {
-        synchronized (EventBus.class) {
-            if (EventBus.defaultInstance != null) {
-                throw new EventBusException("Default instance already exists." +
-                        " It may be only set once before it's used the first time to ensure consistent behavior.");
-            }
-            EventBus.defaultInstance = build();
-            return EventBus.defaultInstance;
-        }
-    }
-
-    /** Builds an EventBus based on the current configuration. */
-    public EventBus build() {
-        return new EventBus(this);
-    }
-
-}
diff --git a/EventBus/src/de/greenrobot/event/EventBusException.java b/EventBus/src/de/greenrobot/event/EventBusException.java
deleted file mode 100644
index 80c51f86..00000000
--- a/EventBus/src/de/greenrobot/event/EventBusException.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.event;
-
-/**
- * An {@link RuntimeException} thrown in cases something went wrong inside EventBus.
- * 
- * @author Markus
- * 
- */
-public class EventBusException extends RuntimeException {
-
-    private static final long serialVersionUID = -2912559384646531479L;
-
-    public EventBusException(String detailMessage) {
-        super(detailMessage);
-    }
-
-    public EventBusException(Throwable throwable) {
-        super(throwable);
-    }
-
-    public EventBusException(String detailMessage, Throwable throwable) {
-        super(detailMessage, throwable);
-    }
-
-}
diff --git a/EventBus/src/de/greenrobot/event/HandlerPoster.java b/EventBus/src/de/greenrobot/event/HandlerPoster.java
deleted file mode 100644
index c1c44608..00000000
--- a/EventBus/src/de/greenrobot/event/HandlerPoster.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.event;
-
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Message;
-import android.os.SystemClock;
-
-final class HandlerPoster extends Handler {
-
-    private final PendingPostQueue queue;
-    private final int maxMillisInsideHandleMessage;
-    private final EventBus eventBus;
-    private boolean handlerActive;
-
-    HandlerPoster(EventBus eventBus, Looper looper, int maxMillisInsideHandleMessage) {
-        super(looper);
-        this.eventBus = eventBus;
-        this.maxMillisInsideHandleMessage = maxMillisInsideHandleMessage;
-        queue = new PendingPostQueue();
-    }
-
-    void enqueue(Subscription subscription, Object event) {
-        PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);
-        synchronized (this) {
-            queue.enqueue(pendingPost);
-            if (!handlerActive) {
-                handlerActive = true;
-                if (!sendMessage(obtainMessage())) {
-                    throw new EventBusException("Could not send handler message");
-                }
-            }
-        }
-    }
-
-    @Override
-    public void handleMessage(Message msg) {
-        boolean rescheduled = false;
-        try {
-            long started = SystemClock.uptimeMillis();
-            while (true) {
-                PendingPost pendingPost = queue.poll();
-                if (pendingPost == null) {
-                    synchronized (this) {
-                        // Check again, this time in synchronized
-                        pendingPost = queue.poll();
-                        if (pendingPost == null) {
-                            handlerActive = false;
-                            return;
-                        }
-                    }
-                }
-                eventBus.invokeSubscriber(pendingPost);
-                long timeInMethod = SystemClock.uptimeMillis() - started;
-                if (timeInMethod >= maxMillisInsideHandleMessage) {
-                    if (!sendMessage(obtainMessage())) {
-                        throw new EventBusException("Could not send handler message");
-                    }
-                    rescheduled = true;
-                    return;
-                }
-            }
-        } finally {
-            handlerActive = rescheduled;
-        }
-    }
-}
\ No newline at end of file
diff --git a/EventBus/src/de/greenrobot/event/NoSubscriberEvent.java b/EventBus/src/de/greenrobot/event/NoSubscriberEvent.java
deleted file mode 100644
index a7378ae8..00000000
--- a/EventBus/src/de/greenrobot/event/NoSubscriberEvent.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.event;
-
-/**
- * This Event is posted by EventBus when no subscriber is found for a posted event.
- * 
- * @author Markus
- */
-public final class NoSubscriberEvent {
-    /** The {@link EventBus} instance to with the original event was posted to. */
-    public final EventBus eventBus;
-
-    /** The original event that could not be delivered to any subscriber. */
-    public final Object originalEvent;
-
-    public NoSubscriberEvent(EventBus eventBus, Object originalEvent) {
-        this.eventBus = eventBus;
-        this.originalEvent = originalEvent;
-    }
-
-}
diff --git a/EventBus/src/de/greenrobot/event/PendingPost.java b/EventBus/src/de/greenrobot/event/PendingPost.java
deleted file mode 100644
index 0bd5a2ec..00000000
--- a/EventBus/src/de/greenrobot/event/PendingPost.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.event;
-
-import java.util.ArrayList;
-import java.util.List;
-
-final class PendingPost {
-    private final static List<PendingPost> pendingPostPool = new ArrayList<PendingPost>();
-
-    Object event;
-    Subscription subscription;
-    PendingPost next;
-
-    private PendingPost(Object event, Subscription subscription) {
-        this.event = event;
-        this.subscription = subscription;
-    }
-
-    static PendingPost obtainPendingPost(Subscription subscription, Object event) {
-        synchronized (pendingPostPool) {
-            int size = pendingPostPool.size();
-            if (size > 0) {
-                PendingPost pendingPost = pendingPostPool.remove(size - 1);
-                pendingPost.event = event;
-                pendingPost.subscription = subscription;
-                pendingPost.next = null;
-                return pendingPost;
-            }
-        }
-        return new PendingPost(event, subscription);
-    }
-
-    static void releasePendingPost(PendingPost pendingPost) {
-        pendingPost.event = null;
-        pendingPost.subscription = null;
-        pendingPost.next = null;
-        synchronized (pendingPostPool) {
-            // Don't let the pool grow indefinitely
-            if (pendingPostPool.size() < 10000) {
-                pendingPostPool.add(pendingPost);
-            }
-        }
-    }
-
-}
\ No newline at end of file
diff --git a/EventBus/src/de/greenrobot/event/PendingPostQueue.java b/EventBus/src/de/greenrobot/event/PendingPostQueue.java
deleted file mode 100644
index 5440559b..00000000
--- a/EventBus/src/de/greenrobot/event/PendingPostQueue.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package de.greenrobot.event;
-
-final class PendingPostQueue {
-    private PendingPost head;
-    private PendingPost tail;
-
-    synchronized void enqueue(PendingPost pendingPost) {
-        if (pendingPost == null) {
-            throw new NullPointerException("null cannot be enqueued");
-        }
-        if (tail != null) {
-            tail.next = pendingPost;
-            tail = pendingPost;
-        } else if (head == null) {
-            head = tail = pendingPost;
-        } else {
-            throw new IllegalStateException("Head present, but no tail");
-        }
-        notifyAll();
-    }
-
-    synchronized PendingPost poll() {
-        PendingPost pendingPost = head;
-        if (head != null) {
-            head = head.next;
-            if (head == null) {
-                tail = null;
-            }
-        }
-        return pendingPost;
-    }
-
-    synchronized PendingPost poll(int maxMillisToWait) throws InterruptedException {
-        if (head == null) {
-            wait(maxMillisToWait);
-        }
-        return poll();
-    }
-
-}
diff --git a/EventBus/src/de/greenrobot/event/SubscriberExceptionEvent.java b/EventBus/src/de/greenrobot/event/SubscriberExceptionEvent.java
deleted file mode 100644
index 5d3b9b55..00000000
--- a/EventBus/src/de/greenrobot/event/SubscriberExceptionEvent.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.event;
-
-/**
- * This Event is posted by EventBus when an exception occurs inside a subscriber's event handling method.
- * 
- * @author Markus
- */
-public final class SubscriberExceptionEvent {
-    /** The {@link EventBus} instance to with the original event was posted to. */
-    public final EventBus eventBus;
-
-    /** The Throwable thrown by a subscriber. */
-    public final Throwable throwable;
-
-    /** The original event that could not be delivered to any subscriber. */
-    public final Object causingEvent;
-
-    /** The subscriber that threw the Throwable. */
-    public final Object causingSubscriber;
-
-    public SubscriberExceptionEvent(EventBus eventBus, Throwable throwable, Object causingEvent,
-            Object causingSubscriber) {
-        this.eventBus = eventBus;
-        this.throwable = throwable;
-        this.causingEvent = causingEvent;
-        this.causingSubscriber = causingSubscriber;
-    }
-
-}
diff --git a/EventBus/src/de/greenrobot/event/SubscriberMethod.java b/EventBus/src/de/greenrobot/event/SubscriberMethod.java
deleted file mode 100644
index 5e0df398..00000000
--- a/EventBus/src/de/greenrobot/event/SubscriberMethod.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.event;
-
-import java.lang.reflect.Method;
-
-final class SubscriberMethod {
-    final Method method;
-    final ThreadMode threadMode;
-    final Class<?> eventType;
-    /** Used for efficient comparison */
-    String methodString;
-
-    SubscriberMethod(Method method, ThreadMode threadMode, Class<?> eventType) {
-        this.method = method;
-        this.threadMode = threadMode;
-        this.eventType = eventType;
-    }
-
-    @Override
-    public boolean equals(Object other) {
-        if (other instanceof SubscriberMethod) {
-            checkMethodString();
-            SubscriberMethod otherSubscriberMethod = (SubscriberMethod)other;
-            otherSubscriberMethod.checkMethodString();
-            // Don't use method.equals because of http://code.google.com/p/android/issues/detail?id=7811#c6
-            return methodString.equals(otherSubscriberMethod.methodString);
-        } else {
-            return false;
-        }
-    }
-
-    private synchronized void checkMethodString() {
-        if (methodString == null) {
-            // Method.toString has more overhead, just take relevant parts of the method
-            StringBuilder builder = new StringBuilder(64);
-            builder.append(method.getDeclaringClass().getName());
-            builder.append('#').append(method.getName());
-            builder.append('(').append(eventType.getName());
-            methodString = builder.toString();
-        }
-    }
-
-    @Override
-    public int hashCode() {
-        return method.hashCode();
-    }
-}
\ No newline at end of file
diff --git a/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java
deleted file mode 100644
index 823cb0ec..00000000
--- a/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java
+++ /dev/null
@@ -1,135 +0,0 @@
-/*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.event;
-
-import android.util.Log;
-
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-
-class SubscriberMethodFinder {
-    private static final String ON_EVENT_METHOD_NAME = "onEvent";
-
-    /*
-     * In newer class files, compilers may add methods. Those are called bridge or synthetic methods.
-     * EventBus must ignore both. There modifiers are not public but defined in the Java class file format:
-     * http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6-200-A.1
-     */
-    private static final int BRIDGE = 0x40;
-    private static final int SYNTHETIC = 0x1000;
-
-    private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;
-    private static final Map<String, List<SubscriberMethod>> methodCache = new HashMap<String, List<SubscriberMethod>>();
-
-    private final Map<Class<?>, Class<?>> skipMethodVerificationForClasses;
-
-    SubscriberMethodFinder(List<Class<?>> skipMethodVerificationForClassesList) {
-        skipMethodVerificationForClasses = new ConcurrentHashMap<Class<?>, Class<?>>();
-        if (skipMethodVerificationForClassesList != null) {
-            for (Class<?> clazz : skipMethodVerificationForClassesList) {
-                skipMethodVerificationForClasses.put(clazz, clazz);
-            }
-        }
-    }
-
-    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {
-        String key = subscriberClass.getName();
-        List<SubscriberMethod> subscriberMethods;
-        synchronized (methodCache) {
-            subscriberMethods = methodCache.get(key);
-        }
-        if (subscriberMethods != null) {
-            return subscriberMethods;
-        }
-        subscriberMethods = new ArrayList<SubscriberMethod>();
-        Class<?> clazz = subscriberClass;
-        HashSet<String> eventTypesFound = new HashSet<String>();
-        StringBuilder methodKeyBuilder = new StringBuilder();
-        while (clazz != null) {
-            String name = clazz.getName();
-            if (name.startsWith("java.") || name.startsWith("javax.") || name.startsWith("android.")) {
-                // Skip system classes, this just degrades performance
-                break;
-            }
-
-            // Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again)
-            Method[] methods = clazz.getDeclaredMethods();
-            for (Method method : methods) {
-                String methodName = method.getName();
-                if (methodName.startsWith(ON_EVENT_METHOD_NAME)) {
-                    int modifiers = method.getModifiers();
-                    if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {
-                        Class<?>[] parameterTypes = method.getParameterTypes();
-                        if (parameterTypes.length == 1) {
-                            String modifierString = methodName.substring(ON_EVENT_METHOD_NAME.length());
-                            ThreadMode threadMode;
-                            if (modifierString.length() == 0) {
-                                threadMode = ThreadMode.PostThread;
-                            } else if (modifierString.equals("MainThread")) {
-                                threadMode = ThreadMode.MainThread;
-                            } else if (modifierString.equals("BackgroundThread")) {
-                                threadMode = ThreadMode.BackgroundThread;
-                            } else if (modifierString.equals("Async")) {
-                                threadMode = ThreadMode.Async;
-                            } else {
-                                if (skipMethodVerificationForClasses.containsKey(clazz)) {
-                                    continue;
-                                } else {
-                                    throw new EventBusException("Illegal onEvent method, check for typos: " + method);
-                                }
-                            }
-                            Class<?> eventType = parameterTypes[0];
-                            methodKeyBuilder.setLength(0);
-                            methodKeyBuilder.append(methodName);
-                            methodKeyBuilder.append('>').append(eventType.getName());
-                            String methodKey = methodKeyBuilder.toString();
-                            if (eventTypesFound.add(methodKey)) {
-                                // Only add if not already found in a sub class
-                                subscriberMethods.add(new SubscriberMethod(method, threadMode, eventType));
-                            }
-                        }
-                    } else if (!skipMethodVerificationForClasses.containsKey(clazz)) {
-                        Log.d(EventBus.TAG, "Skipping method (not public, static or abstract): " + clazz + "."
-                                + methodName);
-                    }
-                }
-            }
-            clazz = clazz.getSuperclass();
-        }
-        if (subscriberMethods.isEmpty()) {
-            throw new EventBusException("Subscriber " + subscriberClass + " has no public methods called "
-                    + ON_EVENT_METHOD_NAME);
-        } else {
-            synchronized (methodCache) {
-                methodCache.put(key, subscriberMethods);
-            }
-            return subscriberMethods;
-        }
-    }
-
-    static void clearCaches() {
-        synchronized (methodCache) {
-            methodCache.clear();
-        }
-    }
-
-}
diff --git a/EventBus/src/de/greenrobot/event/Subscription.java b/EventBus/src/de/greenrobot/event/Subscription.java
deleted file mode 100644
index 6c84c440..00000000
--- a/EventBus/src/de/greenrobot/event/Subscription.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.event;
-
-final class Subscription {
-    final Object subscriber;
-    final SubscriberMethod subscriberMethod;
-    final int priority;
-    /**
-     * Becomes false as soon as {@link EventBus#unregister(Object)} is called, which is checked by queued event delivery
-     * {@link EventBus#invokeSubscriber(PendingPost)} to prevent race conditions.
-     */
-    volatile boolean active;
-
-    Subscription(Object subscriber, SubscriberMethod subscriberMethod, int priority) {
-        this.subscriber = subscriber;
-        this.subscriberMethod = subscriberMethod;
-        this.priority = priority;
-        active = true;
-    }
-
-    @Override
-    public boolean equals(Object other) {
-        if (other instanceof Subscription) {
-            Subscription otherSubscription = (Subscription) other;
-            return subscriber == otherSubscription.subscriber
-                    && subscriberMethod.equals(otherSubscription.subscriberMethod);
-        } else {
-            return false;
-        }
-    }
-
-    @Override
-    public int hashCode() {
-        return subscriber.hashCode() + subscriberMethod.methodString.hashCode();
-    }
-}
\ No newline at end of file
diff --git a/EventBus/src/de/greenrobot/event/ThreadMode.java b/EventBus/src/de/greenrobot/event/ThreadMode.java
deleted file mode 100644
index 4022ace5..00000000
--- a/EventBus/src/de/greenrobot/event/ThreadMode.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.event;
-
-/**
- * Each event handler method has a thread mode, which determines in which thread the method is to be called by EventBus.
- * EventBus takes care of threading independently from the posting thread.
- * 
- * @see EventBus#register(Object)
- * @author Markus
- */
-public enum ThreadMode {
-    /**
-     * Subscriber will be called in the same thread, which is posting the event. This is the default. Event delivery
-     * implies the least overhead because it avoids thread switching completely. Thus this is the recommended mode for
-     * simple tasks that are known to complete is a very short time without requiring the main thread. Event handlers
-     * using this mode must return quickly to avoid blocking the posting thread, which may be the main thread.
-     */
-    PostThread,
-
-    /**
-     * Subscriber will be called in Android's main thread (sometimes referred to as UI thread). If the posting thread is
-     * the main thread, event handler methods will be called directly. Event handlers using this mode must return
-     * quickly to avoid blocking the main thread.
-     */
-    MainThread,
-
-    /**
-     * Subscriber will be called in a background thread. If posting thread is not the main thread, event handler methods
-     * will be called directly in the posting thread. If the posting thread is the main thread, EventBus uses a single
-     * background thread, that will deliver all its events sequentially. Event handlers using this mode should try to
-     * return quickly to avoid blocking the background thread.
-     */
-    BackgroundThread,
-
-    /**
-     * Event handler methods are called in a separate thread. This is always independent from the posting thread and the
-     * main thread. Posting events never wait for event handler methods using this mode. Event handler methods should
-     * use this mode if their execution might take some time, e.g. for network access. Avoid triggering a large number
-     * of long running asynchronous handler methods at the same time to limit the number of concurrent threads. EventBus
-     * uses a thread pool to efficiently reuse threads from completed asynchronous event handler notifications.
-     */
-    Async
-}
\ No newline at end of file
diff --git a/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java b/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java
deleted file mode 100644
index 71048a43..00000000
--- a/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java
+++ /dev/null
@@ -1,133 +0,0 @@
-/*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.event.util;
-
-import java.lang.reflect.Constructor;
-import java.util.concurrent.Executor;
-import java.util.concurrent.Executors;
-
-import android.app.Activity;
-import android.util.Log;
-import de.greenrobot.event.EventBus;
-
-/**
- * Executes an {@link RunnableEx} using a thread pool. Thrown exceptions are propagated by posting failure events of any
- * given type (default is {@link ThrowableFailureEvent}).
- * 
- * @author Markus
- */
-public class AsyncExecutor {
-
-    public static class Builder {
-        private Executor threadPool;
-        private Class<?> failureEventType;
-        private EventBus eventBus;
-
-        private Builder() {
-        }
-
-        public Builder threadPool(Executor threadPool) {
-            this.threadPool = threadPool;
-            return this;
-        }
-
-        public Builder failureEventType(Class<?> failureEventType) {
-            this.failureEventType = failureEventType;
-            return this;
-        }
-
-        public Builder eventBus(EventBus eventBus) {
-            this.eventBus = eventBus;
-            return this;
-        }
-
-        public AsyncExecutor build() {
-            return buildForScope(null);
-        }
-
-        public AsyncExecutor buildForActivityScope(Activity activity) {
-            return buildForScope(activity.getClass());
-        }
-        
-        public AsyncExecutor buildForScope(Object executionContext) {
-            if (eventBus == null) {
-                eventBus = EventBus.getDefault();
-            }
-            if (threadPool == null) {
-                threadPool = Executors.newCachedThreadPool();
-            }
-            if (failureEventType == null) {
-                failureEventType = ThrowableFailureEvent.class;
-            }
-            return new AsyncExecutor(threadPool, eventBus, failureEventType, executionContext);
-        }
-    }
-
-    /** Like {@link Runnable}, but the run method may throw an exception. */
-    public interface RunnableEx {
-        void run() throws Exception;
-    }
-
-    public static Builder builder() {
-        return new Builder();
-    }
-
-    public static AsyncExecutor create() {
-        return new Builder().build();
-    }
-
-    private final Executor threadPool;
-    private final Constructor<?> failureEventConstructor;
-    private final EventBus eventBus;
-    private final Object scope;
-
-    private AsyncExecutor(Executor threadPool, EventBus eventBus, Class<?> failureEventType, Object scope) {
-        this.threadPool = threadPool;
-        this.eventBus = eventBus;
-        this.scope = scope;
-        try {
-            failureEventConstructor = failureEventType.getConstructor(Throwable.class);
-        } catch (NoSuchMethodException e) {
-            throw new RuntimeException(
-                    "Failure event class must have a constructor with one parameter of type Throwable", e);
-        }
-    }
-
-    /** Posts an failure event if the given {@link RunnableEx} throws an Exception. */
-    public void execute(final RunnableEx runnable) {
-        threadPool.execute(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    runnable.run();
-                } catch (Exception e) {
-                    Object event;
-                    try {
-                        event = failureEventConstructor.newInstance(e);
-                    } catch (Exception e1) {
-                        Log.e(EventBus.TAG, "Original exception:", e);
-                        throw new RuntimeException("Could not create failure event", e1);
-                    }
-                    if (event instanceof HasExecutionScope) {
-                        ((HasExecutionScope) event).setExecutionScope(scope);
-                    }
-                    eventBus.post(event);
-                }
-            }
-        });
-    }
-
-}
diff --git a/EventBus/src/de/greenrobot/event/util/ErrorDialogConfig.java b/EventBus/src/de/greenrobot/event/util/ErrorDialogConfig.java
deleted file mode 100644
index 25432631..00000000
--- a/EventBus/src/de/greenrobot/event/util/ErrorDialogConfig.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package de.greenrobot.event.util;
-
-import android.content.res.Resources;
-import android.util.Log;
-import de.greenrobot.event.EventBus;
-
-public class ErrorDialogConfig {
-    final Resources resources;
-    final int defaultTitleId;
-    final int defaultErrorMsgId;
-    final ExceptionToResourceMapping mapping;
-
-    EventBus eventBus;
-    boolean logExceptions = true;
-    String tagForLoggingExceptions;
-    int defaultDialogIconId;
-    Class<?> defaultEventTypeOnDialogClosed;
-
-    public ErrorDialogConfig(Resources resources, int defaultTitleId, int defaultMsgId) {
-        this.resources = resources;
-        this.defaultTitleId = defaultTitleId;
-        this.defaultErrorMsgId = defaultMsgId;
-        mapping = new ExceptionToResourceMapping();
-    }
-
-    public ErrorDialogConfig addMapping(Class<? extends Throwable> clazz, int msgId) {
-        mapping.addMapping(clazz, msgId);
-        return this;
-    }
-
-    public int getMessageIdForThrowable(final Throwable throwable) {
-        Integer resId = mapping.mapThrowable(throwable);
-        if (resId != null) {
-            return resId;
-        } else {
-            Log.d(EventBus.TAG, "No specific message ressource ID found for " + throwable);
-            return defaultErrorMsgId;
-        }
-    }
-
-    public void setDefaultDialogIconId(int defaultDialogIconId) {
-        this.defaultDialogIconId = defaultDialogIconId;
-    }
-
-    public void setDefaultEventTypeOnDialogClosed(Class<?> defaultEventTypeOnDialogClosed) {
-        this.defaultEventTypeOnDialogClosed = defaultEventTypeOnDialogClosed;
-    }
-
-    public void disableExceptionLogging() {
-        logExceptions = false;
-    }
-
-    public void setTagForLoggingExceptions(String tagForLoggingExceptions) {
-        this.tagForLoggingExceptions = tagForLoggingExceptions;
-    }
-
-    public void setEventBus(EventBus eventBus) {
-        this.eventBus = eventBus;
-    }
-
-    /** eventBus!=null ? eventBus: EventBus.getDefault() */
-    EventBus getEventBus() {
-        return eventBus!=null ? eventBus: EventBus.getDefault();
-    }
-}
\ No newline at end of file
diff --git a/EventBus/src/de/greenrobot/event/util/ErrorDialogFragmentFactory.java b/EventBus/src/de/greenrobot/event/util/ErrorDialogFragmentFactory.java
deleted file mode 100644
index 47b693b6..00000000
--- a/EventBus/src/de/greenrobot/event/util/ErrorDialogFragmentFactory.java
+++ /dev/null
@@ -1,98 +0,0 @@
-package de.greenrobot.event.util;
-
-import android.annotation.TargetApi;
-import android.os.Build;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-
-/**
- * Factory to allow injecting a more complex exception mapping; typically you would subclass one of {@link Honeycomb} or
- * {@link Support}.
- */
-public abstract class ErrorDialogFragmentFactory<T> {
-    protected final ErrorDialogConfig config;
-
-    protected ErrorDialogFragmentFactory(ErrorDialogConfig config) {
-        this.config = config;
-    }
-
-    /**
-     * Prepares the fragment's arguments and creates the fragment. May be overridden to provide custom error fragments.
-     */
-    protected T prepareErrorFragment(ThrowableFailureEvent event, boolean finishAfterDialog,
-            Bundle argumentsForErrorDialog) {
-        if (event.isSuppressErrorUi()) {
-            // Show nothing by default
-            return null;
-        }
-        Bundle bundle;
-        if (argumentsForErrorDialog != null) {
-            bundle = (Bundle) argumentsForErrorDialog.clone();
-        } else {
-            bundle = new Bundle();
-        }
-
-        if (!bundle.containsKey(ErrorDialogManager.KEY_TITLE)) {
-            String title = getTitleFor(event, bundle);
-            bundle.putString(ErrorDialogManager.KEY_TITLE, title);
-        }
-        if (!bundle.containsKey(ErrorDialogManager.KEY_MESSAGE)) {
-            String message = getMessageFor(event, bundle);
-            bundle.putString(ErrorDialogManager.KEY_MESSAGE, message);
-        }
-        if (!bundle.containsKey(ErrorDialogManager.KEY_FINISH_AFTER_DIALOG)) {
-            bundle.putBoolean(ErrorDialogManager.KEY_FINISH_AFTER_DIALOG, finishAfterDialog);
-        }
-        if (!bundle.containsKey(ErrorDialogManager.KEY_EVENT_TYPE_ON_CLOSE)
-                && config.defaultEventTypeOnDialogClosed != null) {
-            bundle.putSerializable(ErrorDialogManager.KEY_EVENT_TYPE_ON_CLOSE, config.defaultEventTypeOnDialogClosed);
-        }
-        if (!bundle.containsKey(ErrorDialogManager.KEY_ICON_ID) && config.defaultDialogIconId != 0) {
-            bundle.putInt(ErrorDialogManager.KEY_ICON_ID, config.defaultDialogIconId);
-        }
-        return createErrorFragment(event, bundle);
-    }
-
-    /** Returns either a new Honeycomb+ or a new support library DialogFragment. */
-    protected abstract T createErrorFragment(ThrowableFailureEvent event, Bundle arguments);
-
-    /** May be overridden to provide custom error title. */
-    protected String getTitleFor(ThrowableFailureEvent event, Bundle arguments) {
-        return config.resources.getString(config.defaultTitleId);
-    }
-
-    /** May be overridden to provide custom error messages. */
-    protected String getMessageFor(ThrowableFailureEvent event, Bundle arguments) {
-        int msgResId = config.getMessageIdForThrowable(event.throwable);
-        return config.resources.getString(msgResId);
-    }
-
-    public static class Support extends ErrorDialogFragmentFactory<Fragment> {
-
-        public Support(ErrorDialogConfig config) {
-            super(config);
-        }
-
-        protected Fragment createErrorFragment(ThrowableFailureEvent event, Bundle arguments) {
-            ErrorDialogFragments.Support errorFragment = new ErrorDialogFragments.Support();
-            errorFragment.setArguments(arguments);
-            return errorFragment;
-        }
-
-    }
-
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-    public static class Honeycomb extends ErrorDialogFragmentFactory<android.app.Fragment> {
-
-        public Honeycomb(ErrorDialogConfig config) {
-            super(config);
-        }
-
-        protected android.app.Fragment createErrorFragment(ThrowableFailureEvent event, Bundle arguments) {
-            ErrorDialogFragments.Honeycomb errorFragment = new ErrorDialogFragments.Honeycomb();
-            errorFragment.setArguments(arguments);
-            return errorFragment;
-        }
-
-    }
-}
\ No newline at end of file
diff --git a/EventBus/src/de/greenrobot/event/util/ErrorDialogFragments.java b/EventBus/src/de/greenrobot/event/util/ErrorDialogFragments.java
deleted file mode 100644
index 04002df2..00000000
--- a/EventBus/src/de/greenrobot/event/util/ErrorDialogFragments.java
+++ /dev/null
@@ -1,74 +0,0 @@
-package de.greenrobot.event.util;
-
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.DialogInterface.OnClickListener;
-import android.os.Build;
-import android.os.Bundle;
-import android.support.v4.app.DialogFragment;
-import de.greenrobot.event.EventBus;
-
-public class ErrorDialogFragments {
-    /** TODO Use config:  Icon res ID to use for all error dialogs. May be configured by each app (optional). */
-    public static int ERROR_DIALOG_ICON = 0;
-
-    /** TODO Use config:  Event class to be fired on dismissing the dialog by the user. May be configured by each app. */
-    public static Class<?> EVENT_TYPE_ON_CLICK;
-
-    public static Dialog createDialog(Context context, Bundle arguments, OnClickListener onClickListener) {
-        AlertDialog.Builder builder = new AlertDialog.Builder(context);
-        builder.setTitle(arguments.getString(ErrorDialogManager.KEY_TITLE));
-        builder.setMessage(arguments.getString(ErrorDialogManager.KEY_MESSAGE));
-        if (ERROR_DIALOG_ICON != 0) {
-            builder.setIcon(ERROR_DIALOG_ICON);
-        }
-        builder.setPositiveButton(android.R.string.ok, onClickListener);
-        return builder.create();
-    }
-
-    public static void handleOnClick(DialogInterface dialog, int which, Activity activity, Bundle arguments) {
-        if (EVENT_TYPE_ON_CLICK != null) {
-            Object event;
-            try {
-                event = EVENT_TYPE_ON_CLICK.newInstance();
-            } catch (Exception e) {
-                throw new RuntimeException("Event cannot be constructed", e);
-            }
-            EventBus eventBus = ErrorDialogManager.factory.config.getEventBus();
-            eventBus.post(event);
-        }
-        boolean finish = arguments.getBoolean(ErrorDialogManager.KEY_FINISH_AFTER_DIALOG, false);
-        if (finish && activity != null) {
-            activity.finish();
-        }
-    }
-
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-    public static class Honeycomb extends android.app.DialogFragment implements OnClickListener {
-        @Override
-        public Dialog onCreateDialog(Bundle savedInstanceState) {
-            return createDialog(getActivity(), getArguments(), this);
-        }
-
-        @Override
-        public void onClick(DialogInterface dialog, int which) {
-            handleOnClick(dialog, which, getActivity(), getArguments());
-        }
-    }
-
-    public static class Support extends DialogFragment implements OnClickListener {
-        @Override
-        public Dialog onCreateDialog(Bundle savedInstanceState) {
-            return createDialog(getActivity(), getArguments(), this);
-        }
-
-        @Override
-        public void onClick(DialogInterface dialog, int which) {
-            handleOnClick(dialog, which, getActivity(), getArguments());
-        }
-    }
-}
diff --git a/EventBus/src/de/greenrobot/event/util/ErrorDialogManager.java b/EventBus/src/de/greenrobot/event/util/ErrorDialogManager.java
deleted file mode 100644
index cee7c6a5..00000000
--- a/EventBus/src/de/greenrobot/event/util/ErrorDialogManager.java
+++ /dev/null
@@ -1,245 +0,0 @@
-package de.greenrobot.event.util;
-
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.app.Application;
-import android.os.Build;
-import android.os.Bundle;
-import android.support.v4.app.DialogFragment;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.util.Log;
-import de.greenrobot.event.EventBus;
-
-/**
- * Central class for app that want to use event based error dialogs.<br/>
- * <br/>
- * How to use:
- * <ol>
- * <li>Set the {@link #factory} to configure dialogs for your app, typically in {@link Application#onCreate()}</li>
- * <li>Use one of {@link #attachTo(Activity)}, {@link #attachTo(Activity, boolean)} or
- * {@link #attachTo(Activity, boolean, Bundle)} in your Activity, typically in onCreate.</li>
- * </ol>
- * 
- * For more complex mappings, you can supply your own {@link ErrorDialogFragmentFactory}.
- * 
- * @author Markus
- */
-public class ErrorDialogManager {
-
-    public static class SupportManagerFragment extends Fragment {
-        protected boolean finishAfterDialog;
-        protected Bundle argumentsForErrorDialog;
-        private EventBus eventBus;
-        private boolean skipRegisterOnNextResume;
-        private Object executionScope;
-
-        @Override
-        public void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-            eventBus = ErrorDialogManager.factory.config.getEventBus();
-            eventBus.register(this);
-            skipRegisterOnNextResume = true;
-        }
-
-        @Override
-        public void onResume() {
-            super.onResume();
-            if (skipRegisterOnNextResume) {
-                // registered in onCreate, skip registration in this run
-                skipRegisterOnNextResume = false;
-            } else {
-                eventBus = ErrorDialogManager.factory.config.getEventBus();
-                eventBus.register(this);
-            }
-        }
-
-        @Override
-        public void onPause() {
-            eventBus.unregister(this);
-            super.onPause();
-        }
-
-        public void onEventMainThread(ThrowableFailureEvent event) {
-            if (!isInExecutionScope(executionScope, event)) {
-                return;
-            }
-            checkLogException(event);
-            // Execute pending commits before finding to avoid multiple error fragments being shown
-            FragmentManager fm = getFragmentManager();
-            fm.executePendingTransactions();
-
-            DialogFragment existingFragment = (DialogFragment) fm.findFragmentByTag(TAG_ERROR_DIALOG);
-            if (existingFragment != null) {
-                // Just show the latest error
-                existingFragment.dismiss();
-            }
-
-            android.support.v4.app.DialogFragment errorFragment = (android.support.v4.app.DialogFragment) factory
-                    .prepareErrorFragment(event, finishAfterDialog, argumentsForErrorDialog);
-            if (errorFragment != null) {
-                errorFragment.show(fm, TAG_ERROR_DIALOG);
-            }
-        }
-
-        public static void attachTo(Activity activity, Object executionScope, boolean finishAfterDialog,
-                Bundle argumentsForErrorDialog) {
-            FragmentManager fm = ((FragmentActivity) activity).getSupportFragmentManager();
-            SupportManagerFragment fragment = (SupportManagerFragment) fm.findFragmentByTag(TAG_ERROR_DIALOG_MANAGER);
-            if (fragment == null) {
-                fragment = new SupportManagerFragment();
-                fm.beginTransaction().add(fragment, TAG_ERROR_DIALOG_MANAGER).commit();
-                fm.executePendingTransactions();
-            }
-            fragment.finishAfterDialog = finishAfterDialog;
-            fragment.argumentsForErrorDialog = argumentsForErrorDialog;
-            fragment.executionScope = executionScope;
-        }
-    }
-
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-    public static class HoneycombManagerFragment extends android.app.Fragment {
-        protected boolean finishAfterDialog;
-        protected Bundle argumentsForErrorDialog;
-        private EventBus eventBus;
-        private Object executionScope;
-
-        @Override
-        public void onResume() {
-            super.onResume();
-            eventBus = ErrorDialogManager.factory.config.getEventBus();
-            eventBus.register(this);
-        }
-
-        @Override
-        public void onPause() {
-            eventBus.unregister(this);
-            super.onPause();
-        }
-
-        public void onEventMainThread(ThrowableFailureEvent event) {
-            if (!isInExecutionScope(executionScope, event)) {
-                return;
-            }
-            checkLogException(event);
-
-            // Execute pending commits before finding to avoid multiple error fragments being shown
-            android.app.FragmentManager fm = getFragmentManager();
-            fm.executePendingTransactions();
-
-            android.app.DialogFragment existingFragment = (android.app.DialogFragment) fm
-                    .findFragmentByTag(TAG_ERROR_DIALOG);
-            if (existingFragment != null) {
-                // Just show the latest error
-                existingFragment.dismiss();
-            }
-
-            android.app.DialogFragment errorFragment = (android.app.DialogFragment) factory.prepareErrorFragment(event,
-                    finishAfterDialog, argumentsForErrorDialog);
-            if (errorFragment != null) {
-                errorFragment.show(fm, TAG_ERROR_DIALOG);
-            }
-        }
-
-        public static void attachTo(Activity activity, Object executionScope, boolean finishAfterDialog, Bundle argumentsForErrorDialog) {
-            android.app.FragmentManager fm = activity.getFragmentManager();
-            HoneycombManagerFragment fragment = (HoneycombManagerFragment) fm
-                    .findFragmentByTag(TAG_ERROR_DIALOG_MANAGER);
-            if (fragment == null) {
-                fragment = new HoneycombManagerFragment();
-                fm.beginTransaction().add(fragment, TAG_ERROR_DIALOG_MANAGER).commit();
-                fm.executePendingTransactions();
-            }
-            fragment.finishAfterDialog = finishAfterDialog;
-            fragment.argumentsForErrorDialog = argumentsForErrorDialog;
-            fragment.executionScope = executionScope;
-        }
-    }
-
-    /** Must be set by the application. */
-    public static ErrorDialogFragmentFactory<?> factory;
-
-    protected static final String TAG_ERROR_DIALOG = "de.greenrobot.eventbus.error_dialog";
-    protected static final String TAG_ERROR_DIALOG_MANAGER = "de.greenrobot.eventbus.error_dialog_manager";
-
-    public static final String KEY_TITLE = "de.greenrobot.eventbus.errordialog.title";
-    public static final String KEY_MESSAGE = "de.greenrobot.eventbus.errordialog.message";
-    public static final String KEY_FINISH_AFTER_DIALOG = "de.greenrobot.eventbus.errordialog.finish_after_dialog";
-    public static final String KEY_ICON_ID = "de.greenrobot.eventbus.errordialog.icon_id";
-    public static final String KEY_EVENT_TYPE_ON_CLOSE = "de.greenrobot.eventbus.errordialog.event_type_on_close";
-
-    /** Scope is limited to the activity's class. */
-    public static void attachTo(Activity activity) {
-        attachTo(activity, false, null);
-    }
-
-    /** Scope is limited to the activity's class. */
-    public static void attachTo(Activity activity, boolean finishAfterDialog) {
-        attachTo(activity, finishAfterDialog, null);
-    }
-
-    /** Scope is limited to the activity's class. */
-    public static void attachTo(Activity activity, boolean finishAfterDialog, Bundle argumentsForErrorDialog) {
-        Object executionScope = activity.getClass();
-        attachTo(activity, executionScope, finishAfterDialog, argumentsForErrorDialog);
-    }
-    
-    public static void attachTo(Activity activity, Object executionScope, boolean finishAfterDialog, Bundle argumentsForErrorDialog) {
-        if (factory == null) {
-            throw new RuntimeException("You must set the static factory field to configure error dialogs for your app.");
-        }
-        if (isSupportActivity(activity)) {
-            SupportManagerFragment.attachTo(activity, executionScope, finishAfterDialog, argumentsForErrorDialog);
-        } else {
-            HoneycombManagerFragment.attachTo(activity, executionScope, finishAfterDialog, argumentsForErrorDialog);
-        }
-    }
-
-    private static boolean isSupportActivity(Activity activity) {
-        boolean isSupport = false;
-        for (Class<?> c = activity.getClass().getSuperclass();; c = c.getSuperclass()) {
-            if (c == null) {
-                throw new RuntimeException("Illegal activity type: " + activity.getClass());
-            }
-            String name = c.getName();
-            if (name.equals("android.support.v4.app.FragmentActivity")) {
-                isSupport = true;
-                break;
-            } else if (name.startsWith("com.actionbarsherlock.app")
-                    && (name.endsWith(".SherlockActivity") || name.endsWith(".SherlockListActivity") || name
-                            .endsWith(".SherlockPreferenceActivity"))) {
-                throw new RuntimeException("Please use SherlockFragmentActivity. Illegal activity: " + name);
-            } else if (name.equals("android.app.Activity")) {
-                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
-                    throw new RuntimeException(
-                            "Illegal activity without fragment support. Either use Android 3.0+ or android.support.v4.app.FragmentActivity.");
-                }
-                break;
-            }
-        }
-        return isSupport;
-    }
-
-    protected static void checkLogException(ThrowableFailureEvent event) {
-        if (factory.config.logExceptions) {
-            String tag = factory.config.tagForLoggingExceptions;
-            if (tag == null) {
-                tag = EventBus.TAG;
-            }
-            Log.i(tag, "Error dialog manager received exception", event.throwable);
-        }
-    }
-
-    private static boolean isInExecutionScope(Object executionScope, ThrowableFailureEvent event) {
-        if (event != null) {
-            Object eventExecutionScope = event.getExecutionScope();
-            if (eventExecutionScope != null && !eventExecutionScope.equals(executionScope)) {
-                // Event not in our scope, do nothing
-                return false;
-            }
-        }
-        return true;
-    }
-
-}
diff --git a/EventBus/src/de/greenrobot/event/util/ExceptionToResourceMapping.java b/EventBus/src/de/greenrobot/event/util/ExceptionToResourceMapping.java
deleted file mode 100644
index d3286175..00000000
--- a/EventBus/src/de/greenrobot/event/util/ExceptionToResourceMapping.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package de.greenrobot.event.util;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-
-import android.util.Log;
-import de.greenrobot.event.EventBus;
-
-
-/**
- * Maps throwables to texts for error dialogs. Use Config to configure the mapping.
- * 
- * @author Markus
- */
-public class ExceptionToResourceMapping {
-
-    public final Map<Class<? extends Throwable>, Integer> throwableToMsgIdMap;
-
-    public ExceptionToResourceMapping() {
-        throwableToMsgIdMap = new HashMap<Class<? extends Throwable>, Integer>();
-    }
-
-    /** Looks at the exception and its causes trying to find an ID. */
-    public Integer mapThrowable(final Throwable throwable) {
-        Throwable throwableToCheck = throwable;
-        int depthToGo = 20;
-
-        while (true) {
-            Integer resId = mapThrowableFlat(throwableToCheck);
-            if (resId != null) {
-                return resId;
-            } else {
-                throwableToCheck = throwableToCheck.getCause();
-                depthToGo--;
-                if (depthToGo <= 0 || throwableToCheck == throwable || throwableToCheck == null) {
-                    Log.d(EventBus.TAG, "No specific message ressource ID found for " + throwable);
-                    // return config.defaultErrorMsgId;
-                    return null;
-                }
-            }
-        }
-
-    }
-
-    /** Mapping without checking the cause (done in mapThrowable). */
-    protected Integer mapThrowableFlat(Throwable throwable) {
-        Class<? extends Throwable> throwableClass = throwable.getClass();
-        Integer resId = throwableToMsgIdMap.get(throwableClass);
-        if (resId == null) {
-            Class<? extends Throwable> closestClass = null;
-            Set<Entry<Class<? extends Throwable>, Integer>> mappings = throwableToMsgIdMap.entrySet();
-            for (Entry<Class<? extends Throwable>, Integer> mapping : mappings) {
-                Class<? extends Throwable> candidate = mapping.getKey();
-                if (candidate.isAssignableFrom(throwableClass)) {
-                    if (closestClass == null || closestClass.isAssignableFrom(candidate)) {
-                        closestClass = candidate;
-                        resId = mapping.getValue();
-                    }
-                }
-            }
-
-        }
-        return resId;
-    }
-
-    public ExceptionToResourceMapping addMapping(Class<? extends Throwable> clazz, int msgId) {
-        throwableToMsgIdMap.put(clazz, msgId);
-        return this;
-    }
-
-}
diff --git a/EventBus/src/de/greenrobot/event/util/HasExecutionScope.java b/EventBus/src/de/greenrobot/event/util/HasExecutionScope.java
deleted file mode 100644
index d759d2c2..00000000
--- a/EventBus/src/de/greenrobot/event/util/HasExecutionScope.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package de.greenrobot.event.util;
-
-public interface HasExecutionScope {
-    Object getExecutionScope();
-
-    void setExecutionScope(Object executionScope);
-
-}
diff --git a/EventBus/src/de/greenrobot/event/util/ThrowableFailureEvent.java b/EventBus/src/de/greenrobot/event/util/ThrowableFailureEvent.java
deleted file mode 100644
index 7c6c07fa..00000000
--- a/EventBus/src/de/greenrobot/event/util/ThrowableFailureEvent.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.event.util;
-
-/**
- * A generic failure event, which can be used by apps to propagate thrown exceptions. Also used in conjunction with
- * {@link ErrorDialogManager}.
- */
-public class ThrowableFailureEvent implements HasExecutionScope {
-    protected final Throwable throwable;
-    protected final boolean suppressErrorUi;
-    private Object executionContext;
-
-    public ThrowableFailureEvent(Throwable throwable) {
-        this.throwable = throwable;
-        suppressErrorUi = false;
-    }
-
-    /**
-     * @param suppressErrorUi
-     *            true indicates to the receiver that no error UI (e.g. dialog) should now displayed.
-     */
-    public ThrowableFailureEvent(Throwable throwable, boolean suppressErrorUi) {
-        this.throwable = throwable;
-        this.suppressErrorUi = suppressErrorUi;
-    }
-
-    public Throwable getThrowable() {
-        return throwable;
-    }
-
-    public boolean isSuppressErrorUi() {
-        return suppressErrorUi;
-    }
-
-    public Object getExecutionScope() {
-        return executionContext;
-    }
-
-    public void setExecutionScope(Object executionContext) {
-        this.executionContext = executionContext;
-    }
-    
-}
diff --git a/EventBusPerformance/.classpath b/EventBusPerformance/.classpath
deleted file mode 100644
index 7bc01d9a..00000000
--- a/EventBusPerformance/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/EventBusPerformance/.gitignore b/EventBusPerformance/.gitignore
deleted file mode 100644
index a22392ad..00000000
--- a/EventBusPerformance/.gitignore
+++ /dev/null
@@ -1,2 +0,0 @@
-/bin
-/gen
diff --git a/EventBusPerformance/.project b/EventBusPerformance/.project
deleted file mode 100644
index b29334b1..00000000
--- a/EventBusPerformance/.project
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>EventBusPerformance</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/EventBusPerformance/.settings/org.eclipse.jdt.core.prefs b/EventBusPerformance/.settings/org.eclipse.jdt.core.prefs
deleted file mode 100644
index f77b31c2..00000000
--- a/EventBusPerformance/.settings/org.eclipse.jdt.core.prefs
+++ /dev/null
@@ -1,4 +0,0 @@
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
-org.eclipse.jdt.core.compiler.compliance=1.5
-org.eclipse.jdt.core.compiler.source=1.5
diff --git a/EventBusPerformance/AndroidManifest.xml b/EventBusPerformance/AndroidManifest.xml
deleted file mode 100644
index 4967dc56..00000000
--- a/EventBusPerformance/AndroidManifest.xml
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.eventperf"
-    android:versionCode="3"
-    android:versionName="1.1.0" >
-
-    <uses-sdk
-        android:minSdkVersion="7"
-        android:targetSdkVersion="17" />
-
-    <uses-feature
-        android:name="android.hardware.touchscreen"
-        android:required="false" />
-
-    <application
-        android:icon="@drawable/ic_launcher"
-        android:label="@string/app_name" >
-        <activity
-            android:name=".TestSetupActivity"
-            android:label="@string/app_name" >
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-        <activity
-            android:name=".TestRunnerActivity"
-            android:label="@string/app_name"
-            android:process="de.greenrobot.eventperf.benchmark" >
-        </activity>
-    </application>
-
-</manifest>
\ No newline at end of file
diff --git a/EventBusPerformance/build.gradle b/EventBusPerformance/build.gradle
index 570c64b0..beb194d5 100644
--- a/EventBusPerformance/build.gradle
+++ b/EventBusPerformance/build.gradle
@@ -1,35 +1,24 @@
-buildscript {
-    repositories {
-        mavenCentral()
-    }
+apply plugin: 'com.android.application'
 
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.1.0'
-    }
-}
+android {
+    compileSdkVersion 23
+    buildToolsVersion "23.0.1"
 
-apply plugin: 'com.android.application'
+    defaultConfig {
+        applicationId "de.greenrobot.eventperf"
+        minSdkVersion 8
+        targetSdkVersion 23
+    }
 
-repositories {
-    mavenCentral()
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
+        }
+    }
 }
 
 dependencies {
     compile project(':EventBus')
     compile 'com.squareup:otto:1.3.5'
-}
-
-android {
-    buildToolsVersion '21.1.2'
-    compileSdkVersion 19
-
-    sourceSets {
-        main {
-            manifest.srcFile 'AndroidManifest.xml'
-            java.srcDirs = ['src']
-            res.srcDirs = ['res']
-        }
-
-    }
-
-}
+}
\ No newline at end of file
diff --git a/EventBusPerformance/proguard-project.txt b/EventBusPerformance/proguard-project.txt
deleted file mode 100644
index f2fe1559..00000000
--- a/EventBusPerformance/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/EventBusPerformance/project.properties b/EventBusPerformance/project.properties
deleted file mode 100644
index d6659d53..00000000
--- a/EventBusPerformance/project.properties
+++ /dev/null
@@ -1,14 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}\tools\proguard\proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-17
diff --git a/EventBusPerformance/res/drawable-hdpi/ic_launcher.png b/EventBusPerformance/res/drawable-hdpi/ic_launcher.png
deleted file mode 100644
index 96a442e5..00000000
Binary files a/EventBusPerformance/res/drawable-hdpi/ic_launcher.png and /dev/null differ
diff --git a/EventBusPerformance/res/drawable-ldpi/ic_launcher.png b/EventBusPerformance/res/drawable-ldpi/ic_launcher.png
deleted file mode 100644
index 99238729..00000000
Binary files a/EventBusPerformance/res/drawable-ldpi/ic_launcher.png and /dev/null differ
diff --git a/EventBusPerformance/res/drawable-mdpi/ic_launcher.png b/EventBusPerformance/res/drawable-mdpi/ic_launcher.png
deleted file mode 100644
index 359047df..00000000
Binary files a/EventBusPerformance/res/drawable-mdpi/ic_launcher.png and /dev/null differ
diff --git a/EventBusPerformance/res/drawable-xhdpi/ic_launcher.png b/EventBusPerformance/res/drawable-xhdpi/ic_launcher.png
deleted file mode 100644
index 71c6d760..00000000
Binary files a/EventBusPerformance/res/drawable-xhdpi/ic_launcher.png and /dev/null differ
diff --git a/EventBusPerformance/res/layout/activity_runtests.xml b/EventBusPerformance/res/layout/activity_runtests.xml
deleted file mode 100644
index 13656a86..00000000
--- a/EventBusPerformance/res/layout/activity_runtests.xml
+++ /dev/null
@@ -1,54 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical" >
-
-    <TextView
-        android:id="@+id/textViewTestRunning"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_centerInParent="true"
-        android:background="#88333333"
-        android:gravity="center"
-        android:padding="15dp"
-        android:text="@string/testIsRunning"
-        android:textColor="#ffffff"
-        android:textSize="30sp"
-        android:textStyle="bold" />
-
-    <ScrollView
-        android:id="@+id/scrollViewResults"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:layout_above="@+id/buttonCancel"
-        android:fillViewport="true" >
-
-        <TextView
-            android:id="@+id/textViewResult"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:textSize="16sp" />
-    </ScrollView>
-
-    <Button
-        android:id="@+id/buttonCancel"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_above="@+id/buttonKillProcess"
-        android:layout_alignWithParentIfMissing="true"
-        android:layout_margin="16dp"
-        android:onClick="onClickCancel"
-        android:text="@string/buttonCancel" />
-
-    <Button
-        android:id="@+id/buttonKillProcess"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_alignParentBottom="true"
-        android:layout_margin="16dp"
-        android:onClick="onClickKillProcess"
-        android:text="@string/buttonKillProcess"
-        android:visibility="gone" />
-
-</RelativeLayout>
\ No newline at end of file
diff --git a/EventBusPerformance/res/layout/activity_setuptests.xml b/EventBusPerformance/res/layout/activity_setuptests.xml
deleted file mode 100644
index da77afe6..00000000
--- a/EventBusPerformance/res/layout/activity_setuptests.xml
+++ /dev/null
@@ -1,137 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/LinearLayout1"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:focusableInTouchMode="true"
-    android:orientation="vertical" >
-
-    <Spinner
-        android:id="@+id/spinnerTestToRun"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_margin="14dp"
-        android:entries="@array/spinnerTestsToRun" />
-
-    <ScrollView
-        android:id="@+id/scrollViewSettings"
-        android:layout_width="fill_parent"
-        android:layout_height="0dp"
-        android:layout_weight="1" >
-
-        <LinearLayout
-            android:id="@+id/LinearLayout2"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:orientation="vertical"
-            android:paddingLeft="16dp"
-            android:paddingRight="16dp" >
-
-            <CheckBox
-                android:id="@+id/checkBoxEventBus"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:checked="true"
-                android:onClick="checkEventBus"
-                android:text="@string/test_eventBus" />
-
-            <Spinner
-                android:id="@+id/spinnerThread"
-                android:layout_width="fill_parent"
-                android:layout_height="wrap_content"
-                android:layout_marginLeft="48dp"
-                android:entries="@array/spinnerThreadModes" />
-
-            <CheckBox
-                android:id="@+id/checkBoxEventBusEventHierarchy"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:checked="true"
-                android:onClick="checkEventBus"
-                android:layout_marginLeft="48dp"
-                android:text="@string/test_eventBusEventHierarchy" />
-
-            <CheckBox
-                android:id="@+id/checkBoxOtto"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:checked="true"
-                android:layout_marginTop="16dp"
-                android:text="@string/test_otto" />
-
-
-            <CheckBox
-                android:id="@+id/checkBoxBroadcast"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:text="@string/test_broadcast"
-                android:visibility="gone" />
-
-
-            <CheckBox
-                android:id="@+id/checkBoxLocalBroadcast"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginBottom="32dp"
-                android:text="@string/test_localBroadcast"
-                android:visibility="gone" />
-
-            <RelativeLayout
-                android:id="@+id/relativeLayoutForEvents"
-                android:layout_width="fill_parent"
-                android:layout_height="fill_parent"
-                android:layout_marginBottom="18dp" >
-
-                <EditText
-                    android:id="@+id/editTextEvent"
-                    android:layout_width="90dp"
-                    android:layout_height="wrap_content"
-                    android:layout_alignParentRight="true"
-                    android:inputType="number"
-                    android:text="1000" />
-
-                <TextView
-                    android:id="@+id/eventView"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:layout_alignBaseline="@+id/editTextEvent"
-                    android:layout_alignParentLeft="true"
-                    android:layout_toLeftOf="@+id/editTextEvent"
-                    android:text="@string/eventViewText" />
-            </RelativeLayout>
-
-            <RelativeLayout
-                android:id="@+id/relativeLayoutForSubscribers"
-                android:layout_width="fill_parent"
-                android:layout_height="fill_parent"
-                android:layout_marginBottom="8dp" >
-
-                <EditText
-                    android:id="@+id/editTextSubscribe"
-                    android:layout_width="90dp"
-                    android:layout_height="wrap_content"
-                    android:layout_alignParentRight="true"
-                    android:inputType="number"
-                    android:text="1" />
-
-                <TextView
-                    android:id="@+id/subscribe"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:layout_alignBaseline="@+id/editTextSubscribe"
-                    android:layout_alignParentLeft="true"
-                    android:layout_toLeftOf="@+id/editTextSubscribe"
-                    android:text="@string/subscriberViewText" />
-            </RelativeLayout>
-        </LinearLayout>
-    </ScrollView>
-
-    <Button
-        android:id="@+id/buttonStart"
-        android:layout_width="fill_parent"
-        android:layout_height="50dp"
-        android:layout_margin="16dp"
-        android:onClick="startClick"
-        android:text="@string/buttonStartText" />
-
-</LinearLayout>
\ No newline at end of file
diff --git a/EventBusPerformance/res/values/strings.xml b/EventBusPerformance/res/values/strings.xml
deleted file mode 100644
index bdb09805..00000000
--- a/EventBusPerformance/res/values/strings.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-
-    <string name="app_name">Event Performance</string>
-    <string name="test_eventBus">EventBus</string>
-    <string name="test_eventBusEventHierarchy">Event Inheritance</string>
-    <string name="test_otto">OttoBus</string>
-    <string name="test_broadcast">Broadcast</string>
-    <string name="test_localBroadcast">Local Broadcast</string>
-    <string name="eventViewText">Events:</string>
-    <string name="subscriberViewText">Subscribers:</string>
-    <string name="buttonStartText">Start</string>
-
-    <string-array name="spinnerTestsToRun">
-        <item>Post Events</item>
-        <item>Register Subscribers</item>
-        <item>Register Subscribers, no unregister</item>
-        <item>Register Subscribers, 1. time</item>
-    </string-array>
-    <string-array name="spinnerThreadModes">
-        <item>PostThread</item>
-        <item>MainThread</item>
-        <item>BackgroundThread</item>
-        <item>Async</item>
-    </string-array>
-
-    <string name="testIsRunning">Test Is \nRunning!</string>
-    <string name="buttonCancel">Cancel</string>
-    <string name="buttonKillProcess">Kill Process</string>
-    
-</resources>
\ No newline at end of file
diff --git a/EventBusPerformance/src/de/greenrobot/eventperf/Test.java b/EventBusPerformance/src/de/greenrobot/eventperf/Test.java
deleted file mode 100644
index 8c52d9aa..00000000
--- a/EventBusPerformance/src/de/greenrobot/eventperf/Test.java
+++ /dev/null
@@ -1,56 +0,0 @@
-package de.greenrobot.eventperf;
-
-import java.util.concurrent.atomic.AtomicLong;
-
-import android.content.Context;
-
-public abstract class Test {
-    protected final Context context;
-    protected final TestParams params;
-    protected AtomicLong eventsReceivedCount = new AtomicLong();
-    protected long primaryResultMicros;
-    protected int primaryResultCount;
-    protected String otherTestResults;
-
-    protected boolean canceled;
-
-    public Test(Context context, TestParams params) {
-        this.context = context;
-        this.params = params;
-    }
-
-    public void cancel() {
-        canceled = true;
-    }
-
-    /** prepares the test, all things which are not relevant for test results */
-    public abstract void prepareTest();
-
-    public abstract void runTest();
-
-    /** returns the display name of the test. e.g. EventBus */
-    public abstract String getDisplayName();
-
-    protected void waitForReceivedEventCount(int expectedEventCount) {
-        while (eventsReceivedCount.get() < expectedEventCount) {
-            try {
-                Thread.sleep(1);
-            } catch (InterruptedException e) {
-                throw new RuntimeException(e);
-            }
-        }
-    }
-
-    public long getPrimaryResultMicros() {
-        return primaryResultMicros;
-    }
-
-    public double getPrimaryResultRate() {
-        return primaryResultCount / (primaryResultMicros / 1000000d);
-    }
-
-    public String getOtherTestResults() {
-        return otherTestResults;
-    }
-
-}
diff --git a/EventBusPerformance/src/de/greenrobot/eventperf/TestEvent.java b/EventBusPerformance/src/de/greenrobot/eventperf/TestEvent.java
deleted file mode 100644
index b90be773..00000000
--- a/EventBusPerformance/src/de/greenrobot/eventperf/TestEvent.java
+++ /dev/null
@@ -1,6 +0,0 @@
-package de.greenrobot.eventperf;
-
-/** Used by otto and EventBus */
-public class TestEvent {
-
-}
diff --git a/EventBusPerformance/src/de/greenrobot/eventperf/TestFinishedEvent.java b/EventBusPerformance/src/de/greenrobot/eventperf/TestFinishedEvent.java
deleted file mode 100644
index 1e301c9b..00000000
--- a/EventBusPerformance/src/de/greenrobot/eventperf/TestFinishedEvent.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package de.greenrobot.eventperf;
-
-public class TestFinishedEvent {
-
-    public final Test test;
-    public final boolean isLastEvent;
-
-    public TestFinishedEvent(Test test, boolean isLastEvent) {
-        this.test = test;
-        this.isLastEvent = isLastEvent;
-    }
-}
diff --git a/EventBusPerformance/src/de/greenrobot/eventperf/TestParams.java b/EventBusPerformance/src/de/greenrobot/eventperf/TestParams.java
deleted file mode 100644
index 1cebfec2..00000000
--- a/EventBusPerformance/src/de/greenrobot/eventperf/TestParams.java
+++ /dev/null
@@ -1,75 +0,0 @@
-package de.greenrobot.eventperf;
-
-import java.io.Serializable;
-import java.util.ArrayList;
-
-import de.greenrobot.event.ThreadMode;
-
-public class TestParams implements Serializable {
-    private static final long serialVersionUID = -2739435088947740809L;
-
-    private int eventCount;
-    private int subscriberCount;
-    private int publisherCount;
-    private ThreadMode threadMode;
-    private boolean eventInheritance;
-    private int testNumber;
-    private ArrayList<Class<? extends Test>> testClasses;
-
-    public int getEventCount() {
-        return eventCount;
-    }
-
-    public void setEventCount(int iterations) {
-        this.eventCount = iterations;
-    }
-
-    public int getSubscriberCount() {
-        return subscriberCount;
-    }
-
-    public void setSubscriberCount(int subscriberCount) {
-        this.subscriberCount = subscriberCount;
-    }
-
-    public int getPublisherCount() {
-        return publisherCount;
-    }
-
-    public void setPublisherCount(int publisherCount) {
-        this.publisherCount = publisherCount;
-    }
-
-    public ThreadMode getThreadMode() {
-        return threadMode;
-    }
-
-    public void setThreadMode(ThreadMode threadMode) {
-        this.threadMode = threadMode;
-    }
-
-    public boolean isEventInheritance() {
-        return eventInheritance;
-    }
-
-    public void setEventInheritance(boolean eventInheritance) {
-        this.eventInheritance = eventInheritance;
-    }
-
-    public ArrayList<Class<? extends Test>> getTestClasses() {
-        return testClasses;
-    }
-
-    public void setTestClasses(ArrayList<Class<? extends Test>> testClasses) {
-        this.testClasses = testClasses;
-    }
-
-    public int getTestNumber() {
-        return testNumber;
-    }
-
-    public void setTestNumber(int testNumber) {
-        this.testNumber = testNumber;
-    }
-
-}
diff --git a/EventBusPerformance/src/de/greenrobot/eventperf/TestRunner.java b/EventBusPerformance/src/de/greenrobot/eventperf/TestRunner.java
deleted file mode 100644
index e593c8e3..00000000
--- a/EventBusPerformance/src/de/greenrobot/eventperf/TestRunner.java
+++ /dev/null
@@ -1,69 +0,0 @@
-package de.greenrobot.eventperf;
-
-import java.lang.reflect.Constructor;
-import java.util.ArrayList;
-import java.util.List;
-
-import android.content.Context;
-import de.greenrobot.event.EventBus;
-
-/**
- * This thread initialize all selected tests and runs them through. Also the thread skips the tests, when it is canceled
- */
-public class TestRunner extends Thread {
-    private List<Test> tests;
-    private volatile boolean canceled;
-    private final EventBus controlBus;
-
-    public TestRunner(Context context, TestParams testParams, EventBus controlBus) {
-        this.controlBus = controlBus;
-        tests = new ArrayList<Test>();
-        for (Class<? extends Test> testClazz : testParams.getTestClasses()) {
-            try {
-                Constructor<?>[] constructors = testClazz.getConstructors();
-                Constructor<? extends Test> constructor = testClazz.getConstructor(Context.class, TestParams.class);
-                Test test = constructor.newInstance(context, testParams);
-                tests.add(test);
-            } catch (Exception e) {
-                throw new RuntimeException(e);
-            }
-        }
-    }
-
-    public void run() {
-
-        int idx = 0;
-        for (Test test : tests) {
-            // Clean up and let the main thread calm down
-            System.gc();
-            try {
-                Thread.sleep(300);
-                System.gc();
-                Thread.sleep(300);
-            } catch (InterruptedException e) {
-            }
-
-            test.prepareTest();
-            if (!canceled) {
-                test.runTest();
-            }
-            if (!canceled) {
-                boolean isLastEvent = idx == tests.size() - 1;
-                controlBus.post(new TestFinishedEvent(test, isLastEvent));
-            }
-            idx++;
-        }
-
-    }
-
-    public List<Test> getTests() {
-        return tests;
-    }
-
-    public void cancel() {
-        canceled = true;
-        for (Test test : tests) {
-            test.cancel();
-        }
-    }
-}
diff --git a/EventBusPerformance/src/de/greenrobot/eventperf/TestRunnerActivity.java b/EventBusPerformance/src/de/greenrobot/eventperf/TestRunnerActivity.java
deleted file mode 100644
index 127d528b..00000000
--- a/EventBusPerformance/src/de/greenrobot/eventperf/TestRunnerActivity.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package de.greenrobot.eventperf;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.os.Process;
-import android.text.Html;
-import android.view.View;
-import android.widget.TextView;
-import de.greenrobot.event.EventBus;
-
-/**
- * This activity gets the information from the activity before, sets up the test and starts the test. After it watchs
- * after that, if a test is finished. When a test is finished, the activity appends it on the textview analyse. If all
- * test are finished, it cancels the timer.
- */
-public class TestRunnerActivity extends Activity {
-
-    private TestRunner testRunner;
-    private EventBus controlBus;
-    private TextView textViewResult;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_runtests);
-        textViewResult = (TextView) findViewById(R.id.textViewResult);
-        controlBus = new EventBus();
-        controlBus.register(this);
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        if (testRunner == null) {
-            TestParams testParams = (TestParams) getIntent().getSerializableExtra("params");
-            testRunner = new TestRunner(getApplicationContext(), testParams, controlBus);
-
-            if (testParams.getTestNumber() == 1) {
-                textViewResult.append("Events: " + testParams.getEventCount() + "\n");
-            }
-            textViewResult.append("Subscribers: " + testParams.getSubscriberCount() + "\n\n");
-            testRunner.start();
-        }
-    }
-
-    public void onEventMainThread(TestFinishedEvent event) {
-        Test test = event.test;
-        String text = "<b>" + test.getDisplayName() + "</b><br/>" + //
-                test.getPrimaryResultMicros() + " micro seconds<br/>" + //
-                ((int) test.getPrimaryResultRate()) + "/s<br/>";
-        if (test.getOtherTestResults() != null) {
-            text += test.getOtherTestResults();
-        }
-        text += "<br/>----------------<br/>";
-        textViewResult.append(Html.fromHtml(text));
-        if (event.isLastEvent) {
-            findViewById(R.id.buttonCancel).setVisibility(View.GONE);
-            findViewById(R.id.textViewTestRunning).setVisibility(View.GONE);
-            findViewById(R.id.buttonKillProcess).setVisibility(View.VISIBLE);
-        }
-    }
-
-    public void onClickCancel(View view) {
-        // Cancel asap
-        if (testRunner != null) {
-            testRunner.cancel();
-            testRunner = null;
-        }
-        finish();
-    }
-
-    public void onClickKillProcess(View view) {
-        Process.killProcess(Process.myPid());
-    }
-
-    public void onDestroy() {
-        if (testRunner != null) {
-            testRunner.cancel();
-        }
-        controlBus.unregister(this);
-        super.onDestroy();
-    }
-}
diff --git a/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java
deleted file mode 100644
index 2b018b41..00000000
--- a/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java
+++ /dev/null
@@ -1,104 +0,0 @@
-package de.greenrobot.eventperf;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.AdapterView;
-import android.widget.CheckBox;
-import android.widget.EditText;
-import android.widget.Spinner;
-import de.greenrobot.event.ThreadMode;
-import de.greenrobot.eventperf.testsubject.PerfTestEventBus;
-import de.greenrobot.eventperf.testsubject.PerfTestOtto;
-
-import java.util.ArrayList;
-
-public class TestSetupActivity extends Activity {
-
-    @SuppressWarnings("rawtypes")
-    static final Class[] TEST_CLASSES_EVENTBUS = {PerfTestEventBus.Post.class,//
-            PerfTestEventBus.RegisterOneByOne.class,//
-            PerfTestEventBus.RegisterAll.class, //
-            PerfTestEventBus.RegisterFirstTime.class};
-
-    static final Class[] TEST_CLASSES_OTTO = {PerfTestOtto.Post.class,//
-            PerfTestOtto.RegisterOneByOne.class,//
-            PerfTestOtto.RegisterAll.class, //
-            PerfTestOtto.RegisterFirstTime.class};
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_setuptests);
-
-        Spinner spinnerRun = (Spinner) findViewById(R.id.spinnerTestToRun);
-        spinnerRun.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
-
-            public void onItemSelected(AdapterView<?> adapter, View v, int pos, long lng) {
-                int eventsVisibility = pos == 0 ? View.VISIBLE : View.GONE;
-                findViewById(R.id.relativeLayoutForEvents).setVisibility(eventsVisibility);
-                findViewById(R.id.spinnerThread).setVisibility(eventsVisibility);
-            }
-
-            public void onNothingSelected(AdapterView<?> arg0) {
-            }
-        });
-    }
-
-    public void checkEventBus(View v) {
-        Spinner spinnerThread = (Spinner) findViewById(R.id.spinnerThread);
-        CheckBox checkBoxEventBus = (CheckBox) findViewById(R.id.checkBoxEventBus);
-        int visibility = checkBoxEventBus.isChecked() ? View.VISIBLE : View.GONE;
-        spinnerThread.setVisibility(visibility);
-    }
-
-    public void startClick(View v) {
-        TestParams params = new TestParams();
-        Spinner spinnerThread = (Spinner) findViewById(R.id.spinnerThread);
-        String threadModeStr = spinnerThread.getSelectedItem().toString();
-        ThreadMode threadMode = ThreadMode.valueOf(threadModeStr);
-        params.setThreadMode(threadMode);
-
-        params.setEventInheritance(((CheckBox) findViewById(R.id.checkBoxEventBusEventHierarchy)).isChecked());
-
-        EditText editTextEvent = (EditText) findViewById(R.id.editTextEvent);
-        params.setEventCount(Integer.parseInt(editTextEvent.getText().toString()));
-
-        EditText editTextSubscriber = (EditText) findViewById(R.id.editTextSubscribe);
-        params.setSubscriberCount(Integer.parseInt(editTextSubscriber.getText().toString()));
-
-        Spinner spinnerTestToRun = (Spinner) findViewById(R.id.spinnerTestToRun);
-        int testPos = spinnerTestToRun.getSelectedItemPosition();
-        params.setTestNumber(testPos + 1);
-        ArrayList<Class<? extends Test>> testClasses = initTestClasses(testPos);
-        params.setTestClasses(testClasses);
-
-        Intent intent = new Intent();
-        intent.setClass(this, TestRunnerActivity.class);
-        intent.putExtra("params", params);
-        startActivity(intent);
-    }
-
-    @SuppressWarnings("unchecked")
-    private ArrayList<Class<? extends Test>> initTestClasses(int testPos) {
-        ArrayList<Class<? extends Test>> testClasses = new ArrayList<Class<? extends Test>>();
-        // the attributes are putted in the intent (eventbus, otto, broadcast, local broadcast)
-        final CheckBox checkBoxEventBus = (CheckBox) findViewById(R.id.checkBoxEventBus);
-        final CheckBox checkBoxOtto = (CheckBox) findViewById(R.id.checkBoxOtto);
-        final CheckBox checkBoxBroadcast = (CheckBox) findViewById(R.id.checkBoxBroadcast);
-        final CheckBox checkBoxLocalBroadcast = (CheckBox) findViewById(R.id.checkBoxLocalBroadcast);
-        if (checkBoxEventBus.isChecked()) {
-            testClasses.add(TEST_CLASSES_EVENTBUS[testPos]);
-        }
-        if (checkBoxOtto.isChecked()) {
-            testClasses.add(TEST_CLASSES_OTTO[testPos]);
-        }
-        if (checkBoxBroadcast.isChecked()) {
-        }
-        if (checkBoxLocalBroadcast.isChecked()) {
-        }
-
-        return testClasses;
-    }
-}
\ No newline at end of file
diff --git a/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestEventBus.java b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestEventBus.java
deleted file mode 100644
index 16920dc3..00000000
--- a/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestEventBus.java
+++ /dev/null
@@ -1,282 +0,0 @@
-package de.greenrobot.eventperf.testsubject;
-
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-
-import android.content.Context;
-import de.greenrobot.event.EventBus;
-import de.greenrobot.eventperf.Test;
-import de.greenrobot.eventperf.TestEvent;
-import de.greenrobot.eventperf.TestParams;
-
-public abstract class PerfTestEventBus extends Test {
-
-    private final EventBus eventBus;
-    private final ArrayList<Object> subscribers;
-    private final Class<?> subscriberClass;
-    private final int eventCount;
-    private final int expectedEventCount;
-
-    public PerfTestEventBus(Context context, TestParams params) {
-        super(context, params);
-        eventBus = EventBus.builder().eventInheritance(params.isEventInheritance()).build();
-        subscribers = new ArrayList<Object>();
-        eventCount = params.getEventCount();
-        expectedEventCount = eventCount * params.getSubscriberCount();
-        subscriberClass = getSubscriberClassForThreadMode();
-    }
-
-    @Override
-    public void prepareTest() {
-        try {
-            Constructor<?> constructor = subscriberClass.getConstructor(PerfTestEventBus.class);
-            for (int i = 0; i < params.getSubscriberCount(); i++) {
-                Object subscriber = constructor.newInstance(this);
-                subscribers.add(subscriber);
-            }
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    private Class<?> getSubscriberClassForThreadMode() {
-        switch (params.getThreadMode()) {
-            case MainThread:
-                return SubscribeClassEventBusMain.class;
-            case BackgroundThread:
-                return SubscribeClassEventBusBackground.class;
-            case Async:
-                return SubscriberClassEventBusAsync.class;
-            case PostThread:
-                return SubscribeClassEventBusDefault.class;
-            default:
-                throw new RuntimeException("Unknown: " + params.getThreadMode());
-        }
-    }
-
-    public static class Post extends PerfTestEventBus {
-        public Post(Context context, TestParams params) {
-            super(context, params);
-        }
-
-        @Override
-        public void prepareTest() {
-            super.prepareTest();
-            super.registerSubscribers();
-        }
-
-        public void runTest() {
-            TestEvent event = new TestEvent();
-            long timeStart = System.nanoTime();
-            for (int i = 0; i < super.eventCount; i++) {
-                super.eventBus.post(event);
-                if (canceled) {
-                    break;
-                }
-            }
-            long timeAfterPosting = System.nanoTime();
-            waitForReceivedEventCount(super.expectedEventCount);
-            long timeAllReceived = System.nanoTime();
-
-            primaryResultMicros = (timeAfterPosting - timeStart) / 1000;
-            primaryResultCount = super.expectedEventCount;
-            long deliveredMicros = (timeAllReceived - timeStart) / 1000;
-            int deliveryRate = (int) (primaryResultCount / (deliveredMicros / 1000000d));
-            otherTestResults = "Post and delivery time: " + deliveredMicros + " micros<br/>" + //
-                    "Post and delivery rate: " + deliveryRate + "/s";
-        }
-
-        @Override
-        public String getDisplayName() {
-            String inheritance = params.isEventInheritance() ? ", event inheritance" : ", no event inheritance";
-            return "EventBus Post Events, " + params.getThreadMode() + inheritance;
-        }
-    }
-
-    public static class RegisterAll extends PerfTestEventBus {
-        public RegisterAll(Context context, TestParams params) {
-            super(context, params);
-        }
-
-        public void runTest() {
-            super.registerUnregisterOneSubscribers();
-            long timeNanos = super.registerSubscribers();
-            primaryResultMicros = timeNanos / 1000;
-            primaryResultCount = params.getSubscriberCount();
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "EventBus Register, no unregister";
-        }
-    }
-
-    public static class RegisterOneByOne extends PerfTestEventBus {
-        protected Method clearCachesMethod;
-
-        public RegisterOneByOne(Context context, TestParams params) {
-            super(context, params);
-        }
-
-        public void runTest() {
-            long time = 0;
-            if (clearCachesMethod == null) {
-                // Skip first registration unless just the first registration is tested
-                super.registerUnregisterOneSubscribers();
-            }
-            for (Object subscriber : super.subscribers) {
-                if (clearCachesMethod != null) {
-                    try {
-                        clearCachesMethod.invoke(null);
-                    } catch (Exception e) {
-                        throw new RuntimeException(e);
-                    }
-                }
-                long beforeRegister = System.nanoTime();
-                super.eventBus.register(subscriber);
-                long timeRegister = System.nanoTime() - beforeRegister;
-                time += timeRegister;
-                super.eventBus.unregister(subscriber);
-                if (canceled) {
-                    return;
-                }
-            }
-
-            primaryResultMicros = time / 1000;
-            primaryResultCount = params.getSubscriberCount();
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "EventBus Register";
-        }
-    }
-
-    public static class RegisterFirstTime extends RegisterOneByOne {
-
-        public RegisterFirstTime(Context context, TestParams params) {
-            super(context, params);
-            try {
-                Class<?> clazz = Class.forName("de.greenrobot.event.SubscriberMethodFinder");
-                clearCachesMethod = clazz.getDeclaredMethod("clearCaches");
-                clearCachesMethod.setAccessible(true);
-            } catch (Exception e) {
-                throw new RuntimeException(e);
-            }
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "EventBus Register, first time";
-        }
-
-    }
-
-    public class SubscribeClassEventBusDefault {
-        public void onEvent(TestEvent event) {
-            eventsReceivedCount.incrementAndGet();
-        }
-
-        public void dummy() {
-        }
-
-        public void dummy2() {
-        }
-
-        public void dummy3() {
-        }
-
-        public void dummy4() {
-        }
-
-        public void dummy5() {
-        }
-    }
-
-    public class SubscribeClassEventBusMain {
-        public void onEventMainThread(TestEvent event) {
-            eventsReceivedCount.incrementAndGet();
-        }
-
-        public void dummy() {
-        }
-
-        public void dummy2() {
-        }
-
-        public void dummy3() {
-        }
-
-        public void dummy4() {
-        }
-
-        public void dummy5() {
-        }
-    }
-
-    public class SubscribeClassEventBusBackground {
-        public void onEventBackgroundThread(TestEvent event) {
-            eventsReceivedCount.incrementAndGet();
-        }
-
-        public void dummy() {
-        }
-
-        public void dummy2() {
-        }
-
-        public void dummy3() {
-        }
-
-        public void dummy4() {
-        }
-
-        public void dummy5() {
-        }
-    }
-
-    public class SubscriberClassEventBusAsync {
-        public void onEventAsync(TestEvent event) {
-            eventsReceivedCount.incrementAndGet();
-        }
-
-        public void dummy() {
-        }
-
-        public void dummy2() {
-        }
-
-        public void dummy3() {
-        }
-
-        public void dummy4() {
-        }
-
-        public void dummy5() {
-        }
-    }
-
-    private long registerSubscribers() {
-        long time = 0;
-        for (Object subscriber : subscribers) {
-            long timeStart = System.nanoTime();
-            eventBus.register(subscriber);
-            long timeEnd = System.nanoTime();
-            time += timeEnd - timeStart;
-            if (canceled) {
-                return 0;
-            }
-        }
-        return time;
-    }
-
-    private void registerUnregisterOneSubscribers() {
-        if (!subscribers.isEmpty()) {
-            Object subscriber = subscribers.get(0);
-            eventBus.register(subscriber);
-            eventBus.unregister(subscriber);
-        }
-    }
-
-}
diff --git a/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestOtto.java b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestOtto.java
deleted file mode 100644
index 8e68adde..00000000
--- a/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestOtto.java
+++ /dev/null
@@ -1,213 +0,0 @@
-package de.greenrobot.eventperf.testsubject;
-
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.HashMap;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Looper;
-
-import com.squareup.otto.Bus;
-import com.squareup.otto.Subscribe;
-import com.squareup.otto.ThreadEnforcer;
-
-import de.greenrobot.eventperf.Test;
-import de.greenrobot.eventperf.TestEvent;
-import de.greenrobot.eventperf.TestParams;
-
-public abstract class PerfTestOtto extends Test {
-
-    private final Bus eventBus;
-    private final ArrayList<Object> subscribers;
-    private final Class<?> subscriberClass;
-    private final int eventCount;
-    private final int expectedEventCount;
-
-    public PerfTestOtto(Context context, TestParams params) {
-        super(context, params);
-        eventBus = new Bus(ThreadEnforcer.ANY);
-        subscribers = new ArrayList<Object>();
-        eventCount = params.getEventCount();
-        expectedEventCount = eventCount * params.getSubscriberCount();
-        subscriberClass = Subscriber.class;
-    }
-
-    @Override
-    public void prepareTest() {
-        Looper.prepare();
-
-        try {
-            Constructor<?> constructor = subscriberClass.getConstructor(PerfTestOtto.class);
-            for (int i = 0; i < params.getSubscriberCount(); i++) {
-                Object subscriber = constructor.newInstance(this);
-                subscribers.add(subscriber);
-            }
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    public static class Post extends PerfTestOtto {
-        public Post(Context context, TestParams params) {
-            super(context, params);
-        }
-
-        @Override
-        public void prepareTest() {
-            super.prepareTest();
-            super.registerSubscribers();
-        }
-
-        public void runTest() {
-            TestEvent event = new TestEvent();
-            long timeStart = System.nanoTime();
-            for (int i = 0; i < super.eventCount; i++) {
-                super.eventBus.post(event);
-                if (canceled) {
-                    break;
-                }
-            }
-            long timeAfterPosting = System.nanoTime();
-            waitForReceivedEventCount(super.expectedEventCount);
-
-            primaryResultMicros = (timeAfterPosting - timeStart) / 1000;
-            primaryResultCount = super.expectedEventCount;
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "Otto Post Events";
-        }
-    }
-
-    public static class RegisterAll extends PerfTestOtto {
-        public RegisterAll(Context context, TestParams params) {
-            super(context, params);
-        }
-
-        public void runTest() {
-            super.registerUnregisterOneSubscribers();
-            long timeNanos = super.registerSubscribers();
-            primaryResultMicros = timeNanos / 1000;
-            primaryResultCount = params.getSubscriberCount();
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "Otto Register, no unregister";
-        }
-    }
-
-    public static class RegisterOneByOne extends PerfTestOtto {
-        protected Field cacheField;
-
-        public RegisterOneByOne(Context context, TestParams params) {
-            super(context, params);
-        }
-
-        @SuppressWarnings("rawtypes")
-        public void runTest() {
-            long time = 0;
-            if (cacheField == null) {
-                // Skip first registration unless just the first registration is tested
-                super.registerUnregisterOneSubscribers();
-            }
-            for (Object subscriber : super.subscribers) {
-                if (cacheField != null) {
-                    try {
-                        cacheField.set(null, new HashMap());
-                    } catch (Exception e) {
-                        throw new RuntimeException(e);
-                    }
-                }
-                long beforeRegister = System.nanoTime();
-                super.eventBus.register(subscriber);
-                long timeRegister = System.nanoTime() - beforeRegister;
-                time += timeRegister;
-                super.eventBus.unregister(subscriber);
-                if (canceled) {
-                    return;
-                }
-            }
-
-            primaryResultMicros = time / 1000;
-            primaryResultCount = params.getSubscriberCount();
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "Otto Register";
-        }
-    }
-
-    public static class RegisterFirstTime extends RegisterOneByOne {
-
-        public RegisterFirstTime(Context context, TestParams params) {
-            super(context, params);
-            try {
-                Class<?> clazz = Class.forName("com.squareup.otto.AnnotatedHandlerFinder");
-                cacheField = clazz.getDeclaredField("SUBSCRIBERS_CACHE");
-                cacheField.setAccessible(true);
-            } catch (Exception e) {
-                throw new RuntimeException(e);
-            }
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "Otto Register, first time";
-        }
-
-    }
-
-    public class Subscriber extends Activity {
-        public Subscriber() {
-        }
-
-        @Subscribe
-        public void onEvent(TestEvent event) {
-            eventsReceivedCount.incrementAndGet();
-        }
-
-        public void dummy() {
-        }
-
-        public void dummy2() {
-        }
-
-        public void dummy3() {
-        }
-
-        public void dummy4() {
-        }
-
-        public void dummy5() {
-        }
-
-    }
-
-    private long registerSubscribers() {
-        long time = 0;
-        for (Object subscriber : subscribers) {
-            long timeStart = System.nanoTime();
-            eventBus.register(subscriber);
-            long timeEnd = System.nanoTime();
-            time += timeEnd - timeStart;
-            if (canceled) {
-                return 0;
-            }
-        }
-        return time;
-    }
-
-    private void registerUnregisterOneSubscribers() {
-        if (!subscribers.isEmpty()) {
-            Object subscriber = subscribers.get(0);
-            eventBus.register(subscriber);
-            eventBus.unregister(subscriber);
-        }
-    }
-
-}
diff --git a/EventBusTest/.classpath b/EventBusTest/.classpath
deleted file mode 100644
index 2b16fe8e..00000000
--- a/EventBusTest/.classpath
+++ /dev/null
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/EventBus"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/EventBusTest/.project b/EventBusTest/.project
deleted file mode 100644
index 49b077d3..00000000
--- a/EventBusTest/.project
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>EventBusTest</name>
-	<comment></comment>
-	<projects>
-		<project>greenBus</project>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/EventBusTest/AndroidManifest.xml b/EventBusTest/AndroidManifest.xml
deleted file mode 100644
index 9695813a..00000000
--- a/EventBusTest/AndroidManifest.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.event.testapp"
-    android:versionCode="1"
-    android:versionName="1.0" >
-
-    <uses-sdk android:minSdkVersion="4" />
-
-    <instrumentation
-        android:name="android.test.InstrumentationTestRunner"
-        android:targetPackage="de.greenrobot.event.test" />
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
-
-    <application
-        android:allowBackup="false"
-        android:label="EventBus Test" >
-        <uses-library android:name="android.test.runner" />
-    </application>
-
-</manifest>
\ No newline at end of file
diff --git a/EventBusTest/build.gradle b/EventBusTest/build.gradle
deleted file mode 100644
index 2f48f9c5..00000000
--- a/EventBusTest/build.gradle
+++ /dev/null
@@ -1,39 +0,0 @@
-buildscript {
-    repositories {
-        mavenCentral()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.1.0'
-    }
-}
-
-apply plugin: 'com.android.application'
-
-repositories {
-    mavenCentral()
-}
-
-dependencies {
-    androidTestCompile project(':EventBus')
-}
-
-android {
-    buildToolsVersion '21.1.2'
-    compileSdkVersion 19
-
-    sourceSets {
-        main {
-            manifest.srcFile 'AndroidManifest.xml'
-        }
-
-        androidTest {
-            java.srcDirs = ['src']
-        }
-    }
-
-    defaultConfig {
-        testApplicationId "de.greenrobot.event.test"
-        testInstrumentationRunner "android.test.InstrumentationTestRunner"
-    }
-}
diff --git a/EventBusTest/project.properties b/EventBusTest/project.properties
deleted file mode 100644
index 4655e969..00000000
--- a/EventBusTest/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-17
-android.library.reference.1=../EventBus
diff --git a/build.gradle b/build.gradle
index e69de29b..6a5c233c 100644
--- a/build.gradle
+++ b/build.gradle
@@ -0,0 +1,15 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+buildscript {
+    repositories {
+        jcenter()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.3.0'
+    }
+}
+
+allprojects {
+    repositories {
+        jcenter()
+    }
+}
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index c97a8bdb..8c0fb64a 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index c8dcd502..0c71e760 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,4 +1,4 @@
-#Sun Feb 22 14:20:02 CET 2015
+#Wed Apr 10 15:27:10 PDT 2013
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
diff --git a/settings.gradle b/settings.gradle
index 76c570b0..073b0fc6 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,3 +1,2 @@
-include 'EventBus'
-include 'EventBusTest'
-include 'EventBusPerformance'
+include ':EventBus'
+include ':EventBusPerformance'
