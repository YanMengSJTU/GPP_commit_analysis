diff --git a/EventBus/src/org/greenrobot/eventbus/EventBus.java b/EventBus/src/org/greenrobot/eventbus/EventBus.java
index daaa6920..f1e8bc98 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBus.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java
@@ -73,7 +73,7 @@ protected PostingThreadState initialValue() {
     private final boolean logNoSubscriberMessages;
     private final boolean sendSubscriberExceptionEvent;
     private final boolean sendNoSubscriberEvent;
-//  默认为true，即EventBus会考虑事件的继承树
+    //  默认为true，即EventBus会考虑事件的继承树
     private final boolean eventInheritance;
 
     private final int indexCount;
@@ -166,7 +166,6 @@ public void register(Object subscriber) {
     // Must be called in synchronized block
 
     /**
-     *
      * @param subscriber
      * @param subscriberMethod
      */
@@ -180,6 +179,7 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
         if (subscriptions == null) {
             subscriptions = new CopyOnWriteArrayList<>();
             subscriptionsByEventType.put(eventType, subscriptions);
+
         } else {
 //            判断新订阅对象是否已存在，若已经存在，则抛出异常
             if (subscriptions.contains(newSubscription)) {
@@ -304,8 +304,7 @@ public void post(Object event) {
 //            循环遍历，直到列表中无事件
             try {
                 while (!eventQueue.isEmpty()) {
-//                    开始发布一个事件
-                    postSingleEvent(eventQueue.remove(0), postingState);
+                    postSingleEvent(eventQueue.remove(0), postingState);// 开始发布一个事件
                 }
             } finally {
 //              posting完后，取消标记
@@ -443,7 +442,6 @@ private void postSingleEvent(Object event, PostingThreadState postingState) thro
     }
 
     /**
-     *
      * @param event
      * @param postingState
      * @param eventClass
@@ -467,7 +465,7 @@ private boolean postSingleEventForEventType(Object event, PostingThreadState pos
                     postToSubscription(subscription, event, postingState.isMainThread);
                     aborted = postingState.canceled;
                 } finally {
-//             一个post完后，清除 postingState中的数据
+//                  一个post完后，清除 postingState中的数据
                     postingState.event = null;
                     postingState.subscription = null;
                     postingState.canceled = false;
@@ -483,6 +481,7 @@ private boolean postSingleEventForEventType(Object event, PostingThreadState pos
 
     /**
      * 开始下发事件，并且根据ThreadMode作不同的下发处理
+     *
      * @param subscription
      * @param event
      * @param isMainThread
diff --git a/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
index 3e2b5c9c..40cbfd44 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
@@ -15,6 +15,7 @@
  */
 package org.greenrobot.eventbus;
 
+import android.os.Handler;
 import android.os.Looper;
 
 import org.greenrobot.eventbus.android.AndroidLogger;
@@ -30,6 +31,7 @@
  * Create a new builder using {@link EventBus#builder()}.
  */
 public class EventBusBuilder {
+
     private final static ExecutorService DEFAULT_EXECUTOR_SERVICE = Executors.newCachedThreadPool();
 
     boolean logSubscriberExceptions = true;
@@ -49,25 +51,33 @@
     EventBusBuilder() {
     }
 
-    /** Default: true */
+    /**
+     * Default: true
+     */
     public EventBusBuilder logSubscriberExceptions(boolean logSubscriberExceptions) {
         this.logSubscriberExceptions = logSubscriberExceptions;
         return this;
     }
 
-    /** Default: true */
+    /**
+     * Default: true
+     */
     public EventBusBuilder logNoSubscriberMessages(boolean logNoSubscriberMessages) {
         this.logNoSubscriberMessages = logNoSubscriberMessages;
         return this;
     }
 
-    /** Default: true */
+    /**
+     * Default: true
+     */
     public EventBusBuilder sendSubscriberExceptionEvent(boolean sendSubscriberExceptionEvent) {
         this.sendSubscriberExceptionEvent = sendSubscriberExceptionEvent;
         return this;
     }
 
-    /** Default: true */
+    /**
+     * Default: true
+     */
     public EventBusBuilder sendNoSubscriberEvent(boolean sendNoSubscriberEvent) {
         this.sendNoSubscriberEvent = sendNoSubscriberEvent;
         return this;
@@ -121,19 +131,25 @@ public EventBusBuilder skipMethodVerificationFor(Class<?> clazz) {
         return this;
     }
 
-    /** Forces the use of reflection even if there's a generated index (default: false). */
+    /**
+     * Forces the use of reflection even if there's a generated index (default: false).
+     */
     public EventBusBuilder ignoreGeneratedIndex(boolean ignoreGeneratedIndex) {
         this.ignoreGeneratedIndex = ignoreGeneratedIndex;
         return this;
     }
 
-    /** Enables strict method verification (default: false). */
+    /**
+     * Enables strict method verification (default: false).
+     */
     public EventBusBuilder strictMethodVerification(boolean strictMethodVerification) {
         this.strictMethodVerification = strictMethodVerification;
         return this;
     }
 
-    /** Adds an index generated by EventBus' annotation preprocessor. */
+    /**
+     * Adds an index generated by EventBus' annotation preprocessor.
+     */
     public EventBusBuilder addIndex(SubscriberInfoIndex index) {
         if (subscriberInfoIndexes == null) {
             subscriberInfoIndexes = new ArrayList<>();
@@ -170,8 +186,7 @@ MainThreadSupport getMainThreadSupport() {
             return mainThreadSupport;
         } else if (AndroidLogger.isAndroidLogAvailable()) {
             Object looperOrNull = getAndroidMainLooperOrNull();
-            return looperOrNull == null ? null :
-                    new MainThreadSupport.AndroidHandlerMainThreadSupport((Looper) looperOrNull);
+            return looperOrNull == null ? null : new MainThreadSupport.AndroidHandlerMainThreadSupport((Looper) looperOrNull);
         } else {
             return null;
         }
@@ -203,7 +218,9 @@ public EventBus installDefaultEventBus() {
         }
     }
 
-    /** Builds an EventBus based on the current configuration. */
+    /**
+     * Builds an EventBus based on the current configuration.
+     */
     public EventBus build() {
         return new EventBus(this);
     }
