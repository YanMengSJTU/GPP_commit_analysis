diff --git a/COMPARISON.md b/COMPARISON.md
new file mode 100644
index 00000000..1ba60ccd
--- /dev/null
+++ b/COMPARISON.md
@@ -0,0 +1,98 @@
+EventBus Comparison
+===================
+
+Comparison with Square's Otto
+-----------------------------
+Otto is another event bus library for Android; actually it's a fork of Guava's EventBus. greenrobot's EventBus and Otto share some basic semantics (register, post, unregister, ...), but there are differences which the following table summarizes:
+<table>
+    <tr>
+        <th></th>
+        <th>EventBus</th>
+        <th>Otto</th>
+    </tr>
+    <tr>
+        <th>Declare event handling methods</th>
+        <td>Name conventions</td>
+        <td>Annotations</td>
+    </tr>	
+    <tr>
+        <th>Event inheritance</th>
+        <td>Yes</td>
+        <td>Yes</td>
+    </tr>	
+    <tr>
+        <th>Subscriber inheritance</th>
+        <td>Yes</td>
+        <td>No</td>
+    </tr>
+    <tr>
+        <th>Cache most recent events</th>
+        <td>Yes, sticky events</td>
+        <td>No</td>
+    </tr>
+    <tr>
+        <th>Event producers (e.g. for coding cached events)</th>
+        <td>No</td>
+        <td>Yes</td>
+    </tr>
+    <tr>
+        <th>Event delivery in posting thread</th>
+        <td>Yes (Default)</td>
+        <td>Yes</td>
+    </tr>	
+    <tr>
+        <th>Event delivery in main thread</th>
+        <td>Yes</td>
+        <td>No</td>
+    </tr>	
+    <tr>
+        <th>Event delivery in background thread</th>
+        <td>Yes</td>
+        <td>No</td>
+    </tr>	
+    <tr>
+        <th>Aynchronous event delivery</th>
+        <td>Yes</td>
+        <td>No</td>
+    </tr>
+</table>
+
+Besides features, performance is another differentiator. To compare performance, we created an Android application, which is also part of this repository (EventBusPerformance). You can also run the app on your phone to benchmark different scenarios.
+
+Benchmark results indicate that EventBus is significantly faster in almost every scenario:
+<table>
+    <tr>
+        <th></th>
+        <th>EventBus</th>
+        <th>Otto</th>
+    </tr>
+    <tr>
+        <th>Posting 1000 events, Android 2.3 emulator</th>
+        <td>~70% faster</td>
+        <td></td>
+    </tr>
+	<tr>
+        <th>Posting 1000 events, S3 Android 4.0</th>
+        <td>~110% faster</td>
+        <td></td>
+    </tr>
+    <tr>
+        <th>Register 1000 subscribers, Android 2.3 emulator</th>
+        <td>~10% faster</td>
+        <td></td>
+    </tr>
+    <tr>
+        <th>Register 1000 subscribers, S3 Android 4.0</th>
+        <td>~70% faster</td>
+        <td></td>
+    </tr>
+    <tr>
+        <th>Register subscribers cold start, Android 2.3 emulator</th>
+        <td>~350% faster</td>
+        <td></td>
+    </tr>	
+    <tr>
+        <th>Register subscribers cold start, S3 Android 4.0</th>
+        <td colspan="2">About the same</td>
+    </tr>	
+</table>
diff --git a/HOWTO.md b/HOWTO.md
index 740ad573..ab0729ca 100644
--- a/HOWTO.md
+++ b/HOWTO.md
@@ -181,107 +181,65 @@ You may also get the last sticky event of a certain type with:
     EventBus.getDefault().getStickyEvent(Class<?> eventType)
 ```
 
+It's also possible to remove previously posted sticky events using one of the removeStickyEvent methods. They take either a concrete event object, or an event class. Like this it's possible to create consumable events. Keep in mind though that that only the last event of an event type is kept.
+
 ProGuard configuration
 ----------------------
 ProGuard obfuscates method names. However, the onEvent methods must not renamed because they are accessed using reflection. Use the following snip in your ProGuard configuration file (proguard.cfg):
 <pre><code>-keepclassmembers class ** {
     public void onEvent*(**);
 }
+
+# Only required if you use AsyncExecutor
+-keepclassmembers class * extends de.greenrobot.event.util.ThrowableFailureEvent {
+    <init>(java.lang.Throwable);
+}
 </code></pre>
 
 
+AsyncExecutor
+-------------
+_Disclaimer:_ AsyncExecutor is a non-core utility class. It might save you some code with error handling in background threads, but it's not a core EventBus class.
+
+AsyncExecutor is like a thread pool, but with failure handling. Failures are thrown exceptions, which get are wrapped inside an event, which is posted automatically by AsyncExecutor.
+
+Usually, you call AsyncExecutor.create() to create an instance and keep it in Application scope. To execute something, implement the RunnableEx interface and pass it to the execute method of the AsyncExecutor. Unlike Runnable, RunnableEx may throw an Exception.
+
+If the RunnableEx implementation throws an exception, it will be catched and wrapped into a ThrowableFailureEvent, which will be posted.
+
+Code example for execution:
+
+```java
+AsyncExecutor.create().execute(
+  new RunnableEx {
+    public void run throws LoginException {
+      remote.login();
+      EventBus.getDefault().postSticky(new LoggedInEvent());
+      // No need to catch Exception
+    }
+  }
+}
+```
+
+Code example for the receiving part:
+
+```java
+public void onEventMainThread(LoggedInEvent event) {
+  // Change some UI
+}
+
+public void onEventMainThread(ThrowableFailureEvent event) {
+  // Show error in UI
+}
+```
+
+AsyncExecutor Builder
+---------------------
+If you want to customize your AsyncExecutor instance, call the static method AsyncExecutor.builder(). It will return a builder which lets you customize the EventBus instance, the thread pool, and the class of the failure event.
+
+Another customization options is the execution scope, which gives failure events context information. For example, an failure event may be relevant only to a specific Activity instance or class. If your custom failure event class implements the HasExecutionScope interface, AsyncExecutor will set the execution scope automatically. Like this, your subscriber can query the failure event for its execution scope and react depending on it.
+
+
 Comparison with Square's Otto
 -----------------------------
-Otto is another event bus library for Android; actually it's a fork of Guava's EventBus. greenrobot's EventBus and Otto share some basic semantics (register, post, unregister, ...), but there are differences which the following table summarizes:
-<table>
-    <tr>
-        <th></th>
-        <th>EventBus</th>
-        <th>Otto</th>
-    </tr>
-    <tr>
-        <th>Declare event handling methods</th>
-        <td>Name conventions</td>
-        <td>Annotations</td>
-    </tr>	
-    <tr>
-        <th>Event inheritance</th>
-        <td>Yes</td>
-        <td>Yes</td>
-    </tr>	
-    <tr>
-        <th>Subscriber inheritance</th>
-        <td>Yes</td>
-        <td>No</td>
-    </tr>
-    <tr>
-        <th>Cache most recent events</th>
-        <td>Yes, sticky events</td>
-        <td>No</td>
-    </tr>
-    <tr>
-        <th>Event producers (e.g. for coding cached events)</th>
-        <td>No</td>
-        <td>Yes</td>
-    </tr>
-    <tr>
-        <th>Event delivery in posting thread</th>
-        <td>Yes (Default)</td>
-        <td>Yes</td>
-    </tr>	
-    <tr>
-        <th>Event delivery in main thread</th>
-        <td>Yes</td>
-        <td>No</td>
-    </tr>	
-    <tr>
-        <th>Event delivery in background thread</th>
-        <td>Yes</td>
-        <td>No</td>
-    </tr>	
-    <tr>
-        <th>Aynchronous event delivery</th>
-        <td>Yes</td>
-        <td>No</td>
-    </tr>
-</table>
-
-Besides features, performance is another differentiator. To compare performance, we created an Android application, which is also part of this repository (EventBusPerformance). You can also run the app on your phone to benchmark different scenarios.
-
-Benchmark results indicate that EventBus is significantly faster in almost every scenario:
-<table>
-    <tr>
-        <th></th>
-        <th>EventBus</th>
-        <th>Otto</th>
-    </tr>
-    <tr>
-        <th>Posting 1000 events, Android 2.3 emulator</th>
-        <td>~70% faster</td>
-        <td></td>
-    </tr>
-	<tr>
-        <th>Posting 1000 events, S3 Android 4.0</th>
-        <td>~110% faster</td>
-        <td></td>
-    </tr>
-    <tr>
-        <th>Register 1000 subscribers, Android 2.3 emulator</th>
-        <td>~10% faster</td>
-        <td></td>
-    </tr>
-    <tr>
-        <th>Register 1000 subscribers, S3 Android 4.0</th>
-        <td>~70% faster</td>
-        <td></td>
-    </tr>
-    <tr>
-        <th>Register subscribers cold start, Android 2.3 emulator</th>
-        <td>~350% faster</td>
-        <td></td>
-    </tr>	
-    <tr>
-        <th>Register subscribers cold start, S3 Android 4.0</th>
-        <td colspan="2">About the same</td>
-    </tr>	
-</table>
+Check the [COMPARISON.md](COMPARISON.md)
\ No newline at end of file
diff --git a/README.md b/README.md
index 3e5a457e..e7c6975b 100644
--- a/README.md
+++ b/README.md
@@ -51,6 +51,8 @@ How-to, Developer Documentation
 -------------------------------
 Details on EventBus and its API are available in the [HOWTO document](HOWTO.md).
 
+How does EventBus compare to other solutions, like Otto from Square? Check this [comparison](COMPARISON.md).
+
 Additional Features and Notes
 -----------------------------
 
