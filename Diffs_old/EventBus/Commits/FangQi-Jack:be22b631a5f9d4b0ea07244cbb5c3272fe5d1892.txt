diff --git a/.travis.yml b/.travis.yml
index 5f3aa2fd..2210eda2 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,14 +1,15 @@
 sudo: false
 language: android
 jdk:
-  - oraclejdk7
+  - oraclejdk8
 
 # http://docs.travis-ci.com/user/languages/android/
 android:
   components:
     - tools
-    - build-tools-23.0.2
+    - build-tools-26.0.3
     - android-10
+    - android-26
     - extra-android-m2repository
 
 before_script:
diff --git a/EventBus/build.gradle b/EventBus/build.gradle
index 50637de7..4f3c246e 100644
--- a/EventBus/build.gradle
+++ b/EventBus/build.gradle
@@ -5,7 +5,7 @@ apply plugin: 'idea'
 
 archivesBaseName = 'eventbus'
 group = 'org.greenrobot'
-version = '3.0.0'
+version = '3.1.1'
 sourceCompatibility = 1.7
 
 def isSnapshot = version.endsWith('-SNAPSHOT')
@@ -16,10 +16,6 @@ if(isSnapshot) {
 	sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
 }
 
-repositories {
-    mavenCentral()
-}
-
 // Still unsupported, see http://issues.gradle.org/browse/GRADLE-784
 // Like this, it won't appear at all in the POM
 configurations {
@@ -56,7 +52,7 @@ javadoc {
     failOnError = false
     classpath += configurations.provided
     title = "EventBus ${version} API"
-	options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2012-2016 <a href="http://greenrobot.org">greenrobot.org</a>. All Rights Reserved.</i>'
+	options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2012-2017 <a href="http://greenrobot.org">greenrobot.org</a>. All Rights Reserved.</i>'
 }
 
 task javadocJar(type: Jar, dependsOn: javadoc) {
@@ -87,7 +83,11 @@ signing {
 uploadArchives {
     repositories {
         mavenDeployer {
-            if(project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername') 
+            if (project.hasProperty('preferedRepo')) println "preferedRepo = $preferedRepo"
+            if (project.hasProperty('preferedRepo') && preferedRepo == 'local') {
+                println "Deploying to local repo (aka install)..."
+                repository url: repositories.mavenLocal().url
+            } else if(project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername')
                 && project.hasProperty('preferedPassword')) {
                 configuration = configurations.deployerJars
                 repository(url: preferedRepo) {
diff --git a/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java
index a56f4ebf..90a30d1e 100644
--- a/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java
+++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java
@@ -21,7 +21,7 @@
  * 
  * @author Markus
  */
-class AsyncPoster implements Runnable {
+class AsyncPoster implements Runnable, Poster {
 
     private final PendingPostQueue queue;
     private final EventBus eventBus;
diff --git a/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java
index 2a5319d0..624ddf6d 100644
--- a/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java
+++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java
@@ -15,14 +15,14 @@
  */
 package org.greenrobot.eventbus;
 
-import android.util.Log;
+import java.util.logging.Level;
 
 /**
  * Posts events in background.
- * 
+ *
  * @author Markus
  */
-final class BackgroundPoster implements Runnable {
+final class BackgroundPoster implements Runnable, Poster {
 
     private final PendingPostQueue queue;
     private final EventBus eventBus;
@@ -64,7 +64,7 @@ public void run() {
                     eventBus.invokeSubscriber(pendingPost);
                 }
             } catch (InterruptedException e) {
-                Log.w("Event", Thread.currentThread().getName() + " was interruppted", e);
+                eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + " was interruppted", e);
             }
         } finally {
             executorRunning = false;
diff --git a/EventBus/src/org/greenrobot/eventbus/EventBus.java b/EventBus/src/org/greenrobot/eventbus/EventBus.java
index 1cd57e32..e35ecd38 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBus.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java
@@ -15,9 +15,6 @@
  */
 package org.greenrobot.eventbus;
 
-import android.os.Looper;
-import android.util.Log;
-
 import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -27,6 +24,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.ExecutorService;
+import java.util.logging.Level;
 
 /**
  * EventBus is a central publish/subscribe event system for Android. Events are posted ({@link #post(Object)}) to the
@@ -59,7 +57,10 @@ protected PostingThreadState initialValue() {
         }
     };
 
-    private final HandlerPoster mainThreadPoster;
+    // @Nullable
+    private final MainThreadSupport mainThreadSupport;
+    // @Nullable
+    private final Poster mainThreadPoster;
     private final BackgroundPoster backgroundPoster;
     private final AsyncPoster asyncPoster;
     private final SubscriberMethodFinder subscriberMethodFinder;
@@ -73,17 +74,20 @@ protected PostingThreadState initialValue() {
     private final boolean eventInheritance;
 
     private final int indexCount;
+    private final Logger logger;
 
     /** Convenience singleton for apps using a process-wide EventBus instance. */
     public static EventBus getDefault() {
-        if (defaultInstance == null) {
+        EventBus instance = defaultInstance;
+        if (instance == null) {
             synchronized (EventBus.class) {
-                if (defaultInstance == null) {
-                    defaultInstance = new EventBus();
+                instance = EventBus.defaultInstance;
+                if (instance == null) {
+                    instance = EventBus.defaultInstance = new EventBus();
                 }
             }
         }
-        return defaultInstance;
+        return instance;
     }
 
     public static EventBusBuilder builder() {
@@ -105,10 +109,12 @@ public EventBus() {
     }
 
     EventBus(EventBusBuilder builder) {
+        logger = builder.getLogger();
         subscriptionsByEventType = new HashMap<>();
         typesBySubscriber = new HashMap<>();
         stickyEvents = new ConcurrentHashMap<>();
-        mainThreadPoster = new HandlerPoster(this, Looper.getMainLooper(), 10);
+        mainThreadSupport = builder.getMainThreadSupport();
+        mainThreadPoster = mainThreadSupport != null ? mainThreadSupport.createPoster(this) : null;
         backgroundPoster = new BackgroundPoster(this);
         asyncPoster = new AsyncPoster(this);
         indexCount = builder.subscriberInfoIndexes != null ? builder.subscriberInfoIndexes.size() : 0;
@@ -196,10 +202,20 @@ private void checkPostStickyEventToSubscription(Subscription newSubscription, Ob
         if (stickyEvent != null) {
             // If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)
             // --> Strange corner case, which we don't take care of here.
-            postToSubscription(newSubscription, stickyEvent, Looper.getMainLooper() == Looper.myLooper());
+            postToSubscription(newSubscription, stickyEvent, isMainThread());
         }
     }
 
+    /**
+     * Checks if the current thread is running in the main thread.
+     * If there is no main thread support (e.g. non-Android), "true" is always returned. In that case MAIN thread
+     * subscribers are always called in posting thread, and BACKGROUND subscribers are always called from a background
+     * poster.
+     */
+    private boolean isMainThread() {
+        return mainThreadSupport != null ? mainThreadSupport.isMainThread() : true;
+    }
+
     public synchronized boolean isRegistered(Object subscriber) {
         return typesBySubscriber.containsKey(subscriber);
     }
@@ -230,7 +246,7 @@ public synchronized void unregister(Object subscriber) {
             }
             typesBySubscriber.remove(subscriber);
         } else {
-            Log.w(TAG, "Subscriber to unregister was not registered before: " + subscriber.getClass());
+            logger.log(Level.WARNING, "Subscriber to unregister was not registered before: " + subscriber.getClass());
         }
     }
 
@@ -241,7 +257,7 @@ public void post(Object event) {
         eventQueue.add(event);
 
         if (!postingState.isPosting) {
-            postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();
+            postingState.isMainThread = isMainThread();
             postingState.isPosting = true;
             if (postingState.canceled) {
                 throw new EventBusException("Internal error. Abort state was not reset");
@@ -374,7 +390,7 @@ private void postSingleEvent(Object event, PostingThreadState postingState) thro
         }
         if (!subscriptionFound) {
             if (logNoSubscriberMessages) {
-                Log.d(TAG, "No subscribers registered for event " + eventClass);
+                logger.log(Level.FINE, "No subscribers registered for event " + eventClass);
             }
             if (sendNoSubscriberEvent && eventClass != NoSubscriberEvent.class &&
                     eventClass != SubscriberExceptionEvent.class) {
@@ -422,6 +438,14 @@ private void postToSubscription(Subscription subscription, Object event, boolean
                     mainThreadPoster.enqueue(subscription, event);
                 }
                 break;
+            case MAIN_ORDERED:
+                if (mainThreadPoster != null) {
+                    mainThreadPoster.enqueue(subscription, event);
+                } else {
+                    // temporary: technically not correct as poster not decoupled from subscriber
+                    invokeSubscriber(subscription, event);
+                }
+                break;
             case BACKGROUND:
                 if (isMainThread) {
                     backgroundPoster.enqueue(subscription, event);
@@ -494,10 +518,10 @@ private void handleSubscriberException(Subscription subscription, Object event,
         if (event instanceof SubscriberExceptionEvent) {
             if (logSubscriberExceptions) {
                 // Don't send another SubscriberExceptionEvent to avoid infinite event recursion, just log
-                Log.e(TAG, "SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass()
+                logger.log(Level.SEVERE, "SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass()
                         + " threw an exception", cause);
                 SubscriberExceptionEvent exEvent = (SubscriberExceptionEvent) event;
-                Log.e(TAG, "Initial event " + exEvent.causingEvent + " caused exception in "
+                logger.log(Level.SEVERE, "Initial event " + exEvent.causingEvent + " caused exception in "
                         + exEvent.causingSubscriber, exEvent.throwable);
             }
         } else {
@@ -505,7 +529,7 @@ private void handleSubscriberException(Subscription subscription, Object event,
                 throw new EventBusException("Invoking subscriber failed", cause);
             }
             if (logSubscriberExceptions) {
-                Log.e(TAG, "Could not dispatch event: " + event.getClass() + " to subscribing class "
+                logger.log(Level.SEVERE, "Could not dispatch event: " + event.getClass() + " to subscribing class "
                         + subscription.subscriber.getClass(), cause);
             }
             if (sendSubscriberExceptionEvent) {
@@ -518,7 +542,7 @@ private void handleSubscriberException(Subscription subscription, Object event,
 
     /** For ThreadLocal, much faster to set (and get multiple values). */
     final static class PostingThreadState {
-        final List<Object> eventQueue = new ArrayList<Object>();
+        final List<Object> eventQueue = new ArrayList<>();
         boolean isPosting;
         boolean isMainThread;
         Subscription subscription;
@@ -530,6 +554,13 @@ ExecutorService getExecutorService() {
         return executorService;
     }
 
+    /**
+     * For internal use only.
+     */
+    public Logger getLogger() {
+        return logger;
+    }
+
     // Just an idea: we could provide a callback to post() to be notified, an alternative would be events, of course...
     /* public */interface PostCallback {
         void onPostCompleted(List<SubscriberExceptionEvent> exceptionEvents);
diff --git a/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
index e212750e..3e2b5c9c 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
@@ -15,6 +15,9 @@
  */
 package org.greenrobot.eventbus;
 
+import android.os.Looper;
+
+import org.greenrobot.eventbus.android.AndroidLogger;
 import org.greenrobot.eventbus.meta.SubscriberInfoIndex;
 
 import java.util.ArrayList;
@@ -40,6 +43,8 @@
     ExecutorService executorService = DEFAULT_EXECUTOR_SERVICE;
     List<Class<?>> skipMethodVerificationForClasses;
     List<SubscriberInfoIndex> subscriberInfoIndexes;
+    Logger logger;
+    MainThreadSupport mainThreadSupport;
 
     EventBusBuilder() {
     }
@@ -130,13 +135,57 @@ public EventBusBuilder strictMethodVerification(boolean strictMethodVerification
 
     /** Adds an index generated by EventBus' annotation preprocessor. */
     public EventBusBuilder addIndex(SubscriberInfoIndex index) {
-        if(subscriberInfoIndexes == null) {
+        if (subscriberInfoIndexes == null) {
             subscriberInfoIndexes = new ArrayList<>();
         }
         subscriberInfoIndexes.add(index);
         return this;
     }
 
+    /**
+     * Set a specific log handler for all EventBus logging.
+     * <p/>
+     * By default all logging is via {@link android.util.Log} but if you want to use EventBus
+     * outside the Android environment then you will need to provide another log target.
+     */
+    public EventBusBuilder logger(Logger logger) {
+        this.logger = logger;
+        return this;
+    }
+
+    Logger getLogger() {
+        if (logger != null) {
+            return logger;
+        } else {
+            // also check main looper to see if we have "good" Android classes (not Stubs etc.)
+            return AndroidLogger.isAndroidLogAvailable() && getAndroidMainLooperOrNull() != null
+                    ? new AndroidLogger("EventBus") :
+                    new Logger.SystemOutLogger();
+        }
+    }
+
+
+    MainThreadSupport getMainThreadSupport() {
+        if (mainThreadSupport != null) {
+            return mainThreadSupport;
+        } else if (AndroidLogger.isAndroidLogAvailable()) {
+            Object looperOrNull = getAndroidMainLooperOrNull();
+            return looperOrNull == null ? null :
+                    new MainThreadSupport.AndroidHandlerMainThreadSupport((Looper) looperOrNull);
+        } else {
+            return null;
+        }
+    }
+
+    Object getAndroidMainLooperOrNull() {
+        try {
+            return Looper.getMainLooper();
+        } catch (RuntimeException e) {
+            // Not really a functional Android (e.g. "Stub!" maven dependencies)
+            return null;
+        }
+    }
+
     /**
      * Installs the default EventBus returned by {@link EventBus#getDefault()} using this builders' values. Must be
      * done only once before the first usage of the default EventBus.
diff --git a/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java b/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java
index 3247be53..95309547 100644
--- a/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java
+++ b/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java
@@ -20,21 +20,21 @@
 import android.os.Message;
 import android.os.SystemClock;
 
-final class HandlerPoster extends Handler {
+public class HandlerPoster extends Handler implements Poster {
 
     private final PendingPostQueue queue;
     private final int maxMillisInsideHandleMessage;
     private final EventBus eventBus;
     private boolean handlerActive;
 
-    HandlerPoster(EventBus eventBus, Looper looper, int maxMillisInsideHandleMessage) {
+    protected HandlerPoster(EventBus eventBus, Looper looper, int maxMillisInsideHandleMessage) {
         super(looper);
         this.eventBus = eventBus;
         this.maxMillisInsideHandleMessage = maxMillisInsideHandleMessage;
         queue = new PendingPostQueue();
     }
 
-    void enqueue(Subscription subscription, Object event) {
+    public void enqueue(Subscription subscription, Object event) {
         PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);
         synchronized (this) {
             queue.enqueue(pendingPost);
diff --git a/EventBus/src/org/greenrobot/eventbus/Logger.java b/EventBus/src/org/greenrobot/eventbus/Logger.java
new file mode 100644
index 00000000..602e0b51
--- /dev/null
+++ b/EventBus/src/org/greenrobot/eventbus/Logger.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.greenrobot.eventbus;
+
+import java.util.logging.Level;
+
+public interface Logger {
+
+    void log(Level level, String msg);
+
+    void log(Level level, String msg, Throwable th);
+
+    public static class JavaLogger implements Logger {
+        protected final java.util.logging.Logger logger;
+
+        public JavaLogger(String tag) {
+            logger = java.util.logging.Logger.getLogger(tag);
+        }
+
+        @Override
+        public void log(Level level, String msg) {
+            // TODO Replace logged method with caller method
+            logger.log(level, msg);
+        }
+
+        @Override
+        public void log(Level level, String msg, Throwable th) {
+            // TODO Replace logged method with caller method
+            logger.log(level, msg, th);
+        }
+
+    }
+
+    public static class SystemOutLogger implements Logger {
+
+        @Override
+        public void log(Level level, String msg) {
+            System.out.println("[" + level + "] " + msg);
+        }
+
+        @Override
+        public void log(Level level, String msg, Throwable th) {
+            System.out.println("[" + level + "] " + msg);
+            th.printStackTrace(System.out);
+        }
+
+    }
+
+}
diff --git a/EventBus/src/org/greenrobot/eventbus/MainThreadSupport.java b/EventBus/src/org/greenrobot/eventbus/MainThreadSupport.java
new file mode 100644
index 00000000..d5655533
--- /dev/null
+++ b/EventBus/src/org/greenrobot/eventbus/MainThreadSupport.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.greenrobot.eventbus;
+
+import android.os.Looper;
+
+/**
+ * Interface to the "main" thread, which can be whatever you like. Typically on Android, Android's main thread is used.
+ */
+public interface MainThreadSupport {
+
+    boolean isMainThread();
+
+    Poster createPoster(EventBus eventBus);
+
+    class AndroidHandlerMainThreadSupport implements MainThreadSupport {
+
+        private final Looper looper;
+
+        public AndroidHandlerMainThreadSupport(Looper looper) {
+            this.looper = looper;
+        }
+
+        @Override
+        public boolean isMainThread() {
+            return looper == Looper.myLooper();
+        }
+
+        @Override
+        public Poster createPoster(EventBus eventBus) {
+            return new HandlerPoster(eventBus, looper, 10);
+        }
+    }
+
+}
diff --git a/EventBus/src/org/greenrobot/eventbus/Poster.java b/EventBus/src/org/greenrobot/eventbus/Poster.java
new file mode 100644
index 00000000..a69a078d
--- /dev/null
+++ b/EventBus/src/org/greenrobot/eventbus/Poster.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.greenrobot.eventbus;
+
+/**
+ * Posts events.
+ *
+ * @author William Ferguson
+ */
+interface Poster {
+
+    /**
+     * Enqueue an event to be posted for a particular subscription.
+     *
+     * @param subscription Subscription which will receive the event.
+     * @param event        Event that will be posted to subscribers.
+     */
+    void enqueue(Subscription subscription, Object event);
+}
diff --git a/EventBus/src/org/greenrobot/eventbus/ThreadMode.java b/EventBus/src/org/greenrobot/eventbus/ThreadMode.java
index 79d5dc43..b8ee7d53 100644
--- a/EventBus/src/org/greenrobot/eventbus/ThreadMode.java
+++ b/EventBus/src/org/greenrobot/eventbus/ThreadMode.java
@@ -16,7 +16,7 @@
 package org.greenrobot.eventbus;
 
 /**
- * Each event handler method has a thread mode, which determines in which thread the method is to be called by EventBus.
+ * Each subscriber method has a thread mode, which determines in which thread the method is to be called by EventBus.
  * EventBus takes care of threading independently from the posting thread.
  * 
  * @see EventBus#register(Object)
@@ -24,34 +24,41 @@
  */
 public enum ThreadMode {
     /**
-     * Subscriber will be called in the same thread, which is posting the event. This is the default. Event delivery
+     * Subscriber will be called directly in the same thread, which is posting the event. This is the default. Event delivery
      * implies the least overhead because it avoids thread switching completely. Thus this is the recommended mode for
-     * simple tasks that are known to complete is a very short time without requiring the main thread. Event handlers
+     * simple tasks that are known to complete in a very short time without requiring the main thread. Event handlers
      * using this mode must return quickly to avoid blocking the posting thread, which may be the main thread.
      */
     POSTING,
 
     /**
-     * Subscriber will be called in Android's main thread (sometimes referred to as UI thread). If the posting thread is
-     * the main thread, event handler methods will be called directly. Event handlers using this mode must return
-     * quickly to avoid blocking the main thread.
+     * On Android, subscriber will be called in Android's main thread (UI thread). If the posting thread is
+     * the main thread, subscriber methods will be called directly, blocking the posting thread. Otherwise the event
+     * is queued for delivery (non-blocking). Subscribers using this mode must return quickly to avoid blocking the main thread.
+     * If not on Android, behaves the same as {@link #POSTING}.
      */
     MAIN,
 
     /**
-     * Subscriber will be called in a background thread. If posting thread is not the main thread, event handler methods
+     * On Android, subscriber will be called in Android's main thread (UI thread). Different from {@link #MAIN},
+     * the event will always be queued for delivery. This ensures that the post call is non-blocking.
+     */
+    MAIN_ORDERED,
+
+    /**
+     * On Android, subscriber will be called in a background thread. If posting thread is not the main thread, subscriber methods
      * will be called directly in the posting thread. If the posting thread is the main thread, EventBus uses a single
-     * background thread, that will deliver all its events sequentially. Event handlers using this mode should try to
-     * return quickly to avoid blocking the background thread.
+     * background thread, that will deliver all its events sequentially. Subscribers using this mode should try to
+     * return quickly to avoid blocking the background thread. If not on Android, always uses a background thread.
      */
     BACKGROUND,
 
     /**
-     * Event handler methods are called in a separate thread. This is always independent from the posting thread and the
-     * main thread. Posting events never wait for event handler methods using this mode. Event handler methods should
+     * Subscriber will be called in a separate thread. This is always independent from the posting thread and the
+     * main thread. Posting events never wait for subscriber methods using this mode. Subscriber methods should
      * use this mode if their execution might take some time, e.g. for network access. Avoid triggering a large number
-     * of long running asynchronous handler methods at the same time to limit the number of concurrent threads. EventBus
-     * uses a thread pool to efficiently reuse threads from completed asynchronous event handler notifications.
+     * of long running asynchronous subscriber methods at the same time to limit the number of concurrent threads. EventBus
+     * uses a thread pool to efficiently reuse threads from completed asynchronous subscriber notifications.
      */
     ASYNC
 }
\ No newline at end of file
diff --git a/EventBus/src/org/greenrobot/eventbus/android/AndroidLogger.java b/EventBus/src/org/greenrobot/eventbus/android/AndroidLogger.java
new file mode 100644
index 00000000..fc14fe7d
--- /dev/null
+++ b/EventBus/src/org/greenrobot/eventbus/android/AndroidLogger.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.greenrobot.eventbus.android;
+
+import android.util.Log;
+
+import org.greenrobot.eventbus.Logger;
+
+import java.util.logging.Level;
+
+public class AndroidLogger implements Logger {
+
+    private static final boolean ANDROID_LOG_AVAILABLE;
+
+    static {
+        boolean android = false;
+        try {
+            android = Class.forName("android.util.Log") != null;
+        } catch (ClassNotFoundException e) {
+            // OK
+        }
+        ANDROID_LOG_AVAILABLE = android;
+    }
+
+    public static boolean isAndroidLogAvailable() {
+        return ANDROID_LOG_AVAILABLE;
+    }
+
+
+    private final String tag;
+
+    public AndroidLogger(String tag) {
+        this.tag = tag;
+    }
+
+    public void log(Level level, String msg) {
+        if (level != Level.OFF) {
+            Log.println(mapLevel(level), tag, msg);
+        }
+    }
+
+    public void log(Level level, String msg, Throwable th) {
+        if (level != Level.OFF) {
+            // That's how Log does it internally
+            Log.println(mapLevel(level), tag, msg + "\n" + Log.getStackTraceString(th));
+        }
+    }
+
+    private int mapLevel(Level level) {
+        int value = level.intValue();
+        if (value < 800) { // below INFO
+            if (value < 500) { // below FINE
+                return Log.VERBOSE;
+            } else {
+                return Log.DEBUG;
+            }
+        } else if (value < 900) { // below WARNING
+            return Log.INFO;
+        } else if (value < 1000) { // below ERROR
+            return Log.WARN;
+        } else {
+            return Log.ERROR;
+        }
+    }
+}
diff --git a/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java b/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java
index b68de63a..9020c24b 100644
--- a/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java
+++ b/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java
@@ -46,7 +46,9 @@ public SubscriberInfo getSuperSubscriberInfo() {
         }
         try {
             return superSubscriberInfoClass.newInstance();
-        } catch (InstantiationException | IllegalAccessException e) {
+        } catch (InstantiationException e) {
+            throw new RuntimeException(e);
+        } catch (IllegalAccessException e) {
             throw new RuntimeException(e);
         }
     }
diff --git a/EventBus/src/org/greenrobot/eventbus/util/AsyncExecutor.java b/EventBus/src/org/greenrobot/eventbus/util/AsyncExecutor.java
index c44c1366..9c0433e8 100644
--- a/EventBus/src/org/greenrobot/eventbus/util/AsyncExecutor.java
+++ b/EventBus/src/org/greenrobot/eventbus/util/AsyncExecutor.java
@@ -15,14 +15,12 @@
  */
 package org.greenrobot.eventbus.util;
 
-import android.app.Activity;
-import android.util.Log;
-
 import org.greenrobot.eventbus.EventBus;
 
 import java.lang.reflect.Constructor;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;
+import java.util.logging.Level;
 
 /**
  * Executes an {@link RunnableEx} using a thread pool. Thrown exceptions are propagated by posting failure events of any
@@ -59,10 +57,6 @@ public AsyncExecutor build() {
             return buildForScope(null);
         }
 
-        public AsyncExecutor buildForActivityScope(Activity activity) {
-            return buildForScope(activity.getClass());
-        }
-        
         public AsyncExecutor buildForScope(Object executionContext) {
             if (eventBus == null) {
                 eventBus = EventBus.getDefault();
@@ -119,7 +113,7 @@ public void run() {
                     try {
                         event = failureEventConstructor.newInstance(e);
                     } catch (Exception e1) {
-                        Log.e(EventBus.TAG, "Original exception:", e);
+                        eventBus.getLogger().log(Level.SEVERE, "Original exception:", e);
                         throw new RuntimeException("Could not create failure event", e1);
                     }
                     if (event instanceof HasExecutionScope) {
diff --git a/EventBus/src/org/greenrobot/eventbus/util/ExceptionToResourceMapping.java b/EventBus/src/org/greenrobot/eventbus/util/ExceptionToResourceMapping.java
index 9ab0d006..a3bb67f3 100644
--- a/EventBus/src/org/greenrobot/eventbus/util/ExceptionToResourceMapping.java
+++ b/EventBus/src/org/greenrobot/eventbus/util/ExceptionToResourceMapping.java
@@ -18,8 +18,6 @@
 
 import android.util.Log;
 
-import org.greenrobot.eventbus.EventBus;
-
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -36,7 +34,7 @@
     public final Map<Class<? extends Throwable>, Integer> throwableToMsgIdMap;
 
     public ExceptionToResourceMapping() {
-        throwableToMsgIdMap = new HashMap<Class<? extends Throwable>, Integer>();
+        throwableToMsgIdMap = new HashMap<>();
     }
 
     /** Looks at the exception and its causes trying to find an ID. */
@@ -52,7 +50,7 @@ public Integer mapThrowable(final Throwable throwable) {
                 throwableToCheck = throwableToCheck.getCause();
                 depthToGo--;
                 if (depthToGo <= 0 || throwableToCheck == throwable || throwableToCheck == null) {
-                    Log.d(EventBus.TAG, "No specific message ressource ID found for " + throwable);
+                    Log.d("EventBus", "No specific message resource ID found for " + throwable);
                     // return config.defaultErrorMsgId;
                     return null;
                 }
diff --git a/EventBusAnnotationProcessor/build.gradle b/EventBusAnnotationProcessor/build.gradle
index 4dfa5eca..644ea215 100644
--- a/EventBusAnnotationProcessor/build.gradle
+++ b/EventBusAnnotationProcessor/build.gradle
@@ -4,7 +4,7 @@ apply plugin: 'signing'
 
 archivesBaseName = 'eventbus-annotation-processor'
 group = 'org.greenrobot'
-version = '3.0.1'
+version = '3.1.0'
 
 sourceCompatibility = 1.7
 
@@ -16,10 +16,6 @@ if (isSnapshot) {
     sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
 }
 
-repositories {
-    mavenCentral()
-}
-
 // Still unsupported, see http://issues.gradle.org/browse/GRADLE-784
 // Like this, it won't appear at all in the POM
 configurations {
@@ -28,7 +24,7 @@ configurations {
 }
 
 dependencies {
-    compile project(':EventBus')
+    compile project(':eventbus')
     compile 'de.greenrobot:java-common:2.3.1'
     deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
 }
@@ -79,7 +75,11 @@ signing {
 uploadArchives {
     repositories {
         mavenDeployer {
-            if (project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername')
+            if (project.hasProperty('preferedRepo')) println "preferedRepo = $preferedRepo"
+            if (project.hasProperty('preferedRepo') && preferedRepo == 'local') {
+                println "Deploying to local repo (aka install)..."
+                repository url: repositories.mavenLocal().url
+            } else if (project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername')
                     && project.hasProperty('preferedPassword')) {
                 configuration = configurations.deployerJars
                 repository(url: preferedRepo) {
diff --git a/EventBusAnnotationProcessor/settings.gradle b/EventBusAnnotationProcessor/settings.gradle
deleted file mode 100644
index 51ebbb79..00000000
--- a/EventBusAnnotationProcessor/settings.gradle
+++ /dev/null
@@ -1 +0,0 @@
-rootProject.name = 'eventbus-annotation-processor'
\ No newline at end of file
diff --git a/EventBusPerformance/build.gradle b/EventBusPerformance/build.gradle
index fa9029dc..fb2cc52f 100644
--- a/EventBusPerformance/build.gradle
+++ b/EventBusPerformance/build.gradle
@@ -4,33 +4,21 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.0'
-        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
+        classpath 'com.android.tools.build:gradle:2.3.3'
     }
 }
 
 apply plugin: 'com.android.application'
-apply plugin: 'com.neenbedankt.android-apt'
-
-repositories {
-    jcenter()
-}
 
 dependencies {
-    compile project(':EventBus')
-    apt project(':EventBusAnnotationProcessor')
+    compile project(':eventbus')
+    annotationProcessor project(':eventbus-annotation-processor')
     compile 'com.squareup:otto:1.3.8'
 }
 
-apt {
-    arguments {
-        eventBusIndex "org.greenrobot.eventbusperf.MyEventBusIndex"
-    }
-}
-
 android {
-    buildToolsVersion '23.0.2' // When updating, don't forget to adjust .travis.yml
-    compileSdkVersion 19
+    buildToolsVersion _buildToolsVersion
+    compileSdkVersion _compileSdkVersion
 
     sourceSets {
         main {
@@ -40,4 +28,11 @@ android {
         }
     }
 
+    defaultConfig {
+        javaCompileOptions {
+            annotationProcessorOptions {
+                arguments = [eventBusIndex: 'org.greenrobot.eventbusperf.MyEventBusIndex']
+            }
+        }
+    }
 }
diff --git a/EventBusPerformance/res/values/strings.xml b/EventBusPerformance/res/values/strings.xml
index feed5953..49148076 100644
--- a/EventBusPerformance/res/values/strings.xml
+++ b/EventBusPerformance/res/values/strings.xml
@@ -21,6 +21,7 @@
     <string-array name="spinnerThreadModes">
         <item>POSTING</item>
         <item>MAIN</item>
+        <item>MAIN_ORDERED</item>
         <item>BACKGROUND</item>
         <item>ASYNC</item>
     </string-array>
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java
index e22631c1..b21efabf 100644
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java
+++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java
@@ -42,7 +42,7 @@
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_runtests);
-        textViewResult = (TextView) findViewById(R.id.textViewResult);
+        textViewResult = findViewById(R.id.textViewResult);
         controlBus = new EventBus();
         controlBus.register(this);
     }
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java
index 3488b8da..626f8a0b 100644
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java
+++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java
@@ -50,7 +50,7 @@ public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_setuptests);
 
-        Spinner spinnerRun = (Spinner) findViewById(R.id.spinnerTestToRun);
+        Spinner spinnerRun = findViewById(R.id.spinnerTestToRun);
         spinnerRun.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
 
             public void onItemSelected(AdapterView<?> adapter, View v, int pos, long lng) {
@@ -65,15 +65,15 @@ public void onNothingSelected(AdapterView<?> arg0) {
     }
 
     public void checkEventBus(View v) {
-        Spinner spinnerThread = (Spinner) findViewById(R.id.spinnerThread);
-        CheckBox checkBoxEventBus = (CheckBox) findViewById(R.id.checkBoxEventBus);
+        Spinner spinnerThread = findViewById(R.id.spinnerThread);
+        CheckBox checkBoxEventBus = findViewById(R.id.checkBoxEventBus);
         int visibility = checkBoxEventBus.isChecked() ? View.VISIBLE : View.GONE;
         spinnerThread.setVisibility(visibility);
     }
 
     public void startClick(View v) {
         TestParams params = new TestParams();
-        Spinner spinnerThread = (Spinner) findViewById(R.id.spinnerThread);
+        Spinner spinnerThread = findViewById(R.id.spinnerThread);
         String threadModeStr = spinnerThread.getSelectedItem().toString();
         ThreadMode threadMode = ThreadMode.valueOf(threadModeStr);
         params.setThreadMode(threadMode);
@@ -81,13 +81,13 @@ public void startClick(View v) {
         params.setEventInheritance(((CheckBox) findViewById(R.id.checkBoxEventBusEventHierarchy)).isChecked());
         params.setIgnoreGeneratedIndex(((CheckBox) findViewById(R.id.checkBoxEventBusIgnoreGeneratedIndex)).isChecked());
 
-        EditText editTextEvent = (EditText) findViewById(R.id.editTextEvent);
+        EditText editTextEvent = findViewById(R.id.editTextEvent);
         params.setEventCount(Integer.parseInt(editTextEvent.getText().toString()));
 
-        EditText editTextSubscriber = (EditText) findViewById(R.id.editTextSubscribe);
+        EditText editTextSubscriber = findViewById(R.id.editTextSubscribe);
         params.setSubscriberCount(Integer.parseInt(editTextSubscriber.getText().toString()));
 
-        Spinner spinnerTestToRun = (Spinner) findViewById(R.id.spinnerTestToRun);
+        Spinner spinnerTestToRun = findViewById(R.id.spinnerTestToRun);
         int testPos = spinnerTestToRun.getSelectedItemPosition();
         params.setTestNumber(testPos + 1);
         ArrayList<Class<? extends Test>> testClasses = initTestClasses(testPos);
@@ -103,10 +103,10 @@ public void startClick(View v) {
     private ArrayList<Class<? extends Test>> initTestClasses(int testPos) {
         ArrayList<Class<? extends Test>> testClasses = new ArrayList<Class<? extends Test>>();
         // the attributes are putted in the intent (eventbus, otto, broadcast, local broadcast)
-        final CheckBox checkBoxEventBus = (CheckBox) findViewById(R.id.checkBoxEventBus);
-        final CheckBox checkBoxOtto = (CheckBox) findViewById(R.id.checkBoxOtto);
-        final CheckBox checkBoxBroadcast = (CheckBox) findViewById(R.id.checkBoxBroadcast);
-        final CheckBox checkBoxLocalBroadcast = (CheckBox) findViewById(R.id.checkBoxLocalBroadcast);
+        final CheckBox checkBoxEventBus = findViewById(R.id.checkBoxEventBus);
+        final CheckBox checkBoxOtto = findViewById(R.id.checkBoxOtto);
+        final CheckBox checkBoxBroadcast = findViewById(R.id.checkBoxBroadcast);
+        final CheckBox checkBoxLocalBroadcast = findViewById(R.id.checkBoxLocalBroadcast);
         if (checkBoxEventBus.isChecked()) {
             testClasses.add(TEST_CLASSES_EVENTBUS[testPos]);
         }
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestEventBus.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestEventBus.java
index 7ceb8e6d..f0a5e2f8 100644
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestEventBus.java
+++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestEventBus.java
@@ -66,6 +66,8 @@ public void prepareTest() {
         switch (params.getThreadMode()) {
             case MAIN:
                 return SubscribeClassEventBusMain.class;
+            case MAIN_ORDERED:
+                return SubscribeClassEventBusMainOrdered.class;
             case BACKGROUND:
                 return SubscribeClassEventBusBackground.class;
             case ASYNC:
@@ -227,6 +229,28 @@ public void dummy5() {
         }
     }
 
+    public class SubscribeClassEventBusMainOrdered {
+        @Subscribe(threadMode = ThreadMode.MAIN_ORDERED)
+        public void onEvent(TestEvent event) {
+            eventsReceivedCount.incrementAndGet();
+        }
+
+        public void dummy() {
+        }
+
+        public void dummy2() {
+        }
+
+        public void dummy3() {
+        }
+
+        public void dummy4() {
+        }
+
+        public void dummy5() {
+        }
+    }
+
     public class SubscribeClassEventBusBackground {
         @Subscribe(threadMode = ThreadMode.BACKGROUND)
         public void onEventBackgroundThread(TestEvent event) {
diff --git a/EventBusTest/AndroidManifest.xml b/EventBusTest/AndroidManifest.xml
index 22aedee0..657ad878 100644
--- a/EventBusTest/AndroidManifest.xml
+++ b/EventBusTest/AndroidManifest.xml
@@ -1,20 +1,14 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.event.testapp"
-    android:versionCode="1"
-    android:versionName="1.0" >
+    xmlns:tools="http://schemas.android.com/tools"
+    package="org.greenrobot.eventbus">
 
-    <uses-sdk android:minSdkVersion="8" />
-
-    <instrumentation
-        android:name="android.test.InstrumentationTestRunner"
-        android:targetPackage="de.greenrobot.event.test" />
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
 
     <application
         android:allowBackup="false"
-        android:label="EventBus Test" >
-        <uses-library android:name="android.test.runner" />
+        android:label="EventBus Test"
+        tools:ignore="GoogleAppIndexingWarning,MissingApplicationIcon">
     </application>
 
 </manifest>
\ No newline at end of file
diff --git a/EventBusTest/build.gradle b/EventBusTest/build.gradle
index bb877369..ab6b884c 100644
--- a/EventBusTest/build.gradle
+++ b/EventBusTest/build.gradle
@@ -4,31 +4,26 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.0'
-        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
+        classpath 'com.android.tools.build:gradle:2.3.3'
     }
 }
 
 apply plugin: 'com.android.application'
-apply plugin: 'com.neenbedankt.android-apt'
-
-sourceCompatibility = 1.7
-
-repositories {
-    jcenter()
-}
 
 dependencies {
-    androidTestApt project(':EventBusAnnotationProcessor')
-    androidTestCompile project(':EventBus')
+    androidTestCompile project(':eventbus')
+    androidTestCompile project(':EventBusTestJava')
+    androidTestAnnotationProcessor project(':eventbus-annotation-processor')
+    // Trying to repro bug:
+//    androidTestAnnotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.1.0'
     compile fileTree(dir: 'libs', include: '*.jar')
-    androidTestCompile 'com.android.support.test:runner:0.4.1'
-    androidTestCompile 'com.android.support.test:rules:0.4.1'
+    androidTestCompile 'com.android.support.test:runner:1.0.1'
+    androidTestCompile 'com.android.support.test:rules:1.0.1'
 }
 
 android {
-    buildToolsVersion '23.0.2' // When updating, don't forget to adjust .travis.yml
-    compileSdkVersion 19
+    buildToolsVersion _buildToolsVersion
+    compileSdkVersion _compileSdkVersion
 
     compileOptions {
         sourceCompatibility = JavaVersion.VERSION_1_7
@@ -46,14 +41,26 @@ android {
     }
 
     defaultConfig {
+        minSdkVersion 9
+        targetSdkVersion 26
+        versionCode 1
+        versionName "1.0"
+
         testApplicationId "de.greenrobot.event.test"
         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+
+        javaCompileOptions {
+            annotationProcessorOptions {
+                arguments = [ eventBusIndex : 'org.greenrobot.eventbus.EventBusTestsIndex' ]
+            }
+        }
     }
-}
 
-apt {
-    arguments {
-        eventBusIndex "org.greenrobot.eventbus.EventBusTestsIndex"
+    lintOptions {
+        // To see problems right away, also nice for Travis CI
+        textOutput 'stdout'
+
+        // TODO FIXME: Travis only error
+        abortOnError false
     }
 }
-
diff --git a/EventBusTest/src/org/greenrobot/eventbus/AbstractAndroidEventBusTest.java b/EventBusTest/src/org/greenrobot/eventbus/AbstractAndroidEventBusTest.java
new file mode 100644
index 00000000..13178206
--- /dev/null
+++ b/EventBusTest/src/org/greenrobot/eventbus/AbstractAndroidEventBusTest.java
@@ -0,0 +1,72 @@
+/*
+ * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.greenrobot.eventbus;
+
+import android.annotation.SuppressLint;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.Before;
+import org.junit.runner.RunWith;
+
+
+import static org.junit.Assert.assertFalse;
+
+/**
+ * @author Markus Junginger, greenrobot
+ */
+@RunWith(AndroidJUnit4.class)
+public abstract class AbstractAndroidEventBusTest extends AbstractEventBusTest {
+    private EventPostHandler mainPoster;
+
+    public AbstractAndroidEventBusTest() {
+        this(false);
+    }
+
+    public AbstractAndroidEventBusTest(boolean collectEventsReceived) {
+        super(collectEventsReceived);
+    }
+
+    @Before
+    public void setUpAndroid() throws Exception {
+        mainPoster = new EventPostHandler(Looper.getMainLooper());
+        assertFalse(Looper.getMainLooper().getThread().equals(Thread.currentThread()));
+    }
+
+    protected void postInMainThread(Object event) {
+        mainPoster.post(event);
+    }
+
+    @SuppressLint("HandlerLeak")
+    class EventPostHandler extends Handler {
+        public EventPostHandler(Looper looper) {
+            super(looper);
+        }
+
+        @Override
+        public void handleMessage(Message msg) {
+            eventBus.post(msg.obj);
+        }
+
+        void post(Object event) {
+            sendMessage(obtainMessage(0, event));
+        }
+
+    }
+
+}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidActivityTest.java b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidActivityTest.java
new file mode 100644
index 00000000..364a3936
--- /dev/null
+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidActivityTest.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.greenrobot.eventbus;
+
+import android.app.Activity;
+import android.support.test.annotation.UiThreadTest;
+import android.support.test.rule.UiThreadTestRule;
+import android.util.Log;
+
+import org.junit.Rule;
+import org.junit.Test;
+
+
+import static org.junit.Assert.assertEquals;
+
+/**
+ * @author Markus Junginger, greenrobot
+ */
+// Do not extend from AbstractAndroidEventBusTest, because it asserts test may not be in main thread
+public class EventBusAndroidActivityTest extends AbstractEventBusTest {
+
+    public static class WithIndex extends EventBusBasicTest {
+        @Test
+        public void dummy() {
+        }
+
+    }
+
+    @Rule
+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();
+
+    @Test
+    @UiThreadTest
+    public void testRegisterAndPost() {
+        // Use an activity to test real life performance
+        TestActivity testActivity = new TestActivity();
+        String event = "Hello";
+
+        long start = System.currentTimeMillis();
+        eventBus.register(testActivity);
+        long time = System.currentTimeMillis() - start;
+        Log.d(EventBus.TAG, "Registered in " + time + "ms");
+
+        eventBus.post(event);
+
+        assertEquals(event, testActivity.lastStringEvent);
+    }
+
+    public static class TestActivity extends Activity {
+        public String lastStringEvent;
+
+        @Subscribe
+        public void onEvent(String event) {
+            lastStringEvent = event;
+        }
+    }
+
+}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidCancelEventDeliveryTest.java b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidCancelEventDeliveryTest.java
new file mode 100644
index 00000000..781ceda2
--- /dev/null
+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidCancelEventDeliveryTest.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.greenrobot.eventbus;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import android.support.test.runner.AndroidJUnit4;
+import android.test.UiThreadTest;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
+@RunWith(AndroidJUnit4.class)
+public class EventBusAndroidCancelEventDeliveryTest extends EventBusCancelEventDeliveryTest {
+
+    @UiThreadTest
+    @Test
+    public void testCancelInMainThread() {
+        SubscriberMainThread subscriber = new SubscriberMainThread();
+        eventBus.register(subscriber);
+        eventBus.post("42");
+        awaitLatch(subscriber.done, 10);
+        assertEquals(0, eventCount.intValue());
+        assertNotNull(failed);
+    }
+
+}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidMultithreadedTest.java b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidMultithreadedTest.java
new file mode 100644
index 00000000..8be31cc1
--- /dev/null
+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidMultithreadedTest.java
@@ -0,0 +1,100 @@
+/*
+ * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.greenrobot.eventbus;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import android.os.Looper;
+import android.support.test.runner.AndroidJUnit4;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.junit.Assert.assertNotSame;
+import static org.junit.Assert.assertSame;
+
+@RunWith(AndroidJUnit4.class)
+public class EventBusAndroidMultithreadedTest extends EventBusMultithreadedTest {
+
+    @Test
+    public void testSubscribeUnSubscribeAndPostMixedEventType() throws InterruptedException {
+        List<SubscribeUnsubscribeThread> threads = new ArrayList<SubscribeUnsubscribeThread>();
+
+        // Debug.startMethodTracing("testSubscribeUnSubscribeAndPostMixedEventType");
+        for (int i = 0; i < 5; i++) {
+            SubscribeUnsubscribeThread thread = new SubscribeUnsubscribeThread();
+            thread.start();
+            threads.add(thread);
+        }
+        // This test takes a bit longer, so just use fraction the regular count
+        runThreadsMixedEventType(COUNT / 4, 5);
+        for (SubscribeUnsubscribeThread thread : threads) {
+            thread.shutdown();
+        }
+        for (SubscribeUnsubscribeThread thread : threads) {
+            thread.join();
+        }
+        // Debug.stopMethodTracing();
+    }
+
+    public class SubscribeUnsubscribeThread extends Thread {
+        boolean running = true;
+
+        public void shutdown() {
+            running = false;
+        }
+
+        @Override
+        public void run() {
+            try {
+                while (running) {
+                    eventBus.register(this);
+                    double random = Math.random();
+                    if (random > 0.6d) {
+                        Thread.sleep(0, (int) (1000000 * Math.random()));
+                    } else if (random > 0.3d) {
+                        Thread.yield();
+                    }
+                    eventBus.unregister(this);
+                }
+            } catch (InterruptedException e) {
+                throw new RuntimeException(e);
+            }
+        }
+
+        @Subscribe(threadMode = ThreadMode.MAIN)
+        public void onEventMainThread(String event) {
+            assertSame(Looper.getMainLooper(), Looper.myLooper());
+        }
+
+        @Subscribe(threadMode = ThreadMode.BACKGROUND)
+        public void onEventBackgroundThread(Integer event) {
+            assertNotSame(Looper.getMainLooper(), Looper.myLooper());
+        }
+
+        @Subscribe
+        public void onEvent(Object event) {
+            assertNotSame(Looper.getMainLooper(), Looper.myLooper());
+        }
+
+        @Subscribe(threadMode = ThreadMode.ASYNC)
+        public void onEventAsync(Object event) {
+            assertNotSame(Looper.getMainLooper(), Looper.myLooper());
+        }
+    }
+
+}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidOrderTest.java b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidOrderTest.java
new file mode 100644
index 00000000..ff348e1d
--- /dev/null
+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidOrderTest.java
@@ -0,0 +1,91 @@
+package org.greenrobot.eventbus;
+
+import android.os.Handler;
+import android.os.Looper;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+
+import static org.junit.Assert.assertEquals;
+
+public class EventBusAndroidOrderTest extends AbstractAndroidEventBusTest {
+
+    private TestBackgroundPoster backgroundPoster;
+    private Handler handler;
+
+    @Before
+    public void setUp() throws Exception {
+        handler = new Handler(Looper.getMainLooper());
+        backgroundPoster = new TestBackgroundPoster(eventBus);
+        backgroundPoster.start();
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        backgroundPoster.shutdown();
+        backgroundPoster.join();
+    }
+
+    @Test
+    public void backgroundAndMainUnordered() {
+        eventBus.register(this);
+
+        handler.post(new Runnable() {
+            @Override
+            public void run() {
+                // post from non-main thread
+                backgroundPoster.post("non-main");
+                // post from main thread
+                eventBus.post("main");
+            }
+        });
+
+        waitForEventCount(2, 1000);
+
+        // observe that event from *main* thread is posted FIRST
+        // NOT in posting order
+        assertEquals("non-main", lastEvent);
+    }
+
+    @Test
+    public void backgroundAndMainOrdered() {
+        eventBus.register(this);
+
+        handler.post(new Runnable() {
+            @Override
+            public void run() {
+                // post from non-main thread
+                backgroundPoster.post(new OrderedEvent("non-main"));
+                // post from main thread
+                eventBus.post(new OrderedEvent("main"));
+            }
+        });
+
+        waitForEventCount(2, 1000);
+
+        // observe that event from *main* thread is posted LAST
+        // IN posting order
+        assertEquals("main", ((OrderedEvent) lastEvent).thread);
+    }
+
+    @Subscribe(threadMode = ThreadMode.MAIN)
+    public void onEvent(String event) {
+        trackEvent(event);
+    }
+
+    @Subscribe(threadMode = ThreadMode.MAIN_ORDERED)
+    public void onEvent(OrderedEvent event) {
+        trackEvent(event);
+    }
+
+    static class OrderedEvent {
+        String thread;
+
+        OrderedEvent(String thread) {
+            this.thread = thread;
+        }
+    }
+
+}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusBackgroundThreadTest.java b/EventBusTest/src/org/greenrobot/eventbus/EventBusBackgroundThreadTest.java
index 5a57f744..6ccb6025 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusBackgroundThreadTest.java
+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusBackgroundThreadTest.java
@@ -25,7 +25,7 @@
 /**
  * @author Markus Junginger, greenrobot
  */
-public class EventBusBackgroundThreadTest extends AbstractEventBusTest {
+public class EventBusBackgroundThreadTest extends AbstractAndroidEventBusTest {
 
     @Test
     public void testPostInCurrentThread() throws InterruptedException {
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadRacingTest.java b/EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadRacingTest.java
index a598220e..8ed637e8 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadRacingTest.java
+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadRacingTest.java
@@ -26,7 +26,7 @@
 /**
  * @author Markus Junginger, greenrobot
  */
-public class EventBusMainThreadRacingTest extends AbstractEventBusTest {
+public class EventBusMainThreadRacingTest extends AbstractAndroidEventBusTest {
 
     private static final int ITERATIONS = LONG_TESTS ? 100000 : 1000;
 
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadTest.java b/EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadTest.java
index 2195d10f..34c29ee6 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadTest.java
+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadTest.java
@@ -17,33 +17,15 @@
 
 import android.os.Looper;
 
-import org.junit.After;
-import org.junit.Before;
 import org.junit.Test;
 
-import java.util.ArrayList;
-import java.util.List;
 
 import static org.junit.Assert.assertEquals;
 
 /**
  * @author Markus Junginger, greenrobot
  */
-public class EventBusMainThreadTest extends AbstractEventBusTest {
-
-    private BackgroundPoster backgroundPoster;
-
-    @Before
-    public void setUp() throws Exception {
-        backgroundPoster = new BackgroundPoster();
-        backgroundPoster.start();
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        backgroundPoster.shutdown();
-        backgroundPoster.join();
-    }
+public class EventBusMainThreadTest extends AbstractAndroidEventBusTest {
 
     @Test
     public void testPost() throws InterruptedException {
@@ -57,11 +39,17 @@ public void testPost() throws InterruptedException {
 
     @Test
     public void testPostInBackgroundThread() throws InterruptedException {
+        TestBackgroundPoster backgroundPoster = new TestBackgroundPoster(eventBus);
+        backgroundPoster.start();
+
         eventBus.register(this);
         backgroundPoster.post("Hello");
         waitForEventCount(1, 1000);
         assertEquals("Hello", lastEvent);
         assertEquals(Looper.getMainLooper().getThread(), lastThread);
+
+        backgroundPoster.shutdown();
+        backgroundPoster.join();
     }
 
     @Subscribe(threadMode = ThreadMode.MAIN)
@@ -69,68 +57,4 @@ public void onEventMainThread(String event) {
         trackEvent(event);
     }
 
-    class BackgroundPoster extends Thread {
-        volatile boolean running = true;
-        private final List<Object> eventQ = new ArrayList<Object>();
-        private final List<Object> eventsDone = new ArrayList<Object>();
-
-        public BackgroundPoster() {
-            super("BackgroundPoster");
-        }
-
-        @Override
-        public void run() {
-            while (running) {
-                Object event = pollEvent();
-                if (event != null) {
-                    eventBus.post(event);
-                    synchronized (eventsDone) {
-                        eventsDone.add(event);
-                        eventsDone.notifyAll();
-                    }
-                }
-            }
-        }
-
-        private synchronized Object pollEvent() {
-            Object event = null;
-            synchronized (eventQ) {
-                if (eventQ.isEmpty()) {
-                    try {
-                        eventQ.wait(1000);
-                    } catch (InterruptedException e) {
-                    }
-                }
-                if(!eventQ.isEmpty()) {
-                    event = eventQ.remove(0);
-                }
-            }
-            return event;
-        }
-
-        void shutdown() {
-            running = false;
-            synchronized (eventQ) {
-                eventQ.notifyAll();
-            }
-        }
-
-        void post(Object event) {
-            synchronized (eventQ) {
-                eventQ.add(event);
-                eventQ.notifyAll();
-            }
-            synchronized (eventsDone) {
-                while (!eventsDone.remove(event)) {
-                    try {
-                        eventsDone.wait();
-                    } catch (InterruptedException e) {
-                        throw new RuntimeException(e);
-                    }
-                }
-            }
-        }
-
-    }
-
 }
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusMethodModifiersTest.java b/EventBusTest/src/org/greenrobot/eventbus/EventBusMethodModifiersTest.java
index e974e73a..2818d85d 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusMethodModifiersTest.java
+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusMethodModifiersTest.java
@@ -25,7 +25,7 @@
 /**
  * @author Markus Junginger, greenrobot
  */
-public class EventBusMethodModifiersTest extends AbstractEventBusTest {
+public class EventBusMethodModifiersTest extends AbstractAndroidEventBusTest {
 
     @Test
     public void testRegisterForEventTypeAndPost() throws InterruptedException {
diff --git a/EventBusTest/src/org/greenrobot/eventbus/TestBackgroundPoster.java b/EventBusTest/src/org/greenrobot/eventbus/TestBackgroundPoster.java
new file mode 100644
index 00000000..a40eefd9
--- /dev/null
+++ b/EventBusTest/src/org/greenrobot/eventbus/TestBackgroundPoster.java
@@ -0,0 +1,70 @@
+package org.greenrobot.eventbus;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class TestBackgroundPoster extends Thread {
+    private final EventBus eventBus;
+    volatile boolean running = true;
+    private final List<Object> eventQ = new ArrayList<>();
+    private final List<Object> eventsDone = new ArrayList<>();
+
+    TestBackgroundPoster(EventBus eventBus) {
+        super("BackgroundPoster");
+        this.eventBus = eventBus;
+    }
+
+    @Override
+    public void run() {
+        while (running) {
+            Object event = pollEvent();
+            if (event != null) {
+                eventBus.post(event);
+                synchronized (eventsDone) {
+                    eventsDone.add(event);
+                    eventsDone.notifyAll();
+                }
+            }
+        }
+    }
+
+    private synchronized Object pollEvent() {
+        Object event = null;
+        synchronized (eventQ) {
+            if (eventQ.isEmpty()) {
+                try {
+                    eventQ.wait(1000);
+                } catch (InterruptedException ignored) {
+                }
+            }
+            if(!eventQ.isEmpty()) {
+                event = eventQ.remove(0);
+            }
+        }
+        return event;
+    }
+
+    void shutdown() {
+        running = false;
+        synchronized (eventQ) {
+            eventQ.notifyAll();
+        }
+    }
+
+    void post(Object event) {
+        synchronized (eventQ) {
+            eventQ.add(event);
+            eventQ.notifyAll();
+        }
+        synchronized (eventsDone) {
+            while (!eventsDone.remove(event)) {
+                try {
+                    eventsDone.wait();
+                } catch (InterruptedException e) {
+                    throw new RuntimeException(e);
+                }
+            }
+        }
+    }
+
+}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusAndroidOrderTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusAndroidOrderTestWithIndex.java
new file mode 100644
index 00000000..9e1f2318
--- /dev/null
+++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusAndroidOrderTestWithIndex.java
@@ -0,0 +1,13 @@
+package org.greenrobot.eventbus.indexed;
+
+import org.greenrobot.eventbus.EventBusAndroidOrderTest;
+
+public class EventBusAndroidOrderTestWithIndex extends EventBusAndroidOrderTest {
+
+    @Override
+    public void setUp() throws Exception {
+        eventBus = Indexed.build();
+        super.setUp();
+    }
+
+}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBackgroundThreadTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBackgroundThreadTestWithIndex.java
index 00e38203..b1f316a1 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBackgroundThreadTestWithIndex.java
+++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBackgroundThreadTestWithIndex.java
@@ -30,6 +30,6 @@ public void overwriteEventBus() throws Exception {
 
     @Test
     public void testIndex() {
-        assertTrue(eventBus.toString().contains("indexCount=1"));
+        assertTrue(eventBus.toString().contains("indexCount=2"));
     }
 }
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBasicTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBasicTestWithIndex.java
index 4237ce8e..662a70b8 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBasicTestWithIndex.java
+++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBasicTestWithIndex.java
@@ -30,6 +30,6 @@ public void overwriteEventBus() throws Exception {
 
     @Test
     public void testIndex() {
-        assertTrue(eventBus.toString().contains("indexCount=1"));
+        assertTrue(eventBus.toString().contains("indexCount=2"));
     }
 }
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/Indexed.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/Indexed.java
index 1fcda4e3..4aec1ef6 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/Indexed.java
+++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/Indexed.java
@@ -17,10 +17,14 @@
 package org.greenrobot.eventbus.indexed;
 
 import org.greenrobot.eventbus.EventBus;
+import org.greenrobot.eventbus.EventBusJavaTestsIndex;
 import org.greenrobot.eventbus.EventBusTestsIndex;
 
 public class Indexed {
     static EventBus build() {
-        return EventBus.builder().addIndex(new EventBusTestsIndex()).build();
+        return EventBus.builder()
+                .addIndex(new EventBusTestsIndex())
+                .addIndex(new EventBusJavaTestsIndex())
+                .build();
     }
 }
diff --git a/EventBusTestJava/build.gradle b/EventBusTestJava/build.gradle
new file mode 100644
index 00000000..5fec7913
--- /dev/null
+++ b/EventBusTestJava/build.gradle
@@ -0,0 +1,38 @@
+buildscript {
+    repositories {
+        maven { url "https://plugins.gradle.org/m2/" }
+    }
+
+    dependencies {
+        classpath "net.ltgt.gradle:gradle-apt-plugin:0.12"
+    }
+}
+
+apply plugin: 'java'
+// plugin to make it easier/safer to use EventBus annotation processor
+apply plugin: 'net.ltgt.apt-idea'
+
+sourceCompatibility = 1.7
+
+// we have tests in the main source set so they can be shared with the Android test module
+// to make Gradle pick them up, add the dir to the test source set
+sourceSets {
+    test {
+        java {
+            srcDirs += ['src/main/java']
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: '*.jar')
+    compile(project(':eventbus')) {
+        exclude group: "com.google.android" // Does not seem to work...
+    }
+    apt project(':eventbus-annotation-processor')
+    compile 'junit:junit:4.12'
+}
+
+tasks.withType(JavaCompile) {
+    options.compilerArgs += [ "-AeventBusIndex=org.greenrobot.eventbus.EventBusJavaTestsIndex" ]
+}
diff --git a/EventBusTestJava/libs/EventBusTestSubscriberInJar-3.0.0.jar b/EventBusTestJava/libs/EventBusTestSubscriberInJar-3.0.0.jar
new file mode 100644
index 00000000..47b80ef0
Binary files /dev/null and b/EventBusTestJava/libs/EventBusTestSubscriberInJar-3.0.0.jar differ
diff --git a/EventBusTest/src/org/greenrobot/eventbus/AbstractEventBusTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/AbstractEventBusTest.java
similarity index 76%
rename from EventBusTest/src/org/greenrobot/eventbus/AbstractEventBusTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/AbstractEventBusTest.java
index 867cada1..fbbcf265 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/AbstractEventBusTest.java
+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/AbstractEventBusTest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ * Copyright (C) 2012-2017 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,28 +15,23 @@
  */
 package org.greenrobot.eventbus;
 
-import android.annotation.SuppressLint;
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Message;
-import android.support.test.runner.AndroidJUnit4;
-
-import org.greenrobot.eventbus.EventBus;
 import org.junit.Before;
-import org.junit.runner.RunWith;
 
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.logging.Level;
+
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 
 /**
  * @author Markus Junginger, greenrobot
  */
-@RunWith(AndroidJUnit4.class)
 public abstract class AbstractEventBusTest {
     /** Activates long(er) running tests e.g. testing multi-threading more thoroughly.  */
     protected static final boolean LONG_TESTS = false;
@@ -49,8 +44,6 @@
     protected volatile Object lastEvent;
     protected volatile Thread lastThread;
 
-    private EventPostHandler mainPoster;
-
     public AbstractEventBusTest() {
         this(false);
     }
@@ -67,12 +60,6 @@ public AbstractEventBusTest(boolean collectEventsReceived) {
     public void setUpBase() throws Exception {
         EventBus.clearCaches();
         eventBus = new EventBus();
-        mainPoster = new EventPostHandler(Looper.getMainLooper());
-        assertFalse(Looper.getMainLooper().getThread().equals(Thread.currentThread()));
-    }
-
-    protected void postInMainThread(Object event) {
-        mainPoster.post(event);
     }
 
     protected void waitForEventCount(int expectedCount, int maxMillis) {
@@ -104,23 +91,6 @@ protected void trackEvent(Object event) {
         eventCount.incrementAndGet();
     }
 
-    @SuppressLint("HandlerLeak")
-    class EventPostHandler extends Handler {
-        public EventPostHandler(Looper looper) {
-            super(looper);
-        }
-
-        @Override
-        public void handleMessage(Message msg) {
-            eventBus.post(msg.obj);
-        }
-
-        void post(Object event) {
-            sendMessage(obtainMessage(0, event));
-        }
-
-    }
-    
     protected void assertEventCount(int expectedEventCount) {
         assertEquals(expectedEventCount, eventCount.intValue());
     }
@@ -138,4 +108,12 @@ protected void awaitLatch(CountDownLatch latch, long seconds) {
         }
     }
 
+    protected void log(String msg) {
+        eventBus.getLogger().log(Level.FINE, msg);
+    }
+
+    protected void log(String msg, Throwable e) {
+        eventBus.getLogger().log(Level.FINE, msg, e);
+    }
+
 }
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusBasicTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusBasicTest.java
similarity index 87%
rename from EventBusTest/src/org/greenrobot/eventbus/EventBusBasicTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusBasicTest.java
index d6af1eb4..c00b04bd 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusBasicTest.java
+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusBasicTest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+ * Copyright (C) 2012-2017 Markus Junginger, greenrobot (http://greenrobot.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,35 +15,28 @@
  */
 package org.greenrobot.eventbus;
 
-import android.app.Activity;
-import android.support.test.annotation.UiThreadTest;
-import android.support.test.rule.UiThreadTestRule;
-import android.support.test.runner.AndroidJUnit4;
-import android.util.Log;
-
-import org.junit.Before;
-import org.junit.Rule;
 import org.junit.Test;
-import org.junit.runner.RunWith;
 
-import static org.junit.Assert.*;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 
 /**
  * @author Markus Junginger, greenrobot
  */
-@RunWith(AndroidJUnit4.class)
-public class EventBusBasicTest {
+@SuppressWarnings({"WeakerAccess", "UnusedParameters", "unused"})
+public class EventBusBasicTest extends AbstractEventBusTest {
 
     public static class WithIndex extends EventBusBasicTest {
         @Test
-        public void dummy() {}
+        public void dummy() {
+        }
 
     }
 
-    @Rule
-    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();
-
-    protected EventBus eventBus;
     private String lastStringEvent;
     private int countStringEvent;
     private int countIntEvent;
@@ -52,26 +45,20 @@ public void dummy() {}
     private int countMyEvent;
     private int countMyEvent2;
 
-    @Before
-    public void setUp() throws Exception {
-        eventBus = new EventBus();
-    }
-
     @Test
-    @UiThreadTest
     public void testRegisterAndPost() {
         // Use an activity to test real life performance
-        TestActivity testActivity = new TestActivity();
+        StringEventSubscriber stringEventSubscriber = new StringEventSubscriber();
         String event = "Hello";
 
         long start = System.currentTimeMillis();
-        eventBus.register(testActivity);
+        eventBus.register(stringEventSubscriber);
         long time = System.currentTimeMillis() - start;
-        Log.d(EventBus.TAG, "Registered in " + time + "ms");
+        log("Registered in " + time + "ms");
 
         eventBus.post(event);
 
-        assertEquals(event, testActivity.lastStringEvent);
+        assertEquals(event, stringEventSubscriber.lastStringEvent);
     }
 
     @Test
@@ -90,12 +77,13 @@ public void testUnregisterWithoutRegister() {
     public void testUnregisterNotLeaking() {
         int heapMBytes = (int) (Runtime.getRuntime().maxMemory() / (1024L * 1024L));
         for (int i = 0; i < heapMBytes * 2; i++) {
+            @SuppressWarnings("unused")
             EventBusBasicTest subscriber = new EventBusBasicTest() {
                 byte[] expensiveObject = new byte[1024 * 1024];
             };
             eventBus.register(subscriber);
             eventBus.unregister(subscriber);
-            Log.d("Test", "Iteration " + i + " / max heap: " + heapMBytes);
+            log("Iteration " + i + " / max heap: " + heapMBytes);
         }
     }
 
@@ -142,7 +130,7 @@ public void testPostMultipleTimes() {
         }
         // Debug.stopMethodTracing();
         long time = System.currentTimeMillis() - start;
-        Log.d(EventBus.TAG, "Posted " + count + " events in " + time + "ms");
+        log("Posted " + count + " events in " + time + "ms");
         assertEquals(count, countMyEvent);
     }
 
@@ -268,7 +256,7 @@ public void onEvent(MyEventExtended event) {
         countMyEventExtended++;
     }
 
-    public static class TestActivity extends Activity {
+    public static class StringEventSubscriber {
         public String lastStringEvent;
 
         @Subscribe
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusBuilderTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusBuilderTest.java
similarity index 97%
rename from EventBusTest/src/org/greenrobot/eventbus/EventBusBuilderTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusBuilderTest.java
index 42d919de..05a60362 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusBuilderTest.java
+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusBuilderTest.java
@@ -15,6 +15,7 @@
  */
 package org.greenrobot.eventbus;
 
+import org.junit.Assert;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
@@ -61,7 +62,7 @@ public void testInstallDefaultEventBus() {
         try {
             // Either this should throw when another unit test got the default event bus...
             eventBus = builder.installDefaultEventBus();
-            assertEquals(eventBus, EventBus.getDefault());
+            Assert.assertEquals(eventBus, EventBus.getDefault());
 
             // ...or this should throw
             eventBus = builder.installDefaultEventBus();
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusCancelEventDeliveryTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusCancelEventDeliveryTest.java
similarity index 88%
rename from EventBusTest/src/org/greenrobot/eventbus/EventBusCancelEventDeliveryTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusCancelEventDeliveryTest.java
index 869da70e..aeed8fdd 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusCancelEventDeliveryTest.java
+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusCancelEventDeliveryTest.java
@@ -15,20 +15,17 @@
  */
 package org.greenrobot.eventbus;
 
-import android.test.UiThreadTest;
-
 import org.junit.Test;
 
 import java.util.concurrent.CountDownLatch;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.fail;
 
-/**
- * @author Markus Junginger, greenrobot
- */
 public class EventBusCancelEventDeliveryTest extends AbstractEventBusTest {
 
-    private Throwable failed;
+    Throwable failed;
 
     @Test
     public void testCancel() {
@@ -71,17 +68,6 @@ public void testCancelWrongEvent() {
         assertNotNull(failed);
     }
 
-    @UiThreadTest
-    @Test
-    public void testCancelInMainThread() {
-        SubscriberMainThread subscriber = new SubscriberMainThread();
-        eventBus.register(subscriber);
-        eventBus.post("42");
-        awaitLatch(subscriber.done, 10);
-        assertEquals(0, eventCount.intValue());
-        assertNotNull(failed);
-    }
-
     public class Subscriber {
         private final int prio;
         private final boolean cancel;
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusFallbackToReflectionTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusFallbackToReflectionTest.java
similarity index 100%
rename from EventBusTest/src/org/greenrobot/eventbus/EventBusFallbackToReflectionTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusFallbackToReflectionTest.java
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusGenericsTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusGenericsTest.java
similarity index 100%
rename from EventBusTest/src/org/greenrobot/eventbus/EventBusGenericsTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusGenericsTest.java
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusIndexTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusIndexTest.java
similarity index 100%
rename from EventBusTest/src/org/greenrobot/eventbus/EventBusIndexTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusIndexTest.java
index d5acc814..c3923346 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusIndexTest.java
+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusIndexTest.java
@@ -26,8 +26,8 @@
 public class EventBusIndexTest {
     private String value;
 
-    @Test
     /** Ensures the index is actually used and no reflection fall-back kicks in. */
+    @Test
     public void testManualIndexWithoutAnnotation() {
         SubscriberInfoIndex index = new SubscriberInfoIndex() {
 
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassNoMethod.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassNoMethod.java
new file mode 100644
index 00000000..0fcc73cf
--- /dev/null
+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassNoMethod.java
@@ -0,0 +1,5 @@
+package org.greenrobot.eventbus;
+
+// Need to use upper class or Android test runner does not pick it up
+public class EventBusInheritanceDisabledSubclassNoMethod extends EventBusInheritanceDisabledTest {
+}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassTest.java
new file mode 100644
index 00000000..6ab86d23
--- /dev/null
+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassTest.java
@@ -0,0 +1,20 @@
+package org.greenrobot.eventbus;
+
+import org.junit.Ignore;
+
+// Need to use upper class or Android test runner does not pick it up
+public class EventBusInheritanceDisabledSubclassTest extends EventBusInheritanceDisabledTest {
+
+    int countMyEventOverwritten;
+
+    @Subscribe
+    public void onEvent(MyEvent event) {
+        countMyEventOverwritten++;
+    }
+
+    @Override
+    @Ignore
+    public void testEventClassHierarchy() {
+        // TODO fix test in super, then remove this
+    }
+}
\ No newline at end of file
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusInheritanceDisabledTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledTest.java
similarity index 89%
rename from EventBusTest/src/org/greenrobot/eventbus/EventBusInheritanceDisabledTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledTest.java
index 80638e8b..4b026719 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusInheritanceDisabledTest.java
+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledTest.java
@@ -15,18 +15,14 @@
  */
 package org.greenrobot.eventbus;
 
-import android.support.test.runner.AndroidJUnit4;
-
 import org.junit.Before;
 import org.junit.Test;
-import org.junit.runner.RunWith;
 
 import static junit.framework.Assert.assertEquals;
 
 /**
  * @author Markus Junginger, greenrobot
  */
-@RunWith(AndroidJUnit4.class)
 public class EventBusInheritanceDisabledTest {
 
     protected EventBus eventBus;
@@ -94,7 +90,8 @@ public void testEventSuperInterfaceHierarchy() {
 
     @Test
     public void testSubscriberClassHierarchy() {
-        SubscriberExtended subscriber = new SubscriberExtended();
+        EventBusInheritanceDisabledSubclassTest
+                subscriber = new EventBusInheritanceDisabledSubclassTest();
         eventBus.register(subscriber);
 
         eventBus.post("Hello");
@@ -114,7 +111,8 @@ public void testSubscriberClassHierarchy() {
 
     @Test
     public void testSubscriberClassHierarchyWithoutNewSubscriberMethod() {
-        SubscriberExtendedWithoutNewSubscriberMethod subscriber = new SubscriberExtendedWithoutNewSubscriberMethod();
+        EventBusInheritanceDisabledSubclassNoMethod
+                subscriber = new EventBusInheritanceDisabledSubclassNoMethod();
         eventBus.register(subscriber);
 
         eventBus.post("Hello");
@@ -167,18 +165,6 @@ public void onEvent(MyEventInterfaceExtended event) {
     public static class MyEventExtended extends MyEvent implements MyEventInterfaceExtended {
     }
 
-    public static class SubscriberExtended extends EventBusInheritanceDisabledTest {
-        private int countMyEventOverwritten;
-
-        @Subscribe
-        public void onEvent(MyEvent event) {
-            countMyEventOverwritten++;
-        }
-    }
-
-    static class SubscriberExtendedWithoutNewSubscriberMethod extends EventBusInheritanceDisabledTest {
-    }
-
     public class StickySubscriber {
         @Subscribe(sticky = true)
         public void onEvent(Object event) {
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceSubclassNoMethodTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceSubclassNoMethodTest.java
new file mode 100644
index 00000000..a9f6da47
--- /dev/null
+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceSubclassNoMethodTest.java
@@ -0,0 +1,5 @@
+package org.greenrobot.eventbus;
+
+// Need to use upper class or Android test runner does not pick it up
+public class EventBusInheritanceSubclassNoMethodTest extends EventBusInheritanceTest {
+}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceSubclassTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceSubclassTest.java
new file mode 100644
index 00000000..8b3d4e4d
--- /dev/null
+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceSubclassTest.java
@@ -0,0 +1,19 @@
+package org.greenrobot.eventbus;
+
+import org.junit.Ignore;
+
+// Need to use upper class or Android test runner does not pick it up
+public class EventBusInheritanceSubclassTest extends EventBusInheritanceTest {
+    int countMyEventOverwritten;
+
+    @Subscribe
+    public void onEvent(MyEvent event) {
+        countMyEventOverwritten++;
+    }
+
+    @Override
+    @Ignore
+    public void testEventClassHierarchy() {
+        // TODO fix test in super, then remove this
+    }
+}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusInheritanceTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceTest.java
similarity index 88%
rename from EventBusTest/src/org/greenrobot/eventbus/EventBusInheritanceTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceTest.java
index f9619bed..9fd52288 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusInheritanceTest.java
+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceTest.java
@@ -15,14 +15,15 @@
  */
 package org.greenrobot.eventbus;
 
-import junit.framework.TestCase;
-
+import org.junit.Before;
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+
 /**
  * @author Markus Junginger, greenrobot
  */
-public class EventBusInheritanceTest extends TestCase {
+public class EventBusInheritanceTest {
 
     protected EventBus eventBus;
 
@@ -32,8 +33,8 @@
     private int countMyEventInterface;
     private int countMyEventInterfaceExtended;
 
-    protected void setUp() throws Exception {
-        super.setUp();
+    @Before
+    public void setUp() throws Exception {
         eventBus = new EventBus();
     }
 
@@ -89,7 +90,7 @@ public void testEventSuperInterfaceHierarchy() {
 
     @Test
     public void testSubscriberClassHierarchy() {
-        SubscriberExtended subscriber = new SubscriberExtended();
+        EventBusInheritanceSubclassTest subscriber = new EventBusInheritanceSubclassTest();
         eventBus.register(subscriber);
 
         eventBus.post("Hello");
@@ -109,7 +110,8 @@ public void testSubscriberClassHierarchy() {
 
     @Test
     public void testSubscriberClassHierarchyWithoutNewSubscriberMethod() {
-        SubscriberExtendedWithoutNewSubscriberMethod subscriber = new SubscriberExtendedWithoutNewSubscriberMethod();
+        EventBusInheritanceSubclassNoMethodTest
+                subscriber = new EventBusInheritanceSubclassNoMethodTest();
         eventBus.register(subscriber);
 
         eventBus.post("Hello");
@@ -162,18 +164,6 @@ public void onEvent(MyEventInterfaceExtended event) {
     public static class MyEventExtended extends MyEvent implements MyEventInterfaceExtended {
     }
 
-    public static class SubscriberExtended extends EventBusInheritanceTest {
-        private int countMyEventOverwritten;
-
-        @Subscribe
-        public void onEvent(MyEvent event) {
-            countMyEventOverwritten++;
-        }
-    }
-
-    static class SubscriberExtendedWithoutNewSubscriberMethod extends EventBusInheritanceTest {
-    }
-
     public class StickySubscriber {
         @Subscribe(sticky = true)
         public void onEvent(Object event) {
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusMultithreadedTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusMultithreadedTest.java
similarity index 65%
rename from EventBusTest/src/org/greenrobot/eventbus/EventBusMultithreadedTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusMultithreadedTest.java
index f3e7bd50..e1c1576c 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusMultithreadedTest.java
+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusMultithreadedTest.java
@@ -15,9 +15,6 @@
  */
 package org.greenrobot.eventbus;
 
-import android.os.Looper;
-import android.util.Log;
-
 import org.junit.Test;
 
 import java.util.ArrayList;
@@ -25,24 +22,21 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
-/**
- * @author Markus Junginger, greenrobot
- */
 public class EventBusMultithreadedTest extends AbstractEventBusTest {
 
-    private static final int COUNT = LONG_TESTS ? 100000 : 1000;
+    static final int COUNT = LONG_TESTS ? 100000 : 1000;
 
-    private final AtomicInteger countStringEvent = new AtomicInteger();
-    private final AtomicInteger countIntegerEvent = new AtomicInteger();
-    private final AtomicInteger countObjectEvent = new AtomicInteger();
-    private final AtomicInteger countIntTestEvent = new AtomicInteger();
+    final AtomicInteger countStringEvent = new AtomicInteger();
+    final AtomicInteger countIntegerEvent = new AtomicInteger();
+    final AtomicInteger countObjectEvent = new AtomicInteger();
+    final AtomicInteger countIntTestEvent = new AtomicInteger();
 
-    private String lastStringEvent;
-    private Integer lastIntegerEvent;
+    String lastStringEvent;
+    Integer lastIntegerEvent;
 
-    private IntTestEvent lastIntTestEvent;
+    IntTestEvent lastIntTestEvent;
 
     @Test
     public void testPost01Thread() throws InterruptedException {
@@ -74,27 +68,6 @@ public void testPostMixedEventType40Threads() throws InterruptedException {
         runThreadsMixedEventType(40);
     }
 
-    @Test
-    public void testSubscribeUnSubscribeAndPostMixedEventType() throws InterruptedException {
-        List<SubscribeUnsubscribeThread> threads = new ArrayList<SubscribeUnsubscribeThread>();
-
-        // Debug.startMethodTracing("testSubscribeUnSubscribeAndPostMixedEventType");
-        for (int i = 0; i < 5; i++) {
-            SubscribeUnsubscribeThread thread = new SubscribeUnsubscribeThread();
-            thread.start();
-            threads.add(thread);
-        }
-        // This test takes a bit longer, so just use fraction the regular count
-        runThreadsMixedEventType(COUNT / 4, 5);
-        for (SubscribeUnsubscribeThread thread : threads) {
-            thread.shutdown();
-        }
-        for (SubscribeUnsubscribeThread thread : threads) {
-            thread.join();
-        }
-        // Debug.stopMethodTracing();
-    }
-
     private void runThreadsSingleEventType(int threadCount) throws InterruptedException {
         int iterations = COUNT / threadCount;
         eventBus.register(this);
@@ -103,7 +76,7 @@ private void runThreadsSingleEventType(int threadCount) throws InterruptedExcept
         List<PosterThread> threads = startThreads(latch, threadCount, iterations, "Hello");
         long time = triggerAndWaitForThreads(threads, latch);
 
-        Log.d(EventBus.TAG, threadCount + " threads posted " + iterations + " events each in " + time + "ms");
+        log(threadCount + " threads posted " + iterations + " events each in " + time + "ms");
 
         waitForEventCount(COUNT * 2, 5000);
 
@@ -117,7 +90,7 @@ private void runThreadsMixedEventType(int threadCount) throws InterruptedExcepti
         runThreadsMixedEventType(COUNT, threadCount);
     }
 
-    private void runThreadsMixedEventType(int count, int threadCount) throws InterruptedException {
+    void runThreadsMixedEventType(int count, int threadCount) throws InterruptedException {
         eventBus.register(this);
         int eventTypeCount = 3;
         int iterations = count / threadCount / eventTypeCount;
@@ -133,7 +106,7 @@ private void runThreadsMixedEventType(int count, int threadCount) throws Interru
         threads.addAll(threadsIntTestEvent);
         long time = triggerAndWaitForThreads(threads, latch);
 
-        Log.d(EventBus.TAG, threadCount * eventTypeCount + " mixed threads posted " + iterations + " events each in "
+        log(threadCount * eventTypeCount + " mixed threads posted " + iterations + " events each in "
                 + time + "ms");
 
         int expectedCountEach = threadCount * iterations;
@@ -219,7 +192,7 @@ public void run() {
             try {
                 startLatch.await();
             } catch (InterruptedException e) {
-                Log.w(EventBus.TAG, "Unexpeced interrupt", e);
+                log("Unexpected interrupt", e);
             }
 
             for (int i = 0; i < iterations; i++) {
@@ -228,50 +201,4 @@ public void run() {
         }
     }
 
-    public class SubscribeUnsubscribeThread extends Thread {
-        boolean running = true;
-
-        public void shutdown() {
-            running = false;
-        }
-
-        @Override
-        public void run() {
-            try {
-                while (running) {
-                    eventBus.register(this);
-                    double random = Math.random();
-                    if (random > 0.6d) {
-                        Thread.sleep(0, (int) (1000000 * Math.random()));
-                    } else if (random > 0.3d) {
-                        Thread.yield();
-                    }
-                    eventBus.unregister(this);
-                }
-            } catch (InterruptedException e) {
-                throw new RuntimeException(e);
-            }
-        }
-
-        @Subscribe(threadMode = ThreadMode.MAIN)
-        public void onEventMainThread(String event) {
-            assertSame(Looper.getMainLooper(), Looper.myLooper());
-        }
-
-        @Subscribe(threadMode = ThreadMode.BACKGROUND)
-        public void onEventBackgroundThread(Integer event) {
-            assertNotSame(Looper.getMainLooper(), Looper.myLooper());
-        }
-
-        @Subscribe
-        public void onEvent(Object event) {
-            assertNotSame(Looper.getMainLooper(), Looper.myLooper());
-        }
-
-        @Subscribe(threadMode = ThreadMode.ASYNC)
-        public void onEventAsync(Object event) {
-            assertNotSame(Looper.getMainLooper(), Looper.myLooper());
-        }
-    }
-
 }
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusNoSubscriberEventTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusNoSubscriberEventTest.java
similarity index 100%
rename from EventBusTest/src/org/greenrobot/eventbus/EventBusNoSubscriberEventTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusNoSubscriberEventTest.java
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusOrderedSubscriptionsTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusOrderedSubscriptionsTest.java
similarity index 97%
rename from EventBusTest/src/org/greenrobot/eventbus/EventBusOrderedSubscriptionsTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusOrderedSubscriptionsTest.java
index f6f97201..e8d0d796 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusOrderedSubscriptionsTest.java
+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusOrderedSubscriptionsTest.java
@@ -15,8 +15,6 @@
  */
 package org.greenrobot.eventbus;
 
-import android.util.Log;
-
 import org.junit.Test;
 
 import java.util.ArrayList;
@@ -137,7 +135,7 @@ protected void handleEvent(int prio, Object event) {
             }
             lastPrio = prio;
 
-            Log.d(EventBus.TAG, "Subscriber " + prio + " got: " + event);
+            log("Subscriber " + prio + " got: " + event);
             trackEvent(event);
         }
 
@@ -206,7 +204,7 @@ protected void handleEvent(int prio, Object event) {
             }
             lastPrio = prio;
 
-            Log.d(EventBus.TAG, "Subscriber " + prio + " got: " + event);
+            log("Subscriber " + prio + " got: " + event);
             trackEvent(event);
         }
 
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusRegistrationRacingTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusRegistrationRacingTest.java
similarity index 100%
rename from EventBusTest/src/org/greenrobot/eventbus/EventBusRegistrationRacingTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusRegistrationRacingTest.java
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusStickyEventTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusStickyEventTest.java
similarity index 100%
rename from EventBusTest/src/org/greenrobot/eventbus/EventBusStickyEventTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusStickyEventTest.java
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusSubscriberExceptionTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberExceptionTest.java
similarity index 100%
rename from EventBusTest/src/org/greenrobot/eventbus/EventBusSubscriberExceptionTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberExceptionTest.java
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusSubscriberInJarTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberInJarTest.java
similarity index 84%
rename from EventBusTest/src/org/greenrobot/eventbus/EventBusSubscriberInJarTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberInJarTest.java
index 5b013eb9..a553e7bc 100644
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusSubscriberInJarTest.java
+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberInJarTest.java
@@ -16,15 +16,10 @@
 
 package org.greenrobot.eventbus;
 
-import junit.framework.Assert;
-import junit.framework.TestCase;
-
-import org.greenrobot.eventbus.EventBus;
+import org.junit.Assert;
 import org.junit.Test;
 
-import org.greenrobot.eventbus.SubscriberInJar;
-
-public class EventBusSubscriberInJarTest extends TestCase {
+public class EventBusSubscriberInJarTest {
     protected EventBus eventBus = EventBus.builder().build();
 
     @Test
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusSubscriberLegalTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberLegalTest.java
similarity index 100%
rename from EventBusTest/src/org/greenrobot/eventbus/EventBusSubscriberLegalTest.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberLegalTest.java
diff --git a/EventBusTest/src/org/greenrobot/eventbus/IntTestEvent.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/IntTestEvent.java
similarity index 100%
rename from EventBusTest/src/org/greenrobot/eventbus/IntTestEvent.java
rename to EventBusTestJava/src/main/java/org/greenrobot/eventbus/IntTestEvent.java
diff --git a/EventBusTestSubscriberInJar/build.gradle b/EventBusTestSubscriberInJar/build.gradle
index 26adc98b..b75da33b 100644
--- a/EventBusTestSubscriberInJar/build.gradle
+++ b/EventBusTestSubscriberInJar/build.gradle
@@ -4,17 +4,13 @@ group = 'de.greenrobot'
 version = '3.0.0'
 sourceCompatibility = 1.7
 
-repositories {
-    jcenter()
-}
-
 configurations {
     provided
 }
 
 dependencies {
-    compile project(':EventBus')
-    provided project(':EventBusAnnotationProcessor')
+    compile project(':eventbus')
+    provided project(':eventbus-annotation-processor')
 }
 
 sourceSets {
diff --git a/README.md b/README.md
index 49ac7e26..cf9275f8 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,8 @@
+Hey, do have a minute for a [quick survey](https://docs.google.com/forms/d/e/1FAIpQLSePA8NqA9Jlbvh28xcFVbmIGUzHW3dnsxuxi23-ZDPPfkWMSQ/viewform) on how we are doing with EventBus? 
+
 EventBus
 ========
-EventBus is a publish/subscribe event bus optimized for Android.<br/>
+EventBus is a publish/subscribe event bus for Android and Java.<br/>
 <img src="EventBus-Publish-Subscribe.png" width="500" height="187"/>
 
 EventBus...
@@ -22,59 +24,70 @@ EventBus in 3 steps
 1. Define events:
 
     ```java  
-public class MessageEvent { /* Additional fields if needed */ }
-```
+    public static class MessageEvent { /* Additional fields if needed */ }
+    ```
 
 2. Prepare subscribers:
-    Register your subscriber (in your onCreate or in a constructor):  
-
-   ```java
-eventBus.register(this);
-```
-
-    Declare your subscribing method:  
+    Declare and annotate your subscribing method, optionally specify a [thread mode](http://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/):  
 
     ```java
-@Subscribe  
-public void onEvent(AnyEventType event) {/* Do something */};
-```
+    @Subscribe(threadMode = ThreadMode.MAIN)  
+    public void onMessageEvent(MessageEvent event) {/* Do something */};
+    ```
+    Register and unregister your subscriber. For example on Android, activities and fragments should usually register according to their life cycle:
+
+   ```java
+    @Override
+    public void onStart() {
+        super.onStart();
+        EventBus.getDefault().register(this);
+    }
+ 
+    @Override
+    public void onStop() {
+        super.onStop();
+        EventBus.getDefault().unregister(this);
+    }
+    ```
 
 3. Post events:
 
    ```java
-eventBus.post(event);
-```
+    EventBus.getDefault().post(new MessageEvent());
+    ```
 
-This [getting started guide](http://greenrobot.org/eventbus/documentation/how-to-get-started/) shows these 3 steps in more detail.
+Read the full [getting started guide](http://greenrobot.org/eventbus/documentation/how-to-get-started/).
 
 Add EventBus to your project
 ----------------------------
-Please ensure that you are using the latest version by [checking here](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.greenrobot%22%20AND%20a%3A%22eventbus%22)
+<a href="https://search.maven.org/search?q=g:org.greenrobot%20AND%20a:eventbus"><img src="https://img.shields.io/maven-central/v/org.greenrobot/eventbus.svg"></a>
 
-Gradle:
+Via Gradle:
 ```gradle
-compile 'org.greenrobot:eventbus:3.0.0'
+implementation 'org.greenrobot:eventbus:3.1.1'
 ```
 
-Maven:
+Via Maven:
 ```xml
 <dependency>
     <groupId>org.greenrobot</groupId>
     <artifactId>eventbus</artifactId>
-    <version>3.0.0</version>
+    <version>3.1.1</version>
 </dependency>
 ```
 
-[Or download EventBus from Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22eventbus%22)
+Or download [the latest JAR](https://search.maven.org/remote_content?g=org.greenrobot&a=eventbus&v=LATEST) from Maven Central.
 
 Homepage, Documentation, Links
 ------------------------------
-For more details on EventBus please check [EventBus' website](http://greenrobot.org/eventbus). Here are some direct links you may find useful:
+For more details please check the [EventBus website](http://greenrobot.org/eventbus). Here are some direct links you may find useful:
 
 [Features](http://greenrobot.org/eventbus/features/)
 
 [Documentation](http://greenrobot.org/eventbus/documentation/)
 
+[ProGuard](http://greenrobot.org/eventbus/documentation/proguard)
+
 [Changelog](http://greenrobot.org/eventbus/changelog/)
 
 [FAQ](http://greenrobot.org/eventbus/documentation/faq/)
@@ -83,14 +96,16 @@ How does EventBus compare to other solutions, like Otto from Square? Check this
 
 License
 -------
-Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+Copyright (C) 2012-2017 Markus Junginger, greenrobot (http://greenrobot.org)
 
 EventBus binaries and source code can be used according to the [Apache License, Version 2.0](LICENSE).
 
 More Open Source by greenrobot
 ==============================
-[__greenrobot-common__](https://github.com/greenrobot/greenrobot-common) is a set of utility classes and hash functions for Android & Java projects.
+[__ObjectBox__](http://objectbox.io/) ([GitHub](https://github.com/objectbox/objectbox-java)) is a new superfast object-oriented database for mobile.
+
+[__Essentials__](http://greenrobot.org/essentials/) ([GitHub](https://github.com/greenrobot/essentials)) is a set of utility classes and hash functions for Android & Java projects.
 
-[__greenDAO__](https://github.com/greenrobot/greenDAO) is an ORM optimized for Android: it maps database tables to Java objects and uses code generation for optimal speed.
+[__greenDAO__](http://greenrobot.org/greendao/) ([GitHub](https://github.com/greenrobot/greenDAO)) is an ORM optimized for Android: it maps database tables to Java objects and uses code generation for optimal speed.
 
-[Follow us on Google+](https://plus.google.com/b/114381455741141514652/+GreenrobotDe/posts) or check our [homepage](http://greenrobot.org/) to stay up to date.
+Check our [homepage](http://greenrobot.org/) to stay up to date.
diff --git a/build.gradle b/build.gradle
index d0f0925f..f7b81bdf 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,3 +1,18 @@
+buildscript {
+    ext {
+        _buildToolsVersion = '26.0.3' // When updating, don't forget to adjust .travis.yml
+        _compileSdkVersion = 26
+    }
+}
+
+allprojects {
+    repositories {
+        jcenter()
+        mavenCentral()
+        google()
+    }
+}
+
 if (JavaVersion.current().isJava8Compatible()) {
     allprojects {
         tasks.withType(Javadoc) {
@@ -7,5 +22,6 @@ if (JavaVersion.current().isJava8Compatible()) {
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.14'
+    gradleVersion = '4.1'
+    distributionType = org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL
 }
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index d3b83982..7a3265ee 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index f3b61425..bf1b63c3 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,5 @@
-#Tue Jul 12 16:09:12 SGT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/gradlew b/gradlew
index 27309d92..cccdd3d5 100755
--- a/gradlew
+++ b/gradlew
@@ -1,4 +1,4 @@
-#!/usr/bin/env bash
+#!/usr/bin/env sh
 
 ##############################################################################
 ##
@@ -33,11 +33,11 @@ DEFAULT_JVM_OPTS=""
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -154,11 +154,19 @@ if $cygwin ; then
     esac
 fi
 
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
 }
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+APP_ARGS=$(save "$@")
 
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
+
+exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
index f6d5974e..e95643d6 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -49,7 +49,6 @@ goto fail
 @rem Get command-line arguments, handling Windows variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
 
 :win9xME_args
 @rem Slurp the command line arguments.
@@ -60,11 +59,6 @@ set _SKIP=2
 if "x%~1" == "x" goto execute
 
 set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
 
 :execute
 @rem Setup the command line
diff --git a/settings.gradle b/settings.gradle
index a11c17d8..c25cd47e 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,5 +1,9 @@
-include 'EventBus'
-include 'EventBusAnnotationProcessor'
-include 'EventBusTest'
-include 'EventBusTestSubscriberInJar'
-include 'EventBusPerformance'
+include ':EventBus'
+include ':EventBusAnnotationProcessor'
+include ':EventBusTestJava'
+include ':EventBusTest'
+include ':EventBusTestSubscriberInJar'
+include ':EventBusPerformance'
+
+project(":EventBus").name = "eventbus"
+project(":EventBusAnnotationProcessor").name = "eventbus-annotation-processor"
\ No newline at end of file
