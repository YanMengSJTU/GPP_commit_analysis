diff --git a/.gitignore b/.gitignore
index 85d38474..36573eee 100644
--- a/.gitignore
+++ b/.gitignore
@@ -10,3 +10,5 @@ build/
 
 .gradle/
 gradle.properties
+
+local.properties
diff --git a/.travis.yml b/.travis.yml
index 84748701..f2076297 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,3 +1,24 @@
-language: java
+language: android
 jdk:
-  - openjdk6
\ No newline at end of file
+  - openjdk6
+  - oraclejdk7
+
+# http://docs.travis-ci.com/user/languages/android/
+android:
+  components:
+    - build-tools-21.0.2
+    - android-10
+
+before_script:
+  - chmod +x gradlew
+#  - echo no | android create avd --force -n test -t android-10 --abi armeabi
+#  - emulator -avd test -no-skin -no-audio -no-window &
+#  - android-wait-for-emulator
+#  - adb shell input keyevent 82 &
+
+# Currently connectedCheck fails, so don't run unit test on Emulator for now. Issue:
+# com.android.builder.testing.ConnectedDevice > hasTests[test(AVD) - 2.3.3] FAILED
+# No tests found.
+
+script:
+    - TERM=dumb ./gradlew check
diff --git a/CHANGELOG.md b/CHANGELOG.md
new file mode 100644
index 00000000..2db0fc27
--- /dev/null
+++ b/CHANGELOG.md
@@ -0,0 +1,66 @@
+### V2.4.0 (2014-11-11) Clean up release
+* Removed deprecated APIs: A year ago in Version 2.2.0, a couple of EventBus methods were deprecated and flagged to be removed in a future release. Well, version 2.4.0 is that release. Clean ups like this one keep the API concise and simple.
+
+**Note:** No new feature were added since 2.3.0. Use this release if you do not rely on deprecated APIs.
+
+### V2.3.0 (2014-11-11) Feature release: EventBusBuilder and performance fix
+* New EventBusBuilder to configure EventBus instances (including the getDefault() instance, #124)
+* Added configuration to disable "No subscribers registered for event" logs (EventBusBuilder, #107, #117)
+* Added configuration to disable sending SubscriberExceptionEvent and NoSubscriberEvent (EventBusBuilder)
+* Added configuration to fail when subscribers throw exceptions (EventBusBuilder, #55)
+* Added configuration to use an existing thread pool (EventBusBuilder, #115)
+* Added configuration to disable event inheritance improving performance for apps with high event rates (EventBusBuilder)
+* Fixed performance regression sneaked into V2.2.x affecting (first time) registration of subscribers
+* Updated to Gradle 2.1, using wrapper
+* EventBusTest and EventBusPerformance use Gradle to build
+* Added hasSubscriberForEvent to check if currently subscribers exist registered to a given event type
+* Improved README.md and extracted an extended HOWTO.md and CHANGELOG.md from it
+* Ignore compiler generated methods (#76)
+* Various small code improvements (#120 among many others)
+
+**Note:** This is your last chance to use APIs that were deprecated in V2.2.0. It's recommended to switch to Version 2.4.0 (or above) at your earliest convenience.
+
+### V2.2.1 (2014-05-21) Bug fix release
+* Fixed an issue with AsyncExecutor and execution scope
+
+### V2.2.0 (2013-11-18) Feature release, subscriber priority
+* Register subscribers with a priority to to influence the order of event delivery (per delivery thread)
+* Event delivery can be canceled by subscribers so subsequent subscribers will not receive the event
+* Added "isRegistered" and "removeAllStickyEvents" methods
+* Deprecated registration methods with custom method names and event class filters
+* Starting with EventBus 2.2 we enforced methods to be public
+* Fixed a race conditions with subscriber registration
+* Fixed NoSubscriberEvent delivery after unregister
+
+### V2.1.0 (2013-11-15) Bug fix release, experimental util package
+* Experimental: AsyncExecutor executes RunnableEx and wraps exceptions into FailureEvents
+* Experimental: exception to UI mapping (for now based on dialogs)
+* Fixed race condition with queued events that were delivered after subscription was unregistered. This is important for main thread events tied to application life cycle.
+* Fixed typos and improved readme (#17, #22, #37, #39)
+* Make getStickyEvent and removeStickyEvent generic (#45)
+* Fixed bug in SubscriberMethod.equals() (#38)
+
+### V2.0.2 (2013-03-02) Bug fix release
+* Fixed build dependencies, are "provided" now
+
+### V2.0.1 (2013-02-25) Bug fix release, Gradle and Maven Central
+* Fixed #15: removeStickyEvent(...) does not remove event the first time
+* Introduced Gradle build scripts for main project
+* Maven artifacts are pushed to Maven Central starting with this version
+* Added Travis CI
+
+### V2.0.0 (2012-10-23) Major feature release
+* Event methods define for themselves in which thread they get called. This is done by providing "modifiers" to the method name, e.g. onEventMainThread is called by the main thread without further configuration. Have a look at the JavaDoc of the enum ThreadMode for all available thread modes.
+* The event method modifiers replace registerForMainThread methods. Moving this information to the method itself should make things clearer.
+* Using event method modifiers, subscribers can receive the same event type in different threads if they choose to.
+* New "BackgroundThread" modifier for onEvent handler methods ensures that event handler methods are called in a background thread. If an event is posted from a non-main thread, handler methods will be called directly. If posted from the main thread, EventBus will use a background thread to call the handler methods.
+* New "Async" modifier for onEvent handler methods ensures that each event handler method is called completely asynchronously.
+* Better performance: Delivery of multiple events in the main thread got significantly faster.
+* Added sticky events, which are inspired by sticky broadcasts of the Android system. EventBus keeps the most recent sticky events in memory. Subscribers registering with the new method registerSticky, will receive sticky events right away. You can also query and remove sticky events (methods getStickyEvent and removeStickyEvent).
+* By listening to SubscriberExceptionEvent, it is possible to react to Exceptions occuring in subscribers.
+* Bug fixes, and internal refactorings
+
+### V1.0.1 (2012-07-31): Important bug fix release
+Please update! Now, EventBus.unregister releases all internal references to the subscriber.
+
+### V1.0.0 (2012-07-16): First public release
diff --git a/COMPARISON.md b/COMPARISON.md
new file mode 100644
index 00000000..1ba60ccd
--- /dev/null
+++ b/COMPARISON.md
@@ -0,0 +1,98 @@
+EventBus Comparison
+===================
+
+Comparison with Square's Otto
+-----------------------------
+Otto is another event bus library for Android; actually it's a fork of Guava's EventBus. greenrobot's EventBus and Otto share some basic semantics (register, post, unregister, ...), but there are differences which the following table summarizes:
+<table>
+    <tr>
+        <th></th>
+        <th>EventBus</th>
+        <th>Otto</th>
+    </tr>
+    <tr>
+        <th>Declare event handling methods</th>
+        <td>Name conventions</td>
+        <td>Annotations</td>
+    </tr>	
+    <tr>
+        <th>Event inheritance</th>
+        <td>Yes</td>
+        <td>Yes</td>
+    </tr>	
+    <tr>
+        <th>Subscriber inheritance</th>
+        <td>Yes</td>
+        <td>No</td>
+    </tr>
+    <tr>
+        <th>Cache most recent events</th>
+        <td>Yes, sticky events</td>
+        <td>No</td>
+    </tr>
+    <tr>
+        <th>Event producers (e.g. for coding cached events)</th>
+        <td>No</td>
+        <td>Yes</td>
+    </tr>
+    <tr>
+        <th>Event delivery in posting thread</th>
+        <td>Yes (Default)</td>
+        <td>Yes</td>
+    </tr>	
+    <tr>
+        <th>Event delivery in main thread</th>
+        <td>Yes</td>
+        <td>No</td>
+    </tr>	
+    <tr>
+        <th>Event delivery in background thread</th>
+        <td>Yes</td>
+        <td>No</td>
+    </tr>	
+    <tr>
+        <th>Aynchronous event delivery</th>
+        <td>Yes</td>
+        <td>No</td>
+    </tr>
+</table>
+
+Besides features, performance is another differentiator. To compare performance, we created an Android application, which is also part of this repository (EventBusPerformance). You can also run the app on your phone to benchmark different scenarios.
+
+Benchmark results indicate that EventBus is significantly faster in almost every scenario:
+<table>
+    <tr>
+        <th></th>
+        <th>EventBus</th>
+        <th>Otto</th>
+    </tr>
+    <tr>
+        <th>Posting 1000 events, Android 2.3 emulator</th>
+        <td>~70% faster</td>
+        <td></td>
+    </tr>
+	<tr>
+        <th>Posting 1000 events, S3 Android 4.0</th>
+        <td>~110% faster</td>
+        <td></td>
+    </tr>
+    <tr>
+        <th>Register 1000 subscribers, Android 2.3 emulator</th>
+        <td>~10% faster</td>
+        <td></td>
+    </tr>
+    <tr>
+        <th>Register 1000 subscribers, S3 Android 4.0</th>
+        <td>~70% faster</td>
+        <td></td>
+    </tr>
+    <tr>
+        <th>Register subscribers cold start, Android 2.3 emulator</th>
+        <td>~350% faster</td>
+        <td></td>
+    </tr>	
+    <tr>
+        <th>Register subscribers cold start, S3 Android 4.0</th>
+        <td colspan="2">About the same</td>
+    </tr>	
+</table>
diff --git a/EventBus-Publish-Subscribe.png b/EventBus-Publish-Subscribe.png
new file mode 100644
index 00000000..82d3ecef
Binary files /dev/null and b/EventBus-Publish-Subscribe.png differ
diff --git a/EventBus/build.gradle b/EventBus/build.gradle
index 036f195b..153a6440 100644
--- a/EventBus/build.gradle
+++ b/EventBus/build.gradle
@@ -3,7 +3,7 @@ apply plugin: 'maven'
 apply plugin: 'signing'
 
 group = 'de.greenrobot'
-version = '2.2.1'
+version = '2.4.0'
 sourceCompatibility = 1.6
 
 def isSnapshot = version.endsWith('-SNAPSHOT')
@@ -18,7 +18,7 @@ repositories {
     mavenCentral()
 }
 
-// provided is not supported in Gradle 1.4, see http://issues.gradle.org/browse/GRADLE-784
+// Still unsupported, see http://issues.gradle.org/browse/GRADLE-784
 // Like this, it won't appear at all in the POM
 configurations {
     provided
@@ -47,7 +47,7 @@ sourceSets {
 javadoc {
     classpath += configurations.provided
     title = "EventBus ${version} API"
-	options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2012-2013 <a href="http://greenrobot.de/">greenrobot.de</a>. All Rights Reserved.</i>'
+	options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2012-2014 <a href="http://greenrobot.de/">greenrobot.de</a>. All Rights Reserved.</i>'
 }
 
 task javadocJar(type: Jar, dependsOn: javadoc) {
@@ -97,8 +97,8 @@ uploadArchives {
             pom.project {
                name 'EventBus'
                packaging 'jar'
-               description 'EventBus is an Android optimized publish/subscribe event bus.'
-               url 'https://plus.google.com/b/114381455741141514652/communities/114594359857596138845/stream/2f784373-19d9-4a0d-840f-787794a410bc'
+               description 'EventBus is a publish/subscribe event bus optimized for Android .'
+               url 'https://github.com/greenrobot/EventBus'
 
                scm {
                    url 'https://github.com/greenrobot/EventBus'
diff --git a/EventBus/src/de/greenrobot/event/AsyncPoster.java b/EventBus/src/de/greenrobot/event/AsyncPoster.java
index 0c2a5e1e..936527b7 100644
--- a/EventBus/src/de/greenrobot/event/AsyncPoster.java
+++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java
@@ -24,7 +24,6 @@
 class AsyncPoster implements Runnable {
 
     private final PendingPostQueue queue;
-
     private final EventBus eventBus;
 
     AsyncPoster(EventBus eventBus) {
@@ -35,7 +34,7 @@
     public void enqueue(Subscription subscription, Object event) {
         PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);
         queue.enqueue(pendingPost);
-        EventBus.executorService.execute(this);
+        eventBus.getExecutorService().execute(this);
     }
 
     @Override
diff --git a/EventBus/src/de/greenrobot/event/BackgroundPoster.java b/EventBus/src/de/greenrobot/event/BackgroundPoster.java
index caf60a7a..00e9ee54 100644
--- a/EventBus/src/de/greenrobot/event/BackgroundPoster.java
+++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java
@@ -25,10 +25,10 @@
 final class BackgroundPoster implements Runnable {
 
     private final PendingPostQueue queue;
-    private volatile boolean executorRunning;
-
     private final EventBus eventBus;
 
+    private volatile boolean executorRunning;
+
     BackgroundPoster(EventBus eventBus) {
         this.eventBus = eventBus;
         queue = new PendingPostQueue();
@@ -40,7 +40,7 @@ public void enqueue(Subscription subscription, Object event) {
             queue.enqueue(pendingPost);
             if (!executorRunning) {
                 executorRunning = true;
-                EventBus.executorService.execute(this);
+                eventBus.getExecutorService().execute(this);
             }
         }
     }
diff --git a/EventBus/src/de/greenrobot/event/EventBus.java b/EventBus/src/de/greenrobot/event/EventBus.java
index 1ca6746e..e76589d3 100644
--- a/EventBus/src/de/greenrobot/event/EventBus.java
+++ b/EventBus/src/de/greenrobot/event/EventBus.java
@@ -34,25 +34,21 @@
 import de.greenrobot.event.models.AbstractEvent;
 
 /**
- * EventBus is a central publish/subscribe event system for Android. Events are posted ({@link #post(Object)} to the
- * bus, which delivers it to subscribers that have matching handler methods for the event type. To receive events,
- * subscribers must register themselves to the bus using the {@link #register(Object)} method. Once registered,
- * subscribers receive events until the call of {@link #unregister(Object)}. By convention, event handling methods must
- * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event).
- * 
+ * EventBus is a central publish/subscribe event system for Android. Events are posted ({@link #post(Object)}) to the
+ * bus, which delivers it to subscribers that have a matching handler method for the event type. To receive events,
+ * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers receive
+ * events until {@link #unregister(Object)} is called. By convention, event handling methods must be named "onEvent", be
+ * public, return nothing (void), and have exactly one parameter (the event).
+ *
  * @author Markus Junginger, greenrobot
  */
 public class EventBus {
-    private static Integer asyncMaxThreads = Integer.MAX_VALUE;
-
-    static ExecutorService executorService = null;
-
     /** Log tag, apps may override it. */
     public static String TAG = "Event";
 
-    private static volatile EventBus defaultInstance;
+    static volatile EventBus defaultInstance;
 
-    private static final String DEFAULT_METHOD_NAME = "onEvent";
+    private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder();
     private static final Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<Class<?>, List<Class<?>>>();
 
     private final Map<Class<?>, CopyOnWriteArrayList<Subscription>> subscriptionsByEventType;
@@ -71,18 +67,21 @@ protected PostingThreadState initialValue() {
     private final AsyncPoster asyncPoster;
     private final AsyncTrackedPoster asyncTrackedPoster;
     private final SubscriberMethodFinder subscriberMethodFinder;
+    private static Integer asyncMaxThreads = Integer.MAX_VALUE;
+    private ExecutorService executorService;
 
-    private boolean subscribed;
-    private boolean logSubscriberExceptions;
-    private boolean losslessState = false;
+    private final boolean throwSubscriberException;
+    private final boolean logSubscriberExceptions;
+    private final boolean logNoSubscriberMessages;
+    private final boolean sendSubscriberExceptionEvent;
+    private final boolean sendNoSubscriberEvent;
+    private final boolean eventInheritance;
 
     /** Convenience singleton for apps using a process-wide EventBus instance. */
     public static EventBus getDefault() {
         if (defaultInstance == null) {
             synchronized (EventBus.class) {
                 if (defaultInstance == null) {
-                    executorService = new ThreadPoolExecutor(0, asyncMaxThreads, 60L, TimeUnit.SECONDS,
-                            new SynchronousQueue<Runnable>());
                     defaultInstance = new EventBus();
                 }
             }
@@ -90,31 +89,27 @@ public static EventBus getDefault() {
         return defaultInstance;
     }
 
+    public static EventBusBuilder builder() {
+        return new EventBusBuilder();
+    }
+
     /** For unit test primarily. */
     public static void clearCaches() {
         SubscriberMethodFinder.clearCaches();
         eventTypesCache.clear();
     }
 
-    /**
-     * Method name verification is done for methods starting with onEvent to avoid typos; using this method you can
-     * exclude subscriber classes from this check. Also disables checks for method modifiers (public, not static nor
-     * abstract).
-     */
-    public static void skipMethodVerificationFor(Class<?> clazz) {
-        SubscriberMethodFinder.skipMethodVerificationFor(clazz);
-    }
-
-    /** For unit test primarily. */
-    public static void clearSkipMethodNameVerifications() {
-        SubscriberMethodFinder.clearSkipMethodVerifications();
-    }
-
     /**
      * Creates a new EventBus instance; each instance is a separate scope in which events are delivered. To use a
      * central bus, consider {@link #getDefault()}.
      */
     public EventBus() {
+        this(DEFAULT_BUILDER);
+        executorService = new ThreadPoolExecutor(0, asyncMaxThreads, 60L, TimeUnit.SECONDS,
+                new SynchronousQueue<Runnable>());
+    }
+
+    EventBus(EventBusBuilder builder) {
         subscriptionsByEventType = new HashMap<Class<?>, CopyOnWriteArrayList<Subscription>>();
         typesBySubscriber = new HashMap<Object, List<Class<?>>>();
         stickyEvents = new ConcurrentHashMap<Class<?>, Object>();
@@ -122,25 +117,20 @@ public EventBus() {
         backgroundPoster = new BackgroundPoster(this);
         asyncPoster = new AsyncPoster(this);
         asyncTrackedPoster = new AsyncTrackedPoster(this);
-        subscriberMethodFinder = new SubscriberMethodFinder();
-        logSubscriberExceptions = true;
-    }
-
-    /**
-     * Before registering any subscribers, use this method to configure if EventBus should log exceptions thrown by
-     * subscribers (default: true).
-     */
-    public void configureLogSubscriberExceptions(boolean logSubscriberExceptions) {
-        if (subscribed) {
-            throw new EventBusException("This method must be called before any registration");
-        }
-        this.logSubscriberExceptions = logSubscriberExceptions;
+        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);
+        logSubscriberExceptions = builder.logSubscriberExceptions;
+        logNoSubscriberMessages = builder.logNoSubscriberMessages;
+        sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;
+        sendNoSubscriberEvent = builder.sendNoSubscriberEvent;
+        throwSubscriberException = builder.throwSubscriberException;
+        eventInheritance = builder.eventInheritance;
+        executorService = builder.executorService;
     }
 
     /**
      * Registers the given subscriber to receive events. Subscribers must call {@link #unregister(Object)} once they are
      * no longer interested in receiving events.
-     * 
+     * <p/>
      * Subscribers have event handling methods that are identified by their name, typically called "onEvent". Event
      * handling methods must have exactly one parameter, the event. If the event handling method is to be called in a
      * specific thread, a modifier is appended to the method name. Valid modifiers match one of the {@link ThreadMode}
@@ -148,7 +138,7 @@ public void configureLogSubscriberExceptions(boolean logSubscriberExceptions) {
      * "onEventMainThread".
      */
     public void register(Object subscriber) {
-        register(subscriber, DEFAULT_METHOD_NAME, false, 0);
+        register(subscriber, false, 0);
     }
 
     /**
@@ -158,107 +148,34 @@ public void register(Object subscriber) {
      * delivery among subscribers with different {@link ThreadMode}s!
      */
     public void register(Object subscriber, int priority) {
-        register(subscriber, DEFAULT_METHOD_NAME, false, priority);
-    }
-
-    /**
-     * @deprecated For simplification of the API, this method will be removed in the future.
-     */
-    @Deprecated
-    public void register(Object subscriber, String methodName) {
-        register(subscriber, methodName, false, 0);
+        register(subscriber, false, priority);
     }
 
     /**
      * Like {@link #register(Object)}, but also triggers delivery of the most recent sticky event (posted with
-     * {@link #postSticky(Object)}) to the given subscriber.
+     * {@link #registerSticky(Object)}) to the given subscriber.
      */
     public void registerSticky(Object subscriber) {
-        register(subscriber, DEFAULT_METHOD_NAME, true, 0);
+        register(subscriber, true, 0);
     }
 
     /**
-     * Like {@link #register(Object,int)}, but also triggers delivery of the most recent sticky event (posted with
+     * Like {@link #register(Object, int)}, but also triggers delivery of the most recent sticky event (posted with
      * {@link #postSticky(Object)}) to the given subscriber.
      */
     public void registerSticky(Object subscriber, int priority) {
-        register(subscriber, DEFAULT_METHOD_NAME, true, priority);
-    }
-
-    /**
-     * @deprecated For simplification of the API, this method will be removed in the future.
-     */
-    @Deprecated
-    public void registerSticky(Object subscriber, String methodName) {
-        register(subscriber, methodName, true, 0);
+        register(subscriber, true, priority);
     }
 
-    private synchronized void register(Object subscriber, String methodName, boolean sticky, int priority) {
-        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass(),
-                methodName);
+    private synchronized void register(Object subscriber, boolean sticky, int priority) {
+        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());
         for (SubscriberMethod subscriberMethod : subscriberMethods) {
             subscribe(subscriber, subscriberMethod, sticky, priority);
         }
-
-        if (losslessState) {
-            checkQueue();
-        }
-    }
-
-    /**
-     * @deprecated For simplification of the API, this method will be removed in the future.
-     */
-    @Deprecated
-    public void register(Object subscriber, Class<?> eventType, Class<?>... moreEventTypes) {
-        register(subscriber, DEFAULT_METHOD_NAME, false, eventType, moreEventTypes);
-    }
-
-    /**
-     * @deprecated For simplification of the API, this method will be removed in the future.
-     */
-    @Deprecated
-    public void register(Object subscriber, String methodName, Class<?> eventType, Class<?>... moreEventTypes) {
-        register(subscriber, methodName, false, eventType, moreEventTypes);
-    }
-
-    /**
-     * @deprecated For simplification of the API, this method will be removed in the future.
-     */
-    @Deprecated
-    public void registerSticky(Object subscriber, Class<?> eventType, Class<?>... moreEventTypes) {
-        register(subscriber, DEFAULT_METHOD_NAME, true, eventType, moreEventTypes);
-    }
-
-    /**
-     * @deprecated For simplification of the API, this method will be removed in the future.
-     */
-    @Deprecated
-    public void registerSticky(Object subscriber, String methodName, Class<?> eventType, Class<?>... moreEventTypes) {
-        register(subscriber, methodName, true, eventType, moreEventTypes);
-    }
-
-    private synchronized void register(Object subscriber, String methodName, boolean sticky, Class<?> eventType,
-            Class<?>... moreEventTypes) {
-        Class<?> subscriberClass = subscriber.getClass();
-        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass,
-                methodName);
-        for (SubscriberMethod subscriberMethod : subscriberMethods) {
-            if (eventType == subscriberMethod.eventType) {
-                subscribe(subscriber, subscriberMethod, sticky, 0);
-            } else if (moreEventTypes != null) {
-                for (Class<?> eventType2 : moreEventTypes) {
-                    if (eventType2 == subscriberMethod.eventType) {
-                        subscribe(subscriber, subscriberMethod, sticky, 0);
-                        break;
-                    }
-                }
-            }
-        }
     }
 
     // Must be called in synchronized block
     private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boolean sticky, int priority) {
-        subscribed = true;
         Class<?> eventType = subscriberMethod.eventType;
         CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);
         Subscription newSubscription = new Subscription(subscriber, subscriberMethod, priority);
@@ -266,13 +183,11 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boo
             subscriptions = new CopyOnWriteArrayList<Subscription>();
             subscriptionsByEventType.put(eventType, subscriptions);
         } else {
-            for (Subscription subscription : subscriptions) {
-                if (subscription.equals(newSubscription)) {
-                    throw new EventBusException("Subscriber "
-                            + subscriber.getClass()
-                            + " already registered to event "
-                            + eventType);
-                }
+            if (subscriptions.contains(newSubscription)) {
+                throw new EventBusException("Subscriber "
+                        + subscriber.getClass()
+                        + " already registered to event "
+                        + eventType);
             }
         }
 
@@ -311,28 +226,6 @@ public synchronized boolean isRegistered(Object subscriber) {
         return typesBySubscriber.containsKey(subscriber);
     }
 
-    /**
-     * @deprecated For simplification of the API, this method will be removed in the future.
-     */
-    @Deprecated
-    public synchronized void unregister(Object subscriber, Class<?>... eventTypes) {
-        if (eventTypes.length == 0) {
-            throw new IllegalArgumentException("Provide at least one event class");
-        }
-        List<Class<?>> subscribedClasses = typesBySubscriber.get(subscriber);
-        if (subscribedClasses != null) {
-            for (Class<?> eventType : eventTypes) {
-                unubscribeByEventType(subscriber, eventType);
-                subscribedClasses.remove(eventType);
-            }
-            if (subscribedClasses.isEmpty()) {
-                typesBySubscriber.remove(subscriber);
-            }
-        } else {
-            Log.w(TAG, "Subscriber to unregister was not registered before: " + subscriber.getClass());
-        }
-    }
-
     /** Only updates subscriptionsByEventType, not typesBySubscriber! Caller must update typesBySubscriber. */
     private void unubscribeByEventType(Object subscriber, Class<?> eventType) {
         List<Subscription> subscriptions = subscriptionsByEventType.get(eventType);
@@ -369,74 +262,15 @@ public void post(Object event) {
         List<Object> eventQueue = postingState.eventQueue;
         eventQueue.add(event);
 
-        if (postingState.isPosting) {
-            return;
-        } else {
-            postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();
-            postingState.isPosting = true;
-            if (postingState.canceled) {
-                throw new EventBusException("Internal error. Abort state was not reset");
-            }
-            try {
-                int queuePosition = 0;
-
-                while (!eventQueue.isEmpty()) {
-                    if (queuePosition < eventQueue.size()) {
-                        if (typesBySubscriber.containsKey(eventQueue.get(queuePosition))) {
-                            postSingleEvent(eventQueue.remove(queuePosition), postingState);
-                        } else if (queuePosition < eventQueue.size()) {
-                            queuePosition++;
-                        }
-                    } else {
-                        break;
-                    }
-                }
-            } finally {
-                postingState.isPosting = false;
-                postingState.isMainThread = false;
-            }
-        }
-    }
-
-    /**
-     * Everytime some object registers, it validates if the queue is empty, if not checks if someone is listening and if
-     * it is sends the events
-     */
-    private void checkQueue() {
-        PostingThreadState postingState = currentPostingThreadState.get();
-        final List<Object> eventQueue = postingState.eventQueue;
-
-        if (postingState.isPosting || eventQueue.isEmpty()) {
-            return;
-        } else {
+        if (!postingState.isPosting) {
             postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();
             postingState.isPosting = true;
             if (postingState.canceled) {
                 throw new EventBusException("Internal error. Abort state was not reset");
             }
             try {
-                int queuePosition = 0;
-
                 while (!eventQueue.isEmpty()) {
-                    if (queuePosition < eventQueue.size()) {
-                        final Object ob = eventQueue.get(queuePosition);
-                        boolean hasSubscriber = false;
-                        for (List<Class<?>> clazzes : typesBySubscriber.values()) {
-                            for (Class<?> clazz : clazzes) {
-                                if (clazz.getName().equals(ob.getClass().getName())) {
-                                    postSingleEvent(eventQueue.remove(queuePosition), postingState);
-                                    hasSubscriber = true;
-                                    // break; Should not break. Although not very likely, there can be more than one
-                                    // subscriber registered here already.
-                                }
-                            }
-                        }
-                        if (!hasSubscriber && queuePosition < eventQueue.size()) {
-                            queuePosition++;
-                        }
-                    } else {
-                        break;
-                    }
+                    postSingleEvent(eventQueue.remove(0), postingState);
                 }
             } finally {
                 postingState.isPosting = false;
@@ -491,7 +325,7 @@ public void postSticky(Object event) {
 
     /**
      * Gets the most recent sticky event for the given type.
-     * 
+     *
      * @see #postSticky(Object)
      */
     public <T> T getStickyEvent(Class<T> eventType) {
@@ -502,7 +336,7 @@ public void postSticky(Object event) {
 
     /**
      * Remove and gets the recent sticky event for the given event type.
-     * 
+     *
      * @see #postSticky(Object)
      */
     public <T> T removeStickyEvent(Class<T> eventType) {
@@ -513,12 +347,12 @@ public void postSticky(Object event) {
 
     /**
      * Removes the sticky event if it equals to the given event.
-     * 
+     *
      * @return true if the events matched and the sticky event was removed.
      */
     public boolean removeStickyEvent(Object event) {
         synchronized (stickyEvents) {
-            Class<? extends Object> eventType = event.getClass();
+            Class<?> eventType = event.getClass();
             Object existingEvent = stickyEvents.get(eventType);
             if (event.equals(existingEvent)) {
                 stickyEvents.remove(eventType);
@@ -538,45 +372,76 @@ public void removeAllStickyEvents() {
         }
     }
 
+    public boolean hasSubscriberForEvent(Class<?> eventClass) {
+        List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);
+        if (eventTypes != null) {
+            int countTypes = eventTypes.size();
+            for (int h = 0; h < countTypes; h++) {
+                Class<?> clazz = eventTypes.get(h);
+                CopyOnWriteArrayList<Subscription> subscriptions;
+                synchronized (this) {
+                    subscriptions = subscriptionsByEventType.get(clazz);
+                }
+                if (subscriptions != null && !subscriptions.isEmpty()) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
     private void postSingleEvent(Object event, PostingThreadState postingState) throws Error {
-        Class<? extends Object> eventClass = event.getClass();
-        List<Class<?>> eventTypes = findEventTypes(eventClass);
+        Class<?> eventClass = event.getClass();
         boolean subscriptionFound = false;
-        int countTypes = eventTypes.size();
-        for (int h = 0; h < countTypes; h++) {
-            Class<?> clazz = eventTypes.get(h);
-            CopyOnWriteArrayList<Subscription> subscriptions;
-            synchronized (this) {
-                subscriptions = subscriptionsByEventType.get(clazz);
-            }
-            if (subscriptions != null && !subscriptions.isEmpty()) {
-                for (Subscription subscription : subscriptions) {
-                    postingState.event = event;
-                    postingState.subscription = subscription;
-                    boolean aborted = false;
-                    try {
-                        postToSubscription(subscription, event, postingState.isMainThread);
-                        aborted = postingState.canceled;
-                    } finally {
-                        postingState.event = null;
-                        postingState.subscription = null;
-                        postingState.canceled = false;
-                    }
-                    if (aborted) {
-                        break;
-                    }
-                }
-                subscriptionFound = true;
+        if (eventInheritance) {
+            List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);
+            int countTypes = eventTypes.size();
+            for (int h = 0; h < countTypes; h++) {
+                Class<?> clazz = eventTypes.get(h);
+                subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);
             }
+        } else {
+            subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);
         }
         if (!subscriptionFound) {
-            Log.d(TAG, "No subscribers registered for event " + eventClass);
-            if (eventClass != NoSubscriberEvent.class && eventClass != SubscriberExceptionEvent.class) {
+            if (logNoSubscriberMessages) {
+                Log.d(TAG, "No subscribers registered for event " + eventClass);
+            }
+            if (sendNoSubscriberEvent
+                    && eventClass != NoSubscriberEvent.class
+                    && eventClass != SubscriberExceptionEvent.class) {
                 post(new NoSubscriberEvent(this, event));
             }
         }
     }
 
+    private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class<?> eventClass) {
+        CopyOnWriteArrayList<Subscription> subscriptions;
+        synchronized (this) {
+            subscriptions = subscriptionsByEventType.get(eventClass);
+        }
+        if (subscriptions != null && !subscriptions.isEmpty()) {
+            for (Subscription subscription : subscriptions) {
+                postingState.event = event;
+                postingState.subscription = subscription;
+                boolean aborted = false;
+                try {
+                    postToSubscription(subscription, event, postingState.isMainThread);
+                    aborted = postingState.canceled;
+                } finally {
+                    postingState.event = null;
+                    postingState.subscription = null;
+                    postingState.canceled = false;
+                }
+                if (aborted) {
+                    break;
+                }
+            }
+            return true;
+        }
+        return false;
+    }
+
     private Future postToSubscription(Subscription subscription, Object event, boolean isMainThread) {
         Future future = null;
         switch (subscription.subscriberMethod.threadMode) {
@@ -610,8 +475,8 @@ private Future postToSubscription(Subscription subscription, Object event, boole
         return future;
     }
 
-    /** Finds all Class objects including super classes and interfaces. */
-    private List<Class<?>> findEventTypes(Class<?> eventClass) {
+    /** Looks up all Class objects including super classes and interfaces. Should also work for interfaces. */
+    private List<Class<?>> lookupAllEventTypes(Class<?> eventClass) {
         synchronized (eventTypesCache) {
             List<Class<?>> eventTypes = eventTypesCache.get(eventClass);
             if (eventTypes == null) {
@@ -653,12 +518,19 @@ void invokeSubscriber(PendingPost pendingPost) {
         }
     }
 
-    void invokeSubscriber(Subscription subscription, Object event) throws Error {
+    void invokeSubscriber(Subscription subscription, Object event) {
         try {
             subscription.subscriberMethod.method.invoke(subscription.subscriber, event);
         } catch (InvocationTargetException e) {
-            Throwable cause = e.getCause();
-            if (event instanceof SubscriberExceptionEvent) {
+            handleSubscriberException(subscription, event, e.getCause());
+        } catch (IllegalAccessException e) {
+            throw new IllegalStateException("Unexpected exception", e);
+        }
+    }
+
+    private void handleSubscriberException(Subscription subscription, Object event, Throwable cause) {
+        if (event instanceof SubscriberExceptionEvent) {
+            if (logSubscriberExceptions) {
                 // Don't send another SubscriberExceptionEvent to avoid infinite event recursion, just log
                 Log.e(TAG, "SubscriberExceptionEvent subscriber "
                         + subscription.subscriber.getClass()
@@ -668,25 +540,28 @@ void invokeSubscriber(Subscription subscription, Object event) throws Error {
                         + exEvent.causingEvent
                         + " caused exception in "
                         + exEvent.causingSubscriber, exEvent.throwable);
-            } else {
-                if (logSubscriberExceptions) {
-                    Log.e(TAG, "Could not dispatch event: "
-                            + event.getClass()
-                            + " to subscribing class "
-                            + subscription.subscriber.getClass(), cause);
-                }
+            }
+        } else {
+            if (throwSubscriberException) {
+                throw new EventBusException("Invoking subscriber failed", cause);
+            }
+            if (logSubscriberExceptions) {
+                Log.e(TAG, "Could not dispatch event: "
+                        + event.getClass()
+                        + " to subscribing class "
+                        + subscription.subscriber.getClass(), cause);
+            }
+            if (sendSubscriberExceptionEvent) {
                 SubscriberExceptionEvent exEvent = new SubscriberExceptionEvent(this, cause, event,
                         subscription.subscriber);
                 post(exEvent);
             }
-        } catch (IllegalAccessException e) {
-            throw new IllegalStateException("Unexpected exception", e);
         }
     }
 
     /** For ThreadLocal, much faster to set (and get multiple values). */
     final static class PostingThreadState {
-        List<Object> eventQueue = new ArrayList<Object>();
+        final List<Object> eventQueue = new ArrayList<Object>();
         boolean isPosting;
         boolean isMainThread;
         Subscription subscription;
@@ -694,19 +569,15 @@ void invokeSubscriber(Subscription subscription, Object event) throws Error {
         boolean canceled;
     }
 
+    ExecutorService getExecutorService() {
+        return executorService;
+    }
+
     // Just an idea: we could provide a callback to post() to be notified, an alternative would be events, of course...
     /* public */interface PostCallback {
         void onPostCompleted(List<SubscriberExceptionEvent> exceptionEvents);
     }
 
-    public boolean isLosslessState() {
-        return losslessState;
-    }
-
-    public void setLosslessState(boolean losslessState) {
-        this.losslessState = losslessState;
-    }
-
     public static Integer getThreadPoolConfiguration() {
         return asyncMaxThreads;
     }
@@ -717,7 +588,7 @@ public static Integer getThreadPoolConfiguration() {
      * 
      * @param asyncMaxThreads Number of threads
      */
-    public static void setThreadPoolConfiguration(/*String threadPoolName,*/ Integer asyncMaxThreads) {
+    public static void setThreadPoolConfiguration(/* String threadPoolName, */Integer asyncMaxThreads) {
         EventBus.asyncMaxThreads = asyncMaxThreads;
     }
 }
diff --git a/EventBus/src/de/greenrobot/event/EventBusBuilder.java b/EventBus/src/de/greenrobot/event/EventBusBuilder.java
new file mode 100644
index 00000000..06350609
--- /dev/null
+++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java
@@ -0,0 +1,136 @@
+/*
+ * Copyright (C) 2014 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package de.greenrobot.event;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+/**
+ * Creates EventBus instances with custom parameters and also allows to install a custom default EventBus instance.
+ * Create a new builder using {@link EventBus#builder()}.
+ */
+public class EventBusBuilder {
+    private final static ExecutorService DEFAULT_EXECUTOR_SERVICE = Executors.newCachedThreadPool();
+
+    boolean logSubscriberExceptions = true;
+    boolean logNoSubscriberMessages = true;
+    boolean sendSubscriberExceptionEvent = true;
+    boolean sendNoSubscriberEvent = true;
+    boolean throwSubscriberException;
+    boolean eventInheritance = true;
+    ExecutorService executorService = DEFAULT_EXECUTOR_SERVICE;
+    List<Class<?>> skipMethodVerificationForClasses;
+
+    EventBusBuilder() {
+    }
+
+    /** Default: true */
+    public EventBusBuilder logSubscriberExceptions(boolean logSubscriberExceptions) {
+        this.logSubscriberExceptions = logSubscriberExceptions;
+        return this;
+    }
+
+    /** Default: true */
+    public EventBusBuilder logNoSubscriberMessages(boolean logNoSubscriberMessages) {
+        this.logNoSubscriberMessages = logNoSubscriberMessages;
+        return this;
+    }
+
+    /** Default: true */
+    public EventBusBuilder sendSubscriberExceptionEvent(boolean sendSubscriberExceptionEvent) {
+        this.sendSubscriberExceptionEvent = sendSubscriberExceptionEvent;
+        return this;
+    }
+
+    /** Default: true */
+    public EventBusBuilder sendNoSubscriberEvent(boolean sendNoSubscriberEvent) {
+        this.sendNoSubscriberEvent = sendNoSubscriberEvent;
+        return this;
+    }
+
+    /**
+     * Fails if an subscriber throws an exception (default: false).
+     * <p/>
+     * Tip: Use this with BuildConfig.DEBUG to let the app crash in DEBUG mode (only). This way, you won't miss
+     * exceptions during development.
+     */
+    public EventBusBuilder throwSubscriberException(boolean throwSubscriberException) {
+        this.throwSubscriberException = throwSubscriberException;
+        return this;
+    }
+
+    /**
+     * By default, EventBus considers the event class hierarchy (subscribers to super classes will be notified).
+     * Switching this feature off will improve posting of events. For simple event classes extending Object directly,
+     * we measured a speed up of 20% for event posting. For more complex event hierarchies, the speed up should be
+     * >20%.
+     * <p/>
+     * However, keep in mind that event posting usually consumes just a small proportion of CPU time inside an app,
+     * unless it is posting at high rates, e.g. hundreds/thousands of events per second.
+     */
+    public EventBusBuilder eventInheritance(boolean eventInheritance) {
+        this.eventInheritance = eventInheritance;
+        return this;
+    }
+
+
+    /**
+     * Provide a custom thread pool to EventBus used for async and background event delivery. This is an advanced
+     * setting to that can break things: ensure the given ExecutorService won't get stuck to avoid undefined behavior.
+     */
+    public EventBusBuilder executorService(ExecutorService executorService) {
+        this.executorService = executorService;
+        return this;
+    }
+
+    /**
+     * Method name verification is done for methods starting with onEvent to avoid typos; using this method you can
+     * exclude subscriber classes from this check. Also disables checks for method modifiers (public, not static nor
+     * abstract).
+     */
+    public EventBusBuilder skipMethodVerificationFor(Class<?> clazz) {
+        if (skipMethodVerificationForClasses == null) {
+            skipMethodVerificationForClasses = new ArrayList<Class<?>>();
+        }
+        skipMethodVerificationForClasses.add(clazz);
+        return this;
+    }
+
+    /**
+     * Installs the default EventBus returned by {@link EventBus#getDefault()} using this builders' values. Must be
+     * done only once before the first usage of the default EventBus.
+     *
+     * @throws EventBusException if there's already a default EventBus instance in place
+     */
+    public EventBus installDefaultEventBus() {
+        synchronized (EventBus.class) {
+            if (EventBus.defaultInstance != null) {
+                throw new EventBusException("Default instance already exists." +
+                        " It may be only set once before it's used the first time to ensure consistent behavior.");
+            }
+            EventBus.defaultInstance = build();
+            return EventBus.defaultInstance;
+        }
+    }
+
+    /** Builds an EventBus based on the current configuration. */
+    public EventBus build() {
+        return new EventBus(this);
+    }
+
+}
diff --git a/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java
index 346440da..6bcfadc0 100644
--- a/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java
+++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java
@@ -27,12 +27,32 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 class SubscriberMethodFinder {
-    private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC;
+    private static final String ON_EVENT_METHOD_NAME = "onEvent";
+
+    /*
+     * In newer class files, compilers may add methods. Those are called bridge or synthetic methods.
+     * EventBus must ignore both. There modifiers are not public but defined in the Java class file format:
+     * http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6-200-A.1
+     */
+    private static final int BRIDGE = 0x40;
+    private static final int SYNTHETIC = 0x1000;
+
+    private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;
     private static final Map<String, List<SubscriberMethod>> methodCache = new HashMap<String, List<SubscriberMethod>>();
-    private static final Map<Class<?>, Class<?>> skipMethodVerificationForClasses = new ConcurrentHashMap<Class<?>, Class<?>>();
 
-    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, String eventMethodName) {
-        String key = subscriberClass.getName() + '.' + eventMethodName;
+    private final Map<Class<?>, Class<?>> skipMethodVerificationForClasses;
+
+    SubscriberMethodFinder(List<Class<?>> skipMethodVerificationForClassesList) {
+        skipMethodVerificationForClasses = new ConcurrentHashMap<Class<?>, Class<?>>();
+        if (skipMethodVerificationForClassesList != null) {
+            for (Class<?> clazz : skipMethodVerificationForClassesList) {
+                skipMethodVerificationForClasses.put(clazz, clazz);
+            }
+        }
+    }
+
+    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {
+        String key = subscriberClass.getName();
         List<SubscriberMethod> subscriberMethods;
         synchronized (methodCache) {
             subscriberMethods = methodCache.get(key);
@@ -52,15 +72,15 @@
             }
 
             // Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again)
-            Method[] methods = clazz.getMethods();
+            Method[] methods = clazz.getDeclaredMethods();
             for (Method method : methods) {
                 String methodName = method.getName();
-                if (methodName.startsWith(eventMethodName)) {
+                if (methodName.startsWith(ON_EVENT_METHOD_NAME)) {
                     int modifiers = method.getModifiers();
                     if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {
                         Class<?>[] parameterTypes = method.getParameterTypes();
                         if (parameterTypes.length == 1) {
-                            String modifierString = methodName.substring(eventMethodName.length());
+                            String modifierString = methodName.substring(ON_EVENT_METHOD_NAME.length());
                             ThreadMode threadMode;
                             if (modifierString.length() == 0) {
                                 threadMode = ThreadMode.PostThread;
@@ -99,7 +119,7 @@
         }
         if (subscriberMethods.isEmpty()) {
             throw new EventBusException("Subscriber " + subscriberClass + " has no public methods called "
-                    + eventMethodName);
+                    + ON_EVENT_METHOD_NAME);
         } else {
             synchronized (methodCache) {
                 methodCache.put(key, subscriberMethods);
@@ -114,14 +134,4 @@ static void clearCaches() {
         }
     }
 
-    static void skipMethodVerificationFor(Class<?> clazz) {
-        if (!methodCache.isEmpty()) {
-            throw new IllegalStateException("This method must be called before registering anything");
-        }
-        skipMethodVerificationForClasses.put(clazz, clazz);
-    }
-
-    public static void clearSkipMethodVerifications() {
-        skipMethodVerificationForClasses.clear();
-    }
 }
diff --git a/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java b/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java
index 38e8a7bf..71048a43 100644
--- a/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java
+++ b/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java
@@ -92,7 +92,7 @@ public static AsyncExecutor create() {
     private final Executor threadPool;
     private final Constructor<?> failureEventConstructor;
     private final EventBus eventBus;
-    private Object scope;
+    private final Object scope;
 
     private AsyncExecutor(Executor threadPool, EventBus eventBus, Class<?> failureEventType, Object scope) {
         this.threadPool = threadPool;
diff --git a/EventBus/src/de/greenrobot/event/util/ErrorDialogFragmentFactory.java b/EventBus/src/de/greenrobot/event/util/ErrorDialogFragmentFactory.java
index cc36f185..47b693b6 100644
--- a/EventBus/src/de/greenrobot/event/util/ErrorDialogFragmentFactory.java
+++ b/EventBus/src/de/greenrobot/event/util/ErrorDialogFragmentFactory.java
@@ -18,9 +18,6 @@ protected ErrorDialogFragmentFactory(ErrorDialogConfig config) {
 
     /**
      * Prepares the fragment's arguments and creates the fragment. May be overridden to provide custom error fragments.
-     * 
-     * @param argumentsForErrorDialog
-     * @param finishAfterDialog
      */
     protected T prepareErrorFragment(ThrowableFailureEvent event, boolean finishAfterDialog,
             Bundle argumentsForErrorDialog) {
diff --git a/EventBus/src/de/greenrobot/event/util/ErrorDialogManager.java b/EventBus/src/de/greenrobot/event/util/ErrorDialogManager.java
index 910668d7..cee7c6a5 100644
--- a/EventBus/src/de/greenrobot/event/util/ErrorDialogManager.java
+++ b/EventBus/src/de/greenrobot/event/util/ErrorDialogManager.java
@@ -232,8 +232,8 @@ protected static void checkLogException(ThrowableFailureEvent event) {
     }
 
     private static boolean isInExecutionScope(Object executionScope, ThrowableFailureEvent event) {
-        if (executionScope != null && event instanceof HasExecutionScope) {
-            Object eventExecutionScope = ((HasExecutionScope) event).getExecutionScope();
+        if (event != null) {
+            Object eventExecutionScope = event.getExecutionScope();
             if (eventExecutionScope != null && !eventExecutionScope.equals(executionScope)) {
                 // Event not in our scope, do nothing
                 return false;
diff --git a/EventBusPerformance/AndroidManifest.xml b/EventBusPerformance/AndroidManifest.xml
index 91f7ec3b..4967dc56 100644
--- a/EventBusPerformance/AndroidManifest.xml
+++ b/EventBusPerformance/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="de.greenrobot.eventperf"
-    android:versionCode="2"
-    android:versionName="1.0.1" >
+    android:versionCode="3"
+    android:versionName="1.1.0" >
 
     <uses-sdk
         android:minSdkVersion="7"
@@ -27,7 +27,7 @@
         <activity
             android:name=".TestRunnerActivity"
             android:label="@string/app_name"
-            android:process="test.runner" >
+            android:process="de.greenrobot.eventperf.benchmark" >
         </activity>
     </application>
 
diff --git a/EventBusPerformance/build.gradle b/EventBusPerformance/build.gradle
new file mode 100644
index 00000000..cd15599a
--- /dev/null
+++ b/EventBusPerformance/build.gradle
@@ -0,0 +1,35 @@
+buildscript {
+    repositories {
+        mavenCentral()
+    }
+
+    dependencies {
+        classpath 'com.android.tools.build:gradle:0.13.3'
+    }
+}
+
+apply plugin: 'com.android.application'
+
+repositories {
+    mavenCentral()
+}
+
+dependencies {
+    compile project(':EventBus')
+    compile 'com.squareup:otto:1.3.5'
+}
+
+android {
+    buildToolsVersion '20.0.0'
+    compileSdkVersion 19
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+
+    }
+
+}
diff --git a/EventBusPerformance/libs/android-support-v4.jar b/EventBusPerformance/libs/android-support-v4.jar
deleted file mode 100644
index feaf44f8..00000000
Binary files a/EventBusPerformance/libs/android-support-v4.jar and /dev/null differ
diff --git a/EventBusPerformance/libs/eventbus.jar b/EventBusPerformance/libs/eventbus.jar
deleted file mode 100644
index d633bf0c..00000000
Binary files a/EventBusPerformance/libs/eventbus.jar and /dev/null differ
diff --git a/EventBusPerformance/libs/square-otto-1.3.1.jar b/EventBusPerformance/libs/square-otto-1.3.1.jar
deleted file mode 100644
index 6d900ffe..00000000
Binary files a/EventBusPerformance/libs/square-otto-1.3.1.jar and /dev/null differ
diff --git a/EventBusPerformance/res/layout/activity_setuptests.xml b/EventBusPerformance/res/layout/activity_setuptests.xml
index 9c661657..da77afe6 100644
--- a/EventBusPerformance/res/layout/activity_setuptests.xml
+++ b/EventBusPerformance/res/layout/activity_setuptests.xml
@@ -1,125 +1,137 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/LinearLayout1"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:focusableInTouchMode="true"
-    android:orientation="vertical" >
-
-    <Spinner
-        android:id="@+id/spinnerTestToRun"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_margin="14dp"
-        android:entries="@array/spinnerTestsToRun" />
-
-    <ScrollView
-        android:id="@+id/scrollViewSettings"
-        android:layout_width="fill_parent"
-        android:layout_height="0dp"
-        android:layout_weight="1" >
-
-        <LinearLayout
-            android:id="@+id/LinearLayout2"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:orientation="vertical"
-            android:paddingLeft="16dp"
-            android:paddingRight="16dp" >
-
-            <CheckBox
-                android:id="@+id/checkBoxEventBus"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:checked="true"
-                android:onClick="checkEventBus"
-                android:text="@string/test_eventBus" />
-
-            <Spinner
-                android:id="@+id/spinnerThread"
-                android:layout_width="fill_parent"
-                android:layout_height="wrap_content"
-                android:layout_margin="0dp"
-                android:entries="@array/spinnerThreadModes" />
-
-            <CheckBox
-                android:id="@+id/checkBoxOtto"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:checked="true"
-                android:text="@string/test_otto" />
-
-            <CheckBox
-                android:id="@+id/checkBoxBroadcast"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:text="@string/test_broadcast"
-                android:visibility="gone" />
-
-            <CheckBox
-                android:id="@+id/checkBoxLocalBroadcast"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginBottom="32dp"
-                android:text="@string/test_localBroadcast"
-                android:visibility="gone" />
-
-            <RelativeLayout
-                android:id="@+id/relativeLayoutForEvents"
-                android:layout_width="fill_parent"
-                android:layout_height="fill_parent"
-                android:layout_marginBottom="18dp" >
-
-                <EditText
-                    android:id="@+id/editTextEvent"
-                    android:layout_width="90dp"
-                    android:layout_height="wrap_content"
-                    android:layout_alignParentRight="true"
-                    android:inputType="number"
-                    android:text="1000" />
-
-                <TextView
-                    android:id="@+id/eventView"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:layout_alignBaseline="@+id/editTextEvent"
-                    android:layout_alignParentLeft="true"
-                    android:layout_toLeftOf="@+id/editTextEvent"
-                    android:text="@string/eventViewText" />
-            </RelativeLayout>
-
-            <RelativeLayout
-                android:id="@+id/relativeLayoutForSubscribers"
-                android:layout_width="fill_parent"
-                android:layout_height="fill_parent"
-                android:layout_marginBottom="8dp" >
-
-                <EditText
-                    android:id="@+id/editTextSubscribe"
-                    android:layout_width="90dp"
-                    android:layout_height="wrap_content"
-                    android:layout_alignParentRight="true"
-                    android:inputType="number"
-                    android:text="1" />
-
-                <TextView
-                    android:id="@+id/subscribe"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:layout_alignBaseline="@+id/editTextSubscribe"
-                    android:layout_alignParentLeft="true"
-                    android:layout_toLeftOf="@+id/editTextSubscribe"
-                    android:text="@string/subscriberViewText" />
-            </RelativeLayout>
-        </LinearLayout>
-    </ScrollView>
-
-    <Button
-        android:id="@+id/buttonStart"
-        android:layout_width="fill_parent"
-        android:layout_height="50dp"
-        android:layout_margin="16dp"
-        android:onClick="startClick"
-        android:text="@string/buttonStartText" />
-
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/LinearLayout1"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:focusableInTouchMode="true"
+    android:orientation="vertical" >
+
+    <Spinner
+        android:id="@+id/spinnerTestToRun"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:layout_margin="14dp"
+        android:entries="@array/spinnerTestsToRun" />
+
+    <ScrollView
+        android:id="@+id/scrollViewSettings"
+        android:layout_width="fill_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1" >
+
+        <LinearLayout
+            android:id="@+id/LinearLayout2"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+            android:paddingLeft="16dp"
+            android:paddingRight="16dp" >
+
+            <CheckBox
+                android:id="@+id/checkBoxEventBus"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:checked="true"
+                android:onClick="checkEventBus"
+                android:text="@string/test_eventBus" />
+
+            <Spinner
+                android:id="@+id/spinnerThread"
+                android:layout_width="fill_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginLeft="48dp"
+                android:entries="@array/spinnerThreadModes" />
+
+            <CheckBox
+                android:id="@+id/checkBoxEventBusEventHierarchy"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:checked="true"
+                android:onClick="checkEventBus"
+                android:layout_marginLeft="48dp"
+                android:text="@string/test_eventBusEventHierarchy" />
+
+            <CheckBox
+                android:id="@+id/checkBoxOtto"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:checked="true"
+                android:layout_marginTop="16dp"
+                android:text="@string/test_otto" />
+
+
+            <CheckBox
+                android:id="@+id/checkBoxBroadcast"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="@string/test_broadcast"
+                android:visibility="gone" />
+
+
+            <CheckBox
+                android:id="@+id/checkBoxLocalBroadcast"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginBottom="32dp"
+                android:text="@string/test_localBroadcast"
+                android:visibility="gone" />
+
+            <RelativeLayout
+                android:id="@+id/relativeLayoutForEvents"
+                android:layout_width="fill_parent"
+                android:layout_height="fill_parent"
+                android:layout_marginBottom="18dp" >
+
+                <EditText
+                    android:id="@+id/editTextEvent"
+                    android:layout_width="90dp"
+                    android:layout_height="wrap_content"
+                    android:layout_alignParentRight="true"
+                    android:inputType="number"
+                    android:text="1000" />
+
+                <TextView
+                    android:id="@+id/eventView"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_alignBaseline="@+id/editTextEvent"
+                    android:layout_alignParentLeft="true"
+                    android:layout_toLeftOf="@+id/editTextEvent"
+                    android:text="@string/eventViewText" />
+            </RelativeLayout>
+
+            <RelativeLayout
+                android:id="@+id/relativeLayoutForSubscribers"
+                android:layout_width="fill_parent"
+                android:layout_height="fill_parent"
+                android:layout_marginBottom="8dp" >
+
+                <EditText
+                    android:id="@+id/editTextSubscribe"
+                    android:layout_width="90dp"
+                    android:layout_height="wrap_content"
+                    android:layout_alignParentRight="true"
+                    android:inputType="number"
+                    android:text="1" />
+
+                <TextView
+                    android:id="@+id/subscribe"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_alignBaseline="@+id/editTextSubscribe"
+                    android:layout_alignParentLeft="true"
+                    android:layout_toLeftOf="@+id/editTextSubscribe"
+                    android:text="@string/subscriberViewText" />
+            </RelativeLayout>
+        </LinearLayout>
+    </ScrollView>
+
+    <Button
+        android:id="@+id/buttonStart"
+        android:layout_width="fill_parent"
+        android:layout_height="50dp"
+        android:layout_margin="16dp"
+        android:onClick="startClick"
+        android:text="@string/buttonStartText" />
+
 </LinearLayout>
\ No newline at end of file
diff --git a/EventBusPerformance/res/values/strings.xml b/EventBusPerformance/res/values/strings.xml
index e590ea5e..bdb09805 100644
--- a/EventBusPerformance/res/values/strings.xml
+++ b/EventBusPerformance/res/values/strings.xml
@@ -3,6 +3,7 @@
 
     <string name="app_name">Event Performance</string>
     <string name="test_eventBus">EventBus</string>
+    <string name="test_eventBusEventHierarchy">Event Inheritance</string>
     <string name="test_otto">OttoBus</string>
     <string name="test_broadcast">Broadcast</string>
     <string name="test_localBroadcast">Local Broadcast</string>
diff --git a/EventBusPerformance/src/de/greenrobot/eventperf/TestParams.java b/EventBusPerformance/src/de/greenrobot/eventperf/TestParams.java
index 2f2b8d93..1cebfec2 100644
--- a/EventBusPerformance/src/de/greenrobot/eventperf/TestParams.java
+++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestParams.java
@@ -12,6 +12,7 @@
     private int subscriberCount;
     private int publisherCount;
     private ThreadMode threadMode;
+    private boolean eventInheritance;
     private int testNumber;
     private ArrayList<Class<? extends Test>> testClasses;
 
@@ -47,6 +48,14 @@ public void setThreadMode(ThreadMode threadMode) {
         this.threadMode = threadMode;
     }
 
+    public boolean isEventInheritance() {
+        return eventInheritance;
+    }
+
+    public void setEventInheritance(boolean eventInheritance) {
+        this.eventInheritance = eventInheritance;
+    }
+
     public ArrayList<Class<? extends Test>> getTestClasses() {
         return testClasses;
     }
diff --git a/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java
index 20332dd8..2b018b41 100644
--- a/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java
+++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java
@@ -1,7 +1,5 @@
 package de.greenrobot.eventperf;
 
-import java.util.ArrayList;
-
 import android.app.Activity;
 import android.content.Intent;
 import android.os.Bundle;
@@ -11,21 +9,23 @@
 import android.widget.EditText;
 import android.widget.Spinner;
 import de.greenrobot.event.ThreadMode;
-import de.greenrobot.eventperf.testsubject.PerfTestOtto;
 import de.greenrobot.eventperf.testsubject.PerfTestEventBus;
+import de.greenrobot.eventperf.testsubject.PerfTestOtto;
+
+import java.util.ArrayList;
 
 public class TestSetupActivity extends Activity {
 
     @SuppressWarnings("rawtypes")
-    static final Class[] TEST_CLASSES_EVENTBUS = { PerfTestEventBus.Post.class,//
+    static final Class[] TEST_CLASSES_EVENTBUS = {PerfTestEventBus.Post.class,//
             PerfTestEventBus.RegisterOneByOne.class,//
             PerfTestEventBus.RegisterAll.class, //
-            PerfTestEventBus.RegisterFirstTime.class };
+            PerfTestEventBus.RegisterFirstTime.class};
 
-    static final Class[] TEST_CLASSES_OTTO = { PerfTestOtto.Post.class,//
+    static final Class[] TEST_CLASSES_OTTO = {PerfTestOtto.Post.class,//
             PerfTestOtto.RegisterOneByOne.class,//
             PerfTestOtto.RegisterAll.class, //
-            PerfTestOtto.RegisterFirstTime.class };
+            PerfTestOtto.RegisterFirstTime.class};
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
@@ -60,6 +60,8 @@ public void startClick(View v) {
         ThreadMode threadMode = ThreadMode.valueOf(threadModeStr);
         params.setThreadMode(threadMode);
 
+        params.setEventInheritance(((CheckBox) findViewById(R.id.checkBoxEventBusEventHierarchy)).isChecked());
+
         EditText editTextEvent = (EditText) findViewById(R.id.editTextEvent);
         params.setEventCount(Integer.parseInt(editTextEvent.getText().toString()));
 
diff --git a/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestEventBus.java b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestEventBus.java
index 54f0bb70..16920dc3 100644
--- a/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestEventBus.java
+++ b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestEventBus.java
@@ -20,7 +20,7 @@
 
     public PerfTestEventBus(Context context, TestParams params) {
         super(context, params);
-        eventBus = new EventBus();
+        eventBus = EventBus.builder().eventInheritance(params.isEventInheritance()).build();
         subscribers = new ArrayList<Object>();
         eventCount = params.getEventCount();
         expectedEventCount = eventCount * params.getSubscriberCount();
@@ -42,16 +42,16 @@ public void prepareTest() {
 
     private Class<?> getSubscriberClassForThreadMode() {
         switch (params.getThreadMode()) {
-        case MainThread:
-            return SubscribeClassEventBusMain.class;
-        case BackgroundThread:
-            return SubscribeClassEventBusBackground.class;
-        case Async:
-            return SubscriberClassEventBusAsync.class;
-        case PostThread:
-            return SubscribeClassEventBusDefault.class;
-        default:
-            throw new RuntimeException("Unknown: " + params.getThreadMode());
+            case MainThread:
+                return SubscribeClassEventBusMain.class;
+            case BackgroundThread:
+                return SubscribeClassEventBusBackground.class;
+            case Async:
+                return SubscriberClassEventBusAsync.class;
+            case PostThread:
+                return SubscribeClassEventBusDefault.class;
+            default:
+                throw new RuntimeException("Unknown: " + params.getThreadMode());
         }
     }
 
@@ -67,9 +67,10 @@ public void prepareTest() {
         }
 
         public void runTest() {
+            TestEvent event = new TestEvent();
             long timeStart = System.nanoTime();
             for (int i = 0; i < super.eventCount; i++) {
-                super.eventBus.post(new TestEvent());
+                super.eventBus.post(event);
                 if (canceled) {
                     break;
                 }
@@ -88,7 +89,8 @@ public void runTest() {
 
         @Override
         public String getDisplayName() {
-            return "EventBus Post Events, " + params.getThreadMode();
+            String inheritance = params.isEventInheritance() ? ", event inheritance" : ", no event inheritance";
+            return "EventBus Post Events, " + params.getThreadMode() + inheritance;
         }
     }
 
diff --git a/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestOtto.java b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestOtto.java
index c61d2c7d..8e68adde 100644
--- a/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestOtto.java
+++ b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestOtto.java
@@ -61,9 +61,10 @@ public void prepareTest() {
         }
 
         public void runTest() {
+            TestEvent event = new TestEvent();
             long timeStart = System.nanoTime();
             for (int i = 0; i < super.eventCount; i++) {
-                super.eventBus.post(new TestEvent());
+                super.eventBus.post(event);
                 if (canceled) {
                     break;
                 }
diff --git a/EventBusTest/AndroidManifest.xml b/EventBusTest/AndroidManifest.xml
index 75fdd44a..9695813a 100644
--- a/EventBusTest/AndroidManifest.xml
+++ b/EventBusTest/AndroidManifest.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="de.greenrobot.event.test"
+    package="de.greenrobot.event.testapp"
     android:versionCode="1"
     android:versionName="1.0" >
 
@@ -12,7 +12,8 @@
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
 
     <application
-        android:label="@string/app_name" >
+        android:allowBackup="false"
+        android:label="EventBus Test" >
         <uses-library android:name="android.test.runner" />
     </application>
 
diff --git a/EventBusTest/build.gradle b/EventBusTest/build.gradle
new file mode 100644
index 00000000..169fa718
--- /dev/null
+++ b/EventBusTest/build.gradle
@@ -0,0 +1,39 @@
+buildscript {
+    repositories {
+        mavenCentral()
+    }
+
+    dependencies {
+        classpath 'com.android.tools.build:gradle:0.13.3'
+    }
+}
+
+apply plugin: 'com.android.application'
+
+repositories {
+    mavenCentral()
+}
+
+dependencies {
+    androidTestCompile project(':EventBus')
+}
+
+android {
+    buildToolsVersion '20.0.0'
+    compileSdkVersion 19
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+        }
+
+        androidTest {
+            java.srcDirs = ['src']
+        }
+    }
+
+    defaultConfig {
+        testApplicationId "de.greenrobot.event.test"
+        testInstrumentationRunner "android.test.InstrumentationTestRunner"
+    }
+}
diff --git a/EventBusTest/res/values/strings.xml b/EventBusTest/res/values/strings.xml
deleted file mode 100644
index cb90cb81..00000000
--- a/EventBusTest/res/values/strings.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-
-    <string name="app_name">EventBus Test</string>
-
-</resources>
\ No newline at end of file
diff --git a/EventBusTest/src/de/greenrobot/event/test/AbstractEventBusTest.java b/EventBusTest/src/de/greenrobot/event/test/AbstractEventBusTest.java
index d9fed0dd..2d997620 100644
--- a/EventBusTest/src/de/greenrobot/event/test/AbstractEventBusTest.java
+++ b/EventBusTest/src/de/greenrobot/event/test/AbstractEventBusTest.java
@@ -60,7 +60,6 @@ public AbstractEventBusTest(boolean collectEventsReceived) {
     protected void setUp() throws Exception {
         super.setUp();
         EventBus.clearCaches();
-        EventBus.clearSkipMethodNameVerifications();
         eventBus = new EventBus();
         mainPoster = new EventPostHandler(Looper.getMainLooper());
         assertFalse(Looper.getMainLooper().getThread().equals(Thread.currentThread()));
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusBackgroundThreadTest.java b/EventBusTest/src/de/greenrobot/event/test/EventBusBackgroundThreadTest.java
index b3dbc0ab..888b37d5 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusBackgroundThreadTest.java
+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusBackgroundThreadTest.java
@@ -32,7 +32,7 @@ public void testPostInCurrentThread() throws InterruptedException {
     }
 
     public void testPostFromMain() throws InterruptedException {
-        eventBus.register(this, "onEvent");
+        eventBus.register(this);
         postInMainThread("Hello");
         waitForEventCount(1, 1000);
         assertEquals("Hello", lastEvent);
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusBasicTest.java b/EventBusTest/src/de/greenrobot/event/test/EventBusBasicTest.java
index 4f55c378..c34feb38 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusBasicTest.java
+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusBasicTest.java
@@ -15,12 +15,12 @@
  */
 package de.greenrobot.event.test;
 
-import java.lang.ref.WeakReference;
-
-import junit.framework.TestCase;
 import android.app.Activity;
 import android.util.Log;
 import de.greenrobot.event.EventBus;
+import junit.framework.TestCase;
+
+import java.lang.ref.WeakReference;
 
 /**
  * @author Markus Junginger, greenrobot
@@ -40,21 +40,6 @@ protected void setUp() throws Exception {
         eventBus = new EventBus();
     }
 
-    public void testRegisterForEventTypeAndPost() {
-        // Use an activity to test real life performance
-        TestActivity testActivity = new TestActivity();
-        String event = "Hello";
-
-        long start = System.currentTimeMillis();
-        eventBus.register(testActivity, String.class);
-        long time = System.currentTimeMillis() - start;
-        Log.d(EventBus.TAG, "Registered for event class in " + time + "ms");
-
-        eventBus.post(event);
-
-        assertEquals(event, testActivity.lastStringEvent);
-    }
-
     public void testRegisterAndPost() {
         // Use an activity to test real life performance
         TestActivity testActivity = new TestActivity();
@@ -77,7 +62,6 @@ public void testPostWithoutSubscriber() {
     public void testUnregisterWithoutRegister() {
         // Results in a warning without throwing
         eventBus.unregister(this);
-        eventBus.unregister(this, String.class);
     }
 
     public void testUnregisterNotLeaking() {
@@ -90,16 +74,6 @@ public void testUnregisterNotLeaking() {
         assertSubscriberNotReferenced(ref);
     }
 
-    public void testUnregisterForClassNotLeaking() {
-        EventBusBasicTest subscriber = new EventBusBasicTest();
-        eventBus.register(subscriber, String.class);
-        eventBus.unregister(subscriber, String.class);
-
-        WeakReference<EventBusBasicTest> ref = new WeakReference<EventBusBasicTest>(subscriber);
-        subscriber = null;
-        assertSubscriberNotReferenced(ref);
-    }
-
     private void assertSubscriberNotReferenced(WeakReference<EventBusBasicTest> ref) {
         EventBusBasicTest subscriberTest = new EventBusBasicTest();
         WeakReference<EventBusBasicTest> refTest = new WeakReference<EventBusBasicTest>(subscriberTest);
@@ -113,9 +87,9 @@ private void assertSubscriberNotReferenced(WeakReference<EventBusBasicTest> ref)
     }
 
     public void testRegisterTwice() {
-        eventBus.register(this, String.class);
+        eventBus.register(this);
         try {
-            eventBus.register(this, String.class);
+            eventBus.register(this);
             fail("Did not throw");
         } catch (RuntimeException expected) {
             // OK
@@ -132,8 +106,8 @@ public void testIsRegistered() {
 
     public void testPostWithTwoSubscriber() {
         EventBusBasicTest test2 = new EventBusBasicTest();
-        eventBus.register(this, String.class);
-        eventBus.register(test2, String.class);
+        eventBus.register(this);
+        eventBus.register(test2);
         String event = "Hello";
         eventBus.post(event);
         assertEquals(event, lastStringEvent);
@@ -141,7 +115,7 @@ public void testPostWithTwoSubscriber() {
     }
 
     public void testPostMultipleTimes() {
-        eventBus.register(this, MyEvent.class);
+        eventBus.register(this);
         MyEvent event = new MyEvent();
         int count = 1000;
         long start = System.currentTimeMillis();
@@ -156,25 +130,12 @@ public void testPostMultipleTimes() {
     }
 
     public void testPostAfterUnregister() {
-        eventBus.register(this, String.class);
-        eventBus.unregister(this, String.class);
-        eventBus.post("Hello");
-        assertNull(lastStringEvent);
-    }
-
-    public void testPostAfterUnregisterForAllEventClasses() {
-        eventBus.register(this, String.class);
+        eventBus.register(this);
         eventBus.unregister(this);
         eventBus.post("Hello");
         assertNull(lastStringEvent);
     }
 
-    public void testRegisterForOtherTypeThanPosted() {
-        eventBus.register(this, String.class);
-        eventBus.post(42);
-        assertEquals(0, countIntEvent);
-    }
-
     public void testRegisterAndPostTwoTypes() {
         eventBus.register(this);
         eventBus.post(42);
@@ -185,23 +146,13 @@ public void testRegisterAndPostTwoTypes() {
         assertEquals("Hello", lastStringEvent);
     }
 
-    public void testRegisterAndPostTwoTypesExplicit() {
-        eventBus.register(this, String.class, Integer.class);
-        eventBus.post(42);
-        eventBus.post("Hello");
-        assertEquals(1, countIntEvent);
-        assertEquals(1, countStringEvent);
-        assertEquals(42, lastIntEvent);
-        assertEquals("Hello", lastStringEvent);
-    }
-
     public void testRegisterUnregisterAndPostTwoTypes() {
         eventBus.register(this);
-        eventBus.unregister(this, String.class);
+        eventBus.unregister(this);
         eventBus.post(42);
         eventBus.post("Hello");
-        assertEquals(1, countIntEvent);
-        assertEquals(42, lastIntEvent);
+        assertEquals(0, countIntEvent);
+        assertEquals(0, lastIntEvent);
         assertEquals(0, countStringEvent);
     }
 
@@ -222,6 +173,46 @@ public void testPostInEventHandler() {
         assertEquals(10, reposter.lastEvent);
     }
 
+    public void testHasSubscriberForEvent() {
+        assertFalse(eventBus.hasSubscriberForEvent(String.class));
+
+        eventBus.register(this);
+        assertTrue(eventBus.hasSubscriberForEvent(String.class));
+
+        eventBus.unregister(this);
+        assertFalse(eventBus.hasSubscriberForEvent(String.class));
+    }
+
+    public void testHasSubscriberForEventSuperclass() {
+        assertFalse(eventBus.hasSubscriberForEvent(String.class));
+
+        Object subscriber = new Object() {
+            public void onEvent(Object event) {
+            }
+        };
+        eventBus.register(subscriber);
+        assertTrue(eventBus.hasSubscriberForEvent(String.class));
+
+        eventBus.unregister(subscriber);
+        assertFalse(eventBus.hasSubscriberForEvent(String.class));
+    }
+
+    public void testHasSubscriberForEventImplementedInterface() {
+        assertFalse(eventBus.hasSubscriberForEvent(String.class));
+
+        Object subscriber = new Object() {
+            public void onEvent(CharSequence event) {
+            }
+        };
+        eventBus.register(subscriber);
+        assertTrue(eventBus.hasSubscriberForEvent(CharSequence.class));
+        assertTrue(eventBus.hasSubscriberForEvent(String.class));
+
+        eventBus.unregister(subscriber);
+        assertFalse(eventBus.hasSubscriberForEvent(CharSequence.class));
+        assertFalse(eventBus.hasSubscriberForEvent(String.class));
+    }
+
     public void onEvent(String event) {
         lastStringEvent = event;
         countStringEvent++;
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusBuilderTest.java b/EventBusTest/src/de/greenrobot/event/test/EventBusBuilderTest.java
new file mode 100644
index 00000000..58b6bc8d
--- /dev/null
+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusBuilderTest.java
@@ -0,0 +1,95 @@
+/*
+ * Copyright (C) 2014 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package de.greenrobot.event.test;
+
+import de.greenrobot.event.EventBus;
+import de.greenrobot.event.EventBusBuilder;
+import de.greenrobot.event.EventBusException;
+import de.greenrobot.event.NoSubscriberEvent;
+import de.greenrobot.event.SubscriberExceptionEvent;
+
+/**
+ * @author Markus Junginger, greenrobot
+ */
+public class EventBusBuilderTest extends AbstractEventBusTest {
+
+    public void testThrowSubscriberException() {
+        eventBus = EventBus.builder().throwSubscriberException(true).build();
+        eventBus.register(new SubscriberExceptionEventTracker());
+        eventBus.register(new ThrowingSubscriber());
+        try {
+            eventBus.post("Foo");
+            fail("Should have thrown");
+        } catch (EventBusException e) {
+            // Expected
+        }
+    }
+
+    public void testDoNotSendSubscriberExceptionEvent() {
+        eventBus = EventBus.builder().logSubscriberExceptions(false).sendSubscriberExceptionEvent(false).build();
+        eventBus.register(new SubscriberExceptionEventTracker());
+        eventBus.register(new ThrowingSubscriber());
+        eventBus.post("Foo");
+        assertEventCount(0);
+    }
+
+    public void testDoNotSendNoSubscriberEvent() {
+        eventBus = EventBus.builder().logNoSubscriberMessages(false).sendNoSubscriberEvent(false).build();
+        eventBus.register(new NoSubscriberEventTracker());
+        eventBus.post("Foo");
+        assertEventCount(0);
+    }
+
+    public void testInstallDefaultEventBus() {
+        EventBusBuilder builder = EventBus.builder();
+        try {
+            // Either this should throw when another unit test got the default event bus...
+            eventBus = builder.installDefaultEventBus();
+            assertEquals(eventBus, EventBus.getDefault());
+
+            // ...or this should throw
+            eventBus = builder.installDefaultEventBus();
+            fail("Should have thrown");
+        } catch (EventBusException e) {
+            // Expected
+        }
+    }
+
+    public void testEventInheritance() {
+        eventBus = EventBus.builder().eventInheritance(false).build();
+        eventBus.register(new ThrowingSubscriber());
+        eventBus.post("Foo");
+    }
+
+    class SubscriberExceptionEventTracker {
+        public void onEvent(SubscriberExceptionEvent event) {
+            trackEvent(event);
+        }
+    }
+
+    class NoSubscriberEventTracker {
+        public void onEvent(NoSubscriberEvent event) {
+            trackEvent(event);
+        }
+    }
+
+    class ThrowingSubscriber {
+        public void onEvent(Object event) {
+            throw new RuntimeException();
+        }
+    }
+
+}
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusCancelEventDeliveryTest.java b/EventBusTest/src/de/greenrobot/event/test/EventBusCancelEventDeliveryTest.java
index 5d10ad14..027d74f9 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusCancelEventDeliveryTest.java
+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusCancelEventDeliveryTest.java
@@ -76,7 +76,7 @@ public void testCancelInMainThread() {
     }
 
     class Subscriber {
-        private boolean cancel;
+        private final boolean cancel;
 
         public Subscriber(boolean cancel) {
             this.cancel = cancel;
@@ -101,7 +101,7 @@ public void onEvent(String event) {
     }
 
     class SubscriberMainThread {
-        CountDownLatch done = new CountDownLatch(1);
+        final CountDownLatch done = new CountDownLatch(1);
 
         public void onEventMainThread(String event) {
             try {
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusMainThreadTest.java b/EventBusTest/src/de/greenrobot/event/test/EventBusMainThreadTest.java
index 9c364d9d..41b6302b 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusMainThreadTest.java
+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusMainThreadTest.java
@@ -63,8 +63,8 @@ public void onEventMainThread(String event) {
 
     class BackgroundPoster extends Thread {
         volatile boolean running = true;
-        private List<Object> eventQ = new ArrayList<Object>();
-        private List<Object> eventsDone = new ArrayList<Object>();
+        private final List<Object> eventQ = new ArrayList<Object>();
+        private final List<Object> eventsDone = new ArrayList<Object>();
 
         public BackgroundPoster() {
             super("BackgroundPoster");
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusMethodModifiersTest.java b/EventBusTest/src/de/greenrobot/event/test/EventBusMethodModifiersTest.java
index a4b00ccd..6d664b9c 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusMethodModifiersTest.java
+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusMethodModifiersTest.java
@@ -41,7 +41,7 @@ public void testIllegalMethodNameThrow() {
     }
 
     public void testIllegalMethodNameSkip() {
-        EventBus.skipMethodVerificationFor(IllegalEventMethodName.class);
+        eventBus=EventBus.builder().skipMethodVerificationFor(IllegalEventMethodName.class).build();
         eventBus.register(new IllegalEventMethodName());
         eventBus.post(new Object());
     }
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusMultithreadedTest.java b/EventBusTest/src/de/greenrobot/event/test/EventBusMultithreadedTest.java
index e18f7062..be68fd12 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusMultithreadedTest.java
+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusMultithreadedTest.java
@@ -154,8 +154,7 @@ private long triggerAndWaitForThreads(List<PosterThread> threads, CountDownLatch
         return System.currentTimeMillis() - start;
     }
 
-    private List<PosterThread> startThreads(CountDownLatch latch, int threadCount, int iterations, Object eventToPost)
-            throws InterruptedException {
+    private List<PosterThread> startThreads(CountDownLatch latch, int threadCount, int iterations, Object eventToPost) {
         List<PosterThread> threads = new ArrayList<PosterThread>(threadCount);
         for (int i = 0; i < threadCount; i++) {
             PosterThread thread = new PosterThread(latch, iterations, eventToPost);
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusNoSubscriberEventTest.java b/EventBusTest/src/de/greenrobot/event/test/EventBusNoSubscriberEventTest.java
index 1e029ce7..ffe48f10 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusNoSubscriberEventTest.java
+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusNoSubscriberEventTest.java
@@ -15,6 +15,7 @@
  */
 package de.greenrobot.event.test;
 
+import de.greenrobot.event.EventBus;
 import de.greenrobot.event.NoSubscriberEvent;
 import de.greenrobot.event.SubscriberExceptionEvent;
 
@@ -43,9 +44,9 @@ public void onEvent(String dummy) {
         eventBus.unregister(subscriber);
         testNoSubscriberEvent();
     }
-    
+
     public void testBadNoSubscriberSubscriber() {
-        eventBus.configureLogSubscriberExceptions(false);
+        eventBus = EventBus.builder().logNoSubscriberMessages(false).build();
         eventBus.register(this);
         eventBus.register(new BadNoSubscriberSubscriber());
         eventBus.post("Foo");
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusOrderedSubscriptionsTest.java b/EventBusTest/src/de/greenrobot/event/test/EventBusOrderedSubscriptionsTest.java
index ec266bf0..0cb794ac 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusOrderedSubscriptionsTest.java
+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusOrderedSubscriptionsTest.java
@@ -27,7 +27,7 @@
 public class EventBusOrderedSubscriptionsTest extends AbstractEventBusTest {
 
     int lastPrio = Integer.MAX_VALUE;
-    List<PrioSubscriber> registered = new ArrayList<PrioSubscriber>();
+    final List<PrioSubscriber> registered = new ArrayList<PrioSubscriber>();
     private String fail;
 
     public void testOrdered() {
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusRegistrationRacingTest.java b/EventBusTest/src/de/greenrobot/event/test/EventBusRegistrationRacingTest.java
index a213cd4d..41808dc7 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusRegistrationRacingTest.java
+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusRegistrationRacingTest.java
@@ -36,7 +36,7 @@
     volatile CountDownLatch canUnregisterLatch;
     volatile CountDownLatch unregisteredLatch;
     
-    Executor threadPool = Executors.newCachedThreadPool();
+    final Executor threadPool = Executors.newCachedThreadPool();
 
     public void testRacingRegistrations() throws InterruptedException {
         for (int i = 0; i < ITERATIONS; i++) {
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusStickyEventTest.java b/EventBusTest/src/de/greenrobot/event/test/EventBusStickyEventTest.java
index ed0c9097..04be4d91 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusStickyEventTest.java
+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusStickyEventTest.java
@@ -34,20 +34,6 @@ public void testPostStickyTwoEvents() throws InterruptedException {
         assertEquals(2, eventCount.intValue());
     }
 
-    public void testPostStickyTwoEventsRegisterEventTypes() throws InterruptedException {
-        eventBus.postSticky("Sticky");
-        eventBus.postSticky(new IntTestEvent(7));
-        eventBus.registerSticky(this, String.class, IntTestEvent.class);
-        assertEquals(2, eventCount.intValue());
-    }
-
-    public void testPostStickyRegisterForType() throws InterruptedException {
-        eventBus.postSticky("Sticky");
-        eventBus.registerSticky(this, String.class);
-        assertEquals("Sticky", lastEvent);
-        assertEquals(Thread.currentThread(), lastThread);
-    }
-
     public void testPostStickyRegisterNonSticky() throws InterruptedException {
         eventBus.postSticky("Sticky");
         eventBus.register(this);
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusSubscriberExceptionTest.java b/EventBusTest/src/de/greenrobot/event/test/EventBusSubscriberExceptionTest.java
index 74c25d18..f9acaa7e 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusSubscriberExceptionTest.java
+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusSubscriberExceptionTest.java
@@ -15,6 +15,7 @@
  */
 package de.greenrobot.event.test;
 
+import de.greenrobot.event.EventBus;
 import de.greenrobot.event.SubscriberExceptionEvent;
 
 /**
@@ -23,7 +24,7 @@
 public class EventBusSubscriberExceptionTest extends AbstractEventBusTest {
 
     public void testSubscriberExceptionEvent() {
-        eventBus.configureLogSubscriberExceptions(false);
+        eventBus = EventBus.builder().logSubscriberExceptions(false).build();
         eventBus.register(this);
         eventBus.post("Foo");
         assertEventCount(1);
@@ -35,7 +36,7 @@ public void testSubscriberExceptionEvent() {
     }
 
     public void testBadExceptionSubscriber() {
-        eventBus.configureLogSubscriberExceptions(false);
+        eventBus = EventBus.builder().logSubscriberExceptions(false).build();
         eventBus.register(this);
         eventBus.register(new BadExceptionSubscriber());
         eventBus.post("Foo");
diff --git a/HOWTO.md b/HOWTO.md
new file mode 100644
index 00000000..ab0729ca
--- /dev/null
+++ b/HOWTO.md
@@ -0,0 +1,245 @@
+EventBus How-To
+===============
+In the [README file](README.md), you got to know EventBus, and some of its basic principles. You also saw how to add EventBus to your project using Maven Central. Great, now let's dive deeper!
+
+General usage and API
+---------------------
+Here we pick up on the 3 steps of the README and expand a bit on the code.
+### 1: Define events ###
+Events are POJO (plain old Java object) without any specific requirements.
+
+```java
+public class MessageEvent {
+    public final String message;
+
+    public MessageEvent(String message) {
+        this.message = message;
+    }
+}
+```
+### 2: Prepare subscribers ###
+
+Subscribers implement event handling `onEvent` methods that will be called when an event is received. They also need to register and unregister themselves to the bus.
+
+```java
+    @Override
+    public void onStart() {
+        super.onStart();
+        EventBus.getDefault().register(this);
+    }
+
+    @Override
+    public void onStop() {
+        EventBus.getDefault().unregister(this);
+        super.onStop();
+    }
+    
+    // This method will be called when a MessageEvent is posted
+    public void onEvent(MessageEvent event){
+        Toast.makeText(getActivity(), event.message, Toast.LENGTH_SHORT).show();
+    }
+    
+    // This method will be called when a SomeOtherEvent is posted
+    public void onEvent(SomeOtherEvent event){
+        doSomethingWith(event);
+    }
+    
+```
+### 3: Post events ###
+Post an event from any part of your code. All subscribers matching the event type will receive it.
+
+```java
+    EventBus.getDefault().post(new MessageEvent("Hello everyone!"));
+```
+
+Delivery threads and ThreadModes
+--------------------------------
+EventBus can handle threading for you: events can be posted in threads different from the posting thread. 
+
+A common use case is dealing with UI changes. In Android, UI changes must be done in the UI (main) thread. On the other hand, networking, or any time consuming task, must not run on the main thread. EventBus helps you to deal with those tasks and synchronize with the UI thread (without having to delve into thread transitions, using AsyncTask, etc).
+
+In EventBus, you may define the thread that will call the event handling method `onEvent` by using a **ThreadMode**:
+* **PostThread:** Subscriber will be called in the same thread, which is posting the event. This is the default. Event delivery implies the least overhead because it avoids thread switching completely. Thus this is the recommended mode for simple tasks that are known to complete is a very short time without requiring the main thread. Event handlers using this mode should return quickly to avoid blocking the posting thread, which may be the main thread.
+Example:
+```java
+    // Called in the same thread (default)
+    public void onEvent(MessageEvent event) {
+        log(event.message);
+    }
+```
+* **MainThread:** Subscriber will be called in Android's main thread (sometimes referred to as UI thread). If the posting thread is the main thread, event handler methods will be called directly. Event handlers using this mode must return quickly to avoid blocking the main thread.
+Example:
+```java
+    // Called in Android UI's main thread
+    public void onEventMainThread(MessageEvent event) {
+        textField.setText(event.message);
+    }
+```
+* **BackgroundThread:** Subscriber will be called in a background thread. If posting thread is not the main thread, event handler methods will be called directly in the posting thread. If the posting thread is the main thread, EventBus uses a single background thread that will deliver all its events sequentially. Event handlers using this mode should try to return quickly to avoid blocking the background thread.
+```java
+    // Called in the background thread
+    public void onEventBackgroundThread(MessageEvent event){
+        saveToDisk(event.message);
+    }
+```
+* **Async:** Event handler methods are called in a separate thread. This is always independent from the posting thread and the main thread. Posting events never wait for event handler methods using this mode. Event handler methods should use this mode if their execution might take some time, e.g. for network access. Avoid triggering a large number of long running asynchronous handler methods at the same time to limit the number of concurrent threads. EventBus uses a thread pool to efficiently reuse threads from completed asynchronous event handler notifications.
+```java
+    // Called in a separate thread
+    public void onEventAsync(MessageEvent event){
+        backend.send(event.message);
+    }
+```
+
+*Note:* EventBus takes care of calling the `onEvent` method in the proper thread depending on its name (onEvent, onEventAsync, etc.).
+
+Subscriber priorities and ordered event delivery
+------------------------------------------------
+You may change the order of event delivery by providing a priority to the subscriber during registration.
+
+```java
+    int priority = 1;
+    EventBus.getDefault().register(this, priority);
+```
+
+Within the same delivery thread (ThreadMode), higher priority subscribers will receive events before others with a lower priority. The default priority is 0. 
+
+*Note*: the priority does *NOT* affect the order of delivery among subscribers with different [ThreadModes](#delivery-threads-and-threadmodes)!
+
+Configure EventBus using EventBusBuilder
+----------------------------------------
+EventBus 2.3 added EventBusBuilder to configure various aspects of EventBus. For example, here's how to build an EventBus that keeps quiet in case a posted event has no subscribers:
+
+```java
+    EventBus eventBus = EventBus.builder().logNoSubscriberMessages(false).sendNoSubscriberEvent(false).build();
+```
+
+Another example is to fail when a subscriber throws an exception. Note: by default, EventBus catches exceptions thrown from onEvent methods and sends an SubscriberExceptionEvent that may but do not have to be handled.
+
+```java
+    EventBus eventBus = EventBus.builder().throwSubscriberException(true).build();
+```
+
+Check the EventBusBuilder class and its JavaDoc for all possible configuration possibilities.
+
+### Configure the default EventBus instance ###
+Using EventBus.getDefault() is a simple way to get an shared EventBus instance. EventBusBuilder also allows to configure this default instance using the method <code>installDefaultEventBus()</code>.
+
+For example, it's possible to configure the default EventBus instance to rethrow exceptions, which occurred in onEvent methods. But let's to this only for DEBUG builds, because this will likely crash the app on exceptions:
+
+```java
+EventBus.builder().throwSubscriberException(BuildConfig.DEBUG).installDefaultEventBus();
+```
+
+Note: this can be done only once before the the default EventBus instance is used the first time. This ensures consistent behavior in your app. Your Application class is a good place to configure the default EventBus instance before its used.
+
+Cancelling event delivery
+-------------------------
+You may cancel the event delivery process by calling `cancelEventDelivery(Object event)` from a subscriber's event handling method. 
+Any further event delivery will be cancelled: subsequent subscribers won't receive the event.
+```java
+    // Called in the same thread (default)
+    public void onEvent(MessageEvent event){
+    	// Process the event 
+    	...
+    	
+    	EventBus.getDefault().cancelEventDelivery(event) ;
+    }
+```
+
+Events are usually cancelled by higher priority subscribers. Cancelling is restricted to event handling methods running in posting thread [ThreadMode.PostThread](#delivery-threads-and-threadmodes).
+
+Sticky Events
+-------------
+Some events carry information that is of interest after the event is posted. For example, this could be an event signalizing that some initialization is complete. Or if you have some sensor or location data and you want to hold on the most recent values. Instead of implementing your own caching, you can use sticky events. EventBus keeps the last sticky event of a certain type in memory. The sticky event can be delivered to subscribers or queried explicitly. Thus, you don't need any special logic to consider already available data.
+
+Let's say, an sticky event was posted some time ago:
+```java
+    EventBus.getDefault().postSticky(new MessageEvent("Hello everyone!"));
+```
+
+After that, a new Activity gets started. During registration using registerSticky, it will immediately get the previously posted sticky event:
+```java
+    @Override
+    public void onStart() {
+        super.onStart();
+        EventBus.getDefault().registerSticky(this);
+    }
+
+    public void onEventMainThread(MessageEvent event) {
+        textField.setText(event.message);
+    }
+
+    @Override
+    public void onStop() {
+        EventBus.getDefault().unregister(this);
+        super.onStop();
+    }
+```
+
+You may also get the last sticky event of a certain type with:
+```java
+    EventBus.getDefault().getStickyEvent(Class<?> eventType)
+```
+
+It's also possible to remove previously posted sticky events using one of the removeStickyEvent methods. They take either a concrete event object, or an event class. Like this it's possible to create consumable events. Keep in mind though that that only the last event of an event type is kept.
+
+ProGuard configuration
+----------------------
+ProGuard obfuscates method names. However, the onEvent methods must not renamed because they are accessed using reflection. Use the following snip in your ProGuard configuration file (proguard.cfg):
+<pre><code>-keepclassmembers class ** {
+    public void onEvent*(**);
+}
+
+# Only required if you use AsyncExecutor
+-keepclassmembers class * extends de.greenrobot.event.util.ThrowableFailureEvent {
+    <init>(java.lang.Throwable);
+}
+</code></pre>
+
+
+AsyncExecutor
+-------------
+_Disclaimer:_ AsyncExecutor is a non-core utility class. It might save you some code with error handling in background threads, but it's not a core EventBus class.
+
+AsyncExecutor is like a thread pool, but with failure handling. Failures are thrown exceptions, which get are wrapped inside an event, which is posted automatically by AsyncExecutor.
+
+Usually, you call AsyncExecutor.create() to create an instance and keep it in Application scope. To execute something, implement the RunnableEx interface and pass it to the execute method of the AsyncExecutor. Unlike Runnable, RunnableEx may throw an Exception.
+
+If the RunnableEx implementation throws an exception, it will be catched and wrapped into a ThrowableFailureEvent, which will be posted.
+
+Code example for execution:
+
+```java
+AsyncExecutor.create().execute(
+  new RunnableEx {
+    public void run throws LoginException {
+      remote.login();
+      EventBus.getDefault().postSticky(new LoggedInEvent());
+      // No need to catch Exception
+    }
+  }
+}
+```
+
+Code example for the receiving part:
+
+```java
+public void onEventMainThread(LoggedInEvent event) {
+  // Change some UI
+}
+
+public void onEventMainThread(ThrowableFailureEvent event) {
+  // Show error in UI
+}
+```
+
+AsyncExecutor Builder
+---------------------
+If you want to customize your AsyncExecutor instance, call the static method AsyncExecutor.builder(). It will return a builder which lets you customize the EventBus instance, the thread pool, and the class of the failure event.
+
+Another customization options is the execution scope, which gives failure events context information. For example, an failure event may be relevant only to a specific Activity instance or class. If your custom failure event class implements the HasExecutionScope interface, AsyncExecutor will set the execution scope automatically. Like this, your subscriber can query the failure event for its execution scope and react depending on it.
+
+
+Comparison with Square's Otto
+-----------------------------
+Check the [COMPARISON.md](COMPARISON.md)
\ No newline at end of file
diff --git a/LICENSE b/LICENSE
new file mode 100644
index 00000000..d6456956
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,202 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 00000000..3d0dee6e
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 00000000..2583d2d1
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Sat Nov 08 10:08:52 CET 2014
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.1-all.zip
diff --git a/gradlew b/gradlew
new file mode 100644
index 00000000..91a7e269
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 00000000..8a0b282a
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/settings.gradle b/settings.gradle
index e060990c..76c570b0 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +1,3 @@
-include 'EventBus'
\ No newline at end of file
+include 'EventBus'
+include 'EventBusTest'
+include 'EventBusPerformance'
