diff --git a/README.md b/README.md
index 1f193bd9..94b7b35c 100644
--- a/README.md
+++ b/README.md
@@ -1,105 +1,111 @@
-EventBus
-========
-EventBus is a publish/subscribe event bus optimized for Android.<br/>
-<img src="EventBus-Publish-Subscribe.png" width="500" height="187"/>
-
-EventBus...
-
- * simplifies the communication between components
-    * decouples event senders and receivers
-    * performs well with Activities, Fragments, and background threads
-    * avoids complex and error-prone dependencies and life cycle issues
- * makes your code simpler
- * is fast
- * is tiny (~50k jar)
- * is proven in practice by apps with 100,000,000+ installs
- * has advanced features like delivery threads, subscriber priorities, etc.
-
- [![Build Status](https://travis-ci.org/greenrobot/EventBus.svg?branch=master)](https://travis-ci.org/greenrobot/EventBus)
-
-EventBus in 3 steps
--------------------
-1. Define events:
-
-    ```java  
-    public static class MessageEvent { /* Additional fields if needed */ }
-    ```
-
-2. Prepare subscribers:
-    Declare and annotate your subscribing method, optionally specify a [thread mode](http://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/):  
-
-    ```java
-    @Subscribe(threadMode = ThreadMode.MAIN)  
-    public void onMessageEvent(MessageEvent event) {/* Do something */};
-    ```
-    Register and unregister your subscriber. For example on Android, activities and fragments should usually register according to their life cycle:
-
-   ```java
+# EventBus使用
+
+开源地址：[https://github.com/greenrobot/EventBus](https://github.com/greenrobot/EventBus)
+
+* 爱生活,爱学习,更爱做代码的搬运工,分类查找更方便请下载黑马助手app
+
+
+![黑马助手.png](http://upload-images.jianshu.io/upload_images/4037105-f777f1214328dcc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
+
+
+## 使用步骤
+
+### 1. 在Module的build.gradle添加依赖
+
+	compile 'org.greenrobot:eventbus:3.0.0'
+
+
+### 2. 创建事件
+	public class MyEvent {
+	    public String msg;
+	    public MyEvent(String msg) {
+	        this.msg = msg;
+	    }
+	}
+
+### 3. 注册和反注册EventBus
     @Override
-    public void onStart() {
-        super.onStart();
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+        //注册事件总线
         EventBus.getDefault().register(this);
     }
- 
+
+
     @Override
-    public void onStop() {
-        super.onStop();
+    protected void onDestroy() {
+        super.onDestroy();
+        //反注册事件总线
         EventBus.getDefault().unregister(this);
     }
-    ```
-
-3. Post events:
-
-   ```java
-    EventBus.getDefault().post(new MessageEvent());
-    ```
 
-**Read the full [getting started guide](http://greenrobot.org/eventbus/documentation/how-to-get-started/).**
 
-Add EventBus to your project
-----------------------------
-Please ensure that you are using the latest version by [checking here](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.greenrobot%22%20AND%20a%3A%22eventbus%22)
-
-Gradle:
-```gradle
-compile 'org.greenrobot:eventbus:3.0.0'
-```
-
-Maven:
-```xml
-<dependency>
-    <groupId>org.greenrobot</groupId>
-    <artifactId>eventbus</artifactId>
-    <version>3.0.0</version>
-</dependency>
-```
+### 4. 监听事件
+	
+	/**
+     * POSTING线程模型：在哪个线程发布事件，就在哪个线程执行onPostingEvent方法
+     */
+    @Subscribe(threadMode = ThreadMode.POSTING)
+    public void onPostingEvent(MyEvent event) {
+        Log.d(TAG, "onPostingEvent: " + Thread.currentThread().getName());
+    }
 
-[Or download EventBus from Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.greenrobot%22%20AND%20a%3A%22eventbus%22)
 
-Homepage, Documentation, Links
-------------------------------
-For more details on EventBus please check [EventBus' website](http://greenrobot.org/eventbus). Here are some direct links you may find useful:
+    /**
+     * MAIN线程模型：不管是哪个线程发布事件，都在主线程执行onMainEvent方法
+     */
+    @Subscribe(threadMode = ThreadMode.MAIN)
+    public void onMainEvent(MyEvent event) {
+        Log.d(TAG, "onMainEvent: " + Thread.currentThread().getName());
+    }
 
-[Features](http://greenrobot.org/eventbus/features/)
+    /**
+     * BACKGROUND线程模型：事件如果是在子线程发布，onBackgroundEvent方法就在该子线程执行，事件如果是在
+     * 主线程中发布，onBackgroundEvent方法就在EventBus内部的线程池中执行
+     */
+    @Subscribe(threadMode = ThreadMode.BACKGROUND)
+    public void onBackgroundEvent(MyEvent event) {
+        Log.d(TAG, "onBackgroundEvent: " + Thread.currentThread().getName());
+    }
 
-[Documentation](http://greenrobot.org/eventbus/documentation/)
+    /**
+     * ASYNC线程模型：不管事件在哪个线程发布，onAsyncEvent方法都在EventBus内部的线程池中执行
+     */
+    @Subscribe(threadMode = ThreadMode.ASYNC)
+    public void onAsyncEvent(MyEvent event) {
+        Log.d(TAG, "onAsyncEvent: " + Thread.currentThread().getName());
+    }
 
-[Changelog](http://greenrobot.org/eventbus/changelog/)
+### 5. 发布事件
+    /**
+     * 在主线程中发布事件
+     * @param view
+     */
+    public void onPublishEventOnMainThread(View view) {
+        MyEvent event = new MyEvent("msg from publisher main thread");
+        EventBus.getDefault().post(event);
+    }
 
-[FAQ](http://greenrobot.org/eventbus/documentation/faq/)
+    /**
+     * 在子线程中发送事件
+     * @param view
+     */
+    public void onPublishEventOnBGThread(View view) {
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                MyEvent event = new MyEvent("msg from publisher bg thread");
+                EventBus.getDefault().post(event);
+            }
+        }).start();
+    }
 
-How does EventBus compare to other solutions, like Otto from Square? Check this [comparison](COMPARISON.md).
 
-License
--------
-Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
+* 详细的使用方法在DEMO里面都演示啦,如果你觉得这个库还不错,请赏我一颗star吧~~~
 
-EventBus binaries and source code can be used according to the [Apache License, Version 2.0](LICENSE).
+* 欢迎关注微信公众号
 
-More Open Source by greenrobot
-==============================
-[__greenrobot-common__](https://github.com/greenrobot/greenrobot-common) is a set of utility classes and hash functions for Android & Java projects.
+![](http://upload-images.jianshu.io/upload_images/4037105-8f737b5104dd0b5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
 
-[__greenDAO__](https://github.com/greenrobot/greenDAO) is an ORM optimized for Android: it maps database tables to Java objects and uses code generation for optimal speed.
 
-[Follow us on Google+](https://plus.google.com/b/114381455741141514652/+GreenrobotDe/posts) or check our [homepage](http://greenrobot.org/) to stay up to date.
