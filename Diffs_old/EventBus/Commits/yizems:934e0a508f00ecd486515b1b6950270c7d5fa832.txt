diff --git a/EventBus/src/org/greenrobot/eventbus/EventBus.java b/EventBus/src/org/greenrobot/eventbus/EventBus.java
index 8b34d10c..fbfaf786 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBus.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java
@@ -74,6 +74,10 @@
      */
     private final Map<Class<?>, Object> stickyEvents;
 
+    /**
+     * 为每个线程提供线程状态
+     * <a href="http://blog.csdn.net/winwill2012/article/details/71625570">ThreadLocal参考<a/>
+     */
     private final ThreadLocal<PostingThreadState> currentPostingThreadState = new ThreadLocal<PostingThreadState>() {
         @Override
         protected PostingThreadState initialValue() {
@@ -273,6 +277,7 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
 
     /**
      * post粘性事件
+     *
      * @param newSubscription
      * @param stickyEvent
      */
@@ -439,6 +444,7 @@ public void removeAllStickyEvents() {
 
     /**
      * 事件是否有订阅者
+     *
      * @param eventClass
      * @return
      */
@@ -462,6 +468,7 @@ public boolean hasSubscriberForEvent(Class<?> eventClass) {
 
     /**
      * 处理一个事件
+     *
      * @param event
      * @param postingState
      * @throws Error
@@ -497,6 +504,7 @@ private void postSingleEvent(Object event, PostingThreadState postingState) thro
 
     /**
      * 发送一个事件,包换事件类的超类
+     *
      * @param event
      * @param postingState
      * @param eventClass
@@ -531,6 +539,7 @@ private boolean postSingleEventForEventType(Object event, PostingThreadState pos
 
     /**
      * 发送事件广播
+     *
      * @param subscription
      * @param event
      * @param isMainThread
@@ -616,6 +625,7 @@ void invokeSubscriber(PendingPost pendingPost) {
 
     /**
      * 执行一个订阅方法
+     *
      * @param subscription
      * @param event
      */
@@ -631,6 +641,7 @@ void invokeSubscriber(Subscription subscription, Object event) {
 
     /**
      * 处理订阅方法异常
+     *
      * @param subscription
      * @param event
      * @param cause
@@ -666,11 +677,17 @@ private void handleSubscriberException(Subscription subscription, Object event,
      * For ThreadLocal, much faster to set (and get multiple values).
      */
     final static class PostingThreadState {
+        //事件队列
         final List<Object> eventQueue = new ArrayList<Object>();
+        //是否正在处理事件
         boolean isPosting;
+        //是否是主线程
         boolean isMainThread;
+        //订阅者信息
         Subscription subscription;
+        //事件
         Object event;
+        //是否取消
         boolean canceled;
     }
 
diff --git a/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
index 130a30d2..d0bc4d56 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
@@ -31,7 +31,7 @@
      * 默认线程池
      */
     private final static ExecutorService DEFAULT_EXECUTOR_SERVICE = Executors.newCachedThreadPool();
-
+    //一些异常信息的配置,忽略这些内容
     boolean logSubscriberExceptions = true;
     boolean logNoSubscriberMessages = true;
     boolean sendSubscriberExceptionEvent = true;
@@ -47,6 +47,9 @@
      * 提高了效率
      */
     boolean ignoreGeneratedIndex;
+    /**
+     * 严格的方法验证,如果使用了,方法的定义不规范会抛出异常
+     */
     boolean strictMethodVerification;
     /**
      * 默认线程池
diff --git a/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java b/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java
index 38943eee..22b6055b 100644
--- a/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java
+++ b/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java
@@ -65,7 +65,7 @@ synchronized PendingPost poll() {
     }
 
     /**
-     * 等待秒再执行
+     * 等待多久再执行
      * @param maxMillisToWait
      * @return
      * @throws InterruptedException
diff --git a/EventBus/src/org/greenrobot/eventbus/Subscribe.java b/EventBus/src/org/greenrobot/eventbus/Subscribe.java
index a575f066..62efb2f1 100644
--- a/EventBus/src/org/greenrobot/eventbus/Subscribe.java
+++ b/EventBus/src/org/greenrobot/eventbus/Subscribe.java
@@ -23,6 +23,9 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+/**
+ * <a href="http://www.cnblogs.com/peida/archive/2013/04/24/3036689.html">自定义注解参考<a/>
+ */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.METHOD})
@@ -30,6 +33,7 @@
     ThreadMode threadMode() default ThreadMode.POSTING;
 
     /**
+     * 是否是粘性事件,粘性事件会被缓存下来,再次发送的时候,可以从缓存池中获取该事件的实例
      * 参照:<a href="http://greenrobot.org/eventbus/documentation/configuration/sticky-events/">sticky文档<a/><br></>
      * If true, delivers the most recent sticky event (posted with
      * {@link EventBus#postSticky(Object)}) to this subscriber (if event available).
diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
index f1678885..268561fb 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
@@ -39,7 +39,7 @@
      */
     final int priority;
     /**
-     * !!!
+     * 是不是粘性事件
      */
     final boolean sticky;
     /**
diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
index 1836d7fe..5cf0eb5b 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
@@ -28,7 +28,7 @@
 
 
 /**
- * 在行的类文件中,编译器可能添加了方法<br/>
+ * 在编译的类文件中,编译器可能添加了方法<br/>
  * 他们是桥接和合成方法<br/>
  * EventBus必须忽略他们<br/>
  * 这些方法在java文件中并不是public的<br/>
@@ -80,7 +80,7 @@
     private static final int POOL_SIZE = 4;
 
     /**
-     * 查找状态池?
+     * 查找封装类池
      */
     private static final FindState[] FIND_STATE_POOL = new FindState[POOL_SIZE];
 
diff --git "a/wiki/EventBus\346\272\220\347\240\201\350\247\243\346\236\220(\344\270\200).md" "b/wiki/EventBus\346\272\220\347\240\201\350\247\243\346\236\220(\344\270\200).md"
new file mode 100644
index 00000000..e69de29b
