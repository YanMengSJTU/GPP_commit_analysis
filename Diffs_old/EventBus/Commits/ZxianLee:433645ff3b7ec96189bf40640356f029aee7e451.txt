diff --git a/EventBus/src/org/greenrobot/eventbus/EventBus.java b/EventBus/src/org/greenrobot/eventbus/EventBus.java
index 247cbb27..cca41b62 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBus.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java
@@ -15,6 +15,8 @@
  */
 package org.greenrobot.eventbus;
 
+import org.greenrobot.eventbus.meta.Message;
+
 import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -46,8 +48,8 @@
     private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder();
     private static final Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<>();
 
-    private final Map<Class<?>, CopyOnWriteArrayList<Subscription>> subscriptionsByEventType;
-    private final Map<Object, List<Class<?>>> typesBySubscriber;
+    private final Map<SubscriberMethod.IDEventPair, CopyOnWriteArrayList<Subscription>> subscriptionsByEventType;
+    private final Map<Object, List<SubscriberMethod.IDEventPair>> typesBySubscriber;
     private final Map<Class<?>, Object> stickyEvents;
 
     private final ThreadLocal<PostingThreadState> currentPostingThreadState = new ThreadLocal<PostingThreadState>() {
@@ -147,16 +149,16 @@ public void register(Object subscriber) {
 
     // Must be called in synchronized block
     private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
-        Class<?> eventType = subscriberMethod.eventType;
+        SubscriberMethod.IDEventPair idEventPair = subscriberMethod.iDEventPair;
         Subscription newSubscription = new Subscription(subscriber, subscriberMethod);
-        CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);
+        CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(idEventPair);
         if (subscriptions == null) {
             subscriptions = new CopyOnWriteArrayList<>();
-            subscriptionsByEventType.put(eventType, subscriptions);
+            subscriptionsByEventType.put(idEventPair, subscriptions);
         } else {
             if (subscriptions.contains(newSubscription)) {
-                throw new EventBusException("Subscriber " + subscriber.getClass() + " already registered to event "
-                        + eventType);
+                throw new EventBusException("Subscriber " + subscriber.getClass() + " already registered to "
+                        + idEventPair);
             }
         }
 
@@ -168,12 +170,12 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
             }
         }
 
-        List<Class<?>> subscribedEvents = typesBySubscriber.get(subscriber);
+        List<SubscriberMethod.IDEventPair> subscribedEvents = typesBySubscriber.get(idEventPair);
         if (subscribedEvents == null) {
             subscribedEvents = new ArrayList<>();
             typesBySubscriber.put(subscriber, subscribedEvents);
         }
-        subscribedEvents.add(eventType);
+        subscribedEvents.add(idEventPair);
 
         if (subscriberMethod.sticky) {
             if (eventInheritance) {
@@ -184,13 +186,13 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
                 Set<Map.Entry<Class<?>, Object>> entries = stickyEvents.entrySet();
                 for (Map.Entry<Class<?>, Object> entry : entries) {
                     Class<?> candidateEventType = entry.getKey();
-                    if (eventType.isAssignableFrom(candidateEventType)) {
+                    if (idEventPair.eventType.isAssignableFrom(candidateEventType)) {
                         Object stickyEvent = entry.getValue();
                         checkPostStickyEventToSubscription(newSubscription, stickyEvent);
                     }
                 }
             } else {
-                Object stickyEvent = stickyEvents.get(eventType);
+                Object stickyEvent = stickyEvents.get(idEventPair.eventType);
                 checkPostStickyEventToSubscription(newSubscription, stickyEvent);
             }
         }
@@ -219,8 +221,8 @@ public synchronized boolean isRegistered(Object subscriber) {
     }
 
     /** Only updates subscriptionsByEventType, not typesBySubscriber! Caller must update typesBySubscriber. */
-    private void unsubscribeByEventType(Object subscriber, Class<?> eventType) {
-        List<Subscription> subscriptions = subscriptionsByEventType.get(eventType);
+    private void unsubscribeByEventType(Object subscriber, SubscriberMethod.IDEventPair idEventPair) {
+        List<Subscription> subscriptions = subscriptionsByEventType.get(idEventPair);
         if (subscriptions != null) {
             int size = subscriptions.size();
             for (int i = 0; i < size; i++) {
@@ -237,10 +239,10 @@ private void unsubscribeByEventType(Object subscriber, Class<?> eventType) {
 
     /** Unregisters the given subscriber from all event classes. */
     public synchronized void unregister(Object subscriber) {
-        List<Class<?>> subscribedTypes = typesBySubscriber.get(subscriber);
+        List<SubscriberMethod.IDEventPair> subscribedTypes = typesBySubscriber.get(subscriber);
         if (subscribedTypes != null) {
-            for (Class<?> eventType : subscribedTypes) {
-                unsubscribeByEventType(subscriber, eventType);
+            for (SubscriberMethod.IDEventPair idEventPair : subscribedTypes) {
+                unsubscribeByEventType(subscriber, idEventPair);
             }
             typesBySubscriber.remove(subscriber);
         } else {
@@ -248,11 +250,15 @@ public synchronized void unregister(Object subscriber) {
         }
     }
 
+    public void post(Object event){
+        post(-1,event);
+    }
+
     /** Posts the given event to the event bus. */
-    public void post(Object event) {
+    public void post(int id, Object event) {
         PostingThreadState postingState = currentPostingThreadState.get();
-        List<Object> eventQueue = postingState.eventQueue;
-        eventQueue.add(event);
+        List<Message> eventQueue = postingState.eventQueue;
+        eventQueue.add(new Message(id, event));
 
         if (!postingState.isPosting) {
             postingState.isMainThread = isMainThread();
@@ -285,7 +291,7 @@ public void cancelEventDelivery(Object event) {
                     "This method may only be called from inside event handling methods on the posting thread");
         } else if (event == null) {
             throw new EventBusException("Event may not be null");
-        } else if (postingState.event != event) {
+        } else if (postingState.message != event) {
             throw new EventBusException("Only the currently handled event may be aborted");
         } else if (postingState.subscription.subscriberMethod.threadMode != ThreadMode.POSTING) {
             throw new EventBusException(" event handlers may only abort the incoming event");
@@ -373,8 +379,8 @@ public boolean hasSubscriberForEvent(Class<?> eventClass) {
         return false;
     }
 
-    private void postSingleEvent(Object event, PostingThreadState postingState) throws Error {
-        Class<?> eventClass = event.getClass();
+    private void postSingleEvent(Message event, PostingThreadState postingState) throws Error {
+        Class<?> eventClass = event.event.getClass();
         boolean subscriptionFound = false;
         if (eventInheritance) {
             List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);
@@ -397,21 +403,22 @@ private void postSingleEvent(Object event, PostingThreadState postingState) thro
         }
     }
 
-    private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class<?> eventClass) {
+    private boolean postSingleEventForEventType(Message message, PostingThreadState postingState, Class<?> eventClass) {
         CopyOnWriteArrayList<Subscription> subscriptions;
+        SubscriberMethod.IDEventPair idEventPair = new SubscriberMethod.IDEventPair(message.id,eventClass);
         synchronized (this) {
-            subscriptions = subscriptionsByEventType.get(eventClass);
+            subscriptions = subscriptionsByEventType.get(idEventPair);
         }
         if (subscriptions != null && !subscriptions.isEmpty()) {
             for (Subscription subscription : subscriptions) {
-                postingState.event = event;
+                postingState.message = message;
                 postingState.subscription = subscription;
                 boolean aborted = false;
                 try {
-                    postToSubscription(subscription, event, postingState.isMainThread);
+                    postToSubscription(subscription, message.event, postingState.isMainThread);
                     aborted = postingState.canceled;
                 } finally {
-                    postingState.event = null;
+                    postingState.message = null;
                     postingState.subscription = null;
                     postingState.canceled = false;
                 }
@@ -540,11 +547,11 @@ private void handleSubscriberException(Subscription subscription, Object event,
 
     /** For ThreadLocal, much faster to set (and get multiple values). */
     final static class PostingThreadState {
-        final List<Object> eventQueue = new ArrayList<>();
+        final List<Message> eventQueue = new ArrayList<>();
         boolean isPosting;
         boolean isMainThread;
         Subscription subscription;
-        Object event;
+        Message message;
         boolean canceled;
     }
 
diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
index aa98e16e..4bd0d5ca 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
@@ -24,6 +24,7 @@
     final Class<?> eventType;
     final int priority;
     final int id;
+    final IDEventPair iDEventPair;
     final boolean sticky;
     /** Used for efficient comparison */
     String methodString;
@@ -35,6 +36,7 @@ public SubscriberMethod(int id, Method method, Class<?> eventType, ThreadMode th
         this.priority = priority;
         this.sticky = sticky;
         this.id = id;
+        this.iDEventPair = new IDEventPair(id,eventType);
     }
 
     @Override
@@ -67,4 +69,40 @@ private synchronized void checkMethodString() {
     public int hashCode() {
         return method.hashCode();
     }
+
+
+    public static class IDEventPair {
+        public int id;
+        public Class<?> eventType;
+
+        public IDEventPair(int id, Class<?> eventType) {
+            this.id = id;
+            this.eventType = eventType;
+        }
+
+        @Override
+        public String toString() {
+            return "IDEventPair{" +
+                    "id=" + id +
+                    ", eventType=" + eventType +
+                    '}';
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+
+            IDEventPair that = (IDEventPair) o;
+
+            return id == that.id && (eventType != null ? eventType.equals(that.eventType) : that.eventType == null);
+        }
+
+        @Override
+        public int hashCode() {
+            int result = id;
+            result = 31 * result + (eventType != null ? eventType.hashCode() : 0);
+            return result;
+        }
+    }
 }
\ No newline at end of file
diff --git a/EventBus/src/org/greenrobot/eventbus/meta/Message.java b/EventBus/src/org/greenrobot/eventbus/meta/Message.java
new file mode 100644
index 00000000..b902173d
--- /dev/null
+++ b/EventBus/src/org/greenrobot/eventbus/meta/Message.java
@@ -0,0 +1,12 @@
+package org.greenrobot.eventbus.meta;
+
+
+public class Message {
+    public int id;
+    public Object event;
+
+    public Message(int id, Object event) {
+        this.id = id;
+        this.event = event;
+    }
+}
diff --git a/app/build.gradle b/app/build.gradle
index 950d3217..90fc2319 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -31,6 +31,8 @@ dependencies {
     implementation fileTree(dir: 'libs', include: ['*.jar'])
     implementation project(':eventbus')
     annotationProcessor project(':eventbus-annotation-processor')
+//    implementation 'org.greenrobot:eventbus:3.0.0'
+//    annotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.0.1'
 
     implementation 'com.android.support:appcompat-v7:26.1.0'
     implementation 'com.android.support.constraint:constraint-layout:1.0.2'
diff --git a/app/src/main/java/top/lizhengxian/eventbusplus/MainActivity.java b/app/src/main/java/top/lizhengxian/eventbusplus/MainActivity.java
index 632c784e..23534d60 100644
--- a/app/src/main/java/top/lizhengxian/eventbusplus/MainActivity.java
+++ b/app/src/main/java/top/lizhengxian/eventbusplus/MainActivity.java
@@ -20,13 +20,18 @@ protected void onCreate(Bundle savedInstanceState) {
         mPrintButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                EventBus.getDefault().post("Hello EventBusPlus!");
+                EventBus.getDefault().postSticky("Hello EventBusPlus!");
+            }
+        });
+        findViewById(R.id.btn2).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                EventBus.getDefault().register(MainActivity.this);
             }
         });
-        EventBus.getDefault().register(this);
     }
 
-    @Subscribe
+    @Subscribe()
     public void printMessage(String message){
         Toast.makeText(this,message,Toast.LENGTH_LONG).show();
     }
diff --git a/app/src/main/res/layout/activity_main.xml b/app/src/main/res/layout/activity_main.xml
index 8b768421..d00bd452 100644
--- a/app/src/main/res/layout/activity_main.xml
+++ b/app/src/main/res/layout/activity_main.xml
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
-<android.support.constraint.ConstraintLayout
+<LinearLayout
+    android:orientation="vertical"
     xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
@@ -12,5 +13,10 @@
         android:text="Print"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"/>
+    <Button
+        android:id="@+id/btn2"
+        android:text="register"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"/>
 
-</android.support.constraint.ConstraintLayout>
+</LinearLayout>
