diff --git a/EventBus/src/org/greenrobot/eventbus/EventBus.java b/EventBus/src/org/greenrobot/eventbus/EventBus.java
index ce06b183..90589d90 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBus.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java
@@ -142,9 +142,18 @@ public void register(Object subscriber) {
         List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);
         synchronized (this) {
             for (SubscriberMethod subscriberMethod : subscriberMethods) {
-                if(mExtraEventProvider!=null&&mExtraEventProvider.interesting(subscriberMethod))
-                    mExtraEventProvider.subscribe(subscriber,subscriberMethod);
-                else
+                if(mExtraEventProvider!=null&&mExtraEventProvider.interesting(subscriberMethod)) {
+                    mExtraEventProvider.subscribe(subscriber, subscriberMethod);
+                    if(subscriberMethod.sticky){
+                        List<?> extraStickyEvents =  mExtraEventProvider.getStickyEvent(subscriberMethod,eventInheritance);
+                        if(extraStickyEvents!=null) {
+                            Subscription subscription =  new Subscription(subscriber,subscriberMethod);
+                            for (int i = 0; i < extraStickyEvents.size(); i++) {
+                                checkPostStickyEventToSubscription(subscription , extraStickyEvents.get(i));
+                            }
+                        }
+                    }
+                }else
                     subscribe(subscriber, subscriberMethod);
             }
         }
@@ -273,9 +282,14 @@ public void postTagEvent(String tag){
     }
 
     public void postTagEvent(String tag,Object event){
-        post(new TagEvent(tag,event));
+        post(new TagEvent(tag,event,false));
+    }
+
+    public void postTagEvent(String tag,Object event,boolean sticky){
+        post(new TagEvent(tag,event,sticky));
     }
 
+
     /**
      * Called from a subscriber's event handling method, further event delivery will be canceled. Subsequent
      * subscribers
diff --git a/EventBus/src/org/greenrobot/eventbus/ExtraEventProvider.java b/EventBus/src/org/greenrobot/eventbus/ExtraEventProvider.java
index 56622282..42792ded 100644
--- a/EventBus/src/org/greenrobot/eventbus/ExtraEventProvider.java
+++ b/EventBus/src/org/greenrobot/eventbus/ExtraEventProvider.java
@@ -1,5 +1,7 @@
 package org.greenrobot.eventbus;
 
+import java.util.List;
+import java.util.Map;
 import java.util.concurrent.CopyOnWriteArrayList;
 
 /**
@@ -25,4 +27,6 @@
 
     Object getEvent(Object event);
 
+    List<?> getStickyEvent(SubscriberMethod subscriberMethod,boolean eventInheritance);
+
 }
diff --git a/EventBus/src/org/greenrobot/eventbus/TagEvent.java b/EventBus/src/org/greenrobot/eventbus/TagEvent.java
index 0c90e4b2..35020f15 100644
--- a/EventBus/src/org/greenrobot/eventbus/TagEvent.java
+++ b/EventBus/src/org/greenrobot/eventbus/TagEvent.java
@@ -6,9 +6,15 @@
 public final class TagEvent {
     final String tag;
     final Object event;
+    boolean sticky = false;
 
     public TagEvent(String tag, Object event) {
+         this(tag,event,false);
+    }
+
+    public TagEvent(String tag, Object event,boolean sticky) {
         this.event = event;
         this.tag = tag;
+        this.sticky = sticky;
     }
 }
diff --git a/EventBus/src/org/greenrobot/eventbus/TagEventProvider.java b/EventBus/src/org/greenrobot/eventbus/TagEventProvider.java
index 60f65b4b..fc1124d4 100644
--- a/EventBus/src/org/greenrobot/eventbus/TagEventProvider.java
+++ b/EventBus/src/org/greenrobot/eventbus/TagEventProvider.java
@@ -1,27 +1,36 @@
 package org.greenrobot.eventbus;
 
 
+import android.util.Log;
+
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.CopyOnWriteArrayList;
 
 /**
  * Created by pool on 2016/7/12.
  */
 public class TagEventProvider implements ExtraEventProvider {
+    public static final String TAG = EventBus.TAG;
+
     private final Map<TagEventKey, CopyOnWriteArrayList<Subscription>> tagSubscriptionsByEventType;
     private final Map<Object, List<TagEventKey>> tagTypesBySubscriber;
+    private final Map<TagEventKey, TagEvent> stickyEvents;
+
 
     TagEventProvider() {
         tagSubscriptionsByEventType = new HashMap<>();
         tagTypesBySubscriber = new HashMap<>();
+        stickyEvents = new HashMap<>();
     }
 
     @Override
     public boolean interesting(Object event) {
-        return event != null && TagEvent.class==event.getClass();
+        boolean interesting = event != null && TagEvent.class == event.getClass();
+        return interesting;
     }
 
     @Override
@@ -37,7 +46,7 @@ public void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
         if (types == null) {
             types = new ArrayList<>();
             types.add(eventKey);
-            tagTypesBySubscriber.put(subscriber,types);
+            tagTypesBySubscriber.put(subscriber, types);
         } else {
             if (types.contains(eventKey)) {
                 //already register
@@ -91,7 +100,11 @@ public boolean unsubscribe(Object subscriber) {
     @Override
     public Class<?> getClass(Object event) {
         TagEvent tagEvent = (TagEvent) event;
-        return  tagEvent.event!=null ? tagEvent.event.getClass():null ;
+        if (tagEvent.sticky) {
+            stickyEvents.put(new TagEventKey(tagEvent.tag, tagEvent.event == null ? null : tagEvent.event.getClass()), tagEvent);
+            Log.d(TAG,  "add new sticky TagEvent " + (tagEvent.event!=null ? tagEvent.event.toString() :" null event"));
+        }
+        return tagEvent.event != null ? tagEvent.event.getClass() : null;
     }
 
     @Override
@@ -99,6 +112,30 @@ public Object getEvent(Object event) {
         return ((TagEvent) event).event;
     }
 
+    @Override
+    public List<?> getStickyEvent(SubscriberMethod subscriberMethod, boolean eventInheritance) {
+        if (!subscriberMethod.sticky)
+            return null;
+        List<Object> result = new ArrayList<>();
+        TagEvent stickyEvent;
+        Class<?> eventType = subscriberMethod.eventType;
+        if (eventInheritance) {
+            Set<Map.Entry<TagEventKey, TagEvent>> entries = stickyEvents.entrySet();
+            for (Map.Entry<TagEventKey, TagEvent> entry : entries) {
+                TagEventKey candidateEventType = entry.getKey();
+                if ((subscriberMethod.tag != null ? subscriberMethod.tag.equals(candidateEventType.tag) : candidateEventType.tag == null)
+                        && ((candidateEventType.eventType != null && eventType != null) ? eventType.isAssignableFrom(candidateEventType.eventType) : candidateEventType.eventType == eventType)) {
+                    stickyEvent = entry.getValue();
+                    result.add(stickyEvent.event);
+                }
+            }
+        } else {
+            stickyEvent = stickyEvents.get(new TagEventKey(subscriberMethod.tag, subscriberMethod.eventType));
+            result.add(stickyEvent.event);
+        }
+        return result;
+    }
+
 
     private static class TagEventKey {
         final String tag;
