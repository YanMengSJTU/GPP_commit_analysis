diff --git a/EventBus/src/org/greenrobot/eventbus/EventBus.java b/EventBus/src/org/greenrobot/eventbus/EventBus.java
index 1f1be245..29c33c53 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBus.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java
@@ -52,7 +52,7 @@
 
     //通过当前的类名 取得该类的所有订阅类 key为订阅者类名 value为该类订阅事件
     private final Map<Class<?>, CopyOnWriteArrayList<Subscription>> subscriptionsByEventType;
-    //key为订阅者类名 value为eventType eventType是啥 TODO
+    //key为订阅者类 value为eventType eventType是被订阅者类
     private final Map<Object, List<Class<?>>> typesBySubscriber;
     private final Map<Class<?>, Object> stickyEvents;
 
@@ -160,7 +160,7 @@ public void register(Object subscriber) {
 
     // Must be called in synchronized block
     private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
-        // eventType其实是 订阅事件
+        // eventType其实是 订阅事件的类 eventType
         Class<?> eventType = subscriberMethod.eventType;
         Subscription newSubscription = new Subscription(subscriber, subscriberMethod);
         //通过当前的类名 取得该类的所有订阅类
@@ -171,8 +171,9 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
             subscriptions = new CopyOnWriteArrayList<>();
             subscriptionsByEventType.put(eventType, subscriptions);
         } else {
+            //  Subscription的equals方法
             if (subscriptions.contains(newSubscription)) {
-                //  如果本已存在 throw EventBusException 一个类只能订阅一次
+                //  已经订阅过的eventType不能再订阅
                 throw new EventBusException("Subscriber " + subscriber.getClass() + " already registered to event "
                         + eventType);
             }
@@ -197,7 +198,7 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
         }
         subscribedEvents.add(eventType);
 
-        //  sticky 置顶 当订阅类型为sticky时 直接进行post操作
+        // 当订阅类型为sticky时 直接进行post操作
         if (subscriberMethod.sticky) {
             if (eventInheritance) {
                 // Existing sticky events of all subclasses of eventType have to be considered.
@@ -296,7 +297,7 @@ public void post(Object event) {
                     postSingleEvent(eventQueue.remove(0), postingState);
                 }
             } finally {
-                //  开封
+                //  重新初始化
                 postingState.isPosting = false;
                 postingState.isMainThread = false;
             }
diff --git a/EventBus/src/org/greenrobot/eventbus/Subscription.java b/EventBus/src/org/greenrobot/eventbus/Subscription.java
index cc0de1e3..060c5737 100644
--- a/EventBus/src/org/greenrobot/eventbus/Subscription.java
+++ b/EventBus/src/org/greenrobot/eventbus/Subscription.java
@@ -30,6 +30,7 @@
         active = true;
     }
 
+    //  subscriber == otherSubscription.subscriber
     @Override
     public boolean equals(Object other) {
         if (other instanceof Subscription) {
