diff --git a/EventBus/build.gradle b/EventBus/build.gradle
index 4f3c246e..d7ae954f 100644
--- a/EventBus/build.gradle
+++ b/EventBus/build.gradle
@@ -2,10 +2,11 @@ apply plugin: 'java'
 apply plugin: 'maven'
 apply plugin: 'signing'
 apply plugin: 'idea'
+//apply plugin: 'maven-publish'
 
 archivesBaseName = 'eventbus'
 group = 'org.greenrobot'
-version = '3.1.1'
+version = '3.1.2-devstudy'
 sourceCompatibility = 1.7
 
 def isSnapshot = version.endsWith('-SNAPSHOT')
diff --git a/EventBus/src/org/greenrobot/eventbus/EventBus.java b/EventBus/src/org/greenrobot/eventbus/EventBus.java
index e35ecd38..52fffc4a 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBus.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java
@@ -119,6 +119,7 @@ public EventBus() {
         asyncPoster = new AsyncPoster(this);
         indexCount = builder.subscriberInfoIndexes != null ? builder.subscriberInfoIndexes.size() : 0;
         subscriberMethodFinder = new SubscriberMethodFinder(builder.subscriberInfoIndexes,
+                builder.skipFindSubscriberMethodsForClasses,
                 builder.strictMethodVerification, builder.ignoreGeneratedIndex);
         logSubscriberExceptions = builder.logSubscriberExceptions;
         logNoSubscriberMessages = builder.logNoSubscriberMessages;
diff --git a/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
index 3e2b5c9c..eda6f8c7 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
@@ -21,7 +21,11 @@
 import org.greenrobot.eventbus.meta.SubscriberInfoIndex;
 
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
@@ -42,6 +46,7 @@
     boolean strictMethodVerification;
     ExecutorService executorService = DEFAULT_EXECUTOR_SERVICE;
     List<Class<?>> skipMethodVerificationForClasses;
+    Set<Class<?>> skipFindSubscriberMethodsForClasses;
     List<SubscriberInfoIndex> subscriberInfoIndexes;
     Logger logger;
     MainThreadSupport mainThreadSupport;
@@ -141,6 +146,14 @@ public EventBusBuilder addIndex(SubscriberInfoIndex index) {
         subscriberInfoIndexes.add(index);
         return this;
     }
+    /** Adds classes which should be skipped from findSubscriberMethods process */
+    public EventBusBuilder skipFindSubscriberMethodsForClasses(Class<?> ... classes) {
+        if(skipFindSubscriberMethodsForClasses == null) {
+            skipFindSubscriberMethodsForClasses = new HashSet<>();
+        }
+        skipFindSubscriberMethodsForClasses.addAll(Arrays.asList(classes));
+        return this;
+    }
 
     /**
      * Set a specific log handler for all EventBus logging.
diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
index db5e0ad3..27535b33 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
@@ -21,9 +21,11 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
 class SubscriberMethodFinder {
@@ -38,6 +40,7 @@
     private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;
     private static final Map<Class<?>, List<SubscriberMethod>> METHOD_CACHE = new ConcurrentHashMap<>();
 
+    private Set<Class<?>> skipFindSubscriberMethodsForClasses;
     private List<SubscriberInfoIndex> subscriberInfoIndexes;
     private final boolean strictMethodVerification;
     private final boolean ignoreGeneratedIndex;
@@ -45,9 +48,14 @@
     private static final int POOL_SIZE = 4;
     private static final FindState[] FIND_STATE_POOL = new FindState[POOL_SIZE];
 
-    SubscriberMethodFinder(List<SubscriberInfoIndex> subscriberInfoIndexes, boolean strictMethodVerification,
-                           boolean ignoreGeneratedIndex) {
+    SubscriberMethodFinder(List<SubscriberInfoIndex> subscriberInfoIndexes, Set<Class<?>> skipFindSubscriberMethodsForClasses,
+                           boolean strictMethodVerification, boolean ignoreGeneratedIndex) {
         this.subscriberInfoIndexes = subscriberInfoIndexes;
+        if(skipFindSubscriberMethodsForClasses == null) {
+            this.skipFindSubscriberMethodsForClasses = Collections.emptySet();
+        }else {
+            this.skipFindSubscriberMethodsForClasses = skipFindSubscriberMethodsForClasses;
+        }
         this.strictMethodVerification = strictMethodVerification;
         this.ignoreGeneratedIndex = ignoreGeneratedIndex;
     }
@@ -87,11 +95,18 @@
             } else {
                 findUsingReflectionInSingleClass(findState);
             }
-            findState.moveToSuperclass();
+            moveToSuperclass(findState);
         }
         return getMethodsAndRelease(findState);
     }
 
+    private void moveToSuperclass(FindState findState) {
+        do {
+            findState.moveToSuperclass();
+        }
+        while (findState.clazz != null && skipFindSubscriberMethodsForClasses.contains(findState.clazz));
+    }
+
     private List<SubscriberMethod> getMethodsAndRelease(FindState findState) {
         List<SubscriberMethod> subscriberMethods = new ArrayList<>(findState.subscriberMethods);
         findState.recycle();
@@ -142,7 +157,7 @@ private SubscriberInfo getSubscriberInfo(FindState findState) {
         findState.initForSubscriber(subscriberClass);
         while (findState.clazz != null) {
             findUsingReflectionInSingleClass(findState);
-            findState.moveToSuperclass();
+            moveToSuperclass(findState);
         }
         return getMethodsAndRelease(findState);
     }
