diff --git a/EventBus/src/org/greenrobot/eventbus/EventBus.java b/EventBus/src/org/greenrobot/eventbus/EventBus.java
index 1cd57e32..e6869151 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBus.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java
@@ -108,8 +108,8 @@ public EventBus() {
         subscriptionsByEventType = new HashMap<>();
         typesBySubscriber = new HashMap<>();
         stickyEvents = new ConcurrentHashMap<>();
-        mainThreadPoster = new HandlerPoster(this, Looper.getMainLooper(), 10);
-        backgroundPoster = new BackgroundPoster(this);
+        mainThreadPoster = new HandlerPoster(this, Looper.getMainLooper(), 10);     // 一个主线程的 Handler
+        backgroundPoster = new BackgroundPoster(this);   // Runnable
         asyncPoster = new AsyncPoster(this);
         indexCount = builder.subscriberInfoIndexes != null ? builder.subscriberInfoIndexes.size() : 0;
         subscriberMethodFinder = new SubscriberMethodFinder(builder.subscriberInfoIndexes,
@@ -132,7 +132,9 @@ public EventBus() {
      * ThreadMode} and priority.
      */
     public void register(Object subscriber) {
-        Class<?> subscriberClass = subscriber.getClass();
+        // 返回一个 Class 类型的实例
+        Class<?> subscriberClass = subscriber.getClass();  // 例如 com.yxhuang.mytestapplication.MainActivity
+        //  获取订阅的方法， 内部最终时通过注解是方式获得订阅的方法
         List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);
         synchronized (this) {
             for (SubscriberMethod subscriberMethod : subscriberMethods) {
@@ -148,14 +150,16 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
         CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);
         if (subscriptions == null) {
             subscriptions = new CopyOnWriteArrayList<>();
+            // 添加到 subscriptionsByEventType
             subscriptionsByEventType.put(eventType, subscriptions);
         } else {
+            // 如果已经注册过，则抛出异样，防止重复注册
             if (subscriptions.contains(newSubscription)) {
-                throw new EventBusException("Subscriber " + subscriber.getClass() + " already registered to event "
-                        + eventType);
+                throw new EventBusException("Subscriber " + subscriber.getClass() + " already registered to event " + eventType);
             }
         }
 
+        // 根据优先级添加到 CopyOnWriteArrayList 中
         int size = subscriptions.size();
         for (int i = 0; i <= size; i++) {
             if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {
@@ -164,6 +168,7 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
             }
         }
 
+        // 添加到 Map<Object, List<Class<?>>>  typesBySubscriber
         List<Class<?>> subscribedEvents = typesBySubscriber.get(subscriber);
         if (subscribedEvents == null) {
             subscribedEvents = new ArrayList<>();
@@ -171,8 +176,8 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
         }
         subscribedEvents.add(eventType);
 
-        if (subscriberMethod.sticky) {
-            if (eventInheritance) {
+        if (subscriberMethod.sticky) {  // 是否为粘性方法
+            if (eventInheritance) {  // 默认是 false
                 // Existing sticky events of all subclasses of eventType have to be considered.
                 // Note: Iterating over all events may be inefficient with lots of sticky events,
                 // thus data structure should be changed to allow a more efficient lookup
@@ -180,6 +185,9 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
                 Set<Map.Entry<Class<?>, Object>> entries = stickyEvents.entrySet();
                 for (Map.Entry<Class<?>, Object> entry : entries) {
                     Class<?> candidateEventType = entry.getKey();
+
+                    // When using instanceof, you need to know the class of "B" at compile time. When using isAssignableFrom()
+                    // it can be dynamic and change during runtime.
                     if (eventType.isAssignableFrom(candidateEventType)) {
                         Object stickyEvent = entry.getValue();
                         checkPostStickyEventToSubscription(newSubscription, stickyEvent);
@@ -236,18 +244,22 @@ public synchronized void unregister(Object subscriber) {
 
     /** Posts the given event to the event bus. */
     public void post(Object event) {
-        PostingThreadState postingState = currentPostingThreadState.get();
-        List<Object> eventQueue = postingState.eventQueue;
-        eventQueue.add(event);
+        // 中 ThreadLocal 中获取一个 PostingThreadState,  使用 ThreadLocal 传递对象，对整个 post 过程传递数据，不受不同线程的影响
+        PostingThreadState postingState = currentPostingThreadState.get();      // currentPostingThreadState   是 ThreadLocal
+        List<Object> eventQueue = postingState.eventQueue;   // ArrayList<>;
+        eventQueue.add(event);   // 添加到列表中
 
         if (!postingState.isPosting) {
+            // 线程
             postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();
+            // post 的状态
             postingState.isPosting = true;
             if (postingState.canceled) {
                 throw new EventBusException("Internal error. Abort state was not reset");
             }
             try {
                 while (!eventQueue.isEmpty()) {
+                    // post 一个 event 事件
                     postSingleEvent(eventQueue.remove(0), postingState);
                 }
             } finally {
@@ -362,7 +374,7 @@ public boolean hasSubscriberForEvent(Class<?> eventClass) {
     private void postSingleEvent(Object event, PostingThreadState postingState) throws Error {
         Class<?> eventClass = event.getClass();
         boolean subscriptionFound = false;
-        if (eventInheritance) {
+        if (eventInheritance) {  // 默认是 false
             List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);
             int countTypes = eventTypes.size();
             for (int h = 0; h < countTypes; h++) {
@@ -370,8 +382,10 @@ private void postSingleEvent(Object event, PostingThreadState postingState) thro
                 subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);
             }
         } else {
+            // post 出去
             subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);
         }
+        // 如果没有订阅者
         if (!subscriptionFound) {
             if (logNoSubscriberMessages) {
                 Log.d(TAG, "No subscribers registered for event " + eventClass);
@@ -386,14 +400,18 @@ private void postSingleEvent(Object event, PostingThreadState postingState) thro
     private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class<?> eventClass) {
         CopyOnWriteArrayList<Subscription> subscriptions;
         synchronized (this) {
+            // 从 map 中取出该类型的所以订阅者列表 subscriptions
             subscriptions = subscriptionsByEventType.get(eventClass);
         }
+
+        // 对这些订阅者逐个分发
         if (subscriptions != null && !subscriptions.isEmpty()) {
             for (Subscription subscription : subscriptions) {
                 postingState.event = event;
                 postingState.subscription = subscription;
                 boolean aborted = false;
                 try {
+                    // 分发
                     postToSubscription(subscription, event, postingState.isMainThread);
                     aborted = postingState.canceled;
                 } finally {
@@ -410,15 +428,17 @@ private boolean postSingleEventForEventType(Object event, PostingThreadState pos
         return false;
     }
 
+    // 根据不同的 ThreadMode 进行分发
     private void postToSubscription(Subscription subscription, Object event, boolean isMainThread) {
         switch (subscription.subscriberMethod.threadMode) {
             case POSTING:
                 invokeSubscriber(subscription, event);
                 break;
             case MAIN:
-                if (isMainThread) {
-                    invokeSubscriber(subscription, event);
+                if (isMainThread) {  // 如果是主线程中，
+                    invokeSubscriber(subscription, event);  // 利用反射，实现方法的调用
                 } else {
+                    // 如果不是在主线程，则利用 Handler , mainThreadPoster 是一个 主线程的 Handler
                     mainThreadPoster.enqueue(subscription, event);
                 }
                 break;
@@ -474,14 +494,17 @@ static void addInterfaces(List<Class<?>> eventTypes, Class<?>[] interfaces) {
     void invokeSubscriber(PendingPost pendingPost) {
         Object event = pendingPost.event;
         Subscription subscription = pendingPost.subscription;
+        //释放 pendingPost
         PendingPost.releasePendingPost(pendingPost);
         if (subscription.active) {
+            // 调用反射方法
             invokeSubscriber(subscription, event);
         }
     }
 
     void invokeSubscriber(Subscription subscription, Object event) {
         try {
+            // 利用反射，调用方法
             subscription.subscriberMethod.method.invoke(subscription.subscriber, event);
         } catch (InvocationTargetException e) {
             handleSubscriberException(subscription, event, e.getCause());
diff --git a/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java b/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java
index 3247be53..db08e5a7 100644
--- a/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java
+++ b/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java
@@ -37,10 +37,10 @@
     void enqueue(Subscription subscription, Object event) {
         PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);
         synchronized (this) {
-            queue.enqueue(pendingPost);
+            queue.enqueue(pendingPost);  //PendingPostQueue.enqueue 内部 链表型式
             if (!handlerActive) {
                 handlerActive = true;
-                if (!sendMessage(obtainMessage())) {
+                if (!sendMessage(obtainMessage())) {  // 发送一条消息
                     throw new EventBusException("Could not send handler message");
                 }
             }
@@ -53,6 +53,7 @@ public void handleMessage(Message msg) {
         try {
             long started = SystemClock.uptimeMillis();
             while (true) {
+                // 从队列中取出消息
                 PendingPost pendingPost = queue.poll();
                 if (pendingPost == null) {
                     synchronized (this) {
@@ -64,7 +65,10 @@ public void handleMessage(Message msg) {
                         }
                     }
                 }
+
                 eventBus.invokeSubscriber(pendingPost);
+
+                // 大于时间间隔，再发一次消息
                 long timeInMethod = SystemClock.uptimeMillis() - started;
                 if (timeInMethod >= maxMillisInsideHandleMessage) {
                     if (!sendMessage(obtainMessage())) {
diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
index 1d78d479..49ead5b2 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
@@ -37,7 +37,7 @@ public SubscriberMethod(Method method, Class<?> eventType, ThreadMode threadMode
 
     @Override
     public boolean equals(Object other) {
-        if (other == this) {
+        if (other == this) {  // ????
             return true;
         } else if (other instanceof SubscriberMethod) {
             checkMethodString();
diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
index db5e0ad3..76e65248 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
@@ -53,12 +53,14 @@
     }
 
     List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {
+        // 先从缓存中获取, METHOD_CACHE   是一个 CurrentHashMap
         List<SubscriberMethod> subscriberMethods = METHOD_CACHE.get(subscriberClass);
         if (subscriberMethods != null) {
             return subscriberMethods;
         }
 
-        if (ignoreGeneratedIndex) {
+        if (ignoreGeneratedIndex) {  // 是否忽略生成的 index 默认是 false
+            // 使用反射获取单个类里面的订阅方法
             subscriberMethods = findUsingReflection(subscriberClass);
         } else {
             subscriberMethods = findUsingInfo(subscriberClass);
@@ -67,28 +69,36 @@
             throw new EventBusException("Subscriber " + subscriberClass
                     + " and its super classes have no public methods with the @Subscribe annotation");
         } else {
+            // 放入缓存中并返回
             METHOD_CACHE.put(subscriberClass, subscriberMethods);
             return subscriberMethods;
         }
     }
 
+
     private List<SubscriberMethod> findUsingInfo(Class<?> subscriberClass) {
         FindState findState = prepareFindState();
         findState.initForSubscriber(subscriberClass);
         while (findState.clazz != null) {
+            // 获取订阅者的信息
             findState.subscriberInfo = getSubscriberInfo(findState);
             if (findState.subscriberInfo != null) {
+                // 获取订阅的方法
                 SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();
                 for (SubscriberMethod subscriberMethod : array) {
+                    // 检测订阅方法和订阅参数
                     if (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) {
                         findState.subscriberMethods.add(subscriberMethod);
                     }
                 }
             } else {
+                // 利用反射查找自身的订阅方法
                 findUsingReflectionInSingleClass(findState);
             }
+            // 查找父类的订阅方法
             findState.moveToSuperclass();
         }
+        // 返回所有的订阅方法，并释放掉 findState
         return getMethodsAndRelease(findState);
     }
 
@@ -120,13 +130,14 @@ private FindState prepareFindState() {
     }
 
     private SubscriberInfo getSubscriberInfo(FindState findState) {
+        // 获取父类订阅者的信息
         if (findState.subscriberInfo != null && findState.subscriberInfo.getSuperSubscriberInfo() != null) {
             SubscriberInfo superclassInfo = findState.subscriberInfo.getSuperSubscriberInfo();
             if (findState.clazz == superclassInfo.getSubscriberClass()) {
                 return superclassInfo;
             }
         }
-        if (subscriberInfoIndexes != null) {
+        if (subscriberInfoIndexes != null) {   // 默认是空的
             for (SubscriberInfoIndex index : subscriberInfoIndexes) {
                 SubscriberInfo info = index.getSubscriberInfo(findState.clazz);
                 if (info != null) {
@@ -138,9 +149,11 @@ private SubscriberInfo getSubscriberInfo(FindState findState) {
     }
 
     private List<SubscriberMethod> findUsingReflection(Class<?> subscriberClass) {
+
         FindState findState = prepareFindState();
         findState.initForSubscriber(subscriberClass);
         while (findState.clazz != null) {
+
             findUsingReflectionInSingleClass(findState);
             findState.moveToSuperclass();
         }
@@ -151,22 +164,29 @@ private void findUsingReflectionInSingleClass(FindState findState) {
         Method[] methods;
         try {
             // This is faster than getMethods, especially when subscribers are fat classes like Activities
+            // 返回这个类或者接口全部的方法，但不包括超类继承了的方法
             methods = findState.clazz.getDeclaredMethods();
         } catch (Throwable th) {
             // Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149
+            // 返回所有的公有方法，包括从超类继承来的公有方法
             methods = findState.clazz.getMethods();
             findState.skipSuperClasses = true;
         }
         for (Method method : methods) {
+            //  返回一个用于描述构造器，方法或域的修饰符的整型数值。使用 Modifiers 类中的这个方法可以分析这个返回值。
             int modifiers = method.getModifiers();
             if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {
+                // 返回一个用于描述参数类型的 Class 对象数组 （返回方法的参数）
                 Class<?>[] parameterTypes = method.getParameterTypes();
                 if (parameterTypes.length == 1) {
+                    // 获得给定类型的注解，如果没有这样的注解，则返回 null
                     Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);
                     if (subscribeAnnotation != null) {
                         Class<?> eventType = parameterTypes[0];
                         if (findState.checkAdd(method, eventType)) {
+                            // 获得 ThreadMod 类型
                             ThreadMode threadMode = subscribeAnnotation.threadMode();
+                            // 生成一个 SubscriberMethod 对象，放到列表中
                             findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode,
                                     subscribeAnnotation.priority(), subscribeAnnotation.sticky()));
                         }
@@ -177,6 +197,7 @@ private void findUsingReflectionInSingleClass(FindState findState) {
                             "must have exactly 1 parameter but has " + parameterTypes.length);
                 }
             } else if (strictMethodVerification && method.isAnnotationPresent(Subscribe.class)) {
+                // 方法不是 public 则抛出异样
                 String methodName = method.getDeclaringClass().getName() + "." + method.getName();
                 throw new EventBusException(methodName +
                         " is a illegal @Subscribe method: must be public, non-static, and non-abstract");
@@ -219,6 +240,7 @@ void recycle() {
         boolean checkAdd(Method method, Class<?> eventType) {
             // 2 level check: 1st level with event type only (fast), 2nd level with complete signature when required.
             // Usually a subscriber doesn't have methods listening to the same event type.
+            // 如果 map 中包含 eventType 对应的 value , 返回这个 value, 同时用新的值替代这个 value; 如果没有，则返回 null, 同时也把新值放进去。
             Object existing = anyMethodByEventType.put(eventType, method);
             if (existing == null) {
                 return true;
diff --git a/mytestapplication/.gitignore b/mytestapplication/.gitignore
new file mode 100644
index 00000000..3543521e
--- /dev/null
+++ b/mytestapplication/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/mytestapplication/build.gradle b/mytestapplication/build.gradle
new file mode 100644
index 00000000..8312ff90
--- /dev/null
+++ b/mytestapplication/build.gradle
@@ -0,0 +1,27 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 23
+    buildToolsVersion "23.0.0"
+
+    defaultConfig {
+        applicationId "com.example.administrator.other"
+        minSdkVersion 12
+        targetSdkVersion 23
+        versionCode 1
+        versionName "1.0"
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(include: ['*.jar'], dir: 'libs')
+    testCompile 'junit:junit:4.12'
+    compile 'com.android.support:design:23.1.1'
+    compile 'org.greenrobot:eventbus:3.0.0'
+}
diff --git a/mytestapplication/proguard-rules.pro b/mytestapplication/proguard-rules.pro
new file mode 100644
index 00000000..8e9be791
--- /dev/null
+++ b/mytestapplication/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in D:\androidEclipse\adt-bundle-windows-x86_64-20140702\adt-bundle-windows-x86_64-20140702\sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/mytestapplication/src/androidTest/java/com/yxhuang/mytestapplication/ApplicationTest.java b/mytestapplication/src/androidTest/java/com/yxhuang/mytestapplication/ApplicationTest.java
new file mode 100644
index 00000000..3dc49464
--- /dev/null
+++ b/mytestapplication/src/androidTest/java/com/yxhuang/mytestapplication/ApplicationTest.java
@@ -0,0 +1,13 @@
+package com.yxhuang.mytestapplication;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+/**
+ * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
+ */
+public class ApplicationTest extends ApplicationTestCase<Application> {
+    public ApplicationTest() {
+        super(Application.class);
+    }
+}
\ No newline at end of file
diff --git a/mytestapplication/src/main/AndroidManifest.xml b/mytestapplication/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..73efad77
--- /dev/null
+++ b/mytestapplication/src/main/AndroidManifest.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.yxhuang.mytestapplication" >
+
+    <uses-permission android:name="android.permission.INTERNET"/>
+
+    <application
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme" >
+        <activity android:name=".MainActivity" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
\ No newline at end of file
diff --git a/mytestapplication/src/main/java/com/yxhuang/mytestapplication/MainActivity.java b/mytestapplication/src/main/java/com/yxhuang/mytestapplication/MainActivity.java
new file mode 100644
index 00000000..58d7ba6b
--- /dev/null
+++ b/mytestapplication/src/main/java/com/yxhuang/mytestapplication/MainActivity.java
@@ -0,0 +1,52 @@
+package com.yxhuang.mytestapplication;
+
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.widget.Toast;
+
+import org.greenrobot.eventbus.EventBus;
+import org.greenrobot.eventbus.Subscribe;
+import org.greenrobot.eventbus.ThreadMode;
+
+public class MainActivity extends AppCompatActivity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+
+        EventBus.getDefault().register(this);
+
+        testEventBus();
+
+    }
+
+    @Subscribe(threadMode = ThreadMode.MAIN)
+    public void getData(String result){
+        Toast.makeText(MainActivity.this, result, Toast.LENGTH_SHORT).show();
+    }
+
+    private void testEventBus(){
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    Thread.sleep(5 * 1000);
+
+                    EventBus.getDefault().post("这是 EventBus 的测试");
+
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                }
+            }
+        }).start();
+
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+
+        EventBus.getDefault().unregister(this);
+    }
+}
diff --git a/mytestapplication/src/main/java/com/yxhuang/mytestapplication/PostEntry.java b/mytestapplication/src/main/java/com/yxhuang/mytestapplication/PostEntry.java
new file mode 100644
index 00000000..f07ea29f
--- /dev/null
+++ b/mytestapplication/src/main/java/com/yxhuang/mytestapplication/PostEntry.java
@@ -0,0 +1,35 @@
+package com.yxhuang.mytestapplication;
+
+/**
+ * Created by Administrator on 2016/8/7.
+ */
+public class PostEntry {
+
+    private int mPostType;
+    private Object mPostContent;
+
+    public PostEntry(){
+
+    }
+
+    public PostEntry(int postType, Object postContent) {
+        mPostType = postType;
+        mPostContent = postContent;
+    }
+
+    public int getPostType() {
+        return mPostType;
+    }
+
+    public void setPostType(int postType) {
+        mPostType = postType;
+    }
+
+    public Object getPostContent() {
+        return mPostContent;
+    }
+
+    public void setPostContent(Object postContent) {
+        mPostContent = postContent;
+    }
+}
diff --git a/mytestapplication/src/main/res/layout/activity_main.xml b/mytestapplication/src/main/res/layout/activity_main.xml
new file mode 100644
index 00000000..f4e32bad
--- /dev/null
+++ b/mytestapplication/src/main/res/layout/activity_main.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    tools:context="com.yxhuang.mytestapplication.MainActivity">
+
+    <TextView
+        android:text="Hello World!"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content" />
+</RelativeLayout>
diff --git a/mytestapplication/src/main/res/mipmap-hdpi/ic_launcher.png b/mytestapplication/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 00000000..cde69bcc
Binary files /dev/null and b/mytestapplication/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/mytestapplication/src/main/res/mipmap-mdpi/ic_launcher.png b/mytestapplication/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 00000000..c133a0cb
Binary files /dev/null and b/mytestapplication/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/mytestapplication/src/main/res/mipmap-xhdpi/ic_launcher.png b/mytestapplication/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 00000000..bfa42f0e
Binary files /dev/null and b/mytestapplication/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/mytestapplication/src/main/res/mipmap-xxhdpi/ic_launcher.png b/mytestapplication/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 00000000..324e72cd
Binary files /dev/null and b/mytestapplication/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/mytestapplication/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/mytestapplication/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 00000000..aee44e13
Binary files /dev/null and b/mytestapplication/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/mytestapplication/src/main/res/values-w820dp/dimens.xml b/mytestapplication/src/main/res/values-w820dp/dimens.xml
new file mode 100644
index 00000000..62df1875
--- /dev/null
+++ b/mytestapplication/src/main/res/values-w820dp/dimens.xml
@@ -0,0 +1,6 @@
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
diff --git a/mytestapplication/src/main/res/values/colors.xml b/mytestapplication/src/main/res/values/colors.xml
new file mode 100644
index 00000000..2a12c47c
--- /dev/null
+++ b/mytestapplication/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+</resources>
diff --git a/mytestapplication/src/main/res/values/dimens.xml b/mytestapplication/src/main/res/values/dimens.xml
new file mode 100644
index 00000000..295b5a9d
--- /dev/null
+++ b/mytestapplication/src/main/res/values/dimens.xml
@@ -0,0 +1,5 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+</resources>
diff --git a/mytestapplication/src/main/res/values/strings.xml b/mytestapplication/src/main/res/values/strings.xml
new file mode 100644
index 00000000..99126d3b
--- /dev/null
+++ b/mytestapplication/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">MyTestApplication</string>
+</resources>
diff --git a/mytestapplication/src/main/res/values/styles.xml b/mytestapplication/src/main/res/values/styles.xml
new file mode 100644
index 00000000..6f19b475
--- /dev/null
+++ b/mytestapplication/src/main/res/values/styles.xml
@@ -0,0 +1,11 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+</resources>
diff --git a/mytestapplication/src/test/java/com/yxhuang/mytestapplication/ExampleUnitTest.java b/mytestapplication/src/test/java/com/yxhuang/mytestapplication/ExampleUnitTest.java
new file mode 100644
index 00000000..00c2075e
--- /dev/null
+++ b/mytestapplication/src/test/java/com/yxhuang/mytestapplication/ExampleUnitTest.java
@@ -0,0 +1,15 @@
+package com.yxhuang.mytestapplication;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * To work on unit tests, switch the Test Artifact in the Build Variants view.
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
diff --git a/settings.gradle b/settings.gradle
index a11c17d8..084a45e6 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,5 +1,7 @@
+include ':mytestapplication'
 include 'EventBus'
 include 'EventBusAnnotationProcessor'
 include 'EventBusTest'
 include 'EventBusTestSubscriberInJar'
 include 'EventBusPerformance'
+
