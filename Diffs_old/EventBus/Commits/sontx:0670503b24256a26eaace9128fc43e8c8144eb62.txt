diff --git a/EventBus/src/org/greenrobot/eventbus/EventBus.java b/EventBus/src/org/greenrobot/eventbus/EventBus.java
index e35ecd38..e42bcf65 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBus.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java
@@ -213,7 +213,7 @@ private void checkPostStickyEventToSubscription(Subscription newSubscription, Ob
      * poster.
      */
     private boolean isMainThread() {
-        return mainThreadSupport != null ? mainThreadSupport.isMainThread() : true;
+        return mainThreadSupport == null || mainThreadSupport.isMainThread();
     }
 
     public synchronized boolean isRegistered(Object subscriber) {
@@ -504,7 +504,7 @@ void invokeSubscriber(PendingPost pendingPost) {
         }
     }
 
-    void invokeSubscriber(Subscription subscription, Object event) {
+    public void invokeSubscriber(Subscription subscription, Object event) {
         try {
             subscription.subscriberMethod.method.invoke(subscription.subscriber, event);
         } catch (InvocationTargetException e) {
diff --git a/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
index 3e2b5c9c..4d1bc6af 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
@@ -19,6 +19,7 @@
 
 import org.greenrobot.eventbus.android.AndroidLogger;
 import org.greenrobot.eventbus.meta.SubscriberInfoIndex;
+import org.greenrobot.eventbus.support.SwingMainThreadSupport;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -49,6 +50,11 @@
     EventBusBuilder() {
     }
 
+    public EventBusBuilder mainThreadSupport(MainThreadSupport mainThreadSupport) {
+        this.mainThreadSupport = mainThreadSupport;
+        return this;
+    }
+
     /** Default: true */
     public EventBusBuilder logSubscriberExceptions(boolean logSubscriberExceptions) {
         this.logSubscriberExceptions = logSubscriberExceptions;
diff --git a/EventBus/src/org/greenrobot/eventbus/PendingPost.java b/EventBus/src/org/greenrobot/eventbus/PendingPost.java
index 01f474c2..c591308c 100644
--- a/EventBus/src/org/greenrobot/eventbus/PendingPost.java
+++ b/EventBus/src/org/greenrobot/eventbus/PendingPost.java
@@ -18,8 +18,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
-final class PendingPost {
-    private final static List<PendingPost> pendingPostPool = new ArrayList<PendingPost>();
+public final class PendingPost {
+    private final static List<PendingPost> pendingPostPool = new ArrayList<>();
 
     Object event;
     Subscription subscription;
@@ -30,7 +30,7 @@ private PendingPost(Object event, Subscription subscription) {
         this.subscription = subscription;
     }
 
-    static PendingPost obtainPendingPost(Subscription subscription, Object event) {
+    public static PendingPost obtainPendingPost(Subscription subscription, Object event) {
         synchronized (pendingPostPool) {
             int size = pendingPostPool.size();
             if (size > 0) {
diff --git a/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java b/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java
index 55db529a..e909e162 100644
--- a/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java
+++ b/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java
@@ -16,11 +16,11 @@
 
 package org.greenrobot.eventbus;
 
-final class PendingPostQueue {
+public final class PendingPostQueue {
     private PendingPost head;
     private PendingPost tail;
 
-    synchronized void enqueue(PendingPost pendingPost) {
+    public synchronized void enqueue(PendingPost pendingPost) {
         if (pendingPost == null) {
             throw new NullPointerException("null cannot be enqueued");
         }
diff --git a/EventBus/src/org/greenrobot/eventbus/Poster.java b/EventBus/src/org/greenrobot/eventbus/Poster.java
index a69a078d..67cfd67c 100644
--- a/EventBus/src/org/greenrobot/eventbus/Poster.java
+++ b/EventBus/src/org/greenrobot/eventbus/Poster.java
@@ -20,7 +20,7 @@
  *
  * @author William Ferguson
  */
-interface Poster {
+public interface Poster {
 
     /**
      * Enqueue an event to be posted for a particular subscription.
diff --git a/EventBus/src/org/greenrobot/eventbus/Subscription.java b/EventBus/src/org/greenrobot/eventbus/Subscription.java
index cc0de1e3..6e4bf412 100644
--- a/EventBus/src/org/greenrobot/eventbus/Subscription.java
+++ b/EventBus/src/org/greenrobot/eventbus/Subscription.java
@@ -15,7 +15,7 @@
  */
 package org.greenrobot.eventbus;
 
-final class Subscription {
+public final class Subscription {
     final Object subscriber;
     final SubscriberMethod subscriberMethod;
     /**
diff --git a/EventBus/src/org/greenrobot/eventbus/support/JavaFxMainThreadSupport.java b/EventBus/src/org/greenrobot/eventbus/support/JavaFxMainThreadSupport.java
new file mode 100644
index 00000000..5dc06375
--- /dev/null
+++ b/EventBus/src/org/greenrobot/eventbus/support/JavaFxMainThreadSupport.java
@@ -0,0 +1,18 @@
+package org.greenrobot.eventbus.support;
+
+import javafx.application.Platform;
+import org.greenrobot.eventbus.EventBus;
+import org.greenrobot.eventbus.MainThreadSupport;
+import org.greenrobot.eventbus.Poster;
+
+public class JavaFxMainThreadSupport implements MainThreadSupport {
+    @Override
+    public boolean isMainThread() {
+        return Platform.isFxApplicationThread();
+    }
+
+    @Override
+    public Poster createPoster(EventBus eventBus) {
+        return new JavaFxUiThreadPoster(eventBus);
+    }
+}
diff --git a/EventBus/src/org/greenrobot/eventbus/support/JavaFxUiThreadPoster.java b/EventBus/src/org/greenrobot/eventbus/support/JavaFxUiThreadPoster.java
new file mode 100644
index 00000000..c53647f6
--- /dev/null
+++ b/EventBus/src/org/greenrobot/eventbus/support/JavaFxUiThreadPoster.java
@@ -0,0 +1,24 @@
+package org.greenrobot.eventbus.support;
+
+import javafx.application.Platform;
+import org.greenrobot.eventbus.EventBus;
+import org.greenrobot.eventbus.Poster;
+import org.greenrobot.eventbus.Subscription;
+
+public class JavaFxUiThreadPoster implements Poster {
+    private final EventBus eventBus;
+
+    JavaFxUiThreadPoster(EventBus eventBus) {
+        this.eventBus = eventBus;
+    }
+
+    @Override
+    public void enqueue(final Subscription subscription, final Object event) {
+        Platform.runLater(new Runnable() {
+            @Override
+            public void run() {
+                eventBus.invokeSubscriber(subscription, event);
+            }
+        });
+    }
+}
diff --git a/EventBus/src/org/greenrobot/eventbus/support/SwingMainThreadSupport.java b/EventBus/src/org/greenrobot/eventbus/support/SwingMainThreadSupport.java
new file mode 100644
index 00000000..80110f7a
--- /dev/null
+++ b/EventBus/src/org/greenrobot/eventbus/support/SwingMainThreadSupport.java
@@ -0,0 +1,19 @@
+package org.greenrobot.eventbus.support;
+
+import org.greenrobot.eventbus.EventBus;
+import org.greenrobot.eventbus.MainThreadSupport;
+import org.greenrobot.eventbus.Poster;
+
+import javax.swing.*;
+
+public class SwingMainThreadSupport implements MainThreadSupport {
+    @Override
+    public boolean isMainThread() {
+        return SwingUtilities.isEventDispatchThread();
+    }
+
+    @Override
+    public Poster createPoster(EventBus eventBus) {
+        return new SwingUiThreadPoster(eventBus);
+    }
+}
diff --git a/EventBus/src/org/greenrobot/eventbus/support/SwingUiThreadPoster.java b/EventBus/src/org/greenrobot/eventbus/support/SwingUiThreadPoster.java
new file mode 100644
index 00000000..d9e11153
--- /dev/null
+++ b/EventBus/src/org/greenrobot/eventbus/support/SwingUiThreadPoster.java
@@ -0,0 +1,24 @@
+package org.greenrobot.eventbus.support;
+
+import org.greenrobot.eventbus.EventBus;
+import org.greenrobot.eventbus.Poster;
+import org.greenrobot.eventbus.Subscription;
+
+import javax.swing.*;
+
+public class SwingUiThreadPoster implements Poster {
+    private final EventBus eventBus;
+
+    SwingUiThreadPoster(EventBus eventBus) {
+        this.eventBus = eventBus;
+    }
+
+    public void enqueue(final Subscription subscription, final Object event) {
+        SwingUtilities.invokeLater(new Runnable() {
+            @Override
+            public void run() {
+                eventBus.invokeSubscriber(subscription, event);
+            }
+        });
+    }
+}
