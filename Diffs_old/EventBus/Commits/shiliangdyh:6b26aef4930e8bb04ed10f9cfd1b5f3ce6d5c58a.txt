diff --git a/EventBus/src/org/greenrobot/eventbus/Subscribe.java b/EventBus/src/org/greenrobot/eventbus/Subscribe.java
index ed0b8c82..73125c8c 100644
--- a/EventBus/src/org/greenrobot/eventbus/Subscribe.java
+++ b/EventBus/src/org/greenrobot/eventbus/Subscribe.java
@@ -40,5 +40,6 @@
      * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of
      * delivery among subscribers with different {@link ThreadMode}s! */
     int priority() default 0;
+    int id() default -1;
 }
 
diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
index 1d78d479..aa98e16e 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
@@ -23,16 +23,18 @@
     final ThreadMode threadMode;
     final Class<?> eventType;
     final int priority;
+    final int id;
     final boolean sticky;
     /** Used for efficient comparison */
     String methodString;
 
-    public SubscriberMethod(Method method, Class<?> eventType, ThreadMode threadMode, int priority, boolean sticky) {
+    public SubscriberMethod(int id, Method method, Class<?> eventType, ThreadMode threadMode, int priority, boolean sticky) {
         this.method = method;
         this.threadMode = threadMode;
         this.eventType = eventType;
         this.priority = priority;
         this.sticky = sticky;
+        this.id = id;
     }
 
     @Override
diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
index db5e0ad3..b41b886a 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
@@ -167,7 +167,7 @@ private void findUsingReflectionInSingleClass(FindState findState) {
                         Class<?> eventType = parameterTypes[0];
                         if (findState.checkAdd(method, eventType)) {
                             ThreadMode threadMode = subscribeAnnotation.threadMode();
-                            findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode,
+                            findState.subscriberMethods.add(new SubscriberMethod(subscribeAnnotation.id(),method, eventType, threadMode,
                                     subscribeAnnotation.priority(), subscribeAnnotation.sticky()));
                         }
                     }
diff --git a/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java b/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java
index 9020c24b..89af0a09 100644
--- a/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java
+++ b/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java
@@ -58,19 +58,19 @@ public boolean shouldCheckSuperclass() {
         return shouldCheckSuperclass;
     }
 
-    protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType) {
-        return createSubscriberMethod(methodName, eventType, ThreadMode.POSTING, 0, false);
+    protected SubscriberMethod createSubscriberMethod(int id,String methodName, Class<?> eventType) {
+        return createSubscriberMethod(id,methodName, eventType, ThreadMode.POSTING, 0, false);
     }
 
-    protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType, ThreadMode threadMode) {
-        return createSubscriberMethod(methodName, eventType, threadMode, 0, false);
+    protected SubscriberMethod createSubscriberMethod(int id,String methodName, Class<?> eventType, ThreadMode threadMode) {
+        return createSubscriberMethod(id,methodName, eventType, threadMode, 0, false);
     }
 
-    protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType, ThreadMode threadMode,
+    protected SubscriberMethod createSubscriberMethod(int id,String methodName, Class<?> eventType, ThreadMode threadMode,
                                                       int priority, boolean sticky) {
         try {
             Method method = subscriberClass.getDeclaredMethod(methodName, eventType);
-            return new SubscriberMethod(method, eventType, threadMode, priority, sticky);
+            return new SubscriberMethod(id,method, eventType, threadMode, priority, sticky);
         } catch (NoSuchMethodException e) {
             throw new EventBusException("Could not find subscriber method in " + subscriberClass +
                     ". Maybe a missing ProGuard rule?", e);
diff --git a/EventBus/src/org/greenrobot/eventbus/meta/SimpleSubscriberInfo.java b/EventBus/src/org/greenrobot/eventbus/meta/SimpleSubscriberInfo.java
index 3ee4442d..74b64f88 100644
--- a/EventBus/src/org/greenrobot/eventbus/meta/SimpleSubscriberInfo.java
+++ b/EventBus/src/org/greenrobot/eventbus/meta/SimpleSubscriberInfo.java
@@ -35,7 +35,7 @@ public SimpleSubscriberInfo(Class subscriberClass, boolean shouldCheckSuperclass
         SubscriberMethod[] methods = new SubscriberMethod[length];
         for (int i = 0; i < length; i++) {
             SubscriberMethodInfo info = methodInfos[i];
-            methods[i] = createSubscriberMethod(info.methodName, info.eventType, info.threadMode,
+            methods[i] = createSubscriberMethod(info.id ,info.methodName, info.eventType, info.threadMode,
                     info.priority, info.sticky);
         }
         return methods;
diff --git a/EventBus/src/org/greenrobot/eventbus/meta/SubscriberMethodInfo.java b/EventBus/src/org/greenrobot/eventbus/meta/SubscriberMethodInfo.java
index 2152554c..42ab4358 100644
--- a/EventBus/src/org/greenrobot/eventbus/meta/SubscriberMethodInfo.java
+++ b/EventBus/src/org/greenrobot/eventbus/meta/SubscriberMethodInfo.java
@@ -22,23 +22,33 @@
     final ThreadMode threadMode;
     final Class<?> eventType;
     final int priority;
+    final int id;
     final boolean sticky;
 
-    public SubscriberMethodInfo(String methodName, Class<?> eventType, ThreadMode threadMode,
+    public SubscriberMethodInfo(int id, String methodName, Class<?> eventType, ThreadMode threadMode,
                                 int priority, boolean sticky) {
         this.methodName = methodName;
         this.threadMode = threadMode;
         this.eventType = eventType;
         this.priority = priority;
         this.sticky = sticky;
+        this.id = id;
     }
 
     public SubscriberMethodInfo(String methodName, Class<?> eventType) {
-        this(methodName, eventType, ThreadMode.POSTING, 0, false);
+        this(-1,methodName, eventType, ThreadMode.POSTING, 0, false);
+    }
+
+    public SubscriberMethodInfo(int id,String methodName, Class<?> eventType) {
+        this(id,methodName, eventType, ThreadMode.POSTING, 0, false);
     }
 
     public SubscriberMethodInfo(String methodName, Class<?> eventType, ThreadMode threadMode) {
-        this(methodName, eventType, threadMode, 0, false);
+        this(-1,methodName, eventType, threadMode, 0, false);
+    }
+
+    public SubscriberMethodInfo(int id, String methodName, Class<?> eventType, ThreadMode threadMode) {
+        this(id,methodName, eventType, threadMode, 0, false);
     }
 
 }
\ No newline at end of file
diff --git a/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java
index c37c18a5..a60fd49f 100644
--- a/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java
+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java
@@ -280,8 +280,9 @@ private void writeCreateSubscriberMethods(BufferedWriter writer, List<Executable
             String eventClass = getClassString(paramElement, myPackage) + ".class";
 
             Subscribe subscribe = method.getAnnotation(Subscribe.class);
+            int id = subscribe.id();
             List<String> parts = new ArrayList<>();
-            parts.add(callPrefix + "(\"" + methodName + "\",");
+            parts.add(callPrefix + "("+id+",\"" + methodName + "\",");
             String lineEnd = "),";
             if (subscribe.priority() == 0 && !subscribe.sticky()) {
                 if (subscribe.threadMode() == ThreadMode.POSTING) {
diff --git a/app/src/main/java/top/lizhengxian/eventbusplus/MainActivity.java b/app/src/main/java/top/lizhengxian/eventbusplus/MainActivity.java
index bca0bcce..632c784e 100644
--- a/app/src/main/java/top/lizhengxian/eventbusplus/MainActivity.java
+++ b/app/src/main/java/top/lizhengxian/eventbusplus/MainActivity.java
@@ -30,4 +30,14 @@ public void onClick(View v) {
     public void printMessage(String message){
         Toast.makeText(this,message,Toast.LENGTH_LONG).show();
     }
+
+    @Subscribe
+    public void printMessage2(String message){
+
+    }
+
+    @Subscribe
+    public void printMes(Object o){
+
+    }
 }
