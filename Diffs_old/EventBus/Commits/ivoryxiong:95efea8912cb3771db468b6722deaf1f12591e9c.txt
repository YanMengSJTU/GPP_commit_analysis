diff --git a/EventBus/src/org/greenrobot/eventbus/EventBus.java b/EventBus/src/org/greenrobot/eventbus/EventBus.java
index 1cd57e32..39b3a0ac 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBus.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java
@@ -27,6 +27,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.ExecutorService;
+import java.util.jar.Attributes;
 
 /**
  * EventBus is a central publish/subscribe event system for Android. Events are posted ({@link #post(Object)}) to the
@@ -390,6 +391,18 @@ private boolean postSingleEventForEventType(Object event, PostingThreadState pos
         }
         if (subscriptions != null && !subscriptions.isEmpty()) {
             for (Subscription subscription : subscriptions) {
+
+                //同类型消息按EventName 分发到不同的方法
+                if (event instanceof NamedEvent) {
+                    String eventName = ((NamedEvent)event).getEventName();
+                    if (subscription.subscriberMethod.eventNames == null) {
+                        continue;
+                    }
+                    if (!subscription.subscriberMethod.eventNames.contains(eventName)) {
+                        continue;
+                    }
+                }
+
                 postingState.event = event;
                 postingState.subscription = subscription;
                 boolean aborted = false;
diff --git a/EventBus/src/org/greenrobot/eventbus/NamedEvent.java b/EventBus/src/org/greenrobot/eventbus/NamedEvent.java
new file mode 100644
index 00000000..80bcdec1
--- /dev/null
+++ b/EventBus/src/org/greenrobot/eventbus/NamedEvent.java
@@ -0,0 +1,10 @@
+package org.greenrobot.eventbus;
+
+/**
+ * NamedEvent , EventBus dispatch Event With Name
+ * Created by ivoryxiong on 2017/10/24.
+ */
+
+public interface NamedEvent {
+    public String getEventName();
+}
diff --git a/EventBus/src/org/greenrobot/eventbus/Subscribe.java b/EventBus/src/org/greenrobot/eventbus/Subscribe.java
index ed0b8c82..4d1905a8 100644
--- a/EventBus/src/org/greenrobot/eventbus/Subscribe.java
+++ b/EventBus/src/org/greenrobot/eventbus/Subscribe.java
@@ -40,5 +40,7 @@
      * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of
      * delivery among subscribers with different {@link ThreadMode}s! */
     int priority() default 0;
+
+    String[] names() default {};
 }
 
diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
index 1d78d479..33c1c3f0 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
@@ -16,6 +16,8 @@
 package org.greenrobot.eventbus;
 
 import java.lang.reflect.Method;
+import java.util.HashSet;
+import java.util.Set;
 
 /** Used internally by EventBus and generated subscriber indexes. */
 public class SubscriberMethod {
@@ -24,15 +26,20 @@
     final Class<?> eventType;
     final int priority;
     final boolean sticky;
+    final Set<String> eventNames;
     /** Used for efficient comparison */
     String methodString;
 
-    public SubscriberMethod(Method method, Class<?> eventType, ThreadMode threadMode, int priority, boolean sticky) {
+    public SubscriberMethod(Method method, Class<?> eventType, ThreadMode threadMode, int priority, boolean sticky, String[] eventNames) {
         this.method = method;
         this.threadMode = threadMode;
         this.eventType = eventType;
         this.priority = priority;
         this.sticky = sticky;
+        this.eventNames = new HashSet<String>();
+        for (String eventName : eventNames) {
+            this.eventNames.add(eventName);
+        }
     }
 
     @Override
@@ -57,6 +64,12 @@ private synchronized void checkMethodString() {
             builder.append(method.getDeclaringClass().getName());
             builder.append('#').append(method.getName());
             builder.append('(').append(eventType.getName());
+            if (eventNames != null) {
+                for (String eventName : eventNames) {
+                    builder.append(",");
+                    builder.append(eventName);
+                }
+            }
             methodString = builder.toString();
         }
     }
diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
index db5e0ad3..fb8334bc 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
@@ -168,7 +168,7 @@ private void findUsingReflectionInSingleClass(FindState findState) {
                         if (findState.checkAdd(method, eventType)) {
                             ThreadMode threadMode = subscribeAnnotation.threadMode();
                             findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode,
-                                    subscribeAnnotation.priority(), subscribeAnnotation.sticky()));
+                                    subscribeAnnotation.priority(), subscribeAnnotation.sticky(), subscribeAnnotation.names()));
                         }
                     }
                 } else if (strictMethodVerification && method.isAnnotationPresent(Subscribe.class)) {
diff --git a/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java b/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java
index 9020c24b..1b7a9abf 100644
--- a/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java
+++ b/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java
@@ -58,19 +58,19 @@ public boolean shouldCheckSuperclass() {
         return shouldCheckSuperclass;
     }
 
-    protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType) {
-        return createSubscriberMethod(methodName, eventType, ThreadMode.POSTING, 0, false);
+    protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType, String[] eventNames) {
+        return createSubscriberMethod(methodName, eventType, ThreadMode.POSTING, 0, false, eventNames);
     }
 
-    protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType, ThreadMode threadMode) {
-        return createSubscriberMethod(methodName, eventType, threadMode, 0, false);
+    protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType, ThreadMode threadMode, String[] eventNames) {
+        return createSubscriberMethod(methodName, eventType, threadMode, 0, false, eventNames);
     }
 
     protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType, ThreadMode threadMode,
-                                                      int priority, boolean sticky) {
+                                                      int priority, boolean sticky, String[] eventNames) {
         try {
             Method method = subscriberClass.getDeclaredMethod(methodName, eventType);
-            return new SubscriberMethod(method, eventType, threadMode, priority, sticky);
+            return new SubscriberMethod(method, eventType, threadMode, priority, sticky, eventNames);
         } catch (NoSuchMethodException e) {
             throw new EventBusException("Could not find subscriber method in " + subscriberClass +
                     ". Maybe a missing ProGuard rule?", e);
diff --git a/EventBus/src/org/greenrobot/eventbus/meta/SimpleSubscriberInfo.java b/EventBus/src/org/greenrobot/eventbus/meta/SimpleSubscriberInfo.java
index 3ee4442d..5fc25c9a 100644
--- a/EventBus/src/org/greenrobot/eventbus/meta/SimpleSubscriberInfo.java
+++ b/EventBus/src/org/greenrobot/eventbus/meta/SimpleSubscriberInfo.java
@@ -36,7 +36,7 @@ public SimpleSubscriberInfo(Class subscriberClass, boolean shouldCheckSuperclass
         for (int i = 0; i < length; i++) {
             SubscriberMethodInfo info = methodInfos[i];
             methods[i] = createSubscriberMethod(info.methodName, info.eventType, info.threadMode,
-                    info.priority, info.sticky);
+                    info.priority, info.sticky, info.eventNames);
         }
         return methods;
     }
diff --git a/EventBus/src/org/greenrobot/eventbus/meta/SubscriberMethodInfo.java b/EventBus/src/org/greenrobot/eventbus/meta/SubscriberMethodInfo.java
index 2152554c..696e7406 100644
--- a/EventBus/src/org/greenrobot/eventbus/meta/SubscriberMethodInfo.java
+++ b/EventBus/src/org/greenrobot/eventbus/meta/SubscriberMethodInfo.java
@@ -23,22 +23,24 @@
     final Class<?> eventType;
     final int priority;
     final boolean sticky;
+    final String[] eventNames;
 
     public SubscriberMethodInfo(String methodName, Class<?> eventType, ThreadMode threadMode,
-                                int priority, boolean sticky) {
+                                int priority, boolean sticky, String[] eventNames) {
         this.methodName = methodName;
         this.threadMode = threadMode;
         this.eventType = eventType;
         this.priority = priority;
         this.sticky = sticky;
+        this.eventNames = eventNames;
     }
 
-    public SubscriberMethodInfo(String methodName, Class<?> eventType) {
-        this(methodName, eventType, ThreadMode.POSTING, 0, false);
+    public SubscriberMethodInfo(String methodName, Class<?> eventType, String[] eventNames) {
+        this(methodName, eventType, ThreadMode.POSTING, 0, false, eventNames);
     }
 
-    public SubscriberMethodInfo(String methodName, Class<?> eventType, ThreadMode threadMode) {
-        this(methodName, eventType, threadMode, 0, false);
+    public SubscriberMethodInfo(String methodName, Class<?> eventType, ThreadMode threadMode, String[] eventNames) {
+        this(methodName, eventType, threadMode, 0, false, eventNames);
     }
 
 }
\ No newline at end of file
diff --git a/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java
index c37c18a5..dc233b9e 100644
--- a/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java
+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java
@@ -283,19 +283,32 @@ private void writeCreateSubscriberMethods(BufferedWriter writer, List<Executable
             List<String> parts = new ArrayList<>();
             parts.add(callPrefix + "(\"" + methodName + "\",");
             String lineEnd = "),";
+            String[] eventNames = subscribe.names();
             if (subscribe.priority() == 0 && !subscribe.sticky()) {
                 if (subscribe.threadMode() == ThreadMode.POSTING) {
-                    parts.add(eventClass + lineEnd);
+                    parts.add(eventClass + ",");
                 } else {
                     parts.add(eventClass + ",");
-                    parts.add("ThreadMode." + subscribe.threadMode().name() + lineEnd);
+                    parts.add("ThreadMode." + subscribe.threadMode().name() + ",");
                 }
             } else {
                 parts.add(eventClass + ",");
                 parts.add("ThreadMode." + subscribe.threadMode().name() + ",");
                 parts.add(subscribe.priority() + ",");
-                parts.add(subscribe.sticky() + lineEnd);
+                parts.add(subscribe.sticky() + ",");
+            }
+
+            parts.add("new String[] {");
+            if (eventNames != null) {
+                for (int i = 0; i < eventNames.length; i++) {
+                    parts.add(eventNames[i]);
+                    if (i != eventNames.length - 1) {
+                        parts.add(",");
+                    }
+                }
             }
+            parts.add("}" + lineEnd);
+
             writeLine(writer, 3, parts.toArray(new String[parts.size()]));
 
             if (verbose) {
