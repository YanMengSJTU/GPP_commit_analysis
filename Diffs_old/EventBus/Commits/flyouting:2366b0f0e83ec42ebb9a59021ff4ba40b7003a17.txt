diff --git a/EventBus/build.gradle b/EventBus/build.gradle
index 1143bd3a..036f195b 100644
--- a/EventBus/build.gradle
+++ b/EventBus/build.gradle
@@ -3,7 +3,7 @@ apply plugin: 'maven'
 apply plugin: 'signing'
 
 group = 'de.greenrobot'
-version = '2.2.0'
+version = '2.2.1'
 sourceCompatibility = 1.6
 
 def isSnapshot = version.endsWith('-SNAPSHOT')
diff --git a/EventBus/src/de/greenrobot/event/EventBus.java b/EventBus/src/de/greenrobot/event/EventBus.java
index 52892e57..057f8b42 100644
--- a/EventBus/src/de/greenrobot/event/EventBus.java
+++ b/EventBus/src/de/greenrobot/event/EventBus.java
@@ -45,6 +45,7 @@
 
     private static volatile EventBus defaultInstance;
 
+    private static final String DEFAULT_METHOD_NAME = "onEvent";
     private static final Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<Class<?>, List<Class<?>>>();
 
     private final Map<Class<?>, CopyOnWriteArrayList<Subscription>> subscriptionsByEventType;
@@ -58,7 +59,6 @@ protected PostingThreadState initialValue() {
         }
     };
 
-    private String defaultMethodName = "onEvent";
 
     private final HandlerPoster mainThreadPoster;
     private final BackgroundPoster backgroundPoster;
@@ -137,7 +137,7 @@ public void configureLogSubscriberExceptions(boolean logSubscriberExceptions) {
      * "onEventMainThread".
      */
     public void register(Object subscriber) {
-        register(subscriber, defaultMethodName, false, 0);
+        register(subscriber, DEFAULT_METHOD_NAME, false, 0);
     }
 
     /**
@@ -147,7 +147,7 @@ public void register(Object subscriber) {
      * delivery among subscribers with different {@link ThreadMode}s!
      */
     public void register(Object subscriber, int priority) {
-        register(subscriber, defaultMethodName, false, priority);
+        register(subscriber, DEFAULT_METHOD_NAME, false, priority);
     }
 
     /**
@@ -163,7 +163,7 @@ public void register(Object subscriber, String methodName) {
      * {@link #postSticky(Object)}) to the given subscriber.
      */
     public void registerSticky(Object subscriber) {
-        register(subscriber, defaultMethodName, true, 0);
+        register(subscriber, DEFAULT_METHOD_NAME, true, 0);
     }
 
     /**
@@ -171,7 +171,7 @@ public void registerSticky(Object subscriber) {
      * {@link #postSticky(Object)}) to the given subscriber.
      */
     public void registerSticky(Object subscriber, int priority) {
-        register(subscriber, defaultMethodName, true, priority);
+        register(subscriber, DEFAULT_METHOD_NAME, true, priority);
     }
 
     /**
@@ -195,7 +195,7 @@ private synchronized void register(Object subscriber, String methodName, boolean
      */
     @Deprecated
     public void register(Object subscriber, Class<?> eventType, Class<?>... moreEventTypes) {
-        register(subscriber, defaultMethodName, false, eventType, moreEventTypes);
+        register(subscriber, DEFAULT_METHOD_NAME, false, eventType, moreEventTypes);
     }
 
     /**
@@ -211,7 +211,7 @@ public void register(Object subscriber, String methodName, Class<?> eventType, C
      */
     @Deprecated
     public void registerSticky(Object subscriber, Class<?> eventType, Class<?>... moreEventTypes) {
-        register(subscriber, defaultMethodName, true, eventType, moreEventTypes);
+        register(subscriber, DEFAULT_METHOD_NAME, true, eventType, moreEventTypes);
     }
 
     /**
diff --git a/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java b/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java
index 49622807..38e8a7bf 100644
--- a/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java
+++ b/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java
@@ -121,8 +121,8 @@ public void run() {
                         Log.e(EventBus.TAG, "Original exception:", e);
                         throw new RuntimeException("Could not create failure event", e1);
                     }
-                    if (e instanceof HasExecutionScope) {
-                        ((HasExecutionScope) e).setExecutionScope(scope);
+                    if (event instanceof HasExecutionScope) {
+                        ((HasExecutionScope) event).setExecutionScope(scope);
                     }
                     eventBus.post(event);
                 }
diff --git a/README.md b/README.md
index a54f302d..d9601981 100644
--- a/README.md
+++ b/README.md
@@ -24,7 +24,7 @@ EventBus is pushed to [Maven Central](http://search.maven.org/#search%7Cga%7C1%7
 Gradle template ([check current version](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22eventbus%22)):
 ```
 dependencies {
-    compile 'de.greenrobot:eventbus:2.2.0'
+    compile 'de.greenrobot:eventbus:2.2.1'
 }
 ```
 Maven template ([check current version](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22eventbus%22)):
@@ -32,7 +32,7 @@ Maven template ([check current version](http://search.maven.org/#search%7Cga%7C1
 <dependency>
     <groupId>de.greenrobot</groupId>
     <artifactId>eventbus</artifactId>
-    <version>2.2.0</version>
+    <version>2.2.1</version>
 </dependency>
 ```
 
@@ -190,6 +190,9 @@ FAQ
 
 Release History
 ---------------
+### V2.2.1 (2014-05-21) Bug fix release
+* Fixed an issue with AsyncExecutor and execution scope
+
 ### V2.2.0 (2013-11-18) Feature release, subscriber priority
 * Register subscribers with a priority to to influence the order of event delivery (per delivery thread)
 * Event delivery can be canceled by subscribers so subsequent subscribers will not receive the event
@@ -234,7 +237,7 @@ Please update! Now, EventBus.unregister releases all internal references to the
 
 License
 -------
-Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
+Copyright (C) 2012-2014 Markus Junginger, greenrobot (http://greenrobot.de)
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
