diff --git a/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java
index 624ddf6d..80853fde 100644
--- a/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java
+++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java
@@ -23,10 +23,11 @@
  * @author Markus
  */
 final class BackgroundPoster implements Runnable, Poster {
-
+    //队列
     private final PendingPostQueue queue;
     private final EventBus eventBus;
-
+    //保证只有上个事件处理完，线程池才会处理下个事件，BackgroundPoster是后台执行事件，但是事件是顺序执行的。
+    //和AsyncPoster相对比，AsyncPoster会并发执行所有事件
     private volatile boolean executorRunning;
 
     BackgroundPoster(EventBus eventBus) {
@@ -40,6 +41,7 @@ public void enqueue(Subscription subscription, Object event) {
             queue.enqueue(pendingPost);
             if (!executorRunning) {
                 executorRunning = true;
+                //线程池执行
                 eventBus.getExecutorService().execute(this);
             }
         }
diff --git a/EventBus/src/org/greenrobot/eventbus/EventBus.java b/EventBus/src/org/greenrobot/eventbus/EventBus.java
index e35ecd38..fa5c77ba 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBus.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java
@@ -40,16 +40,25 @@
 
     /** Log tag, apps may override it. */
     public static String TAG = "EventBus";
-
+    //EventBus既可以通过单例获取，也可以通过new获取一个对象，两个的数据互不影响
     static volatile EventBus defaultInstance;
-
+    //配置类，配置项都放在这个类里，有个默认值，可以修改。可以考虑以后写代码的时候加个配置配置类，方便管理
     private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder();
+    //缓存事件，事件的父类的所有事件。EventBus支持事件类型的继承：比如事件类型A继承事件类型B，
+    // 如果发布了事件A，所有注册事件B的订阅者也会得到处理。
     private static final Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<>();
-
+    //key:订阅的事件,value:订阅这个事件的所有订阅者集合
     private final Map<Class<?>, CopyOnWriteArrayList<Subscription>> subscriptionsByEventType;
+    //key:订阅者对象,value:这个订阅者订阅的事件集合
     private final Map<Object, List<Class<?>>> typesBySubscriber;
+    //粘性事件，就是指订阅者注册事件后，会发送一次最近发生的事件。所以，这个类用来保存发送的粘性事件
+    //key:粘性事件的class对象, value:事件对象
     private final Map<Class<?>, Object> stickyEvents;
-
+    /**
+     * ThreadLocal 是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，而这段数据是不会与其他线程共享的。
+     * 其内部原理是通过生成一个它包裹的泛型对象的数组，在不同的线程会有不同的数组索引值，通过这样就可以做到每个线程通过 get() 方法获取的时候，取到的只能是自己线程所对应的数据。
+     在 EventBus 中， ThreadLocal 所包裹的是一个 PostingThreadState 类，它仅仅是封装了一些事件发送中过程所需的数据。
+     */
     private final ThreadLocal<PostingThreadState> currentPostingThreadState = new ThreadLocal<PostingThreadState>() {
         @Override
         protected PostingThreadState initialValue() {
@@ -57,13 +66,20 @@ protected PostingThreadState initialValue() {
         }
     };
 
+    //Eventbus支持Android和Java，这个在Android中，用来标记Android的UI线程
     // @Nullable
     private final MainThreadSupport mainThreadSupport;
     // @Nullable
+    //主线程post，获取主线程的loop，通过handler执行
     private final Poster mainThreadPoster;
+    //事件 Background 处理，通过Executors.newCachedThreadPool()一个事件一个事件执行。
     private final BackgroundPoster backgroundPoster;
+    //事件异步处理
     private final AsyncPoster asyncPoster;
+    //订阅者响应函数信息存储和查找类
     private final SubscriberMethodFinder subscriberMethodFinder;
+    //ExecutorService是Executor直接的扩展接口，也是最常用的线程池接口
+    //默认的值为Executors.newCachedThreadPool()
     private final ExecutorService executorService;
 
     private final boolean throwSubscriberException;
@@ -114,10 +130,15 @@ public EventBus() {
         typesBySubscriber = new HashMap<>();
         stickyEvents = new ConcurrentHashMap<>();
         mainThreadSupport = builder.getMainThreadSupport();
+        //事件主线程处理，获取主线程的loop，通过handler执行
         mainThreadPoster = mainThreadSupport != null ? mainThreadSupport.createPoster(this) : null;
+        //事件 Background 处理，通过Executors.newCachedThreadPool()一个事件一个时间执行。
         backgroundPoster = new BackgroundPoster(this);
+        //事件异步线程处理，通过Executors.newCachedThreadPool()
         asyncPoster = new AsyncPoster(this);
+
         indexCount = builder.subscriberInfoIndexes != null ? builder.subscriberInfoIndexes.size() : 0;
+        //订阅者响应函数信息存储和查找类
         subscriberMethodFinder = new SubscriberMethodFinder(builder.subscriberInfoIndexes,
                 builder.strictMethodVerification, builder.ignoreGeneratedIndex);
         logSubscriberExceptions = builder.logSubscriberExceptions;
@@ -125,6 +146,7 @@ public EventBus() {
         sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;
         sendNoSubscriberEvent = builder.sendNoSubscriberEvent;
         throwSubscriberException = builder.throwSubscriberException;
+        //是否支持事件继承
         eventInheritance = builder.eventInheritance;
         executorService = builder.executorService;
     }
@@ -138,7 +160,11 @@ public EventBus() {
      * ThreadMode} and priority.
      */
     public void register(Object subscriber) {
+        //首先获得订阅者的class对象
         Class<?> subscriberClass = subscriber.getClass();
+        //通过subscriberMethodFinder来找到订阅者订阅了哪些事件.返回一个SubscriberMethod对象的List,SubscriberMethod
+        //里包含了这个方法的Method对象,以及将来响应订阅是在哪个线程的ThreadMode,以及订阅的事件类型eventType,以及订阅的优
+        //先级priority,以及是否接收粘性sticky事件的boolean值.
         List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);
         synchronized (this) {
             for (SubscriberMethod subscriberMethod : subscriberMethods) {
@@ -147,15 +173,21 @@ public void register(Object subscriber) {
         }
     }
 
-    // Must be called in synchronized block
+    // Must be called in synchronized block, 这里涉及到把数据增加到对应的集合，所以要同步
     private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
         Class<?> eventType = subscriberMethod.eventType;
+        //订阅者的相关描述
         Subscription newSubscription = new Subscription(subscriber, subscriberMethod);
+        //CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，
+        // 而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，
+        // 再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，
+        // 因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。
         CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);
         if (subscriptions == null) {
             subscriptions = new CopyOnWriteArrayList<>();
             subscriptionsByEventType.put(eventType, subscriptions);
         } else {
+            //如果已经注册过，再次注册就会抛异常，所以注册之前要看一下是否已经注册过
             if (subscriptions.contains(newSubscription)) {
                 throw new EventBusException("Subscriber " + subscriber.getClass() + " already registered to event "
                         + eventType);
@@ -164,6 +196,7 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
 
         int size = subscriptions.size();
         for (int i = 0; i <= size; i++) {
+            //同一个事件，优先级高的订阅者放在前面
             if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {
                 subscriptions.add(i, newSubscription);
                 break;
@@ -177,6 +210,7 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
         }
         subscribedEvents.add(eventType);
 
+        //对于粘性事件，在注册后，会再发布最后一次post的事件
         if (subscriberMethod.sticky) {
             if (eventInheritance) {
                 // Existing sticky events of all subclasses of eventType have to be considered.
@@ -248,11 +282,14 @@ public synchronized void unregister(Object subscriber) {
         } else {
             logger.log(Level.WARNING, "Subscriber to unregister was not registered before: " + subscriber.getClass());
         }
-    }
+}
 
     /** Posts the given event to the event bus. */
     public void post(Object event) {
+        //获取当前线程post的一个状态
         PostingThreadState postingState = currentPostingThreadState.get();
+        //当前线程维护一个list，每次post被调用后，都会把事件先放入post，一旦开始处理list，
+        //会把list的所有事件循环处理完。
         List<Object> eventQueue = postingState.eventQueue;
         eventQueue.add(event);
 
@@ -263,6 +300,7 @@ public void post(Object event) {
                 throw new EventBusException("Internal error. Abort state was not reset");
             }
             try {
+                //循环处理
                 while (!eventQueue.isEmpty()) {
                     postSingleEvent(eventQueue.remove(0), postingState);
                 }
@@ -378,7 +416,9 @@ public boolean hasSubscriberForEvent(Class<?> eventClass) {
     private void postSingleEvent(Object event, PostingThreadState postingState) throws Error {
         Class<?> eventClass = event.getClass();
         boolean subscriptionFound = false;
+        //如果消息可继承，
         if (eventInheritance) {
+            //获取事件相关的所有事件
             List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);
             int countTypes = eventTypes.size();
             for (int h = 0; h < countTypes; h++) {
@@ -402,9 +442,11 @@ private void postSingleEvent(Object event, PostingThreadState postingState) thro
     private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class<?> eventClass) {
         CopyOnWriteArrayList<Subscription> subscriptions;
         synchronized (this) {
+            //获取事件的所有订阅者
             subscriptions = subscriptionsByEventType.get(eventClass);
         }
         if (subscriptions != null && !subscriptions.isEmpty()) {
+            //循环处理订阅者
             for (Subscription subscription : subscriptions) {
                 postingState.event = event;
                 postingState.subscription = subscription;
@@ -540,7 +582,11 @@ private void handleSubscriberException(Subscription subscription, Object event,
         }
     }
 
-    /** For ThreadLocal, much faster to set (and get multiple values). */
+    /**
+     * For ThreadLocal, much faster to set (and get multiple values).
+     * 标记当前线程的状态，
+     *
+     * */
     final static class PostingThreadState {
         final List<Object> eventQueue = new ArrayList<>();
         boolean isPosting;
diff --git a/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
index 3e2b5c9c..01143904 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
@@ -28,18 +28,19 @@
 /**
  * Creates EventBus instances with custom parameters and also allows to install a custom default EventBus instance.
  * Create a new builder using {@link EventBus#builder()}.
+ * 通过初始化了一个EventBusBuilder()对象来分别初始化EventBus的一些配置,当我们在写一个需要自定义配置的框架的时候,这种实现方法非常普遍,将配置解耦出去,使我们的代码结构更清晰
  */
 public class EventBusBuilder {
     private final static ExecutorService DEFAULT_EXECUTOR_SERVICE = Executors.newCachedThreadPool();
 
-    boolean logSubscriberExceptions = true;
-    boolean logNoSubscriberMessages = true;
-    boolean sendSubscriberExceptionEvent = true;
-    boolean sendNoSubscriberEvent = true;
-    boolean throwSubscriberException;
-    boolean eventInheritance = true;
-    boolean ignoreGeneratedIndex;
-    boolean strictMethodVerification;
+    boolean logSubscriberExceptions = true;//监听异常日志
+    boolean logNoSubscriberMessages = true;//如果没有订阅者，显示一个log
+    boolean sendSubscriberExceptionEvent = true;//发送监听到异常事件
+    boolean sendNoSubscriberEvent = true;//如果没有订阅者，发送一条默认事件
+    boolean throwSubscriberException;//如果失败，抛出异常
+    boolean eventInheritance = true;//event的子类是否也能响应订阅者
+    boolean ignoreGeneratedIndex;//是否生成的文件，每次都通过发射
+    boolean strictMethodVerification;//是否严格验证事件的处理方法
     ExecutorService executorService = DEFAULT_EXECUTOR_SERVICE;
     List<Class<?>> skipMethodVerificationForClasses;
     List<SubscriberInfoIndex> subscriberInfoIndexes;
diff --git a/EventBus/src/org/greenrobot/eventbus/PendingPost.java b/EventBus/src/org/greenrobot/eventbus/PendingPost.java
index 01f474c2..fdc3a9a6 100644
--- a/EventBus/src/org/greenrobot/eventbus/PendingPost.java
+++ b/EventBus/src/org/greenrobot/eventbus/PendingPost.java
@@ -19,17 +19,24 @@
 import java.util.List;
 
 final class PendingPost {
+    //为了避免对象的重复创建，这个集合放置已经处理过的PendingPost
     private final static List<PendingPost> pendingPostPool = new ArrayList<PendingPost>();
 
     Object event;
     Subscription subscription;
-    PendingPost next;
+    PendingPost next;//每个对象指向下一个，形成链表
 
     private PendingPost(Object event, Subscription subscription) {
         this.event = event;
         this.subscription = subscription;
     }
 
+    /**
+     * 获取一个PendingPost，如果pendingPostPool里面有，就取一个，没有创建
+     * @param subscription
+     * @param event
+     * @return
+     */
     static PendingPost obtainPendingPost(Subscription subscription, Object event) {
         synchronized (pendingPostPool) {
             int size = pendingPostPool.size();
@@ -44,6 +51,10 @@ static PendingPost obtainPendingPost(Subscription subscription, Object event) {
         return new PendingPost(event, subscription);
     }
 
+    /**
+     * 释放PendingPost，并把释放的PendingPost加入到pendingPostPool
+     * @param pendingPost
+     */
     static void releasePendingPost(PendingPost pendingPost) {
         pendingPost.event = null;
         pendingPost.subscription = null;
diff --git a/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java b/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java
index 55db529a..9f30440c 100644
--- a/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java
+++ b/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java
@@ -20,6 +20,7 @@
     private PendingPost head;
     private PendingPost tail;
 
+    //新的事件放到消息的尾部
     synchronized void enqueue(PendingPost pendingPost) {
         if (pendingPost == null) {
             throw new NullPointerException("null cannot be enqueued");
@@ -34,7 +35,7 @@ synchronized void enqueue(PendingPost pendingPost) {
         }
         notifyAll();
     }
-
+    //从队列的头部获取消息
     synchronized PendingPost poll() {
         PendingPost pendingPost = head;
         if (head != null) {
diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
index 1d78d479..f0c6cd5c 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
@@ -17,7 +17,11 @@
 
 import java.lang.reflect.Method;
 
-/** Used internally by EventBus and generated subscriber indexes. */
+/**
+ * Used internally by EventBus and generated subscriber indexes.
+ * 执行事件的相关描述
+ * */
+
 public class SubscriberMethod {
     final Method method;
     final ThreadMode threadMode;
diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
index db5e0ad3..6b0264c9 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
@@ -26,6 +26,9 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
+/**
+ * 用来查找和缓存订阅者响应函数的信息的类
+ */
 class SubscriberMethodFinder {
     /*
      * In newer class files, compilers may add methods. Those are called bridge or synthetic methods.
@@ -36,13 +39,15 @@
     private static final int SYNTHETIC = 0x1000;
 
     private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;
+    //缓存订阅者相应函数
     private static final Map<Class<?>, List<SubscriberMethod>> METHOD_CACHE = new ConcurrentHashMap<>();
 
     private List<SubscriberInfoIndex> subscriberInfoIndexes;
     private final boolean strictMethodVerification;
-    private final boolean ignoreGeneratedIndex;
+    private final boolean ignoreGeneratedIndex;//忽略注解器生成的MyEventBusIndex类，通过反射获取订阅方法信息
 
     private static final int POOL_SIZE = 4;
+    //做订阅方法的校验和保存,并通过FIND_STATE_POOL静态数组来保存FindState对象,可以使FindState复用,避免重复创建过多的对象
     private static final FindState[] FIND_STATE_POOL = new FindState[POOL_SIZE];
 
     SubscriberMethodFinder(List<SubscriberInfoIndex> subscriberInfoIndexes, boolean strictMethodVerification,
@@ -54,15 +59,19 @@
 
     List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {
         List<SubscriberMethod> subscriberMethods = METHOD_CACHE.get(subscriberClass);
+        //如果订阅者已经在缓存里，直接返回
         if (subscriberMethods != null) {
             return subscriberMethods;
         }
-
+        //是否忽略注解器生成的MyEventBusIndex类
         if (ignoreGeneratedIndex) {
+            //利用反射来读取订阅类中的订阅方法信息
             subscriberMethods = findUsingReflection(subscriberClass);
         } else {
+            //从注解器生成的MyEventBusIndex类中获得订阅类的订阅方法信息
             subscriberMethods = findUsingInfo(subscriberClass);
         }
+        //register所在的类或超类里必须要有处理事件的方法，要不然再次注册的时候会抛异常
         if (subscriberMethods.isEmpty()) {
             throw new EventBusException("Subscriber " + subscriberClass
                     + " and its super classes have no public methods with the @Subscribe annotation");
diff --git a/EventBusPerformance/build.gradle b/EventBusPerformance/build.gradle
index fb2cc52f..626c287c 100644
--- a/EventBusPerformance/build.gradle
+++ b/EventBusPerformance/build.gradle
@@ -1,6 +1,7 @@
 buildscript {
     repositories {
         jcenter()
+        google()
     }
 
     dependencies {
diff --git a/EventBusTest/build.gradle b/EventBusTest/build.gradle
index ab6b884c..abd9ea00 100644
--- a/EventBusTest/build.gradle
+++ b/EventBusTest/build.gradle
@@ -1,6 +1,7 @@
 buildscript {
     repositories {
         jcenter()
+        google()
     }
 
     dependencies {
diff --git a/EventBusTestJava/build.gradle b/EventBusTestJava/build.gradle
index 5fec7913..3022e72e 100644
--- a/EventBusTestJava/build.gradle
+++ b/EventBusTestJava/build.gradle
@@ -4,7 +4,7 @@ buildscript {
     }
 
     dependencies {
-        classpath "net.ltgt.gradle:gradle-apt-plugin:0.12"
+        classpath "net.ltgt.gradle:gradle-apt-plugin:0.15"
     }
 }
 
diff --git a/eventbusexample/.gitignore b/eventbusexample/.gitignore
new file mode 100644
index 00000000..796b96d1
--- /dev/null
+++ b/eventbusexample/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/eventbusexample/build.gradle b/eventbusexample/build.gradle
new file mode 100644
index 00000000..e0198201
--- /dev/null
+++ b/eventbusexample/build.gradle
@@ -0,0 +1,47 @@
+apply plugin: 'com.android.application'
+buildscript {
+    repositories {
+        jcenter()
+        google()
+    }
+
+    dependencies {
+        classpath 'com.android.tools.build:gradle:3.1.1'
+    }
+}
+android {
+    compileSdkVersion 26
+    buildToolsVersion "27.0.3"
+
+
+    defaultConfig {
+        applicationId "com.tools.interesting.eventbusexample"
+        minSdkVersion 23
+        targetSdkVersion 26
+        versionCode 1
+        versionName "1.0"
+
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile 'com.android.support:appcompat-v7:26.1.0'
+    compile 'com.android.support.constraint:constraint-layout:1.0.2'
+    testCompile 'junit:junit:4.12'
+    androidTestCompile('com.android.support.test.espresso:espresso-core:3.0.1', {
+        exclude group: 'com.android.support', module: 'support-annotations'
+    })
+
+    compile project(path: ':eventbus')
+}
diff --git a/eventbusexample/proguard-rules.pro b/eventbusexample/proguard-rules.pro
new file mode 100644
index 00000000..f1b42451
--- /dev/null
+++ b/eventbusexample/proguard-rules.pro
@@ -0,0 +1,21 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
diff --git a/eventbusexample/src/androidTest/java/com/tools/interesting/eventbusexample/ExampleInstrumentedTest.java b/eventbusexample/src/androidTest/java/com/tools/interesting/eventbusexample/ExampleInstrumentedTest.java
new file mode 100644
index 00000000..d3a97a9c
--- /dev/null
+++ b/eventbusexample/src/androidTest/java/com/tools/interesting/eventbusexample/ExampleInstrumentedTest.java
@@ -0,0 +1,26 @@
+package com.tools.interesting.eventbusexample;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumented test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+    @Test
+    public void useAppContext() throws Exception {
+        // Context of the app under test.
+        Context appContext = InstrumentationRegistry.getTargetContext();
+
+        assertEquals("com.tools.interesting.eventbusexample", appContext.getPackageName());
+    }
+}
diff --git a/eventbusexample/src/main/AndroidManifest.xml b/eventbusexample/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..8afe345c
--- /dev/null
+++ b/eventbusexample/src/main/AndroidManifest.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.tools.interesting.eventbusexample">
+
+    <application
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:roundIcon="@mipmap/ic_launcher_round"
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme">
+        <activity android:name=".MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
\ No newline at end of file
diff --git a/eventbusexample/src/main/java/com/tools/interesting/eventbusexample/EventTypeSecond.java b/eventbusexample/src/main/java/com/tools/interesting/eventbusexample/EventTypeSecond.java
new file mode 100644
index 00000000..84294881
--- /dev/null
+++ b/eventbusexample/src/main/java/com/tools/interesting/eventbusexample/EventTypeSecond.java
@@ -0,0 +1,11 @@
+package com.tools.interesting.eventbusexample;
+
+public class EventTypeSecond {
+    private String msg;
+    public EventTypeSecond(String msg){
+        this.msg = msg;
+    }
+    public String getMsg(){
+        return msg;
+    }
+}
diff --git a/eventbusexample/src/main/java/com/tools/interesting/eventbusexample/MainActivity.java b/eventbusexample/src/main/java/com/tools/interesting/eventbusexample/MainActivity.java
new file mode 100644
index 00000000..bb5816b6
--- /dev/null
+++ b/eventbusexample/src/main/java/com/tools/interesting/eventbusexample/MainActivity.java
@@ -0,0 +1,62 @@
+package com.tools.interesting.eventbusexample;
+
+import android.support.v7.app.AppCompatActivity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Toast;
+
+import org.greenrobot.eventbus.EventBus;
+import org.greenrobot.eventbus.Subscribe;
+import org.greenrobot.eventbus.ThreadMode;
+
+public class MainActivity extends AppCompatActivity {
+
+    private int count = 0;
+    private ThreadModeFunction threadModeFunction;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+        threadModeFunction = new ThreadModeFunction();
+    }
+
+
+    @Override
+    public void onStart() {
+        super.onStart();
+    }
+
+    @Override
+    public void onStop() {
+        super.onStop();
+    }
+
+
+    public void eventRegister(View view){
+        threadModeFunction.registerOn();
+    }
+    public void eventUnregister(View view){
+        threadModeFunction.unregisterOff();
+    }
+    public void sendMain(View view){
+        count++;
+        EventBus.getDefault().post(new MessageEvent("sendMain : "+count));
+    }
+    public void sendPosting(View view){
+        count++;
+        EventBus.getDefault().post(new EventTypeSecond("sendPosting : "+count));
+    }
+    public void sendMainOrdered(View view){
+        count++;
+        EventBus.getDefault().post(new MessageEvent("sendMainOrdered : "+count));
+    }
+    public void sendBackground(View view){
+        count++;
+        EventBus.getDefault().post(new MessageEvent("sendBackground : "+count));
+    }
+    public void sendAsync(View view){
+        count++;
+        EventBus.getDefault().post(new MessageEvent("sendAsync : "+count));
+    }
+
+}
diff --git a/eventbusexample/src/main/java/com/tools/interesting/eventbusexample/MessageEvent.java b/eventbusexample/src/main/java/com/tools/interesting/eventbusexample/MessageEvent.java
new file mode 100644
index 00000000..8063f2c0
--- /dev/null
+++ b/eventbusexample/src/main/java/com/tools/interesting/eventbusexample/MessageEvent.java
@@ -0,0 +1,14 @@
+package com.tools.interesting.eventbusexample;
+
+/**
+ * Created by fhw on 2018/4/10.
+ */
+
+public class MessageEvent {
+
+    public final String message;
+
+    public MessageEvent(String message) {
+        this.message = message;
+    }
+}
diff --git a/eventbusexample/src/main/java/com/tools/interesting/eventbusexample/ThreadModeFunction.java b/eventbusexample/src/main/java/com/tools/interesting/eventbusexample/ThreadModeFunction.java
new file mode 100644
index 00000000..14d016c8
--- /dev/null
+++ b/eventbusexample/src/main/java/com/tools/interesting/eventbusexample/ThreadModeFunction.java
@@ -0,0 +1,55 @@
+package com.tools.interesting.eventbusexample;
+
+import android.util.Log;
+
+import org.greenrobot.eventbus.EventBus;
+import org.greenrobot.eventbus.Subscribe;
+import org.greenrobot.eventbus.ThreadMode;
+
+/**
+ * Created by fhw on 2018/4/10.
+ */
+
+public class ThreadModeFunction {
+
+    public static final String TAG = "ThreadModeFunction";
+
+    public void registerOn(){
+        EventBus.getDefault().register(this);
+    }
+    public void unregisterOff(){
+        EventBus.getDefault().unregister(this);
+    }
+
+    // Called in the same thread (default)
+    // ThreadMode is optional here
+    @Subscribe(threadMode = ThreadMode.POSTING, sticky = true)
+    public void onMessage(EventTypeSecond eventTypeSecond) {
+        Log.d(TAG, eventTypeSecond.getMsg());
+    }
+
+
+    // Called in Android UI's main thread
+    @Subscribe(threadMode = ThreadMode.MAIN_ORDERED)
+    public void onMessage1(MessageEvent event) {
+        Log.d(TAG, event.message);
+    }
+
+    // Called in the background thread
+    @Subscribe(threadMode = ThreadMode.BACKGROUND)
+    public void onMessage2(MessageEvent event){
+        Log.d(TAG, event.message);
+    }
+
+    // Called in a separate thread
+    @Subscribe(threadMode = ThreadMode.ASYNC)
+    public void onMessage3(MessageEvent event){
+        Log.d(TAG, event.message);
+    }
+
+    // Called in Android UI's main thread
+    @Subscribe(threadMode = ThreadMode.MAIN)
+    public void onMessage4(MessageEvent event) {
+        Log.d(TAG, event.message);
+    }
+}
diff --git a/eventbusexample/src/main/res/drawable-v24/ic_launcher_foreground.xml b/eventbusexample/src/main/res/drawable-v24/ic_launcher_foreground.xml
new file mode 100644
index 00000000..c7bd21db
--- /dev/null
+++ b/eventbusexample/src/main/res/drawable-v24/ic_launcher_foreground.xml
@@ -0,0 +1,34 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:aapt="http://schemas.android.com/aapt"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportHeight="108"
+    android:viewportWidth="108">
+    <path
+        android:fillType="evenOdd"
+        android:pathData="M32,64C32,64 38.39,52.99 44.13,50.95C51.37,48.37 70.14,49.57 70.14,49.57L108.26,87.69L108,109.01L75.97,107.97L32,64Z"
+        android:strokeColor="#00000000"
+        android:strokeWidth="1">
+        <aapt:attr name="android:fillColor">
+            <gradient
+                android:endX="78.5885"
+                android:endY="90.9159"
+                android:startX="48.7653"
+                android:startY="61.0927"
+                android:type="linear">
+                <item
+                    android:color="#44000000"
+                    android:offset="0.0" />
+                <item
+                    android:color="#00000000"
+                    android:offset="1.0" />
+            </gradient>
+        </aapt:attr>
+    </path>
+    <path
+        android:fillColor="#FFFFFF"
+        android:fillType="nonZero"
+        android:pathData="M66.94,46.02L66.94,46.02C72.44,50.07 76,56.61 76,64L32,64C32,56.61 35.56,50.11 40.98,46.06L36.18,41.19C35.45,40.45 35.45,39.3 36.18,38.56C36.91,37.81 38.05,37.81 38.78,38.56L44.25,44.05C47.18,42.57 50.48,41.71 54,41.71C57.48,41.71 60.78,42.57 63.68,44.05L69.11,38.56C69.84,37.81 70.98,37.81 71.71,38.56C72.44,39.3 72.44,40.45 71.71,41.19L66.94,46.02ZM62.94,56.92C64.08,56.92 65,56.01 65,54.88C65,53.76 64.08,52.85 62.94,52.85C61.8,52.85 60.88,53.76 60.88,54.88C60.88,56.01 61.8,56.92 62.94,56.92ZM45.06,56.92C46.2,56.92 47.13,56.01 47.13,54.88C47.13,53.76 46.2,52.85 45.06,52.85C43.92,52.85 43,53.76 43,54.88C43,56.01 43.92,56.92 45.06,56.92Z"
+        android:strokeColor="#00000000"
+        android:strokeWidth="1" />
+</vector>
diff --git a/eventbusexample/src/main/res/drawable/ic_launcher_background.xml b/eventbusexample/src/main/res/drawable/ic_launcher_background.xml
new file mode 100644
index 00000000..d5fccc53
--- /dev/null
+++ b/eventbusexample/src/main/res/drawable/ic_launcher_background.xml
@@ -0,0 +1,170 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportHeight="108"
+    android:viewportWidth="108">
+    <path
+        android:fillColor="#26A69A"
+        android:pathData="M0,0h108v108h-108z" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M9,0L9,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,0L19,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,0L29,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,0L39,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,0L49,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,0L59,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,0L69,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,0L79,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M89,0L89,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M99,0L99,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,9L108,9"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,19L108,19"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,29L108,29"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,39L108,39"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,49L108,49"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,59L108,59"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,69L108,69"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,79L108,79"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,89L108,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,99L108,99"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,29L89,29"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,39L89,39"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,49L89,49"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,59L89,59"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,69L89,69"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,79L89,79"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,19L29,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,19L39,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,19L49,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,19L59,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,19L69,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,19L79,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+</vector>
diff --git a/eventbusexample/src/main/res/layout/activity_main.xml b/eventbusexample/src/main/res/layout/activity_main.xml
new file mode 100644
index 00000000..5075e1bb
--- /dev/null
+++ b/eventbusexample/src/main/res/layout/activity_main.xml
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context="com.tools.interesting.eventbusexample.MainActivity">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical"
+        tools:layout_editor_absoluteY="8dp">
+
+        <Button
+            android:id="@+id/button2"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:onClick="sendAsync"
+            android:text="sendAsync"
+            tools:layout_editor_absoluteX="148dp"
+            tools:layout_editor_absoluteY="82dp" />
+
+        <Button
+            android:id="@+id/button3"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:onClick="sendBackground"
+            android:text="sendBackground"
+            tools:layout_editor_absoluteX="147dp"
+            tools:layout_editor_absoluteY="149dp" />
+
+        <Button
+            android:id="@+id/button4"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:onClick="sendMain"
+            android:text="sendMain"
+            tools:layout_editor_absoluteX="148dp"
+            tools:layout_editor_absoluteY="212dp" />
+
+        <Button
+            android:id="@+id/button5"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:onClick="sendMainOrdered"
+            android:text="sendMainOrdered"
+            tools:layout_editor_absoluteX="148dp"
+            tools:layout_editor_absoluteY="282dp" />
+
+        <Button
+            android:id="@+id/button6"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:onClick="sendPosting"
+            android:text="sendPosting"
+            tools:layout_editor_absoluteX="147dp"
+            tools:layout_editor_absoluteY="16dp" />
+
+        <Button
+            android:id="@+id/button"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:onClick="eventRegister"
+            android:text="eventRegister" />
+
+        <Button
+            android:id="@+id/button7"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:onClick="eventUnregister"
+            android:text="eventUnregister" />
+
+
+    </LinearLayout>
+
+</android.support.constraint.ConstraintLayout>
diff --git a/eventbusexample/src/main/res/mipmap-anydpi-v26/ic_launcher.xml b/eventbusexample/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
new file mode 100644
index 00000000..eca70cfe
--- /dev/null
+++ b/eventbusexample/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/eventbusexample/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml b/eventbusexample/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
new file mode 100644
index 00000000..eca70cfe
--- /dev/null
+++ b/eventbusexample/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/eventbusexample/src/main/res/mipmap-hdpi/ic_launcher.png b/eventbusexample/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 00000000..a2f59082
Binary files /dev/null and b/eventbusexample/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/eventbusexample/src/main/res/mipmap-hdpi/ic_launcher_round.png b/eventbusexample/src/main/res/mipmap-hdpi/ic_launcher_round.png
new file mode 100644
index 00000000..1b523998
Binary files /dev/null and b/eventbusexample/src/main/res/mipmap-hdpi/ic_launcher_round.png differ
diff --git a/eventbusexample/src/main/res/mipmap-mdpi/ic_launcher.png b/eventbusexample/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 00000000..ff10afd6
Binary files /dev/null and b/eventbusexample/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/eventbusexample/src/main/res/mipmap-mdpi/ic_launcher_round.png b/eventbusexample/src/main/res/mipmap-mdpi/ic_launcher_round.png
new file mode 100644
index 00000000..115a4c76
Binary files /dev/null and b/eventbusexample/src/main/res/mipmap-mdpi/ic_launcher_round.png differ
diff --git a/eventbusexample/src/main/res/mipmap-xhdpi/ic_launcher.png b/eventbusexample/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 00000000..dcd3cd80
Binary files /dev/null and b/eventbusexample/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/eventbusexample/src/main/res/mipmap-xhdpi/ic_launcher_round.png b/eventbusexample/src/main/res/mipmap-xhdpi/ic_launcher_round.png
new file mode 100644
index 00000000..459ca609
Binary files /dev/null and b/eventbusexample/src/main/res/mipmap-xhdpi/ic_launcher_round.png differ
diff --git a/eventbusexample/src/main/res/mipmap-xxhdpi/ic_launcher.png b/eventbusexample/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 00000000..8ca12fe0
Binary files /dev/null and b/eventbusexample/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/eventbusexample/src/main/res/mipmap-xxhdpi/ic_launcher_round.png b/eventbusexample/src/main/res/mipmap-xxhdpi/ic_launcher_round.png
new file mode 100644
index 00000000..8e19b410
Binary files /dev/null and b/eventbusexample/src/main/res/mipmap-xxhdpi/ic_launcher_round.png differ
diff --git a/eventbusexample/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/eventbusexample/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 00000000..b824ebdd
Binary files /dev/null and b/eventbusexample/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/eventbusexample/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png b/eventbusexample/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png
new file mode 100644
index 00000000..4c19a13c
Binary files /dev/null and b/eventbusexample/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png differ
diff --git a/eventbusexample/src/main/res/values/colors.xml b/eventbusexample/src/main/res/values/colors.xml
new file mode 100644
index 00000000..3ab3e9cb
--- /dev/null
+++ b/eventbusexample/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+</resources>
diff --git a/eventbusexample/src/main/res/values/strings.xml b/eventbusexample/src/main/res/values/strings.xml
new file mode 100644
index 00000000..8835c864
--- /dev/null
+++ b/eventbusexample/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">EventBus Example</string>
+</resources>
diff --git a/eventbusexample/src/main/res/values/styles.xml b/eventbusexample/src/main/res/values/styles.xml
new file mode 100644
index 00000000..5885930d
--- /dev/null
+++ b/eventbusexample/src/main/res/values/styles.xml
@@ -0,0 +1,11 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+</resources>
diff --git a/eventbusexample/src/test/java/com/tools/interesting/eventbusexample/ExampleUnitTest.java b/eventbusexample/src/test/java/com/tools/interesting/eventbusexample/ExampleUnitTest.java
new file mode 100644
index 00000000..d7826069
--- /dev/null
+++ b/eventbusexample/src/test/java/com/tools/interesting/eventbusexample/ExampleUnitTest.java
@@ -0,0 +1,17 @@
+package com.tools.interesting.eventbusexample;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index bf1b63c3..ea664ee3 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,5 +1,6 @@
+#Wed Apr 11 21:05:00 CST 2018
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.4-all.zip
diff --git a/settings.gradle b/settings.gradle
index c25cd47e..ed9d69db 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,4 +1,4 @@
-include ':EventBus'
+include ':EventBus', ':eventbusexample'
 include ':EventBusAnnotationProcessor'
 include ':EventBusTestJava'
 include ':EventBusTest'
