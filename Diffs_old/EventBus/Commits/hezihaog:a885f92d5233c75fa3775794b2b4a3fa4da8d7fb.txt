diff --git a/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java
index f6d0c160..ca86110c 100644
--- a/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java
+++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java
@@ -17,7 +17,7 @@
 
 
 /**
- * 子线程执行器，实现了Runnable,、Poster接口
+ * 子线程并发执行器，实现了Runnable,、Poster接口
  */
 class AsyncPoster implements Runnable, Poster {
     /**
diff --git a/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java
index 8a46f93a..6c38c2ee 100644
--- a/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java
+++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java
@@ -18,7 +18,7 @@
 import java.util.logging.Level;
 
 /**
- * 子线程回调事件订阅的发送器，实现了Runnable和Poster接口
+ * 子线程串行回调事件订阅的发送器，实现了Runnable和Poster接口
  */
 final class BackgroundPoster implements Runnable, Poster {
     /**
diff --git a/EventBus/src/org/greenrobot/eventbus/EventBus.java b/EventBus/src/org/greenrobot/eventbus/EventBus.java
index d3f8f942..4ad9e0e8 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBus.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java
@@ -91,7 +91,7 @@ protected PostingThreadState initialValue() {
     private final Logger logger;
 
     /**
-     * Convenience singleton for apps using a process-wide EventBus instance.
+     * Double Check 方式单例
      */
     public static EventBus getDefault() {
         EventBus instance = defaultInstance;
@@ -106,6 +106,9 @@ public static EventBus getDefault() {
         return instance;
     }
 
+    /**
+     * 自定义配置EventBus实例
+     */
     public static EventBusBuilder builder() {
         return new EventBusBuilder();
     }
@@ -442,7 +445,7 @@ public boolean hasSubscriberForEvent(Class<?> eventClass) {
     }
 
     /**
-     * 发送单个事件
+     * 发送一个事件
      *
      * @param event        事件对象
      * @param postingState 发送状态
@@ -456,9 +459,11 @@ private void postSingleEvent(Object event, PostingThreadState postingState) thro
             int countTypes = eventTypes.size();
             for (int h = 0; h < countTypes; h++) {
                 Class<?> clazz = eventTypes.get(h);
+                //发送事件
                 subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);
             }
         } else {
+            //发送事件
             subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);
         }
         //处理没有订阅者的情况
@@ -519,7 +524,7 @@ private boolean postSingleEventForEventType(Object event, PostingThreadState pos
     /**
      * 发送事件到订阅者
      *
-     * @param subscription 订阅嘻嘻
+     * @param subscription 订阅信息
      * @param event        事件类型
      * @param isMainThread 当时是否在主线程
      */
diff --git a/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
index 3e2b5c9c..c88629e2 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java
@@ -26,8 +26,7 @@
 import java.util.concurrent.Executors;
 
 /**
- * Creates EventBus instances with custom parameters and also allows to install a custom default EventBus instance.
- * Create a new builder using {@link EventBus#builder()}.
+ * EventBus实例自定义Builder配置
  */
 public class EventBusBuilder {
     private final static ExecutorService DEFAULT_EXECUTOR_SERVICE = Executors.newCachedThreadPool();
@@ -49,25 +48,33 @@
     EventBusBuilder() {
     }
 
-    /** Default: true */
+    /**
+     * Default: true
+     */
     public EventBusBuilder logSubscriberExceptions(boolean logSubscriberExceptions) {
         this.logSubscriberExceptions = logSubscriberExceptions;
         return this;
     }
 
-    /** Default: true */
+    /**
+     * Default: true
+     */
     public EventBusBuilder logNoSubscriberMessages(boolean logNoSubscriberMessages) {
         this.logNoSubscriberMessages = logNoSubscriberMessages;
         return this;
     }
 
-    /** Default: true */
+    /**
+     * Default: true
+     */
     public EventBusBuilder sendSubscriberExceptionEvent(boolean sendSubscriberExceptionEvent) {
         this.sendSubscriberExceptionEvent = sendSubscriberExceptionEvent;
         return this;
     }
 
-    /** Default: true */
+    /**
+     * Default: true
+     */
     public EventBusBuilder sendNoSubscriberEvent(boolean sendNoSubscriberEvent) {
         this.sendNoSubscriberEvent = sendNoSubscriberEvent;
         return this;
@@ -100,8 +107,7 @@ public EventBusBuilder eventInheritance(boolean eventInheritance) {
 
 
     /**
-     * Provide a custom thread pool to EventBus used for async and background event delivery. This is an advanced
-     * setting to that can break things: ensure the given ExecutorService won't get stuck to avoid undefined behavior.
+     * 配置子线程执行的线程池执行器
      */
     public EventBusBuilder executorService(ExecutorService executorService) {
         this.executorService = executorService;
@@ -121,19 +127,25 @@ public EventBusBuilder skipMethodVerificationFor(Class<?> clazz) {
         return this;
     }
 
-    /** Forces the use of reflection even if there's a generated index (default: false). */
+    /**
+     * Forces the use of reflection even if there's a generated index (default: false).
+     */
     public EventBusBuilder ignoreGeneratedIndex(boolean ignoreGeneratedIndex) {
         this.ignoreGeneratedIndex = ignoreGeneratedIndex;
         return this;
     }
 
-    /** Enables strict method verification (default: false). */
+    /**
+     * Enables strict method verification (default: false).
+     */
     public EventBusBuilder strictMethodVerification(boolean strictMethodVerification) {
         this.strictMethodVerification = strictMethodVerification;
         return this;
     }
 
-    /** Adds an index generated by EventBus' annotation preprocessor. */
+    /**
+     * Adds an index generated by EventBus' annotation preprocessor.
+     */
     public EventBusBuilder addIndex(SubscriberInfoIndex index) {
         if (subscriberInfoIndexes == null) {
             subscriberInfoIndexes = new ArrayList<>();
@@ -187,10 +199,8 @@ Object getAndroidMainLooperOrNull() {
     }
 
     /**
-     * Installs the default EventBus returned by {@link EventBus#getDefault()} using this builders' values. Must be
-     * done only once before the first usage of the default EventBus.
-     *
-     * @throws EventBusException if there's already a default EventBus instance in place
+     * 将生成的实例安装到默认实例，后续则可以使用getDefault()获取回这个实例，注意只能安装一次
+     * 因此installDefaultEventBus()之前也不能调用getDefault()获取过实例，否则抛出异常
      */
     public EventBus installDefaultEventBus() {
         synchronized (EventBus.class) {
@@ -203,9 +213,10 @@ public EventBus installDefaultEventBus() {
         }
     }
 
-    /** Builds an EventBus based on the current configuration. */
+    /**
+     * 按Builder配置生成EventBus实例
+     */
     public EventBus build() {
         return new EventBus(this);
     }
-
 }
diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
index fb85685c..fde03628 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
@@ -52,6 +52,11 @@
         this.ignoreGeneratedIndex = ignoreGeneratedIndex;
     }
 
+    /**
+     * 查找订阅者的订阅方法，将订阅信息封装在SubscriberMethod类中，多个方法，所以返回值为一个List集合
+     *
+     * @param subscriberClass 订阅者Class
+     */
     List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {
         //先从缓存中查找，有则直接使用
         List<SubscriberMethod> subscriberMethods = METHOD_CACHE.get(subscriberClass);
@@ -82,7 +87,7 @@
      * @param subscriberClass 订阅者Class
      */
     private List<SubscriberMethod> findUsingInfo(Class<?> subscriberClass) {
-        //获取一个查找创建实体
+        //获取当前线程的查找状态
         FindState findState = prepareFindState();
         //初始化一些值
         findState.initForSubscriber(subscriberClass);
@@ -312,6 +317,9 @@ private boolean checkAddWithMethodSignature(Method method, Class<?> eventType) {
             }
         }
 
+        /**
+         * 配置父类Class信息，会自动忽略系统类来提高性能
+         */
         void moveToSuperclass() {
             if (skipSuperClasses) {
                 clazz = null;
@@ -325,5 +333,4 @@ void moveToSuperclass() {
             }
         }
     }
-
 }
