diff --git a/EventBusPerformance/.gitignore b/EventBusPerformance/.gitignore
deleted file mode 100644
index a22392ad..00000000
--- a/EventBusPerformance/.gitignore
+++ /dev/null
@@ -1,2 +0,0 @@
-/bin
-/gen
diff --git a/EventBusPerformance/AndroidManifest.xml b/EventBusPerformance/AndroidManifest.xml
deleted file mode 100644
index af353b5d..00000000
--- a/EventBusPerformance/AndroidManifest.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="org.greenrobot.eventbusperf"
-    android:versionCode="1"
-    android:versionName="2.0.0" >
-
-    <uses-sdk
-        android:minSdkVersion="7"
-        android:targetSdkVersion="17" />
-
-    <uses-feature
-        android:name="android.hardware.touchscreen"
-        android:required="false" />
-
-    <application
-        android:icon="@drawable/ic_launcher"
-        android:label="@string/app_name" >
-        <activity
-            android:name="org.greenrobot.eventbusperf.TestSetupActivity"
-            android:label="@string/app_name" >
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-        <activity
-            android:name="org.greenrobot.eventbusperf.TestRunnerActivity"
-            android:label="@string/app_name"
-            android:process="de.greenrobot.eventperf.benchmark" >
-        </activity>
-    </application>
-
-</manifest>
\ No newline at end of file
diff --git a/EventBusPerformance/build.gradle b/EventBusPerformance/build.gradle
deleted file mode 100644
index fb2cc52f..00000000
--- a/EventBusPerformance/build.gradle
+++ /dev/null
@@ -1,38 +0,0 @@
-buildscript {
-    repositories {
-        jcenter()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:2.3.3'
-    }
-}
-
-apply plugin: 'com.android.application'
-
-dependencies {
-    compile project(':eventbus')
-    annotationProcessor project(':eventbus-annotation-processor')
-    compile 'com.squareup:otto:1.3.8'
-}
-
-android {
-    buildToolsVersion _buildToolsVersion
-    compileSdkVersion _compileSdkVersion
-
-    sourceSets {
-        main {
-            manifest.srcFile 'AndroidManifest.xml'
-            java.srcDirs = ['src']
-            res.srcDirs = ['res']
-        }
-    }
-
-    defaultConfig {
-        javaCompileOptions {
-            annotationProcessorOptions {
-                arguments = [eventBusIndex: 'org.greenrobot.eventbusperf.MyEventBusIndex']
-            }
-        }
-    }
-}
diff --git a/EventBusPerformance/proguard-project.txt b/EventBusPerformance/proguard-project.txt
deleted file mode 100644
index f2fe1559..00000000
--- a/EventBusPerformance/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/EventBusPerformance/project.properties b/EventBusPerformance/project.properties
deleted file mode 100644
index d6659d53..00000000
--- a/EventBusPerformance/project.properties
+++ /dev/null
@@ -1,14 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}\tools\proguard\proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-17
diff --git a/EventBusPerformance/res/drawable-hdpi/ic_launcher.png b/EventBusPerformance/res/drawable-hdpi/ic_launcher.png
deleted file mode 100644
index 96a442e5..00000000
Binary files a/EventBusPerformance/res/drawable-hdpi/ic_launcher.png and /dev/null differ
diff --git a/EventBusPerformance/res/drawable-ldpi/ic_launcher.png b/EventBusPerformance/res/drawable-ldpi/ic_launcher.png
deleted file mode 100644
index 99238729..00000000
Binary files a/EventBusPerformance/res/drawable-ldpi/ic_launcher.png and /dev/null differ
diff --git a/EventBusPerformance/res/drawable-mdpi/ic_launcher.png b/EventBusPerformance/res/drawable-mdpi/ic_launcher.png
deleted file mode 100644
index 359047df..00000000
Binary files a/EventBusPerformance/res/drawable-mdpi/ic_launcher.png and /dev/null differ
diff --git a/EventBusPerformance/res/drawable-xhdpi/ic_launcher.png b/EventBusPerformance/res/drawable-xhdpi/ic_launcher.png
deleted file mode 100644
index 71c6d760..00000000
Binary files a/EventBusPerformance/res/drawable-xhdpi/ic_launcher.png and /dev/null differ
diff --git a/EventBusPerformance/res/layout/activity_runtests.xml b/EventBusPerformance/res/layout/activity_runtests.xml
deleted file mode 100644
index 13656a86..00000000
--- a/EventBusPerformance/res/layout/activity_runtests.xml
+++ /dev/null
@@ -1,54 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical" >
-
-    <TextView
-        android:id="@+id/textViewTestRunning"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_centerInParent="true"
-        android:background="#88333333"
-        android:gravity="center"
-        android:padding="15dp"
-        android:text="@string/testIsRunning"
-        android:textColor="#ffffff"
-        android:textSize="30sp"
-        android:textStyle="bold" />
-
-    <ScrollView
-        android:id="@+id/scrollViewResults"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:layout_above="@+id/buttonCancel"
-        android:fillViewport="true" >
-
-        <TextView
-            android:id="@+id/textViewResult"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:textSize="16sp" />
-    </ScrollView>
-
-    <Button
-        android:id="@+id/buttonCancel"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_above="@+id/buttonKillProcess"
-        android:layout_alignWithParentIfMissing="true"
-        android:layout_margin="16dp"
-        android:onClick="onClickCancel"
-        android:text="@string/buttonCancel" />
-
-    <Button
-        android:id="@+id/buttonKillProcess"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_alignParentBottom="true"
-        android:layout_margin="16dp"
-        android:onClick="onClickKillProcess"
-        android:text="@string/buttonKillProcess"
-        android:visibility="gone" />
-
-</RelativeLayout>
\ No newline at end of file
diff --git a/EventBusPerformance/res/layout/activity_setuptests.xml b/EventBusPerformance/res/layout/activity_setuptests.xml
deleted file mode 100644
index 27064758..00000000
--- a/EventBusPerformance/res/layout/activity_setuptests.xml
+++ /dev/null
@@ -1,145 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/LinearLayout1"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:focusableInTouchMode="true"
-    android:orientation="vertical" >
-
-    <Spinner
-        android:id="@+id/spinnerTestToRun"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_margin="14dp"
-        android:entries="@array/spinnerTestsToRun" />
-
-    <ScrollView
-        android:id="@+id/scrollViewSettings"
-        android:layout_width="fill_parent"
-        android:layout_height="0dp"
-        android:layout_weight="1" >
-
-        <LinearLayout
-            android:id="@+id/LinearLayout2"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:orientation="vertical"
-            android:paddingLeft="16dp"
-            android:paddingRight="16dp" >
-
-            <CheckBox
-                android:id="@+id/checkBoxEventBus"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:checked="true"
-                android:onClick="checkEventBus"
-                android:text="@string/test_eventBus" />
-
-            <Spinner
-                android:id="@+id/spinnerThread"
-                android:layout_width="fill_parent"
-                android:layout_height="wrap_content"
-                android:layout_marginLeft="48dp"
-                android:entries="@array/spinnerThreadModes" />
-
-            <CheckBox
-                android:id="@+id/checkBoxEventBusEventHierarchy"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:checked="true"
-                android:onClick="checkEventBus"
-                android:layout_marginLeft="48dp"
-                android:text="@string/test_eventBusEventHierarchy" />
-
-            <CheckBox
-                android:id="@+id/checkBoxEventBusIgnoreGeneratedIndex"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:onClick="checkEventBus"
-                android:layout_marginLeft="48dp"
-                android:text="@string/test_eventBusEventIgnoreGeneratedIndex" />
-
-            <CheckBox
-                android:id="@+id/checkBoxOtto"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:checked="true"
-                android:layout_marginTop="16dp"
-                android:text="@string/test_otto" />
-
-
-            <CheckBox
-                android:id="@+id/checkBoxBroadcast"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:text="@string/test_broadcast"
-                android:visibility="gone" />
-
-
-            <CheckBox
-                android:id="@+id/checkBoxLocalBroadcast"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginBottom="32dp"
-                android:text="@string/test_localBroadcast"
-                android:visibility="gone" />
-
-            <RelativeLayout
-                android:id="@+id/relativeLayoutForEvents"
-                android:layout_width="fill_parent"
-                android:layout_height="fill_parent"
-                android:layout_marginBottom="18dp" >
-
-                <EditText
-                    android:id="@+id/editTextEvent"
-                    android:layout_width="90dp"
-                    android:layout_height="wrap_content"
-                    android:layout_alignParentRight="true"
-                    android:inputType="number"
-                    android:text="1000" />
-
-                <TextView
-                    android:id="@+id/eventView"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:layout_alignBaseline="@+id/editTextEvent"
-                    android:layout_alignParentLeft="true"
-                    android:layout_toLeftOf="@+id/editTextEvent"
-                    android:text="@string/eventViewText" />
-            </RelativeLayout>
-
-            <RelativeLayout
-                android:id="@+id/relativeLayoutForSubscribers"
-                android:layout_width="fill_parent"
-                android:layout_height="fill_parent"
-                android:layout_marginBottom="8dp" >
-
-                <EditText
-                    android:id="@+id/editTextSubscribe"
-                    android:layout_width="90dp"
-                    android:layout_height="wrap_content"
-                    android:layout_alignParentRight="true"
-                    android:inputType="number"
-                    android:text="1" />
-
-                <TextView
-                    android:id="@+id/subscribe"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:layout_alignBaseline="@+id/editTextSubscribe"
-                    android:layout_alignParentLeft="true"
-                    android:layout_toLeftOf="@+id/editTextSubscribe"
-                    android:text="@string/subscriberViewText" />
-            </RelativeLayout>
-        </LinearLayout>
-    </ScrollView>
-
-    <Button
-        android:id="@+id/buttonStart"
-        android:layout_width="fill_parent"
-        android:layout_height="50dp"
-        android:layout_margin="16dp"
-        android:onClick="startClick"
-        android:text="@string/buttonStartText" />
-
-</LinearLayout>
\ No newline at end of file
diff --git a/EventBusPerformance/res/values/strings.xml b/EventBusPerformance/res/values/strings.xml
deleted file mode 100644
index 49148076..00000000
--- a/EventBusPerformance/res/values/strings.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-
-    <string name="app_name">EventBus Performance</string>
-    <string name="test_eventBus">EventBus</string>
-    <string name="test_eventBusEventHierarchy">Event Inheritance</string>
-    <string name="test_eventBusEventIgnoreGeneratedIndex">Ignore generated index</string>
-    <string name="test_otto">OttoBus</string>
-    <string name="test_broadcast">Broadcast</string>
-    <string name="test_localBroadcast">Local Broadcast</string>
-    <string name="eventViewText">Events:</string>
-    <string name="subscriberViewText">Subscribers:</string>
-    <string name="buttonStartText">Start</string>
-
-    <string-array name="spinnerTestsToRun">
-        <item>Post Events</item>
-        <item>Register Subscribers</item>
-        <item>Register Subscribers, no unregister</item>
-        <item>Register Subscribers, 1. time</item>
-    </string-array>
-    <string-array name="spinnerThreadModes">
-        <item>POSTING</item>
-        <item>MAIN</item>
-        <item>MAIN_ORDERED</item>
-        <item>BACKGROUND</item>
-        <item>ASYNC</item>
-    </string-array>
-
-    <string name="testIsRunning">Test Is \nRunning!</string>
-    <string name="buttonCancel">Cancel</string>
-    <string name="buttonKillProcess">Kill Process</string>
-    
-</resources>
\ No newline at end of file
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/Test.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/Test.java
deleted file mode 100644
index ee2d405d..00000000
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/Test.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbusperf;
-
-import android.content.Context;
-
-import java.util.concurrent.atomic.AtomicLong;
-
-public abstract class Test {
-    protected final Context context;
-    protected final TestParams params;
-    public final AtomicLong eventsReceivedCount = new AtomicLong();
-    protected long primaryResultMicros;
-    protected int primaryResultCount;
-    protected String otherTestResults;
-
-    protected boolean canceled;
-
-    public Test(Context context, TestParams params) {
-        this.context = context;
-        this.params = params;
-    }
-
-    public void cancel() {
-        canceled = true;
-    }
-
-    /** prepares the test, all things which are not relevant for test results */
-    public abstract void prepareTest();
-
-    public abstract void runTest();
-
-    /** returns the display name of the test. e.g. EventBus */
-    public abstract String getDisplayName();
-
-    protected void waitForReceivedEventCount(int expectedEventCount) {
-        while (eventsReceivedCount.get() < expectedEventCount) {
-            try {
-                Thread.sleep(1);
-            } catch (InterruptedException e) {
-                throw new RuntimeException(e);
-            }
-        }
-    }
-
-    public long getPrimaryResultMicros() {
-        return primaryResultMicros;
-    }
-
-    public double getPrimaryResultRate() {
-        return primaryResultCount / (primaryResultMicros / 1000000d);
-    }
-
-    public String getOtherTestResults() {
-        return otherTestResults;
-    }
-
-}
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestEvent.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestEvent.java
deleted file mode 100644
index 8db0db9f..00000000
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestEvent.java
+++ /dev/null
@@ -1,22 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbusperf;
-
-/** Used by otto and EventBus */
-public class TestEvent {
-
-}
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestFinishedEvent.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestFinishedEvent.java
deleted file mode 100644
index 9e1a5594..00000000
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestFinishedEvent.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbusperf;
-
-public class TestFinishedEvent {
-
-    public final Test test;
-    public final boolean isLastEvent;
-
-    public TestFinishedEvent(Test test, boolean isLastEvent) {
-        this.test = test;
-        this.isLastEvent = isLastEvent;
-    }
-}
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestParams.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestParams.java
deleted file mode 100644
index 85ee4f13..00000000
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestParams.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbusperf;
-
-import org.greenrobot.eventbus.ThreadMode;
-
-import java.io.Serializable;
-import java.util.ArrayList;
-
-public class TestParams implements Serializable {
-    private static final long serialVersionUID = -2739435088947740809L;
-
-    private int eventCount;
-    private int subscriberCount;
-    private int publisherCount;
-    private ThreadMode threadMode;
-    private boolean eventInheritance;
-    private boolean ignoreGeneratedIndex;
-    private int testNumber;
-    private ArrayList<Class<? extends Test>> testClasses;
-
-    public int getEventCount() {
-        return eventCount;
-    }
-
-    public void setEventCount(int iterations) {
-        this.eventCount = iterations;
-    }
-
-    public int getSubscriberCount() {
-        return subscriberCount;
-    }
-
-    public void setSubscriberCount(int subscriberCount) {
-        this.subscriberCount = subscriberCount;
-    }
-
-    public int getPublisherCount() {
-        return publisherCount;
-    }
-
-    public void setPublisherCount(int publisherCount) {
-        this.publisherCount = publisherCount;
-    }
-
-    public ThreadMode getThreadMode() {
-        return threadMode;
-    }
-
-    public void setThreadMode(ThreadMode threadMode) {
-        this.threadMode = threadMode;
-    }
-
-    public boolean isEventInheritance() {
-        return eventInheritance;
-    }
-
-    public void setEventInheritance(boolean eventInheritance) {
-        this.eventInheritance = eventInheritance;
-    }
-
-    public boolean isIgnoreGeneratedIndex() {
-        return ignoreGeneratedIndex;
-    }
-
-    public void setIgnoreGeneratedIndex(boolean ignoreGeneratedIndex) {
-        this.ignoreGeneratedIndex = ignoreGeneratedIndex;
-    }
-
-    public ArrayList<Class<? extends Test>> getTestClasses() {
-        return testClasses;
-    }
-
-    public void setTestClasses(ArrayList<Class<? extends Test>> testClasses) {
-        this.testClasses = testClasses;
-    }
-
-    public int getTestNumber() {
-        return testNumber;
-    }
-
-    public void setTestNumber(int testNumber) {
-        this.testNumber = testNumber;
-    }
-
-}
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunner.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunner.java
deleted file mode 100644
index 4c0f941f..00000000
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunner.java
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbusperf;
-
-import android.content.Context;
-
-import org.greenrobot.eventbus.EventBus;
-
-import java.lang.reflect.Constructor;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * This thread initialize all selected tests and runs them through. Also the thread skips the tests, when it is canceled
- */
-public class TestRunner extends Thread {
-    private List<Test> tests;
-    private volatile boolean canceled;
-    private final EventBus controlBus;
-
-    public TestRunner(Context context, TestParams testParams, EventBus controlBus) {
-        this.controlBus = controlBus;
-        tests = new ArrayList<Test>();
-        for (Class<? extends Test> testClazz : testParams.getTestClasses()) {
-            try {
-                Constructor<?>[] constructors = testClazz.getConstructors();
-                Constructor<? extends Test> constructor = testClazz.getConstructor(Context.class, TestParams.class);
-                Test test = constructor.newInstance(context, testParams);
-                tests.add(test);
-            } catch (Exception e) {
-                throw new RuntimeException(e);
-            }
-        }
-    }
-
-    public void run() {
-
-        int idx = 0;
-        for (Test test : tests) {
-            // Clean up and let the main thread calm down
-            System.gc();
-            try {
-                Thread.sleep(300);
-                System.gc();
-                Thread.sleep(300);
-            } catch (InterruptedException e) {
-            }
-
-            test.prepareTest();
-            if (!canceled) {
-                test.runTest();
-            }
-            if (!canceled) {
-                boolean isLastEvent = idx == tests.size() - 1;
-                controlBus.post(new TestFinishedEvent(test, isLastEvent));
-            }
-            idx++;
-        }
-
-    }
-
-    public List<Test> getTests() {
-        return tests;
-    }
-
-    public void cancel() {
-        canceled = true;
-        for (Test test : tests) {
-            test.cancel();
-        }
-    }
-}
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java
deleted file mode 100644
index b21efabf..00000000
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbusperf;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.os.Process;
-import android.text.Html;
-import android.view.View;
-import android.widget.TextView;
-
-import org.greenrobot.eventbus.EventBus;
-import org.greenrobot.eventbus.Subscribe;
-import org.greenrobot.eventbus.ThreadMode;
-
-/**
- * This activity gets the information from the activity before, sets up the test and starts the test. After it watchs
- * after that, if a test is finished. When a test is finished, the activity appends it on the textview analyse. If all
- * test are finished, it cancels the timer.
- */
-public class TestRunnerActivity extends Activity {
-
-    private TestRunner testRunner;
-    private EventBus controlBus;
-    private TextView textViewResult;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_runtests);
-        textViewResult = findViewById(R.id.textViewResult);
-        controlBus = new EventBus();
-        controlBus.register(this);
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        if (testRunner == null) {
-            TestParams testParams = (TestParams) getIntent().getSerializableExtra("params");
-            testRunner = new TestRunner(getApplicationContext(), testParams, controlBus);
-
-            if (testParams.getTestNumber() == 1) {
-                textViewResult.append("Events: " + testParams.getEventCount() + "\n");
-            }
-            textViewResult.append("Subscribers: " + testParams.getSubscriberCount() + "\n\n");
-            testRunner.start();
-        }
-    }
-
-    @Subscribe(threadMode = ThreadMode.MAIN)
-    public void onEventMainThread(TestFinishedEvent event) {
-        Test test = event.test;
-        String text = "<b>" + test.getDisplayName() + "</b><br/>" + //
-                test.getPrimaryResultMicros() + " micro seconds<br/>" + //
-                ((int) test.getPrimaryResultRate()) + "/s<br/>";
-        if (test.getOtherTestResults() != null) {
-            text += test.getOtherTestResults();
-        }
-        text += "<br/>----------------<br/>";
-        textViewResult.append(Html.fromHtml(text));
-        if (event.isLastEvent) {
-            findViewById(R.id.buttonCancel).setVisibility(View.GONE);
-            findViewById(R.id.textViewTestRunning).setVisibility(View.GONE);
-            findViewById(R.id.buttonKillProcess).setVisibility(View.VISIBLE);
-        }
-    }
-
-    public void onClickCancel(View view) {
-        // Cancel asap
-        if (testRunner != null) {
-            testRunner.cancel();
-            testRunner = null;
-        }
-        finish();
-    }
-
-    public void onClickKillProcess(View view) {
-        Process.killProcess(Process.myPid());
-    }
-
-    public void onDestroy() {
-        if (testRunner != null) {
-            testRunner.cancel();
-        }
-        controlBus.unregister(this);
-        super.onDestroy();
-    }
-}
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java
deleted file mode 100644
index 626f8a0b..00000000
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbusperf;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.AdapterView;
-import android.widget.CheckBox;
-import android.widget.EditText;
-import android.widget.Spinner;
-
-import org.greenrobot.eventbus.ThreadMode;
-
-import java.util.ArrayList;
-
-import org.greenrobot.eventbusperf.testsubject.PerfTestEventBus;
-import org.greenrobot.eventbusperf.testsubject.PerfTestOtto;
-
-public class TestSetupActivity extends Activity {
-
-    @SuppressWarnings("rawtypes")
-    static final Class[] TEST_CLASSES_EVENTBUS = {PerfTestEventBus.Post.class,//
-            PerfTestEventBus.RegisterOneByOne.class,//
-            PerfTestEventBus.RegisterAll.class, //
-            PerfTestEventBus.RegisterFirstTime.class};
-
-    static final Class[] TEST_CLASSES_OTTO = {PerfTestOtto.Post.class,//
-            PerfTestOtto.RegisterOneByOne.class,//
-            PerfTestOtto.RegisterAll.class, //
-            PerfTestOtto.RegisterFirstTime.class};
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_setuptests);
-
-        Spinner spinnerRun = findViewById(R.id.spinnerTestToRun);
-        spinnerRun.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
-
-            public void onItemSelected(AdapterView<?> adapter, View v, int pos, long lng) {
-                int eventsVisibility = pos == 0 ? View.VISIBLE : View.GONE;
-                findViewById(R.id.relativeLayoutForEvents).setVisibility(eventsVisibility);
-                findViewById(R.id.spinnerThread).setVisibility(eventsVisibility);
-            }
-
-            public void onNothingSelected(AdapterView<?> arg0) {
-            }
-        });
-    }
-
-    public void checkEventBus(View v) {
-        Spinner spinnerThread = findViewById(R.id.spinnerThread);
-        CheckBox checkBoxEventBus = findViewById(R.id.checkBoxEventBus);
-        int visibility = checkBoxEventBus.isChecked() ? View.VISIBLE : View.GONE;
-        spinnerThread.setVisibility(visibility);
-    }
-
-    public void startClick(View v) {
-        TestParams params = new TestParams();
-        Spinner spinnerThread = findViewById(R.id.spinnerThread);
-        String threadModeStr = spinnerThread.getSelectedItem().toString();
-        ThreadMode threadMode = ThreadMode.valueOf(threadModeStr);
-        params.setThreadMode(threadMode);
-
-        params.setEventInheritance(((CheckBox) findViewById(R.id.checkBoxEventBusEventHierarchy)).isChecked());
-        params.setIgnoreGeneratedIndex(((CheckBox) findViewById(R.id.checkBoxEventBusIgnoreGeneratedIndex)).isChecked());
-
-        EditText editTextEvent = findViewById(R.id.editTextEvent);
-        params.setEventCount(Integer.parseInt(editTextEvent.getText().toString()));
-
-        EditText editTextSubscriber = findViewById(R.id.editTextSubscribe);
-        params.setSubscriberCount(Integer.parseInt(editTextSubscriber.getText().toString()));
-
-        Spinner spinnerTestToRun = findViewById(R.id.spinnerTestToRun);
-        int testPos = spinnerTestToRun.getSelectedItemPosition();
-        params.setTestNumber(testPos + 1);
-        ArrayList<Class<? extends Test>> testClasses = initTestClasses(testPos);
-        params.setTestClasses(testClasses);
-
-        Intent intent = new Intent();
-        intent.setClass(this, TestRunnerActivity.class);
-        intent.putExtra("params", params);
-        startActivity(intent);
-    }
-
-    @SuppressWarnings("unchecked")
-    private ArrayList<Class<? extends Test>> initTestClasses(int testPos) {
-        ArrayList<Class<? extends Test>> testClasses = new ArrayList<Class<? extends Test>>();
-        // the attributes are putted in the intent (eventbus, otto, broadcast, local broadcast)
-        final CheckBox checkBoxEventBus = findViewById(R.id.checkBoxEventBus);
-        final CheckBox checkBoxOtto = findViewById(R.id.checkBoxOtto);
-        final CheckBox checkBoxBroadcast = findViewById(R.id.checkBoxBroadcast);
-        final CheckBox checkBoxLocalBroadcast = findViewById(R.id.checkBoxLocalBroadcast);
-        if (checkBoxEventBus.isChecked()) {
-            testClasses.add(TEST_CLASSES_EVENTBUS[testPos]);
-        }
-        if (checkBoxOtto.isChecked()) {
-            testClasses.add(TEST_CLASSES_OTTO[testPos]);
-        }
-        if (checkBoxBroadcast.isChecked()) {
-        }
-        if (checkBoxLocalBroadcast.isChecked()) {
-        }
-
-        return testClasses;
-    }
-}
\ No newline at end of file
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestEventBus.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestEventBus.java
deleted file mode 100644
index f0a5e2f8..00000000
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestEventBus.java
+++ /dev/null
@@ -1,320 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbusperf.testsubject;
-
-import android.content.Context;
-
-import org.greenrobot.eventbus.EventBus;
-import org.greenrobot.eventbus.Subscribe;
-import org.greenrobot.eventbus.ThreadMode;
-
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-
-import org.greenrobot.eventbusperf.MyEventBusIndex;
-import org.greenrobot.eventbusperf.Test;
-import org.greenrobot.eventbusperf.TestEvent;
-import org.greenrobot.eventbusperf.TestParams;
-
-public abstract class PerfTestEventBus extends Test {
-
-    private final EventBus eventBus;
-    private final ArrayList<Object> subscribers;
-    private final Class<?> subscriberClass;
-    private final int eventCount;
-    private final int expectedEventCount;
-
-    public PerfTestEventBus(Context context, TestParams params) {
-        super(context, params);
-        eventBus = EventBus.builder().eventInheritance(params.isEventInheritance()).addIndex(new MyEventBusIndex())
-                .ignoreGeneratedIndex(params.isIgnoreGeneratedIndex()).build();
-        subscribers = new ArrayList<Object>();
-        eventCount = params.getEventCount();
-        expectedEventCount = eventCount * params.getSubscriberCount();
-        subscriberClass = getSubscriberClassForThreadMode();
-    }
-
-    @Override
-    public void prepareTest() {
-        try {
-            Constructor<?> constructor = subscriberClass.getConstructor(PerfTestEventBus.class);
-            for (int i = 0; i < params.getSubscriberCount(); i++) {
-                Object subscriber = constructor.newInstance(this);
-                subscribers.add(subscriber);
-            }
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    private Class<?> getSubscriberClassForThreadMode() {
-        switch (params.getThreadMode()) {
-            case MAIN:
-                return SubscribeClassEventBusMain.class;
-            case MAIN_ORDERED:
-                return SubscribeClassEventBusMainOrdered.class;
-            case BACKGROUND:
-                return SubscribeClassEventBusBackground.class;
-            case ASYNC:
-                return SubscriberClassEventBusAsync.class;
-            case POSTING:
-                return SubscribeClassEventBusDefault.class;
-            default:
-                throw new RuntimeException("Unknown: " + params.getThreadMode());
-        }
-    }
-
-    private static String getDisplayModifier(TestParams params) {
-        String inheritance = params.isEventInheritance() ? "" : ", no event inheritance";
-        String ignoreIndex = params.isIgnoreGeneratedIndex() ? ", ignore index" : "";
-        return inheritance + ignoreIndex;
-    }
-
-
-    public static class Post extends PerfTestEventBus {
-        public Post(Context context, TestParams params) {
-            super(context, params);
-        }
-
-        @Override
-        public void prepareTest() {
-            super.prepareTest();
-            super.registerSubscribers();
-        }
-
-        public void runTest() {
-            TestEvent event = new TestEvent();
-            long timeStart = System.nanoTime();
-            for (int i = 0; i < super.eventCount; i++) {
-                super.eventBus.post(event);
-                if (canceled) {
-                    break;
-                }
-            }
-            long timeAfterPosting = System.nanoTime();
-            waitForReceivedEventCount(super.expectedEventCount);
-            long timeAllReceived = System.nanoTime();
-
-            primaryResultMicros = (timeAfterPosting - timeStart) / 1000;
-            primaryResultCount = super.expectedEventCount;
-            long deliveredMicros = (timeAllReceived - timeStart) / 1000;
-            int deliveryRate = (int) (primaryResultCount / (deliveredMicros / 1000000d));
-            otherTestResults = "Post and delivery time: " + deliveredMicros + " micros<br/>" + //
-                    "Post and delivery rate: " + deliveryRate + "/s";
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "EventBus Post Events, " + params.getThreadMode() + getDisplayModifier(params);
-        }
-
-    }
-
-    public static class RegisterAll extends PerfTestEventBus {
-        public RegisterAll(Context context, TestParams params) {
-            super(context, params);
-        }
-
-        public void runTest() {
-            super.registerUnregisterOneSubscribers();
-            long timeNanos = super.registerSubscribers();
-            primaryResultMicros = timeNanos / 1000;
-            primaryResultCount = params.getSubscriberCount();
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "EventBus Register, no unregister" + getDisplayModifier(params);
-        }
-    }
-
-    public static class RegisterOneByOne extends PerfTestEventBus {
-        protected Method clearCachesMethod;
-
-        public RegisterOneByOne(Context context, TestParams params) {
-            super(context, params);
-        }
-
-        public void runTest() {
-            long time = 0;
-            if (clearCachesMethod == null) {
-                // Skip first registration unless just the first registration is tested
-                super.registerUnregisterOneSubscribers();
-            }
-            for (Object subscriber : super.subscribers) {
-                if (clearCachesMethod != null) {
-                    try {
-                        clearCachesMethod.invoke(null);
-                    } catch (Exception e) {
-                        throw new RuntimeException(e);
-                    }
-                }
-                long beforeRegister = System.nanoTime();
-                super.eventBus.register(subscriber);
-                long afterRegister = System.nanoTime();
-                long end = System.nanoTime();
-                long timeMeasureOverhead = (end - afterRegister) * 2;
-                long timeRegister = end - beforeRegister - timeMeasureOverhead;
-                time += timeRegister;
-                super.eventBus.unregister(subscriber);
-                if (canceled) {
-                    return;
-                }
-            }
-
-            primaryResultMicros = time / 1000;
-            primaryResultCount = params.getSubscriberCount();
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "EventBus Register" + getDisplayModifier(params);
-        }
-    }
-
-    public static class RegisterFirstTime extends RegisterOneByOne {
-
-        public RegisterFirstTime(Context context, TestParams params) {
-            super(context, params);
-            try {
-                Class<?> clazz = Class.forName("org.greenrobot.eventbus.SubscriberMethodFinder");
-                clearCachesMethod = clazz.getDeclaredMethod("clearCaches");
-                clearCachesMethod.setAccessible(true);
-            } catch (Exception e) {
-                throw new RuntimeException(e);
-            }
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "EventBus Register, first time"+ getDisplayModifier(params);
-        }
-
-    }
-
-    public class SubscribeClassEventBusMain {
-        @Subscribe(threadMode = ThreadMode.MAIN)
-        public void onEventMainThread(TestEvent event) {
-            eventsReceivedCount.incrementAndGet();
-        }
-
-        public void dummy() {
-        }
-
-        public void dummy2() {
-        }
-
-        public void dummy3() {
-        }
-
-        public void dummy4() {
-        }
-
-        public void dummy5() {
-        }
-    }
-
-    public class SubscribeClassEventBusMainOrdered {
-        @Subscribe(threadMode = ThreadMode.MAIN_ORDERED)
-        public void onEvent(TestEvent event) {
-            eventsReceivedCount.incrementAndGet();
-        }
-
-        public void dummy() {
-        }
-
-        public void dummy2() {
-        }
-
-        public void dummy3() {
-        }
-
-        public void dummy4() {
-        }
-
-        public void dummy5() {
-        }
-    }
-
-    public class SubscribeClassEventBusBackground {
-        @Subscribe(threadMode = ThreadMode.BACKGROUND)
-        public void onEventBackgroundThread(TestEvent event) {
-            eventsReceivedCount.incrementAndGet();
-        }
-
-        public void dummy() {
-        }
-
-        public void dummy2() {
-        }
-
-        public void dummy3() {
-        }
-
-        public void dummy4() {
-        }
-
-        public void dummy5() {
-        }
-    }
-
-    public class SubscriberClassEventBusAsync {
-        @Subscribe(threadMode = ThreadMode.ASYNC)
-        public void onEventAsync(TestEvent event) {
-            eventsReceivedCount.incrementAndGet();
-        }
-
-        public void dummy() {
-        }
-
-        public void dummy2() {
-        }
-
-        public void dummy3() {
-        }
-
-        public void dummy4() {
-        }
-
-        public void dummy5() {
-        }
-    }
-
-    private long registerSubscribers() {
-        long time = 0;
-        for (Object subscriber : subscribers) {
-            long timeStart = System.nanoTime();
-            eventBus.register(subscriber);
-            long timeEnd = System.nanoTime();
-            time += timeEnd - timeStart;
-            if (canceled) {
-                return 0;
-            }
-        }
-        return time;
-    }
-
-    private void registerUnregisterOneSubscribers() {
-        if (!subscribers.isEmpty()) {
-            Object subscriber = subscribers.get(0);
-            eventBus.register(subscriber);
-            eventBus.unregister(subscriber);
-        }
-    }
-
-}
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestOtto.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestOtto.java
deleted file mode 100644
index 646256ed..00000000
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestOtto.java
+++ /dev/null
@@ -1,233 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbusperf.testsubject;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Looper;
-
-import com.squareup.otto.Bus;
-import com.squareup.otto.Subscribe;
-import com.squareup.otto.ThreadEnforcer;
-
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.concurrent.ConcurrentHashMap;
-
-import org.greenrobot.eventbusperf.Test;
-import org.greenrobot.eventbusperf.TestEvent;
-import org.greenrobot.eventbusperf.TestParams;
-
-public abstract class PerfTestOtto extends Test {
-
-    private final Bus eventBus;
-    private final ArrayList<Object> subscribers;
-    private final Class<?> subscriberClass;
-    private final int eventCount;
-    private final int expectedEventCount;
-
-    public PerfTestOtto(Context context, TestParams params) {
-        super(context, params);
-        eventBus = new Bus(ThreadEnforcer.ANY);
-        subscribers = new ArrayList<Object>();
-        eventCount = params.getEventCount();
-        expectedEventCount = eventCount * params.getSubscriberCount();
-        subscriberClass = Subscriber.class;
-    }
-
-    @Override
-    public void prepareTest() {
-        Looper.prepare();
-
-        try {
-            Constructor<?> constructor = subscriberClass.getConstructor(PerfTestOtto.class);
-            for (int i = 0; i < params.getSubscriberCount(); i++) {
-                Object subscriber = constructor.newInstance(this);
-                subscribers.add(subscriber);
-            }
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    public static class Post extends PerfTestOtto {
-        public Post(Context context, TestParams params) {
-            super(context, params);
-        }
-
-        @Override
-        public void prepareTest() {
-            super.prepareTest();
-            super.registerSubscribers();
-        }
-
-        public void runTest() {
-            TestEvent event = new TestEvent();
-            long timeStart = System.nanoTime();
-            for (int i = 0; i < super.eventCount; i++) {
-                super.eventBus.post(event);
-                if (canceled) {
-                    break;
-                }
-            }
-            long timeAfterPosting = System.nanoTime();
-            waitForReceivedEventCount(super.expectedEventCount);
-
-            primaryResultMicros = (timeAfterPosting - timeStart) / 1000;
-            primaryResultCount = super.expectedEventCount;
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "Otto Post Events";
-        }
-    }
-
-    public static class RegisterAll extends PerfTestOtto {
-        public RegisterAll(Context context, TestParams params) {
-            super(context, params);
-        }
-
-        public void runTest() {
-            super.registerUnregisterOneSubscribers();
-            long timeNanos = super.registerSubscribers();
-            primaryResultMicros = timeNanos / 1000;
-            primaryResultCount = params.getSubscriberCount();
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "Otto Register, no unregister";
-        }
-    }
-
-    public static class RegisterOneByOne extends PerfTestOtto {
-        protected Field cacheField;
-
-        public RegisterOneByOne(Context context, TestParams params) {
-            super(context, params);
-        }
-
-        @SuppressWarnings("rawtypes")
-        public void runTest() {
-            long time = 0;
-            if (cacheField == null) {
-                // Skip first registration unless just the first registration is tested
-                super.registerUnregisterOneSubscribers();
-            }
-            for (Object subscriber : super.subscribers) {
-                if (cacheField != null) {
-                    try {
-                        cacheField.set(null, new ConcurrentHashMap());
-                    } catch (Exception e) {
-                        throw new RuntimeException(e);
-                    }
-                }
-                long beforeRegister = System.nanoTime();
-                super.eventBus.register(subscriber);
-
-                long afterRegister = System.nanoTime();
-                long end = System.nanoTime();
-                long timeMeasureOverhead = (end - afterRegister) * 2;
-                long timeRegister = end - beforeRegister - timeMeasureOverhead;
-                time += timeRegister;
-                super.eventBus.unregister(subscriber);
-                if (canceled) {
-                    return;
-                }
-            }
-
-            primaryResultMicros = time / 1000;
-            primaryResultCount = params.getSubscriberCount();
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "Otto Register";
-        }
-    }
-
-    public static class RegisterFirstTime extends RegisterOneByOne {
-
-        public RegisterFirstTime(Context context, TestParams params) {
-            super(context, params);
-            try {
-                Class<?> clazz = Class.forName("com.squareup.otto.AnnotatedHandlerFinder");
-                cacheField = clazz.getDeclaredField("SUBSCRIBERS_CACHE");
-                cacheField.setAccessible(true);
-            } catch (Exception e) {
-                throw new RuntimeException(e);
-            }
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "Otto Register, first time";
-        }
-
-    }
-
-    public class Subscriber extends Activity {
-        public Subscriber() {
-        }
-
-        @Subscribe
-        public void onEvent(TestEvent event) {
-            eventsReceivedCount.incrementAndGet();
-        }
-
-        public void dummy() {
-        }
-
-        public void dummy2() {
-        }
-
-        public void dummy3() {
-        }
-
-        public void dummy4() {
-        }
-
-        public void dummy5() {
-        }
-
-    }
-
-    private long registerSubscribers() {
-        long time = 0;
-        for (Object subscriber : subscribers) {
-            long timeStart = System.nanoTime();
-            eventBus.register(subscriber);
-            long timeEnd = System.nanoTime();
-            time += timeEnd - timeStart;
-            if (canceled) {
-                return 0;
-            }
-        }
-        return time;
-    }
-
-    private void registerUnregisterOneSubscribers() {
-        if (!subscribers.isEmpty()) {
-            Object subscriber = subscribers.get(0);
-            eventBus.register(subscriber);
-            eventBus.unregister(subscriber);
-        }
-    }
-
-}
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/SubscribeClassEventBusDefault.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/SubscribeClassEventBusDefault.java
deleted file mode 100644
index 54a11423..00000000
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/SubscribeClassEventBusDefault.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbusperf.testsubject;
-
-import org.greenrobot.eventbus.Subscribe;
-
-import org.greenrobot.eventbusperf.TestEvent;
-
-public class SubscribeClassEventBusDefault {
-    private PerfTestEventBus perfTestEventBus;
-
-    public SubscribeClassEventBusDefault(PerfTestEventBus perfTestEventBus) {
-        this.perfTestEventBus = perfTestEventBus;
-    }
-
-    @Subscribe
-    public void onEvent(TestEvent event) {
-        perfTestEventBus.eventsReceivedCount.incrementAndGet();
-    }
-
-    public void dummy() {
-    }
-
-    public void dummy2() {
-    }
-
-    public void dummy3() {
-    }
-
-    public void dummy4() {
-    }
-
-    public void dummy5() {
-    }
-}
diff --git a/EventBusTest/AndroidManifest.xml b/EventBusTest/AndroidManifest.xml
deleted file mode 100644
index 657ad878..00000000
--- a/EventBusTest/AndroidManifest.xml
+++ /dev/null
@@ -1,14 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools"
-    package="org.greenrobot.eventbus">
-
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
-
-    <application
-        android:allowBackup="false"
-        android:label="EventBus Test"
-        tools:ignore="GoogleAppIndexingWarning,MissingApplicationIcon">
-    </application>
-
-</manifest>
\ No newline at end of file
diff --git a/EventBusTest/build.gradle b/EventBusTest/build.gradle
deleted file mode 100644
index ab6b884c..00000000
--- a/EventBusTest/build.gradle
+++ /dev/null
@@ -1,66 +0,0 @@
-buildscript {
-    repositories {
-        jcenter()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:2.3.3'
-    }
-}
-
-apply plugin: 'com.android.application'
-
-dependencies {
-    androidTestCompile project(':eventbus')
-    androidTestCompile project(':EventBusTestJava')
-    androidTestAnnotationProcessor project(':eventbus-annotation-processor')
-    // Trying to repro bug:
-//    androidTestAnnotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.1.0'
-    compile fileTree(dir: 'libs', include: '*.jar')
-    androidTestCompile 'com.android.support.test:runner:1.0.1'
-    androidTestCompile 'com.android.support.test:rules:1.0.1'
-}
-
-android {
-    buildToolsVersion _buildToolsVersion
-    compileSdkVersion _compileSdkVersion
-
-    compileOptions {
-        sourceCompatibility = JavaVersion.VERSION_1_7
-        targetCompatibility = JavaVersion.VERSION_1_7
-    }
-
-    sourceSets {
-        main {
-            manifest.srcFile 'AndroidManifest.xml'
-        }
-
-        androidTest {
-            java.srcDirs = ['src']
-        }
-    }
-
-    defaultConfig {
-        minSdkVersion 9
-        targetSdkVersion 26
-        versionCode 1
-        versionName "1.0"
-
-        testApplicationId "de.greenrobot.event.test"
-        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
-
-        javaCompileOptions {
-            annotationProcessorOptions {
-                arguments = [ eventBusIndex : 'org.greenrobot.eventbus.EventBusTestsIndex' ]
-            }
-        }
-    }
-
-    lintOptions {
-        // To see problems right away, also nice for Travis CI
-        textOutput 'stdout'
-
-        // TODO FIXME: Travis only error
-        abortOnError false
-    }
-}
diff --git a/EventBusTest/libs/EventBusTestSubscriberInJar-3.0.0.jar b/EventBusTest/libs/EventBusTestSubscriberInJar-3.0.0.jar
deleted file mode 100644
index 47b80ef0..00000000
Binary files a/EventBusTest/libs/EventBusTestSubscriberInJar-3.0.0.jar and /dev/null differ
diff --git a/EventBusTest/src/org/greenrobot/eventbus/AbstractAndroidEventBusTest.java b/EventBusTest/src/org/greenrobot/eventbus/AbstractAndroidEventBusTest.java
deleted file mode 100644
index 13178206..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/AbstractAndroidEventBusTest.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import android.annotation.SuppressLint;
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Message;
-import android.support.test.runner.AndroidJUnit4;
-
-import org.junit.Before;
-import org.junit.runner.RunWith;
-
-
-import static org.junit.Assert.assertFalse;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-@RunWith(AndroidJUnit4.class)
-public abstract class AbstractAndroidEventBusTest extends AbstractEventBusTest {
-    private EventPostHandler mainPoster;
-
-    public AbstractAndroidEventBusTest() {
-        this(false);
-    }
-
-    public AbstractAndroidEventBusTest(boolean collectEventsReceived) {
-        super(collectEventsReceived);
-    }
-
-    @Before
-    public void setUpAndroid() throws Exception {
-        mainPoster = new EventPostHandler(Looper.getMainLooper());
-        assertFalse(Looper.getMainLooper().getThread().equals(Thread.currentThread()));
-    }
-
-    protected void postInMainThread(Object event) {
-        mainPoster.post(event);
-    }
-
-    @SuppressLint("HandlerLeak")
-    class EventPostHandler extends Handler {
-        public EventPostHandler(Looper looper) {
-            super(looper);
-        }
-
-        @Override
-        public void handleMessage(Message msg) {
-            eventBus.post(msg.obj);
-        }
-
-        void post(Object event) {
-            sendMessage(obtainMessage(0, event));
-        }
-
-    }
-
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/ClassMapPerfTest.java b/EventBusTest/src/org/greenrobot/eventbus/ClassMapPerfTest.java
deleted file mode 100644
index 6c1e9b51..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/ClassMapPerfTest.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus;
-
-import java.util.HashMap;
-import java.util.IdentityHashMap;
-import java.util.Map;
-
-/**
- * Just to verify testHashMapClassObject is fastest. Ignore this test.
- */
-public class ClassMapPerfTest /* extends TestCase */ {
-
-    static final int COUNT = 10000000;
-    static final Class CLAZZ = ClassMapPerfTest.class;
-
-    public void testHashMapClassObject() {
-        Map<Class, Class> map = new HashMap<Class, Class>();
-        for (int i = 0; i < COUNT; i++) {
-            Class oldValue = map.put(CLAZZ, CLAZZ);
-            Class value = map.get(CLAZZ);
-        }
-    }
-
-    public void testIdentityHashMapClassObject() {
-        Map<Class, Class> map = new IdentityHashMap<Class, Class>();
-        for (int i = 0; i < COUNT; i++) {
-            Class oldValue = map.put(CLAZZ, CLAZZ);
-            Class value = map.get(CLAZZ);
-        }
-    }
-
-    public void testHashMapClassName() {
-        Map<String, Class> map = new HashMap<String, Class>();
-        for (int i = 0; i < COUNT; i++) {
-            Class oldValue = map.put(CLAZZ.getName(), CLAZZ);
-            Class value = map.get(CLAZZ.getName());
-        }
-    }
-
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidActivityTest.java b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidActivityTest.java
deleted file mode 100644
index 364a3936..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidActivityTest.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import android.app.Activity;
-import android.support.test.annotation.UiThreadTest;
-import android.support.test.rule.UiThreadTestRule;
-import android.util.Log;
-
-import org.junit.Rule;
-import org.junit.Test;
-
-
-import static org.junit.Assert.assertEquals;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-// Do not extend from AbstractAndroidEventBusTest, because it asserts test may not be in main thread
-public class EventBusAndroidActivityTest extends AbstractEventBusTest {
-
-    public static class WithIndex extends EventBusBasicTest {
-        @Test
-        public void dummy() {
-        }
-
-    }
-
-    @Rule
-    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();
-
-    @Test
-    @UiThreadTest
-    public void testRegisterAndPost() {
-        // Use an activity to test real life performance
-        TestActivity testActivity = new TestActivity();
-        String event = "Hello";
-
-        long start = System.currentTimeMillis();
-        eventBus.register(testActivity);
-        long time = System.currentTimeMillis() - start;
-        Log.d(EventBus.TAG, "Registered in " + time + "ms");
-
-        eventBus.post(event);
-
-        assertEquals(event, testActivity.lastStringEvent);
-    }
-
-    public static class TestActivity extends Activity {
-        public String lastStringEvent;
-
-        @Subscribe
-        public void onEvent(String event) {
-            lastStringEvent = event;
-        }
-    }
-
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidCancelEventDeliveryTest.java b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidCancelEventDeliveryTest.java
deleted file mode 100644
index 781ceda2..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidCancelEventDeliveryTest.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import android.support.test.runner.AndroidJUnit4;
-import android.test.UiThreadTest;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
-@RunWith(AndroidJUnit4.class)
-public class EventBusAndroidCancelEventDeliveryTest extends EventBusCancelEventDeliveryTest {
-
-    @UiThreadTest
-    @Test
-    public void testCancelInMainThread() {
-        SubscriberMainThread subscriber = new SubscriberMainThread();
-        eventBus.register(subscriber);
-        eventBus.post("42");
-        awaitLatch(subscriber.done, 10);
-        assertEquals(0, eventCount.intValue());
-        assertNotNull(failed);
-    }
-
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidMultithreadedTest.java b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidMultithreadedTest.java
deleted file mode 100644
index 8be31cc1..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidMultithreadedTest.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import android.os.Looper;
-import android.support.test.runner.AndroidJUnit4;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertSame;
-
-@RunWith(AndroidJUnit4.class)
-public class EventBusAndroidMultithreadedTest extends EventBusMultithreadedTest {
-
-    @Test
-    public void testSubscribeUnSubscribeAndPostMixedEventType() throws InterruptedException {
-        List<SubscribeUnsubscribeThread> threads = new ArrayList<SubscribeUnsubscribeThread>();
-
-        // Debug.startMethodTracing("testSubscribeUnSubscribeAndPostMixedEventType");
-        for (int i = 0; i < 5; i++) {
-            SubscribeUnsubscribeThread thread = new SubscribeUnsubscribeThread();
-            thread.start();
-            threads.add(thread);
-        }
-        // This test takes a bit longer, so just use fraction the regular count
-        runThreadsMixedEventType(COUNT / 4, 5);
-        for (SubscribeUnsubscribeThread thread : threads) {
-            thread.shutdown();
-        }
-        for (SubscribeUnsubscribeThread thread : threads) {
-            thread.join();
-        }
-        // Debug.stopMethodTracing();
-    }
-
-    public class SubscribeUnsubscribeThread extends Thread {
-        boolean running = true;
-
-        public void shutdown() {
-            running = false;
-        }
-
-        @Override
-        public void run() {
-            try {
-                while (running) {
-                    eventBus.register(this);
-                    double random = Math.random();
-                    if (random > 0.6d) {
-                        Thread.sleep(0, (int) (1000000 * Math.random()));
-                    } else if (random > 0.3d) {
-                        Thread.yield();
-                    }
-                    eventBus.unregister(this);
-                }
-            } catch (InterruptedException e) {
-                throw new RuntimeException(e);
-            }
-        }
-
-        @Subscribe(threadMode = ThreadMode.MAIN)
-        public void onEventMainThread(String event) {
-            assertSame(Looper.getMainLooper(), Looper.myLooper());
-        }
-
-        @Subscribe(threadMode = ThreadMode.BACKGROUND)
-        public void onEventBackgroundThread(Integer event) {
-            assertNotSame(Looper.getMainLooper(), Looper.myLooper());
-        }
-
-        @Subscribe
-        public void onEvent(Object event) {
-            assertNotSame(Looper.getMainLooper(), Looper.myLooper());
-        }
-
-        @Subscribe(threadMode = ThreadMode.ASYNC)
-        public void onEventAsync(Object event) {
-            assertNotSame(Looper.getMainLooper(), Looper.myLooper());
-        }
-    }
-
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidOrderTest.java b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidOrderTest.java
deleted file mode 100644
index ff348e1d..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidOrderTest.java
+++ /dev/null
@@ -1,91 +0,0 @@
-package org.greenrobot.eventbus;
-
-import android.os.Handler;
-import android.os.Looper;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-
-
-import static org.junit.Assert.assertEquals;
-
-public class EventBusAndroidOrderTest extends AbstractAndroidEventBusTest {
-
-    private TestBackgroundPoster backgroundPoster;
-    private Handler handler;
-
-    @Before
-    public void setUp() throws Exception {
-        handler = new Handler(Looper.getMainLooper());
-        backgroundPoster = new TestBackgroundPoster(eventBus);
-        backgroundPoster.start();
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        backgroundPoster.shutdown();
-        backgroundPoster.join();
-    }
-
-    @Test
-    public void backgroundAndMainUnordered() {
-        eventBus.register(this);
-
-        handler.post(new Runnable() {
-            @Override
-            public void run() {
-                // post from non-main thread
-                backgroundPoster.post("non-main");
-                // post from main thread
-                eventBus.post("main");
-            }
-        });
-
-        waitForEventCount(2, 1000);
-
-        // observe that event from *main* thread is posted FIRST
-        // NOT in posting order
-        assertEquals("non-main", lastEvent);
-    }
-
-    @Test
-    public void backgroundAndMainOrdered() {
-        eventBus.register(this);
-
-        handler.post(new Runnable() {
-            @Override
-            public void run() {
-                // post from non-main thread
-                backgroundPoster.post(new OrderedEvent("non-main"));
-                // post from main thread
-                eventBus.post(new OrderedEvent("main"));
-            }
-        });
-
-        waitForEventCount(2, 1000);
-
-        // observe that event from *main* thread is posted LAST
-        // IN posting order
-        assertEquals("main", ((OrderedEvent) lastEvent).thread);
-    }
-
-    @Subscribe(threadMode = ThreadMode.MAIN)
-    public void onEvent(String event) {
-        trackEvent(event);
-    }
-
-    @Subscribe(threadMode = ThreadMode.MAIN_ORDERED)
-    public void onEvent(OrderedEvent event) {
-        trackEvent(event);
-    }
-
-    static class OrderedEvent {
-        String thread;
-
-        OrderedEvent(String thread) {
-            this.thread = thread;
-        }
-    }
-
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusBackgroundThreadTest.java b/EventBusTest/src/org/greenrobot/eventbus/EventBusBackgroundThreadTest.java
deleted file mode 100644
index 6ccb6025..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusBackgroundThreadTest.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import android.os.Looper;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-public class EventBusBackgroundThreadTest extends AbstractAndroidEventBusTest {
-
-    @Test
-    public void testPostInCurrentThread() throws InterruptedException {
-        eventBus.register(this);
-        eventBus.post("Hello");
-        waitForEventCount(1, 1000);
-
-        assertEquals("Hello", lastEvent);
-        assertEquals(Thread.currentThread(), lastThread);
-    }
-
-    @Test
-    public void testPostFromMain() throws InterruptedException {
-        eventBus.register(this);
-        postInMainThread("Hello");
-        waitForEventCount(1, 1000);
-        assertEquals("Hello", lastEvent);
-        assertFalse(lastThread.equals(Thread.currentThread()));
-        assertFalse(lastThread.equals(Looper.getMainLooper().getThread()));
-    }
-
-    @Subscribe(threadMode = ThreadMode.BACKGROUND)
-    public void onEventBackgroundThread(String event) {
-        trackEvent(event);
-    }
-
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadRacingTest.java b/EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadRacingTest.java
deleted file mode 100644
index 8ed637e8..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadRacingTest.java
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import android.os.Handler;
-import android.os.Looper;
-
-import org.junit.Test;
-
-import java.util.Random;
-import java.util.concurrent.CountDownLatch;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-public class EventBusMainThreadRacingTest extends AbstractAndroidEventBusTest {
-
-    private static final int ITERATIONS = LONG_TESTS ? 100000 : 1000;
-
-    protected boolean unregistered;
-    private CountDownLatch startLatch;
-    private volatile RuntimeException failed;
-
-    @Test
-    public void testRacingThreads() throws InterruptedException {
-        Runnable register = new Runnable() {
-            @Override
-            public void run() {
-                eventBus.register(EventBusMainThreadRacingTest.this);
-                unregistered = false;
-            }
-        };
-
-        Runnable unregister = new Runnable() {
-            @Override
-            public void run() {
-                eventBus.unregister(EventBusMainThreadRacingTest.this);
-                unregistered = true;
-            }
-        };
-
-        startLatch = new CountDownLatch(2);
-        BackgroundPoster backgroundPoster = new BackgroundPoster();
-        backgroundPoster.start();
-        try {
-            Handler handler = new Handler(Looper.getMainLooper());
-            Random random = new Random();
-            countDownAndAwaitLatch(startLatch, 10);
-            for (int i = 0; i < ITERATIONS; i++) {
-                handler.post(register);
-                Thread.sleep(0, random.nextInt(300)); // Sleep just some nanoseconds, timing is crucial here
-                handler.post(unregister);
-                if (failed != null) {
-                    throw new RuntimeException("Failed in iteration " + i, failed);
-                }
-                // Don't let the queue grow to avoid out-of-memory scenarios
-                waitForHandler(handler);
-            }
-        } finally {
-            backgroundPoster.running = false;
-            backgroundPoster.join();
-        }
-    }
-
-    protected void waitForHandler(Handler handler) {
-        final CountDownLatch doneLatch = new CountDownLatch(1);
-        handler.post(new Runnable() {
-
-            @Override
-            public void run() {
-                doneLatch.countDown();
-            }
-        });
-        awaitLatch(doneLatch, 10);
-    }
-
-    @Subscribe(threadMode = ThreadMode.MAIN)
-    public void onEventMainThread(String event) {
-        trackEvent(event);
-        if (unregistered) {
-            failed = new RuntimeException("Main thread event delivered while unregistered on received event #"
-                    + eventCount);
-        }
-    }
-
-    class BackgroundPoster extends Thread {
-        volatile boolean running = true;
-
-        public BackgroundPoster() {
-            super("BackgroundPoster");
-        }
-
-        @Override
-        public void run() {
-            countDownAndAwaitLatch(startLatch, 10);
-            while (running) {
-                eventBus.post("Posted in background");
-                if (Math.random() > 0.9f) {
-                    // Single cores would take very long without yielding
-                    Thread.yield();
-                }
-            }
-        }
-
-    }
-
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadTest.java b/EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadTest.java
deleted file mode 100644
index 34c29ee6..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadTest.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import android.os.Looper;
-
-import org.junit.Test;
-
-
-import static org.junit.Assert.assertEquals;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-public class EventBusMainThreadTest extends AbstractAndroidEventBusTest {
-
-    @Test
-    public void testPost() throws InterruptedException {
-        eventBus.register(this);
-        eventBus.post("Hello");
-        waitForEventCount(1, 1000);
-
-        assertEquals("Hello", lastEvent);
-        assertEquals(Looper.getMainLooper().getThread(), lastThread);
-    }
-
-    @Test
-    public void testPostInBackgroundThread() throws InterruptedException {
-        TestBackgroundPoster backgroundPoster = new TestBackgroundPoster(eventBus);
-        backgroundPoster.start();
-
-        eventBus.register(this);
-        backgroundPoster.post("Hello");
-        waitForEventCount(1, 1000);
-        assertEquals("Hello", lastEvent);
-        assertEquals(Looper.getMainLooper().getThread(), lastThread);
-
-        backgroundPoster.shutdown();
-        backgroundPoster.join();
-    }
-
-    @Subscribe(threadMode = ThreadMode.MAIN)
-    public void onEventMainThread(String event) {
-        trackEvent(event);
-    }
-
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/EventBusMethodModifiersTest.java b/EventBusTest/src/org/greenrobot/eventbus/EventBusMethodModifiersTest.java
deleted file mode 100644
index 2818d85d..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/EventBusMethodModifiersTest.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import android.os.Looper;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertSame;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-public class EventBusMethodModifiersTest extends AbstractAndroidEventBusTest {
-
-    @Test
-    public void testRegisterForEventTypeAndPost() throws InterruptedException {
-        eventBus.register(this);
-        String event = "Hello";
-        eventBus.post(event);
-        waitForEventCount(4, 1000);
-    }
-
-    @Subscribe
-    public void onEvent(String event) {
-        trackEvent(event);
-        assertNotSame(Looper.getMainLooper(), Looper.myLooper());
-    }
-
-    @Subscribe(threadMode = ThreadMode.MAIN)
-    public void onEventMainThread(String event) {
-        trackEvent(event);
-        assertSame(Looper.getMainLooper(), Looper.myLooper());
-    }
-
-    @Subscribe(threadMode = ThreadMode.BACKGROUND)
-    public void onEventBackgroundThread(String event) {
-        trackEvent(event);
-        assertNotSame(Looper.getMainLooper(), Looper.myLooper());
-    }
-
-    @Subscribe(threadMode = ThreadMode.ASYNC)
-    public void onEventAsync(String event) {
-        trackEvent(event);
-        assertNotSame(Looper.getMainLooper(), Looper.myLooper());
-    }
-
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/TestBackgroundPoster.java b/EventBusTest/src/org/greenrobot/eventbus/TestBackgroundPoster.java
deleted file mode 100644
index a40eefd9..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/TestBackgroundPoster.java
+++ /dev/null
@@ -1,70 +0,0 @@
-package org.greenrobot.eventbus;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class TestBackgroundPoster extends Thread {
-    private final EventBus eventBus;
-    volatile boolean running = true;
-    private final List<Object> eventQ = new ArrayList<>();
-    private final List<Object> eventsDone = new ArrayList<>();
-
-    TestBackgroundPoster(EventBus eventBus) {
-        super("BackgroundPoster");
-        this.eventBus = eventBus;
-    }
-
-    @Override
-    public void run() {
-        while (running) {
-            Object event = pollEvent();
-            if (event != null) {
-                eventBus.post(event);
-                synchronized (eventsDone) {
-                    eventsDone.add(event);
-                    eventsDone.notifyAll();
-                }
-            }
-        }
-    }
-
-    private synchronized Object pollEvent() {
-        Object event = null;
-        synchronized (eventQ) {
-            if (eventQ.isEmpty()) {
-                try {
-                    eventQ.wait(1000);
-                } catch (InterruptedException ignored) {
-                }
-            }
-            if(!eventQ.isEmpty()) {
-                event = eventQ.remove(0);
-            }
-        }
-        return event;
-    }
-
-    void shutdown() {
-        running = false;
-        synchronized (eventQ) {
-            eventQ.notifyAll();
-        }
-    }
-
-    void post(Object event) {
-        synchronized (eventQ) {
-            eventQ.add(event);
-            eventQ.notifyAll();
-        }
-        synchronized (eventsDone) {
-            while (!eventsDone.remove(event)) {
-                try {
-                    eventsDone.wait();
-                } catch (InterruptedException e) {
-                    throw new RuntimeException(e);
-                }
-            }
-        }
-    }
-
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusAndroidOrderTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusAndroidOrderTestWithIndex.java
deleted file mode 100644
index 9e1f2318..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusAndroidOrderTestWithIndex.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package org.greenrobot.eventbus.indexed;
-
-import org.greenrobot.eventbus.EventBusAndroidOrderTest;
-
-public class EventBusAndroidOrderTestWithIndex extends EventBusAndroidOrderTest {
-
-    @Override
-    public void setUp() throws Exception {
-        eventBus = Indexed.build();
-        super.setUp();
-    }
-
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBackgroundThreadTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBackgroundThreadTestWithIndex.java
deleted file mode 100644
index b1f316a1..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBackgroundThreadTestWithIndex.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.greenrobot.eventbus.EventBusBackgroundThreadTest;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertTrue;
-
-public class EventBusBackgroundThreadTestWithIndex extends EventBusBackgroundThreadTest {
-    @Before
-    public void overwriteEventBus() throws Exception {
-        eventBus = Indexed.build();
-    }
-
-    @Test
-    public void testIndex() {
-        assertTrue(eventBus.toString().contains("indexCount=2"));
-    }
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBasicTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBasicTestWithIndex.java
deleted file mode 100644
index 662a70b8..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBasicTestWithIndex.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.greenrobot.eventbus.EventBusBasicTest;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertTrue;
-
-public class EventBusBasicTestWithIndex extends EventBusBasicTest {
-    @Before
-    public void overwriteEventBus() throws Exception {
-        eventBus = Indexed.build();
-    }
-
-    @Test
-    public void testIndex() {
-        assertTrue(eventBus.toString().contains("indexCount=2"));
-    }
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusCancelEventDeliveryTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusCancelEventDeliveryTestWithIndex.java
deleted file mode 100644
index 76418689..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusCancelEventDeliveryTestWithIndex.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.greenrobot.eventbus.EventBusCancelEventDeliveryTest;
-import org.junit.Before;
-
-public class EventBusCancelEventDeliveryTestWithIndex extends EventBusCancelEventDeliveryTest {
-    @Before
-    public void overwriteEventBus() throws Exception {
-        eventBus = Indexed.build();
-    }
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusFallbackToReflectionTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusFallbackToReflectionTestWithIndex.java
deleted file mode 100644
index d6a2df27..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusFallbackToReflectionTestWithIndex.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.junit.Before;
-
-import org.greenrobot.eventbus.EventBusFallbackToReflectionTest;
-
-public class EventBusFallbackToReflectionTestWithIndex extends EventBusFallbackToReflectionTest {
-    @Before
-    public void overwriteEventBus() throws Exception {
-        eventBus = Indexed.build();
-    }
-
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusGenericsTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusGenericsTestWithIndex.java
deleted file mode 100644
index ca74fdfa..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusGenericsTestWithIndex.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.junit.Before;
-
-import org.greenrobot.eventbus.EventBusGenericsTest;
-
-public class EventBusGenericsTestWithIndex extends EventBusGenericsTest {
-    @Before
-    public void overwriteEventBus() throws Exception {
-        eventBus = Indexed.build();
-    }
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusInheritanceDisabledTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusInheritanceDisabledTestWithIndex.java
deleted file mode 100644
index 2443e9e1..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusInheritanceDisabledTestWithIndex.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.greenrobot.eventbus.EventBus;
-import org.greenrobot.eventbus.EventBusTestsIndex;
-import org.junit.Before;
-
-import org.greenrobot.eventbus.EventBusInheritanceDisabledTest;
-
-public class EventBusInheritanceDisabledTestWithIndex extends EventBusInheritanceDisabledTest {
-    @Before
-    public void setUp() throws Exception {
-        eventBus = EventBus.builder().eventInheritance(false).addIndex(new EventBusTestsIndex()).build();
-    }
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusInheritanceTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusInheritanceTestWithIndex.java
deleted file mode 100644
index 151195a0..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusInheritanceTestWithIndex.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.greenrobot.eventbus.EventBusInheritanceTest;
-import org.junit.Before;
-
-public class EventBusInheritanceTestWithIndex extends EventBusInheritanceTest {
-    @Before
-    public void overwriteEventBus() throws Exception {
-        eventBus = Indexed.build();
-    }
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusMainThreadRacingTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusMainThreadRacingTestWithIndex.java
deleted file mode 100644
index b73c2d85..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusMainThreadRacingTestWithIndex.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.junit.Before;
-
-import org.greenrobot.eventbus.EventBusMainThreadRacingTest;
-
-public class EventBusMainThreadRacingTestWithIndex extends EventBusMainThreadRacingTest {
-    @Before
-    public void overwriteEventBus() throws Exception {
-        eventBus = Indexed.build();
-    }
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusMainThreadTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusMainThreadTestWithIndex.java
deleted file mode 100644
index 630d1d72..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusMainThreadTestWithIndex.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.junit.Before;
-
-import org.greenrobot.eventbus.EventBusMainThreadTest;
-
-public class EventBusMainThreadTestWithIndex extends EventBusMainThreadTest {
-    @Before
-    public void overwriteEventBus() throws Exception {
-        eventBus = Indexed.build();
-    }
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusMethodModifiersTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusMethodModifiersTestWithIndex.java
deleted file mode 100644
index 6034354f..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusMethodModifiersTestWithIndex.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.greenrobot.eventbus.EventBusMethodModifiersTest;
-import org.junit.Before;
-
-public class EventBusMethodModifiersTestWithIndex extends EventBusMethodModifiersTest {
-    @Before
-    public void overwriteEventBus() throws Exception {
-        eventBus = Indexed.build();
-    }
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusMultithreadedTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusMultithreadedTestWithIndex.java
deleted file mode 100644
index e56a8020..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusMultithreadedTestWithIndex.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.greenrobot.eventbus.EventBusMultithreadedTest;
-import org.junit.Before;
-
-public class EventBusMultithreadedTestWithIndex extends EventBusMultithreadedTest {
-    @Before
-    public void overwriteEventBus() throws Exception {
-        eventBus = Indexed.build();
-    }
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java
deleted file mode 100644
index 20b0d08e..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.greenrobot.eventbus.EventBusNoSubscriberEventTest;
-import org.junit.Before;
-
-public class EventBusNoSubscriberEventTestWithIndex extends EventBusNoSubscriberEventTest {
-    @Before
-    public void overwriteEventBus() throws Exception {
-        eventBus = Indexed.build();
-    }
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java
deleted file mode 100644
index 840e8bad..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.greenrobot.eventbus.EventBusOrderedSubscriptionsTest;
-import org.junit.Before;
-
-public class EventBusOrderedSubscriptionsTestWithIndex extends EventBusOrderedSubscriptionsTest {
-    @Before
-    public void overwriteEventBus() throws Exception {
-        eventBus = Indexed.build();
-    }
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusRegistrationRacingTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusRegistrationRacingTestWithIndex.java
deleted file mode 100644
index 55c43bfa..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusRegistrationRacingTestWithIndex.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.junit.Before;
-
-import org.greenrobot.eventbus.EventBusRegistrationRacingTest;
-
-public class EventBusRegistrationRacingTestWithIndex extends EventBusRegistrationRacingTest {
-    @Before
-    public void overwriteEventBus() throws Exception {
-        eventBus = Indexed.build();
-    }
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusStickyEventTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusStickyEventTestWithIndex.java
deleted file mode 100644
index 4e5c63d5..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusStickyEventTestWithIndex.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.greenrobot.eventbus.EventBusStickyEventTest;
-import org.junit.Before;
-
-public class EventBusStickyEventTestWithIndex extends EventBusStickyEventTest {
-    @Before
-    public void overwriteEventBus() throws Exception {
-        eventBus = Indexed.build();
-    }
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberExceptionTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberExceptionTestWithIndex.java
deleted file mode 100644
index 2b9e3a17..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberExceptionTestWithIndex.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.junit.Before;
-
-import org.greenrobot.eventbus.EventBusSubscriberExceptionTest;
-
-public class EventBusSubscriberExceptionTestWithIndex extends EventBusSubscriberExceptionTest {
-    @Before
-    public void overwriteEventBus() throws Exception {
-        eventBus = Indexed.build();
-    }
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberInJarTestWithIndex.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberInJarTestWithIndex.java
deleted file mode 100644
index 9df9c7dd..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberInJarTestWithIndex.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.greenrobot.eventbus.EventBus;
-import org.greenrobot.eventbus.EventBusSubscriberInJarTest;
-import org.greenrobot.eventbus.InJarIndex;
-import org.junit.Before;
-
-public class EventBusSubscriberInJarTestWithIndex extends EventBusSubscriberInJarTest {
-    @Before
-    public void overwriteEventBus() throws Exception {
-        eventBus = EventBus.builder().addIndex(new InJarIndex()).build();
-    }
-}
diff --git a/EventBusTest/src/org/greenrobot/eventbus/indexed/Indexed.java b/EventBusTest/src/org/greenrobot/eventbus/indexed/Indexed.java
deleted file mode 100644
index 4aec1ef6..00000000
--- a/EventBusTest/src/org/greenrobot/eventbus/indexed/Indexed.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus.indexed;
-
-import org.greenrobot.eventbus.EventBus;
-import org.greenrobot.eventbus.EventBusJavaTestsIndex;
-import org.greenrobot.eventbus.EventBusTestsIndex;
-
-public class Indexed {
-    static EventBus build() {
-        return EventBus.builder()
-                .addIndex(new EventBusTestsIndex())
-                .addIndex(new EventBusJavaTestsIndex())
-                .build();
-    }
-}
diff --git a/EventBusTestJava/build.gradle b/EventBusTestJava/build.gradle
deleted file mode 100644
index 5fec7913..00000000
--- a/EventBusTestJava/build.gradle
+++ /dev/null
@@ -1,38 +0,0 @@
-buildscript {
-    repositories {
-        maven { url "https://plugins.gradle.org/m2/" }
-    }
-
-    dependencies {
-        classpath "net.ltgt.gradle:gradle-apt-plugin:0.12"
-    }
-}
-
-apply plugin: 'java'
-// plugin to make it easier/safer to use EventBus annotation processor
-apply plugin: 'net.ltgt.apt-idea'
-
-sourceCompatibility = 1.7
-
-// we have tests in the main source set so they can be shared with the Android test module
-// to make Gradle pick them up, add the dir to the test source set
-sourceSets {
-    test {
-        java {
-            srcDirs += ['src/main/java']
-        }
-    }
-}
-
-dependencies {
-    compile fileTree(dir: 'libs', include: '*.jar')
-    compile(project(':eventbus')) {
-        exclude group: "com.google.android" // Does not seem to work...
-    }
-    apt project(':eventbus-annotation-processor')
-    compile 'junit:junit:4.12'
-}
-
-tasks.withType(JavaCompile) {
-    options.compilerArgs += [ "-AeventBusIndex=org.greenrobot.eventbus.EventBusJavaTestsIndex" ]
-}
diff --git a/EventBusTestJava/libs/EventBusTestSubscriberInJar-3.0.0.jar b/EventBusTestJava/libs/EventBusTestSubscriberInJar-3.0.0.jar
deleted file mode 100644
index 47b80ef0..00000000
Binary files a/EventBusTestJava/libs/EventBusTestSubscriberInJar-3.0.0.jar and /dev/null differ
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/AbstractEventBusTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/AbstractEventBusTest.java
deleted file mode 100644
index fbbcf265..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/AbstractEventBusTest.java
+++ /dev/null
@@ -1,119 +0,0 @@
-/*
- * Copyright (C) 2012-2017 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import org.junit.Before;
-
-import java.util.List;
-import java.util.concurrent.CopyOnWriteArrayList;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.logging.Level;
-
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-public abstract class AbstractEventBusTest {
-    /** Activates long(er) running tests e.g. testing multi-threading more thoroughly.  */
-    protected static final boolean LONG_TESTS = false;
-
-    protected EventBus eventBus;
-
-    protected final AtomicInteger eventCount = new AtomicInteger();
-    protected final List<Object> eventsReceived;
-
-    protected volatile Object lastEvent;
-    protected volatile Thread lastThread;
-
-    public AbstractEventBusTest() {
-        this(false);
-    }
-
-    public AbstractEventBusTest(boolean collectEventsReceived) {
-        if (collectEventsReceived) {
-            eventsReceived = new CopyOnWriteArrayList<Object>();
-        } else {
-            eventsReceived = null;
-        }
-    }
-
-    @Before
-    public void setUpBase() throws Exception {
-        EventBus.clearCaches();
-        eventBus = new EventBus();
-    }
-
-    protected void waitForEventCount(int expectedCount, int maxMillis) {
-        for (int i = 0; i < maxMillis; i++) {
-            int currentCount = eventCount.get();
-            if (currentCount == expectedCount) {
-                break;
-            } else if (currentCount > expectedCount) {
-                fail("Current count (" + currentCount + ") is already higher than expected count (" + expectedCount
-                        + ")");
-            } else {
-                try {
-                    Thread.sleep(1);
-                } catch (InterruptedException e) {
-                    throw new RuntimeException(e);
-                }
-            }
-        }
-        assertEquals(expectedCount, eventCount.get());
-    }
-
-    protected void trackEvent(Object event) {
-        lastEvent = event;
-        lastThread = Thread.currentThread();
-        if (eventsReceived != null) {
-            eventsReceived.add(event);
-        }
-        // Must the the last one because we wait for this
-        eventCount.incrementAndGet();
-    }
-
-    protected void assertEventCount(int expectedEventCount) {
-        assertEquals(expectedEventCount, eventCount.intValue());
-    }
-    
-    protected void countDownAndAwaitLatch(CountDownLatch latch, long seconds) {
-        latch.countDown();
-        awaitLatch(latch, seconds);
-    }
-
-    protected void awaitLatch(CountDownLatch latch, long seconds) {
-        try {
-            assertTrue(latch.await(seconds, TimeUnit.SECONDS));
-        } catch (InterruptedException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    protected void log(String msg) {
-        eventBus.getLogger().log(Level.FINE, msg);
-    }
-
-    protected void log(String msg, Throwable e) {
-        eventBus.getLogger().log(Level.FINE, msg, e);
-    }
-
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusBasicTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusBasicTest.java
deleted file mode 100644
index c00b04bd..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusBasicTest.java
+++ /dev/null
@@ -1,305 +0,0 @@
-/*
- * Copyright (C) 2012-2017 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import org.junit.Test;
-
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-@SuppressWarnings({"WeakerAccess", "UnusedParameters", "unused"})
-public class EventBusBasicTest extends AbstractEventBusTest {
-
-    public static class WithIndex extends EventBusBasicTest {
-        @Test
-        public void dummy() {
-        }
-
-    }
-
-    private String lastStringEvent;
-    private int countStringEvent;
-    private int countIntEvent;
-    private int lastIntEvent;
-    private int countMyEventExtended;
-    private int countMyEvent;
-    private int countMyEvent2;
-
-    @Test
-    public void testRegisterAndPost() {
-        // Use an activity to test real life performance
-        StringEventSubscriber stringEventSubscriber = new StringEventSubscriber();
-        String event = "Hello";
-
-        long start = System.currentTimeMillis();
-        eventBus.register(stringEventSubscriber);
-        long time = System.currentTimeMillis() - start;
-        log("Registered in " + time + "ms");
-
-        eventBus.post(event);
-
-        assertEquals(event, stringEventSubscriber.lastStringEvent);
-    }
-
-    @Test
-    public void testPostWithoutSubscriber() {
-        eventBus.post("Hello");
-    }
-
-    @Test
-    public void testUnregisterWithoutRegister() {
-        // Results in a warning without throwing
-        eventBus.unregister(this);
-    }
-
-    // This will throw "out of memory" if subscribers are leaked
-    @Test
-    public void testUnregisterNotLeaking() {
-        int heapMBytes = (int) (Runtime.getRuntime().maxMemory() / (1024L * 1024L));
-        for (int i = 0; i < heapMBytes * 2; i++) {
-            @SuppressWarnings("unused")
-            EventBusBasicTest subscriber = new EventBusBasicTest() {
-                byte[] expensiveObject = new byte[1024 * 1024];
-            };
-            eventBus.register(subscriber);
-            eventBus.unregister(subscriber);
-            log("Iteration " + i + " / max heap: " + heapMBytes);
-        }
-    }
-
-    @Test
-    public void testRegisterTwice() {
-        eventBus.register(this);
-        try {
-            eventBus.register(this);
-            fail("Did not throw");
-        } catch (RuntimeException expected) {
-            // OK
-        }
-    }
-
-    @Test
-    public void testIsRegistered() {
-        assertFalse(eventBus.isRegistered(this));
-        eventBus.register(this);
-        assertTrue(eventBus.isRegistered(this));
-        eventBus.unregister(this);
-        assertFalse(eventBus.isRegistered(this));
-    }
-
-    @Test
-    public void testPostWithTwoSubscriber() {
-        EventBusBasicTest test2 = new EventBusBasicTest();
-        eventBus.register(this);
-        eventBus.register(test2);
-        String event = "Hello";
-        eventBus.post(event);
-        assertEquals(event, lastStringEvent);
-        assertEquals(event, test2.lastStringEvent);
-    }
-
-    @Test
-    public void testPostMultipleTimes() {
-        eventBus.register(this);
-        MyEvent event = new MyEvent();
-        int count = 1000;
-        long start = System.currentTimeMillis();
-        // Debug.startMethodTracing("testPostMultipleTimes" + count);
-        for (int i = 0; i < count; i++) {
-            eventBus.post(event);
-        }
-        // Debug.stopMethodTracing();
-        long time = System.currentTimeMillis() - start;
-        log("Posted " + count + " events in " + time + "ms");
-        assertEquals(count, countMyEvent);
-    }
-
-    @Test
-    public void testMultipleSubscribeMethodsForEvent() {
-        eventBus.register(this);
-        MyEvent event = new MyEvent();
-        eventBus.post(event);
-        assertEquals(1, countMyEvent);
-        assertEquals(1, countMyEvent2);
-    }
-
-    @Test
-    public void testPostAfterUnregister() {
-        eventBus.register(this);
-        eventBus.unregister(this);
-        eventBus.post("Hello");
-        assertNull(lastStringEvent);
-    }
-
-    @Test
-    public void testRegisterAndPostTwoTypes() {
-        eventBus.register(this);
-        eventBus.post(42);
-        eventBus.post("Hello");
-        assertEquals(1, countIntEvent);
-        assertEquals(1, countStringEvent);
-        assertEquals(42, lastIntEvent);
-        assertEquals("Hello", lastStringEvent);
-    }
-
-    @Test
-    public void testRegisterUnregisterAndPostTwoTypes() {
-        eventBus.register(this);
-        eventBus.unregister(this);
-        eventBus.post(42);
-        eventBus.post("Hello");
-        assertEquals(0, countIntEvent);
-        assertEquals(0, lastIntEvent);
-        assertEquals(0, countStringEvent);
-    }
-
-    @Test
-    public void testPostOnDifferentEventBus() {
-        eventBus.register(this);
-        new EventBus().post("Hello");
-        assertEquals(0, countStringEvent);
-    }
-
-    @Test
-    public void testPostInEventHandler() {
-        RepostInteger reposter = new RepostInteger();
-        eventBus.register(reposter);
-        eventBus.register(this);
-        eventBus.post(1);
-        assertEquals(10, countIntEvent);
-        assertEquals(10, lastIntEvent);
-        assertEquals(10, reposter.countEvent);
-        assertEquals(10, reposter.lastEvent);
-    }
-
-    @Test
-    public void testHasSubscriberForEvent() {
-        assertFalse(eventBus.hasSubscriberForEvent(String.class));
-
-        eventBus.register(this);
-        assertTrue(eventBus.hasSubscriberForEvent(String.class));
-
-        eventBus.unregister(this);
-        assertFalse(eventBus.hasSubscriberForEvent(String.class));
-    }
-
-    @Test
-    public void testHasSubscriberForEventSuperclass() {
-        assertFalse(eventBus.hasSubscriberForEvent(String.class));
-
-        Object subscriber = new ObjectSubscriber();
-        eventBus.register(subscriber);
-        assertTrue(eventBus.hasSubscriberForEvent(String.class));
-
-        eventBus.unregister(subscriber);
-        assertFalse(eventBus.hasSubscriberForEvent(String.class));
-    }
-
-    @Test
-    public void testHasSubscriberForEventImplementedInterface() {
-        assertFalse(eventBus.hasSubscriberForEvent(String.class));
-
-        Object subscriber = new CharSequenceSubscriber();
-        eventBus.register(subscriber);
-        assertTrue(eventBus.hasSubscriberForEvent(CharSequence.class));
-        assertTrue(eventBus.hasSubscriberForEvent(String.class));
-
-        eventBus.unregister(subscriber);
-        assertFalse(eventBus.hasSubscriberForEvent(CharSequence.class));
-        assertFalse(eventBus.hasSubscriberForEvent(String.class));
-    }
-
-    @Subscribe
-    public void onEvent(String event) {
-        lastStringEvent = event;
-        countStringEvent++;
-    }
-
-    @Subscribe
-    public void onEvent(Integer event) {
-        lastIntEvent = event;
-        countIntEvent++;
-    }
-
-    @Subscribe
-    public void onEvent(MyEvent event) {
-        countMyEvent++;
-    }
-
-    @Subscribe
-    public void onEvent2(MyEvent event) {
-        countMyEvent2++;
-    }
-
-    @Subscribe
-    public void onEvent(MyEventExtended event) {
-        countMyEventExtended++;
-    }
-
-    public static class StringEventSubscriber {
-        public String lastStringEvent;
-
-        @Subscribe
-        public void onEvent(String event) {
-            lastStringEvent = event;
-        }
-    }
-
-    public static class CharSequenceSubscriber {
-        @Subscribe
-        public void onEvent(CharSequence event) {
-        }
-    }
-
-    public static class ObjectSubscriber {
-        @Subscribe
-        public void onEvent(Object event) {
-        }
-    }
-
-    public class MyEvent {
-    }
-
-    public class MyEventExtended extends MyEvent {
-    }
-
-    public class RepostInteger {
-        public int lastEvent;
-        public int countEvent;
-
-        @Subscribe
-        public void onEvent(Integer event) {
-            lastEvent = event;
-            countEvent++;
-            assertEquals(countEvent, event.intValue());
-
-            if (event < 10) {
-                int countIntEventBefore = countEvent;
-                eventBus.post(event + 1);
-                // All our post calls will just enqueue the event, so check count is unchanged
-                assertEquals(countIntEventBefore, countIntEventBefore);
-            }
-        }
-    }
-
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusBuilderTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusBuilderTest.java
deleted file mode 100644
index 05a60362..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusBuilderTest.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import org.junit.Assert;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-public class EventBusBuilderTest extends AbstractEventBusTest {
-
-    @Test
-    public void testThrowSubscriberException() {
-        eventBus = EventBus.builder().throwSubscriberException(true).build();
-        eventBus.register(new SubscriberExceptionEventTracker());
-        eventBus.register(new ThrowingSubscriber());
-        try {
-            eventBus.post("Foo");
-            fail("Should have thrown");
-        } catch (EventBusException e) {
-            // Expected
-        }
-    }
-
-    @Test
-    public void testDoNotSendSubscriberExceptionEvent() {
-        eventBus = EventBus.builder().logSubscriberExceptions(false).sendSubscriberExceptionEvent(false).build();
-        eventBus.register(new SubscriberExceptionEventTracker());
-        eventBus.register(new ThrowingSubscriber());
-        eventBus.post("Foo");
-        assertEventCount(0);
-    }
-
-    @Test
-    public void testDoNotSendNoSubscriberEvent() {
-        eventBus = EventBus.builder().logNoSubscriberMessages(false).sendNoSubscriberEvent(false).build();
-        eventBus.register(new NoSubscriberEventTracker());
-        eventBus.post("Foo");
-        assertEventCount(0);
-    }
-
-    @Test
-    public void testInstallDefaultEventBus() {
-        EventBusBuilder builder = EventBus.builder();
-        try {
-            // Either this should throw when another unit test got the default event bus...
-            eventBus = builder.installDefaultEventBus();
-            Assert.assertEquals(eventBus, EventBus.getDefault());
-
-            // ...or this should throw
-            eventBus = builder.installDefaultEventBus();
-            fail("Should have thrown");
-        } catch (EventBusException e) {
-            // Expected
-        }
-    }
-
-    @Test
-    public void testEventInheritance() {
-        eventBus = EventBus.builder().eventInheritance(false).build();
-        eventBus.register(new ThrowingSubscriber());
-        eventBus.post("Foo");
-    }
-
-    public class SubscriberExceptionEventTracker {
-        @Subscribe
-        public void onEvent(SubscriberExceptionEvent event) {
-            trackEvent(event);
-        }
-    }
-
-    public class NoSubscriberEventTracker {
-        @Subscribe
-        public void onEvent(NoSubscriberEvent event) {
-            trackEvent(event);
-        }
-    }
-
-    public class ThrowingSubscriber {
-        @Subscribe
-        public void onEvent(Object event) {
-            throw new RuntimeException();
-        }
-    }
-
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusCancelEventDeliveryTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusCancelEventDeliveryTest.java
deleted file mode 100644
index aeed8fdd..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusCancelEventDeliveryTest.java
+++ /dev/null
@@ -1,135 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import org.junit.Test;
-
-import java.util.concurrent.CountDownLatch;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.fail;
-
-public class EventBusCancelEventDeliveryTest extends AbstractEventBusTest {
-
-    Throwable failed;
-
-    @Test
-    public void testCancel() {
-        Subscriber canceler = new Subscriber(1, true);
-        eventBus.register(new Subscriber(0, false));
-        eventBus.register(canceler);
-        eventBus.register(new Subscriber(0, false));
-        eventBus.post("42");
-        assertEquals(1, eventCount.intValue());
-
-        eventBus.unregister(canceler);
-        eventBus.post("42");
-        assertEquals(1 + 2, eventCount.intValue());
-    }
-
-    @Test
-    public void testCancelInBetween() {
-        eventBus.register(new Subscriber(2, true));
-        eventBus.register(new Subscriber(1, false));
-        eventBus.register(new Subscriber(3, false));
-        eventBus.post("42");
-        assertEquals(2, eventCount.intValue());
-    }
-
-    @Test
-    public void testCancelOutsideEventHandler() {
-        try {
-            eventBus.cancelEventDelivery(this);
-            fail("Should have thrown");
-        } catch (EventBusException e) {
-            // Expected
-        }
-    }
-
-    @Test
-    public void testCancelWrongEvent() {
-        eventBus.register(new SubscriberCancelOtherEvent());
-        eventBus.post("42");
-        assertEquals(0, eventCount.intValue());
-        assertNotNull(failed);
-    }
-
-    public class Subscriber {
-        private final int prio;
-        private final boolean cancel;
-
-        public Subscriber(int prio, boolean cancel) {
-            this.prio = prio;
-            this.cancel = cancel;
-        }
-
-        @Subscribe
-        public void onEvent(String event) {
-            handleEvent(event, 0);
-        }
-
-        @Subscribe(priority = 1)
-        public void onEvent1(String event) {
-            handleEvent(event, 1);
-        }
-
-        @Subscribe(priority = 2)
-        public void onEvent2(String event) {
-            handleEvent(event, 2);
-        }
-
-        @Subscribe(priority = 3)
-        public void onEvent3(String event) {
-            handleEvent(event, 3);
-        }
-
-        private void handleEvent(String event, int prio) {
-            if(this.prio == prio) {
-                trackEvent(event);
-                if (cancel) {
-                    eventBus.cancelEventDelivery(event);
-                }
-            }
-        }
-    }
-
-    public class SubscriberCancelOtherEvent {
-        @Subscribe
-        public void onEvent(String event) {
-            try {
-                eventBus.cancelEventDelivery(this);
-            } catch (EventBusException e) {
-                failed = e;
-            }
-        }
-    }
-
-    public class SubscriberMainThread {
-        final CountDownLatch done = new CountDownLatch(1);
-
-        @Subscribe(threadMode = ThreadMode.MAIN)
-        public void onEventMainThread(String event) {
-            try {
-                eventBus.cancelEventDelivery(event);
-            } catch (EventBusException e) {
-                failed = e;
-            }
-            done.countDown();
-        }
-    }
-
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusFallbackToReflectionTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusFallbackToReflectionTest.java
deleted file mode 100644
index 4b884ef4..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusFallbackToReflectionTest.java
+++ /dev/null
@@ -1,148 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-public class EventBusFallbackToReflectionTest extends AbstractEventBusTest {
-    private class PrivateEvent {
-    }
-
-    public class PublicClass {
-        @Subscribe
-        public void onEvent(Object any) {
-            trackEvent(any);
-        }
-    }
-
-    private class PrivateClass {
-        @Subscribe
-        public void onEvent(Object any) {
-            trackEvent(any);
-        }
-    }
-
-    public class PublicWithPrivateSuperClass extends PrivateClass {
-        @Subscribe
-        public void onEvent(String any) {
-            trackEvent(any);
-        }
-    }
-
-    public class PublicClassWithPrivateEvent {
-        @Subscribe
-        public void onEvent(PrivateEvent any) {
-            trackEvent(any);
-        }
-    }
-
-    public class PublicClassWithPublicAndPrivateEvent {
-        @Subscribe
-        public void onEvent(String any) {
-            trackEvent(any);
-        }
-
-        @Subscribe
-        public void onEvent(PrivateEvent any) {
-            trackEvent(any);
-        }
-    }
-
-    public class PublicWithPrivateEventInSuperclass extends PublicClassWithPrivateEvent {
-        @Subscribe
-        public void onEvent(Object any) {
-            trackEvent(any);
-        }
-    }
-
-    public EventBusFallbackToReflectionTest() {
-        super(true);
-    }
-
-    @Test
-    public void testAnonymousSubscriberClass() {
-        Object subscriber = new Object() {
-            @Subscribe
-            public void onEvent(String event) {
-                trackEvent(event);
-            }
-        };
-        eventBus.register(subscriber);
-
-        eventBus.post("Hello");
-        assertEquals("Hello", lastEvent);
-        assertEquals(1, eventsReceived.size());
-    }
-
-    @Test
-    public void testAnonymousSubscriberClassWithPublicSuperclass() {
-        Object subscriber = new PublicClass() {
-            @Subscribe
-            public void onEvent(String event) {
-                trackEvent(event);
-            }
-        };
-        eventBus.register(subscriber);
-
-        eventBus.post("Hello");
-        assertEquals("Hello", lastEvent);
-        assertEquals(2, eventsReceived.size());
-    }
-
-    @Test
-    public void testAnonymousSubscriberClassWithPrivateSuperclass() {
-        eventBus.register(new PublicWithPrivateSuperClass());
-        eventBus.post("Hello");
-        assertEquals("Hello", lastEvent);
-        assertEquals(2, eventsReceived.size());
-    }
-
-    @Test
-    public void testSubscriberClassWithPrivateEvent() {
-        eventBus.register(new PublicClassWithPrivateEvent());
-        PrivateEvent privateEvent = new PrivateEvent();
-        eventBus.post(privateEvent);
-        assertEquals(privateEvent, lastEvent);
-        assertEquals(1, eventsReceived.size());
-    }
-
-    @Test
-    public void testSubscriberClassWithPublicAndPrivateEvent() {
-        eventBus.register(new PublicClassWithPublicAndPrivateEvent());
-
-        eventBus.post("Hello");
-        assertEquals("Hello", lastEvent);
-        assertEquals(1, eventsReceived.size());
-
-        PrivateEvent privateEvent = new PrivateEvent();
-        eventBus.post(privateEvent);
-        assertEquals(privateEvent, lastEvent);
-        assertEquals(2, eventsReceived.size());
-    }
-
-    @Test
-    public void testSubscriberExtendingClassWithPrivateEvent() {
-        eventBus.register(new PublicWithPrivateEventInSuperclass());
-        PrivateEvent privateEvent = new PrivateEvent();
-        eventBus.post(privateEvent);
-        assertEquals(privateEvent, lastEvent);
-        assertEquals(2, eventsReceived.size());
-    }
-
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusGenericsTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusGenericsTest.java
deleted file mode 100644
index 59f8a37b..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusGenericsTest.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus;
-
-import org.junit.Test;
-
-public class EventBusGenericsTest extends AbstractEventBusTest {
-    public static class GenericEvent<T> {
-        T value;
-    }
-
-    public class GenericEventSubscriber<T> {
-        @Subscribe
-        public void onGenericEvent(GenericEvent<T> event) {
-            trackEvent(event);
-        }
-    }
-
-    public class FullGenericEventSubscriber<T> {
-        @Subscribe
-        public void onGenericEvent(T event) {
-            trackEvent(event);
-        }
-    }
-
-    public class GenericNumberEventSubscriber<T extends Number> {
-        @Subscribe
-        public void onGenericEvent(T event) {
-            trackEvent(event);
-        }
-    }
-
-    public class GenericFloatEventSubscriber extends GenericNumberEventSubscriber<Float> {
-    }
-
-    @Test
-    public void testGenericEventAndSubscriber() {
-        GenericEventSubscriber<IntTestEvent> genericSubscriber = new GenericEventSubscriber<IntTestEvent>();
-        eventBus.register(genericSubscriber);
-        eventBus.post(new GenericEvent<Integer>());
-        assertEventCount(1);
-    }
-
-    @Test
-    public void testGenericEventAndSubscriber_TypeErasure() {
-        FullGenericEventSubscriber<IntTestEvent> genericSubscriber = new FullGenericEventSubscriber<IntTestEvent>();
-        eventBus.register(genericSubscriber);
-        eventBus.post(new IntTestEvent(42));
-        eventBus.post("Type erasure!");
-        assertEventCount(2);
-    }
-
-    @Test
-    public void testGenericEventAndSubscriber_BaseType() {
-        GenericNumberEventSubscriber<Float> genericSubscriber = new GenericNumberEventSubscriber<>();
-        eventBus.register(genericSubscriber);
-        eventBus.post(new Float(42));
-        eventBus.post(new Double(23));
-        assertEventCount(2);
-        eventBus.post("Not the same base type");
-        assertEventCount(2);
-    }
-
-    @Test
-    public void testGenericEventAndSubscriber_Subclass() {
-        GenericFloatEventSubscriber genericSubscriber = new GenericFloatEventSubscriber();
-        eventBus.register(genericSubscriber);
-        eventBus.post(new Float(42));
-        eventBus.post(new Double(77));
-        assertEventCount(2);
-        eventBus.post("Not the same base type");
-        assertEventCount(2);
-    }
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusIndexTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusIndexTest.java
deleted file mode 100644
index c3923346..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusIndexTest.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus;
-
-import org.greenrobot.eventbus.meta.SimpleSubscriberInfo;
-import org.greenrobot.eventbus.meta.SubscriberInfo;
-import org.greenrobot.eventbus.meta.SubscriberInfoIndex;
-import org.greenrobot.eventbus.meta.SubscriberMethodInfo;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class EventBusIndexTest {
-    private String value;
-
-    /** Ensures the index is actually used and no reflection fall-back kicks in. */
-    @Test
-    public void testManualIndexWithoutAnnotation() {
-        SubscriberInfoIndex index = new SubscriberInfoIndex() {
-
-            @Override
-            public SubscriberInfo getSubscriberInfo(Class<?> subscriberClass) {
-                Assert.assertEquals(EventBusIndexTest.class, subscriberClass);
-                SubscriberMethodInfo[] methodInfos = {
-                        new SubscriberMethodInfo("someMethodWithoutAnnotation", String.class)
-                };
-                return new SimpleSubscriberInfo(EventBusIndexTest.class, false, methodInfos);
-            }
-        };
-
-        EventBus eventBus = EventBus.builder().addIndex(index).build();
-        eventBus.register(this);
-        eventBus.post("Yepp");
-        eventBus.unregister(this);
-        Assert.assertEquals("Yepp", value);
-    }
-
-    public void someMethodWithoutAnnotation(String value) {
-        this.value = value;
-    }
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassNoMethod.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassNoMethod.java
deleted file mode 100644
index 0fcc73cf..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassNoMethod.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package org.greenrobot.eventbus;
-
-// Need to use upper class or Android test runner does not pick it up
-public class EventBusInheritanceDisabledSubclassNoMethod extends EventBusInheritanceDisabledTest {
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassTest.java
deleted file mode 100644
index 6ab86d23..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassTest.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package org.greenrobot.eventbus;
-
-import org.junit.Ignore;
-
-// Need to use upper class or Android test runner does not pick it up
-public class EventBusInheritanceDisabledSubclassTest extends EventBusInheritanceDisabledTest {
-
-    int countMyEventOverwritten;
-
-    @Subscribe
-    public void onEvent(MyEvent event) {
-        countMyEventOverwritten++;
-    }
-
-    @Override
-    @Ignore
-    public void testEventClassHierarchy() {
-        // TODO fix test in super, then remove this
-    }
-}
\ No newline at end of file
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledTest.java
deleted file mode 100644
index 4b026719..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledTest.java
+++ /dev/null
@@ -1,195 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import static junit.framework.Assert.assertEquals;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-public class EventBusInheritanceDisabledTest {
-
-    protected EventBus eventBus;
-
-    protected int countMyEventExtended;
-    protected int countMyEvent;
-    protected int countObjectEvent;
-    private int countMyEventInterface;
-    private int countMyEventInterfaceExtended;
-
-    @Before
-    public void setUp() throws Exception {
-        eventBus = EventBus.builder().eventInheritance(false).build();
-    }
-
-    @Test
-    public void testEventClassHierarchy() {
-        eventBus.register(this);
-
-        eventBus.post("Hello");
-        assertEquals(0, countObjectEvent);
-
-        eventBus.post(new MyEvent());
-        assertEquals(0, countObjectEvent);
-        assertEquals(1, countMyEvent);
-
-        eventBus.post(new MyEventExtended());
-        assertEquals(0, countObjectEvent);
-        assertEquals(1, countMyEvent);
-        assertEquals(1, countMyEventExtended);
-    }
-
-    @Test
-    public void testEventClassHierarchySticky() {
-        eventBus.postSticky("Hello");
-        eventBus.postSticky(new MyEvent());
-        eventBus.postSticky(new MyEventExtended());
-        eventBus.register(new StickySubscriber());
-        assertEquals(1, countMyEventExtended);
-        assertEquals(1, countMyEvent);
-        assertEquals(0, countObjectEvent);
-    }
-
-    @Test
-    public void testEventInterfaceHierarchy() {
-        eventBus.register(this);
-
-        eventBus.post(new MyEvent());
-        assertEquals(0, countMyEventInterface);
-
-        eventBus.post(new MyEventExtended());
-        assertEquals(0, countMyEventInterface);
-        assertEquals(0, countMyEventInterfaceExtended);
-    }
-
-    @Test
-    public void testEventSuperInterfaceHierarchy() {
-        eventBus.register(this);
-
-        eventBus.post(new MyEventInterfaceExtended() {
-        });
-        assertEquals(0, countMyEventInterface);
-        assertEquals(0, countMyEventInterfaceExtended);
-    }
-
-    @Test
-    public void testSubscriberClassHierarchy() {
-        EventBusInheritanceDisabledSubclassTest
-                subscriber = new EventBusInheritanceDisabledSubclassTest();
-        eventBus.register(subscriber);
-
-        eventBus.post("Hello");
-        assertEquals(0, subscriber.countObjectEvent);
-
-        eventBus.post(new MyEvent());
-        assertEquals(0, subscriber.countObjectEvent);
-        assertEquals(0, subscriber.countMyEvent);
-        assertEquals(1, subscriber.countMyEventOverwritten);
-
-        eventBus.post(new MyEventExtended());
-        assertEquals(0, subscriber.countObjectEvent);
-        assertEquals(0, subscriber.countMyEvent);
-        assertEquals(1, subscriber.countMyEventExtended);
-        assertEquals(1, subscriber.countMyEventOverwritten);
-    }
-
-    @Test
-    public void testSubscriberClassHierarchyWithoutNewSubscriberMethod() {
-        EventBusInheritanceDisabledSubclassNoMethod
-                subscriber = new EventBusInheritanceDisabledSubclassNoMethod();
-        eventBus.register(subscriber);
-
-        eventBus.post("Hello");
-        assertEquals(0, subscriber.countObjectEvent);
-
-        eventBus.post(new MyEvent());
-        assertEquals(0, subscriber.countObjectEvent);
-        assertEquals(1, subscriber.countMyEvent);
-
-        eventBus.post(new MyEventExtended());
-        assertEquals(0, subscriber.countObjectEvent);
-        assertEquals(1, subscriber.countMyEvent);
-        assertEquals(1, subscriber.countMyEventExtended);
-    }
-
-    @Subscribe
-    public void onEvent(Object event) {
-        countObjectEvent++;
-    }
-
-    @Subscribe
-    public void onEvent(MyEvent event) {
-        countMyEvent++;
-    }
-
-    @Subscribe
-    public void onEvent(MyEventExtended event) {
-        countMyEventExtended++;
-    }
-
-    @Subscribe
-    public void onEvent(MyEventInterface event) {
-        countMyEventInterface++;
-    }
-
-    @Subscribe
-    public void onEvent(MyEventInterfaceExtended event) {
-        countMyEventInterfaceExtended++;
-    }
-
-    public static interface MyEventInterface {
-    }
-
-    public static class MyEvent implements MyEventInterface {
-    }
-
-    public static interface MyEventInterfaceExtended extends MyEventInterface {
-    }
-
-    public static class MyEventExtended extends MyEvent implements MyEventInterfaceExtended {
-    }
-
-    public class StickySubscriber {
-        @Subscribe(sticky = true)
-        public void onEvent(Object event) {
-            countObjectEvent++;
-        }
-
-        @Subscribe(sticky = true)
-        public void onEvent(MyEvent event) {
-            countMyEvent++;
-        }
-
-        @Subscribe(sticky = true)
-        public void onEvent(MyEventExtended event) {
-            countMyEventExtended++;
-        }
-
-        @Subscribe(sticky = true)
-        public void onEvent(MyEventInterface event) {
-            countMyEventInterface++;
-        }
-
-        @Subscribe(sticky = true)
-        public void onEvent(MyEventInterfaceExtended event) {
-            countMyEventInterfaceExtended++;
-        }
-    }
-
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceSubclassNoMethodTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceSubclassNoMethodTest.java
deleted file mode 100644
index a9f6da47..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceSubclassNoMethodTest.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package org.greenrobot.eventbus;
-
-// Need to use upper class or Android test runner does not pick it up
-public class EventBusInheritanceSubclassNoMethodTest extends EventBusInheritanceTest {
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceSubclassTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceSubclassTest.java
deleted file mode 100644
index 8b3d4e4d..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceSubclassTest.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package org.greenrobot.eventbus;
-
-import org.junit.Ignore;
-
-// Need to use upper class or Android test runner does not pick it up
-public class EventBusInheritanceSubclassTest extends EventBusInheritanceTest {
-    int countMyEventOverwritten;
-
-    @Subscribe
-    public void onEvent(MyEvent event) {
-        countMyEventOverwritten++;
-    }
-
-    @Override
-    @Ignore
-    public void testEventClassHierarchy() {
-        // TODO fix test in super, then remove this
-    }
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceTest.java
deleted file mode 100644
index 9fd52288..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceTest.java
+++ /dev/null
@@ -1,194 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-public class EventBusInheritanceTest {
-
-    protected EventBus eventBus;
-
-    protected int countMyEventExtended;
-    protected int countMyEvent;
-    protected int countObjectEvent;
-    private int countMyEventInterface;
-    private int countMyEventInterfaceExtended;
-
-    @Before
-    public void setUp() throws Exception {
-        eventBus = new EventBus();
-    }
-
-    @Test
-    public void testEventClassHierarchy() {
-        eventBus.register(this);
-
-        eventBus.post("Hello");
-        assertEquals(1, countObjectEvent);
-
-        eventBus.post(new MyEvent());
-        assertEquals(2, countObjectEvent);
-        assertEquals(1, countMyEvent);
-
-        eventBus.post(new MyEventExtended());
-        assertEquals(3, countObjectEvent);
-        assertEquals(2, countMyEvent);
-        assertEquals(1, countMyEventExtended);
-    }
-
-    @Test
-    public void testEventClassHierarchySticky() {
-        eventBus.postSticky("Hello");
-        eventBus.postSticky(new MyEvent());
-        eventBus.postSticky(new MyEventExtended());
-        eventBus.register(new StickySubscriber());
-        assertEquals(1, countMyEventExtended);
-        assertEquals(2, countMyEvent);
-        assertEquals(3, countObjectEvent);
-    }
-
-    @Test
-    public void testEventInterfaceHierarchy() {
-        eventBus.register(this);
-
-        eventBus.post(new MyEvent());
-        assertEquals(1, countMyEventInterface);
-
-        eventBus.post(new MyEventExtended());
-        assertEquals(2, countMyEventInterface);
-        assertEquals(1, countMyEventInterfaceExtended);
-    }
-
-    @Test
-    public void testEventSuperInterfaceHierarchy() {
-        eventBus.register(this);
-
-        eventBus.post(new MyEventInterfaceExtended() {
-        });
-        assertEquals(1, countMyEventInterface);
-        assertEquals(1, countMyEventInterfaceExtended);
-    }
-
-    @Test
-    public void testSubscriberClassHierarchy() {
-        EventBusInheritanceSubclassTest subscriber = new EventBusInheritanceSubclassTest();
-        eventBus.register(subscriber);
-
-        eventBus.post("Hello");
-        assertEquals(1, subscriber.countObjectEvent);
-
-        eventBus.post(new MyEvent());
-        assertEquals(2, subscriber.countObjectEvent);
-        assertEquals(0, subscriber.countMyEvent);
-        assertEquals(1, subscriber.countMyEventOverwritten);
-
-        eventBus.post(new MyEventExtended());
-        assertEquals(3, subscriber.countObjectEvent);
-        assertEquals(0, subscriber.countMyEvent);
-        assertEquals(1, subscriber.countMyEventExtended);
-        assertEquals(2, subscriber.countMyEventOverwritten);
-    }
-
-    @Test
-    public void testSubscriberClassHierarchyWithoutNewSubscriberMethod() {
-        EventBusInheritanceSubclassNoMethodTest
-                subscriber = new EventBusInheritanceSubclassNoMethodTest();
-        eventBus.register(subscriber);
-
-        eventBus.post("Hello");
-        assertEquals(1, subscriber.countObjectEvent);
-
-        eventBus.post(new MyEvent());
-        assertEquals(2, subscriber.countObjectEvent);
-        assertEquals(1, subscriber.countMyEvent);
-
-        eventBus.post(new MyEventExtended());
-        assertEquals(3, subscriber.countObjectEvent);
-        assertEquals(2, subscriber.countMyEvent);
-        assertEquals(1, subscriber.countMyEventExtended);
-    }
-
-    @Subscribe
-    public void onEvent(Object event) {
-        countObjectEvent++;
-    }
-
-    @Subscribe
-    public void onEvent(MyEvent event) {
-        countMyEvent++;
-    }
-
-    @Subscribe
-    public void onEvent(MyEventExtended event) {
-        countMyEventExtended++;
-    }
-
-    @Subscribe
-    public void onEvent(MyEventInterface event) {
-        countMyEventInterface++;
-    }
-
-    @Subscribe
-    public void onEvent(MyEventInterfaceExtended event) {
-        countMyEventInterfaceExtended++;
-    }
-
-    public static interface MyEventInterface {
-    }
-
-    public static class MyEvent implements MyEventInterface {
-    }
-
-    public static interface MyEventInterfaceExtended extends MyEventInterface {
-    }
-
-    public static class MyEventExtended extends MyEvent implements MyEventInterfaceExtended {
-    }
-
-    public class StickySubscriber {
-        @Subscribe(sticky = true)
-        public void onEvent(Object event) {
-            countObjectEvent++;
-        }
-
-        @Subscribe(sticky = true)
-        public void onEvent(MyEvent event) {
-            countMyEvent++;
-        }
-
-        @Subscribe(sticky = true)
-        public void onEvent(MyEventExtended event) {
-            countMyEventExtended++;
-        }
-
-        @Subscribe(sticky = true)
-        public void onEvent(MyEventInterface event) {
-            countMyEventInterface++;
-        }
-
-        @Subscribe(sticky = true)
-        public void onEvent(MyEventInterfaceExtended event) {
-            countMyEventInterfaceExtended++;
-        }
-    }
-
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusMultithreadedTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusMultithreadedTest.java
deleted file mode 100644
index e1c1576c..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusMultithreadedTest.java
+++ /dev/null
@@ -1,204 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicInteger;
-
-import static org.junit.Assert.assertEquals;
-
-public class EventBusMultithreadedTest extends AbstractEventBusTest {
-
-    static final int COUNT = LONG_TESTS ? 100000 : 1000;
-
-    final AtomicInteger countStringEvent = new AtomicInteger();
-    final AtomicInteger countIntegerEvent = new AtomicInteger();
-    final AtomicInteger countObjectEvent = new AtomicInteger();
-    final AtomicInteger countIntTestEvent = new AtomicInteger();
-
-    String lastStringEvent;
-    Integer lastIntegerEvent;
-
-    IntTestEvent lastIntTestEvent;
-
-    @Test
-    public void testPost01Thread() throws InterruptedException {
-        runThreadsSingleEventType(1);
-    }
-
-    @Test
-    public void testPost04Threads() throws InterruptedException {
-        runThreadsSingleEventType(4);
-    }
-
-    @Test
-    public void testPost40Threads() throws InterruptedException {
-        runThreadsSingleEventType(40);
-    }
-
-    @Test
-    public void testPostMixedEventType01Thread() throws InterruptedException {
-        runThreadsMixedEventType(1);
-    }
-
-    @Test
-    public void testPostMixedEventType04Threads() throws InterruptedException {
-        runThreadsMixedEventType(4);
-    }
-
-    @Test
-    public void testPostMixedEventType40Threads() throws InterruptedException {
-        runThreadsMixedEventType(40);
-    }
-
-    private void runThreadsSingleEventType(int threadCount) throws InterruptedException {
-        int iterations = COUNT / threadCount;
-        eventBus.register(this);
-
-        CountDownLatch latch = new CountDownLatch(threadCount + 1);
-        List<PosterThread> threads = startThreads(latch, threadCount, iterations, "Hello");
-        long time = triggerAndWaitForThreads(threads, latch);
-
-        log(threadCount + " threads posted " + iterations + " events each in " + time + "ms");
-
-        waitForEventCount(COUNT * 2, 5000);
-
-        assertEquals("Hello", lastStringEvent);
-        int expectedCount = threadCount * iterations;
-        assertEquals(expectedCount, countStringEvent.intValue());
-        assertEquals(expectedCount, countObjectEvent.intValue());
-    }
-
-    private void runThreadsMixedEventType(int threadCount) throws InterruptedException {
-        runThreadsMixedEventType(COUNT, threadCount);
-    }
-
-    void runThreadsMixedEventType(int count, int threadCount) throws InterruptedException {
-        eventBus.register(this);
-        int eventTypeCount = 3;
-        int iterations = count / threadCount / eventTypeCount;
-
-        CountDownLatch latch = new CountDownLatch(eventTypeCount * threadCount + 1);
-        List<PosterThread> threadsString = startThreads(latch, threadCount, iterations, "Hello");
-        List<PosterThread> threadsInteger = startThreads(latch, threadCount, iterations, 42);
-        List<PosterThread> threadsIntTestEvent = startThreads(latch, threadCount, iterations, new IntTestEvent(7));
-
-        List<PosterThread> threads = new ArrayList<PosterThread>();
-        threads.addAll(threadsString);
-        threads.addAll(threadsInteger);
-        threads.addAll(threadsIntTestEvent);
-        long time = triggerAndWaitForThreads(threads, latch);
-
-        log(threadCount * eventTypeCount + " mixed threads posted " + iterations + " events each in "
-                + time + "ms");
-
-        int expectedCountEach = threadCount * iterations;
-        int expectedCountTotal = expectedCountEach * eventTypeCount * 2;
-        waitForEventCount(expectedCountTotal, 5000);
-
-        assertEquals("Hello", lastStringEvent);
-        assertEquals(42, lastIntegerEvent.intValue());
-        assertEquals(7, lastIntTestEvent.value);
-
-        assertEquals(expectedCountEach, countStringEvent.intValue());
-        assertEquals(expectedCountEach, countIntegerEvent.intValue());
-        assertEquals(expectedCountEach, countIntTestEvent.intValue());
-
-        assertEquals(expectedCountEach * eventTypeCount, countObjectEvent.intValue());
-    }
-
-    private long triggerAndWaitForThreads(List<PosterThread> threads, CountDownLatch latch) throws InterruptedException {
-        while (latch.getCount() != 1) {
-            // Let all other threads prepare and ensure this one is the last 
-            Thread.sleep(1);
-        }
-        long start = System.currentTimeMillis();
-        latch.countDown();
-        for (PosterThread thread : threads) {
-            thread.join();
-        }
-        return System.currentTimeMillis() - start;
-    }
-
-    private List<PosterThread> startThreads(CountDownLatch latch, int threadCount, int iterations, Object eventToPost) {
-        List<PosterThread> threads = new ArrayList<PosterThread>(threadCount);
-        for (int i = 0; i < threadCount; i++) {
-            PosterThread thread = new PosterThread(latch, iterations, eventToPost);
-            thread.start();
-            threads.add(thread);
-        }
-        return threads;
-    }
-
-    @Subscribe(threadMode = ThreadMode.BACKGROUND)
-    public void onEventBackgroundThread(String event) {
-        lastStringEvent = event;
-        countStringEvent.incrementAndGet();
-        trackEvent(event);
-    }
-
-    @Subscribe(threadMode = ThreadMode.MAIN)
-    public void onEventMainThread(Integer event) {
-        lastIntegerEvent = event;
-        countIntegerEvent.incrementAndGet();
-        trackEvent(event);
-    }
-
-    @Subscribe(threadMode = ThreadMode.ASYNC)
-    public void onEventAsync(IntTestEvent event) {
-        countIntTestEvent.incrementAndGet();
-        lastIntTestEvent = event;
-        trackEvent(event);
-    }
-
-    @Subscribe
-    public void onEvent(Object event) {
-        countObjectEvent.incrementAndGet();
-        trackEvent(event);
-    }
-
-    class PosterThread extends Thread {
-
-        private final CountDownLatch startLatch;
-        private final int iterations;
-        private final Object eventToPost;
-
-        public PosterThread(CountDownLatch latch, int iterations, Object eventToPost) {
-            this.startLatch = latch;
-            this.iterations = iterations;
-            this.eventToPost = eventToPost;
-        }
-
-        @Override
-        public void run() {
-            startLatch.countDown();
-            try {
-                startLatch.await();
-            } catch (InterruptedException e) {
-                log("Unexpected interrupt", e);
-            }
-
-            for (int i = 0; i < iterations; i++) {
-                eventBus.post(eventToPost);
-            }
-        }
-    }
-
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusNoSubscriberEventTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusNoSubscriberEventTest.java
deleted file mode 100644
index b358f8c3..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusNoSubscriberEventTest.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertSame;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-public class EventBusNoSubscriberEventTest extends AbstractEventBusTest {
-
-    @Test
-    public void testNoSubscriberEvent() {
-        eventBus.register(this);
-        eventBus.post("Foo");
-        assertEventCount(1);
-        assertEquals(NoSubscriberEvent.class, lastEvent.getClass());
-        NoSubscriberEvent noSub = (NoSubscriberEvent) lastEvent;
-        assertEquals("Foo", noSub.originalEvent);
-        assertSame(eventBus, noSub.eventBus);
-    }
-
-    @Test
-    public void testNoSubscriberEventAfterUnregister() {
-        Object subscriber = new DummySubscriber();
-        eventBus.register(subscriber);
-        eventBus.unregister(subscriber);
-        testNoSubscriberEvent();
-    }
-
-    @Test
-    public void testBadNoSubscriberSubscriber() {
-        eventBus = EventBus.builder().logNoSubscriberMessages(false).build();
-        eventBus.register(this);
-        eventBus.register(new BadNoSubscriberSubscriber());
-        eventBus.post("Foo");
-        assertEventCount(2);
-
-        assertEquals(SubscriberExceptionEvent.class, lastEvent.getClass());
-        NoSubscriberEvent noSub = (NoSubscriberEvent) ((SubscriberExceptionEvent) lastEvent).causingEvent;
-        assertEquals("Foo", noSub.originalEvent);
-    }
-
-    @Subscribe
-    public void onEvent(NoSubscriberEvent event) {
-        trackEvent(event);
-    }
-
-    @Subscribe
-    public void onEvent(SubscriberExceptionEvent event) {
-        trackEvent(event);
-    }
-
-    public static class DummySubscriber {
-        @SuppressWarnings("unused")
-        @Subscribe
-        public void onEvent(String dummy) {
-        }
-    }
-
-    public class BadNoSubscriberSubscriber {
-        @Subscribe
-        public void onEvent(NoSubscriberEvent event) {
-            throw new RuntimeException("I'm bad");
-        }
-    }
-
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusOrderedSubscriptionsTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusOrderedSubscriptionsTest.java
deleted file mode 100644
index e8d0d796..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusOrderedSubscriptionsTest.java
+++ /dev/null
@@ -1,213 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-public class EventBusOrderedSubscriptionsTest extends AbstractEventBusTest {
-
-    int lastPrio = Integer.MAX_VALUE;
-    final List<PrioSubscriber> registered = new ArrayList<PrioSubscriber>();
-    private String fail;
-
-    @Test
-    public void testOrdered() {
-        runTestOrdered("42", false, 5);
-    }
-
-    @Test
-    public void testOrderedMainThread() {
-        runTestOrdered(new IntTestEvent(42), false, 3);
-    }
-
-    @Test
-    public void testOrderedBackgroundThread() {
-        runTestOrdered(Integer.valueOf(42), false, 3);
-    }
-
-    @Test
-    public void testOrderedSticky() {
-        runTestOrdered("42", true, 5);
-    }
-
-    @Test
-    public void testOrderedMainThreadSticky() {
-        runTestOrdered(new IntTestEvent(42), true, 3);
-    }
-
-    @Test
-    public void testOrderedBackgroundThreadSticky() {
-        runTestOrdered(Integer.valueOf(42), true, 3);
-    }
-
-    protected void runTestOrdered(Object event, boolean sticky, int expectedEventCount) {
-        Object subscriber = sticky ? new PrioSubscriberSticky() : new PrioSubscriber();
-        eventBus.register(subscriber);
-        eventBus.post(event);
-
-        waitForEventCount(expectedEventCount, 10000);
-        assertEquals(null, fail);
-
-        eventBus.unregister(subscriber);
-    }
-
-    public final class PrioSubscriber {
-        @Subscribe(priority = 1)
-        public void onEventP1(String event) {
-            handleEvent(1, event);
-        }
-
-        @Subscribe(priority = -1)
-        public void onEventM1(String event) {
-            handleEvent(-1, event);
-        }
-
-        @Subscribe(priority = 0)
-        public void onEventP0(String event) {
-            handleEvent(0, event);
-        }
-
-        @Subscribe(priority = 10)
-        public void onEventP10(String event) {
-            handleEvent(10, event);
-        }
-
-        @Subscribe(priority = -100)
-        public void onEventM100(String event) {
-            handleEvent(-100, event);
-        }
-
-
-        @Subscribe(threadMode = ThreadMode.MAIN, priority = -1)
-        public void onEventMainThreadM1(IntTestEvent event) {
-            handleEvent(-1, event);
-        }
-
-        @Subscribe(threadMode = ThreadMode.MAIN)
-        public void onEventMainThreadP0(IntTestEvent event) {
-            handleEvent(0, event);
-        }
-
-        @Subscribe(threadMode = ThreadMode.MAIN, priority = 1)
-        public void onEventMainThreadP1(IntTestEvent event) {
-            handleEvent(1, event);
-        }
-
-        @Subscribe(threadMode = ThreadMode.BACKGROUND, priority = 1)
-        public void onEventBackgroundThreadP1(Integer event) {
-            handleEvent(1, event);
-        }
-
-        @Subscribe(threadMode = ThreadMode.BACKGROUND)
-        public void onEventBackgroundThreadP0(Integer event) {
-            handleEvent(0, event);
-        }
-
-        @Subscribe(threadMode = ThreadMode.BACKGROUND, priority = -1)
-        public void onEventBackgroundThreadM1(Integer event) {
-            handleEvent(-1, event);
-        }
-
-        protected void handleEvent(int prio, Object event) {
-            if (prio > lastPrio) {
-                fail = "Called prio " + prio + " after " + lastPrio;
-            }
-            lastPrio = prio;
-
-            log("Subscriber " + prio + " got: " + event);
-            trackEvent(event);
-        }
-
-    }
-
-    public final class PrioSubscriberSticky {
-        @Subscribe(priority = 1, sticky = true)
-        public void onEventP1(String event) {
-            handleEvent(1, event);
-        }
-
-
-        @Subscribe(priority = -1, sticky = true)
-        public void onEventM1(String event) {
-            handleEvent(-1, event);
-        }
-
-        @Subscribe(priority = 0, sticky = true)
-        public void onEventP0(String event) {
-            handleEvent(0, event);
-        }
-
-        @Subscribe(priority = 10, sticky = true)
-        public void onEventP10(String event) {
-            handleEvent(10, event);
-        }
-
-        @Subscribe(priority = -100, sticky = true)
-        public void onEventM100(String event) {
-            handleEvent(-100, event);
-        }
-
-        @Subscribe(threadMode = ThreadMode.MAIN, priority = -1, sticky = true)
-        public void onEventMainThreadM1(IntTestEvent event) {
-            handleEvent(-1, event);
-        }
-
-        @Subscribe(threadMode = ThreadMode.MAIN, sticky = true)
-        public void onEventMainThreadP0(IntTestEvent event) {
-            handleEvent(0, event);
-        }
-
-        @Subscribe(threadMode = ThreadMode.MAIN, priority = 1, sticky = true)
-        public void onEventMainThreadP1(IntTestEvent event) {
-            handleEvent(1, event);
-        }
-
-        @Subscribe(threadMode = ThreadMode.BACKGROUND, priority = 1, sticky = true)
-        public void onEventBackgroundThreadP1(Integer event) {
-            handleEvent(1, event);
-        }
-
-        @Subscribe(threadMode = ThreadMode.BACKGROUND, sticky = true)
-        public void onEventBackgroundThreadP0(Integer event) {
-            handleEvent(0, event);
-        }
-
-        @Subscribe(threadMode = ThreadMode.BACKGROUND, priority = -1, sticky = true)
-        public void onEventBackgroundThreadM1(Integer event) {
-            handleEvent(-1, event);
-        }
-
-        protected void handleEvent(int prio, Object event) {
-            if (prio > lastPrio) {
-                fail = "Called prio " + prio + " after " + lastPrio;
-            }
-            lastPrio = prio;
-
-            log("Subscriber " + prio + " got: " + event);
-            trackEvent(event);
-        }
-
-    }
-
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusRegistrationRacingTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusRegistrationRacingTest.java
deleted file mode 100644
index 7d09d7ad..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusRegistrationRacingTest.java
+++ /dev/null
@@ -1,102 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Executor;
-import java.util.concurrent.Executors;
-
-import static org.junit.Assert.fail;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-public class EventBusRegistrationRacingTest extends AbstractEventBusTest {
-
-    // On a Nexus 5, bad synchronization always failed on the first iteration or went well completely.
-    // So a high number of iterations do not guarantee a better probability of finding bugs.
-    private static final int ITERATIONS = LONG_TESTS ? 1000 : 10;
-    private static final int THREAD_COUNT = 16;
-
-    volatile CountDownLatch startLatch;
-    volatile CountDownLatch registeredLatch;
-    volatile CountDownLatch canUnregisterLatch;
-    volatile CountDownLatch unregisteredLatch;
-    
-    final Executor threadPool = Executors.newCachedThreadPool();
-
-    @Test
-    public void testRacingRegistrations() throws InterruptedException {
-        for (int i = 0; i < ITERATIONS; i++) {
-            startLatch = new CountDownLatch(THREAD_COUNT);
-            registeredLatch = new CountDownLatch(THREAD_COUNT);
-            canUnregisterLatch = new CountDownLatch(1);
-            unregisteredLatch = new CountDownLatch(THREAD_COUNT);
-            
-            List<SubscriberThread> threads = startThreads();
-            registeredLatch.await();
-            eventBus.post("42");
-            canUnregisterLatch.countDown();
-            for (int t = 0; t < THREAD_COUNT; t++) {
-                int eventCount = threads.get(t).eventCount;
-                if (eventCount != 1) {
-                    fail("Failed in iteration " + i + ": thread #" + t + " has event count of " + eventCount);
-                }
-            }
-            // Wait for threads to be done
-            unregisteredLatch.await();
-        }
-    }
-
-    private List<SubscriberThread> startThreads() {
-        List<SubscriberThread> threads = new ArrayList<SubscriberThread>(THREAD_COUNT);
-        for (int i = 0; i < THREAD_COUNT; i++) {
-            SubscriberThread thread = new SubscriberThread();
-            threadPool.execute(thread);
-            threads.add(thread);
-        }
-        return threads;
-    }
-
-    public class SubscriberThread implements Runnable {
-        volatile int eventCount;
-
-        @Override
-        public void run() {
-            countDownAndAwaitLatch(startLatch, 10);
-            eventBus.register(this);
-            registeredLatch.countDown();
-            try {
-                canUnregisterLatch.await();
-            } catch (InterruptedException e) {
-                throw new RuntimeException(e);
-            }
-            eventBus.unregister(this);
-            unregisteredLatch.countDown();
-        }
-
-        @Subscribe
-        public void onEvent(String event) {
-            eventCount++;
-        }
-
-    }
-
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusStickyEventTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusStickyEventTest.java
deleted file mode 100644
index ec426745..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusStickyEventTest.java
+++ /dev/null
@@ -1,196 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-public class EventBusStickyEventTest extends AbstractEventBusTest {
-
-    @Test
-    public void testPostSticky() throws InterruptedException {
-        eventBus.postSticky("Sticky");
-        eventBus.register(this);
-        assertEquals("Sticky", lastEvent);
-        assertEquals(Thread.currentThread(), lastThread);
-    }
-
-    @Test
-    public void testPostStickyTwoEvents() throws InterruptedException {
-        eventBus.postSticky("Sticky");
-        eventBus.postSticky(new IntTestEvent(7));
-        eventBus.register(this);
-        assertEquals(2, eventCount.intValue());
-    }
-
-    @Test
-    public void testPostStickyTwoSubscribers() throws InterruptedException {
-        eventBus.postSticky("Sticky");
-        eventBus.postSticky(new IntTestEvent(7));
-        eventBus.register(this);
-        StickyIntTestSubscriber subscriber2 = new StickyIntTestSubscriber();
-        eventBus.register(subscriber2);
-        assertEquals(3, eventCount.intValue());
-
-        eventBus.postSticky("Sticky");
-        assertEquals(4, eventCount.intValue());
-
-        eventBus.postSticky(new IntTestEvent(8));
-        assertEquals(6, eventCount.intValue());
-    }
-
-    @Test
-    public void testPostStickyRegisterNonSticky() throws InterruptedException {
-        eventBus.postSticky("Sticky");
-        eventBus.register(new NonStickySubscriber());
-        assertNull(lastEvent);
-        assertEquals(0, eventCount.intValue());
-    }
-
-    @Test
-    public void testPostNonStickyRegisterSticky() throws InterruptedException {
-        eventBus.post("NonSticky");
-        eventBus.register(this);
-        assertNull(lastEvent);
-        assertEquals(0, eventCount.intValue());
-    }
-
-    @Test
-    public void testPostStickyTwice() throws InterruptedException {
-        eventBus.postSticky("Sticky");
-        eventBus.postSticky("NewSticky");
-        eventBus.register(this);
-        assertEquals("NewSticky", lastEvent);
-    }
-
-    @Test
-    public void testPostStickyThenPostNormal() throws InterruptedException {
-        eventBus.postSticky("Sticky");
-        eventBus.post("NonSticky");
-        eventBus.register(this);
-        assertEquals("Sticky", lastEvent);
-    }
-
-    @Test
-    public void testPostStickyWithRegisterAndUnregister() throws InterruptedException {
-        eventBus.register(this);
-        eventBus.postSticky("Sticky");
-        assertEquals("Sticky", lastEvent);
-
-        eventBus.unregister(this);
-        eventBus.register(this);
-        assertEquals("Sticky", lastEvent);
-        assertEquals(2, eventCount.intValue());
-
-        eventBus.postSticky("NewSticky");
-        assertEquals(3, eventCount.intValue());
-        assertEquals("NewSticky", lastEvent);
-
-        eventBus.unregister(this);
-        eventBus.register(this);
-        assertEquals(4, eventCount.intValue());
-        assertEquals("NewSticky", lastEvent);
-    }
-
-    @Test
-    public void testPostStickyAndGet() throws InterruptedException {
-        eventBus.postSticky("Sticky");
-        assertEquals("Sticky", eventBus.getStickyEvent(String.class));
-    }
-
-    @Test
-    public void testPostStickyRemoveClass() throws InterruptedException {
-        eventBus.postSticky("Sticky");
-        eventBus.removeStickyEvent(String.class);
-        assertNull(eventBus.getStickyEvent(String.class));
-        eventBus.register(this);
-        assertNull(lastEvent);
-        assertEquals(0, eventCount.intValue());
-    }
-
-    @Test
-    public void testPostStickyRemoveEvent() throws InterruptedException {
-        eventBus.postSticky("Sticky");
-        assertTrue(eventBus.removeStickyEvent("Sticky"));
-        assertNull(eventBus.getStickyEvent(String.class));
-        eventBus.register(this);
-        assertNull(lastEvent);
-        assertEquals(0, eventCount.intValue());
-    }
-
-    @Test
-    public void testPostStickyRemoveAll() throws InterruptedException {
-        eventBus.postSticky("Sticky");
-        eventBus.postSticky(new IntTestEvent(77));
-        eventBus.removeAllStickyEvents();
-        assertNull(eventBus.getStickyEvent(String.class));
-        assertNull(eventBus.getStickyEvent(IntTestEvent.class));
-        eventBus.register(this);
-        assertNull(lastEvent);
-        assertEquals(0, eventCount.intValue());
-    }
-
-    @Test
-    public void testRemoveStickyEventInSubscriber() throws InterruptedException {
-        eventBus.register(new RemoveStickySubscriber());
-        eventBus.postSticky("Sticky");
-        eventBus.register(this);
-        assertNull(lastEvent);
-        assertEquals(0, eventCount.intValue());
-        assertNull(eventBus.getStickyEvent(String.class));
-    }
-
-    @Subscribe(sticky = true)
-    public void onEvent(String event) {
-        trackEvent(event);
-    }
-
-    @Subscribe(sticky = true)
-    public void onEvent(IntTestEvent event) {
-        trackEvent(event);
-    }
-
-    public class RemoveStickySubscriber {
-        @SuppressWarnings("unused")
-        @Subscribe(sticky = true)
-        public void onEvent(String event) {
-            eventBus.removeStickyEvent(event);
-        }
-    }
-
-    public class NonStickySubscriber {
-        @Subscribe
-        public void onEvent(String event) {
-            trackEvent(event);
-        }
-
-        @Subscribe
-        public void onEvent(IntTestEvent event) {
-            trackEvent(event);
-        }
-    }
-
-    public class StickyIntTestSubscriber {
-        @Subscribe(sticky = true)
-        public void onEvent(IntTestEvent event) {
-            trackEvent(event);
-        }
-    }
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberExceptionTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberExceptionTest.java
deleted file mode 100644
index f0dea680..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberExceptionTest.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertSame;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-public class EventBusSubscriberExceptionTest extends AbstractEventBusTest {
-
-    @Test
-    public void testSubscriberExceptionEvent() {
-        eventBus = EventBus.builder().logSubscriberExceptions(false).build();
-        eventBus.register(this);
-        eventBus.post("Foo");
-        assertEventCount(1);
-        assertEquals(SubscriberExceptionEvent.class, lastEvent.getClass());
-        SubscriberExceptionEvent exEvent = (SubscriberExceptionEvent) lastEvent;
-        assertEquals("Foo", exEvent.causingEvent);
-        assertSame(this, exEvent.causingSubscriber);
-        assertEquals("Bar", exEvent.throwable.getMessage());
-    }
-
-    @Test
-    public void testBadExceptionSubscriber() {
-        eventBus = EventBus.builder().logSubscriberExceptions(false).build();
-        eventBus.register(this);
-        eventBus.register(new BadExceptionSubscriber());
-        eventBus.post("Foo");
-        assertEventCount(1);
-    }
-
-    @Subscribe
-    public void onEvent(String event) {
-        throw new RuntimeException("Bar");
-    }
-
-    @Subscribe
-    public void onEvent(SubscriberExceptionEvent event) {
-        trackEvent(event);
-    }
-
-    public class BadExceptionSubscriber {
-        @Subscribe
-        public void onEvent(SubscriberExceptionEvent event) {
-            throw new RuntimeException("Bad");
-        }
-    }
-
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberInJarTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberInJarTest.java
deleted file mode 100644
index a553e7bc..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberInJarTest.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.greenrobot.eventbus;
-
-import org.junit.Assert;
-import org.junit.Test;
-
-public class EventBusSubscriberInJarTest {
-    protected EventBus eventBus = EventBus.builder().build();
-
-    @Test
-    public void testSubscriberInJar() {
-        SubscriberInJar subscriber = new SubscriberInJar();
-        eventBus.register(subscriber);
-        eventBus.post("Hi Jar");
-        eventBus.post(42);
-        Assert.assertEquals(1, subscriber.getCollectedStrings().size());
-        Assert.assertEquals("Hi Jar", subscriber.getCollectedStrings().get(0));
-    }
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberLegalTest.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberLegalTest.java
deleted file mode 100644
index c362e900..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberLegalTest.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.greenrobot.eventbus;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-/**
- * @author Markus Junginger, greenrobot
- */
-public class EventBusSubscriberLegalTest extends AbstractEventBusTest {
-
-    @Test
-    public void testSubscriberLegal() {
-        eventBus.register(this);
-        eventBus.post("42");
-        eventBus.unregister(this);
-        assertEquals(1, eventCount.intValue());
-    }
-
-    // With build time verification, some of these tests are obsolete (and cause problems during build)
-//    public void testSubscriberNotPublic() {
-//        try {
-//            eventBus.register(new NotPublic());
-//            fail("Registration of ilegal subscriber successful");
-//        } catch (EventBusException e) {
-//            // Expected
-//        }
-//    }
-
-//    public void testSubscriberStatic() {
-//        try {
-//            eventBus.register(new Static());
-//            fail("Registration of ilegal subscriber successful");
-//        } catch (EventBusException e) {
-//            // Expected
-//        }
-//    }
-
-    public void testSubscriberLegalAbstract() {
-        eventBus.register(new AbstractImpl());
-
-        eventBus.post("42");
-        assertEquals(1, eventCount.intValue());
-    }
-
-    @Subscribe
-    public void onEvent(String event) {
-        trackEvent(event);
-    }
-
-//    public static class NotPublic {
-//        @Subscribe
-//        void onEvent(String event) {
-//        }
-//    }
-
-    public static abstract class Abstract {
-        @Subscribe
-        public abstract void onEvent(String event);
-    }
-
-    public class AbstractImpl extends Abstract {
-
-        @Override
-        @Subscribe
-        public void onEvent(String event) {
-            trackEvent(event);
-        }
-
-    }
-
-//    public static class Static {
-//        @Subscribe
-//        public static void onEvent(String event) {
-//        }
-//    }
-
-}
diff --git a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/IntTestEvent.java b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/IntTestEvent.java
deleted file mode 100644
index db6fa83f..00000000
--- a/EventBusTestJava/src/main/java/org/greenrobot/eventbus/IntTestEvent.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Simple event storing an int value. More efficient than Integer because of the its flat hierarchy. 
- */
-package org.greenrobot.eventbus;
-
-public class IntTestEvent {
-    public final int value;
-
-    public IntTestEvent(int value) {
-        this.value = value;
-    }
-
-}
diff --git a/EventBusTestSubscriberInJar/build.gradle b/EventBusTestSubscriberInJar/build.gradle
deleted file mode 100644
index b75da33b..00000000
--- a/EventBusTestSubscriberInJar/build.gradle
+++ /dev/null
@@ -1,28 +0,0 @@
-apply plugin: 'java'
-
-group = 'de.greenrobot'
-version = '3.0.0'
-sourceCompatibility = 1.7
-
-configurations {
-    provided
-}
-
-dependencies {
-    compile project(':eventbus')
-    provided project(':eventbus-annotation-processor')
-}
-
-sourceSets {
-    main {
-        compileClasspath += configurations.provided
-        java {
-            srcDir 'src'
-        }
-    }
-}
-
-compileJava {
-    options.compilerArgs << '-AeventBusIndex=org.greenrobot.eventbus.InJarIndex'
-    options.fork = true
-}
diff --git a/EventBusTestSubscriberInJar/src/org/greenrobot/eventbus/SubscriberInJar.java b/EventBusTestSubscriberInJar/src/org/greenrobot/eventbus/SubscriberInJar.java
deleted file mode 100644
index 9d185207..00000000
--- a/EventBusTestSubscriberInJar/src/org/greenrobot/eventbus/SubscriberInJar.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package org.greenrobot.eventbus;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/** Helper class used by test inside a jar. */
-public class SubscriberInJar {
-    List<String> collectedStrings = new ArrayList<String>();
-
-    @Subscribe
-    public void collectString(String string) {
-        collectedStrings.add(string);
-    }
-
-    public List<String> getCollectedStrings() {
-        return collectedStrings;
-    }
-}
diff --git a/settings.gradle b/settings.gradle
index c25cd47e..693d331f 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,9 +1,9 @@
 include ':EventBus'
 include ':EventBusAnnotationProcessor'
-include ':EventBusTestJava'
-include ':EventBusTest'
-include ':EventBusTestSubscriberInJar'
-include ':EventBusPerformance'
+//include ':EventBusTestJava'
+//include ':EventBusTest'
+//include ':EventBusTestSubscriberInJar'
+//include ':EventBusPerformance'
 
 project(":EventBus").name = "eventbus"
 project(":EventBusAnnotationProcessor").name = "eventbus-annotation-processor"
\ No newline at end of file
