diff --git a/EventBus/src/org/greenrobot/eventbus/EventBus.java b/EventBus/src/org/greenrobot/eventbus/EventBus.java
index 1cd57e32..ce06b183 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBus.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java
@@ -52,6 +52,7 @@
     private final Map<Object, List<Class<?>>> typesBySubscriber;
     private final Map<Class<?>, Object> stickyEvents;
 
+
     private final ThreadLocal<PostingThreadState> currentPostingThreadState = new ThreadLocal<PostingThreadState>() {
         @Override
         protected PostingThreadState initialValue() {
@@ -65,6 +66,8 @@ protected PostingThreadState initialValue() {
     private final SubscriberMethodFinder subscriberMethodFinder;
     private final ExecutorService executorService;
 
+    private final ExtraEventProvider mExtraEventProvider;
+
     private final boolean throwSubscriberException;
     private final boolean logSubscriberExceptions;
     private final boolean logNoSubscriberMessages;
@@ -108,6 +111,7 @@ public EventBus() {
         subscriptionsByEventType = new HashMap<>();
         typesBySubscriber = new HashMap<>();
         stickyEvents = new ConcurrentHashMap<>();
+
         mainThreadPoster = new HandlerPoster(this, Looper.getMainLooper(), 10);
         backgroundPoster = new BackgroundPoster(this);
         asyncPoster = new AsyncPoster(this);
@@ -121,6 +125,8 @@ public EventBus() {
         throwSubscriberException = builder.throwSubscriberException;
         eventInheritance = builder.eventInheritance;
         executorService = builder.executorService;
+
+        mExtraEventProvider = new TagEventProvider();
     }
 
     /**
@@ -136,7 +142,10 @@ public void register(Object subscriber) {
         List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);
         synchronized (this) {
             for (SubscriberMethod subscriberMethod : subscriberMethods) {
-                subscribe(subscriber, subscriberMethod);
+                if(mExtraEventProvider!=null&&mExtraEventProvider.interesting(subscriberMethod))
+                    mExtraEventProvider.subscribe(subscriber,subscriberMethod);
+                else
+                    subscribe(subscriber, subscriberMethod);
             }
         }
     }
@@ -223,6 +232,8 @@ private void unsubscribeByEventType(Object subscriber, Class<?> eventType) {
 
     /** Unregisters the given subscriber from all event classes. */
     public synchronized void unregister(Object subscriber) {
+        if(mExtraEventProvider!=null)
+            mExtraEventProvider.unsubscribe(subscriber);
         List<Class<?>> subscribedTypes = typesBySubscriber.get(subscriber);
         if (subscribedTypes != null) {
             for (Class<?> eventType : subscribedTypes) {
@@ -257,6 +268,14 @@ public void post(Object event) {
         }
     }
 
+    public void postTagEvent(String tag){
+        postTagEvent(tag,null);
+    }
+
+    public void postTagEvent(String tag,Object event){
+        post(new TagEvent(tag,event));
+    }
+
     /**
      * Called from a subscriber's event handling method, further event delivery will be canceled. Subsequent
      * subscribers
@@ -361,8 +380,11 @@ public boolean hasSubscriberForEvent(Class<?> eventClass) {
 
     private void postSingleEvent(Object event, PostingThreadState postingState) throws Error {
         Class<?> eventClass = event.getClass();
+        if(mExtraEventProvider!=null&&mExtraEventProvider.interesting(event)){
+            eventClass = mExtraEventProvider.getClass(event);
+        }
         boolean subscriptionFound = false;
-        if (eventInheritance) {
+        if (eventInheritance&&eventClass!=null) {
             List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);
             int countTypes = eventTypes.size();
             for (int h = 0; h < countTypes; h++) {
@@ -386,7 +408,11 @@ private void postSingleEvent(Object event, PostingThreadState postingState) thro
     private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class<?> eventClass) {
         CopyOnWriteArrayList<Subscription> subscriptions;
         synchronized (this) {
-            subscriptions = subscriptionsByEventType.get(eventClass);
+            if(mExtraEventProvider!=null&&mExtraEventProvider.interesting(event)) {
+                subscriptions = mExtraEventProvider.getSubscription(event, eventClass);
+                event = mExtraEventProvider.getEvent(event);
+            }else
+                subscriptions = subscriptionsByEventType.get(eventClass);
         }
         if (subscriptions != null && !subscriptions.isEmpty()) {
             for (Subscription subscription : subscriptions) {
@@ -482,7 +508,10 @@ void invokeSubscriber(PendingPost pendingPost) {
 
     void invokeSubscriber(Subscription subscription, Object event) {
         try {
-            subscription.subscriberMethod.method.invoke(subscription.subscriber, event);
+            if(event!=null)
+                subscription.subscriberMethod.method.invoke(subscription.subscriber, event);
+            else
+                subscription.subscriberMethod.method.invoke(subscription.subscriber);
         } catch (InvocationTargetException e) {
             handleSubscriberException(subscription, event, e.getCause());
         } catch (IllegalAccessException e) {
diff --git a/EventBus/src/org/greenrobot/eventbus/ExtraEventProvider.java b/EventBus/src/org/greenrobot/eventbus/ExtraEventProvider.java
new file mode 100644
index 00000000..56622282
--- /dev/null
+++ b/EventBus/src/org/greenrobot/eventbus/ExtraEventProvider.java
@@ -0,0 +1,28 @@
+package org.greenrobot.eventbus;
+
+import java.util.concurrent.CopyOnWriteArrayList;
+
+/**
+ * Created by pool on 2016/7/12.
+ */
+public interface ExtraEventProvider {
+
+
+    boolean interesting(Object event);
+
+
+    boolean interesting(SubscriberMethod subscriberMethod);
+
+    void subscribe(Object subscriber, SubscriberMethod subscriberMethod);
+
+
+    boolean unsubscribe(Object subscriber);
+
+    CopyOnWriteArrayList<Subscription> getSubscription(Object object,Class<?> eventClass);
+
+
+    Class<?> getClass(Object event);
+
+    Object getEvent(Object event);
+
+}
diff --git a/EventBus/src/org/greenrobot/eventbus/Subscribe.java b/EventBus/src/org/greenrobot/eventbus/Subscribe.java
index ed0b8c82..fcf02ecc 100644
--- a/EventBus/src/org/greenrobot/eventbus/Subscribe.java
+++ b/EventBus/src/org/greenrobot/eventbus/Subscribe.java
@@ -40,5 +40,7 @@
      * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of
      * delivery among subscribers with different {@link ThreadMode}s! */
     int priority() default 0;
+
+    String tag() default "";
 }
 
diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
index 1d78d479..3cb09073 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethod.java
@@ -26,13 +26,14 @@
     final boolean sticky;
     /** Used for efficient comparison */
     String methodString;
-
-    public SubscriberMethod(Method method, Class<?> eventType, ThreadMode threadMode, int priority, boolean sticky) {
+    final String tag;
+    public SubscriberMethod(Method method, Class<?> eventType, ThreadMode threadMode, int priority, boolean sticky,String tag) {
         this.method = method;
         this.threadMode = threadMode;
         this.eventType = eventType;
         this.priority = priority;
         this.sticky = sticky;
+        this.tag = tag;
     }
 
     @Override
diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
index db5e0ad3..7f619a7e 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
@@ -137,8 +137,7 @@ private SubscriberInfo getSubscriberInfo(FindState findState) {
         return null;
     }
 
-    private List<SubscriberMethod> findUsingReflection(Class<?> subscriberClass) {
-        FindState findState = prepareFindState();
+    private List<SubscriberMethod> findUsingReflection(Class<?> subscriberClass) {        FindState findState = prepareFindState();
         findState.initForSubscriber(subscriberClass);
         while (findState.clazz != null) {
             findUsingReflectionInSingleClass(findState);
@@ -168,7 +167,7 @@ private void findUsingReflectionInSingleClass(FindState findState) {
                         if (findState.checkAdd(method, eventType)) {
                             ThreadMode threadMode = subscribeAnnotation.threadMode();
                             findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode,
-                                    subscribeAnnotation.priority(), subscribeAnnotation.sticky()));
+                                    subscribeAnnotation.priority(), subscribeAnnotation.sticky(), subscribeAnnotation.tag()));
                         }
                     }
                 } else if (strictMethodVerification && method.isAnnotationPresent(Subscribe.class)) {
diff --git a/EventBus/src/org/greenrobot/eventbus/TagEvent.java b/EventBus/src/org/greenrobot/eventbus/TagEvent.java
new file mode 100644
index 00000000..0c90e4b2
--- /dev/null
+++ b/EventBus/src/org/greenrobot/eventbus/TagEvent.java
@@ -0,0 +1,14 @@
+package org.greenrobot.eventbus;
+
+/**
+ * Created by pool on 2016/7/11.
+ */
+public final class TagEvent {
+    final String tag;
+    final Object event;
+
+    public TagEvent(String tag, Object event) {
+        this.event = event;
+        this.tag = tag;
+    }
+}
diff --git a/EventBus/src/org/greenrobot/eventbus/TagEventProvider.java b/EventBus/src/org/greenrobot/eventbus/TagEventProvider.java
new file mode 100644
index 00000000..2d9e46c0
--- /dev/null
+++ b/EventBus/src/org/greenrobot/eventbus/TagEventProvider.java
@@ -0,0 +1,133 @@
+package org.greenrobot.eventbus;
+
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.CopyOnWriteArrayList;
+
+/**
+ * Created by pool on 2016/7/12.
+ */
+public class TagEventProvider implements ExtraEventProvider {
+    private final Map<TagEventKey, CopyOnWriteArrayList<Subscription>> tagSubscriptionsByEventType;
+    private final Map<Object, List<TagEventKey>> tagTypesBySubscriber;
+
+    TagEventProvider() {
+        tagSubscriptionsByEventType = new HashMap<>();
+        tagTypesBySubscriber = new HashMap<>();
+    }
+
+    @Override
+    public boolean interesting(Object event) {
+        return event != null && TagEvent.class==event.getClass();
+    }
+
+    @Override
+    public boolean interesting(SubscriberMethod subscriberMethod) {
+        return subscriberMethod.tag != null && !subscriberMethod.tag.equals("");
+    }
+
+
+    @Override
+    public void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
+        List<TagEventKey> types = tagTypesBySubscriber.get(subscriber);
+        TagEventKey eventKey = new TagEventKey(subscriberMethod.tag, subscriberMethod.eventType);
+        if (types == null) {
+            types = new ArrayList<>();
+            types.add(eventKey);
+            tagTypesBySubscriber.put(subscriber,types);
+        } else {
+            if (types.contains(eventKey)) {
+                //already register
+            } else {
+                types.add(eventKey);
+            }
+        }
+        CopyOnWriteArrayList<Subscription> list = tagSubscriptionsByEventType.get(eventKey);
+        if (list == null) {
+            list = new CopyOnWriteArrayList<>();
+            tagSubscriptionsByEventType.put(eventKey, list);
+        }
+        list.add(new Subscription(subscriber, subscriberMethod));
+    }
+
+    @Override
+    public boolean unsubscribe(Object subscriber) {
+        List<TagEventKey> keys = tagTypesBySubscriber.get(subscriber);
+        if (keys != null) {
+            Subscription subscription;
+            TagEventKey key;
+            CopyOnWriteArrayList<Subscription> subscriptions;
+            int size;
+            for (int i = 0; i < keys.size(); i++) {
+                key = keys.get(i);
+                subscriptions = tagSubscriptionsByEventType.get(key);
+                size = subscriptions.size();
+                for (int j = 0; j < size; j++) {
+                    subscription = subscriptions.get(j);
+                    if (subscription.subscriber == subscriber) {
+                        subscription.active = false;
+                        subscriptions.remove(i);
+                        j--;
+                        size--;
+                    }
+                }
+            }
+            tagTypesBySubscriber.remove(subscriber);
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public CopyOnWriteArrayList<Subscription> getSubscription(Object object, Class<?> eventClass) {
+        TagEvent tagEvent = (TagEvent) object;
+        TagEventKey key = new TagEventKey(tagEvent.tag, eventClass);
+        return tagSubscriptionsByEventType.get(key);
+    }
+
+    @Override
+    public Class<?> getClass(Object event) {
+        TagEvent tagEvent = (TagEvent) event;
+        return  tagEvent.event!=null ? tagEvent.event.getClass():null ;
+    }
+
+    @Override
+    public Object getEvent(Object event) {
+        return ((TagEvent) event).event;
+    }
+
+
+    private static class TagEventKey {
+        final String tag;
+        final Class<?> eventType;
+
+        TagEventKey(String tag, Class<?> eventType) {
+            this.tag = tag;
+            this.eventType = eventType;
+        }
+
+        @Override
+        public int hashCode() {
+            int hashCode = tag.hashCode();
+            if (eventType != null)
+                hashCode ^= eventType.hashCode();
+            return hashCode;
+        }
+
+        @Override
+        public boolean equals(Object obj) {
+            if (obj == this)
+                return true;
+            if (obj instanceof TagEventKey) {
+                TagEventKey anObject = (TagEventKey) obj;
+                return tag.equals(anObject.tag) && eventType == anObject.eventType;
+            }
+            return false;
+        }
+    }
+
+
+}
diff --git a/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java b/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java
index b68de63a..f13f410c 100644
--- a/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java
+++ b/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java
@@ -46,7 +46,9 @@ public SubscriberInfo getSuperSubscriberInfo() {
         }
         try {
             return superSubscriberInfoClass.newInstance();
-        } catch (InstantiationException | IllegalAccessException e) {
+        } catch (InstantiationException e) {
+            throw new RuntimeException(e);
+        } catch (IllegalAccessException e) {
             throw new RuntimeException(e);
         }
     }
@@ -57,18 +59,23 @@ public boolean shouldCheckSuperclass() {
     }
 
     protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType) {
-        return createSubscriberMethod(methodName, eventType, ThreadMode.POSTING, 0, false);
+        return createSubscriberMethod(methodName, eventType, ThreadMode.POSTING, 0, false,"");
     }
 
     protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType, ThreadMode threadMode) {
-        return createSubscriberMethod(methodName, eventType, threadMode, 0, false);
+        return createSubscriberMethod(methodName, eventType, threadMode, 0, false,"");
     }
 
     protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType, ThreadMode threadMode,
-                                                      int priority, boolean sticky) {
+                                                      int priority, boolean sticky,String tag) {
         try {
-            Method method = subscriberClass.getDeclaredMethod(methodName, eventType);
-            return new SubscriberMethod(method, eventType, threadMode, priority, sticky);
+            Method method;
+            if(eventType == null){
+                  method = subscriberClass.getDeclaredMethod(methodName);
+            }else{
+                  method = subscriberClass.getDeclaredMethod(methodName, eventType);
+            }
+            return new SubscriberMethod(method, eventType, threadMode, priority, sticky,tag);
         } catch (NoSuchMethodException e) {
             throw new EventBusException("Could not find subscriber method in " + subscriberClass +
                     ". Maybe a missing ProGuard rule?", e);
diff --git a/EventBus/src/org/greenrobot/eventbus/meta/SimpleSubscriberInfo.java b/EventBus/src/org/greenrobot/eventbus/meta/SimpleSubscriberInfo.java
index 3ee4442d..f80f0ef1 100644
--- a/EventBus/src/org/greenrobot/eventbus/meta/SimpleSubscriberInfo.java
+++ b/EventBus/src/org/greenrobot/eventbus/meta/SimpleSubscriberInfo.java
@@ -36,7 +36,7 @@ public SimpleSubscriberInfo(Class subscriberClass, boolean shouldCheckSuperclass
         for (int i = 0; i < length; i++) {
             SubscriberMethodInfo info = methodInfos[i];
             methods[i] = createSubscriberMethod(info.methodName, info.eventType, info.threadMode,
-                    info.priority, info.sticky);
+                    info.priority, info.sticky, info.tag);
         }
         return methods;
     }
diff --git a/EventBus/src/org/greenrobot/eventbus/meta/SubscriberMethodInfo.java b/EventBus/src/org/greenrobot/eventbus/meta/SubscriberMethodInfo.java
index 2152554c..5a06ab84 100644
--- a/EventBus/src/org/greenrobot/eventbus/meta/SubscriberMethodInfo.java
+++ b/EventBus/src/org/greenrobot/eventbus/meta/SubscriberMethodInfo.java
@@ -23,22 +23,33 @@
     final Class<?> eventType;
     final int priority;
     final boolean sticky;
+    final String tag;
 
     public SubscriberMethodInfo(String methodName, Class<?> eventType, ThreadMode threadMode,
-                                int priority, boolean sticky) {
+                                int priority, boolean sticky, String tag) {
         this.methodName = methodName;
         this.threadMode = threadMode;
         this.eventType = eventType;
         this.priority = priority;
         this.sticky = sticky;
+        this.tag = tag;
     }
 
     public SubscriberMethodInfo(String methodName, Class<?> eventType) {
-        this(methodName, eventType, ThreadMode.POSTING, 0, false);
+        this(methodName, eventType, ThreadMode.POSTING, 0, false, "");
     }
 
+    public SubscriberMethodInfo(String methodName, Class<?> eventType, String tag) {
+        this(methodName, eventType, ThreadMode.POSTING, 0, false, tag);
+    }
+
+
     public SubscriberMethodInfo(String methodName, Class<?> eventType, ThreadMode threadMode) {
-        this(methodName, eventType, threadMode, 0, false);
+        this(methodName, eventType, threadMode, 0, false, "");
+    }
+
+    public SubscriberMethodInfo(String methodName, Class<?> eventType, ThreadMode threadMode, String tag) {
+        this(methodName, eventType, threadMode, 0, false, tag);
     }
 
 }
\ No newline at end of file
diff --git a/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java
index c37c18a5..964e8bf3 100644
--- a/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java
+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java
@@ -15,6 +15,7 @@
  */
 package org.greenrobot.eventbus.annotationprocessor;
 
+
 import org.greenrobot.eventbus.Subscribe;
 import org.greenrobot.eventbus.ThreadMode;
 
@@ -145,10 +146,18 @@ private boolean checkHasNoErrors(ExecutableElement element, Messager messager) {
         }
 
         List<? extends VariableElement> parameters = ((ExecutableElement) element).getParameters();
-        if (parameters.size() != 1) {
-            messager.printMessage(Diagnostic.Kind.ERROR, "Subscriber method must have exactly 1 parameter", element);
+        if (parameters.size() > 1) {
+            messager.printMessage(Diagnostic.Kind.ERROR, "Subscriber method parameter count must less than 2", element);
             return false;
         }
+
+        if(parameters.isEmpty()){
+            Subscribe subscribe =   element.getAnnotation(Subscribe.class);
+            if(subscribe!=null&&subscribe.tag().equals("")) {
+                messager.printMessage(Diagnostic.Kind.ERROR, "Subscriber method must have 1 parameter or not empty tag", element);
+                return false;
+            }
+        }
         return true;
     }
 
@@ -177,28 +186,30 @@ private void checkForSubscribersToSkip(Messager messager, String myPackage) {
                 if (methods != null) {
                     for (ExecutableElement method : methods) {
                         String skipReason = null;
-                        VariableElement param = method.getParameters().get(0);
-                        TypeMirror typeMirror = getParamTypeMirror(param, messager);
-                        if (!(typeMirror instanceof DeclaredType) ||
-                                !(((DeclaredType) typeMirror).asElement() instanceof TypeElement)) {
-                            skipReason = "event type cannot be processed";
-                        }
-                        if (skipReason == null) {
-                            TypeElement eventTypeElement = (TypeElement) ((DeclaredType) typeMirror).asElement();
-                            if (!isVisible(myPackage, eventTypeElement)) {
-                                skipReason = "event type is not public";
+                        if(!method.getParameters().isEmpty()) {
+                            VariableElement param = method.getParameters().get(0);
+                            TypeMirror typeMirror = getParamTypeMirror(param, messager);
+                            if (!(typeMirror instanceof DeclaredType) ||
+                                    !(((DeclaredType) typeMirror).asElement() instanceof TypeElement)) {
+                                skipReason = "event type cannot be processed";
                             }
-                        }
-                        if (skipReason != null) {
-                            boolean added = classesToSkip.add(skipCandidate);
-                            if (added) {
-                                String msg = "Falling back to reflection because " + skipReason;
-                                if (!subscriberClass.equals(skipCandidate)) {
-                                    msg += " (found in super class for " + skipCandidate + ")";
+                            if (skipReason == null) {
+                                TypeElement eventTypeElement = (TypeElement) ((DeclaredType) typeMirror).asElement();
+                                if (!isVisible(myPackage, eventTypeElement)) {
+                                    skipReason = "event type is not public";
                                 }
-                                messager.printMessage(Diagnostic.Kind.NOTE, msg, param);
                             }
-                            break;
+                            if (skipReason != null) {
+                                boolean added = classesToSkip.add(skipCandidate);
+                                if (added) {
+                                    String msg = "Falling back to reflection because " + skipReason;
+                                    if (!subscriberClass.equals(skipCandidate)) {
+                                        msg += " (found in super class for " + skipCandidate + ")";
+                                    }
+                                    messager.printMessage(Diagnostic.Kind.NOTE, msg, param);
+                                }
+                                break;
+                            }
                         }
                     }
                 }
@@ -274,34 +285,41 @@ private void writeCreateSubscriberMethods(BufferedWriter writer, List<Executable
                                               String callPrefix, String myPackage) throws IOException {
         for (ExecutableElement method : methods) {
             List<? extends VariableElement> parameters = method.getParameters();
-            TypeMirror paramType = getParamTypeMirror(parameters.get(0), null);
-            TypeElement paramElement = (TypeElement) processingEnv.getTypeUtils().asElement(paramType);
+            String eventClass;
             String methodName = method.getSimpleName().toString();
-            String eventClass = getClassString(paramElement, myPackage) + ".class";
-
+            TypeElement paramElement = null;
+            if(parameters==null||parameters.isEmpty()){
+                eventClass = "null";
+            }else{
+                TypeMirror paramType = getParamTypeMirror(parameters.get(0), null);
+                paramElement = (TypeElement) processingEnv.getTypeUtils().asElement(paramType);
+                eventClass = getClassString(paramElement, myPackage) + ".class";
+            }
             Subscribe subscribe = method.getAnnotation(Subscribe.class);
             List<String> parts = new ArrayList<>();
             parts.add(callPrefix + "(\"" + methodName + "\",");
-            String lineEnd = "),";
+            parts.add(eventClass);
             if (subscribe.priority() == 0 && !subscribe.sticky()) {
-                if (subscribe.threadMode() == ThreadMode.POSTING) {
-                    parts.add(eventClass + lineEnd);
-                } else {
-                    parts.add(eventClass + ",");
-                    parts.add("ThreadMode." + subscribe.threadMode().name() + lineEnd);
+                if (subscribe.threadMode() != ThreadMode.POSTING) {
+                    parts.add(",ThreadMode." + subscribe.threadMode().name() );
+                }
+                if(!subscribe.tag().equals("")){
+                    parts.add(",\""+subscribe.tag()+"\"");
                 }
             } else {
-                parts.add(eventClass + ",");
-                parts.add("ThreadMode." + subscribe.threadMode().name() + ",");
+                parts.add(",ThreadMode." + subscribe.threadMode().name() + ",");
                 parts.add(subscribe.priority() + ",");
-                parts.add(subscribe.sticky() + lineEnd);
+                parts.add(String.valueOf(subscribe.sticky()));
+                parts.add(",\""+subscribe.tag()+"\"");
             }
+            String lineEnd = "),";
+            parts.add(lineEnd);
             writeLine(writer, 3, parts.toArray(new String[parts.size()]));
 
             if (verbose) {
                 processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, "Indexed @Subscribe at " +
                         method.getEnclosingElement().getSimpleName() + "." + methodName +
-                        "(" + paramElement.getSimpleName() + ")");
+                        "(" + paramElement !=null?paramElement.getSimpleName():" " + ")");
             }
 
         }
diff --git a/EventBusPerformance/build.gradle b/EventBusPerformance/build.gradle
index fa9029dc..cfd6dbd5 100644
--- a/EventBusPerformance/build.gradle
+++ b/EventBusPerformance/build.gradle
@@ -4,7 +4,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.0'
+        classpath 'com.android.tools.build:gradle:2.1.2'
         classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
     }
 }
diff --git a/EventBusPerformance/res/layout/activity_setuptests.xml b/EventBusPerformance/res/layout/activity_setuptests.xml
index 27064758..236c81a9 100644
--- a/EventBusPerformance/res/layout/activity_setuptests.xml
+++ b/EventBusPerformance/res/layout/activity_setuptests.xml
@@ -131,6 +131,29 @@
                     android:layout_toLeftOf="@+id/editTextSubscribe"
                     android:text="@string/subscriberViewText" />
             </RelativeLayout>
+            <RelativeLayout
+                android:id="@+id/relativeLayoutForTag"
+                android:layout_width="fill_parent"
+                android:layout_height="fill_parent"
+                android:layout_marginBottom="8dp" >
+
+                <EditText
+                    android:id="@+id/editTextTagString"
+                    android:layout_width="90dp"
+                    android:layout_height="wrap_content"
+                    android:layout_alignParentRight="true"
+                    android:inputType="text"
+                    android:text="1" />
+
+                <TextView
+                    android:id="@+id/tagString"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_alignBaseline="@+id/editTextTagString"
+                    android:layout_alignParentLeft="true"
+                    android:layout_toLeftOf="@+id/editTextTagString"
+                    android:text="@string/tagViewText" />
+            </RelativeLayout>
         </LinearLayout>
     </ScrollView>
 
diff --git a/EventBusPerformance/res/values/strings.xml b/EventBusPerformance/res/values/strings.xml
index feed5953..98c205e8 100644
--- a/EventBusPerformance/res/values/strings.xml
+++ b/EventBusPerformance/res/values/strings.xml
@@ -10,6 +10,7 @@
     <string name="test_localBroadcast">Local Broadcast</string>
     <string name="eventViewText">Events:</string>
     <string name="subscriberViewText">Subscribers:</string>
+    <string name="tagViewText">Tag:</string>
     <string name="buttonStartText">Start</string>
 
     <string-array name="spinnerTestsToRun">
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestParams.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestParams.java
index 85ee4f13..0caa9cde 100644
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestParams.java
+++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestParams.java
@@ -31,6 +31,7 @@
     private boolean eventInheritance;
     private boolean ignoreGeneratedIndex;
     private int testNumber;
+    private String tag;
     private ArrayList<Class<? extends Test>> testClasses;
 
     public int getEventCount() {
@@ -97,4 +98,11 @@ public void setTestNumber(int testNumber) {
         this.testNumber = testNumber;
     }
 
+    public String getTag() {
+        return tag;
+    }
+
+    public void setTag(String tag) {
+        this.tag = tag;
+    }
 }
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunner.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunner.java
index 4c0f941f..a589cce2 100644
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunner.java
+++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunner.java
@@ -17,6 +17,7 @@
 package org.greenrobot.eventbusperf;
 
 import android.content.Context;
+import android.util.Log;
 
 import org.greenrobot.eventbus.EventBus;
 
@@ -28,9 +29,9 @@
  * This thread initialize all selected tests and runs them through. Also the thread skips the tests, when it is canceled
  */
 public class TestRunner extends Thread {
+    private final EventBus controlBus;
     private List<Test> tests;
     private volatile boolean canceled;
-    private final EventBus controlBus;
 
     public TestRunner(Context context, TestParams testParams, EventBus controlBus) {
         this.controlBus = controlBus;
@@ -59,10 +60,17 @@ public void run() {
                 Thread.sleep(300);
             } catch (InterruptedException e) {
             }
-
-            test.prepareTest();
+            try {
+                test.prepareTest();
+            } catch (Exception e) {
+                Log.e(getClass().getSimpleName(), "prepareTest :" + e.getMessage());
+            }
             if (!canceled) {
-                test.runTest();
+                try {
+                    test.runTest();
+                } catch (Exception e) {
+                    Log.e(getClass().getSimpleName(), "runTest :" + e.getMessage());
+                }
             }
             if (!canceled) {
                 boolean isLastEvent = idx == tests.size() - 1;
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java
index e22631c1..9f9c0092 100644
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java
+++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java
@@ -80,6 +80,32 @@ public void onEventMainThread(TestFinishedEvent event) {
         }
     }
 
+
+//    @Subscribe(threadMode = ThreadMode.MAIN,tag = "test")
+//    public void onEventMainThread(){
+//        String text = "<b>" + "tag event  without  argument" + "</b><br/>" ;
+//        text += "<br/>----------------<br/>";
+//        textViewResult.append(Html.fromHtml(text));
+//    }
+
+//    @Subscribe(threadMode = ThreadMode.MAIN,tag = "test")
+//    public void onEventMainThreadWithTag(TestFinishedEvent event){
+//        Test test = event.test;
+//        String text = "<b> tag event with argument " + test.getDisplayName() + "</b><br/>" + //
+//                test.getPrimaryResultMicros() + " micro seconds<br/>" + //
+//                ((int) test.getPrimaryResultRate()) + "/s<br/>";
+//        if (test.getOtherTestResults() != null) {
+//            text += test.getOtherTestResults();
+//        }
+//        text += "<br/>----------------<br/>";
+//        textViewResult.append(Html.fromHtml(text));
+//        if (event.isLastEvent) {
+//            findViewById(R.id.buttonCancel).setVisibility(View.GONE);
+//            findViewById(R.id.textViewTestRunning).setVisibility(View.GONE);
+//            findViewById(R.id.buttonKillProcess).setVisibility(View.VISIBLE);
+//        }
+//    }
+
     public void onClickCancel(View view) {
         // Cancel asap
         if (testRunner != null) {
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java
index 3488b8da..1043a89b 100644
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java
+++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java
@@ -24,6 +24,7 @@
 import android.widget.CheckBox;
 import android.widget.EditText;
 import android.widget.Spinner;
+import android.widget.TextView;
 
 import org.greenrobot.eventbus.ThreadMode;
 
@@ -87,6 +88,8 @@ public void startClick(View v) {
         EditText editTextSubscriber = (EditText) findViewById(R.id.editTextSubscribe);
         params.setSubscriberCount(Integer.parseInt(editTextSubscriber.getText().toString()));
 
+        params.setTag(((TextView)findViewById(R.id.editTextTagString)).getText().toString());
+
         Spinner spinnerTestToRun = (Spinner) findViewById(R.id.spinnerTestToRun);
         int testPos = spinnerTestToRun.getSelectedItemPosition();
         params.setTestNumber(testPos + 1);
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestEventBus.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestEventBus.java
index 7ceb8e6d..577feab3 100644
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestEventBus.java
+++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestEventBus.java
@@ -17,9 +17,11 @@
 package org.greenrobot.eventbusperf.testsubject;
 
 import android.content.Context;
+import android.util.Log;
 
 import org.greenrobot.eventbus.EventBus;
 import org.greenrobot.eventbus.Subscribe;
+import org.greenrobot.eventbus.TagEvent;
 import org.greenrobot.eventbus.ThreadMode;
 
 import java.lang.reflect.Constructor;
@@ -96,9 +98,18 @@ public void prepareTest() {
         }
 
         public void runTest() {
-            TestEvent event = new TestEvent();
+            Object event =null;
             long timeStart = System.nanoTime();
             for (int i = 0; i < super.eventCount; i++) {
+                event =  new TestEvent();
+                switch (i%3){
+                    case 1:
+                        event = new TagEvent(params.getTag(),event);
+                        break;
+                    case 2:
+                        event =  new TagEvent(params.getTag(),null);
+                        break;
+                }
                 super.eventBus.post(event);
                 if (canceled) {
                     break;
@@ -206,8 +217,21 @@ public String getDisplayName() {
     }
 
     public class SubscribeClassEventBusMain {
-        @Subscribe(threadMode = ThreadMode.MAIN)
+        @Subscribe(threadMode = ThreadMode.MAIN,tag = "test")
         public void onEventMainThread(TestEvent event) {
+            Log.d("test", "receive tag event on MainThread");
+            eventsReceivedCount.incrementAndGet();
+        }
+
+        @Subscribe(threadMode = ThreadMode.MAIN)
+        public void onEventMainThreadWithOutTag(TestEvent event) {
+            Log.d("test", "receive event on MainThread");
+            eventsReceivedCount.incrementAndGet();
+        }
+
+        @Subscribe(threadMode = ThreadMode.MAIN ,tag = "test")
+        public void onEventMainThreadWithOutArgument() {
+            Log.d("test", "receive event on MainThread with no type");
             eventsReceivedCount.incrementAndGet();
         }
 
@@ -228,7 +252,7 @@ public void dummy5() {
     }
 
     public class SubscribeClassEventBusBackground {
-        @Subscribe(threadMode = ThreadMode.BACKGROUND)
+        @Subscribe(threadMode = ThreadMode.BACKGROUND )
         public void onEventBackgroundThread(TestEvent event) {
             eventsReceivedCount.incrementAndGet();
         }
@@ -250,7 +274,31 @@ public void dummy5() {
     }
 
     public class SubscriberClassEventBusAsync {
-        @Subscribe(threadMode = ThreadMode.ASYNC)
+        @Subscribe(threadMode = ThreadMode.ASYNC )
+        public void onEventAsync(TestEvent event) {
+            eventsReceivedCount.incrementAndGet();
+        }
+
+        public void dummy() {
+        }
+
+        public void dummy2() {
+        }
+
+        public void dummy3() {
+        }
+
+        public void dummy4() {
+        }
+
+        public void dummy5() {
+        }
+    }
+
+
+
+    public class SubscriberClassEventBusTag {
+        @Subscribe(threadMode = ThreadMode.MAIN ,tag = "test")
         public void onEventAsync(TestEvent event) {
             eventsReceivedCount.incrementAndGet();
         }
@@ -271,6 +319,9 @@ public void dummy5() {
         }
     }
 
+
+
+
     private long registerSubscribers() {
         long time = 0;
         for (Object subscriber : subscribers) {
diff --git a/EventBusTest/build.gradle b/EventBusTest/build.gradle
index bb877369..a043c71d 100644
--- a/EventBusTest/build.gradle
+++ b/EventBusTest/build.gradle
@@ -4,7 +4,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.0'
+        classpath 'com.android.tools.build:gradle:2.1.2'
         classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
     }
 }
