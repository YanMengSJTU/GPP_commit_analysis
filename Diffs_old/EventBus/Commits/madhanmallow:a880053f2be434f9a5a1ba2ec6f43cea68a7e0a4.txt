diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/Test.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/Test.java
index ee2d405d..02aa3b66 100644
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/Test.java
+++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/Test.java
@@ -21,22 +21,21 @@
 import java.util.concurrent.atomic.AtomicLong;
 
 public abstract class Test {
-    protected final Context context;
-    protected final TestParams params;
     public final AtomicLong eventsReceivedCount = new AtomicLong();
-    protected long primaryResultMicros;
-    protected int primaryResultCount;
-    protected String otherTestResults;
-
-    protected boolean canceled;
+    protected final Context mContext;
+    protected final TestParams mParams;
+    protected long mPrimaryResultMicros;
+    protected int mPrimaryResultCount;
+    protected String mOtherTestResults;
+    protected boolean mCanceled;
 
     public Test(Context context, TestParams params) {
-        this.context = context;
-        this.params = params;
+        this.mContext = context;
+        this.mParams = params;
     }
 
     public void cancel() {
-        canceled = true;
+        mCanceled = true;
     }
 
     /** prepares the test, all things which are not relevant for test results */
@@ -58,15 +57,15 @@ protected void waitForReceivedEventCount(int expectedEventCount) {
     }
 
     public long getPrimaryResultMicros() {
-        return primaryResultMicros;
+        return mPrimaryResultMicros;
     }
 
     public double getPrimaryResultRate() {
-        return primaryResultCount / (primaryResultMicros / 1000000d);
+        return mPrimaryResultCount / (mPrimaryResultMicros / 1000000d);
     }
 
     public String getOtherTestResults() {
-        return otherTestResults;
+        return mOtherTestResults;
     }
 
 }
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestFinishedEvent.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestFinishedEvent.java
index 9e1a5594..4259adc5 100644
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestFinishedEvent.java
+++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestFinishedEvent.java
@@ -17,7 +17,6 @@
 package org.greenrobot.eventbusperf;
 
 public class TestFinishedEvent {
-
     public final Test test;
     public final boolean isLastEvent;
 
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunner.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunner.java
index 4c0f941f..64b7235b 100644
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunner.java
+++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunner.java
@@ -28,19 +28,19 @@
  * This thread initialize all selected tests and runs them through. Also the thread skips the tests, when it is canceled
  */
 public class TestRunner extends Thread {
-    private List<Test> tests;
-    private volatile boolean canceled;
     private final EventBus controlBus;
+    private List<Test> mTests;
+    private volatile boolean mCanceled;
 
     public TestRunner(Context context, TestParams testParams, EventBus controlBus) {
         this.controlBus = controlBus;
-        tests = new ArrayList<Test>();
+        mTests = new ArrayList<Test>();
         for (Class<? extends Test> testClazz : testParams.getTestClasses()) {
             try {
                 Constructor<?>[] constructors = testClazz.getConstructors();
                 Constructor<? extends Test> constructor = testClazz.getConstructor(Context.class, TestParams.class);
                 Test test = constructor.newInstance(context, testParams);
-                tests.add(test);
+                mTests.add(test);
             } catch (Exception e) {
                 throw new RuntimeException(e);
             }
@@ -48,9 +48,8 @@ public TestRunner(Context context, TestParams testParams, EventBus controlBus) {
     }
 
     public void run() {
-
         int idx = 0;
-        for (Test test : tests) {
+        for (Test test : mTests) {
             // Clean up and let the main thread calm down
             System.gc();
             try {
@@ -61,26 +60,25 @@ public void run() {
             }
 
             test.prepareTest();
-            if (!canceled) {
+            if (!mCanceled) {
                 test.runTest();
             }
-            if (!canceled) {
-                boolean isLastEvent = idx == tests.size() - 1;
+            if (!mCanceled) {
+                boolean isLastEvent = idx == mTests.size() - 1;
                 controlBus.post(new TestFinishedEvent(test, isLastEvent));
             }
             idx++;
         }
-
     }
 
     public List<Test> getTests() {
-        return tests;
+        return mTests;
     }
 
     public void cancel() {
-        canceled = true;
-        for (Test test : tests) {
+        mCanceled = true;
+        for (Test test : mTests) {
             test.cancel();
         }
     }
-}
+}
\ No newline at end of file
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java
index e22631c1..3aa6ed42 100644
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java
+++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java
@@ -33,32 +33,31 @@
  * test are finished, it cancels the timer.
  */
 public class TestRunnerActivity extends Activity {
-
-    private TestRunner testRunner;
-    private EventBus controlBus;
-    private TextView textViewResult;
+    private TestRunner mTestRunner;
+    private EventBus mControlBus;
+    private TextView mTextViewResult;
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_runtests);
-        textViewResult = (TextView) findViewById(R.id.textViewResult);
-        controlBus = new EventBus();
-        controlBus.register(this);
+        mTextViewResult = (TextView) findViewById(R.id.textViewResult);
+        mControlBus = new EventBus();
+        mControlBus.register(this);
     }
 
     @Override
     protected void onResume() {
         super.onResume();
-        if (testRunner == null) {
+        if (mTestRunner == null) {
             TestParams testParams = (TestParams) getIntent().getSerializableExtra("params");
-            testRunner = new TestRunner(getApplicationContext(), testParams, controlBus);
+            mTestRunner = new TestRunner(getApplicationContext(), testParams, mControlBus);
 
             if (testParams.getTestNumber() == 1) {
-                textViewResult.append("Events: " + testParams.getEventCount() + "\n");
+                mTextViewResult.append("Events: " + testParams.getEventCount() + "\n");
             }
-            textViewResult.append("Subscribers: " + testParams.getSubscriberCount() + "\n\n");
-            testRunner.start();
+            mTextViewResult.append("Subscribers: " + testParams.getSubscriberCount() + "\n\n");
+            mTestRunner.start();
         }
     }
 
@@ -72,7 +71,7 @@ public void onEventMainThread(TestFinishedEvent event) {
             text += test.getOtherTestResults();
         }
         text += "<br/>----------------<br/>";
-        textViewResult.append(Html.fromHtml(text));
+        mTextViewResult.append(Html.fromHtml(text));
         if (event.isLastEvent) {
             findViewById(R.id.buttonCancel).setVisibility(View.GONE);
             findViewById(R.id.textViewTestRunning).setVisibility(View.GONE);
@@ -82,9 +81,9 @@ public void onEventMainThread(TestFinishedEvent event) {
 
     public void onClickCancel(View view) {
         // Cancel asap
-        if (testRunner != null) {
-            testRunner.cancel();
-            testRunner = null;
+        if (mTestRunner != null) {
+            mTestRunner.cancel();
+            mTestRunner = null;
         }
         finish();
     }
@@ -94,10 +93,10 @@ public void onClickKillProcess(View view) {
     }
 
     public void onDestroy() {
-        if (testRunner != null) {
-            testRunner.cancel();
+        if (mTestRunner != null) {
+            mTestRunner.cancel();
         }
-        controlBus.unregister(this);
+        mControlBus.unregister(this);
         super.onDestroy();
     }
 }
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java
index 3488b8da..2b38b96f 100644
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java
+++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java
@@ -26,14 +26,12 @@
 import android.widget.Spinner;
 
 import org.greenrobot.eventbus.ThreadMode;
-
-import java.util.ArrayList;
-
 import org.greenrobot.eventbusperf.testsubject.PerfTestEventBus;
 import org.greenrobot.eventbusperf.testsubject.PerfTestOtto;
 
-public class TestSetupActivity extends Activity {
+import java.util.ArrayList;
 
+public class TestSetupActivity extends Activity {
     @SuppressWarnings("rawtypes")
     static final Class[] TEST_CLASSES_EVENTBUS = {PerfTestEventBus.Post.class,//
             PerfTestEventBus.RegisterOneByOne.class,//
@@ -49,7 +47,6 @@
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_setuptests);
-
         Spinner spinnerRun = (Spinner) findViewById(R.id.spinnerTestToRun);
         spinnerRun.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
 
@@ -117,7 +114,6 @@ public void startClick(View v) {
         }
         if (checkBoxLocalBroadcast.isChecked()) {
         }
-
         return testClasses;
     }
 }
\ No newline at end of file
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestEventBus.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestEventBus.java
index 7ceb8e6d..711a6aa9 100644
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestEventBus.java
+++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestEventBus.java
@@ -21,16 +21,15 @@
 import org.greenrobot.eventbus.EventBus;
 import org.greenrobot.eventbus.Subscribe;
 import org.greenrobot.eventbus.ThreadMode;
-
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-
 import org.greenrobot.eventbusperf.MyEventBusIndex;
 import org.greenrobot.eventbusperf.Test;
 import org.greenrobot.eventbusperf.TestEvent;
 import org.greenrobot.eventbusperf.TestParams;
 
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+
 public abstract class PerfTestEventBus extends Test {
 
     private final EventBus eventBus;
@@ -49,11 +48,17 @@ public PerfTestEventBus(Context context, TestParams params) {
         subscriberClass = getSubscriberClassForThreadMode();
     }
 
+    private static String getDisplayModifier(TestParams params) {
+        String inheritance = params.isEventInheritance() ? "" : ", no event inheritance";
+        String ignoreIndex = params.isIgnoreGeneratedIndex() ? ", ignore index" : "";
+        return inheritance + ignoreIndex;
+    }
+
     @Override
     public void prepareTest() {
         try {
             Constructor<?> constructor = subscriberClass.getConstructor(PerfTestEventBus.class);
-            for (int i = 0; i < params.getSubscriberCount(); i++) {
+            for (int i = 0; i < mParams.getSubscriberCount(); i++) {
                 Object subscriber = constructor.newInstance(this);
                 subscribers.add(subscriber);
             }
@@ -63,7 +68,7 @@ public void prepareTest() {
     }
 
     private Class<?> getSubscriberClassForThreadMode() {
-        switch (params.getThreadMode()) {
+        switch (mParams.getThreadMode()) {
             case MAIN:
                 return SubscribeClassEventBusMain.class;
             case BACKGROUND:
@@ -73,16 +78,31 @@ public void prepareTest() {
             case POSTING:
                 return SubscribeClassEventBusDefault.class;
             default:
-                throw new RuntimeException("Unknown: " + params.getThreadMode());
+                throw new RuntimeException("Unknown: " + mParams.getThreadMode());
         }
     }
 
-    private static String getDisplayModifier(TestParams params) {
-        String inheritance = params.isEventInheritance() ? "" : ", no event inheritance";
-        String ignoreIndex = params.isIgnoreGeneratedIndex() ? ", ignore index" : "";
-        return inheritance + ignoreIndex;
+    private long registerSubscribers() {
+        long time = 0;
+        for (Object subscriber : subscribers) {
+            long timeStart = System.nanoTime();
+            eventBus.register(subscriber);
+            long timeEnd = System.nanoTime();
+            time += timeEnd - timeStart;
+            if (mCanceled) {
+                return 0;
+            }
+        }
+        return time;
     }
 
+    private void registerUnregisterOneSubscribers() {
+        if (!subscribers.isEmpty()) {
+            Object subscriber = subscribers.get(0);
+            eventBus.register(subscriber);
+            eventBus.unregister(subscriber);
+        }
+    }
 
     public static class Post extends PerfTestEventBus {
         public Post(Context context, TestParams params) {
@@ -100,7 +120,7 @@ public void runTest() {
             long timeStart = System.nanoTime();
             for (int i = 0; i < super.eventCount; i++) {
                 super.eventBus.post(event);
-                if (canceled) {
+                if (mCanceled) {
                     break;
                 }
             }
@@ -108,17 +128,17 @@ public void runTest() {
             waitForReceivedEventCount(super.expectedEventCount);
             long timeAllReceived = System.nanoTime();
 
-            primaryResultMicros = (timeAfterPosting - timeStart) / 1000;
-            primaryResultCount = super.expectedEventCount;
+            mPrimaryResultMicros = (timeAfterPosting - timeStart) / 1000;
+            mPrimaryResultCount = super.expectedEventCount;
             long deliveredMicros = (timeAllReceived - timeStart) / 1000;
-            int deliveryRate = (int) (primaryResultCount / (deliveredMicros / 1000000d));
-            otherTestResults = "Post and delivery time: " + deliveredMicros + " micros<br/>" + //
+            int deliveryRate = (int) (mPrimaryResultCount / (deliveredMicros / 1000000d));
+            mOtherTestResults = "Post and delivery time: " + deliveredMicros + " micros<br/>" + //
                     "Post and delivery rate: " + deliveryRate + "/s";
         }
 
         @Override
         public String getDisplayName() {
-            return "EventBus Post Events, " + params.getThreadMode() + getDisplayModifier(params);
+            return "EventBus Post Events, " + mParams.getThreadMode() + getDisplayModifier(mParams);
         }
 
     }
@@ -131,13 +151,13 @@ public RegisterAll(Context context, TestParams params) {
         public void runTest() {
             super.registerUnregisterOneSubscribers();
             long timeNanos = super.registerSubscribers();
-            primaryResultMicros = timeNanos / 1000;
-            primaryResultCount = params.getSubscriberCount();
+            mPrimaryResultMicros = timeNanos / 1000;
+            mPrimaryResultCount = mParams.getSubscriberCount();
         }
 
         @Override
         public String getDisplayName() {
-            return "EventBus Register, no unregister" + getDisplayModifier(params);
+            return "EventBus Register, no unregister" + getDisplayModifier(mParams);
         }
     }
 
@@ -170,18 +190,18 @@ public void runTest() {
                 long timeRegister = end - beforeRegister - timeMeasureOverhead;
                 time += timeRegister;
                 super.eventBus.unregister(subscriber);
-                if (canceled) {
+                if (mCanceled) {
                     return;
                 }
             }
 
-            primaryResultMicros = time / 1000;
-            primaryResultCount = params.getSubscriberCount();
+            mPrimaryResultMicros = time / 1000;
+            mPrimaryResultCount = mParams.getSubscriberCount();
         }
 
         @Override
         public String getDisplayName() {
-            return "EventBus Register" + getDisplayModifier(params);
+            return "EventBus Register" + getDisplayModifier(mParams);
         }
     }
 
@@ -200,7 +220,7 @@ public RegisterFirstTime(Context context, TestParams params) {
 
         @Override
         public String getDisplayName() {
-            return "EventBus Register, first time"+ getDisplayModifier(params);
+            return "EventBus Register, first time" + getDisplayModifier(mParams);
         }
 
     }
@@ -271,26 +291,4 @@ public void dummy5() {
         }
     }
 
-    private long registerSubscribers() {
-        long time = 0;
-        for (Object subscriber : subscribers) {
-            long timeStart = System.nanoTime();
-            eventBus.register(subscriber);
-            long timeEnd = System.nanoTime();
-            time += timeEnd - timeStart;
-            if (canceled) {
-                return 0;
-            }
-        }
-        return time;
-    }
-
-    private void registerUnregisterOneSubscribers() {
-        if (!subscribers.isEmpty()) {
-            Object subscriber = subscribers.get(0);
-            eventBus.register(subscriber);
-            eventBus.unregister(subscriber);
-        }
-    }
-
 }
diff --git a/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestOtto.java b/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestOtto.java
index 646256ed..bb710907 100644
--- a/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestOtto.java
+++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestOtto.java
@@ -24,15 +24,15 @@
 import com.squareup.otto.Subscribe;
 import com.squareup.otto.ThreadEnforcer;
 
+import org.greenrobot.eventbusperf.Test;
+import org.greenrobot.eventbusperf.TestEvent;
+import org.greenrobot.eventbusperf.TestParams;
+
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.greenrobot.eventbusperf.Test;
-import org.greenrobot.eventbusperf.TestEvent;
-import org.greenrobot.eventbusperf.TestParams;
-
 public abstract class PerfTestOtto extends Test {
 
     private final Bus eventBus;
@@ -56,7 +56,7 @@ public void prepareTest() {
 
         try {
             Constructor<?> constructor = subscriberClass.getConstructor(PerfTestOtto.class);
-            for (int i = 0; i < params.getSubscriberCount(); i++) {
+            for (int i = 0; i < mParams.getSubscriberCount(); i++) {
                 Object subscriber = constructor.newInstance(this);
                 subscribers.add(subscriber);
             }
@@ -65,6 +65,28 @@ public void prepareTest() {
         }
     }
 
+    private long registerSubscribers() {
+        long time = 0;
+        for (Object subscriber : subscribers) {
+            long timeStart = System.nanoTime();
+            eventBus.register(subscriber);
+            long timeEnd = System.nanoTime();
+            time += timeEnd - timeStart;
+            if (mCanceled) {
+                return 0;
+            }
+        }
+        return time;
+    }
+
+    private void registerUnregisterOneSubscribers() {
+        if (!subscribers.isEmpty()) {
+            Object subscriber = subscribers.get(0);
+            eventBus.register(subscriber);
+            eventBus.unregister(subscriber);
+        }
+    }
+
     public static class Post extends PerfTestOtto {
         public Post(Context context, TestParams params) {
             super(context, params);
@@ -81,15 +103,15 @@ public void runTest() {
             long timeStart = System.nanoTime();
             for (int i = 0; i < super.eventCount; i++) {
                 super.eventBus.post(event);
-                if (canceled) {
+                if (mCanceled) {
                     break;
                 }
             }
             long timeAfterPosting = System.nanoTime();
             waitForReceivedEventCount(super.expectedEventCount);
 
-            primaryResultMicros = (timeAfterPosting - timeStart) / 1000;
-            primaryResultCount = super.expectedEventCount;
+            mPrimaryResultMicros = (timeAfterPosting - timeStart) / 1000;
+            mPrimaryResultCount = super.expectedEventCount;
         }
 
         @Override
@@ -106,8 +128,8 @@ public RegisterAll(Context context, TestParams params) {
         public void runTest() {
             super.registerUnregisterOneSubscribers();
             long timeNanos = super.registerSubscribers();
-            primaryResultMicros = timeNanos / 1000;
-            primaryResultCount = params.getSubscriberCount();
+            mPrimaryResultMicros = timeNanos / 1000;
+            mPrimaryResultCount = mParams.getSubscriberCount();
         }
 
         @Override
@@ -147,13 +169,13 @@ public void runTest() {
                 long timeRegister = end - beforeRegister - timeMeasureOverhead;
                 time += timeRegister;
                 super.eventBus.unregister(subscriber);
-                if (canceled) {
+                if (mCanceled) {
                     return;
                 }
             }
 
-            primaryResultMicros = time / 1000;
-            primaryResultCount = params.getSubscriberCount();
+            mPrimaryResultMicros = time / 1000;
+            mPrimaryResultCount = mParams.getSubscriberCount();
         }
 
         @Override
@@ -208,26 +230,4 @@ public void dummy5() {
 
     }
 
-    private long registerSubscribers() {
-        long time = 0;
-        for (Object subscriber : subscribers) {
-            long timeStart = System.nanoTime();
-            eventBus.register(subscriber);
-            long timeEnd = System.nanoTime();
-            time += timeEnd - timeStart;
-            if (canceled) {
-                return 0;
-            }
-        }
-        return time;
-    }
-
-    private void registerUnregisterOneSubscribers() {
-        if (!subscribers.isEmpty()) {
-            Object subscriber = subscribers.get(0);
-            eventBus.register(subscriber);
-            eventBus.unregister(subscriber);
-        }
-    }
-
 }
