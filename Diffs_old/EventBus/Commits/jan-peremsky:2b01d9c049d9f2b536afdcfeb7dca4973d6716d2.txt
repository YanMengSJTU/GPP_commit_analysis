diff --git a/EventBus/src/de/greenrobot/event/BackgroundPoster.java b/EventBus/src/de/greenrobot/event/BackgroundPoster.java
index 0de32924..dc807cc3 100644
--- a/EventBus/src/de/greenrobot/event/BackgroundPoster.java
+++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java
@@ -33,11 +33,6 @@
 
     private volatile boolean executorRunning;
 
-
-    BackgroundPoster(EventBus eventBus) {
-        this(eventBus, eventBus.getExecutorService(), "EventBusBackgroundThread");
-    }
-
     BackgroundPoster(EventBus eventBus, ExecutorService executorService, String name) {
         this.eventBus = eventBus;
         this.executorService = executorService;
diff --git a/EventBus/src/de/greenrobot/event/BackgroundPosterProvider.java b/EventBus/src/de/greenrobot/event/BackgroundPosterProvider.java
index 6de9cba7..d88442f0 100644
--- a/EventBus/src/de/greenrobot/event/BackgroundPosterProvider.java
+++ b/EventBus/src/de/greenrobot/event/BackgroundPosterProvider.java
@@ -8,6 +8,8 @@
 public interface BackgroundPosterProvider {
     void register(String name, ExecutorService service) throws EventBusException;
 
+    void unregister(String name) throws EventBusException;
+
     boolean posterExists(String name);
 
     BackgroundPoster getPoster(String name);
diff --git a/EventBus/src/de/greenrobot/event/BackgroundPosterProviderImpl.java b/EventBus/src/de/greenrobot/event/BackgroundPosterProviderImpl.java
index fedef76b..671e921e 100644
--- a/EventBus/src/de/greenrobot/event/BackgroundPosterProviderImpl.java
+++ b/EventBus/src/de/greenrobot/event/BackgroundPosterProviderImpl.java
@@ -25,6 +25,14 @@ public void register(String name, ExecutorService service) throws EventBusExcept
         backgroundPosterMap.put(name, backgroundPoster);
     }
 
+    @Override
+    public void unregister(String name) throws EventBusException {
+        if (!backgroundPosterMap.containsKey(name)) {
+            throw new EventBusException("Executor with name " + name + " is not registered");
+        }
+        backgroundPosterMap.remove(name);
+    }
+
     @Override
     public boolean posterExists(String name) {
         return backgroundPosterMap.containsKey(name);
diff --git a/EventBus/src/de/greenrobot/event/EventBus.java b/EventBus/src/de/greenrobot/event/EventBus.java
index 256cc2b7..d0ad4a02 100644
--- a/EventBus/src/de/greenrobot/event/EventBus.java
+++ b/EventBus/src/de/greenrobot/event/EventBus.java
@@ -108,7 +108,6 @@ public EventBus(EventBusBuilder builder) {
         typesBySubscriber = new HashMap<Object, List<Class<?>>>();
         stickyEvents = new ConcurrentHashMap<Class<?>, Object>();
         mainThreadPoster = new HandlerPoster(this, Looper.getMainLooper(), 10);
-        backgroundPoster = new BackgroundPoster(this);
         asyncPoster = new AsyncPoster(this);
         subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);
         logSubscriberExceptions = builder.logSubscriberExceptions;
@@ -118,6 +117,7 @@ public EventBus(EventBusBuilder builder) {
         throwSubscriberException = builder.throwSubscriberException;
         eventInheritance = builder.eventInheritance;
         executorService = builder.executorService;
+        backgroundPoster = new BackgroundPoster(this, executorService, "EventBusBackgroundThread");
         backgroundPosterProvider = new BackgroundPosterProviderImpl(this);
     }
 
@@ -130,6 +130,14 @@ public void registerExecutor(String name, ExecutorService executorService) {
         backgroundPosterProvider.register(name, executorService);
     }
 
+    public void unregisterExecutor(String name) {
+        backgroundPosterProvider.unregister(name);
+    }
+
+    public void executorIsRegistered(String name) {
+        backgroundPosterProvider.posterExists(name);
+    }
+
     /**
      * Registers the given subscriber to receive events. Subscribers must call {@link #unregister(Object)} once they
      * are no longer interested in receiving events.
