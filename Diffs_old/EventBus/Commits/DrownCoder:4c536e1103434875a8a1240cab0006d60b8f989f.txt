diff --git a/EventBus/src/org/greenrobot/eventbus/EventBus.java b/EventBus/src/org/greenrobot/eventbus/EventBus.java
index e9560219..72ab1463 100644
--- a/EventBus/src/org/greenrobot/eventbus/EventBus.java
+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java
@@ -155,6 +155,7 @@ public void register(Object subscriber) {
     private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
         Class<?> eventType = subscriberMethod.eventType;
         //new了一个Subscription对象
+        //每次都会new了一个Subscription对象，subsciber代表我们的订阅者MainActivity.class, subscriberMethod代表其中的一个订阅的方法。
         Subscription newSubscription = new Subscription(subscriber, subscriberMethod);
         //判断是否有以Event.class为key
         CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);
@@ -163,14 +164,15 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {
             subscriptions = new CopyOnWriteArrayList<>();
             subscriptionsByEventType.put(eventType, subscriptions);
         } else {
-            //注册过，就不要重复注册
+            //说明存在多个订阅者订阅该事件
             if (subscriptions.contains(newSubscription)) {
                 throw new EventBusException("Subscriber " + subscriber.getClass() + " already registered to event "
                         + eventType);
             }
         }
 
-        int size = subscriptions.size();
+        //如果长度不为0代表该事件有大于一个订阅者，或一个订阅中中有多个订阅方法订阅这个Event，相同参数名的方法
+       int size = subscriptions.size();
         for (int i = 0; i <= size; i++) {
             if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {
                 //按优先级加入
diff --git a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
index e6eeb0df..792478c5 100644
--- a/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java
@@ -270,10 +270,12 @@ private boolean checkAddWithMethodSignature(Method method, Class<?> eventType) {
             Class<?> methodClass = method.getDeclaringClass();
             Class<?> methodClassOld = subscriberClassByMethodKey.put(methodKey, methodClass);
             if (methodClassOld == null || methodClassOld.isAssignableFrom(methodClass)) {
+                //methodClassOld = null，说明时方法名不同的情况，直接返回true，会加入订阅。
                 //返回true
                 // Only add if not already found in a sub class
                 return true;
             } else {
+                //methodClass一定是methodClassOld的父类，因为是向上遍历的，所以父类的方法不会被加入订阅
                 // Revert the put, old class is further down the class hierarchy
                 subscriberClassByMethodKey.put(methodKey, methodClassOld);
                 return false;
