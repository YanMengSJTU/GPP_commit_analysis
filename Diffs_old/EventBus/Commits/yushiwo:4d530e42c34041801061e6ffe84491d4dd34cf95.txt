diff --git a/.travis.yml b/.travis.yml
index f2076297..e086ce10 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -6,7 +6,7 @@ jdk:
 # http://docs.travis-ci.com/user/languages/android/
 android:
   components:
-    - build-tools-21.0.2
+    - build-tools-21.1.2
     - android-10
 
 before_script:
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 2db0fc27..1db6f10c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,6 @@
+### V2.x.x (2015-0x-xx) Future release
+* Registering for sticky events now considers sticky events of subclasses, not just the exact same event type. This makes the semantic consistent to posting events. Note, that this may lead to subscribers being called more than once if matching sticky events of event type subclasses are available.
+
 ### V2.4.0 (2014-11-11) Clean up release
 * Removed deprecated APIs: A year ago in Version 2.2.0, a couple of EventBus methods were deprecated and flagged to be removed in a future release. Well, version 2.4.0 is that release. Clean ups like this one keep the API concise and simple.
 
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 00000000..8e7aee90
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,44 @@
+Before you create an Issue...
+=============================
+
+There are better Places for Support
+-----------------------------------
+Please be aware that an issue tracker is not the best place to ask for support. An issue tracker is used to track issues (bugs or feature requests).
+Instead, please use [stackoverflow.com](http://stackoverflow.com/questions/tagged/greenrobot-eventbus?sort=frequent) and use the tag [greenrobot-eventbus](http://stackoverflow.com/tags/greenrobot-eventbus/info) for your question.
+If you want professional support, you can contact the main author and maintainer [Markus Junginger via Google+](https://plus.google.com/+MarkusJunginger/posts).
+
+Examples for support questions better asked elsewhere:
+
+* Asking how something works
+* Asking how to use EventBus in a specific scenario
+* Your app crashes/misbehaves and you are not sure why
+
+The perfect Issue Report
+------------------------
+A couple of simple steps can save time for everyone.
+
+Check before reporting:
+
+* It's not a support inquiry
+* You have read the docs
+* You searched the web and stackoverflow
+* You searched existing issues to avoid duplicates
+
+Reporting bugs:
+
+ * Please investigate if is the bug is really caused by the library. Isolate the issue: what's the minimal code to reproduce the bug?
+ * Bonus steps to gain extra karma points: once you isolated and identified the issue, you can prepare an push request. Submit an unit test causing the bug, and ideally a fix for the bug.
+
+Requesting features:
+
+ * Ask yourself: is the feature useful for a majority users? One of our major goals is to keep the API simple and concise. We do not want to cover all possible use cases, but those that make 80% of users happy.
+
+A Note on Pull Requests
+=======================
+Pull requests (and issue) may queue up up a bit. Usually, pull requests and issues are checked when new releases are planned.
+
+For bigger pull requests, it's a good idea to check with the maintainer upfront about the idea and the implementation outline.
+
+Thanks for reading!
+===================
+It's your contributions and feedback that makes maintaining this library fun.
diff --git a/EventBus/build.gradle b/EventBus/build.gradle
index 153a6440..b377bf64 100644
--- a/EventBus/build.gradle
+++ b/EventBus/build.gradle
@@ -3,7 +3,7 @@ apply plugin: 'maven'
 apply plugin: 'signing'
 
 group = 'de.greenrobot'
-version = '2.4.0'
+version = '2.4.1-SNAPSHOT'
 sourceCompatibility = 1.6
 
 def isSnapshot = version.endsWith('-SNAPSHOT')
diff --git a/EventBus/src/de/greenrobot/event/EventBus.java b/EventBus/src/de/greenrobot/event/EventBus.java
index 4bac5cbe..95863ade 100644
--- a/EventBus/src/de/greenrobot/event/EventBus.java
+++ b/EventBus/src/de/greenrobot/event/EventBus.java
@@ -23,6 +23,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.ExecutorService;
@@ -200,18 +201,34 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boo
         subscribedEvents.add(eventType);
 
         if (sticky) {
-            Object stickyEvent;
-            synchronized (stickyEvents) {
-                stickyEvent = stickyEvents.get(eventType);
-            }
-            if (stickyEvent != null) {
-                // If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)
-                // --> Strange corner case, which we don't take care of here.
-                postToSubscription(newSubscription, stickyEvent, Looper.getMainLooper() == Looper.myLooper());
+            if (eventInheritance) {
+                // Existing sticky events of all subclasses of eventType have to be considered.
+                // Note: Iterating over all events may be inefficient with lots of sticky events,
+                // thus data structure should be changed to allow a more efficient lookup
+                // (e.g. an additional map storing sub classes of super classes: Class -> List<Class>).
+                Set<Map.Entry<Class<?>, Object>> entries = stickyEvents.entrySet();
+                for (Map.Entry<Class<?>, Object> entry : entries) {
+                    Class<?> candidateEventType = entry.getKey();
+                    if (eventType.isAssignableFrom(candidateEventType)) {
+                        Object stickyEvent = entry.getValue();
+                        checkPostStickyEventToSubscription(newSubscription, stickyEvent);
+                    }
+                }
+            } else {
+                Object stickyEvent = stickyEvents.get(eventType);
+                checkPostStickyEventToSubscription(newSubscription, stickyEvent);
             }
         }
     }
 
+    private void checkPostStickyEventToSubscription(Subscription newSubscription, Object stickyEvent) {
+        if (stickyEvent != null) {
+            // If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)
+            // --> Strange corner case, which we don't take care of here.
+            postToSubscription(newSubscription, stickyEvent, Looper.getMainLooper() == Looper.myLooper());
+        }
+    }
+
     public synchronized boolean isRegistered(Object subscriber) {
         return typesBySubscriber.containsKey(subscriber);
     }
diff --git a/EventBusPerformance/build.gradle b/EventBusPerformance/build.gradle
index cd15599a..570c64b0 100644
--- a/EventBusPerformance/build.gradle
+++ b/EventBusPerformance/build.gradle
@@ -4,7 +4,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:0.13.3'
+        classpath 'com.android.tools.build:gradle:1.1.0'
     }
 }
 
@@ -20,7 +20,7 @@ dependencies {
 }
 
 android {
-    buildToolsVersion '20.0.0'
+    buildToolsVersion '21.1.2'
     compileSdkVersion 19
 
     sourceSets {
diff --git a/EventBusTest/build.gradle b/EventBusTest/build.gradle
index 169fa718..2f48f9c5 100644
--- a/EventBusTest/build.gradle
+++ b/EventBusTest/build.gradle
@@ -4,7 +4,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:0.13.3'
+        classpath 'com.android.tools.build:gradle:1.1.0'
     }
 }
 
@@ -19,7 +19,7 @@ dependencies {
 }
 
 android {
-    buildToolsVersion '20.0.0'
+    buildToolsVersion '21.1.2'
     compileSdkVersion 19
 
     sourceSets {
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusInheritanceDisabledTest.java b/EventBusTest/src/de/greenrobot/event/test/EventBusInheritanceDisabledTest.java
new file mode 100644
index 00000000..43aaf467
--- /dev/null
+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusInheritanceDisabledTest.java
@@ -0,0 +1,164 @@
+/*
+ * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package de.greenrobot.event.test;
+
+import de.greenrobot.event.EventBus;
+import junit.framework.TestCase;
+
+/**
+ * @author Markus Junginger, greenrobot
+ */
+public class EventBusInheritanceDisabledTest extends TestCase {
+
+    private EventBus eventBus;
+
+    protected int countMyEventExtended;
+    protected int countMyEvent;
+    protected int countObjectEvent;
+    private int countMyEventInterface;
+    private int countMyEventInterfaceExtended;
+
+    protected void setUp() throws Exception {
+        super.setUp();
+        eventBus = EventBus.builder().eventInheritance(false).build();
+    }
+
+    public void testEventClassHierarchy() {
+        eventBus.register(this);
+
+        eventBus.post("Hello");
+        assertEquals(0, countObjectEvent);
+
+        eventBus.post(new MyEvent());
+        assertEquals(0, countObjectEvent);
+        assertEquals(1, countMyEvent);
+
+        eventBus.post(new MyEventExtended());
+        assertEquals(0, countObjectEvent);
+        assertEquals(1, countMyEvent);
+        assertEquals(1, countMyEventExtended);
+    }
+
+    public void testEventClassHierarchySticky() {
+        eventBus.postSticky("Hello");
+        eventBus.postSticky(new MyEvent());
+        eventBus.postSticky(new MyEventExtended());
+        eventBus.registerSticky(this);
+        assertEquals(1, countMyEventExtended);
+        assertEquals(1, countMyEvent);
+        assertEquals(0, countObjectEvent);
+    }
+
+    public void testEventInterfaceHierarchy() {
+        eventBus.register(this);
+
+        eventBus.post(new MyEvent());
+        assertEquals(0, countMyEventInterface);
+
+        eventBus.post(new MyEventExtended());
+        assertEquals(0, countMyEventInterface);
+        assertEquals(0, countMyEventInterfaceExtended);
+    }
+
+    public void testEventSuperInterfaceHierarchy() {
+        eventBus.register(this);
+
+        eventBus.post(new MyEventInterfaceExtended() {
+        });
+        assertEquals(0, countMyEventInterface);
+        assertEquals(0, countMyEventInterfaceExtended);
+    }
+
+    public void testSubscriberClassHierarchy() {
+        SubscriberExtended subscriber = new SubscriberExtended();
+        eventBus.register(subscriber);
+
+        eventBus.post("Hello");
+        assertEquals(0, subscriber.countObjectEvent);
+
+        eventBus.post(new MyEvent());
+        assertEquals(0, subscriber.countObjectEvent);
+        assertEquals(0, subscriber.countMyEvent);
+        assertEquals(1, subscriber.countMyEventOverwritten);
+
+        eventBus.post(new MyEventExtended());
+        assertEquals(0, subscriber.countObjectEvent);
+        assertEquals(0, subscriber.countMyEvent);
+        assertEquals(1, subscriber.countMyEventExtended);
+        assertEquals(1, subscriber.countMyEventOverwritten);
+    }
+
+    public void testSubscriberClassHierarchyWithoutNewSubscriberMethod() {
+        SubscriberExtendedWithoutNewSubscriberMethod subscriber = new SubscriberExtendedWithoutNewSubscriberMethod();
+        eventBus.register(subscriber);
+
+        eventBus.post("Hello");
+        assertEquals(0, subscriber.countObjectEvent);
+
+        eventBus.post(new MyEvent());
+        assertEquals(0, subscriber.countObjectEvent);
+        assertEquals(1, subscriber.countMyEvent);
+
+        eventBus.post(new MyEventExtended());
+        assertEquals(0, subscriber.countObjectEvent);
+        assertEquals(1, subscriber.countMyEvent);
+        assertEquals(1, subscriber.countMyEventExtended);
+    }
+
+    public void onEvent(Object event) {
+        countObjectEvent++;
+    }
+
+    public void onEvent(MyEvent event) {
+        countMyEvent++;
+    }
+
+    public void onEvent(MyEventExtended event) {
+        countMyEventExtended++;
+    }
+
+    public void onEvent(MyEventInterface event) {
+        countMyEventInterface++;
+    }
+
+    public void onEvent(MyEventInterfaceExtended event) {
+        countMyEventInterfaceExtended++;
+    }
+
+    static interface MyEventInterface {
+    }
+
+    static class MyEvent implements MyEventInterface {
+    }
+
+    static interface MyEventInterfaceExtended extends MyEventInterface {
+    }
+
+    static class MyEventExtended extends MyEvent implements MyEventInterfaceExtended {
+    }
+
+    static class SubscriberExtended extends EventBusInheritanceDisabledTest {
+        private int countMyEventOverwritten;
+
+        public void onEvent(MyEvent event) {
+            countMyEventOverwritten++;
+        }
+    }
+
+    static class SubscriberExtendedWithoutNewSubscriberMethod extends EventBusInheritanceDisabledTest {
+    }
+
+}
diff --git a/EventBusTest/src/de/greenrobot/event/test/EventBusInheritanceTest.java b/EventBusTest/src/de/greenrobot/event/test/EventBusInheritanceTest.java
index 27e3d7b7..10384951 100644
--- a/EventBusTest/src/de/greenrobot/event/test/EventBusInheritanceTest.java
+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusInheritanceTest.java
@@ -52,6 +52,16 @@ public void testEventClassHierarchy() {
         assertEquals(1, countMyEventExtended);
     }
 
+    public void testEventClassHierarchySticky() {
+        eventBus.postSticky("Hello");
+        eventBus.postSticky(new MyEvent());
+        eventBus.postSticky(new MyEventExtended());
+        eventBus.registerSticky(this);
+        assertEquals(1, countMyEventExtended);
+        assertEquals(2, countMyEvent);
+        assertEquals(3, countObjectEvent);
+    }
+
     public void testEventInterfaceHierarchy() {
         eventBus.register(this);
 
@@ -91,6 +101,23 @@ public void testSubscriberClassHierarchy() {
         assertEquals(2, subscriber.countMyEventOverwritten);
     }
 
+    public void testSubscriberClassHierarchyWithoutNewSubscriberMethod() {
+        SubscriberExtendedWithoutNewSubscriberMethod subscriber = new SubscriberExtendedWithoutNewSubscriberMethod();
+        eventBus.register(subscriber);
+
+        eventBus.post("Hello");
+        assertEquals(1, subscriber.countObjectEvent);
+
+        eventBus.post(new MyEvent());
+        assertEquals(2, subscriber.countObjectEvent);
+        assertEquals(1, subscriber.countMyEvent);
+
+        eventBus.post(new MyEventExtended());
+        assertEquals(3, subscriber.countObjectEvent);
+        assertEquals(2, subscriber.countMyEvent);
+        assertEquals(1, subscriber.countMyEventExtended);
+    }
+
     public void onEvent(Object event) {
         countObjectEvent++;
     }
@@ -131,4 +158,7 @@ public void onEvent(MyEvent event) {
         }
     }
 
+    static class SubscriberExtendedWithoutNewSubscriberMethod extends EventBusInheritanceTest {
+    }
+
 }
diff --git a/HOWTO.md b/HOWTO.md
index ab0729ca..8661770c 100644
--- a/HOWTO.md
+++ b/HOWTO.md
@@ -113,7 +113,7 @@ EventBus 2.3 added EventBusBuilder to configure various aspects of EventBus. For
     EventBus eventBus = EventBus.builder().logNoSubscriberMessages(false).sendNoSubscriberEvent(false).build();
 ```
 
-Another example is to fail when a subscriber throws an exception. Note: by default, EventBus catches exceptions thrown from onEvent methods and sends an SubscriberExceptionEvent that may but do not have to be handled.
+Another example is to fail when a subscriber throws an exception. Note: by default, EventBus catches exceptions thrown from onEvent methods and sends a SubscriberExceptionEvent that may but do not have to be handled.
 
 ```java
     EventBus eventBus = EventBus.builder().throwSubscriberException(true).build();
@@ -122,7 +122,7 @@ Another example is to fail when a subscriber throws an exception. Note: by defau
 Check the EventBusBuilder class and its JavaDoc for all possible configuration possibilities.
 
 ### Configure the default EventBus instance ###
-Using EventBus.getDefault() is a simple way to get an shared EventBus instance. EventBusBuilder also allows to configure this default instance using the method <code>installDefaultEventBus()</code>.
+Using EventBus.getDefault() is a simple way to get a shared EventBus instance. EventBusBuilder also allows to configure this default instance using the method <code>installDefaultEventBus()</code>.
 
 For example, it's possible to configure the default EventBus instance to rethrow exceptions, which occurred in onEvent methods. But let's to this only for DEBUG builds, because this will likely crash the app on exceptions:
 
@@ -152,7 +152,7 @@ Sticky Events
 -------------
 Some events carry information that is of interest after the event is posted. For example, this could be an event signalizing that some initialization is complete. Or if you have some sensor or location data and you want to hold on the most recent values. Instead of implementing your own caching, you can use sticky events. EventBus keeps the last sticky event of a certain type in memory. The sticky event can be delivered to subscribers or queried explicitly. Thus, you don't need any special logic to consider already available data.
 
-Let's say, an sticky event was posted some time ago:
+Let's say, a sticky event was posted some time ago:
 ```java
     EventBus.getDefault().postSticky(new MessageEvent("Hello everyone!"));
 ```
@@ -186,7 +186,9 @@ It's also possible to remove previously posted sticky events using one of the re
 ProGuard configuration
 ----------------------
 ProGuard obfuscates method names. However, the onEvent methods must not renamed because they are accessed using reflection. Use the following snip in your ProGuard configuration file (proguard.cfg):
-<pre><code>-keepclassmembers class ** {
+
+```
+-keepclassmembers class ** {
     public void onEvent*(**);
 }
 
@@ -194,7 +196,7 @@ ProGuard obfuscates method names. However, the onEvent methods must not renamed
 -keepclassmembers class * extends de.greenrobot.event.util.ThrowableFailureEvent {
     <init>(java.lang.Throwable);
 }
-</code></pre>
+```
 
 
 AsyncExecutor
@@ -237,7 +239,7 @@ AsyncExecutor Builder
 ---------------------
 If you want to customize your AsyncExecutor instance, call the static method AsyncExecutor.builder(). It will return a builder which lets you customize the EventBus instance, the thread pool, and the class of the failure event.
 
-Another customization options is the execution scope, which gives failure events context information. For example, an failure event may be relevant only to a specific Activity instance or class. If your custom failure event class implements the HasExecutionScope interface, AsyncExecutor will set the execution scope automatically. Like this, your subscriber can query the failure event for its execution scope and react depending on it.
+Another customization options is the execution scope, which gives failure events context information. For example, a failure event may be relevant only to a specific Activity instance or class. If your custom failure event class implements the HasExecutionScope interface, AsyncExecutor will set the execution scope automatically. Like this, your subscriber can query the failure event for its execution scope and react depending on it.
 
 
 Comparison with Square's Otto
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 3d0dee6e..c97a8bdb 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 2583d2d1..c8dcd502 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Sat Nov 08 10:08:52 CET 2014
+#Sun Feb 22 14:20:02 CET 2015
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
