diff --git a/src/main/java/com/samczsun/skype4j/internal/EventType.java b/src/main/java/com/samczsun/skype4j/internal/EventType.java
index ae9f900..5f54cef 100644
--- a/src/main/java/com/samczsun/skype4j/internal/EventType.java
+++ b/src/main/java/com/samczsun/skype4j/internal/EventType.java
@@ -31,17 +31,11 @@
     NEW_MESSAGE("NewMessage") {
         @Override
         public void handle(SkypeImpl skype, JsonObject eventObj) throws SkypeException, IOException {
-
             JsonObject resource = eventObj.get("resource").asObject();
             String type = Utils.getString(resource, "messagetype");
-            String content = Utils.getString(resource, "content");
             try {
-                if (content == null) {
-                    MessageType.TEXT_INTERNAL.handle(skype, resource);
-                } else {
-                    Validate.notNull(type, "Null type");
-                    MessageType.getByName(type).handle(skype, resource);
-                }
+                Validate.notNull(type, "Null type");
+                MessageType.getByName(type).handle(skype, resource);
             } catch (Throwable t) {
                 t.addSuppressed(new SkypeException(resource.toString()));
                 throw t;
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java b/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
index 1520777..d2e1f9d 100644
--- a/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
+++ b/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
@@ -80,8 +80,8 @@ public void login() throws InvalidCredentialsException, ConnectionException, Wro
 
         String MSPOK = authorize.cookie("MSPOK");
         if (MSPOK == null) {
-          IOException e = new IOException("Error while connecting to Live: MSPOK not set.");
-          logger.log(Level.SEVERE, "", e);
+            IOException e = new IOException("Error while connecting to Live: MSPOK not set.");
+            logger.log(Level.SEVERE, "", e);
             try {
                 throw e;
             } catch (IOException ex) {
@@ -91,22 +91,22 @@ public void login() throws InvalidCredentialsException, ConnectionException, Wro
 
         Elements PPFTs = null;
         for (int i = 0; i < authorize.body().length(); i++) {
-          i = authorize.body().indexOf("<input", i);
-          if (i == -1) {
-            break;
-          }
-          int j = authorize.body().indexOf(">", i);
-          if (j == -1) {
-            break;
-          }
-          PPFTs = Jsoup.parseBodyFragment(authorize.body().substring(i, j + ">".length())).select("input[name=PPFT][value]");
-          if (!PPFTs.isEmpty()) {
-            break;
-          }
+            i = authorize.body().indexOf("<input", i);
+            if (i == -1) {
+                break;
+            }
+            int j = authorize.body().indexOf(">", i);
+            if (j == -1) {
+                break;
+            }
+            PPFTs = Jsoup.parseBodyFragment(authorize.body().substring(i, j + ">".length())).select("input[name=PPFT][value]");
+            if (!PPFTs.isEmpty()) {
+                break;
+            }
         }
         if (PPFTs == null || PPFTs.isEmpty()) {
-          IOException e = new IOException("Error while connecting to Live: PPFT not found.");
-          logger.log(Level.SEVERE, "", e);
+            IOException e = new IOException("Error while connecting to Live: PPFT not found.");
+            logger.log(Level.SEVERE, "", e);
             try {
                 throw e;
             } catch (IOException ex) {
@@ -118,10 +118,10 @@ public void login() throws InvalidCredentialsException, ConnectionException, Wro
         String postUrl = SERVER_HOSTNAME + "/ppsecure/post.srf?client_id=00000000480BC46C&scope=service%3A%3Alw.skype.com%3A%3AMBI_SSL&response_type=token&redirect_uri=https%3A%2F%2Flogin.live.com%2Foauth20_desktop.srf&state=999&locale=en";
         int urlStart = authorize.body().indexOf("urlPost:'");
         if (urlStart != -1) {
-          int urlEnd = authorize.body().indexOf('\'', urlStart + "urlPost:'".length());
-          if (urlEnd != 1) {
-            postUrl = authorize.body().substring(urlStart + "urlPost:'".length(), urlEnd);
-          }
+            int urlEnd = authorize.body().indexOf('\'', urlStart + "urlPost:'".length());
+            if (urlEnd != 1) {
+                postUrl = authorize.body().substring(urlStart + "urlPost:'".length(), urlEnd);
+            }
         }
 
         Connection.Response post = null;
@@ -135,11 +135,11 @@ public void login() throws InvalidCredentialsException, ConnectionException, Wro
             int end;
             end = post.body().indexOf('\'', index + "sErrTxt:'".length());
             while (post.body().charAt(end - 1) == '\\') {
-              end = post.body().indexOf('\'', end + 1);
+                end = post.body().indexOf('\'', end + 1);
             }
             if (index == -1 || end == -1) {
-              IOException e = new IOException("Error while connecting to Live: not redirected, no reason given.");
-              logger.log(Level.SEVERE, "", e);
+                IOException e = new IOException("Error while connecting to Live: not redirected, no reason given.");
+                logger.log(Level.SEVERE, "", e);
                 try {
                     throw e;
                 } catch (IOException ex) {
@@ -149,39 +149,39 @@ public void login() throws InvalidCredentialsException, ConnectionException, Wro
 
             String errMessage = post.body().substring(index + "sErrTxt:'".length(), end);
             if ((errMessage.contains("account") || errMessage.contains("password")) && errMessage.contains("incorrect")) {
-              WrongPasswordException e = new WrongPasswordException("Error while connecting to Live: " + errMessage);
-              logger.severe(e.toString());
-              throw e;
+                WrongPasswordException e = new WrongPasswordException("Error while connecting to Live: " + errMessage);
+                logger.severe(e.toString());
+                throw e;
             } else if (errMessage.toLowerCase().contains("microsoft account doesn\\'t exist")) {
-              AccountNotFoundException e = new AccountNotFoundException("Error while connecting to Live: " + errMessage);
-              logger.severe(e.toString());
-              throw e;
+                AccountNotFoundException e = new AccountNotFoundException("Error while connecting to Live: " + errMessage);
+                logger.severe(e.toString());
+                throw e;
             } else {
-              IOException e = new IOException("Error while connecting to Live: " + errMessage);
-              logger.severe(e.toString());
+                IOException e = new IOException("Error while connecting to Live: " + errMessage);
+                logger.severe(e.toString());
                 try {
                     throw e;
                 } catch (IOException ex) {
                     Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
                 }
             }
-          }
+        }
 
         String url = post.header("Location");
 
         int refreshTokenStart = url.indexOf("refresh_token=");
         if (refreshTokenStart == -1) {
-          IOException e = new IOException("Error while connecting to Live: refresh token not found.");
-          logger.log(Level.SEVERE, "", e);
-                try {
-                    throw e;
-                } catch (IOException ex) {
-                    Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
-                }
+            IOException e = new IOException("Error while connecting to Live: refresh token not found.");
+            logger.log(Level.SEVERE, "", e);
+            try {
+                throw e;
+            } catch (IOException ex) {
+                Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+            }
         }
         int refreshTokenEnd = url.indexOf('&', refreshTokenStart + "refresh_token=".length());
         if (refreshTokenEnd == -1) {
-          refreshTokenEnd = url.length();
+            refreshTokenEnd = url.length();
         }
         String refreshToken = url.substring(refreshTokenStart + "refresh_token=".length(), refreshTokenEnd);
         try {
@@ -192,17 +192,17 @@ public void login() throws InvalidCredentialsException, ConnectionException, Wro
 
         int accessTokenStart = url.indexOf("access_token=");
         if (accessTokenStart == -1) {
-          IOException e = new IOException("Error while connecting to Live: access token not found.");
-          logger.log(Level.SEVERE, "", e);
-                try {
-                    throw e;
-                } catch (IOException ex) {
-                    Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
-                }
+            IOException e = new IOException("Error while connecting to Live: access token not found.");
+            logger.log(Level.SEVERE, "", e);
+            try {
+                throw e;
+            } catch (IOException ex) {
+                Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+            }
         }
         int accessTokenEnd = url.indexOf('&', accessTokenStart + "access_token=".length());
         if (accessTokenEnd == -1) {
-          accessTokenEnd = url.length();
+            accessTokenEnd = url.length();
         }
         String accessToken = url.substring(accessTokenStart + "access_token=".length(), accessTokenEnd);
         try {
@@ -214,14 +214,14 @@ public void login() throws InvalidCredentialsException, ConnectionException, Wro
         int expires = 86400;
         int expiresStart = url.indexOf("expires_in=");
         if (expiresStart != -1) {
-          int expiresEnd = url.indexOf('&', expiresStart + "expires_in=".length());
-          if (expiresEnd == -1) {
-            expiresEnd = url.length();
-          }
-          try {
-            expires = Integer.parseInt(url.substring(expiresStart, expiresEnd));
-          } catch (NumberFormatException ignore) {
-          }
+            int expiresEnd = url.indexOf('&', expiresStart + "expires_in=".length());
+            if (expiresEnd == -1) {
+                expiresEnd = url.length();
+            }
+            try {
+                expires = Integer.parseInt(url.substring(expiresStart, expiresEnd));
+            } catch (NumberFormatException ignore) {
+            }
         }
 
 
@@ -332,6 +332,7 @@ public void getContactRequests(boolean fromWebsocket) throws ConnectionException
                         getEventDispatcher().callEvent(event);
                     }
                 } catch (ParseException e) {
+                    System.out.println(time + " " + sender + " " + message);
                     getLogger().log(Level.WARNING, "Could not parse date for contact request", e);
                 }
             }
