diff --git a/pom.xml b/pom.xml
index b2af275..edf6cf8 100644
--- a/pom.xml
+++ b/pom.xml
@@ -2,7 +2,7 @@
     <modelVersion>4.0.0</modelVersion>
     <groupId>com.samczsun</groupId>
     <artifactId>skype4j</artifactId>
-    <version>0.2.0-SNAPSHOT</version>
+    <version>0.2.0-ARGUS-SNAPSHOT</version>
     <name>Skype4J</name>
     <description>A Skype API written in Java. P2P chats are not supported</description>
     <url>https://github.com/samczsun/Skype4J</url>
@@ -11,6 +11,10 @@
             <name>Sam Sun</name>
             <email>github@samczsun.com</email>
         </developer>
+        <developer>
+            <name>Alexey Semennikov</name>
+            <email>a.semennikov@argustelecom.ru</email>
+        </developer>
     </developers>
     <licenses>
         <license>
@@ -23,21 +27,12 @@
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     </properties>
     <scm>
-        <url>git@github.com:samczsun/Skype4J.git</url>
-        <connection>scm:git:git@github.com:samczsun/Skype4J.git</connection>
-        <developerConnection>scm:git:git@github.com:samczsun/Skype4J.git</developerConnection>
+        <url>https://github.com/alsem/Skype4J.git</url>
+        <connection>scm:git:git@github.com:alsem/Skype4J.git</connection>
+        <developerConnection>scm:git:git@github.com:alsem/Skype4J.git</developerConnection>
       <tag>HEAD</tag>
   </scm>
-    <distributionManagement>
-        <snapshotRepository>
-            <id>ossrh</id>
-            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
-        </snapshotRepository>
-        <repository>
-            <id>ossrh</id>
-            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
-        </repository>
-    </distributionManagement>
+
     <build>
         <sourceDirectory>src/main/java</sourceDirectory>
         <resources>
@@ -111,20 +106,6 @@
                     </execution>
                 </executions>
             </plugin>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-gpg-plugin</artifactId>
-                <version>1.6</version>
-                <executions>
-                    <execution>
-                        <id>sign-artifacts</id>
-                        <phase>verify</phase>
-                        <goals>
-                            <goal>sign</goal>
-                        </goals>
-                    </execution>
-                </executions>
-            </plugin>
         </plugins>
     </build>
     <dependencies>
@@ -152,6 +133,29 @@
             <artifactId>Java-WebSocket</artifactId>
             <version>1.3.0</version>
         </dependency>
+        <!--MS live -->
+        <dependency>
+            <groupId>com.squareup.okhttp3</groupId>
+            <artifactId>okhttp</artifactId>
+            <version>3.8.1</version>
+        </dependency>
+        <dependency>
+            <groupId>com.squareup.okio</groupId>
+            <artifactId>okio</artifactId>
+            <version>1.13.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-lang3</artifactId>
+            <version>3.5</version>
+        </dependency>
+        <dependency>
+            <groupId>org.json</groupId>
+            <artifactId>json</artifactId>
+            <version>20160810</version>
+        </dependency>
+
         <dependency>
             <groupId>org.mockito</groupId>
             <artifactId>mockito-all</artifactId>
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/LiveLoginHelper.java b/src/main/java/com/samczsun/skype4j/internal/client/LiveLoginHelper.java
new file mode 100644
index 0000000..11391c7
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/internal/client/LiveLoginHelper.java
@@ -0,0 +1,197 @@
+package com.samczsun.skype4j.internal.client;
+
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+import org.apache.commons.lang3.StringEscapeUtils;
+import org.json.JSONArray;
+import org.json.JSONObject;
+import org.jsoup.Connection;
+import org.jsoup.Jsoup;
+
+import java.text.SimpleDateFormat;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+/**
+ * Класс для поддержки авторизации учетных записей microsoft, где в качестве имени пользователя - адрес email
+ */
+public class LiveLoginHelper {
+	public static final String SCOPE = "lw.skype.com";
+	public static final String RPS = "https://api.skype.com/rps/skypetoken";
+	public static final String SOAP_URL = "https://login.live.com:443/RST2.srf";
+	public static final String SOAP_PAYLOAD = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
+			"<s:Envelope xmlns:s=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:saml=\"urn:oasis:names:tc:SAML:1.0:assertion\" xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" xmlns:wsa=\"http://www.w3.org/2005/08/addressing\" xmlns:wssc=\"http://schemas.xmlsoap.org/ws/2005/02/sc\" xmlns:wst=\"http://schemas.xmlsoap.org/ws/2005/02/trust\">\n"
+			+
+			"    <s:Header>\n" +
+			"        <wsa:Action s:mustUnderstand=\"1\">http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Issue</wsa:Action>\n"
+			+
+			"        <wsa:To s:mustUnderstand=\"1\">HTTPS://login.live.com:443//RST2.srf</wsa:To>\n" +
+			"        <wsa:MessageID>0</wsa:MessageID>\n" +
+			"        <ps:AuthInfo xmlns:ps=\"http://schemas.microsoft.com/Passport/SoapServices/PPCRL\" Id=\"PPAuthInfo\">\n"
+			+
+			"            <ps:HostingApp>{7108E71A-9926-4FCB-BCC9-9A9D3F32E423}</ps:HostingApp>\n" +
+			"            <ps:BinaryVersion>5</ps:BinaryVersion>\n" +
+			"            <ps:UIVersion>1</ps:UIVersion>\n" +
+			"            <ps:Cookies />\n" +
+			"            <ps:RequestParams>AQAAAAIAAABsYwQAAAAxMDMz</ps:RequestParams>\n" +
+			"        </ps:AuthInfo>\n" +
+			"        <wsse:Security>\n" +
+			"            <wsse:UsernameToken Id=\"user\">\n" +
+			"                <wsse:Username>%s</wsse:Username>\n" +
+			"                <wsse:Password>%s</wsse:Password>\n" +
+			"            </wsse:UsernameToken>\n" +
+			"            <wsu:Timestamp Id=\"Timestamp\">\n" +
+			"                <wsu:Created>%s</wsu:Created>\n" +
+			"                <wsu:Expires>%s</wsu:Expires>\n" +
+			"            </wsu:Timestamp>\n" +
+			"        </wsse:Security>\n" +
+			"    </s:Header>\n" +
+			"    <s:Body>\n" +
+			"        <ps:RequestMultipleSecurityTokens xmlns:ps=\"http://schemas.microsoft.com/Passport/SoapServices/PPCRL\" Id=\"RSTS\">\n"
+			+
+			"            <wst:RequestSecurityToken Id=\"RST0\">\n" +
+			"                <wst:RequestType>http://schemas.xmlsoap.org/ws/2005/02/trust/Issue</wst:RequestType>\n" +
+			"                <wsp:AppliesTo>\n" +
+			"                    <wsa:EndpointReference>\n" +
+			"                        <wsa:Address>" + SCOPE + "</wsa:Address>\n" +
+			"                    </wsa:EndpointReference>\n" +
+			"                </wsp:AppliesTo>\n" +
+			"                <wsp:PolicyReference URI=\"MBI_SSL\" />\n" +
+			"            </wst:RequestSecurityToken>\n" +
+			"        </ps:RequestMultipleSecurityTokens>\n" +
+			"    </s:Body>\n" +
+			"</s:Envelope>";
+
+	private static Map<String, String> parsePayload(String payload) throws Exception {
+		JSONObject response = org.json.XML
+				.toJSONObject(payload)
+				.getJSONObject("S:Envelope")
+				.getJSONObject("S:Body");
+
+		if (!(response.isNull("S:Fault"))) {
+			String reason = response
+					.getJSONObject("S:Fault")
+					.getJSONObject("S:Reason")
+					.getJSONObject("S:Text")
+					.getString("content");
+
+			String code = response
+					.getJSONObject("S:Fault")
+					.getJSONObject("S:Detail")
+					.getJSONObject("psf:error")
+					.getString("psf:value");
+
+			throw new FailureReason(reason, code);
+		}
+
+		JSONObject a = response
+				.getJSONObject("wst:RequestSecurityTokenResponseCollection");
+		JSONArray array = a.get("wst:RequestSecurityTokenResponse") instanceof JSONArray
+				? (JSONArray) a.get("wst:RequestSecurityTokenResponse")
+				: new JSONArray(Arrays.asList(a.get("wst:RequestSecurityTokenResponse")));
+
+		Map<String, String> tokens = new LinkedHashMap<>();
+
+		array.forEach((Object obj) -> {
+			JSONObject json = (JSONObject) obj;
+
+			String content = json.getJSONObject("wst:RequestedSecurityToken")
+								 .getJSONObject("wsse:BinarySecurityToken")
+								 .getString("content")
+								 .replaceAll("&p=", "")
+								 .replaceAll("t=", "");
+
+			String key = json.getJSONObject("wsp:AppliesTo")
+							 .getJSONObject("wsa:EndpointReference")
+							 .getString("wsa:Address")
+							 .replaceAll("&p=", "")
+							 .replaceAll("t=", "");
+
+			tokens.put(key, content);
+		});
+
+		return tokens;
+	}
+
+	private static JSONObject getXTokenObjectFromAccess(String s) throws Exception {
+		Connection.Response response = Jsoup.connect(RPS)
+											.method(Connection.Method.POST)
+											.data("scopes", "client")
+											.data("clientVersion", "0/7.18.0.112//")
+											.data("access_token", s)
+											.data("partner", "999")
+											.data("site_name", "lw")
+											.ignoreContentType(true)
+											.execute();
+
+		return new JSONObject(response.body());
+	}
+
+	public static JSONObject getXTokenObject(String email, String password) throws Exception {
+		OkHttpClient client = new OkHttpClient();
+		MediaType MEDIA_TYPE_MARKDOWN
+				= MediaType.parse("application/json; charset=utf-8");
+
+		String created = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ")
+				.format(new Date(System.currentTimeMillis()));
+
+		String expires = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ")
+				.format(new Date(System.currentTimeMillis() + (1000L * 60L * 60L * 24L * 14L)));
+
+		String payload = String.format(SOAP_PAYLOAD,
+				StringEscapeUtils.escapeXml11(email),
+				StringEscapeUtils.escapeXml11(password),
+				StringEscapeUtils.escapeXml11(created),
+				StringEscapeUtils.escapeXml11(expires)
+		);
+
+		Request request = new Request.Builder()
+				.url(SOAP_URL)
+				.post(RequestBody.create(MEDIA_TYPE_MARKDOWN, payload))
+				.build();
+
+		Response response = client.newCall(request).execute();
+
+		if (response.code() == 200) {
+			Map<String, String> parsedTokens = parsePayload(response.body().string());
+			if (parsedTokens.containsKey(SCOPE)) {
+				return getXTokenObjectFromAccess(parsedTokens.get(SCOPE));
+			} else {
+				throw new Exception("Deprecated key");
+			}
+		} else {
+			throw new Exception("Bad response");
+		}
+	}
+
+	protected static class FailureReason extends Exception {
+		private static final long serialVersionUID = -8430457751314168597L;
+		private final String reason;
+		private final String code;
+
+		protected FailureReason(String reason, String code) {
+			this.reason = reason;
+			this.code = code;
+		}
+
+		public String getCode() {
+			return code;
+		}
+
+		public String getReason() {
+			return reason;
+		}
+
+		@Override
+		public String getMessage() {
+			return String.format("%s: %s", this.code, this.reason);
+		}
+
+	}
+
+}
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/MSFTSkypeClient.java b/src/main/java/com/samczsun/skype4j/internal/client/MSFTSkypeClient.java
new file mode 100644
index 0000000..d944b34
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/internal/client/MSFTSkypeClient.java
@@ -0,0 +1,89 @@
+package com.samczsun.skype4j.internal.client;
+
+import com.samczsun.skype4j.exceptions.ConnectionException;
+import com.samczsun.skype4j.exceptions.InvalidCredentialsException;
+import com.samczsun.skype4j.exceptions.NotParticipatingException;
+import com.samczsun.skype4j.exceptions.handler.ErrorHandler;
+import com.samczsun.skype4j.exceptions.handler.ErrorSource;
+import com.samczsun.skype4j.internal.Endpoints;
+import com.samczsun.skype4j.internal.SkypeThreadFactory;
+import com.samczsun.skype4j.internal.threads.AuthenticationChecker;
+import com.samczsun.skype4j.internal.threads.ServerPingThread;
+
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.Executors;
+import java.util.logging.Logger;
+
+public class MSFTSkypeClient extends FullClient {
+	public MSFTSkypeClient(String skypeToken, String skypeId,
+			Set<String> resources, Logger customLogger,
+			List<ErrorHandler> errorHandlers) {
+		super(skypeId, null, resources, customLogger, errorHandlers);
+
+		setSkypeToken(skypeToken);
+	}
+
+	@Override
+	public void login() {
+		try {
+
+			loadAllContacts();
+
+			try {
+				this.getContactRequests(false);
+			} catch (Exception var2) {
+				this.handleError(ErrorSource.UPDATING_CONTACT_LIST, var2, false);
+			}
+
+			try {
+				this.registerWebSocket();
+			} catch (Exception var2) {
+				this.handleError(ErrorSource.REGISTERING_WEBSOCKET, var2, false);
+			}
+
+			registerEndpoint();
+
+			Endpoints.ELIGIBILITY_CHECK.open(this, new Object[0])
+									   .expect(200, "You are not eligible to use Skype for Web!").get();
+			this.loggedIn.set(true);
+			if (this.serverPingThread != null) {
+				this.serverPingThread.kill();
+				this.serverPingThread = null;
+			}
+
+			if (this.reauthThread != null) {
+				this.reauthThread.kill();
+				this.reauthThread = null;
+			}
+
+			if (this.scheduler != null) {
+				this.scheduler.shutdownNow();
+
+				while (true) {
+					if (!this.scheduler.isTerminated()) {
+						continue;
+					}
+				}
+			}
+
+			this.shutdownThread = Executors.newSingleThreadExecutor(new SkypeThreadFactory(this, "Shutdown"));
+			this.scheduler = Executors.newFixedThreadPool(4, new SkypeThreadFactory(this, "Poller"));
+			(this.serverPingThread = new ServerPingThread(this)).start();
+			(this.reauthThread = new AuthenticationChecker(this)).start();
+		} catch (Exception e) {
+			throw new RuntimeException(e);
+		}
+	}
+
+	// I override this for high-level login stuff
+	@Override
+	public void reauthenticate() throws ConnectionException, InvalidCredentialsException, NotParticipatingException {
+		doShutdown();
+
+		login();
+
+		if (subscribed.get())
+			subscribe();
+	}
+}
\ No newline at end of file
