diff --git a/pom.xml b/pom.xml
index 3c6ff9d..d49c658 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
     <modelVersion>4.0.0</modelVersion>
     <groupId>com.samczsun</groupId>
     <artifactId>skype4j</artifactId>
-    <version>0.2.7-ARGUS-SNAPSHOT</version>
+    <version>0.2.8-ARGUS-SNAPSHOT</version>
     <name>Skype4J</name>
     <description>A Skype API written in Java. P2P chats are not supported</description>
     <url>https://github.com/samczsun/Skype4J</url>
diff --git a/src/main/java/com/samczsun/skype4j/Skype.java b/src/main/java/com/samczsun/skype4j/Skype.java
index 09cbf61..73cce4c 100644
--- a/src/main/java/com/samczsun/skype4j/Skype.java
+++ b/src/main/java/com/samczsun/skype4j/Skype.java
@@ -32,7 +32,7 @@
  * This class represents a single Skype account, which may or may not have been logged in
  */
 public interface Skype {
-    String VERSION = "908/1.52.0.82//skype.com";
+    String VERSION = "908/1.117.0.21//skype.com";
 
     RuntimeException UNEXPECTED = new RuntimeException("Please open a GitHub issue with this stacktrace, something unexpected happened");
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
index 9f74e90..0b1b6c2 100644
--- a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
+++ b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
@@ -379,6 +379,7 @@ public E_TYPE connect(String method, byte[] rawData) throws ConnectionException
                 }
                  String PROXY_HOST = System.getProperty("skype.conn.proxy.host", "");
                  String PROXY_PORT = System.getProperty("skype.conn.proxy.port", "");
+                 Boolean sslEnabled = !Boolean.parseBoolean(System.getProperty("skype.conn.proxy.ssl.disabled"));
                  Proxy proxy = Proxy.NO_PROXY;
 
                  if (!PROXY_HOST.isEmpty() && !PROXY_PORT.isEmpty()){
@@ -389,8 +390,10 @@ public E_TYPE connect(String method, byte[] rawData) throws ConnectionException
                 connection = (HttpsURLConnection) url.openConnection(proxy);
                 connection.setRequestMethod(method);
                 connection.setInstanceFollowRedirects(false);
-                connection.setSSLSocketFactory(getUnsafeSslSocketFactory());
-                connection.setHostnameVerifier((hostName, session) -> true);
+                if (sslEnabled){
+                    connection.setSSLSocketFactory(getUnsafeSslSocketFactory());
+                    connection.setHostnameVerifier((hostName, session) -> true);
+                }
 //                HttpsURLConnection.setDefaultHostnameVerifier((a,b) -> true);
                 for (Map.Entry<String, String> ent : headers.entrySet()) {
                     connection.setRequestProperty(ent.getKey(), ent.getValue());
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/LiveLoginHelper.java b/src/main/java/com/samczsun/skype4j/internal/client/LiveLoginHelper.java
index cbb0368..dac0451 100644
--- a/src/main/java/com/samczsun/skype4j/internal/client/LiveLoginHelper.java
+++ b/src/main/java/com/samczsun/skype4j/internal/client/LiveLoginHelper.java
@@ -151,11 +151,12 @@ public static JsonObject getXTokenObject(String email, String password) throws E
 
 		String PROXY_HOST = System.getProperty("skype.conn.proxy.host", "");
 		String PROXY_PORT = System.getProperty("skype.conn.proxy.port", "");
+		boolean sslEnabled = !Boolean.parseBoolean(System.getProperty("skype.conn.proxy.ssl.disabled"));
 
 		if (!PROXY_HOST.isEmpty() && !PROXY_PORT.isEmpty()) {
 			proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(PROXY_HOST, Integer.parseInt(PROXY_PORT)));
 		}
-		OkHttpClient client = getUnsafeOkHttpClient(proxy);
+		OkHttpClient client = getOkHttpClient(proxy, sslEnabled);
 		MediaType MEDIA_TYPE_MARKDOWN
 				= MediaType.parse("application/json; charset=utf-8");
 
@@ -216,7 +217,7 @@ public String getMessage() {
 
 	}
 
-	private static OkHttpClient getUnsafeOkHttpClient(Proxy proxy) {
+	private static OkHttpClient getOkHttpClient(Proxy proxy, boolean sslEnabled) {
 		try {
 			// Create a trust manager that does not validate certificate chains
 			final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
@@ -242,11 +243,12 @@ public void checkServerTrusted(java.security.cert.X509Certificate[] chain, Strin
 			// Create an ssl socket factory with our all-trusting manager
 			final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();
 
-			OkHttpClient okHttpClient = new OkHttpClient().newBuilder()
-					.sslSocketFactory(sslSocketFactory, (X509TrustManager) trustAllCerts[0])
-					.hostnameVerifier((hostname, session) -> true)
-					.proxy(proxy).build();
-			return okHttpClient;
+			OkHttpClient.Builder builder = new OkHttpClient.Builder().proxy(proxy);
+			if (sslEnabled) {
+				builder.sslSocketFactory(sslSocketFactory, (X509TrustManager) trustAllCerts[0]);
+				builder.hostnameVerifier((hostname, session) -> true);
+			}
+			return builder.build();
 		} catch (Exception e) {
 			throw new RuntimeException(e);
 		}
