diff --git a/pom.xml b/pom.xml
index e4e9c69..ff0c2be 100644
--- a/pom.xml
+++ b/pom.xml
@@ -170,5 +170,16 @@
             <version>1.0</version>
             <type>jar</type>
         </dependency>
+        <dependency>
+            <groupId>com.samczsun</groupId>
+            <artifactId>skype4j</artifactId>
+            <version>0.2.0-SNAPSHOT</version>
+            <exclusions>
+                <exclusion>
+                    <groupId>com.samczsun</groupId>
+                    <artifactId>skype4j</artifactId>
+                </exclusion>
+            </exclusions>
+        </dependency>
     </dependencies> 
 </project>
\ No newline at end of file
diff --git a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
index 54838ba..77b7fa2 100644
--- a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
+++ b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
@@ -24,19 +24,13 @@
 
 import javax.imageio.ImageIO;
 import java.awt.image.BufferedImage;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.nio.charset.StandardCharsets;
-import java.util.Arrays;
-import java.util.Collections;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Map;
-import java.util.Set;
 import java.util.function.Function;
 import java.util.function.Predicate;
 
@@ -122,7 +116,7 @@
     public static final Endpoints FETCH_IMAGE = new Endpoints(
             "https://api.asm.skype.com/v1/objects/%s/views/%s").defaultHeader("Authorization", AUTHORIZATION);
     public static final Endpoints VISIBILITY = new Endpoints(
-            "https://client-s.gateway.messenger.live.com/v1/users/ME/presenceDocs/messagingService")
+            "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/presenceDocs/messagingService").cloud()
             .regtoken();
     public static final Endpoints FINANCIALS = new Endpoints(
             "https://consumer.entitlement.skype.com/users/%s/services?language=en")
@@ -133,7 +127,7 @@
             "https://contacts.skype.com/contacts/v2/users/SELF?delta=&reason=default")
             .skypetoken();
     public static final Endpoints GET_ALL_CONTACTS_STATUS = new Endpoints(
-            "https://client-s.gateway.messenger.live.com/v1/users/ME/contacts/ALL/presenceDocs/messagingService?%s")
+            "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/contacts/ALL/presenceDocs/messagingService?%s").cloud()
             .regtoken();
     public static final Endpoints GET_CONTACT_BY_ID = new Endpoints(
             "https://contacts.skype.com/contacts/v1/users/%s/contacts?$filter=id%%20eq%%20%%27%s%%27&reason=default").skypetoken();
diff --git a/src/main/java/com/samczsun/skype4j/internal/EventType.java b/src/main/java/com/samczsun/skype4j/internal/EventType.java
index 605c68f..72cda13 100644
--- a/src/main/java/com/samczsun/skype4j/internal/EventType.java
+++ b/src/main/java/com/samczsun/skype4j/internal/EventType.java
@@ -38,9 +38,14 @@ public void handle(SkypeImpl skype, JsonObject eventObj) throws SkypeException,
 
             JsonObject resource = eventObj.get("resource").asObject();
             String type = Utils.getString(resource, "messagetype");
+            String content = Utils.getString(resource, "content");
             try {
-                Validate.notNull(type, "Null type");
-                MessageType.getByName(type).handle(skype, resource);
+                if (content == null) {
+                    MessageType.TEXT_INTERNAL.handle(skype, resource);
+                } else {
+                    Validate.notNull(type, "Null type");
+                    MessageType.getByName(type).handle(skype, resource);    
+                }
             } catch (Throwable t) {
                 t.addSuppressed(new SkypeException(resource.toString()));
                 throw t;
@@ -89,9 +94,8 @@ public void handle(SkypeImpl skype, JsonObject eventObj) throws SkypeException {
         public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException, ConnectionException {
             JsonObject resourceEndpoint = resource.get("resource").asObject();
             JsonArray findEndpoint = resourceEndpoint.get("endpointPresenceDocLinks").asArray();
-            String resourceLinkMe = "https://bn2-client-s.gateway.messenger.live.com/v1/users/ME/presenceDocs/messagingService";
-            String resourceLink = resource.get("resourceLink").asString();
-            if (resourceLinkMe.equalsIgnoreCase(resourceLink)){
+            int resourceLink = resource.get("resourceLink").asString().indexOf("/v1/users/ME/presenceDocs/messagingService");
+            if (resourceLink != -1){
                 try {
                     if (findEndpoint.size() < 2){
                         skype.getLoginUserStatus(1);
diff --git a/src/main/java/com/samczsun/skype4j/internal/MessageType.java b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
index 97b980f..ee45a7c 100644
--- a/src/main/java/com/samczsun/skype4j/internal/MessageType.java
+++ b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
@@ -84,6 +84,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException,
                 final String clientId = resource.get("skypeeditedid").asString();
                 ChatMessage m = user.getMessageById(clientId);
                 if (m != null) {
+                    m.setSentTime(Long.valueOf(resource.get("id").asString()));
                     MessageDeletedEvent event = new MessageDeletedEvent(m);
                     skype.getEventDispatcher().callEvent(event);
                     ((ChatMessageImpl) m).edit0(null);
diff --git a/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java b/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java
index c5b29e4..d85eeca 100644
--- a/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java
@@ -33,7 +33,6 @@
 import com.samczsun.skype4j.internal.threads.TypingThread;
 import com.samczsun.skype4j.participants.Participant;
 import com.samczsun.skype4j.participants.info.Contact;
-import com.samczsun.skype4j.participants.User;
 
 import javax.imageio.ImageIO;
 import java.awt.image.BufferedImage;
@@ -45,7 +44,6 @@
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.*;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.regex.Matcher;
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java b/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
index de025ce..71e3bba 100644
--- a/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
+++ b/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
@@ -305,16 +305,28 @@ public void loadAllContacts() throws ConnectionException {
                 i++;
             }
         }
-        JsonObject objectStatus = Endpoints.GET_ALL_CONTACTS_STATUS
+        JsonObject objectStatus = null;
+        try {
+          objectStatus = Endpoints.GET_ALL_CONTACTS_STATUS
                 .open(this, contactsStatus)
                 .as(JsonObject.class)
                 .expect(200, "While loading contacts status")
                 .get();
+        } catch (Exception e) {
+          
+        }
         i=0;
         for (JsonValue value : object.get("contacts").asArray()) {
-            JsonObject objStatus = (JsonObject) objectStatus.get("Responses").asArray().get(i);
-            objStatus = (JsonObject) objStatus.get("Payload");
-            String status = objStatus.get("status").asString();
+            String status = null;
+            
+            if (objectStatus != null) {
+                try {
+                    JsonObject objStatus = (JsonObject) objectStatus.get("Responses").asArray().get(i);
+                    objStatus = (JsonObject) objStatus.get("Payload");
+                    status = Utils.getString(objStatus, "status");
+                } catch (Exception e) { }
+            }
+            
             JsonObject obj = value.asObject();
             if (obj.get("suggested") == null || !obj.get("suggested").asBoolean()) {
                 if (!allContacts.containsKey(obj.get("person_id").asString())) {
@@ -371,17 +383,28 @@ public void updateContactList() throws ConnectionException {
                 i++;
             }
         }
-        JsonObject objectStatus = Endpoints.GET_ALL_CONTACTS_STATUS
+        JsonObject objectStatus = null;
+        try {
+          objectStatus = Endpoints.GET_ALL_CONTACTS_STATUS
                 .open(this, contactsStatus)
                 .as(JsonObject.class)
                 .expect(200, "While loading contacts status")
                 .get();
+        } catch (Exception e) {
+          
+        }
         i=0;
-        
         for (JsonValue value : object.get("contacts").asArray()) {
-            JsonObject objStatus = (JsonObject) objectStatus.get("Responses").asArray().get(i);
-            objStatus = (JsonObject) objStatus.get("Payload");
-            String status = Utils.getString(objStatus, "status");
+            String status = null;
+            
+            if (objectStatus != null) {
+                try {
+                    JsonObject objStatus = (JsonObject) objectStatus.get("Responses").asArray().get(i);
+                    objStatus = (JsonObject) objStatus.get("Payload");
+                    status = Utils.getString(objStatus, "status");
+                } catch (Exception e) { }
+            }
+            
             if (value.asObject().get("suggested") == null || !value.asObject().get("suggested").asBoolean()) {
                 String id = value.asObject().get("person_id").asString();
                 ContactImpl impl = (ContactImpl) allContacts.get(id);
diff --git a/src/main/java/com/samczsun/skype4j/internal/participants/UserImpl.java b/src/main/java/com/samczsun/skype4j/internal/participants/UserImpl.java
index 3e8a8d5..d04a14c 100644
--- a/src/main/java/com/samczsun/skype4j/internal/participants/UserImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/participants/UserImpl.java
@@ -16,23 +16,12 @@
 
 package com.samczsun.skype4j.internal.participants;
 
-import com.eclipsesource.json.JsonObject;
-import com.samczsun.skype4j.chat.Chat;
-import com.samczsun.skype4j.chat.GroupChat;
-import com.samczsun.skype4j.chat.messages.ChatMessage;
 import com.samczsun.skype4j.exceptions.ConnectionException;
-import com.samczsun.skype4j.exceptions.NoPermissionException;
-import com.samczsun.skype4j.internal.Endpoints;
 import com.samczsun.skype4j.internal.SkypeImpl;
 import com.samczsun.skype4j.internal.chat.ChatImpl;
 import com.samczsun.skype4j.participants.info.Contact;
 import com.samczsun.skype4j.participants.User;
 
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.CopyOnWriteArrayList;
 
 public class UserImpl extends ParticipantImpl implements User {
     private Contact contactRep;
