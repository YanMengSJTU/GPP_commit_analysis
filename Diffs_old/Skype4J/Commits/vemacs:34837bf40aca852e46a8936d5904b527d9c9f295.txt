diff --git a/src/main/java/com/samczsun/skype4j/PendingLogin.java b/src/main/java/com/samczsun/skype4j/PendingLogin.java
deleted file mode 100644
index 592e31f..0000000
--- a/src/main/java/com/samczsun/skype4j/PendingLogin.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package com.samczsun.skype4j;
-
-import com.samczsun.skype4j.exceptions.SkypeException;
-import com.samczsun.skype4j.internal.web.WebSkype;
-
-
-public class PendingLogin {
-    private String username;
-    private String password;
-    private Client clientType;
-
-    private PendingLogin(String username, String password) {
-        this.username = username;
-        this.password = password;
-    }
-
-
-    public PendingLogin client(Client newClient) {
-        this.clientType = newClient;
-        return this;
-    }
-    
-    public Skype login() throws SkypeException {
-        switch (clientType) {
-        case WEB:
-            return new WebSkype(username, password);
-        }
-        throw new IllegalArgumentException("Unknown client type");
-    }
-
-    public static PendingLogin create(String username, String password) {
-        return new PendingLogin(username, password);
-    }
-    
-    public static enum Client {
-        WEB;
-    }
-}
diff --git a/src/main/java/com/samczsun/skype4j/Skype.java b/src/main/java/com/samczsun/skype4j/Skype.java
index 9ddab89..7e6c479 100644
--- a/src/main/java/com/samczsun/skype4j/Skype.java
+++ b/src/main/java/com/samczsun/skype4j/Skype.java
@@ -5,8 +5,10 @@
 
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.events.EventDispatcher;
+import com.samczsun.skype4j.exceptions.SkypeException;
+import com.samczsun.skype4j.internal.SkypeImpl;
 
-public interface Skype {
+public abstract class Skype {
 
     /**
      * If this Skype client is web-based, this method will subscribe to the
@@ -16,15 +18,19 @@
      * @throws IOException
      *             Thrown if any internal operations go wrong
      */
-    public void subscribe() throws IOException;
+    public abstract void subscribe() throws IOException;
 
-    public String getUsername();
+    public abstract String getUsername();
 
-    public Chat getChat(String name);
+    public abstract Chat getChat(String name);
 
-    public List<Chat> getAllChats();
+    public abstract List<Chat> getAllChats();
 
-    public void logout() throws IOException;
+    public abstract void logout() throws IOException;
 
-    public EventDispatcher getEventDispatcher();
+    public abstract EventDispatcher getEventDispatcher();
+    
+    public static Skype login(String username, String password) throws SkypeException {
+        return new SkypeImpl(username, password);
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/SkypeClient.java b/src/main/java/com/samczsun/skype4j/SkypeClient.java
deleted file mode 100644
index dabbf42..0000000
--- a/src/main/java/com/samczsun/skype4j/SkypeClient.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package com.samczsun.skype4j;
-
-public class SkypeClient {
-    
-    public static PendingLogin create(String username, String password) {
-        return PendingLogin.create(username, password);
-    }
-}
diff --git a/src/main/java/com/samczsun/skype4j/chat/Chat.java b/src/main/java/com/samczsun/skype4j/chat/Chat.java
index 7f3cfdd..86cc0e1 100644
--- a/src/main/java/com/samczsun/skype4j/chat/Chat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/Chat.java
@@ -1,9 +1,11 @@
 package com.samczsun.skype4j.chat;
 
 import java.util.Collection;
+import java.util.List;
 
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Text;
+import com.samczsun.skype4j.user.User;
 
 /**
  * Represents a single chat. This can be a private message or a group chat.
@@ -41,6 +43,16 @@
      */
     public User getUser(String username);
 
+    /**
+     * Get the {@link ChatMessage ChatMessage} object associated with this
+     * Skype-assigned id
+     * 
+     * @param id
+     *            The skype id, not client id
+     * @return The ChatMessage object
+     */
+    public ChatMessage getMessage(String id);
+
     /**
      * Get the identity of the chat, or the output of /showname in chat
      * 
@@ -75,6 +87,13 @@
      */
     public Collection<User> getAllUsers();
 
+    /**
+     * Return a view of all the messages saved, in chronological order
+     * 
+     * @return All the messages saved
+     */
+    public List<ChatMessage> getAllMessages();
+
     /**
      * Get the type of chat this is
      * 
diff --git a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java b/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
index 2152223..29bc9ea 100644
--- a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
+++ b/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
@@ -2,6 +2,7 @@
 
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Text;
+import com.samczsun.skype4j.user.User;
 
 /**
  * Represents a single message sent in a group
@@ -23,4 +24,6 @@
     public void delete() throws SkypeException;
 
     public Chat getChat();
+
+    public String getId();
 }
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedByOtherEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedByOtherEvent.java
new file mode 100644
index 0000000..0353297
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedByOtherEvent.java
@@ -0,0 +1,23 @@
+package com.samczsun.skype4j.events.chat.message;
+
+import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.user.User;
+
+public class MessageEditedByOtherEvent extends MessageEvent {
+    private User malicious;
+    private String newContent;
+
+    public MessageEditedByOtherEvent(ChatMessage message, String newContent, User user) {
+        super(message);
+        this.malicious = user;
+        this.newContent = newContent;
+    }
+
+    public User getMaliciousUser() {
+        return this.malicious;
+    }
+
+    public String getNewContent() {
+        return this.newContent;
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java
index 7cbbb22..1d2815b 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java
@@ -3,7 +3,14 @@
 import com.samczsun.skype4j.chat.ChatMessage;
 
 public class MessageEditedEvent extends MessageEvent {
-    public MessageEditedEvent(ChatMessage message) {
+    private String newContent;
+
+    public MessageEditedEvent(ChatMessage message, String newContent) {
         super(message);
+        this.newContent = newContent;
+    }
+    
+    public String getNewContent() {
+        return this.newContent;
     }
 }
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserAddEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserAddEvent.java
index f2cdea8..9723209 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserAddEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserAddEvent.java
@@ -3,7 +3,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import com.samczsun.skype4j.chat.User;
+import com.samczsun.skype4j.user.User;
 
 public class MultiUserAddEvent extends UserAddEvent {
     private List<User> allUsers;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserRemoveEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserRemoveEvent.java
deleted file mode 100644
index b5dadb4..0000000
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserRemoveEvent.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.samczsun.skype4j.events.chat.user;
-
-import java.util.Collections;
-import java.util.List;
-
-import com.samczsun.skype4j.chat.User;
-
-public class MultiUserRemoveEvent extends UserRemoveEvent {
-    private List<User> allUsers;
-
-    public MultiUserRemoveEvent(List<User> users, User initiator) {
-        super(users.get(0), initiator);
-        allUsers = users;
-    }
-    
-    public List<User> getAllUsers() {
-        return Collections.unmodifiableList(allUsers);
-    }
-}
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/RoleUpdateEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/RoleUpdateEvent.java
index 40c12e2..b0a14fd 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/RoleUpdateEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/RoleUpdateEvent.java
@@ -1,6 +1,6 @@
 package com.samczsun.skype4j.events.chat.user;
 
-import com.samczsun.skype4j.chat.User;
+import com.samczsun.skype4j.user.User;
 
 public class RoleUpdateEvent extends UserEvent {
     public RoleUpdateEvent(User user) {
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/UserAddEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/UserAddEvent.java
index e65cba8..1f7bb1a 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/UserAddEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/UserAddEvent.java
@@ -1,6 +1,6 @@
 package com.samczsun.skype4j.events.chat.user;
 
-import com.samczsun.skype4j.chat.User;
+import com.samczsun.skype4j.user.User;
 
 public class UserAddEvent extends UserEvent {
     private User initiator;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/UserEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/UserEvent.java
index 60bf10a..4c6908a 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/UserEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/UserEvent.java
@@ -1,7 +1,7 @@
 package com.samczsun.skype4j.events.chat.user;
 
-import com.samczsun.skype4j.chat.User;
 import com.samczsun.skype4j.events.chat.ChatEvent;
+import com.samczsun.skype4j.user.User;
 
 public abstract class UserEvent extends ChatEvent {
     private User user;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/UserRemoveEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/UserRemoveEvent.java
index e5aa6f7..3b2c831 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/UserRemoveEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/UserRemoveEvent.java
@@ -1,6 +1,6 @@
 package com.samczsun.skype4j.events.chat.user;
 
-import com.samczsun.skype4j.chat.User;
+import com.samczsun.skype4j.user.User;
 
 public class UserRemoveEvent extends UserEvent {
     private User initiator;
diff --git a/src/main/java/com/samczsun/skype4j/internal/web/WebChatGroup.java b/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
similarity index 88%
rename from src/main/java/com/samczsun/skype4j/internal/web/WebChatGroup.java
rename to src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
index fae8553..5866a62 100644
--- a/src/main/java/com/samczsun/skype4j/internal/web/WebChatGroup.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
@@ -1,4 +1,4 @@
-package com.samczsun.skype4j.internal.web;
+package com.samczsun.skype4j.internal;
 
 import java.io.IOException;
 import java.net.URL;
@@ -23,20 +23,21 @@
 import com.google.gson.JsonObject;
 import com.samczsun.skype4j.StreamUtils;
 import com.samczsun.skype4j.chat.ChatMessage;
-import com.samczsun.skype4j.chat.User;
-import com.samczsun.skype4j.chat.User.Role;
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Text;
+import com.samczsun.skype4j.user.User;
+import com.samczsun.skype4j.user.User.Role;
 
-public class WebChatGroup extends WebChat {
+public class ChatGroup extends ChatImpl {
     private AtomicBoolean isLoading = new AtomicBoolean(false);
 
     private String topic;
 
-    private List<ChatMessage> messages = new CopyOnWriteArrayList<>();
     private Map<String, User> users = new ConcurrentHashMap<>();
+    private List<ChatMessage> messages = new CopyOnWriteArrayList<>();
+    private Map<String, ChatMessage> messageMap = new ConcurrentHashMap<>();
 
-    protected WebChatGroup(WebSkype skype, String identity) {
+    protected ChatGroup(SkypeImpl skype, String identity) {
         super(skype, identity);
     }
 
@@ -59,7 +60,7 @@ public ChatMessage sendMessage(Text message) throws SkypeException {
             con.setRequestProperty("Content-Type", "application/json");
             con.getOutputStream().write(gson.toJson(obj).getBytes(Charset.forName("UTF-8")));
             con.getInputStream();
-            return WebChatMessage.createMessage(this, getUser(getClient().getUsername()), null, String.valueOf(ms), ms, Jsoup.parse(message.parent().write()).text());
+            return ChatMessageImpl.createMessage(this, getUser(getClient().getUsername()), null, String.valueOf(ms), ms, Jsoup.parse(message.parent().write()).text());
         } catch (IOException e) {
             throw new SkypeException("An error occured while sending a message", e);
         }
@@ -97,7 +98,7 @@ public void updateUsers() throws SkypeException {
                 String role = element.getAsJsonObject().get("role").getAsString();
                 User user = getUser(username);
                 if (user == null) {
-                    user = new WebUser(username, this);
+                    user = new UserImpl(username, this);
                 }
                 newUsers.put(username, user);
                 if (role.equalsIgnoreCase("admin")) {
@@ -116,7 +117,7 @@ public void updateUsers() throws SkypeException {
 
     public void addUser(String username) {
         if (!users.containsKey(username)) {
-            User user = new WebUser(username, this);
+            User user = new UserImpl(username, this);
             users.put(username, user);
         } else {
             System.out.println(username + " joined twice???");
@@ -173,6 +174,8 @@ public void updateTopic(String topic) {
 
     public void onMessage(ChatMessage message) {
         this.messages.add(message);
+        this.messageMap.put(message.getId(), message);
+        ((UserImpl) message.getSender()).onMessage(message);
     }
 
     @Override
@@ -184,4 +187,14 @@ public Type getType() {
     public User getUser(String username) {
         return this.users.get(username);
     }
+
+    @Override
+    public ChatMessage getMessage(String id) {
+        return messageMap.get(id);
+    }
+
+    @Override
+    public List<ChatMessage> getAllMessages() {
+        return Collections.unmodifiableList(this.messages);
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/web/WebChat.java b/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
similarity index 63%
rename from src/main/java/com/samczsun/skype4j/internal/web/WebChat.java
rename to src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
index 7326f30..1341fd1 100644
--- a/src/main/java/com/samczsun/skype4j/internal/web/WebChat.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
@@ -1,33 +1,34 @@
-package com.samczsun.skype4j.internal.web;
+package com.samczsun.skype4j.internal;
 
 import org.jsoup.helper.Validate;
 
 import com.samczsun.skype4j.Skype;
 import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.chat.ChatMessage;
 
-public abstract class WebChat implements Chat {
+public abstract class ChatImpl implements Chat {
     public static Chat createChat(Skype client, String identity) {
         Validate.notNull(client, "Client must not be null");
-        Validate.isTrue(client instanceof WebSkype, "Client type must be Web");
+        Validate.isTrue(client instanceof SkypeImpl, "Client type must be Web");
         Validate.notEmpty(identity, "Identity must not be empty");
         if (identity.startsWith("19:") && identity.endsWith("@thread.skype")) {
-            return new WebChatGroup((WebSkype) client, identity);
+            return new ChatGroup((SkypeImpl) client, identity);
         } else if (identity.startsWith("8:")) {
-            return new WebChatIndividual((WebSkype) client, identity);
+            return new ChatIndividual((SkypeImpl) client, identity);
         } else {
             throw new IllegalArgumentException(String.format("Unknown group type with identity %s", identity));
         }
     }
 
-    private final WebSkype client;
+    private final SkypeImpl client;
     private final String identity;
 
-    public WebChat(WebSkype client, String identity) {
+    public ChatImpl(SkypeImpl client, String identity) {
         this.client = client;
         this.identity = identity;
     }
 
-    public WebSkype getClient() {
+    public SkypeImpl getClient() {
         return this.client;
     }
 
@@ -38,4 +39,6 @@ public String getIdentity() {
     public abstract void addUser(String username);
 
     public abstract void removeUser(String username);
+
+    public abstract void onMessage(ChatMessage m);
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/web/WebChatIndividual.java b/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
similarity index 80%
rename from src/main/java/com/samczsun/skype4j/internal/web/WebChatIndividual.java
rename to src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
index 1fec43d..9f7ca1a 100644
--- a/src/main/java/com/samczsun/skype4j/internal/web/WebChatIndividual.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
@@ -1,4 +1,4 @@
-package com.samczsun.skype4j.internal.web;
+package com.samczsun.skype4j.internal;
 
 import java.io.IOException;
 import java.net.URL;
@@ -20,21 +20,22 @@
 import com.google.gson.GsonBuilder;
 import com.google.gson.JsonObject;
 import com.samczsun.skype4j.chat.ChatMessage;
-import com.samczsun.skype4j.chat.User;
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Text;
+import com.samczsun.skype4j.user.User;
 
-public class WebChatIndividual extends WebChat {
+public class ChatIndividual extends ChatImpl {
     private AtomicBoolean isLoading = new AtomicBoolean(false);
 
     private final Type type = Type.INDIVIDUAL;
 
     private String topic;
 
-    private List<ChatMessage> messages = new CopyOnWriteArrayList<>();
     private Map<String, User> users = new ConcurrentHashMap<>();
+    private List<ChatMessage> messages = new CopyOnWriteArrayList<>();
+    private Map<String, ChatMessage> messageMap = new ConcurrentHashMap<>();
 
-    protected WebChatIndividual(WebSkype skype, String identity) {
+    protected ChatIndividual(SkypeImpl skype, String identity) {
         super(skype, identity);
     }
 
@@ -57,7 +58,7 @@ public ChatMessage sendMessage(Text message) throws SkypeException {
             con.setRequestProperty("Content-Type", "application/json");
             con.getOutputStream().write(gson.toJson(obj).getBytes(Charset.forName("UTF-8")));
             con.getInputStream();
-            return WebChatMessage.createMessage(this, getUser(getClient().getUsername()), null, String.valueOf(ms), ms, Jsoup.parse(message.parent().write()).text());
+            return ChatMessageImpl.createMessage(this, getUser(getClient().getUsername()), null, String.valueOf(ms), ms, Jsoup.parse(message.parent().write()).text());
         } catch (IOException e) {
             throw new SkypeException("An exception occured while sending a message", e);
         }
@@ -78,12 +79,12 @@ public void updateUsers() {
         this.topic = username;
         User user = getUser(username);
         if (user == null) {
-            user = new WebUser(username, this);
+            user = new UserImpl(username, this);
         }
         newUsers.put(username, user);
         User me = getUser(getClient().getUsername());
         if (me == null) {
-            me = new WebUser(getClient().getUsername(), this);
+            me = new UserImpl(getClient().getUsername(), this);
             newUsers.put(getClient().getUsername(), me);
         }
         this.users.clear();
@@ -93,7 +94,7 @@ public void updateUsers() {
 
     public void addUser(String username) {
         if (!users.containsKey(username)) {
-            User user = new WebUser(username, this);
+            User user = new UserImpl(username, this);
             users.put(username, user);
         } else {
             System.out.println(username + " joined twice???");
@@ -119,6 +120,8 @@ public void setTopic(String topic) {
 
     public void onMessage(ChatMessage message) {
         this.messages.add(message);
+        this.messageMap.put(message.getId(), message);
+        ((UserImpl) message.getSender()).onMessage(message);
     }
 
     @Override
@@ -130,4 +133,14 @@ public Type getType() {
     public User getUser(String username) {
         return this.users.get(username);
     }
+
+    @Override
+    public ChatMessage getMessage(String id) {
+        return messageMap.get(id);
+    }
+
+    @Override
+    public List<ChatMessage> getAllMessages() {
+        return Collections.unmodifiableList(messages);
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
new file mode 100644
index 0000000..afa9f97
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
@@ -0,0 +1,25 @@
+package com.samczsun.skype4j.internal;
+
+import org.jsoup.helper.Validate;
+
+import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.user.User;
+
+public abstract class ChatMessageImpl implements ChatMessage {
+    public static ChatMessage createMessage(Chat chat, User user, String id, String clientId, long time, String message) {
+        Validate.notNull(chat, "Chat must not be null");
+        Validate.isTrue(chat instanceof ChatImpl, "Chat must be instanceof WebChat");
+        Validate.notNull(chat, "User must not be null");
+        Validate.isTrue(user instanceof UserImpl, "User must be instanceof WebUser");
+        Validate.notEmpty(clientId, "ClientId must not be null");
+        Validate.notEmpty(message, "Message must not be null");
+        if (((ChatImpl) chat).getClient().getUsername().equals(user.getUsername())) {
+            return new ChatMessageSelf(chat, user, id, clientId, time, message);
+        } else {
+            return new ChatMessageOther(chat, user, id, clientId, time, message);
+        }
+    }
+
+    public abstract void setContent(String content);
+}
diff --git a/src/main/java/com/samczsun/skype4j/internal/web/WebOtherChatMessage.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
similarity index 69%
rename from src/main/java/com/samczsun/skype4j/internal/web/WebOtherChatMessage.java
rename to src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
index 9dd818c..4c0881d 100644
--- a/src/main/java/com/samczsun/skype4j/internal/web/WebOtherChatMessage.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
@@ -1,22 +1,24 @@
-package com.samczsun.skype4j.internal.web;
+package com.samczsun.skype4j.internal;
 
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.chat.ChatMessage;
-import com.samczsun.skype4j.chat.User;
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Text;
+import com.samczsun.skype4j.user.User;
 
-public class WebOtherChatMessage implements ChatMessage {
+public class ChatMessageOther extends ChatMessageImpl {
     private String clientId;
+    private String id;
     private String message;
     private long time;
     private User sender;
 
-    public WebOtherChatMessage(Chat chat, User user, String id, String clientId, long time, String message) {
+    public ChatMessageOther(Chat chat, User user, String id, String clientId, long time, String message) {
         this.clientId = clientId;
         this.message = message;
         this.time = time;
         this.sender = user;
+        this.id = id;
     }
 
     @Override
@@ -53,4 +55,14 @@ public Chat getChat() {
     public void delete() throws SkypeException {
         throw new UnsupportedOperationException();
     }
+
+    @Override
+    public String getId() {
+        return this.id;
+    }
+
+    @Override
+    public void setContent(String content) {
+        this.message = content;
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/web/WebSelfChatMessage.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
similarity index 78%
rename from src/main/java/com/samczsun/skype4j/internal/web/WebSelfChatMessage.java
rename to src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
index 5a3ac6d..265a652 100644
--- a/src/main/java/com/samczsun/skype4j/internal/web/WebSelfChatMessage.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
@@ -1,4 +1,4 @@
-package com.samczsun.skype4j.internal.web;
+package com.samczsun.skype4j.internal;
 
 import java.net.URL;
 
@@ -8,22 +8,24 @@
 import com.google.gson.JsonObject;
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.chat.ChatMessage;
-import com.samczsun.skype4j.chat.User;
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Message;
 import com.samczsun.skype4j.formatting.Text;
+import com.samczsun.skype4j.user.User;
 
-public class WebSelfChatMessage implements ChatMessage {
+public class ChatMessageSelf extends ChatMessageImpl {
     private String clientId;
+    private String id;
     private String message;
     private long time;
     private User sender;
 
-    public WebSelfChatMessage(Chat chat, User user, String id, String clientId, long time, String message) {
+    public ChatMessageSelf(Chat chat, User user, String id, String clientId, long time, String message) {
         this.clientId = clientId;
         this.message = message;
         this.time = time;
         this.sender = user;
+        this.id = id;
     }
 
     @Override
@@ -60,7 +62,7 @@ public void edit(Text newMessage) throws SkypeException {
             con = (HttpsURLConnection) url.openConnection();
             con.setRequestMethod("POST");
             con.setDoOutput(true);
-            con.setRequestProperty("RegistrationToken", ((WebChat) sender.getChat()).getClient().getRegistrationToken());
+            con.setRequestProperty("RegistrationToken", ((ChatImpl) sender.getChat()).getClient().getRegistrationToken());
             con.setRequestProperty("Content-Type", "application/json");
             con.getOutputStream().write(gson.toJson(obj).getBytes());
             con.getInputStream();
@@ -68,7 +70,7 @@ public void edit(Text newMessage) throws SkypeException {
             throw new SkypeException("An exception occured while editing a message", e);
         }
     }
-    
+
     @Override
     public void delete() throws SkypeException {
         edit(Message.text(""));
@@ -78,4 +80,14 @@ public void delete() throws SkypeException {
     public Chat getChat() {
         return sender.getChat();
     }
+
+    @Override
+    public String getId() {
+        return this.id;
+    }
+
+    @Override
+    public void setContent(String content) {
+        this.message = content;
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/web/MessageType.java b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
similarity index 60%
rename from src/main/java/com/samczsun/skype4j/internal/web/MessageType.java
rename to src/main/java/com/samczsun/skype4j/internal/MessageType.java
index 74f72b0..ae07c1d 100644
--- a/src/main/java/com/samczsun/skype4j/internal/web/MessageType.java
+++ b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
@@ -1,9 +1,11 @@
-package com.samczsun.skype4j.internal.web;
+package com.samczsun.skype4j.internal;
 
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -16,34 +18,36 @@
 import com.google.gson.JsonObject;
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.chat.ChatMessage;
-import com.samczsun.skype4j.chat.User;
-import com.samczsun.skype4j.chat.User.Role;
 import com.samczsun.skype4j.events.chat.ChatJoinedEvent;
 import com.samczsun.skype4j.events.chat.TopicChangeEvent;
+import com.samczsun.skype4j.events.chat.message.MessageEditedByOtherEvent;
+import com.samczsun.skype4j.events.chat.message.MessageEditedEvent;
 import com.samczsun.skype4j.events.chat.message.MessageReceivedEvent;
 import com.samczsun.skype4j.events.chat.user.MultiUserAddEvent;
-import com.samczsun.skype4j.events.chat.user.MultiUserRemoveEvent;
 import com.samczsun.skype4j.events.chat.user.RoleUpdateEvent;
 import com.samczsun.skype4j.events.chat.user.UserAddEvent;
 import com.samczsun.skype4j.events.chat.user.UserRemoveEvent;
 import com.samczsun.skype4j.exceptions.SkypeException;
+import com.samczsun.skype4j.formatting.Text;
+import com.samczsun.skype4j.user.User;
+import com.samczsun.skype4j.user.User.Role;
 
 public enum MessageType {
     UNKNOWN("Unknown") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
 
         }
     },
     TEXT("Text") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) throws SkypeException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
             MessageType.RICH_TEXT.handle(skype, resource);
         }
     },
     RICH_TEXT("RichText") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) throws SkypeException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
             if (resource.has("clientmessageid")) { //New message
                 String clientId = resource.get("clientmessageid").getAsString();
                 String id = resource.get("id").getAsString();
@@ -52,23 +56,77 @@ public void handle(WebSkype skype, JsonObject resource) throws SkypeException {
                 String url = resource.get("conversationLink").getAsString();
                 Chat c = getChat(url, skype);
                 User u = getUser(from, c);
-                ChatMessage m = WebChatMessage.createMessage(c, u, id, clientId, System.currentTimeMillis(), stripMetadata(content));
+                ChatMessage m = ChatMessageImpl.createMessage(c, u, id, clientId, System.currentTimeMillis(), stripMetadata(content));
+                ((ChatImpl) c).onMessage(m);
                 MessageReceivedEvent evnt = new MessageReceivedEvent(m);
                 skype.getEventDispatcher().callEvent(evnt);
             } else if (resource.has("skypeeditedid")) { //Edited message
-                String clientId = resource.get("skypeeditedid").getAsString();
-                String id = resource.get("id").getAsString();
+                String url = resource.get("conversationLink").getAsString();
+                String from = resource.get("from").getAsString();
+                final Chat c = getChat(url, skype);
+                final User u = getUser(from, c); //If not original sender, then fake
+                final String clientId = resource.get("skypeeditedid").getAsString();
+                final String id = resource.get("id").getAsString();
                 String content = resource.get("content").getAsString();
-                content = content.substring("Edited previous message: ".length());
                 content = stripMetadata(content);
-                String from = resource.get("from").getAsString();
-                String url = resource.get("conversationLink").getAsString();
-                Chat c = getChat(url, skype);
-                User u = getUser(from, c);
-                //TODO: Actually fire the event - there's no API in place to store chatmessages yet
-                //                ChatMessage m = WebChatMessage.createMessage(c, c.getUser(from), id, clientId, System.currentTimeMillis(), resource.get("content").getAsString());
-                //                MessageEditedEvent evnt = new MessageEditedEvent(m);
-                //                skype.getEventDispatcher().callEvent(evnt);
+                boolean faker = false;
+                if (content.startsWith("Edited previous message: ")) {
+                    content = content.substring("Edited previous message: ".length());
+                    ChatMessage m = u.getMessageById(clientId);
+                    if (m != null) {
+                        MessageEditedEvent evnt = new MessageEditedEvent(m, content);
+                        skype.getEventDispatcher().callEvent(evnt);
+                        ((ChatMessageImpl) m).setContent(content);
+                    } else {
+                        faker = true;
+                    }
+                } else {
+                    faker = true;
+                }
+                if (faker) {
+                    String originalContent = null;
+                    for (User user : c.getAllUsers()) {
+                        if (user.getMessageById(clientId) != null) {
+                            originalContent = user.getMessageById(clientId).getText();
+                        }
+                    }
+                    final String finalContent = content;
+                    final String finalOriginalContent = originalContent;
+                    MessageEditedByOtherEvent event = new MessageEditedByOtherEvent(new ChatMessage() {
+                        public String getClientId() {
+                            return clientId;
+                        }
+
+                        public String getText() {
+                            return finalOriginalContent;
+                        }
+
+                        public long getTime() {
+                            return System.currentTimeMillis();
+                        }
+
+                        public User getSender() {
+                            return u;
+                        }
+
+                        public void edit(Text newMessage) throws SkypeException {
+                            throw new UnsupportedOperationException();
+                        }
+
+                        public void delete() throws SkypeException {
+                            throw new UnsupportedOperationException();
+                        }
+
+                        public Chat getChat() {
+                            return c;
+                        }
+
+                        public String getId() {
+                            return id;
+                        }
+                    }, finalContent, u);
+                    skype.getEventDispatcher().callEvent(event);
+                }
             } else {
                 throw new SkypeException("Had no id");
             }
@@ -76,42 +134,42 @@ public void handle(WebSkype skype, JsonObject resource) throws SkypeException {
     },
     RICH_TEXT_CONTACTS("RichText/Contacts") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
         }
     },
     RICH_TEXT_FILES("RichText/Files") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
         }
     },
     RICH_TEXT_SMS("RichText/Sms") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
         }
     },
     RICH_TEXT_LOCATION("RichText/Location") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
         }
     },
     RICH_TEXT_URI_OBJECT("RichText/UriObject") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
         }
     },
     RICH_TEXT_MEDIA_FLIK_MSG("RichText/Media_FlikMsg") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
         }
     },
     EVENT_SKYPE_VIDEO_MESSAGE("Event/SkypeVideoMessage") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
         }
     },
     THREAD_ACTIVITY_ADD_MEMBER("ThreadActivity/AddMember") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
             String url = resource.get("conversationLink").getAsString();
             Chat c = getChat(url, skype);
             List<User> usersAdded = new ArrayList<>();
@@ -125,7 +183,7 @@ public void handle(WebSkype skype, JsonObject resource) {
                 } else {
                     usersAdded.add(c.getUser(username));
                 }
-                ((WebChat) c).addUser(username);
+                ((ChatImpl) c).addUser(username);
             }
             UserAddEvent event = null;
             if (usersAdded.size() == 1) {
@@ -138,7 +196,7 @@ public void handle(WebSkype skype, JsonObject resource) {
     },
     THREAD_ACTIVITY_DELETE_MEMBER("ThreadActivity/DeleteMember") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
             String url = resource.get("conversationLink").getAsString();
             Chat c = getChat(url, skype);
             List<User> usersRemoved = new ArrayList<>();
@@ -147,20 +205,20 @@ public void handle(WebSkype skype, JsonObject resource) {
             for (Element e : xml.getElementsByTag("target")) {
                 String username = e.text().substring(2);
                 usersRemoved.add(c.getUser(username));
-                ((WebChat) c).removeUser(username);
+                ((ChatImpl) c).removeUser(username);
             }
             UserRemoveEvent event = null;
             if (usersRemoved.size() == 1) {
                 event = new UserRemoveEvent(usersRemoved.get(0), initiator);
             } else {
-                event = new MultiUserRemoveEvent(usersRemoved, initiator);
+                throw new SkypeException("More than one user removed?");
             }
             skype.getEventDispatcher().callEvent(event);
         }
     },
     THREAD_ACTIVITY_ROLE_UPDATE("ThreadActivity/RoleUpdate") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
             String url = resource.get("conversationLink").getAsString();
             Chat c = getChat(url, skype);
             Document xml = Jsoup.parse(resource.get("content").getAsString(), "", Parser.xmlParser());
@@ -173,14 +231,14 @@ public void handle(WebSkype skype, JsonObject resource) {
     },
     THREAD_ACTIVITY_TOPIC_UPDATE("ThreadActivity/TopicUpdate") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
             String url = resource.get("conversationLink").getAsString();
             Chat c = getChat(url, skype);
             Document xml = Jsoup.parse(resource.get("content").getAsString(), "", Parser.xmlParser());
             if (xml.getElementsByTag("value").size() > 0) {
-                ((WebChatGroup) c).updateTopic(StringEscapeUtils.unescapeHtml4(xml.getElementsByTag("value").get(0).text()));
+                ((ChatGroup) c).updateTopic(StringEscapeUtils.unescapeHtml4(xml.getElementsByTag("value").get(0).text()));
             } else {
-                ((WebChatGroup) c).updateTopic("");
+                ((ChatGroup) c).updateTopic("");
             }
             TopicChangeEvent e = new TopicChangeEvent(c);
             skype.getEventDispatcher().callEvent(e);
@@ -188,47 +246,47 @@ public void handle(WebSkype skype, JsonObject resource) {
     },
     THREAD_ACTIVITY_PICTURE_UPDATE("ThreadActivity/PictureUpdate") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
         }
     },
     THREAD_ACTIVITY_HISTORY_DISCLOSED_UPDATE("ThreadActivity/HistoryDisclosedUpdate") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
         }
     },
     THREAD_ACTIVITY_JOINING_ENABLED_UPDATE("ThreadActivity/JoiningEnabledUpdate") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
         }
     },
     THREAD_ACTIVITY_LEGACY_MEMBER_ADDED("ThreadActivity/LegacyMemberAdded") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
         }
     },
     THREAD_ACTIVITY_LEGACY_MEMBER_UPGRADED("ThreadActivity/LegacyMemberUpgraded") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
         }
     },
     EVENT_CALL("Event/Call") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
         }
     },
     CONTROL_TYPING("Control/Typing") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
         }
     },
     CONTROL_CLEAR_TYPING("Control/ClearTyping") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
         }
     },
     CONTROL_LIVE_STATE("Control/LiveState") {
         @Override
-        public void handle(WebSkype skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) {
         }
     };
 
@@ -238,6 +296,8 @@ public void handle(WebSkype skype, JsonObject resource) {
     private static final Pattern STRIP_EDIT_PATTERN = Pattern.compile("<\\/?[e_m][^<>]+>");
     private static final Pattern STRIP_QUOTE_PATTERN = Pattern.compile("(<(?:\\/?)(?:quote|legacyquote)[^>]*>)", Pattern.CASE_INSENSITIVE);
 
+    private static final Set<String> ids = new HashSet<>();
+
     private String value;
 
     MessageType(String value) {
@@ -248,7 +308,7 @@ public String getValue() {
         return this.value;
     }
 
-    public abstract void handle(WebSkype skype, JsonObject resource) throws SkypeException;
+    public abstract void handle(SkypeImpl skype, JsonObject resource) throws SkypeException;
 
     static {
         for (MessageType type : values()) {
@@ -260,7 +320,7 @@ public static MessageType getByName(String messageType) {
         return byValue.containsKey(messageType) ? byValue.get(messageType) : UNKNOWN;
     }
 
-    private static Chat getChat(String url, WebSkype skype) {
+    private static Chat getChat(String url, SkypeImpl skype) {
         Matcher m = URL_PATTERN.matcher(url);
         if (m.find()) {
             return skype.getChat(m.group(1));
diff --git a/src/main/java/com/samczsun/skype4j/internal/ResourceType.java b/src/main/java/com/samczsun/skype4j/internal/ResourceType.java
new file mode 100644
index 0000000..a3f0cac
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/internal/ResourceType.java
@@ -0,0 +1,5 @@
+package com.samczsun.skype4j.internal;
+
+public class ResourceType {
+
+}
diff --git a/src/main/java/com/samczsun/skype4j/internal/web/WebSkype.java b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
similarity index 94%
rename from src/main/java/com/samczsun/skype4j/internal/web/WebSkype.java
rename to src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
index c8b5463..ed7ca6e 100644
--- a/src/main/java/com/samczsun/skype4j/internal/web/WebSkype.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
@@ -1,4 +1,4 @@
-package com.samczsun.skype4j.internal.web;
+package com.samczsun.skype4j.internal;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -39,7 +39,7 @@
 import com.samczsun.skype4j.events.chat.ChatJoinedEvent;
 import com.samczsun.skype4j.exceptions.SkypeException;
 
-public class WebSkype implements Skype {
+public class SkypeImpl extends Skype {
     private static final String LOGIN_URL = "https://login.skype.com/login?client_id=578134&redirect_uri=https%3A%2F%2Fweb.skype.com";
     private static final String PING_URL = "https://web.skype.com/api/v1/session-ping";
     private static final String SUBSCRIPTIONS_URL = "https://client-s.gateway.messenger.live.com/v1/users/ME/endpoints/SELF/subscriptions";
@@ -61,7 +61,7 @@
     private final Logger logger = Logger.getLogger("webskype");
     private final Map<String, Chat> allChats = new ConcurrentHashMap<>();
 
-    public WebSkype(String username, String password) throws SkypeException {
+    public SkypeImpl(String username, String password) throws SkypeException {
         try {
             this.username = username;
             this.eventDispatcher = new SkypeEventDispatcher();
@@ -115,7 +115,7 @@ public void run() {
                         try {
                             JsonObject conversation = elem.getAsJsonObject();
                             String id = conversation.get("id").getAsString();
-                            Chat chat = WebChat.createChat(this, id);
+                            Chat chat = ChatImpl.createChat(this, id);
                             chat.updateUsers();
                             allChats.put(id, chat);
                         } catch (Exception e) {
@@ -189,11 +189,7 @@ public void run() {
                                                     JsonObject resource = eventObj.get("resource").getAsJsonObject();
                                                     String messageType = resource.get("messagetype").getAsString();
                                                     MessageType type = MessageType.getByName(messageType);
-                                                    try {
-                                                        type.handle(WebSkype.this, resource);
-                                                    } catch (SkypeException e) {
-                                                        e.printStackTrace();
-                                                    }
+                                                    type.handle(SkypeImpl.this, resource);
                                                 } else if (resourceType.equalsIgnoreCase("EndpointPresence")) {
                                                 } else if (resourceType.equalsIgnoreCase("UserPresence")) {
                                                 } else if (resourceType.equalsIgnoreCase("ConversationUpdate")) { //Not sure what this does
@@ -202,7 +198,7 @@ public void run() {
                                                     String chatId = resource.get("id").getAsString();
                                                     Chat chat = getChat(chatId);
                                                     if (chat == null) {
-                                                        chat = WebChat.createChat(WebSkype.this, chatId);
+                                                        chat = ChatImpl.createChat(SkypeImpl.this, chatId);
                                                         try {
                                                             chat.updateUsers();
                                                         } catch (SkypeException e) {
@@ -238,7 +234,19 @@ public void run() {
 
     @Override
     public Chat getChat(String name) {
-        return allChats.get(name);
+        if (allChats.containsKey(name)) {
+            return allChats.get(name);
+        } else {
+            try {
+                Chat chat = ChatImpl.createChat(this, name);
+                chat.updateUsers();
+                allChats.put(name, chat);
+                return getChat(name);
+            } catch (Exception e) {
+                e.printStackTrace();
+                return null;
+            }
+        }
     }
 
     @Override
@@ -249,6 +257,8 @@ public Chat getChat(String name) {
     @Override
     public void logout() throws IOException {
         Jsoup.connect(LOGOUT_URL).cookies(this.cookies).get();
+        this.sessionKeepaliveThread.stop();
+        this.pollThread.stop(); //TODO: Actually do Java
     }
 
     public String getRegistrationToken() {
diff --git a/src/main/java/com/samczsun/skype4j/internal/web/WebUser.java b/src/main/java/com/samczsun/skype4j/internal/UserImpl.java
similarity index 55%
rename from src/main/java/com/samczsun/skype4j/internal/web/WebUser.java
rename to src/main/java/com/samczsun/skype4j/internal/UserImpl.java
index 5c3250a..b9a7f46 100644
--- a/src/main/java/com/samczsun/skype4j/internal/web/WebUser.java
+++ b/src/main/java/com/samczsun/skype4j/internal/UserImpl.java
@@ -1,20 +1,30 @@
-package com.samczsun.skype4j.internal.web;
+package com.samczsun.skype4j.internal;
+
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 import com.samczsun.skype4j.chat.Chat;
-import com.samczsun.skype4j.chat.User;
+import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.user.User;
 
-public class WebUser implements User {
+public class UserImpl implements User {
     private String username;
 
     private Chat chat;
     private Role role = Role.USER;
+    
+    private List<ChatMessage> messages = new CopyOnWriteArrayList<>();
+    private Map<String, ChatMessage> messageMap = new ConcurrentHashMap<>();
 
-    public WebUser(String username, Chat chat) {
+    public UserImpl(String username, Chat chat) {
         this.username = username;
         this.chat = chat;
     }
 
-    public WebUser(Chat chat) {
+    public UserImpl(Chat chat) {
         this.chat = chat;
     }
 
@@ -59,7 +69,7 @@ public boolean equals(Object obj) {
             return false;
         if (getClass() != obj.getClass())
             return false;
-        WebUser other = (WebUser) obj;
+        UserImpl other = (UserImpl) obj;
         if (username == null) {
             if (other.username != null)
                 return false;
@@ -67,4 +77,19 @@ public boolean equals(Object obj) {
             return false;
         return true;
     }
+
+    @Override
+    public List<ChatMessage> getSentMessages() {
+        return Collections.unmodifiableList(messages);
+    }
+
+    @Override
+    public ChatMessage getMessageById(String id) {
+        return messageMap.get(id);
+    }
+    
+    public void onMessage(ChatMessage message) {
+        this.messages.add(message);
+        this.messageMap.put(message.getClientId(), message);
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/web/ResourceType.java b/src/main/java/com/samczsun/skype4j/internal/web/ResourceType.java
deleted file mode 100644
index 1c5f603..0000000
--- a/src/main/java/com/samczsun/skype4j/internal/web/ResourceType.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package com.samczsun.skype4j.internal.web;
-
-public class ResourceType {
-
-}
diff --git a/src/main/java/com/samczsun/skype4j/internal/web/WebChatMessage.java b/src/main/java/com/samczsun/skype4j/internal/web/WebChatMessage.java
deleted file mode 100644
index 5138247..0000000
--- a/src/main/java/com/samczsun/skype4j/internal/web/WebChatMessage.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.samczsun.skype4j.internal.web;
-
-import org.jsoup.helper.Validate;
-
-import com.samczsun.skype4j.chat.Chat;
-import com.samczsun.skype4j.chat.ChatMessage;
-import com.samczsun.skype4j.chat.User;
-
-public class WebChatMessage {
-    public static ChatMessage createMessage(Chat chat, User user, String id, String clientId, long time, String message) {
-        Validate.notNull(chat, "Chat must not be null");
-        Validate.isTrue(chat instanceof WebChat, "Chat must be instanceof WebChat");
-        Validate.notNull(chat, "User must not be null");
-        Validate.isTrue(user instanceof WebUser, "User must be instanceof WebUser");
-        Validate.notEmpty(clientId, "ClientId must not be null");
-        Validate.notEmpty(message, "Message must not be null");
-        if (((WebChat) chat).getClient().getUsername().equals(user.getUsername())) {
-            return new WebSelfChatMessage(chat, user, id, clientId, time, message);
-        } else {
-            return new WebOtherChatMessage(chat, user, id, clientId, time, message);
-        }
-    }
-}
diff --git a/src/main/java/com/samczsun/skype4j/user/Contact.java b/src/main/java/com/samczsun/skype4j/user/Contact.java
new file mode 100644
index 0000000..85265e9
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/user/Contact.java
@@ -0,0 +1,5 @@
+package com.samczsun.skype4j.user;
+
+public class Contact {
+
+}
diff --git a/src/main/java/com/samczsun/skype4j/chat/User.java b/src/main/java/com/samczsun/skype4j/user/User.java
similarity index 60%
rename from src/main/java/com/samczsun/skype4j/chat/User.java
rename to src/main/java/com/samczsun/skype4j/user/User.java
index 2495572..a6521fb 100644
--- a/src/main/java/com/samczsun/skype4j/chat/User.java
+++ b/src/main/java/com/samczsun/skype4j/user/User.java
@@ -1,4 +1,9 @@
-package com.samczsun.skype4j.chat;
+package com.samczsun.skype4j.user;
+
+import java.util.List;
+
+import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.chat.ChatMessage;
 
 public interface User {
     public String getUsername();
@@ -10,6 +15,10 @@
     public void setRole(Role role);
 
     public Chat getChat();
+    
+    public List<ChatMessage> getSentMessages();
+    
+    public ChatMessage getMessageById(String id);
 
     public static enum Role {
         ADMIN, USER;
diff --git a/src/test/java/com/samczsun/skype4j/Test.java b/src/test/java/com/samczsun/skype4j/Test.java
index fd3af2d..87e8813 100644
--- a/src/test/java/com/samczsun/skype4j/Test.java
+++ b/src/test/java/com/samczsun/skype4j/Test.java
@@ -2,21 +2,23 @@
 
 import java.io.FileInputStream;
 
-import com.samczsun.skype4j.PendingLogin.Client;
-import com.samczsun.skype4j.chat.User;
 import com.samczsun.skype4j.events.EventHandler;
 import com.samczsun.skype4j.events.Listener;
 import com.samczsun.skype4j.events.chat.ChatJoinedEvent;
 import com.samczsun.skype4j.events.chat.TopicChangeEvent;
+import com.samczsun.skype4j.events.chat.message.MessageEditedByOtherEvent;
+import com.samczsun.skype4j.events.chat.message.MessageEditedEvent;
 import com.samczsun.skype4j.events.chat.message.MessageReceivedEvent;
 import com.samczsun.skype4j.events.chat.user.MultiUserAddEvent;
 import com.samczsun.skype4j.events.chat.user.RoleUpdateEvent;
 import com.samczsun.skype4j.events.chat.user.UserAddEvent;
+import com.samczsun.skype4j.user.User;
 
 public class Test {
     public static void main(String[] args) throws Exception {
         String[] creds = StreamUtils.readFully(new FileInputStream("credentials")).split(":");
-        Skype skype = SkypeClient.create(creds[0], creds[1]).client(Client.WEB).login();
+        Skype skype = Skype.login(creds[0], creds[1]);
+        skype.logout();
         skype.getEventDispatcher().registerListener(new Listener() {
             @EventHandler
             public void onUserAdd(MessageReceivedEvent e) {
@@ -49,6 +51,16 @@ public void onRoleUpdate(RoleUpdateEvent e) {
             public void onChatJoin(ChatJoinedEvent e) {
                 System.out.println("Joined new chat " + e.getChat().getIdentity());
             }
+
+            @EventHandler
+            public void onEdit(MessageEditedEvent e) {
+                System.out.println("Message " + e.getMessage().getText() + " edited to " + e.getNewContent());
+            }
+
+            @EventHandler
+            public void onEdit(MessageEditedByOtherEvent e) {
+                System.out.println("Message " + e.getMessage().getText() + " edited by " + e.getMaliciousUser().getUsername() + "!");
+            }
         });
         skype.subscribe();
         System.out.println("Done");
