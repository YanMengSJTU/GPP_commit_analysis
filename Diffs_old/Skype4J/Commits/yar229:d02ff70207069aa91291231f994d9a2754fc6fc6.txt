diff --git a/src/main/java/com/samczsun/skype4j/events/EventDispatcher.java b/src/main/java/com/samczsun/skype4j/events/EventDispatcher.java
index 5a67648..1c52375 100644
--- a/src/main/java/com/samczsun/skype4j/events/EventDispatcher.java
+++ b/src/main/java/com/samczsun/skype4j/events/EventDispatcher.java
@@ -2,6 +2,7 @@
 
 public interface EventDispatcher {
     void registerListener(Listener l);
+    void unregisterListener(Listener l);
 
     void callEvent(Event l);
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/RegisteredListener.java b/src/main/java/com/samczsun/skype4j/internal/RegisteredListener.java
index e781281..a3cf26f 100644
--- a/src/main/java/com/samczsun/skype4j/internal/RegisteredListener.java
+++ b/src/main/java/com/samczsun/skype4j/internal/RegisteredListener.java
@@ -19,4 +19,9 @@ public RegisteredListener(Listener l, Method m) {
     public void handleEvent(Event e) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
         this.method.invoke(listener, e);
     }
+
+    public boolean isListenerEquals(Listener l)
+    {
+        return listener == l;
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java b/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java
index b3c2f8c..ad844bf 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java
@@ -30,6 +30,18 @@ public void registerListener(Listener l) {
         }
     }
 
+    public void unregisterListener(final Listener l)
+    {
+        for(Map.Entry<Class<? extends Event>, List<RegisteredListener>> m: listeners.entrySet())
+        {
+            ArrayList<RegisteredListener> toremove = new ArrayList<>();
+            for(RegisteredListener rl: m.getValue())
+                if (rl.isListenerEquals(l)) toremove.add(rl);
+            if (toremove.size() > 0)
+                m.getValue().removeAll(toremove);
+        }
+    }
+
     public void callEvent(Event e) {
         List<RegisteredListener> methods = new ArrayList<>();
         Class<?> eventClass = e.getClass();
