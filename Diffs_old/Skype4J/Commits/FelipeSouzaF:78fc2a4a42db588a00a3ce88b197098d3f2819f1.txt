diff --git a/src/main/java/com/samczsun/skype4j/Skype.java b/src/main/java/com/samczsun/skype4j/Skype.java
index 9dc8b3a..4701d1f 100644
--- a/src/main/java/com/samczsun/skype4j/Skype.java
+++ b/src/main/java/com/samczsun/skype4j/Skype.java
@@ -54,7 +54,7 @@
      * @throws com.samczsun.skype4j.exceptions.SuspiciousLoginException
      * @throws java.io.IOException
      */
-    void login() throws InvalidCredentialsException, ConnectionException, NotParticipatingException, WrongPasswordException, AccountNotFoundException, SuspiciousLoginException, IOException;
+    void login() throws InvalidCredentialsException, ConnectionException, NotParticipatingException, WrongPasswordException, AccountNotFoundException, SuspiciousLoginException, IOException, Exception;
 
     /**
      * Subscribe to the HTTP long polling service.
@@ -155,7 +155,7 @@
      *
      * @throws ConnectionException If an exception occured while fetching all contacts
      */
-    void loadAllContacts() throws ConnectionException;
+    void loadAllContacts() throws Exception;
 
 
     /*
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
index a48da57..647a858 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
@@ -149,7 +149,7 @@ public String format(LogRecord record) {
     }
     
     @Override
-    public void login() throws ConnectionException, InvalidCredentialsException, WrongPasswordException, AccountNotFoundException, SuspiciousLoginException, IOException {
+    public void login() throws ConnectionException, InvalidCredentialsException, WrongPasswordException, AccountNotFoundException, SuspiciousLoginException, IOException, Exception {
         Endpoints.ELIGIBILITY_CHECK.open(this)
                 .expect(200, "You are not eligible to use Skype for Web!")
                 .get();
@@ -396,9 +396,9 @@ protected void registerEndpoint() throws ConnectionException {
                 .post(new JsonObject().add("endpointFeatures", "Agent"));
     }
 
-    public abstract void getContactRequests(boolean fromWebsocket) throws ConnectionException;
+    public abstract void getContactRequests(boolean fromWebsocket) throws Exception;
 
-    public abstract void updateContactList() throws ConnectionException;
+    public abstract void updateContactList() throws Exception;
 
     public void registerWebSocket() throws ConnectionException, InterruptedException, URISyntaxException, KeyManagementException, NoSuchAlgorithmException, UnsupportedEncodingException {
         boolean needsToRegister = false;
@@ -536,7 +536,7 @@ public void subscribe() throws ConnectionException {
         }
     }
 
-    public void reauthenticate() throws ConnectionException, InvalidCredentialsException, NotParticipatingException, WrongPasswordException, AccountNotFoundException, SuspiciousLoginException, IOException {
+    public void reauthenticate() throws ConnectionException, InvalidCredentialsException, NotParticipatingException, WrongPasswordException, AccountNotFoundException, SuspiciousLoginException, IOException, Exception {
         //todo: keep subscribed until reauth is finished so events aren't lost
         doShutdown();
         login();
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java b/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
index 43644a3..29105ef 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
@@ -113,7 +113,7 @@ public void onMessage(String s) {
                     skype.updateContactList();
                     SaveContactsEvent eventContacts = new SaveContactsEvent();
                     skype.getEventDispatcher().callEvent(eventContacts);
-                } catch (ConnectionException e) {
+                } catch (Exception e) {
                     skype.handleError(ErrorSource.UPDATING_CONTACT_LIST, e, false);
                 }
             } else if (event == 14) {
@@ -121,7 +121,7 @@ public void onMessage(String s) {
                     if (skype instanceof FullClient) {
                         skype.getContactRequests(true);
                     }
-                } catch (ConnectionException e) {
+                } catch (Exception e) {
                     skype.getLogger().log(Level.SEVERE, String.format("Unhandled exception while parsing websocket message '%s'", s), e);
                 }
             } else {
diff --git a/src/main/java/com/samczsun/skype4j/internal/Utils.java b/src/main/java/com/samczsun/skype4j/internal/Utils.java
index 41f0a54..be90ada 100644
--- a/src/main/java/com/samczsun/skype4j/internal/Utils.java
+++ b/src/main/java/com/samczsun/skype4j/internal/Utils.java
@@ -94,6 +94,10 @@ public static String upload(byte[] data, ImageType type, JsonObject extra, ChatI
     public static String getString(JsonObject object, String key) {
         return object.get(key) == null ? null : object.get(key).isNull() ? null : object.get(key).asString();
     }
+    
+    public static String getString(JsonObject object, String key, String nullValue) {
+        return object.get(key) == null ? nullValue : object.get(key).isNull() ? nullValue : object.get(key).asString();
+    }
 
     public static String coerceToString(JsonValue value) {
         return value.isString() ? value.asString() : value.toString();
diff --git a/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java b/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java
index d85eeca..d030dda 100644
--- a/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java
@@ -283,7 +283,11 @@ public void sync() throws ConnectionException {
     // Begin internal access methods
 
     public void onMessage(ChatMessageImpl message) {
-        this.messages.add(message);
+        if (this.messages.isEmpty()) {
+            this.messages.add(message);
+        } else {
+            this.messages.set(0, message);
+        }
         message.getSender().onMessage(message);
     }
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java b/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
index 753529f..94453ab 100644
--- a/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
+++ b/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
@@ -40,6 +40,7 @@
 import java.io.UnsupportedEncodingException;
 import java.net.HttpURLConnection;
 import java.net.URLDecoder;
+import java.net.UnknownHostException;
 import java.nio.charset.StandardCharsets;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
@@ -68,14 +69,17 @@ public FullClient(String username, String password, Set<String> resources, Logge
     }
 
     @Override
-    public void login() throws InvalidCredentialsException, ConnectionException, WrongPasswordException, AccountNotFoundException, SuspiciousLoginException, IOException {
+    public void login() throws InvalidCredentialsException, ConnectionException, WrongPasswordException, AccountNotFoundException, SuspiciousLoginException, IOException, UnknownHostException, Exception {
         logger.finer("Refreshing tokens");
     
         Response authorize = null;
         try {
             authorize = Jsoup.connect(SERVER_HOSTNAME + "/oauth20_authorize.srf?client_id=00000000480BC46C&scope=service%3A%3Alw.skype.com%3A%3AMBI_SSL&response_type=token&redirect_uri=https%3A%2F%2Flogin.live.com%2Foauth20_desktop.srf&state=999&locale=en").maxBodySize(100 * 1024 * 1024).timeout(30000).method(Connection.Method.GET).ignoreContentType(true).ignoreHttpErrors(true).execute();
-        } catch (IOException ex) {
+        } catch (Exception ex) {
+            this.handleError(ErrorSource.SESSION_ACTIVE, ex, false);
             Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+            UnknownHostException e = new UnknownHostException();
+            throw e;
         }
 
         String MSPOK = authorize.cookie("MSPOK");
@@ -235,7 +239,7 @@ public void logout() throws ConnectionException {
     }
 
     @Override
-    public void loadAllContacts() throws ConnectionException {
+    public void loadAllContacts() throws Exception {
         int i = 0;
         
         JsonObject object = null;
@@ -268,7 +272,7 @@ public void loadAllContacts() throws ConnectionException {
     }
 
     @Override
-    public void getContactRequests(boolean fromWebsocket) throws ConnectionException {
+    public void getContactRequests(boolean fromWebsocket) throws Exception {
         JsonArray array =  Endpoints.AUTH_REQUESTS_URL
                 .open(this)
                 .as(JsonArray.class)
@@ -294,7 +298,7 @@ public void getContactRequests(boolean fromWebsocket) throws ConnectionException
     }
 
     @Override
-    public void updateContactList() throws ConnectionException {
+    public void updateContactList() throws Exception {
         int i = 0;
         JsonObject object = null;
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/GuestClient.java b/src/main/java/com/samczsun/skype4j/internal/client/GuestClient.java
index 401095a..ade8834 100644
--- a/src/main/java/com/samczsun/skype4j/internal/client/GuestClient.java
+++ b/src/main/java/com/samczsun/skype4j/internal/client/GuestClient.java
@@ -56,7 +56,7 @@ public GuestClient(String username, String chatId, Set<String> resources, Logger
     }
 
     @Override
-    public void login() throws ConnectionException, InvalidCredentialsException, WrongPasswordException, AccountNotFoundException, SuspiciousLoginException, IOException {
+    public void login() throws ConnectionException, InvalidCredentialsException, WrongPasswordException, AccountNotFoundException, SuspiciousLoginException, IOException, Exception {
         JsonObject response = Endpoints.NEW_GUEST
                 .open(this)
                 .as(JsonObject.class)
diff --git a/src/main/java/com/samczsun/skype4j/internal/participants/ParticipantImpl.java b/src/main/java/com/samczsun/skype4j/internal/participants/ParticipantImpl.java
index b37125a..878ff31 100644
--- a/src/main/java/com/samczsun/skype4j/internal/participants/ParticipantImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/participants/ParticipantImpl.java
@@ -94,8 +94,14 @@ public void updateRole(Participant.Role role) {
     }
 
     public void onMessage(ChatMessage message) {
-        this.messages.add(message);
-        this.messageMap.put(message.getClientId(), message);
+        if (this.messages.isEmpty() && this.messageMap.isEmpty()) {
+            this.messages.add(message);
+            this.messageMap.put(message.getClientId(), message);
+        } else {
+            this.messages.set(0, message);
+            this.messageMap.clear();
+            this.messageMap.put(message.getClientId(), message);
+        }
     }
 
     public void insertMessage(ChatMessage m, int i) {
diff --git a/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactImpl.java b/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactImpl.java
index 9ba7a0f..0db8fdd 100644
--- a/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactImpl.java
@@ -33,7 +33,11 @@
 
 import java.awt.*;
 import java.awt.image.BufferedImage;
+import java.io.PrintWriter;
+import java.io.StringWriter;
 import java.util.UUID;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 public class ContactImpl implements Contact {
@@ -120,7 +124,7 @@ public ContactImpl(SkypeImpl skype, String username, JsonObject unaddedData) thr
         }
     }
 
-    public ContactImpl(SkypeImpl skype, JsonObject contact) throws ConnectionException {
+    public ContactImpl(SkypeImpl skype, JsonObject contact) throws Exception {
         this.skype = skype;
         update(contact);
     }
@@ -294,85 +298,98 @@ public Chat getPrivateConversation() throws ConnectionException, ChatNotFoundExc
         return skype.getOrLoadChat("8:" + this.username);
     }
 
-    public void update(JsonObject contact) throws ConnectionException {
-        this.username = contact.get("person_id").asString();
-        this.isAuthorized = contact.get("authorized").asBoolean();
-        this.isBlocked = contact.get("blocked").asBoolean();
-        this.displayName = Utils.getString(contact, "display_name");
-        this.avatarURL = Utils.getString(contact, "avatar_url");
-        this.mood = Utils.getString(contact, "mood");
-        this.type = Utils.getString(contact, "type");
-        this.authCertificate = Utils.getString(contact, "auth_certificate");
-        this.status = null;
-        if (contact.get("locations") != null) {
-            JsonObject locations = contact.get("locations").asArray().get(0).asObject();
-            this.country = locations.get("country") == null ? null : locations.get("country").asString();
-            this.city = locations.get("city") == null ? null : locations.get("city").asString();
+    public void update(JsonObject contact) throws Exception {
+        try {    
+            this.username = contact.get("person_id").asString();
+            this.isAuthorized = contact.get("authorized").asBoolean();
+            this.isBlocked = contact.get("blocked").asBoolean();
+            this.displayName = Utils.getString(contact, "display_name");
+            this.avatarURL = Utils.getString(contact, "avatar_url");
+            this.mood = Utils.getString(contact, "mood");
+            this.type = Utils.getString(contact, "type");
+            this.authCertificate = Utils.getString(contact, "auth_certificate");
+            this.phones = "";
+            this.status = null;
+            if (contact.get("locations") != null) {
+                JsonObject locations = contact.get("locations").asArray().get(0).asObject();
+                this.country = locations.get("country") == null ? null : locations.get("country").asString();
+                this.city = locations.get("city") == null ? null : locations.get("city").asString();
+            }
+            JsonObject profile = (JsonObject) contact.get("profile22");
+            if (profile != null) updateProfile(profile);
+        } catch (Exception e) {
+            StringWriter ex = new StringWriter();
+            e.printStackTrace(new PrintWriter(ex));
+            Logger.getLogger("log_skype_manager").log(Level.FINEST, ex.toString());
         }
-        JsonObject profile = (JsonObject) contact.get("profile");
-        updateProfile(profile);
     }
 
     public void updateProfile(JsonObject profile) {
-        JsonObject nameDetails = (JsonObject) profile.get("name");
-        JsonArray phonesArray = (JsonArray) profile.get("phones");
-        String phonesStr = "";
-        if (phonesArray != null){
-            for (int i = 0; i < phonesArray.size(); i++){
-                JsonObject eachPhone = (JsonObject) phonesArray.get(i);
-                if (i > 0) {
-                    phonesStr += ", ";
+        try {
+            JsonObject nameDetails = (JsonObject) profile.get("name");
+            JsonArray phonesArray = (JsonArray) profile.get("phones");
+            String phonesStr = "";
+            if (phonesArray != null){
+                for (int i = 0; i < phonesArray.size(); i++){
+                    JsonObject eachPhone = (JsonObject) phonesArray.get(i);
+                    if (i > 0) {
+                        phonesStr += ", ";
+                    }
+                    phonesStr += eachPhone.get("number").asString();
                 }
-                phonesStr += eachPhone.get("number").asString();
             }
-        }
-        if (nameDetails != null){
-            this.firstName = Utils.getString(nameDetails, "first");
-            this.lastName = Utils.getString(nameDetails, "surname");    
-        } else {
-            this.firstName = Utils.getString(profile, "firstname");
-            this.lastName = Utils.getString(profile, "lastname");
-        }
-        this.birthday = Utils.getString(profile, "birthday");
-        this.phones = phonesStr;
-
-        if (profile.get("gender") != null) {
-            if (profile.get("gender").isNumber()) {
-                this.gender = String.valueOf(profile.get("gender").asInt());
-            } else if (profile.get("gender").isString()) {
-                this.gender = profile.get("gender").asString();
-            } else if (profile.get("gender").isBoolean()) {
-                this.gender = profile.get("gender").asBoolean() ? "1" : "0";
+            if (nameDetails != null){
+                this.firstName = Utils.getString(nameDetails, "first");
+                this.lastName = Utils.getString(nameDetails, "surname");    
             } else {
-                this.gender = profile.get("gender").toString();
+                this.firstName = Utils.getString(profile, "firstname");
+                this.lastName = Utils.getString(profile, "lastname");
+            }
+            this.birthday = Utils.getString(profile, "birthday");
+            this.phones = phonesStr;
+
+            if (profile.get("gender") != null) {
+                if (profile.get("gender").isNumber()) {
+                    this.gender = String.valueOf(profile.get("gender").asInt());
+                } else if (profile.get("gender").isString()) {
+                    this.gender = profile.get("gender").asString();
+                } else if (profile.get("gender").isBoolean()) {
+                    this.gender = profile.get("gender").asBoolean() ? "1" : "0";
+                } else {
+                    this.gender = profile.get("gender").toString();
+                }
             }
-        }
 
-        this.language = Utils.getString(profile, "language");
-        this.avatarURL = Utils.getString(profile, "avatar_url");
-
-        if (this.displayName == null)
-            this.displayName = Utils.getString(profile, "displayname");
-        if (this.mood == null)
-            this.mood = Utils.getString(profile, "mood");
-        if (this.richMood == null)
-            this.richMood = Utils.getString(profile, "richMood");
-        if (this.country == null)
-            this.country = Utils.getString(profile, "country");
-        if (this.city == null)
-            this.city = Utils.getString(profile, "city");
-
-        if (this.displayName == null) {
-            if (this.firstName != null) {
-                this.displayName = this.firstName;
-                if (this.lastName != null) {
-                    this.displayName = this.displayName + " " + this.lastName;
+            this.language = Utils.getString(profile, "language");
+            this.avatarURL = Utils.getString(profile, "avatar_url");
+
+            if (this.displayName == null)
+                this.displayName = Utils.getString(profile, "displayname");
+            if (this.mood == null)
+                this.mood = Utils.getString(profile, "mood");
+            if (this.richMood == null)
+                this.richMood = Utils.getString(profile, "richMood");
+            if (this.country == null)
+                this.country = Utils.getString(profile, "country");
+            if (this.city == null)
+                this.city = Utils.getString(profile, "city");
+
+            if (this.displayName == null) {
+                if (this.firstName != null) {
+                    this.displayName = this.firstName;
+                    if (this.lastName != null) {
+                        this.displayName = this.displayName + " " + this.lastName;
+                    }
+                } else if (this.lastName != null) {
+                    this.displayName = this.lastName;
+                } else {
+                    this.displayName = this.username;
                 }
-            } else if (this.lastName != null) {
-                this.displayName = this.lastName;
-            } else {
-                this.displayName = this.username;
             }
+        } catch (Exception e) {
+            StringWriter ex = new StringWriter();
+            e.printStackTrace(new PrintWriter(ex));
+            Logger.getLogger("log_skype_manager").log(Level.FINEST, ex.toString());
         }
     }
 }
