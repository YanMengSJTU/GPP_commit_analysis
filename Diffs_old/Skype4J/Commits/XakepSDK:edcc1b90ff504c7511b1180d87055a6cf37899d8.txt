diff --git a/pom.xml b/pom.xml
index dda6a98..1ea688c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -59,6 +59,12 @@
             <version>2.0.2-beta</version>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <version>4.11</version>
+            <scope>test</scope>
+        </dependency>
     </dependencies>
     <distributionManagement>
         <repository>
diff --git a/src/main/java/com/samczsun/skype4j/StreamUtils.java b/src/main/java/com/samczsun/skype4j/StreamUtils.java
index dca0139..8e618bd 100644
--- a/src/main/java/com/samczsun/skype4j/StreamUtils.java
+++ b/src/main/java/com/samczsun/skype4j/StreamUtils.java
@@ -9,9 +9,7 @@ public static String readFully(InputStream in) throws IOException {
         ByteArrayOutputStream out = new ByteArrayOutputStream();
         byte[] chunk = new byte[2048];
         int read = 0;
-        while ((read = in.read(chunk)) > 0) {
-            out.write(chunk, 0, read);
-        }
+        while ((read = in.read(chunk)) > 0) out.write(chunk, 0, read);
         return out.toString();
     }
 }
diff --git a/src/main/java/com/samczsun/skype4j/formatting/Message.java b/src/main/java/com/samczsun/skype4j/formatting/Message.java
index 9b923a4..9cf7b74 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/Message.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/Message.java
@@ -107,7 +107,7 @@ public void head(Node node, int depth) {
                             stack.peek().with(newText);
                             stack.push(newText);
                         } else if (node.nodeName().equals("#text")) {
-                            stack.peek().with(Text.plain(((TextNode) node).text()));
+                            stack.peek().with(Text.plain(((TextNode) node).getWholeText()));
                         }
                     } else {
                         if (node.nodeName().equals("b")) {
@@ -150,7 +150,7 @@ public void head(Node node, int depth) {
                             parsed.with(currentText);
                             stack.push(currentText);
                         } else if (node.nodeName().equals("#text")) {
-                            parsed.with(Text.plain(((TextNode) node).text()));
+                            parsed.with(Text.plain(((TextNode) node).getWholeText()));
                         }
                     }
                 }
diff --git a/src/main/java/com/samczsun/skype4j/formatting/PlainText.java b/src/main/java/com/samczsun/skype4j/formatting/PlainText.java
index a9d6faa..a3641c4 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/PlainText.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/PlainText.java
@@ -18,4 +18,20 @@ public String write() {
     public String toString() {
         return this.write();
     }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        PlainText plainText = (PlainText) o;
+
+        return !(value != null ? !value.equals(plainText.value) : plainText.value != null);
+
+    }
+
+    @Override
+    public int hashCode() {
+        return value != null ? value.hashCode() : 0;
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/com/samczsun/skype4j/formatting/RichText.java b/src/main/java/com/samczsun/skype4j/formatting/RichText.java
index 742e5d0..76fd2e6 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/RichText.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/RichText.java
@@ -5,8 +5,6 @@
 import java.util.Collections;
 import java.util.List;
 
-import org.apache.commons.lang3.StringEscapeUtils;
-
 public class RichText extends Text {
     private boolean bold = false;
     private boolean italic = false;
@@ -64,6 +62,9 @@ public RichText withSize(int size) {
     }
 
     public RichText with(Text t) {
+        if (children == null) {
+            children = new ArrayList<>();
+        }
         this.children.add(t);
         return this;
     }
@@ -138,4 +139,37 @@ public String write() {
     public String toString() {
         return this.write();
     }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        RichText richText = (RichText) o;
+
+        if (bold != richText.bold) return false;
+        if (italic != richText.italic) return false;
+        if (underline != richText.underline) return false;
+        if (strikethrough != richText.strikethrough) return false;
+        if (blink != richText.blink) return false;
+        if (size != richText.size) return false;
+        if (link != null ? !link.equals(richText.link) : richText.link != null) return false;
+        if (color != null ? !color.equals(richText.color) : richText.color != null) return false;
+        return children.equals(richText.children);
+
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (bold ? 1 : 0);
+        result = 31 * result + (italic ? 1 : 0);
+        result = 31 * result + (underline ? 1 : 0);
+        result = 31 * result + (strikethrough ? 1 : 0);
+        result = 31 * result + (blink ? 1 : 0);
+        result = 31 * result + (link != null ? link.hashCode() : 0);
+        result = 31 * result + (color != null ? color.hashCode() : 0);
+        result = 31 * result + size;
+        result = 31 * result + children.hashCode();
+        return result;
+    }
 }
\ No newline at end of file
diff --git a/src/test/java/com/samczsun/skype4j/FormattingTest.java b/src/test/java/com/samczsun/skype4j/FormattingTest.java
new file mode 100644
index 0000000..65b18cf
--- /dev/null
+++ b/src/test/java/com/samczsun/skype4j/FormattingTest.java
@@ -0,0 +1,98 @@
+package com.samczsun.skype4j;
+
+import com.samczsun.skype4j.formatting.Message;
+import com.samczsun.skype4j.formatting.RichText;
+import com.samczsun.skype4j.formatting.Text;
+import org.jsoup.Jsoup;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.nodes.Node;
+import org.jsoup.nodes.TextNode;
+import org.jsoup.select.NodeVisitor;
+import org.junit.*;
+import org.junit.Test;
+
+import java.awt.*;
+import java.awt.List;
+import java.util.*;
+
+/**
+ * Created by sam on 2015-07-09.
+ */
+public class FormattingTest {
+    @Test
+    public void testParsing() {
+        String html = "Plain<b>Bold<i>Italic</i></b>\n<a href=\"http://google.com\">google</a><s>Strikethrough</s><blink>Blink</blink><u>Underline</u>";
+        Message parsed = Message.fromHtml(html);
+        Assert.assertEquals(html, parsed.asHtml());
+    }
+
+    @Test
+    public void testBuilding() {
+        Message message = Message.create()
+                .with(Text.plain("Plain"))
+                .with(Text.rich().withBold()
+                                .with(Text.plain("Bold"))
+                                .with(Text.rich().withItalic()
+                                                .with(Text.plain("Italic"))
+                                )
+                )
+                .with(Text.NEW_LINE)
+                .with(Text.rich().withLink("http://google.com")
+                                .with(Text.plain("google"))
+                )
+                .with(Text.BLANK)
+                .with(Text.rich().withStrikethrough()
+                                .with(Text.plain("Strikethrough"))
+                )
+                .with(Text.rich().withBlink()
+                                .with(Text.plain("Blink"))
+                )
+                .with(Text.rich().withUnderline()
+                                .with(Text.plain("Underline"))
+                )
+                .with(Text.rich().withColor(Color.BLACK).withSize(10)
+                                .with(Text.plain("Black"))
+                );
+
+        String html = "Plain<b>Bold<i>Italic</i></b>\n<a href=\"http://google.com\">google</a><s>Strikethrough</s><blink>Blink</blink><u>Underline</u><font size=\"10\" color=\"#000000\">Black</font>";
+
+        Assert.assertEquals(html, message.asHtml());
+    }
+
+    @Test
+    public void testPlainText() {
+        Object randomObject = new Object();
+        String text = "This is %s formatted";
+        Assert.assertEquals(Text.plain((byte) 1).toString(), String.valueOf((byte) 1));
+        Assert.assertEquals(Text.plain((short) 1).toString(), String.valueOf((short) 1));
+        Assert.assertEquals(Text.plain((double) 1).toString(), String.valueOf((double) 1));
+        Assert.assertEquals(Text.plain(1).toString(), String.valueOf(1));
+        Assert.assertEquals(Text.plain((float) 1).toString(), String.valueOf((float) 1));
+        Assert.assertEquals(Text.plain((long) 1).toString(), String.valueOf((long) 1));
+        Assert.assertEquals(Text.plain(randomObject).toString(), String.valueOf(randomObject));
+        Assert.assertEquals(Text.plain(text, randomObject).toString(), String.format(text, randomObject));
+    }
+
+    @Test
+    public void testChildren() {
+        RichText text = Text.rich().withBold()
+                .with(Text.plain("Hello"))
+                .with(
+                        Text.rich().withItalic()
+                                .with(Text.plain("Bye"))
+                );
+
+        Assert.assertEquals(2, text.children().size());
+        Assert.assertEquals(Text.plain("Hello"), text.child(0));
+        Assert.assertEquals(Text.rich().withItalic()
+                .with(Text.plain("Bye")), text.child(1));
+        Assert.assertEquals(Text.rich().withItalic()
+                .with(Text.plain("Bye")).hashCode(), text.child(1).hashCode());
+    }
+
+    @Test
+    public void testReturns() {
+        Assert.assertNotNull(Text.rich().withUnderline());
+    }
+}
diff --git a/src/test/java/com/samczsun/skype4j/MessageTest.java b/src/test/java/com/samczsun/skype4j/MessageTest.java
deleted file mode 100644
index c515424..0000000
--- a/src/test/java/com/samczsun/skype4j/MessageTest.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package com.samczsun.skype4j;
-
-import com.samczsun.skype4j.formatting.Message;
-import com.samczsun.skype4j.formatting.RichText;
-import com.samczsun.skype4j.formatting.Text;
-import org.jsoup.Jsoup;
-import org.jsoup.nodes.Document;
-import org.jsoup.nodes.Element;
-import org.jsoup.nodes.Node;
-import org.jsoup.nodes.TextNode;
-import org.jsoup.select.NodeVisitor;
-
-import java.awt.*;
-import java.util.Stack;
-
-/**
- * Created by sam on 2015-07-09.
- */
-public class MessageTest {
-    public static void main(String[] args) {
-        String text = "Hello";
-        Message parsed = Message.fromHtml(text);
-        if (!text.equalsIgnoreCase(parsed.toString())) {
-            System.out.println("FAILED");
-        } else {
-            System.out.println("yay");
-        }
-    }
-}
diff --git a/src/test/java/com/samczsun/skype4j/StreamUtilsTest.java b/src/test/java/com/samczsun/skype4j/StreamUtilsTest.java
new file mode 100644
index 0000000..fe8e16f
--- /dev/null
+++ b/src/test/java/com/samczsun/skype4j/StreamUtilsTest.java
@@ -0,0 +1,19 @@
+package com.samczsun.skype4j;
+
+import junit.framework.TestCase;
+import org.junit.*;
+
+import java.io.ByteArrayInputStream;
+
+/**
+ * Created by sam on 2015-07-10.
+ */
+public class StreamUtilsTest extends TestCase {
+
+    @org.junit.Test
+    public void testReadFully() throws Exception {
+        String data = "This is a test";
+        ByteArrayInputStream stream = new ByteArrayInputStream(data.getBytes());
+        Assert.assertEquals(StreamUtils.readFully(stream), data);
+    }
+}
\ No newline at end of file
