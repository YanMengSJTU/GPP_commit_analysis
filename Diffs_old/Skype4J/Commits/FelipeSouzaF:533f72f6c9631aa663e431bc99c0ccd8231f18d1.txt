diff --git a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
index 77b7fa2..11a6fac 100644
--- a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
+++ b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
@@ -226,6 +226,7 @@ private Endpoints defaultHeader(String key, Provider<String> val) {
         private String cause;
         private boolean dontConnect;
         private boolean redirect = true;
+        private boolean timeout = true;
 
         private EndpointConnection(Endpoints endpoint, SkypeImpl skype, Object[] args) {
             this.endpoint = endpoint;
@@ -362,6 +363,10 @@ public E_TYPE connect(String method, byte[] rawData) throws ConnectionException
                 connection = (HttpURLConnection) url.openConnection();
                 connection.setRequestMethod(method);
                 connection.setInstanceFollowRedirects(false);
+                if (this.timeout) {
+                    connection.setConnectTimeout(20000);
+                    connection.setReadTimeout(20000);
+                }
                 for (Map.Entry<String, String> ent : headers.entrySet()) {
                     connection.setRequestProperty(ent.getKey(), ent.getValue());
                 }
@@ -411,6 +416,11 @@ private String serializeCookies(Map<String, String> cookies) {
             }
             return result.toString();
         }
+
+        public EndpointConnection<E_TYPE> dontTimeout() {
+            this.timeout = false;
+            return this;
+        }
     }
 
     public interface Provider<T> {
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
index 333d386..33d33fe 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
@@ -165,7 +165,11 @@ public void login() throws ConnectionException, InvalidCredentialsException, Wro
         }
         if (scheduler != null) {
             scheduler.shutdownNow();
-            while (!scheduler.isTerminated()) ;
+            while (!scheduler.isTerminated()) {
+                try {
+                    Thread.sleep(500);
+                } catch (InterruptedException ignore) { }
+            }
         }
         shutdownThread = Executors.newSingleThreadExecutor(new SkypeThreadFactory(this, "Shutdown"));
         scheduler = Executors.newFixedThreadPool(1, new SkypeThreadFactory(this, "Poller"));
@@ -515,6 +519,13 @@ public void subscribe() throws ConnectionException {
                 this.pollThread = null;
             }
             (pollThread = new PollThread(this, Encoder.encode(endpointId))).start();
+            
+            if (this.activeThread != null) {
+                this.activeThread.kill();
+                this.activeThread = null;
+            }
+            (activeThread = new ActiveThread(this, Encoder.encode(endpointId))).start();
+            
             subscribed.set(true);
         } catch (IOException io) {
             throw ExceptionHandler.generateException("While subscribing", io);
@@ -544,11 +555,6 @@ public void setRegistrationToken(String registrationToken) {
         this.registrationTokenExpiryTime = Long.parseLong(splits[1].substring("expires=".length() + 1)) * 1000;
         if (splits.length > 2) {
             this.endpointId = splits[2].split("=")[1];
-            if (this.activeThread != null) {
-                this.activeThread.kill();
-                this.activeThread = null;
-            }
-            (activeThread = new ActiveThread(this, Encoder.encode(endpointId))).start();
         }
     }
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java b/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
index 6a24326..43644a3 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
@@ -40,12 +40,10 @@
 import java.security.KeyManagementException;
 import java.security.NoSuchAlgorithmException;
 import java.security.cert.X509Certificate;
-import java.sql.SQLException;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Level;
-import java.util.logging.Logger;
 
 public class SkypeWebSocket extends WebSocketClient {
     private final SkypeImpl skype;
@@ -174,6 +172,7 @@ public void onMessage(String s) {
 
     @Override
     public void onClose(int i, String s, boolean b) {
+        skype.shutdown();
         if (pingThread != null) {
             pingThread.interrupt();
         }
diff --git a/src/main/java/com/samczsun/skype4j/internal/threads/AuthenticationChecker.java b/src/main/java/com/samczsun/skype4j/internal/threads/AuthenticationChecker.java
index e566766..0f6915e 100644
--- a/src/main/java/com/samczsun/skype4j/internal/threads/AuthenticationChecker.java
+++ b/src/main/java/com/samczsun/skype4j/internal/threads/AuthenticationChecker.java
@@ -64,5 +64,6 @@ public void run() {
 
     public void kill() {
         this.stop.set(true);
+        this.interrupt();
     }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/threads/PollThread.java b/src/main/java/com/samczsun/skype4j/internal/threads/PollThread.java
index 721e2ba..94fcc8e 100644
--- a/src/main/java/com/samczsun/skype4j/internal/threads/PollThread.java
+++ b/src/main/java/com/samczsun/skype4j/internal/threads/PollThread.java
@@ -13,7 +13,6 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-
 package com.samczsun.skype4j.internal.threads;
 
 import com.eclipsesource.json.JsonObject;
@@ -55,7 +54,8 @@ public void run() {
             final Endpoints.EndpointConnection<HttpURLConnection> epconn = Endpoints.POLL
                     .open(skype, pollId)
                     .header("Content-Type", "application/json")
-                    .dontConnect();
+                    .dontConnect()
+                    .dontTimeout();
             final AtomicBoolean complete = new AtomicBoolean(false);
             while (skype.isAuthenticated()) {
                 try {
@@ -157,14 +157,18 @@ public void run() {
                 }
             }
         }
+        
+        skype.shutdown();
     }
 
     public void shutdown() {
         this.interrupt();
         while (this.getState() != State.TERMINATED) {
             try {
-                Thread.sleep(1000);
-            } catch (InterruptedException ex) { return; }
+                Thread.sleep(500);
+            } catch (InterruptedException ex) {
+                return;
+            }
         }
         if (this.connection != null) {
             this.connection.disconnect();
@@ -172,8 +176,10 @@ public void shutdown() {
         this.inputFetcher.shutdownNow();
         while (!this.inputFetcher.isTerminated()) {
             try {
-                Thread.sleep(1000);
-            } catch (InterruptedException ex) { return; }
+                Thread.sleep(500);
+            } catch (InterruptedException ex) {
+                return;
+            }
         }
     }
 }
