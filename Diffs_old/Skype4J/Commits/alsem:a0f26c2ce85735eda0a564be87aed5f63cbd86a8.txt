diff --git a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
index 41c9820..a77f0ba 100644
--- a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
+++ b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
@@ -24,12 +24,20 @@
 import java.net.Proxy;
 import java.net.URL;
 import java.nio.charset.StandardCharsets;
+import java.security.KeyManagementException;
+import java.security.NoSuchAlgorithmException;
+import java.security.cert.CertificateException;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.function.Function;
 import java.util.function.Predicate;
 
 import javax.imageio.ImageIO;
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLSocketFactory;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
 
 import com.eclipsesource.json.JsonArray;
 import com.eclipsesource.json.JsonObject;
@@ -86,7 +94,8 @@
     @Deprecated
     public static final Endpoints AUTH_REQUESTS_URL = new Endpoints(
             "https://api.skype.com/users/self/contacts/auth-request").skypetoken();
-
+    public static final Endpoints AUTHORIZE_CONTACT = new Endpoints(
+            "https://api.skype.com/users/self/contacts/auth-request/%s/accept").skypetoken();
     public static final Endpoints GET_CONTACT_REQUESTS = new Endpoints(
 			"https://contacts.skype.com/contacts/v2/users/%s/invites").skypetoken();
     public static final Endpoints TROUTER_URL = new Endpoints("https://go.trouter.io/v2/a");
@@ -344,7 +353,7 @@ public E_TYPE connect(String method, byte[] rawData) throws ConnectionException
             for (Map.Entry<String, Provider<String>> provider : endpoint.providers.entrySet()) {
                 header(provider.getKey(), provider.getValue().provide(skype));
             }
-            HttpURLConnection connection = null;
+            HttpsURLConnection connection = null;
             try {
                 if (this.url == null) { //todo could fail if cloud is updated?
                     String surl = endpoint.url;
@@ -372,9 +381,12 @@ public E_TYPE connect(String method, byte[] rawData) throws ConnectionException
                      proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(PROXY_HOST,
                              Integer.parseInt(PROXY_PORT)));
                  }
-                connection = (HttpURLConnection) url.openConnection(proxy);
+
+                connection = (HttpsURLConnection) url.openConnection(proxy);
                 connection.setRequestMethod(method);
                 connection.setInstanceFollowRedirects(false);
+                connection.setSSLSocketFactory(getUnsafeSslSocketFactory());
+                connection.setHostnameVerifier((hostName, session) -> true);
 //                HttpsURLConnection.setDefaultHostnameVerifier((a,b) -> true);
                 for (Map.Entry<String, String> ent : headers.entrySet()) {
                     connection.setRequestProperty(ent.getKey(), ent.getValue());
@@ -418,6 +430,36 @@ public E_TYPE connect(String method, byte[] rawData) throws ConnectionException
             }
         }
 
+		private SSLSocketFactory getUnsafeSslSocketFactory() {
+			try {
+				// Create a trust manager that does not validate certificate chains
+				final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
+					@Override
+					public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType)
+							throws CertificateException {
+					}
+
+					@Override
+					public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType)
+							throws CertificateException {
+					}
+
+					@Override
+					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
+						return null;
+					}
+				} };
+
+				// Install the all-trusting trust manager
+				final SSLContext sslContext = SSLContext.getInstance("SSL");
+				sslContext.init(null, trustAllCerts, new java.security.SecureRandom());
+				// Create an ssl socket factory with our all-trusting manager
+				return sslContext.getSocketFactory();
+			} catch (NoSuchAlgorithmException | KeyManagementException e) {
+				throw new RuntimeException(e);
+			}
+		}
+
         private String serializeCookies(Map<String, String> cookies) {
             StringBuilder result = new StringBuilder();
             for (Map.Entry<String, String> cookie : cookies.entrySet()) {
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/LiveLoginHelper.java b/src/main/java/com/samczsun/skype4j/internal/client/LiveLoginHelper.java
index 9fb2822..cbb0368 100644
--- a/src/main/java/com/samczsun/skype4j/internal/client/LiveLoginHelper.java
+++ b/src/main/java/com/samczsun/skype4j/internal/client/LiveLoginHelper.java
@@ -2,12 +2,19 @@
 
 import java.net.InetSocketAddress;
 import java.net.Proxy;
+import java.security.cert.CertificateException;
+import java.security.cert.X509Certificate;
 import java.text.SimpleDateFormat;
 import java.util.Arrays;
 import java.util.Date;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLSocketFactory;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
+
 import org.apache.commons.lang3.StringEscapeUtils;
 import org.json.JSONArray;
 import org.json.JSONObject;
@@ -148,8 +155,7 @@ public static JsonObject getXTokenObject(String email, String password) throws E
 		if (!PROXY_HOST.isEmpty() && !PROXY_PORT.isEmpty()) {
 			proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(PROXY_HOST, Integer.parseInt(PROXY_PORT)));
 		}
-
-		OkHttpClient client = new OkHttpClient.Builder().proxy(proxy).build();
+		OkHttpClient client = getUnsafeOkHttpClient(proxy);
 		MediaType MEDIA_TYPE_MARKDOWN
 				= MediaType.parse("application/json; charset=utf-8");
 
@@ -210,4 +216,39 @@ public String getMessage() {
 
 	}
 
+	private static OkHttpClient getUnsafeOkHttpClient(Proxy proxy) {
+		try {
+			// Create a trust manager that does not validate certificate chains
+			final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
+				@Override
+				public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType)
+						throws CertificateException {
+				}
+
+				@Override
+				public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType)
+						throws CertificateException {
+				}
+
+				@Override
+				public java.security.cert.X509Certificate[] getAcceptedIssuers() {
+					return new X509Certificate[]{};
+				}
+			} };
+
+			// Install the all-trusting trust manager
+			final SSLContext sslContext = SSLContext.getInstance("SSL");
+			sslContext.init(null, trustAllCerts, new java.security.SecureRandom());
+			// Create an ssl socket factory with our all-trusting manager
+			final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();
+
+			OkHttpClient okHttpClient = new OkHttpClient().newBuilder()
+					.sslSocketFactory(sslSocketFactory, (X509TrustManager) trustAllCerts[0])
+					.hostnameVerifier((hostname, session) -> true)
+					.proxy(proxy).build();
+			return okHttpClient;
+		} catch (Exception e) {
+			throw new RuntimeException(e);
+		}
+	}
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactRequestImpl.java b/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactRequestImpl.java
index 9bb9a58..bcbe5ed 100644
--- a/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactRequestImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactRequestImpl.java
@@ -16,15 +16,16 @@
 
 package com.samczsun.skype4j.internal.participants.info;
 
+import java.text.ParseException;
+import java.time.Instant;
+import java.util.Date;
+
+import org.apache.commons.lang3.StringUtils;
+
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.internal.Endpoints;
 import com.samczsun.skype4j.internal.client.FullClient;
 import com.samczsun.skype4j.participants.info.Contact;
-import org.apache.commons.lang3.StringUtils;
-
-import java.text.ParseException;
-import java.time.Instant;
-import java.util.Date;
 
 public class ContactRequestImpl implements Contact.ContactRequest {
 
@@ -61,6 +62,11 @@ public void accept() throws ConnectionException {
                 .open(skype, skype.getUsername(), sender)
                 .expect(200, "While accepting contact request")
                 .put();
+
+        Endpoints.AUTHORIZE_CONTACT
+                .open(skype, sender)
+                .expect(200, "While accepting auth-request")
+                .put();
 //        Endpoints.AUTHORIZE_CONTACT_SELF.open(skype, StringUtils.prependIfMissing(sender, "8:"))
 //                .expect(200, "While authorizing contact").put();
     }
