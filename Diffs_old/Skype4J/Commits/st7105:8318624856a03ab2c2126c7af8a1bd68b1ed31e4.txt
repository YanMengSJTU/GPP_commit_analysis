diff --git a/src/main/java/com/samczsun/skype4j/SkypeBuilder.java b/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
index 007226a..29ae188 100644
--- a/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
+++ b/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
@@ -20,6 +20,10 @@
 import com.samczsun.skype4j.internal.client.FullClient;
 import com.samczsun.skype4j.internal.client.GuestClient;
 
+import javax.xml.bind.DatatypeConverter;
+import java.nio.charset.StandardCharsets;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
 import java.util.*;
 import java.util.logging.Logger;
 
@@ -29,7 +33,6 @@
 public class SkypeBuilder {
 
     private final String username;
-    private final String password;
 
     private Set<String> resources = new HashSet<>();
     private List<ErrorHandler> errorHandlers = new ArrayList<>();
@@ -44,7 +47,6 @@
      */
     public SkypeBuilder(String username, String password) {
         this.username = username;
-        this.password = password;
     }
 
     /**
@@ -54,7 +56,6 @@ public SkypeBuilder(String username, String password) {
      */
     public SkypeBuilder(String username) {
         this.username = username;
-        this.password = null;
     }
 
     /**
@@ -108,7 +109,6 @@ public SkypeBuilder withExceptionHandler(ErrorHandler errorHandler) {
      */
     public SkypeBuilder withChat(String id) {
         if (!id.startsWith("19:")) throw new IllegalArgumentException("Invalid chat id");
-        if (password != null) throw new IllegalArgumentException("Not guest account");
         this.chatId = id;
         return this;
     }
@@ -118,16 +118,35 @@ public SkypeBuilder withChat(String id) {
      *
      * @return The Skype instance
      */
-    public Skype build() {
+    public Skype buildWithPassword(final String password) {
+
+        if (password != null) {
+            return buildWithHash(passwordToHash(username, password));
+        } else {
+            return buildWithHash(null);
+        }
+    }
+
+    public Skype buildWithHash(final String hash) {
         if (resources.isEmpty()) {
             throw new IllegalArgumentException("No resources selected");
         }
-        if (password != null) {
-            return new FullClient(username, password, resources, customLogger, errorHandlers);
+        if (hash != null) {
+            return new FullClient(username, hash, resources, customLogger, errorHandlers);
         } else if (chatId != null) {
             return new GuestClient(username, chatId, resources, customLogger, errorHandlers);
         } else {
             throw new IllegalArgumentException("No chat specified");
         }
     }
+
+    public static String passwordToHash(final String username, final String password) {
+        try {
+            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
+            byte[] encodedMD = messageDigest.digest(String.format("%s\nskyper\n%s", username.toLowerCase(), password).getBytes(StandardCharsets.UTF_8));
+            return DatatypeConverter.printBase64Binary(encodedMD);
+        } catch (NoSuchAlgorithmException e) {
+            throw new RuntimeException(e);
+        }
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java b/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
index f51ee44..b985664 100644
--- a/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
+++ b/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
@@ -27,8 +27,6 @@
 import com.samczsun.skype4j.exceptions.handler.ErrorHandler;
 import com.samczsun.skype4j.exceptions.handler.ErrorSource;
 import com.samczsun.skype4j.internal.*;
-import com.samczsun.skype4j.internal.threads.AuthenticationChecker;
-import com.samczsun.skype4j.internal.threads.ServerPingThread;
 import com.samczsun.skype4j.internal.utils.Encoder;
 import com.samczsun.skype4j.internal.utils.UncheckedRunnable;
 import com.samczsun.skype4j.user.Contact;
@@ -50,11 +48,11 @@
 public class FullClient extends SkypeImpl {
     private static final Pattern URL_PATTERN = Pattern.compile("threads/(.*)", Pattern.CASE_INSENSITIVE);
 
-    private final String password;
+    private final String hash;
 
-    public FullClient(String username, String password, Set<String> resources, Logger customLogger, List<ErrorHandler> errorHandlers) {
+    public FullClient(String username, String hash, Set<String> resources, Logger customLogger, List<ErrorHandler> errorHandlers) {
         super(username, resources, customLogger, errorHandlers);
-        this.password = password;
+        this.hash = hash;
     }
 
     @Override
@@ -63,7 +61,7 @@ public void login() throws InvalidCredentialsException, ConnectionException {
         data.put("scopes", "client");
         data.put("clientVersion", "0/7.4.85.102/259/");
         data.put("username", getUsername().toLowerCase());
-        data.put("passwordHash", hash());
+        data.put("passwordHash", hash);
         JsonObject loginData = Endpoints.LOGIN_URL.open(this)
                 .as(JsonObject.class)
                 .expect(200, "While logging in")
@@ -196,14 +194,4 @@ public GroupChat createGroupChat(Contact... contacts) throws ConnectionException
             throw ExceptionHandler.generateException("No chat location", con);
         }
     }
-
-    private String hash() {
-        try {
-            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
-            byte[] encodedMD = messageDigest.digest(String.format("%s\nskyper\n%s", getUsername().toLowerCase(), password).getBytes(StandardCharsets.UTF_8));
-            return DatatypeConverter.printBase64Binary(encodedMD);
-        } catch (NoSuchAlgorithmException e) {
-            throw new RuntimeException(e);
-        }
-    }
 }
