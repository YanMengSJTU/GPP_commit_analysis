diff --git a/src/main/java/com/samczsun/skype4j/Skype.java b/src/main/java/com/samczsun/skype4j/Skype.java
index b989619..c803cc2 100644
--- a/src/main/java/com/samczsun/skype4j/Skype.java
+++ b/src/main/java/com/samczsun/skype4j/Skype.java
@@ -69,7 +69,7 @@
      * @throws ConnectionException If an error occurs during connection
      * @throws ChatNotFoundException If this skype account is not a member of the chat
      */
-    public abstract Chat loadChat(String name) throws ConnectionException, ChatNotFoundException;
+    public abstract Chat loadChat(String name) throws ConnectionException, ChatNotFoundException, IOException;
 
     /**
      * Get a contact based on the username. The contact must already be loaded
@@ -86,7 +86,7 @@
      * @return The contact that was loaded
      * @throws ConnectionException If an exception occured while fetching contact details
      */
-    public abstract Contact loadContact(String username) throws ConnectionException;
+    public abstract Contact loadContact(String username) throws ConnectionException, IOException;
 
     /**
      * Get a contact, and if said contact doesn't exist, load it
@@ -95,7 +95,7 @@
      * @return The contact
      * @throws ConnectionException If an exception occured while fetching contact details
      */
-    public abstract Contact getOrLoadContact(String username) throws ConnectionException;
+    public abstract Contact getOrLoadContact(String username) throws ConnectionException, IOException;
 
     /**
      * Get all the chats loaded by this API
diff --git a/src/main/java/com/samczsun/skype4j/SkypeBuilder.java b/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
index 31322ab..fb3220b 100644
--- a/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
+++ b/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
@@ -22,7 +22,11 @@
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
+import java.util.logging.Logger;
 
+/**
+ * This class is used to construct a new {@link Skype} instance.
+ */
 public class SkypeBuilder {
 
     private final String username;
@@ -30,6 +34,8 @@
 
     private Set<String> resources = new HashSet<>();
 
+    private Logger customLogger;
+
     public SkypeBuilder(String username, String password) {
         this.username = username;
         this.password = password;
@@ -60,10 +66,15 @@ public SkypeBuilder withThreads() {
         return this;
     }
 
+    public SkypeBuilder withLogger(Logger logger) {
+        this.customLogger = logger;
+        return this;
+    }
+
     public Skype build() {
         if (resources.isEmpty()) {
             throw new IllegalArgumentException("No resources selected");
         }
-        return new SkypeImpl(username, password, resources);
+        return new SkypeImpl(username, password, resources, customLogger);
     }
 }
diff --git a/src/main/java/com/samczsun/skype4j/chat/Chat.java b/src/main/java/com/samczsun/skype4j/chat/Chat.java
index 6c23217..aef6c72 100644
--- a/src/main/java/com/samczsun/skype4j/chat/Chat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/Chat.java
@@ -17,34 +17,38 @@
 
 package com.samczsun.skype4j.chat;
 
+import com.samczsun.skype4j.Skype;
+import com.samczsun.skype4j.exceptions.ConnectionException;
+import com.samczsun.skype4j.exceptions.NotLoadedException;
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Message;
 import com.samczsun.skype4j.user.User;
 
+import java.io.IOException;
 import java.util.Collection;
 import java.util.List;
 
 /**
  * Represents a single chat. This can be a private message or a group chat.
- *
- * @author samczsun
  */
 public interface Chat {
     /**
-     * Sends a formatted message to this chat
+     * Sends a formatted message to this chat.
      *
      * @param message The rich text to send
-     * @return The {@link ChatMessage ChatMessage} object representing the
-     * message
-     * @throws SkypeException
+     * @return The {@link ChatMessage ChatMessage} object representing the message
+     * @throws ConnectionException If an error occurs while connecting to the endpoint
+     * @throws IOException If an unexpected error occurs
+     * @throws NotLoadedException If the chat has not yet been loaded
      */
-    ChatMessage sendMessage(Message message) throws SkypeException;
+    ChatMessage sendMessage(Message message) throws ConnectionException, IOException;
 
     /**
-     * Get the {@link User User} object represented by that username
+     * Get the {@link User} object represented by that username. Usernames are case insensitive
      *
      * @param username The username of the user
-     * @return The user object
+     * @return The user object, or null if not found
+     * @throws NotLoadedException If the chat has not yet been loaded
      */
     User getUser(String username);
 
@@ -70,10 +74,17 @@
     List<ChatMessage> getAllMessages();
 
     /**
-     * Returns whether this chat has finished loading. Any calls to act upon the
-     * chat will throw a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} if the chat is not loaded
+     * Get the {@link Skype} instance associated with this chat
+     *
+     * @return The Skype instance
+     */
+    Skype getClient();
+
+    /**
+     * Returns whether this chat has finished loading
+     * Any calls to act upon the chat will throw a {@link NotLoadedException} if the chat is not loaded
      *
-     * @return The loaded state
+     * @return Whether the chat is loaded
      */
     boolean isLoaded();
 }
diff --git a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java b/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
index c2e0a00..d58595c 100644
--- a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
+++ b/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
@@ -22,8 +22,6 @@
 
 /**
  * Represents a single message
- *
- * @author samczsun
  */
 public interface ChatMessage {
 
diff --git a/src/main/java/com/samczsun/skype4j/chat/GroupChat.java b/src/main/java/com/samczsun/skype4j/chat/GroupChat.java
index 0edad82..ac85b3a 100644
--- a/src/main/java/com/samczsun/skype4j/chat/GroupChat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/GroupChat.java
@@ -22,97 +22,82 @@
 import com.samczsun.skype4j.exceptions.NotLoadedException;
 import com.samczsun.skype4j.user.Contact;
 
+import java.io.IOException;
+
 /**
  * Represents a group chat with one or more people
- *
- * @author samczsun
  */
 public interface GroupChat extends Chat {
     /**
      * Get the topic of the chat.
-     * If the chat is not loaded a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} will be thrown
      *
      * @return The topic of this chat
-     * @throws NotLoadedException
+     * @throws NotLoadedException If the chat is not yet loaded
      */
     String getTopic();
 
     /**
-     * Set the topic of the chat. This will occur in real time.
-     * If an exception occurs while connecting updating the topic, a {@link com.samczsun.skype4j.exceptions.ConnectionException ConnectionException} will be thrown
-     * If the chat is not loaded a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} will be thrown
+     * Set the topic of the chat. This will occur in real time
      *
      * @param topic The topic
-     * @throws ConnectionException
-     * @throws NotLoadedException
+     * @throws ConnectionException If an error occurs while connecting to the endpoint
+     * @throws NotLoadedException If the chat is not yet loaded
      */
-    void setTopic(String topic) throws ConnectionException;
+    void setTopic(String topic) throws ConnectionException, IOException;
 
     /**
      * Get whether an option is enabled.
-     * If the chat is not loaded a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} will be thrown
      *
      * @param option The option to query
      * @return Whether the option is enabled
-     * @throws NotLoadedException
+     * @throws NotLoadedException If the chat is not yet loaded
      */
     boolean isOptionEnabled(OptionUpdateEvent.Option option);
 
     /**
      * Set whether an option is enabled.
      * If the option is already enabled and a request to enable it is sent or vice versa, it will be silently ignored
-     * If an exception occurs while setting the option, a {@link com.samczsun.skype4j.exceptions.ConnectionException ConnectionException} will be thrown
-     * If the chat is not loaded a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} will be thrown
      *
      * @param option The option to set
      * @param enabled Whether to enable it or not
-     * @throws ConnectionException
-     * @throws NotLoadedException
+     * @throws ConnectionException If an error occurs while connecting to the endpoint
+     * @throws NotLoadedException If the chat is not yet loaded
      */
-    void setOptionEnabled(OptionUpdateEvent.Option option, boolean enabled) throws ConnectionException;
+    void setOptionEnabled(OptionUpdateEvent.Option option, boolean enabled) throws ConnectionException, IOException;
 
     /**
      * Add a contact into this chat. This will occur in real time
-     * If an exception occurs while adding the user, a {@link com.samczsun.skype4j.exceptions.ConnectionException ConnectionException} will be thrown
-     * If the chat is not loaded a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} will be thrown
      *
      * @param contact The contact to add
-     * @throws ConnectionException
-     * @throws NotLoadedException
+     * @throws ConnectionException If an error occurs while connecting to the endpoint
+     * @throws NotLoadedException If the chat is not yet loaded
      */
-    void add(Contact contact) throws ConnectionException;
+    void add(Contact contact) throws ConnectionException, IOException;
 
     /**
      * Kick a user from this chat. This will occur in real time.
-     * If an exception occurs while kicking the user, a {@link com.samczsun.skype4j.exceptions.ConnectionException ConnectionException} will be thrown
-     * If the chat is not loaded a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} will be thrown
      *
      * @param username The username of the user to kick
-     * @throws ConnectionException
-     * @throws NotLoadedException
+     * @throws ConnectionException If an error occurs while connecting to the endpoint
+     * @throws NotLoadedException If the chat is not yet loaded
      */
-    void kick(String username) throws ConnectionException;
+    void kick(String username) throws ConnectionException, IOException;
 
     /**
      * Leave the chat. This will occur in real time.
-     * If an exception occurs while leaving the chat, a {@link com.samczsun.skype4j.exceptions.ConnectionException ConnectionException} will be thrown
-     * If the chat is not loaded a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} will be thrown
      *
-     * @throws ConnectionException
-     * @throws NotLoadedException
+     * @throws ConnectionException If an error occurs while connecting to the endpoint
+     * @throws NotLoadedException If the chat is not yet loaded
      */
-    void leave() throws ConnectionException;
+    void leave() throws ConnectionException, IOException;
 
     /**
      * Gets the join url for people to join.
-     * If joining is not enabled, an {@link IllegalArgumentException} will be thrown
-     * If an exception occurs while getting the link, a {@link com.samczsun.skype4j.exceptions.ConnectionException ConnectionException} will be thrown
-     * If the chat is not loaded a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} will be thrown
      *
      * @return The join url
-     * @throws ConnectionException
-     * @throws NotLoadedException
-     * @throws IllegalArgumentException
+     * @throws ConnectionException If an error occurs while connecting to the endpoint
+     * @throws NotLoadedException If the chat is not yet loaded
+     * @throws IllegalStateException If joining is not enabled
      */
-    String getJoinUrl() throws ConnectionException;
+    String getJoinUrl() throws ConnectionException, IOException;
 }
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/NotLoadedException.java b/src/main/java/com/samczsun/skype4j/exceptions/NotLoadedException.java
index 5d29e3e..827c906 100644
--- a/src/main/java/com/samczsun/skype4j/exceptions/NotLoadedException.java
+++ b/src/main/java/com/samczsun/skype4j/exceptions/NotLoadedException.java
@@ -19,8 +19,6 @@
 
 /**
  * Thrown when a chat is not yet loaded but an operation to modify it or read values was attempted
- *
- * @author samczsun
  */
 public class NotLoadedException extends RuntimeException {
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java b/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
index c7257ed..a9f0d02 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
@@ -42,70 +42,68 @@
     private String pictureUrl;
     private Set<OptionUpdateEvent.Option> enabledOptions = new HashSet<>();
 
-    protected ChatGroup(SkypeImpl skype, String identity) throws ConnectionException, ChatNotFoundException {
+    protected ChatGroup(SkypeImpl skype, String identity) throws ConnectionException, ChatNotFoundException, IOException {
         super(skype, identity);
     }
 
-    protected void load() throws ConnectionException, ChatNotFoundException {
+    protected void load() throws ConnectionException, ChatNotFoundException, IOException {
         if (isLoaded()) {
             return;
         }
         isLoading.set(true);
         Map<String, User> newUsers = new HashMap<>();
-        try {
-            ConnectionBuilder builder = new ConnectionBuilder();
-            builder.setUrl(getClient().withCloud(CHAT_INFO_URL, getIdentity()));
-            builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
-            builder.addHeader("Content-Type", "application/json");
-            HttpURLConnection con = builder.build();
-            if (con.getResponseCode() == 200) {
-                JsonObject object = JsonObject.readFrom(new InputStreamReader(con.getInputStream()));
-                JsonObject props = object.get("properties").asObject();
-                for (OptionUpdateEvent.Option option : OptionUpdateEvent.Option.values()) {
-                    if (props.get(option.getId()) != null && props.get(option.getId()).equals("true")) {
-                        this.enabledOptions.add(option);
-                    }
-                }
-                if (props.get("topic") != null) {
-                    this.topic = props.get("topic").asString();
-                } else {
-                    this.topic = props.get("creator").asString().substring(2);
-                }
-                JsonArray members = object.get("members").asArray();
-                for (JsonValue element : members) {
-                    String username = element.asObject().get("id").asString().substring(2);
-                    String role = element.asObject().get("role").asString();
-                    User user = users.get(username.toLowerCase());
-                    if (user == null) {
-                        user = new UserImpl(username, this);
-                    }
-                    newUsers.put(username.toLowerCase(), user);
-                    if (role.equalsIgnoreCase("admin")) {
-                        user.setRole(Role.ADMIN);
-                    } else {
-                        user.setRole(Role.USER);
-                    }
-                }
-                if (newUsers.get(getClient().getUsername().toLowerCase()) != null) {
-                    hasLoaded.set(true);
-                } else {
-                    throw new NotParticipatingException();
-                }
-            } else if (con.getResponseCode() == 404) {
-                throw new ChatNotFoundException();
+
+        ConnectionBuilder builder = new ConnectionBuilder();
+        builder.setUrl(getClient().withCloud(CHAT_INFO_URL, getIdentity()));
+        builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
+        builder.addHeader("Content-Type", "application/json");
+        HttpURLConnection con = builder.build();
+
+        if (con.getResponseCode() == 404) {
+            throw new ChatNotFoundException();
+        }
+        if (con.getResponseCode() != 200) {
+            throw getClient().generateException("While loading users", con);
+        }
+        JsonObject object = JsonObject.readFrom(new InputStreamReader(con.getInputStream()));
+        JsonObject props = object.get("properties").asObject();
+        for (OptionUpdateEvent.Option option : OptionUpdateEvent.Option.values()) {
+            if (props.get(option.getId()) != null && props.get(option.getId()).equals("true")) {
+                this.enabledOptions.add(option);
+            }
+        }
+        if (props.get("topic") != null) {
+            this.topic = props.get("topic").asString();
+        } else {
+            this.topic = "";
+        }
+        JsonArray members = object.get("members").asArray();
+        for (JsonValue element : members) {
+            String username = element.asObject().get("id").asString().substring(2);
+            String role = element.asObject().get("role").asString();
+            User user = users.get(username.toLowerCase());
+            if (user == null) {
+                user = new UserImpl(username, this);
+            }
+            newUsers.put(username.toLowerCase(), user);
+            if (role.equalsIgnoreCase("admin")) {
+                user.setRole(Role.ADMIN);
             } else {
-                throw getClient().generateException(con);
+                user.setRole(Role.USER);
             }
-        } catch (IOException e) {
-            throw new ConnectionException("While loading users", e);
-        } finally {
-            this.users.clear();
-            this.users.putAll(newUsers);
-            isLoading.set(false);
         }
+
+        if (newUsers.get(getClient().getUsername().toLowerCase()) == null) {
+            throw new NotParticipatingException();
+        }
+
+        this.users.clear();
+        this.users.putAll(newUsers);
+        hasLoaded.set(true);
+        isLoading.set(false);
     }
 
-    public void addUser(String username) throws ConnectionException {
+    public void addUser(String username) throws ConnectionException, IOException {
         if (!users.containsKey(username.toLowerCase())) {
             User user = new UserImpl(username, this);
             users.put(username.toLowerCase(), user);
@@ -118,51 +116,43 @@ public void removeUser(String username) {
         users.remove(username.toLowerCase());
     }
 
-    public void kick(String username) throws ConnectionException {
+    public void kick(String username) throws ConnectionException, IOException {
         checkLoaded();
-        try {
-            ConnectionBuilder builder = new ConnectionBuilder();
-            builder.setUrl(getClient().withCloud(MODIFY_MEMBER_URL, getIdentity(), username));
-            builder.setMethod("DELETE", false);
-            builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
-            HttpURLConnection con = builder.build();
-            if (con.getResponseCode() != 200) {
-                throw getClient().generateException(con);
-            }
-        } catch (IOException e) {
-            throw new ConnectionException("While kicking", e);
+        ConnectionBuilder builder = new ConnectionBuilder();
+        builder.setUrl(getClient().withCloud(MODIFY_MEMBER_URL, getIdentity(), username));
+        builder.setMethod("DELETE", false);
+        builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
+        HttpURLConnection con = builder.build();
+        if (con.getResponseCode() != 200) {
+            throw getClient().generateException("While kicking user", con);
         }
     }
 
-    public void leave() throws ConnectionException {
+    public void leave() throws ConnectionException, IOException {
         kick(getClient().getUsername());
     }
 
     @Override
-    public String getJoinUrl() throws ConnectionException {
+    public String getJoinUrl() throws ConnectionException, IOException {
         checkLoaded();
         if (isOptionEnabled(OptionUpdateEvent.Option.JOINING_ENABLED)) {
-            try {
-                JsonObject data = new JsonObject();
-                data.add("baseDomain", "https://join.skype.com/launch/");
-                data.add("threadId", this.getIdentity());
-                ConnectionBuilder builder = new ConnectionBuilder();
-                builder.setUrl(GET_JOIN_URL);
-                builder.setMethod("POST", true);
-                builder.addHeader("X-Skypetoken", getClient().getSkypeToken());
-                builder.addHeader("Content-Type", "application/json");
-                builder.setData(data.toString());
-                HttpURLConnection con = builder.build();
-                if (con.getResponseCode() != 200) {
-                    throw getClient().generateException(con);
-                }
-                JsonObject object = JsonObject.readFrom(new InputStreamReader(con.getInputStream()));
-                return object.get("JoinUrl").asString();
-            } catch (IOException e) {
-                throw new ConnectionException("While getting join url", e);
+            JsonObject data = new JsonObject();
+            data.add("baseDomain", "https://join.skype.com/launch/");
+            data.add("threadId", this.getIdentity());
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(GET_JOIN_URL);
+            builder.setMethod("POST", true);
+            builder.addHeader("X-Skypetoken", getClient().getSkypeToken());
+            builder.addHeader("Content-Type", "application/json");
+            builder.setData(data.toString());
+            HttpURLConnection con = builder.build();
+            if (con.getResponseCode() != 200) {
+                throw getClient().generateException("While getting join URL", con);
             }
+            JsonObject object = JsonObject.readFrom(new InputStreamReader(con.getInputStream()));
+            return object.get("JoinUrl").asString();
         } else {
-            throw new IllegalArgumentException("Joining is not enabled");
+            throw new IllegalStateException("Joining is not enabled");
         }
     }
 
@@ -172,7 +162,7 @@ public String getTopic() {
         return this.topic;
     }
 
-    public void setTopic(String topic) throws ConnectionException {
+    public void setTopic(String topic) throws ConnectionException, IOException  {
         checkLoaded();
         putOption("topic", JsonValue.valueOf(topic));
     }
@@ -184,51 +174,41 @@ public boolean isOptionEnabled(OptionUpdateEvent.Option option) {
     }
 
     @Override
-    public void setOptionEnabled(OptionUpdateEvent.Option option, boolean enabled) throws ConnectionException {
+    public void setOptionEnabled(OptionUpdateEvent.Option option, boolean enabled) throws ConnectionException, IOException {
         checkLoaded();
-        if ((enabled && !enabledOptions.contains(option)) || (!enabled && enabledOptions.contains(option))) {
-            putOption(option.getId(), JsonValue.valueOf(enabled));
-            updateOption(option, enabled);
-        }
+        putOption(option.getId(), JsonValue.valueOf(enabled));
+        updateOption(option, enabled);
     }
 
     @Override
-    public void add(Contact contact) throws ConnectionException {
+    public void add(Contact contact) throws ConnectionException, IOException {
         checkLoaded();
-        try {
-            JsonObject obj = new JsonObject();
-            obj.add("role", "User");
-            ConnectionBuilder builder = new ConnectionBuilder();
-            builder.setUrl(String.format(ADD_MEMBER_URL, getIdentity(), contact.getUsername()));
-            builder.setMethod("PUT", true);
-            builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
-            builder.addHeader("Content-Type", "application/json");
-            builder.setData(obj.toString());
-            HttpURLConnection con = builder.build();
-            if (con.getResponseCode() != 200) {
-                throw getClient().generateException(con);
-            }
-        } catch (IOException e) {
-            throw new ConnectionException("While adding an user", e);
+        JsonObject obj = new JsonObject();
+        obj.add("role", "User");
+        ConnectionBuilder builder = new ConnectionBuilder();
+        builder.setUrl(String.format(ADD_MEMBER_URL, getIdentity(), contact.getUsername()));
+        builder.setMethod("PUT", true);
+        builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
+        builder.addHeader("Content-Type", "application/json");
+        builder.setData(obj.toString());
+        HttpURLConnection con = builder.build();
+        if (con.getResponseCode() != 200) {
+            throw getClient().generateException("While adding user into group", con);
         }
     }
 
-    private void putOption(String option, JsonValue value) throws ConnectionException {
-        try {
-            JsonObject obj = new JsonObject();
-            obj.add(option, value);
-            ConnectionBuilder builder = new ConnectionBuilder();
-            builder.setUrl(getClient().withCloud(MODIFY_PROPERTY_URL, getIdentity(), option));
-            builder.setMethod("PUT", true);
-            builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
-            builder.addHeader("Content-Type", "application/json");
-            builder.setData(obj.toString());
-            HttpURLConnection con = builder.build();
-            if (con.getResponseCode() != 200) {
-                throw getClient().generateException(con);
-            }
-        } catch (IOException e) {
-            throw new ConnectionException("While updating the topic", e);
+    private void putOption(String option, JsonValue value) throws ConnectionException, IOException {
+        JsonObject obj = new JsonObject();
+        obj.add(option, value);
+        ConnectionBuilder builder = new ConnectionBuilder();
+        builder.setUrl(getClient().withCloud(MODIFY_PROPERTY_URL, getIdentity(), option));
+        builder.setMethod("PUT", true);
+        builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
+        builder.addHeader("Content-Type", "application/json");
+        builder.setData(obj.toString());
+        HttpURLConnection con = builder.build();
+        if (con.getResponseCode() != 200) {
+            throw getClient().generateException("While updating an option", con);
         }
     }
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java b/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
index 8d3728a..63bb744 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
@@ -37,6 +37,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.logging.Level;
 
 public abstract class ChatImpl implements Chat {
     protected static final String CHAT_INFO_URL = "https://%sclient-s.gateway.messenger.live.com/v1/threads/%s/?view=msnp24Equivalent";
@@ -46,68 +47,48 @@
     protected static final String GET_JOIN_URL = "https://api.scheduler.skype.com/threads";
     protected static final String ADD_MEMBER_URL = "https://client-s.gateway.messenger.live.com/v1/threads/%s/members/8:%s";
 
-    public static Chat createChat(Skype client, String identity) throws ConnectionException, ChatNotFoundException {
-        Validate.notNull(client, "Client must not be null");
-        Validate.isTrue(client instanceof SkypeImpl, String.format("Now is not the time to use that, %s", client.getUsername()));
-        Validate.notEmpty(identity, "Identity must not be null/empty");
-        if (identity.startsWith("19:")) {
-            if (identity.endsWith("@thread.skype")) {
-                return new ChatGroup((SkypeImpl) client, identity);
-            } else {
-                client.getLogger().info(String.format("Skipping P2P chat with identity %s", identity));
-                return null;
-            }
-        } else if (identity.startsWith("8:")) {
-            return new ChatIndividual((SkypeImpl) client, identity);
-        } else {
-            throw new IllegalArgumentException(String.format("Unknown group type with identity %s", identity));
-        }
-    }
-
     protected final AtomicBoolean isLoading = new AtomicBoolean(false);
     protected final AtomicBoolean hasLoaded = new AtomicBoolean(false);
 
-    private final SkypeImpl client;
-    private final String identity;
-
     protected final Map<String, User> users = new ConcurrentHashMap<>();
     protected final List<ChatMessage> messages = new CopyOnWriteArrayList<>();
 
-    ChatImpl(SkypeImpl client, String identity) throws ConnectionException, ChatNotFoundException {
+    private final SkypeImpl client;
+    private final String identity;
+
+    ChatImpl(SkypeImpl client, String identity) throws ConnectionException, ChatNotFoundException, IOException {
         this.client = client;
         this.identity = identity;
         load();
     }
 
     @Override
-    public ChatMessage sendMessage(Message message) throws ConnectionException {
+    public ChatMessage sendMessage(Message message) throws ConnectionException, IOException {
         checkLoaded();
-        try {
-            long ms = System.currentTimeMillis();
-            JsonObject obj = new JsonObject();
-            obj.add("content", message.write());
-            obj.add("messagetype", "RichText");
-            obj.add("contenttype", "text");
-            obj.add("clientmessageid", String.valueOf(ms));
-            ConnectionBuilder builder = new ConnectionBuilder();
-            builder.setUrl(getClient().withCloud(SEND_MESSAGE_URL, getIdentity()));
-            builder.setMethod("POST", true);
-            builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
-            builder.addHeader("Content-Type", "application/json");
-            builder.setData(obj.toString());
-            HttpURLConnection con = builder.build();
-            if (con.getResponseCode() == 201) {
-                return ChatMessageImpl.createMessage(this, getUser(getClient().getUsername()), null, String.valueOf(ms), ms, message);
-            } else {
-                throw getClient().generateException(con);
-            }
-        } catch (IOException e) {
-            throw new ConnectionException("While sending a message", e);
+        long ms = System.currentTimeMillis();
+        JsonObject obj = new JsonObject();
+        obj.add("content", message.write());
+        obj.add("messagetype", "RichText");
+        obj.add("contenttype", "text");
+        obj.add("clientmessageid", String.valueOf(ms));
+
+        ConnectionBuilder builder = new ConnectionBuilder();
+        builder.setUrl(client.withCloud(SEND_MESSAGE_URL, getIdentity()));
+        builder.setMethod("POST", true);
+        builder.addHeader("RegistrationToken", client.getRegistrationToken());
+        builder.addHeader("Content-Type", "application/json");
+        builder.setData(obj.toString());
+        HttpURLConnection con = builder.build();
+
+        if (con.getResponseCode() != 201) {
+            throw client.generateException("While sending message", con);
         }
+
+        return ChatMessageImpl.createMessage(this, getUser(client.getUsername()), null, String.valueOf(ms), ms, message);
     }
 
     @Override
-    public Collection<User> getAllUsers() throws NotLoadedException {
+    public Collection<User> getAllUsers() {
         checkLoaded();
         return Collections.unmodifiableCollection(users.values());
     }
@@ -124,30 +105,51 @@ public User getUser(String username) {
         return Collections.unmodifiableList(messages);
     }
 
-    public void onMessage(ChatMessage message) {
-        this.messages.add(message);
-        ((UserImpl) message.getSender()).onMessage(message);
+    @Override
+    public String getIdentity() {
+        return this.identity;
     }
 
+    @Override
     public SkypeImpl getClient() {
         return this.client;
     }
 
-    public String getIdentity() {
-        return this.identity;
+    // Begin internal access methods
+    public static Chat createChat(Skype client, String identity) throws ConnectionException, ChatNotFoundException, IOException{
+        Validate.notNull(client, "Client must not be null");
+        Validate.isTrue(client instanceof SkypeImpl, String.format("Now is not the time to use that, %s", client.getUsername()));
+        Validate.notEmpty(identity, "Identity must not be null/empty");
+        if (identity.startsWith("19:")) {
+            if (identity.endsWith("@thread.skype")) {
+                return new ChatGroup((SkypeImpl) client, identity);
+            } else {
+                throw new IllegalArgumentException(String.format("Cannot load P2P chat with identity %s", identity));
+            }
+        } else if (identity.startsWith("8:")) {
+            return new ChatIndividual((SkypeImpl) client, identity);
+        } else {
+            throw new IllegalArgumentException(String.format("Unknown chat type with identity %s", identity));
+        }
+    }
+
+
+    public void onMessage(ChatMessage message) {
+        this.messages.add(message);
+        ((UserImpl) message.getSender()).onMessage(message);
     }
 
     public boolean isLoaded() {
         return !isLoading.get() && hasLoaded.get();
     }
 
-    public abstract void addUser(String username) throws ConnectionException;
+    public abstract void addUser(String username) throws ConnectionException, IOException;
 
     public abstract void removeUser(String username);
 
-    protected abstract void load() throws ConnectionException, ChatNotFoundException;
+    protected abstract void load() throws ConnectionException, ChatNotFoundException, IOException;
 
-    protected void checkLoaded() throws NotLoadedException {
+    protected void checkLoaded() {
         if (!isLoaded()) {
             throw new NotLoadedException();
         }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java b/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
index 78ad556..70e51f4 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
@@ -22,18 +22,19 @@
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.user.User;
 
+import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
 
 public class ChatIndividual extends ChatImpl implements IndividualChat {
     private User partner;
 
-    protected ChatIndividual(SkypeImpl skype, String identity) throws ConnectionException, ChatNotFoundException {
+    protected ChatIndividual(SkypeImpl skype, String identity) throws ConnectionException, ChatNotFoundException, IOException {
         super(skype, identity);
     }
 
     @Override
-    protected void load() throws ConnectionException {
+    protected void load() throws ConnectionException, IOException {
         if (isLoaded()) {
             return;
         }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ConnectionBuilder.java b/src/main/java/com/samczsun/skype4j/internal/ConnectionBuilder.java
index 661cbb6..f98af6b 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ConnectionBuilder.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ConnectionBuilder.java
@@ -39,6 +39,7 @@
 
     public void setUrl(String url) {
         this.url = url;
+        builtUrl = null;
     }
 
     public void addHeader(String header, String value) {
diff --git a/src/main/java/com/samczsun/skype4j/internal/ContactImpl.java b/src/main/java/com/samczsun/skype4j/internal/ContactImpl.java
index b92cfbd..7f9d3e5 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ContactImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ContactImpl.java
@@ -31,7 +31,7 @@
 public class ContactImpl implements Contact {
     private static final String PROFILES_URL = "https://api.skype.com/users/self/contacts/profiles"; //contacts[] = username
 
-    public static final Contact createContact(Skype skype, String username) throws ConnectionException {
+    public static final Contact createContact(Skype skype, String username) throws ConnectionException, IOException {
         Validate.isTrue(skype instanceof SkypeImpl, String.format("Now is not the time to use that, %s", skype.getUsername()));
         Validate.notEmpty(username, "Username must not be empty");
         return new ContactImpl((SkypeImpl) skype, username);
@@ -41,7 +41,7 @@ public static final Contact createContact(Skype skype, String username) throws C
     private String username;
     private String displayName;
 
-    ContactImpl(SkypeImpl skype, String username) throws ConnectionException {
+    ContactImpl(SkypeImpl skype, String username) throws ConnectionException, IOException {
         this.skype = skype;
         this.username = username;
         ConnectionBuilder builder = new ConnectionBuilder();
@@ -49,28 +49,24 @@ public static final Contact createContact(Skype skype, String username) throws C
         builder.setMethod("POST", true);
         builder.addHeader("X-Skypetoken", skype.getSkypeToken());
         builder.setData("contacts[]=" + username);
-        try {
-            HttpURLConnection con = builder.build();
-            if (con.getResponseCode() == 200) {
-                JsonArray array = JsonArray.readFrom(new InputStreamReader(con.getInputStream()));
-                JsonObject json = array.get(0).asObject();
-                if (!json.get("displayname").isNull()) {
-                    this.displayName = json.get("displayname").asString();
-                } else if (!json.get("firstname").isNull()) {
-                    this.displayName = json.get("firstname").asString();
-                    if (!json.get("lastname").isNull()) {
-                        this.displayName += " " + json.get("lastname").asString();
-                    }
-                } else if (!json.get("lastname").isNull()) {
-                    this.displayName = json.get("lastname").asString();
-                } else {
-                    this.displayName = this.username;
+        HttpURLConnection con = builder.build();
+        if (con.getResponseCode() == 200) {
+            JsonArray array = JsonArray.readFrom(new InputStreamReader(con.getInputStream()));
+            JsonObject json = array.get(0).asObject();
+            if (!json.get("displayname").isNull()) {
+                this.displayName = json.get("displayname").asString();
+            } else if (!json.get("firstname").isNull()) {
+                this.displayName = json.get("firstname").asString();
+                if (!json.get("lastname").isNull()) {
+                    this.displayName += " " + json.get("lastname").asString();
                 }
+            } else if (!json.get("lastname").isNull()) {
+                this.displayName = json.get("lastname").asString();
             } else {
-                throw skype.generateException(con);
+                this.displayName = this.username;
             }
-        } catch (IOException e) {
-            throw new ConnectionException("While fetching contact info", e);
+        } else {
+            throw skype.generateException("While getting contact info", con);
         }
     }
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/EventType.java b/src/main/java/com/samczsun/skype4j/internal/EventType.java
index d13acfc..17f655b 100644
--- a/src/main/java/com/samczsun/skype4j/internal/EventType.java
+++ b/src/main/java/com/samczsun/skype4j/internal/EventType.java
@@ -20,6 +20,7 @@
 import com.eclipsesource.json.JsonObject;
 import com.samczsun.skype4j.exceptions.SkypeException;
 
+import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -29,7 +30,7 @@
 public enum EventType {
     NEW_MESSAGE("NewMessage") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject eventObj) throws SkypeException {
+        public void handle(SkypeImpl skype, JsonObject eventObj) throws SkypeException, IOException {
             JsonObject resource = eventObj.get("resource").asObject();
             MessageType.getByName(resource.get("messagetype").asString()).handle(skype, resource);
         }
@@ -75,7 +76,7 @@ public static EventType getByName(String eventType) {
         return byValue.get(eventType);
     }
 
-    public abstract void handle(SkypeImpl skype, JsonObject resource) throws SkypeException;
+    public abstract void handle(SkypeImpl skype, JsonObject resource) throws SkypeException, IOException;
 
     static {
         for (EventType type : values()) {
diff --git a/src/main/java/com/samczsun/skype4j/internal/MessageType.java b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
index 1e7d0d1..51f73d9 100644
--- a/src/main/java/com/samczsun/skype4j/internal/MessageType.java
+++ b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
@@ -31,11 +31,11 @@
 import com.samczsun.skype4j.events.chat.message.SmsReceivedEvent;
 import com.samczsun.skype4j.events.chat.sent.*;
 import com.samczsun.skype4j.events.chat.user.MultiUserAddEvent;
-import com.samczsun.skype4j.events.chat.user.action.RoleUpdateEvent;
 import com.samczsun.skype4j.events.chat.user.UserAddEvent;
 import com.samczsun.skype4j.events.chat.user.UserRemoveEvent;
 import com.samczsun.skype4j.events.chat.user.action.OptionUpdateEvent;
 import com.samczsun.skype4j.events.chat.user.action.PictureUpdateEvent;
+import com.samczsun.skype4j.events.chat.user.action.RoleUpdateEvent;
 import com.samczsun.skype4j.events.chat.user.action.TopicUpdateEvent;
 import com.samczsun.skype4j.exceptions.ChatNotFoundException;
 import com.samczsun.skype4j.exceptions.ConnectionException;
@@ -69,13 +69,13 @@ public void handle(SkypeImpl skype, JsonObject resource) {
     },
     TEXT("Text") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException, IOException {
             MessageType.RICH_TEXT.handle(skype, resource);
         }
     },
     RICH_TEXT("RichText") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException {
             if (resource.get("clientmessageid") != null) { // New message
                 String clientId = resource.get("clientmessageid").asString();
                 String id = resource.get("id").asString();
@@ -163,7 +163,7 @@ public String getId() {
     },
     RICH_TEXT_CONTACTS("RichText/Contacts") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException {
             String from = resource.get("from").asString();
             String url = resource.get("conversationLink").asString();
             String content = resource.get("content").asString();
@@ -188,7 +188,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
     },
     RICH_TEXT_FILES("RichText/Files") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException {
             String from = resource.get("from").asString();
             String url = resource.get("conversationLink").asString();
             String content = resource.get("content").asString();
@@ -212,7 +212,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
     },
     RICH_TEXT_SMS("RichText/Sms") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException { //Implemented via fullExperience
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException { //Implemented via fullExperience
             String content = resource.get("content").asString();
             String from = resource.get("from").asString();
             String url = resource.get("conversationLink").asString();
@@ -231,7 +231,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
     },
     RICH_TEXT_LOCATION("RichText/Location") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException { //Implemented via fullExperience
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException { //Implemented via fullExperience
             String content = resource.get("content").asString();
             Chat c = getChat(resource.get("conversationLink").asString(), skype);
             User u = getUser(resource.get("from").asString(), c);
@@ -247,7 +247,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
     },
     RICH_TEXT_URI_OBJECT("RichText/UriObject") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException {
             String from = resource.get("from").asString();
             String url = resource.get("conversationLink").asString();
             ChatImpl c = (ChatImpl) getChat(url, skype);
@@ -274,7 +274,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
                                     break;
                                 }
                             } else {
-                                throw skype.generateException(statusCon);
+                                throw skype.generateException("While getting URI object", statusCon);
                             }
                         }
                         builder.setUrl(obj.get("view_location").asString());
@@ -284,10 +284,10 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
                             BufferedImage img = ImageIO.read(input);
                             skype.getEventDispatcher().callEvent(new PictureReceivedEvent(c, u, meta.attr("originalName"), img));
                         } else {
-                            throw skype.generateException(con);
+                            throw skype.generateException("While getting URI object", con);
                         }
                     } else {
-                        throw skype.generateException(statusCon);
+                        throw skype.generateException("While getting URI object", statusCon);
                     }
                 } catch (IOException e) {
                     throw new ConnectionException("While fetching picture", e);
@@ -313,7 +313,7 @@ public void handle(SkypeImpl skype, JsonObject resource) {
     },
     THREAD_ACTIVITY_ADD_MEMBER("ThreadActivity/AddMember") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException {
             String url = resource.get("conversationLink").asString();
             Chat c = getChat(url, skype);
             List<User> usersAdded = new ArrayList<>();
@@ -341,7 +341,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
     },
     THREAD_ACTIVITY_DELETE_MEMBER("ThreadActivity/DeleteMember") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException {
             String url = resource.get("conversationLink").asString();
             Chat c = getChat(url, skype);
             List<User> usersRemoved = new ArrayList<>();
@@ -363,7 +363,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
     },
     THREAD_ACTIVITY_ROLE_UPDATE("ThreadActivity/RoleUpdate") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException {
             String content = resource.get("content").asString();
             Chat chat = getChat(resource.get("conversationLink").asString(), skype);
             Matcher initiatorMatcher = INITIATOR_PATTERN.matcher(content);
@@ -383,7 +383,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
     },
     THREAD_ACTIVITY_TOPIC_UPDATE("ThreadActivity/TopicUpdate") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException {
             String content = resource.get("content").asString();
             Chat chat = getChat(resource.get("conversationLink").asString(), skype);
             Matcher initiatorMatcher = INITIATOR_PATTERN.matcher(content);
@@ -403,7 +403,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
     },
     THREAD_ACTIVITY_PICTURE_UPDATE("ThreadActivity/PictureUpdate") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException {
             String content = resource.get("content").asString();
             Chat chat = getChat(resource.get("conversationLink").asString(), skype);
             Matcher initiatorMatcher = INITIATOR_PATTERN.matcher(content);
@@ -423,7 +423,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
     },
     THREAD_ACTIVITY_HISTORY_DISCLOSED_UPDATE("ThreadActivity/HistoryDisclosedUpdate") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException {
             String content = resource.get("content").asString();
             Chat chat = getChat(resource.get("conversationLink").asString(), skype);
             Matcher initiatorMatcher = INITIATOR_PATTERN.matcher(content);
@@ -443,7 +443,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
     },
     THREAD_ACTIVITY_JOINING_ENABLED_UPDATE("ThreadActivity/JoiningEnabledUpdate") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException {
             String content = resource.get("content").asString();
             Chat chat = getChat(resource.get("conversationLink").asString(), skype);
             Matcher initiatorMatcher = INITIATOR_PATTERN.matcher(content);
@@ -477,7 +477,7 @@ public void handle(SkypeImpl skype, JsonObject resource) {
     },
     EVENT_CALL("Event/Call") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException {
             System.out.println(name() + " " + resource);
 
             String from = resource.get("from").asString();
@@ -496,7 +496,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
     },
     CONTROL_TYPING("Control/Typing") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException {
             System.out.println(name() + " " + resource);
 
             String from = resource.get("from").asString();
@@ -511,7 +511,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
     CONTROL_CLEAR_TYPING("Control/ClearTyping") {
         //YaR
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException {
             Chat c = getChat(resource.get("conversationLink").asString(), skype);
             User u = getUser(resource.get("from").asString(), c);
             TypingReceivedEvent event = new TypingReceivedEvent(c, u, false);
@@ -553,7 +553,7 @@ public String getValue() {
         return this.value;
     }
 
-    public abstract void handle(SkypeImpl skype, JsonObject resource) throws SkypeException;
+    public abstract void handle(SkypeImpl skype, JsonObject resource) throws SkypeException, IOException;
 
     static {
         for (MessageType type : values()) {
@@ -565,7 +565,7 @@ public static MessageType getByName(String messageType) {
         return byValue.get(messageType);
     }
 
-    private static Chat getChat(String url, SkypeImpl skype) throws ConnectionException, ChatNotFoundException {
+    private static Chat getChat(String url, SkypeImpl skype) throws ConnectionException, ChatNotFoundException, IOException {
         Matcher m = URL_PATTERN.matcher(url);
         if (m.find()) {
             Chat find = skype.getChat(m.group(1));
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java b/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java
index dc14f7f..e828f12 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java
@@ -23,27 +23,34 @@
 import com.samczsun.skype4j.events.Listener;
 import com.samczsun.skype4j.events.error.MinorErrorEvent;
 
-import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
+import java.util.logging.Level;
 
 public class SkypeEventDispatcher implements EventDispatcher {
-    private final Map<Class<? extends Event>, List<RegisteredListener>> listeners = new HashMap<>();
+    private SkypeImpl instance;
+
+    public SkypeEventDispatcher(SkypeImpl instance) {
+        this.instance = instance;
+    }
+
+    private final Map<Class<?>, List<RegisteredListener>> listeners = Collections.synchronizedMap(new HashMap<Class<?>, List<RegisteredListener>>());
 
     public void registerListener(Listener l) {
         Class<?> c = l.getClass();
         for (Method m : c.getMethods()) {
             if (m.getAnnotation(EventHandler.class) != null && m.getParameterTypes().length == 1 && Event.class.isAssignableFrom(m.getParameterTypes()[0])) {
-                Class<? extends Event> eventType = m.getParameterTypes()[0].asSubclass(Event.class);
-                List<RegisteredListener> methods = listeners.get(eventType);
-                if (methods == null) {
-                    methods = new ArrayList<>();
-                    listeners.put(eventType, methods);
+                Class<?> eventType = m.getParameterTypes()[0];
+                while (eventType != Event.class) {
+                    List<RegisteredListener> methods = listeners.get(eventType);
+                    if (methods == null) {
+                        methods = new ArrayList<>();
+                        listeners.put(eventType, methods);
+                    }
+                    RegisteredListener reglistener = new RegisteredListener(l, m);
+                    methods.add(reglistener);
+                    eventType = eventType.getSuperclass();
                 }
-                methods.add(new RegisteredListener(l, m));
             }
         }
     }
@@ -65,17 +72,7 @@ public void callEvent(Event e) {
     }
 
     private void callEvent(Event e, boolean tryNotify) {
-        List<RegisteredListener> methods = new ArrayList<>();
-        Class<?> eventClass = e.getClass();
-        while (true) {
-            if (listeners.containsKey(eventClass)) {
-                methods.addAll(listeners.get(eventClass));
-            }
-            eventClass = eventClass.getSuperclass();
-            if (eventClass == Event.class) {
-                break;
-            }
-        }
+        List<RegisteredListener> methods = listeners.get(e.getClass());
         if (methods != null) {
             for (RegisteredListener method : methods) {
                 try {
@@ -85,6 +82,7 @@ private void callEvent(Event e, boolean tryNotify) {
                         MinorErrorEvent event = new MinorErrorEvent();
                         callEvent(event, false);
                     }
+                    instance.getLogger().log(Level.SEVERE, "Error while handling event", t);
                 }
             }
         }
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
index 4c8b934..2458b10 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
@@ -65,7 +65,7 @@
     private static final String THREAD_URL = "https://client-s.gateway.messenger.live.com/v1/threads";
     // The endpoints below all depend on the cloud the user is in
     private static final String SUBSCRIPTIONS_URL = "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/endpoints/SELF/subscriptions";
-    private static final String MESSAGINGSERVICE_URL = "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/endpoints/%s/presenceDocs/messagingService";
+    private static final String MESSAGINGSERVICE_URL = "https://client-s.gateway.messenger.live.com/v1/users/ME/endpoints/%s/presenceDocs/messagingService";
     private static final String POLL_URL = "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/endpoints/SELF/subscriptions/0/poll";
 
     private static final Pattern URL_PATTERN = Pattern.compile("threads/(.*)", Pattern.CASE_INSENSITIVE);
@@ -90,15 +90,19 @@
     private Thread pollThread;
 
     private final ExecutorService scheduler = Executors.newFixedThreadPool(16);
-    private final Logger logger = Logger.getLogger("webskype");
 
     private final Map<String, Chat> allChats = new ConcurrentHashMap<>();
     private final Map<String, Contact> allContacts = new ConcurrentHashMap<>();
 
-    public SkypeImpl(String username, String password, Set<String> resources) {
+    private Logger logger = Logger.getLogger(Skype.class.getCanonicalName());
+
+    public SkypeImpl(String username, String password, Set<String> resources, Logger customLogger) {
         this.username = username;
         this.password = password;
         this.resources = resources;
+        if (customLogger != null) {
+            this.logger = customLogger;
+        }
     }
 
     public void subscribe() throws ConnectionException {
@@ -116,7 +120,7 @@ public void subscribe() throws ConnectionException {
                 throw generateException("While subscribing", connection);
             }
 
-            builder.setUrl(withCloud(MESSAGINGSERVICE_URL, URLEncoder.encode(endpointId, "UTF-8")));
+            builder.setUrl(String.format(MESSAGINGSERVICE_URL, URLEncoder.encode(endpointId, "UTF-8")));
             builder.setMethod("PUT", true);
             builder.setData(buildRegistrationObject().toString());
             connection = builder.build();
@@ -207,7 +211,7 @@ public Chat getChat(String name) {
     }
 
     @Override
-    public Chat loadChat(String name) throws ConnectionException, ChatNotFoundException {
+    public Chat loadChat(String name) throws ConnectionException, ChatNotFoundException, IOException {
         if (!allChats.containsKey(name)) {
             Chat chat = ChatImpl.createChat(this, name);
             allChats.put(name, chat);
@@ -228,7 +232,7 @@ public Contact getContact(String name) {
     }
 
     @Override
-    public Contact loadContact(String name) throws ConnectionException {
+    public Contact loadContact(String name) throws ConnectionException, IOException {
         if (!allContacts.containsKey(name)) {
             Contact contact = ContactImpl.createContact(this, name);
             allContacts.put(name, contact);
@@ -239,7 +243,7 @@ public Contact loadContact(String name) throws ConnectionException {
     }
 
     @Override
-    public Contact getOrLoadContact(String username) throws ConnectionException {
+    public Contact getOrLoadContact(String username) throws ConnectionException, IOException {
         if (allContacts.containsKey(username)) {
             return allContacts.get(username);
         } else {
@@ -410,7 +414,7 @@ private JsonObject buildRegistrationObject() {
         publicInfo.add("type", 1);
         publicInfo.add("skypeNameVersion", "skype.com");
         publicInfo.add("nodeInfo", "xx");
-        publicInfo.add("version", "908/1.12.0.75//skype.com");
+        publicInfo.add("version", "908/1.13.0.79//skype.com");
         JsonObject privateInfo = new JsonObject();
         privateInfo.add("epname", "Skype4J");
         registrationObject.add("publicInfo", publicInfo);
@@ -463,7 +467,7 @@ public void run() {
                 }
             };
             sessionKeepaliveThread.start();
-            this.eventDispatcher = new SkypeEventDispatcher();
+            this.eventDispatcher = new SkypeEventDispatcher(this);
             loggedIn.set(true);
         } else {
             Elements elements = loginResponseDocument.select(".message_error");
diff --git a/src/main/java/com/samczsun/skype4j/internal/UserImpl.java b/src/main/java/com/samczsun/skype4j/internal/UserImpl.java
index 1dc9167..4dc0783 100644
--- a/src/main/java/com/samczsun/skype4j/internal/UserImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/UserImpl.java
@@ -23,6 +23,7 @@
 import com.samczsun.skype4j.user.Contact;
 import com.samczsun.skype4j.user.User;
 
+import java.io.IOException;
 import java.sql.Connection;
 import java.util.Collections;
 import java.util.List;
@@ -40,7 +41,7 @@
     private final List<ChatMessage> messages = new CopyOnWriteArrayList<>();
     private final Map<String, ChatMessage> messageMap = new ConcurrentHashMap<>();
 
-    public UserImpl(String username, ChatImpl chat) throws ConnectionException {
+    public UserImpl(String username, ChatImpl chat) throws ConnectionException, IOException {
         this.contactRep = chat.getClient().getOrLoadContact(username);
         this.chat = chat;
     }
