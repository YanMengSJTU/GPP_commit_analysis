diff --git a/src/main/java/com/samczsun/skype4j/Skype.java b/src/main/java/com/samczsun/skype4j/Skype.java
index 2f3bdc6..d81e738 100644
--- a/src/main/java/com/samczsun/skype4j/Skype.java
+++ b/src/main/java/com/samczsun/skype4j/Skype.java
@@ -48,8 +48,10 @@
      * @throws InvalidCredentialsException If you've provided invalid credentials or if you hit a CAPTCHA
      * @throws ConnectionException         If a network error occured while connecting
      * @throws NotParticipatingException   If the guest account cannot log in due to the chat not being open
+     * @throws com.samczsun.skype4j.exceptions.WrongPasswordException
+     * @throws com.samczsun.skype4j.exceptions.AccountNotFoundException
      */
-    void login() throws InvalidCredentialsException, ConnectionException, NotParticipatingException;
+    void login() throws InvalidCredentialsException, ConnectionException, NotParticipatingException, WrongPasswordException, AccountNotFoundException;
 
     /**
      * Subscribe to the HTTP long polling service.
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/AccountNotFoundException.java b/src/main/java/com/samczsun/skype4j/exceptions/AccountNotFoundException.java
new file mode 100644
index 0000000..2e365c2
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/exceptions/AccountNotFoundException.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2019 seti.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.samczsun.skype4j.exceptions;
+
+/**
+ *
+ * @author seti
+ */
+public class AccountNotFoundException extends Exception {
+  public AccountNotFoundException(String msg) {
+    super(msg);
+  }
+}
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/WrongPasswordException.java b/src/main/java/com/samczsun/skype4j/exceptions/WrongPasswordException.java
new file mode 100644
index 0000000..a0d73ba
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/exceptions/WrongPasswordException.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2019 seti.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.samczsun.skype4j.exceptions;
+
+/**
+ *
+ * @author seti
+ */
+public class WrongPasswordException extends Exception {
+  public WrongPasswordException(String msg) {
+    super(msg);
+  }
+}
\ No newline at end of file
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
index ae72773..ab67523 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
@@ -44,8 +44,11 @@
 import java.net.URISyntaxException;
 import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Path;
 import java.security.KeyManagementException;
 import java.security.NoSuchAlgorithmException;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
 import java.util.*;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -84,7 +87,7 @@
     protected SkypeWebSocket wss;
     protected String conversationBackwardLink;
     protected String conversationSyncState;
-    protected Logger logger = Logger.getLogger(Skype.class.getCanonicalName());
+    protected Logger logger = Logger.getLogger("log_" + this.getUsername());
     private String skypeToken;
     private long skypeTokenExpiryTime;
     private String registrationToken;
@@ -93,6 +96,7 @@
     private String endpointId;
     private JsonObject trouterData;
     private int socketId = 1;
+    private boolean appendLogFile = false;
 
     // Data
     protected final Map<String, ChatImpl> allChats = Collections.synchronizedMap(new HashMap<>());
@@ -110,31 +114,42 @@ public SkypeImpl(String username, Set<String> resources, Logger logger, List<Err
         } else {
             Handler handler = new ConsoleHandler();
             handler.setFormatter(new Formatter() {
+//                @Override
+//                public String format(LogRecord record) {
+//                    StringBuilder sb = new StringBuilder();
+//                    sb.append("[").append(record.getLevel().getLocalizedName()).append("] ");
+//                    sb.append("[").append(new Date(record.getMillis())).append("] ");
+//                    sb.append(formatMessage(record)).append(LINE_SEPARATOR);
+//
+//                    if (record.getThrown() != null) {
+//                        StringWriter sw = new StringWriter();
+//                        PrintWriter pw = new PrintWriter(sw);
+//                        record.getThrown().printStackTrace(pw);
+//                        pw.close();
+//                        sb.append(sw.toString());
+//                    }
+//                    return sb.toString();
+//                }
                 @Override
                 public String format(LogRecord record) {
-                    StringBuilder sb = new StringBuilder();
-                    sb.append("[").append(record.getLevel().getLocalizedName()).append("] ");
-                    sb.append("[").append(new Date(record.getMillis())).append("] ");
-                    sb.append(formatMessage(record)).append(LINE_SEPARATOR);
-
-                    if (record.getThrown() != null) {
-                        StringWriter sw = new StringWriter();
-                        PrintWriter pw = new PrintWriter(sw);
-                        record.getThrown().printStackTrace(pw);
-                        pw.close();
-                        sb.append(sw.toString());
-                    }
-                    return sb.toString();
+                  DateFormat df = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss.SSS");
+                  StringBuilder builder = new StringBuilder(1000);
+                  builder.append(df.format(new Date(record.getMillis())));
+                  builder.append(" [").append(record.getLevel()).append("] | ");
+                  builder.append(formatMessage(record));
+                  builder.append("\n");
+                  return builder.toString();
                 }
             });
             this.logger.setUseParentHandlers(false);
-//            this.logger.addHandler(handler);
+            this.logger.addHandler(handler);
+
         }
           this.status = null;
     }
     
     @Override
-    public void login() throws ConnectionException, InvalidCredentialsException {
+    public void login() throws ConnectionException, InvalidCredentialsException, WrongPasswordException, AccountNotFoundException {
         Endpoints.ELIGIBILITY_CHECK.open(this)
                 .expect(200, "You are not eligible to use Skype for Web!")
                 .get();
@@ -245,7 +260,11 @@ public void shutdown() {
                 shutdownThread.shutdown();
                 reauthThread.kill();
                 scheduler.shutdownNow();
-                while (!scheduler.isTerminated()) ;
+                while (!scheduler.isTerminated()) {
+                    try {
+                        Thread.sleep(1000);
+                    } catch (InterruptedException ex) { return; }
+                }
                 doShutdown();
             });
         }
@@ -467,6 +486,7 @@ public void registerWebSocket() throws ConnectionException, InterruptedException
 
     public void subscribe() throws ConnectionException {
         try {
+            logger.finer("Sending post request to: " + Endpoints.SUBSCRIPTIONS_URL.url());
             HttpURLConnection connection = Endpoints.SUBSCRIPTIONS_URL
                     .open(this)
                     .dontConnect()
@@ -505,7 +525,7 @@ public void subscribe() throws ConnectionException {
         }
     }
 
-    public void reauthenticate() throws ConnectionException, InvalidCredentialsException, NotParticipatingException {
+    public void reauthenticate() throws ConnectionException, InvalidCredentialsException, NotParticipatingException, WrongPasswordException, AccountNotFoundException {
         //todo: keep subscribed until reauth is finished so events aren't lost
         doShutdown();
         login();
@@ -653,6 +673,7 @@ public SkypeWebSocket getWebSocket() {
     }
     
     public void setVisibility(Visibility visibility) throws ConnectionException {
+        logger.finer("Sending put request to: " + Endpoints.VISIBILITY.url());
         Endpoints.VISIBILITY
                 .open(this)
                 .expect(200, "While updating visibility")
@@ -685,4 +706,24 @@ public void setEndpoints(JsonArray allEndpoints) {
     public String getEndpointId() {
         return this.endpointId;
     }
+    
+    public void setDebug(Path path) throws IOException {
+      if (path == null) {
+        logger.setLevel(Level.OFF);
+      } else {
+        logger.setLevel(Level.ALL);
+        logger.setUseParentHandlers(false);
+        for (Handler handler : logger.getHandlers()) {
+          logger.removeHandler(handler);
+          handler.close();
+        }
+        FileHandler fh = new FileHandler(path.toString(), this.appendLogFile);
+        fh.setFormatter(new SimpleFormatter());
+        logger.addHandler(fh);
+      }
+    }
+    
+    public void setAppendLogFile(boolean appendLogFile) {
+        this.appendLogFile = appendLogFile;
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java b/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
index bc18ace..6a24326 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
@@ -178,7 +178,11 @@ public void onClose(int i, String s, boolean b) {
             pingThread.interrupt();
         }
         singleThreaded.shutdown();
-        while (!singleThreaded.isTerminated()) ;
+        while (!singleThreaded.isTerminated()) {
+            try {
+                Thread.sleep(1000);
+            } catch (InterruptedException ex) { return; }
+        }
         if (skype.getWebSocket() == this) {
             try {
                 skype.registerWebSocket();
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java b/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
index 4d45984..cad0660 100644
--- a/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
+++ b/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
@@ -21,9 +21,11 @@
 import com.eclipsesource.json.JsonValue;
 import com.samczsun.skype4j.chat.GroupChat;
 import com.samczsun.skype4j.events.contact.ContactRequestEvent;
+import com.samczsun.skype4j.exceptions.AccountNotFoundException;
 import com.samczsun.skype4j.exceptions.ChatNotFoundException;
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.InvalidCredentialsException;
+import com.samczsun.skype4j.exceptions.WrongPasswordException;
 import com.samczsun.skype4j.exceptions.handler.ErrorHandler;
 import com.samczsun.skype4j.exceptions.handler.ErrorSource;
 import com.samczsun.skype4j.internal.*;
@@ -47,7 +49,6 @@
 import java.util.logging.Logger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import javax.security.auth.login.AccountNotFoundException;
 import javax.xml.bind.DatatypeConverter;
 import org.jsoup.Connection;
 import org.jsoup.Connection.Response;
@@ -65,8 +66,8 @@ public FullClient(String username, String password, Set<String> resources, Logge
     }
 
     @Override
-    public void login() throws InvalidCredentialsException, ConnectionException {
-            logger.finer("Refreshing tokens");
+    public void login() throws InvalidCredentialsException, ConnectionException, WrongPasswordException, AccountNotFoundException {
+        logger.finer("Refreshing tokens");
     
         Response authorize = null;
         try {
@@ -128,49 +129,41 @@ public void login() throws InvalidCredentialsException, ConnectionException {
             Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
         }
         if (post.statusCode() != 302) {
-          int index = post.body().indexOf("sErrTxt:'");
-          int end;
-          end = post.body().indexOf('\'', index + "sErrTxt:'".length());
-          while (post.body().charAt(end - 1) == '\\') {
-            end = post.body().indexOf('\'', end + 1);
-          }
-          if (index == -1 || end == -1) {
-            IOException e = new IOException("Error while connecting to Live: not redirected, no reason given.");
-            logger.log(Level.SEVERE, "", e);
-              try {
-                  throw e;
-              } catch (IOException ex) {
-                  Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
-              }
-          }
+            int index = post.body().indexOf("sErrTxt:'");
+            int end;
+            end = post.body().indexOf('\'', index + "sErrTxt:'".length());
+            while (post.body().charAt(end - 1) == '\\') {
+              end = post.body().indexOf('\'', end + 1);
+            }
+            if (index == -1 || end == -1) {
+              IOException e = new IOException("Error while connecting to Live: not redirected, no reason given.");
+              logger.log(Level.SEVERE, "", e);
+                try {
+                    throw e;
+                } catch (IOException ex) {
+                    Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+                }
+            }
 
-          String errMessage = post.body().substring(index + "sErrTxt:'".length(), end);
-          if ((errMessage.contains("account") || errMessage.contains("password")) && errMessage.contains("incorrect")) {
-            IOException e = new IOException("Error while connecting to Live: " + errMessage);
-            logger.log(Level.SEVERE, "", e);
-              try {
-                  throw e;
-              } catch (IOException ex) {
-                  Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
-              }
-          } else if (errMessage.toLowerCase().contains("microsoft account doesn\\'t exist")) {
-            AccountNotFoundException e = new AccountNotFoundException("Error while connecting to Live: " + errMessage);
-            logger.log(Level.SEVERE, "", e);
-              try {
-                  throw e;
-              } catch (AccountNotFoundException ex) {
-                  Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
-              }
-          } else {
-            IOException e = new IOException("Error while connecting to Live: " + errMessage);
-            logger.log(Level.SEVERE, "", e);
-              try {
-                  throw e;
-              } catch (IOException ex) {
-                  Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
-              }
+            String errMessage = post.body().substring(index + "sErrTxt:'".length(), end);
+            if ((errMessage.contains("account") || errMessage.contains("password")) && errMessage.contains("incorrect")) {
+              WrongPasswordException e = new WrongPasswordException("Error while connecting to Live: " + errMessage);
+              logger.severe(e.toString());
+              throw e;
+            } else if (errMessage.toLowerCase().contains("microsoft account doesn\\'t exist")) {
+              AccountNotFoundException e = new AccountNotFoundException("Error while connecting to Live: " + errMessage);
+              logger.severe(e.toString());
+              throw e;
+            } else {
+              IOException e = new IOException("Error while connecting to Live: " + errMessage);
+              logger.severe(e.toString());
+                try {
+                    throw e;
+                } catch (IOException ex) {
+                    Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+                }
+            }
           }
-        }
 
         String url = post.header("Location");
 
@@ -237,6 +230,8 @@ public void login() throws InvalidCredentialsException, ConnectionException {
         data.put("passwordHash", hash());
         data.put("access_token", accessToken);
         data.put("site_name", "lw");
+
+        logger.finer("Sending post request to: " + Endpoints.LOGIN_URL.url());
         JsonObject loginData = Endpoints.LOGIN_URL.open(this)
                 .as(JsonObject.class)
                 .expect(200, "While logging in")
@@ -276,6 +271,7 @@ public void login() throws InvalidCredentialsException, ConnectionException {
 
     @Override
     public void logout() throws ConnectionException {
+        logger.finer("Sending get request to: " + Endpoints.LOGOUT_URL.url());
         Endpoints.LOGOUT_URL
                 .open(this)
                 .noRedirects()
@@ -289,17 +285,22 @@ public void logout() throws ConnectionException {
     public void loadAllContacts() throws ConnectionException {
         String contactsStatus = "";
         int i = 0;
+        
+        logger.finer("Sending get request to: " + Endpoints.GET_ALL_CONTACTS.url());
         JsonObject object = Endpoints.GET_ALL_CONTACTS
                 .open(this)
                 .as(JsonObject.class)
                 .expect(200, "While loading contacts")
                 .get();
+        logger.finer("Response (" +Endpoints.GET_ALL_CONTACTS.url()+ "): " + object);
         for (JsonValue valueStatus : object.get("contacts").asArray()) {
+            if (i > 9)
+                break;
             JsonObject objStatus = valueStatus.asObject();
             String idSkip = objStatus.get("person_id").asString();
             if (idSkip.contains("28:concierge") || idSkip.contains("8:echo123") || idSkip.contains("28:0d5d6cff-595d-49d7-9cf8-973173f5233b"))
                 continue;
-            
+
             if (objStatus.get("suggested") == null || !objStatus.get("suggested").asBoolean()) {
                 if (i == 0) {
                     contactsStatus = "cMri=" + objStatus.get("person_id").asString();
@@ -311,14 +312,17 @@ public void loadAllContacts() throws ConnectionException {
         }
         JsonObject objectStatus = null;
         try {
+          logger.finer("Sending get request to: " + Endpoints.GET_ALL_CONTACTS_STATUS.url());
           objectStatus = Endpoints.GET_ALL_CONTACTS_STATUS
                 .open(this, contactsStatus)
                 .as(JsonObject.class)
                 .expect(200, "While loading contacts status")
                 .get();
+          logger.finer("Response (" +Endpoints.GET_ALL_CONTACTS_STATUS.url()+ "): " + objectStatus);
         } catch (Exception e) {
-          
+            logger.severe("Error while send get request to: " + Endpoints.GET_ALL_CONTACTS_STATUS.url() + e.getMessage());
         }
+        
         i=0;
         for (JsonValue value : object.get("contacts").asArray()) {
             String status = null;
@@ -374,12 +378,18 @@ public void getContactRequests(boolean fromWebsocket) throws ConnectionException
     public void updateContactList() throws ConnectionException {
         String contactsStatus = "";
         int i = 0;
+        
+        logger.finer("Sending get request to: " + Endpoints.GET_ALL_CONTACTS.url());
         JsonObject object = Endpoints.GET_ALL_CONTACTS
                 .open(this, getUsername(), "notification")
                 .as(JsonObject.class)
                 .expect(200, "While loading contacts")
                 .get();
+        logger.finer("Response (" +Endpoints.GET_ALL_CONTACTS.url()+ "): " + object);
+        
         for (JsonValue valueStatus : object.get("contacts").asArray()) {
+            if (i > 9)
+                break;
             JsonObject objStatus = valueStatus.asObject();
             String idSkip = objStatus.get("person_id").asString();
             if (idSkip.contains("28:concierge") || idSkip.contains("8:echo123") || idSkip.contains("28:0d5d6cff-595d-49d7-9cf8-973173f5233b"))
@@ -394,16 +404,20 @@ public void updateContactList() throws ConnectionException {
                 i++;
             }
         }
+        
         JsonObject objectStatus = null;
         try {
+          logger.finer("Sending get request to: " + Endpoints.GET_ALL_CONTACTS_STATUS.url());
           objectStatus = Endpoints.GET_ALL_CONTACTS_STATUS
                 .open(this, contactsStatus)
                 .as(JsonObject.class)
                 .expect(200, "While loading contacts status")
                 .get();
+          logger.finer("Response (" +Endpoints.GET_ALL_CONTACTS_STATUS.url()+ "): " + objectStatus);
         } catch (Exception e) {
-          
+            logger.severe("Error while send get request to: " + Endpoints.GET_ALL_CONTACTS_STATUS.url() + e.getMessage());
         }
+        
         i=0;
         for (JsonValue value : object.get("contacts").asArray()) {
             String status = null;
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/GuestClient.java b/src/main/java/com/samczsun/skype4j/internal/client/GuestClient.java
index 7dc6291..30e6ec1 100644
--- a/src/main/java/com/samczsun/skype4j/internal/client/GuestClient.java
+++ b/src/main/java/com/samczsun/skype4j/internal/client/GuestClient.java
@@ -18,9 +18,11 @@
 
 import com.eclipsesource.json.JsonObject;
 import com.samczsun.skype4j.chat.GroupChat;
+import com.samczsun.skype4j.exceptions.AccountNotFoundException;
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.InvalidCredentialsException;
 import com.samczsun.skype4j.exceptions.NotParticipatingException;
+import com.samczsun.skype4j.exceptions.WrongPasswordException;
 import com.samczsun.skype4j.exceptions.handler.ErrorHandler;
 import com.samczsun.skype4j.internal.Endpoints;
 import com.samczsun.skype4j.internal.SkypeImpl;
diff --git a/src/main/java/com/samczsun/skype4j/internal/threads/PollThread.java b/src/main/java/com/samczsun/skype4j/internal/threads/PollThread.java
index 3ce996e..721e2ba 100644
--- a/src/main/java/com/samczsun/skype4j/internal/threads/PollThread.java
+++ b/src/main/java/com/samczsun/skype4j/internal/threads/PollThread.java
@@ -161,11 +161,19 @@ public void run() {
 
     public void shutdown() {
         this.interrupt();
-        while (this.getState() != State.TERMINATED) ;
+        while (this.getState() != State.TERMINATED) {
+            try {
+                Thread.sleep(1000);
+            } catch (InterruptedException ex) { return; }
+        }
         if (this.connection != null) {
             this.connection.disconnect();
         }
         this.inputFetcher.shutdownNow();
-        while (!this.inputFetcher.isTerminated()) ;
+        while (!this.inputFetcher.isTerminated()) {
+            try {
+                Thread.sleep(1000);
+            } catch (InterruptedException ex) { return; }
+        }
     }
 }
