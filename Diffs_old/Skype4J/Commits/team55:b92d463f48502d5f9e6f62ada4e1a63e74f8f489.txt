diff --git a/src/main/java/com/samczsun/skype4j/Skype.java b/src/main/java/com/samczsun/skype4j/Skype.java
index ce698ed..29c13c9 100644
--- a/src/main/java/com/samczsun/skype4j/Skype.java
+++ b/src/main/java/com/samczsun/skype4j/Skype.java
@@ -1,28 +1,25 @@
 package com.samczsun.skype4j;
 
+import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.events.EventDispatcher;
+
 import java.io.IOException;
 import java.util.Collection;
 import java.util.logging.Logger;
 
-import com.samczsun.skype4j.chat.Chat;
-import com.samczsun.skype4j.events.EventDispatcher;
-import com.samczsun.skype4j.exceptions.SkypeException;
-import com.samczsun.skype4j.internal.SkypeImpl;
-
 public abstract class Skype {
 
     /**
      * Subscribe to the HTTP long polling service. This will start reading
      * events from Skype and calling events within this API
-     * 
-     * @throws IOException
-     *             Thrown if any internal operations go wrong
+     *
+     * @throws IOException Thrown if any internal operations go wrong
      */
     public abstract void subscribe() throws IOException;
 
     /**
      * Get the username of the account logged in
-     * 
+     *
      * @return The username
      */
     public abstract String getUsername();
@@ -30,45 +27,37 @@
     /**
      * Get a chat based on the identity given. If no chat is found, it will be
      * loaded if it exists
-     * 
-     * @param name
-     *            The identity of the chat
+     *
+     * @param name The identity of the chat
      * @return The {@link Chat Chat} object, or null if not found
      */
     public abstract Chat getChat(String name);
 
     /**
      * Get all the chats loaded by this API
+     *
      * @return A view of all the chats
      */
     public abstract Collection<Chat> getAllChats();
 
     /**
      * Log out and stop all threads
+     *
      * @throws IOException
      */
     public abstract void logout() throws IOException;
 
     /**
      * Get the event dispatcher that handles listening to events
+     *
      * @return The {@link EventDispatcher EventDispatcher}
      */
     public abstract EventDispatcher getEventDispatcher();
 
     /**
      * Get the Logger used for debugging
+     *
      * @return The Logger
      */
     public abstract Logger getLogger();
-
-    /**
-     * Create a new Skype instance with the specified username and password
-     * @param username The username
-     * @param password The password
-     * @return The Skype instance
-     * @throws SkypeException If login failed or any other operations after login failed
-     */
-    public static Skype login(String username, String password) throws SkypeException {
-        return new SkypeImpl(username, password);
-    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/SkypeBuilder.java b/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
new file mode 100644
index 0000000..0ef6b49
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
@@ -0,0 +1,61 @@
+package com.samczsun.skype4j;
+
+import com.samczsun.skype4j.internal.SkypeImpl;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Set;
+
+public class SkypeBuilder {
+
+    private final String username;
+    private final String password;
+
+    private Set<String> resources = new HashSet<>();
+    private boolean lazyLoadChats = true;
+    private boolean loadMessages = false;
+
+    public SkypeBuilder(String username, String password) {
+        this.username = username;
+        this.password = password;
+    }
+
+    public SkypeBuilder withAllResources() {
+        resources.addAll(Arrays.asList("/v1/users/ME/conversations/ALL/properties", "/v1/users/ME/conversations/ALL/messages", "/v1/users/ME/contacts/ALL", "/v1/threads/ALL"));
+        return this;
+    }
+
+    public SkypeBuilder withConversationProperties() {
+        resources.add("/v1/users/ME/conversations/ALL/properties");
+        return this;
+    }
+
+    public SkypeBuilder withConversationMessages() {
+        resources.add("/v1/users/ME/conversations/ALL/messages");
+        return this;
+    }
+
+    public SkypeBuilder withContacts() {
+        resources.add("/v1/users/ME/contacts/ALL");
+        return this;
+    }
+
+    public SkypeBuilder withThreads() {
+        resources.add("/v1/threads/ALL");
+        return this;
+    }
+
+    public SkypeBuilder loadChats() {
+        this.lazyLoadChats = false;
+        return this;
+    }
+
+    public SkypeBuilder loadMessages() {
+        this.loadMessages = true;
+        return this;
+    }
+
+    public Skype build() {
+        return new SkypeImpl(username, password);
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/chat/Chat.java b/src/main/java/com/samczsun/skype4j/chat/Chat.java
index b15abaf..9ab73b0 100644
--- a/src/main/java/com/samczsun/skype4j/chat/Chat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/Chat.java
@@ -1,13 +1,12 @@
 package com.samczsun.skype4j.chat;
 
-import java.util.Collection;
-import java.util.List;
-
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Message;
-import com.samczsun.skype4j.formatting.RichText;
 import com.samczsun.skype4j.user.User;
 
+import java.util.Collection;
+import java.util.List;
+
 /**
  * Represents a single chat. This can be a private message or a group chat.
  *
diff --git a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java b/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
index 768d0fa..d3b5616 100644
--- a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
+++ b/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
@@ -1,8 +1,6 @@
 package com.samczsun.skype4j.chat;
 
-import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Message;
-import com.samczsun.skype4j.formatting.RichText;
 import com.samczsun.skype4j.user.User;
 
 /**
diff --git a/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java b/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java
index 861cc6d..f050f5a 100644
--- a/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java
@@ -3,9 +3,8 @@
 /**
  * Represents a private conversation between the user logged in and one other
  * user
- * 
- * @author samczsun
  *
+ * @author samczsun
  */
 public interface IndividualChat extends Chat {
     // There's not much you can do in a private chat
diff --git a/src/main/java/com/samczsun/skype4j/events/Event.java b/src/main/java/com/samczsun/skype4j/events/Event.java
index c754740..835af76 100644
--- a/src/main/java/com/samczsun/skype4j/events/Event.java
+++ b/src/main/java/com/samczsun/skype4j/events/Event.java
@@ -1,5 +1,5 @@
 package com.samczsun.skype4j.events;
 
 public abstract class Event {
-    
+
 }
diff --git a/src/main/java/com/samczsun/skype4j/events/EventDispatcher.java b/src/main/java/com/samczsun/skype4j/events/EventDispatcher.java
index 08f88a4..5a67648 100644
--- a/src/main/java/com/samczsun/skype4j/events/EventDispatcher.java
+++ b/src/main/java/com/samczsun/skype4j/events/EventDispatcher.java
@@ -2,5 +2,6 @@
 
 public interface EventDispatcher {
     void registerListener(Listener l);
+
     void callEvent(Event l);
 }
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/DisconnectedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/DisconnectedEvent.java
new file mode 100644
index 0000000..995a8ca
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/chat/DisconnectedEvent.java
@@ -0,0 +1,17 @@
+package com.samczsun.skype4j.events.chat;
+
+import com.samczsun.skype4j.events.Event;
+
+import java.io.IOException;
+
+public class DisconnectedEvent extends Event {
+    private final IOException cause;
+
+    public DisconnectedEvent(IOException cause) {
+        this.cause = cause;
+    }
+
+    public IOException getCause() {
+        return this.cause;
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java
index 8731aa3..1188498 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java
@@ -9,7 +9,7 @@ public MessageEditedEvent(ChatMessage message, String newContent) {
         super(message);
         this.newContent = newContent;
     }
-    
+
     public String getNewContent() {
         return this.newContent;
     }
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEvent.java
index daeacb1..2001664 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEvent.java
@@ -10,7 +10,7 @@ public MessageEvent(ChatMessage message) {
         super(message.getChat());
         this.message = message;
     }
-    
+
     public ChatMessage getMessage() {
         return this.message;
     }
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserAddEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserAddEvent.java
index ede99b5..46a8858 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserAddEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserAddEvent.java
@@ -1,10 +1,10 @@
 package com.samczsun.skype4j.events.chat.user;
 
+import com.samczsun.skype4j.user.User;
+
 import java.util.Collections;
 import java.util.List;
 
-import com.samczsun.skype4j.user.User;
-
 public class MultiUserAddEvent extends UserAddEvent {
     private final List<User> allUsers;
 
@@ -12,7 +12,7 @@ public MultiUserAddEvent(List<User> users, User initiator) {
         super(users.get(0), initiator);
         allUsers = users;
     }
-    
+
     public List<User> getAllUsers() {
         return Collections.unmodifiableList(allUsers);
     }
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/UserAddEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/UserAddEvent.java
index 7e817bc..6b8af80 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/UserAddEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/UserAddEvent.java
@@ -4,12 +4,12 @@
 
 public class UserAddEvent extends UserEvent {
     private final User initiator;
-    
+
     public UserAddEvent(User user, User initiator) {
         super(user);
         this.initiator = initiator;
     }
-    
+
     public User getInitiator() {
         return this.initiator;
     }
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/UserEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/UserEvent.java
index 1cceec4..81b62dd 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/UserEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/UserEvent.java
@@ -5,12 +5,12 @@
 
 public abstract class UserEvent extends ChatEvent {
     private final User user;
-    
+
     public UserEvent(User user) {
         super(user.getChat());
         this.user = user;
     }
-    
+
     public User getUser() {
         return this.user;
     }
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/UserRemoveEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/UserRemoveEvent.java
index acbbe8f..c4f1d9f 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/UserRemoveEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/UserRemoveEvent.java
@@ -4,12 +4,12 @@
 
 public class UserRemoveEvent extends UserEvent {
     private final User initiator;
-    
+
     public UserRemoveEvent(User user, User initiator) {
         super(user);
         this.initiator = initiator;
     }
-    
+
     public User getInitiator() {
         return this.initiator;
     }
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/ConnectionException.java b/src/main/java/com/samczsun/skype4j/exceptions/ConnectionException.java
new file mode 100644
index 0000000..c769909
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/exceptions/ConnectionException.java
@@ -0,0 +1,14 @@
+package com.samczsun.skype4j.exceptions;
+
+import java.io.IOException;
+
+/**
+ * Thrown when an exception occurs while connecting to one of Skype Web's endpoints
+ *
+ * @author samczsun
+ */
+public class ConnectionException extends NestedSkypeException {
+    public ConnectionException(String cause, IOException exception) {
+        super(cause, exception);
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/InvalidCredentialsException.java b/src/main/java/com/samczsun/skype4j/exceptions/InvalidCredentialsException.java
index 69a6a08..3aa2c45 100644
--- a/src/main/java/com/samczsun/skype4j/exceptions/InvalidCredentialsException.java
+++ b/src/main/java/com/samczsun/skype4j/exceptions/InvalidCredentialsException.java
@@ -1,7 +1,9 @@
 package com.samczsun.skype4j.exceptions;
 
 /**
- * Created by Sam on 7/9/2015.
+ * Thrown when invalid credentials are given to log in
+ *
+ * @author samczsun
  */
 public class InvalidCredentialsException extends SkypeException {
     public InvalidCredentialsException(String message) {
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/NestedSkypeException.java b/src/main/java/com/samczsun/skype4j/exceptions/NestedSkypeException.java
new file mode 100644
index 0000000..a141e94
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/exceptions/NestedSkypeException.java
@@ -0,0 +1,19 @@
+package com.samczsun.skype4j.exceptions;
+
+/**
+ * Represents a {@link SkypeException SkypeException} which holds another exception as the cause
+ *
+ * @author samczsun
+ */
+public class NestedSkypeException extends SkypeException {
+    private final Exception reason;
+
+    public NestedSkypeException(String cause, Exception suppressed) {
+        super(cause);
+        this.reason = suppressed;
+    }
+
+    public Exception getReason() {
+        return this.reason;
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/NotLoadedException.java b/src/main/java/com/samczsun/skype4j/exceptions/NotLoadedException.java
index b2bdb59..7b50416 100644
--- a/src/main/java/com/samczsun/skype4j/exceptions/NotLoadedException.java
+++ b/src/main/java/com/samczsun/skype4j/exceptions/NotLoadedException.java
@@ -1,5 +1,9 @@
 package com.samczsun.skype4j.exceptions;
 
+/**
+ * Thrown when a chat is not yet loaded but an operation to modify it was attempted
+ *
+ * @author samczsun
+ */
 public class NotLoadedException extends RuntimeException {
-    private static final long serialVersionUID = 977645207715072614L;
 }
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/ParseException.java b/src/main/java/com/samczsun/skype4j/exceptions/ParseException.java
new file mode 100644
index 0000000..ca1f88b
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/exceptions/ParseException.java
@@ -0,0 +1,14 @@
+package com.samczsun.skype4j.exceptions;
+
+import java.io.IOException;
+
+/**
+ * Thrown when parsing of a response from Skype Web fails
+ *
+ * @author samczsun
+ */
+public class ParseException extends NestedSkypeException {
+    public ParseException(String cause, IOException exception) {
+        super(cause, exception);
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/SkypeException.java b/src/main/java/com/samczsun/skype4j/exceptions/SkypeException.java
index 1204175..c06a471 100644
--- a/src/main/java/com/samczsun/skype4j/exceptions/SkypeException.java
+++ b/src/main/java/com/samczsun/skype4j/exceptions/SkypeException.java
@@ -1,17 +1,12 @@
 package com.samczsun.skype4j.exceptions;
 
+/**
+ * Represents any exception that may occur while using this API
+ *
+ * @author samczsun
+ */
 public class SkypeException extends Exception {
-    private static final long serialVersionUID = -7832042631619998728L;
-    
-    public SkypeException() {
-        super();
-    }
-    
     public SkypeException(String message) {
         super(message);
     }
-    
-    public SkypeException(String message, Exception wrapped) {
-        super(message, wrapped);
-    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/formatting/Message.java b/src/main/java/com/samczsun/skype4j/formatting/Message.java
index 27b48ae..a906dca 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/Message.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/Message.java
@@ -1,12 +1,5 @@
 package com.samczsun.skype4j.formatting;
 
-import java.awt.*;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Stack;
-
-import org.apache.commons.lang3.StringEscapeUtils;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
 import org.jsoup.nodes.Element;
@@ -14,6 +7,12 @@
 import org.jsoup.nodes.TextNode;
 import org.jsoup.select.NodeVisitor;
 
+import java.awt.*;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Stack;
+
 public class Message {
     private final ArrayList<Text> components = new ArrayList<>();
 
diff --git a/src/main/java/com/samczsun/skype4j/formatting/RichText.java b/src/main/java/com/samczsun/skype4j/formatting/RichText.java
index fc29eb0..c833c43 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/RichText.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/RichText.java
@@ -1,6 +1,6 @@
 package com.samczsun.skype4j.formatting;
 
-import java.awt.Color;
+import java.awt.*;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java b/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
index c014e5d..fe54a64 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
@@ -1,29 +1,24 @@
 package com.samczsun.skype4j.internal;
 
-import java.io.IOException;
-import java.net.URL;
-import java.nio.charset.Charset;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import javax.net.ssl.HttpsURLConnection;
-
 import com.eclipsesource.json.JsonArray;
 import com.eclipsesource.json.JsonObject;
 import com.eclipsesource.json.JsonValue;
 import com.samczsun.skype4j.StreamUtils;
 import com.samczsun.skype4j.chat.ChatMessage;
 import com.samczsun.skype4j.chat.GroupChat;
+import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.NotLoadedException;
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Message;
-import com.samczsun.skype4j.formatting.RichText;
 import com.samczsun.skype4j.user.User;
 import com.samczsun.skype4j.user.User.Role;
 
+import javax.net.ssl.HttpsURLConnection;
+import java.io.IOException;
+import java.net.URL;
+import java.nio.charset.Charset;
+import java.util.*;
+
 public class ChatGroup extends ChatImpl implements GroupChat {
     private String topic;
 
@@ -31,16 +26,15 @@ protected ChatGroup(SkypeImpl skype, String identity) throws SkypeException {
         super(skype, identity);
     }
 
-    protected void load() throws SkypeException {
+    protected void load() throws ConnectionException {
         if (isLoaded()) {
             return;
         }
         isLoading.set(true);
         Map<String, User> newUsers = new HashMap<>();
-        HttpsURLConnection con = null;
         try {
             URL url = new URL("https://client-s.gateway.messenger.live.com/v1/threads/" + this.getIdentity() + "?view=msnp24Equivalent");
-            con = (HttpsURLConnection) url.openConnection();
+            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
             con.setRequestProperty("RegistrationToken", getClient().getRegistrationToken());
             con.setRequestProperty("Content-Type", "application/json");
             String in = StreamUtils.readFully(con.getInputStream());
@@ -66,19 +60,19 @@ protected void load() throws SkypeException {
                     user.setRole(Role.USER);
                 }
             }
+            hasLoaded.set(true);
         } catch (IOException e) {
-            throw new SkypeException("An exception occured while loading users", e);
+            throw new ConnectionException("While loading users", e);
+        } finally {
+            this.users.clear();
+            this.users.putAll(newUsers);
+            isLoading.set(false);
         }
-        this.users.clear();
-        this.users.putAll(newUsers);
-        isLoading.set(false);
-        hasLoaded.set(true);
     }
 
     @Override
-    public ChatMessage sendMessage(Message message) throws SkypeException {
+    public ChatMessage sendMessage(Message message) throws ConnectionException {
         checkLoaded();
-        HttpsURLConnection con = null;
         try {
             long ms = System.currentTimeMillis();
             JsonObject obj = new JsonObject();
@@ -87,7 +81,7 @@ public ChatMessage sendMessage(Message message) throws SkypeException {
             obj.add("contenttype", "text");
             obj.add("clientmessageid", String.valueOf(ms));
             URL url = new URL("https://client-s.gateway.messenger.live.com/v1/users/ME/conversations/" + this.getIdentity() + "/messages");
-            con = (HttpsURLConnection) url.openConnection();
+            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
             con.setRequestMethod("POST");
             con.setDoOutput(true);
             con.setRequestProperty("RegistrationToken", getClient().getRegistrationToken());
@@ -96,7 +90,7 @@ public ChatMessage sendMessage(Message message) throws SkypeException {
             con.getInputStream();
             return ChatMessageImpl.createMessage(this, getUser(getClient().getUsername()), null, String.valueOf(ms), ms, message);
         } catch (IOException e) {
-            throw new SkypeException("An error occured while sending a message", e);
+            throw new ConnectionException("While sending a message", e);
         }
     }
 
@@ -111,7 +105,7 @@ public void addUser(String username) {
             User user = new UserImpl(username, this);
             users.put(username, user);
         } else {
-            System.out.println(username + " joined twice???");
+            throw new IllegalArgumentException(username + " joined the chat even though he was already in it?");
         }
     }
 
@@ -119,23 +113,22 @@ public void removeUser(String username) {
         users.remove(username);
     }
 
-    public void kick(String username) throws SkypeException {
+    public void kick(String username) throws ConnectionException {
         checkLoaded();
-        HttpsURLConnection con = null;
         try {
             URL url = new URL("https://client-s.gateway.messenger.live.com/v1/threads/" + this.getIdentity() + "/members/8:" + username);
-            con = (HttpsURLConnection) url.openConnection();
+            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
             con.setInstanceFollowRedirects(false);
             con.setRequestMethod("DELETE");
             con.setRequestProperty("RegistrationToken", getClient().getRegistrationToken());
             con.setRequestProperty("Content-Type", "application/json");
             con.getInputStream();
-        } catch (Exception e) {
-            throw new SkypeException("An exception occured while kicking", e);
+        } catch (IOException e) {
+            throw new ConnectionException("While kicking", e);
         }
     }
 
-    public void leave() throws SkypeException {
+    public void leave() throws ConnectionException {
         kick(getClient().getUsername());
     }
 
@@ -145,12 +138,11 @@ public String getTopic() {
         return this.topic;
     }
 
-    public void setTopic(String topic) throws SkypeException {
+    public void setTopic(String topic) throws ConnectionException {
         checkLoaded();
-        HttpsURLConnection con = null;
         try {
             URL url = new URL("https://client-s.gateway.messenger.live.com/v1/threads/" + this.getIdentity() + "/properties?name=topic");
-            con = (HttpsURLConnection) url.openConnection();
+            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
             con.setInstanceFollowRedirects(false);
             con.setRequestMethod("PUT");
             con.setDoOutput(true);
@@ -160,8 +152,8 @@ public void setTopic(String topic) throws SkypeException {
             obj.add("topic", topic);
             con.getOutputStream().write(obj.toString().getBytes(Charset.forName("UTF-8")));
             con.getOutputStream();
-        } catch (Exception e) {
-            throw new SkypeException("An exception occured while updating the topic", e);
+        } catch (IOException e) {
+            throw new ConnectionException("While updating the topic", e);
         }
     }
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java b/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
index 430ac06..568c9c3 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
@@ -1,19 +1,19 @@
 package com.samczsun.skype4j.internal;
 
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.CopyOnWriteArrayList;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-import org.jsoup.helper.Validate;
-
 import com.samczsun.skype4j.Skype;
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.NotLoadedException;
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.user.User;
+import org.jsoup.helper.Validate;
+
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 public abstract class ChatImpl implements Chat {
     public static Chat createChat(Skype client, String identity) throws SkypeException {
@@ -43,7 +43,7 @@ public static Chat createChat(Skype client, String identity) throws SkypeExcepti
     protected final Map<String, User> users = new ConcurrentHashMap<>();
     protected final List<ChatMessage> messages = new CopyOnWriteArrayList<>();
 
-    ChatImpl(SkypeImpl client, String identity) throws SkypeException {
+    ChatImpl(SkypeImpl client, String identity) throws ConnectionException {
         this.client = client;
         this.identity = identity;
         load();
@@ -67,7 +67,7 @@ public boolean isLoaded() {
 
     public abstract void onMessage(ChatMessage m);
 
-    protected abstract void load() throws SkypeException;
+    protected abstract void load() throws ConnectionException;
 
     protected void checkLoaded() throws NotLoadedException {
         if (!isLoaded()) {
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java b/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
index 8234440..85be6a8 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
@@ -1,31 +1,23 @@
 package com.samczsun.skype4j.internal;
 
-import java.io.IOException;
-import java.net.URL;
-import java.nio.charset.Charset;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import javax.net.ssl.HttpsURLConnection;
-
-import com.samczsun.skype4j.formatting.Message;
-import org.jsoup.Jsoup;
-
 import com.eclipsesource.json.JsonObject;
 import com.samczsun.skype4j.chat.ChatMessage;
 import com.samczsun.skype4j.chat.IndividualChat;
-import com.samczsun.skype4j.exceptions.SkypeException;
-import com.samczsun.skype4j.formatting.RichText;
+import com.samczsun.skype4j.exceptions.ConnectionException;
+import com.samczsun.skype4j.formatting.Message;
 import com.samczsun.skype4j.user.User;
 
+import javax.net.ssl.HttpsURLConnection;
+import java.io.IOException;
+import java.net.URL;
+import java.nio.charset.Charset;
+import java.util.*;
+
 public class ChatIndividual extends ChatImpl implements IndividualChat {
-    protected ChatIndividual(SkypeImpl skype, String identity) throws SkypeException {
+    protected ChatIndividual(SkypeImpl skype, String identity) throws ConnectionException {
         super(skype, identity);
     }
-    
+
     @Override
     protected void load() {
         if (isLoaded()) {
@@ -51,8 +43,8 @@ protected void load() {
     }
 
     @Override
-    public ChatMessage sendMessage(Message message) throws SkypeException {
-        HttpsURLConnection con = null;
+    public ChatMessage sendMessage(Message message) throws ConnectionException {
+        checkLoaded();
         try {
             long ms = System.currentTimeMillis();
             JsonObject obj = new JsonObject();
@@ -61,7 +53,7 @@ public ChatMessage sendMessage(Message message) throws SkypeException {
             obj.add("contenttype", "text");
             obj.add("clientmessageid", String.valueOf(ms));
             URL url = new URL("https://client-s.gateway.messenger.live.com/v1/users/ME/conversations/" + this.getIdentity() + "/messages");
-            con = (HttpsURLConnection) url.openConnection();
+            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
             con.setRequestMethod("POST");
             con.setDoOutput(true);
             con.setRequestProperty("RegistrationToken", getClient().getRegistrationToken());
@@ -70,7 +62,7 @@ public ChatMessage sendMessage(Message message) throws SkypeException {
             con.getInputStream();
             return ChatMessageImpl.createMessage(this, getUser(getClient().getUsername()), null, String.valueOf(ms), ms, message);
         } catch (IOException e) {
-            throw new SkypeException("An exception occured while sending a message", e);
+            throw new ConnectionException("While sending a message", e);
         }
     }
 
@@ -80,16 +72,11 @@ public ChatMessage sendMessage(Message message) throws SkypeException {
     }
 
     public void addUser(String username) {
-        if (!users.containsKey(username)) {
-            User user = new UserImpl(username, this);
-            users.put(username, user);
-        } else {
-            System.out.println(username + " joined twice???");
-        }
+        throw new IllegalArgumentException("Cannot add user to individual chat");
     }
 
     public void removeUser(String username) {
-        users.remove(username);
+        throw new IllegalArgumentException("Cannot remove user from individual chat");
     }
 
     public void onMessage(ChatMessage message) {
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
index 4c00576..3dbef19 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
@@ -1,11 +1,10 @@
 package com.samczsun.skype4j.internal;
 
-import com.samczsun.skype4j.formatting.Message;
-import org.jsoup.helper.Validate;
-
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.formatting.Message;
 import com.samczsun.skype4j.user.User;
+import org.jsoup.helper.Validate;
 
 public abstract class ChatMessageImpl implements ChatMessage {
     public static ChatMessage createMessage(Chat chat, User user, String id, String clientId, long time, Message message) {
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
index b9f573c..098bbbe 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
@@ -2,9 +2,7 @@
 
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.chat.ReceivedMessage;
-import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Message;
-import com.samczsun.skype4j.formatting.RichText;
 import com.samczsun.skype4j.user.User;
 
 public class ChatMessageOther extends ChatMessageImpl implements ReceivedMessage {
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
index 1a24e3f..1053e55 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
@@ -1,18 +1,18 @@
 package com.samczsun.skype4j.internal;
 
-import java.net.URL;
-
-import javax.net.ssl.HttpsURLConnection;
-
 import com.eclipsesource.json.JsonObject;
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.chat.SentMessage;
+import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Message;
-import com.samczsun.skype4j.formatting.RichText;
 import com.samczsun.skype4j.formatting.Text;
 import com.samczsun.skype4j.user.User;
 
+import javax.net.ssl.HttpsURLConnection;
+import java.io.IOException;
+import java.net.URL;
+
 public class ChatMessageSelf extends ChatMessageImpl implements SentMessage {
     private final String clientId;
     private final String id;
@@ -49,8 +49,7 @@ public User getSender() {
     }
 
     @Override
-    public void edit(Message newMessage) throws SkypeException {
-        HttpsURLConnection con = null;
+    public void edit(Message newMessage) throws ConnectionException {
         try {
             JsonObject obj = new JsonObject();
             obj.add("content", newMessage.write());
@@ -58,15 +57,15 @@ public void edit(Message newMessage) throws SkypeException {
             obj.add("contenttype", "text");
             obj.add("skypeeditedid", this.clientId);
             URL url = new URL("https://client-s.gateway.messenger.live.com/v1/users/ME/conversations/" + this.sender.getChat().getIdentity() + "/messages");
-            con = (HttpsURLConnection) url.openConnection();
+            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
             con.setRequestMethod("POST");
             con.setDoOutput(true);
             con.setRequestProperty("RegistrationToken", ((ChatImpl) sender.getChat()).getClient().getRegistrationToken());
             con.setRequestProperty("Content-Type", "application/json");
             con.getOutputStream().write(obj.toString().getBytes());
             con.getInputStream();
-        } catch (Exception e) {
-            throw new SkypeException("An exception occured while editing a message", e);
+        } catch (IOException e) {
+            throw new ConnectionException("While editing a message", e);
         }
     }
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/MessageType.java b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
index ee3a7be..ef02fe9 100644
--- a/src/main/java/com/samczsun/skype4j/internal/MessageType.java
+++ b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
@@ -1,19 +1,5 @@
 package com.samczsun.skype4j.internal;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import com.samczsun.skype4j.formatting.Message;
-import org.apache.commons.lang3.StringEscapeUtils;
-import org.jsoup.Jsoup;
-import org.jsoup.nodes.Document;
-import org.jsoup.nodes.Element;
-import org.jsoup.parser.Parser;
-
 import com.eclipsesource.json.JsonObject;
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.chat.ChatMessage;
@@ -27,9 +13,21 @@
 import com.samczsun.skype4j.events.chat.user.UserAddEvent;
 import com.samczsun.skype4j.events.chat.user.UserRemoveEvent;
 import com.samczsun.skype4j.exceptions.SkypeException;
-import com.samczsun.skype4j.formatting.RichText;
+import com.samczsun.skype4j.formatting.Message;
 import com.samczsun.skype4j.user.User;
 import com.samczsun.skype4j.user.User.Role;
+import org.apache.commons.lang3.StringEscapeUtils;
+import org.jsoup.Jsoup;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Parser;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 public enum MessageType {
     UNKNOWN("Unknown") {
@@ -60,12 +58,12 @@ public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
                 MessageReceivedEvent evnt = new MessageReceivedEvent(m);
                 skype.getEventDispatcher().callEvent(evnt);
             } else if (resource.get("skypeeditedid") != null) { // Edited
-                                                                // message
+                // message
                 String url = resource.get("conversationLink").asString();
                 String from = resource.get("from").asString();
                 final Chat c = getChat(url, skype);
                 final User u = getUser(from, c); // If not original sender, then
-                                                 // fake
+                // fake
                 final String clientId = resource.get("skypeeditedid").asString();
                 final String id = resource.get("id").asString();
                 String content = resource.get("content").asString();
diff --git a/src/main/java/com/samczsun/skype4j/internal/RegisteredListener.java b/src/main/java/com/samczsun/skype4j/internal/RegisteredListener.java
index f346515..e781281 100644
--- a/src/main/java/com/samczsun/skype4j/internal/RegisteredListener.java
+++ b/src/main/java/com/samczsun/skype4j/internal/RegisteredListener.java
@@ -1,21 +1,21 @@
 package com.samczsun.skype4j.internal;
 
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-
 import com.samczsun.skype4j.events.Event;
 import com.samczsun.skype4j.events.Listener;
 
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
 public class RegisteredListener {
     private final Listener listener;
     private final Method method;
-    
+
     public RegisteredListener(Listener l, Method m) {
         this.listener = l;
         this.method = m;
         this.method.setAccessible(true);
     }
-    
+
     public void handleEvent(Event e) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
         this.method.invoke(listener, e);
     }
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java b/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java
index 6dcf890..b3c2f8c 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java
@@ -1,5 +1,10 @@
 package com.samczsun.skype4j.internal;
 
+import com.samczsun.skype4j.events.Event;
+import com.samczsun.skype4j.events.EventDispatcher;
+import com.samczsun.skype4j.events.EventHandler;
+import com.samczsun.skype4j.events.Listener;
+
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
@@ -7,11 +12,6 @@
 import java.util.List;
 import java.util.Map;
 
-import com.samczsun.skype4j.events.Event;
-import com.samczsun.skype4j.events.EventDispatcher;
-import com.samczsun.skype4j.events.EventHandler;
-import com.samczsun.skype4j.events.Listener;
-
 public class SkypeEventDispatcher implements EventDispatcher {
     private final Map<Class<? extends Event>, List<RegisteredListener>> listeners = new HashMap<>();
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
index daafecb..819f392 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
@@ -1,5 +1,25 @@
 package com.samczsun.skype4j.internal;
 
+import com.eclipsesource.json.JsonArray;
+import com.eclipsesource.json.JsonObject;
+import com.eclipsesource.json.JsonValue;
+import com.samczsun.skype4j.Skype;
+import com.samczsun.skype4j.StreamUtils;
+import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.events.EventDispatcher;
+import com.samczsun.skype4j.events.chat.ChatJoinedEvent;
+import com.samczsun.skype4j.events.chat.DisconnectedEvent;
+import com.samczsun.skype4j.exceptions.ConnectionException;
+import com.samczsun.skype4j.exceptions.InvalidCredentialsException;
+import com.samczsun.skype4j.exceptions.ParseException;
+import org.jsoup.Connection.Method;
+import org.jsoup.Connection.Response;
+import org.jsoup.Jsoup;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.select.Elements;
+
+import javax.net.ssl.HttpsURLConnection;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.URL;
@@ -13,35 +33,16 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import javax.net.ssl.HttpsURLConnection;
-
-import com.samczsun.skype4j.exceptions.InvalidCredentialsException;
-import org.jsoup.Connection.Method;
-import org.jsoup.Connection.Response;
-import org.jsoup.Jsoup;
-import org.jsoup.nodes.Document;
-import org.jsoup.nodes.Element;
-import org.jsoup.select.Elements;
-
-import com.eclipsesource.json.JsonArray;
-import com.eclipsesource.json.JsonObject;
-import com.eclipsesource.json.JsonValue;
-import com.samczsun.skype4j.Skype;
-import com.samczsun.skype4j.StreamUtils;
-import com.samczsun.skype4j.chat.Chat;
-import com.samczsun.skype4j.events.EventDispatcher;
-import com.samczsun.skype4j.events.chat.ChatJoinedEvent;
-import com.samczsun.skype4j.exceptions.SkypeException;
-
 public class SkypeImpl extends Skype {
     private static final String LOGIN_URL = "https://login.skype.com/login?client_id=578134&redirect_uri=https%3A%2F%2Fweb.skype.com";
     private static final String PING_URL = "https://web.skype.com/api/v1/session-ping";
+    private static final String TOKEN_AUTH_URL = "https://api.asm.skype.com/v1/skypetokenauth";
     private static final String SUBSCRIPTIONS_URL = "https://client-s.gateway.messenger.live.com/v1/users/ME/endpoints/SELF/subscriptions";
     private static final String MESSAGINGSERVICE_URL = "https://client-s.gateway.messenger.live.com/v1/users/ME/endpoints/%s/presenceDocs/messagingService";
+    private static final String ENDPOINTS_URL = "https://client-s.gateway.messenger.live.com/v1/users/ME/endpoints";
     private static final String LOGOUT_URL = "https://login.skype.com/logout?client_id=578134&redirect_uri=https%3A%2F%2Fweb.skype.com&intsrc=client-_-webapp-_-production-_-go-signin";
 
     private final AtomicBoolean loggedIn = new AtomicBoolean(false);
-    private final Map<String, String> cookies = new HashMap<>();
     private final String username;
     private final String password;
 
@@ -49,6 +50,7 @@
     private String skypeToken;
     private String registrationToken;
     private String endpointId;
+    private Map<String, String> cookies;
 
     private Thread sessionKeepaliveThread;
 
@@ -56,14 +58,9 @@
     private final Logger logger = Logger.getLogger("webskype");
     private final Map<String, Chat> allChats = new ConcurrentHashMap<>();
 
-    public SkypeImpl(String username, String password) throws SkypeException {
+    public SkypeImpl(String username, String password) {
         this.username = username;
         this.password = password;
-        try {
-            this.login();
-        } catch (IOException e) {
-            throw new SkypeException("An exception occured while logging in", e);
-        }
     }
 
     public void subscribe() throws IOException {
@@ -138,12 +135,8 @@ public void run() {
                                 });
                             }
                         } catch (IOException e) {
-                            sessionKeepaliveThread.stop();
-                            try {
-                                login();
-                            } catch (SkypeException e1) {
-                                e1.printStackTrace();
-                            }
+                            eventDispatcher.callEvent(new DisconnectedEvent(e));
+                            loggedIn.set(false);
                         }
                     }
                 } catch (IOException e) {
@@ -198,19 +191,46 @@ public Logger getLogger() {
         return this.logger;
     }
 
-    private Response postToLogin(String username, String password) throws IOException {
-        Map<String, String> data = new HashMap<>();
-        Document loginDocument = Jsoup.connect(LOGIN_URL).get();
-        Element loginForm = loginDocument.getElementById("loginForm");
-        for (Element input : loginForm.getElementsByTag("input")) {
-            data.put(input.attr("name"), input.attr("value"));
+    private Response postToLogin(String username, String password) throws ConnectionException {
+        try {
+            Map<String, String> data = new HashMap<>();
+            Document loginDocument = Jsoup.connect(LOGIN_URL).get();
+            Element loginForm = loginDocument.getElementById("loginForm");
+            for (Element input : loginForm.getElementsByTag("input")) {
+                data.put(input.attr("name"), input.attr("value"));
+            }
+            Date now = new Date();
+            data.put("timezone_field", new SimpleDateFormat("XXX").format(now).replace(':', '|'));
+            data.put("username", username);
+            data.put("password", password);
+            data.put("js_time", String.valueOf(now.getTime() / 1000));
+            return Jsoup.connect(LOGIN_URL).data(data).method(Method.POST).execute();
+        } catch (IOException e) {
+            throw new ConnectionException("While submitting credentials", e);
+        }
+    }
+
+    private Response getAsmToken(Map<String, String> cookies, String skypeToken) throws ConnectionException {
+        try {
+            return Jsoup.connect(TOKEN_AUTH_URL).cookies(cookies).data("skypetoken", skypeToken).method(Method.POST).execute();
+        } catch (IOException e) {
+            throw new ConnectionException("While fetching the asmtoken", e);
+        }
+    }
+
+    private HttpsURLConnection registerEndpoint(String skypeToken) throws ConnectionException {
+        try {
+            HttpsURLConnection connection = (HttpsURLConnection) new URL(ENDPOINTS_URL).openConnection(); // msmsgs@msnmsgr.com,Q1P7W2E4J9R8U3S5
+            connection.setRequestProperty("Authentication", "skypetoken=" + skypeToken);
+            //getReg.setRequestProperty("LockAndKey", "appId=msmsgs@msnmsgr.com; time=1436987361; lockAndKeyResponse=838e6231d460580332d22da83898ff44");
+            connection.setRequestMethod("POST");
+            connection.setDoOutput(true);
+            connection.getOutputStream().write("{}".getBytes());
+            connection.getInputStream();
+            return connection;
+        } catch (IOException e) {
+            throw new ConnectionException("While registering the endpoint", e);
         }
-        Date now = new Date();
-        data.put("timezone_field", new SimpleDateFormat("XXX").format(now).replace(':', '|'));
-        data.put("username", username);
-        data.put("password", password);
-        data.put("js_time", String.valueOf(now.getTime() / 1000));
-        return Jsoup.connect(LOGIN_URL).data(data).method(Method.POST).execute();
     }
 
     private JsonObject buildSubscriptionObject() {
@@ -244,79 +264,53 @@ private JsonObject buildRegistrationObject() {
         return registrationObject;
     }
 
-    private void login() throws SkypeException, IOException{
-        this.eventDispatcher = new SkypeEventDispatcher();
+    public void login() throws InvalidCredentialsException, ConnectionException, ParseException {
         final UUID guid = UUID.randomUUID();
-        Response loginResponse = postToLogin(username, password);
-        cookies.putAll(loginResponse.cookies());
-        Document loginResponseDocument = loginResponse.parse();
+        final Map<String, String> tCookies = new HashMap<>();
+        final Response loginResponse = postToLogin(username, password);
+        tCookies.putAll(loginResponse.cookies());
+        Document loginResponseDocument;
+        try {
+            loginResponseDocument = loginResponse.parse();
+        } catch (IOException e) {
+            throw new ParseException("While parsing the login response", e);
+        }
         Elements inputs = loginResponseDocument.select("input[name=skypetoken]");
         if (inputs.size() > 0) {
-            skypeToken = inputs.get(0).attr("value");
+            String tSkypeToken = inputs.get(0).attr("value");
+
+            Response asmResponse = getAsmToken(tCookies, tSkypeToken);
+            tCookies.putAll(asmResponse.cookies());
+
+            HttpsURLConnection registrationToken = registerEndpoint(tSkypeToken);
+            String[] splits = registrationToken.getHeaderField("Set-RegistrationToken").split(";");
+            String tRegistrationToken = splits[0];
+            String tEndpointId = splits[2].split("=")[1];
+
+            this.skypeToken = tSkypeToken;
+            this.registrationToken = tRegistrationToken;
+            this.endpointId = tEndpointId;
+            this.cookies = tCookies;
+
             sessionKeepaliveThread = new Thread(String.format("Skype-%s-Session", username)) {
                 public void run() {
                     while (loggedIn.get()) {
                         try {
                             Jsoup.connect(PING_URL).header("X-Skypetoken", skypeToken).cookies(cookies).data("sessionId", guid.toString()).post();
+                        } catch (IOException e) {
+                            eventDispatcher.callEvent(new DisconnectedEvent(e));
+                        }
+                        try {
                             Thread.sleep(300000);
-                        } catch (IOException | InterruptedException e) {
-                            e.printStackTrace();
+                        } catch (InterruptedException e) {
+                            logger.log(Level.SEVERE, "Session thread was interrupted", e);
                         }
                     }
                 }
             };
             sessionKeepaliveThread.start();
-
-            Response getAsm = Jsoup.connect("https://api.asm.skype.com/v1/skypetokenauth").cookies(cookies).data("skypetoken", skypeToken).method(Method.POST).execute();
-            cookies.putAll(getAsm.cookies());
-            HttpsURLConnection getReg = (HttpsURLConnection) new URL("https://client-s.gateway.messenger.live.com/v1/users/ME/endpoints").openConnection(); // msmsgs@msnmsgr.com,Q1P7W2E4J9R8U3S5
-            getReg.setRequestProperty("Authentication", "skypetoken=" + skypeToken);
-            //getReg.setRequestProperty("LockAndKey", "appId=msmsgs@msnmsgr.com; time=1436987361; lockAndKeyResponse=838e6231d460580332d22da83898ff44");
-            getReg.setRequestMethod("POST");
-            getReg.setDoOutput(true);
-            getReg.getOutputStream().write("{}".getBytes());
-            getReg.getInputStream();
-            String[] splits = getReg.getHeaderField("Set-RegistrationToken").split(";");
-            registrationToken = splits[0];
-            endpointId = splits[2].split("=")[1];
-
-            Calendar calendar = Calendar.getInstance();
-            calendar.setTime(new Date());
-            calendar.set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH) - 14);
-            Date now = calendar.getTime();
-
-            String urlToUse = "https://client-s.gateway.messenger.live.com/v1/users/ME/conversations?startTime=" + now.getTime() + "&pageSize=100&view=msnp24Equivalent&targetType=Passport|Skype|Lync|Thread";
-            //        while (true) {
-            try {
-                URL url = new URL(urlToUse);
-                HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
-                con.setRequestProperty("RegistrationToken", registrationToken);
-                String in = StreamUtils.readFully(con.getInputStream());
-                JsonObject obj = JsonObject.readFrom(in);
-                for (JsonValue elem : obj.get("conversations").asArray()) {
-                    try {
-                        JsonObject conversation = elem.asObject();
-                        String id = conversation.get("id").asString();
-                        Chat chat = ChatImpl.createChat(this, id);
-                        if (chat != null) {
-                            allChats.put(id, chat);
-                        }
-                    } catch (Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-
-                //                if (obj.get("_metadata").asJsonObject().has("backwardLink")) {
-                //                    urlToUse = obj.get("_metadata").asJsonObject().get("backwardLink").asString();
-                //                    System.out.println("Backwards");
-                //                } else {
-                //                    break;
-                //                }
-                loggedIn.set(true);
-            } catch (Exception e) {
-                throw new SkypeException("An exception occured while fetching chats", e);
-            }
-            //        }
+            this.eventDispatcher = new SkypeEventDispatcher();
+            loggedIn.set(true);
         } else {
             Elements elements = loginResponseDocument.select(".message_error");
             if (elements.size() > 0) {
@@ -327,7 +321,6 @@ public void run() {
                 }
             }
             throw new InvalidCredentialsException("Could not find error message. Dumping entire page. \n" + loginResponseDocument.html());
-
         }
     }
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/UserImpl.java b/src/main/java/com/samczsun/skype4j/internal/UserImpl.java
index 22b05e4..64de71d 100644
--- a/src/main/java/com/samczsun/skype4j/internal/UserImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/UserImpl.java
@@ -1,21 +1,21 @@
 package com.samczsun.skype4j.internal;
 
+import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.user.User;
+
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 
-import com.samczsun.skype4j.chat.Chat;
-import com.samczsun.skype4j.chat.ChatMessage;
-import com.samczsun.skype4j.user.User;
-
 public class UserImpl implements User {
     private String username;
 
     private final Chat chat;
     private Role role = Role.USER;
-    
+
     private final List<ChatMessage> messages = new CopyOnWriteArrayList<>();
     private final Map<String, ChatMessage> messageMap = new ConcurrentHashMap<>();
 
@@ -87,7 +87,7 @@ public boolean equals(Object obj) {
     public ChatMessage getMessageById(String id) {
         return messageMap.get(id);
     }
-    
+
     public void onMessage(ChatMessage message) {
         this.messages.add(message);
         this.messageMap.put(message.getClientId(), message);
diff --git a/src/main/java/com/samczsun/skype4j/user/User.java b/src/main/java/com/samczsun/skype4j/user/User.java
index 6a2fcdd..1dc6ee6 100644
--- a/src/main/java/com/samczsun/skype4j/user/User.java
+++ b/src/main/java/com/samczsun/skype4j/user/User.java
@@ -1,10 +1,10 @@
 package com.samczsun.skype4j.user;
 
-import java.util.List;
-
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.chat.ChatMessage;
 
+import java.util.List;
+
 public interface User {
     String getUsername();
 
@@ -15,14 +15,14 @@
     void setRole(Role role);
 
     Chat getChat();
-    
+
     List<ChatMessage> getSentMessages();
-    
+
     ChatMessage getMessageById(String id);
 
     enum Role {
         ADMIN, USER;
-        
+
         public static Role getByName(String name) {
             return name.equalsIgnoreCase("admin") ? ADMIN : USER;
         }
