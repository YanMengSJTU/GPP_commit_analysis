diff --git a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java b/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
index ba24828..2152223 100644
--- a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
+++ b/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
@@ -3,10 +3,16 @@
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Text;
 
+/**
+ * Represents a single message sent in a group
+ * 
+ * @author samczsun
+ */
 public interface ChatMessage {
+    
     public String getClientId();
 
-    public String getMessage();
+    public String getText();
 
     public long getTime();
 
@@ -14,5 +20,7 @@
 
     public void edit(Text newMessage) throws SkypeException;
 
+    public void delete() throws SkypeException;
+
     public Chat getChat();
 }
diff --git a/src/main/java/com/samczsun/skype4j/chat/User.java b/src/main/java/com/samczsun/skype4j/chat/User.java
index 0cb4afe..2495572 100644
--- a/src/main/java/com/samczsun/skype4j/chat/User.java
+++ b/src/main/java/com/samczsun/skype4j/chat/User.java
@@ -1,6 +1,5 @@
 package com.samczsun.skype4j.chat;
 
-
 public interface User {
     public String getUsername();
 
@@ -14,9 +13,9 @@
 
     public static enum Role {
         ADMIN, USER;
-
-        public boolean isAdmin() {
-            return this == ADMIN;
+        
+        public static Role getByName(String name) {
+            return name.equalsIgnoreCase("admin") ? ADMIN : USER;
         }
     }
 }
diff --git a/src/main/java/com/samczsun/skype4j/events/SkypeEventDispatcher.java b/src/main/java/com/samczsun/skype4j/events/SkypeEventDispatcher.java
index 680d0aa..6c7c2a5 100644
--- a/src/main/java/com/samczsun/skype4j/events/SkypeEventDispatcher.java
+++ b/src/main/java/com/samczsun/skype4j/events/SkypeEventDispatcher.java
@@ -26,7 +26,17 @@ public void registerListener(Listener l) {
     }
 
     public void callEvent(Event e) {
-        List<RegisteredListener> methods = listeners.get(e.getClass());
+        List<RegisteredListener> methods = new ArrayList<>();
+        Class<?> eventClass = e.getClass();
+        while (true) {
+            if (listeners.containsKey(eventClass)) {
+                methods.addAll(listeners.get(eventClass));
+            }
+            eventClass = eventClass.getSuperclass();
+            if (eventClass == Event.class) {
+                break;
+            }
+        }
         if (methods != null) {
             for (RegisteredListener method : methods) {
                 try {
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/ChatJoinedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/ChatJoinedEvent.java
new file mode 100644
index 0000000..42bfcf9
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/chat/ChatJoinedEvent.java
@@ -0,0 +1,9 @@
+package com.samczsun.skype4j.events.chat;
+
+import com.samczsun.skype4j.chat.Chat;
+
+public class ChatJoinedEvent extends ChatEvent {
+    public ChatJoinedEvent(Chat c) {
+        super(c);
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java
new file mode 100644
index 0000000..7cbbb22
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java
@@ -0,0 +1,9 @@
+package com.samczsun.skype4j.events.chat.message;
+
+import com.samczsun.skype4j.chat.ChatMessage;
+
+public class MessageEditedEvent extends MessageEvent {
+    public MessageEditedEvent(ChatMessage message) {
+        super(message);
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserAddEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserAddEvent.java
new file mode 100644
index 0000000..f2cdea8
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserAddEvent.java
@@ -0,0 +1,19 @@
+package com.samczsun.skype4j.events.chat.user;
+
+import java.util.Collections;
+import java.util.List;
+
+import com.samczsun.skype4j.chat.User;
+
+public class MultiUserAddEvent extends UserAddEvent {
+    private List<User> allUsers;
+
+    public MultiUserAddEvent(List<User> users, User initiator) {
+        super(users.get(0), initiator);
+        allUsers = users;
+    }
+    
+    public List<User> getAllUsers() {
+        return Collections.unmodifiableList(allUsers);
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserRemoveEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserRemoveEvent.java
new file mode 100644
index 0000000..b5dadb4
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserRemoveEvent.java
@@ -0,0 +1,19 @@
+package com.samczsun.skype4j.events.chat.user;
+
+import java.util.Collections;
+import java.util.List;
+
+import com.samczsun.skype4j.chat.User;
+
+public class MultiUserRemoveEvent extends UserRemoveEvent {
+    private List<User> allUsers;
+
+    public MultiUserRemoveEvent(List<User> users, User initiator) {
+        super(users.get(0), initiator);
+        allUsers = users;
+    }
+    
+    public List<User> getAllUsers() {
+        return Collections.unmodifiableList(allUsers);
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/UserAddEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/UserAddEvent.java
index 533e235..e65cba8 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/UserAddEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/UserAddEvent.java
@@ -3,7 +3,14 @@
 import com.samczsun.skype4j.chat.User;
 
 public class UserAddEvent extends UserEvent {
-    public UserAddEvent(User user) {
+    private User initiator;
+    
+    public UserAddEvent(User user, User initiator) {
         super(user);
+        this.initiator = initiator;
+    }
+    
+    public User getInitiator() {
+        return this.initiator;
     }
 }
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/UserEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/UserEvent.java
index c810ac6..60bf10a 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/UserEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/UserEvent.java
@@ -8,6 +8,7 @@
     
     public UserEvent(User user) {
         super(user.getChat());
+        this.user = user;
     }
     
     public User getUser() {
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/UserRemoveEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/UserRemoveEvent.java
index 4170549..e5aa6f7 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/UserRemoveEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/UserRemoveEvent.java
@@ -3,7 +3,14 @@
 import com.samczsun.skype4j.chat.User;
 
 public class UserRemoveEvent extends UserEvent {
-    public UserRemoveEvent(User user) {
+    private User initiator;
+    
+    public UserRemoveEvent(User user, User initiator) {
         super(user);
+        this.initiator = initiator;
+    }
+    
+    public User getInitiator() {
+        return this.initiator;
     }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/web/MessageType.java b/src/main/java/com/samczsun/skype4j/internal/web/MessageType.java
new file mode 100644
index 0000000..74f72b0
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/internal/web/MessageType.java
@@ -0,0 +1,282 @@
+package com.samczsun.skype4j.internal.web;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.apache.commons.lang3.StringEscapeUtils;
+import org.jsoup.Jsoup;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Parser;
+
+import com.google.gson.JsonObject;
+import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.chat.User;
+import com.samczsun.skype4j.chat.User.Role;
+import com.samczsun.skype4j.events.chat.ChatJoinedEvent;
+import com.samczsun.skype4j.events.chat.TopicChangeEvent;
+import com.samczsun.skype4j.events.chat.message.MessageReceivedEvent;
+import com.samczsun.skype4j.events.chat.user.MultiUserAddEvent;
+import com.samczsun.skype4j.events.chat.user.MultiUserRemoveEvent;
+import com.samczsun.skype4j.events.chat.user.RoleUpdateEvent;
+import com.samczsun.skype4j.events.chat.user.UserAddEvent;
+import com.samczsun.skype4j.events.chat.user.UserRemoveEvent;
+import com.samczsun.skype4j.exceptions.SkypeException;
+
+public enum MessageType {
+    UNKNOWN("Unknown") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+
+        }
+    },
+    TEXT("Text") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) throws SkypeException {
+            MessageType.RICH_TEXT.handle(skype, resource);
+        }
+    },
+    RICH_TEXT("RichText") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) throws SkypeException {
+            if (resource.has("clientmessageid")) { //New message
+                String clientId = resource.get("clientmessageid").getAsString();
+                String id = resource.get("id").getAsString();
+                String content = resource.get("content").getAsString();
+                String from = resource.get("from").getAsString();
+                String url = resource.get("conversationLink").getAsString();
+                Chat c = getChat(url, skype);
+                User u = getUser(from, c);
+                ChatMessage m = WebChatMessage.createMessage(c, u, id, clientId, System.currentTimeMillis(), stripMetadata(content));
+                MessageReceivedEvent evnt = new MessageReceivedEvent(m);
+                skype.getEventDispatcher().callEvent(evnt);
+            } else if (resource.has("skypeeditedid")) { //Edited message
+                String clientId = resource.get("skypeeditedid").getAsString();
+                String id = resource.get("id").getAsString();
+                String content = resource.get("content").getAsString();
+                content = content.substring("Edited previous message: ".length());
+                content = stripMetadata(content);
+                String from = resource.get("from").getAsString();
+                String url = resource.get("conversationLink").getAsString();
+                Chat c = getChat(url, skype);
+                User u = getUser(from, c);
+                //TODO: Actually fire the event - there's no API in place to store chatmessages yet
+                //                ChatMessage m = WebChatMessage.createMessage(c, c.getUser(from), id, clientId, System.currentTimeMillis(), resource.get("content").getAsString());
+                //                MessageEditedEvent evnt = new MessageEditedEvent(m);
+                //                skype.getEventDispatcher().callEvent(evnt);
+            } else {
+                throw new SkypeException("Had no id");
+            }
+        }
+    },
+    RICH_TEXT_CONTACTS("RichText/Contacts") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+        }
+    },
+    RICH_TEXT_FILES("RichText/Files") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+        }
+    },
+    RICH_TEXT_SMS("RichText/Sms") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+        }
+    },
+    RICH_TEXT_LOCATION("RichText/Location") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+        }
+    },
+    RICH_TEXT_URI_OBJECT("RichText/UriObject") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+        }
+    },
+    RICH_TEXT_MEDIA_FLIK_MSG("RichText/Media_FlikMsg") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+        }
+    },
+    EVENT_SKYPE_VIDEO_MESSAGE("Event/SkypeVideoMessage") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+        }
+    },
+    THREAD_ACTIVITY_ADD_MEMBER("ThreadActivity/AddMember") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+            String url = resource.get("conversationLink").getAsString();
+            Chat c = getChat(url, skype);
+            List<User> usersAdded = new ArrayList<>();
+            Document xml = Jsoup.parse(resource.get("content").getAsString(), "", Parser.xmlParser());
+            User initiator = c.getUser(xml.getElementsByTag("initiator").get(0).text());
+            for (Element e : xml.getElementsByTag("target")) {
+                String username = e.text().substring(2);
+                if (username.equals(skype.getUsername())) {
+                    ChatJoinedEvent event = new ChatJoinedEvent(c);
+                    skype.getEventDispatcher().callEvent(event);
+                } else {
+                    usersAdded.add(c.getUser(username));
+                }
+                ((WebChat) c).addUser(username);
+            }
+            UserAddEvent event = null;
+            if (usersAdded.size() == 1) {
+                event = new UserAddEvent(usersAdded.get(0), initiator);
+            } else {
+                event = new MultiUserAddEvent(usersAdded, initiator);
+            }
+            skype.getEventDispatcher().callEvent(event);
+        }
+    },
+    THREAD_ACTIVITY_DELETE_MEMBER("ThreadActivity/DeleteMember") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+            String url = resource.get("conversationLink").getAsString();
+            Chat c = getChat(url, skype);
+            List<User> usersRemoved = new ArrayList<>();
+            Document xml = Jsoup.parse(resource.get("content").getAsString(), "", Parser.xmlParser());
+            User initiator = c.getUser(xml.getElementsByTag("initiator").get(0).text());
+            for (Element e : xml.getElementsByTag("target")) {
+                String username = e.text().substring(2);
+                usersRemoved.add(c.getUser(username));
+                ((WebChat) c).removeUser(username);
+            }
+            UserRemoveEvent event = null;
+            if (usersRemoved.size() == 1) {
+                event = new UserRemoveEvent(usersRemoved.get(0), initiator);
+            } else {
+                event = new MultiUserRemoveEvent(usersRemoved, initiator);
+            }
+            skype.getEventDispatcher().callEvent(event);
+        }
+    },
+    THREAD_ACTIVITY_ROLE_UPDATE("ThreadActivity/RoleUpdate") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+            String url = resource.get("conversationLink").getAsString();
+            Chat c = getChat(url, skype);
+            Document xml = Jsoup.parse(resource.get("content").getAsString(), "", Parser.xmlParser());
+            User target = c.getUser(xml.getElementsByTag("id").get(0).text().substring(2));
+            Role role = Role.getByName(xml.getElementsByTag("role").get(0).text());
+            target.setRole(role);
+            RoleUpdateEvent e = new RoleUpdateEvent(target);
+            skype.getEventDispatcher().callEvent(e);
+        }
+    },
+    THREAD_ACTIVITY_TOPIC_UPDATE("ThreadActivity/TopicUpdate") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+            String url = resource.get("conversationLink").getAsString();
+            Chat c = getChat(url, skype);
+            Document xml = Jsoup.parse(resource.get("content").getAsString(), "", Parser.xmlParser());
+            if (xml.getElementsByTag("value").size() > 0) {
+                ((WebChatGroup) c).updateTopic(StringEscapeUtils.unescapeHtml4(xml.getElementsByTag("value").get(0).text()));
+            } else {
+                ((WebChatGroup) c).updateTopic("");
+            }
+            TopicChangeEvent e = new TopicChangeEvent(c);
+            skype.getEventDispatcher().callEvent(e);
+        }
+    },
+    THREAD_ACTIVITY_PICTURE_UPDATE("ThreadActivity/PictureUpdate") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+        }
+    },
+    THREAD_ACTIVITY_HISTORY_DISCLOSED_UPDATE("ThreadActivity/HistoryDisclosedUpdate") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+        }
+    },
+    THREAD_ACTIVITY_JOINING_ENABLED_UPDATE("ThreadActivity/JoiningEnabledUpdate") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+        }
+    },
+    THREAD_ACTIVITY_LEGACY_MEMBER_ADDED("ThreadActivity/LegacyMemberAdded") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+        }
+    },
+    THREAD_ACTIVITY_LEGACY_MEMBER_UPGRADED("ThreadActivity/LegacyMemberUpgraded") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+        }
+    },
+    EVENT_CALL("Event/Call") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+        }
+    },
+    CONTROL_TYPING("Control/Typing") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+        }
+    },
+    CONTROL_CLEAR_TYPING("Control/ClearTyping") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+        }
+    },
+    CONTROL_LIVE_STATE("Control/LiveState") {
+        @Override
+        public void handle(WebSkype skype, JsonObject resource) {
+        }
+    };
+
+    private static final Map<String, MessageType> byValue = new HashMap<>();
+    private static final Pattern URL_PATTERN = Pattern.compile("conversations\\/(.*)");
+    private static final Pattern USER_PATTERN = Pattern.compile("8:(.*)");
+    private static final Pattern STRIP_EDIT_PATTERN = Pattern.compile("<\\/?[e_m][^<>]+>");
+    private static final Pattern STRIP_QUOTE_PATTERN = Pattern.compile("(<(?:\\/?)(?:quote|legacyquote)[^>]*>)", Pattern.CASE_INSENSITIVE);
+
+    private String value;
+
+    MessageType(String value) {
+        this.value = value;
+    }
+
+    public String getValue() {
+        return this.value;
+    }
+
+    public abstract void handle(WebSkype skype, JsonObject resource) throws SkypeException;
+
+    static {
+        for (MessageType type : values()) {
+            byValue.put(type.getValue(), type);
+        }
+    }
+
+    public static MessageType getByName(String messageType) {
+        return byValue.containsKey(messageType) ? byValue.get(messageType) : UNKNOWN;
+    }
+
+    private static Chat getChat(String url, WebSkype skype) {
+        Matcher m = URL_PATTERN.matcher(url);
+        if (m.find()) {
+            return skype.getChat(m.group(1));
+        }
+        return null;
+    }
+
+    private static User getUser(String url, Chat c) {
+        Matcher m = USER_PATTERN.matcher(url);
+        if (m.find()) {
+            return c.getUser(m.group(1));
+        }
+        return null;
+    }
+
+    private static String stripMetadata(String message) {
+        return STRIP_QUOTE_PATTERN.matcher(STRIP_EDIT_PATTERN.matcher(message).replaceAll("")).replaceAll("");
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/internal/web/ResourceType.java b/src/main/java/com/samczsun/skype4j/internal/web/ResourceType.java
new file mode 100644
index 0000000..1c5f603
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/internal/web/ResourceType.java
@@ -0,0 +1,5 @@
+package com.samczsun.skype4j.internal.web;
+
+public class ResourceType {
+
+}
diff --git a/src/main/java/com/samczsun/skype4j/internal/web/WebOtherChatMessage.java b/src/main/java/com/samczsun/skype4j/internal/web/WebOtherChatMessage.java
index 5615de0..9dd818c 100644
--- a/src/main/java/com/samczsun/skype4j/internal/web/WebOtherChatMessage.java
+++ b/src/main/java/com/samczsun/skype4j/internal/web/WebOtherChatMessage.java
@@ -3,6 +3,7 @@
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.chat.ChatMessage;
 import com.samczsun.skype4j.chat.User;
+import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Text;
 
 public class WebOtherChatMessage implements ChatMessage {
@@ -24,7 +25,7 @@ public String getClientId() {
     }
 
     @Override
-    public String getMessage() {
+    public String getText() {
         return message;
     }
 
@@ -47,4 +48,9 @@ public void edit(Text newMessage) {
     public Chat getChat() {
         return sender.getChat();
     }
+
+    @Override
+    public void delete() throws SkypeException {
+        throw new UnsupportedOperationException();
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/web/WebSelfChatMessage.java b/src/main/java/com/samczsun/skype4j/internal/web/WebSelfChatMessage.java
index 34ba16f..5a3ac6d 100644
--- a/src/main/java/com/samczsun/skype4j/internal/web/WebSelfChatMessage.java
+++ b/src/main/java/com/samczsun/skype4j/internal/web/WebSelfChatMessage.java
@@ -10,6 +10,7 @@
 import com.samczsun.skype4j.chat.ChatMessage;
 import com.samczsun.skype4j.chat.User;
 import com.samczsun.skype4j.exceptions.SkypeException;
+import com.samczsun.skype4j.formatting.Message;
 import com.samczsun.skype4j.formatting.Text;
 
 public class WebSelfChatMessage implements ChatMessage {
@@ -31,7 +32,7 @@ public String getClientId() {
     }
 
     @Override
-    public String getMessage() {
+    public String getText() {
         return message;
     }
 
@@ -67,6 +68,11 @@ public void edit(Text newMessage) throws SkypeException {
             throw new SkypeException("An exception occured while editing a message", e);
         }
     }
+    
+    @Override
+    public void delete() throws SkypeException {
+        edit(Message.text(""));
+    }
 
     @Override
     public Chat getChat() {
diff --git a/src/main/java/com/samczsun/skype4j/internal/web/WebSkype.java b/src/main/java/com/samczsun/skype4j/internal/web/WebSkype.java
index c59d03d..c8b5463 100644
--- a/src/main/java/com/samczsun/skype4j/internal/web/WebSkype.java
+++ b/src/main/java/com/samczsun/skype4j/internal/web/WebSkype.java
@@ -16,12 +16,9 @@
 import java.util.concurrent.Executors;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
 
 import javax.net.ssl.HttpsURLConnection;
 
-import org.apache.commons.lang3.StringEscapeUtils;
 import org.jsoup.Connection.Method;
 import org.jsoup.Connection.Response;
 import org.jsoup.Jsoup;
@@ -37,15 +34,9 @@
 import com.samczsun.skype4j.Skype;
 import com.samczsun.skype4j.StreamUtils;
 import com.samczsun.skype4j.chat.Chat;
-import com.samczsun.skype4j.chat.ChatMessage;
-import com.samczsun.skype4j.chat.User.Role;
 import com.samczsun.skype4j.events.EventDispatcher;
 import com.samczsun.skype4j.events.SkypeEventDispatcher;
-import com.samczsun.skype4j.events.chat.TopicChangeEvent;
-import com.samczsun.skype4j.events.chat.message.MessageReceivedEvent;
-import com.samczsun.skype4j.events.chat.user.RoleUpdateEvent;
-import com.samczsun.skype4j.events.chat.user.UserAddEvent;
-import com.samczsun.skype4j.events.chat.user.UserRemoveEvent;
+import com.samczsun.skype4j.events.chat.ChatJoinedEvent;
 import com.samczsun.skype4j.exceptions.SkypeException;
 
 public class WebSkype implements Skype {
@@ -55,12 +46,6 @@
     private static final String MESSAGINGSERVICE_URL = "https://client-s.gateway.messenger.live.com/v1/users/ME/endpoints/%s/presenceDocs/messagingService";
     private static final String LOGOUT_URL = "https://login.skype.com/logout?client_id=578134&redirect_uri=https%3A%2F%2Fweb.skype.com&intsrc=client-_-webapp-_-production-_-go-signin";
 
-    private static final Pattern TARGET_PATTERN = Pattern.compile("<target>8:([^<]*)<\\/target>");
-    private static final Pattern ID_PATTERN = Pattern.compile("<id>8:([^<]*)<\\/id><role>([^<]*)<\\/role>");
-    private static final Pattern VALUE_PATTERN = Pattern.compile("<value>([^<]*)<\\/value>");
-    private static final Pattern URL_PATTERN = Pattern.compile("conversations\\/(.*)");
-    private static final Pattern USER_PATTERN = Pattern.compile("8:(.*)");
-
     private final Map<String, String> cookies = new HashMap<>();
     private final String skypeToken;
     private final String registrationToken;
@@ -73,9 +58,7 @@
     private Thread pollThread;
 
     private final ExecutorService scheduler = Executors.newFixedThreadPool(16);
-
     private final Logger logger = Logger.getLogger("webskype");
-
     private final Map<String, Chat> allChats = new ConcurrentHashMap<>();
 
     public WebSkype(String username, String password) throws SkypeException {
@@ -160,7 +143,7 @@ public void run() {
 
     public void subscribe() throws IOException {
         Gson gson = new Gson();
-        
+
         HttpsURLConnection subscribe = (HttpsURLConnection) new URL(SUBSCRIPTIONS_URL).openConnection();
         subscribe.setRequestMethod("POST");
         subscribe.setDoOutput(true);
@@ -176,7 +159,7 @@ public void subscribe() throws IOException {
         registerEndpoint.setRequestProperty("Content-Type", "application/json");
         registerEndpoint.getOutputStream().write(gson.toJson(buildRegistrationObject()).getBytes());
         registerEndpoint.getInputStream();
-        
+
         pollThread = new Thread() {
             public void run() {
                 try {
@@ -197,89 +180,46 @@ public void run() {
                                 final JsonObject message = gson.fromJson(json, JsonObject.class);
                                 scheduler.execute(new Runnable() {
                                     public void run() {
-                                        if (message.has("eventMessages")) {
+                                        try {
                                             JsonArray arr = message.get("eventMessages").getAsJsonArray();
-                                            for (JsonElement event : arr) {
-                                                JsonObject eventObj = event.getAsJsonObject();
+                                            for (JsonElement elem : arr) {
+                                                JsonObject eventObj = elem.getAsJsonObject();
                                                 String resourceType = eventObj.get("resourceType").getAsString();
-                                                if (eventObj.get("resourceType").getAsString().equals("NewMessage")) {
+                                                if (resourceType.equals("NewMessage")) {
                                                     JsonObject resource = eventObj.get("resource").getAsJsonObject();
                                                     String messageType = resource.get("messagetype").getAsString();
-                                                    if (resource.get("messagetype").getAsString().equals("RichText") || resource.get("messagetype").getAsString().equals("Text")) {
-                                                        try {
-                                                            String clientid = resource.has("clientmessageid") ? resource.get("clientmessageid").getAsString() : resource.get("skypeeditedid").getAsString();
-                                                            String id = resource.get("id").getAsString();
-                                                            String from = getUser(resource.get("from").getAsString());
-                                                            String url = resource.get("conversationLink").getAsString();
-                                                            Chat c = fromUrl(url);
-                                                            ChatMessage m = WebChatMessage.createMessage(c, c.getUser(from), id, clientid, System.currentTimeMillis(), resource.get("content").getAsString());
-                                                            MessageReceivedEvent evnt = new MessageReceivedEvent(m);
-                                                            eventDispatcher.callEvent(evnt);
-                                                        } catch (NullPointerException e) {
-                                                            logger.log(Level.SEVERE, "An NPE occured while parsing a message");
-                                                            logger.log(Level.SEVERE, message.toString());
-                                                        }
-                                                    } else if (resource.get("messagetype").getAsString().equals("ThreadActivity/AddMember")) {
-                                                        String content = resource.get("content").getAsString();
-                                                        Matcher m = TARGET_PATTERN.matcher(content);
-                                                        m.find();
-                                                        String target = m.group(1);
-                                                        String url = resource.get("conversationLink").getAsString();
-                                                        Chat c = fromUrl(url);
-                                                        ((WebChat) c).addUser(target);
-                                                        UserAddEvent e = new UserAddEvent(c.getUser(target));
-                                                        eventDispatcher.callEvent(e);
-                                                    } else if (resource.get("messagetype").getAsString().equals("ThreadActivity/DeleteMember")) {
-                                                        String content = resource.get("content").getAsString();
-                                                        Matcher m = TARGET_PATTERN.matcher(content);
-                                                        m.find();
-                                                        String target = m.group(1);
-                                                        String url = resource.get("conversationLink").getAsString();
-                                                        Chat c = fromUrl(url);
-                                                        ((WebChat) c).removeUser(target);
-                                                        UserRemoveEvent e = new UserRemoveEvent(c.getUser(target));
-                                                        eventDispatcher.callEvent(e);
-                                                    } else if (resource.get("messagetype").getAsString().equals("ThreadActivity/RoleUpdate")) {
-                                                        String content = resource.get("content").getAsString();
-                                                        Matcher m = ID_PATTERN.matcher(content);
-                                                        m.find();
-                                                        String target = m.group(1);
-                                                        String role = m.group(2);
-                                                        String url = resource.get("conversationLink").getAsString();
-                                                        Chat c = fromUrl(url);
-                                                        ((WebChat) c).getUser(target).setRole(role.equals("admin") ? Role.ADMIN : Role.USER);
-                                                        RoleUpdateEvent e = new RoleUpdateEvent(c.getUser(target));
-                                                        eventDispatcher.callEvent(e);
-                                                    } else if (messageType.equalsIgnoreCase("Control/Typing")) {
-                                                    } else if (messageType.equalsIgnoreCase("Control/ClearTyping")) {
-                                                    } else if (messageType.equalsIgnoreCase("Control/LiveState")) {
-                                                    } else if (messageType.equalsIgnoreCase("ThreadActivity/TopicUpdate")) {
-                                                        String content = resource.get("content").getAsString();
-                                                        Matcher m = VALUE_PATTERN.matcher(content);
-                                                        String url = resource.get("conversationLink").getAsString();
-                                                        Chat c = fromUrl(url);
-                                                        if (c instanceof WebChatGroup) {
-                                                            if (m.find()) {
-                                                                ((WebChatGroup) c).updateTopic(StringEscapeUtils.unescapeHtml4(m.group(1)));
-                                                            } else {
-                                                                ((WebChatGroup) c).updateTopic("");
-                                                            }
-                                                            TopicChangeEvent e = new TopicChangeEvent(c);
-                                                            eventDispatcher.callEvent(e);
-                                                        }
-                                                    } else {
-                                                        logger.severe("Unhandled messageType " + messageType);
-                                                        logger.severe(eventObj.toString());
+                                                    MessageType type = MessageType.getByName(messageType);
+                                                    try {
+                                                        type.handle(WebSkype.this, resource);
+                                                    } catch (SkypeException e) {
+                                                        e.printStackTrace();
                                                     }
                                                 } else if (resourceType.equalsIgnoreCase("EndpointPresence")) {
                                                 } else if (resourceType.equalsIgnoreCase("UserPresence")) {
-                                                } else if (resourceType.equalsIgnoreCase("ConversationUpdate")) {
+                                                } else if (resourceType.equalsIgnoreCase("ConversationUpdate")) { //Not sure what this does
                                                 } else if (resourceType.equalsIgnoreCase("ThreadUpdate")) {
+                                                    JsonObject resource = eventObj.get("resource").getAsJsonObject();
+                                                    String chatId = resource.get("id").getAsString();
+                                                    Chat chat = getChat(chatId);
+                                                    if (chat == null) {
+                                                        chat = WebChat.createChat(WebSkype.this, chatId);
+                                                        try {
+                                                            chat.updateUsers();
+                                                        } catch (SkypeException e) {
+                                                            e.printStackTrace();
+                                                        }
+                                                        allChats.put(chatId, chat);
+                                                        ChatJoinedEvent e = new ChatJoinedEvent(chat);
+                                                        eventDispatcher.callEvent(e);
+                                                    }
                                                 } else {
                                                     logger.severe("Unhandled resourceType " + resourceType);
                                                     logger.severe(eventObj.toString());
                                                 }
                                             }
+                                        } catch (Exception e) {
+                                            logger.log(Level.SEVERE, "Exception while handling message", e);
+                                            logger.log(Level.SEVERE, message.toString());
                                         }
                                     }
                                 });
@@ -324,22 +264,6 @@ public EventDispatcher getEventDispatcher() {
         return this.eventDispatcher;
     }
 
-    private Chat fromUrl(String url) {
-        Matcher m = URL_PATTERN.matcher(url);
-        if (m.find()) {
-            return allChats.get(m.group(1));
-        }
-        return null;
-    }
-
-    private String getUser(String url) {
-        Matcher m = USER_PATTERN.matcher(url);
-        if (m.find()) {
-            return m.group(1);
-        }
-        return null;
-    }
-
     private Response postToLogin(String username, String password) throws IOException {
         Map<String, String> data = new HashMap<>();
         Document loginDocument = Jsoup.connect(LOGIN_URL).get();
@@ -367,7 +291,7 @@ private JsonObject buildSubscriptionObject() {
         subscriptionObject.add("interestedResources", interestedResources);
         return subscriptionObject;
     }
-    
+
     private JsonObject buildRegistrationObject() {
         JsonObject registrationObject = new JsonObject();
         registrationObject.addProperty("id", "messagingService");
diff --git a/src/test/java/com/samczsun/skype4j/Test.java b/src/test/java/com/samczsun/skype4j/Test.java
index 909d75b..fd3af2d 100644
--- a/src/test/java/com/samczsun/skype4j/Test.java
+++ b/src/test/java/com/samczsun/skype4j/Test.java
@@ -3,9 +3,15 @@
 import java.io.FileInputStream;
 
 import com.samczsun.skype4j.PendingLogin.Client;
+import com.samczsun.skype4j.chat.User;
 import com.samczsun.skype4j.events.EventHandler;
 import com.samczsun.skype4j.events.Listener;
+import com.samczsun.skype4j.events.chat.ChatJoinedEvent;
+import com.samczsun.skype4j.events.chat.TopicChangeEvent;
 import com.samczsun.skype4j.events.chat.message.MessageReceivedEvent;
+import com.samczsun.skype4j.events.chat.user.MultiUserAddEvent;
+import com.samczsun.skype4j.events.chat.user.RoleUpdateEvent;
+import com.samczsun.skype4j.events.chat.user.UserAddEvent;
 
 public class Test {
     public static void main(String[] args) throws Exception {
@@ -14,7 +20,34 @@ public static void main(String[] args) throws Exception {
         skype.getEventDispatcher().registerListener(new Listener() {
             @EventHandler
             public void onUserAdd(MessageReceivedEvent e) {
-                System.out.println("Got message " + e.getMessage().getMessage() + " in " + e.getChat().getIdentity());
+                System.out.println("Got message " + e.getMessage().getText() + " in " + e.getChat().getIdentity());
+            }
+
+            @EventHandler
+            public void onTopicChange(TopicChangeEvent e) {
+                System.out.println("Topic changed in " + e.getChat().getIdentity());
+            }
+
+            @EventHandler
+            public void onUserAdd(UserAddEvent e) {
+                if (e instanceof MultiUserAddEvent) {
+                    System.out.println("Users added in " + e.getChat().getIdentity() + ":");
+                    for (User u : ((MultiUserAddEvent) e).getAllUsers()) {
+                        System.out.println(u.getUsername());
+                    }
+                } else {
+                    System.out.println("User " + e.getUser().getUsername() + " added in " + e.getChat().getIdentity());
+                }
+            }
+
+            @EventHandler
+            public void onRoleUpdate(RoleUpdateEvent e) {
+                System.out.println(e.getUser().getUsername() + "'s role updated in " + e.getChat().getIdentity());
+            }
+
+            @EventHandler
+            public void onChatJoin(ChatJoinedEvent e) {
+                System.out.println("Joined new chat " + e.getChat().getIdentity());
             }
         });
         skype.subscribe();
