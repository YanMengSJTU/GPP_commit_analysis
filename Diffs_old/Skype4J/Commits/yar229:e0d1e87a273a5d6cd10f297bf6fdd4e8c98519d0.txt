diff --git a/.gitignore b/.gitignore
index aafc626..b6c452c 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,6 +2,7 @@
 /target/
 /scripts/
 /src/other
+/docs
 .settings/
 .idea/
 .classpath
diff --git a/src/main/java/com/samczsun/skype4j/Skype.java b/src/main/java/com/samczsun/skype4j/Skype.java
index ebe9de5..b989619 100644
--- a/src/main/java/com/samczsun/skype4j/Skype.java
+++ b/src/main/java/com/samczsun/skype4j/Skype.java
@@ -1,6 +1,24 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j;
 
 import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.chat.GroupChat;
 import com.samczsun.skype4j.events.EventDispatcher;
 import com.samczsun.skype4j.exceptions.ChatNotFoundException;
 import com.samczsun.skype4j.exceptions.ConnectionException;
@@ -13,15 +31,18 @@
 import java.util.Collection;
 import java.util.logging.Logger;
 
+/**
+ * This class represents a single Skype account, which may or may not have been logged in
+ */
 public abstract class Skype {
 
     /**
-     * Subscribe to the HTTP long polling service. This will start reading
-     * events from Skype and calling events within this API
+     * Subscribe to the HTTP long polling service
+     * This will start reading events from Skype and calling events within this API
      *
-     * @throws IOException Thrown if any internal operations go wrong
+     * @throws IOException If an connection error occurs during subscription
      */
-    public abstract void subscribe() throws IOException;
+    public abstract void subscribe() throws ConnectionException;
 
     /**
      * Get the username of the account logged in
@@ -31,20 +52,27 @@
     public abstract String getUsername();
 
     /**
-     * Get a chat based on the identity given. If no chat is found, null will be returned
+     * Get a {@link Chat} based on the identity given. The chat must already be loaded
+     * The identity is a Skype-assigned id that begins with {@code 19:} or {@code 8:}
      *
      * @param name The identity of the chat
-     * @return The {@link Chat Chat} object, or null if not found
+     * @return The {@link Chat}, or null if not found
      */
     public abstract Chat getChat(String name);
 
     /**
-     * Load a chat given an identity
+     * Load a {@link Chat} given an identity
+     * The identity is a Skype-assigned id that begins with {@code 19:} or {@code 8:}
+     *
+     * @param name The identity of the chat
+     * @return The newly loaded {@link Chat}
+     * @throws ConnectionException If an error occurs during connection
+     * @throws ChatNotFoundException If this skype account is not a member of the chat
      */
     public abstract Chat loadChat(String name) throws ConnectionException, ChatNotFoundException;
 
     /**
-     * Get a contact based on the username. If no contact is found, null will be returned
+     * Get a contact based on the username. The contact must already be loaded
      *
      * @param username The username of the contact
      * @return The {@link Contact Contact} object, or null if not found
@@ -62,6 +90,7 @@
 
     /**
      * Get a contact, and if said contact doesn't exist, load it
+     *
      * @param username The username of the contact
      * @return The contact
      * @throws ConnectionException If an exception occured while fetching contact details
@@ -111,4 +140,15 @@
      * @return The Logger
      */
     public abstract Logger getLogger();
+
+    /**
+     * Create a new group chat with the selected contacts. You will be automatically added to the group
+     * If an error occurs while creating the chat, an {@link ConnectionException} or an {@link ChatNotFoundException} will be thrown
+     *
+     * @param contacts The contacts to add
+     * @return The newly created group chat
+     * @throws ConnectionException
+     * @throws ChatNotFoundException
+     */
+    public abstract GroupChat createGroupChat(Contact... contacts) throws ConnectionException, ChatNotFoundException;
 }
diff --git a/src/main/java/com/samczsun/skype4j/SkypeBuilder.java b/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
index 8933daa..31322ab 100644
--- a/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
+++ b/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j;
 
 import com.samczsun.skype4j.internal.SkypeImpl;
diff --git a/src/main/java/com/samczsun/skype4j/StreamUtils.java b/src/main/java/com/samczsun/skype4j/StreamUtils.java
index 01e7477..bc8ff13 100644
--- a/src/main/java/com/samczsun/skype4j/StreamUtils.java
+++ b/src/main/java/com/samczsun/skype4j/StreamUtils.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j;
 
 import java.io.ByteArrayInputStream;
diff --git a/src/main/java/com/samczsun/skype4j/chat/Chat.java b/src/main/java/com/samczsun/skype4j/chat/Chat.java
index 9ab73b0..6c23217 100644
--- a/src/main/java/com/samczsun/skype4j/chat/Chat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/Chat.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.chat;
 
 import com.samczsun.skype4j.exceptions.SkypeException;
diff --git a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java b/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
index 6302dc4..c2e0a00 100644
--- a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
+++ b/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.chat;
 
 import com.samczsun.skype4j.formatting.Message;
diff --git a/src/main/java/com/samczsun/skype4j/chat/GroupChat.java b/src/main/java/com/samczsun/skype4j/chat/GroupChat.java
index 4cb1af7..0edad82 100644
--- a/src/main/java/com/samczsun/skype4j/chat/GroupChat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/GroupChat.java
@@ -1,6 +1,26 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.chat;
 
-import com.samczsun.skype4j.exceptions.SkypeException;
+import com.samczsun.skype4j.events.chat.user.action.OptionUpdateEvent;
+import com.samczsun.skype4j.exceptions.ConnectionException;
+import com.samczsun.skype4j.exceptions.NotLoadedException;
+import com.samczsun.skype4j.user.Contact;
 
 /**
  * Represents a group chat with one or more people
@@ -10,31 +30,89 @@
 public interface GroupChat extends Chat {
     /**
      * Get the topic of the chat.
+     * If the chat is not loaded a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} will be thrown
      *
-     * @return The topic
+     * @return The topic of this chat
+     * @throws NotLoadedException
      */
     String getTopic();
 
     /**
-     * Set the topic of the chat. This will update it in real time
+     * Set the topic of the chat. This will occur in real time.
+     * If an exception occurs while connecting updating the topic, a {@link com.samczsun.skype4j.exceptions.ConnectionException ConnectionException} will be thrown
+     * If the chat is not loaded a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} will be thrown
      *
      * @param topic The topic
-     * @throws SkypeException
+     * @throws ConnectionException
+     * @throws NotLoadedException
+     */
+    void setTopic(String topic) throws ConnectionException;
+
+    /**
+     * Get whether an option is enabled.
+     * If the chat is not loaded a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} will be thrown
+     *
+     * @param option The option to query
+     * @return Whether the option is enabled
+     * @throws NotLoadedException
+     */
+    boolean isOptionEnabled(OptionUpdateEvent.Option option);
+
+    /**
+     * Set whether an option is enabled.
+     * If the option is already enabled and a request to enable it is sent or vice versa, it will be silently ignored
+     * If an exception occurs while setting the option, a {@link com.samczsun.skype4j.exceptions.ConnectionException ConnectionException} will be thrown
+     * If the chat is not loaded a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} will be thrown
+     *
+     * @param option The option to set
+     * @param enabled Whether to enable it or not
+     * @throws ConnectionException
+     * @throws NotLoadedException
      */
-    void setTopic(String topic) throws SkypeException;
+    void setOptionEnabled(OptionUpdateEvent.Option option, boolean enabled) throws ConnectionException;
 
     /**
-     * Kick a user from this chat
+     * Add a contact into this chat. This will occur in real time
+     * If an exception occurs while adding the user, a {@link com.samczsun.skype4j.exceptions.ConnectionException ConnectionException} will be thrown
+     * If the chat is not loaded a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} will be thrown
+     *
+     * @param contact The contact to add
+     * @throws ConnectionException
+     * @throws NotLoadedException
+     */
+    void add(Contact contact) throws ConnectionException;
+
+    /**
+     * Kick a user from this chat. This will occur in real time.
+     * If an exception occurs while kicking the user, a {@link com.samczsun.skype4j.exceptions.ConnectionException ConnectionException} will be thrown
+     * If the chat is not loaded a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} will be thrown
      *
      * @param username The username of the user to kick
-     * @throws SkypeException If the user is not in this chat, or if the kick failed
+     * @throws ConnectionException
+     * @throws NotLoadedException
+     */
+    void kick(String username) throws ConnectionException;
+
+    /**
+     * Leave the chat. This will occur in real time.
+     * If an exception occurs while leaving the chat, a {@link com.samczsun.skype4j.exceptions.ConnectionException ConnectionException} will be thrown
+     * If the chat is not loaded a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} will be thrown
+     *
+     * @throws ConnectionException
+     * @throws NotLoadedException
      */
-    void kick(String username) throws SkypeException;
+    void leave() throws ConnectionException;
 
     /**
-     * Leave the chat
+     * Gets the join url for people to join.
+     * If joining is not enabled, an {@link IllegalArgumentException} will be thrown
+     * If an exception occurs while getting the link, a {@link com.samczsun.skype4j.exceptions.ConnectionException ConnectionException} will be thrown
+     * If the chat is not loaded a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} will be thrown
      *
-     * @throws SkypeException If the leave failed
+     * @return The join url
+     * @throws ConnectionException
+     * @throws NotLoadedException
+     * @throws IllegalArgumentException
      */
-    void leave() throws SkypeException;
+    String getJoinUrl() throws ConnectionException;
 }
diff --git a/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java b/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java
index 3b6ec91..a0aada9 100644
--- a/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.chat;
 
 import com.samczsun.skype4j.user.User;
diff --git a/src/main/java/com/samczsun/skype4j/chat/ReceivedMessage.java b/src/main/java/com/samczsun/skype4j/chat/ReceivedMessage.java
index 5c8bbfb..e392c8a 100644
--- a/src/main/java/com/samczsun/skype4j/chat/ReceivedMessage.java
+++ b/src/main/java/com/samczsun/skype4j/chat/ReceivedMessage.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.chat;
 
 /**
diff --git a/src/main/java/com/samczsun/skype4j/chat/SentMessage.java b/src/main/java/com/samczsun/skype4j/chat/SentMessage.java
index 364096d..857586c 100644
--- a/src/main/java/com/samczsun/skype4j/chat/SentMessage.java
+++ b/src/main/java/com/samczsun/skype4j/chat/SentMessage.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.chat;
 
 import com.samczsun.skype4j.exceptions.SkypeException;
diff --git a/src/main/java/com/samczsun/skype4j/events/Event.java b/src/main/java/com/samczsun/skype4j/events/Event.java
index 835af76..cf0cb16 100644
--- a/src/main/java/com/samczsun/skype4j/events/Event.java
+++ b/src/main/java/com/samczsun/skype4j/events/Event.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events;
 
 public abstract class Event {
diff --git a/src/main/java/com/samczsun/skype4j/events/EventDispatcher.java b/src/main/java/com/samczsun/skype4j/events/EventDispatcher.java
index 1c52375..c2d0e64 100644
--- a/src/main/java/com/samczsun/skype4j/events/EventDispatcher.java
+++ b/src/main/java/com/samczsun/skype4j/events/EventDispatcher.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events;
 
 public interface EventDispatcher {
diff --git a/src/main/java/com/samczsun/skype4j/events/EventHandler.java b/src/main/java/com/samczsun/skype4j/events/EventHandler.java
index 194a818..60b40ff 100644
--- a/src/main/java/com/samczsun/skype4j/events/EventHandler.java
+++ b/src/main/java/com/samczsun/skype4j/events/EventHandler.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events;
 
 import java.lang.annotation.Retention;
diff --git a/src/main/java/com/samczsun/skype4j/events/Listener.java b/src/main/java/com/samczsun/skype4j/events/Listener.java
index 0b6a81c..7ac5a7b 100644
--- a/src/main/java/com/samczsun/skype4j/events/Listener.java
+++ b/src/main/java/com/samczsun/skype4j/events/Listener.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events;
 
 public interface Listener {
diff --git a/src/main/java/com/samczsun/skype4j/events/UnsupportedEvent.java b/src/main/java/com/samczsun/skype4j/events/UnsupportedEvent.java
index 7de49b9..d3254cf 100644
--- a/src/main/java/com/samczsun/skype4j/events/UnsupportedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/UnsupportedEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events;
 
 import com.samczsun.skype4j.chat.Chat;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/ChatEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/ChatEvent.java
index 04b71c0..d25f234 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/ChatEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/ChatEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat;
 
 import com.samczsun.skype4j.chat.Chat;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/ChatJoinedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/ChatJoinedEvent.java
index 42bfcf9..c2a898e 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/ChatJoinedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/ChatJoinedEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat;
 
 import com.samczsun.skype4j.chat.Chat;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/DisconnectedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/DisconnectedEvent.java
index 995a8ca..49da4ff 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/DisconnectedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/DisconnectedEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat;
 
 import com.samczsun.skype4j.events.Event;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/TopicChangeEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/TopicChangeEvent.java
deleted file mode 100644
index 31de0e3..0000000
--- a/src/main/java/com/samczsun/skype4j/events/chat/TopicChangeEvent.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package com.samczsun.skype4j.events.chat;
-
-import com.samczsun.skype4j.chat.Chat;
-
-public class TopicChangeEvent extends ChatEvent {
-    public TopicChangeEvent(Chat c) {
-        super(c);
-    }
-}
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/call/CallReceivedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/call/CallReceivedEvent.java
index c7dbfbc..fdbd696 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/call/CallReceivedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/call/CallReceivedEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat.call;
 
 import com.samczsun.skype4j.chat.Chat;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedByOtherEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedByOtherEvent.java
index a921088..d259cc0 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedByOtherEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedByOtherEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat.message;
 
 import com.samczsun.skype4j.chat.ChatMessage;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java
index 1188498..8c5ef06 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat.message;
 
 import com.samczsun.skype4j.chat.ChatMessage;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEvent.java
index 2001664..09c132e 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat.message;
 
 import com.samczsun.skype4j.chat.ChatMessage;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageReceivedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageReceivedEvent.java
index d9e0b44..4e3cfbe 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageReceivedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageReceivedEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat.message;
 
 import com.samczsun.skype4j.chat.ChatMessage;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/message/SmsReceivedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/message/SmsReceivedEvent.java
index 5fef92d..5791da3 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/message/SmsReceivedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/message/SmsReceivedEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat.message;
 
 import com.samczsun.skype4j.chat.ChatMessage;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/sent/ContactReceivedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/sent/ContactReceivedEvent.java
index 030d09b..a50ce03 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/sent/ContactReceivedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/sent/ContactReceivedEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat.sent;
 
 import com.samczsun.skype4j.chat.Chat;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/sent/FileInfoReceivedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/sent/FileInfoReceivedEvent.java
index b61ec76..fc9ccba 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/sent/FileInfoReceivedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/sent/FileInfoReceivedEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat.sent;
 
 import com.samczsun.skype4j.chat.Chat;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/sent/LocationReceivedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/sent/LocationReceivedEvent.java
index 8ec5682..473b1a2 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/sent/LocationReceivedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/sent/LocationReceivedEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat.sent;
 
 import com.samczsun.skype4j.chat.Chat;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/sent/MultiContactReceivedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/sent/MultiContactReceivedEvent.java
index 9bf00b1..d330c45 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/sent/MultiContactReceivedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/sent/MultiContactReceivedEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat.sent;
 
 import com.samczsun.skype4j.chat.Chat;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/sent/PictureReceivedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/sent/PictureReceivedEvent.java
index e6349b0..b02b104 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/sent/PictureReceivedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/sent/PictureReceivedEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat.sent;
 
 import com.samczsun.skype4j.chat.Chat;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/sent/TypingReceivedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/sent/TypingReceivedEvent.java
index ee25312..a275c69 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/sent/TypingReceivedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/sent/TypingReceivedEvent.java
@@ -1,28 +1,42 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat.sent;
 
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.events.chat.ChatEvent;
 import com.samczsun.skype4j.user.User;
 
-public class TypingReceivedEvent extends ChatEvent 
-{
+public class TypingReceivedEvent extends ChatEvent {
     private User sender;
-	private boolean typing;
+    private boolean typing;
 
-    public TypingReceivedEvent(Chat chat, User sender, boolean typing)
-	{
+    public TypingReceivedEvent(Chat chat, User sender, boolean typing) {
         super(chat);
         this.sender = sender;
-		this.typing = typing;
+        this.typing = typing;
     }
 
-    public User getSender()	{
+    public User getSender() {
         return this.sender;
     }
 
-	public boolean isTyping()
-	{
-		return this.typing;
-	}
+    public boolean isTyping() {
+        return this.typing;
+    }
 
 }
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserAddEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserAddEvent.java
index 46a8858..a28e3ca 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserAddEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/MultiUserAddEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat.user;
 
 import com.samczsun.skype4j.user.User;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/RoleUpdateEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/RoleUpdateEvent.java
deleted file mode 100644
index b0a14fd..0000000
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/RoleUpdateEvent.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package com.samczsun.skype4j.events.chat.user;
-
-import com.samczsun.skype4j.user.User;
-
-public class RoleUpdateEvent extends UserEvent {
-    public RoleUpdateEvent(User user) {
-        super(user);
-    }
-}
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/UserAddEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/UserAddEvent.java
index 6b8af80..c17f512 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/UserAddEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/UserAddEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat.user;
 
 import com.samczsun.skype4j.user.User;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/UserEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/UserEvent.java
index 81b62dd..7a3376b 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/UserEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/UserEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat.user;
 
 import com.samczsun.skype4j.events.chat.ChatEvent;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/UserRemoveEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/UserRemoveEvent.java
index c4f1d9f..64dbe0f 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/user/UserRemoveEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/UserRemoveEvent.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.events.chat.user;
 
 import com.samczsun.skype4j.user.User;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/action/OptionUpdateEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/action/OptionUpdateEvent.java
new file mode 100644
index 0000000..9814744
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/action/OptionUpdateEvent.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.events.chat.user.action;
+
+import com.samczsun.skype4j.events.chat.user.UserEvent;
+import com.samczsun.skype4j.user.User;
+
+public class OptionUpdateEvent extends UserEvent {
+    private long time;
+    private Option option;
+    private boolean enabled;
+
+    public OptionUpdateEvent(User user, long time, Option option, boolean enabled) {
+        super(user);
+        this.time = time;
+        this.option = option;
+        this.enabled = enabled;
+    }
+
+    public long getEventTime() {
+        return this.time;
+    }
+
+    public Option getOption() {
+        return this.option;
+    }
+
+    public boolean isEnabled() {
+        return enabled;
+    }
+
+    public enum Option {
+        JOINING_ENABLED("joiningenabled"),
+        HISTORY_DISCLOSED("historydisclosed");
+
+        private String id;
+
+        Option(String id) {
+            this.id = id;
+        }
+
+        public String getId() {
+            return this.id;
+        }
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/action/PictureUpdateEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/action/PictureUpdateEvent.java
new file mode 100644
index 0000000..db2e500
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/action/PictureUpdateEvent.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.events.chat.user.action;
+
+import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.events.chat.ChatEvent;
+import com.samczsun.skype4j.events.chat.user.UserEvent;
+import com.samczsun.skype4j.user.User;
+
+/**
+ * Called when the picture of a group chat is updated
+ */
+public class PictureUpdateEvent extends UserEvent {
+    private long time;
+    private String url;
+
+    public PictureUpdateEvent(User initiator, long time, String url) {
+        super(initiator);
+        this.time = time;
+        this.url = url;
+    }
+
+    public long getEventTime() {
+        return this.time;
+    }
+
+    public String getPictureURL() {
+        return this.url;
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/action/RoleUpdateEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/action/RoleUpdateEvent.java
new file mode 100644
index 0000000..d3a5805
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/action/RoleUpdateEvent.java
@@ -0,0 +1,46 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.events.chat.user.action;
+
+import com.samczsun.skype4j.events.chat.user.UserEvent;
+import com.samczsun.skype4j.user.User;
+
+public class RoleUpdateEvent extends UserEvent {
+    private long time;
+    private User target;
+    private User.Role newRole;
+
+    public RoleUpdateEvent(User initiator, long time, User target, User.Role newRole) {
+        super(initiator);
+        this.time = time;
+        this.target = target;
+        this.newRole = newRole;
+    }
+
+    public long getEventTime() {
+        return this.time;
+    }
+
+    public User getTarget() {
+        return this.target;
+    }
+
+    public User.Role getNewRole() {
+        return this.newRole;
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/user/action/TopicUpdateEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/user/action/TopicUpdateEvent.java
new file mode 100644
index 0000000..7ef7031
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/chat/user/action/TopicUpdateEvent.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.events.chat.user.action;
+
+import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.events.chat.ChatEvent;
+import com.samczsun.skype4j.events.chat.user.UserEvent;
+import com.samczsun.skype4j.user.User;
+
+public class TopicUpdateEvent extends UserEvent {
+    private long time;
+    private String newTopic;
+
+    public TopicUpdateEvent(User initiator, long time, String newTopic) {
+        super(initiator);
+        this.time = time;
+        this.newTopic = newTopic;
+    }
+
+    public long getEventTime() {
+        return this.time;
+    }
+
+    public String getNewTopic() {
+        return this.newTopic;
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/error/ErrorEvent.java b/src/main/java/com/samczsun/skype4j/events/error/ErrorEvent.java
new file mode 100644
index 0000000..948fdc3
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/error/ErrorEvent.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.events.error;
+
+import com.samczsun.skype4j.events.Event;
+
+/**
+ * Represents an error which has occured within the internal API
+ * Most likely this error was caused through some action performed on the API, hence it is disclosed to you
+ * Some errors are non-important - they can be safely ignored.
+ * Others should be handled properly as they signal the API will no longer function at all
+ */
+public class ErrorEvent extends Event {
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/error/MajorErrorEvent.java b/src/main/java/com/samczsun/skype4j/events/error/MajorErrorEvent.java
new file mode 100644
index 0000000..b20817d
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/error/MajorErrorEvent.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.events.error;
+
+/**
+ * Represents an error which cannot be recovered from.
+ * This event should be handled accordingly.
+ */
+public class MajorErrorEvent extends ErrorEvent {
+
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/error/MinorErrorEvent.java b/src/main/java/com/samczsun/skype4j/events/error/MinorErrorEvent.java
new file mode 100644
index 0000000..54c0dc7
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/error/MinorErrorEvent.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.events.error;
+
+/**
+ * Represents an error which can be recovered from
+ * This event is merely for transparency purposes
+ * Errors may be ignored but is recommended to take logs of regardless
+ */
+public class MinorErrorEvent extends ErrorEvent {
+}
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/ChatNotFoundException.java b/src/main/java/com/samczsun/skype4j/exceptions/ChatNotFoundException.java
index f10bc33..43ea20f 100644
--- a/src/main/java/com/samczsun/skype4j/exceptions/ChatNotFoundException.java
+++ b/src/main/java/com/samczsun/skype4j/exceptions/ChatNotFoundException.java
@@ -1,4 +1,24 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.exceptions;
 
+/**
+ * Represents an exception which is thrown when an attempt is made to load a chat which does not exist
+ */
 public class ChatNotFoundException extends SkypeException {
 }
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/ConnectionException.java b/src/main/java/com/samczsun/skype4j/exceptions/ConnectionException.java
index c769909..a56e9da 100644
--- a/src/main/java/com/samczsun/skype4j/exceptions/ConnectionException.java
+++ b/src/main/java/com/samczsun/skype4j/exceptions/ConnectionException.java
@@ -1,14 +1,46 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.exceptions;
 
 import java.io.IOException;
 
 /**
- * Thrown when an exception occurs while connecting to one of Skype Web's endpoints
- *
- * @author samczsun
+ * Thrown when an exception occurs while connecting to an endpoint
  */
-public class ConnectionException extends NestedSkypeException {
-    public ConnectionException(String cause, IOException exception) {
-        super(cause, exception);
+public class ConnectionException extends SkypeException {
+    private int responseCode;
+    private String responseMessage;
+
+    public ConnectionException(String cause, int responseCode, String responseMessage) {
+        super(cause);
+        this.responseCode = responseCode;
+        this.responseMessage = responseMessage;
+    }
+
+    public ConnectionException(String cause, IOException nested) {
+        super(cause, nested);
+    }
+
+    public int getResponseCode() {
+        return this.responseCode;
+    }
+
+    public String getResponseMessage() {
+        return this.responseMessage;
     }
 }
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/InvalidCredentialsException.java b/src/main/java/com/samczsun/skype4j/exceptions/InvalidCredentialsException.java
index 3aa2c45..346dc80 100644
--- a/src/main/java/com/samczsun/skype4j/exceptions/InvalidCredentialsException.java
+++ b/src/main/java/com/samczsun/skype4j/exceptions/InvalidCredentialsException.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.exceptions;
 
 /**
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/NestedSkypeException.java b/src/main/java/com/samczsun/skype4j/exceptions/NestedSkypeException.java
index 9fb4633..88ad710 100644
--- a/src/main/java/com/samczsun/skype4j/exceptions/NestedSkypeException.java
+++ b/src/main/java/com/samczsun/skype4j/exceptions/NestedSkypeException.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.exceptions;
 
 /**
@@ -9,8 +26,7 @@
     private final Exception reason;
 
     public NestedSkypeException(String cause, Exception suppressed) {
-        super(cause);
-        this.addSuppressed(suppressed);
+        super(cause, suppressed);
         this.reason = suppressed;
     }
 
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/NotLoadedException.java b/src/main/java/com/samczsun/skype4j/exceptions/NotLoadedException.java
index 7b50416..5d29e3e 100644
--- a/src/main/java/com/samczsun/skype4j/exceptions/NotLoadedException.java
+++ b/src/main/java/com/samczsun/skype4j/exceptions/NotLoadedException.java
@@ -1,7 +1,24 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.exceptions;
 
 /**
- * Thrown when a chat is not yet loaded but an operation to modify it was attempted
+ * Thrown when a chat is not yet loaded but an operation to modify it or read values was attempted
  *
  * @author samczsun
  */
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/NotParticipatingException.java b/src/main/java/com/samczsun/skype4j/exceptions/NotParticipatingException.java
index 43aa8c8..a86c90a 100644
--- a/src/main/java/com/samczsun/skype4j/exceptions/NotParticipatingException.java
+++ b/src/main/java/com/samczsun/skype4j/exceptions/NotParticipatingException.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.exceptions;
 
 public class NotParticipatingException extends ChatNotFoundException {
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/ParseException.java b/src/main/java/com/samczsun/skype4j/exceptions/ParseException.java
index ca1f88b..9f02801 100644
--- a/src/main/java/com/samczsun/skype4j/exceptions/ParseException.java
+++ b/src/main/java/com/samczsun/skype4j/exceptions/ParseException.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.exceptions;
 
 import java.io.IOException;
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/SkypeException.java b/src/main/java/com/samczsun/skype4j/exceptions/SkypeException.java
index 00f117e..f61c5c3 100644
--- a/src/main/java/com/samczsun/skype4j/exceptions/SkypeException.java
+++ b/src/main/java/com/samczsun/skype4j/exceptions/SkypeException.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.exceptions;
 
 /**
@@ -13,4 +30,7 @@ public SkypeException() {
     public SkypeException(String message) {
         super(message);
     }
+    public SkypeException(String message, Exception chain) {
+        super(message, chain);
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/formatting/Message.java b/src/main/java/com/samczsun/skype4j/formatting/Message.java
index 6dffec3..b7f6d80 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/Message.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/Message.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.formatting;
 
 import org.jsoup.Jsoup;
diff --git a/src/main/java/com/samczsun/skype4j/formatting/PlainText.java b/src/main/java/com/samczsun/skype4j/formatting/PlainText.java
index a3641c4..75fa751 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/PlainText.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/PlainText.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.formatting;
 
 /**
diff --git a/src/main/java/com/samczsun/skype4j/formatting/RichText.java b/src/main/java/com/samczsun/skype4j/formatting/RichText.java
index f3100b9..25c5fc7 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/RichText.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/RichText.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.formatting;
 
 import java.awt.*;
diff --git a/src/main/java/com/samczsun/skype4j/formatting/Text.java b/src/main/java/com/samczsun/skype4j/formatting/Text.java
index 3b11a82..5bd2b25 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/Text.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/Text.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.formatting;
 
 import org.apache.commons.lang3.StringEscapeUtils;
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java b/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
index 59dc94c..c7257ed 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
@@ -1,24 +1,46 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.internal;
 
 import com.eclipsesource.json.JsonArray;
 import com.eclipsesource.json.JsonObject;
 import com.eclipsesource.json.JsonValue;
-import com.samczsun.skype4j.ConnectionBuilder;
-import com.samczsun.skype4j.StreamUtils;
 import com.samczsun.skype4j.chat.GroupChat;
+import com.samczsun.skype4j.events.chat.user.action.OptionUpdateEvent;
 import com.samczsun.skype4j.exceptions.ChatNotFoundException;
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.NotParticipatingException;
+import com.samczsun.skype4j.user.Contact;
 import com.samczsun.skype4j.user.User;
 import com.samczsun.skype4j.user.User.Role;
 
 import java.io.IOException;
+import java.io.InputStreamReader;
 import java.net.HttpURLConnection;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
+import java.util.Set;
 
 public class ChatGroup extends ChatImpl implements GroupChat {
     private String topic;
+    private String pictureUrl;
+    private Set<OptionUpdateEvent.Option> enabledOptions = new HashSet<>();
 
     protected ChatGroup(SkypeImpl skype, String identity) throws ConnectionException, ChatNotFoundException {
         super(skype, identity);
@@ -37,8 +59,13 @@ protected void load() throws ConnectionException, ChatNotFoundException {
             builder.addHeader("Content-Type", "application/json");
             HttpURLConnection con = builder.build();
             if (con.getResponseCode() == 200) {
-                JsonObject object = JsonObject.readFrom(StreamUtils.readFully(con.getInputStream()));
+                JsonObject object = JsonObject.readFrom(new InputStreamReader(con.getInputStream()));
                 JsonObject props = object.get("properties").asObject();
+                for (OptionUpdateEvent.Option option : OptionUpdateEvent.Option.values()) {
+                    if (props.get(option.getId()) != null && props.get(option.getId()).equals("true")) {
+                        this.enabledOptions.add(option);
+                    }
+                }
                 if (props.get("topic") != null) {
                     this.topic = props.get("topic").asString();
                 } else {
@@ -82,7 +109,7 @@ public void addUser(String username) throws ConnectionException {
         if (!users.containsKey(username.toLowerCase())) {
             User user = new UserImpl(username, this);
             users.put(username.toLowerCase(), user);
-        } else {
+        } else if (!username.equalsIgnoreCase(getClient().getUsername())) { //Skype...
             throw new IllegalArgumentException(username + " joined the chat even though he was already in it?");
         }
     }
@@ -111,6 +138,34 @@ public void leave() throws ConnectionException {
         kick(getClient().getUsername());
     }
 
+    @Override
+    public String getJoinUrl() throws ConnectionException {
+        checkLoaded();
+        if (isOptionEnabled(OptionUpdateEvent.Option.JOINING_ENABLED)) {
+            try {
+                JsonObject data = new JsonObject();
+                data.add("baseDomain", "https://join.skype.com/launch/");
+                data.add("threadId", this.getIdentity());
+                ConnectionBuilder builder = new ConnectionBuilder();
+                builder.setUrl(GET_JOIN_URL);
+                builder.setMethod("POST", true);
+                builder.addHeader("X-Skypetoken", getClient().getSkypeToken());
+                builder.addHeader("Content-Type", "application/json");
+                builder.setData(data.toString());
+                HttpURLConnection con = builder.build();
+                if (con.getResponseCode() != 200) {
+                    throw getClient().generateException(con);
+                }
+                JsonObject object = JsonObject.readFrom(new InputStreamReader(con.getInputStream()));
+                return object.get("JoinUrl").asString();
+            } catch (IOException e) {
+                throw new ConnectionException("While getting join url", e);
+            }
+        } else {
+            throw new IllegalArgumentException("Joining is not enabled");
+        }
+    }
+
     @Override
     public String getTopic() {
         checkLoaded();
@@ -119,12 +174,51 @@ public String getTopic() {
 
     public void setTopic(String topic) throws ConnectionException {
         checkLoaded();
+        putOption("topic", JsonValue.valueOf(topic));
+    }
+
+    @Override
+    public boolean isOptionEnabled(OptionUpdateEvent.Option option) {
+        checkLoaded();
+        return this.enabledOptions.contains(option);
+    }
+
+    @Override
+    public void setOptionEnabled(OptionUpdateEvent.Option option, boolean enabled) throws ConnectionException {
+        checkLoaded();
+        if ((enabled && !enabledOptions.contains(option)) || (!enabled && enabledOptions.contains(option))) {
+            putOption(option.getId(), JsonValue.valueOf(enabled));
+            updateOption(option, enabled);
+        }
+    }
+
+    @Override
+    public void add(Contact contact) throws ConnectionException {
+        checkLoaded();
+        try {
+            JsonObject obj = new JsonObject();
+            obj.add("role", "User");
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(String.format(ADD_MEMBER_URL, getIdentity(), contact.getUsername()));
+            builder.setMethod("PUT", true);
+            builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
+            builder.addHeader("Content-Type", "application/json");
+            builder.setData(obj.toString());
+            HttpURLConnection con = builder.build();
+            if (con.getResponseCode() != 200) {
+                throw getClient().generateException(con);
+            }
+        } catch (IOException e) {
+            throw new ConnectionException("While adding an user", e);
+        }
+    }
+
+    private void putOption(String option, JsonValue value) throws ConnectionException {
         try {
-            ;
             JsonObject obj = new JsonObject();
-            obj.add("topic", topic);
+            obj.add(option, value);
             ConnectionBuilder builder = new ConnectionBuilder();
-            builder.setUrl(getClient().withCloud(MODIFY_PROPERTY_URL, getIdentity(), "topic"));
+            builder.setUrl(getClient().withCloud(MODIFY_PROPERTY_URL, getIdentity(), option));
             builder.setMethod("PUT", true);
             builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
             builder.addHeader("Content-Type", "application/json");
@@ -141,4 +235,15 @@ public void setTopic(String topic) throws ConnectionException {
     public void updateTopic(String topic) {
         this.topic = topic;
     }
+
+    public void updatePicture(String picture) {
+        this.pictureUrl = picture;
+    }
+
+    public void updateOption(OptionUpdateEvent.Option option, boolean enabled) {
+        if (enabled)
+            enabledOptions.add(option);
+        else
+            enabledOptions.remove(option);
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java b/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
index bfe3ddd..8d3728a 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
@@ -1,7 +1,23 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.internal;
 
 import com.eclipsesource.json.JsonObject;
-import com.samczsun.skype4j.ConnectionBuilder;
 import com.samczsun.skype4j.Skype;
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.chat.ChatMessage;
@@ -27,6 +43,8 @@
     protected static final String SEND_MESSAGE_URL = "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/conversations/%s/messages";
     protected static final String MODIFY_MEMBER_URL = "https://%sclient-s.gateway.messenger.live.com/v1/threads/%s/members/8:%s";
     protected static final String MODIFY_PROPERTY_URL = "https://%sclient-s.gateway.messenger.live.com/v1/threads/%s/properties?name=%s";
+    protected static final String GET_JOIN_URL = "https://api.scheduler.skype.com/threads";
+    protected static final String ADD_MEMBER_URL = "https://client-s.gateway.messenger.live.com/v1/threads/%s/members/8:%s";
 
     public static Chat createChat(Skype client, String identity) throws ConnectionException, ChatNotFoundException {
         Validate.notNull(client, "Client must not be null");
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java b/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
index be33438..78ad556 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.internal;
 
 import com.samczsun.skype4j.chat.IndividualChat;
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
index d332f9e..8e2d9c5 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.internal;
 
 import com.samczsun.skype4j.chat.Chat;
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
index dad6573..8195dd6 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.internal;
 
 import com.samczsun.skype4j.chat.Chat;
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
index 127a85e..de2cb9b 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.internal;
 
 import com.eclipsesource.json.JsonObject;
diff --git a/src/main/java/com/samczsun/skype4j/ConnectionBuilder.java b/src/main/java/com/samczsun/skype4j/internal/ConnectionBuilder.java
similarity index 64%
rename from src/main/java/com/samczsun/skype4j/ConnectionBuilder.java
rename to src/main/java/com/samczsun/skype4j/internal/ConnectionBuilder.java
index 44df58b..661cbb6 100644
--- a/src/main/java/com/samczsun/skype4j/ConnectionBuilder.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ConnectionBuilder.java
@@ -1,4 +1,21 @@
-package com.samczsun.skype4j;
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.internal;
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
@@ -18,6 +35,8 @@
 
     private boolean output;
 
+    private volatile URL builtUrl;
+
     public void setUrl(String url) {
         this.url = url;
     }
@@ -47,7 +66,10 @@ public HttpURLConnection build() throws IOException {
     }
 
     public HttpURLConnection build(int timeout) throws IOException {
-        HttpURLConnection con = (HttpURLConnection) new URL(url).openConnection();
+        if (builtUrl == null) {
+            builtUrl = new URL(url);
+        }
+        HttpURLConnection con = (HttpURLConnection) builtUrl.openConnection();
         con.setReadTimeout(timeout);
         con.setInstanceFollowRedirects(false);
         for (Map.Entry<String, List<String>> ent : headers.entrySet()) {
diff --git a/src/main/java/com/samczsun/skype4j/internal/ContactImpl.java b/src/main/java/com/samczsun/skype4j/internal/ContactImpl.java
index dd5c65b..b92cfbd 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ContactImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ContactImpl.java
@@ -1,15 +1,31 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.internal;
 
 import com.eclipsesource.json.JsonArray;
 import com.eclipsesource.json.JsonObject;
-import com.samczsun.skype4j.ConnectionBuilder;
 import com.samczsun.skype4j.Skype;
-import com.samczsun.skype4j.StreamUtils;
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.user.Contact;
 import org.jsoup.helper.Validate;
 
 import java.io.IOException;
+import java.io.InputStreamReader;
 import java.net.HttpURLConnection;
 
 public class ContactImpl implements Contact {
@@ -36,7 +52,7 @@ public static final Contact createContact(Skype skype, String username) throws C
         try {
             HttpURLConnection con = builder.build();
             if (con.getResponseCode() == 200) {
-                JsonArray array = JsonArray.readFrom(StreamUtils.readFully(con.getInputStream()));
+                JsonArray array = JsonArray.readFrom(new InputStreamReader(con.getInputStream()));
                 JsonObject json = array.get(0).asObject();
                 if (!json.get("displayname").isNull()) {
                     this.displayName = json.get("displayname").asString();
diff --git a/src/main/java/com/samczsun/skype4j/internal/EventType.java b/src/main/java/com/samczsun/skype4j/internal/EventType.java
new file mode 100644
index 0000000..d13acfc
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/internal/EventType.java
@@ -0,0 +1,85 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.internal;
+
+import com.eclipsesource.json.JsonObject;
+import com.samczsun.skype4j.exceptions.SkypeException;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * @author samczsun
+ */
+public enum EventType {
+    NEW_MESSAGE("NewMessage") {
+        @Override
+        public void handle(SkypeImpl skype, JsonObject eventObj) throws SkypeException {
+            JsonObject resource = eventObj.get("resource").asObject();
+            MessageType.getByName(resource.get("messagetype").asString()).handle(skype, resource);
+        }
+    },
+    ENDPOINT_PRESENCE("EndpointPresence") {
+        @Override
+        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
+
+        }
+    },
+    USER_PRESENCE("UserPresence") {
+        @Override
+        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
+
+        }
+    },
+    CONVERSATION_UPDATE("ConversationUpdate") {
+        @Override
+        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
+
+        }
+    },
+    THREAD_UPDATE("ThreadUpdate") {
+        @Override
+        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
+
+        }
+    };
+
+
+    private static final Map<String, EventType> byValue = new HashMap<>();
+    private final String value;
+
+    EventType(String value) {
+        this.value = value;
+    }
+
+    public String getValue() {
+        return this.value;
+    }
+
+    public static EventType getByName(String eventType) {
+        return byValue.get(eventType);
+    }
+
+    public abstract void handle(SkypeImpl skype, JsonObject resource) throws SkypeException;
+
+    static {
+        for (EventType type : values()) {
+            byValue.put(type.getValue(), type);
+        }
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/internal/MessageType.java b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
index b729eed..1e7d0d1 100644
--- a/src/main/java/com/samczsun/skype4j/internal/MessageType.java
+++ b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
@@ -1,25 +1,42 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.internal;
 
 import com.eclipsesource.json.JsonObject;
-import com.samczsun.skype4j.ConnectionBuilder;
 import com.samczsun.skype4j.StreamUtils;
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.chat.ChatMessage;
 import com.samczsun.skype4j.chat.FileInfo;
 import com.samczsun.skype4j.events.UnsupportedEvent;
-import com.samczsun.skype4j.events.chat.ChatEvent;
 import com.samczsun.skype4j.events.chat.ChatJoinedEvent;
-import com.samczsun.skype4j.events.chat.TopicChangeEvent;
+import com.samczsun.skype4j.events.chat.call.CallReceivedEvent;
 import com.samczsun.skype4j.events.chat.message.MessageEditedByOtherEvent;
 import com.samczsun.skype4j.events.chat.message.MessageEditedEvent;
 import com.samczsun.skype4j.events.chat.message.MessageReceivedEvent;
 import com.samczsun.skype4j.events.chat.message.SmsReceivedEvent;
 import com.samczsun.skype4j.events.chat.sent.*;
-import com.samczsun.skype4j.events.chat.call.CallReceivedEvent;
 import com.samczsun.skype4j.events.chat.user.MultiUserAddEvent;
-import com.samczsun.skype4j.events.chat.user.RoleUpdateEvent;
+import com.samczsun.skype4j.events.chat.user.action.RoleUpdateEvent;
 import com.samczsun.skype4j.events.chat.user.UserAddEvent;
 import com.samczsun.skype4j.events.chat.user.UserRemoveEvent;
+import com.samczsun.skype4j.events.chat.user.action.OptionUpdateEvent;
+import com.samczsun.skype4j.events.chat.user.action.PictureUpdateEvent;
+import com.samczsun.skype4j.events.chat.user.action.TopicUpdateEvent;
 import com.samczsun.skype4j.exceptions.ChatNotFoundException;
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.SkypeException;
@@ -32,14 +49,13 @@
 import org.jsoup.nodes.Document;
 import org.jsoup.nodes.Element;
 import org.jsoup.parser.Parser;
-import org.jsoup.select.Elements;
 
 import javax.imageio.ImageIO;
 import java.awt.image.BufferedImage;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
+import java.io.InputStreamReader;
 import java.net.HttpURLConnection;
-import java.net.URL;
 import java.util.*;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -48,7 +64,7 @@
     UNKNOWN("Unknown") {
         @Override
         public void handle(SkypeImpl skype, JsonObject resource) {
-            throw new IllegalArgumentException("Somehow got an unknown tag. Please open a issue at the GitHub repo");
+            throw new IllegalArgumentException("Got an unknown tag. Please open a issue at the GitHub repo");
         }
     },
     TEXT("Text") {
@@ -152,20 +168,19 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
             String url = resource.get("conversationLink").asString();
             String content = resource.get("content").asString();
             Document doc = Parser.xmlParser().parseInput(content, "");
-
-            ArrayList<Contact> contacts = new ArrayList<>();
-            for (Element e : doc.getElementsByTag("c"))
-            {
+            List<Contact> contacts = new ArrayList<>();
+            for (Element e : doc.getElementsByTag("c")) {
                 Matcher m = CONTACT_PATTERN.matcher(e.outerHtml());
-                m.find();
-                String username;
-                if (m.group(2).equals("s")) username = m.group(6);
-                else username = m.group(4);
-
-                contacts.add(skype.getOrLoadContact(username));
+                if (m.find()) {
+                    String username;
+                    if (m.group(2).equals("s")) username = m.group(6);
+                    else username = m.group(4);
+                    contacts.add(skype.getOrLoadContact(username));
+                } else {
+                    throw conformError("Contact");
+                }
             }
-
-            ChatImpl c = (ChatImpl) getChat(url, skype);
+            Chat c = getChat(url, skype);
             User u = getUser(from, c);
             ContactReceivedEvent event = contacts.size() == 1 ? new ContactReceivedEvent(c, u, contacts.get(0)) : new MultiContactReceivedEvent(c, u, contacts);
             skype.getEventDispatcher().callEvent(event);
@@ -174,17 +189,13 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
     RICH_TEXT_FILES("RichText/Files") {
         @Override
         public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
-            //System.out.println(name() + " " + resource);
-            //skype.getEventDispatcher().callEvent(new UnsupportedEvent(name(), resource.toString()));
-
             String from = resource.get("from").asString();
             String url = resource.get("conversationLink").asString();
             String content = resource.get("content").asString();
             Document doc = Parser.xmlParser().parseInput(content, "");
 
-            ArrayList<FileInfo> fileInfos = new ArrayList<>();
-            for (Element fe : doc.getElementsByTag("file"))
-            {
+            List<FileInfo> fileInfos = new ArrayList<>();
+            for (Element fe : doc.getElementsByTag("file")) {
                 FileInfo fileInfo = new FileInfo(
                         fe.text(),
                         Long.parseLong(fe.attr("size")),
@@ -193,7 +204,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
                 fileInfos.add(fileInfo);
             }
 
-            ChatImpl c = (ChatImpl) getChat(url, skype);
+            Chat c = getChat(url, skype);
             User u = getUser(from, c);
             FileInfoReceivedEvent event = new FileInfoReceivedEvent(c, u, fileInfos);
             skype.getEventDispatcher().callEvent(event);
@@ -222,17 +233,15 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
         @Override
         public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException { //Implemented via fullExperience
             String content = resource.get("content").asString();
-            String from = resource.get("from").asString();
-            String url = resource.get("conversationLink").asString();
-            Chat c = getChat(url, skype);
-            User u = getUser(from, c);
+            Chat c = getChat(resource.get("conversationLink").asString(), skype);
+            User u = getUser(resource.get("from").asString(), c);
             Matcher m = LOCATION_PATTERN.matcher(content);
             if (m.find()) {
                 String location = m.group(1);
                 String text = m.group(2);
                 LocationReceivedEvent event = new LocationReceivedEvent(c, u, new LocationReceivedEvent.LocationInfo(location, text));
             } else {
-                throw new IllegalArgumentException("Location event did not conform to format expected");
+                throw conformError("Location");
             }
         }
     },
@@ -255,12 +264,12 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
                     builder.addHeader("Cookie", skype.getCookieString());
                     HttpURLConnection statusCon = builder.build();
                     if (statusCon.getResponseCode() == 200) {
-                        JsonObject obj = JsonObject.readFrom(StreamUtils.readFully(statusCon.getInputStream()));
+                        JsonObject obj = JsonObject.readFrom(new InputStreamReader(statusCon.getInputStream()));
                         builder.setUrl(obj.get("status_location").asString());
                         while (true) {
                             statusCon = builder.build();
                             if (statusCon.getResponseCode() == 200) {
-                                obj = JsonObject.readFrom(StreamUtils.readFully(statusCon.getInputStream()));
+                                obj = JsonObject.readFrom(new InputStreamReader(statusCon.getInputStream()));
                                 if (obj.get("content_state").asString().equalsIgnoreCase("ready")) {
                                     break;
                                 }
@@ -291,20 +300,20 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
     RICH_TEXT_MEDIA_FLIK_MSG("RichText/Media_FlikMsg") {
         @Override
         public void handle(SkypeImpl skype, JsonObject resource) {
-            System.out.println(name() + " " + resource);
             skype.getEventDispatcher().callEvent(new UnsupportedEvent(name(), resource.toString()));
+            throw new IllegalArgumentException("This event is in need of implementation! Please open a ticket with this stacktrace");
         }
     },
     EVENT_SKYPE_VIDEO_MESSAGE("Event/SkypeVideoMessage") {
         @Override
         public void handle(SkypeImpl skype, JsonObject resource) {
-            System.out.println(name() + " " + resource);
             skype.getEventDispatcher().callEvent(new UnsupportedEvent(name(), resource.toString()));
+            throw new IllegalArgumentException("This event is in need of implementation! Please open a ticket with this stacktrace");
         }
     },
     THREAD_ACTIVITY_ADD_MEMBER("ThreadActivity/AddMember") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
             String url = resource.get("conversationLink").asString();
             Chat c = getChat(url, skype);
             List<User> usersAdded = new ArrayList<>();
@@ -332,7 +341,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
     },
     THREAD_ACTIVITY_DELETE_MEMBER("ThreadActivity/DeleteMember") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
             String url = resource.get("conversationLink").asString();
             Chat c = getChat(url, skype);
             List<User> usersRemoved = new ArrayList<>();
@@ -347,72 +356,123 @@ public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
             if (usersRemoved.size() == 1) {
                 event = new UserRemoveEvent(usersRemoved.get(0), initiator);
             } else {
-                throw new SkypeException("More than one user removed?");
+                throw new IllegalArgumentException("More than one user removed?");
             }
             skype.getEventDispatcher().callEvent(event);
         }
     },
     THREAD_ACTIVITY_ROLE_UPDATE("ThreadActivity/RoleUpdate") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
-            String url = resource.get("conversationLink").asString();
-            Chat c = getChat(url, skype);
-            Document xml = Jsoup.parse(resource.get("content").asString(), "", Parser.xmlParser());
-            User target = c.getUser(xml.getElementsByTag("id").get(0).text().substring(2));
-            Role role = Role.getByName(xml.getElementsByTag("role").get(0).text());
-            target.setRole(role);
-            RoleUpdateEvent e = new RoleUpdateEvent(target);
-            skype.getEventDispatcher().callEvent(e);
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+            String content = resource.get("content").asString();
+            Chat chat = getChat(resource.get("conversationLink").asString(), skype);
+            Matcher initiatorMatcher = INITIATOR_PATTERN.matcher(content);
+            Matcher timeMatcher = EVENTTIME_PATTERN.matcher(content);
+            Matcher roleMatcher = ROLE_UPDATE_PATTERN.matcher(content);
+            if (initiatorMatcher.find() && timeMatcher.find() && roleMatcher.find()) {
+                User initiator = getUser(initiatorMatcher.group(1), chat);
+                long time = Long.parseLong(timeMatcher.group(1));
+                User target = chat.getUser(roleMatcher.group(1).substring(2));
+                Role role = Role.getByName(roleMatcher.group(2));
+                RoleUpdateEvent event = new RoleUpdateEvent(initiator, time, target, role);
+                skype.getEventDispatcher().callEvent(event);
+            } else {
+                throw conformError("RoleUpdate");
+            }
         }
     },
     THREAD_ACTIVITY_TOPIC_UPDATE("ThreadActivity/TopicUpdate") {
         @Override
         public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
-            String url = resource.get("conversationLink").asString();
-            Chat c = getChat(url, skype);
-            Document xml = Jsoup.parse(resource.get("content").asString(), "", Parser.xmlParser());
-            if (xml.getElementsByTag("value").size() > 0) {
-                ((ChatGroup) c).updateTopic(StringEscapeUtils.unescapeHtml4(xml.getElementsByTag("value").get(0).text()));
+            String content = resource.get("content").asString();
+            Chat chat = getChat(resource.get("conversationLink").asString(), skype);
+            Matcher initiatorMatcher = INITIATOR_PATTERN.matcher(content);
+            Matcher timeMatcher = EVENTTIME_PATTERN.matcher(content);
+            Matcher valueMatcher = VALUE_PATTERN.matcher(content);
+            if (initiatorMatcher.find() && timeMatcher.find() && valueMatcher.find()) {
+                User user = getUser(initiatorMatcher.group(1), chat);
+                long time = Long.parseLong(timeMatcher.group(1));
+                String topic = valueMatcher.groupCount() > 0 ? StringEscapeUtils.unescapeHtml4(valueMatcher.group(1)) : "";
+                TopicUpdateEvent event = new TopicUpdateEvent(user, time, topic);
+                skype.getEventDispatcher().callEvent(event);
+                ((ChatGroup) chat).updateTopic(topic);
             } else {
-                ((ChatGroup) c).updateTopic("");
+                throw conformError("TopicUpdate");
             }
-            TopicChangeEvent e = new TopicChangeEvent(c);
-            skype.getEventDispatcher().callEvent(e);
         }
     },
     THREAD_ACTIVITY_PICTURE_UPDATE("ThreadActivity/PictureUpdate") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) {
-            System.out.println(name() + " " + resource);
-            skype.getEventDispatcher().callEvent(new UnsupportedEvent(name(), resource.toString()));
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+            String content = resource.get("content").asString();
+            Chat chat = getChat(resource.get("conversationLink").asString(), skype);
+            Matcher initiatorMatcher = INITIATOR_PATTERN.matcher(content);
+            Matcher timeMatcher = EVENTTIME_PATTERN.matcher(content);
+            Matcher valueMatcher = VALUE_PATTERN.matcher(content);
+            if (initiatorMatcher.find() && timeMatcher.find() && valueMatcher.find()) {
+                User user = getUser(initiatorMatcher.group(1), chat);
+                long time = Long.parseLong(timeMatcher.group(1));
+                String picurl = valueMatcher.group(1).substring(4);
+                PictureUpdateEvent event = new PictureUpdateEvent(user, time, picurl);
+                skype.getEventDispatcher().callEvent(event);
+                ((ChatGroup) chat).updatePicture(picurl);
+            } else {
+                throw conformError("PictureUpdate");
+            }
         }
     },
     THREAD_ACTIVITY_HISTORY_DISCLOSED_UPDATE("ThreadActivity/HistoryDisclosedUpdate") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) {
-            System.out.println(name() + " " + resource);
-            skype.getEventDispatcher().callEvent(new UnsupportedEvent(name(), resource.toString()));
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+            String content = resource.get("content").asString();
+            Chat chat = getChat(resource.get("conversationLink").asString(), skype);
+            Matcher initiatorMatcher = INITIATOR_PATTERN.matcher(content);
+            Matcher timeMatcher = EVENTTIME_PATTERN.matcher(content);
+            Matcher valueMatcher = VALUE_PATTERN.matcher(content);
+            if (initiatorMatcher.find() && timeMatcher.find() && valueMatcher.find()) {
+                User user = getUser(initiatorMatcher.group(1), chat);
+                long time = Long.parseLong(timeMatcher.group(1));
+                boolean enabled = Boolean.parseBoolean(valueMatcher.group(1));
+                OptionUpdateEvent event = new OptionUpdateEvent(user, time, OptionUpdateEvent.Option.HISTORY_DISCLOSED, enabled);
+                skype.getEventDispatcher().callEvent(event);
+                ((ChatGroup) chat).updateOption(OptionUpdateEvent.Option.HISTORY_DISCLOSED, enabled);
+            } else {
+                throw conformError("HistoryDisclosedUpdate");
+            }
         }
     },
     THREAD_ACTIVITY_JOINING_ENABLED_UPDATE("ThreadActivity/JoiningEnabledUpdate") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) {
-            System.out.println(name() + " " + resource);
-            skype.getEventDispatcher().callEvent(new UnsupportedEvent(name(), resource.toString()));
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
+            String content = resource.get("content").asString();
+            Chat chat = getChat(resource.get("conversationLink").asString(), skype);
+            Matcher initiatorMatcher = INITIATOR_PATTERN.matcher(content);
+            Matcher timeMatcher = EVENTTIME_PATTERN.matcher(content);
+            Matcher valueMatcher = VALUE_PATTERN.matcher(content);
+            if (initiatorMatcher.find() && timeMatcher.find() && valueMatcher.find()) {
+                User user = getUser(initiatorMatcher.group(1), chat);
+                long time = Long.parseLong(timeMatcher.group(1));
+                boolean enabled = Boolean.parseBoolean(valueMatcher.group(1));
+                OptionUpdateEvent event = new OptionUpdateEvent(user, time, OptionUpdateEvent.Option.JOINING_ENABLED, enabled);
+                skype.getEventDispatcher().callEvent(event);
+                ((ChatGroup) chat).updateOption(OptionUpdateEvent.Option.JOINING_ENABLED, enabled);
+            } else {
+                throw conformError("JoiningEnabledUpdate");
+            }
         }
     },
     THREAD_ACTIVITY_LEGACY_MEMBER_ADDED("ThreadActivity/LegacyMemberAdded") {
         @Override
         public void handle(SkypeImpl skype, JsonObject resource) {
-            System.out.println(name() + " " + resource);
             skype.getEventDispatcher().callEvent(new UnsupportedEvent(name(), resource.toString()));
+            throw new IllegalArgumentException("This event is in need of implementation! Please open a ticket with this stacktrace");
         }
     },
     THREAD_ACTIVITY_LEGACY_MEMBER_UPGRADED("ThreadActivity/LegacyMemberUpgraded") {
         @Override
         public void handle(SkypeImpl skype, JsonObject resource) {
-            System.out.println(name() + " " + resource);
             skype.getEventDispatcher().callEvent(new UnsupportedEvent(name(), resource.toString()));
+            throw new IllegalArgumentException("This event is in need of implementation! Please open a ticket with this stacktrace");
         }
     },
     EVENT_CALL("Event/Call") {
@@ -422,17 +482,17 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
 
             String from = resource.get("from").asString();
             String url = resource.get("conversationLink").asString();
-			String content = resource.get("content").asString();
+            String content = resource.get("content").asString();
 
-			boolean finished;
-			finished = content.startsWith("<ended/>") || content.startsWith("<partlist type=\"ended\"");
+            boolean finished;
+            finished = content.startsWith("<ended/>") || content.startsWith("<partlist type=\"ended\"");
 
 
             ChatImpl c = (ChatImpl) getChat(url, skype);
             User u = getUser(from, c);
             CallReceivedEvent event = new CallReceivedEvent(c, u, !finished);
-			skype.getEventDispatcher().callEvent(event);
-		}
+            skype.getEventDispatcher().callEvent(event);
+        }
     },
     CONTROL_TYPING("Control/Typing") {
         @Override
@@ -445,27 +505,24 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
             Chat c = getChat(url, skype);
             User u = getUser(from, c);
             TypingReceivedEvent event = new TypingReceivedEvent(c, u, true);
-			skype.getEventDispatcher().callEvent(event);
-		}
+            skype.getEventDispatcher().callEvent(event);
+        }
     },
     CONTROL_CLEAR_TYPING("Control/ClearTyping") {
+        //YaR
         @Override
-		//YaR
         public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
-            String from = resource.get("from").asString();
-            String url = resource.get("conversationLink").asString();
-
-            Chat c = getChat(url, skype);
-            User u = getUser(from, c);
+            Chat c = getChat(resource.get("conversationLink").asString(), skype);
+            User u = getUser(resource.get("from").asString(), c);
             TypingReceivedEvent event = new TypingReceivedEvent(c, u, false);
-			skype.getEventDispatcher().callEvent(event);
-		}
+            skype.getEventDispatcher().callEvent(event);
+        }
     },
     CONTROL_LIVE_STATE("Control/LiveState") {
         @Override
         public void handle(SkypeImpl skype, JsonObject resource) {
-            System.out.println(name() + " " + resource);
             skype.getEventDispatcher().callEvent(new UnsupportedEvent(name(), resource.toString()));
+            throw new IllegalArgumentException("This event is in need of implementation! Please open a ticket with this stacktrace");
         }
     };
 
@@ -478,6 +535,10 @@ public void handle(SkypeImpl skype, JsonObject resource) {
     private static final Pattern CONTACT_PATTERN = Pattern.compile("(<c t=\"([^\"]+?)\"( p=\"([^\"]+?)\")?( s=\"([^\"]+?)\")?( f=\"([^\"]+?)\")? */>)", Pattern.CASE_INSENSITIVE);
     private static final Pattern SMS_PATTERN = Pattern.compile("<sms alt=\"([^\"]+?)\">", Pattern.CASE_INSENSITIVE);
     private static final Pattern LOCATION_PATTERN = Pattern.compile("<a[^>]+href=\"https://www.bing.com/maps([^\"]+)\"[^>]*>([^<]*)", Pattern.CASE_INSENSITIVE);
+    private static final Pattern INITIATOR_PATTERN = Pattern.compile("<initiator>(\\d+:.+)</initiator>", Pattern.CASE_INSENSITIVE);
+    private static final Pattern EVENTTIME_PATTERN = Pattern.compile("<eventtime>(\\d+)</eventtime>", Pattern.CASE_INSENSITIVE);
+    private static final Pattern VALUE_PATTERN = Pattern.compile("(?:<value>(.+)</value>|<value />)", Pattern.CASE_INSENSITIVE);
+    private static final Pattern ROLE_UPDATE_PATTERN = Pattern.compile("<target><id>(\\d+:.+)</id><role>(.+)</role></target>", Pattern.CASE_INSENSITIVE);
 
     private static final String PICTURE_URL = "https://api.asm.skype.com/v1/objects/%s/views/imgpsh_fullsize";
     private static final String PICTURE_STATUS_URL = "https://api.asm.skype.com/v1/objects/%s/views/imgpsh_fullsize/status";
@@ -513,7 +574,7 @@ private static Chat getChat(String url, SkypeImpl skype) throws ConnectionExcept
             }
             return find;
         }
-        return null;
+        throw conformError("Chat URL");
     }
 
     private static User getUser(String url, Chat c) {
@@ -521,7 +582,11 @@ private static User getUser(String url, Chat c) {
         if (m.find()) {
             return c.getUser(m.group(1));
         }
-        return null;
+        throw conformError("User");
+    }
+
+    private static IllegalArgumentException conformError(String object) {
+        return new IllegalArgumentException(String.format("%s did not conform to format expected", object));
     }
 
     private static String stripMetadata(String message) {
diff --git a/src/main/java/com/samczsun/skype4j/internal/RegisteredListener.java b/src/main/java/com/samczsun/skype4j/internal/RegisteredListener.java
index a3cf26f..56414a3 100644
--- a/src/main/java/com/samczsun/skype4j/internal/RegisteredListener.java
+++ b/src/main/java/com/samczsun/skype4j/internal/RegisteredListener.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.internal;
 
 import com.samczsun.skype4j.events.Event;
diff --git a/src/main/java/com/samczsun/skype4j/internal/ResourceType.java b/src/main/java/com/samczsun/skype4j/internal/ResourceType.java
index a3f0cac..05c95a4 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ResourceType.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ResourceType.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.internal;
 
 public class ResourceType {
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java b/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java
index ad844bf..dc14f7f 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java
@@ -1,9 +1,27 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.internal;
 
 import com.samczsun.skype4j.events.Event;
 import com.samczsun.skype4j.events.EventDispatcher;
 import com.samczsun.skype4j.events.EventHandler;
 import com.samczsun.skype4j.events.Listener;
+import com.samczsun.skype4j.events.error.MinorErrorEvent;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -43,6 +61,10 @@ public void unregisterListener(final Listener l)
     }
 
     public void callEvent(Event e) {
+        callEvent(e, true);
+    }
+
+    private void callEvent(Event e, boolean tryNotify) {
         List<RegisteredListener> methods = new ArrayList<>();
         Class<?> eventClass = e.getClass();
         while (true) {
@@ -58,8 +80,11 @@ public void callEvent(Event e) {
             for (RegisteredListener method : methods) {
                 try {
                     method.handleEvent(e);
-                } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e1) {
-                    e1.printStackTrace();
+                } catch (Throwable t) {
+                    if (tryNotify) {
+                        MinorErrorEvent event = new MinorErrorEvent();
+                        callEvent(event, false);
+                    }
                 }
             }
         }
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
index 9b95e7e..4c8b934 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
@@ -1,15 +1,32 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.internal;
 
 import com.eclipsesource.json.JsonArray;
 import com.eclipsesource.json.JsonObject;
 import com.eclipsesource.json.JsonValue;
-import com.samczsun.skype4j.ConnectionBuilder;
 import com.samczsun.skype4j.Skype;
-import com.samczsun.skype4j.StreamUtils;
 import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.chat.GroupChat;
 import com.samczsun.skype4j.events.EventDispatcher;
-import com.samczsun.skype4j.events.chat.ChatJoinedEvent;
 import com.samczsun.skype4j.events.chat.DisconnectedEvent;
+import com.samczsun.skype4j.events.error.MajorErrorEvent;
+import com.samczsun.skype4j.events.error.MinorErrorEvent;
 import com.samczsun.skype4j.exceptions.ChatNotFoundException;
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.InvalidCredentialsException;
@@ -23,7 +40,7 @@
 import org.jsoup.select.Elements;
 
 import java.io.IOException;
-import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.net.HttpURLConnection;
 import java.net.SocketTimeoutException;
 import java.net.URLEncoder;
@@ -45,13 +62,18 @@
     private static final String TOKEN_AUTH_URL = "https://api.asm.skype.com/v1/skypetokenauth";
     private static final String LOGOUT_URL = "https://login.skype.com/logout?client_id=578134&redirect_uri=https%3A%2F%2Fweb.skype.com&intsrc=client-_-webapp-_-production-_-go-signin";
     private static final String ENDPOINTS_URL = "https://client-s.gateway.messenger.live.com/v1/users/ME/endpoints";
+    private static final String THREAD_URL = "https://client-s.gateway.messenger.live.com/v1/threads";
     // The endpoints below all depend on the cloud the user is in
     private static final String SUBSCRIPTIONS_URL = "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/endpoints/SELF/subscriptions";
     private static final String MESSAGINGSERVICE_URL = "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/endpoints/%s/presenceDocs/messagingService";
     private static final String POLL_URL = "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/endpoints/SELF/subscriptions/0/poll";
 
+    private static final Pattern URL_PATTERN = Pattern.compile("threads/(.*)", Pattern.CASE_INSENSITIVE);
+
     private final AtomicBoolean loggedIn = new AtomicBoolean(false);
 
+    private final AtomicBoolean shutdownRequested = new AtomicBoolean(false);
+
     private final String username;
     private final String password;
     private final Set<String> resources;
@@ -79,107 +101,104 @@ public SkypeImpl(String username, String password, Set<String> resources) {
         this.resources = resources;
     }
 
-    public void subscribe() throws IOException {
-        ConnectionBuilder builder = new ConnectionBuilder();
-        builder.setUrl(withCloud(SUBSCRIPTIONS_URL));
-        builder.setMethod("POST", true);
-        builder.addHeader("RegistrationToken", registrationToken);
-        builder.addHeader("Content-Type", "application/json");
-        builder.setData(buildSubscriptionObject().toString());
-        HttpURLConnection connection = builder.build();
-
-        int code = connection.getResponseCode();
-        if (code != 201) {
-            throw generateException(connection);
-        }
+    public void subscribe() throws ConnectionException {
+        try {
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(withCloud(SUBSCRIPTIONS_URL));
+            builder.setMethod("POST", true);
+            builder.addHeader("RegistrationToken", registrationToken);
+            builder.addHeader("Content-Type", "application/json");
+            builder.setData(buildSubscriptionObject().toString());
+            HttpURLConnection connection = builder.build();
+
+            int code = connection.getResponseCode();
+            if (code != 201) {
+                throw generateException("While subscribing", connection);
+            }
 
-        builder.setUrl(withCloud(MESSAGINGSERVICE_URL, URLEncoder.encode(endpointId, "UTF-8")));
-        builder.setMethod("PUT", true);
-        builder.setData(buildRegistrationObject().toString());
-        connection = builder.build();
+            builder.setUrl(withCloud(MESSAGINGSERVICE_URL, URLEncoder.encode(endpointId, "UTF-8")));
+            builder.setMethod("PUT", true);
+            builder.setData(buildRegistrationObject().toString());
+            connection = builder.build();
 
-        code = connection.getResponseCode();
-        if (code != 200) {
-            throw generateException(connection);
-        }
-        pollThread = new Thread(String.format("Skype-%s-PollThread", username)) {
-            public void run() {
-                ConnectionBuilder poll = new ConnectionBuilder();
-                poll.setUrl(withCloud(POLL_URL));
-                poll.setMethod("POST", true);
-                poll.addHeader("RegistrationToken", registrationToken);
-                poll.addHeader("Content-Type", "application/json");
-                poll.setData("");
-                main:
-                while (loggedIn.get()) {
-                    try {
-                        HttpURLConnection c = poll.build();
-                        AtomicInteger code = new AtomicInteger(0);
-                        while (code.get() == 0) {
-                            try {
-                                code.set(c.getResponseCode());
-                            } catch (SocketTimeoutException e) {
-                                if (Thread.currentThread().isInterrupted()) {
-                                    break main;
+            code = connection.getResponseCode();
+            if (code != 200) {
+                throw generateException("While submitting a messaging service", connection);
+            }
+            pollThread = new Thread(String.format("Skype-%s-PollThread", username)) {
+                public void run() {
+                    ConnectionBuilder poll = new ConnectionBuilder();
+                    poll.setUrl(withCloud(POLL_URL));
+                    poll.setMethod("POST", true);
+                    poll.addHeader("RegistrationToken", registrationToken);
+                    poll.addHeader("Content-Type", "application/json");
+                    poll.setData("");
+
+                    main:
+                    while (loggedIn.get()) {
+                        try {
+                            HttpURLConnection connection = poll.build();
+                            AtomicInteger code = new AtomicInteger(0);
+                            while (code.get() == 0) {
+                                try {
+                                    code.set(connection.getResponseCode());
+                                } catch (SocketTimeoutException e) {
+                                    if (Thread.currentThread().isInterrupted()) {
+                                        break main;
+                                    }
                                 }
                             }
-                        }
 
-                        if (code.get() != 200) {
-                            throw generateException(c);
-                        }
+                            if (code.get() != 200) {
+                                MajorErrorEvent event = new MajorErrorEvent();
+                                getEventDispatcher().callEvent(event);
+                                shutdown();
+                                break main;
+                            }
+
+                            if (scheduler.isShutdown()) {
+                                if (!shutdownRequested.get()) {
+                                    MajorErrorEvent event = new MajorErrorEvent();
+                                    getEventDispatcher().callEvent(event);
+                                    shutdown();
+                                }
+                                break main;
+                            }
 
-                        InputStream read = c.getInputStream();
-                        String json = StreamUtils.readFully(read);
-                        if (!json.isEmpty()) {
-                            final JsonObject message = JsonObject.readFrom(json);
-                            if (!scheduler.isShutdown()) {
-                                scheduler.execute(new Runnable() {
-                                    public void run() {
-                                        try {
-                                            JsonArray arr = message.get("eventMessages").asArray();
-                                            for (JsonValue elem : arr) {
-                                                JsonObject eventObj = elem.asObject();
-                                                String resourceType = eventObj.get("resourceType").asString();
-                                                if (resourceType.equals("NewMessage")) {
-                                                    JsonObject resource = eventObj.get("resource").asObject();
-                                                    String messageType = resource.get("messagetype").asString();
-                                                    MessageType type = MessageType.getByName(messageType);
-                                                    type.handle(SkypeImpl.this, resource);
-                                                } else if (resourceType.equalsIgnoreCase("EndpointPresence")) {
-                                                } else if (resourceType.equalsIgnoreCase("UserPresence")) {
-                                                } else if (resourceType.equalsIgnoreCase("ConversationUpdate")) { //Not sure what this does
-                                                } else if (resourceType.equalsIgnoreCase("ThreadUpdate")) {
-                                                    JsonObject resource = eventObj.get("resource").asObject();
-                                                    String chatId = resource.get("id").asString();
-                                                    Chat chat = getChat(chatId);
-                                                    if (chat == null) {
-                                                        chat = ChatImpl.createChat(SkypeImpl.this, chatId);
-                                                        allChats.put(chatId, chat);
-                                                        ChatJoinedEvent e = new ChatJoinedEvent(chat);
-                                                        eventDispatcher.callEvent(e);
-                                                    }
-                                                } else {
-                                                    logger.severe("Unhandled resourceType " + resourceType);
-                                                    logger.severe(eventObj.toString());
+                            final JsonObject message = JsonObject.readFrom(new InputStreamReader(connection.getInputStream()));
+                            scheduler.execute(new Runnable() {
+                                public void run() {
+                                    if (message.get("eventMessages") != null) {
+                                        for (JsonValue elem : message.get("eventMessages").asArray()) {
+                                            JsonObject eventObj = elem.asObject();
+                                            EventType type = EventType.getByName(eventObj.get("resourceType").asString());
+                                            if (type != null) {
+                                                try {
+                                                    type.handle(SkypeImpl.this, eventObj);
+                                                } catch (Throwable t) {
+                                                    MinorErrorEvent event = new MinorErrorEvent();
+                                                    getEventDispatcher().callEvent(event);
                                                 }
+                                            } else {
+                                                MinorErrorEvent event = new MinorErrorEvent();
+                                                getEventDispatcher().callEvent(event);
                                             }
-                                        } catch (Exception e) {
-                                            logger.log(Level.SEVERE, "Exception while handling message", e);
-                                            logger.log(Level.SEVERE, message.toString());
                                         }
                                     }
-                                });
-                            }
+                                }
+                            });
+                        } catch (IOException e) {
+                            MajorErrorEvent event = new MajorErrorEvent();
+                            getEventDispatcher().callEvent(event);
+                            shutdown();
                         }
-                    } catch (IOException e) {
-                        eventDispatcher.callEvent(new DisconnectedEvent(e));
-                        loggedIn.set(false);
                     }
                 }
-            }
-        };
-        pollThread.start();
+            };
+            pollThread.start();
+        } catch (IOException io) {
+            throw generateException("While subscribing", io);
+        }
     }
 
     @Override
@@ -241,18 +260,23 @@ public void logout() throws ConnectionException {
         try {
             HttpURLConnection con = builder.build();
             if (con.getResponseCode() != 302) {
-                throw generateException(con);
+                throw generateException("While logging out", con);
             }
-            loggedIn.set(false);
-            pollThread.interrupt();
-            sessionKeepaliveThread.interrupt();
-            scheduler.shutdownNow();
-            while (!scheduler.isTerminated()) ;
+            shutdown();
         } catch (IOException e) {
-            throw new ConnectionException("While logging out", e);
+            throw generateException("While logging out", e);
         }
     }
 
+    private void shutdown() {
+        loggedIn.set(false);
+        shutdownRequested.set(true);
+        pollThread.interrupt();
+        sessionKeepaliveThread.interrupt();
+        scheduler.shutdownNow();
+        while (!scheduler.isTerminated()) ;
+    }
+
     public String getRegistrationToken() {
         return this.registrationToken;
     }
@@ -270,6 +294,47 @@ public Logger getLogger() {
         return this.logger;
     }
 
+    @Override
+    public GroupChat createGroupChat(Contact... contacts) throws ConnectionException, ChatNotFoundException {
+        try {
+            JsonObject obj = new JsonObject();
+            JsonArray allContacts = new JsonArray();
+            JsonObject me = new JsonObject();
+            me.add("id", "8:" + this.getUsername());
+            me.add("role", "Admin");
+            allContacts.add(me);
+            for (Contact contact : contacts) {
+                JsonObject other = new JsonObject();
+                other.add("id", "8:" + contact.getUsername());
+                other.add("role", "User");
+                allContacts.add(other);
+            }
+            obj.add("members", allContacts);
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(THREAD_URL);
+            builder.setMethod("POST", true);
+            builder.addHeader("RegistrationToken", getRegistrationToken());
+            builder.setData(obj.toString());
+            HttpURLConnection con = builder.build();
+            if (con.getResponseCode() != 201) {
+                throw generateException("While creating group chat", con);
+            }
+            String url = con.getHeaderField("Location");
+            Matcher chatMatcher = URL_PATTERN.matcher(url);
+            if (chatMatcher.find()) {
+                GroupChat result = (GroupChat) this.getChat(chatMatcher.group(1));
+                while (result == null) {
+                    result = (GroupChat) this.getChat(chatMatcher.group(1));
+                }
+                return result;
+            } else {
+                throw new IllegalArgumentException("Unable to create chat");
+            }
+        } catch (IOException e) {
+            throw generateException("While creating group chat", e);
+        }
+    }
+
     private Response postToLogin(String username, String password) throws ConnectionException {
         try {
             Map<String, String> data = new HashMap<>();
@@ -316,10 +381,10 @@ private HttpURLConnection registerEndpoint(String skypeToken) throws ConnectionE
             if (code == 201) {
                 return connection;
             } else {
-                throw generateException(connection);
+                throw generateException("While registering endpoint", connection);
             }
         } catch (IOException e) {
-            throw new ConnectionException("While registering the endpoint", e);
+            throw generateException("While registering endpoint", e);
         }
     }
 
@@ -345,7 +410,7 @@ private JsonObject buildRegistrationObject() {
         publicInfo.add("type", 1);
         publicInfo.add("skypeNameVersion", "skype.com");
         publicInfo.add("nodeInfo", "xx");
-        publicInfo.add("version", "908/1.6.0.288//skype.com");
+        publicInfo.add("version", "908/1.12.0.75//skype.com");
         JsonObject privateInfo = new JsonObject();
         privateInfo.add("epname", "Skype4J");
         registrationObject.add("publicInfo", publicInfo);
@@ -413,8 +478,16 @@ public void run() {
         }
     }
 
-    public IOException generateException(HttpURLConnection connection) throws IOException {
-        return new IOException(String.format("(%s, %s)", connection.getResponseCode(), connection.getResponseMessage()));
+    public ConnectionException generateException(String reason, HttpURLConnection connection) {
+        try {
+            return new ConnectionException(reason, connection.getResponseCode(), connection.getResponseMessage());
+        } catch (IOException e) {
+            throw new RuntimeException(String.format("IOException while constructing exception (%s, %s)", reason, connection));
+        }
+    }
+
+    public ConnectionException generateException(String reason, IOException nested) {
+        return new ConnectionException(reason, nested);
     }
 
     private void updateCloud(String anyLocation) {
diff --git a/src/main/java/com/samczsun/skype4j/internal/UserImpl.java b/src/main/java/com/samczsun/skype4j/internal/UserImpl.java
index e27aace..1dc9167 100644
--- a/src/main/java/com/samczsun/skype4j/internal/UserImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/UserImpl.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.internal;
 
 import com.samczsun.skype4j.chat.Chat;
diff --git a/src/main/java/com/samczsun/skype4j/user/Contact.java b/src/main/java/com/samczsun/skype4j/user/Contact.java
index 3db090d..ed9a1a1 100644
--- a/src/main/java/com/samczsun/skype4j/user/Contact.java
+++ b/src/main/java/com/samczsun/skype4j/user/Contact.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.user;
 
 /**
diff --git a/src/main/java/com/samczsun/skype4j/user/User.java b/src/main/java/com/samczsun/skype4j/user/User.java
index 1dc6ee6..2acf7d9 100644
--- a/src/main/java/com/samczsun/skype4j/user/User.java
+++ b/src/main/java/com/samczsun/skype4j/user/User.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
 package com.samczsun.skype4j.user;
 
 import com.samczsun.skype4j.chat.Chat;
