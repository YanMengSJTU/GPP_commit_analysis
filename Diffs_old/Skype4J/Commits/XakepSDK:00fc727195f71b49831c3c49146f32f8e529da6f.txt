diff --git a/src/main/java/com/samczsun/skype4j/Skype.java b/src/main/java/com/samczsun/skype4j/Skype.java
index ebc910d..ce698ed 100644
--- a/src/main/java/com/samczsun/skype4j/Skype.java
+++ b/src/main/java/com/samczsun/skype4j/Skype.java
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 import java.util.Collection;
+import java.util.logging.Logger;
 
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.events.EventDispatcher;
@@ -54,6 +55,12 @@
      */
     public abstract EventDispatcher getEventDispatcher();
 
+    /**
+     * Get the Logger used for debugging
+     * @return The Logger
+     */
+    public abstract Logger getLogger();
+
     /**
      * Create a new Skype instance with the specified username and password
      * @param username The username
diff --git a/src/main/java/com/samczsun/skype4j/chat/Chat.java b/src/main/java/com/samczsun/skype4j/chat/Chat.java
index a97c5da..b15abaf 100644
--- a/src/main/java/com/samczsun/skype4j/chat/Chat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/Chat.java
@@ -10,55 +10,53 @@
 
 /**
  * Represents a single chat. This can be a private message or a group chat.
- * 
+ *
  * @author samczsun
  */
 public interface Chat {
     /**
      * Sends a formatted message to this chat
-     * 
-     * @param message
-     *            The rich text to send
+     *
+     * @param message The rich text to send
      * @return The {@link ChatMessage ChatMessage} object representing the
-     *         message
+     * message
      * @throws SkypeException
      */
     ChatMessage sendMessage(Message message) throws SkypeException;
 
     /**
      * Get the {@link User User} object represented by that username
-     * 
-     * @param username
-     *            The username of the user
+     *
+     * @param username The username of the user
      * @return The user object
      */
     User getUser(String username);
 
     /**
      * Get the identity of the chat. Persistent across restarts
-     * 
+     *
      * @return The identity of this chat
      */
     String getIdentity();
 
     /**
      * Return a view of all the users in this chat
-     * 
+     *
      * @return All the users
      */
     Collection<User> getAllUsers();
 
     /**
      * Return a view of all the messages saved, in chronological order
-     * 
+     *
      * @return All the messages saved
      */
     List<ChatMessage> getAllMessages();
 
     /**
      * Returns whether this chat has finished loading. Any calls to act upon the
-     * chat will throw a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException}
-     * 
+     * chat will throw a {@link com.samczsun.skype4j.exceptions.NotLoadedException NotLoadedException} if the chat is not loaded
+     *
      * @return The loaded state
      */
     boolean isLoaded();
diff --git a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java b/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
index cd13c66..768d0fa 100644
--- a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
+++ b/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
@@ -6,25 +6,52 @@
 import com.samczsun.skype4j.user.User;
 
 /**
- * Represents a single message sent in a group
- * 
+ * Represents a single message
+ *
  * @author samczsun
  */
 public interface ChatMessage {
-    
-    String getClientId();
 
+    /**
+     * Get the message object sent or received
+     *
+     * @return The message
+     */
     Message getMessage();
 
+    /**
+     * Get the time this message was sent or received at
+     *
+     * @return The time
+     */
     long getTime();
 
+    /**
+     * Get the user that sent this message
+     *
+     * @return The user
+     */
     User getSender();
 
-    void edit(Message newMessage) throws SkypeException;
-
-    void delete() throws SkypeException;
-
+    /**
+     * Get the chat this message was sent in. See {@link User#getChat() User#getChat()}
+     *
+     * @return The chat that the user belongs to
+     */
     Chat getChat();
 
+    /**
+     * Get the ID assigned to this message by the client. This is not guarenteed to be unique
+     *
+     * @return The ID
+     */
+    String getClientId();
+
+    /**
+     * Get the ID assigned to this message by Skype. Upon edits this ID should change but currently does not.
+     * There appears to be no use for this ID.
+     *
+     * @return The ID
+     */
     String getId();
 }
diff --git a/src/main/java/com/samczsun/skype4j/chat/GroupChat.java b/src/main/java/com/samczsun/skype4j/chat/GroupChat.java
index 70e4cbc..4cb1af7 100644
--- a/src/main/java/com/samczsun/skype4j/chat/GroupChat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/GroupChat.java
@@ -5,7 +5,7 @@
 /**
  * Represents a group chat with one or more people
  *
- * @author Sam
+ * @author samczsun
  */
 public interface GroupChat extends Chat {
     /**
@@ -24,7 +24,7 @@
     void setTopic(String topic) throws SkypeException;
 
     /**
-     * Kick a user from this chat. Is not supported in individual chats.
+     * Kick a user from this chat
      *
      * @param username The username of the user to kick
      * @throws SkypeException If the user is not in this chat, or if the kick failed
diff --git a/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java b/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java
index 4767a77..861cc6d 100644
--- a/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java
@@ -4,9 +4,9 @@
  * Represents a private conversation between the user logged in and one other
  * user
  * 
- * @author Sam
+ * @author samczsun
  *
  */
 public interface IndividualChat extends Chat {
-
+    // There's not much you can do in a private chat
 }
diff --git a/src/main/java/com/samczsun/skype4j/chat/ReceivedMessage.java b/src/main/java/com/samczsun/skype4j/chat/ReceivedMessage.java
new file mode 100644
index 0000000..5c8bbfb
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/chat/ReceivedMessage.java
@@ -0,0 +1,10 @@
+package com.samczsun.skype4j.chat;
+
+/**
+ * Represents a message you received
+ *
+ * @author samczsun
+ */
+public interface ReceivedMessage extends ChatMessage {
+    // There's not much you can do with someone else's message
+}
diff --git a/src/main/java/com/samczsun/skype4j/chat/SentMessage.java b/src/main/java/com/samczsun/skype4j/chat/SentMessage.java
new file mode 100644
index 0000000..364096d
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/chat/SentMessage.java
@@ -0,0 +1,27 @@
+package com.samczsun.skype4j.chat;
+
+import com.samczsun.skype4j.exceptions.SkypeException;
+import com.samczsun.skype4j.formatting.Message;
+
+/**
+ * Represents a message you sent
+ *
+ * @author samczsun
+ */
+public interface SentMessage extends ChatMessage {
+
+    /**
+     * Edit this message
+     *
+     * @param newMessage The message to edit it to
+     * @throws SkypeException If something goes wrong during the editing
+     */
+    void edit(Message newMessage) throws SkypeException;
+
+    /**
+     * Delete this message
+     *
+     * @throws SkypeException If something goes wrong while deleting
+     */
+    void delete() throws SkypeException;
+}
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java b/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
index 19c81b7..430ac06 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
@@ -15,13 +15,18 @@
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.user.User;
 
-public abstract class ChatImpl {
+public abstract class ChatImpl implements Chat {
     public static Chat createChat(Skype client, String identity) throws SkypeException {
         Validate.notNull(client, "Client must not be null");
-        Validate.isTrue(client instanceof SkypeImpl, "Client type must be Web");
-        Validate.notEmpty(identity, "Identity must not be empty");
-        if (identity.startsWith("19:") && identity.endsWith("@thread.skype")) {
-            return new ChatGroup((SkypeImpl) client, identity);
+        Validate.isTrue(client instanceof SkypeImpl, String.format("Now is not the time to use that, %s", client.getUsername()));
+        Validate.notEmpty(identity, "Identity must not be null/empty");
+        if (identity.startsWith("19:")) {
+            if (identity.endsWith("@thread.skype")) {
+                return new ChatGroup((SkypeImpl) client, identity);
+            } else {
+                client.getLogger().info(String.format("Skipping P2P chat with identity %s", identity));
+                return null;
+            }
         } else if (identity.startsWith("8:")) {
             return new ChatIndividual((SkypeImpl) client, identity);
         } else {
@@ -38,7 +43,7 @@ public static Chat createChat(Skype client, String identity) throws SkypeExcepti
     protected final Map<String, User> users = new ConcurrentHashMap<>();
     protected final List<ChatMessage> messages = new CopyOnWriteArrayList<>();
 
-    public ChatImpl(SkypeImpl client, String identity) throws SkypeException {
+    ChatImpl(SkypeImpl client, String identity) throws SkypeException {
         this.client = client;
         this.identity = identity;
         load();
@@ -63,7 +68,7 @@ public boolean isLoaded() {
     public abstract void onMessage(ChatMessage m);
 
     protected abstract void load() throws SkypeException;
-    
+
     protected void checkLoaded() throws NotLoadedException {
         if (!isLoaded()) {
             throw new NotLoadedException();
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
index ad484bc..4c00576 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
@@ -10,7 +10,7 @@
 public abstract class ChatMessageImpl implements ChatMessage {
     public static ChatMessage createMessage(Chat chat, User user, String id, String clientId, long time, Message message) {
         Validate.notNull(chat, "Chat must not be null");
-        Validate.isTrue(chat instanceof ChatImpl, "Chat must be instanecof ChatImpl");
+        Validate.isTrue(chat instanceof ChatImpl, "Chat must be instanceof ChatImpl");
         Validate.notNull(user, "User must not be null");
         Validate.isTrue(user instanceof UserImpl, "User must be instanceof UserImpl");
         Validate.notEmpty(clientId, "ClientId must not be null");
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
index 571cd2c..b9f573c 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
@@ -1,12 +1,13 @@
-    package com.samczsun.skype4j.internal;
+package com.samczsun.skype4j.internal;
 
 import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.chat.ReceivedMessage;
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Message;
 import com.samczsun.skype4j.formatting.RichText;
 import com.samczsun.skype4j.user.User;
 
-public class ChatMessageOther extends ChatMessageImpl {
+public class ChatMessageOther extends ChatMessageImpl implements ReceivedMessage {
     private final String clientId;
     private final String id;
     private Message message;
@@ -41,21 +42,11 @@ public User getSender() {
         return sender;
     }
 
-    @Override
-    public void edit(Message newMessage) {
-        throw new UnsupportedOperationException();
-    }
-
     @Override
     public Chat getChat() {
         return sender.getChat();
     }
 
-    @Override
-    public void delete() throws SkypeException {
-        throw new UnsupportedOperationException();
-    }
-
     @Override
     public String getId() {
         return this.id;
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
index dd42c3d..1a24e3f 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
@@ -6,13 +6,14 @@
 
 import com.eclipsesource.json.JsonObject;
 import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.chat.SentMessage;
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Message;
 import com.samczsun.skype4j.formatting.RichText;
 import com.samczsun.skype4j.formatting.Text;
 import com.samczsun.skype4j.user.User;
 
-public class ChatMessageSelf extends ChatMessageImpl {
+public class ChatMessageSelf extends ChatMessageImpl implements SentMessage {
     private final String clientId;
     private final String id;
     private Message message;
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
index 22e2424..daafecb 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
@@ -194,6 +194,10 @@ public EventDispatcher getEventDispatcher() {
         return this.eventDispatcher;
     }
 
+    public Logger getLogger() {
+        return this.logger;
+    }
+
     private Response postToLogin(String username, String password) throws IOException {
         Map<String, String> data = new HashMap<>();
         Document loginDocument = Jsoup.connect(LOGIN_URL).get();
@@ -294,7 +298,9 @@ public void run() {
                         JsonObject conversation = elem.asObject();
                         String id = conversation.get("id").asString();
                         Chat chat = ChatImpl.createChat(this, id);
-                        allChats.put(id, chat);
+                        if (chat != null) {
+                            allChats.put(id, chat);
+                        }
                     } catch (Exception e) {
                         e.printStackTrace();
                     }
