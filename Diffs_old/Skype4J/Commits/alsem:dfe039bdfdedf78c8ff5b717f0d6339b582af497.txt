diff --git a/src/main/java/com/samczsun/skype4j/LiveLoginSkypeBuilder.java b/src/main/java/com/samczsun/skype4j/LiveLoginSkypeBuilder.java
index cda2d54..69f5e25 100644
--- a/src/main/java/com/samczsun/skype4j/LiveLoginSkypeBuilder.java
+++ b/src/main/java/com/samczsun/skype4j/LiveLoginSkypeBuilder.java
@@ -23,7 +23,7 @@
 import java.util.Set;
 import java.util.logging.Logger;
 
-import org.json.JSONObject;
+import com.eclipsesource.json.JsonObject;
 
 import com.samczsun.skype4j.exceptions.handler.ErrorHandler;
 import com.samczsun.skype4j.internal.client.FullClient;
@@ -134,14 +134,14 @@ public Skype build() {
 
 		} else if (username.contains("@")) {
 
-			JSONObject object;
+			JsonObject object;
 			try {
 				object = LiveLoginHelper.getXTokenObject(username, password);
-				String skypeToken = object.getString("skypetoken");
-				String skypeId = object.getString("skypeid");
+				String skypeToken = object.get("skypetoken").asString();
+				String skypeId = object.get("skypeid").asString();
 				return new MSFTSkypeClient(skypeToken, skypeId, resources, customLogger, errorHandlers);
 			} catch (Exception e) {
-				throw new IllegalArgumentException("Bad response");
+				throw new IllegalArgumentException("Bad response",e);
 			}
 		} else {
 			throw new IllegalArgumentException("No chat specified");
diff --git a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
index 804fc7c..41c9820 100644
--- a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
+++ b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
@@ -20,6 +20,8 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.HttpURLConnection;
+import java.net.InetSocketAddress;
+import java.net.Proxy;
 import java.net.URL;
 import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
@@ -362,9 +364,18 @@ public E_TYPE connect(String method, byte[] rawData) throws ConnectionException
                     }
                     this.url = new URL(surl);
                 }
-                connection = (HttpURLConnection) url.openConnection();
+                 String PROXY_HOST = System.getProperty("skype.conn.proxy.host", "");
+                 String PROXY_PORT = System.getProperty("skype.conn.proxy.port", "");
+                 Proxy proxy = Proxy.NO_PROXY;
+
+                 if (!PROXY_HOST.isEmpty() && !PROXY_PORT.isEmpty()){
+                     proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(PROXY_HOST,
+                             Integer.parseInt(PROXY_PORT)));
+                 }
+                connection = (HttpURLConnection) url.openConnection(proxy);
                 connection.setRequestMethod(method);
                 connection.setInstanceFollowRedirects(false);
+//                HttpsURLConnection.setDefaultHostnameVerifier((a,b) -> true);
                 for (Map.Entry<String, String> ent : headers.entrySet()) {
                     connection.setRequestProperty(ent.getKey(), ent.getValue());
                 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/LiveLoginHelper.java b/src/main/java/com/samczsun/skype4j/internal/client/LiveLoginHelper.java
index 11391c7..9fb2822 100644
--- a/src/main/java/com/samczsun/skype4j/internal/client/LiveLoginHelper.java
+++ b/src/main/java/com/samczsun/skype4j/internal/client/LiveLoginHelper.java
@@ -1,22 +1,25 @@
 package com.samczsun.skype4j.internal.client;
 
-import okhttp3.MediaType;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-import org.apache.commons.lang3.StringEscapeUtils;
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.jsoup.Connection;
-import org.jsoup.Jsoup;
-
+import java.net.InetSocketAddress;
+import java.net.Proxy;
 import java.text.SimpleDateFormat;
 import java.util.Arrays;
 import java.util.Date;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
+import org.apache.commons.lang3.StringEscapeUtils;
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import com.eclipsesource.json.JsonObject;
+
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+
 /**
  * Класс для поддержки авторизации учетных записей microsoft, где в качестве имени пользователя - адрес email
  */
@@ -118,22 +121,35 @@
 		return tokens;
 	}
 
-	private static JSONObject getXTokenObjectFromAccess(String s) throws Exception {
-		Connection.Response response = Jsoup.connect(RPS)
-											.method(Connection.Method.POST)
-											.data("scopes", "client")
-											.data("clientVersion", "0/7.18.0.112//")
-											.data("access_token", s)
-											.data("partner", "999")
-											.data("site_name", "lw")
-											.ignoreContentType(true)
-											.execute();
-
-		return new JSONObject(response.body());
+	private static JsonObject getXTokenObjectFromAccess(final String s, final OkHttpClient client) throws Exception {
+
+		MediaType MEDIA_TYPE_JSON = MediaType.parse("application/json; charset=utf-8");
+
+		JsonObject jsonObj = new JsonObject();
+		jsonObj.add("scopes", "client");
+		jsonObj.add("clientVersion", "0/7.18.0.112//");
+		jsonObj.add("access_token", s);
+		jsonObj.add("partner", "999");
+		jsonObj.add("site_name", "lw");
+		Request request = new Request.Builder().url(RPS)
+				.post(RequestBody.create(MEDIA_TYPE_JSON, jsonObj.toString()))
+				.build();
+
+		Response response = client.newCall(request).execute();
+		return JsonObject.readFrom(response.body().string());
 	}
 
-	public static JSONObject getXTokenObject(String email, String password) throws Exception {
-		OkHttpClient client = new OkHttpClient();
+	public static JsonObject getXTokenObject(String email, String password) throws Exception {
+		Proxy proxy = Proxy.NO_PROXY;
+
+		String PROXY_HOST = System.getProperty("skype.conn.proxy.host", "");
+		String PROXY_PORT = System.getProperty("skype.conn.proxy.port", "");
+
+		if (!PROXY_HOST.isEmpty() && !PROXY_PORT.isEmpty()) {
+			proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(PROXY_HOST, Integer.parseInt(PROXY_PORT)));
+		}
+
+		OkHttpClient client = new OkHttpClient.Builder().proxy(proxy).build();
 		MediaType MEDIA_TYPE_MARKDOWN
 				= MediaType.parse("application/json; charset=utf-8");
 
@@ -160,7 +176,7 @@ public static JSONObject getXTokenObject(String email, String password) throws E
 		if (response.code() == 200) {
 			Map<String, String> parsedTokens = parsePayload(response.body().string());
 			if (parsedTokens.containsKey(SCOPE)) {
-				return getXTokenObjectFromAccess(parsedTokens.get(SCOPE));
+				return getXTokenObjectFromAccess(parsedTokens.get(SCOPE), client);
 			} else {
 				throw new Exception("Deprecated key");
 			}
