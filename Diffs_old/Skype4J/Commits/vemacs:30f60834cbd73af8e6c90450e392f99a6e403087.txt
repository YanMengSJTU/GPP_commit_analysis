diff --git a/src/main/java/com/samczsun/skype4j/Skype.java b/src/main/java/com/samczsun/skype4j/Skype.java
index 7e6c479..ebc910d 100644
--- a/src/main/java/com/samczsun/skype4j/Skype.java
+++ b/src/main/java/com/samczsun/skype4j/Skype.java
@@ -1,7 +1,7 @@
 package com.samczsun.skype4j;
 
 import java.io.IOException;
-import java.util.List;
+import java.util.Collection;
 
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.events.EventDispatcher;
@@ -11,25 +11,56 @@
 public abstract class Skype {
 
     /**
-     * If this Skype client is web-based, this method will subscribe to the
-     * notifications and events will begin. Not sure what this will do on
-     * desktop-based clients yet.
+     * Subscribe to the HTTP long polling service. This will start reading
+     * events from Skype and calling events within this API
      * 
      * @throws IOException
      *             Thrown if any internal operations go wrong
      */
     public abstract void subscribe() throws IOException;
 
+    /**
+     * Get the username of the account logged in
+     * 
+     * @return The username
+     */
     public abstract String getUsername();
 
+    /**
+     * Get a chat based on the identity given. If no chat is found, it will be
+     * loaded if it exists
+     * 
+     * @param name
+     *            The identity of the chat
+     * @return The {@link Chat Chat} object, or null if not found
+     */
     public abstract Chat getChat(String name);
 
-    public abstract List<Chat> getAllChats();
+    /**
+     * Get all the chats loaded by this API
+     * @return A view of all the chats
+     */
+    public abstract Collection<Chat> getAllChats();
 
+    /**
+     * Log out and stop all threads
+     * @throws IOException
+     */
     public abstract void logout() throws IOException;
 
+    /**
+     * Get the event dispatcher that handles listening to events
+     * @return The {@link EventDispatcher EventDispatcher}
+     */
     public abstract EventDispatcher getEventDispatcher();
-    
+
+    /**
+     * Create a new Skype instance with the specified username and password
+     * @param username The username
+     * @param password The password
+     * @return The Skype instance
+     * @throws SkypeException If login failed or any other operations after login failed
+     */
     public static Skype login(String username, String password) throws SkypeException {
         return new SkypeImpl(username, password);
     }
diff --git a/src/main/java/com/samczsun/skype4j/chat/Chat.java b/src/main/java/com/samczsun/skype4j/chat/Chat.java
index a97c700..72729ac 100644
--- a/src/main/java/com/samczsun/skype4j/chat/Chat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/Chat.java
@@ -13,16 +13,6 @@
  * @author samczsun
  */
 public interface Chat {
-
-    /**
-     * Fetches the list of members in the group, along with roles, and updates
-     * the internal database. If {@link #getType() getType()} returns a type of
-     * {@link Type#GROUP GROUP}, an HTTP request will be made
-     * 
-     * @throws SkypeException
-     */
-    public void updateUsers() throws SkypeException;
-
     /**
      * Sends a formatted message to this chat
      * 
@@ -44,42 +34,12 @@
     public User getUser(String username);
 
     /**
-     * Get the {@link ChatMessage ChatMessage} object associated with this
-     * Skype-assigned id
-     * 
-     * @param id
-     *            The skype id, not client id
-     * @return The ChatMessage object
-     */
-    public ChatMessage getMessage(String id);
-
-    /**
-     * Get the identity of the chat, or the output of /showname in chat
-     * 
-     * If the return of {@link #getType() getType()} is {@link Type#GROUP GROUP}
-     * , the result will start with "19:" Otherwise, the result will start with
-     * "8:"
+     * Get the identity of the chat. Persistent across restarts
      * 
      * @return The identity of this chat
      */
     public String getIdentity();
 
-    /**
-     * Get the topic of the chat.
-     * 
-     * @return The topic
-     */
-    public String getTopic();
-
-    /**
-     * Set the topic of the chat. This will update it in real time
-     * 
-     * @param topic
-     *            The topic
-     * @throws SkypeException
-     */
-    public void setTopic(String topic) throws SkypeException;
-
     /**
      * Return a view of all the users in this chat
      * 
@@ -95,34 +55,10 @@
     public List<ChatMessage> getAllMessages();
 
     /**
-     * Get the type of chat this is
-     * 
-     * @return A enum value of {@link Type Type}
-     */
-    public Type getType();
-
-    /**
-     * Kick a user from this chat. Is not supported in individual chats.
-     * 
-     * @param username
-     * @throws SkypeException If the user is not in this chat, or if the kick failed
-     */
-    public void kick(String username) throws SkypeException;
-
-    /**
-     * An Enum to represent the different types of chats
+     * Returns whether this chat has finished loading. Any calls to act upon the
+     * chat will throw a {@link NotLoadedException NotLoadedException}
      * 
-     * @author samczsun
-     *
+     * @return The loaded state
      */
-    public static enum Type {
-        /**
-         * Represents a private chat with one other person
-         */
-        INDIVIDUAL,
-        /**
-         * Represents a group chat with one or more people
-         */
-        GROUP;
-    }
+    public boolean isLoaded();
 }
diff --git a/src/main/java/com/samczsun/skype4j/chat/GroupChat.java b/src/main/java/com/samczsun/skype4j/chat/GroupChat.java
new file mode 100644
index 0000000..4a250d9
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/chat/GroupChat.java
@@ -0,0 +1,36 @@
+package com.samczsun.skype4j.chat;
+
+import com.samczsun.skype4j.exceptions.SkypeException;
+
+/**
+ * Represents a group chat with one or more people
+ * 
+ * @author Sam
+ *
+ */
+public interface GroupChat extends Chat {
+    /**
+     * Get the topic of the chat.
+     * 
+     * @return The topic
+     */
+    public String getTopic();
+
+    /**
+     * Set the topic of the chat. This will update it in real time
+     * 
+     * @param topic
+     *            The topic
+     * @throws SkypeException
+     */
+    public void setTopic(String topic) throws SkypeException;
+
+    /**
+     * Kick a user from this chat. Is not supported in individual chats.
+     * 
+     * @param username
+     * @throws SkypeException
+     *             If the user is not in this chat, or if the kick failed
+     */
+    public void kick(String username) throws SkypeException;
+}
diff --git a/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java b/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java
new file mode 100644
index 0000000..4767a77
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java
@@ -0,0 +1,12 @@
+package com.samczsun.skype4j.chat;
+
+/**
+ * Represents a private conversation between the user logged in and one other
+ * user
+ * 
+ * @author Sam
+ *
+ */
+public interface IndividualChat extends Chat {
+
+}
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/NotLoadedException.java b/src/main/java/com/samczsun/skype4j/exceptions/NotLoadedException.java
new file mode 100644
index 0000000..b2bdb59
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/exceptions/NotLoadedException.java
@@ -0,0 +1,5 @@
+package com.samczsun.skype4j.exceptions;
+
+public class NotLoadedException extends RuntimeException {
+    private static final long serialVersionUID = 977645207715072614L;
+}
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/SkypeException.java b/src/main/java/com/samczsun/skype4j/exceptions/SkypeException.java
index 161143b..1204175 100644
--- a/src/main/java/com/samczsun/skype4j/exceptions/SkypeException.java
+++ b/src/main/java/com/samczsun/skype4j/exceptions/SkypeException.java
@@ -3,6 +3,10 @@
 public class SkypeException extends Exception {
     private static final long serialVersionUID = -7832042631619998728L;
     
+    public SkypeException() {
+        super();
+    }
+    
     public SkypeException(String message) {
         super(message);
     }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java b/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
index 715701e..53c2787 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
@@ -8,9 +8,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.CopyOnWriteArrayList;
-import java.util.concurrent.atomic.AtomicBoolean;
 
 import javax.net.ssl.HttpsURLConnection;
 
@@ -21,59 +18,26 @@
 import com.eclipsesource.json.JsonValue;
 import com.samczsun.skype4j.StreamUtils;
 import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.chat.GroupChat;
+import com.samczsun.skype4j.exceptions.NotLoadedException;
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Text;
 import com.samczsun.skype4j.user.User;
 import com.samczsun.skype4j.user.User.Role;
 
-public class ChatGroup extends ChatImpl {
-    private AtomicBoolean isLoading = new AtomicBoolean(false);
-
+public class ChatGroup extends ChatImpl implements GroupChat {
     private String topic;
 
-    private Map<String, User> users = new ConcurrentHashMap<>();
-    private List<ChatMessage> messages = new CopyOnWriteArrayList<>();
-    private Map<String, ChatMessage> messageMap = new ConcurrentHashMap<>();
-
-    protected ChatGroup(SkypeImpl skype, String identity) {
+    protected ChatGroup(SkypeImpl skype, String identity) throws SkypeException {
         super(skype, identity);
     }
 
-    @Override
-    public ChatMessage sendMessage(Text message) throws SkypeException {
-        HttpsURLConnection con = null;
-        try {
-            long ms = System.currentTimeMillis();
-            JsonObject obj = new JsonObject();
-            obj.add("content", message.parent().write());
-            obj.add("messagetype", "RichText");
-            obj.add("contenttype", "text");
-            obj.add("clientmessageid", String.valueOf(ms));
-            URL url = new URL("https://client-s.gateway.messenger.live.com/v1/users/ME/conversations/" + this.getIdentity() + "/messages");
-            con = (HttpsURLConnection) url.openConnection();
-            con.setRequestMethod("POST");
-            con.setDoOutput(true);
-            con.setRequestProperty("RegistrationToken", getClient().getRegistrationToken());
-            con.setRequestProperty("Content-Type", "application/json");
-            con.getOutputStream().write(obj.toString().getBytes(Charset.forName("UTF-8")));
-            con.getInputStream();
-            return ChatMessageImpl.createMessage(this, getUser(getClient().getUsername()), null, String.valueOf(ms), ms, Jsoup.parse(message.parent().write()).text());
-        } catch (IOException e) {
-            throw new SkypeException("An error occured while sending a message", e);
-        }
-    }
-
-    @Override
-    public Collection<User> getAllUsers() {
-        return Collections.unmodifiableCollection(users.values());
-    }
-
-    public void updateUsers() throws SkypeException {
-        if (isLoading.get()) {
+    protected void load() throws SkypeException {
+        if (isLoaded()) {
             return;
         }
-        Map<String, User> newUsers = new HashMap<>();
         isLoading.set(true);
+        Map<String, User> newUsers = new HashMap<>();
         HttpsURLConnection con = null;
         try {
             URL url = new URL("https://client-s.gateway.messenger.live.com/v1/threads/" + this.getIdentity() + "?view=msnp24Equivalent");
@@ -109,6 +73,38 @@ public void updateUsers() throws SkypeException {
         this.users.clear();
         this.users.putAll(newUsers);
         isLoading.set(false);
+        hasLoaded.set(true);
+    }
+
+    @Override
+    public ChatMessage sendMessage(Text message) throws SkypeException {
+        checkLoaded();
+        HttpsURLConnection con = null;
+        try {
+            long ms = System.currentTimeMillis();
+            JsonObject obj = new JsonObject();
+            obj.add("content", message.parent().write());
+            obj.add("messagetype", "RichText");
+            obj.add("contenttype", "text");
+            obj.add("clientmessageid", String.valueOf(ms));
+            URL url = new URL("https://client-s.gateway.messenger.live.com/v1/users/ME/conversations/" + this.getIdentity() + "/messages");
+            con = (HttpsURLConnection) url.openConnection();
+            con.setRequestMethod("POST");
+            con.setDoOutput(true);
+            con.setRequestProperty("RegistrationToken", getClient().getRegistrationToken());
+            con.setRequestProperty("Content-Type", "application/json");
+            con.getOutputStream().write(obj.toString().getBytes(Charset.forName("UTF-8")));
+            con.getInputStream();
+            return ChatMessageImpl.createMessage(this, getUser(getClient().getUsername()), null, String.valueOf(ms), ms, Jsoup.parse(message.parent().write()).text());
+        } catch (IOException e) {
+            throw new SkypeException("An error occured while sending a message", e);
+        }
+    }
+
+    @Override
+    public Collection<User> getAllUsers() throws NotLoadedException {
+        checkLoaded();
+        return Collections.unmodifiableCollection(users.values());
     }
 
     public void addUser(String username) {
@@ -125,6 +121,7 @@ public void removeUser(String username) {
     }
 
     public void kick(String username) throws SkypeException {
+        checkLoaded();
         HttpsURLConnection con = null;
         try {
             URL url = new URL("https://getClient()-s.gateway.messenger.live.com/v1/threads/" + this.getIdentity() + "/members/8:" + username);
@@ -141,10 +138,12 @@ public void kick(String username) throws SkypeException {
 
     @Override
     public String getTopic() {
+        checkLoaded();
         return this.topic;
     }
 
     public void setTopic(String topic) throws SkypeException {
+        checkLoaded();
         HttpsURLConnection con = null;
         try {
             URL url = new URL("https://client-s.gateway.messenger.live.com/v1/threads/" + this.getIdentity() + "/properties?name=topic");
@@ -169,27 +168,18 @@ public void updateTopic(String topic) {
 
     public void onMessage(ChatMessage message) {
         this.messages.add(message);
-        this.messageMap.put(message.getId(), message);
         ((UserImpl) message.getSender()).onMessage(message);
     }
 
-    @Override
-    public Type getType() {
-        return Type.GROUP;
-    }
-
     @Override
     public User getUser(String username) {
+        checkLoaded();
         return this.users.get(username);
     }
 
-    @Override
-    public ChatMessage getMessage(String id) {
-        return messageMap.get(id);
-    }
-
     @Override
     public List<ChatMessage> getAllMessages() {
+        checkLoaded();
         return Collections.unmodifiableList(this.messages);
     }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java b/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
index 1341fd1..19c81b7 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
@@ -1,13 +1,22 @@
 package com.samczsun.skype4j.internal;
 
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.concurrent.atomic.AtomicBoolean;
+
 import org.jsoup.helper.Validate;
 
 import com.samczsun.skype4j.Skype;
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.exceptions.NotLoadedException;
+import com.samczsun.skype4j.exceptions.SkypeException;
+import com.samczsun.skype4j.user.User;
 
-public abstract class ChatImpl implements Chat {
-    public static Chat createChat(Skype client, String identity) {
+public abstract class ChatImpl {
+    public static Chat createChat(Skype client, String identity) throws SkypeException {
         Validate.notNull(client, "Client must not be null");
         Validate.isTrue(client instanceof SkypeImpl, "Client type must be Web");
         Validate.notEmpty(identity, "Identity must not be empty");
@@ -20,12 +29,19 @@ public static Chat createChat(Skype client, String identity) {
         }
     }
 
+    protected final AtomicBoolean isLoading = new AtomicBoolean(false);
+    protected final AtomicBoolean hasLoaded = new AtomicBoolean(false);
+
     private final SkypeImpl client;
     private final String identity;
 
-    public ChatImpl(SkypeImpl client, String identity) {
+    protected final Map<String, User> users = new ConcurrentHashMap<>();
+    protected final List<ChatMessage> messages = new CopyOnWriteArrayList<>();
+
+    public ChatImpl(SkypeImpl client, String identity) throws SkypeException {
         this.client = client;
         this.identity = identity;
+        load();
     }
 
     public SkypeImpl getClient() {
@@ -36,9 +52,21 @@ public String getIdentity() {
         return this.identity;
     }
 
+    public boolean isLoaded() {
+        return !isLoading.get() && hasLoaded.get();
+    }
+
     public abstract void addUser(String username);
 
     public abstract void removeUser(String username);
 
     public abstract void onMessage(ChatMessage m);
+
+    protected abstract void load() throws SkypeException;
+    
+    protected void checkLoaded() throws NotLoadedException {
+        if (!isLoaded()) {
+            throw new NotLoadedException();
+        }
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java b/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
index cb3986d..a7d3c50 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
@@ -8,9 +8,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.CopyOnWriteArrayList;
-import java.util.concurrent.atomic.AtomicBoolean;
 
 import javax.net.ssl.HttpsURLConnection;
 
@@ -18,24 +15,39 @@
 
 import com.eclipsesource.json.JsonObject;
 import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.chat.IndividualChat;
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Text;
 import com.samczsun.skype4j.user.User;
 
-public class ChatIndividual extends ChatImpl {
-    private AtomicBoolean isLoading = new AtomicBoolean(false);
-
-    private final Type type = Type.INDIVIDUAL;
-
-    private String topic;
-
-    private Map<String, User> users = new ConcurrentHashMap<>();
-    private List<ChatMessage> messages = new CopyOnWriteArrayList<>();
-    private Map<String, ChatMessage> messageMap = new ConcurrentHashMap<>();
-
-    protected ChatIndividual(SkypeImpl skype, String identity) {
+public class ChatIndividual extends ChatImpl implements IndividualChat {
+    protected ChatIndividual(SkypeImpl skype, String identity) throws SkypeException {
         super(skype, identity);
     }
+    
+    @Override
+    protected void load() {
+        if (isLoaded()) {
+            return;
+        }
+        isLoading.set(true);
+        Map<String, User> newUsers = new HashMap<>();
+        String username = this.getIdentity().substring(2);
+        User user = getUser(username);
+        if (user == null) {
+            user = new UserImpl(username, this);
+        }
+        newUsers.put(username, user);
+        User me = getUser(getClient().getUsername());
+        if (me == null) {
+            me = new UserImpl(getClient().getUsername(), this);
+            newUsers.put(getClient().getUsername(), me);
+        }
+        this.users.clear();
+        this.users.putAll(newUsers);
+        isLoading.set(false);
+        hasLoaded.set(true);
+    }
 
     @Override
     public ChatMessage sendMessage(Text message) throws SkypeException {
@@ -66,29 +78,6 @@ public ChatMessage sendMessage(Text message) throws SkypeException {
         return Collections.unmodifiableCollection(users.values());
     }
 
-    public void updateUsers() {
-        if (isLoading.get()) {
-            return;
-        }
-        isLoading.set(true);
-        Map<String, User> newUsers = new HashMap<>();
-        String username = this.getIdentity().substring(2);
-        this.topic = username;
-        User user = getUser(username);
-        if (user == null) {
-            user = new UserImpl(username, this);
-        }
-        newUsers.put(username, user);
-        User me = getUser(getClient().getUsername());
-        if (me == null) {
-            me = new UserImpl(getClient().getUsername(), this);
-            newUsers.put(getClient().getUsername(), me);
-        }
-        this.users.clear();
-        this.users.putAll(newUsers);
-        isLoading.set(false);
-    }
-
     public void addUser(String username) {
         if (!users.containsKey(username)) {
             User user = new UserImpl(username, this);
@@ -102,41 +91,16 @@ public void removeUser(String username) {
         users.remove(username);
     }
 
-    @Override
-    public void kick(String username) throws SkypeException {
-        throw new SkypeException("Cannot kick in individual chats");
-    }
-
-    @Override
-    public String getTopic() {
-        return this.topic;
-    }
-
-    public void setTopic(String topic) {
-        throw new IllegalArgumentException("Cannot set topic in individual chats");
-    }
-
     public void onMessage(ChatMessage message) {
         this.messages.add(message);
-        this.messageMap.put(message.getId(), message);
         ((UserImpl) message.getSender()).onMessage(message);
     }
 
-    @Override
-    public Type getType() {
-        return this.type;
-    }
-
     @Override
     public User getUser(String username) {
         return this.users.get(username);
     }
 
-    @Override
-    public ChatMessage getMessage(String id) {
-        return messageMap.get(id);
-    }
-
     @Override
     public List<ChatMessage> getAllMessages() {
         return Collections.unmodifiableList(messages);
diff --git a/src/main/java/com/samczsun/skype4j/internal/MessageType.java b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
index 3cc2599..dd4f95f 100644
--- a/src/main/java/com/samczsun/skype4j/internal/MessageType.java
+++ b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
@@ -46,7 +46,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
     RICH_TEXT("RichText") {
         @Override
         public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
-            if (resource.get("clientmessageid") != null) { //New message
+            if (resource.get("clientmessageid") != null) { // New message
                 String clientId = resource.get("clientmessageid").asString();
                 String id = resource.get("id").asString();
                 String content = resource.get("content").asString();
@@ -58,11 +58,13 @@ public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
                 ((ChatImpl) c).onMessage(m);
                 MessageReceivedEvent evnt = new MessageReceivedEvent(m);
                 skype.getEventDispatcher().callEvent(evnt);
-            } else if (resource.get("skypeeditedid") != null) { //Edited message
+            } else if (resource.get("skypeeditedid") != null) { // Edited
+                                                                // message
                 String url = resource.get("conversationLink").asString();
                 String from = resource.get("from").asString();
                 final Chat c = getChat(url, skype);
-                final User u = getUser(from, c); //If not original sender, then fake
+                final User u = getUser(from, c); // If not original sender, then
+                                                 // fake
                 final String clientId = resource.get("skypeeditedid").asString();
                 final String id = resource.get("id").asString();
                 String content = resource.get("content").asString();
@@ -167,7 +169,7 @@ public void handle(SkypeImpl skype, JsonObject resource) {
     },
     THREAD_ACTIVITY_ADD_MEMBER("ThreadActivity/AddMember") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
             String url = resource.get("conversationLink").asString();
             Chat c = getChat(url, skype);
             List<User> usersAdded = new ArrayList<>();
@@ -216,7 +218,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
     },
     THREAD_ACTIVITY_ROLE_UPDATE("ThreadActivity/RoleUpdate") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) {
+        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
             String url = resource.get("conversationLink").asString();
             Chat c = getChat(url, skype);
             Document xml = Jsoup.parse(resource.get("content").asString(), "", Parser.xmlParser());
@@ -324,7 +326,7 @@ private static Chat getChat(String url, SkypeImpl skype) {
         return null;
     }
 
-    private static User getUser(String url, Chat c) {
+    private static User getUser(String url, Chat c) throws SkypeException {
         Matcher m = USER_PATTERN.matcher(url);
         if (m.find()) {
             return c.getUser(m.group(1));
diff --git a/src/main/java/com/samczsun/skype4j/events/RegisteredListener.java b/src/main/java/com/samczsun/skype4j/internal/RegisteredListener.java
similarity index 80%
rename from src/main/java/com/samczsun/skype4j/events/RegisteredListener.java
rename to src/main/java/com/samczsun/skype4j/internal/RegisteredListener.java
index 55542ae..6738b4e 100644
--- a/src/main/java/com/samczsun/skype4j/events/RegisteredListener.java
+++ b/src/main/java/com/samczsun/skype4j/internal/RegisteredListener.java
@@ -1,8 +1,11 @@
-package com.samczsun.skype4j.events;
+package com.samczsun.skype4j.internal;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
+import com.samczsun.skype4j.events.Event;
+import com.samczsun.skype4j.events.Listener;
+
 public class RegisteredListener {
     private Listener listener;
     private Method method;
diff --git a/src/main/java/com/samczsun/skype4j/events/SkypeEventDispatcher.java b/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java
similarity index 89%
rename from src/main/java/com/samczsun/skype4j/events/SkypeEventDispatcher.java
rename to src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java
index 6c7c2a5..bf90887 100644
--- a/src/main/java/com/samczsun/skype4j/events/SkypeEventDispatcher.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeEventDispatcher.java
@@ -1,4 +1,4 @@
-package com.samczsun.skype4j.events;
+package com.samczsun.skype4j.internal;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -7,6 +7,11 @@
 import java.util.List;
 import java.util.Map;
 
+import com.samczsun.skype4j.events.Event;
+import com.samczsun.skype4j.events.EventDispatcher;
+import com.samczsun.skype4j.events.EventHandler;
+import com.samczsun.skype4j.events.Listener;
+
 public class SkypeEventDispatcher implements EventDispatcher {
     private Map<Class<? extends Event>, List<RegisteredListener>> listeners = new HashMap<>();
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
index 59ed7d3..040b170 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
@@ -5,10 +5,10 @@
 import java.net.URL;
 import java.net.URLEncoder;
 import java.text.SimpleDateFormat;
-import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
 import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
@@ -33,7 +33,6 @@
 import com.samczsun.skype4j.StreamUtils;
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.events.EventDispatcher;
-import com.samczsun.skype4j.events.SkypeEventDispatcher;
 import com.samczsun.skype4j.events.chat.ChatJoinedEvent;
 import com.samczsun.skype4j.exceptions.SkypeException;
 
@@ -112,7 +111,6 @@ public void run() {
                             JsonObject conversation = elem.asObject();
                             String id = conversation.get("id").asString();
                             Chat chat = ChatImpl.createChat(this, id);
-                            chat.updateUsers();
                             allChats.put(id, chat);
                         } catch (Exception e) {
                             e.printStackTrace();
@@ -192,11 +190,6 @@ public void run() {
                                                     Chat chat = getChat(chatId);
                                                     if (chat == null) {
                                                         chat = ChatImpl.createChat(SkypeImpl.this, chatId);
-                                                        try {
-                                                            chat.updateUsers();
-                                                        } catch (SkypeException e) {
-                                                            e.printStackTrace();
-                                                        }
                                                         allChats.put(chatId, chat);
                                                         ChatJoinedEvent e = new ChatJoinedEvent(chat);
                                                         eventDispatcher.callEvent(e);
@@ -232,7 +225,6 @@ public Chat getChat(String name) {
         } else {
             try {
                 Chat chat = ChatImpl.createChat(this, name);
-                chat.updateUsers();
                 allChats.put(name, chat);
                 return getChat(name);
             } catch (Exception e) {
@@ -243,8 +235,8 @@ public Chat getChat(String name) {
     }
 
     @Override
-    public List<Chat> getAllChats() {
-        return new ArrayList<>(this.allChats.values());
+    public Collection<Chat> getAllChats() {
+        return Collections.unmodifiableCollection(this.allChats.values());
     }
 
     @Override
