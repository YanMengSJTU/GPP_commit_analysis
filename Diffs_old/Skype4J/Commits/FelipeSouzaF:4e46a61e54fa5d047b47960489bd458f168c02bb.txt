diff --git a/pom.xml b/pom.xml
index ff0c2be..df33471 100644
--- a/pom.xml
+++ b/pom.xml
@@ -164,22 +164,5 @@
             <version>4.11</version>
             <scope>test</scope>
         </dependency>
-        <dependency>
-            <groupId>br.com.seti</groupId>
-            <artifactId>skype_manager</artifactId>
-            <version>1.0</version>
-            <type>jar</type>
-        </dependency>
-        <dependency>
-            <groupId>com.samczsun</groupId>
-            <artifactId>skype4j</artifactId>
-            <version>0.2.0-SNAPSHOT</version>
-            <exclusions>
-                <exclusion>
-                    <groupId>com.samczsun</groupId>
-                    <artifactId>skype4j</artifactId>
-                </exclusion>
-            </exclusions>
-        </dependency>
     </dependencies> 
 </project>
\ No newline at end of file
diff --git a/src/main/java/com/samczsun/skype4j/events/SaveContactsEvent.java b/src/main/java/com/samczsun/skype4j/events/SaveContactsEvent.java
new file mode 100644
index 0000000..ec685d0
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/SaveContactsEvent.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2019 seti.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.samczsun.skype4j.events;
+
+/**
+ *
+ * @author seti
+ */
+public class SaveContactsEvent extends Event {
+    
+    public SaveContactsEvent(){}
+    
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/StatusEvent.java b/src/main/java/com/samczsun/skype4j/events/StatusEvent.java
new file mode 100644
index 0000000..d5efd5c
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/StatusEvent.java
@@ -0,0 +1,47 @@
+/*
+ * Copyright 2019 seti.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.samczsun.skype4j.events;
+
+import com.eclipsesource.json.JsonObject;
+import com.samczsun.skype4j.internal.SkypeImpl;
+
+/**
+ *
+ * @author seti
+ */
+public class StatusEvent extends Event {
+    private final SkypeImpl skype;
+    private final JsonObject resource;
+    
+    public StatusEvent(SkypeImpl skype){
+        this.skype = skype;
+        this.resource = null;
+    }
+    
+    public StatusEvent(SkypeImpl skype, JsonObject resource){
+        this.skype = skype;
+        this.resource = resource;
+    }
+    
+    public SkypeImpl getSkypeImpl(){
+        return this.skype;
+    }
+    
+    public JsonObject getResource(){
+        return this.resource;
+    }
+    
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/UnsupportedEvent.java b/src/main/java/com/samczsun/skype4j/events/UnsupportedEvent.java
index 74e4888..a70afca 100644
--- a/src/main/java/com/samczsun/skype4j/events/UnsupportedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/UnsupportedEvent.java
@@ -29,7 +29,7 @@ public UnsupportedEvent(String name, String content) {
         this.name = name;
         this.content = content;
     }
-
+    
     /**
      * Get the name of this event assigned by Skype
      *
diff --git a/src/main/java/com/samczsun/skype4j/internal/EventType.java b/src/main/java/com/samczsun/skype4j/internal/EventType.java
index edfd882..70e1df9 100644
--- a/src/main/java/com/samczsun/skype4j/internal/EventType.java
+++ b/src/main/java/com/samczsun/skype4j/internal/EventType.java
@@ -16,18 +16,14 @@
 
 package com.samczsun.skype4j.internal;
 
-import com.eclipsesource.json.JsonArray;
 import com.eclipsesource.json.JsonObject;
-import com.samczsun.skype4j.Visibility;
+import com.samczsun.skype4j.events.StatusEvent;
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.SkypeException;
 import org.jsoup.helper.Validate;
 import java.io.IOException;
-import java.sql.SQLException;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -92,27 +88,8 @@ public void handle(SkypeImpl skype, JsonObject eventObj) throws SkypeException {
     USER_PRESENCE("UserPresence") {
         @Override
         public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException, ConnectionException {
-            JsonObject resourceEndpoint = resource.get("resource").asObject();
-            JsonArray findEndpoint = resourceEndpoint.get("endpointPresenceDocLinks").asArray();
-            int resourceLink = resource.get("resourceLink").asString().indexOf("/v1/users/ME/presenceDocs/messagingService");
-            if (resourceLink != -1){
-                try {
-                    if (findEndpoint.size() < 2){
-                        skype.getLoginUserStatus(1);
-                        skype.setVisibility(Visibility.INVISIBLE);
-                    } else {
-                        skype.getLoginUserStatus(2);
-                    }
-                } catch (SQLException ex) {
-                    Logger.getLogger(EventType.class.getName()).log(Level.SEVERE, null, ex);
-                }
-            } else {
-                String loginLive = Utils.getString(resourceEndpoint, "selfLink");
-                String loginLiveStatus = Utils.getString(resourceEndpoint, "status");
-                String loginLiveSplit[] = loginLive.split("/");
-                skype.getContact(loginLiveSplit[5]).setStatus(loginLiveStatus);
-                skype.SaveContacts();
-            }
+            StatusEvent event = new StatusEvent(skype, resource);
+            skype.getEventDispatcher().callEvent(event);
         }
     },
     CONVERSATION_UPDATE("ConversationUpdate") {
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
index 163d28d..ae72773 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
@@ -16,8 +16,6 @@
 
 package com.samczsun.skype4j.internal;
 
-import br.com.seti.dao.SkypeContact;
-import br.com.seti.dao.SkypeUser;
 import com.eclipsesource.json.JsonArray;
 import com.eclipsesource.json.JsonObject;
 import com.eclipsesource.json.JsonValue;
@@ -48,7 +46,6 @@
 import java.nio.charset.StandardCharsets;
 import java.security.KeyManagementException;
 import java.security.NoSuchAlgorithmException;
-import java.sql.SQLException;
 import java.util.*;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -136,35 +133,6 @@ public String format(LogRecord record) {
           this.status = null;
     }
     
-    public void getLoginUserStatus(int epidSize) throws ConnectionException, SQLException {
-        JsonObject object = Endpoints.VISIBILITY
-                .open(this)
-                .as(JsonObject.class)
-                .expect(200, "While loading contacts status")
-                .get();
-        JsonArray getFinancialStats = Endpoints.FINANCIALS
-                .open(this, this.liveUsername)
-                .header("Accept", "application/json; ver=3.0")
-                .as(JsonArray.class)
-                .expect(200, "While loading contacts financials")
-                .get();
-        JsonObject financialStats = (JsonObject) getFinancialStats.get(0);
-        this.setStatus(object.get("status").asString());
-        SkypeUser user = new SkypeUser(username);
-        user.setCredits(Utils.getString(financialStats, "balanceFormatted"));
-        user.setLoginLive(liveUsername);
-        user.setMonitorStatus("");
-        user.setFullName(this.displayName);
-        user.setPhone(this.getUserPhones());
-        user.setLastKnownStatus(this.getStatus().toUpperCase());
-        if (epidSize < 2){
-            user.setSkypeStatus("OFFLINE");
-        } else {
-            user.setSkypeStatus(this.getStatus().toUpperCase());
-        }
-        SkypeUser.save(user);
-    }
-
     @Override
     public void login() throws ConnectionException, InvalidCredentialsException {
         Endpoints.ELIGIBILITY_CHECK.open(this)
@@ -514,7 +482,6 @@ public void subscribe() throws ConnectionException {
                         .expect(200, "Err")
                         .put(new JsonObject().add("endpointFeatures", "Agent"));
                 connection = Endpoints.SUBSCRIPTIONS_URL.open(this).dontConnect().post(buildSubscriptionObject());
-                getLoginUserStatus(2);
             }
             if (connection.getResponseCode() != 201) {
                 throw ExceptionHandler.generateException("While subscribing", connection);
@@ -685,25 +652,6 @@ public SkypeWebSocket getWebSocket() {
         return wss;
     }
     
-    public void SaveContacts(){
-        logger.info("Salvando dados do usuÃ¡rio...");
-        Collection<Contact> contacts = this.getAllContacts();
-        for (Contact contact : contacts){
-            SkypeContact contato = new SkypeContact();
-            contato.setUserLogin(this.getUsername());
-            String[] splitUsername = contact.getUsername().split(":", 2);
-            contato.setLogin(splitUsername[1]);
-            contato.setFullName(contact.getDisplayName());
-            contato.setPhone(contact.getPhoneNumbers());
-            contato.setStatus(contact.getStatus().toUpperCase());
-            try {
-                SkypeContact.save(contato);
-            } catch (SQLException ex) {
-                Logger.getLogger(EventType.class.getName()).log(Level.SEVERE, null, ex);
-            }
-        }
-    }
-
     public void setVisibility(Visibility visibility) throws ConnectionException {
         Endpoints.VISIBILITY
                 .open(this)
@@ -726,4 +674,15 @@ public String getStatus() {
     public void setStatus(String status) {
         this.status = status;
     }
+
+    public int connectedEndpointsSize = 0;
+    public int compareEndpoints(JsonArray allEndpoints) {
+        return allEndpoints.size() - this.connectedEndpointsSize;
+    }
+    public void setEndpoints(JsonArray allEndpoints) {
+        this.connectedEndpointsSize = allEndpoints.size();
+    }
+    public String getEndpointId() {
+        return this.endpointId;
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java b/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
index bc8963b..bc18ace 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
@@ -17,10 +17,10 @@
 package com.samczsun.skype4j.internal;
 
 import com.eclipsesource.json.JsonObject;
+import com.samczsun.skype4j.events.SaveContactsEvent;
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.handler.ErrorSource;
 import com.samczsun.skype4j.internal.client.FullClient;
-import com.samczsun.skype4j.internal.participants.info.ContactImpl;
 import org.java_websocket.SSLSocketChannel2;
 import org.java_websocket.client.DefaultSSLWebSocketClientFactory;
 import org.java_websocket.client.WebSocketClient;
@@ -112,14 +112,11 @@ public void onMessage(String s) {
             int event = body.get("evt").asInt();
             if (event == 6) {
                 try {
-                    ContactImpl contactImpl = new ContactImpl(skype);
-                    skype.getLoginUserStatus(2);
                     skype.updateContactList();
-                    skype.SaveContacts();
+                    SaveContactsEvent eventContacts = new SaveContactsEvent();
+                    skype.getEventDispatcher().callEvent(eventContacts);
                 } catch (ConnectionException e) {
                     skype.handleError(ErrorSource.UPDATING_CONTACT_LIST, e, false);
-                } catch (SQLException ex) {
-                    Logger.getLogger(SkypeWebSocket.class.getName()).log(Level.SEVERE, null, ex);
                 }
             } else if (event == 14) {
                 try {
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java b/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
index 71e3bba..4d45984 100644
--- a/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
+++ b/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
@@ -296,6 +296,10 @@ public void loadAllContacts() throws ConnectionException {
                 .get();
         for (JsonValue valueStatus : object.get("contacts").asArray()) {
             JsonObject objStatus = valueStatus.asObject();
+            String idSkip = objStatus.get("person_id").asString();
+            if (idSkip.contains("28:concierge") || idSkip.contains("8:echo123") || idSkip.contains("28:0d5d6cff-595d-49d7-9cf8-973173f5233b"))
+                continue;
+            
             if (objStatus.get("suggested") == null || !objStatus.get("suggested").asBoolean()) {
                 if (i == 0) {
                     contactsStatus = "cMri=" + objStatus.get("person_id").asString();
@@ -329,6 +333,9 @@ public void loadAllContacts() throws ConnectionException {
             
             JsonObject obj = value.asObject();
             if (obj.get("suggested") == null || !obj.get("suggested").asBoolean()) {
+                String id = value.asObject().get("person_id").asString();
+                if (id.contains("28:concierge") || id.contains("8:echo123") || id.contains("28:0d5d6cff-595d-49d7-9cf8-973173f5233b"))
+                    continue;
                 if (!allContacts.containsKey(obj.get("person_id").asString())) {
                     this.allContacts.put(obj.get("person_id").asString(), new ContactImpl(this, obj, status));
                 }
@@ -374,6 +381,10 @@ public void updateContactList() throws ConnectionException {
                 .get();
         for (JsonValue valueStatus : object.get("contacts").asArray()) {
             JsonObject objStatus = valueStatus.asObject();
+            String idSkip = objStatus.get("person_id").asString();
+            if (idSkip.contains("28:concierge") || idSkip.contains("8:echo123") || idSkip.contains("28:0d5d6cff-595d-49d7-9cf8-973173f5233b"))
+                continue;
+            
             if (objStatus.get("suggested") == null || !objStatus.get("suggested").asBoolean()) {
                 if (i == 0) {
                     contactsStatus = "cMri=" + objStatus.get("person_id").asString();
@@ -407,6 +418,8 @@ public void updateContactList() throws ConnectionException {
             
             if (value.asObject().get("suggested") == null || !value.asObject().get("suggested").asBoolean()) {
                 String id = value.asObject().get("person_id").asString();
+                if (id.contains("28:concierge") || id.contains("8:echo123") || id.contains("28:0d5d6cff-595d-49d7-9cf8-973173f5233b"))
+                    continue;
                 ContactImpl impl = (ContactImpl) allContacts.get(id);
                 if (impl == null) impl = (ContactImpl) loadContact(id);
                 impl.update(value.asObject(), status);
