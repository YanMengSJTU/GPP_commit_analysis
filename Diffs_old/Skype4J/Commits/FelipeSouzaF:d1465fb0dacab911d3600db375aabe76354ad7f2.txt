diff --git a/nbactions.xml b/nbactions.xml
new file mode 100644
index 0000000..c5935f9
--- /dev/null
+++ b/nbactions.xml
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<actions>
+        <action>
+            <actionName>run</actionName>
+            <packagings>
+                <packaging>jar</packaging>
+            </packagings>
+            <goals>
+                <goal>process-classes</goal>
+                <goal>org.codehaus.mojo:exec-maven-plugin:1.2.1:exec</goal>
+            </goals>
+            <properties>
+                <exec.args>-classpath %classpath com.samczsun.skype4j.formatting.Generator</exec.args>
+                <exec.executable>java</exec.executable>
+            </properties>
+        </action>
+        <action>
+            <actionName>debug</actionName>
+            <packagings>
+                <packaging>jar</packaging>
+            </packagings>
+            <goals>
+                <goal>process-classes</goal>
+                <goal>org.codehaus.mojo:exec-maven-plugin:1.2.1:exec</goal>
+            </goals>
+            <properties>
+                <exec.args>-Xdebug -Xrunjdwp:transport=dt_socket,server=n,address=${jpda.address} -classpath %classpath com.samczsun.skype4j.formatting.Generator</exec.args>
+                <exec.executable>java</exec.executable>
+                <jpda.listen>true</jpda.listen>
+            </properties>
+        </action>
+        <action>
+            <actionName>profile</actionName>
+            <packagings>
+                <packaging>jar</packaging>
+            </packagings>
+            <goals>
+                <goal>process-classes</goal>
+                <goal>org.codehaus.mojo:exec-maven-plugin:1.2.1:exec</goal>
+            </goals>
+            <properties>
+                <exec.args>-classpath %classpath com.samczsun.skype4j.formatting.Generator</exec.args>
+                <exec.executable>java</exec.executable>
+            </properties>
+        </action>
+    </actions>
diff --git a/pom.xml b/pom.xml
index b2af275..e4e9c69 100644
--- a/pom.xml
+++ b/pom.xml
@@ -164,5 +164,11 @@
             <version>4.11</version>
             <scope>test</scope>
         </dependency>
-    </dependencies>
+        <dependency>
+            <groupId>br.com.seti</groupId>
+            <artifactId>skype_manager</artifactId>
+            <version>1.0</version>
+            <type>jar</type>
+        </dependency>
+    </dependencies> 
 </project>
\ No newline at end of file
diff --git a/src/main/java/com/samczsun/skype4j/Skype.java b/src/main/java/com/samczsun/skype4j/Skype.java
index 09cbf61..2f3bdc6 100644
--- a/src/main/java/com/samczsun/skype4j/Skype.java
+++ b/src/main/java/com/samczsun/skype4j/Skype.java
@@ -66,6 +66,8 @@
      * @return The username
      */
     String getUsername();
+    
+    String getLiveUsername();
 
     /**
      * Get a {@link Chat} based on the identity given. The chat must already be loaded
diff --git a/src/main/java/com/samczsun/skype4j/SkypeBuilder.java b/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
index 007226a..91905d4 100644
--- a/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
+++ b/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
@@ -16,6 +16,7 @@
 
 package com.samczsun.skype4j;
 
+import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.handler.ErrorHandler;
 import com.samczsun.skype4j.internal.client.FullClient;
 import com.samczsun.skype4j.internal.client.GuestClient;
@@ -118,7 +119,7 @@ public SkypeBuilder withChat(String id) {
      *
      * @return The Skype instance
      */
-    public Skype build() {
+    public Skype build() throws ConnectionException {
         if (resources.isEmpty()) {
             throw new IllegalArgumentException("No resources selected");
         }
diff --git a/src/main/java/com/samczsun/skype4j/chat/Chat.java b/src/main/java/com/samczsun/skype4j/chat/Chat.java
index f38117a..1d9cb86 100644
--- a/src/main/java/com/samczsun/skype4j/chat/Chat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/Chat.java
@@ -142,7 +142,7 @@
      * @return The Skype instance
      */
     Skype getClient();
-
+    
     /**
      * Sets your alerts off. Does not affect anything in this API
      *
diff --git a/src/main/java/com/samczsun/skype4j/formatting/Generator.java b/src/main/java/com/samczsun/skype4j/formatting/Generator.java
index 90b3733..210ecd0 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/Generator.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/Generator.java
@@ -16,135 +16,69 @@
 
 package com.samczsun.skype4j.formatting;
 
-import com.eclipsesource.json.JsonArray;
-import com.eclipsesource.json.JsonObject;
-import com.eclipsesource.json.JsonValue;
-import com.samczsun.skype4j.internal.StreamUtils;
-import com.samczsun.skype4j.internal.Utils;
+import com.samczsun.skype4j.Skype;
+import com.samczsun.skype4j.SkypeBuilder;
+import com.samczsun.skype4j.events.EventHandler;
+import com.samczsun.skype4j.events.Listener;
+import com.samczsun.skype4j.events.chat.message.MessageReceivedEvent;
+import com.samczsun.skype4j.events.chat.message.MessageSentEvent;
+import com.samczsun.skype4j.participants.Participant;
 
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.PrintWriter;
-import java.net.HttpURLConnection;
-import java.net.URL;
-import java.nio.charset.StandardCharsets;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Scanner;
-import java.util.Set;
+import java.util.Collection;
 
 public class Generator {
     private static final String LANG = "en"; //Change to whatever lang you want
     private static final String VERSION = "908_1.20.0.98"; //Magic number
 
-    public static void main(String[] args) throws Exception {
-        URL url = new URL(
-                "https://a.config.skype.com/config/v1/Skype/" + VERSION + "/SkypePersonalization?apikey=skype.com&id=self&callback=Skype4J");
-        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
-        connection.setRequestProperty("User-Agent", "Skype4J");
-        String str = StreamUtils.readFully(connection.getInputStream());
-        JsonObject object = JsonObject.readFrom(str.substring(12, str.length() - 1));
-        String configloc = object.get("pes_config").asString();
-        configloc = configloc.substring(0, configloc.lastIndexOf('/') + 1);
-        URL config = new URL(configloc + LANG);
-        connection = (HttpURLConnection) config.openConnection();
-        connection.setRequestProperty("User-Agent", "Skype4J");
-        JsonObject root = Utils.parseJsonObject(connection.getInputStream());
-        JsonArray items = root.get("items").asArray();
-
-        {
-            Scanner in = new Scanner(
-                    new File("src/main/java/com/samczsun/skype4j/formatting/lang/DefaultEmoticon.java"), "UTF-8");
-
-            File f = new File("src/main/java/com/samczsun/skype4j/formatting/lang/" + LANG + "/Emoticon.java");
-            if (!f.exists()) {
-                if (!f.getParentFile().mkdirs()) throw new IllegalArgumentException("Could not create folder");
-                if (!f.createNewFile()) throw new IllegalArgumentException("Could not create file");
-            }
-            PrintWriter pr = new PrintWriter(f, "UTF-8");
-
-            while (in.hasNextLine()) {
-                String next = in.nextLine();
-                if (next.startsWith("package")) {
-                    pr.println("package com.samczsun.skype4j.formatting.lang." + LANG + ";");
-                } else if (next.contains("DefaultEmoticon")) {
-                    pr.println(next.replace("DefaultEmoticon", "Emoticon"));
-                } else if (next.trim().equals(";")) {
-                    List<JsonObject> emoticons = new ArrayList<>();
-                    for (JsonValue val : items) {
-                        if (val.asObject().get("type").asString().equals("emoticon")) {
-                            emoticons.add(val.asObject());
-                        }
-                    }
-                    for (int i = 0; i < emoticons.size(); i++) {
-                        JsonObject obj = emoticons.get(i);
-                        String enumname = obj.get("id").asString().toUpperCase().replace(' ', '_');
-                        String id = obj.get("id").asString();
-                        String etag = obj.get("etag").asString();
-                        String desc = obj.get("description").asString();
-                        String shortcuts = obj.get("shortcuts").toString();
-                        shortcuts = shortcuts.substring(1, shortcuts.length() - 1);
-                        pr.println(String.format(
-                                "    %s(\"%s\",\"%s\",\"%s\",%s)" + (i == emoticons.size() - 1 ? ";" : ","), enumname,
-                                id, etag, desc, shortcuts));
-                    }
-                } else {
-                    pr.println(next);
-                }
-            }
-            pr.close();
-        }
-
-        {
-            Scanner in = new Scanner(new File("src/main/java/com/samczsun/skype4j/formatting/lang/DefaultFlik.java"));
-            File f = new File("src/main/java/com/samczsun/skype4j/formatting/lang/" + LANG + "/Moji.java");
-            if (!f.exists()) {
-                f.getParentFile().mkdirs();
-                f.createNewFile();
-            }
-            FileOutputStream out = new FileOutputStream(f);
-            PrintWriter pr = new PrintWriter(out);
-
-            while (in.hasNextLine()) {
-                String next = in.nextLine();
-                if (next.startsWith("package")) {
-                    pr.println("package com.samczsun.skype4j.formatting.lang." + LANG + ";");
-                } else if (next.contains("DefaultFlik")) {
-                    pr.println(next.replace("DefaultFlik", "Flik"));
-                } else if (next.trim().equals(";")) {
-                    List<JsonObject> emoticons = new ArrayList<>();
-                    for (JsonValue val : items) {
-                        if (val.asObject().get("type").asString().equals("flik")) {
-                            emoticons.add(val.asObject());
-                        }
-                    }
-                    Set<String> enumnames = new HashSet<>();
-                    for (int i = 0; i < emoticons.size(); i++) {
-                        JsonObject obj = emoticons.get(i);
-                        int x = 0;
-                        String enumname = obj
-                                .get("description")
-                                .asString()
-                                .toUpperCase()
-                                .replace(' ', '_')
-                                .replaceAll("[^a-zA-Z]", "");
-                        String orig = enumname;
-                        String id = obj.get("id").asString();
-                        String etag = obj.get("etag").asString();
-                        String desc = obj.get("description").asString();
-                        while (!enumnames.add(enumname)) {
-                            enumname = orig + "_" + (++x);
-                        }
-                        pr.println(String.format(
-                                "    %s(\"%s\", \"%s\", \"%s\")" + (i == emoticons.size() - 1 ? ";" : ","), enumname,
-                                id, etag, desc));
-                    }
-                } else {
-                    pr.println(next);
-                }
-            }
-            pr.close();
-        }
-    }
+//    public static void main(String[] args) throws Exception {
+//       
+//        System.out.println("1");
+////        Skype skype = new SkypeBuilder("haroflow", "14wolforah91").withAllResources().build();
+////        Skype skype = new SkypeBuilder("skype2@setinet.com.br", "Sk2Hy9px").withAllResources().build();
+////        Skype skype = new SkypeBuilder("47988551018", "13256seti").withAllResources().build();
+//        Skype skype = new SkypeBuilder("setinet_conta_teste1@outlook.com", "13256seti").withAllResources().build();
+//        System.out.println("2");
+//        skype.login();
+//         System.out.println("3");
+//        skype.getEventDispatcher().registerListener(new Listener() {
+//          @EventHandler
+//          public void onMessageSent(MessageSentEvent e) {
+//            System.out.println("Sent message: " + e.getMessage().getContent());
+//            System.out.println(e.getChat().getIdentity());
+//            if (e.getChat().getIdentity().startsWith("8")){
+//                System.out.println("individual");
+//            } else {
+//                System.out.println("grupo");
+//            }
+//            //+ e.getMessage().getClientId() + e.getChat().getParticipant(e.getMessage().getSender().getId()).getClient().getUsername());
+//            System.out.println("5");
+//          }
+//          @EventHandler
+//          public void onMessageReceived(MessageReceivedEvent e) {
+//            System.out.println("Got message: " + e.getMessage().getContent());
+//            Collection<Participant> users;
+//            users = e.getChat().getAllParticipants();
+//            for (Participant each : users) {
+//                String teste = each.getDisplayName();
+//                String teste2 = each.getId();
+//                System.out.println(teste);
+//                System.out.println(teste2);
+//            }
+////            System.out.println(e.getChat().getParticipant("8:live:skype2_1132").getDisplayName());
+//            System.out.println(e.getChat().getIdentity());
+//            if (e.getChat().getIdentity().startsWith("8")){
+//                System.out.println("individual");
+//            } else {
+//                System.out.println("grupo");
+//            }
+//            //+ e.getMessage().getClientId() + e.getMessage().getId() + e.getChat().getClient().getLiveUsername()
+//            //+ e.getChat().getParticipant(e.getChat().getIdentity()).getClient().getUsername()
+//            System.out.println("4");
+//          }
+//        });
+//        skype.subscribe();
+////        skype.setVisibility(Visibility.DO_NOT_DISTURB);
+//        // Do stuff
+//        //skype.logout();
+//    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/formatting/lang/DefaultEmoticon.java b/src/main/java/com/samczsun/skype4j/formatting/lang/DefaultEmoticon.java
index 574360c..95dd47b 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/lang/DefaultEmoticon.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/lang/DefaultEmoticon.java
@@ -17,10 +17,13 @@
 package com.samczsun.skype4j.formatting.lang;
 
 import com.samczsun.skype4j.formatting.IEmoticon;
+import com.samczsun.skype4j.formatting.lang.en.Emoticon;
 
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 public enum DefaultEmoticon implements IEmoticon {
 
@@ -53,4 +56,39 @@ public String getEtag() {
     public String getDescription() {
         return this.desc;
     }
+    
+    private static Map<String, Emoticon> dictionary;
+    private static int longestEmoji = -1;
+
+    public static Map<String, Emoticon> getDictionary() {
+        if (dictionary == null) { // This is for performance, trust me
+            initDictionary();
+}
+        return dictionary;
+    }
+
+    public static int getLongestEmoji() {
+        if (longestEmoji == -1) {
+            for (String s : getDictionary().keySet()) {
+                if (s.charAt(0) != '(') {
+                    if (s.length() > longestEmoji) {
+                        longestEmoji = s.length();
+                    }
+                }
+            }
+        }
+        return longestEmoji;
+    }
+
+    private static void initDictionary() {
+        if (dictionary == null) {
+            dictionary = new HashMap<>();
+            for (Emoticon emoticon : Emoticon.values()) {
+                emoticon.getShortcuts().forEach(str -> {
+                    dictionary.put(str, emoticon);
+                    dictionary.put(str.replace("<", "&lt;").replace(">", "&gt;"), emoticon);
+                });
+            }
+        }
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/formatting/lang/DefaultMoji.java b/src/main/java/com/samczsun/skype4j/formatting/lang/DefaultMoji.java
index 685d265..aa8868f 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/lang/DefaultMoji.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/lang/DefaultMoji.java
@@ -22,8 +22,286 @@
 import java.util.Map;
 
 public enum DefaultMoji implements IMoji {
-
-    ;
+        
+    DESPICABLEME("7e241717964a403dbab21be9fa860c81", "01fdf549-b6dc-4319-983c-1dd2d42f35e6", "Despicable Me"),
+    DESPICABLEME_1("ca62da9e0ae54dca8b36ae300cb63991", "2aae7c79-39c3-4e57-a280-05179c416e2d", "Despicable Me 2"),
+    DESPICABLEME_2("0b9704a393a846ea845821cc8eea157f", "a9b07f96-218b-41f7-9407-627ab69dba8a", "Despicable Me"),
+    DESPICABLEME_3("fa451ed1b5d445cabd0f19f55e140464", "3e2cdf62-c862-4946-a3d4-ced490eae8e9", "Despicable Me 2"),
+    MUPPETMOJIS("6a5957a4a4464f7c9ae4d212a56f0be1", "9975a127-7906-41a8-ac0b-5c4ddfcc8c1e", "Muppet Mojis"),
+    RAONE("e2845047b8224c49a1ab3433aca5c9cf", "b7e2d9eb-447f-4125-a423-1a1fcf4c0bd9", "Ra.One"),
+    FURIOUS("22324d43134e4a1abb64e108e3521f76", "e0562453-16a9-4319-8209-c20a8f75bb8c", "Furious 7"),
+    CHARLOTTESWEB("16c5bfa6856c40f9a067dc1367826ec2", "cc70fb0e-f28d-4278-9412-bee9ad4f2a9b", "Charlotte’s Web"),
+    THEOFFICE("80a924da6ef046eba68363d618684702", "63993a6e-f1fb-4557-b52a-6c2c87fe5780", "The Office"),
+    CHARLOTTESWEB_1("d377f74f5bc440e6a24d050d94cb5e9f", "a023dc2d-6ef2-4d49-bb37-91a8adc17beb", "Charlotte’s Web"),
+    TED("238d80dc959947cc94ae9200e8ce8d89", "ed7b1c2d-c3af-4ca7-8749-620e0f41b3b4", "Ted"),
+    DESPICABLEME_4("851d973d722b42459b4f7ca37b528130", "5a941a45-8c11-4a8a-828a-ce9525726e4b", "Despicable Me"),
+    BRIDESMAIDS("aff5b84ab7274da687f581c3f1e0df62", "124c3da6-8d00-4586-ad7c-4546f18092d3", "Bridesmaids"),
+    THEYEAROLDVIRGIN("5bef41a5d2c3482a91e17d1aa019925c", "204d1996-2f87-4325-92bf-e4f7d7d8b804", "The 40 Year Old Virgin"),
+    SHERLOCK("7ef1c909f6794cad8d9732db56f195df", "aa754658-baae-42f8-9d05-feabbc9f29b6", "Sherlock"),
+    THEMUPPETS("34d1910863f0495bbc1902dd77ebe391", "eb189204-6815-4933-8e06-f30e2c890216", "The Muppets"),
+    PITCHPERFECT("d766abdbbc1e4872a369e80dd2a7830c", "5c2e5610-1066-4512-a454-cfb548b7917a", "Pitch Perfect 2"),
+    CHARLOTTESWEB_2("50e0845554fb49e8aec0400a2d3a887d", "a26f2b03-bf38-4bcc-aadb-ef58d8094cca", "Charlotte’s Web"),
+    CHARLOTTESWEB_3("3c8ed72a7a1342d4815472f61ef3b8a7", "33ee5be8-2966-458f-9bfc-086c2d07d72e", "Charlotte’s Web"),
+    DHOOM("b46534e593d14b5b981fe95ae85927ae", "abe0c6c4-d923-4e7c-b2eb-95f6ac9efa61", "Dhoom 2"),
+    PITCHPERFECT_1("9fa7e176004946ada7b427d55ab00f84", "3caed118-c0ba-4c0f-937f-1d0e2c2f9c19", "Pitch Perfect "),
+    MUPPETMOJIS_1("1d50e17c237a42b790f5dfc04e80eeff", "dfaa8a50-68e9-4de0-bcea-899363e4faad", "Muppet Mojis"),
+    PITCHPERFECT_2("087a04d21c224dd58fe56216443d7180", "87b49633-52c6-4b28-8b27-0239cb88b9bf", "Pitch Perfect 2"),
+    DESPICABLEME_5("ef8a8e4599ca4591a96a67f23c23abd1", "e95eeafb-ebf8-4a35-9b31-ebc6bdb0f755", "Despicable Me 2"),
+    BRIDESMAIDS_1("aab6f9f60c2d427f9e3293727fb7fc40", "6e10d8af-9953-42f4-9c2f-298b6d20f172", "Bridesmaids"),
+    THEMUPPETS_1("afc2f134cf094b4086cae7010a7b35ff", "08b1f839-307c-4683-9d43-cec23c648fa5", "The Muppets"),
+    CHARLOTTESWEB_4("69f21be31cf94ed296948811fef9eee6", "711be916-ef75-4bfe-89fe-e82da19256f8", "Charlotte’s Web"),
+    THENAKEDGUN("018d6e3dfe93464c8343665a2788b444", "4983f3af-e5ee-4a9d-b61b-32e1bf835684", "The Naked Gun"),
+    TED_1("69c61b763cf24f33842087b215b019b7", "be80e610-4e80-4d5b-8d1c-7de16258f495", "Ted"),
+    DESPICABLEME_6("6f9f3a6733934430adb33998b2267b5e", "af73a986-efd5-4455-bd4a-d2f48647765c", "Despicable Me 2"),
+    FAWLTYTOWERS("dde399f2a6214fee813682cee9b9598b", "038a7f5d-186a-4d60-8020-d82f9432b819", "Fawlty Towers "),
+    HOUSEFULL("17f3d267617b46c7ae735a2b31a332f2", "a8b13ab4-dea0-4774-8272-a1e5586a037a", "Housefull"),
+    HOUSEFULL_1("9fcd7c6dc5a44aaea0533151f5dbea3a", "a168f582-cb9d-4155-a499-9f1618388b69", "Housefull"),
+    IMALANPARTRIDGE("36766083cdbc4a34aeaa0f1522c87c24", "82ac134e-c2e6-48c6-9796-c29198490d73", "I'm Alan Partridge "),
+    FURIOUS_1("f151d7e619e143d1a618cec1d0e4dbb3", "e5c6c1f0-05b1-438f-8634-998b45ccd467", "Furious 7"),
+    FURIOUS_2("d7732e277d9340b0b7d751123bdece60", "71b15159-9e16-4980-b4b1-3ade5c30347a", "Furious 7"),
+    FURIOUS_3("73e4d181df7c414495adbb01be6009b7", "abfdd2ac-60ba-4535-92be-2a6151b20caa", "Furious 7"),
+    FURIOUS_4("c4cb2bc1341f4635b2a4e7d0351d61b9", "330a8ac2-de14-413e-b779-d8c90ef625db", "Furious 7"),
+    PITCHPERFECT_3("068ec3fce73942b295a2c6648a21cbd0", "866ea56e-f208-4708-baaa-679cd099a10e", "Pitch Perfect 2"),
+    PITCHPERFECT_4("f8bf1de3fb7344318e597442bd467a7f", "2496e9f3-0f65-44b9-8087-2ad26304c9a4", "Pitch Perfect 2"),
+    PITCHPERFECT_5("bfe4cc6214554248ae40cb7df006ecf9", "70994c1b-5173-4ddb-9a30-0663a5b0a595", "Pitch Perfect 2"),
+    PITCHPERFECT_6("dad596b03d8a4663840e6dba4b20b5de", "14c75874-c363-478d-8a78-79e939203fed", "Pitch Perfect 2"),
+    PITCHPERFECT_7("198fbdccb32b47f3a88c03cd614d800a", "088ce08d-74c0-4793-9368-d058cfed0eb5", "Pitch Perfect 2"),
+    THEYEAROLDVIRGIN_1("26079dae03f645d0af564ac6b05a0b02", "fe3ccd1a-d25a-41d9-b06f-5fe6fb1a1b20", "The 40 Year Old Virgin"),
+    THEYEAROLDVIRGIN_2("a98d26d04b514b5ba0ca2a7a589204f4", "efef89b2-208d-4692-b83d-11485c521117", "The 40 Year Old Virgin"),
+    CHARLOTTESWEB_5("c2ce4e05fe7b4ecdaf7b6f3d131cdfcf", "a94897f4-cf25-4696-8589-d75347421012", "Charlotte’s Web"),
+    CHARLOTTESWEB_6("df1ac6a01d254d299d6dcb658f80b988", "22082a74-0759-42ef-b899-2a1645b3f6a2", "Charlotte’s Web"),
+    CHARLOTTESWEB_7("f3634673206a48ba926028a28df17bae", "431019d8-cd05-4bc3-b57f-945aa1cc115a", "Charlotte’s Web"),
+    CHARLOTTESWEB_8("b38a38bd87904805bef98d6e2ae9f29d", "fcf3876d-79fe-4eef-8511-7149a4e02f73", "Charlotte’s Web"),
+    THEUNTOUCHABLES("8147f3269a644eb1953bdf2d61c39096", "ef5b0785-055a-49cb-a35f-b177334e8a5c", "The Untouchables"),
+    CLUELESS("3f29334b042e447eb9af000b2629c8d3", "508e081c-9042-439c-a714-a2350d094268", "Clueless"),
+    CLUELESS_1("e4bad767389547da8009a666141acf6e", "8e7bde81-de64-4b2e-96fa-1b0620c75ab9", "Clueless"),
+    CLUELESS_2("19b45c6be4144bcdb42aab26acdfb7bf", "fc7de293-83f3-424a-9a7a-3b2610426b4a", "Clueless"),
+    MEANGIRLS("877d4b1da5bc4a0e9bf9a2acbbd205bb", "c0fb683d-ce18-4d66-a235-9e7717ca9b31", "Mean Girls"),
+    MEANGIRLS_1("66b45d9d37544a9ca3523cb01f19d87f", "58304ba3-ce48-4033-b72f-20c6331a49fb", "Mean Girls"),
+    MEANGIRLS_2("31667574172c41c0a445a3fd80eea5c4", "4ae24e86-6b45-476e-b7c2-921dbedb844b", "Mean Girls "),
+    ROADTRIP("88f1741c067d452a86a8c15773ca7f08", "3569931f-f34d-4bf1-8257-1c899666e41f", "Road Trip"),
+    ROADTRIP_1("c8a3852cc0c9471eaf69b651b90af4e0", "e7256b93-e668-4d27-875d-e18fe765590e", "Road Trip"),
+    ROADTRIP_2("544bbb9a78a94ca28ac5c4a6bf130b3c", "ccdf24dd-507c-499e-b5e1-1ccf8a82cd7c", "Road Trip"),
+    FERRISBUELLERSDAYOFF("851b29bf74cb46bc8648326c6fca19c1", "367d1e3f-f576-46b5-aafe-49c324d57423", "Ferris Bueller's Day Off"),
+    FORRESTGUMP("1c480aaaf6cd464598c6554bbb5fc665", "b96655c2-7e0e-4759-a6a7-1260c04e120c", "Forrest Gump"),
+    FORRESTGUMP_1("93fc3e921ff24ab4bbf3030c7e39b21d", "186e2aec-e5e4-4bd4-b834-4fa574999fe6", "Forrest Gump"),
+    AIRPLANE("f4508ed29ba34193a9862e88ab97e7d8", "0aa8b7e2-b74d-44e6-8acf-e5ab92e1428a", "Airplane"),
+    THENAKEDGUN_1("f3e49d8a4ddd4058a508fd97f223cba3", "aced7a67-165f-4620-b4d9-ae3d9395737f", "The Naked Gun "),
+    DESPICABLEME_7("c411719f0acc43be9298e97e65f39e1a", "cccdd125-8f49-4f80-9a88-b4457b183188", "Despicable Me"),
+    DESPICABLEME_8("5353c297f3ca4d719da9d8b31aba6535", "e1e27c5b-ee65-458d-9d3f-59290ce19f7d", "Despicable Me"),
+    DESPICABLEME_9("b0dcbe3c400748f6b1a9ed41c7165b9b", "4f519a3f-cb26-4040-97a0-f7c9e8c7b49d", "Despicable Me 2"),
+    NEIGHBORS("6bd5eeed008041019417e188a4b148a4", "e1b2808a-a092-4d58-abe1-362bf8f61051", "Neighbors "),
+    NEIGHBORS_1("5d68ea19aa6447e6b340472ea2200f7a", "cace5b2e-6bc3-4387-b1d2-89aee21a43e7", "Neighbors"),
+    NEIGHBORS_2("dcb26e29101c4095bee0213d6a1d7364", "9543cd04-3ab4-4a5e-a71d-e7d1d7a908a9", "Neighbors"),
+    RIDEALONG("317ea62a11bc4124a5cfdf8dcdb16646", "8e18dec3-8dc3-400e-b5d0-2464f8a2a771", "Ride Along"),
+    RIDEALONG_1("ed0042bee89d41169420f95306a72b6f", "ef5aed69-af49-4a90-b65e-bd023d1234c6", "Ride Along"),
+    BRIDESMAIDS_2("24b8a8a7075945348d76da9a384761cc", "2a4185b5-1e5d-4927-8cb7-fb0a3083b295", "Bridesmaids "),
+    BRIDESMAIDS_3("18a0bbf594544f098b0c6fcab4f507a1", "83e04bcc-e7fc-4b33-bcec-745cb53fa3ae", "Bridesmaids"),
+    BRIDESMAIDS_4("d4f0a0abf1744579b50d0c4b653af9dc", "ad551a41-033c-4f72-b266-eec9a8498a8c", "Bridesmaids"),
+    PITCHPERFECT_8("b38dec16e4f84aa9b22b476a91e995f9", "07d63434-e47f-4c2c-9320-d7031377b887", "Pitch Perfect"),
+    PITCHPERFECT_9("80754c00d9794143935e04c81fc8b963", "5439ff08-30c0-46b6-b77d-9fb997c939f3", "Pitch Perfect"),
+    PITCHPERFECT_10("ec02036955814aecb6585dd9c724761c", "159ce0e8-627f-41a9-8bd2-17e82e604e48", "Pitch Perfect"),
+    PITCHPERFECT_11("0d69ebd47a6f49e5ada1da7ffa00b856", "832cd3b4-407e-438f-aac4-3af29831c8f5", "Pitch Perfect"),
+    TED_2("5d13593dbcf54ebfb625392eafc920f1", "70ba8f35-6440-4066-a531-838204a98b61", "Ted"),
+    TED_3("18e8582c098a432fba8c84f2697f15a8", "302308fa-5794-4386-9854-cdbe3eb2904c", "Ted"),
+    TED_4("e672e395930249b9aaa3cdc384c853d7", "6c6303a6-40f1-4d7b-b773-e7948bfa4230", "Ted"),
+    MEETJOEBLACK("7d46d6bb109940448188957804896023", "51c786aa-29ef-4141-bbe3-29f2b8bb6fd9", "Meet Joe Black"),
+    FORGETTINGSARAHMARSHALL("5c3501f77c3749cd865967a38788b7c6", "22f31a8c-8387-478a-a43d-868f6b58e4a7", "Forgetting Sarah Marshall"),
+    APOLLO("29735e6373f6412fbfdd391f983583c6", "36c23eae-4fbc-4f38-b9d2-762d971d8685", "Apollo 13"),
+    KINGKONG("085d92fc41f941a4b5901b0a9b11e56d", "f002101c-9afc-481f-b171-09b1737e16c5", "King Kong"),
+    THEHULK("d308008edefb4f6db33565110a3dc726", "a240eb85-5818-4768-b227-4e55e700af60", "The Hulk"),
+    BACKTOTHEFUTURE("4168e0a4bae049a6967a8153836344fb", "4e7df5fa-1a8b-49ea-9503-062c7e26780b", "Back to the Future 2"),
+    BACKTOTHEFUTURE_1("5d1f2cf5cbbc484e97e3769411f17ebc", "0e8516f0-b23c-4274-80a9-41bc2923f14f", "Back to the Future 2"),
+    BACKTOTHEFUTURE_2("ff16e2db67a14e9786dc490cc3a9ffc0", "c9c1011b-4607-4e12-baec-523a21b1f63d", "Back to the Future 2"),
+    BACKTOTHEFUTUREPARTII("60ad40749bea4cd299e4d69e1366fd51", "4b0a3d58-25cc-4693-b643-57128eafeb27", "Back to the Future - Part II"),
+    BACKTOTHEFUTUREPARTII_1("4bde048c03cd42d79ea3dff066cf327f", "32db0c0e-7e2a-41cb-b436-89b7638f36a0", "Back to the Future - Part II"),
+    UNCLEBUCK("c86bcb7d002d49d088d290c798cbc19f", "f22232c2-3212-4f38-ad64-010c686d1948", "Uncle Buck"),
+    UNCLEBUCK_1("2b5730f13bac4a4b9db792cc548b9399", "b3c72b66-1ada-46c2-a7e5-58013f465372", "Uncle Buck"),
+    THENUTTYPROFESSOR("eae4a4725be24c6d81379fcf0625ade6", "64e8c17c-30df-44d7-8347-5900f22d8429", "The Nutty Professor"),
+    LIARLIAR("21b450ad3d9044aab9647232395ebb1d", "b0dbbd78-359c-45ee-99da-f10f6bdeebb1", "Liar Liar"),
+    LIARLIAR_1("d2ad3b06055a4da2aca40e4cd9782cbb", "aaa8054a-efd2-4af6-9f45-447e0d62fdce", "Liar Liar"),
+    LIARLIAR_2("62c36fc5330644cc8889617695683f8c", "99c0f13b-156b-4d12-81dd-ad2ab9380c45", "Liar Liar"),
+    KINDERGARTENCOP("9d3072e8dbc240c8946a1c019b1cb883", "643a6521-ca41-4a1e-82ee-daa88e3a75a1", "Kindergarten Cop"),
+    KINDERGARTENCOP_1("32921f0494934b228d86d1cee449d91d", "c5186933-5aa3-45a5-94b0-408d667e6811", "Kindergarten Cop"),
+    HAPPYGILMORE("6c627adc5d7640e4b42189b282392d88", "1135a8e0-d31b-4df4-a92f-384cf1574d29", "Happy Gilmore"),
+    HAPPYGILMORE_1("d521b47bb72542ad8d34ed1893d17477", "25c3c63e-bbb9-4316-8b2b-f93c115c6636", "Happy Gilmore"),
+    HAPPYGILMORE_2("6638d01f0087481e8cfaf11dab69f400", "e3d525fe-c3a1-4b28-8d40-a77956c3d597", "Happy Gilmore"),
+    HAPPYGILMORE_3("dd00d2bf40c94a43ab28f8364330cfa4", "227c70b4-be2e-42f4-a276-5d32dd29cacb", "Happy Gilmore"),
+    SCENTOFAWOMAN("5c463408a90147848794ec94b1d8c8c2", "8bdd624f-cd0e-4792-a39c-5e94e68767e5", "Scent of a Woman"),
+    FAWLTYTOWERS_1("742225f3e6ad495e9b4ecf560a13dbcf", "a4eea952-9fc5-450b-82c9-2c169338fa0a", "Fawlty Towers "),
+    FAWLTYTOWERS_2("9e1451cdcce3475691fe4f8d26764abb", "7e4d48c3-59b4-4670-9465-47f96872b7d0", "Fawlty Towers "),
+    FAWLTYTOWERS_3("d32b43aee57f458196aea42cbb81d138", "3e68dec8-0940-41d2-aba2-b4b24e877e82", "Fawlty Towers "),
+    FAWLTYTOWERS_4("487097612f5646e4a04d10ca5894385e", "8c5b84a7-d989-487d-b1f1-6bdfe54a4b31", "Fawlty Towers "),
+    IMALANPARTRIDGE_1("ce218d32cd1343d4ac8846870e889b9a", "6f23df50-ea38-446e-a272-32ca341f31b0", "I'm Alan Partridge "),
+    IMALANPARTRIDGE_2("d93a6a3f4f4c494d994b3bcc81dbb451", "e61723e0-b670-4415-a2e3-197dd0e48f77", "I'm Alan Partridge "),
+    IMALANPARTRIDGE_3("3e4e6b4255b74985b774153abc3d1279", "1d2191a7-2888-4601-94d6-42a52a1a6416", "I'm Alan Partridge "),
+    SHERLOCKHOLMES("96238a3d9b2a474ca221a424304df396", "a34e6bbe-db6d-48af-bece-fbebecfca599", "Sherlock Holmes"),
+    SHERLOCKHOLMES_1("dd438f90b1b341a298ce36fb6be5b035", "7d5e0fdc-3575-47f0-b2c5-30340ac9f71f", "Sherlock Holmes"),
+    SHERLOCKHOLMES_2("de15e86d28604b59b6931fee09b02b53", "629255cc-4a5e-4250-ac86-0544f0fe2f1e", "Sherlock Holmes"),
+    SHERLOCKHOLMES_3("7842b2fb4a4e4cc6a37c38f294ea8b68", "e5ee02ab-327b-4d31-ae9e-58223847f11c", "Sherlock Holmes"),
+    SHERLOCKHOLMES_4("fac4476b01874b42b548444efd20cf4d", "268f43d0-df89-4cfd-930e-9eb35bf5fe0e", "Sherlock Holmes"),
+    SHERLOCKHOLMES_5("1ba821ce901940cf869b3b1f27bd683b", "3ea3a565-0a61-4eb9-9fd2-6f19c80e6318", "Sherlock Holmes"),
+    SHERLOCKHOLMES_6("b5632b247b024535ad62132f015856fa", "d1bc696f-73e0-46ba-88db-6a183bf22ef9", "Sherlock Holmes"),
+    SHERLOCKHOLMES_7("9c5738764fb646d19143c08003d0a4e8", "8e6b95db-1b2c-4fa2-be80-44b19a98b4fa", "Sherlock Holmes"),
+    SHERLOCK_1("7cb4d37b5d3d4c62b96ff89cd522bfa0", "2f67279d-84c3-4a1f-9e25-84f4a587cd74", "Sherlock "),
+    SHERLOCK_2("7e5e6bb28942428593892d6865ccd47a", "6ebe851e-0b9b-4980-9099-41e2f411960f", "Sherlock "),
+    SHERLOCK_3("1ac7f76a8f144a13a1b00fc8b69f12e1", "5151470d-7e5c-461a-9cf6-5247960a9651", "Sherlock"),
+    SHERLOCK_4("b5f8f2ac9300467fb7f56363975ce6bf", "b01fb4f9-e524-44d9-8a3e-2c7ae4916645", "Sherlock"),
+    THEOFFICE_1("f521869a6990471593ea264236a80994", "44efacd5-8307-469f-a9a9-f63424c7d4c1", "The Office"),
+    THEOFFICE_2("276345f4154b44eba35c6aec7f6b5c4d", "d66e891c-6a73-4c01-8059-da4c1c25795b", "The Office"),
+    THEOFFICE_3("08bc1e3232d9491c9b70372c36dfca48", "c9a457dd-f328-4a1e-9ebe-7f54cf57f956", "The Office"),
+    THEOFFICE_4("f505f4ae7607433b9be05347d502a6ff", "949182ad-871b-433a-8039-2eb5d0408b46", "The Office"),
+    THEOFFICE_5("ad84d1e5c0674ab3b7dde50642bd2d65", "db446598-6fa2-4c93-93ef-255186f422f6", "The Office"),
+    THEOFFICE_6("36cd46e92b3b446f8618b50ea89fe4ee", "e998981f-d265-40b2-afef-9d3cca21c9c5", "The Office"),
+    THEOFFICE_7("ec0ff611b69d4eec95e84ddc36ae1645", "2964acda-a44f-47af-86a1-aefe6891e300", "The Office"),
+    DRWHO("aaa6e784e4354f2985abb054d1399814", "4d9172aa-a81f-41cf-80f0-97bf703566ce", "Dr Who"),
+    DRWHO_1("f3a6a95ddde24edd985702b0cdddb7c1", "9b8cb147-29c1-4fc1-866d-ff436b1326d3", "Dr Who"),
+    DOCTORWHO("28a9c5b70f534aadb10bd115b2142b06", "8b1af8dd-a4eb-4f86-b6c7-ac0b0475193f", "Doctor Who"),
+    DOCTORWHO_1("3db29e70f2c049da816ddba8255c57db", "ca4124a7-4b81-48ed-9370-334362d266ea", "Doctor Who"),
+    DOCTORWHO_2("ad8727db9dca4c198bc8dc72b297c32e", "101b3a7d-07ed-4456-9680-54517166d4a4", "Doctor Who"),
+    DOCTORWHO_3("50c6a194d6564ce4a0c246b11791e906", "81d031a3-e528-4296-9fb4-7e3bd7c77965", "Doctor Who"),
+    DOCTORWHO_4("6c689df080cf4d1b892c222727e19bfa", "f79a37a2-cd49-4a50-8819-567ee58e14ee", "Doctor Who"),
+    DOCTORWHO_5("0e29b74d0b004f44940ff0d70a53870e", "8db9b130-8afa-4e58-ac92-767b8320050f", "Doctor Who"),
+    DOCTORWHO_6("c8dd8f17eda04ba0b7809b01cc777b50", "548a3ee0-69d0-48b0-b3f6-c43942492c92", "Doctor Who"),
+    DOCTORWHO_7("dfa73954408b42f6a90ac16f290fc503", "5c9429a0-6a21-42d2-83d5-a8089c015b3a", "Doctor Who"),
+    DOCTORWHO_8("328f3c97b1224e568e30126f1cb9fcab", "b959d9e3-efcf-4114-aeda-903a948be16f", "Doctor Who"),
+    DOCTORWHO_9("bb4f53d473864d92a39c1ce18427d37a", "fc1c93e0-ce59-47d1-8556-fe535f4e487d", "Doctor Who"),
+    DOCTORWHO_10("3481cdde5e6b4318bb7e421b69b00d49", "b741af8c-c9f4-400a-a84e-e42bc4884411", "Doctor Who"),
+    DOCTORWHO_11("7d771ce4817945a2a0c4219c3270380d", "e87c0b88-0d5d-419a-82f2-bd33f58b8829", "Doctor Who"),
+    TOPGEAR("011a27f7373f4e4e88e7cab229b37519", "e5117bec-add4-4d86-8bbe-26325b73b852", "Top Gear"),
+    TOPGEAR_1("87b6db6402274089be75f9671d9b6185", "7eebf265-5799-49fd-a807-77476bd62d4f", "Top Gear"),
+    TOPGEAR_2("6a22537eccd1457f8ce0a23f290d80a2", "6768c861-63ee-4045-bfe1-c399e8159237", "Top Gear"),
+    TOPGEAR_3("d301ac1eeccb4016a776694a0bf89e1b", "ddd2b8bc-e2dd-40b2-a4eb-b36d6cc4165f", "Top Gear"),
+    TOPGEAR_4("d9d35366354247119d4e3c24c77dafc9", "8e1a6cef-5390-42df-a975-ab0fb5a75902", "Top Gear "),
+    TOPGEAR_5("43e0a41f61fe449d86c9f8ab76d31d14", "a0e98e3d-c663-4fa3-ad50-c2f642f644cb", "Top Gear"),
+    TOPGEAR_6("117c82605fac4660906e6375ba3f19a1", "cfdc2236-efbb-4430-bd1d-59b63a92cc35", "Top Gear"),
+    TOPGEAR_7("daa2eff780c6427391cd0e650f8f3051", "2ffc046e-5f79-4422-9d1a-990cdb3c5c27", "Top Gear"),
+    TOPGEAR_8("fc02274647f44f74be05ceb790e159e3", "2bfe76b9-b281-4f8d-88ee-2a8f820df316", "Top Gear"),
+    TOPGEAR_9("83349a8466f244f7a0d50eb93be29a48", "41bdb1e8-a7d0-4348-821c-50cff6dcf791", "Top Gear"),
+    TOPGEAR_10("c63149abd4d443b2b2b6d347634bd1a4", "9a670842-96e0-4056-975a-29115f697058", "Top Gear"),
+    TOPGEAR_11("60990c0788ab422aa32f050b64a5a469", "acadbe76-e38a-40c9-a3ba-6c53f353a7f3", "Top Gear"),
+    TOPGEAR_12("8e59bf1aca0f438fa383d918df2197cc", "fa894307-b143-47db-a83e-f824a3173c3e", "Top Gear"),
+    THEMUPPETSMOSTWANTED("62e6ed0de2264798a473384a40cda518", "c06b4c86-8f5a-4c77-ae2f-f5a4b927d2cf", "The Muppets Most Wanted "),
+    THEMUPPETSMOSTWANTED_1("d474707cee1742fcba2f344d0929adaa", "7cb0f5ee-5044-4c1c-a2ff-8857f5ae616a", "The Muppets Most Wanted "),
+    THEMUPPETSMOSTWANTED_2("45f93f34dee74519b1ed177dd857e115", "d5dd61d8-1e09-4a80-87da-d1eb807085b6", "The Muppets Most Wanted "),
+    THEMUPPETSMOSTWANTED_3("c814b1befd1e4f1ab08e12eb77e8df1e", "6b7cd38b-78f3-457a-9362-2119e591a71d", "The Muppets Most Wanted "),
+    THEMUPPETS_2("fe0a7a51fa214b46acfec1314422ecf5", "25874031-288f-4751-8667-6f681ba96a51", "The Muppets"),
+    THEMUPPETS_3("7b8ea456196b458782eecf079d5f9e6f", "9aa3ea28-9686-4f97-abd9-98450f37ce80", "The Muppets"),
+    THEMUPPETS_4("cc0cb1db07944c34ac35b8cbf733c033", "21c41257-f99a-4da6-b825-0c1554a49975", "The Muppets"),
+    THEMUPPETS_5("16eacc425c5c400bae2fbd9b8d56e276", "edd7ec2f-7728-44b2-b075-d2d530083293", "The Muppets"),
+    MUPPETMOJIS_2("6523b3e2579f4db998e003ed35ea554c", "d4292514-814f-4ae0-9128-8fd7d4e8b08e", "Muppet Mojis"),
+    MUPPETMOJIS_3("d2e655aa6fa9429387c93bee4ba116f9", "f4202ab1-7d35-4755-b0e6-0eb57b2e3c41", "Muppet Mojis"),
+    MUPPETMOJIS_4("edc644ef4d154a21b78bc77303940a83", "5a596ce8-b091-41e1-a9cb-fe13c5c573d7", "Muppet Mojis"),
+    MUPPETMOJIS_5("1024df6ae4b349389825ab6a5e1ea630", "5c797488-83dc-44d1-87b9-61bb88b7f988", "Muppet Mojis"),
+    MUPPETMOJIS_6("ef6caa4dd3e745b4b251062b62083a66", "7de74d6e-e947-478c-85cf-d0c5b0cfd907", "Muppet Mojis"),
+    MUPPETMOJIS_7("08ae7728a0864275930c79f8ad03babf", "cde33dae-8cff-40e8-984e-ac5876e51b85", "Muppet Mojis"),
+    MUPPETMOJIS_8("0287450992264189888dd11b8f3562c4", "7652efe5-0f81-4659-99a4-4c06c7c8e522", "Muppet Mojis"),
+    MUPPETMOJIS_9("fd97a5440a9d40b09c785307839e0fd3", "ba5002d1-533a-41e0-a639-7dd4a6a9290b", "Muppet Mojis"),
+    MUPPETMOJIS_10("7a2997b52076474494f80485b38e2661", "c6c54324-4beb-4e03-aaec-168043f339de", "Muppet Mojis"),
+    MUPPETMOJIS_11("b64d0223850649ee8d40446e420b9367", "56eef533-8d26-4b1b-b6c7-22a63461786a", "Muppet Mojis"),
+    MUPPETMOJIS_12("583342f7bec24ae987702e053131e6d6", "828b28b4-a480-48a0-8428-ceae59771e6b", "Muppet Mojis"),
+    MUPPETMOJIS_13("e5b9f3c4d39e49208c5aebd62304ce20", "5930c3dc-909d-4761-a3d6-b174a6464fc2", "Muppet Mojis"),
+    MUPPETMOJIS_14("3ff5d7ba92fe4865b7f8dbd1167cfc25", "2f0d5e95-39c0-4f08-bca1-11aefb76c9fe", "Muppet Mojis"),
+    MUPPETMOJIS_15("b7d97b8d956748e5915a0608994769eb", "b33dc797-642f-47e4-ac34-1085690b4e8d", "Muppet Mojis"),
+    MUPPETMOJIS_16("3d6eda6657ea4eae96c0f3bba4430cbb", "d3ec62f6-ffb2-48ad-96df-622157224cc0", "Muppet Mojis"),
+    MUPPETMOJIS_17("29c683b1971c4701877061d0f151d34e", "ea62b5b5-2221-4b4f-985a-731aecadde03", "Muppet Mojis"),
+    MUPPETMOJIS_18("752052f22dd74465bca41b9381e77bf3", "eddeb774-b8d5-4d2b-be5b-6fe92c61ffe2", "Muppet Mojis"),
+    MUPPETMOJIS_19("402309be9cd64f1590281243f0df2bcd", "95e40e5c-aa0e-45b6-a286-f740a5548e65", "Muppet Mojis"),
+    MUPPETMOJIS_20("18920791e75248a4b5e901e97eed384c", "b54cbece-e9fe-461e-8b9c-b568e31d3d77", "Muppet Mojis"),
+    MUPPETMOJIS_21("55fb098c3ebb4806b22fa2ad8eb20ed8", "54d4a0e7-5b04-4f14-82a7-efb7b7a894a1", "Muppet Mojis"),
+    MUPPETMOJIS_22("9f187cb8b8c24f769ec0ad63eec3b0d3", "203a3353-bc62-4e88-b6ce-afa33271998d", "Muppet Mojis"),
+    MUPPETMOJIS_23("2044a43821ba4f2b9aea11e39458e1f5", "e8d5a954-43fa-4122-b447-682fbe9598ee", "Muppet Mojis"),
+    MUPPETMOJIS_24("d65cfa0131e345ebbf9353d7a9336758", "58d2b090-4cbf-4d5f-852c-e8d1ff948653", "Muppet Mojis"),
+    MUPPETMOJIS_25("1596aadf0a964f4dbc900ba42accdb38", "70635e3e-0329-40e4-8d6e-c2e2faefba8f", "Muppet Mojis"),
+    MUPPETMOJIS_26("634fc06475d5444bb8410c70b7284a28", "e9e4e0ef-43ca-4d52-a4af-e98255ff328d", "Muppet Mojis"),
+    MUPPETMOJIS_27("77a4556bd01e4f83a0e5446c1c5ab411", "2ad67319-b453-47ca-8cf2-96b8fe79ba13", "Muppet Mojis"),
+    MUPPETMOJIS_28("071e5c78e7654c4398acb25c207547ea", "669afbba-edcd-4025-99f5-c11372cedea1", "Muppet Mojis"),
+    MUPPETMOJIS_29("c58c83c624d5428fadfe61b7a41c5c34", "8bb0a289-cffd-45c7-b650-0cc9e405b8b4", "Muppet Mojis"),
+    MUPPETMOJIS_30("a2b1fa8acece459aa30102b65246e2a2", "01bdb244-41e4-4874-ac9b-f5d8130ebe67", "Muppet Mojis"),
+    MUPPETMOJIS_31("44abd854b2bf46a8a553307acb8663d7", "21e0fb5f-b616-4651-a01d-a5ec5f1292b4", "Muppet Mojis"),
+    MUPPETMOJIS_32("a076d7f256324cd9a6c864d4128b4878", "1358f261-3da1-4db1-944a-0d16a19d0fc3", "Muppet Mojis"),
+    MUPPETMOJIS_33("e124e7eec6cb4c1c8c2de86c6225a865", "49624691-a253-402f-a3b1-b1612b11262d", "Muppet Mojis"),
+    MUPPETMOJIS_34("84956d2880b843929b58c896091df4da", "8cf635c2-90f0-4e1f-9df9-1a7c1c114901", "Muppet Mojis"),
+    MUPPETMOJIS_35("58e8987f1e23493f9a8fb563b272028c", "23f5a11b-b821-4d65-a9c5-f5e21c651b19", "Muppet Mojis"),
+    MUPPETMOJIS_36("e511b5cce8064d4eae55cb5048d5d0a0", "b80755ad-ca52-4317-81cb-71187cc1d122", "Muppet Mojis"),
+    MUPPETMOJIS_37("a5b3457e5ff24e009daa55a57361eac2", "56767f45-2d35-4ffd-8748-fcf4417df86f", "Muppet Mojis"),
+    MUPPETMOJIS_38("62086834e5a347fabe39c9ad67af1ce2", "7fdaba4a-e575-4d09-996a-7d15f755f2f6", "Muppet Mojis"),
+    MUPPETMOJIS_39("06576e9bfa81420b80d6b504e14970d1", "786e5012-58d3-4c69-8ad6-69ce59dcfb66", "Muppet Mojis"),
+    MUPPETMOJIS_40("531b98dca26e48629b26048383dda4fa", "4b28136b-d2ac-4529-9789-43337ef2ec55", "Muppet Mojis"),
+    MUPPETMOJIS_41("685a94c6ccb94a50838d18a9880c2474", "17eb8315-8a29-4ac5-9689-14d47e1131bf", "Muppet Mojis"),
+    MUPPETMOJIS_42("82e347c3efb941688231cb7ea1554f5d", "69071a4a-2d48-4470-8d7a-4da039d76cf3", "Muppet Mojis"),
+    MUPPETMOJIS_43("ab3a7949a6b8472582434b8a75c8cee9", "6edfca65-e39f-4273-8526-a5543d98fb1d", "Muppet Mojis"),
+    DHOOM_1("2e5f6b0ee19141998cd3111bb4517c2b", "5a84b387-af09-4d48-b136-5eaaa843f7b4", "Dhoom 3"),
+    DHOOM_2("47825593e8b74bb5a2f87dd454f85f03", "49b51bc7-cd53-496c-82b5-dfebd75955ba", "Dhoom 2"),
+    RAONE_1("abe16ca68ce34fc780402649a2ffadba", "90a581bd-6981-47a4-b857-52e624747d60", "Ra.One"),
+    BACHNAAEHASEENO("641e936e6d42470997a123f0104583b0", "b400166d-6819-40ec-8277-e9d27a08b4f7", "Bachna Ae Haseeno"),
+    DILWALEDULHANIALEJAYENGE("8474291a13ce462bb66e17f69af47ceb", "9901baf5-debc-4943-b9eb-74d2777df27a", "Dilwale Dulhania Le Jayenge"),
+    RABNEBANADIJODI("d8a0a912d45b404eb4c59c22b40ac0b4", "b45fe085-a63c-4b7d-ad6e-eed527638a9e", "Rab Ne Bana Di Jodi"),
+    RABNEBANADIJODI_1("28265af366c74d178646652418701f17", "d770ea9f-b82d-4b22-b3e7-9a439ba13238", "Rab Ne Bana Di Jodi"),
+    RAONE_2("7613a8592efc47148f9bfc150a6b48b5", "c189b733-9788-4218-8f40-dca7c7139c48", "Ra.One"),
+    RAONE_3("114842e9139044b3831463dc26d8913b", "037f886e-50f9-4bfe-85ba-e95b6de29895", "Ra.One"),
+    RAONE_4("6700e034582d4060911d7079679d3662", "6481c136-37ce-46bc-8096-14e6fadcb19b", "Ra.One"),
+    RAONE_5("c545080c909e47ea92b34f88a362ceec", "3e4eb7d2-6159-46ba-b481-defcdcd764f2", "Ra.One"),
+    DEVDAS("4548f5bf76b942e69a287af5546c95f0", "1c4fc9fd-cbc7-416b-b6dc-6ac162ae74c8", "Devdas"),
+    RAONE_6("58ab10487dde44c79264cb5ba058f875", "9fc96d1a-7fb5-40ed-9445-6642fac54797", "Ra.One"),
+    CHAKDEINDIA("3d572c3cb23c48a1a0caafd67a5d7a80", "cddbc24e-4e4b-4161-800f-5919ee62425d", "Chak De! India "),
+    ALADIN("4672e516f0254bd2bde0ff2fc33a4207", "71446139-4c55-49a7-8f64-6fcd4e4910f7", "Aladin"),
+    JHOOMBARABARJHOOM("dd1fc37f6da947e8a3a81e44518f8ba6", "c4461c0a-1801-4a8a-bfcb-9c1bb9519e17", "Jhoom Barabar Jhoom "),
+    ALADIN_1("2435594882324033a20ac60fbf7d0451", "c235982f-0fce-4c67-a2a7-6a3386ac3430", "Aladin"),
+    ALADIN_2("45aa94aadc2747d49668bcbabb3e5f7e", "e1d87b20-0408-478a-84d3-7c8b51fb2996", "Aladin"),
+    KABHIKABHIE("df37bb7e50eb43c0b002e65bd9534ac0", "e0da7fc6-a955-4801-b574-6aef901def37", "Kabhi Kabhie"),
+    DHOOM_3("26175a1f7e554ee8bd8d26154a7db961", "f318176f-ca9d-4533-afe9-ac1ec7773ca9", "Dhoom 2"),
+    DHOOM_4("ff07eb409d0d4c0b8ecf7056217f4e3c", "bf8f17df-63e5-45d6-b5fa-fca7fc1f1860", "Dhoom 2"),
+    DHOOM_5("16c73eeb85b74da9b9156d31e8043605", "8741bbbd-3286-43ac-8d09-6c2d27cada20", "Dhoom 2"),
+    DEVDAS_1("283e11e227b6450192b848f18d63874a", "3399c735-cfa4-485f-9374-2681bd4fc9e7", "Devdas"),
+    AAJANACHLE("0a5869ff5b50450abae18bcc0954ff62", "0324ac8c-811b-4e05-a147-f75727e8edf6", "Aaja Nachle"),
+    DEVDAS_2("4520a01995fd43e4b013e7f2746f5a6f", "202c19d2-b05e-4f90-acc9-989ffa3043e8", "Devdas"),
+    TANUWEDSMANURETURNS("4391bc29bcc340e78b163fb7201f7af6", "e18583c4-5f15-4855-8eaf-9281457918d3", "Tanu Weds Manu Returns"),
+    TANUWEDSMANURETURNS_1("bd29d3df0669409f95cb1c2d23d95e8f", "e2651889-a878-4e9f-8496-eb991f3c0978", "Tanu Weds Manu Returns"),
+    TANUWEDSMANURETURNS_2("623c9749734546c399a36fd289d79dc3", "bf33f977-3476-445b-9360-95dc537c0e07", "Tanu Weds Manu Returns"),
+    BANDBAAJABAARAAT("e731523c91184d718be8c149d9301d94", "4fd07f13-b0e8-400a-8fc9-16b5ca8db8e5", "Band Baaja Baaraat"),
+    RABNEBANADIJODI_2("052b26edcfb241cf96bb44e5e635c9c3", "38d30040-f808-4903-a2d0-3e1158383eb7", "Rab Ne Bana Di Jodi"),
+    MEREBROTHERKIDULHAN("28ec05192f0144e58d8034fee8303170", "06ee9997-ccfb-4da2-8758-162c6d71eb10", "Mere Brother Ki Dulhan"),
+    MEREBROTHERKIDULHAN_1("6880383ea15e475f878a45a42dcdde91", "1528d31a-c2c3-4080-87b4-f4eb15d9d0b3", "Mere Brother Ki Dulhan"),
+    MEREBROTHERKIDULHAN_2("df82ec9e445646e79815fb05e5dd8061", "0e761f2a-5467-4ab8-91ea-ce0ef6880615", "Mere Brother Ki Dulhan"),
+    COCKTAIL("94082d1e719b4f99be18a784fae9d9cd", "afc1550b-d37e-422b-bde3-ee867c591597", "Cocktail "),
+    COCKTAIL_1("a9b113a11ec64c61be4333f1253119ee", "ddecf9d7-dcc9-428f-a688-a40c091a6666", "Cocktail "),
+    COCKTAIL_2("b38781f9fad9486db951cf47e3e1d574", "74b05edf-a60b-4fcb-bca7-d162efd39399", "Cocktail "),
+    VICKYDONOR("5bee463a060d4caea6ff6c13955f8acf", "8237e223-9493-406a-a029-65b6f4620da7", "Vicky Donor"),
+    BEWAKOOFIYAAN("26f3a8151a6c4058b690c8d15a9c321f", "64f39fac-668a-46b9-819e-1fa4285c4b67", "Bewakoofiyaan"),
+    KILLDIL("2263a949fb0b4351b885b1bf1bd6c823", "dee33ef4-4e2a-4684-ad95-61231b9ed628", "Kill Dil"),
+    KILLDIL_1("fb4c5a9100884f4ab7f22251b82cd7f0", "dd4fe723-1892-45dc-9460-412f765ca533", "Kill Dil "),
+    KILLDIL_2("05b6ef201a4042d5839a203ed141f60d", "06e5fb00-3e16-419a-aa90-2fc975abf09d", "Kill Dil "),
+    BANDBAAJABAARAAT_1("b83a4cadba49421aa87ea5b42b3d4f9a", "a8c3e36a-6551-4bc6-939d-e0896626e175", "Band Baaja Baaraat"),
+    KILLDIL_3("0cfc6872ea7a4d3b939bf753ab08d6ed", "1d99a923-c1f9-4124-a09b-71da0f1cac31", "Kill Dil "),
+    SHUDDHDESIROMANCE("79126721fc6f4129bd1b4277ae72b821", "23a30542-c976-4232-904d-f75e9260fd71", "Shuddh Desi Romance"),
+    SHUDDHDESIROMANCE_1("0e9ae09e92554e4bb464073e40b596f2", "b2c73843-f8af-46e2-92d4-5b23308a5d6a", "Shuddh Desi Romance"),
+    ROCKSTAR("c30affea468a44efa2e9e274e6de012e", "841b262a-c96f-4481-bb0a-811f8108a74b", "Rockstar"),
+    BACHNAAEHASEENO_1("944ccbe1290f43eea54297526dabc0b4", "c4422ec9-4833-4baf-81fc-2a4bf0de8479", "Bachna Ae Haseeno"),
+    HOUSEFULL_2("30c197b4173c4fc09fffbec84a6b366f", "014241e5-602b-4975-ae1b-86daea8a0d86", "Housefull"),
+    HOUSEFULL_3("ecfcc40d42c948279d1cd037fb6d9fe4", "1824aefd-d20c-417b-97aa-161d54963466", "Housefull "),
+    HOUSEFULL_4("2425c945fdbf4a6ab386304ee74683f0", "5b66a790-fdae-4ccf-aa93-59e0d690fc3c", "Housefull"),
+    HOUSEFULL_5("4c7cfb904c7c4902975156bfaf6dee55", "2f513fd9-d1ec-4cde-8b3f-66347b550308", "Housefull"),
+    HOUSEFULL_6("7c06975dd0cb46ec9e1040ac3fd3921d", "460bce98-1a16-46bc-b7b8-340913ceacaf", "Housefull "),
+    DHOOM_6("ecdeec0e902043049eecae01c65d3b58", "3bcf51cd-ae5d-4687-863f-536ad6cb5cb5", "Dhoom 3"),
+    DHOOM_7("1a4a7ba0fc5b4c7bbca494f3be1c4770", "44f3b7d9-18c3-456b-a89c-757953170607", "Dhoom 3"),
+    RAONE_7("5c62cde33e61401a921fb5ef9a0c8230", "7d34c527-a88b-45e9-ae03-086ef3d89d54", "Ra.One"),
+    GOLMAAL("3249c494bb6e4d7bb241d84b94ca717d", "c0d4ffe8-5c8b-4822-b7d3-489e95706b28", "Golmaal 3"),
+    GOLMAAL_1("7217938c39cb4078b0408701ad540c01", "a81a5bbc-f8fc-4151-a8fe-767a01fb0009", "Golmaal 3"),
+    BEWAKOOFIYAAN_1("40fc033506c4405890805944885c91a4", "4c4acbf2-fe66-44ac-9103-f9f836caa1c8", "Bewakoofiyaan"),
+    BEWAKOOFIYAAN_2("a7cf012a7e514f36a80830ba3bf3e252", "a94bfac5-d2e8-4da2-9d30-078d76a11114", "Bewakoofiyaan"),
+    BEWAKOOFIYAAN_3("7bafbc58bb47424eb17eaa31e38d19a7", "428a80cf-6642-4f75-8e6d-5ee3aaeca171", "Bewakoofiyaan"),
+    TANUWEDSMANURETURNS_3("fe1cabb2d0d04e6b9f69018aa30fdb9e", "46b8bb35-f0f7-432b-bb7c-e7f25f862c8b", "Tanu Weds Manu Returns"),
+    TANUWEDSMANURETURNS_4("19b77628025848c58406abf5880e9dae", "be4ead38-652e-4e38-aa0e-4c1c4dfd89b9", "Tanu Weds Manu Returns"),
+    TANUWEDSMANURETURNS_5("89d720a959f747afbd34bb5756e717bc", "ddcdfd61-f67a-4e3a-9518-21a06b9d3ad2", "Tanu Weds Manu Returns"),
+    BADLAPUR("f9caa4fa7ade4436ae33d35544274ab3", "e94c2aa3-040f-4bff-849d-042caf002eff", "Badlapur"),
+    GOLMAAL_2("f1ac06a05f014159aa791fa1618e43a6", "ee9a5bb9-9755-4a15-ba3b-ab1cb19cc41a", "Golmaal 3"),
+    KILLDIL_4("81926f3b46e74ad98ddba90af12e5e40", "45c3ad72-d388-4a23-8480-5fa53601e599", "Kill Dil "),
+    DEVDAS_3("9da385b084594df7aadabd752e5ac9f7", "a5ca0a83-2466-4c47-98ed-d523caf61cf0", "Devdas"),
+    KILLDIL_5("825473cc486d48b0acf25f52045a21be", "b139d61b-3df8-4440-a1c5-9ef318163181", "Kill Dil "),
+    AGENTVINOD("37ef0832a0ac486fa07953c73bf6cee9", "2e4a8407-5931-4930-8ebc-d2e48e0397d3", "Agent Vinod"),
+    VICKYDONOR_1("14271874627f4a2d893db568eeff9954", "3c026c7d-aa37-4fe1-8bfb-133460aed512", "Vicky Donor"),
+    MOHABBATEIN("b3cffea2fd5044d08db7458e4c373cdf", "5b000c95-f530-4a7f-b302-842675aaa249", "Mohabbatein ");    
 
     private String id;
     private String etag;
diff --git a/src/main/java/com/samczsun/skype4j/formatting/lang/en/Emoticon.java b/src/main/java/com/samczsun/skype4j/formatting/lang/en/Emoticon.java
index a0e743f..940fd53 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/lang/en/Emoticon.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/lang/en/Emoticon.java
@@ -17,230 +17,435 @@
 package com.samczsun.skype4j.formatting.lang.en;
 
 import com.samczsun.skype4j.formatting.IEmoticon;
+import com.samczsun.skype4j.formatting.lang.en.Emoticon;
 
-import java.util.*;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
 public enum Emoticon implements IEmoticon {
 
-    MONKEY("monkey", "137eeecb-fe07-432c-889d-b0e3e32334af", "Monkey", "(monkey)", "(Monkey)", "(ape)", "(Ape)", ":(|)", "(monkey)", "(Monkey)", "(ape)", "(Ape)", ":(|)"),
-    SMILE("smile", "f409d940-3efd-4853-95a4-e5f840835a83", "Smile", ":)", ":-)", ":=)", "(smile)", "(Smile)", ":)", ":-)", ":=)", "(smile)", "(Smile)"),
-    SAD("sad", "e34deb20-f8f5-4b53-ab00-468ccacfac69", "Sad", ":(", ":-(", ":=(", "(sad)", "(Sad)", ":<", ":-<", ":(", ":-(", ":=(", "(sad)", "(Sad)", ":<", ":-<"),
-    LAUGH("laugh", "516b20f2-a771-4840-95e6-1b75171eb440", "Laugh", ":D", ":-D", ":=D", ":d", ":-d", ":=d", "(laugh)", "(Laugh)", ":>", ":->", "(lol)", "(LOL)", "(Lol)", ":D", ":-D", ":=D", ":d", ":-d", ":=d", "(laugh)", "(Laugh)", ":>", ":->", "(lol)", "(LOL)", "(Lol)"),
-    CWL("cwl", "e5385d74-9bb0-4065-bc44-c05bc48e1e6e", "Crying with laughter", "(cwl)", "(Cwl)", "(cryingwithlaughter)", "(Cryingwithlaughter)"),
-    COOL("cool", "9c61c56e-7914-49a5-8b07-7ee63086c8b7", "Cool", "(cool)", "(Cool)", "8-)", "8=)", "B-)", "B=)", "(cool)", "(Cool)", "8-)", "8=)", "B-)", "B=)"),
-    SURPRISED("surprised", "f0e607d2-6c29-48d7-9790-db6bafe45d5c", "Surprised", ":O", ":-O", ":=O", ":o", ":-o", ":=o", "(surprised)", "(Surprised)", ":O", ":-O", ":=O", ":o", ":-o", ":=o", "(surprised)", "(Surprised)"),
-    WINK("wink", "e7b6dac3-8611-49c6-a028-620686cea594", "Wink", ";)", ";-)", ";=)", "(wink)", "(Wink)", ";)", ";-)", ";=)", "(wink)", "(Wink)"),
-    CRY("cry", "9137cb01-0ab6-4374-9c34-4bd7ad4ceaad", "Crying", ";(", ";-(", ";=(", "(cry)", "(Cry)", ":'(", ";(", ";-(", ";=(", "(cry)", "(Cry)", ":'("),
-    SWEAT("sweat", "51c1de7f-d0aa-4d57-a3b1-1baf840b90f5", "Sweating", "(:|", "(sweat)", "(Sweat)", "(:|", "(sweat)", "(Sweat)"),
-    SPEECHLESS("speechless", "8a568d2c-32f0-44ca-a924-5781781cbf22", "Speechless", ":|", ":-|", ":=|", "(speechless)", "(Speechless)", ":|", ":-|", ":=|", "(speechless)", "(Speechless)"),
-    KISS("kiss", "5b17b956-c425-415a-8224-4caf989128c8", "Kiss", "(kiss)", "(Kiss)", ":*", ":-*", ":=*", "(xo)", "(K)", "(k)", "(kiss)", "(Kiss)", ":*", ":-*", ":=*", "(xo)", "(K)", "(k)"),
-    TONGUEOUT("tongueout", "d6f3c046-1e7e-4419-9a7e-f397fb2331a9", "Cheeky", ":P", ":-P", ":=P", ":p", ":-p", ":=p", "(tongueout)", "(Tongueout)", ":P", ":-P", ":=P", ":p", ":-p", ":=p", "(tongueout)", "(Tongueout)"),
-    BLUSH("blush", "fc46c8b8-9002-4948-b671-27d6e0e6dec4", "Blushing", ":$", ":-$", ":=$", ":\">", "(blush)", "(Blush)", ":$", ":-$", ":=$", ":\">", "(blush)", "(Blush)"),
-    WONDER("wonder", "5b61e42a-2d2e-4131-ace1-06e371f8c4d5", "Wondering", ":^)", "(wonder)", "(Wonder)", ":^)", "(wonder)", "(Wonder)"),
-    SLEEPY("sleepy", "66358b4d-1d98-4d81-9965-f82e75a938c7", "Sleepy", "|-)", "I-)", "I=)", "(snooze)", "(Snooze)", "|-)", "I-)", "I=)", "(snooze)", "(Snooze)", "(sleepy)", "(Sleepy)"),
-    DULL("dull", "8b43b914-c273-462d-9ca0-9d6c894c7be0", "Dull", "|-(", "|(", "|=(", "(dull)", "(Dull)", "|-(", "|(", "|=(", "(dull)", "(Dull)"),
-    INLOVE("inlove", "8da36590-765e-4494-a400-a8b92b5f4b51", "In love", "(inlove)", "(Inlove)", "(love)", "(Love)", ":]", ":-]", "(inlove)", "(Inlove)", "(love)", "(Love)", ":]", ":-]"),
-    EG("eg", "ee33852b-750c-428f-8901-daecd7fa11f6", "Evil grin", "]:)", ">:)", "(grin)", "(Grin)", "]:)", ">:)", "(evilgrin)", "(Evilgrin)", "(evil)", "(Evil)", "(grin)", "(Grin)", "(eg)", "(Eg)"),
-    YAWN("yawn", "58f34a45-86a8-4b66-9a36-664020570614", "Yawn", "(yawn)", "(Yawn)", "(yawn)", "(Yawn)"),
-    PUKE("puke", "4189f621-f0d3-4bc3-a560-e53b3174c05c", "Vomiting", "(puke)", "(Puke)", ":&", ":-&", ":=&", "+o(", "(puke)", "(Puke)", ":&", ":-&", ":=&", "+o("),
-    DOH("doh", "a50c290b-fb97-404a-a3c4-2cd68e75e42c", "Doh!", "(doh)", "(Doh)", "(doh)", "(Doh)"),
-    ANGRY("angry", "4c5f6b94-296b-4e8a-84fc-c3d7f175c1a4", "Angry", "(angry)", "(Angry)", ":@", ":-@", ":=@", "x(", "x-(", "X(", "X-(", "x=(", "X=(", ";@", ";-@", "(angry)", "(Angry)", ":@", ":-@", ":=@", "x(", "x-(", "X(", "X-(", "x=(", "X=(", ";@", ";-@"),
-    WASNTME("wasntme", "8a8ac2d9-8ce3-473f-acd9-f17e8c5937f9", "It wasn't me!", "(wasntme)", "(Wasntme)", "(wm)", "(Wm)", "(wasntme)", "(Wasntme)", "(wm)", "(Wm)"),
-    PARTY("party", "abf14cd2-0595-470e-9166-c02f7dde12ad", "Party", "(party)", "(Party)", "<O)", "<o)", "<:o)", "(party)", "(Party)", "<O)", "<o)", "<:o)"),
-    WORRY("worry", "2a3ac1be-39f7-491c-9c1a-8cd9eaecee32", "Worried", "(worry)", "(Worry)", ":S", ":s", ":-s", ":-S", ":=s", ":=S", "(worry)", "(Worry)", ":S", ":s", ":-s", ":-S", ":=s", ":=S", "(worried)", "(Worried)"),
-    MMM("mmm", "a3f65095-ba03-4a45-84ed-d9231468665b", "Mmmmm…", "(mm)", "(Mm)", "(mmm)", "(Mmm)", "(mmmm)", "(Mmmm)", "(mm)", "(Mm)", "(mmm)", "(Mmm)", "(mmmm)", "(Mmmm)"),
-    NERDY("nerdy", "fbded7cb-0bad-4603-b739-b37305a6eaad", "Nerdy", "(nerd)", "(Nerd)", "8-|", "B-|", "8|", "B|", "8=|", "B=|", "(nerd)", "(Nerd)", "8-|", "B-|", "8|", "B|", "8=|", "B=|", "(nerdy)", "(Nerdy)"),
-    LIPSSEALED("lipssealed", "df781c34-4c9b-4d39-9f8f-6b13ea70061f", "My lips are sealed", ":x", ":-x", ":X", ":-X", ":#", ":-#", ":=x", ":=X", ":=#", ":x", ":-x", ":X", ":-X", ":#", ":-#", ":=x", ":=X", ":=#", "(lipssealed)", "(Lipssealed)"),
-    DEVIL("devil", "10b17da0-7b92-4098-ab1a-69b53394563e", "Devil", "(devil)", "(Devil)", "(6)", "(devil)", "(Devil)", "(6)"),
-    ANGEL("angel", "8a388a15-fa48-4d0f-a9e5-cab4ab494102", "Angel", "(angel)", "(Angel)", "(A)", "(a)", "(angel)", "(Angel)", "(A)", "(a)"),
-    ENVY("envy", "2ee49ce0-3547-4ef8-8d25-3c27659e23ef", "Envy", "(envy)", "(Envy)", "(V)", "(v)", "(envy)", "(Envy)", "(V)", "(v)"),
-    MAKEUP("makeup", "8d86986e-8e0f-4d33-98ff-1597feb87bf5", "Make-up", "(makeup)", "(Makeup)", "(kate)", "(Kate)", "(makeup)", "(Makeup)", "(kate)", "(Kate)"),
-    MOVEMBER("movember", "5d3575c7-b90a-42de-9e42-aa456e906e05", "Movember", "(movember)", "(Movember)", "(mo)", "(Mo)", "(november)", "(November)", "(moustache)", "(Moustache)", "(mustache)", "(Mustache)", "(bowman)", "(Bowman)", ":{", "(movember)", "(Movember)", "(mo)", "(Mo)", "(november)", "(November)", "(moustache)", "(Moustache)", "(mustache)", "(Mustache)", "(bowman)", "(Bowman)", ":{"),
-    THINK("think", "98a94905-5be0-4970-b90e-792c8e94cd2b", "Thinking", "(think)", "(Think)", ":-?", ":?", ":=?", "*-)", "(think)", "(Think)", ":-?", ":?", ":=?", "*-)"),
-    ROFL("rofl", "94c4b9fb-4d98-4bf4-a20a-3359ee2cdb75", "Rolling on the floor laughing", "(rofl)", "(Rofl)", "(rotfl)", "(Rotfl)", "(rofl)", "(Rofl)", "(rotfl)", "(Rotfl)"),
-    HAPPY("happy", "96530617-f66c-44b3-a0b6-5e35c2cf70c8", "Happy", "(happy)", "(Happy)", "(happy)", "(Happy)"),
-    SMIRK("smirk", "764b0a29-05f3-40a0-8017-fadbdb57032a", "Smirking", "(smirk)", "(Smirk)", "(smirk)", "(Smirk)"),
-    NOD("nod", "2ec177ee-7004-417c-8f68-3386527c0ace", "Nodding", "(nod)", "(Nod)", "(nod)", "(Nod)"),
-    SHAKE("shake", "e981c8fc-41de-4b1c-8741-e3f48b3fa064", "Shake", "(shake)", "(Shake)", "(shake)", "(Shake)"),
-    WAITING("waiting", "2c79c62b-ce20-43ea-900b-cc5bcb44dbc9", "Waiting", "(waiting)", "(Waiting)", "(forever)", "(Forever)", "(impatience)", "(Impatience)", "(waiting)", "(Waiting)", "(forever)", "(Forever)", "(impatience)", "(Impatience)"),
-    EMO("emo", "1299d1cc-bf60-44f1-9947-2dcdd886030b", "Emo", "(emo)", "(Emo)", "(emo)", "(Emo)"),
-    FINGERSCROSSED("fingerscrossed", "776da219-95f7-43b9-9913-ddc7bc32e684", "Fingers crossed", "(yn)", "(Yn)", "(fingers)", "(Fingers)", "(fingerscrossed)", "(Fingerscrossed)", "(crossedfingers)", "(Crossedfingers)", "(yn)", "(Yn)", "(fingers)", "(Fingers)", "(fingerscrossed)", "(Fingerscrossed)", "(crossedfingers)", "(Crossedfingers)"),
-    HI("hi", "1fa9928d-76bf-4d32-bc64-2a03dde36289", "Hi", "(wave)", "(Wave)", "(hi)", "(Hi)", "(bye)", "(BYE)", "(Bye)", "(Hi)", "(HI)", "(wave)", "(Wave)", "(hi)", "(Hi)", "(HI)", "(bye)", "(Bye)", "(BYE)"),
-    FACEPALM("facepalm", "46a0a8f8-0b72-4c5b-b1c6-fde7f03fd6ae", "Facepalm", "(facepalm)", "(Facepalm)", "(fail)", "(Fail)", "(facepalm)", "(Facepalm)", "(fail)", "(Fail)"),
-    WAIT("wait", "a3186d86-6736-499b-a071-cddc4776cd10", "Wait", "(wait)", "(Wait)", "(wait)", "(Wait)"),
-    GIGGLE("giggle", "1705c516-7e4d-4544-b264-165d29016908", "Giggle", "(chuckle)", "(Chuckle)", "(giggle)", "(Giggle)", "(chuckle)", "(Chuckle)", "(giggle)", "(Giggle)"),
-    CLAP("clap", "73f69d48-8337-4a6d-9080-bef4d3471f8e", "Clapping", "(clap)", "(Clap)", "(clap)", "(Clap)"),
-    WHEW("whew", "22f79111-3e69-401a-b86b-66cf2d51a4f7", "Relieved", "(whew)", "(Whew)", "(phew)", "(Phew)", "(whew)", "(Whew)", "(phew)", "(Phew)"),
-    HIGHFIVE("highfive", "96835320-3fc1-4906-beda-4514a1f7e8cf", "High five", "(highfive)", "(Highfive)", "(hifive)", "(Hifive)", "(h5)", "(H5)", "(highfive)", "(Highfive)", "(hifive)", "(Hifive)", "(h5)", "(H5)"),
-    TMI("tmi", "a407add4-959c-4ae5-8022-d91023873f9b", "Too much information", "(tmi)", "(Tmi)", "(tmi)", "(Tmi)"),
-    CALL("call", "b1c9042e-91a3-4359-8f82-901d89e9b35a", "Call", "(call)", "(Call)", "(T)", "(t)", "(call)", "(Call)", "(T)", "(t)"),
-    HEADBANG("headbang", "661871dc-55fd-4399-a17e-6769146c7296", "Banging head on wall", "(headbang)", "(Headbang)", "(banghead)", "(Banghead)", "(headbang)", "(Headbang)", "(banghead)", "(Banghead)"),
-    IDEA("idea", "cfa1f733-59a1-4d1b-b549-cdec2a24b77b", "Idea", "(idea)", "(Idea)", ":i", ":I", "*-:)", "(idea)", "(Idea)", ":i", ":I", "*-:)"),
-    LALALA("lalala", "a641673d-2bd9-4425-9b52-5fbc39628266", "Lalala", "(lalala)", "(Lalala)", "(lalalala)", "(Lalalala)", "(lala)", "(Lala)", "(notlistening)", "(Notlistening)", "(lalala)", "(Lalala)", "(lalalala)", "(Lalalala)", "(lala)", "(Lala)", "(notlistening)", "(Notlistening)"),
-    PUNCH("punch", "c4fbef65-4b05-4e50-9f92-5566cec865fe", "Punch", "(punch)", "(Punch)", "*|", "*-|", "(punch)", "(Punch)", "*|", "*-|"),
-    ROCK("rock", "26ec0fb1-8495-48a0-a113-f8014957ad78", "Rock", "(rock)", "(Rock)", "(rock)", "(Rock)"),
-    SWEAR("swear", "ff185987-b3ad-427d-b4fe-c26bcb6714ed", "Swearing", "(swear)", "(Swear)", "(swear)", "(Swear)"),
-    TALK("talk", "f99d820b-2dae-4145-a8ab-a9358a8f729b", "Talking", "(talk)", "(Talk)", "(talk)", "(Talk)"),
-    TALKTOTHEHAND("talktothehand", "9499eaf1-36f1-4486-b8ed-8c024bcca53d", "Talk to the hand", "(talktothehand)", "(Talktothehand)", "(talktothehand)", "(Talktothehand)"),
-    SARCASTIC("sarcastic", "e01c8eae-ef36-4193-b629-d4624af5daa2", "Sarcastic", "(sarcastic)", "(Sarcastic)", "(sarcasm)", "(Sarcasm)", "(slowclap)", "(Slowclap)"),
-    LISTENING("listening", "02977a1b-0000-4349-acc0-dde4a2c93858", "Listening", "(listening)", "(Listening)"),
-    SLAP("slap", "31bedc7f-fd21-471a-9b38-d3ef9dd57cfb", "Slap", "(slap)", "(Slap)", "(thappad)", "(Thappad)"),
-    WHISTLE("whistle", "9b325dc7-2ba4-4148-9cfd-67cd9424f8bb", "Whistle", "(whistle)", "(Whistle)", "(seeti)", "(Seeti)"),
-    DONTTALKTOME("donttalktome", "f0870593-e1a2-4bb0-86f6-d3d63d3af666", "Don't talk to me", "(donttalk)", "(Donttalk)", "(donttalktome)", "(Donttalktote)"),
-    NAZAR("nazar", "b86f9dbd-be0a-4550-a640-bd2155e4521c", "Blessing", "(nazar)", "(Nazar)"),
-    BANDIT("bandit", "bbeffe53-ce81-43a8-8a82-4e8beac07afb", "Bandit", "(bandit)", "(Bandit)", "(bandit)", "(Bandit)"),
-    LEARN("learn", "1f1419ee-0c8b-4096-aa85-4f4266010862", "Global Learning", "(learn)", "(Learn)"),
-    LIPS("lips", "eda275e3-f970-40ba-9d91-26a8ccb7e6d2", "Kissing lips", "(lips)", "(Lips)"),
-    HEART("heart", "bfb91b6c-0b33-42b3-80cd-558544b032ea", "Heart", "(heart)", "(Heart)", "(h)", "(H)", "(l)", "(L)", "<3", "(heart)", "(Heart)", "(h)", "(H)", "(l)", "(L)", "<3"),
-    BROKENHEART("brokenheart", "d8a25d66-daac-42a0-a2e1-eb75d10009bb", "Broken heart", "(u)", "(U)", "(brokenheart)", "(Brokenheart)", "(u)", "(U)", "(brokenheart)", "(Brokenheart)"),
-    JOY("joy", "5858f185-9685-47e2-a973-f6c73d488883", "Joy", "(joy)", "(Joy)", "(joy)", "(Joy)"),
-    ANGER("anger", "939e0512-00e4-4ae7-9e99-9468979ebe59", "Anger", "(anger)", "(Anger)", "(anger)", "(Anger)"),
-    SADNESS("sadness", "a38afebe-dde5-4e6b-acd1-7d8fa311ec95", "Sadness", "(sadness)", "(Sadness)", "(sadness)", "(Sadness)"),
-    DISGUST("disgust", "3854bab7-1244-4d86-8af3-196cc6f817c5", "Disgust", "(disgust)", "(Disgust)", "(disgust)", "(Disgust)"),
-    FEAR("fear", "ce316d85-b136-40ff-b21a-e2c8cce5719b", "Fear", "(fear)", "(Fear)", "(fear)", "(Fear)"),
-    YES("yes", "15fab22e-5d4d-43f6-9f42-f072ca5c31ea", "Yes", "(y)", "(Y)", "(yes)", "(Yes)", "(y)", "(Y)", "(yes)", "(Yes)"),
-    NO("no", "e6c2255c-c62b-4d9d-bb6e-6057e2f96b74", "No", "(n)", "(N)", "(no)", "(No)", "(n)", "(N)", "(no)", "(No)"),
-    OK("ok", "8e16c7d0-d1d4-457e-b1a4-5ed9e8433d90", "OK", "(ok)", "(OK)", "(oK)", "(Ok)", "(okay)", "(Okay)", "(ok)", "(OK)", "(oK)", "(Ok)", "(okay)", "(Okay)"),
-    HANDSHAKE("handshake", "0bf0c62f-acc4-447c-8559-76cfec86f5d5", "Handshake", "(handshake)", "(Handshake)", "(handshake)", "(Handshake)"),
-    FISTBUMP("fistbump", "901fc2a4-2938-4965-8f25-ebadd4227675", "Fist bump", "(fistbump)", "(Fistbump)", "=ƎE=", "p#d", "(fistbump)", "(Fistbump)", "=ƎE=", "p#d"),
-    PRAYING("praying", "17971ad2-ff4e-4f25-927e-374790fab0fe", "Praying", "(pray)", "(Pray)", "(praying)", "(Praying)", "_/\\_", "(pray)", "(Pray)", "(praying)", "(Praying)", "_/\\_", "(namaste)", "(Namaste)"),
-    POKE("poke", "3f61aa7e-0dac-41ca-9133-1925875fa834", "Poke", "(poke)", "(Poke)", "(nudge)", "(Nudge)", "(poke)", "(Poke)", "(nudge)", "(Nudge)"),
-    VICTORY("victory", "590d4bda-8cb2-4c3c-a525-b8fd11cf063e", "Victory sign", "(victory)", "(Victory)", "(victory)", "(Victory)"),
-    HANDSINAIR("handsinair", "037d6a10-62ac-4694-ad30-b645c07e1ce3", "Hands celebrating", "(celebrate)", "(Celebrate)", "(celebration)", "(Celebration)", "(handsinair)", "(Handsinair)", "(hia)", "(Hia)", "(celebrate)", "(Celebrate)", "(celebration)", "(Celebration)", "(handsinair)", "(Handsinair)", "(hia)", "(Hia)"),
-    NATURESCALL("naturescall", "035d0837-6ba9-4dfd-bdeb-22071ac63242", "Nature's call", "(ek)", "(Ek)", "(eK)", "(EK)", "(naturescall)", "(NaturesCall)"),
-    MUSCLE("muscle", "e44e4ece-c815-4495-84dd-ecdfb5f894a2", "Muscle", "(flex)", "(Flex)", "(muscle)", "(Muscle)", "(flex)", "(Flex)", "(muscle)", "(Muscle)"),
-    MAN("man", "8cdc4171-9beb-4998-bce3-9ee2a3188d62", "Man", "(man)", "(Man)", "(z)", "(Z)", "(male)", "(Male)", "(boy)", "(Boy)", "(man)", "(Man)", "(z)", "(Z)", "(male)", "(Male)", "(boy)", "(Boy)"),
-    WOMAN("woman", "9b5efbe8-4f99-426f-a3cd-1507e9954237", "Woman", "(woman)", "(Woman)", "(x)", "(X)", "(female)", "(Female)", "(girl)", "(Girl)", "(woman)", "(Woman)", "(x)", "(X)", "(female)", "(Female)", "(girl)", "(Girl)"),
-    BOW("bow", "e89d21f2-945a-4099-9e53-d03cd9647f66", "Bowing", "(bow)", "(Bow)", "(bow)", "(Bow)"),
-    GOTTARUN("gottarun", "fe9ed6a7-94de-4a88-8706-b8259d6ed177", "Got to run", "(gottarun)", "(Gottarun)", "(gtr)", "(GTR)", "(Gtr)", "(run)", "(Run)", "(gottarun)", "(Gottarun)", "(gtr)", "(GTR)", "(Gtr)", "(run)", "(Run)"),
-    STOP("stop", "2a0d3fa1-fb92-4474-9607-d14acc78b30d", "Stop", "(stop)", "(Stop)", "(!)", "(stop)", "(Stop)", "(!)"),
-    DANCE("dance", "f0c130d2-1fdf-45d2-b82e-1d90237c001c", "Dancing", "\\o/", "\\:D/", "\\:d/", "(dance)", "(Dance)", "\\o/", "\\:D/", "\\:d/", "(dance)", "(Dance)"),
-    DISCODANCER("discodancer", "bbce65e8-993c-4a47-9da1-c76115919021", "Disco dancer", "(disco)", "(Disco)", "(discodancer)", "(Discodancer)"),
-    BHANGRA("bhangra", "19b5d70c-6759-4745-843b-04b237953411", "Bhangra", "(bhangra)", "(Bhangra)"),
-    ZOMBIE("zombie", "d18b0828-0f43-4d42-86bf-33cfad852510", "Zombie", "(zombie)", "(Zombie)"),
-    BERTLETT("bertlett", "a8e5860e-a33c-424e-9543-d373e2c98393", "Man playing football", "(bartlett)", "(Bartlett)", "(football)", "(Football)", "(soccer)", "(Soccer)", "(so)", "(So)", "(bartlett)", "(Bartlett)", "(football)", "(Football)", "(soccer)", "(Soccer)", "(so)", "(So)"),
-    FOOTBALLFAIL("footballfail", "a01f4402-0ac3-458e-a5ff-53c7eb5360f4", "Football fail", "(footballfail)", "(Footballfail)"),
-    PULLSHOT("pullshot", "0fd6fb69-234f-4fdd-a0fa-6fbf7c00af95", "Pull shot", "(pullshot)", "(PullShot)", "(shot)", "(Shot)", "(chauka)", "(Chauka)"),
-    BOWLED("bowled", "50c4fc6d-cc94-4cf0-862b-fb3b09a0c3b2", "Bowled", "(bowled)", "(Bowled)", "(out)", "(Out)", "(wicket)", "(Wicket)"),
-    BIKE("bike", "8fd8729d-144c-4c6b-9926-ab8a5c7de798", "Bicycle", "(bike)", "(Bike)", "(bicycle)", "(Bicycle)", "(sander)", "(Sander)", "(bike)", "(Bike)", "(bicycle)", "(Bicycle)", "(sander)", "(Sander)"),
-    SURYANNAMASKAR("suryannamaskar", "2db60641-5f8c-41cc-8c0e-2c17be3400db", "Suryan Namaskar", "(suryannamaskar)", "(SuryanNamaskar)"),
-    YOGA("yoga", "7fd3b5e5-4c3b-4b27-9a26-ba7aa019c90b", "Yoga", "(yoga)", "(Yoga)"),
-    NINJA("ninja", "abfc5c9d-d2a9-4282-b014-5d788ce65782", "Ninja", "(ninja)", "(Ninja)", "(J)", "(j)", "(ninja)", "(Ninja)", "(J)", "(j)"),
-    SHOPPING("shopping", "b3ee2685-656b-4d74-80e6-321f1482b83e", "Girl shopping", "(shopping)", "(Shopping)", "(shopper)", "(Shopper)"),
-    MUSCLEMAN("muscleman", "946cbcf6-ce03-4bfb-8998-a6ef093ab395", "Muscle and fat guy", "(muscleman)", "(Muscleman)", "(fatguy)", "(Fatguy)"),
-    SKIPPING("skipping", "988b6abd-6e9d-4429-a3e0-bc6ee09a03a7", "Skipping", "(skipping)", "(Skipping)"),
-    BOLLYLOVE("bollylove", "b7b32bbe-d5e2-43d2-ba95-fa3022b9d33d", "In love pose", "(bollylove)", "(Bollylove)"),
-    CHAPPAL("chappal", "bc8df1b6-2ad4-460d-9596-79d064f872b2", "Slipper", "(chappal)", "(Chappal)", "(slipper)", "(Slipper)"),
-    NAHI("nahi", "f6a1ca0d-0424-4048-b004-05984b455143", "No!", "(nahi)", "(Nahi)", "(naa)", "(Naa)"),
-    PROMISE("promise", "ef3a7643-2e21-4645-a59d-6e371a037db4", "Promise", "(promise)", "(Promise)", "(kasamse)", "(Kasamse)"),
-    KAANPAKADNA("kaanpakadna", "442e9cfc-27fe-4bc4-9a05-c998c3c0a06c", "Sorry", "(kaanpakadna)", "(KaanPakadna)", "(sorry)", "(Sorry)", "(maafi)", "(Maafi)"),
-    COMPUTERRAGE("computerrage", "c3c186da-1eb6-4d93-8104-410ddf1cf727", "Computer rage", "(computerrage)", "(Computerrage)", "(typingrage)", "(Typingrage)"),
-    CAT("cat", "83ded3cb-f32a-4a31-ad2d-270b0575ee1f", "Cat", "(cat)", "(Cat)", ":3", "(@)", "(meow)", "(Meow)", "(cat)", "(Cat)", ":3", "(@)", "(meow)", "(Meow)"),
-    DOG("dog", "5d5b225e-3495-4ac6-8fd5-0158c14c4df2", "Dog", "(dog)", "(Dog)", ":o3", "(&)", "(dog)", "(Dog)", ":o3", "(&)"),
-    HUG("hug", "d9fb4c21-7584-4e1b-84ae-931834f7354c", "Hug", "(hug)", "(Hug)", "(bear)", "(Bear)", "(hug)", "(Hug)", "(bear)", "(Bear)"),
-    HEIDY("heidy", "bde41de3-03d2-491d-b710-f917ba311630", "Squirrel", "(heidy)", "(Heidy)", "(squirrel)", "(Squirrel)", "(heidy)", "(Heidy)", "(squirrel)", "(Squirrel)"),
-    DONKEY("donkey", "f70b126a-f054-4909-b379-12b92afc4012", "Donkey", "(donkey)", "(Donkey)", "(gadha)", "(Gadha)"),
-    SNAIL("snail", "acc1aecf-2615-4709-8987-cfa75a894c5a", "Snail", "(snail)", "(Snail)", "(sn)", "(SN)", "(Sn)", "(snail)", "(Snail)", "(sn)", "(SN)", "(Sn)"),
-    FLOWER("flower", "cc2c4f5d-9ed1-4d82-b04e-118b9452ce4c", "Flower", "(F)", "(f)", "(flower)", "(Flower)", "(F)", "(f)", "(flower)", "(Flower)"),
-    GOODLUCK("goodluck", "01f466d9-5ba8-4282-939a-5a71f7ef2b68", "Good luck", "(goodluck)", "(Goodluck)", "(gl)", "(GL)", "(Gl)", "(goodluck)", "(Goodluck)", "(gl)", "(GL)", "(Gl)"),
-    SUN("sun", "05023b9f-1526-459c-9a22-4b66e607e499", "Sun", "(sun)", "(Sun)", "(#)", "(sun)", "(Sun)", "(#)"),
-    ISLAND("island", "b519f693-abf5-48ab-a261-57be8e18eaaa", "Island", "(island)", "(Island)", "(ip)", "(Ip)", "(island)", "(Island)", "(ip)", "(Ip)"),
-    RAIN("rain", "2e0ee67b-b7b7-4e72-af82-f70903716518", "Raining", "(rain)", "(Rain)", "(london)", "(London)", "(st)", "(ST)", "(St)", "(rain)", "(Rain)", "(london)", "(London)", "(st)", "(ST)", "(St)"),
-    UMBRELLA("umbrella", "e2e74d31-b6e0-4508-a36a-bbb4684c7b26", "Umbrella", "(umbrella)", "(Umbrella)", "(um)", "(Um)", "(umbrella)", "(Umbrella)", "(um)", "(Um)"),
-    RAINBOW("rainbow", "8abb9f5f-0cd6-441f-aff8-a7773fd50674", "Rainbow", "(rainbow)", "(Rainbow)", "(r)", "(R)", "(rainbow)", "(Rainbow)", "(r)", "(R)"),
-    STAR("star", "43ec8bab-78e5-4400-8914-6fd1c5f51b0b", "Star", "(*)", "(star)", "(Star)", "(*)", "(star)", "(Star)"),
-    TUMBLEWEED("tumbleweed", "0ab38a3a-490b-4bdc-87b5-2a187f12983d", "Tumbleweed", "(tumbleweed)", "(Tumbleweed)", "(tumbleweed)", "(Tumbleweed)"),
-    PIZZA("pizza", "ec67b4f8-6f07-43b8-839a-14aa5cfca341", "Pizza", "(pi)", "(Pi)", "(pizza)", "(Pizza)", "(pi)", "(Pi)", "(pizza)", "(Pizza)"),
-    CAKE("cake", "4be8c231-1211-4082-9412-b3c179e6fa90", "Cake", "(^)", "(cake)", "(Cake)", "(^)", "(cake)", "(Cake)"),
-    COFFEE("coffee", "771efbba-f9b2-456a-a698-a5fa20ff1c38", "Coffee", "(coffee)", "(Coffee)", "(c)", "(C)", "(coffee)", "(Coffee)", "(c)", "(C)"),
-    BEER("beer", "61abe0e3-93d6-438b-a6a5-ec3223525ae7", "Beer", "(beer)", "(Beer)", "(bricklayers)", "(Bricklayers)", "(B)", "(b)", "(beer)", "(Beer)", "(bricklayers)", "(Bricklayers)", "(B)", "(b)"),
-    DRINK("drink", "461b7bfe-5412-4116-8f54-fa3a994bfba4", "Drink", "(d)", "(D)", "(drink)", "(Drink)", "(d)", "(D)", "(drink)", "(Drink)"),
-    CHEESE("cheese", "85ddfb1d-9c8c-4cea-b22e-62e38a1ce62c", "Cheese", "(cheese)", "(Cheese)", "(stink)", "(Stink)"),
-    CHAI("chai", "1e42be33-39a7-4cfd-bad9-a55bf61f0508", "Tea", "(chai)", "(Chai)", "(tea)", "(Tea)"),
-    TURKEY("turkey", "8b0ac75f-9ba6-4f41-bc2e-3e90c04d45ee", "Dancing Thanksgiving turkey", "(turkey)", "(Turkey)", "(turkeydance)", "(Turkeydance)", "(thanksgiving)", "(Thanksgiving)"),
-    TANDOORICHICKEN("tandoorichicken", "59decf20-8d71-4a19-9592-d60e7a74445a", "Tandoori chicken", "(tandoori)", "(Tandoori)", "(tandoorichicken)", "(TandooriChicken)"),
-    LADDU("laddu", "dad04300-4f86-4694-b53e-d313d7fdea6f", "Sweet", "(laddu)", "(Laddu)"),
-    BELL("bell", "df62539b-5cbe-4fbe-9e9d-11ae9f72ff00", "Bell", "(bell)", "(Bell)", "(ghanta)", "(Ghanta)"),
-    DIYA("diya", "573e5133-39c6-4f93-b44c-0c2611c47fc5", "Tealight", "(diwali)", "(Diwali)", "(diya)", "(Diya)"),
-    FIREWORKS("fireworks", "4b8e43b4-7c3a-4c24-accd-02e01e59dee2", "Fireworks", "(fireworks)", "(Fireworks)"),
-    TUBELIGHT("tubelight", "11455f38-ca73-44b8-a14f-f925d59ffd05", "Tubelight", "(tubelight)", "(Tubelight)"),
-    CANYOUTALK("canyoutalk", "05cff5e0-6d3a-4b46-901d-5f646e91d6de", "Can you talk?", "(canyoutalk)", "(Canyoutalk)", "(!!)"),
-    CAMERA("camera", "636fb0bf-a6e6-4dda-9a3a-1dd8989e95bb", "Camera", "(camera)", "(Camera)", "(p)", "(P)", "(camera)", "(Camera)", "(p)", "(P)"),
-    PLANE("plane", "17aba7ca-5491-47fc-b0e1-68ddee14500b", "Plane", "(plane)", "(Plane)", "(ap)", "(Ap)", "(airplane)", "(Airplane)", "(aeroplane)", "(Aeroplane)", "(aircraft)", "(Aircraft)", "(jet)", "(Jet)", "(plane)", "(Plane)", "(ap)", "(Ap)", "(airplane)", "(Airplane)", "(aeroplane)", "(Aeroplane)", "(aircraft)", "(Aircraft)", "(jet)", "(Jet)"),
-    CAR("car", "329ce829-5bb1-4cd5-b02d-5fb75c7e5f07", "Car", "(car)", "(Car)", "(au)", "(Au)", "(car)", "(Car)", "(au)", "(Au)"),
-    RICKSHAW("rickshaw", "27f6625a-3717-4664-9426-c02c6deddadb", "Rickshaw", "(rickshaw)", "(Rickshaw)", "(rikshaw)", "(Rikshaw)", "(ricksha)", "(Ricksha)"),
-    COMPUTER("computer", "2cc97f86-ed9a-49ed-ad14-50f10db762e9", "Computer", "(computer)", "(Computer)", "(co)", "(Co)", "(pc)", "(Pc)", "(computer)", "(Computer)", "(co)", "(Co)", "(pc)", "(Pc)"),
-    WFH("wfh", "00a4d8e1-f23c-4c1a-b976-2b91512712ec", "Working from home", "(wfh)", "(Wfh)", "(@h)", "(@H)", "(wfh)", "(Wfh)", "(@h)", "(@H)"),
-    BRB("brb", "0eb73292-97d5-485a-a223-2400e77a2870", "Be right back", "(brb)", "(Brb)", "(berightback)", "(Berightback)", "(brb)", "(Brb)", "(berightback)", "(Berightback)"),
-    GAMES("games", "8ec10796-a6cd-47a1-84e4-c936cc70bb06", "Games", "(games)", "(Games)", "(ply)", "(PLY)", "(Ply)", "(play)", "(Play)", "(playbox)", "(Playbox)", "(games)", "(Games)", "(ply)", "(PLY)", "(Ply)", "(play)", "(Play)", "(playbox)", "(Playbox)"),
-    PHONE("phone", "0d8885cd-2c25-4648-b13d-8ca6928b1854", "Phone", "(mp)", "(Mp)", "(ph)", "(Ph)", "(phone)", "(Phone)", "(mp)", "(Mp)", "(ph)", "(Ph)", "(phone)", "(Phone)"),
-    HOLDON("holdon", "f3863ab2-ae02-44c8-bb83-b271a3eab3f5", "Hold on", "(holdon)", "(Holdon)", "(w8)", "(W8)", "(holdon)", "(Holdon)", "(w8)", "(W8)"),
-    LETSMEET("letsmeet", "a4ec48d9-fd0c-4b8a-b6ad-a74e744b885d", "Let's meet", "(letsmeet)", "(Letsmeet)", "(s+)", "(S+)", "(calendar)", "(Calendar)", "(letsmeet)", "(Letsmeet)", "(s+)", "(S+)", "(calendar)", "(Calendar)"),
-    MAIL("mail", "31412c11-7edc-49f2-8413-949b7e0b18f3", "You have mail", "(e)", "(E)", "(m)", "(M)", "(mail)", "(Mail)", "(e)", "(E)", "(m)", "(M)", "(mail)", "(Mail)"),
-    CONFIDENTIAL("confidential", "f4d32e66-650b-4108-aafd-924825013356", "Confidential", "(confidential)", "(Confidential)", "(qt)", "(QT)", "(Qt)", "(confidential)", "(Confidential)", "(qt)", "(QT)", "(Qt)"),
-    BOMB("bomb", "7d2643ff-57f4-4972-b66d-4cc01548bd72", "Bomb", "(bomb)", "(Bomb)", "(explosion)", "(Explosion)", "(explode)", "(Explode)", "@=", "(bomb)", "(Bomb)", "(explosion)", "(Explosion)", "(explode)", "(Explode)", "@="),
-    CASH("cash", "982be1e5-3088-4277-aeae-487f82396738", "Cash", "(cash)", "(Cash)", "(mo)", "(Mo)", "($)", "(cash)", "(Cash)", "($)"),
-    MOVIE("movie", "3244f024-7a8f-4396-944c-7bed2f841dae", "Movie", "(~)", "(film)", "(Film)", "(movie)", "(Movie)", "(~)", "(film)", "(Film)", "(movie)", "(Movie)"),
-    MUSIC("music", "1b55f32f-0f93-495e-9e8b-6ba25de331ca", "Music", "(music)", "(Music)", "(8)", "(music)", "(Music)", "(8)"),
-    TIME("time", "5cd18fd4-7235-48b9-871f-0210e1e1e7df", "Time", "(o)", "(O)", "(time)", "(Time)", "(clock)", "(Clock)", "(0)", "(o)", "(O)", "(time)", "(Time)", "(clock)", "(Clock)", "(0)"),
-    WHATSGOINGON("whatsgoingon", "a31a6430-a1e7-409d-99cf-19548004d94a", "What's going on?", "(whatsgoingon)", "(Whatsgoingon)", "(!!?)", "(whatsgoingon)", "(Whatsgoingon)", "(!!?)"),
-    SKYPE("skype", "294b7dd2-c779-4c5d-95d8-d33f8ef4b727", "Skype", "(skype)", "(Skype)", "(ss)", "(Ss)", "(skype)", "(Skype)", "(ss)", "(Ss)"),
-    MLT("mlt", "781498ca-caed-4635-8841-90734c750b23", "Smiling man with glasses", "(malthe)", "(Malthe)", "(malthe)", "(Malthe)", "(mlt)", "(Mlt)"),
-    TAUR("taur", "b8521fee-d051-452f-b68f-795e6e08bb97", "Bald man with glasses", "(tauri)", "(Tauri)", "(tauri)", "(Tauri)", "(taur)", "(Taur)"),
-    TOIVO("toivo", "69dd4c9a-e67a-406a-9607-0f6e8620a8ab", "A man and his dog", "(toivo)", "(Toivo)", "(toivo)", "(Toivo)"),
-    PRIIDU("priidu", "5445cae9-e4f3-4dcd-b08e-943688740ebe", "Man taking a photo", "(zilmer)", "(Zilmer)", "(zilmer)", "(Zilmer)", "(priidu)", "(Priidu)"),
-    OLIVER("oliver", "d080e378-97af-46d1-ba74-666eed290686", "Man saying come on", "(oliver)", "(Oliver)", "(oliver)", "(Oliver)"),
-    POOLPARTY("poolparty", "fdfe5d6c-36d2-4973-9c2a-16b02bf4cde0", "Pool party", "(poolparty)", "(Poolparty)", "(hrv)", "(Hrv)", "(poolparty)", "(Poolparty)", "(hrv)", "(Hrv)"),
-    MOONING("mooning", "6c5550ee-02fb-4e9f-a11e-6428b861fe71", "Mooning", "(mooning)", "(Mooning)", "(mooning)", "(Mooning)"),
-    DRUNK("drunk", "6ed139a7-ae0b-4e05-8836-f799ea7d63be", "Drunk", "(drunk)", "(Drunk)", "(drunk)", "(Drunk)"),
-    SMOKE("smoke", "eec11da6-b0da-40f4-9417-08149bfbf7c9", "Smoking", "(smoking)", "(Smoking)", "(smoke)", "(Smoke)", "(ci)", "(Ci)", "(smoking)", "(Smoking)", "(smoke)", "(Smoke)", "(ci)", "(Ci)"),
-    BUG("bug", "e73b1fa3-880a-4f06-95ea-f197baeb0d22", "Bug", "(bug)", "(Bug)", "(bug)", "(Bug)"),
-    SHEEP("sheep", "7c309156-ba1c-49f1-8921-58df1d3f5427", "Sheep", "(sheep)", "(Sheep)", "(bah)", "(Bah)", "(sheep)", "(Sheep)", "(bah)", "(Bah)"),
-    WIN10("win10", "aac458bd-e0f0-441c-a5ca-ddb0531ab829", "Windows 10", "(win10)", "(Win10)", "(ninjacat)", "(Ninjacat)", "(windows)", "(Windows)", "(trex)", "(Trex)", "(windows10)", "(Windows10)", "(win10)", "(Win10)", "(ninjacat)", "(Ninjacat)", "(windows)", "(Windows)", "(trex)", "(Trex)", "(windows10)", "(Windows10)"),
-    OUTLOOK("outlook", "9a27e5ba-f3dd-4ba0-8e0d-d11024f4d291", "Outlook", "(outlook)", "(Outlook)", "(outlook)", "(Outlook)"),
-    ACCESS("access", "41c9a744-0f7b-4fc1-9944-d4a80fb58b91", "Access", "(access)", "(Access)", "(access)", "(Access)"),
-    BING("bing", "521e6518-70d3-45be-880a-d0fb381d5caa", "Bing", "(bing)", "(Bing)", "(bing)", "(Bing)"),
-    EXCEL("excel", "3ce63a1f-5578-460d-a842-5f3f164eb311", "Excel", "(excel)", "(Excel)", "(excel)", "(Excel)"),
-    INTERNETEXPLORER("internetexplorer", "666d9a64-ce10-41b0-97da-7d09b8c5859c", "Internet Explorer", "(internetexplorer)", "(Internetexplorer)", "(ie)", "(Ie)", "(IE)", "(internetexplorer)", "(Internetexplorer)", "(ie)", "(Ie)", "(IE)"),
-    MICROSOFT("microsoft", "5285b407-cbd6-4a29-a4ae-ceb5831fc02b", "Microsoft", "(microsoft)", "(Microsoft)", "(ms)", "(Ms)", "(MS)", "(microsoft)", "(Microsoft)", "(ms)", "(Ms)", "(MS)"),
-    ONENOTE("onenote", "ad6b8dd5-e603-4d5a-b844-1ca8402c250e", "OneNote", "(onenote)", "(Onenote)", "(onenote)", "(Onenote)"),
-    ONEDRIVE("onedrive", "dfdc0534-5e54-46b4-8f7c-1318a29e8333", "OneDrive", "(onedrive)", "(Onedrive)", "(onedrive)", "(Onedrive)"),
-    POWERPOINT("powerpoint", "6b225b3b-cfa2-4af4-8f53-a9ef823d84c3", "PowerPoint", "(powerpoint)", "(Powerpoint)", "(powerpoint)", "(Powerpoint)"),
-    PUBLISHER("publisher", "36d2cf0a-53d5-438f-822e-4418ce507b34", "Publisher", "(publisher)", "(Publisher)", "(publisher)", "(Publisher)"),
-    SHAREPOINT("sharepoint", "e5edf4e6-9950-4e95-9c97-215ae0dbb9e2", "SharePoint", "(sharepoint)", "(Sharepoint)", "(sharepoint)", "(Sharepoint)"),
-    SKYPEBIZ("skypebiz", "d2563040-84f7-4c44-98cd-146dddf965af", "Skype for Business", "(skypebiz)", "(Skypebiz)", "(sforb)", "(Sforb)", "(skypebiz)", "(Skypebiz)", "(sforb)", "(Sforb)"),
-    WORD("word", "e9c8504b-20cc-4e37-96ad-7b176c46f7e7", "Word", "(word)", "(Word)", "(word)", "(Word)"),
-    XBOX("xbox", "5a0233ce-aa10-438d-8419-b701764c2eff", "Xbox", "(xbox)", "(Xbox)", "(xbox)", "(Xbox)"),
-    WTF("wtf", "5a43ccc7-e032-4394-9e74-f9cc9ff34db7", "WTF ...", "(wtf)", "(Wtf)"),
-    FINGER("finger", "8aef7767-65b1-4f02-99b7-c5e392f4c4b0", "Finger", "(finger)", "(Finger)"),
-    GHOST("ghost", "92dbe167-5e50-47e7-8778-91aa77242624", "Ghost", "(ghost)", "(Ghost)"),
-    VAMPIRE("vampire", "04f72181-419f-4620-b6d0-1fca2534ac7f", "Vampire", "(vampire)", "(Vampire)"),
-    SKULL("skull", "8e4b812b-d2ca-4f7a-b513-f36aac834100", "Skull", "(skull)", "(Skull)"),
-    PUMPKIN("pumpkin", "9d20af2f-c7b9-4605-98ba-a2a400382cac", "Pumpkin", "(pumpkin)", "(Pumpkin)", "(halloween)", "(Halloween)"),
-    LADYVAMPIRE("ladyvampire", "42f31ee1-4616-4e70-862a-6c0b171dd26e", "Lady vampire", "(ladyvamp)", "(Ladyvamp)", "(ladyvampire)", "(Ladyvampire)"),
-    ABE("abe", "28f516c6-9074-453b-b076-90bc11a39e3a", "Abe", "(abe)", "(Abe)", "(abey)", "(Abey)"),
-    GOLMAAL("golmaal", "ffd9ba35-88e8-4014-876a-38cf968b5e53", "Confusion", "(golmaal)", "(Golmaal)"),
-    OYE("oye", "ba561f59-eeb4-4f31-8bc6-e721dcabc877", "Oye", "(oye)", "(Oye)"),
-    POOP("poop", "dd87d14a-3cf1-4a56-8b70-e857e0b69253", "Pile of poo", "(poop)", "(Poop)"),
-    KYA("kya", "9a6af308-7dd8-4d2b-9f20-4063843c2eba", "What!", "(kya)", "(Kya)"),
-    ONTHELOO("ontheloo", "f021942c-3772-4ce6-b426-8f2574745fe1", "On the loo", "(ontheloo)", "(Ontheloo)", "(onloo)", "(Onloo)", "(nr2)", "(Nr2)", "(twittering)", "(Twittering)", "(verybusy)", "(Verybusy)"),
-    NEIL("neil", "a055e5b0-5e6a-4b4d-8b7d-3bb5d7d0b210", "Neil", "(neil)", "(Neil)", "(feetontable)", "(Feetontable)"),
-    SANTAMOONING("santamooning", "9515d561-42d1-4c1d-b665-16b8c72c918d", "Santa mooning", "(santamooning)", "(Santamooning)", "(mooningsanta)", "(Mooningsanta)"),
-    GIFT("gift", "9b399845-5842-4b5f-be0b-5f067d6070b2", "Gift", "(gift)", "(Gift)", "(g)", "(G)", "(gift)", "(Gift)", "(g)", "(G)"),
-    SANTA("santa", "891eee5b-1d09-479f-80f7-45b6b7d52d23", "Santa", "(santa)", "(Santa)", "(xmas)", "(Xmas)", "(christmas)", "(Christmas)"),
-    XMASTREE("xmastree", "cf33b2b7-335d-43d9-be26-ba35a88e601a", "Xmas tree", "(xmastree)", "(Xmastree)", "(christmastree)", "(Christmastree)"),
-    HANUKKAH("hanukkah", "2806a529-0e59-41d0-b0aa-9a8f2daabcba", "Hanukkah", "(hanukkah)", "(Hanukkah)"),
-    CHAMPAGNE("champagne", "8ff6b2c0-2819-4d39-9625-052befa38b68", "Champagne", "(champagne)", "(Champagne)", "(sparkling)", "(Sparkling)"),
-    PENGUIN("penguin", "2597eabf-15b8-48f3-a5b6-177740013e8b", "Dancing penguin", "(penguin)", "(Penguin)", "(dancingpenguin)", "(Dancingpenguin)", "(penguindance)", "(Penguindance)"),
-    FESTIVEPARTY("festiveparty", "ff29738b-be18-4b71-b140-68760c58f3a7", "Festive party", "(festiveparty)", "(Festiveparty)", "(partyxmas)", "(Partyxmas)"),
-    HUNGOVER("hungover", "f2a2f592-8ac9-4e69-a90d-b94787658944", "Morning after party", "(morningafter)", "(Morningafter)", "(hungover)", "(Hungover)"),
-    HEADPHONES("headphones", "3a62dadc-1e79-42f1-9dc5-96c8c159dad2", "Listening to headphones", "(headphones)", "(Headphones)"),
-    SHIVERING("shivering", "176ee7a9-094d-43d4-87a2-2193796691ac", "Cold shivering", "(shivering)", "(Shivering)", "(cold)", "(Cold)", "(freezing)", "(Freezing)");
+    MUMHEART("mumheart","v11","Mum heart","(mumheart)","(Mumheart)","(momheart)","(Momheart)"),
+    BOTTLEFEEDING("bottlefeeding","v8","Bottle feeding","(bottlefeeding)","(Bottlefeeding)"),
+    WOMANHOLDINGBABY("womanholdingbaby","v9","Woman holding baby","(womanholdingbaby)","(Womanholdingbaby)"),
+    BREASTFEEDING("breastfeeding","v7","Breastfeeding","(breastfeeding)","(Breastfeeding)"),
+    MUMANDDAUGHTER("mumanddaughter","v6","Mum and daughter","(mumanddaughter)","(Mumanddaughter)","(womanandgirl)","(Womanandgirl)"),
+    WOMANPREGNANT("womanpregnant","v5","Woman pregnant","(womanpregnant)","(Womanpregnant)"),
+    GRANNYSCOOTER("grannyscooter","v8","Granny scooter","(grannyscooter)","(Grannyscooter)"),
+    BREAKFASTINBED("breakfastinbed","v6","Breakfast in bed","(breakfastinbed)","(Breakfastinbed)"),
+    WOMANMECHANIC("womanmechanic","v9","Woman mechanic","(womanmechanic)","(Womanmechanic)"),
+    WOMANFARMER("womanfarmer","v7","Woman farmer","(womanfarmer)","(Womanfarmer)"),
+    WOMANPILOT("womanpilot","v7","Woman pilot","(womanpilot)","(Womanpilot)"),
+    WOMANVRPLAYER("womanvrplayer","v7","Woman VR player","(womanvrplayer)","(Womanvrplayer)"),
+    WOMANWELDER("womanwelder","v7","Woman welder","(womanwelder)","(Womanwelder)"),
+    WOMANARTIST("womanartist","v7","Woman artist","(womanartist)","(Womanartist)"),
+    WOMANFIREFIGHTER("womanfirefighter","v6","Woman firefighter","(womanfirefighter)","(Womanfirefighter)"),
+    WOMANHEALTHWORKER("womanhealthworker","v7","Woman health worker","(womanhealthworker)","(Womanhealthworker)"),
+    WOMANGRADUATE("womangraduate","v8","Woman graduate","(womangraduate)","(Womangraduate)"),
+    WOMANGAMER("womangamer","v8","Woman gamer","(womangamer)","(Womangamer)"),
+    WOMANCHEF("womanchef","v7","Woman chef","(womanchef)","(Womanchef)"),
+    WOMANTEACHER("womanteacher","v6","Woman teacher","(womanteacher)","(Womanteacher)"),
+    WOMANPOLICEOFFICER("womanpoliceofficer","v6","Woman police officer","(womanpoliceofficer)","(Womanpoliceofficer)"),
+    WOMANASTRONAUT("womanastronaut","v6","Woman astronaut","(womanastronaut)","(Womanastronaut)"),
+    WOMANJUDGE("womanjudge","v7","Woman judge","(womanjudge)","(Womanjudge)"),
+    PORGSURPRISED("porgsurprised","v9","Porg surprised","(porgsurprised)","(Porgsurprised)"),
+    PORG("porg","v8","Porg","(porg)","(Porg)"),
+    CHEWBACCA("chewbacca","v16","Chewbacca","(chewbacca)","(Chewbacca)"),
+    BB8("bb8","v7","BB-8","(bb8)","(Bb8)"),
+    BB9E("bb9e","v8","BB-9E","(bb9e)","(Bb9e)"),
+    XWING("xwing","v29","X-wing","(xwing)","(Xwing)"),
+    KYLOREN("kyloren","v8","Kylo Ren","(kyloren)","(Kyloren)"),
+    STORMTROOPER("stormtrooper","v7","Storm trooper","(stormtrooper)","(Stormtrooper)"),
+    CAPTAINPHASMA("captainphasma","v11","Captain Phasma","(captainphasma)","(Captainphasma)"),
+    TIEFIGHTER("tiefighter","v14","TIE fighter","(tiefighter)","(Tiefighter)"),
+    SMILE("smile","v4","Smile",":)",":-)",":=)","(smile)","(Smile)"),
+    SAD("sad","v3","Sad",":(",":-(",":=(","(sad)","(Sad)",":<",":-<"),
+    LAUGH("laugh","v7","Laugh",":D",":-D",":=D",":d",":-d",":=d","(laugh)","(Laugh)",":>",":->","(lol)","(LOL)","(Lol)"),
+    COOL("cool","v4","Cool","(cool)","(Cool)","8-)","8=)","B-)","B=)"),
+    HEARTEYES("hearteyes","v12","Heart eyes","(hearteyes)","(Hearteyes)"),
+    STAREYES("stareyes","v16","Star eyes","(stareyes)","(Stareyes)"),
+    LIKE("like","v8","Like","(like)","(Like)"),
+    UNAMUSED("unamused","v11","Unamused","(unamused)","(Unamused)"),
+    CWL("cwl","v7","Crying with laughter","(cwl)","(Cwl)","(cryingwithlaughter)","(Cryingwithlaughter)"),
+    XD("xd","v5","XD smiley","(xd)","(Xd)"),
+    SURPRISED("surprised","v6","Surprised",":O",":-O",":=O",":o",":-o",":=o","(surprised)","(Surprised)"),
+    WINK("wink","v5","Wink",";)",";-)",";=)","(wink)","(Wink)"),
+    CRY("cry","v6","Crying",";(",";-(",";=(","(cry)","(Cry)",":'("),
+    SHIVERING("shivering","v9","Cold shivering","(shivering)","(Shivering)","(cold)","(Cold)","(freezing)","(Freezing)"),
+    SWEAT("sweat","v6","Sweating","(:|","(sweat)","(Sweat)"),
+    SPEECHLESS("speechless","v5","Speechless",":|",":-|",":=|","(speechless)","(Speechless)"),
+    TONGUEOUT("tongueout","v5","Cheeky",":P",":-P",":=P",":p",":-p",":=p","(tongueout)","(Tongueout)"),
+    BLUSH("blush","v6","Blushing",":$",":-$",":=$","(blush)","(Blush)"),
+    INLOVE("inlove","v5","In love","(inlove)","(Inlove)","(love)","(Love)",":]",":-]"),
+    KISS("kiss","v7","Kiss","(kiss)","(Kiss)",":*",":-*",":=*","(xo)"),
+    WONDER("wonder","v5","Wondering",":^)","(wonder)","(Wonder)"),
+    SLEEPY("sleepy","v5","Sleepy","|-)","I-)","I=)","(snooze)","(Snooze)","(sleepy)","(Sleepy)"),
+    DULL("dull","v4","Dull","|-(","|(","|=(","(dull)","(Dull)"),
+    YAWN("yawn","v5","Yawn","(yawn)","(Yawn)"),
+    PUKE("puke","v7","Vomiting","(puke)","(Puke)",":&",":-&",":=&","+o("),
+    DOH("doh","v6","Doh!","(doh)","(Doh)"),
+    ANGRY("angry","v7","Angry","(angry)","(Angry)",":@",":-@",":=@","x(","x-(","X(","X-(","x=(","X=(",";@",";-@"),
+    WASNTME("wasntme","v5","It wasn't me!","(wasntme)","(Wasntme)","(wm)","(Wm)"),
+    WORRY("worry","v5","Worried","(worry)","(Worry)",":S",":s",":-s",":-S",":=s",":=S","(worried)","(Worried)"),
+    MMM("mmm","v6","Mmmmm…","(mm)","(Mm)","(mmm)","(Mmm)","(mmmm)","(Mmmm)"),
+    NERDY("nerdy","v6","Nerdy","(nerd)","(Nerd)","8-|","B-|","8|","B|","8=|","B=|","(nerdy)","(Nerdy)"),
+    RAINBOWSMILE("rainbowsmile","v14","Rainbow smile","(rainbowsmile)","(Rainbowsmile)"),
+    LIPSSEALED("lipssealed","v6","My lips are sealed",":x",":-x",":X",":-X",":#",":-#",":=x",":=X",":=#","(lipssealed)","(Lipssealed)"),
+    DEVIL("devil","v3","Devil","(devil)","(Devil)"),
+    ANGEL("angel","v4","Angel","(angel)","(Angel)"),
+    ENVY("envy","v5","Envy","(envy)","(Envy)"),
+    MAKEUP("makeup","v6","Make-up","(makeup)","(Makeup)","(kate)","(Kate)"),
+    THINK("think","v5","Thinking","(think)","(Think)",":-?",":?",":=?","*-)"),
+    ROFL("rofl","v5","Rolling on the floor laughing","(rofl)","(Rofl)","(rotfl)","(Rotfl)"),
+    HAPPY("happy","v5","Happy","(happy)","(Happy)"),
+    SMIRK("smirk","v4","Smirking","(smirk)","(Smirk)"),
+    NOD("nod","v4","Nodding","(nod)","(Nod)"),
+    SHAKE("shake","v3","Shake","(shake)","(Shake)"),
+    WAITING("waiting","v5","Waiting","(waiting)","(Waiting)","(forever)","(Forever)","(impatience)","(Impatience)"),
+    EMO("emo","v15","Emo","(emo)","(Emo)"),
+    DONTTALKTOME("donttalktome","v5","Don't talk to me","(donttalk)","(Donttalk)","(donttalktome)","(Donttalktome)"),
+    IDEA("idea","v6","Idea","(idea)","(Idea)",":i",":I","*-:)"),
+    TALK("talk","v5","Talking","(talk)","(Talk)"),
+    SWEAR("swear","v8","Swearing","(swear)","(Swear)"),
+    EVILGRIN("evilgrin","v6","Evil grin","]:)",">:)","(evilgrin)","(Evilgrin)","(evil)","(Evil)","(grin)","(Grin)","(eg)","(Eg)"),
+    HEADBANG("headbang","v6","Banging head on wall","(headbang)","(Headbang)","(banghead)","(Banghead)"),
+    LEARN("learn","v8","Global Learning","(learn)","(Learn)"),
+    HEADPHONES("headphones","v5","Listening to headphones","(headphones)","(Headphones)"),
+    HUNGOVER("hungover","v5","Morning after party","(morningafter)","(Morningafter)","(hungover)","(Hungover)"),
+    SELFIE("selfie","v8","Selfie","(selfie)","(Selfie)"),
+    SHOCK("shock","v20","Spoiler alert","(shock)","(Shock)"),
+    LLSSHOCK("llsshock","v23","Spoiler alert","(llsshock)","(Llsshock)"),
+    TTM("ttm","v12","Talking too much","(ttm)","(Ttm)","(bla)","(Bla)"),
+    DREAM("dream","v9","Dreaming","(dream)","(Dream)"),
+    ILL("ill","v12","Ill","(ill)","(Ill)"),
+    TIRED("tired","v11","Tired","(tired)","(Tired)"),
+    PARTY("party","v7","Party","(party)","(Party)","<O)","<o)","<:o)"),
+    BANDIT("bandit","v5","Bandit","(bandit)","(Bandit)"),
+    TAURI("tauri","v8","Bald man with glasses","(tauri)","(Tauri)","(taur)","(Taur)"),
+    NAZAR("nazar","v5","Blessing","(nazar)","(Nazar)"),
+    MOVEMBER("movember","v15","Movember","(movember)","(Movember)","(mo)","(Mo)","(november)","(November)","(moustache)","(Moustache)","(mustache)","(Mustache)","(bowman)","(Bowman)",":{"),
+    MYSTERYSKYPE("mysteryskype","v9","Mystery Skype","(mysteryskype)","(Mysteryskype)"),
+    DOTDFEMALE("dotdfemale","v13","Day of the dead","(dotdfemale)","(Dotdfemale)","(dotdf)","(Dotdf)"),
+    DOTDMALE("dotdmale","v10","Day of the dead","(dotdmale)","(Dotdmale)","(dotdm)","(Dotdm)"),
+    FRANKENSTEIN("frankenstein","v27","Hammer Frankenstein","(frankenstein)","(Frankenstein)"),
+    DRACULA("dracula","v14","Hammer Dracula","(dracula)","(Dracula)"),
+    WEREWOLF("werewolf","v14","Hammer werewolf","(werewolf)","(Werewolf)"),
+    JEKYLLANDHYDE("jekyllandhyde","v14","Hammer Jekyll and Hyde","(jekyllandhyde)","(Jekyllandhyde)"),
+    ZOMBIEDROOL("zombiedrool","v12","Hammer zombie","(zombiedrool)","(Zombiedrool)"),
+    MUMMY("mummy","v14","Hammer mummy","(mummy)","(Mummy)"),
+    SELFIEDIWALI("selfiediwali","v7","Selfie Diwali","(selfiediwali)","(Selfiediwali)"),
+    DIWALISELFIE("diwaliselfie","v14","Diwali selfie","(diwaliselfie)","(Diwaliselfie)"),
+    STEVEAOKI("steveaoki","v11","Steve Aoki","(steveaoki)","(Steveaoki)"),
+    AOKIJUMP("aokijump","v11","Aoki jump","(aokijump)","(Aokijump)"),
+    CAKETHROW("cakethrow","v8","Cake throw","(cakethrow)","(Cakethrow)"),
+    KOLONY("kolony","v7","Kolony","(kolony)","(Kolony)"),
+    JOY("joy","v9","Joy","(joy)","(Joy)"),
+    ANGER("anger","v7","Anger","(anger)","(Anger)"),
+    SADNESS("sadness","v20","Sadness","(sadness)","(Sadness)"),
+    DISGUST("disgust","v5","Disgust","(disgust)","(Disgust)"),
+    FEAR("fear","v2","Fear","(fear)","(Fear)"),
+    HESTONFACEPALM("hestonfacepalm","v17","Heston facepalm","(hestonfacepalm)","(Hestonfacepalm)"),
+    HESTON("heston","v17","Heston Blumenthal","(heston)","(Heston)"),
+    MALTHE("malthe","v5","Smiling man with glasses","(malthe)","(Malthe)","(mlt)","(Mlt)"),
+    LADYVAMPIRE("ladyvampire","v8","Lady vampire","(ladyvamp)","(Ladyvamp)","(ladyvampire)","(Ladyvampire)"),
+    VAMPIRE("vampire","v3","Vampire","(vampire)","(Vampire)"),
+    GHOST("ghost","v5","Ghost","(ghost)","(Ghost)"),
+    SKULL("skull","v7","Skull","(skull)","(Skull)"),
+    PUMPKIN("pumpkin","v7","Pumpkin","(pumpkin)","(Pumpkin)","(halloween)","(Halloween)"),
+    SANTA("santa","v7","Santa","(santa)","(Santa)","(xmas)","(Xmas)","(christmas)","(Christmas)"),
+    XMASCWL("xmascwl","v11","Xmas crying with laughter","(xmascwl)","(Xmascwl)"),
+    FESTIVEPARTY("festiveparty","v19","Festive party","(festiveparty)","(Festiveparty)","(partyxmas)","(Partyxmas)"),
+    HOLIDAYSPIRIT("holidayspirit","v6","Holiday spirit","(holidayspirit)","(Holidayspirit)","(crazyxmas)","(Crazyxmas)","(crazychristmas)","(Crazychristmas)"),
+    RUDOLFSURPRISE("rudolfsurprise","v10","Surprised Rudolf","(rudolfsurprise)","(Rudolfsurprise)","(rudolphsurprise)","(Rudolphsurprise)"),
+    RUDOLFIDEA("rudolfidea","v7","Rudolf idea","(rudolfidea)","(Rudolfidea)","(rudolphidea)","(Rudolphidea)"),
+    XMASCRY("xmascry","v9","Xmas cry","(xmascry)","(Xmascry)","(xmascrying)","(Xmascrying)"),
+    XMASSARCASTIC("xmassarcastic","v12","Xmas sarcastic","(xmassarcastic)","(Xmassarcastic)"),
+    HI("hi","v6","Hi","(wave)","(Wave)","(hi)","(Hi)","(HI)","(bye)","(Bye)","(BYE)"),
+    HIGHFIVE("highfive","v8","High five","(highfive)","(Highfive)","(hifive)","(Hifive)","(h5)","(H5)"),
+    CLAP("clap","v7","Clapping","(clap)","(Clap)"),
+    SARCASTIC("sarcastic","v4","Sarcastic","(sarcastic)","(Sarcastic)","(sarcasm)","(Sarcasm)","(slowclap)","(Slowclap)"),
+    GIGGLE("giggle","v5","Giggle","(chuckle)","(Chuckle)","(giggle)","(Giggle)"),
+    FACEPALM("facepalm","v8","Facepalm","(facepalm)","(Facepalm)","(fail)","(Fail)"),
+    ROCK("rock","v5","Rock","(rock)","(Rock)"),
+    FINGERSCROSSED("fingerscrossed","v6","Fingers crossed","(yn)","(Yn)","(fingers)","(Fingers)","(fingerscrossed)","(Fingerscrossed)","(crossedfingers)","(Crossedfingers)"),
+    LISTENING("listening","v5","Listening","(listening)","(Listening)"),
+    WAIT("wait","v6","Wait","(wait)","(Wait)"),
+    WHEW("whew","v5","Relieved","(whew)","(Whew)","(phew)","(Phew)"),
+    TMI("tmi","v5","Too much information","(tmi)","(Tmi)"),
+    CALL("call","v5","Call","(call)","(Call)"),
+    PUNCH("punch","v6","Punch","(punch)","(Punch)","*|","*-|"),
+    TALKTOTHEHAND("talktothehand","v5","Talk to the hand","(talktothehand)","(Talktothehand)"),
+    WHISTLE("whistle","v5","Whistle","(whistle)","(Whistle)","(seeti)","(Seeti)"),
+    SLAP("slap","v5","Slap","(slap)","(Slap)","(thappad)","(Thappad)"),
+    LALALA("lalala","v5","Lalala","(lalala)","(Lalala)","(lalalala)","(Lalalala)","(lala)","(Lala)","(notlistening)","(Notlistening)"),
+    YES("yes","v3","Yes","(y)","(Y)","(yes)","(Yes)"),
+    NO("no","v3","No","(n)","(N)","(no)","(No)"),
+    HANDSHAKE("handshake","v5","Handshake","(handshake)","(Handshake)"),
+    FISTBUMP("fistbump","v5","Fist bump","(fistbump)","(Fistbump)","=ƎE=","p#d"),
+    POKE("poke","v8","Poke","(poke)","(Poke)","(nudge)","(Nudge)"),
+    HANDSINAIR("handsinair","v6","Hands celebrating","(celebrate)","(Celebrate)","(celebration)","(Celebration)","(handsinair)","(Handsinair)","(hia)","(Hia)"),
+    HEARTHANDS("hearthands","v11","Heart hands","(hearthands)","(Hearthands)"),
+    VICTORY("victory","v5","Victory sign","(victory)","(Victory)"),
+    NOWORRIES("noworries","v7","No worries","(noworries)","(Noworries)"),
+    OK("ok","v5","OK","(ok)","(OK)","(oK)","(Ok)","(okay)","(Okay)"),
+    PRAYING("praying","v6","Praying","(pray)","(Pray)","(praying)","(Praying)","_/\\_","(namaste)","(Namaste)"),
+    MUSCLE("muscle","v16","Muscle","(flex)","(Flex)","(muscle)","(Muscle)"),
+    NATURESCALL("naturescall","v5","Nature's call","(ek)","(Ek)","(eK)","(EK)","(naturescall)","(Naturescall)"),
+    WOTY("woty","v11","Woman of the year","(woty)","(Woty)"),
+    GLASSCEILING("glassceiling","v14","Glass ceiling","(glassceiling)","(Glassceiling)"),
+    DEADYES("deadyes","v10","Dead yes","(deadyes)","(Deadyes)"),
+    XMASYES("xmasyes","v8","Xmas yes","(xmasyes)","(Xmasyes)"),
+    DROPTHEMIC("dropthemic","v5","Drop the mic","(dropthemic)","(Dropthemic)"),
+    PENGUIN("penguin","v9","Dancing penguin","(penguin)","(Penguin)","(dancingpenguin)","(Dancingpenguin)","(penguindance)","(Penguindance)","(linux)","(Linux)"),
+    PENGUINKISS("penguinkiss","v13","Penguin kiss","(penguinkiss)","(Penguinkiss)"),
+    HUG("hug","v7","Hug","(hug)","(Hug)","(bear)","(Bear)"),
+    MONKEY("monkey","v7","Monkey","(monkey)","(Monkey)","(ape)","(Ape)",":(|)"),
+    CAT("cat","v7","Cat","(cat)","(Cat)","(@)","(meow)","(Meow)","(kitty)","(Kitty)"),
+    DOG("dog","v7","Dog","(dog)","(Dog)",":o3","(&)"),
+    HEDGEHOGHUG("hedgehoghug","v8","Hedgehog hug","(hedgehoghug)","(Hedgehoghug)"),
+    BUNNYHUG("bunnyhug","v6","Bunny hug","(bunnyhug)","(Bunnyhug)"),
+    FOXHUG("foxhug","v6","Fox hug","(foxhug)","(Foxhug)"),
+    UNICORN("unicorn","v9","Unicorn","(unicorn)","(Unicorn)"),
+    STINGRAY("stingray","v9","Stingray","(stingray)","(Stingray)"),
+    MONKEYGIGGLE("monkeygiggle","v16","Monkey giggle","(monkeygiggle)","(Monkeygiggle)"),
+    GINGERKEEPFIT("gingerkeepfit","v6","Ginger keep fit","(gingerkeepfit)","(Gingerkeepfit)"),
+    POLARBEAR("polarbear","v6","Polar bear","(polarbear)","(Polarbear)","(polarbearhug)","(Polarbearhug)"),
+    LAMB("lamb","v10","Spring lamb","(lamb)","(Lamb)"),
+    MOVINGHOME("movinghome","v12","Moving home","(movinghome)","(Movinghome)"),
+    SLOTH("sloth","v18","Sloth","(sloth)","(Sloth)"),
+    SNAIL("snail","v8","Snail","(snail)","(Snail)","(sn)","(SN)","(Sn)"),
+    DONKEY("donkey","v5","Donkey","(donkey)","(Donkey)","(gadha)","(Gadha)"),
+    LOVEBITES("lovebites","v9","Love bites","(lovebites)","(Lovebites)"),
+    RED("red","v13","Angry Red","(red)","(Red)"),
+    HEDGEHOG("hedgehog","v9","Hedgehog","(hedgehog)","(Hedgehog)"),
+    NESTINGEGGS("nestingeggs","v12","Nesting eggs","(nestingeggs)","(Nestingeggs)"),
+    CHICKSEGG("chicksegg","v15","Chicks’ egg","(chicksegg)","(Chicksegg)"),
+    ROCKCHICK("rockchick","v14","Rock chick","(rockchick)","(Rockchick)"),
+    HENDANCE("hendance","v20","Dancing hen","(hendance)","(Hendance)"),
+    HEIDY("heidy","v3","Squirrel","(squirrel)","(Squirrel)","(heidy)","(Heidy)"),
+    BUNNY("bunny","v11","Bunny","(bunny)","(Bunny)","(lovebunny)","(Lovebunny)","(rabbit)","(Rabbit)"),
+    ACORN("acorn","v9","Acorn","(acorn)","(Acorn)"),
+    HUNGRYCAT("hungrycat","v17","Hungry cat","(hungrycat)","(Hungrycat)"),
+    GANESH("ganesh","v11","Ganesh","(ganesh)","(Ganesh)"),
+    BATSMILE("batsmile","v13","Bat smile","(batsmile)","(Batsmile)","(bat)","(Bat)"),
+    BATCRY("batcry","v12","Bat cry","(batcry)","(Batcry)"),
+    WEREWOLFHOWL("werewolfhowl","v11","Werewolf howl","(werewolfhowl)","(Werewolfhowl)"),
+    SNOWANGEL("snowangel","v12","Snow angel","(snowangel)","(Snowangel)"),
+    REINDEER("reindeer","v7","Reindeer","(reindeer)","(Reindeer)"),
+    YOTM("yotm","v15","Year of the monkey","(yotm)","(Yotm)","(monkeyyear)","(Monkeyyear)"),
+    YOTFR("yotfr","v15","Year of the fire rooster","(yotfr)","(Yotfr)"),
+    YOTD("yotd","v6","Year of the dog","(yotd)","(Yotd)"),
+    WOMANSHRUG("womanshrug","v12","Woman shrug","(womanshrug)","(Womanshrug)","(wshrug)","(Wshrug)","(fshrug)","(Fshrug)"),
+    MANSHRUG("manshrug","v13","Man shrug","(manshrug)","(Manshrug)","(mshrug)","(Mshrug)"),
+    HERO("hero","v15","Super mum","(hero)","(Hero)"),
+    BUSYDAY("busyday","v11","Busy day","(busyday)","(Busyday)"),
+    WOMANBLOWKISS("womanblowkiss","v6","Woman blow kiss","(womanblowkiss)","(Womanblowkiss)"),
+    WOMANSCIENTIST("womanscientist","v7","Woman scientist","(womanscientist)","(Womanscientist)"),
+    WOMANDEVELOPER("womandeveloper","v7","Woman writing code","(womandeveloper)","(Womandeveloper)"),
+    WOMANAWARD("womanaward","v8","Woman receiving award","(womanaward)","(Womanaward)"),
+    MANSIGNLOVE("mansignlove","v5","Man sign love","(mansignlove)","(Mansignlove)"),
+    WOMANHOLDINGCAT("womanholdingcat","v9","Love cat","(womanholdingcat)","(Womanholdingcat)"),
+    MANHOLDINGDOG("manholdingdog","v8","Love dog","(manholdingdog)","(Manholdingdog)"),
+    CHEERLEADER("cheerleader","v7","Cheerleader","(cheerleader)","(Cheerleader)"),
+    SKIP("skip","v13","Keep fit","(skip)","(Skip)","(skippingrope)","(Skippingrope)"),
+    POOLPARTY("poolparty","v15","Pool party","(poolparty)","(Poolparty)","(hrv)","(Hrv)"),
+    SYNCHSWIM("synchswim","v18","Synchronized swimming","(synchswim)","(Synchswim)"),
+    SURYANNAMASKAR("suryannamaskar","v6","Suryan Namaskar","(suryannamaskar)","(Suryannamaskar)"),
+    YOGA("yoga","v3","Yoga","(yoga)","(Yoga)"),
+    TRAMPOLINE("trampoline","v9","Trampoline","(trampoline)","(Trampoline)"),
+    MUSCLEMAN("muscleman","v5","Muscle and fat guy","(muscleman)","(Muscleman)","(fatguy)","(Fatguy)"),
+    WINNER("winner","v10","Podium","(winner)","(Winner)"),
+    RUNNING("running","v14","Running","(running)","(Running)"),
+    WOMANSLAMDUNK("womanslamdunk","v5","Woman playing basketball","(womanslamdunk)","(Womanslamdunk)"),
+    WOMANFENCER("womanfencer","v12","Woman fencer","(womanfencer)","(Womanfencer)"),
+    SLAMDUNK("slamdunk","v12","Basketball","(slamdunk)","(Slamdunk)"),
+    WOMANRIDINGBIKE("womanridingbike","v13","Woman riding bike","(womanridingbike)","(Womanridingbike)"),
+    BIKE("bike","v8","Bicycle","(bike)","(Bike)","(bicycle)","(Bicycle)","(sander)","(Sander)"),
+    WOMANFOOTBALL("womanfootball","v7","Woman playing football","(womanfootball)","(Womanfootball)"),
+    BARTLETT("bartlett","v7","Man playing football","(football)","(Football)","(bartlett)","(Bartlett)","(soccer)","(Soccer)","(so)","(So)"),
+    PULLSHOT("pullshot","v6","Pull shot","(pullshot)","(Pullshot)","(shot)","(Shot)","(chauka)","(Chauka)"),
+    BOWLED("bowled","v5","Bowled","(bowled)","(Bowled)","(out)","(Out)","(wicket)","(Wicket)"),
+    FALLINLOVE("fallinlove","v13","Falling in love","(fallinlove)","(Fallinlove)"),
+    TENNISFAIL("tennisfail","v13","Tennis fail","(tennisfail)","(Tennisfail)"),
+    TARGET("target","v13","Archery","(target)","(Target)"),
+    FOOTBALLFAIL("footballfail","v6","Football fail","(footballfail)","(Footballfail)"),
+    SKATE("skate","v10","Skate","(skate)","(Skate)"),
+    PRIIDU("priidu","v7","Man taking a photo","(zilmer)","(Zilmer)","(priidu)","(Priidu)"),
+    TOIVO("toivo","v16","A man and his dog","(toivo)","(Toivo)"),
+    FOREVERLOVE("foreverlove","v4","Forever love","(foreverlove)","(Foreverlove)"),
+    GRAN("gran","v12","Dancing gran","(gran)","(Gran)"),
+    DANCE("dance","v7","Dancing","(dance)","(Dance)","\\o/","\\:D/","\\:d/"),
+    DISCODANCER("discodancer","v5","Disco dancer","(disco)","(Disco)","(discodancer)","(Discodancer)"),
+    BHANGRA("bhangra","v7","Bhangra","(bhangra)","(Bhangra)"),
+    MARIACHILOVE("mariachilove","v10","Mariachi love","(mariachilove)","(Mariachilove)"),
+    SKIPPING("skipping","v4","Skipping","(skipping)","(Skipping)"),
+    THANKS("thanks","v14","Thanks","(thanks)","(Thanks)"),
+    BOW("bow","v6","Bowing","(bow)","(Bow)"),
+    WOMAN("woman","v9","Woman","(woman)","(Woman)","(female)","(Female)","(girl)","(Girl)"),
+    MAN("man","v3","Man","(man)","(Man)","(male)","(Male)","(boy)","(Boy)"),
+    GOTTARUN("gottarun","v5","Got to run","(gottarun)","(Gottarun)","(gtr)","(GTR)","(Gtr)","(run)","(Run)"),
+    COMPUTERRAGE("computerrage","v5","Computer rage","(computerrage)","(Computerrage)","(typingrage)","(Typingrage)"),
+    TVBINGE("tvbinge","v13","TV binge zombie","(tvbinge)","(Tvbinge)"),
+    ONTHELOO("ontheloo","v11","On the loo","(ontheloo)","(Ontheloo)","(onloo)","(Onloo)","(nr2)","(Nr2)","(twittering)","(Twittering)","(verybusy)","(Verybusy)"),
+    BOLLYLOVE("bollylove","v6","In love pose","(bollylove)","(Bollylove)"),
+    SHOPPING("shopping","v6","Girl shopping","(shopping)","(Shopping)","(shopper)","(Shopper)"),
+    NAHI("nahi","v6","No!","(nahi)","(Nahi)","(naa)","(Naa)"),
+    CHAPPAL("chappal","v5","Slipper","(chappal)","(Chappal)","(slipper)","(Slipper)"),
+    PROMISE("promise","v5","Promise","(promise)","(Promise)","(kasamse)","(Kasamse)"),
+    NINJA("ninja","v4","Ninja","(ninja)","(Ninja)"),
+    KAANPAKADNA("kaanpakadna","v4","Sorry","(kaanpakadna)","(Kaanpakadna)","(sorry)","(Sorry)","(maafi)","(Maafi)"),
+    OLIVER("oliver","v6","Man saying come on","(oliver)","(Oliver)"),
+    WITCH("witch","v22","Witch","(witch)","(Witch)"),
+    ZOMBIE("zombie","v11","Zombie","(zombie)","(Zombie)"),
+    MUMMYWALK("mummywalk","v9","Mummy walk","(mummywalk)","(Mummywalk)"),
+    ZOMBIEWAVE("zombiewave","v8","Zombie wave","(zombiewave)","(Zombiewave)"),
+    STOP("stop","v12","Stop","(stop)","(Stop)"),
+    MOONING("mooning","v7","Mooning","(mooning)","(Mooning)"),
+    SANTAMOONING("santamooning","v7","Santa mooning","(santamooning)","(Santamooning)","(mooningsanta)","(Mooningsanta)"),
+    FAMILY("family","v13","Family","(family)","(Family)"),
+    FAMILYTIME("familytime","v14","Family time","(familytime)","(Familytime)"),
+    DADTIME("dadtime","v10","Dad time","(dadtime)","(Dadtime)"),
+    WOMANBATH("womanbath","v9","Woman bath","(womanbath)","(Womanbath)"),
+    HOTCHOCOLATE("hotchocolate","v14","Mom-mello","(hotchocolate)","(Hotchocolate)"),
+    CUPCAKE("cupcake","v22","Feeling sweet!","(cupcake)","(Cupcake)"),
+    NEIL("neil","v3","Neil","(neil)","(Neil)","(feetontable)","(Feetontable)"),
+    WTF("wtf","v9","WTF…","(wtf)","(Wtf)"),
+    SMOKE("smoke","v7","Smoking","(smoking)","(Smoking)","(smoke)","(Smoke)","(ci)","(Ci)"),
+    DRUNK("drunk","v7","Drunk","(drunk)","(Drunk)"),
+    FINGER("finger","v7","Finger","(finger)","(Finger)"),
+    LIPS("lips","v19","Kissing lips","(lips)","(Lips)"),
+    SYNE("syne","v15","Auld Lang Syne","(syne)","(Syne)"),
+    AULD("auld","v12","Auld Lang Syne","(auld)","(Auld)"),
+    LANG("lang","v12","Auld Lang Syne","(lang)","(Lang)"),
+    DEDMOROZ("dedmoroz","v8","Frost wizard","(dedmoroz)","(Dedmoroz)","(frostwizard)","(Frostwizard)"),
+    MATRESHKA("matreshka","v5","Skiing toy","(matreshka)","(Matreshka)","(skiingtoy)","(Skiingtoy)"),
+    SNEGOVIK("snegovik","v8","Snow buddie","(snegovik)","(Snegovik)","(snowbuddie)","(Snowbuddie)"),
+    MISHKA("mishka","v10","Music bear","(mishka)","(Mishka)","(musicbear)","(Musicbear)"),
+    XMASWOMAN("xmaswoman","v6","Xmas woman","(xmaswoman)","(Xmaswoman)"),
+    XMASWOMAN1("xmaswoman1","v11","Xmas woman 1","(xmaswoman1)","(Xmaswoman1)"),
+    XMASWOMAN2("xmaswoman2","v11","Xmas woman 2","(xmaswoman2)","(Xmaswoman2)"),
+    XMASWOMAN3("xmaswoman3","v11","Xmas woman 3","(xmaswoman3)","(Xmaswoman3)"),
+    XMASWOMAN4("xmaswoman4","v10","Xmas woman 4","(xmaswoman4)","(Xmaswoman4)"),
+    XMASWOMAN5("xmaswoman5","v9","Xmas woman 5","(xmaswoman5)","(Xmaswoman5)"),
+    XMASMAN("xmasman","v6","Xmas man","(xmasman)","(Xmasman)"),
+    XMASMAN1("xmasman1","v10","Xmas man 1","(xmasman1)","(Xmasman1)"),
+    XMASMAN2("xmasman2","v11","Xmas man 2","(xmasman2)","(Xmasman2)"),
+    XMASMAN3("xmasman3","v9","Xmas man 3","(xmasman3)","(Xmasman3)"),
+    XMASMAN4("xmasman4","v10","Xmas man 4","(xmasman4)","(Xmasman4)"),
+    XMASMAN5("xmasman5","v10","Xmas man 5","(xmasman5)","(Xmasman5)"),
+    SUN("sun","v14","Sun","(sun)","(Sun)"),
+    SNOWFLAKE("snowflake","v13","Snowflake","(snowflake)","(Snowflake)"),
+    RAIN("rain","v5","Raining","(rain)","(Rain)","(london)","(London)","(st)","(ST)","(St)"),
+    RAINBOW("rainbow","v4","Rainbow","(rainbow)","(Rainbow)"),
+    STAR("star","v7","Star","(star)","(Star)","(*)"),
+    HEART("heart","v4","Heart","(heart)","(Heart)","<3"),
+    BROKENHEART("brokenheart","v5","Broken heart","(brokenheart)","(Brokenheart)"),
+    IHEARTU("iheartu","v10","I heart You","(iheartu)","(Iheartu)"),
+    CACTUSLOVE("cactuslove","v12","Cactus love","(cactuslove)","(Cactuslove)"),
+    AVOCADOLOVE("avocadolove","v15","Avocado love","(avocadolove)","(Avocadolove)"),
+    GREATPEAR("greatpear","v7","Great pear","(greatpear)","(Greatpear)"),
+    COFFEE("coffee","v10","Coffee","(coffee)","(Coffee)"),
+    DRINK("drink","v10","Drink","(drink)","(Drink)"),
+    BEER("beer","v7","Beer","(beer)","(Beer)","(bricklayers)","(Bricklayers)"),
+    CHAMPAGNE("champagne","v6","Champagne","(champagne)","(Champagne)","(sparkling)","(Sparkling)"),
+    CHEERS("cheers","v9","Cheers!","(cheers)","(Cheers)"),
+    CHAI("chai","v5","Tea","(chai)","(Chai)","(tea)","(Tea)"),
+    CAKE("cake","v12","Cake","(cake)","(Cake)"),
+    PIZZA("pizza","v5","Pizza","(pi)","(Pi)","(pizza)","(Pizza)"),
+    PIE("pie","v13","Pie","(pie)","(Pie)"),
+    CHEESE("cheese","v8","Cheese","(cheese)","(Cheese)","(stink)","(Stink)"),
+    LADDU("laddu","v8","Sweet","(laddu)","(Laddu)"),
+    TANDOORICHICKEN("tandoorichicken","v11","Tandoori chicken","(tandoori)","(Tandoori)","(tandoorichicken)","(Tandoorichicken)"),
+    TURKEY("turkey","v8","Dancing Thanksgiving turkey","(turkey)","(Turkey)","(turkeydance)","(Turkeydance)","(thanksgiving)","(Thanksgiving)"),
+    CAR("car","v5","Car","(car)","(Car)","(au)","(Au)"),
+    TAXI("taxi","v10","Taxi","(taxi)","(Taxi)"),
+    POLICECAR("policecar","v5","Police car","(policecar)","(Policecar)"),
+    RICKSHAW("rickshaw","v6","Rickshaw","(rickshaw)","(Rickshaw)","(rikshaw)","(Rikshaw)","(ricksha)","(Ricksha)"),
+    LAUNCH("launch","v10","Rocket launch","(launch)","(Launch)","(rocket)","(Rocket)","(shuttle)","(Shuttle)"),
+    PLANE("plane","v4","Plane","(plane)","(Plane)","(ap)","(Ap)","(airplane)","(Airplane)","(aeroplane)","(Aeroplane)","(aircraft)","(Aircraft)","(jet)","(Jet)"),
+    ISLAND("island","v5","Island","(island)","(Island)","(ip)","(Ip)"),
+    FLOWER("flower","v4","Flower","(flower)","(Flower)"),
+    PARISLOVE("parislove","v4","Paris love","(parislove)","(Parislove)"),
+    GIFT("gift","v4","Gift","(gift)","(Gift)"),
+    LOVEGIFT("lovegift","v10","Love gift","(lovegift)","(Lovegift)"),
+    RING("ring","v10","Engagement ring","(ring)","(Ring)"),
+    TROPHY("trophy","v13","Trophy","(trophy)","(Trophy)"),
+    GOLDMEDAL("goldmedal","v13","Gold medal","(goldmedal)","(Goldmedal)"),
+    SILVERMEDAL("silvermedal","v11","Silver medal","(silvermedal)","(Silvermedal)"),
+    BRONZEMEDAL("bronzemedal","v12","Bronze medal","(bronzemedal)","(Bronzemedal)"),
+    BELL("bell","v2","Bell","(bell)","(Bell)","(ghanta)","(Ghanta)"),
+    DHAKKAN("dhakkan","v4","Fool","(dhakkan)","(Dhakkan)","(fool)","(Fool)"),
+    KEY("key","v13","Key","(key)","(Key)","(success)","(Success)"),
+    WFH("wfh","v7","Working from home","(wfh)","(Wfh)","(@h)","(@H)"),
+    LETSMEET("letsmeet","v5","Let's meet","(letsmeet)","(Letsmeet)","(s+)","(S+)","(calendar)","(Calendar)"),
+    COMPUTER("computer","v4","Computer","(computer)","(Computer)","(co)","(Co)","(pc)","(Pc)"),
+    PHONE("phone","v6","Phone","(mp)","(Mp)","(ph)","(Ph)","(phone)","(Phone)"),
+    WHOSTHIS("whosthis","v9","Who’s this!?","(whosthis)","(Whosthis)"),
+    UNSEE("unsee","v8","Can’t unsee that","(unsee)","(Unsee)"),
+    BRB("brb","v11","Be right back","(brb)","(Brb)","(berightback)","(Berightback)"),
+    HOLDON("holdon","v5","Hold on","(holdon)","(Holdon)","(w8)","(W8)"),
+    CANYOUTALK("canyoutalk","v5","Can you talk?","(canyoutalk)","(Canyoutalk)","(!!)"),
+    TIME("time","v5","Time","(time)","(Time)","(clock)","(Clock)"),
+    GAMES("games","v3","Games","(games)","(Games)","(ply)","(PLY)","(Ply)","(play)","(Play)","(playbox)","(Playbox)"),
+    MOVIE("movie","v9","Movie","(film)","(Film)","(movie)","(Movie)"),
+    CAMERA("camera","v4","Camera","(camera)","(Camera)"),
+    TUBELIGHT("tubelight","v6","Tubelight","(tubelight)","(Tubelight)"),
+    AMERICANFOOTBALL("americanfootball","v11","American football","(americanfootball)","(Americanfootball)"),
+    WEBHEART("webheart","v7","Web heart","(webheart)","(Webheart)"),
+    MISTLETOE("mistletoe","v13","Mistletoe","(mistletoe)","(Mistletoe)"),
+    GOODLUCK("goodluck","v8","Good luck","(goodluck)","(Goodluck)","(gl)","(GL)","(Gl)"),
+    UMBRELLA("umbrella","v9","Umbrella","(umbrella)","(Umbrella)","(um)","(Um)"),
+    TUMBLEWEED("tumbleweed","v7","Tumbleweed","(tumbleweed)","(Tumbleweed)"),
+    GROUPME("groupme","v8","GroupMe","(groupme)","(Groupme)"),
+    MAIL("mail","v6","You have mail","(mail)","(Mail)"),
+    LOVELETTER("loveletter","v5","Love letter","(loveletter)","(Loveletter)"),
+    CASH("cash","v6","Cash","(cash)","(Cash)","($)"),
+    BOMB("bomb","v5","Bomb","(bomb)","(Bomb)","(explosion)","(Explosion)","(explode)","(Explode)","@="),
+    MUSIC("music","v6","Music","(music)","(Music)"),
+    WHATSGOINGON("whatsgoingon","v10","What's going on?","(whatsgoingon)","(Whatsgoingon)","(!!?)"),
+    SKYPE("skype","v8","Skype","(skype)","(Skype)","(ss)","(Ss)"),
+    GOLMAAL("golmaal","v24","Confusion","(golmaal)","(Golmaal)"),
+    KYA("kya","v6","What!","(kya)","(Kya)"),
+    OYE("oye","v6","Oye","(oye)","(Oye)"),
+    ABE("abe","v2","Abe","(abe)","(Abe)","(abey)","(Abey)"),
+    CONFIDENTIAL("confidential","v4","Confidential","(confidential)","(Confidential)","(qt)","(QT)","(Qt)"),
+    BUG("bug","v7","Bug","(bug)","(Bug)"),
+    SHEEP("sheep","v6","Sheep","(sheep)","(Sheep)","(bah)","(Bah)"),
+    WIN10("win10","v3","Windows 10","(win10)","(Win10)","(ninjacat)","(Ninjacat)","(windows)","(Windows)","(trex)","(Trex)","(windows10)","(Windows10)"),
+    ACCESS("access","v3","Access","(access)","(Access)"),
+    BING("bing","v3","Bing","(bing)","(Bing)"),
+    EXCEL("excel","v4","Excel","(excel)","(Excel)"),
+    MICROSOFT("microsoft","v2","Microsoft","(microsoft)","(Microsoft)","(ms)","(Ms)","(MS)"),
+    ONEDRIVE("onedrive","v2","OneDrive","(onedrive)","(Onedrive)"),
+    ONENOTE("onenote","v3","OneNote","(onenote)","(Onenote)"),
+    OUTLOOK("outlook","v4","Outlook","(outlook)","(Outlook)"),
+    POWERPOINT("powerpoint","v2","PowerPoint","(powerpoint)","(Powerpoint)"),
+    PUBLISHER("publisher","v3","Publisher","(publisher)","(Publisher)"),
+    SHAREPOINT("sharepoint","v6","SharePoint","(sharepoint)","(Sharepoint)"),
+    SKYPEBIZ("skypebiz","v4","Skype for Business","(skypebiz)","(Skypebiz)","(sforb)","(Sforb)"),
+    WORD("word","v8","Word","(word)","(Word)"),
+    XBOX("xbox","v3","Xbox","(xbox)","(Xbox)"),
+    INTERNETEXPLORER("internetexplorer","v11","Internet Explorer","(internetexplorer)","(Internetexplorer)","(ie)","(Ie)","(IE)"),
+    POOP("poop","v8","Pile of poo","(poop)","(Poop)","(poo)","(Poo)"),
+    PIGGYBANK("piggybank","v20","Piggy bank","(piggybank)","(Piggybank)"),
+    SPARKLER("sparkler","v7","Sparkler","(sparkler)","(Sparkler)"),
+    FIREWORKS("fireworks","v6","Fireworks","(fireworks)","(Fireworks)"),
+    HOLI("holi","v6","Holi","(holi)","(Holi)","(rang)","(Rang)"),
+    EID("eid","v11","Eid","(eid)","(Eid)"),
+    DIYA("diya","v7","Tealight","(diwali)","(Diwali)","(diya)","(Diya)"),
+    DREIDEL("dreidel","v15","Dreidel","(dreidel)","(Dreidel)"),
+    HANUKKAH("hanukkah","v12","Hanukkah","(hanukkah)","(Hanukkah)"),
+    XMASTREE("xmastree","v7","Xmas tree","(xmastree)","(Xmastree)","(christmastree)","(Christmastree)"),
+    XMASHEART("xmasheart","v9","Xmas heart","(xmasheart)","(Xmasheart)"),
+    XMASCAR("xmascar","v8","Xmas car","(xmascar)","(Xmascar)"),
+    NOVIYGOD("noviygod","v9","Red square","(noviygod)","(Noviygod)","(redsquare)","(Redsquare)");
 
     private final String id;
     private final String etag;
-    private final String desc;
-    private final List<String> shortcuts;
+    private String desc;
+    private List<String> shortcuts;
 
     Emoticon(String id, String etag, String desc, String... shortcuts) {
         this.id = id;
@@ -264,14 +469,14 @@ public String getEtag() {
     public String getDescription() {
         return this.desc;
     }
-
+    
     private static Map<String, Emoticon> dictionary;
     private static int longestEmoji = -1;
 
     public static Map<String, Emoticon> getDictionary() {
         if (dictionary == null) { // This is for performance, trust me
             initDictionary();
-        }
+}
         return dictionary;
     }
 
diff --git a/src/main/java/com/samczsun/skype4j/formatting/lang/en/Moji.java b/src/main/java/com/samczsun/skype4j/formatting/lang/en/Moji.java
index 0065688..69a1c3e 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/lang/en/Moji.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/lang/en/Moji.java
@@ -22,7 +22,7 @@
 import java.util.Map;
 
 public enum Moji implements IMoji {
-
+        
     DESPICABLEME("7e241717964a403dbab21be9fa860c81", "01fdf549-b6dc-4319-983c-1dd2d42f35e6", "Despicable Me"),
     DESPICABLEME_1("ca62da9e0ae54dca8b36ae300cb63991", "2aae7c79-39c3-4e57-a280-05179c416e2d", "Despicable Me 2"),
     DESPICABLEME_2("0b9704a393a846ea845821cc8eea157f", "a9b07f96-218b-41f7-9407-627ab69dba8a", "Despicable Me"),
@@ -301,11 +301,11 @@
     KILLDIL_5("825473cc486d48b0acf25f52045a21be", "b139d61b-3df8-4440-a1c5-9ef318163181", "Kill Dil "),
     AGENTVINOD("37ef0832a0ac486fa07953c73bf6cee9", "2e4a8407-5931-4930-8ebc-d2e48e0397d3", "Agent Vinod"),
     VICKYDONOR_1("14271874627f4a2d893db568eeff9954", "3c026c7d-aa37-4fe1-8bfb-133460aed512", "Vicky Donor"),
-    MOHABBATEIN("b3cffea2fd5044d08db7458e4c373cdf", "5b000c95-f530-4a7f-b302-842675aaa249", "Mohabbatein ");
+    MOHABBATEIN("b3cffea2fd5044d08db7458e4c373cdf", "5b000c95-f530-4a7f-b302-842675aaa249", "Mohabbatein ");    
 
-    private final String id;
-    private final String etag;
-    private final String desc;
+    private String id;
+    private String etag;
+    private String desc;
 
     Moji(String id, String etag, String desc) {
         this.id = id;
diff --git a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
index 54b7d29..1a9bd80 100644
--- a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
+++ b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
@@ -75,7 +75,7 @@
             "https://%sclient-s.gateway.messenger.live.com/v1/threads/%s/properties?name=%s").cloud().regtoken();
     public static final Endpoints ADD_MEMBER_URL = new Endpoints(
             "https://client-s.gateway.messenger.live.com/v1/threads/%s/members/8:%s").regtoken();
-    public static final Endpoints LOGIN_URL = new Endpoints("https://api.skype.com/login/skypetoken");
+    public static final Endpoints LOGIN_URL = new Endpoints("https://edge.skype.com/rps/v1/rps/skypetoken");
     public static final Endpoints PING_URL = new Endpoints("https://web.skype.com/api/v1/session-ping").skypetoken();
     public static final Endpoints TOKEN_AUTH_URL = new Endpoints("https://api.asm.skype.com/v1/skypetokenauth");
     public static final Endpoints LOGOUT_URL = new Endpoints(
@@ -122,14 +122,16 @@
     public static final Endpoints FETCH_IMAGE = new Endpoints(
             "https://api.asm.skype.com/v1/objects/%s/views/%s").defaultHeader("Authorization", AUTHORIZATION);
     public static final Endpoints VISIBILITY = new Endpoints(
-            "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/presenceDocs/messagingService")
-            .cloud()
+            "https://client-s.gateway.messenger.live.com/v1/users/ME/presenceDocs/messagingService")
             .regtoken();
     public static final Endpoints SEARCH_SKYPE_DIRECTORY = new Endpoints(
             "https://api.skype.com/search/users/any?keyWord=%s&contactTypes[]=skype").skypetoken();
     public static final Endpoints GET_ALL_CONTACTS = new Endpoints(
-            "https://contacts.skype.com/contacts/v1/users/%s/contacts?delta&$filter=type%%20eq%%20%%27skype%%27%%20or%%20type%%20eq%%20%%27msn%%27%%20or%%20type%%20eq%%20%%27pstn%%27%%20or%%20type%%20eq%%20%%27agent%%27%%20or%%20type%%20eq%%20%%27lync%%27&reason=%s")
+            "https://contacts.skype.com/contacts/v2/users/SELF?delta=&reason=default")
             .skypetoken();
+    public static final Endpoints GET_ALL_CONTACTS_STATUS = new Endpoints(
+            "https://client-s.gateway.messenger.live.com/v1/users/ME/contacts/ALL/presenceDocs/messagingService?%s")
+            .regtoken();
     public static final Endpoints GET_CONTACT_BY_ID = new Endpoints(
             "https://contacts.skype.com/contacts/v1/users/%s/contacts?$filter=id%%20eq%%20%%27%s%%27&reason=default").skypetoken();
     public static final Endpoints BLOCK_CONTACT = new Endpoints(
@@ -149,10 +151,10 @@
     @Deprecated
     public static final Endpoints CONTACT_INFO = new Endpoints(
             "https://api.skype.com/users/self/contacts/profiles").skypetoken();
-    public static final Endpoints PROFILE_INFO = new Endpoints("https://api.skype.com/users/batch/profiles").skypetoken();
+    public static final Endpoints PROFILE_INFO = new Endpoints("https://api.skype.com/users/self/profile").skypetoken();
     public static final Endpoints RECONNECT_WEBSOCKET = new Endpoints(
             "https://go.trouter.io/v2/h?ccid=%s&dom=web.skype.com");
-    public static final Endpoints ELIGIBILITY_CHECK = new Endpoints("https://web.skype.com/api/v2/eligibility-check").skypetoken();
+    public static final Endpoints ELIGIBILITY_CHECK = new Endpoints("https://web.skype.com/").skypetoken();
 
     public static final Endpoints AGENT_INFO = new Endpoints("https://api.aps.skype.com/v1/agents?agentId=%s").skypetoken();
 
@@ -232,7 +234,7 @@ private EndpointConnection(Endpoints endpoint, SkypeImpl skype, Object[] args) {
             this.skype = skype;
             this.args = args;
             header("User-Agent",
-                    "Mozilla/5.0 (Windows NT 10; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.73 Safari/537.36 Skype4J/" + SkypeImpl.VERSION);
+                    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36 Skype4J/" + SkypeImpl.VERSION);
         }
 
         public EndpointConnection<E_TYPE> header(String key, String val) {
diff --git a/src/main/java/com/samczsun/skype4j/internal/EventType.java b/src/main/java/com/samczsun/skype4j/internal/EventType.java
index 42060d9..2243d47 100644
--- a/src/main/java/com/samczsun/skype4j/internal/EventType.java
+++ b/src/main/java/com/samczsun/skype4j/internal/EventType.java
@@ -16,13 +16,20 @@
 
 package com.samczsun.skype4j.internal;
 
+import br.com.seti.dao.SkypeContact;
 import com.eclipsesource.json.JsonObject;
+import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.SkypeException;
+import com.samczsun.skype4j.participants.info.Contact;
 import org.jsoup.helper.Validate;
 
 import java.io.IOException;
+import java.sql.SQLException;
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -30,6 +37,7 @@
     NEW_MESSAGE("NewMessage") {
         @Override
         public void handle(SkypeImpl skype, JsonObject eventObj) throws SkypeException, IOException {
+
             JsonObject resource = eventObj.get("resource").asObject();
             String type = Utils.getString(resource, "messagetype");
             try {
@@ -80,8 +88,19 @@ public void handle(SkypeImpl skype, JsonObject eventObj) throws SkypeException {
     },
     USER_PRESENCE("UserPresence") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
-
+        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException, ConnectionException {
+            String resourceLinkMe = "https://bn2-client-s.gateway.messenger.live.com/v1/users/ME/presenceDocs/messagingService";
+            String resourceLink = resource.get("resourceLink").asString();
+            if (resourceLinkMe.equalsIgnoreCase(resourceLink)){
+                try {
+                    skype.getLoginUserStatus();
+                } catch (SQLException ex) {
+                    Logger.getLogger(EventType.class.getName()).log(Level.SEVERE, null, ex);
+                }
+            } else {
+                skype.updateContactList();
+                skype.SaveContacts();
+            }
         }
     },
     CONVERSATION_UPDATE("ConversationUpdate") {
@@ -94,6 +113,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
         @Override
         public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
             // User add and leave here 25898
+            System.out.println("testete");
         }
     };
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/Factory.java b/src/main/java/com/samczsun/skype4j/internal/Factory.java
index 4483e31..933df57 100644
--- a/src/main/java/com/samczsun/skype4j/internal/Factory.java
+++ b/src/main/java/com/samczsun/skype4j/internal/Factory.java
@@ -85,7 +85,7 @@ public static ChatMessageImpl createMessage(Chat chat, ParticipantImpl user, Str
         Validate.isTrue(chat instanceof ChatImpl, "Chat must be instanceof ChatImpl");
         Validate.notNull(user, "User must not be null");
 
-        if (("8:" + chat.getClient().getUsername()).equals(user.getId())) {
+        if (("8:" + chat.getClient().getLiveUsername()).equals(user.getId())) {
             return new SentMessageImpl(chat, user, id, clientId, time, message, skype);
         } else {
             return new ReceivedMessageImpl(chat, user, id, clientId, time, message, skype);
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
index df1a2cc..ff49540 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
@@ -16,6 +16,8 @@
 
 package com.samczsun.skype4j.internal;
 
+import br.com.seti.dao.SkypeContact;
+import br.com.seti.dao.SkypeUser;
 import com.eclipsesource.json.JsonArray;
 import com.eclipsesource.json.JsonObject;
 import com.eclipsesource.json.JsonValue;
@@ -47,6 +49,7 @@
 import java.nio.charset.StandardCharsets;
 import java.security.KeyManagementException;
 import java.security.NoSuchAlgorithmException;
+import java.sql.SQLException;
 import java.util.*;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -69,6 +72,10 @@
     protected final Set<String> resources;
     protected final List<ErrorHandler> errorHandlers;
     private final String username;
+    private String liveUsername;
+    private String status;
+    private String displayName;
+    private String userPhones;
     protected ExecutorService scheduler;
     protected ExecutorService shutdownThread;
     protected EventDispatcher eventDispatcher = new SkypeEventDispatcher(this);
@@ -96,7 +103,8 @@
     protected final Map<String, BotInfoImpl> allBots = Collections.synchronizedMap(new HashMap<>());
     protected final Set<Contact.ContactRequest> allContactRequests = Collections.synchronizedSet(new HashSet<>());
 
-    public SkypeImpl(String username, Set<String> resources, Logger logger, List<ErrorHandler> errorHandlers) {
+    public SkypeImpl(String username, Set<String> resources, Logger logger, List<ErrorHandler> errorHandlers) throws ConnectionException {
+        this.liveUsername = null;
         this.username = username;
         this.resources = Collections.unmodifiableSet(new HashSet<>(resources));
         this.errorHandlers = Collections.unmodifiableList(new ArrayList<>(errorHandlers));
@@ -125,6 +133,25 @@ public String format(LogRecord record) {
             this.logger.setUseParentHandlers(false);
             this.logger.addHandler(handler);
         }
+          this.status = null;
+    }
+    
+    public void getLoginUserStatus() throws ConnectionException, SQLException {
+        JsonObject object = Endpoints.VISIBILITY
+                .open(this)
+                .as(JsonObject.class)
+                .expect(200, "While loading contacts status")
+                .get();
+        this.status = object.get("status").asString();
+        SkypeUser user = new SkypeUser(username);
+        user.setCredits("1");
+        user.setLoginLive(liveUsername);
+        user.setMonitorStatus("");
+        user.setFullName(this.displayName);
+        user.setPhone(userPhones);
+        user.setSkypeStatus(this.status.toUpperCase());
+        user.setLastKnownStatus(this.status.toUpperCase());
+        SkypeUser.save(user);
     }
 
     @Override
@@ -476,6 +503,7 @@ public void subscribe() throws ConnectionException {
                         .expect(200, "Err")
                         .put(new JsonObject().add("endpointFeatures", "Agent"));
                 connection = Endpoints.SUBSCRIPTIONS_URL.open(this).dontConnect().post(buildSubscriptionObject());
+                getLoginUserStatus();
             }
             if (connection.getResponseCode() != 201) {
                 throw ExceptionHandler.generateException("While subscribing", connection);
@@ -569,7 +597,31 @@ public ExecutorService getScheduler() {
     public String getUsername() {
         return this.username;
     }
+    
+    public String getLiveUsername() {
+        return this.liveUsername;
+    }
+
+    public void setLiveUsername(String liveUsername) {
+        this.liveUsername = liveUsername;
+    }
+    
+    public String getDisplayName() {
+        return this.displayName;
+    }
+
+    public void setDisplayName(String displayName) {
+        this.displayName = displayName;
+    }
+    
+    public String getUserPhones() {
+        return this.userPhones;
+    }
 
+    public void setUserPhones(String userPhones) {
+        this.userPhones = userPhones;
+    }
+    
     public UUID getGuid() {
         return guid;
     }
@@ -621,6 +673,24 @@ public long getExpirationTime() {
     public SkypeWebSocket getWebSocket() {
         return wss;
     }
+    
+    public void SaveContacts(){
+        Collection<Contact> contacts = this.getAllContacts();
+        for (Contact contact : contacts){
+            SkypeContact contato = new SkypeContact();
+            contato.setUserLogin(this.getUsername());
+            String[] splitUsername = contact.getUsername().split(":", 2);
+            contato.setLogin(splitUsername[1]);
+            contato.setFullName(contact.getDisplayName());
+            contato.setPhone(contact.getPhoneNumbers());
+            contato.setStatus(contact.getStatus().toUpperCase());
+            try {
+                SkypeContact.save(contato);
+            } catch (SQLException ex) {
+                Logger.getLogger(EventType.class.getName()).log(Level.SEVERE, null, ex);
+            }
+        }
+    }
 
     public void setVisibility(Visibility visibility) throws ConnectionException {
         Endpoints.VISIBILITY
@@ -630,6 +700,10 @@ public void setVisibility(Visibility visibility) throws ConnectionException {
     }
 
     public String getId() {
-        return "8:" + getUsername();
+        if(getLiveUsername() != null){
+            return "8:" + getLiveUsername();
+        } else {
+            return "8:" + getUsername();
+        }
     }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java b/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
index d92360e..ea01236 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
@@ -20,6 +20,7 @@
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.handler.ErrorSource;
 import com.samczsun.skype4j.internal.client.FullClient;
+import com.samczsun.skype4j.internal.participants.info.ContactImpl;
 import org.java_websocket.SSLSocketChannel2;
 import org.java_websocket.client.DefaultSSLWebSocketClientFactory;
 import org.java_websocket.client.WebSocketClient;
@@ -39,10 +40,12 @@
 import java.security.KeyManagementException;
 import java.security.NoSuchAlgorithmException;
 import java.security.cert.X509Certificate;
+import java.sql.SQLException;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Level;
+import java.util.logging.Logger;
 
 public class SkypeWebSocket extends WebSocketClient {
     private final SkypeImpl skype;
@@ -109,9 +112,14 @@ public void onMessage(String s) {
             int event = body.get("evt").asInt();
             if (event == 6) {
                 try {
+                    ContactImpl contactImpl = new ContactImpl(skype);
+                    skype.getLoginUserStatus();
                     skype.updateContactList();
+                    skype.SaveContacts();
                 } catch (ConnectionException e) {
                     skype.handleError(ErrorSource.UPDATING_CONTACT_LIST, e, false);
+                } catch (SQLException ex) {
+                    Logger.getLogger(SkypeWebSocket.class.getName()).log(Level.SEVERE, null, ex);
                 }
             } else if (event == 14) {
                 try {
diff --git a/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java b/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java
index 754e310..c5b29e4 100644
--- a/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java
@@ -261,7 +261,7 @@ public String getIdentity() {
     public SkypeImpl getClient() {
         return this.client;
     }
-
+    
     @Override
     public void startTyping(ErrorHandler handler) {
         if (this.typingThread == null) {
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java b/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
index 51c0e26..6981ec3 100644
--- a/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
+++ b/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
@@ -32,9 +32,12 @@
 import com.samczsun.skype4j.internal.utils.Encoder;
 import com.samczsun.skype4j.internal.utils.UncheckedRunnable;
 import com.samczsun.skype4j.participants.info.Contact;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
 
 import javax.xml.bind.DatatypeConverter;
 import java.net.HttpURLConnection;
+import java.net.URLDecoder;
 import java.nio.charset.StandardCharsets;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
@@ -46,30 +49,202 @@
 import java.util.logging.Logger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import javax.security.auth.login.AccountNotFoundException;
+import org.jsoup.Connection;
+import org.jsoup.Connection.Response;
+import org.jsoup.Jsoup;
+import org.jsoup.select.Elements;
 
 public class FullClient extends SkypeImpl {
     private static final Pattern URL_PATTERN = Pattern.compile("threads/(.*)", Pattern.CASE_INSENSITIVE);
-
+    private static final String SERVER_HOSTNAME = "https://login.live.com";
     private final String password;
 
-    public FullClient(String username, String password, Set<String> resources, Logger customLogger, List<ErrorHandler> errorHandlers) {
+    public FullClient(String username, String password, Set<String> resources, Logger customLogger, List<ErrorHandler> errorHandlers) throws ConnectionException {
         super(username, resources, customLogger, errorHandlers);
         this.password = password;
     }
 
     @Override
     public void login() throws InvalidCredentialsException, ConnectionException {
+            logger.finer("Refreshing tokens");
+    
+        Response authorize = null;
+        try {
+            authorize = Jsoup.connect(SERVER_HOSTNAME + "/oauth20_authorize.srf?client_id=00000000480BC46C&scope=service%3A%3Alw.skype.com%3A%3AMBI_SSL&response_type=token&redirect_uri=https%3A%2F%2Flogin.live.com%2Foauth20_desktop.srf&state=999&locale=en").maxBodySize(100 * 1024 * 1024).timeout(30000).method(Connection.Method.GET).ignoreContentType(true).ignoreHttpErrors(true).execute();
+        } catch (IOException ex) {
+            Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+        }
+
+        String MSPOK = authorize.cookie("MSPOK");
+        if (MSPOK == null) {
+          IOException e = new IOException("Error while connecting to Live: MSPOK not set.");
+          logger.log(Level.SEVERE, "", e);
+            try {
+                throw e;
+            } catch (IOException ex) {
+                Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+            }
+        }
+
+        Elements PPFTs = null;
+        for (int i = 0; i < authorize.body().length(); i++) {
+          i = authorize.body().indexOf("<input", i);
+          if (i == -1) {
+            break;
+          }
+          int j = authorize.body().indexOf(">", i);
+          if (j == -1) {
+            break;
+          }
+          PPFTs = Jsoup.parseBodyFragment(authorize.body().substring(i, j + ">".length())).select("input[name=PPFT][value]");
+          if (!PPFTs.isEmpty()) {
+            break;
+          }
+        }
+        if (PPFTs == null || PPFTs.isEmpty()) {
+          IOException e = new IOException("Error while connecting to Live: PPFT not found.");
+          logger.log(Level.SEVERE, "", e);
+            try {
+                throw e;
+            } catch (IOException ex) {
+                Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+            }
+        }
+        String PPFT = PPFTs.first().attr("value");
+
+        String postUrl = SERVER_HOSTNAME + "/ppsecure/post.srf?client_id=00000000480BC46C&scope=service%3A%3Alw.skype.com%3A%3AMBI_SSL&response_type=token&redirect_uri=https%3A%2F%2Flogin.live.com%2Foauth20_desktop.srf&state=999&locale=en";
+        int urlStart = authorize.body().indexOf("urlPost:'");
+        if (urlStart != -1) {
+          int urlEnd = authorize.body().indexOf('\'', urlStart + "urlPost:'".length());
+          if (urlEnd != 1) {
+            postUrl = authorize.body().substring(urlStart + "urlPost:'".length(), urlEnd);
+          }
+        }
+
+        Connection.Response post = null;
+        try {
+            post = Jsoup.connect(postUrl).data("PPFT", PPFT, "login", getUsername().toLowerCase(), "passwd", password).cookie("MSPOK", MSPOK).maxBodySize(100 * 1024 * 1024).timeout(30000).method(Connection.Method.POST).followRedirects(false).ignoreContentType(true).ignoreHttpErrors(true).execute();
+        } catch (IOException ex) {
+            Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+        }
+        if (post.statusCode() != 302) {
+          int index = post.body().indexOf("sErrTxt:'");
+          int end;
+          end = post.body().indexOf('\'', index + "sErrTxt:'".length());
+          while (post.body().charAt(end - 1) == '\\') {
+            end = post.body().indexOf('\'', end + 1);
+          }
+          if (index == -1 || end == -1) {
+            IOException e = new IOException("Error while connecting to Live: not redirected, no reason given.");
+            logger.log(Level.SEVERE, "", e);
+              try {
+                  throw e;
+              } catch (IOException ex) {
+                  Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+              }
+          }
+
+          String errMessage = post.body().substring(index + "sErrTxt:'".length(), end);
+          if ((errMessage.contains("account") || errMessage.contains("password")) && errMessage.contains("incorrect")) {
+            IOException e = new IOException("Error while connecting to Live: " + errMessage);
+            logger.log(Level.SEVERE, "", e);
+              try {
+                  throw e;
+              } catch (IOException ex) {
+                  Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+              }
+          } else if (errMessage.toLowerCase().contains("microsoft account doesn\\'t exist")) {
+            AccountNotFoundException e = new AccountNotFoundException("Error while connecting to Live: " + errMessage);
+            logger.log(Level.SEVERE, "", e);
+              try {
+                  throw e;
+              } catch (AccountNotFoundException ex) {
+                  Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+              }
+          } else {
+            IOException e = new IOException("Error while connecting to Live: " + errMessage);
+            logger.log(Level.SEVERE, "", e);
+              try {
+                  throw e;
+              } catch (IOException ex) {
+                  Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+              }
+          }
+        }
+
+        String url = post.header("Location");
+
+        int refreshTokenStart = url.indexOf("refresh_token=");
+        if (refreshTokenStart == -1) {
+          IOException e = new IOException("Error while connecting to Live: refresh token not found.");
+          logger.log(Level.SEVERE, "", e);
+                try {
+                    throw e;
+                } catch (IOException ex) {
+                    Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+                }
+        }
+        int refreshTokenEnd = url.indexOf('&', refreshTokenStart + "refresh_token=".length());
+        if (refreshTokenEnd == -1) {
+          refreshTokenEnd = url.length();
+        }
+        String refreshToken = url.substring(refreshTokenStart + "refresh_token=".length(), refreshTokenEnd);
+        try {
+            refreshToken = URLDecoder.decode(refreshToken, StandardCharsets.UTF_8.name());
+        } catch (UnsupportedEncodingException ex) {
+            Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+        }
+
+        int accessTokenStart = url.indexOf("access_token=");
+        if (accessTokenStart == -1) {
+          IOException e = new IOException("Error while connecting to Live: access token not found.");
+          logger.log(Level.SEVERE, "", e);
+                try {
+                    throw e;
+                } catch (IOException ex) {
+                    Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+                }
+        }
+        int accessTokenEnd = url.indexOf('&', accessTokenStart + "access_token=".length());
+        if (accessTokenEnd == -1) {
+          accessTokenEnd = url.length();
+        }
+        String accessToken = url.substring(accessTokenStart + "access_token=".length(), accessTokenEnd);
+        try {
+            accessToken = URLDecoder.decode(accessToken, StandardCharsets.UTF_8.name());
+        } catch (UnsupportedEncodingException ex) {
+            Logger.getLogger(FullClient.class.getName()).log(Level.SEVERE, null, ex);
+        }
+
+        int expires = 86400;
+        int expiresStart = url.indexOf("expires_in=");
+        if (expiresStart != -1) {
+          int expiresEnd = url.indexOf('&', expiresStart + "expires_in=".length());
+          if (expiresEnd == -1) {
+            expiresEnd = url.length();
+          }
+          try {
+            expires = Integer.parseInt(url.substring(expiresStart, expiresEnd));
+          } catch (NumberFormatException ignore) {
+          }
+        }
+        
+        
         Map<String, String> data = new HashMap<>();
         data.put("scopes", "client");
-        data.put("clientVersion", "0/7.4.85.102/259/");
+        data.put("clientVersion", "1431/8.30.0.50");
         data.put("username", getUsername().toLowerCase());
         data.put("passwordHash", hash());
+        data.put("access_token", accessToken);
+        data.put("site_name", "lw");
         JsonObject loginData = Endpoints.LOGIN_URL.open(this)
                 .as(JsonObject.class)
                 .expect(200, "While logging in")
                 .post(Encoder.encode(data));
 
         this.setSkypeToken(loginData.get("skypetoken").asString());
+        this.setLiveUsername(loginData.get("skypeid").asString());
 
         List<UncheckedRunnable> tasks = new ArrayList<>();
         tasks.add(() -> {
@@ -113,18 +288,45 @@ public void logout() throws ConnectionException {
 
     @Override
     public void loadAllContacts() throws ConnectionException {
+        String contactsStatus = "";
+        int i = 0;
         JsonObject object = Endpoints.GET_ALL_CONTACTS
-                .open(this, getUsername(), "default")
+                .open(this)
                 .as(JsonObject.class)
                 .expect(200, "While loading contacts")
                 .get();
+        for (JsonValue valueStatus : object.get("contacts").asArray()) {
+            JsonObject objStatus = valueStatus.asObject();
+            if (objStatus.get("suggested") == null || !objStatus.get("suggested").asBoolean()) {
+//                String ignoreContact = Utils.getString(objStatus, "person_id");
+//                if ("28:0d5d6cff-595d-49d7-9cf8-973173f5233b".equals(ignoreContact)){
+//                    continue;
+//                }
+                if (i == 0) {
+                    contactsStatus = "cMri=" + objStatus.get("person_id").asString();
+                } else {
+                    contactsStatus += "&cMri=" + objStatus.get("person_id").asString();
+                }
+                i++;
+            }
+        }
+        JsonObject objectStatus = Endpoints.GET_ALL_CONTACTS_STATUS
+                .open(this, contactsStatus)
+                .as(JsonObject.class)
+                .expect(200, "While loading contacts status")
+                .get();
+        i=0;
         for (JsonValue value : object.get("contacts").asArray()) {
+            JsonObject objStatus = (JsonObject) objectStatus.get("Responses").asArray().get(i);
+            objStatus = (JsonObject) objStatus.get("Payload");
+            String status = objStatus.get("status").asString();
             JsonObject obj = value.asObject();
             if (obj.get("suggested") == null || !obj.get("suggested").asBoolean()) {
-                if (!allContacts.containsKey(obj.get("id").asString())) {
-                    this.allContacts.put(obj.get("id").asString(), new ContactImpl(this, obj));
+                if (!allContacts.containsKey(obj.get("person_id").asString())) {
+                    this.allContacts.put(obj.get("person_id").asString(), new ContactImpl(this, obj, status));
                 }
             }
+            i++;
         }
     }
 
@@ -156,18 +358,46 @@ public void getContactRequests(boolean fromWebsocket) throws ConnectionException
 
     @Override
     public void updateContactList() throws ConnectionException {
-        JsonObject obj = Endpoints.GET_ALL_CONTACTS
+        String contactsStatus = "";
+        int i = 0;
+        JsonObject object = Endpoints.GET_ALL_CONTACTS
                 .open(this, getUsername(), "notification")
                 .as(JsonObject.class)
                 .expect(200, "While loading contacts")
                 .get();
-        for (JsonValue value : obj.get("contacts").asArray()) {
+        for (JsonValue valueStatus : object.get("contacts").asArray()) {
+            JsonObject objStatus = valueStatus.asObject();
+            if (objStatus.get("suggested") == null || !objStatus.get("suggested").asBoolean()) {
+//                String ignoreContact = Utils.getString(objStatus, "person_id");
+//                if ("28:0d5d6cff-595d-49d7-9cf8-973173f5233b".equals(ignoreContact)){
+//                    continue;
+//                }
+                if (i == 0) {
+                    contactsStatus = "cMri=" + objStatus.get("person_id").asString();
+                } else {
+                    contactsStatus += "&cMri=" + objStatus.get("person_id").asString();
+                }
+                i++;
+            }
+        }
+        JsonObject objectStatus = Endpoints.GET_ALL_CONTACTS_STATUS
+                .open(this, contactsStatus)
+                .as(JsonObject.class)
+                .expect(200, "While loading contacts status")
+                .get();
+        i=0;
+        
+        for (JsonValue value : object.get("contacts").asArray()) {
+            JsonObject objStatus = (JsonObject) objectStatus.get("Responses").asArray().get(i);
+            objStatus = (JsonObject) objStatus.get("Payload");
+            String status = Utils.getString(objStatus, "status");
             if (value.asObject().get("suggested") == null || !value.asObject().get("suggested").asBoolean()) {
-                String id = value.asObject().get("id").asString();
+                String id = value.asObject().get("person_id").asString();
                 ContactImpl impl = (ContactImpl) allContacts.get(id);
                 if (impl == null) impl = (ContactImpl) loadContact(id);
-                impl.update(value.asObject());
+                impl.update(value.asObject(), status);
             }
+            i++;
         }
     }
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/GuestClient.java b/src/main/java/com/samczsun/skype4j/internal/client/GuestClient.java
index 1303e78..7dc6291 100644
--- a/src/main/java/com/samczsun/skype4j/internal/client/GuestClient.java
+++ b/src/main/java/com/samczsun/skype4j/internal/client/GuestClient.java
@@ -45,7 +45,7 @@
 
     private volatile String actualUsername;
 
-    public GuestClient(String username, String chatId, Set<String> resources, Logger logger, List<ErrorHandler> errorHandlers) {
+    public GuestClient(String username, String chatId, Set<String> resources, Logger logger, List<ErrorHandler> errorHandlers) throws ConnectionException {
         super(username, resources, logger, errorHandlers);
         this.chatId = chatId;
         this.requestedUsername = username;
diff --git a/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactImpl.java b/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactImpl.java
index ce62c13..a43c0aa 100644
--- a/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactImpl.java
@@ -50,22 +50,41 @@ public static Contact createContact(SkypeImpl skype, String username, JsonObject
     }
 
     private static JsonObject getObject(SkypeImpl skype, String username) throws ConnectionException {
-        JsonArray array = Endpoints.PROFILE_INFO
+        JsonObject obj = Endpoints.PROFILE_INFO
                 .open(skype)
-                .expect(200, "While getting contact info")
-                .as(JsonArray.class)
-                .post(new JsonObject()
-                        .add("usernames", new JsonArray()
-                                .add(username)
-                        )
-                );
-        return array.get(0).asObject();
+                .expect(200, "While getting profile info")
+                .as(JsonObject.class)
+                .get();
+        String userPhones = "";
+        String displayName = Utils.getString(obj, "firstname") + " " + Utils.getString(obj, "lastname");
+        if (Utils.getString(obj, "phoneHome") != null){
+            userPhones = Utils.getString(obj, "phoneHome");
+        }
+        if (Utils.getString(obj, "phoneMobile") != null){
+            if (userPhones == ""){
+                userPhones = Utils.getString(obj, "phoneMobile");
+            } else {
+                userPhones += ", " + Utils.getString(obj, "phoneMobile");
+            }
+        }
+        if (Utils.getString(obj, "phoneOffice") != null){
+            if (userPhones == ""){
+                userPhones = Utils.getString(obj, "phoneOffice");
+            } else {
+                userPhones += ", " + Utils.getString(obj, "phoneOffice");
+            }
+        }
+        skype.setUserPhones(userPhones);
+        skype.setDisplayName(displayName);
+        return obj;
     }
 
     private SkypeImpl skype;
     private String username;
     private String displayName;
     private String firstName;
+    private String phones ; 
+    private String status;
     private String lastName;
     private String birthday;
     private String gender;
@@ -91,16 +110,21 @@ public ContactImpl(SkypeImpl skype, String username, JsonObject unaddedData) thr
         this.username = username;
         if (!PHONE_NUMBER.matcher(username).matches()) {
             updateProfile(unaddedData);
-            updateContactInfo();
+//            updateContactInfo();
         } else {
             this.isPhone = true;
         }
     }
 
-    public ContactImpl(SkypeImpl skype, JsonObject contact) throws ConnectionException {
+    public ContactImpl(SkypeImpl skype, JsonObject contact, String contactStatus) throws ConnectionException {
+        this.skype = skype;
+        getObject(skype, username);
+        update(contact, contactStatus);
+    }
+    
+    public ContactImpl(SkypeImpl skype) throws ConnectionException {
         this.skype = skype;
-        update(contact);
-        updateProfile(getObject(skype, getUsername()));
+        getObject(skype, username);
     }
 
     private void updateContactInfo() throws ConnectionException {
@@ -112,7 +136,7 @@ private void updateContactInfo() throws ConnectionException {
                     .get();
             if (obj.get("contacts").asArray().size() > 0) {
                 JsonObject contact = obj.get("contacts").asArray().get(0).asObject();
-                update(contact);
+//                update(contact, contactStatus);
             } else {
                 this.isAuthorized = false;
                 this.isBlocked = false;
@@ -139,6 +163,14 @@ public String getFirstName() {
     public String getLastName() {
         return this.lastName;
     }
+    
+    public String getPhoneNumbers() {
+        return this.phones;
+    }
+    
+    public String getStatus() {
+        return this.status;
+    }
 
     @Override
     public BufferedImage getAvatarPicture() throws ConnectionException {
@@ -256,8 +288,8 @@ public Chat getPrivateConversation() throws ConnectionException, ChatNotFoundExc
         return skype.getOrLoadChat("8:" + this.username);
     }
 
-    public void update(JsonObject contact) {
-        this.username = contact.get("id").asString();
+    public void update(JsonObject contact, String contactStatus) throws ConnectionException {
+        this.username = contact.get("person_id").asString();
         this.isAuthorized = contact.get("authorized").asBoolean();
         this.isBlocked = contact.get("blocked").asBoolean();
         this.displayName = Utils.getString(contact, "display_name");
@@ -265,18 +297,38 @@ public void update(JsonObject contact) {
         this.mood = Utils.getString(contact, "mood");
         this.type = Utils.getString(contact, "type");
         this.authCertificate = Utils.getString(contact, "auth_certificate");
-        this.firstName = contact.get("name") == null ? null : Utils.getString(contact.get("name").asObject(), "first");
+        this.status = contactStatus;
         if (contact.get("locations") != null) {
             JsonObject locations = contact.get("locations").asArray().get(0).asObject();
             this.country = locations.get("country") == null ? null : locations.get("country").asString();
             this.city = locations.get("city") == null ? null : locations.get("city").asString();
         }
+        JsonObject profile = (JsonObject) contact.get("profile");
+        updateProfile(profile);
     }
 
     public void updateProfile(JsonObject profile) {
-        this.firstName = Utils.getString(profile, "firstname");
-        this.lastName = Utils.getString(profile, "lastname");
+        JsonObject nameDetails = (JsonObject) profile.get("name");
+        JsonArray phonesArray = (JsonArray) profile.get("phones");
+        String phonesStr = "";
+        if (phonesArray != null){
+            for (int i = 0; i < phonesArray.size(); i++){
+                JsonObject eachPhone = (JsonObject) phonesArray.get(i);
+                if (i > 0) {
+                    phonesStr += ", ";
+                }
+                phonesStr += eachPhone.get("number").asString();
+            }
+        }
+        if (nameDetails != null){
+            this.firstName = Utils.getString(nameDetails, "first");
+            this.lastName = Utils.getString(nameDetails, "surname");    
+        } else {
+            this.firstName = Utils.getString(profile, "firstname");
+            this.lastName = Utils.getString(profile, "lastname");
+        }
         this.birthday = Utils.getString(profile, "birthday");
+        this.phones = phonesStr;
 
         if (profile.get("gender") != null) {
             if (profile.get("gender").isNumber()) {
@@ -291,7 +343,7 @@ public void updateProfile(JsonObject profile) {
         }
 
         this.language = Utils.getString(profile, "language");
-        this.avatarURL = Utils.getString(profile, "avatarUrl");
+        this.avatarURL = Utils.getString(profile, "avatar_url");
 
         if (this.displayName == null)
             this.displayName = Utils.getString(profile, "displayname");
diff --git a/src/main/java/com/samczsun/skype4j/participants/Participant.java b/src/main/java/com/samczsun/skype4j/participants/Participant.java
index d94525a..570053f 100644
--- a/src/main/java/com/samczsun/skype4j/participants/Participant.java
+++ b/src/main/java/com/samczsun/skype4j/participants/Participant.java
@@ -51,7 +51,7 @@
      * @returns The display name, or null if non existent or not found
      */
     String getDisplayName();
-
+    
     /*
      * Gets the {@link Chat} this participant is participating in
      *
diff --git a/src/main/java/com/samczsun/skype4j/participants/info/Contact.java b/src/main/java/com/samczsun/skype4j/participants/info/Contact.java
index eae199f..156688c 100644
--- a/src/main/java/com/samczsun/skype4j/participants/info/Contact.java
+++ b/src/main/java/com/samczsun/skype4j/participants/info/Contact.java
@@ -55,7 +55,10 @@
      * @return The last name
      */
     String getLastName();
-
+    
+    String getPhoneNumbers();
+    
+    String getStatus();
     /**
      * Get the avatar as a {@link BufferedImage}. Can return null if not found.
      * Once the image is loaded it is cached
