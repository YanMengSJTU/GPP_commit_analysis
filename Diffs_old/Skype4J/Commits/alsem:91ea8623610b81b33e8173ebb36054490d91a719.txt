diff --git a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
index 17a1d30..804fc7c 100644
--- a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
+++ b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
@@ -16,30 +16,25 @@
 
 package com.samczsun.skype4j.internal;
 
-import com.eclipsesource.json.JsonArray;
-import com.eclipsesource.json.JsonObject;
-import com.eclipsesource.json.JsonValue;
-import com.samczsun.skype4j.exceptions.ConnectionException;
-import com.samczsun.skype4j.internal.utils.Encoder;
-
-import javax.imageio.ImageIO;
 import java.awt.image.BufferedImage;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.nio.charset.StandardCharsets;
-import java.util.Arrays;
-import java.util.Collections;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Map;
-import java.util.Set;
 import java.util.function.Function;
 import java.util.function.Predicate;
 
+import javax.imageio.ImageIO;
+
+import com.eclipsesource.json.JsonArray;
+import com.eclipsesource.json.JsonObject;
+import com.eclipsesource.json.JsonValue;
+import com.samczsun.skype4j.exceptions.ConnectionException;
+import com.samczsun.skype4j.internal.utils.Encoder;
+
 public class Endpoints {
     private static Map<Class<?>, Converter<?>> converters = new HashMap<>();
 
@@ -58,8 +53,12 @@
 
     public static final Provider<String> AUTHORIZATION = skype -> "skype_token " + skype.getSkypeToken();
     public static final Provider<String> COOKIE = skype -> "skypetoken_asm=" + skype.getSkypeToken();
-    public static final Endpoints ACCEPT_CONTACT_REQUEST = new Endpoints(
-            "https://api.skype.com/users/self/contacts/auth-request/%s/accept").skypetoken();
+
+	public static final Endpoints ACCEPT_CONTACT_REQUEST = new Endpoints(
+			"https://contacts.skype.com/contacts/v2/users/%s/invites/%s/accept").skypetoken();
+	public static final Endpoints DECLINE_CONTACT_REQUEST = new Endpoints(
+			"https://contacts.skype.com/contacts/v2/users/%s/invites/%s/decline").skypetoken();
+
     public static final Endpoints GET_JOIN_URL = new Endpoints("https://api.scheduler.skype.com/threads").skypetoken();
     public static final Endpoints CHAT_INFO_URL = new Endpoints(
             "https://%sclient-s.gateway.messenger.live.com/v1/threads/%s/?view=msnp24Equivalent").cloud().regtoken();
@@ -82,8 +81,12 @@
             "https://login.skype.com/logout?client_id=578134&redirect_uri=https%3A%2F%2Fweb.skype.com&intsrc=client-_-webapp-_-production-_-go-signin");
     public static final Endpoints ENDPOINTS_URL = new Endpoints(
             "https://client-s.gateway.messenger.live.com/v1/users/ME/endpoints");
+    @Deprecated
     public static final Endpoints AUTH_REQUESTS_URL = new Endpoints(
             "https://api.skype.com/users/self/contacts/auth-request").skypetoken();
+
+    public static final Endpoints GET_CONTACT_REQUESTS = new Endpoints(
+			"https://contacts.skype.com/contacts/v2/users/%s/invites").skypetoken();
     public static final Endpoints TROUTER_URL = new Endpoints("https://go.trouter.io/v2/a");
     public static final Endpoints POLICIES_URL = new Endpoints("https://prod.tpc.skype.com/v1/policies").skypetoken();
     public static final Endpoints REGISTRATIONS = new Endpoints(
@@ -136,16 +139,15 @@
             "https://api.skype.com/users/self/contacts/%s/block").skypetoken();
     public static final Endpoints UNBLOCK_CONTACT = new Endpoints(
             "https://api.skype.com/users/self/contacts/%s/unblock").skypetoken();
-    public static final Endpoints AUTHORIZE_CONTACT = new Endpoints(
-            "https://api.skype.com/users/self/contacts/auth-request/%s/accept").skypetoken();
+	public static final Endpoints AUTHORIZE_CONTACT_SELF = new Endpoints(
+            "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/contacts/%s").cloud().regtoken();
     public static final Endpoints UNAUTHORIZE_CONTACT = new Endpoints(
-            "https://client-s.gateway.messenger.live.com/v1/users/ME/contacts/8:%s").regtoken();
-    public static final Endpoints DECLINE_CONTACT_REQUEST = new Endpoints(
-            "https://api.skype.com/users/self/contacts/auth-request/%s/decline").skypetoken();
+			"https://contacts.skype.com/contacts/v2/users/%s/contacts/%s").skypetoken();
     public static final Endpoints UNAUTHORIZE_CONTACT_SELF = new Endpoints(
-            "https://api.skype.com/users/self/contacts/%s").skypetoken();
-    public static final Endpoints AUTHORIZATION_REQUEST = new Endpoints(
-            "https://api.skype.com/users/self/contacts/auth-request/%s").skypetoken();
+			"https://%sclient-s.gateway.messenger.live.com/v1/users/ME/contacts/%s").cloud().regtoken();
+
+    public static final Endpoints SEND_CONTACT_REQUEST = new Endpoints(
+            "https://contacts.skype.com/contacts/v2/users/%s/contacts").skypetoken();
     @Deprecated
     public static final Endpoints CONTACT_INFO = new Endpoints(
             "https://api.skype.com/users/self/contacts/profiles").skypetoken();
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java b/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
index 51c0e26..e146c4a 100644
--- a/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
+++ b/src/main/java/com/samczsun/skype4j/internal/client/FullClient.java
@@ -16,6 +16,28 @@
 
 package com.samczsun.skype4j.internal.client;
 
+import java.net.HttpURLConnection;
+import java.nio.charset.StandardCharsets;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.text.ParseException;
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+import java.util.Set;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import javax.xml.bind.DatatypeConverter;
+
 import com.eclipsesource.json.JsonArray;
 import com.eclipsesource.json.JsonObject;
 import com.eclipsesource.json.JsonValue;
@@ -26,27 +48,15 @@
 import com.samczsun.skype4j.exceptions.InvalidCredentialsException;
 import com.samczsun.skype4j.exceptions.handler.ErrorHandler;
 import com.samczsun.skype4j.exceptions.handler.ErrorSource;
-import com.samczsun.skype4j.internal.*;
+import com.samczsun.skype4j.internal.Endpoints;
+import com.samczsun.skype4j.internal.ExceptionHandler;
+import com.samczsun.skype4j.internal.SkypeImpl;
 import com.samczsun.skype4j.internal.participants.info.ContactImpl;
 import com.samczsun.skype4j.internal.participants.info.ContactRequestImpl;
 import com.samczsun.skype4j.internal.utils.Encoder;
 import com.samczsun.skype4j.internal.utils.UncheckedRunnable;
 import com.samczsun.skype4j.participants.info.Contact;
 
-import javax.xml.bind.DatatypeConverter;
-import java.net.HttpURLConnection;
-import java.nio.charset.StandardCharsets;
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
-import java.util.*;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.TimeUnit;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
 public class FullClient extends SkypeImpl {
     private static final Pattern URL_PATTERN = Pattern.compile("threads/(.*)", Pattern.CASE_INSENSITIVE);
 
@@ -130,27 +140,33 @@ public void loadAllContacts() throws ConnectionException {
 
     @Override
     public void getContactRequests(boolean fromWebsocket) throws ConnectionException {
-        JsonArray array =  Endpoints.AUTH_REQUESTS_URL
-                .open(this)
-                .as(JsonArray.class)
-                .expect(200, "While loading authorization requests")
-                .get();
-        for (JsonValue contactRequest : array) {
-            JsonObject contactRequestObj = contactRequest.asObject();
-            try {
-                ContactRequestImpl request = new ContactRequestImpl(contactRequestObj.get("event_time").asString(),
-                        contactRequestObj.get("sender").asString(),
-                        contactRequestObj.get("greeting").asString(), this);
-                if (this.allContactRequests.add(request)) {
-                    if (fromWebsocket) {
+		JsonObject array = Endpoints.GET_CONTACT_REQUESTS
+                .open(this, getUsername()).as(JsonObject.class)
+				.expect(200, "While loading contact requests").get();
+
+		JsonArray inviteList = array.get("invite_list").asArray();
+		for (JsonValue jsonValue : inviteList) {
+			JsonObject inviteObject = jsonValue.asObject();
+
+			String sender = inviteObject.get("mri").asString();
+
+			Optional<JsonObject> lastInvite = inviteObject.get("invites").asArray().values().stream()
+					.map(JsonValue::asObject).max(Comparator.comparing(o -> o.get("time").asString()));
+
+			if (lastInvite.isPresent()) {
+				String time = lastInvite.get().get("time").asString();
+				String message = lastInvite.get().get("message").asString();
+				try {
+					Contact.ContactRequest request = new ContactRequestImpl(time, sender, message, this);
+					if (this.allContactRequests.add(request)) {
                         ContactRequestEvent event = new ContactRequestEvent(request);
                         getEventDispatcher().callEvent(event);
-                    }
-                }
-            } catch (java.text.ParseException e) {
-                getLogger().log(Level.WARNING, "Could not parse date for contact request", e);
-            }
-        }
+					}
+				} catch (ParseException e) {
+					getLogger().log(Level.WARNING, "Could not parse date for contact request", e);
+				}
+			}
+		}
         if (fromWebsocket) this.updateContactList();
     }
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/client/MSFTSkypeClient.java b/src/main/java/com/samczsun/skype4j/internal/client/MSFTSkypeClient.java
index d944b34..1df3f87 100644
--- a/src/main/java/com/samczsun/skype4j/internal/client/MSFTSkypeClient.java
+++ b/src/main/java/com/samczsun/skype4j/internal/client/MSFTSkypeClient.java
@@ -1,5 +1,13 @@
 package com.samczsun.skype4j.internal.client;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Logger;
+
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.InvalidCredentialsException;
 import com.samczsun.skype4j.exceptions.NotParticipatingException;
@@ -9,44 +17,41 @@
 import com.samczsun.skype4j.internal.SkypeThreadFactory;
 import com.samczsun.skype4j.internal.threads.AuthenticationChecker;
 import com.samczsun.skype4j.internal.threads.ServerPingThread;
-
-import java.util.List;
-import java.util.Set;
-import java.util.concurrent.Executors;
-import java.util.logging.Logger;
+import com.samczsun.skype4j.internal.utils.UncheckedRunnable;
 
 public class MSFTSkypeClient extends FullClient {
-	public MSFTSkypeClient(String skypeToken, String skypeId,
+	public MSFTSkypeClient(String skypeToken, String userName,
 			Set<String> resources, Logger customLogger,
 			List<ErrorHandler> errorHandlers) {
-		super(skypeId, null, resources, customLogger, errorHandlers);
+		super(userName, null, resources, customLogger, errorHandlers);
 
 		setSkypeToken(skypeToken);
 	}
 
 	@Override
-	public void login() {
+	public void login() throws ConnectionException {
+		List<UncheckedRunnable> tasks = new ArrayList<>();
+
+		tasks.add(this::registerEndpoint);
+		tasks.add(this::loadAllContacts);
+		tasks.add(() -> this.getContactRequests(false));
+//		tasks.add(() -> {
+//			try {
+//				this.registerWebSocket();
+//			} catch (Exception e) {
+//				handleError(ErrorSource.REGISTERING_WEBSOCKET, e, false);
+//			}
+//		});
+
+		tasks.add(() -> Endpoints.ELIGIBILITY_CHECK.open(this, new Object[0])
+				.expect(200, "You are not eligible to use Skype for Web!").get());
 		try {
-
-			loadAllContacts();
-
-			try {
-				this.getContactRequests(false);
-			} catch (Exception var2) {
-				this.handleError(ErrorSource.UPDATING_CONTACT_LIST, var2, false);
-			}
-
-			try {
-				this.registerWebSocket();
-			} catch (Exception var2) {
-				this.handleError(ErrorSource.REGISTERING_WEBSOCKET, var2, false);
-			}
-
-			registerEndpoint();
-
-			Endpoints.ELIGIBILITY_CHECK.open(this, new Object[0])
-									   .expect(200, "You are not eligible to use Skype for Web!").get();
+			ExecutorService executorService = Executors.newFixedThreadPool(4);
+			tasks.forEach(executorService::submit);
+			executorService.shutdown();
+			executorService.awaitTermination(1, TimeUnit.DAYS);
 			this.loggedIn.set(true);
+
 			if (this.serverPingThread != null) {
 				this.serverPingThread.kill();
 				this.serverPingThread = null;
@@ -71,7 +76,7 @@ public void login() {
 			this.scheduler = Executors.newFixedThreadPool(4, new SkypeThreadFactory(this, "Poller"));
 			(this.serverPingThread = new ServerPingThread(this)).start();
 			(this.reauthThread = new AuthenticationChecker(this)).start();
-		} catch (Exception e) {
+		} catch (InterruptedException e) {
 			throw new RuntimeException(e);
 		}
 	}
diff --git a/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactImpl.java b/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactImpl.java
index ce62c13..3472c42 100644
--- a/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactImpl.java
@@ -16,6 +16,14 @@
 
 package com.samczsun.skype4j.internal.participants.info;
 
+import java.awt.*;
+import java.awt.image.BufferedImage;
+import java.util.UUID;
+import java.util.regex.Pattern;
+
+import org.apache.commons.lang3.StringUtils;
+import org.jsoup.helper.Validate;
+
 import com.eclipsesource.json.JsonArray;
 import com.eclipsesource.json.JsonObject;
 import com.samczsun.skype4j.Skype;
@@ -29,12 +37,6 @@
 import com.samczsun.skype4j.internal.client.FullClient;
 import com.samczsun.skype4j.internal.utils.Encoder;
 import com.samczsun.skype4j.participants.info.Contact;
-import org.jsoup.helper.Validate;
-
-import java.awt.*;
-import java.awt.image.BufferedImage;
-import java.util.UUID;
-import java.util.regex.Pattern;
 
 public class ContactImpl implements Contact {
     private static final Pattern PHONE_NUMBER = Pattern.compile("\\+[0-9]+");
@@ -193,36 +195,39 @@ public boolean isAuthorized() {
 
     @Override
     public void authorize() throws ConnectionException {
-        Endpoints.AUTHORIZE_CONTACT.open(skype, this.username).expect(200, "While authorizing contact").put();
+		Endpoints.AUTHORIZE_CONTACT_SELF.open(skype, StringUtils.prependIfMissing(this.username, "8:"))
+                .expect(200, "While authorizing contact").put();
         updateContactInfo();
     }
 
     @Override
     public void unauthorize() throws ConnectionException {
-        if (isAuthorized) {
-            Endpoints.UNAUTHORIZE_CONTACT_SELF
-                    .open(skype, this.username)
-                    .expect(200, "While unauthorizing contact")
-                    .put();
-        } else {
-            Endpoints.DECLINE_CONTACT_REQUEST
-                    .open(skype, this.username)
-                    .expect(201, "While unauthorizing contact")
-                    .put();
-        }
+
+		Endpoints.UNAUTHORIZE_CONTACT
+                .open(skype, skype.getUsername(), this.username)
+				.expect(200, "While anauthorizing contact")
+                .delete();
+		Endpoints.UNAUTHORIZE_CONTACT_SELF
+                .open(skype, this.username)
+                .expect(200, "While unauthorizing contact")
+				.delete();
         updateContactInfo();
     }
 
     @Override
     public void sendRequest(String message) throws ConnectionException, NoSuchContactException {
-        Endpoints.AUTHORIZATION_REQUEST
+		JsonObject requestObject = new JsonObject();
+		requestObject
+                .add("mri", "8:" + this.username)
+                .add("greeting", Encoder.encode(message));
+        Endpoints.SEND_CONTACT_REQUEST
                 .open(skype, this.username)
                 .on(404, (connection) -> {
                     throw new NoSuchContactException();
                 })
                 .expect(201, "While sending request")
                 .expect(200, "While sending request")
-                .put("greeting=" + Encoder.encode(message));
+				.put(requestObject);
         updateContactInfo();
     }
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactRequestImpl.java b/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactRequestImpl.java
index d0763ec..30c7c99 100644
--- a/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactRequestImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/participants/info/ContactRequestImpl.java
@@ -20,9 +20,10 @@
 import com.samczsun.skype4j.internal.Endpoints;
 import com.samczsun.skype4j.internal.client.FullClient;
 import com.samczsun.skype4j.participants.info.Contact;
+import org.apache.commons.lang3.StringUtils;
 
 import java.text.ParseException;
-import java.text.SimpleDateFormat;
+import java.time.Instant;
 import java.util.Date;
 
 public class ContactRequestImpl implements Contact.ContactRequest {
@@ -33,8 +34,7 @@
     private final FullClient skype;
 
     public ContactRequestImpl(String time, String sender, String message, FullClient skype) throws ParseException {
-        SimpleDateFormat FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSSSSS");
-        this.time = FORMAT.parse(time);
+        this.time = Date.from(Instant.parse(time));
         this.sender = sender;
         this.message = message;
         this.skype = skype;
@@ -58,17 +58,21 @@ public String getMessage() {
     @Override
     public void accept() throws ConnectionException {
         Endpoints.ACCEPT_CONTACT_REQUEST
-                .open(skype, sender)
-                .expect(201, "While accepting contact request")
+                .open(skype, skype.getUsername(), sender)
+                .expect(200, "While accepting contact request")
                 .put();
+        Endpoints.AUTHORIZE_CONTACT_SELF.open(skype, StringUtils.prependIfMissing(sender, "8:"))
+                .expect(200, "While authorizing contact").put();
     }
 
     @Override
     public void decline() throws ConnectionException {
         Endpoints.DECLINE_CONTACT_REQUEST
-                .open(skype, sender)
-                .expect(201, "While declining contact request")
+                .open(skype, skype.getUsername(), sender)
+                .expect(200, "While declining contact request")
                 .put();
+        Endpoints.UNAUTHORIZE_CONTACT_SELF.open(skype,StringUtils.prependIfMissing(sender, "8:"))
+                .expect(200, "While unauthorizing contact").delete();
     }
 
     @Override
