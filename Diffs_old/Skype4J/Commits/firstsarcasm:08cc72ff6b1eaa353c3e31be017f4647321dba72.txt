diff --git a/README.md b/README.md
index f010f89..96a838e 100644
--- a/README.md
+++ b/README.md
@@ -1,9 +1,5 @@
 # Skype4J
 
-[![Build Status](https://ci.samczsun.com/buildStatus/icon?job=Skype4J)](https://ci.samczsun.com/job/Skype4J/)
-
-This is a Skype API for Java. It does not support P2P chats. You can tell whether you're in a P2P chat or not based on the output of the `/help` command. If it contains commands such as `/kickban`, you're in a P2P chat and should switch to cloud chats immediately (try using `/fork`).
-
 Here is an example of using this API to log into your Skype account.
 
 ```java
@@ -38,21 +34,6 @@ skype.logout();
 
 For more examples, please consult the [wiki](https://github.com/samczsun/Skype4J/wiki)
 
-## Maven
-
-Maven is used for dependency management and deployment. To use this API, simply add the following to your pom.xml
-
-```
-<dependency>
-  <groupId>com.samczsun</groupId>
-  <artifactId>skype4j</artifactId>
-  <version>0.1.5</version>
-</dependency>
-```
-
-You can also download the latest build of this project from [Jenkins](https://ci.samczsun.com/job/Skype4J/)  
-If you want to use Maven with the latest build and don't want to manually install, [JitPack](https://jitpack.io/#samczsun/skype4j) may do the trick.
-
 ## JavaDocs
 
 JavaDocs can be found [here](https://samczsun.github.io/Skype4J/)
@@ -70,13 +51,4 @@ This simply gives myself, or whoever is maintaining the project, the right to re
 
 The CLA can be found in the root directory of the project, in the file called "CLA". Please read it carefully.
 
-You only need to submit your CLA once, so if you've already signed a CLA there's no need to do it again.
-
-## Acknowledgements
-
-![YourKit](https://www.yourkit.com/images/yklogo.png)
-
-YourKit supports open source projects with its full-featured Java Profiler.
-
-YourKit, LLC is the creator of [YourKit Java Profiler](https://www.yourkit.com/java/profiler/index.jsp)
-and [YourKit .NET Profiler](https://www.yourkit.com/.net/profiler/index.jsp), innovative and intelligent tools for profiling Java and .NET applications.
+You only need to submit your CLA once, so if you've already signed a CLA there's no need to do it again.
\ No newline at end of file
diff --git a/pom.xml b/pom.xml
index b2af275..feaa7c3 100644
--- a/pom.xml
+++ b/pom.xml
@@ -111,20 +111,6 @@
                     </execution>
                 </executions>
             </plugin>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-gpg-plugin</artifactId>
-                <version>1.6</version>
-                <executions>
-                    <execution>
-                        <id>sign-artifacts</id>
-                        <phase>verify</phase>
-                        <goals>
-                            <goal>sign</goal>
-                        </goals>
-                    </execution>
-                </executions>
-            </plugin>
         </plugins>
     </build>
     <dependencies>
diff --git a/src/main/java/com/samczsun/skype4j/SkypeBuilder.java b/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
index 007226a..390e7ca 100644
--- a/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
+++ b/src/main/java/com/samczsun/skype4j/SkypeBuilder.java
@@ -20,6 +20,8 @@
 import com.samczsun.skype4j.internal.client.FullClient;
 import com.samczsun.skype4j.internal.client.GuestClient;
 
+import java.net.InetSocketAddress;
+import java.net.Proxy;
 import java.util.*;
 import java.util.logging.Logger;
 
@@ -35,6 +37,8 @@
     private List<ErrorHandler> errorHandlers = new ArrayList<>();
     private Logger customLogger;
     private String chatId;
+    public static InetSocketAddress socketAddress;
+    public static Proxy proxy;
 
     /**
      * Construct a SkypeBuilder with the given username and password
@@ -57,6 +61,12 @@ public SkypeBuilder(String username) {
         this.password = null;
     }
 
+    public SkypeBuilder withProxy(String host, int port) {
+        socketAddress = new InetSocketAddress(host, port);
+        proxy = new Proxy(Proxy.Type.HTTP, socketAddress);
+        return this;
+    }
+
     /**
      * Subscribe to all known resources
      *
@@ -124,9 +134,11 @@ public Skype build() {
         }
         if (password != null) {
             return new FullClient(username, password, resources, customLogger, errorHandlers);
-        } else if (chatId != null) {
+        }
+        else if (chatId != null) {
             return new GuestClient(username, chatId, resources, customLogger, errorHandlers);
-        } else {
+        }
+        else {
             throw new IllegalArgumentException("No chat specified");
         }
     }
diff --git a/src/main/java/com/samczsun/skype4j/formatting/Generator.java b/src/main/java/com/samczsun/skype4j/formatting/Generator.java
index 90b3733..51bf94c 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/Generator.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/Generator.java
@@ -21,19 +21,19 @@
 import com.eclipsesource.json.JsonValue;
 import com.samczsun.skype4j.internal.StreamUtils;
 import com.samczsun.skype4j.internal.Utils;
-
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.PrintWriter;
 import java.net.HttpURLConnection;
 import java.net.URL;
-import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Scanner;
 import java.util.Set;
 
+import static com.samczsun.skype4j.SkypeBuilder.proxy;
+
 public class Generator {
     private static final String LANG = "en"; //Change to whatever lang you want
     private static final String VERSION = "908_1.20.0.98"; //Magic number
@@ -41,14 +41,22 @@
     public static void main(String[] args) throws Exception {
         URL url = new URL(
                 "https://a.config.skype.com/config/v1/Skype/" + VERSION + "/SkypePersonalization?apikey=skype.com&id=self&callback=Skype4J");
-        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+
+        HttpURLConnection connection;
+        if (proxy != null) {
+            connection = (HttpURLConnection) url.openConnection(proxy);
+        }
+        else {
+            connection = (HttpURLConnection) url.openConnection();
+        }
+
         connection.setRequestProperty("User-Agent", "Skype4J");
         String str = StreamUtils.readFully(connection.getInputStream());
         JsonObject object = JsonObject.readFrom(str.substring(12, str.length() - 1));
         String configloc = object.get("pes_config").asString();
         configloc = configloc.substring(0, configloc.lastIndexOf('/') + 1);
         URL config = new URL(configloc + LANG);
-        connection = (HttpURLConnection) config.openConnection();
+        connection = (HttpURLConnection) config.openConnection(proxy);
         connection.setRequestProperty("User-Agent", "Skype4J");
         JsonObject root = Utils.parseJsonObject(connection.getInputStream());
         JsonArray items = root.get("items").asArray();
@@ -68,9 +76,11 @@ public static void main(String[] args) throws Exception {
                 String next = in.nextLine();
                 if (next.startsWith("package")) {
                     pr.println("package com.samczsun.skype4j.formatting.lang." + LANG + ";");
-                } else if (next.contains("DefaultEmoticon")) {
+                }
+                else if (next.contains("DefaultEmoticon")) {
                     pr.println(next.replace("DefaultEmoticon", "Emoticon"));
-                } else if (next.trim().equals(";")) {
+                }
+                else if (next.trim().equals(";")) {
                     List<JsonObject> emoticons = new ArrayList<>();
                     for (JsonValue val : items) {
                         if (val.asObject().get("type").asString().equals("emoticon")) {
@@ -89,7 +99,8 @@ public static void main(String[] args) throws Exception {
                                 "    %s(\"%s\",\"%s\",\"%s\",%s)" + (i == emoticons.size() - 1 ? ";" : ","), enumname,
                                 id, etag, desc, shortcuts));
                     }
-                } else {
+                }
+                else {
                     pr.println(next);
                 }
             }
@@ -110,9 +121,11 @@ public static void main(String[] args) throws Exception {
                 String next = in.nextLine();
                 if (next.startsWith("package")) {
                     pr.println("package com.samczsun.skype4j.formatting.lang." + LANG + ";");
-                } else if (next.contains("DefaultFlik")) {
+                }
+                else if (next.contains("DefaultFlik")) {
                     pr.println(next.replace("DefaultFlik", "Flik"));
-                } else if (next.trim().equals(";")) {
+                }
+                else if (next.trim().equals(";")) {
                     List<JsonObject> emoticons = new ArrayList<>();
                     for (JsonValue val : items) {
                         if (val.asObject().get("type").asString().equals("flik")) {
@@ -140,7 +153,8 @@ public static void main(String[] args) throws Exception {
                                 "    %s(\"%s\", \"%s\", \"%s\")" + (i == emoticons.size() - 1 ? ";" : ","), enumname,
                                 id, etag, desc));
                     }
-                } else {
+                }
+                else {
                     pr.println(next);
                 }
             }
diff --git a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
index 54b7d29..ce8dc90 100644
--- a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
+++ b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
@@ -24,22 +24,18 @@
 
 import javax.imageio.ImageIO;
 import java.awt.image.BufferedImage;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.HttpURLConnection;
+import java.net.Proxy;
 import java.net.URL;
 import java.nio.charset.StandardCharsets;
-import java.util.Arrays;
-import java.util.Collections;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Map;
-import java.util.Set;
 import java.util.function.Function;
 import java.util.function.Predicate;
 
+import static com.samczsun.skype4j.SkypeBuilder.proxy;
 public class Endpoints {
     private static Map<Class<?>, Converter<?>> converters = new HashMap<>();
 
@@ -300,19 +296,19 @@ public E_TYPE post(String data) throws ConnectionException {
         }
 
         public E_TYPE post(JsonValue json) throws ConnectionException {
-            return header("Content-Type", "application/json").connect("POST", json.toString());
+            return header("X-Client-Version", "0/0.0.0.0").header("Content-Type", "application/json").connect("POST", json.toString());
         }
 
         public E_TYPE put() throws ConnectionException {
-            return connect("PUT", new byte[0]);
+            return header("X-Client-Version", "0/0.0.0.0").connect("PUT", new byte[0]);
         }
 
         public E_TYPE put(String data) throws ConnectionException {
-            return connect("PUT", data);
+            return header("X-Client-Version", "0/0.0.0.0").connect("PUT", data);
         }
 
         public E_TYPE put(JsonValue json) throws ConnectionException {
-            return header("Content-Type", "application/json").connect("PUT", json.toString());
+            return header("X-Client-Version", "0/0.0.0.0").header("Content-Type", "application/json").connect("PUT", json.toString());
         }
 
         public E_TYPE connect(String method, String data) throws ConnectionException {
@@ -359,8 +355,16 @@ public E_TYPE connect(String method, byte[] rawData) throws ConnectionException
                     }
                     this.url = new URL(surl);
                 }
-                connection = (HttpURLConnection) url.openConnection();
+
+                if(proxy != null) {
+                    connection = (HttpURLConnection) url.openConnection(proxy);
+                }
+                else {
+                    connection = (HttpURLConnection) url.openConnection();
+                }
+
                 connection.setRequestMethod(method);
+
                 connection.setInstanceFollowRedirects(false);
                 for (Map.Entry<String, String> ent : headers.entrySet()) {
                     connection.setRequestProperty(ent.getKey(), ent.getValue());
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java b/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
index d92360e..6cd0af8 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeWebSocket.java
@@ -20,16 +20,6 @@
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.handler.ErrorSource;
 import com.samczsun.skype4j.internal.client.FullClient;
-import org.java_websocket.SSLSocketChannel2;
-import org.java_websocket.client.DefaultSSLWebSocketClientFactory;
-import org.java_websocket.client.WebSocketClient;
-import org.java_websocket.drafts.Draft_17;
-import org.java_websocket.handshake.ServerHandshake;
-
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLEngine;
-import javax.net.ssl.TrustManager;
-import javax.net.ssl.X509TrustManager;
 import java.io.IOException;
 import java.net.URI;
 import java.nio.ByteBuffer;
@@ -43,6 +33,18 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Level;
+import org.java_websocket.SSLSocketChannel2;
+import org.java_websocket.client.DefaultSSLWebSocketClientFactory;
+import org.java_websocket.client.WebSocketClient;
+import org.java_websocket.drafts.Draft_17;
+import org.java_websocket.handshake.ServerHandshake;
+
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLEngine;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
+
+import static com.samczsun.skype4j.SkypeBuilder.socketAddress;
 
 public class SkypeWebSocket extends WebSocketClient {
     private final SkypeImpl skype;
@@ -56,16 +58,23 @@ public SkypeWebSocket(final SkypeImpl skype, URI uri) throws NoSuchAlgorithmExce
         TrustManager[] trustAllCerts = new TrustManager[]{new TrustAllManager()};
         SSLContext sc = SSLContext.getInstance("SSL");
         sc.init(null, trustAllCerts, new java.security.SecureRandom());
+        if (socketAddress != null) {
+            this.setProxy(socketAddress);
+        }
+
         this.setWebSocketFactory(new DefaultSSLWebSocketClientFactory(sc, singleThreaded) {
             private boolean called = false;
 
+
             @Override
             public ByteChannel wrapChannel(SocketChannel channel, SelectionKey key, String host, int port) throws IOException {
                 if (!called) {
                     Thread.currentThread().setName("Skype4J-WSMainThread-" + skype.getUsername());
                 }
+
                 SSLEngine e = sslcontext.createSSLEngine(host, port);
                 e.setUseClientMode(true);
+
                 ByteChannel c = new SSLSocketChannel2(channel, e, exec, key) {
                     private boolean called = false;
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/Utils.java b/src/main/java/com/samczsun/skype4j/internal/Utils.java
index 41f0a54..8315370 100644
--- a/src/main/java/com/samczsun/skype4j/internal/Utils.java
+++ b/src/main/java/com/samczsun/skype4j/internal/Utils.java
@@ -61,6 +61,7 @@ public static String uploadImage(byte[] image, ImageType uploadType, ChatImpl ch
     public static String upload(byte[] data, ImageType type, JsonObject extra, ChatImpl chat) throws ConnectionException {
         JsonObject obj = new JsonObject();
         obj.add("type", type.mime);
+        obj.add("X-Client-Version", "0/0.0.0.0");
         obj.add("permissions", new JsonObject().add(chat.getIdentity(), new JsonArray().add("read")));
         if (extra != null) extra.forEach(m -> obj.add(m.getName(), m.getValue()));
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java b/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java
index 754e310..bb91eab 100644
--- a/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java
@@ -148,6 +148,8 @@ public void sendFile(File file) throws ConnectionException {
             obj.add("contenttype", "text");
             obj.add("clientmessageid", String.valueOf(ms));
 
+            System.out.println(obj);
+
             Endpoints.SEND_MESSAGE_URL.open(getClient(), getIdentity()).expect(201, "While sending message").post(obj);
         } catch (IOException e) {
             throw ExceptionHandler.generateException("While sending message", e);
