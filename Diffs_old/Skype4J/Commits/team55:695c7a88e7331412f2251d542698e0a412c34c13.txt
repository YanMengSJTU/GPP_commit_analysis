diff --git a/src/main/java/com/samczsun/skype4j/ConnectionBuilder.java b/src/main/java/com/samczsun/skype4j/ConnectionBuilder.java
new file mode 100644
index 0000000..5a4924e
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/ConnectionBuilder.java
@@ -0,0 +1,60 @@
+package com.samczsun.skype4j;
+
+import java.io.IOException;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.URLConnection;
+import java.nio.charset.Charset;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class ConnectionBuilder {
+    private String url;
+    private Map<String, List<String>> headers = new HashMap<>();
+    private String method = "GET";
+    private String data;
+
+    private boolean output;
+
+    public void setUrl(String url) {
+        this.url = url;
+    }
+
+    public void addHeader(String header, String value) {
+        if (!this.headers.containsKey(header)) {
+            this.headers.put(header, new ArrayList<String>());
+        }
+        this.headers.get(header).add(value);
+    }
+
+    public void setMethod(String method, boolean output) {
+        this.method = method;
+        this.output = output;
+    }
+
+    public void setData(String data) {
+        this.data = data;
+    }
+
+    public String getData() {
+        return this.data;
+    }
+
+    public HttpURLConnection build() throws IOException {
+        HttpURLConnection con = (HttpURLConnection) new URL(url).openConnection();
+        con.setInstanceFollowRedirects(false);
+        for (Map.Entry<String, List<String>> ent : headers.entrySet()) {
+            for (String value : ent.getValue()) {
+                con.addRequestProperty(ent.getKey(), value);
+            }
+        }
+        con.setRequestMethod(method);
+        con.setDoOutput(output);
+        if (data != null) {
+            con.getOutputStream().write(data.getBytes(Charset.forName("UTF-8")));
+        }
+        return con;
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/Skype.java b/src/main/java/com/samczsun/skype4j/Skype.java
index 29c13c9..b17bb61 100644
--- a/src/main/java/com/samczsun/skype4j/Skype.java
+++ b/src/main/java/com/samczsun/skype4j/Skype.java
@@ -2,6 +2,9 @@
 
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.events.EventDispatcher;
+import com.samczsun.skype4j.exceptions.ConnectionException;
+import com.samczsun.skype4j.exceptions.InvalidCredentialsException;
+import com.samczsun.skype4j.exceptions.ParseException;
 
 import java.io.IOException;
 import java.util.Collection;
@@ -40,6 +43,15 @@
      */
     public abstract Collection<Chat> getAllChats();
 
+    /**
+     * Log into Skype
+     *
+     * @throws InvalidCredentialsException If you've provided invalid credentials or if you hit a CAPTCHA
+     * @throws ConnectionException If a network error occured while connecting
+     * @throws ParseException If invalid HTML/XML was returned, causing Jsoup to raise an exception
+     */
+    public abstract void login() throws InvalidCredentialsException, ConnectionException, ParseException;
+
     /**
      * Log out and stop all threads
      *
diff --git a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java b/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
index d3b5616..6302dc4 100644
--- a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
+++ b/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
@@ -15,7 +15,7 @@
      *
      * @return The message
      */
-    Message getMessage();
+    Message getContent();
 
     /**
      * Get the time this message was sent or received at
diff --git a/src/main/java/com/samczsun/skype4j/exceptions/NestedSkypeException.java b/src/main/java/com/samczsun/skype4j/exceptions/NestedSkypeException.java
index a141e94..9fb4633 100644
--- a/src/main/java/com/samczsun/skype4j/exceptions/NestedSkypeException.java
+++ b/src/main/java/com/samczsun/skype4j/exceptions/NestedSkypeException.java
@@ -10,6 +10,7 @@
 
     public NestedSkypeException(String cause, Exception suppressed) {
         super(cause);
+        this.addSuppressed(suppressed);
         this.reason = suppressed;
     }
 
diff --git a/src/main/java/com/samczsun/skype4j/formatting/Message.java b/src/main/java/com/samczsun/skype4j/formatting/Message.java
index a906dca..54d923b 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/Message.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/Message.java
@@ -107,6 +107,8 @@ public void head(Node node, int depth) {
                             stack.push(newText);
                         } else if (node.nodeName().equals("#text")) {
                             stack.peek().with(Text.plain(((TextNode) node).getWholeText()));
+                        } else {
+                            stack.peek().with(Text.plain("UnsupportedTag" + node.nodeName()));
                         }
                     } else {
                         if (node.nodeName().equals("b")) {
@@ -150,6 +152,8 @@ public void head(Node node, int depth) {
                             stack.push(currentText);
                         } else if (node.nodeName().equals("#text")) {
                             parsed.with(Text.plain(((TextNode) node).getWholeText()));
+                        } else {
+                            parsed.with(Text.plain("UnsupportedTag" + node.nodeName()));
                         }
                     }
                 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java b/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
index fe54a64..9c2b573 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
@@ -3,26 +3,22 @@
 import com.eclipsesource.json.JsonArray;
 import com.eclipsesource.json.JsonObject;
 import com.eclipsesource.json.JsonValue;
+import com.samczsun.skype4j.ConnectionBuilder;
 import com.samczsun.skype4j.StreamUtils;
-import com.samczsun.skype4j.chat.ChatMessage;
 import com.samczsun.skype4j.chat.GroupChat;
 import com.samczsun.skype4j.exceptions.ConnectionException;
-import com.samczsun.skype4j.exceptions.NotLoadedException;
-import com.samczsun.skype4j.exceptions.SkypeException;
-import com.samczsun.skype4j.formatting.Message;
 import com.samczsun.skype4j.user.User;
 import com.samczsun.skype4j.user.User.Role;
 
-import javax.net.ssl.HttpsURLConnection;
 import java.io.IOException;
-import java.net.URL;
-import java.nio.charset.Charset;
-import java.util.*;
+import java.net.HttpURLConnection;
+import java.util.HashMap;
+import java.util.Map;
 
 public class ChatGroup extends ChatImpl implements GroupChat {
     private String topic;
 
-    protected ChatGroup(SkypeImpl skype, String identity) throws SkypeException {
+    protected ChatGroup(SkypeImpl skype, String identity) throws ConnectionException {
         super(skype, identity);
     }
 
@@ -33,12 +29,12 @@ protected void load() throws ConnectionException {
         isLoading.set(true);
         Map<String, User> newUsers = new HashMap<>();
         try {
-            URL url = new URL("https://client-s.gateway.messenger.live.com/v1/threads/" + this.getIdentity() + "?view=msnp24Equivalent");
-            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
-            con.setRequestProperty("RegistrationToken", getClient().getRegistrationToken());
-            con.setRequestProperty("Content-Type", "application/json");
-            String in = StreamUtils.readFully(con.getInputStream());
-            JsonObject object = JsonObject.readFrom(in);
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(getClient().withCloud(CHAT_INFO_URL, getIdentity()));
+            builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
+            builder.addHeader("Content-Type", "application/json");
+            HttpURLConnection con = builder.build();
+            JsonObject object = JsonObject.readFrom(StreamUtils.readFully(con.getInputStream()));
             JsonObject props = object.get("properties").asObject();
             if (props.get("topic") != null) {
                 this.topic = props.get("topic").asString();
@@ -70,36 +66,6 @@ protected void load() throws ConnectionException {
         }
     }
 
-    @Override
-    public ChatMessage sendMessage(Message message) throws ConnectionException {
-        checkLoaded();
-        try {
-            long ms = System.currentTimeMillis();
-            JsonObject obj = new JsonObject();
-            obj.add("content", message.write());
-            obj.add("messagetype", "RichText");
-            obj.add("contenttype", "text");
-            obj.add("clientmessageid", String.valueOf(ms));
-            URL url = new URL("https://client-s.gateway.messenger.live.com/v1/users/ME/conversations/" + this.getIdentity() + "/messages");
-            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
-            con.setRequestMethod("POST");
-            con.setDoOutput(true);
-            con.setRequestProperty("RegistrationToken", getClient().getRegistrationToken());
-            con.setRequestProperty("Content-Type", "application/json");
-            con.getOutputStream().write(obj.toString().getBytes(Charset.forName("UTF-8")));
-            con.getInputStream();
-            return ChatMessageImpl.createMessage(this, getUser(getClient().getUsername()), null, String.valueOf(ms), ms, message);
-        } catch (IOException e) {
-            throw new ConnectionException("While sending a message", e);
-        }
-    }
-
-    @Override
-    public Collection<User> getAllUsers() throws NotLoadedException {
-        checkLoaded();
-        return Collections.unmodifiableCollection(users.values());
-    }
-
     public void addUser(String username) {
         if (!users.containsKey(username)) {
             User user = new UserImpl(username, this);
@@ -116,13 +82,14 @@ public void removeUser(String username) {
     public void kick(String username) throws ConnectionException {
         checkLoaded();
         try {
-            URL url = new URL("https://client-s.gateway.messenger.live.com/v1/threads/" + this.getIdentity() + "/members/8:" + username);
-            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
-            con.setInstanceFollowRedirects(false);
-            con.setRequestMethod("DELETE");
-            con.setRequestProperty("RegistrationToken", getClient().getRegistrationToken());
-            con.setRequestProperty("Content-Type", "application/json");
-            con.getInputStream();
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(getClient().withCloud(MODIFY_MEMBER_URL, getIdentity(), username));
+            builder.setMethod("DELETE", false);
+            builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
+            HttpURLConnection con = builder.build();
+            if (con.getResponseCode() != 200) {
+                throw getClient().generateException(con);
+            }
         } catch (IOException e) {
             throw new ConnectionException("While kicking", e);
         }
@@ -141,17 +108,19 @@ public String getTopic() {
     public void setTopic(String topic) throws ConnectionException {
         checkLoaded();
         try {
-            URL url = new URL("https://client-s.gateway.messenger.live.com/v1/threads/" + this.getIdentity() + "/properties?name=topic");
-            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
-            con.setInstanceFollowRedirects(false);
-            con.setRequestMethod("PUT");
-            con.setDoOutput(true);
-            con.setRequestProperty("RegistrationToken", getClient().getRegistrationToken());
-            con.setRequestProperty("Content-Type", "application/json");
+            ;
             JsonObject obj = new JsonObject();
             obj.add("topic", topic);
-            con.getOutputStream().write(obj.toString().getBytes(Charset.forName("UTF-8")));
-            con.getOutputStream();
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(getClient().withCloud(MODIFY_PROPERTY_URL, getIdentity(), "topic"));
+            builder.setMethod("PUT", true);
+            builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
+            builder.addHeader("Content-Type", "application/json");
+            builder.setData(obj.toString());
+            HttpURLConnection con = builder.build();
+            if (con.getResponseCode() != 200) {
+                throw getClient().generateException(con);
+            }
         } catch (IOException e) {
             throw new ConnectionException("While updating the topic", e);
         }
@@ -160,21 +129,4 @@ public void setTopic(String topic) throws ConnectionException {
     public void updateTopic(String topic) {
         this.topic = topic;
     }
-
-    public void onMessage(ChatMessage message) {
-        this.messages.add(message);
-        ((UserImpl) message.getSender()).onMessage(message);
-    }
-
-    @Override
-    public User getUser(String username) {
-        checkLoaded();
-        return this.users.get(username);
-    }
-
-    @Override
-    public List<ChatMessage> getAllMessages() {
-        checkLoaded();
-        return Collections.unmodifiableList(this.messages);
-    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java b/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
index 568c9c3..b1c0df1 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
@@ -1,14 +1,21 @@
 package com.samczsun.skype4j.internal;
 
+import com.eclipsesource.json.JsonObject;
+import com.samczsun.skype4j.ConnectionBuilder;
 import com.samczsun.skype4j.Skype;
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.chat.ChatMessage;
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.NotLoadedException;
 import com.samczsun.skype4j.exceptions.SkypeException;
+import com.samczsun.skype4j.formatting.Message;
 import com.samczsun.skype4j.user.User;
 import org.jsoup.helper.Validate;
 
+import java.io.IOException;
+import java.net.HttpURLConnection;
+import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -16,6 +23,11 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 public abstract class ChatImpl implements Chat {
+    protected static final String CHAT_INFO_URL = "https://%sclient-s.gateway.messenger.live.com/v1/threads/%s/?view=msnp24Equivalent";
+    protected static final String SEND_MESSAGE_URL = "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/conversations/%s/messages";
+    protected static final String MODIFY_MEMBER_URL = "https://%sclient-s.gateway.messenger.live.com/v1/threads/%s/members/8:%s";
+    protected static final String MODIFY_PROPERTY_URL = "https://%sclient-s.gateway.messenger.live.com/v1/threads/%s/properties?name=%s";
+
     public static Chat createChat(Skype client, String identity) throws SkypeException {
         Validate.notNull(client, "Client must not be null");
         Validate.isTrue(client instanceof SkypeImpl, String.format("Now is not the time to use that, %s", client.getUsername()));
@@ -49,6 +61,56 @@ public static Chat createChat(Skype client, String identity) throws SkypeExcepti
         load();
     }
 
+    @Override
+    public ChatMessage sendMessage(Message message) throws ConnectionException {
+        checkLoaded();
+        try {
+            long ms = System.currentTimeMillis();
+            JsonObject obj = new JsonObject();
+            obj.add("content", message.write());
+            obj.add("messagetype", "RichText");
+            obj.add("contenttype", "text");
+            obj.add("clientmessageid", String.valueOf(ms));
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(getClient().withCloud(SEND_MESSAGE_URL, getIdentity()));
+            builder.setMethod("POST", true);
+            builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
+            builder.addHeader("Content-Type", "application/json");
+            builder.setData(obj.toString());
+            HttpURLConnection con = builder.build();
+            if (con.getResponseCode() == 201) {
+                return ChatMessageImpl.createMessage(this, getUser(getClient().getUsername()), null, String.valueOf(ms), ms, message);
+            } else {
+                throw getClient().generateException(con);
+            }
+        } catch (IOException e) {
+            throw new ConnectionException("While sending a message", e);
+        }
+    }
+
+    @Override
+    public Collection<User> getAllUsers() throws NotLoadedException {
+        checkLoaded();
+        return Collections.unmodifiableCollection(users.values());
+    }
+
+    @Override
+    public User getUser(String username) {
+        checkLoaded();
+        return this.users.get(username);
+    }
+
+    @Override
+    public List<ChatMessage> getAllMessages() {
+        checkLoaded();
+        return Collections.unmodifiableList(messages);
+    }
+
+    public void onMessage(ChatMessage message) {
+        this.messages.add(message);
+        ((UserImpl) message.getSender()).onMessage(message);
+    }
+
     public SkypeImpl getClient() {
         return this.client;
     }
@@ -65,8 +127,6 @@ public boolean isLoaded() {
 
     public abstract void removeUser(String username);
 
-    public abstract void onMessage(ChatMessage m);
-
     protected abstract void load() throws ConnectionException;
 
     protected void checkLoaded() throws NotLoadedException {
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java b/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
index 16c2179..dba9d6e 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
@@ -1,19 +1,15 @@
 package com.samczsun.skype4j.internal;
 
-import com.eclipsesource.json.JsonObject;
-import com.samczsun.skype4j.chat.ChatMessage;
 import com.samczsun.skype4j.chat.IndividualChat;
 import com.samczsun.skype4j.exceptions.ConnectionException;
-import com.samczsun.skype4j.formatting.Message;
 import com.samczsun.skype4j.user.User;
 
-import javax.net.ssl.HttpsURLConnection;
-import java.io.IOException;
-import java.net.URL;
-import java.nio.charset.Charset;
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 public class ChatIndividual extends ChatImpl implements IndividualChat {
+    private User partner;
+
     protected ChatIndividual(SkypeImpl skype, String identity) throws ConnectionException {
         super(skype, identity);
     }
@@ -31,6 +27,7 @@ protected void load() {
             user = new UserImpl(username, this);
         }
         newUsers.put(username, user);
+        this.partner = user;
         User me = users.get(getClient().getUsername());
         if (me == null) {
             me = new UserImpl(getClient().getUsername(), this);
@@ -42,35 +39,6 @@ protected void load() {
         hasLoaded.set(true);
     }
 
-    @Override
-    public ChatMessage sendMessage(Message message) throws ConnectionException {
-        checkLoaded();
-        try {
-            long ms = System.currentTimeMillis();
-            JsonObject obj = new JsonObject();
-            obj.add("content", message.write());
-            obj.add("messagetype", "RichText");
-            obj.add("contenttype", "text");
-            obj.add("clientmessageid", String.valueOf(ms));
-            URL url = new URL("https://client-s.gateway.messenger.live.com/v1/users/ME/conversations/" + this.getIdentity() + "/messages");
-            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
-            con.setRequestMethod("POST");
-            con.setDoOutput(true);
-            con.setRequestProperty("RegistrationToken", getClient().getRegistrationToken());
-            con.setRequestProperty("Content-Type", "application/json");
-            con.getOutputStream().write(obj.toString().getBytes(Charset.forName("UTF-8")));
-            con.getInputStream();
-            return ChatMessageImpl.createMessage(this, getUser(getClient().getUsername()), null, String.valueOf(ms), ms, message);
-        } catch (IOException e) {
-            throw new ConnectionException("While sending a message", e);
-        }
-    }
-
-    @Override
-    public Collection<User> getAllUsers() {
-        return Collections.unmodifiableCollection(users.values());
-    }
-
     public void addUser(String username) {
         throw new IllegalArgumentException("Cannot add user to individual chat");
     }
@@ -79,26 +47,8 @@ public void removeUser(String username) {
         throw new IllegalArgumentException("Cannot remove user from individual chat");
     }
 
-    public void onMessage(ChatMessage message) {
-        this.messages.add(message);
-        ((UserImpl) message.getSender()).onMessage(message);
-    }
-
-    @Override
-    public User getUser(String username) {
-        return this.users.get(username);
-    }
-
-    @Override
-    public List<ChatMessage> getAllMessages() {
-        return Collections.unmodifiableList(messages);
-    }
-
     @Override
     public User getPartner() {
-        for (User user : getAllUsers()) {
-            if (!user.getUsername().equals(getClient().getUsername())) return user;
-        }
-        return null;
+        return partner;
     }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
index 098bbbe..dad6573 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
@@ -26,7 +26,7 @@ public String getClientId() {
     }
 
     @Override
-    public Message getMessage() {
+    public Message getContent() {
         return message;
     }
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
index 1053e55..127a85e 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
@@ -34,7 +34,7 @@ public String getClientId() {
     }
 
     @Override
-    public Message getMessage() {
+    public Message getContent() {
         return message;
     }
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/MessageType.java b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
index ef02fe9..ecd5ac7 100644
--- a/src/main/java/com/samczsun/skype4j/internal/MessageType.java
+++ b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
@@ -33,7 +33,7 @@
     UNKNOWN("Unknown") {
         @Override
         public void handle(SkypeImpl skype, JsonObject resource) {
-
+            throw new IllegalArgumentException("Somehow got an unknown tag. Please open a issue at the GitHub repo");
         }
     },
     TEXT("Text") {
@@ -44,19 +44,19 @@ public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
     },
     RICH_TEXT("RichText") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
+        public void handle(SkypeImpl skype, JsonObject resource) {
             if (resource.get("clientmessageid") != null) { // New message
                 String clientId = resource.get("clientmessageid").asString();
                 String id = resource.get("id").asString();
                 String content = resource.get("content").asString();
                 String from = resource.get("from").asString();
                 String url = resource.get("conversationLink").asString();
-                Chat c = getChat(url, skype);
+                ChatImpl c = (ChatImpl) getChat(url, skype);
                 User u = getUser(from, c);
                 ChatMessage m = ChatMessageImpl.createMessage(c, u, id, clientId, System.currentTimeMillis(), Message.fromHtml(stripMetadata(content)));
-                ((ChatImpl) c).onMessage(m);
-                MessageReceivedEvent evnt = new MessageReceivedEvent(m);
-                skype.getEventDispatcher().callEvent(evnt);
+                c.onMessage(m);
+                MessageReceivedEvent event = new MessageReceivedEvent(m);
+                skype.getEventDispatcher().callEvent(event);
             } else if (resource.get("skypeeditedid") != null) { // Edited
                 // message
                 String url = resource.get("conversationLink").asString();
@@ -86,7 +86,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
                     Message originalContent = null;
                     for (User user : c.getAllUsers()) {
                         if (user.getMessageById(clientId) != null) {
-                            originalContent = user.getMessageById(clientId).getMessage();
+                            originalContent = user.getMessageById(clientId).getContent();
                         }
                     }
                     final Message finalOriginalContent = originalContent;
@@ -95,7 +95,7 @@ public String getClientId() {
                             return clientId;
                         }
 
-                        public Message getMessage() {
+                        public Message getContent() {
                             return finalOriginalContent;
                         }
 
@@ -126,7 +126,7 @@ public String getId() {
                     skype.getEventDispatcher().callEvent(event);
                 }
             } else {
-                throw new SkypeException("Had no id");
+                throw new IllegalArgumentException("Message had no id - hacking by user or skype changed their api");
             }
         }
     },
@@ -186,7 +186,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
             UserAddEvent event = null;
             if (usersAdded.size() == 1) {
                 event = new UserAddEvent(usersAdded.get(0), initiator);
-            } else {
+            } else if (usersAdded.size() > 1) {
                 event = new MultiUserAddEvent(usersAdded, initiator);
             }
             skype.getEventDispatcher().callEvent(event);
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
index 819f392..03d544b 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
@@ -3,6 +3,7 @@
 import com.eclipsesource.json.JsonArray;
 import com.eclipsesource.json.JsonObject;
 import com.eclipsesource.json.JsonValue;
+import com.samczsun.skype4j.ConnectionBuilder;
 import com.samczsun.skype4j.Skype;
 import com.samczsun.skype4j.StreamUtils;
 import com.samczsun.skype4j.chat.Chat;
@@ -19,10 +20,9 @@
 import org.jsoup.nodes.Element;
 import org.jsoup.select.Elements;
 
-import javax.net.ssl.HttpsURLConnection;
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.URL;
+import java.net.HttpURLConnection;
 import java.net.URLEncoder;
 import java.text.SimpleDateFormat;
 import java.util.*;
@@ -32,15 +32,19 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 public class SkypeImpl extends Skype {
     private static final String LOGIN_URL = "https://login.skype.com/login?client_id=578134&redirect_uri=https%3A%2F%2Fweb.skype.com";
     private static final String PING_URL = "https://web.skype.com/api/v1/session-ping";
     private static final String TOKEN_AUTH_URL = "https://api.asm.skype.com/v1/skypetokenauth";
-    private static final String SUBSCRIPTIONS_URL = "https://client-s.gateway.messenger.live.com/v1/users/ME/endpoints/SELF/subscriptions";
-    private static final String MESSAGINGSERVICE_URL = "https://client-s.gateway.messenger.live.com/v1/users/ME/endpoints/%s/presenceDocs/messagingService";
-    private static final String ENDPOINTS_URL = "https://client-s.gateway.messenger.live.com/v1/users/ME/endpoints";
     private static final String LOGOUT_URL = "https://login.skype.com/logout?client_id=578134&redirect_uri=https%3A%2F%2Fweb.skype.com&intsrc=client-_-webapp-_-production-_-go-signin";
+    private static final String ENDPOINTS_URL = "https://client-s.gateway.messenger.live.com/v1/users/ME/endpoints";
+    // The endpoints below all depend on the cloud the user is in
+    private static final String SUBSCRIPTIONS_URL = "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/endpoints/SELF/subscriptions";
+    private static final String MESSAGINGSERVICE_URL = "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/endpoints/%s/presenceDocs/messagingService";
+    private static final String POLL_URL = "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/endpoints/SELF/subscriptions/0/poll";
 
     private final AtomicBoolean loggedIn = new AtomicBoolean(false);
     private final String username;
@@ -52,7 +56,10 @@
     private String endpointId;
     private Map<String, String> cookies;
 
+    private String cloud;
+
     private Thread sessionKeepaliveThread;
+    private Thread pollThread;
 
     private final ExecutorService scheduler = Executors.newFixedThreadPool(16);
     private final Logger logger = Logger.getLogger("webskype");
@@ -64,83 +71,92 @@ public SkypeImpl(String username, String password) {
     }
 
     public void subscribe() throws IOException {
-        HttpsURLConnection subscribe = (HttpsURLConnection) new URL(SUBSCRIPTIONS_URL).openConnection();
-        subscribe.setRequestMethod("POST");
-        subscribe.setDoOutput(true);
-        subscribe.setRequestProperty("RegistrationToken", registrationToken);
-        subscribe.setRequestProperty("Content-Type", "application/json");
-        subscribe.getOutputStream().write(buildSubscriptionObject().toString().getBytes());
-        subscribe.getInputStream();
-
-        HttpsURLConnection registerEndpoint = (HttpsURLConnection) new URL(String.format(MESSAGINGSERVICE_URL, URLEncoder.encode(endpointId, "UTF-8"))).openConnection();
-        registerEndpoint.setRequestMethod("PUT");
-        registerEndpoint.setDoOutput(true);
-        registerEndpoint.setRequestProperty("RegistrationToken", registrationToken);
-        registerEndpoint.setRequestProperty("Content-Type", "application/json");
-        registerEndpoint.getOutputStream().write(buildRegistrationObject().toString().getBytes());
-        registerEndpoint.getInputStream();
-
-        Thread pollThread = new Thread() {
+        ConnectionBuilder builder = new ConnectionBuilder();
+        builder.setUrl(withCloud(SUBSCRIPTIONS_URL));
+        builder.setMethod("POST", true);
+        builder.addHeader("RegistrationToken", registrationToken);
+        builder.addHeader("Content-Type", "application/json");
+        builder.setData(buildSubscriptionObject().toString());
+        HttpURLConnection connection = builder.build();
+
+        int code = connection.getResponseCode();
+        if (code != 201) {
+            throw generateException(connection);
+        }
+
+        builder.setUrl(withCloud(MESSAGINGSERVICE_URL, URLEncoder.encode(endpointId, "UTF-8")));
+        builder.setMethod("PUT", true);
+        builder.setData(buildRegistrationObject().toString());
+        connection = builder.build();
+
+        code = connection.getResponseCode();
+        if (code != 200) {
+            throw generateException(connection);
+        }
+
+        pollThread = new Thread() {
             public void run() {
-                try {
-                    URL url = new URL("https://client-s.gateway.messenger.live.com/v1/users/ME/endpoints/SELF/subscriptions/0/poll");
-                    HttpsURLConnection c = null;
-                    while (loggedIn.get()) {
-                        try {
-                            c = (HttpsURLConnection) url.openConnection();
-                            c.setRequestMethod("POST");
-                            c.setDoOutput(true);
-                            c.addRequestProperty("Content-Type", "application/json");
-                            c.addRequestProperty("RegistrationToken", registrationToken);
-                            c.getOutputStream().write(new byte[0]);
-                            InputStream read = c.getInputStream();
-                            String json = StreamUtils.readFully(read);
-                            if (!json.isEmpty()) {
-                                final JsonObject message = JsonObject.readFrom(json);
-                                scheduler.execute(new Runnable() {
-                                    public void run() {
-                                        try {
-                                            JsonArray arr = message.get("eventMessages").asArray();
-                                            for (JsonValue elem : arr) {
-                                                JsonObject eventObj = elem.asObject();
-                                                String resourceType = eventObj.get("resourceType").asString();
-                                                if (resourceType.equals("NewMessage")) {
-                                                    JsonObject resource = eventObj.get("resource").asObject();
-                                                    String messageType = resource.get("messagetype").asString();
-                                                    MessageType type = MessageType.getByName(messageType);
-                                                    type.handle(SkypeImpl.this, resource);
-                                                } else if (resourceType.equalsIgnoreCase("EndpointPresence")) {
-                                                } else if (resourceType.equalsIgnoreCase("UserPresence")) {
-                                                } else if (resourceType.equalsIgnoreCase("ConversationUpdate")) { //Not sure what this does
-                                                } else if (resourceType.equalsIgnoreCase("ThreadUpdate")) {
-                                                    JsonObject resource = eventObj.get("resource").asObject();
-                                                    String chatId = resource.get("id").asString();
-                                                    Chat chat = getChat(chatId);
-                                                    if (chat == null) {
-                                                        chat = ChatImpl.createChat(SkypeImpl.this, chatId);
-                                                        allChats.put(chatId, chat);
-                                                        ChatJoinedEvent e = new ChatJoinedEvent(chat);
-                                                        eventDispatcher.callEvent(e);
-                                                    }
-                                                } else {
-                                                    logger.severe("Unhandled resourceType " + resourceType);
-                                                    logger.severe(eventObj.toString());
+                ConnectionBuilder poll = new ConnectionBuilder();
+                poll.setUrl(withCloud(POLL_URL));
+                poll.setMethod("POST", true);
+                poll.addHeader("RegistrationToken", registrationToken);
+                poll.addHeader("Content-Type", "application/json");
+                poll.setData("");
+                while (loggedIn.get()) {
+                    try {
+                        HttpURLConnection c = poll.build();
+
+                        int code = c.getResponseCode();
+
+                        if (code != 200) {
+                            throw generateException(c);
+                        }
+
+                        InputStream read = c.getInputStream();
+                        String json = StreamUtils.readFully(read);
+                        if (!json.isEmpty()) {
+                            final JsonObject message = JsonObject.readFrom(json);
+                            scheduler.execute(new Runnable() {
+                                public void run() {
+                                    try {
+                                        JsonArray arr = message.get("eventMessages").asArray();
+                                        for (JsonValue elem : arr) {
+                                            JsonObject eventObj = elem.asObject();
+                                            String resourceType = eventObj.get("resourceType").asString();
+                                            if (resourceType.equals("NewMessage")) {
+                                                JsonObject resource = eventObj.get("resource").asObject();
+                                                String messageType = resource.get("messagetype").asString();
+                                                MessageType type = MessageType.getByName(messageType);
+                                                type.handle(SkypeImpl.this, resource);
+                                            } else if (resourceType.equalsIgnoreCase("EndpointPresence")) {
+                                            } else if (resourceType.equalsIgnoreCase("UserPresence")) {
+                                            } else if (resourceType.equalsIgnoreCase("ConversationUpdate")) { //Not sure what this does
+                                            } else if (resourceType.equalsIgnoreCase("ThreadUpdate")) {
+                                                JsonObject resource = eventObj.get("resource").asObject();
+                                                String chatId = resource.get("id").asString();
+                                                Chat chat = getChat(chatId);
+                                                if (chat == null) {
+                                                    chat = ChatImpl.createChat(SkypeImpl.this, chatId);
+                                                    allChats.put(chatId, chat);
+                                                    ChatJoinedEvent e = new ChatJoinedEvent(chat);
+                                                    eventDispatcher.callEvent(e);
                                                 }
+                                            } else {
+                                                logger.severe("Unhandled resourceType " + resourceType);
+                                                logger.severe(eventObj.toString());
                                             }
-                                        } catch (Exception e) {
-                                            logger.log(Level.SEVERE, "Exception while handling message", e);
-                                            logger.log(Level.SEVERE, message.toString());
                                         }
+                                    } catch (Exception e) {
+                                        logger.log(Level.SEVERE, "Exception while handling message", e);
+                                        logger.log(Level.SEVERE, message.toString());
                                     }
-                                });
-                            }
-                        } catch (IOException e) {
-                            eventDispatcher.callEvent(new DisconnectedEvent(e));
-                            loggedIn.set(false);
+                                }
+                            });
                         }
+                    } catch (IOException e) {
+                        eventDispatcher.callEvent(new DisconnectedEvent(e));
+                        loggedIn.set(false);
                     }
-                } catch (IOException e) {
-                    e.printStackTrace();
                 }
             }
         };
@@ -218,16 +234,27 @@ private Response getAsmToken(Map<String, String> cookies, String skypeToken) thr
         }
     }
 
-    private HttpsURLConnection registerEndpoint(String skypeToken) throws ConnectionException {
+    private HttpURLConnection registerEndpoint(String skypeToken) throws ConnectionException {
         try {
-            HttpsURLConnection connection = (HttpsURLConnection) new URL(ENDPOINTS_URL).openConnection(); // msmsgs@msnmsgr.com,Q1P7W2E4J9R8U3S5
-            connection.setRequestProperty("Authentication", "skypetoken=" + skypeToken);
-            //getReg.setRequestProperty("LockAndKey", "appId=msmsgs@msnmsgr.com; time=1436987361; lockAndKeyResponse=838e6231d460580332d22da83898ff44");
-            connection.setRequestMethod("POST");
-            connection.setDoOutput(true);
-            connection.getOutputStream().write("{}".getBytes());
-            connection.getInputStream();
-            return connection;
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(ENDPOINTS_URL);
+            builder.setMethod("POST", true);
+            builder.addHeader("Authentication", String.format("skypetoken=%s", skypeToken));
+            builder.setData("{}");
+
+            HttpURLConnection connection = builder.build(); // LockAndKey data msmsgs@msnmsgr.com:Q1P7W2E4J9R8U3S5
+            int code = connection.getResponseCode();
+            if (code >= 301 && code <= 303 || code == 307) { //User is in a different cloud - let's go there
+                builder.setUrl(connection.getHeaderField("Location"));
+                updateCloud(connection.getHeaderField("Location"));
+                connection = builder.build();
+                code = connection.getResponseCode();
+            }
+            if (code == 201) {
+                return connection;
+            } else {
+                throw generateException(connection);
+            }
         } catch (IOException e) {
             throw new ConnectionException("While registering the endpoint", e);
         }
@@ -282,7 +309,7 @@ public void login() throws InvalidCredentialsException, ConnectionException, Par
             Response asmResponse = getAsmToken(tCookies, tSkypeToken);
             tCookies.putAll(asmResponse.cookies());
 
-            HttpsURLConnection registrationToken = registerEndpoint(tSkypeToken);
+            HttpURLConnection registrationToken = registerEndpoint(tSkypeToken);
             String[] splits = registrationToken.getHeaderField("Set-RegistrationToken").split(";");
             String tRegistrationToken = splits[0];
             String tEndpointId = splits[2].split("=")[1];
@@ -324,6 +351,29 @@ public void run() {
         }
     }
 
+    public IOException generateException(HttpURLConnection connection) throws IOException {
+        return new IOException(String.format("(%s, %s)", connection.getResponseCode(), connection.getResponseMessage()));
+    }
+
+    private void updateCloud(String anyLocation) {
+        Pattern grabber = Pattern.compile("https?://([^-]*-)client-s");
+        Matcher m = grabber.matcher(anyLocation);
+        if (m.find()) {
+            this.cloud = m.group(1);
+        } else {
+            throw new IllegalArgumentException("Could not find match in " + anyLocation);
+        }
+    }
+
+    public String withCloud(String url, Object... extraArgs) {
+        Object[] format = new Object[extraArgs.length + 1];
+        format[0] = cloud;
+        for (int i = 1; i < format.length; i++) {
+            format[i] = extraArgs[i - 1].toString();
+        }
+        return String.format(url, format);
+    }
+
     @Override
     public String getUsername() {
         return this.username;
