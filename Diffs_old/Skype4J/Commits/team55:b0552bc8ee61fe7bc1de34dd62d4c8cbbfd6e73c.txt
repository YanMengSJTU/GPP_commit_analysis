diff --git a/.gitignore b/.gitignore
index 0aa02d2..7bafd14 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,5 +1,6 @@
 /bin/
 /target/
+/scripts/
 .settings/
 .idea/
 .classpath
diff --git a/src/main/java/com/samczsun/skype4j/chat/Chat.java b/src/main/java/com/samczsun/skype4j/chat/Chat.java
index 4e217a3..a97c5da 100644
--- a/src/main/java/com/samczsun/skype4j/chat/Chat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/Chat.java
@@ -4,7 +4,8 @@
 import java.util.List;
 
 import com.samczsun.skype4j.exceptions.SkypeException;
-import com.samczsun.skype4j.formatting.Text;
+import com.samczsun.skype4j.formatting.Message;
+import com.samczsun.skype4j.formatting.RichText;
 import com.samczsun.skype4j.user.User;
 
 /**
@@ -22,7 +23,7 @@
      *         message
      * @throws SkypeException
      */
-    ChatMessage sendMessage(Text message) throws SkypeException;
+    ChatMessage sendMessage(Message message) throws SkypeException;
 
     /**
      * Get the {@link User User} object represented by that username
diff --git a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java b/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
index fe45f8c..cd13c66 100644
--- a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
+++ b/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
@@ -1,7 +1,8 @@
 package com.samczsun.skype4j.chat;
 
 import com.samczsun.skype4j.exceptions.SkypeException;
-import com.samczsun.skype4j.formatting.Text;
+import com.samczsun.skype4j.formatting.Message;
+import com.samczsun.skype4j.formatting.RichText;
 import com.samczsun.skype4j.user.User;
 
 /**
@@ -13,13 +14,13 @@
     
     String getClientId();
 
-    String getText();
+    Message getMessage();
 
     long getTime();
 
     User getSender();
 
-    void edit(Text newMessage) throws SkypeException;
+    void edit(Message newMessage) throws SkypeException;
 
     void delete() throws SkypeException;
 
diff --git a/src/main/java/com/samczsun/skype4j/formatting/Message.java b/src/main/java/com/samczsun/skype4j/formatting/Message.java
index 43a7b20..9b923a4 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/Message.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/Message.java
@@ -1,71 +1,40 @@
 package com.samczsun.skype4j.formatting;
 
+import java.awt.*;
 import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Stack;
 
 import org.apache.commons.lang3.StringEscapeUtils;
+import org.jsoup.Jsoup;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.nodes.Node;
+import org.jsoup.nodes.TextNode;
+import org.jsoup.select.NodeVisitor;
 
 public class Message {
-    public static Text fromLegacy(String rawText) {
-        return Message.text(rawText);
-    }
+    private final ArrayList<Text> components = new ArrayList<>();
 
     private Message() {
     }
 
-    protected final ArrayList<Text> components = new ArrayList<>();
-
-    public static Text text(String text) {
-        Message message = new Message();
-        Text t = new Text(message, StringEscapeUtils.escapeHtml4(text));
-        message.components.add(t);
-        return t;
-    }
-    
-    public static Text unsafeText(String text) {
-        Message message = new Message();
-        Text t = new Text(message, text);
-        message.components.add(t);
-        return t;
-    }
-
-    public static Text text(String text, Object... args) {
-        return text(String.format(text, args));
-    }
-
-    public static Text text(byte text) {
-        return text(Integer.toString(text));
-    }
-
-    public static Text text(char text) {
-        return text(String.valueOf(text));
-    }
-
-    public static Text text(short text) {
-        return text(Integer.toString(text));
+    public static Message create() {
+        return new Message();
     }
 
-    public static Text text(double text) {
-        return text(Double.toString(text));
+    public Message with(Text text) {
+        this.components.add(text);
+        return this;
     }
 
-    public static Text text(float text) {
-        return text(Float.toString(text));
+    public List<Text> children() {
+        return Collections.unmodifiableList(components);
     }
 
-    public static Text text(int text) {
-        return text(Integer.toString(text));
-    }
-
-    public static Text text(long text) {
-        return text(Long.toString(text));
-    }
-
-    public static Text text(Object text) {
-        return text(text.toString());
-    }
-
-    public static Text newLine() {
-        return text("\n");
+    public Text child(int x) {
+        return components.get(x);
     }
 
     public String write() {
@@ -76,7 +45,124 @@ public String write() {
         return result.toString();
     }
 
+    public String asHtml() {
+        return this.write();
+    }
+
     public String toString() {
         return this.write();
     }
+
+    public String asPlaintext() {
+        return Jsoup.parse(write()).text();
+    }
+
+    public static Message fromHtml(String text) {
+        final Message parsed = create();
+        Document doc = Jsoup.parse(text);
+        doc.getElementsByTag("body").get(0).traverse(new NodeVisitor() {
+            Stack<RichText> stack = new Stack<>();
+
+            @Override
+            public void head(Node node, int depth) {
+                if (!node.nodeName().equals("body")) {
+                    if (depth != 1) {
+                        if (node.nodeName().equals("b")) {
+                            RichText newText = Text.rich().withBold();
+                            stack.peek().with(newText);
+                            stack.push(newText);
+                        } else if (node.nodeName().equals("i")) {
+                            RichText newText = Text.rich().withItalic();
+                            stack.peek().with(newText);
+                            stack.push(newText);
+                        } else if (node.nodeName().equals("s")) {
+                            RichText newText = Text.rich().withStrikethrough();
+                            stack.peek().with(newText);
+                            stack.push(newText);
+                        } else if (node.nodeName().equals("u")) {
+                            RichText newText = Text.rich().withUnderline();
+                            stack.peek().with(newText);
+                            stack.push(newText);
+                        } else if (node.nodeName().equals("blink")) {
+                            RichText newText = Text.rich().withBlink();
+                            stack.peek().with(newText);
+                            stack.push(newText);
+                        } else if (node.nodeName().equals("font")) {
+                            Element e = (Element) node;
+                            RichText newText = Text.rich();
+                            if (e.hasAttr("size")) {
+                                newText.withSize(Integer.parseInt(e.attr("size")));
+                            }
+                            if (e.hasAttr("color")) {
+                                newText.withColor(Color.decode(e.attr("color")));
+                            }
+                            stack.peek().with(newText);
+                            stack.push(newText);
+                        } else if (node.nodeName().equals("a")) {
+                            Element e = (Element) node;
+                            RichText newText = Text.rich();
+                            if (e.hasAttr("href")) {
+                                newText.withLink(e.attr("href"));
+                            }
+                            stack.peek().with(newText);
+                            stack.push(newText);
+                        } else if (node.nodeName().equals("#text")) {
+                            stack.peek().with(Text.plain(((TextNode) node).text()));
+                        }
+                    } else {
+                        if (node.nodeName().equals("b")) {
+                            RichText currentText = Text.rich().withBold();
+                            parsed.with(currentText);
+                            stack.push(currentText);
+                        } else if (node.nodeName().equals("i")) {
+                            RichText currentText = Text.rich().withItalic();
+                            parsed.with(currentText);
+                            stack.push(currentText);
+                        } else if (node.nodeName().equals("s")) {
+                            RichText currentText = Text.rich().withStrikethrough();
+                            parsed.with(currentText);
+                            stack.push(currentText);
+                        } else if (node.nodeName().equals("u")) {
+                            RichText currentText = Text.rich().withUnderline();
+                            parsed.with(currentText);
+                            stack.push(currentText);
+                        } else if (node.nodeName().equals("blink")) {
+                            RichText currentText = Text.rich().withBlink();
+                            parsed.with(currentText);
+                            stack.push(currentText);
+                        } else if (node.nodeName().equals("font")) {
+                            Element e = (Element) node;
+                            RichText currentText = Text.rich();
+                            if (e.hasAttr("size")) {
+                                currentText.withSize(Integer.parseInt(e.attr("size")));
+                            }
+                            if (e.hasAttr("color")) {
+                                currentText.withColor(Color.decode(e.attr("color")));
+                            }
+                            parsed.with(currentText);
+                            stack.push(currentText);
+                        } else if (node.nodeName().equals("a")) {
+                            Element e = (Element) node;
+                            RichText currentText = Text.rich();
+                            if (e.hasAttr("href")) {
+                                currentText.withLink(e.attr("href"));
+                            }
+                            parsed.with(currentText);
+                            stack.push(currentText);
+                        } else if (node.nodeName().equals("#text")) {
+                            parsed.with(Text.plain(((TextNode) node).text()));
+                        }
+                    }
+                }
+            }
+
+            @Override
+            public void tail(Node node, int depth) {
+                if (!node.nodeName().equals("body") && !node.nodeName().equals("#text")) {
+                    stack.pop();
+                }
+            }
+        });
+        return parsed;
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/formatting/PlainText.java b/src/main/java/com/samczsun/skype4j/formatting/PlainText.java
new file mode 100644
index 0000000..a9d6faa
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/formatting/PlainText.java
@@ -0,0 +1,21 @@
+package com.samczsun.skype4j.formatting;
+
+/**
+ * Created by sam on 2015-07-09.
+ */
+public class PlainText extends Text {
+
+    private String value;
+
+    PlainText(String value) {
+        this.value = value;
+    }
+
+    public String write() {
+        return this.value;
+    }
+
+    public String toString() {
+        return this.write();
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/samczsun/skype4j/formatting/RichText.java b/src/main/java/com/samczsun/skype4j/formatting/RichText.java
new file mode 100644
index 0000000..742e5d0
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/formatting/RichText.java
@@ -0,0 +1,141 @@
+package com.samczsun.skype4j.formatting;
+
+import java.awt.Color;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import org.apache.commons.lang3.StringEscapeUtils;
+
+public class RichText extends Text {
+    private boolean bold = false;
+    private boolean italic = false;
+    private boolean underline = false;
+    private boolean strikethrough = false;
+    private boolean blink = false;
+    private String link = null;
+    private String color = null;
+    private int size = -1;
+
+    private List<Text> children = new ArrayList<>();
+
+    RichText() {
+    }
+
+    public RichText withBold() {
+        this.bold = true;
+        return this;
+    }
+
+    public RichText withUnderline() {
+        this.underline = true;
+        return this;
+    }
+
+    public RichText withItalic() {
+        this.italic = true;
+        return this;
+    }
+
+    public RichText withStrikethrough() {
+        this.strikethrough = true;
+        return this;
+    }
+
+    public RichText withBlink() {
+        this.blink = true;
+        return this;
+    }
+
+    public RichText withLink(String link) {
+        this.link = link;
+        return this;
+    }
+
+    public RichText withColor(Color color) {
+        this.color = Integer.toHexString(color.getRGB());
+        this.color = this.color.substring(2, this.color.length());
+        return this;
+    }
+
+    public RichText withSize(int size) {
+        this.size = size;
+        return this;
+    }
+
+    public RichText with(Text t) {
+        this.children.add(t);
+        return this;
+    }
+
+    public Text child(int index) {
+        return this.children.get(index);
+    }
+
+    public List<Text> children() {
+        return Collections.unmodifiableList(this.children);
+    }
+
+    public String write() {
+        StringBuilder output = new StringBuilder();
+        if (bold) {
+            output.append("<b>");
+        }
+        if (italic) {
+            output.append("<i>");
+        }
+        if (underline) {
+            output.append("<u>");
+        }
+        if (strikethrough) {
+            output.append("<s>");
+        }
+        if (blink) {
+            output.append("<blink>");
+        }
+        boolean font = size != -1 || color != null;
+        if (font) {
+            output.append("<font ");
+            if (size != -1) {
+                output.append("size=\"").append(size).append("\" ");
+            }
+            if (color != null) {
+                output.append("color=\"#").append(color).append("\" ");
+            }
+            output.setLength(output.length() - 1);
+            output.append(">");
+        }
+        if (this.link != null) {
+            output.append("<a href=\"").append(this.link).append("\">");
+        }
+        for (Text t : this.children) {
+            output.append(t.write());
+        }
+        if (this.link != null) {
+            output.append("</a>");
+        }
+        if (font) {
+            output.append("</font>");
+        }
+        if (blink) {
+            output.append("</blink>");
+        }
+        if (strikethrough) {
+            output.append("</s>");
+        }
+        if (underline) {
+            output.append("</u>");
+        }
+        if (italic) {
+            output.append("</i>");
+        }
+        if (bold) {
+            output.append("</b>");
+        }
+        return output.toString();
+    }
+
+    public String toString() {
+        return this.write();
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/samczsun/skype4j/formatting/Text.java b/src/main/java/com/samczsun/skype4j/formatting/Text.java
index 47356f2..41c3f26 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/Text.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/Text.java
@@ -1,196 +1,56 @@
 package com.samczsun.skype4j.formatting;
 
-import java.awt.Color;
+/**
+ * Created by sam on 2015-07-09.
+ */
+public abstract class Text {
+    public static final Text NEW_LINE = plain('\n');
+    public static final Text BLANK = plain("");
 
-import org.apache.commons.lang3.StringEscapeUtils;
+    public abstract String write();
 
-public class Text {
-    private final Message parent;
-
-    private String text = null;
-    private boolean bold = false;
-    private boolean italic = false;
-    private boolean underline = false;
-    private boolean strikethrough = false;
-    private boolean blink = false;
-    private String link = null;
-    private String color = null;
-    private int size = -1;
-
-    public Text(Message parent, String text) {
-        this.text = text;
-        this.parent = parent;
-    }
-
-    public Text bold() {
-        this.bold = true;
-        return this;
-    }
-
-    public Text underline() {
-        this.underline = true;
-        return this;
-    }
-
-    public Text italic() {
-        this.italic = true;
-        return this;
+    public static RichText rich() {
+        return new RichText();
     }
 
-    public Text strikethrough() {
-        this.strikethrough = true;
-        return this;
+    public static PlainText plain(String text) {
+        return new PlainText(text);
     }
 
-    public Text blink() {
-        this.blink = true;
-        return this;
+    public static PlainText plain(String text, Object... args) {
+        return plain(String.format(text, args));
     }
 
-    public Text link(String link) {
-        this.link = link;
-        return this;
+    public static PlainText plain(byte text) {
+        return plain(Integer.toString(text));
     }
 
-    public Text link() {
-        this.link = this.text;
-        return this;
-    }
-
-    public Text color(Color color) {
-        this.color = Integer.toHexString(color.getRGB());
-        this.color = this.color.substring(2, this.color.length());
-        return this;
-    }
-
-    public Text size(int size) {
-        this.size = size;
-        return this;
-    }
-
-    public Text text(String text) {
-        Text t = new Text(parent, StringEscapeUtils.escapeHtml4(text));
-        parent.components.add(t);
-        return t;
-    }
-    
-    public Text unsafeText(String text) {
-        Text t = new Text(parent, text);
-        parent.components.add(t);
-        return t;
+    public static PlainText plain(char text) {
+        return plain(String.valueOf(text));
     }
 
-    public Text text(String text, Object... args) {
-        return text(String.format(text, args));
+    public static PlainText plain(short text) {
+        return plain(Integer.toString(text));
     }
 
-    public Text text(byte text) {
-        return text(Integer.toString(text));
+    public static PlainText plain(double text) {
+        return plain(Double.toString(text));
     }
 
-    public Text text(char text) {
-        return text(String.valueOf(text));
+    public static PlainText plain(float text) {
+        return plain(Float.toString(text));
     }
 
-    public Text text(short text) {
-        return text(Integer.toString(text));
+    public static PlainText plain(int text) {
+        return plain(Integer.toString(text));
     }
 
-    public Text text(double text) {
-        return text(Double.toString(text));
+    public static PlainText plain(long text) {
+        return plain(Long.toString(text));
     }
 
-    public Text text(float text) {
-        return text(Float.toString(text));
+    public static PlainText plain(Object text) {
+        return plain(text.toString());
     }
 
-    public Text text(int text) {
-        return text(Integer.toString(text));
-    }
-
-    public Text text(long text) {
-        return text(Long.toString(text));
-    }
-
-    public Text text(Object text) {
-        return text(text.toString());
-    }
-
-    public Text newLine() {
-        return text("\n");
-    }
-    
-    public Text removeLast() {
-        parent.components.remove(parent.components.size() - 1);
-        parent.components.trimToSize();
-        return this;
-    }
-
-    public String write() {
-        if ((bold || italic || underline || strikethrough) && link != null) {
-            throw new IllegalArgumentException("You may not format links with bold/italic/underline/strikethrough");
-        }
-        StringBuilder output = new StringBuilder();
-        if (bold) {
-            output.append("<b>");
-        }
-        if (italic) {
-            output.append("<i>");
-        }
-        if (underline) {
-            output.append("<u>");
-        }
-        if (strikethrough) {
-            output.append("<s>");
-        }
-        if (blink) {
-            output.append("<blink>");
-        }
-        boolean font = size != -1 || color != null;
-        if (font) {
-            output.append("<font ");
-            if (size != -1) {
-                output.append("size=\"").append(size).append("\" ");
-            }
-            if (color != null) {
-                output.append("color=\"#").append(color).append("\" ");
-            }
-            output.setLength(output.length() - 1);
-            output.append(">");
-        }
-        if (this.link != null) {
-            output.append("<a href=\"").append(this.link).append("\">");
-        }
-        output.append(this.text);
-        if (this.link != null) {
-            output.append("</a>");
-        }
-        if (font) {
-            output.append("</font>");
-        }
-        if (blink) {
-            output.append("</blink>");
-        }
-        if (strikethrough) {
-            output.append("</s>");
-        }
-        if (underline) {
-            output.append("</u>");
-        }
-        if (italic) {
-            output.append("</i>");
-        }
-        if (bold) {
-            output.append("</b>");
-        }
-        return output.toString();
-    }
-
-    public String toString() {
-        return this.write();
-    }
-
-    public Message parent() {
-        return this.parent;
-    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java b/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
index b8416c7..a337dcc 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
@@ -11,8 +11,6 @@
 
 import javax.net.ssl.HttpsURLConnection;
 
-import org.jsoup.Jsoup;
-
 import com.eclipsesource.json.JsonArray;
 import com.eclipsesource.json.JsonObject;
 import com.eclipsesource.json.JsonValue;
@@ -21,7 +19,8 @@
 import com.samczsun.skype4j.chat.GroupChat;
 import com.samczsun.skype4j.exceptions.NotLoadedException;
 import com.samczsun.skype4j.exceptions.SkypeException;
-import com.samczsun.skype4j.formatting.Text;
+import com.samczsun.skype4j.formatting.Message;
+import com.samczsun.skype4j.formatting.RichText;
 import com.samczsun.skype4j.user.User;
 import com.samczsun.skype4j.user.User.Role;
 
@@ -77,13 +76,13 @@ protected void load() throws SkypeException {
     }
 
     @Override
-    public ChatMessage sendMessage(Text message) throws SkypeException {
+    public ChatMessage sendMessage(Message message) throws SkypeException {
         checkLoaded();
         HttpsURLConnection con = null;
         try {
             long ms = System.currentTimeMillis();
             JsonObject obj = new JsonObject();
-            obj.add("content", message.parent().write());
+            obj.add("content", message.write());
             obj.add("messagetype", "RichText");
             obj.add("contenttype", "text");
             obj.add("clientmessageid", String.valueOf(ms));
@@ -95,7 +94,7 @@ public ChatMessage sendMessage(Text message) throws SkypeException {
             con.setRequestProperty("Content-Type", "application/json");
             con.getOutputStream().write(obj.toString().getBytes(Charset.forName("UTF-8")));
             con.getInputStream();
-            return ChatMessageImpl.createMessage(this, getUser(getClient().getUsername()), null, String.valueOf(ms), ms, Jsoup.parse(message.parent().write()).text());
+            return ChatMessageImpl.createMessage(this, getUser(getClient().getUsername()), null, String.valueOf(ms), ms, message);
         } catch (IOException e) {
             throw new SkypeException("An error occured while sending a message", e);
         }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java b/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
index 9de1cba..8234440 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
@@ -11,13 +11,14 @@
 
 import javax.net.ssl.HttpsURLConnection;
 
+import com.samczsun.skype4j.formatting.Message;
 import org.jsoup.Jsoup;
 
 import com.eclipsesource.json.JsonObject;
 import com.samczsun.skype4j.chat.ChatMessage;
 import com.samczsun.skype4j.chat.IndividualChat;
 import com.samczsun.skype4j.exceptions.SkypeException;
-import com.samczsun.skype4j.formatting.Text;
+import com.samczsun.skype4j.formatting.RichText;
 import com.samczsun.skype4j.user.User;
 
 public class ChatIndividual extends ChatImpl implements IndividualChat {
@@ -50,12 +51,12 @@ protected void load() {
     }
 
     @Override
-    public ChatMessage sendMessage(Text message) throws SkypeException {
+    public ChatMessage sendMessage(Message message) throws SkypeException {
         HttpsURLConnection con = null;
         try {
             long ms = System.currentTimeMillis();
             JsonObject obj = new JsonObject();
-            obj.add("content", message.parent().write());
+            obj.add("content", message.write());
             obj.add("messagetype", "RichText");
             obj.add("contenttype", "text");
             obj.add("clientmessageid", String.valueOf(ms));
@@ -67,7 +68,7 @@ public ChatMessage sendMessage(Text message) throws SkypeException {
             con.setRequestProperty("Content-Type", "application/json");
             con.getOutputStream().write(obj.toString().getBytes(Charset.forName("UTF-8")));
             con.getInputStream();
-            return ChatMessageImpl.createMessage(this, getUser(getClient().getUsername()), null, String.valueOf(ms), ms, Jsoup.parse(message.parent().write()).text());
+            return ChatMessageImpl.createMessage(this, getUser(getClient().getUsername()), null, String.valueOf(ms), ms, message);
         } catch (IOException e) {
             throw new SkypeException("An exception occured while sending a message", e);
         }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
index afa9f97..ad484bc 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
@@ -1,5 +1,6 @@
 package com.samczsun.skype4j.internal;
 
+import com.samczsun.skype4j.formatting.Message;
 import org.jsoup.helper.Validate;
 
 import com.samczsun.skype4j.chat.Chat;
@@ -7,13 +8,13 @@
 import com.samczsun.skype4j.user.User;
 
 public abstract class ChatMessageImpl implements ChatMessage {
-    public static ChatMessage createMessage(Chat chat, User user, String id, String clientId, long time, String message) {
+    public static ChatMessage createMessage(Chat chat, User user, String id, String clientId, long time, Message message) {
         Validate.notNull(chat, "Chat must not be null");
-        Validate.isTrue(chat instanceof ChatImpl, "Chat must be instanceof WebChat");
-        Validate.notNull(chat, "User must not be null");
-        Validate.isTrue(user instanceof UserImpl, "User must be instanceof WebUser");
+        Validate.isTrue(chat instanceof ChatImpl, "Chat must be instanecof ChatImpl");
+        Validate.notNull(user, "User must not be null");
+        Validate.isTrue(user instanceof UserImpl, "User must be instanceof UserImpl");
         Validate.notEmpty(clientId, "ClientId must not be null");
-        Validate.notEmpty(message, "Message must not be null");
+        Validate.notNull(message, "Message must not be null");
         if (((ChatImpl) chat).getClient().getUsername().equals(user.getUsername())) {
             return new ChatMessageSelf(chat, user, id, clientId, time, message);
         } else {
@@ -21,5 +22,5 @@ public static ChatMessage createMessage(Chat chat, User user, String id, String
         }
     }
 
-    public abstract void setContent(String content);
+    public abstract void setContent(Message content);
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
index 04c6e0a..571cd2c 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
@@ -2,17 +2,18 @@
 
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.exceptions.SkypeException;
-import com.samczsun.skype4j.formatting.Text;
+import com.samczsun.skype4j.formatting.Message;
+import com.samczsun.skype4j.formatting.RichText;
 import com.samczsun.skype4j.user.User;
 
 public class ChatMessageOther extends ChatMessageImpl {
     private final String clientId;
     private final String id;
-    private String message;
+    private Message message;
     private final long time;
     private final User sender;
 
-    public ChatMessageOther(Chat chat, User user, String id, String clientId, long time, String message) {
+    public ChatMessageOther(Chat chat, User user, String id, String clientId, long time, Message message) {
         this.clientId = clientId;
         this.message = message;
         this.time = time;
@@ -26,7 +27,7 @@ public String getClientId() {
     }
 
     @Override
-    public String getText() {
+    public Message getMessage() {
         return message;
     }
 
@@ -41,7 +42,7 @@ public User getSender() {
     }
 
     @Override
-    public void edit(Text newMessage) {
+    public void edit(Message newMessage) {
         throw new UnsupportedOperationException();
     }
 
@@ -61,7 +62,7 @@ public String getId() {
     }
 
     @Override
-    public void setContent(String content) {
+    public void setContent(Message content) {
         this.message = content;
     }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
index 5045e8d..dd42c3d 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
@@ -8,17 +8,18 @@
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Message;
+import com.samczsun.skype4j.formatting.RichText;
 import com.samczsun.skype4j.formatting.Text;
 import com.samczsun.skype4j.user.User;
 
 public class ChatMessageSelf extends ChatMessageImpl {
     private final String clientId;
     private final String id;
-    private String message;
+    private Message message;
     private final long time;
     private final User sender;
 
-    public ChatMessageSelf(Chat chat, User user, String id, String clientId, long time, String message) {
+    public ChatMessageSelf(Chat chat, User user, String id, String clientId, long time, Message message) {
         this.clientId = clientId;
         this.message = message;
         this.time = time;
@@ -32,7 +33,7 @@ public String getClientId() {
     }
 
     @Override
-    public String getText() {
+    public Message getMessage() {
         return message;
     }
 
@@ -47,11 +48,11 @@ public User getSender() {
     }
 
     @Override
-    public void edit(Text newMessage) throws SkypeException {
+    public void edit(Message newMessage) throws SkypeException {
         HttpsURLConnection con = null;
         try {
             JsonObject obj = new JsonObject();
-            obj.add("content", newMessage.parent().write());
+            obj.add("content", newMessage.write());
             obj.add("messagetype", "RichText");
             obj.add("contenttype", "text");
             obj.add("skypeeditedid", this.clientId);
@@ -70,7 +71,7 @@ public void edit(Text newMessage) throws SkypeException {
 
     @Override
     public void delete() throws SkypeException {
-        edit(Message.text(""));
+        edit(Message.create().with(Text.BLANK));
     }
 
     @Override
@@ -84,7 +85,7 @@ public String getId() {
     }
 
     @Override
-    public void setContent(String content) {
+    public void setContent(Message content) {
         this.message = content;
     }
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/MessageType.java b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
index 10c7e3d..5c3b561 100644
--- a/src/main/java/com/samczsun/skype4j/internal/MessageType.java
+++ b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
@@ -7,6 +7,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import com.samczsun.skype4j.formatting.Message;
 import org.apache.commons.lang3.StringEscapeUtils;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
@@ -26,7 +27,7 @@
 import com.samczsun.skype4j.events.chat.user.UserAddEvent;
 import com.samczsun.skype4j.events.chat.user.UserRemoveEvent;
 import com.samczsun.skype4j.exceptions.SkypeException;
-import com.samczsun.skype4j.formatting.Text;
+import com.samczsun.skype4j.formatting.RichText;
 import com.samczsun.skype4j.user.User;
 import com.samczsun.skype4j.user.User.Role;
 
@@ -54,7 +55,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
                 String url = resource.get("conversationLink").asString();
                 Chat c = getChat(url, skype);
                 User u = getUser(from, c);
-                ChatMessage m = ChatMessageImpl.createMessage(c, u, id, clientId, System.currentTimeMillis(), stripMetadata(content));
+                ChatMessage m = ChatMessageImpl.createMessage(c, u, id, clientId, System.currentTimeMillis(), Message.fromHtml(stripMetadata(content)));
                 ((ChatImpl) c).onMessage(m);
                 MessageReceivedEvent evnt = new MessageReceivedEvent(m);
                 skype.getEventDispatcher().callEvent(evnt);
@@ -76,7 +77,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
                     if (m != null) {
                         MessageEditedEvent evnt = new MessageEditedEvent(m, content);
                         skype.getEventDispatcher().callEvent(evnt);
-                        ((ChatMessageImpl) m).setContent(content);
+                        ((ChatMessageImpl) m).setContent(Message.fromHtml(content));
                     } else {
                         faker = true;
                     }
@@ -84,19 +85,19 @@ public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException {
                     faker = true;
                 }
                 if (faker) {
-                    String originalContent = null;
+                    Message originalContent = null;
                     for (User user : c.getAllUsers()) {
                         if (user.getMessageById(clientId) != null) {
-                            originalContent = user.getMessageById(clientId).getText();
+                            originalContent = user.getMessageById(clientId).getMessage();
                         }
                     }
-                    final String finalOriginalContent = originalContent;
+                    final Message finalOriginalContent = originalContent;
                     MessageEditedByOtherEvent event = new MessageEditedByOtherEvent(new ChatMessage() {
                         public String getClientId() {
                             return clientId;
                         }
 
-                        public String getText() {
+                        public Message getMessage() {
                             return finalOriginalContent;
                         }
 
@@ -108,7 +109,7 @@ public User getSender() {
                             return u;
                         }
 
-                        public void edit(Text newMessage) throws SkypeException {
+                        public void edit(Message newMessage) throws SkypeException {
                             throw new UnsupportedOperationException();
                         }
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
index b7102b0..4401cb2 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
@@ -291,7 +291,7 @@ private JsonObject buildRegistrationObject() {
         JsonObject publicInfo = new JsonObject();
         publicInfo.add("capabilities", "video|audio");
         publicInfo.add("type", 1);
-        publicInfo.add("skypeNameVersion", "908/1.5.116/swx-skype.com");
+        publicInfo.add("skypeNameVersion", "908/1.6.0.286//skype.com");
         publicInfo.add("nodeInfo", "xx");
         publicInfo.add("version", "908/1.5.116");
         JsonObject privateInfo = new JsonObject();
diff --git a/src/test/java/com/samczsun/skype4j/MessageTest.java b/src/test/java/com/samczsun/skype4j/MessageTest.java
new file mode 100644
index 0000000..c515424
--- /dev/null
+++ b/src/test/java/com/samczsun/skype4j/MessageTest.java
@@ -0,0 +1,29 @@
+package com.samczsun.skype4j;
+
+import com.samczsun.skype4j.formatting.Message;
+import com.samczsun.skype4j.formatting.RichText;
+import com.samczsun.skype4j.formatting.Text;
+import org.jsoup.Jsoup;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.nodes.Node;
+import org.jsoup.nodes.TextNode;
+import org.jsoup.select.NodeVisitor;
+
+import java.awt.*;
+import java.util.Stack;
+
+/**
+ * Created by sam on 2015-07-09.
+ */
+public class MessageTest {
+    public static void main(String[] args) {
+        String text = "Hello";
+        Message parsed = Message.fromHtml(text);
+        if (!text.equalsIgnoreCase(parsed.toString())) {
+            System.out.println("FAILED");
+        } else {
+            System.out.println("yay");
+        }
+    }
+}
diff --git a/src/test/java/com/samczsun/skype4j/Test.java b/src/test/java/com/samczsun/skype4j/Test.java
index fb8df16..3514ef2 100644
--- a/src/test/java/com/samczsun/skype4j/Test.java
+++ b/src/test/java/com/samczsun/skype4j/Test.java
@@ -12,6 +12,7 @@
 import com.samczsun.skype4j.events.chat.user.MultiUserAddEvent;
 import com.samczsun.skype4j.events.chat.user.RoleUpdateEvent;
 import com.samczsun.skype4j.events.chat.user.UserAddEvent;
+import com.samczsun.skype4j.formatting.Message;
 import com.samczsun.skype4j.user.User;
 
 public class Test {
@@ -21,7 +22,7 @@ public static void main(String[] args) throws Exception {
         skype.getEventDispatcher().registerListener(new Listener() {
             @EventHandler
             public void onUserAdd(MessageReceivedEvent e) {
-                System.out.println("Got message " + e.getMessage().getText() + " in " + e.getChat().getIdentity());
+                System.out.println("Got message " + e.getMessage().getMessage() + " in " + e.getChat().getIdentity());
             }
 
             @EventHandler
@@ -53,12 +54,12 @@ public void onChatJoin(ChatJoinedEvent e) {
 
             @EventHandler
             public void onEdit(MessageEditedEvent e) {
-                System.out.println("Message " + e.getMessage().getText() + " edited to " + e.getNewContent());
+                System.out.println("Message " + e.getMessage().getMessage() + " edited to " + e.getNewContent());
             }
 
             @EventHandler
             public void onEdit(MessageEditedByOtherEvent e) {
-                System.out.println("Message " + e.getMessage().getText() + " edited by " + e.getMaliciousUser().getUsername() + "!");
+                System.out.println("Message " + e.getMessage().getMessage() + " edited by " + e.getMaliciousUser().getUsername() + "!");
             }
         });
         skype.subscribe();
