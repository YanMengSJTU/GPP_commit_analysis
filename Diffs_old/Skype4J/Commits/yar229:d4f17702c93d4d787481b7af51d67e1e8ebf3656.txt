diff --git a/src/main/java/com/samczsun/skype4j/events/chat/message/SmsReceivedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/message/SmsReceivedEvent.java
new file mode 100644
index 0000000..5fef92d
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/chat/message/SmsReceivedEvent.java
@@ -0,0 +1,9 @@
+package com.samczsun.skype4j.events.chat.message;
+
+import com.samczsun.skype4j.chat.ChatMessage;
+
+public class SmsReceivedEvent extends MessageReceivedEvent {
+    public SmsReceivedEvent(ChatMessage message) {
+        super(message);
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/sent/LocationReceivedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/sent/LocationReceivedEvent.java
new file mode 100644
index 0000000..8ec5682
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/events/chat/sent/LocationReceivedEvent.java
@@ -0,0 +1,96 @@
+package com.samczsun.skype4j.events.chat.sent;
+
+import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.events.chat.ChatEvent;
+import com.samczsun.skype4j.formatting.Message;
+import com.samczsun.skype4j.formatting.Text;
+import com.samczsun.skype4j.user.User;
+
+import javax.xml.bind.DatatypeConverter;
+import java.io.UnsupportedEncodingException;
+
+public class LocationReceivedEvent extends ChatEvent {
+    private User sender;
+    private LocationInfo info;
+
+    public LocationReceivedEvent(Chat chat, User sender, LocationInfo info) {
+        super(chat);
+        this.sender = sender;
+        this.info = info;
+    }
+
+    public User getSender() {
+        return this.sender;
+    }
+
+    public LocationInfo getLocation() {
+        return this.info;
+    }
+
+    public static class LocationInfo {
+        private String base64;
+        private String text;
+        private double latitude = Double.NaN;
+        private double longitude = Double.NaN;
+        private int zoomLevel = -1;
+        private String sty; //TODO what is this?
+        private String ss; //TODO what is this?
+        public LocationInfo(String parse, String text) throws IllegalArgumentException {
+            this.base64 = parse;
+            this.text = text;
+            try {
+                String[] args = new String(DatatypeConverter.parseBase64Binary(parse), "UTF-8").split("&");
+                for (String s : args) {
+                    String[] data = s.split("=");
+                    if (data[0].equalsIgnoreCase("cp")) {
+                        String[] coords = data[1].split("~");
+                        latitude = Double.parseDouble(coords[0]);
+                        longitude = Double.parseDouble(coords[1]);
+                    } else if (data[0].equalsIgnoreCase("lvl")) {
+                        zoomLevel = Integer.parseInt(data[1]);
+                    } else if (data[0].equalsIgnoreCase("sty")) {
+                        sty = data[1];
+                    } else if (data[0].equalsIgnoreCase("ss")) {
+                        ss = data[1];
+                    } else {
+                        throw new IllegalArgumentException("Unknown argument type " + data[0]);
+                    }
+                }
+
+                if (Double.isNaN(latitude) || Double.isNaN(longitude) || zoomLevel == -1 || sty == null || ss == null) {
+                    throw new IllegalArgumentException("Missing certain parameters in args");
+                }
+            } catch (UnsupportedEncodingException e) {
+                throw new IllegalArgumentException("UTF-8 is not supported by your Java installation");
+            }
+        }
+
+        public double getLatitude() {
+            return this.latitude;
+        }
+
+        public double getLongitude() {
+            return this.longitude;
+        }
+
+        public int getZoomLevel() {
+            return this.zoomLevel;
+        }
+
+        public String getSty() {
+            return this.sty;
+        }
+
+        public String getSs() {
+            return this.ss;
+        }
+
+        public String getText() {
+            return this.text;
+        }
+
+        public Message toMessage() {
+            return Message.create().with(Text.rich().withLink("https://www.bing.com/maps/" + this.base64).with(Text.plain(this.text)));
+        }
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/sent/MultiContactReceivedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/sent/MultiContactReceivedEvent.java
index 23f476e..867ce4c 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/sent/MultiContactReceivedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/sent/MultiContactReceivedEvent.java
@@ -6,6 +6,7 @@
 import com.samczsun.skype4j.user.User;
 
 import java.util.Iterator;
+<<<<<<< HEAD
 
 public class MultiContactReceivedEvent extends ChatEvent {
     private User sender;
@@ -13,6 +14,16 @@
 
     public MultiContactReceivedEvent(Chat chat, User sender, Iterable<Contact> sent) {
         super(chat);
+=======
+import java.util.List;
+
+public class MultiContactReceivedEvent extends ContactReceivedEvent {
+    private User sender;
+    private List<Contact> sentContacts;
+
+    public MultiContactReceivedEvent(Chat chat, User sender, List<Contact> sent) {
+        super(chat, sender, sent.get(0));
+>>>>>>> a23dcc18cd2d1774b1bd34a29eb3e5a9f18a854f
         this.sender = sender;
         this.sentContacts = sent;
     }
@@ -22,6 +33,7 @@ public User getSender()
         return this.sender;
     }
 
+<<<<<<< HEAD
     /*
     @Deprecated
     public Contact getSentContact()
@@ -31,6 +43,8 @@ public Contact getSentContact()
     }
     */
 
+=======
+>>>>>>> a23dcc18cd2d1774b1bd34a29eb3e5a9f18a854f
     public Iterable<Contact> getSentContacts()
     {
         return this.sentContacts;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/sent/TypingReceivedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/sent/TypingReceivedEvent.java
index a8a928b..ee25312 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/sent/TypingReceivedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/sent/TypingReceivedEvent.java
@@ -2,28 +2,27 @@
 
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.events.chat.ChatEvent;
-import com.samczsun.skype4j.user.Contact;
 import com.samczsun.skype4j.user.User;
 
 public class TypingReceivedEvent extends ChatEvent 
 {
     private User sender;
-	private boolean started;
+	private boolean typing;
 
-    public TypingReceivedEvent(Chat chat, User sender, boolean started) 
+    public TypingReceivedEvent(Chat chat, User sender, boolean typing)
 	{
         super(chat);
         this.sender = sender;
-		this.started = started;
+		this.typing = typing;
     }
 
     public User getSender()	{
         return this.sender;
     }
 
-	public boolean getStarted()
+	public boolean isTyping()
 	{
-		return this.started;
+		return this.typing;
 	}
 
 }
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
index 3dbef19..d332f9e 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
@@ -12,7 +12,6 @@ public static ChatMessage createMessage(Chat chat, User user, String id, String
         Validate.isTrue(chat instanceof ChatImpl, "Chat must be instanceof ChatImpl");
         Validate.notNull(user, "User must not be null");
         Validate.isTrue(user instanceof UserImpl, "User must be instanceof UserImpl");
-        Validate.notEmpty(clientId, "ClientId must not be null");
         Validate.notNull(message, "Message must not be null");
         if (((ChatImpl) chat).getClient().getUsername().equals(user.getUsername())) {
             return new ChatMessageSelf(chat, user, id, clientId, time, message);
diff --git a/src/main/java/com/samczsun/skype4j/internal/MessageType.java b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
index 758a5d1..04e9ae6 100644
--- a/src/main/java/com/samczsun/skype4j/internal/MessageType.java
+++ b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
@@ -13,6 +13,10 @@
 import com.samczsun.skype4j.events.chat.message.MessageEditedByOtherEvent;
 import com.samczsun.skype4j.events.chat.message.MessageEditedEvent;
 import com.samczsun.skype4j.events.chat.message.MessageReceivedEvent;
+<<<<<<< HEAD
+=======
+import com.samczsun.skype4j.events.chat.message.SmsReceivedEvent;
+>>>>>>> a23dcc18cd2d1774b1bd34a29eb3e5a9f18a854f
 import com.samczsun.skype4j.events.chat.sent.*;
 import com.samczsun.skype4j.events.chat.call.CallReceivedEvent;
 import com.samczsun.skype4j.events.chat.user.MultiUserAddEvent;
@@ -146,8 +150,7 @@ public String getId() {
     },
     RICH_TEXT_CONTACTS("RichText/Contacts") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException 
-		{
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
             String from = resource.get("from").asString();
             String url = resource.get("conversationLink").asString();
             String content = resource.get("content").asString();
@@ -167,7 +170,11 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
 
             ChatImpl c = (ChatImpl) getChat(url, skype);
             User u = getUser(from, c);
+<<<<<<< HEAD
             ChatEvent event = contacts.size() == 1 ? new ContactReceivedEvent(c, u, contacts.get(0)) : new MultiContactReceivedEvent(c, u, contacts);
+=======
+            ContactReceivedEvent event = contacts.size() == 1 ? new ContactReceivedEvent(c, u, contacts.get(0)) : new MultiContactReceivedEvent(c, u, contacts);
+>>>>>>> a23dcc18cd2d1774b1bd34a29eb3e5a9f18a854f
             skype.getEventDispatcher().callEvent(event);
         }
     },
@@ -201,16 +208,39 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
     },
     RICH_TEXT_SMS("RichText/Sms") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) {
-            System.out.println(name() + " " + resource);
-            skype.getEventDispatcher().callEvent(new UnsupportedEvent(name(), resource.toString()));
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException { //Implemented via fullExperience
+            String content = resource.get("content").asString();
+            String from = resource.get("from").asString();
+            String url = resource.get("conversationLink").asString();
+            Chat c = getChat(url, skype);
+            User u = getUser(from, c);
+            Matcher m = SMS_PATTERN.matcher(content);
+            if (m.find()) {
+                String message = m.group(1);
+                ChatMessage chatmessage = ChatMessageImpl.createMessage(c, u, null, null, System.currentTimeMillis(), Message.fromHtml(message)); //No clientmessageid?
+                SmsReceivedEvent event = new SmsReceivedEvent(chatmessage);
+                skype.getEventDispatcher().callEvent(event);
+            } else {
+                throw new IllegalArgumentException("Sms event did not conform to format expected");
+            }
         }
     },
     RICH_TEXT_LOCATION("RichText/Location") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) {
-            System.out.println(name() + " " + resource);
-            skype.getEventDispatcher().callEvent(new UnsupportedEvent(name(), resource.toString()));
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException { //Implemented via fullExperience
+            String content = resource.get("content").asString();
+            String from = resource.get("from").asString();
+            String url = resource.get("conversationLink").asString();
+            Chat c = getChat(url, skype);
+            User u = getUser(from, c);
+            Matcher m = LOCATION_PATTERN.matcher(content);
+            if (m.find()) {
+                String location = m.group(1);
+                String text = m.group(2);
+                LocationReceivedEvent event = new LocationReceivedEvent(c, u, new LocationReceivedEvent.LocationInfo(location, text));
+            } else {
+                throw new IllegalArgumentException("Location event did not conform to format expected");
+            }
         }
     },
     RICH_TEXT_URI_OBJECT("RichText/UriObject") {
@@ -394,8 +424,7 @@ public void handle(SkypeImpl skype, JsonObject resource) {
     },
     EVENT_CALL("Event/Call") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException
-		{
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
             System.out.println(name() + " " + resource);
 
             String from = resource.get("from").asString();
@@ -414,30 +443,28 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
     },
     CONTROL_TYPING("Control/Typing") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException
-		{
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
             System.out.println(name() + " " + resource);
 
             String from = resource.get("from").asString();
             String url = resource.get("conversationLink").asString();
 
-            ChatImpl c = (ChatImpl) getChat(url, skype);
+            Chat c = getChat(url, skype);
             User u = getUser(from, c);
-            TypingReceivedEvent event = new TypingReceivedEvent(c, u, true); //, skype.getOrLoadContact(username));
+            TypingReceivedEvent event = new TypingReceivedEvent(c, u, true);
 			skype.getEventDispatcher().callEvent(event);
 		}
     },
     CONTROL_CLEAR_TYPING("Control/ClearTyping") {
         @Override
 		//YaR
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException 
-		{
+        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException {
             String from = resource.get("from").asString();
             String url = resource.get("conversationLink").asString();
 
-            ChatImpl c = (ChatImpl) getChat(url, skype);
+            Chat c = getChat(url, skype);
             User u = getUser(from, c);
-            TypingReceivedEvent event = new TypingReceivedEvent(c, u, false); //, skype.getOrLoadContact(username));
+            TypingReceivedEvent event = new TypingReceivedEvent(c, u, false);
 			skype.getEventDispatcher().callEvent(event);
 		}
     },
@@ -450,12 +477,14 @@ public void handle(SkypeImpl skype, JsonObject resource) {
     };
 
     private static final Map<String, MessageType> byValue = new HashMap<>();
-    private static final Pattern URL_PATTERN = Pattern.compile("conversations/(.*)");
-    private static final Pattern USER_PATTERN = Pattern.compile("8:(.*)");
-    private static final Pattern STRIP_EDIT_PATTERN = Pattern.compile("</?[e_m][^<>]+>");
+    private static final Pattern URL_PATTERN = Pattern.compile("conversations/(.*)", Pattern.CASE_INSENSITIVE);
+    private static final Pattern USER_PATTERN = Pattern.compile("8:(.*)", Pattern.CASE_INSENSITIVE);
+    private static final Pattern STRIP_EDIT_PATTERN = Pattern.compile("</?[e_m][^<>]+>", Pattern.CASE_INSENSITIVE);
     private static final Pattern STRIP_QUOTE_PATTERN = Pattern.compile("(<(?:/?)(?:quote|legacyquote)[^>]*>)", Pattern.CASE_INSENSITIVE);
     private static final Pattern STRIP_EMOTICON_PATTERN = Pattern.compile("(<(?:/?)(?:ss)[^>]*>)", Pattern.CASE_INSENSITIVE);
-    private static final Pattern CONTACT_PATTERN = Pattern.compile("(<c t=\"([^\"]+?)\"( p=\"([^\"]+?)\")?( s=\"([^\"]+?)\")?( f=\"([^\"]+?)\")? */>)");
+    private static final Pattern CONTACT_PATTERN = Pattern.compile("(<c t=\"([^\"]+?)\"( p=\"([^\"]+?)\")?( s=\"([^\"]+?)\")?( f=\"([^\"]+?)\")? */>)", Pattern.CASE_INSENSITIVE);
+    private static final Pattern SMS_PATTERN = Pattern.compile("<sms alt=\"([^\"]+?)\">", Pattern.CASE_INSENSITIVE);
+    private static final Pattern LOCATION_PATTERN = Pattern.compile("<a[^>]+href=\"https://www.bing.com/maps([^\"]+)\"[^>]*>([^<]*)", Pattern.CASE_INSENSITIVE);
 
     private static final String PICTURE_URL = "https://api.asm.skype.com/v1/objects/%s/views/imgpsh_fullsize";
     private static final String PICTURE_STATUS_URL = "https://api.asm.skype.com/v1/objects/%s/views/imgpsh_fullsize/status";
