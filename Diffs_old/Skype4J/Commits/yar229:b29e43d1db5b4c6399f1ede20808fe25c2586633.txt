diff --git a/LICENCE b/LICENSE
similarity index 100%
rename from LICENCE
rename to LICENSE
diff --git a/README.md b/README.md
index 359601b..9357b4e 100644
--- a/README.md
+++ b/README.md
@@ -2,8 +2,6 @@
 
 This is a Skype API for Java. It does not support P2P chats. You can tell whether you're in a P2P chat or not based on the output of the `/help` command. If it contains commands such as `/kickban`, you're in a P2P chat and should switch to cloud chats immediately (try using `/fork`)
 
-This is also very much a work in progress. As such, API methods are not guarenteed to remain the same. However, if you stay out of the `com.samczsun.skype4j.internal` package you should be good
-
 Here is an example of this API in action
 
 ```java
@@ -20,14 +18,9 @@ skype.logout();
 ```
 ## Maven
 
-Maven is used for dependency management and deployment. To build with this project as a dependency, you must add the following repository to your POM
+Maven is used for dependency management and deployment. In the near future this project will be added into the central repository.
 
-```
-<repository>
-  <id>samczsun-repo</id>
-  <url>http://r.zk.ms/content/repositories/snapshots</url>
-</repository>
-```
+In the meantime, please clone this project and install it locally.
 
 Then add the following dependency
 
@@ -35,10 +28,14 @@ Then add the following dependency
 <dependency>
   <groupId>com.samczsun</groupId>
   <artifactId>skype4j</artifactId>
-  <version>0.0.8-SNAPSHOT</version>
+  <version>0.0.9-SNAPSHOT</version>
 </dependency>
 ```
 
 ## Licensing
 
 This project is licensed under the GPLv3 licence
+
+## Contributing
+
+If you want to help out, thanks a lot! Please make sure you license your contributions under the GPLv3 license though.
diff --git a/pom.xml b/pom.xml
index 3e32e3c..8ab263c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -39,20 +39,29 @@
     </build>
     <dependencies>
         <dependency>
+            <!-- For parsing Skype responses and HTML nodes -->
             <groupId>org.jsoup</groupId>
             <artifactId>jsoup</artifactId>
             <version>1.8.2</version>
         </dependency>
         <dependency>
-            <groupId>org.apache.commons</groupId>
-            <artifactId>commons-lang3</artifactId>
-            <version>3.4</version>
+            <!-- For unescaping HTML from Skype and users -->
+            <groupId>org.unbescape</groupId>
+            <artifactId>unbescape</artifactId>
+            <version>1.1.1.RELEASE</version>
         </dependency>
         <dependency>
+            <!-- For communication with Skype -->
             <groupId>com.eclipsesource.minimal-json</groupId>
             <artifactId>minimal-json</artifactId>
             <version>0.9.1</version>
         </dependency>
+        <dependency>
+            <!-- For communication with Skype -->
+            <groupId>org.java-websocket</groupId>
+            <artifactId>Java-WebSocket</artifactId>
+            <version>1.3.0</version>
+        </dependency>
         <dependency>
             <groupId>org.mockito</groupId>
             <artifactId>mockito-all</artifactId>
@@ -66,16 +75,4 @@
             <scope>test</scope>
         </dependency>
     </dependencies>
-    <distributionManagement>
-        <repository>
-            <id>deployment</id>
-            <name>Public Releases</name>
-            <url>http://r.zk.ms/content/repositories/releases/</url>
-        </repository>
-        <snapshotRepository>
-            <id>deployment</id>
-            <name>Public Snapshots</name>
-            <url>http://r.zk.ms/content/repositories/snapshots/</url>
-        </snapshotRepository>
-    </distributionManagement>
 </project>
\ No newline at end of file
diff --git a/src/main/java/com/samczsun/skype4j/chat/Chat.java b/src/main/java/com/samczsun/skype4j/chat/Chat.java
index aef6c72..05e7845 100644
--- a/src/main/java/com/samczsun/skype4j/chat/Chat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/Chat.java
@@ -18,13 +18,12 @@
 package com.samczsun.skype4j.chat;
 
 import com.samczsun.skype4j.Skype;
+import com.samczsun.skype4j.chat.messages.ChatMessage;
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.NotLoadedException;
-import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Message;
 import com.samczsun.skype4j.user.User;
 
-import java.io.IOException;
 import java.util.Collection;
 import java.util.List;
 
@@ -36,12 +35,21 @@
      * Sends a formatted message to this chat.
      *
      * @param message The rich text to send
-     * @return The {@link ChatMessage ChatMessage} object representing the message
+     * @return The {@link ChatMessage} object representing the message
      * @throws ConnectionException If an error occurs while connecting to the endpoint
-     * @throws IOException If an unexpected error occurs
-     * @throws NotLoadedException If the chat has not yet been loaded
+     * @throws NotLoadedException  If the chat has not yet been loaded
+     */
+    ChatMessage sendMessage(Message message) throws ConnectionException;
+
+    /**
+     * Sends a plain message to this chat.
+     *
+     * @param plainMessage The plain message to send
+     * @return The {@link ChatMessage} object representing the message
+     * @throws ConnectionException If an error occurs while connecting to the endpoint
+     * @throws NotLoadedException  If the chat has not yet been loaded
      */
-    ChatMessage sendMessage(Message message) throws ConnectionException, IOException;
+    ChatMessage sendMessage(String plainMessage) throws ConnectionException;
 
     /**
      * Get the {@link User} object represented by that username. Usernames are case insensitive
diff --git a/src/main/java/com/samczsun/skype4j/chat/FileInfo.java b/src/main/java/com/samczsun/skype4j/chat/FileInfo.java
deleted file mode 100644
index d6dc28a..0000000
--- a/src/main/java/com/samczsun/skype4j/chat/FileInfo.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.samczsun.skype4j.chat;
-
-/**
- * Created by RMYakimenko on 20.08.2015.
- */
-public class FileInfo
-{
-    private final String originalName;
-    private final Long fileSize;
-    private final Long tId;
-    private final boolean cancelled;
-
-    public FileInfo(String originalName, Long fileSize, Long tId, boolean cancelled)
-    {
-        this.originalName = originalName;
-        this.fileSize = fileSize;
-        this.tId = tId;
-        this.cancelled = cancelled;
-    }
-
-    public String getOriginalName() {return originalName;}
-    public Long getFileSize() {return fileSize;}
-    public Long getTId() {return tId;}
-    public boolean getCancelled() {return cancelled;}
-}
diff --git a/src/main/java/com/samczsun/skype4j/chat/GroupChat.java b/src/main/java/com/samczsun/skype4j/chat/GroupChat.java
index ac85b3a..ea26515 100644
--- a/src/main/java/com/samczsun/skype4j/chat/GroupChat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/GroupChat.java
@@ -22,8 +22,6 @@
 import com.samczsun.skype4j.exceptions.NotLoadedException;
 import com.samczsun.skype4j.user.Contact;
 
-import java.io.IOException;
-
 /**
  * Represents a group chat with one or more people
  */
@@ -43,7 +41,7 @@
      * @throws ConnectionException If an error occurs while connecting to the endpoint
      * @throws NotLoadedException If the chat is not yet loaded
      */
-    void setTopic(String topic) throws ConnectionException, IOException;
+    void setTopic(String topic) throws ConnectionException;
 
     /**
      * Get whether an option is enabled.
@@ -63,7 +61,7 @@
      * @throws ConnectionException If an error occurs while connecting to the endpoint
      * @throws NotLoadedException If the chat is not yet loaded
      */
-    void setOptionEnabled(OptionUpdateEvent.Option option, boolean enabled) throws ConnectionException, IOException;
+    void setOptionEnabled(OptionUpdateEvent.Option option, boolean enabled) throws ConnectionException;
 
     /**
      * Add a contact into this chat. This will occur in real time
@@ -72,7 +70,7 @@
      * @throws ConnectionException If an error occurs while connecting to the endpoint
      * @throws NotLoadedException If the chat is not yet loaded
      */
-    void add(Contact contact) throws ConnectionException, IOException;
+    void add(Contact contact) throws ConnectionException;
 
     /**
      * Kick a user from this chat. This will occur in real time.
@@ -81,7 +79,7 @@
      * @throws ConnectionException If an error occurs while connecting to the endpoint
      * @throws NotLoadedException If the chat is not yet loaded
      */
-    void kick(String username) throws ConnectionException, IOException;
+    void kick(String username) throws ConnectionException;
 
     /**
      * Leave the chat. This will occur in real time.
@@ -89,7 +87,7 @@
      * @throws ConnectionException If an error occurs while connecting to the endpoint
      * @throws NotLoadedException If the chat is not yet loaded
      */
-    void leave() throws ConnectionException, IOException;
+    void leave() throws ConnectionException;
 
     /**
      * Gets the join url for people to join.
@@ -99,5 +97,5 @@
      * @throws NotLoadedException If the chat is not yet loaded
      * @throws IllegalStateException If joining is not enabled
      */
-    String getJoinUrl() throws ConnectionException, IOException;
+    String getJoinUrl() throws ConnectionException;
 }
diff --git a/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java b/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java
index a0aada9..58a9f84 100644
--- a/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java
+++ b/src/main/java/com/samczsun/skype4j/chat/IndividualChat.java
@@ -22,8 +22,6 @@
 /**
  * Represents a private conversation between the user logged in and one other
  * user
- *
- * @author samczsun
  */
 public interface IndividualChat extends Chat {
     /**
diff --git a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java b/src/main/java/com/samczsun/skype4j/chat/messages/ChatMessage.java
similarity index 77%
rename from src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
rename to src/main/java/com/samczsun/skype4j/chat/messages/ChatMessage.java
index d58595c..5b7cf57 100644
--- a/src/main/java/com/samczsun/skype4j/chat/ChatMessage.java
+++ b/src/main/java/com/samczsun/skype4j/chat/messages/ChatMessage.java
@@ -15,8 +15,10 @@
  * If not, see http://www.gnu.org/licenses/.
  */
 
-package com.samczsun.skype4j.chat;
+package com.samczsun.skype4j.chat.messages;
 
+import com.samczsun.skype4j.Skype;
+import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.formatting.Message;
 import com.samczsun.skype4j.user.User;
 
@@ -26,7 +28,7 @@
 public interface ChatMessage {
 
     /**
-     * Get the message object sent or received
+     * Get the message object associated with this ChatMessage
      *
      * @return The message
      */
@@ -37,26 +39,33 @@
      *
      * @return The time
      */
-    long getTime();
+    long getSentTime();
 
     /**
-     * Get the user that sent this message
+     * Get the person who sent this message
      *
-     * @return The user
+     * @return The user who sent this message
      */
     User getSender();
 
     /**
-     * Get the chat this message was sent in. See {@link User#getChat() User#getChat()}
+     * Get the chat this message was sent in. See {@link User#getChat()}
      *
      * @return The chat that the user belongs to
      */
     Chat getChat();
 
+    /**
+     * Get the {@link Skype} instance associated with this chat
+     *
+     * @return The Skype instance
+     */
+    Skype getClient();
+
     /**
      * Get the ID assigned to this message by the client. This is not guarenteed to be unique
      *
-     * @return The ID
+     * @return The ClientID
      */
     String getClientId();
 
diff --git a/src/main/java/com/samczsun/skype4j/chat/ReceivedMessage.java b/src/main/java/com/samczsun/skype4j/chat/messages/ReceivedMessage.java
similarity index 83%
rename from src/main/java/com/samczsun/skype4j/chat/ReceivedMessage.java
rename to src/main/java/com/samczsun/skype4j/chat/messages/ReceivedMessage.java
index e392c8a..f8945a7 100644
--- a/src/main/java/com/samczsun/skype4j/chat/ReceivedMessage.java
+++ b/src/main/java/com/samczsun/skype4j/chat/messages/ReceivedMessage.java
@@ -15,13 +15,12 @@
  * If not, see http://www.gnu.org/licenses/.
  */
 
-package com.samczsun.skype4j.chat;
+package com.samczsun.skype4j.chat.messages;
+
+import com.samczsun.skype4j.user.User;
 
 /**
- * Represents a message you received
- *
- * @author samczsun
+ * Represents a message that was received
  */
 public interface ReceivedMessage extends ChatMessage {
-    // There's not much you can do with someone else's message
 }
diff --git a/src/main/java/com/samczsun/skype4j/chat/SentMessage.java b/src/main/java/com/samczsun/skype4j/chat/messages/SentMessage.java
similarity index 71%
rename from src/main/java/com/samczsun/skype4j/chat/SentMessage.java
rename to src/main/java/com/samczsun/skype4j/chat/messages/SentMessage.java
index 857586c..0b404ad 100644
--- a/src/main/java/com/samczsun/skype4j/chat/SentMessage.java
+++ b/src/main/java/com/samczsun/skype4j/chat/messages/SentMessage.java
@@ -15,15 +15,13 @@
  * If not, see http://www.gnu.org/licenses/.
  */
 
-package com.samczsun.skype4j.chat;
+package com.samczsun.skype4j.chat.messages;
 
-import com.samczsun.skype4j.exceptions.SkypeException;
+import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.formatting.Message;
 
 /**
  * Represents a message you sent
- *
- * @author samczsun
  */
 public interface SentMessage extends ChatMessage {
 
@@ -31,14 +29,14 @@
      * Edit this message
      *
      * @param newMessage The message to edit it to
-     * @throws SkypeException If something goes wrong during the editing
+     * @throws ConnectionException If an exception occurs while connecting to the endpoint
      */
-    void edit(Message newMessage) throws SkypeException;
+    void edit(Message newMessage) throws ConnectionException;
 
     /**
      * Delete this message
      *
-     * @throws SkypeException If something goes wrong while deleting
+     * @throws ConnectionException If an exception occurs while connecting to the endpoint
      */
-    void delete() throws SkypeException;
+    void delete() throws ConnectionException;
 }
diff --git a/src/main/java/com/samczsun/skype4j/chat/objects/ReceivedFile.java b/src/main/java/com/samczsun/skype4j/chat/objects/ReceivedFile.java
new file mode 100644
index 0000000..9da7517
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/chat/objects/ReceivedFile.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.chat.objects;
+
+/**
+ * Represents a file which has been sent by a user in the chat
+ * Note that downloading files is not supported on Skype for Web, even if the chat is cloud-based
+ */
+public interface ReceivedFile {
+
+    /**
+     * Get the name of the file which has been sent
+     * @return The name of the file
+     */
+    String getName();
+
+    /**
+     * Get the size of the file
+     * @return The filesize
+     */
+    long getSize();
+
+    /**
+     * Get the tid. Not sure what this does
+     * @return
+     */
+    long getTid();
+}
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedByOtherEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedByOtherEvent.java
index d259cc0..b668760 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedByOtherEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedByOtherEvent.java
@@ -17,7 +17,7 @@
 
 package com.samczsun.skype4j.events.chat.message;
 
-import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.chat.messages.ChatMessage;
 import com.samczsun.skype4j.user.User;
 
 public class MessageEditedByOtherEvent extends MessageEvent {
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java
index 8c5ef06..4a53743 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEditedEvent.java
@@ -17,7 +17,7 @@
 
 package com.samczsun.skype4j.events.chat.message;
 
-import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.chat.messages.ChatMessage;
 
 public class MessageEditedEvent extends MessageEvent {
     private final String newContent;
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEvent.java
index 09c132e..22f76c7 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageEvent.java
@@ -17,7 +17,7 @@
 
 package com.samczsun.skype4j.events.chat.message;
 
-import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.chat.messages.ChatMessage;
 import com.samczsun.skype4j.events.chat.ChatEvent;
 
 public abstract class MessageEvent extends ChatEvent {
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageReceivedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageReceivedEvent.java
index 4e3cfbe..ccd0cf4 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/message/MessageReceivedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/message/MessageReceivedEvent.java
@@ -17,10 +17,15 @@
 
 package com.samczsun.skype4j.events.chat.message;
 
-import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.chat.messages.ReceivedMessage;
 
 public class MessageReceivedEvent extends MessageEvent {
-    public MessageReceivedEvent(ChatMessage message) {
+    public MessageReceivedEvent(ReceivedMessage message) {
         super(message);
     }
+
+    @Override
+    public ReceivedMessage getMessage() {
+        return (ReceivedMessage) super.getMessage();
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/message/SmsReceivedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/message/SmsReceivedEvent.java
index 5791da3..2ed4e07 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/message/SmsReceivedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/message/SmsReceivedEvent.java
@@ -17,10 +17,10 @@
 
 package com.samczsun.skype4j.events.chat.message;
 
-import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.chat.messages.ReceivedMessage;
 
 public class SmsReceivedEvent extends MessageReceivedEvent {
-    public SmsReceivedEvent(ChatMessage message) {
+    public SmsReceivedEvent(ReceivedMessage message) {
         super(message);
     }
 }
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/sent/FileInfoReceivedEvent.java b/src/main/java/com/samczsun/skype4j/events/chat/sent/FileReceivedEvent.java
similarity index 73%
rename from src/main/java/com/samczsun/skype4j/events/chat/sent/FileInfoReceivedEvent.java
rename to src/main/java/com/samczsun/skype4j/events/chat/sent/FileReceivedEvent.java
index fc9ccba..c763c15 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/sent/FileInfoReceivedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/chat/sent/FileReceivedEvent.java
@@ -18,26 +18,27 @@
 package com.samczsun.skype4j.events.chat.sent;
 
 import com.samczsun.skype4j.chat.Chat;
-import com.samczsun.skype4j.chat.FileInfo;
+import com.samczsun.skype4j.chat.objects.ReceivedFile;
 import com.samczsun.skype4j.events.chat.ChatEvent;
 import com.samczsun.skype4j.user.User;
 
-import java.awt.image.BufferedImage;
+import java.util.List;
 
-public class FileInfoReceivedEvent extends ChatEvent
-{
+public class FileReceivedEvent extends ChatEvent {
     private User sender;
-    private Iterable<FileInfo> sentFileInfos;
+    private List<ReceivedFile> files;
 
-    public FileInfoReceivedEvent(Chat chat, User sender, Iterable<FileInfo> sent) {
+    public FileReceivedEvent(Chat chat, User sender, List<ReceivedFile> files) {
         super(chat);
         this.sender = sender;
-        this.sentFileInfos = sent;
+        this.files = files;
     }
 
     public User getSender() {
         return this.sender;
     }
 
-    public Iterable<FileInfo> getSentFiles() { return this.sentFileInfos; }
+    public List<ReceivedFile> getSentFiles() {
+        return this.files;
+    }
 }
diff --git a/src/main/java/com/samczsun/skype4j/events/chat/DisconnectedEvent.java b/src/main/java/com/samczsun/skype4j/events/contact/ContactRequestEvent.java
similarity index 69%
rename from src/main/java/com/samczsun/skype4j/events/chat/DisconnectedEvent.java
rename to src/main/java/com/samczsun/skype4j/events/contact/ContactRequestEvent.java
index 49da4ff..69072b7 100644
--- a/src/main/java/com/samczsun/skype4j/events/chat/DisconnectedEvent.java
+++ b/src/main/java/com/samczsun/skype4j/events/contact/ContactRequestEvent.java
@@ -15,20 +15,19 @@
  * If not, see http://www.gnu.org/licenses/.
  */
 
-package com.samczsun.skype4j.events.chat;
+package com.samczsun.skype4j.events.contact;
 
 import com.samczsun.skype4j.events.Event;
+import com.samczsun.skype4j.user.ContactRequest;
 
-import java.io.IOException;
+public class ContactRequestEvent extends Event {
+    private ContactRequest request;
 
-public class DisconnectedEvent extends Event {
-    private final IOException cause;
-
-    public DisconnectedEvent(IOException cause) {
-        this.cause = cause;
+    public ContactRequestEvent(ContactRequest request) {
+        this.request = request;
     }
 
-    public IOException getCause() {
-        return this.cause;
+    public ContactRequest getRequest() {
+        return this.request;
     }
 }
diff --git a/src/main/java/com/samczsun/skype4j/formatting/Text.java b/src/main/java/com/samczsun/skype4j/formatting/Text.java
index 5bd2b25..4f38bd5 100644
--- a/src/main/java/com/samczsun/skype4j/formatting/Text.java
+++ b/src/main/java/com/samczsun/skype4j/formatting/Text.java
@@ -17,7 +17,7 @@
 
 package com.samczsun.skype4j.formatting;
 
-import org.apache.commons.lang3.StringEscapeUtils;
+import org.unbescape.html.HtmlEscape;
 
 /**
  * Created by sam on 2015-07-09.
@@ -33,7 +33,7 @@ public static RichText rich() {
     }
 
     public static PlainText plain(String text) {
-        return new PlainText(StringEscapeUtils.escapeHtml4(text));
+        return new PlainText(HtmlEscape.escapeHtml5(text));
     }
 
     public static PlainText plain(byte text) {
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java b/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
deleted file mode 100644
index a9f0d02..0000000
--- a/src/main/java/com/samczsun/skype4j/internal/ChatGroup.java
+++ /dev/null
@@ -1,229 +0,0 @@
-/*
- * Copyright 2015 Sam Sun <me@samczsun.com>
- *
- * This file is part of Skype4J.
- *
- * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
- * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
- * version.
- *
- * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
- * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
- * License for more details.
- *
- * You should have received a copy of the GNU General Public License along with Skype4J.
- * If not, see http://www.gnu.org/licenses/.
- */
-
-package com.samczsun.skype4j.internal;
-
-import com.eclipsesource.json.JsonArray;
-import com.eclipsesource.json.JsonObject;
-import com.eclipsesource.json.JsonValue;
-import com.samczsun.skype4j.chat.GroupChat;
-import com.samczsun.skype4j.events.chat.user.action.OptionUpdateEvent;
-import com.samczsun.skype4j.exceptions.ChatNotFoundException;
-import com.samczsun.skype4j.exceptions.ConnectionException;
-import com.samczsun.skype4j.exceptions.NotParticipatingException;
-import com.samczsun.skype4j.user.Contact;
-import com.samczsun.skype4j.user.User;
-import com.samczsun.skype4j.user.User.Role;
-
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.net.HttpURLConnection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-
-public class ChatGroup extends ChatImpl implements GroupChat {
-    private String topic;
-    private String pictureUrl;
-    private Set<OptionUpdateEvent.Option> enabledOptions = new HashSet<>();
-
-    protected ChatGroup(SkypeImpl skype, String identity) throws ConnectionException, ChatNotFoundException, IOException {
-        super(skype, identity);
-    }
-
-    protected void load() throws ConnectionException, ChatNotFoundException, IOException {
-        if (isLoaded()) {
-            return;
-        }
-        isLoading.set(true);
-        Map<String, User> newUsers = new HashMap<>();
-
-        ConnectionBuilder builder = new ConnectionBuilder();
-        builder.setUrl(getClient().withCloud(CHAT_INFO_URL, getIdentity()));
-        builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
-        builder.addHeader("Content-Type", "application/json");
-        HttpURLConnection con = builder.build();
-
-        if (con.getResponseCode() == 404) {
-            throw new ChatNotFoundException();
-        }
-        if (con.getResponseCode() != 200) {
-            throw getClient().generateException("While loading users", con);
-        }
-        JsonObject object = JsonObject.readFrom(new InputStreamReader(con.getInputStream()));
-        JsonObject props = object.get("properties").asObject();
-        for (OptionUpdateEvent.Option option : OptionUpdateEvent.Option.values()) {
-            if (props.get(option.getId()) != null && props.get(option.getId()).equals("true")) {
-                this.enabledOptions.add(option);
-            }
-        }
-        if (props.get("topic") != null) {
-            this.topic = props.get("topic").asString();
-        } else {
-            this.topic = "";
-        }
-        JsonArray members = object.get("members").asArray();
-        for (JsonValue element : members) {
-            String username = element.asObject().get("id").asString().substring(2);
-            String role = element.asObject().get("role").asString();
-            User user = users.get(username.toLowerCase());
-            if (user == null) {
-                user = new UserImpl(username, this);
-            }
-            newUsers.put(username.toLowerCase(), user);
-            if (role.equalsIgnoreCase("admin")) {
-                user.setRole(Role.ADMIN);
-            } else {
-                user.setRole(Role.USER);
-            }
-        }
-
-        if (newUsers.get(getClient().getUsername().toLowerCase()) == null) {
-            throw new NotParticipatingException();
-        }
-
-        this.users.clear();
-        this.users.putAll(newUsers);
-        hasLoaded.set(true);
-        isLoading.set(false);
-    }
-
-    public void addUser(String username) throws ConnectionException, IOException {
-        if (!users.containsKey(username.toLowerCase())) {
-            User user = new UserImpl(username, this);
-            users.put(username.toLowerCase(), user);
-        } else if (!username.equalsIgnoreCase(getClient().getUsername())) { //Skype...
-            throw new IllegalArgumentException(username + " joined the chat even though he was already in it?");
-        }
-    }
-
-    public void removeUser(String username) {
-        users.remove(username.toLowerCase());
-    }
-
-    public void kick(String username) throws ConnectionException, IOException {
-        checkLoaded();
-        ConnectionBuilder builder = new ConnectionBuilder();
-        builder.setUrl(getClient().withCloud(MODIFY_MEMBER_URL, getIdentity(), username));
-        builder.setMethod("DELETE", false);
-        builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
-        HttpURLConnection con = builder.build();
-        if (con.getResponseCode() != 200) {
-            throw getClient().generateException("While kicking user", con);
-        }
-    }
-
-    public void leave() throws ConnectionException, IOException {
-        kick(getClient().getUsername());
-    }
-
-    @Override
-    public String getJoinUrl() throws ConnectionException, IOException {
-        checkLoaded();
-        if (isOptionEnabled(OptionUpdateEvent.Option.JOINING_ENABLED)) {
-            JsonObject data = new JsonObject();
-            data.add("baseDomain", "https://join.skype.com/launch/");
-            data.add("threadId", this.getIdentity());
-            ConnectionBuilder builder = new ConnectionBuilder();
-            builder.setUrl(GET_JOIN_URL);
-            builder.setMethod("POST", true);
-            builder.addHeader("X-Skypetoken", getClient().getSkypeToken());
-            builder.addHeader("Content-Type", "application/json");
-            builder.setData(data.toString());
-            HttpURLConnection con = builder.build();
-            if (con.getResponseCode() != 200) {
-                throw getClient().generateException("While getting join URL", con);
-            }
-            JsonObject object = JsonObject.readFrom(new InputStreamReader(con.getInputStream()));
-            return object.get("JoinUrl").asString();
-        } else {
-            throw new IllegalStateException("Joining is not enabled");
-        }
-    }
-
-    @Override
-    public String getTopic() {
-        checkLoaded();
-        return this.topic;
-    }
-
-    public void setTopic(String topic) throws ConnectionException, IOException  {
-        checkLoaded();
-        putOption("topic", JsonValue.valueOf(topic));
-    }
-
-    @Override
-    public boolean isOptionEnabled(OptionUpdateEvent.Option option) {
-        checkLoaded();
-        return this.enabledOptions.contains(option);
-    }
-
-    @Override
-    public void setOptionEnabled(OptionUpdateEvent.Option option, boolean enabled) throws ConnectionException, IOException {
-        checkLoaded();
-        putOption(option.getId(), JsonValue.valueOf(enabled));
-        updateOption(option, enabled);
-    }
-
-    @Override
-    public void add(Contact contact) throws ConnectionException, IOException {
-        checkLoaded();
-        JsonObject obj = new JsonObject();
-        obj.add("role", "User");
-        ConnectionBuilder builder = new ConnectionBuilder();
-        builder.setUrl(String.format(ADD_MEMBER_URL, getIdentity(), contact.getUsername()));
-        builder.setMethod("PUT", true);
-        builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
-        builder.addHeader("Content-Type", "application/json");
-        builder.setData(obj.toString());
-        HttpURLConnection con = builder.build();
-        if (con.getResponseCode() != 200) {
-            throw getClient().generateException("While adding user into group", con);
-        }
-    }
-
-    private void putOption(String option, JsonValue value) throws ConnectionException, IOException {
-        JsonObject obj = new JsonObject();
-        obj.add(option, value);
-        ConnectionBuilder builder = new ConnectionBuilder();
-        builder.setUrl(getClient().withCloud(MODIFY_PROPERTY_URL, getIdentity(), option));
-        builder.setMethod("PUT", true);
-        builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
-        builder.addHeader("Content-Type", "application/json");
-        builder.setData(obj.toString());
-        HttpURLConnection con = builder.build();
-        if (con.getResponseCode() != 200) {
-            throw getClient().generateException("While updating an option", con);
-        }
-    }
-
-    public void updateTopic(String topic) {
-        this.topic = topic;
-    }
-
-    public void updatePicture(String picture) {
-        this.pictureUrl = picture;
-    }
-
-    public void updateOption(OptionUpdateEvent.Option option, boolean enabled) {
-        if (enabled)
-            enabledOptions.add(option);
-        else
-            enabledOptions.remove(option);
-    }
-}
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
deleted file mode 100644
index 8e2d9c5..0000000
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageImpl.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright 2015 Sam Sun <me@samczsun.com>
- *
- * This file is part of Skype4J.
- *
- * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
- * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
- * version.
- *
- * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
- * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
- * License for more details.
- *
- * You should have received a copy of the GNU General Public License along with Skype4J.
- * If not, see http://www.gnu.org/licenses/.
- */
-
-package com.samczsun.skype4j.internal;
-
-import com.samczsun.skype4j.chat.Chat;
-import com.samczsun.skype4j.chat.ChatMessage;
-import com.samczsun.skype4j.formatting.Message;
-import com.samczsun.skype4j.user.User;
-import org.jsoup.helper.Validate;
-
-public abstract class ChatMessageImpl implements ChatMessage {
-    public static ChatMessage createMessage(Chat chat, User user, String id, String clientId, long time, Message message) {
-        Validate.notNull(chat, "Chat must not be null");
-        Validate.isTrue(chat instanceof ChatImpl, "Chat must be instanceof ChatImpl");
-        Validate.notNull(user, "User must not be null");
-        Validate.isTrue(user instanceof UserImpl, "User must be instanceof UserImpl");
-        Validate.notNull(message, "Message must not be null");
-        if (((ChatImpl) chat).getClient().getUsername().equals(user.getUsername())) {
-            return new ChatMessageSelf(chat, user, id, clientId, time, message);
-        } else {
-            return new ChatMessageOther(chat, user, id, clientId, time, message);
-        }
-    }
-
-    public abstract void setContent(Message content);
-}
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
deleted file mode 100644
index 8195dd6..0000000
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageOther.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Copyright 2015 Sam Sun <me@samczsun.com>
- *
- * This file is part of Skype4J.
- *
- * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
- * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
- * version.
- *
- * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
- * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
- * License for more details.
- *
- * You should have received a copy of the GNU General Public License along with Skype4J.
- * If not, see http://www.gnu.org/licenses/.
- */
-
-package com.samczsun.skype4j.internal;
-
-import com.samczsun.skype4j.chat.Chat;
-import com.samczsun.skype4j.chat.ReceivedMessage;
-import com.samczsun.skype4j.formatting.Message;
-import com.samczsun.skype4j.user.User;
-
-public class ChatMessageOther extends ChatMessageImpl implements ReceivedMessage {
-    private final String clientId;
-    private final String id;
-    private Message message;
-    private final long time;
-    private final User sender;
-
-    public ChatMessageOther(Chat chat, User user, String id, String clientId, long time, Message message) {
-        this.clientId = clientId;
-        this.message = message;
-        this.time = time;
-        this.sender = user;
-        this.id = id;
-    }
-
-    @Override
-    public String getClientId() {
-        return clientId;
-    }
-
-    @Override
-    public Message getContent() {
-        return message;
-    }
-
-    @Override
-    public long getTime() {
-        return time;
-    }
-
-    @Override
-    public User getSender() {
-        return sender;
-    }
-
-    @Override
-    public Chat getChat() {
-        return sender.getChat();
-    }
-
-    @Override
-    public String getId() {
-        return this.id;
-    }
-
-    @Override
-    public void setContent(Message content) {
-        this.message = content;
-    }
-}
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java b/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
deleted file mode 100644
index de2cb9b..0000000
--- a/src/main/java/com/samczsun/skype4j/internal/ChatMessageSelf.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
- * Copyright 2015 Sam Sun <me@samczsun.com>
- *
- * This file is part of Skype4J.
- *
- * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
- * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
- * version.
- *
- * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
- * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
- * License for more details.
- *
- * You should have received a copy of the GNU General Public License along with Skype4J.
- * If not, see http://www.gnu.org/licenses/.
- */
-
-package com.samczsun.skype4j.internal;
-
-import com.eclipsesource.json.JsonObject;
-import com.samczsun.skype4j.chat.Chat;
-import com.samczsun.skype4j.chat.SentMessage;
-import com.samczsun.skype4j.exceptions.ConnectionException;
-import com.samczsun.skype4j.exceptions.SkypeException;
-import com.samczsun.skype4j.formatting.Message;
-import com.samczsun.skype4j.formatting.Text;
-import com.samczsun.skype4j.user.User;
-
-import javax.net.ssl.HttpsURLConnection;
-import java.io.IOException;
-import java.net.URL;
-
-public class ChatMessageSelf extends ChatMessageImpl implements SentMessage {
-    private final String clientId;
-    private final String id;
-    private Message message;
-    private final long time;
-    private final User sender;
-
-    public ChatMessageSelf(Chat chat, User user, String id, String clientId, long time, Message message) {
-        this.clientId = clientId;
-        this.message = message;
-        this.time = time;
-        this.sender = user;
-        this.id = id;
-    }
-
-    @Override
-    public String getClientId() {
-        return clientId;
-    }
-
-    @Override
-    public Message getContent() {
-        return message;
-    }
-
-    @Override
-    public long getTime() {
-        return time;
-    }
-
-    @Override
-    public User getSender() {
-        return sender;
-    }
-
-    @Override
-    public void edit(Message newMessage) throws ConnectionException {
-        try {
-            JsonObject obj = new JsonObject();
-            obj.add("content", newMessage.write());
-            obj.add("messagetype", "RichText");
-            obj.add("contenttype", "text");
-            obj.add("skypeeditedid", this.clientId);
-            URL url = new URL("https://client-s.gateway.messenger.live.com/v1/users/ME/conversations/" + this.sender.getChat().getIdentity() + "/messages");
-            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
-            con.setRequestMethod("POST");
-            con.setDoOutput(true);
-            con.setRequestProperty("RegistrationToken", ((ChatImpl) sender.getChat()).getClient().getRegistrationToken());
-            con.setRequestProperty("Content-Type", "application/json");
-            con.getOutputStream().write(obj.toString().getBytes());
-            con.getInputStream();
-        } catch (IOException e) {
-            throw new ConnectionException("While editing a message", e);
-        }
-    }
-
-    @Override
-    public void delete() throws SkypeException {
-        edit(Message.create().with(Text.BLANK));
-    }
-
-    @Override
-    public Chat getChat() {
-        return sender.getChat();
-    }
-
-    @Override
-    public String getId() {
-        return this.id;
-    }
-
-    @Override
-    public void setContent(Message content) {
-        this.message = content;
-    }
-}
diff --git a/src/main/java/com/samczsun/skype4j/internal/ConnectionBuilder.java b/src/main/java/com/samczsun/skype4j/internal/ConnectionBuilder.java
index f98af6b..75af7f7 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ConnectionBuilder.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ConnectionBuilder.java
@@ -17,6 +17,9 @@
 
 package com.samczsun.skype4j.internal;
 
+import com.eclipsesource.json.JsonObject;
+import com.eclipsesource.json.JsonValue;
+
 import java.io.IOException;
 import java.net.HttpURLConnection;
 import java.net.URL;
@@ -58,6 +61,11 @@ public void setData(String data) {
         this.data = data;
     }
 
+    public void setData(JsonValue object) {
+        setData(object.toString());
+        addHeader("Content-Type", "application/json");
+    }
+
     public String getData() {
         return this.data;
     }
@@ -80,7 +88,7 @@ public HttpURLConnection build(int timeout) throws IOException {
         }
         con.setRequestMethod(method);
         con.setDoOutput(output);
-        if (data != null) {
+        if (data != null && output) {
             con.getOutputStream().write(data.getBytes(Charset.forName("UTF-8")));
         }
         return con;
diff --git a/src/main/java/com/samczsun/skype4j/internal/ContactImpl.java b/src/main/java/com/samczsun/skype4j/internal/ContactImpl.java
index 7f9d3e5..c3f57da 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ContactImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/ContactImpl.java
@@ -31,7 +31,7 @@
 public class ContactImpl implements Contact {
     private static final String PROFILES_URL = "https://api.skype.com/users/self/contacts/profiles"; //contacts[] = username
 
-    public static final Contact createContact(Skype skype, String username) throws ConnectionException, IOException {
+    public static final Contact createContact(Skype skype, String username) throws ConnectionException {
         Validate.isTrue(skype instanceof SkypeImpl, String.format("Now is not the time to use that, %s", skype.getUsername()));
         Validate.notEmpty(username, "Username must not be empty");
         return new ContactImpl((SkypeImpl) skype, username);
@@ -41,32 +41,36 @@ public static final Contact createContact(Skype skype, String username) throws C
     private String username;
     private String displayName;
 
-    ContactImpl(SkypeImpl skype, String username) throws ConnectionException, IOException {
+    ContactImpl(SkypeImpl skype, String username) throws ConnectionException {
         this.skype = skype;
         this.username = username;
-        ConnectionBuilder builder = new ConnectionBuilder();
-        builder.setUrl(PROFILES_URL);
-        builder.setMethod("POST", true);
-        builder.addHeader("X-Skypetoken", skype.getSkypeToken());
-        builder.setData("contacts[]=" + username);
-        HttpURLConnection con = builder.build();
-        if (con.getResponseCode() == 200) {
-            JsonArray array = JsonArray.readFrom(new InputStreamReader(con.getInputStream()));
-            JsonObject json = array.get(0).asObject();
-            if (!json.get("displayname").isNull()) {
-                this.displayName = json.get("displayname").asString();
-            } else if (!json.get("firstname").isNull()) {
-                this.displayName = json.get("firstname").asString();
-                if (!json.get("lastname").isNull()) {
-                    this.displayName += " " + json.get("lastname").asString();
+        try {
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(PROFILES_URL);
+            builder.setMethod("POST", true);
+            builder.addHeader("X-Skypetoken", skype.getSkypeToken());
+            builder.setData("contacts[]=" + username);
+            HttpURLConnection con = builder.build();
+            if (con.getResponseCode() == 200) {
+                JsonArray array = JsonArray.readFrom(new InputStreamReader(con.getInputStream()));
+                JsonObject json = array.get(0).asObject();
+                if (!json.get("displayname").isNull()) {
+                    this.displayName = json.get("displayname").asString();
+                } else if (!json.get("firstname").isNull()) {
+                    this.displayName = json.get("firstname").asString();
+                    if (!json.get("lastname").isNull()) {
+                        this.displayName += " " + json.get("lastname").asString();
+                    }
+                } else if (!json.get("lastname").isNull()) {
+                    this.displayName = json.get("lastname").asString();
+                } else {
+                    this.displayName = this.username;
                 }
-            } else if (!json.get("lastname").isNull()) {
-                this.displayName = json.get("lastname").asString();
             } else {
-                this.displayName = this.username;
+                throw skype.generateException("While getting contact info", con);
             }
-        } else {
-            throw skype.generateException("While getting contact info", con);
+        } catch (IOException e) {
+            throw skype.generateException("While loading", e);
         }
     }
 
diff --git a/src/main/java/com/samczsun/skype4j/internal/ContactRequestImpl.java b/src/main/java/com/samczsun/skype4j/internal/ContactRequestImpl.java
new file mode 100644
index 0000000..aa11c34
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/internal/ContactRequestImpl.java
@@ -0,0 +1,97 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.internal;
+
+import com.samczsun.skype4j.exceptions.ConnectionException;
+import com.samczsun.skype4j.user.Contact;
+import com.samczsun.skype4j.user.ContactRequest;
+
+import java.io.IOException;
+import java.net.HttpURLConnection;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+public class ContactRequestImpl implements ContactRequest {
+    private static final SimpleDateFormat FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSSSSS");
+
+    private Date time;
+    private Contact sender;
+    private String message;
+
+    private SkypeImpl skype;
+
+    public ContactRequestImpl(String time, Contact sender, String message, SkypeImpl skype) throws ParseException {
+        this.time = FORMAT.parse(time);
+        this.sender = sender;
+        this.message = message;
+        this.skype = skype;
+    }
+
+    @Override
+    public Date getTime() {
+        return new Date(this.time.getTime());
+    }
+
+    @Override
+    public Contact getSender() {
+        return this.sender;
+    }
+
+    @Override
+    public String getMessage() {
+        return this.message;
+    }
+
+    @Override
+    public void accept() throws ConnectionException {
+        try {
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(String.format(Endpoints.ACCEPT_CONTACT_REQUEST, sender.getUsername()));
+            builder.setMethod("PUT", false);
+            builder.addHeader("X-Skypetoken", skype.getSkypeToken());
+            HttpURLConnection connection = builder.build();
+            if (connection.getResponseCode() != 201) {
+                throw skype.generateException("While accepting contact request", connection);
+            }
+        } catch (IOException e) {
+            throw skype.generateException("While accepting contact request", e);
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        ContactRequestImpl that = (ContactRequestImpl) o;
+
+        if (time != null ? !time.equals(that.time) : that.time != null) return false;
+        if (sender != null ? !sender.equals(that.sender) : that.sender != null) return false;
+        return !(message != null ? !message.equals(that.message) : that.message != null);
+
+    }
+
+    @Override
+    public int hashCode() {
+        int result = time != null ? time.hashCode() : 0;
+        result = 31 * result + (sender != null ? sender.hashCode() : 0);
+        result = 31 * result + (message != null ? message.hashCode() : 0);
+        return result;
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/internal/Endpoints.java b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
new file mode 100644
index 0000000..d3b7499
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/internal/Endpoints.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.internal;
+
+public class Endpoints {
+    public static final String ACCEPT_CONTACT_REQUEST = "https://api.skype.com/users/self/contacts/auth-request/%s/accept";
+
+    public static final String GET_JOIN_URL = "https://api.scheduler.skype.com/threads";
+    public static final String CHAT_INFO_URL = "https://%sclient-s.gateway.messenger.live.com/v1/threads/%s/?view=msnp24Equivalent";
+    public static final String SEND_MESSAGE_URL = "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/conversations/%s/messages";
+    public static final String MODIFY_MEMBER_URL = "https://%sclient-s.gateway.messenger.live.com/v1/threads/%s/members/8:%s";
+    public static final String MODIFY_PROPERTY_URL = "https://%sclient-s.gateway.messenger.live.com/v1/threads/%s/properties?name=%s";
+    public static final String ADD_MEMBER_URL = "https://client-s.gateway.messenger.live.com/v1/threads/%s/members/8:%s";
+}
diff --git a/src/main/java/com/samczsun/skype4j/internal/MessageType.java b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
index 51f73d9..13c72e9 100644
--- a/src/main/java/com/samczsun/skype4j/internal/MessageType.java
+++ b/src/main/java/com/samczsun/skype4j/internal/MessageType.java
@@ -18,10 +18,12 @@
 package com.samczsun.skype4j.internal;
 
 import com.eclipsesource.json.JsonObject;
+import com.samczsun.skype4j.Skype;
 import com.samczsun.skype4j.StreamUtils;
 import com.samczsun.skype4j.chat.Chat;
-import com.samczsun.skype4j.chat.ChatMessage;
-import com.samczsun.skype4j.chat.FileInfo;
+import com.samczsun.skype4j.chat.messages.ChatMessage;
+import com.samczsun.skype4j.chat.messages.ReceivedMessage;
+import com.samczsun.skype4j.chat.objects.ReceivedFile;
 import com.samczsun.skype4j.events.UnsupportedEvent;
 import com.samczsun.skype4j.events.chat.ChatJoinedEvent;
 import com.samczsun.skype4j.events.chat.call.CallReceivedEvent;
@@ -41,14 +43,18 @@
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.SkypeException;
 import com.samczsun.skype4j.formatting.Message;
+import com.samczsun.skype4j.internal.chat.ChatGroup;
+import com.samczsun.skype4j.internal.chat.ChatImpl;
+import com.samczsun.skype4j.internal.chat.messages.ChatMessageImpl;
+import com.samczsun.skype4j.internal.chat.objects.ReceivedFileImpl;
 import com.samczsun.skype4j.user.Contact;
 import com.samczsun.skype4j.user.User;
 import com.samczsun.skype4j.user.User.Role;
-import org.apache.commons.lang3.StringEscapeUtils;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
 import org.jsoup.nodes.Element;
 import org.jsoup.parser.Parser;
+import org.unbescape.html.HtmlEscape;
 
 import javax.imageio.ImageIO;
 import java.awt.image.BufferedImage;
@@ -75,7 +81,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws SkypeException,
     },
     RICH_TEXT("RichText") {
         @Override
-        public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException {
+        public void handle(final SkypeImpl skype, JsonObject resource) throws ConnectionException, ChatNotFoundException, IOException {
             if (resource.get("clientmessageid") != null) { // New message
                 String clientId = resource.get("clientmessageid").asString();
                 String id = resource.get("id").asString();
@@ -84,9 +90,9 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
                 String url = resource.get("conversationLink").asString();
                 ChatImpl c = (ChatImpl) getChat(url, skype);
                 User u = getUser(from, c);
-                ChatMessage m = ChatMessageImpl.createMessage(c, u, id, clientId, System.currentTimeMillis(), Message.fromHtml(stripMetadata(content)));
+                ChatMessage m = ChatMessageImpl.createMessage(c, u, id, clientId, System.currentTimeMillis(), Message.fromHtml(stripMetadata(content)), skype);
                 c.onMessage(m);
-                MessageReceivedEvent event = new MessageReceivedEvent(m);
+                MessageReceivedEvent event = new MessageReceivedEvent((ReceivedMessage) m);
                 skype.getEventDispatcher().callEvent(event);
             } else if (resource.get("skypeeditedid") != null) { // Edited
                 // message
@@ -106,7 +112,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
                     if (m != null) {
                         MessageEditedEvent evnt = new MessageEditedEvent(m, content);
                         skype.getEventDispatcher().callEvent(evnt);
-                        ((ChatMessageImpl) m).setContent(Message.fromHtml(content));
+                        ((ChatMessageImpl) m).edit0(Message.fromHtml(content));
                     } else {
                         faker = true;
                     }
@@ -130,7 +136,7 @@ public Message getContent() {
                             return finalOriginalContent;
                         }
 
-                        public long getTime() {
+                        public long getSentTime() {
                             return System.currentTimeMillis();
                         }
 
@@ -150,6 +156,11 @@ public Chat getChat() {
                             return c;
                         }
 
+                        @Override
+                        public Skype getClient() {
+                            return skype;
+                        }
+
                         public String getId() {
                             return id;
                         }
@@ -194,19 +205,14 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
             String content = resource.get("content").asString();
             Document doc = Parser.xmlParser().parseInput(content, "");
 
-            List<FileInfo> fileInfos = new ArrayList<>();
+            List<ReceivedFile> receivedFiles = new ArrayList<>();
             for (Element fe : doc.getElementsByTag("file")) {
-                FileInfo fileInfo = new FileInfo(
-                        fe.text(),
-                        Long.parseLong(fe.attr("size")),
-                        Long.parseLong(fe.attr("tid")),
-                        Objects.equals(fe.attr("status"), "canceled"));
-                fileInfos.add(fileInfo);
+                receivedFiles.add(new ReceivedFileImpl(fe.text(), Long.parseLong(fe.attr("size")), Long.parseLong(fe.attr("tid"))));
             }
 
             Chat c = getChat(url, skype);
             User u = getUser(from, c);
-            FileInfoReceivedEvent event = new FileInfoReceivedEvent(c, u, fileInfos);
+            FileReceivedEvent event = new FileReceivedEvent(c, u, Collections.unmodifiableList(receivedFiles));
             skype.getEventDispatcher().callEvent(event);
         }
     },
@@ -221,8 +227,8 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
             Matcher m = SMS_PATTERN.matcher(content);
             if (m.find()) {
                 String message = m.group(1);
-                ChatMessage chatmessage = ChatMessageImpl.createMessage(c, u, null, null, System.currentTimeMillis(), Message.fromHtml(message)); //No clientmessageid?
-                SmsReceivedEvent event = new SmsReceivedEvent(chatmessage);
+                ChatMessage chatmessage = ChatMessageImpl.createMessage(c, u, null, null, System.currentTimeMillis(), Message.fromHtml(message), skype); //No clientmessageid?
+                SmsReceivedEvent event = new SmsReceivedEvent((ReceivedMessage) chatmessage);
                 skype.getEventDispatcher().callEvent(event);
             } else {
                 throw new IllegalArgumentException("Sms event did not conform to format expected");
@@ -392,7 +398,7 @@ public void handle(SkypeImpl skype, JsonObject resource) throws ConnectionExcept
             if (initiatorMatcher.find() && timeMatcher.find() && valueMatcher.find()) {
                 User user = getUser(initiatorMatcher.group(1), chat);
                 long time = Long.parseLong(timeMatcher.group(1));
-                String topic = valueMatcher.groupCount() > 0 ? StringEscapeUtils.unescapeHtml4(valueMatcher.group(1)) : "";
+                String topic = valueMatcher.groupCount() > 0 ? HtmlEscape.unescapeHtml(valueMatcher.group(1)) : "";
                 TopicUpdateEvent event = new TopicUpdateEvent(user, time, topic);
                 skype.getEventDispatcher().callEvent(event);
                 ((ChatGroup) chat).updateTopic(topic);
diff --git a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
index 2458b10..70b687a 100644
--- a/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/SkypeImpl.java
@@ -21,17 +21,25 @@
 import com.eclipsesource.json.JsonObject;
 import com.eclipsesource.json.JsonValue;
 import com.samczsun.skype4j.Skype;
+import com.samczsun.skype4j.StreamUtils;
 import com.samczsun.skype4j.chat.Chat;
 import com.samczsun.skype4j.chat.GroupChat;
 import com.samczsun.skype4j.events.EventDispatcher;
 import com.samczsun.skype4j.events.chat.DisconnectedEvent;
+import com.samczsun.skype4j.events.contact.ContactRequestEvent;
 import com.samczsun.skype4j.events.error.MajorErrorEvent;
 import com.samczsun.skype4j.events.error.MinorErrorEvent;
 import com.samczsun.skype4j.exceptions.ChatNotFoundException;
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.InvalidCredentialsException;
 import com.samczsun.skype4j.exceptions.ParseException;
+import com.samczsun.skype4j.internal.chat.ChatImpl;
 import com.samczsun.skype4j.user.Contact;
+import com.samczsun.skype4j.user.ContactRequest;
+import org.java_websocket.client.DefaultSSLWebSocketClientFactory;
+import org.java_websocket.client.WebSocketClient;
+import org.java_websocket.drafts.Draft_17;
+import org.java_websocket.handshake.ServerHandshake;
 import org.jsoup.Connection.Method;
 import org.jsoup.Connection.Response;
 import org.jsoup.Jsoup;
@@ -39,11 +47,16 @@
 import org.jsoup.nodes.Element;
 import org.jsoup.select.Elements;
 
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.net.HttpURLConnection;
 import java.net.SocketTimeoutException;
+import java.net.URI;
 import java.net.URLEncoder;
+import java.security.cert.X509Certificate;
 import java.text.SimpleDateFormat;
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
@@ -62,10 +75,14 @@
     private static final String TOKEN_AUTH_URL = "https://api.asm.skype.com/v1/skypetokenauth";
     private static final String LOGOUT_URL = "https://login.skype.com/logout?client_id=578134&redirect_uri=https%3A%2F%2Fweb.skype.com&intsrc=client-_-webapp-_-production-_-go-signin";
     private static final String ENDPOINTS_URL = "https://client-s.gateway.messenger.live.com/v1/users/ME/endpoints";
-    private static final String THREAD_URL = "https://client-s.gateway.messenger.live.com/v1/threads";
+    private static final String AUTH_REQUESTS_URL = "https://api.skype.com/users/self/contacts/auth-request";
+    private static final String TROUTER_URL = "https://go.trouter.io/v2/a";
+    private static final String POLICIES_URL = "https://prod.tpc.skype.com/v1/policies";
+    private static final String REGISTRATIONS = "https://prod.registrar.skype.com/v2/registrations";
     // The endpoints below all depend on the cloud the user is in
+    private static final String THREAD_URL = "https://%sclient-s.gateway.messenger.live.com/v1/threads";
     private static final String SUBSCRIPTIONS_URL = "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/endpoints/SELF/subscriptions";
-    private static final String MESSAGINGSERVICE_URL = "https://client-s.gateway.messenger.live.com/v1/users/ME/endpoints/%s/presenceDocs/messagingService";
+    private static final String MESSAGINGSERVICE_URL = "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/endpoints/%s/presenceDocs/messagingService";
     private static final String POLL_URL = "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/endpoints/SELF/subscriptions/0/poll";
 
     private static final Pattern URL_PATTERN = Pattern.compile("threads/(.*)", Pattern.CASE_INSENSITIVE);
@@ -88,12 +105,15 @@
 
     private Thread sessionKeepaliveThread;
     private Thread pollThread;
+    private WebSocketClient wss;
 
     private final ExecutorService scheduler = Executors.newFixedThreadPool(16);
 
     private final Map<String, Chat> allChats = new ConcurrentHashMap<>();
     private final Map<String, Contact> allContacts = new ConcurrentHashMap<>();
 
+    private final List<ContactRequest> allContactRequests = new ArrayList<>();
+
     private Logger logger = Logger.getLogger(Skype.class.getCanonicalName());
 
     public SkypeImpl(String username, String password, Set<String> resources, Logger customLogger) {
@@ -120,7 +140,7 @@ public void subscribe() throws ConnectionException {
                 throw generateException("While subscribing", connection);
             }
 
-            builder.setUrl(String.format(MESSAGINGSERVICE_URL, URLEncoder.encode(endpointId, "UTF-8")));
+            builder.setUrl(withCloud(MESSAGINGSERVICE_URL, URLEncoder.encode(endpointId, "UTF-8")));
             builder.setMethod("PUT", true);
             builder.setData(buildRegistrationObject().toString());
             connection = builder.build();
@@ -129,6 +149,217 @@ public void subscribe() throws ConnectionException {
             if (code != 200) {
                 throw generateException("While submitting a messaging service", connection);
             }
+
+            builder.setUrl(AUTH_REQUESTS_URL);
+            builder.setMethod("GET", false);
+            builder.addHeader("X-Skypetoken", this.skypeToken);
+            connection = builder.build();
+
+            code = connection.getResponseCode();
+            if (code != 200) {
+                throw generateException("While fetching contact requests", connection);
+            }
+
+            JsonArray contactRequests = JsonArray.readFrom(new InputStreamReader(connection.getInputStream()));
+            for (JsonValue contactRequest : contactRequests) {
+                JsonObject contactRequestObj = contactRequest.asObject();
+                try {
+                    this.allContactRequests.add(new ContactRequestImpl(contactRequestObj.get("event_time").asString(), getOrLoadContact(contactRequestObj.get("sender").asString()), contactRequestObj.get("greeting").asString(), this));
+                } catch (java.text.ParseException e) {
+                    getLogger().log(Level.WARNING, "Could not parse date for contact request", e);
+                }
+            }
+
+            builder.setUrl(TROUTER_URL);
+
+            connection = builder.build();
+            code = connection.getResponseCode();
+            if (code != 200) {
+                throw generateException("While fetching trouter data", connection);
+            }
+
+            JsonObject trouter = JsonObject.readFrom(new InputStreamReader(connection.getInputStream()));
+
+            builder = new ConnectionBuilder();
+            builder.setUrl(POLICIES_URL);
+            builder.setMethod("POST", true);
+            builder.addHeader("X-Skypetoken", getSkypeToken());
+            builder.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36");
+            JsonObject policyData = new JsonObject();
+            policyData.add("sr", trouter.get("connId"));
+            builder.setData(policyData.toString());
+
+            connection = builder.build();
+            code = connection.getResponseCode();
+
+            if (code != 200) {
+                throw generateException("While fetching policy data", connection);
+            }
+
+            JsonObject policyResponse = JsonObject.readFrom(new InputStreamReader(connection.getInputStream()));
+
+            Map<String, String> data = new HashMap<>();
+            for (JsonObject.Member value : policyResponse) {
+                data.put(value.getName(), value.getValue().asString());
+            }
+            data.put("r", trouter.get("instance").asString());
+            data.put("p", String.valueOf(trouter.get("instancePort").asInt()));
+            data.put("ccid", trouter.get("ccid").asString());
+            data.put("v", "v2"); //TODO: MAGIC VALUE
+            data.put("dom", "web.skype.com"); //TODO: MAGIC VALUE
+            data.put("auth", "true"); //TODO: MAGIC VALUE
+            data.put("tc", new JsonObject().add("cv", "2015.8.18").add("hr", "").add("v", "1.15.133").toString()); //TODO: MAGIC VALUE
+            data.put("timeout", "55");
+            data.put("t", String.valueOf(System.currentTimeMillis()));
+            StringBuilder args = new StringBuilder();
+            for (Map.Entry<String, String> entry : data.entrySet()) {
+                args.append(URLEncoder.encode(entry.getKey(), "UTF-8")).append("=").append(URLEncoder.encode(entry.getValue(), "UTF-8")).append("&");
+            }
+
+            String socketURL = trouter.get("socketio").asString();
+            socketURL = socketURL.substring(socketURL.indexOf('/') + 2);
+            socketURL = socketURL.substring(0, socketURL.indexOf(':'));
+
+            builder.setUrl(String.format("%s/socket.io/1/?%s",
+                    "https://" + socketURL,
+                    args.toString()
+            ));
+            builder.setMethod("GET", false);
+            connection = builder.build();
+            code = connection.getResponseCode();
+            if (code != 200) {
+                throw generateException("While fetching websocket details", connection);
+            }
+
+            String websocketData = StreamUtils.readFully(connection.getInputStream());
+
+            builder = new ConnectionBuilder();
+            builder.setUrl(REGISTRATIONS);
+            builder.setMethod("POST", true);
+            builder.addHeader("X-Skypetoken", getSkypeToken());
+            builder.addHeader("Content-Type", "application/json");
+
+            JsonObject clientDescription = new JsonObject();
+            clientDescription.add("aesKey", "");
+            clientDescription.add("languageId", "en-US");
+            clientDescription.add("platform", "Chrome");
+            clientDescription.add("platformUIVersion", "908/1.16.0.82//skype.com");
+            clientDescription.add("templateKey", "SkypeWeb_1.1");
+
+            JsonObject trouterObject = new JsonObject();
+            trouterObject.add("context", "");
+            trouterObject.add("ttl", 3600);
+            trouterObject.add("path", trouter.get("surl"));
+
+            JsonArray trouterArray = new JsonArray();
+            trouterArray.add(trouterObject);
+
+            JsonObject transports = new JsonObject();
+            transports.add("TROUTER", trouterArray);
+
+            JsonObject registrationObject = new JsonObject();
+            registrationObject.add("clientDescription", clientDescription);
+            registrationObject.add("registrationId", UUID.randomUUID().toString());
+            registrationObject.add("nodeId", "");
+            registrationObject.add("transports", transports);
+
+            builder.setData(registrationObject.toString());
+
+            connection = builder.build();
+            if (connection.getResponseCode() != 202) {
+                throw generateException("While registering websocket", connection);
+            }
+
+            this.wss = new WebSocketClient(new URI(String.format("%s/socket.io/1/websocket/%s?%s",
+                    "wss://" + socketURL,
+                    websocketData.split(":")[0],
+                    args.toString())), new Draft_17(), null, 2000) {
+                @Override
+                public void onOpen(ServerHandshake serverHandshake) {
+                    new Thread() {
+                        AtomicInteger currentPing = new AtomicInteger(1);
+
+                        public void run() {
+                            while (true) {
+                                try {
+                                    Thread.sleep(55 * 1000);
+                                    send("5:" + currentPing.getAndIncrement() + "+::{\"name\":\"ping\"}");
+                                } catch (InterruptedException e) {
+                                    break;
+                                }
+                            }
+                        }
+                    }.start();
+                }
+
+                @Override
+                public void onMessage(String s) {
+                    if (s.startsWith("3:::")) {
+                        JsonObject message = JsonObject.readFrom(s.substring(4));
+                        JsonObject body = JsonObject.readFrom(message.get("body").asString());
+                        int event = body.get("evt").asInt();
+                        if (event == 6) {
+                            getLogger().log(Level.SEVERE, "Unhandled websocket message '{0}'", s);
+                        } else if (event == 14) {
+                            try {
+                                checkForNewContactRequests();
+                            } catch (ConnectionException | IOException e) {
+                                getLogger().log(Level.SEVERE, String.format("Unhandled exception while parsing websocket message '%s'", s), e);
+                            }
+                        } else {
+                            getLogger().log(Level.SEVERE, "Unhandled websocket message '{0}'", s);
+                        }
+
+                        JsonObject trouterRequest = new JsonObject();
+                        trouterRequest.add("ts", System.currentTimeMillis());
+                        trouterRequest.add("auth", true);
+
+                        JsonObject headers = new JsonObject();
+                        headers.add("trouter-request", trouterRequest);
+
+                        JsonObject trouterClient = new JsonObject();
+                        trouterClient.add("cd", 0);
+
+                        JsonObject response = new JsonObject();
+                        response.add("id", message.get("id").asInt());
+                        response.add("status", 200);
+                        response.add("headers", headers);
+                        response.add("trouter-client", trouterClient);
+                        response.add("body", "");
+                        this.send("3:::" + response.toString());
+                    }
+                }
+
+                @Override
+                public void onClose(int i, String s, boolean b) {
+                    getLogger().log(Level.INFO, "Connection closed: {0} {1} {2}", new Object[]{i, s, b});
+                }
+
+                @Override
+                public void onError(Exception e) {
+                    getLogger().log(Level.SEVERE, "Exception in websocket client", e);
+                }
+            };
+            TrustManager[] trustAllCerts = new TrustManager[]{
+                    new X509TrustManager() {
+                        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
+                            return new X509Certificate[0];
+                        }
+
+                        public void checkClientTrusted(
+                                java.security.cert.X509Certificate[] certs, String authType) {
+                        }
+
+                        public void checkServerTrusted(
+                                java.security.cert.X509Certificate[] certs, String authType) {
+                        }
+                    }
+            };
+            SSLContext sc = SSLContext.getInstance("SSL");
+            sc.init(null, trustAllCerts, new java.security.SecureRandom());
+            this.wss.setWebSocketFactory(new DefaultSSLWebSocketClientFactory(sc));
+            this.wss.connectBlocking();
+
             pollThread = new Thread(String.format("Skype-%s-PollThread", username)) {
                 public void run() {
                     ConnectionBuilder poll = new ConnectionBuilder();
@@ -202,6 +433,10 @@ public void run() {
             pollThread.start();
         } catch (IOException io) {
             throw generateException("While subscribing", io);
+        } catch (ConnectionException e) {
+            throw e;
+        } catch (Exception e) {
+            throw new RuntimeException(e);
         }
     }
 
@@ -232,7 +467,7 @@ public Contact getContact(String name) {
     }
 
     @Override
-    public Contact loadContact(String name) throws ConnectionException, IOException {
+    public Contact loadContact(String name) throws ConnectionException {
         if (!allContacts.containsKey(name)) {
             Contact contact = ContactImpl.createContact(this, name);
             allContacts.put(name, contact);
@@ -243,7 +478,7 @@ public Contact loadContact(String name) throws ConnectionException, IOException
     }
 
     @Override
-    public Contact getOrLoadContact(String username) throws ConnectionException, IOException {
+    public Contact getOrLoadContact(String username) throws ConnectionException {
         if (allContacts.containsKey(username)) {
             return allContacts.get(username);
         } else {
@@ -272,6 +507,34 @@ public void logout() throws ConnectionException {
         }
     }
 
+    private void checkForNewContactRequests() throws ConnectionException, IOException {
+        ConnectionBuilder builder = new ConnectionBuilder();
+        builder.setUrl(AUTH_REQUESTS_URL);
+        builder.setMethod("GET", false);
+        builder.addHeader("X-Skypetoken", this.skypeToken);
+        HttpURLConnection connection = builder.build();
+
+        int code = connection.getResponseCode();
+        if (code != 200) {
+            throw generateException("While fetching contact requests", connection);
+        }
+
+        JsonArray contactRequests = JsonArray.readFrom(new InputStreamReader(connection.getInputStream()));
+        for (JsonValue contactRequest : contactRequests) {
+            JsonObject contactRequestObj = contactRequest.asObject();
+            try {
+                ContactRequestImpl request = new ContactRequestImpl(contactRequestObj.get("event_time").asString(), getOrLoadContact(contactRequestObj.get("sender").asString()), contactRequestObj.get("greeting").asString(), this);
+                if (!this.allContactRequests.contains(request)) {
+                    ContactRequestEvent event = new ContactRequestEvent(request);
+                    getEventDispatcher().callEvent(event);
+                    this.allContactRequests.add(request);
+                }
+            } catch (java.text.ParseException e) {
+                getLogger().log(Level.WARNING, "Could not parse date for contact request", e);
+            }
+        }
+    }
+
     private void shutdown() {
         loggedIn.set(false);
         shutdownRequested.set(true);
@@ -315,7 +578,7 @@ public GroupChat createGroupChat(Contact... contacts) throws ConnectionException
             }
             obj.add("members", allContacts);
             ConnectionBuilder builder = new ConnectionBuilder();
-            builder.setUrl(THREAD_URL);
+            builder.setUrl(withCloud(THREAD_URL));
             builder.setMethod("POST", true);
             builder.addHeader("RegistrationToken", getRegistrationToken());
             builder.setData(obj.toString());
@@ -414,7 +677,7 @@ private JsonObject buildRegistrationObject() {
         publicInfo.add("type", 1);
         publicInfo.add("skypeNameVersion", "skype.com");
         publicInfo.add("nodeInfo", "xx");
-        publicInfo.add("version", "908/1.13.0.79//skype.com");
+        publicInfo.add("version", "908/1.16.0.82//skype.com");
         JsonObject privateInfo = new JsonObject();
         privateInfo.add("epname", "Skype4J");
         registrationObject.add("publicInfo", publicInfo);
diff --git a/src/main/java/com/samczsun/skype4j/StreamUtils.java b/src/main/java/com/samczsun/skype4j/internal/StreamUtils.java
similarity index 97%
rename from src/main/java/com/samczsun/skype4j/StreamUtils.java
rename to src/main/java/com/samczsun/skype4j/internal/StreamUtils.java
index bc8ff13..afa3f64 100644
--- a/src/main/java/com/samczsun/skype4j/StreamUtils.java
+++ b/src/main/java/com/samczsun/skype4j/internal/StreamUtils.java
@@ -15,7 +15,7 @@
  * If not, see http://www.gnu.org/licenses/.
  */
 
-package com.samczsun.skype4j;
+package com.samczsun.skype4j.internal;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
diff --git a/src/main/java/com/samczsun/skype4j/internal/UserImpl.java b/src/main/java/com/samczsun/skype4j/internal/UserImpl.java
index 4dc0783..777f06e 100644
--- a/src/main/java/com/samczsun/skype4j/internal/UserImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/UserImpl.java
@@ -18,13 +18,13 @@
 package com.samczsun.skype4j.internal;
 
 import com.samczsun.skype4j.chat.Chat;
-import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.chat.messages.ChatMessage;
 import com.samczsun.skype4j.exceptions.ConnectionException;
+import com.samczsun.skype4j.internal.chat.ChatImpl;
 import com.samczsun.skype4j.user.Contact;
 import com.samczsun.skype4j.user.User;
 
 import java.io.IOException;
-import java.sql.Connection;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -41,7 +41,7 @@
     private final List<ChatMessage> messages = new CopyOnWriteArrayList<>();
     private final Map<String, ChatMessage> messageMap = new ConcurrentHashMap<>();
 
-    public UserImpl(String username, ChatImpl chat) throws ConnectionException, IOException {
+    public UserImpl(String username, ChatImpl chat) throws ConnectionException {
         this.contactRep = chat.getClient().getOrLoadContact(username);
         this.chat = chat;
     }
diff --git a/src/main/java/com/samczsun/skype4j/internal/chat/ChatGroup.java b/src/main/java/com/samczsun/skype4j/internal/chat/ChatGroup.java
new file mode 100644
index 0000000..907ecef
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/internal/chat/ChatGroup.java
@@ -0,0 +1,258 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.internal.chat;
+
+import com.eclipsesource.json.JsonArray;
+import com.eclipsesource.json.JsonObject;
+import com.eclipsesource.json.JsonValue;
+import com.samczsun.skype4j.chat.GroupChat;
+import com.samczsun.skype4j.events.chat.user.action.OptionUpdateEvent;
+import com.samczsun.skype4j.exceptions.ChatNotFoundException;
+import com.samczsun.skype4j.exceptions.ConnectionException;
+import com.samczsun.skype4j.exceptions.NotParticipatingException;
+import com.samczsun.skype4j.internal.ConnectionBuilder;
+import com.samczsun.skype4j.internal.Endpoints;
+import com.samczsun.skype4j.internal.SkypeImpl;
+import com.samczsun.skype4j.internal.UserImpl;
+import com.samczsun.skype4j.user.Contact;
+import com.samczsun.skype4j.user.User;
+import com.samczsun.skype4j.user.User.Role;
+
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+public class ChatGroup extends ChatImpl implements GroupChat {
+    private String topic;
+    private String pictureUrl;
+    private Set<OptionUpdateEvent.Option> enabledOptions = new HashSet<>();
+
+    protected ChatGroup(SkypeImpl skype, String identity) throws ConnectionException, ChatNotFoundException {
+        super(skype, identity);
+    }
+
+    protected void load() throws ConnectionException, ChatNotFoundException {
+        if (isLoaded()) {
+            return;
+        }
+        boolean thrown = false;
+        try {
+            isLoading.set(true);
+            Map<String, User> newUsers = new HashMap<>();
+
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(getClient().withCloud(Endpoints.CHAT_INFO_URL, getIdentity()));
+            builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
+            builder.addHeader("Content-Type", "application/json");
+            HttpURLConnection con = builder.build();
+
+            if (con.getResponseCode() == 404) {
+                throw new ChatNotFoundException();
+            }
+            if (con.getResponseCode() != 200) {
+                throw getClient().generateException("While loading users", con);
+            }
+            JsonObject object = JsonObject.readFrom(new InputStreamReader(con.getInputStream()));
+            JsonObject props = object.get("properties").asObject();
+            for (OptionUpdateEvent.Option option : OptionUpdateEvent.Option.values()) {
+                if (props.get(option.getId()) != null && props.get(option.getId()).equals("true")) {
+                    this.enabledOptions.add(option);
+                }
+            }
+            if (props.get("topic") != null) {
+                this.topic = props.get("topic").asString();
+            } else {
+                this.topic = "";
+            }
+            JsonArray members = object.get("members").asArray();
+            for (JsonValue element : members) {
+                String username = element.asObject().get("id").asString().substring(2);
+                String role = element.asObject().get("role").asString();
+                User user = users.get(username.toLowerCase());
+                if (user == null) {
+                    user = new UserImpl(username, this);
+                }
+                newUsers.put(username.toLowerCase(), user);
+                if (role.equalsIgnoreCase("admin")) {
+                    user.setRole(Role.ADMIN);
+                } else {
+                    user.setRole(Role.USER);
+                }
+            }
+
+            if (newUsers.get(getClient().getUsername().toLowerCase()) == null) {
+                throw new NotParticipatingException();
+            }
+
+            this.users.clear();
+            this.users.putAll(newUsers);
+        } catch (IOException e) {
+            thrown = true;
+            throw getClient().generateException("While loading", e);
+        } finally {
+            if (!thrown) {
+                hasLoaded.set(true);
+            }
+            isLoading.set(false);
+        }
+    }
+
+    public void addUser(String username) throws ConnectionException {
+        if (!users.containsKey(username.toLowerCase())) {
+            User user = new UserImpl(username, this);
+            users.put(username.toLowerCase(), user);
+        } else if (!username.equalsIgnoreCase(getClient().getUsername())) { //Skype...
+            throw new IllegalArgumentException(username + " joined the chat even though he was already in it?");
+        }
+    }
+
+    public void removeUser(String username) {
+        users.remove(username.toLowerCase());
+    }
+
+    public void kick(String username) throws ConnectionException {
+        checkLoaded();
+        try {
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(getClient().withCloud(Endpoints.MODIFY_MEMBER_URL, getIdentity(), username));
+            builder.setMethod("DELETE", false);
+            builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
+            HttpURLConnection con = builder.build();
+            if (con.getResponseCode() != 200) {
+                throw getClient().generateException("While kicking user", con);
+            }
+        } catch (IOException e) {
+            throw getClient().generateException("While kicking user", e);
+        }
+    }
+
+    public void leave() throws ConnectionException {
+        kick(getClient().getUsername());
+    }
+
+    @Override
+    public String getJoinUrl() throws ConnectionException {
+        checkLoaded();
+        if (isOptionEnabled(OptionUpdateEvent.Option.JOINING_ENABLED)) {
+            try {
+                JsonObject data = new JsonObject();
+                data.add("baseDomain", "https://join.skype.com/launch/");
+                data.add("threadId", this.getIdentity());
+                ConnectionBuilder builder = new ConnectionBuilder();
+                builder.setUrl(Endpoints.GET_JOIN_URL);
+                builder.setMethod("POST", true);
+                builder.addHeader("X-Skypetoken", getClient().getSkypeToken());
+                builder.addHeader("Content-Type", "application/json");
+                builder.setData(data.toString());
+                HttpURLConnection con = builder.build();
+                if (con.getResponseCode() != 200) {
+                    throw getClient().generateException("While getting join URL", con);
+                }
+                JsonObject object = JsonObject.readFrom(new InputStreamReader(con.getInputStream()));
+                return object.get("JoinUrl").asString();
+            } catch (IOException e) {
+                throw getClient().generateException("While getting join URL", e);
+            }
+        } else {
+            throw new IllegalStateException("Joining is not enabled");
+        }
+    }
+
+    @Override
+    public String getTopic() {
+        checkLoaded();
+        return this.topic;
+    }
+
+    public void setTopic(String topic) throws ConnectionException {
+        checkLoaded();
+        putOption("topic", JsonValue.valueOf(topic));
+    }
+
+    @Override
+    public boolean isOptionEnabled(OptionUpdateEvent.Option option) {
+        checkLoaded();
+        return this.enabledOptions.contains(option);
+    }
+
+    @Override
+    public void setOptionEnabled(OptionUpdateEvent.Option option, boolean enabled) throws ConnectionException {
+        checkLoaded();
+        putOption(option.getId(), JsonValue.valueOf(enabled));
+        updateOption(option, enabled);
+    }
+
+    @Override
+    public void add(Contact contact) throws ConnectionException {
+        checkLoaded();
+        try {
+            JsonObject obj = new JsonObject();
+            obj.add("role", "User");
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(String.format(Endpoints.ADD_MEMBER_URL, getIdentity(), contact.getUsername()));
+            builder.setMethod("PUT", true);
+            builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
+            builder.addHeader("Content-Type", "application/json");
+            builder.setData(obj.toString());
+            HttpURLConnection con = builder.build();
+            if (con.getResponseCode() != 200) {
+                throw getClient().generateException("While adding user into group", con);
+            }
+        } catch (IOException e) {
+            throw getClient().generateException("While adding user into group", e);
+        }
+    }
+
+    private void putOption(String option, JsonValue value) throws ConnectionException {
+        try {
+            JsonObject obj = new JsonObject();
+            obj.add(option, value);
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(getClient().withCloud(Endpoints.MODIFY_PROPERTY_URL, getIdentity(), option));
+            builder.setMethod("PUT", true);
+            builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
+            builder.addHeader("Content-Type", "application/json");
+            builder.setData(obj.toString());
+            HttpURLConnection con = builder.build();
+            if (con.getResponseCode() != 200) {
+                throw getClient().generateException("While updating an option", con);
+            }
+        } catch (IOException e) {
+            throw getClient().generateException("While updating an option", e);
+        }
+    }
+
+    public void updateTopic(String topic) {
+        this.topic = topic;
+    }
+
+    public void updatePicture(String picture) {
+        this.pictureUrl = picture;
+    }
+
+    public void updateOption(OptionUpdateEvent.Option option, boolean enabled) {
+        if (enabled)
+            enabledOptions.add(option);
+        else
+            enabledOptions.remove(option);
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java b/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java
similarity index 68%
rename from src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
rename to src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java
index 63bb744..517405b 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatImpl.java
+++ b/src/main/java/com/samczsun/skype4j/internal/chat/ChatImpl.java
@@ -15,16 +15,19 @@
  * If not, see http://www.gnu.org/licenses/.
  */
 
-package com.samczsun.skype4j.internal;
+package com.samczsun.skype4j.internal.chat;
 
 import com.eclipsesource.json.JsonObject;
 import com.samczsun.skype4j.Skype;
 import com.samczsun.skype4j.chat.Chat;
-import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.chat.messages.ChatMessage;
 import com.samczsun.skype4j.exceptions.ChatNotFoundException;
 import com.samczsun.skype4j.exceptions.ConnectionException;
 import com.samczsun.skype4j.exceptions.NotLoadedException;
 import com.samczsun.skype4j.formatting.Message;
+import com.samczsun.skype4j.formatting.Text;
+import com.samczsun.skype4j.internal.*;
+import com.samczsun.skype4j.internal.chat.messages.ChatMessageImpl;
 import com.samczsun.skype4j.user.User;
 import org.jsoup.helper.Validate;
 
@@ -37,16 +40,8 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.logging.Level;
 
 public abstract class ChatImpl implements Chat {
-    protected static final String CHAT_INFO_URL = "https://%sclient-s.gateway.messenger.live.com/v1/threads/%s/?view=msnp24Equivalent";
-    protected static final String SEND_MESSAGE_URL = "https://%sclient-s.gateway.messenger.live.com/v1/users/ME/conversations/%s/messages";
-    protected static final String MODIFY_MEMBER_URL = "https://%sclient-s.gateway.messenger.live.com/v1/threads/%s/members/8:%s";
-    protected static final String MODIFY_PROPERTY_URL = "https://%sclient-s.gateway.messenger.live.com/v1/threads/%s/properties?name=%s";
-    protected static final String GET_JOIN_URL = "https://api.scheduler.skype.com/threads";
-    protected static final String ADD_MEMBER_URL = "https://client-s.gateway.messenger.live.com/v1/threads/%s/members/8:%s";
-
     protected final AtomicBoolean isLoading = new AtomicBoolean(false);
     protected final AtomicBoolean hasLoaded = new AtomicBoolean(false);
 
@@ -56,35 +51,45 @@
     private final SkypeImpl client;
     private final String identity;
 
-    ChatImpl(SkypeImpl client, String identity) throws ConnectionException, ChatNotFoundException, IOException {
+    ChatImpl(SkypeImpl client, String identity) throws ConnectionException, ChatNotFoundException {
         this.client = client;
         this.identity = identity;
         load();
     }
 
     @Override
-    public ChatMessage sendMessage(Message message) throws ConnectionException, IOException {
+    public ChatMessage sendMessage(Message message) throws ConnectionException {
         checkLoaded();
-        long ms = System.currentTimeMillis();
-        JsonObject obj = new JsonObject();
-        obj.add("content", message.write());
-        obj.add("messagetype", "RichText");
-        obj.add("contenttype", "text");
-        obj.add("clientmessageid", String.valueOf(ms));
-
-        ConnectionBuilder builder = new ConnectionBuilder();
-        builder.setUrl(client.withCloud(SEND_MESSAGE_URL, getIdentity()));
-        builder.setMethod("POST", true);
-        builder.addHeader("RegistrationToken", client.getRegistrationToken());
-        builder.addHeader("Content-Type", "application/json");
-        builder.setData(obj.toString());
-        HttpURLConnection con = builder.build();
-
-        if (con.getResponseCode() != 201) {
-            throw client.generateException("While sending message", con);
+        try {
+            long ms = System.currentTimeMillis();
+
+            JsonObject obj = new JsonObject();
+            obj.add("content", message.write());
+            obj.add("messagetype", "RichText");
+            obj.add("contenttype", "text");
+            obj.add("clientmessageid", String.valueOf(ms));
+
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(client.withCloud(Endpoints.SEND_MESSAGE_URL, getIdentity()));
+            builder.setMethod("POST", true);
+            builder.addHeader("RegistrationToken", client.getRegistrationToken());
+            builder.addHeader("Content-Type", "application/json");
+            builder.setData(obj.toString());
+            HttpURLConnection con = builder.build();
+
+            if (con.getResponseCode() != 201) {
+                throw client.generateException("While sending message", con);
+            }
+
+            return ChatMessageImpl.createMessage(this, getUser(client.getUsername()), null, String.valueOf(ms), ms, message, getClient());
+        } catch (IOException e) {
+            throw this.client.generateException("While sending message", e);
         }
+    }
 
-        return ChatMessageImpl.createMessage(this, getUser(client.getUsername()), null, String.valueOf(ms), ms, message);
+    @Override
+    public ChatMessage sendMessage(String plainMessage) throws ConnectionException {
+        return sendMessage(Message.create().with(Text.plain(plainMessage)));
     }
 
     @Override
@@ -143,11 +148,11 @@ public boolean isLoaded() {
         return !isLoading.get() && hasLoaded.get();
     }
 
-    public abstract void addUser(String username) throws ConnectionException, IOException;
+    public abstract void addUser(String username) throws ConnectionException;
 
     public abstract void removeUser(String username);
 
-    protected abstract void load() throws ConnectionException, ChatNotFoundException, IOException;
+    protected abstract void load() throws ConnectionException, ChatNotFoundException;
 
     protected void checkLoaded() {
         if (!isLoaded()) {
diff --git a/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java b/src/main/java/com/samczsun/skype4j/internal/chat/ChatIndividual.java
similarity index 92%
rename from src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
rename to src/main/java/com/samczsun/skype4j/internal/chat/ChatIndividual.java
index 70e51f4..b1861f5 100644
--- a/src/main/java/com/samczsun/skype4j/internal/ChatIndividual.java
+++ b/src/main/java/com/samczsun/skype4j/internal/chat/ChatIndividual.java
@@ -15,11 +15,13 @@
  * If not, see http://www.gnu.org/licenses/.
  */
 
-package com.samczsun.skype4j.internal;
+package com.samczsun.skype4j.internal.chat;
 
 import com.samczsun.skype4j.chat.IndividualChat;
 import com.samczsun.skype4j.exceptions.ChatNotFoundException;
 import com.samczsun.skype4j.exceptions.ConnectionException;
+import com.samczsun.skype4j.internal.SkypeImpl;
+import com.samczsun.skype4j.internal.UserImpl;
 import com.samczsun.skype4j.user.User;
 
 import java.io.IOException;
@@ -34,7 +36,7 @@ protected ChatIndividual(SkypeImpl skype, String identity) throws ConnectionExce
     }
 
     @Override
-    protected void load() throws ConnectionException, IOException {
+    protected void load() throws ConnectionException {
         if (isLoaded()) {
             return;
         }
diff --git a/src/main/java/com/samczsun/skype4j/internal/chat/messages/ChatMessageImpl.java b/src/main/java/com/samczsun/skype4j/internal/chat/messages/ChatMessageImpl.java
new file mode 100644
index 0000000..de13e58
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/internal/chat/messages/ChatMessageImpl.java
@@ -0,0 +1,99 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.internal.chat.messages;
+
+import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.chat.messages.ChatMessage;
+import com.samczsun.skype4j.formatting.Message;
+import com.samczsun.skype4j.internal.SkypeImpl;
+import com.samczsun.skype4j.internal.UserImpl;
+import com.samczsun.skype4j.internal.chat.ChatImpl;
+import com.samczsun.skype4j.user.User;
+import org.jsoup.helper.Validate;
+
+public abstract class ChatMessageImpl implements ChatMessage {
+    private Chat chat;
+    private User sender;
+    private String clientId;
+    private String id;
+    private Message message;
+    private long time;
+    private SkypeImpl skype;
+
+    public ChatMessageImpl(Chat chat, User sender, String id, String clientId, long time, Message message, SkypeImpl skype) {
+        this.chat = chat;
+        this.sender = sender;
+        this.id = id;
+        this.clientId = clientId;
+        this.time = time;
+        this.message = message;
+        this.skype = skype;
+    }
+
+    @Override
+    public String getClientId() {
+        return clientId;
+    }
+
+    @Override
+    public User getSender() {
+        return this.sender;
+    }
+
+    @Override
+    public Message getContent() {
+        return message;
+    }
+
+    @Override
+    public long getSentTime() {
+        return time;
+    }
+
+    @Override
+    public Chat getChat() {
+        return chat;
+    }
+
+    @Override
+    public String getId() {
+        return this.id;
+    }
+
+    @Override
+    public SkypeImpl getClient() {
+        return this.skype;
+    }
+
+    public static ChatMessage createMessage(Chat chat, User user, String id, String clientId, long time, Message message, SkypeImpl skype) {
+        Validate.notNull(chat, "Chat must not be null");
+        Validate.isTrue(chat instanceof ChatImpl, "Chat must be instanceof ChatImpl");
+        Validate.notNull(user, "User must not be null");
+        Validate.isTrue(user instanceof UserImpl, "User must be instanceof UserImpl");
+        Validate.notNull(message, "Message must not be null");
+        if (((ChatImpl) chat).getClient().getUsername().equals(user.getUsername())) {
+            return new SentMessageImpl(chat, user, id, clientId, time, message, skype);
+        } else {
+            return new ReceivedMessageImpl(chat, user, id, clientId, time, message, skype);
+        }
+    }
+
+    public void edit0(Message newMessage) {
+        this.message = newMessage;
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/internal/chat/messages/ReceivedMessageImpl.java b/src/main/java/com/samczsun/skype4j/internal/chat/messages/ReceivedMessageImpl.java
new file mode 100644
index 0000000..5f273ca
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/internal/chat/messages/ReceivedMessageImpl.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.internal.chat.messages;
+
+import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.chat.messages.ReceivedMessage;
+import com.samczsun.skype4j.formatting.Message;
+import com.samczsun.skype4j.internal.SkypeImpl;
+import com.samczsun.skype4j.user.User;
+
+public class ReceivedMessageImpl extends ChatMessageImpl implements ReceivedMessage {
+    public ReceivedMessageImpl(Chat chat, User user, String id, String clientId, long time, Message message, SkypeImpl skype) {
+        super(chat, user, id, clientId, time, message, skype);
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/internal/chat/messages/SentMessageImpl.java b/src/main/java/com/samczsun/skype4j/internal/chat/messages/SentMessageImpl.java
new file mode 100644
index 0000000..a3cd799
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/internal/chat/messages/SentMessageImpl.java
@@ -0,0 +1,72 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.internal.chat.messages;
+
+import com.eclipsesource.json.JsonObject;
+import com.samczsun.skype4j.chat.Chat;
+import com.samczsun.skype4j.chat.messages.SentMessage;
+import com.samczsun.skype4j.exceptions.ConnectionException;
+import com.samczsun.skype4j.exceptions.SkypeException;
+import com.samczsun.skype4j.formatting.Message;
+import com.samczsun.skype4j.formatting.Text;
+import com.samczsun.skype4j.internal.ConnectionBuilder;
+import com.samczsun.skype4j.internal.Endpoints;
+import com.samczsun.skype4j.internal.SkypeImpl;
+import com.samczsun.skype4j.internal.chat.ChatImpl;
+import com.samczsun.skype4j.user.User;
+
+import javax.net.ssl.HttpsURLConnection;
+import java.io.IOException;
+import java.net.HttpURLConnection;
+import java.net.URL;
+
+public class SentMessageImpl extends ChatMessageImpl implements SentMessage {
+    public SentMessageImpl(Chat chat, User user, String id, String clientId, long time, Message message, SkypeImpl skype) {
+        super(chat, user, id, clientId, time, message, skype);
+    }
+
+    @Override
+    public void edit(Message newMessage) throws ConnectionException {
+        try {
+            JsonObject obj = new JsonObject();
+            obj.add("content", newMessage.write());
+            obj.add("messagetype", "RichText");
+            obj.add("contenttype", "text");
+            obj.add("skypeeditedid", this.getClientId());
+
+            ConnectionBuilder builder = new ConnectionBuilder();
+            builder.setUrl(String.format(Endpoints.SEND_MESSAGE_URL, this.getChat().getIdentity()));
+            builder.setMethod("POST", true);
+            builder.addHeader("RegistrationToken", getClient().getRegistrationToken());
+            builder.setData(obj);
+
+            HttpURLConnection con = builder.build();
+
+            if (con.getResponseCode() != 201) {
+                throw getClient().generateException("While editing a message", con);
+            }
+        } catch (IOException e) {
+            throw getClient().generateException("While editing a message", e);
+        }
+    }
+
+    @Override
+    public void delete() throws ConnectionException {
+        edit(Message.create().with(Text.BLANK));
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/internal/chat/objects/ReceivedFileImpl.java b/src/main/java/com/samczsun/skype4j/internal/chat/objects/ReceivedFileImpl.java
new file mode 100644
index 0000000..0e7bb0b
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/internal/chat/objects/ReceivedFileImpl.java
@@ -0,0 +1,47 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.internal.chat.objects;
+
+import com.samczsun.skype4j.chat.objects.ReceivedFile;
+
+public class ReceivedFileImpl implements ReceivedFile {
+    private String name;
+    private long size;
+    private long tid;
+
+    public ReceivedFileImpl(String name, long size, long tid) {
+        this.name = name;
+        this.size = size;
+        this.tid = tid;
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    @Override
+    public long getSize() {
+        return size;
+    }
+
+    @Override
+    public long getTid() {
+        return tid;
+    }
+}
diff --git a/src/main/java/com/samczsun/skype4j/user/ContactRequest.java b/src/main/java/com/samczsun/skype4j/user/ContactRequest.java
new file mode 100644
index 0000000..8ad9531
--- /dev/null
+++ b/src/main/java/com/samczsun/skype4j/user/ContactRequest.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright 2015 Sam Sun <me@samczsun.com>
+ *
+ * This file is part of Skype4J.
+ *
+ * Skype4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * Skype4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with Skype4J.
+ * If not, see http://www.gnu.org/licenses/.
+ */
+
+package com.samczsun.skype4j.user;
+
+import com.samczsun.skype4j.exceptions.ConnectionException;
+
+import java.util.Date;
+
+/**
+ * Represents a contact request that is pending.
+ *
+ * TODO: Move to a different package?
+ */
+public interface ContactRequest {
+
+    /**
+     * Get the time at which this contact request was sent
+     * @return The time it was sent
+     */
+    Date getTime();
+
+    /**
+     * Get the user who sent this contact request
+     * @return The contact
+     */
+    Contact getSender();
+
+    /**
+     * Get the custom message sent by the sender
+     * @return The message
+     */
+    String getMessage();
+
+    /**
+     * Accept the contact request represented by this object
+     * @throws ConnectionException If the accepting of the contact request failed
+     */
+    void accept() throws ConnectionException;
+}
diff --git a/src/main/java/com/samczsun/skype4j/user/User.java b/src/main/java/com/samczsun/skype4j/user/User.java
index 2acf7d9..a95fe19 100644
--- a/src/main/java/com/samczsun/skype4j/user/User.java
+++ b/src/main/java/com/samczsun/skype4j/user/User.java
@@ -18,7 +18,7 @@
 package com.samczsun.skype4j.user;
 
 import com.samczsun.skype4j.chat.Chat;
-import com.samczsun.skype4j.chat.ChatMessage;
+import com.samczsun.skype4j.chat.messages.ChatMessage;
 
 import java.util.List;
 
