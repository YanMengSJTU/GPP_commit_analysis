diff --git a/tape/src/main/java/com/squareup/tape/FileObjectBiQueue.java b/tape/src/main/java/com/squareup/tape/FileObjectBiQueue.java
new file mode 100644
index 0000000..8eaf488
--- /dev/null
+++ b/tape/src/main/java/com/squareup/tape/FileObjectBiQueue.java
@@ -0,0 +1,47 @@
+package com.squareup.tape;
+
+import java.io.File;
+import java.io.IOException;
+
+/**
+ * Created by andreas on 05.02.2016.
+ */
+public class FileObjectBiQueue<T> extends FileObjectQueue<T> implements ObjectBiQueue<T> {
+
+    public FileObjectBiQueue(File file, Converter converter) throws IOException {
+        super(file, converter);
+    }
+
+    @Override
+    public void addTail(T entry) {
+        try {
+            bytes.reset();
+            converter.toStream(entry, bytes);
+            queueFile.add(bytes.getArray(), 4711, bytes.size());    // todo -- add at the tail
+            if (listener != null) listener.onAdd(this, entry);
+        } catch (IOException e) {
+            throw new FileException("Failed to add entry.", e, file);
+        }
+    }
+
+    @Override
+    public T peekTail() {
+        try {
+            byte[] bytes = queueFile.peek();  // todo -- peek at the tail
+            if (bytes == null) return null;
+            return converter.from(bytes);
+        } catch (IOException e) {
+            throw new FileException("Failed to peek.", e, file);
+        }    }
+
+    @Override
+    public void removeTail() {
+        try {
+            queueFile.remove(); // todo -- remove at the tail
+            if (listener != null) listener.onRemove(this);
+        } catch (IOException e) {
+            throw new FileException("Failed to remove.", e, file);
+        }    }
+
+
+}
diff --git a/tape/src/main/java/com/squareup/tape/FileObjectQueue.java b/tape/src/main/java/com/squareup/tape/FileObjectQueue.java
index 2c70b48..c637c1a 100644
--- a/tape/src/main/java/com/squareup/tape/FileObjectQueue.java
+++ b/tape/src/main/java/com/squareup/tape/FileObjectQueue.java
@@ -25,13 +25,13 @@
  */
 public class FileObjectQueue<T> implements ObjectQueue<T> {
   /** Backing storage implementation. */
-  private final QueueFile queueFile;
+  protected final QueueFile queueFile;
   /** Reusable byte output buffer. */
-  private final DirectByteArrayOutputStream bytes = new DirectByteArrayOutputStream();
+  protected final DirectByteArrayOutputStream bytes = new DirectByteArrayOutputStream();
   /** Keep file around for error reporting. */
-  private final File file;
-  private final Converter<T> converter;
-  private Listener<T> listener;
+  protected final File file;
+  protected final Converter<T> converter;
+  protected Listener<T> listener;
 
   public FileObjectQueue(File file, Converter<T> converter) throws IOException {
     this.file = file;
@@ -155,7 +155,7 @@ public final void close() {
   }
 
   /** Enables direct access to the internal array. Avoids unnecessary copying. */
-  private static class DirectByteArrayOutputStream extends ByteArrayOutputStream {
+  protected static class DirectByteArrayOutputStream extends ByteArrayOutputStream {
     public DirectByteArrayOutputStream() {
       super();
     }
diff --git a/tape/src/main/java/com/squareup/tape/ObjectBiQueue.java b/tape/src/main/java/com/squareup/tape/ObjectBiQueue.java
new file mode 100644
index 0000000..9047ff3
--- /dev/null
+++ b/tape/src/main/java/com/squareup/tape/ObjectBiQueue.java
@@ -0,0 +1,20 @@
+package com.squareup.tape;
+
+/**
+ * Created by andreas on 05.02.2016.
+ */
+public interface ObjectBiQueue<T> extends  ObjectQueue<T>  {
+
+    /** Enqueues an entry that can be processed at any time. */
+    void addTail(T entry);
+
+    /**
+     * Returns the tail of the queue, or {@code null} if the queue is empty. Does not modify the
+     * queue.
+     */
+    T peekTail();
+
+    /** Removes the tail of the queue. */
+    void removeTail();
+
+}
