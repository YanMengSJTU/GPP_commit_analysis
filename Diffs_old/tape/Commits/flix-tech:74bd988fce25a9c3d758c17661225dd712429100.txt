diff --git a/.travis.yml b/.travis.yml
deleted file mode 100644
index 5b9b476..0000000
--- a/.travis.yml
+++ /dev/null
@@ -1,19 +0,0 @@
-language: android
-
-jdk:
- - oraclejdk7
- - oraclejdk8
-
-android:
-  components:
-    - build-tools-20.0.0
-    - android-16
-  licenses:
-    - android-sdk-license-5be876d5
-
-branches:
-  except:
-    - gh-pages
-
-notifications:
-  email: false
diff --git a/CHANGELOG.md b/CHANGELOG.md
deleted file mode 100644
index 9089317..0000000
--- a/CHANGELOG.md
+++ /dev/null
@@ -1,46 +0,0 @@
-Change Log
-==========
-
-Version 1.2.3 *(2014-10-07)*
-----------------------------
-
- * `close()` method on `FileObjectQueue` now closes underlying `QueueFile`.
- * Fix: Properly move and zero out bytes during copy opertaions.
-
-
-Version 1.2.2 *(2014-03-18)*
-----------------------------
-
- * Fix: Prevent corruption when expanding a perfectly saturated queue.
-
-
-Version 1.2.1 *(2014-03-06)*
-----------------------------
-
- * New: `QueueFile` instances throw an `IOException` on creation if a corrupt header is found.
-
-
-Version 1.2.0 *(2014-01-16)*
-----------------------------
-
- * New: Zero out old records in `clear()` and `remove()`.
-
-
-Version 1.1.1 *(2013-10-21)*
-----------------------------
-
- * Fix: Ensure -1 is returned when no more bytes are available.
- * Fix: Correct read to use position offset in certain cases where it would otherwise use 0.
-
-
-Version 1.1.0 *(2012-11-08)*
-----------------------------
-
- * Allow a `TaskQueue`'s `TaskInjector` to be `null`.
- * `TaskQueue` listener is now called with a reference to the queue instance rather than its delegate.
-
-
-Version 1.0.0 *(2012-09-25)*
-----------------------------
-
-Initial release.
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
deleted file mode 100644
index b21608a..0000000
--- a/CONTRIBUTING.md
+++ /dev/null
@@ -1,18 +0,0 @@
-
-Contributing
-------------
-
-If you would like to contribute code to Tape you can do so through GitHub by
-forking the repository and sending a pull request.
-
-When submitting code, please make every effort to follow existing conventions
-and style in order to keep the code as readable as possible. Please also make
-sure your code compiles by running `mvn clean verify`. Checkstyle failures
-during compilation indicate errors in your style and can be viewed in the
-`checkstyle-result.xml` file.
-
-Before your code can be accepted into the project you must also sign the
-[Individual Contributor License Agreement (CLA)][1].
-
-
- [1]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1
diff --git a/c-tape/.gitignore b/c-tape/.gitignore
deleted file mode 100644
index dcd3cfd..0000000
--- a/c-tape/.gitignore
+++ /dev/null
@@ -1,6 +0,0 @@
-Debug/*
-Release/*
-test.queue
-*.o
-*.d
-.cproject
diff --git a/c-tape/Makefile b/c-tape/Makefile
deleted file mode 100644
index 82f5d83..0000000
--- a/c-tape/Makefile
+++ /dev/null
@@ -1,31 +0,0 @@
-
-SRCS=$(wildcard *.c)
-OBJS=$(SRCS:.c=.o)
-DEPS=$(SRCS:.c=.d)
-
-TEST_SRCS=$(wildcard tests/*.c)
-TEST_OBJS=$(TEST_SRCS:.c=.o)
-TEST_DEPS=$(TEST_SRCS:.c=.d)
-
-OPT_FLAGS=-O3
-
-all: c-tape
-
-debug: OPT_FLAGS=-ggdb
-debug: all
-
-
-c-tape: $(OBJS) $(TEST_OBJS)
-	@echo 'Building target: $@'
-	gcc  -o "c-tape" $(OBJS) $(TEST_OBJS)
-	@echo 'Finished building target: $@'
-	@echo ' '
-
-%.o: %.c
-	@echo 'Building file: $@'
-	gcc $(OPT_FLAGS) -Wall -Wextra -Werror -Wconversion -c -fmessage-length=0 -Wno-unused-function -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@:%.o=%.d)" -o "$@" "$<"
-	@echo 'Finished building: $@'
-	@echo ' '
-
-clean:
-	rm -rf $(OBJS) $(DEPS) $(TEST_OBJS) $(TEST_DEPS) "c-tape"
\ No newline at end of file
diff --git a/c-tape/fileio.c b/c-tape/fileio.c
deleted file mode 100644
index 51326fb..0000000
--- a/c-tape/fileio.c
+++ /dev/null
@@ -1,227 +0,0 @@
-/*
- * Copyright (C) 2012 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <stdbool.h>
-#include <string.h>
-
-#ifdef HAS_SENDFILE
-#include <sys/sendfile.h>
-#endif // HAS_SENDFILE
-
-#include <sys/stat.h>
-#include <unistd.h> // for fsync()
-
-#include "fileio.h"
-#include "logutil.h"
-#include "types.h"
-
-// copy buffer is on stack, use a variable s.t. we can override value in tests.
-static uint32_t copyBufferSize = 4096;
-
-// sanity limit of 2GB
-#define FILE_HARD_SANITY_LIMIT ((uint32_t)(1<<31))
-
-static bool for_testing_failAllWrites = false;
-
-/**
- * File utility primitives somewhat patterned on RandomAccessFile.
- */
-
-bool FileIo_seek(FILE* file, uint32_t position) {
-  if (position > FILE_HARD_SANITY_LIMIT) {
-    LOG(LFATAL, "Requested seek (%d) exceeds sanity hard limit %d", position,
-        FILE_HARD_SANITY_LIMIT);
-    return false;
-  }
-
-  if (fseek(file, (long)position, SEEK_SET) < 0) {
-    LOG(LWARN, "Error setting file position to %d. fhandle %d", position,
-        fileno(file));
-    return false;
-  }
-  return true;
-}
-
-bool FileIo_write(FILE* file, const byte* buffer, uint32_t buffer_offset,
-                  uint32_t length) {
-  if (for_testing_failAllWrites) {
-    LOG(LDEBUG, "Failing write as requested. see for_testing_failAllWrites");
-    return false;
-  }
-  if (length > FILE_HARD_SANITY_LIMIT || buffer_offset > FILE_HARD_SANITY_LIMIT) {
-    LOG(LFATAL, "Requested file write %d or offset %d exceeds sanity hard limit %d",
-        length, buffer_offset, FILE_HARD_SANITY_LIMIT);
-    return false;
-  }
-  if (fwrite(buffer + buffer_offset, (size_t) 1, (size_t) length, file) != length) {
-    LOG(LWARN, "Error writing data, fhandle %d", fileno(file));
-    return false;
-  }
-  if (fflush(file) != 0 || fsync(fileno(file)) != 0) {
-    LOG(LWARN, "Error flushing file, fhandle %d", fileno(file));
-    return false;
-  }
-  return true;
-}
-
-bool FileIo_read(FILE* file, void* buffer, uint32_t buffer_offset,
-                 uint32_t length) {
-  if (length > FILE_HARD_SANITY_LIMIT) {
-    LOG(LFATAL, "Requested seek (%d) exceeds sanity hard limit %d", length,
-        FILE_HARD_SANITY_LIMIT);
-    return false;
-  }
-  if (fread(buffer + buffer_offset, (size_t) 1, (size_t) length, file) != length) {
-    LOG(LWARN, "Error reading element from fhandle %d", fileno(file));
-    return false;
-  }
-  return true;
-}
-
-off_t FileIo_getLength(FILE* file) {
-  struct stat filestat;
-  if (fstat(fileno(file), &filestat) != 0) {
-    LOG(LWARN, "Error getting file stat. fhandle %d", fileno(file));
-    return -1;
-  }
-  return filestat.st_size;
-}
-
-bool FileIo_writeZeros(FILE* file, uint32_t length) {
-  if (for_testing_failAllWrites) {
-    LOG(LDEBUG, "Failing write as requested. see for_testing_failAllWrites");
-    return false;
-  }
-
-  // Length must be multiple of 4.
-  if (length % sizeof(uint32_t) != 0) {
-    LOG(LFATAL, "Initial file length must be multiple of 4 bytes, got %d",
-        length);
-    return false;
-  }
-
-  byte buf[] = {0,0,0,0};
-  uint32_t c;
-  for (c = 0; c <= length / 4; c++) {
-    if (fwrite(buf, sizeof(buf), (size_t)1, file) != 1) {
-      return false;
-    }
-  }
-
-  if (fflush(file) != 0 || fsync(fileno(file)) != 0) {
-    LOG(LWARN, "Error flushing file, fhandle %d", fileno(file));
-    return false;
-  }
-  return true;
-}
-
-bool FileIo_setLength(FILE* file, uint32_t length) {
-  // Some systems allow the file length to be adjusted using truncate, as
-  // some JVMs do.
-  
-  if (for_testing_failAllWrites) {
-    LOG(LDEBUG, "Failing write as requested. see for_testing_failAllWrites");
-    return false;
-  }
-
-  if (length > FILE_HARD_SANITY_LIMIT) {
-    LOG(LFATAL, "Requested file size (%d) exceeds sanity hard limit %d", length,
-        FILE_HARD_SANITY_LIMIT);
-    return false;
-  }
-  if (ftruncate(fileno(file), (off_t)length) != 0 || fsync(fileno(file)) != 0) {
-    LOG(LWARN, "Error setting file length to %d, fhandle %d", length,
-        fileno(file));
-    return false;
-  }
-  return true;
-}
-
-
-bool FileIo_transferTo(FILE* file, uint32_t source, uint32_t destination,
-                       uint32_t length) {
-  // TODO(jochen): if needed, overlap handling to be more accommodating.
-  // TODO(jochen): investigate whether fread and fwrite make efficient use of
-  //               buffering in the FILE handling code.
-
-  if (for_testing_failAllWrites) {
-    LOG(LDEBUG, "Failing write as requested. see for_testing_failAllWrites");
-    return false;
-  }
-
-#ifdef HAS_SENDFILE
-
-  if (!FileIo_seek(file, source)) return false;
-  ssize_t wrote = sendfile(fileno(file), fileno(file), NULL, (size_t) length);
-  if (wrote == -1 || wrote != (size_t) length) {
-    LOG(LWARN, "Error in sendfile. src=%d dest=%d len=%d (%d), fhandle %d",
-        source, destination, length, read, fileno(file));
-    return false;
-  }
-
-#else
-
-  if ((destination > source && source + length > destination) ||
-      (destination < source && destination + length > source)){
-    LOG(LWARN, "Can't transfer between overlapping parts of file. "
-        "src=%d dest=%d len=%d, fhandle %d",
-        source, destination, length, fileno(file));
-    return false;
-  }
-  byte buffer[copyBufferSize];
-
-  while (length > 0) {
-    if (!FileIo_seek(file, source)) return false;
-
-    uint32_t copylen = length < copyBufferSize ? length : copyBufferSize;
-    size_t read = fread(buffer, (size_t) 1, (size_t) copylen, file);
-    if (read < copylen) {
-      LOG(LWARN, "Error reading file, src=%d dest=%d len=%d (%d), fhandle %d",
-          source, destination, length, copylen, fileno(file));
-      return false;
-    }
-    if (!FileIo_seek(file, destination)) return false;
-    size_t wrote = fwrite(buffer, (size_t) 1, read, file);
-    if (wrote < read) {
-      LOG(LWARN, "Error writing file, src=%d dest=%d len=%d (%d), fhandle %d",
-          source, destination, length, read, fileno(file));
-      return false;
-    }
-    length -= wrote;
-    source += wrote;
-    destination += wrote;
-  }
-  if (fflush(file) != 0 || fsync(fileno(file)) != 0) {
-    LOG(LWARN, "Error flushing file, fhandle %d", fileno(file));
-    return false;
-  }
-  
-#endif // HAS_SENDFILE
-  
-  return true;
-}
-
-void _for_testing_FileIo_failAllWrites(int fail) {
-  for_testing_failAllWrites = fail;
-}
-
-uint32_t _for_testing_setTransferToCopyBufferSize(uint32_t newSize) {
-  uint32_t old = copyBufferSize;
-  copyBufferSize = newSize;
-  return old;
-}
diff --git a/c-tape/fileio.h b/c-tape/fileio.h
deleted file mode 100644
index 5ea89b4..0000000
--- a/c-tape/fileio.h
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Copyright (C) 2012 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef FILEIO_H_
-#define FILEIO_H_
-
-#include"types.h"
-
-/**
- * File utility primitives somewhat patterned on RandomAccessFile.
- */
-
-/** Moves the file pointer to given position */
-bool FileIo_seek(FILE* file, uint32_t position);
-
-/** Writes buffer to file, flushes to media. */
-bool FileIo_write(FILE* file, const byte* buffer, uint32_t buffer_offset,
-                  uint32_t length);
-
-bool FileIo_read(FILE* file, void* buffer, uint32_t buffer_offset,
-                 uint32_t length);
-
-/** @return file length or -1 on error */
-off_t FileIo_getLength(FILE* file);
-
-/**
-  * Writes length 0s to file, flushes to media. Starts at current file position.
-  * @param length must be multiple of 4.
-  */
-bool FileIo_writeZeros(FILE* file, uint32_t length);
-
-/**
- * Sets the file length.
- * (Some systems allow the file length to be adjusted using truncate, as
- * some JVMs do for RandomAccessFile.setLength.
- * TODO(jochen): test this for iOS and Android).
- */
-bool FileIo_setLength(FILE* file, uint32_t length);
-
-/**
- * Copies part of a file to another offset, the caller is responsible for
- * checking that there is enough data from the source to cover length.
- * The parts to transfer may not overlap.
- * TODO: investigate whether fread and fwrite make efficient use of the
- *       FILE's read cache.
- */
-bool FileIo_transferTo(FILE* file, uint32_t source, uint32_t destination,
-                       uint32_t length);
-
-/**
- * For testing only, enable or disable writes, for some reason the _Bool
- * macro expansion causes warnings? when called with a bool??
- */
-void _for_testing_FileIo_failAllWrites(int fail);
-
-/**
- * For testing only, set the size of the copy buffer for the transferTo function.
- * returns the old size.
- */
-uint32_t _for_testing_setTransferToCopyBufferSize(uint32_t newSize);
-
-#endif
diff --git a/c-tape/logutil.c b/c-tape/logutil.c
deleted file mode 100644
index 8100177..0000000
--- a/c-tape/logutil.c
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * Copyright (C) 2012 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <execinfo.h>
-#include <limits.h>
-#include <stdarg.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-
-#include "logutil.h"
-
-static enum loglevel currentloglevel = _LOGLEVEL_WARN;
-static enum loglevel currentDebugFailloglevel = 9999;
-
-
-void _log_setlevel(enum loglevel ll) {
-  currentloglevel = ll;
-}
-
-void _log_debug_failatlevel(enum loglevel ll) {
-  currentDebugFailloglevel = ll;
-}
-
-static void printStackTrace();
-
-int _log_vprintf(enum loglevel level, char* file, int line, char* msg, ...) {
-  if (currentloglevel <= level) {
-    va_list args;
-    va_start (args, msg);
-    fprintf (stdout, "%s:%d [%d] ", file, line, level);
-    vfprintf (stdout, msg, args);
-    fprintf (stdout, "\n");
-    va_end (args);
-
-    if (currentloglevel >= currentDebugFailloglevel) {
-      fprintf(stdout, "*** quitting, logged above debug fail level, see LOG_SETDEBUGFAILLEVEL_WARN or LOG_SETDEBUGFAILLEVEL_FATAL\n");
-      printStackTrace();
-      abort();
-    }
-    return 1;
-  }
-  return 0;
-}
-
-static void printStackTrace() {
-  void* addrlist[100];
-  int addrlen = backtrace(addrlist, (int)(sizeof(addrlist) / sizeof(void*)));
-  if (addrlen == 0) {
-    fprintf(stderr, "\n" );
-    return;
-  }
-  char** symbols = backtrace_symbols(addrlist, addrlen);
-  int i;
-  for (i = 1; i < addrlen; i++ )
-    fprintf(stderr, "%s\n", symbols[i]);
-  free(symbols);
-}
diff --git a/c-tape/logutil.h b/c-tape/logutil.h
deleted file mode 100644
index cd24131..0000000
--- a/c-tape/logutil.h
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Copyright (C) 2012 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef LOGUTIL_H_
-#define LOGUTIL_H_
-
-/*
- * Bare bones logging tool.
- *
- * Usage example:
- *
- *   LOG(LINFO, "This prints to a logfile, hello %s, this is a number: %d", name, value);
- *   LOG_SETLEVEL_WARN;
- *   LOG(LFATAL, "This prints to a logfile, hello %s, this is a number: %d", name, value);
- *
- * TODO(jochen): consider using log4c.
- */
-
-#define LOG _log_vprintf
-
-// TODO(jochen): use varidic macros.
-#define LDEBUG _LOGLEVEL_DEBUG, __FILE__, __LINE__
-#define LINFO _LOGLEVEL_INFO, __FILE__, __LINE__
-#define LWARN _LOGLEVEL_WARN, __FILE__, __LINE__
-#define LFATAL _LOGLEVEL_FATAL, __FILE__, __LINE__
-
-#define LOG_SETLEVEL_DEBUG _log_setlevel(_LOGLEVEL_DEBUG)
-#define LOG_SETLEVEL_INFO _log_setlevel(_LOGLEVEL_INFO)
-#define LOG_SETLEVEL_WARN _log_setlevel(_LOGLEVEL_WARN)
-#define LOG_SETLEVEL_FATAL _log_setlevel(_LOGLEVEL_FATAL)
-
-
-/** Used for debug builds, will fail program with stack trace */
-#define LOG_SETDEBUGFAILLEVEL_WARN _log_debug_failatlevel(_LOGLEVEL_WARN)
-/** Used for debug builds, will fail program with stack trace */
-#define LOG_SETDEBUGFAILLEVEL_FATAL _log_debug_failatlevel(_LOGLEVEL_FATAL)
-
-enum loglevel {
-  _LOGLEVEL_DEBUG = 0, _LOGLEVEL_INFO, _LOGLEVEL_WARN, _LOGLEVEL_FATAL
-};
-
-void _log_setlevel(enum loglevel);
-void _log_debug_failatlevel(enum loglevel);
-
-/** returns 1 if something was printed, else 0 */
-int _log_vprintf(enum loglevel, char* file, int line, char* msg, ...);
-
-#endif
diff --git a/c-tape/queuefile.c b/c-tape/queuefile.c
deleted file mode 100644
index 4e1a44d..0000000
--- a/c-tape/queuefile.c
+++ /dev/null
@@ -1,787 +0,0 @@
-/*
- * Copyright (C) 2012 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <pthread.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-
-#include "fileio.h"
-#include "logutil.h"
-#include "queuefile.h"
-
-/*
- * Port of Tape project from Java. https://github.com/square/tape
- *
- * Integers are forced to be 32-bit, maximum file size supported is 2^32 (4GB).
- *
- * See description in queuefile.h.
- */
-
-/** frees if oldPointer is not NULL, assigns newPointer. */
-#define freeAndAssign(OLD, NEW) _freeAndAssign((void**)(OLD), (void*)(NEW))
-static bool _freeAndAssign(void** oldPointer, void* newPointer);
-
-/** frees and assigns oldPointer IFF newPointer is not NULL. */
-#define freeAndAssignNonNull(OLD, NEW) _freeAndAssignNonNull((void**)(OLD), (void*)(NEW))
-static bool _freeAndAssignNonNull(void** oldPointer, void* newPointer);
-
-// Use macro to maintain line number
-#define NULLARG(P) ((P) == NULL ? LOG(LWARN, "Null argument passed") || 1 : 0)
-#define CHECKOOM(P) ((P) == NULL ? LOG(LWARN, "Out of memory") || 1 : 0)
-
-// For sanity tests
-#define MAX_FILENAME_LEN 4096
-
-// ------------------------------ Element -----------------------------------
-
-
-#define Element_HEADER_LENGTH 4
-
-/** A pointer to an element. */
-typedef struct {
-  /** Position in file. */
-  uint32_t position;
-  /** The length of the data. */
-  uint32_t length;
-} Element;
-
-/**
- * Constructs a new element.
- *
- * @param position within file
- * @param length   of data
- */
-static Element* Element_new(uint32_t position, uint32_t length) {
-  Element* e = malloc(sizeof(Element));
-  if (CHECKOOM(e)) return NULL;
-  e->position = position;
-  e->length = length;
-  return e;
-}
-
-static void Element_fprintf(Element* e, FILE* fout) {
-  fprintf(fout, "Element:[position = %d, length = %d]",
-          e->position, e->length);
-}
-
-
-// ------------------------------ QueueFile -----------------------------------
-
-
-/** Initial file size in bytes. */
-#define QueueFile_INITIAL_LENGTH 4096 // one file system block
-
-/** Length of header in bytes. */
-#define QueueFile_HEADER_LENGTH 16 // May not be shorter than 16 bytes.
-
-struct _QueueFile {
-  
-  /**
-   * The underlying file. Uses a ring buffer to store entries. Designed so that
-   * a modification isn't committed or visible until we write the header. The
-   * header is much smaller than a segment. So long as the underlying file
-   * system supports atomic segment writes, changes to the queue are atomic.
-   * Storing the file length ensures we can recover from a failed expansion
-   * (i.e. if setting the file length succeeds but the process dies before the
-   * data can be copied).
-   *
-   *   Format:
-   *     Header              (16 bytes)
-   *     Element Ring Buffer (File Length - 16 bytes)
-   *
-   *   Header:
-   *     File Length            (4 bytes)
-   *     Element Count          (4 bytes)
-   *     First Element Position (4 bytes, =0 if null)
-   *     Last Element Position  (4 bytes, =0 if null)
-   *
-   *   Element:
-   *     Length (4 bytes)
-   *     Data   (Length bytes)
-   */
-  FILE* file;
-  
-  /** Cached file length. Always a power of 2. */
-  uint32_t fileLength;
-  
-  /** Number of elements. */
-  uint32_t elementCount;
-  
-  /** Pointer to first (or eldest) element. */
-  Element* first;
-  
-  /** Pointer to last (or newest) element. */
-  Element* last;
-  
-  /** In-memory buffer. Big enough to hold the header. */
-  byte buffer[QueueFile_HEADER_LENGTH];
-
-  /** mutex to synchronize method access */
-  pthread_mutex_t mutex;
-};
-
-static bool initialize(char* filename);
-static bool QueueFile_readHeader(QueueFile* qf);
-
-// see description in queuefile.h.
-QueueFile* QueueFile_new(char* filename) {
-  if (NULLARG(filename)) return NULL;
-  QueueFile* qf = malloc(sizeof(QueueFile));
-  if (CHECKOOM(qf)) return NULL;
-  memset(qf, 0, sizeof(QueueFile)); // making sure pointers & counters are null!
-  
-  qf->file = fopen(filename, "r+");
-  if (qf->file == NULL) {
-    if (initialize(filename)) {
-      qf->file = fopen(filename, "r+");
-    }
-    if (qf->file == NULL) {
-      free(qf);
-      return NULL;
-    }
-  }
-  if (!QueueFile_readHeader(qf)) {
-    fclose(qf->file);
-    free(qf);
-    return NULL;
-  }
-
-  // TODO(jochen): consider NP mutex options, audit code for re-entrancy and
-  //    eliminate recursive option if needed.
-  // NOTE: there was a problem with static initializers on OSX
-  //    http://gcc.gnu.org/bugzilla/show_bug.cgi?id=51906
-  pthread_mutexattr_t mta;
-  pthread_mutexattr_init(&mta);
-  pthread_mutexattr_settype(&mta, PTHREAD_MUTEX_RECURSIVE);
-  pthread_mutex_init(&qf->mutex, &mta);
-
-  return qf;
-}
-
-// see description in queuefile.h.
-bool QueueFile_closeAndFree(QueueFile* qf) {
-  pthread_mutex_lock(&qf->mutex);
-  bool success = !fclose(qf->file);
-  if (success) {
-    if (qf != NULL) {
-      if (qf->first != NULL) {
-        free(qf->first);
-      }
-      if (qf->last != NULL && qf->last != qf->first) free(qf->last);
-      qf->first = qf->last = NULL;
-    }
-  }
-  pthread_mutex_unlock(&qf->mutex);
-
-  if (success)
-    free(qf);
-
-  return success;
-}
-
-/**
- * Stores unsigned int in buffer (big endian).
- */
-static void writeInt(byte* buffer, uint32_t offset, uint32_t value) {
-  buffer[offset] = (byte) (value >> 24);
-  buffer[offset + 1] = (byte) (value >> 16);
-  buffer[offset + 2] = (byte) (value >> 8);
-  buffer[offset + 3] = (byte) value;
-}
-
-/**
- * Stores unsigned ints into a buffer, in the order of parameters passed.
- */
-static void writeInts(byte* buffer, uint32_t v1, uint32_t v2, uint32_t v3,
-                      uint32_t v4) {
-  writeInt(buffer, 0, v1);
-  writeInt(buffer, 4, v2);
-  writeInt(buffer, 8, v3);
-  writeInt(buffer, 12, v4);
-}
-
-/** Reads an unsigned int from a buffer (assumes big endian). */
-static uint32_t readInt(byte* buffer, uint32_t offset) {
-  return ((buffer[offset] & 0xff) << 24)
-         + ((buffer[offset + 1] & 0xff) << 16)
-         + ((buffer[offset + 2] & 0xff) << 8)
-         + (buffer[offset + 3] & 0xff);
-}
-
-
-
-static Element* QueueFile_readElement(QueueFile* qf, uint32_t position);
-
-/** Reads the header. */
-static bool QueueFile_readHeader(QueueFile* qf) {
-  if (!FileIo_seek(qf->file, 0) ||
-      !FileIo_read(qf->file, qf->buffer, 0, (uint32_t) sizeof(qf->buffer))) {
-    return false;
-  }
-
-  qf->fileLength = readInt(qf->buffer, 0);
-  uint32_t actualLength = (uint32_t) FileIo_getLength(qf->file);
-  if (qf->fileLength > actualLength) {
-    LOG(LWARN, "File is truncated. Expected length: %d, Actual length: %d",
-        qf->fileLength,  actualLength);
-    return false;
-  }
-
-  qf->elementCount = readInt(qf->buffer, 4);
-  uint32_t firstOffset = readInt(qf->buffer, 8);
-  uint32_t lastOffset = readInt(qf->buffer, 12);
-  return freeAndAssign(&qf->first, QueueFile_readElement(qf, firstOffset)) &&
-         freeAndAssign(&qf->last, QueueFile_readElement(qf, lastOffset));
-}
-
-/**
- * Writes header atomically. The arguments contain the updated values. The
- * class member fields should not have changed yet. This only updates the
- * state in the file. It's up to the caller to update the class member
- * variables *after* this call succeeds. Assumes segment writes are atomic in
- * the underlying file system.
- */
-static bool QueueFile_writeHeader(QueueFile* qf, uint32_t fileLength,
-                                  uint32_t elementCount, uint32_t firstPosition,
-                                  uint32_t lastPosition) {
-  writeInts(qf->buffer, fileLength, elementCount, firstPosition, lastPosition);
-  return FileIo_seek(qf->file, 0) &&
-         FileIo_write(qf->file, qf->buffer, 0, QueueFile_HEADER_LENGTH);
-}
-
-
-/** 
- * Returns the Element for the given offset. CALLER MUST FREE MEMORY.
- */
-static Element* QueueFile_readElement(QueueFile* qf, uint32_t position) {
-  if (position == 0 ||
-      !FileIo_seek(qf->file, position) ||
-      !FileIo_read(qf->file, qf->buffer, 0, (uint32_t) sizeof(uint32_t))) {
-    return NULL;
-  }
-  uint32_t length = readInt(qf->buffer, 0);
-  return Element_new(position, length);
-}
-
-
-char* makeTempFilename(const char* name, int maxLen);
-
-/** Atomically initializes a new file. */
-static bool initialize(char* filename) {
-  if (QueueFile_HEADER_LENGTH < 16) {
-    LOG(LFATAL, "Configuration error, header length must be >= 16 bytes");
-    return false;
-  }
-
-  char* tempname = makeTempFilename(filename, MAX_FILENAME_LEN);
-  if (tempname == NULL) {
-    LOG(LWARN, "Filename too long or out of memory: %s", filename);
-    return false;
-  }
-
-  FILE* tempfile = fopen(tempname, "w+");
-  if (tempfile == NULL) {
-    free(tempname);
-    return false;
-  }
-  
-  bool success = false;
-  // TODO(jochen): if truncate in setLength does not work for target platform, consider
-  //  appending 0s using FileIo_writeZeros.
-  if (FileIo_setLength(tempfile, QueueFile_INITIAL_LENGTH)) {
-    byte headerBuffer[QueueFile_HEADER_LENGTH];
-    writeInts(headerBuffer, QueueFile_INITIAL_LENGTH, 0, 0, 0);
-    success = FileIo_write(tempfile, headerBuffer, 0, QueueFile_HEADER_LENGTH);
-  }
-
-  fclose(tempfile);
-  success = success && rename(tempname, filename) == 0;
-  if (!success) {
-    LOG(LFATAL, "Error initializing temporary file %s", tempname);
-    remove(tempname);
-  }
-  free(tempname);
-  return success;
-}
-
-/** Wraps the position if it exceeds the end of the file. */
-static uint32_t QueueFile_wrapPosition(const QueueFile* qf, uint32_t position) {
-  return position < qf->fileLength ?
-         position : QueueFile_HEADER_LENGTH + position - qf->fileLength;
-}
-
-/**
- * Writes count bytes from buffer to position in file. Automatically wraps
- * write if position is past the end of the file or if buffer overlaps it.
- *
- * @param position in file to write to
- * @param buffer   to write from
- * @param count    # of bytes to write
- */
-static bool QueueFile_ringWrite(QueueFile* qf, uint32_t position,
-                                const byte* buffer,
-    uint32_t offset, uint32_t count) {
-  bool success = false;
-  position = QueueFile_wrapPosition(qf, position);
-  if (position + count <= qf->fileLength) {
-    success = FileIo_seek(qf->file, position) &&
-              FileIo_write(qf->file, buffer, offset, count);
-  } else {
-    // The write overlaps the EOF.
-    // # of bytes to write before the EOF.
-    uint32_t beforeEof = qf->fileLength - position;
-    success = FileIo_seek(qf->file, position) &&
-              FileIo_write(qf->file, buffer, offset, beforeEof) &&
-              FileIo_seek(qf->file, QueueFile_HEADER_LENGTH) &&
-              FileIo_write(qf->file, buffer, offset + beforeEof,
-                           count - beforeEof);
-  }
-  return success;
-}
-
-/**
- * Reads count bytes into buffer from file. Wraps if necessary.
- *
- * @param position in file to read from
- * @param buffer   to read into
- * @param count    # of bytes to read
- */
-static bool QueueFile_ringRead(QueueFile* qf, uint32_t position, byte* buffer,
-                               uint32_t offset, uint32_t count) {
-  bool success = false;
-  position = QueueFile_wrapPosition(qf, position);
-  if (position + count <= qf->fileLength) {
-    success = FileIo_seek(qf->file, position) &&
-              FileIo_read(qf->file, buffer, 0, count);
-  } else {
-    // The read overlaps the EOF.
-    // # of bytes to read before the EOF.
-    uint32_t beforeEof = qf->fileLength - position;
-
-    success = FileIo_seek(qf->file, position) &&
-              FileIo_read(qf->file, buffer, offset, beforeEof) &&
-              FileIo_seek(qf->file, QueueFile_HEADER_LENGTH) &&
-              FileIo_read(qf->file, buffer, offset + beforeEof, count -
-                          beforeEof);
-  }
-  return success;
-}
-
-// see description in queuefile.h.
-bool QueueFile_isEmpty(QueueFile* qf) {
-  if (NULLARG(qf)) return true;
-  pthread_mutex_lock(&qf->mutex);
-  uint32_t elementCount = qf->elementCount == 0;
-  pthread_mutex_unlock(&qf->mutex);
-  return elementCount;
-}
-
-static bool QueueFile_expandIfNecessary(QueueFile* qf, uint32_t dataLength);
-
-// see description in queuefile.h.
-bool QueueFile_add(QueueFile* qf, const byte* data, uint32_t offset,
-                   uint32_t count) {
-  if (NULLARG(qf) || NULLARG(data)) return false;
-
-  bool success = false;
-  pthread_mutex_lock(&qf->mutex);
-
-  if (QueueFile_expandIfNecessary(qf, count)) {
-    
-    // Insert a new element after the current last element.
-    bool wasEmpty = QueueFile_isEmpty(qf);
-    uint32_t position = wasEmpty ? QueueFile_HEADER_LENGTH :
-                        QueueFile_wrapPosition(qf, qf->last->position +
-                                               Element_HEADER_LENGTH +
-                                               qf->last->length);
-    Element* newLast = Element_new(position, count);
-
-    // Write length & data.
-    writeInt(qf->buffer, 0, count);
-    if (newLast != NULL) {
-      if (QueueFile_ringWrite(qf, newLast->position, qf->buffer, 0,
-                              Element_HEADER_LENGTH) &&
-        QueueFile_ringWrite(qf, newLast->position + Element_HEADER_LENGTH, data,
-                            offset, count)) {
-
-        // Commit the addition. If wasEmpty, first == last.
-        uint32_t firstPosition = wasEmpty ? newLast->position : qf->first->position;
-        success = QueueFile_writeHeader(qf, qf->fileLength, qf->elementCount + 1,
-                                        firstPosition, newLast->position);
-      }
-      if (success) {
-        if (freeAndAssignNonNull(&qf->last, newLast)) {
-          if (wasEmpty) freeAndAssignNonNull(&qf->first,
-                                             Element_new(qf->last->position,
-                                                         qf->last->length));
-          success = true;
-          qf->elementCount++;
-        }
-      } else {
-        free(newLast);
-      }
-    }
-  }
-
-  pthread_mutex_unlock(&qf->mutex);
-  return success;
-}
-
-/** Returns the number of used bytes. */
-static uint32_t QueueFile_usedBytes(QueueFile* qf) {
-  if (qf->elementCount == 0) return QueueFile_HEADER_LENGTH;
-
-  if (qf->last->position >= qf->first->position) {
-    // Contiguous queue.
-    return (qf->last->position - qf->first->position)   // all but last entry
-           + Element_HEADER_LENGTH + qf->last->length // last entry
-           + QueueFile_HEADER_LENGTH;
-  } else {
-    // tail < head. The queue wraps.
-    return qf->last->position                      // buffer front + header
-           + Element_HEADER_LENGTH + qf->last->length // last entry
-           + qf->fileLength - qf->first->position;        // buffer end
-  }
-}
-
-/** Returns number of unused bytes. */
-static uint32_t QueueFile_remainingBytes(QueueFile* qf) {
-  return qf->fileLength - QueueFile_usedBytes(qf);
-}
-
-/**
- * If necessary, expands the file to accommodate an additional element of the
- * given length.
- *
- * @param dataLength length of data being added
- * @returns false only if an error was encountered.
- */
-static bool QueueFile_expandIfNecessary(QueueFile* qf, uint32_t dataLength) {
-  uint32_t elementLength = Element_HEADER_LENGTH + dataLength;
-  uint32_t remainingBytes = QueueFile_remainingBytes(qf);
-  if (remainingBytes >= elementLength) {
-    return true;
-  }
-
-  // Expand.
-  uint32_t previousLength = qf->fileLength;
-  uint32_t newLength;
-
-  // Double the length until we can fit the new data.
-  do {
-    remainingBytes += previousLength;
-    newLength = previousLength << 1;
-    previousLength = newLength;
-  } while (remainingBytes < elementLength);
-
-  // TODO(jochen): if truncate in setLength does not work for target platform,
-  //  consider appending 0s using FileIo_writeZeros.
-  if (!FileIo_setLength(qf->file, newLength)) {
-    return false;
-  }
-
-  // Calculate the position of the tail end of the data in the ring buffer
-  uint32_t endOfLastElement = QueueFile_wrapPosition(qf, qf->last->position +
-                                                     Element_HEADER_LENGTH +
-                                                     qf->last->length);
-
-  // If the buffer is split, we need to make it contiguous, so append the
-  // tail of the queue to after the end of the old file.
-  if (endOfLastElement < qf->first->position) {
-    uint32_t count = endOfLastElement - Element_HEADER_LENGTH;
-    if (!FileIo_transferTo(qf->file, QueueFile_HEADER_LENGTH,
-                          qf->fileLength, count)) {
-      return false;
-    }
-  }
-
-  // Commit the expansion.
-  if (qf->last->position < qf->first->position) {
-    uint32_t newLastPosition = qf->fileLength + qf->last->position -
-                               QueueFile_HEADER_LENGTH;
-    if (!QueueFile_writeHeader(qf, newLength, qf->elementCount,
-                               qf->first->position, newLastPosition)) {
-      return false;
-    }
-    if (!freeAndAssignNonNull(&qf->last,
-                             Element_new(newLastPosition, qf->last->length))) {
-      return false;
-    }
-  } else {
-    if (!QueueFile_writeHeader(qf, newLength, qf->elementCount,
-                              qf->first->position, qf->last->position)) {
-      return false;
-    }
-  }
-  qf->fileLength = newLength;
-  return true;
-}
-
-// see description in queuefile.h.
-byte* QueueFile_peek(QueueFile* qf, uint32_t* returnedLength) {
-  if (NULLARG(qf) || NULLARG(returnedLength) || QueueFile_isEmpty(qf)) return NULL;
-  pthread_mutex_lock(&qf->mutex);
-  *returnedLength = 0;
-
-  uint32_t length = qf->first->length;
-  byte* data = malloc((size_t) length);
-  if (CHECKOOM(data)) return NULL;
-  if (!QueueFile_ringRead(qf, qf->first->position + Element_HEADER_LENGTH,
-                         data, 0, length)) {
-    free(data);
-    data = NULL;
-  }
-  *returnedLength = length;
-
-  pthread_mutex_unlock(&qf->mutex);
-  return data;
-}
-
-
-struct _QueueFile_ElementStream {
-  QueueFile* qf;
-  uint32_t position;
-  uint32_t remaining;
-};
-
-// see description in queuefile.h.
-bool QueueFile_readElementStream(QueueFile_ElementStream* stream, byte* buffer,
-                                 uint32_t length, uint32_t* lengthRemaining) {
-  if (NULLARG(stream) || NULLARG(buffer) || NULLARG(lengthRemaining) ||
-      NULLARG(stream->qf)) return false;
-  *lengthRemaining = 0;
-  if (stream->remaining == 0) {
-    return true;
-  }
-  if (length > stream->remaining) length = stream->remaining;
-  if (QueueFile_ringRead(stream->qf, stream->position, buffer, 0, length)) {
-    stream->position = QueueFile_wrapPosition(stream->qf,
-                                              stream->position + length);
-    stream->remaining -= length;
-    *lengthRemaining = stream->remaining;
-  } else {
-    return false;
-  }
-  return true;
-}
-
-// see description in queuefile.h.
-int QueueFile_readElementStreamNextByte(QueueFile_ElementStream* stream) {
-  byte buffer;
-  uint32_t remaining;
-  if (stream->remaining == 0) {
-    return -1;
-  }
-  if (!QueueFile_readElementStream(stream, &buffer, (uint32_t) sizeof(byte),
-                                  &remaining)) {
-    return -1;
-  }
-  return (int)buffer;
-}
-
-// see description in queuefile.h.
-bool QueueFile_peekWithElementReader(QueueFile* qf,
-                                     QueueFile_ElementReaderFunc reader) {
-  if (NULLARG(reader) || NULLARG(qf)) return false;
-  pthread_mutex_lock(&qf->mutex);
-
-  bool success = false;
-  if (qf->elementCount == 0) {
-    success = true;
-  } else {
-    if (qf->first == NULL) {
-      LOG(LFATAL, "Internal error: queue should have a first element.");
-    } else {
-      Element* current = QueueFile_readElement(qf, qf->first->position);
-      if (current != NULL) {
-        QueueFile_ElementStream stream;
-        stream.qf = qf;
-        stream.position = QueueFile_wrapPosition(qf, current->position +
-                                                 Element_HEADER_LENGTH);
-        stream.remaining = current->length;
-        free(current);
-        (*reader)(&stream, stream.remaining);
-        success = true;
-      }
-    }
-  }
-  
-  pthread_mutex_unlock(&qf->mutex);
-  return success;
-}
-
-// see description in queuefile.h.
-bool QueueFile_forEach(QueueFile* qf, QueueFile_ElementReaderFunc reader) {
-  if (NULLARG(reader) || NULLARG(qf)) return false;
-  pthread_mutex_lock(&qf->mutex);
-
-  bool success = false;
-  if (qf->elementCount == 0) {
-    success = true;
-  } else {
-    if (qf->first == NULL) {
-      LOG(LFATAL, "Internal error: queue should have a first element.");
-    } else {
-      uint32_t nextReadPosition = qf->first->position;
-      uint32_t i;
-      bool stopRequested = false;
-      success = true;
-      for (i = 0; i < qf->elementCount && !stopRequested && success; i++) {
-        Element* current = QueueFile_readElement(qf, nextReadPosition);
-        if (current != NULL) {
-          QueueFile_ElementStream stream;
-          stream.qf = qf;
-          stream.position = QueueFile_wrapPosition(qf, current->position +
-                                                   Element_HEADER_LENGTH);
-          stream.remaining = current->length;
-          stopRequested = !(*reader)(&stream, stream.remaining);
-          nextReadPosition = QueueFile_wrapPosition(qf, current->position +
-                                                    Element_HEADER_LENGTH +
-                                                    current->length);
-          free(current);
-        } else {
-          success = false;
-        }
-      }
-    }
-  }
-  
-  pthread_mutex_unlock(&qf->mutex);
-  return success;
-}
-
-// see description in queuefile.h.
-uint32_t QueueFile_size(QueueFile* qf) {
-  if (NULLARG(qf)) return 0;
-  pthread_mutex_lock(&qf->mutex);
-  uint32_t elementCount = qf->elementCount;
-  pthread_mutex_unlock(&qf->mutex);
-  return elementCount;
-}
-
-// see description in queuefile.h.
-bool QueueFile_remove(QueueFile* qf) {
-  if (NULLARG(qf)) return false;
-  pthread_mutex_lock(&qf->mutex);
-
-  bool success = false;
-  if (!QueueFile_isEmpty(qf)) {
-    if (qf->elementCount == 1) {
-      success = QueueFile_clear(qf);
-    } else {
-      // assert elementCount > 1
-      uint32_t newFirstPosition = QueueFile_wrapPosition(qf,
-                                                         qf->first->position +
-                                                         Element_HEADER_LENGTH +
-                                                         qf->first->length);
-      if (QueueFile_ringRead(qf, newFirstPosition, qf->buffer, 0,
-                            Element_HEADER_LENGTH)) {
-        int length = readInt(qf->buffer, 0);
-        if (QueueFile_writeHeader(qf, qf->fileLength, qf->elementCount - 1,
-                                 newFirstPosition, qf->last->position)) {
-          if (freeAndAssignNonNull(&qf->first, Element_new(newFirstPosition,
-                                                          (uint32_t) length))) {
-            --qf->elementCount;
-            success = true;
-          }
-        }
-      }
-    }
-  }
-
-  pthread_mutex_unlock(&qf->mutex);
-  return success;
-}
-
-// see description in queuefile.h.
-bool QueueFile_clear(QueueFile* qf) {
-  if (NULLARG(qf)) return false;
-  bool success = false;
-  pthread_mutex_lock(&qf->mutex);
-
-  if (QueueFile_writeHeader(qf, QueueFile_INITIAL_LENGTH, 0, 0, 0)) {
-    qf->elementCount = 0;
-    if (qf->first != NULL) {
-      free(qf->first);
-    }
-    qf->first = NULL;
-    if (qf->last != NULL) {
-      free(qf->last);
-    }
-    qf->last = NULL;
-    if (qf->fileLength > QueueFile_INITIAL_LENGTH) {
-      if (FileIo_setLength(qf->file, QueueFile_INITIAL_LENGTH)) {
-        qf->fileLength = QueueFile_INITIAL_LENGTH;
-        success = true;
-      }
-    } else {
-      success = true;
-    }
-  }
-
-  pthread_mutex_unlock(&qf->mutex);
-  return success;
-}
-
-// TODO(jochen): bool QueueFile_fprintf(QueueFile *qf);
-
-FILE* _for_testing_QueueFile_getFhandle(QueueFile *qf) {
-  return qf->file;
-}
-
-
-// ---------------------------- Utility Functions ------------------------------
-
-
-/**
- * Make a temporary filename (appends ".tmp") at most maxLen chars long.
- * Caller must free result.
- */
-char* makeTempFilename(const char* filename, int maxLen) {
-  // Use a temp file so we don't leave a partially-initialized file.
-  if (filename == NULL || maxLen < 4) {
-    return NULL;
-  }
-  size_t len = strnlen(filename, (size_t) maxLen - 5) + 5;
-  char* tempname = malloc(len);
-  if (CHECKOOM(tempname)) {
-    return NULL;
-  }
-  strncpy(tempname, filename, len);
-  tempname[len-1] = '\0'; // make sure it's terminated if filename was too long.
-  strcat(tempname, ".tmp");
-  return tempname;
-}
-
-static bool _freeAndAssignNonNull(void** oldPointer, void* newPointer) {
-  if (newPointer != NULL) {
-    if (*oldPointer != NULL) {
-      free(*oldPointer);
-    }
-    *oldPointer = newPointer;
-    return true;
-  }
-  return false;
-}
-
-static bool _freeAndAssign(void** oldPointer, void* newPointer) {
-  if (*oldPointer != NULL) {
-    free(*oldPointer);
-  }
-  *oldPointer = newPointer;
-  return true;
-}
diff --git a/c-tape/queuefile.h b/c-tape/queuefile.h
deleted file mode 100644
index d587726..0000000
--- a/c-tape/queuefile.h
+++ /dev/null
@@ -1,181 +0,0 @@
-/*
- * Copyright (C) 2012 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-
-/*
- * Port of Tape project from Java. https://github.com/square/tape
- *
- * Integers are forced to be 32-bit, maximum file size supported is 2^32 (4GB).
- *
- * Original description:
- *
- * A reliable, efficient, file-based, FIFO queue. Additions and removals are
- * O(1). All operations are atomic. Writes are synchronous; data will be written
- * to disk before an operation returns. The underlying file is structured to
- * survive process and even system crashes. If an I/O exception is thrown during
- * a mutating change, the change is aborted. It is safe to continue to use a
- * {@code QueueFile} instance after an exception.
- *
- * All operations are synchronized. In a traditional queue, the remove
- * operation returns an element. In this queue, {@link #peek} and {@link
- * #remove} are used in conjunction. Use {@code peek} to retrieve the first
- * element, and then {@code remove} to remove it after successful processing. If
- * the system crashes after {@code peek} and during processing, the element will
- * remain in the queue, to be processed when the system restarts.
- *
- * NOTE: The current implementation is built
- * for file systems that support atomic segment writes (like YAFFS). Most
- * conventional file systems don't support this; if the power goes out while
- * writing a segment, the segment will contain garbage and the file will be
- * corrupt. We'll add journaling support so this class can be used with more
- * file systems later.
- *
- */
-
-
-#ifndef QUEUEFILE_H_
-#define QUEUEFILE_H_
-
-#include"types.h"
-
-struct _QueueFile;
-typedef struct _QueueFile QueueFile;
-
-/** 
- * Create new queuefile.
- * @param filename
- * @return new queuefile or NULL on error. 
- */
-QueueFile* QueueFile_new(char* filename);
-
-/** 
- * Closes the underlying file and frees all memory including
- * the pointer passed.
- * @param qf queuefile
- * @return false if an error occurred
- */
-bool QueueFile_closeAndFree(QueueFile* qf);
-
-/**
- * Adds an element to the end of the queue.
- * @param qf queuefile
- * @param data to copy bytes from
- * @param offset to start from in buffer
- * @param count number of bytes to copy
- * @return false if an error occurred
- */
-bool QueueFile_add(QueueFile* qf, const byte* data, uint32_t offset,
-                   uint32_t count);
-
-/** 
- * Reads the eldest element. Returns null if the queue is empty.
- * @param qf queuefile
- * @param returnedLength contains the size of the returned buffer.
- * @return element buffer (null if queue is empty) CALLER MUST FREE THIS
- */
-byte* QueueFile_peek(QueueFile* qf, uint32_t* returnedLength);
-
-
-struct _QueueFile_ElementStream;
-typedef struct _QueueFile_ElementStream QueueFile_ElementStream;
-
-/**
- * Read data from an element stream.
- * @param stream pointer to element stream.
- * @param buffer  to copy bytes to.
- * @param length  size of buffer.
- * @param lengthRemaining if not null, will be set to number of bytes left.
- * @return false if an error occurred.
- *
- * *********************************************************
- * WARNING! MUST ONLY BE USED INSIDE A CALLBACK FROM FOREACH
- * as this ensures the queuefile is under mutex lock.
- * the validity of stream is only guaranteed under this callback.
- * *********************************************************
- */
-bool QueueFile_readElementStream(QueueFile_ElementStream* stream, byte* buffer,
-                                 uint32_t length, uint32_t* lengthRemaining);
-
-/**
- * Reads the next byte.
- * @param stream pointer to element stream.
- * @return as int, or -1 if the element has ended, or on error.
- *
- * *********************************************************
- * WARNING! MUST ONLY BE USED INSIDE A CALLBACK FROM FOREACH
- * as this ensures the queuefile is under mutex lock.
- * the validity of stream is only guaranteed under this callback.
- * *********************************************************
- */
-int QueueFile_readElementStreamNextByte(QueueFile_ElementStream* stream);
-
-/**
- * Function which is called by forEach or peekWithElementReader for each element.
- * @param stream pointer to element stream.
- * @param remaining number of bytes in element.
- * @return false to stop the iteration.
- */
-typedef bool (*QueueFile_ElementReaderFunc)(QueueFile_ElementStream* stream,
-                                            uint32_t remaining);
-
-/**
- * Invokes the given reader once for the first element in the queue.
- * There will be no callback if the queue is empty.
- * @param qf queuefile.
- * @param reader function pointer for callback.
- * @return false if an error occurred.
- */
-bool QueueFile_peekWithElementReader(QueueFile* qf,
-                                     QueueFile_ElementReaderFunc reader);
-
-/**
- * Invokes the given reader once for each element in the queue, from eldest to
- * most recently added. Note that this is under lock.
- * There will be no callback if the queue is empty.
- * @param qf queuefile.
- * @param reader function pointer for callback.
- * @return false if an error occurred.
- */
-bool QueueFile_forEach(QueueFile* qf, QueueFile_ElementReaderFunc reader);
-
-/** Returns true if there are no entries or NULL passed. */
-bool QueueFile_isEmpty(QueueFile* qf);
-
-/** 
- * Clears this queue. Truncates the file to the initial size.
- * @param qf queuefile.
- * @param reader function pointer for callback.
- * @return false if an error occurred.
- */
-bool QueueFile_clear(QueueFile* qf);
-
-/** 
- * @param qf queuefile.
- * @return the number of elements in this queue, or 0 if NULL is passed. 
- */
-uint32_t QueueFile_size(QueueFile* qf);
-
-/**
- * Removes the eldest element.
- * @param qf queuefile.
- * @return false if empty or NULL passed.
- */
-bool QueueFile_remove(QueueFile* qf);
-
-
-FILE* _for_testing_QueueFile_getFhandle(QueueFile* qf);
-
-#endif //queuefile_h
diff --git a/c-tape/tests/minunit.h b/c-tape/tests/minunit.h
deleted file mode 100644
index 31dd904..0000000
--- a/c-tape/tests/minunit.h
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * Copyright (C) 2012 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef MINUNIT_H_
-#define MINUNIT_H_
-
-/*
- * Some minimal unit testing functions.
- */
-
-#define mu_assert(test) do { if (!(test)) { fprintf(stderr, "%s:%d test fail: assertion failure\n",__FILE__, __LINE__); abort(); } } while (0)
-#define mu_assertm(test, message) do { if (!(test)) { fprintf(stderr, "%s:%d test fail:  %s\n",__FILE__, __LINE__, message); abort(); } } while (0)
-#define mu_assertmv(test, ...) do { if (!(test)) { fprintf(stderr, "%s:%d test fail:  ",__FILE__, __LINE__); vfprintf(stderr, __VA_ARGS__); fprintf(stderr, "\n"); abort(); } } while (0)
-#define mu_assert_notnull(test) do { if (!(test)) { fprintf(stderr, "%s:%d test fail:  null pointer\n",__FILE__, __LINE__); abort(); } } while (0)
-#define mu_assert_memcmp(m1, m2, l) do { if(m1==NULL||m2==NULL||memcmp(m1,m2,(size_t)l)!=0) { fprintf(stderr, "%s:%d test fail:  data doesn't match\n",__FILE__, __LINE__); abort(); } } while (0)
-#define mu_run_test(testfn) do { mu_setup(); tests_run++; testfn(); mu_teardown(); } while (0)
-extern int tests_run;
-
-#endif
diff --git a/c-tape/tests/queuefile_test.c b/c-tape/tests/queuefile_test.c
deleted file mode 100644
index 20a2e93..0000000
--- a/c-tape/tests/queuefile_test.c
+++ /dev/null
@@ -1,528 +0,0 @@
-/*
- * Copyright (C) 2012 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <time.h>
-#include <sys/queue.h>
-
-#include "minunit.h"
-
-#include "../logutil.h"
-#include "../queuefile.h"
-#include "../types.h"
-#include "../fileio.h"
-
-/**
- * Takes up 33401 bytes in the queue (N*(N+1)/2+4*N). Picked 254 instead of
- * 255 so that the number of bytes isn't a multiple of 4.
- */
-#define N 254
-static byte* values[N];
-
-#define TEST_QUEUE_FILENAME "test.queue"
-static QueueFile* queue;
-int tests_run = 0;
-
-
-typedef STAILQ_HEAD(listHead_t, listEntry_t) listHead;
-static void _assertPeekCompare(QueueFile *queue, const byte* data,
-                               uint32_t length);
-static void _assertPeekCompareRemove(QueueFile *queue, const byte* data,
-                                     uint32_t length);
-static void _assertPeekCompareRemoveDequeue(QueueFile *queue,
-                                            listHead *expectqueue);
-
-static void mu_setup() {
-  int i;
-  for (i = 0; i < N; i++) {
-    values[i] = malloc((size_t) i);
-    // Example: values[3] = { 3, 2, 1 }
-    int ii;
-    for (ii = 0; ii < i; ii++) values[i][ii] = (byte) (i - ii);
-  }
-
-  // Default case is start with a clean queue.
-  remove(TEST_QUEUE_FILENAME);
-  queue = QueueFile_new(TEST_QUEUE_FILENAME);
-  mu_assert_notnull(queue);
-}
-
-static void mu_teardown() {
-  QueueFile_closeAndFree(queue);
-  int i;
-  for (i = 0; i < N; i++) {
-    free(values[i]);
-  }
-}
-
-static void testSimpleAddOneElement() {
-  byte* expected = values[253];
-  QueueFile_add(queue, expected, 0, 253);
-  _assertPeekCompare(queue, expected, 253);
-}
-
-static void testAddOneElement() {
-  byte* expected = values[253];
-  QueueFile_add(queue, expected, 0, 253);
-  _assertPeekCompare(queue, expected, 253);
-  QueueFile_closeAndFree(queue);
-  queue = QueueFile_new(TEST_QUEUE_FILENAME);
-  _assertPeekCompare(queue, expected, 253);
-}
-
-
-// stuct for test queue.
-struct listEntry_t {
-  byte *data;
-  uint32_t length;
-  STAILQ_ENTRY(listEntry_t) next_entry;
-};
-
-struct listEntry_t* listEntry_new(byte *argdata, uint32_t arglen) {
-  struct listEntry_t* retval = malloc(sizeof(struct listEntry_t));
-  mu_assert_notnull(retval);
-  retval->data = argdata;
-  retval->length = arglen;
-  return retval;
-};
-
-static void testAddAndRemoveElements() {
-  QueueFile_closeAndFree(queue);
-  time_t start = time(NULL);
-
-  listHead expect = STAILQ_HEAD_INITIALIZER(expect);
-  struct listEntry_t* entry;
-
-  int round;
-  for (round = 0; round < 5; round++) {
-    queue = QueueFile_new(TEST_QUEUE_FILENAME);
-    int i;
-    for (i = 0; i < N; i++) {
-      QueueFile_add(queue, values[i], 0, (uint32_t) i);
-      entry = listEntry_new(values[i], (uint32_t) i);
-      STAILQ_INSERT_TAIL(&expect, entry, next_entry);
-    }
-
-    // Leave N elements in round N, 15 total for 5 rounds. Removing all the
-    // elements would be like starting with an empty queue.
-    for (i = 0; i < N - round - 1; i++) {
-      _assertPeekCompareRemoveDequeue(queue, &expect);
-    }
-    QueueFile_closeAndFree(queue);
-  }
-
-  // Remove and validate remaining 15 elements.
-  queue = QueueFile_new(TEST_QUEUE_FILENAME);
-  mu_assert(QueueFile_size(queue) == 15);
-
-  int expectCount = 0;
-  STAILQ_FOREACH(entry, &expect, next_entry) {
-    ++expectCount;
-  }
-  mu_assert(expectCount == 15);
-
-  while (!STAILQ_EMPTY(&expect)) {
-    _assertPeekCompareRemoveDequeue(queue, &expect);
-  }
-
-  time_t stop = time(NULL);
-  LOG(LINFO, "Ran in %lf seconds.", difftime(stop, start));
-}
-
-/** Tests queue expansion when the data crosses EOF. */
-static void testSplitExpansion() {
-  // This should result in 3560 bytes.
-  int max = 80;
-
-  listHead expect = STAILQ_HEAD_INITIALIZER(expect);
-  struct listEntry_t* entry;
-
-  int i;
-  for (i = 0; i < max; i++) {
-    QueueFile_add(queue, values[i], 0, (uint32_t) i);
-    entry = listEntry_new(values[i], (uint32_t) i);
-    STAILQ_INSERT_TAIL(&expect, entry, next_entry);
-  }
-
-  // Remove all but 1.
-  for (i = 1; i < max; i++) {
-    _assertPeekCompareRemoveDequeue(queue, &expect);
-  }
-
-  off_t flen1 = FileIo_getLength(_for_testing_QueueFile_getFhandle(queue));
-
-  // This should wrap around before expanding.
-  for (i = 0; i < N; i++) {
-    QueueFile_add(queue, values[i], 0, (uint32_t) i);
-    entry = listEntry_new(values[i], (uint32_t) i);
-    STAILQ_INSERT_TAIL(&expect, entry, next_entry);
-  }
-
-  while (!STAILQ_EMPTY(&expect)) {
-    _assertPeekCompareRemoveDequeue(queue, &expect);
-  }
-
-  off_t flen2 = FileIo_getLength(_for_testing_QueueFile_getFhandle(queue));
-  mu_assertm(flen1 == flen2, "file size should remain same");
-}
-
-#define ARR_A_SIZE 5
-static const byte arrA[ARR_A_SIZE] = {1, 2, 3, 4, 5};
-#define ARR_B_SIZE 3
-static const byte arrB[ARR_B_SIZE] = {3, 4, 5};
-
-static int forEachIterationCount = 0;
-static bool forEachReader(QueueFile_ElementStream* stream, uint32_t length) {
-  if (forEachIterationCount == 0) {
-    mu_assert(length == ARR_A_SIZE);
-    mu_assert_notnull(stream);
-
-    // Read in small chunks to test reader.
-    byte actual[ARR_A_SIZE];
-    int elementIteration = 0;
-    uint32_t expectedRemaining[] = { 3, 1, 0 };
-    uint32_t remaining = ARR_A_SIZE;
-    do {
-      // i.e. read past end i.e. 3 reads of 2 > 5
-      mu_assert(QueueFile_readElementStream(stream, actual + ARR_A_SIZE -
-                                            remaining, 2, &remaining));
-      mu_assert(expectedRemaining[elementIteration] == remaining);
-      ++elementIteration;
-    } while (remaining > 0 && elementIteration < 4);
-    mu_assert(elementIteration == 3);
-    mu_assert_memcmp(actual, arrA, ARR_A_SIZE);
-  } else if (forEachIterationCount == 1) {
-    mu_assert(length == ARR_B_SIZE);
-    mu_assert_notnull(stream);
-    byte actual[ARR_B_SIZE];
-    uint32_t remaining;
-    mu_assert(QueueFile_readElementStream(stream,
-        actual, ARR_B_SIZE, &remaining));
-    mu_assert(remaining == 0);
-    mu_assert_memcmp(actual, arrB, ARR_B_SIZE);
-  } else {
-    mu_assertm(false, "Should never iterate beyond 2");
-  }
-  forEachIterationCount++;
-  return true;
-}
-
-static void testForEach() {
-  mu_assert(QueueFile_add(queue, arrA, 0, ARR_A_SIZE));
-  mu_assert(QueueFile_add(queue, arrB, 0, ARR_B_SIZE));
-
-  mu_assert(QueueFile_forEach(queue, forEachReader));
-  _assertPeekCompare(queue, arrA, ARR_A_SIZE);
-  mu_assertm(forEachIterationCount == 2, "expected 2 iterations");
-}
-
-
-static bool peekReaderAblock(QueueFile_ElementStream* stream, uint32_t length) {
-  mu_assert(length == ARR_A_SIZE);
-  byte actual[length];
-  uint32_t remaining;
-  mu_assert(QueueFile_readElementStream(stream, actual, length, &remaining));
-  mu_assert(remaining == 0);
-  mu_assert_memcmp(actual, arrA, length);
-  return true;
-}
-
-static bool peekReaderAbytewise(QueueFile_ElementStream* stream, uint32_t length) {
-  mu_assert(length == ARR_A_SIZE);
-  mu_assert(QueueFile_readElementStreamNextByte(stream) == 1);
-  mu_assert(QueueFile_readElementStreamNextByte(stream) == 2);
-  mu_assert(QueueFile_readElementStreamNextByte(stream) == 3);
-  mu_assert(QueueFile_readElementStreamNextByte(stream) == 4);
-  mu_assert(QueueFile_readElementStreamNextByte(stream) == 5);
-  mu_assert(QueueFile_readElementStreamNextByte(stream) == -1);
-  return true;
-}
-
-static bool peekReaderBblock(QueueFile_ElementStream* stream, uint32_t length) {
-  mu_assert(length == ARR_B_SIZE);
-  byte actual[length];
-  uint32_t remaining;
-  mu_assert(QueueFile_readElementStream(stream, actual, length, &remaining));
-  mu_assert(remaining == 0);
-  mu_assert_memcmp(actual, arrB, length);
-  return true;
-}
-
-static void testPeekWithElementReader() {
-  mu_assert(QueueFile_add(queue, arrA, 0, ARR_A_SIZE));
-  mu_assert(QueueFile_add(queue, arrB, 0, ARR_B_SIZE));
-
-  QueueFile_peekWithElementReader(queue, peekReaderAblock); // ignore response.
-  QueueFile_peekWithElementReader(queue, peekReaderAbytewise); // ignore response.
-
-  mu_assert(QueueFile_remove(queue));
-
-  QueueFile_peekWithElementReader(queue, peekReaderBblock); // ignore response.
-
-  mu_assert(QueueFile_size(queue) == 1);
-  _assertPeekCompare(queue, arrB, ARR_B_SIZE);
-}
-
-/**
- * Exercise a bug where wrapped elements were getting corrupted when the
- * QueueFile was forced to expand in size and a portion of the final Element
- * had been wrapped into space at the beginning of the file.
- */
-static void testFileExpansionDoesntCorruptWrappedElements() {
-
-  // Create test data - 1k blocks marked consecutively 1, 2, 3, 4 and 5.
-  uint32_t valuesCount = 5;
-  uint32_t valuesLength = 1024;
-  byte* values[valuesCount];
-  uint32_t blockNum;
-  for (blockNum = 0; blockNum < valuesCount; blockNum++) {
-    values[blockNum] = malloc((size_t) valuesLength);
-    uint32_t i;
-    for (i = 0; i < valuesLength; i++) {
-      values[blockNum][i] = (byte) (blockNum + 1);
-    }
-  }
-
-  // First, add the first two blocks to the queue, remove one leaving a
-  // 1K space at the beginning of the buffer.
-  mu_assert(QueueFile_add(queue, values[0], 0, valuesLength));
-  mu_assert(QueueFile_add(queue, values[1], 0, valuesLength));
-  mu_assert(QueueFile_remove(queue));
-
-  // The trailing end of block "4" will be wrapped to the start of the buffer.
-  mu_assert(QueueFile_add(queue, values[2], 0, valuesLength));
-  mu_assert(QueueFile_add(queue, values[3], 0, valuesLength));
-
-  // Cause buffer to expand as there isn't space between the end of block "4"
-  // and the start of block "2".  Internally the queue should cause block "4"
-  // to be contiguous, but there was a bug where that wasn't happening.
-  mu_assert(QueueFile_add(queue, values[4], 0, valuesLength));
-
-  // Make sure values are not corrupted, specifically block "4" that wasn't
-  // being made contiguous in the version with the bug.
-  uint32_t i;
-  for (i = 1; i < valuesCount; i++) { // start at 1!
-    uint32_t length;
-    byte* value = QueueFile_peek(queue, &length);
-    mu_assert(length == valuesLength);
-    mu_assert(QueueFile_remove(queue));
-
-    uint32_t j;
-    for (j = 0; j < length; j++) {
-      mu_assert(value[j] == i + 1);
-    }
-    free(value);
-  }
-
-  for (blockNum = 0; blockNum < valuesCount; blockNum++) {
-    free(values[blockNum]);
-  }
-}
-
-/**
- * Exercise a bug where wrapped elements were getting corrupted when the
- * QueueFile was forced to expand in size and a portion of the final Element
- * had been wrapped into space at the beginning of the file - if multiple
- * Elements have been written to empty buffer space at the start does the
- * expansion correctly update all their positions?
- */
-static void testFileExpansionCorrectlyMovesElements() {
-
-  // Create test data - 1k blocks marked consecutively 1, 2, 3, 4 and 5.
-  uint32_t valuesCount = 5;
-  uint32_t valuesLength = 1024;
-  byte* values[valuesCount];
-  uint32_t blockNum;
-  for (blockNum = 0; blockNum < valuesCount; blockNum++) {
-    values[blockNum] = malloc((size_t) valuesLength);
-    uint32_t i;
-    for (i = 0; i < valuesLength; i++) {
-      values[blockNum][i] = (byte) (blockNum + 1);
-    }
-  }
-
-  // smaller data elements
-  uint32_t smallerCount = 3;
-  uint32_t smallerLength = 256;
-  byte* smaller[smallerCount];
-  for (blockNum = 0; blockNum < smallerCount; blockNum++) {
-    smaller[blockNum] = malloc((size_t) smallerLength);
-    uint32_t i;
-    for (i = 0; i < smallerLength; i++) {
-      smaller[blockNum][i] = (byte) (blockNum + 6);
-    }
-  }
-
-  // First, add the first two blocks to the queue, remove one leaving a
-  // 1K space at the beginning of the buffer.
-  mu_assert(QueueFile_add(queue, values[0], 0, valuesLength));
-  mu_assert(QueueFile_add(queue, values[1], 0, valuesLength));
-  mu_assert(QueueFile_remove(queue));
-
-  // The trailing end of block "4" will be wrapped to the start of the buffer.
-  mu_assert(QueueFile_add(queue, values[2], 0, valuesLength));
-  mu_assert(QueueFile_add(queue, values[3], 0, valuesLength));
-
-  // Now fill in some space with smaller blocks, none of which will cause
-  // an expansion.
-  mu_assert(QueueFile_add(queue, smaller[0], 0, smallerLength));
-  mu_assert(QueueFile_add(queue, smaller[1], 0, smallerLength));
-  mu_assert(QueueFile_add(queue, smaller[2], 0, smallerLength));
-
-  // Cause buffer to expand as there isn't space between the end of the
-  // smaller block "8" and the start of block "2".  Internally the queue
-  // should cause all of tbe smaller blocks, and the trailing end of
-  // block "5" to be moved to the end of the file.
-  mu_assert(QueueFile_add(queue, values[4], 0, valuesLength));
-
-  uint32_t expectedBlockLen = 7;
-  byte expectedBlockNumbers[] = {2, 3, 4, 6, 7, 8, 5};
-  uint32_t expectedLengths[] = {valuesLength, valuesLength, valuesLength,
-      smallerLength, smallerLength, smallerLength, valuesLength};
-
-  // Make sure values are not corrupted, specifically block "4" that wasn't
-  // being made contiguous in the version with the bug.
-  uint32_t i;
-  for (i = 0; i < expectedBlockLen; i++) {
-    byte expectedBlockNumber = expectedBlockNumbers[i];
-    uint32_t length;
-    byte* value = QueueFile_peek(queue, &length);
-    mu_assert(length == expectedLengths[i]);
-    mu_assert(QueueFile_remove(queue));
-
-    uint32_t j;
-    for (j = 0; j < length; j++) {
-      mu_assert(value[j] == expectedBlockNumber);
-    }
-    free(value);
-  }
-  mu_assert(QueueFile_isEmpty(queue));
-
-  for (blockNum = 0; blockNum < valuesCount; blockNum++) {
-    free(values[blockNum]);
-  }
-
-  for (blockNum = 0; blockNum < smallerCount; blockNum++) {
-    free(smaller[blockNum]);
-  }
-}
-
-static void testFailedAdd() {
-  mu_assert(QueueFile_add(queue, values[253], 0, 253));
-  _for_testing_FileIo_failAllWrites(true);
-  mu_assert(!QueueFile_add(queue, values[252], 0, 252));
-  _for_testing_FileIo_failAllWrites(false);
-
-  // Allow a subsequent add to succeed.
-  mu_assert(QueueFile_add(queue, values[251], 0, 251));
-
-  QueueFile_closeAndFree(queue);
-  queue = QueueFile_new(TEST_QUEUE_FILENAME);
-
-  mu_assert(QueueFile_size(queue) == 2);
-  _assertPeekCompareRemove(queue, values[253], 253);
-  _assertPeekCompareRemove(queue, values[251], 251);
-}
-
-static void testFailedRemoval() {
-  mu_assert(QueueFile_add(queue, values[253], 0, 253));
-  _for_testing_FileIo_failAllWrites(true);
-  mu_assert(!QueueFile_remove(queue));
-  _for_testing_FileIo_failAllWrites(false);
-
-  QueueFile_closeAndFree(queue);
-  queue = QueueFile_new(TEST_QUEUE_FILENAME);
-
-  mu_assert(QueueFile_size(queue) == 1);
-  _assertPeekCompareRemove(queue, values[253], 253);
-  mu_assert(QueueFile_add(queue, values[99], 0, 99));
-  _assertPeekCompareRemove(queue, values[99], 99);
-}
-
-static void testFailedExpansion() {
-  mu_assert(QueueFile_add(queue, values[253], 0, 253));
-  _for_testing_FileIo_failAllWrites(true);
-  byte bigbuf[8000];
-  mu_assert(!QueueFile_add(queue, bigbuf, 0, 8000));
-  _for_testing_FileIo_failAllWrites(false);
-
-  QueueFile_closeAndFree(queue);
-  queue = QueueFile_new(TEST_QUEUE_FILENAME);
-
-  mu_assert(QueueFile_size(queue) == 1);
-
-  _assertPeekCompare(queue, values[253], 253);
-  mu_assert(4096 == FileIo_getLength(_for_testing_QueueFile_getFhandle(queue)));
-  mu_assert(QueueFile_add(queue, values[99], 0, 99));
-  _assertPeekCompareRemove(queue, values[253], 253);
-  _assertPeekCompareRemove(queue, values[99], 99);
-}
-
-static void testTransferToWithSmallBuffer() {
-  uint32_t oldBufferSize = _for_testing_setTransferToCopyBufferSize(5);
-  testFileExpansionDoesntCorruptWrappedElements();
-  _for_testing_setTransferToCopyBufferSize(oldBufferSize);
-}
-
-int main() {
-  LOG_SETDEBUGFAILLEVEL_WARN;
-  mu_run_test(testSimpleAddOneElement);
-  mu_run_test(testAddOneElement);
-  mu_run_test(testAddAndRemoveElements);
-  mu_run_test(testSplitExpansion);
-  mu_run_test(testFileExpansionDoesntCorruptWrappedElements);
-  mu_run_test(testFileExpansionCorrectlyMovesElements);
-  mu_run_test(testFailedAdd);
-  mu_run_test(testFailedRemoval);
-  mu_run_test(testFailedExpansion);
-  mu_run_test(testForEach);
-  mu_run_test(testPeekWithElementReader);
-  mu_run_test(testTransferToWithSmallBuffer);
-
-  printf("%d tests passed.\n", tests_run);
-  return 0;
-}
-
-
-
-// ------------- utility methods ---------------
-
-static void _assertPeekCompare(QueueFile *queue, const byte* data,
-                               uint32_t length) {
-  uint32_t qlength;
-  byte* actual = QueueFile_peek(queue, &qlength);
-  mu_assert(qlength == length);
-  mu_assert_memcmp(data, actual, length);
-  free(actual);
-}
-
-static void _assertPeekCompareRemove(QueueFile *queue, const byte* data,
-                                     uint32_t length) {
-  _assertPeekCompare(queue, data, length);
-  mu_assert(QueueFile_remove(queue));
-}
-
-static void _assertPeekCompareRemoveDequeue(QueueFile *queue,
-                                            struct listHead_t *expectqueue) {
-  struct listEntry_t *entry = STAILQ_FIRST(expectqueue);
-  mu_assert_notnull(entry);
-  _assertPeekCompareRemove(queue, entry->data, entry->length);
-  STAILQ_REMOVE_HEAD(expectqueue, next_entry);
-  free(entry);
-}
-
diff --git a/c-tape/types.h b/c-tape/types.h
deleted file mode 100644
index 8d21731..0000000
--- a/c-tape/types.h
+++ /dev/null
@@ -1,25 +0,0 @@
-/*
- * Copyright (C) 2012 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef TYPES_H_
-#define TYPES_H_
-
-#include <stdbool.h>
-#include <stdint.h>
-
-typedef uint8_t byte;
-
-#endif
diff --git a/pom.xml b/pom.xml
index 9e013e8..2bed207 100644
--- a/pom.xml
+++ b/pom.xml
@@ -17,56 +17,36 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
 
-  <parent>
-    <groupId>org.sonatype.oss</groupId>
-    <artifactId>oss-parent</artifactId>
-    <version>7</version>
-  </parent>
-
-  <groupId>com.squareup</groupId>
+  <groupId>com.github.flix-tech</groupId>
   <artifactId>tape-parent</artifactId>
   <version>1.2.3</version>
   <packaging>pom</packaging>
 
   <name>Tape (Parent)</name>
   <description>A lightning fast, transactional, file-based FIFO for Android and Java.</description>
-  <url>http://github.com/square/tape/</url>
+  <url>http://github.com/flix-tech/tape/</url>
 
   <modules>
     <module>tape</module>
-    <module>tape-sample</module>
   </modules>
 
   <properties>
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 
-    <android.version>4.1.1.4</android.version>
-    <android.platform>16</android.platform>
-    <http-request.version>2.2</http-request.version>
-    <dagger.version>0.9</dagger.version>
-    <otto.version>1.3.1</otto.version>
-    <gson.version>2.2</gson.version>
     <junit.version>4.10</junit.version>
     <fest.version>1.4</fest.version>
     <commons-io.version>2.4</commons-io.version>
     <mockito.version>1.9.5</mockito.version>
   </properties>
 
-  <scm>
-    <url>http://github.com/square/tape</url>
-    <connection>scm:git:git://github.com/square/tape.git</connection>
-    <developerConnection>scm:git:git@github.com:square/tape.git</developerConnection>
-    <tag>tape-parent-1.2.3</tag>
-  </scm>
-
   <organization>
-    <name>Square, Inc.</name>
-    <url>http://squareup.com</url>
+    <name>FlixMobility GmbH</name>
+    <url>http://github.com/flix-tech</url>
   </organization>
 
   <issueManagement>
     <system>GitHub Issues</system>
-    <url>http://github.com/square/tape/issues</url>
+    <url>http://github.com/flix-tech/tape/issues</url>
   </issueManagement>
 
   <licenses>
@@ -79,31 +59,6 @@
 
   <dependencyManagement>
     <dependencies>
-      <dependency>
-        <groupId>com.google.android</groupId>
-        <artifactId>android</artifactId>
-        <version>${android.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.squareup</groupId>
-        <artifactId>dagger</artifactId>
-        <version>${dagger.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.squareup</groupId>
-        <artifactId>otto</artifactId>
-        <version>${otto.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.github.kevinsawicki</groupId>
-        <artifactId>http-request</artifactId>
-        <version>${http-request.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.code.gson</groupId>
-        <artifactId>gson</artifactId>
-        <version>${gson.version}</version>
-      </dependency>
       <dependency>
         <groupId>junit</groupId>
         <artifactId>junit</artifactId>
@@ -158,29 +113,7 @@
             </execution>
           </executions>
         </plugin>
-
-        <plugin>
-          <groupId>com.jayway.maven.plugins.android.generation2</groupId>
-          <artifactId>android-maven-plugin</artifactId>
-          <version>3.8.2</version>
-          <configuration>
-            <sdk>
-              <platform>${android.platform}</platform>
-            </sdk>
-          </configuration>
-        </plugin>
       </plugins>
     </pluginManagement>
-
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-release-plugin</artifactId>
-        <version>2.5</version>
-        <configuration>
-          <autoVersionSubmodules>true</autoVersionSubmodules>
-        </configuration>
-      </plugin>
-    </plugins>
   </build>
 </project>
diff --git a/tape-sample/AndroidManifest.xml b/tape-sample/AndroidManifest.xml
deleted file mode 100644
index 8d33058..0000000
--- a/tape-sample/AndroidManifest.xml
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.squareup.tape.sample"
-          android:versionCode="1"
-          android:versionName="1.0">
-
-  <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="16"/>
-
-  <uses-permission android:name="android.permission.INTERNET"/>
-
-  <uses-feature android:name="android.hardware.touchscreen" android:required="false"/>
-
-  <application android:icon="@drawable/icon"
-               android:label="@string/application_name"
-               android:name=".SampleApplication">
-
-    <activity android:label="@string/activity_name"
-              android:name=".SampleActivity">
-      <intent-filter>
-        <action android:name="android.intent.action.MAIN"/>
-        <category android:name="android.intent.category.DEFAULT"/>
-        <category android:name="android.intent.category.LAUNCHER"/>
-      </intent-filter>
-    </activity>
-
-    <service android:name=".ImageUploadTaskService"/>
-
-  </application>
-</manifest>
\ No newline at end of file
diff --git a/tape-sample/pom.xml b/tape-sample/pom.xml
deleted file mode 100644
index c2f3cae..0000000
--- a/tape-sample/pom.xml
+++ /dev/null
@@ -1,55 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.squareup</groupId>
-    <artifactId>tape-parent</artifactId>
-    <version>1.2.3</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <name>Tape Android Sample</name>
-  <artifactId>tape-sample</artifactId>
-  <packaging>apk</packaging>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.google.android</groupId>
-      <artifactId>android</artifactId>
-      <scope>provided</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.squareup</groupId>
-      <artifactId>tape</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>com.squareup</groupId>
-      <artifactId>dagger</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>com.squareup</groupId>
-      <artifactId>otto</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>com.github.kevinsawicki</groupId>
-      <artifactId>http-request</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>com.google.code.gson</groupId>
-      <artifactId>gson</artifactId>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>com.jayway.maven.plugins.android.generation2</groupId>
-        <artifactId>android-maven-plugin</artifactId>
-        <extensions>true</extensions>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/tape-sample/res/drawable-hdpi/icon.png b/tape-sample/res/drawable-hdpi/icon.png
deleted file mode 100644
index c22836b..0000000
Binary files a/tape-sample/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/tape-sample/res/drawable-mdpi/icon.png b/tape-sample/res/drawable-mdpi/icon.png
deleted file mode 100644
index 02b876a..0000000
Binary files a/tape-sample/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/tape-sample/res/drawable-xhdpi/icon.png b/tape-sample/res/drawable-xhdpi/icon.png
deleted file mode 100644
index 5b467bc..0000000
Binary files a/tape-sample/res/drawable-xhdpi/icon.png and /dev/null differ
diff --git a/tape-sample/res/layout/sample_activity.xml b/tape-sample/res/layout/sample_activity.xml
deleted file mode 100644
index a9833ab..0000000
--- a/tape-sample/res/layout/sample_activity.xml
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:orientation="vertical"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent"
-              android:padding="8dp"
-              android:gravity="center_horizontal">
-  <Button
-      android:id="@+id/upload"
-      android:layout_width="wrap_content"
-      android:layout_height="wrap_content"
-      android:textSize="24sp"
-      android:text="@string/upload"
-      />
-  <TextView
-      android:id="@+id/status"
-      android:layout_width="wrap_content"
-      android:layout_height="wrap_content"
-      android:layout_marginTop="20dp"
-      android:textSize="16sp"
-      />
-  <ListView
-      android:id="@+id/uploads"
-      android:layout_width="match_parent"
-      android:layout_height="0dp"
-      android:layout_weight="1"
-      android:layout_marginTop="20dp"
-      />
-</LinearLayout>
\ No newline at end of file
diff --git a/tape-sample/res/layout/upload.xml b/tape-sample/res/layout/upload.xml
deleted file mode 100644
index 943ef6e..0000000
--- a/tape-sample/res/layout/upload.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<TextView xmlns:android="http://schemas.android.com/apk/res/android"
-          android:id="@android:id/text1"
-          android:layout_width="match_parent"
-          android:layout_height="match_parent"
-          android:padding="10dp"
-          android:textSize="16sp"
-          android:autoLink="web"/>
\ No newline at end of file
diff --git a/tape-sample/res/values/strings.xml b/tape-sample/res/values/strings.xml
deleted file mode 100644
index 63095e8..0000000
--- a/tape-sample/res/values/strings.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<resources>
-  <string name="activity_name">Tape</string>
-  <string name="application_name">Tape Sample</string>
-  <string name="upload">Upload Image</string>
-  <string name="status">%s uploads pending.</string>
-  <string name="task_added">Added new upload task.</string>
-  <string name="task_completed">An upload task completed.</string>
-</resources>
diff --git a/tape-sample/src/main/java/com/squareup/tape/sample/GsonConverter.java b/tape-sample/src/main/java/com/squareup/tape/sample/GsonConverter.java
deleted file mode 100644
index bb4b93e..0000000
--- a/tape-sample/src/main/java/com/squareup/tape/sample/GsonConverter.java
+++ /dev/null
@@ -1,41 +0,0 @@
-// Copyright 2012 Square, Inc.
-package com.squareup.tape.sample;
-
-import com.google.gson.Gson;
-import com.squareup.tape.FileObjectQueue;
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.io.OutputStreamWriter;
-import java.io.Reader;
-import java.io.Writer;
-
-/**
- * Use GSON to serialize classes to a bytes.
- * <p>
- * Note: This will only work when concrete classes are specified for {@code T}. If you want to specify an interface for
- * {@code T} then you need to also include the concrete class name in the serialized byte array so that you can
- * deserialize to the appropriate type.
- */
-public class GsonConverter<T> implements FileObjectQueue.Converter<T> {
-  private final Gson gson;
-  private final Class<T> type;
-
-  public GsonConverter(Gson gson, Class<T> type) {
-    this.gson = gson;
-    this.type = type;
-  }
-
-  @Override public T from(byte[] bytes) {
-    Reader reader = new InputStreamReader(new ByteArrayInputStream(bytes));
-    return gson.fromJson(reader, type);
-  }
-
-  @Override public void toStream(T object, OutputStream bytes) throws IOException {
-    Writer writer = new OutputStreamWriter(bytes);
-    gson.toJson(object, writer);
-    writer.close();
-  }
-}
diff --git a/tape-sample/src/main/java/com/squareup/tape/sample/ImageUploadQueueSizeEvent.java b/tape-sample/src/main/java/com/squareup/tape/sample/ImageUploadQueueSizeEvent.java
deleted file mode 100644
index e3397cd..0000000
--- a/tape-sample/src/main/java/com/squareup/tape/sample/ImageUploadQueueSizeEvent.java
+++ /dev/null
@@ -1,10 +0,0 @@
-// Copyright 2012 Square, Inc.
-package com.squareup.tape.sample;
-
-public class ImageUploadQueueSizeEvent {
-  public final int size;
-
-  public ImageUploadQueueSizeEvent(int size) {
-    this.size = size;
-  }
-}
diff --git a/tape-sample/src/main/java/com/squareup/tape/sample/ImageUploadSuccessEvent.java b/tape-sample/src/main/java/com/squareup/tape/sample/ImageUploadSuccessEvent.java
deleted file mode 100644
index e3dedb4..0000000
--- a/tape-sample/src/main/java/com/squareup/tape/sample/ImageUploadSuccessEvent.java
+++ /dev/null
@@ -1,10 +0,0 @@
-// Copyright 2012 Square, Inc.
-package com.squareup.tape.sample;
-
-public class ImageUploadSuccessEvent {
-  public final String url;
-
-  public ImageUploadSuccessEvent(String url) {
-    this.url = url;
-  }
-}
diff --git a/tape-sample/src/main/java/com/squareup/tape/sample/ImageUploadTask.java b/tape-sample/src/main/java/com/squareup/tape/sample/ImageUploadTask.java
deleted file mode 100644
index 749406a..0000000
--- a/tape-sample/src/main/java/com/squareup/tape/sample/ImageUploadTask.java
+++ /dev/null
@@ -1,75 +0,0 @@
-// Copyright 2012 Square, Inc.
-package com.squareup.tape.sample;
-
-import android.os.Handler;
-import android.os.Looper;
-import android.util.Log;
-import com.github.kevinsawicki.http.HttpRequest;
-import com.squareup.tape.Task;
-
-import java.io.File;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import static com.github.kevinsawicki.http.HttpRequest.post;
-
-/** Uploads the specified file to imgur.com. */
-public class ImageUploadTask implements Task<ImageUploadTask.Callback> {
-  private static final long serialVersionUID = 126142781146165256L;
-
-  private static final String TAG = "Tape:ImageUploadTask";
-  private static final String IMGUR_API_KEY = "74e20e836f0307a90683c4643a2b656e";
-  private static final String IMGUR_UPLOAD_URL = "http://api.imgur.com/2/upload";
-  private static final Pattern IMGUR_URL_REGEX = Pattern.compile("<imgur_page>(.+?)</imgur_page>");
-  private static final Handler MAIN_THREAD = new Handler(Looper.getMainLooper());
-
-  public interface Callback {
-    void onSuccess(String url);
-    void onFailure();
-  }
-
-  private final File file;
-
-  public ImageUploadTask(File file) {
-    this.file = file;
-  }
-
-  @Override public void execute(final Callback callback) {
-    // Image uploading is slow. Execute HTTP POST on a background thread.
-    new Thread(new Runnable() {
-      @Override public void run() {
-        try {
-          HttpRequest request = post(IMGUR_UPLOAD_URL)
-              .part("key", IMGUR_API_KEY)
-              .part("image", file);
-
-          if (request.ok()) {
-            Matcher m = IMGUR_URL_REGEX.matcher(request.body());
-            m.find();
-            final String url = m.group(1);
-            Log.i(TAG, "Upload success! " + url);
-
-            // Get back to the main thread before invoking a callback.
-            MAIN_THREAD.post(new Runnable() {
-              @Override public void run() {
-                callback.onSuccess(url);
-              }
-            });
-          } else {
-            Log.i(TAG, "Upload failed :(  Will retry.");
-
-            // Get back to the main thread before invoking a callback.
-            MAIN_THREAD.post(new Runnable() {
-              @Override public void run() {
-                callback.onFailure();
-              }
-            });
-          }
-        } catch (RuntimeException e) {
-          e.printStackTrace();
-          throw e;
-        }
-      }
-    }).start();
-  }
-}
diff --git a/tape-sample/src/main/java/com/squareup/tape/sample/ImageUploadTaskQueue.java b/tape-sample/src/main/java/com/squareup/tape/sample/ImageUploadTaskQueue.java
deleted file mode 100644
index cabc987..0000000
--- a/tape-sample/src/main/java/com/squareup/tape/sample/ImageUploadTaskQueue.java
+++ /dev/null
@@ -1,65 +0,0 @@
-// Copyright 2012 Square, Inc.
-package com.squareup.tape.sample;
-
-import android.content.Context;
-import android.content.Intent;
-import com.google.gson.Gson;
-import com.squareup.otto.Bus;
-import com.squareup.otto.Produce;
-import com.squareup.tape.FileObjectQueue;
-import com.squareup.tape.FileObjectQueue.Converter;
-import com.squareup.tape.ObjectQueue;
-import com.squareup.tape.TaskQueue;
-
-import java.io.File;
-import java.io.IOException;
-
-public class ImageUploadTaskQueue extends TaskQueue<ImageUploadTask> {
-  private static final String FILENAME = "image_upload_task_queue";
-
-  private final Context context;
-  private final Bus bus;
-
-  private ImageUploadTaskQueue(ObjectQueue<ImageUploadTask> delegate, Context context, Bus bus) {
-    super(delegate);
-    this.context = context;
-    this.bus = bus;
-    bus.register(this);
-
-    if (size() > 0) {
-      startService();
-    }
-  }
-
-  private void startService() {
-    context.startService(new Intent(context, ImageUploadTaskService.class));
-  }
-
-  @Override public void add(ImageUploadTask entry) {
-    super.add(entry);
-    bus.post(produceSizeChanged());
-    startService();
-  }
-
-  @Override public void remove() {
-    super.remove();
-    bus.post(produceSizeChanged());
-  }
-
-  @SuppressWarnings("UnusedDeclaration") // Used by event bus.
-  @Produce public ImageUploadQueueSizeEvent produceSizeChanged() {
-    return new ImageUploadQueueSizeEvent(size());
-  }
-
-  public static ImageUploadTaskQueue create(Context context, Gson gson, Bus bus) {
-    Converter<ImageUploadTask> converter = new GsonConverter<ImageUploadTask>(gson, ImageUploadTask.class);
-    File queueFile = new File(context.getFilesDir(), FILENAME);
-    FileObjectQueue<ImageUploadTask> delegate;
-    try {
-      delegate = new FileObjectQueue<ImageUploadTask>(queueFile, converter);
-    } catch (IOException e) {
-      throw new RuntimeException("Unable to create file queue.", e);
-    }
-    return new ImageUploadTaskQueue(delegate, context, bus);
-  }
-}
diff --git a/tape-sample/src/main/java/com/squareup/tape/sample/ImageUploadTaskService.java b/tape-sample/src/main/java/com/squareup/tape/sample/ImageUploadTaskService.java
deleted file mode 100644
index af36bc8..0000000
--- a/tape-sample/src/main/java/com/squareup/tape/sample/ImageUploadTaskService.java
+++ /dev/null
@@ -1,58 +0,0 @@
-// Copyright 2012 Square, Inc.
-package com.squareup.tape.sample;
-
-import android.app.Service;
-import android.content.Intent;
-import android.os.IBinder;
-import android.util.Log;
-import com.squareup.otto.Bus;
-import com.squareup.tape.sample.ImageUploadTask.Callback;
-
-import javax.inject.Inject;
-
-public class ImageUploadTaskService extends Service implements Callback {
-  private static final String TAG = "Tape:ImageUploadTaskService";
-
-  @Inject ImageUploadTaskQueue queue;
-  @Inject Bus bus;
-
-  private boolean running;
-
-  @Override public void onCreate() {
-    super.onCreate();
-    ((SampleApplication) getApplication()).inject(this);
-    Log.i(TAG, "Service starting!");
-  }
-
-  @Override public int onStartCommand(Intent intent, int flags, int startId) {
-    executeNext();
-    return START_STICKY;
-  }
-
-  private void executeNext() {
-    if (running) return; // Only one task at a time.
-
-    ImageUploadTask task = queue.peek();
-    if (task != null) {
-      running = true;
-      task.execute(this);
-    } else {
-      Log.i(TAG, "Service stopping!");
-      stopSelf(); // No more tasks are present. Stop.
-    }
-  }
-
-  @Override public void onSuccess(final String url) {
-    running = false;
-    queue.remove();
-    bus.post(new ImageUploadSuccessEvent(url));
-    executeNext();
-  }
-
-  @Override public void onFailure() {
-  }
-
-  @Override public IBinder onBind(Intent intent) {
-    return null;
-  }
-}
diff --git a/tape-sample/src/main/java/com/squareup/tape/sample/SampleActivity.java b/tape-sample/src/main/java/com/squareup/tape/sample/SampleActivity.java
deleted file mode 100644
index 7a8dbac..0000000
--- a/tape-sample/src/main/java/com/squareup/tape/sample/SampleActivity.java
+++ /dev/null
@@ -1,92 +0,0 @@
-// Copyright 2012 Square, Inc.
-package com.squareup.tape.sample;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.database.Cursor;
-import android.os.Bundle;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.ArrayAdapter;
-import android.widget.ListView;
-import android.widget.TextView;
-import android.widget.Toast;
-import com.squareup.otto.Bus;
-import com.squareup.otto.Subscribe;
-
-import javax.inject.Inject;
-import java.io.File;
-
-import static android.content.Intent.ACTION_PICK;
-import static android.provider.MediaStore.MediaColumns.DATA;
-import static android.widget.Toast.LENGTH_SHORT;
-
-public class SampleActivity extends Activity {
-  private static final int PICK_IMAGE = 4 + 8 + 15 + 16 + 23 + 42;
-
-  @Inject ImageUploadTaskQueue queue; // NOTE: Injection starts queue processing!
-  @Inject Bus bus;
-
-  private TextView status;
-  private ArrayAdapter<String> uploads;
-
-  @Override protected void onCreate(Bundle savedInstanceState) {
-    super.onCreate(savedInstanceState);
-
-    ((SampleApplication) getApplication()).inject(this);
-
-    setContentView(R.layout.sample_activity);
-
-    // Status text reports number of pending uploads in the queue.
-    status = (TextView) findViewById(R.id.status);
-
-    // Hook up adapter to list of uploaded images.
-    uploads = new ArrayAdapter<String>(this, R.layout.upload, android.R.id.text1);
-    ListView uploadList = (ListView) findViewById(R.id.uploads);
-    uploadList.setAdapter(uploads);
-
-    // Upload button delegates to the gallery for selecting an image.
-    findViewById(R.id.upload).setOnClickListener(new OnClickListener() {
-      @Override public void onClick(View view) {
-        Intent pickImageIntent = new Intent(ACTION_PICK);
-        pickImageIntent.setType("image/*");
-        startActivityForResult(pickImageIntent, PICK_IMAGE);
-      }
-    });
-  }
-
-  @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-    if (requestCode == PICK_IMAGE && resultCode == RESULT_OK) {
-      // Fetch the path to the selected image.
-      Cursor cursor = getContentResolver().query(data.getData(), new String[] { DATA }, null, null, null);
-      cursor.moveToFirst();
-      File image = new File(cursor.getString(cursor.getColumnIndex(DATA)));
-      cursor.close();
-
-      // Add the image upload task to the queue.
-      queue.add(new ImageUploadTask(image));
-      Toast.makeText(this, R.string.task_added, LENGTH_SHORT).show();
-    }
-  }
-
-  @SuppressWarnings("UnusedDeclaration") // Used by event bus.
-  @Subscribe public void onQueueSizeChanged(ImageUploadQueueSizeEvent event) {
-    status.setText(getString(R.string.status, event.size));
-  }
-
-  @SuppressWarnings("UnusedDeclaration") // Used by event bus.
-  @Subscribe public void onUploadSuccess(ImageUploadSuccessEvent event) {
-    Toast.makeText(this, R.string.task_completed, LENGTH_SHORT).show();
-    uploads.add(event.url);
-  }
-
-  @Override protected void onResume() {
-    super.onResume();
-    bus.register(this); // Register for events when we are becoming the active activity.
-  }
-
-  @Override protected void onPause() {
-    super.onPause();
-    bus.unregister(this); // Unregister from events when we are no longer active.
-  }
-}
diff --git a/tape-sample/src/main/java/com/squareup/tape/sample/SampleApplication.java b/tape-sample/src/main/java/com/squareup/tape/sample/SampleApplication.java
deleted file mode 100644
index 29e922b..0000000
--- a/tape-sample/src/main/java/com/squareup/tape/sample/SampleApplication.java
+++ /dev/null
@@ -1,53 +0,0 @@
-// Copyright 2012 Square, Inc.
-package com.squareup.tape.sample;
-
-import android.app.Application;
-import android.content.Context;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.squareup.otto.Bus;
-import dagger.Module;
-import dagger.ObjectGraph;
-import dagger.Provides;
-
-import javax.inject.Singleton;
-
-public class SampleApplication extends Application {
-  private ObjectGraph objectGraph;
-
-  @Override public void onCreate() {
-    super.onCreate();
-    objectGraph = ObjectGraph.create(new SampleModule(this));
-  }
-
-  public void inject(Object object) {
-    objectGraph.inject(object);
-  }
-
-  @Module(
-      entryPoints = {
-          SampleActivity.class, //
-          ImageUploadTaskQueue.class, //
-          ImageUploadTaskService.class //
-      }
-  )
-  static class SampleModule {
-    private final Context appContext;
-
-    SampleModule(Context appContext) {
-      this.appContext = appContext;
-    }
-
-    @Provides @Singleton ImageUploadTaskQueue provideTaskQueue(Gson gson, Bus bus) {
-      return ImageUploadTaskQueue.create(appContext, gson, bus);
-    }
-
-    @Provides @Singleton Bus provideBus() {
-      return new Bus();
-    }
-
-    @Provides @Singleton Gson provideGson() {
-      return new GsonBuilder().create();
-    }
-  }
-}
diff --git a/tape/pom.xml b/tape/pom.xml
index 111c17a..8ace9c7 100644
--- a/tape/pom.xml
+++ b/tape/pom.xml
@@ -4,7 +4,7 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup</groupId>
+    <groupId>com.github.flix-tech</groupId>
     <artifactId>tape-parent</artifactId>
     <version>1.2.3</version>
     <relativePath>../pom.xml</relativePath>
diff --git a/website/app.css b/website/app.css
deleted file mode 100644
index f87dded..0000000
--- a/website/app.css
+++ /dev/null
@@ -1,95 +0,0 @@
-html, body {
-  -webkit-font-smoothing: antialiased;
-  color: #222;
-  height: 100%;
-}
-body {
-  background: transparent url('head.png') repeat-x top;
-  border-top: 3px solid #771414;
-}
-
-code {
-  color: #505050;
-  white-space: nowrap;
-}
-pre {
-  font-size: 12px;
-}
-
-.license p, .license blockquote {
-    font-family: monospace;
-    font-size: 10px;
-    margin: 15px 0;
-}
-
-.titlebar {
-  color: #444;
-  text-align: center;
-}
-.titlebar h1 {
-  height: 227px;
-  text-indent: -9999px;
-  /* Image courtesy http://www.flickr.com/photos/paulm/5916480112/*/
-  background: transparent url('lead.png') no-repeat center;
-}
-
-
-.content .row {
-  margin-bottom: 40px;
-}
-.content h2 {
-  font-weight: normal;
-  font-size: 20px;
-  line-height: 20px;
-  margin-bottom: 15px;
-  color: #882020;
-}
-.content h3 {
-  font-weight: normal;
-  font-size: 15px;
-  line-height: 15px;
-  color: #555;
-  margin: 35px 0 15px;
-  text-decoration: underline;
-}
-.content pre.maven {
-  margin-top: 20px;
-}
-
-.footer {
-  background: #888;
-  text-align: center;
-  border-top: 3px solid #771414;
-}
-.footer a {
-  padding: 10px 20px;
-  display: inline-block;
-  margin: 10px 0;
-}
-.footer a:hover {
-  background-color: #999;
-}
-.footer a img {
-  border: 0;
-}
-
-a:link, a:active, a:visited {
-  color: #661414;
-}
-a:hover {
-  color: #440000;
-}
-a.btn {
-  color: #fff;
-}
-
-#ribbon {
-  text-indent: -9999px;
-  background: transparent url('ribbon.png') no-repeat;
-  position: absolute;
-  top: 2px;
-  right: 0;
-  border: 0;
-  height: 149px;
-  width: 149px;
-}
\ No newline at end of file
diff --git a/website/bootstrap-responsive.min.css b/website/bootstrap-responsive.min.css
deleted file mode 100644
index 60ffca0..0000000
--- a/website/bootstrap-responsive.min.css
+++ /dev/null
@@ -1,9 +0,0 @@
-/*!
- * Bootstrap Responsive v2.1.1
- *
- * Copyright 2012 Twitter, Inc
- * Licensed under the Apache License v2.0
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Designed and built with all the love in the world @twitter by @mdo and @fat.
- */.clearfix{*zoom:1}.clearfix:before,.clearfix:after{display:table;line-height:0;content:""}.clearfix:after{clear:both}.hide-text{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.input-block-level{display:block;width:100%;min-height:30px;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.hidden{display:none;visibility:hidden}.visible-phone{display:none!important}.visible-tablet{display:none!important}.hidden-desktop{display:none!important}.visible-desktop{display:inherit!important} @media(min-width:768px) and (max-width:979px){.hidden-desktop{display:inherit!important}.visible-desktop{display:none!important}.visible-tablet{display:inherit!important}.hidden-tablet{display:none!important}} @media(max-width:767px){.hidden-desktop{display:inherit!important}.visible-desktop{display:none!important}.visible-phone{display:inherit!important}.hidden-phone{display:none!important}} @media(min-width:1200px){.row{margin-left:-30px;*zoom:1}.row:before,.row:after{display:table;line-height:0;content:""}.row:after{clear:both}[class*="span"]{float:left;min-height:1px;margin-left:30px}.container,.navbar-static-top .container,.navbar-fixed-top .container,.navbar-fixed-bottom .container{width:1170px}.span12{width:1170px}.span11{width:1070px}.span10{width:970px}.span9{width:870px}.span8{width:770px}.span7{width:670px}.span6{width:570px}.span5{width:470px}.span4{width:370px}.span3{width:270px}.span2{width:170px}.span1{width:70px}.offset12{margin-left:1230px}.offset11{margin-left:1130px}.offset10{margin-left:1030px}.offset9{margin-left:930px}.offset8{margin-left:830px}.offset7{margin-left:730px}.offset6{margin-left:630px}.offset5{margin-left:530px}.offset4{margin-left:430px}.offset3{margin-left:330px}.offset2{margin-left:230px}.offset1{margin-left:130px}.row-fluid{width:100%;*zoom:1}.row-fluid:before,.row-fluid:after{display:table;line-height:0;content:""}.row-fluid:after{clear:both}.row-fluid [class*="span"]{display:block;float:left;width:100%;min-height:30px;margin-left:2.564102564102564%;*margin-left:2.5109110747408616%;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.row-fluid [class*="span"]:first-child{margin-left:0}.row-fluid .span12{width:100%;*width:99.94680851063829%}.row-fluid .span11{width:91.45299145299145%;*width:91.39979996362975%}.row-fluid .span10{width:82.90598290598291%;*width:82.8527914166212%}.row-fluid .span9{width:74.35897435897436%;*width:74.30578286961266%}.row-fluid .span8{width:65.81196581196582%;*width:65.75877432260411%}.row-fluid .span7{width:57.26495726495726%;*width:57.21176577559556%}.row-fluid .span6{width:48.717948717948715%;*width:48.664757228587014%}.row-fluid .span5{width:40.17094017094017%;*width:40.11774868157847%}.row-fluid .span4{width:31.623931623931625%;*width:31.570740134569924%}.row-fluid .span3{width:23.076923076923077%;*width:23.023731587561375%}.row-fluid .span2{width:14.52991452991453%;*width:14.476723040552828%}.row-fluid .span1{width:5.982905982905983%;*width:5.929714493544281%}.row-fluid .offset12{margin-left:105.12820512820512%;*margin-left:105.02182214948171%}.row-fluid .offset12:first-child{margin-left:102.56410256410257%;*margin-left:102.45771958537915%}.row-fluid .offset11{margin-left:96.58119658119658%;*margin-left:96.47481360247316%}.row-fluid .offset11:first-child{margin-left:94.01709401709402%;*margin-left:93.91071103837061%}.row-fluid .offset10{margin-left:88.03418803418803%;*margin-left:87.92780505546462%}.row-fluid .offset10:first-child{margin-left:85.47008547008548%;*margin-left:85.36370249136206%}.row-fluid .offset9{margin-left:79.48717948717949%;*margin-left:79.38079650845607%}.row-fluid .offset9:first-child{margin-left:76.92307692307693%;*margin-left:76.81669394435352%}.row-fluid .offset8{margin-left:70.94017094017094%;*margin-left:70.83378796144753%}.row-fluid .offset8:first-child{margin-left:68.37606837606839%;*margin-left:68.26968539734497%}.row-fluid .offset7{margin-left:62.393162393162385%;*margin-left:62.28677941443899%}.row-fluid .offset7:first-child{margin-left:59.82905982905982%;*margin-left:59.72267685033642%}.row-fluid .offset6{margin-left:53.84615384615384%;*margin-left:53.739770867430444%}.row-fluid .offset6:first-child{margin-left:51.28205128205128%;*margin-left:51.175668303327875%}.row-fluid .offset5{margin-left:45.299145299145295%;*margin-left:45.1927623204219%}.row-fluid .offset5:first-child{margin-left:42.73504273504273%;*margin-left:42.62865975631933%}.row-fluid .offset4{margin-left:36.75213675213675%;*margin-left:36.645753773413354%}.row-fluid .offset4:first-child{margin-left:34.18803418803419%;*margin-left:34.081651209310785%}.row-fluid .offset3{margin-left:28.205128205128204%;*margin-left:28.0987452264048%}.row-fluid .offset3:first-child{margin-left:25.641025641025642%;*margin-left:25.53464266230224%}.row-fluid .offset2{margin-left:19.65811965811966%;*margin-left:19.551736679396257%}.row-fluid .offset2:first-child{margin-left:17.094017094017094%;*margin-left:16.98763411529369%}.row-fluid .offset1{margin-left:11.11111111111111%;*margin-left:11.004728132387708%}.row-fluid .offset1:first-child{margin-left:8.547008547008547%;*margin-left:8.440625568285142%}input,textarea,.uneditable-input{margin-left:0}.controls-row [class*="span"]+[class*="span"]{margin-left:30px}input.span12,textarea.span12,.uneditable-input.span12{width:1156px}input.span11,textarea.span11,.uneditable-input.span11{width:1056px}input.span10,textarea.span10,.uneditable-input.span10{width:956px}input.span9,textarea.span9,.uneditable-input.span9{width:856px}input.span8,textarea.span8,.uneditable-input.span8{width:756px}input.span7,textarea.span7,.uneditable-input.span7{width:656px}input.span6,textarea.span6,.uneditable-input.span6{width:556px}input.span5,textarea.span5,.uneditable-input.span5{width:456px}input.span4,textarea.span4,.uneditable-input.span4{width:356px}input.span3,textarea.span3,.uneditable-input.span3{width:256px}input.span2,textarea.span2,.uneditable-input.span2{width:156px}input.span1,textarea.span1,.uneditable-input.span1{width:56px}.thumbnails{margin-left:-30px}.thumbnails>li{margin-left:30px}.row-fluid .thumbnails{margin-left:0}} @media(min-width:768px) and (max-width:979px){.row{margin-left:-20px;*zoom:1}.row:before,.row:after{display:table;line-height:0;content:""}.row:after{clear:both}[class*="span"]{float:left;min-height:1px;margin-left:20px}.container,.navbar-static-top .container,.navbar-fixed-top .container,.navbar-fixed-bottom .container{width:724px}.span12{width:724px}.span11{width:662px}.span10{width:600px}.span9{width:538px}.span8{width:476px}.span7{width:414px}.span6{width:352px}.span5{width:290px}.span4{width:228px}.span3{width:166px}.span2{width:104px}.span1{width:42px}.offset12{margin-left:764px}.offset11{margin-left:702px}.offset10{margin-left:640px}.offset9{margin-left:578px}.offset8{margin-left:516px}.offset7{margin-left:454px}.offset6{margin-left:392px}.offset5{margin-left:330px}.offset4{margin-left:268px}.offset3{margin-left:206px}.offset2{margin-left:144px}.offset1{margin-left:82px}.row-fluid{width:100%;*zoom:1}.row-fluid:before,.row-fluid:after{display:table;line-height:0;content:""}.row-fluid:after{clear:both}.row-fluid [class*="span"]{display:block;float:left;width:100%;min-height:30px;margin-left:2.7624309392265194%;*margin-left:2.709239449864817%;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.row-fluid [class*="span"]:first-child{margin-left:0}.row-fluid .span12{width:100%;*width:99.94680851063829%}.row-fluid .span11{width:91.43646408839778%;*width:91.38327259903608%}.row-fluid .span10{width:82.87292817679558%;*width:82.81973668743387%}.row-fluid .span9{width:74.30939226519337%;*width:74.25620077583166%}.row-fluid .span8{width:65.74585635359117%;*width:65.69266486422946%}.row-fluid .span7{width:57.18232044198895%;*width:57.12912895262725%}.row-fluid .span6{width:48.61878453038674%;*width:48.56559304102504%}.row-fluid .span5{width:40.05524861878453%;*width:40.00205712942283%}.row-fluid .span4{width:31.491712707182323%;*width:31.43852121782062%}.row-fluid .span3{width:22.92817679558011%;*width:22.87498530621841%}.row-fluid .span2{width:14.3646408839779%;*width:14.311449394616199%}.row-fluid .span1{width:5.801104972375691%;*width:5.747913483013988%}.row-fluid .offset12{margin-left:105.52486187845304%;*margin-left:105.41847889972962%}.row-fluid .offset12:first-child{margin-left:102.76243093922652%;*margin-left:102.6560479605031%}.row-fluid .offset11{margin-left:96.96132596685082%;*margin-left:96.8549429881274%}.row-fluid .offset11:first-child{margin-left:94.1988950276243%;*margin-left:94.09251204890089%}.row-fluid .offset10{margin-left:88.39779005524862%;*margin-left:88.2914070765252%}.row-fluid .offset10:first-child{margin-left:85.6353591160221%;*margin-left:85.52897613729868%}.row-fluid .offset9{margin-left:79.8342541436464%;*margin-left:79.72787116492299%}.row-fluid .offset9:first-child{margin-left:77.07182320441989%;*margin-left:76.96544022569647%}.row-fluid .offset8{margin-left:71.2707182320442%;*margin-left:71.16433525332079%}.row-fluid .offset8:first-child{margin-left:68.50828729281768%;*margin-left:68.40190431409427%}.row-fluid .offset7{margin-left:62.70718232044199%;*margin-left:62.600799341718584%}.row-fluid .offset7:first-child{margin-left:59.94475138121547%;*margin-left:59.838368402492065%}.row-fluid .offset6{margin-left:54.14364640883978%;*margin-left:54.037263430116376%}.row-fluid .offset6:first-child{margin-left:51.38121546961326%;*margin-left:51.27483249088986%}.row-fluid .offset5{margin-left:45.58011049723757%;*margin-left:45.47372751851417%}.row-fluid .offset5:first-child{margin-left:42.81767955801105%;*margin-left:42.71129657928765%}.row-fluid .offset4{margin-left:37.01657458563536%;*margin-left:36.91019160691196%}.row-fluid .offset4:first-child{margin-left:34.25414364640884%;*margin-left:34.14776066768544%}.row-fluid .offset3{margin-left:28.45303867403315%;*margin-left:28.346655695309746%}.row-fluid .offset3:first-child{margin-left:25.69060773480663%;*margin-left:25.584224756083227%}.row-fluid .offset2{margin-left:19.88950276243094%;*margin-left:19.783119783707537%}.row-fluid .offset2:first-child{margin-left:17.12707182320442%;*margin-left:17.02068884448102%}.row-fluid .offset1{margin-left:11.32596685082873%;*margin-left:11.219583872105325%}.row-fluid .offset1:first-child{margin-left:8.56353591160221%;*margin-left:8.457152932878806%}input,textarea,.uneditable-input{margin-left:0}.controls-row [class*="span"]+[class*="span"]{margin-left:20px}input.span12,textarea.span12,.uneditable-input.span12{width:710px}input.span11,textarea.span11,.uneditable-input.span11{width:648px}input.span10,textarea.span10,.uneditable-input.span10{width:586px}input.span9,textarea.span9,.uneditable-input.span9{width:524px}input.span8,textarea.span8,.uneditable-input.span8{width:462px}input.span7,textarea.span7,.uneditable-input.span7{width:400px}input.span6,textarea.span6,.uneditable-input.span6{width:338px}input.span5,textarea.span5,.uneditable-input.span5{width:276px}input.span4,textarea.span4,.uneditable-input.span4{width:214px}input.span3,textarea.span3,.uneditable-input.span3{width:152px}input.span2,textarea.span2,.uneditable-input.span2{width:90px}input.span1,textarea.span1,.uneditable-input.span1{width:28px}} @media(max-width:767px){body{padding-right:20px;padding-left:20px}.navbar-fixed-top,.navbar-fixed-bottom,.navbar-static-top{margin-right:-20px;margin-left:-20px}.container-fluid{padding:0}.dl-horizontal dt{float:none;width:auto;clear:none;text-align:left}.dl-horizontal dd{margin-left:0}.container{width:auto}.row-fluid{width:100%}.row,.thumbnails{margin-left:0}.thumbnails>li{float:none;margin-left:0}[class*="span"],.row-fluid [class*="span"]{display:block;float:none;width:100%;margin-left:0;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.span12,.row-fluid .span12{width:100%;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.input-large,.input-xlarge,.input-xxlarge,input[class*="span"],select[class*="span"],textarea[class*="span"],.uneditable-input{display:block;width:100%;min-height:30px;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.input-prepend input,.input-append input,.input-prepend input[class*="span"],.input-append input[class*="span"]{display:inline-block;width:auto}.controls-row [class*="span"]+[class*="span"]{margin-left:0}.modal{position:fixed;top:20px;right:20px;left:20px;width:auto;margin:0}.modal.fade.in{top:auto}} @media(max-width:480px){.nav-collapse{-webkit-transform:translate3d(0,0,0)}.page-header h1 small{display:block;line-height:20px}input[type="checkbox"],input[type="radio"]{border:1px solid #ccc}.form-horizontal .control-label{float:none;width:auto;padding-top:0;text-align:left}.form-horizontal .controls{margin-left:0}.form-horizontal .control-list{padding-top:0}.form-horizontal .form-actions{padding-right:10px;padding-left:10px}.modal{top:10px;right:10px;left:10px}.modal-header .close{padding:10px;margin:-10px}.carousel-caption{position:static}} @media(max-width:979px){body{padding-top:0}.navbar-fixed-top,.navbar-fixed-bottom{position:static}.navbar-fixed-top{margin-bottom:20px}.navbar-fixed-bottom{margin-top:20px}.navbar-fixed-top .navbar-inner,.navbar-fixed-bottom .navbar-inner{padding:5px}.navbar .container{width:auto;padding:0}.navbar .brand{padding-right:10px;padding-left:10px;margin:0 0 0 -5px}.nav-collapse{clear:both}.nav-collapse .nav{float:none;margin:0 0 10px}.nav-collapse .nav>li{float:none}.nav-collapse .nav>li>a{margin-bottom:2px}.nav-collapse .nav>.divider-vertical{display:none}.nav-collapse .nav .nav-header{color:#777;text-shadow:none}.nav-collapse .nav>li>a,.nav-collapse .dropdown-menu a{padding:9px 15px;font-weight:bold;color:#777;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}.nav-collapse .btn{padding:4px 10px 4px;font-weight:normal;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}.nav-collapse .dropdown-menu li+li a{margin-bottom:2px}.nav-collapse .nav>li>a:hover,.nav-collapse .dropdown-menu a:hover{background-color:#f2f2f2}.navbar-inverse .nav-collapse .nav>li>a:hover,.navbar-inverse .nav-collapse .dropdown-menu a:hover{background-color:#111}.nav-collapse.in .btn-group{padding:0;margin-top:5px}.nav-collapse .dropdown-menu{position:static;top:auto;left:auto;display:block;float:none;max-width:none;padding:0;margin:0 15px;background-color:transparent;border:0;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;-webkit-box-shadow:none;-moz-box-shadow:none;box-shadow:none}.nav-collapse .dropdown-menu:before,.nav-collapse .dropdown-menu:after{display:none}.nav-collapse .dropdown-menu .divider{display:none}.nav-collapse .nav>li>.dropdown-menu:before,.nav-collapse .nav>li>.dropdown-menu:after{display:none}.nav-collapse .navbar-form,.nav-collapse .navbar-search{float:none;padding:10px 15px;margin:10px 0;border-top:1px solid #f2f2f2;border-bottom:1px solid #f2f2f2;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.1);-moz-box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.1);box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.1)}.navbar-inverse .nav-collapse .navbar-form,.navbar-inverse .nav-collapse .navbar-search{border-top-color:#111;border-bottom-color:#111}.navbar .nav-collapse .nav.pull-right{float:none;margin-left:0}.nav-collapse,.nav-collapse.collapse{height:0;overflow:hidden}.navbar .btn-navbar{display:block}.navbar-static .navbar-inner{padding-right:10px;padding-left:10px}} @media(min-width:980px){.nav-collapse.collapse{height:auto!important;overflow:visible!important}}
\ No newline at end of file
diff --git a/website/bootstrap.min.css b/website/bootstrap.min.css
deleted file mode 100644
index 31d8b96..0000000
--- a/website/bootstrap.min.css
+++ /dev/null
@@ -1,9 +0,0 @@
-/*!
- * Bootstrap v2.1.1
- *
- * Copyright 2012 Twitter, Inc
- * Licensed under the Apache License v2.0
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Designed and built with all the love in the world @twitter by @mdo and @fat.
- */article,aside,details,figcaption,figure,footer,header,hgroup,nav,section{display:block}audio,canvas,video{display:inline-block;*display:inline;*zoom:1}audio:not([controls]){display:none}html{font-size:100%;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}a:focus{outline:thin dotted #333;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}a:hover,a:active{outline:0}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{width:auto\9;height:auto;max-width:100%;vertical-align:middle;border:0;-ms-interpolation-mode:bicubic}#map_canvas img{max-width:none}button,input,select,textarea{margin:0;font-size:100%;vertical-align:middle}button,input{*overflow:visible;line-height:normal}button::-moz-focus-inner,input::-moz-focus-inner{padding:0;border:0}button,input[type="button"],input[type="reset"],input[type="submit"]{cursor:pointer;-webkit-appearance:button}input[type="search"]{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;-webkit-appearance:textfield}input[type="search"]::-webkit-search-decoration,input[type="search"]::-webkit-search-cancel-button{-webkit-appearance:none}textarea{overflow:auto;vertical-align:top}.clearfix{*zoom:1}.clearfix:before,.clearfix:after{display:table;line-height:0;content:""}.clearfix:after{clear:both}.hide-text{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.input-block-level{display:block;width:100%;min-height:30px;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}body{margin:0;font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-size:14px;line-height:20px;color:#333;background-color:#fff}a{color:#08c;text-decoration:none}a:hover{color:#005580;text-decoration:underline}.img-rounded{-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px}.img-polaroid{padding:4px;background-color:#fff;border:1px solid #ccc;border:1px solid rgba(0,0,0,0.2);-webkit-box-shadow:0 1px 3px rgba(0,0,0,0.1);-moz-box-shadow:0 1px 3px rgba(0,0,0,0.1);box-shadow:0 1px 3px rgba(0,0,0,0.1)}.img-circle{-webkit-border-radius:500px;-moz-border-radius:500px;border-radius:500px}.row{margin-left:-20px;*zoom:1}.row:before,.row:after{display:table;line-height:0;content:""}.row:after{clear:both}[class*="span"]{float:left;min-height:1px;margin-left:20px}.container,.navbar-static-top .container,.navbar-fixed-top .container,.navbar-fixed-bottom .container{width:940px}.span12{width:940px}.span11{width:860px}.span10{width:780px}.span9{width:700px}.span8{width:620px}.span7{width:540px}.span6{width:460px}.span5{width:380px}.span4{width:300px}.span3{width:220px}.span2{width:140px}.span1{width:60px}.offset12{margin-left:980px}.offset11{margin-left:900px}.offset10{margin-left:820px}.offset9{margin-left:740px}.offset8{margin-left:660px}.offset7{margin-left:580px}.offset6{margin-left:500px}.offset5{margin-left:420px}.offset4{margin-left:340px}.offset3{margin-left:260px}.offset2{margin-left:180px}.offset1{margin-left:100px}.row-fluid{width:100%;*zoom:1}.row-fluid:before,.row-fluid:after{display:table;line-height:0;content:""}.row-fluid:after{clear:both}.row-fluid [class*="span"]{display:block;float:left;width:100%;min-height:30px;margin-left:2.127659574468085%;*margin-left:2.074468085106383%;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.row-fluid [class*="span"]:first-child{margin-left:0}.row-fluid .span12{width:100%;*width:99.94680851063829%}.row-fluid .span11{width:91.48936170212765%;*width:91.43617021276594%}.row-fluid .span10{width:82.97872340425532%;*width:82.92553191489361%}.row-fluid .span9{width:74.46808510638297%;*width:74.41489361702126%}.row-fluid .span8{width:65.95744680851064%;*width:65.90425531914893%}.row-fluid .span7{width:57.44680851063829%;*width:57.39361702127659%}.row-fluid .span6{width:48.93617021276595%;*width:48.88297872340425%}.row-fluid .span5{width:40.42553191489362%;*width:40.37234042553192%}.row-fluid .span4{width:31.914893617021278%;*width:31.861702127659576%}.row-fluid .span3{width:23.404255319148934%;*width:23.351063829787233%}.row-fluid .span2{width:14.893617021276595%;*width:14.840425531914894%}.row-fluid .span1{width:6.382978723404255%;*width:6.329787234042553%}.row-fluid .offset12{margin-left:104.25531914893617%;*margin-left:104.14893617021275%}.row-fluid .offset12:first-child{margin-left:102.12765957446808%;*margin-left:102.02127659574467%}.row-fluid .offset11{margin-left:95.74468085106382%;*margin-left:95.6382978723404%}.row-fluid .offset11:first-child{margin-left:93.61702127659574%;*margin-left:93.51063829787232%}.row-fluid .offset10{margin-left:87.23404255319149%;*margin-left:87.12765957446807%}.row-fluid .offset10:first-child{margin-left:85.1063829787234%;*margin-left:84.99999999999999%}.row-fluid .offset9{margin-left:78.72340425531914%;*margin-left:78.61702127659572%}.row-fluid .offset9:first-child{margin-left:76.59574468085106%;*margin-left:76.48936170212764%}.row-fluid .offset8{margin-left:70.2127659574468%;*margin-left:70.10638297872339%}.row-fluid .offset8:first-child{margin-left:68.08510638297872%;*margin-left:67.9787234042553%}.row-fluid .offset7{margin-left:61.70212765957446%;*margin-left:61.59574468085106%}.row-fluid .offset7:first-child{margin-left:59.574468085106375%;*margin-left:59.46808510638297%}.row-fluid .offset6{margin-left:53.191489361702125%;*margin-left:53.085106382978715%}.row-fluid .offset6:first-child{margin-left:51.063829787234035%;*margin-left:50.95744680851063%}.row-fluid .offset5{margin-left:44.68085106382979%;*margin-left:44.57446808510638%}.row-fluid .offset5:first-child{margin-left:42.5531914893617%;*margin-left:42.4468085106383%}.row-fluid .offset4{margin-left:36.170212765957444%;*margin-left:36.06382978723405%}.row-fluid .offset4:first-child{margin-left:34.04255319148936%;*margin-left:33.93617021276596%}.row-fluid .offset3{margin-left:27.659574468085104%;*margin-left:27.5531914893617%}.row-fluid .offset3:first-child{margin-left:25.53191489361702%;*margin-left:25.425531914893618%}.row-fluid .offset2{margin-left:19.148936170212764%;*margin-left:19.04255319148936%}.row-fluid .offset2:first-child{margin-left:17.02127659574468%;*margin-left:16.914893617021278%}.row-fluid .offset1{margin-left:10.638297872340425%;*margin-left:10.53191489361702%}.row-fluid .offset1:first-child{margin-left:8.51063829787234%;*margin-left:8.404255319148938%}[class*="span"].hide,.row-fluid [class*="span"].hide{display:none}[class*="span"].pull-right,.row-fluid [class*="span"].pull-right{float:right}.container{margin-right:auto;margin-left:auto;*zoom:1}.container:before,.container:after{display:table;line-height:0;content:""}.container:after{clear:both}.container-fluid{padding-right:20px;padding-left:20px;*zoom:1}.container-fluid:before,.container-fluid:after{display:table;line-height:0;content:""}.container-fluid:after{clear:both}p{margin:0 0 10px}.lead{margin-bottom:20px;font-size:21px;font-weight:200;line-height:30px}small{font-size:85%}strong{font-weight:bold}em{font-style:italic}cite{font-style:normal}.muted{color:#999}.text-warning{color:#c09853}.text-error{color:#b94a48}.text-info{color:#3a87ad}.text-success{color:#468847}h1,h2,h3,h4,h5,h6{margin:10px 0;font-family:inherit;font-weight:bold;line-height:1;color:inherit;text-rendering:optimizelegibility}h1 small,h2 small,h3 small,h4 small,h5 small,h6 small{font-weight:normal;line-height:1;color:#999}h1{font-size:36px;line-height:40px}h2{font-size:30px;line-height:40px}h3{font-size:24px;line-height:40px}h4{font-size:18px;line-height:20px}h5{font-size:14px;line-height:20px}h6{font-size:12px;line-height:20px}h1 small{font-size:24px}h2 small{font-size:18px}h3 small{font-size:14px}h4 small{font-size:14px}.page-header{padding-bottom:9px;margin:20px 0 30px;border-bottom:1px solid #eee}ul,ol{padding:0;margin:0 0 10px 25px}ul ul,ul ol,ol ol,ol ul{margin-bottom:0}li{line-height:20px}ul.unstyled,ol.unstyled{margin-left:0;list-style:none}dl{margin-bottom:20px}dt,dd{line-height:20px}dt{font-weight:bold}dd{margin-left:10px}.dl-horizontal{*zoom:1}.dl-horizontal:before,.dl-horizontal:after{display:table;line-height:0;content:""}.dl-horizontal:after{clear:both}.dl-horizontal dt{float:left;width:160px;overflow:hidden;clear:left;text-align:right;text-overflow:ellipsis;white-space:nowrap}.dl-horizontal dd{margin-left:180px}hr{margin:20px 0;border:0;border-top:1px solid #eee;border-bottom:1px solid #fff}abbr[title]{cursor:help;border-bottom:1px dotted #999}abbr.initialism{font-size:90%;text-transform:uppercase}blockquote{padding:0 0 0 15px;margin:0 0 20px;border-left:5px solid #eee}blockquote p{margin-bottom:0;font-size:16px;font-weight:300;line-height:25px}blockquote small{display:block;line-height:20px;color:#999}blockquote small:before{content:'\2014 \00A0'}blockquote.pull-right{float:right;padding-right:15px;padding-left:0;border-right:5px solid #eee;border-left:0}blockquote.pull-right p,blockquote.pull-right small{text-align:right}blockquote.pull-right small:before{content:''}blockquote.pull-right small:after{content:'\00A0 \2014'}q:before,q:after,blockquote:before,blockquote:after{content:""}address{display:block;margin-bottom:20px;font-style:normal;line-height:20px}code,pre{padding:0 3px 2px;font-family:Monaco,Menlo,Consolas,"Courier New",monospace;font-size:12px;color:#333;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}code{padding:2px 4px;color:#d14;background-color:#f7f7f9;border:1px solid #e1e1e8}pre{display:block;padding:9.5px;margin:0 0 10px;font-size:13px;line-height:20px;word-break:break-all;word-wrap:break-word;white-space:pre;white-space:pre-wrap;background-color:#f5f5f5;border:1px solid #ccc;border:1px solid rgba(0,0,0,0.15);-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}pre.prettyprint{margin-bottom:20px}pre code{padding:0;color:inherit;background-color:transparent;border:0}.pre-scrollable{max-height:340px;overflow-y:scroll}form{margin:0 0 20px}fieldset{padding:0;margin:0;border:0}legend{display:block;width:100%;padding:0;margin-bottom:20px;font-size:21px;line-height:40px;color:#333;border:0;border-bottom:1px solid #e5e5e5}legend small{font-size:15px;color:#999}label,input,button,select,textarea{font-size:14px;font-weight:normal;line-height:20px}input,button,select,textarea{font-family:"Helvetica Neue",Helvetica,Arial,sans-serif}label{display:block;margin-bottom:5px}select,textarea,input[type="text"],input[type="password"],input[type="datetime"],input[type="datetime-local"],input[type="date"],input[type="month"],input[type="time"],input[type="week"],input[type="number"],input[type="email"],input[type="url"],input[type="search"],input[type="tel"],input[type="color"],.uneditable-input{display:inline-block;height:20px;padding:4px 6px;margin-bottom:9px;font-size:14px;line-height:20px;color:#555;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}input,textarea,.uneditable-input{width:206px}textarea{height:auto}textarea,input[type="text"],input[type="password"],input[type="datetime"],input[type="datetime-local"],input[type="date"],input[type="month"],input[type="time"],input[type="week"],input[type="number"],input[type="email"],input[type="url"],input[type="search"],input[type="tel"],input[type="color"],.uneditable-input{background-color:#fff;border:1px solid #ccc;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);-webkit-transition:border linear .2s,box-shadow linear .2s;-moz-transition:border linear .2s,box-shadow linear .2s;-o-transition:border linear .2s,box-shadow linear .2s;transition:border linear .2s,box-shadow linear .2s}textarea:focus,input[type="text"]:focus,input[type="password"]:focus,input[type="datetime"]:focus,input[type="datetime-local"]:focus,input[type="date"]:focus,input[type="month"]:focus,input[type="time"]:focus,input[type="week"]:focus,input[type="number"]:focus,input[type="email"]:focus,input[type="url"]:focus,input[type="search"]:focus,input[type="tel"]:focus,input[type="color"]:focus,.uneditable-input:focus{border-color:rgba(82,168,236,0.8);outline:0;outline:thin dotted \9;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(82,168,236,0.6);-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(82,168,236,0.6);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(82,168,236,0.6)}input[type="radio"],input[type="checkbox"]{margin:4px 0 0;margin-top:1px \9;*margin-top:0;line-height:normal;cursor:pointer}input[type="file"],input[type="image"],input[type="submit"],input[type="reset"],input[type="button"],input[type="radio"],input[type="checkbox"]{width:auto}select,input[type="file"]{height:30px;*margin-top:4px;line-height:30px}select{width:220px;background-color:#fff;border:1px solid #ccc}select[multiple],select[size]{height:auto}select:focus,input[type="file"]:focus,input[type="radio"]:focus,input[type="checkbox"]:focus{outline:thin dotted #333;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}.uneditable-input,.uneditable-textarea{color:#999;cursor:not-allowed;background-color:#fcfcfc;border-color:#ccc;-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,0.025);-moz-box-shadow:inset 0 1px 2px rgba(0,0,0,0.025);box-shadow:inset 0 1px 2px rgba(0,0,0,0.025)}.uneditable-input{overflow:hidden;white-space:nowrap}.uneditable-textarea{width:auto;height:auto}input:-moz-placeholder,textarea:-moz-placeholder{color:#999}input:-ms-input-placeholder,textarea:-ms-input-placeholder{color:#999}input::-webkit-input-placeholder,textarea::-webkit-input-placeholder{color:#999}.radio,.checkbox{min-height:18px;padding-left:18px}.radio input[type="radio"],.checkbox input[type="checkbox"]{float:left;margin-left:-18px}.controls>.radio:first-child,.controls>.checkbox:first-child{padding-top:5px}.radio.inline,.checkbox.inline{display:inline-block;padding-top:5px;margin-bottom:0;vertical-align:middle}.radio.inline+.radio.inline,.checkbox.inline+.checkbox.inline{margin-left:10px}.input-mini{width:60px}.input-small{width:90px}.input-medium{width:150px}.input-large{width:210px}.input-xlarge{width:270px}.input-xxlarge{width:530px}input[class*="span"],select[class*="span"],textarea[class*="span"],.uneditable-input[class*="span"],.row-fluid input[class*="span"],.row-fluid select[class*="span"],.row-fluid textarea[class*="span"],.row-fluid .uneditable-input[class*="span"]{float:none;margin-left:0}.input-append input[class*="span"],.input-append .uneditable-input[class*="span"],.input-prepend input[class*="span"],.input-prepend .uneditable-input[class*="span"],.row-fluid input[class*="span"],.row-fluid select[class*="span"],.row-fluid textarea[class*="span"],.row-fluid .uneditable-input[class*="span"],.row-fluid .input-prepend [class*="span"],.row-fluid .input-append [class*="span"]{display:inline-block}input,textarea,.uneditable-input{margin-left:0}.controls-row [class*="span"]+[class*="span"]{margin-left:20px}input.span12,textarea.span12,.uneditable-input.span12{width:926px}input.span11,textarea.span11,.uneditable-input.span11{width:846px}input.span10,textarea.span10,.uneditable-input.span10{width:766px}input.span9,textarea.span9,.uneditable-input.span9{width:686px}input.span8,textarea.span8,.uneditable-input.span8{width:606px}input.span7,textarea.span7,.uneditable-input.span7{width:526px}input.span6,textarea.span6,.uneditable-input.span6{width:446px}input.span5,textarea.span5,.uneditable-input.span5{width:366px}input.span4,textarea.span4,.uneditable-input.span4{width:286px}input.span3,textarea.span3,.uneditable-input.span3{width:206px}input.span2,textarea.span2,.uneditable-input.span2{width:126px}input.span1,textarea.span1,.uneditable-input.span1{width:46px}.controls-row{*zoom:1}.controls-row:before,.controls-row:after{display:table;line-height:0;content:""}.controls-row:after{clear:both}.controls-row [class*="span"]{float:left}input[disabled],select[disabled],textarea[disabled],input[readonly],select[readonly],textarea[readonly]{cursor:not-allowed;background-color:#eee}input[type="radio"][disabled],input[type="checkbox"][disabled],input[type="radio"][readonly],input[type="checkbox"][readonly]{background-color:transparent}.control-group.warning>label,.control-group.warning .help-block,.control-group.warning .help-inline{color:#c09853}.control-group.warning .checkbox,.control-group.warning .radio,.control-group.warning input,.control-group.warning select,.control-group.warning textarea{color:#c09853}.control-group.warning input,.control-group.warning select,.control-group.warning textarea{border-color:#c09853;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.control-group.warning input:focus,.control-group.warning select:focus,.control-group.warning textarea:focus{border-color:#a47e3c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #dbc59e;-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #dbc59e;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #dbc59e}.control-group.warning .input-prepend .add-on,.control-group.warning .input-append .add-on{color:#c09853;background-color:#fcf8e3;border-color:#c09853}.control-group.error>label,.control-group.error .help-block,.control-group.error .help-inline{color:#b94a48}.control-group.error .checkbox,.control-group.error .radio,.control-group.error input,.control-group.error select,.control-group.error textarea{color:#b94a48}.control-group.error input,.control-group.error select,.control-group.error textarea{border-color:#b94a48;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.control-group.error input:focus,.control-group.error select:focus,.control-group.error textarea:focus{border-color:#953b39;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #d59392;-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #d59392;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #d59392}.control-group.error .input-prepend .add-on,.control-group.error .input-append .add-on{color:#b94a48;background-color:#f2dede;border-color:#b94a48}.control-group.success>label,.control-group.success .help-block,.control-group.success .help-inline{color:#468847}.control-group.success .checkbox,.control-group.success .radio,.control-group.success input,.control-group.success select,.control-group.success textarea{color:#468847}.control-group.success input,.control-group.success select,.control-group.success textarea{border-color:#468847;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.control-group.success input:focus,.control-group.success select:focus,.control-group.success textarea:focus{border-color:#356635;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #7aba7b;-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #7aba7b;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #7aba7b}.control-group.success .input-prepend .add-on,.control-group.success .input-append .add-on{color:#468847;background-color:#dff0d8;border-color:#468847}.control-group.info>label,.control-group.info .help-block,.control-group.info .help-inline{color:#3a87ad}.control-group.info .checkbox,.control-group.info .radio,.control-group.info input,.control-group.info select,.control-group.info textarea{color:#3a87ad}.control-group.info input,.control-group.info select,.control-group.info textarea{border-color:#3a87ad;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.control-group.info input:focus,.control-group.info select:focus,.control-group.info textarea:focus{border-color:#2d6987;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #7ab5d3;-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #7ab5d3;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #7ab5d3}.control-group.info .input-prepend .add-on,.control-group.info .input-append .add-on{color:#3a87ad;background-color:#d9edf7;border-color:#3a87ad}input:focus:required:invalid,textarea:focus:required:invalid,select:focus:required:invalid{color:#b94a48;border-color:#ee5f5b}input:focus:required:invalid:focus,textarea:focus:required:invalid:focus,select:focus:required:invalid:focus{border-color:#e9322d;-webkit-box-shadow:0 0 6px #f8b9b7;-moz-box-shadow:0 0 6px #f8b9b7;box-shadow:0 0 6px #f8b9b7}.form-actions{padding:19px 20px 20px;margin-top:20px;margin-bottom:20px;background-color:#f5f5f5;border-top:1px solid #e5e5e5;*zoom:1}.form-actions:before,.form-actions:after{display:table;line-height:0;content:""}.form-actions:after{clear:both}.help-block,.help-inline{color:#595959}.help-block{display:block;margin-bottom:10px}.help-inline{display:inline-block;*display:inline;padding-left:5px;vertical-align:middle;*zoom:1}.input-append,.input-prepend{margin-bottom:5px;font-size:0;white-space:nowrap}.input-append input,.input-prepend input,.input-append select,.input-prepend select,.input-append .uneditable-input,.input-prepend .uneditable-input{position:relative;margin-bottom:0;*margin-left:0;font-size:14px;vertical-align:top;-webkit-border-radius:0 3px 3px 0;-moz-border-radius:0 3px 3px 0;border-radius:0 3px 3px 0}.input-append input:focus,.input-prepend input:focus,.input-append select:focus,.input-prepend select:focus,.input-append .uneditable-input:focus,.input-prepend .uneditable-input:focus{z-index:2}.input-append .add-on,.input-prepend .add-on{display:inline-block;width:auto;height:20px;min-width:16px;padding:4px 5px;font-size:14px;font-weight:normal;line-height:20px;text-align:center;text-shadow:0 1px 0 #fff;background-color:#eee;border:1px solid #ccc}.input-append .add-on,.input-prepend .add-on,.input-append .btn,.input-prepend .btn{vertical-align:top;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.input-append .active,.input-prepend .active{background-color:#a9dba9;border-color:#46a546}.input-prepend .add-on,.input-prepend .btn{margin-right:-1px}.input-prepend .add-on:first-child,.input-prepend .btn:first-child{-webkit-border-radius:3px 0 0 3px;-moz-border-radius:3px 0 0 3px;border-radius:3px 0 0 3px}.input-append input,.input-append select,.input-append .uneditable-input{-webkit-border-radius:3px 0 0 3px;-moz-border-radius:3px 0 0 3px;border-radius:3px 0 0 3px}.input-append .add-on,.input-append .btn{margin-left:-1px}.input-append .add-on:last-child,.input-append .btn:last-child{-webkit-border-radius:0 3px 3px 0;-moz-border-radius:0 3px 3px 0;border-radius:0 3px 3px 0}.input-prepend.input-append input,.input-prepend.input-append select,.input-prepend.input-append .uneditable-input{-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.input-prepend.input-append .add-on:first-child,.input-prepend.input-append .btn:first-child{margin-right:-1px;-webkit-border-radius:3px 0 0 3px;-moz-border-radius:3px 0 0 3px;border-radius:3px 0 0 3px}.input-prepend.input-append .add-on:last-child,.input-prepend.input-append .btn:last-child{margin-left:-1px;-webkit-border-radius:0 3px 3px 0;-moz-border-radius:0 3px 3px 0;border-radius:0 3px 3px 0}input.search-query{padding-right:14px;padding-right:4px \9;padding-left:14px;padding-left:4px \9;margin-bottom:0;-webkit-border-radius:15px;-moz-border-radius:15px;border-radius:15px}.form-search .input-append .search-query,.form-search .input-prepend .search-query{-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.form-search .input-append .search-query{-webkit-border-radius:14px 0 0 14px;-moz-border-radius:14px 0 0 14px;border-radius:14px 0 0 14px}.form-search .input-append .btn{-webkit-border-radius:0 14px 14px 0;-moz-border-radius:0 14px 14px 0;border-radius:0 14px 14px 0}.form-search .input-prepend .search-query{-webkit-border-radius:0 14px 14px 0;-moz-border-radius:0 14px 14px 0;border-radius:0 14px 14px 0}.form-search .input-prepend .btn{-webkit-border-radius:14px 0 0 14px;-moz-border-radius:14px 0 0 14px;border-radius:14px 0 0 14px}.form-search input,.form-inline input,.form-horizontal input,.form-search textarea,.form-inline textarea,.form-horizontal textarea,.form-search select,.form-inline select,.form-horizontal select,.form-search .help-inline,.form-inline .help-inline,.form-horizontal .help-inline,.form-search .uneditable-input,.form-inline .uneditable-input,.form-horizontal .uneditable-input,.form-search .input-prepend,.form-inline .input-prepend,.form-horizontal .input-prepend,.form-search .input-append,.form-inline .input-append,.form-horizontal .input-append{display:inline-block;*display:inline;margin-bottom:0;vertical-align:middle;*zoom:1}.form-search .hide,.form-inline .hide,.form-horizontal .hide{display:none}.form-search label,.form-inline label,.form-search .btn-group,.form-inline .btn-group{display:inline-block}.form-search .input-append,.form-inline .input-append,.form-search .input-prepend,.form-inline .input-prepend{margin-bottom:0}.form-search .radio,.form-search .checkbox,.form-inline .radio,.form-inline .checkbox{padding-left:0;margin-bottom:0;vertical-align:middle}.form-search .radio input[type="radio"],.form-search .checkbox input[type="checkbox"],.form-inline .radio input[type="radio"],.form-inline .checkbox input[type="checkbox"]{float:left;margin-right:3px;margin-left:0}.control-group{margin-bottom:10px}legend+.control-group{margin-top:20px;-webkit-margin-top-collapse:separate}.form-horizontal .control-group{margin-bottom:20px;*zoom:1}.form-horizontal .control-group:before,.form-horizontal .control-group:after{display:table;line-height:0;content:""}.form-horizontal .control-group:after{clear:both}.form-horizontal .control-label{float:left;width:160px;padding-top:5px;text-align:right}.form-horizontal .controls{*display:inline-block;*padding-left:20px;margin-left:180px;*margin-left:0}.form-horizontal .controls:first-child{*padding-left:180px}.form-horizontal .help-block{margin-bottom:0}.form-horizontal input+.help-block,.form-horizontal select+.help-block,.form-horizontal textarea+.help-block{margin-top:10px}.form-horizontal .form-actions{padding-left:180px}table{max-width:100%;background-color:transparent;border-collapse:collapse;border-spacing:0}.table{width:100%;margin-bottom:20px}.table th,.table td{padding:8px;line-height:20px;text-align:left;vertical-align:top;border-top:1px solid #ddd}.table th{font-weight:bold}.table thead th{vertical-align:bottom}.table caption+thead tr:first-child th,.table caption+thead tr:first-child td,.table colgroup+thead tr:first-child th,.table colgroup+thead tr:first-child td,.table thead:first-child tr:first-child th,.table thead:first-child tr:first-child td{border-top:0}.table tbody+tbody{border-top:2px solid #ddd}.table-condensed th,.table-condensed td{padding:4px 5px}.table-bordered{border:1px solid #ddd;border-collapse:separate;*border-collapse:collapse;border-left:0;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}.table-bordered th,.table-bordered td{border-left:1px solid #ddd}.table-bordered caption+thead tr:first-child th,.table-bordered caption+tbody tr:first-child th,.table-bordered caption+tbody tr:first-child td,.table-bordered colgroup+thead tr:first-child th,.table-bordered colgroup+tbody tr:first-child th,.table-bordered colgroup+tbody tr:first-child td,.table-bordered thead:first-child tr:first-child th,.table-bordered tbody:first-child tr:first-child th,.table-bordered tbody:first-child tr:first-child td{border-top:0}.table-bordered thead:first-child tr:first-child th:first-child,.table-bordered tbody:first-child tr:first-child td:first-child{-webkit-border-top-left-radius:4px;border-top-left-radius:4px;-moz-border-radius-topleft:4px}.table-bordered thead:first-child tr:first-child th:last-child,.table-bordered tbody:first-child tr:first-child td:last-child{-webkit-border-top-right-radius:4px;border-top-right-radius:4px;-moz-border-radius-topright:4px}.table-bordered thead:last-child tr:last-child th:first-child,.table-bordered tbody:last-child tr:last-child td:first-child,.table-bordered tfoot:last-child tr:last-child td:first-child{-webkit-border-radius:0 0 0 4px;-moz-border-radius:0 0 0 4px;border-radius:0 0 0 4px;-webkit-border-bottom-left-radius:4px;border-bottom-left-radius:4px;-moz-border-radius-bottomleft:4px}.table-bordered thead:last-child tr:last-child th:last-child,.table-bordered tbody:last-child tr:last-child td:last-child,.table-bordered tfoot:last-child tr:last-child td:last-child{-webkit-border-bottom-right-radius:4px;border-bottom-right-radius:4px;-moz-border-radius-bottomright:4px}.table-bordered caption+thead tr:first-child th:first-child,.table-bordered caption+tbody tr:first-child td:first-child,.table-bordered colgroup+thead tr:first-child th:first-child,.table-bordered colgroup+tbody tr:first-child td:first-child{-webkit-border-top-left-radius:4px;border-top-left-radius:4px;-moz-border-radius-topleft:4px}.table-bordered caption+thead tr:first-child th:last-child,.table-bordered caption+tbody tr:first-child td:last-child,.table-bordered colgroup+thead tr:first-child th:last-child,.table-bordered colgroup+tbody tr:first-child td:last-child{-webkit-border-top-right-radius:4px;border-top-right-radius:4px;-moz-border-radius-topleft:4px}.table-striped tbody tr:nth-child(odd) td,.table-striped tbody tr:nth-child(odd) th{background-color:#f9f9f9}.table-hover tbody tr:hover td,.table-hover tbody tr:hover th{background-color:#f5f5f5}table [class*=span],.row-fluid table [class*=span]{display:table-cell;float:none;margin-left:0}.table .span1{float:none;width:44px;margin-left:0}.table .span2{float:none;width:124px;margin-left:0}.table .span3{float:none;width:204px;margin-left:0}.table .span4{float:none;width:284px;margin-left:0}.table .span5{float:none;width:364px;margin-left:0}.table .span6{float:none;width:444px;margin-left:0}.table .span7{float:none;width:524px;margin-left:0}.table .span8{float:none;width:604px;margin-left:0}.table .span9{float:none;width:684px;margin-left:0}.table .span10{float:none;width:764px;margin-left:0}.table .span11{float:none;width:844px;margin-left:0}.table .span12{float:none;width:924px;margin-left:0}.table .span13{float:none;width:1004px;margin-left:0}.table .span14{float:none;width:1084px;margin-left:0}.table .span15{float:none;width:1164px;margin-left:0}.table .span16{float:none;width:1244px;margin-left:0}.table .span17{float:none;width:1324px;margin-left:0}.table .span18{float:none;width:1404px;margin-left:0}.table .span19{float:none;width:1484px;margin-left:0}.table .span20{float:none;width:1564px;margin-left:0}.table .span21{float:none;width:1644px;margin-left:0}.table .span22{float:none;width:1724px;margin-left:0}.table .span23{float:none;width:1804px;margin-left:0}.table .span24{float:none;width:1884px;margin-left:0}.table tbody tr.success td{background-color:#dff0d8}.table tbody tr.error td{background-color:#f2dede}.table tbody tr.warning td{background-color:#fcf8e3}.table tbody tr.info td{background-color:#d9edf7}.table-hover tbody tr.success:hover td{background-color:#d0e9c6}.table-hover tbody tr.error:hover td{background-color:#ebcccc}.table-hover tbody tr.warning:hover td{background-color:#faf2cc}.table-hover tbody tr.info:hover td{background-color:#c4e3f3}[class^="icon-"],[class*=" icon-"]{display:inline-block;width:14px;height:14px;margin-top:1px;*margin-right:.3em;line-height:14px;vertical-align:text-top;background-image:url("../img/glyphicons-halflings.png");background-position:14px 14px;background-repeat:no-repeat}.icon-white,.nav-tabs>.active>a>[class^="icon-"],.nav-tabs>.active>a>[class*=" icon-"],.nav-pills>.active>a>[class^="icon-"],.nav-pills>.active>a>[class*=" icon-"],.nav-list>.active>a>[class^="icon-"],.nav-list>.active>a>[class*=" icon-"],.navbar-inverse .nav>.active>a>[class^="icon-"],.navbar-inverse .nav>.active>a>[class*=" icon-"],.dropdown-menu>li>a:hover>[class^="icon-"],.dropdown-menu>li>a:hover>[class*=" icon-"],.dropdown-menu>.active>a>[class^="icon-"],.dropdown-menu>.active>a>[class*=" icon-"]{background-image:url("../img/glyphicons-halflings-white.png")}.icon-glass{background-position:0 0}.icon-music{background-position:-24px 0}.icon-search{background-position:-48px 0}.icon-envelope{background-position:-72px 0}.icon-heart{background-position:-96px 0}.icon-star{background-position:-120px 0}.icon-star-empty{background-position:-144px 0}.icon-user{background-position:-168px 0}.icon-film{background-position:-192px 0}.icon-th-large{background-position:-216px 0}.icon-th{background-position:-240px 0}.icon-th-list{background-position:-264px 0}.icon-ok{background-position:-288px 0}.icon-remove{background-position:-312px 0}.icon-zoom-in{background-position:-336px 0}.icon-zoom-out{background-position:-360px 0}.icon-off{background-position:-384px 0}.icon-signal{background-position:-408px 0}.icon-cog{background-position:-432px 0}.icon-trash{background-position:-456px 0}.icon-home{background-position:0 -24px}.icon-file{background-position:-24px -24px}.icon-time{background-position:-48px -24px}.icon-road{background-position:-72px -24px}.icon-download-alt{background-position:-96px -24px}.icon-download{background-position:-120px -24px}.icon-upload{background-position:-144px -24px}.icon-inbox{background-position:-168px -24px}.icon-play-circle{background-position:-192px -24px}.icon-repeat{background-position:-216px -24px}.icon-refresh{background-position:-240px -24px}.icon-list-alt{background-position:-264px -24px}.icon-lock{background-position:-287px -24px}.icon-flag{background-position:-312px -24px}.icon-headphones{background-position:-336px -24px}.icon-volume-off{background-position:-360px -24px}.icon-volume-down{background-position:-384px -24px}.icon-volume-up{background-position:-408px -24px}.icon-qrcode{background-position:-432px -24px}.icon-barcode{background-position:-456px -24px}.icon-tag{background-position:0 -48px}.icon-tags{background-position:-25px -48px}.icon-book{background-position:-48px -48px}.icon-bookmark{background-position:-72px -48px}.icon-print{background-position:-96px -48px}.icon-camera{background-position:-120px -48px}.icon-font{background-position:-144px -48px}.icon-bold{background-position:-167px -48px}.icon-italic{background-position:-192px -48px}.icon-text-height{background-position:-216px -48px}.icon-text-width{background-position:-240px -48px}.icon-align-left{background-position:-264px -48px}.icon-align-center{background-position:-288px -48px}.icon-align-right{background-position:-312px -48px}.icon-align-justify{background-position:-336px -48px}.icon-list{background-position:-360px -48px}.icon-indent-left{background-position:-384px -48px}.icon-indent-right{background-position:-408px -48px}.icon-facetime-video{background-position:-432px -48px}.icon-picture{background-position:-456px -48px}.icon-pencil{background-position:0 -72px}.icon-map-marker{background-position:-24px -72px}.icon-adjust{background-position:-48px -72px}.icon-tint{background-position:-72px -72px}.icon-edit{background-position:-96px -72px}.icon-share{background-position:-120px -72px}.icon-check{background-position:-144px -72px}.icon-move{background-position:-168px -72px}.icon-step-backward{background-position:-192px -72px}.icon-fast-backward{background-position:-216px -72px}.icon-backward{background-position:-240px -72px}.icon-play{background-position:-264px -72px}.icon-pause{background-position:-288px -72px}.icon-stop{background-position:-312px -72px}.icon-forward{background-position:-336px -72px}.icon-fast-forward{background-position:-360px -72px}.icon-step-forward{background-position:-384px -72px}.icon-eject{background-position:-408px -72px}.icon-chevron-left{background-position:-432px -72px}.icon-chevron-right{background-position:-456px -72px}.icon-plus-sign{background-position:0 -96px}.icon-minus-sign{background-position:-24px -96px}.icon-remove-sign{background-position:-48px -96px}.icon-ok-sign{background-position:-72px -96px}.icon-question-sign{background-position:-96px -96px}.icon-info-sign{background-position:-120px -96px}.icon-screenshot{background-position:-144px -96px}.icon-remove-circle{background-position:-168px -96px}.icon-ok-circle{background-position:-192px -96px}.icon-ban-circle{background-position:-216px -96px}.icon-arrow-left{background-position:-240px -96px}.icon-arrow-right{background-position:-264px -96px}.icon-arrow-up{background-position:-289px -96px}.icon-arrow-down{background-position:-312px -96px}.icon-share-alt{background-position:-336px -96px}.icon-resize-full{background-position:-360px -96px}.icon-resize-small{background-position:-384px -96px}.icon-plus{background-position:-408px -96px}.icon-minus{background-position:-433px -96px}.icon-asterisk{background-position:-456px -96px}.icon-exclamation-sign{background-position:0 -120px}.icon-gift{background-position:-24px -120px}.icon-leaf{background-position:-48px -120px}.icon-fire{background-position:-72px -120px}.icon-eye-open{background-position:-96px -120px}.icon-eye-close{background-position:-120px -120px}.icon-warning-sign{background-position:-144px -120px}.icon-plane{background-position:-168px -120px}.icon-calendar{background-position:-192px -120px}.icon-random{width:16px;background-position:-216px -120px}.icon-comment{background-position:-240px -120px}.icon-magnet{background-position:-264px -120px}.icon-chevron-up{background-position:-288px -120px}.icon-chevron-down{background-position:-313px -119px}.icon-retweet{background-position:-336px -120px}.icon-shopping-cart{background-position:-360px -120px}.icon-folder-close{background-position:-384px -120px}.icon-folder-open{width:16px;background-position:-408px -120px}.icon-resize-vertical{background-position:-432px -119px}.icon-resize-horizontal{background-position:-456px -118px}.icon-hdd{background-position:0 -144px}.icon-bullhorn{background-position:-24px -144px}.icon-bell{background-position:-48px -144px}.icon-certificate{background-position:-72px -144px}.icon-thumbs-up{background-position:-96px -144px}.icon-thumbs-down{background-position:-120px -144px}.icon-hand-right{background-position:-144px -144px}.icon-hand-left{background-position:-168px -144px}.icon-hand-up{background-position:-192px -144px}.icon-hand-down{background-position:-216px -144px}.icon-circle-arrow-right{background-position:-240px -144px}.icon-circle-arrow-left{background-position:-264px -144px}.icon-circle-arrow-up{background-position:-288px -144px}.icon-circle-arrow-down{background-position:-312px -144px}.icon-globe{background-position:-336px -144px}.icon-wrench{background-position:-360px -144px}.icon-tasks{background-position:-384px -144px}.icon-filter{background-position:-408px -144px}.icon-briefcase{background-position:-432px -144px}.icon-fullscreen{background-position:-456px -144px}.dropup,.dropdown{position:relative}.dropdown-toggle{*margin-bottom:-3px}.dropdown-toggle:active,.open .dropdown-toggle{outline:0}.caret{display:inline-block;width:0;height:0;vertical-align:top;border-top:4px solid #000;border-right:4px solid transparent;border-left:4px solid transparent;content:""}.dropdown .caret{margin-top:8px;margin-left:2px}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:160px;padding:5px 0;margin:2px 0 0;list-style:none;background-color:#fff;border:1px solid #ccc;border:1px solid rgba(0,0,0,0.2);*border-right-width:2px;*border-bottom-width:2px;-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px;-webkit-box-shadow:0 5px 10px rgba(0,0,0,0.2);-moz-box-shadow:0 5px 10px rgba(0,0,0,0.2);box-shadow:0 5px 10px rgba(0,0,0,0.2);-webkit-background-clip:padding-box;-moz-background-clip:padding;background-clip:padding-box}.dropdown-menu.pull-right{right:0;left:auto}.dropdown-menu .divider{*width:100%;height:1px;margin:9px 1px;*margin:-5px 0 5px;overflow:hidden;background-color:#e5e5e5;border-bottom:1px solid #fff}.dropdown-menu a{display:block;padding:3px 20px;clear:both;font-weight:normal;line-height:20px;color:#333;white-space:nowrap}.dropdown-menu li>a:hover,.dropdown-menu li>a:focus,.dropdown-submenu:hover>a{color:#fff;text-decoration:none;background-color:#08c;background-color:#0081c2;background-image:-moz-linear-gradient(top,#08c,#0077b3);background-image:-webkit-gradient(linear,0 0,0 100%,from(#08c),to(#0077b3));background-image:-webkit-linear-gradient(top,#08c,#0077b3);background-image:-o-linear-gradient(top,#08c,#0077b3);background-image:linear-gradient(to bottom,#08c,#0077b3);background-repeat:repeat-x;filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ff0088cc',endColorstr='#ff0077b3',GradientType=0)}.dropdown-menu .active>a,.dropdown-menu .active>a:hover{color:#fff;text-decoration:none;background-color:#08c;background-color:#0081c2;background-image:linear-gradient(to bottom,#08c,#0077b3);background-image:-moz-linear-gradient(top,#08c,#0077b3);background-image:-webkit-gradient(linear,0 0,0 100%,from(#08c),to(#0077b3));background-image:-webkit-linear-gradient(top,#08c,#0077b3);background-image:-o-linear-gradient(top,#08c,#0077b3);background-repeat:repeat-x;outline:0;filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ff0088cc',endColorstr='#ff0077b3',GradientType=0)}.dropdown-menu .disabled>a,.dropdown-menu .disabled>a:hover{color:#999}.dropdown-menu .disabled>a:hover{text-decoration:none;cursor:default;background-color:transparent}.open{*z-index:1000}.open>.dropdown-menu{display:block}.pull-right>.dropdown-menu{right:0;left:auto}.dropup .caret,.navbar-fixed-bottom .dropdown .caret{border-top:0;border-bottom:4px solid #000;content:""}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu{top:auto;bottom:100%;margin-bottom:1px}.dropdown-submenu{position:relative}.dropdown-submenu>.dropdown-menu{top:0;left:100%;margin-top:-6px;margin-left:-1px;-webkit-border-radius:0 6px 6px 6px;-moz-border-radius:0 6px 6px 6px;border-radius:0 6px 6px 6px}.dropdown-submenu:hover>.dropdown-menu{display:block}.dropdown-submenu>a:after{display:block;float:right;width:0;height:0;margin-top:5px;margin-right:-10px;border-color:transparent;border-left-color:#ccc;border-style:solid;border-width:5px 0 5px 5px;content:" "}.dropdown-submenu:hover>a:after{border-left-color:#fff}.dropdown .dropdown-menu .nav-header{padding-right:20px;padding-left:20px}.typeahead{margin-top:2px;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.05);-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.05);box-shadow:inset 0 1px 1px rgba(0,0,0,0.05)}.well blockquote{border-color:#ddd;border-color:rgba(0,0,0,0.15)}.well-large{padding:24px;-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px}.well-small{padding:9px;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}.fade{opacity:0;-webkit-transition:opacity .15s linear;-moz-transition:opacity .15s linear;-o-transition:opacity .15s linear;transition:opacity .15s linear}.fade.in{opacity:1}.collapse{position:relative;height:0;overflow:hidden;-webkit-transition:height .35s ease;-moz-transition:height .35s ease;-o-transition:height .35s ease;transition:height .35s ease}.collapse.in{height:auto}.close{float:right;font-size:20px;font-weight:bold;line-height:20px;color:#000;text-shadow:0 1px 0 #fff;opacity:.2;filter:alpha(opacity=20)}.close:hover{color:#000;text-decoration:none;cursor:pointer;opacity:.4;filter:alpha(opacity=40)}button.close{padding:0;cursor:pointer;background:transparent;border:0;-webkit-appearance:none}.btn{display:inline-block;*display:inline;padding:4px 14px;margin-bottom:0;*margin-left:.3em;font-size:14px;line-height:20px;*line-height:20px;color:#333;text-align:center;text-shadow:0 1px 1px rgba(255,255,255,0.75);vertical-align:middle;cursor:pointer;background-color:#f5f5f5;*background-color:#e6e6e6;background-image:-webkit-gradient(linear,0 0,0 100%,from(#fff),to(#e6e6e6));background-image:-webkit-linear-gradient(top,#fff,#e6e6e6);background-image:-o-linear-gradient(top,#fff,#e6e6e6);background-image:linear-gradient(to bottom,#fff,#e6e6e6);background-image:-moz-linear-gradient(top,#fff,#e6e6e6);background-repeat:repeat-x;border:1px solid #bbb;*border:0;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);border-color:#e6e6e6 #e6e6e6 #bfbfbf;border-bottom-color:#a2a2a2;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ffffffff',endColorstr='#ffe6e6e6',GradientType=0);filter:progid:dximagetransform.microsoft.gradient(enabled=false);*zoom:1;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05);-moz-box-shadow:inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05);box-shadow:inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05)}.btn:hover,.btn:active,.btn.active,.btn.disabled,.btn[disabled]{color:#333;background-color:#e6e6e6;*background-color:#d9d9d9}.btn:active,.btn.active{background-color:#ccc \9}.btn:first-child{*margin-left:0}.btn:hover{color:#333;text-decoration:none;background-color:#e6e6e6;*background-color:#d9d9d9;background-position:0 -15px;-webkit-transition:background-position .1s linear;-moz-transition:background-position .1s linear;-o-transition:background-position .1s linear;transition:background-position .1s linear}.btn:focus{outline:thin dotted #333;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}.btn.active,.btn:active{background-color:#e6e6e6;background-color:#d9d9d9 \9;background-image:none;outline:0;-webkit-box-shadow:inset 0 2px 4px rgba(0,0,0,0.15),0 1px 2px rgba(0,0,0,0.05);-moz-box-shadow:inset 0 2px 4px rgba(0,0,0,0.15),0 1px 2px rgba(0,0,0,0.05);box-shadow:inset 0 2px 4px rgba(0,0,0,0.15),0 1px 2px rgba(0,0,0,0.05)}.btn.disabled,.btn[disabled]{cursor:default;background-color:#e6e6e6;background-image:none;opacity:.65;filter:alpha(opacity=65);-webkit-box-shadow:none;-moz-box-shadow:none;box-shadow:none}.btn-large{padding:9px 14px;font-size:16px;line-height:normal;-webkit-border-radius:5px;-moz-border-radius:5px;border-radius:5px}.btn-large [class^="icon-"]{margin-top:2px}.btn-small{padding:3px 9px;font-size:12px;line-height:18px}.btn-small [class^="icon-"]{margin-top:0}.btn-mini{padding:2px 6px;font-size:11px;line-height:17px}.btn-block{display:block;width:100%;padding-right:0;padding-left:0;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.btn-block+.btn-block{margin-top:5px}input[type="submit"].btn-block,input[type="reset"].btn-block,input[type="button"].btn-block{width:100%}.btn-primary.active,.btn-warning.active,.btn-danger.active,.btn-success.active,.btn-info.active,.btn-inverse.active{color:rgba(255,255,255,0.75)}.btn{border-color:#c5c5c5;border-color:rgba(0,0,0,0.15) rgba(0,0,0,0.15) rgba(0,0,0,0.25)}.btn-primary{color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#006dcc;*background-color:#04c;background-image:-webkit-gradient(linear,0 0,0 100%,from(#08c),to(#04c));background-image:-webkit-linear-gradient(top,#08c,#04c);background-image:-o-linear-gradient(top,#08c,#04c);background-image:linear-gradient(to bottom,#08c,#04c);background-image:-moz-linear-gradient(top,#08c,#04c);background-repeat:repeat-x;border-color:#04c #04c #002a80;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ff0088cc',endColorstr='#ff0044cc',GradientType=0);filter:progid:dximagetransform.microsoft.gradient(enabled=false)}.btn-primary:hover,.btn-primary:active,.btn-primary.active,.btn-primary.disabled,.btn-primary[disabled]{color:#fff;background-color:#04c;*background-color:#003bb3}.btn-primary:active,.btn-primary.active{background-color:#039 \9}.btn-warning{color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#faa732;*background-color:#f89406;background-image:-webkit-gradient(linear,0 0,0 100%,from(#fbb450),to(#f89406));background-image:-webkit-linear-gradient(top,#fbb450,#f89406);background-image:-o-linear-gradient(top,#fbb450,#f89406);background-image:linear-gradient(to bottom,#fbb450,#f89406);background-image:-moz-linear-gradient(top,#fbb450,#f89406);background-repeat:repeat-x;border-color:#f89406 #f89406 #ad6704;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);filter:progid:dximagetransform.microsoft.gradient(startColorstr='#fffbb450',endColorstr='#fff89406',GradientType=0);filter:progid:dximagetransform.microsoft.gradient(enabled=false)}.btn-warning:hover,.btn-warning:active,.btn-warning.active,.btn-warning.disabled,.btn-warning[disabled]{color:#fff;background-color:#f89406;*background-color:#df8505}.btn-warning:active,.btn-warning.active{background-color:#c67605 \9}.btn-danger{color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#da4f49;*background-color:#bd362f;background-image:-webkit-gradient(linear,0 0,0 100%,from(#ee5f5b),to(#bd362f));background-image:-webkit-linear-gradient(top,#ee5f5b,#bd362f);background-image:-o-linear-gradient(top,#ee5f5b,#bd362f);background-image:linear-gradient(to bottom,#ee5f5b,#bd362f);background-image:-moz-linear-gradient(top,#ee5f5b,#bd362f);background-repeat:repeat-x;border-color:#bd362f #bd362f #802420;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ffee5f5b',endColorstr='#ffbd362f',GradientType=0);filter:progid:dximagetransform.microsoft.gradient(enabled=false)}.btn-danger:hover,.btn-danger:active,.btn-danger.active,.btn-danger.disabled,.btn-danger[disabled]{color:#fff;background-color:#bd362f;*background-color:#a9302a}.btn-danger:active,.btn-danger.active{background-color:#942a25 \9}.btn-success{color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#5bb75b;*background-color:#51a351;background-image:-webkit-gradient(linear,0 0,0 100%,from(#62c462),to(#51a351));background-image:-webkit-linear-gradient(top,#62c462,#51a351);background-image:-o-linear-gradient(top,#62c462,#51a351);background-image:linear-gradient(to bottom,#62c462,#51a351);background-image:-moz-linear-gradient(top,#62c462,#51a351);background-repeat:repeat-x;border-color:#51a351 #51a351 #387038;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ff62c462',endColorstr='#ff51a351',GradientType=0);filter:progid:dximagetransform.microsoft.gradient(enabled=false)}.btn-success:hover,.btn-success:active,.btn-success.active,.btn-success.disabled,.btn-success[disabled]{color:#fff;background-color:#51a351;*background-color:#499249}.btn-success:active,.btn-success.active{background-color:#408140 \9}.btn-info{color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#49afcd;*background-color:#2f96b4;background-image:-webkit-gradient(linear,0 0,0 100%,from(#5bc0de),to(#2f96b4));background-image:-webkit-linear-gradient(top,#5bc0de,#2f96b4);background-image:-o-linear-gradient(top,#5bc0de,#2f96b4);background-image:linear-gradient(to bottom,#5bc0de,#2f96b4);background-image:-moz-linear-gradient(top,#5bc0de,#2f96b4);background-repeat:repeat-x;border-color:#2f96b4 #2f96b4 #1f6377;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ff5bc0de',endColorstr='#ff2f96b4',GradientType=0);filter:progid:dximagetransform.microsoft.gradient(enabled=false)}.btn-info:hover,.btn-info:active,.btn-info.active,.btn-info.disabled,.btn-info[disabled]{color:#fff;background-color:#2f96b4;*background-color:#2a85a0}.btn-info:active,.btn-info.active{background-color:#24748c \9}.btn-inverse{color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#363636;*background-color:#222;background-image:-webkit-gradient(linear,0 0,0 100%,from(#444),to(#222));background-image:-webkit-linear-gradient(top,#444,#222);background-image:-o-linear-gradient(top,#444,#222);background-image:linear-gradient(to bottom,#444,#222);background-image:-moz-linear-gradient(top,#444,#222);background-repeat:repeat-x;border-color:#222 #222 #000;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ff444444',endColorstr='#ff222222',GradientType=0);filter:progid:dximagetransform.microsoft.gradient(enabled=false)}.btn-inverse:hover,.btn-inverse:active,.btn-inverse.active,.btn-inverse.disabled,.btn-inverse[disabled]{color:#fff;background-color:#222;*background-color:#151515}.btn-inverse:active,.btn-inverse.active{background-color:#080808 \9}button.btn,input[type="submit"].btn{*padding-top:3px;*padding-bottom:3px}button.btn::-moz-focus-inner,input[type="submit"].btn::-moz-focus-inner{padding:0;border:0}button.btn.btn-large,input[type="submit"].btn.btn-large{*padding-top:7px;*padding-bottom:7px}button.btn.btn-small,input[type="submit"].btn.btn-small{*padding-top:3px;*padding-bottom:3px}button.btn.btn-mini,input[type="submit"].btn.btn-mini{*padding-top:1px;*padding-bottom:1px}.btn-link,.btn-link:active,.btn-link[disabled]{background-color:transparent;background-image:none;-webkit-box-shadow:none;-moz-box-shadow:none;box-shadow:none}.btn-link{color:#08c;cursor:pointer;border-color:transparent;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.btn-link:hover{color:#005580;text-decoration:underline;background-color:transparent}.btn-link[disabled]:hover{color:#333;text-decoration:none}.btn-group{position:relative;*margin-left:.3em;font-size:0;white-space:nowrap;vertical-align:middle}.btn-group:first-child{*margin-left:0}.btn-group+.btn-group{margin-left:5px}.btn-toolbar{margin-top:10px;margin-bottom:10px;font-size:0}.btn-toolbar .btn-group{display:inline-block;*display:inline;*zoom:1}.btn-toolbar .btn+.btn,.btn-toolbar .btn-group+.btn,.btn-toolbar .btn+.btn-group{margin-left:5px}.btn-group>.btn{position:relative;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.btn-group>.btn+.btn{margin-left:-1px}.btn-group>.btn,.btn-group>.dropdown-menu{font-size:14px}.btn-group>.btn-mini{font-size:11px}.btn-group>.btn-small{font-size:12px}.btn-group>.btn-large{font-size:16px}.btn-group>.btn:first-child{margin-left:0;-webkit-border-bottom-left-radius:4px;border-bottom-left-radius:4px;-webkit-border-top-left-radius:4px;border-top-left-radius:4px;-moz-border-radius-bottomleft:4px;-moz-border-radius-topleft:4px}.btn-group>.btn:last-child,.btn-group>.dropdown-toggle{-webkit-border-top-right-radius:4px;border-top-right-radius:4px;-webkit-border-bottom-right-radius:4px;border-bottom-right-radius:4px;-moz-border-radius-topright:4px;-moz-border-radius-bottomright:4px}.btn-group>.btn.large:first-child{margin-left:0;-webkit-border-bottom-left-radius:6px;border-bottom-left-radius:6px;-webkit-border-top-left-radius:6px;border-top-left-radius:6px;-moz-border-radius-bottomleft:6px;-moz-border-radius-topleft:6px}.btn-group>.btn.large:last-child,.btn-group>.large.dropdown-toggle{-webkit-border-top-right-radius:6px;border-top-right-radius:6px;-webkit-border-bottom-right-radius:6px;border-bottom-right-radius:6px;-moz-border-radius-topright:6px;-moz-border-radius-bottomright:6px}.btn-group>.btn:hover,.btn-group>.btn:focus,.btn-group>.btn:active,.btn-group>.btn.active{z-index:2}.btn-group .dropdown-toggle:active,.btn-group.open .dropdown-toggle{outline:0}.btn-group>.btn+.dropdown-toggle{*padding-top:5px;padding-right:8px;*padding-bottom:5px;padding-left:8px;-webkit-box-shadow:inset 1px 0 0 rgba(255,255,255,0.125),inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05);-moz-box-shadow:inset 1px 0 0 rgba(255,255,255,0.125),inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05);box-shadow:inset 1px 0 0 rgba(255,255,255,0.125),inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05)}.btn-group>.btn-mini+.dropdown-toggle{*padding-top:2px;padding-right:5px;*padding-bottom:2px;padding-left:5px}.btn-group>.btn-small+.dropdown-toggle{*padding-top:5px;*padding-bottom:4px}.btn-group>.btn-large+.dropdown-toggle{*padding-top:7px;padding-right:12px;*padding-bottom:7px;padding-left:12px}.btn-group.open .dropdown-toggle{background-image:none;-webkit-box-shadow:inset 0 2px 4px rgba(0,0,0,0.15),0 1px 2px rgba(0,0,0,0.05);-moz-box-shadow:inset 0 2px 4px rgba(0,0,0,0.15),0 1px 2px rgba(0,0,0,0.05);box-shadow:inset 0 2px 4px rgba(0,0,0,0.15),0 1px 2px rgba(0,0,0,0.05)}.btn-group.open .btn.dropdown-toggle{background-color:#e6e6e6}.btn-group.open .btn-primary.dropdown-toggle{background-color:#04c}.btn-group.open .btn-warning.dropdown-toggle{background-color:#f89406}.btn-group.open .btn-danger.dropdown-toggle{background-color:#bd362f}.btn-group.open .btn-success.dropdown-toggle{background-color:#51a351}.btn-group.open .btn-info.dropdown-toggle{background-color:#2f96b4}.btn-group.open .btn-inverse.dropdown-toggle{background-color:#222}.btn .caret{margin-top:8px;margin-left:0}.btn-mini .caret,.btn-small .caret,.btn-large .caret{margin-top:6px}.btn-large .caret{border-top-width:5px;border-right-width:5px;border-left-width:5px}.dropup .btn-large .caret{border-top:0;border-bottom:5px solid #000}.btn-primary .caret,.btn-warning .caret,.btn-danger .caret,.btn-info .caret,.btn-success .caret,.btn-inverse .caret{border-top-color:#fff;border-bottom-color:#fff}.btn-group-vertical{display:inline-block;*display:inline;*zoom:1}.btn-group-vertical .btn{display:block;float:none;width:100%;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.btn-group-vertical .btn+.btn{margin-top:-1px;margin-left:0}.btn-group-vertical .btn:first-child{-webkit-border-radius:4px 4px 0 0;-moz-border-radius:4px 4px 0 0;border-radius:4px 4px 0 0}.btn-group-vertical .btn:last-child{-webkit-border-radius:0 0 4px 4px;-moz-border-radius:0 0 4px 4px;border-radius:0 0 4px 4px}.btn-group-vertical .btn-large:first-child{-webkit-border-radius:6px 6px 0 0;-moz-border-radius:6px 6px 0 0;border-radius:6px 6px 0 0}.btn-group-vertical .btn-large:last-child{-webkit-border-radius:0 0 6px 6px;-moz-border-radius:0 0 6px 6px;border-radius:0 0 6px 6px}.alert{padding:8px 35px 8px 14px;margin-bottom:20px;color:#c09853;text-shadow:0 1px 0 rgba(255,255,255,0.5);background-color:#fcf8e3;border:1px solid #fbeed5;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}.alert h4{margin:0}.alert .close{position:relative;top:-2px;right:-21px;line-height:20px}.alert-success{color:#468847;background-color:#dff0d8;border-color:#d6e9c6}.alert-danger,.alert-error{color:#b94a48;background-color:#f2dede;border-color:#eed3d7}.alert-info{color:#3a87ad;background-color:#d9edf7;border-color:#bce8f1}.alert-block{padding-top:14px;padding-bottom:14px}.alert-block>p,.alert-block>ul{margin-bottom:0}.alert-block p+p{margin-top:5px}.nav{margin-bottom:20px;margin-left:0;list-style:none}.nav>li>a{display:block}.nav>li>a:hover{text-decoration:none;background-color:#eee}.nav>.pull-right{float:right}.nav-header{display:block;padding:3px 15px;font-size:11px;font-weight:bold;line-height:20px;color:#999;text-shadow:0 1px 0 rgba(255,255,255,0.5);text-transform:uppercase}.nav li+.nav-header{margin-top:9px}.nav-list{padding-right:15px;padding-left:15px;margin-bottom:0}.nav-list>li>a,.nav-list .nav-header{margin-right:-15px;margin-left:-15px;text-shadow:0 1px 0 rgba(255,255,255,0.5)}.nav-list>li>a{padding:3px 15px}.nav-list>.active>a,.nav-list>.active>a:hover{color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.2);background-color:#08c}.nav-list [class^="icon-"]{margin-right:2px}.nav-list .divider{*width:100%;height:1px;margin:9px 1px;*margin:-5px 0 5px;overflow:hidden;background-color:#e5e5e5;border-bottom:1px solid #fff}.nav-tabs,.nav-pills{*zoom:1}.nav-tabs:before,.nav-pills:before,.nav-tabs:after,.nav-pills:after{display:table;line-height:0;content:""}.nav-tabs:after,.nav-pills:after{clear:both}.nav-tabs>li,.nav-pills>li{float:left}.nav-tabs>li>a,.nav-pills>li>a{padding-right:12px;padding-left:12px;margin-right:2px;line-height:14px}.nav-tabs{border-bottom:1px solid #ddd}.nav-tabs>li{margin-bottom:-1px}.nav-tabs>li>a{padding-top:8px;padding-bottom:8px;line-height:20px;border:1px solid transparent;-webkit-border-radius:4px 4px 0 0;-moz-border-radius:4px 4px 0 0;border-radius:4px 4px 0 0}.nav-tabs>li>a:hover{border-color:#eee #eee #ddd}.nav-tabs>.active>a,.nav-tabs>.active>a:hover{color:#555;cursor:default;background-color:#fff;border:1px solid #ddd;border-bottom-color:transparent}.nav-pills>li>a{padding-top:8px;padding-bottom:8px;margin-top:2px;margin-bottom:2px;-webkit-border-radius:5px;-moz-border-radius:5px;border-radius:5px}.nav-pills>.active>a,.nav-pills>.active>a:hover{color:#fff;background-color:#08c}.nav-stacked>li{float:none}.nav-stacked>li>a{margin-right:0}.nav-tabs.nav-stacked{border-bottom:0}.nav-tabs.nav-stacked>li>a{border:1px solid #ddd;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.nav-tabs.nav-stacked>li:first-child>a{-webkit-border-top-right-radius:4px;border-top-right-radius:4px;-webkit-border-top-left-radius:4px;border-top-left-radius:4px;-moz-border-radius-topright:4px;-moz-border-radius-topleft:4px}.nav-tabs.nav-stacked>li:last-child>a{-webkit-border-bottom-right-radius:4px;border-bottom-right-radius:4px;-webkit-border-bottom-left-radius:4px;border-bottom-left-radius:4px;-moz-border-radius-bottomright:4px;-moz-border-radius-bottomleft:4px}.nav-tabs.nav-stacked>li>a:hover{z-index:2;border-color:#ddd}.nav-pills.nav-stacked>li>a{margin-bottom:3px}.nav-pills.nav-stacked>li:last-child>a{margin-bottom:1px}.nav-tabs .dropdown-menu{-webkit-border-radius:0 0 6px 6px;-moz-border-radius:0 0 6px 6px;border-radius:0 0 6px 6px}.nav-pills .dropdown-menu{-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px}.nav .dropdown-toggle .caret{margin-top:6px;border-top-color:#08c;border-bottom-color:#08c}.nav .dropdown-toggle:hover .caret{border-top-color:#005580;border-bottom-color:#005580}.nav-tabs .dropdown-toggle .caret{margin-top:8px}.nav .active .dropdown-toggle .caret{border-top-color:#fff;border-bottom-color:#fff}.nav-tabs .active .dropdown-toggle .caret{border-top-color:#555;border-bottom-color:#555}.nav>.dropdown.active>a:hover{cursor:pointer}.nav-tabs .open .dropdown-toggle,.nav-pills .open .dropdown-toggle,.nav>li.dropdown.open.active>a:hover{color:#fff;background-color:#999;border-color:#999}.nav li.dropdown.open .caret,.nav li.dropdown.open.active .caret,.nav li.dropdown.open a:hover .caret{border-top-color:#fff;border-bottom-color:#fff;opacity:1;filter:alpha(opacity=100)}.tabs-stacked .open>a:hover{border-color:#999}.tabbable{*zoom:1}.tabbable:before,.tabbable:after{display:table;line-height:0;content:""}.tabbable:after{clear:both}.tab-content{overflow:auto}.tabs-below>.nav-tabs,.tabs-right>.nav-tabs,.tabs-left>.nav-tabs{border-bottom:0}.tab-content>.tab-pane,.pill-content>.pill-pane{display:none}.tab-content>.active,.pill-content>.active{display:block}.tabs-below>.nav-tabs{border-top:1px solid #ddd}.tabs-below>.nav-tabs>li{margin-top:-1px;margin-bottom:0}.tabs-below>.nav-tabs>li>a{-webkit-border-radius:0 0 4px 4px;-moz-border-radius:0 0 4px 4px;border-radius:0 0 4px 4px}.tabs-below>.nav-tabs>li>a:hover{border-top-color:#ddd;border-bottom-color:transparent}.tabs-below>.nav-tabs>.active>a,.tabs-below>.nav-tabs>.active>a:hover{border-color:transparent #ddd #ddd #ddd}.tabs-left>.nav-tabs>li,.tabs-right>.nav-tabs>li{float:none}.tabs-left>.nav-tabs>li>a,.tabs-right>.nav-tabs>li>a{min-width:74px;margin-right:0;margin-bottom:3px}.tabs-left>.nav-tabs{float:left;margin-right:19px;border-right:1px solid #ddd}.tabs-left>.nav-tabs>li>a{margin-right:-1px;-webkit-border-radius:4px 0 0 4px;-moz-border-radius:4px 0 0 4px;border-radius:4px 0 0 4px}.tabs-left>.nav-tabs>li>a:hover{border-color:#eee #ddd #eee #eee}.tabs-left>.nav-tabs .active>a,.tabs-left>.nav-tabs .active>a:hover{border-color:#ddd transparent #ddd #ddd;*border-right-color:#fff}.tabs-right>.nav-tabs{float:right;margin-left:19px;border-left:1px solid #ddd}.tabs-right>.nav-tabs>li>a{margin-left:-1px;-webkit-border-radius:0 4px 4px 0;-moz-border-radius:0 4px 4px 0;border-radius:0 4px 4px 0}.tabs-right>.nav-tabs>li>a:hover{border-color:#eee #eee #eee #ddd}.tabs-right>.nav-tabs .active>a,.tabs-right>.nav-tabs .active>a:hover{border-color:#ddd #ddd #ddd transparent;*border-left-color:#fff}.nav>.disabled>a{color:#999}.nav>.disabled>a:hover{text-decoration:none;cursor:default;background-color:transparent}.navbar{*position:relative;*z-index:2;margin-bottom:20px;overflow:visible;color:#777}.navbar-inner{min-height:40px;padding-right:20px;padding-left:20px;background-color:#fafafa;background-image:-moz-linear-gradient(top,#fff,#f2f2f2);background-image:-webkit-gradient(linear,0 0,0 100%,from(#fff),to(#f2f2f2));background-image:-webkit-linear-gradient(top,#fff,#f2f2f2);background-image:-o-linear-gradient(top,#fff,#f2f2f2);background-image:linear-gradient(to bottom,#fff,#f2f2f2);background-repeat:repeat-x;border:1px solid #d4d4d4;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ffffffff',endColorstr='#fff2f2f2',GradientType=0);*zoom:1;-webkit-box-shadow:0 1px 4px rgba(0,0,0,0.065);-moz-box-shadow:0 1px 4px rgba(0,0,0,0.065);box-shadow:0 1px 4px rgba(0,0,0,0.065)}.navbar-inner:before,.navbar-inner:after{display:table;line-height:0;content:""}.navbar-inner:after{clear:both}.navbar .container{width:auto}.nav-collapse.collapse{height:auto}.navbar .brand{display:block;float:left;padding:10px 20px 10px;margin-left:-20px;font-size:20px;font-weight:200;color:#777;text-shadow:0 1px 0 #fff}.navbar .brand:hover{text-decoration:none}.navbar-text{margin-bottom:0;line-height:40px}.navbar-link{color:#777}.navbar-link:hover{color:#333}.navbar .divider-vertical{height:40px;margin:0 9px;border-right:1px solid #fff;border-left:1px solid #f2f2f2}.navbar .btn,.navbar .btn-group{margin-top:5px}.navbar .btn-group .btn,.navbar .input-prepend .btn,.navbar .input-append .btn{margin-top:0}.navbar-form{margin-bottom:0;*zoom:1}.navbar-form:before,.navbar-form:after{display:table;line-height:0;content:""}.navbar-form:after{clear:both}.navbar-form input,.navbar-form select,.navbar-form .radio,.navbar-form .checkbox{margin-top:5px}.navbar-form input,.navbar-form select,.navbar-form .btn{display:inline-block;margin-bottom:0}.navbar-form input[type="image"],.navbar-form input[type="checkbox"],.navbar-form input[type="radio"]{margin-top:3px}.navbar-form .input-append,.navbar-form .input-prepend{margin-top:6px;white-space:nowrap}.navbar-form .input-append input,.navbar-form .input-prepend input{margin-top:0}.navbar-search{position:relative;float:left;margin-top:5px;margin-bottom:0}.navbar-search .search-query{padding:4px 14px;margin-bottom:0;font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-size:13px;font-weight:normal;line-height:1;-webkit-border-radius:15px;-moz-border-radius:15px;border-radius:15px}.navbar-static-top{position:static;width:100%;margin-bottom:0}.navbar-static-top .navbar-inner{-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.navbar-fixed-top,.navbar-fixed-bottom{position:fixed;right:0;left:0;z-index:1030;margin-bottom:0}.navbar-fixed-top .navbar-inner,.navbar-static-top .navbar-inner{border-width:0 0 1px}.navbar-fixed-bottom .navbar-inner{border-width:1px 0 0}.navbar-fixed-top .navbar-inner,.navbar-fixed-bottom .navbar-inner{padding-right:0;padding-left:0;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.navbar-static-top .container,.navbar-fixed-top .container,.navbar-fixed-bottom .container{width:940px}.navbar-fixed-top{top:0}.navbar-fixed-top .navbar-inner,.navbar-static-top .navbar-inner{-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,0.1),0 1px 10px rgba(0,0,0,0.1);-moz-box-shadow:inset 0 -1px 0 rgba(0,0,0,0.1),0 1px 10px rgba(0,0,0,0.1);box-shadow:inset 0 -1px 0 rgba(0,0,0,0.1),0 1px 10px rgba(0,0,0,0.1)}.navbar-fixed-bottom{bottom:0}.navbar-fixed-bottom .navbar-inner{-webkit-box-shadow:inset 0 1px 0 rgba(0,0,0,0.1),0 -1px 10px rgba(0,0,0,0.1);-moz-box-shadow:inset 0 1px 0 rgba(0,0,0,0.1),0 -1px 10px rgba(0,0,0,0.1);box-shadow:inset 0 1px 0 rgba(0,0,0,0.1),0 -1px 10px rgba(0,0,0,0.1)}.navbar .nav{position:relative;left:0;display:block;float:left;margin:0 10px 0 0}.navbar .nav.pull-right{float:right;margin-right:0}.navbar .nav>li{float:left}.navbar .nav>li>a{float:none;padding:10px 15px 10px;color:#777;text-decoration:none;text-shadow:0 1px 0 #fff}.navbar .nav .dropdown-toggle .caret{margin-top:8px}.navbar .nav>li>a:focus,.navbar .nav>li>a:hover{color:#333;text-decoration:none;background-color:transparent}.navbar .nav>.active>a,.navbar .nav>.active>a:hover,.navbar .nav>.active>a:focus{color:#555;text-decoration:none;background-color:#e5e5e5;-webkit-box-shadow:inset 0 3px 8px rgba(0,0,0,0.125);-moz-box-shadow:inset 0 3px 8px rgba(0,0,0,0.125);box-shadow:inset 0 3px 8px rgba(0,0,0,0.125)}.navbar .btn-navbar{display:none;float:right;padding:7px 10px;margin-right:5px;margin-left:5px;color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#ededed;*background-color:#e5e5e5;background-image:-webkit-gradient(linear,0 0,0 100%,from(#f2f2f2),to(#e5e5e5));background-image:-webkit-linear-gradient(top,#f2f2f2,#e5e5e5);background-image:-o-linear-gradient(top,#f2f2f2,#e5e5e5);background-image:linear-gradient(to bottom,#f2f2f2,#e5e5e5);background-image:-moz-linear-gradient(top,#f2f2f2,#e5e5e5);background-repeat:repeat-x;border-color:#e5e5e5 #e5e5e5 #bfbfbf;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);filter:progid:dximagetransform.microsoft.gradient(startColorstr='#fff2f2f2',endColorstr='#ffe5e5e5',GradientType=0);filter:progid:dximagetransform.microsoft.gradient(enabled=false);-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.075);-moz-box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.075);box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.075)}.navbar .btn-navbar:hover,.navbar .btn-navbar:active,.navbar .btn-navbar.active,.navbar .btn-navbar.disabled,.navbar .btn-navbar[disabled]{color:#fff;background-color:#e5e5e5;*background-color:#d9d9d9}.navbar .btn-navbar:active,.navbar .btn-navbar.active{background-color:#ccc \9}.navbar .btn-navbar .icon-bar{display:block;width:18px;height:2px;background-color:#f5f5f5;-webkit-border-radius:1px;-moz-border-radius:1px;border-radius:1px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,0.25);-moz-box-shadow:0 1px 0 rgba(0,0,0,0.25);box-shadow:0 1px 0 rgba(0,0,0,0.25)}.btn-navbar .icon-bar+.icon-bar{margin-top:3px}.navbar .nav>li>.dropdown-menu:before{position:absolute;top:-7px;left:9px;display:inline-block;border-right:7px solid transparent;border-bottom:7px solid #ccc;border-left:7px solid transparent;border-bottom-color:rgba(0,0,0,0.2);content:''}.navbar .nav>li>.dropdown-menu:after{position:absolute;top:-6px;left:10px;display:inline-block;border-right:6px solid transparent;border-bottom:6px solid #fff;border-left:6px solid transparent;content:''}.navbar-fixed-bottom .nav>li>.dropdown-menu:before{top:auto;bottom:-7px;border-top:7px solid #ccc;border-bottom:0;border-top-color:rgba(0,0,0,0.2)}.navbar-fixed-bottom .nav>li>.dropdown-menu:after{top:auto;bottom:-6px;border-top:6px solid #fff;border-bottom:0}.navbar .nav li.dropdown.open>.dropdown-toggle,.navbar .nav li.dropdown.active>.dropdown-toggle,.navbar .nav li.dropdown.open.active>.dropdown-toggle{color:#555;background-color:#e5e5e5}.navbar .nav li.dropdown>.dropdown-toggle .caret{border-top-color:#777;border-bottom-color:#777}.navbar .nav li.dropdown.open>.dropdown-toggle .caret,.navbar .nav li.dropdown.active>.dropdown-toggle .caret,.navbar .nav li.dropdown.open.active>.dropdown-toggle .caret{border-top-color:#555;border-bottom-color:#555}.navbar .pull-right>li>.dropdown-menu,.navbar .nav>li>.dropdown-menu.pull-right{right:0;left:auto}.navbar .pull-right>li>.dropdown-menu:before,.navbar .nav>li>.dropdown-menu.pull-right:before{right:12px;left:auto}.navbar .pull-right>li>.dropdown-menu:after,.navbar .nav>li>.dropdown-menu.pull-right:after{right:13px;left:auto}.navbar .pull-right>li>.dropdown-menu .dropdown-menu,.navbar .nav>li>.dropdown-menu.pull-right .dropdown-menu{right:100%;left:auto;margin-right:-1px;margin-left:0;-webkit-border-radius:6px 0 6px 6px;-moz-border-radius:6px 0 6px 6px;border-radius:6px 0 6px 6px}.navbar-inverse{color:#999}.navbar-inverse .navbar-inner{background-color:#1b1b1b;background-image:-moz-linear-gradient(top,#222,#111);background-image:-webkit-gradient(linear,0 0,0 100%,from(#222),to(#111));background-image:-webkit-linear-gradient(top,#222,#111);background-image:-o-linear-gradient(top,#222,#111);background-image:linear-gradient(to bottom,#222,#111);background-repeat:repeat-x;border-color:#252525;filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ff222222',endColorstr='#ff111111',GradientType=0)}.navbar-inverse .brand,.navbar-inverse .nav>li>a{color:#999;text-shadow:0 -1px 0 rgba(0,0,0,0.25)}.navbar-inverse .brand:hover,.navbar-inverse .nav>li>a:hover{color:#fff}.navbar-inverse .nav>li>a:focus,.navbar-inverse .nav>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .nav .active>a,.navbar-inverse .nav .active>a:hover,.navbar-inverse .nav .active>a:focus{color:#fff;background-color:#111}.navbar-inverse .navbar-link{color:#999}.navbar-inverse .navbar-link:hover{color:#fff}.navbar-inverse .divider-vertical{border-right-color:#222;border-left-color:#111}.navbar-inverse .nav li.dropdown.open>.dropdown-toggle,.navbar-inverse .nav li.dropdown.active>.dropdown-toggle,.navbar-inverse .nav li.dropdown.open.active>.dropdown-toggle{color:#fff;background-color:#111}.navbar-inverse .nav li.dropdown>.dropdown-toggle .caret{border-top-color:#999;border-bottom-color:#999}.navbar-inverse .nav li.dropdown.open>.dropdown-toggle .caret,.navbar-inverse .nav li.dropdown.active>.dropdown-toggle .caret,.navbar-inverse .nav li.dropdown.open.active>.dropdown-toggle .caret{border-top-color:#fff;border-bottom-color:#fff}.navbar-inverse .navbar-search .search-query{color:#fff;background-color:#515151;border-color:#111;-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,0.1),0 1px 0 rgba(255,255,255,0.15);-moz-box-shadow:inset 0 1px 2px rgba(0,0,0,0.1),0 1px 0 rgba(255,255,255,0.15);box-shadow:inset 0 1px 2px rgba(0,0,0,0.1),0 1px 0 rgba(255,255,255,0.15);-webkit-transition:none;-moz-transition:none;-o-transition:none;transition:none}.navbar-inverse .navbar-search .search-query:-moz-placeholder{color:#ccc}.navbar-inverse .navbar-search .search-query:-ms-input-placeholder{color:#ccc}.navbar-inverse .navbar-search .search-query::-webkit-input-placeholder{color:#ccc}.navbar-inverse .navbar-search .search-query:focus,.navbar-inverse .navbar-search .search-query.focused{padding:5px 15px;color:#333;text-shadow:0 1px 0 #fff;background-color:#fff;border:0;outline:0;-webkit-box-shadow:0 0 3px rgba(0,0,0,0.15);-moz-box-shadow:0 0 3px rgba(0,0,0,0.15);box-shadow:0 0 3px rgba(0,0,0,0.15)}.navbar-inverse .btn-navbar{color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#0e0e0e;*background-color:#040404;background-image:-webkit-gradient(linear,0 0,0 100%,from(#151515),to(#040404));background-image:-webkit-linear-gradient(top,#151515,#040404);background-image:-o-linear-gradient(top,#151515,#040404);background-image:linear-gradient(to bottom,#151515,#040404);background-image:-moz-linear-gradient(top,#151515,#040404);background-repeat:repeat-x;border-color:#040404 #040404 #000;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ff151515',endColorstr='#ff040404',GradientType=0);filter:progid:dximagetransform.microsoft.gradient(enabled=false)}.navbar-inverse .btn-navbar:hover,.navbar-inverse .btn-navbar:active,.navbar-inverse .btn-navbar.active,.navbar-inverse .btn-navbar.disabled,.navbar-inverse .btn-navbar[disabled]{color:#fff;background-color:#040404;*background-color:#000}.navbar-inverse .btn-navbar:active,.navbar-inverse .btn-navbar.active{background-color:#000 \9}.breadcrumb{padding:8px 15px;margin:0 0 20px;list-style:none;background-color:#f5f5f5;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}.breadcrumb li{display:inline-block;*display:inline;text-shadow:0 1px 0 #fff;*zoom:1}.breadcrumb .divider{padding:0 5px;color:#ccc}.breadcrumb .active{color:#999}.pagination{height:40px;margin:20px 0}.pagination ul{display:inline-block;*display:inline;margin-bottom:0;margin-left:0;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px;*zoom:1;-webkit-box-shadow:0 1px 2px rgba(0,0,0,0.05);-moz-box-shadow:0 1px 2px rgba(0,0,0,0.05);box-shadow:0 1px 2px rgba(0,0,0,0.05)}.pagination ul>li{display:inline}.pagination ul>li>a,.pagination ul>li>span{float:left;padding:0 14px;line-height:38px;text-decoration:none;background-color:#fff;border:1px solid #ddd;border-left-width:0}.pagination ul>li>a:hover,.pagination ul>.active>a,.pagination ul>.active>span{background-color:#f5f5f5}.pagination ul>.active>a,.pagination ul>.active>span{color:#999;cursor:default}.pagination ul>.disabled>span,.pagination ul>.disabled>a,.pagination ul>.disabled>a:hover{color:#999;cursor:default;background-color:transparent}.pagination ul>li:first-child>a,.pagination ul>li:first-child>span{border-left-width:1px;-webkit-border-radius:3px 0 0 3px;-moz-border-radius:3px 0 0 3px;border-radius:3px 0 0 3px}.pagination ul>li:last-child>a,.pagination ul>li:last-child>span{-webkit-border-radius:0 3px 3px 0;-moz-border-radius:0 3px 3px 0;border-radius:0 3px 3px 0}.pagination-centered{text-align:center}.pagination-right{text-align:right}.pager{margin:20px 0;text-align:center;list-style:none;*zoom:1}.pager:before,.pager:after{display:table;line-height:0;content:""}.pager:after{clear:both}.pager li{display:inline}.pager a,.pager span{display:inline-block;padding:5px 14px;background-color:#fff;border:1px solid #ddd;-webkit-border-radius:15px;-moz-border-radius:15px;border-radius:15px}.pager a:hover{text-decoration:none;background-color:#f5f5f5}.pager .next a,.pager .next span{float:right}.pager .previous a{float:left}.pager .disabled a,.pager .disabled a:hover,.pager .disabled span{color:#999;cursor:default;background-color:#fff}.modal-open .modal .dropdown-menu{z-index:2050}.modal-open .modal .dropdown.open{*z-index:2050}.modal-open .modal .popover{z-index:2060}.modal-open .modal .tooltip{z-index:2080}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;background-color:#000}.modal-backdrop.fade{opacity:0}.modal-backdrop,.modal-backdrop.fade.in{opacity:.8;filter:alpha(opacity=80)}.modal{position:fixed;top:50%;left:50%;z-index:1050;width:560px;margin:-250px 0 0 -280px;overflow:auto;background-color:#fff;border:1px solid #999;border:1px solid rgba(0,0,0,0.3);*border:1px solid #999;-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px;-webkit-box-shadow:0 3px 7px rgba(0,0,0,0.3);-moz-box-shadow:0 3px 7px rgba(0,0,0,0.3);box-shadow:0 3px 7px rgba(0,0,0,0.3);-webkit-background-clip:padding-box;-moz-background-clip:padding-box;background-clip:padding-box}.modal.fade{top:-25%;-webkit-transition:opacity .3s linear,top .3s ease-out;-moz-transition:opacity .3s linear,top .3s ease-out;-o-transition:opacity .3s linear,top .3s ease-out;transition:opacity .3s linear,top .3s ease-out}.modal.fade.in{top:50%}.modal-header{padding:9px 15px;border-bottom:1px solid #eee}.modal-header .close{margin-top:2px}.modal-header h3{margin:0;line-height:30px}.modal-body{max-height:400px;padding:15px;overflow-y:auto}.modal-form{margin-bottom:0}.modal-footer{padding:14px 15px 15px;margin-bottom:0;text-align:right;background-color:#f5f5f5;border-top:1px solid #ddd;-webkit-border-radius:0 0 6px 6px;-moz-border-radius:0 0 6px 6px;border-radius:0 0 6px 6px;*zoom:1;-webkit-box-shadow:inset 0 1px 0 #fff;-moz-box-shadow:inset 0 1px 0 #fff;box-shadow:inset 0 1px 0 #fff}.modal-footer:before,.modal-footer:after{display:table;line-height:0;content:""}.modal-footer:after{clear:both}.modal-footer .btn+.btn{margin-bottom:0;margin-left:5px}.modal-footer .btn-group .btn+.btn{margin-left:-1px}.tooltip{position:absolute;z-index:1030;display:block;padding:5px;font-size:11px;opacity:0;filter:alpha(opacity=0);visibility:visible}.tooltip.in{opacity:.8;filter:alpha(opacity=80)}.tooltip.top{margin-top:-3px}.tooltip.right{margin-left:3px}.tooltip.bottom{margin-top:3px}.tooltip.left{margin-left:-3px}.tooltip-inner{max-width:200px;padding:3px 8px;color:#fff;text-align:center;text-decoration:none;background-color:#000;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}.tooltip-arrow{position:absolute;width:0;height:0;border-color:transparent;border-style:solid}.tooltip.top .tooltip-arrow{bottom:0;left:50%;margin-left:-5px;border-top-color:#000;border-width:5px 5px 0}.tooltip.right .tooltip-arrow{top:50%;left:0;margin-top:-5px;border-right-color:#000;border-width:5px 5px 5px 0}.tooltip.left .tooltip-arrow{top:50%;right:0;margin-top:-5px;border-left-color:#000;border-width:5px 0 5px 5px}.tooltip.bottom .tooltip-arrow{top:0;left:50%;margin-left:-5px;border-bottom-color:#000;border-width:0 5px 5px}.popover{position:absolute;top:0;left:0;z-index:1010;display:none;width:236px;padding:1px;background-color:#fff;border:1px solid #ccc;border:1px solid rgba(0,0,0,0.2);-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px;-webkit-box-shadow:0 5px 10px rgba(0,0,0,0.2);-moz-box-shadow:0 5px 10px rgba(0,0,0,0.2);box-shadow:0 5px 10px rgba(0,0,0,0.2);-webkit-background-clip:padding-box;-moz-background-clip:padding;background-clip:padding-box}.popover.top{margin-bottom:10px}.popover.right{margin-left:10px}.popover.bottom{margin-top:10px}.popover.left{margin-right:10px}.popover-title{padding:8px 14px;margin:0;font-size:14px;font-weight:normal;line-height:18px;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;-webkit-border-radius:5px 5px 0 0;-moz-border-radius:5px 5px 0 0;border-radius:5px 5px 0 0}.popover-content{padding:9px 14px}.popover-content p,.popover-content ul,.popover-content ol{margin-bottom:0}.popover .arrow,.popover .arrow:after{position:absolute;display:inline-block;width:0;height:0;border-color:transparent;border-style:solid}.popover .arrow:after{z-index:-1;content:""}.popover.top .arrow{bottom:-10px;left:50%;margin-left:-10px;border-top-color:#fff;border-width:10px 10px 0}.popover.top .arrow:after{bottom:-1px;left:-11px;border-top-color:rgba(0,0,0,0.25);border-width:11px 11px 0}.popover.right .arrow{top:50%;left:-10px;margin-top:-10px;border-right-color:#fff;border-width:10px 10px 10px 0}.popover.right .arrow:after{bottom:-11px;left:-1px;border-right-color:rgba(0,0,0,0.25);border-width:11px 11px 11px 0}.popover.bottom .arrow{top:-10px;left:50%;margin-left:-10px;border-bottom-color:#fff;border-width:0 10px 10px}.popover.bottom .arrow:after{top:-1px;left:-11px;border-bottom-color:rgba(0,0,0,0.25);border-width:0 11px 11px}.popover.left .arrow{top:50%;right:-10px;margin-top:-10px;border-left-color:#fff;border-width:10px 0 10px 10px}.popover.left .arrow:after{right:-1px;bottom:-11px;border-left-color:rgba(0,0,0,0.25);border-width:11px 0 11px 11px}.thumbnails{margin-left:-20px;list-style:none;*zoom:1}.thumbnails:before,.thumbnails:after{display:table;line-height:0;content:""}.thumbnails:after{clear:both}.row-fluid .thumbnails{margin-left:0}.thumbnails>li{float:left;margin-bottom:20px;margin-left:20px}.thumbnail{display:block;padding:4px;line-height:20px;border:1px solid #ddd;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;-webkit-box-shadow:0 1px 3px rgba(0,0,0,0.055);-moz-box-shadow:0 1px 3px rgba(0,0,0,0.055);box-shadow:0 1px 3px rgba(0,0,0,0.055);-webkit-transition:all .2s ease-in-out;-moz-transition:all .2s ease-in-out;-o-transition:all .2s ease-in-out;transition:all .2s ease-in-out}a.thumbnail:hover{border-color:#08c;-webkit-box-shadow:0 1px 4px rgba(0,105,214,0.25);-moz-box-shadow:0 1px 4px rgba(0,105,214,0.25);box-shadow:0 1px 4px rgba(0,105,214,0.25)}.thumbnail>img{display:block;max-width:100%;margin-right:auto;margin-left:auto}.thumbnail .caption{padding:9px;color:#555}.label,.badge{font-size:11.844px;font-weight:bold;line-height:14px;color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);white-space:nowrap;vertical-align:baseline;background-color:#999}.label{padding:1px 4px 2px;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}.badge{padding:1px 9px 2px;-webkit-border-radius:9px;-moz-border-radius:9px;border-radius:9px}a.label:hover,a.badge:hover{color:#fff;text-decoration:none;cursor:pointer}.label-important,.badge-important{background-color:#b94a48}.label-important[href],.badge-important[href]{background-color:#953b39}.label-warning,.badge-warning{background-color:#f89406}.label-warning[href],.badge-warning[href]{background-color:#c67605}.label-success,.badge-success{background-color:#468847}.label-success[href],.badge-success[href]{background-color:#356635}.label-info,.badge-info{background-color:#3a87ad}.label-info[href],.badge-info[href]{background-color:#2d6987}.label-inverse,.badge-inverse{background-color:#333}.label-inverse[href],.badge-inverse[href]{background-color:#1a1a1a}.btn .label,.btn .badge{position:relative;top:-1px}.btn-mini .label,.btn-mini .badge{top:0}@-webkit-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@-moz-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@-ms-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@-o-keyframes progress-bar-stripes{from{background-position:0 0}to{background-position:40px 0}}@keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}.progress{height:20px;margin-bottom:20px;overflow:hidden;background-color:#f7f7f7;background-image:-moz-linear-gradient(top,#f5f5f5,#f9f9f9);background-image:-webkit-gradient(linear,0 0,0 100%,from(#f5f5f5),to(#f9f9f9));background-image:-webkit-linear-gradient(top,#f5f5f5,#f9f9f9);background-image:-o-linear-gradient(top,#f5f5f5,#f9f9f9);background-image:linear-gradient(to bottom,#f5f5f5,#f9f9f9);background-repeat:repeat-x;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;filter:progid:dximagetransform.microsoft.gradient(startColorstr='#fff5f5f5',endColorstr='#fff9f9f9',GradientType=0);-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);-moz-box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);box-shadow:inset 0 1px 2px rgba(0,0,0,0.1)}.progress .bar{float:left;width:0;height:100%;font-size:12px;color:#fff;text-align:center;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#0e90d2;background-image:-moz-linear-gradient(top,#149bdf,#0480be);background-image:-webkit-gradient(linear,0 0,0 100%,from(#149bdf),to(#0480be));background-image:-webkit-linear-gradient(top,#149bdf,#0480be);background-image:-o-linear-gradient(top,#149bdf,#0480be);background-image:linear-gradient(to bottom,#149bdf,#0480be);background-repeat:repeat-x;filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ff149bdf',endColorstr='#ff0480be',GradientType=0);-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);-moz-box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;-webkit-transition:width .6s ease;-moz-transition:width .6s ease;-o-transition:width .6s ease;transition:width .6s ease}.progress .bar+.bar{-webkit-box-shadow:inset 1px 0 0 rgba(0,0,0,0.15),inset 0 -1px 0 rgba(0,0,0,0.15);-moz-box-shadow:inset 1px 0 0 rgba(0,0,0,0.15),inset 0 -1px 0 rgba(0,0,0,0.15);box-shadow:inset 1px 0 0 rgba(0,0,0,0.15),inset 0 -1px 0 rgba(0,0,0,0.15)}.progress-striped .bar{background-color:#149bdf;background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,0.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,0.15)),color-stop(0.75,rgba(255,255,255,0.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);-webkit-background-size:40px 40px;-moz-background-size:40px 40px;-o-background-size:40px 40px;background-size:40px 40px}.progress.active .bar{-webkit-animation:progress-bar-stripes 2s linear infinite;-moz-animation:progress-bar-stripes 2s linear infinite;-ms-animation:progress-bar-stripes 2s linear infinite;-o-animation:progress-bar-stripes 2s linear infinite;animation:progress-bar-stripes 2s linear infinite}.progress-danger .bar,.progress .bar-danger{background-color:#dd514c;background-image:-moz-linear-gradient(top,#ee5f5b,#c43c35);background-image:-webkit-gradient(linear,0 0,0 100%,from(#ee5f5b),to(#c43c35));background-image:-webkit-linear-gradient(top,#ee5f5b,#c43c35);background-image:-o-linear-gradient(top,#ee5f5b,#c43c35);background-image:linear-gradient(to bottom,#ee5f5b,#c43c35);background-repeat:repeat-x;filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ffee5f5b',endColorstr='#ffc43c35',GradientType=0)}.progress-danger.progress-striped .bar,.progress-striped .bar-danger{background-color:#ee5f5b;background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,0.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,0.15)),color-stop(0.75,rgba(255,255,255,0.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent)}.progress-success .bar,.progress .bar-success{background-color:#5eb95e;background-image:-moz-linear-gradient(top,#62c462,#57a957);background-image:-webkit-gradient(linear,0 0,0 100%,from(#62c462),to(#57a957));background-image:-webkit-linear-gradient(top,#62c462,#57a957);background-image:-o-linear-gradient(top,#62c462,#57a957);background-image:linear-gradient(to bottom,#62c462,#57a957);background-repeat:repeat-x;filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ff62c462',endColorstr='#ff57a957',GradientType=0)}.progress-success.progress-striped .bar,.progress-striped .bar-success{background-color:#62c462;background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,0.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,0.15)),color-stop(0.75,rgba(255,255,255,0.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent)}.progress-info .bar,.progress .bar-info{background-color:#4bb1cf;background-image:-moz-linear-gradient(top,#5bc0de,#339bb9);background-image:-webkit-gradient(linear,0 0,0 100%,from(#5bc0de),to(#339bb9));background-image:-webkit-linear-gradient(top,#5bc0de,#339bb9);background-image:-o-linear-gradient(top,#5bc0de,#339bb9);background-image:linear-gradient(to bottom,#5bc0de,#339bb9);background-repeat:repeat-x;filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ff5bc0de',endColorstr='#ff339bb9',GradientType=0)}.progress-info.progress-striped .bar,.progress-striped .bar-info{background-color:#5bc0de;background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,0.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,0.15)),color-stop(0.75,rgba(255,255,255,0.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent)}.progress-warning .bar,.progress .bar-warning{background-color:#faa732;background-image:-moz-linear-gradient(top,#fbb450,#f89406);background-image:-webkit-gradient(linear,0 0,0 100%,from(#fbb450),to(#f89406));background-image:-webkit-linear-gradient(top,#fbb450,#f89406);background-image:-o-linear-gradient(top,#fbb450,#f89406);background-image:linear-gradient(to bottom,#fbb450,#f89406);background-repeat:repeat-x;filter:progid:dximagetransform.microsoft.gradient(startColorstr='#fffbb450',endColorstr='#fff89406',GradientType=0)}.progress-warning.progress-striped .bar,.progress-striped .bar-warning{background-color:#fbb450;background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,0.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,0.15)),color-stop(0.75,rgba(255,255,255,0.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent)}.accordion{margin-bottom:20px}.accordion-group{margin-bottom:2px;border:1px solid #e5e5e5;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}.accordion-heading{border-bottom:0}.accordion-heading .accordion-toggle{display:block;padding:8px 15px}.accordion-toggle{cursor:pointer}.accordion-inner{padding:9px 15px;border-top:1px solid #e5e5e5}.carousel{position:relative;margin-bottom:20px;line-height:1}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel .item{position:relative;display:none;-webkit-transition:.6s ease-in-out left;-moz-transition:.6s ease-in-out left;-o-transition:.6s ease-in-out left;transition:.6s ease-in-out left}.carousel .item>img{display:block;line-height:1}.carousel .active,.carousel .next,.carousel .prev{display:block}.carousel .active{left:0}.carousel .next,.carousel .prev{position:absolute;top:0;width:100%}.carousel .next{left:100%}.carousel .prev{left:-100%}.carousel .next.left,.carousel .prev.right{left:0}.carousel .active.left{left:-100%}.carousel .active.right{left:100%}.carousel-control{position:absolute;top:40%;left:15px;width:40px;height:40px;margin-top:-20px;font-size:60px;font-weight:100;line-height:30px;color:#fff;text-align:center;background:#222;border:3px solid #fff;-webkit-border-radius:23px;-moz-border-radius:23px;border-radius:23px;opacity:.5;filter:alpha(opacity=50)}.carousel-control.right{right:15px;left:auto}.carousel-control:hover{color:#fff;text-decoration:none;opacity:.9;filter:alpha(opacity=90)}.carousel-caption{position:absolute;right:0;bottom:0;left:0;padding:15px;background:#333;background:rgba(0,0,0,0.75)}.carousel-caption h4,.carousel-caption p{line-height:20px;color:#fff}.carousel-caption h4{margin:0 0 5px}.carousel-caption p{margin-bottom:0}.hero-unit{padding:60px;margin-bottom:30px;background-color:#eee;-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px}.hero-unit h1{margin-bottom:0;font-size:60px;line-height:1;letter-spacing:-1px;color:inherit}.hero-unit p{font-size:18px;font-weight:200;line-height:30px;color:inherit}.pull-right{float:right}.pull-left{float:left}.hide{display:none}.show{display:block}.invisible{visibility:hidden}.affix{position:fixed}
diff --git a/website/head.png b/website/head.png
deleted file mode 100644
index e94ea7e..0000000
Binary files a/website/head.png and /dev/null differ
diff --git a/website/index.html b/website/index.html
deleted file mode 100644
index 118f158..0000000
--- a/website/index.html
+++ /dev/null
@@ -1,151 +0,0 @@
-<!DOCTYPE html>
-
-<html lang="en">
-  <head>
-    <meta charset="utf-8">
-    <title>Tape - A collection of queue-related classes for Android and Java by Square, Inc.</title>
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <meta name="description" content="A collection of queue-related classes for Android and Java by Square, Inc." />
-    <link href="bootstrap.min.css" rel="stylesheet">
-    <link href="bootstrap-responsive.min.css" rel="stylesheet">
-    <link href="prettify.css" rel="stylesheet">
-    <link href="app.css" rel="stylesheet">
-    <script src="http://code.jquery.com/jquery-latest.js"></script>
-    <script src="jquery-maven-artifact.min.js"></script>
-  </head>
-  <body>
-    <div class="container content">
-      <div class="row titlebar">
-        <div class="span12">
-          <h1>Tape</h1>
-        </div>
-      </div>
-      <div class="row">
-        <div class="span6">
-          <h2 id="about">About</h2>
-          <p>Tape is a collection of queue-related classes for Android and Java by Square, Inc.</p>
-          <p><code>QueueFile</code> is a lightning-fast, transactional, file-based FIFO. Addition and removal from an instance is an O(1) operation and is atomic. Writes are synchronous; data will be written to disk before an operation returns. The underlying file is structured to survive process and even system crashes and if an I/O exception is thrown during a mutating change, the change is aborted.</p>
-          <p>An <code>ObjectQueue</code> represents an ordering of arbitrary objects which can be backed either by the filesystem (via <code>QueueFile</code>) or in memory only.</p>
-          <p><code>TaskQueue</code> is a special object queue which holds <code>Task</code>s, objects which have a notion of being executed. Instances are managed by an external executor which prepares and executes enqueued tasks.</p>
-        </div>
-        <div class="span5 offset1">
-          <h2 id="download">Download</h2>
-          <p>Available via Maven or as a downloadable <code>.jar</code>.</p>
-          <p><a href="http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup&a=tape&v=LATEST" class="btn btn-inverse btn-large" id="download-btn">Download Latest</a></p>
-          <p><a href="http://github.com/square/tape" id="ribbon">Fork Tape on GitHub</a></p>
-          <pre class="maven">&lt;dependency>
-    &lt;groupId>com.squareup&lt;/groupId>
-    &lt;artifactId>tape&lt;/artifactId>
-    &lt;version><span id="mvn-version"><em>(insert latest)</em></span>&lt;/version>
-&lt;/dependency></pre>
-        </div>
-      </div>
-      <div class="row">
-        <div class="span12">
-          <h2 id="examples">Examples</h2>
-          <p>For a more complete example of a background image uploader which expands on both of the following examples see the <a href="https://github.com/square/tape/tree/master/tape-sample">sample Android application</a> in the repository.</p>
-          <h3 id="example-image-queue">Android Task Queue Service</h3>
-          <p>When used on Android, a service is the perfect companion to a <code>TaskQueue</code> since it allows actions to be completed in the background. If the user is uploading new photos to their favorite sharing site, the service will iterate through the queue until all of the upload tasks completes successfully.</p>
-          <pre class="prettyprint">/** Listener for starting the upload service when the queue has tasks. */
-public class ImageQueueServiceListener implements ObjectQueue.Listener&lt;ImageUploadTask> {
-  private final Context context;
-
-  public ImageQueueServiceStarter(Context context) {
-    this.context = context;
-  }
-
-  @Override public void onAdd(ObjectQueue&lt;ImageUploadTask> queue, ImageUploadTask task) {
-    context.startService(new Intent(context, ImageQueueService.class));
-  }
-
-  @Override public void onRemove(ObjectQueue&lt;ImageUploadTask> queue) {}
-}
-
-/** Service which iterates through pending upload tasks one-by-one. */
-public class ImageQueueService extends Service implements ImageUploadTask.Callback {
-  private TaskQueue&lt;ImageUploadTask> queue;
-  private boolean running;
-
-  @Override public void onCreate() {
-    super.onCreate();
-    // Obtain TaskQueue here (e.g., through injection)
-  }
-
-  @Override public int onStartCommand(Intent intent, int flags, int startId) {
-    executeNext();
-    return START_STICKY;
-  }
-
-  public void executeNext() {
-    if (running) return; // Only one task at a time.
-    ImageUploadTask task = queue.peek();
-    if (task != null) {
-      task.execute(this);
-      running = true;
-      return;
-    }
-    stopSelf(); // We're done for now.
-  }
-
-  @Override public void imageUploadComplete() {
-    running = false;
-    queue.remove();
-    executeNext();
-  }
-}</pre>
-          <h3 id="example-gson">GSON Object Converter</h3>
-          <p>As an alternative to traditional object serialization, GSON makes it really easy to convert objects to and from a format that can be written to disk by the <code>FileObjectQueue</code>. This allows for much more flexibility in modifying classes moving forward as well as providing a human-readable storage format.</p>
-          <pre class="prettyprint">/** Converter which uses GSON to serialize instances of class T to disk. */
-public class GsonConverter&lt;T> implements FileObjectQueue.Converter&lt;T> {
-  private final Gson gson;
-  private final Class&lt;T> type;
-
-  public GsonConverter(Gson gson, Class&lt;T> type) {
-    this.gson = gson;
-    this.type = type;
-  }
-
-  @Override public T from(byte[] bytes) {
-    Reader reader = new InputStreamReader(new ByteArrayInputStream(bytes));
-    return gson.fromJson(reader, type);
-  }
-
-  @Override public void toStream(T object, OutputStream bytes) throws IOException {
-    Writer writer = new OutputStreamWriter(bytes);
-    gson.toJson(object, writer);
-    writer.close();
-  }
-}</pre>
-        </div>
-      </div>
-      <div class="row">
-        <div class="span6">
-          <h2 id="contribute">Contribute</h2>
-          <p>If you would like to contribute code to Tape you can do so through GitHub by forking the repository and sending a pull request.</p>
-          <p>When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running <code>mvn clean verify</code>. Checkstyle failures during compilation indicate errors in your style and can be viewed in the <code>target/checkstyle-result.xml</code> file.</p>
-          <p>Before your code can be accepted into the project you must also sign the <a href="https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1">Individual Contributor License Agreement (CLA)</a>.</p>
-        </div>
-        <div class="span6 license">
-          <h2 id="license">License</h2>
-          <p>Copyright 2012 Square, Inc.</p>
-          <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p>
-          <blockquote>http://www.apache.org/licenses/LICENSE-2.0</blockquote>
-          <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and
-limitations under the License.</p>
-        </div>
-      </div>
-    </div>
-    <div class="footer">
-      <a href="http://squareup.com"><img src="square.png" alt="Square, Inc."/></a>
-    </div>
-    <script src="prettify.js"></script>
-    <script> prettyPrint(); </script>
-    <script>
-        // Look up the latest version of the library.
-        $.fn.artifactVersion('com.squareup', 'tape', function(version, url) {
-          $('#mvn-version').text(version);
-          $('#download-btn').text('Download v' + version).attr('href', url);
-        });
-    </script>
-  </body>
-</html>
diff --git a/website/jquery-maven-artifact.min.js b/website/jquery-maven-artifact.min.js
deleted file mode 100644
index 08a0304..0000000
--- a/website/jquery-maven-artifact.min.js
+++ /dev/null
@@ -1,8 +0,0 @@
-/**
- * jQuery Maven Artifact Plugin
- *
- * Version: 1.0.1
- * Author: Jake Wharton
- * License: Apache 2.0
- */
-(function($){function downloadUrl(groupId,artifactId,version,type){var groupPath=groupId.replace(/\./g,"/");return"http://repo1.maven.org/maven2/"+groupPath+"/"+artifactId+"/"+version+"/"+artifactId+"-"+version+type}$.fn.artifactVersion=function(groupId,artifactId,callback){if(typeof groupId!=="string"||typeof artifactId!=="string"){console.log("Error: groupId and artifactId are required.");return}if(typeof callback==="undefined"){console.log("Error: callback function required.");return}var url='http://search.maven.org/solrsearch/select/?q=g:"'+groupId+'"+AND+a:"'+artifactId+'"&wt=json&json.wrf=?';$.getJSON(url,function(response){var versions=response.response.docs;if(versions.length==0){return}var version=versions[0].latestVersion;var versionUrl=downloadUrl(groupId,artifactId,version,".jar");callback(version,versionUrl)})};$.fn.artifactVersions=function(groupId,artifactId,callback){if(typeof groupId!=="string"||typeof artifactId!=="string"){console.log("Error: groupId and artifactId are required.");return}if(typeof callback==="undefined"){console.log("Error: callback function required.");return}var url='http://search.maven.org/solrsearch/select/?q=g:"'+groupId+'"+AND+a:"'+artifactId+'"&wt=json&rows=10&core=gav&json.wrf=?';$.getJSON(url,function(response){var versions=response.response.docs;if(versions.length==0){return}versions.sort(function(o1,o2){return o1.v>o2.v?-1:1});var newVersions=[];for(var i=0;i<versions.length;i++){var version=versions[i].v;newVersions.push({name:version,url:downloadUrl(groupId,artifactId,version,".jar")})}callback(newVersions)})}})(jQuery);
\ No newline at end of file
diff --git a/website/lead.png b/website/lead.png
deleted file mode 100644
index 87d4510..0000000
Binary files a/website/lead.png and /dev/null differ
diff --git a/website/prettify.css b/website/prettify.css
deleted file mode 100644
index 9ffd214..0000000
--- a/website/prettify.css
+++ /dev/null
@@ -1,30 +0,0 @@
-.com { color: #93a1a1; }
-.lit { color: #999; }
-.pun, .opn, .clo { color: #93a1a1; }
-.fun { color: #dc322f; }
-.str, .atv { color: #D14; }
-.kwd, .linenums, .tag { color: #444; font-weight: bold; }
-.typ, .atn, .dec, .var { color: #661414; }
-.pln { color: #48484c; }
-
-.prettyprint {
-  padding: 8px;
-  background-color: #f7f7f9;
-  border: 1px solid #e1e1e8;
-}
-.prettyprint.linenums {
-  -webkit-box-shadow: inset 40px 0 0 #fbfbfc, inset 41px 0 0 #ececf0;
-     -moz-box-shadow: inset 40px 0 0 #fbfbfc, inset 41px 0 0 #ececf0;
-          box-shadow: inset 40px 0 0 #fbfbfc, inset 41px 0 0 #ececf0;
-}
-
-/* Specify class=linenums on a pre to get line numbering */
-ol.linenums {
-  margin: 0 0 0 33px; /* IE indents via margin-left */
-}
-ol.linenums li {
-  padding-left: 12px;
-  color: #bebec5;
-  line-height: 18px;
-  text-shadow: 0 1px 0 #fff;
-}
\ No newline at end of file
diff --git a/website/prettify.js b/website/prettify.js
deleted file mode 100644
index eef5ad7..0000000
--- a/website/prettify.js
+++ /dev/null
@@ -1,28 +0,0 @@
-var q=null;window.PR_SHOULD_USE_CONTINUATION=!0;
-(function(){function L(a){function m(a){var f=a.charCodeAt(0);if(f!==92)return f;var b=a.charAt(1);return(f=r[b])?f:"0"<=b&&b<="7"?parseInt(a.substring(1),8):b==="u"||b==="x"?parseInt(a.substring(2),16):a.charCodeAt(1)}function e(a){if(a<32)return(a<16?"\\x0":"\\x")+a.toString(16);a=String.fromCharCode(a);if(a==="\\"||a==="-"||a==="["||a==="]")a="\\"+a;return a}function h(a){for(var f=a.substring(1,a.length-1).match(/\\u[\dA-Fa-f]{4}|\\x[\dA-Fa-f]{2}|\\[0-3][0-7]{0,2}|\\[0-7]{1,2}|\\[\S\s]|[^\\]/g),a=
-[],b=[],o=f[0]==="^",c=o?1:0,i=f.length;c<i;++c){var j=f[c];if(/\\[bdsw]/i.test(j))a.push(j);else{var j=m(j),d;c+2<i&&"-"===f[c+1]?(d=m(f[c+2]),c+=2):d=j;b.push([j,d]);d<65||j>122||(d<65||j>90||b.push([Math.max(65,j)|32,Math.min(d,90)|32]),d<97||j>122||b.push([Math.max(97,j)&-33,Math.min(d,122)&-33]))}}b.sort(function(a,f){return a[0]-f[0]||f[1]-a[1]});f=[];j=[NaN,NaN];for(c=0;c<b.length;++c)i=b[c],i[0]<=j[1]+1?j[1]=Math.max(j[1],i[1]):f.push(j=i);b=["["];o&&b.push("^");b.push.apply(b,a);for(c=0;c<
-f.length;++c)i=f[c],b.push(e(i[0])),i[1]>i[0]&&(i[1]+1>i[0]&&b.push("-"),b.push(e(i[1])));b.push("]");return b.join("")}function y(a){for(var f=a.source.match(/\[(?:[^\\\]]|\\[\S\s])*]|\\u[\dA-Fa-f]{4}|\\x[\dA-Fa-f]{2}|\\\d+|\\[^\dux]|\(\?[!:=]|[()^]|[^()[\\^]+/g),b=f.length,d=[],c=0,i=0;c<b;++c){var j=f[c];j==="("?++i:"\\"===j.charAt(0)&&(j=+j.substring(1))&&j<=i&&(d[j]=-1)}for(c=1;c<d.length;++c)-1===d[c]&&(d[c]=++t);for(i=c=0;c<b;++c)j=f[c],j==="("?(++i,d[i]===void 0&&(f[c]="(?:")):"\\"===j.charAt(0)&&
-(j=+j.substring(1))&&j<=i&&(f[c]="\\"+d[i]);for(i=c=0;c<b;++c)"^"===f[c]&&"^"!==f[c+1]&&(f[c]="");if(a.ignoreCase&&s)for(c=0;c<b;++c)j=f[c],a=j.charAt(0),j.length>=2&&a==="["?f[c]=h(j):a!=="\\"&&(f[c]=j.replace(/[A-Za-z]/g,function(a){a=a.charCodeAt(0);return"["+String.fromCharCode(a&-33,a|32)+"]"}));return f.join("")}for(var t=0,s=!1,l=!1,p=0,d=a.length;p<d;++p){var g=a[p];if(g.ignoreCase)l=!0;else if(/[a-z]/i.test(g.source.replace(/\\u[\da-f]{4}|\\x[\da-f]{2}|\\[^UXux]/gi,""))){s=!0;l=!1;break}}for(var r=
-{b:8,t:9,n:10,v:11,f:12,r:13},n=[],p=0,d=a.length;p<d;++p){g=a[p];if(g.global||g.multiline)throw Error(""+g);n.push("(?:"+y(g)+")")}return RegExp(n.join("|"),l?"gi":"g")}function M(a){function m(a){switch(a.nodeType){case 1:if(e.test(a.className))break;for(var g=a.firstChild;g;g=g.nextSibling)m(g);g=a.nodeName;if("BR"===g||"LI"===g)h[s]="\n",t[s<<1]=y++,t[s++<<1|1]=a;break;case 3:case 4:g=a.nodeValue,g.length&&(g=p?g.replace(/\r\n?/g,"\n"):g.replace(/[\t\n\r ]+/g," "),h[s]=g,t[s<<1]=y,y+=g.length,
-t[s++<<1|1]=a)}}var e=/(?:^|\s)nocode(?:\s|$)/,h=[],y=0,t=[],s=0,l;a.currentStyle?l=a.currentStyle.whiteSpace:window.getComputedStyle&&(l=document.defaultView.getComputedStyle(a,q).getPropertyValue("white-space"));var p=l&&"pre"===l.substring(0,3);m(a);return{a:h.join("").replace(/\n$/,""),c:t}}function B(a,m,e,h){m&&(a={a:m,d:a},e(a),h.push.apply(h,a.e))}function x(a,m){function e(a){for(var l=a.d,p=[l,"pln"],d=0,g=a.a.match(y)||[],r={},n=0,z=g.length;n<z;++n){var f=g[n],b=r[f],o=void 0,c;if(typeof b===
-"string")c=!1;else{var i=h[f.charAt(0)];if(i)o=f.match(i[1]),b=i[0];else{for(c=0;c<t;++c)if(i=m[c],o=f.match(i[1])){b=i[0];break}o||(b="pln")}if((c=b.length>=5&&"lang-"===b.substring(0,5))&&!(o&&typeof o[1]==="string"))c=!1,b="src";c||(r[f]=b)}i=d;d+=f.length;if(c){c=o[1];var j=f.indexOf(c),k=j+c.length;o[2]&&(k=f.length-o[2].length,j=k-c.length);b=b.substring(5);B(l+i,f.substring(0,j),e,p);B(l+i+j,c,C(b,c),p);B(l+i+k,f.substring(k),e,p)}else p.push(l+i,b)}a.e=p}var h={},y;(function(){for(var e=a.concat(m),
-l=[],p={},d=0,g=e.length;d<g;++d){var r=e[d],n=r[3];if(n)for(var k=n.length;--k>=0;)h[n.charAt(k)]=r;r=r[1];n=""+r;p.hasOwnProperty(n)||(l.push(r),p[n]=q)}l.push(/[\S\s]/);y=L(l)})();var t=m.length;return e}function u(a){var m=[],e=[];a.tripleQuotedStrings?m.push(["str",/^(?:'''(?:[^'\\]|\\[\S\s]|''?(?=[^']))*(?:'''|$)|"""(?:[^"\\]|\\[\S\s]|""?(?=[^"]))*(?:"""|$)|'(?:[^'\\]|\\[\S\s])*(?:'|$)|"(?:[^"\\]|\\[\S\s])*(?:"|$))/,q,"'\""]):a.multiLineStrings?m.push(["str",/^(?:'(?:[^'\\]|\\[\S\s])*(?:'|$)|"(?:[^"\\]|\\[\S\s])*(?:"|$)|`(?:[^\\`]|\\[\S\s])*(?:`|$))/,
-q,"'\"`"]):m.push(["str",/^(?:'(?:[^\n\r'\\]|\\.)*(?:'|$)|"(?:[^\n\r"\\]|\\.)*(?:"|$))/,q,"\"'"]);a.verbatimStrings&&e.push(["str",/^@"(?:[^"]|"")*(?:"|$)/,q]);var h=a.hashComments;h&&(a.cStyleComments?(h>1?m.push(["com",/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,q,"#"]):m.push(["com",/^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\b|[^\n\r]*)/,q,"#"]),e.push(["str",/^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h|[a-z]\w*)>/,q])):m.push(["com",/^#[^\n\r]*/,
-q,"#"]));a.cStyleComments&&(e.push(["com",/^\/\/[^\n\r]*/,q]),e.push(["com",/^\/\*[\S\s]*?(?:\*\/|$)/,q]));a.regexLiterals&&e.push(["lang-regex",/^(?:^^\.?|[!+-]|!=|!==|#|%|%=|&|&&|&&=|&=|\(|\*|\*=|\+=|,|-=|->|\/|\/=|:|::|;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|[?@[^]|\^=|\^\^|\^\^=|{|\||\|=|\|\||\|\|=|~|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\s*(\/(?=[^*/])(?:[^/[\\]|\\[\S\s]|\[(?:[^\\\]]|\\[\S\s])*(?:]|$))+\/)/]);(h=a.types)&&e.push(["typ",h]);a=(""+a.keywords).replace(/^ | $/g,
-"");a.length&&e.push(["kwd",RegExp("^(?:"+a.replace(/[\s,]+/g,"|")+")\\b"),q]);m.push(["pln",/^\s+/,q," \r\n\t\xa0"]);e.push(["lit",/^@[$_a-z][\w$@]*/i,q],["typ",/^(?:[@_]?[A-Z]+[a-z][\w$@]*|\w+_t\b)/,q],["pln",/^[$_a-z][\w$@]*/i,q],["lit",/^(?:0x[\da-f]+|(?:\d(?:_\d+)*\d*(?:\.\d*)?|\.\d\+)(?:e[+-]?\d+)?)[a-z]*/i,q,"0123456789"],["pln",/^\\[\S\s]?/,q],["pun",/^.[^\s\w"-$'./@\\`]*/,q]);return x(m,e)}function D(a,m){function e(a){switch(a.nodeType){case 1:if(k.test(a.className))break;if("BR"===a.nodeName)h(a),
-a.parentNode&&a.parentNode.removeChild(a);else for(a=a.firstChild;a;a=a.nextSibling)e(a);break;case 3:case 4:if(p){var b=a.nodeValue,d=b.match(t);if(d){var c=b.substring(0,d.index);a.nodeValue=c;(b=b.substring(d.index+d[0].length))&&a.parentNode.insertBefore(s.createTextNode(b),a.nextSibling);h(a);c||a.parentNode.removeChild(a)}}}}function h(a){function b(a,d){var e=d?a.cloneNode(!1):a,f=a.parentNode;if(f){var f=b(f,1),g=a.nextSibling;f.appendChild(e);for(var h=g;h;h=g)g=h.nextSibling,f.appendChild(h)}return e}
-for(;!a.nextSibling;)if(a=a.parentNode,!a)return;for(var a=b(a.nextSibling,0),e;(e=a.parentNode)&&e.nodeType===1;)a=e;d.push(a)}var k=/(?:^|\s)nocode(?:\s|$)/,t=/\r\n?|\n/,s=a.ownerDocument,l;a.currentStyle?l=a.currentStyle.whiteSpace:window.getComputedStyle&&(l=s.defaultView.getComputedStyle(a,q).getPropertyValue("white-space"));var p=l&&"pre"===l.substring(0,3);for(l=s.createElement("LI");a.firstChild;)l.appendChild(a.firstChild);for(var d=[l],g=0;g<d.length;++g)e(d[g]);m===(m|0)&&d[0].setAttribute("value",
-m);var r=s.createElement("OL");r.className="linenums";for(var n=Math.max(0,m-1|0)||0,g=0,z=d.length;g<z;++g)l=d[g],l.className="L"+(g+n)%10,l.firstChild||l.appendChild(s.createTextNode("\xa0")),r.appendChild(l);a.appendChild(r)}function k(a,m){for(var e=m.length;--e>=0;){var h=m[e];A.hasOwnProperty(h)?window.console&&console.warn("cannot override language handler %s",h):A[h]=a}}function C(a,m){if(!a||!A.hasOwnProperty(a))a=/^\s*</.test(m)?"default-markup":"default-code";return A[a]}function E(a){var m=
-a.g;try{var e=M(a.h),h=e.a;a.a=h;a.c=e.c;a.d=0;C(m,h)(a);var k=/\bMSIE\b/.test(navigator.userAgent),m=/\n/g,t=a.a,s=t.length,e=0,l=a.c,p=l.length,h=0,d=a.e,g=d.length,a=0;d[g]=s;var r,n;for(n=r=0;n<g;)d[n]!==d[n+2]?(d[r++]=d[n++],d[r++]=d[n++]):n+=2;g=r;for(n=r=0;n<g;){for(var z=d[n],f=d[n+1],b=n+2;b+2<=g&&d[b+1]===f;)b+=2;d[r++]=z;d[r++]=f;n=b}for(d.length=r;h<p;){var o=l[h+2]||s,c=d[a+2]||s,b=Math.min(o,c),i=l[h+1],j;if(i.nodeType!==1&&(j=t.substring(e,b))){k&&(j=j.replace(m,"\r"));i.nodeValue=
-j;var u=i.ownerDocument,v=u.createElement("SPAN");v.className=d[a+1];var x=i.parentNode;x.replaceChild(v,i);v.appendChild(i);e<o&&(l[h+1]=i=u.createTextNode(t.substring(b,o)),x.insertBefore(i,v.nextSibling))}e=b;e>=o&&(h+=2);e>=c&&(a+=2)}}catch(w){"console"in window&&console.log(w&&w.stack?w.stack:w)}}var v=["break,continue,do,else,for,if,return,while"],w=[[v,"auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"],
-"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"],F=[w,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"],G=[w,"abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient"],
-H=[G,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var"],w=[w,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"],I=[v,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"],
-J=[v,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"],v=[v,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"],K=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)/,N=/\S/,O=u({keywords:[F,H,w,"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END"+
-I,J,v],hashComments:!0,cStyleComments:!0,multiLineStrings:!0,regexLiterals:!0}),A={};k(O,["default-code"]);k(x([],[["pln",/^[^<?]+/],["dec",/^<!\w[^>]*(?:>|$)/],["com",/^<\!--[\S\s]*?(?:--\>|$)/],["lang-",/^<\?([\S\s]+?)(?:\?>|$)/],["lang-",/^<%([\S\s]+?)(?:%>|$)/],["pun",/^(?:<[%?]|[%?]>)/],["lang-",/^<xmp\b[^>]*>([\S\s]+?)<\/xmp\b[^>]*>/i],["lang-js",/^<script\b[^>]*>([\S\s]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\S\s]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i]]),
-["default-markup","htm","html","mxml","xhtml","xml","xsl"]);k(x([["pln",/^\s+/,q," \t\r\n"],["atv",/^(?:"[^"]*"?|'[^']*'?)/,q,"\"'"]],[["tag",/^^<\/?[a-z](?:[\w-.:]*\w)?|\/?>$/i],["atn",/^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],["lang-uq.val",/^=\s*([^\s"'>]*(?:[^\s"'/>]|\/(?=\s)))/],["pun",/^[/<->]+/],["lang-js",/^on\w+\s*=\s*"([^"]+)"/i],["lang-js",/^on\w+\s*=\s*'([^']+)'/i],["lang-js",/^on\w+\s*=\s*([^\s"'>]+)/i],["lang-css",/^style\s*=\s*"([^"]+)"/i],["lang-css",/^style\s*=\s*'([^']+)'/i],["lang-css",
-/^style\s*=\s*([^\s"'>]+)/i]]),["in.tag"]);k(x([],[["atv",/^[\S\s]+/]]),["uq.val"]);k(u({keywords:F,hashComments:!0,cStyleComments:!0,types:K}),["c","cc","cpp","cxx","cyc","m"]);k(u({keywords:"null,true,false"}),["json"]);k(u({keywords:H,hashComments:!0,cStyleComments:!0,verbatimStrings:!0,types:K}),["cs"]);k(u({keywords:G,cStyleComments:!0}),["java"]);k(u({keywords:v,hashComments:!0,multiLineStrings:!0}),["bsh","csh","sh"]);k(u({keywords:I,hashComments:!0,multiLineStrings:!0,tripleQuotedStrings:!0}),
-["cv","py"]);k(u({keywords:"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["perl","pl","pm"]);k(u({keywords:J,hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["rb"]);k(u({keywords:w,cStyleComments:!0,regexLiterals:!0}),["js"]);k(u({keywords:"all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,true,try,unless,until,when,while,yes",
-hashComments:3,cStyleComments:!0,multilineStrings:!0,tripleQuotedStrings:!0,regexLiterals:!0}),["coffee"]);k(x([],[["str",/^[\S\s]+/]]),["regex"]);window.prettyPrintOne=function(a,m,e){var h=document.createElement("PRE");h.innerHTML=a;e&&D(h,e);E({g:m,i:e,h:h});return h.innerHTML};window.prettyPrint=function(a){function m(){for(var e=window.PR_SHOULD_USE_CONTINUATION?l.now()+250:Infinity;p<h.length&&l.now()<e;p++){var n=h[p],k=n.className;if(k.indexOf("prettyprint")>=0){var k=k.match(g),f,b;if(b=
-!k){b=n;for(var o=void 0,c=b.firstChild;c;c=c.nextSibling)var i=c.nodeType,o=i===1?o?b:c:i===3?N.test(c.nodeValue)?b:o:o;b=(f=o===b?void 0:o)&&"CODE"===f.tagName}b&&(k=f.className.match(g));k&&(k=k[1]);b=!1;for(o=n.parentNode;o;o=o.parentNode)if((o.tagName==="pre"||o.tagName==="code"||o.tagName==="xmp")&&o.className&&o.className.indexOf("prettyprint")>=0){b=!0;break}b||((b=(b=n.className.match(/\blinenums\b(?::(\d+))?/))?b[1]&&b[1].length?+b[1]:!0:!1)&&D(n,b),d={g:k,h:n,i:b},E(d))}}p<h.length?setTimeout(m,
-250):a&&a()}for(var e=[document.getElementsByTagName("pre"),document.getElementsByTagName("code"),document.getElementsByTagName("xmp")],h=[],k=0;k<e.length;++k)for(var t=0,s=e[k].length;t<s;++t)h.push(e[k][t]);var e=q,l=Date;l.now||(l={now:function(){return+new Date}});var p=0,d,g=/\blang(?:uage)?-([\w.]+)(?!\S)/;m()};window.PR={createSimpleLexer:x,registerLangHandler:k,sourceDecorator:u,PR_ATTRIB_NAME:"atn",PR_ATTRIB_VALUE:"atv",PR_COMMENT:"com",PR_DECLARATION:"dec",PR_KEYWORD:"kwd",PR_LITERAL:"lit",
-PR_NOCODE:"nocode",PR_PLAIN:"pln",PR_PUNCTUATION:"pun",PR_SOURCE:"src",PR_STRING:"str",PR_TAG:"tag",PR_TYPE:"typ"}})();
diff --git a/website/ribbon.png b/website/ribbon.png
deleted file mode 100644
index 10c08f4..0000000
Binary files a/website/ribbon.png and /dev/null differ
diff --git a/website/square.png b/website/square.png
deleted file mode 100644
index 182ad74..0000000
Binary files a/website/square.png and /dev/null differ
