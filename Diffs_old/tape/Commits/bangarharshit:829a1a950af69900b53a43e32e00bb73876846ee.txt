diff --git a/README.md b/README.md
index 79797f9..3fdc1ae 100644
--- a/README.md
+++ b/README.md
@@ -18,7 +18,96 @@ prepares and executes enqueued tasks.
 
 *Some examples are available on [the website][1].*
 
-
+*Example with observables*
+
+```java
+        File file = new File("Queuefile");
+        ObjectQueue.Converter<String> queueObjectConverter = new ObjectQueue.Converter<String>() {
+            @Override
+            public String from(byte[] bytes) throws IOException {
+                return new String(bytes);
+            }
+
+            @Override
+            public void toStream(String o, OutputStream bytes) throws IOException {
+                bytes.write(o.getBytes());
+            }
+        };
+
+        ObservableQueue<String> objectObservableQueue = ObservableQueue.createPersistedObservableQueue(file, queueObjectConverter);
+
+        objectObservableQueue
+                .add("abc")
+                .observeOn(Schedulers.immediate())
+                .subscribe(new Action1<Boolean>() {
+                    @Override
+                    public void call(Boolean aBoolean) {
+                        // Persisted successful
+                        System.out.println("aBoolean = [" + aBoolean + "]");
+                    }
+                }, new Action1<Throwable>() {
+                    @Override
+                    public void call(Throwable throwable) {
+                        if (throwable instanceof IOException) {
+                            // do something
+                            System.out.println("throwable = [" + throwable + "]");
+                        } else {
+                            // do something else.
+                        }
+                    }
+                });
+        objectObservableQueue
+                .size()
+                .observeOn(Schedulers.immediate()).subscribe(new Subscriber<Integer>() {
+            @Override
+            public void onCompleted() {
+
+            }
+
+            @Override
+            public void onError(Throwable e) {
+
+            }
+
+            @Override
+            public void onNext(Integer integer) {
+                // Persisted successful
+                System.out.println("integer = [" + integer + "]");
+            }
+        });
+        objectObservableQueue.peek().observeOn(Schedulers.immediate()).subscribe(new Subscriber<String>() {
+            @Override
+            public void onCompleted() {
+
+            }
+
+            @Override
+            public void onError(Throwable e) {
+
+            }
+
+            @Override
+            public void onNext(String string) {
+                System.out.println("string = [" + string + "]");
+            }
+        });
+        objectObservableQueue.close().observeOn(Schedulers.immediate()).subscribe(new Subscriber<Boolean>() {
+            @Override
+            public void onCompleted() {
+
+            }
+
+            @Override
+            public void onError(Throwable e) {
+
+            }
+
+            @Override
+            public void onNext(Boolean bBoolean) {
+                System.out.println("bBoolean = [" + bBoolean + "]");
+            }
+        });
+```        
 
 Download
 --------
