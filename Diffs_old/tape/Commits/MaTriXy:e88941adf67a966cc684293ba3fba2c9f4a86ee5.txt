diff --git a/pom.xml b/pom.xml
index c231aa3..6224bc7 100644
--- a/pom.xml
+++ b/pom.xml
@@ -160,9 +160,9 @@
         </plugin>
 
         <plugin>
-          <groupId>com.jayway.maven.plugins.android.generation2</groupId>
+          <groupId>com.simpligility.maven.plugins</groupId>
           <artifactId>android-maven-plugin</artifactId>
-          <version>3.8.2</version>
+          <version>4.2.0</version>
           <configuration>
             <sdk>
               <platform>${android.platform}</platform>
diff --git a/tape-sample/pom.xml b/tape-sample/pom.xml
index 5cd5501..a31dee2 100644
--- a/tape-sample/pom.xml
+++ b/tape-sample/pom.xml
@@ -46,7 +46,7 @@
   <build>
     <plugins>
       <plugin>
-        <groupId>com.jayway.maven.plugins.android.generation2</groupId>
+        <groupId>com.simpligility.maven.plugins</groupId>
         <artifactId>android-maven-plugin</artifactId>
         <extensions>true</extensions>
       </plugin>
diff --git a/tape-sample/AndroidManifest.xml b/tape-sample/src/main/AndroidManifest.xml
similarity index 100%
rename from tape-sample/AndroidManifest.xml
rename to tape-sample/src/main/AndroidManifest.xml
diff --git a/tape-sample/res/drawable-hdpi/icon.png b/tape-sample/src/main/res/drawable-hdpi/icon.png
similarity index 100%
rename from tape-sample/res/drawable-hdpi/icon.png
rename to tape-sample/src/main/res/drawable-hdpi/icon.png
diff --git a/tape-sample/res/drawable-mdpi/icon.png b/tape-sample/src/main/res/drawable-mdpi/icon.png
similarity index 100%
rename from tape-sample/res/drawable-mdpi/icon.png
rename to tape-sample/src/main/res/drawable-mdpi/icon.png
diff --git a/tape-sample/res/drawable-xhdpi/icon.png b/tape-sample/src/main/res/drawable-xhdpi/icon.png
similarity index 100%
rename from tape-sample/res/drawable-xhdpi/icon.png
rename to tape-sample/src/main/res/drawable-xhdpi/icon.png
diff --git a/tape-sample/res/layout/sample_activity.xml b/tape-sample/src/main/res/layout/sample_activity.xml
similarity index 100%
rename from tape-sample/res/layout/sample_activity.xml
rename to tape-sample/src/main/res/layout/sample_activity.xml
diff --git a/tape-sample/res/layout/upload.xml b/tape-sample/src/main/res/layout/upload.xml
similarity index 100%
rename from tape-sample/res/layout/upload.xml
rename to tape-sample/src/main/res/layout/upload.xml
diff --git a/tape-sample/res/values/strings.xml b/tape-sample/src/main/res/values/strings.xml
similarity index 100%
rename from tape-sample/res/values/strings.xml
rename to tape-sample/src/main/res/values/strings.xml
diff --git a/tape/src/main/java/com/squareup/tape/QueueFile.java b/tape/src/main/java/com/squareup/tape/QueueFile.java
index d991b98..71103de 100644
--- a/tape/src/main/java/com/squareup/tape/QueueFile.java
+++ b/tape/src/main/java/com/squareup/tape/QueueFile.java
@@ -145,8 +145,9 @@ private void readHeader() throws IOException {
     if (fileLength > raf.length()) {
       throw new IOException(
           "File is truncated. Expected length: " + fileLength + ", Actual length: " + raf.length());
-    } else if (fileLength == 0) {
-      throw new IOException("File is corrupt; length stored in header is 0.");
+    } else if (fileLength <= 0) {
+      throw new IOException(
+          "File is corrupt; length stored in header (" + fileLength + ") is invalid.");
     }
     elementCount = readInt(buffer, 4);
     int firstOffset = readInt(buffer, 8);
@@ -509,15 +510,23 @@ public synchronized void remove() throws IOException {
    * @throws NoSuchElementException if the queue is empty
    */
   public synchronized void remove(int n) throws IOException {
-    if (isEmpty()) throw new NoSuchElementException();
-    if (n > elementCount) {
-      throw new IllegalArgumentException(
-          "Cannot remove more elements (" + n + ") than present in queue (" + elementCount + ").");
+    if (isEmpty()) {
+      throw new NoSuchElementException();
+    }
+    if (n < 0) {
+      throw new IllegalArgumentException("Cannot remove negative (" + n + ") number of elements.");
+    }
+    if (n == 0) {
+      return;
     }
     if (n == elementCount) {
       clear();
       return;
     }
+    if (n > elementCount) {
+      throw new IllegalArgumentException(
+          "Cannot remove more elements (" + n + ") than present in queue (" + elementCount + ").");
+    }
 
     final int eraseStartPosition = first.position;
     int eraseTotalLength = 0;
diff --git a/tape/src/test/java/com/squareup/tape/QueueFileTest.java b/tape/src/test/java/com/squareup/tape/QueueFileTest.java
index 7b47655..24d03f5 100644
--- a/tape/src/test/java/com/squareup/tape/QueueFileTest.java
+++ b/tape/src/test/java/com/squareup/tape/QueueFileTest.java
@@ -9,6 +9,7 @@
 import java.io.InputStream;
 import java.io.RandomAccessFile;
 import java.util.LinkedList;
+import java.util.NoSuchElementException;
 import java.util.Queue;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Logger;
@@ -125,7 +126,7 @@
     assertThat(data).isEqualTo(new byte[firstStuff.length]);
   }
 
-  @Test public void testZeroSizeInHeaderComplains() throws IOException {
+  @Test public void testZeroSizeInHeaderThrows() throws IOException {
     RandomAccessFile emptyFile = new RandomAccessFile(file, "rwd");
     emptyFile.setLength(4096);
     emptyFile.getChannel().force(true);
@@ -133,9 +134,26 @@
 
     try {
       new QueueFile(file);
-      fail("Should have complained about bad header length");
+      fail("Should have thrown about bad header length");
     } catch (IOException ex) {
-      assertThat(ex).hasMessage("File is corrupt; length stored in header is 0.");
+      assertThat(ex).hasMessage("File is corrupt; length stored in header (0) is invalid.");
+    }
+  }
+
+  @Test public void testNegativeSizeInHeaderThrows() throws IOException {
+    RandomAccessFile emptyFile = new RandomAccessFile(file, "rwd");
+    emptyFile.seek(0);
+    emptyFile.writeInt(-2147483648);
+    emptyFile.setLength(4096);
+    emptyFile.getChannel().force(true);
+    emptyFile.close();
+
+    try {
+      new QueueFile(file);
+      fail("Should have thrown about bad header length");
+    } catch (IOException ex) {
+      assertThat(ex) //
+          .hasMessage("File is corrupt; length stored in header (-2147483648) is invalid.");
     }
   }
 
@@ -171,6 +189,50 @@
     assertThat(queue.peek()).isEqualTo(secondStuff);
   }
 
+  @Test public void removeFromEmptyFileThrows() throws IOException {
+    QueueFile queue = new QueueFile(file);
+
+    try {
+      queue.remove();
+      fail("Should have thrown about removing from empty file.");
+    } catch (NoSuchElementException ignored) {
+    }
+  }
+
+  @Test public void removeNegativeNumberOfElementsThrows() throws IOException {
+    QueueFile queue = new QueueFile(file);
+    queue.add(values[127]);
+
+    try {
+      queue.remove(-1);
+      fail("Should have thrown about removing negative number of elements.");
+    } catch (IllegalArgumentException ex) {
+      assertThat(ex) //
+          .hasMessage("Cannot remove negative (-1) number of elements.");
+    }
+  }
+
+  @Test public void removeZeroElementsDoesNothing() throws IOException {
+    QueueFile queue = new QueueFile(file);
+    queue.add(values[127]);
+
+    queue.remove(0);
+    assertThat(queue.size()).isEqualTo(1);
+  }
+
+  @Test public void removeBeyondQueueSizeElementsThrows() throws IOException {
+    QueueFile queue = new QueueFile(file);
+    queue.add(values[127]);
+
+    try {
+      queue.remove(10);
+      fail("Should have thrown about removing too many elements.");
+    } catch (IllegalArgumentException ex) {
+      assertThat(ex) //
+          .hasMessage("Cannot remove more elements (10) than present in queue (1).");
+    }
+  }
+
   @Test public void removingBigDamnBlocksErasesEffectively() throws IOException {
     byte[] bigBoy = new byte[7000];
     for (int i = 0; i < 7000; i += 100) {
