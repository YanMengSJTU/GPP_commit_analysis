diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index b21608a..3c2a426 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -1,15 +1,11 @@
-
 Contributing
-------------
+============
 
-If you would like to contribute code to Tape you can do so through GitHub by
+If you would like to contribute code to this project you can do so through GitHub by
 forking the repository and sending a pull request.
 
 When submitting code, please make every effort to follow existing conventions
-and style in order to keep the code as readable as possible. Please also make
-sure your code compiles by running `mvn clean verify`. Checkstyle failures
-during compilation indicate errors in your style and can be viewed in the
-`checkstyle-result.xml` file.
+and style in order to keep the code as readable as possible.
 
 Before your code can be accepted into the project you must also sign the
 [Individual Contributor License Agreement (CLA)][1].
diff --git a/README.md b/README.md
index 36ed5f6..505f299 100644
--- a/README.md
+++ b/README.md
@@ -154,12 +154,14 @@ class MoshiConverter<T> implements Converter<T> {
     this.jsonAdapter = moshi.adapter(type);
   }
 
-  @Override public String from(byte[] bytes) throws IOException {
+  @Override public T from(byte[] bytes) throws IOException {
     return jsonAdapter.fromJson(new Buffer().write(bytes));
   }
 
-  @Override public void toStream(T o, OutputStream os) throws IOException {
-    return jsonAdapter.toJson(Okio.buffer(Okio.sink(os)), val);
+  @Override public void toStream(T val, OutputStream os) throws IOException {
+    try (BufferedSink sink = Okio.buffer(Okio.sink(os))) {
+      jsonAdapter.toJson(sink, val);
+    }
   }
 }
 ```
diff --git a/checkstyle.xml b/checkstyle.xml
index 9cea4b9..f66aad5 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -1,10 +1,11 @@
 <?xml version="1.0"?>
 <!DOCTYPE module PUBLIC
-    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
-    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
+    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
+    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
 
 <module name="Checker">
-  <!--module name="NewlineAtEndOfFile"/-->
+  <module name="SuppressWarningsFilter"/>
+  <module name="NewlineAtEndOfFile"/>
   <module name="FileLength"/>
   <module name="FileTabCharacter"/>
 
@@ -16,7 +17,7 @@
 
   <!-- Space after 'for' and 'if' -->
   <module name="RegexpSingleline">
-    <property name="format" value="^\s*(for|if)[^ ]\("/>
+    <property name="format" value="^\s*(for|if)\b[^ ]"/>
     <property name="message" value="Space needed before opening parenthesis."/>
   </module>
 
@@ -27,14 +28,12 @@
   </module>
 
   <module name="TreeWalker">
-    <!--<property name="cacheFile" value="${checkstyle.cache.file}"/>-->
-
     <!-- Checks for Javadoc comments.                     -->
     <!-- See http://checkstyle.sf.net/config_javadoc.html -->
     <!--module name="JavadocMethod"/-->
     <!--module name="JavadocType"/-->
     <!--module name="JavadocVariable"/-->
-    <!--module name="JavadocStyle"/-->
+    <module name="JavadocStyle"/>
 
 
     <!-- Checks for Naming Conventions.                  -->
@@ -43,10 +42,8 @@
     <module name="LocalFinalVariableName"/>
     <module name="LocalVariableName"/>
     <module name="MemberName"/>
-    <module name="MethodName">
-      <property name="format" value="^[a-z][a-zA-Z0-9_]*$"/>
-    </module>
-    <module name="PackageName"/>
+    <module name="MethodName"/>
+    <!--<module name="PackageName"/>-->
     <module name="ParameterName"/>
     <module name="StaticVariableName"/>
     <module name="TypeName"/>
@@ -56,6 +53,7 @@
     <!-- See http://checkstyle.sf.net/config_import.html -->
     <module name="AvoidStarImport"/>
     <module name="IllegalImport"/>
+    <!-- defaults to sun.* packages -->
     <module name="RedundantImport"/>
     <module name="UnusedImports">
       <property name="processJavadoc" value="true"/>
@@ -70,21 +68,28 @@
     <module name="MethodLength">
       <property name="max" value="200"/>
     </module>
-    <!--module name="ParameterNumber"/-->
 
 
     <!-- Checks for whitespace                               -->
     <!-- See http://checkstyle.sf.net/config_whitespace.html -->
     <module name="GenericWhitespace"/>
-    <module name="EmptyForIteratorPad"/>
+    <!--<module name="EmptyForIteratorPad"/>-->
     <module name="MethodParamPad"/>
-    <module name="NoWhitespaceAfter"/>
-    <module name="NoWhitespaceBefore"/>
+    <!--<module name="NoWhitespaceAfter"/>-->
+    <!--<module name="NoWhitespaceBefore"/>-->
     <module name="OperatorWrap"/>
     <module name="ParenPad"/>
     <module name="TypecastParenPad"/>
     <module name="WhitespaceAfter"/>
-    <module name="WhitespaceAround"/>
+    <module name="WhitespaceAround">
+      <property name="tokens"
+          value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN,
+          COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH,
+          LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
+          LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,
+          MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST,
+          SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND"/>
+    </module>
 
 
     <!-- Modifier Checks                                    -->
@@ -95,10 +100,10 @@
 
     <!-- Checks for blocks. You know, those {}'s         -->
     <!-- See http://checkstyle.sf.net/config_blocks.html -->
-    <!--module name="AvoidNestedBlocks"/-->
+    <module name="AvoidNestedBlocks"/>
     <!--module name="EmptyBlock"/-->
     <module name="LeftCurly"/>
-    <!--module name="NeedBraces"/-->
+    <!--<module name="NeedBraces"/>-->
     <module name="RightCurly"/>
 
 
@@ -111,27 +116,30 @@
     <module name="EqualsHashCode"/>
     <!--module name="HiddenField"/-->
     <module name="IllegalInstantiation"/>
-    <!--<module name="InnerAssignment"/>-->
+    <!--module name="InnerAssignment"/-->
     <!--module name="MagicNumber"/-->
-    <module name="MissingSwitchDefault"/>
-    <module name="RedundantThrows"/>
+    <!--module name="MissingSwitchDefault"/-->
+    <!--<module name="RedundantThrows"/>-->
     <module name="SimplifyBooleanExpression"/>
     <module name="SimplifyBooleanReturn"/>
 
     <!-- Checks for class design                         -->
     <!-- See http://checkstyle.sf.net/config_design.html -->
     <!--module name="DesignForExtension"/-->
-    <!--module name="FinalClass"/-->
-    <!--module name="HideUtilityClassConstructor"/-->
-    <!--module name="InterfaceIsType"/-->
+    <!--<module name="FinalClass"/>-->
+    <module name="HideUtilityClassConstructor"/>
+    <module name="InterfaceIsType"/>
     <!--module name="VisibilityModifier"/-->
 
 
     <!-- Miscellaneous other checks.                   -->
     <!-- See http://checkstyle.sf.net/config_misc.html -->
-    <!--module name="ArrayTypeStyle"/-->
+    <module name="ArrayTypeStyle"/>
     <!--module name="FinalParameters"/-->
     <!--module name="TodoComment"/-->
     <module name="UpperEll"/>
+
+    <!-- Make the @SuppressWarnings annotations available to Checkstyle -->
+    <module name="SuppressWarningsHolder"/>
   </module>
 </module>
diff --git a/tape/build.gradle b/tape/build.gradle
index 6a7be58..2148d0e 100644
--- a/tape/build.gradle
+++ b/tape/build.gradle
@@ -5,14 +5,17 @@ targetCompatibility = JavaVersion.VERSION_1_7
 sourceCompatibility = JavaVersion.VERSION_1_7
 
 dependencies {
+  compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
+  testCompileOnly 'com.google.code.findbugs:jsr305:3.0.2'
   testCompile 'junit:junit:4.12'
   testCompile 'com.google.truth:truth:0.32'
   testCompile 'com.squareup.burst:burst-junit4:1.1.1'
-  testCompile 'com.squareup.okio:okio:1.11.0'
+  testCompile 'com.squareup.okio:okio:1.13.0'
 }
 
 checkstyle {
   configFile rootProject.file('checkstyle.xml')
+  toolVersion = '7.7'
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/tape/src/main/java/com/squareup/tape2/FileObjectQueue.java b/tape/src/main/java/com/squareup/tape2/FileObjectQueue.java
index 3dd112c..4ec05fe 100644
--- a/tape/src/main/java/com/squareup/tape2/FileObjectQueue.java
+++ b/tape/src/main/java/com/squareup/tape2/FileObjectQueue.java
@@ -4,6 +4,8 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.util.Iterator;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 
 final class FileObjectQueue<T> extends ObjectQueue<T> {
   /** Backing storage implementation. */
@@ -17,7 +19,7 @@
     this.converter = converter;
   }
 
-  @Override public QueueFile file() {
+  @Override public @Nonnull QueueFile file() {
     return queueFile;
   }
 
@@ -35,7 +37,7 @@
     queueFile.add(bytes.getArray(), 0, bytes.size());
   }
 
-  @Override public T peek() throws IOException {
+  @Override public @Nullable T peek() throws IOException {
     byte[] bytes = queueFile.peek();
     if (bytes == null) return null;
     return converter.from(bytes);
@@ -70,6 +72,12 @@
     return new QueueFileIterator(queueFile.iterator());
   }
 
+  @Override public String toString() {
+    return "FileObjectQueue{"
+        + "queueFile=" + queueFile
+        + '}';
+  }
+
   private final class QueueFileIterator implements Iterator<T> {
     final Iterator<byte[]> iterator;
 
@@ -96,16 +104,15 @@
   }
 
   /** Enables direct access to the internal array. Avoids unnecessary copying. */
-  private static class DirectByteArrayOutputStream extends ByteArrayOutputStream {
-    public DirectByteArrayOutputStream() {
-      super();
+  private static final class DirectByteArrayOutputStream extends ByteArrayOutputStream {
+    DirectByteArrayOutputStream() {
     }
 
     /**
      * Gets a reference to the internal byte array.  The {@link #size()} method indicates how many
      * bytes contain actual data added since the last {@link #reset()} call.
      */
-    public byte[] getArray() {
+    byte[] getArray() {
       return buf;
     }
   }
diff --git a/tape/src/main/java/com/squareup/tape2/InMemoryObjectQueue.java b/tape/src/main/java/com/squareup/tape2/InMemoryObjectQueue.java
index 7b0b483..3024957 100644
--- a/tape/src/main/java/com/squareup/tape2/InMemoryObjectQueue.java
+++ b/tape/src/main/java/com/squareup/tape2/InMemoryObjectQueue.java
@@ -4,11 +4,13 @@
 import java.io.IOException;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.ConcurrentModificationException;
 import java.util.Deque;
 import java.util.Iterator;
 import java.util.List;
 import java.util.NoSuchElementException;
+import javax.annotation.Nullable;
 
 final class InMemoryObjectQueue<T> extends ObjectQueue<T> {
   private final Deque<T> entries;
@@ -24,7 +26,7 @@
     entries = new ArrayDeque<>();
   }
 
-  @Override public QueueFile file() {
+  @Override public @Nullable QueueFile file() {
     return null;
   }
 
@@ -34,13 +36,13 @@
     entries.addLast(entry);
   }
 
-  @Override public T peek() throws IOException {
+  @Override public @Nullable T peek() throws IOException {
     if (closed) throw new IOException("closed");
     return entries.peekFirst();
   }
 
   @Override public List<T> asList() throws IOException {
-    return new ArrayList<>(entries);
+    return Collections.unmodifiableList(new ArrayList<>(entries));
   }
 
   @Override public int size() {
@@ -69,6 +71,12 @@
     closed = true;
   }
 
+  @Override public String toString() {
+    return "InMemoryObjectQueue{"
+        + "size=" + entries.size()
+        + '}';
+  }
+
   private final class EntryIterator implements Iterator<T> {
     private final Iterator<T> delegate;
     private int index = 0;
@@ -120,4 +128,4 @@ private void checkForComodification() {
       if (modCount != expectedModCount) throw new ConcurrentModificationException();
     }
   }
-}
\ No newline at end of file
+}
diff --git a/tape/src/main/java/com/squareup/tape2/ObjectQueue.java b/tape/src/main/java/com/squareup/tape2/ObjectQueue.java
index 155a71f..1ab4665 100644
--- a/tape/src/main/java/com/squareup/tape2/ObjectQueue.java
+++ b/tape/src/main/java/com/squareup/tape2/ObjectQueue.java
@@ -8,6 +8,7 @@
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import javax.annotation.Nullable;
 
 /** A queue of objects. */
 public abstract class ObjectQueue<T> implements Iterable<T>, Closeable {
@@ -25,7 +26,7 @@
   }
 
   /** The underlying {@link QueueFile} backing this queue, or null if it's only in memory. */
-  public abstract QueueFile file();
+  public abstract @Nullable QueueFile file();
 
   /** Returns the number of entries in the queue. */
   public abstract int size();
@@ -42,7 +43,7 @@ public boolean isEmpty() {
    * Returns the head of the queue, or {@code null} if the queue is empty. Does not modify the
    * queue.
    */
-  public abstract T peek() throws IOException;
+  public abstract @Nullable T peek() throws IOException;
 
   /**
    * Reads up to {@code max} entries from the head of the queue without removing the entries.
diff --git a/tape/src/main/java/com/squareup/tape2/QueueFile.java b/tape/src/main/java/com/squareup/tape2/QueueFile.java
index f5fcfa0..2c3e4ad 100644
--- a/tape/src/main/java/com/squareup/tape2/QueueFile.java
+++ b/tape/src/main/java/com/squareup/tape2/QueueFile.java
@@ -24,6 +24,7 @@
 import java.util.ConcurrentModificationException;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
+import javax.annotation.Nullable;
 
 import static java.lang.Math.min;
 
@@ -100,10 +101,10 @@
   final File file;
 
   /** True when using the versioned header format. Otherwise use the legacy format. */
-  boolean versioned;
+  final boolean versioned;
 
   /** The header length in bytes: 16 or 32. */
-  int headerLength;
+  final int headerLength;
 
   /** Cached file length. Always a power of 2. */
   long fileLength;
@@ -132,7 +133,7 @@
 
   @Private boolean closed;
 
-  private static RandomAccessFile initializeFromFile(File file, boolean forceLegacy)
+  @Private static RandomAccessFile initializeFromFile(File file, boolean forceLegacy)
       throws IOException {
     if (!file.exists()) {
       // Use a temp file so we don't leave a partially-initialized file.
@@ -487,7 +488,7 @@ private void setLength(long newLength) throws IOException {
   }
 
   /** Reads the eldest element. Returns null if the queue is empty. */
-  public byte[] peek() throws IOException {
+  public @Nullable byte[] peek() throws IOException {
     if (closed) throw new IOException("closed");
     if (isEmpty()) return null;
     int length = first.length;
@@ -674,12 +675,15 @@ public File file() {
   }
 
   @Override public String toString() {
-    return getClass().getSimpleName()
-        + "[length=" + fileLength
+    return "QueueFile{"
+        + "file=" + file
+        + ", zero=" + zero
+        + ", versioned=" + versioned
+        + ", length=" + fileLength
         + ", size=" + elementCount
         + ", first=" + first
         + ", last=" + last
-        + "]";
+        + '}';
   }
 
   /** A pointer to an element. */
diff --git a/tape/src/main/java/com/squareup/tape2/package-info.java b/tape/src/main/java/com/squareup/tape2/package-info.java
new file mode 100644
index 0000000..1d14dc1
--- /dev/null
+++ b/tape/src/main/java/com/squareup/tape2/package-info.java
@@ -0,0 +1,5 @@
+/**
+ * Tape is a collection of queue-related classes for Android and Java.
+ */
+@javax.annotation.ParametersAreNonnullByDefault
+package com.squareup.tape2;
diff --git a/tape/src/test/java/com/squareup/tape2/QueueFileLoadingTest.java b/tape/src/test/java/com/squareup/tape2/QueueFileLoadingTest.java
index 96d10dc..7ab94a0 100644
--- a/tape/src/test/java/com/squareup/tape2/QueueFileLoadingTest.java
+++ b/tape/src/test/java/com/squareup/tape2/QueueFileLoadingTest.java
@@ -1,25 +1,26 @@
 // Copyright 2012 Square, Inc.
 package com.squareup.tape2;
 
-import org.junit.After;
-import org.junit.Test;
-
 import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;
+import org.junit.After;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 import static com.squareup.tape2.QueueTestUtils.EMPTY_SERIALIZED_QUEUE;
 import static com.squareup.tape2.QueueTestUtils.FRESH_SERIALIZED_QUEUE;
 import static com.squareup.tape2.QueueTestUtils.ONE_ENTRY_SERIALIZED_QUEUE;
 import static com.squareup.tape2.QueueTestUtils.TRUNCATED_EMPTY_SERIALIZED_QUEUE;
 import static com.squareup.tape2.QueueTestUtils.TRUNCATED_ONE_ENTRY_SERIALIZED_QUEUE;
-import static com.squareup.tape2.QueueTestUtils.UndeletableFile;
 import static com.squareup.tape2.QueueTestUtils.copyTestFile;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-public class QueueFileLoadingTest {
+@RunWith(JUnit4.class)
+public final class QueueFileLoadingTest {
 
   private File testFile;
 
@@ -61,29 +62,29 @@ public void testTruncatedOneEntryFileThrows() throws Exception {
   }
 
   @Test(expected = IOException.class)
-  public void testCreateWithReadOnlyFile_throwsException() throws Exception {
+  public void testCreateWithReadOnlyFileThrowsException() throws Exception {
     testFile = copyTestFile(TRUNCATED_ONE_ENTRY_SERIALIZED_QUEUE);
     assertTrue(testFile.setWritable(false));
 
-    File tmp = new UndeletableFile(testFile.getAbsolutePath());
     // Should throw an exception.
     new QueueFile.Builder(testFile).build();
   }
 
   @Test(expected = IOException.class)
-  public void testAddWithReadOnlyFile_missesMonitor() throws Exception {
+  public void testAddWithReadOnlyFileMissesMonitor() throws Exception {
     testFile = copyTestFile(EMPTY_SERIALIZED_QUEUE);
 
     QueueFile qf = new QueueFile.Builder(testFile).build();
 
     // Should throw an exception.
     FileObjectQueue<String> queue =
-        new FileObjectQueue<String>(qf, new FileObjectQueue.Converter<String>() {
+        new FileObjectQueue<>(qf, new FileObjectQueue.Converter<String>() {
           @Override public String from(byte[] bytes) throws IOException {
             return null;
           }
 
-          @Override public void toStream(String o, OutputStream bytes) throws IOException {
+          @Override public void toStream(String o, OutputStream bytes)
+              throws IOException {
             throw new IOException("fake Permission denied");
           }
         });
diff --git a/tape/src/test/java/com/squareup/tape2/QueueFileTest.java b/tape/src/test/java/com/squareup/tape2/QueueFileTest.java
index 2df0faf..526f386 100644
--- a/tape/src/test/java/com/squareup/tape2/QueueFileTest.java
+++ b/tape/src/test/java/com/squareup/tape2/QueueFileTest.java
@@ -909,11 +909,15 @@ private QueueFile newQueueFile(boolean zero) throws IOException {
       queueFile.add(values[i]);
     }
 
-    assertThat(queueFile.toString()).isIn(Arrays.asList("QueueFile[length=4096, size=15, "
-        + "first=Element[position=16, length=0], "
-        + "last=Element[position=163, length=14]]", "QueueFile[length=4096, size=15, "
-        + "first=Element[position=32, length=0], "
-        + "last=Element[position=179, length=14]]"));
+    if (forceLegacy) {
+      assertThat(queueFile.toString()).contains("zero=true, versioned=false, length=4096,"
+          + " size=15,"
+          + " first=Element[position=16, length=0], last=Element[position=163, length=14]}");
+    } else {
+      assertThat(queueFile.toString()).contains("zero=true, versioned=true, length=4096,"
+          + " size=15,"
+          + " first=Element[position=32, length=0], last=Element[position=179, length=14]}");
+    }
   }
 
   /**
diff --git a/tape/src/test/java/com/squareup/tape2/QueueTestUtils.java b/tape/src/test/java/com/squareup/tape2/QueueTestUtils.java
index 98781f0..ab7062e 100644
--- a/tape/src/test/java/com/squareup/tape2/QueueTestUtils.java
+++ b/tape/src/test/java/com/squareup/tape2/QueueTestUtils.java
@@ -9,7 +9,7 @@
 
 import static org.junit.Assert.assertTrue;
 
-public class QueueTestUtils {
+final class QueueTestUtils {
   static final String TRUNCATED_ONE_ENTRY_SERIALIZED_QUEUE =
       "/truncated-one-entry-serialized-queue";
   static final String TRUNCATED_EMPTY_SERIALIZED_QUEUE = "/truncated-empty-serialized-queue";
@@ -31,7 +31,7 @@ static File copyTestFile(String file) throws IOException {
   static class UndeletableFile extends File {
     private static final long serialVersionUID = 1L;
 
-    public UndeletableFile(String name) {
+    UndeletableFile(String name) {
       super(name);
     }
 
@@ -39,4 +39,8 @@ public UndeletableFile(String name) {
       return false;
     }
   }
+
+  private QueueTestUtils() {
+    throw new AssertionError("No instances.");
+  }
 }
