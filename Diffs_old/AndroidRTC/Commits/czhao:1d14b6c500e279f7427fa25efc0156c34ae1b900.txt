diff --git a/app/src/main/java/fr/pchab/androidrtc/RtcAudioActivity.java b/app/src/main/java/fr/pchab/androidrtc/RtcAudioActivity.java
index 8f86848..8e19f82 100644
--- a/app/src/main/java/fr/pchab/androidrtc/RtcAudioActivity.java
+++ b/app/src/main/java/fr/pchab/androidrtc/RtcAudioActivity.java
@@ -172,6 +172,10 @@ public void run() {
     }
 
     private void disconnect(){
+       /* if (audioManager != null){
+            audioManager.close();
+            audioManager = null;
+        }*/
 
         if (client != null) {
             client.onDestroy();
@@ -206,6 +210,7 @@ public void run() {
                         break;
                     case WebRtcClient.STATUS.DISCONNECTED:
                         resId = R.string.disconnected;
+                        disconnect();
                         break;
                 }
                 Toast.makeText(getApplicationContext(), resId, Toast.LENGTH_SHORT).show();
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index 1543e96..def16ab 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
     <string name="app_name">AndroidRTC</string>
-    <string name="host">192.168.1.112</string>
+    <string name="host">10.2.203.1</string>
     <string name="port">3000</string>
     <string name="action_settings">Options</string>
     <string name="call">Call</string>
diff --git a/webrtc-client/src/main/java/fr/pchab/webrtcclient/LooperExecutor.java b/webrtc-client/src/main/java/fr/pchab/webrtcclient/LooperExecutor.java
new file mode 100644
index 0000000..bd605f0
--- /dev/null
+++ b/webrtc-client/src/main/java/fr/pchab/webrtcclient/LooperExecutor.java
@@ -0,0 +1,112 @@
+/*
+ * libjingle
+ * Copyright 2015 Google Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *  1. Redistributions of source code must retain the above copyright notice,
+ *     this list of conditions and the following disclaimer.
+ *  2. Redistributions in binary form must reproduce the above copyright notice,
+ *     this list of conditions and the following disclaimer in the documentation
+ *     and/or other materials provided with the distribution.
+ *  3. The name of the author may not be used to endorse or promote products
+ *     derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
+ * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+ * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+ * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package fr.pchab.webrtcclient;
+
+import android.os.Handler;
+import android.os.Looper;
+import android.util.Log;
+
+import java.util.concurrent.Executor;
+
+/**
+ * Looper based executor class.
+ */
+public class LooperExecutor extends Thread implements Executor {
+  private static final String TAG = "LooperExecutor";
+  // Object used to signal that looper thread has started and Handler instance
+  // associated with looper thread has been allocated.
+  private final Object looperStartedEvent = new Object();
+  private Handler handler = null;
+  private boolean running = false;
+  private long threadId;
+
+  @Override
+  public void run() {
+    Looper.prepare();
+    synchronized (looperStartedEvent) {
+      Log.d(TAG, "Looper thread started.");
+      handler = new Handler();
+      threadId = Thread.currentThread().getId();
+      looperStartedEvent.notify();
+    }
+    Looper.loop();
+  }
+
+  public synchronized void requestStart() {
+    if (running) {
+      return;
+    }
+    running = true;
+    handler = null;
+    start();
+    // Wait for Hander allocation.
+    synchronized (looperStartedEvent) {
+      while (handler == null) {
+        try {
+          looperStartedEvent.wait();
+        } catch (InterruptedException e) {
+          Log.e(TAG, "Can not start looper thread");
+          running = false;
+        }
+      }
+    }
+  }
+
+  public synchronized void requestStop() {
+    if (!running) {
+      return;
+    }
+    running = false;
+    handler.post(new Runnable() {
+      @Override
+      public void run() {
+        Looper.myLooper().quit();
+        Log.d(TAG, "Looper thread finished.");
+      }
+    });
+  }
+
+  // Checks if current thread is a looper thread.
+  public boolean checkOnLooperThread() {
+    return (Thread.currentThread().getId() == threadId);
+  }
+
+  @Override
+  public synchronized void execute(final Runnable runnable) {
+    if (!running) {
+      Log.w(TAG, "Running looper executor without calling requestStart()");
+      return;
+    }
+    if (Thread.currentThread().getId() == threadId) {
+      runnable.run();
+    } else {
+      handler.post(runnable);
+    }
+  }
+
+}
diff --git a/webrtc-client/src/main/java/fr/pchab/webrtcclient/WebRtcClient.java b/webrtc-client/src/main/java/fr/pchab/webrtcclient/WebRtcClient.java
index 81624b5..fd61d94 100644
--- a/webrtc-client/src/main/java/fr/pchab/webrtcclient/WebRtcClient.java
+++ b/webrtc-client/src/main/java/fr/pchab/webrtcclient/WebRtcClient.java
@@ -26,7 +26,8 @@
     private MediaStream localMS;
     private VideoSource videoSource;
     private RtcListener mListener;
-    private Socket client;
+    private Socket mSocket;
+    private final LooperExecutor executor;
 
     private static final String AUDIO_CODEC_PARAM_BITRATE = "maxaveragebitrate";
     private static final String AUDIO_ECHO_CANCELLATION_CONSTRAINT = "googEchoCancellation";
@@ -137,7 +138,7 @@ public void sendMessage(String to, String type, JSONObject payload) throws JSONE
         message.put("to", to);
         message.put("type", type);
         message.put("payload", payload);
-        client.emit("message", message);
+        mSocket.emit("message", message);
     }
 
     private class MessageHandler {
@@ -315,17 +316,18 @@ public WebRtcClient(RtcListener listener, String host, PeerConnectionParameters
         pcParams = params;
         PeerConnectionFactory.initializeAndroidGlobals(listener, true, true,
                 params.videoCodecHwAcceleration, mEGLcontext);
-        factory = new PeerConnectionFactory();
+        executor = new LooperExecutor();
+        executor.requestStart();
         MessageHandler messageHandler = new MessageHandler();
 
         try {
-            client = IO.socket(host);
+            mSocket = IO.socket(host);
         } catch (URISyntaxException e) {
             e.printStackTrace();
         }
-        client.on("id", messageHandler.onId);
-        client.on("message", messageHandler.onMessage);
-        client.connect();
+        mSocket.on("id", messageHandler.onId);
+        mSocket.on("message", messageHandler.onMessage);
+        mSocket.connect();
 
         iceServers.add(new PeerConnection.IceServer("stun:23.21.150.121"));
         iceServers.add(new PeerConnection.IceServer("stun:stun.l.google.com:19302"));
@@ -335,6 +337,13 @@ public WebRtcClient(RtcListener listener, String host, PeerConnectionParameters
             pcConstraints.mandatory.add(new MediaConstraints.KeyValuePair("OfferToReceiveVideo", "true"));
         }
         pcConstraints.optional.add(new MediaConstraints.KeyValuePair("DtlsSrtpKeyAgreement", "true"));
+
+        executor.execute(new Runnable() {
+            @Override
+            public void run() {
+                factory = new PeerConnectionFactory();
+            }
+        });
     }
 
     /**
@@ -361,14 +370,15 @@ public void onDestroy() {
         if (videoSource != null) {
             videoSource.stop();
         }
-
-        if (factory != null) {
-            factory.dispose();
-            factory = null;
-        }
-        client.close();
-        client.disconnect();
-        client = null;
+        executor.execute(new Runnable() {
+            @Override
+            public void run() {
+                factory.dispose();
+            }
+        });
+        executor.requestStop();
+        mSocket.disconnect();
+        mSocket.close();
     }
 
     private int findEndPoint() {
@@ -389,10 +399,18 @@ public void start(String name){
         try {
             JSONObject message = new JSONObject();
             message.put("name", name);
-            client.emit("readyToStream", message);
+            mSocket.emit("readyToStream", message);
         } catch (JSONException e) {
             e.printStackTrace();
         }
+
+        executor.execute(new Runnable() {
+            @Override
+            public void run() {
+                setCamera();
+            }
+        });
+
     }
 
     private void configOutput(){
