diff --git a/libs/armeabi-v7a/libjingle_peerconnection_so.so b/libs/armeabi-v7a/libjingle_peerconnection_so.so
new file mode 100755
index 0000000..1624fb9
Binary files /dev/null and b/libs/armeabi-v7a/libjingle_peerconnection_so.so differ
diff --git a/libs/armeabi/libjingle_peerconnection_so.so b/libs/armeabi/libjingle_peerconnection_so.so
deleted file mode 100644
index 3a3ccde..0000000
Binary files a/libs/armeabi/libjingle_peerconnection_so.so and /dev/null differ
diff --git a/libs/libjingle_peerconnection.jar b/libs/libjingle_peerconnection.jar
index e2353a8..a50d834 100644
Binary files a/libs/libjingle_peerconnection.jar and b/libs/libjingle_peerconnection.jar differ
diff --git a/libs/x86/libjingle_peerconnection_so.so b/libs/x86/libjingle_peerconnection_so.so
new file mode 100755
index 0000000..d7b7c29
Binary files /dev/null and b/libs/x86/libjingle_peerconnection_so.so differ
diff --git a/libs/x86_64/libjingle_peerconnection_so.so b/libs/x86_64/libjingle_peerconnection_so.so
new file mode 100755
index 0000000..92264b9
Binary files /dev/null and b/libs/x86_64/libjingle_peerconnection_so.so differ
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 890a17d..8036777 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
     <string name="app_name">AndroidRTC</string>
-    <string name="host">192.168.0.100</string>
+    <string name="host">192.168.0.102</string>
     <string name="port">3000</string>
 </resources>
\ No newline at end of file
diff --git a/src/fr/pchab/AndroidRTC/RTCActivity.java b/src/fr/pchab/AndroidRTC/RTCActivity.java
index 393bd72..415d306 100644
--- a/src/fr/pchab/AndroidRTC/RTCActivity.java
+++ b/src/fr/pchab/AndroidRTC/RTCActivity.java
@@ -39,7 +39,13 @@ public void onCreate(Bundle savedInstanceState) {
         mSocketAddress = "http://" + getResources().getString(R.string.host);
         mSocketAddress += (":" + getResources().getString(R.string.port) + "/");
 
-        PeerConnectionFactory.initializeAndroidGlobals(this);
+        /*
+         * public static native boolean initializeAndroidGlobals( Object context, boolean
+         * initializeAudio, boolean initializeVideo, boolean vp8HwAcceleration, Object
+         * renderEGLContext);
+         */
+
+        PeerConnectionFactory.initializeAndroidGlobals(this, true, true, false, null);
 
         // Camera display view
         Point displaySize = new Point();
@@ -101,7 +107,7 @@ public void startCam() {
         // Camera settings
         client.setCamera("front", "640", "480");
         // no need create room
-        //client.start("android_test", true);
+        // client.start("android_test", true);
     }
 
     @Override
diff --git a/src/fr/pchab/AndroidRTC/WebRtcClient.java b/src/fr/pchab/AndroidRTC/WebRtcClient.java
index 0c3936c..fb4a0f7 100644
--- a/src/fr/pchab/AndroidRTC/WebRtcClient.java
+++ b/src/fr/pchab/AndroidRTC/WebRtcClient.java
@@ -7,6 +7,7 @@
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
+import org.webrtc.AudioSource;
 import org.webrtc.DataChannel;
 import org.webrtc.IceCandidate;
 import org.webrtc.MediaConstraints;
@@ -217,10 +218,6 @@ public void onIceCandidate(final IceCandidate candidate) {
             }
         }
 
-        @Override
-        public void onError() {
-        }
-
         @Override
         public void onAddStream(MediaStream mediaStream) {
             Log.d(TAG, "onAddStream " + mediaStream.label());
@@ -246,10 +243,16 @@ public Peer(String id, int endPoint) {
             this.id = id;
             this.endPoint = endPoint;
 
-            pc.addStream(lMS, new MediaConstraints());
+            pc.addStream(lMS);
 
             mListener.onStatusChanged("CONNECTING");
         }
+
+        @Override
+        public void onRenegotiationNeeded() {
+            // TODO Auto-generated method stub
+
+        }
     }
 
     public WebRtcClient(RTCListener listener, String host) {
@@ -284,11 +287,16 @@ public void setCamera(String cameraFacing, String height, String width) {
         MediaConstraints videoConstraints = new MediaConstraints();
         videoConstraints.mandatory.add(new MediaConstraints.KeyValuePair("maxHeight", height));
         videoConstraints.mandatory.add(new MediaConstraints.KeyValuePair("maxWidth", width));
+        videoConstraints.mandatory.add(new MediaConstraints.KeyValuePair("OfferToReceiveAudio", "true"));
+        videoConstraints.mandatory.add(new MediaConstraints.KeyValuePair("OfferToReceiveVideo", "false"));
 
         VideoSource videoSource = factory.createVideoSource(getVideoCapturer(cameraFacing), videoConstraints);
         lMS = factory.createLocalMediaStream("ARDAMS");
         lMS.addTrack(factory.createVideoTrack("ARDAMSv0", videoSource));
-        lMS.addTrack(factory.createAudioTrack("ARDAMSa0"));
+
+        MediaConstraints audioConstraints = new MediaConstraints();
+        AudioSource audioSource = factory.createAudioSource(audioConstraints);
+        lMS.addTrack(factory.createAudioTrack("ARDAMSa0", audioSource));
 
         mListener.onLocalStream(lMS);
     }
