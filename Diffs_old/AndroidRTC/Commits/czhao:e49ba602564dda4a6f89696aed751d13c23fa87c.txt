diff --git a/.gitignore b/.gitignore
index da3306f..afbdab3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,5 +1,6 @@
+.gradle
+/local.properties
+/.idea/workspace.xml
+/.idea/libraries
 .DS_Store
-.idea/
-out/
-gen/
-local.properties
\ No newline at end of file
+/build
diff --git a/.idea/.name b/.idea/.name
new file mode 100644
index 0000000..9c478d8
--- /dev/null
+++ b/.idea/.name
@@ -0,0 +1 @@
+AndroidRTC
\ No newline at end of file
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
index 0000000..217af47
--- /dev/null
+++ b/.idea/compiler.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <option name="DEFAULT_COMPILER" value="Javac" />
+    <resourceExtensions />
+    <wildcardResourcePatterns>
+      <entry name="!?*.java" />
+      <entry name="!?*.form" />
+      <entry name="!?*.class" />
+      <entry name="!?*.groovy" />
+      <entry name="!?*.scala" />
+      <entry name="!?*.flex" />
+      <entry name="!?*.kt" />
+      <entry name="!?*.clj" />
+    </wildcardResourcePatterns>
+    <annotationProcessing>
+      <profile default="true" name="Default" enabled="false">
+        <processorPath useClasspath="true" />
+      </profile>
+    </annotationProcessing>
+  </component>
+</project>
+
diff --git a/.idea/copyright/profiles_settings.xml b/.idea/copyright/profiles_settings.xml
new file mode 100644
index 0000000..e7bedf3
--- /dev/null
+++ b/.idea/copyright/profiles_settings.xml
@@ -0,0 +1,3 @@
+<component name="CopyrightManager">
+  <settings default="" />
+</component>
\ No newline at end of file
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
new file mode 100644
index 0000000..e206d70
--- /dev/null
+++ b/.idea/encodings.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding" useUTFGuessing="true" native2AsciiForPropertiesFiles="false" />
+</project>
+
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
new file mode 100644
index 0000000..719fde3
--- /dev/null
+++ b/.idea/gradle.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="distributionType" value="LOCAL" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleHome" value="$APPLICATION_HOME_DIR$/gradle/gradle-2.2.1" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+            <option value="$PROJECT_DIR$/app" />
+            <option value="$PROJECT_DIR$/webrtc-client" />
+          </set>
+        </option>
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
+
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
index 0000000..59436c9
--- /dev/null
+++ b/.idea/misc.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="EntryPointsManager">
+    <entry_points version="2.0" />
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" assert-keyword="true" jdk-15="true" project-jdk-name="1.7" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/build/classes" />
+  </component>
+</project>
+
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 0000000..e6172eb
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/AndroidRTC.iml" filepath="$PROJECT_DIR$/AndroidRTC.iml" />
+      <module fileurl="file://$PROJECT_DIR$/app/app.iml" filepath="$PROJECT_DIR$/app/app.iml" />
+      <module fileurl="file://$PROJECT_DIR$/webrtc-client/webrtc-client.iml" filepath="$PROJECT_DIR$/webrtc-client/webrtc-client.iml" />
+    </modules>
+  </component>
+</project>
+
diff --git a/.idea/scopes/scope_settings.xml b/.idea/scopes/scope_settings.xml
new file mode 100644
index 0000000..922003b
--- /dev/null
+++ b/.idea/scopes/scope_settings.xml
@@ -0,0 +1,5 @@
+<component name="DependencyValidationManager">
+  <state>
+    <option name="SKIP_IMPORT_STATEMENTS" value="false" />
+  </state>
+</component>
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
index 0000000..def6a6a
--- /dev/null
+++ b/.idea/vcs.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="" />
+  </component>
+</project>
+
diff --git a/AndroidRTC.iml b/AndroidRTC.iml
index 59badbf..0bb6048 100644
--- a/AndroidRTC.iml
+++ b/AndroidRTC.iml
@@ -1,21 +1,19 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
+<module external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
   <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration />
+    <facet type="java-gradle" name="Java-Gradle">
+      <configuration>
+        <option name="BUILD_FOLDER_PATH" value="$MODULE_DIR$/build" />
+      </configuration>
     </facet>
   </component>
   <component name="NewModuleRootManager" inherit-compiler-output="true">
     <exclude-output />
     <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" generated="true" />
+      <excludeFolder url="file://$MODULE_DIR$/.gradle" />
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" name="libjingle" level="project" />
-    <orderEntry type="library" name="engine.io-client-0.4.1" level="project" />
-    <orderEntry type="library" name="Java-WebSocket-1.3.0" level="project" />
-    <orderEntry type="library" name="socket.io-client-0.4.2" level="project" />
   </component>
-</module>
\ No newline at end of file
+</module>
+
diff --git a/LICENSE.txt~ b/LICENSE.txt~
new file mode 100644
index 0000000..e69de29
diff --git a/app/.gitignore b/app/.gitignore
new file mode 100644
index 0000000..796b96d
--- /dev/null
+++ b/app/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/app/app.iml b/app/app.iml
new file mode 100644
index 0000000..4662fbf
--- /dev/null
+++ b/app/app.iml
@@ -0,0 +1,97 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="AndroidRTC" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
+  <component name="FacetManager">
+    <facet type="android-gradle" name="Android-Gradle">
+      <configuration>
+        <option name="GRADLE_PROJECT_PATH" value=":app" />
+      </configuration>
+    </facet>
+    <facet type="android" name="Android">
+      <configuration>
+        <option name="SELECTED_BUILD_VARIANT" value="debug" />
+        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
+        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
+        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
+        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugAndroidTest" />
+        <option name="SOURCE_GEN_TASK_NAME" value="generateDebugSources" />
+        <option name="TEST_SOURCE_GEN_TASK_NAME" value="generateDebugAndroidTestSources" />
+        <option name="ALLOW_USER_CONFIGURATION" value="false" />
+        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
+        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
+        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />
+        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
+      </configuration>
+    </facet>
+  </component>
+  <component name="NewModuleRootManager" inherit-compiler-output="false">
+    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
+    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/androidTest/debug" />
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/androidTest/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/androidTest/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/coverage-instrumented-classes" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex-cache" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jacoco" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/javaResources" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/libs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/ndk" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/pre-dexed" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/proguard" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
+      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
+    </content>
+    <orderEntry type="jdk" jdkName="Android API 22 Platform" jdkType="Android SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" exported="" name="Java-WebSocket-1.3.0" level="project" />
+    <orderEntry type="library" exported="" name="support-v4-22.0.0" level="project" />
+    <orderEntry type="library" exported="" name="support-annotations-22.0.0" level="project" />
+    <orderEntry type="library" exported="" name="appcompat-v7-22.0.0" level="project" />
+    <orderEntry type="library" exported="" name="engine.io-client-0.4.1" level="project" />
+    <orderEntry type="library" exported="" name="socket.io-client-0.4.2" level="project" />
+    <orderEntry type="module" module-name="webrtc-client" exported="" />
+  </component>
+</module>
+
diff --git a/app/build.gradle b/app/build.gradle
new file mode 100644
index 0000000..6ef1cc2
--- /dev/null
+++ b/app/build.gradle
@@ -0,0 +1,25 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 22
+    buildToolsVersion "22.0.0"
+
+    defaultConfig {
+        applicationId "fr.pchab.androidrtc"
+        minSdkVersion 15
+        targetSdkVersion 22
+        versionCode 1
+        versionName "1.0"
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile 'com.android.support:appcompat-v7:22.0.0'
+    compile project(':webrtc-client')
+}
diff --git a/app/proguard-rules.pro b/app/proguard-rules.pro
new file mode 100644
index 0000000..57a995b
--- /dev/null
+++ b/app/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /home/pierre/Workspace/src/chromium/src/third_party/android_tools/sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/app/src/androidTest/java/fr/pchab/androidrtc/ApplicationTest.java b/app/src/androidTest/java/fr/pchab/androidrtc/ApplicationTest.java
new file mode 100644
index 0000000..59be560
--- /dev/null
+++ b/app/src/androidTest/java/fr/pchab/androidrtc/ApplicationTest.java
@@ -0,0 +1,13 @@
+package fr.pchab.androidrtc;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+/**
+ * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
+ */
+public class ApplicationTest extends ApplicationTestCase<Application> {
+    public ApplicationTest() {
+        super(Application.class);
+    }
+}
\ No newline at end of file
diff --git a/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
similarity index 68%
rename from AndroidManifest.xml
rename to app/src/main/AndroidManifest.xml
index 39e2f8a..418f671 100644
--- a/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -1,14 +1,14 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="fr.pchab.AndroidRTC"
-          android:versionCode="1"
-          android:versionName="1.0">
+    package="fr.pchab.androidrtc"
+    android:versionCode="1"
+    android:versionName="1.0">
 
     <uses-feature android:name="android.hardware.camera" />
     <uses-feature android:name="android.hardware.camera.autofocus" />
     <uses-sdk
-            android:minSdkVersion="13"
-            android:targetSdkVersion="21" />
+        android:minSdkVersion="15"
+        android:targetSdkVersion="21" />
 
     <uses-permission android:name="android.permission.CAMERA" />
     <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
@@ -17,11 +17,11 @@
     <uses-permission android:name="android.permission.WAKE_LOCK" />
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
 
-    <application android:label="@string/app_name" android:icon="@drawable/icon" android:allowBackup="true">
-        <activity android:name="RTCActivity"
-                  android:label="@string/app_name"
-                  android:screenOrientation="fullUser"
-                  android:configChanges="orientation|screenSize">
+    <application android:label="@string/app_name"  android:allowBackup="true">
+        <activity android:name="RtcActivity"
+            android:label="@string/app_name"
+            android:screenOrientation="fullUser"
+            android:configChanges="orientation|screenSize">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN"/>
                 <category android:name="android.intent.category.LAUNCHER"/>
@@ -31,7 +31,7 @@
                 <category android:name="android.intent.category.DEFAULT" />
                 <category android:name="android.intent.category.BROWSABLE" />
                 <data android:scheme="http"
-                      android:host="@string/host" />
+                    android:host="@string/host" />
             </intent-filter>
         </activity>
     </application>
diff --git a/app/src/main/java/fr/pchab/androidrtc/RtcActivity.java b/app/src/main/java/fr/pchab/androidrtc/RtcActivity.java
new file mode 100644
index 0000000..f141fa9
--- /dev/null
+++ b/app/src/main/java/fr/pchab/androidrtc/RtcActivity.java
@@ -0,0 +1,199 @@
+package fr.pchab.androidrtc;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.graphics.Point;
+import android.opengl.GLSurfaceView;
+import android.os.Bundle;
+import android.view.Window;
+import android.view.WindowManager.LayoutParams;
+import android.widget.Toast;
+import org.json.JSONException;
+import org.webrtc.MediaStream;
+import org.webrtc.VideoRenderer;
+import org.webrtc.VideoRendererGui;
+import fr.pchab.webrtcclient.WebRtcClient;
+import fr.pchab.webrtcclient.PeerConnectionParameters;
+
+import java.util.List;
+
+public class RtcActivity extends Activity implements WebRtcClient.RTCListener {
+    private final static int VIDEO_CALL_SENT = 666;
+    private static final String VIDEO_CODEC_VP9 = "VP9";
+    private static final String AUDIO_CODEC_OPUS = "opus";
+    // Local preview screen position before call is connected.
+    private static final int LOCAL_X_CONNECTING = 0;
+    private static final int LOCAL_Y_CONNECTING = 0;
+    private static final int LOCAL_WIDTH_CONNECTING = 100;
+    private static final int LOCAL_HEIGHT_CONNECTING = 100;
+    // Local preview screen position after call is connected.
+    private static final int LOCAL_X_CONNECTED = 72;
+    private static final int LOCAL_Y_CONNECTED = 72;
+    private static final int LOCAL_WIDTH_CONNECTED = 25;
+    private static final int LOCAL_HEIGHT_CONNECTED = 25;
+    // Remote video screen position
+    private static final int REMOTE_X = 0;
+    private static final int REMOTE_Y = 0;
+    private static final int REMOTE_WIDTH = 100;
+    private static final int REMOTE_HEIGHT = 100;
+    private VideoRendererGui.ScalingType scalingType = VideoRendererGui.ScalingType.SCALE_ASPECT_FILL;
+    private GLSurfaceView vsv;
+    private VideoRenderer.Callbacks localRender;
+    private VideoRenderer.Callbacks remoteRender;
+    private WebRtcClient client;
+    private String mSocketAddress;
+    private String callerId;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        getWindow().addFlags(
+                LayoutParams.FLAG_FULLSCREEN
+                        | LayoutParams.FLAG_KEEP_SCREEN_ON
+                        | LayoutParams.FLAG_DISMISS_KEYGUARD
+                        | LayoutParams.FLAG_SHOW_WHEN_LOCKED
+                        | LayoutParams.FLAG_TURN_SCREEN_ON);
+        setContentView(R.layout.main);
+        mSocketAddress = "http://" + getResources().getString(R.string.host);
+        mSocketAddress += (":" + getResources().getString(R.string.port) + "/");
+
+        vsv = (GLSurfaceView) findViewById(R.id.glview_call);
+        vsv.setPreserveEGLContextOnPause(true);
+        vsv.setKeepScreenOn(true);
+        VideoRendererGui.setView(vsv, new Runnable() {
+            @Override
+            public void run() {
+                init();
+            }
+        });
+
+        // local and remote render
+        remoteRender = VideoRendererGui.create(
+                REMOTE_X, REMOTE_Y,
+                REMOTE_WIDTH, REMOTE_HEIGHT, scalingType, false);
+        localRender = VideoRendererGui.create(
+                LOCAL_X_CONNECTING, LOCAL_Y_CONNECTING,
+                LOCAL_WIDTH_CONNECTING, LOCAL_HEIGHT_CONNECTING, scalingType, true);
+
+        final Intent intent = getIntent();
+        final String action = intent.getAction();
+
+        if (Intent.ACTION_VIEW.equals(action)) {
+            final List<String> segments = intent.getData().getPathSegments();
+            callerId = segments.get(0);
+        }
+    }
+
+    private void init() {
+        Point displaySize = new Point();
+        getWindowManager().getDefaultDisplay().getSize(displaySize);
+        PeerConnectionParameters params = new PeerConnectionParameters(
+                true, false, displaySize.x, displaySize.y, 30, 1, VIDEO_CODEC_VP9, true, 1, AUDIO_CODEC_OPUS, true);
+
+        client = new WebRtcClient(this, mSocketAddress, params, VideoRendererGui.getEGLContext());
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        vsv.onPause();
+        if(client != null) {
+            client.onPause();
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        vsv.onResume();
+        if(client != null) {
+            client.onResume();
+        }
+    }
+
+    @Override
+    public void onDestroy() {
+        if(client != null) {
+            client.onDestroy();
+        }
+        super.onDestroy();
+    }
+
+    @Override
+    public void onCallReady(String callId) {
+        if (callerId != null) {
+            try {
+                answer(callerId);
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+        } else {
+            call(callId);
+        }
+    }
+
+    public void answer(String callerId) throws JSONException {
+        client.sendMessage(callerId, "init", null);
+        startCam();
+    }
+
+    public void call(String callId) {
+        Intent msg = new Intent(Intent.ACTION_SEND);
+        msg.putExtra(Intent.EXTRA_TEXT, mSocketAddress + callId);
+        msg.setType("text/plain");
+        startActivityForResult(Intent.createChooser(msg, "Call someone :"), VIDEO_CALL_SENT);
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (requestCode == VIDEO_CALL_SENT) {
+            startCam();
+        }
+    }
+
+    public void startCam() {
+        // Camera settings
+        client.start("android_test");
+    }
+
+    @Override
+    public void onStatusChanged(final String newStatus) {
+        runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                Toast.makeText(getApplicationContext(), newStatus, Toast.LENGTH_SHORT).show();
+            }
+        });
+    }
+
+    @Override
+    public void onLocalStream(MediaStream localStream) {
+        localStream.videoTracks.get(0).addRenderer(new VideoRenderer(localRender));
+        VideoRendererGui.update(localRender,
+                LOCAL_X_CONNECTING, LOCAL_Y_CONNECTING,
+                LOCAL_WIDTH_CONNECTING, LOCAL_HEIGHT_CONNECTING,
+                VideoRendererGui.ScalingType.SCALE_ASPECT_FIT);
+    }
+
+    @Override
+    public void onAddRemoteStream(MediaStream remoteStream, int endPoint) {
+        remoteStream.videoTracks.get(0).addRenderer(new VideoRenderer(remoteRender));
+        VideoRendererGui.update(remoteRender,
+                REMOTE_X, REMOTE_Y,
+                REMOTE_WIDTH, REMOTE_HEIGHT, scalingType);
+        VideoRendererGui.update(localRender,
+                LOCAL_X_CONNECTED, LOCAL_Y_CONNECTED,
+                LOCAL_WIDTH_CONNECTED, LOCAL_HEIGHT_CONNECTED,
+                VideoRendererGui.ScalingType.SCALE_ASPECT_FIT);
+    }
+
+    @Override
+    public void onRemoveRemoteStream(int endPoint) {
+        VideoRendererGui.remove(remoteRender);
+        VideoRendererGui.update(localRender,
+                LOCAL_X_CONNECTING, LOCAL_Y_CONNECTING,
+                LOCAL_WIDTH_CONNECTING, LOCAL_HEIGHT_CONNECTING,
+                VideoRendererGui.ScalingType.SCALE_ASPECT_FIT);
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/res/layout/main.xml b/app/src/main/res/layout/main.xml
new file mode 100644
index 0000000..8a1fd6f
--- /dev/null
+++ b/app/src/main/res/layout/main.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <android.opengl.GLSurfaceView
+        android:id="@+id/glview_call"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+</RelativeLayout>
diff --git a/app/src/main/res/menu/menu_rtc.xml b/app/src/main/res/menu/menu_rtc.xml
new file mode 100644
index 0000000..220380b
--- /dev/null
+++ b/app/src/main/res/menu/menu_rtc.xml
@@ -0,0 +1,6 @@
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools" tools:context=".RtcActivity">
+    <item android:id="@+id/action_settings" android:title="@string/action_settings"
+        android:orderInCategory="100" app:showAsAction="never" />
+</menu>
diff --git a/app/src/main/res/mipmap-hdpi/ic_launcher.png b/app/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 0000000..cde69bc
Binary files /dev/null and b/app/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/app/src/main/res/mipmap-mdpi/ic_launcher.png b/app/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 0000000..c133a0c
Binary files /dev/null and b/app/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/app/src/main/res/mipmap-xhdpi/ic_launcher.png b/app/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 0000000..bfa42f0
Binary files /dev/null and b/app/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/app/src/main/res/mipmap-xxhdpi/ic_launcher.png b/app/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 0000000..324e72c
Binary files /dev/null and b/app/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/app/src/main/res/values-w820dp/dimens.xml b/app/src/main/res/values-w820dp/dimens.xml
new file mode 100644
index 0000000..63fc816
--- /dev/null
+++ b/app/src/main/res/values-w820dp/dimens.xml
@@ -0,0 +1,6 @@
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
diff --git a/app/src/main/res/values/dimens.xml b/app/src/main/res/values/dimens.xml
new file mode 100644
index 0000000..47c8224
--- /dev/null
+++ b/app/src/main/res/values/dimens.xml
@@ -0,0 +1,5 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+</resources>
diff --git a/res/values/strings.xml b/app/src/main/res/values/strings.xml
similarity index 73%
rename from res/values/strings.xml
rename to app/src/main/res/values/strings.xml
index 2d48c19..ea0331f 100644
--- a/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -3,4 +3,5 @@
     <string name="app_name">AndroidRTC</string>
     <string name="host">192.168.0.2</string>
     <string name="port">3000</string>
-</resources>
\ No newline at end of file
+    <string name="action_settings">Options</string>
+</resources>
diff --git a/app/src/main/res/values/styles.xml b/app/src/main/res/values/styles.xml
new file mode 100644
index 0000000..766ab99
--- /dev/null
+++ b/app/src/main/res/values/styles.xml
@@ -0,0 +1,8 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+    </style>
+
+</resources>
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 0000000..d3ff69d
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,19 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+
+buildscript {
+    repositories {
+        jcenter()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.1.0'
+
+        // NOTE: Do not place your application dependencies here; they belong
+        // in the individual module build.gradle files
+    }
+}
+
+allprojects {
+    repositories {
+        jcenter()
+    }
+}
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
index 0000000..1d3591c
--- /dev/null
+++ b/gradle.properties
@@ -0,0 +1,18 @@
+# Project-wide Gradle settings.
+
+# IDE (e.g. Android Studio) users:
+# Gradle settings configured through the IDE *will override*
+# any settings specified in this file.
+
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Default value: -Xmx10248m -XX:MaxPermSize=256m
+# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000..8c0fb64
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000..0c71e76
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Wed Apr 10 15:27:10 PDT 2013
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
diff --git a/gradlew b/gradlew
new file mode 100755
index 0000000..91a7e26
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 0000000..aec9973
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/libs/Java-WebSocket-1.3.0.jar b/libs/Java-WebSocket-1.3.0.jar
deleted file mode 100644
index 5263cfb..0000000
Binary files a/libs/Java-WebSocket-1.3.0.jar and /dev/null differ
diff --git a/libs/armeabi/libjingle_peerconnection_so.so b/libs/armeabi/libjingle_peerconnection_so.so
deleted file mode 100644
index 255e6a8..0000000
Binary files a/libs/armeabi/libjingle_peerconnection_so.so and /dev/null differ
diff --git a/libs/engine.io-client-0.4.1.jar b/libs/engine.io-client-0.4.1.jar
deleted file mode 100644
index a97ceef..0000000
Binary files a/libs/engine.io-client-0.4.1.jar and /dev/null differ
diff --git a/libs/libjingle_peerconnection.jar b/libs/libjingle_peerconnection.jar
deleted file mode 100644
index e73c571..0000000
Binary files a/libs/libjingle_peerconnection.jar and /dev/null differ
diff --git a/libs/socket.io-client-0.4.2.jar b/libs/socket.io-client-0.4.2.jar
deleted file mode 100644
index 764a3d1..0000000
Binary files a/libs/socket.io-client-0.4.2.jar and /dev/null differ
diff --git a/project.properties b/project.properties
deleted file mode 100644
index 47e913f..0000000
--- a/project.properties
+++ /dev/null
@@ -1,4 +0,0 @@
-# This file is automatically generated by IntelliJ IDEA
-# Project target.
-dex.disable.merger=true
-target=android-22
\ No newline at end of file
diff --git a/res/drawable/icon.png b/res/drawable/icon.png
deleted file mode 100644
index 08ee50d..0000000
Binary files a/res/drawable/icon.png and /dev/null differ
diff --git a/res/layout/main.xml b/res/layout/main.xml
deleted file mode 100644
index a730ca3..0000000
--- a/res/layout/main.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:orientation="vertical"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent">
-
-    <android.opengl.GLSurfaceView
-            android:id="@+id/glview_call"
-            android:layout_width="match_parent"
-            android:layout_height="match_parent" />
-
-</RelativeLayout>
\ No newline at end of file
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 0000000..d2197f4
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1 @@
+include ':app', ':webrtc-client'
diff --git a/src/fr/pchab/AndroidRTC/RTCActivity.java b/src/fr/pchab/AndroidRTC/RTCActivity.java
deleted file mode 100644
index 399ef09..0000000
--- a/src/fr/pchab/AndroidRTC/RTCActivity.java
+++ /dev/null
@@ -1,200 +0,0 @@
-package fr.pchab.AndroidRTC;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.graphics.Point;
-import android.opengl.GLSurfaceView;
-import android.os.Bundle;
-import android.view.Window;
-import android.view.WindowManager.LayoutParams;
-import android.widget.Toast;
-import org.json.JSONException;
-import org.webrtc.MediaStream;
-import org.webrtc.PeerConnectionFactory;
-import org.webrtc.VideoRenderer;
-import org.webrtc.VideoRendererGui;
-
-import java.util.List;
-
-public class RTCActivity extends Activity implements WebRtcClient.RTCListener {
-  private final static int VIDEO_CALL_SENT = 666;
-  private static final String VIDEO_CODEC_VP9 = "VP9";
-  private static final String AUDIO_CODEC_OPUS = "opus";
-  // Local preview screen position before call is connected.
-  private static final int LOCAL_X_CONNECTING = 0;
-  private static final int LOCAL_Y_CONNECTING = 0;
-  private static final int LOCAL_WIDTH_CONNECTING = 100;
-  private static final int LOCAL_HEIGHT_CONNECTING = 100;
-  // Local preview screen position after call is connected.
-  private static final int LOCAL_X_CONNECTED = 72;
-  private static final int LOCAL_Y_CONNECTED = 72;
-  private static final int LOCAL_WIDTH_CONNECTED = 25;
-  private static final int LOCAL_HEIGHT_CONNECTED = 25;
-  // Remote video screen position
-  private static final int REMOTE_X = 0;
-  private static final int REMOTE_Y = 0;
-  private static final int REMOTE_WIDTH = 100;
-  private static final int REMOTE_HEIGHT = 100;
-  private VideoRendererGui.ScalingType scalingType = VideoRendererGui.ScalingType.SCALE_ASPECT_FILL;
-  private GLSurfaceView vsv;
-  private VideoRenderer.Callbacks localRender;
-  private VideoRenderer.Callbacks remoteRender;
-  private WebRtcClient client;
-  private String mSocketAddress;
-  private String callerId;
-
-  @Override
-  public void onCreate(Bundle savedInstanceState) {
-    super.onCreate(savedInstanceState);
-    requestWindowFeature(Window.FEATURE_NO_TITLE);
-    getWindow().addFlags(
-            LayoutParams.FLAG_FULLSCREEN
-                    | LayoutParams.FLAG_KEEP_SCREEN_ON
-                    | LayoutParams.FLAG_DISMISS_KEYGUARD
-                    | LayoutParams.FLAG_SHOW_WHEN_LOCKED
-                    | LayoutParams.FLAG_TURN_SCREEN_ON);
-    setContentView(R.layout.main);
-    mSocketAddress = "http://" + getResources().getString(R.string.host);
-    mSocketAddress += (":" + getResources().getString(R.string.port) + "/");
-
-    vsv = (GLSurfaceView) findViewById(R.id.glview_call);
-    vsv.setPreserveEGLContextOnPause(true);
-    vsv.setKeepScreenOn(true);
-    VideoRendererGui.setView(vsv, new Runnable() {
-      @Override
-      public void run() {
-        init();
-      }
-    });
-
-    // local and remote render
-    remoteRender = VideoRendererGui.create(
-            REMOTE_X, REMOTE_Y,
-            REMOTE_WIDTH, REMOTE_HEIGHT, scalingType, false);
-    localRender = VideoRendererGui.create(
-            LOCAL_X_CONNECTING, LOCAL_Y_CONNECTING,
-            LOCAL_WIDTH_CONNECTING, LOCAL_HEIGHT_CONNECTING, scalingType, true);
-
-    final Intent intent = getIntent();
-    final String action = intent.getAction();
-
-    if (Intent.ACTION_VIEW.equals(action)) {
-      final List<String> segments = intent.getData().getPathSegments();
-      callerId = segments.get(0);
-    }
-  }
-
-  private void init() {
-    Point displaySize = new Point();
-    getWindowManager().getDefaultDisplay().getSize(displaySize);
-    PeerConnectionParameters params = new PeerConnectionParameters(
-            true, false, displaySize.x, displaySize.y, 30, 1, VIDEO_CODEC_VP9, true, 1, AUDIO_CODEC_OPUS, true);
-    PeerConnectionFactory.initializeAndroidGlobals(this, true, true,
-            params.videoCodecHwAcceleration, VideoRendererGui.getEGLContext());
-    client = new WebRtcClient(this, mSocketAddress, params);
-  }
-
-  @Override
-  public void onPause() {
-    super.onPause();
-    vsv.onPause();
-    if(client != null) {
-      client.stopVideoSource();
-    }
-  }
-
-  @Override
-  public void onResume() {
-    super.onResume();
-    vsv.onResume();
-    if(client != null) {
-      client.restartVideoSource();
-    }
-  }
-
-  @Override
-  public void onDestroy() {
-    if(client != null) {
-      client.disconnect();
-    }
-    super.onDestroy();
-  }
-
-  @Override
-  public void onCallReady(String callId) {
-    if (callerId != null) {
-      try {
-        answer(callerId);
-      } catch (JSONException e) {
-        e.printStackTrace();
-      }
-    } else {
-      call(callId);
-    }
-  }
-
-  public void answer(String callerId) throws JSONException {
-    client.sendMessage(callerId, "init", null);
-    startCam();
-  }
-
-  public void call(String callId) {
-    Intent msg = new Intent(Intent.ACTION_SEND);
-    msg.putExtra(Intent.EXTRA_TEXT, mSocketAddress + callId);
-    msg.setType("text/plain");
-    startActivityForResult(Intent.createChooser(msg, "Call someone :"), VIDEO_CALL_SENT);
-  }
-
-  @Override
-  protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-    if (requestCode == VIDEO_CALL_SENT) {
-      startCam();
-    }
-  }
-
-  public void startCam() {
-    // Camera settings
-    client.setCamera();
-    client.start("android_test");
-  }
-
-  @Override
-  public void onStatusChanged(final String newStatus) {
-    runOnUiThread(new Runnable() {
-      @Override
-      public void run() {
-        Toast.makeText(getApplicationContext(), newStatus, Toast.LENGTH_SHORT).show();
-      }
-    });
-  }
-
-  @Override
-  public void onLocalStream(MediaStream localStream) {
-    localStream.videoTracks.get(0).addRenderer(new VideoRenderer(localRender));
-    VideoRendererGui.update(localRender,
-            LOCAL_X_CONNECTING, LOCAL_Y_CONNECTING,
-            LOCAL_WIDTH_CONNECTING, LOCAL_HEIGHT_CONNECTING,
-            VideoRendererGui.ScalingType.SCALE_ASPECT_FIT);
-  }
-
-  @Override
-  public void onAddRemoteStream(MediaStream remoteStream, int endPoint) {
-    remoteStream.videoTracks.get(0).addRenderer(new VideoRenderer(remoteRender));
-    VideoRendererGui.update(remoteRender,
-            REMOTE_X, REMOTE_Y,
-            REMOTE_WIDTH, REMOTE_HEIGHT, scalingType);
-    VideoRendererGui.update(localRender,
-            LOCAL_X_CONNECTED, LOCAL_Y_CONNECTED,
-            LOCAL_WIDTH_CONNECTED, LOCAL_HEIGHT_CONNECTED,
-            VideoRendererGui.ScalingType.SCALE_ASPECT_FIT);
-  }
-
-  @Override
-  public void onRemoveRemoteStream(MediaStream remoteStream, int endPoint) {
-    VideoRendererGui.remove(remoteRender);
-    VideoRendererGui.update(localRender,
-            LOCAL_X_CONNECTING, LOCAL_Y_CONNECTING,
-            LOCAL_WIDTH_CONNECTING, LOCAL_HEIGHT_CONNECTING,
-            VideoRendererGui.ScalingType.SCALE_ASPECT_FIT);
-  }
-}
\ No newline at end of file
diff --git a/src/fr/pchab/AndroidRTC/WebRtcClient.java b/src/fr/pchab/AndroidRTC/WebRtcClient.java
deleted file mode 100644
index b18f62e..0000000
--- a/src/fr/pchab/AndroidRTC/WebRtcClient.java
+++ /dev/null
@@ -1,337 +0,0 @@
-package fr.pchab.AndroidRTC;
-
-import java.net.URISyntaxException;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.LinkedList;
-
-import com.github.nkzawa.socketio.client.IO;
-import com.github.nkzawa.socketio.client.Socket;
-import com.github.nkzawa.emitter.Emitter;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.util.Log;
-import org.webrtc.*;
-
-class WebRtcClient {
-  private final static int MAX_PEER = 2;
-  private boolean[] endPoints = new boolean[MAX_PEER];
-  private PeerConnectionFactory factory;
-  private HashMap<String, Peer> peers = new HashMap<>();
-  private LinkedList<PeerConnection.IceServer> iceServers = new LinkedList<>();
-  private PeerConnectionParameters pcParams;
-  private MediaConstraints pcConstraints = new MediaConstraints();
-  private MediaStream localMS;
-  private VideoSource videoSource;
-  private RTCListener mListener;
-  private Socket client;
-  private final static String TAG = WebRtcClient.class.getCanonicalName();
-
-  public interface RTCListener{
-    void onCallReady(String callId);
-
-    void onStatusChanged(String newStatus);
-
-    void onLocalStream(MediaStream localStream);
-
-    void onAddRemoteStream(MediaStream remoteStream, int endPoint);
-
-    void onRemoveRemoteStream(MediaStream remoteStream, int endPoint);
-  }
-
-  private interface Command{
-    void execute(String peerId, JSONObject payload) throws JSONException;
-  }
-
-  private class CreateOfferCommand implements Command{
-    public void execute(String peerId, JSONObject payload) throws JSONException {
-    	Log.d(TAG,"CreateOfferCommand");
-      Peer peer = peers.get(peerId);
-      peer.pc.createOffer(peer, pcConstraints);
-    }
-  }
-
-  private class CreateAnswerCommand implements Command{
-    public void execute(String peerId, JSONObject payload) throws JSONException {
-    	Log.d(TAG,"CreateAnswerCommand");
-      Peer peer = peers.get(peerId);
-      SessionDescription sdp = new SessionDescription(
-                                                      SessionDescription.Type.fromCanonicalForm(payload.getString("type")),
-                                                      payload.getString("sdp")
-                                                      );
-      peer.pc.setRemoteDescription(peer, sdp);
-      peer.pc.createAnswer(peer, pcConstraints);
-    }
-  }
-
-  private class SetRemoteSDPCommand implements Command{
-    public void execute(String peerId, JSONObject payload) throws JSONException {
-    	Log.d(TAG,"SetRemoteSDPCommand");
-      Peer peer = peers.get(peerId);
-      SessionDescription sdp = new SessionDescription(
-                                                      SessionDescription.Type.fromCanonicalForm(payload.getString("type")),
-                                                      payload.getString("sdp")
-                                                      );
-      peer.pc.setRemoteDescription(peer, sdp);
-    }
-  }
-
-  private class AddIceCandidateCommand implements Command{
-    public void execute(String peerId, JSONObject payload) throws JSONException {
-    	Log.d(TAG,"AddIceCandidateCommand");
-      PeerConnection pc = peers.get(peerId).pc;
-      if (pc.getRemoteDescription() != null) {
-        IceCandidate candidate = new IceCandidate(
-                                                  payload.getString("id"),
-                                                  payload.getInt("label"),
-                                                  payload.getString("candidate")
-                                                  );
-        pc.addIceCandidate(candidate);
-      }
-    }
-  }
-
-  public void sendMessage(String to, String type, JSONObject payload) throws JSONException {
-    JSONObject message = new JSONObject();
-    message.put("to", to);
-    message.put("type", type);
-    message.put("payload", payload);
-    client.emit("message", message);
-  }
-
-  private class MessageHandler {
-    private HashMap<String, Command> commandMap;
-
-    private MessageHandler() {
-      this.commandMap = new HashMap<>();
-      commandMap.put("init", new CreateOfferCommand());
-      commandMap.put("offer", new CreateAnswerCommand());
-      commandMap.put("answer", new SetRemoteSDPCommand());
-      commandMap.put("candidate", new AddIceCandidateCommand());
-    }
-
-    public Emitter.Listener onMessage = new Emitter.Listener() {
-      @Override
-      public void call(Object... args) {
-        JSONObject data = (JSONObject) args[0];
-        try {
-          String from = data.getString("from");
-          String type = data.getString("type");
-          JSONObject payload = null;
-          if(!type.equals("init")) {
-            payload = data.getJSONObject("payload");
-          }
-          // if peer is unknown, try to add him
-          if(!peers.containsKey(from)) {
-            // if MAX_PEER is reach, ignore the call
-            int endPoint = findEndPoint();
-            if(endPoint != MAX_PEER) {
-              Peer peer = addPeer(from, endPoint);
-              peer.pc.addStream(localMS);
-              commandMap.get(type).execute(from, payload);
-            }
-          } else {
-            commandMap.get(type).execute(from, payload);
-          }
-        } catch (JSONException e) {
-          e.printStackTrace();
-        }
-      }
-    };
-
-    public Emitter.Listener onId = new Emitter.Listener() {
-      @Override
-      public void call(Object... args) {
-        String id = (String) args[0];
-        mListener.onCallReady(id);
-      }
-    };
-  }
-
-  private class Peer implements SdpObserver, PeerConnection.Observer{
-    private PeerConnection pc;
-    private String id;
-    private int endPoint;
-
-    @Override
-    public void onCreateSuccess(final SessionDescription sdp) {
-      try {
-        JSONObject payload = new JSONObject();
-        payload.put("type", sdp.type.canonicalForm());
-        payload.put("sdp", sdp.description);
-        sendMessage(id, sdp.type.canonicalForm(), payload);
-        pc.setLocalDescription(Peer.this, sdp);
-      } catch (JSONException e) {
-        e.printStackTrace();
-      }
-    }
-
-    @Override
-    public void onSetSuccess() {}
-
-    @Override
-    public void onCreateFailure(String s) {}
-
-    @Override
-    public void onSetFailure(String s) {}
-
-    @Override
-    public void onSignalingChange(PeerConnection.SignalingState signalingState) {}
-
-    @Override
-    public void onIceConnectionChange(PeerConnection.IceConnectionState iceConnectionState) {
-      if(iceConnectionState == PeerConnection.IceConnectionState.DISCONNECTED) {
-        removePeer(id);
-        mListener.onStatusChanged("DISCONNECTED");
-      }
-    }
-
-    @Override
-    public void onIceGatheringChange(PeerConnection.IceGatheringState iceGatheringState) {}
-
-    @Override
-    public void onIceCandidate(final IceCandidate candidate) {
-      try {
-        JSONObject payload = new JSONObject();
-        payload.put("label", candidate.sdpMLineIndex);
-        payload.put("id", candidate.sdpMid);
-        payload.put("candidate", candidate.sdp);
-        sendMessage(id, "candidate", payload);
-      } catch (JSONException e) {
-        e.printStackTrace();
-      }
-    }
-
-    @Override
-    public void onAddStream(MediaStream mediaStream) {
-    	Log.d(TAG,"onAddStream "+mediaStream.label());
-      // remote streams are displayed from 1 to MAX_PEER (0 is localStream)
-      mListener.onAddRemoteStream(mediaStream, endPoint+1);
-    }
-
-    @Override
-    public void onRemoveStream(MediaStream mediaStream) {
-      mListener.onRemoveRemoteStream(mediaStream, endPoint);
-      removePeer(id);
-    }
-
-    @Override
-    public void onDataChannel(DataChannel dataChannel) {}
-
-    @Override
-    public void onRenegotiationNeeded() {
-
-    }
-
-    public Peer(String id, int endPoint) {
-    	Log.d(TAG,"new Peer: "+id + " " + endPoint);
-      this.pc = factory.createPeerConnection(iceServers, pcConstraints, this);
-      this.id = id;
-      this.endPoint = endPoint;
-
-      pc.addStream(localMS); //, new MediaConstraints()
-
-      mListener.onStatusChanged("CONNECTING");
-    }
-  }
-
-  public WebRtcClient(RTCListener listener, String host, PeerConnectionParameters params) {
-    mListener = listener;
-    pcParams = params;
-    factory = new PeerConnectionFactory();
-    MessageHandler messageHandler = new MessageHandler();
-
-    try {
-      client = IO.socket(host);
-    } catch (URISyntaxException e) {
-      e.printStackTrace();
-    }
-    client.on("id", messageHandler.onId);
-    client.on("message", messageHandler.onMessage);
-    client.connect();
-
-    iceServers.add(new PeerConnection.IceServer("stun:23.21.150.121"));
-    iceServers.add(new PeerConnection.IceServer("stun:stun.l.google.com:19302"));
-
-    pcConstraints.mandatory.add(new MediaConstraints.KeyValuePair("OfferToReceiveAudio", "true"));
-    pcConstraints.mandatory.add(new MediaConstraints.KeyValuePair("OfferToReceiveVideo", "true"));
-    pcConstraints.optional.add(new MediaConstraints.KeyValuePair("DtlsSrtpKeyAgreement", "true"));
-  }
-
-  public void setCamera(){
-    localMS = factory.createLocalMediaStream("ARDAMS");
-    if(pcParams.videoCallEnabled){
-      MediaConstraints videoConstraints = new MediaConstraints();
-      videoConstraints.mandatory.add(new MediaConstraints.KeyValuePair("maxHeight", Integer.toString(pcParams.videoHeight)));
-      videoConstraints.mandatory.add(new MediaConstraints.KeyValuePair("maxWidth", Integer.toString(pcParams.videoWidth)));
-      videoConstraints.mandatory.add(new MediaConstraints.KeyValuePair("maxFrameRate", Integer.toString(pcParams.videoFps)));
-      videoConstraints.mandatory.add(new MediaConstraints.KeyValuePair("minFrameRate", Integer.toString(pcParams.videoFps)));
-
-      videoSource = factory.createVideoSource(getVideoCapturer(), videoConstraints);
-      localMS.addTrack(factory.createVideoTrack("ARDAMSv0", videoSource));
-    }
-
-    AudioSource audioSource = factory.createAudioSource(new MediaConstraints());
-    localMS.addTrack(factory.createAudioTrack("ARDAMSa0", audioSource));
-
-    mListener.onLocalStream(localMS);
-  }
-
-  public void stopVideoSource() {
-    if(videoSource != null) videoSource.stop();
-  }
-
-  public void restartVideoSource() {
-    if(videoSource != null) videoSource.restart();
-  }
-
-  public void disconnect() {
-    Iterator it = peers.values().iterator();
-    while(it.hasNext()){
-      Peer peer = (Peer) it.next();
-      peer.pc.dispose();
-    }
-    videoSource.dispose();
-    factory.dispose();
-    client.disconnect();
-    client.close();
-  }
-
-  private int findEndPoint() {
-    for(int i = 0; i < MAX_PEER; i++) if (!endPoints[i]) return i;
-    return MAX_PEER;
-  }
-
-  public void start(String name){
-    try {
-      JSONObject message = new JSONObject();
-      message.put("name", name);
-      client.emit("readyToStream", message);
-    } catch (JSONException e) {
-      e.printStackTrace();
-    }
-  }
-
-  private VideoCapturer getVideoCapturer() {
-    String frontCameraDeviceName = VideoCapturerAndroid.getNameOfFrontFacingDevice();
-    return VideoCapturerAndroid.create(frontCameraDeviceName);
-  }
-
-  private Peer addPeer(String id, int endPoint) {
-    Peer peer = new Peer(id, endPoint);
-    peers.put(id, peer);
-
-    endPoints[endPoint] = true;
-    return peer;
-  }
-
-  private void removePeer(String id) {
-    Peer peer = peers.get(id);
-    peer.pc.close();
-    peer.pc.dispose();
-    peers.remove(peer.id);
-
-    endPoints[peer.endPoint] = false;
-  }
-}
diff --git a/webrtc-client/.gitignore b/webrtc-client/.gitignore
new file mode 100644
index 0000000..796b96d
--- /dev/null
+++ b/webrtc-client/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/webrtc-client/app.iml b/webrtc-client/app.iml
new file mode 100644
index 0000000..f6c171e
--- /dev/null
+++ b/webrtc-client/app.iml
@@ -0,0 +1,96 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="WebRtcClient" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
+  <component name="FacetManager">
+    <facet type="android-gradle" name="Android-Gradle">
+      <configuration>
+        <option name="GRADLE_PROJECT_PATH" value=":app" />
+      </configuration>
+    </facet>
+    <facet type="android" name="Android">
+      <configuration>
+        <option name="SELECTED_BUILD_VARIANT" value="debug" />
+        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
+        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
+        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
+        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugAndroidTest" />
+        <option name="SOURCE_GEN_TASK_NAME" value="generateDebugSources" />
+        <option name="TEST_SOURCE_GEN_TASK_NAME" value="generateDebugAndroidTestSources" />
+        <option name="ALLOW_USER_CONFIGURATION" value="false" />
+        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
+        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
+        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />
+        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
+      </configuration>
+    </facet>
+  </component>
+  <component name="NewModuleRootManager" inherit-compiler-output="false">
+    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
+    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/androidTest/debug" />
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/androidTest/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/androidTest/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/coverage-instrumented-classes" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex-cache" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jacoco" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/javaResources" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/libs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/ndk" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/pre-dexed" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/proguard" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
+      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
+    </content>
+    <orderEntry type="jdk" jdkName="Android API 22 Platform" jdkType="Android SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" exported="" name="libjingle-8689" level="project" />
+    <orderEntry type="library" exported="" name="Java-WebSocket-1.3.0" level="project" />
+    <orderEntry type="library" exported="" name="support-v4-22.0.0" level="project" />
+    <orderEntry type="library" exported="" name="support-annotations-22.0.0" level="project" />
+    <orderEntry type="library" exported="" name="appcompat-v7-22.0.0" level="project" />
+    <orderEntry type="library" exported="" name="engine.io-client-0.4.1" level="project" />
+    <orderEntry type="library" exported="" name="socket.io-client-0.4.2" level="project" />
+  </component>
+</module>
+
diff --git a/webrtc-client/build.gradle b/webrtc-client/build.gradle
new file mode 100644
index 0000000..009f128
--- /dev/null
+++ b/webrtc-client/build.gradle
@@ -0,0 +1,25 @@
+apply plugin: 'android-library'
+
+android {
+    compileSdkVersion 22
+    buildToolsVersion "22.0.0"
+
+    defaultConfig {
+        minSdkVersion 15
+        targetSdkVersion 22
+        versionCode 1
+        versionName "1.0"
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile 'com.android.support:appcompat-v7:22.0.0'
+    compile 'com.github.nkzawa:socket.io-client:0.4.2'
+    compile 'io.pristine:libjingle:8689@aar'
+}
diff --git a/webrtc-client/proguard-rules.pro b/webrtc-client/proguard-rules.pro
new file mode 100644
index 0000000..57a995b
--- /dev/null
+++ b/webrtc-client/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /home/pierre/Workspace/src/chromium/src/third_party/android_tools/sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/webrtc-client/src/androidTest/java/fr/pchab/webrtcclient/ApplicationTest.java b/webrtc-client/src/androidTest/java/fr/pchab/webrtcclient/ApplicationTest.java
new file mode 100644
index 0000000..f0522e5
--- /dev/null
+++ b/webrtc-client/src/androidTest/java/fr/pchab/webrtcclient/ApplicationTest.java
@@ -0,0 +1,13 @@
+package fr.pchab.webrtcclient;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+/**
+ * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
+ */
+public class ApplicationTest extends ApplicationTestCase<Application> {
+    public ApplicationTest() {
+        super(Application.class);
+    }
+}
\ No newline at end of file
diff --git a/webrtc-client/src/main/AndroidManifest.xml b/webrtc-client/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..892bae9
--- /dev/null
+++ b/webrtc-client/src/main/AndroidManifest.xml
@@ -0,0 +1,16 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="fr.pchab.webrtcclient">
+
+    <uses-feature android:name="android.hardware.camera" />
+    <uses-feature android:name="android.hardware.camera.autofocus" />
+
+    <uses-permission android:name="android.permission.CAMERA" />
+    <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
+    <uses-permission android:name="android.permission.RECORD_AUDIO" />
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.WAKE_LOCK" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
+
+    <application android:allowBackup="true"></application>
+
+</manifest>
diff --git a/src/fr/pchab/AndroidRTC/PeerConnectionParameters.java b/webrtc-client/src/main/java/fr/pchab/webrtcclient/PeerConnectionParameters.java
similarity index 97%
rename from src/fr/pchab/AndroidRTC/PeerConnectionParameters.java
rename to webrtc-client/src/main/java/fr/pchab/webrtcclient/PeerConnectionParameters.java
index f11edb3..8171342 100644
--- a/src/fr/pchab/AndroidRTC/PeerConnectionParameters.java
+++ b/webrtc-client/src/main/java/fr/pchab/webrtcclient/PeerConnectionParameters.java
@@ -1,4 +1,4 @@
-package fr.pchab.AndroidRTC;
+package fr.pchab.webrtcclient;
 
 public class PeerConnectionParameters {
     public final boolean videoCallEnabled;
@@ -30,4 +30,4 @@ public PeerConnectionParameters(
         this.audioCodec = audioCodec;
         this.cpuOveruseDetection = cpuOveruseDetection;
     }
-}
+}
\ No newline at end of file
diff --git a/webrtc-client/src/main/java/fr/pchab/webrtcclient/WebRtcClient.java b/webrtc-client/src/main/java/fr/pchab/webrtcclient/WebRtcClient.java
new file mode 100644
index 0000000..a28d573
--- /dev/null
+++ b/webrtc-client/src/main/java/fr/pchab/webrtcclient/WebRtcClient.java
@@ -0,0 +1,337 @@
+package fr.pchab.webrtcclient;
+
+import java.net.URISyntaxException;
+import java.util.HashMap;
+import java.util.LinkedList;
+
+import com.github.nkzawa.socketio.client.IO;
+import com.github.nkzawa.socketio.client.Socket;
+import com.github.nkzawa.emitter.Emitter;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import android.content.Context;
+import android.opengl.EGLContext;
+import android.util.Log;
+import org.webrtc.*;
+
+public class WebRtcClient {
+    private final static String TAG = WebRtcClient.class.getCanonicalName();
+    private final static int MAX_PEER = 2;
+    private boolean[] endPoints = new boolean[MAX_PEER];
+    private PeerConnectionFactory factory;
+    private HashMap<String, Peer> peers = new HashMap<>();
+    private LinkedList<PeerConnection.IceServer> iceServers = new LinkedList<>();
+    private PeerConnectionParameters pcParams;
+    private MediaConstraints pcConstraints = new MediaConstraints();
+    private MediaStream localMS;
+    private VideoSource videoSource;
+    private RTCListener mListener;
+    private Socket client;
+
+    public interface RTCListener{
+        void onCallReady(String callId);
+
+        void onStatusChanged(String newStatus);
+
+        void onLocalStream(MediaStream localStream);
+
+        void onAddRemoteStream(MediaStream remoteStream, int endPoint);
+
+        void onRemoveRemoteStream(int endPoint);
+    }
+
+    private interface Command{
+        void execute(String peerId, JSONObject payload) throws JSONException;
+    }
+
+    private class CreateOfferCommand implements Command{
+        public void execute(String peerId, JSONObject payload) throws JSONException {
+            Log.d(TAG,"CreateOfferCommand");
+            Peer peer = peers.get(peerId);
+            peer.pc.createOffer(peer, pcConstraints);
+        }
+    }
+
+    private class CreateAnswerCommand implements Command{
+        public void execute(String peerId, JSONObject payload) throws JSONException {
+            Log.d(TAG,"CreateAnswerCommand");
+            Peer peer = peers.get(peerId);
+            SessionDescription sdp = new SessionDescription(
+                    SessionDescription.Type.fromCanonicalForm(payload.getString("type")),
+                    payload.getString("sdp")
+            );
+            peer.pc.setRemoteDescription(peer, sdp);
+            peer.pc.createAnswer(peer, pcConstraints);
+        }
+    }
+
+    private class SetRemoteSDPCommand implements Command{
+        public void execute(String peerId, JSONObject payload) throws JSONException {
+            Log.d(TAG,"SetRemoteSDPCommand");
+            Peer peer = peers.get(peerId);
+            SessionDescription sdp = new SessionDescription(
+                    SessionDescription.Type.fromCanonicalForm(payload.getString("type")),
+                    payload.getString("sdp")
+            );
+            peer.pc.setRemoteDescription(peer, sdp);
+        }
+    }
+
+    private class AddIceCandidateCommand implements Command{
+        public void execute(String peerId, JSONObject payload) throws JSONException {
+            Log.d(TAG,"AddIceCandidateCommand");
+            PeerConnection pc = peers.get(peerId).pc;
+            if (pc.getRemoteDescription() != null) {
+                IceCandidate candidate = new IceCandidate(
+                        payload.getString("id"),
+                        payload.getInt("label"),
+                        payload.getString("candidate")
+                );
+                pc.addIceCandidate(candidate);
+            }
+        }
+    }
+
+    public void sendMessage(String to, String type, JSONObject payload) throws JSONException {
+        JSONObject message = new JSONObject();
+        message.put("to", to);
+        message.put("type", type);
+        message.put("payload", payload);
+        client.emit("message", message);
+    }
+
+    private class MessageHandler {
+        private HashMap<String, Command> commandMap;
+
+        private MessageHandler() {
+            this.commandMap = new HashMap<>();
+            commandMap.put("init", new CreateOfferCommand());
+            commandMap.put("offer", new CreateAnswerCommand());
+            commandMap.put("answer", new SetRemoteSDPCommand());
+            commandMap.put("candidate", new AddIceCandidateCommand());
+        }
+
+        public Emitter.Listener onMessage = new Emitter.Listener() {
+            @Override
+            public void call(Object... args) {
+                JSONObject data = (JSONObject) args[0];
+                try {
+                    String from = data.getString("from");
+                    String type = data.getString("type");
+                    JSONObject payload = null;
+                    if(!type.equals("init")) {
+                        payload = data.getJSONObject("payload");
+                    }
+                    // if peer is unknown, try to add him
+                    if(!peers.containsKey(from)) {
+                        // if MAX_PEER is reach, ignore the call
+                        int endPoint = findEndPoint();
+                        if(endPoint != MAX_PEER) {
+                            Peer peer = addPeer(from, endPoint);
+                            peer.pc.addStream(localMS);
+                            commandMap.get(type).execute(from, payload);
+                        }
+                    } else {
+                        commandMap.get(type).execute(from, payload);
+                    }
+                } catch (JSONException e) {
+                    e.printStackTrace();
+                }
+            }
+        };
+
+        public Emitter.Listener onId = new Emitter.Listener() {
+            @Override
+            public void call(Object... args) {
+                String id = (String) args[0];
+                mListener.onCallReady(id);
+            }
+        };
+    }
+
+    private class Peer implements SdpObserver, PeerConnection.Observer{
+        private PeerConnection pc;
+        private String id;
+        private int endPoint;
+
+        @Override
+        public void onCreateSuccess(final SessionDescription sdp) {
+            try {
+                JSONObject payload = new JSONObject();
+                payload.put("type", sdp.type.canonicalForm());
+                payload.put("sdp", sdp.description);
+                sendMessage(id, sdp.type.canonicalForm(), payload);
+                pc.setLocalDescription(Peer.this, sdp);
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+        }
+
+        @Override
+        public void onSetSuccess() {}
+
+        @Override
+        public void onCreateFailure(String s) {}
+
+        @Override
+        public void onSetFailure(String s) {}
+
+        @Override
+        public void onSignalingChange(PeerConnection.SignalingState signalingState) {}
+
+        @Override
+        public void onIceConnectionChange(PeerConnection.IceConnectionState iceConnectionState) {
+            if(iceConnectionState == PeerConnection.IceConnectionState.DISCONNECTED) {
+                mListener.onStatusChanged("DISCONNECTED");
+                removePeer(id);
+            }
+        }
+
+        @Override
+        public void onIceGatheringChange(PeerConnection.IceGatheringState iceGatheringState) {}
+
+        @Override
+        public void onIceCandidate(final IceCandidate candidate) {
+            try {
+                JSONObject payload = new JSONObject();
+                payload.put("label", candidate.sdpMLineIndex);
+                payload.put("id", candidate.sdpMid);
+                payload.put("candidate", candidate.sdp);
+                sendMessage(id, "candidate", payload);
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+        }
+
+        @Override
+        public void onAddStream(MediaStream mediaStream) {
+            Log.d(TAG,"onAddStream "+mediaStream.label());
+            // remote streams are displayed from 1 to MAX_PEER (0 is localStream)
+            mListener.onAddRemoteStream(mediaStream, endPoint+1);
+        }
+
+        @Override
+        public void onRemoveStream(MediaStream mediaStream) {
+            Log.d(TAG,"onRemoveStream "+mediaStream.label());
+            removePeer(id);
+        }
+
+        @Override
+        public void onDataChannel(DataChannel dataChannel) {}
+
+        @Override
+        public void onRenegotiationNeeded() {
+
+        }
+
+        public Peer(String id, int endPoint) {
+            Log.d(TAG,"new Peer: "+id + " " + endPoint);
+            this.pc = factory.createPeerConnection(iceServers, pcConstraints, this);
+            this.id = id;
+            this.endPoint = endPoint;
+
+            pc.addStream(localMS); //, new MediaConstraints()
+
+            mListener.onStatusChanged("CONNECTING");
+        }
+    }
+
+    private Peer addPeer(String id, int endPoint) {
+        Peer peer = new Peer(id, endPoint);
+        peers.put(id, peer);
+
+        endPoints[endPoint] = true;
+        return peer;
+    }
+
+    private void removePeer(String id) {
+        Peer peer = peers.get(id);
+        mListener.onRemoveRemoteStream(peer.endPoint);
+        peers.remove(peer.id);
+        endPoints[peer.endPoint] = false;
+    }
+
+    public WebRtcClient(RTCListener listener, String host, PeerConnectionParameters params, EGLContext mEGLcontext) {
+        mListener = listener;
+        pcParams = params;
+        PeerConnectionFactory.initializeAndroidGlobals(listener, true, true,
+                params.videoCodecHwAcceleration, mEGLcontext);
+        factory = new PeerConnectionFactory();
+        MessageHandler messageHandler = new MessageHandler();
+
+        try {
+            client = IO.socket(host);
+        } catch (URISyntaxException e) {
+            e.printStackTrace();
+        }
+        client.on("id", messageHandler.onId);
+        client.on("message", messageHandler.onMessage);
+        client.connect();
+
+        iceServers.add(new PeerConnection.IceServer("stun:23.21.150.121"));
+        iceServers.add(new PeerConnection.IceServer("stun:stun.l.google.com:19302"));
+
+        pcConstraints.mandatory.add(new MediaConstraints.KeyValuePair("OfferToReceiveAudio", "true"));
+        pcConstraints.mandatory.add(new MediaConstraints.KeyValuePair("OfferToReceiveVideo", "true"));
+        pcConstraints.optional.add(new MediaConstraints.KeyValuePair("DtlsSrtpKeyAgreement", "true"));
+    }
+
+    public void onPause() {
+        if(videoSource != null) videoSource.stop();
+    }
+
+    public void onResume() {
+        if(videoSource != null) videoSource.restart();
+    }
+
+    public void onDestroy() {
+        for (Peer peer : peers.values()) {
+            peer.pc.dispose();
+        }
+        videoSource.dispose();
+        factory.dispose();
+        client.disconnect();
+        client.close();
+    }
+
+    private int findEndPoint() {
+        for(int i = 0; i < MAX_PEER; i++) if (!endPoints[i]) return i;
+        return MAX_PEER;
+    }
+
+    public void start(String name){
+        setCamera();
+        try {
+            JSONObject message = new JSONObject();
+            message.put("name", name);
+            client.emit("readyToStream", message);
+        } catch (JSONException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private void setCamera(){
+        localMS = factory.createLocalMediaStream("ARDAMS");
+        if(pcParams.videoCallEnabled){
+            MediaConstraints videoConstraints = new MediaConstraints();
+            videoConstraints.mandatory.add(new MediaConstraints.KeyValuePair("maxHeight", Integer.toString(pcParams.videoHeight)));
+            videoConstraints.mandatory.add(new MediaConstraints.KeyValuePair("maxWidth", Integer.toString(pcParams.videoWidth)));
+            videoConstraints.mandatory.add(new MediaConstraints.KeyValuePair("maxFrameRate", Integer.toString(pcParams.videoFps)));
+            videoConstraints.mandatory.add(new MediaConstraints.KeyValuePair("minFrameRate", Integer.toString(pcParams.videoFps)));
+
+            videoSource = factory.createVideoSource(getVideoCapturer(), videoConstraints);
+            localMS.addTrack(factory.createVideoTrack("ARDAMSv0", videoSource));
+        }
+
+        AudioSource audioSource = factory.createAudioSource(new MediaConstraints());
+        localMS.addTrack(factory.createAudioTrack("ARDAMSa0", audioSource));
+
+        mListener.onLocalStream(localMS);
+    }
+
+    private VideoCapturer getVideoCapturer() {
+        String frontCameraDeviceName = VideoCapturerAndroid.getNameOfFrontFacingDevice();
+        return VideoCapturerAndroid.create(frontCameraDeviceName);
+    }
+}
\ No newline at end of file
diff --git a/webrtc-client/webrtc-client.iml b/webrtc-client/webrtc-client.iml
new file mode 100644
index 0000000..2c28095
--- /dev/null
+++ b/webrtc-client/webrtc-client.iml
@@ -0,0 +1,98 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="AndroidRTC" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
+  <component name="FacetManager">
+    <facet type="android-gradle" name="Android-Gradle">
+      <configuration>
+        <option name="GRADLE_PROJECT_PATH" value=":webrtc-client" />
+      </configuration>
+    </facet>
+    <facet type="android" name="Android">
+      <configuration>
+        <option name="SELECTED_BUILD_VARIANT" value="debug" />
+        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
+        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
+        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
+        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugAndroidTest" />
+        <option name="SOURCE_GEN_TASK_NAME" value="generateDebugSources" />
+        <option name="TEST_SOURCE_GEN_TASK_NAME" value="generateDebugAndroidTestSources" />
+        <option name="ALLOW_USER_CONFIGURATION" value="false" />
+        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
+        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
+        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />
+        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
+        <option name="LIBRARY_PROJECT" value="true" />
+      </configuration>
+    </facet>
+  </component>
+  <component name="NewModuleRootManager" inherit-compiler-output="false">
+    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
+    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/androidTest/debug" />
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/androidTest/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/androidTest/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/coverage-instrumented-classes" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex-cache" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jacoco" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/javaResources" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/libs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/ndk" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/pre-dexed" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/proguard" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
+      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
+    </content>
+    <orderEntry type="jdk" jdkName="Android API 22 Platform" jdkType="Android SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" exported="" name="libjingle-8689" level="project" />
+    <orderEntry type="library" exported="" name="Java-WebSocket-1.3.0" level="project" />
+    <orderEntry type="library" exported="" name="support-v4-22.0.0" level="project" />
+    <orderEntry type="library" exported="" name="support-annotations-22.0.0" level="project" />
+    <orderEntry type="library" exported="" name="appcompat-v7-22.0.0" level="project" />
+    <orderEntry type="library" exported="" name="engine.io-client-0.4.1" level="project" />
+    <orderEntry type="library" exported="" name="socket.io-client-0.4.2" level="project" />
+  </component>
+</module>
+
