diff --git a/res/layout/activity_call.xml b/res/layout/activity_call.xml
new file mode 100644
index 0000000..126171f
--- /dev/null
+++ b/res/layout/activity_call.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" >
+
+    <LinearLayout
+        android:id="@+id/video_view_container"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="horizontal" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_gravity="bottom"
+        android:orientation="horizontal" >
+
+        <EditText
+            android:id="@+id/edit_text"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1" />
+
+        <Button
+            android:id="@+id/call_btn"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="call" />
+    </LinearLayout>
+
+</FrameLayout>
\ No newline at end of file
diff --git a/res/values/strings.xml b/res/values/strings.xml
index c5e2eca..890a17d 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
     <string name="app_name">AndroidRTC</string>
-    <string name="host">172.20.102.34</string>
+    <string name="host">192.168.0.100</string>
     <string name="port">3000</string>
 </resources>
\ No newline at end of file
diff --git a/src/fr/pchab/AndroidRTC/RTCActivity.java b/src/fr/pchab/AndroidRTC/RTCActivity.java
index c55aee4..5a2f841 100644
--- a/src/fr/pchab/AndroidRTC/RTCActivity.java
+++ b/src/fr/pchab/AndroidRTC/RTCActivity.java
@@ -1,13 +1,22 @@
+
 package fr.pchab.AndroidRTC;
 
 import android.app.Activity;
+import android.content.Context;
 import android.content.Intent;
 import android.content.pm.ActivityInfo;
 import android.content.res.Configuration;
 import android.graphics.Point;
 import android.os.Bundle;
+import android.view.MotionEvent;
+import android.view.View;
 import android.view.Window;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.LinearLayout;
 import android.widget.Toast;
+
 import org.json.JSONException;
 import org.webrtc.MediaStream;
 import org.webrtc.PeerConnectionFactory;
@@ -15,145 +24,170 @@
 
 import java.util.List;
 
-public class RTCActivity extends Activity implements WebRtcClient.RTCListener{
-  private final static int VIDEO_CALL_SENT = 666;
-  private VideoStreamsView vsv;
-  private WebRtcClient client;
-  private String mSocketAddress;
-  private String callerId;
+public class RTCActivity extends Activity implements WebRtcClient.RTCListener {
+    private final static int VIDEO_CALL_SENT = 666;
+    private VideoStreamsView vsv;
+    private WebRtcClient client;
+    private String mSocketAddress;
+    private String callerId;
+    private LinearLayout mVideoViewContainer;
+    private EditText mEditText;
+    private Button mCallBtn;
 
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        setContentView(R.layout.activity_call);
+
+        mSocketAddress = "http://" + getResources().getString(R.string.host);
+        mSocketAddress += (":" + getResources().getString(R.string.port) + "/");
+
+        PeerConnectionFactory.initializeAndroidGlobals(this);
+
+        // Camera display view
+        Point displaySize = new Point();
+        getWindowManager().getDefaultDisplay().getSize(displaySize);
+
+        vsv = new VideoStreamsView(this, displaySize);
+        client = new WebRtcClient(this, mSocketAddress);
+
+        // view init
+        mVideoViewContainer = (LinearLayout) findViewById(R.id.video_view_container);
+        mVideoViewContainer.addView(vsv);
+
+        mEditText = (EditText) findViewById(R.id.edit_text);
+        mEditText.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+
+        mCallBtn = (Button) findViewById(R.id.call_btn);
+        mCallBtn.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                client.call(mEditText.getText().toString());
+            }
+        });
+
+        final Intent intent = getIntent();
+        final String action = intent.getAction();
+
+        if (Intent.ACTION_VIEW.equals(action)) {
+            final List<String> segments = intent.getData().getPathSegments();
+            callerId = segments.get(0);
+        }
+    }
 
-  @Override
-  public void onCreate(Bundle savedInstanceState) {
-    super.onCreate(savedInstanceState);
-    requestWindowFeature(Window.FEATURE_NO_TITLE);
-    mSocketAddress = "http://" + getResources().getString(R.string.host);
-    mSocketAddress += (":"+getResources().getString(R.string.port)+"/");
+    public void onConfigurationChanged(Configuration newConfig)
+    {
+        super.onConfigurationChanged(newConfig);
+        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+    }
 
-    PeerConnectionFactory.initializeAndroidGlobals(this);
+    @Override
+    public void onPause() {
+        super.onPause();
+        vsv.onPause();
+    }
 
-    // Camera display view
-    Point displaySize = new Point();
-    getWindowManager().getDefaultDisplay().getSize(displaySize);
-    vsv = new VideoStreamsView(this, displaySize);
-    client = new WebRtcClient(this, mSocketAddress);
+    @Override
+    public void onResume() {
+        super.onResume();
+        vsv.onResume();
+    }
 
-    final Intent intent = getIntent();
-    final String action = intent.getAction();
+    @Override
+    public void onCallReady(String callId) {
+        if (callerId != null) {
+            try {
+                answer(callerId);
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+        } else {
+            call(callId);
+        }
+    }
 
-    if (Intent.ACTION_VIEW.equals(action)) {
-      final List<String> segments = intent.getData().getPathSegments();
-      callerId = segments.get(0);
+    public void answer(String callerId) throws JSONException {
+        client.sendMessage(callerId, "init", null);
+        startCam();
     }
-  }
-
-  public void onConfigurationChanged(Configuration newConfig)
-  {
-    super.onConfigurationChanged(newConfig);
-    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-  }
-
-  @Override
-  public void onPause() {
-    super.onPause();
-    vsv.onPause();
-  }
-
-  @Override
-  public void onResume() {
-    super.onResume();
-    vsv.onResume();
-  }
-
-  @Override
-  public void onCallReady(String callId) {
-    if(callerId != null) {
-      try {
-        answer(callerId);
-      } catch (JSONException e) {
-        e.printStackTrace();
-      }
-    } else {
-      call(callId);
+
+    public void call(String callId) {
+        Intent msg = new Intent(Intent.ACTION_SEND);
+        msg.putExtra(Intent.EXTRA_TEXT, mSocketAddress + callId);
+        msg.setType("text/plain");
+        startActivityForResult(Intent.createChooser(msg, "Call someone :"), VIDEO_CALL_SENT);
     }
-  }
-
-  public void answer(String callerId) throws JSONException {
-    client.sendMessage(callerId, "init", null);
-    startCam();
-  }
-
-  public void call(String callId) {
-    Intent msg = new Intent(Intent.ACTION_SEND);
-    msg.putExtra(Intent.EXTRA_TEXT, mSocketAddress + callId);
-    msg.setType("text/plain");
-    startActivityForResult(Intent.createChooser(msg, "Call someone :"), VIDEO_CALL_SENT);
-  }
-
-  @Override
-  protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-    if(requestCode == VIDEO_CALL_SENT) {
-      startCam();
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (requestCode == VIDEO_CALL_SENT) {
+            startCam();
+        }
     }
-  }
-
-  public void startCam() {
-    setContentView(vsv);
-    // Camera settings
-    client.setCamera("front", "640", "480");
-    client.start("android_test", true);
-  }
-
-  @Override
-  public void onStatusChanged(final String newStatus) {
-    runOnUiThread(new Runnable() {
-      @Override
-      public void run() {
-        Toast.makeText(getApplicationContext(), newStatus, Toast.LENGTH_SHORT).show();
-      }
-    });
-  }
-
-  @Override
-  public void onLocalStream(MediaStream localStream) {
-    localStream.videoTracks.get(0).addRenderer(new VideoRenderer(new VideoCallbacks(vsv, 0)));
-  }
-
-  @Override
-  public void onAddRemoteStream(MediaStream remoteStream, int endPoint) {
-    remoteStream.videoTracks.get(0).addRenderer(new VideoRenderer(new VideoCallbacks(vsv, endPoint)));
-    vsv.shouldDraw[endPoint] = true;
-  }
-
-  @Override
-  public void onRemoveRemoteStream(MediaStream remoteStream, int endPoint) {
-    remoteStream.videoTracks.get(0).dispose();
-    vsv.shouldDraw[endPoint] = false;
-  }
-
-  // Implementation detail: bridge the VideoRenderer.Callbacks interface to the
-  // VideoStreamsView implementation.
-  private class VideoCallbacks implements VideoRenderer.Callbacks {
-    private final VideoStreamsView view;
-    private final int stream;
-
-    public VideoCallbacks(VideoStreamsView view, int stream) {
-      this.view = view;
-      this.stream = stream;
+
+    public void startCam() {
+        // setContentView(vsv);
+        // Camera settings
+        client.setCamera("front", "640", "480");
+        client.start("android_test", true);
     }
 
     @Override
-    public void setSize(final int width, final int height) {
-      view.queueEvent(new Runnable() {
-        public void run() {
-          view.setSize(stream, width, height);
-        }
-      });
+    public void onStatusChanged(final String newStatus) {
+        runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                Toast.makeText(getApplicationContext(), newStatus, Toast.LENGTH_SHORT).show();
+            }
+        });
+    }
+
+    @Override
+    public void onLocalStream(MediaStream localStream) {
+        localStream.videoTracks.get(0).addRenderer(new VideoRenderer(new VideoCallbacks(vsv, 0)));
+    }
+
+    @Override
+    public void onAddRemoteStream(MediaStream remoteStream, int endPoint) {
+        remoteStream.videoTracks.get(0).addRenderer(new VideoRenderer(new VideoCallbacks(vsv, endPoint)));
+        vsv.shouldDraw[endPoint] = true;
     }
 
     @Override
-    public void renderFrame(VideoRenderer.I420Frame frame) {
-      view.queueFrame(stream, frame);
+    public void onRemoveRemoteStream(MediaStream remoteStream, int endPoint) {
+        remoteStream.videoTracks.get(0).dispose();
+        vsv.shouldDraw[endPoint] = false;
+    }
+
+    // Implementation detail: bridge the VideoRenderer.Callbacks interface to the
+    // VideoStreamsView implementation.
+    private class VideoCallbacks implements VideoRenderer.Callbacks {
+        private final VideoStreamsView view;
+        private final int stream;
+
+        public VideoCallbacks(VideoStreamsView view, int stream) {
+            this.view = view;
+            this.stream = stream;
+        }
+
+        @Override
+        public void setSize(final int width, final int height) {
+            view.queueEvent(new Runnable() {
+                public void run() {
+                    view.setSize(stream, width, height);
+                }
+            });
+        }
+
+        @Override
+        public void renderFrame(VideoRenderer.I420Frame frame) {
+            view.queueFrame(stream, frame);
+        }
     }
-  }
 }
diff --git a/src/fr/pchab/AndroidRTC/WebRtcClient.java b/src/fr/pchab/AndroidRTC/WebRtcClient.java
index 3cc4ef8..0c3936c 100644
--- a/src/fr/pchab/AndroidRTC/WebRtcClient.java
+++ b/src/fr/pchab/AndroidRTC/WebRtcClient.java
@@ -1,3 +1,4 @@
+
 package fr.pchab.AndroidRTC;
 
 import java.util.HashMap;
@@ -26,313 +27,339 @@
 import com.koushikdutta.async.http.socketio.SocketIOClient;
 
 class WebRtcClient {
-  private final static int MAX_PEER = 2;
-  private boolean[] endPoints = new boolean[MAX_PEER];
-  private PeerConnectionFactory factory;
-  private HashMap<String, Peer> peers = new HashMap<String, Peer>();
-  private LinkedList<PeerConnection.IceServer> iceServers = new LinkedList<PeerConnection.IceServer>();
-  private MediaConstraints pcConstraints = new MediaConstraints();
-  private MediaStream lMS;
-  private RTCListener mListener;
-  private SocketIOClient client;
-  private final MessageHandler messageHandler = new MessageHandler();
-  private final static String TAG = WebRtcClient.class.getCanonicalName();
-
-  public interface RTCListener{
-    void onCallReady(String callId);
-
-    void onStatusChanged(String newStatus);
-
-    void onLocalStream(MediaStream localStream);
-
-    void onAddRemoteStream(MediaStream remoteStream, int endPoint);
-
-    void onRemoveRemoteStream(MediaStream remoteStream, int endPoint);
-  }
-
-  private interface Command{
-    void execute(String peerId, JSONObject payload) throws JSONException;
-  }
-
-  private class CreateOfferCommand implements Command{
-    public void execute(String peerId, JSONObject payload) throws JSONException {
-    	Log.d(TAG,"CreateOfferCommand");
-      Peer peer = peers.get(peerId);
-      peer.pc.createOffer(peer, pcConstraints);
+    private final static int MAX_PEER = 2;
+    private boolean[] endPoints = new boolean[MAX_PEER];
+    private PeerConnectionFactory factory;
+    private HashMap<String, Peer> peers = new HashMap<String, Peer>();
+    private LinkedList<PeerConnection.IceServer> iceServers = new LinkedList<PeerConnection.IceServer>();
+    private MediaConstraints pcConstraints = new MediaConstraints();
+    private MediaStream lMS;
+    private RTCListener mListener;
+    private SocketIOClient client;
+    private final MessageHandler messageHandler = new MessageHandler();
+    private final static String TAG = WebRtcClient.class.getCanonicalName();
+
+    public interface RTCListener {
+        void onCallReady(String callId);
+
+        void onStatusChanged(String newStatus);
+
+        void onLocalStream(MediaStream localStream);
+
+        void onAddRemoteStream(MediaStream remoteStream, int endPoint);
+
+        void onRemoveRemoteStream(MediaStream remoteStream, int endPoint);
     }
-  }
-
-  private class CreateAnswerCommand implements Command{
-    public void execute(String peerId, JSONObject payload) throws JSONException {
-    	Log.d(TAG,"CreateAnswerCommand");
-      Peer peer = peers.get(peerId);
-      SessionDescription sdp = new SessionDescription(
-                                                      SessionDescription.Type.fromCanonicalForm(payload.getString("type")),
-                                                      payload.getString("sdp")
-                                                      );
-      peer.pc.setRemoteDescription(peer, sdp);
-      peer.pc.createAnswer(peer, pcConstraints);
+
+    private interface Command {
+        void execute(String peerId, JSONObject payload) throws JSONException;
     }
-  }
-
-  private class SetRemoteSDPCommand implements Command{
-    public void execute(String peerId, JSONObject payload) throws JSONException {
-    	Log.d(TAG,"SetRemoteSDPCommand");
-      Peer peer = peers.get(peerId);
-      SessionDescription sdp = new SessionDescription(
-                                                      SessionDescription.Type.fromCanonicalForm(payload.getString("type")),
-                                                      payload.getString("sdp")
-                                                      );
-      peer.pc.setRemoteDescription(peer, sdp);
+
+    private class CreateOfferCommand implements Command {
+        public void execute(String peerId, JSONObject payload) throws JSONException {
+            Log.d(TAG, "CreateOfferCommand");
+            Peer peer = peers.get(peerId);
+            peer.pc.createOffer(peer, pcConstraints);
+        }
     }
-  }
-
-  private class AddIceCandidateCommand implements Command{
-    public void execute(String peerId, JSONObject payload) throws JSONException {
-    	Log.d(TAG,"AddIceCandidateCommand");
-      PeerConnection pc = peers.get(peerId).pc;
-      if (pc.getRemoteDescription() != null) {
-        IceCandidate candidate = new IceCandidate(
-                                                  payload.getString("id"),
-                                                  payload.getInt("label"),
-                                                  payload.getString("candidate")
-                                                  );
-        pc.addIceCandidate(candidate);
-      }
+
+    private class CreateAnswerCommand implements Command {
+        public void execute(String peerId, JSONObject payload) throws JSONException {
+            Log.d(TAG, "CreateAnswerCommand");
+            Peer peer = peers.get(peerId);
+            SessionDescription sdp = new SessionDescription(
+                    SessionDescription.Type.fromCanonicalForm(payload.getString("type")),
+                    payload.getString("sdp")
+                    );
+            peer.pc.setRemoteDescription(peer, sdp);
+            peer.pc.createAnswer(peer, pcConstraints);
+        }
     }
-  }
-
-  public void sendMessage(String to, String type, JSONObject payload) throws JSONException {
-    JSONObject message = new JSONObject();
-    message.put("to", to);
-    message.put("type", type);
-    message.put("payload", payload);
-    client.emit("message", new JSONArray().put(message));
-  }
-
-  private class MessageHandler implements EventCallback {
-    private HashMap<String, Command> commandMap;
-
-    public MessageHandler() {
-      this.commandMap = new HashMap<String, Command>();
-      commandMap.put("init", new CreateOfferCommand());
-      commandMap.put("offer", new CreateAnswerCommand());
-      commandMap.put("answer", new SetRemoteSDPCommand());
-      commandMap.put("candidate", new AddIceCandidateCommand());
+
+    private class SetRemoteSDPCommand implements Command {
+        public void execute(String peerId, JSONObject payload) throws JSONException {
+            Log.d(TAG, "SetRemoteSDPCommand");
+            Peer peer = peers.get(peerId);
+            SessionDescription sdp = new SessionDescription(
+                    SessionDescription.Type.fromCanonicalForm(payload.getString("type")),
+                    payload.getString("sdp")
+                    );
+            peer.pc.setRemoteDescription(peer, sdp);
+        }
     }
 
-    @Override
-    public void onEvent(String s, JSONArray jsonArray, Acknowledge acknowledge) {
-      try {
-    	  Log.d(TAG,"MessageHandler.onEvent() "+ (s == null ? "nil" : s));
-        if(s.equals("id")) {
-          mListener.onCallReady(jsonArray.getString(0));
-        } else {
-          JSONObject json = jsonArray.getJSONObject(0);
-          String from = json.getString("from");
-          String type = json.getString("type");
-          JSONObject payload = null;
-          if(!type.equals("init")) {
-            payload = json.getJSONObject("payload");
-          }
-
-          // if peer is unknown, try to add him
-          if(!peers.containsKey(from)) {
-            // if MAX_PEER is reach, ignore the call
-            int endPoint = findEndPoint();
-            if(endPoint != MAX_PEER) {
-              addPeer(from, endPoint);
-
-              commandMap.get(type).execute(from, payload);
+    private class AddIceCandidateCommand implements Command {
+        public void execute(String peerId, JSONObject payload) throws JSONException {
+            Log.d(TAG, "AddIceCandidateCommand");
+            PeerConnection pc = peers.get(peerId).pc;
+            if (pc.getRemoteDescription() != null) {
+                IceCandidate candidate = new IceCandidate(
+                        payload.getString("id"),
+                        payload.getInt("label"),
+                        payload.getString("candidate")
+                        );
+                pc.addIceCandidate(candidate);
             }
-          } else {
-            commandMap.get(type).execute(from, payload);
-          }
         }
-      } catch (JSONException e) {
-        e.printStackTrace();
-      }
     }
-  }
-
-  private class Peer implements SdpObserver, PeerConnection.Observer{
-    private PeerConnection pc;
-    private String id;
-    private int endPoint;
-
-    @Override
-    public void onCreateSuccess(final SessionDescription sdp) {
-      try {
-        JSONObject payload = new JSONObject();
-        payload.put("type", sdp.type.canonicalForm());
-        payload.put("sdp", sdp.description);
-        sendMessage(id, sdp.type.canonicalForm(), payload);
-        pc.setLocalDescription(Peer.this, sdp);
-      } catch (JSONException e) {
-        e.printStackTrace();
-      }
+
+    public void sendMessage(String to, String type, JSONObject payload) throws JSONException {
+        Log.d("yoy", "send message to:" + to + ", type:" + type + ", payload:" + payload.toString());
+        JSONObject message = new JSONObject();
+        message.put("to", to);
+        message.put("type", type);
+        message.put("payload", payload);
+        client.emit("message", new JSONArray().put(message));
     }
 
-    @Override
-    public void onSetSuccess() {}
+    private class MessageHandler implements EventCallback {
+        private HashMap<String, Command> commandMap;
+
+        public MessageHandler() {
+            this.commandMap = new HashMap<String, Command>();
+            commandMap.put("init", new CreateOfferCommand());
+            commandMap.put("offer", new CreateAnswerCommand());
+            commandMap.put("answer", new SetRemoteSDPCommand());
+            commandMap.put("candidate", new AddIceCandidateCommand());
+        }
 
-    @Override
-    public void onCreateFailure(String s) {}
+        @Override
+        public void onEvent(String s, JSONArray jsonArray, Acknowledge acknowledge) {
+            Log.d("yoy", "receive message s:" + s + ", payload:" + jsonArray.toString());
+            try {
+                Log.d(TAG, "MessageHandler.onEvent() " + (s == null ? "nil" : s));
+                if (s.equals("id")) {
+                    mListener.onCallReady(jsonArray.getString(0));
+                } else {
+                    JSONObject json = jsonArray.getJSONObject(0);
+                    String from = json.getString("from");
+                    String type = json.getString("type");
+                    JSONObject payload = null;
+                    if (!type.equals("init")) {
+                        payload = json.getJSONObject("payload");
+                    }
+
+                    // if peer is unknown, try to add him
+                    if (!peers.containsKey(from)) {
+                        // if MAX_PEER is reach, ignore the call
+                        int endPoint = findEndPoint();
+                        if (endPoint != MAX_PEER) {
+                            addPeer(from, endPoint);
+
+                            commandMap.get(type).execute(from, payload);
+                        }
+                    } else {
+                        commandMap.get(type).execute(from, payload);
+                    }
+                }
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+        }
+    }
 
-    @Override
-    public void onSetFailure(String s) {}
+    private class Peer implements SdpObserver, PeerConnection.Observer {
+        private PeerConnection pc;
+        private String id;
+        private int endPoint;
+
+        @Override
+        public void onCreateSuccess(final SessionDescription sdp) {
+            try {
+                JSONObject payload = new JSONObject();
+                payload.put("type", sdp.type.canonicalForm());
+                payload.put("sdp", sdp.description);
+                sendMessage(id, sdp.type.canonicalForm(), payload);
+                pc.setLocalDescription(Peer.this, sdp);
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+        }
 
-    @Override
-    public void onSignalingChange(PeerConnection.SignalingState signalingState) {}
+        @Override
+        public void onSetSuccess() {
+        }
 
-    @Override
-    public void onIceConnectionChange(PeerConnection.IceConnectionState iceConnectionState) {
-      if(iceConnectionState == PeerConnection.IceConnectionState.DISCONNECTED) {
-        removePeer(id);
-        mListener.onStatusChanged("DISCONNECTED");
-      }
-    }
+        @Override
+        public void onCreateFailure(String s) {
+        }
 
-    @Override
-    public void onIceGatheringChange(PeerConnection.IceGatheringState iceGatheringState) {}
-
-    @Override
-    public void onIceCandidate(final IceCandidate candidate) {
-      try {
-        JSONObject payload = new JSONObject();
-        payload.put("label", candidate.sdpMLineIndex);
-        payload.put("id", candidate.sdpMid);
-        payload.put("candidate", candidate.sdp);
-        sendMessage(id, "candidate", payload);
-      } catch (JSONException e) {
-        e.printStackTrace();
-      }
-    }
+        @Override
+        public void onSetFailure(String s) {
+        }
 
-    @Override
-    public void onError() {}
+        @Override
+        public void onSignalingChange(PeerConnection.SignalingState signalingState) {
+        }
 
-    @Override
-    public void onAddStream(MediaStream mediaStream) {
-    	Log.d(TAG,"onAddStream "+mediaStream.label());
+        @Override
+        public void onIceConnectionChange(PeerConnection.IceConnectionState iceConnectionState) {
+            if (iceConnectionState == PeerConnection.IceConnectionState.DISCONNECTED) {
+                removePeer(id);
+                mListener.onStatusChanged("DISCONNECTED");
+            }
+        }
 
-      // remote streams are displayed from 1 to MAX_PEER (0 is localStream)
-      mListener.onAddRemoteStream(mediaStream, endPoint+1);
-    }
+        @Override
+        public void onIceGatheringChange(PeerConnection.IceGatheringState iceGatheringState) {
+        }
+
+        @Override
+        public void onIceCandidate(final IceCandidate candidate) {
+            try {
+                JSONObject payload = new JSONObject();
+                payload.put("label", candidate.sdpMLineIndex);
+                payload.put("id", candidate.sdpMid);
+                payload.put("candidate", candidate.sdp);
+                sendMessage(id, "candidate", payload);
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+        }
+
+        @Override
+        public void onError() {
+        }
+
+        @Override
+        public void onAddStream(MediaStream mediaStream) {
+            Log.d(TAG, "onAddStream " + mediaStream.label());
+
+            // remote streams are displayed from 1 to MAX_PEER (0 is localStream)
+            mListener.onAddRemoteStream(mediaStream, endPoint + 1);
+        }
+
+        @Override
+        public void onRemoveStream(MediaStream mediaStream) {
+            mListener.onRemoveRemoteStream(mediaStream, endPoint);
+
+            removePeer(id);
+        }
+
+        @Override
+        public void onDataChannel(DataChannel dataChannel) {
+        }
+
+        public Peer(String id, int endPoint) {
+            Log.d(TAG, "new Peer: " + id + " " + endPoint);
+            this.pc = factory.createPeerConnection(iceServers, pcConstraints, this);
+            this.id = id;
+            this.endPoint = endPoint;
 
-    @Override
-    public void onRemoveStream(MediaStream mediaStream) {
-      mListener.onRemoveRemoteStream(mediaStream, endPoint);
+            pc.addStream(lMS, new MediaConstraints());
 
-      removePeer(id);
+            mListener.onStatusChanged("CONNECTING");
+        }
     }
 
-    @Override
-    public void onDataChannel(DataChannel dataChannel) {}
+    public WebRtcClient(RTCListener listener, String host) {
+        mListener = listener;
+        factory = new PeerConnectionFactory();
+
+        SocketIOClient.connect(host, new ConnectCallback() {
 
-    public Peer(String id, int endPoint) {
-    	Log.d(TAG,"new Peer: "+id + " " + endPoint);
-      this.pc = factory.createPeerConnection(iceServers, pcConstraints, this);
-      this.id = id;
-      this.endPoint = endPoint;
+            @Override
+            public void onConnectCompleted(Exception ex, SocketIOClient socket) {
+                if (ex != null) {
+                    Log.e(TAG, "WebRtcClient connect failed: " + ex.getMessage());
+                    return;
+                }
+                Log.d(TAG, "WebRtcClient connected.");
+                client = socket;
+
+                // specify which events you are interested in receiving
+                client.addListener("id", messageHandler);
+                client.addListener("message", messageHandler);
+            }
+        }, new Handler());
 
-      pc.addStream(lMS, new MediaConstraints());
+        iceServers.add(new PeerConnection.IceServer("stun:23.21.150.121"));
+        iceServers.add(new PeerConnection.IceServer("stun:stun.l.google.com:19302"));
 
-      mListener.onStatusChanged("CONNECTING");
+        pcConstraints.mandatory.add(new MediaConstraints.KeyValuePair("OfferToReceiveAudio", "true"));
+        pcConstraints.mandatory.add(new MediaConstraints.KeyValuePair("OfferToReceiveVideo", "true"));
     }
-  }
 
-  public WebRtcClient(RTCListener listener, String host) {
-    mListener = listener;
-    factory = new PeerConnectionFactory();
+    public void setCamera(String cameraFacing, String height, String width) {
+        MediaConstraints videoConstraints = new MediaConstraints();
+        videoConstraints.mandatory.add(new MediaConstraints.KeyValuePair("maxHeight", height));
+        videoConstraints.mandatory.add(new MediaConstraints.KeyValuePair("maxWidth", width));
 
-    SocketIOClient.connect(host, new ConnectCallback() {
+        VideoSource videoSource = factory.createVideoSource(getVideoCapturer(cameraFacing), videoConstraints);
+        lMS = factory.createLocalMediaStream("ARDAMS");
+        lMS.addTrack(factory.createVideoTrack("ARDAMSv0", videoSource));
+        lMS.addTrack(factory.createAudioTrack("ARDAMSa0"));
 
-      @Override
-      public void onConnectCompleted(Exception ex, SocketIOClient socket) {
-        if (ex != null) {
-            Log.e(TAG,"WebRtcClient connect failed: "+ex.getMessage());
-          return;
+        mListener.onLocalStream(lMS);
+    }
+
+    private int findEndPoint() {
+        for (int i = 0; i < MAX_PEER; i++) {
+            if (!endPoints[i])
+                return i;
         }
-        Log.d(TAG,"WebRtcClient connected.");
-        client = socket;
-
-        // specify which events you are interested in receiving
-        client.addListener("id", messageHandler);
-        client.addListener("message", messageHandler);
-      }
-    }, new Handler());
-
-    iceServers.add(new PeerConnection.IceServer("stun:23.21.150.121"));
-    iceServers.add(new PeerConnection.IceServer("stun:stun.l.google.com:19302"));
-
-    pcConstraints.mandatory.add(new MediaConstraints.KeyValuePair("OfferToReceiveAudio", "true"));
-    pcConstraints.mandatory.add(new MediaConstraints.KeyValuePair("OfferToReceiveVideo", "true"));
-  }
-
-  public void setCamera(String cameraFacing, String height, String width){
-    MediaConstraints videoConstraints = new MediaConstraints();
-    videoConstraints.mandatory.add(new MediaConstraints.KeyValuePair("maxHeight", height));
-    videoConstraints.mandatory.add(new MediaConstraints.KeyValuePair("maxWidth", width));
-
-    VideoSource videoSource = factory.createVideoSource(getVideoCapturer(cameraFacing), videoConstraints);
-    lMS = factory.createLocalMediaStream("ARDAMS");
-    lMS.addTrack(factory.createVideoTrack("ARDAMSv0", videoSource));
-    lMS.addTrack(factory.createAudioTrack("ARDAMSa0"));
-
-    mListener.onLocalStream(lMS);
-  }
-
-  private int findEndPoint() {
-    for(int i = 0; i < MAX_PEER; i++) {
-      if(!endPoints[i]) return i;
+        return MAX_PEER;
     }
-    return MAX_PEER;
-  }
-
-  public void start(String name, boolean privacy){
-    try {
-      JSONObject message = new JSONObject();
-      message.put("name", name);
-      client.emit("readyToStream", new JSONArray().put(message));
-    } catch (JSONException e) {
-      e.printStackTrace();
+
+    public void start(String name, boolean privacy) {
+        try {
+            JSONObject message = new JSONObject();
+            message.put("name", name);
+            client.emit("readyToStream", new JSONArray().put(message));
+        } catch (JSONException e) {
+            e.printStackTrace();
+        }
     }
-  }
-
-  /*
-   Cycle through likely device names for the camera and return the first
-   capturer that works, or crash if none do.
-   */
-  private VideoCapturer getVideoCapturer(String cameraFacing) {
-    int[] cameraIndex = { 0, 1 };
-    int[] cameraOrientation = { 0, 90, 180, 270 };
-    for (int index : cameraIndex) {
-      for (int orientation : cameraOrientation) {
-        String name = "Camera " + index + ", Facing " + cameraFacing +
-        ", Orientation " + orientation;
-        VideoCapturer capturer = VideoCapturer.create(name);
-        if (capturer != null) {
-          return capturer;
+
+    public void call(String peerId) {
+        try {
+            JSONObject message = new JSONObject();
+            message.put("type", "init");
+            message.put("to", peerId);
+            Log.d("yoy", "call: " + message.toString());
+            client.emit("message", new JSONArray().put(message));
+        } catch (JSONException e) {
+            e.printStackTrace();
         }
-      }
     }
-    throw new RuntimeException("Failed to open capturer");
-  }
 
-  private void addPeer(String id, int endPoint) {
-    Peer peer = new Peer(id, endPoint);
-    peers.put(id, peer);
+    /*
+     * Cycle through likely device names for the camera and return the first capturer that works, or
+     * crash if none do.
+     */
+    private VideoCapturer getVideoCapturer(String cameraFacing) {
+        int[] cameraIndex = {
+                0, 1
+        };
+        int[] cameraOrientation = {
+                0, 90, 180, 270
+        };
+        for (int index : cameraIndex) {
+            for (int orientation : cameraOrientation) {
+                String name = "Camera " + index + ", Facing " + cameraFacing +
+                        ", Orientation " + orientation;
+                VideoCapturer capturer = VideoCapturer.create(name);
+                if (capturer != null) {
+                    return capturer;
+                }
+            }
+        }
+        throw new RuntimeException("Failed to open capturer");
+    }
 
-    endPoints[endPoint] = true;
-  }
+    private void addPeer(String id, int endPoint) {
+        Peer peer = new Peer(id, endPoint);
+        peers.put(id, peer);
 
-  private void removePeer(String id) {
-    Peer peer = peers.get(id);
-    peer.pc.close();
-    peer.pc.dispose();
-    peers.remove(peer.id);
+        endPoints[endPoint] = true;
+    }
+
+    private void removePeer(String id) {
+        Peer peer = peers.get(id);
+        peer.pc.close();
+        peer.pc.dispose();
+        peers.remove(peer.id);
 
-    endPoints[peer.endPoint] = false;
-  }
+        endPoints[peer.endPoint] = false;
+    }
 }
