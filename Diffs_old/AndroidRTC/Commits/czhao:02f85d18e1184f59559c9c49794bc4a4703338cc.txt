diff --git a/app/build.gradle b/app/build.gradle
index 40b4cc7..f2b11d3 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -22,13 +22,14 @@ android {
         abi {
             enable true
             reset()
-            include 'armeabi-v7a'
+            include 'armeabi-v7a','x86'
             universalApk false
         }
     }
 }
 
 dependencies {
-    compile 'com.android.support:appcompat-v7:22.0.0'
+    compile 'com.android.support:appcompat-v7:22.2.0'
+    compile 'com.jakewharton:butterknife:7.0.1'
     compile project(':webrtc-client')
 }
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 6678d6e..066dbbc 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -2,62 +2,85 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="fr.pchab.androidrtc"
     android:versionCode="1"
-    android:versionName="1.0">
+    android:versionName="1.0" >
 
-    <uses-feature android:name="android.hardware.camera" />
-    <uses-feature android:name="android.hardware.camera.autofocus" />
     <uses-sdk
         android:minSdkVersion="15"
         android:targetSdkVersion="21" />
 
+    <uses-feature android:name="android.hardware.camera" />
+    <uses-feature android:name="android.hardware.camera.autofocus" />
+
     <uses-permission android:name="android.permission.CAMERA" />
     <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
     <uses-permission android:name="android.permission.RECORD_AUDIO" />
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.WAKE_LOCK" />
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
 
     <!-- support NFC -->
     <uses-permission android:name="android.permission.NFC" />
 
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
 
-    <application android:label="@string/app_name"  android:allowBackup="true">
+    <application
+        android:allowBackup="true"
+        android:theme="@style/AppTheme"
+        android:label="@string/app_name" >
 
-        <activity android:name="RtcActivity"
-            android:label="@string/app_name"
-            android:screenOrientation="fullUser"
-            android:launchMode="singleInstance"
-            android:configChanges="orientation|screenSize">
+        <activity
+            android:name=".HomeActivity"
+            android:label="@string/app_name" >
 
             <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
 
             <!-- NFC support -->
-
-            <meta-data android:name="android.nfc.action.TECH_DISCOVERED"
+            <meta-data
+                android:name="android.nfc.action.TECH_DISCOVERED"
                 android:resource="@xml/nfc" />
 
             <intent-filter>
-                <action android:name="android.nfc.action.TAG_DISCOVERED"/>
+                <action android:name="android.nfc.action.TAG_DISCOVERED" />
             </intent-filter>
 
             <intent-filter>
                 <action android:name="android.nfc.action.NDEF_DISCOVERED" />
+
                 <category android:name="android.intent.category.DEFAULT" />
+
                 <data android:mimeType="text/plain" />
             </intent-filter>
 
+        </activity>
+
+        <activity
+            android:name=".RtcVideoActivity"
+            android:configChanges="orientation|screenSize"
+            android:label="@string/app_name"
+            android:launchMode="singleInstance"
+            android:screenOrientation="fullUser" >
 
             <intent-filter>
                 <action android:name="android.intent.action.VIEW" />
+
                 <category android:name="android.intent.category.DEFAULT" />
                 <category android:name="android.intent.category.BROWSABLE" />
-                <data android:scheme="http"
-                    android:host="@string/host" />
+                <data
+                    android:host="@string/host"
+                    android:scheme="http" />
             </intent-filter>
-
         </activity>
+
+        <activity android:name=".RtcAudioActivity"
+            android:launchMode="singleTop"
+            android:screenOrientation="portrait"
+            />
+        
     </application>
+
 </manifest>
diff --git a/app/src/main/java/fr/pchab/androidrtc/HomeActivity.java b/app/src/main/java/fr/pchab/androidrtc/HomeActivity.java
new file mode 100644
index 0000000..31a8eba
--- /dev/null
+++ b/app/src/main/java/fr/pchab/androidrtc/HomeActivity.java
@@ -0,0 +1,99 @@
+package fr.pchab.androidrtc;
+
+import android.content.Intent;
+import android.nfc.NdefMessage;
+import android.nfc.NfcAdapter;
+import android.os.Bundle;
+import android.os.Parcelable;
+import android.support.v7.app.AppCompatActivity;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.widget.Button;
+import android.widget.Toast;
+
+import butterknife.ButterKnife;
+import butterknife.OnClick;
+
+public class HomeActivity extends AppCompatActivity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_home);
+        ButterKnife.bind(this);
+    }
+
+    @OnClick(R.id.audio_only_option)
+    public void audioOnly(Button button) {
+        //start the activity for audio only activity
+        Intent answerCall = new Intent(this, RtcAudioActivity.class);
+        answerCall.putExtra(RtcAudioActivity.INTENT_PARAM_TASK, RtcAudioActivity.TASK_INIT);
+        startActivity(answerCall);
+    }
+
+    @Override
+    public void onNewIntent(Intent intent) {
+        // onResume gets called after this to handle the intent
+        setIntent(intent);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+
+        if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(getIntent().getAction())) {
+            processIntent(getIntent());
+        }
+    }
+
+
+    /**
+     * Parses the NDEF Message from the intent and prints to the TextView
+     */
+    void processIntent(Intent intent) {
+        Parcelable[] rawMessages = intent.getParcelableArrayExtra(
+                NfcAdapter.EXTRA_NDEF_MESSAGES);
+        // only one message sent during the beam
+        NdefMessage msg = (NdefMessage) rawMessages[0];
+        // record 0 contains the MIME type, record 1 is the AAR, if present
+        String mCallSessionId = new String(msg.getRecords()[0].getPayload());
+        Toast.makeText(this, "New Session Acquired: " +mCallSessionId, Toast.LENGTH_SHORT).show();
+
+        //start the new activity
+        Intent answerCall = new Intent(this, RtcAudioActivity.class);
+        answerCall.putExtra(RtcAudioActivity.INTENT_PARAM_TASK, RtcAudioActivity.TASK_ANSWER);
+        answerCall.putExtra(RtcAudioActivity.INTENT_PARAM_SESSION, mCallSessionId);
+        startActivityForResult(answerCall, RtcAudioActivity.REQUEST_CODE);
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if (requestCode == RtcAudioActivity.REQUEST_CODE){
+            //remove the intent set via NFC beam
+            setIntent(new Intent());
+        }
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        // Inflate the menu; this adds items to the action bar if it is present.
+        getMenuInflater().inflate(R.menu.menu_home, menu);
+        return true;
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle action bar item clicks here. The action bar will
+        // automatically handle clicks on the Home/Up button, so long
+        // as you specify a parent activity in AndroidManifest.xml.
+        int id = item.getItemId();
+
+        //noinspection SimplifiableIfStatement
+        if (id == R.id.action_settings) {
+            return true;
+        }
+
+        return super.onOptionsItemSelected(item);
+    }
+}
diff --git a/app/src/main/java/fr/pchab/androidrtc/RtcAudioActivity.java b/app/src/main/java/fr/pchab/androidrtc/RtcAudioActivity.java
new file mode 100644
index 0000000..d61a51f
--- /dev/null
+++ b/app/src/main/java/fr/pchab/androidrtc/RtcAudioActivity.java
@@ -0,0 +1,192 @@
+package fr.pchab.androidrtc;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.content.Intent;
+import android.nfc.NdefMessage;
+import android.nfc.NdefRecord;
+import android.nfc.NfcAdapter;
+import android.nfc.NfcEvent;
+import android.os.Bundle;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager.LayoutParams;
+import android.widget.Toast;
+
+import org.json.JSONException;
+import org.webrtc.MediaStream;
+import org.webrtc.VideoRendererGui;
+
+import fr.pchab.webrtcclient.PeerConnectionParameters;
+import fr.pchab.webrtcclient.WebRtcClient;
+
+public class RtcAudioActivity extends Activity implements WebRtcClient.RtcListener,NfcAdapter.CreateNdefMessageCallback{
+    private static final String VIDEO_CODEC_VP9 = "VP9";
+    private static final String AUDIO_CODEC_OPUS = "opus";
+    // Local preview screen position before call is connected.
+    private WebRtcClient client;
+    private String mSocketAddress;
+    private String mSessionId, mTask;
+
+    protected final static String INTENT_PARAM_SESSION = "param_session";
+    protected final static String INTENT_PARAM_TASK = "param_task";
+    protected final static String TASK_ANSWER = "task.answer";
+    protected final static String TASK_INIT = "task.init";
+    private NfcAdapter mNfcAdapter;
+
+    public static final int REQUEST_CODE = 100;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        getWindow().addFlags(
+                LayoutParams.FLAG_FULLSCREEN
+                        | LayoutParams.FLAG_KEEP_SCREEN_ON
+                        | LayoutParams.FLAG_DISMISS_KEYGUARD
+                        | LayoutParams.FLAG_SHOW_WHEN_LOCKED
+                        | LayoutParams.FLAG_TURN_SCREEN_ON);
+        setContentView(R.layout.audio);
+        mSocketAddress = "http://" + getResources().getString(R.string.host);
+        mSocketAddress += (":" + getResources().getString(R.string.port) + "/");
+
+        mSessionId = getIntent().getStringExtra(INTENT_PARAM_SESSION);
+        mTask = getIntent().getStringExtra(INTENT_PARAM_TASK);
+
+
+        mNfcAdapter = NfcAdapter.getDefaultAdapter(this);
+        if (mNfcAdapter == null) {
+            Toast.makeText(this, "NFC is unavailable", Toast.LENGTH_LONG).show();
+            finish();
+            return;
+        }
+
+        mNfcAdapter.setNdefPushMessageCallback(this, this);
+
+
+        //set the onclick listener to initialize the call
+        findViewById(R.id.end_call).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                //output the caller ID
+                Toast.makeText(RtcAudioActivity.this,"Session End "+ mSessionId, Toast.LENGTH_SHORT).show();
+                client.onDestroy();
+                client = null;
+                finish();
+            }
+        });
+        init();
+
+        if (TASK_ANSWER.equals(mTask)) {
+            try {
+                answer(mSessionId);
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    private void init() {
+        PeerConnectionParameters parameters = new PeerConnectionParameters(false, false, 0, 0, 30, 1, VIDEO_CODEC_VP9, false, 1, AUDIO_CODEC_OPUS, true);
+        client = new WebRtcClient(this, mSocketAddress, parameters, VideoRendererGui.getEGLContext());
+        client.start("android_test");
+    }
+
+    @TargetApi(16)
+    @Override
+    public NdefMessage createNdefMessage(NfcEvent nfcEvent) {
+        if (!TASK_INIT.equals(mTask))
+            return null;
+
+        //create the message
+        return new NdefMessage(
+                new NdefRecord[] { NdefRecord.createMime(
+                        "text/plain", mSessionId.getBytes())});
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        if(client != null) {
+            client.onPause();
+        }
+    }
+
+    @Override
+    public void onNewIntent(Intent intent) {
+        // onResume gets called after this to handle the intent
+        setIntent(intent);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+
+        if(client != null) {
+            client.onResume();
+        }
+    }
+
+    @Override
+    public void onDestroy() {
+        if(client != null) {
+            client.onDestroy();
+        }
+        super.onDestroy();
+    }
+
+    @Override
+    public void onCallReady(String callId) {
+        if (TASK_INIT.equals(mTask)){
+            mSessionId = callId;
+            runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    Toast.makeText(getApplicationContext(), "Session Initialized "+mSessionId, Toast.LENGTH_LONG).show();
+                }
+            });
+        }
+    }
+
+    public void answer(String callerId) throws JSONException {
+        client.sendMessage(callerId, "init", null);
+    }
+
+
+    @Override
+    public void onStatusChanged(final int newStatus) {
+        runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                int resId = R.string.unknown;
+                switch (newStatus){
+                    case WebRtcClient.STATUS.CONNECTING:
+                        resId = R.string.connecting;
+                        break;
+                    case WebRtcClient.STATUS.CONNECTED:
+                        resId = R.string.connected;
+                        break;
+                    case WebRtcClient.STATUS.DISCONNECTED:
+                        resId = R.string.disconnected;
+                        break;
+                }
+                Toast.makeText(getApplicationContext(), resId, Toast.LENGTH_SHORT).show();
+            }
+        });
+    }
+
+    @Override
+    public void onLocalStream(MediaStream localStream) {
+
+    }
+
+    @Override
+    public void onAddRemoteStream(MediaStream remoteStream, int endPoint) {
+
+    }
+
+    @Override
+    public void onRemoveRemoteStream(int endPoint) {
+
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/fr/pchab/androidrtc/RtcActivity.java b/app/src/main/java/fr/pchab/androidrtc/RtcVideoActivity.java
similarity index 91%
rename from app/src/main/java/fr/pchab/androidrtc/RtcActivity.java
rename to app/src/main/java/fr/pchab/androidrtc/RtcVideoActivity.java
index c39ad11..d592cb6 100644
--- a/app/src/main/java/fr/pchab/androidrtc/RtcActivity.java
+++ b/app/src/main/java/fr/pchab/androidrtc/RtcVideoActivity.java
@@ -15,10 +15,8 @@
 import android.view.Window;
 import android.view.WindowManager.LayoutParams;
 import android.widget.EditText;
-import android.widget.TextView;
 import android.widget.Toast;
 import org.json.JSONException;
-import org.w3c.dom.Text;
 import org.webrtc.MediaStream;
 import org.webrtc.VideoRenderer;
 import org.webrtc.VideoRendererGui;
@@ -27,7 +25,7 @@
 
 import java.util.List;
 
-public class RtcActivity extends Activity implements WebRtcClient.RtcListener,NfcAdapter.CreateNdefMessageCallback {
+public class RtcVideoActivity extends Activity implements WebRtcClient.RtcListener,NfcAdapter.CreateNdefMessageCallback {
     private final static int VIDEO_CALL_SENT = 666;
     private static final String VIDEO_CODEC_VP9 = "VP9";
     private static final String AUDIO_CODEC_OPUS = "opus";
@@ -55,7 +53,7 @@
     private String callerId, calleeId;
 
     private NfcAdapter mNfcAdapter;
-    private final boolean VIDEO_ENABLED = false;
+    private final boolean VIDEO_ENABLED = true;
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
@@ -86,7 +84,7 @@ public void run() {
             @Override
             public void onClick(View view) {
                 //output the caller ID
-                Toast.makeText(RtcActivity.this,"Caller ID "+ calleeId, Toast.LENGTH_SHORT).show();
+                Toast.makeText(RtcVideoActivity.this,"Caller ID "+ calleeId, Toast.LENGTH_SHORT).show();
             }
         });
 
@@ -254,11 +252,23 @@ public void startCam() {
     }
 
     @Override
-    public void onStatusChanged(final String newStatus) {
+    public void onStatusChanged(final int newStatus) {
         runOnUiThread(new Runnable() {
             @Override
             public void run() {
-                Toast.makeText(getApplicationContext(), newStatus, Toast.LENGTH_SHORT).show();
+                int resId = R.string.unknown;
+                switch (newStatus){
+                    case WebRtcClient.STATUS.CONNECTING:
+                        resId = R.string.connecting;
+                        break;
+                    case WebRtcClient.STATUS.CONNECTED:
+                        resId = R.string.connected;
+                        break;
+                    case WebRtcClient.STATUS.DISCONNECTED:
+                        resId = R.string.disconnected;
+                        break;
+                }
+                Toast.makeText(getApplicationContext(), resId, Toast.LENGTH_SHORT).show();
             }
         });
     }
diff --git a/app/src/main/res/layout/activity_home.xml b/app/src/main/res/layout/activity_home.xml
new file mode 100644
index 0000000..6dace84
--- /dev/null
+++ b/app/src/main/res/layout/activity_home.xml
@@ -0,0 +1,29 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
+    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    tools:context="fr.pchab.androidrtc.HomeActivity">
+
+    <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/audio_only_option"
+        android:text="@string/audio_only"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        />
+
+    <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@id/audio_only_option"
+        android:id="@+id/video"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:text="@string/audio_and_video"
+        />
+
+</RelativeLayout>
diff --git a/app/src/main/res/layout/audio.xml b/app/src/main/res/layout/audio.xml
new file mode 100644
index 0000000..87b3582
--- /dev/null
+++ b/app/src/main/res/layout/audio.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context="fr.pchab.androidrtc.RtcAudioActivity"
+    >
+
+    <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/end_call"
+        android:id="@+id/end_call"
+        />
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/app/src/main/res/menu/menu_home.xml b/app/src/main/res/menu/menu_home.xml
new file mode 100644
index 0000000..4ce7612
--- /dev/null
+++ b/app/src/main/res/menu/menu_home.xml
@@ -0,0 +1,6 @@
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools" tools:context="fr.pchab.androidrtc.HomeActivity">
+    <item android:id="@+id/action_settings" android:title="@string/action_settings"
+        android:orderInCategory="100" app:showAsAction="never" />
+</menu>
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index 55b8475..1543e96 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -6,4 +6,14 @@
     <string name="action_settings">Options</string>
     <string name="call">Call</string>
     <string name="answer">Answer</string>
+    <string name="title_activity_home">HomeActivity</string>
+
+    <string name="hello_world">Hello world!</string>
+    <string name="audio_only">Audio Only</string>
+    <string name="audio_and_video">Audio and Video</string>'
+    <string name="end_call">End Call</string>
+    <string name="connecting">Connecting</string>
+    <string name="connected">Connected</string>
+    <string name="disconnected">Disconnected</string>
+    <string name="unknown">Unknown</string>
 </resources>
diff --git a/webrtc-client/src/main/java/fr/pchab/webrtcclient/WebRtcClient.java b/webrtc-client/src/main/java/fr/pchab/webrtcclient/WebRtcClient.java
index 6aef72f..a021f0c 100644
--- a/webrtc-client/src/main/java/fr/pchab/webrtcclient/WebRtcClient.java
+++ b/webrtc-client/src/main/java/fr/pchab/webrtcclient/WebRtcClient.java
@@ -28,13 +28,20 @@
     private RtcListener mListener;
     private Socket client;
 
+    public interface STATUS {
+        int NONE = 0;
+        int CONNECTING = 1;
+        int CONNECTED = 2;
+        int DISCONNECTED = 3;
+    }
+
     /**
      * Implement this interface to be notified of events.
      */
     public interface RtcListener{
         void onCallReady(String callId);
 
-        void onStatusChanged(String newStatus);
+        void onStatusChanged(int newStatus);
 
         void onLocalStream(MediaStream localStream);
 
@@ -195,7 +202,9 @@ public void onSignalingChange(PeerConnection.SignalingState signalingState) {}
         public void onIceConnectionChange(PeerConnection.IceConnectionState iceConnectionState) {
             if(iceConnectionState == PeerConnection.IceConnectionState.DISCONNECTED) {
                 removePeer(id);
-                mListener.onStatusChanged("DISCONNECTED");
+                mListener.onStatusChanged(STATUS.DISCONNECTED);
+            } else if (iceConnectionState == PeerConnection.IceConnectionState.CONNECTED){
+                mListener.onStatusChanged(STATUS.CONNECTED);
             }
         }
 
@@ -244,7 +253,7 @@ public Peer(String id, int endPoint) {
 
             pc.addStream(localMS); //, new MediaConstraints()
 
-            mListener.onStatusChanged("CONNECTING");
+            mListener.onStatusChanged(STATUS.CONNECTING);
         }
     }
 
@@ -285,7 +294,9 @@ public WebRtcClient(RtcListener listener, String host, PeerConnectionParameters
         iceServers.add(new PeerConnection.IceServer("stun:stun.l.google.com:19302"));
 
         pcConstraints.mandatory.add(new MediaConstraints.KeyValuePair("OfferToReceiveAudio", "true"));
-        pcConstraints.mandatory.add(new MediaConstraints.KeyValuePair("OfferToReceiveVideo", "true"));
+        if (params.videoCallEnabled) {
+            pcConstraints.mandatory.add(new MediaConstraints.KeyValuePair("OfferToReceiveVideo", "true"));
+        }
         pcConstraints.optional.add(new MediaConstraints.KeyValuePair("DtlsSrtpKeyAgreement", "true"));
     }
 
@@ -310,7 +321,9 @@ public void onDestroy() {
         for (Peer peer : peers.values()) {
             peer.pc.dispose();
         }
-        videoSource.stop();
+        if (videoSource != null) {
+            videoSource.stop();
+        }
         factory.dispose();
         client.disconnect();
         client.close();
