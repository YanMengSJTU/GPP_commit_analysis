diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index ae3013c..6783489 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -7,7 +7,7 @@
     <uses-feature android:name="android.hardware.camera" />
     <uses-feature android:name="android.hardware.camera.autofocus" />
     <uses-sdk
-            android:minSdkVersion="8"
+            android:minSdkVersion="13"
             android:targetSdkVersion="18" />
 
     <uses-permission android:name="android.permission.CAMERA" />
@@ -30,7 +30,9 @@
                 <category android:name="android.intent.category.DEFAULT" />
                 <category android:name="android.intent.category.BROWSABLE" />
                 <data android:scheme="http"
-                      android:host="@string/host" />
+                      android:host="@string/host" 
+                      android:port="@string/port"
+                      android:pathPrefix="@string/path_prefix"/>
             </intent-filter>
         </activity>
     </application>
diff --git a/project.properties b/project.properties
index 6d7a78e..a2ce425 100644
--- a/project.properties
+++ b/project.properties
@@ -1,3 +1,3 @@
 # This file is automatically generated by IntelliJ IDEA
 # Project target.
-target=android-17
\ No newline at end of file
+target=android-17
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 7c10722..b8dc55b 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -1,5 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
     <string name="app_name">AndroidRTC</string>
-    <string name="host">54.214.218.3</string>
+    <string name="host">192.168.2.215</string>
+    <string name="port">3000</string>
+    <string name="path_prefix">/stream</string>
 </resources>
\ No newline at end of file
diff --git a/src/fr/pchab/AndroidRTC/RTCActivity.java b/src/fr/pchab/AndroidRTC/RTCActivity.java
index 9332076..be54468 100644
--- a/src/fr/pchab/AndroidRTC/RTCActivity.java
+++ b/src/fr/pchab/AndroidRTC/RTCActivity.java
@@ -1,28 +1,30 @@
 package fr.pchab.AndroidRTC;
 
+import java.util.List;
+
+import org.json.JSONException;
+import org.webrtc.MediaStream;
+import org.webrtc.PeerConnectionFactory;
+import org.webrtc.VideoRenderer;
+
 import android.app.Activity;
 import android.content.Intent;
 import android.content.pm.ActivityInfo;
 import android.content.res.Configuration;
 import android.graphics.Point;
 import android.os.Bundle;
+import android.util.Log;
 import android.view.Window;
 import android.widget.Toast;
-import org.json.JSONException;
-import org.webrtc.MediaStream;
-import org.webrtc.PeerConnectionFactory;
-import org.webrtc.VideoRenderer;
-
-import java.util.List;
 
 public class RTCActivity extends Activity implements WebRtcClient.RTCListener{
-  private final String HOST = "http://54.214.218.3:3000/";
   private final static int VIDEO_CALL_SENT = 666;
   private VideoStreamsView vsv;
   private WebRtcClient client;
   private String callerId;
-
-
+  private String mSocketAddress;
+  private String mPathPrefix;
+  private final static String TAG = RTCActivity.class.getName();
   @Override
   public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
@@ -34,14 +36,17 @@ public void onCreate(Bundle savedInstanceState) {
     Point displaySize = new Point();
     getWindowManager().getDefaultDisplay().getSize(displaySize);
     vsv = new VideoStreamsView(this, displaySize);
-    client = new WebRtcClient(this, HOST);
+    mPathPrefix  = getResources().getString(R.string.path_prefix);
+    mSocketAddress = "http://" + getResources().getString(R.string.host);
+    mSocketAddress += (":"+getResources().getString(R.string.port));
+    Log.d(TAG,"WebRtcClient socket address: "+mSocketAddress);
+    client = new WebRtcClient(this, mSocketAddress);
 
     final Intent intent = getIntent();
     final String action = intent.getAction();
-
+    Log.d(TAG,"onCreate() "+intent.getAction());
     if (Intent.ACTION_VIEW.equals(action)) {
-      final List<String> segments = intent.getData().getPathSegments();
-      callerId = segments.get(0);
+      callerId = intent.getData().getLastPathSegment();
     }
   }
 
@@ -65,6 +70,7 @@ public void onResume() {
 
   @Override
   public void onCallReady(String callId) {
+	  Log.d(TAG,"onCallReady() callId ="+(callId == null ? "nil" : callId));
     if(callerId != null) {
       try {
         answer(callerId);
@@ -82,8 +88,10 @@ public void answer(String callerId) throws JSONException {
   }
 
   public void call(String callId) {
+	  String extra = mSocketAddress + mPathPrefix + "/" + callId;
+	  Log.d(TAG,"call() intent extra: "+extra);
     Intent msg = new Intent(Intent.ACTION_SEND);
-    msg.putExtra(Intent.EXTRA_TEXT, HOST + callId);
+    msg.putExtra(Intent.EXTRA_TEXT, extra);
     msg.setType("text/plain");
     startActivityForResult(Intent.createChooser(msg, "Call someone :"), VIDEO_CALL_SENT);
   }
@@ -119,6 +127,7 @@ public void onLocalStream(MediaStream localStream) {
 
   @Override
   public void onAddRemoteStream(MediaStream remoteStream, int endPoint) {
+	  Log.d(TAG,"onAddRemoteStream() "+remoteStream.label() + " " + endPoint);
     remoteStream.videoTracks.get(0).addRenderer(new VideoRenderer(new VideoCallbacks(vsv, endPoint)));
     vsv.shouldDraw[endPoint] = true;
   }
diff --git a/src/fr/pchab/AndroidRTC/WebRtcClient.java b/src/fr/pchab/AndroidRTC/WebRtcClient.java
index cd91fa8..46acffb 100644
--- a/src/fr/pchab/AndroidRTC/WebRtcClient.java
+++ b/src/fr/pchab/AndroidRTC/WebRtcClient.java
@@ -1,17 +1,29 @@
 package fr.pchab.AndroidRTC;
 
+import java.util.HashMap;
+import java.util.LinkedList;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.webrtc.DataChannel;
+import org.webrtc.IceCandidate;
+import org.webrtc.MediaConstraints;
+import org.webrtc.MediaStream;
+import org.webrtc.PeerConnection;
+import org.webrtc.PeerConnectionFactory;
+import org.webrtc.SdpObserver;
+import org.webrtc.SessionDescription;
+import org.webrtc.VideoCapturer;
+import org.webrtc.VideoSource;
+
 import android.os.Handler;
+import android.util.Log;
+
 import com.koushikdutta.async.http.socketio.Acknowledge;
 import com.koushikdutta.async.http.socketio.ConnectCallback;
 import com.koushikdutta.async.http.socketio.EventCallback;
 import com.koushikdutta.async.http.socketio.SocketIOClient;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.webrtc.*;
-
-import java.util.HashMap;
-import java.util.LinkedList;
 
 class WebRtcClient {
   private final static int MAX_PEER = 2;
@@ -24,6 +36,7 @@
   private RTCListener mListener;
   private SocketIOClient client;
   private final MessageHandler messageHandler = new MessageHandler();
+  private final static String TAG = WebRtcClient.class.getCanonicalName();
 
   public interface RTCListener{
     void onCallReady(String callId);
@@ -43,6 +56,7 @@
 
   private class CreateOfferCommand implements Command{
     public void execute(String peerId, JSONObject payload) throws JSONException {
+    	Log.d(TAG,"CreateOfferCommand");
       Peer peer = peers.get(peerId);
       peer.pc.createOffer(peer, pcConstraints);
     }
@@ -50,6 +64,7 @@ public void execute(String peerId, JSONObject payload) throws JSONException {
 
   private class CreateAnswerCommand implements Command{
     public void execute(String peerId, JSONObject payload) throws JSONException {
+    	Log.d(TAG,"CreateAnswerCommand");
       Peer peer = peers.get(peerId);
       SessionDescription sdp = new SessionDescription(
                                                       SessionDescription.Type.fromCanonicalForm(payload.getString("type")),
@@ -62,6 +77,7 @@ public void execute(String peerId, JSONObject payload) throws JSONException {
 
   private class SetRemoteSDPCommand implements Command{
     public void execute(String peerId, JSONObject payload) throws JSONException {
+    	Log.d(TAG,"SetRemoteSDPCommand");
       Peer peer = peers.get(peerId);
       SessionDescription sdp = new SessionDescription(
                                                       SessionDescription.Type.fromCanonicalForm(payload.getString("type")),
@@ -73,6 +89,7 @@ public void execute(String peerId, JSONObject payload) throws JSONException {
 
   private class AddIceCandidateCommand implements Command{
     public void execute(String peerId, JSONObject payload) throws JSONException {
+    	Log.d(TAG,"AddIceCandidateCommand");
       PeerConnection pc = peers.get(peerId).pc;
       if (pc.getRemoteDescription() != null) {
         IceCandidate candidate = new IceCandidate(
@@ -107,6 +124,7 @@ public MessageHandler() {
     @Override
     public void onEvent(String s, JSONArray jsonArray, Acknowledge acknowledge) {
       try {
+    	  Log.d(TAG,"MessageHandler.onEvent() "+ (s == null ? "nil" : s));
         if(s.equals("id")) {
           mListener.onCallReady(jsonArray.getString(0));
         } else {
@@ -196,6 +214,8 @@ public void onError() {}
 
     @Override
     public void onAddStream(MediaStream mediaStream) {
+    	Log.d(TAG,"onAddStream "+mediaStream.label());
+
       // remote streams are displayed from 1 to MAX_PEER (0 is localStream)
       mListener.onAddRemoteStream(mediaStream, endPoint+1);
     }
@@ -211,6 +231,7 @@ public void onRemoveStream(MediaStream mediaStream) {
     public void onDataChannel(DataChannel dataChannel) {}
 
     public Peer(String id, int endPoint) {
+    	Log.d(TAG,"new Peer: "+id + " " + endPoint);
       this.pc = factory.createPeerConnection(iceServers, pcConstraints, this);
       this.id = id;
       this.endPoint = endPoint;
@@ -230,9 +251,10 @@ public WebRtcClient(RTCListener listener, String host) {
       @Override
       public void onConnectCompleted(Exception ex, SocketIOClient socket) {
         if (ex != null) {
+            Log.e(TAG,"WebRtcClient connect failed: "+ex.getMessage());
           return;
         }
-
+        Log.d(TAG,"WebRtcClient connected.");
         client = socket;
 
         // specify which events you are interested in receiving
