diff --git a/examples/twitter/TwitterClient/.gitignore b/examples/twitter/TwitterClient/.gitignore
new file mode 100644
index 0000000..3c952a2
--- /dev/null
+++ b/examples/twitter/TwitterClient/.gitignore
@@ -0,0 +1,81 @@
+# Created by .ignore support plugin (hsz.mobi)
+### Android template
+# Built application files
+*.apk
+*.ap_
+
+# Files for the Dalvik VM
+*.dex
+
+# Java class files
+*.class
+
+# Generated files
+bin/
+gen/
+
+# Gradle files
+.gradle/
+build/
+/*/build/
+
+# Local configuration file (sdk path, etc)
+local.properties
+
+# Proguard folder generated by Eclipse
+proguard/
+
+# Log Files
+*.log
+
+
+### JetBrains template
+# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion
+
+*.iml
+
+## Directory-based project format:
+.idea/
+# if you remove the above rule, at least ignore the following:
+
+# User-specific stuff:
+# .idea/workspace.xml
+# .idea/tasks.xml
+# .idea/dictionaries
+
+# Sensitive or high-churn files:
+# .idea/dataSources.ids
+# .idea/dataSources.xml
+# .idea/sqlDataSources.xml
+# .idea/dynamic.xml
+# .idea/uiDesigner.xml
+
+# Gradle:
+# .idea/gradle.xml
+# .idea/libraries
+
+# Mongo Explorer plugin:
+# .idea/mongoSettings.xml
+
+## File-based project format:
+*.ipr
+*.iws
+
+## Plugin-specific files:
+
+# IntelliJ
+/out/
+
+# mpeltonen/sbt-idea plugin
+.idea_modules/
+
+# JIRA plugin
+atlassian-ide-plugin.xml
+
+# Crashlytics plugin (for Android Studio and IntelliJ)
+com_crashlytics_export_strings.xml
+crashlytics.properties
+crashlytics-build.properties
+
+
+gradle/
\ No newline at end of file
diff --git a/examples/twitter/TwitterClient/build.gradle b/examples/twitter/TwitterClient/build.gradle
index cdc0a8d..d2ac2d4 100644
--- a/examples/twitter/TwitterClient/build.gradle
+++ b/examples/twitter/TwitterClient/build.gradle
@@ -1,6 +1,4 @@
-task wrapper(type: Wrapper) {
-    gradleVersion = '1.10'
-}
+
 
 
 buildscript {
@@ -9,7 +7,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:0.8.+'
+        classpath 'com.android.tools.build:gradle:1.2.3'
     }
 }
 
@@ -49,17 +47,17 @@ tasks.create(name: "runTwitter", type: RunApk){
 }
 
 android {
-    compileSdkVersion 17
-    buildToolsVersion "19.0.1"
+    compileSdkVersion 22
+    buildToolsVersion "22.0.1"
     defaultConfig {
         minSdkVersion 15
-        targetSdkVersion 17
+        targetSdkVersion 22
     }
 
     dependencies {
         compile 'de.greenrobot:eventbus:2.1.0-beta-1'
         compile 'org.twitter4j:twitter4j-core:3.0.5'
-        compile 'com.path:android-priority-jobqueue:1.1-SNAPSHOT'
+        compile 'com.path:android-priority-jobqueue:1.1.2'
         compile files('external-libs/greenDAO.jar')
     }
 
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/SampleTwitterClient.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/SampleTwitterClient.java
index 7584732..e572d11 100644
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/SampleTwitterClient.java
+++ b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/SampleTwitterClient.java
@@ -1,17 +1,13 @@
 package com.path.android.jobqueue.examples.twitter;
 
-import android.graphics.Color;
 import android.os.Bundle;
-import android.view.LayoutInflater;
 import android.view.View;
-import android.view.ViewGroup;
 import android.widget.EditText;
 import android.widget.ListView;
-import android.widget.TextView;
 import android.widget.Toast;
+
 import com.path.android.jobqueue.JobManager;
 import com.path.android.jobqueue.examples.twitter.activities.BaseActivity;
-import com.path.android.jobqueue.examples.twitter.adapters.LazyListAdapter;
 import com.path.android.jobqueue.examples.twitter.entities.Tweet;
 import com.path.android.jobqueue.examples.twitter.events.DeletedTweetEvent;
 import com.path.android.jobqueue.examples.twitter.events.FetchedNewTweetsEvent;
@@ -21,6 +17,7 @@
 import com.path.android.jobqueue.examples.twitter.jobs.PostTweetJob;
 import com.path.android.jobqueue.examples.twitter.models.TweetModel;
 import com.path.android.jobqueue.examples.twitter.tasks.SimpleBackgroundTask;
+
 import de.greenrobot.dao.LazyList;
 import de.greenrobot.event.EventBus;
 
@@ -28,19 +25,24 @@
     private TweetAdapter tweetAdapter;
     private boolean dataDirty = true;
     JobManager jobManager;
+
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         dataDirty = true;
+
         setContentView(R.layout.main);
+
         jobManager = TwitterApplication.getInstance().getJobManager();
+
         ListView listView = (ListView) findViewById(R.id.tweet_list);
         tweetAdapter = new TweetAdapter(getLayoutInflater());
+
         findViewById(R.id.send_tweet).setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
                 EditText text = (EditText) findViewById(R.id.edit_status);
-                if(text.getText().toString().trim().length() > 0) {
+                if (text.getText().toString().trim().length() > 0) {
                     sendTweet(text.getText().toString());
                     text.setText("");
                 }
@@ -59,7 +61,7 @@ protected void onDestroy() {
         super.onDestroy();
         try {
             EventBus.getDefault().unregister(this);
-        } catch (Throwable t){
+        } catch (Throwable t) {
             //this may crash if registration did not go through. just be safe
         }
     }
@@ -89,7 +91,7 @@ public void onEventMainThread(DeletedTweetEvent ignored) {
     }
 
     private void onUpdateEvent() {
-        if(isVisible()) {
+        if (isVisible()) {
             refreshList();
         } else {
             dataDirty = true;
@@ -100,7 +102,7 @@ private void onUpdateEvent() {
     protected void onResume() {
         super.onResume();
         jobManager.addJobInBackground(new FetchTweetsJob());
-        if(dataDirty) {
+        if (dataDirty) {
             refreshList();
             dataDirty = false;
         }
@@ -120,53 +122,4 @@ protected void onSuccess(LazyList<Tweet> result) {
         }.execute();
     }
 
-    private static class TweetAdapter extends LazyListAdapter<Tweet> {
-        private final LayoutInflater layoutInflater;
-        public TweetAdapter(LayoutInflater layoutInflater) {
-            this.layoutInflater = layoutInflater;
-        }
-        @Override
-        public long getItemId(int i) {
-            return 0;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            ViewHolder holder;
-            if(view == null) {
-                view = layoutInflater.inflate(R.layout.list_tweet, viewGroup, false);
-                holder = new ViewHolder(view);
-            } else {
-                holder = ViewHolder.getFromView(view);
-            }
-            holder.render(getItem(i));
-            return view;
-        }
-
-        private static class ViewHolder {
-            TextView statusTextView;
-            public ViewHolder(View view) {
-                statusTextView = (TextView) view.findViewById(R.id.status);
-                view.setTag(this);
-            }
-
-            public static ViewHolder getFromView(View view) {
-                Object tag = view.getTag();
-                if(tag instanceof ViewHolder) {
-                    return (ViewHolder) tag;
-                } else {
-                    return new ViewHolder(view);
-                }
-            }
-
-            public void render(Tweet tweet) {
-                statusTextView.setText(tweet.getText());
-                if(tweet.getServerId() == null) {
-                    statusTextView.setTextColor(Color.YELLOW);
-                } else {
-                    statusTextView.setTextColor(Color.WHITE);
-                }
-            }
-        }
-    }
 }
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/TweetAdapter.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/TweetAdapter.java
new file mode 100644
index 0000000..b12993f
--- /dev/null
+++ b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/TweetAdapter.java
@@ -0,0 +1,38 @@
+package com.path.android.jobqueue.examples.twitter;
+
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.path.android.jobqueue.examples.twitter.adapters.LazyListAdapter;
+import com.path.android.jobqueue.examples.twitter.entities.Tweet;
+
+/**
+ * Created by djzhang on 8/3/15.
+ */
+class TweetAdapter extends LazyListAdapter<Tweet> {
+    private final LayoutInflater layoutInflater;
+
+    public TweetAdapter(LayoutInflater layoutInflater) {
+        this.layoutInflater = layoutInflater;
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return 0;
+    }
+
+    @Override
+    public View getView(int position, View view, ViewGroup viewGroup) {
+        ViewHolder holder;
+        if (view == null) {
+            view = layoutInflater.inflate(R.layout.list_tweet, viewGroup, false);
+            holder = new ViewHolder(view);
+        } else {
+            holder = ViewHolder.getFromView(view);
+        }
+        holder.render(getItem(position));
+        return view;
+    }
+
+}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/ViewHolder.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/ViewHolder.java
new file mode 100644
index 0000000..d8a7592
--- /dev/null
+++ b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/ViewHolder.java
@@ -0,0 +1,37 @@
+package com.path.android.jobqueue.examples.twitter;
+
+import android.graphics.Color;
+import android.view.View;
+import android.widget.TextView;
+
+import com.path.android.jobqueue.examples.twitter.entities.Tweet;
+
+/**
+ * Created by djzhang on 8/3/15.
+ */
+class ViewHolder {
+    TextView statusTextView;
+
+    public ViewHolder(View view) {
+        statusTextView = (TextView) view.findViewById(R.id.status);
+        view.setTag(this);
+    }
+
+    public static ViewHolder getFromView(View view) {
+        Object tag = view.getTag();
+        if (tag instanceof ViewHolder) {
+            return (ViewHolder) tag;
+        } else {
+            return new ViewHolder(view);
+        }
+    }
+
+    public void render(Tweet tweet) {
+        statusTextView.setText(tweet.getText());
+        if (tweet.getServerId() == null) {
+            statusTextView.setTextColor(Color.YELLOW);
+        } else {
+            statusTextView.setTextColor(Color.WHITE);
+        }
+    }
+}
diff --git a/jobqueue/build.gradle b/jobqueue/build.gradle
index e6d5fbf..f68f1ce 100644
--- a/jobqueue/build.gradle
+++ b/jobqueue/build.gradle
@@ -1,10 +1,10 @@
 import java.util.regex.Pattern
-task wrapper(type: Wrapper) {
-    gradleVersion = '1.10'
-}
+//task wrapper(type: Wrapper) {
+    //gradleVersion = '1.10'
+//}
 
 apply plugin: 'maven'
-apply plugin: 'signing'
+//apply plugin: 'signing'
 
 buildscript {
     repositories {
@@ -12,7 +12,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:0.8.+'
+        classpath 'com.android.tools.build:gradle:1.2.3'
     }
 }
 
@@ -25,8 +25,8 @@ configurations {
 apply plugin: 'android-library'
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19.0.1"
+    compileSdkVersion 22
+    buildToolsVersion "22.0.1"
     sourceSets {
         main {
             manifest.srcFile 'AndroidManifest.xml'
@@ -35,122 +35,3 @@ android {
         }
     }
 }
-
-//READ VERSION NAME
-def manifestFile = file("AndroidManifest.xml")
-def pattern = Pattern.compile("versionName=\"([\\d\\.\\w\\-]+)\"")
-def manifestText = manifestFile.getText()
-def matcher = pattern.matcher(manifestText)
-matcher.find()
-def manifestVersionName = matcher.group(1)
-println "version name:${manifestVersionName}"
-
-//create jar tasks
-android.libraryVariants.all { variant ->
-    def name = variant.buildType.name
-    println "checking variant ${name}"
-    if (name.equals(com.android.builder.BuilderConstants.DEBUG)) {
-        return; // Skip debug builds.
-    }
-    def suffix = name.capitalize()
-    println "found release variant"
-    def jarTask = project.tasks.create(name: "jar${suffix}", type: Jar){
-        dependsOn variant.javaCompile
-        from variant.javaCompile.destinationDir
-        from 'LICENSE.txt'
-    }
-    def javadocTask = project.tasks.create(name: "javadoc${suffix}", type: Javadoc) {
-        source = variant.javaCompile.source
-        ext.androidJar = "${android.plugin.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
-        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
-    }
-
-    def javadocJarTask = project.tasks.create(name: "javadocJar${suffix}", type: Jar) {
-        classifier = 'javadoc'
-        from 'build/docs/javadoc'
-    }
-
-    def sourcesJarTask = project.tasks.create(name: "sourceJar${suffix}", type: Jar) {
-        from android.sourceSets.main.allSource
-        classifier = 'sources'
-    }
-    artifacts.add('archives', jarTask);
-    artifacts.add('archives', javadocJarTask);
-    artifacts.add('archives', sourcesJarTask);
-}
-//create jar tasks end
-
-
-afterEvaluate { project ->
-    uploadArchives {
-        repositories {
-            mavenDeployer {
-                beforeDeployment {
-                    MavenDeployment deployment -> signing.signPom(deployment)
-                }
-                println "sonatype username: ${sonatypeUsername}"
-
-                pom.artifactId = 'android-priority-jobqueue'
-
-                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
-                    authentication(userName: sonatypeUsername, password: sonotypePassword)
-                }
-
-                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
-                    authentication(userName: sonatypeUsername, password: sonotypePassword)
-                }
-
-                pom.project {
-                    modelVersion '4.0.0'
-                    groupId 'com.path'
-                    artifactId 'android-priority-jobqueue'
-                    packaging 'jar'
-                    name 'Android Priority Job Queue'
-                    version manifestVersionName
-                    description 'a Job Queue specifically written for Android to easily schedule jobs (tasks) that run in the background, improving UX and application stability.'
-                    url 'https://github.com/path/android-priority-jobqueue'
-
-                    parent {
-                        groupId 'org.sonatype.oss'
-                        artifactId 'oss-parent'
-                        version 7
-                    }
-
-                    scm {
-                        connection 'scm:git:git@github.com:path/android-priority-jobqueue.git'
-                        developerConnection 'scm:git:git@github.com:path/android-priority-jobqueue.git'
-                        url 'git@github.com:path/android-priority-jobqueue.git'
-                    }
-
-                    licenses {
-                        license {
-                            name 'The MIT License (MIT)'
-                            url 'http://opensource.org/licenses/MIT'
-                            distribution 'repo'
-                        }
-                    }
-
-                    developers {
-                        developer {
-                            id "yigit"
-                            name "Yigit Boyar"
-                        }
-                    }
-
-                    dependencies {
-                        dependency {
-                            groupId 'com.google.android'
-                            artifactId 'android'
-                            version '2.2.1'
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    signing {
-        required { gradle.taskGraph.hasTask("uploadArchives") }
-        sign configurations.archives
-    }
-}
