diff --git a/jobqueue/src/test/java/co/alfabits/android/jobqueue/test/jobmanager/AddedCountTest.java b/jobqueue/src/test/java/co/alfabits/android/jobqueue/test/jobmanager/AddedCountTest.java
index ad727b9..af5bf00 100644
--- a/jobqueue/src/test/java/co/alfabits/android/jobqueue/test/jobmanager/AddedCountTest.java
+++ b/jobqueue/src/test/java/co/alfabits/android/jobqueue/test/jobmanager/AddedCountTest.java
@@ -1,7 +1,9 @@
 package co.alfabits.android.jobqueue.test.jobmanager;
 
-impoco.alfabits.androidoid.jobqueue.JobManager;
-ico.alfabits.androidndroid.jobqueue.Paramsco.alfabits.androidh.android.jobqueue.test.jobs.DummyJob;
+import co.alfabits.android.jobqueue.JobManager;
+import co.alfabits.android.jobqueue.Params;
+import co.alfabits.android.jobqueue.test.jobs.DummyJob;
+
 import org.hamcrest.MatcherAssert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -15,7 +17,6 @@
     public void testAddedCount() throws Exception {
         testAddedCount(new DummyJob(new Params(0)));
         testAddedCount(new DummyJob(new Params(0).persist()));
-
     }
 
     private void testAddedCount(DummyJob dummyJob) {
diff --git a/jobqueue/src/test/java/co/alfabits/android/jobqueue/test/jobmanager/InjectorTest.java b/jobqueue/src/test/java/co/alfabits/android/jobqueue/test/jobmanager/InjectorTest.java
index 5f34480..e7f4f63 100644
--- a/jobqueue/src/test/java/co/alfabits/android/jobqueue/test/jobmanager/InjectorTest.java
+++ b/jobqueue/src/test/java/co/alfabits/android/jobqueue/test/jobmanager/InjectorTest.java
@@ -65,11 +65,31 @@ public boolean isDebugEnabled() {
                 return false;
             }
 
+            @Override
+            public boolean isInfoEnabled() {
+                return false;
+            }
+
+            @Override
+            public boolean isWarnEnabled() {
+                return false;
+            }
+
             @Override
             public void d(String s, Object... objects) {
 
             }
 
+            @Override
+            public void i(String text, Object... args) {
+
+            }
+
+            @Override
+            public void w(String text, Object... args) {
+
+            }
+
             @Override
             public void e(Throwable throwable, String s, Object... objects) {
                 objectReference.setObject(throwable);
diff --git a/jobqueue/src/test/java/co/alfabits/android/jobqueue/test/jobmanager/LoadFactorTest.java b/jobqueue/src/test/java/co/alfabits/android/jobqueue/test/jobmanager/LoadFactorTest.java
index ccb4f77..cf7b00e 100644
--- a/jobqueue/src/test/java/co/alfabits/android/jobqueue/test/jobmanager/LoadFactorTest.java
+++ b/jobqueue/src/test/java/co/alfabits/android/jobqueue/test/jobmanager/LoadFactorTest.java
@@ -5,7 +5,9 @@
 import co.alfabits.android.jobqueue.executor.JobConsumerExecutor;
 import co.alfabits.android.jobqueue.log.CustomLogger;
 import co.alfabits.android.jobqueue.test.jobs.DummyJob;
+
 import static org.hamcrest.CoreMatchers.*;
+
 import org.hamcrest.*;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -29,10 +31,38 @@ public void testLoadFactor() throws Exception {
                 .maxConsumerCount(maxConsumerCount)
                 .minConsumerCount(minConsumerCount)
                 .customLogger(new CustomLogger() {
-                    public boolean isDebugEnabled() {return true;}
-                    public void d(String text, Object... args) {System.out.println(String.format(text, args));}
-                    public void e(Throwable t, String text, Object... args) {t.printStackTrace(); System.out.println(String.format(text, args));}
-                    public void e(String text, Object... args) {System.out.println(String.format(text, args));}
+                    public boolean isDebugEnabled() {
+                        return true;
+                    }
+
+                    public boolean isInfoEnabled() {
+                        return true;
+                    }
+
+                    public boolean isWarnEnabled() {
+                        return true;
+                    }
+
+                    public void d(String text, Object... args) {
+                        System.out.println(String.format(text, args));
+                    }
+
+                    public void i(String text, Object... args) {
+                        System.out.println(String.format(text, args));
+                    }
+
+                    public void w(String text, Object... args) {
+                        System.out.println(String.format(text, args));
+                    }
+
+                    public void e(Throwable t, String text, Object... args) {
+                        t.printStackTrace();
+                        System.out.println(String.format(text, args));
+                    }
+
+                    public void e(String text, Object... args) {
+                        System.out.println(String.format(text, args));
+                    }
                 })
                 .loadFactor(loadFactor));
         JobConsumerExecutor consumerExecutor = getConsumerExecutor(jobManager);
@@ -41,30 +71,30 @@ public void testLoadFactor() throws Exception {
         Semaphore semaphore = new Semaphore(maxConsumerCount);
         int totalJobCount = loadFactor * maxConsumerCount * 5;
         List<DummyJob> runningJobs = new ArrayList<DummyJob>(totalJobCount);
-        for(int i = 0; i < totalJobCount; i ++) {
-            DummyJob job = new NeverEndingDummyJob(new Params((int)(Math.random() * 3)), runLock, semaphore);
+        for (int i = 0; i < totalJobCount; i++) {
+            DummyJob job = new NeverEndingDummyJob(new Params((int) (Math.random() * 3)), runLock, semaphore);
             runningJobs.add(job);
             jobManager.addJob(job);
 
-            int expectedConsumerCount = Math.min(maxConsumerCount, (int)Math.ceil((float)(i+1) / loadFactor));
-            if(i >= minConsumerCount) {
+            int expectedConsumerCount = Math.min(maxConsumerCount, (int) Math.ceil((float) (i + 1) / loadFactor));
+            if (i >= minConsumerCount) {
                 expectedConsumerCount = Math.max(minConsumerCount, expectedConsumerCount);
             }
             //wait till enough jobs start
             long now = System.nanoTime();
             long waitTill = now + TimeUnit.SECONDS.toNanos(10);
-            while(System.nanoTime() < waitTill) {
-                if(semaphore.availablePermits() == maxConsumerCount - expectedConsumerCount) {
+            while (System.nanoTime() < waitTill) {
+                if (semaphore.availablePermits() == maxConsumerCount - expectedConsumerCount) {
                     //enough # of jobs started
                     break;
                 }
             }
-            if(i < loadFactor) {
+            if (i < loadFactor) {
                 //make sure there is only min job running
                 MatcherAssert.assertThat("while below load factor, active consumer count should be = min",
                         activeConsumerCnt.get().get(), equalTo(Math.min(i + 1, minConsumerCount)));
             }
-            if(i > loadFactor) {
+            if (i > loadFactor) {
                 //make sure there is only 1 job running
                 MatcherAssert.assertThat("while above load factor. there should be more job consumers. i=" + i,
                         activeConsumerCnt.get().get(), equalTo(expectedConsumerCount));
@@ -74,15 +104,15 @@ public void testLoadFactor() throws Exception {
         //finish all jobs
         long now = System.nanoTime();
         long waitTill = now + TimeUnit.SECONDS.toNanos(10);
-        while(System.nanoTime() < waitTill) {
+        while (System.nanoTime() < waitTill) {
             synchronized (runLock) {
                 runLock.notifyAll();
             }
             long totalRunningCount = 0;
-            for(DummyJob job : runningJobs) {
+            for (DummyJob job : runningJobs) {
                 totalRunningCount += job.getOnRunCnt();
             }
-            if(totalJobCount == totalRunningCount) {
+            if (totalJobCount == totalRunningCount) {
                 //cool!
                 break;
             }
