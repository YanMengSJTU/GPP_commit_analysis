diff --git a/jobqueue/build.gradle b/jobqueue/build.gradle
index cfc9bbb..382aae8 100644
--- a/jobqueue/build.gradle
+++ b/jobqueue/build.gradle
@@ -7,7 +7,7 @@ releaseConfig.load(new FileInputStream("${projectDir}/releaseConfig.properties")
 ext.releaseConfig = releaseConfig
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.8'
+    gradleVersion = '2.2.1'
 }
 
 apply plugin: 'maven'
diff --git a/jobqueue/gradle/wrapper/gradle-wrapper.jar b/jobqueue/gradle/wrapper/gradle-wrapper.jar
index 05ef575..c97a8bd 100644
Binary files a/jobqueue/gradle/wrapper/gradle-wrapper.jar and b/jobqueue/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/jobqueue/gradle/wrapper/gradle-wrapper.properties b/jobqueue/gradle/wrapper/gradle-wrapper.properties
index 658e68d..515adf0 100644
--- a/jobqueue/gradle/wrapper/gradle-wrapper.properties
+++ b/jobqueue/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Nov 02 17:27:33 EST 2015
+#Tue Nov 03 10:23:29 EST 2015
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-bin.zip
diff --git a/jobqueue/gradlew b/jobqueue/gradlew
index 9d82f78..91a7e26 100755
--- a/jobqueue/gradlew
+++ b/jobqueue/gradlew
@@ -42,6 +42,11 @@ case "`uname`" in
     ;;
 esac
 
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
 # Attempt to set APP_HOME
 # Resolve links: $0 may be a link
 PRG="$0"
@@ -56,9 +61,9 @@ while [ -h "$PRG" ] ; do
     fi
 done
 SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >/dev/null
+cd "`dirname \"$PRG\"`/" >&-
 APP_HOME="`pwd -P`"
-cd "$SAVED" >/dev/null
+cd "$SAVED" >&-
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
@@ -109,7 +114,6 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
-    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
diff --git a/jobqueue/src/main/java/com/path/android/jobqueue/network/NetworkUtilImpl.java b/jobqueue/src/main/java/com/path/android/jobqueue/network/NetworkUtilImpl.java
index 96798f0..a56c072 100644
--- a/jobqueue/src/main/java/com/path/android/jobqueue/network/NetworkUtilImpl.java
+++ b/jobqueue/src/main/java/com/path/android/jobqueue/network/NetworkUtilImpl.java
@@ -1,5 +1,6 @@
 package com.path.android.jobqueue.network;
 
+import android.annotation.TargetApi;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
@@ -7,7 +8,6 @@
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.os.Build.VERSION;
-import android.os.Build.VERSION_CODES;
 import android.os.PowerManager;
 
 /**
@@ -16,10 +16,6 @@
 public class NetworkUtilImpl implements NetworkUtil, NetworkEventProvider {
     private Listener listener;
     public NetworkUtilImpl(Context context) {
-        IntentFilter networkIntentFilter = new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
-        if (VERSION.SDK_INT >= VERSION_CODES.M) {
-            networkIntentFilter.addAction(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
-        }
         context.getApplicationContext().registerReceiver(new BroadcastReceiver() {
             @Override
             public void onReceive(Context context, Intent intent) {
@@ -31,19 +27,13 @@ public void onReceive(Context context, Intent intent) {
                 // through getActiveNetworkInfo() or getAllNetworkInfo().
                 listener.onNetworkChange(isConnected(context));
             }
-        }, networkIntentFilter);
+        }, getNetworkIntentFilter());
     }
 
     @Override
     public boolean isConnected(Context context) {
-        // During Doze mode, also called Idle, the network is unavailable but isConnectedOrConnecting()
-        // will return true. So we first check if we are in idle mode through the PowerManager before
-        // trusting the ConnectivityManager.
-        if (VERSION.SDK_INT >= VERSION_CODES.M) {
-            PowerManager powerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
-            if (powerManager.isDeviceIdleMode()) {
-                return false;
-            }
+        if (isDozing(context)) {
+            return false;
         }
 
         ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
@@ -51,6 +41,29 @@ public boolean isConnected(Context context) {
         return netInfo != null && netInfo.isConnectedOrConnecting();
     }
 
+    @TargetApi(23)
+    private static IntentFilter getNetworkIntentFilter() {
+        IntentFilter networkIntentFilter = new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
+        if (VERSION.SDK_INT >= 23) {
+            networkIntentFilter.addAction(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
+        }
+        return networkIntentFilter;
+    }
+
+    /**
+     * Returns true if the device is in Doze/Idle mode. Should be called before checking the network connection because
+     * the ConnectionManager may report the device is connected when it isn't during Idle mode.
+     */
+    @TargetApi(23)
+    private static boolean isDozing(Context context) {
+        if (VERSION.SDK_INT >= 23) {
+            PowerManager powerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
+            return powerManager.isDeviceIdleMode();
+        } else {
+            return false;
+        }
+    }
+
     @Override
     public void setListener(Listener listener) {
         this.listener = listener;
