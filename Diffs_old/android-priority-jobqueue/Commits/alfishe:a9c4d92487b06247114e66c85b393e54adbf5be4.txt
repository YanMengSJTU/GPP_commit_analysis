diff --git a/jobqueue/build.gradle b/jobqueue/build.gradle
index cd3a517..913b260 100644
--- a/jobqueue/build.gradle
+++ b/jobqueue/build.gradle
@@ -31,6 +31,11 @@ android {
         targetSdkVersion 18
     }
 
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_7
+        targetCompatibility JavaVersion.VERSION_1_7
+    }
+
     packagingOptions {
         exclude 'META-INF/LICENSE.txt'
         exclude 'META-INF/LICENSE'
@@ -43,6 +48,15 @@ android {
     }
 
     sourceSets {
+        main {
+            manifest.srcFile 'src/main/AndroidManifest.xml'
+            java {
+                srcDir 'src/main/java'
+            }
+            res {
+                srcDir 'src/main/res'
+            }
+        }
         androidTest.setRoot('src/test')
     }
 }
@@ -76,3 +90,38 @@ robolectric {
     // configure max heap size of the test JVM
     maxHeapSize = "2048m"
 }
+
+android.libraryVariants.all { variant ->
+    def name = variant.name.capitalize()
+    task "javadoc$name"(type: Javadoc, dependsOn: "assemble$name") {
+        description = "Generates javadoc for build $name"
+        destinationDir = new File(destinationDir, variant.baseName)
+        source = files(variant.javaCompile.source)
+        classpath = files(android.getBootClasspath(), variant.javaCompile.classpath)
+        exclude '**/R.html', '**/R.*.html', '**/index.html'
+    }
+
+    task "javadoc${name}Jar"(type: Jar, dependsOn: "javadoc$name") {
+        classifier = 'javadoc'
+        destinationDir = file('build/outputs/jar/')
+        from tasks."javadoc$name".destinationDir
+    }
+}
+
+task androidJar(type: Copy, dependsOn: assembleRelease) {
+    from('build/intermediates/bundles/release/')
+    into('build/outputs/jar/')
+    include('classes.jar')
+    rename ('classes.jar', 'jobqueue.jar')
+}
+
+task sourcesJar(type: Jar, dependsOn: assembleRelease) {
+    classifier = 'sources'
+    destinationDir = file('build/outputs/jar/')
+    from android.sourceSets.main.java.srcDirs
+}
+
+artifacts {
+    archives sourcesJar
+    //archives javadocReleaseJar
+}
\ No newline at end of file
diff --git a/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java b/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
index 0a7c6b4..bd8182a 100644
--- a/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
+++ b/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
@@ -16,11 +16,11 @@
 
 /**
  * a JobManager that supports;
- * -> Persistent / Non Persistent Jobs
- * -> Job Priority
- * -> Running Jobs in Parallel
- * -> Grouping jobs so that they won't run at the same time
- * -> Stats like waiting Job Count
+ * - Persistent / Non Persistent Jobs
+ * - Job Priority
+ * - Running Jobs in Parallel
+ * - Grouping jobs so that they won't run at the same time
+ * - Stats like waiting Job Count
  */
 public class JobManager implements NetworkEventProvider.Listener {
     public static final long NS_PER_MS = 1000000;
@@ -611,7 +611,7 @@ public void run() {
 
     /**
      * Deprecated, please use {@link #addJobInBackground(Job)}.
-     * <p></p>Non-blocking convenience method to add a job in background thread.</p>
+     * <p>Non-blocking convenience method to add a job in background thread.</p>
      * @see #addJob(int, long, BaseJob) addJob(priority, delay, job).
      */
     @Deprecated
diff --git a/jobqueue/src/main/java/com/path/android/jobqueue/JobStatus.java b/jobqueue/src/main/java/com/path/android/jobqueue/JobStatus.java
index b687cc3..b3c00c0 100644
--- a/jobqueue/src/main/java/com/path/android/jobqueue/JobStatus.java
+++ b/jobqueue/src/main/java/com/path/android/jobqueue/JobStatus.java
@@ -23,14 +23,13 @@
     RUNNING,
     /**
      * Job is not known by job queue.
-     * <p>This might be:
+     * <p>This might be:</p>
      * <ul>
      *     <li>Invalid ID</li>
      *     <li>Job has been completed</li>
      *     <li>Job has failed</li>
      *     <li>Job has just been added, about to be delivered into a queue</li>
      * </ul>
-     * </p>
      */
     UNKNOWN
 }
diff --git a/jobqueue/src/main/java/com/path/android/jobqueue/config/Configuration.java b/jobqueue/src/main/java/com/path/android/jobqueue/config/Configuration.java
index 6fb3fca..337451e 100644
--- a/jobqueue/src/main/java/com/path/android/jobqueue/config/Configuration.java
+++ b/jobqueue/src/main/java/com/path/android/jobqueue/config/Configuration.java
@@ -104,8 +104,9 @@ public Builder consumerKeepAlive(int keepAlive) {
          * JobManager needs one persistent and one non-persistent {@link JobQueue} to function.
          * By default, it will use {@link SqliteJobQueue} and {@link NonPersistentPriorityQueue}
          * You can provide your own implementation if they don't fit your needs. Make sure it passes all tests in
-         * {@link JobQueueTestBase} to ensure it will work fine.
+         * JobQueueTestBase to ensure it will work fine.
          * @param queueFactory your custom queue factory.
+         * @return Configuration builder instance
          */
         public Builder queueFactory(QueueFactory queueFactory) {
             if(configuration.queueFactory != null) {
@@ -119,7 +120,7 @@ public Builder queueFactory(QueueFactory queueFactory) {
         /**
          * convenient configuration to replace job serializer while using {@link SqliteJobQueue} queue for persistence.
          * by default, it uses a {@link SqliteJobQueue.JavaSerializer} which will use default Java serialization.
-         * @param JobSerializer
+         * @param jobSerializer serializer
          * @return
          */
         public Builder jobSerializer(SqliteJobQueue.JobSerializer jobSerializer) {
