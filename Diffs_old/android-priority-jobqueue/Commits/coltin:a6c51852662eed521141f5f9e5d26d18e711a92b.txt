diff --git a/README.md b/README.md
index 9716c99..e0c0f4c 100644
--- a/README.md
+++ b/README.md
@@ -15,8 +15,7 @@ It is written primarily with [flexibility][10] & [functionality][11] in mind. Th
   - [Advantages](#advantages)
   - [Getting Started](#getting-started)
   - [Version History](#version-history)
-  - [Building](#building)
-   - [Running Tests](#running-tests)
+  - [Running Tests](#running-tests)
   - [wiki][9]
   - [Dependencies](#dependencies)
   - [License](#license)
@@ -188,17 +187,16 @@ We highly recommend checking how you can configure job manager and individual jo
 - - [Path's fork of greenDAO](https://github.com/path/greenDAO) . ([original repo](https://github.com/greenrobot/greenDAO))
 
 ### Building
-We are in the process of moving build system from ant to gradle. Right now, you can build with gradle but if you want to run tests, you'll need ant.
 
 * Clone the repo
 * `> cd jobqueue`
-* `> ant clean build-jar`
+* `> ./gradlew clean assembleDebug assembleDebugUnitTest test`
 *
 This will create a jar file under _release_ folder.
 
 #### Running Tests
 * > `cd jobqueue`
-* > `ant clean test`
+* > `./gradlew clean assembleDebug assembleDebugUnitTest test`
 
 
 ## License
diff --git a/jobqueue/build.gradle b/jobqueue/build.gradle
index b3d0534..16f8407 100644
--- a/jobqueue/build.gradle
+++ b/jobqueue/build.gradle
@@ -6,7 +6,7 @@ Properties releaseConfig = new Properties()
 releaseConfig.load(new FileInputStream("${projectDir}/releaseConfig.properties"))
 ext.releaseConfig = releaseConfig
 task wrapper(type: Wrapper) {
-    gradleVersion = '1.12'
+    gradleVersion = '2.2.1'
 }
 
 apply plugin: 'maven'
@@ -19,7 +19,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.2.0-beta2'
+        classpath 'com.android.tools.build:gradle:1.1.3'
     }
 }
 
@@ -36,7 +36,7 @@ configurations {
 
 dependencies {
     testCompile 'junit:junit:4.12'
-    testCompile 'org.robolectric:robolectric:2.4'
+    testCompile "org.robolectric:robolectric:3.0-rc3"
     testCompile 'org.hamcrest:hamcrest-core:1.3'
     testCompile 'org.easytesting:fest-util:1.2.5'
     testCompile 'org.easytesting:fest-reflect:1.4.1'
@@ -46,14 +46,18 @@ dependencies {
 
 
 android {
-    compileSdkVersion 22
-    buildToolsVersion "22"
+    compileSdkVersion 21
+    buildToolsVersion "22.0.1"
     buildTypes {
         debug {
             testCoverageEnabled = true
         }
     }
 
+    defaultConfig {
+        minSdkVersion 7
+        targetSdkVersion 21
+    }
 }
 
 //READ VERSION NAME
@@ -156,14 +160,6 @@ afterEvaluate { project ->
                             name "Yigit Boyar"
                         }
                     }
-
-                    dependencies {
-                        dependency {
-                            groupId 'com.google.android'
-                            artifactId 'android'
-                            version '2.2.1'
-                        }
-                    }
                 }
             }
         }
diff --git a/jobqueue/gradle/wrapper/gradle-wrapper.jar b/jobqueue/gradle/wrapper/gradle-wrapper.jar
index 5838598..c97a8bd 100644
Binary files a/jobqueue/gradle/wrapper/gradle-wrapper.jar and b/jobqueue/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/jobqueue/gradle/wrapper/gradle-wrapper.properties b/jobqueue/gradle/wrapper/gradle-wrapper.properties
index ccea1f2..d17e36c 100644
--- a/jobqueue/gradle/wrapper/gradle-wrapper.properties
+++ b/jobqueue/gradle/wrapper/gradle-wrapper.properties
@@ -1,4 +1,4 @@
-#Sun Apr 12 14:08:24 PDT 2015
+#Fri Jul 03 10:16:32 PDT 2015
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
diff --git a/jobqueue/src/main/AndroidManifest.xml b/jobqueue/src/main/AndroidManifest.xml
index fc39c78..384b8c0 100644
--- a/jobqueue/src/main/AndroidManifest.xml
+++ b/jobqueue/src/main/AndroidManifest.xml
@@ -2,7 +2,7 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.path.android.jobqueue"
           android:versionCode="2"
-          android:versionName="1.3.1">
-    <application android:label="">
+          android:versionName="1.3.2-SNAPSHOT">
+    <application>
     </application>
 </manifest>
diff --git a/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java b/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
index f602e48..9c6c1ce 100644
--- a/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
+++ b/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
@@ -274,32 +274,37 @@ public void onJobCancelled(JobHolder holder) {
     public JobHolder nextJobAndIncRunCount(boolean hasNetwork, Collection<String> excludeGroups) {
         //we can even keep these prepared but not sure the cost of them in db layer
         String selectQuery = nextJobsQueryCache.get(hasNetwork, excludeGroups);
-        if(selectQuery == null) {
+        if (selectQuery == null) {
             String where = createReadyJobWhereSql(hasNetwork, excludeGroups, false);
             selectQuery = sqlHelper.createSelect(
                     where,
                     1,
-                    new SqlHelper.Order(DbOpenHelper.PRIORITY_COLUMN, SqlHelper.Order.Type.DESC),
-                    new SqlHelper.Order(DbOpenHelper.CREATED_NS_COLUMN, SqlHelper.Order.Type.ASC),
+                    new SqlHelper.Order(DbOpenHelper.PRIORITY_COLUMN,
+                            SqlHelper.Order.Type.DESC),
+                    new SqlHelper.Order(DbOpenHelper.CREATED_NS_COLUMN,
+                            SqlHelper.Order.Type.ASC),
                     new SqlHelper.Order(DbOpenHelper.ID_COLUMN, SqlHelper.Order.Type.ASC)
             );
             nextJobsQueryCache.set(selectQuery, hasNetwork, excludeGroups);
         }
-        Cursor cursor = db.rawQuery(selectQuery, new String[]{Long.toString(sessionId),Long.toString(System.nanoTime())});
-        try {
-            if (!cursor.moveToNext()) {
-                return null;
+        while (true) {
+            Cursor cursor = db.rawQuery(selectQuery,
+                    new String[]{Long.toString(sessionId), Long.toString(System.nanoTime())});
+            try {
+                if (!cursor.moveToNext()) {
+                    return null;
+                }
+                JobHolder holder = createJobHolderFromCursor(cursor);
+                setSessionIdOnJob(holder);
+                return holder;
+            } catch (InvalidJobException e) {
+                //delete
+                Long jobId = cursor.getLong(0);
+                delete(jobId);
+                return nextJobAndIncRunCount(true, null);
+            } finally {
+                cursor.close();
             }
-            JobHolder holder = createJobHolderFromCursor(cursor);
-            setSessionIdOnJob(holder);
-            return holder;
-        } catch (InvalidJobException e) {
-            //delete
-            Long jobId = cursor.getLong(0);
-            delete(jobId);
-            return nextJobAndIncRunCount(true, null);
-        } finally {
-            cursor.close();
         }
     }
 
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/AddInBackgroundTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/AddInBackgroundTest.java
index 0ce8b25..59f9ed2 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/AddInBackgroundTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/AddInBackgroundTest.java
@@ -13,11 +13,13 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicLong;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class AddInBackgroundTest extends JobManagerTestBase {
     @Test
     public void testAddInBackground() throws InterruptedException {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/AddedCountTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/AddedCountTest.java
index 327ea69..356b829 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/AddedCountTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/AddedCountTest.java
@@ -6,11 +6,13 @@
 import org.hamcrest.MatcherAssert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class AddedCountTest extends JobManagerTestBase {
     @Test
     public void testAddedCount() throws Exception {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelBeforeRunningTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelBeforeRunningTest.java
index 17a2e0c..bd54746 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelBeforeRunningTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelBeforeRunningTest.java
@@ -11,12 +11,14 @@
 import static org.hamcrest.MatcherAssert.*;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class CancelBeforeRunningTest extends JobManagerTestBase {
     @Test
     public void testCancelBeforeRunning() {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelFailingJobsTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelFailingJobsTest.java
index f63206f..a94edea 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelFailingJobsTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelFailingJobsTest.java
@@ -10,7 +10,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
@@ -18,8 +20,8 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-@RunWith(RobolectricTestRunner.class)
-
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class CancelFailingJobsTest extends JobManagerTestBase {
     static DummyNetworkUtilWithConnectivityEventSupport networkUtil = new
             DummyNetworkUtilWithConnectivityEventSupport();
@@ -47,7 +49,7 @@ public void testCancelAllSyncWithoutNetwork() throws InterruptedException {
 
     public void testCancelWithoutNetwork(boolean async, TagConstraint constraint)
             throws InterruptedException {
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application)
+        JobManager jobManager = createJobManager(new Configuration.Builder(RuntimeEnvironment.application)
                 .minConsumerCount(5)
                 .networkUtil(networkUtil));
         networkUtil.setHasNetwork(false, true);
@@ -109,7 +111,7 @@ public void testCancelAllSyncWithoutNetworAndPersistent() throws InterruptedExce
     static int latchCounter = 0;
     public void testCancelWithoutNetworkPersistent(boolean async, TagConstraint constraint)
             throws InterruptedException {
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application)
+        JobManager jobManager = createJobManager(new Configuration.Builder(RuntimeEnvironment.application)
                 .minConsumerCount(5)
                 .networkUtil(networkUtil));
         networkUtil.setHasNetwork(false, true);
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelWhileRunningTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelWhileRunningTest.java
index d50aa2e..9adc156 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelWhileRunningTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelWhileRunningTest.java
@@ -12,7 +12,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
@@ -20,11 +22,12 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class CancelWhileRunningTest extends JobManagerTestBase {
     @Test
     public void testCancelBeforeRunning() throws InterruptedException {
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application).minConsumerCount(5));
+        JobManager jobManager = createJobManager(new Configuration.Builder(RuntimeEnvironment.application).minConsumerCount(5));
         JobWithEndLatch nonPersistent1 = new JobWithEndLatch(new Params(0).addTags("dummyTag"), true);
         JobWithEndLatch nonPersistent2 = new JobWithEndLatch(new Params(0).addTags("dummyTag"), false);
         DummyJob persistentJob1 = new PersistentJobWithEndLatch(new Params(0).addTags("dummyTag"), false);
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelWhileRunningWithGroupsTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelWhileRunningWithGroupsTest.java
index 0d9aa3a..1dfb76b 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelWhileRunningWithGroupsTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelWhileRunningWithGroupsTest.java
@@ -10,7 +10,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
@@ -18,13 +20,14 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class CancelWhileRunningWithGroupsTest extends JobManagerTestBase {
     public static CountDownLatch[] endLatches = new CountDownLatch[]{new CountDownLatch(2), new CountDownLatch(2)};
     public static CountDownLatch[] startLatches = new CountDownLatch[]{new CountDownLatch(2), new CountDownLatch(2)};
     @Test
     public void testCancelBeforeRunning() throws InterruptedException {
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application).minConsumerCount(5));
+        JobManager jobManager = createJobManager(new Configuration.Builder(RuntimeEnvironment.application).minConsumerCount(5));
         jobManager.addJob(new DummyJobWithLatches(0, new Params(1).addTags("dummyTag").groupBy("group1")));
         jobManager.addJob(new DummyJobWithLatches(0, new Params(1).addTags("dummyTag").groupBy("group2").persist()));
         assertThat("both jobs should start", startLatches[0].await(2, TimeUnit.SECONDS), is(true));
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelWithNetworkToggleTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelWithNetworkToggleTest.java
index 58dc76e..666a705 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelWithNetworkToggleTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CancelWithNetworkToggleTest.java
@@ -13,13 +13,15 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
-@RunWith(RobolectricTestRunner.class)
-
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class CancelWithNetworkToggleTest extends JobManagerTestBase {
 
     @Test
@@ -47,7 +49,7 @@ public void testCancelWithoutNetwork(boolean async, TagConstraint constraint)
             throws InterruptedException {
         DummyNetworkUtilWithConnectivityEventSupport networkUtil = new
                 DummyNetworkUtilWithConnectivityEventSupport();
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application)
+        JobManager jobManager = createJobManager(new Configuration.Builder(RuntimeEnvironment.application)
                 .minConsumerCount(5)
                 .networkUtil(networkUtil));
         networkUtil.setHasNetwork(false, true);
@@ -111,7 +113,7 @@ public void testCancelWithoutNetworkPersistent(boolean async, TagConstraint cons
             throws InterruptedException {
         DummyNetworkUtilWithConnectivityEventSupport networkUtil = new
                 DummyNetworkUtilWithConnectivityEventSupport();
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application)
+        JobManager jobManager = createJobManager(new Configuration.Builder(RuntimeEnvironment.application)
                 .minConsumerCount(5)
                 .networkUtil(networkUtil));
         networkUtil.setHasNetwork(false, true);
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/ClearTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/ClearTest.java
index 89f2e81..4bea355 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/ClearTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/ClearTest.java
@@ -8,8 +8,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class ClearTest extends JobManagerTestBase {
     @Test
     public void testClear() throws Exception {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/ConsumerCountTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/ConsumerCountTest.java
index aeaff87..ecc2606 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/ConsumerCountTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/ConsumerCountTest.java
@@ -9,18 +9,20 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.Semaphore;
 import java.util.concurrent.TimeUnit;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class ConsumerCountTest extends JobManagerTestBase {
     @Test
     public void testMaxConsumerCount() throws Exception {
         int maxConsumerCount = 2;
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application)
+        JobManager jobManager = createJobManager(new Configuration.Builder(RuntimeEnvironment.application)
                 .maxConsumerCount(maxConsumerCount)
                 .loadFactor(maxConsumerCount));
         Object runLock = new Object();
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CountTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CountTest.java
index 26a2604..9579181 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CountTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/CountTest.java
@@ -8,8 +8,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class CountTest extends JobManagerTestBase {
     @Test
     public void testCount() throws Exception {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/DelayTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/DelayTest.java
index 6d0139e..e5f06f0 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/DelayTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/DelayTest.java
@@ -11,8 +11,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class DelayTest extends JobManagerTestBase {
     @Test
     public void testDelay() throws Exception {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/DelayedRunTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/DelayedRunTest.java
index f2d93e4..2b893f0 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/DelayedRunTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/DelayedRunTest.java
@@ -8,8 +8,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class DelayedRunTest extends JobManagerTestBase {
     @Test
     public void testDelayedRun() throws Exception {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/GroupingTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/GroupingTest.java
index 0739d3c..b2e10da 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/GroupingTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/GroupingTest.java
@@ -11,11 +11,13 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicInteger;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class GroupingTest extends JobManagerTestBase {
     @Test
     public void testGrouping() throws Exception {
@@ -43,7 +45,7 @@ public void testGrouping() throws Exception {
     @Test
     public void testGroupingRaceCondition() throws Exception {
         DummyNetworkUtilWithConnectivityEventSupport dummyNetworkUtil = new DummyNetworkUtilWithConnectivityEventSupport();
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application)
+        JobManager jobManager = createJobManager(new Configuration.Builder(RuntimeEnvironment.application)
                 .minConsumerCount(5).maxConsumerCount(10)
                 .networkUtil(dummyNetworkUtil));
         dummyNetworkUtil.setHasNetwork(false, true);
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/InjectorTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/InjectorTest.java
index bad0399..d14868a 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/InjectorTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/InjectorTest.java
@@ -13,16 +13,18 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class InjectorTest extends JobManagerTestBase {
     @Test
     public void testInjector() throws Exception {
-        Configuration.Builder builder = new Configuration.Builder(Robolectric.application);
+        Configuration.Builder builder = new Configuration.Builder(RuntimeEnvironment.application);
         final JobManagerTestBase.ObjectReference injectedJobReference = new JobManagerTestBase.ObjectReference();
         final AtomicInteger injectionCallCount = new AtomicInteger(0);
         DependencyInjector dependencyInjector = new DependencyInjector() {
@@ -81,7 +83,7 @@ public void e(String s, Object... objects) {
                 //
             }
         };
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application).injector(dummyDependencyInjector).customLogger(customLogger));
+        JobManager jobManager = createJobManager(new Configuration.Builder(RuntimeEnvironment.application).injector(dummyDependencyInjector).customLogger(customLogger));
         Throwable addException = null;
         try {
             jobManager.addJob(new DummyJob(new Params(0)));
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/JobManagerTestBase.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/JobManagerTestBase.java
index 4456bf8..8bf9eb9 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/JobManagerTestBase.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/JobManagerTestBase.java
@@ -28,14 +28,14 @@
 public class JobManagerTestBase extends TestBase {
     List<JobManager> createdJobManagers = new ArrayList<JobManager>();
     protected JobManager createJobManager() {
-        final JobManager jobManager = new JobManager(Robolectric.application,
+        final JobManager jobManager = new JobManager(RuntimeEnvironment.application,
                 UUID.randomUUID().toString());
         createdJobManagers.add(jobManager);
         return jobManager;
     }
 
     protected JobManager createJobManager(Configuration.Builder configurationBuilder) {
-        final JobManager jobManager = new JobManager(Robolectric.application,
+        final JobManager jobManager = new JobManager(RuntimeEnvironment.application,
                 configurationBuilder.id(UUID.randomUUID().toString()).build());
         createdJobManagers.add(jobManager);
         return jobManager;
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/JobStatusTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/JobStatusTest.java
index a55224c..d6d0c27 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/JobStatusTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/JobStatusTest.java
@@ -11,18 +11,20 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class JobStatusTest extends JobManagerTestBase {
     @Test
     public void testJobStatus() throws InterruptedException {
         DummyNetworkUtilWithConnectivityEventSupport networkUtil = new DummyNetworkUtilWithConnectivityEventSupport();
         networkUtil.setHasNetwork(false, true);
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application).networkUtil(networkUtil));
+        JobManager jobManager = createJobManager(new Configuration.Builder(RuntimeEnvironment.application).networkUtil(networkUtil));
         jobManager.stop();
         List<Integer> networkRequiringJobIndices = new ArrayList<Integer>();
         Job[] jobs = new Job[] {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/KeepAliveTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/KeepAliveTest.java
index fcdc80d..fc283c3 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/KeepAliveTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/KeepAliveTest.java
@@ -9,20 +9,22 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class KeepAliveTest extends JobManagerTestBase {
     @Test
     public void testKeepAlive() throws Exception {
         int keepAlive = 3 + (int)(Math.random() * 5);
         DummyNetworkUtil networkUtilWithoutEventSupport = new DummyNetworkUtil();
         DummyNetworkUtilWithConnectivityEventSupport networkUtilWithEventSupport = new DummyNetworkUtilWithConnectivityEventSupport();
-        JobManager jobManager1 = createJobManager(new Configuration.Builder(Robolectric.application)
+        JobManager jobManager1 = createJobManager(new Configuration.Builder(RuntimeEnvironment.application)
                 .consumerKeepAlive(keepAlive).networkUtil(networkUtilWithoutEventSupport));
-        JobManager jobManager2 = createJobManager(new Configuration.Builder(Robolectric.application)
+        JobManager jobManager2 = createJobManager(new Configuration.Builder(RuntimeEnvironment.application)
                 .consumerKeepAlive(keepAlive)
                 .networkUtil(networkUtilWithEventSupport));
         //give it a little time to create first consumer
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/LoadFactorTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/LoadFactorTest.java
index f713c47..212b64f 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/LoadFactorTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/LoadFactorTest.java
@@ -10,6 +10,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -17,7 +18,8 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class LoadFactorTest extends JobManagerTestBase {
     @Test
     public void testLoadFactor() throws Exception {
@@ -25,7 +27,7 @@ public void testLoadFactor() throws Exception {
         int maxConsumerCount = 5;
         int minConsumerCount = 2;
         int loadFactor = 5;
-        com.path.android.jobqueue.JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application)
+        com.path.android.jobqueue.JobManager jobManager = createJobManager(new Configuration.Builder(RuntimeEnvironment.application)
                 .maxConsumerCount(maxConsumerCount)
                 .minConsumerCount(minConsumerCount)
                 .customLogger(new CustomLogger() {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/MultiThreadTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/MultiThreadTest.java
index da5e609..981a489 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/MultiThreadTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/MultiThreadTest.java
@@ -13,6 +13,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
 import java.util.Collection;
 import java.util.LinkedList;
@@ -23,13 +24,14 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class MultiThreadTest extends JobManagerTestBase {
     private static AtomicInteger multiThreadedJobCounter;
     @Test
     public void testMultiThreaded() throws Exception {
         multiThreadedJobCounter = new AtomicInteger(0);
-        final JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application)
+        final JobManager jobManager = createJobManager(new Configuration.Builder(RuntimeEnvironment.application)
             .loadFactor(3).maxConsumerCount(10));
         int limit = 200;
         ExecutorService executor = new ThreadPoolExecutor(20, 20, 60, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(limit));
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/NetworkJobTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/NetworkJobTest.java
index 15e9819..dfed6da 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/NetworkJobTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/NetworkJobTest.java
@@ -9,13 +9,15 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class NetworkJobTest extends JobManagerTestBase {
     @Test
     public void testNetworkJob() throws Exception {
         JobManagerTestBase.DummyNetworkUtil dummyNetworkUtil = new JobManagerTestBase.DummyNetworkUtil();
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application).networkUtil(dummyNetworkUtil));
+        JobManager jobManager = createJobManager(new Configuration.Builder(RuntimeEnvironment.application).networkUtil(dummyNetworkUtil));
         jobManager.stop();
 
         DummyJob networkDummyJob = new DummyJob(new Params(5).requireNetwork());
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/NetworkJobWithConnectivityListenerTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/NetworkJobWithConnectivityListenerTest.java
index d275718..3446739 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/NetworkJobWithConnectivityListenerTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/NetworkJobWithConnectivityListenerTest.java
@@ -8,15 +8,17 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class NetworkJobWithConnectivityListenerTest extends JobManagerTestBase {
     @Test
     public void testNetworkJobWithConnectivityListener() throws Exception {
         DummyNetworkUtilWithConnectivityEventSupport dummyNetworkUtil = new DummyNetworkUtilWithConnectivityEventSupport();
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application).networkUtil(dummyNetworkUtil));
+        JobManager jobManager = createJobManager(new Configuration.Builder(RuntimeEnvironment.application).networkUtil(dummyNetworkUtil));
         dummyNetworkUtil.setHasNetwork(false, true);
         DummyJob dummyJob = new DummyJob(new Params(0).requireNetwork());
         long dummyJobId = jobManager.addJob(dummyJob);
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/NetworkNextJobTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/NetworkNextJobTest.java
index f07f629..56c34a8 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/NetworkNextJobTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/NetworkNextJobTest.java
@@ -10,17 +10,19 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.hamcrest.CoreMatchers.nullValue;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class NetworkNextJobTest extends JobManagerTestBase {
     @Test
     public void testNetworkNextJob() throws Exception {
         DummyNetworkUtil dummyNetworkUtil = new DummyNetworkUtil();
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application).networkUtil(dummyNetworkUtil));
+        JobManager jobManager = createJobManager(new Configuration.Builder(RuntimeEnvironment.application).networkUtil(dummyNetworkUtil));
         jobManager.stop();
         DummyJob dummyJob = new DummyJob(new Params(0).requireNetwork());
         long dummyJobId = jobManager.addJob(dummyJob);
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/PersistentJobTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/PersistentJobTest.java
index f76b2f9..dae3514 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/PersistentJobTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/PersistentJobTest.java
@@ -8,11 +8,13 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class PersistentJobTest extends JobManagerTestBase {
     //TEST parallel running
     public static CountDownLatch persistentRunLatch = new CountDownLatch(1);
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/PriorityTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/PriorityTest.java
index e7ec1f8..982d8fd 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/PriorityTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/PriorityTest.java
@@ -9,18 +9,20 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class PriorityTest extends JobManagerTestBase {
     private static CountDownLatch priorityRunLatch;
 
     @Test
     public void testPriority() throws Exception {
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application).maxConsumerCount(1));
+        JobManager jobManager = createJobManager(new Configuration.Builder(RuntimeEnvironment.application).maxConsumerCount(1));
         testPriority(jobManager, false);
     }
 
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/ReRunWithLimitTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/ReRunWithLimitTest.java
index 7d8f356..2c128c5 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/ReRunWithLimitTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/ReRunWithLimitTest.java
@@ -5,11 +5,13 @@
 import org.hamcrest.MatcherAssert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class ReRunWithLimitTest extends JobManagerTestBase {
     @Test
     public void testReRunWithLimit() throws Exception {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/RunFailingJobTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/RunFailingJobTest.java
index a1ff003..3c30f03 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/RunFailingJobTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/RunFailingJobTest.java
@@ -9,11 +9,13 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class RunFailingJobTest extends JobManagerTestBase {
     @Test
     public void runFailingJob() throws Exception {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/RunManyNonPersistentTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/RunManyNonPersistentTest.java
index 0828286..6a74541 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/RunManyNonPersistentTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/RunManyNonPersistentTest.java
@@ -7,11 +7,13 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class RunManyNonPersistentTest extends JobManagerTestBase {
     @Test
     public void runManyNonPersistentJobs() throws Exception {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/SessionIdTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/SessionIdTest.java
index 35e9aae..f145a6e 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/SessionIdTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/SessionIdTest.java
@@ -13,8 +13,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class SessionIdTest extends JobManagerTestBase {
     @Test
     public void testSessionId() throws Exception {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/SlowOnAddedTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/SlowOnAddedTest.java
index fda6e29..e39a844 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/SlowOnAddedTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/SlowOnAddedTest.java
@@ -9,10 +9,12 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CountDownLatch;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class SlowOnAddedTest extends JobManagerTestBase {
     @Test
     public void testNonPersistent() throws InterruptedException {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/CachedNonPersistentJobQueueTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/CachedNonPersistentJobQueueTest.java
index 6cc6673..a6d3873 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/CachedNonPersistentJobQueueTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/CachedNonPersistentJobQueueTest.java
@@ -7,8 +7,10 @@
 import com.path.android.jobqueue.test.util.JobQueueFactory;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class CachedNonPersistentJobQueueTest extends JobQueueTestBase {
     public CachedNonPersistentJobQueueTest() {
         super(new JobQueueFactory() {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/CachedPersistentJobQueueTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/CachedPersistentJobQueueTest.java
index 3149a14..473cb4a 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/CachedPersistentJobQueueTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/CachedPersistentJobQueueTest.java
@@ -5,14 +5,16 @@
 import com.path.android.jobqueue.test.util.JobQueueFactory;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class CachedPersistentJobQueueTest extends JobQueueTestBase {
     public CachedPersistentJobQueueTest() {
         super(new JobQueueFactory() {
             @Override
             public JobQueue createNew(long sessionId, String id) {
-                return new SqliteJobQueue(Robolectric.application, sessionId, id, new SqliteJobQueue.JavaSerializer(), true);
+                return new SqliteJobQueue(RuntimeEnvironment.application, sessionId, id, new SqliteJobQueue.JavaSerializer(), true);
             }
         });
     }
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/JobParamsTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/JobParamsTest.java
index fb60538..b3458e0 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/JobParamsTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/JobParamsTest.java
@@ -8,8 +8,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class JobParamsTest extends TestBase {
     @Test
     public void assertParamsUnderstood() {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/NonPersistentJobQueueTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/NonPersistentJobQueueTest.java
index aee2fec..08164be 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/NonPersistentJobQueueTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/NonPersistentJobQueueTest.java
@@ -12,12 +12,14 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
+import org.robolectric.annotation.Config;
 
 import java.util.Collections;
 
 import static com.path.android.jobqueue.TagConstraint.ANY;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class NonPersistentJobQueueTest extends JobQueueTestBase {
     public NonPersistentJobQueueTest() {
         super(new JobQueueFactory() {
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/SqliteJobQueueTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/SqliteJobQueueTest.java
index c63e117..a38ba87 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/SqliteJobQueueTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobqueue/SqliteJobQueueTest.java
@@ -10,19 +10,22 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
 
 import java.io.IOException;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class SqliteJobQueueTest extends JobQueueTestBase {
     public SqliteJobQueueTest() {
         super(new JobQueueFactory() {
             @Override
             public JobQueue createNew(long sessionId, String id) {
-                return new SqliteJobQueue(Robolectric.application, sessionId, id, new SqliteJobQueue.JavaSerializer(), true);
+                return new SqliteJobQueue(RuntimeEnvironment.application, sessionId, id, new SqliteJobQueue.JavaSerializer(), true);
             }
         });
     }
@@ -44,7 +47,7 @@ public void testCustomSerializer() throws Exception {
                 return super.deserialize(bytes);
             }
         };
-        SqliteJobQueue jobQueue = new SqliteJobQueue(Robolectric.application, System.nanoTime(), "__" + System.nanoTime(),
+        SqliteJobQueue jobQueue = new SqliteJobQueue(RuntimeEnvironment.application, System.nanoTime(), "__" + System.nanoTime(),
                 jobSerializer, true);
         jobQueue.insert(createNewJobHolder(new Params(0)));
         calledForSerialize.await(1, TimeUnit.SECONDS);
