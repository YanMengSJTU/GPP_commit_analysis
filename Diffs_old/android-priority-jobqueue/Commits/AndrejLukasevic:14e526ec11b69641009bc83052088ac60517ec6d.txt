diff --git a/.gitignore b/.gitignore
index 4177291..2fe213d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -14,6 +14,7 @@ gen/
 
 # Local configuration file (sdk path, etc)
 local.properties
+gradle.properties
 
 # Eclipse project files
 .classpath
@@ -33,3 +34,5 @@ out
 pages
 .gradle
 build
+
+
diff --git a/gradle.properties b/gradle.properties
index ada1a03..bb808c5 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -17,16 +17,30 @@
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
 
-VERSION_NAME=1.2
+POM_NAME=Foo
+POM_ARTIFACT_ID=foo
+POM_PACKAGING=aar
+VERSION_NAME=1.0.0
 VERSION_CODE=1
-GROUP=com.survivingwithandroid
-POM_DESCRIPTION=Android Weather Lib
-POM_URL=https://github.com/survivingwithandroid/WeatherLib
-POM_SCM_URL=https://github.com/survivingwithandroid/WeatherLib
-POM_SCM_CONNECTION=scm:git@github.com:survivingwithandroid/weatherlib.git
-POM_SCM_DEV_CONNECTION=scm:git@github.com:survivingwithandroid/weatherlib.git
-POM_LICENCE_NAME=The Apache Software License, Version 2.0
-POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
+GROUP=com.bitbucket.johndoe
+
+POM_DESCRIPTION=Foo library
+POM_URL=https://bitbucket.org/johndoe/foo
+POM_SCM_URL=https://bitbucket.org/johndoe/foo
+POM_SCM_CONNECTION=scm:hg:https://bitbucket.org/johndoe/foo
+POM_SCM_DEV_CONNECTION=scm:hg:https://bitbucket.org/johndoe/foo
+POM_LICENCE_NAME=MIT License
+POM_LICENCE_URL=http://www.opensource.org/licenses/mit-license.php
 POM_LICENCE_DIST=repo
-POM_DEVELOPER_ID=survivingwithandroid
-POM_DEVELOPER_NAME=Francesco Azzola
\ No newline at end of file
+POM_DEVELOPER_ID=johndoe
+POM_DEVELOPER_NAME=johndoe
+
+NEXUS_USERNAME=johndoe
+NEXUS_PASSWORD=1234567890
+
+SNAPSHOT_REPOSITORY_URL=https://oss.sonatype.org/content/repositories/snapshots
+RELEASE_REPOSITORY_URL=https://oss.sonatype.org/service/local/staging/deploy/maven2
+
+signing.keyId=YYYYYYYY
+signing.password=1234567890
+signing.secretKeyRingFile=/home/johndoe/.gnupg/secring.gpg
\ No newline at end of file
diff --git a/jobmanagerlib/build.gradle b/jobmanagerlib/build.gradle
index 53b1530..a53f466 100644
--- a/jobmanagerlib/build.gradle
+++ b/jobmanagerlib/build.gradle
@@ -1,98 +1,101 @@
 apply plugin: 'com.android.library'
-//apply plugin: 'maven'
-//apply plugin: 'signing'
-//
-//def sonatypeRepositoryUrl
-//if (isReleaseBuild()) {
-//    println 'RELEASE BUILD'
-//    sonatypeRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
-//            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
-//} else {
-//    println 'SNAPSHOT BUILD'
-//    sonatypeRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
-//            : "https://oss.sonatype.org/content/repositories/snapshots/"
-//
-//}
-//
-//def getRepositoryUsername() {
-//    return hasProperty('nexusUsername') ? nexusUsername : ""
-//}
-//
-//def getRepositoryPassword() {
-//    return hasProperty('nexusPassword') ? nexusPassword : ""
-//}
-//
-//afterEvaluate { project ->
-//    uploadArchives {
-//        repositories {
-//            mavenDeployer {
-//                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
-//
-//                pom.artifactId = POM_ARTIFACT_ID
-//
-//                repository(url: sonatypeRepositoryUrl) {
-//                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
-//                }
-//
-//                pom.project {
-//                    name POM_NAME
-//                    packaging POM_PACKAGING
-//                    description POM_DESCRIPTION
-//                    url POM_URL
-//
-//                    scm {
-//                        url POM_SCM_URL
-//                        connection POM_SCM_CONNECTION
-//                        developerConnection POM_SCM_DEV_CONNECTION
-//                    }
-//
-//                    licenses {
-//                        license {
-//                            name POM_LICENCE_NAME
-//                            url POM_LICENCE_URL
-//                            distribution POM_LICENCE_DIST
-//                        }
-//                    }
-//
-//                    developers {
-//                        developer {
-//                            id POM_DEVELOPER_ID
-//                            name POM_DEVELOPER_NAME
-//                        }
-//                    }
-//                }
-//            }
-//        }
-//    }
-//
-//    signing {
-//        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
-//        sign configurations.archives
-//    }
-//
-//    task androidJavadocs(type: Javadoc) {
-//        source = android.sourceSets.main.allJava
-//        classpath += project.files(android.plugin.getRuntimeJarList().join(File.pathSeparator))
-//    }
-//
-//    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
-//        classifier = 'javadoc'
-//        //basename = artifact_id
-//        from androidJavadocs.destinationDir
-//    }
-//
-//    task androidSourcesJar(type: Jar) {
-//        classifier = 'sources'
-//        //basename = artifact_id
-//        from android.sourceSets.main.allSource
-//    }
-//
-//    artifacts {
-//        //archives packageReleaseJar
-//        archives androidSourcesJar
-//        archives androidJavadocsJar
-//    }
-//}
+
+apply plugin: 'maven'
+apply plugin: 'signing'
+
+def isReleaseBuild() {
+    return VERSION_NAME.contains("SNAPSHOT") == false
+}
+
+def getReleaseRepositoryUrl() {
+    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
+            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
+}
+
+def getSnapshotRepositoryUrl() {
+    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
+            : "https://oss.sonatype.org/content/repositories/snapshots/"
+}
+
+def getRepositoryUsername() {
+    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
+}
+
+def getRepositoryPassword() {
+    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
+}
+
+afterEvaluate { project ->
+    uploadArchives {
+        repositories {
+            mavenDeployer {
+                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+
+                pom.groupId = GROUP
+                pom.artifactId = POM_ARTIFACT_ID
+                pom.version = VERSION_NAME
+
+                repository(url: getReleaseRepositoryUrl()) {
+                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+                }
+                snapshotRepository(url: getSnapshotRepositoryUrl()) {
+                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+                }
+
+                pom.project {
+                    name POM_NAME
+                    packaging POM_PACKAGING
+                    description POM_DESCRIPTION
+                    url POM_URL
+
+                    scm {
+                        url POM_SCM_URL
+                        connection POM_SCM_CONNECTION
+                        developerConnection POM_SCM_DEV_CONNECTION
+                    }
+
+                    licenses {
+                        license {
+                            name POM_LICENCE_NAME
+                            url POM_LICENCE_URL
+                            distribution POM_LICENCE_DIST
+                        }
+                    }
+
+                    developers {
+                        developer {
+                            id POM_DEVELOPER_ID
+                            name POM_DEVELOPER_NAME
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    signing {
+        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
+        sign configurations.archives
+    }
+
+    //task androidJavadocs(type: Javadoc) {
+    //source = android.sourceSets.main.allJava
+    //}
+
+    //task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
+    //classifier = 'javadoc'
+    //from androidJavadocs.destinationDir
+    //}
+
+    task androidSourcesJar(type: Jar) {
+        classifier = 'sources'
+        from android.sourceSets.main.java.sourceFiles
+    }
+
+    artifacts {
+        archives androidSourcesJar
+    }
+}
 
 android {
     compileSdkVersion 21
