diff --git a/jobqueue/build.gradle b/jobqueue/build.gradle
index 775676f..382aae8 100644
--- a/jobqueue/build.gradle
+++ b/jobqueue/build.gradle
@@ -5,6 +5,7 @@ apply plugin: 'com.android.library'
 Properties releaseConfig = new Properties()
 releaseConfig.load(new FileInputStream("${projectDir}/releaseConfig.properties"))
 ext.releaseConfig = releaseConfig
+
 task wrapper(type: Wrapper) {
     gradleVersion = '2.2.1'
 }
@@ -43,8 +44,8 @@ dependencies {
 }
 
 android {
-    compileSdkVersion 21
-    buildToolsVersion "22.0.1"
+    compileSdkVersion 23
+    buildToolsVersion "23.0.1"
     buildTypes {
         debug {
             testCoverageEnabled = true
@@ -67,10 +68,11 @@ def manifestVersionName = matcher.group(1)
 println "version name:${manifestVersionName}"
 
 //create jar tasks
+
 android.libraryVariants.all { variant ->
     def name = variant.buildType.name
     println "checking variant ${name}"
-    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
+    if (variant.buildType.isDebuggable()) {
         return; // Skip debug builds.
     }
     def suffix = name.capitalize()
diff --git a/jobqueue/gradle/wrapper/gradle-wrapper.properties b/jobqueue/gradle/wrapper/gradle-wrapper.properties
index d17e36c..515adf0 100644
--- a/jobqueue/gradle/wrapper/gradle-wrapper.properties
+++ b/jobqueue/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Fri Jul 03 10:16:32 PDT 2015
+#Tue Nov 03 10:23:29 EST 2015
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-bin.zip
diff --git a/jobqueue/src/main/java/com/path/android/jobqueue/network/NetworkUtilImpl.java b/jobqueue/src/main/java/com/path/android/jobqueue/network/NetworkUtilImpl.java
index b5422a5..a56c072 100644
--- a/jobqueue/src/main/java/com/path/android/jobqueue/network/NetworkUtilImpl.java
+++ b/jobqueue/src/main/java/com/path/android/jobqueue/network/NetworkUtilImpl.java
@@ -1,11 +1,14 @@
 package com.path.android.jobqueue.network;
 
+import android.annotation.TargetApi;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
+import android.os.Build.VERSION;
+import android.os.PowerManager;
 
 /**
  * default implementation for network Utility to observe network events
@@ -24,16 +27,43 @@ public void onReceive(Context context, Intent intent) {
                 // through getActiveNetworkInfo() or getAllNetworkInfo().
                 listener.onNetworkChange(isConnected(context));
             }
-        }, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
+        }, getNetworkIntentFilter());
     }
 
     @Override
     public boolean isConnected(Context context) {
+        if (isDozing(context)) {
+            return false;
+        }
+
         ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
         NetworkInfo netInfo = cm.getActiveNetworkInfo();
         return netInfo != null && netInfo.isConnectedOrConnecting();
     }
 
+    @TargetApi(23)
+    private static IntentFilter getNetworkIntentFilter() {
+        IntentFilter networkIntentFilter = new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
+        if (VERSION.SDK_INT >= 23) {
+            networkIntentFilter.addAction(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
+        }
+        return networkIntentFilter;
+    }
+
+    /**
+     * Returns true if the device is in Doze/Idle mode. Should be called before checking the network connection because
+     * the ConnectionManager may report the device is connected when it isn't during Idle mode.
+     */
+    @TargetApi(23)
+    private static boolean isDozing(Context context) {
+        if (VERSION.SDK_INT >= 23) {
+            PowerManager powerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
+            return powerManager.isDeviceIdleMode();
+        } else {
+            return false;
+        }
+    }
+
     @Override
     public void setListener(Listener listener) {
         this.listener = listener;
