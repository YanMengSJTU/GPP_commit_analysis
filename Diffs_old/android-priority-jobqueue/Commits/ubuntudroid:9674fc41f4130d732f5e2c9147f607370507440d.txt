diff --git a/jobqueue/src/com/path/android/jobqueue/BaseJob.java b/jobqueue/src/com/path/android/jobqueue/BaseJob.java
index 0343605..30400f0 100644
--- a/jobqueue/src/com/path/android/jobqueue/BaseJob.java
+++ b/jobqueue/src/com/path/android/jobqueue/BaseJob.java
@@ -69,8 +69,9 @@ public final boolean isPersistent() {
      * this means job will eventually run. this is a good time to update local database and dispatch events
      * Changes to this class will not be preserved if your job is persistent !!!
      * Also, if your app crashes right after adding the job, {@code onRun} might be called without an {@code onAdded} call
+     * @param id the job's ID which can be used to check the job's status
      */
-    abstract public void onAdded();
+    abstract public void onAdded(String id);
 
     /**
      * The actual method that should to the work
diff --git a/jobqueue/src/com/path/android/jobqueue/JobManager.java b/jobqueue/src/com/path/android/jobqueue/JobManager.java
index 1ac6968..3cc8863 100644
--- a/jobqueue/src/com/path/android/jobqueue/JobManager.java
+++ b/jobqueue/src/com/path/android/jobqueue/JobManager.java
@@ -514,7 +514,7 @@ public long addJob(int priority, long delay, BaseJob baseJob) {
             //inject members b4 calling onAdded
             dependencyInjector.inject(baseJob);
         }
-        jobHolder.getBaseJob().onAdded();
+        jobHolder.getBaseJob().onAdded(id);
         if(baseJob.isPersistent()) {
             synchronized (persistentJobQueue) {
                 clearOnAddedLock(persistentOnAddedLocks, id);
