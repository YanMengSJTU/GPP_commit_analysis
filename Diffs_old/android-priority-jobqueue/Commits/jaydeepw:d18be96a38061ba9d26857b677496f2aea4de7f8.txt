diff --git a/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java b/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
index 756a513..92c0281 100644
--- a/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
+++ b/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
@@ -622,7 +622,7 @@ public JobQueue createNonPersistent(Context context, Long sessionId, String id)
      * @param isPersistent
      * @return
      */
-    public JobHolder findJobById(Long id, boolean isPersistent) {
+    public Job findJobById(Long id, boolean isPersistent) {
         JobHolder holder;
         if (isPersistent) {
             synchronized (persistentJobQueue) {
@@ -633,12 +633,19 @@ public JobHolder findJobById(Long id, boolean isPersistent) {
                 holder = nonPersistentJobQueue.findJobById(id);
             }
         }
-        return holder;
+        return (Job) holder.getBaseJob();
     }
 
-    public ArrayList<JobHolder> getAllJobs(boolean isPersistent) {
-        // TODO: provide the implementation for this.
-        return new ArrayList<JobHolder>();
+    public ArrayList<Job> getAllJobs(boolean isPersistent) {
+        if (isPersistent) {
+            synchronized (persistentJobQueue) {
+                return persistentJobQueue.getAllJobs();
+            }
+        } else {
+            synchronized (nonPersistentJobQueue) {
+                return nonPersistentJobQueue.getAllJobs();
+            }
+        }
     }
 
 }
diff --git a/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/JobQueue.java b/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/JobQueue.java
index 066e136..4fc1685 100644
--- a/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/JobQueue.java
+++ b/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/JobQueue.java
@@ -1,5 +1,6 @@
 package com.path.android.jobqueue;
 
+import java.util.ArrayList;
 import java.util.Collection;
 
 /**
@@ -79,5 +80,5 @@
      */
     JobHolder findJobById(long id);
 
-    JobHolder getAllJobs();
+    ArrayList<Job> getAllJobs();
 }
diff --git a/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/cachedQueue/CachedJobQueue.java b/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/cachedQueue/CachedJobQueue.java
index eaa3ee7..af3cc4e 100644
--- a/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/cachedQueue/CachedJobQueue.java
+++ b/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/cachedQueue/CachedJobQueue.java
@@ -1,8 +1,10 @@
 package com.path.android.jobqueue.cachedQueue;
 
+import com.path.android.jobqueue.Job;
 import com.path.android.jobqueue.JobHolder;
 import com.path.android.jobqueue.JobQueue;
 
+import java.util.ArrayList;
 import java.util.Collection;
 
 /**
@@ -99,8 +101,8 @@ public JobHolder findJobById(long id) {
     }
 
     @Override
-    public JobHolder getAllJobs() {
-        return null;
+    public ArrayList<Job> getAllJobs() {
+        return delegate.getAllJobs();
     }
 
     private static class Cache {
diff --git a/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/nonPersistentQueue/NonPersistentPriorityQueue.java b/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/nonPersistentQueue/NonPersistentPriorityQueue.java
index 5fc7b3c..5280f49 100644
--- a/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/nonPersistentQueue/NonPersistentPriorityQueue.java
+++ b/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/nonPersistentQueue/NonPersistentPriorityQueue.java
@@ -1,5 +1,6 @@
 package com.path.android.jobqueue.nonPersistentQueue;
 
+import com.path.android.jobqueue.Job;
 import com.path.android.jobqueue.JobHolder;
 import com.path.android.jobqueue.JobManager;
 import com.path.android.jobqueue.JobQueue;
@@ -149,7 +150,7 @@ private static int compareLong(long l1, long l2) {
     }
 
     @Override
-    public JobHolder getAllJobs() {
+    public ArrayList<Job> getAllJobs() {
         return null;
     }
 
diff --git a/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqlHelper.java b/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqlHelper.java
index 50e3ad7..0454367 100644
--- a/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqlHelper.java
+++ b/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqlHelper.java
@@ -10,6 +10,7 @@
 public class SqlHelper {
 
     /**package**/ String FIND_BY_ID_QUERY;
+    /**package**/ String FIND_ALL_QUERY;
 
     private SQLiteStatement insertStatement;
     private SQLiteStatement insertOrReplaceStatement;
@@ -19,7 +20,6 @@
     private SQLiteStatement nextJobDelayedUntilWithNetworkStatement;
     private SQLiteStatement nextJobDelayedUntilWithoutNetworkStatement;
 
-
     final SQLiteDatabase db;
     final String tableName;
     final String primaryKeyColumnName;
@@ -33,6 +33,7 @@ public SqlHelper(SQLiteDatabase db, String tableName, String primaryKeyColumnNam
         this.primaryKeyColumnName = primaryKeyColumnName;
         this.sessionId = sessionId;
         FIND_BY_ID_QUERY = "SELECT * FROM " + tableName + " WHERE " + DbOpenHelper.ID_COLUMN.columnName + " = ?";
+        FIND_ALL_QUERY = "SELECT * FROM " + tableName;
     }
 
     public static String create(String tableName, Property primaryKey, Property... properties) {
diff --git a/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java b/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
index 2a8846c..82a5b92 100644
--- a/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
+++ b/EnhancedPriorityJobQueue/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
@@ -5,8 +5,10 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteDoneException;
 import android.database.sqlite.SQLiteStatement;
+import android.util.Log;
 
 import com.path.android.jobqueue.BaseJob;
+import com.path.android.jobqueue.Job;
 import com.path.android.jobqueue.JobHolder;
 import com.path.android.jobqueue.JobManager;
 import com.path.android.jobqueue.JobQueue;
@@ -18,6 +20,7 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutput;
 import java.io.ObjectOutputStream;
+import java.util.ArrayList;
 import java.util.Collection;
 
 /**
@@ -376,9 +379,32 @@ private BaseJob safeDeserialize(byte[] bytes) {
         public <T extends BaseJob> T deserialize(byte[] bytes) throws IOException, ClassNotFoundException;
     }
 
-
     @Override
-    public JobHolder getAllJobs() {
-        return null;
+    public ArrayList<Job> getAllJobs() {
+        Cursor cursor = db.rawQuery(sqlHelper.FIND_ALL_QUERY, null);
+
+        try {
+            if(cursor == null) {
+                JqLog.d(" cursor is null");
+                return null;
+            }
+
+            Log.d(SqliteJobQueue.class.getSimpleName(), " cursor count: " + cursor.getCount());
+
+            ArrayList<Job> jobs = new ArrayList<Job>();
+
+            while(cursor.moveToNext()) {
+                jobs.add((Job) createJobHolderFromCursor(cursor).getBaseJob());
+            }
+
+            return jobs;
+        } catch (InvalidBaseJobException e) {
+            JqLog.e(e, "invalid job on getAllJobs");
+            return null;
+        } finally {
+            if(cursor != null && !cursor.isClosed()) {
+                cursor.close();
+            }
+        }
     }
 }
