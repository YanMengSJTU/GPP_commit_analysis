diff --git a/README.md b/README.md
index 8c014c8..a658caa 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +1,3 @@
-![logo](http://downloads.path.com/logo.png)
-
 Android Priority Job Queue (Job Manager)
 ==========================
 
@@ -131,7 +129,7 @@ At Path, we use [greenrobot's EventBus](https://github.com/greenrobot/EventBus);
 ### Getting Started
 We distribute artifacts through maven central repository.
 
-Gradle: `compile 'com.birbit:android-priority-jobqueue:1.3.3'`
+Gradle: `compile 'com.birbit:android-priority-jobqueue:1.3.4'`
 
 Maven:
 
@@ -139,7 +137,7 @@ Maven:
 <dependency>
     <groupId>com.birbit</groupId>
     <artifactId>android-priority-jobqueue</artifactId>
-    <version>1.3.3</version>
+    <version>1.3.4</version>
 </dependency>
 ```
 
@@ -152,6 +150,8 @@ We highly recommend checking how you can configure job manager and individual jo
 * [Review sample configuration][7]
 
 ### Version History
+  - 1.3.4 (Sept 12, 2015)
+   - Fixed a potential ANR that was caused by sync on main thread. Issue #40
   - 1.3.3 (July 12, 2015)
    - Fixed default exponential backoff. Issue #33
   - 1.3.2 (July 5, 2015)
diff --git a/examples/twitter/TwitterClient/build.gradle b/examples/twitter/TwitterClient/build.gradle
index cdc0a8d..d2b3aed 100644
--- a/examples/twitter/TwitterClient/build.gradle
+++ b/examples/twitter/TwitterClient/build.gradle
@@ -1,19 +1,14 @@
-task wrapper(type: Wrapper) {
-    gradleVersion = '1.10'
-}
-
-
 buildscript {
     repositories {
         mavenCentral()
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:0.8.+'
+        classpath 'com.android.tools.build:gradle:1.3.0'
     }
 }
 
-apply plugin: 'android'
+apply plugin: 'com.android.application'
 
 repositories {
     mavenLocal()
@@ -50,7 +45,7 @@ tasks.create(name: "runTwitter", type: RunApk){
 
 android {
     compileSdkVersion 17
-    buildToolsVersion "19.0.1"
+    buildToolsVersion "23"
     defaultConfig {
         minSdkVersion 15
         targetSdkVersion 17
@@ -59,7 +54,7 @@ android {
     dependencies {
         compile 'de.greenrobot:eventbus:2.1.0-beta-1'
         compile 'org.twitter4j:twitter4j-core:3.0.5'
-        compile 'com.path:android-priority-jobqueue:1.1-SNAPSHOT'
+        compile 'com.birbit:android-priority-jobqueue:1.3.3'
         compile files('external-libs/greenDAO.jar')
     }
 
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/Config.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/Config.java
index 7c2e6a7..dbcf4be 100644
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/Config.java
+++ b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/Config.java
@@ -1,11 +1,11 @@
 package com.path.android.jobqueue.examples.twitter;
 
 public class Config {
-    public static final String CONSUMER_KEY = "APEGHy66BMYzvgEktDfc1Q";
-    public static final String CONSUMER_SECRET = "wf8XXYwivxHQtiIqPSD3lpq6po9JGRyYBIX0lT0";
+    public static final String CONSUMER_KEY = "GfonALJ3wScsJfPsjLpl5g";
+    public static final String CONSUMER_SECRET = "7EYvqptQeBQ9FFcbaPHv0WVe9rRbDi8dmX9DffIMIE";
 
-    public static final String ACCESS_TOKEN = "1443060589-ZW0lPmcN0NOwy2AchLjZjixHLhPXClYOPQ0IhWG";
-    public static final String ACCESS_TOKEN_SECRET = "Tq8aVvT1PA6PXtKHgI5v1EL5UQj3JcGlFzXla2zethjYO";
+    public static final String ACCESS_TOKEN = "1443060589-h6JU83NsHMYx5M47Is2RzlVZmvHPbxQND9xT6KQ";
+    public static final String ACCESS_TOKEN_SECRET = "QLut9Mgwge5WptlVnCz9wxmbJrqBFNazkEYrGDZKYE";
 
     public static final String REQUEST_TOKEN_URL = "https://api.twitter.com/oauth/request_token";
     public static final String AUTHORIZE_URL = "https://api.twitter.com/oauth/authorize";
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/FetchTweetsJob.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/FetchTweetsJob.java
index 0168987..f910698 100644
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/FetchTweetsJob.java
+++ b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/FetchTweetsJob.java
@@ -2,6 +2,7 @@
 
 import com.path.android.jobqueue.Job;
 import com.path.android.jobqueue.Params;
+import com.path.android.jobqueue.RetryConstraint;
 import com.path.android.jobqueue.examples.twitter.controllers.TwitterController;
 import com.path.android.jobqueue.examples.twitter.entities.Tweet;
 import com.path.android.jobqueue.examples.twitter.events.FetchedNewTweetsEvent;
@@ -56,12 +57,14 @@ protected void onCancel() {
     }
 
     @Override
-    protected boolean shouldReRunOnThrowable(Throwable throwable) {
+    protected RetryConstraint shouldReRunOnThrowable(Throwable throwable, int runCount,
+            int maxRunCount) {
         if(throwable instanceof TwitterException) {
             //if it is a 4xx error, stop
             TwitterException twitterException = (TwitterException) throwable;
-            return twitterException.getErrorCode() < 400 || twitterException.getErrorCode() > 499;
+            int errorCode = twitterException.getErrorCode();
+            return errorCode < 400 || errorCode > 499 ? RetryConstraint.RETRY : RetryConstraint.CANCEL;
         }
-        return true;
+        return RetryConstraint.RETRY;
     }
 }
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/PostTweetJob.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/PostTweetJob.java
index 2c77dd8..b4d5ae6 100644
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/PostTweetJob.java
+++ b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/PostTweetJob.java
@@ -2,6 +2,7 @@
 
 import com.path.android.jobqueue.Job;
 import com.path.android.jobqueue.Params;
+import com.path.android.jobqueue.RetryConstraint;
 import com.path.android.jobqueue.examples.twitter.controllers.TwitterController;
 import com.path.android.jobqueue.examples.twitter.entities.Tweet;
 import com.path.android.jobqueue.examples.twitter.events.DeletedTweetEvent;
@@ -73,12 +74,14 @@ protected void onCancel() {
     }
 
     @Override
-    protected boolean shouldReRunOnThrowable(Throwable throwable) {
+    protected RetryConstraint shouldReRunOnThrowable(Throwable throwable, int runCount,
+            int maxRunCount) {
         if(throwable instanceof TwitterException) {
             //if it is a 4xx error, stop
             TwitterException twitterException = (TwitterException) throwable;
-            return twitterException.getStatusCode() < 400 || twitterException.getStatusCode() > 499;
+            int errorCode = twitterException.getErrorCode();
+            return errorCode < 400 || errorCode > 499 ? RetryConstraint.RETRY : RetryConstraint.CANCEL;
         }
-        return true;
+        return RetryConstraint.RETRY;
     }
 }
diff --git a/jobqueue/src/main/AndroidManifest.xml b/jobqueue/src/main/AndroidManifest.xml
index 0a7b7c1..25d0c20 100644
--- a/jobqueue/src/main/AndroidManifest.xml
+++ b/jobqueue/src/main/AndroidManifest.xml
@@ -2,7 +2,7 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.path.android.jobqueue"
           android:versionCode="2"
-          android:versionName="1.3.3">
+          android:versionName="1.3.4">
     <application>
     </application>
 </manifest>
diff --git a/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java b/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
index ad30c02..71ecab7 100644
--- a/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
+++ b/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
@@ -48,9 +48,11 @@
     private final ConcurrentHashMap<Long, CountDownLatch> nonPersistentOnAddedLocks;
     private ScheduledExecutorService timedExecutor;
     // lazily created
+    private final Object cancelExecutorInitLock = new Object();
     private Executor cancelExecutor;
     private final Object getNextJobLock = new Object();
 
+
     /**
      * Default constructor that will create a JobManager with 1 {@link SqliteJobQueue} and 1 {@link NonPersistentPriorityQueue}
      * @param context job manager will use applicationContext.
@@ -228,7 +230,7 @@ public long addJob(Job job) {
      */
     public void cancelJobsInBackground(final CancelResult.AsyncCancelCallback cancelCallback,
             final TagConstraint constraint, final String... tags) {
-        synchronized (this) {
+        synchronized (cancelExecutorInitLock) {
             if (cancelExecutor == null) {
                 cancelExecutor = Executors.newSingleThreadExecutor();
             }
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/RetryLogicTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/RetryLogicTest.java
index cb8a309..08d0dbf 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/RetryLogicTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/RetryLogicTest.java
@@ -84,6 +84,13 @@ public void on(Job job) {
                         is(runCnt.incrementAndGet()));
             }
         };
+        retryProvider = new RetryProvider() {
+            @Override
+            public RetryConstraint build(Job job, Throwable throwable, int runCount,
+                    int maxRunCount) {
+                return RetryConstraint.RETRY;
+            }
+        };
         canRun = true;
         RetryJob job = new RetryJob(new Params(0).setPersistent(persistent));
         job.retryLimit = 10;
@@ -330,6 +337,9 @@ protected void onCancel() {
         @Override
         protected RetryConstraint shouldReRunOnThrowable(Throwable throwable, int runCount,
                 int maxRunCount) {
+            if (retryProvider != null) {
+                return retryProvider.build(this, throwable, runCount, maxRunCount);
+            }
             return RetryConstraint.createExponentialBackoff(runCount, 1000);
         }
 
